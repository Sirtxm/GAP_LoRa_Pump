
Seeed-LoRa-E5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e500  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000013fc  0801e640  0801e640  0001f640  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .USER_embedded_Keys 000000c0  0801fa3c  0801fa3c  00020a3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0801fafc  0801fafc  00021308  2**0
                  CONTENTS
  5 .ARM          00000008  0801fafc  0801fafc  00020afc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0801fb04  0801fb04  00021308  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0801fb04  0801fb04  00020b04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0801fb08  0801fb08  00020b08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000308  20000000  0801fb0c  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00002204  20000308  0801fe14  00021308  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000250c  0801fe14  0002150c  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00021308  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003eccd  00000000  00000000  00021332  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000a2c6  00000000  00000000  0005ffff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000032b0  00000000  00000000  0006a2c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002679  00000000  00000000  0006d578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000288de  00000000  00000000  0006fbf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000439c0  00000000  00000000  000984cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb5a2  00000000  00000000  000dbe8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001a7431  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000ddb0  00000000  00000000  001a7474  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000052  00000000  00000000  001b5224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000308 	.word	0x20000308
 800015c:	00000000 	.word	0x00000000
 8000160:	0801e628 	.word	0x0801e628

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000030c 	.word	0x2000030c
 800017c:	0801e628 	.word	0x0801e628

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_frsub>:
 8000b58:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b5c:	e002      	b.n	8000b64 <__addsf3>
 8000b5e:	bf00      	nop

08000b60 <__aeabi_fsub>:
 8000b60:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b64 <__addsf3>:
 8000b64:	0042      	lsls	r2, r0, #1
 8000b66:	bf1f      	itttt	ne
 8000b68:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b6c:	ea92 0f03 	teqne	r2, r3
 8000b70:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b74:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b78:	d06a      	beq.n	8000c50 <__addsf3+0xec>
 8000b7a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b7e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b82:	bfc1      	itttt	gt
 8000b84:	18d2      	addgt	r2, r2, r3
 8000b86:	4041      	eorgt	r1, r0
 8000b88:	4048      	eorgt	r0, r1
 8000b8a:	4041      	eorgt	r1, r0
 8000b8c:	bfb8      	it	lt
 8000b8e:	425b      	neglt	r3, r3
 8000b90:	2b19      	cmp	r3, #25
 8000b92:	bf88      	it	hi
 8000b94:	4770      	bxhi	lr
 8000b96:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b9e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000baa:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bae:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4249      	negne	r1, r1
 8000bb6:	ea92 0f03 	teq	r2, r3
 8000bba:	d03f      	beq.n	8000c3c <__addsf3+0xd8>
 8000bbc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bc4:	eb10 000c 	adds.w	r0, r0, ip
 8000bc8:	f1c3 0320 	rsb	r3, r3, #32
 8000bcc:	fa01 f103 	lsl.w	r1, r1, r3
 8000bd0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bd4:	d502      	bpl.n	8000bdc <__addsf3+0x78>
 8000bd6:	4249      	negs	r1, r1
 8000bd8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bdc:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000be0:	d313      	bcc.n	8000c0a <__addsf3+0xa6>
 8000be2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000be6:	d306      	bcc.n	8000bf6 <__addsf3+0x92>
 8000be8:	0840      	lsrs	r0, r0, #1
 8000bea:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bee:	f102 0201 	add.w	r2, r2, #1
 8000bf2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bf4:	d251      	bcs.n	8000c9a <__addsf3+0x136>
 8000bf6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bfa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bfe:	bf08      	it	eq
 8000c00:	f020 0001 	biceq.w	r0, r0, #1
 8000c04:	ea40 0003 	orr.w	r0, r0, r3
 8000c08:	4770      	bx	lr
 8000c0a:	0049      	lsls	r1, r1, #1
 8000c0c:	eb40 0000 	adc.w	r0, r0, r0
 8000c10:	3a01      	subs	r2, #1
 8000c12:	bf28      	it	cs
 8000c14:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c18:	d2ed      	bcs.n	8000bf6 <__addsf3+0x92>
 8000c1a:	fab0 fc80 	clz	ip, r0
 8000c1e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c22:	ebb2 020c 	subs.w	r2, r2, ip
 8000c26:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c2a:	bfaa      	itet	ge
 8000c2c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c30:	4252      	neglt	r2, r2
 8000c32:	4318      	orrge	r0, r3
 8000c34:	bfbc      	itt	lt
 8000c36:	40d0      	lsrlt	r0, r2
 8000c38:	4318      	orrlt	r0, r3
 8000c3a:	4770      	bx	lr
 8000c3c:	f092 0f00 	teq	r2, #0
 8000c40:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c44:	bf06      	itte	eq
 8000c46:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c4a:	3201      	addeq	r2, #1
 8000c4c:	3b01      	subne	r3, #1
 8000c4e:	e7b5      	b.n	8000bbc <__addsf3+0x58>
 8000c50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c58:	bf18      	it	ne
 8000c5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c5e:	d021      	beq.n	8000ca4 <__addsf3+0x140>
 8000c60:	ea92 0f03 	teq	r2, r3
 8000c64:	d004      	beq.n	8000c70 <__addsf3+0x10c>
 8000c66:	f092 0f00 	teq	r2, #0
 8000c6a:	bf08      	it	eq
 8000c6c:	4608      	moveq	r0, r1
 8000c6e:	4770      	bx	lr
 8000c70:	ea90 0f01 	teq	r0, r1
 8000c74:	bf1c      	itt	ne
 8000c76:	2000      	movne	r0, #0
 8000c78:	4770      	bxne	lr
 8000c7a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c7e:	d104      	bne.n	8000c8a <__addsf3+0x126>
 8000c80:	0040      	lsls	r0, r0, #1
 8000c82:	bf28      	it	cs
 8000c84:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c88:	4770      	bx	lr
 8000c8a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c8e:	bf3c      	itt	cc
 8000c90:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bxcc	lr
 8000c96:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c9a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c9e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca2:	4770      	bx	lr
 8000ca4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca8:	bf16      	itet	ne
 8000caa:	4608      	movne	r0, r1
 8000cac:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cb0:	4601      	movne	r1, r0
 8000cb2:	0242      	lsls	r2, r0, #9
 8000cb4:	bf06      	itte	eq
 8000cb6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cba:	ea90 0f01 	teqeq	r0, r1
 8000cbe:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cc2:	4770      	bx	lr

08000cc4 <__aeabi_ui2f>:
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	e004      	b.n	8000cd4 <__aeabi_i2f+0x8>
 8000cca:	bf00      	nop

08000ccc <__aeabi_i2f>:
 8000ccc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000cd0:	bf48      	it	mi
 8000cd2:	4240      	negmi	r0, r0
 8000cd4:	ea5f 0c00 	movs.w	ip, r0
 8000cd8:	bf08      	it	eq
 8000cda:	4770      	bxeq	lr
 8000cdc:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000ce0:	4601      	mov	r1, r0
 8000ce2:	f04f 0000 	mov.w	r0, #0
 8000ce6:	e01c      	b.n	8000d22 <__aeabi_l2f+0x2a>

08000ce8 <__aeabi_ul2f>:
 8000ce8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cec:	bf08      	it	eq
 8000cee:	4770      	bxeq	lr
 8000cf0:	f04f 0300 	mov.w	r3, #0
 8000cf4:	e00a      	b.n	8000d0c <__aeabi_l2f+0x14>
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_l2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d04:	d502      	bpl.n	8000d0c <__aeabi_l2f+0x14>
 8000d06:	4240      	negs	r0, r0
 8000d08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0c:	ea5f 0c01 	movs.w	ip, r1
 8000d10:	bf02      	ittt	eq
 8000d12:	4684      	moveq	ip, r0
 8000d14:	4601      	moveq	r1, r0
 8000d16:	2000      	moveq	r0, #0
 8000d18:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d1c:	bf08      	it	eq
 8000d1e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d22:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d26:	fabc f28c 	clz	r2, ip
 8000d2a:	3a08      	subs	r2, #8
 8000d2c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d30:	db10      	blt.n	8000d54 <__aeabi_l2f+0x5c>
 8000d32:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d36:	4463      	add	r3, ip
 8000d38:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d3c:	f1c2 0220 	rsb	r2, r2, #32
 8000d40:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d44:	fa20 f202 	lsr.w	r2, r0, r2
 8000d48:	eb43 0002 	adc.w	r0, r3, r2
 8000d4c:	bf08      	it	eq
 8000d4e:	f020 0001 	biceq.w	r0, r0, #1
 8000d52:	4770      	bx	lr
 8000d54:	f102 0220 	add.w	r2, r2, #32
 8000d58:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5c:	f1c2 0220 	rsb	r2, r2, #32
 8000d60:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d64:	fa21 f202 	lsr.w	r2, r1, r2
 8000d68:	eb43 0002 	adc.w	r0, r3, r2
 8000d6c:	bf08      	it	eq
 8000d6e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d72:	4770      	bx	lr

08000d74 <__aeabi_f2iz>:
 8000d74:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d78:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000d7c:	d30f      	bcc.n	8000d9e <__aeabi_f2iz+0x2a>
 8000d7e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000d82:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d86:	d90d      	bls.n	8000da4 <__aeabi_f2iz+0x30>
 8000d88:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d8c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000d90:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000d94:	fa23 f002 	lsr.w	r0, r3, r2
 8000d98:	bf18      	it	ne
 8000d9a:	4240      	negne	r0, r0
 8000d9c:	4770      	bx	lr
 8000d9e:	f04f 0000 	mov.w	r0, #0
 8000da2:	4770      	bx	lr
 8000da4:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000da8:	d101      	bne.n	8000dae <__aeabi_f2iz+0x3a>
 8000daa:	0242      	lsls	r2, r0, #9
 8000dac:	d105      	bne.n	8000dba <__aeabi_f2iz+0x46>
 8000dae:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000db8:	4770      	bx	lr
 8000dba:	f04f 0000 	mov.w	r0, #0
 8000dbe:	4770      	bx	lr

08000dc0 <__aeabi_uldivmod>:
 8000dc0:	b953      	cbnz	r3, 8000dd8 <__aeabi_uldivmod+0x18>
 8000dc2:	b94a      	cbnz	r2, 8000dd8 <__aeabi_uldivmod+0x18>
 8000dc4:	2900      	cmp	r1, #0
 8000dc6:	bf08      	it	eq
 8000dc8:	2800      	cmpeq	r0, #0
 8000dca:	bf1c      	itt	ne
 8000dcc:	f04f 31ff 	movne.w	r1, #4294967295
 8000dd0:	f04f 30ff 	movne.w	r0, #4294967295
 8000dd4:	f000 b988 	b.w	80010e8 <__aeabi_idiv0>
 8000dd8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ddc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000de0:	f000 f806 	bl	8000df0 <__udivmoddi4>
 8000de4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000de8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000dec:	b004      	add	sp, #16
 8000dee:	4770      	bx	lr

08000df0 <__udivmoddi4>:
 8000df0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000df4:	9d08      	ldr	r5, [sp, #32]
 8000df6:	468e      	mov	lr, r1
 8000df8:	4604      	mov	r4, r0
 8000dfa:	4688      	mov	r8, r1
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d14a      	bne.n	8000e96 <__udivmoddi4+0xa6>
 8000e00:	428a      	cmp	r2, r1
 8000e02:	4617      	mov	r7, r2
 8000e04:	d962      	bls.n	8000ecc <__udivmoddi4+0xdc>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	b14e      	cbz	r6, 8000e20 <__udivmoddi4+0x30>
 8000e0c:	f1c6 0320 	rsb	r3, r6, #32
 8000e10:	fa01 f806 	lsl.w	r8, r1, r6
 8000e14:	fa20 f303 	lsr.w	r3, r0, r3
 8000e18:	40b7      	lsls	r7, r6
 8000e1a:	ea43 0808 	orr.w	r8, r3, r8
 8000e1e:	40b4      	lsls	r4, r6
 8000e20:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e24:	fa1f fc87 	uxth.w	ip, r7
 8000e28:	fbb8 f1fe 	udiv	r1, r8, lr
 8000e2c:	0c23      	lsrs	r3, r4, #16
 8000e2e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000e32:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e36:	fb01 f20c 	mul.w	r2, r1, ip
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x62>
 8000e3e:	18fb      	adds	r3, r7, r3
 8000e40:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e44:	f080 80ea 	bcs.w	800101c <__udivmoddi4+0x22c>
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	f240 80e7 	bls.w	800101c <__udivmoddi4+0x22c>
 8000e4e:	3902      	subs	r1, #2
 8000e50:	443b      	add	r3, r7
 8000e52:	1a9a      	subs	r2, r3, r2
 8000e54:	b2a3      	uxth	r3, r4
 8000e56:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e5a:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e62:	fb00 fc0c 	mul.w	ip, r0, ip
 8000e66:	459c      	cmp	ip, r3
 8000e68:	d909      	bls.n	8000e7e <__udivmoddi4+0x8e>
 8000e6a:	18fb      	adds	r3, r7, r3
 8000e6c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e70:	f080 80d6 	bcs.w	8001020 <__udivmoddi4+0x230>
 8000e74:	459c      	cmp	ip, r3
 8000e76:	f240 80d3 	bls.w	8001020 <__udivmoddi4+0x230>
 8000e7a:	443b      	add	r3, r7
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e82:	eba3 030c 	sub.w	r3, r3, ip
 8000e86:	2100      	movs	r1, #0
 8000e88:	b11d      	cbz	r5, 8000e92 <__udivmoddi4+0xa2>
 8000e8a:	40f3      	lsrs	r3, r6
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	e9c5 3200 	strd	r3, r2, [r5]
 8000e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e96:	428b      	cmp	r3, r1
 8000e98:	d905      	bls.n	8000ea6 <__udivmoddi4+0xb6>
 8000e9a:	b10d      	cbz	r5, 8000ea0 <__udivmoddi4+0xb0>
 8000e9c:	e9c5 0100 	strd	r0, r1, [r5]
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	4608      	mov	r0, r1
 8000ea4:	e7f5      	b.n	8000e92 <__udivmoddi4+0xa2>
 8000ea6:	fab3 f183 	clz	r1, r3
 8000eaa:	2900      	cmp	r1, #0
 8000eac:	d146      	bne.n	8000f3c <__udivmoddi4+0x14c>
 8000eae:	4573      	cmp	r3, lr
 8000eb0:	d302      	bcc.n	8000eb8 <__udivmoddi4+0xc8>
 8000eb2:	4282      	cmp	r2, r0
 8000eb4:	f200 8105 	bhi.w	80010c2 <__udivmoddi4+0x2d2>
 8000eb8:	1a84      	subs	r4, r0, r2
 8000eba:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ebe:	2001      	movs	r0, #1
 8000ec0:	4690      	mov	r8, r2
 8000ec2:	2d00      	cmp	r5, #0
 8000ec4:	d0e5      	beq.n	8000e92 <__udivmoddi4+0xa2>
 8000ec6:	e9c5 4800 	strd	r4, r8, [r5]
 8000eca:	e7e2      	b.n	8000e92 <__udivmoddi4+0xa2>
 8000ecc:	2a00      	cmp	r2, #0
 8000ece:	f000 8090 	beq.w	8000ff2 <__udivmoddi4+0x202>
 8000ed2:	fab2 f682 	clz	r6, r2
 8000ed6:	2e00      	cmp	r6, #0
 8000ed8:	f040 80a4 	bne.w	8001024 <__udivmoddi4+0x234>
 8000edc:	1a8a      	subs	r2, r1, r2
 8000ede:	0c03      	lsrs	r3, r0, #16
 8000ee0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ee4:	b280      	uxth	r0, r0
 8000ee6:	b2bc      	uxth	r4, r7
 8000ee8:	2101      	movs	r1, #1
 8000eea:	fbb2 fcfe 	udiv	ip, r2, lr
 8000eee:	fb0e 221c 	mls	r2, lr, ip, r2
 8000ef2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ef6:	fb04 f20c 	mul.w	r2, r4, ip
 8000efa:	429a      	cmp	r2, r3
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x11e>
 8000efe:	18fb      	adds	r3, r7, r3
 8000f00:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000f04:	d202      	bcs.n	8000f0c <__udivmoddi4+0x11c>
 8000f06:	429a      	cmp	r2, r3
 8000f08:	f200 80e0 	bhi.w	80010cc <__udivmoddi4+0x2dc>
 8000f0c:	46c4      	mov	ip, r8
 8000f0e:	1a9b      	subs	r3, r3, r2
 8000f10:	fbb3 f2fe 	udiv	r2, r3, lr
 8000f14:	fb0e 3312 	mls	r3, lr, r2, r3
 8000f18:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000f1c:	fb02 f404 	mul.w	r4, r2, r4
 8000f20:	429c      	cmp	r4, r3
 8000f22:	d907      	bls.n	8000f34 <__udivmoddi4+0x144>
 8000f24:	18fb      	adds	r3, r7, r3
 8000f26:	f102 30ff 	add.w	r0, r2, #4294967295
 8000f2a:	d202      	bcs.n	8000f32 <__udivmoddi4+0x142>
 8000f2c:	429c      	cmp	r4, r3
 8000f2e:	f200 80ca 	bhi.w	80010c6 <__udivmoddi4+0x2d6>
 8000f32:	4602      	mov	r2, r0
 8000f34:	1b1b      	subs	r3, r3, r4
 8000f36:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000f3a:	e7a5      	b.n	8000e88 <__udivmoddi4+0x98>
 8000f3c:	f1c1 0620 	rsb	r6, r1, #32
 8000f40:	408b      	lsls	r3, r1
 8000f42:	fa22 f706 	lsr.w	r7, r2, r6
 8000f46:	431f      	orrs	r7, r3
 8000f48:	fa0e f401 	lsl.w	r4, lr, r1
 8000f4c:	fa20 f306 	lsr.w	r3, r0, r6
 8000f50:	fa2e fe06 	lsr.w	lr, lr, r6
 8000f54:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000f58:	4323      	orrs	r3, r4
 8000f5a:	fa00 f801 	lsl.w	r8, r0, r1
 8000f5e:	fa1f fc87 	uxth.w	ip, r7
 8000f62:	fbbe f0f9 	udiv	r0, lr, r9
 8000f66:	0c1c      	lsrs	r4, r3, #16
 8000f68:	fb09 ee10 	mls	lr, r9, r0, lr
 8000f6c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000f70:	fb00 fe0c 	mul.w	lr, r0, ip
 8000f74:	45a6      	cmp	lr, r4
 8000f76:	fa02 f201 	lsl.w	r2, r2, r1
 8000f7a:	d909      	bls.n	8000f90 <__udivmoddi4+0x1a0>
 8000f7c:	193c      	adds	r4, r7, r4
 8000f7e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000f82:	f080 809c 	bcs.w	80010be <__udivmoddi4+0x2ce>
 8000f86:	45a6      	cmp	lr, r4
 8000f88:	f240 8099 	bls.w	80010be <__udivmoddi4+0x2ce>
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	443c      	add	r4, r7
 8000f90:	eba4 040e 	sub.w	r4, r4, lr
 8000f94:	fa1f fe83 	uxth.w	lr, r3
 8000f98:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f9c:	fb09 4413 	mls	r4, r9, r3, r4
 8000fa0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000fa4:	fb03 fc0c 	mul.w	ip, r3, ip
 8000fa8:	45a4      	cmp	ip, r4
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x1ce>
 8000fac:	193c      	adds	r4, r7, r4
 8000fae:	f103 3eff 	add.w	lr, r3, #4294967295
 8000fb2:	f080 8082 	bcs.w	80010ba <__udivmoddi4+0x2ca>
 8000fb6:	45a4      	cmp	ip, r4
 8000fb8:	d97f      	bls.n	80010ba <__udivmoddi4+0x2ca>
 8000fba:	3b02      	subs	r3, #2
 8000fbc:	443c      	add	r4, r7
 8000fbe:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000fc2:	eba4 040c 	sub.w	r4, r4, ip
 8000fc6:	fba0 ec02 	umull	lr, ip, r0, r2
 8000fca:	4564      	cmp	r4, ip
 8000fcc:	4673      	mov	r3, lr
 8000fce:	46e1      	mov	r9, ip
 8000fd0:	d362      	bcc.n	8001098 <__udivmoddi4+0x2a8>
 8000fd2:	d05f      	beq.n	8001094 <__udivmoddi4+0x2a4>
 8000fd4:	b15d      	cbz	r5, 8000fee <__udivmoddi4+0x1fe>
 8000fd6:	ebb8 0203 	subs.w	r2, r8, r3
 8000fda:	eb64 0409 	sbc.w	r4, r4, r9
 8000fde:	fa04 f606 	lsl.w	r6, r4, r6
 8000fe2:	fa22 f301 	lsr.w	r3, r2, r1
 8000fe6:	431e      	orrs	r6, r3
 8000fe8:	40cc      	lsrs	r4, r1
 8000fea:	e9c5 6400 	strd	r6, r4, [r5]
 8000fee:	2100      	movs	r1, #0
 8000ff0:	e74f      	b.n	8000e92 <__udivmoddi4+0xa2>
 8000ff2:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ff6:	0c01      	lsrs	r1, r0, #16
 8000ff8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ffc:	b280      	uxth	r0, r0
 8000ffe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8001002:	463b      	mov	r3, r7
 8001004:	4638      	mov	r0, r7
 8001006:	463c      	mov	r4, r7
 8001008:	46b8      	mov	r8, r7
 800100a:	46be      	mov	lr, r7
 800100c:	2620      	movs	r6, #32
 800100e:	fbb1 f1f7 	udiv	r1, r1, r7
 8001012:	eba2 0208 	sub.w	r2, r2, r8
 8001016:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800101a:	e766      	b.n	8000eea <__udivmoddi4+0xfa>
 800101c:	4601      	mov	r1, r0
 800101e:	e718      	b.n	8000e52 <__udivmoddi4+0x62>
 8001020:	4610      	mov	r0, r2
 8001022:	e72c      	b.n	8000e7e <__udivmoddi4+0x8e>
 8001024:	f1c6 0220 	rsb	r2, r6, #32
 8001028:	fa2e f302 	lsr.w	r3, lr, r2
 800102c:	40b7      	lsls	r7, r6
 800102e:	40b1      	lsls	r1, r6
 8001030:	fa20 f202 	lsr.w	r2, r0, r2
 8001034:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001038:	430a      	orrs	r2, r1
 800103a:	fbb3 f8fe 	udiv	r8, r3, lr
 800103e:	b2bc      	uxth	r4, r7
 8001040:	fb0e 3318 	mls	r3, lr, r8, r3
 8001044:	0c11      	lsrs	r1, r2, #16
 8001046:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800104a:	fb08 f904 	mul.w	r9, r8, r4
 800104e:	40b0      	lsls	r0, r6
 8001050:	4589      	cmp	r9, r1
 8001052:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8001056:	b280      	uxth	r0, r0
 8001058:	d93e      	bls.n	80010d8 <__udivmoddi4+0x2e8>
 800105a:	1879      	adds	r1, r7, r1
 800105c:	f108 3cff 	add.w	ip, r8, #4294967295
 8001060:	d201      	bcs.n	8001066 <__udivmoddi4+0x276>
 8001062:	4589      	cmp	r9, r1
 8001064:	d81f      	bhi.n	80010a6 <__udivmoddi4+0x2b6>
 8001066:	eba1 0109 	sub.w	r1, r1, r9
 800106a:	fbb1 f9fe 	udiv	r9, r1, lr
 800106e:	fb09 f804 	mul.w	r8, r9, r4
 8001072:	fb0e 1119 	mls	r1, lr, r9, r1
 8001076:	b292      	uxth	r2, r2
 8001078:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800107c:	4542      	cmp	r2, r8
 800107e:	d229      	bcs.n	80010d4 <__udivmoddi4+0x2e4>
 8001080:	18ba      	adds	r2, r7, r2
 8001082:	f109 31ff 	add.w	r1, r9, #4294967295
 8001086:	d2c4      	bcs.n	8001012 <__udivmoddi4+0x222>
 8001088:	4542      	cmp	r2, r8
 800108a:	d2c2      	bcs.n	8001012 <__udivmoddi4+0x222>
 800108c:	f1a9 0102 	sub.w	r1, r9, #2
 8001090:	443a      	add	r2, r7
 8001092:	e7be      	b.n	8001012 <__udivmoddi4+0x222>
 8001094:	45f0      	cmp	r8, lr
 8001096:	d29d      	bcs.n	8000fd4 <__udivmoddi4+0x1e4>
 8001098:	ebbe 0302 	subs.w	r3, lr, r2
 800109c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80010a0:	3801      	subs	r0, #1
 80010a2:	46e1      	mov	r9, ip
 80010a4:	e796      	b.n	8000fd4 <__udivmoddi4+0x1e4>
 80010a6:	eba7 0909 	sub.w	r9, r7, r9
 80010aa:	4449      	add	r1, r9
 80010ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80010b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80010b4:	fb09 f804 	mul.w	r8, r9, r4
 80010b8:	e7db      	b.n	8001072 <__udivmoddi4+0x282>
 80010ba:	4673      	mov	r3, lr
 80010bc:	e77f      	b.n	8000fbe <__udivmoddi4+0x1ce>
 80010be:	4650      	mov	r0, sl
 80010c0:	e766      	b.n	8000f90 <__udivmoddi4+0x1a0>
 80010c2:	4608      	mov	r0, r1
 80010c4:	e6fd      	b.n	8000ec2 <__udivmoddi4+0xd2>
 80010c6:	443b      	add	r3, r7
 80010c8:	3a02      	subs	r2, #2
 80010ca:	e733      	b.n	8000f34 <__udivmoddi4+0x144>
 80010cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80010d0:	443b      	add	r3, r7
 80010d2:	e71c      	b.n	8000f0e <__udivmoddi4+0x11e>
 80010d4:	4649      	mov	r1, r9
 80010d6:	e79c      	b.n	8001012 <__udivmoddi4+0x222>
 80010d8:	eba1 0109 	sub.w	r1, r1, r9
 80010dc:	46c4      	mov	ip, r8
 80010de:	fbb1 f9fe 	udiv	r9, r1, lr
 80010e2:	fb09 f804 	mul.w	r8, r9, r4
 80010e6:	e7c4      	b.n	8001072 <__udivmoddi4+0x282>

080010e8 <__aeabi_idiv0>:
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop

080010ec <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b085      	sub	sp, #20
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80010f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80010f8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80010fa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4313      	orrs	r3, r2
 8001102:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001104:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001108:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4013      	ands	r3, r2
 800110e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001110:	68fb      	ldr	r3, [r7, #12]
}
 8001112:	bf00      	nop
 8001114:	3714      	adds	r7, #20
 8001116:	46bd      	mov	sp, r7
 8001118:	bc80      	pop	{r7}
 800111a:	4770      	bx	lr

0800111c <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8001124:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001128:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	43db      	mvns	r3, r3
 800112e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001132:	4013      	ands	r3, r2
 8001134:	660b      	str	r3, [r1, #96]	@ 0x60
}
 8001136:	bf00      	nop
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	bc80      	pop	{r7}
 800113e:	4770      	bx	lr

08001140 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8001144:	4b23      	ldr	r3, [pc, #140]	@ (80011d4 <MX_ADC_Init+0x94>)
 8001146:	4a24      	ldr	r2, [pc, #144]	@ (80011d8 <MX_ADC_Init+0x98>)
 8001148:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800114a:	4b22      	ldr	r3, [pc, #136]	@ (80011d4 <MX_ADC_Init+0x94>)
 800114c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001150:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001152:	4b20      	ldr	r3, [pc, #128]	@ (80011d4 <MX_ADC_Init+0x94>)
 8001154:	2200      	movs	r2, #0
 8001156:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001158:	4b1e      	ldr	r3, [pc, #120]	@ (80011d4 <MX_ADC_Init+0x94>)
 800115a:	2200      	movs	r2, #0
 800115c:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800115e:	4b1d      	ldr	r3, [pc, #116]	@ (80011d4 <MX_ADC_Init+0x94>)
 8001160:	2200      	movs	r2, #0
 8001162:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001164:	4b1b      	ldr	r3, [pc, #108]	@ (80011d4 <MX_ADC_Init+0x94>)
 8001166:	2204      	movs	r2, #4
 8001168:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800116a:	4b1a      	ldr	r3, [pc, #104]	@ (80011d4 <MX_ADC_Init+0x94>)
 800116c:	2200      	movs	r2, #0
 800116e:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001170:	4b18      	ldr	r3, [pc, #96]	@ (80011d4 <MX_ADC_Init+0x94>)
 8001172:	2200      	movs	r2, #0
 8001174:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001176:	4b17      	ldr	r3, [pc, #92]	@ (80011d4 <MX_ADC_Init+0x94>)
 8001178:	2200      	movs	r2, #0
 800117a:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 800117c:	4b15      	ldr	r3, [pc, #84]	@ (80011d4 <MX_ADC_Init+0x94>)
 800117e:	2201      	movs	r2, #1
 8001180:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001182:	4b14      	ldr	r3, [pc, #80]	@ (80011d4 <MX_ADC_Init+0x94>)
 8001184:	2200      	movs	r2, #0
 8001186:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800118a:	4b12      	ldr	r3, [pc, #72]	@ (80011d4 <MX_ADC_Init+0x94>)
 800118c:	2200      	movs	r2, #0
 800118e:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001190:	4b10      	ldr	r3, [pc, #64]	@ (80011d4 <MX_ADC_Init+0x94>)
 8001192:	2200      	movs	r2, #0
 8001194:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001196:	4b0f      	ldr	r3, [pc, #60]	@ (80011d4 <MX_ADC_Init+0x94>)
 8001198:	2200      	movs	r2, #0
 800119a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800119e:	4b0d      	ldr	r3, [pc, #52]	@ (80011d4 <MX_ADC_Init+0x94>)
 80011a0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80011a4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 80011a6:	4b0b      	ldr	r3, [pc, #44]	@ (80011d4 <MX_ADC_Init+0x94>)
 80011a8:	2207      	movs	r2, #7
 80011aa:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 80011ac:	4b09      	ldr	r3, [pc, #36]	@ (80011d4 <MX_ADC_Init+0x94>)
 80011ae:	2207      	movs	r2, #7
 80011b0:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.OversamplingMode = DISABLE;
 80011b2:	4b08      	ldr	r3, [pc, #32]	@ (80011d4 <MX_ADC_Init+0x94>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80011ba:	4b06      	ldr	r3, [pc, #24]	@ (80011d4 <MX_ADC_Init+0x94>)
 80011bc:	2200      	movs	r2, #0
 80011be:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80011c0:	4804      	ldr	r0, [pc, #16]	@ (80011d4 <MX_ADC_Init+0x94>)
 80011c2:	f002 f95b 	bl	800347c <HAL_ADC_Init>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_ADC_Init+0x90>
  {
    Error_Handler();
 80011cc:	f000 fc68 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80011d0:	bf00      	nop
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	20000324 	.word	0x20000324
 80011d8:	40012400 	.word	0x40012400

080011dc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a05      	ldr	r2, [pc, #20]	@ (8001200 <HAL_ADC_MspInit+0x24>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d103      	bne.n	80011f6 <HAL_ADC_MspInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80011ee:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80011f2:	f7ff ff7b 	bl	80010ec <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 80011f6:	bf00      	nop
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40012400 	.word	0x40012400

08001204 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a05      	ldr	r2, [pc, #20]	@ (8001228 <HAL_ADC_MspDeInit+0x24>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d103      	bne.n	800121e <HAL_ADC_MspDeInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 8001216:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800121a:	f7ff ff7f 	bl	800111c <LL_APB2_GRP1_DisableClock>
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 800121e:	bf00      	nop
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40012400 	.word	0x40012400

0800122c <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 8001230:	4b03      	ldr	r3, [pc, #12]	@ (8001240 <SYS_InitMeasurement+0x14>)
 8001232:	4a04      	ldr	r2, [pc, #16]	@ (8001244 <SYS_InitMeasurement+0x18>)
 8001234:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 8001236:	bf00      	nop
 8001238:	46bd      	mov	sp, r7
 800123a:	bc80      	pop	{r7}
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	20000324 	.word	0x20000324
 8001244:	40012400 	.word	0x40012400

08001248 <SYS_GetBatteryLevel>:

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}

uint16_t SYS_GetBatteryLevel(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 800124e:	2300      	movs	r3, #0
 8001250:	80fb      	strh	r3, [r7, #6]
  uint32_t measuredLevel = 0;
 8001252:	2300      	movs	r3, #0
 8001254:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 8001256:	4813      	ldr	r0, [pc, #76]	@ (80012a4 <SYS_GetBatteryLevel+0x5c>)
 8001258:	f000 f82a 	bl	80012b0 <ADC_ReadChannels>
 800125c:	6038      	str	r0, [r7, #0]

  if (measuredLevel == 0)
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d102      	bne.n	800126a <SYS_GetBatteryLevel+0x22>
  {
    batteryLevelmV = 0;
 8001264:	2300      	movs	r3, #0
 8001266:	80fb      	strh	r3, [r7, #6]
 8001268:	e016      	b.n	8001298 <SYS_GetBatteryLevel+0x50>
  }
  else
  {
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 800126a:	4b0f      	ldr	r3, [pc, #60]	@ (80012a8 <SYS_GetBatteryLevel+0x60>)
 800126c:	881b      	ldrh	r3, [r3, #0]
 800126e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001272:	4293      	cmp	r3, r2
 8001274:	d00b      	beq.n	800128e <SYS_GetBatteryLevel+0x46>
    {
      /* Device with Reference voltage calibrated in production:
         use device optimized parameters */
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 8001276:	4b0c      	ldr	r3, [pc, #48]	@ (80012a8 <SYS_GetBatteryLevel+0x60>)
 8001278:	881b      	ldrh	r3, [r3, #0]
 800127a:	461a      	mov	r2, r3
 800127c:	f640 43e4 	movw	r3, #3300	@ 0xce4
 8001280:	fb03 f202 	mul.w	r2, r3, r2
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	fbb2 f3f3 	udiv	r3, r2, r3
 800128a:	80fb      	strh	r3, [r7, #6]
 800128c:	e004      	b.n	8001298 <SYS_GetBatteryLevel+0x50>
    }
    else
    {
      /* Device with Reference voltage not calibrated in production:
         use generic parameters */
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 800128e:	4a07      	ldr	r2, [pc, #28]	@ (80012ac <SYS_GetBatteryLevel+0x64>)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	fbb2 f3f3 	udiv	r3, r2, r3
 8001296:	80fb      	strh	r3, [r7, #6]
    }
  }

  return batteryLevelmV;
 8001298:	88fb      	ldrh	r3, [r7, #6]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 800129a:	4618      	mov	r0, r3
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	b4002000 	.word	0xb4002000
 80012a8:	1fff75aa 	.word	0x1fff75aa
 80012ac:	004c08d8 	.word	0x004c08d8

080012b0 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b086      	sub	sp, #24
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 80012bc:	f107 0308 	add.w	r3, r7, #8
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 80012c8:	f7ff ff3a 	bl	8001140 <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 80012cc:	481a      	ldr	r0, [pc, #104]	@ (8001338 <ADC_ReadChannels+0x88>)
 80012ce:	f002 ff04 	bl	80040da <HAL_ADCEx_Calibration_Start>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 80012d8:	f000 fbe2 	bl	8001aa0 <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012e0:	2300      	movs	r3, #0
 80012e2:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80012e4:	2300      	movs	r3, #0
 80012e6:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80012e8:	f107 0308 	add.w	r3, r7, #8
 80012ec:	4619      	mov	r1, r3
 80012ee:	4812      	ldr	r0, [pc, #72]	@ (8001338 <ADC_ReadChannels+0x88>)
 80012f0:	f002 fc10 	bl	8003b14 <HAL_ADC_ConfigChannel>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 80012fa:	f000 fbd1 	bl	8001aa0 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 80012fe:	480e      	ldr	r0, [pc, #56]	@ (8001338 <ADC_ReadChannels+0x88>)
 8001300:	f002 faec 	bl	80038dc <HAL_ADC_Start>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 800130a:	f000 fbc9 	bl	8001aa0 <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 800130e:	f04f 31ff 	mov.w	r1, #4294967295
 8001312:	4809      	ldr	r0, [pc, #36]	@ (8001338 <ADC_ReadChannels+0x88>)
 8001314:	f002 fb5a 	bl	80039cc <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 8001318:	4807      	ldr	r0, [pc, #28]	@ (8001338 <ADC_ReadChannels+0x88>)
 800131a:	f002 fb25 	bl	8003968 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 800131e:	4806      	ldr	r0, [pc, #24]	@ (8001338 <ADC_ReadChannels+0x88>)
 8001320:	f002 fbeb 	bl	8003afa <HAL_ADC_GetValue>
 8001324:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 8001326:	4804      	ldr	r0, [pc, #16]	@ (8001338 <ADC_ReadChannels+0x88>)
 8001328:	f002 fa5c 	bl	80037e4 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 800132c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 800132e:	4618      	mov	r0, r3
 8001330:	3718      	adds	r7, #24
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	20000324 	.word	0x20000324

0800133c <LL_AHB1_GRP1_EnableClock>:
{
 800133c:	b480      	push	{r7}
 800133e:	b085      	sub	sp, #20
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001344:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001348:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800134a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4313      	orrs	r3, r2
 8001352:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001354:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001358:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4013      	ands	r3, r2
 800135e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001360:	68fb      	ldr	r3, [r7, #12]
}
 8001362:	bf00      	nop
 8001364:	3714      	adds	r7, #20
 8001366:	46bd      	mov	sp, r7
 8001368:	bc80      	pop	{r7}
 800136a:	4770      	bx	lr

0800136c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001370:	2004      	movs	r0, #4
 8001372:	f7ff ffe3 	bl	800133c <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001376:	2001      	movs	r0, #1
 8001378:	f7ff ffe0 	bl	800133c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 800137c:	2200      	movs	r2, #0
 800137e:	2102      	movs	r1, #2
 8001380:	200b      	movs	r0, #11
 8001382:	f003 f850 	bl	8004426 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001386:	200b      	movs	r0, #11
 8001388:	f003 f867 	bl	800445a <HAL_NVIC_EnableIRQ>

}
 800138c:	bf00      	nop
 800138e:	bd80      	pop	{r7, pc}

08001390 <LL_FLASH_IsActiveFlag_OperationSuspended>:
  * @rmtoll FLASH_SR      PESD         LL_FLASH_IsActiveFlag_OperationSuspended
  * @rmtoll FLASH_C2SR    PESD         LL_FLASH_IsActiveFlag_OperationSuspended
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_FLASH_IsActiveFlag_OperationSuspended(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
#if defined(CORE_CM0PLUS)
  return ((READ_BIT(FLASH->C2SR, FLASH_C2SR_PESD) == (FLASH_C2SR_PESD)) ? 1UL : 0UL);
#else
  return ((READ_BIT(FLASH->SR, FLASH_SR_PESD) == (FLASH_SR_PESD)) ? 1UL : 0UL);
 8001394:	4b06      	ldr	r3, [pc, #24]	@ (80013b0 <LL_FLASH_IsActiveFlag_OperationSuspended+0x20>)
 8001396:	691b      	ldr	r3, [r3, #16]
 8001398:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800139c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80013a0:	d101      	bne.n	80013a6 <LL_FLASH_IsActiveFlag_OperationSuspended+0x16>
 80013a2:	2301      	movs	r3, #1
 80013a4:	e000      	b.n	80013a8 <LL_FLASH_IsActiveFlag_OperationSuspended+0x18>
 80013a6:	2300      	movs	r3, #0
#endif
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bc80      	pop	{r7}
 80013ae:	4770      	bx	lr
 80013b0:	58004000 	.word	0x58004000

080013b4 <FLASH_IF_Write>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t FLASH_IF_Write(uint32_t address, uint8_t *data, uint32_t size, uint8_t *dataTempPage)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b08c      	sub	sp, #48	@ 0x30
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	607a      	str	r2, [r7, #4]
 80013c0:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN FLASH_IF_Write_1 */

  /* USER CODE END FLASH_IF_Write_1 */
  int32_t status = FLASH_OK;
 80013c2:	2300      	movs	r3, #0
 80013c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t page_start_index = PAGE(address);
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	f103 4278 	add.w	r2, r3, #4160749568	@ 0xf8000000
 80013cc:	4b56      	ldr	r3, [pc, #344]	@ (8001528 <FLASH_IF_Write+0x174>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	0299      	lsls	r1, r3, #10
 80013d2:	4b56      	ldr	r3, [pc, #344]	@ (800152c <FLASH_IF_Write+0x178>)
 80013d4:	400b      	ands	r3, r1
 80013d6:	fbb2 f1f3 	udiv	r1, r2, r3
 80013da:	fb01 f303 	mul.w	r3, r1, r3
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	0adb      	lsrs	r3, r3, #11
 80013e2:	61bb      	str	r3, [r7, #24]
  uint32_t page_end_index = PAGE(address + size - 1);
 80013e4:	68fa      	ldr	r2, [r7, #12]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4413      	add	r3, r2
 80013ea:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 80013ee:	3b01      	subs	r3, #1
 80013f0:	4a4d      	ldr	r2, [pc, #308]	@ (8001528 <FLASH_IF_Write+0x174>)
 80013f2:	6812      	ldr	r2, [r2, #0]
 80013f4:	0291      	lsls	r1, r2, #10
 80013f6:	4a4d      	ldr	r2, [pc, #308]	@ (800152c <FLASH_IF_Write+0x178>)
 80013f8:	400a      	ands	r2, r1
 80013fa:	fbb3 f1f2 	udiv	r1, r3, r2
 80013fe:	fb01 f202 	mul.w	r2, r1, r2
 8001402:	1a9b      	subs	r3, r3, r2
 8001404:	0adb      	lsrs	r3, r3, #11
 8001406:	617b      	str	r3, [r7, #20]
  uint32_t curr_size = size;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t curr_dest_addr = address;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t curr_src_addr = (uint32_t)data;
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	623b      	str	r3, [r7, #32]

  if ((data == NULL) || ((size % sizeof(uint64_t)) != 0) || ((address % sizeof(uint64_t)) != 0))
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d009      	beq.n	800142e <FLASH_IF_Write+0x7a>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	f003 0307 	and.w	r3, r3, #7
 8001420:	2b00      	cmp	r3, #0
 8001422:	d104      	bne.n	800142e <FLASH_IF_Write+0x7a>
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	f003 0307 	and.w	r3, r3, #7
 800142a:	2b00      	cmp	r3, #0
 800142c:	d002      	beq.n	8001434 <FLASH_IF_Write+0x80>
  {
    return FLASH_PARAM_ERROR;
 800142e:	f06f 0304 	mvn.w	r3, #4
 8001432:	e074      	b.n	800151e <FLASH_IF_Write+0x16a>
  }

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001434:	4b3e      	ldr	r3, [pc, #248]	@ (8001530 <FLASH_IF_Write+0x17c>)
 8001436:	695b      	ldr	r3, [r3, #20]
 8001438:	2b00      	cmp	r3, #0
 800143a:	da02      	bge.n	8001442 <FLASH_IF_Write+0x8e>
  {
    return FLASH_LOCK_ERROR;
 800143c:	f06f 0303 	mvn.w	r3, #3
 8001440:	e06d      	b.n	800151e <FLASH_IF_Write+0x16a>
  }

  if (page_start_index != page_end_index)
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	429a      	cmp	r2, r3
 8001448:	d005      	beq.n	8001456 <FLASH_IF_Write+0xa2>
  {
    curr_size = FLASH_PAGE_SIZE - (address % FLASH_PAGE_SIZE);
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001450:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8001454:	62bb      	str	r3, [r7, #40]	@ 0x28
  }

  for (uint32_t idx = page_start_index; idx <= page_end_index; idx++)
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	61fb      	str	r3, [r7, #28]
 800145a:	e05b      	b.n	8001514 <FLASH_IF_Write+0x160>
  {
    if (FLASH_IF_IsEmpty((uint8_t *)curr_dest_addr, curr_size) != FLASH_EMPTY)
 800145c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800145e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001460:	4618      	mov	r0, r3
 8001462:	f000 f8f8 	bl	8001656 <FLASH_IF_IsEmpty>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d037      	beq.n	80014dc <FLASH_IF_Write+0x128>
    {
      if (dataTempPage == NULL)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d102      	bne.n	8001478 <FLASH_IF_Write+0xc4>
      {
        return FLASH_PARAM_ERROR;
 8001472:	f06f 0304 	mvn.w	r3, #4
 8001476:	e052      	b.n	800151e <FLASH_IF_Write+0x16a>
      }
      /* backup initial Flash page data in RAM area */
      UTIL_MEM_cpy_8(dataTempPage, (uint8_t *)(idx * FLASH_PAGE_SIZE + FLASH_BASE), FLASH_PAGE_SIZE);
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800147e:	02db      	lsls	r3, r3, #11
 8001480:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001484:	4619      	mov	r1, r3
 8001486:	6838      	ldr	r0, [r7, #0]
 8001488:	f019 f912 	bl	801a6b0 <UTIL_MEM_cpy_8>
      /* copy fragment into RAM area */
      UTIL_MEM_cpy_8(&dataTempPage[((uint32_t)curr_dest_addr) % FLASH_PAGE_SIZE], (uint8_t *)curr_src_addr, curr_size);
 800148c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800148e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001492:	683a      	ldr	r2, [r7, #0]
 8001494:	4413      	add	r3, r2
 8001496:	6a39      	ldr	r1, [r7, #32]
 8001498:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800149a:	b292      	uxth	r2, r2
 800149c:	4618      	mov	r0, r3
 800149e:	f019 f907 	bl	801a6b0 <UTIL_MEM_cpy_8>

      /*  erase the Flash sector, to avoid writing twice in RAM */
      if (FLASH_IF_EraseByPages(idx, 1, 0) != FLASH_OK)
 80014a2:	2200      	movs	r2, #0
 80014a4:	2101      	movs	r1, #1
 80014a6:	69f8      	ldr	r0, [r7, #28]
 80014a8:	f000 f865 	bl	8001576 <FLASH_IF_EraseByPages>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d003      	beq.n	80014ba <FLASH_IF_Write+0x106>
      {
        status = FLASH_ERASE_ERROR;
 80014b2:	f06f 0301 	mvn.w	r3, #1
 80014b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break; /* exit for loop */
 80014b8:	e030      	b.n	800151c <FLASH_IF_Write+0x168>
      }
      else
      {
        /* copy the whole flash sector including fragment from RAM to Flash*/
        if (FLASH_IF_Write_Buffer(idx * FLASH_PAGE_SIZE + FLASH_BASE, dataTempPage, FLASH_PAGE_SIZE) != FLASH_OK)
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80014c0:	02db      	lsls	r3, r3, #11
 80014c2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80014c6:	6839      	ldr	r1, [r7, #0]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f000 f88a 	bl	80015e2 <FLASH_IF_Write_Buffer>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d010      	beq.n	80014f6 <FLASH_IF_Write+0x142>
        {
          status = FLASH_WRITE_ERROR;
 80014d4:	f06f 0302 	mvn.w	r3, #2
 80014d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
          break; /* exit for loop */
 80014da:	e01f      	b.n	800151c <FLASH_IF_Write+0x168>
        }
      }
    }
    else
    {
      if (FLASH_IF_Write_Buffer(curr_dest_addr, (uint8_t *)curr_src_addr, curr_size) != FLASH_OK)
 80014dc:	6a3b      	ldr	r3, [r7, #32]
 80014de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80014e0:	4619      	mov	r1, r3
 80014e2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80014e4:	f000 f87d 	bl	80015e2 <FLASH_IF_Write_Buffer>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d003      	beq.n	80014f6 <FLASH_IF_Write+0x142>
      {
        status = FLASH_WRITE_ERROR;
 80014ee:	f06f 0302 	mvn.w	r3, #2
 80014f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break; /* exit for loop */
 80014f4:	e012      	b.n	800151c <FLASH_IF_Write+0x168>
      }
    }

    /* 2nd part of memory overlapped on 2nd flash sector */
    curr_dest_addr += curr_size;
 80014f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014fa:	4413      	add	r3, r2
 80014fc:	627b      	str	r3, [r7, #36]	@ 0x24
    curr_src_addr += curr_size;
 80014fe:	6a3a      	ldr	r2, [r7, #32]
 8001500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001502:	4413      	add	r3, r2
 8001504:	623b      	str	r3, [r7, #32]
    curr_size = size - curr_size;
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (uint32_t idx = page_start_index; idx <= page_end_index; idx++)
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	3301      	adds	r3, #1
 8001512:	61fb      	str	r3, [r7, #28]
 8001514:	69fa      	ldr	r2, [r7, #28]
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	429a      	cmp	r2, r3
 800151a:	d99f      	bls.n	800145c <FLASH_IF_Write+0xa8>
  }

  return status;
 800151c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  /* USER CODE BEGIN FLASH_IF_Write_2 */

  /* USER CODE END FLASH_IF_Write_2 */
}
 800151e:	4618      	mov	r0, r3
 8001520:	3730      	adds	r7, #48	@ 0x30
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	1fff75e0 	.word	0x1fff75e0
 800152c:	03fffc00 	.word	0x03fffc00
 8001530:	58004000 	.word	0x58004000

08001534 <FLASH_IF_Write64>:

int32_t FLASH_IF_Write64(uint32_t address, uint64_t data)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	60f8      	str	r0, [r7, #12]
 800153c:	e9c7 2300 	strd	r2, r3, [r7]
  /* USER CODE BEGIN FLASH_IF_Write64_1 */

  /* USER CODE END FLASH_IF_Write64_1 */
  while (*(uint64_t *)address != data)
 8001540:	e00b      	b.n	800155a <FLASH_IF_Write64+0x26>
  {
    while (LL_FLASH_IsActiveFlag_OperationSuspended());
 8001542:	bf00      	nop
 8001544:	f7ff ff24 	bl	8001390 <LL_FLASH_IsActiveFlag_OperationSuspended>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d1fa      	bne.n	8001544 <FLASH_IF_Write64+0x10>
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address, data);
 800154e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001552:	68f9      	ldr	r1, [r7, #12]
 8001554:	2001      	movs	r0, #1
 8001556:	f003 fb87 	bl	8004c68 <HAL_FLASH_Program>
  while (*(uint64_t *)address != data)
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001560:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001564:	4299      	cmp	r1, r3
 8001566:	bf08      	it	eq
 8001568:	4290      	cmpeq	r0, r2
 800156a:	d1ea      	bne.n	8001542 <FLASH_IF_Write64+0xe>
  }

  return FLASH_OK;
 800156c:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_Write64_2 */

  /* USER CODE END FLASH_IF_Write64_2 */
}
 800156e:	4618      	mov	r0, r3
 8001570:	3710      	adds	r7, #16
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <FLASH_IF_EraseByPages>:

int32_t FLASH_IF_EraseByPages(uint32_t page, uint16_t n, int32_t interrupt)
{
 8001576:	b580      	push	{r7, lr}
 8001578:	b08a      	sub	sp, #40	@ 0x28
 800157a:	af00      	add	r7, sp, #0
 800157c:	60f8      	str	r0, [r7, #12]
 800157e:	460b      	mov	r3, r1
 8001580:	607a      	str	r2, [r7, #4]
 8001582:	817b      	strh	r3, [r7, #10]
  /* USER CODE END FLASH_IF_EraseByPages_1 */
  HAL_StatusTypeDef hal_status;
  FLASH_EraseInitTypeDef erase_str;
  uint32_t page_error;

  erase_str.TypeErase = FLASH_TYPEERASE_PAGES;
 8001584:	2302      	movs	r3, #2
 8001586:	61bb      	str	r3, [r7, #24]
  erase_str.Page = page;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	61fb      	str	r3, [r7, #28]
  erase_str.NbPages = n;
 800158c:	897b      	ldrh	r3, [r7, #10]
 800158e:	623b      	str	r3, [r7, #32]

  /* Erase the Page */
  if (interrupt)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d008      	beq.n	80015a8 <FLASH_IF_EraseByPages+0x32>
  {
    hal_status = HAL_FLASHEx_Erase_IT(&erase_str);
 8001596:	f107 0318 	add.w	r3, r7, #24
 800159a:	4618      	mov	r0, r3
 800159c:	f003 fd02 	bl	8004fa4 <HAL_FLASHEx_Erase_IT>
 80015a0:	4603      	mov	r3, r0
 80015a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80015a6:	e00a      	b.n	80015be <FLASH_IF_EraseByPages+0x48>
  }
  else
  {
    hal_status = HAL_FLASHEx_Erase(&erase_str, &page_error);
 80015a8:	f107 0214 	add.w	r2, r7, #20
 80015ac:	f107 0318 	add.w	r3, r7, #24
 80015b0:	4611      	mov	r1, r2
 80015b2:	4618      	mov	r0, r3
 80015b4:	f003 fc9e 	bl	8004ef4 <HAL_FLASHEx_Erase>
 80015b8:	4603      	mov	r3, r0
 80015ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return ((hal_status == HAL_OK) ? FLASH_OK : ((hal_status == HAL_BUSY) ? FLASH_BUSY : FLASH_ERASE_ERROR));
 80015be:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d008      	beq.n	80015d8 <FLASH_IF_EraseByPages+0x62>
 80015c6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d101      	bne.n	80015d2 <FLASH_IF_EraseByPages+0x5c>
 80015ce:	2301      	movs	r3, #1
 80015d0:	e003      	b.n	80015da <FLASH_IF_EraseByPages+0x64>
 80015d2:	f06f 0301 	mvn.w	r3, #1
 80015d6:	e000      	b.n	80015da <FLASH_IF_EraseByPages+0x64>
 80015d8:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_EraseByPages_2 */

  /* USER CODE END FLASH_IF_EraseByPages_2 */
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3728      	adds	r7, #40	@ 0x28
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <FLASH_IF_Write_Buffer>:

/* USER CODE END EF */

/* Private Functions Definition -----------------------------------------------*/
static int32_t FLASH_IF_Write_Buffer(uint32_t pDestination, uint8_t *pSource, uint32_t uLength)
{
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b08a      	sub	sp, #40	@ 0x28
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	60f8      	str	r0, [r7, #12]
 80015ea:	60b9      	str	r1, [r7, #8]
 80015ec:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN FLASH_IF_Write_Buffer_1 */

  /* USER CODE END FLASH_IF_Write_Buffer_1 */
  uint8_t *pSrc = pSource;
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint64_t src_value;
  int32_t status = FLASH_OK;
 80015f2:	2300      	movs	r3, #0
 80015f4:	623b      	str	r3, [r7, #32]

  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 80015f6:	2300      	movs	r3, #0
 80015f8:	61fb      	str	r3, [r7, #28]
 80015fa:	e020      	b.n	800163e <FLASH_IF_Write_Buffer+0x5c>
  {
    UTIL_MEM_cpy_8(&src_value, pSrc, sizeof(uint64_t));
 80015fc:	f107 0310 	add.w	r3, r7, #16
 8001600:	2208      	movs	r2, #8
 8001602:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001604:	4618      	mov	r0, r3
 8001606:	f019 f853 	bl	801a6b0 <UTIL_MEM_cpy_8>

    /* Avoid writing 0xFFFFFFFFFFFFFFFFLL on erased Flash */
    if (src_value != UINT64_MAX)
 800160a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800160e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001612:	bf08      	it	eq
 8001614:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8001618:	d005      	beq.n	8001626 <FLASH_IF_Write_Buffer+0x44>
    {
      status = FLASH_IF_Write64(pDestination, src_value);
 800161a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800161e:	68f8      	ldr	r0, [r7, #12]
 8001620:	f7ff ff88 	bl	8001534 <FLASH_IF_Write64>
 8001624:	6238      	str	r0, [r7, #32]
    }

    pDestination += sizeof(uint64_t);
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	3308      	adds	r3, #8
 800162a:	60fb      	str	r3, [r7, #12]
    pSrc += sizeof(uint64_t);
 800162c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800162e:	3308      	adds	r3, #8
 8001630:	627b      	str	r3, [r7, #36]	@ 0x24

    if (status != FLASH_OK)
 8001632:	6a3b      	ldr	r3, [r7, #32]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d108      	bne.n	800164a <FLASH_IF_Write_Buffer+0x68>
  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	3301      	adds	r3, #1
 800163c:	61fb      	str	r3, [r7, #28]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	08db      	lsrs	r3, r3, #3
 8001642:	69fa      	ldr	r2, [r7, #28]
 8001644:	429a      	cmp	r2, r3
 8001646:	d3d9      	bcc.n	80015fc <FLASH_IF_Write_Buffer+0x1a>
 8001648:	e000      	b.n	800164c <FLASH_IF_Write_Buffer+0x6a>
    {
      /* exit the for loop*/
      break;
 800164a:	bf00      	nop
    }
  }

  return status;
 800164c:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN FLASH_IF_Write_Buffer_2 */

  /* USER CODE END FLASH_IF_Write_Buffer_2 */
}
 800164e:	4618      	mov	r0, r3
 8001650:	3728      	adds	r7, #40	@ 0x28
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <FLASH_IF_IsEmpty>:

static int32_t FLASH_IF_IsEmpty(uint8_t *addr, uint32_t size)
{
 8001656:	b480      	push	{r7}
 8001658:	b085      	sub	sp, #20
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
 800165e:	6039      	str	r1, [r7, #0]
  /* USER CODE END FLASH_IF_IsEmpty_1 */
  uint64_t *addr64;
  uint32_t i;

  /* start memory NOT 64bits aligned */
  while ((((uint32_t)addr) % sizeof(uint64_t)) != 0)
 8001660:	e00a      	b.n	8001678 <FLASH_IF_IsEmpty+0x22>
  {
    if (*addr++ != UINT8_MAX)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	1c5a      	adds	r2, r3, #1
 8001666:	607a      	str	r2, [r7, #4]
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	2bff      	cmp	r3, #255	@ 0xff
 800166c:	d001      	beq.n	8001672 <FLASH_IF_IsEmpty+0x1c>
    {
      return FLASH_NOT_EMPTY;
 800166e:	2301      	movs	r3, #1
 8001670:	e039      	b.n	80016e6 <FLASH_IF_IsEmpty+0x90>
    }
    size--;
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	3b01      	subs	r3, #1
 8001676:	603b      	str	r3, [r7, #0]
  while ((((uint32_t)addr) % sizeof(uint64_t)) != 0)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f003 0307 	and.w	r3, r3, #7
 800167e:	2b00      	cmp	r3, #0
 8001680:	d1ef      	bne.n	8001662 <FLASH_IF_IsEmpty+0xc>
  }

  /* addr64 is 64 bits aligned */
  addr64 = (uint64_t *)addr;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	60fb      	str	r3, [r7, #12]
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 8001686:	2300      	movs	r3, #0
 8001688:	60bb      	str	r3, [r7, #8]
 800168a:	e010      	b.n	80016ae <FLASH_IF_IsEmpty+0x58>
  {
    if (*addr64++ != UINT64_MAX)
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	f103 0208 	add.w	r2, r3, #8
 8001692:	60fa      	str	r2, [r7, #12]
 8001694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800169c:	bf08      	it	eq
 800169e:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 80016a2:	d001      	beq.n	80016a8 <FLASH_IF_IsEmpty+0x52>
    {
      return FLASH_NOT_EMPTY;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e01e      	b.n	80016e6 <FLASH_IF_IsEmpty+0x90>
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	3301      	adds	r3, #1
 80016ac:	60bb      	str	r3, [r7, #8]
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	08db      	lsrs	r3, r3, #3
 80016b2:	68ba      	ldr	r2, [r7, #8]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d3e9      	bcc.n	800168c <FLASH_IF_IsEmpty+0x36>
    }
  }
  size -= sizeof(uint64_t) * i;
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	00db      	lsls	r3, r3, #3
 80016bc:	683a      	ldr	r2, [r7, #0]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	603b      	str	r3, [r7, #0]

  /* end memory NOT 64 bits aligned */
  addr = (uint8_t *)addr64;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	607b      	str	r3, [r7, #4]
  while (size != 0)
 80016c6:	e00a      	b.n	80016de <FLASH_IF_IsEmpty+0x88>
  {
    if (*addr++ != UINT8_MAX)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	1c5a      	adds	r2, r3, #1
 80016cc:	607a      	str	r2, [r7, #4]
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	2bff      	cmp	r3, #255	@ 0xff
 80016d2:	d001      	beq.n	80016d8 <FLASH_IF_IsEmpty+0x82>
    {
      return FLASH_NOT_EMPTY;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e006      	b.n	80016e6 <FLASH_IF_IsEmpty+0x90>
    }
    size--;
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	3b01      	subs	r3, #1
 80016dc:	603b      	str	r3, [r7, #0]
  while (size != 0)
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d1f1      	bne.n	80016c8 <FLASH_IF_IsEmpty+0x72>
  }
  return FLASH_EMPTY;
 80016e4:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_IsEmpty_2 */

  /* USER CODE END FLASH_IF_IsEmpty_2 */
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3714      	adds	r7, #20
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bc80      	pop	{r7}
 80016ee:	4770      	bx	lr

080016f0 <LL_AHB2_GRP1_EnableClock>:
{
 80016f0:	b480      	push	{r7}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80016f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016fc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80016fe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4313      	orrs	r3, r2
 8001706:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001708:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800170c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4013      	ands	r3, r2
 8001712:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001714:	68fb      	ldr	r3, [r7, #12]
}
 8001716:	bf00      	nop
 8001718:	3714      	adds	r7, #20
 800171a:	46bd      	mov	sp, r7
 800171c:	bc80      	pop	{r7}
 800171e:	4770      	bx	lr

08001720 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001726:	1d3b      	adds	r3, r7, #4
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	605a      	str	r2, [r3, #4]
 800172e:	609a      	str	r2, [r3, #8]
 8001730:	60da      	str	r2, [r3, #12]
 8001732:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001734:	2002      	movs	r0, #2
 8001736:	f7ff ffdb 	bl	80016f0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800173a:	2004      	movs	r0, #4
 800173c:	f7ff ffd8 	bl	80016f0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001740:	2001      	movs	r0, #1
 8001742:	f7ff ffd5 	bl	80016f0 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15|DBG3_Pin|DBG4_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 8001746:	2200      	movs	r2, #0
 8001748:	f248 2118 	movw	r1, #33304	@ 0x8218
 800174c:	4836      	ldr	r0, [pc, #216]	@ (8001828 <MX_GPIO_Init+0x108>)
 800174e:	f003 ff32 	bl	80055b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|DBG2_Pin, GPIO_PIN_SET);
 8001752:	2201      	movs	r2, #1
 8001754:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8001758:	4833      	ldr	r0, [pc, #204]	@ (8001828 <MX_GPIO_Init+0x108>)
 800175a:	f003 ff2c 	bl	80055b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DBG1_Pin|GPIO_PIN_9|RF_CTRL1_Pin|RF_CTRL2_Pin, GPIO_PIN_RESET);
 800175e:	2200      	movs	r2, #0
 8001760:	f240 2131 	movw	r1, #561	@ 0x231
 8001764:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001768:	f003 ff25 	bl	80055b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB15 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_9;
 800176c:	f44f 4302 	mov.w	r3, #33280	@ 0x8200
 8001770:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001772:	2301      	movs	r3, #1
 8001774:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001776:	2300      	movs	r3, #0
 8001778:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177a:	2300      	movs	r3, #0
 800177c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800177e:	1d3b      	adds	r3, r7, #4
 8001780:	4619      	mov	r1, r3
 8001782:	4829      	ldr	r0, [pc, #164]	@ (8001828 <MX_GPIO_Init+0x108>)
 8001784:	f003 fcd2 	bl	800512c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DBG3_Pin|DBG4_Pin|LED2_Pin|DBG2_Pin;
 8001788:	f44f 6387 	mov.w	r3, #1080	@ 0x438
 800178c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800178e:	2301      	movs	r3, #1
 8001790:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001792:	2300      	movs	r3, #0
 8001794:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001796:	2303      	movs	r3, #3
 8001798:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800179a:	1d3b      	adds	r3, r7, #4
 800179c:	4619      	mov	r1, r3
 800179e:	4822      	ldr	r0, [pc, #136]	@ (8001828 <MX_GPIO_Init+0x108>)
 80017a0:	f003 fcc4 	bl	800512c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80017a4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80017a8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017aa:	2300      	movs	r3, #0
 80017ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ae:	2300      	movs	r3, #0
 80017b0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017b2:	1d3b      	adds	r3, r7, #4
 80017b4:	4619      	mov	r1, r3
 80017b6:	481c      	ldr	r0, [pc, #112]	@ (8001828 <MX_GPIO_Init+0x108>)
 80017b8:	f003 fcb8 	bl	800512c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DBG1_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin;
 80017bc:	2331      	movs	r3, #49	@ 0x31
 80017be:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c0:	2301      	movs	r3, #1
 80017c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c4:	2300      	movs	r3, #0
 80017c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c8:	2303      	movs	r3, #3
 80017ca:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017cc:	1d3b      	adds	r3, r7, #4
 80017ce:	4619      	mov	r1, r3
 80017d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017d4:	f003 fcaa 	bl	800512c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUT1_Pin;
 80017d8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017dc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017de:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80017e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017e4:	2301      	movs	r3, #1
 80017e6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BUT1_GPIO_Port, &GPIO_InitStruct);
 80017e8:	1d3b      	adds	r3, r7, #4
 80017ea:	4619      	mov	r1, r3
 80017ec:	480e      	ldr	r0, [pc, #56]	@ (8001828 <MX_GPIO_Init+0x108>)
 80017ee:	f003 fc9d 	bl	800512c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80017f2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80017f6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017f8:	2301      	movs	r3, #1
 80017fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fc:	2300      	movs	r3, #0
 80017fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001800:	2300      	movs	r3, #0
 8001802:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001804:	1d3b      	adds	r3, r7, #4
 8001806:	4619      	mov	r1, r3
 8001808:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800180c:	f003 fc8e 	bl	800512c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001810:	2200      	movs	r2, #0
 8001812:	2100      	movs	r1, #0
 8001814:	2029      	movs	r0, #41	@ 0x29
 8001816:	f002 fe06 	bl	8004426 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800181a:	2029      	movs	r0, #41	@ 0x29
 800181c:	f002 fe1d 	bl	800445a <HAL_NVIC_EnableIRQ>

}
 8001820:	bf00      	nop
 8001822:	3718      	adds	r7, #24
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	48000400 	.word	0x48000400

0800182c <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001834:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001838:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800183c:	f023 0218 	bic.w	r2, r3, #24
 8001840:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	4313      	orrs	r3, r2
 8001848:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800184c:	bf00      	nop
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	bc80      	pop	{r7}
 8001854:	4770      	bx	lr
	...

08001858 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800185c:	f001 fc20 	bl	80030a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001860:	f000 f824 	bl	80018ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001864:	f7ff ff5c 	bl	8001720 <MX_GPIO_Init>
  MX_LoRaWAN_Init();
 8001868:	f008 fc76 	bl	800a158 <MX_LoRaWAN_Init>
  MX_USART2_UART_Init();
 800186c:	f001 f8de 	bl	8002a2c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8001870:	2201      	movs	r2, #1
 8001872:	2120      	movs	r1, #32
 8001874:	480c      	ldr	r0, [pc, #48]	@ (80018a8 <main+0x50>)
 8001876:	f003 fe9e 	bl	80055b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 800187a:	2201      	movs	r2, #1
 800187c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001880:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001884:	f003 fe97 	bl	80055b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8001888:	2201      	movs	r2, #1
 800188a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800188e:	4806      	ldr	r0, [pc, #24]	@ (80018a8 <main+0x50>)
 8001890:	f003 fe91 	bl	80055b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8001894:	2201      	movs	r2, #1
 8001896:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800189a:	4803      	ldr	r0, [pc, #12]	@ (80018a8 <main+0x50>)
 800189c:	f003 fe8b 	bl	80055b6 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_LoRaWAN_Process();
 80018a0:	f008 fc62 	bl	800a168 <MX_LoRaWAN_Process>
 80018a4:	e7fc      	b.n	80018a0 <main+0x48>
 80018a6:	bf00      	nop
 80018a8:	48000400 	.word	0x48000400

080018ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b09a      	sub	sp, #104	@ 0x68
 80018b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018b2:	f107 0320 	add.w	r3, r7, #32
 80018b6:	2248      	movs	r2, #72	@ 0x48
 80018b8:	2100      	movs	r1, #0
 80018ba:	4618      	mov	r0, r3
 80018bc:	f01a ff15 	bl	801c6ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018c0:	f107 0308 	add.w	r3, r7, #8
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	605a      	str	r2, [r3, #4]
 80018ca:	609a      	str	r2, [r3, #8]
 80018cc:	60da      	str	r2, [r3, #12]
 80018ce:	611a      	str	r2, [r3, #16]
 80018d0:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80018d2:	f003 fe9f 	bl	8005614 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80018d6:	2000      	movs	r0, #0
 80018d8:	f7ff ffa8 	bl	800182c <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018dc:	4b1f      	ldr	r3, [pc, #124]	@ (800195c <SystemClock_Config+0xb0>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80018e4:	4a1d      	ldr	r2, [pc, #116]	@ (800195c <SystemClock_Config+0xb0>)
 80018e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018ea:	6013      	str	r3, [r2, #0]
 80018ec:	4b1b      	ldr	r3, [pc, #108]	@ (800195c <SystemClock_Config+0xb0>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80018f4:	607b      	str	r3, [r7, #4]
 80018f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80018f8:	2324      	movs	r3, #36	@ 0x24
 80018fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80018fc:	2381      	movs	r3, #129	@ 0x81
 80018fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001900:	2301      	movs	r3, #1
 8001902:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001904:	2300      	movs	r3, #0
 8001906:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8001908:	23b0      	movs	r3, #176	@ 0xb0
 800190a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800190c:	2300      	movs	r3, #0
 800190e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001910:	f107 0320 	add.w	r3, r7, #32
 8001914:	4618      	mov	r0, r3
 8001916:	f004 f9c9 	bl	8005cac <HAL_RCC_OscConfig>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001920:	f000 f8be 	bl	8001aa0 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001924:	234f      	movs	r3, #79	@ 0x4f
 8001926:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001928:	2300      	movs	r3, #0
 800192a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800192c:	2300      	movs	r3, #0
 800192e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001930:	2300      	movs	r3, #0
 8001932:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001934:	2300      	movs	r3, #0
 8001936:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001938:	2300      	movs	r3, #0
 800193a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800193c:	f107 0308 	add.w	r3, r7, #8
 8001940:	2102      	movs	r1, #2
 8001942:	4618      	mov	r0, r3
 8001944:	f004 fd4e 	bl	80063e4 <HAL_RCC_ClockConfig>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800194e:	f000 f8a7 	bl	8001aa0 <Error_Handler>
  }
}
 8001952:	bf00      	nop
 8001954:	3768      	adds	r7, #104	@ 0x68
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	58000400 	.word	0x58000400

08001960 <PumpStateMachine>:

/* USER CODE BEGIN 4 */

void PumpStateMachine(PumpState_t state, uint8_t duration)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af02      	add	r7, sp, #8
 8001966:	4603      	mov	r3, r0
 8001968:	460a      	mov	r2, r1
 800196a:	71fb      	strb	r3, [r7, #7]
 800196c:	4613      	mov	r3, r2
 800196e:	71bb      	strb	r3, [r7, #6]
    currentPumpState = state;
 8001970:	4a44      	ldr	r2, [pc, #272]	@ (8001a84 <PumpStateMachine+0x124>)
 8001972:	79fb      	ldrb	r3, [r7, #7]
 8001974:	7013      	strb	r3, [r2, #0]
    autoDurationMinutes = duration;
 8001976:	4a44      	ldr	r2, [pc, #272]	@ (8001a88 <PumpStateMachine+0x128>)
 8001978:	79bb      	ldrb	r3, [r7, #6]
 800197a:	7013      	strb	r3, [r2, #0]

    switch (state)
 800197c:	79fb      	ldrb	r3, [r7, #7]
 800197e:	2b03      	cmp	r3, #3
 8001980:	d01f      	beq.n	80019c2 <PumpStateMachine+0x62>
 8001982:	2b03      	cmp	r3, #3
 8001984:	dc79      	bgt.n	8001a7a <PumpStateMachine+0x11a>
 8001986:	2b01      	cmp	r3, #1
 8001988:	d002      	beq.n	8001990 <PumpStateMachine+0x30>
 800198a:	2b02      	cmp	r3, #2
 800198c:	d030      	beq.n	80019f0 <PumpStateMachine+0x90>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
            APP_LOG(TS_ON, VLEVEL_M, "[PumpStateMachine] STATE_AUTO: DONE!!!\r\n");
            break;

        default:
            break;
 800198e:	e074      	b.n	8001a7a <PumpStateMachine+0x11a>
            APP_LOG(TS_ON, VLEVEL_M, "Command 0x01: Pump ON\r\n");
 8001990:	4b3e      	ldr	r3, [pc, #248]	@ (8001a8c <PumpStateMachine+0x12c>)
 8001992:	2201      	movs	r2, #1
 8001994:	2100      	movs	r1, #0
 8001996:	2002      	movs	r0, #2
 8001998:	f019 fed4 	bl	801b744 <UTIL_ADV_TRACE_COND_FSend>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 800199c:	2200      	movs	r2, #0
 800199e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80019a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019a6:	f003 fe06 	bl	80055b6 <HAL_GPIO_WritePin>
            HAL_Delay(1000);
 80019aa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019ae:	f000 fbcb 	bl	8002148 <HAL_Delay>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80019b2:	2201      	movs	r2, #1
 80019b4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80019b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019bc:	f003 fdfb 	bl	80055b6 <HAL_GPIO_WritePin>
            break;
 80019c0:	e05c      	b.n	8001a7c <PumpStateMachine+0x11c>
            APP_LOG(TS_ON, VLEVEL_M, "Command 0x03: Pump OFF\r\n");
 80019c2:	4b33      	ldr	r3, [pc, #204]	@ (8001a90 <PumpStateMachine+0x130>)
 80019c4:	2201      	movs	r2, #1
 80019c6:	2100      	movs	r1, #0
 80019c8:	2002      	movs	r0, #2
 80019ca:	f019 febb 	bl	801b744 <UTIL_ADV_TRACE_COND_FSend>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80019ce:	2200      	movs	r2, #0
 80019d0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80019d4:	482f      	ldr	r0, [pc, #188]	@ (8001a94 <PumpStateMachine+0x134>)
 80019d6:	f003 fdee 	bl	80055b6 <HAL_GPIO_WritePin>
            HAL_Delay(1000);
 80019da:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019de:	f000 fbb3 	bl	8002148 <HAL_Delay>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 80019e2:	2201      	movs	r2, #1
 80019e4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80019e8:	482a      	ldr	r0, [pc, #168]	@ (8001a94 <PumpStateMachine+0x134>)
 80019ea:	f003 fde4 	bl	80055b6 <HAL_GPIO_WritePin>
            break;
 80019ee:	e045      	b.n	8001a7c <PumpStateMachine+0x11c>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80019f0:	2200      	movs	r2, #0
 80019f2:	2120      	movs	r1, #32
 80019f4:	4827      	ldr	r0, [pc, #156]	@ (8001a94 <PumpStateMachine+0x134>)
 80019f6:	f003 fdde 	bl	80055b6 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80019fa:	2200      	movs	r2, #0
 80019fc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a00:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a04:	f003 fdd7 	bl	80055b6 <HAL_GPIO_WritePin>
            HAL_Delay(1000);
 8001a08:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a0c:	f000 fb9c 	bl	8002148 <HAL_Delay>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8001a10:	2201      	movs	r2, #1
 8001a12:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a16:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a1a:	f003 fdcc 	bl	80055b6 <HAL_GPIO_WritePin>
            APP_LOG(TS_ON, VLEVEL_M, "[PumpStateMachine] STATE_AUTO: Duration %d min\r\n", duration);
 8001a1e:	79bb      	ldrb	r3, [r7, #6]
 8001a20:	9300      	str	r3, [sp, #0]
 8001a22:	4b1d      	ldr	r3, [pc, #116]	@ (8001a98 <PumpStateMachine+0x138>)
 8001a24:	2201      	movs	r2, #1
 8001a26:	2100      	movs	r1, #0
 8001a28:	2002      	movs	r0, #2
 8001a2a:	f019 fe8b 	bl	801b744 <UTIL_ADV_TRACE_COND_FSend>
            HAL_Delay((uint32_t)duration * 60 * 1000);
 8001a2e:	79bb      	ldrb	r3, [r7, #6]
 8001a30:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8001a34:	fb02 f303 	mul.w	r3, r2, r3
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f000 fb85 	bl	8002148 <HAL_Delay>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8001a3e:	2201      	movs	r2, #1
 8001a40:	2120      	movs	r1, #32
 8001a42:	4814      	ldr	r0, [pc, #80]	@ (8001a94 <PumpStateMachine+0x134>)
 8001a44:	f003 fdb7 	bl	80055b6 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001a4e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a52:	f003 fdb0 	bl	80055b6 <HAL_GPIO_WritePin>
            HAL_Delay(1000);
 8001a56:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a5a:	f000 fb75 	bl	8002148 <HAL_Delay>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001a5e:	2201      	movs	r2, #1
 8001a60:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001a64:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a68:	f003 fda5 	bl	80055b6 <HAL_GPIO_WritePin>
            APP_LOG(TS_ON, VLEVEL_M, "[PumpStateMachine] STATE_AUTO: DONE!!!\r\n");
 8001a6c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a9c <PumpStateMachine+0x13c>)
 8001a6e:	2201      	movs	r2, #1
 8001a70:	2100      	movs	r1, #0
 8001a72:	2002      	movs	r0, #2
 8001a74:	f019 fe66 	bl	801b744 <UTIL_ADV_TRACE_COND_FSend>
            break;
 8001a78:	e000      	b.n	8001a7c <PumpStateMachine+0x11c>
            break;
 8001a7a:	bf00      	nop
    }
}
 8001a7c:	bf00      	nop
 8001a7e:	3708      	adds	r7, #8
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	2000038a 	.word	0x2000038a
 8001a88:	2000038b 	.word	0x2000038b
 8001a8c:	0801e640 	.word	0x0801e640
 8001a90:	0801e658 	.word	0x0801e658
 8001a94:	48000400 	.word	0x48000400
 8001a98:	0801e674 	.word	0x0801e674
 8001a9c:	0801e6a8 	.word	0x0801e6a8

08001aa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001aa4:	b672      	cpsid	i
}
 8001aa6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001aa8:	bf00      	nop
 8001aaa:	e7fd      	b.n	8001aa8 <Error_Handler+0x8>

08001aac <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001ab0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ab8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001abc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ac0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001ac4:	bf00      	nop
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bc80      	pop	{r7}
 8001aca:	4770      	bx	lr

08001acc <LL_APB1_GRP1_EnableClock>:
{
 8001acc:	b480      	push	{r7}
 8001ace:	b085      	sub	sp, #20
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001ad4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ad8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001ada:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001ae4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ae8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4013      	ands	r3, r2
 8001aee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001af0:	68fb      	ldr	r3, [r7, #12]
}
 8001af2:	bf00      	nop
 8001af4:	3714      	adds	r7, #20
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bc80      	pop	{r7}
 8001afa:	4770      	bx	lr

08001afc <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b08c      	sub	sp, #48	@ 0x30
 8001b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 8001b02:	1d3b      	adds	r3, r7, #4
 8001b04:	222c      	movs	r2, #44	@ 0x2c
 8001b06:	2100      	movs	r1, #0
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f01a fdee 	bl	801c6ea <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001b0e:	4b22      	ldr	r3, [pc, #136]	@ (8001b98 <MX_RTC_Init+0x9c>)
 8001b10:	4a22      	ldr	r2, [pc, #136]	@ (8001b9c <MX_RTC_Init+0xa0>)
 8001b12:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8001b14:	4b20      	ldr	r3, [pc, #128]	@ (8001b98 <MX_RTC_Init+0x9c>)
 8001b16:	221f      	movs	r2, #31
 8001b18:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001b1a:	4b1f      	ldr	r3, [pc, #124]	@ (8001b98 <MX_RTC_Init+0x9c>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001b20:	4b1d      	ldr	r3, [pc, #116]	@ (8001b98 <MX_RTC_Init+0x9c>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001b26:	4b1c      	ldr	r3, [pc, #112]	@ (8001b98 <MX_RTC_Init+0x9c>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001b2c:	4b1a      	ldr	r3, [pc, #104]	@ (8001b98 <MX_RTC_Init+0x9c>)
 8001b2e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b32:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001b34:	4b18      	ldr	r3, [pc, #96]	@ (8001b98 <MX_RTC_Init+0x9c>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8001b3a:	4b17      	ldr	r3, [pc, #92]	@ (8001b98 <MX_RTC_Init+0x9c>)
 8001b3c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b40:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001b42:	4815      	ldr	r0, [pc, #84]	@ (8001b98 <MX_RTC_Init+0x9c>)
 8001b44:	f005 f90a 	bl	8006d5c <HAL_RTC_Init>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8001b4e:	f7ff ffa7 	bl	8001aa0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8001b52:	4811      	ldr	r0, [pc, #68]	@ (8001b98 <MX_RTC_Init+0x9c>)
 8001b54:	f005 fbf8 	bl	8007348 <HAL_RTCEx_SetSSRU_IT>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8001b5e:	f7ff ff9f 	bl	8001aa0 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001b62:	2300      	movs	r3, #0
 8001b64:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001b66:	2300      	movs	r3, #0
 8001b68:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001b6e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001b72:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8001b74:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8001b7a:	1d3b      	adds	r3, r7, #4
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	4619      	mov	r1, r3
 8001b80:	4805      	ldr	r0, [pc, #20]	@ (8001b98 <MX_RTC_Init+0x9c>)
 8001b82:	f005 f965 	bl	8006e50 <HAL_RTC_SetAlarm_IT>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001b8c:	f7ff ff88 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001b90:	bf00      	nop
 8001b92:	3730      	adds	r7, #48	@ 0x30
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	2000038c 	.word	0x2000038c
 8001b9c:	40002800 	.word	0x40002800

08001ba0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b090      	sub	sp, #64	@ 0x40
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ba8:	f107 0308 	add.w	r3, r7, #8
 8001bac:	2238      	movs	r2, #56	@ 0x38
 8001bae:	2100      	movs	r1, #0
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f01a fd9a 	bl	801c6ea <memset>
  if(rtcHandle->Instance==RTC)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a16      	ldr	r2, [pc, #88]	@ (8001c14 <HAL_RTC_MspInit+0x74>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d125      	bne.n	8001c0c <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001bc0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001bc4:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001bc6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001bca:	63fb      	str	r3, [r7, #60]	@ 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bcc:	f107 0308 	add.w	r3, r7, #8
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f004 ffa9 	bl	8006b28 <HAL_RCCEx_PeriphCLKConfig>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001bdc:	f7ff ff60 	bl	8001aa0 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001be0:	f7ff ff64 	bl	8001aac <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001be4:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001be8:	f7ff ff70 	bl	8001acc <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8001bec:	2200      	movs	r2, #0
 8001bee:	2100      	movs	r1, #0
 8001bf0:	2002      	movs	r0, #2
 8001bf2:	f002 fc18 	bl	8004426 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8001bf6:	2002      	movs	r0, #2
 8001bf8:	f002 fc2f 	bl	800445a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	2100      	movs	r1, #0
 8001c00:	202a      	movs	r0, #42	@ 0x2a
 8001c02:	f002 fc10 	bl	8004426 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001c06:	202a      	movs	r0, #42	@ 0x2a
 8001c08:	f002 fc27 	bl	800445a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001c0c:	bf00      	nop
 8001c0e:	3740      	adds	r7, #64	@ 0x40
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	40002800 	.word	0x40002800

08001c18 <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8001c1c:	4b03      	ldr	r3, [pc, #12]	@ (8001c2c <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8001c24:	bf00      	nop
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bc80      	pop	{r7}
 8001c2a:	4770      	bx	lr
 8001c2c:	58000400 	.word	0x58000400

08001c30 <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8001c34:	bf00      	nop
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bc80      	pop	{r7}
 8001c3a:	4770      	bx	lr

08001c3c <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8001c40:	bf00      	nop
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bc80      	pop	{r7}
 8001c46:	4770      	bx	lr

08001c48 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8001c4c:	f001 fa48 	bl	80030e0 <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 8001c50:	f7ff ffe2 	bl	8001c18 <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8001c54:	2001      	movs	r0, #1
 8001c56:	f003 fd6f 	bl	8005738 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8001c5a:	bf00      	nop
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 8001c62:	f001 fa4b 	bl	80030fc <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 8001c66:	f001 f8cb 	bl	8002e00 <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 8001c6a:	bf00      	nop
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 8001c72:	f001 fa35 	bl	80030e0 <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001c76:	2101      	movs	r1, #1
 8001c78:	2000      	movs	r0, #0
 8001c7a:	f003 fcd9 	bl	8005630 <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 8001c7e:	bf00      	nop
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 8001c82:	b580      	push	{r7, lr}
 8001c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 8001c86:	f001 fa39 	bl	80030fc <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 8001c8a:	bf00      	nop
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c92:	bf00      	nop
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bc80      	pop	{r7}
 8001c98:	4770      	bx	lr

08001c9a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c9e:	bf00      	nop
 8001ca0:	e7fd      	b.n	8001c9e <NMI_Handler+0x4>

08001ca2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ca6:	bf00      	nop
 8001ca8:	e7fd      	b.n	8001ca6 <HardFault_Handler+0x4>

08001caa <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001caa:	b480      	push	{r7}
 8001cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cae:	bf00      	nop
 8001cb0:	e7fd      	b.n	8001cae <MemManage_Handler+0x4>

08001cb2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cb6:	bf00      	nop
 8001cb8:	e7fd      	b.n	8001cb6 <BusFault_Handler+0x4>

08001cba <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cbe:	bf00      	nop
 8001cc0:	e7fd      	b.n	8001cbe <UsageFault_Handler+0x4>

08001cc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cc6:	bf00      	nop
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bc80      	pop	{r7}
 8001ccc:	4770      	bx	lr

08001cce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cd2:	bf00      	nop
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bc80      	pop	{r7}
 8001cd8:	4770      	bx	lr

08001cda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cde:	bf00      	nop
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bc80      	pop	{r7}
 8001ce4:	4770      	bx	lr

08001ce6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cea:	bf00      	nop
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bc80      	pop	{r7}
 8001cf0:	4770      	bx	lr
	...

08001cf4 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8001cf8:	4802      	ldr	r0, [pc, #8]	@ (8001d04 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 8001cfa:	f005 fb61 	bl	80073c0 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8001cfe:	bf00      	nop
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	2000038c 	.word	0x2000038c

08001d08 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001d0c:	4802      	ldr	r0, [pc, #8]	@ (8001d18 <DMA1_Channel1_IRQHandler+0x10>)
 8001d0e:	f002 fe3b 	bl	8004988 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001d12:	bf00      	nop
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	20000500 	.word	0x20000500

08001d1c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d20:	4802      	ldr	r0, [pc, #8]	@ (8001d2c <USART1_IRQHandler+0x10>)
 8001d22:	f006 f9af 	bl	8008084 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d26:	bf00      	nop
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	200003e0 	.word	0x200003e0

08001d30 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d34:	4802      	ldr	r0, [pc, #8]	@ (8001d40 <USART2_IRQHandler+0x10>)
 8001d36:	f006 f9a5 	bl	8008084 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d3a:	bf00      	nop
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	20000470 	.word	0x20000470

08001d44 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [15:10] Interrupt.
  */
void EXTI15_10_IRQHandler(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT1_Pin);
 8001d48:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001d4c:	f003 fc4a 	bl	80055e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001d50:	bf00      	nop
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001d58:	4802      	ldr	r0, [pc, #8]	@ (8001d64 <RTC_Alarm_IRQHandler+0x10>)
 8001d5a:	f005 f9e1 	bl	8007120 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001d5e:	bf00      	nop
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	2000038c 	.word	0x2000038c

08001d68 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001d6c:	4802      	ldr	r0, [pc, #8]	@ (8001d78 <SUBGHZ_Radio_IRQHandler+0x10>)
 8001d6e:	f005 fe8f 	bl	8007a90 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8001d72:	bf00      	nop
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	200003c4 	.word	0x200003c4

08001d7c <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b085      	sub	sp, #20
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8001d84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d88:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001d8a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	664b      	str	r3, [r1, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8001d94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d98:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001da0:	68fb      	ldr	r3, [r7, #12]
}
 8001da2:	bf00      	nop
 8001da4:	3714      	adds	r7, #20
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bc80      	pop	{r7}
 8001daa:	4770      	bx	lr

08001dac <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8001db0:	4b06      	ldr	r3, [pc, #24]	@ (8001dcc <MX_SUBGHZ_Init+0x20>)
 8001db2:	2208      	movs	r2, #8
 8001db4:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8001db6:	4805      	ldr	r0, [pc, #20]	@ (8001dcc <MX_SUBGHZ_Init+0x20>)
 8001db8:	f005 fbee 	bl	8007598 <HAL_SUBGHZ_Init>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8001dc2:	f7ff fe6d 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8001dc6:	bf00      	nop
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	200003c4 	.word	0x200003c4

08001dd0 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8001dd8:	2001      	movs	r0, #1
 8001dda:	f7ff ffcf 	bl	8001d7c <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8001dde:	2200      	movs	r2, #0
 8001de0:	2100      	movs	r1, #0
 8001de2:	2032      	movs	r0, #50	@ 0x32
 8001de4:	f002 fb1f 	bl	8004426 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8001de8:	2032      	movs	r0, #50	@ 0x32
 8001dea:	f002 fb36 	bl	800445a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8001dee:	bf00      	nop
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <LL_RCC_SetClkAfterWakeFromStop>:
{
 8001df6:	b480      	push	{r7}
 8001df8:	b083      	sub	sp, #12
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001dfe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8001e08:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	608b      	str	r3, [r1, #8]
}
 8001e12:	bf00      	nop
 8001e14:	370c      	adds	r7, #12
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bc80      	pop	{r7}
 8001e1a:	4770      	bx	lr

08001e1c <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001e20:	4b02      	ldr	r3, [pc, #8]	@ (8001e2c <LL_FLASH_GetUDN+0x10>)
 8001e22:	681b      	ldr	r3, [r3, #0]
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bc80      	pop	{r7}
 8001e2a:	4770      	bx	lr
 8001e2c:	1fff7580 	.word	0x1fff7580

08001e30 <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8001e34:	4b03      	ldr	r3, [pc, #12]	@ (8001e44 <LL_FLASH_GetDeviceID+0x14>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	b2db      	uxtb	r3, r3
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bc80      	pop	{r7}
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	1fff7584 	.word	0x1fff7584

08001e48 <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8001e4c:	4b03      	ldr	r3, [pc, #12]	@ (8001e5c <LL_FLASH_GetSTCompanyID+0x14>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	0a1b      	lsrs	r3, r3, #8
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bc80      	pop	{r7}
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	1fff7584 	.word	0x1fff7584

08001e60 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8001e64:	2000      	movs	r0, #0
 8001e66:	f7ff ffc6 	bl	8001df6 <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 8001e6a:	f019 f9ad 	bl	801b1c8 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8001e6e:	4b10      	ldr	r3, [pc, #64]	@ (8001eb0 <SystemApp_Init+0x50>)
 8001e70:	2201      	movs	r2, #1
 8001e72:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 8001e74:	f000 f98c 	bl	8002190 <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8001e78:	f019 fc36 	bl	801b6e8 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8001e7c:	480d      	ldr	r0, [pc, #52]	@ (8001eb4 <SystemApp_Init+0x54>)
 8001e7e:	f019 fce1 	bl	801b844 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /* #warning "should be removed when proper obl is done" */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001e82:	4b0d      	ldr	r3, [pc, #52]	@ (8001eb8 <SystemApp_Init+0x58>)
 8001e84:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001e88:	611a      	str	r2, [r3, #16]

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8001e8a:	2002      	movs	r0, #2
 8001e8c:	f019 fce8 	bl	801b860 <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 8001e90:	f7ff f9cc 	bl	800122c <SYS_InitMeasurement>

  /*Initialize the Sensors */
  EnvSensors_Init();
 8001e94:	f000 fa02 	bl	800229c <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 8001e98:	f018 fb64 	bl	801a564 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001e9c:	2101      	movs	r1, #1
 8001e9e:	2001      	movs	r0, #1
 8001ea0:	f018 fba0 	bl	801a5e4 <UTIL_LPM_SetOffMode>

#if defined (LOW_POWER_DISABLE) && (LOW_POWER_DISABLE == 1)
  /* Disable Stop Mode */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001ea4:	2101      	movs	r1, #1
 8001ea6:	2001      	movs	r0, #1
 8001ea8:	f018 fb6c 	bl	801a584 <UTIL_LPM_SetStopMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 8001eac:	bf00      	nop
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	200003d0 	.word	0x200003d0
 8001eb4:	08002081 	.word	0x08002081
 8001eb8:	58004000 	.word	0x58004000

08001ebc <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 8001ec0:	f018 fbc0 	bl	801a644 <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 8001ec4:	bf00      	nop
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
  uint8_t batteryLevel = 0;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 8001ed2:	f7ff f9b9 	bl	8001248 <SYS_GetBatteryLevel>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	80bb      	strh	r3, [r7, #4]

  /* Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 8001eda:	88bb      	ldrh	r3, [r7, #4]
 8001edc:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d902      	bls.n	8001eea <GetBatteryLevel+0x22>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 8001ee4:	23fe      	movs	r3, #254	@ 0xfe
 8001ee6:	71fb      	strb	r3, [r7, #7]
 8001ee8:	e014      	b.n	8001f14 <GetBatteryLevel+0x4c>
  }
  else if (batteryLevelmV < VDD_MIN)
 8001eea:	88bb      	ldrh	r3, [r7, #4]
 8001eec:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
 8001ef0:	d202      	bcs.n	8001ef8 <GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	71fb      	strb	r3, [r7, #7]
 8001ef6:	e00d      	b.n	8001f14 <GetBatteryLevel+0x4c>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 8001ef8:	88bb      	ldrh	r3, [r7, #4]
 8001efa:	f5a3 63e1 	sub.w	r3, r3, #1800	@ 0x708
 8001efe:	461a      	mov	r2, r3
 8001f00:	4613      	mov	r3, r2
 8001f02:	01db      	lsls	r3, r3, #7
 8001f04:	1a9b      	subs	r3, r3, r2
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	461a      	mov	r2, r3
 8001f0a:	4b05      	ldr	r3, [pc, #20]	@ (8001f20 <GetBatteryLevel+0x58>)
 8001f0c:	fba3 2302 	umull	r2, r3, r3, r2
 8001f10:	09db      	lsrs	r3, r3, #7
 8001f12:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 8001f14:	79fb      	ldrb	r3, [r7, #7]
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	1b4e81b5 	.word	0x1b4e81b5

08001f24 <GetTemperatureLevel>:

int16_t GetTemperatureLevel(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b088      	sub	sp, #32
 8001f28:	af00      	add	r7, sp, #0
  int16_t temperatureLevel = 0;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	83fb      	strh	r3, [r7, #30]

  sensor_t sensor_data;

  EnvSensors_Read(&sensor_data);
 8001f2e:	1d3b      	adds	r3, r7, #4
 8001f30:	4618      	mov	r0, r3
 8001f32:	f000 f989 	bl	8002248 <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7fe ff1b 	bl	8000d74 <__aeabi_f2iz>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	83fb      	strh	r3, [r7, #30]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 8001f42:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3720      	adds	r7, #32
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 8001f4e:	b590      	push	{r4, r7, lr}
 8001f50:	b087      	sub	sp, #28
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 8001f56:	2300      	movs	r3, #0
 8001f58:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 8001f5a:	f7ff ff5f 	bl	8001e1c <LL_FLASH_GetUDN>
 8001f5e:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f66:	d138      	bne.n	8001fda <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8001f68:	f001 f8d6 	bl	8003118 <HAL_GetUIDw0>
 8001f6c:	4604      	mov	r4, r0
 8001f6e:	f001 f8e7 	bl	8003140 <HAL_GetUIDw2>
 8001f72:	4603      	mov	r3, r0
 8001f74:	4423      	add	r3, r4
 8001f76:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 8001f78:	f001 f8d8 	bl	800312c <HAL_GetUIDw1>
 8001f7c:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	0e1a      	lsrs	r2, r3, #24
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	3307      	adds	r3, #7
 8001f86:	b2d2      	uxtb	r2, r2
 8001f88:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	0c1a      	lsrs	r2, r3, #16
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	3306      	adds	r3, #6
 8001f92:	b2d2      	uxtb	r2, r2
 8001f94:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	0a1a      	lsrs	r2, r3, #8
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	3305      	adds	r3, #5
 8001f9e:	b2d2      	uxtb	r2, r2
 8001fa0:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	3304      	adds	r3, #4
 8001fa6:	693a      	ldr	r2, [r7, #16]
 8001fa8:	b2d2      	uxtb	r2, r2
 8001faa:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	0e1a      	lsrs	r2, r3, #24
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	3303      	adds	r3, #3
 8001fb4:	b2d2      	uxtb	r2, r2
 8001fb6:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	0c1a      	lsrs	r2, r3, #16
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	3302      	adds	r3, #2
 8001fc0:	b2d2      	uxtb	r2, r2
 8001fc2:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	0a1a      	lsrs	r2, r3, #8
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	3301      	adds	r3, #1
 8001fcc:	b2d2      	uxtb	r2, r2
 8001fce:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	b2da      	uxtb	r2, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 8001fd8:	e031      	b.n	800203e <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	3307      	adds	r3, #7
 8001fde:	697a      	ldr	r2, [r7, #20]
 8001fe0:	b2d2      	uxtb	r2, r2
 8001fe2:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	0a1a      	lsrs	r2, r3, #8
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	3306      	adds	r3, #6
 8001fec:	b2d2      	uxtb	r2, r2
 8001fee:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	0c1a      	lsrs	r2, r3, #16
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	3305      	adds	r3, #5
 8001ff8:	b2d2      	uxtb	r2, r2
 8001ffa:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	0e1a      	lsrs	r2, r3, #24
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	3304      	adds	r3, #4
 8002004:	b2d2      	uxtb	r2, r2
 8002006:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 8002008:	f7ff ff12 	bl	8001e30 <LL_FLASH_GetDeviceID>
 800200c:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	3303      	adds	r3, #3
 8002012:	697a      	ldr	r2, [r7, #20]
 8002014:	b2d2      	uxtb	r2, r2
 8002016:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 8002018:	f7ff ff16 	bl	8001e48 <LL_FLASH_GetSTCompanyID>
 800201c:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	3302      	adds	r3, #2
 8002022:	697a      	ldr	r2, [r7, #20]
 8002024:	b2d2      	uxtb	r2, r2
 8002026:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	0a1a      	lsrs	r2, r3, #8
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	3301      	adds	r3, #1
 8002030:	b2d2      	uxtb	r2, r2
 8002032:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	0c1b      	lsrs	r3, r3, #16
 8002038:	b2da      	uxtb	r2, r3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	701a      	strb	r2, [r3, #0]
}
 800203e:	bf00      	nop
 8002040:	371c      	adds	r7, #28
 8002042:	46bd      	mov	sp, r7
 8002044:	bd90      	pop	{r4, r7, pc}

08002046 <GetDevAddr>:

uint32_t GetDevAddr(void)
{
 8002046:	b590      	push	{r4, r7, lr}
 8002048:	b083      	sub	sp, #12
 800204a:	af00      	add	r7, sp, #0
  uint32_t val = 0;
 800204c:	2300      	movs	r3, #0
 800204e:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  val = LL_FLASH_GetUDN();
 8002050:	f7ff fee4 	bl	8001e1c <LL_FLASH_GetUDN>
 8002054:	6078      	str	r0, [r7, #4]
  if (val == 0xFFFFFFFF)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800205c:	d10b      	bne.n	8002076 <GetDevAddr+0x30>
  {
    val = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 800205e:	f001 f85b 	bl	8003118 <HAL_GetUIDw0>
 8002062:	4604      	mov	r4, r0
 8002064:	f001 f862 	bl	800312c <HAL_GetUIDw1>
 8002068:	4603      	mov	r3, r0
 800206a:	405c      	eors	r4, r3
 800206c:	f001 f868 	bl	8003140 <HAL_GetUIDw2>
 8002070:	4603      	mov	r3, r0
 8002072:	4063      	eors	r3, r4
 8002074:	607b      	str	r3, [r7, #4]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
  return val;
 8002076:	687b      	ldr	r3, [r7, #4]

}
 8002078:	4618      	mov	r0, r3
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	bd90      	pop	{r4, r7, pc}

08002080 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b086      	sub	sp, #24
 8002084:	af02      	add	r7, sp, #8
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 800208a:	f107 0308 	add.w	r3, r7, #8
 800208e:	4618      	mov	r0, r3
 8002090:	f018 fbe8 	bl	801a864 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800209a:	9200      	str	r2, [sp, #0]
 800209c:	4a07      	ldr	r2, [pc, #28]	@ (80020bc <TimestampNow+0x3c>)
 800209e:	2110      	movs	r1, #16
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f000 f81d 	bl	80020e0 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f7fe f8ba 	bl	8000220 <strlen>
 80020ac:	4603      	mov	r3, r0
 80020ae:	b29a      	uxth	r2, r3
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 80020b4:	bf00      	nop
 80020b6:	3710      	adds	r7, #16
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	0801e6d4 	.word	0x0801e6d4

080020c0 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 80020c4:	2101      	movs	r1, #1
 80020c6:	2002      	movs	r0, #2
 80020c8:	f018 fa5c 	bl	801a584 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 80020cc:	bf00      	nop
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 80020d4:	2100      	movs	r1, #0
 80020d6:	2002      	movs	r0, #2
 80020d8:	f018 fa54 	bl	801a584 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 80020dc:	bf00      	nop
 80020de:	bd80      	pop	{r7, pc}

080020e0 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 80020e0:	b40c      	push	{r2, r3}
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b084      	sub	sp, #16
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
 80020ea:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 80020ec:	f107 031c 	add.w	r3, r7, #28
 80020f0:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 80020f2:	6839      	ldr	r1, [r7, #0]
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f018 fd85 	bl	801ac08 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 80020fe:	bf00      	nop
 8002100:	3710      	adds	r7, #16
 8002102:	46bd      	mov	sp, r7
 8002104:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002108:	b002      	add	sp, #8
 800210a:	4770      	bx	lr

0800210c <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 8002114:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8002116:	4618      	mov	r0, r3
 8002118:	370c      	adds	r7, #12
 800211a:	46bd      	mov	sp, r7
 800211c:	bc80      	pop	{r7}
 800211e:	4770      	bx	lr

08002120 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002126:	2300      	movs	r3, #0
 8002128:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 800212a:	4b06      	ldr	r3, [pc, #24]	@ (8002144 <HAL_GetTick+0x24>)
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d002      	beq.n	8002138 <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 8002132:	f000 fa41 	bl	80025b8 <TIMER_IF_GetTimerValue>
 8002136:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8002138:	687b      	ldr	r3, [r7, #4]
}
 800213a:	4618      	mov	r0, r3
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	200003d0 	.word	0x200003d0

08002148 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	4618      	mov	r0, r3
 8002154:	f000 fab7 	bl	80026c6 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8002158:	bf00      	nop
 800215a:	3708      	adds	r7, #8
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <LL_AHB2_GRP1_EnableClock>:
{
 8002160:	b480      	push	{r7}
 8002162:	b085      	sub	sp, #20
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002168:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800216c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800216e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4313      	orrs	r3, r2
 8002176:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002178:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800217c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4013      	ands	r3, r2
 8002182:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002184:	68fb      	ldr	r3, [r7, #12]
}
 8002186:	bf00      	nop
 8002188:	3714      	adds	r7, #20
 800218a:	46bd      	mov	sp, r7
 800218c:	bc80      	pop	{r7}
 800218e:	4770      	bx	lr

08002190 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b086      	sub	sp, #24
 8002194:	af00      	add	r7, sp, #0

  /* USER CODE END DBG_Init_1 */

  /* SW probes */
#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 0 )
  HAL_DBGMCU_DisableDBGSleepMode();
 8002196:	f000 ffdd 	bl	8003154 <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 800219a:	f000 ffe1 	bl	8003160 <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 800219e:	f000 ffe5 	bl	800316c <HAL_DBGMCU_DisableDBGStandbyMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 80021a2:	1d3b      	adds	r3, r7, #4
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]
 80021a8:	605a      	str	r2, [r3, #4]
 80021aa:	609a      	str	r2, [r3, #8]
 80021ac:	60da      	str	r2, [r3, #12]
 80021ae:	611a      	str	r2, [r3, #16]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 80021b0:	2301      	movs	r3, #1
 80021b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 80021b4:	2300      	movs	r3, #0
 80021b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 80021b8:	2303      	movs	r3, #3
 80021ba:	613b      	str	r3, [r7, #16]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
 80021bc:	2001      	movs	r0, #1
 80021be:	f7ff ffcf 	bl	8002160 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE2_CLK_ENABLE();
 80021c2:	2002      	movs	r0, #2
 80021c4:	f7ff ffcc 	bl	8002160 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE3_CLK_ENABLE();
 80021c8:	2002      	movs	r0, #2
 80021ca:	f7ff ffc9 	bl	8002160 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE4_CLK_ENABLE();
 80021ce:	2002      	movs	r0, #2
 80021d0:	f7ff ffc6 	bl	8002160 <LL_AHB2_GRP1_EnableClock>

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 80021d4:	2301      	movs	r3, #1
 80021d6:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 80021d8:	1d3b      	adds	r3, r7, #4
 80021da:	4619      	mov	r1, r3
 80021dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021e0:	f002 ffa4 	bl	800512c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 80021e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80021e8:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 80021ea:	1d3b      	adds	r3, r7, #4
 80021ec:	4619      	mov	r1, r3
 80021ee:	4815      	ldr	r0, [pc, #84]	@ (8002244 <DBG_Init+0xb4>)
 80021f0:	f002 ff9c 	bl	800512c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE3_PIN;
 80021f4:	2308      	movs	r3, #8
 80021f6:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE3_PORT, &GPIO_InitStruct);
 80021f8:	1d3b      	adds	r3, r7, #4
 80021fa:	4619      	mov	r1, r3
 80021fc:	4811      	ldr	r0, [pc, #68]	@ (8002244 <DBG_Init+0xb4>)
 80021fe:	f002 ff95 	bl	800512c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE4_PIN;
 8002202:	2310      	movs	r3, #16
 8002204:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE4_PORT, &GPIO_InitStruct);
 8002206:	1d3b      	adds	r3, r7, #4
 8002208:	4619      	mov	r1, r3
 800220a:	480e      	ldr	r0, [pc, #56]	@ (8002244 <DBG_Init+0xb4>)
 800220c:	f002 ff8e 	bl	800512c <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 8002210:	2200      	movs	r2, #0
 8002212:	2101      	movs	r1, #1
 8002214:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002218:	f003 f9cd 	bl	80055b6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 800221c:	2200      	movs	r2, #0
 800221e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002222:	4808      	ldr	r0, [pc, #32]	@ (8002244 <DBG_Init+0xb4>)
 8002224:	f003 f9c7 	bl	80055b6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE3_PORT, PROBE_LINE3_PIN, GPIO_PIN_RESET);
 8002228:	2200      	movs	r2, #0
 800222a:	2108      	movs	r1, #8
 800222c:	4805      	ldr	r0, [pc, #20]	@ (8002244 <DBG_Init+0xb4>)
 800222e:	f003 f9c2 	bl	80055b6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE4_PORT, PROBE_LINE4_PIN, GPIO_PIN_RESET);
 8002232:	2200      	movs	r2, #0
 8002234:	2110      	movs	r1, #16
 8002236:	4803      	ldr	r0, [pc, #12]	@ (8002244 <DBG_Init+0xb4>)
 8002238:	f003 f9bd 	bl	80055b6 <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 800223c:	bf00      	nop
 800223e:	3718      	adds	r7, #24
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	48000400 	.word	0x48000400

08002248 <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 8002248:	b480      	push	{r7}
 800224a:	b087      	sub	sp, #28
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EnvSensors_Read */
  float HUMIDITY_Value = HUMIDITY_DEFAULT_VAL;
 8002250:	4b0d      	ldr	r3, [pc, #52]	@ (8002288 <EnvSensors_Read+0x40>)
 8002252:	617b      	str	r3, [r7, #20]
  float TEMPERATURE_Value = TEMPERATURE_DEFAULT_VAL;
 8002254:	4b0d      	ldr	r3, [pc, #52]	@ (800228c <EnvSensors_Read+0x44>)
 8002256:	613b      	str	r3, [r7, #16]
  float PRESSURE_Value = PRESSURE_DEFAULT_VAL;
 8002258:	4b0d      	ldr	r3, [pc, #52]	@ (8002290 <EnvSensors_Read+0x48>)
 800225a:	60fb      	str	r3, [r7, #12]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	697a      	ldr	r2, [r7, #20]
 8002260:	609a      	str	r2, [r3, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	693a      	ldr	r2, [r7, #16]
 8002266:	605a      	str	r2, [r3, #4]
  sensor_data->pressure    = PRESSURE_Value;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	68fa      	ldr	r2, [r7, #12]
 800226c:	601a      	str	r2, [r3, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a08      	ldr	r2, [pc, #32]	@ (8002294 <EnvSensors_Read+0x4c>)
 8002272:	60da      	str	r2, [r3, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	4a08      	ldr	r2, [pc, #32]	@ (8002298 <EnvSensors_Read+0x50>)
 8002278:	611a      	str	r2, [r3, #16]

  return 0;
 800227a:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Read */
}
 800227c:	4618      	mov	r0, r3
 800227e:	371c      	adds	r7, #28
 8002280:	46bd      	mov	sp, r7
 8002282:	bc80      	pop	{r7}
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	42480000 	.word	0x42480000
 800228c:	41900000 	.word	0x41900000
 8002290:	447a0000 	.word	0x447a0000
 8002294:	003e090d 	.word	0x003e090d
 8002298:	000503ab 	.word	0x000503ab

0800229c <EnvSensors_Init>:

int32_t EnvSensors_Init(void)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
#if defined( USE_IKS01A2_ENV_SENSOR_HTS221_0 ) || defined( USE_IKS01A2_ENV_SENSOR_LPS22HB_0 ) || \
    defined( USE_IKS01A3_ENV_SENSOR_HTS221_0 ) || defined( USE_IKS01A3_ENV_SENSOR_LPS22HH_0 ) || \
    defined( USE_BSP_DRIVER )
  int32_t ret = BSP_ERROR_NONE;
 80022a2:	2300      	movs	r3, #0
 80022a4:	607b      	str	r3, [r7, #4]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */

#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  return 0;
 80022a6:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Init */
  return ret;
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bc80      	pop	{r7}
 80022b0:	4770      	bx	lr

080022b2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80022b2:	b480      	push	{r7}
 80022b4:	af00      	add	r7, sp, #0
	return 1;
 80022b6:	2301      	movs	r3, #1
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bc80      	pop	{r7}
 80022be:	4770      	bx	lr

080022c0 <_kill>:

int _kill(int pid, int sig)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80022ca:	f01a fa61 	bl	801c790 <__errno>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2216      	movs	r2, #22
 80022d2:	601a      	str	r2, [r3, #0]
	return -1;
 80022d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3708      	adds	r7, #8
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <_exit>:

void _exit (int status)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80022e8:	f04f 31ff 	mov.w	r1, #4294967295
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f7ff ffe7 	bl	80022c0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80022f2:	bf00      	nop
 80022f4:	e7fd      	b.n	80022f2 <_exit+0x12>

080022f6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b086      	sub	sp, #24
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	60f8      	str	r0, [r7, #12]
 80022fe:	60b9      	str	r1, [r7, #8]
 8002300:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002302:	2300      	movs	r3, #0
 8002304:	617b      	str	r3, [r7, #20]
 8002306:	e00a      	b.n	800231e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002308:	f3af 8000 	nop.w
 800230c:	4601      	mov	r1, r0
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	1c5a      	adds	r2, r3, #1
 8002312:	60ba      	str	r2, [r7, #8]
 8002314:	b2ca      	uxtb	r2, r1
 8002316:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	3301      	adds	r3, #1
 800231c:	617b      	str	r3, [r7, #20]
 800231e:	697a      	ldr	r2, [r7, #20]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	429a      	cmp	r2, r3
 8002324:	dbf0      	blt.n	8002308 <_read+0x12>
	}

return len;
 8002326:	687b      	ldr	r3, [r7, #4]
}
 8002328:	4618      	mov	r0, r3
 800232a:	3718      	adds	r7, #24
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b086      	sub	sp, #24
 8002334:	af00      	add	r7, sp, #0
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	60b9      	str	r1, [r7, #8]
 800233a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800233c:	2300      	movs	r3, #0
 800233e:	617b      	str	r3, [r7, #20]
 8002340:	e009      	b.n	8002356 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	1c5a      	adds	r2, r3, #1
 8002346:	60ba      	str	r2, [r7, #8]
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	4618      	mov	r0, r3
 800234c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	3301      	adds	r3, #1
 8002354:	617b      	str	r3, [r7, #20]
 8002356:	697a      	ldr	r2, [r7, #20]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	429a      	cmp	r2, r3
 800235c:	dbf1      	blt.n	8002342 <_write+0x12>
	}
	return len;
 800235e:	687b      	ldr	r3, [r7, #4]
}
 8002360:	4618      	mov	r0, r3
 8002362:	3718      	adds	r7, #24
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}

08002368 <_close>:

int _close(int file)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
	return -1;
 8002370:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002374:	4618      	mov	r0, r3
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	bc80      	pop	{r7}
 800237c:	4770      	bx	lr

0800237e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800237e:	b480      	push	{r7}
 8002380:	b083      	sub	sp, #12
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
 8002386:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800238e:	605a      	str	r2, [r3, #4]
	return 0;
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	370c      	adds	r7, #12
 8002396:	46bd      	mov	sp, r7
 8002398:	bc80      	pop	{r7}
 800239a:	4770      	bx	lr

0800239c <_isatty>:

int _isatty(int file)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
	return 1;
 80023a4:	2301      	movs	r3, #1
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	370c      	adds	r7, #12
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bc80      	pop	{r7}
 80023ae:	4770      	bx	lr

080023b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b085      	sub	sp, #20
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
	return 0;
 80023bc:	2300      	movs	r3, #0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3714      	adds	r7, #20
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bc80      	pop	{r7}
 80023c6:	4770      	bx	lr

080023c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b086      	sub	sp, #24
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023d0:	4a14      	ldr	r2, [pc, #80]	@ (8002424 <_sbrk+0x5c>)
 80023d2:	4b15      	ldr	r3, [pc, #84]	@ (8002428 <_sbrk+0x60>)
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023dc:	4b13      	ldr	r3, [pc, #76]	@ (800242c <_sbrk+0x64>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d102      	bne.n	80023ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023e4:	4b11      	ldr	r3, [pc, #68]	@ (800242c <_sbrk+0x64>)
 80023e6:	4a12      	ldr	r2, [pc, #72]	@ (8002430 <_sbrk+0x68>)
 80023e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023ea:	4b10      	ldr	r3, [pc, #64]	@ (800242c <_sbrk+0x64>)
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4413      	add	r3, r2
 80023f2:	693a      	ldr	r2, [r7, #16]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d207      	bcs.n	8002408 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023f8:	f01a f9ca 	bl	801c790 <__errno>
 80023fc:	4603      	mov	r3, r0
 80023fe:	220c      	movs	r2, #12
 8002400:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002402:	f04f 33ff 	mov.w	r3, #4294967295
 8002406:	e009      	b.n	800241c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002408:	4b08      	ldr	r3, [pc, #32]	@ (800242c <_sbrk+0x64>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800240e:	4b07      	ldr	r3, [pc, #28]	@ (800242c <_sbrk+0x64>)
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4413      	add	r3, r2
 8002416:	4a05      	ldr	r2, [pc, #20]	@ (800242c <_sbrk+0x64>)
 8002418:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800241a:	68fb      	ldr	r3, [r7, #12]
}
 800241c:	4618      	mov	r0, r3
 800241e:	3718      	adds	r7, #24
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	20010000 	.word	0x20010000
 8002428:	00000400 	.word	0x00000400
 800242c:	200003d4 	.word	0x200003d4
 8002430:	20002510 	.word	0x20002510

08002434 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8002438:	bf00      	nop
 800243a:	46bd      	mov	sp, r7
 800243c:	bc80      	pop	{r7}
 800243e:	4770      	bx	lr

08002440 <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	689b      	ldr	r3, [r3, #8]
}
 800244c:	4618      	mov	r0, r3
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	bc80      	pop	{r7}
 8002454:	4770      	bx	lr
	...

08002458 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 800245e:	2300      	movs	r3, #0
 8002460:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 8002462:	4b14      	ldr	r3, [pc, #80]	@ (80024b4 <TIMER_IF_Init+0x5c>)
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	f083 0301 	eor.w	r3, r3, #1
 800246a:	b2db      	uxtb	r3, r3
 800246c:	2b00      	cmp	r3, #0
 800246e:	d01b      	beq.n	80024a8 <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002470:	4b11      	ldr	r3, [pc, #68]	@ (80024b8 <TIMER_IF_Init+0x60>)
 8002472:	f04f 32ff 	mov.w	r2, #4294967295
 8002476:	631a      	str	r2, [r3, #48]	@ 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8002478:	f7ff fb40 	bl	8001afc <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 800247c:	f000 f856 	bl	800252c <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002480:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002484:	480c      	ldr	r0, [pc, #48]	@ (80024b8 <TIMER_IF_Init+0x60>)
 8002486:	f004 fdef 	bl	8007068 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 800248a:	4b0b      	ldr	r3, [pc, #44]	@ (80024b8 <TIMER_IF_Init+0x60>)
 800248c:	f04f 32ff 	mov.w	r2, #4294967295
 8002490:	631a      	str	r2, [r3, #48]	@ 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8002492:	4809      	ldr	r0, [pc, #36]	@ (80024b8 <TIMER_IF_Init+0x60>)
 8002494:	f004 ff26 	bl	80072e4 <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 8002498:	2000      	movs	r0, #0
 800249a:	f000 f9d3 	bl	8002844 <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 800249e:	f000 f85f 	bl	8002560 <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 80024a2:	4b04      	ldr	r3, [pc, #16]	@ (80024b4 <TIMER_IF_Init+0x5c>)
 80024a4:	2201      	movs	r2, #1
 80024a6:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 80024a8:	79fb      	ldrb	r3, [r7, #7]
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	200003d8 	.word	0x200003d8
 80024b8:	2000038c 	.word	0x2000038c

080024bc <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b08e      	sub	sp, #56	@ 0x38
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80024c4:	2300      	movs	r3, #0
 80024c6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 80024ca:	f107 0308 	add.w	r3, r7, #8
 80024ce:	222c      	movs	r2, #44	@ 0x2c
 80024d0:	2100      	movs	r1, #0
 80024d2:	4618      	mov	r0, r3
 80024d4:	f01a f909 	bl	801c6ea <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 80024d8:	f000 f828 	bl	800252c <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 80024dc:	4b11      	ldr	r3, [pc, #68]	@ (8002524 <TIMER_IF_StartTimer+0x68>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	4413      	add	r3, r2
 80024e4:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 80024e6:	2300      	movs	r3, #0
 80024e8:	627b      	str	r3, [r7, #36]	@ 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	43db      	mvns	r3, r3
 80024ee:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80024f0:	2300      	movs	r3, #0
 80024f2:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 80024f4:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80024f8:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80024fa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80024fe:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002500:	f107 0308 	add.w	r3, r7, #8
 8002504:	2201      	movs	r2, #1
 8002506:	4619      	mov	r1, r3
 8002508:	4807      	ldr	r0, [pc, #28]	@ (8002528 <TIMER_IF_StartTimer+0x6c>)
 800250a:	f004 fca1 	bl	8006e50 <HAL_RTC_SetAlarm_IT>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 8002514:	f7ff fac4 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8002518:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 800251c:	4618      	mov	r0, r3
 800251e:	3738      	adds	r7, #56	@ 0x38
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	200003dc 	.word	0x200003dc
 8002528:	2000038c 	.word	0x2000038c

0800252c <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002532:	2300      	movs	r3, #0
 8002534:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8002536:	4b08      	ldr	r3, [pc, #32]	@ (8002558 <TIMER_IF_StopTimer+0x2c>)
 8002538:	2201      	movs	r2, #1
 800253a:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 800253c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002540:	4806      	ldr	r0, [pc, #24]	@ (800255c <TIMER_IF_StopTimer+0x30>)
 8002542:	f004 fd91 	bl	8007068 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002546:	4b05      	ldr	r3, [pc, #20]	@ (800255c <TIMER_IF_StopTimer+0x30>)
 8002548:	f04f 32ff 	mov.w	r2, #4294967295
 800254c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 800254e:	79fb      	ldrb	r3, [r7, #7]
}
 8002550:	4618      	mov	r0, r3
 8002552:	3708      	adds	r7, #8
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	40002800 	.word	0x40002800
 800255c:	2000038c 	.word	0x2000038c

08002560 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8002564:	f000 f98e 	bl	8002884 <GetTimerTicks>
 8002568:	4603      	mov	r3, r0
 800256a:	4a03      	ldr	r2, [pc, #12]	@ (8002578 <TIMER_IF_SetTimerContext+0x18>)
 800256c:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 800256e:	4b02      	ldr	r3, [pc, #8]	@ (8002578 <TIMER_IF_SetTimerContext+0x18>)
 8002570:	681b      	ldr	r3, [r3, #0]
}
 8002572:	4618      	mov	r0, r3
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	200003dc 	.word	0x200003dc

0800257c <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002580:	4b02      	ldr	r3, [pc, #8]	@ (800258c <TIMER_IF_GetTimerContext+0x10>)
 8002582:	681b      	ldr	r3, [r3, #0]
}
 8002584:	4618      	mov	r0, r3
 8002586:	46bd      	mov	sp, r7
 8002588:	bc80      	pop	{r7}
 800258a:	4770      	bx	lr
 800258c:	200003dc 	.word	0x200003dc

08002590 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002596:	2300      	movs	r3, #0
 8002598:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 800259a:	f000 f973 	bl	8002884 <GetTimerTicks>
 800259e:	4602      	mov	r2, r0
 80025a0:	4b04      	ldr	r3, [pc, #16]	@ (80025b4 <TIMER_IF_GetTimerElapsedTime+0x24>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 80025a8:	687b      	ldr	r3, [r7, #4]
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	200003dc 	.word	0x200003dc

080025b8 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80025be:	2300      	movs	r3, #0
 80025c0:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 80025c2:	4b06      	ldr	r3, [pc, #24]	@ (80025dc <TIMER_IF_GetTimerValue+0x24>)
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d002      	beq.n	80025d0 <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 80025ca:	f000 f95b 	bl	8002884 <GetTimerTicks>
 80025ce:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 80025d0:	687b      	ldr	r3, [r7, #4]
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3708      	adds	r7, #8
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	200003d8 	.word	0x200003d8

080025e0 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80025e6:	2300      	movs	r3, #0
 80025e8:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 80025ea:	2303      	movs	r3, #3
 80025ec:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 80025ee:	687b      	ldr	r3, [r7, #4]
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bc80      	pop	{r7}
 80025f8:	4770      	bx	lr

080025fa <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 80025fa:	b5b0      	push	{r4, r5, r7, lr}
 80025fc:	b084      	sub	sp, #16
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002602:	2100      	movs	r1, #0
 8002604:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8002606:	6879      	ldr	r1, [r7, #4]
 8002608:	2000      	movs	r0, #0
 800260a:	460a      	mov	r2, r1
 800260c:	4603      	mov	r3, r0
 800260e:	0d95      	lsrs	r5, r2, #22
 8002610:	0294      	lsls	r4, r2, #10
 8002612:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002616:	f04f 0300 	mov.w	r3, #0
 800261a:	4620      	mov	r0, r4
 800261c:	4629      	mov	r1, r5
 800261e:	f7fe fbcf 	bl	8000dc0 <__aeabi_uldivmod>
 8002622:	4602      	mov	r2, r0
 8002624:	460b      	mov	r3, r1
 8002626:	4613      	mov	r3, r2
 8002628:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 800262a:	68fb      	ldr	r3, [r7, #12]
}
 800262c:	4618      	mov	r0, r3
 800262e:	3710      	adds	r7, #16
 8002630:	46bd      	mov	sp, r7
 8002632:	bdb0      	pop	{r4, r5, r7, pc}

08002634 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8002634:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002638:	b085      	sub	sp, #20
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 800263e:	2100      	movs	r1, #0
 8002640:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8002642:	6879      	ldr	r1, [r7, #4]
 8002644:	2000      	movs	r0, #0
 8002646:	460c      	mov	r4, r1
 8002648:	4605      	mov	r5, r0
 800264a:	4620      	mov	r0, r4
 800264c:	4629      	mov	r1, r5
 800264e:	f04f 0a00 	mov.w	sl, #0
 8002652:	f04f 0b00 	mov.w	fp, #0
 8002656:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 800265a:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 800265e:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 8002662:	4650      	mov	r0, sl
 8002664:	4659      	mov	r1, fp
 8002666:	1b02      	subs	r2, r0, r4
 8002668:	eb61 0305 	sbc.w	r3, r1, r5
 800266c:	f04f 0000 	mov.w	r0, #0
 8002670:	f04f 0100 	mov.w	r1, #0
 8002674:	0099      	lsls	r1, r3, #2
 8002676:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800267a:	0090      	lsls	r0, r2, #2
 800267c:	4602      	mov	r2, r0
 800267e:	460b      	mov	r3, r1
 8002680:	eb12 0804 	adds.w	r8, r2, r4
 8002684:	eb43 0905 	adc.w	r9, r3, r5
 8002688:	f04f 0200 	mov.w	r2, #0
 800268c:	f04f 0300 	mov.w	r3, #0
 8002690:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002694:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002698:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800269c:	4690      	mov	r8, r2
 800269e:	4699      	mov	r9, r3
 80026a0:	4640      	mov	r0, r8
 80026a2:	4649      	mov	r1, r9
 80026a4:	f04f 0200 	mov.w	r2, #0
 80026a8:	f04f 0300 	mov.w	r3, #0
 80026ac:	0a82      	lsrs	r2, r0, #10
 80026ae:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 80026b2:	0a8b      	lsrs	r3, r1, #10
 80026b4:	4613      	mov	r3, r2
 80026b6:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 80026b8:	68fb      	ldr	r3, [r7, #12]
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3714      	adds	r7, #20
 80026be:	46bd      	mov	sp, r7
 80026c0:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80026c4:	4770      	bx	lr

080026c6 <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 80026c6:	b580      	push	{r7, lr}
 80026c8:	b084      	sub	sp, #16
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f7ff ff93 	bl	80025fa <TIMER_IF_Convert_ms2Tick>
 80026d4:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 80026d6:	f000 f8d5 	bl	8002884 <GetTimerTicks>
 80026da:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 80026dc:	e000      	b.n	80026e0 <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 80026de:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 80026e0:	f000 f8d0 	bl	8002884 <GetTimerTicks>
 80026e4:	4602      	mov	r2, r0
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	68fa      	ldr	r2, [r7, #12]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d8f6      	bhi.n	80026de <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 80026f0:	bf00      	nop
 80026f2:	bf00      	nop
 80026f4:	3710      	adds	r7, #16
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}

080026fa <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80026fa:	b580      	push	{r7, lr}
 80026fc:	b082      	sub	sp, #8
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8002702:	f018 feaf 	bl	801b464 <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 8002706:	bf00      	nop
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 800270e:	b580      	push	{r7, lr}
 8002710:	b084      	sub	sp, #16
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8002716:	f000 f8a5 	bl	8002864 <TIMER_IF_BkUp_Read_MSBticks>
 800271a:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	3301      	adds	r3, #1
 8002720:	4618      	mov	r0, r3
 8002722:	f000 f88f 	bl	8002844 <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 8002726:	bf00      	nop
 8002728:	3710      	adds	r7, #16
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}

0800272e <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 800272e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002732:	b08c      	sub	sp, #48	@ 0x30
 8002734:	af00      	add	r7, sp, #0
 8002736:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 8002738:	2300      	movs	r3, #0
 800273a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 800273c:	f000 f8a2 	bl	8002884 <GetTimerTicks>
 8002740:	62b8      	str	r0, [r7, #40]	@ 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8002742:	f000 f88f 	bl	8002864 <TIMER_IF_BkUp_Read_MSBticks>
 8002746:	6278      	str	r0, [r7, #36]	@ 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8002748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800274a:	2200      	movs	r2, #0
 800274c:	60bb      	str	r3, [r7, #8]
 800274e:	60fa      	str	r2, [r7, #12]
 8002750:	f04f 0200 	mov.w	r2, #0
 8002754:	f04f 0300 	mov.w	r3, #0
 8002758:	68b9      	ldr	r1, [r7, #8]
 800275a:	000b      	movs	r3, r1
 800275c:	2200      	movs	r2, #0
 800275e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002760:	2000      	movs	r0, #0
 8002762:	460c      	mov	r4, r1
 8002764:	4605      	mov	r5, r0
 8002766:	eb12 0804 	adds.w	r8, r2, r4
 800276a:	eb43 0905 	adc.w	r9, r3, r5
 800276e:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8002772:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002776:	f04f 0200 	mov.w	r2, #0
 800277a:	f04f 0300 	mov.w	r3, #0
 800277e:	0a82      	lsrs	r2, r0, #10
 8002780:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002784:	0a8b      	lsrs	r3, r1, #10
 8002786:	4613      	mov	r3, r2
 8002788:	62fb      	str	r3, [r7, #44]	@ 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	2200      	movs	r2, #0
 800278e:	603b      	str	r3, [r7, #0]
 8002790:	607a      	str	r2, [r7, #4]
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8002798:	f04f 0b00 	mov.w	fp, #0
 800279c:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	4618      	mov	r0, r3
 80027a4:	f7ff ff46 	bl	8002634 <TIMER_IF_Convert_Tick2ms>
 80027a8:	4603      	mov	r3, r0
 80027aa:	b29a      	uxth	r2, r3
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 80027b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3730      	adds	r7, #48	@ 0x30
 80027b6:	46bd      	mov	sp, r7
 80027b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080027bc <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	2100      	movs	r1, #0
 80027c8:	4803      	ldr	r0, [pc, #12]	@ (80027d8 <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 80027ca:	f004 fe1d 	bl	8007408 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 80027ce:	bf00      	nop
 80027d0:	3708      	adds	r7, #8
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	2000038c 	.word	0x2000038c

080027dc <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	2101      	movs	r1, #1
 80027e8:	4803      	ldr	r0, [pc, #12]	@ (80027f8 <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 80027ea:	f004 fe0d 	bl	8007408 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 80027ee:	bf00      	nop
 80027f0:	3708      	adds	r7, #8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	2000038c 	.word	0x2000038c

080027fc <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002802:	2300      	movs	r3, #0
 8002804:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8002806:	2100      	movs	r1, #0
 8002808:	4804      	ldr	r0, [pc, #16]	@ (800281c <TIMER_IF_BkUp_Read_Seconds+0x20>)
 800280a:	f004 fe15 	bl	8007438 <HAL_RTCEx_BKUPRead>
 800280e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 8002810:	687b      	ldr	r3, [r7, #4]
}
 8002812:	4618      	mov	r0, r3
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	2000038c 	.word	0x2000038c

08002820 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002826:	2300      	movs	r3, #0
 8002828:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 800282a:	2101      	movs	r1, #1
 800282c:	4804      	ldr	r0, [pc, #16]	@ (8002840 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 800282e:	f004 fe03 	bl	8007438 <HAL_RTCEx_BKUPRead>
 8002832:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 8002834:	687b      	ldr	r3, [r7, #4]
}
 8002836:	4618      	mov	r0, r3
 8002838:	3708      	adds	r7, #8
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	2000038c 	.word	0x2000038c

08002844 <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	2102      	movs	r1, #2
 8002850:	4803      	ldr	r0, [pc, #12]	@ (8002860 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 8002852:	f004 fdd9 	bl	8007408 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 8002856:	bf00      	nop
 8002858:	3708      	adds	r7, #8
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	2000038c 	.word	0x2000038c

08002864 <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 800286a:	2102      	movs	r1, #2
 800286c:	4804      	ldr	r0, [pc, #16]	@ (8002880 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 800286e:	f004 fde3 	bl	8007438 <HAL_RTCEx_BKUPRead>
 8002872:	6078      	str	r0, [r7, #4]
  return MSBticks;
 8002874:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 8002876:	4618      	mov	r0, r3
 8002878:	3708      	adds	r7, #8
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	2000038c 	.word	0x2000038c

08002884 <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 800288a:	480b      	ldr	r0, [pc, #44]	@ (80028b8 <GetTimerTicks+0x34>)
 800288c:	f7ff fdd8 	bl	8002440 <LL_RTC_TIME_GetSubSecond>
 8002890:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002892:	e003      	b.n	800289c <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8002894:	4808      	ldr	r0, [pc, #32]	@ (80028b8 <GetTimerTicks+0x34>)
 8002896:	f7ff fdd3 	bl	8002440 <LL_RTC_TIME_GetSubSecond>
 800289a:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 800289c:	4806      	ldr	r0, [pc, #24]	@ (80028b8 <GetTimerTicks+0x34>)
 800289e:	f7ff fdcf 	bl	8002440 <LL_RTC_TIME_GetSubSecond>
 80028a2:	4602      	mov	r2, r0
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d1f4      	bne.n	8002894 <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3708      	adds	r7, #8
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	40002800 	.word	0x40002800

080028bc <LL_AHB2_GRP1_EnableClock>:
{
 80028bc:	b480      	push	{r7}
 80028be:	b085      	sub	sp, #20
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80028c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028c8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80028ca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80028d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028d8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4013      	ands	r3, r2
 80028de:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80028e0:	68fb      	ldr	r3, [r7, #12]
}
 80028e2:	bf00      	nop
 80028e4:	3714      	adds	r7, #20
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bc80      	pop	{r7}
 80028ea:	4770      	bx	lr

080028ec <LL_APB1_GRP1_EnableClock>:
{
 80028ec:	b480      	push	{r7}
 80028ee:	b085      	sub	sp, #20
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80028f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028f8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80028fa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4313      	orrs	r3, r2
 8002902:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002904:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002908:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4013      	ands	r3, r2
 800290e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002910:	68fb      	ldr	r3, [r7, #12]
}
 8002912:	bf00      	nop
 8002914:	3714      	adds	r7, #20
 8002916:	46bd      	mov	sp, r7
 8002918:	bc80      	pop	{r7}
 800291a:	4770      	bx	lr

0800291c <LL_APB1_GRP1_DisableClock>:
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8002924:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002928:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	43db      	mvns	r3, r3
 800292e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002932:	4013      	ands	r3, r2
 8002934:	658b      	str	r3, [r1, #88]	@ 0x58
}
 8002936:	bf00      	nop
 8002938:	370c      	adds	r7, #12
 800293a:	46bd      	mov	sp, r7
 800293c:	bc80      	pop	{r7}
 800293e:	4770      	bx	lr

08002940 <LL_APB2_GRP1_EnableClock>:
{
 8002940:	b480      	push	{r7}
 8002942:	b085      	sub	sp, #20
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002948:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800294c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800294e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4313      	orrs	r3, r2
 8002956:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002958:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800295c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4013      	ands	r3, r2
 8002962:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002964:	68fb      	ldr	r3, [r7, #12]
}
 8002966:	bf00      	nop
 8002968:	3714      	adds	r7, #20
 800296a:	46bd      	mov	sp, r7
 800296c:	bc80      	pop	{r7}
 800296e:	4770      	bx	lr

08002970 <LL_APB2_GRP1_DisableClock>:
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8002978:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800297c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	43db      	mvns	r3, r3
 8002982:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002986:	4013      	ands	r3, r2
 8002988:	660b      	str	r3, [r1, #96]	@ 0x60
}
 800298a:	bf00      	nop
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	bc80      	pop	{r7}
 8002992:	4770      	bx	lr

08002994 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002998:	4b22      	ldr	r3, [pc, #136]	@ (8002a24 <MX_USART1_UART_Init+0x90>)
 800299a:	4a23      	ldr	r2, [pc, #140]	@ (8002a28 <MX_USART1_UART_Init+0x94>)
 800299c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800299e:	4b21      	ldr	r3, [pc, #132]	@ (8002a24 <MX_USART1_UART_Init+0x90>)
 80029a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80029a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80029a6:	4b1f      	ldr	r3, [pc, #124]	@ (8002a24 <MX_USART1_UART_Init+0x90>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80029ac:	4b1d      	ldr	r3, [pc, #116]	@ (8002a24 <MX_USART1_UART_Init+0x90>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80029b2:	4b1c      	ldr	r3, [pc, #112]	@ (8002a24 <MX_USART1_UART_Init+0x90>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80029b8:	4b1a      	ldr	r3, [pc, #104]	@ (8002a24 <MX_USART1_UART_Init+0x90>)
 80029ba:	220c      	movs	r2, #12
 80029bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029be:	4b19      	ldr	r3, [pc, #100]	@ (8002a24 <MX_USART1_UART_Init+0x90>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80029c4:	4b17      	ldr	r3, [pc, #92]	@ (8002a24 <MX_USART1_UART_Init+0x90>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80029ca:	4b16      	ldr	r3, [pc, #88]	@ (8002a24 <MX_USART1_UART_Init+0x90>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80029d0:	4b14      	ldr	r3, [pc, #80]	@ (8002a24 <MX_USART1_UART_Init+0x90>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80029d6:	4b13      	ldr	r3, [pc, #76]	@ (8002a24 <MX_USART1_UART_Init+0x90>)
 80029d8:	2200      	movs	r2, #0
 80029da:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80029dc:	4811      	ldr	r0, [pc, #68]	@ (8002a24 <MX_USART1_UART_Init+0x90>)
 80029de:	f005 fa18 	bl	8007e12 <HAL_UART_Init>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d001      	beq.n	80029ec <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80029e8:	f7ff f85a 	bl	8001aa0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80029ec:	2100      	movs	r1, #0
 80029ee:	480d      	ldr	r0, [pc, #52]	@ (8002a24 <MX_USART1_UART_Init+0x90>)
 80029f0:	f007 fac7 	bl	8009f82 <HAL_UARTEx_SetTxFifoThreshold>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d001      	beq.n	80029fe <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80029fa:	f7ff f851 	bl	8001aa0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80029fe:	2100      	movs	r1, #0
 8002a00:	4808      	ldr	r0, [pc, #32]	@ (8002a24 <MX_USART1_UART_Init+0x90>)
 8002a02:	f007 fafc 	bl	8009ffe <HAL_UARTEx_SetRxFifoThreshold>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d001      	beq.n	8002a10 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002a0c:	f7ff f848 	bl	8001aa0 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 8002a10:	4804      	ldr	r0, [pc, #16]	@ (8002a24 <MX_USART1_UART_Init+0x90>)
 8002a12:	f007 fa43 	bl	8009e9c <HAL_UARTEx_EnableFifoMode>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d001      	beq.n	8002a20 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002a1c:	f7ff f840 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002a20:	bf00      	nop
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	200003e0 	.word	0x200003e0
 8002a28:	40013800 	.word	0x40013800

08002a2c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002a30:	4b22      	ldr	r3, [pc, #136]	@ (8002abc <MX_USART2_UART_Init+0x90>)
 8002a32:	4a23      	ldr	r2, [pc, #140]	@ (8002ac0 <MX_USART2_UART_Init+0x94>)
 8002a34:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002a36:	4b21      	ldr	r3, [pc, #132]	@ (8002abc <MX_USART2_UART_Init+0x90>)
 8002a38:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002a3c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002a3e:	4b1f      	ldr	r3, [pc, #124]	@ (8002abc <MX_USART2_UART_Init+0x90>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002a44:	4b1d      	ldr	r3, [pc, #116]	@ (8002abc <MX_USART2_UART_Init+0x90>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002a4a:	4b1c      	ldr	r3, [pc, #112]	@ (8002abc <MX_USART2_UART_Init+0x90>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002a50:	4b1a      	ldr	r3, [pc, #104]	@ (8002abc <MX_USART2_UART_Init+0x90>)
 8002a52:	220c      	movs	r2, #12
 8002a54:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a56:	4b19      	ldr	r3, [pc, #100]	@ (8002abc <MX_USART2_UART_Init+0x90>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a5c:	4b17      	ldr	r3, [pc, #92]	@ (8002abc <MX_USART2_UART_Init+0x90>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a62:	4b16      	ldr	r3, [pc, #88]	@ (8002abc <MX_USART2_UART_Init+0x90>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002a68:	4b14      	ldr	r3, [pc, #80]	@ (8002abc <MX_USART2_UART_Init+0x90>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a6e:	4b13      	ldr	r3, [pc, #76]	@ (8002abc <MX_USART2_UART_Init+0x90>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002a74:	4811      	ldr	r0, [pc, #68]	@ (8002abc <MX_USART2_UART_Init+0x90>)
 8002a76:	f005 f9cc 	bl	8007e12 <HAL_UART_Init>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d001      	beq.n	8002a84 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002a80:	f7ff f80e 	bl	8001aa0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a84:	2100      	movs	r1, #0
 8002a86:	480d      	ldr	r0, [pc, #52]	@ (8002abc <MX_USART2_UART_Init+0x90>)
 8002a88:	f007 fa7b 	bl	8009f82 <HAL_UARTEx_SetTxFifoThreshold>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d001      	beq.n	8002a96 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002a92:	f7ff f805 	bl	8001aa0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a96:	2100      	movs	r1, #0
 8002a98:	4808      	ldr	r0, [pc, #32]	@ (8002abc <MX_USART2_UART_Init+0x90>)
 8002a9a:	f007 fab0 	bl	8009ffe <HAL_UARTEx_SetRxFifoThreshold>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d001      	beq.n	8002aa8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002aa4:	f7fe fffc 	bl	8001aa0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002aa8:	4804      	ldr	r0, [pc, #16]	@ (8002abc <MX_USART2_UART_Init+0x90>)
 8002aaa:	f007 fa32 	bl	8009f12 <HAL_UARTEx_DisableFifoMode>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d001      	beq.n	8002ab8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002ab4:	f7fe fff4 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002ab8:	bf00      	nop
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	20000470 	.word	0x20000470
 8002ac0:	40004400 	.word	0x40004400

08002ac4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b096      	sub	sp, #88	@ 0x58
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002acc:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	601a      	str	r2, [r3, #0]
 8002ad4:	605a      	str	r2, [r3, #4]
 8002ad6:	609a      	str	r2, [r3, #8]
 8002ad8:	60da      	str	r2, [r3, #12]
 8002ada:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002adc:	f107 030c 	add.w	r3, r7, #12
 8002ae0:	2238      	movs	r2, #56	@ 0x38
 8002ae2:	2100      	movs	r1, #0
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f019 fe00 	bl	801c6ea <memset>
  if(uartHandle->Instance==USART1)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a49      	ldr	r2, [pc, #292]	@ (8002c14 <HAL_UART_MspInit+0x150>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d157      	bne.n	8002ba4 <HAL_UART_MspInit+0xe0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002af4:	2301      	movs	r3, #1
 8002af6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002af8:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8002afc:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002afe:	f107 030c 	add.w	r3, r7, #12
 8002b02:	4618      	mov	r0, r3
 8002b04:	f004 f810 	bl	8006b28 <HAL_RCCEx_PeriphCLKConfig>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002b0e:	f7fe ffc7 	bl	8001aa0 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b12:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002b16:	f7ff ff13 	bl	8002940 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b1a:	2002      	movs	r0, #2
 8002b1c:	f7ff fece 	bl	80028bc <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 8002b20:	23c0      	movs	r3, #192	@ 0xc0
 8002b22:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b24:	2302      	movs	r3, #2
 8002b26:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002b30:	2307      	movs	r3, #7
 8002b32:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b34:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002b38:	4619      	mov	r1, r3
 8002b3a:	4837      	ldr	r0, [pc, #220]	@ (8002c18 <HAL_UART_MspInit+0x154>)
 8002b3c:	f002 faf6 	bl	800512c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 8002b40:	4b36      	ldr	r3, [pc, #216]	@ (8002c1c <HAL_UART_MspInit+0x158>)
 8002b42:	4a37      	ldr	r2, [pc, #220]	@ (8002c20 <HAL_UART_MspInit+0x15c>)
 8002b44:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002b46:	4b35      	ldr	r3, [pc, #212]	@ (8002c1c <HAL_UART_MspInit+0x158>)
 8002b48:	2212      	movs	r2, #18
 8002b4a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b4c:	4b33      	ldr	r3, [pc, #204]	@ (8002c1c <HAL_UART_MspInit+0x158>)
 8002b4e:	2210      	movs	r2, #16
 8002b50:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b52:	4b32      	ldr	r3, [pc, #200]	@ (8002c1c <HAL_UART_MspInit+0x158>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b58:	4b30      	ldr	r3, [pc, #192]	@ (8002c1c <HAL_UART_MspInit+0x158>)
 8002b5a:	2280      	movs	r2, #128	@ 0x80
 8002b5c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b5e:	4b2f      	ldr	r3, [pc, #188]	@ (8002c1c <HAL_UART_MspInit+0x158>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b64:	4b2d      	ldr	r3, [pc, #180]	@ (8002c1c <HAL_UART_MspInit+0x158>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002b6a:	4b2c      	ldr	r3, [pc, #176]	@ (8002c1c <HAL_UART_MspInit+0x158>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002b70:	4b2a      	ldr	r3, [pc, #168]	@ (8002c1c <HAL_UART_MspInit+0x158>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002b76:	4829      	ldr	r0, [pc, #164]	@ (8002c1c <HAL_UART_MspInit+0x158>)
 8002b78:	f001 fc8c 	bl	8004494 <HAL_DMA_Init>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d001      	beq.n	8002b86 <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 8002b82:	f7fe ff8d 	bl	8001aa0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a24      	ldr	r2, [pc, #144]	@ (8002c1c <HAL_UART_MspInit+0x158>)
 8002b8a:	679a      	str	r2, [r3, #120]	@ 0x78
 8002b8c:	4a23      	ldr	r2, [pc, #140]	@ (8002c1c <HAL_UART_MspInit+0x158>)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8002b92:	2200      	movs	r2, #0
 8002b94:	2102      	movs	r1, #2
 8002b96:	2024      	movs	r0, #36	@ 0x24
 8002b98:	f001 fc45 	bl	8004426 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002b9c:	2024      	movs	r0, #36	@ 0x24
 8002b9e:	f001 fc5c 	bl	800445a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002ba2:	e033      	b.n	8002c0c <HAL_UART_MspInit+0x148>
  else if(uartHandle->Instance==USART2)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a1e      	ldr	r2, [pc, #120]	@ (8002c24 <HAL_UART_MspInit+0x160>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d12e      	bne.n	8002c0c <HAL_UART_MspInit+0x148>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002bae:	2302      	movs	r3, #2
 8002bb0:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002bb2:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 8002bb6:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002bb8:	f107 030c 	add.w	r3, r7, #12
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f003 ffb3 	bl	8006b28 <HAL_RCCEx_PeriphCLKConfig>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d001      	beq.n	8002bcc <HAL_UART_MspInit+0x108>
      Error_Handler();
 8002bc8:	f7fe ff6a 	bl	8001aa0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002bcc:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8002bd0:	f7ff fe8c 	bl	80028ec <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bd4:	2001      	movs	r0, #1
 8002bd6:	f7ff fe71 	bl	80028bc <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 8002bda:	230c      	movs	r3, #12
 8002bdc:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bde:	2302      	movs	r3, #2
 8002be0:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be2:	2300      	movs	r3, #0
 8002be4:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002be6:	2300      	movs	r3, #0
 8002be8:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002bea:	2307      	movs	r3, #7
 8002bec:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bee:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002bf8:	f002 fa98 	bl	800512c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	2100      	movs	r1, #0
 8002c00:	2025      	movs	r0, #37	@ 0x25
 8002c02:	f001 fc10 	bl	8004426 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002c06:	2025      	movs	r0, #37	@ 0x25
 8002c08:	f001 fc27 	bl	800445a <HAL_NVIC_EnableIRQ>
}
 8002c0c:	bf00      	nop
 8002c0e:	3758      	adds	r7, #88	@ 0x58
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	40013800 	.word	0x40013800
 8002c18:	48000400 	.word	0x48000400
 8002c1c:	20000500 	.word	0x20000500
 8002c20:	40020008 	.word	0x40020008
 8002c24:	40004400 	.word	0x40004400

08002c28 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a14      	ldr	r2, [pc, #80]	@ (8002c88 <HAL_UART_MspDeInit+0x60>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d110      	bne.n	8002c5c <HAL_UART_MspDeInit+0x34>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8002c3a:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002c3e:	f7ff fe97 	bl	8002970 <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOB, USARTx_RX_Pin|USARTx_TX_Pin);
 8002c42:	21c0      	movs	r1, #192	@ 0xc0
 8002c44:	4811      	ldr	r0, [pc, #68]	@ (8002c8c <HAL_UART_MspDeInit+0x64>)
 8002c46:	f002 fbd1 	bl	80053ec <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f001 fcc8 	bl	80045e4 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002c54:	2024      	movs	r0, #36	@ 0x24
 8002c56:	f001 fc0e 	bl	8004476 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8002c5a:	e010      	b.n	8002c7e <HAL_UART_MspDeInit+0x56>
  else if(uartHandle->Instance==USART2)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a0b      	ldr	r2, [pc, #44]	@ (8002c90 <HAL_UART_MspDeInit+0x68>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d10b      	bne.n	8002c7e <HAL_UART_MspDeInit+0x56>
    __HAL_RCC_USART2_CLK_DISABLE();
 8002c66:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8002c6a:	f7ff fe57 	bl	800291c <LL_APB1_GRP1_DisableClock>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_3|GPIO_PIN_2);
 8002c6e:	210c      	movs	r1, #12
 8002c70:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c74:	f002 fbba 	bl	80053ec <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8002c78:	2025      	movs	r0, #37	@ 0x25
 8002c7a:	f001 fbfc 	bl	8004476 <HAL_NVIC_DisableIRQ>
}
 8002c7e:	bf00      	nop
 8002c80:	3708      	adds	r7, #8
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	40013800 	.word	0x40013800
 8002c8c:	48000400 	.word	0x48000400
 8002c90:	40004400 	.word	0x40004400

08002c94 <LL_APB2_GRP1_ForceReset>:
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 8002c9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ca0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ca2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	640b      	str	r3, [r1, #64]	@ 0x40
}
 8002cac:	bf00      	nop
 8002cae:	370c      	adds	r7, #12
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bc80      	pop	{r7}
 8002cb4:	4770      	bx	lr

08002cb6 <LL_APB2_GRP1_ReleaseReset>:
{
 8002cb6:	b480      	push	{r7}
 8002cb8:	b083      	sub	sp, #12
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 8002cbe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cc2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	43db      	mvns	r3, r3
 8002cc8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002ccc:	4013      	ands	r3, r2
 8002cce:	640b      	str	r3, [r1, #64]	@ 0x40
}
 8002cd0:	bf00      	nop
 8002cd2:	370c      	adds	r7, #12
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bc80      	pop	{r7}
 8002cd8:	4770      	bx	lr
	...

08002cdc <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002ce4:	4b06      	ldr	r3, [pc, #24]	@ (8002d00 <LL_EXTI_EnableIT_0_31+0x24>)
 8002ce6:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8002cea:	4905      	ldr	r1, [pc, #20]	@ (8002d00 <LL_EXTI_EnableIT_0_31+0x24>)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8002cf4:	bf00      	nop
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bc80      	pop	{r7}
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	58000800 	.word	0x58000800

08002d04 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8002d0c:	4a07      	ldr	r2, [pc, #28]	@ (8002d2c <vcom_Init+0x28>)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 8002d12:	f7fe fb2b 	bl	800136c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002d16:	f7ff fe3d 	bl	8002994 <MX_USART1_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_26);
 8002d1a:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8002d1e:	f7ff ffdd 	bl	8002cdc <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 8002d22:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3708      	adds	r7, #8
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	20000564 	.word	0x20000564

08002d30 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
 8002d34:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002d38:	f7ff ffac 	bl	8002c94 <LL_APB2_GRP1_ForceReset>
  __HAL_RCC_USART1_RELEASE_RESET();
 8002d3c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002d40:	f7ff ffb9 	bl	8002cb6 <LL_APB2_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 8002d44:	4804      	ldr	r0, [pc, #16]	@ (8002d58 <vcom_DeInit+0x28>)
 8002d46:	f7ff ff6f 	bl	8002c28 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8002d4a:	200f      	movs	r0, #15
 8002d4c:	f001 fb93 	bl	8004476 <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 8002d50:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	200003e0 	.word	0x200003e0

08002d5c <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	460b      	mov	r3, r1
 8002d66:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8002d68:	887b      	ldrh	r3, [r7, #2]
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	6879      	ldr	r1, [r7, #4]
 8002d6e:	4804      	ldr	r0, [pc, #16]	@ (8002d80 <vcom_Trace_DMA+0x24>)
 8002d70:	f005 f8f6 	bl	8007f60 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 8002d74:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3708      	adds	r7, #8
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	200003e0 	.word	0x200003e0

08002d84 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8002d8c:	4a19      	ldr	r2, [pc, #100]	@ (8002df4 <vcom_ReceiveInit+0x70>)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8002d92:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002d96:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 8002d98:	f107 0308 	add.w	r3, r7, #8
 8002d9c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002da0:	4815      	ldr	r0, [pc, #84]	@ (8002df8 <vcom_ReceiveInit+0x74>)
 8002da2:	f006 ffee 	bl	8009d82 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 8002da6:	bf00      	nop
 8002da8:	4b13      	ldr	r3, [pc, #76]	@ (8002df8 <vcom_ReceiveInit+0x74>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	69db      	ldr	r3, [r3, #28]
 8002dae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002db2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002db6:	d0f7      	beq.n	8002da8 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 8002db8:	bf00      	nop
 8002dba:	4b0f      	ldr	r3, [pc, #60]	@ (8002df8 <vcom_ReceiveInit+0x74>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	69db      	ldr	r3, [r3, #28]
 8002dc0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dc4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002dc8:	d1f7      	bne.n	8002dba <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8002dca:	4b0b      	ldr	r3, [pc, #44]	@ (8002df8 <vcom_ReceiveInit+0x74>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	689a      	ldr	r2, [r3, #8]
 8002dd0:	4b09      	ldr	r3, [pc, #36]	@ (8002df8 <vcom_ReceiveInit+0x74>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8002dd8:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 8002dda:	4807      	ldr	r0, [pc, #28]	@ (8002df8 <vcom_ReceiveInit+0x74>)
 8002ddc:	f007 f82c 	bl	8009e38 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 8002de0:	2201      	movs	r2, #1
 8002de2:	4906      	ldr	r1, [pc, #24]	@ (8002dfc <vcom_ReceiveInit+0x78>)
 8002de4:	4804      	ldr	r0, [pc, #16]	@ (8002df8 <vcom_ReceiveInit+0x74>)
 8002de6:	f005 f865 	bl	8007eb4 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 8002dea:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3710      	adds	r7, #16
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	20000568 	.word	0x20000568
 8002df8:	200003e0 	.word	0x200003e0
 8002dfc:	20000560 	.word	0x20000560

08002e00 <vcom_Resume>:

void vcom_Resume(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002e04:	4808      	ldr	r0, [pc, #32]	@ (8002e28 <vcom_Resume+0x28>)
 8002e06:	f005 f804 	bl	8007e12 <HAL_UART_Init>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d001      	beq.n	8002e14 <vcom_Resume+0x14>
  {
    Error_Handler();
 8002e10:	f7fe fe46 	bl	8001aa0 <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002e14:	4805      	ldr	r0, [pc, #20]	@ (8002e2c <vcom_Resume+0x2c>)
 8002e16:	f001 fb3d 	bl	8004494 <HAL_DMA_Init>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d001      	beq.n	8002e24 <vcom_Resume+0x24>
  {
    Error_Handler();
 8002e20:	f7fe fe3e 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8002e24:	bf00      	nop
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	200003e0 	.word	0x200003e0
 8002e2c:	20000500 	.word	0x20000500

08002e30 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART1)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a05      	ldr	r2, [pc, #20]	@ (8002e54 <HAL_UART_TxCpltCallback+0x24>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d103      	bne.n	8002e4a <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 8002e42:	4b05      	ldr	r3, [pc, #20]	@ (8002e58 <HAL_UART_TxCpltCallback+0x28>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2000      	movs	r0, #0
 8002e48:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8002e4a:	bf00      	nop
 8002e4c:	3708      	adds	r7, #8
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	40013800 	.word	0x40013800
 8002e58:	20000564 	.word	0x20000564

08002e5c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART1)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a0d      	ldr	r2, [pc, #52]	@ (8002ea0 <HAL_UART_RxCpltCallback+0x44>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d113      	bne.n	8002e96 <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 8002e6e:	4b0d      	ldr	r3, [pc, #52]	@ (8002ea4 <HAL_UART_RxCpltCallback+0x48>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d00a      	beq.n	8002e8c <HAL_UART_RxCpltCallback+0x30>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d105      	bne.n	8002e8c <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 8002e80:	4b08      	ldr	r3, [pc, #32]	@ (8002ea4 <HAL_UART_RxCpltCallback+0x48>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2200      	movs	r2, #0
 8002e86:	2101      	movs	r1, #1
 8002e88:	4807      	ldr	r0, [pc, #28]	@ (8002ea8 <HAL_UART_RxCpltCallback+0x4c>)
 8002e8a:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	4906      	ldr	r1, [pc, #24]	@ (8002ea8 <HAL_UART_RxCpltCallback+0x4c>)
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f005 f80f 	bl	8007eb4 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8002e96:	bf00      	nop
 8002e98:	3708      	adds	r7, #8
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	40013800 	.word	0x40013800
 8002ea4:	20000568 	.word	0x20000568
 8002ea8:	20000560 	.word	0x20000560

08002eac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002eac:	480d      	ldr	r0, [pc, #52]	@ (8002ee4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002eae:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002eb0:	f7ff fac0 	bl	8002434 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002eb4:	480c      	ldr	r0, [pc, #48]	@ (8002ee8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002eb6:	490d      	ldr	r1, [pc, #52]	@ (8002eec <LoopForever+0xa>)
  ldr r2, =_sidata
 8002eb8:	4a0d      	ldr	r2, [pc, #52]	@ (8002ef0 <LoopForever+0xe>)
  movs r3, #0
 8002eba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ebc:	e002      	b.n	8002ec4 <LoopCopyDataInit>

08002ebe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ebe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ec0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ec2:	3304      	adds	r3, #4

08002ec4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ec4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ec6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ec8:	d3f9      	bcc.n	8002ebe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002eca:	4a0a      	ldr	r2, [pc, #40]	@ (8002ef4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ecc:	4c0a      	ldr	r4, [pc, #40]	@ (8002ef8 <LoopForever+0x16>)
  movs r3, #0
 8002ece:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ed0:	e001      	b.n	8002ed6 <LoopFillZerobss>

08002ed2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ed2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ed4:	3204      	adds	r2, #4

08002ed6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ed6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ed8:	d3fb      	bcc.n	8002ed2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002eda:	f019 fc5f 	bl	801c79c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002ede:	f7fe fcbb 	bl	8001858 <main>

08002ee2 <LoopForever>:

LoopForever:
    b LoopForever
 8002ee2:	e7fe      	b.n	8002ee2 <LoopForever>
  ldr   r0, =_estack
 8002ee4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002ee8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002eec:	20000308 	.word	0x20000308
  ldr r2, =_sidata
 8002ef0:	0801fb0c 	.word	0x0801fb0c
  ldr r2, =_sbss
 8002ef4:	20000308 	.word	0x20000308
  ldr r4, =_ebss
 8002ef8:	2000250c 	.word	0x2000250c

08002efc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002efc:	e7fe      	b.n	8002efc <ADC_IRQHandler>

08002efe <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8002efe:	b580      	push	{r7, lr}
 8002f00:	b086      	sub	sp, #24
 8002f02:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8002f04:	1d3b      	adds	r3, r7, #4
 8002f06:	2200      	movs	r2, #0
 8002f08:	601a      	str	r2, [r3, #0]
 8002f0a:	605a      	str	r2, [r3, #4]
 8002f0c:	609a      	str	r2, [r3, #8]
 8002f0e:	60da      	str	r2, [r3, #12]
 8002f10:	611a      	str	r2, [r3, #16]
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8002f12:	2310      	movs	r3, #16
 8002f14:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002f16:	2301      	movs	r3, #1
 8002f18:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8002f22:	1d3b      	adds	r3, r7, #4
 8002f24:	4619      	mov	r1, r3
 8002f26:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002f2a:	f002 f8ff 	bl	800512c <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8002f2e:	2320      	movs	r3, #32
 8002f30:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8002f32:	1d3b      	adds	r3, r7, #4
 8002f34:	4619      	mov	r1, r3
 8002f36:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002f3a:	f002 f8f7 	bl	800512c <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002f3e:	2200      	movs	r2, #0
 8002f40:	2120      	movs	r1, #32
 8002f42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002f46:	f002 fb36 	bl	80055b6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	2110      	movs	r1, #16
 8002f4e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002f52:	f002 fb30 	bl	80055b6 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8002f56:	2300      	movs	r3, #0
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3718      	adds	r7, #24
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	4603      	mov	r3, r0
 8002f68:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 8002f6a:	79fb      	ldrb	r3, [r7, #7]
 8002f6c:	2b03      	cmp	r3, #3
 8002f6e:	d83f      	bhi.n	8002ff0 <BSP_RADIO_ConfigRFSwitch+0x90>
 8002f70:	a201      	add	r2, pc, #4	@ (adr r2, 8002f78 <BSP_RADIO_ConfigRFSwitch+0x18>)
 8002f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f76:	bf00      	nop
 8002f78:	08002f89 	.word	0x08002f89
 8002f7c:	08002fa3 	.word	0x08002fa3
 8002f80:	08002fbd 	.word	0x08002fbd
 8002f84:	08002fd7 	.word	0x08002fd7
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8002f88:	2200      	movs	r2, #0
 8002f8a:	2110      	movs	r1, #16
 8002f8c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002f90:	f002 fb11 	bl	80055b6 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8002f94:	2200      	movs	r2, #0
 8002f96:	2120      	movs	r1, #32
 8002f98:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002f9c:	f002 fb0b 	bl	80055b6 <HAL_GPIO_WritePin>
      break;      
 8002fa0:	e027      	b.n	8002ff2 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	2110      	movs	r1, #16
 8002fa6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002faa:	f002 fb04 	bl	80055b6 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002fae:	2200      	movs	r2, #0
 8002fb0:	2120      	movs	r1, #32
 8002fb2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002fb6:	f002 fafe 	bl	80055b6 <HAL_GPIO_WritePin>
      break;
 8002fba:	e01a      	b.n	8002ff2 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	2110      	movs	r1, #16
 8002fc0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002fc4:	f002 faf7 	bl	80055b6 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002fc8:	2201      	movs	r2, #1
 8002fca:	2120      	movs	r1, #32
 8002fcc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002fd0:	f002 faf1 	bl	80055b6 <HAL_GPIO_WritePin>
      break;
 8002fd4:	e00d      	b.n	8002ff2 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	2110      	movs	r1, #16
 8002fda:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002fde:	f002 faea 	bl	80055b6 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	2120      	movs	r1, #32
 8002fe6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002fea:	f002 fae4 	bl	80055b6 <HAL_GPIO_WritePin>
      break;
 8002fee:	e000      	b.n	8002ff2 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    default:
      break;    
 8002ff0:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 8002ff2:	2300      	movs	r3, #0
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3708      	adds	r7, #8
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_HP;
 8003000:	2302      	movs	r3, #2
}
 8003002:	4618      	mov	r0, r3
 8003004:	46bd      	mov	sp, r7
 8003006:	bc80      	pop	{r7}
 8003008:	4770      	bx	lr

0800300a <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 800300a:	b480      	push	{r7}
 800300c:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 800300e:	2301      	movs	r3, #1
}
 8003010:	4618      	mov	r0, r3
 8003012:	46bd      	mov	sp, r7
 8003014:	bc80      	pop	{r7}
 8003016:	4770      	bx	lr

08003018 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 8003018:	b480      	push	{r7}
 800301a:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 800301c:	2301      	movs	r3, #1
}
 800301e:	4618      	mov	r0, r3
 8003020:	46bd      	mov	sp, r7
 8003022:	bc80      	pop	{r7}
 8003024:	4770      	bx	lr

08003026 <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 8003026:	b480      	push	{r7}
 8003028:	b085      	sub	sp, #20
 800302a:	af00      	add	r7, sp, #0
 800302c:	4603      	mov	r3, r0
 800302e:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8003030:	79fb      	ldrb	r3, [r7, #7]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d102      	bne.n	800303c <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 8003036:	230f      	movs	r3, #15
 8003038:	60fb      	str	r3, [r7, #12]
 800303a:	e001      	b.n	8003040 <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 800303c:	2316      	movs	r3, #22
 800303e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003040:	68fb      	ldr	r3, [r7, #12]
}
 8003042:	4618      	mov	r0, r3
 8003044:	3714      	adds	r7, #20
 8003046:	46bd      	mov	sp, r7
 8003048:	bc80      	pop	{r7}
 800304a:	4770      	bx	lr

0800304c <LL_DBGMCU_DisableDBGSleepMode>:
{
 800304c:	b480      	push	{r7}
 800304e:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8003050:	4b04      	ldr	r3, [pc, #16]	@ (8003064 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	4a03      	ldr	r2, [pc, #12]	@ (8003064 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 8003056:	f023 0301 	bic.w	r3, r3, #1
 800305a:	6053      	str	r3, [r2, #4]
}
 800305c:	bf00      	nop
 800305e:	46bd      	mov	sp, r7
 8003060:	bc80      	pop	{r7}
 8003062:	4770      	bx	lr
 8003064:	e0042000 	.word	0xe0042000

08003068 <LL_DBGMCU_DisableDBGStopMode>:
{
 8003068:	b480      	push	{r7}
 800306a:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 800306c:	4b04      	ldr	r3, [pc, #16]	@ (8003080 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	4a03      	ldr	r2, [pc, #12]	@ (8003080 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8003072:	f023 0302 	bic.w	r3, r3, #2
 8003076:	6053      	str	r3, [r2, #4]
}
 8003078:	bf00      	nop
 800307a:	46bd      	mov	sp, r7
 800307c:	bc80      	pop	{r7}
 800307e:	4770      	bx	lr
 8003080:	e0042000 	.word	0xe0042000

08003084 <LL_DBGMCU_DisableDBGStandbyMode>:
{
 8003084:	b480      	push	{r7}
 8003086:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8003088:	4b04      	ldr	r3, [pc, #16]	@ (800309c <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	4a03      	ldr	r2, [pc, #12]	@ (800309c <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 800308e:	f023 0304 	bic.w	r3, r3, #4
 8003092:	6053      	str	r3, [r2, #4]
}
 8003094:	bf00      	nop
 8003096:	46bd      	mov	sp, r7
 8003098:	bc80      	pop	{r7}
 800309a:	4770      	bx	lr
 800309c:	e0042000 	.word	0xe0042000

080030a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80030a6:	2300      	movs	r3, #0
 80030a8:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030aa:	2003      	movs	r0, #3
 80030ac:	f001 f9b0 	bl	8004410 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80030b0:	f003 fb5c 	bl	800676c <HAL_RCC_GetHCLKFreq>
 80030b4:	4603      	mov	r3, r0
 80030b6:	4a09      	ldr	r2, [pc, #36]	@ (80030dc <HAL_Init+0x3c>)
 80030b8:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80030ba:	200f      	movs	r0, #15
 80030bc:	f7ff f826 	bl	800210c <HAL_InitTick>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d002      	beq.n	80030cc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	71fb      	strb	r3, [r7, #7]
 80030ca:	e001      	b.n	80030d0 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80030cc:	f7fe fddf 	bl	8001c8e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80030d0:	79fb      	ldrb	r3, [r7, #7]
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3708      	adds	r7, #8
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	20000000 	.word	0x20000000

080030e0 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80030e0:	b480      	push	{r7}
 80030e2:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80030e4:	4b04      	ldr	r3, [pc, #16]	@ (80030f8 <HAL_SuspendTick+0x18>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a03      	ldr	r2, [pc, #12]	@ (80030f8 <HAL_SuspendTick+0x18>)
 80030ea:	f023 0302 	bic.w	r3, r3, #2
 80030ee:	6013      	str	r3, [r2, #0]
}
 80030f0:	bf00      	nop
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bc80      	pop	{r7}
 80030f6:	4770      	bx	lr
 80030f8:	e000e010 	.word	0xe000e010

080030fc <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80030fc:	b480      	push	{r7}
 80030fe:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003100:	4b04      	ldr	r3, [pc, #16]	@ (8003114 <HAL_ResumeTick+0x18>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a03      	ldr	r2, [pc, #12]	@ (8003114 <HAL_ResumeTick+0x18>)
 8003106:	f043 0302 	orr.w	r3, r3, #2
 800310a:	6013      	str	r3, [r2, #0]
}
 800310c:	bf00      	nop
 800310e:	46bd      	mov	sp, r7
 8003110:	bc80      	pop	{r7}
 8003112:	4770      	bx	lr
 8003114:	e000e010 	.word	0xe000e010

08003118 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8003118:	b480      	push	{r7}
 800311a:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 800311c:	4b02      	ldr	r3, [pc, #8]	@ (8003128 <HAL_GetUIDw0+0x10>)
 800311e:	681b      	ldr	r3, [r3, #0]
}
 8003120:	4618      	mov	r0, r3
 8003122:	46bd      	mov	sp, r7
 8003124:	bc80      	pop	{r7}
 8003126:	4770      	bx	lr
 8003128:	1fff7590 	.word	0x1fff7590

0800312c <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 800312c:	b480      	push	{r7}
 800312e:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8003130:	4b02      	ldr	r3, [pc, #8]	@ (800313c <HAL_GetUIDw1+0x10>)
 8003132:	681b      	ldr	r3, [r3, #0]
}
 8003134:	4618      	mov	r0, r3
 8003136:	46bd      	mov	sp, r7
 8003138:	bc80      	pop	{r7}
 800313a:	4770      	bx	lr
 800313c:	1fff7594 	.word	0x1fff7594

08003140 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8003140:	b480      	push	{r7}
 8003142:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8003144:	4b02      	ldr	r3, [pc, #8]	@ (8003150 <HAL_GetUIDw2+0x10>)
 8003146:	681b      	ldr	r3, [r3, #0]
}
 8003148:	4618      	mov	r0, r3
 800314a:	46bd      	mov	sp, r7
 800314c:	bc80      	pop	{r7}
 800314e:	4770      	bx	lr
 8003150:	1fff7598 	.word	0x1fff7598

08003154 <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGSleepMode();
 8003158:	f7ff ff78 	bl	800304c <LL_DBGMCU_DisableDBGSleepMode>
}
 800315c:	bf00      	nop
 800315e:	bd80      	pop	{r7, pc}

08003160 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStopMode();
 8003164:	f7ff ff80 	bl	8003068 <LL_DBGMCU_DisableDBGStopMode>
}
 8003168:	bf00      	nop
 800316a:	bd80      	pop	{r7, pc}

0800316c <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStandbyMode();
 8003170:	f7ff ff88 	bl	8003084 <LL_DBGMCU_DisableDBGStandbyMode>
}
 8003174:	bf00      	nop
 8003176:	bd80      	pop	{r7, pc}

08003178 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	431a      	orrs	r2, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	601a      	str	r2, [r3, #0]
}
 8003192:	bf00      	nop
 8003194:	370c      	adds	r7, #12
 8003196:	46bd      	mov	sp, r7
 8003198:	bc80      	pop	{r7}
 800319a:	4770      	bx	lr

0800319c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	370c      	adds	r7, #12
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bc80      	pop	{r7}
 80031b4:	4770      	bx	lr

080031b6 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80031b6:	b480      	push	{r7}
 80031b8:	b085      	sub	sp, #20
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	60f8      	str	r0, [r7, #12]
 80031be:	60b9      	str	r1, [r7, #8]
 80031c0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	695a      	ldr	r2, [r3, #20]
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	f003 0304 	and.w	r3, r3, #4
 80031cc:	2107      	movs	r1, #7
 80031ce:	fa01 f303 	lsl.w	r3, r1, r3
 80031d2:	43db      	mvns	r3, r3
 80031d4:	401a      	ands	r2, r3
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	f003 0304 	and.w	r3, r3, #4
 80031dc:	6879      	ldr	r1, [r7, #4]
 80031de:	fa01 f303 	lsl.w	r3, r1, r3
 80031e2:	431a      	orrs	r2, r3
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80031e8:	bf00      	nop
 80031ea:	3714      	adds	r7, #20
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bc80      	pop	{r7}
 80031f0:	4770      	bx	lr

080031f2 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80031f2:	b480      	push	{r7}
 80031f4:	b083      	sub	sp, #12
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	6078      	str	r0, [r7, #4]
 80031fa:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	695a      	ldr	r2, [r3, #20]
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	f003 0304 	and.w	r3, r3, #4
 8003206:	2107      	movs	r1, #7
 8003208:	fa01 f303 	lsl.w	r3, r1, r3
 800320c:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003214:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003218:	4618      	mov	r0, r3
 800321a:	370c      	adds	r7, #12
 800321c:	46bd      	mov	sp, r7
 800321e:	bc80      	pop	{r7}
 8003220:	4770      	bx	lr

08003222 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003222:	b480      	push	{r7}
 8003224:	b083      	sub	sp, #12
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003232:	2b00      	cmp	r3, #0
 8003234:	d101      	bne.n	800323a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003236:	2301      	movs	r3, #1
 8003238:	e000      	b.n	800323c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800323a:	2300      	movs	r3, #0
}
 800323c:	4618      	mov	r0, r3
 800323e:	370c      	adds	r7, #12
 8003240:	46bd      	mov	sp, r7
 8003242:	bc80      	pop	{r7}
 8003244:	4770      	bx	lr

08003246 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003246:	b480      	push	{r7}
 8003248:	b085      	sub	sp, #20
 800324a:	af00      	add	r7, sp, #0
 800324c:	60f8      	str	r0, [r7, #12]
 800324e:	60b9      	str	r1, [r7, #8]
 8003250:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	f003 031f 	and.w	r3, r3, #31
 800325c:	210f      	movs	r1, #15
 800325e:	fa01 f303 	lsl.w	r3, r1, r3
 8003262:	43db      	mvns	r3, r3
 8003264:	401a      	ands	r2, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	0e9b      	lsrs	r3, r3, #26
 800326a:	f003 010f 	and.w	r1, r3, #15
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	f003 031f 	and.w	r3, r3, #31
 8003274:	fa01 f303 	lsl.w	r3, r1, r3
 8003278:	431a      	orrs	r2, r3
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800327e:	bf00      	nop
 8003280:	3714      	adds	r7, #20
 8003282:	46bd      	mov	sp, r7
 8003284:	bc80      	pop	{r7}
 8003286:	4770      	bx	lr

08003288 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800329c:	431a      	orrs	r2, r3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80032a2:	bf00      	nop
 80032a4:	370c      	adds	r7, #12
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bc80      	pop	{r7}
 80032aa:	4770      	bx	lr

080032ac <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80032c0:	43db      	mvns	r3, r3
 80032c2:	401a      	ands	r2, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80032c8:	bf00      	nop
 80032ca:	370c      	adds	r7, #12
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bc80      	pop	{r7}
 80032d0:	4770      	bx	lr

080032d2 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80032d2:	b480      	push	{r7}
 80032d4:	b085      	sub	sp, #20
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	60f8      	str	r0, [r7, #12]
 80032da:	60b9      	str	r1, [r7, #8]
 80032dc:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	695a      	ldr	r2, [r3, #20]
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	021b      	lsls	r3, r3, #8
 80032e6:	43db      	mvns	r3, r3
 80032e8:	401a      	ands	r2, r3
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	0219      	lsls	r1, r3, #8
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	400b      	ands	r3, r1
 80032f2:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 80032f6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80032fa:	431a      	orrs	r2, r3
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8003300:	bf00      	nop
 8003302:	3714      	adds	r7, #20
 8003304:	46bd      	mov	sp, r7
 8003306:	bc80      	pop	{r7}
 8003308:	4770      	bx	lr

0800330a <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800330a:	b480      	push	{r7}
 800330c:	b083      	sub	sp, #12
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800331a:	f023 0317 	bic.w	r3, r3, #23
 800331e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003326:	bf00      	nop
 8003328:	370c      	adds	r7, #12
 800332a:	46bd      	mov	sp, r7
 800332c:	bc80      	pop	{r7}
 800332e:	4770      	bx	lr

08003330 <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003340:	f023 0317 	bic.w	r3, r3, #23
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	6093      	str	r3, [r2, #8]
}
 8003348:	bf00      	nop
 800334a:	370c      	adds	r7, #12
 800334c:	46bd      	mov	sp, r7
 800334e:	bc80      	pop	{r7}
 8003350:	4770      	bx	lr

08003352 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003352:	b480      	push	{r7}
 8003354:	b083      	sub	sp, #12
 8003356:	af00      	add	r7, sp, #0
 8003358:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003362:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003366:	d101      	bne.n	800336c <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003368:	2301      	movs	r3, #1
 800336a:	e000      	b.n	800336e <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800336c:	2300      	movs	r3, #0
}
 800336e:	4618      	mov	r0, r3
 8003370:	370c      	adds	r7, #12
 8003372:	46bd      	mov	sp, r7
 8003374:	bc80      	pop	{r7}
 8003376:	4770      	bx	lr

08003378 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003388:	f023 0317 	bic.w	r3, r3, #23
 800338c:	f043 0201 	orr.w	r2, r3, #1
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003394:	bf00      	nop
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	bc80      	pop	{r7}
 800339c:	4770      	bx	lr

0800339e <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800339e:	b480      	push	{r7}
 80033a0:	b083      	sub	sp, #12
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80033ae:	f023 0317 	bic.w	r3, r3, #23
 80033b2:	f043 0202 	orr.w	r2, r3, #2
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80033ba:	bf00      	nop
 80033bc:	370c      	adds	r7, #12
 80033be:	46bd      	mov	sp, r7
 80033c0:	bc80      	pop	{r7}
 80033c2:	4770      	bx	lr

080033c4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	f003 0301 	and.w	r3, r3, #1
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d101      	bne.n	80033dc <LL_ADC_IsEnabled+0x18>
 80033d8:	2301      	movs	r3, #1
 80033da:	e000      	b.n	80033de <LL_ADC_IsEnabled+0x1a>
 80033dc:	2300      	movs	r3, #0
}
 80033de:	4618      	mov	r0, r3
 80033e0:	370c      	adds	r7, #12
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bc80      	pop	{r7}
 80033e6:	4770      	bx	lr

080033e8 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	f003 0302 	and.w	r3, r3, #2
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d101      	bne.n	8003400 <LL_ADC_IsDisableOngoing+0x18>
 80033fc:	2301      	movs	r3, #1
 80033fe:	e000      	b.n	8003402 <LL_ADC_IsDisableOngoing+0x1a>
 8003400:	2300      	movs	r3, #0
}
 8003402:	4618      	mov	r0, r3
 8003404:	370c      	adds	r7, #12
 8003406:	46bd      	mov	sp, r7
 8003408:	bc80      	pop	{r7}
 800340a:	4770      	bx	lr

0800340c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800341c:	f023 0317 	bic.w	r3, r3, #23
 8003420:	f043 0204 	orr.w	r2, r3, #4
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003428:	bf00      	nop
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	bc80      	pop	{r7}
 8003430:	4770      	bx	lr

08003432 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003432:	b480      	push	{r7}
 8003434:	b083      	sub	sp, #12
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003442:	f023 0317 	bic.w	r3, r3, #23
 8003446:	f043 0210 	orr.w	r2, r3, #16
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800344e:	bf00      	nop
 8003450:	370c      	adds	r7, #12
 8003452:	46bd      	mov	sp, r7
 8003454:	bc80      	pop	{r7}
 8003456:	4770      	bx	lr

08003458 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	f003 0304 	and.w	r3, r3, #4
 8003468:	2b04      	cmp	r3, #4
 800346a:	d101      	bne.n	8003470 <LL_ADC_REG_IsConversionOngoing+0x18>
 800346c:	2301      	movs	r3, #1
 800346e:	e000      	b.n	8003472 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003470:	2300      	movs	r3, #0
}
 8003472:	4618      	mov	r0, r3
 8003474:	370c      	adds	r7, #12
 8003476:	46bd      	mov	sp, r7
 8003478:	bc80      	pop	{r7}
 800347a:	4770      	bx	lr

0800347c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b088      	sub	sp, #32
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003484:	2300      	movs	r3, #0
 8003486:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8003488:	2300      	movs	r3, #0
 800348a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 800348c:	2300      	movs	r3, #0
 800348e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003490:	2300      	movs	r3, #0
 8003492:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d101      	bne.n	800349e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e19e      	b.n	80037dc <HAL_ADC_Init+0x360>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d109      	bne.n	80034c0 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f7fd fe95 	bl	80011dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4618      	mov	r0, r3
 80034c6:	f7ff ff44 	bl	8003352 <LL_ADC_IsInternalRegulatorEnabled>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d115      	bne.n	80034fc <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4618      	mov	r0, r3
 80034d6:	f7ff ff18 	bl	800330a <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80034da:	4b99      	ldr	r3, [pc, #612]	@ (8003740 <HAL_ADC_Init+0x2c4>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	099b      	lsrs	r3, r3, #6
 80034e0:	4a98      	ldr	r2, [pc, #608]	@ (8003744 <HAL_ADC_Init+0x2c8>)
 80034e2:	fba2 2303 	umull	r2, r3, r2, r3
 80034e6:	099b      	lsrs	r3, r3, #6
 80034e8:	3301      	adds	r3, #1
 80034ea:	005b      	lsls	r3, r3, #1
 80034ec:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80034ee:	e002      	b.n	80034f6 <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	3b01      	subs	r3, #1
 80034f4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d1f9      	bne.n	80034f0 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4618      	mov	r0, r3
 8003502:	f7ff ff26 	bl	8003352 <LL_ADC_IsInternalRegulatorEnabled>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d10d      	bne.n	8003528 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003510:	f043 0210 	orr.w	r2, r3, #16
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800351c:	f043 0201 	orr.w	r2, r3, #1
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4618      	mov	r0, r3
 800352e:	f7ff ff93 	bl	8003458 <LL_ADC_REG_IsConversionOngoing>
 8003532:	60f8      	str	r0, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003538:	f003 0310 	and.w	r3, r3, #16
 800353c:	2b00      	cmp	r3, #0
 800353e:	f040 8144 	bne.w	80037ca <HAL_ADC_Init+0x34e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2b00      	cmp	r3, #0
 8003546:	f040 8140 	bne.w	80037ca <HAL_ADC_Init+0x34e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800354e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003552:	f043 0202 	orr.w	r2, r3, #2
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4618      	mov	r0, r3
 8003560:	f7ff ff30 	bl	80033c4 <LL_ADC_IsEnabled>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	f040 80a7 	bne.w	80036ba <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	7e1b      	ldrb	r3, [r3, #24]
 8003574:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003576:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	7e5b      	ldrb	r3, [r3, #25]
 800357c:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800357e:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	7e9b      	ldrb	r3, [r3, #26]
 8003584:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003586:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800358c:	2a00      	cmp	r2, #0
 800358e:	d002      	beq.n	8003596 <HAL_ADC_Init+0x11a>
 8003590:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003594:	e000      	b.n	8003598 <HAL_ADC_Init+0x11c>
 8003596:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003598:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800359e:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	691b      	ldr	r3, [r3, #16]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	da04      	bge.n	80035b2 <HAL_ADC_Init+0x136>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	691b      	ldr	r3, [r3, #16]
 80035ac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80035b0:	e001      	b.n	80035b6 <HAL_ADC_Init+0x13a>
 80035b2:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                           |
 80035b6:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80035be:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80035c0:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80035c2:	69ba      	ldr	r2, [r7, #24]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d114      	bne.n	80035fc <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	7e9b      	ldrb	r3, [r3, #26]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d104      	bne.n	80035e4 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035e0:	61bb      	str	r3, [r7, #24]
 80035e2:	e00b      	b.n	80035fc <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035e8:	f043 0220 	orr.w	r2, r3, #32
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035f4:	f043 0201 	orr.w	r2, r3, #1
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003600:	2b00      	cmp	r3, #0
 8003602:	d009      	beq.n	8003618 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003608:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003610:	4313      	orrs	r3, r2
 8003612:	69ba      	ldr	r2, [r7, #24]
 8003614:	4313      	orrs	r3, r2
 8003616:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	f423 33fe 	bic.w	r3, r3, #130048	@ 0x1fc00
 8003622:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	6812      	ldr	r2, [r2, #0]
 800362a:	69b9      	ldr	r1, [r7, #24]
 800362c:	430b      	orrs	r3, r1
 800362e:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800363c:	4313      	orrs	r3, r2
 800363e:	697a      	ldr	r2, [r7, #20]
 8003640:	4313      	orrs	r3, r2
 8003642:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800364a:	2b01      	cmp	r3, #1
 800364c:	d111      	bne.n	8003672 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800365a:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 8003660:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8003666:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	4313      	orrs	r3, r2
 800366c:	f043 0301 	orr.w	r3, r3, #1
 8003670:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	691a      	ldr	r2, [r3, #16]
 8003678:	4b33      	ldr	r3, [pc, #204]	@ (8003748 <HAL_ADC_Init+0x2cc>)
 800367a:	4013      	ands	r3, r2
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	6812      	ldr	r2, [r2, #0]
 8003680:	6979      	ldr	r1, [r7, #20]
 8003682:	430b      	orrs	r3, r1
 8003684:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800368e:	d014      	beq.n	80036ba <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003694:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003698:	d00f      	beq.n	80036ba <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800369e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80036a2:	d00a      	beq.n	80036ba <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 80036a4:	4b29      	ldr	r3, [pc, #164]	@ (800374c <HAL_ADC_Init+0x2d0>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 80036b4:	4925      	ldr	r1, [pc, #148]	@ (800374c <HAL_ADC_Init+0x2d0>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6818      	ldr	r0, [r3, #0]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036c2:	461a      	mov	r2, r3
 80036c4:	2100      	movs	r1, #0
 80036c6:	f7ff fd76 	bl	80031b6 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6818      	ldr	r0, [r3, #0]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036d2:	461a      	mov	r2, r3
 80036d4:	491e      	ldr	r1, [pc, #120]	@ (8003750 <HAL_ADC_Init+0x2d4>)
 80036d6:	f7ff fd6e 	bl	80031b6 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d108      	bne.n	80036f4 <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f062 020f 	orn	r2, r2, #15
 80036f0:	629a      	str	r2, [r3, #40]	@ 0x28
 80036f2:	e042      	b.n	800377a <HAL_ADC_Init+0x2fe>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	691b      	ldr	r3, [r3, #16]
 80036f8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80036fc:	d13d      	bne.n	800377a <HAL_ADC_Init+0x2fe>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 80036fe:	2300      	movs	r3, #0
 8003700:	613b      	str	r3, [r7, #16]
 8003702:	e00c      	b.n	800371e <HAL_ADC_Init+0x2a2>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	fa22 f303 	lsr.w	r3, r2, r3
 8003710:	f003 030f 	and.w	r3, r3, #15
 8003714:	2b0f      	cmp	r3, #15
 8003716:	d006      	beq.n	8003726 <HAL_ADC_Init+0x2aa>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	3301      	adds	r3, #1
 800371c:	613b      	str	r3, [r7, #16]
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	2b07      	cmp	r3, #7
 8003722:	d9ef      	bls.n	8003704 <HAL_ADC_Init+0x288>
 8003724:	e000      	b.n	8003728 <HAL_ADC_Init+0x2ac>
            ADC_CHSELR_SQ1)
        {
          break;
 8003726:	bf00      	nop
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	2b01      	cmp	r3, #1
 800372c:	d112      	bne.n	8003754 <HAL_ADC_Init+0x2d8>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f062 020f 	orn	r2, r2, #15
 800373c:	629a      	str	r2, [r3, #40]	@ 0x28
 800373e:	e01c      	b.n	800377a <HAL_ADC_Init+0x2fe>
 8003740:	20000000 	.word	0x20000000
 8003744:	053e2d63 	.word	0x053e2d63
 8003748:	1ffffc02 	.word	0x1ffffc02
 800374c:	40012708 	.word	0x40012708
 8003750:	03ffff04 	.word	0x03ffff04
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	69db      	ldr	r3, [r3, #28]
 800375e:	3b01      	subs	r3, #1
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	f003 031c 	and.w	r3, r3, #28
 8003766:	f06f 020f 	mvn.w	r2, #15
 800376a:	fa02 f103 	lsl.w	r1, r2, r3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	430a      	orrs	r2, r1
 8003778:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2100      	movs	r1, #0
 8003780:	4618      	mov	r0, r3
 8003782:	f7ff fd36 	bl	80031f2 <LL_ADC_GetSamplingTimeCommonChannels>
 8003786:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800378c:	429a      	cmp	r2, r3
 800378e:	d10b      	bne.n	80037a8 <HAL_ADC_Init+0x32c>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800379a:	f023 0303 	bic.w	r3, r3, #3
 800379e:	f043 0201 	orr.w	r2, r3, #1
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	659a      	str	r2, [r3, #88]	@ 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80037a6:	e018      	b.n	80037da <HAL_ADC_Init+0x35e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037ac:	f023 0312 	bic.w	r3, r3, #18
 80037b0:	f043 0210 	orr.w	r2, r3, #16
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037bc:	f043 0201 	orr.w	r2, r3, #1
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80037c8:	e007      	b.n	80037da <HAL_ADC_Init+0x35e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037ce:	f043 0210 	orr.w	r2, r3, #16
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 80037da:	7ffb      	ldrb	r3, [r7, #31]
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3720      	adds	r7, #32
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d101      	bne.n	80037f6 <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e06a      	b.n	80038cc <HAL_ADC_DeInit+0xe8>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037fa:	f043 0202 	orr.w	r2, r3, #2
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f000 fabe 	bl	8003d84 <ADC_ConversionStop>
 8003808:	4603      	mov	r3, r0
 800380a:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800380c:	7bfb      	ldrb	r3, [r7, #15]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d10f      	bne.n	8003832 <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 fb82 	bl	8003f1c <ADC_Disable>
 8003818:	4603      	mov	r3, r0
 800381a:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800381c:	7bfb      	ldrb	r3, [r7, #15]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d102      	bne.n	8003828 <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2201      	movs	r2, #1
 8003826:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4618      	mov	r0, r3
 800382e:	f7ff fd7f 	bl	8003330 <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	6812      	ldr	r2, [r2, #0]
 800383c:	f423 7367 	bic.w	r3, r3, #924	@ 0x39c
 8003840:	f023 0303 	bic.w	r3, r3, #3
 8003844:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f240 329f 	movw	r2, #927	@ 0x39f
 800384e:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	68d9      	ldr	r1, [r3, #12]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	4b1e      	ldr	r3, [pc, #120]	@ (80038d4 <HAL_ADC_DeInit+0xf0>)
 800385c:	400b      	ands	r3, r1
 800385e:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register CFGR2 */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	691a      	ldr	r2, [r3, #16]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f022 4240 	bic.w	r2, r2, #3221225472	@ 0xc0000000
 800386e:	611a      	str	r2, [r3, #16]

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	695a      	ldr	r2, [r3, #20]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f022 0207 	bic.w	r2, r2, #7
 800387e:	615a      	str	r2, [r3, #20]

  /* Reset register TR1 */
  hadc->Instance->TR1 &= ~(ADC_TR1_HT1 | ADC_TR1_LT1);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	6a1a      	ldr	r2, [r3, #32]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f002 22f0 	and.w	r2, r2, #4026593280	@ 0xf000f000
 800388e:	621a      	str	r2, [r3, #32]

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	2200      	movs	r2, #0
 800389c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 800389e:	4b0e      	ldr	r3, [pc, #56]	@ (80038d8 <HAL_ADC_DeInit+0xf4>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a0d      	ldr	r2, [pc, #52]	@ (80038d8 <HAL_ADC_DeInit+0xf4>)
 80038a4:	f023 73fe 	bic.w	r3, r3, #33292288	@ 0x1fc0000
 80038a8:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f7fd fcaa 	bl	8001204 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	659a      	str	r2, [r3, #88]	@ 0x58

  __HAL_UNLOCK(hadc);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 80038ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3710      	adds	r7, #16
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	833e0200 	.word	0x833e0200
 80038d8:	40012708 	.word	0x40012708

080038dc <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4618      	mov	r0, r3
 80038ea:	f7ff fdb5 	bl	8003458 <LL_ADC_REG_IsConversionOngoing>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d132      	bne.n	800395a <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d101      	bne.n	8003902 <HAL_ADC_Start+0x26>
 80038fe:	2302      	movs	r3, #2
 8003900:	e02e      	b.n	8003960 <HAL_ADC_Start+0x84>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2201      	movs	r2, #1
 8003906:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 fa80 	bl	8003e10 <ADC_Enable>
 8003910:	4603      	mov	r3, r0
 8003912:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003914:	7bfb      	ldrb	r3, [r7, #15]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d11a      	bne.n	8003950 <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800391e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003922:	f023 0301 	bic.w	r3, r3, #1
 8003926:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	221c      	movs	r2, #28
 800393a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4618      	mov	r0, r3
 800394a:	f7ff fd5f 	bl	800340c <LL_ADC_REG_StartConversion>
 800394e:	e006      	b.n	800395e <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8003958:	e001      	b.n	800395e <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800395a:	2302      	movs	r3, #2
 800395c:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 800395e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003960:	4618      	mov	r0, r3
 8003962:	3710      	adds	r7, #16
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003976:	2b01      	cmp	r3, #1
 8003978:	d101      	bne.n	800397e <HAL_ADC_Stop+0x16>
 800397a:	2302      	movs	r3, #2
 800397c:	e022      	b.n	80039c4 <HAL_ADC_Stop+0x5c>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2201      	movs	r2, #1
 8003982:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f000 f9fc 	bl	8003d84 <ADC_ConversionStop>
 800398c:	4603      	mov	r3, r0
 800398e:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003990:	7bfb      	ldrb	r3, [r7, #15]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d111      	bne.n	80039ba <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f000 fac0 	bl	8003f1c <ADC_Disable>
 800399c:	4603      	mov	r3, r0
 800399e:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80039a0:	7bfb      	ldrb	r3, [r7, #15]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d109      	bne.n	80039ba <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039aa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80039ae:	f023 0301 	bic.w	r3, r3, #1
 80039b2:	f043 0201 	orr.w	r2, r3, #1
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 80039c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3710      	adds	r7, #16
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}

080039cc <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	695b      	ldr	r3, [r3, #20]
 80039da:	2b08      	cmp	r3, #8
 80039dc:	d102      	bne.n	80039e4 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 80039de:	2308      	movs	r3, #8
 80039e0:	60fb      	str	r3, [r7, #12]
 80039e2:	e010      	b.n	8003a06 <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	f003 0301 	and.w	r3, r3, #1
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d007      	beq.n	8003a02 <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039f6:	f043 0220 	orr.w	r2, r3, #32
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e077      	b.n	8003af2 <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8003a02:	2304      	movs	r3, #4
 8003a04:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003a06:	f7fe fb8b 	bl	8002120 <HAL_GetTick>
 8003a0a:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003a0c:	e021      	b.n	8003a52 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a14:	d01d      	beq.n	8003a52 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003a16:	f7fe fb83 	bl	8002120 <HAL_GetTick>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	683a      	ldr	r2, [r7, #0]
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d302      	bcc.n	8003a2c <HAL_ADC_PollForConversion+0x60>
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d112      	bne.n	8003a52 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	4013      	ands	r3, r2
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d10b      	bne.n	8003a52 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a3e:	f043 0204 	orr.w	r2, r3, #4
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	659a      	str	r2, [r3, #88]	@ 0x58

          __HAL_UNLOCK(hadc);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e04f      	b.n	8003af2 <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d0d6      	beq.n	8003a0e <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a64:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4618      	mov	r0, r3
 8003a72:	f7ff fbd6 	bl	8003222 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d031      	beq.n	8003ae0 <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	7e9b      	ldrb	r3, [r3, #26]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d12d      	bne.n	8003ae0 <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0308 	and.w	r3, r3, #8
 8003a8e:	2b08      	cmp	r3, #8
 8003a90:	d126      	bne.n	8003ae0 <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4618      	mov	r0, r3
 8003a98:	f7ff fcde 	bl	8003458 <LL_ADC_REG_IsConversionOngoing>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d112      	bne.n	8003ac8 <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	685a      	ldr	r2, [r3, #4]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f022 020c 	bic.w	r2, r2, #12
 8003ab0:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ab6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003aba:	f023 0301 	bic.w	r3, r3, #1
 8003abe:	f043 0201 	orr.w	r2, r3, #1
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	659a      	str	r2, [r3, #88]	@ 0x58
 8003ac6:	e00b      	b.n	8003ae0 <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003acc:	f043 0220 	orr.w	r2, r3, #32
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ad8:	f043 0201 	orr.w	r2, r3, #1
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	7e1b      	ldrb	r3, [r3, #24]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d103      	bne.n	8003af0 <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	220c      	movs	r2, #12
 8003aee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3710      	adds	r7, #16
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}

08003afa <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003afa:	b480      	push	{r7}
 8003afc:	b083      	sub	sp, #12
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	370c      	adds	r7, #12
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bc80      	pop	{r7}
 8003b10:	4770      	bx	lr
	...

08003b14 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b088      	sub	sp, #32
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003b22:	2300      	movs	r3, #0
 8003b24:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	691b      	ldr	r3, [r3, #16]
 8003b2a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d101      	bne.n	8003b3c <HAL_ADC_ConfigChannel+0x28>
 8003b38:	2302      	movs	r3, #2
 8003b3a:	e110      	b.n	8003d5e <HAL_ADC_ConfigChannel+0x24a>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f7ff fc85 	bl	8003458 <LL_ADC_REG_IsConversionOngoing>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	f040 80f7 	bne.w	8003d44 <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	f000 80b1 	beq.w	8003cc2 <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	691b      	ldr	r3, [r3, #16]
 8003b64:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003b68:	d004      	beq.n	8003b74 <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003b6e:	4a7e      	ldr	r2, [pc, #504]	@ (8003d68 <HAL_ADC_ConfigChannel+0x254>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d108      	bne.n	8003b86 <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	4610      	mov	r0, r2
 8003b80:	f7ff fb82 	bl	8003288 <LL_ADC_REG_SetSequencerChAdd>
 8003b84:	e041      	b.n	8003c0a <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	f003 031f 	and.w	r3, r3, #31
 8003b92:	210f      	movs	r1, #15
 8003b94:	fa01 f303 	lsl.w	r3, r1, r3
 8003b98:	43db      	mvns	r3, r3
 8003b9a:	401a      	ands	r2, r3
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d105      	bne.n	8003bb4 <HAL_ADC_ConfigChannel+0xa0>
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	0e9b      	lsrs	r3, r3, #26
 8003bae:	f003 031f 	and.w	r3, r3, #31
 8003bb2:	e011      	b.n	8003bd8 <HAL_ADC_ConfigChannel+0xc4>
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	fa93 f3a3 	rbit	r3, r3
 8003bc0:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d101      	bne.n	8003bd0 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 8003bcc:	2320      	movs	r3, #32
 8003bce:	e003      	b.n	8003bd8 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	fab3 f383 	clz	r3, r3
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	6839      	ldr	r1, [r7, #0]
 8003bda:	6849      	ldr	r1, [r1, #4]
 8003bdc:	f001 011f 	and.w	r1, r1, #31
 8003be0:	408b      	lsls	r3, r1
 8003be2:	431a      	orrs	r2, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	089b      	lsrs	r3, r3, #2
 8003bee:	1c5a      	adds	r2, r3, #1
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	69db      	ldr	r3, [r3, #28]
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d808      	bhi.n	8003c0a <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6818      	ldr	r0, [r3, #0]
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	6859      	ldr	r1, [r3, #4]
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	461a      	mov	r2, r3
 8003c06:	f7ff fb1e 	bl	8003246 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6818      	ldr	r0, [r3, #0]
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	6819      	ldr	r1, [r3, #0]
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	461a      	mov	r2, r3
 8003c18:	f7ff fb5b 	bl	80032d2 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	f280 8097 	bge.w	8003d54 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c26:	4851      	ldr	r0, [pc, #324]	@ (8003d6c <HAL_ADC_ConfigChannel+0x258>)
 8003c28:	f7ff fab8 	bl	800319c <LL_ADC_GetCommonPathInternalCh>
 8003c2c:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a4f      	ldr	r2, [pc, #316]	@ (8003d70 <HAL_ADC_ConfigChannel+0x25c>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d120      	bne.n	8003c7a <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003c38:	69bb      	ldr	r3, [r7, #24]
 8003c3a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d11b      	bne.n	8003c7a <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c42:	69bb      	ldr	r3, [r7, #24]
 8003c44:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003c48:	4619      	mov	r1, r3
 8003c4a:	4848      	ldr	r0, [pc, #288]	@ (8003d6c <HAL_ADC_ConfigChannel+0x258>)
 8003c4c:	f7ff fa94 	bl	8003178 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003c50:	4b48      	ldr	r3, [pc, #288]	@ (8003d74 <HAL_ADC_ConfigChannel+0x260>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	099b      	lsrs	r3, r3, #6
 8003c56:	4a48      	ldr	r2, [pc, #288]	@ (8003d78 <HAL_ADC_ConfigChannel+0x264>)
 8003c58:	fba2 2303 	umull	r2, r3, r2, r3
 8003c5c:	099b      	lsrs	r3, r3, #6
 8003c5e:	1c5a      	adds	r2, r3, #1
 8003c60:	4613      	mov	r3, r2
 8003c62:	005b      	lsls	r3, r3, #1
 8003c64:	4413      	add	r3, r2
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003c6a:	e002      	b.n	8003c72 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	3b01      	subs	r3, #1
 8003c70:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d1f9      	bne.n	8003c6c <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003c78:	e06c      	b.n	8003d54 <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a3f      	ldr	r2, [pc, #252]	@ (8003d7c <HAL_ADC_ConfigChannel+0x268>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d10c      	bne.n	8003c9e <HAL_ADC_ConfigChannel+0x18a>
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d107      	bne.n	8003c9e <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c94:	4619      	mov	r1, r3
 8003c96:	4835      	ldr	r0, [pc, #212]	@ (8003d6c <HAL_ADC_ConfigChannel+0x258>)
 8003c98:	f7ff fa6e 	bl	8003178 <LL_ADC_SetCommonPathInternalCh>
 8003c9c:	e05a      	b.n	8003d54 <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a37      	ldr	r2, [pc, #220]	@ (8003d80 <HAL_ADC_ConfigChannel+0x26c>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d155      	bne.n	8003d54 <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003ca8:	69bb      	ldr	r3, [r7, #24]
 8003caa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d150      	bne.n	8003d54 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003cb2:	69bb      	ldr	r3, [r7, #24]
 8003cb4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003cb8:	4619      	mov	r1, r3
 8003cba:	482c      	ldr	r0, [pc, #176]	@ (8003d6c <HAL_ADC_ConfigChannel+0x258>)
 8003cbc:	f7ff fa5c 	bl	8003178 <LL_ADC_SetCommonPathInternalCh>
 8003cc0:	e048      	b.n	8003d54 <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003cca:	d004      	beq.n	8003cd6 <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003cd0:	4a25      	ldr	r2, [pc, #148]	@ (8003d68 <HAL_ADC_ConfigChannel+0x254>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d107      	bne.n	8003ce6 <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4619      	mov	r1, r3
 8003ce0:	4610      	mov	r0, r2
 8003ce2:	f7ff fae3 	bl	80032ac <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	da32      	bge.n	8003d54 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003cee:	481f      	ldr	r0, [pc, #124]	@ (8003d6c <HAL_ADC_ConfigChannel+0x258>)
 8003cf0:	f7ff fa54 	bl	800319c <LL_ADC_GetCommonPathInternalCh>
 8003cf4:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a1d      	ldr	r2, [pc, #116]	@ (8003d70 <HAL_ADC_ConfigChannel+0x25c>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d107      	bne.n	8003d10 <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003d00:	69bb      	ldr	r3, [r7, #24]
 8003d02:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003d06:	4619      	mov	r1, r3
 8003d08:	4818      	ldr	r0, [pc, #96]	@ (8003d6c <HAL_ADC_ConfigChannel+0x258>)
 8003d0a:	f7ff fa35 	bl	8003178 <LL_ADC_SetCommonPathInternalCh>
 8003d0e:	e021      	b.n	8003d54 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a19      	ldr	r2, [pc, #100]	@ (8003d7c <HAL_ADC_ConfigChannel+0x268>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d107      	bne.n	8003d2a <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d20:	4619      	mov	r1, r3
 8003d22:	4812      	ldr	r0, [pc, #72]	@ (8003d6c <HAL_ADC_ConfigChannel+0x258>)
 8003d24:	f7ff fa28 	bl	8003178 <LL_ADC_SetCommonPathInternalCh>
 8003d28:	e014      	b.n	8003d54 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a14      	ldr	r2, [pc, #80]	@ (8003d80 <HAL_ADC_ConfigChannel+0x26c>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d10f      	bne.n	8003d54 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003d34:	69bb      	ldr	r3, [r7, #24]
 8003d36:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	480b      	ldr	r0, [pc, #44]	@ (8003d6c <HAL_ADC_ConfigChannel+0x258>)
 8003d3e:	f7ff fa1b 	bl	8003178 <LL_ADC_SetCommonPathInternalCh>
 8003d42:	e007      	b.n	8003d54 <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d48:	f043 0220 	orr.w	r2, r3, #32
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 8003d5c:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3720      	adds	r7, #32
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	80000004 	.word	0x80000004
 8003d6c:	40012708 	.word	0x40012708
 8003d70:	b0001000 	.word	0xb0001000
 8003d74:	20000000 	.word	0x20000000
 8003d78:	053e2d63 	.word	0x053e2d63
 8003d7c:	b8004000 	.word	0xb8004000
 8003d80:	b4002000 	.word	0xb4002000

08003d84 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4618      	mov	r0, r3
 8003d92:	f7ff fb61 	bl	8003458 <LL_ADC_REG_IsConversionOngoing>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d033      	beq.n	8003e04 <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4618      	mov	r0, r3
 8003da2:	f7ff fb21 	bl	80033e8 <LL_ADC_IsDisableOngoing>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d104      	bne.n	8003db6 <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4618      	mov	r0, r3
 8003db2:	f7ff fb3e 	bl	8003432 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003db6:	f7fe f9b3 	bl	8002120 <HAL_GetTick>
 8003dba:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003dbc:	e01b      	b.n	8003df6 <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003dbe:	f7fe f9af 	bl	8002120 <HAL_GetTick>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d914      	bls.n	8003df6 <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	f003 0304 	and.w	r3, r3, #4
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d00d      	beq.n	8003df6 <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dde:	f043 0210 	orr.w	r2, r3, #16
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dea:	f043 0201 	orr.w	r2, r3, #1
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e007      	b.n	8003e06 <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	f003 0304 	and.w	r3, r3, #4
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d1dc      	bne.n	8003dbe <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3710      	adds	r7, #16
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
	...

08003e10 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b084      	sub	sp, #16
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4618      	mov	r0, r3
 8003e22:	f7ff facf 	bl	80033c4 <LL_ADC_IsEnabled>
 8003e26:	4603      	mov	r3, r0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d169      	bne.n	8003f00 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	689a      	ldr	r2, [r3, #8]
 8003e32:	4b36      	ldr	r3, [pc, #216]	@ (8003f0c <ADC_Enable+0xfc>)
 8003e34:	4013      	ands	r3, r2
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d00d      	beq.n	8003e56 <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e3e:	f043 0210 	orr.w	r2, r3, #16
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e4a:	f043 0201 	orr.w	r2, r3, #1
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e055      	b.n	8003f02 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f7ff fa8c 	bl	8003378 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003e60:	482b      	ldr	r0, [pc, #172]	@ (8003f10 <ADC_Enable+0x100>)
 8003e62:	f7ff f99b 	bl	800319c <LL_ADC_GetCommonPathInternalCh>
 8003e66:	4603      	mov	r3, r0
 8003e68:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d00f      	beq.n	8003e90 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003e70:	4b28      	ldr	r3, [pc, #160]	@ (8003f14 <ADC_Enable+0x104>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	099b      	lsrs	r3, r3, #6
 8003e76:	4a28      	ldr	r2, [pc, #160]	@ (8003f18 <ADC_Enable+0x108>)
 8003e78:	fba2 2303 	umull	r2, r3, r2, r3
 8003e7c:	099b      	lsrs	r3, r3, #6
 8003e7e:	3301      	adds	r3, #1
 8003e80:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003e82:	e002      	b.n	8003e8a <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	3b01      	subs	r3, #1
 8003e88:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d1f9      	bne.n	8003e84 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	7e5b      	ldrb	r3, [r3, #25]
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d033      	beq.n	8003f00 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003e98:	f7fe f942 	bl	8002120 <HAL_GetTick>
 8003e9c:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003e9e:	e028      	b.n	8003ef2 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f7ff fa8d 	bl	80033c4 <LL_ADC_IsEnabled>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d104      	bne.n	8003eba <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f7ff fa5f 	bl	8003378 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003eba:	f7fe f931 	bl	8002120 <HAL_GetTick>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	2b02      	cmp	r3, #2
 8003ec6:	d914      	bls.n	8003ef2 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d00d      	beq.n	8003ef2 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eda:	f043 0210 	orr.w	r2, r3, #16
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ee6:	f043 0201 	orr.w	r2, r3, #1
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e007      	b.n	8003f02 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0301 	and.w	r3, r3, #1
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d1cf      	bne.n	8003ea0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3710      	adds	r7, #16
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	80000017 	.word	0x80000017
 8003f10:	40012708 	.word	0x40012708
 8003f14:	20000000 	.word	0x20000000
 8003f18:	053e2d63 	.word	0x053e2d63

08003f1c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f7ff fa5d 	bl	80033e8 <LL_ADC_IsDisableOngoing>
 8003f2e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4618      	mov	r0, r3
 8003f36:	f7ff fa45 	bl	80033c4 <LL_ADC_IsEnabled>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d047      	beq.n	8003fd0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d144      	bne.n	8003fd0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	f003 0305 	and.w	r3, r3, #5
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d10c      	bne.n	8003f6e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f7ff fa20 	bl	800339e <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	2203      	movs	r2, #3
 8003f64:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003f66:	f7fe f8db 	bl	8002120 <HAL_GetTick>
 8003f6a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003f6c:	e029      	b.n	8003fc2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f72:	f043 0210 	orr.w	r2, r3, #16
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f7e:	f043 0201 	orr.w	r2, r3, #1
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e023      	b.n	8003fd2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003f8a:	f7fe f8c9 	bl	8002120 <HAL_GetTick>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	d914      	bls.n	8003fc2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	f003 0301 	and.w	r3, r3, #1
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00d      	beq.n	8003fc2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003faa:	f043 0210 	orr.w	r2, r3, #16
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fb6:	f043 0201 	orr.w	r2, r3, #1
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e007      	b.n	8003fd2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	f003 0301 	and.w	r3, r3, #1
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d1dc      	bne.n	8003f8a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003fd0:	2300      	movs	r3, #0
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3710      	adds	r7, #16
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}

08003fda <LL_ADC_SetCalibrationFactor>:
{
 8003fda:	b480      	push	{r7}
 8003fdc:	b083      	sub	sp, #12
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
 8003fe2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003fea:	f023 027f 	bic.w	r2, r3, #127	@ 0x7f
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	431a      	orrs	r2, r3
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
}
 8003ff8:	bf00      	nop
 8003ffa:	370c      	adds	r7, #12
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bc80      	pop	{r7}
 8004000:	4770      	bx	lr

08004002 <LL_ADC_GetCalibrationFactor>:
{
 8004002:	b480      	push	{r7}
 8004004:	b083      	sub	sp, #12
 8004006:	af00      	add	r7, sp, #0
 8004008:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004010:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8004014:	4618      	mov	r0, r3
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	bc80      	pop	{r7}
 800401c:	4770      	bx	lr

0800401e <LL_ADC_Enable>:
{
 800401e:	b480      	push	{r7}
 8004020:	b083      	sub	sp, #12
 8004022:	af00      	add	r7, sp, #0
 8004024:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800402e:	f023 0317 	bic.w	r3, r3, #23
 8004032:	f043 0201 	orr.w	r2, r3, #1
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	609a      	str	r2, [r3, #8]
}
 800403a:	bf00      	nop
 800403c:	370c      	adds	r7, #12
 800403e:	46bd      	mov	sp, r7
 8004040:	bc80      	pop	{r7}
 8004042:	4770      	bx	lr

08004044 <LL_ADC_Disable>:
{
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004054:	f023 0317 	bic.w	r3, r3, #23
 8004058:	f043 0202 	orr.w	r2, r3, #2
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	609a      	str	r2, [r3, #8]
}
 8004060:	bf00      	nop
 8004062:	370c      	adds	r7, #12
 8004064:	46bd      	mov	sp, r7
 8004066:	bc80      	pop	{r7}
 8004068:	4770      	bx	lr

0800406a <LL_ADC_IsEnabled>:
{
 800406a:	b480      	push	{r7}
 800406c:	b083      	sub	sp, #12
 800406e:	af00      	add	r7, sp, #0
 8004070:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f003 0301 	and.w	r3, r3, #1
 800407a:	2b01      	cmp	r3, #1
 800407c:	d101      	bne.n	8004082 <LL_ADC_IsEnabled+0x18>
 800407e:	2301      	movs	r3, #1
 8004080:	e000      	b.n	8004084 <LL_ADC_IsEnabled+0x1a>
 8004082:	2300      	movs	r3, #0
}
 8004084:	4618      	mov	r0, r3
 8004086:	370c      	adds	r7, #12
 8004088:	46bd      	mov	sp, r7
 800408a:	bc80      	pop	{r7}
 800408c:	4770      	bx	lr

0800408e <LL_ADC_StartCalibration>:
{
 800408e:	b480      	push	{r7}
 8004090:	b083      	sub	sp, #12
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800409e:	f023 0317 	bic.w	r3, r3, #23
 80040a2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	609a      	str	r2, [r3, #8]
}
 80040aa:	bf00      	nop
 80040ac:	370c      	adds	r7, #12
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bc80      	pop	{r7}
 80040b2:	4770      	bx	lr

080040b4 <LL_ADC_IsCalibrationOnGoing>:
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80040c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80040c8:	d101      	bne.n	80040ce <LL_ADC_IsCalibrationOnGoing+0x1a>
 80040ca:	2301      	movs	r3, #1
 80040cc:	e000      	b.n	80040d0 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80040ce:	2300      	movs	r3, #0
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	370c      	adds	r7, #12
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bc80      	pop	{r7}
 80040d8:	4770      	bx	lr

080040da <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 80040da:	b580      	push	{r7, lr}
 80040dc:	b088      	sub	sp, #32
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80040e2:	2300      	movs	r3, #0
 80040e4:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 80040e6:	2300      	movs	r3, #0
 80040e8:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d101      	bne.n	80040f8 <HAL_ADCEx_Calibration_Start+0x1e>
 80040f4:	2302      	movs	r3, #2
 80040f6:	e0b9      	b.n	800426c <HAL_ADCEx_Calibration_Start+0x192>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f7ff ff0b 	bl	8003f1c <ADC_Disable>
 8004106:	4603      	mov	r3, r0
 8004108:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4618      	mov	r0, r3
 8004110:	f7ff ffab 	bl	800406a <LL_ADC_IsEnabled>
 8004114:	4603      	mov	r3, r0
 8004116:	2b00      	cmp	r3, #0
 8004118:	f040 809d 	bne.w	8004256 <HAL_ADCEx_Calibration_Start+0x17c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004120:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004124:	f043 0202 	orr.w	r2, r3, #2
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	68da      	ldr	r2, [r3, #12]
 8004132:	f248 0303 	movw	r3, #32771	@ 0x8003
 8004136:	4013      	ands	r3, r2
 8004138:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	6812      	ldr	r2, [r2, #0]
 8004144:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004148:	f023 0303 	bic.w	r3, r3, #3
 800414c:	60d3      	str	r3, [r2, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800414e:	2300      	movs	r3, #0
 8004150:	61fb      	str	r3, [r7, #28]
 8004152:	e02e      	b.n	80041b2 <HAL_ADCEx_Calibration_Start+0xd8>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4618      	mov	r0, r3
 800415a:	f7ff ff98 	bl	800408e <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800415e:	e014      	b.n	800418a <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	3301      	adds	r3, #1
 8004164:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	f5b3 3f2e 	cmp.w	r3, #178176	@ 0x2b800
 800416c:	d30d      	bcc.n	800418a <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004172:	f023 0312 	bic.w	r3, r3, #18
 8004176:	f043 0210 	orr.w	r2, r3, #16
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e070      	b.n	800426c <HAL_ADCEx_Calibration_Start+0x192>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4618      	mov	r0, r3
 8004190:	f7ff ff90 	bl	80040b4 <LL_ADC_IsCalibrationOnGoing>
 8004194:	4603      	mov	r3, r0
 8004196:	2b00      	cmp	r3, #0
 8004198:	d1e2      	bne.n	8004160 <HAL_ADCEx_Calibration_Start+0x86>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4618      	mov	r0, r3
 80041a0:	f7ff ff2f 	bl	8004002 <LL_ADC_GetCalibrationFactor>
 80041a4:	4602      	mov	r2, r0
 80041a6:	69bb      	ldr	r3, [r7, #24]
 80041a8:	4413      	add	r3, r2
 80041aa:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	3301      	adds	r3, #1
 80041b0:	61fb      	str	r3, [r7, #28]
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	2b07      	cmp	r3, #7
 80041b6:	d9cd      	bls.n	8004154 <HAL_ADCEx_Calibration_Start+0x7a>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 80041b8:	69ba      	ldr	r2, [r7, #24]
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80041c0:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4618      	mov	r0, r3
 80041c8:	f7ff ff29 	bl	800401e <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	69b9      	ldr	r1, [r7, #24]
 80041d2:	4618      	mov	r0, r3
 80041d4:	f7ff ff01 	bl	8003fda <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4618      	mov	r0, r3
 80041de:	f7ff ff31 	bl	8004044 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80041e2:	f7fd ff9d 	bl	8002120 <HAL_GetTick>
 80041e6:	60f8      	str	r0, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80041e8:	e01c      	b.n	8004224 <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80041ea:	f7fd ff99 	bl	8002120 <HAL_GetTick>
 80041ee:	4602      	mov	r2, r0
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	1ad3      	subs	r3, r2, r3
 80041f4:	2b02      	cmp	r3, #2
 80041f6:	d915      	bls.n	8004224 <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4618      	mov	r0, r3
 80041fe:	f7ff ff34 	bl	800406a <LL_ADC_IsEnabled>
 8004202:	4603      	mov	r3, r0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d00d      	beq.n	8004224 <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800420c:	f043 0210 	orr.w	r2, r3, #16
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004218:	f043 0201 	orr.w	r2, r3, #1
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e023      	b.n	800426c <HAL_ADCEx_Calibration_Start+0x192>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4618      	mov	r0, r3
 800422a:	f7ff ff1e 	bl	800406a <LL_ADC_IsEnabled>
 800422e:	4603      	mov	r3, r0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d1da      	bne.n	80041ea <HAL_ADCEx_Calibration_Start+0x110>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	68d9      	ldr	r1, [r3, #12]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	693a      	ldr	r2, [r7, #16]
 8004240:	430a      	orrs	r2, r1
 8004242:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004248:	f023 0303 	bic.w	r3, r3, #3
 800424c:	f043 0201 	orr.w	r2, r3, #1
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	659a      	str	r2, [r3, #88]	@ 0x58
 8004254:	e005      	b.n	8004262 <HAL_ADCEx_Calibration_Start+0x188>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800425a:	f043 0210 	orr.w	r2, r3, #16
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 800426a:	7dfb      	ldrb	r3, [r7, #23]
}
 800426c:	4618      	mov	r0, r3
 800426e:	3720      	adds	r7, #32
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}

08004274 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004274:	b480      	push	{r7}
 8004276:	b085      	sub	sp, #20
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f003 0307 	and.w	r3, r3, #7
 8004282:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004284:	4b0c      	ldr	r3, [pc, #48]	@ (80042b8 <__NVIC_SetPriorityGrouping+0x44>)
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800428a:	68ba      	ldr	r2, [r7, #8]
 800428c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004290:	4013      	ands	r3, r2
 8004292:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800429c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80042a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80042a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80042a6:	4a04      	ldr	r2, [pc, #16]	@ (80042b8 <__NVIC_SetPriorityGrouping+0x44>)
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	60d3      	str	r3, [r2, #12]
}
 80042ac:	bf00      	nop
 80042ae:	3714      	adds	r7, #20
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bc80      	pop	{r7}
 80042b4:	4770      	bx	lr
 80042b6:	bf00      	nop
 80042b8:	e000ed00 	.word	0xe000ed00

080042bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80042bc:	b480      	push	{r7}
 80042be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80042c0:	4b04      	ldr	r3, [pc, #16]	@ (80042d4 <__NVIC_GetPriorityGrouping+0x18>)
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	0a1b      	lsrs	r3, r3, #8
 80042c6:	f003 0307 	and.w	r3, r3, #7
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bc80      	pop	{r7}
 80042d0:	4770      	bx	lr
 80042d2:	bf00      	nop
 80042d4:	e000ed00 	.word	0xe000ed00

080042d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042d8:	b480      	push	{r7}
 80042da:	b083      	sub	sp, #12
 80042dc:	af00      	add	r7, sp, #0
 80042de:	4603      	mov	r3, r0
 80042e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	db0b      	blt.n	8004302 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042ea:	79fb      	ldrb	r3, [r7, #7]
 80042ec:	f003 021f 	and.w	r2, r3, #31
 80042f0:	4906      	ldr	r1, [pc, #24]	@ (800430c <__NVIC_EnableIRQ+0x34>)
 80042f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042f6:	095b      	lsrs	r3, r3, #5
 80042f8:	2001      	movs	r0, #1
 80042fa:	fa00 f202 	lsl.w	r2, r0, r2
 80042fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004302:	bf00      	nop
 8004304:	370c      	adds	r7, #12
 8004306:	46bd      	mov	sp, r7
 8004308:	bc80      	pop	{r7}
 800430a:	4770      	bx	lr
 800430c:	e000e100 	.word	0xe000e100

08004310 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004310:	b480      	push	{r7}
 8004312:	b083      	sub	sp, #12
 8004314:	af00      	add	r7, sp, #0
 8004316:	4603      	mov	r3, r0
 8004318:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800431a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800431e:	2b00      	cmp	r3, #0
 8004320:	db12      	blt.n	8004348 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004322:	79fb      	ldrb	r3, [r7, #7]
 8004324:	f003 021f 	and.w	r2, r3, #31
 8004328:	490a      	ldr	r1, [pc, #40]	@ (8004354 <__NVIC_DisableIRQ+0x44>)
 800432a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800432e:	095b      	lsrs	r3, r3, #5
 8004330:	2001      	movs	r0, #1
 8004332:	fa00 f202 	lsl.w	r2, r0, r2
 8004336:	3320      	adds	r3, #32
 8004338:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800433c:	f3bf 8f4f 	dsb	sy
}
 8004340:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004342:	f3bf 8f6f 	isb	sy
}
 8004346:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004348:	bf00      	nop
 800434a:	370c      	adds	r7, #12
 800434c:	46bd      	mov	sp, r7
 800434e:	bc80      	pop	{r7}
 8004350:	4770      	bx	lr
 8004352:	bf00      	nop
 8004354:	e000e100 	.word	0xe000e100

08004358 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	4603      	mov	r3, r0
 8004360:	6039      	str	r1, [r7, #0]
 8004362:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004364:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004368:	2b00      	cmp	r3, #0
 800436a:	db0a      	blt.n	8004382 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	b2da      	uxtb	r2, r3
 8004370:	490c      	ldr	r1, [pc, #48]	@ (80043a4 <__NVIC_SetPriority+0x4c>)
 8004372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004376:	0112      	lsls	r2, r2, #4
 8004378:	b2d2      	uxtb	r2, r2
 800437a:	440b      	add	r3, r1
 800437c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004380:	e00a      	b.n	8004398 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	b2da      	uxtb	r2, r3
 8004386:	4908      	ldr	r1, [pc, #32]	@ (80043a8 <__NVIC_SetPriority+0x50>)
 8004388:	79fb      	ldrb	r3, [r7, #7]
 800438a:	f003 030f 	and.w	r3, r3, #15
 800438e:	3b04      	subs	r3, #4
 8004390:	0112      	lsls	r2, r2, #4
 8004392:	b2d2      	uxtb	r2, r2
 8004394:	440b      	add	r3, r1
 8004396:	761a      	strb	r2, [r3, #24]
}
 8004398:	bf00      	nop
 800439a:	370c      	adds	r7, #12
 800439c:	46bd      	mov	sp, r7
 800439e:	bc80      	pop	{r7}
 80043a0:	4770      	bx	lr
 80043a2:	bf00      	nop
 80043a4:	e000e100 	.word	0xe000e100
 80043a8:	e000ed00 	.word	0xe000ed00

080043ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b089      	sub	sp, #36	@ 0x24
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	60b9      	str	r1, [r7, #8]
 80043b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f003 0307 	and.w	r3, r3, #7
 80043be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	f1c3 0307 	rsb	r3, r3, #7
 80043c6:	2b04      	cmp	r3, #4
 80043c8:	bf28      	it	cs
 80043ca:	2304      	movcs	r3, #4
 80043cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	3304      	adds	r3, #4
 80043d2:	2b06      	cmp	r3, #6
 80043d4:	d902      	bls.n	80043dc <NVIC_EncodePriority+0x30>
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	3b03      	subs	r3, #3
 80043da:	e000      	b.n	80043de <NVIC_EncodePriority+0x32>
 80043dc:	2300      	movs	r3, #0
 80043de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043e0:	f04f 32ff 	mov.w	r2, #4294967295
 80043e4:	69bb      	ldr	r3, [r7, #24]
 80043e6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ea:	43da      	mvns	r2, r3
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	401a      	ands	r2, r3
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80043f4:	f04f 31ff 	mov.w	r1, #4294967295
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	fa01 f303 	lsl.w	r3, r1, r3
 80043fe:	43d9      	mvns	r1, r3
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004404:	4313      	orrs	r3, r2
         );
}
 8004406:	4618      	mov	r0, r3
 8004408:	3724      	adds	r7, #36	@ 0x24
 800440a:	46bd      	mov	sp, r7
 800440c:	bc80      	pop	{r7}
 800440e:	4770      	bx	lr

08004410 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b082      	sub	sp, #8
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f7ff ff2b 	bl	8004274 <__NVIC_SetPriorityGrouping>
}
 800441e:	bf00      	nop
 8004420:	3708      	adds	r7, #8
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}

08004426 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004426:	b580      	push	{r7, lr}
 8004428:	b086      	sub	sp, #24
 800442a:	af00      	add	r7, sp, #0
 800442c:	4603      	mov	r3, r0
 800442e:	60b9      	str	r1, [r7, #8]
 8004430:	607a      	str	r2, [r7, #4]
 8004432:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004434:	f7ff ff42 	bl	80042bc <__NVIC_GetPriorityGrouping>
 8004438:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	68b9      	ldr	r1, [r7, #8]
 800443e:	6978      	ldr	r0, [r7, #20]
 8004440:	f7ff ffb4 	bl	80043ac <NVIC_EncodePriority>
 8004444:	4602      	mov	r2, r0
 8004446:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800444a:	4611      	mov	r1, r2
 800444c:	4618      	mov	r0, r3
 800444e:	f7ff ff83 	bl	8004358 <__NVIC_SetPriority>
}
 8004452:	bf00      	nop
 8004454:	3718      	adds	r7, #24
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}

0800445a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800445a:	b580      	push	{r7, lr}
 800445c:	b082      	sub	sp, #8
 800445e:	af00      	add	r7, sp, #0
 8004460:	4603      	mov	r3, r0
 8004462:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004464:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004468:	4618      	mov	r0, r3
 800446a:	f7ff ff35 	bl	80042d8 <__NVIC_EnableIRQ>
}
 800446e:	bf00      	nop
 8004470:	3708      	adds	r7, #8
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}

08004476 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004476:	b580      	push	{r7, lr}
 8004478:	b082      	sub	sp, #8
 800447a:	af00      	add	r7, sp, #0
 800447c:	4603      	mov	r3, r0
 800447e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004480:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004484:	4618      	mov	r0, r3
 8004486:	f7ff ff43 	bl	8004310 <__NVIC_DisableIRQ>
}
 800448a:	bf00      	nop
 800448c:	3708      	adds	r7, #8
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
	...

08004494 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b082      	sub	sp, #8
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d101      	bne.n	80044a6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e08e      	b.n	80045c4 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	461a      	mov	r2, r3
 80044ac:	4b47      	ldr	r3, [pc, #284]	@ (80045cc <HAL_DMA_Init+0x138>)
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d80f      	bhi.n	80044d2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	461a      	mov	r2, r3
 80044b8:	4b45      	ldr	r3, [pc, #276]	@ (80045d0 <HAL_DMA_Init+0x13c>)
 80044ba:	4413      	add	r3, r2
 80044bc:	4a45      	ldr	r2, [pc, #276]	@ (80045d4 <HAL_DMA_Init+0x140>)
 80044be:	fba2 2303 	umull	r2, r3, r2, r3
 80044c2:	091b      	lsrs	r3, r3, #4
 80044c4:	009a      	lsls	r2, r3, #2
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a42      	ldr	r2, [pc, #264]	@ (80045d8 <HAL_DMA_Init+0x144>)
 80044ce:	641a      	str	r2, [r3, #64]	@ 0x40
 80044d0:	e00e      	b.n	80044f0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	461a      	mov	r2, r3
 80044d8:	4b40      	ldr	r3, [pc, #256]	@ (80045dc <HAL_DMA_Init+0x148>)
 80044da:	4413      	add	r3, r2
 80044dc:	4a3d      	ldr	r2, [pc, #244]	@ (80045d4 <HAL_DMA_Init+0x140>)
 80044de:	fba2 2303 	umull	r2, r3, r2, r3
 80044e2:	091b      	lsrs	r3, r3, #4
 80044e4:	009a      	lsls	r2, r3, #2
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a3c      	ldr	r2, [pc, #240]	@ (80045e0 <HAL_DMA_Init+0x14c>)
 80044ee:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2202      	movs	r2, #2
 80044f4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	6812      	ldr	r2, [r2, #0]
 8004502:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004506:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800450a:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	6819      	ldr	r1, [r3, #0]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	689a      	ldr	r2, [r3, #8]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	431a      	orrs	r2, r3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	691b      	ldr	r3, [r3, #16]
 8004520:	431a      	orrs	r2, r3
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	695b      	ldr	r3, [r3, #20]
 8004526:	431a      	orrs	r2, r3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	699b      	ldr	r3, [r3, #24]
 800452c:	431a      	orrs	r2, r3
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	69db      	ldr	r3, [r3, #28]
 8004532:	431a      	orrs	r2, r3
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6a1b      	ldr	r3, [r3, #32]
 8004538:	431a      	orrs	r2, r3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	430a      	orrs	r2, r1
 8004540:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f000 fb24 	bl	8004b90 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004550:	d102      	bne.n	8004558 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	685a      	ldr	r2, [r3, #4]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004560:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004564:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800456e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d010      	beq.n	800459a <HAL_DMA_Init+0x106>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	2b04      	cmp	r3, #4
 800457e:	d80c      	bhi.n	800459a <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f000 fb4d 	bl	8004c20 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800458a:	2200      	movs	r2, #0
 800458c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004596:	605a      	str	r2, [r3, #4]
 8004598:	e008      	b.n	80045ac <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2200      	movs	r2, #0
 800459e:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2201      	movs	r2, #1
 80045b6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80045c2:	2300      	movs	r3, #0
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3708      	adds	r7, #8
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}
 80045cc:	40020407 	.word	0x40020407
 80045d0:	bffdfff8 	.word	0xbffdfff8
 80045d4:	cccccccd 	.word	0xcccccccd
 80045d8:	40020000 	.word	0x40020000
 80045dc:	bffdfbf8 	.word	0xbffdfbf8
 80045e0:	40020400 	.word	0x40020400

080045e4 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b082      	sub	sp, #8
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d101      	bne.n	80045f6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e07b      	b.n	80046ee <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f022 0201 	bic.w	r2, r2, #1
 8004604:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	461a      	mov	r2, r3
 800460c:	4b3a      	ldr	r3, [pc, #232]	@ (80046f8 <HAL_DMA_DeInit+0x114>)
 800460e:	429a      	cmp	r2, r3
 8004610:	d80f      	bhi.n	8004632 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	461a      	mov	r2, r3
 8004618:	4b38      	ldr	r3, [pc, #224]	@ (80046fc <HAL_DMA_DeInit+0x118>)
 800461a:	4413      	add	r3, r2
 800461c:	4a38      	ldr	r2, [pc, #224]	@ (8004700 <HAL_DMA_DeInit+0x11c>)
 800461e:	fba2 2303 	umull	r2, r3, r2, r3
 8004622:	091b      	lsrs	r3, r3, #4
 8004624:	009a      	lsls	r2, r3, #2
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4a35      	ldr	r2, [pc, #212]	@ (8004704 <HAL_DMA_DeInit+0x120>)
 800462e:	641a      	str	r2, [r3, #64]	@ 0x40
 8004630:	e00e      	b.n	8004650 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	461a      	mov	r2, r3
 8004638:	4b33      	ldr	r3, [pc, #204]	@ (8004708 <HAL_DMA_DeInit+0x124>)
 800463a:	4413      	add	r3, r2
 800463c:	4a30      	ldr	r2, [pc, #192]	@ (8004700 <HAL_DMA_DeInit+0x11c>)
 800463e:	fba2 2303 	umull	r2, r3, r2, r3
 8004642:	091b      	lsrs	r3, r3, #4
 8004644:	009a      	lsls	r2, r3, #2
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	4a2f      	ldr	r2, [pc, #188]	@ (800470c <HAL_DMA_DeInit+0x128>)
 800464e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2200      	movs	r2, #0
 8004656:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800465c:	f003 021c 	and.w	r2, r3, #28
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004664:	2101      	movs	r1, #1
 8004666:	fa01 f202 	lsl.w	r2, r1, r2
 800466a:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f000 fa8f 	bl	8004b90 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004676:	2200      	movs	r2, #0
 8004678:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004682:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d00f      	beq.n	80046ac <HAL_DMA_DeInit+0xc8>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	2b04      	cmp	r3, #4
 8004692:	d80b      	bhi.n	80046ac <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f000 fac3 	bl	8004c20 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800469e:	2200      	movs	r2, #0
 80046a0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80046aa:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2200      	movs	r2, #0
 80046c8:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2200      	movs	r2, #0
 80046ce:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80046ec:	2300      	movs	r3, #0
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3708      	adds	r7, #8
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop
 80046f8:	40020407 	.word	0x40020407
 80046fc:	bffdfff8 	.word	0xbffdfff8
 8004700:	cccccccd 	.word	0xcccccccd
 8004704:	40020000 	.word	0x40020000
 8004708:	bffdfbf8 	.word	0xbffdfbf8
 800470c:	40020400 	.word	0x40020400

08004710 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b086      	sub	sp, #24
 8004714:	af00      	add	r7, sp, #0
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	60b9      	str	r1, [r7, #8]
 800471a:	607a      	str	r2, [r7, #4]
 800471c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800471e:	2300      	movs	r3, #0
 8004720:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004728:	2b01      	cmp	r3, #1
 800472a:	d101      	bne.n	8004730 <HAL_DMA_Start_IT+0x20>
 800472c:	2302      	movs	r3, #2
 800472e:	e069      	b.n	8004804 <HAL_DMA_Start_IT+0xf4>
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800473e:	b2db      	uxtb	r3, r3
 8004740:	2b01      	cmp	r3, #1
 8004742:	d155      	bne.n	80047f0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2202      	movs	r2, #2
 8004748:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2200      	movs	r2, #0
 8004750:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f022 0201 	bic.w	r2, r2, #1
 8004760:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	68b9      	ldr	r1, [r7, #8]
 8004768:	68f8      	ldr	r0, [r7, #12]
 800476a:	f000 f9d3 	bl	8004b14 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004772:	2b00      	cmp	r3, #0
 8004774:	d008      	beq.n	8004788 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f042 020e 	orr.w	r2, r2, #14
 8004784:	601a      	str	r2, [r3, #0]
 8004786:	e00f      	b.n	80047a8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f022 0204 	bic.w	r2, r2, #4
 8004796:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f042 020a 	orr.w	r2, r2, #10
 80047a6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d007      	beq.n	80047c6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047c0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80047c4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d007      	beq.n	80047de <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80047dc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f042 0201 	orr.w	r2, r2, #1
 80047ec:	601a      	str	r2, [r3, #0]
 80047ee:	e008      	b.n	8004802 <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2280      	movs	r2, #128	@ 0x80
 80047f4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Return error status */
    status = HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004802:	7dfb      	ldrb	r3, [r7, #23]
}
 8004804:	4618      	mov	r0, r3
 8004806:	3718      	adds	r7, #24
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}

0800480c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800480c:	b480      	push	{r7}
 800480e:	b083      	sub	sp, #12
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d101      	bne.n	800481e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e04f      	b.n	80048be <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004824:	b2db      	uxtb	r3, r3
 8004826:	2b02      	cmp	r3, #2
 8004828:	d008      	beq.n	800483c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2204      	movs	r2, #4
 800482e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e040      	b.n	80048be <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f022 020e 	bic.w	r2, r2, #14
 800484a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004856:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800485a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f022 0201 	bic.w	r2, r2, #1
 800486a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004870:	f003 021c 	and.w	r2, r3, #28
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004878:	2101      	movs	r1, #1
 800487a:	fa01 f202 	lsl.w	r2, r1, r2
 800487e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004884:	687a      	ldr	r2, [r7, #4]
 8004886:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004888:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800488e:	2b00      	cmp	r3, #0
 8004890:	d00c      	beq.n	80048ac <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800489c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80048a0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80048aa:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 80048bc:	2300      	movs	r3, #0
}
 80048be:	4618      	mov	r0, r3
 80048c0:	370c      	adds	r7, #12
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bc80      	pop	{r7}
 80048c6:	4770      	bx	lr

080048c8 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b084      	sub	sp, #16
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048d0:	2300      	movs	r3, #0
 80048d2:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	2b02      	cmp	r3, #2
 80048de:	d005      	beq.n	80048ec <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2204      	movs	r2, #4
 80048e4:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	73fb      	strb	r3, [r7, #15]
 80048ea:	e047      	b.n	800497c <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f022 020e 	bic.w	r2, r2, #14
 80048fa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f022 0201 	bic.w	r2, r2, #1
 800490a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004916:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800491a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004920:	f003 021c 	and.w	r2, r3, #28
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004928:	2101      	movs	r1, #1
 800492a:	fa01 f202 	lsl.w	r2, r1, r2
 800492e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004938:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800493e:	2b00      	cmp	r3, #0
 8004940:	d00c      	beq.n	800495c <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800494c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004950:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800495a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004970:	2b00      	cmp	r3, #0
 8004972:	d003      	beq.n	800497c <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	4798      	blx	r3
    }
  }
  return status;
 800497c:	7bfb      	ldrb	r3, [r7, #15]
}
 800497e:	4618      	mov	r0, r3
 8004980:	3710      	adds	r7, #16
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
	...

08004988 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b084      	sub	sp, #16
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049a4:	f003 031c 	and.w	r3, r3, #28
 80049a8:	2204      	movs	r2, #4
 80049aa:	409a      	lsls	r2, r3
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	4013      	ands	r3, r2
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d027      	beq.n	8004a04 <HAL_DMA_IRQHandler+0x7c>
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	f003 0304 	and.w	r3, r3, #4
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d022      	beq.n	8004a04 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0320 	and.w	r3, r3, #32
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d107      	bne.n	80049dc <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f022 0204 	bic.w	r2, r2, #4
 80049da:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049e0:	f003 021c 	and.w	r2, r3, #28
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049e8:	2104      	movs	r1, #4
 80049ea:	fa01 f202 	lsl.w	r2, r1, r2
 80049ee:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	f000 8081 	beq.w	8004afc <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8004a02:	e07b      	b.n	8004afc <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a08:	f003 031c 	and.w	r3, r3, #28
 8004a0c:	2202      	movs	r2, #2
 8004a0e:	409a      	lsls	r2, r3
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	4013      	ands	r3, r2
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d03d      	beq.n	8004a94 <HAL_DMA_IRQHandler+0x10c>
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	f003 0302 	and.w	r3, r3, #2
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d038      	beq.n	8004a94 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 0320 	and.w	r3, r3, #32
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d10b      	bne.n	8004a48 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f022 020a 	bic.w	r2, r2, #10
 8004a3e:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	4b2e      	ldr	r3, [pc, #184]	@ (8004b08 <HAL_DMA_IRQHandler+0x180>)
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d909      	bls.n	8004a68 <HAL_DMA_IRQHandler+0xe0>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a58:	f003 031c 	and.w	r3, r3, #28
 8004a5c:	4a2b      	ldr	r2, [pc, #172]	@ (8004b0c <HAL_DMA_IRQHandler+0x184>)
 8004a5e:	2102      	movs	r1, #2
 8004a60:	fa01 f303 	lsl.w	r3, r1, r3
 8004a64:	6053      	str	r3, [r2, #4]
 8004a66:	e008      	b.n	8004a7a <HAL_DMA_IRQHandler+0xf2>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a6c:	f003 031c 	and.w	r3, r3, #28
 8004a70:	4a27      	ldr	r2, [pc, #156]	@ (8004b10 <HAL_DMA_IRQHandler+0x188>)
 8004a72:	2102      	movs	r1, #2
 8004a74:	fa01 f303 	lsl.w	r3, r1, r3
 8004a78:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      if (hdma->XferCpltCallback != NULL)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d038      	beq.n	8004afc <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8004a92:	e033      	b.n	8004afc <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a98:	f003 031c 	and.w	r3, r3, #28
 8004a9c:	2208      	movs	r2, #8
 8004a9e:	409a      	lsls	r2, r3
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d02a      	beq.n	8004afe <HAL_DMA_IRQHandler+0x176>
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	f003 0308 	and.w	r3, r3, #8
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d025      	beq.n	8004afe <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f022 020e 	bic.w	r2, r2, #14
 8004ac0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ac6:	f003 021c 	and.w	r2, r3, #28
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ace:	2101      	movs	r1, #1
 8004ad0:	fa01 f202 	lsl.w	r2, r1, r2
 8004ad4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2201      	movs	r2, #1
 8004ada:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d004      	beq.n	8004afe <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004afc:	bf00      	nop
 8004afe:	bf00      	nop
}
 8004b00:	3710      	adds	r7, #16
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop
 8004b08:	40020080 	.word	0x40020080
 8004b0c:	40020400 	.word	0x40020400
 8004b10:	40020000 	.word	0x40020000

08004b14 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b085      	sub	sp, #20
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	60b9      	str	r1, [r7, #8]
 8004b1e:	607a      	str	r2, [r7, #4]
 8004b20:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b26:	68fa      	ldr	r2, [r7, #12]
 8004b28:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004b2a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d004      	beq.n	8004b3e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b38:	68fa      	ldr	r2, [r7, #12]
 8004b3a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004b3c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b42:	f003 021c 	and.w	r2, r3, #28
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b4a:	2101      	movs	r1, #1
 8004b4c:	fa01 f202 	lsl.w	r2, r1, r2
 8004b50:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	683a      	ldr	r2, [r7, #0]
 8004b58:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	2b10      	cmp	r3, #16
 8004b60:	d108      	bne.n	8004b74 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	68ba      	ldr	r2, [r7, #8]
 8004b70:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004b72:	e007      	b.n	8004b84 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	68ba      	ldr	r2, [r7, #8]
 8004b7a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	60da      	str	r2, [r3, #12]
}
 8004b84:	bf00      	nop
 8004b86:	3714      	adds	r7, #20
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bc80      	pop	{r7}
 8004b8c:	4770      	bx	lr
	...

08004b90 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b085      	sub	sp, #20
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	4b1c      	ldr	r3, [pc, #112]	@ (8004c10 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d813      	bhi.n	8004bcc <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ba8:	089b      	lsrs	r3, r3, #2
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004bb0:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	3b08      	subs	r3, #8
 8004bc0:	4a14      	ldr	r2, [pc, #80]	@ (8004c14 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8004bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8004bc6:	091b      	lsrs	r3, r3, #4
 8004bc8:	60fb      	str	r3, [r7, #12]
 8004bca:	e011      	b.n	8004bf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bd0:	089b      	lsrs	r3, r3, #2
 8004bd2:	009a      	lsls	r2, r3, #2
 8004bd4:	4b10      	ldr	r3, [pc, #64]	@ (8004c18 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8004bd6:	4413      	add	r3, r2
 8004bd8:	687a      	ldr	r2, [r7, #4]
 8004bda:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	3b08      	subs	r3, #8
 8004be4:	4a0b      	ldr	r2, [pc, #44]	@ (8004c14 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8004be6:	fba2 2303 	umull	r2, r3, r2, r3
 8004bea:	091b      	lsrs	r3, r3, #4
 8004bec:	3307      	adds	r3, #7
 8004bee:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	4a0a      	ldr	r2, [pc, #40]	@ (8004c1c <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8004bf4:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	f003 031f 	and.w	r3, r3, #31
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	409a      	lsls	r2, r3
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004c04:	bf00      	nop
 8004c06:	3714      	adds	r7, #20
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bc80      	pop	{r7}
 8004c0c:	4770      	bx	lr
 8004c0e:	bf00      	nop
 8004c10:	40020407 	.word	0x40020407
 8004c14:	cccccccd 	.word	0xcccccccd
 8004c18:	4002081c 	.word	0x4002081c
 8004c1c:	40020880 	.word	0x40020880

08004c20 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b085      	sub	sp, #20
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c30:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004c32:	68fa      	ldr	r2, [r7, #12]
 8004c34:	4b0a      	ldr	r3, [pc, #40]	@ (8004c60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004c36:	4413      	add	r3, r2
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	4a08      	ldr	r2, [pc, #32]	@ (8004c64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004c44:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	3b01      	subs	r3, #1
 8004c4a:	f003 0303 	and.w	r3, r3, #3
 8004c4e:	2201      	movs	r2, #1
 8004c50:	409a      	lsls	r2, r3
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004c56:	bf00      	nop
 8004c58:	3714      	adds	r7, #20
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bc80      	pop	{r7}
 8004c5e:	4770      	bx	lr
 8004c60:	1000823f 	.word	0x1000823f
 8004c64:	40020940 	.word	0x40020940

08004c68 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b086      	sub	sp, #24
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	60b9      	str	r1, [r7, #8]
 8004c72:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004c76:	4b1c      	ldr	r3, [pc, #112]	@ (8004ce8 <HAL_FLASH_Program+0x80>)
 8004c78:	781b      	ldrb	r3, [r3, #0]
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d101      	bne.n	8004c82 <HAL_FLASH_Program+0x1a>
 8004c7e:	2302      	movs	r3, #2
 8004c80:	e02d      	b.n	8004cde <HAL_FLASH_Program+0x76>
 8004c82:	4b19      	ldr	r3, [pc, #100]	@ (8004ce8 <HAL_FLASH_Program+0x80>)
 8004c84:	2201      	movs	r2, #1
 8004c86:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004c88:	4b17      	ldr	r3, [pc, #92]	@ (8004ce8 <HAL_FLASH_Program+0x80>)
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004c8e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004c92:	f000 f869 	bl	8004d68 <FLASH_WaitForLastOperation>
 8004c96:	4603      	mov	r3, r0
 8004c98:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8004c9a:	7dfb      	ldrb	r3, [r7, #23]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d11a      	bne.n	8004cd6 <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d105      	bne.n	8004cb2 <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8004ca6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004caa:	68b8      	ldr	r0, [r7, #8]
 8004cac:	f000 f8be 	bl	8004e2c <FLASH_Program_DoubleWord>
 8004cb0:	e004      	b.n	8004cbc <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 double-word (64-bit) row at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	4619      	mov	r1, r3
 8004cb6:	68b8      	ldr	r0, [r7, #8]
 8004cb8:	f000 f8de 	bl	8004e78 <FLASH_Program_Fast>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004cbc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004cc0:	f000 f852 	bl	8004d68 <FLASH_WaitForLastOperation>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
#ifdef CORE_CM0PLUS
    CLEAR_BIT(FLASH->C2CR, TypeProgram);
#else
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8004cc8:	4b08      	ldr	r3, [pc, #32]	@ (8004cec <HAL_FLASH_Program+0x84>)
 8004cca:	695a      	ldr	r2, [r3, #20]
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	43db      	mvns	r3, r3
 8004cd0:	4906      	ldr	r1, [pc, #24]	@ (8004cec <HAL_FLASH_Program+0x84>)
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	614b      	str	r3, [r1, #20]
#endif
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004cd6:	4b04      	ldr	r3, [pc, #16]	@ (8004ce8 <HAL_FLASH_Program+0x80>)
 8004cd8:	2200      	movs	r2, #0
 8004cda:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8004cdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3718      	adds	r7, #24
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	2000056c 	.word	0x2000056c
 8004cec:	58004000 	.word	0x58004000

08004cf0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8004cfa:	4b0b      	ldr	r3, [pc, #44]	@ (8004d28 <HAL_FLASH_Unlock+0x38>)
 8004cfc:	695b      	ldr	r3, [r3, #20]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	da0b      	bge.n	8004d1a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004d02:	4b09      	ldr	r3, [pc, #36]	@ (8004d28 <HAL_FLASH_Unlock+0x38>)
 8004d04:	4a09      	ldr	r2, [pc, #36]	@ (8004d2c <HAL_FLASH_Unlock+0x3c>)
 8004d06:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004d08:	4b07      	ldr	r3, [pc, #28]	@ (8004d28 <HAL_FLASH_Unlock+0x38>)
 8004d0a:	4a09      	ldr	r2, [pc, #36]	@ (8004d30 <HAL_FLASH_Unlock+0x40>)
 8004d0c:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8004d0e:	4b06      	ldr	r3, [pc, #24]	@ (8004d28 <HAL_FLASH_Unlock+0x38>)
 8004d10:	695b      	ldr	r3, [r3, #20]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	da01      	bge.n	8004d1a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8004d1a:	79fb      	ldrb	r3, [r7, #7]
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	370c      	adds	r7, #12
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bc80      	pop	{r7}
 8004d24:	4770      	bx	lr
 8004d26:	bf00      	nop
 8004d28:	58004000 	.word	0x58004000
 8004d2c:	45670123 	.word	0x45670123
 8004d30:	cdef89ab 	.word	0xcdef89ab

08004d34 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b083      	sub	sp, #12
 8004d38:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004d3e:	4b09      	ldr	r3, [pc, #36]	@ (8004d64 <HAL_FLASH_Lock+0x30>)
 8004d40:	695b      	ldr	r3, [r3, #20]
 8004d42:	4a08      	ldr	r2, [pc, #32]	@ (8004d64 <HAL_FLASH_Lock+0x30>)
 8004d44:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004d48:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8004d4a:	4b06      	ldr	r3, [pc, #24]	@ (8004d64 <HAL_FLASH_Lock+0x30>)
 8004d4c:	695b      	ldr	r3, [r3, #20]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	db01      	blt.n	8004d56 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8004d56:	79fb      	ldrb	r3, [r7, #7]
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	370c      	adds	r7, #12
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bc80      	pop	{r7}
 8004d60:	4770      	bx	lr
 8004d62:	bf00      	nop
 8004d64:	58004000 	.word	0x58004000

08004d68 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b084      	sub	sp, #16
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8004d70:	f7fd f9d6 	bl	8002120 <HAL_GetTick>
 8004d74:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004d76:	e009      	b.n	8004d8c <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8004d78:	f7fd f9d2 	bl	8002120 <HAL_GetTick>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d801      	bhi.n	8004d8c <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8004d88:	2303      	movs	r3, #3
 8004d8a:	e046      	b.n	8004e1a <FLASH_WaitForLastOperation+0xb2>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004d8c:	4b25      	ldr	r3, [pc, #148]	@ (8004e24 <FLASH_WaitForLastOperation+0xbc>)
 8004d8e:	691b      	ldr	r3, [r3, #16]
 8004d90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d98:	d0ee      	beq.n	8004d78 <FLASH_WaitForLastOperation+0x10>
  /* check flash errors. Only ECC correction can be checked here as ECCD
      generates NMI */
#ifdef CORE_CM0PLUS
  error = FLASH->C2SR;
#else
  error = FLASH->SR;
 8004d9a:	4b22      	ldr	r3, [pc, #136]	@ (8004e24 <FLASH_WaitForLastOperation+0xbc>)
 8004d9c:	691b      	ldr	r3, [r3, #16]
 8004d9e:	60bb      	str	r3, [r7, #8]
#endif

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	f003 0301 	and.w	r3, r3, #1
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d002      	beq.n	8004db0 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004daa:	4b1e      	ldr	r3, [pc, #120]	@ (8004e24 <FLASH_WaitForLastOperation+0xbc>)
 8004dac:	2201      	movs	r2, #1
 8004dae:	611a      	str	r2, [r3, #16]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 8004db0:	68ba      	ldr	r2, [r7, #8]
 8004db2:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 8004db6:	4013      	ands	r3, r2
 8004db8:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dc0:	d307      	bcc.n	8004dd2 <FLASH_WaitForLastOperation+0x6a>
 8004dc2:	4b18      	ldr	r3, [pc, #96]	@ (8004e24 <FLASH_WaitForLastOperation+0xbc>)
 8004dc4:	699a      	ldr	r2, [r3, #24]
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004dcc:	4915      	ldr	r1, [pc, #84]	@ (8004e24 <FLASH_WaitForLastOperation+0xbc>)
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	618b      	str	r3, [r1, #24]
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d004      	beq.n	8004de6 <FLASH_WaitForLastOperation+0x7e>
 8004ddc:	4a11      	ldr	r2, [pc, #68]	@ (8004e24 <FLASH_WaitForLastOperation+0xbc>)
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8004de4:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d00e      	beq.n	8004e0a <FLASH_WaitForLastOperation+0xa2>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8004dec:	4a0e      	ldr	r2, [pc, #56]	@ (8004e28 <FLASH_WaitForLastOperation+0xc0>)
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e011      	b.n	8004e1a <FLASH_WaitForLastOperation+0xb2>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8004df6:	f7fd f993 	bl	8002120 <HAL_GetTick>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d801      	bhi.n	8004e0a <FLASH_WaitForLastOperation+0xa2>
    {
      return HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e007      	b.n	8004e1a <FLASH_WaitForLastOperation+0xb2>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8004e0a:	4b06      	ldr	r3, [pc, #24]	@ (8004e24 <FLASH_WaitForLastOperation+0xbc>)
 8004e0c:	691b      	ldr	r3, [r3, #16]
 8004e0e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004e12:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004e16:	d0ee      	beq.n	8004df6 <FLASH_WaitForLastOperation+0x8e>
    }
  }

  return HAL_OK;
 8004e18:	2300      	movs	r3, #0
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3710      	adds	r7, #16
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop
 8004e24:	58004000 	.word	0x58004000
 8004e28:	2000056c 	.word	0x2000056c

08004e2c <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b085      	sub	sp, #20
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	60f8      	str	r0, [r7, #12]
 8004e34:	e9c7 2300 	strd	r2, r3, [r7]
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8004e38:	4b0e      	ldr	r3, [pc, #56]	@ (8004e74 <FLASH_Program_DoubleWord+0x48>)
 8004e3a:	695b      	ldr	r3, [r3, #20]
 8004e3c:	4a0d      	ldr	r2, [pc, #52]	@ (8004e74 <FLASH_Program_DoubleWord+0x48>)
 8004e3e:	f043 0301 	orr.w	r3, r3, #1
 8004e42:	6153      	str	r3, [r2, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	683a      	ldr	r2, [r7, #0]
 8004e48:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8004e4a:	f3bf 8f6f 	isb	sy
}
 8004e4e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8004e50:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004e54:	f04f 0200 	mov.w	r2, #0
 8004e58:	f04f 0300 	mov.w	r3, #0
 8004e5c:	000a      	movs	r2, r1
 8004e5e:	2300      	movs	r3, #0
 8004e60:	68f9      	ldr	r1, [r7, #12]
 8004e62:	3104      	adds	r1, #4
 8004e64:	4613      	mov	r3, r2
 8004e66:	600b      	str	r3, [r1, #0]
}
 8004e68:	bf00      	nop
 8004e6a:	3714      	adds	r7, #20
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bc80      	pop	{r7}
 8004e70:	4770      	bx	lr
 8004e72:	bf00      	nop
 8004e74:	58004000 	.word	0x58004000

08004e78 <FLASH_Program_Fast>:
#ifdef CORE_CM0PLUS
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#else
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#endif
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b089      	sub	sp, #36	@ 0x24
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8004e82:	2340      	movs	r3, #64	@ 0x40
 8004e84:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	617b      	str	r3, [r7, #20]

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8004e8e:	4b18      	ldr	r3, [pc, #96]	@ (8004ef0 <FLASH_Program_Fast+0x78>)
 8004e90:	695b      	ldr	r3, [r3, #20]
 8004e92:	4a17      	ldr	r2, [pc, #92]	@ (8004ef0 <FLASH_Program_Fast+0x78>)
 8004e94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004e98:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e9a:	f3ef 8310 	mrs	r3, PRIMASK
 8004e9e:	60fb      	str	r3, [r7, #12]
  return(result);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
#endif

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
 8004ea2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8004ea4:	b672      	cpsid	i
}
 8004ea6:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	69bb      	ldr	r3, [r7, #24]
 8004eae:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8004eb0:	69bb      	ldr	r3, [r7, #24]
 8004eb2:	3304      	adds	r3, #4
 8004eb4:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	3304      	adds	r3, #4
 8004eba:	617b      	str	r3, [r7, #20]
    row_index--;
 8004ebc:	7ffb      	ldrb	r3, [r7, #31]
 8004ebe:	3b01      	subs	r3, #1
 8004ec0:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8004ec2:	7ffb      	ldrb	r3, [r7, #31]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d1ef      	bne.n	8004ea8 <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 8004ec8:	bf00      	nop
 8004eca:	4b09      	ldr	r3, [pc, #36]	@ (8004ef0 <FLASH_Program_Fast+0x78>)
 8004ecc:	691b      	ldr	r3, [r3, #16]
 8004ece:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ed2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ed6:	d0f8      	beq.n	8004eca <FLASH_Program_Fast+0x52>
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	f383 8810 	msr	PRIMASK, r3
}
 8004ee2:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8004ee4:	bf00      	nop
 8004ee6:	3724      	adds	r7, #36	@ 0x24
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bc80      	pop	{r7}
 8004eec:	4770      	bx	lr
 8004eee:	bf00      	nop
 8004ef0:	58004000 	.word	0x58004000

08004ef4 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b084      	sub	sp, #16
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004efe:	4b28      	ldr	r3, [pc, #160]	@ (8004fa0 <HAL_FLASHEx_Erase+0xac>)
 8004f00:	781b      	ldrb	r3, [r3, #0]
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d101      	bne.n	8004f0a <HAL_FLASHEx_Erase+0x16>
 8004f06:	2302      	movs	r3, #2
 8004f08:	e046      	b.n	8004f98 <HAL_FLASHEx_Erase+0xa4>
 8004f0a:	4b25      	ldr	r3, [pc, #148]	@ (8004fa0 <HAL_FLASHEx_Erase+0xac>)
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004f10:	4b23      	ldr	r3, [pc, #140]	@ (8004fa0 <HAL_FLASHEx_Erase+0xac>)
 8004f12:	2200      	movs	r2, #0
 8004f14:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004f16:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004f1a:	f7ff ff25 	bl	8004d68 <FLASH_WaitForLastOperation>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004f22:	7bfb      	ldrb	r3, [r7, #15]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d133      	bne.n	8004f90 <HAL_FLASHEx_Erase+0x9c>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	2b04      	cmp	r3, #4
 8004f2e:	d108      	bne.n	8004f42 <HAL_FLASHEx_Erase+0x4e>
    {
      /* Mass erase to be done */
      FLASH_MassErase();
 8004f30:	f000 f880 	bl	8005034 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004f34:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004f38:	f7ff ff16 	bl	8004d68 <FLASH_WaitForLastOperation>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	73fb      	strb	r3, [r7, #15]
 8004f40:	e024      	b.n	8004f8c <HAL_FLASHEx_Erase+0x98>
      /* If operation is completed or interrupted, no need to clear the Mass Erase Bit */
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	f04f 32ff 	mov.w	r2, #4294967295
 8004f48:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	60bb      	str	r3, [r7, #8]
 8004f50:	e012      	b.n	8004f78 <HAL_FLASHEx_Erase+0x84>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 8004f52:	68b8      	ldr	r0, [r7, #8]
 8004f54:	f000 f87e 	bl	8005054 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004f58:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004f5c:	f7ff ff04 	bl	8004d68 <FLASH_WaitForLastOperation>
 8004f60:	4603      	mov	r3, r0
 8004f62:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 8004f64:	7bfb      	ldrb	r3, [r7, #15]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d003      	beq.n	8004f72 <HAL_FLASHEx_Erase+0x7e>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	68ba      	ldr	r2, [r7, #8]
 8004f6e:	601a      	str	r2, [r3, #0]
          break;
 8004f70:	e00a      	b.n	8004f88 <HAL_FLASHEx_Erase+0x94>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	3301      	adds	r3, #1
 8004f76:	60bb      	str	r3, [r7, #8]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	685a      	ldr	r2, [r3, #4]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	4413      	add	r3, r2
 8004f82:	68ba      	ldr	r2, [r7, #8]
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d3e4      	bcc.n	8004f52 <HAL_FLASHEx_Erase+0x5e>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 8004f88:	f000 f8c0 	bl	800510c <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8004f8c:	f000 f87a 	bl	8005084 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004f90:	4b03      	ldr	r3, [pc, #12]	@ (8004fa0 <HAL_FLASHEx_Erase+0xac>)
 8004f92:	2200      	movs	r2, #0
 8004f94:	701a      	strb	r2, [r3, #0]

  return status;
 8004f96:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3710      	adds	r7, #16
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	2000056c 	.word	0x2000056c

08004fa4 <HAL_FLASHEx_Erase_IT>:
  * @param  pEraseInit Pointer to an @ref FLASH_EraseInitTypeDef structure that
  *         contains the configuration information for the erasing.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004fac:	4b1f      	ldr	r3, [pc, #124]	@ (800502c <HAL_FLASHEx_Erase_IT+0x88>)
 8004fae:	781b      	ldrb	r3, [r3, #0]
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d101      	bne.n	8004fb8 <HAL_FLASHEx_Erase_IT+0x14>
 8004fb4:	2302      	movs	r3, #2
 8004fb6:	e034      	b.n	8005022 <HAL_FLASHEx_Erase_IT+0x7e>
 8004fb8:	4b1c      	ldr	r3, [pc, #112]	@ (800502c <HAL_FLASHEx_Erase_IT+0x88>)
 8004fba:	2201      	movs	r2, #1
 8004fbc:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004fbe:	4b1b      	ldr	r3, [pc, #108]	@ (800502c <HAL_FLASHEx_Erase_IT+0x88>)
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	605a      	str	r2, [r3, #4]

  /* save procedure for interrupt treatment */
  pFlash.ProcedureOnGoing = pEraseInit->TypeErase;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a18      	ldr	r2, [pc, #96]	@ (800502c <HAL_FLASHEx_Erase_IT+0x88>)
 8004fca:	6093      	str	r3, [r2, #8]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004fcc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004fd0:	f7ff feca 	bl	8004d68 <FLASH_WaitForLastOperation>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	73fb      	strb	r3, [r7, #15]

  if (status != HAL_OK)
 8004fd8:	7bfb      	ldrb	r3, [r7, #15]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d003      	beq.n	8004fe6 <HAL_FLASHEx_Erase_IT+0x42>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8004fde:	4b13      	ldr	r3, [pc, #76]	@ (800502c <HAL_FLASHEx_Erase_IT+0x88>)
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	701a      	strb	r2, [r3, #0]
 8004fe4:	e01c      	b.n	8005020 <HAL_FLASHEx_Erase_IT+0x7c>
  }
  else
  {
    /* Enable End of Operation and Error interrupts */
    __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 8004fe6:	4b12      	ldr	r3, [pc, #72]	@ (8005030 <HAL_FLASHEx_Erase_IT+0x8c>)
 8004fe8:	695b      	ldr	r3, [r3, #20]
 8004fea:	4a11      	ldr	r2, [pc, #68]	@ (8005030 <HAL_FLASHEx_Erase_IT+0x8c>)
 8004fec:	f043 7340 	orr.w	r3, r3, #50331648	@ 0x3000000
 8004ff0:	6153      	str	r3, [r2, #20]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	2b04      	cmp	r3, #4
 8004ff8:	d105      	bne.n	8005006 <HAL_FLASHEx_Erase_IT+0x62>
    {
      /* Set Page to 0 for Interrupt callback management */
      pFlash.Page = 0;
 8004ffa:	4b0c      	ldr	r3, [pc, #48]	@ (800502c <HAL_FLASHEx_Erase_IT+0x88>)
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	611a      	str	r2, [r3, #16]

      /* Proceed to Mass Erase */
      FLASH_MassErase();
 8005000:	f000 f818 	bl	8005034 <FLASH_MassErase>
 8005004:	e00c      	b.n	8005020 <HAL_FLASHEx_Erase_IT+0x7c>
    }
    else
    {
      /* Erase by page to be done */
      pFlash.NbPagesToErase = pEraseInit->NbPages;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	4a08      	ldr	r2, [pc, #32]	@ (800502c <HAL_FLASHEx_Erase_IT+0x88>)
 800500c:	6153      	str	r3, [r2, #20]
      pFlash.Page = pEraseInit->Page;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	4a06      	ldr	r2, [pc, #24]	@ (800502c <HAL_FLASHEx_Erase_IT+0x88>)
 8005014:	6113      	str	r3, [r2, #16]

      /*Erase 1st page and wait for IT */
      FLASH_PageErase(pEraseInit->Page);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	4618      	mov	r0, r3
 800501c:	f000 f81a 	bl	8005054 <FLASH_PageErase>
    }
  }

  /* return status */
  return status;
 8005020:	7bfb      	ldrb	r3, [r7, #15]
}
 8005022:	4618      	mov	r0, r3
 8005024:	3710      	adds	r7, #16
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
 800502a:	bf00      	nop
 800502c:	2000056c 	.word	0x2000056c
 8005030:	58004000 	.word	0x58004000

08005034 <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8005034:	b480      	push	{r7}
 8005036:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 8005038:	4b05      	ldr	r3, [pc, #20]	@ (8005050 <FLASH_MassErase+0x1c>)
 800503a:	695b      	ldr	r3, [r3, #20]
 800503c:	4a04      	ldr	r2, [pc, #16]	@ (8005050 <FLASH_MassErase+0x1c>)
 800503e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005042:	f043 0304 	orr.w	r3, r3, #4
 8005046:	6153      	str	r3, [r2, #20]
#endif
}
 8005048:	bf00      	nop
 800504a:	46bd      	mov	sp, r7
 800504c:	bc80      	pop	{r7}
 800504e:	4770      	bx	lr
 8005050:	58004000 	.word	0x58004000

08005054 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8005054:	b480      	push	{r7}
 8005056:	b083      	sub	sp, #12
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]

  /* Proceed to erase the page */
#ifdef CORE_CM0PLUS
  MODIFY_REG(FLASH->C2CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
#else
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 800505c:	4b08      	ldr	r3, [pc, #32]	@ (8005080 <FLASH_PageErase+0x2c>)
 800505e:	695b      	ldr	r3, [r3, #20]
 8005060:	f423 727e 	bic.w	r2, r3, #1016	@ 0x3f8
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	00db      	lsls	r3, r3, #3
 8005068:	4313      	orrs	r3, r2
 800506a:	4a05      	ldr	r2, [pc, #20]	@ (8005080 <FLASH_PageErase+0x2c>)
 800506c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005070:	f043 0302 	orr.w	r3, r3, #2
 8005074:	6153      	str	r3, [r2, #20]
#endif
}
 8005076:	bf00      	nop
 8005078:	370c      	adds	r7, #12
 800507a:	46bd      	mov	sp, r7
 800507c:	bc80      	pop	{r7}
 800507e:	4770      	bx	lr
 8005080:	58004000 	.word	0x58004000

08005084 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8005084:	b480      	push	{r7}
 8005086:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 8005088:	4b1f      	ldr	r3, [pc, #124]	@ (8005108 <FLASH_FlushCaches+0x84>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005090:	2b01      	cmp	r3, #1
 8005092:	d117      	bne.n	80050c4 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005094:	4b1c      	ldr	r3, [pc, #112]	@ (8005108 <FLASH_FlushCaches+0x84>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a1b      	ldr	r2, [pc, #108]	@ (8005108 <FLASH_FlushCaches+0x84>)
 800509a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800509e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80050a0:	4b19      	ldr	r3, [pc, #100]	@ (8005108 <FLASH_FlushCaches+0x84>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a18      	ldr	r2, [pc, #96]	@ (8005108 <FLASH_FlushCaches+0x84>)
 80050a6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80050aa:	6013      	str	r3, [r2, #0]
 80050ac:	4b16      	ldr	r3, [pc, #88]	@ (8005108 <FLASH_FlushCaches+0x84>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a15      	ldr	r2, [pc, #84]	@ (8005108 <FLASH_FlushCaches+0x84>)
 80050b2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80050b6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80050b8:	4b13      	ldr	r3, [pc, #76]	@ (8005108 <FLASH_FlushCaches+0x84>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a12      	ldr	r2, [pc, #72]	@ (8005108 <FLASH_FlushCaches+0x84>)
 80050be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80050c2:	6013      	str	r3, [r2, #0]
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 80050c4:	4b10      	ldr	r3, [pc, #64]	@ (8005108 <FLASH_FlushCaches+0x84>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d117      	bne.n	8005100 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80050d0:	4b0d      	ldr	r3, [pc, #52]	@ (8005108 <FLASH_FlushCaches+0x84>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a0c      	ldr	r2, [pc, #48]	@ (8005108 <FLASH_FlushCaches+0x84>)
 80050d6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80050da:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80050dc:	4b0a      	ldr	r3, [pc, #40]	@ (8005108 <FLASH_FlushCaches+0x84>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a09      	ldr	r2, [pc, #36]	@ (8005108 <FLASH_FlushCaches+0x84>)
 80050e2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80050e6:	6013      	str	r3, [r2, #0]
 80050e8:	4b07      	ldr	r3, [pc, #28]	@ (8005108 <FLASH_FlushCaches+0x84>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a06      	ldr	r2, [pc, #24]	@ (8005108 <FLASH_FlushCaches+0x84>)
 80050ee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80050f2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80050f4:	4b04      	ldr	r3, [pc, #16]	@ (8005108 <FLASH_FlushCaches+0x84>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a03      	ldr	r2, [pc, #12]	@ (8005108 <FLASH_FlushCaches+0x84>)
 80050fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80050fe:	6013      	str	r3, [r2, #0]
  }
#endif
}
 8005100:	bf00      	nop
 8005102:	46bd      	mov	sp, r7
 8005104:	bc80      	pop	{r7}
 8005106:	4770      	bx	lr
 8005108:	58004000 	.word	0x58004000

0800510c <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 800510c:	b480      	push	{r7}
 800510e:	af00      	add	r7, sp, #0
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8005110:	4b05      	ldr	r3, [pc, #20]	@ (8005128 <FLASH_AcknowledgePageErase+0x1c>)
 8005112:	695b      	ldr	r3, [r3, #20]
 8005114:	4a04      	ldr	r2, [pc, #16]	@ (8005128 <FLASH_AcknowledgePageErase+0x1c>)
 8005116:	f423 737e 	bic.w	r3, r3, #1016	@ 0x3f8
 800511a:	f023 0302 	bic.w	r3, r3, #2
 800511e:	6153      	str	r3, [r2, #20]
#endif
}
 8005120:	bf00      	nop
 8005122:	46bd      	mov	sp, r7
 8005124:	bc80      	pop	{r7}
 8005126:	4770      	bx	lr
 8005128:	58004000 	.word	0x58004000

0800512c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800512c:	b480      	push	{r7}
 800512e:	b087      	sub	sp, #28
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005136:	2300      	movs	r3, #0
 8005138:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800513a:	e140      	b.n	80053be <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	2101      	movs	r1, #1
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	fa01 f303 	lsl.w	r3, r1, r3
 8005148:	4013      	ands	r3, r2
 800514a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2b00      	cmp	r3, #0
 8005150:	f000 8132 	beq.w	80053b8 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	f003 0303 	and.w	r3, r3, #3
 800515c:	2b01      	cmp	r3, #1
 800515e:	d005      	beq.n	800516c <HAL_GPIO_Init+0x40>
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	f003 0303 	and.w	r3, r3, #3
 8005168:	2b02      	cmp	r3, #2
 800516a:	d130      	bne.n	80051ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	005b      	lsls	r3, r3, #1
 8005176:	2203      	movs	r2, #3
 8005178:	fa02 f303 	lsl.w	r3, r2, r3
 800517c:	43db      	mvns	r3, r3
 800517e:	693a      	ldr	r2, [r7, #16]
 8005180:	4013      	ands	r3, r2
 8005182:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	68da      	ldr	r2, [r3, #12]
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	005b      	lsls	r3, r3, #1
 800518c:	fa02 f303 	lsl.w	r3, r2, r3
 8005190:	693a      	ldr	r2, [r7, #16]
 8005192:	4313      	orrs	r3, r2
 8005194:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	693a      	ldr	r2, [r7, #16]
 800519a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80051a2:	2201      	movs	r2, #1
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	fa02 f303 	lsl.w	r3, r2, r3
 80051aa:	43db      	mvns	r3, r3
 80051ac:	693a      	ldr	r2, [r7, #16]
 80051ae:	4013      	ands	r3, r2
 80051b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	091b      	lsrs	r3, r3, #4
 80051b8:	f003 0201 	and.w	r2, r3, #1
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	fa02 f303 	lsl.w	r3, r2, r3
 80051c2:	693a      	ldr	r2, [r7, #16]
 80051c4:	4313      	orrs	r3, r2
 80051c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	693a      	ldr	r2, [r7, #16]
 80051cc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	f003 0303 	and.w	r3, r3, #3
 80051d6:	2b03      	cmp	r3, #3
 80051d8:	d017      	beq.n	800520a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	68db      	ldr	r3, [r3, #12]
 80051de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	005b      	lsls	r3, r3, #1
 80051e4:	2203      	movs	r2, #3
 80051e6:	fa02 f303 	lsl.w	r3, r2, r3
 80051ea:	43db      	mvns	r3, r3
 80051ec:	693a      	ldr	r2, [r7, #16]
 80051ee:	4013      	ands	r3, r2
 80051f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	689a      	ldr	r2, [r3, #8]
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	005b      	lsls	r3, r3, #1
 80051fa:	fa02 f303 	lsl.w	r3, r2, r3
 80051fe:	693a      	ldr	r2, [r7, #16]
 8005200:	4313      	orrs	r3, r2
 8005202:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	693a      	ldr	r2, [r7, #16]
 8005208:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	f003 0303 	and.w	r3, r3, #3
 8005212:	2b02      	cmp	r3, #2
 8005214:	d123      	bne.n	800525e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	08da      	lsrs	r2, r3, #3
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	3208      	adds	r2, #8
 800521e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005222:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	f003 0307 	and.w	r3, r3, #7
 800522a:	009b      	lsls	r3, r3, #2
 800522c:	220f      	movs	r2, #15
 800522e:	fa02 f303 	lsl.w	r3, r2, r3
 8005232:	43db      	mvns	r3, r3
 8005234:	693a      	ldr	r2, [r7, #16]
 8005236:	4013      	ands	r3, r2
 8005238:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	691a      	ldr	r2, [r3, #16]
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	f003 0307 	and.w	r3, r3, #7
 8005244:	009b      	lsls	r3, r3, #2
 8005246:	fa02 f303 	lsl.w	r3, r2, r3
 800524a:	693a      	ldr	r2, [r7, #16]
 800524c:	4313      	orrs	r3, r2
 800524e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	08da      	lsrs	r2, r3, #3
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	3208      	adds	r2, #8
 8005258:	6939      	ldr	r1, [r7, #16]
 800525a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	005b      	lsls	r3, r3, #1
 8005268:	2203      	movs	r2, #3
 800526a:	fa02 f303 	lsl.w	r3, r2, r3
 800526e:	43db      	mvns	r3, r3
 8005270:	693a      	ldr	r2, [r7, #16]
 8005272:	4013      	ands	r3, r2
 8005274:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	f003 0203 	and.w	r2, r3, #3
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	005b      	lsls	r3, r3, #1
 8005282:	fa02 f303 	lsl.w	r3, r2, r3
 8005286:	693a      	ldr	r2, [r7, #16]
 8005288:	4313      	orrs	r3, r2
 800528a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	693a      	ldr	r2, [r7, #16]
 8005290:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800529a:	2b00      	cmp	r3, #0
 800529c:	f000 808c 	beq.w	80053b8 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80052a0:	4a4e      	ldr	r2, [pc, #312]	@ (80053dc <HAL_GPIO_Init+0x2b0>)
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	089b      	lsrs	r3, r3, #2
 80052a6:	3302      	adds	r3, #2
 80052a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	f003 0303 	and.w	r3, r3, #3
 80052b4:	009b      	lsls	r3, r3, #2
 80052b6:	2207      	movs	r2, #7
 80052b8:	fa02 f303 	lsl.w	r3, r2, r3
 80052bc:	43db      	mvns	r3, r3
 80052be:	693a      	ldr	r2, [r7, #16]
 80052c0:	4013      	ands	r3, r2
 80052c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80052ca:	d00d      	beq.n	80052e8 <HAL_GPIO_Init+0x1bc>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	4a44      	ldr	r2, [pc, #272]	@ (80053e0 <HAL_GPIO_Init+0x2b4>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d007      	beq.n	80052e4 <HAL_GPIO_Init+0x1b8>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	4a43      	ldr	r2, [pc, #268]	@ (80053e4 <HAL_GPIO_Init+0x2b8>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d101      	bne.n	80052e0 <HAL_GPIO_Init+0x1b4>
 80052dc:	2302      	movs	r3, #2
 80052de:	e004      	b.n	80052ea <HAL_GPIO_Init+0x1be>
 80052e0:	2307      	movs	r3, #7
 80052e2:	e002      	b.n	80052ea <HAL_GPIO_Init+0x1be>
 80052e4:	2301      	movs	r3, #1
 80052e6:	e000      	b.n	80052ea <HAL_GPIO_Init+0x1be>
 80052e8:	2300      	movs	r3, #0
 80052ea:	697a      	ldr	r2, [r7, #20]
 80052ec:	f002 0203 	and.w	r2, r2, #3
 80052f0:	0092      	lsls	r2, r2, #2
 80052f2:	4093      	lsls	r3, r2
 80052f4:	693a      	ldr	r2, [r7, #16]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80052fa:	4938      	ldr	r1, [pc, #224]	@ (80053dc <HAL_GPIO_Init+0x2b0>)
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	089b      	lsrs	r3, r3, #2
 8005300:	3302      	adds	r3, #2
 8005302:	693a      	ldr	r2, [r7, #16]
 8005304:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005308:	4b37      	ldr	r3, [pc, #220]	@ (80053e8 <HAL_GPIO_Init+0x2bc>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	43db      	mvns	r3, r3
 8005312:	693a      	ldr	r2, [r7, #16]
 8005314:	4013      	ands	r3, r2
 8005316:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005320:	2b00      	cmp	r3, #0
 8005322:	d003      	beq.n	800532c <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8005324:	693a      	ldr	r2, [r7, #16]
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	4313      	orrs	r3, r2
 800532a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800532c:	4a2e      	ldr	r2, [pc, #184]	@ (80053e8 <HAL_GPIO_Init+0x2bc>)
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005332:	4b2d      	ldr	r3, [pc, #180]	@ (80053e8 <HAL_GPIO_Init+0x2bc>)
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	43db      	mvns	r3, r3
 800533c:	693a      	ldr	r2, [r7, #16]
 800533e:	4013      	ands	r3, r2
 8005340:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800534a:	2b00      	cmp	r3, #0
 800534c:	d003      	beq.n	8005356 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 800534e:	693a      	ldr	r2, [r7, #16]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	4313      	orrs	r3, r2
 8005354:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005356:	4a24      	ldr	r2, [pc, #144]	@ (80053e8 <HAL_GPIO_Init+0x2bc>)
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 800535c:	4b22      	ldr	r3, [pc, #136]	@ (80053e8 <HAL_GPIO_Init+0x2bc>)
 800535e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005362:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	43db      	mvns	r3, r3
 8005368:	693a      	ldr	r2, [r7, #16]
 800536a:	4013      	ands	r3, r2
 800536c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005376:	2b00      	cmp	r3, #0
 8005378:	d003      	beq.n	8005382 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 800537a:	693a      	ldr	r2, [r7, #16]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	4313      	orrs	r3, r2
 8005380:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8005382:	4a19      	ldr	r2, [pc, #100]	@ (80053e8 <HAL_GPIO_Init+0x2bc>)
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800538a:	4b17      	ldr	r3, [pc, #92]	@ (80053e8 <HAL_GPIO_Init+0x2bc>)
 800538c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005390:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	43db      	mvns	r3, r3
 8005396:	693a      	ldr	r2, [r7, #16]
 8005398:	4013      	ands	r3, r2
 800539a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d003      	beq.n	80053b0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80053a8:	693a      	ldr	r2, [r7, #16]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	4313      	orrs	r3, r2
 80053ae:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80053b0:	4a0d      	ldr	r2, [pc, #52]	@ (80053e8 <HAL_GPIO_Init+0x2bc>)
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	3301      	adds	r3, #1
 80053bc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	fa22 f303 	lsr.w	r3, r2, r3
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	f47f aeb7 	bne.w	800513c <HAL_GPIO_Init+0x10>
  }
}
 80053ce:	bf00      	nop
 80053d0:	bf00      	nop
 80053d2:	371c      	adds	r7, #28
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bc80      	pop	{r7}
 80053d8:	4770      	bx	lr
 80053da:	bf00      	nop
 80053dc:	40010000 	.word	0x40010000
 80053e0:	48000400 	.word	0x48000400
 80053e4:	48000800 	.word	0x48000800
 80053e8:	58000800 	.word	0x58000800

080053ec <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b087      	sub	sp, #28
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80053f6:	2300      	movs	r3, #0
 80053f8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80053fa:	e0af      	b.n	800555c <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80053fc:	2201      	movs	r2, #1
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	fa02 f303 	lsl.w	r3, r2, r3
 8005404:	683a      	ldr	r2, [r7, #0]
 8005406:	4013      	ands	r3, r2
 8005408:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	2b00      	cmp	r3, #0
 800540e:	f000 80a2 	beq.w	8005556 <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8005412:	4a59      	ldr	r2, [pc, #356]	@ (8005578 <HAL_GPIO_DeInit+0x18c>)
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	089b      	lsrs	r3, r3, #2
 8005418:	3302      	adds	r3, #2
 800541a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800541e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	f003 0303 	and.w	r3, r3, #3
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	2207      	movs	r2, #7
 800542a:	fa02 f303 	lsl.w	r3, r2, r3
 800542e:	68fa      	ldr	r2, [r7, #12]
 8005430:	4013      	ands	r3, r2
 8005432:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800543a:	d00d      	beq.n	8005458 <HAL_GPIO_DeInit+0x6c>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	4a4f      	ldr	r2, [pc, #316]	@ (800557c <HAL_GPIO_DeInit+0x190>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d007      	beq.n	8005454 <HAL_GPIO_DeInit+0x68>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	4a4e      	ldr	r2, [pc, #312]	@ (8005580 <HAL_GPIO_DeInit+0x194>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d101      	bne.n	8005450 <HAL_GPIO_DeInit+0x64>
 800544c:	2302      	movs	r3, #2
 800544e:	e004      	b.n	800545a <HAL_GPIO_DeInit+0x6e>
 8005450:	2307      	movs	r3, #7
 8005452:	e002      	b.n	800545a <HAL_GPIO_DeInit+0x6e>
 8005454:	2301      	movs	r3, #1
 8005456:	e000      	b.n	800545a <HAL_GPIO_DeInit+0x6e>
 8005458:	2300      	movs	r3, #0
 800545a:	697a      	ldr	r2, [r7, #20]
 800545c:	f002 0203 	and.w	r2, r2, #3
 8005460:	0092      	lsls	r2, r2, #2
 8005462:	4093      	lsls	r3, r2
 8005464:	68fa      	ldr	r2, [r7, #12]
 8005466:	429a      	cmp	r2, r3
 8005468:	d136      	bne.n	80054d8 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 800546a:	4b46      	ldr	r3, [pc, #280]	@ (8005584 <HAL_GPIO_DeInit+0x198>)
 800546c:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	43db      	mvns	r3, r3
 8005474:	4943      	ldr	r1, [pc, #268]	@ (8005584 <HAL_GPIO_DeInit+0x198>)
 8005476:	4013      	ands	r3, r2
 8005478:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 800547c:	4b41      	ldr	r3, [pc, #260]	@ (8005584 <HAL_GPIO_DeInit+0x198>)
 800547e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	43db      	mvns	r3, r3
 8005486:	493f      	ldr	r1, [pc, #252]	@ (8005584 <HAL_GPIO_DeInit+0x198>)
 8005488:	4013      	ands	r3, r2
 800548a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800548e:	4b3d      	ldr	r3, [pc, #244]	@ (8005584 <HAL_GPIO_DeInit+0x198>)
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	43db      	mvns	r3, r3
 8005496:	493b      	ldr	r1, [pc, #236]	@ (8005584 <HAL_GPIO_DeInit+0x198>)
 8005498:	4013      	ands	r3, r2
 800549a:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 800549c:	4b39      	ldr	r3, [pc, #228]	@ (8005584 <HAL_GPIO_DeInit+0x198>)
 800549e:	685a      	ldr	r2, [r3, #4]
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	43db      	mvns	r3, r3
 80054a4:	4937      	ldr	r1, [pc, #220]	@ (8005584 <HAL_GPIO_DeInit+0x198>)
 80054a6:	4013      	ands	r3, r2
 80054a8:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	f003 0303 	and.w	r3, r3, #3
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	2207      	movs	r2, #7
 80054b4:	fa02 f303 	lsl.w	r3, r2, r3
 80054b8:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80054ba:	4a2f      	ldr	r2, [pc, #188]	@ (8005578 <HAL_GPIO_DeInit+0x18c>)
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	089b      	lsrs	r3, r3, #2
 80054c0:	3302      	adds	r3, #2
 80054c2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	43da      	mvns	r2, r3
 80054ca:	482b      	ldr	r0, [pc, #172]	@ (8005578 <HAL_GPIO_DeInit+0x18c>)
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	089b      	lsrs	r3, r3, #2
 80054d0:	400a      	ands	r2, r1
 80054d2:	3302      	adds	r3, #2
 80054d4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	005b      	lsls	r3, r3, #1
 80054e0:	2103      	movs	r1, #3
 80054e2:	fa01 f303 	lsl.w	r3, r1, r3
 80054e6:	431a      	orrs	r2, r3
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	08da      	lsrs	r2, r3, #3
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	3208      	adds	r2, #8
 80054f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	f003 0307 	and.w	r3, r3, #7
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	220f      	movs	r2, #15
 8005502:	fa02 f303 	lsl.w	r3, r2, r3
 8005506:	43db      	mvns	r3, r3
 8005508:	697a      	ldr	r2, [r7, #20]
 800550a:	08d2      	lsrs	r2, r2, #3
 800550c:	4019      	ands	r1, r3
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	3208      	adds	r2, #8
 8005512:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	689a      	ldr	r2, [r3, #8]
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	005b      	lsls	r3, r3, #1
 800551e:	2103      	movs	r1, #3
 8005520:	fa01 f303 	lsl.w	r3, r1, r3
 8005524:	43db      	mvns	r3, r3
 8005526:	401a      	ands	r2, r3
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	685a      	ldr	r2, [r3, #4]
 8005530:	2101      	movs	r1, #1
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	fa01 f303 	lsl.w	r3, r1, r3
 8005538:	43db      	mvns	r3, r3
 800553a:	401a      	ands	r2, r3
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	68da      	ldr	r2, [r3, #12]
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	005b      	lsls	r3, r3, #1
 8005548:	2103      	movs	r1, #3
 800554a:	fa01 f303 	lsl.w	r3, r1, r3
 800554e:	43db      	mvns	r3, r3
 8005550:	401a      	ands	r2, r3
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	60da      	str	r2, [r3, #12]
    }

    position++;
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	3301      	adds	r3, #1
 800555a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800555c:	683a      	ldr	r2, [r7, #0]
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	fa22 f303 	lsr.w	r3, r2, r3
 8005564:	2b00      	cmp	r3, #0
 8005566:	f47f af49 	bne.w	80053fc <HAL_GPIO_DeInit+0x10>
  }
}
 800556a:	bf00      	nop
 800556c:	bf00      	nop
 800556e:	371c      	adds	r7, #28
 8005570:	46bd      	mov	sp, r7
 8005572:	bc80      	pop	{r7}
 8005574:	4770      	bx	lr
 8005576:	bf00      	nop
 8005578:	40010000 	.word	0x40010000
 800557c:	48000400 	.word	0x48000400
 8005580:	48000800 	.word	0x48000800
 8005584:	58000800 	.word	0x58000800

08005588 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005588:	b480      	push	{r7}
 800558a:	b085      	sub	sp, #20
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	460b      	mov	r3, r1
 8005592:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	691a      	ldr	r2, [r3, #16]
 8005598:	887b      	ldrh	r3, [r7, #2]
 800559a:	4013      	ands	r3, r2
 800559c:	2b00      	cmp	r3, #0
 800559e:	d002      	beq.n	80055a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80055a0:	2301      	movs	r3, #1
 80055a2:	73fb      	strb	r3, [r7, #15]
 80055a4:	e001      	b.n	80055aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80055a6:	2300      	movs	r3, #0
 80055a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80055aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3714      	adds	r7, #20
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bc80      	pop	{r7}
 80055b4:	4770      	bx	lr

080055b6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80055b6:	b480      	push	{r7}
 80055b8:	b083      	sub	sp, #12
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	6078      	str	r0, [r7, #4]
 80055be:	460b      	mov	r3, r1
 80055c0:	807b      	strh	r3, [r7, #2]
 80055c2:	4613      	mov	r3, r2
 80055c4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80055c6:	787b      	ldrb	r3, [r7, #1]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d003      	beq.n	80055d4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80055cc:	887a      	ldrh	r2, [r7, #2]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80055d2:	e002      	b.n	80055da <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80055d4:	887a      	ldrh	r2, [r7, #2]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80055da:	bf00      	nop
 80055dc:	370c      	adds	r7, #12
 80055de:	46bd      	mov	sp, r7
 80055e0:	bc80      	pop	{r7}
 80055e2:	4770      	bx	lr

080055e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b082      	sub	sp, #8
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	4603      	mov	r3, r0
 80055ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80055ee:	4b08      	ldr	r3, [pc, #32]	@ (8005610 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80055f0:	68da      	ldr	r2, [r3, #12]
 80055f2:	88fb      	ldrh	r3, [r7, #6]
 80055f4:	4013      	ands	r3, r2
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d006      	beq.n	8005608 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80055fa:	4a05      	ldr	r2, [pc, #20]	@ (8005610 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80055fc:	88fb      	ldrh	r3, [r7, #6]
 80055fe:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005600:	88fb      	ldrh	r3, [r7, #6]
 8005602:	4618      	mov	r0, r3
 8005604:	f004 fed0 	bl	800a3a8 <HAL_GPIO_EXTI_Callback>
  }
}
 8005608:	bf00      	nop
 800560a:	3708      	adds	r7, #8
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}
 8005610:	58000800 	.word	0x58000800

08005614 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005614:	b480      	push	{r7}
 8005616:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005618:	4b04      	ldr	r3, [pc, #16]	@ (800562c <HAL_PWR_EnableBkUpAccess+0x18>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a03      	ldr	r2, [pc, #12]	@ (800562c <HAL_PWR_EnableBkUpAccess+0x18>)
 800561e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005622:	6013      	str	r3, [r2, #0]
}
 8005624:	bf00      	nop
 8005626:	46bd      	mov	sp, r7
 8005628:	bc80      	pop	{r7}
 800562a:	4770      	bx	lr
 800562c:	58000400 	.word	0x58000400

08005630 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b082      	sub	sp, #8
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	460b      	mov	r3, r1
 800563a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d10c      	bne.n	800565c <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8005642:	4b13      	ldr	r3, [pc, #76]	@ (8005690 <HAL_PWR_EnterSLEEPMode+0x60>)
 8005644:	695b      	ldr	r3, [r3, #20]
 8005646:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800564a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800564e:	d10d      	bne.n	800566c <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8005650:	f000 f83c 	bl	80056cc <HAL_PWREx_DisableLowPowerRunMode>
 8005654:	4603      	mov	r3, r0
 8005656:	2b00      	cmp	r3, #0
 8005658:	d008      	beq.n	800566c <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 800565a:	e015      	b.n	8005688 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 800565c:	4b0c      	ldr	r3, [pc, #48]	@ (8005690 <HAL_PWR_EnterSLEEPMode+0x60>)
 800565e:	695b      	ldr	r3, [r3, #20]
 8005660:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005664:	2b00      	cmp	r3, #0
 8005666:	d101      	bne.n	800566c <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8005668:	f000 f822 	bl	80056b0 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800566c:	4b09      	ldr	r3, [pc, #36]	@ (8005694 <HAL_PWR_EnterSLEEPMode+0x64>)
 800566e:	691b      	ldr	r3, [r3, #16]
 8005670:	4a08      	ldr	r2, [pc, #32]	@ (8005694 <HAL_PWR_EnterSLEEPMode+0x64>)
 8005672:	f023 0304 	bic.w	r3, r3, #4
 8005676:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8005678:	78fb      	ldrb	r3, [r7, #3]
 800567a:	2b01      	cmp	r3, #1
 800567c:	d101      	bne.n	8005682 <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800567e:	bf30      	wfi
 8005680:	e002      	b.n	8005688 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8005682:	bf40      	sev
    __WFE();
 8005684:	bf20      	wfe
    __WFE();
 8005686:	bf20      	wfe
  }
}
 8005688:	3708      	adds	r7, #8
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}
 800568e:	bf00      	nop
 8005690:	58000400 	.word	0x58000400
 8005694:	e000ed00 	.word	0xe000ed00

08005698 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005698:	b480      	push	{r7}
 800569a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800569c:	4b03      	ldr	r3, [pc, #12]	@ (80056ac <HAL_PWREx_GetVoltageRange+0x14>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bc80      	pop	{r7}
 80056aa:	4770      	bx	lr
 80056ac:	58000400 	.word	0x58000400

080056b0 <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 80056b0:	b480      	push	{r7}
 80056b2:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 80056b4:	4b04      	ldr	r3, [pc, #16]	@ (80056c8 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a03      	ldr	r2, [pc, #12]	@ (80056c8 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 80056ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80056be:	6013      	str	r3, [r2, #0]
}
 80056c0:	bf00      	nop
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bc80      	pop	{r7}
 80056c6:	4770      	bx	lr
 80056c8:	58000400 	.word	0x58000400

080056cc <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b083      	sub	sp, #12
 80056d0:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 80056d2:	4b16      	ldr	r3, [pc, #88]	@ (800572c <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a15      	ldr	r2, [pc, #84]	@ (800572c <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80056d8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80056dc:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 80056de:	4b14      	ldr	r3, [pc, #80]	@ (8005730 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	2232      	movs	r2, #50	@ 0x32
 80056e4:	fb02 f303 	mul.w	r3, r2, r3
 80056e8:	4a12      	ldr	r2, [pc, #72]	@ (8005734 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 80056ea:	fba2 2303 	umull	r2, r3, r2, r3
 80056ee:	0c9b      	lsrs	r3, r3, #18
 80056f0:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80056f2:	e002      	b.n	80056fa <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	3b01      	subs	r3, #1
 80056f8:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80056fa:	4b0c      	ldr	r3, [pc, #48]	@ (800572c <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80056fc:	695b      	ldr	r3, [r3, #20]
 80056fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005702:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005706:	d102      	bne.n	800570e <HAL_PWREx_DisableLowPowerRunMode+0x42>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d1f2      	bne.n	80056f4 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 800570e:	4b07      	ldr	r3, [pc, #28]	@ (800572c <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8005710:	695b      	ldr	r3, [r3, #20]
 8005712:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005716:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800571a:	d101      	bne.n	8005720 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 800571c:	2303      	movs	r3, #3
 800571e:	e000      	b.n	8005722 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 8005720:	2300      	movs	r3, #0
}
 8005722:	4618      	mov	r0, r3
 8005724:	370c      	adds	r7, #12
 8005726:	46bd      	mov	sp, r7
 8005728:	bc80      	pop	{r7}
 800572a:	4770      	bx	lr
 800572c:	58000400 	.word	0x58000400
 8005730:	20000000 	.word	0x20000000
 8005734:	431bde83 	.word	0x431bde83

08005738 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8005738:	b480      	push	{r7}
 800573a:	b083      	sub	sp, #12
 800573c:	af00      	add	r7, sp, #0
 800573e:	4603      	mov	r3, r0
 8005740:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8005742:	4b10      	ldr	r3, [pc, #64]	@ (8005784 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f023 0307 	bic.w	r3, r3, #7
 800574a:	4a0e      	ldr	r2, [pc, #56]	@ (8005784 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 800574c:	f043 0302 	orr.w	r3, r3, #2
 8005750:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005752:	4b0d      	ldr	r3, [pc, #52]	@ (8005788 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	4a0c      	ldr	r2, [pc, #48]	@ (8005788 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8005758:	f043 0304 	orr.w	r3, r3, #4
 800575c:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 800575e:	79fb      	ldrb	r3, [r7, #7]
 8005760:	2b01      	cmp	r3, #1
 8005762:	d101      	bne.n	8005768 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8005764:	bf30      	wfi
 8005766:	e002      	b.n	800576e <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8005768:	bf40      	sev
    __WFE();
 800576a:	bf20      	wfe
    __WFE();
 800576c:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800576e:	4b06      	ldr	r3, [pc, #24]	@ (8005788 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8005770:	691b      	ldr	r3, [r3, #16]
 8005772:	4a05      	ldr	r2, [pc, #20]	@ (8005788 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8005774:	f023 0304 	bic.w	r3, r3, #4
 8005778:	6113      	str	r3, [r2, #16]
}
 800577a:	bf00      	nop
 800577c:	370c      	adds	r7, #12
 800577e:	46bd      	mov	sp, r7
 8005780:	bc80      	pop	{r7}
 8005782:	4770      	bx	lr
 8005784:	58000400 	.word	0x58000400
 8005788:	e000ed00 	.word	0xe000ed00

0800578c <LL_PWR_IsEnabledBkUpAccess>:
{
 800578c:	b480      	push	{r7}
 800578e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8005790:	4b06      	ldr	r3, [pc, #24]	@ (80057ac <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005798:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800579c:	d101      	bne.n	80057a2 <LL_PWR_IsEnabledBkUpAccess+0x16>
 800579e:	2301      	movs	r3, #1
 80057a0:	e000      	b.n	80057a4 <LL_PWR_IsEnabledBkUpAccess+0x18>
 80057a2:	2300      	movs	r3, #0
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bc80      	pop	{r7}
 80057aa:	4770      	bx	lr
 80057ac:	58000400 	.word	0x58000400

080057b0 <LL_RCC_HSE_EnableTcxo>:
{
 80057b0:	b480      	push	{r7}
 80057b2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80057b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80057be:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80057c2:	6013      	str	r3, [r2, #0]
}
 80057c4:	bf00      	nop
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bc80      	pop	{r7}
 80057ca:	4770      	bx	lr

080057cc <LL_RCC_HSE_DisableTcxo>:
{
 80057cc:	b480      	push	{r7}
 80057ce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80057d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80057da:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80057de:	6013      	str	r3, [r2, #0]
}
 80057e0:	bf00      	nop
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bc80      	pop	{r7}
 80057e6:	4770      	bx	lr

080057e8 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80057e8:	b480      	push	{r7}
 80057ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80057ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80057f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80057fa:	d101      	bne.n	8005800 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80057fc:	2301      	movs	r3, #1
 80057fe:	e000      	b.n	8005802 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8005800:	2300      	movs	r3, #0
}
 8005802:	4618      	mov	r0, r3
 8005804:	46bd      	mov	sp, r7
 8005806:	bc80      	pop	{r7}
 8005808:	4770      	bx	lr

0800580a <LL_RCC_HSE_Enable>:
{
 800580a:	b480      	push	{r7}
 800580c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800580e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005818:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800581c:	6013      	str	r3, [r2, #0]
}
 800581e:	bf00      	nop
 8005820:	46bd      	mov	sp, r7
 8005822:	bc80      	pop	{r7}
 8005824:	4770      	bx	lr

08005826 <LL_RCC_HSE_Disable>:
{
 8005826:	b480      	push	{r7}
 8005828:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800582a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005834:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005838:	6013      	str	r3, [r2, #0]
}
 800583a:	bf00      	nop
 800583c:	46bd      	mov	sp, r7
 800583e:	bc80      	pop	{r7}
 8005840:	4770      	bx	lr

08005842 <LL_RCC_HSE_IsReady>:
{
 8005842:	b480      	push	{r7}
 8005844:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005846:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005850:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005854:	d101      	bne.n	800585a <LL_RCC_HSE_IsReady+0x18>
 8005856:	2301      	movs	r3, #1
 8005858:	e000      	b.n	800585c <LL_RCC_HSE_IsReady+0x1a>
 800585a:	2300      	movs	r3, #0
}
 800585c:	4618      	mov	r0, r3
 800585e:	46bd      	mov	sp, r7
 8005860:	bc80      	pop	{r7}
 8005862:	4770      	bx	lr

08005864 <LL_RCC_HSI_Enable>:
{
 8005864:	b480      	push	{r7}
 8005866:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005868:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005872:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005876:	6013      	str	r3, [r2, #0]
}
 8005878:	bf00      	nop
 800587a:	46bd      	mov	sp, r7
 800587c:	bc80      	pop	{r7}
 800587e:	4770      	bx	lr

08005880 <LL_RCC_HSI_Disable>:
{
 8005880:	b480      	push	{r7}
 8005882:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8005884:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800588e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005892:	6013      	str	r3, [r2, #0]
}
 8005894:	bf00      	nop
 8005896:	46bd      	mov	sp, r7
 8005898:	bc80      	pop	{r7}
 800589a:	4770      	bx	lr

0800589c <LL_RCC_HSI_IsReady>:
{
 800589c:	b480      	push	{r7}
 800589e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80058a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058ae:	d101      	bne.n	80058b4 <LL_RCC_HSI_IsReady+0x18>
 80058b0:	2301      	movs	r3, #1
 80058b2:	e000      	b.n	80058b6 <LL_RCC_HSI_IsReady+0x1a>
 80058b4:	2300      	movs	r3, #0
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bc80      	pop	{r7}
 80058bc:	4770      	bx	lr

080058be <LL_RCC_HSI_SetCalibTrimming>:
{
 80058be:	b480      	push	{r7}
 80058c0:	b083      	sub	sp, #12
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80058c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	061b      	lsls	r3, r3, #24
 80058d4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80058d8:	4313      	orrs	r3, r2
 80058da:	604b      	str	r3, [r1, #4]
}
 80058dc:	bf00      	nop
 80058de:	370c      	adds	r7, #12
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bc80      	pop	{r7}
 80058e4:	4770      	bx	lr

080058e6 <LL_RCC_LSE_IsReady>:
{
 80058e6:	b480      	push	{r7}
 80058e8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80058ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80058ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058f2:	f003 0302 	and.w	r3, r3, #2
 80058f6:	2b02      	cmp	r3, #2
 80058f8:	d101      	bne.n	80058fe <LL_RCC_LSE_IsReady+0x18>
 80058fa:	2301      	movs	r3, #1
 80058fc:	e000      	b.n	8005900 <LL_RCC_LSE_IsReady+0x1a>
 80058fe:	2300      	movs	r3, #0
}
 8005900:	4618      	mov	r0, r3
 8005902:	46bd      	mov	sp, r7
 8005904:	bc80      	pop	{r7}
 8005906:	4770      	bx	lr

08005908 <LL_RCC_LSI_Enable>:
{
 8005908:	b480      	push	{r7}
 800590a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 800590c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005910:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005914:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005918:	f043 0301 	orr.w	r3, r3, #1
 800591c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8005920:	bf00      	nop
 8005922:	46bd      	mov	sp, r7
 8005924:	bc80      	pop	{r7}
 8005926:	4770      	bx	lr

08005928 <LL_RCC_LSI_Disable>:
{
 8005928:	b480      	push	{r7}
 800592a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 800592c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005930:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005934:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005938:	f023 0301 	bic.w	r3, r3, #1
 800593c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8005940:	bf00      	nop
 8005942:	46bd      	mov	sp, r7
 8005944:	bc80      	pop	{r7}
 8005946:	4770      	bx	lr

08005948 <LL_RCC_LSI_IsReady>:
{
 8005948:	b480      	push	{r7}
 800594a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 800594c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005950:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005954:	f003 0302 	and.w	r3, r3, #2
 8005958:	2b02      	cmp	r3, #2
 800595a:	d101      	bne.n	8005960 <LL_RCC_LSI_IsReady+0x18>
 800595c:	2301      	movs	r3, #1
 800595e:	e000      	b.n	8005962 <LL_RCC_LSI_IsReady+0x1a>
 8005960:	2300      	movs	r3, #0
}
 8005962:	4618      	mov	r0, r3
 8005964:	46bd      	mov	sp, r7
 8005966:	bc80      	pop	{r7}
 8005968:	4770      	bx	lr

0800596a <LL_RCC_MSI_Enable>:
{
 800596a:	b480      	push	{r7}
 800596c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800596e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005978:	f043 0301 	orr.w	r3, r3, #1
 800597c:	6013      	str	r3, [r2, #0]
}
 800597e:	bf00      	nop
 8005980:	46bd      	mov	sp, r7
 8005982:	bc80      	pop	{r7}
 8005984:	4770      	bx	lr

08005986 <LL_RCC_MSI_Disable>:
{
 8005986:	b480      	push	{r7}
 8005988:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800598a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005994:	f023 0301 	bic.w	r3, r3, #1
 8005998:	6013      	str	r3, [r2, #0]
}
 800599a:	bf00      	nop
 800599c:	46bd      	mov	sp, r7
 800599e:	bc80      	pop	{r7}
 80059a0:	4770      	bx	lr

080059a2 <LL_RCC_MSI_IsReady>:
{
 80059a2:	b480      	push	{r7}
 80059a4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80059a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f003 0302 	and.w	r3, r3, #2
 80059b0:	2b02      	cmp	r3, #2
 80059b2:	d101      	bne.n	80059b8 <LL_RCC_MSI_IsReady+0x16>
 80059b4:	2301      	movs	r3, #1
 80059b6:	e000      	b.n	80059ba <LL_RCC_MSI_IsReady+0x18>
 80059b8:	2300      	movs	r3, #0
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	46bd      	mov	sp, r7
 80059be:	bc80      	pop	{r7}
 80059c0:	4770      	bx	lr

080059c2 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 80059c2:	b480      	push	{r7}
 80059c4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80059c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f003 0308 	and.w	r3, r3, #8
 80059d0:	2b08      	cmp	r3, #8
 80059d2:	d101      	bne.n	80059d8 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80059d4:	2301      	movs	r3, #1
 80059d6:	e000      	b.n	80059da <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80059d8:	2300      	movs	r3, #0
}
 80059da:	4618      	mov	r0, r3
 80059dc:	46bd      	mov	sp, r7
 80059de:	bc80      	pop	{r7}
 80059e0:	4770      	bx	lr

080059e2 <LL_RCC_MSI_GetRange>:
{
 80059e2:	b480      	push	{r7}
 80059e4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80059e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bc80      	pop	{r7}
 80059f6:	4770      	bx	lr

080059f8 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 80059f8:	b480      	push	{r7}
 80059fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80059fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a04:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bc80      	pop	{r7}
 8005a0e:	4770      	bx	lr

08005a10 <LL_RCC_MSI_SetCalibTrimming>:
{
 8005a10:	b480      	push	{r7}
 8005a12:	b083      	sub	sp, #12
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005a18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	021b      	lsls	r3, r3, #8
 8005a26:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	604b      	str	r3, [r1, #4]
}
 8005a2e:	bf00      	nop
 8005a30:	370c      	adds	r7, #12
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bc80      	pop	{r7}
 8005a36:	4770      	bx	lr

08005a38 <LL_RCC_SetSysClkSource>:
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b083      	sub	sp, #12
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005a40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	f023 0203 	bic.w	r2, r3, #3
 8005a4a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4313      	orrs	r3, r2
 8005a52:	608b      	str	r3, [r1, #8]
}
 8005a54:	bf00      	nop
 8005a56:	370c      	adds	r7, #12
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bc80      	pop	{r7}
 8005a5c:	4770      	bx	lr

08005a5e <LL_RCC_GetSysClkSource>:
{
 8005a5e:	b480      	push	{r7}
 8005a60:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005a62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	f003 030c 	and.w	r3, r3, #12
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bc80      	pop	{r7}
 8005a72:	4770      	bx	lr

08005a74 <LL_RCC_SetAHBPrescaler>:
{
 8005a74:	b480      	push	{r7}
 8005a76:	b083      	sub	sp, #12
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8005a7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005a86:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	608b      	str	r3, [r1, #8]
}
 8005a90:	bf00      	nop
 8005a92:	370c      	adds	r7, #12
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bc80      	pop	{r7}
 8005a98:	4770      	bx	lr

08005a9a <LL_RCC_SetAHB3Prescaler>:
{
 8005a9a:	b480      	push	{r7}
 8005a9c:	b083      	sub	sp, #12
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8005aa2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005aa6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005aaa:	f023 020f 	bic.w	r2, r3, #15
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	091b      	lsrs	r3, r3, #4
 8005ab2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8005abc:	bf00      	nop
 8005abe:	370c      	adds	r7, #12
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bc80      	pop	{r7}
 8005ac4:	4770      	bx	lr

08005ac6 <LL_RCC_SetAPB1Prescaler>:
{
 8005ac6:	b480      	push	{r7}
 8005ac8:	b083      	sub	sp, #12
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005ace:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005ad8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	608b      	str	r3, [r1, #8]
}
 8005ae2:	bf00      	nop
 8005ae4:	370c      	adds	r7, #12
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bc80      	pop	{r7}
 8005aea:	4770      	bx	lr

08005aec <LL_RCC_SetAPB2Prescaler>:
{
 8005aec:	b480      	push	{r7}
 8005aee:	b083      	sub	sp, #12
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005af4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005afe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	608b      	str	r3, [r1, #8]
}
 8005b08:	bf00      	nop
 8005b0a:	370c      	adds	r7, #12
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bc80      	pop	{r7}
 8005b10:	4770      	bx	lr

08005b12 <LL_RCC_GetAHBPrescaler>:
{
 8005b12:	b480      	push	{r7}
 8005b14:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005b16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bc80      	pop	{r7}
 8005b26:	4770      	bx	lr

08005b28 <LL_RCC_GetAHB3Prescaler>:
{
 8005b28:	b480      	push	{r7}
 8005b2a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005b2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b30:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005b34:	011b      	lsls	r3, r3, #4
 8005b36:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bc80      	pop	{r7}
 8005b40:	4770      	bx	lr

08005b42 <LL_RCC_GetAPB1Prescaler>:
{
 8005b42:	b480      	push	{r7}
 8005b44:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005b46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bc80      	pop	{r7}
 8005b56:	4770      	bx	lr

08005b58 <LL_RCC_GetAPB2Prescaler>:
{
 8005b58:	b480      	push	{r7}
 8005b5a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005b5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bc80      	pop	{r7}
 8005b6c:	4770      	bx	lr

08005b6e <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8005b6e:	b480      	push	{r7}
 8005b70:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005b72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005b7c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005b80:	6013      	str	r3, [r2, #0]
}
 8005b82:	bf00      	nop
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bc80      	pop	{r7}
 8005b88:	4770      	bx	lr

08005b8a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8005b8a:	b480      	push	{r7}
 8005b8c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005b8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005b98:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005b9c:	6013      	str	r3, [r2, #0]
}
 8005b9e:	bf00      	nop
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bc80      	pop	{r7}
 8005ba4:	4770      	bx	lr

08005ba6 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8005ba6:	b480      	push	{r7}
 8005ba8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005baa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bb4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005bb8:	d101      	bne.n	8005bbe <LL_RCC_PLL_IsReady+0x18>
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e000      	b.n	8005bc0 <LL_RCC_PLL_IsReady+0x1a>
 8005bbe:	2300      	movs	r3, #0
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bc80      	pop	{r7}
 8005bc6:	4770      	bx	lr

08005bc8 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005bcc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bd0:	68db      	ldr	r3, [r3, #12]
 8005bd2:	0a1b      	lsrs	r3, r3, #8
 8005bd4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bc80      	pop	{r7}
 8005bde:	4770      	bx	lr

08005be0 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8005be0:	b480      	push	{r7}
 8005be2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005be4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005be8:	68db      	ldr	r3, [r3, #12]
 8005bea:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bc80      	pop	{r7}
 8005bf4:	4770      	bx	lr

08005bf6 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005bf6:	b480      	push	{r7}
 8005bf8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005bfa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bfe:	68db      	ldr	r3, [r3, #12]
 8005c00:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bc80      	pop	{r7}
 8005c0a:	4770      	bx	lr

08005c0c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005c10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c14:	68db      	ldr	r3, [r3, #12]
 8005c16:	f003 0303 	and.w	r3, r3, #3
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bc80      	pop	{r7}
 8005c20:	4770      	bx	lr

08005c22 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8005c22:	b480      	push	{r7}
 8005c24:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8005c26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c34:	d101      	bne.n	8005c3a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8005c36:	2301      	movs	r3, #1
 8005c38:	e000      	b.n	8005c3c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8005c3a:	2300      	movs	r3, #0
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bc80      	pop	{r7}
 8005c42:	4770      	bx	lr

08005c44 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8005c44:	b480      	push	{r7}
 8005c46:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005c48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c4c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005c50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c58:	d101      	bne.n	8005c5e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e000      	b.n	8005c60 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8005c5e:	2300      	movs	r3, #0
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bc80      	pop	{r7}
 8005c66:	4770      	bx	lr

08005c68 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005c6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c76:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c7a:	d101      	bne.n	8005c80 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	e000      	b.n	8005c82 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8005c80:	2300      	movs	r3, #0
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bc80      	pop	{r7}
 8005c88:	4770      	bx	lr

08005c8a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8005c8a:	b480      	push	{r7}
 8005c8c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8005c8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005c98:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005c9c:	d101      	bne.n	8005ca2 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e000      	b.n	8005ca4 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8005ca2:	2300      	movs	r3, #0
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bc80      	pop	{r7}
 8005caa:	4770      	bx	lr

08005cac <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b088      	sub	sp, #32
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d101      	bne.n	8005cbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e38b      	b.n	80063d6 <HAL_RCC_OscConfig+0x72a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005cbe:	f7ff fece 	bl	8005a5e <LL_RCC_GetSysClkSource>
 8005cc2:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005cc4:	f7ff ffa2 	bl	8005c0c <LL_RCC_PLL_GetMainSource>
 8005cc8:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f003 0320 	and.w	r3, r3, #32
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	f000 80c9 	beq.w	8005e6a <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005cd8:	69fb      	ldr	r3, [r7, #28]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d005      	beq.n	8005cea <HAL_RCC_OscConfig+0x3e>
 8005cde:	69fb      	ldr	r3, [r7, #28]
 8005ce0:	2b0c      	cmp	r3, #12
 8005ce2:	d17b      	bne.n	8005ddc <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005ce4:	69bb      	ldr	r3, [r7, #24]
 8005ce6:	2b01      	cmp	r3, #1
 8005ce8:	d178      	bne.n	8005ddc <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005cea:	f7ff fe5a 	bl	80059a2 <LL_RCC_MSI_IsReady>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d005      	beq.n	8005d00 <HAL_RCC_OscConfig+0x54>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6a1b      	ldr	r3, [r3, #32]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d101      	bne.n	8005d00 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	e36a      	b.n	80063d6 <HAL_RCC_OscConfig+0x72a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005d04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f003 0308 	and.w	r3, r3, #8
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d005      	beq.n	8005d1e <HAL_RCC_OscConfig+0x72>
 8005d12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005d1c:	e006      	b.n	8005d2c <HAL_RCC_OscConfig+0x80>
 8005d1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d26:	091b      	lsrs	r3, r3, #4
 8005d28:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d222      	bcs.n	8005d76 <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d34:	4618      	mov	r0, r3
 8005d36:	f000 fd51 	bl	80067dc <RCC_SetFlashLatencyFromMSIRange>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d001      	beq.n	8005d44 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 8005d40:	2301      	movs	r3, #1
 8005d42:	e348      	b.n	80063d6 <HAL_RCC_OscConfig+0x72a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005d44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005d4e:	f043 0308 	orr.w	r3, r3, #8
 8005d52:	6013      	str	r3, [r2, #0]
 8005d54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d62:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005d66:	4313      	orrs	r3, r2
 8005d68:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f7ff fe4e 	bl	8005a10 <LL_RCC_MSI_SetCalibTrimming>
 8005d74:	e021      	b.n	8005dba <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005d76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005d80:	f043 0308 	orr.w	r3, r3, #8
 8005d84:	6013      	str	r3, [r2, #0]
 8005d86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d94:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005da0:	4618      	mov	r0, r3
 8005da2:	f7ff fe35 	bl	8005a10 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005daa:	4618      	mov	r0, r3
 8005dac:	f000 fd16 	bl	80067dc <RCC_SetFlashLatencyFromMSIRange>
 8005db0:	4603      	mov	r3, r0
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d001      	beq.n	8005dba <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	e30d      	b.n	80063d6 <HAL_RCC_OscConfig+0x72a>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005dba:	f000 fcd7 	bl	800676c <HAL_RCC_GetHCLKFreq>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	4aa1      	ldr	r2, [pc, #644]	@ (8006048 <HAL_RCC_OscConfig+0x39c>)
 8005dc2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005dc4:	4ba1      	ldr	r3, [pc, #644]	@ (800604c <HAL_RCC_OscConfig+0x3a0>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f7fc f99f 	bl	800210c <HAL_InitTick>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8005dd2:	7cfb      	ldrb	r3, [r7, #19]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d047      	beq.n	8005e68 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 8005dd8:	7cfb      	ldrb	r3, [r7, #19]
 8005dda:	e2fc      	b.n	80063d6 <HAL_RCC_OscConfig+0x72a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6a1b      	ldr	r3, [r3, #32]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d02c      	beq.n	8005e3e <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005de4:	f7ff fdc1 	bl	800596a <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005de8:	f7fc f99a 	bl	8002120 <HAL_GetTick>
 8005dec:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8005dee:	e008      	b.n	8005e02 <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005df0:	f7fc f996 	bl	8002120 <HAL_GetTick>
 8005df4:	4602      	mov	r2, r0
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	1ad3      	subs	r3, r2, r3
 8005dfa:	2b02      	cmp	r3, #2
 8005dfc:	d901      	bls.n	8005e02 <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 8005dfe:	2303      	movs	r3, #3
 8005e00:	e2e9      	b.n	80063d6 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() == 0U)
 8005e02:	f7ff fdce 	bl	80059a2 <LL_RCC_MSI_IsReady>
 8005e06:	4603      	mov	r3, r0
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d0f1      	beq.n	8005df0 <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005e0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005e16:	f043 0308 	orr.w	r3, r3, #8
 8005e1a:	6013      	str	r3, [r2, #0]
 8005e1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e2a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e36:	4618      	mov	r0, r3
 8005e38:	f7ff fdea 	bl	8005a10 <LL_RCC_MSI_SetCalibTrimming>
 8005e3c:	e015      	b.n	8005e6a <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005e3e:	f7ff fda2 	bl	8005986 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005e42:	f7fc f96d 	bl	8002120 <HAL_GetTick>
 8005e46:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8005e48:	e008      	b.n	8005e5c <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005e4a:	f7fc f969 	bl	8002120 <HAL_GetTick>
 8005e4e:	4602      	mov	r2, r0
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	1ad3      	subs	r3, r2, r3
 8005e54:	2b02      	cmp	r3, #2
 8005e56:	d901      	bls.n	8005e5c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8005e58:	2303      	movs	r3, #3
 8005e5a:	e2bc      	b.n	80063d6 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() != 0U)
 8005e5c:	f7ff fda1 	bl	80059a2 <LL_RCC_MSI_IsReady>
 8005e60:	4603      	mov	r3, r0
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d1f1      	bne.n	8005e4a <HAL_RCC_OscConfig+0x19e>
 8005e66:	e000      	b.n	8005e6a <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005e68:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f003 0301 	and.w	r3, r3, #1
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d05f      	beq.n	8005f36 <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005e76:	69fb      	ldr	r3, [r7, #28]
 8005e78:	2b08      	cmp	r3, #8
 8005e7a:	d005      	beq.n	8005e88 <HAL_RCC_OscConfig+0x1dc>
 8005e7c:	69fb      	ldr	r3, [r7, #28]
 8005e7e:	2b0c      	cmp	r3, #12
 8005e80:	d10d      	bne.n	8005e9e <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005e82:	69bb      	ldr	r3, [r7, #24]
 8005e84:	2b03      	cmp	r3, #3
 8005e86:	d10a      	bne.n	8005e9e <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e88:	f7ff fcdb 	bl	8005842 <LL_RCC_HSE_IsReady>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d050      	beq.n	8005f34 <HAL_RCC_OscConfig+0x288>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d14c      	bne.n	8005f34 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	e29b      	b.n	80063d6 <HAL_RCC_OscConfig+0x72a>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8005e9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ebc:	d102      	bne.n	8005ec4 <HAL_RCC_OscConfig+0x218>
 8005ebe:	f7ff fca4 	bl	800580a <LL_RCC_HSE_Enable>
 8005ec2:	e00d      	b.n	8005ee0 <HAL_RCC_OscConfig+0x234>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8005ecc:	d104      	bne.n	8005ed8 <HAL_RCC_OscConfig+0x22c>
 8005ece:	f7ff fc6f 	bl	80057b0 <LL_RCC_HSE_EnableTcxo>
 8005ed2:	f7ff fc9a 	bl	800580a <LL_RCC_HSE_Enable>
 8005ed6:	e003      	b.n	8005ee0 <HAL_RCC_OscConfig+0x234>
 8005ed8:	f7ff fca5 	bl	8005826 <LL_RCC_HSE_Disable>
 8005edc:	f7ff fc76 	bl	80057cc <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d012      	beq.n	8005f0e <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ee8:	f7fc f91a 	bl	8002120 <HAL_GetTick>
 8005eec:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8005eee:	e008      	b.n	8005f02 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ef0:	f7fc f916 	bl	8002120 <HAL_GetTick>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	1ad3      	subs	r3, r2, r3
 8005efa:	2b64      	cmp	r3, #100	@ 0x64
 8005efc:	d901      	bls.n	8005f02 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8005efe:	2303      	movs	r3, #3
 8005f00:	e269      	b.n	80063d6 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() == 0U)
 8005f02:	f7ff fc9e 	bl	8005842 <LL_RCC_HSE_IsReady>
 8005f06:	4603      	mov	r3, r0
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d0f1      	beq.n	8005ef0 <HAL_RCC_OscConfig+0x244>
 8005f0c:	e013      	b.n	8005f36 <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f0e:	f7fc f907 	bl	8002120 <HAL_GetTick>
 8005f12:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8005f14:	e008      	b.n	8005f28 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f16:	f7fc f903 	bl	8002120 <HAL_GetTick>
 8005f1a:	4602      	mov	r2, r0
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	1ad3      	subs	r3, r2, r3
 8005f20:	2b64      	cmp	r3, #100	@ 0x64
 8005f22:	d901      	bls.n	8005f28 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 8005f24:	2303      	movs	r3, #3
 8005f26:	e256      	b.n	80063d6 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005f28:	f7ff fc8b 	bl	8005842 <LL_RCC_HSE_IsReady>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d1f1      	bne.n	8005f16 <HAL_RCC_OscConfig+0x26a>
 8005f32:	e000      	b.n	8005f36 <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f34:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f003 0302 	and.w	r3, r3, #2
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d04b      	beq.n	8005fda <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005f42:	69fb      	ldr	r3, [r7, #28]
 8005f44:	2b04      	cmp	r3, #4
 8005f46:	d005      	beq.n	8005f54 <HAL_RCC_OscConfig+0x2a8>
 8005f48:	69fb      	ldr	r3, [r7, #28]
 8005f4a:	2b0c      	cmp	r3, #12
 8005f4c:	d113      	bne.n	8005f76 <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005f4e:	69bb      	ldr	r3, [r7, #24]
 8005f50:	2b02      	cmp	r3, #2
 8005f52:	d110      	bne.n	8005f76 <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f54:	f7ff fca2 	bl	800589c <LL_RCC_HSI_IsReady>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d005      	beq.n	8005f6a <HAL_RCC_OscConfig+0x2be>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	691b      	ldr	r3, [r3, #16]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d101      	bne.n	8005f6a <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	e235      	b.n	80063d6 <HAL_RCC_OscConfig+0x72a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	695b      	ldr	r3, [r3, #20]
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f7ff fca5 	bl	80058be <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f74:	e031      	b.n	8005fda <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	691b      	ldr	r3, [r3, #16]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d019      	beq.n	8005fb2 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f7e:	f7ff fc71 	bl	8005864 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f82:	f7fc f8cd 	bl	8002120 <HAL_GetTick>
 8005f86:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8005f88:	e008      	b.n	8005f9c <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f8a:	f7fc f8c9 	bl	8002120 <HAL_GetTick>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	1ad3      	subs	r3, r2, r3
 8005f94:	2b02      	cmp	r3, #2
 8005f96:	d901      	bls.n	8005f9c <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8005f98:	2303      	movs	r3, #3
 8005f9a:	e21c      	b.n	80063d6 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() == 0U)
 8005f9c:	f7ff fc7e 	bl	800589c <LL_RCC_HSI_IsReady>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d0f1      	beq.n	8005f8a <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	695b      	ldr	r3, [r3, #20]
 8005faa:	4618      	mov	r0, r3
 8005fac:	f7ff fc87 	bl	80058be <LL_RCC_HSI_SetCalibTrimming>
 8005fb0:	e013      	b.n	8005fda <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005fb2:	f7ff fc65 	bl	8005880 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fb6:	f7fc f8b3 	bl	8002120 <HAL_GetTick>
 8005fba:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8005fbc:	e008      	b.n	8005fd0 <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005fbe:	f7fc f8af 	bl	8002120 <HAL_GetTick>
 8005fc2:	4602      	mov	r2, r0
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	1ad3      	subs	r3, r2, r3
 8005fc8:	2b02      	cmp	r3, #2
 8005fca:	d901      	bls.n	8005fd0 <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 8005fcc:	2303      	movs	r3, #3
 8005fce:	e202      	b.n	80063d6 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() != 0U)
 8005fd0:	f7ff fc64 	bl	800589c <LL_RCC_HSI_IsReady>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d1f1      	bne.n	8005fbe <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f003 0308 	and.w	r3, r3, #8
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d06f      	beq.n	80060c6 <HAL_RCC_OscConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	699b      	ldr	r3, [r3, #24]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d057      	beq.n	800609e <HAL_RCC_OscConfig+0x3f2>
    {
      uint32_t csr_temp = RCC->CSR;
 8005fee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ff2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ff6:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	69da      	ldr	r2, [r3, #28]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f003 0310 	and.w	r3, r3, #16
 8006002:	429a      	cmp	r2, r3
 8006004:	d036      	beq.n	8006074 <HAL_RCC_OscConfig+0x3c8>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	f003 0302 	and.w	r3, r3, #2
 800600c:	2b00      	cmp	r3, #0
 800600e:	d006      	beq.n	800601e <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8006016:	2b00      	cmp	r3, #0
 8006018:	d101      	bne.n	800601e <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	e1db      	b.n	80063d6 <HAL_RCC_OscConfig+0x72a>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	f003 0301 	and.w	r3, r3, #1
 8006024:	2b00      	cmp	r3, #0
 8006026:	d018      	beq.n	800605a <HAL_RCC_OscConfig+0x3ae>
        {
          __HAL_RCC_LSI_DISABLE();
 8006028:	f7ff fc7e 	bl	8005928 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800602c:	f7fc f878 	bl	8002120 <HAL_GetTick>
 8006030:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8006032:	e00d      	b.n	8006050 <HAL_RCC_OscConfig+0x3a4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006034:	f7fc f874 	bl	8002120 <HAL_GetTick>
 8006038:	4602      	mov	r2, r0
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	1ad3      	subs	r3, r2, r3
 800603e:	2b11      	cmp	r3, #17
 8006040:	d906      	bls.n	8006050 <HAL_RCC_OscConfig+0x3a4>
            {
              return HAL_TIMEOUT;
 8006042:	2303      	movs	r3, #3
 8006044:	e1c7      	b.n	80063d6 <HAL_RCC_OscConfig+0x72a>
 8006046:	bf00      	nop
 8006048:	20000000 	.word	0x20000000
 800604c:	20000004 	.word	0x20000004
          while (LL_RCC_LSI_IsReady() != 0U)
 8006050:	f7ff fc7a 	bl	8005948 <LL_RCC_LSI_IsReady>
 8006054:	4603      	mov	r3, r0
 8006056:	2b00      	cmp	r3, #0
 8006058:	d1ec      	bne.n	8006034 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 800605a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800605e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006062:	f023 0210 	bic.w	r2, r3, #16
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	69db      	ldr	r3, [r3, #28]
 800606a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800606e:	4313      	orrs	r3, r2
 8006070:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006074:	f7ff fc48 	bl	8005908 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006078:	f7fc f852 	bl	8002120 <HAL_GetTick>
 800607c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 800607e:	e008      	b.n	8006092 <HAL_RCC_OscConfig+0x3e6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006080:	f7fc f84e 	bl	8002120 <HAL_GetTick>
 8006084:	4602      	mov	r2, r0
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	1ad3      	subs	r3, r2, r3
 800608a:	2b11      	cmp	r3, #17
 800608c:	d901      	bls.n	8006092 <HAL_RCC_OscConfig+0x3e6>
        {
          return HAL_TIMEOUT;
 800608e:	2303      	movs	r3, #3
 8006090:	e1a1      	b.n	80063d6 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() == 0U)
 8006092:	f7ff fc59 	bl	8005948 <LL_RCC_LSI_IsReady>
 8006096:	4603      	mov	r3, r0
 8006098:	2b00      	cmp	r3, #0
 800609a:	d0f1      	beq.n	8006080 <HAL_RCC_OscConfig+0x3d4>
 800609c:	e013      	b.n	80060c6 <HAL_RCC_OscConfig+0x41a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800609e:	f7ff fc43 	bl	8005928 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060a2:	f7fc f83d 	bl	8002120 <HAL_GetTick>
 80060a6:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 80060a8:	e008      	b.n	80060bc <HAL_RCC_OscConfig+0x410>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80060aa:	f7fc f839 	bl	8002120 <HAL_GetTick>
 80060ae:	4602      	mov	r2, r0
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	1ad3      	subs	r3, r2, r3
 80060b4:	2b11      	cmp	r3, #17
 80060b6:	d901      	bls.n	80060bc <HAL_RCC_OscConfig+0x410>
        {
          return HAL_TIMEOUT;
 80060b8:	2303      	movs	r3, #3
 80060ba:	e18c      	b.n	80063d6 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() != 0U)
 80060bc:	f7ff fc44 	bl	8005948 <LL_RCC_LSI_IsReady>
 80060c0:	4603      	mov	r3, r0
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d1f1      	bne.n	80060aa <HAL_RCC_OscConfig+0x3fe>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f003 0304 	and.w	r3, r3, #4
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	f000 80d8 	beq.w	8006284 <HAL_RCC_OscConfig+0x5d8>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80060d4:	f7ff fb5a 	bl	800578c <LL_PWR_IsEnabledBkUpAccess>
 80060d8:	4603      	mov	r3, r0
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d113      	bne.n	8006106 <HAL_RCC_OscConfig+0x45a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80060de:	f7ff fa99 	bl	8005614 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80060e2:	f7fc f81d 	bl	8002120 <HAL_GetTick>
 80060e6:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80060e8:	e008      	b.n	80060fc <HAL_RCC_OscConfig+0x450>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060ea:	f7fc f819 	bl	8002120 <HAL_GetTick>
 80060ee:	4602      	mov	r2, r0
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	1ad3      	subs	r3, r2, r3
 80060f4:	2b02      	cmp	r3, #2
 80060f6:	d901      	bls.n	80060fc <HAL_RCC_OscConfig+0x450>
        {
          return HAL_TIMEOUT;
 80060f8:	2303      	movs	r3, #3
 80060fa:	e16c      	b.n	80063d6 <HAL_RCC_OscConfig+0x72a>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80060fc:	f7ff fb46 	bl	800578c <LL_PWR_IsEnabledBkUpAccess>
 8006100:	4603      	mov	r3, r0
 8006102:	2b00      	cmp	r3, #0
 8006104:	d0f1      	beq.n	80060ea <HAL_RCC_OscConfig+0x43e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	68db      	ldr	r3, [r3, #12]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d07b      	beq.n	8006206 <HAL_RCC_OscConfig+0x55a>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	68db      	ldr	r3, [r3, #12]
 8006112:	2b85      	cmp	r3, #133	@ 0x85
 8006114:	d003      	beq.n	800611e <HAL_RCC_OscConfig+0x472>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	68db      	ldr	r3, [r3, #12]
 800611a:	2b05      	cmp	r3, #5
 800611c:	d109      	bne.n	8006132 <HAL_RCC_OscConfig+0x486>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800611e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006122:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006126:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800612a:	f043 0304 	orr.w	r3, r3, #4
 800612e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006132:	f7fb fff5 	bl	8002120 <HAL_GetTick>
 8006136:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006138:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800613c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006140:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006144:	f043 0301 	orr.w	r3, r3, #1
 8006148:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800614c:	e00a      	b.n	8006164 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800614e:	f7fb ffe7 	bl	8002120 <HAL_GetTick>
 8006152:	4602      	mov	r2, r0
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	1ad3      	subs	r3, r2, r3
 8006158:	f241 3288 	movw	r2, #5000	@ 0x1388
 800615c:	4293      	cmp	r3, r2
 800615e:	d901      	bls.n	8006164 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8006160:	2303      	movs	r3, #3
 8006162:	e138      	b.n	80063d6 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() == 0U)
 8006164:	f7ff fbbf 	bl	80058e6 <LL_RCC_LSE_IsReady>
 8006168:	4603      	mov	r3, r0
 800616a:	2b00      	cmp	r3, #0
 800616c:	d0ef      	beq.n	800614e <HAL_RCC_OscConfig+0x4a2>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	68db      	ldr	r3, [r3, #12]
 8006172:	2b81      	cmp	r3, #129	@ 0x81
 8006174:	d003      	beq.n	800617e <HAL_RCC_OscConfig+0x4d2>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	68db      	ldr	r3, [r3, #12]
 800617a:	2b85      	cmp	r3, #133	@ 0x85
 800617c:	d121      	bne.n	80061c2 <HAL_RCC_OscConfig+0x516>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800617e:	f7fb ffcf 	bl	8002120 <HAL_GetTick>
 8006182:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006184:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006188:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800618c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006190:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006194:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006198:	e00a      	b.n	80061b0 <HAL_RCC_OscConfig+0x504>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800619a:	f7fb ffc1 	bl	8002120 <HAL_GetTick>
 800619e:	4602      	mov	r2, r0
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	1ad3      	subs	r3, r2, r3
 80061a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d901      	bls.n	80061b0 <HAL_RCC_OscConfig+0x504>
          {
            return HAL_TIMEOUT;
 80061ac:	2303      	movs	r3, #3
 80061ae:	e112      	b.n	80063d6 <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80061b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80061b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d0ec      	beq.n	800619a <HAL_RCC_OscConfig+0x4ee>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80061c0:	e060      	b.n	8006284 <HAL_RCC_OscConfig+0x5d8>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061c2:	f7fb ffad 	bl	8002120 <HAL_GetTick>
 80061c6:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80061c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80061cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061d0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80061d4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80061d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80061dc:	e00a      	b.n	80061f4 <HAL_RCC_OscConfig+0x548>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061de:	f7fb ff9f 	bl	8002120 <HAL_GetTick>
 80061e2:	4602      	mov	r2, r0
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	1ad3      	subs	r3, r2, r3
 80061e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d901      	bls.n	80061f4 <HAL_RCC_OscConfig+0x548>
          {
            return HAL_TIMEOUT;
 80061f0:	2303      	movs	r3, #3
 80061f2:	e0f0      	b.n	80063d6 <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80061f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80061f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006200:	2b00      	cmp	r3, #0
 8006202:	d1ec      	bne.n	80061de <HAL_RCC_OscConfig+0x532>
 8006204:	e03e      	b.n	8006284 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006206:	f7fb ff8b 	bl	8002120 <HAL_GetTick>
 800620a:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800620c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006210:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006214:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006218:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800621c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006220:	e00a      	b.n	8006238 <HAL_RCC_OscConfig+0x58c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006222:	f7fb ff7d 	bl	8002120 <HAL_GetTick>
 8006226:	4602      	mov	r2, r0
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	1ad3      	subs	r3, r2, r3
 800622c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006230:	4293      	cmp	r3, r2
 8006232:	d901      	bls.n	8006238 <HAL_RCC_OscConfig+0x58c>
        {
          return HAL_TIMEOUT;
 8006234:	2303      	movs	r3, #3
 8006236:	e0ce      	b.n	80063d6 <HAL_RCC_OscConfig+0x72a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006238:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800623c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006240:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006244:	2b00      	cmp	r3, #0
 8006246:	d1ec      	bne.n	8006222 <HAL_RCC_OscConfig+0x576>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006248:	f7fb ff6a 	bl	8002120 <HAL_GetTick>
 800624c:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800624e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006252:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006256:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800625a:	f023 0301 	bic.w	r3, r3, #1
 800625e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8006262:	e00a      	b.n	800627a <HAL_RCC_OscConfig+0x5ce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006264:	f7fb ff5c 	bl	8002120 <HAL_GetTick>
 8006268:	4602      	mov	r2, r0
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	1ad3      	subs	r3, r2, r3
 800626e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006272:	4293      	cmp	r3, r2
 8006274:	d901      	bls.n	800627a <HAL_RCC_OscConfig+0x5ce>
        {
          return HAL_TIMEOUT;
 8006276:	2303      	movs	r3, #3
 8006278:	e0ad      	b.n	80063d6 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() != 0U)
 800627a:	f7ff fb34 	bl	80058e6 <LL_RCC_LSE_IsReady>
 800627e:	4603      	mov	r3, r0
 8006280:	2b00      	cmp	r3, #0
 8006282:	d1ef      	bne.n	8006264 <HAL_RCC_OscConfig+0x5b8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006288:	2b00      	cmp	r3, #0
 800628a:	f000 80a3 	beq.w	80063d4 <HAL_RCC_OscConfig+0x728>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800628e:	69fb      	ldr	r3, [r7, #28]
 8006290:	2b0c      	cmp	r3, #12
 8006292:	d076      	beq.n	8006382 <HAL_RCC_OscConfig+0x6d6>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006298:	2b02      	cmp	r3, #2
 800629a:	d14b      	bne.n	8006334 <HAL_RCC_OscConfig+0x688>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800629c:	f7ff fc75 	bl	8005b8a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062a0:	f7fb ff3e 	bl	8002120 <HAL_GetTick>
 80062a4:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 80062a6:	e008      	b.n	80062ba <HAL_RCC_OscConfig+0x60e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062a8:	f7fb ff3a 	bl	8002120 <HAL_GetTick>
 80062ac:	4602      	mov	r2, r0
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	1ad3      	subs	r3, r2, r3
 80062b2:	2b0a      	cmp	r3, #10
 80062b4:	d901      	bls.n	80062ba <HAL_RCC_OscConfig+0x60e>
          {
            return HAL_TIMEOUT;
 80062b6:	2303      	movs	r3, #3
 80062b8:	e08d      	b.n	80063d6 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 80062ba:	f7ff fc74 	bl	8005ba6 <LL_RCC_PLL_IsReady>
 80062be:	4603      	mov	r3, r0
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d1f1      	bne.n	80062a8 <HAL_RCC_OscConfig+0x5fc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80062c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062c8:	68da      	ldr	r2, [r3, #12]
 80062ca:	4b45      	ldr	r3, [pc, #276]	@ (80063e0 <HAL_RCC_OscConfig+0x734>)
 80062cc:	4013      	ands	r3, r2
 80062ce:	687a      	ldr	r2, [r7, #4]
 80062d0:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80062d2:	687a      	ldr	r2, [r7, #4]
 80062d4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80062d6:	4311      	orrs	r1, r2
 80062d8:	687a      	ldr	r2, [r7, #4]
 80062da:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80062dc:	0212      	lsls	r2, r2, #8
 80062de:	4311      	orrs	r1, r2
 80062e0:	687a      	ldr	r2, [r7, #4]
 80062e2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80062e4:	4311      	orrs	r1, r2
 80062e6:	687a      	ldr	r2, [r7, #4]
 80062e8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80062ea:	4311      	orrs	r1, r2
 80062ec:	687a      	ldr	r2, [r7, #4]
 80062ee:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80062f0:	430a      	orrs	r2, r1
 80062f2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80062f6:	4313      	orrs	r3, r2
 80062f8:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80062fa:	f7ff fc38 	bl	8005b6e <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80062fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006308:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800630c:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800630e:	f7fb ff07 	bl	8002120 <HAL_GetTick>
 8006312:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8006314:	e008      	b.n	8006328 <HAL_RCC_OscConfig+0x67c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006316:	f7fb ff03 	bl	8002120 <HAL_GetTick>
 800631a:	4602      	mov	r2, r0
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	1ad3      	subs	r3, r2, r3
 8006320:	2b0a      	cmp	r3, #10
 8006322:	d901      	bls.n	8006328 <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 8006324:	2303      	movs	r3, #3
 8006326:	e056      	b.n	80063d6 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() == 0U)
 8006328:	f7ff fc3d 	bl	8005ba6 <LL_RCC_PLL_IsReady>
 800632c:	4603      	mov	r3, r0
 800632e:	2b00      	cmp	r3, #0
 8006330:	d0f1      	beq.n	8006316 <HAL_RCC_OscConfig+0x66a>
 8006332:	e04f      	b.n	80063d4 <HAL_RCC_OscConfig+0x728>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006334:	f7ff fc29 	bl	8005b8a <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8006338:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800633c:	68db      	ldr	r3, [r3, #12]
 800633e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006342:	f023 0303 	bic.w	r3, r3, #3
 8006346:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 8006348:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800634c:	68db      	ldr	r3, [r3, #12]
 800634e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006352:	f023 5388 	bic.w	r3, r3, #285212672	@ 0x11000000
 8006356:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800635a:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800635c:	f7fb fee0 	bl	8002120 <HAL_GetTick>
 8006360:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8006362:	e008      	b.n	8006376 <HAL_RCC_OscConfig+0x6ca>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006364:	f7fb fedc 	bl	8002120 <HAL_GetTick>
 8006368:	4602      	mov	r2, r0
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	1ad3      	subs	r3, r2, r3
 800636e:	2b0a      	cmp	r3, #10
 8006370:	d901      	bls.n	8006376 <HAL_RCC_OscConfig+0x6ca>
          {
            return HAL_TIMEOUT;
 8006372:	2303      	movs	r3, #3
 8006374:	e02f      	b.n	80063d6 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 8006376:	f7ff fc16 	bl	8005ba6 <LL_RCC_PLL_IsReady>
 800637a:	4603      	mov	r3, r0
 800637c:	2b00      	cmp	r3, #0
 800637e:	d1f1      	bne.n	8006364 <HAL_RCC_OscConfig+0x6b8>
 8006380:	e028      	b.n	80063d4 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006386:	2b01      	cmp	r3, #1
 8006388:	d101      	bne.n	800638e <HAL_RCC_OscConfig+0x6e2>
      {
        return HAL_ERROR;
 800638a:	2301      	movs	r3, #1
 800638c:	e023      	b.n	80063d6 <HAL_RCC_OscConfig+0x72a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800638e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006392:	68db      	ldr	r3, [r3, #12]
 8006394:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8006396:	69bb      	ldr	r3, [r7, #24]
 8006398:	f003 0203 	and.w	r2, r3, #3
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d115      	bne.n	80063d0 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80063a4:	69bb      	ldr	r3, [r7, #24]
 80063a6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063ae:	429a      	cmp	r2, r3
 80063b0:	d10e      	bne.n	80063d0 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 80063b2:	69bb      	ldr	r3, [r7, #24]
 80063b4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063bc:	021b      	lsls	r3, r3, #8
 80063be:	429a      	cmp	r2, r3
 80063c0:	d106      	bne.n	80063d0 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80063c2:	69bb      	ldr	r3, [r7, #24]
 80063c4:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d001      	beq.n	80063d4 <HAL_RCC_OscConfig+0x728>
        {
          return HAL_ERROR;
 80063d0:	2301      	movs	r3, #1
 80063d2:	e000      	b.n	80063d6 <HAL_RCC_OscConfig+0x72a>
        }
      }
    }
  }
  return HAL_OK;
 80063d4:	2300      	movs	r3, #0
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3720      	adds	r7, #32
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}
 80063de:	bf00      	nop
 80063e0:	11c1808c 	.word	0x11c1808c

080063e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b084      	sub	sp, #16
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
 80063ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d101      	bne.n	80063f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80063f4:	2301      	movs	r3, #1
 80063f6:	e10f      	b.n	8006618 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80063f8:	4b89      	ldr	r3, [pc, #548]	@ (8006620 <HAL_RCC_ClockConfig+0x23c>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f003 0307 	and.w	r3, r3, #7
 8006400:	683a      	ldr	r2, [r7, #0]
 8006402:	429a      	cmp	r2, r3
 8006404:	d91b      	bls.n	800643e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006406:	4b86      	ldr	r3, [pc, #536]	@ (8006620 <HAL_RCC_ClockConfig+0x23c>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f023 0207 	bic.w	r2, r3, #7
 800640e:	4984      	ldr	r1, [pc, #528]	@ (8006620 <HAL_RCC_ClockConfig+0x23c>)
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	4313      	orrs	r3, r2
 8006414:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006416:	f7fb fe83 	bl	8002120 <HAL_GetTick>
 800641a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800641c:	e008      	b.n	8006430 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800641e:	f7fb fe7f 	bl	8002120 <HAL_GetTick>
 8006422:	4602      	mov	r2, r0
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	1ad3      	subs	r3, r2, r3
 8006428:	2b02      	cmp	r3, #2
 800642a:	d901      	bls.n	8006430 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800642c:	2303      	movs	r3, #3
 800642e:	e0f3      	b.n	8006618 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006430:	4b7b      	ldr	r3, [pc, #492]	@ (8006620 <HAL_RCC_ClockConfig+0x23c>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f003 0307 	and.w	r3, r3, #7
 8006438:	683a      	ldr	r2, [r7, #0]
 800643a:	429a      	cmp	r2, r3
 800643c:	d1ef      	bne.n	800641e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f003 0302 	and.w	r3, r3, #2
 8006446:	2b00      	cmp	r3, #0
 8006448:	d016      	beq.n	8006478 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	689b      	ldr	r3, [r3, #8]
 800644e:	4618      	mov	r0, r3
 8006450:	f7ff fb10 	bl	8005a74 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006454:	f7fb fe64 	bl	8002120 <HAL_GetTick>
 8006458:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800645a:	e008      	b.n	800646e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800645c:	f7fb fe60 	bl	8002120 <HAL_GetTick>
 8006460:	4602      	mov	r2, r0
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	1ad3      	subs	r3, r2, r3
 8006466:	2b02      	cmp	r3, #2
 8006468:	d901      	bls.n	800646e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800646a:	2303      	movs	r3, #3
 800646c:	e0d4      	b.n	8006618 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800646e:	f7ff fbd8 	bl	8005c22 <LL_RCC_IsActiveFlag_HPRE>
 8006472:	4603      	mov	r3, r0
 8006474:	2b00      	cmp	r3, #0
 8006476:	d0f1      	beq.n	800645c <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006480:	2b00      	cmp	r3, #0
 8006482:	d016      	beq.n	80064b2 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	695b      	ldr	r3, [r3, #20]
 8006488:	4618      	mov	r0, r3
 800648a:	f7ff fb06 	bl	8005a9a <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800648e:	f7fb fe47 	bl	8002120 <HAL_GetTick>
 8006492:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006494:	e008      	b.n	80064a8 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006496:	f7fb fe43 	bl	8002120 <HAL_GetTick>
 800649a:	4602      	mov	r2, r0
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	1ad3      	subs	r3, r2, r3
 80064a0:	2b02      	cmp	r3, #2
 80064a2:	d901      	bls.n	80064a8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80064a4:	2303      	movs	r3, #3
 80064a6:	e0b7      	b.n	8006618 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80064a8:	f7ff fbcc 	bl	8005c44 <LL_RCC_IsActiveFlag_SHDHPRE>
 80064ac:	4603      	mov	r3, r0
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d0f1      	beq.n	8006496 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f003 0304 	and.w	r3, r3, #4
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d016      	beq.n	80064ec <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	68db      	ldr	r3, [r3, #12]
 80064c2:	4618      	mov	r0, r3
 80064c4:	f7ff faff 	bl	8005ac6 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80064c8:	f7fb fe2a 	bl	8002120 <HAL_GetTick>
 80064cc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80064ce:	e008      	b.n	80064e2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80064d0:	f7fb fe26 	bl	8002120 <HAL_GetTick>
 80064d4:	4602      	mov	r2, r0
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	1ad3      	subs	r3, r2, r3
 80064da:	2b02      	cmp	r3, #2
 80064dc:	d901      	bls.n	80064e2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80064de:	2303      	movs	r3, #3
 80064e0:	e09a      	b.n	8006618 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80064e2:	f7ff fbc1 	bl	8005c68 <LL_RCC_IsActiveFlag_PPRE1>
 80064e6:	4603      	mov	r3, r0
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d0f1      	beq.n	80064d0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f003 0308 	and.w	r3, r3, #8
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d017      	beq.n	8006528 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	691b      	ldr	r3, [r3, #16]
 80064fc:	00db      	lsls	r3, r3, #3
 80064fe:	4618      	mov	r0, r3
 8006500:	f7ff faf4 	bl	8005aec <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006504:	f7fb fe0c 	bl	8002120 <HAL_GetTick>
 8006508:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800650a:	e008      	b.n	800651e <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800650c:	f7fb fe08 	bl	8002120 <HAL_GetTick>
 8006510:	4602      	mov	r2, r0
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	1ad3      	subs	r3, r2, r3
 8006516:	2b02      	cmp	r3, #2
 8006518:	d901      	bls.n	800651e <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 800651a:	2303      	movs	r3, #3
 800651c:	e07c      	b.n	8006618 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800651e:	f7ff fbb4 	bl	8005c8a <LL_RCC_IsActiveFlag_PPRE2>
 8006522:	4603      	mov	r3, r0
 8006524:	2b00      	cmp	r3, #0
 8006526:	d0f1      	beq.n	800650c <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f003 0301 	and.w	r3, r3, #1
 8006530:	2b00      	cmp	r3, #0
 8006532:	d043      	beq.n	80065bc <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	2b02      	cmp	r3, #2
 800653a:	d106      	bne.n	800654a <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800653c:	f7ff f981 	bl	8005842 <LL_RCC_HSE_IsReady>
 8006540:	4603      	mov	r3, r0
 8006542:	2b00      	cmp	r3, #0
 8006544:	d11e      	bne.n	8006584 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006546:	2301      	movs	r3, #1
 8006548:	e066      	b.n	8006618 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	2b03      	cmp	r3, #3
 8006550:	d106      	bne.n	8006560 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8006552:	f7ff fb28 	bl	8005ba6 <LL_RCC_PLL_IsReady>
 8006556:	4603      	mov	r3, r0
 8006558:	2b00      	cmp	r3, #0
 800655a:	d113      	bne.n	8006584 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800655c:	2301      	movs	r3, #1
 800655e:	e05b      	b.n	8006618 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d106      	bne.n	8006576 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8006568:	f7ff fa1b 	bl	80059a2 <LL_RCC_MSI_IsReady>
 800656c:	4603      	mov	r3, r0
 800656e:	2b00      	cmp	r3, #0
 8006570:	d108      	bne.n	8006584 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006572:	2301      	movs	r3, #1
 8006574:	e050      	b.n	8006618 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8006576:	f7ff f991 	bl	800589c <LL_RCC_HSI_IsReady>
 800657a:	4603      	mov	r3, r0
 800657c:	2b00      	cmp	r3, #0
 800657e:	d101      	bne.n	8006584 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006580:	2301      	movs	r3, #1
 8006582:	e049      	b.n	8006618 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	4618      	mov	r0, r3
 800658a:	f7ff fa55 	bl	8005a38 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800658e:	f7fb fdc7 	bl	8002120 <HAL_GetTick>
 8006592:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006594:	e00a      	b.n	80065ac <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006596:	f7fb fdc3 	bl	8002120 <HAL_GetTick>
 800659a:	4602      	mov	r2, r0
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	1ad3      	subs	r3, r2, r3
 80065a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d901      	bls.n	80065ac <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 80065a8:	2303      	movs	r3, #3
 80065aa:	e035      	b.n	8006618 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065ac:	f7ff fa57 	bl	8005a5e <LL_RCC_GetSysClkSource>
 80065b0:	4602      	mov	r2, r0
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	009b      	lsls	r3, r3, #2
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d1ec      	bne.n	8006596 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80065bc:	4b18      	ldr	r3, [pc, #96]	@ (8006620 <HAL_RCC_ClockConfig+0x23c>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f003 0307 	and.w	r3, r3, #7
 80065c4:	683a      	ldr	r2, [r7, #0]
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d21b      	bcs.n	8006602 <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065ca:	4b15      	ldr	r3, [pc, #84]	@ (8006620 <HAL_RCC_ClockConfig+0x23c>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f023 0207 	bic.w	r2, r3, #7
 80065d2:	4913      	ldr	r1, [pc, #76]	@ (8006620 <HAL_RCC_ClockConfig+0x23c>)
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	4313      	orrs	r3, r2
 80065d8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065da:	f7fb fda1 	bl	8002120 <HAL_GetTick>
 80065de:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065e0:	e008      	b.n	80065f4 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80065e2:	f7fb fd9d 	bl	8002120 <HAL_GetTick>
 80065e6:	4602      	mov	r2, r0
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	1ad3      	subs	r3, r2, r3
 80065ec:	2b02      	cmp	r3, #2
 80065ee:	d901      	bls.n	80065f4 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 80065f0:	2303      	movs	r3, #3
 80065f2:	e011      	b.n	8006618 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065f4:	4b0a      	ldr	r3, [pc, #40]	@ (8006620 <HAL_RCC_ClockConfig+0x23c>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f003 0307 	and.w	r3, r3, #7
 80065fc:	683a      	ldr	r2, [r7, #0]
 80065fe:	429a      	cmp	r2, r3
 8006600:	d1ef      	bne.n	80065e2 <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006602:	f000 f8b3 	bl	800676c <HAL_RCC_GetHCLKFreq>
 8006606:	4603      	mov	r3, r0
 8006608:	4a06      	ldr	r2, [pc, #24]	@ (8006624 <HAL_RCC_ClockConfig+0x240>)
 800660a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800660c:	4b06      	ldr	r3, [pc, #24]	@ (8006628 <HAL_RCC_ClockConfig+0x244>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4618      	mov	r0, r3
 8006612:	f7fb fd7b 	bl	800210c <HAL_InitTick>
 8006616:	4603      	mov	r3, r0
}
 8006618:	4618      	mov	r0, r3
 800661a:	3710      	adds	r7, #16
 800661c:	46bd      	mov	sp, r7
 800661e:	bd80      	pop	{r7, pc}
 8006620:	58004000 	.word	0x58004000
 8006624:	20000000 	.word	0x20000000
 8006628:	20000004 	.word	0x20000004

0800662c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800662c:	b590      	push	{r4, r7, lr}
 800662e:	b087      	sub	sp, #28
 8006630:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8006632:	2300      	movs	r3, #0
 8006634:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8006636:	2300      	movs	r3, #0
 8006638:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800663a:	f7ff fa10 	bl	8005a5e <LL_RCC_GetSysClkSource>
 800663e:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006640:	f7ff fae4 	bl	8005c0c <LL_RCC_PLL_GetMainSource>
 8006644:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d005      	beq.n	8006658 <HAL_RCC_GetSysClockFreq+0x2c>
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	2b0c      	cmp	r3, #12
 8006650:	d139      	bne.n	80066c6 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2b01      	cmp	r3, #1
 8006656:	d136      	bne.n	80066c6 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8006658:	f7ff f9b3 	bl	80059c2 <LL_RCC_MSI_IsEnabledRangeSelect>
 800665c:	4603      	mov	r3, r0
 800665e:	2b00      	cmp	r3, #0
 8006660:	d115      	bne.n	800668e <HAL_RCC_GetSysClockFreq+0x62>
 8006662:	f7ff f9ae 	bl	80059c2 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006666:	4603      	mov	r3, r0
 8006668:	2b01      	cmp	r3, #1
 800666a:	d106      	bne.n	800667a <HAL_RCC_GetSysClockFreq+0x4e>
 800666c:	f7ff f9b9 	bl	80059e2 <LL_RCC_MSI_GetRange>
 8006670:	4603      	mov	r3, r0
 8006672:	0a1b      	lsrs	r3, r3, #8
 8006674:	f003 030f 	and.w	r3, r3, #15
 8006678:	e005      	b.n	8006686 <HAL_RCC_GetSysClockFreq+0x5a>
 800667a:	f7ff f9bd 	bl	80059f8 <LL_RCC_MSI_GetRangeAfterStandby>
 800667e:	4603      	mov	r3, r0
 8006680:	0a1b      	lsrs	r3, r3, #8
 8006682:	f003 030f 	and.w	r3, r3, #15
 8006686:	4a36      	ldr	r2, [pc, #216]	@ (8006760 <HAL_RCC_GetSysClockFreq+0x134>)
 8006688:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800668c:	e014      	b.n	80066b8 <HAL_RCC_GetSysClockFreq+0x8c>
 800668e:	f7ff f998 	bl	80059c2 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006692:	4603      	mov	r3, r0
 8006694:	2b01      	cmp	r3, #1
 8006696:	d106      	bne.n	80066a6 <HAL_RCC_GetSysClockFreq+0x7a>
 8006698:	f7ff f9a3 	bl	80059e2 <LL_RCC_MSI_GetRange>
 800669c:	4603      	mov	r3, r0
 800669e:	091b      	lsrs	r3, r3, #4
 80066a0:	f003 030f 	and.w	r3, r3, #15
 80066a4:	e005      	b.n	80066b2 <HAL_RCC_GetSysClockFreq+0x86>
 80066a6:	f7ff f9a7 	bl	80059f8 <LL_RCC_MSI_GetRangeAfterStandby>
 80066aa:	4603      	mov	r3, r0
 80066ac:	091b      	lsrs	r3, r3, #4
 80066ae:	f003 030f 	and.w	r3, r3, #15
 80066b2:	4a2b      	ldr	r2, [pc, #172]	@ (8006760 <HAL_RCC_GetSysClockFreq+0x134>)
 80066b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066b8:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d115      	bne.n	80066ec <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80066c4:	e012      	b.n	80066ec <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	2b04      	cmp	r3, #4
 80066ca:	d102      	bne.n	80066d2 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80066cc:	4b25      	ldr	r3, [pc, #148]	@ (8006764 <HAL_RCC_GetSysClockFreq+0x138>)
 80066ce:	617b      	str	r3, [r7, #20]
 80066d0:	e00c      	b.n	80066ec <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	2b08      	cmp	r3, #8
 80066d6:	d109      	bne.n	80066ec <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80066d8:	f7ff f886 	bl	80057e8 <LL_RCC_HSE_IsEnabledDiv2>
 80066dc:	4603      	mov	r3, r0
 80066de:	2b01      	cmp	r3, #1
 80066e0:	d102      	bne.n	80066e8 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80066e2:	4b20      	ldr	r3, [pc, #128]	@ (8006764 <HAL_RCC_GetSysClockFreq+0x138>)
 80066e4:	617b      	str	r3, [r7, #20]
 80066e6:	e001      	b.n	80066ec <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80066e8:	4b1f      	ldr	r3, [pc, #124]	@ (8006768 <HAL_RCC_GetSysClockFreq+0x13c>)
 80066ea:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80066ec:	f7ff f9b7 	bl	8005a5e <LL_RCC_GetSysClkSource>
 80066f0:	4603      	mov	r3, r0
 80066f2:	2b0c      	cmp	r3, #12
 80066f4:	d12f      	bne.n	8006756 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80066f6:	f7ff fa89 	bl	8005c0c <LL_RCC_PLL_GetMainSource>
 80066fa:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2b02      	cmp	r3, #2
 8006700:	d003      	beq.n	800670a <HAL_RCC_GetSysClockFreq+0xde>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2b03      	cmp	r3, #3
 8006706:	d003      	beq.n	8006710 <HAL_RCC_GetSysClockFreq+0xe4>
 8006708:	e00d      	b.n	8006726 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800670a:	4b16      	ldr	r3, [pc, #88]	@ (8006764 <HAL_RCC_GetSysClockFreq+0x138>)
 800670c:	60fb      	str	r3, [r7, #12]
        break;
 800670e:	e00d      	b.n	800672c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006710:	f7ff f86a 	bl	80057e8 <LL_RCC_HSE_IsEnabledDiv2>
 8006714:	4603      	mov	r3, r0
 8006716:	2b01      	cmp	r3, #1
 8006718:	d102      	bne.n	8006720 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800671a:	4b12      	ldr	r3, [pc, #72]	@ (8006764 <HAL_RCC_GetSysClockFreq+0x138>)
 800671c:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800671e:	e005      	b.n	800672c <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8006720:	4b11      	ldr	r3, [pc, #68]	@ (8006768 <HAL_RCC_GetSysClockFreq+0x13c>)
 8006722:	60fb      	str	r3, [r7, #12]
        break;
 8006724:	e002      	b.n	800672c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	60fb      	str	r3, [r7, #12]
        break;
 800672a:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800672c:	f7ff fa4c 	bl	8005bc8 <LL_RCC_PLL_GetN>
 8006730:	4602      	mov	r2, r0
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	fb03 f402 	mul.w	r4, r3, r2
 8006738:	f7ff fa5d 	bl	8005bf6 <LL_RCC_PLL_GetDivider>
 800673c:	4603      	mov	r3, r0
 800673e:	091b      	lsrs	r3, r3, #4
 8006740:	3301      	adds	r3, #1
 8006742:	fbb4 f4f3 	udiv	r4, r4, r3
 8006746:	f7ff fa4b 	bl	8005be0 <LL_RCC_PLL_GetR>
 800674a:	4603      	mov	r3, r0
 800674c:	0f5b      	lsrs	r3, r3, #29
 800674e:	3301      	adds	r3, #1
 8006750:	fbb4 f3f3 	udiv	r3, r4, r3
 8006754:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8006756:	697b      	ldr	r3, [r7, #20]
}
 8006758:	4618      	mov	r0, r3
 800675a:	371c      	adds	r7, #28
 800675c:	46bd      	mov	sp, r7
 800675e:	bd90      	pop	{r4, r7, pc}
 8006760:	0801f0f4 	.word	0x0801f0f4
 8006764:	00f42400 	.word	0x00f42400
 8006768:	01e84800 	.word	0x01e84800

0800676c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800676c:	b598      	push	{r3, r4, r7, lr}
 800676e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8006770:	f7ff ff5c 	bl	800662c <HAL_RCC_GetSysClockFreq>
 8006774:	4604      	mov	r4, r0
 8006776:	f7ff f9cc 	bl	8005b12 <LL_RCC_GetAHBPrescaler>
 800677a:	4603      	mov	r3, r0
 800677c:	091b      	lsrs	r3, r3, #4
 800677e:	f003 030f 	and.w	r3, r3, #15
 8006782:	4a03      	ldr	r2, [pc, #12]	@ (8006790 <HAL_RCC_GetHCLKFreq+0x24>)
 8006784:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006788:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800678c:	4618      	mov	r0, r3
 800678e:	bd98      	pop	{r3, r4, r7, pc}
 8006790:	0801f094 	.word	0x0801f094

08006794 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006794:	b598      	push	{r3, r4, r7, lr}
 8006796:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006798:	f7ff ffe8 	bl	800676c <HAL_RCC_GetHCLKFreq>
 800679c:	4604      	mov	r4, r0
 800679e:	f7ff f9d0 	bl	8005b42 <LL_RCC_GetAPB1Prescaler>
 80067a2:	4603      	mov	r3, r0
 80067a4:	0a1b      	lsrs	r3, r3, #8
 80067a6:	4a03      	ldr	r2, [pc, #12]	@ (80067b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80067a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067ac:	fa24 f303 	lsr.w	r3, r4, r3
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	bd98      	pop	{r3, r4, r7, pc}
 80067b4:	0801f0d4 	.word	0x0801f0d4

080067b8 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80067b8:	b598      	push	{r3, r4, r7, lr}
 80067ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80067bc:	f7ff ffd6 	bl	800676c <HAL_RCC_GetHCLKFreq>
 80067c0:	4604      	mov	r4, r0
 80067c2:	f7ff f9c9 	bl	8005b58 <LL_RCC_GetAPB2Prescaler>
 80067c6:	4603      	mov	r3, r0
 80067c8:	0adb      	lsrs	r3, r3, #11
 80067ca:	4a03      	ldr	r2, [pc, #12]	@ (80067d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80067cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067d0:	fa24 f303 	lsr.w	r3, r4, r3
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	bd98      	pop	{r3, r4, r7, pc}
 80067d8:	0801f0d4 	.word	0x0801f0d4

080067dc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80067dc:	b590      	push	{r4, r7, lr}
 80067de:	b085      	sub	sp, #20
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	091b      	lsrs	r3, r3, #4
 80067e8:	f003 030f 	and.w	r3, r3, #15
 80067ec:	4a10      	ldr	r2, [pc, #64]	@ (8006830 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 80067ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067f2:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80067f4:	f7ff f998 	bl	8005b28 <LL_RCC_GetAHB3Prescaler>
 80067f8:	4603      	mov	r3, r0
 80067fa:	091b      	lsrs	r3, r3, #4
 80067fc:	f003 030f 	and.w	r3, r3, #15
 8006800:	4a0c      	ldr	r2, [pc, #48]	@ (8006834 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8006802:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006806:	68fa      	ldr	r2, [r7, #12]
 8006808:	fbb2 f3f3 	udiv	r3, r2, r3
 800680c:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	4a09      	ldr	r2, [pc, #36]	@ (8006838 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8006812:	fba2 2303 	umull	r2, r3, r2, r3
 8006816:	0c9c      	lsrs	r4, r3, #18
 8006818:	f7fe ff3e 	bl	8005698 <HAL_PWREx_GetVoltageRange>
 800681c:	4603      	mov	r3, r0
 800681e:	4619      	mov	r1, r3
 8006820:	4620      	mov	r0, r4
 8006822:	f000 f80b 	bl	800683c <RCC_SetFlashLatency>
 8006826:	4603      	mov	r3, r0
}
 8006828:	4618      	mov	r0, r3
 800682a:	3714      	adds	r7, #20
 800682c:	46bd      	mov	sp, r7
 800682e:	bd90      	pop	{r4, r7, pc}
 8006830:	0801f0f4 	.word	0x0801f0f4
 8006834:	0801f094 	.word	0x0801f094
 8006838:	431bde83 	.word	0x431bde83

0800683c <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b08e      	sub	sp, #56	@ 0x38
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8006846:	4a3a      	ldr	r2, [pc, #232]	@ (8006930 <RCC_SetFlashLatency+0xf4>)
 8006848:	f107 0320 	add.w	r3, r7, #32
 800684c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006850:	6018      	str	r0, [r3, #0]
 8006852:	3304      	adds	r3, #4
 8006854:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8006856:	4a37      	ldr	r2, [pc, #220]	@ (8006934 <RCC_SetFlashLatency+0xf8>)
 8006858:	f107 0318 	add.w	r3, r7, #24
 800685c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006860:	6018      	str	r0, [r3, #0]
 8006862:	3304      	adds	r3, #4
 8006864:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8006866:	4a34      	ldr	r2, [pc, #208]	@ (8006938 <RCC_SetFlashLatency+0xfc>)
 8006868:	f107 030c 	add.w	r3, r7, #12
 800686c:	ca07      	ldmia	r2, {r0, r1, r2}
 800686e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8006872:	2300      	movs	r3, #0
 8006874:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800687c:	d11b      	bne.n	80068b6 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800687e:	2300      	movs	r3, #0
 8006880:	633b      	str	r3, [r7, #48]	@ 0x30
 8006882:	e014      	b.n	80068ae <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8006884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006886:	005b      	lsls	r3, r3, #1
 8006888:	3338      	adds	r3, #56	@ 0x38
 800688a:	443b      	add	r3, r7
 800688c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8006890:	461a      	mov	r2, r3
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	4293      	cmp	r3, r2
 8006896:	d807      	bhi.n	80068a8 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800689a:	009b      	lsls	r3, r3, #2
 800689c:	3338      	adds	r3, #56	@ 0x38
 800689e:	443b      	add	r3, r7
 80068a0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80068a4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80068a6:	e021      	b.n	80068ec <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80068a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068aa:	3301      	adds	r3, #1
 80068ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80068ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068b0:	2b02      	cmp	r3, #2
 80068b2:	d9e7      	bls.n	8006884 <RCC_SetFlashLatency+0x48>
 80068b4:	e01a      	b.n	80068ec <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80068b6:	2300      	movs	r3, #0
 80068b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80068ba:	e014      	b.n	80068e6 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80068bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068be:	005b      	lsls	r3, r3, #1
 80068c0:	3338      	adds	r3, #56	@ 0x38
 80068c2:	443b      	add	r3, r7
 80068c4:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80068c8:	461a      	mov	r2, r3
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d807      	bhi.n	80068e0 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80068d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068d2:	009b      	lsls	r3, r3, #2
 80068d4:	3338      	adds	r3, #56	@ 0x38
 80068d6:	443b      	add	r3, r7
 80068d8:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80068dc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80068de:	e005      	b.n	80068ec <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80068e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068e2:	3301      	adds	r3, #1
 80068e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80068e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068e8:	2b02      	cmp	r3, #2
 80068ea:	d9e7      	bls.n	80068bc <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80068ec:	4b13      	ldr	r3, [pc, #76]	@ (800693c <RCC_SetFlashLatency+0x100>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f023 0207 	bic.w	r2, r3, #7
 80068f4:	4911      	ldr	r1, [pc, #68]	@ (800693c <RCC_SetFlashLatency+0x100>)
 80068f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068f8:	4313      	orrs	r3, r2
 80068fa:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80068fc:	f7fb fc10 	bl	8002120 <HAL_GetTick>
 8006900:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006902:	e008      	b.n	8006916 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006904:	f7fb fc0c 	bl	8002120 <HAL_GetTick>
 8006908:	4602      	mov	r2, r0
 800690a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800690c:	1ad3      	subs	r3, r2, r3
 800690e:	2b02      	cmp	r3, #2
 8006910:	d901      	bls.n	8006916 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8006912:	2303      	movs	r3, #3
 8006914:	e007      	b.n	8006926 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006916:	4b09      	ldr	r3, [pc, #36]	@ (800693c <RCC_SetFlashLatency+0x100>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f003 0307 	and.w	r3, r3, #7
 800691e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006920:	429a      	cmp	r2, r3
 8006922:	d1ef      	bne.n	8006904 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8006924:	2300      	movs	r3, #0
}
 8006926:	4618      	mov	r0, r3
 8006928:	3738      	adds	r7, #56	@ 0x38
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}
 800692e:	bf00      	nop
 8006930:	0801e6e0 	.word	0x0801e6e0
 8006934:	0801e6e8 	.word	0x0801e6e8
 8006938:	0801e6f0 	.word	0x0801e6f0
 800693c:	58004000 	.word	0x58004000

08006940 <LL_RCC_LSE_IsReady>:
{
 8006940:	b480      	push	{r7}
 8006942:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006944:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006948:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800694c:	f003 0302 	and.w	r3, r3, #2
 8006950:	2b02      	cmp	r3, #2
 8006952:	d101      	bne.n	8006958 <LL_RCC_LSE_IsReady+0x18>
 8006954:	2301      	movs	r3, #1
 8006956:	e000      	b.n	800695a <LL_RCC_LSE_IsReady+0x1a>
 8006958:	2300      	movs	r3, #0
}
 800695a:	4618      	mov	r0, r3
 800695c:	46bd      	mov	sp, r7
 800695e:	bc80      	pop	{r7}
 8006960:	4770      	bx	lr

08006962 <LL_RCC_SetUSARTClockSource>:
{
 8006962:	b480      	push	{r7}
 8006964:	b083      	sub	sp, #12
 8006966:	af00      	add	r7, sp, #0
 8006968:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 800696a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800696e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	0c1b      	lsrs	r3, r3, #16
 8006976:	43db      	mvns	r3, r3
 8006978:	401a      	ands	r2, r3
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	b29b      	uxth	r3, r3
 800697e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006982:	4313      	orrs	r3, r2
 8006984:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006988:	bf00      	nop
 800698a:	370c      	adds	r7, #12
 800698c:	46bd      	mov	sp, r7
 800698e:	bc80      	pop	{r7}
 8006990:	4770      	bx	lr

08006992 <LL_RCC_SetI2SClockSource>:
{
 8006992:	b480      	push	{r7}
 8006994:	b083      	sub	sp, #12
 8006996:	af00      	add	r7, sp, #0
 8006998:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 800699a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800699e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069a2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80069a6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	4313      	orrs	r3, r2
 80069ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80069b2:	bf00      	nop
 80069b4:	370c      	adds	r7, #12
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bc80      	pop	{r7}
 80069ba:	4770      	bx	lr

080069bc <LL_RCC_SetLPUARTClockSource>:
{
 80069bc:	b480      	push	{r7}
 80069be:	b083      	sub	sp, #12
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80069c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069cc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80069d0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	4313      	orrs	r3, r2
 80069d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80069dc:	bf00      	nop
 80069de:	370c      	adds	r7, #12
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bc80      	pop	{r7}
 80069e4:	4770      	bx	lr

080069e6 <LL_RCC_SetI2CClockSource>:
{
 80069e6:	b480      	push	{r7}
 80069e8:	b083      	sub	sp, #12
 80069ea:	af00      	add	r7, sp, #0
 80069ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80069ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069f2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	091b      	lsrs	r3, r3, #4
 80069fa:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80069fe:	43db      	mvns	r3, r3
 8006a00:	401a      	ands	r2, r3
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	011b      	lsls	r3, r3, #4
 8006a06:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8006a0a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006a14:	bf00      	nop
 8006a16:	370c      	adds	r7, #12
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bc80      	pop	{r7}
 8006a1c:	4770      	bx	lr

08006a1e <LL_RCC_SetLPTIMClockSource>:
{
 8006a1e:	b480      	push	{r7}
 8006a20:	b083      	sub	sp, #12
 8006a22:	af00      	add	r7, sp, #0
 8006a24:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8006a26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a2a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	0c1b      	lsrs	r3, r3, #16
 8006a32:	041b      	lsls	r3, r3, #16
 8006a34:	43db      	mvns	r3, r3
 8006a36:	401a      	ands	r2, r3
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	041b      	lsls	r3, r3, #16
 8006a3c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006a40:	4313      	orrs	r3, r2
 8006a42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006a46:	bf00      	nop
 8006a48:	370c      	adds	r7, #12
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bc80      	pop	{r7}
 8006a4e:	4770      	bx	lr

08006a50 <LL_RCC_SetRNGClockSource>:
{
 8006a50:	b480      	push	{r7}
 8006a52:	b083      	sub	sp, #12
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8006a58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a60:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8006a64:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006a70:	bf00      	nop
 8006a72:	370c      	adds	r7, #12
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bc80      	pop	{r7}
 8006a78:	4770      	bx	lr

08006a7a <LL_RCC_SetADCClockSource>:
{
 8006a7a:	b480      	push	{r7}
 8006a7c:	b083      	sub	sp, #12
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006a82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a8a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006a8e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	4313      	orrs	r3, r2
 8006a96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006a9a:	bf00      	nop
 8006a9c:	370c      	adds	r7, #12
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bc80      	pop	{r7}
 8006aa2:	4770      	bx	lr

08006aa4 <LL_RCC_SetRTCClockSource>:
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b083      	sub	sp, #12
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8006aac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ab4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006ab8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8006ac4:	bf00      	nop
 8006ac6:	370c      	adds	r7, #12
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bc80      	pop	{r7}
 8006acc:	4770      	bx	lr

08006ace <LL_RCC_GetRTCClockSource>:
{
 8006ace:	b480      	push	{r7}
 8006ad0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006ad2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ada:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bc80      	pop	{r7}
 8006ae4:	4770      	bx	lr

08006ae6 <LL_RCC_ForceBackupDomainReset>:
{
 8006ae6:	b480      	push	{r7}
 8006ae8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006aea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006af2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006af6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006afa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006afe:	bf00      	nop
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bc80      	pop	{r7}
 8006b04:	4770      	bx	lr

08006b06 <LL_RCC_ReleaseBackupDomainReset>:
{
 8006b06:	b480      	push	{r7}
 8006b08:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006b0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b12:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006b16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b1a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006b1e:	bf00      	nop
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bc80      	pop	{r7}
 8006b24:	4770      	bx	lr
	...

08006b28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b086      	sub	sp, #24
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8006b30:	2300      	movs	r3, #0
 8006b32:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8006b34:	2300      	movs	r3, #0
 8006b36:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8006b38:	2300      	movs	r3, #0
 8006b3a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d058      	beq.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8006b48:	f7fe fd64 	bl	8005614 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006b4c:	f7fb fae8 	bl	8002120 <HAL_GetTick>
 8006b50:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8006b52:	e009      	b.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b54:	f7fb fae4 	bl	8002120 <HAL_GetTick>
 8006b58:	4602      	mov	r2, r0
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	1ad3      	subs	r3, r2, r3
 8006b5e:	2b02      	cmp	r3, #2
 8006b60:	d902      	bls.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8006b62:	2303      	movs	r3, #3
 8006b64:	74fb      	strb	r3, [r7, #19]
        break;
 8006b66:	e006      	b.n	8006b76 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8006b68:	4b7b      	ldr	r3, [pc, #492]	@ (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b74:	d1ee      	bne.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8006b76:	7cfb      	ldrb	r3, [r7, #19]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d13c      	bne.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8006b7c:	f7ff ffa7 	bl	8006ace <LL_RCC_GetRTCClockSource>
 8006b80:	4602      	mov	r2, r0
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b86:	429a      	cmp	r2, r3
 8006b88:	d00f      	beq.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006b8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b96:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006b98:	f7ff ffa5 	bl	8006ae6 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006b9c:	f7ff ffb3 	bl	8006b06 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006ba0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	f003 0302 	and.w	r3, r3, #2
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d014      	beq.n	8006bde <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bb4:	f7fb fab4 	bl	8002120 <HAL_GetTick>
 8006bb8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8006bba:	e00b      	b.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006bbc:	f7fb fab0 	bl	8002120 <HAL_GetTick>
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	1ad3      	subs	r3, r2, r3
 8006bc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d902      	bls.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8006bce:	2303      	movs	r3, #3
 8006bd0:	74fb      	strb	r3, [r7, #19]
            break;
 8006bd2:	e004      	b.n	8006bde <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8006bd4:	f7ff feb4 	bl	8006940 <LL_RCC_LSE_IsReady>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	2b01      	cmp	r3, #1
 8006bdc:	d1ee      	bne.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8006bde:	7cfb      	ldrb	r3, [r7, #19]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d105      	bne.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006be8:	4618      	mov	r0, r3
 8006bea:	f7ff ff5b 	bl	8006aa4 <LL_RCC_SetRTCClockSource>
 8006bee:	e004      	b.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006bf0:	7cfb      	ldrb	r3, [r7, #19]
 8006bf2:	74bb      	strb	r3, [r7, #18]
 8006bf4:	e001      	b.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bf6:	7cfb      	ldrb	r3, [r7, #19]
 8006bf8:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f003 0301 	and.w	r3, r3, #1
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d004      	beq.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f7ff fea9 	bl	8006962 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f003 0302 	and.w	r3, r3, #2
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d004      	beq.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	689b      	ldr	r3, [r3, #8]
 8006c20:	4618      	mov	r0, r3
 8006c22:	f7ff fe9e 	bl	8006962 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f003 0320 	and.w	r3, r3, #32
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d004      	beq.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	691b      	ldr	r3, [r3, #16]
 8006c36:	4618      	mov	r0, r3
 8006c38:	f7ff fec0 	bl	80069bc <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d004      	beq.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6a1b      	ldr	r3, [r3, #32]
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f7ff fee6 	bl	8006a1e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d004      	beq.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c62:	4618      	mov	r0, r3
 8006c64:	f7ff fedb 	bl	8006a1e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d004      	beq.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f7ff fed0 	bl	8006a1e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d004      	beq.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	695b      	ldr	r3, [r3, #20]
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f7ff fea9 	bl	80069e6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d004      	beq.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	699b      	ldr	r3, [r3, #24]
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f7ff fe9e 	bl	80069e6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d004      	beq.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	69db      	ldr	r3, [r3, #28]
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f7ff fe93 	bl	80069e6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f003 0310 	and.w	r3, r3, #16
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d011      	beq.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	68db      	ldr	r3, [r3, #12]
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	f7ff fe5e 	bl	8006992 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	68db      	ldr	r3, [r3, #12]
 8006cda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006cde:	d107      	bne.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8006ce0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ce4:	68db      	ldr	r3, [r3, #12]
 8006ce6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006cea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006cee:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d010      	beq.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d00:	4618      	mov	r0, r3
 8006d02:	f7ff fea5 	bl	8006a50 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d107      	bne.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006d0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d12:	68db      	ldr	r3, [r3, #12]
 8006d14:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006d18:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006d1c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d011      	beq.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f7ff fea3 	bl	8006a7a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d3c:	d107      	bne.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006d3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d42:	68db      	ldr	r3, [r3, #12]
 8006d44:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006d48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d4c:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8006d4e:	7cbb      	ldrb	r3, [r7, #18]
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	3718      	adds	r7, #24
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}
 8006d58:	58000400 	.word	0x58000400

08006d5c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b084      	sub	sp, #16
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006d64:	2301      	movs	r3, #1
 8006d66:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d068      	beq.n	8006e40 <HAL_RTC_Init+0xe4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006d74:	b2db      	uxtb	r3, r3
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d106      	bne.n	8006d88 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f7fa ff0c 	bl	8001ba0 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2202      	movs	r2, #2
 8006d8c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006d90:	4b2e      	ldr	r3, [pc, #184]	@ (8006e4c <HAL_RTC_Init+0xf0>)
 8006d92:	22ca      	movs	r2, #202	@ 0xca
 8006d94:	625a      	str	r2, [r3, #36]	@ 0x24
 8006d96:	4b2d      	ldr	r3, [pc, #180]	@ (8006e4c <HAL_RTC_Init+0xf0>)
 8006d98:	2253      	movs	r2, #83	@ 0x53
 8006d9a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f000 fa0f 	bl	80071c0 <RTC_EnterInitMode>
 8006da2:	4603      	mov	r3, r0
 8006da4:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8006da6:	7bfb      	ldrb	r3, [r7, #15]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d13f      	bne.n	8006e2c <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8006dac:	4b27      	ldr	r3, [pc, #156]	@ (8006e4c <HAL_RTC_Init+0xf0>)
 8006dae:	699b      	ldr	r3, [r3, #24]
 8006db0:	4a26      	ldr	r2, [pc, #152]	@ (8006e4c <HAL_RTC_Init+0xf0>)
 8006db2:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 8006db6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006dba:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8006dbc:	4b23      	ldr	r3, [pc, #140]	@ (8006e4c <HAL_RTC_Init+0xf0>)
 8006dbe:	699a      	ldr	r2, [r3, #24]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6859      	ldr	r1, [r3, #4]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	691b      	ldr	r3, [r3, #16]
 8006dc8:	4319      	orrs	r1, r3
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	699b      	ldr	r3, [r3, #24]
 8006dce:	430b      	orrs	r3, r1
 8006dd0:	491e      	ldr	r1, [pc, #120]	@ (8006e4c <HAL_RTC_Init+0xf0>)
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	68da      	ldr	r2, [r3, #12]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	041b      	lsls	r3, r3, #16
 8006de0:	491a      	ldr	r1, [pc, #104]	@ (8006e4c <HAL_RTC_Init+0xf0>)
 8006de2:	4313      	orrs	r3, r2
 8006de4:	610b      	str	r3, [r1, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8006de6:	4b19      	ldr	r3, [pc, #100]	@ (8006e4c <HAL_RTC_Init+0xf0>)
 8006de8:	68db      	ldr	r3, [r3, #12]
 8006dea:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006df6:	430b      	orrs	r3, r1
 8006df8:	4914      	ldr	r1, [pc, #80]	@ (8006e4c <HAL_RTC_Init+0xf0>)
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	60cb      	str	r3, [r1, #12]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f000 fa12 	bl	8007228 <RTC_ExitInitMode>
 8006e04:	4603      	mov	r3, r0
 8006e06:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8006e08:	7bfb      	ldrb	r3, [r7, #15]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d10e      	bne.n	8006e2c <HAL_RTC_Init+0xd0>
      {
        MODIFY_REG(RTC->CR, \
 8006e0e:	4b0f      	ldr	r3, [pc, #60]	@ (8006e4c <HAL_RTC_Init+0xf0>)
 8006e10:	699b      	ldr	r3, [r3, #24]
 8006e12:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6a19      	ldr	r1, [r3, #32]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	69db      	ldr	r3, [r3, #28]
 8006e1e:	4319      	orrs	r1, r3
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	695b      	ldr	r3, [r3, #20]
 8006e24:	430b      	orrs	r3, r1
 8006e26:	4909      	ldr	r1, [pc, #36]	@ (8006e4c <HAL_RTC_Init+0xf0>)
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e2c:	4b07      	ldr	r3, [pc, #28]	@ (8006e4c <HAL_RTC_Init+0xf0>)
 8006e2e:	22ff      	movs	r2, #255	@ 0xff
 8006e30:	625a      	str	r2, [r3, #36]	@ 0x24

    if (status == HAL_OK)
 8006e32:	7bfb      	ldrb	r3, [r7, #15]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d103      	bne.n	8006e40 <HAL_RTC_Init+0xe4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 8006e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3710      	adds	r7, #16
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}
 8006e4a:	bf00      	nop
 8006e4c:	40002800 	.word	0x40002800

08006e50 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006e50:	b590      	push	{r4, r7, lr}
 8006e52:	b087      	sub	sp, #28
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	60f8      	str	r0, [r7, #12]
 8006e58:	60b9      	str	r1, [r7, #8]
 8006e5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006e66:	2b01      	cmp	r3, #1
 8006e68:	d101      	bne.n	8006e6e <HAL_RTC_SetAlarm_IT+0x1e>
 8006e6a:	2302      	movs	r3, #2
 8006e6c:	e0f3      	b.n	8007056 <HAL_RTC_SetAlarm_IT+0x206>
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2201      	movs	r2, #1
 8006e72:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2202      	movs	r2, #2
 8006e7a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8006e7e:	4b78      	ldr	r3, [pc, #480]	@ (8007060 <HAL_RTC_SetAlarm_IT+0x210>)
 8006e80:	68db      	ldr	r3, [r3, #12]
 8006e82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e86:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e8e:	d06a      	beq.n	8006f66 <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d13a      	bne.n	8006f0c <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006e96:	4b72      	ldr	r3, [pc, #456]	@ (8007060 <HAL_RTC_SetAlarm_IT+0x210>)
 8006e98:	699b      	ldr	r3, [r3, #24]
 8006e9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d102      	bne.n	8006ea8 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	695b      	ldr	r3, [r3, #20]
 8006eac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	781b      	ldrb	r3, [r3, #0]
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f000 f9f5 	bl	80072a4 <RTC_ByteToBcd2>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	785b      	ldrb	r3, [r3, #1]
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f000 f9ee 	bl	80072a4 <RTC_ByteToBcd2>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006ecc:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	789b      	ldrb	r3, [r3, #2]
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f000 f9e6 	bl	80072a4 <RTC_ByteToBcd2>
 8006ed8:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006eda:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	78db      	ldrb	r3, [r3, #3]
 8006ee2:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006ee4:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006eee:	4618      	mov	r0, r3
 8006ef0:	f000 f9d8 	bl	80072a4 <RTC_ByteToBcd2>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006ef8:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006f00:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006f06:	4313      	orrs	r3, r2
 8006f08:	617b      	str	r3, [r7, #20]
 8006f0a:	e02c      	b.n	8006f66 <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	695b      	ldr	r3, [r3, #20]
 8006f10:	f1b3 3f80 	cmp.w	r3, #2155905152	@ 0x80808080
 8006f14:	d00d      	beq.n	8006f32 <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	695b      	ldr	r3, [r3, #20]
 8006f1a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006f1e:	d008      	beq.n	8006f32 <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006f20:	4b4f      	ldr	r3, [pc, #316]	@ (8007060 <HAL_RTC_SetAlarm_IT+0x210>)
 8006f22:	699b      	ldr	r3, [r3, #24]
 8006f24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d102      	bne.n	8006f32 <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	781b      	ldrb	r3, [r3, #0]
 8006f36:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	785b      	ldrb	r3, [r3, #1]
 8006f3c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006f3e:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006f40:	68ba      	ldr	r2, [r7, #8]
 8006f42:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006f44:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	78db      	ldrb	r3, [r3, #3]
 8006f4a:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006f4c:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006f54:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006f56:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006f5c:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006f62:	4313      	orrs	r3, r2
 8006f64:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006f66:	4b3e      	ldr	r3, [pc, #248]	@ (8007060 <HAL_RTC_SetAlarm_IT+0x210>)
 8006f68:	22ca      	movs	r2, #202	@ 0xca
 8006f6a:	625a      	str	r2, [r3, #36]	@ 0x24
 8006f6c:	4b3c      	ldr	r3, [pc, #240]	@ (8007060 <HAL_RTC_SetAlarm_IT+0x210>)
 8006f6e:	2253      	movs	r2, #83	@ 0x53
 8006f70:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f7a:	d12c      	bne.n	8006fd6 <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006f7c:	4b38      	ldr	r3, [pc, #224]	@ (8007060 <HAL_RTC_SetAlarm_IT+0x210>)
 8006f7e:	699b      	ldr	r3, [r3, #24]
 8006f80:	4a37      	ldr	r2, [pc, #220]	@ (8007060 <HAL_RTC_SetAlarm_IT+0x210>)
 8006f82:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8006f86:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006f88:	4b35      	ldr	r3, [pc, #212]	@ (8007060 <HAL_RTC_SetAlarm_IT+0x210>)
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f94:	d107      	bne.n	8006fa6 <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	699a      	ldr	r2, [r3, #24]
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	69db      	ldr	r3, [r3, #28]
 8006f9e:	4930      	ldr	r1, [pc, #192]	@ (8007060 <HAL_RTC_SetAlarm_IT+0x210>)
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	644b      	str	r3, [r1, #68]	@ 0x44
 8006fa4:	e006      	b.n	8006fb4 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8006fa6:	4a2e      	ldr	r2, [pc, #184]	@ (8007060 <HAL_RTC_SetAlarm_IT+0x210>)
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	6413      	str	r3, [r2, #64]	@ 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8006fac:	4a2c      	ldr	r2, [pc, #176]	@ (8007060 <HAL_RTC_SetAlarm_IT+0x210>)
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	699b      	ldr	r3, [r3, #24]
 8006fb2:	6453      	str	r3, [r2, #68]	@ 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8006fb4:	4a2a      	ldr	r2, [pc, #168]	@ (8007060 <HAL_RTC_SetAlarm_IT+0x210>)
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	685b      	ldr	r3, [r3, #4]
 8006fba:	6713      	str	r3, [r2, #112]	@ 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fc0:	f043 0201 	orr.w	r2, r3, #1
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006fc8:	4b25      	ldr	r3, [pc, #148]	@ (8007060 <HAL_RTC_SetAlarm_IT+0x210>)
 8006fca:	699b      	ldr	r3, [r3, #24]
 8006fcc:	4a24      	ldr	r2, [pc, #144]	@ (8007060 <HAL_RTC_SetAlarm_IT+0x210>)
 8006fce:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
 8006fd2:	6193      	str	r3, [r2, #24]
 8006fd4:	e02b      	b.n	800702e <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006fd6:	4b22      	ldr	r3, [pc, #136]	@ (8007060 <HAL_RTC_SetAlarm_IT+0x210>)
 8006fd8:	699b      	ldr	r3, [r3, #24]
 8006fda:	4a21      	ldr	r2, [pc, #132]	@ (8007060 <HAL_RTC_SetAlarm_IT+0x210>)
 8006fdc:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 8006fe0:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006fe2:	4b1f      	ldr	r3, [pc, #124]	@ (8007060 <HAL_RTC_SetAlarm_IT+0x210>)
 8006fe4:	2202      	movs	r2, #2
 8006fe6:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006fee:	d107      	bne.n	8007000 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	699a      	ldr	r2, [r3, #24]
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	69db      	ldr	r3, [r3, #28]
 8006ff8:	4919      	ldr	r1, [pc, #100]	@ (8007060 <HAL_RTC_SetAlarm_IT+0x210>)
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8006ffe:	e006      	b.n	800700e <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8007000:	4a17      	ldr	r2, [pc, #92]	@ (8007060 <HAL_RTC_SetAlarm_IT+0x210>)
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	6493      	str	r3, [r2, #72]	@ 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8007006:	4a16      	ldr	r2, [pc, #88]	@ (8007060 <HAL_RTC_SetAlarm_IT+0x210>)
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	699b      	ldr	r3, [r3, #24]
 800700c:	64d3      	str	r3, [r2, #76]	@ 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 800700e:	4a14      	ldr	r2, [pc, #80]	@ (8007060 <HAL_RTC_SetAlarm_IT+0x210>)
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	6753      	str	r3, [r2, #116]	@ 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800701a:	f043 0202 	orr.w	r2, r3, #2
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8007022:	4b0f      	ldr	r3, [pc, #60]	@ (8007060 <HAL_RTC_SetAlarm_IT+0x210>)
 8007024:	699b      	ldr	r3, [r3, #24]
 8007026:	4a0e      	ldr	r2, [pc, #56]	@ (8007060 <HAL_RTC_SetAlarm_IT+0x210>)
 8007028:	f443 5308 	orr.w	r3, r3, #8704	@ 0x2200
 800702c:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800702e:	4b0d      	ldr	r3, [pc, #52]	@ (8007064 <HAL_RTC_SetAlarm_IT+0x214>)
 8007030:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007034:	4a0b      	ldr	r2, [pc, #44]	@ (8007064 <HAL_RTC_SetAlarm_IT+0x214>)
 8007036:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800703a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800703e:	4b08      	ldr	r3, [pc, #32]	@ (8007060 <HAL_RTC_SetAlarm_IT+0x210>)
 8007040:	22ff      	movs	r2, #255	@ 0xff
 8007042:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2201      	movs	r2, #1
 8007048:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	2200      	movs	r2, #0
 8007050:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8007054:	2300      	movs	r3, #0
}
 8007056:	4618      	mov	r0, r3
 8007058:	371c      	adds	r7, #28
 800705a:	46bd      	mov	sp, r7
 800705c:	bd90      	pop	{r4, r7, pc}
 800705e:	bf00      	nop
 8007060:	40002800 	.word	0x40002800
 8007064:	58000800 	.word	0x58000800

08007068 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8007068:	b480      	push	{r7}
 800706a:	b083      	sub	sp, #12
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
 8007070:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8007078:	2b01      	cmp	r3, #1
 800707a:	d101      	bne.n	8007080 <HAL_RTC_DeactivateAlarm+0x18>
 800707c:	2302      	movs	r3, #2
 800707e:	e048      	b.n	8007112 <HAL_RTC_DeactivateAlarm+0xaa>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2201      	movs	r2, #1
 8007084:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2202      	movs	r2, #2
 800708c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007090:	4b22      	ldr	r3, [pc, #136]	@ (800711c <HAL_RTC_DeactivateAlarm+0xb4>)
 8007092:	22ca      	movs	r2, #202	@ 0xca
 8007094:	625a      	str	r2, [r3, #36]	@ 0x24
 8007096:	4b21      	ldr	r3, [pc, #132]	@ (800711c <HAL_RTC_DeactivateAlarm+0xb4>)
 8007098:	2253      	movs	r2, #83	@ 0x53
 800709a:	625a      	str	r2, [r3, #36]	@ 0x24

  if (Alarm == RTC_ALARM_A)
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070a2:	d115      	bne.n	80070d0 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80070a4:	4b1d      	ldr	r3, [pc, #116]	@ (800711c <HAL_RTC_DeactivateAlarm+0xb4>)
 80070a6:	699b      	ldr	r3, [r3, #24]
 80070a8:	4a1c      	ldr	r2, [pc, #112]	@ (800711c <HAL_RTC_DeactivateAlarm+0xb4>)
 80070aa:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80070ae:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 80070b0:	4b1a      	ldr	r3, [pc, #104]	@ (800711c <HAL_RTC_DeactivateAlarm+0xb4>)
 80070b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070b4:	4a19      	ldr	r2, [pc, #100]	@ (800711c <HAL_RTC_DeactivateAlarm+0xb4>)
 80070b6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80070ba:	6453      	str	r3, [r2, #68]	@ 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070c0:	f023 0201 	bic.w	r2, r3, #1
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80070c8:	4b14      	ldr	r3, [pc, #80]	@ (800711c <HAL_RTC_DeactivateAlarm+0xb4>)
 80070ca:	2201      	movs	r2, #1
 80070cc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80070ce:	e014      	b.n	80070fa <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80070d0:	4b12      	ldr	r3, [pc, #72]	@ (800711c <HAL_RTC_DeactivateAlarm+0xb4>)
 80070d2:	699b      	ldr	r3, [r3, #24]
 80070d4:	4a11      	ldr	r2, [pc, #68]	@ (800711c <HAL_RTC_DeactivateAlarm+0xb4>)
 80070d6:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 80070da:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 80070dc:	4b0f      	ldr	r3, [pc, #60]	@ (800711c <HAL_RTC_DeactivateAlarm+0xb4>)
 80070de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070e0:	4a0e      	ldr	r2, [pc, #56]	@ (800711c <HAL_RTC_DeactivateAlarm+0xb4>)
 80070e2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80070e6:	64d3      	str	r3, [r2, #76]	@ 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070ec:	f023 0202 	bic.w	r2, r3, #2
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80070f4:	4b09      	ldr	r3, [pc, #36]	@ (800711c <HAL_RTC_DeactivateAlarm+0xb4>)
 80070f6:	2202      	movs	r2, #2
 80070f8:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80070fa:	4b08      	ldr	r3, [pc, #32]	@ (800711c <HAL_RTC_DeactivateAlarm+0xb4>)
 80070fc:	22ff      	movs	r2, #255	@ 0xff
 80070fe:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2201      	movs	r2, #1
 8007104:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2200      	movs	r2, #0
 800710c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8007110:	2300      	movs	r3, #0
}
 8007112:	4618      	mov	r0, r3
 8007114:	370c      	adds	r7, #12
 8007116:	46bd      	mov	sp, r7
 8007118:	bc80      	pop	{r7}
 800711a:	4770      	bx	lr
 800711c:	40002800 	.word	0x40002800

08007120 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b084      	sub	sp, #16
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8007128:	4b11      	ldr	r3, [pc, #68]	@ (8007170 <HAL_RTC_AlarmIRQHandler+0x50>)
 800712a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007130:	4013      	ands	r3, r2
 8007132:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f003 0301 	and.w	r3, r3, #1
 800713a:	2b00      	cmp	r3, #0
 800713c:	d005      	beq.n	800714a <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 800713e:	4b0c      	ldr	r3, [pc, #48]	@ (8007170 <HAL_RTC_AlarmIRQHandler+0x50>)
 8007140:	2201      	movs	r2, #1
 8007142:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f7fb fad8 	bl	80026fa <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	f003 0302 	and.w	r3, r3, #2
 8007150:	2b00      	cmp	r3, #0
 8007152:	d005      	beq.n	8007160 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8007154:	4b06      	ldr	r3, [pc, #24]	@ (8007170 <HAL_RTC_AlarmIRQHandler+0x50>)
 8007156:	2202      	movs	r2, #2
 8007158:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f000 f94a 	bl	80073f4 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2201      	movs	r2, #1
 8007164:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 8007168:	bf00      	nop
 800716a:	3710      	adds	r7, #16
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}
 8007170:	40002800 	.word	0x40002800

08007174 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b084      	sub	sp, #16
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800717c:	4b0f      	ldr	r3, [pc, #60]	@ (80071bc <HAL_RTC_WaitForSynchro+0x48>)
 800717e:	68db      	ldr	r3, [r3, #12]
 8007180:	4a0e      	ldr	r2, [pc, #56]	@ (80071bc <HAL_RTC_WaitForSynchro+0x48>)
 8007182:	f023 0320 	bic.w	r3, r3, #32
 8007186:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8007188:	f7fa ffca 	bl	8002120 <HAL_GetTick>
 800718c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800718e:	e009      	b.n	80071a4 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007190:	f7fa ffc6 	bl	8002120 <HAL_GetTick>
 8007194:	4602      	mov	r2, r0
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	1ad3      	subs	r3, r2, r3
 800719a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800719e:	d901      	bls.n	80071a4 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80071a0:	2303      	movs	r3, #3
 80071a2:	e006      	b.n	80071b2 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80071a4:	4b05      	ldr	r3, [pc, #20]	@ (80071bc <HAL_RTC_WaitForSynchro+0x48>)
 80071a6:	68db      	ldr	r3, [r3, #12]
 80071a8:	f003 0320 	and.w	r3, r3, #32
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d0ef      	beq.n	8007190 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80071b0:	2300      	movs	r3, #0
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3710      	adds	r7, #16
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}
 80071ba:	bf00      	nop
 80071bc:	40002800 	.word	0x40002800

080071c0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b084      	sub	sp, #16
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80071c8:	2300      	movs	r3, #0
 80071ca:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80071cc:	4b15      	ldr	r3, [pc, #84]	@ (8007224 <RTC_EnterInitMode+0x64>)
 80071ce:	68db      	ldr	r3, [r3, #12]
 80071d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d120      	bne.n	800721a <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80071d8:	4b12      	ldr	r3, [pc, #72]	@ (8007224 <RTC_EnterInitMode+0x64>)
 80071da:	68db      	ldr	r3, [r3, #12]
 80071dc:	4a11      	ldr	r2, [pc, #68]	@ (8007224 <RTC_EnterInitMode+0x64>)
 80071de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071e2:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 80071e4:	f7fa ff9c 	bl	8002120 <HAL_GetTick>
 80071e8:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80071ea:	e00d      	b.n	8007208 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80071ec:	f7fa ff98 	bl	8002120 <HAL_GetTick>
 80071f0:	4602      	mov	r2, r0
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	1ad3      	subs	r3, r2, r3
 80071f6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80071fa:	d905      	bls.n	8007208 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80071fc:	2303      	movs	r3, #3
 80071fe:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2203      	movs	r2, #3
 8007204:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007208:	4b06      	ldr	r3, [pc, #24]	@ (8007224 <RTC_EnterInitMode+0x64>)
 800720a:	68db      	ldr	r3, [r3, #12]
 800720c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007210:	2b00      	cmp	r3, #0
 8007212:	d102      	bne.n	800721a <RTC_EnterInitMode+0x5a>
 8007214:	7bfb      	ldrb	r3, [r7, #15]
 8007216:	2b03      	cmp	r3, #3
 8007218:	d1e8      	bne.n	80071ec <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800721a:	7bfb      	ldrb	r3, [r7, #15]
}
 800721c:	4618      	mov	r0, r3
 800721e:	3710      	adds	r7, #16
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}
 8007224:	40002800 	.word	0x40002800

08007228 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b084      	sub	sp, #16
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007230:	2300      	movs	r3, #0
 8007232:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8007234:	4b1a      	ldr	r3, [pc, #104]	@ (80072a0 <RTC_ExitInitMode+0x78>)
 8007236:	68db      	ldr	r3, [r3, #12]
 8007238:	4a19      	ldr	r2, [pc, #100]	@ (80072a0 <RTC_ExitInitMode+0x78>)
 800723a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800723e:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007240:	4b17      	ldr	r3, [pc, #92]	@ (80072a0 <RTC_ExitInitMode+0x78>)
 8007242:	699b      	ldr	r3, [r3, #24]
 8007244:	f003 0320 	and.w	r3, r3, #32
 8007248:	2b00      	cmp	r3, #0
 800724a:	d10c      	bne.n	8007266 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f7ff ff91 	bl	8007174 <HAL_RTC_WaitForSynchro>
 8007252:	4603      	mov	r3, r0
 8007254:	2b00      	cmp	r3, #0
 8007256:	d01e      	beq.n	8007296 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2203      	movs	r2, #3
 800725c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8007260:	2303      	movs	r3, #3
 8007262:	73fb      	strb	r3, [r7, #15]
 8007264:	e017      	b.n	8007296 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007266:	4b0e      	ldr	r3, [pc, #56]	@ (80072a0 <RTC_ExitInitMode+0x78>)
 8007268:	699b      	ldr	r3, [r3, #24]
 800726a:	4a0d      	ldr	r2, [pc, #52]	@ (80072a0 <RTC_ExitInitMode+0x78>)
 800726c:	f023 0320 	bic.w	r3, r3, #32
 8007270:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f7ff ff7e 	bl	8007174 <HAL_RTC_WaitForSynchro>
 8007278:	4603      	mov	r3, r0
 800727a:	2b00      	cmp	r3, #0
 800727c:	d005      	beq.n	800728a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2203      	movs	r2, #3
 8007282:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8007286:	2303      	movs	r3, #3
 8007288:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800728a:	4b05      	ldr	r3, [pc, #20]	@ (80072a0 <RTC_ExitInitMode+0x78>)
 800728c:	699b      	ldr	r3, [r3, #24]
 800728e:	4a04      	ldr	r2, [pc, #16]	@ (80072a0 <RTC_ExitInitMode+0x78>)
 8007290:	f043 0320 	orr.w	r3, r3, #32
 8007294:	6193      	str	r3, [r2, #24]
  }

  return status;
 8007296:	7bfb      	ldrb	r3, [r7, #15]
}
 8007298:	4618      	mov	r0, r3
 800729a:	3710      	adds	r7, #16
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}
 80072a0:	40002800 	.word	0x40002800

080072a4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b085      	sub	sp, #20
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	4603      	mov	r3, r0
 80072ac:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80072ae:	2300      	movs	r3, #0
 80072b0:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 80072b2:	79fb      	ldrb	r3, [r7, #7]
 80072b4:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 80072b6:	e005      	b.n	80072c4 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	3301      	adds	r3, #1
 80072bc:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 80072be:	7afb      	ldrb	r3, [r7, #11]
 80072c0:	3b0a      	subs	r3, #10
 80072c2:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 80072c4:	7afb      	ldrb	r3, [r7, #11]
 80072c6:	2b09      	cmp	r3, #9
 80072c8:	d8f6      	bhi.n	80072b8 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	b2db      	uxtb	r3, r3
 80072ce:	011b      	lsls	r3, r3, #4
 80072d0:	b2da      	uxtb	r2, r3
 80072d2:	7afb      	ldrb	r3, [r7, #11]
 80072d4:	4313      	orrs	r3, r2
 80072d6:	b2db      	uxtb	r3, r3
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3714      	adds	r7, #20
 80072dc:	46bd      	mov	sp, r7
 80072de:	bc80      	pop	{r7}
 80072e0:	4770      	bx	lr
	...

080072e4 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b083      	sub	sp, #12
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80072f2:	2b01      	cmp	r3, #1
 80072f4:	d101      	bne.n	80072fa <HAL_RTCEx_EnableBypassShadow+0x16>
 80072f6:	2302      	movs	r3, #2
 80072f8:	e01f      	b.n	800733a <HAL_RTCEx_EnableBypassShadow+0x56>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2201      	movs	r2, #1
 80072fe:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2202      	movs	r2, #2
 8007306:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800730a:	4b0e      	ldr	r3, [pc, #56]	@ (8007344 <HAL_RTCEx_EnableBypassShadow+0x60>)
 800730c:	22ca      	movs	r2, #202	@ 0xca
 800730e:	625a      	str	r2, [r3, #36]	@ 0x24
 8007310:	4b0c      	ldr	r3, [pc, #48]	@ (8007344 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007312:	2253      	movs	r2, #83	@ 0x53
 8007314:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007316:	4b0b      	ldr	r3, [pc, #44]	@ (8007344 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007318:	699b      	ldr	r3, [r3, #24]
 800731a:	4a0a      	ldr	r2, [pc, #40]	@ (8007344 <HAL_RTCEx_EnableBypassShadow+0x60>)
 800731c:	f043 0320 	orr.w	r3, r3, #32
 8007320:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007322:	4b08      	ldr	r3, [pc, #32]	@ (8007344 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007324:	22ff      	movs	r2, #255	@ 0xff
 8007326:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2201      	movs	r2, #1
 800732c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2200      	movs	r2, #0
 8007334:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8007338:	2300      	movs	r3, #0
}
 800733a:	4618      	mov	r0, r3
 800733c:	370c      	adds	r7, #12
 800733e:	46bd      	mov	sp, r7
 8007340:	bc80      	pop	{r7}
 8007342:	4770      	bx	lr
 8007344:	40002800 	.word	0x40002800

08007348 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 8007348:	b480      	push	{r7}
 800734a:	b083      	sub	sp, #12
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8007356:	2b01      	cmp	r3, #1
 8007358:	d101      	bne.n	800735e <HAL_RTCEx_SetSSRU_IT+0x16>
 800735a:	2302      	movs	r3, #2
 800735c:	e027      	b.n	80073ae <HAL_RTCEx_SetSSRU_IT+0x66>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2201      	movs	r2, #1
 8007362:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2202      	movs	r2, #2
 800736a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800736e:	4b12      	ldr	r3, [pc, #72]	@ (80073b8 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007370:	22ca      	movs	r2, #202	@ 0xca
 8007372:	625a      	str	r2, [r3, #36]	@ 0x24
 8007374:	4b10      	ldr	r3, [pc, #64]	@ (80073b8 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007376:	2253      	movs	r2, #83	@ 0x53
 8007378:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 800737a:	4b0f      	ldr	r3, [pc, #60]	@ (80073b8 <HAL_RTCEx_SetSSRU_IT+0x70>)
 800737c:	699b      	ldr	r3, [r3, #24]
 800737e:	4a0e      	ldr	r2, [pc, #56]	@ (80073b8 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007380:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007384:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 8007386:	4b0d      	ldr	r3, [pc, #52]	@ (80073bc <HAL_RTCEx_SetSSRU_IT+0x74>)
 8007388:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800738c:	4a0b      	ldr	r2, [pc, #44]	@ (80073bc <HAL_RTCEx_SetSSRU_IT+0x74>)
 800738e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007392:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007396:	4b08      	ldr	r3, [pc, #32]	@ (80073b8 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007398:	22ff      	movs	r2, #255	@ 0xff
 800739a:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2201      	movs	r2, #1
 80073a0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2200      	movs	r2, #0
 80073a8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80073ac:	2300      	movs	r3, #0
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	370c      	adds	r7, #12
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bc80      	pop	{r7}
 80073b6:	4770      	bx	lr
 80073b8:	40002800 	.word	0x40002800
 80073bc:	58000800 	.word	0x58000800

080073c0 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b082      	sub	sp, #8
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 80073c8:	4b09      	ldr	r3, [pc, #36]	@ (80073f0 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 80073ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d005      	beq.n	80073e0 <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 80073d4:	4b06      	ldr	r3, [pc, #24]	@ (80073f0 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 80073d6:	2240      	movs	r2, #64	@ 0x40
 80073d8:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f7fb f997 	bl	800270e <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2201      	movs	r2, #1
 80073e4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 80073e8:	bf00      	nop
 80073ea:	3708      	adds	r7, #8
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}
 80073f0:	40002800 	.word	0x40002800

080073f4 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b083      	sub	sp, #12
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80073fc:	bf00      	nop
 80073fe:	370c      	adds	r7, #12
 8007400:	46bd      	mov	sp, r7
 8007402:	bc80      	pop	{r7}
 8007404:	4770      	bx	lr
	...

08007408 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8007408:	b480      	push	{r7}
 800740a:	b087      	sub	sp, #28
 800740c:	af00      	add	r7, sp, #0
 800740e:	60f8      	str	r0, [r7, #12]
 8007410:	60b9      	str	r1, [r7, #8]
 8007412:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8007414:	4b07      	ldr	r3, [pc, #28]	@ (8007434 <HAL_RTCEx_BKUPWrite+0x2c>)
 8007416:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	009b      	lsls	r3, r3, #2
 800741c:	697a      	ldr	r2, [r7, #20]
 800741e:	4413      	add	r3, r2
 8007420:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	687a      	ldr	r2, [r7, #4]
 8007426:	601a      	str	r2, [r3, #0]
}
 8007428:	bf00      	nop
 800742a:	371c      	adds	r7, #28
 800742c:	46bd      	mov	sp, r7
 800742e:	bc80      	pop	{r7}
 8007430:	4770      	bx	lr
 8007432:	bf00      	nop
 8007434:	4000b100 	.word	0x4000b100

08007438 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8007438:	b480      	push	{r7}
 800743a:	b085      	sub	sp, #20
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8007442:	4b07      	ldr	r3, [pc, #28]	@ (8007460 <HAL_RTCEx_BKUPRead+0x28>)
 8007444:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	009b      	lsls	r3, r3, #2
 800744a:	68fa      	ldr	r2, [r7, #12]
 800744c:	4413      	add	r3, r2
 800744e:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
}
 8007454:	4618      	mov	r0, r3
 8007456:	3714      	adds	r7, #20
 8007458:	46bd      	mov	sp, r7
 800745a:	bc80      	pop	{r7}
 800745c:	4770      	bx	lr
 800745e:	bf00      	nop
 8007460:	4000b100 	.word	0x4000b100

08007464 <LL_PWR_SetRadioBusyTrigger>:
{
 8007464:	b480      	push	{r7}
 8007466:	b083      	sub	sp, #12
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 800746c:	4b06      	ldr	r3, [pc, #24]	@ (8007488 <LL_PWR_SetRadioBusyTrigger+0x24>)
 800746e:	689b      	ldr	r3, [r3, #8]
 8007470:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007474:	4904      	ldr	r1, [pc, #16]	@ (8007488 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	4313      	orrs	r3, r2
 800747a:	608b      	str	r3, [r1, #8]
}
 800747c:	bf00      	nop
 800747e:	370c      	adds	r7, #12
 8007480:	46bd      	mov	sp, r7
 8007482:	bc80      	pop	{r7}
 8007484:	4770      	bx	lr
 8007486:	bf00      	nop
 8007488:	58000400 	.word	0x58000400

0800748c <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 800748c:	b480      	push	{r7}
 800748e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007490:	4b05      	ldr	r3, [pc, #20]	@ (80074a8 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8007492:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007496:	4a04      	ldr	r2, [pc, #16]	@ (80074a8 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8007498:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800749c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80074a0:	bf00      	nop
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bc80      	pop	{r7}
 80074a6:	4770      	bx	lr
 80074a8:	58000400 	.word	0x58000400

080074ac <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 80074ac:	b480      	push	{r7}
 80074ae:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80074b0:	4b05      	ldr	r3, [pc, #20]	@ (80074c8 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80074b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074b6:	4a04      	ldr	r2, [pc, #16]	@ (80074c8 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80074b8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80074bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80074c0:	bf00      	nop
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bc80      	pop	{r7}
 80074c6:	4770      	bx	lr
 80074c8:	58000400 	.word	0x58000400

080074cc <LL_PWR_ClearFlag_RFBUSY>:
{
 80074cc:	b480      	push	{r7}
 80074ce:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 80074d0:	4b03      	ldr	r3, [pc, #12]	@ (80074e0 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 80074d2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80074d6:	619a      	str	r2, [r3, #24]
}
 80074d8:	bf00      	nop
 80074da:	46bd      	mov	sp, r7
 80074dc:	bc80      	pop	{r7}
 80074de:	4770      	bx	lr
 80074e0:	58000400 	.word	0x58000400

080074e4 <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 80074e4:	b480      	push	{r7}
 80074e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 80074e8:	4b06      	ldr	r3, [pc, #24]	@ (8007504 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 80074ea:	695b      	ldr	r3, [r3, #20]
 80074ec:	f003 0302 	and.w	r3, r3, #2
 80074f0:	2b02      	cmp	r3, #2
 80074f2:	d101      	bne.n	80074f8 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 80074f4:	2301      	movs	r3, #1
 80074f6:	e000      	b.n	80074fa <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 80074f8:	2300      	movs	r3, #0
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bc80      	pop	{r7}
 8007500:	4770      	bx	lr
 8007502:	bf00      	nop
 8007504:	58000400 	.word	0x58000400

08007508 <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 8007508:	b480      	push	{r7}
 800750a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 800750c:	4b06      	ldr	r3, [pc, #24]	@ (8007528 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 800750e:	695b      	ldr	r3, [r3, #20]
 8007510:	f003 0304 	and.w	r3, r3, #4
 8007514:	2b04      	cmp	r3, #4
 8007516:	d101      	bne.n	800751c <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8007518:	2301      	movs	r3, #1
 800751a:	e000      	b.n	800751e <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 800751c:	2300      	movs	r3, #0
}
 800751e:	4618      	mov	r0, r3
 8007520:	46bd      	mov	sp, r7
 8007522:	bc80      	pop	{r7}
 8007524:	4770      	bx	lr
 8007526:	bf00      	nop
 8007528:	58000400 	.word	0x58000400

0800752c <LL_RCC_RF_DisableReset>:
{
 800752c:	b480      	push	{r7}
 800752e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8007530:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007534:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007538:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800753c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007540:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8007544:	bf00      	nop
 8007546:	46bd      	mov	sp, r7
 8007548:	bc80      	pop	{r7}
 800754a:	4770      	bx	lr

0800754c <LL_RCC_IsRFUnderReset>:
{
 800754c:	b480      	push	{r7}
 800754e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8007550:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007554:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007558:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800755c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007560:	d101      	bne.n	8007566 <LL_RCC_IsRFUnderReset+0x1a>
 8007562:	2301      	movs	r3, #1
 8007564:	e000      	b.n	8007568 <LL_RCC_IsRFUnderReset+0x1c>
 8007566:	2300      	movs	r3, #0
}
 8007568:	4618      	mov	r0, r3
 800756a:	46bd      	mov	sp, r7
 800756c:	bc80      	pop	{r7}
 800756e:	4770      	bx	lr

08007570 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8007570:	b480      	push	{r7}
 8007572:	b083      	sub	sp, #12
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8007578:	4b06      	ldr	r3, [pc, #24]	@ (8007594 <LL_EXTI_EnableIT_32_63+0x24>)
 800757a:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800757e:	4905      	ldr	r1, [pc, #20]	@ (8007594 <LL_EXTI_EnableIT_32_63+0x24>)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	4313      	orrs	r3, r2
 8007584:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8007588:	bf00      	nop
 800758a:	370c      	adds	r7, #12
 800758c:	46bd      	mov	sp, r7
 800758e:	bc80      	pop	{r7}
 8007590:	4770      	bx	lr
 8007592:	bf00      	nop
 8007594:	58000800 	.word	0x58000800

08007598 <HAL_SUBGHZ_Init>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b084      	sub	sp, #16
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d103      	bne.n	80075ae <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 80075a6:	2301      	movs	r3, #1
 80075a8:	73fb      	strb	r3, [r7, #15]
    return status;
 80075aa:	7bfb      	ldrb	r3, [r7, #15]
 80075ac:	e04b      	b.n	8007646 <HAL_SUBGHZ_Init+0xae>
  }
  else
  {
    status = HAL_OK;
 80075ae:	2300      	movs	r3, #0
 80075b0:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	799b      	ldrb	r3, [r3, #6]
 80075b6:	b2db      	uxtb	r3, r3
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d105      	bne.n	80075c8 <HAL_SUBGHZ_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2200      	movs	r2, #0
 80075c0:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f7fa fc04 	bl	8001dd0 <HAL_SUBGHZ_MspInit>
#endif /* USE_HAL_ SUBGHZ_REGISTER_CALLBACKS */
  }

  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2202      	movs	r2, #2
 80075cc:	719a      	strb	r2, [r3, #6]

  /* De-asserts the reset signal of the Radio peripheral */
  LL_RCC_RF_DisableReset();
 80075ce:	f7ff ffad 	bl	800752c <LL_RCC_RF_DisableReset>

  /* Verify that Radio in reset status flag is set */
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80075d2:	4b1f      	ldr	r3, [pc, #124]	@ (8007650 <HAL_SUBGHZ_Init+0xb8>)
 80075d4:	681a      	ldr	r2, [r3, #0]
 80075d6:	4613      	mov	r3, r2
 80075d8:	00db      	lsls	r3, r3, #3
 80075da:	1a9b      	subs	r3, r3, r2
 80075dc:	009b      	lsls	r3, r3, #2
 80075de:	0cdb      	lsrs	r3, r3, #19
 80075e0:	2264      	movs	r2, #100	@ 0x64
 80075e2:	fb02 f303 	mul.w	r3, r2, r3
 80075e6:	60bb      	str	r3, [r7, #8]

  do
  {
    if (count == 0U)
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d105      	bne.n	80075fa <HAL_SUBGHZ_Init+0x62>
    {
      status  = HAL_ERROR;
 80075ee:	2301      	movs	r3, #1
 80075f0:	73fb      	strb	r3, [r7, #15]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2201      	movs	r2, #1
 80075f6:	609a      	str	r2, [r3, #8]
      break;
 80075f8:	e007      	b.n	800760a <HAL_SUBGHZ_Init+0x72>
    }
    count--;
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	3b01      	subs	r3, #1
 80075fe:	60bb      	str	r3, [r7, #8]
  } while (LL_RCC_IsRFUnderReset() != 0UL);
 8007600:	f7ff ffa4 	bl	800754c <LL_RCC_IsRFUnderReset>
 8007604:	4603      	mov	r3, r0
 8007606:	2b00      	cmp	r3, #0
 8007608:	d1ee      	bne.n	80075e8 <HAL_SUBGHZ_Init+0x50>

  /* Asserts the reset signal of the Radio peripheral */
  LL_PWR_UnselectSUBGHZSPI_NSS();
 800760a:	f7ff ff3f 	bl	800748c <LL_PWR_UnselectSUBGHZSPI_NSS>

  /* Enable wakeup signal of the Radio peripheral */
  LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
  /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 800760e:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8007612:	f7ff ffad 	bl	8007570 <LL_EXTI_EnableIT_32_63>

  /* Enable wakeup signal of the Radio peripheral */
  LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8007616:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800761a:	f7ff ff23 	bl	8007464 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 800761e:	f7ff ff55 	bl	80074cc <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8007622:	7bfb      	ldrb	r3, [r7, #15]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d10a      	bne.n	800763e <HAL_SUBGHZ_Init+0xa6>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4618      	mov	r0, r3
 800762e:	f000 faaf 	bl	8007b90 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2201      	movs	r2, #1
 8007636:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2200      	movs	r2, #0
 800763c:	609a      	str	r2, [r3, #8]
  }
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2201      	movs	r2, #1
 8007642:	719a      	strb	r2, [r3, #6]

  return status;
 8007644:	7bfb      	ldrb	r3, [r7, #15]
}
 8007646:	4618      	mov	r0, r3
 8007648:	3710      	adds	r7, #16
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}
 800764e:	bf00      	nop
 8007650:	20000000 	.word	0x20000000

08007654 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b086      	sub	sp, #24
 8007658:	af00      	add	r7, sp, #0
 800765a:	60f8      	str	r0, [r7, #12]
 800765c:	607a      	str	r2, [r7, #4]
 800765e:	461a      	mov	r2, r3
 8007660:	460b      	mov	r3, r1
 8007662:	817b      	strh	r3, [r7, #10]
 8007664:	4613      	mov	r3, r2
 8007666:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	799b      	ldrb	r3, [r3, #6]
 800766c:	b2db      	uxtb	r3, r3
 800766e:	2b01      	cmp	r3, #1
 8007670:	d14a      	bne.n	8007708 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	795b      	ldrb	r3, [r3, #5]
 8007676:	2b01      	cmp	r3, #1
 8007678:	d101      	bne.n	800767e <HAL_SUBGHZ_WriteRegisters+0x2a>
 800767a:	2302      	movs	r3, #2
 800767c:	e045      	b.n	800770a <HAL_SUBGHZ_WriteRegisters+0xb6>
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	2201      	movs	r2, #1
 8007682:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2202      	movs	r2, #2
 8007688:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800768a:	68f8      	ldr	r0, [r7, #12]
 800768c:	f000 fb4e 	bl	8007d2c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007690:	f7ff ff0c 	bl	80074ac <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8007694:	210d      	movs	r1, #13
 8007696:	68f8      	ldr	r0, [r7, #12]
 8007698:	f000 fa9a 	bl	8007bd0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 800769c:	897b      	ldrh	r3, [r7, #10]
 800769e:	0a1b      	lsrs	r3, r3, #8
 80076a0:	b29b      	uxth	r3, r3
 80076a2:	b2db      	uxtb	r3, r3
 80076a4:	4619      	mov	r1, r3
 80076a6:	68f8      	ldr	r0, [r7, #12]
 80076a8:	f000 fa92 	bl	8007bd0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80076ac:	897b      	ldrh	r3, [r7, #10]
 80076ae:	b2db      	uxtb	r3, r3
 80076b0:	4619      	mov	r1, r3
 80076b2:	68f8      	ldr	r0, [r7, #12]
 80076b4:	f000 fa8c 	bl	8007bd0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80076b8:	2300      	movs	r3, #0
 80076ba:	82bb      	strh	r3, [r7, #20]
 80076bc:	e00a      	b.n	80076d4 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80076be:	8abb      	ldrh	r3, [r7, #20]
 80076c0:	687a      	ldr	r2, [r7, #4]
 80076c2:	4413      	add	r3, r2
 80076c4:	781b      	ldrb	r3, [r3, #0]
 80076c6:	4619      	mov	r1, r3
 80076c8:	68f8      	ldr	r0, [r7, #12]
 80076ca:	f000 fa81 	bl	8007bd0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80076ce:	8abb      	ldrh	r3, [r7, #20]
 80076d0:	3301      	adds	r3, #1
 80076d2:	82bb      	strh	r3, [r7, #20]
 80076d4:	8aba      	ldrh	r2, [r7, #20]
 80076d6:	893b      	ldrh	r3, [r7, #8]
 80076d8:	429a      	cmp	r2, r3
 80076da:	d3f0      	bcc.n	80076be <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80076dc:	f7ff fed6 	bl	800748c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80076e0:	68f8      	ldr	r0, [r7, #12]
 80076e2:	f000 fb47 	bl	8007d74 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	689b      	ldr	r3, [r3, #8]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d002      	beq.n	80076f4 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 80076ee:	2301      	movs	r3, #1
 80076f0:	75fb      	strb	r3, [r7, #23]
 80076f2:	e001      	b.n	80076f8 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 80076f4:	2300      	movs	r3, #0
 80076f6:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	2201      	movs	r2, #1
 80076fc:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2200      	movs	r2, #0
 8007702:	715a      	strb	r2, [r3, #5]

    return status;
 8007704:	7dfb      	ldrb	r3, [r7, #23]
 8007706:	e000      	b.n	800770a <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8007708:	2302      	movs	r3, #2
  }
}
 800770a:	4618      	mov	r0, r3
 800770c:	3718      	adds	r7, #24
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}

08007712 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8007712:	b580      	push	{r7, lr}
 8007714:	b088      	sub	sp, #32
 8007716:	af00      	add	r7, sp, #0
 8007718:	60f8      	str	r0, [r7, #12]
 800771a:	607a      	str	r2, [r7, #4]
 800771c:	461a      	mov	r2, r3
 800771e:	460b      	mov	r3, r1
 8007720:	817b      	strh	r3, [r7, #10]
 8007722:	4613      	mov	r3, r2
 8007724:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	799b      	ldrb	r3, [r3, #6]
 800772e:	b2db      	uxtb	r3, r3
 8007730:	2b01      	cmp	r3, #1
 8007732:	d14a      	bne.n	80077ca <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	795b      	ldrb	r3, [r3, #5]
 8007738:	2b01      	cmp	r3, #1
 800773a:	d101      	bne.n	8007740 <HAL_SUBGHZ_ReadRegisters+0x2e>
 800773c:	2302      	movs	r3, #2
 800773e:	e045      	b.n	80077cc <HAL_SUBGHZ_ReadRegisters+0xba>
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	2201      	movs	r2, #1
 8007744:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007746:	68f8      	ldr	r0, [r7, #12]
 8007748:	f000 faf0 	bl	8007d2c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800774c:	f7ff feae 	bl	80074ac <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8007750:	211d      	movs	r1, #29
 8007752:	68f8      	ldr	r0, [r7, #12]
 8007754:	f000 fa3c 	bl	8007bd0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8007758:	897b      	ldrh	r3, [r7, #10]
 800775a:	0a1b      	lsrs	r3, r3, #8
 800775c:	b29b      	uxth	r3, r3
 800775e:	b2db      	uxtb	r3, r3
 8007760:	4619      	mov	r1, r3
 8007762:	68f8      	ldr	r0, [r7, #12]
 8007764:	f000 fa34 	bl	8007bd0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8007768:	897b      	ldrh	r3, [r7, #10]
 800776a:	b2db      	uxtb	r3, r3
 800776c:	4619      	mov	r1, r3
 800776e:	68f8      	ldr	r0, [r7, #12]
 8007770:	f000 fa2e 	bl	8007bd0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8007774:	2100      	movs	r1, #0
 8007776:	68f8      	ldr	r0, [r7, #12]
 8007778:	f000 fa2a 	bl	8007bd0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800777c:	2300      	movs	r3, #0
 800777e:	82fb      	strh	r3, [r7, #22]
 8007780:	e009      	b.n	8007796 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007782:	69b9      	ldr	r1, [r7, #24]
 8007784:	68f8      	ldr	r0, [r7, #12]
 8007786:	f000 fa79 	bl	8007c7c <SUBGHZSPI_Receive>
      pData++;
 800778a:	69bb      	ldr	r3, [r7, #24]
 800778c:	3301      	adds	r3, #1
 800778e:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8007790:	8afb      	ldrh	r3, [r7, #22]
 8007792:	3301      	adds	r3, #1
 8007794:	82fb      	strh	r3, [r7, #22]
 8007796:	8afa      	ldrh	r2, [r7, #22]
 8007798:	893b      	ldrh	r3, [r7, #8]
 800779a:	429a      	cmp	r2, r3
 800779c:	d3f1      	bcc.n	8007782 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800779e:	f7ff fe75 	bl	800748c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80077a2:	68f8      	ldr	r0, [r7, #12]
 80077a4:	f000 fae6 	bl	8007d74 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	689b      	ldr	r3, [r3, #8]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d002      	beq.n	80077b6 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 80077b0:	2301      	movs	r3, #1
 80077b2:	77fb      	strb	r3, [r7, #31]
 80077b4:	e001      	b.n	80077ba <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 80077b6:	2300      	movs	r3, #0
 80077b8:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	2201      	movs	r2, #1
 80077be:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	2200      	movs	r2, #0
 80077c4:	715a      	strb	r2, [r3, #5]

    return status;
 80077c6:	7ffb      	ldrb	r3, [r7, #31]
 80077c8:	e000      	b.n	80077cc <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 80077ca:	2302      	movs	r3, #2
  }
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	3720      	adds	r7, #32
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd80      	pop	{r7, pc}

080077d4 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b086      	sub	sp, #24
 80077d8:	af00      	add	r7, sp, #0
 80077da:	60f8      	str	r0, [r7, #12]
 80077dc:	607a      	str	r2, [r7, #4]
 80077de:	461a      	mov	r2, r3
 80077e0:	460b      	mov	r3, r1
 80077e2:	72fb      	strb	r3, [r7, #11]
 80077e4:	4613      	mov	r3, r2
 80077e6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	799b      	ldrb	r3, [r3, #6]
 80077ec:	b2db      	uxtb	r3, r3
 80077ee:	2b01      	cmp	r3, #1
 80077f0:	d14a      	bne.n	8007888 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	795b      	ldrb	r3, [r3, #5]
 80077f6:	2b01      	cmp	r3, #1
 80077f8:	d101      	bne.n	80077fe <HAL_SUBGHZ_ExecSetCmd+0x2a>
 80077fa:	2302      	movs	r3, #2
 80077fc:	e045      	b.n	800788a <HAL_SUBGHZ_ExecSetCmd+0xb6>
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2201      	movs	r2, #1
 8007802:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007804:	68f8      	ldr	r0, [r7, #12]
 8007806:	f000 fa91 	bl	8007d2c <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 800780a:	7afb      	ldrb	r3, [r7, #11]
 800780c:	2b84      	cmp	r3, #132	@ 0x84
 800780e:	d002      	beq.n	8007816 <HAL_SUBGHZ_ExecSetCmd+0x42>
 8007810:	7afb      	ldrb	r3, [r7, #11]
 8007812:	2b94      	cmp	r3, #148	@ 0x94
 8007814:	d103      	bne.n	800781e <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2201      	movs	r2, #1
 800781a:	711a      	strb	r2, [r3, #4]
 800781c:	e002      	b.n	8007824 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2200      	movs	r2, #0
 8007822:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007824:	f7ff fe42 	bl	80074ac <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8007828:	7afb      	ldrb	r3, [r7, #11]
 800782a:	4619      	mov	r1, r3
 800782c:	68f8      	ldr	r0, [r7, #12]
 800782e:	f000 f9cf 	bl	8007bd0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007832:	2300      	movs	r3, #0
 8007834:	82bb      	strh	r3, [r7, #20]
 8007836:	e00a      	b.n	800784e <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8007838:	8abb      	ldrh	r3, [r7, #20]
 800783a:	687a      	ldr	r2, [r7, #4]
 800783c:	4413      	add	r3, r2
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	4619      	mov	r1, r3
 8007842:	68f8      	ldr	r0, [r7, #12]
 8007844:	f000 f9c4 	bl	8007bd0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007848:	8abb      	ldrh	r3, [r7, #20]
 800784a:	3301      	adds	r3, #1
 800784c:	82bb      	strh	r3, [r7, #20]
 800784e:	8aba      	ldrh	r2, [r7, #20]
 8007850:	893b      	ldrh	r3, [r7, #8]
 8007852:	429a      	cmp	r2, r3
 8007854:	d3f0      	bcc.n	8007838 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007856:	f7ff fe19 	bl	800748c <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 800785a:	7afb      	ldrb	r3, [r7, #11]
 800785c:	2b84      	cmp	r3, #132	@ 0x84
 800785e:	d002      	beq.n	8007866 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007860:	68f8      	ldr	r0, [r7, #12]
 8007862:	f000 fa87 	bl	8007d74 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	689b      	ldr	r3, [r3, #8]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d002      	beq.n	8007874 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 800786e:	2301      	movs	r3, #1
 8007870:	75fb      	strb	r3, [r7, #23]
 8007872:	e001      	b.n	8007878 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8007874:	2300      	movs	r3, #0
 8007876:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	2201      	movs	r2, #1
 800787c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2200      	movs	r2, #0
 8007882:	715a      	strb	r2, [r3, #5]

    return status;
 8007884:	7dfb      	ldrb	r3, [r7, #23]
 8007886:	e000      	b.n	800788a <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8007888:	2302      	movs	r3, #2
  }
}
 800788a:	4618      	mov	r0, r3
 800788c:	3718      	adds	r7, #24
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}

08007892 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8007892:	b580      	push	{r7, lr}
 8007894:	b088      	sub	sp, #32
 8007896:	af00      	add	r7, sp, #0
 8007898:	60f8      	str	r0, [r7, #12]
 800789a:	607a      	str	r2, [r7, #4]
 800789c:	461a      	mov	r2, r3
 800789e:	460b      	mov	r3, r1
 80078a0:	72fb      	strb	r3, [r7, #11]
 80078a2:	4613      	mov	r3, r2
 80078a4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	799b      	ldrb	r3, [r3, #6]
 80078ae:	b2db      	uxtb	r3, r3
 80078b0:	2b01      	cmp	r3, #1
 80078b2:	d13d      	bne.n	8007930 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	795b      	ldrb	r3, [r3, #5]
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	d101      	bne.n	80078c0 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 80078bc:	2302      	movs	r3, #2
 80078be:	e038      	b.n	8007932 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	2201      	movs	r2, #1
 80078c4:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80078c6:	68f8      	ldr	r0, [r7, #12]
 80078c8:	f000 fa30 	bl	8007d2c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80078cc:	f7ff fdee 	bl	80074ac <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80078d0:	7afb      	ldrb	r3, [r7, #11]
 80078d2:	4619      	mov	r1, r3
 80078d4:	68f8      	ldr	r0, [r7, #12]
 80078d6:	f000 f97b 	bl	8007bd0 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80078da:	2100      	movs	r1, #0
 80078dc:	68f8      	ldr	r0, [r7, #12]
 80078de:	f000 f977 	bl	8007bd0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80078e2:	2300      	movs	r3, #0
 80078e4:	82fb      	strh	r3, [r7, #22]
 80078e6:	e009      	b.n	80078fc <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80078e8:	69b9      	ldr	r1, [r7, #24]
 80078ea:	68f8      	ldr	r0, [r7, #12]
 80078ec:	f000 f9c6 	bl	8007c7c <SUBGHZSPI_Receive>
      pData++;
 80078f0:	69bb      	ldr	r3, [r7, #24]
 80078f2:	3301      	adds	r3, #1
 80078f4:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80078f6:	8afb      	ldrh	r3, [r7, #22]
 80078f8:	3301      	adds	r3, #1
 80078fa:	82fb      	strh	r3, [r7, #22]
 80078fc:	8afa      	ldrh	r2, [r7, #22]
 80078fe:	893b      	ldrh	r3, [r7, #8]
 8007900:	429a      	cmp	r2, r3
 8007902:	d3f1      	bcc.n	80078e8 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007904:	f7ff fdc2 	bl	800748c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007908:	68f8      	ldr	r0, [r7, #12]
 800790a:	f000 fa33 	bl	8007d74 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	689b      	ldr	r3, [r3, #8]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d002      	beq.n	800791c <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8007916:	2301      	movs	r3, #1
 8007918:	77fb      	strb	r3, [r7, #31]
 800791a:	e001      	b.n	8007920 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 800791c:	2300      	movs	r3, #0
 800791e:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	2201      	movs	r2, #1
 8007924:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	2200      	movs	r2, #0
 800792a:	715a      	strb	r2, [r3, #5]

    return status;
 800792c:	7ffb      	ldrb	r3, [r7, #31]
 800792e:	e000      	b.n	8007932 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007930:	2302      	movs	r3, #2
  }
}
 8007932:	4618      	mov	r0, r3
 8007934:	3720      	adds	r7, #32
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}

0800793a <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 800793a:	b580      	push	{r7, lr}
 800793c:	b086      	sub	sp, #24
 800793e:	af00      	add	r7, sp, #0
 8007940:	60f8      	str	r0, [r7, #12]
 8007942:	607a      	str	r2, [r7, #4]
 8007944:	461a      	mov	r2, r3
 8007946:	460b      	mov	r3, r1
 8007948:	72fb      	strb	r3, [r7, #11]
 800794a:	4613      	mov	r3, r2
 800794c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	799b      	ldrb	r3, [r3, #6]
 8007952:	b2db      	uxtb	r3, r3
 8007954:	2b01      	cmp	r3, #1
 8007956:	d13e      	bne.n	80079d6 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	795b      	ldrb	r3, [r3, #5]
 800795c:	2b01      	cmp	r3, #1
 800795e:	d101      	bne.n	8007964 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8007960:	2302      	movs	r3, #2
 8007962:	e039      	b.n	80079d8 <HAL_SUBGHZ_WriteBuffer+0x9e>
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	2201      	movs	r2, #1
 8007968:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800796a:	68f8      	ldr	r0, [r7, #12]
 800796c:	f000 f9de 	bl	8007d2c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007970:	f7ff fd9c 	bl	80074ac <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8007974:	210e      	movs	r1, #14
 8007976:	68f8      	ldr	r0, [r7, #12]
 8007978:	f000 f92a 	bl	8007bd0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800797c:	7afb      	ldrb	r3, [r7, #11]
 800797e:	4619      	mov	r1, r3
 8007980:	68f8      	ldr	r0, [r7, #12]
 8007982:	f000 f925 	bl	8007bd0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007986:	2300      	movs	r3, #0
 8007988:	82bb      	strh	r3, [r7, #20]
 800798a:	e00a      	b.n	80079a2 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800798c:	8abb      	ldrh	r3, [r7, #20]
 800798e:	687a      	ldr	r2, [r7, #4]
 8007990:	4413      	add	r3, r2
 8007992:	781b      	ldrb	r3, [r3, #0]
 8007994:	4619      	mov	r1, r3
 8007996:	68f8      	ldr	r0, [r7, #12]
 8007998:	f000 f91a 	bl	8007bd0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800799c:	8abb      	ldrh	r3, [r7, #20]
 800799e:	3301      	adds	r3, #1
 80079a0:	82bb      	strh	r3, [r7, #20]
 80079a2:	8aba      	ldrh	r2, [r7, #20]
 80079a4:	893b      	ldrh	r3, [r7, #8]
 80079a6:	429a      	cmp	r2, r3
 80079a8:	d3f0      	bcc.n	800798c <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80079aa:	f7ff fd6f 	bl	800748c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80079ae:	68f8      	ldr	r0, [r7, #12]
 80079b0:	f000 f9e0 	bl	8007d74 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	689b      	ldr	r3, [r3, #8]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d002      	beq.n	80079c2 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 80079bc:	2301      	movs	r3, #1
 80079be:	75fb      	strb	r3, [r7, #23]
 80079c0:	e001      	b.n	80079c6 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 80079c2:	2300      	movs	r3, #0
 80079c4:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2201      	movs	r2, #1
 80079ca:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2200      	movs	r2, #0
 80079d0:	715a      	strb	r2, [r3, #5]

    return status;
 80079d2:	7dfb      	ldrb	r3, [r7, #23]
 80079d4:	e000      	b.n	80079d8 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80079d6:	2302      	movs	r3, #2
  }
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3718      	adds	r7, #24
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}

080079e0 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b088      	sub	sp, #32
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	60f8      	str	r0, [r7, #12]
 80079e8:	607a      	str	r2, [r7, #4]
 80079ea:	461a      	mov	r2, r3
 80079ec:	460b      	mov	r3, r1
 80079ee:	72fb      	strb	r3, [r7, #11]
 80079f0:	4613      	mov	r3, r2
 80079f2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	799b      	ldrb	r3, [r3, #6]
 80079fc:	b2db      	uxtb	r3, r3
 80079fe:	2b01      	cmp	r3, #1
 8007a00:	d141      	bne.n	8007a86 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	795b      	ldrb	r3, [r3, #5]
 8007a06:	2b01      	cmp	r3, #1
 8007a08:	d101      	bne.n	8007a0e <HAL_SUBGHZ_ReadBuffer+0x2e>
 8007a0a:	2302      	movs	r3, #2
 8007a0c:	e03c      	b.n	8007a88 <HAL_SUBGHZ_ReadBuffer+0xa8>
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2201      	movs	r2, #1
 8007a12:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007a14:	68f8      	ldr	r0, [r7, #12]
 8007a16:	f000 f989 	bl	8007d2c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007a1a:	f7ff fd47 	bl	80074ac <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8007a1e:	211e      	movs	r1, #30
 8007a20:	68f8      	ldr	r0, [r7, #12]
 8007a22:	f000 f8d5 	bl	8007bd0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8007a26:	7afb      	ldrb	r3, [r7, #11]
 8007a28:	4619      	mov	r1, r3
 8007a2a:	68f8      	ldr	r0, [r7, #12]
 8007a2c:	f000 f8d0 	bl	8007bd0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8007a30:	2100      	movs	r1, #0
 8007a32:	68f8      	ldr	r0, [r7, #12]
 8007a34:	f000 f8cc 	bl	8007bd0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007a38:	2300      	movs	r3, #0
 8007a3a:	82fb      	strh	r3, [r7, #22]
 8007a3c:	e009      	b.n	8007a52 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007a3e:	69b9      	ldr	r1, [r7, #24]
 8007a40:	68f8      	ldr	r0, [r7, #12]
 8007a42:	f000 f91b 	bl	8007c7c <SUBGHZSPI_Receive>
      pData++;
 8007a46:	69bb      	ldr	r3, [r7, #24]
 8007a48:	3301      	adds	r3, #1
 8007a4a:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8007a4c:	8afb      	ldrh	r3, [r7, #22]
 8007a4e:	3301      	adds	r3, #1
 8007a50:	82fb      	strh	r3, [r7, #22]
 8007a52:	8afa      	ldrh	r2, [r7, #22]
 8007a54:	893b      	ldrh	r3, [r7, #8]
 8007a56:	429a      	cmp	r2, r3
 8007a58:	d3f1      	bcc.n	8007a3e <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007a5a:	f7ff fd17 	bl	800748c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007a5e:	68f8      	ldr	r0, [r7, #12]
 8007a60:	f000 f988 	bl	8007d74 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	689b      	ldr	r3, [r3, #8]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d002      	beq.n	8007a72 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	77fb      	strb	r3, [r7, #31]
 8007a70:	e001      	b.n	8007a76 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8007a72:	2300      	movs	r3, #0
 8007a74:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	2201      	movs	r2, #1
 8007a7a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	715a      	strb	r2, [r3, #5]

    return status;
 8007a82:	7ffb      	ldrb	r3, [r7, #31]
 8007a84:	e000      	b.n	8007a88 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8007a86:	2302      	movs	r3, #2
  }
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	3720      	adds	r7, #32
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}

08007a90 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b084      	sub	sp, #16
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8007a98:	2300      	movs	r3, #0
 8007a9a:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8007a9c:	f107 020c 	add.w	r2, r7, #12
 8007aa0:	2302      	movs	r3, #2
 8007aa2:	2112      	movs	r1, #18
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f7ff fef4 	bl	8007892 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8007aaa:	7b3b      	ldrb	r3, [r7, #12]
 8007aac:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8007aae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007ab2:	021b      	lsls	r3, r3, #8
 8007ab4:	b21a      	sxth	r2, r3
 8007ab6:	7b7b      	ldrb	r3, [r7, #13]
 8007ab8:	b21b      	sxth	r3, r3
 8007aba:	4313      	orrs	r3, r2
 8007abc:	b21b      	sxth	r3, r3
 8007abe:	81fb      	strh	r3, [r7, #14]

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8007ac0:	89fb      	ldrh	r3, [r7, #14]
 8007ac2:	f003 0301 	and.w	r3, r3, #1
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d002      	beq.n	8007ad0 <HAL_SUBGHZ_IRQHandler+0x40>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f012 fb7e 	bl	801a1cc <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8007ad0:	89fb      	ldrh	r3, [r7, #14]
 8007ad2:	085b      	lsrs	r3, r3, #1
 8007ad4:	f003 0301 	and.w	r3, r3, #1
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d002      	beq.n	8007ae2 <HAL_SUBGHZ_IRQHandler+0x52>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f012 fb83 	bl	801a1e8 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8007ae2:	89fb      	ldrh	r3, [r7, #14]
 8007ae4:	089b      	lsrs	r3, r3, #2
 8007ae6:	f003 0301 	and.w	r3, r3, #1
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d002      	beq.n	8007af4 <HAL_SUBGHZ_IRQHandler+0x64>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f012 fbd2 	bl	801a298 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8007af4:	89fb      	ldrh	r3, [r7, #14]
 8007af6:	08db      	lsrs	r3, r3, #3
 8007af8:	f003 0301 	and.w	r3, r3, #1
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d002      	beq.n	8007b06 <HAL_SUBGHZ_IRQHandler+0x76>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f012 fbd7 	bl	801a2b4 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8007b06:	89fb      	ldrh	r3, [r7, #14]
 8007b08:	091b      	lsrs	r3, r3, #4
 8007b0a:	f003 0301 	and.w	r3, r3, #1
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d002      	beq.n	8007b18 <HAL_SUBGHZ_IRQHandler+0x88>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f012 fbdc 	bl	801a2d0 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8007b18:	89fb      	ldrh	r3, [r7, #14]
 8007b1a:	095b      	lsrs	r3, r3, #5
 8007b1c:	f003 0301 	and.w	r3, r3, #1
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d002      	beq.n	8007b2a <HAL_SUBGHZ_IRQHandler+0x9a>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f012 fba9 	bl	801a27c <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8007b2a:	89fb      	ldrh	r3, [r7, #14]
 8007b2c:	099b      	lsrs	r3, r3, #6
 8007b2e:	f003 0301 	and.w	r3, r3, #1
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d002      	beq.n	8007b3c <HAL_SUBGHZ_IRQHandler+0xac>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f012 fb64 	bl	801a204 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8007b3c:	89fb      	ldrh	r3, [r7, #14]
 8007b3e:	09db      	lsrs	r3, r3, #7
 8007b40:	f003 0301 	and.w	r3, r3, #1
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d00e      	beq.n	8007b66 <HAL_SUBGHZ_IRQHandler+0xd6>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8007b48:	89fb      	ldrh	r3, [r7, #14]
 8007b4a:	0a1b      	lsrs	r3, r3, #8
 8007b4c:	f003 0301 	and.w	r3, r3, #1
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d004      	beq.n	8007b5e <HAL_SUBGHZ_IRQHandler+0xce>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8007b54:	2101      	movs	r1, #1
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f012 fb62 	bl	801a220 <HAL_SUBGHZ_CADStatusCallback>
 8007b5c:	e003      	b.n	8007b66 <HAL_SUBGHZ_IRQHandler+0xd6>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8007b5e:	2100      	movs	r1, #0
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f012 fb5d 	bl	801a220 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8007b66:	89fb      	ldrh	r3, [r7, #14]
 8007b68:	0a5b      	lsrs	r3, r3, #9
 8007b6a:	f003 0301 	and.w	r3, r3, #1
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d002      	beq.n	8007b78 <HAL_SUBGHZ_IRQHandler+0xe8>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f012 fb72 	bl	801a25c <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 8007b78:	f107 020c 	add.w	r2, r7, #12
 8007b7c:	2302      	movs	r3, #2
 8007b7e:	2102      	movs	r1, #2
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f7ff fe27 	bl	80077d4 <HAL_SUBGHZ_ExecSetCmd>
}
 8007b86:	bf00      	nop
 8007b88:	3710      	adds	r7, #16
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}
	...

08007b90 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8007b90:	b480      	push	{r7}
 8007b92:	b083      	sub	sp, #12
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8007b98:	4b0c      	ldr	r3, [pc, #48]	@ (8007bcc <SUBGHZSPI_Init+0x3c>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4a0b      	ldr	r2, [pc, #44]	@ (8007bcc <SUBGHZSPI_Init+0x3c>)
 8007b9e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ba2:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8007ba4:	4a09      	ldr	r2, [pc, #36]	@ (8007bcc <SUBGHZSPI_Init+0x3c>)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f443 7341 	orr.w	r3, r3, #772	@ 0x304
 8007bac:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8007bae:	4b07      	ldr	r3, [pc, #28]	@ (8007bcc <SUBGHZSPI_Init+0x3c>)
 8007bb0:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 8007bb4:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8007bb6:	4b05      	ldr	r3, [pc, #20]	@ (8007bcc <SUBGHZSPI_Init+0x3c>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4a04      	ldr	r2, [pc, #16]	@ (8007bcc <SUBGHZSPI_Init+0x3c>)
 8007bbc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007bc0:	6013      	str	r3, [r2, #0]
}
 8007bc2:	bf00      	nop
 8007bc4:	370c      	adds	r7, #12
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bc80      	pop	{r7}
 8007bca:	4770      	bx	lr
 8007bcc:	58010000 	.word	0x58010000

08007bd0 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b087      	sub	sp, #28
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
 8007bd8:	460b      	mov	r3, r1
 8007bda:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8007bdc:	2300      	movs	r3, #0
 8007bde:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007be0:	4b23      	ldr	r3, [pc, #140]	@ (8007c70 <SUBGHZSPI_Transmit+0xa0>)
 8007be2:	681a      	ldr	r2, [r3, #0]
 8007be4:	4613      	mov	r3, r2
 8007be6:	00db      	lsls	r3, r3, #3
 8007be8:	1a9b      	subs	r3, r3, r2
 8007bea:	009b      	lsls	r3, r3, #2
 8007bec:	0cdb      	lsrs	r3, r3, #19
 8007bee:	2264      	movs	r2, #100	@ 0x64
 8007bf0:	fb02 f303 	mul.w	r3, r2, r3
 8007bf4:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d105      	bne.n	8007c08 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2201      	movs	r2, #1
 8007c04:	609a      	str	r2, [r3, #8]
      break;
 8007c06:	e008      	b.n	8007c1a <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	3b01      	subs	r3, #1
 8007c0c:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8007c0e:	4b19      	ldr	r3, [pc, #100]	@ (8007c74 <SUBGHZSPI_Transmit+0xa4>)
 8007c10:	689b      	ldr	r3, [r3, #8]
 8007c12:	f003 0302 	and.w	r3, r3, #2
 8007c16:	2b02      	cmp	r3, #2
 8007c18:	d1ed      	bne.n	8007bf6 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8007c1a:	4b17      	ldr	r3, [pc, #92]	@ (8007c78 <SUBGHZSPI_Transmit+0xa8>)
 8007c1c:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8007c1e:	693b      	ldr	r3, [r7, #16]
 8007c20:	78fa      	ldrb	r2, [r7, #3]
 8007c22:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007c24:	4b12      	ldr	r3, [pc, #72]	@ (8007c70 <SUBGHZSPI_Transmit+0xa0>)
 8007c26:	681a      	ldr	r2, [r3, #0]
 8007c28:	4613      	mov	r3, r2
 8007c2a:	00db      	lsls	r3, r3, #3
 8007c2c:	1a9b      	subs	r3, r3, r2
 8007c2e:	009b      	lsls	r3, r3, #2
 8007c30:	0cdb      	lsrs	r3, r3, #19
 8007c32:	2264      	movs	r2, #100	@ 0x64
 8007c34:	fb02 f303 	mul.w	r3, r2, r3
 8007c38:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d105      	bne.n	8007c4c <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8007c40:	2301      	movs	r3, #1
 8007c42:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2201      	movs	r2, #1
 8007c48:	609a      	str	r2, [r3, #8]
      break;
 8007c4a:	e008      	b.n	8007c5e <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	3b01      	subs	r3, #1
 8007c50:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8007c52:	4b08      	ldr	r3, [pc, #32]	@ (8007c74 <SUBGHZSPI_Transmit+0xa4>)
 8007c54:	689b      	ldr	r3, [r3, #8]
 8007c56:	f003 0301 	and.w	r3, r3, #1
 8007c5a:	2b01      	cmp	r3, #1
 8007c5c:	d1ed      	bne.n	8007c3a <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8007c5e:	4b05      	ldr	r3, [pc, #20]	@ (8007c74 <SUBGHZSPI_Transmit+0xa4>)
 8007c60:	68db      	ldr	r3, [r3, #12]

  return status;
 8007c62:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	371c      	adds	r7, #28
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bc80      	pop	{r7}
 8007c6c:	4770      	bx	lr
 8007c6e:	bf00      	nop
 8007c70:	20000000 	.word	0x20000000
 8007c74:	58010000 	.word	0x58010000
 8007c78:	5801000c 	.word	0x5801000c

08007c7c <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b087      	sub	sp, #28
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
 8007c84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007c86:	2300      	movs	r3, #0
 8007c88:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007c8a:	4b25      	ldr	r3, [pc, #148]	@ (8007d20 <SUBGHZSPI_Receive+0xa4>)
 8007c8c:	681a      	ldr	r2, [r3, #0]
 8007c8e:	4613      	mov	r3, r2
 8007c90:	00db      	lsls	r3, r3, #3
 8007c92:	1a9b      	subs	r3, r3, r2
 8007c94:	009b      	lsls	r3, r3, #2
 8007c96:	0cdb      	lsrs	r3, r3, #19
 8007c98:	2264      	movs	r2, #100	@ 0x64
 8007c9a:	fb02 f303 	mul.w	r3, r2, r3
 8007c9e:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d105      	bne.n	8007cb2 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2201      	movs	r2, #1
 8007cae:	609a      	str	r2, [r3, #8]
      break;
 8007cb0:	e008      	b.n	8007cc4 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	3b01      	subs	r3, #1
 8007cb6:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8007cb8:	4b1a      	ldr	r3, [pc, #104]	@ (8007d24 <SUBGHZSPI_Receive+0xa8>)
 8007cba:	689b      	ldr	r3, [r3, #8]
 8007cbc:	f003 0302 	and.w	r3, r3, #2
 8007cc0:	2b02      	cmp	r3, #2
 8007cc2:	d1ed      	bne.n	8007ca0 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8007cc4:	4b18      	ldr	r3, [pc, #96]	@ (8007d28 <SUBGHZSPI_Receive+0xac>)
 8007cc6:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	22ff      	movs	r2, #255	@ 0xff
 8007ccc:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007cce:	4b14      	ldr	r3, [pc, #80]	@ (8007d20 <SUBGHZSPI_Receive+0xa4>)
 8007cd0:	681a      	ldr	r2, [r3, #0]
 8007cd2:	4613      	mov	r3, r2
 8007cd4:	00db      	lsls	r3, r3, #3
 8007cd6:	1a9b      	subs	r3, r3, r2
 8007cd8:	009b      	lsls	r3, r3, #2
 8007cda:	0cdb      	lsrs	r3, r3, #19
 8007cdc:	2264      	movs	r2, #100	@ 0x64
 8007cde:	fb02 f303 	mul.w	r3, r2, r3
 8007ce2:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d105      	bne.n	8007cf6 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8007cea:	2301      	movs	r3, #1
 8007cec:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2201      	movs	r2, #1
 8007cf2:	609a      	str	r2, [r3, #8]
      break;
 8007cf4:	e008      	b.n	8007d08 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	3b01      	subs	r3, #1
 8007cfa:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8007cfc:	4b09      	ldr	r3, [pc, #36]	@ (8007d24 <SUBGHZSPI_Receive+0xa8>)
 8007cfe:	689b      	ldr	r3, [r3, #8]
 8007d00:	f003 0301 	and.w	r3, r3, #1
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	d1ed      	bne.n	8007ce4 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8007d08:	4b06      	ldr	r3, [pc, #24]	@ (8007d24 <SUBGHZSPI_Receive+0xa8>)
 8007d0a:	68db      	ldr	r3, [r3, #12]
 8007d0c:	b2da      	uxtb	r2, r3
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	701a      	strb	r2, [r3, #0]

  return status;
 8007d12:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	371c      	adds	r7, #28
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bc80      	pop	{r7}
 8007d1c:	4770      	bx	lr
 8007d1e:	bf00      	nop
 8007d20:	20000000 	.word	0x20000000
 8007d24:	58010000 	.word	0x58010000
 8007d28:	5801000c 	.word	0x5801000c

08007d2c <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b084      	sub	sp, #16
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	791b      	ldrb	r3, [r3, #4]
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d111      	bne.n	8007d60 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8007d3c:	4b0c      	ldr	r3, [pc, #48]	@ (8007d70 <SUBGHZ_CheckDeviceReady+0x44>)
 8007d3e:	681a      	ldr	r2, [r3, #0]
 8007d40:	4613      	mov	r3, r2
 8007d42:	005b      	lsls	r3, r3, #1
 8007d44:	4413      	add	r3, r2
 8007d46:	00db      	lsls	r3, r3, #3
 8007d48:	0c1b      	lsrs	r3, r3, #16
 8007d4a:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007d4c:	f7ff fbae 	bl	80074ac <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	3b01      	subs	r3, #1
 8007d54:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d1f9      	bne.n	8007d50 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007d5c:	f7ff fb96 	bl	800748c <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f000 f807 	bl	8007d74 <SUBGHZ_WaitOnBusy>
 8007d66:	4603      	mov	r3, r0
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3710      	adds	r7, #16
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}
 8007d70:	20000000 	.word	0x20000000

08007d74 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b086      	sub	sp, #24
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8007d80:	4b12      	ldr	r3, [pc, #72]	@ (8007dcc <SUBGHZ_WaitOnBusy+0x58>)
 8007d82:	681a      	ldr	r2, [r3, #0]
 8007d84:	4613      	mov	r3, r2
 8007d86:	005b      	lsls	r3, r3, #1
 8007d88:	4413      	add	r3, r2
 8007d8a:	00db      	lsls	r3, r3, #3
 8007d8c:	0d1b      	lsrs	r3, r3, #20
 8007d8e:	2264      	movs	r2, #100	@ 0x64
 8007d90:	fb02 f303 	mul.w	r3, r2, r3
 8007d94:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8007d96:	f7ff fbb7 	bl	8007508 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8007d9a:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d105      	bne.n	8007dae <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8007da2:	2301      	movs	r3, #1
 8007da4:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2202      	movs	r2, #2
 8007daa:	609a      	str	r2, [r3, #8]
      break;
 8007dac:	e009      	b.n	8007dc2 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	3b01      	subs	r3, #1
 8007db2:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8007db4:	f7ff fb96 	bl	80074e4 <LL_PWR_IsActiveFlag_RFBUSYS>
 8007db8:	4602      	mov	r2, r0
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	4013      	ands	r3, r2
 8007dbe:	2b01      	cmp	r3, #1
 8007dc0:	d0e9      	beq.n	8007d96 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8007dc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	3718      	adds	r7, #24
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd80      	pop	{r7, pc}
 8007dcc:	20000000 	.word	0x20000000

08007dd0 <LL_RCC_GetUSARTClockSource>:
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b083      	sub	sp, #12
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8007dd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007ddc:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	401a      	ands	r2, r3
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	041b      	lsls	r3, r3, #16
 8007de8:	4313      	orrs	r3, r2
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	370c      	adds	r7, #12
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bc80      	pop	{r7}
 8007df2:	4770      	bx	lr

08007df4 <LL_RCC_GetLPUARTClockSource>:
{
 8007df4:	b480      	push	{r7}
 8007df6:	b083      	sub	sp, #12
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8007dfc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007e00:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	4013      	ands	r3, r2
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	370c      	adds	r7, #12
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bc80      	pop	{r7}
 8007e10:	4770      	bx	lr

08007e12 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007e12:	b580      	push	{r7, lr}
 8007e14:	b082      	sub	sp, #8
 8007e16:	af00      	add	r7, sp, #0
 8007e18:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d101      	bne.n	8007e24 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e20:	2301      	movs	r3, #1
 8007e22:	e042      	b.n	8007eaa <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d106      	bne.n	8007e3c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2200      	movs	r2, #0
 8007e32:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f7fa fe44 	bl	8002ac4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2224      	movs	r2, #36	@ 0x24
 8007e40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  __HAL_UART_DISABLE(huart);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	681a      	ldr	r2, [r3, #0]
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f022 0201 	bic.w	r2, r2, #1
 8007e52:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f000 fc4b 	bl	80086f0 <UART_SetConfig>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	2b01      	cmp	r3, #1
 8007e5e:	d101      	bne.n	8007e64 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007e60:	2301      	movs	r3, #1
 8007e62:	e022      	b.n	8007eaa <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d002      	beq.n	8007e72 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f000 feb3 	bl	8008bd8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	685a      	ldr	r2, [r3, #4]
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007e80:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	689a      	ldr	r2, [r3, #8]
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007e90:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	681a      	ldr	r2, [r3, #0]
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f042 0201 	orr.w	r2, r2, #1
 8007ea0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f000 ff39 	bl	8008d1a <UART_CheckIdleState>
 8007ea8:	4603      	mov	r3, r0
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3708      	adds	r7, #8
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}
	...

08007eb4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b08a      	sub	sp, #40	@ 0x28
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	60f8      	str	r0, [r7, #12]
 8007ebc:	60b9      	str	r1, [r7, #8]
 8007ebe:	4613      	mov	r3, r2
 8007ec0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ec8:	2b20      	cmp	r3, #32
 8007eca:	d142      	bne.n	8007f52 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d002      	beq.n	8007ed8 <HAL_UART_Receive_IT+0x24>
 8007ed2:	88fb      	ldrh	r3, [r7, #6]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d101      	bne.n	8007edc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007ed8:	2301      	movs	r3, #1
 8007eda:	e03b      	b.n	8007f54 <HAL_UART_Receive_IT+0xa0>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007ee2:	2b01      	cmp	r3, #1
 8007ee4:	d101      	bne.n	8007eea <HAL_UART_Receive_IT+0x36>
 8007ee6:	2302      	movs	r3, #2
 8007ee8:	e034      	b.n	8007f54 <HAL_UART_Receive_IT+0xa0>
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	2201      	movs	r2, #1
 8007eee:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4a17      	ldr	r2, [pc, #92]	@ (8007f5c <HAL_UART_Receive_IT+0xa8>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d01f      	beq.n	8007f42 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	685b      	ldr	r3, [r3, #4]
 8007f08:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d018      	beq.n	8007f42 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	e853 3f00 	ldrex	r3, [r3]
 8007f1c:	613b      	str	r3, [r7, #16]
   return(result);
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007f24:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	461a      	mov	r2, r3
 8007f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f2e:	623b      	str	r3, [r7, #32]
 8007f30:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f32:	69f9      	ldr	r1, [r7, #28]
 8007f34:	6a3a      	ldr	r2, [r7, #32]
 8007f36:	e841 2300 	strex	r3, r2, [r1]
 8007f3a:	61bb      	str	r3, [r7, #24]
   return(result);
 8007f3c:	69bb      	ldr	r3, [r7, #24]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d1e6      	bne.n	8007f10 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8007f42:	88fb      	ldrh	r3, [r7, #6]
 8007f44:	461a      	mov	r2, r3
 8007f46:	68b9      	ldr	r1, [r7, #8]
 8007f48:	68f8      	ldr	r0, [r7, #12]
 8007f4a:	f000 fff9 	bl	8008f40 <UART_Start_Receive_IT>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	e000      	b.n	8007f54 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007f52:	2302      	movs	r3, #2
  }
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	3728      	adds	r7, #40	@ 0x28
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}
 8007f5c:	40008000 	.word	0x40008000

08007f60 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b08a      	sub	sp, #40	@ 0x28
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	60f8      	str	r0, [r7, #12]
 8007f68:	60b9      	str	r1, [r7, #8]
 8007f6a:	4613      	mov	r3, r2
 8007f6c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f74:	2b20      	cmp	r3, #32
 8007f76:	d17a      	bne.n	800806e <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d002      	beq.n	8007f84 <HAL_UART_Transmit_DMA+0x24>
 8007f7e:	88fb      	ldrh	r3, [r7, #6]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d101      	bne.n	8007f88 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8007f84:	2301      	movs	r3, #1
 8007f86:	e073      	b.n	8008070 <HAL_UART_Transmit_DMA+0x110>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007f8e:	2b01      	cmp	r3, #1
 8007f90:	d101      	bne.n	8007f96 <HAL_UART_Transmit_DMA+0x36>
 8007f92:	2302      	movs	r3, #2
 8007f94:	e06c      	b.n	8008070 <HAL_UART_Transmit_DMA+0x110>
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2201      	movs	r2, #1
 8007f9a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    huart->pTxBuffPtr  = pData;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	68ba      	ldr	r2, [r7, #8]
 8007fa2:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	88fa      	ldrh	r2, [r7, #6]
 8007fa8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	88fa      	ldrh	r2, [r7, #6]
 8007fb0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	2221      	movs	r2, #33	@ 0x21
 8007fc0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    if (huart->hdmatx != NULL)
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d02c      	beq.n	8008026 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007fd0:	4a29      	ldr	r2, [pc, #164]	@ (8008078 <HAL_UART_Transmit_DMA+0x118>)
 8007fd2:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007fd8:	4a28      	ldr	r2, [pc, #160]	@ (800807c <HAL_UART_Transmit_DMA+0x11c>)
 8007fda:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007fe0:	4a27      	ldr	r2, [pc, #156]	@ (8008080 <HAL_UART_Transmit_DMA+0x120>)
 8007fe2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007fe8:	2200      	movs	r2, #0
 8007fea:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ff4:	4619      	mov	r1, r3
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	3328      	adds	r3, #40	@ 0x28
 8007ffc:	461a      	mov	r2, r3
 8007ffe:	88fb      	ldrh	r3, [r7, #6]
 8008000:	f7fc fb86 	bl	8004710 <HAL_DMA_Start_IT>
 8008004:	4603      	mov	r3, r0
 8008006:	2b00      	cmp	r3, #0
 8008008:	d00d      	beq.n	8008026 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	2210      	movs	r2, #16
 800800e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	2200      	movs	r2, #0
 8008016:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	2220      	movs	r2, #32
 800801e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        return HAL_ERROR;
 8008022:	2301      	movs	r3, #1
 8008024:	e024      	b.n	8008070 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	2240      	movs	r2, #64	@ 0x40
 800802c:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	2200      	movs	r2, #0
 8008032:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	3308      	adds	r3, #8
 800803c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	e853 3f00 	ldrex	r3, [r3]
 8008044:	613b      	str	r3, [r7, #16]
   return(result);
 8008046:	693b      	ldr	r3, [r7, #16]
 8008048:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800804c:	627b      	str	r3, [r7, #36]	@ 0x24
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	3308      	adds	r3, #8
 8008054:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008056:	623a      	str	r2, [r7, #32]
 8008058:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800805a:	69f9      	ldr	r1, [r7, #28]
 800805c:	6a3a      	ldr	r2, [r7, #32]
 800805e:	e841 2300 	strex	r3, r2, [r1]
 8008062:	61bb      	str	r3, [r7, #24]
   return(result);
 8008064:	69bb      	ldr	r3, [r7, #24]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d1e5      	bne.n	8008036 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800806a:	2300      	movs	r3, #0
 800806c:	e000      	b.n	8008070 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800806e:	2302      	movs	r3, #2
  }
}
 8008070:	4618      	mov	r0, r3
 8008072:	3728      	adds	r7, #40	@ 0x28
 8008074:	46bd      	mov	sp, r7
 8008076:	bd80      	pop	{r7, pc}
 8008078:	080092db 	.word	0x080092db
 800807c:	08009375 	.word	0x08009375
 8008080:	08009391 	.word	0x08009391

08008084 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b0ba      	sub	sp, #232	@ 0xe8
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	69db      	ldr	r3, [r3, #28]
 8008092:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	689b      	ldr	r3, [r3, #8]
 80080a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80080aa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80080ae:	f640 030f 	movw	r3, #2063	@ 0x80f
 80080b2:	4013      	ands	r3, r2
 80080b4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80080b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d11b      	bne.n	80080f8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80080c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080c4:	f003 0320 	and.w	r3, r3, #32
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d015      	beq.n	80080f8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80080cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80080d0:	f003 0320 	and.w	r3, r3, #32
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d105      	bne.n	80080e4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80080d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80080dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d009      	beq.n	80080f8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	f000 82d6 	beq.w	800869a <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	4798      	blx	r3
      }
      return;
 80080f6:	e2d0      	b.n	800869a <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80080f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	f000 811f 	beq.w	8008340 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008102:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008106:	4b8b      	ldr	r3, [pc, #556]	@ (8008334 <HAL_UART_IRQHandler+0x2b0>)
 8008108:	4013      	ands	r3, r2
 800810a:	2b00      	cmp	r3, #0
 800810c:	d106      	bne.n	800811c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800810e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008112:	4b89      	ldr	r3, [pc, #548]	@ (8008338 <HAL_UART_IRQHandler+0x2b4>)
 8008114:	4013      	ands	r3, r2
 8008116:	2b00      	cmp	r3, #0
 8008118:	f000 8112 	beq.w	8008340 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800811c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008120:	f003 0301 	and.w	r3, r3, #1
 8008124:	2b00      	cmp	r3, #0
 8008126:	d011      	beq.n	800814c <HAL_UART_IRQHandler+0xc8>
 8008128:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800812c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008130:	2b00      	cmp	r3, #0
 8008132:	d00b      	beq.n	800814c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	2201      	movs	r2, #1
 800813a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008142:	f043 0201 	orr.w	r2, r3, #1
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800814c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008150:	f003 0302 	and.w	r3, r3, #2
 8008154:	2b00      	cmp	r3, #0
 8008156:	d011      	beq.n	800817c <HAL_UART_IRQHandler+0xf8>
 8008158:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800815c:	f003 0301 	and.w	r3, r3, #1
 8008160:	2b00      	cmp	r3, #0
 8008162:	d00b      	beq.n	800817c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	2202      	movs	r2, #2
 800816a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008172:	f043 0204 	orr.w	r2, r3, #4
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800817c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008180:	f003 0304 	and.w	r3, r3, #4
 8008184:	2b00      	cmp	r3, #0
 8008186:	d011      	beq.n	80081ac <HAL_UART_IRQHandler+0x128>
 8008188:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800818c:	f003 0301 	and.w	r3, r3, #1
 8008190:	2b00      	cmp	r3, #0
 8008192:	d00b      	beq.n	80081ac <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	2204      	movs	r2, #4
 800819a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80081a2:	f043 0202 	orr.w	r2, r3, #2
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80081ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081b0:	f003 0308 	and.w	r3, r3, #8
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d017      	beq.n	80081e8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80081b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80081bc:	f003 0320 	and.w	r3, r3, #32
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d105      	bne.n	80081d0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80081c4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80081c8:	4b5a      	ldr	r3, [pc, #360]	@ (8008334 <HAL_UART_IRQHandler+0x2b0>)
 80081ca:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d00b      	beq.n	80081e8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	2208      	movs	r2, #8
 80081d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80081de:	f043 0208 	orr.w	r2, r3, #8
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80081e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d012      	beq.n	800821a <HAL_UART_IRQHandler+0x196>
 80081f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80081f8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d00c      	beq.n	800821a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008208:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008210:	f043 0220 	orr.w	r2, r3, #32
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008220:	2b00      	cmp	r3, #0
 8008222:	f000 823c 	beq.w	800869e <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008226:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800822a:	f003 0320 	and.w	r3, r3, #32
 800822e:	2b00      	cmp	r3, #0
 8008230:	d013      	beq.n	800825a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008232:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008236:	f003 0320 	and.w	r3, r3, #32
 800823a:	2b00      	cmp	r3, #0
 800823c:	d105      	bne.n	800824a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800823e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008242:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008246:	2b00      	cmp	r3, #0
 8008248:	d007      	beq.n	800825a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800824e:	2b00      	cmp	r3, #0
 8008250:	d003      	beq.n	800825a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008260:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	689b      	ldr	r3, [r3, #8]
 800826a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800826e:	2b40      	cmp	r3, #64	@ 0x40
 8008270:	d005      	beq.n	800827e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008272:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008276:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800827a:	2b00      	cmp	r3, #0
 800827c:	d04f      	beq.n	800831e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f000 ffc6 	bl	8009210 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	689b      	ldr	r3, [r3, #8]
 800828a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800828e:	2b40      	cmp	r3, #64	@ 0x40
 8008290:	d141      	bne.n	8008316 <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	3308      	adds	r3, #8
 8008298:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800829c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80082a0:	e853 3f00 	ldrex	r3, [r3]
 80082a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80082a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80082ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80082b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	3308      	adds	r3, #8
 80082ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80082be:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80082c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80082ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80082ce:	e841 2300 	strex	r3, r2, [r1]
 80082d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80082d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d1d9      	bne.n	8008292 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d013      	beq.n	800830e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80082ea:	4a14      	ldr	r2, [pc, #80]	@ (800833c <HAL_UART_IRQHandler+0x2b8>)
 80082ec:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80082f2:	4618      	mov	r0, r3
 80082f4:	f7fc fae8 	bl	80048c8 <HAL_DMA_Abort_IT>
 80082f8:	4603      	mov	r3, r0
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d017      	beq.n	800832e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008302:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008304:	687a      	ldr	r2, [r7, #4]
 8008306:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
 8008308:	4610      	mov	r0, r2
 800830a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800830c:	e00f      	b.n	800832e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f000 f9d9 	bl	80086c6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008314:	e00b      	b.n	800832e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f000 f9d5 	bl	80086c6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800831c:	e007      	b.n	800832e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f000 f9d1 	bl	80086c6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2200      	movs	r2, #0
 8008328:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      }
    }
    return;
 800832c:	e1b7      	b.n	800869e <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800832e:	bf00      	nop
    return;
 8008330:	e1b5      	b.n	800869e <HAL_UART_IRQHandler+0x61a>
 8008332:	bf00      	nop
 8008334:	10000001 	.word	0x10000001
 8008338:	04000120 	.word	0x04000120
 800833c:	08009411 	.word	0x08009411

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008344:	2b01      	cmp	r3, #1
 8008346:	f040 814a 	bne.w	80085de <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800834a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800834e:	f003 0310 	and.w	r3, r3, #16
 8008352:	2b00      	cmp	r3, #0
 8008354:	f000 8143 	beq.w	80085de <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8008358:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800835c:	f003 0310 	and.w	r3, r3, #16
 8008360:	2b00      	cmp	r3, #0
 8008362:	f000 813c 	beq.w	80085de <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	2210      	movs	r2, #16
 800836c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	689b      	ldr	r3, [r3, #8]
 8008374:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008378:	2b40      	cmp	r3, #64	@ 0x40
 800837a:	f040 80b5 	bne.w	80084e8 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	685b      	ldr	r3, [r3, #4]
 8008386:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if (  (nb_remaining_rx_data > 0U)
 800838a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800838e:	2b00      	cmp	r3, #0
 8008390:	f000 8187 	beq.w	80086a2 <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800839a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800839e:	429a      	cmp	r2, r3
 80083a0:	f080 817f 	bcs.w	80086a2 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80083aa:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f003 0320 	and.w	r3, r3, #32
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	f040 8086 	bne.w	80084cc <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80083cc:	e853 3f00 	ldrex	r3, [r3]
 80083d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80083d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80083d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80083dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	461a      	mov	r2, r3
 80083e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80083ea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80083ee:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80083f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80083fa:	e841 2300 	strex	r3, r2, [r1]
 80083fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008402:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008406:	2b00      	cmp	r3, #0
 8008408:	d1da      	bne.n	80083c0 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	3308      	adds	r3, #8
 8008410:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008412:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008414:	e853 3f00 	ldrex	r3, [r3]
 8008418:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800841a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800841c:	f023 0301 	bic.w	r3, r3, #1
 8008420:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	3308      	adds	r3, #8
 800842a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800842e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008432:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008434:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008436:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800843a:	e841 2300 	strex	r3, r2, [r1]
 800843e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008440:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008442:	2b00      	cmp	r3, #0
 8008444:	d1e1      	bne.n	800840a <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	3308      	adds	r3, #8
 800844c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800844e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008450:	e853 3f00 	ldrex	r3, [r3]
 8008454:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008456:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008458:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800845c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	3308      	adds	r3, #8
 8008466:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800846a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800846c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800846e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008470:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008472:	e841 2300 	strex	r3, r2, [r1]
 8008476:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008478:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800847a:	2b00      	cmp	r3, #0
 800847c:	d1e3      	bne.n	8008446 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2220      	movs	r2, #32
 8008482:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2200      	movs	r2, #0
 800848a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008492:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008494:	e853 3f00 	ldrex	r3, [r3]
 8008498:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800849a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800849c:	f023 0310 	bic.w	r3, r3, #16
 80084a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	461a      	mov	r2, r3
 80084aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80084ae:	65bb      	str	r3, [r7, #88]	@ 0x58
 80084b0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084b2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80084b4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80084b6:	e841 2300 	strex	r3, r2, [r1]
 80084ba:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80084bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d1e4      	bne.n	800848c <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80084c6:	4618      	mov	r0, r3
 80084c8:	f7fc f9a0 	bl	800480c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80084d8:	b29b      	uxth	r3, r3
 80084da:	1ad3      	subs	r3, r2, r3
 80084dc:	b29b      	uxth	r3, r3
 80084de:	4619      	mov	r1, r3
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f000 f8f9 	bl	80086d8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80084e6:	e0dc      	b.n	80086a2 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80084f4:	b29b      	uxth	r3, r3
 80084f6:	1ad3      	subs	r3, r2, r3
 80084f8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if (  (huart->RxXferCount > 0U)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008502:	b29b      	uxth	r3, r3
 8008504:	2b00      	cmp	r3, #0
 8008506:	f000 80ce 	beq.w	80086a6 <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 800850a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800850e:	2b00      	cmp	r3, #0
 8008510:	f000 80c9 	beq.w	80086a6 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800851a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800851c:	e853 3f00 	ldrex	r3, [r3]
 8008520:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008522:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008524:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008528:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	461a      	mov	r2, r3
 8008532:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008536:	647b      	str	r3, [r7, #68]	@ 0x44
 8008538:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800853a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800853c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800853e:	e841 2300 	strex	r3, r2, [r1]
 8008542:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008544:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008546:	2b00      	cmp	r3, #0
 8008548:	d1e4      	bne.n	8008514 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	3308      	adds	r3, #8
 8008550:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008554:	e853 3f00 	ldrex	r3, [r3]
 8008558:	623b      	str	r3, [r7, #32]
   return(result);
 800855a:	6a3b      	ldr	r3, [r7, #32]
 800855c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008560:	f023 0301 	bic.w	r3, r3, #1
 8008564:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	3308      	adds	r3, #8
 800856e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008572:	633a      	str	r2, [r7, #48]	@ 0x30
 8008574:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008576:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008578:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800857a:	e841 2300 	strex	r3, r2, [r1]
 800857e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008582:	2b00      	cmp	r3, #0
 8008584:	d1e1      	bne.n	800854a <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2220      	movs	r2, #32
 800858a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2200      	movs	r2, #0
 8008592:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2200      	movs	r2, #0
 8008598:	671a      	str	r2, [r3, #112]	@ 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085a0:	693b      	ldr	r3, [r7, #16]
 80085a2:	e853 3f00 	ldrex	r3, [r3]
 80085a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	f023 0310 	bic.w	r3, r3, #16
 80085ae:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	461a      	mov	r2, r3
 80085b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80085bc:	61fb      	str	r3, [r7, #28]
 80085be:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085c0:	69b9      	ldr	r1, [r7, #24]
 80085c2:	69fa      	ldr	r2, [r7, #28]
 80085c4:	e841 2300 	strex	r3, r2, [r1]
 80085c8:	617b      	str	r3, [r7, #20]
   return(result);
 80085ca:	697b      	ldr	r3, [r7, #20]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d1e4      	bne.n	800859a <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80085d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80085d4:	4619      	mov	r1, r3
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f000 f87e 	bl	80086d8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80085dc:	e063      	b.n	80086a6 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80085de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d00e      	beq.n	8008608 <HAL_UART_IRQHandler+0x584>
 80085ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80085ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d008      	beq.n	8008608 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80085fe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f001 fba3 	bl	8009d4c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008606:	e051      	b.n	80086ac <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008608:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800860c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008610:	2b00      	cmp	r3, #0
 8008612:	d014      	beq.n	800863e <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008614:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008618:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800861c:	2b00      	cmp	r3, #0
 800861e:	d105      	bne.n	800862c <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008620:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008624:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008628:	2b00      	cmp	r3, #0
 800862a:	d008      	beq.n	800863e <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008630:	2b00      	cmp	r3, #0
 8008632:	d03a      	beq.n	80086aa <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	4798      	blx	r3
    }
    return;
 800863c:	e035      	b.n	80086aa <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800863e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008642:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008646:	2b00      	cmp	r3, #0
 8008648:	d009      	beq.n	800865e <HAL_UART_IRQHandler+0x5da>
 800864a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800864e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008652:	2b00      	cmp	r3, #0
 8008654:	d003      	beq.n	800865e <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f000 fef0 	bl	800943c <UART_EndTransmit_IT>
    return;
 800865c:	e026      	b.n	80086ac <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800865e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008662:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008666:	2b00      	cmp	r3, #0
 8008668:	d009      	beq.n	800867e <HAL_UART_IRQHandler+0x5fa>
 800866a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800866e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008672:	2b00      	cmp	r3, #0
 8008674:	d003      	beq.n	800867e <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f001 fb7a 	bl	8009d70 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800867c:	e016      	b.n	80086ac <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800867e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008682:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008686:	2b00      	cmp	r3, #0
 8008688:	d010      	beq.n	80086ac <HAL_UART_IRQHandler+0x628>
 800868a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800868e:	2b00      	cmp	r3, #0
 8008690:	da0c      	bge.n	80086ac <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f001 fb63 	bl	8009d5e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008698:	e008      	b.n	80086ac <HAL_UART_IRQHandler+0x628>
      return;
 800869a:	bf00      	nop
 800869c:	e006      	b.n	80086ac <HAL_UART_IRQHandler+0x628>
    return;
 800869e:	bf00      	nop
 80086a0:	e004      	b.n	80086ac <HAL_UART_IRQHandler+0x628>
      return;
 80086a2:	bf00      	nop
 80086a4:	e002      	b.n	80086ac <HAL_UART_IRQHandler+0x628>
      return;
 80086a6:	bf00      	nop
 80086a8:	e000      	b.n	80086ac <HAL_UART_IRQHandler+0x628>
    return;
 80086aa:	bf00      	nop
  }
}
 80086ac:	37e8      	adds	r7, #232	@ 0xe8
 80086ae:	46bd      	mov	sp, r7
 80086b0:	bd80      	pop	{r7, pc}
 80086b2:	bf00      	nop

080086b4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80086b4:	b480      	push	{r7}
 80086b6:	b083      	sub	sp, #12
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80086bc:	bf00      	nop
 80086be:	370c      	adds	r7, #12
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bc80      	pop	{r7}
 80086c4:	4770      	bx	lr

080086c6 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80086c6:	b480      	push	{r7}
 80086c8:	b083      	sub	sp, #12
 80086ca:	af00      	add	r7, sp, #0
 80086cc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80086ce:	bf00      	nop
 80086d0:	370c      	adds	r7, #12
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bc80      	pop	{r7}
 80086d6:	4770      	bx	lr

080086d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80086d8:	b480      	push	{r7}
 80086da:	b083      	sub	sp, #12
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
 80086e0:	460b      	mov	r3, r1
 80086e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80086e4:	bf00      	nop
 80086e6:	370c      	adds	r7, #12
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bc80      	pop	{r7}
 80086ec:	4770      	bx	lr
	...

080086f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80086f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80086f4:	b08c      	sub	sp, #48	@ 0x30
 80086f6:	af00      	add	r7, sp, #0
 80086f8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80086fa:	2300      	movs	r3, #0
 80086fc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008700:	697b      	ldr	r3, [r7, #20]
 8008702:	689a      	ldr	r2, [r3, #8]
 8008704:	697b      	ldr	r3, [r7, #20]
 8008706:	691b      	ldr	r3, [r3, #16]
 8008708:	431a      	orrs	r2, r3
 800870a:	697b      	ldr	r3, [r7, #20]
 800870c:	695b      	ldr	r3, [r3, #20]
 800870e:	431a      	orrs	r2, r3
 8008710:	697b      	ldr	r3, [r7, #20]
 8008712:	69db      	ldr	r3, [r3, #28]
 8008714:	4313      	orrs	r3, r2
 8008716:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	681a      	ldr	r2, [r3, #0]
 800871e:	4b94      	ldr	r3, [pc, #592]	@ (8008970 <UART_SetConfig+0x280>)
 8008720:	4013      	ands	r3, r2
 8008722:	697a      	ldr	r2, [r7, #20]
 8008724:	6812      	ldr	r2, [r2, #0]
 8008726:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008728:	430b      	orrs	r3, r1
 800872a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800872c:	697b      	ldr	r3, [r7, #20]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	685b      	ldr	r3, [r3, #4]
 8008732:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	68da      	ldr	r2, [r3, #12]
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	430a      	orrs	r2, r1
 8008740:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	699b      	ldr	r3, [r3, #24]
 8008746:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	4a89      	ldr	r2, [pc, #548]	@ (8008974 <UART_SetConfig+0x284>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d004      	beq.n	800875c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	6a1b      	ldr	r3, [r3, #32]
 8008756:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008758:	4313      	orrs	r3, r2
 800875a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800875c:	697b      	ldr	r3, [r7, #20]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	689b      	ldr	r3, [r3, #8]
 8008762:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8008766:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800876a:	697a      	ldr	r2, [r7, #20]
 800876c:	6812      	ldr	r2, [r2, #0]
 800876e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008770:	430b      	orrs	r3, r1
 8008772:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008774:	697b      	ldr	r3, [r7, #20]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800877a:	f023 010f 	bic.w	r1, r3, #15
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	430a      	orrs	r2, r1
 8008788:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	4a7a      	ldr	r2, [pc, #488]	@ (8008978 <UART_SetConfig+0x288>)
 8008790:	4293      	cmp	r3, r2
 8008792:	d127      	bne.n	80087e4 <UART_SetConfig+0xf4>
 8008794:	2003      	movs	r0, #3
 8008796:	f7ff fb1b 	bl	8007dd0 <LL_RCC_GetUSARTClockSource>
 800879a:	4603      	mov	r3, r0
 800879c:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 80087a0:	2b03      	cmp	r3, #3
 80087a2:	d81b      	bhi.n	80087dc <UART_SetConfig+0xec>
 80087a4:	a201      	add	r2, pc, #4	@ (adr r2, 80087ac <UART_SetConfig+0xbc>)
 80087a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087aa:	bf00      	nop
 80087ac:	080087bd 	.word	0x080087bd
 80087b0:	080087cd 	.word	0x080087cd
 80087b4:	080087c5 	.word	0x080087c5
 80087b8:	080087d5 	.word	0x080087d5
 80087bc:	2301      	movs	r3, #1
 80087be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087c2:	e080      	b.n	80088c6 <UART_SetConfig+0x1d6>
 80087c4:	2302      	movs	r3, #2
 80087c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087ca:	e07c      	b.n	80088c6 <UART_SetConfig+0x1d6>
 80087cc:	2304      	movs	r3, #4
 80087ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087d2:	e078      	b.n	80088c6 <UART_SetConfig+0x1d6>
 80087d4:	2308      	movs	r3, #8
 80087d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087da:	e074      	b.n	80088c6 <UART_SetConfig+0x1d6>
 80087dc:	2310      	movs	r3, #16
 80087de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087e2:	e070      	b.n	80088c6 <UART_SetConfig+0x1d6>
 80087e4:	697b      	ldr	r3, [r7, #20]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4a64      	ldr	r2, [pc, #400]	@ (800897c <UART_SetConfig+0x28c>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d138      	bne.n	8008860 <UART_SetConfig+0x170>
 80087ee:	200c      	movs	r0, #12
 80087f0:	f7ff faee 	bl	8007dd0 <LL_RCC_GetUSARTClockSource>
 80087f4:	4603      	mov	r3, r0
 80087f6:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 80087fa:	2b0c      	cmp	r3, #12
 80087fc:	d82c      	bhi.n	8008858 <UART_SetConfig+0x168>
 80087fe:	a201      	add	r2, pc, #4	@ (adr r2, 8008804 <UART_SetConfig+0x114>)
 8008800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008804:	08008839 	.word	0x08008839
 8008808:	08008859 	.word	0x08008859
 800880c:	08008859 	.word	0x08008859
 8008810:	08008859 	.word	0x08008859
 8008814:	08008849 	.word	0x08008849
 8008818:	08008859 	.word	0x08008859
 800881c:	08008859 	.word	0x08008859
 8008820:	08008859 	.word	0x08008859
 8008824:	08008841 	.word	0x08008841
 8008828:	08008859 	.word	0x08008859
 800882c:	08008859 	.word	0x08008859
 8008830:	08008859 	.word	0x08008859
 8008834:	08008851 	.word	0x08008851
 8008838:	2300      	movs	r3, #0
 800883a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800883e:	e042      	b.n	80088c6 <UART_SetConfig+0x1d6>
 8008840:	2302      	movs	r3, #2
 8008842:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008846:	e03e      	b.n	80088c6 <UART_SetConfig+0x1d6>
 8008848:	2304      	movs	r3, #4
 800884a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800884e:	e03a      	b.n	80088c6 <UART_SetConfig+0x1d6>
 8008850:	2308      	movs	r3, #8
 8008852:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008856:	e036      	b.n	80088c6 <UART_SetConfig+0x1d6>
 8008858:	2310      	movs	r3, #16
 800885a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800885e:	e032      	b.n	80088c6 <UART_SetConfig+0x1d6>
 8008860:	697b      	ldr	r3, [r7, #20]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	4a43      	ldr	r2, [pc, #268]	@ (8008974 <UART_SetConfig+0x284>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d12a      	bne.n	80088c0 <UART_SetConfig+0x1d0>
 800886a:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 800886e:	f7ff fac1 	bl	8007df4 <LL_RCC_GetLPUARTClockSource>
 8008872:	4603      	mov	r3, r0
 8008874:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008878:	d01a      	beq.n	80088b0 <UART_SetConfig+0x1c0>
 800887a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800887e:	d81b      	bhi.n	80088b8 <UART_SetConfig+0x1c8>
 8008880:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008884:	d00c      	beq.n	80088a0 <UART_SetConfig+0x1b0>
 8008886:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800888a:	d815      	bhi.n	80088b8 <UART_SetConfig+0x1c8>
 800888c:	2b00      	cmp	r3, #0
 800888e:	d003      	beq.n	8008898 <UART_SetConfig+0x1a8>
 8008890:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008894:	d008      	beq.n	80088a8 <UART_SetConfig+0x1b8>
 8008896:	e00f      	b.n	80088b8 <UART_SetConfig+0x1c8>
 8008898:	2300      	movs	r3, #0
 800889a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800889e:	e012      	b.n	80088c6 <UART_SetConfig+0x1d6>
 80088a0:	2302      	movs	r3, #2
 80088a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088a6:	e00e      	b.n	80088c6 <UART_SetConfig+0x1d6>
 80088a8:	2304      	movs	r3, #4
 80088aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088ae:	e00a      	b.n	80088c6 <UART_SetConfig+0x1d6>
 80088b0:	2308      	movs	r3, #8
 80088b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088b6:	e006      	b.n	80088c6 <UART_SetConfig+0x1d6>
 80088b8:	2310      	movs	r3, #16
 80088ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088be:	e002      	b.n	80088c6 <UART_SetConfig+0x1d6>
 80088c0:	2310      	movs	r3, #16
 80088c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80088c6:	697b      	ldr	r3, [r7, #20]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	4a2a      	ldr	r2, [pc, #168]	@ (8008974 <UART_SetConfig+0x284>)
 80088cc:	4293      	cmp	r3, r2
 80088ce:	f040 80a4 	bne.w	8008a1a <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80088d2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80088d6:	2b08      	cmp	r3, #8
 80088d8:	d823      	bhi.n	8008922 <UART_SetConfig+0x232>
 80088da:	a201      	add	r2, pc, #4	@ (adr r2, 80088e0 <UART_SetConfig+0x1f0>)
 80088dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088e0:	08008905 	.word	0x08008905
 80088e4:	08008923 	.word	0x08008923
 80088e8:	0800890d 	.word	0x0800890d
 80088ec:	08008923 	.word	0x08008923
 80088f0:	08008913 	.word	0x08008913
 80088f4:	08008923 	.word	0x08008923
 80088f8:	08008923 	.word	0x08008923
 80088fc:	08008923 	.word	0x08008923
 8008900:	0800891b 	.word	0x0800891b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008904:	f7fd ff46 	bl	8006794 <HAL_RCC_GetPCLK1Freq>
 8008908:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800890a:	e010      	b.n	800892e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800890c:	4b1c      	ldr	r3, [pc, #112]	@ (8008980 <UART_SetConfig+0x290>)
 800890e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008910:	e00d      	b.n	800892e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008912:	f7fd fe8b 	bl	800662c <HAL_RCC_GetSysClockFreq>
 8008916:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008918:	e009      	b.n	800892e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800891a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800891e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008920:	e005      	b.n	800892e <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8008922:	2300      	movs	r3, #0
 8008924:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008926:	2301      	movs	r3, #1
 8008928:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800892c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800892e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008930:	2b00      	cmp	r3, #0
 8008932:	f000 8137 	beq.w	8008ba4 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008936:	697b      	ldr	r3, [r7, #20]
 8008938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800893a:	4a12      	ldr	r2, [pc, #72]	@ (8008984 <UART_SetConfig+0x294>)
 800893c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008940:	461a      	mov	r2, r3
 8008942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008944:	fbb3 f3f2 	udiv	r3, r3, r2
 8008948:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800894a:	697b      	ldr	r3, [r7, #20]
 800894c:	685a      	ldr	r2, [r3, #4]
 800894e:	4613      	mov	r3, r2
 8008950:	005b      	lsls	r3, r3, #1
 8008952:	4413      	add	r3, r2
 8008954:	69ba      	ldr	r2, [r7, #24]
 8008956:	429a      	cmp	r2, r3
 8008958:	d305      	bcc.n	8008966 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800895a:	697b      	ldr	r3, [r7, #20]
 800895c:	685b      	ldr	r3, [r3, #4]
 800895e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008960:	69ba      	ldr	r2, [r7, #24]
 8008962:	429a      	cmp	r2, r3
 8008964:	d910      	bls.n	8008988 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8008966:	2301      	movs	r3, #1
 8008968:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800896c:	e11a      	b.n	8008ba4 <UART_SetConfig+0x4b4>
 800896e:	bf00      	nop
 8008970:	cfff69f3 	.word	0xcfff69f3
 8008974:	40008000 	.word	0x40008000
 8008978:	40013800 	.word	0x40013800
 800897c:	40004400 	.word	0x40004400
 8008980:	00f42400 	.word	0x00f42400
 8008984:	0801f184 	.word	0x0801f184
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800898a:	2200      	movs	r2, #0
 800898c:	60bb      	str	r3, [r7, #8]
 800898e:	60fa      	str	r2, [r7, #12]
 8008990:	697b      	ldr	r3, [r7, #20]
 8008992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008994:	4a8e      	ldr	r2, [pc, #568]	@ (8008bd0 <UART_SetConfig+0x4e0>)
 8008996:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800899a:	b29b      	uxth	r3, r3
 800899c:	2200      	movs	r2, #0
 800899e:	603b      	str	r3, [r7, #0]
 80089a0:	607a      	str	r2, [r7, #4]
 80089a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80089aa:	f7f8 fa09 	bl	8000dc0 <__aeabi_uldivmod>
 80089ae:	4602      	mov	r2, r0
 80089b0:	460b      	mov	r3, r1
 80089b2:	4610      	mov	r0, r2
 80089b4:	4619      	mov	r1, r3
 80089b6:	f04f 0200 	mov.w	r2, #0
 80089ba:	f04f 0300 	mov.w	r3, #0
 80089be:	020b      	lsls	r3, r1, #8
 80089c0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80089c4:	0202      	lsls	r2, r0, #8
 80089c6:	6979      	ldr	r1, [r7, #20]
 80089c8:	6849      	ldr	r1, [r1, #4]
 80089ca:	0849      	lsrs	r1, r1, #1
 80089cc:	2000      	movs	r0, #0
 80089ce:	460c      	mov	r4, r1
 80089d0:	4605      	mov	r5, r0
 80089d2:	eb12 0804 	adds.w	r8, r2, r4
 80089d6:	eb43 0905 	adc.w	r9, r3, r5
 80089da:	697b      	ldr	r3, [r7, #20]
 80089dc:	685b      	ldr	r3, [r3, #4]
 80089de:	2200      	movs	r2, #0
 80089e0:	469a      	mov	sl, r3
 80089e2:	4693      	mov	fp, r2
 80089e4:	4652      	mov	r2, sl
 80089e6:	465b      	mov	r3, fp
 80089e8:	4640      	mov	r0, r8
 80089ea:	4649      	mov	r1, r9
 80089ec:	f7f8 f9e8 	bl	8000dc0 <__aeabi_uldivmod>
 80089f0:	4602      	mov	r2, r0
 80089f2:	460b      	mov	r3, r1
 80089f4:	4613      	mov	r3, r2
 80089f6:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80089f8:	6a3b      	ldr	r3, [r7, #32]
 80089fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80089fe:	d308      	bcc.n	8008a12 <UART_SetConfig+0x322>
 8008a00:	6a3b      	ldr	r3, [r7, #32]
 8008a02:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008a06:	d204      	bcs.n	8008a12 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8008a08:	697b      	ldr	r3, [r7, #20]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	6a3a      	ldr	r2, [r7, #32]
 8008a0e:	60da      	str	r2, [r3, #12]
 8008a10:	e0c8      	b.n	8008ba4 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8008a12:	2301      	movs	r3, #1
 8008a14:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008a18:	e0c4      	b.n	8008ba4 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008a1a:	697b      	ldr	r3, [r7, #20]
 8008a1c:	69db      	ldr	r3, [r3, #28]
 8008a1e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008a22:	d168      	bne.n	8008af6 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8008a24:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008a28:	2b08      	cmp	r3, #8
 8008a2a:	d828      	bhi.n	8008a7e <UART_SetConfig+0x38e>
 8008a2c:	a201      	add	r2, pc, #4	@ (adr r2, 8008a34 <UART_SetConfig+0x344>)
 8008a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a32:	bf00      	nop
 8008a34:	08008a59 	.word	0x08008a59
 8008a38:	08008a61 	.word	0x08008a61
 8008a3c:	08008a69 	.word	0x08008a69
 8008a40:	08008a7f 	.word	0x08008a7f
 8008a44:	08008a6f 	.word	0x08008a6f
 8008a48:	08008a7f 	.word	0x08008a7f
 8008a4c:	08008a7f 	.word	0x08008a7f
 8008a50:	08008a7f 	.word	0x08008a7f
 8008a54:	08008a77 	.word	0x08008a77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a58:	f7fd fe9c 	bl	8006794 <HAL_RCC_GetPCLK1Freq>
 8008a5c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008a5e:	e014      	b.n	8008a8a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a60:	f7fd feaa 	bl	80067b8 <HAL_RCC_GetPCLK2Freq>
 8008a64:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008a66:	e010      	b.n	8008a8a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a68:	4b5a      	ldr	r3, [pc, #360]	@ (8008bd4 <UART_SetConfig+0x4e4>)
 8008a6a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008a6c:	e00d      	b.n	8008a8a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a6e:	f7fd fddd 	bl	800662c <HAL_RCC_GetSysClockFreq>
 8008a72:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008a74:	e009      	b.n	8008a8a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008a7a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008a7c:	e005      	b.n	8008a8a <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008a82:	2301      	movs	r3, #1
 8008a84:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008a88:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	f000 8089 	beq.w	8008ba4 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a92:	697b      	ldr	r3, [r7, #20]
 8008a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a96:	4a4e      	ldr	r2, [pc, #312]	@ (8008bd0 <UART_SetConfig+0x4e0>)
 8008a98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a9c:	461a      	mov	r2, r3
 8008a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aa0:	fbb3 f3f2 	udiv	r3, r3, r2
 8008aa4:	005a      	lsls	r2, r3, #1
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	685b      	ldr	r3, [r3, #4]
 8008aaa:	085b      	lsrs	r3, r3, #1
 8008aac:	441a      	add	r2, r3
 8008aae:	697b      	ldr	r3, [r7, #20]
 8008ab0:	685b      	ldr	r3, [r3, #4]
 8008ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ab6:	b29b      	uxth	r3, r3
 8008ab8:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008aba:	6a3b      	ldr	r3, [r7, #32]
 8008abc:	2b0f      	cmp	r3, #15
 8008abe:	d916      	bls.n	8008aee <UART_SetConfig+0x3fe>
 8008ac0:	6a3b      	ldr	r3, [r7, #32]
 8008ac2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ac6:	d212      	bcs.n	8008aee <UART_SetConfig+0x3fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008ac8:	6a3b      	ldr	r3, [r7, #32]
 8008aca:	b29b      	uxth	r3, r3
 8008acc:	f023 030f 	bic.w	r3, r3, #15
 8008ad0:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008ad2:	6a3b      	ldr	r3, [r7, #32]
 8008ad4:	085b      	lsrs	r3, r3, #1
 8008ad6:	b29b      	uxth	r3, r3
 8008ad8:	f003 0307 	and.w	r3, r3, #7
 8008adc:	b29a      	uxth	r2, r3
 8008ade:	8bfb      	ldrh	r3, [r7, #30]
 8008ae0:	4313      	orrs	r3, r2
 8008ae2:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008ae4:	697b      	ldr	r3, [r7, #20]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	8bfa      	ldrh	r2, [r7, #30]
 8008aea:	60da      	str	r2, [r3, #12]
 8008aec:	e05a      	b.n	8008ba4 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8008aee:	2301      	movs	r3, #1
 8008af0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008af4:	e056      	b.n	8008ba4 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008af6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008afa:	2b08      	cmp	r3, #8
 8008afc:	d827      	bhi.n	8008b4e <UART_SetConfig+0x45e>
 8008afe:	a201      	add	r2, pc, #4	@ (adr r2, 8008b04 <UART_SetConfig+0x414>)
 8008b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b04:	08008b29 	.word	0x08008b29
 8008b08:	08008b31 	.word	0x08008b31
 8008b0c:	08008b39 	.word	0x08008b39
 8008b10:	08008b4f 	.word	0x08008b4f
 8008b14:	08008b3f 	.word	0x08008b3f
 8008b18:	08008b4f 	.word	0x08008b4f
 8008b1c:	08008b4f 	.word	0x08008b4f
 8008b20:	08008b4f 	.word	0x08008b4f
 8008b24:	08008b47 	.word	0x08008b47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b28:	f7fd fe34 	bl	8006794 <HAL_RCC_GetPCLK1Freq>
 8008b2c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008b2e:	e014      	b.n	8008b5a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008b30:	f7fd fe42 	bl	80067b8 <HAL_RCC_GetPCLK2Freq>
 8008b34:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008b36:	e010      	b.n	8008b5a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008b38:	4b26      	ldr	r3, [pc, #152]	@ (8008bd4 <UART_SetConfig+0x4e4>)
 8008b3a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008b3c:	e00d      	b.n	8008b5a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008b3e:	f7fd fd75 	bl	800662c <HAL_RCC_GetSysClockFreq>
 8008b42:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008b44:	e009      	b.n	8008b5a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008b4a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008b4c:	e005      	b.n	8008b5a <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008b52:	2301      	movs	r3, #1
 8008b54:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008b58:	bf00      	nop
    }

    if (pclk != 0U)
 8008b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d021      	beq.n	8008ba4 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b60:	697b      	ldr	r3, [r7, #20]
 8008b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b64:	4a1a      	ldr	r2, [pc, #104]	@ (8008bd0 <UART_SetConfig+0x4e0>)
 8008b66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b6a:	461a      	mov	r2, r3
 8008b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b6e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008b72:	697b      	ldr	r3, [r7, #20]
 8008b74:	685b      	ldr	r3, [r3, #4]
 8008b76:	085b      	lsrs	r3, r3, #1
 8008b78:	441a      	add	r2, r3
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	685b      	ldr	r3, [r3, #4]
 8008b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b82:	b29b      	uxth	r3, r3
 8008b84:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b86:	6a3b      	ldr	r3, [r7, #32]
 8008b88:	2b0f      	cmp	r3, #15
 8008b8a:	d908      	bls.n	8008b9e <UART_SetConfig+0x4ae>
 8008b8c:	6a3b      	ldr	r3, [r7, #32]
 8008b8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b92:	d204      	bcs.n	8008b9e <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = usartdiv;
 8008b94:	697b      	ldr	r3, [r7, #20]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	6a3a      	ldr	r2, [r7, #32]
 8008b9a:	60da      	str	r2, [r3, #12]
 8008b9c:	e002      	b.n	8008ba4 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008ba4:	697b      	ldr	r3, [r7, #20]
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008bac:	697b      	ldr	r3, [r7, #20]
 8008bae:	2201      	movs	r2, #1
 8008bb0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008bb4:	697b      	ldr	r3, [r7, #20]
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	671a      	str	r2, [r3, #112]	@ 0x70
  huart->TxISR = NULL;
 8008bba:	697b      	ldr	r3, [r7, #20]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	675a      	str	r2, [r3, #116]	@ 0x74

  return ret;
 8008bc0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	3730      	adds	r7, #48	@ 0x30
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008bce:	bf00      	nop
 8008bd0:	0801f184 	.word	0x0801f184
 8008bd4:	00f42400 	.word	0x00f42400

08008bd8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008bd8:	b480      	push	{r7}
 8008bda:	b083      	sub	sp, #12
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008be4:	f003 0301 	and.w	r3, r3, #1
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d00a      	beq.n	8008c02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	685b      	ldr	r3, [r3, #4]
 8008bf2:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	430a      	orrs	r2, r1
 8008c00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c06:	f003 0302 	and.w	r3, r3, #2
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d00a      	beq.n	8008c24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	685b      	ldr	r3, [r3, #4]
 8008c14:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	430a      	orrs	r2, r1
 8008c22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c28:	f003 0304 	and.w	r3, r3, #4
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d00a      	beq.n	8008c46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	685b      	ldr	r3, [r3, #4]
 8008c36:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	430a      	orrs	r2, r1
 8008c44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c4a:	f003 0308 	and.w	r3, r3, #8
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d00a      	beq.n	8008c68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	685b      	ldr	r3, [r3, #4]
 8008c58:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	430a      	orrs	r2, r1
 8008c66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c6c:	f003 0310 	and.w	r3, r3, #16
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d00a      	beq.n	8008c8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	689b      	ldr	r3, [r3, #8]
 8008c7a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	430a      	orrs	r2, r1
 8008c88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c8e:	f003 0320 	and.w	r3, r3, #32
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d00a      	beq.n	8008cac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	689b      	ldr	r3, [r3, #8]
 8008c9c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	430a      	orrs	r2, r1
 8008caa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d01a      	beq.n	8008cee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	685b      	ldr	r3, [r3, #4]
 8008cbe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	430a      	orrs	r2, r1
 8008ccc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008cd2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008cd6:	d10a      	bne.n	8008cee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	685b      	ldr	r3, [r3, #4]
 8008cde:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	430a      	orrs	r2, r1
 8008cec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d00a      	beq.n	8008d10 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	685b      	ldr	r3, [r3, #4]
 8008d00:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	430a      	orrs	r2, r1
 8008d0e:	605a      	str	r2, [r3, #4]
  }
}
 8008d10:	bf00      	nop
 8008d12:	370c      	adds	r7, #12
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bc80      	pop	{r7}
 8008d18:	4770      	bx	lr

08008d1a <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008d1a:	b580      	push	{r7, lr}
 8008d1c:	b086      	sub	sp, #24
 8008d1e:	af02      	add	r7, sp, #8
 8008d20:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2200      	movs	r2, #0
 8008d26:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008d2a:	f7f9 f9f9 	bl	8002120 <HAL_GetTick>
 8008d2e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f003 0308 	and.w	r3, r3, #8
 8008d3a:	2b08      	cmp	r3, #8
 8008d3c:	d10e      	bne.n	8008d5c <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d3e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008d42:	9300      	str	r3, [sp, #0]
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	2200      	movs	r2, #0
 8008d48:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f000 f82f 	bl	8008db0 <UART_WaitOnFlagUntilTimeout>
 8008d52:	4603      	mov	r3, r0
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d001      	beq.n	8008d5c <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d58:	2303      	movs	r3, #3
 8008d5a:	e025      	b.n	8008da8 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f003 0304 	and.w	r3, r3, #4
 8008d66:	2b04      	cmp	r3, #4
 8008d68:	d10e      	bne.n	8008d88 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d6a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008d6e:	9300      	str	r3, [sp, #0]
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	2200      	movs	r2, #0
 8008d74:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f000 f819 	bl	8008db0 <UART_WaitOnFlagUntilTimeout>
 8008d7e:	4603      	mov	r3, r0
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d001      	beq.n	8008d88 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d84:	2303      	movs	r3, #3
 8008d86:	e00f      	b.n	8008da8 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2220      	movs	r2, #32
 8008d8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2220      	movs	r2, #32
 8008d94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	66da      	str	r2, [r3, #108]	@ 0x6c

  __HAL_UNLOCK(huart);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2200      	movs	r2, #0
 8008da2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8008da6:	2300      	movs	r3, #0
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	3710      	adds	r7, #16
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bd80      	pop	{r7, pc}

08008db0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b09c      	sub	sp, #112	@ 0x70
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	60f8      	str	r0, [r7, #12]
 8008db8:	60b9      	str	r1, [r7, #8]
 8008dba:	603b      	str	r3, [r7, #0]
 8008dbc:	4613      	mov	r3, r2
 8008dbe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008dc0:	e0a9      	b.n	8008f16 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008dc2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dc8:	f000 80a5 	beq.w	8008f16 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008dcc:	f7f9 f9a8 	bl	8002120 <HAL_GetTick>
 8008dd0:	4602      	mov	r2, r0
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	1ad3      	subs	r3, r2, r3
 8008dd6:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8008dd8:	429a      	cmp	r2, r3
 8008dda:	d302      	bcc.n	8008de2 <UART_WaitOnFlagUntilTimeout+0x32>
 8008ddc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d140      	bne.n	8008e64 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008de8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008dea:	e853 3f00 	ldrex	r3, [r3]
 8008dee:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008df0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008df2:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8008df6:	667b      	str	r3, [r7, #100]	@ 0x64
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	461a      	mov	r2, r3
 8008dfe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008e00:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008e02:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e04:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008e06:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008e08:	e841 2300 	strex	r3, r2, [r1]
 8008e0c:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8008e0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d1e6      	bne.n	8008de2 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	3308      	adds	r3, #8
 8008e1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e1e:	e853 3f00 	ldrex	r3, [r3]
 8008e22:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008e24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e26:	f023 0301 	bic.w	r3, r3, #1
 8008e2a:	663b      	str	r3, [r7, #96]	@ 0x60
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	3308      	adds	r3, #8
 8008e32:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008e34:	64ba      	str	r2, [r7, #72]	@ 0x48
 8008e36:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e38:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008e3a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008e3c:	e841 2300 	strex	r3, r2, [r1]
 8008e40:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008e42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d1e5      	bne.n	8008e14 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	2220      	movs	r2, #32
 8008e4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	2220      	movs	r2, #32
 8008e54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        __HAL_UNLOCK(huart);
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8008e60:	2303      	movs	r3, #3
 8008e62:	e069      	b.n	8008f38 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f003 0304 	and.w	r3, r3, #4
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d051      	beq.n	8008f16 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	69db      	ldr	r3, [r3, #28]
 8008e78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008e7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008e80:	d149      	bne.n	8008f16 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008e8a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e94:	e853 3f00 	ldrex	r3, [r3]
 8008e98:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e9c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8008ea0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	461a      	mov	r2, r3
 8008ea8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008eaa:	637b      	str	r3, [r7, #52]	@ 0x34
 8008eac:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eae:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008eb0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008eb2:	e841 2300 	strex	r3, r2, [r1]
 8008eb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008eb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d1e6      	bne.n	8008e8c <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	3308      	adds	r3, #8
 8008ec4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ec6:	697b      	ldr	r3, [r7, #20]
 8008ec8:	e853 3f00 	ldrex	r3, [r3]
 8008ecc:	613b      	str	r3, [r7, #16]
   return(result);
 8008ece:	693b      	ldr	r3, [r7, #16]
 8008ed0:	f023 0301 	bic.w	r3, r3, #1
 8008ed4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	3308      	adds	r3, #8
 8008edc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008ede:	623a      	str	r2, [r7, #32]
 8008ee0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ee2:	69f9      	ldr	r1, [r7, #28]
 8008ee4:	6a3a      	ldr	r2, [r7, #32]
 8008ee6:	e841 2300 	strex	r3, r2, [r1]
 8008eea:	61bb      	str	r3, [r7, #24]
   return(result);
 8008eec:	69bb      	ldr	r3, [r7, #24]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d1e5      	bne.n	8008ebe <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	2220      	movs	r2, #32
 8008ef6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	2220      	movs	r2, #32
 8008efe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	2220      	movs	r2, #32
 8008f06:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008f12:	2303      	movs	r3, #3
 8008f14:	e010      	b.n	8008f38 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	69da      	ldr	r2, [r3, #28]
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	4013      	ands	r3, r2
 8008f20:	68ba      	ldr	r2, [r7, #8]
 8008f22:	429a      	cmp	r2, r3
 8008f24:	bf0c      	ite	eq
 8008f26:	2301      	moveq	r3, #1
 8008f28:	2300      	movne	r3, #0
 8008f2a:	b2db      	uxtb	r3, r3
 8008f2c:	461a      	mov	r2, r3
 8008f2e:	79fb      	ldrb	r3, [r7, #7]
 8008f30:	429a      	cmp	r2, r3
 8008f32:	f43f af46 	beq.w	8008dc2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008f36:	2300      	movs	r3, #0
}
 8008f38:	4618      	mov	r0, r3
 8008f3a:	3770      	adds	r7, #112	@ 0x70
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bd80      	pop	{r7, pc}

08008f40 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008f40:	b480      	push	{r7}
 8008f42:	b0a3      	sub	sp, #140	@ 0x8c
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	60f8      	str	r0, [r7, #12]
 8008f48:	60b9      	str	r1, [r7, #8]
 8008f4a:	4613      	mov	r3, r2
 8008f4c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	68ba      	ldr	r2, [r7, #8]
 8008f52:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	88fa      	ldrh	r2, [r7, #6]
 8008f58:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	88fa      	ldrh	r2, [r7, #6]
 8008f60:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	2200      	movs	r2, #0
 8008f68:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	689b      	ldr	r3, [r3, #8]
 8008f6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f72:	d10e      	bne.n	8008f92 <UART_Start_Receive_IT+0x52>
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	691b      	ldr	r3, [r3, #16]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d105      	bne.n	8008f88 <UART_Start_Receive_IT+0x48>
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8008f82:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008f86:	e02d      	b.n	8008fe4 <UART_Start_Receive_IT+0xa4>
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	22ff      	movs	r2, #255	@ 0xff
 8008f8c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008f90:	e028      	b.n	8008fe4 <UART_Start_Receive_IT+0xa4>
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	689b      	ldr	r3, [r3, #8]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d10d      	bne.n	8008fb6 <UART_Start_Receive_IT+0x76>
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	691b      	ldr	r3, [r3, #16]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d104      	bne.n	8008fac <UART_Start_Receive_IT+0x6c>
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	22ff      	movs	r2, #255	@ 0xff
 8008fa6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008faa:	e01b      	b.n	8008fe4 <UART_Start_Receive_IT+0xa4>
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	227f      	movs	r2, #127	@ 0x7f
 8008fb0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008fb4:	e016      	b.n	8008fe4 <UART_Start_Receive_IT+0xa4>
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	689b      	ldr	r3, [r3, #8]
 8008fba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008fbe:	d10d      	bne.n	8008fdc <UART_Start_Receive_IT+0x9c>
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	691b      	ldr	r3, [r3, #16]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d104      	bne.n	8008fd2 <UART_Start_Receive_IT+0x92>
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	227f      	movs	r2, #127	@ 0x7f
 8008fcc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008fd0:	e008      	b.n	8008fe4 <UART_Start_Receive_IT+0xa4>
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	223f      	movs	r2, #63	@ 0x3f
 8008fd6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008fda:	e003      	b.n	8008fe4 <UART_Start_Receive_IT+0xa4>
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	2200      	movs	r2, #0
 8008fe0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	2222      	movs	r2, #34	@ 0x22
 8008ff0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	3308      	adds	r3, #8
 8008ffa:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ffc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008ffe:	e853 3f00 	ldrex	r3, [r3]
 8009002:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009004:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009006:	f043 0301 	orr.w	r3, r3, #1
 800900a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	3308      	adds	r3, #8
 8009014:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009018:	673a      	str	r2, [r7, #112]	@ 0x70
 800901a:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800901c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800901e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8009020:	e841 2300 	strex	r3, r2, [r1]
 8009024:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8009026:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009028:	2b00      	cmp	r3, #0
 800902a:	d1e3      	bne.n	8008ff4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009030:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009034:	d153      	bne.n	80090de <UART_Start_Receive_IT+0x19e>
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800903c:	88fa      	ldrh	r2, [r7, #6]
 800903e:	429a      	cmp	r2, r3
 8009040:	d34d      	bcc.n	80090de <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	689b      	ldr	r3, [r3, #8]
 8009046:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800904a:	d107      	bne.n	800905c <UART_Start_Receive_IT+0x11c>
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	691b      	ldr	r3, [r3, #16]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d103      	bne.n	800905c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	4a4a      	ldr	r2, [pc, #296]	@ (8009180 <UART_Start_Receive_IT+0x240>)
 8009058:	671a      	str	r2, [r3, #112]	@ 0x70
 800905a:	e002      	b.n	8009062 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	4a49      	ldr	r2, [pc, #292]	@ (8009184 <UART_Start_Receive_IT+0x244>)
 8009060:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    __HAL_UNLOCK(huart);
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	2200      	movs	r2, #0
 8009066:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	691b      	ldr	r3, [r3, #16]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d01a      	beq.n	80090a8 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009078:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800907a:	e853 3f00 	ldrex	r3, [r3]
 800907e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009080:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009082:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009086:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	461a      	mov	r2, r3
 8009090:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009094:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009096:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009098:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800909a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800909c:	e841 2300 	strex	r3, r2, [r1]
 80090a0:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80090a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d1e4      	bne.n	8009072 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	3308      	adds	r3, #8
 80090ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090b2:	e853 3f00 	ldrex	r3, [r3]
 80090b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80090b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80090be:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	3308      	adds	r3, #8
 80090c6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80090c8:	64ba      	str	r2, [r7, #72]	@ 0x48
 80090ca:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090cc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80090ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80090d0:	e841 2300 	strex	r3, r2, [r1]
 80090d4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80090d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d1e5      	bne.n	80090a8 <UART_Start_Receive_IT+0x168>
 80090dc:	e04a      	b.n	8009174 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	689b      	ldr	r3, [r3, #8]
 80090e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80090e6:	d107      	bne.n	80090f8 <UART_Start_Receive_IT+0x1b8>
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	691b      	ldr	r3, [r3, #16]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d103      	bne.n	80090f8 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	4a25      	ldr	r2, [pc, #148]	@ (8009188 <UART_Start_Receive_IT+0x248>)
 80090f4:	671a      	str	r2, [r3, #112]	@ 0x70
 80090f6:	e002      	b.n	80090fe <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	4a24      	ldr	r2, [pc, #144]	@ (800918c <UART_Start_Receive_IT+0x24c>)
 80090fc:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    __HAL_UNLOCK(huart);
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	2200      	movs	r2, #0
 8009102:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	691b      	ldr	r3, [r3, #16]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d019      	beq.n	8009142 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009116:	e853 3f00 	ldrex	r3, [r3]
 800911a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800911c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800911e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8009122:	677b      	str	r3, [r7, #116]	@ 0x74
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	461a      	mov	r2, r3
 800912a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800912c:	637b      	str	r3, [r7, #52]	@ 0x34
 800912e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009130:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009132:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009134:	e841 2300 	strex	r3, r2, [r1]
 8009138:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800913a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800913c:	2b00      	cmp	r3, #0
 800913e:	d1e6      	bne.n	800910e <UART_Start_Receive_IT+0x1ce>
 8009140:	e018      	b.n	8009174 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009148:	697b      	ldr	r3, [r7, #20]
 800914a:	e853 3f00 	ldrex	r3, [r3]
 800914e:	613b      	str	r3, [r7, #16]
   return(result);
 8009150:	693b      	ldr	r3, [r7, #16]
 8009152:	f043 0320 	orr.w	r3, r3, #32
 8009156:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	461a      	mov	r2, r3
 800915e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009160:	623b      	str	r3, [r7, #32]
 8009162:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009164:	69f9      	ldr	r1, [r7, #28]
 8009166:	6a3a      	ldr	r2, [r7, #32]
 8009168:	e841 2300 	strex	r3, r2, [r1]
 800916c:	61bb      	str	r3, [r7, #24]
   return(result);
 800916e:	69bb      	ldr	r3, [r7, #24]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d1e6      	bne.n	8009142 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8009174:	2300      	movs	r3, #0
}
 8009176:	4618      	mov	r0, r3
 8009178:	378c      	adds	r7, #140	@ 0x8c
 800917a:	46bd      	mov	sp, r7
 800917c:	bc80      	pop	{r7}
 800917e:	4770      	bx	lr
 8009180:	08009a4d 	.word	0x08009a4d
 8009184:	08009755 	.word	0x08009755
 8009188:	080095f3 	.word	0x080095f3
 800918c:	08009493 	.word	0x08009493

08009190 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009190:	b480      	push	{r7}
 8009192:	b08f      	sub	sp, #60	@ 0x3c
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800919e:	6a3b      	ldr	r3, [r7, #32]
 80091a0:	e853 3f00 	ldrex	r3, [r3]
 80091a4:	61fb      	str	r3, [r7, #28]
   return(result);
 80091a6:	69fb      	ldr	r3, [r7, #28]
 80091a8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80091ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	461a      	mov	r2, r3
 80091b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80091b8:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80091bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80091be:	e841 2300 	strex	r3, r2, [r1]
 80091c2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80091c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d1e6      	bne.n	8009198 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	3308      	adds	r3, #8
 80091d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	e853 3f00 	ldrex	r3, [r3]
 80091d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80091e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	3308      	adds	r3, #8
 80091e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80091ea:	61ba      	str	r2, [r7, #24]
 80091ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ee:	6979      	ldr	r1, [r7, #20]
 80091f0:	69ba      	ldr	r2, [r7, #24]
 80091f2:	e841 2300 	strex	r3, r2, [r1]
 80091f6:	613b      	str	r3, [r7, #16]
   return(result);
 80091f8:	693b      	ldr	r3, [r7, #16]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d1e5      	bne.n	80091ca <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2220      	movs	r2, #32
 8009202:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
}
 8009206:	bf00      	nop
 8009208:	373c      	adds	r7, #60	@ 0x3c
 800920a:	46bd      	mov	sp, r7
 800920c:	bc80      	pop	{r7}
 800920e:	4770      	bx	lr

08009210 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009210:	b480      	push	{r7}
 8009212:	b095      	sub	sp, #84	@ 0x54
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800921e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009220:	e853 3f00 	ldrex	r3, [r3]
 8009224:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009228:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800922c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	461a      	mov	r2, r3
 8009234:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009236:	643b      	str	r3, [r7, #64]	@ 0x40
 8009238:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800923a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800923c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800923e:	e841 2300 	strex	r3, r2, [r1]
 8009242:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009246:	2b00      	cmp	r3, #0
 8009248:	d1e6      	bne.n	8009218 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	3308      	adds	r3, #8
 8009250:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009252:	6a3b      	ldr	r3, [r7, #32]
 8009254:	e853 3f00 	ldrex	r3, [r3]
 8009258:	61fb      	str	r3, [r7, #28]
   return(result);
 800925a:	69fb      	ldr	r3, [r7, #28]
 800925c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009260:	f023 0301 	bic.w	r3, r3, #1
 8009264:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	3308      	adds	r3, #8
 800926c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800926e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009270:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009272:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009274:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009276:	e841 2300 	strex	r3, r2, [r1]
 800927a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800927c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800927e:	2b00      	cmp	r3, #0
 8009280:	d1e3      	bne.n	800924a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009286:	2b01      	cmp	r3, #1
 8009288:	d118      	bne.n	80092bc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	e853 3f00 	ldrex	r3, [r3]
 8009296:	60bb      	str	r3, [r7, #8]
   return(result);
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	f023 0310 	bic.w	r3, r3, #16
 800929e:	647b      	str	r3, [r7, #68]	@ 0x44
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	461a      	mov	r2, r3
 80092a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80092a8:	61bb      	str	r3, [r7, #24]
 80092aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ac:	6979      	ldr	r1, [r7, #20]
 80092ae:	69ba      	ldr	r2, [r7, #24]
 80092b0:	e841 2300 	strex	r3, r2, [r1]
 80092b4:	613b      	str	r3, [r7, #16]
   return(result);
 80092b6:	693b      	ldr	r3, [r7, #16]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d1e6      	bne.n	800928a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2220      	movs	r2, #32
 80092c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2200      	movs	r2, #0
 80092c8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2200      	movs	r2, #0
 80092ce:	671a      	str	r2, [r3, #112]	@ 0x70
}
 80092d0:	bf00      	nop
 80092d2:	3754      	adds	r7, #84	@ 0x54
 80092d4:	46bd      	mov	sp, r7
 80092d6:	bc80      	pop	{r7}
 80092d8:	4770      	bx	lr

080092da <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80092da:	b580      	push	{r7, lr}
 80092dc:	b090      	sub	sp, #64	@ 0x40
 80092de:	af00      	add	r7, sp, #0
 80092e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092e6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	f003 0320 	and.w	r3, r3, #32
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d137      	bne.n	8009366 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80092f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092f8:	2200      	movs	r2, #0
 80092fa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80092fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	3308      	adds	r3, #8
 8009304:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009308:	e853 3f00 	ldrex	r3, [r3]
 800930c:	623b      	str	r3, [r7, #32]
   return(result);
 800930e:	6a3b      	ldr	r3, [r7, #32]
 8009310:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009314:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009316:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	3308      	adds	r3, #8
 800931c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800931e:	633a      	str	r2, [r7, #48]	@ 0x30
 8009320:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009322:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009324:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009326:	e841 2300 	strex	r3, r2, [r1]
 800932a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800932c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800932e:	2b00      	cmp	r3, #0
 8009330:	d1e5      	bne.n	80092fe <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009332:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009338:	693b      	ldr	r3, [r7, #16]
 800933a:	e853 3f00 	ldrex	r3, [r3]
 800933e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009346:	637b      	str	r3, [r7, #52]	@ 0x34
 8009348:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	461a      	mov	r2, r3
 800934e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009350:	61fb      	str	r3, [r7, #28]
 8009352:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009354:	69b9      	ldr	r1, [r7, #24]
 8009356:	69fa      	ldr	r2, [r7, #28]
 8009358:	e841 2300 	strex	r3, r2, [r1]
 800935c:	617b      	str	r3, [r7, #20]
   return(result);
 800935e:	697b      	ldr	r3, [r7, #20]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d1e6      	bne.n	8009332 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009364:	e002      	b.n	800936c <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009366:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8009368:	f7f9 fd62 	bl	8002e30 <HAL_UART_TxCpltCallback>
}
 800936c:	bf00      	nop
 800936e:	3740      	adds	r7, #64	@ 0x40
 8009370:	46bd      	mov	sp, r7
 8009372:	bd80      	pop	{r7, pc}

08009374 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b084      	sub	sp, #16
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009380:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009382:	68f8      	ldr	r0, [r7, #12]
 8009384:	f7ff f996 	bl	80086b4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009388:	bf00      	nop
 800938a:	3710      	adds	r7, #16
 800938c:	46bd      	mov	sp, r7
 800938e:	bd80      	pop	{r7, pc}

08009390 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b086      	sub	sp, #24
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800939c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800939e:	697b      	ldr	r3, [r7, #20]
 80093a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80093a4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80093a6:	697b      	ldr	r3, [r7, #20]
 80093a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093ac:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80093ae:	697b      	ldr	r3, [r7, #20]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	689b      	ldr	r3, [r3, #8]
 80093b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80093b8:	2b80      	cmp	r3, #128	@ 0x80
 80093ba:	d109      	bne.n	80093d0 <UART_DMAError+0x40>
 80093bc:	693b      	ldr	r3, [r7, #16]
 80093be:	2b21      	cmp	r3, #33	@ 0x21
 80093c0:	d106      	bne.n	80093d0 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80093c2:	697b      	ldr	r3, [r7, #20]
 80093c4:	2200      	movs	r2, #0
 80093c6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 80093ca:	6978      	ldr	r0, [r7, #20]
 80093cc:	f7ff fee0 	bl	8009190 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80093d0:	697b      	ldr	r3, [r7, #20]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	689b      	ldr	r3, [r3, #8]
 80093d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093da:	2b40      	cmp	r3, #64	@ 0x40
 80093dc:	d109      	bne.n	80093f2 <UART_DMAError+0x62>
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	2b22      	cmp	r3, #34	@ 0x22
 80093e2:	d106      	bne.n	80093f2 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80093e4:	697b      	ldr	r3, [r7, #20]
 80093e6:	2200      	movs	r2, #0
 80093e8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 80093ec:	6978      	ldr	r0, [r7, #20]
 80093ee:	f7ff ff0f 	bl	8009210 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80093f2:	697b      	ldr	r3, [r7, #20]
 80093f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80093f8:	f043 0210 	orr.w	r2, r3, #16
 80093fc:	697b      	ldr	r3, [r7, #20]
 80093fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009402:	6978      	ldr	r0, [r7, #20]
 8009404:	f7ff f95f 	bl	80086c6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009408:	bf00      	nop
 800940a:	3718      	adds	r7, #24
 800940c:	46bd      	mov	sp, r7
 800940e:	bd80      	pop	{r7, pc}

08009410 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b084      	sub	sp, #16
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800941c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	2200      	movs	r2, #0
 8009422:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	2200      	movs	r2, #0
 800942a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800942e:	68f8      	ldr	r0, [r7, #12]
 8009430:	f7ff f949 	bl	80086c6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009434:	bf00      	nop
 8009436:	3710      	adds	r7, #16
 8009438:	46bd      	mov	sp, r7
 800943a:	bd80      	pop	{r7, pc}

0800943c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b088      	sub	sp, #32
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	e853 3f00 	ldrex	r3, [r3]
 8009450:	60bb      	str	r3, [r7, #8]
   return(result);
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009458:	61fb      	str	r3, [r7, #28]
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	461a      	mov	r2, r3
 8009460:	69fb      	ldr	r3, [r7, #28]
 8009462:	61bb      	str	r3, [r7, #24]
 8009464:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009466:	6979      	ldr	r1, [r7, #20]
 8009468:	69ba      	ldr	r2, [r7, #24]
 800946a:	e841 2300 	strex	r3, r2, [r1]
 800946e:	613b      	str	r3, [r7, #16]
   return(result);
 8009470:	693b      	ldr	r3, [r7, #16]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d1e6      	bne.n	8009444 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2220      	movs	r2, #32
 800947a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2200      	movs	r2, #0
 8009482:	675a      	str	r2, [r3, #116]	@ 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	f7f9 fcd3 	bl	8002e30 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800948a:	bf00      	nop
 800948c:	3720      	adds	r7, #32
 800948e:	46bd      	mov	sp, r7
 8009490:	bd80      	pop	{r7, pc}

08009492 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009492:	b580      	push	{r7, lr}
 8009494:	b096      	sub	sp, #88	@ 0x58
 8009496:	af00      	add	r7, sp, #0
 8009498:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80094a0:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094aa:	2b22      	cmp	r3, #34	@ 0x22
 80094ac:	f040 8095 	bne.w	80095da <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094b6:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80094ba:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 80094be:	b2d9      	uxtb	r1, r3
 80094c0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80094c4:	b2da      	uxtb	r2, r3
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094ca:	400a      	ands	r2, r1
 80094cc:	b2d2      	uxtb	r2, r2
 80094ce:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094d4:	1c5a      	adds	r2, r3, #1
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80094e0:	b29b      	uxth	r3, r3
 80094e2:	3b01      	subs	r3, #1
 80094e4:	b29a      	uxth	r2, r3
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80094f2:	b29b      	uxth	r3, r3
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d178      	bne.n	80095ea <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009500:	e853 3f00 	ldrex	r3, [r3]
 8009504:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009506:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009508:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800950c:	653b      	str	r3, [r7, #80]	@ 0x50
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	461a      	mov	r2, r3
 8009514:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009516:	647b      	str	r3, [r7, #68]	@ 0x44
 8009518:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800951a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800951c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800951e:	e841 2300 	strex	r3, r2, [r1]
 8009522:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009524:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009526:	2b00      	cmp	r3, #0
 8009528:	d1e6      	bne.n	80094f8 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	3308      	adds	r3, #8
 8009530:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009534:	e853 3f00 	ldrex	r3, [r3]
 8009538:	623b      	str	r3, [r7, #32]
   return(result);
 800953a:	6a3b      	ldr	r3, [r7, #32]
 800953c:	f023 0301 	bic.w	r3, r3, #1
 8009540:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	3308      	adds	r3, #8
 8009548:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800954a:	633a      	str	r2, [r7, #48]	@ 0x30
 800954c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800954e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009550:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009552:	e841 2300 	strex	r3, r2, [r1]
 8009556:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800955a:	2b00      	cmp	r3, #0
 800955c:	d1e5      	bne.n	800952a <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	2220      	movs	r2, #32
 8009562:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2200      	movs	r2, #0
 800956a:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009570:	2b01      	cmp	r3, #1
 8009572:	d12e      	bne.n	80095d2 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2200      	movs	r2, #0
 8009578:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009580:	693b      	ldr	r3, [r7, #16]
 8009582:	e853 3f00 	ldrex	r3, [r3]
 8009586:	60fb      	str	r3, [r7, #12]
   return(result);
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	f023 0310 	bic.w	r3, r3, #16
 800958e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	461a      	mov	r2, r3
 8009596:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009598:	61fb      	str	r3, [r7, #28]
 800959a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800959c:	69b9      	ldr	r1, [r7, #24]
 800959e:	69fa      	ldr	r2, [r7, #28]
 80095a0:	e841 2300 	strex	r3, r2, [r1]
 80095a4:	617b      	str	r3, [r7, #20]
   return(result);
 80095a6:	697b      	ldr	r3, [r7, #20]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d1e6      	bne.n	800957a <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	69db      	ldr	r3, [r3, #28]
 80095b2:	f003 0310 	and.w	r3, r3, #16
 80095b6:	2b10      	cmp	r3, #16
 80095b8:	d103      	bne.n	80095c2 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	2210      	movs	r2, #16
 80095c0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80095c8:	4619      	mov	r1, r3
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	f7ff f884 	bl	80086d8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80095d0:	e00b      	b.n	80095ea <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f7f9 fc42 	bl	8002e5c <HAL_UART_RxCpltCallback>
}
 80095d8:	e007      	b.n	80095ea <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	699a      	ldr	r2, [r3, #24]
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	f042 0208 	orr.w	r2, r2, #8
 80095e8:	619a      	str	r2, [r3, #24]
}
 80095ea:	bf00      	nop
 80095ec:	3758      	adds	r7, #88	@ 0x58
 80095ee:	46bd      	mov	sp, r7
 80095f0:	bd80      	pop	{r7, pc}

080095f2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80095f2:	b580      	push	{r7, lr}
 80095f4:	b096      	sub	sp, #88	@ 0x58
 80095f6:	af00      	add	r7, sp, #0
 80095f8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009600:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800960a:	2b22      	cmp	r3, #34	@ 0x22
 800960c:	f040 8095 	bne.w	800973a <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009616:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800961e:	653b      	str	r3, [r7, #80]	@ 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8009620:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 8009624:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8009628:	4013      	ands	r3, r2
 800962a:	b29a      	uxth	r2, r3
 800962c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800962e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009634:	1c9a      	adds	r2, r3, #2
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009640:	b29b      	uxth	r3, r3
 8009642:	3b01      	subs	r3, #1
 8009644:	b29a      	uxth	r2, r3
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009652:	b29b      	uxth	r3, r3
 8009654:	2b00      	cmp	r3, #0
 8009656:	d178      	bne.n	800974a <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800965e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009660:	e853 3f00 	ldrex	r3, [r3]
 8009664:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009668:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800966c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	461a      	mov	r2, r3
 8009674:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009676:	643b      	str	r3, [r7, #64]	@ 0x40
 8009678:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800967a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800967c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800967e:	e841 2300 	strex	r3, r2, [r1]
 8009682:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009686:	2b00      	cmp	r3, #0
 8009688:	d1e6      	bne.n	8009658 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	3308      	adds	r3, #8
 8009690:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009692:	6a3b      	ldr	r3, [r7, #32]
 8009694:	e853 3f00 	ldrex	r3, [r3]
 8009698:	61fb      	str	r3, [r7, #28]
   return(result);
 800969a:	69fb      	ldr	r3, [r7, #28]
 800969c:	f023 0301 	bic.w	r3, r3, #1
 80096a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	3308      	adds	r3, #8
 80096a8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80096aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80096ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80096b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80096b2:	e841 2300 	strex	r3, r2, [r1]
 80096b6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80096b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d1e5      	bne.n	800968a <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2220      	movs	r2, #32
 80096c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2200      	movs	r2, #0
 80096ca:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80096d0:	2b01      	cmp	r3, #1
 80096d2:	d12e      	bne.n	8009732 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2200      	movs	r2, #0
 80096d8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	e853 3f00 	ldrex	r3, [r3]
 80096e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	f023 0310 	bic.w	r3, r3, #16
 80096ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	461a      	mov	r2, r3
 80096f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80096f8:	61bb      	str	r3, [r7, #24]
 80096fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096fc:	6979      	ldr	r1, [r7, #20]
 80096fe:	69ba      	ldr	r2, [r7, #24]
 8009700:	e841 2300 	strex	r3, r2, [r1]
 8009704:	613b      	str	r3, [r7, #16]
   return(result);
 8009706:	693b      	ldr	r3, [r7, #16]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d1e6      	bne.n	80096da <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	69db      	ldr	r3, [r3, #28]
 8009712:	f003 0310 	and.w	r3, r3, #16
 8009716:	2b10      	cmp	r3, #16
 8009718:	d103      	bne.n	8009722 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	2210      	movs	r2, #16
 8009720:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009728:	4619      	mov	r1, r3
 800972a:	6878      	ldr	r0, [r7, #4]
 800972c:	f7fe ffd4 	bl	80086d8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009730:	e00b      	b.n	800974a <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8009732:	6878      	ldr	r0, [r7, #4]
 8009734:	f7f9 fb92 	bl	8002e5c <HAL_UART_RxCpltCallback>
}
 8009738:	e007      	b.n	800974a <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	699a      	ldr	r2, [r3, #24]
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	f042 0208 	orr.w	r2, r2, #8
 8009748:	619a      	str	r2, [r3, #24]
}
 800974a:	bf00      	nop
 800974c:	3758      	adds	r7, #88	@ 0x58
 800974e:	46bd      	mov	sp, r7
 8009750:	bd80      	pop	{r7, pc}
	...

08009754 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b0a6      	sub	sp, #152	@ 0x98
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009762:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	69db      	ldr	r3, [r3, #28]
 800976c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	689b      	ldr	r3, [r3, #8]
 8009780:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800978a:	2b22      	cmp	r3, #34	@ 0x22
 800978c:	f040 814f 	bne.w	8009a2e <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009796:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800979a:	e0f6      	b.n	800998a <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097a2:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80097a6:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 80097aa:	b2d9      	uxtb	r1, r3
 80097ac:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80097b0:	b2da      	uxtb	r2, r3
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097b6:	400a      	ands	r2, r1
 80097b8:	b2d2      	uxtb	r2, r2
 80097ba:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097c0:	1c5a      	adds	r2, r3, #1
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80097cc:	b29b      	uxth	r3, r3
 80097ce:	3b01      	subs	r3, #1
 80097d0:	b29a      	uxth	r2, r3
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	69db      	ldr	r3, [r3, #28]
 80097de:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80097e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80097e6:	f003 0307 	and.w	r3, r3, #7
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d053      	beq.n	8009896 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80097ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80097f2:	f003 0301 	and.w	r3, r3, #1
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d011      	beq.n	800981e <UART_RxISR_8BIT_FIFOEN+0xca>
 80097fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80097fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009802:	2b00      	cmp	r3, #0
 8009804:	d00b      	beq.n	800981e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	2201      	movs	r2, #1
 800980c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009814:	f043 0201 	orr.w	r2, r3, #1
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800981e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009822:	f003 0302 	and.w	r3, r3, #2
 8009826:	2b00      	cmp	r3, #0
 8009828:	d011      	beq.n	800984e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800982a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800982e:	f003 0301 	and.w	r3, r3, #1
 8009832:	2b00      	cmp	r3, #0
 8009834:	d00b      	beq.n	800984e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	2202      	movs	r2, #2
 800983c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009844:	f043 0204 	orr.w	r2, r3, #4
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800984e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009852:	f003 0304 	and.w	r3, r3, #4
 8009856:	2b00      	cmp	r3, #0
 8009858:	d011      	beq.n	800987e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800985a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800985e:	f003 0301 	and.w	r3, r3, #1
 8009862:	2b00      	cmp	r3, #0
 8009864:	d00b      	beq.n	800987e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	2204      	movs	r2, #4
 800986c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009874:	f043 0202 	orr.w	r2, r3, #2
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009884:	2b00      	cmp	r3, #0
 8009886:	d006      	beq.n	8009896 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	f7fe ff1c 	bl	80086c6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2200      	movs	r2, #0
 8009892:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800989c:	b29b      	uxth	r3, r3
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d173      	bne.n	800998a <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80098aa:	e853 3f00 	ldrex	r3, [r3]
 80098ae:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 80098b0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80098b2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80098b6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	461a      	mov	r2, r3
 80098c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80098c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80098c6:	667a      	str	r2, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098c8:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80098ca:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80098cc:	e841 2300 	strex	r3, r2, [r1]
 80098d0:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80098d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d1e4      	bne.n	80098a2 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	3308      	adds	r3, #8
 80098de:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80098e2:	e853 3f00 	ldrex	r3, [r3]
 80098e6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80098e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80098ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80098ee:	f023 0301 	bic.w	r3, r3, #1
 80098f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	3308      	adds	r3, #8
 80098fa:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80098fc:	657a      	str	r2, [r7, #84]	@ 0x54
 80098fe:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009900:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009902:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009904:	e841 2300 	strex	r3, r2, [r1]
 8009908:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800990a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800990c:	2b00      	cmp	r3, #0
 800990e:	d1e3      	bne.n	80098d8 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2220      	movs	r2, #32
 8009914:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2200      	movs	r2, #0
 800991c:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009922:	2b01      	cmp	r3, #1
 8009924:	d12e      	bne.n	8009984 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	2200      	movs	r2, #0
 800992a:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009932:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009934:	e853 3f00 	ldrex	r3, [r3]
 8009938:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800993a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800993c:	f023 0310 	bic.w	r3, r3, #16
 8009940:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	461a      	mov	r2, r3
 8009948:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800994a:	643b      	str	r3, [r7, #64]	@ 0x40
 800994c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800994e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009950:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009952:	e841 2300 	strex	r3, r2, [r1]
 8009956:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009958:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800995a:	2b00      	cmp	r3, #0
 800995c:	d1e6      	bne.n	800992c <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	69db      	ldr	r3, [r3, #28]
 8009964:	f003 0310 	and.w	r3, r3, #16
 8009968:	2b10      	cmp	r3, #16
 800996a:	d103      	bne.n	8009974 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	2210      	movs	r2, #16
 8009972:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800997a:	4619      	mov	r1, r3
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	f7fe feab 	bl	80086d8 <HAL_UARTEx_RxEventCallback>
 8009982:	e002      	b.n	800998a <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009984:	6878      	ldr	r0, [r7, #4]
 8009986:	f7f9 fa69 	bl	8002e5c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800998a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800998e:	2b00      	cmp	r3, #0
 8009990:	d006      	beq.n	80099a0 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8009992:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009996:	f003 0320 	and.w	r3, r3, #32
 800999a:	2b00      	cmp	r3, #0
 800999c:	f47f aefe 	bne.w	800979c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80099a6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80099aa:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d045      	beq.n	8009a3e <UART_RxISR_8BIT_FIFOEN+0x2ea>
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80099b8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80099bc:	429a      	cmp	r2, r3
 80099be:	d23e      	bcs.n	8009a3e <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	3308      	adds	r3, #8
 80099c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099c8:	6a3b      	ldr	r3, [r7, #32]
 80099ca:	e853 3f00 	ldrex	r3, [r3]
 80099ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80099d0:	69fb      	ldr	r3, [r7, #28]
 80099d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80099d6:	673b      	str	r3, [r7, #112]	@ 0x70
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	3308      	adds	r3, #8
 80099de:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80099e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80099e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80099e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80099e8:	e841 2300 	strex	r3, r2, [r1]
 80099ec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80099ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d1e5      	bne.n	80099c0 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	4a14      	ldr	r2, [pc, #80]	@ (8009a48 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 80099f8:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	e853 3f00 	ldrex	r3, [r3]
 8009a06:	60bb      	str	r3, [r7, #8]
   return(result);
 8009a08:	68bb      	ldr	r3, [r7, #8]
 8009a0a:	f043 0320 	orr.w	r3, r3, #32
 8009a0e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	461a      	mov	r2, r3
 8009a16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009a18:	61bb      	str	r3, [r7, #24]
 8009a1a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a1c:	6979      	ldr	r1, [r7, #20]
 8009a1e:	69ba      	ldr	r2, [r7, #24]
 8009a20:	e841 2300 	strex	r3, r2, [r1]
 8009a24:	613b      	str	r3, [r7, #16]
   return(result);
 8009a26:	693b      	ldr	r3, [r7, #16]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d1e6      	bne.n	80099fa <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009a2c:	e007      	b.n	8009a3e <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	699a      	ldr	r2, [r3, #24]
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	f042 0208 	orr.w	r2, r2, #8
 8009a3c:	619a      	str	r2, [r3, #24]
}
 8009a3e:	bf00      	nop
 8009a40:	3798      	adds	r7, #152	@ 0x98
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}
 8009a46:	bf00      	nop
 8009a48:	08009493 	.word	0x08009493

08009a4c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b0a8      	sub	sp, #160	@ 0xa0
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009a5a:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	69db      	ldr	r3, [r3, #28]
 8009a64:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	689b      	ldr	r3, [r3, #8]
 8009a78:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a82:	2b22      	cmp	r3, #34	@ 0x22
 8009a84:	f040 8153 	bne.w	8009d2e <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009a8e:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009a92:	e0fa      	b.n	8009c8a <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a9a:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009aa2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8009aa6:	f8b7 208c 	ldrh.w	r2, [r7, #140]	@ 0x8c
 8009aaa:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 8009aae:	4013      	ands	r3, r2
 8009ab0:	b29a      	uxth	r2, r3
 8009ab2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009ab6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009abc:	1c9a      	adds	r2, r3, #2
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009ac8:	b29b      	uxth	r3, r3
 8009aca:	3b01      	subs	r3, #1
 8009acc:	b29a      	uxth	r2, r3
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	69db      	ldr	r3, [r3, #28]
 8009ada:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009ade:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009ae2:	f003 0307 	and.w	r3, r3, #7
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d053      	beq.n	8009b92 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009aea:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009aee:	f003 0301 	and.w	r3, r3, #1
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d011      	beq.n	8009b1a <UART_RxISR_16BIT_FIFOEN+0xce>
 8009af6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009afa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d00b      	beq.n	8009b1a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	2201      	movs	r2, #1
 8009b08:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009b10:	f043 0201 	orr.w	r2, r3, #1
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009b1a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009b1e:	f003 0302 	and.w	r3, r3, #2
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d011      	beq.n	8009b4a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009b26:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009b2a:	f003 0301 	and.w	r3, r3, #1
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d00b      	beq.n	8009b4a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	2202      	movs	r2, #2
 8009b38:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009b40:	f043 0204 	orr.w	r2, r3, #4
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009b4a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009b4e:	f003 0304 	and.w	r3, r3, #4
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d011      	beq.n	8009b7a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009b56:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009b5a:	f003 0301 	and.w	r3, r3, #1
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d00b      	beq.n	8009b7a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	2204      	movs	r2, #4
 8009b68:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009b70:	f043 0202 	orr.w	r2, r3, #2
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d006      	beq.n	8009b92 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f7fe fd9e 	bl	80086c6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009b98:	b29b      	uxth	r3, r3
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d175      	bne.n	8009c8a <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ba4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009ba6:	e853 3f00 	ldrex	r3, [r3]
 8009baa:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009bac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009bae:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009bb2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	461a      	mov	r2, r3
 8009bbc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009bc0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009bc2:	66ba      	str	r2, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bc4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009bc6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009bc8:	e841 2300 	strex	r3, r2, [r1]
 8009bcc:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009bce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d1e4      	bne.n	8009b9e <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	3308      	adds	r3, #8
 8009bda:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bdc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009bde:	e853 3f00 	ldrex	r3, [r3]
 8009be2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009be4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009be6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009bea:	f023 0301 	bic.w	r3, r3, #1
 8009bee:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	3308      	adds	r3, #8
 8009bf8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009bfc:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009bfe:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c00:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009c02:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009c04:	e841 2300 	strex	r3, r2, [r1]
 8009c08:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009c0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d1e1      	bne.n	8009bd4 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2220      	movs	r2, #32
 8009c14:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009c22:	2b01      	cmp	r3, #1
 8009c24:	d12e      	bne.n	8009c84 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	2200      	movs	r2, #0
 8009c2a:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c34:	e853 3f00 	ldrex	r3, [r3]
 8009c38:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009c3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c3c:	f023 0310 	bic.w	r3, r3, #16
 8009c40:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	461a      	mov	r2, r3
 8009c48:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009c4a:	647b      	str	r3, [r7, #68]	@ 0x44
 8009c4c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c4e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009c50:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009c52:	e841 2300 	strex	r3, r2, [r1]
 8009c56:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009c58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d1e6      	bne.n	8009c2c <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	69db      	ldr	r3, [r3, #28]
 8009c64:	f003 0310 	and.w	r3, r3, #16
 8009c68:	2b10      	cmp	r3, #16
 8009c6a:	d103      	bne.n	8009c74 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	2210      	movs	r2, #16
 8009c72:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009c7a:	4619      	mov	r1, r3
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	f7fe fd2b 	bl	80086d8 <HAL_UARTEx_RxEventCallback>
 8009c82:	e002      	b.n	8009c8a <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f7f9 f8e9 	bl	8002e5c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009c8a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d006      	beq.n	8009ca0 <UART_RxISR_16BIT_FIFOEN+0x254>
 8009c92:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009c96:	f003 0320 	and.w	r3, r3, #32
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	f47f aefa 	bne.w	8009a94 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009ca6:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009caa:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d045      	beq.n	8009d3e <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009cb8:	f8b7 207a 	ldrh.w	r2, [r7, #122]	@ 0x7a
 8009cbc:	429a      	cmp	r2, r3
 8009cbe:	d23e      	bcs.n	8009d3e <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	3308      	adds	r3, #8
 8009cc6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cca:	e853 3f00 	ldrex	r3, [r3]
 8009cce:	623b      	str	r3, [r7, #32]
   return(result);
 8009cd0:	6a3b      	ldr	r3, [r7, #32]
 8009cd2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009cd6:	677b      	str	r3, [r7, #116]	@ 0x74
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	3308      	adds	r3, #8
 8009cde:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8009ce0:	633a      	str	r2, [r7, #48]	@ 0x30
 8009ce2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ce4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009ce6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009ce8:	e841 2300 	strex	r3, r2, [r1]
 8009cec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009cee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d1e5      	bne.n	8009cc0 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	4a14      	ldr	r2, [pc, #80]	@ (8009d48 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8009cf8:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d00:	693b      	ldr	r3, [r7, #16]
 8009d02:	e853 3f00 	ldrex	r3, [r3]
 8009d06:	60fb      	str	r3, [r7, #12]
   return(result);
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	f043 0320 	orr.w	r3, r3, #32
 8009d0e:	673b      	str	r3, [r7, #112]	@ 0x70
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	461a      	mov	r2, r3
 8009d16:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009d18:	61fb      	str	r3, [r7, #28]
 8009d1a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d1c:	69b9      	ldr	r1, [r7, #24]
 8009d1e:	69fa      	ldr	r2, [r7, #28]
 8009d20:	e841 2300 	strex	r3, r2, [r1]
 8009d24:	617b      	str	r3, [r7, #20]
   return(result);
 8009d26:	697b      	ldr	r3, [r7, #20]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d1e6      	bne.n	8009cfa <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009d2c:	e007      	b.n	8009d3e <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	699a      	ldr	r2, [r3, #24]
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	f042 0208 	orr.w	r2, r2, #8
 8009d3c:	619a      	str	r2, [r3, #24]
}
 8009d3e:	bf00      	nop
 8009d40:	37a0      	adds	r7, #160	@ 0xa0
 8009d42:	46bd      	mov	sp, r7
 8009d44:	bd80      	pop	{r7, pc}
 8009d46:	bf00      	nop
 8009d48:	080095f3 	.word	0x080095f3

08009d4c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009d4c:	b480      	push	{r7}
 8009d4e:	b083      	sub	sp, #12
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009d54:	bf00      	nop
 8009d56:	370c      	adds	r7, #12
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	bc80      	pop	{r7}
 8009d5c:	4770      	bx	lr

08009d5e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009d5e:	b480      	push	{r7}
 8009d60:	b083      	sub	sp, #12
 8009d62:	af00      	add	r7, sp, #0
 8009d64:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009d66:	bf00      	nop
 8009d68:	370c      	adds	r7, #12
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bc80      	pop	{r7}
 8009d6e:	4770      	bx	lr

08009d70 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009d70:	b480      	push	{r7}
 8009d72:	b083      	sub	sp, #12
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009d78:	bf00      	nop
 8009d7a:	370c      	adds	r7, #12
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	bc80      	pop	{r7}
 8009d80:	4770      	bx	lr

08009d82 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8009d82:	b580      	push	{r7, lr}
 8009d84:	b088      	sub	sp, #32
 8009d86:	af02      	add	r7, sp, #8
 8009d88:	60f8      	str	r0, [r7, #12]
 8009d8a:	1d3b      	adds	r3, r7, #4
 8009d8c:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 8009d90:	2300      	movs	r3, #0
 8009d92:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009d9a:	2b01      	cmp	r3, #1
 8009d9c:	d101      	bne.n	8009da2 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 8009d9e:	2302      	movs	r3, #2
 8009da0:	e046      	b.n	8009e30 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	2201      	movs	r2, #1
 8009da6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	2224      	movs	r2, #36	@ 0x24
 8009dae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	681a      	ldr	r2, [r3, #0]
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f022 0201 	bic.w	r2, r2, #1
 8009dc0:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	689b      	ldr	r3, [r3, #8]
 8009dc8:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009dcc:	687a      	ldr	r2, [r7, #4]
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	430a      	orrs	r2, r1
 8009dd4:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d105      	bne.n	8009de8 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8009ddc:	1d3b      	adds	r3, r7, #4
 8009dde:	e893 0006 	ldmia.w	r3, {r1, r2}
 8009de2:	68f8      	ldr	r0, [r7, #12]
 8009de4:	f000 f949 	bl	800a07a <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	681a      	ldr	r2, [r3, #0]
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	f042 0201 	orr.w	r2, r2, #1
 8009df6:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009df8:	f7f8 f992 	bl	8002120 <HAL_GetTick>
 8009dfc:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009dfe:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009e02:	9300      	str	r3, [sp, #0]
 8009e04:	693b      	ldr	r3, [r7, #16]
 8009e06:	2200      	movs	r2, #0
 8009e08:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009e0c:	68f8      	ldr	r0, [r7, #12]
 8009e0e:	f7fe ffcf 	bl	8008db0 <UART_WaitOnFlagUntilTimeout>
 8009e12:	4603      	mov	r3, r0
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d002      	beq.n	8009e1e <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 8009e18:	2303      	movs	r3, #3
 8009e1a:	75fb      	strb	r3, [r7, #23]
 8009e1c:	e003      	b.n	8009e26 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	2220      	movs	r2, #32
 8009e22:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	2200      	movs	r2, #0
 8009e2a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return status;
 8009e2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e30:	4618      	mov	r0, r3
 8009e32:	3718      	adds	r7, #24
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bd80      	pop	{r7, pc}

08009e38 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8009e38:	b480      	push	{r7}
 8009e3a:	b089      	sub	sp, #36	@ 0x24
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009e46:	2b01      	cmp	r3, #1
 8009e48:	d101      	bne.n	8009e4e <HAL_UARTEx_EnableStopMode+0x16>
 8009e4a:	2302      	movs	r3, #2
 8009e4c:	e021      	b.n	8009e92 <HAL_UARTEx_EnableStopMode+0x5a>
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	2201      	movs	r2, #1
 8009e52:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	e853 3f00 	ldrex	r3, [r3]
 8009e62:	60bb      	str	r3, [r7, #8]
   return(result);
 8009e64:	68bb      	ldr	r3, [r7, #8]
 8009e66:	f043 0302 	orr.w	r3, r3, #2
 8009e6a:	61fb      	str	r3, [r7, #28]
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	461a      	mov	r2, r3
 8009e72:	69fb      	ldr	r3, [r7, #28]
 8009e74:	61bb      	str	r3, [r7, #24]
 8009e76:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e78:	6979      	ldr	r1, [r7, #20]
 8009e7a:	69ba      	ldr	r2, [r7, #24]
 8009e7c:	e841 2300 	strex	r3, r2, [r1]
 8009e80:	613b      	str	r3, [r7, #16]
   return(result);
 8009e82:	693b      	ldr	r3, [r7, #16]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d1e6      	bne.n	8009e56 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8009e90:	2300      	movs	r3, #0
}
 8009e92:	4618      	mov	r0, r3
 8009e94:	3724      	adds	r7, #36	@ 0x24
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bc80      	pop	{r7}
 8009e9a:	4770      	bx	lr

08009e9c <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b084      	sub	sp, #16
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009eaa:	2b01      	cmp	r3, #1
 8009eac:	d101      	bne.n	8009eb2 <HAL_UARTEx_EnableFifoMode+0x16>
 8009eae:	2302      	movs	r3, #2
 8009eb0:	e02b      	b.n	8009f0a <HAL_UARTEx_EnableFifoMode+0x6e>
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	2201      	movs	r2, #1
 8009eb6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	2224      	movs	r2, #36	@ 0x24
 8009ebe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	681a      	ldr	r2, [r3, #0]
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	f022 0201 	bic.w	r2, r2, #1
 8009ed8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009ee0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8009ee8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	68fa      	ldr	r2, [r7, #12]
 8009ef0:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009ef2:	6878      	ldr	r0, [r7, #4]
 8009ef4:	f000 f8e4 	bl	800a0c0 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2220      	movs	r2, #32
 8009efc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2200      	movs	r2, #0
 8009f04:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8009f08:	2300      	movs	r3, #0
}
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	3710      	adds	r7, #16
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	bd80      	pop	{r7, pc}

08009f12 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009f12:	b480      	push	{r7}
 8009f14:	b085      	sub	sp, #20
 8009f16:	af00      	add	r7, sp, #0
 8009f18:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009f20:	2b01      	cmp	r3, #1
 8009f22:	d101      	bne.n	8009f28 <HAL_UARTEx_DisableFifoMode+0x16>
 8009f24:	2302      	movs	r3, #2
 8009f26:	e027      	b.n	8009f78 <HAL_UARTEx_DisableFifoMode+0x66>
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2201      	movs	r2, #1
 8009f2c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2224      	movs	r2, #36	@ 0x24
 8009f34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	681a      	ldr	r2, [r3, #0]
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	f022 0201 	bic.w	r2, r2, #1
 8009f4e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009f56:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	68fa      	ldr	r2, [r7, #12]
 8009f64:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	2220      	movs	r2, #32
 8009f6a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	2200      	movs	r2, #0
 8009f72:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8009f76:	2300      	movs	r3, #0
}
 8009f78:	4618      	mov	r0, r3
 8009f7a:	3714      	adds	r7, #20
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	bc80      	pop	{r7}
 8009f80:	4770      	bx	lr

08009f82 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009f82:	b580      	push	{r7, lr}
 8009f84:	b084      	sub	sp, #16
 8009f86:	af00      	add	r7, sp, #0
 8009f88:	6078      	str	r0, [r7, #4]
 8009f8a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009f92:	2b01      	cmp	r3, #1
 8009f94:	d101      	bne.n	8009f9a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009f96:	2302      	movs	r3, #2
 8009f98:	e02d      	b.n	8009ff6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	2201      	movs	r2, #1
 8009f9e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	2224      	movs	r2, #36	@ 0x24
 8009fa6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	681a      	ldr	r2, [r3, #0]
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f022 0201 	bic.w	r2, r2, #1
 8009fc0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	689b      	ldr	r3, [r3, #8]
 8009fc8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	683a      	ldr	r2, [r7, #0]
 8009fd2:	430a      	orrs	r2, r1
 8009fd4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009fd6:	6878      	ldr	r0, [r7, #4]
 8009fd8:	f000 f872 	bl	800a0c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	68fa      	ldr	r2, [r7, #12]
 8009fe2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2220      	movs	r2, #32
 8009fe8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2200      	movs	r2, #0
 8009ff0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8009ff4:	2300      	movs	r3, #0
}
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	3710      	adds	r7, #16
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	bd80      	pop	{r7, pc}

08009ffe <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009ffe:	b580      	push	{r7, lr}
 800a000:	b084      	sub	sp, #16
 800a002:	af00      	add	r7, sp, #0
 800a004:	6078      	str	r0, [r7, #4]
 800a006:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a00e:	2b01      	cmp	r3, #1
 800a010:	d101      	bne.n	800a016 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a012:	2302      	movs	r3, #2
 800a014:	e02d      	b.n	800a072 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	2201      	movs	r2, #1
 800a01a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	2224      	movs	r2, #36	@ 0x24
 800a022:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	681a      	ldr	r2, [r3, #0]
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	f022 0201 	bic.w	r2, r2, #1
 800a03c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	689b      	ldr	r3, [r3, #8]
 800a044:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	683a      	ldr	r2, [r7, #0]
 800a04e:	430a      	orrs	r2, r1
 800a050:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a052:	6878      	ldr	r0, [r7, #4]
 800a054:	f000 f834 	bl	800a0c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	68fa      	ldr	r2, [r7, #12]
 800a05e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2220      	movs	r2, #32
 800a064:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2200      	movs	r2, #0
 800a06c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800a070:	2300      	movs	r3, #0
}
 800a072:	4618      	mov	r0, r3
 800a074:	3710      	adds	r7, #16
 800a076:	46bd      	mov	sp, r7
 800a078:	bd80      	pop	{r7, pc}

0800a07a <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800a07a:	b480      	push	{r7}
 800a07c:	b085      	sub	sp, #20
 800a07e:	af00      	add	r7, sp, #0
 800a080:	60f8      	str	r0, [r7, #12]
 800a082:	1d3b      	adds	r3, r7, #4
 800a084:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	685b      	ldr	r3, [r3, #4]
 800a08e:	f023 0210 	bic.w	r2, r3, #16
 800a092:	893b      	ldrh	r3, [r7, #8]
 800a094:	4619      	mov	r1, r3
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	430a      	orrs	r2, r1
 800a09c:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	685b      	ldr	r3, [r3, #4]
 800a0a4:	f023 417f 	bic.w	r1, r3, #4278190080	@ 0xff000000
 800a0a8:	7abb      	ldrb	r3, [r7, #10]
 800a0aa:	061a      	lsls	r2, r3, #24
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	430a      	orrs	r2, r1
 800a0b2:	605a      	str	r2, [r3, #4]
}
 800a0b4:	bf00      	nop
 800a0b6:	3714      	adds	r7, #20
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	bc80      	pop	{r7}
 800a0bc:	4770      	bx	lr
	...

0800a0c0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a0c0:	b480      	push	{r7}
 800a0c2:	b085      	sub	sp, #20
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d108      	bne.n	800a0e2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2201      	movs	r2, #1
 800a0d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2201      	movs	r2, #1
 800a0dc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a0e0:	e031      	b.n	800a146 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a0e2:	2308      	movs	r3, #8
 800a0e4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a0e6:	2308      	movs	r3, #8
 800a0e8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	689b      	ldr	r3, [r3, #8]
 800a0f0:	0e5b      	lsrs	r3, r3, #25
 800a0f2:	b2db      	uxtb	r3, r3
 800a0f4:	f003 0307 	and.w	r3, r3, #7
 800a0f8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	689b      	ldr	r3, [r3, #8]
 800a100:	0f5b      	lsrs	r3, r3, #29
 800a102:	b2db      	uxtb	r3, r3
 800a104:	f003 0307 	and.w	r3, r3, #7
 800a108:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a10a:	7bbb      	ldrb	r3, [r7, #14]
 800a10c:	7b3a      	ldrb	r2, [r7, #12]
 800a10e:	4910      	ldr	r1, [pc, #64]	@ (800a150 <UARTEx_SetNbDataToProcess+0x90>)
 800a110:	5c8a      	ldrb	r2, [r1, r2]
 800a112:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a116:	7b3a      	ldrb	r2, [r7, #12]
 800a118:	490e      	ldr	r1, [pc, #56]	@ (800a154 <UARTEx_SetNbDataToProcess+0x94>)
 800a11a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a11c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a120:	b29a      	uxth	r2, r3
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a128:	7bfb      	ldrb	r3, [r7, #15]
 800a12a:	7b7a      	ldrb	r2, [r7, #13]
 800a12c:	4908      	ldr	r1, [pc, #32]	@ (800a150 <UARTEx_SetNbDataToProcess+0x90>)
 800a12e:	5c8a      	ldrb	r2, [r1, r2]
 800a130:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a134:	7b7a      	ldrb	r2, [r7, #13]
 800a136:	4907      	ldr	r1, [pc, #28]	@ (800a154 <UARTEx_SetNbDataToProcess+0x94>)
 800a138:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a13a:	fb93 f3f2 	sdiv	r3, r3, r2
 800a13e:	b29a      	uxth	r2, r3
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a146:	bf00      	nop
 800a148:	3714      	adds	r7, #20
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bc80      	pop	{r7}
 800a14e:	4770      	bx	lr
 800a150:	0801f19c 	.word	0x0801f19c
 800a154:	0801f1a4 	.word	0x0801f1a4

0800a158 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 800a15c:	f7f7 fe80 	bl	8001e60 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 800a160:	f000 f820 	bl	800a1a4 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 800a164:	bf00      	nop
 800a166:	bd80      	pop	{r7, pc}

0800a168 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800a16c:	f04f 30ff 	mov.w	r0, #4294967295
 800a170:	f010 fe9c 	bl	801aeac <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 800a174:	bf00      	nop
 800a176:	bd80      	pop	{r7, pc}

0800a178 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800a178:	b480      	push	{r7}
 800a17a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800a17c:	f3bf 8f4f 	dsb	sy
}
 800a180:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800a182:	4b06      	ldr	r3, [pc, #24]	@ (800a19c <__NVIC_SystemReset+0x24>)
 800a184:	68db      	ldr	r3, [r3, #12]
 800a186:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800a18a:	4904      	ldr	r1, [pc, #16]	@ (800a19c <__NVIC_SystemReset+0x24>)
 800a18c:	4b04      	ldr	r3, [pc, #16]	@ (800a1a0 <__NVIC_SystemReset+0x28>)
 800a18e:	4313      	orrs	r3, r2
 800a190:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800a192:	f3bf 8f4f 	dsb	sy
}
 800a196:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800a198:	bf00      	nop
 800a19a:	e7fd      	b.n	800a198 <__NVIC_SystemReset+0x20>
 800a19c:	e000ed00 	.word	0xe000ed00
 800a1a0:	05fa0004 	.word	0x05fa0004

0800a1a4 <LoRaWAN_Init>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b086      	sub	sp, #24
 800a1a8:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN LoRaWAN_Init_LV */
  uint32_t feature_version = 0UL;
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	607b      	str	r3, [r7, #4]
  /* USER CODE END LoRaWAN_Init_LV */

  /* USER CODE BEGIN LoRaWAN_Init_1 */

  /* Get LoRaWAN APP version*/
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	9302      	str	r3, [sp, #8]
 800a1b2:	2302      	movs	r3, #2
 800a1b4:	9301      	str	r3, [sp, #4]
 800a1b6:	2301      	movs	r3, #1
 800a1b8:	9300      	str	r3, [sp, #0]
 800a1ba:	4b60      	ldr	r3, [pc, #384]	@ (800a33c <LoRaWAN_Init+0x198>)
 800a1bc:	2200      	movs	r2, #0
 800a1be:	2100      	movs	r1, #0
 800a1c0:	2002      	movs	r0, #2
 800a1c2:	f011 fabf 	bl	801b744 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(APP_VERSION_MAIN),
          (uint8_t)(APP_VERSION_SUB1),
          (uint8_t)(APP_VERSION_SUB2));

  /* Get MW LoRaWAN info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION:  V%X.%X.%X\r\n",
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	9302      	str	r3, [sp, #8]
 800a1ca:	2304      	movs	r3, #4
 800a1cc:	9301      	str	r3, [sp, #4]
 800a1ce:	2302      	movs	r3, #2
 800a1d0:	9300      	str	r3, [sp, #0]
 800a1d2:	4b5b      	ldr	r3, [pc, #364]	@ (800a340 <LoRaWAN_Init+0x19c>)
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	2100      	movs	r1, #0
 800a1d8:	2002      	movs	r0, #2
 800a1da:	f011 fab3 	bl	801b744 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(LORAWAN_VERSION_MAIN),
          (uint8_t)(LORAWAN_VERSION_SUB1),
          (uint8_t)(LORAWAN_VERSION_SUB2));

  /* Get MW SubGhz_Phy info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:    V%X.%X.%X\r\n",
 800a1de:	2300      	movs	r3, #0
 800a1e0:	9302      	str	r3, [sp, #8]
 800a1e2:	2302      	movs	r3, #2
 800a1e4:	9301      	str	r3, [sp, #4]
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	9300      	str	r3, [sp, #0]
 800a1ea:	4b56      	ldr	r3, [pc, #344]	@ (800a344 <LoRaWAN_Init+0x1a0>)
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	2100      	movs	r1, #0
 800a1f0:	2002      	movs	r0, #2
 800a1f2:	f011 faa7 	bl	801b744 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(SUBGHZ_PHY_VERSION_MAIN),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB1),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB2));

  /* Get LoRaWAN Link Layer info */
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 800a1f6:	1d3b      	adds	r3, r7, #4
 800a1f8:	4619      	mov	r1, r3
 800a1fa:	2000      	movs	r0, #0
 800a1fc:	f003 f8a4 	bl	800d348 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "L2_SPEC_VERSION:     V%X.%X.%X\r\n",
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	0e1b      	lsrs	r3, r3, #24
 800a204:	b2db      	uxtb	r3, r3
 800a206:	461a      	mov	r2, r3
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	0c1b      	lsrs	r3, r3, #16
 800a20c:	b2db      	uxtb	r3, r3
 800a20e:	4619      	mov	r1, r3
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	0a1b      	lsrs	r3, r3, #8
 800a214:	b2db      	uxtb	r3, r3
 800a216:	9302      	str	r3, [sp, #8]
 800a218:	9101      	str	r1, [sp, #4]
 800a21a:	9200      	str	r2, [sp, #0]
 800a21c:	4b4a      	ldr	r3, [pc, #296]	@ (800a348 <LoRaWAN_Init+0x1a4>)
 800a21e:	2200      	movs	r2, #0
 800a220:	2100      	movs	r1, #0
 800a222:	2002      	movs	r0, #2
 800a224:	f011 fa8e 	bl	801b744 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8));

  /* Get LoRaWAN Regional Parameters info */
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 800a228:	1d3b      	adds	r3, r7, #4
 800a22a:	4619      	mov	r1, r3
 800a22c:	2001      	movs	r0, #1
 800a22e:	f003 f88b 	bl	800d348 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "RP_SPEC_VERSION:     V%X-%X.%X.%X\r\n",
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	0e1b      	lsrs	r3, r3, #24
 800a236:	b2db      	uxtb	r3, r3
 800a238:	461a      	mov	r2, r3
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	0c1b      	lsrs	r3, r3, #16
 800a23e:	b2db      	uxtb	r3, r3
 800a240:	4619      	mov	r1, r3
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	0a1b      	lsrs	r3, r3, #8
 800a246:	b2db      	uxtb	r3, r3
 800a248:	6878      	ldr	r0, [r7, #4]
 800a24a:	b2c0      	uxtb	r0, r0
 800a24c:	9003      	str	r0, [sp, #12]
 800a24e:	9302      	str	r3, [sp, #8]
 800a250:	9101      	str	r1, [sp, #4]
 800a252:	9200      	str	r2, [sp, #0]
 800a254:	4b3d      	ldr	r3, [pc, #244]	@ (800a34c <LoRaWAN_Init+0x1a8>)
 800a256:	2200      	movs	r2, #0
 800a258:	2100      	movs	r1, #0
 800a25a:	2002      	movs	r0, #2
 800a25c:	f011 fa72 	bl	801b744 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8),
          (uint8_t)(feature_version));

  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 800a260:	2300      	movs	r3, #0
 800a262:	9300      	str	r3, [sp, #0]
 800a264:	4b3a      	ldr	r3, [pc, #232]	@ (800a350 <LoRaWAN_Init+0x1ac>)
 800a266:	2200      	movs	r2, #0
 800a268:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800a26c:	4839      	ldr	r0, [pc, #228]	@ (800a354 <LoRaWAN_Init+0x1b0>)
 800a26e:	f010 ffbb 	bl	801b1e8 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 800a272:	2300      	movs	r3, #0
 800a274:	9300      	str	r3, [sp, #0]
 800a276:	4b38      	ldr	r3, [pc, #224]	@ (800a358 <LoRaWAN_Init+0x1b4>)
 800a278:	2200      	movs	r2, #0
 800a27a:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800a27e:	4837      	ldr	r0, [pc, #220]	@ (800a35c <LoRaWAN_Init+0x1b8>)
 800a280:	f010 ffb2 	bl	801b1e8 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 800a284:	2300      	movs	r3, #0
 800a286:	9300      	str	r3, [sp, #0]
 800a288:	4b35      	ldr	r3, [pc, #212]	@ (800a360 <LoRaWAN_Init+0x1bc>)
 800a28a:	2201      	movs	r2, #1
 800a28c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800a290:	4834      	ldr	r0, [pc, #208]	@ (800a364 <LoRaWAN_Init+0x1c0>)
 800a292:	f010 ffa9 	bl	801b1e8 <UTIL_TIMER_Create>

  /* USER CODE END LoRaWAN_Init_1 */

  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 800a296:	2300      	movs	r3, #0
 800a298:	9300      	str	r3, [sp, #0]
 800a29a:	4b33      	ldr	r3, [pc, #204]	@ (800a368 <LoRaWAN_Init+0x1c4>)
 800a29c:	2200      	movs	r2, #0
 800a29e:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800a2a2:	4832      	ldr	r0, [pc, #200]	@ (800a36c <LoRaWAN_Init+0x1c8>)
 800a2a4:	f010 ffa0 	bl	801b1e8 <UTIL_TIMER_Create>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 800a2a8:	4a31      	ldr	r2, [pc, #196]	@ (800a370 <LoRaWAN_Init+0x1cc>)
 800a2aa:	2100      	movs	r1, #0
 800a2ac:	2001      	movs	r0, #1
 800a2ae:	f010 fef9 	bl	801b0a4 <UTIL_SEQ_RegTask>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 800a2b2:	4a30      	ldr	r2, [pc, #192]	@ (800a374 <LoRaWAN_Init+0x1d0>)
 800a2b4:	2100      	movs	r1, #0
 800a2b6:	2002      	movs	r0, #2
 800a2b8:	f010 fef4 	bl	801b0a4 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 800a2bc:	4a2e      	ldr	r2, [pc, #184]	@ (800a378 <LoRaWAN_Init+0x1d4>)
 800a2be:	2100      	movs	r1, #0
 800a2c0:	2004      	movs	r0, #4
 800a2c2:	f010 feef 	bl	801b0a4 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 800a2c6:	4a2d      	ldr	r2, [pc, #180]	@ (800a37c <LoRaWAN_Init+0x1d8>)
 800a2c8:	2100      	movs	r1, #0
 800a2ca:	2008      	movs	r0, #8
 800a2cc:	f010 feea 	bl	801b0a4 <UTIL_SEQ_RegTask>

  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 800a2d0:	f000 fc64 	bl	800ab9c <LoraInfo_Init>

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 800a2d4:	f04f 7181 	mov.w	r1, #16908288	@ 0x1020000
 800a2d8:	4829      	ldr	r0, [pc, #164]	@ (800a380 <LoRaWAN_Init+0x1dc>)
 800a2da:	f002 f91b 	bl	800c514 <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 800a2de:	4829      	ldr	r0, [pc, #164]	@ (800a384 <LoRaWAN_Init+0x1e0>)
 800a2e0:	f002 f976 	bl	800c5d0 <LmHandlerConfigure>

  /* USER CODE BEGIN LoRaWAN_Init_2 */
  UTIL_TIMER_Start(&JoinLedTimer);
 800a2e4:	481f      	ldr	r0, [pc, #124]	@ (800a364 <LoRaWAN_Init+0x1c0>)
 800a2e6:	f010 ffb5 	bl	801b254 <UTIL_TIMER_Start>
  UTIL_TIMER_Create(&CurrentSensorTimer, 1000, UTIL_TIMER_ONESHOT, CurrentSensorCallback, NULL);
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	9300      	str	r3, [sp, #0]
 800a2ee:	4b26      	ldr	r3, [pc, #152]	@ (800a388 <LoRaWAN_Init+0x1e4>)
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800a2f6:	4825      	ldr	r0, [pc, #148]	@ (800a38c <LoRaWAN_Init+0x1e8>)
 800a2f8:	f010 ff76 	bl	801b1e8 <UTIL_TIMER_Create>
  UTIL_TIMER_Start(&CurrentSensorTimer);
 800a2fc:	4823      	ldr	r0, [pc, #140]	@ (800a38c <LoRaWAN_Init+0x1e8>)
 800a2fe:	f010 ffa9 	bl	801b254 <UTIL_TIMER_Start>
  /* USER CODE END LoRaWAN_Init_2 */

  LmHandlerJoin(ActivationType, ForceRejoin);
 800a302:	4b23      	ldr	r3, [pc, #140]	@ (800a390 <LoRaWAN_Init+0x1ec>)
 800a304:	781b      	ldrb	r3, [r3, #0]
 800a306:	4a23      	ldr	r2, [pc, #140]	@ (800a394 <LoRaWAN_Init+0x1f0>)
 800a308:	7812      	ldrb	r2, [r2, #0]
 800a30a:	4611      	mov	r1, r2
 800a30c:	4618      	mov	r0, r3
 800a30e:	f002 fadb 	bl	800c8c8 <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 800a312:	4b21      	ldr	r3, [pc, #132]	@ (800a398 <LoRaWAN_Init+0x1f4>)
 800a314:	781b      	ldrb	r3, [r3, #0]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d10b      	bne.n	800a332 <LoRaWAN_Init+0x18e>
  {
    /* send every time timer elapses */
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 800a31a:	4b20      	ldr	r3, [pc, #128]	@ (800a39c <LoRaWAN_Init+0x1f8>)
 800a31c:	6819      	ldr	r1, [r3, #0]
 800a31e:	2300      	movs	r3, #0
 800a320:	9300      	str	r3, [sp, #0]
 800a322:	4b1f      	ldr	r3, [pc, #124]	@ (800a3a0 <LoRaWAN_Init+0x1fc>)
 800a324:	2200      	movs	r2, #0
 800a326:	481f      	ldr	r0, [pc, #124]	@ (800a3a4 <LoRaWAN_Init+0x200>)
 800a328:	f010 ff5e 	bl	801b1e8 <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 800a32c:	481d      	ldr	r0, [pc, #116]	@ (800a3a4 <LoRaWAN_Init+0x200>)
 800a32e:	f010 ff91 	bl	801b254 <UTIL_TIMER_Start>
  }

  /* USER CODE BEGIN LoRaWAN_Init_Last */

  /* USER CODE END LoRaWAN_Init_Last */
}
 800a332:	bf00      	nop
 800a334:	3708      	adds	r7, #8
 800a336:	46bd      	mov	sp, r7
 800a338:	bd80      	pop	{r7, pc}
 800a33a:	bf00      	nop
 800a33c:	0801e6fc 	.word	0x0801e6fc
 800a340:	0801e720 	.word	0x0801e720
 800a344:	0801e744 	.word	0x0801e744
 800a348:	0801e768 	.word	0x0801e768
 800a34c:	0801e78c 	.word	0x0801e78c
 800a350:	0800a709 	.word	0x0800a709
 800a354:	200006ac 	.word	0x200006ac
 800a358:	0800a71b 	.word	0x0800a71b
 800a35c:	200006c4 	.word	0x200006c4
 800a360:	0800a72d 	.word	0x0800a72d
 800a364:	200006dc 	.word	0x200006dc
 800a368:	0800aa65 	.word	0x0800aa65
 800a36c:	200005a0 	.word	0x200005a0
 800a370:	0800c85d 	.word	0x0800c85d
 800a374:	0800a671 	.word	0x0800a671
 800a378:	0800aa89 	.word	0x0800aa89
 800a37c:	0800a9e5 	.word	0x0800a9e5
 800a380:	2000000c 	.word	0x2000000c
 800a384:	20000058 	.word	0x20000058
 800a388:	0800a3d1 	.word	0x0800a3d1
 800a38c:	200006f4 	.word	0x200006f4
 800a390:	20000008 	.word	0x20000008
 800a394:	20000009 	.word	0x20000009
 800a398:	20000584 	.word	0x20000584
 800a39c:	2000006c 	.word	0x2000006c
 800a3a0:	0800a6e5 	.word	0x0800a6e5
 800a3a4:	20000588 	.word	0x20000588

0800a3a8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN PB_Callbacks */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b082      	sub	sp, #8
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 800a3b2:	88fb      	ldrh	r3, [r7, #6]
 800a3b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a3b8:	d104      	bne.n	800a3c4 <HAL_GPIO_EXTI_Callback+0x1c>
  {
    case  BUT1_Pin:
    	// XXX: always initialized
      if (EventType == TX_ON_EVENT || 1)
      {
        UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800a3ba:	2100      	movs	r1, #0
 800a3bc:	2002      	movs	r0, #2
 800a3be:	f010 fe93 	bl	801b0e8 <UTIL_SEQ_SetTask>
      }
      break;
 800a3c2:	e000      	b.n	800a3c6 <HAL_GPIO_EXTI_Callback+0x1e>
    default:
      break;
 800a3c4:	bf00      	nop
  }
}
 800a3c6:	bf00      	nop
 800a3c8:	3708      	adds	r7, #8
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	bd80      	pop	{r7, pc}
	...

0800a3d0 <CurrentSensorCallback>:

static void CurrentSensorCallback(void *context)
{
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	b084      	sub	sp, #16
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
    static bool lastCurrentState = false;
    static bool initialized = false;

    GPIO_PinState pinState = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 800a3d8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800a3dc:	4858      	ldr	r0, [pc, #352]	@ (800a540 <CurrentSensorCallback+0x170>)
 800a3de:	f7fb f8d3 	bl	8005588 <HAL_GPIO_ReadPin>
 800a3e2:	4603      	mov	r3, r0
 800a3e4:	73fb      	strb	r3, [r7, #15]
    bool currentState = (pinState == GPIO_PIN_SET);
 800a3e6:	7bfb      	ldrb	r3, [r7, #15]
 800a3e8:	2b01      	cmp	r3, #1
 800a3ea:	bf0c      	ite	eq
 800a3ec:	2301      	moveq	r3, #1
 800a3ee:	2300      	movne	r3, #0
 800a3f0:	73bb      	strb	r3, [r7, #14]

    if (!initialized)
 800a3f2:	4b54      	ldr	r3, [pc, #336]	@ (800a544 <CurrentSensorCallback+0x174>)
 800a3f4:	781b      	ldrb	r3, [r3, #0]
 800a3f6:	f083 0301 	eor.w	r3, r3, #1
 800a3fa:	b2db      	uxtb	r3, r3
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d03f      	beq.n	800a480 <CurrentSensorCallback+0xb0>
    {
        lastCurrentState = currentState;
 800a400:	4a51      	ldr	r2, [pc, #324]	@ (800a548 <CurrentSensorCallback+0x178>)
 800a402:	7bbb      	ldrb	r3, [r7, #14]
 800a404:	7013      	strb	r3, [r2, #0]
        currentDetected = currentState;
 800a406:	4a51      	ldr	r2, [pc, #324]	@ (800a54c <CurrentSensorCallback+0x17c>)
 800a408:	7bbb      	ldrb	r3, [r7, #14]
 800a40a:	7013      	strb	r3, [r2, #0]
        initialized = true;
 800a40c:	4b4d      	ldr	r3, [pc, #308]	@ (800a544 <CurrentSensorCallback+0x174>)
 800a40e:	2201      	movs	r2, #1
 800a410:	701a      	strb	r2, [r3, #0]

        if (currentState)
 800a412:	7bbb      	ldrb	r3, [r7, #14]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d018      	beq.n	800a44a <CurrentSensorCallback+0x7a>
        {
            APP_LOG(TS_ON, VLEVEL_M, "First check: Current detected! Sending pump ON uplink...\r\n");
 800a418:	4b4d      	ldr	r3, [pc, #308]	@ (800a550 <CurrentSensorCallback+0x180>)
 800a41a:	2201      	movs	r2, #1
 800a41c:	2100      	movs	r1, #0
 800a41e:	2002      	movs	r0, #2
 800a420:	f011 f990 	bl	801b744 <UTIL_ADV_TRACE_COND_FSend>
            AppData.Port = LORAWAN_USER_APP_PORT;
 800a424:	4b4b      	ldr	r3, [pc, #300]	@ (800a554 <CurrentSensorCallback+0x184>)
 800a426:	2202      	movs	r2, #2
 800a428:	701a      	strb	r2, [r3, #0]
            AppData.BufferSize = 1;
 800a42a:	4b4a      	ldr	r3, [pc, #296]	@ (800a554 <CurrentSensorCallback+0x184>)
 800a42c:	2201      	movs	r2, #1
 800a42e:	705a      	strb	r2, [r3, #1]
            AppDataBuffer[0] = 0x01; // Pump ON
 800a430:	4b49      	ldr	r3, [pc, #292]	@ (800a558 <CurrentSensorCallback+0x188>)
 800a432:	2201      	movs	r2, #1
 800a434:	701a      	strb	r2, [r3, #0]
            AppData.Buffer = AppDataBuffer;
 800a436:	4b47      	ldr	r3, [pc, #284]	@ (800a554 <CurrentSensorCallback+0x184>)
 800a438:	4a47      	ldr	r2, [pc, #284]	@ (800a558 <CurrentSensorCallback+0x188>)
 800a43a:	605a      	str	r2, [r3, #4]
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800a43c:	2201      	movs	r2, #1
 800a43e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a442:	483f      	ldr	r0, [pc, #252]	@ (800a540 <CurrentSensorCallback+0x170>)
 800a444:	f7fb f8b7 	bl	80055b6 <HAL_GPIO_WritePin>
 800a448:	e017      	b.n	800a47a <CurrentSensorCallback+0xaa>
        }
        else
        {
            APP_LOG(TS_ON, VLEVEL_M, "First check: No current! Sending pump OFF uplink...\r\n");
 800a44a:	4b44      	ldr	r3, [pc, #272]	@ (800a55c <CurrentSensorCallback+0x18c>)
 800a44c:	2201      	movs	r2, #1
 800a44e:	2100      	movs	r1, #0
 800a450:	2002      	movs	r0, #2
 800a452:	f011 f977 	bl	801b744 <UTIL_ADV_TRACE_COND_FSend>
            AppData.Port = LORAWAN_USER_APP_PORT;
 800a456:	4b3f      	ldr	r3, [pc, #252]	@ (800a554 <CurrentSensorCallback+0x184>)
 800a458:	2202      	movs	r2, #2
 800a45a:	701a      	strb	r2, [r3, #0]
            AppData.BufferSize = 1;
 800a45c:	4b3d      	ldr	r3, [pc, #244]	@ (800a554 <CurrentSensorCallback+0x184>)
 800a45e:	2201      	movs	r2, #1
 800a460:	705a      	strb	r2, [r3, #1]
            AppDataBuffer[0] = 0x00; // Pump OFF
 800a462:	4b3d      	ldr	r3, [pc, #244]	@ (800a558 <CurrentSensorCallback+0x188>)
 800a464:	2200      	movs	r2, #0
 800a466:	701a      	strb	r2, [r3, #0]
            AppData.Buffer = AppDataBuffer;
 800a468:	4b3a      	ldr	r3, [pc, #232]	@ (800a554 <CurrentSensorCallback+0x184>)
 800a46a:	4a3b      	ldr	r2, [pc, #236]	@ (800a558 <CurrentSensorCallback+0x188>)
 800a46c:	605a      	str	r2, [r3, #4]
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800a46e:	2200      	movs	r2, #0
 800a470:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a474:	4832      	ldr	r0, [pc, #200]	@ (800a540 <CurrentSensorCallback+0x170>)
 800a476:	f7fb f89e 	bl	80055b6 <HAL_GPIO_WritePin>
        }


        SendTxData();
 800a47a:	f000 f8f9 	bl	800a670 <SendTxData>
 800a47e:	e058      	b.n	800a532 <CurrentSensorCallback+0x162>
    }
    else if (currentState != lastCurrentState)
 800a480:	4b31      	ldr	r3, [pc, #196]	@ (800a548 <CurrentSensorCallback+0x178>)
 800a482:	781b      	ldrb	r3, [r3, #0]
 800a484:	7bba      	ldrb	r2, [r7, #14]
 800a486:	429a      	cmp	r2, r3
 800a488:	d053      	beq.n	800a532 <CurrentSensorCallback+0x162>
    {
        if (currentState)
 800a48a:	7bbb      	ldrb	r3, [r7, #14]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d01b      	beq.n	800a4c8 <CurrentSensorCallback+0xf8>
        {
            APP_LOG(TS_ON, VLEVEL_M, "Current detected! Sending pump ON uplink...\r\n");
 800a490:	4b33      	ldr	r3, [pc, #204]	@ (800a560 <CurrentSensorCallback+0x190>)
 800a492:	2201      	movs	r2, #1
 800a494:	2100      	movs	r1, #0
 800a496:	2002      	movs	r0, #2
 800a498:	f011 f954 	bl	801b744 <UTIL_ADV_TRACE_COND_FSend>
            AppData.Port = LORAWAN_USER_APP_PORT;
 800a49c:	4b2d      	ldr	r3, [pc, #180]	@ (800a554 <CurrentSensorCallback+0x184>)
 800a49e:	2202      	movs	r2, #2
 800a4a0:	701a      	strb	r2, [r3, #0]
            AppData.BufferSize = 1;
 800a4a2:	4b2c      	ldr	r3, [pc, #176]	@ (800a554 <CurrentSensorCallback+0x184>)
 800a4a4:	2201      	movs	r2, #1
 800a4a6:	705a      	strb	r2, [r3, #1]
            AppDataBuffer[0] = 0x01; // Pump ON
 800a4a8:	4b2b      	ldr	r3, [pc, #172]	@ (800a558 <CurrentSensorCallback+0x188>)
 800a4aa:	2201      	movs	r2, #1
 800a4ac:	701a      	strb	r2, [r3, #0]
            AppData.Buffer = AppDataBuffer;
 800a4ae:	4b29      	ldr	r3, [pc, #164]	@ (800a554 <CurrentSensorCallback+0x184>)
 800a4b0:	4a29      	ldr	r2, [pc, #164]	@ (800a558 <CurrentSensorCallback+0x188>)
 800a4b2:	605a      	str	r2, [r3, #4]
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800a4b4:	2201      	movs	r2, #1
 800a4b6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a4ba:	4821      	ldr	r0, [pc, #132]	@ (800a540 <CurrentSensorCallback+0x170>)
 800a4bc:	f7fb f87b 	bl	80055b6 <HAL_GPIO_WritePin>
            currentDetected = true;
 800a4c0:	4b22      	ldr	r3, [pc, #136]	@ (800a54c <CurrentSensorCallback+0x17c>)
 800a4c2:	2201      	movs	r2, #1
 800a4c4:	701a      	strb	r2, [r3, #0]
 800a4c6:	e02f      	b.n	800a528 <CurrentSensorCallback+0x158>
        }
        else
        {
            APP_LOG(TS_ON, VLEVEL_M, "No current! Sending pump OFF uplink...\r\n");
 800a4c8:	4b26      	ldr	r3, [pc, #152]	@ (800a564 <CurrentSensorCallback+0x194>)
 800a4ca:	2201      	movs	r2, #1
 800a4cc:	2100      	movs	r1, #0
 800a4ce:	2002      	movs	r0, #2
 800a4d0:	f011 f938 	bl	801b744 <UTIL_ADV_TRACE_COND_FSend>
            AppData.Port = LORAWAN_USER_APP_PORT;
 800a4d4:	4b1f      	ldr	r3, [pc, #124]	@ (800a554 <CurrentSensorCallback+0x184>)
 800a4d6:	2202      	movs	r2, #2
 800a4d8:	701a      	strb	r2, [r3, #0]
            AppData.BufferSize = 1;
 800a4da:	4b1e      	ldr	r3, [pc, #120]	@ (800a554 <CurrentSensorCallback+0x184>)
 800a4dc:	2201      	movs	r2, #1
 800a4de:	705a      	strb	r2, [r3, #1]
            AppDataBuffer[0] = 0x00; // Pump OFF
 800a4e0:	4b1d      	ldr	r3, [pc, #116]	@ (800a558 <CurrentSensorCallback+0x188>)
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	701a      	strb	r2, [r3, #0]
            AppData.Buffer = AppDataBuffer;
 800a4e6:	4b1b      	ldr	r3, [pc, #108]	@ (800a554 <CurrentSensorCallback+0x184>)
 800a4e8:	4a1b      	ldr	r2, [pc, #108]	@ (800a558 <CurrentSensorCallback+0x188>)
 800a4ea:	605a      	str	r2, [r3, #4]

            currentDetected = false;
 800a4ec:	4b17      	ldr	r3, [pc, #92]	@ (800a54c <CurrentSensorCallback+0x17c>)
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	701a      	strb	r2, [r3, #0]

            if (pumpState == STATE_PUMP_ON || pumpState == STATE_AUTO)
 800a4f2:	4b1d      	ldr	r3, [pc, #116]	@ (800a568 <CurrentSensorCallback+0x198>)
 800a4f4:	781b      	ldrb	r3, [r3, #0]
 800a4f6:	2b01      	cmp	r3, #1
 800a4f8:	d003      	beq.n	800a502 <CurrentSensorCallback+0x132>
 800a4fa:	4b1b      	ldr	r3, [pc, #108]	@ (800a568 <CurrentSensorCallback+0x198>)
 800a4fc:	781b      	ldrb	r3, [r3, #0]
 800a4fe:	2b02      	cmp	r3, #2
 800a500:	d10c      	bne.n	800a51c <CurrentSensorCallback+0x14c>
            {
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET); // LED error
 800a502:	2200      	movs	r2, #0
 800a504:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a508:	480d      	ldr	r0, [pc, #52]	@ (800a540 <CurrentSensorCallback+0x170>)
 800a50a:	f7fb f854 	bl	80055b6 <HAL_GPIO_WritePin>
                APP_LOG(TS_ON, VLEVEL_M, "ERROR: Pump should be ON but no current detected!\r\n");
 800a50e:	4b17      	ldr	r3, [pc, #92]	@ (800a56c <CurrentSensorCallback+0x19c>)
 800a510:	2201      	movs	r2, #1
 800a512:	2100      	movs	r1, #0
 800a514:	2002      	movs	r0, #2
 800a516:	f011 f915 	bl	801b744 <UTIL_ADV_TRACE_COND_FSend>
 800a51a:	e005      	b.n	800a528 <CurrentSensorCallback+0x158>
            }
            else
            {
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800a51c:	2201      	movs	r2, #1
 800a51e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a522:	4807      	ldr	r0, [pc, #28]	@ (800a540 <CurrentSensorCallback+0x170>)
 800a524:	f7fb f847 	bl	80055b6 <HAL_GPIO_WritePin>
            }
        }

        lastCurrentState = currentState;
 800a528:	4a07      	ldr	r2, [pc, #28]	@ (800a548 <CurrentSensorCallback+0x178>)
 800a52a:	7bbb      	ldrb	r3, [r7, #14]
 800a52c:	7013      	strb	r3, [r2, #0]
        SendTxData();
 800a52e:	f000 f89f 	bl	800a670 <SendTxData>
    }

    UTIL_TIMER_Start(&CurrentSensorTimer);
 800a532:	480f      	ldr	r0, [pc, #60]	@ (800a570 <CurrentSensorCallback+0x1a0>)
 800a534:	f010 fe8e 	bl	801b254 <UTIL_TIMER_Start>
}
 800a538:	bf00      	nop
 800a53a:	3710      	adds	r7, #16
 800a53c:	46bd      	mov	sp, r7
 800a53e:	bd80      	pop	{r7, pc}
 800a540:	48000400 	.word	0x48000400
 800a544:	2000070d 	.word	0x2000070d
 800a548:	2000070e 	.word	0x2000070e
 800a54c:	2000070c 	.word	0x2000070c
 800a550:	0801e7b0 	.word	0x0801e7b0
 800a554:	20000070 	.word	0x20000070
 800a558:	200005b8 	.word	0x200005b8
 800a55c:	0801e7ec 	.word	0x0801e7ec
 800a560:	0801e824 	.word	0x0801e824
 800a564:	0801e854 	.word	0x0801e854
 800a568:	20000388 	.word	0x20000388
 800a56c:	0801e880 	.word	0x0801e880
 800a570:	200006f4 	.word	0x200006f4

0800a574 <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b086      	sub	sp, #24
 800a578:	af02      	add	r7, sp, #8
 800a57a:	6078      	str	r0, [r7, #4]
 800a57c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */
  if (params != NULL && appData != NULL && appData->Buffer != NULL && appData->BufferSize > 0)
 800a57e:	683b      	ldr	r3, [r7, #0]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d063      	beq.n	800a64c <OnRxData+0xd8>
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d060      	beq.n	800a64c <OnRxData+0xd8>
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	685b      	ldr	r3, [r3, #4]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d05c      	beq.n	800a64c <OnRxData+0xd8>
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	785b      	ldrb	r3, [r3, #1]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d058      	beq.n	800a64c <OnRxData+0xd8>
  {
    uint8_t command = appData->Buffer[0];
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	685b      	ldr	r3, [r3, #4]
 800a59e:	781b      	ldrb	r3, [r3, #0]
 800a5a0:	73fb      	strb	r3, [r7, #15]
    uint8_t duration = appData->Buffer[1];
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	685b      	ldr	r3, [r3, #4]
 800a5a6:	785b      	ldrb	r3, [r3, #1]
 800a5a8:	73bb      	strb	r3, [r7, #14]


    switch (command)
 800a5aa:	7bfb      	ldrb	r3, [r7, #15]
 800a5ac:	2b03      	cmp	r3, #3
 800a5ae:	d034      	beq.n	800a61a <OnRxData+0xa6>
 800a5b0:	2b03      	cmp	r3, #3
 800a5b2:	dc42      	bgt.n	800a63a <OnRxData+0xc6>
 800a5b4:	2b01      	cmp	r3, #1
 800a5b6:	d002      	beq.n	800a5be <OnRxData+0x4a>
 800a5b8:	2b02      	cmp	r3, #2
 800a5ba:	d010      	beq.n	800a5de <OnRxData+0x6a>
 800a5bc:	e03d      	b.n	800a63a <OnRxData+0xc6>
    {
      case 0x01:  // Pump ON
        APP_LOG(TS_ON, VLEVEL_M, "Command 0x01: Pump ON\r\n");
 800a5be:	4b25      	ldr	r3, [pc, #148]	@ (800a654 <OnRxData+0xe0>)
 800a5c0:	2201      	movs	r2, #1
 800a5c2:	2100      	movs	r1, #0
 800a5c4:	2002      	movs	r0, #2
 800a5c6:	f011 f8bd 	bl	801b744 <UTIL_ADV_TRACE_COND_FSend>
        pumpState = STATE_PUMP_ON;
 800a5ca:	4b23      	ldr	r3, [pc, #140]	@ (800a658 <OnRxData+0xe4>)
 800a5cc:	2201      	movs	r2, #1
 800a5ce:	701a      	strb	r2, [r3, #0]
        PumpStateMachine(pumpState, 0);
 800a5d0:	4b21      	ldr	r3, [pc, #132]	@ (800a658 <OnRxData+0xe4>)
 800a5d2:	781b      	ldrb	r3, [r3, #0]
 800a5d4:	2100      	movs	r1, #0
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	f7f7 f9c2 	bl	8001960 <PumpStateMachine>
        break;
 800a5dc:	e036      	b.n	800a64c <OnRxData+0xd8>

      case 0x02:  // Pump AUTO
        APP_LOG(TS_ON, VLEVEL_M, "Command 0x02: Pump AUTO\r\n");
 800a5de:	4b1f      	ldr	r3, [pc, #124]	@ (800a65c <OnRxData+0xe8>)
 800a5e0:	2201      	movs	r2, #1
 800a5e2:	2100      	movs	r1, #0
 800a5e4:	2002      	movs	r0, #2
 800a5e6:	f011 f8ad 	bl	801b744 <UTIL_ADV_TRACE_COND_FSend>
        durationMinutes = duration;
 800a5ea:	4a1d      	ldr	r2, [pc, #116]	@ (800a660 <OnRxData+0xec>)
 800a5ec:	7bbb      	ldrb	r3, [r7, #14]
 800a5ee:	7013      	strb	r3, [r2, #0]
        APP_LOG(TS_ON, VLEVEL_M, "Duration: %d minute(s)\r\n", durationMinutes);
 800a5f0:	4b1b      	ldr	r3, [pc, #108]	@ (800a660 <OnRxData+0xec>)
 800a5f2:	781b      	ldrb	r3, [r3, #0]
 800a5f4:	9300      	str	r3, [sp, #0]
 800a5f6:	4b1b      	ldr	r3, [pc, #108]	@ (800a664 <OnRxData+0xf0>)
 800a5f8:	2201      	movs	r2, #1
 800a5fa:	2100      	movs	r1, #0
 800a5fc:	2002      	movs	r0, #2
 800a5fe:	f011 f8a1 	bl	801b744 <UTIL_ADV_TRACE_COND_FSend>
        pumpState = STATE_AUTO;
 800a602:	4b15      	ldr	r3, [pc, #84]	@ (800a658 <OnRxData+0xe4>)
 800a604:	2202      	movs	r2, #2
 800a606:	701a      	strb	r2, [r3, #0]
        PumpStateMachine(pumpState,durationMinutes);
 800a608:	4b13      	ldr	r3, [pc, #76]	@ (800a658 <OnRxData+0xe4>)
 800a60a:	781b      	ldrb	r3, [r3, #0]
 800a60c:	4a14      	ldr	r2, [pc, #80]	@ (800a660 <OnRxData+0xec>)
 800a60e:	7812      	ldrb	r2, [r2, #0]
 800a610:	4611      	mov	r1, r2
 800a612:	4618      	mov	r0, r3
 800a614:	f7f7 f9a4 	bl	8001960 <PumpStateMachine>
        break;
 800a618:	e018      	b.n	800a64c <OnRxData+0xd8>

      case 0x03:  // Pump OFF
        APP_LOG(TS_ON, VLEVEL_M, "Command 0x03: Pump OFF\r\n");
 800a61a:	4b13      	ldr	r3, [pc, #76]	@ (800a668 <OnRxData+0xf4>)
 800a61c:	2201      	movs	r2, #1
 800a61e:	2100      	movs	r1, #0
 800a620:	2002      	movs	r0, #2
 800a622:	f011 f88f 	bl	801b744 <UTIL_ADV_TRACE_COND_FSend>
        pumpState = STATE_PUMP_OFF;
 800a626:	4b0c      	ldr	r3, [pc, #48]	@ (800a658 <OnRxData+0xe4>)
 800a628:	2203      	movs	r2, #3
 800a62a:	701a      	strb	r2, [r3, #0]
        PumpStateMachine(pumpState, 0);
 800a62c:	4b0a      	ldr	r3, [pc, #40]	@ (800a658 <OnRxData+0xe4>)
 800a62e:	781b      	ldrb	r3, [r3, #0]
 800a630:	2100      	movs	r1, #0
 800a632:	4618      	mov	r0, r3
 800a634:	f7f7 f994 	bl	8001960 <PumpStateMachine>
        break;
 800a638:	e008      	b.n	800a64c <OnRxData+0xd8>

      default:
        APP_LOG(TS_ON, VLEVEL_M, "Unknown command: 0x%02X\r\n", command);
 800a63a:	7bfb      	ldrb	r3, [r7, #15]
 800a63c:	9300      	str	r3, [sp, #0]
 800a63e:	4b0b      	ldr	r3, [pc, #44]	@ (800a66c <OnRxData+0xf8>)
 800a640:	2201      	movs	r2, #1
 800a642:	2100      	movs	r1, #0
 800a644:	2002      	movs	r0, #2
 800a646:	f011 f87d 	bl	801b744 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800a64a:	bf00      	nop
    }
  }
  /* USER CODE END OnRxData_1 */
}
 800a64c:	bf00      	nop
 800a64e:	3710      	adds	r7, #16
 800a650:	46bd      	mov	sp, r7
 800a652:	bd80      	pop	{r7, pc}
 800a654:	0801e8b4 	.word	0x0801e8b4
 800a658:	20000388 	.word	0x20000388
 800a65c:	0801e8cc 	.word	0x0801e8cc
 800a660:	20000389 	.word	0x20000389
 800a664:	0801e8e8 	.word	0x0801e8e8
 800a668:	0801e904 	.word	0x0801e904
 800a66c:	0801e920 	.word	0x0801e920

0800a670 <SendTxData>:

static void SendTxData(void)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b082      	sub	sp, #8
 800a674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SendTxData_1 */
	 LmHandlerErrorStatus_t status;

	  if (AppData.BufferSize == 0 || AppData.Buffer == NULL)
 800a676:	4b16      	ldr	r3, [pc, #88]	@ (800a6d0 <SendTxData+0x60>)
 800a678:	785b      	ldrb	r3, [r3, #1]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d003      	beq.n	800a686 <SendTxData+0x16>
 800a67e:	4b14      	ldr	r3, [pc, #80]	@ (800a6d0 <SendTxData+0x60>)
 800a680:	685b      	ldr	r3, [r3, #4]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d106      	bne.n	800a694 <SendTxData+0x24>
	  {
	    APP_LOG(TS_ON, VLEVEL_L, "No data to send!\r\n");
 800a686:	4b13      	ldr	r3, [pc, #76]	@ (800a6d4 <SendTxData+0x64>)
 800a688:	2201      	movs	r2, #1
 800a68a:	2100      	movs	r1, #0
 800a68c:	2001      	movs	r0, #1
 800a68e:	f011 f859 	bl	801b744 <UTIL_ADV_TRACE_COND_FSend>
	    return;
 800a692:	e019      	b.n	800a6c8 <SendTxData+0x58>
	  }

	  status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 800a694:	4b10      	ldr	r3, [pc, #64]	@ (800a6d8 <SendTxData+0x68>)
 800a696:	78db      	ldrb	r3, [r3, #3]
 800a698:	2200      	movs	r2, #0
 800a69a:	4619      	mov	r1, r3
 800a69c:	480c      	ldr	r0, [pc, #48]	@ (800a6d0 <SendTxData+0x60>)
 800a69e:	f002 f9b1 	bl	800ca04 <LmHandlerSend>
 800a6a2:	4603      	mov	r3, r0
 800a6a4:	71fb      	strb	r3, [r7, #7]

	  if (status == LORAMAC_HANDLER_SUCCESS)
 800a6a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d106      	bne.n	800a6bc <SendTxData+0x4c>
	  {
	    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST SUCCESS\r\n");
 800a6ae:	4b0b      	ldr	r3, [pc, #44]	@ (800a6dc <SendTxData+0x6c>)
 800a6b0:	2201      	movs	r2, #1
 800a6b2:	2100      	movs	r1, #0
 800a6b4:	2001      	movs	r0, #1
 800a6b6:	f011 f845 	bl	801b744 <UTIL_ADV_TRACE_COND_FSend>
 800a6ba:	e005      	b.n	800a6c8 <SendTxData+0x58>
	  }
	  else
	  {
	    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST FAILED\r\n");
 800a6bc:	4b08      	ldr	r3, [pc, #32]	@ (800a6e0 <SendTxData+0x70>)
 800a6be:	2201      	movs	r2, #1
 800a6c0:	2100      	movs	r1, #0
 800a6c2:	2001      	movs	r0, #1
 800a6c4:	f011 f83e 	bl	801b744 <UTIL_ADV_TRACE_COND_FSend>
	  }
  /* USER CODE END SendTxData_1 */
}
 800a6c8:	3708      	adds	r7, #8
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	bd80      	pop	{r7, pc}
 800a6ce:	bf00      	nop
 800a6d0:	20000070 	.word	0x20000070
 800a6d4:	0801e93c 	.word	0x0801e93c
 800a6d8:	20000058 	.word	0x20000058
 800a6dc:	0801e950 	.word	0x0801e950
 800a6e0:	0801e968 	.word	0x0801e968

0800a6e4 <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b082      	sub	sp, #8
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800a6ec:	2100      	movs	r1, #0
 800a6ee:	2002      	movs	r0, #2
 800a6f0:	f010 fcfa 	bl	801b0e8 <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 800a6f4:	4803      	ldr	r0, [pc, #12]	@ (800a704 <OnTxTimerEvent+0x20>)
 800a6f6:	f010 fdad 	bl	801b254 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 800a6fa:	bf00      	nop
 800a6fc:	3708      	adds	r7, #8
 800a6fe:	46bd      	mov	sp, r7
 800a700:	bd80      	pop	{r7, pc}
 800a702:	bf00      	nop
 800a704:	20000588 	.word	0x20000588

0800a708 <OnTxTimerLedEvent>:

/* USER CODE BEGIN PrFD_LedEvents */
static void OnTxTimerLedEvent(void *context)
{
 800a708:	b480      	push	{r7}
 800a70a:	b083      	sub	sp, #12
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
#if 0	// XXX: No LED available
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
}
 800a710:	bf00      	nop
 800a712:	370c      	adds	r7, #12
 800a714:	46bd      	mov	sp, r7
 800a716:	bc80      	pop	{r7}
 800a718:	4770      	bx	lr

0800a71a <OnRxTimerLedEvent>:

static void OnRxTimerLedEvent(void *context)
{
 800a71a:	b480      	push	{r7}
 800a71c:	b083      	sub	sp, #12
 800a71e:	af00      	add	r7, sp, #0
 800a720:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
#endif
}
 800a722:	bf00      	nop
 800a724:	370c      	adds	r7, #12
 800a726:	46bd      	mov	sp, r7
 800a728:	bc80      	pop	{r7}
 800a72a:	4770      	bx	lr

0800a72c <OnJoinTimerLedEvent>:

static void OnJoinTimerLedEvent(void *context)
{
 800a72c:	b480      	push	{r7}
 800a72e:	b083      	sub	sp, #12
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
#endif
}
 800a734:	bf00      	nop
 800a736:	370c      	adds	r7, #12
 800a738:	46bd      	mov	sp, r7
 800a73a:	bc80      	pop	{r7}
 800a73c:	4770      	bx	lr
	...

0800a740 <OnTxData>:

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b086      	sub	sp, #24
 800a744:	af04      	add	r7, sp, #16
 800a746:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  if ((params != NULL))
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d041      	beq.n	800a7d2 <OnTxData+0x92>
  {
    /* Process Tx event only if its a mcps response to prevent some internal events (mlme) */
    if (params->IsMcpsConfirm != 0)
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	781b      	ldrb	r3, [r3, #0]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d03d      	beq.n	800a7d2 <OnTxData+0x92>
    {
#if 0	// XXX: No LED available
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif
      UTIL_TIMER_Start(&TxLedTimer);
 800a756:	4821      	ldr	r0, [pc, #132]	@ (800a7dc <OnTxData+0x9c>)
 800a758:	f010 fd7c 	bl	801b254 <UTIL_TIMER_Start>

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 800a75c:	4b20      	ldr	r3, [pc, #128]	@ (800a7e0 <OnTxData+0xa0>)
 800a75e:	2200      	movs	r2, #0
 800a760:	2100      	movs	r1, #0
 800a762:	2002      	movs	r0, #2
 800a764:	f010 ffee 	bl	801b744 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	68db      	ldr	r3, [r3, #12]
 800a76c:	687a      	ldr	r2, [r7, #4]
 800a76e:	7c12      	ldrb	r2, [r2, #16]
 800a770:	4611      	mov	r1, r2
 800a772:	687a      	ldr	r2, [r7, #4]
 800a774:	f992 200a 	ldrsb.w	r2, [r2, #10]
 800a778:	4610      	mov	r0, r2
 800a77a:	687a      	ldr	r2, [r7, #4]
 800a77c:	f992 2018 	ldrsb.w	r2, [r2, #24]
 800a780:	9203      	str	r2, [sp, #12]
 800a782:	9002      	str	r0, [sp, #8]
 800a784:	9101      	str	r1, [sp, #4]
 800a786:	9300      	str	r3, [sp, #0]
 800a788:	4b16      	ldr	r3, [pc, #88]	@ (800a7e4 <OnTxData+0xa4>)
 800a78a:	2200      	movs	r2, #0
 800a78c:	2100      	movs	r1, #0
 800a78e:	2003      	movs	r0, #3
 800a790:	f010 ffd8 	bl	801b744 <UTIL_ADV_TRACE_COND_FSend>
              params->AppData.Port, params->Datarate, params->TxPower);

      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 800a794:	4b14      	ldr	r3, [pc, #80]	@ (800a7e8 <OnTxData+0xa8>)
 800a796:	2200      	movs	r2, #0
 800a798:	2100      	movs	r1, #0
 800a79a:	2003      	movs	r0, #3
 800a79c:	f010 ffd2 	bl	801b744 <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	7a1b      	ldrb	r3, [r3, #8]
 800a7a4:	2b01      	cmp	r3, #1
 800a7a6:	d10e      	bne.n	800a7c6 <OnTxData+0x86>
      {
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	7a5b      	ldrb	r3, [r3, #9]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d001      	beq.n	800a7b4 <OnTxData+0x74>
 800a7b0:	4b0e      	ldr	r3, [pc, #56]	@ (800a7ec <OnTxData+0xac>)
 800a7b2:	e000      	b.n	800a7b6 <OnTxData+0x76>
 800a7b4:	4b0e      	ldr	r3, [pc, #56]	@ (800a7f0 <OnTxData+0xb0>)
 800a7b6:	9300      	str	r3, [sp, #0]
 800a7b8:	4b0e      	ldr	r3, [pc, #56]	@ (800a7f4 <OnTxData+0xb4>)
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	2100      	movs	r1, #0
 800a7be:	2003      	movs	r0, #3
 800a7c0:	f010 ffc0 	bl	801b744 <UTIL_ADV_TRACE_COND_FSend>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
      }
    }
  }
  /* USER CODE END OnTxData_1 */
}
 800a7c4:	e005      	b.n	800a7d2 <OnTxData+0x92>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 800a7c6:	4b0c      	ldr	r3, [pc, #48]	@ (800a7f8 <OnTxData+0xb8>)
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	2100      	movs	r1, #0
 800a7cc:	2003      	movs	r0, #3
 800a7ce:	f010 ffb9 	bl	801b744 <UTIL_ADV_TRACE_COND_FSend>
}
 800a7d2:	bf00      	nop
 800a7d4:	3708      	adds	r7, #8
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	bd80      	pop	{r7, pc}
 800a7da:	bf00      	nop
 800a7dc:	200006ac 	.word	0x200006ac
 800a7e0:	0801e980 	.word	0x0801e980
 800a7e4:	0801e9b4 	.word	0x0801e9b4
 800a7e8:	0801e9e8 	.word	0x0801e9e8
 800a7ec:	0801e9f8 	.word	0x0801e9f8
 800a7f0:	0801e9fc 	.word	0x0801e9fc
 800a7f4:	0801ea04 	.word	0x0801ea04
 800a7f8:	0801ea18 	.word	0x0801ea18

0800a7fc <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b082      	sub	sp, #8
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
	if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d108      	bne.n	800a820 <OnJoinRequest+0x24>
	{
	    APP_LOG(TS_OFF, VLEVEL_M, "Join Success -> Switching to Class C and Halt\r\n");
 800a80e:	4b06      	ldr	r3, [pc, #24]	@ (800a828 <OnJoinRequest+0x2c>)
 800a810:	2200      	movs	r2, #0
 800a812:	2100      	movs	r1, #0
 800a814:	2002      	movs	r0, #2
 800a816:	f010 ff95 	bl	801b744 <UTIL_ADV_TRACE_COND_FSend>
	    LmHandlerRequestClass(CLASS_C);    // บังคับเปลี่ยนเป็น Class C
 800a81a:	2002      	movs	r0, #2
 800a81c:	f002 f9e0 	bl	800cbe0 <LmHandlerRequestClass>
	}

  /* USER CODE END OnJoinRequest_1 */
}
 800a820:	bf00      	nop
 800a822:	3708      	adds	r7, #8
 800a824:	46bd      	mov	sp, r7
 800a826:	bd80      	pop	{r7, pc}
 800a828:	0801ea28 	.word	0x0801ea28

0800a82c <OnBeaconStatusChange>:

static void OnBeaconStatusChange(LmHandlerBeaconParams_t *params)
{
 800a82c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a82e:	b093      	sub	sp, #76	@ 0x4c
 800a830:	af0c      	add	r7, sp, #48	@ 0x30
 800a832:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN OnBeaconStatusChange_1 */
  if (params != NULL)
 800a834:	697b      	ldr	r3, [r7, #20]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d056      	beq.n	800a8e8 <OnBeaconStatusChange+0xbc>
  {
    switch (params->State)
 800a83a:	697b      	ldr	r3, [r7, #20]
 800a83c:	785b      	ldrb	r3, [r3, #1]
 800a83e:	2b02      	cmp	r3, #2
 800a840:	d008      	beq.n	800a854 <OnBeaconStatusChange+0x28>
 800a842:	2b03      	cmp	r3, #3
 800a844:	d049      	beq.n	800a8da <OnBeaconStatusChange+0xae>
    {
      default:
      case LORAMAC_HANDLER_BEACON_LOST:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON LOST\r\n");
 800a846:	4b2a      	ldr	r3, [pc, #168]	@ (800a8f0 <OnBeaconStatusChange+0xc4>)
 800a848:	2200      	movs	r2, #0
 800a84a:	2100      	movs	r1, #0
 800a84c:	2002      	movs	r0, #2
 800a84e:	f010 ff79 	bl	801b744 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800a852:	e049      	b.n	800a8e8 <OnBeaconStatusChange+0xbc>
      }
      case LORAMAC_HANDLER_BEACON_RX:
      {
        APP_LOG(TS_OFF, VLEVEL_M,
 800a854:	697b      	ldr	r3, [r7, #20]
 800a856:	7c1b      	ldrb	r3, [r3, #16]
 800a858:	4618      	mov	r0, r3
 800a85a:	697b      	ldr	r3, [r7, #20]
 800a85c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800a860:	461c      	mov	r4, r3
 800a862:	697b      	ldr	r3, [r7, #20]
 800a864:	f993 3014 	ldrsb.w	r3, [r3, #20]
 800a868:	461d      	mov	r5, r3
 800a86a:	697b      	ldr	r3, [r7, #20]
 800a86c:	68db      	ldr	r3, [r3, #12]
 800a86e:	697a      	ldr	r2, [r7, #20]
 800a870:	6852      	ldr	r2, [r2, #4]
 800a872:	6979      	ldr	r1, [r7, #20]
 800a874:	7d89      	ldrb	r1, [r1, #22]
 800a876:	460e      	mov	r6, r1
 800a878:	6979      	ldr	r1, [r7, #20]
 800a87a:	7dc9      	ldrb	r1, [r1, #23]
 800a87c:	6139      	str	r1, [r7, #16]
 800a87e:	6979      	ldr	r1, [r7, #20]
 800a880:	7e09      	ldrb	r1, [r1, #24]
 800a882:	60f9      	str	r1, [r7, #12]
 800a884:	6979      	ldr	r1, [r7, #20]
 800a886:	7e49      	ldrb	r1, [r1, #25]
 800a888:	60b9      	str	r1, [r7, #8]
 800a88a:	6979      	ldr	r1, [r7, #20]
 800a88c:	7e89      	ldrb	r1, [r1, #26]
 800a88e:	6079      	str	r1, [r7, #4]
 800a890:	6979      	ldr	r1, [r7, #20]
 800a892:	7ec9      	ldrb	r1, [r1, #27]
 800a894:	6039      	str	r1, [r7, #0]
 800a896:	6979      	ldr	r1, [r7, #20]
 800a898:	7f09      	ldrb	r1, [r1, #28]
 800a89a:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a89c:	f8d7 c000 	ldr.w	ip, [r7]
 800a8a0:	f8cd c028 	str.w	ip, [sp, #40]	@ 0x28
 800a8a4:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800a8a8:	f8cd c024 	str.w	ip, [sp, #36]	@ 0x24
 800a8ac:	f8d7 c008 	ldr.w	ip, [r7, #8]
 800a8b0:	f8cd c020 	str.w	ip, [sp, #32]
 800a8b4:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 800a8b8:	f8cd c01c 	str.w	ip, [sp, #28]
 800a8bc:	6939      	ldr	r1, [r7, #16]
 800a8be:	9106      	str	r1, [sp, #24]
 800a8c0:	9605      	str	r6, [sp, #20]
 800a8c2:	9204      	str	r2, [sp, #16]
 800a8c4:	9303      	str	r3, [sp, #12]
 800a8c6:	9502      	str	r5, [sp, #8]
 800a8c8:	9401      	str	r4, [sp, #4]
 800a8ca:	9000      	str	r0, [sp, #0]
 800a8cc:	4b09      	ldr	r3, [pc, #36]	@ (800a8f4 <OnBeaconStatusChange+0xc8>)
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	2100      	movs	r1, #0
 800a8d2:	2002      	movs	r0, #2
 800a8d4:	f010 ff36 	bl	801b744 <UTIL_ADV_TRACE_COND_FSend>
                params->Info.Datarate, params->Info.Rssi, params->Info.Snr, params->Info.Frequency,
                params->Info.Time.Seconds, params->Info.GwSpecific.InfoDesc,
                params->Info.GwSpecific.Info[0], params->Info.GwSpecific.Info[1],
                params->Info.GwSpecific.Info[2], params->Info.GwSpecific.Info[3],
                params->Info.GwSpecific.Info[4], params->Info.GwSpecific.Info[5]);
        break;
 800a8d8:	e006      	b.n	800a8e8 <OnBeaconStatusChange+0xbc>
      }
      case LORAMAC_HANDLER_BEACON_NRX:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
 800a8da:	4b07      	ldr	r3, [pc, #28]	@ (800a8f8 <OnBeaconStatusChange+0xcc>)
 800a8dc:	2200      	movs	r2, #0
 800a8de:	2100      	movs	r1, #0
 800a8e0:	2002      	movs	r0, #2
 800a8e2:	f010 ff2f 	bl	801b744 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800a8e6:	bf00      	nop
      }
    }
  }
  /* USER CODE END OnBeaconStatusChange_1 */
}
 800a8e8:	bf00      	nop
 800a8ea:	371c      	adds	r7, #28
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a8f0:	0801ea58 	.word	0x0801ea58
 800a8f4:	0801ea70 	.word	0x0801ea70
 800a8f8:	0801eae4 	.word	0x0801eae4

0800a8fc <OnClassChange>:

static void OnClassChange(DeviceClass_t deviceClass)
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b084      	sub	sp, #16
 800a900:	af02      	add	r7, sp, #8
 800a902:	4603      	mov	r3, r0
 800a904:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnClassChange_1 */
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 800a906:	79fb      	ldrb	r3, [r7, #7]
 800a908:	4a06      	ldr	r2, [pc, #24]	@ (800a924 <OnClassChange+0x28>)
 800a90a:	5cd3      	ldrb	r3, [r2, r3]
 800a90c:	9300      	str	r3, [sp, #0]
 800a90e:	4b06      	ldr	r3, [pc, #24]	@ (800a928 <OnClassChange+0x2c>)
 800a910:	2200      	movs	r2, #0
 800a912:	2100      	movs	r1, #0
 800a914:	2002      	movs	r0, #2
 800a916:	f010 ff15 	bl	801b744 <UTIL_ADV_TRACE_COND_FSend>
  /* USER CODE END OnClassChange_1 */
}
 800a91a:	bf00      	nop
 800a91c:	3708      	adds	r7, #8
 800a91e:	46bd      	mov	sp, r7
 800a920:	bd80      	pop	{r7, pc}
 800a922:	bf00      	nop
 800a924:	0801eb20 	.word	0x0801eb20
 800a928:	0801eb04 	.word	0x0801eb04

0800a92c <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 800a930:	2100      	movs	r1, #0
 800a932:	2001      	movs	r0, #1
 800a934:	f010 fbd8 	bl	801b0e8 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 800a938:	bf00      	nop
 800a93a:	bd80      	pop	{r7, pc}

0800a93c <OnTxPeriodicityChanged>:

static void OnTxPeriodicityChanged(uint32_t periodicity)
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b082      	sub	sp, #8
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxPeriodicityChanged_1 */

  /* USER CODE END OnTxPeriodicityChanged_1 */
  TxPeriodicity = periodicity;
 800a944:	4a0d      	ldr	r2, [pc, #52]	@ (800a97c <OnTxPeriodicityChanged+0x40>)
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	6013      	str	r3, [r2, #0]

  if (TxPeriodicity == 0)
 800a94a:	4b0c      	ldr	r3, [pc, #48]	@ (800a97c <OnTxPeriodicityChanged+0x40>)
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d103      	bne.n	800a95a <OnTxPeriodicityChanged+0x1e>
  {
    /* Revert to application default periodicity */
    TxPeriodicity = APP_TX_DUTYCYCLE;
 800a952:	4b0a      	ldr	r3, [pc, #40]	@ (800a97c <OnTxPeriodicityChanged+0x40>)
 800a954:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a958:	601a      	str	r2, [r3, #0]
  }

  /* Update timer periodicity */
  UTIL_TIMER_Stop(&TxTimer);
 800a95a:	4809      	ldr	r0, [pc, #36]	@ (800a980 <OnTxPeriodicityChanged+0x44>)
 800a95c:	f010 fce8 	bl	801b330 <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 800a960:	4b06      	ldr	r3, [pc, #24]	@ (800a97c <OnTxPeriodicityChanged+0x40>)
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	4619      	mov	r1, r3
 800a966:	4806      	ldr	r0, [pc, #24]	@ (800a980 <OnTxPeriodicityChanged+0x44>)
 800a968:	f010 fd52 	bl	801b410 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 800a96c:	4804      	ldr	r0, [pc, #16]	@ (800a980 <OnTxPeriodicityChanged+0x44>)
 800a96e:	f010 fc71 	bl	801b254 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxPeriodicityChanged_2 */

  /* USER CODE END OnTxPeriodicityChanged_2 */
}
 800a972:	bf00      	nop
 800a974:	3708      	adds	r7, #8
 800a976:	46bd      	mov	sp, r7
 800a978:	bd80      	pop	{r7, pc}
 800a97a:	bf00      	nop
 800a97c:	2000006c 	.word	0x2000006c
 800a980:	20000588 	.word	0x20000588

0800a984 <OnTxFrameCtrlChanged>:

static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
 800a984:	b480      	push	{r7}
 800a986:	b083      	sub	sp, #12
 800a988:	af00      	add	r7, sp, #0
 800a98a:	4603      	mov	r3, r0
 800a98c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800a98e:	4a04      	ldr	r2, [pc, #16]	@ (800a9a0 <OnTxFrameCtrlChanged+0x1c>)
 800a990:	79fb      	ldrb	r3, [r7, #7]
 800a992:	70d3      	strb	r3, [r2, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 800a994:	bf00      	nop
 800a996:	370c      	adds	r7, #12
 800a998:	46bd      	mov	sp, r7
 800a99a:	bc80      	pop	{r7}
 800a99c:	4770      	bx	lr
 800a99e:	bf00      	nop
 800a9a0:	20000058 	.word	0x20000058

0800a9a4 <OnPingSlotPeriodicityChanged>:

static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
 800a9a4:	b480      	push	{r7}
 800a9a6:	b083      	sub	sp, #12
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	4603      	mov	r3, r0
 800a9ac:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800a9ae:	4a04      	ldr	r2, [pc, #16]	@ (800a9c0 <OnPingSlotPeriodicityChanged+0x1c>)
 800a9b0:	79fb      	ldrb	r3, [r7, #7]
 800a9b2:	7313      	strb	r3, [r2, #12]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 800a9b4:	bf00      	nop
 800a9b6:	370c      	adds	r7, #12
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	bc80      	pop	{r7}
 800a9bc:	4770      	bx	lr
 800a9be:	bf00      	nop
 800a9c0:	20000058 	.word	0x20000058

0800a9c4 <OnSystemReset>:

static void OnSystemReset(void)
{
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSystemReset_1 */

  /* USER CODE END OnSystemReset_1 */
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800a9c8:	f002 fcef 	bl	800d3aa <LmHandlerHalt>
 800a9cc:	4603      	mov	r3, r0
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d106      	bne.n	800a9e0 <OnSystemReset+0x1c>
 800a9d2:	f001 fffb 	bl	800c9cc <LmHandlerJoinStatus>
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	2b01      	cmp	r3, #1
 800a9da:	d101      	bne.n	800a9e0 <OnSystemReset+0x1c>
  {
    NVIC_SystemReset();
 800a9dc:	f7ff fbcc 	bl	800a178 <__NVIC_SystemReset>
  }
  /* USER CODE BEGIN OnSystemReset_Last */

  /* USER CODE END OnSystemReset_Last */
}
 800a9e0:	bf00      	nop
 800a9e2:	bd80      	pop	{r7, pc}

0800a9e4 <StopJoin>:

static void StopJoin(void)
{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif

  /* USER CODE END StopJoin_1 */

  UTIL_TIMER_Stop(&TxTimer);
 800a9e8:	4817      	ldr	r0, [pc, #92]	@ (800aa48 <StopJoin+0x64>)
 800a9ea:	f010 fca1 	bl	801b330 <UTIL_TIMER_Stop>

  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 800a9ee:	f002 fccf 	bl	800d390 <LmHandlerStop>
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d006      	beq.n	800aa06 <StopJoin+0x22>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 800a9f8:	4b14      	ldr	r3, [pc, #80]	@ (800aa4c <StopJoin+0x68>)
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	2100      	movs	r1, #0
 800a9fe:	2002      	movs	r0, #2
 800aa00:	f010 fea0 	bl	801b744 <UTIL_ADV_TRACE_COND_FSend>
 800aa04:	e01a      	b.n	800aa3c <StopJoin+0x58>
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 800aa06:	4b12      	ldr	r3, [pc, #72]	@ (800aa50 <StopJoin+0x6c>)
 800aa08:	2200      	movs	r2, #0
 800aa0a:	2100      	movs	r1, #0
 800aa0c:	2002      	movs	r0, #2
 800aa0e:	f010 fe99 	bl	801b744 <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_OTAA;
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to OTAA mode\r\n");
    }
    else
    {
      ActivationType = ACTIVATION_TYPE_ABP;
 800aa12:	4b10      	ldr	r3, [pc, #64]	@ (800aa54 <StopJoin+0x70>)
 800aa14:	2201      	movs	r2, #1
 800aa16:	701a      	strb	r2, [r3, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 800aa18:	4b0f      	ldr	r3, [pc, #60]	@ (800aa58 <StopJoin+0x74>)
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	2100      	movs	r1, #0
 800aa1e:	2002      	movs	r0, #2
 800aa20:	f010 fe90 	bl	801b744 <UTIL_ADV_TRACE_COND_FSend>
    }
    LmHandlerConfigure(&LmHandlerParams);
 800aa24:	480d      	ldr	r0, [pc, #52]	@ (800aa5c <StopJoin+0x78>)
 800aa26:	f001 fdd3 	bl	800c5d0 <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 800aa2a:	4b0a      	ldr	r3, [pc, #40]	@ (800aa54 <StopJoin+0x70>)
 800aa2c:	781b      	ldrb	r3, [r3, #0]
 800aa2e:	2101      	movs	r1, #1
 800aa30:	4618      	mov	r0, r3
 800aa32:	f001 ff49 	bl	800c8c8 <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 800aa36:	4804      	ldr	r0, [pc, #16]	@ (800aa48 <StopJoin+0x64>)
 800aa38:	f010 fc0c 	bl	801b254 <UTIL_TIMER_Start>
  }
  UTIL_TIMER_Start(&StopJoinTimer);
 800aa3c:	4808      	ldr	r0, [pc, #32]	@ (800aa60 <StopJoin+0x7c>)
 800aa3e:	f010 fc09 	bl	801b254 <UTIL_TIMER_Start>
  /* USER CODE BEGIN StopJoin_Last */

  /* USER CODE END StopJoin_Last */
}
 800aa42:	bf00      	nop
 800aa44:	bd80      	pop	{r7, pc}
 800aa46:	bf00      	nop
 800aa48:	20000588 	.word	0x20000588
 800aa4c:	0801eb24 	.word	0x0801eb24
 800aa50:	0801eb44 	.word	0x0801eb44
 800aa54:	20000008 	.word	0x20000008
 800aa58:	0801eb58 	.word	0x0801eb58
 800aa5c:	20000058 	.word	0x20000058
 800aa60:	200005a0 	.word	0x200005a0

0800aa64 <OnStopJoinTimerEvent>:

static void OnStopJoinTimerEvent(void *context)
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b082      	sub	sp, #8
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnStopJoinTimerEvent_1 */

  /* USER CODE END OnStopJoinTimerEvent_1 */
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 800aa6c:	4b05      	ldr	r3, [pc, #20]	@ (800aa84 <OnStopJoinTimerEvent+0x20>)
 800aa6e:	781b      	ldrb	r3, [r3, #0]
 800aa70:	2b02      	cmp	r3, #2
 800aa72:	d103      	bne.n	800aa7c <OnStopJoinTimerEvent+0x18>
  {
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 800aa74:	2100      	movs	r1, #0
 800aa76:	2008      	movs	r0, #8
 800aa78:	f010 fb36 	bl	801b0e8 <UTIL_SEQ_SetTask>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
  /* USER CODE END OnStopJoinTimerEvent_Last */
}
 800aa7c:	bf00      	nop
 800aa7e:	3708      	adds	r7, #8
 800aa80:	46bd      	mov	sp, r7
 800aa82:	bd80      	pop	{r7, pc}
 800aa84:	20000008 	.word	0x20000008

0800aa88 <StoreContext>:

static void StoreContext(void)
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b082      	sub	sp, #8
 800aa8c:	af00      	add	r7, sp, #0
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800aa8e:	23ff      	movs	r3, #255	@ 0xff
 800aa90:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN StoreContext_1 */

  /* USER CODE END StoreContext_1 */
  status = LmHandlerNvmDataStore();
 800aa92:	f002 fc97 	bl	800d3c4 <LmHandlerNvmDataStore>
 800aa96:	4603      	mov	r3, r0
 800aa98:	71fb      	strb	r3, [r7, #7]

  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 800aa9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aa9e:	f113 0f08 	cmn.w	r3, #8
 800aaa2:	d106      	bne.n	800aab2 <StoreContext+0x2a>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 800aaa4:	4b0a      	ldr	r3, [pc, #40]	@ (800aad0 <StoreContext+0x48>)
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	2100      	movs	r1, #0
 800aaaa:	2002      	movs	r0, #2
 800aaac:	f010 fe4a 	bl	801b744 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
  }
  /* USER CODE BEGIN StoreContext_Last */

  /* USER CODE END StoreContext_Last */
}
 800aab0:	e00a      	b.n	800aac8 <StoreContext+0x40>
  else if (status == LORAMAC_HANDLER_ERROR)
 800aab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aaba:	d105      	bne.n	800aac8 <StoreContext+0x40>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 800aabc:	4b05      	ldr	r3, [pc, #20]	@ (800aad4 <StoreContext+0x4c>)
 800aabe:	2200      	movs	r2, #0
 800aac0:	2100      	movs	r1, #0
 800aac2:	2002      	movs	r0, #2
 800aac4:	f010 fe3e 	bl	801b744 <UTIL_ADV_TRACE_COND_FSend>
}
 800aac8:	bf00      	nop
 800aaca:	3708      	adds	r7, #8
 800aacc:	46bd      	mov	sp, r7
 800aace:	bd80      	pop	{r7, pc}
 800aad0:	0801eb78 	.word	0x0801eb78
 800aad4:	0801eb90 	.word	0x0801eb90

0800aad8 <OnNvmDataChange>:

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b082      	sub	sp, #8
 800aadc:	af00      	add	r7, sp, #0
 800aade:	4603      	mov	r3, r0
 800aae0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 800aae2:	79fb      	ldrb	r3, [r7, #7]
 800aae4:	2b01      	cmp	r3, #1
 800aae6:	d106      	bne.n	800aaf6 <OnNvmDataChange+0x1e>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 800aae8:	4b08      	ldr	r3, [pc, #32]	@ (800ab0c <OnNvmDataChange+0x34>)
 800aaea:	2200      	movs	r2, #0
 800aaec:	2100      	movs	r1, #0
 800aaee:	2002      	movs	r0, #2
 800aaf0:	f010 fe28 	bl	801b744 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 800aaf4:	e005      	b.n	800ab02 <OnNvmDataChange+0x2a>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 800aaf6:	4b06      	ldr	r3, [pc, #24]	@ (800ab10 <OnNvmDataChange+0x38>)
 800aaf8:	2200      	movs	r2, #0
 800aafa:	2100      	movs	r1, #0
 800aafc:	2002      	movs	r0, #2
 800aafe:	f010 fe21 	bl	801b744 <UTIL_ADV_TRACE_COND_FSend>
}
 800ab02:	bf00      	nop
 800ab04:	3708      	adds	r7, #8
 800ab06:	46bd      	mov	sp, r7
 800ab08:	bd80      	pop	{r7, pc}
 800ab0a:	bf00      	nop
 800ab0c:	0801eba8 	.word	0x0801eba8
 800ab10:	0801ebbc 	.word	0x0801ebbc

0800ab14 <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b082      	sub	sp, #8
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
 800ab1c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (HAL_FLASH_Unlock() == HAL_OK)
 800ab1e:	f7fa f8e7 	bl	8004cf0 <HAL_FLASH_Unlock>
 800ab22:	4603      	mov	r3, r0
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d11c      	bne.n	800ab62 <OnStoreContextRequest+0x4e>
  {
    if (FLASH_IF_EraseByPages(PAGE(LORAWAN_NVM_BASE_ADDRESS), 1, 0U) == FLASH_OK)
 800ab28:	4b10      	ldr	r3, [pc, #64]	@ (800ab6c <OnStoreContextRequest+0x58>)
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	029a      	lsls	r2, r3, #10
 800ab2e:	4b10      	ldr	r3, [pc, #64]	@ (800ab70 <OnStoreContextRequest+0x5c>)
 800ab30:	4013      	ands	r3, r2
 800ab32:	f44f 327c 	mov.w	r2, #258048	@ 0x3f000
 800ab36:	fbb2 f1f3 	udiv	r1, r2, r3
 800ab3a:	fb01 f303 	mul.w	r3, r1, r3
 800ab3e:	1ad3      	subs	r3, r2, r3
 800ab40:	0adb      	lsrs	r3, r3, #11
 800ab42:	2200      	movs	r2, #0
 800ab44:	2101      	movs	r1, #1
 800ab46:	4618      	mov	r0, r3
 800ab48:	f7f6 fd15 	bl	8001576 <FLASH_IF_EraseByPages>
 800ab4c:	4603      	mov	r3, r0
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d105      	bne.n	800ab5e <OnStoreContextRequest+0x4a>
    {
      FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (uint8_t *)nvm, nvm_size, NULL);
 800ab52:	2300      	movs	r3, #0
 800ab54:	683a      	ldr	r2, [r7, #0]
 800ab56:	6879      	ldr	r1, [r7, #4]
 800ab58:	4806      	ldr	r0, [pc, #24]	@ (800ab74 <OnStoreContextRequest+0x60>)
 800ab5a:	f7f6 fc2b 	bl	80013b4 <FLASH_IF_Write>
    }
    HAL_FLASH_Lock();
 800ab5e:	f7fa f8e9 	bl	8004d34 <HAL_FLASH_Lock>
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 800ab62:	bf00      	nop
 800ab64:	3708      	adds	r7, #8
 800ab66:	46bd      	mov	sp, r7
 800ab68:	bd80      	pop	{r7, pc}
 800ab6a:	bf00      	nop
 800ab6c:	1fff75e0 	.word	0x1fff75e0
 800ab70:	03fffc00 	.word	0x03fffc00
 800ab74:	0803f000 	.word	0x0803f000

0800ab78 <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b082      	sub	sp, #8
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
 800ab80:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  UTIL_MEM_cpy_8(nvm, (void *)LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	b29b      	uxth	r3, r3
 800ab86:	461a      	mov	r2, r3
 800ab88:	4903      	ldr	r1, [pc, #12]	@ (800ab98 <OnRestoreContextRequest+0x20>)
 800ab8a:	6878      	ldr	r0, [r7, #4]
 800ab8c:	f00f fd90 	bl	801a6b0 <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 800ab90:	bf00      	nop
 800ab92:	3708      	adds	r7, #8
 800ab94:	46bd      	mov	sp, r7
 800ab96:	bd80      	pop	{r7, pc}
 800ab98:	0803f000 	.word	0x0803f000

0800ab9c <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	af00      	add	r7, sp, #0
  loraInfo.ActivationMode = 0;
 800aba0:	4b15      	ldr	r3, [pc, #84]	@ (800abf8 <LoraInfo_Init+0x5c>)
 800aba2:	2200      	movs	r2, #0
 800aba4:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 800aba6:	4b14      	ldr	r3, [pc, #80]	@ (800abf8 <LoraInfo_Init+0x5c>)
 800aba8:	2200      	movs	r2, #0
 800abaa:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 800abac:	4b12      	ldr	r3, [pc, #72]	@ (800abf8 <LoraInfo_Init+0x5c>)
 800abae:	2200      	movs	r2, #0
 800abb0:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800abb2:	4b11      	ldr	r3, [pc, #68]	@ (800abf8 <LoraInfo_Init+0x5c>)
 800abb4:	2200      	movs	r2, #0
 800abb6:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN LoraInfo_Init_1 */

  /* USER CODE END LoraInfo_Init_1 */

#ifdef  REGION_AS923
  loraInfo.Region |= (1 << LORAMAC_REGION_AS923);
 800abb8:	4b0f      	ldr	r3, [pc, #60]	@ (800abf8 <LoraInfo_Init+0x5c>)
 800abba:	685b      	ldr	r3, [r3, #4]
 800abbc:	f043 0301 	orr.w	r3, r3, #1
 800abc0:	4a0d      	ldr	r2, [pc, #52]	@ (800abf8 <LoraInfo_Init+0x5c>)
 800abc2:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864);
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 800abc4:	4b0c      	ldr	r3, [pc, #48]	@ (800abf8 <LoraInfo_Init+0x5c>)
 800abc6:	685b      	ldr	r3, [r3, #4]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d10d      	bne.n	800abe8 <LoraInfo_Init+0x4c>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 800abcc:	4b0b      	ldr	r3, [pc, #44]	@ (800abfc <LoraInfo_Init+0x60>)
 800abce:	2200      	movs	r2, #0
 800abd0:	2100      	movs	r1, #0
 800abd2:	2000      	movs	r0, #0
 800abd4:	f010 fdb6 	bl	801b744 <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 800abd8:	bf00      	nop
 800abda:	f010 fda1 	bl	801b720 <UTIL_ADV_TRACE_IsBufferEmpty>
 800abde:	4603      	mov	r3, r0
 800abe0:	2b01      	cmp	r3, #1
 800abe2:	d1fa      	bne.n	800abda <LoraInfo_Init+0x3e>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 800abe4:	bf00      	nop
 800abe6:	e7fd      	b.n	800abe4 <LoraInfo_Init+0x48>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 800abe8:	4b03      	ldr	r3, [pc, #12]	@ (800abf8 <LoraInfo_Init+0x5c>)
 800abea:	2200      	movs	r2, #0
 800abec:	60da      	str	r2, [r3, #12]
  loraInfo.ActivationMode = 3;
 800abee:	4b02      	ldr	r3, [pc, #8]	@ (800abf8 <LoraInfo_Init+0x5c>)
 800abf0:	2203      	movs	r2, #3
 800abf2:	601a      	str	r2, [r3, #0]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALIZATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800abf4:	bf00      	nop
 800abf6:	bd80      	pop	{r7, pc}
 800abf8:	20000710 	.word	0x20000710
 800abfc:	0801ebd0 	.word	0x0801ebd0

0800ac00 <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 800ac00:	b480      	push	{r7}
 800ac02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 800ac04:	4b02      	ldr	r3, [pc, #8]	@ (800ac10 <LoraInfo_GetPtr+0x10>)
}
 800ac06:	4618      	mov	r0, r3
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	bc80      	pop	{r7}
 800ac0c:	4770      	bx	lr
 800ac0e:	bf00      	nop
 800ac10:	20000710 	.word	0x20000710

0800ac14 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 800ac18:	f7f8 f971 	bl	8002efe <BSP_RADIO_Init>
 800ac1c:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800ac1e:	4618      	mov	r0, r3
 800ac20:	bd80      	pop	{r7, pc}

0800ac22 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800ac22:	b580      	push	{r7, lr}
 800ac24:	b082      	sub	sp, #8
 800ac26:	af00      	add	r7, sp, #0
 800ac28:	4603      	mov	r3, r0
 800ac2a:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800ac2c:	79fb      	ldrb	r3, [r7, #7]
 800ac2e:	4618      	mov	r0, r3
 800ac30:	f7f8 f996 	bl	8002f60 <BSP_RADIO_ConfigRFSwitch>
 800ac34:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800ac36:	4618      	mov	r0, r3
 800ac38:	3708      	adds	r7, #8
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	bd80      	pop	{r7, pc}

0800ac3e <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800ac3e:	b580      	push	{r7, lr}
 800ac40:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 800ac42:	f7f8 f9db 	bl	8002ffc <BSP_RADIO_GetTxConfig>
 800ac46:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800ac48:	4618      	mov	r0, r3
 800ac4a:	bd80      	pop	{r7, pc}

0800ac4c <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 800ac50:	f7f8 f9db 	bl	800300a <BSP_RADIO_IsTCXO>
 800ac54:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800ac56:	4618      	mov	r0, r3
 800ac58:	bd80      	pop	{r7, pc}

0800ac5a <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800ac5a:	b580      	push	{r7, lr}
 800ac5c:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 800ac5e:	f7f8 f9db 	bl	8003018 <BSP_RADIO_IsDCDC>
 800ac62:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800ac64:	4618      	mov	r0, r3
 800ac66:	bd80      	pop	{r7, pc}

0800ac68 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b082      	sub	sp, #8
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	4603      	mov	r3, r0
 800ac70:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 800ac72:	79fb      	ldrb	r3, [r7, #7]
 800ac74:	4618      	mov	r0, r3
 800ac76:	f7f8 f9d6 	bl	8003026 <BSP_RADIO_GetRFOMaxPowerConfig>
 800ac7a:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	3708      	adds	r7, #8
 800ac80:	46bd      	mov	sp, r7
 800ac82:	bd80      	pop	{r7, pc}

0800ac84 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b082      	sub	sp, #8
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	33f1      	adds	r3, #241	@ 0xf1
 800ac90:	2210      	movs	r2, #16
 800ac92:	2100      	movs	r1, #0
 800ac94:	4618      	mov	r0, r3
 800ac96:	f00c fa39 	bl	801710c <memset1>
    ctx->M_n = 0;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	22f0      	movs	r2, #240	@ 0xf0
 800aca6:	2100      	movs	r1, #0
 800aca8:	4618      	mov	r0, r3
 800acaa:	f00c fa2f 	bl	801710c <memset1>
}
 800acae:	bf00      	nop
 800acb0:	3708      	adds	r7, #8
 800acb2:	46bd      	mov	sp, r7
 800acb4:	bd80      	pop	{r7, pc}

0800acb6 <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800acb6:	b580      	push	{r7, lr}
 800acb8:	b082      	sub	sp, #8
 800acba:	af00      	add	r7, sp, #0
 800acbc:	6078      	str	r0, [r7, #4]
 800acbe:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	461a      	mov	r2, r3
 800acc4:	2110      	movs	r1, #16
 800acc6:	6838      	ldr	r0, [r7, #0]
 800acc8:	f000 fe60 	bl	800b98c <lorawan_aes_set_key>
}
 800accc:	bf00      	nop
 800acce:	3708      	adds	r7, #8
 800acd0:	46bd      	mov	sp, r7
 800acd2:	bd80      	pop	{r7, pc}

0800acd4 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b08c      	sub	sp, #48	@ 0x30
 800acd8:	af00      	add	r7, sp, #0
 800acda:	60f8      	str	r0, [r7, #12]
 800acdc:	60b9      	str	r1, [r7, #8]
 800acde:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	f000 80a1 	beq.w	800ae2e <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800acf2:	f1c3 0310 	rsb	r3, r3, #16
 800acf6:	687a      	ldr	r2, [r7, #4]
 800acf8:	4293      	cmp	r3, r2
 800acfa:	bf28      	it	cs
 800acfc:	4613      	movcs	r3, r2
 800acfe:	627b      	str	r3, [r7, #36]	@ 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	f203 1201 	addw	r2, r3, #257	@ 0x101
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800ad0c:	4413      	add	r3, r2
 800ad0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ad10:	b292      	uxth	r2, r2
 800ad12:	68b9      	ldr	r1, [r7, #8]
 800ad14:	4618      	mov	r0, r3
 800ad16:	f00c f9be 	bl	8017096 <memcpy1>
        ctx->M_n += mlen;
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	f8d3 2114 	ldr.w	r2, [r3, #276]	@ 0x114
 800ad20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad22:	441a      	add	r2, r3
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
        if( ctx->M_n < 16 || len == mlen )
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800ad30:	2b0f      	cmp	r3, #15
 800ad32:	f240 808d 	bls.w	800ae50 <AES_CMAC_Update+0x17c>
 800ad36:	687a      	ldr	r2, [r7, #4]
 800ad38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad3a:	429a      	cmp	r2, r3
 800ad3c:	f000 8088 	beq.w	800ae50 <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 800ad40:	2300      	movs	r3, #0
 800ad42:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ad44:	e015      	b.n	800ad72 <AES_CMAC_Update+0x9e>
 800ad46:	68fa      	ldr	r2, [r7, #12]
 800ad48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad4a:	4413      	add	r3, r2
 800ad4c:	33f1      	adds	r3, #241	@ 0xf1
 800ad4e:	781a      	ldrb	r2, [r3, #0]
 800ad50:	68f9      	ldr	r1, [r7, #12]
 800ad52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad54:	440b      	add	r3, r1
 800ad56:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800ad5a:	781b      	ldrb	r3, [r3, #0]
 800ad5c:	4053      	eors	r3, r2
 800ad5e:	b2d9      	uxtb	r1, r3
 800ad60:	68fa      	ldr	r2, [r7, #12]
 800ad62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad64:	4413      	add	r3, r2
 800ad66:	33f1      	adds	r3, #241	@ 0xf1
 800ad68:	460a      	mov	r2, r1
 800ad6a:	701a      	strb	r2, [r3, #0]
 800ad6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad6e:	3301      	adds	r3, #1
 800ad70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ad72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad74:	2b0f      	cmp	r3, #15
 800ad76:	dde6      	ble.n	800ad46 <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 800ad7e:	f107 0314 	add.w	r3, r7, #20
 800ad82:	2210      	movs	r2, #16
 800ad84:	4618      	mov	r0, r3
 800ad86:	f00c f986 	bl	8017096 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800ad8a:	68fa      	ldr	r2, [r7, #12]
 800ad8c:	f107 0114 	add.w	r1, r7, #20
 800ad90:	f107 0314 	add.w	r3, r7, #20
 800ad94:	4618      	mov	r0, r3
 800ad96:	f000 fed7 	bl	800bb48 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	33f1      	adds	r3, #241	@ 0xf1
 800ad9e:	f107 0114 	add.w	r1, r7, #20
 800ada2:	2210      	movs	r2, #16
 800ada4:	4618      	mov	r0, r3
 800ada6:	f00c f976 	bl	8017096 <memcpy1>

        data += mlen;
 800adaa:	68ba      	ldr	r2, [r7, #8]
 800adac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adae:	4413      	add	r3, r2
 800adb0:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800adb2:	687a      	ldr	r2, [r7, #4]
 800adb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adb6:	1ad3      	subs	r3, r2, r3
 800adb8:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800adba:	e038      	b.n	800ae2e <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 800adbc:	2300      	movs	r3, #0
 800adbe:	62bb      	str	r3, [r7, #40]	@ 0x28
 800adc0:	e013      	b.n	800adea <AES_CMAC_Update+0x116>
 800adc2:	68fa      	ldr	r2, [r7, #12]
 800adc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adc6:	4413      	add	r3, r2
 800adc8:	33f1      	adds	r3, #241	@ 0xf1
 800adca:	781a      	ldrb	r2, [r3, #0]
 800adcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adce:	68b9      	ldr	r1, [r7, #8]
 800add0:	440b      	add	r3, r1
 800add2:	781b      	ldrb	r3, [r3, #0]
 800add4:	4053      	eors	r3, r2
 800add6:	b2d9      	uxtb	r1, r3
 800add8:	68fa      	ldr	r2, [r7, #12]
 800adda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800addc:	4413      	add	r3, r2
 800adde:	33f1      	adds	r3, #241	@ 0xf1
 800ade0:	460a      	mov	r2, r1
 800ade2:	701a      	strb	r2, [r3, #0]
 800ade4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ade6:	3301      	adds	r3, #1
 800ade8:	62bb      	str	r3, [r7, #40]	@ 0x28
 800adea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adec:	2b0f      	cmp	r3, #15
 800adee:	dde8      	ble.n	800adc2 <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 800adf6:	f107 0314 	add.w	r3, r7, #20
 800adfa:	2210      	movs	r2, #16
 800adfc:	4618      	mov	r0, r3
 800adfe:	f00c f94a 	bl	8017096 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800ae02:	68fa      	ldr	r2, [r7, #12]
 800ae04:	f107 0114 	add.w	r1, r7, #20
 800ae08:	f107 0314 	add.w	r3, r7, #20
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	f000 fe9b 	bl	800bb48 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	33f1      	adds	r3, #241	@ 0xf1
 800ae16:	f107 0114 	add.w	r1, r7, #20
 800ae1a:	2210      	movs	r2, #16
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	f00c f93a 	bl	8017096 <memcpy1>

        data += 16;
 800ae22:	68bb      	ldr	r3, [r7, #8]
 800ae24:	3310      	adds	r3, #16
 800ae26:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	3b10      	subs	r3, #16
 800ae2c:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	2b10      	cmp	r3, #16
 800ae32:	d8c3      	bhi.n	800adbc <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800ae3a:	687a      	ldr	r2, [r7, #4]
 800ae3c:	b292      	uxth	r2, r2
 800ae3e:	68b9      	ldr	r1, [r7, #8]
 800ae40:	4618      	mov	r0, r3
 800ae42:	f00c f928 	bl	8017096 <memcpy1>
    ctx->M_n = len;
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	687a      	ldr	r2, [r7, #4]
 800ae4a:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
 800ae4e:	e000      	b.n	800ae52 <AES_CMAC_Update+0x17e>
            return;
 800ae50:	bf00      	nop
}
 800ae52:	3730      	adds	r7, #48	@ 0x30
 800ae54:	46bd      	mov	sp, r7
 800ae56:	bd80      	pop	{r7, pc}

0800ae58 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b092      	sub	sp, #72	@ 0x48
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
 800ae60:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800ae62:	f107 031c 	add.w	r3, r7, #28
 800ae66:	2210      	movs	r2, #16
 800ae68:	2100      	movs	r1, #0
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	f00c f94e 	bl	801710c <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800ae70:	683a      	ldr	r2, [r7, #0]
 800ae72:	f107 011c 	add.w	r1, r7, #28
 800ae76:	f107 031c 	add.w	r3, r7, #28
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	f000 fe64 	bl	800bb48 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800ae80:	7f3b      	ldrb	r3, [r7, #28]
 800ae82:	b25b      	sxtb	r3, r3
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	da31      	bge.n	800aeec <AES_CMAC_Final+0x94>
    {
        LSHIFT( K, K );
 800ae88:	2300      	movs	r3, #0
 800ae8a:	647b      	str	r3, [r7, #68]	@ 0x44
 800ae8c:	e01c      	b.n	800aec8 <AES_CMAC_Final+0x70>
 800ae8e:	f107 021c 	add.w	r2, r7, #28
 800ae92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ae94:	4413      	add	r3, r2
 800ae96:	781b      	ldrb	r3, [r3, #0]
 800ae98:	b25b      	sxtb	r3, r3
 800ae9a:	005b      	lsls	r3, r3, #1
 800ae9c:	b25a      	sxtb	r2, r3
 800ae9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aea0:	3301      	adds	r3, #1
 800aea2:	3348      	adds	r3, #72	@ 0x48
 800aea4:	443b      	add	r3, r7
 800aea6:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800aeaa:	09db      	lsrs	r3, r3, #7
 800aeac:	b2db      	uxtb	r3, r3
 800aeae:	b25b      	sxtb	r3, r3
 800aeb0:	4313      	orrs	r3, r2
 800aeb2:	b25b      	sxtb	r3, r3
 800aeb4:	b2d9      	uxtb	r1, r3
 800aeb6:	f107 021c 	add.w	r2, r7, #28
 800aeba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aebc:	4413      	add	r3, r2
 800aebe:	460a      	mov	r2, r1
 800aec0:	701a      	strb	r2, [r3, #0]
 800aec2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aec4:	3301      	adds	r3, #1
 800aec6:	647b      	str	r3, [r7, #68]	@ 0x44
 800aec8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aeca:	2b0e      	cmp	r3, #14
 800aecc:	dddf      	ble.n	800ae8e <AES_CMAC_Final+0x36>
 800aece:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800aed2:	005b      	lsls	r3, r3, #1
 800aed4:	b2db      	uxtb	r3, r3
 800aed6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        K[15] ^= 0x87;
 800aeda:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800aede:	f083 0378 	eor.w	r3, r3, #120	@ 0x78
 800aee2:	43db      	mvns	r3, r3
 800aee4:	b2db      	uxtb	r3, r3
 800aee6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aeea:	e028      	b.n	800af3e <AES_CMAC_Final+0xe6>
    }
    else
        LSHIFT( K, K );
 800aeec:	2300      	movs	r3, #0
 800aeee:	643b      	str	r3, [r7, #64]	@ 0x40
 800aef0:	e01c      	b.n	800af2c <AES_CMAC_Final+0xd4>
 800aef2:	f107 021c 	add.w	r2, r7, #28
 800aef6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aef8:	4413      	add	r3, r2
 800aefa:	781b      	ldrb	r3, [r3, #0]
 800aefc:	b25b      	sxtb	r3, r3
 800aefe:	005b      	lsls	r3, r3, #1
 800af00:	b25a      	sxtb	r2, r3
 800af02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af04:	3301      	adds	r3, #1
 800af06:	3348      	adds	r3, #72	@ 0x48
 800af08:	443b      	add	r3, r7
 800af0a:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800af0e:	09db      	lsrs	r3, r3, #7
 800af10:	b2db      	uxtb	r3, r3
 800af12:	b25b      	sxtb	r3, r3
 800af14:	4313      	orrs	r3, r2
 800af16:	b25b      	sxtb	r3, r3
 800af18:	b2d9      	uxtb	r1, r3
 800af1a:	f107 021c 	add.w	r2, r7, #28
 800af1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af20:	4413      	add	r3, r2
 800af22:	460a      	mov	r2, r1
 800af24:	701a      	strb	r2, [r3, #0]
 800af26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af28:	3301      	adds	r3, #1
 800af2a:	643b      	str	r3, [r7, #64]	@ 0x40
 800af2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af2e:	2b0e      	cmp	r3, #14
 800af30:	dddf      	ble.n	800aef2 <AES_CMAC_Final+0x9a>
 800af32:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800af36:	005b      	lsls	r3, r3, #1
 800af38:	b2db      	uxtb	r3, r3
 800af3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

    if( ctx->M_n == 16 )
 800af3e:	683b      	ldr	r3, [r7, #0]
 800af40:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800af44:	2b10      	cmp	r3, #16
 800af46:	d11d      	bne.n	800af84 <AES_CMAC_Final+0x12c>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800af48:	2300      	movs	r3, #0
 800af4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800af4c:	e016      	b.n	800af7c <AES_CMAC_Final+0x124>
 800af4e:	683a      	ldr	r2, [r7, #0]
 800af50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af52:	4413      	add	r3, r2
 800af54:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800af58:	781a      	ldrb	r2, [r3, #0]
 800af5a:	f107 011c 	add.w	r1, r7, #28
 800af5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af60:	440b      	add	r3, r1
 800af62:	781b      	ldrb	r3, [r3, #0]
 800af64:	4053      	eors	r3, r2
 800af66:	b2d9      	uxtb	r1, r3
 800af68:	683a      	ldr	r2, [r7, #0]
 800af6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af6c:	4413      	add	r3, r2
 800af6e:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800af72:	460a      	mov	r2, r1
 800af74:	701a      	strb	r2, [r3, #0]
 800af76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af78:	3301      	adds	r3, #1
 800af7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800af7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af7e:	2b0f      	cmp	r3, #15
 800af80:	dde5      	ble.n	800af4e <AES_CMAC_Final+0xf6>
 800af82:	e098      	b.n	800b0b6 <AES_CMAC_Final+0x25e>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800af84:	7f3b      	ldrb	r3, [r7, #28]
 800af86:	b25b      	sxtb	r3, r3
 800af88:	2b00      	cmp	r3, #0
 800af8a:	da31      	bge.n	800aff0 <AES_CMAC_Final+0x198>
        {
            LSHIFT( K, K );
 800af8c:	2300      	movs	r3, #0
 800af8e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800af90:	e01c      	b.n	800afcc <AES_CMAC_Final+0x174>
 800af92:	f107 021c 	add.w	r2, r7, #28
 800af96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af98:	4413      	add	r3, r2
 800af9a:	781b      	ldrb	r3, [r3, #0]
 800af9c:	b25b      	sxtb	r3, r3
 800af9e:	005b      	lsls	r3, r3, #1
 800afa0:	b25a      	sxtb	r2, r3
 800afa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afa4:	3301      	adds	r3, #1
 800afa6:	3348      	adds	r3, #72	@ 0x48
 800afa8:	443b      	add	r3, r7
 800afaa:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800afae:	09db      	lsrs	r3, r3, #7
 800afb0:	b2db      	uxtb	r3, r3
 800afb2:	b25b      	sxtb	r3, r3
 800afb4:	4313      	orrs	r3, r2
 800afb6:	b25b      	sxtb	r3, r3
 800afb8:	b2d9      	uxtb	r1, r3
 800afba:	f107 021c 	add.w	r2, r7, #28
 800afbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afc0:	4413      	add	r3, r2
 800afc2:	460a      	mov	r2, r1
 800afc4:	701a      	strb	r2, [r3, #0]
 800afc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afc8:	3301      	adds	r3, #1
 800afca:	63bb      	str	r3, [r7, #56]	@ 0x38
 800afcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afce:	2b0e      	cmp	r3, #14
 800afd0:	dddf      	ble.n	800af92 <AES_CMAC_Final+0x13a>
 800afd2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800afd6:	005b      	lsls	r3, r3, #1
 800afd8:	b2db      	uxtb	r3, r3
 800afda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
            K[15] ^= 0x87;
 800afde:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800afe2:	f083 0378 	eor.w	r3, r3, #120	@ 0x78
 800afe6:	43db      	mvns	r3, r3
 800afe8:	b2db      	uxtb	r3, r3
 800afea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800afee:	e028      	b.n	800b042 <AES_CMAC_Final+0x1ea>
        }
        else
            LSHIFT( K, K );
 800aff0:	2300      	movs	r3, #0
 800aff2:	637b      	str	r3, [r7, #52]	@ 0x34
 800aff4:	e01c      	b.n	800b030 <AES_CMAC_Final+0x1d8>
 800aff6:	f107 021c 	add.w	r2, r7, #28
 800affa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800affc:	4413      	add	r3, r2
 800affe:	781b      	ldrb	r3, [r3, #0]
 800b000:	b25b      	sxtb	r3, r3
 800b002:	005b      	lsls	r3, r3, #1
 800b004:	b25a      	sxtb	r2, r3
 800b006:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b008:	3301      	adds	r3, #1
 800b00a:	3348      	adds	r3, #72	@ 0x48
 800b00c:	443b      	add	r3, r7
 800b00e:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800b012:	09db      	lsrs	r3, r3, #7
 800b014:	b2db      	uxtb	r3, r3
 800b016:	b25b      	sxtb	r3, r3
 800b018:	4313      	orrs	r3, r2
 800b01a:	b25b      	sxtb	r3, r3
 800b01c:	b2d9      	uxtb	r1, r3
 800b01e:	f107 021c 	add.w	r2, r7, #28
 800b022:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b024:	4413      	add	r3, r2
 800b026:	460a      	mov	r2, r1
 800b028:	701a      	strb	r2, [r3, #0]
 800b02a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b02c:	3301      	adds	r3, #1
 800b02e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b030:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b032:	2b0e      	cmp	r3, #14
 800b034:	dddf      	ble.n	800aff6 <AES_CMAC_Final+0x19e>
 800b036:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b03a:	005b      	lsls	r3, r3, #1
 800b03c:	b2db      	uxtb	r3, r3
 800b03e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800b042:	683b      	ldr	r3, [r7, #0]
 800b044:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800b048:	683a      	ldr	r2, [r7, #0]
 800b04a:	4413      	add	r3, r2
 800b04c:	2280      	movs	r2, #128	@ 0x80
 800b04e:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        while( ++ctx->M_n < 16 )
 800b052:	e007      	b.n	800b064 <AES_CMAC_Final+0x20c>
            ctx->M_last[ctx->M_n] = 0;
 800b054:	683b      	ldr	r3, [r7, #0]
 800b056:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800b05a:	683a      	ldr	r2, [r7, #0]
 800b05c:	4413      	add	r3, r2
 800b05e:	2200      	movs	r2, #0
 800b060:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        while( ++ctx->M_n < 16 )
 800b064:	683b      	ldr	r3, [r7, #0]
 800b066:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800b06a:	1c5a      	adds	r2, r3, #1
 800b06c:	683b      	ldr	r3, [r7, #0]
 800b06e:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
 800b072:	683b      	ldr	r3, [r7, #0]
 800b074:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800b078:	2b0f      	cmp	r3, #15
 800b07a:	d9eb      	bls.n	800b054 <AES_CMAC_Final+0x1fc>

        XOR( K, ctx->M_last );
 800b07c:	2300      	movs	r3, #0
 800b07e:	633b      	str	r3, [r7, #48]	@ 0x30
 800b080:	e016      	b.n	800b0b0 <AES_CMAC_Final+0x258>
 800b082:	683a      	ldr	r2, [r7, #0]
 800b084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b086:	4413      	add	r3, r2
 800b088:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800b08c:	781a      	ldrb	r2, [r3, #0]
 800b08e:	f107 011c 	add.w	r1, r7, #28
 800b092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b094:	440b      	add	r3, r1
 800b096:	781b      	ldrb	r3, [r3, #0]
 800b098:	4053      	eors	r3, r2
 800b09a:	b2d9      	uxtb	r1, r3
 800b09c:	683a      	ldr	r2, [r7, #0]
 800b09e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0a0:	4413      	add	r3, r2
 800b0a2:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800b0a6:	460a      	mov	r2, r1
 800b0a8:	701a      	strb	r2, [r3, #0]
 800b0aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0ac:	3301      	adds	r3, #1
 800b0ae:	633b      	str	r3, [r7, #48]	@ 0x30
 800b0b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0b2:	2b0f      	cmp	r3, #15
 800b0b4:	dde5      	ble.n	800b082 <AES_CMAC_Final+0x22a>
    }
    XOR( ctx->M_last, ctx->X );
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b0ba:	e015      	b.n	800b0e8 <AES_CMAC_Final+0x290>
 800b0bc:	683a      	ldr	r2, [r7, #0]
 800b0be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0c0:	4413      	add	r3, r2
 800b0c2:	33f1      	adds	r3, #241	@ 0xf1
 800b0c4:	781a      	ldrb	r2, [r3, #0]
 800b0c6:	6839      	ldr	r1, [r7, #0]
 800b0c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0ca:	440b      	add	r3, r1
 800b0cc:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800b0d0:	781b      	ldrb	r3, [r3, #0]
 800b0d2:	4053      	eors	r3, r2
 800b0d4:	b2d9      	uxtb	r1, r3
 800b0d6:	683a      	ldr	r2, [r7, #0]
 800b0d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0da:	4413      	add	r3, r2
 800b0dc:	33f1      	adds	r3, #241	@ 0xf1
 800b0de:	460a      	mov	r2, r1
 800b0e0:	701a      	strb	r2, [r3, #0]
 800b0e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0e4:	3301      	adds	r3, #1
 800b0e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b0e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0ea:	2b0f      	cmp	r3, #15
 800b0ec:	dde6      	ble.n	800b0bc <AES_CMAC_Final+0x264>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800b0ee:	683b      	ldr	r3, [r7, #0]
 800b0f0:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 800b0f4:	f107 030c 	add.w	r3, r7, #12
 800b0f8:	2210      	movs	r2, #16
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	f00b ffcb 	bl	8017096 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800b100:	683a      	ldr	r2, [r7, #0]
 800b102:	f107 030c 	add.w	r3, r7, #12
 800b106:	6879      	ldr	r1, [r7, #4]
 800b108:	4618      	mov	r0, r3
 800b10a:	f000 fd1d 	bl	800bb48 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800b10e:	f107 031c 	add.w	r3, r7, #28
 800b112:	2210      	movs	r2, #16
 800b114:	2100      	movs	r1, #0
 800b116:	4618      	mov	r0, r3
 800b118:	f00b fff8 	bl	801710c <memset1>
}
 800b11c:	bf00      	nop
 800b11e:	3748      	adds	r7, #72	@ 0x48
 800b120:	46bd      	mov	sp, r7
 800b122:	bd80      	pop	{r7, pc}

0800b124 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800b124:	b480      	push	{r7}
 800b126:	b083      	sub	sp, #12
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
 800b12c:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800b12e:	683b      	ldr	r3, [r7, #0]
 800b130:	781a      	ldrb	r2, [r3, #0]
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	3301      	adds	r3, #1
 800b13a:	683a      	ldr	r2, [r7, #0]
 800b13c:	7852      	ldrb	r2, [r2, #1]
 800b13e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	3302      	adds	r3, #2
 800b144:	683a      	ldr	r2, [r7, #0]
 800b146:	7892      	ldrb	r2, [r2, #2]
 800b148:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	3303      	adds	r3, #3
 800b14e:	683a      	ldr	r2, [r7, #0]
 800b150:	78d2      	ldrb	r2, [r2, #3]
 800b152:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	3304      	adds	r3, #4
 800b158:	683a      	ldr	r2, [r7, #0]
 800b15a:	7912      	ldrb	r2, [r2, #4]
 800b15c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	3305      	adds	r3, #5
 800b162:	683a      	ldr	r2, [r7, #0]
 800b164:	7952      	ldrb	r2, [r2, #5]
 800b166:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	3306      	adds	r3, #6
 800b16c:	683a      	ldr	r2, [r7, #0]
 800b16e:	7992      	ldrb	r2, [r2, #6]
 800b170:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	3307      	adds	r3, #7
 800b176:	683a      	ldr	r2, [r7, #0]
 800b178:	79d2      	ldrb	r2, [r2, #7]
 800b17a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	3308      	adds	r3, #8
 800b180:	683a      	ldr	r2, [r7, #0]
 800b182:	7a12      	ldrb	r2, [r2, #8]
 800b184:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	3309      	adds	r3, #9
 800b18a:	683a      	ldr	r2, [r7, #0]
 800b18c:	7a52      	ldrb	r2, [r2, #9]
 800b18e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	330a      	adds	r3, #10
 800b194:	683a      	ldr	r2, [r7, #0]
 800b196:	7a92      	ldrb	r2, [r2, #10]
 800b198:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	330b      	adds	r3, #11
 800b19e:	683a      	ldr	r2, [r7, #0]
 800b1a0:	7ad2      	ldrb	r2, [r2, #11]
 800b1a2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	330c      	adds	r3, #12
 800b1a8:	683a      	ldr	r2, [r7, #0]
 800b1aa:	7b12      	ldrb	r2, [r2, #12]
 800b1ac:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	330d      	adds	r3, #13
 800b1b2:	683a      	ldr	r2, [r7, #0]
 800b1b4:	7b52      	ldrb	r2, [r2, #13]
 800b1b6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	330e      	adds	r3, #14
 800b1bc:	683a      	ldr	r2, [r7, #0]
 800b1be:	7b92      	ldrb	r2, [r2, #14]
 800b1c0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	330f      	adds	r3, #15
 800b1c6:	683a      	ldr	r2, [r7, #0]
 800b1c8:	7bd2      	ldrb	r2, [r2, #15]
 800b1ca:	701a      	strb	r2, [r3, #0]
#endif
}
 800b1cc:	bf00      	nop
 800b1ce:	370c      	adds	r7, #12
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	bc80      	pop	{r7}
 800b1d4:	4770      	bx	lr

0800b1d6 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800b1d6:	b480      	push	{r7}
 800b1d8:	b085      	sub	sp, #20
 800b1da:	af00      	add	r7, sp, #0
 800b1dc:	60f8      	str	r0, [r7, #12]
 800b1de:	60b9      	str	r1, [r7, #8]
 800b1e0:	4613      	mov	r3, r2
 800b1e2:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800b1e4:	e007      	b.n	800b1f6 <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800b1e6:	68ba      	ldr	r2, [r7, #8]
 800b1e8:	1c53      	adds	r3, r2, #1
 800b1ea:	60bb      	str	r3, [r7, #8]
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	1c59      	adds	r1, r3, #1
 800b1f0:	60f9      	str	r1, [r7, #12]
 800b1f2:	7812      	ldrb	r2, [r2, #0]
 800b1f4:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800b1f6:	79fb      	ldrb	r3, [r7, #7]
 800b1f8:	1e5a      	subs	r2, r3, #1
 800b1fa:	71fa      	strb	r2, [r7, #7]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d1f2      	bne.n	800b1e6 <copy_block_nn+0x10>
}
 800b200:	bf00      	nop
 800b202:	bf00      	nop
 800b204:	3714      	adds	r7, #20
 800b206:	46bd      	mov	sp, r7
 800b208:	bc80      	pop	{r7}
 800b20a:	4770      	bx	lr

0800b20c <xor_block>:

static void xor_block( void *d, const void *s )
{
 800b20c:	b480      	push	{r7}
 800b20e:	b083      	sub	sp, #12
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
 800b214:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	781a      	ldrb	r2, [r3, #0]
 800b21a:	683b      	ldr	r3, [r7, #0]
 800b21c:	781b      	ldrb	r3, [r3, #0]
 800b21e:	4053      	eors	r3, r2
 800b220:	b2da      	uxtb	r2, r3
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	3301      	adds	r3, #1
 800b22a:	7819      	ldrb	r1, [r3, #0]
 800b22c:	683b      	ldr	r3, [r7, #0]
 800b22e:	3301      	adds	r3, #1
 800b230:	781a      	ldrb	r2, [r3, #0]
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	3301      	adds	r3, #1
 800b236:	404a      	eors	r2, r1
 800b238:	b2d2      	uxtb	r2, r2
 800b23a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	3302      	adds	r3, #2
 800b240:	7819      	ldrb	r1, [r3, #0]
 800b242:	683b      	ldr	r3, [r7, #0]
 800b244:	3302      	adds	r3, #2
 800b246:	781a      	ldrb	r2, [r3, #0]
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	3302      	adds	r3, #2
 800b24c:	404a      	eors	r2, r1
 800b24e:	b2d2      	uxtb	r2, r2
 800b250:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	3303      	adds	r3, #3
 800b256:	7819      	ldrb	r1, [r3, #0]
 800b258:	683b      	ldr	r3, [r7, #0]
 800b25a:	3303      	adds	r3, #3
 800b25c:	781a      	ldrb	r2, [r3, #0]
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	3303      	adds	r3, #3
 800b262:	404a      	eors	r2, r1
 800b264:	b2d2      	uxtb	r2, r2
 800b266:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	3304      	adds	r3, #4
 800b26c:	7819      	ldrb	r1, [r3, #0]
 800b26e:	683b      	ldr	r3, [r7, #0]
 800b270:	3304      	adds	r3, #4
 800b272:	781a      	ldrb	r2, [r3, #0]
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	3304      	adds	r3, #4
 800b278:	404a      	eors	r2, r1
 800b27a:	b2d2      	uxtb	r2, r2
 800b27c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	3305      	adds	r3, #5
 800b282:	7819      	ldrb	r1, [r3, #0]
 800b284:	683b      	ldr	r3, [r7, #0]
 800b286:	3305      	adds	r3, #5
 800b288:	781a      	ldrb	r2, [r3, #0]
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	3305      	adds	r3, #5
 800b28e:	404a      	eors	r2, r1
 800b290:	b2d2      	uxtb	r2, r2
 800b292:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	3306      	adds	r3, #6
 800b298:	7819      	ldrb	r1, [r3, #0]
 800b29a:	683b      	ldr	r3, [r7, #0]
 800b29c:	3306      	adds	r3, #6
 800b29e:	781a      	ldrb	r2, [r3, #0]
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	3306      	adds	r3, #6
 800b2a4:	404a      	eors	r2, r1
 800b2a6:	b2d2      	uxtb	r2, r2
 800b2a8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	3307      	adds	r3, #7
 800b2ae:	7819      	ldrb	r1, [r3, #0]
 800b2b0:	683b      	ldr	r3, [r7, #0]
 800b2b2:	3307      	adds	r3, #7
 800b2b4:	781a      	ldrb	r2, [r3, #0]
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	3307      	adds	r3, #7
 800b2ba:	404a      	eors	r2, r1
 800b2bc:	b2d2      	uxtb	r2, r2
 800b2be:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	3308      	adds	r3, #8
 800b2c4:	7819      	ldrb	r1, [r3, #0]
 800b2c6:	683b      	ldr	r3, [r7, #0]
 800b2c8:	3308      	adds	r3, #8
 800b2ca:	781a      	ldrb	r2, [r3, #0]
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	3308      	adds	r3, #8
 800b2d0:	404a      	eors	r2, r1
 800b2d2:	b2d2      	uxtb	r2, r2
 800b2d4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	3309      	adds	r3, #9
 800b2da:	7819      	ldrb	r1, [r3, #0]
 800b2dc:	683b      	ldr	r3, [r7, #0]
 800b2de:	3309      	adds	r3, #9
 800b2e0:	781a      	ldrb	r2, [r3, #0]
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	3309      	adds	r3, #9
 800b2e6:	404a      	eors	r2, r1
 800b2e8:	b2d2      	uxtb	r2, r2
 800b2ea:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	330a      	adds	r3, #10
 800b2f0:	7819      	ldrb	r1, [r3, #0]
 800b2f2:	683b      	ldr	r3, [r7, #0]
 800b2f4:	330a      	adds	r3, #10
 800b2f6:	781a      	ldrb	r2, [r3, #0]
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	330a      	adds	r3, #10
 800b2fc:	404a      	eors	r2, r1
 800b2fe:	b2d2      	uxtb	r2, r2
 800b300:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	330b      	adds	r3, #11
 800b306:	7819      	ldrb	r1, [r3, #0]
 800b308:	683b      	ldr	r3, [r7, #0]
 800b30a:	330b      	adds	r3, #11
 800b30c:	781a      	ldrb	r2, [r3, #0]
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	330b      	adds	r3, #11
 800b312:	404a      	eors	r2, r1
 800b314:	b2d2      	uxtb	r2, r2
 800b316:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	330c      	adds	r3, #12
 800b31c:	7819      	ldrb	r1, [r3, #0]
 800b31e:	683b      	ldr	r3, [r7, #0]
 800b320:	330c      	adds	r3, #12
 800b322:	781a      	ldrb	r2, [r3, #0]
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	330c      	adds	r3, #12
 800b328:	404a      	eors	r2, r1
 800b32a:	b2d2      	uxtb	r2, r2
 800b32c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	330d      	adds	r3, #13
 800b332:	7819      	ldrb	r1, [r3, #0]
 800b334:	683b      	ldr	r3, [r7, #0]
 800b336:	330d      	adds	r3, #13
 800b338:	781a      	ldrb	r2, [r3, #0]
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	330d      	adds	r3, #13
 800b33e:	404a      	eors	r2, r1
 800b340:	b2d2      	uxtb	r2, r2
 800b342:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	330e      	adds	r3, #14
 800b348:	7819      	ldrb	r1, [r3, #0]
 800b34a:	683b      	ldr	r3, [r7, #0]
 800b34c:	330e      	adds	r3, #14
 800b34e:	781a      	ldrb	r2, [r3, #0]
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	330e      	adds	r3, #14
 800b354:	404a      	eors	r2, r1
 800b356:	b2d2      	uxtb	r2, r2
 800b358:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	330f      	adds	r3, #15
 800b35e:	7819      	ldrb	r1, [r3, #0]
 800b360:	683b      	ldr	r3, [r7, #0]
 800b362:	330f      	adds	r3, #15
 800b364:	781a      	ldrb	r2, [r3, #0]
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	330f      	adds	r3, #15
 800b36a:	404a      	eors	r2, r1
 800b36c:	b2d2      	uxtb	r2, r2
 800b36e:	701a      	strb	r2, [r3, #0]
#endif
}
 800b370:	bf00      	nop
 800b372:	370c      	adds	r7, #12
 800b374:	46bd      	mov	sp, r7
 800b376:	bc80      	pop	{r7}
 800b378:	4770      	bx	lr

0800b37a <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800b37a:	b480      	push	{r7}
 800b37c:	b085      	sub	sp, #20
 800b37e:	af00      	add	r7, sp, #0
 800b380:	60f8      	str	r0, [r7, #12]
 800b382:	60b9      	str	r1, [r7, #8]
 800b384:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800b386:	68bb      	ldr	r3, [r7, #8]
 800b388:	781a      	ldrb	r2, [r3, #0]
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	781b      	ldrb	r3, [r3, #0]
 800b38e:	4053      	eors	r3, r2
 800b390:	b2da      	uxtb	r2, r3
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800b396:	68bb      	ldr	r3, [r7, #8]
 800b398:	3301      	adds	r3, #1
 800b39a:	7819      	ldrb	r1, [r3, #0]
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	3301      	adds	r3, #1
 800b3a0:	781a      	ldrb	r2, [r3, #0]
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	3301      	adds	r3, #1
 800b3a6:	404a      	eors	r2, r1
 800b3a8:	b2d2      	uxtb	r2, r2
 800b3aa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800b3ac:	68bb      	ldr	r3, [r7, #8]
 800b3ae:	3302      	adds	r3, #2
 800b3b0:	7819      	ldrb	r1, [r3, #0]
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	3302      	adds	r3, #2
 800b3b6:	781a      	ldrb	r2, [r3, #0]
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	3302      	adds	r3, #2
 800b3bc:	404a      	eors	r2, r1
 800b3be:	b2d2      	uxtb	r2, r2
 800b3c0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800b3c2:	68bb      	ldr	r3, [r7, #8]
 800b3c4:	3303      	adds	r3, #3
 800b3c6:	7819      	ldrb	r1, [r3, #0]
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	3303      	adds	r3, #3
 800b3cc:	781a      	ldrb	r2, [r3, #0]
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	3303      	adds	r3, #3
 800b3d2:	404a      	eors	r2, r1
 800b3d4:	b2d2      	uxtb	r2, r2
 800b3d6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800b3d8:	68bb      	ldr	r3, [r7, #8]
 800b3da:	3304      	adds	r3, #4
 800b3dc:	7819      	ldrb	r1, [r3, #0]
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	3304      	adds	r3, #4
 800b3e2:	781a      	ldrb	r2, [r3, #0]
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	3304      	adds	r3, #4
 800b3e8:	404a      	eors	r2, r1
 800b3ea:	b2d2      	uxtb	r2, r2
 800b3ec:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800b3ee:	68bb      	ldr	r3, [r7, #8]
 800b3f0:	3305      	adds	r3, #5
 800b3f2:	7819      	ldrb	r1, [r3, #0]
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	3305      	adds	r3, #5
 800b3f8:	781a      	ldrb	r2, [r3, #0]
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	3305      	adds	r3, #5
 800b3fe:	404a      	eors	r2, r1
 800b400:	b2d2      	uxtb	r2, r2
 800b402:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800b404:	68bb      	ldr	r3, [r7, #8]
 800b406:	3306      	adds	r3, #6
 800b408:	7819      	ldrb	r1, [r3, #0]
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	3306      	adds	r3, #6
 800b40e:	781a      	ldrb	r2, [r3, #0]
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	3306      	adds	r3, #6
 800b414:	404a      	eors	r2, r1
 800b416:	b2d2      	uxtb	r2, r2
 800b418:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800b41a:	68bb      	ldr	r3, [r7, #8]
 800b41c:	3307      	adds	r3, #7
 800b41e:	7819      	ldrb	r1, [r3, #0]
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	3307      	adds	r3, #7
 800b424:	781a      	ldrb	r2, [r3, #0]
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	3307      	adds	r3, #7
 800b42a:	404a      	eors	r2, r1
 800b42c:	b2d2      	uxtb	r2, r2
 800b42e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800b430:	68bb      	ldr	r3, [r7, #8]
 800b432:	3308      	adds	r3, #8
 800b434:	7819      	ldrb	r1, [r3, #0]
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	3308      	adds	r3, #8
 800b43a:	781a      	ldrb	r2, [r3, #0]
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	3308      	adds	r3, #8
 800b440:	404a      	eors	r2, r1
 800b442:	b2d2      	uxtb	r2, r2
 800b444:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800b446:	68bb      	ldr	r3, [r7, #8]
 800b448:	3309      	adds	r3, #9
 800b44a:	7819      	ldrb	r1, [r3, #0]
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	3309      	adds	r3, #9
 800b450:	781a      	ldrb	r2, [r3, #0]
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	3309      	adds	r3, #9
 800b456:	404a      	eors	r2, r1
 800b458:	b2d2      	uxtb	r2, r2
 800b45a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800b45c:	68bb      	ldr	r3, [r7, #8]
 800b45e:	330a      	adds	r3, #10
 800b460:	7819      	ldrb	r1, [r3, #0]
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	330a      	adds	r3, #10
 800b466:	781a      	ldrb	r2, [r3, #0]
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	330a      	adds	r3, #10
 800b46c:	404a      	eors	r2, r1
 800b46e:	b2d2      	uxtb	r2, r2
 800b470:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800b472:	68bb      	ldr	r3, [r7, #8]
 800b474:	330b      	adds	r3, #11
 800b476:	7819      	ldrb	r1, [r3, #0]
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	330b      	adds	r3, #11
 800b47c:	781a      	ldrb	r2, [r3, #0]
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	330b      	adds	r3, #11
 800b482:	404a      	eors	r2, r1
 800b484:	b2d2      	uxtb	r2, r2
 800b486:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800b488:	68bb      	ldr	r3, [r7, #8]
 800b48a:	330c      	adds	r3, #12
 800b48c:	7819      	ldrb	r1, [r3, #0]
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	330c      	adds	r3, #12
 800b492:	781a      	ldrb	r2, [r3, #0]
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	330c      	adds	r3, #12
 800b498:	404a      	eors	r2, r1
 800b49a:	b2d2      	uxtb	r2, r2
 800b49c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800b49e:	68bb      	ldr	r3, [r7, #8]
 800b4a0:	330d      	adds	r3, #13
 800b4a2:	7819      	ldrb	r1, [r3, #0]
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	330d      	adds	r3, #13
 800b4a8:	781a      	ldrb	r2, [r3, #0]
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	330d      	adds	r3, #13
 800b4ae:	404a      	eors	r2, r1
 800b4b0:	b2d2      	uxtb	r2, r2
 800b4b2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800b4b4:	68bb      	ldr	r3, [r7, #8]
 800b4b6:	330e      	adds	r3, #14
 800b4b8:	7819      	ldrb	r1, [r3, #0]
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	330e      	adds	r3, #14
 800b4be:	781a      	ldrb	r2, [r3, #0]
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	330e      	adds	r3, #14
 800b4c4:	404a      	eors	r2, r1
 800b4c6:	b2d2      	uxtb	r2, r2
 800b4c8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800b4ca:	68bb      	ldr	r3, [r7, #8]
 800b4cc:	330f      	adds	r3, #15
 800b4ce:	7819      	ldrb	r1, [r3, #0]
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	330f      	adds	r3, #15
 800b4d4:	781a      	ldrb	r2, [r3, #0]
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	330f      	adds	r3, #15
 800b4da:	404a      	eors	r2, r1
 800b4dc:	b2d2      	uxtb	r2, r2
 800b4de:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800b4e0:	bf00      	nop
 800b4e2:	3714      	adds	r7, #20
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	bc80      	pop	{r7}
 800b4e8:	4770      	bx	lr

0800b4ea <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800b4ea:	b580      	push	{r7, lr}
 800b4ec:	b082      	sub	sp, #8
 800b4ee:	af00      	add	r7, sp, #0
 800b4f0:	6078      	str	r0, [r7, #4]
 800b4f2:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800b4f4:	6839      	ldr	r1, [r7, #0]
 800b4f6:	6878      	ldr	r0, [r7, #4]
 800b4f8:	f7ff fe88 	bl	800b20c <xor_block>
}
 800b4fc:	bf00      	nop
 800b4fe:	3708      	adds	r7, #8
 800b500:	46bd      	mov	sp, r7
 800b502:	bd80      	pop	{r7, pc}

0800b504 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800b504:	b480      	push	{r7}
 800b506:	b085      	sub	sp, #20
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	781b      	ldrb	r3, [r3, #0]
 800b510:	461a      	mov	r2, r3
 800b512:	4b48      	ldr	r3, [pc, #288]	@ (800b634 <shift_sub_rows+0x130>)
 800b514:	5c9a      	ldrb	r2, [r3, r2]
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	701a      	strb	r2, [r3, #0]
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	3304      	adds	r3, #4
 800b51e:	781b      	ldrb	r3, [r3, #0]
 800b520:	4619      	mov	r1, r3
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	3304      	adds	r3, #4
 800b526:	4a43      	ldr	r2, [pc, #268]	@ (800b634 <shift_sub_rows+0x130>)
 800b528:	5c52      	ldrb	r2, [r2, r1]
 800b52a:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	3308      	adds	r3, #8
 800b530:	781b      	ldrb	r3, [r3, #0]
 800b532:	4619      	mov	r1, r3
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	3308      	adds	r3, #8
 800b538:	4a3e      	ldr	r2, [pc, #248]	@ (800b634 <shift_sub_rows+0x130>)
 800b53a:	5c52      	ldrb	r2, [r2, r1]
 800b53c:	701a      	strb	r2, [r3, #0]
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	330c      	adds	r3, #12
 800b542:	781b      	ldrb	r3, [r3, #0]
 800b544:	4619      	mov	r1, r3
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	330c      	adds	r3, #12
 800b54a:	4a3a      	ldr	r2, [pc, #232]	@ (800b634 <shift_sub_rows+0x130>)
 800b54c:	5c52      	ldrb	r2, [r2, r1]
 800b54e:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	785b      	ldrb	r3, [r3, #1]
 800b554:	73fb      	strb	r3, [r7, #15]
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	3305      	adds	r3, #5
 800b55a:	781b      	ldrb	r3, [r3, #0]
 800b55c:	4619      	mov	r1, r3
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	3301      	adds	r3, #1
 800b562:	4a34      	ldr	r2, [pc, #208]	@ (800b634 <shift_sub_rows+0x130>)
 800b564:	5c52      	ldrb	r2, [r2, r1]
 800b566:	701a      	strb	r2, [r3, #0]
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	3309      	adds	r3, #9
 800b56c:	781b      	ldrb	r3, [r3, #0]
 800b56e:	4619      	mov	r1, r3
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	3305      	adds	r3, #5
 800b574:	4a2f      	ldr	r2, [pc, #188]	@ (800b634 <shift_sub_rows+0x130>)
 800b576:	5c52      	ldrb	r2, [r2, r1]
 800b578:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	330d      	adds	r3, #13
 800b57e:	781b      	ldrb	r3, [r3, #0]
 800b580:	4619      	mov	r1, r3
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	3309      	adds	r3, #9
 800b586:	4a2b      	ldr	r2, [pc, #172]	@ (800b634 <shift_sub_rows+0x130>)
 800b588:	5c52      	ldrb	r2, [r2, r1]
 800b58a:	701a      	strb	r2, [r3, #0]
 800b58c:	7bfa      	ldrb	r2, [r7, #15]
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	330d      	adds	r3, #13
 800b592:	4928      	ldr	r1, [pc, #160]	@ (800b634 <shift_sub_rows+0x130>)
 800b594:	5c8a      	ldrb	r2, [r1, r2]
 800b596:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	789b      	ldrb	r3, [r3, #2]
 800b59c:	73fb      	strb	r3, [r7, #15]
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	330a      	adds	r3, #10
 800b5a2:	781b      	ldrb	r3, [r3, #0]
 800b5a4:	4619      	mov	r1, r3
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	3302      	adds	r3, #2
 800b5aa:	4a22      	ldr	r2, [pc, #136]	@ (800b634 <shift_sub_rows+0x130>)
 800b5ac:	5c52      	ldrb	r2, [r2, r1]
 800b5ae:	701a      	strb	r2, [r3, #0]
 800b5b0:	7bfa      	ldrb	r2, [r7, #15]
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	330a      	adds	r3, #10
 800b5b6:	491f      	ldr	r1, [pc, #124]	@ (800b634 <shift_sub_rows+0x130>)
 800b5b8:	5c8a      	ldrb	r2, [r1, r2]
 800b5ba:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	799b      	ldrb	r3, [r3, #6]
 800b5c0:	73fb      	strb	r3, [r7, #15]
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	330e      	adds	r3, #14
 800b5c6:	781b      	ldrb	r3, [r3, #0]
 800b5c8:	4619      	mov	r1, r3
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	3306      	adds	r3, #6
 800b5ce:	4a19      	ldr	r2, [pc, #100]	@ (800b634 <shift_sub_rows+0x130>)
 800b5d0:	5c52      	ldrb	r2, [r2, r1]
 800b5d2:	701a      	strb	r2, [r3, #0]
 800b5d4:	7bfa      	ldrb	r2, [r7, #15]
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	330e      	adds	r3, #14
 800b5da:	4916      	ldr	r1, [pc, #88]	@ (800b634 <shift_sub_rows+0x130>)
 800b5dc:	5c8a      	ldrb	r2, [r1, r2]
 800b5de:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	7bdb      	ldrb	r3, [r3, #15]
 800b5e4:	73fb      	strb	r3, [r7, #15]
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	330b      	adds	r3, #11
 800b5ea:	781b      	ldrb	r3, [r3, #0]
 800b5ec:	4619      	mov	r1, r3
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	330f      	adds	r3, #15
 800b5f2:	4a10      	ldr	r2, [pc, #64]	@ (800b634 <shift_sub_rows+0x130>)
 800b5f4:	5c52      	ldrb	r2, [r2, r1]
 800b5f6:	701a      	strb	r2, [r3, #0]
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	3307      	adds	r3, #7
 800b5fc:	781b      	ldrb	r3, [r3, #0]
 800b5fe:	4619      	mov	r1, r3
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	330b      	adds	r3, #11
 800b604:	4a0b      	ldr	r2, [pc, #44]	@ (800b634 <shift_sub_rows+0x130>)
 800b606:	5c52      	ldrb	r2, [r2, r1]
 800b608:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	3303      	adds	r3, #3
 800b60e:	781b      	ldrb	r3, [r3, #0]
 800b610:	4619      	mov	r1, r3
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	3307      	adds	r3, #7
 800b616:	4a07      	ldr	r2, [pc, #28]	@ (800b634 <shift_sub_rows+0x130>)
 800b618:	5c52      	ldrb	r2, [r2, r1]
 800b61a:	701a      	strb	r2, [r3, #0]
 800b61c:	7bfa      	ldrb	r2, [r7, #15]
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	3303      	adds	r3, #3
 800b622:	4904      	ldr	r1, [pc, #16]	@ (800b634 <shift_sub_rows+0x130>)
 800b624:	5c8a      	ldrb	r2, [r1, r2]
 800b626:	701a      	strb	r2, [r3, #0]
}
 800b628:	bf00      	nop
 800b62a:	3714      	adds	r7, #20
 800b62c:	46bd      	mov	sp, r7
 800b62e:	bc80      	pop	{r7}
 800b630:	4770      	bx	lr
 800b632:	bf00      	nop
 800b634:	0801f1ac 	.word	0x0801f1ac

0800b638 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800b638:	b580      	push	{r7, lr}
 800b63a:	b086      	sub	sp, #24
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800b640:	f107 0308 	add.w	r3, r7, #8
 800b644:	6879      	ldr	r1, [r7, #4]
 800b646:	4618      	mov	r0, r3
 800b648:	f7ff fd6c 	bl	800b124 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800b64c:	7a3b      	ldrb	r3, [r7, #8]
 800b64e:	461a      	mov	r2, r3
 800b650:	4b9a      	ldr	r3, [pc, #616]	@ (800b8bc <mix_sub_columns+0x284>)
 800b652:	5c9a      	ldrb	r2, [r3, r2]
 800b654:	7b7b      	ldrb	r3, [r7, #13]
 800b656:	4619      	mov	r1, r3
 800b658:	4b99      	ldr	r3, [pc, #612]	@ (800b8c0 <mix_sub_columns+0x288>)
 800b65a:	5c5b      	ldrb	r3, [r3, r1]
 800b65c:	4053      	eors	r3, r2
 800b65e:	b2da      	uxtb	r2, r3
 800b660:	7cbb      	ldrb	r3, [r7, #18]
 800b662:	4619      	mov	r1, r3
 800b664:	4b97      	ldr	r3, [pc, #604]	@ (800b8c4 <mix_sub_columns+0x28c>)
 800b666:	5c5b      	ldrb	r3, [r3, r1]
 800b668:	4053      	eors	r3, r2
 800b66a:	b2da      	uxtb	r2, r3
 800b66c:	7dfb      	ldrb	r3, [r7, #23]
 800b66e:	4619      	mov	r1, r3
 800b670:	4b94      	ldr	r3, [pc, #592]	@ (800b8c4 <mix_sub_columns+0x28c>)
 800b672:	5c5b      	ldrb	r3, [r3, r1]
 800b674:	4053      	eors	r3, r2
 800b676:	b2da      	uxtb	r2, r3
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800b67c:	7a3b      	ldrb	r3, [r7, #8]
 800b67e:	461a      	mov	r2, r3
 800b680:	4b90      	ldr	r3, [pc, #576]	@ (800b8c4 <mix_sub_columns+0x28c>)
 800b682:	5c9a      	ldrb	r2, [r3, r2]
 800b684:	7b7b      	ldrb	r3, [r7, #13]
 800b686:	4619      	mov	r1, r3
 800b688:	4b8c      	ldr	r3, [pc, #560]	@ (800b8bc <mix_sub_columns+0x284>)
 800b68a:	5c5b      	ldrb	r3, [r3, r1]
 800b68c:	4053      	eors	r3, r2
 800b68e:	b2da      	uxtb	r2, r3
 800b690:	7cbb      	ldrb	r3, [r7, #18]
 800b692:	4619      	mov	r1, r3
 800b694:	4b8a      	ldr	r3, [pc, #552]	@ (800b8c0 <mix_sub_columns+0x288>)
 800b696:	5c5b      	ldrb	r3, [r3, r1]
 800b698:	4053      	eors	r3, r2
 800b69a:	b2d9      	uxtb	r1, r3
 800b69c:	7dfb      	ldrb	r3, [r7, #23]
 800b69e:	461a      	mov	r2, r3
 800b6a0:	4b88      	ldr	r3, [pc, #544]	@ (800b8c4 <mix_sub_columns+0x28c>)
 800b6a2:	5c9a      	ldrb	r2, [r3, r2]
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	3301      	adds	r3, #1
 800b6a8:	404a      	eors	r2, r1
 800b6aa:	b2d2      	uxtb	r2, r2
 800b6ac:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800b6ae:	7a3b      	ldrb	r3, [r7, #8]
 800b6b0:	461a      	mov	r2, r3
 800b6b2:	4b84      	ldr	r3, [pc, #528]	@ (800b8c4 <mix_sub_columns+0x28c>)
 800b6b4:	5c9a      	ldrb	r2, [r3, r2]
 800b6b6:	7b7b      	ldrb	r3, [r7, #13]
 800b6b8:	4619      	mov	r1, r3
 800b6ba:	4b82      	ldr	r3, [pc, #520]	@ (800b8c4 <mix_sub_columns+0x28c>)
 800b6bc:	5c5b      	ldrb	r3, [r3, r1]
 800b6be:	4053      	eors	r3, r2
 800b6c0:	b2da      	uxtb	r2, r3
 800b6c2:	7cbb      	ldrb	r3, [r7, #18]
 800b6c4:	4619      	mov	r1, r3
 800b6c6:	4b7d      	ldr	r3, [pc, #500]	@ (800b8bc <mix_sub_columns+0x284>)
 800b6c8:	5c5b      	ldrb	r3, [r3, r1]
 800b6ca:	4053      	eors	r3, r2
 800b6cc:	b2d9      	uxtb	r1, r3
 800b6ce:	7dfb      	ldrb	r3, [r7, #23]
 800b6d0:	461a      	mov	r2, r3
 800b6d2:	4b7b      	ldr	r3, [pc, #492]	@ (800b8c0 <mix_sub_columns+0x288>)
 800b6d4:	5c9a      	ldrb	r2, [r3, r2]
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	3302      	adds	r3, #2
 800b6da:	404a      	eors	r2, r1
 800b6dc:	b2d2      	uxtb	r2, r2
 800b6de:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800b6e0:	7a3b      	ldrb	r3, [r7, #8]
 800b6e2:	461a      	mov	r2, r3
 800b6e4:	4b76      	ldr	r3, [pc, #472]	@ (800b8c0 <mix_sub_columns+0x288>)
 800b6e6:	5c9a      	ldrb	r2, [r3, r2]
 800b6e8:	7b7b      	ldrb	r3, [r7, #13]
 800b6ea:	4619      	mov	r1, r3
 800b6ec:	4b75      	ldr	r3, [pc, #468]	@ (800b8c4 <mix_sub_columns+0x28c>)
 800b6ee:	5c5b      	ldrb	r3, [r3, r1]
 800b6f0:	4053      	eors	r3, r2
 800b6f2:	b2da      	uxtb	r2, r3
 800b6f4:	7cbb      	ldrb	r3, [r7, #18]
 800b6f6:	4619      	mov	r1, r3
 800b6f8:	4b72      	ldr	r3, [pc, #456]	@ (800b8c4 <mix_sub_columns+0x28c>)
 800b6fa:	5c5b      	ldrb	r3, [r3, r1]
 800b6fc:	4053      	eors	r3, r2
 800b6fe:	b2d9      	uxtb	r1, r3
 800b700:	7dfb      	ldrb	r3, [r7, #23]
 800b702:	461a      	mov	r2, r3
 800b704:	4b6d      	ldr	r3, [pc, #436]	@ (800b8bc <mix_sub_columns+0x284>)
 800b706:	5c9a      	ldrb	r2, [r3, r2]
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	3303      	adds	r3, #3
 800b70c:	404a      	eors	r2, r1
 800b70e:	b2d2      	uxtb	r2, r2
 800b710:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800b712:	7b3b      	ldrb	r3, [r7, #12]
 800b714:	461a      	mov	r2, r3
 800b716:	4b69      	ldr	r3, [pc, #420]	@ (800b8bc <mix_sub_columns+0x284>)
 800b718:	5c9a      	ldrb	r2, [r3, r2]
 800b71a:	7c7b      	ldrb	r3, [r7, #17]
 800b71c:	4619      	mov	r1, r3
 800b71e:	4b68      	ldr	r3, [pc, #416]	@ (800b8c0 <mix_sub_columns+0x288>)
 800b720:	5c5b      	ldrb	r3, [r3, r1]
 800b722:	4053      	eors	r3, r2
 800b724:	b2da      	uxtb	r2, r3
 800b726:	7dbb      	ldrb	r3, [r7, #22]
 800b728:	4619      	mov	r1, r3
 800b72a:	4b66      	ldr	r3, [pc, #408]	@ (800b8c4 <mix_sub_columns+0x28c>)
 800b72c:	5c5b      	ldrb	r3, [r3, r1]
 800b72e:	4053      	eors	r3, r2
 800b730:	b2d9      	uxtb	r1, r3
 800b732:	7afb      	ldrb	r3, [r7, #11]
 800b734:	461a      	mov	r2, r3
 800b736:	4b63      	ldr	r3, [pc, #396]	@ (800b8c4 <mix_sub_columns+0x28c>)
 800b738:	5c9a      	ldrb	r2, [r3, r2]
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	3304      	adds	r3, #4
 800b73e:	404a      	eors	r2, r1
 800b740:	b2d2      	uxtb	r2, r2
 800b742:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800b744:	7b3b      	ldrb	r3, [r7, #12]
 800b746:	461a      	mov	r2, r3
 800b748:	4b5e      	ldr	r3, [pc, #376]	@ (800b8c4 <mix_sub_columns+0x28c>)
 800b74a:	5c9a      	ldrb	r2, [r3, r2]
 800b74c:	7c7b      	ldrb	r3, [r7, #17]
 800b74e:	4619      	mov	r1, r3
 800b750:	4b5a      	ldr	r3, [pc, #360]	@ (800b8bc <mix_sub_columns+0x284>)
 800b752:	5c5b      	ldrb	r3, [r3, r1]
 800b754:	4053      	eors	r3, r2
 800b756:	b2da      	uxtb	r2, r3
 800b758:	7dbb      	ldrb	r3, [r7, #22]
 800b75a:	4619      	mov	r1, r3
 800b75c:	4b58      	ldr	r3, [pc, #352]	@ (800b8c0 <mix_sub_columns+0x288>)
 800b75e:	5c5b      	ldrb	r3, [r3, r1]
 800b760:	4053      	eors	r3, r2
 800b762:	b2d9      	uxtb	r1, r3
 800b764:	7afb      	ldrb	r3, [r7, #11]
 800b766:	461a      	mov	r2, r3
 800b768:	4b56      	ldr	r3, [pc, #344]	@ (800b8c4 <mix_sub_columns+0x28c>)
 800b76a:	5c9a      	ldrb	r2, [r3, r2]
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	3305      	adds	r3, #5
 800b770:	404a      	eors	r2, r1
 800b772:	b2d2      	uxtb	r2, r2
 800b774:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800b776:	7b3b      	ldrb	r3, [r7, #12]
 800b778:	461a      	mov	r2, r3
 800b77a:	4b52      	ldr	r3, [pc, #328]	@ (800b8c4 <mix_sub_columns+0x28c>)
 800b77c:	5c9a      	ldrb	r2, [r3, r2]
 800b77e:	7c7b      	ldrb	r3, [r7, #17]
 800b780:	4619      	mov	r1, r3
 800b782:	4b50      	ldr	r3, [pc, #320]	@ (800b8c4 <mix_sub_columns+0x28c>)
 800b784:	5c5b      	ldrb	r3, [r3, r1]
 800b786:	4053      	eors	r3, r2
 800b788:	b2da      	uxtb	r2, r3
 800b78a:	7dbb      	ldrb	r3, [r7, #22]
 800b78c:	4619      	mov	r1, r3
 800b78e:	4b4b      	ldr	r3, [pc, #300]	@ (800b8bc <mix_sub_columns+0x284>)
 800b790:	5c5b      	ldrb	r3, [r3, r1]
 800b792:	4053      	eors	r3, r2
 800b794:	b2d9      	uxtb	r1, r3
 800b796:	7afb      	ldrb	r3, [r7, #11]
 800b798:	461a      	mov	r2, r3
 800b79a:	4b49      	ldr	r3, [pc, #292]	@ (800b8c0 <mix_sub_columns+0x288>)
 800b79c:	5c9a      	ldrb	r2, [r3, r2]
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	3306      	adds	r3, #6
 800b7a2:	404a      	eors	r2, r1
 800b7a4:	b2d2      	uxtb	r2, r2
 800b7a6:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800b7a8:	7b3b      	ldrb	r3, [r7, #12]
 800b7aa:	461a      	mov	r2, r3
 800b7ac:	4b44      	ldr	r3, [pc, #272]	@ (800b8c0 <mix_sub_columns+0x288>)
 800b7ae:	5c9a      	ldrb	r2, [r3, r2]
 800b7b0:	7c7b      	ldrb	r3, [r7, #17]
 800b7b2:	4619      	mov	r1, r3
 800b7b4:	4b43      	ldr	r3, [pc, #268]	@ (800b8c4 <mix_sub_columns+0x28c>)
 800b7b6:	5c5b      	ldrb	r3, [r3, r1]
 800b7b8:	4053      	eors	r3, r2
 800b7ba:	b2da      	uxtb	r2, r3
 800b7bc:	7dbb      	ldrb	r3, [r7, #22]
 800b7be:	4619      	mov	r1, r3
 800b7c0:	4b40      	ldr	r3, [pc, #256]	@ (800b8c4 <mix_sub_columns+0x28c>)
 800b7c2:	5c5b      	ldrb	r3, [r3, r1]
 800b7c4:	4053      	eors	r3, r2
 800b7c6:	b2d9      	uxtb	r1, r3
 800b7c8:	7afb      	ldrb	r3, [r7, #11]
 800b7ca:	461a      	mov	r2, r3
 800b7cc:	4b3b      	ldr	r3, [pc, #236]	@ (800b8bc <mix_sub_columns+0x284>)
 800b7ce:	5c9a      	ldrb	r2, [r3, r2]
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	3307      	adds	r3, #7
 800b7d4:	404a      	eors	r2, r1
 800b7d6:	b2d2      	uxtb	r2, r2
 800b7d8:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800b7da:	7c3b      	ldrb	r3, [r7, #16]
 800b7dc:	461a      	mov	r2, r3
 800b7de:	4b37      	ldr	r3, [pc, #220]	@ (800b8bc <mix_sub_columns+0x284>)
 800b7e0:	5c9a      	ldrb	r2, [r3, r2]
 800b7e2:	7d7b      	ldrb	r3, [r7, #21]
 800b7e4:	4619      	mov	r1, r3
 800b7e6:	4b36      	ldr	r3, [pc, #216]	@ (800b8c0 <mix_sub_columns+0x288>)
 800b7e8:	5c5b      	ldrb	r3, [r3, r1]
 800b7ea:	4053      	eors	r3, r2
 800b7ec:	b2da      	uxtb	r2, r3
 800b7ee:	7abb      	ldrb	r3, [r7, #10]
 800b7f0:	4619      	mov	r1, r3
 800b7f2:	4b34      	ldr	r3, [pc, #208]	@ (800b8c4 <mix_sub_columns+0x28c>)
 800b7f4:	5c5b      	ldrb	r3, [r3, r1]
 800b7f6:	4053      	eors	r3, r2
 800b7f8:	b2d9      	uxtb	r1, r3
 800b7fa:	7bfb      	ldrb	r3, [r7, #15]
 800b7fc:	461a      	mov	r2, r3
 800b7fe:	4b31      	ldr	r3, [pc, #196]	@ (800b8c4 <mix_sub_columns+0x28c>)
 800b800:	5c9a      	ldrb	r2, [r3, r2]
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	3308      	adds	r3, #8
 800b806:	404a      	eors	r2, r1
 800b808:	b2d2      	uxtb	r2, r2
 800b80a:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800b80c:	7c3b      	ldrb	r3, [r7, #16]
 800b80e:	461a      	mov	r2, r3
 800b810:	4b2c      	ldr	r3, [pc, #176]	@ (800b8c4 <mix_sub_columns+0x28c>)
 800b812:	5c9a      	ldrb	r2, [r3, r2]
 800b814:	7d7b      	ldrb	r3, [r7, #21]
 800b816:	4619      	mov	r1, r3
 800b818:	4b28      	ldr	r3, [pc, #160]	@ (800b8bc <mix_sub_columns+0x284>)
 800b81a:	5c5b      	ldrb	r3, [r3, r1]
 800b81c:	4053      	eors	r3, r2
 800b81e:	b2da      	uxtb	r2, r3
 800b820:	7abb      	ldrb	r3, [r7, #10]
 800b822:	4619      	mov	r1, r3
 800b824:	4b26      	ldr	r3, [pc, #152]	@ (800b8c0 <mix_sub_columns+0x288>)
 800b826:	5c5b      	ldrb	r3, [r3, r1]
 800b828:	4053      	eors	r3, r2
 800b82a:	b2d9      	uxtb	r1, r3
 800b82c:	7bfb      	ldrb	r3, [r7, #15]
 800b82e:	461a      	mov	r2, r3
 800b830:	4b24      	ldr	r3, [pc, #144]	@ (800b8c4 <mix_sub_columns+0x28c>)
 800b832:	5c9a      	ldrb	r2, [r3, r2]
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	3309      	adds	r3, #9
 800b838:	404a      	eors	r2, r1
 800b83a:	b2d2      	uxtb	r2, r2
 800b83c:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800b83e:	7c3b      	ldrb	r3, [r7, #16]
 800b840:	461a      	mov	r2, r3
 800b842:	4b20      	ldr	r3, [pc, #128]	@ (800b8c4 <mix_sub_columns+0x28c>)
 800b844:	5c9a      	ldrb	r2, [r3, r2]
 800b846:	7d7b      	ldrb	r3, [r7, #21]
 800b848:	4619      	mov	r1, r3
 800b84a:	4b1e      	ldr	r3, [pc, #120]	@ (800b8c4 <mix_sub_columns+0x28c>)
 800b84c:	5c5b      	ldrb	r3, [r3, r1]
 800b84e:	4053      	eors	r3, r2
 800b850:	b2da      	uxtb	r2, r3
 800b852:	7abb      	ldrb	r3, [r7, #10]
 800b854:	4619      	mov	r1, r3
 800b856:	4b19      	ldr	r3, [pc, #100]	@ (800b8bc <mix_sub_columns+0x284>)
 800b858:	5c5b      	ldrb	r3, [r3, r1]
 800b85a:	4053      	eors	r3, r2
 800b85c:	b2d9      	uxtb	r1, r3
 800b85e:	7bfb      	ldrb	r3, [r7, #15]
 800b860:	461a      	mov	r2, r3
 800b862:	4b17      	ldr	r3, [pc, #92]	@ (800b8c0 <mix_sub_columns+0x288>)
 800b864:	5c9a      	ldrb	r2, [r3, r2]
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	330a      	adds	r3, #10
 800b86a:	404a      	eors	r2, r1
 800b86c:	b2d2      	uxtb	r2, r2
 800b86e:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800b870:	7c3b      	ldrb	r3, [r7, #16]
 800b872:	461a      	mov	r2, r3
 800b874:	4b12      	ldr	r3, [pc, #72]	@ (800b8c0 <mix_sub_columns+0x288>)
 800b876:	5c9a      	ldrb	r2, [r3, r2]
 800b878:	7d7b      	ldrb	r3, [r7, #21]
 800b87a:	4619      	mov	r1, r3
 800b87c:	4b11      	ldr	r3, [pc, #68]	@ (800b8c4 <mix_sub_columns+0x28c>)
 800b87e:	5c5b      	ldrb	r3, [r3, r1]
 800b880:	4053      	eors	r3, r2
 800b882:	b2da      	uxtb	r2, r3
 800b884:	7abb      	ldrb	r3, [r7, #10]
 800b886:	4619      	mov	r1, r3
 800b888:	4b0e      	ldr	r3, [pc, #56]	@ (800b8c4 <mix_sub_columns+0x28c>)
 800b88a:	5c5b      	ldrb	r3, [r3, r1]
 800b88c:	4053      	eors	r3, r2
 800b88e:	b2d9      	uxtb	r1, r3
 800b890:	7bfb      	ldrb	r3, [r7, #15]
 800b892:	461a      	mov	r2, r3
 800b894:	4b09      	ldr	r3, [pc, #36]	@ (800b8bc <mix_sub_columns+0x284>)
 800b896:	5c9a      	ldrb	r2, [r3, r2]
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	330b      	adds	r3, #11
 800b89c:	404a      	eors	r2, r1
 800b89e:	b2d2      	uxtb	r2, r2
 800b8a0:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800b8a2:	7d3b      	ldrb	r3, [r7, #20]
 800b8a4:	461a      	mov	r2, r3
 800b8a6:	4b05      	ldr	r3, [pc, #20]	@ (800b8bc <mix_sub_columns+0x284>)
 800b8a8:	5c9a      	ldrb	r2, [r3, r2]
 800b8aa:	7a7b      	ldrb	r3, [r7, #9]
 800b8ac:	4619      	mov	r1, r3
 800b8ae:	4b04      	ldr	r3, [pc, #16]	@ (800b8c0 <mix_sub_columns+0x288>)
 800b8b0:	5c5b      	ldrb	r3, [r3, r1]
 800b8b2:	4053      	eors	r3, r2
 800b8b4:	b2da      	uxtb	r2, r3
 800b8b6:	7bbb      	ldrb	r3, [r7, #14]
 800b8b8:	4619      	mov	r1, r3
 800b8ba:	e005      	b.n	800b8c8 <mix_sub_columns+0x290>
 800b8bc:	0801f2ac 	.word	0x0801f2ac
 800b8c0:	0801f3ac 	.word	0x0801f3ac
 800b8c4:	0801f1ac 	.word	0x0801f1ac
 800b8c8:	4b2d      	ldr	r3, [pc, #180]	@ (800b980 <mix_sub_columns+0x348>)
 800b8ca:	5c5b      	ldrb	r3, [r3, r1]
 800b8cc:	4053      	eors	r3, r2
 800b8ce:	b2d9      	uxtb	r1, r3
 800b8d0:	7cfb      	ldrb	r3, [r7, #19]
 800b8d2:	461a      	mov	r2, r3
 800b8d4:	4b2a      	ldr	r3, [pc, #168]	@ (800b980 <mix_sub_columns+0x348>)
 800b8d6:	5c9a      	ldrb	r2, [r3, r2]
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	330c      	adds	r3, #12
 800b8dc:	404a      	eors	r2, r1
 800b8de:	b2d2      	uxtb	r2, r2
 800b8e0:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800b8e2:	7d3b      	ldrb	r3, [r7, #20]
 800b8e4:	461a      	mov	r2, r3
 800b8e6:	4b26      	ldr	r3, [pc, #152]	@ (800b980 <mix_sub_columns+0x348>)
 800b8e8:	5c9a      	ldrb	r2, [r3, r2]
 800b8ea:	7a7b      	ldrb	r3, [r7, #9]
 800b8ec:	4619      	mov	r1, r3
 800b8ee:	4b25      	ldr	r3, [pc, #148]	@ (800b984 <mix_sub_columns+0x34c>)
 800b8f0:	5c5b      	ldrb	r3, [r3, r1]
 800b8f2:	4053      	eors	r3, r2
 800b8f4:	b2da      	uxtb	r2, r3
 800b8f6:	7bbb      	ldrb	r3, [r7, #14]
 800b8f8:	4619      	mov	r1, r3
 800b8fa:	4b23      	ldr	r3, [pc, #140]	@ (800b988 <mix_sub_columns+0x350>)
 800b8fc:	5c5b      	ldrb	r3, [r3, r1]
 800b8fe:	4053      	eors	r3, r2
 800b900:	b2d9      	uxtb	r1, r3
 800b902:	7cfb      	ldrb	r3, [r7, #19]
 800b904:	461a      	mov	r2, r3
 800b906:	4b1e      	ldr	r3, [pc, #120]	@ (800b980 <mix_sub_columns+0x348>)
 800b908:	5c9a      	ldrb	r2, [r3, r2]
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	330d      	adds	r3, #13
 800b90e:	404a      	eors	r2, r1
 800b910:	b2d2      	uxtb	r2, r2
 800b912:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800b914:	7d3b      	ldrb	r3, [r7, #20]
 800b916:	461a      	mov	r2, r3
 800b918:	4b19      	ldr	r3, [pc, #100]	@ (800b980 <mix_sub_columns+0x348>)
 800b91a:	5c9a      	ldrb	r2, [r3, r2]
 800b91c:	7a7b      	ldrb	r3, [r7, #9]
 800b91e:	4619      	mov	r1, r3
 800b920:	4b17      	ldr	r3, [pc, #92]	@ (800b980 <mix_sub_columns+0x348>)
 800b922:	5c5b      	ldrb	r3, [r3, r1]
 800b924:	4053      	eors	r3, r2
 800b926:	b2da      	uxtb	r2, r3
 800b928:	7bbb      	ldrb	r3, [r7, #14]
 800b92a:	4619      	mov	r1, r3
 800b92c:	4b15      	ldr	r3, [pc, #84]	@ (800b984 <mix_sub_columns+0x34c>)
 800b92e:	5c5b      	ldrb	r3, [r3, r1]
 800b930:	4053      	eors	r3, r2
 800b932:	b2d9      	uxtb	r1, r3
 800b934:	7cfb      	ldrb	r3, [r7, #19]
 800b936:	461a      	mov	r2, r3
 800b938:	4b13      	ldr	r3, [pc, #76]	@ (800b988 <mix_sub_columns+0x350>)
 800b93a:	5c9a      	ldrb	r2, [r3, r2]
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	330e      	adds	r3, #14
 800b940:	404a      	eors	r2, r1
 800b942:	b2d2      	uxtb	r2, r2
 800b944:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800b946:	7d3b      	ldrb	r3, [r7, #20]
 800b948:	461a      	mov	r2, r3
 800b94a:	4b0f      	ldr	r3, [pc, #60]	@ (800b988 <mix_sub_columns+0x350>)
 800b94c:	5c9a      	ldrb	r2, [r3, r2]
 800b94e:	7a7b      	ldrb	r3, [r7, #9]
 800b950:	4619      	mov	r1, r3
 800b952:	4b0b      	ldr	r3, [pc, #44]	@ (800b980 <mix_sub_columns+0x348>)
 800b954:	5c5b      	ldrb	r3, [r3, r1]
 800b956:	4053      	eors	r3, r2
 800b958:	b2da      	uxtb	r2, r3
 800b95a:	7bbb      	ldrb	r3, [r7, #14]
 800b95c:	4619      	mov	r1, r3
 800b95e:	4b08      	ldr	r3, [pc, #32]	@ (800b980 <mix_sub_columns+0x348>)
 800b960:	5c5b      	ldrb	r3, [r3, r1]
 800b962:	4053      	eors	r3, r2
 800b964:	b2d9      	uxtb	r1, r3
 800b966:	7cfb      	ldrb	r3, [r7, #19]
 800b968:	461a      	mov	r2, r3
 800b96a:	4b06      	ldr	r3, [pc, #24]	@ (800b984 <mix_sub_columns+0x34c>)
 800b96c:	5c9a      	ldrb	r2, [r3, r2]
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	330f      	adds	r3, #15
 800b972:	404a      	eors	r2, r1
 800b974:	b2d2      	uxtb	r2, r2
 800b976:	701a      	strb	r2, [r3, #0]
  }
 800b978:	bf00      	nop
 800b97a:	3718      	adds	r7, #24
 800b97c:	46bd      	mov	sp, r7
 800b97e:	bd80      	pop	{r7, pc}
 800b980:	0801f1ac 	.word	0x0801f1ac
 800b984:	0801f2ac 	.word	0x0801f2ac
 800b988:	0801f3ac 	.word	0x0801f3ac

0800b98c <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b086      	sub	sp, #24
 800b990:	af00      	add	r7, sp, #0
 800b992:	60f8      	str	r0, [r7, #12]
 800b994:	460b      	mov	r3, r1
 800b996:	607a      	str	r2, [r7, #4]
 800b998:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800b99a:	7afb      	ldrb	r3, [r7, #11]
 800b99c:	3b10      	subs	r3, #16
 800b99e:	2b10      	cmp	r3, #16
 800b9a0:	bf8c      	ite	hi
 800b9a2:	2201      	movhi	r2, #1
 800b9a4:	2200      	movls	r2, #0
 800b9a6:	b2d2      	uxtb	r2, r2
 800b9a8:	2a00      	cmp	r2, #0
 800b9aa:	d10b      	bne.n	800b9c4 <lorawan_aes_set_key+0x38>
 800b9ac:	4a64      	ldr	r2, [pc, #400]	@ (800bb40 <lorawan_aes_set_key+0x1b4>)
 800b9ae:	fa22 f303 	lsr.w	r3, r2, r3
 800b9b2:	f003 0301 	and.w	r3, r3, #1
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	bf14      	ite	ne
 800b9ba:	2301      	movne	r3, #1
 800b9bc:	2300      	moveq	r3, #0
 800b9be:	b2db      	uxtb	r3, r3
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d105      	bne.n	800b9d0 <lorawan_aes_set_key+0x44>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
        return ( uint8_t )-1;
 800b9cc:	23ff      	movs	r3, #255	@ 0xff
 800b9ce:	e0b3      	b.n	800bb38 <lorawan_aes_set_key+0x1ac>
        break;
 800b9d0:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	7afa      	ldrb	r2, [r7, #11]
 800b9d6:	68f9      	ldr	r1, [r7, #12]
 800b9d8:	4618      	mov	r0, r3
 800b9da:	f7ff fbfc 	bl	800b1d6 <copy_block_nn>
    hi = (keylen + 28) << 2;
 800b9de:	7afb      	ldrb	r3, [r7, #11]
 800b9e0:	331c      	adds	r3, #28
 800b9e2:	b2db      	uxtb	r3, r3
 800b9e4:	009b      	lsls	r3, r3, #2
 800b9e6:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800b9e8:	7c7b      	ldrb	r3, [r7, #17]
 800b9ea:	091b      	lsrs	r3, r3, #4
 800b9ec:	b2db      	uxtb	r3, r3
 800b9ee:	3b01      	subs	r3, #1
 800b9f0:	b2da      	uxtb	r2, r3
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800b9f8:	7afb      	ldrb	r3, [r7, #11]
 800b9fa:	75fb      	strb	r3, [r7, #23]
 800b9fc:	2301      	movs	r3, #1
 800b9fe:	75bb      	strb	r3, [r7, #22]
 800ba00:	e094      	b.n	800bb2c <lorawan_aes_set_key+0x1a0>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800ba02:	7dfb      	ldrb	r3, [r7, #23]
 800ba04:	3b04      	subs	r3, #4
 800ba06:	687a      	ldr	r2, [r7, #4]
 800ba08:	5cd3      	ldrb	r3, [r2, r3]
 800ba0a:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800ba0c:	7dfb      	ldrb	r3, [r7, #23]
 800ba0e:	3b03      	subs	r3, #3
 800ba10:	687a      	ldr	r2, [r7, #4]
 800ba12:	5cd3      	ldrb	r3, [r2, r3]
 800ba14:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800ba16:	7dfb      	ldrb	r3, [r7, #23]
 800ba18:	3b02      	subs	r3, #2
 800ba1a:	687a      	ldr	r2, [r7, #4]
 800ba1c:	5cd3      	ldrb	r3, [r2, r3]
 800ba1e:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800ba20:	7dfb      	ldrb	r3, [r7, #23]
 800ba22:	3b01      	subs	r3, #1
 800ba24:	687a      	ldr	r2, [r7, #4]
 800ba26:	5cd3      	ldrb	r3, [r2, r3]
 800ba28:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800ba2a:	7dfb      	ldrb	r3, [r7, #23]
 800ba2c:	7afa      	ldrb	r2, [r7, #11]
 800ba2e:	fbb3 f1f2 	udiv	r1, r3, r2
 800ba32:	fb01 f202 	mul.w	r2, r1, r2
 800ba36:	1a9b      	subs	r3, r3, r2
 800ba38:	b2db      	uxtb	r3, r3
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d128      	bne.n	800ba90 <lorawan_aes_set_key+0x104>
        {
            tt = t0;
 800ba3e:	7d7b      	ldrb	r3, [r7, #21]
 800ba40:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800ba42:	7d3b      	ldrb	r3, [r7, #20]
 800ba44:	4a3f      	ldr	r2, [pc, #252]	@ (800bb44 <lorawan_aes_set_key+0x1b8>)
 800ba46:	5cd2      	ldrb	r2, [r2, r3]
 800ba48:	7dbb      	ldrb	r3, [r7, #22]
 800ba4a:	4053      	eors	r3, r2
 800ba4c:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800ba4e:	7cfb      	ldrb	r3, [r7, #19]
 800ba50:	4a3c      	ldr	r2, [pc, #240]	@ (800bb44 <lorawan_aes_set_key+0x1b8>)
 800ba52:	5cd3      	ldrb	r3, [r2, r3]
 800ba54:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800ba56:	7cbb      	ldrb	r3, [r7, #18]
 800ba58:	4a3a      	ldr	r2, [pc, #232]	@ (800bb44 <lorawan_aes_set_key+0x1b8>)
 800ba5a:	5cd3      	ldrb	r3, [r2, r3]
 800ba5c:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800ba5e:	7c3b      	ldrb	r3, [r7, #16]
 800ba60:	4a38      	ldr	r2, [pc, #224]	@ (800bb44 <lorawan_aes_set_key+0x1b8>)
 800ba62:	5cd3      	ldrb	r3, [r2, r3]
 800ba64:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800ba66:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800ba6a:	005b      	lsls	r3, r3, #1
 800ba6c:	b25a      	sxtb	r2, r3
 800ba6e:	7dbb      	ldrb	r3, [r7, #22]
 800ba70:	09db      	lsrs	r3, r3, #7
 800ba72:	b2db      	uxtb	r3, r3
 800ba74:	b25b      	sxtb	r3, r3
 800ba76:	4619      	mov	r1, r3
 800ba78:	0049      	lsls	r1, r1, #1
 800ba7a:	440b      	add	r3, r1
 800ba7c:	4619      	mov	r1, r3
 800ba7e:	00c8      	lsls	r0, r1, #3
 800ba80:	4619      	mov	r1, r3
 800ba82:	4603      	mov	r3, r0
 800ba84:	440b      	add	r3, r1
 800ba86:	b25b      	sxtb	r3, r3
 800ba88:	4053      	eors	r3, r2
 800ba8a:	b25b      	sxtb	r3, r3
 800ba8c:	75bb      	strb	r3, [r7, #22]
 800ba8e:	e01c      	b.n	800baca <lorawan_aes_set_key+0x13e>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800ba90:	7afb      	ldrb	r3, [r7, #11]
 800ba92:	2b18      	cmp	r3, #24
 800ba94:	d919      	bls.n	800baca <lorawan_aes_set_key+0x13e>
 800ba96:	7dfb      	ldrb	r3, [r7, #23]
 800ba98:	7afa      	ldrb	r2, [r7, #11]
 800ba9a:	fbb3 f1f2 	udiv	r1, r3, r2
 800ba9e:	fb01 f202 	mul.w	r2, r1, r2
 800baa2:	1a9b      	subs	r3, r3, r2
 800baa4:	b2db      	uxtb	r3, r3
 800baa6:	2b10      	cmp	r3, #16
 800baa8:	d10f      	bne.n	800baca <lorawan_aes_set_key+0x13e>
        {
            t0 = s_box(t0);
 800baaa:	7d7b      	ldrb	r3, [r7, #21]
 800baac:	4a25      	ldr	r2, [pc, #148]	@ (800bb44 <lorawan_aes_set_key+0x1b8>)
 800baae:	5cd3      	ldrb	r3, [r2, r3]
 800bab0:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800bab2:	7d3b      	ldrb	r3, [r7, #20]
 800bab4:	4a23      	ldr	r2, [pc, #140]	@ (800bb44 <lorawan_aes_set_key+0x1b8>)
 800bab6:	5cd3      	ldrb	r3, [r2, r3]
 800bab8:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800baba:	7cfb      	ldrb	r3, [r7, #19]
 800babc:	4a21      	ldr	r2, [pc, #132]	@ (800bb44 <lorawan_aes_set_key+0x1b8>)
 800babe:	5cd3      	ldrb	r3, [r2, r3]
 800bac0:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800bac2:	7cbb      	ldrb	r3, [r7, #18]
 800bac4:	4a1f      	ldr	r2, [pc, #124]	@ (800bb44 <lorawan_aes_set_key+0x1b8>)
 800bac6:	5cd3      	ldrb	r3, [r2, r3]
 800bac8:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800baca:	7dfa      	ldrb	r2, [r7, #23]
 800bacc:	7afb      	ldrb	r3, [r7, #11]
 800bace:	1ad3      	subs	r3, r2, r3
 800bad0:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800bad2:	7c3b      	ldrb	r3, [r7, #16]
 800bad4:	687a      	ldr	r2, [r7, #4]
 800bad6:	5cd1      	ldrb	r1, [r2, r3]
 800bad8:	7dfb      	ldrb	r3, [r7, #23]
 800bada:	7d7a      	ldrb	r2, [r7, #21]
 800badc:	404a      	eors	r2, r1
 800bade:	b2d1      	uxtb	r1, r2
 800bae0:	687a      	ldr	r2, [r7, #4]
 800bae2:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800bae4:	7c3b      	ldrb	r3, [r7, #16]
 800bae6:	3301      	adds	r3, #1
 800bae8:	687a      	ldr	r2, [r7, #4]
 800baea:	5cd1      	ldrb	r1, [r2, r3]
 800baec:	7dfb      	ldrb	r3, [r7, #23]
 800baee:	3301      	adds	r3, #1
 800baf0:	7d3a      	ldrb	r2, [r7, #20]
 800baf2:	404a      	eors	r2, r1
 800baf4:	b2d1      	uxtb	r1, r2
 800baf6:	687a      	ldr	r2, [r7, #4]
 800baf8:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800bafa:	7c3b      	ldrb	r3, [r7, #16]
 800bafc:	3302      	adds	r3, #2
 800bafe:	687a      	ldr	r2, [r7, #4]
 800bb00:	5cd1      	ldrb	r1, [r2, r3]
 800bb02:	7dfb      	ldrb	r3, [r7, #23]
 800bb04:	3302      	adds	r3, #2
 800bb06:	7cfa      	ldrb	r2, [r7, #19]
 800bb08:	404a      	eors	r2, r1
 800bb0a:	b2d1      	uxtb	r1, r2
 800bb0c:	687a      	ldr	r2, [r7, #4]
 800bb0e:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800bb10:	7c3b      	ldrb	r3, [r7, #16]
 800bb12:	3303      	adds	r3, #3
 800bb14:	687a      	ldr	r2, [r7, #4]
 800bb16:	5cd1      	ldrb	r1, [r2, r3]
 800bb18:	7dfb      	ldrb	r3, [r7, #23]
 800bb1a:	3303      	adds	r3, #3
 800bb1c:	7cba      	ldrb	r2, [r7, #18]
 800bb1e:	404a      	eors	r2, r1
 800bb20:	b2d1      	uxtb	r1, r2
 800bb22:	687a      	ldr	r2, [r7, #4]
 800bb24:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800bb26:	7dfb      	ldrb	r3, [r7, #23]
 800bb28:	3304      	adds	r3, #4
 800bb2a:	75fb      	strb	r3, [r7, #23]
 800bb2c:	7dfa      	ldrb	r2, [r7, #23]
 800bb2e:	7c7b      	ldrb	r3, [r7, #17]
 800bb30:	429a      	cmp	r2, r3
 800bb32:	f4ff af66 	bcc.w	800ba02 <lorawan_aes_set_key+0x76>
    }
    return 0;
 800bb36:	2300      	movs	r3, #0
}
 800bb38:	4618      	mov	r0, r3
 800bb3a:	3718      	adds	r7, #24
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	bd80      	pop	{r7, pc}
 800bb40:	00010101 	.word	0x00010101
 800bb44:	0801f1ac 	.word	0x0801f1ac

0800bb48 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	b08a      	sub	sp, #40	@ 0x28
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	60f8      	str	r0, [r7, #12]
 800bb50:	60b9      	str	r1, [r7, #8]
 800bb52:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d038      	beq.n	800bbd0 <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800bb5e:	687a      	ldr	r2, [r7, #4]
 800bb60:	f107 0314 	add.w	r3, r7, #20
 800bb64:	68f9      	ldr	r1, [r7, #12]
 800bb66:	4618      	mov	r0, r3
 800bb68:	f7ff fc07 	bl	800b37a <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800bb6c:	2301      	movs	r3, #1
 800bb6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800bb72:	e014      	b.n	800bb9e <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800bb74:	f107 0314 	add.w	r3, r7, #20
 800bb78:	4618      	mov	r0, r3
 800bb7a:	f7ff fd5d 	bl	800b638 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800bb84:	0112      	lsls	r2, r2, #4
 800bb86:	441a      	add	r2, r3
 800bb88:	f107 0314 	add.w	r3, r7, #20
 800bb8c:	4611      	mov	r1, r2
 800bb8e:	4618      	mov	r0, r3
 800bb90:	f7ff fcab 	bl	800b4ea <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800bb94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bb98:	3301      	adds	r3, #1
 800bb9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800bba4:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800bba8:	429a      	cmp	r2, r3
 800bbaa:	d3e3      	bcc.n	800bb74 <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800bbac:	f107 0314 	add.w	r3, r7, #20
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	f7ff fca7 	bl	800b504 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800bbbc:	0112      	lsls	r2, r2, #4
 800bbbe:	441a      	add	r2, r3
 800bbc0:	f107 0314 	add.w	r3, r7, #20
 800bbc4:	4619      	mov	r1, r3
 800bbc6:	68b8      	ldr	r0, [r7, #8]
 800bbc8:	f7ff fbd7 	bl	800b37a <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800bbcc:	2300      	movs	r3, #0
 800bbce:	e000      	b.n	800bbd2 <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800bbd0:	23ff      	movs	r3, #255	@ 0xff
}
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	3728      	adds	r7, #40	@ 0x28
 800bbd6:	46bd      	mov	sp, r7
 800bbd8:	bd80      	pop	{r7, pc}
	...

0800bbdc <PrintKey>:
static SecureElementStatus_t ComputeCmac(uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID,
                                         uint32_t *cmac);

/* Private functions ---------------------------------------------------------*/
static void PrintKey( KeyIdentifier_t key )
{
 800bbdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bbde:	b09d      	sub	sp, #116	@ 0x74
 800bbe0:	af10      	add	r7, sp, #64	@ 0x40
 800bbe2:	4603      	mov	r3, r0
 800bbe4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800bbe8:	2306      	movs	r3, #6
 800bbea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    Key_t *keyItem;
    retval = SecureElementGetKeyByID(key, &keyItem);
 800bbee:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800bbf2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bbf6:	4611      	mov	r1, r2
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	f000 f9a7 	bl	800bf4c <SecureElementGetKeyByID>
 800bbfe:	4603      	mov	r3, r0
 800bc00:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
#else
    uint8_t extractable_key[16] = {0};
    retval = SecureElementGetKeyByID(key, (uint8_t*)extractable_key);
#endif /* LORAWAN_KMS */
    if (retval == SECURE_ELEMENT_SUCCESS)
 800bc04:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	f040 80b0 	bne.w	800bd6e <PrintKey+0x192>
    {
        if (key == APP_KEY)
 800bc0e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d106      	bne.n	800bc24 <PrintKey+0x48>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppKey:      ");
 800bc16:	4b58      	ldr	r3, [pc, #352]	@ (800bd78 <PrintKey+0x19c>)
 800bc18:	2200      	movs	r2, #0
 800bc1a:	2100      	movs	r1, #0
 800bc1c:	2002      	movs	r0, #2
 800bc1e:	f00f fd91 	bl	801b744 <UTIL_ADV_TRACE_COND_FSend>
 800bc22:	e056      	b.n	800bcd2 <PrintKey+0xf6>
        }
        else if (key == NWK_KEY)
 800bc24:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bc28:	2b01      	cmp	r3, #1
 800bc2a:	d106      	bne.n	800bc3a <PrintKey+0x5e>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkKey:      ");
 800bc2c:	4b53      	ldr	r3, [pc, #332]	@ (800bd7c <PrintKey+0x1a0>)
 800bc2e:	2200      	movs	r2, #0
 800bc30:	2100      	movs	r1, #0
 800bc32:	2002      	movs	r0, #2
 800bc34:	f00f fd86 	bl	801b744 <UTIL_ADV_TRACE_COND_FSend>
 800bc38:	e04b      	b.n	800bcd2 <PrintKey+0xf6>
        }
        else if (key == APP_S_KEY)
 800bc3a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bc3e:	2b03      	cmp	r3, #3
 800bc40:	d106      	bne.n	800bc50 <PrintKey+0x74>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppSKey:     ");
 800bc42:	4b4f      	ldr	r3, [pc, #316]	@ (800bd80 <PrintKey+0x1a4>)
 800bc44:	2200      	movs	r2, #0
 800bc46:	2100      	movs	r1, #0
 800bc48:	2002      	movs	r0, #2
 800bc4a:	f00f fd7b 	bl	801b744 <UTIL_ADV_TRACE_COND_FSend>
 800bc4e:	e040      	b.n	800bcd2 <PrintKey+0xf6>
        }
        else if (key == NWK_S_KEY)
 800bc50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bc54:	2b02      	cmp	r3, #2
 800bc56:	d106      	bne.n	800bc66 <PrintKey+0x8a>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey:     ");
 800bc58:	4b4a      	ldr	r3, [pc, #296]	@ (800bd84 <PrintKey+0x1a8>)
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	2100      	movs	r1, #0
 800bc5e:	2002      	movs	r0, #2
 800bc60:	f00f fd70 	bl	801b744 <UTIL_ADV_TRACE_COND_FSend>
 800bc64:	e035      	b.n	800bcd2 <PrintKey+0xf6>
        }
        else if (key == MC_ROOT_KEY)
 800bc66:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bc6a:	2b04      	cmp	r3, #4
 800bc6c:	d106      	bne.n	800bc7c <PrintKey+0xa0>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCRootKey:   ");
 800bc6e:	4b46      	ldr	r3, [pc, #280]	@ (800bd88 <PrintKey+0x1ac>)
 800bc70:	2200      	movs	r2, #0
 800bc72:	2100      	movs	r1, #0
 800bc74:	2002      	movs	r0, #2
 800bc76:	f00f fd65 	bl	801b744 <UTIL_ADV_TRACE_COND_FSend>
 800bc7a:	e02a      	b.n	800bcd2 <PrintKey+0xf6>
        }
        else if (key == MC_KE_KEY)
 800bc7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bc80:	2b7f      	cmp	r3, #127	@ 0x7f
 800bc82:	d106      	bne.n	800bc92 <PrintKey+0xb6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKEKey:     ");
 800bc84:	4b41      	ldr	r3, [pc, #260]	@ (800bd8c <PrintKey+0x1b0>)
 800bc86:	2200      	movs	r2, #0
 800bc88:	2100      	movs	r1, #0
 800bc8a:	2002      	movs	r0, #2
 800bc8c:	f00f fd5a 	bl	801b744 <UTIL_ADV_TRACE_COND_FSend>
 800bc90:	e01f      	b.n	800bcd2 <PrintKey+0xf6>
        }
        else if (key == MC_KEY_0)
 800bc92:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bc96:	2b80      	cmp	r3, #128	@ 0x80
 800bc98:	d106      	bne.n	800bca8 <PrintKey+0xcc>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKey_0:     ");
 800bc9a:	4b3d      	ldr	r3, [pc, #244]	@ (800bd90 <PrintKey+0x1b4>)
 800bc9c:	2200      	movs	r2, #0
 800bc9e:	2100      	movs	r1, #0
 800bca0:	2002      	movs	r0, #2
 800bca2:	f00f fd4f 	bl	801b744 <UTIL_ADV_TRACE_COND_FSend>
 800bca6:	e014      	b.n	800bcd2 <PrintKey+0xf6>
        }
        else if (key == MC_APP_S_KEY_0)
 800bca8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bcac:	2b81      	cmp	r3, #129	@ 0x81
 800bcae:	d106      	bne.n	800bcbe <PrintKey+0xe2>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCAppSKey_0: ");
 800bcb0:	4b38      	ldr	r3, [pc, #224]	@ (800bd94 <PrintKey+0x1b8>)
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	2100      	movs	r1, #0
 800bcb6:	2002      	movs	r0, #2
 800bcb8:	f00f fd44 	bl	801b744 <UTIL_ADV_TRACE_COND_FSend>
 800bcbc:	e009      	b.n	800bcd2 <PrintKey+0xf6>
        }
        else if (key == MC_NWK_S_KEY_0)
 800bcbe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bcc2:	2b82      	cmp	r3, #130	@ 0x82
 800bcc4:	d105      	bne.n	800bcd2 <PrintKey+0xf6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCNwkSKey_0: ");
 800bcc6:	4b34      	ldr	r3, [pc, #208]	@ (800bd98 <PrintKey+0x1bc>)
 800bcc8:	2200      	movs	r2, #0
 800bcca:	2100      	movs	r1, #0
 800bccc:	2002      	movs	r0, #2
 800bcce:	f00f fd39 	bl	801b744 <UTIL_ADV_TRACE_COND_FSend>
        }
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800bcd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcd4:	785b      	ldrb	r3, [r3, #1]
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcda:	789b      	ldrb	r3, [r3, #2]
 800bcdc:	461c      	mov	r4, r3
 800bcde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bce0:	78db      	ldrb	r3, [r3, #3]
 800bce2:	461d      	mov	r5, r3
 800bce4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bce6:	791b      	ldrb	r3, [r3, #4]
 800bce8:	461e      	mov	r6, r3
 800bcea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcec:	795b      	ldrb	r3, [r3, #5]
 800bcee:	623b      	str	r3, [r7, #32]
 800bcf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcf2:	799b      	ldrb	r3, [r3, #6]
 800bcf4:	61fb      	str	r3, [r7, #28]
 800bcf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcf8:	79db      	ldrb	r3, [r3, #7]
 800bcfa:	61bb      	str	r3, [r7, #24]
 800bcfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcfe:	7a1b      	ldrb	r3, [r3, #8]
 800bd00:	617b      	str	r3, [r7, #20]
 800bd02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd04:	7a5b      	ldrb	r3, [r3, #9]
 800bd06:	613b      	str	r3, [r7, #16]
 800bd08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd0a:	7a9b      	ldrb	r3, [r3, #10]
 800bd0c:	60fb      	str	r3, [r7, #12]
 800bd0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd10:	7adb      	ldrb	r3, [r3, #11]
 800bd12:	60bb      	str	r3, [r7, #8]
 800bd14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd16:	7b1b      	ldrb	r3, [r3, #12]
 800bd18:	607b      	str	r3, [r7, #4]
 800bd1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd1c:	7b5b      	ldrb	r3, [r3, #13]
 800bd1e:	603b      	str	r3, [r7, #0]
 800bd20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd22:	7b9b      	ldrb	r3, [r3, #14]
 800bd24:	4619      	mov	r1, r3
 800bd26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd28:	7bdb      	ldrb	r3, [r3, #15]
 800bd2a:	461a      	mov	r2, r3
 800bd2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd2e:	7c1b      	ldrb	r3, [r3, #16]
 800bd30:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bd32:	920e      	str	r2, [sp, #56]	@ 0x38
 800bd34:	910d      	str	r1, [sp, #52]	@ 0x34
 800bd36:	683a      	ldr	r2, [r7, #0]
 800bd38:	920c      	str	r2, [sp, #48]	@ 0x30
 800bd3a:	687a      	ldr	r2, [r7, #4]
 800bd3c:	920b      	str	r2, [sp, #44]	@ 0x2c
 800bd3e:	68ba      	ldr	r2, [r7, #8]
 800bd40:	920a      	str	r2, [sp, #40]	@ 0x28
 800bd42:	68fa      	ldr	r2, [r7, #12]
 800bd44:	9209      	str	r2, [sp, #36]	@ 0x24
 800bd46:	693a      	ldr	r2, [r7, #16]
 800bd48:	9208      	str	r2, [sp, #32]
 800bd4a:	697a      	ldr	r2, [r7, #20]
 800bd4c:	9207      	str	r2, [sp, #28]
 800bd4e:	69ba      	ldr	r2, [r7, #24]
 800bd50:	9206      	str	r2, [sp, #24]
 800bd52:	69fa      	ldr	r2, [r7, #28]
 800bd54:	9205      	str	r2, [sp, #20]
 800bd56:	6a3b      	ldr	r3, [r7, #32]
 800bd58:	9304      	str	r3, [sp, #16]
 800bd5a:	9603      	str	r6, [sp, #12]
 800bd5c:	9502      	str	r5, [sp, #8]
 800bd5e:	9401      	str	r4, [sp, #4]
 800bd60:	9000      	str	r0, [sp, #0]
 800bd62:	4b0e      	ldr	r3, [pc, #56]	@ (800bd9c <PrintKey+0x1c0>)
 800bd64:	2200      	movs	r2, #0
 800bd66:	2100      	movs	r1, #0
 800bd68:	2002      	movs	r0, #2
 800bd6a:	f00f fceb 	bl	801b744 <UTIL_ADV_TRACE_COND_FSend>
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
               HEX16(extractable_key));
#endif /* LORAWAN_KMS */
    }
#endif /* KEY_EXTRACTABLE */
}
 800bd6e:	bf00      	nop
 800bd70:	3734      	adds	r7, #52	@ 0x34
 800bd72:	46bd      	mov	sp, r7
 800bd74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd76:	bf00      	nop
 800bd78:	0801ec20 	.word	0x0801ec20
 800bd7c:	0801ec38 	.word	0x0801ec38
 800bd80:	0801ec50 	.word	0x0801ec50
 800bd84:	0801ec68 	.word	0x0801ec68
 800bd88:	0801ec80 	.word	0x0801ec80
 800bd8c:	0801ec98 	.word	0x0801ec98
 800bd90:	0801ecb0 	.word	0x0801ecb0
 800bd94:	0801ecc8 	.word	0x0801ecc8
 800bd98:	0801ece0 	.word	0x0801ece0
 800bd9c:	0801ecf8 	.word	0x0801ecf8

0800bda0 <GetKeyByID>:
 * \param [in] keyID          - Key identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t** keyItem )
{
 800bda0:	b480      	push	{r7}
 800bda2:	b085      	sub	sp, #20
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	4603      	mov	r3, r0
 800bda8:	6039      	str	r1, [r7, #0]
 800bdaa:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800bdac:	2300      	movs	r3, #0
 800bdae:	73fb      	strb	r3, [r7, #15]
 800bdb0:	e01a      	b.n	800bde8 <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800bdb2:	4b12      	ldr	r3, [pc, #72]	@ (800bdfc <GetKeyByID+0x5c>)
 800bdb4:	6819      	ldr	r1, [r3, #0]
 800bdb6:	7bfa      	ldrb	r2, [r7, #15]
 800bdb8:	4613      	mov	r3, r2
 800bdba:	011b      	lsls	r3, r3, #4
 800bdbc:	4413      	add	r3, r2
 800bdbe:	440b      	add	r3, r1
 800bdc0:	3310      	adds	r3, #16
 800bdc2:	781b      	ldrb	r3, [r3, #0]
 800bdc4:	79fa      	ldrb	r2, [r7, #7]
 800bdc6:	429a      	cmp	r2, r3
 800bdc8:	d10b      	bne.n	800bde2 <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800bdca:	4b0c      	ldr	r3, [pc, #48]	@ (800bdfc <GetKeyByID+0x5c>)
 800bdcc:	6819      	ldr	r1, [r3, #0]
 800bdce:	7bfa      	ldrb	r2, [r7, #15]
 800bdd0:	4613      	mov	r3, r2
 800bdd2:	011b      	lsls	r3, r3, #4
 800bdd4:	4413      	add	r3, r2
 800bdd6:	3310      	adds	r3, #16
 800bdd8:	18ca      	adds	r2, r1, r3
 800bdda:	683b      	ldr	r3, [r7, #0]
 800bddc:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800bdde:	2300      	movs	r3, #0
 800bde0:	e006      	b.n	800bdf0 <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800bde2:	7bfb      	ldrb	r3, [r7, #15]
 800bde4:	3301      	adds	r3, #1
 800bde6:	73fb      	strb	r3, [r7, #15]
 800bde8:	7bfb      	ldrb	r3, [r7, #15]
 800bdea:	2b09      	cmp	r3, #9
 800bdec:	d9e1      	bls.n	800bdb2 <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800bdee:	2303      	movs	r3, #3
}
 800bdf0:	4618      	mov	r0, r3
 800bdf2:	3714      	adds	r7, #20
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	bc80      	pop	{r7}
 800bdf8:	4770      	bx	lr
 800bdfa:	bf00      	nop
 800bdfc:	20000720 	.word	0x20000720

0800be00 <ComputeCmac>:
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                          uint32_t* cmac )
{
 800be00:	b590      	push	{r4, r7, lr}
 800be02:	b0d1      	sub	sp, #324	@ 0x144
 800be04:	af00      	add	r7, sp, #0
 800be06:	f507 74a0 	add.w	r4, r7, #320	@ 0x140
 800be0a:	f5a4 749a 	sub.w	r4, r4, #308	@ 0x134
 800be0e:	6020      	str	r0, [r4, #0]
 800be10:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 800be14:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 800be18:	6001      	str	r1, [r0, #0]
 800be1a:	4619      	mov	r1, r3
 800be1c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800be20:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 800be24:	801a      	strh	r2, [r3, #0]
 800be26:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800be2a:	f2a3 133b 	subw	r3, r3, #315	@ 0x13b
 800be2e:	460a      	mov	r2, r1
 800be30:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800be32:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800be36:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d003      	beq.n	800be48 <ComputeCmac+0x48>
 800be40:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800be44:	2b00      	cmp	r3, #0
 800be46:	d101      	bne.n	800be4c <ComputeCmac+0x4c>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800be48:	2302      	movs	r3, #2
 800be4a:	e05c      	b.n	800bf06 <ComputeCmac+0x106>

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800be4c:	f107 0314 	add.w	r3, r7, #20
 800be50:	4618      	mov	r0, r3
 800be52:	f7fe ff17 	bl	800ac84 <AES_CMAC_Init>

    Key_t*                keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800be56:	f107 0210 	add.w	r2, r7, #16
 800be5a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800be5e:	f2a3 133b 	subw	r3, r3, #315	@ 0x13b
 800be62:	781b      	ldrb	r3, [r3, #0]
 800be64:	4611      	mov	r1, r2
 800be66:	4618      	mov	r0, r3
 800be68:	f7ff ff9a 	bl	800bda0 <GetKeyByID>
 800be6c:	4603      	mov	r3, r0
 800be6e:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800be72:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 800be76:	2b00      	cmp	r3, #0
 800be78:	d143      	bne.n	800bf02 <ComputeCmac+0x102>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800be7a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800be7e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	1c5a      	adds	r2, r3, #1
 800be86:	f107 0314 	add.w	r3, r7, #20
 800be8a:	4611      	mov	r1, r2
 800be8c:	4618      	mov	r0, r3
 800be8e:	f7fe ff12 	bl	800acb6 <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800be92:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800be96:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d009      	beq.n	800beb4 <ComputeCmac+0xb4>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
 800bea0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800bea4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800bea8:	f107 0014 	add.w	r0, r7, #20
 800beac:	2210      	movs	r2, #16
 800beae:	6819      	ldr	r1, [r3, #0]
 800beb0:	f7fe ff10 	bl	800acd4 <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800beb4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800beb8:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 800bebc:	881a      	ldrh	r2, [r3, #0]
 800bebe:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800bec2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800bec6:	f107 0014 	add.w	r0, r7, #20
 800beca:	6819      	ldr	r1, [r3, #0]
 800becc:	f7fe ff02 	bl	800acd4 <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800bed0:	f107 0214 	add.w	r2, r7, #20
 800bed4:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 800bed8:	4611      	mov	r1, r2
 800beda:	4618      	mov	r0, r3
 800bedc:	f7fe ffbc 	bl	800ae58 <AES_CMAC_Final>

        // Bring into the required format
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800bee0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800bee4:	061a      	lsls	r2, r3, #24
 800bee6:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 800beea:	041b      	lsls	r3, r3, #16
 800beec:	431a      	orrs	r2, r3
 800beee:	f897 312d 	ldrb.w	r3, [r7, #301]	@ 0x12d
 800bef2:	021b      	lsls	r3, r3, #8
 800bef4:	4313      	orrs	r3, r2
                              ( uint32_t ) Cmac[0] );
 800bef6:	f897 212c 	ldrb.w	r2, [r7, #300]	@ 0x12c
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800befa:	431a      	orrs	r2, r3
 800befc:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800bf00:	601a      	str	r2, [r3, #0]
    if (rv != CKR_OK)
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800bf02:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
}
 800bf06:	4618      	mov	r0, r3
 800bf08:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 800bf0c:	46bd      	mov	sp, r7
 800bf0e:	bd90      	pop	{r4, r7, pc}

0800bf10 <SecureElementInit>:
/*
 * API functions
 */
/* ST_WORKAROUND: Add unique ID callback as input parameter */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm, SecureElementGetUniqueId seGetUniqueId )
{
 800bf10:	b580      	push	{r7, lr}
 800bf12:	b082      	sub	sp, #8
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	6078      	str	r0, [r7, #4]
 800bf18:	6039      	str	r1, [r7, #0]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    if( nvm == NULL )
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d101      	bne.n	800bf24 <SecureElementInit+0x14>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bf20:	2302      	movs	r3, #2
 800bf22:	e00a      	b.n	800bf3a <SecureElementInit+0x2a>
    }

    // Initialize nvm pointer
    SeNvm = nvm;
 800bf24:	4a07      	ldr	r2, [pc, #28]	@ (800bf44 <SecureElementInit+0x34>)
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	6013      	str	r3, [r2, #0]

    // Initialize data
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 800bf2a:	4b06      	ldr	r3, [pc, #24]	@ (800bf44 <SecureElementInit+0x34>)
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	22c0      	movs	r2, #192	@ 0xc0
 800bf30:	4905      	ldr	r1, [pc, #20]	@ (800bf48 <SecureElementInit+0x38>)
 800bf32:	4618      	mov	r0, r3
 800bf34:	f00b f8af 	bl	8017096 <memcpy1>
        // Get a DevEUI from MCU unique ID
        seGetUniqueId(SeNvm->DevEui);
    }
#endif /* STATIC_DEVICE_EUI */
#endif /* !SECURE_ELEMENT_PRE_PROVISIONED */
    return SECURE_ELEMENT_SUCCESS;
 800bf38:	2300      	movs	r3, #0
}
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	3708      	adds	r7, #8
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	bd80      	pop	{r7, pc}
 800bf42:	bf00      	nop
 800bf44:	20000720 	.word	0x20000720
 800bf48:	0801fa3c 	.word	0x0801fa3c

0800bf4c <SecureElementGetKeyByID>:
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem)
#else
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, uint8_t* extractable_key )
#endif /* LORAWAN_KMS */
{
 800bf4c:	b480      	push	{r7}
 800bf4e:	b085      	sub	sp, #20
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	4603      	mov	r3, r0
 800bf54:	6039      	str	r1, [r7, #0]
 800bf56:	71fb      	strb	r3, [r7, #7]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800bf58:	2300      	movs	r3, #0
 800bf5a:	73fb      	strb	r3, [r7, #15]
 800bf5c:	e01a      	b.n	800bf94 <SecureElementGetKeyByID+0x48>
    {
        if (SeNvm->KeyList[i].KeyID == keyID)
 800bf5e:	4b12      	ldr	r3, [pc, #72]	@ (800bfa8 <SecureElementGetKeyByID+0x5c>)
 800bf60:	6819      	ldr	r1, [r3, #0]
 800bf62:	7bfa      	ldrb	r2, [r7, #15]
 800bf64:	4613      	mov	r3, r2
 800bf66:	011b      	lsls	r3, r3, #4
 800bf68:	4413      	add	r3, r2
 800bf6a:	440b      	add	r3, r1
 800bf6c:	3310      	adds	r3, #16
 800bf6e:	781b      	ldrb	r3, [r3, #0]
 800bf70:	79fa      	ldrb	r2, [r7, #7]
 800bf72:	429a      	cmp	r2, r3
 800bf74:	d10b      	bne.n	800bf8e <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &(SeNvm->KeyList[i]);
 800bf76:	4b0c      	ldr	r3, [pc, #48]	@ (800bfa8 <SecureElementGetKeyByID+0x5c>)
 800bf78:	6819      	ldr	r1, [r3, #0]
 800bf7a:	7bfa      	ldrb	r2, [r7, #15]
 800bf7c:	4613      	mov	r3, r2
 800bf7e:	011b      	lsls	r3, r3, #4
 800bf80:	4413      	add	r3, r2
 800bf82:	3310      	adds	r3, #16
 800bf84:	18ca      	adds	r2, r1, r3
 800bf86:	683b      	ldr	r3, [r7, #0]
 800bf88:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	e006      	b.n	800bf9c <SecureElementGetKeyByID+0x50>
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800bf8e:	7bfb      	ldrb	r3, [r7, #15]
 800bf90:	3301      	adds	r3, #1
 800bf92:	73fb      	strb	r3, [r7, #15]
 800bf94:	7bfb      	ldrb	r3, [r7, #15]
 800bf96:	2b09      	cmp	r3, #9
 800bf98:	d9e1      	bls.n	800bf5e <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800bf9a:	2303      	movs	r3, #3
        return SECURE_ELEMENT_ERROR;
    }
    return SECURE_ELEMENT_SUCCESS;

#endif /* LORAWAN_KMS == 1 */
}
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	3714      	adds	r7, #20
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	bc80      	pop	{r7}
 800bfa4:	4770      	bx	lr
 800bfa6:	bf00      	nop
 800bfa8:	20000720 	.word	0x20000720

0800bfac <SecureElementPrintKeys>:

SecureElementStatus_t SecureElementPrintKeys( void )
{
 800bfac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bfae:	b08b      	sub	sp, #44	@ 0x2c
 800bfb0:	af08      	add	r7, sp, #32
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    MW_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 800bfb2:	4b3f      	ldr	r3, [pc, #252]	@ (800c0b0 <SecureElementPrintKeys+0x104>)
 800bfb4:	2200      	movs	r2, #0
 800bfb6:	2100      	movs	r1, #0
 800bfb8:	2002      	movs	r0, #2
 800bfba:	f00f fbc3 	bl	801b744 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_KEY);
 800bfbe:	2000      	movs	r0, #0
 800bfc0:	f7ff fe0c 	bl	800bbdc <PrintKey>
    PrintKey(NWK_KEY);
 800bfc4:	2001      	movs	r0, #1
 800bfc6:	f7ff fe09 	bl	800bbdc <PrintKey>
    MW_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
 800bfca:	4b3a      	ldr	r3, [pc, #232]	@ (800c0b4 <SecureElementPrintKeys+0x108>)
 800bfcc:	2200      	movs	r2, #0
 800bfce:	2100      	movs	r1, #0
 800bfd0:	2002      	movs	r0, #2
 800bfd2:	f00f fbb7 	bl	801b744 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_S_KEY);
 800bfd6:	2003      	movs	r0, #3
 800bfd8:	f7ff fe00 	bl	800bbdc <PrintKey>
    PrintKey(NWK_S_KEY);
 800bfdc:	2002      	movs	r0, #2
 800bfde:	f7ff fdfd 	bl	800bbdc <PrintKey>
#endif /* KEY_EXTRACTABLE */
    MW_LOG(TS_OFF, VLEVEL_M, "###### IDs  ######\r\n");
 800bfe2:	4b35      	ldr	r3, [pc, #212]	@ (800c0b8 <SecureElementPrintKeys+0x10c>)
 800bfe4:	2200      	movs	r2, #0
 800bfe6:	2100      	movs	r1, #0
 800bfe8:	2002      	movs	r0, #2
 800bfea:	f00f fbab 	bl	801b744 <UTIL_ADV_TRACE_COND_FSend>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevEui:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800bfee:	4b33      	ldr	r3, [pc, #204]	@ (800c0bc <SecureElementPrintKeys+0x110>)
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	781b      	ldrb	r3, [r3, #0]
 800bff4:	461a      	mov	r2, r3
 800bff6:	4b31      	ldr	r3, [pc, #196]	@ (800c0bc <SecureElementPrintKeys+0x110>)
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	785b      	ldrb	r3, [r3, #1]
 800bffc:	4619      	mov	r1, r3
 800bffe:	4b2f      	ldr	r3, [pc, #188]	@ (800c0bc <SecureElementPrintKeys+0x110>)
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	789b      	ldrb	r3, [r3, #2]
 800c004:	4618      	mov	r0, r3
 800c006:	4b2d      	ldr	r3, [pc, #180]	@ (800c0bc <SecureElementPrintKeys+0x110>)
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	78db      	ldrb	r3, [r3, #3]
 800c00c:	461c      	mov	r4, r3
 800c00e:	4b2b      	ldr	r3, [pc, #172]	@ (800c0bc <SecureElementPrintKeys+0x110>)
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	791b      	ldrb	r3, [r3, #4]
 800c014:	461d      	mov	r5, r3
 800c016:	4b29      	ldr	r3, [pc, #164]	@ (800c0bc <SecureElementPrintKeys+0x110>)
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	795b      	ldrb	r3, [r3, #5]
 800c01c:	461e      	mov	r6, r3
 800c01e:	4b27      	ldr	r3, [pc, #156]	@ (800c0bc <SecureElementPrintKeys+0x110>)
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	799b      	ldrb	r3, [r3, #6]
 800c024:	607b      	str	r3, [r7, #4]
 800c026:	4b25      	ldr	r3, [pc, #148]	@ (800c0bc <SecureElementPrintKeys+0x110>)
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	79db      	ldrb	r3, [r3, #7]
 800c02c:	9307      	str	r3, [sp, #28]
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	9306      	str	r3, [sp, #24]
 800c032:	9605      	str	r6, [sp, #20]
 800c034:	9504      	str	r5, [sp, #16]
 800c036:	9403      	str	r4, [sp, #12]
 800c038:	9002      	str	r0, [sp, #8]
 800c03a:	9101      	str	r1, [sp, #4]
 800c03c:	9200      	str	r2, [sp, #0]
 800c03e:	4b20      	ldr	r3, [pc, #128]	@ (800c0c0 <SecureElementPrintKeys+0x114>)
 800c040:	2200      	movs	r2, #0
 800c042:	2100      	movs	r1, #0
 800c044:	2002      	movs	r0, #2
 800c046:	f00f fb7d 	bl	801b744 <UTIL_ADV_TRACE_COND_FSend>
           HEX8(SeNvm->DevEui));
    MW_LOG(TS_OFF, VLEVEL_M, "###### AppEui:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800c04a:	4b1c      	ldr	r3, [pc, #112]	@ (800c0bc <SecureElementPrintKeys+0x110>)
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	7a1b      	ldrb	r3, [r3, #8]
 800c050:	461a      	mov	r2, r3
 800c052:	4b1a      	ldr	r3, [pc, #104]	@ (800c0bc <SecureElementPrintKeys+0x110>)
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	7a5b      	ldrb	r3, [r3, #9]
 800c058:	4619      	mov	r1, r3
 800c05a:	4b18      	ldr	r3, [pc, #96]	@ (800c0bc <SecureElementPrintKeys+0x110>)
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	7a9b      	ldrb	r3, [r3, #10]
 800c060:	4618      	mov	r0, r3
 800c062:	4b16      	ldr	r3, [pc, #88]	@ (800c0bc <SecureElementPrintKeys+0x110>)
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	7adb      	ldrb	r3, [r3, #11]
 800c068:	461c      	mov	r4, r3
 800c06a:	4b14      	ldr	r3, [pc, #80]	@ (800c0bc <SecureElementPrintKeys+0x110>)
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	7b1b      	ldrb	r3, [r3, #12]
 800c070:	461d      	mov	r5, r3
 800c072:	4b12      	ldr	r3, [pc, #72]	@ (800c0bc <SecureElementPrintKeys+0x110>)
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	7b5b      	ldrb	r3, [r3, #13]
 800c078:	461e      	mov	r6, r3
 800c07a:	4b10      	ldr	r3, [pc, #64]	@ (800c0bc <SecureElementPrintKeys+0x110>)
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	7b9b      	ldrb	r3, [r3, #14]
 800c080:	607b      	str	r3, [r7, #4]
 800c082:	4b0e      	ldr	r3, [pc, #56]	@ (800c0bc <SecureElementPrintKeys+0x110>)
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	7bdb      	ldrb	r3, [r3, #15]
 800c088:	9307      	str	r3, [sp, #28]
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	9306      	str	r3, [sp, #24]
 800c08e:	9605      	str	r6, [sp, #20]
 800c090:	9504      	str	r5, [sp, #16]
 800c092:	9403      	str	r4, [sp, #12]
 800c094:	9002      	str	r0, [sp, #8]
 800c096:	9101      	str	r1, [sp, #4]
 800c098:	9200      	str	r2, [sp, #0]
 800c09a:	4b0a      	ldr	r3, [pc, #40]	@ (800c0c4 <SecureElementPrintKeys+0x118>)
 800c09c:	2200      	movs	r2, #0
 800c09e:	2100      	movs	r1, #0
 800c0a0:	2002      	movs	r0, #2
 800c0a2:	f00f fb4f 	bl	801b744 <UTIL_ADV_TRACE_COND_FSend>
           HEX8(SeNvm->JoinEui));
    return SECURE_ELEMENT_SUCCESS;
 800c0a6:	2300      	movs	r3, #0
}
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	370c      	adds	r7, #12
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c0b0:	0801ed4c 	.word	0x0801ed4c
 800c0b4:	0801ed64 	.word	0x0801ed64
 800c0b8:	0801ed7c 	.word	0x0801ed7c
 800c0bc:	20000720 	.word	0x20000720
 800c0c0:	0801ed94 	.word	0x0801ed94
 800c0c4:	0801edd4 	.word	0x0801edd4

0800c0c8 <SecureElementPrintSessionKeys>:
    
SecureElementStatus_t SecureElementPrintSessionKeys( void )
{
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	af00      	add	r7, sp, #0
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    PrintKey(MC_ROOT_KEY);
 800c0cc:	2004      	movs	r0, #4
 800c0ce:	f7ff fd85 	bl	800bbdc <PrintKey>
    PrintKey(MC_KE_KEY);
 800c0d2:	207f      	movs	r0, #127	@ 0x7f
 800c0d4:	f7ff fd82 	bl	800bbdc <PrintKey>
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    PrintKey(F_NWK_S_INT_KEY);
    PrintKey(S_NWK_S_INT_KEY);
    PrintKey(NWK_S_ENC_KEY);
#else
    PrintKey(NWK_S_KEY);
 800c0d8:	2002      	movs	r0, #2
 800c0da:	f7ff fd7f 	bl	800bbdc <PrintKey>
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    PrintKey(APP_S_KEY);
 800c0de:	2003      	movs	r0, #3
 800c0e0:	f7ff fd7c 	bl	800bbdc <PrintKey>
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_SUCCESS;
 800c0e4:	2300      	movs	r3, #0
}
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	bd80      	pop	{r7, pc}
	...

0800c0ec <SecureElementSetKey>:
#endif /* LORAWAN_KMS */
}
/* ST_WORKAROUND_END */

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	b088      	sub	sp, #32
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	4603      	mov	r3, r0
 800c0f4:	6039      	str	r1, [r7, #0]
 800c0f6:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800c0f8:	683b      	ldr	r3, [r7, #0]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d101      	bne.n	800c102 <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c0fe:	2302      	movs	r3, #2
 800c100:	e04b      	b.n	800c19a <SecureElementSetKey+0xae>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800c102:	2300      	movs	r3, #0
 800c104:	77fb      	strb	r3, [r7, #31]
 800c106:	e044      	b.n	800c192 <SecureElementSetKey+0xa6>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800c108:	4b26      	ldr	r3, [pc, #152]	@ (800c1a4 <SecureElementSetKey+0xb8>)
 800c10a:	6819      	ldr	r1, [r3, #0]
 800c10c:	7ffa      	ldrb	r2, [r7, #31]
 800c10e:	4613      	mov	r3, r2
 800c110:	011b      	lsls	r3, r3, #4
 800c112:	4413      	add	r3, r2
 800c114:	440b      	add	r3, r1
 800c116:	3310      	adds	r3, #16
 800c118:	781b      	ldrb	r3, [r3, #0]
 800c11a:	79fa      	ldrb	r2, [r7, #7]
 800c11c:	429a      	cmp	r2, r3
 800c11e:	d135      	bne.n	800c18c <SecureElementSetKey+0xa0>
        {
            /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if ( keyID == MC_KEY_0 )
 800c120:	79fb      	ldrb	r3, [r7, #7]
 800c122:	2b80      	cmp	r3, #128	@ 0x80
 800c124:	d122      	bne.n	800c16c <SecureElementSetKey+0x80>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            /* ST_WORKAROUND_END */
            {  // Decrypt the key if its a Mckey
                SecureElementStatus_t retval           = SECURE_ELEMENT_ERROR;
 800c126:	2306      	movs	r3, #6
 800c128:	77bb      	strb	r3, [r7, #30]
                uint8_t               decryptedKey[16] = { 0 };
 800c12a:	f107 030c 	add.w	r3, r7, #12
 800c12e:	2200      	movs	r2, #0
 800c130:	601a      	str	r2, [r3, #0]
 800c132:	605a      	str	r2, [r3, #4]
 800c134:	609a      	str	r2, [r3, #8]
 800c136:	60da      	str	r2, [r3, #12]

                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 800c138:	f107 030c 	add.w	r3, r7, #12
 800c13c:	227f      	movs	r2, #127	@ 0x7f
 800c13e:	2110      	movs	r1, #16
 800c140:	6838      	ldr	r0, [r7, #0]
 800c142:	f000 f87e 	bl	800c242 <SecureElementAesEncrypt>
 800c146:	4603      	mov	r3, r0
 800c148:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800c14a:	4b16      	ldr	r3, [pc, #88]	@ (800c1a4 <SecureElementSetKey+0xb8>)
 800c14c:	6819      	ldr	r1, [r3, #0]
 800c14e:	7ffa      	ldrb	r2, [r7, #31]
 800c150:	4613      	mov	r3, r2
 800c152:	011b      	lsls	r3, r3, #4
 800c154:	4413      	add	r3, r2
 800c156:	3310      	adds	r3, #16
 800c158:	440b      	add	r3, r1
 800c15a:	3301      	adds	r3, #1
 800c15c:	f107 010c 	add.w	r1, r7, #12
 800c160:	2210      	movs	r2, #16
 800c162:	4618      	mov	r0, r3
 800c164:	f00a ff97 	bl	8017096 <memcpy1>
                return retval;
 800c168:	7fbb      	ldrb	r3, [r7, #30]
 800c16a:	e016      	b.n	800c19a <SecureElementSetKey+0xae>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800c16c:	4b0d      	ldr	r3, [pc, #52]	@ (800c1a4 <SecureElementSetKey+0xb8>)
 800c16e:	6819      	ldr	r1, [r3, #0]
 800c170:	7ffa      	ldrb	r2, [r7, #31]
 800c172:	4613      	mov	r3, r2
 800c174:	011b      	lsls	r3, r3, #4
 800c176:	4413      	add	r3, r2
 800c178:	3310      	adds	r3, #16
 800c17a:	440b      	add	r3, r1
 800c17c:	3301      	adds	r3, #1
 800c17e:	2210      	movs	r2, #16
 800c180:	6839      	ldr	r1, [r7, #0]
 800c182:	4618      	mov	r0, r3
 800c184:	f00a ff87 	bl	8017096 <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800c188:	2300      	movs	r3, #0
 800c18a:	e006      	b.n	800c19a <SecureElementSetKey+0xae>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800c18c:	7ffb      	ldrb	r3, [r7, #31]
 800c18e:	3301      	adds	r3, #1
 800c190:	77fb      	strb	r3, [r7, #31]
 800c192:	7ffb      	ldrb	r3, [r7, #31]
 800c194:	2b09      	cmp	r3, #9
 800c196:	d9b7      	bls.n	800c108 <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800c198:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800c19a:	4618      	mov	r0, r3
 800c19c:	3720      	adds	r7, #32
 800c19e:	46bd      	mov	sp, r7
 800c1a0:	bd80      	pop	{r7, pc}
 800c1a2:	bf00      	nop
 800c1a4:	20000720 	.word	0x20000720

0800c1a8 <SecureElementComputeAesCmac>:

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size,
                                                   KeyIdentifier_t keyID, uint32_t* cmac )
{
 800c1a8:	b580      	push	{r7, lr}
 800c1aa:	b086      	sub	sp, #24
 800c1ac:	af02      	add	r7, sp, #8
 800c1ae:	60f8      	str	r0, [r7, #12]
 800c1b0:	60b9      	str	r1, [r7, #8]
 800c1b2:	4611      	mov	r1, r2
 800c1b4:	461a      	mov	r2, r3
 800c1b6:	460b      	mov	r3, r1
 800c1b8:	80fb      	strh	r3, [r7, #6]
 800c1ba:	4613      	mov	r3, r2
 800c1bc:	717b      	strb	r3, [r7, #5]
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 800c1be:	797b      	ldrb	r3, [r7, #5]
 800c1c0:	2b7e      	cmp	r3, #126	@ 0x7e
 800c1c2:	d901      	bls.n	800c1c8 <SecureElementComputeAesCmac+0x20>
    {
        // Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800c1c4:	2303      	movs	r3, #3
 800c1c6:	e009      	b.n	800c1dc <SecureElementComputeAesCmac+0x34>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800c1c8:	7979      	ldrb	r1, [r7, #5]
 800c1ca:	88fa      	ldrh	r2, [r7, #6]
 800c1cc:	69bb      	ldr	r3, [r7, #24]
 800c1ce:	9300      	str	r3, [sp, #0]
 800c1d0:	460b      	mov	r3, r1
 800c1d2:	68b9      	ldr	r1, [r7, #8]
 800c1d4:	68f8      	ldr	r0, [r7, #12]
 800c1d6:	f7ff fe13 	bl	800be00 <ComputeCmac>
 800c1da:	4603      	mov	r3, r0
}
 800c1dc:	4618      	mov	r0, r3
 800c1de:	3710      	adds	r7, #16
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	bd80      	pop	{r7, pc}

0800c1e4 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b088      	sub	sp, #32
 800c1e8:	af02      	add	r7, sp, #8
 800c1ea:	60f8      	str	r0, [r7, #12]
 800c1ec:	607a      	str	r2, [r7, #4]
 800c1ee:	461a      	mov	r2, r3
 800c1f0:	460b      	mov	r3, r1
 800c1f2:	817b      	strh	r3, [r7, #10]
 800c1f4:	4613      	mov	r3, r2
 800c1f6:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL )
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d101      	bne.n	800c202 <SecureElementVerifyAesCmac+0x1e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c1fe:	2302      	movs	r3, #2
 800c200:	e01b      	b.n	800c23a <SecureElementVerifyAesCmac+0x56>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 800c202:	2306      	movs	r3, #6
 800c204:	75fb      	strb	r3, [r7, #23]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint32_t              compCmac = 0;
 800c206:	2300      	movs	r3, #0
 800c208:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800c20a:	7a79      	ldrb	r1, [r7, #9]
 800c20c:	897a      	ldrh	r2, [r7, #10]
 800c20e:	f107 0310 	add.w	r3, r7, #16
 800c212:	9300      	str	r3, [sp, #0]
 800c214:	460b      	mov	r3, r1
 800c216:	68f9      	ldr	r1, [r7, #12]
 800c218:	2000      	movs	r0, #0
 800c21a:	f7ff fdf1 	bl	800be00 <ComputeCmac>
 800c21e:	4603      	mov	r3, r0
 800c220:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800c222:	7dfb      	ldrb	r3, [r7, #23]
 800c224:	2b00      	cmp	r3, #0
 800c226:	d001      	beq.n	800c22c <SecureElementVerifyAesCmac+0x48>
    {
        return retval;
 800c228:	7dfb      	ldrb	r3, [r7, #23]
 800c22a:	e006      	b.n	800c23a <SecureElementVerifyAesCmac+0x56>
    }

    if( expectedCmac != compCmac )
 800c22c:	693b      	ldr	r3, [r7, #16]
 800c22e:	687a      	ldr	r2, [r7, #4]
 800c230:	429a      	cmp	r2, r3
 800c232:	d001      	beq.n	800c238 <SecureElementVerifyAesCmac+0x54>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800c234:	2301      	movs	r3, #1
 800c236:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 800c238:	7dfb      	ldrb	r3, [r7, #23]
}
 800c23a:	4618      	mov	r0, r3
 800c23c:	3718      	adds	r7, #24
 800c23e:	46bd      	mov	sp, r7
 800c240:	bd80      	pop	{r7, pc}

0800c242 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                               uint8_t* encBuffer )
{
 800c242:	b580      	push	{r7, lr}
 800c244:	b0c2      	sub	sp, #264	@ 0x108
 800c246:	af00      	add	r7, sp, #0
 800c248:	60f8      	str	r0, [r7, #12]
 800c24a:	4608      	mov	r0, r1
 800c24c:	4611      	mov	r1, r2
 800c24e:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800c252:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800c256:	6013      	str	r3, [r2, #0]
 800c258:	4603      	mov	r3, r0
 800c25a:	817b      	strh	r3, [r7, #10]
 800c25c:	460b      	mov	r3, r1
 800c25e:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL || encBuffer == NULL )
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	2b00      	cmp	r3, #0
 800c264:	d006      	beq.n	800c274 <SecureElementAesEncrypt+0x32>
 800c266:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c26a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d101      	bne.n	800c278 <SecureElementAesEncrypt+0x36>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c274:	2302      	movs	r3, #2
 800c276:	e046      	b.n	800c306 <SecureElementAesEncrypt+0xc4>
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 800c278:	897b      	ldrh	r3, [r7, #10]
 800c27a:	f003 030f 	and.w	r3, r3, #15
 800c27e:	b29b      	uxth	r3, r3
 800c280:	2b00      	cmp	r3, #0
 800c282:	d001      	beq.n	800c288 <SecureElementAesEncrypt+0x46>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800c284:	2305      	movs	r3, #5
 800c286:	e03e      	b.n	800c306 <SecureElementAesEncrypt+0xc4>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800c288:	f107 0314 	add.w	r3, r7, #20
 800c28c:	22f0      	movs	r2, #240	@ 0xf0
 800c28e:	2100      	movs	r1, #0
 800c290:	4618      	mov	r0, r3
 800c292:	f00a ff3b 	bl	801710c <memset1>

    Key_t*                pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800c296:	f107 0210 	add.w	r2, r7, #16
 800c29a:	7a7b      	ldrb	r3, [r7, #9]
 800c29c:	4611      	mov	r1, r2
 800c29e:	4618      	mov	r0, r3
 800c2a0:	f7ff fd7e 	bl	800bda0 <GetKeyByID>
 800c2a4:	4603      	mov	r3, r0
 800c2a6:	f887 3106 	strb.w	r3, [r7, #262]	@ 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 800c2aa:	f897 3106 	ldrb.w	r3, [r7, #262]	@ 0x106
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d127      	bne.n	800c302 <SecureElementAesEncrypt+0xc0>
    {
        lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 800c2b2:	693b      	ldr	r3, [r7, #16]
 800c2b4:	3301      	adds	r3, #1
 800c2b6:	f107 0214 	add.w	r2, r7, #20
 800c2ba:	2110      	movs	r1, #16
 800c2bc:	4618      	mov	r0, r3
 800c2be:	f7ff fb65 	bl	800b98c <lorawan_aes_set_key>

        uint8_t block = 0;
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107

        while( size != 0 )
 800c2c8:	e018      	b.n	800c2fc <SecureElementAesEncrypt+0xba>
        {
            lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 800c2ca:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800c2ce:	68fa      	ldr	r2, [r7, #12]
 800c2d0:	18d0      	adds	r0, r2, r3
 800c2d2:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800c2d6:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800c2da:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800c2de:	6812      	ldr	r2, [r2, #0]
 800c2e0:	4413      	add	r3, r2
 800c2e2:	f107 0214 	add.w	r2, r7, #20
 800c2e6:	4619      	mov	r1, r3
 800c2e8:	f7ff fc2e 	bl	800bb48 <lorawan_aes_encrypt>
            block = block + 16;
 800c2ec:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800c2f0:	3310      	adds	r3, #16
 800c2f2:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
            size  = size - 16;
 800c2f6:	897b      	ldrh	r3, [r7, #10]
 800c2f8:	3b10      	subs	r3, #16
 800c2fa:	817b      	strh	r3, [r7, #10]
        while( size != 0 )
 800c2fc:	897b      	ldrh	r3, [r7, #10]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d1e3      	bne.n	800c2ca <SecureElementAesEncrypt+0x88>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 800c302:	f897 3106 	ldrb.w	r3, [r7, #262]	@ 0x106
}
 800c306:	4618      	mov	r0, r3
 800c308:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800c30c:	46bd      	mov	sp, r7
 800c30e:	bd80      	pop	{r7, pc}

0800c310 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t* input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800c310:	b580      	push	{r7, lr}
 800c312:	b088      	sub	sp, #32
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
 800c318:	460b      	mov	r3, r1
 800c31a:	70fb      	strb	r3, [r7, #3]
 800c31c:	4613      	mov	r3, r2
 800c31e:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d101      	bne.n	800c32a <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c326:	2302      	movs	r3, #2
 800c328:	e02d      	b.n	800c386 <SecureElementDeriveAndStoreKey+0x76>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 800c32a:	2306      	movs	r3, #6
 800c32c:	77fb      	strb	r3, [r7, #31]

    // In case of MC_KE_KEY, only McRootKey can be used as root key
    if( targetKeyID == MC_KE_KEY )
 800c32e:	78bb      	ldrb	r3, [r7, #2]
 800c330:	2b7f      	cmp	r3, #127	@ 0x7f
 800c332:	d104      	bne.n	800c33e <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800c334:	78fb      	ldrb	r3, [r7, #3]
 800c336:	2b04      	cmp	r3, #4
 800c338:	d001      	beq.n	800c33e <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800c33a:	2303      	movs	r3, #3
 800c33c:	e023      	b.n	800c386 <SecureElementDeriveAndStoreKey+0x76>
        }
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t key[16] = { 0 };
 800c33e:	f107 030c 	add.w	r3, r7, #12
 800c342:	2200      	movs	r2, #0
 800c344:	601a      	str	r2, [r3, #0]
 800c346:	605a      	str	r2, [r3, #4]
 800c348:	609a      	str	r2, [r3, #8]
 800c34a:	60da      	str	r2, [r3, #12]
    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 800c34c:	f107 030c 	add.w	r3, r7, #12
 800c350:	78fa      	ldrb	r2, [r7, #3]
 800c352:	2110      	movs	r1, #16
 800c354:	6878      	ldr	r0, [r7, #4]
 800c356:	f7ff ff74 	bl	800c242 <SecureElementAesEncrypt>
 800c35a:	4603      	mov	r3, r0
 800c35c:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800c35e:	7ffb      	ldrb	r3, [r7, #31]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d001      	beq.n	800c368 <SecureElementDeriveAndStoreKey+0x58>
    {
        return retval;
 800c364:	7ffb      	ldrb	r3, [r7, #31]
 800c366:	e00e      	b.n	800c386 <SecureElementDeriveAndStoreKey+0x76>
    }

    // Store key
    retval = SecureElementSetKey( targetKeyID, key );
 800c368:	f107 020c 	add.w	r2, r7, #12
 800c36c:	78bb      	ldrb	r3, [r7, #2]
 800c36e:	4611      	mov	r1, r2
 800c370:	4618      	mov	r0, r3
 800c372:	f7ff febb 	bl	800c0ec <SecureElementSetKey>
 800c376:	4603      	mov	r3, r0
 800c378:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800c37a:	7ffb      	ldrb	r3, [r7, #31]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d001      	beq.n	800c384 <SecureElementDeriveAndStoreKey+0x74>
    {
        return retval;
 800c380:	7ffb      	ldrb	r3, [r7, #31]
 800c382:	e000      	b.n	800c386 <SecureElementDeriveAndStoreKey+0x76>
    }

    return SECURE_ELEMENT_SUCCESS;
 800c384:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800c386:	4618      	mov	r0, r3
 800c388:	3720      	adds	r7, #32
 800c38a:	46bd      	mov	sp, r7
 800c38c:	bd80      	pop	{r7, pc}

0800c38e <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEui,
                                                      uint16_t devNonce, uint8_t* encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t* decJoinAccept,
                                                      uint8_t* versionMinor )
{
 800c38e:	b580      	push	{r7, lr}
 800c390:	b086      	sub	sp, #24
 800c392:	af00      	add	r7, sp, #0
 800c394:	60b9      	str	r1, [r7, #8]
 800c396:	607b      	str	r3, [r7, #4]
 800c398:	4603      	mov	r3, r0
 800c39a:	73fb      	strb	r3, [r7, #15]
 800c39c:	4613      	mov	r3, r2
 800c39e:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d005      	beq.n	800c3b2 <SecureElementProcessJoinAccept+0x24>
 800c3a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d002      	beq.n	800c3b2 <SecureElementProcessJoinAccept+0x24>
 800c3ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d101      	bne.n	800c3b6 <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c3b2:	2302      	movs	r3, #2
 800c3b4:	e064      	b.n	800c480 <SecureElementProcessJoinAccept+0xf2>
    }

    // Check that frame size isn't bigger than a JoinAccept with CFList size
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800c3b6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c3ba:	2b21      	cmp	r3, #33	@ 0x21
 800c3bc:	d901      	bls.n	800c3c2 <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800c3be:	2305      	movs	r3, #5
 800c3c0:	e05e      	b.n	800c480 <SecureElementProcessJoinAccept+0xf2>
    }

    // Determine decryption key
    KeyIdentifier_t encKeyID = NWK_KEY;
 800c3c2:	2301      	movs	r3, #1
 800c3c4:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800c3c6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c3ca:	b29b      	uxth	r3, r3
 800c3cc:	461a      	mov	r2, r3
 800c3ce:	6879      	ldr	r1, [r7, #4]
 800c3d0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c3d2:	f00a fe60 	bl	8017096 <memcpy1>

    // Decrypt JoinAccept, skip MHDR
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	1c58      	adds	r0, r3, #1
 800c3da:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c3de:	b29b      	uxth	r3, r3
 800c3e0:	3b01      	subs	r3, #1
 800c3e2:	b299      	uxth	r1, r3
 800c3e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3e6:	3301      	adds	r3, #1
 800c3e8:	7dfa      	ldrb	r2, [r7, #23]
 800c3ea:	f7ff ff2a 	bl	800c242 <SecureElementAesEncrypt>
 800c3ee:	4603      	mov	r3, r0
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d001      	beq.n	800c3f8 <SecureElementProcessJoinAccept+0x6a>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800c3f4:	2307      	movs	r3, #7
 800c3f6:	e043      	b.n	800c480 <SecureElementProcessJoinAccept+0xf2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800c3f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3fa:	330b      	adds	r3, #11
 800c3fc:	781b      	ldrb	r3, [r3, #0]
 800c3fe:	09db      	lsrs	r3, r3, #7
 800c400:	b2da      	uxtb	r2, r3
 800c402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c404:	701a      	strb	r2, [r3, #0]

    uint32_t mic = 0;
 800c406:	2300      	movs	r3, #0
 800c408:	613b      	str	r3, [r7, #16]

    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
 800c40a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c40e:	3b04      	subs	r3, #4
 800c410:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c412:	4413      	add	r3, r2
 800c414:	781b      	ldrb	r3, [r3, #0]
 800c416:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
 800c418:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c41c:	3b03      	subs	r3, #3
 800c41e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c420:	4413      	add	r3, r2
 800c422:	781b      	ldrb	r3, [r3, #0]
 800c424:	021b      	lsls	r3, r3, #8
 800c426:	693a      	ldr	r2, [r7, #16]
 800c428:	4313      	orrs	r3, r2
 800c42a:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 800c42c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c430:	3b02      	subs	r3, #2
 800c432:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c434:	4413      	add	r3, r2
 800c436:	781b      	ldrb	r3, [r3, #0]
 800c438:	041b      	lsls	r3, r3, #16
 800c43a:	693a      	ldr	r2, [r7, #16]
 800c43c:	4313      	orrs	r3, r2
 800c43e:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 800c440:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c444:	3b01      	subs	r3, #1
 800c446:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c448:	4413      	add	r3, r2
 800c44a:	781b      	ldrb	r3, [r3, #0]
 800c44c:	061b      	lsls	r3, r3, #24
 800c44e:	693a      	ldr	r2, [r7, #16]
 800c450:	4313      	orrs	r3, r2
 800c452:	613b      	str	r3, [r7, #16]
    //  - Header buffer to be used for MIC computation
    //        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
    //        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]

    // Verify mic
    if( *versionMinor == 0 )
 800c454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c456:	781b      	ldrb	r3, [r3, #0]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d10e      	bne.n	800c47a <SecureElementProcessJoinAccept+0xec>
    {
        // For LoRaWAN 1.0.x
        //   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
        //   CFListType)
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800c45c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c460:	b29b      	uxth	r3, r3
 800c462:	3b04      	subs	r3, #4
 800c464:	b299      	uxth	r1, r3
 800c466:	2301      	movs	r3, #1
 800c468:	693a      	ldr	r2, [r7, #16]
 800c46a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c46c:	f7ff feba 	bl	800c1e4 <SecureElementVerifyAesCmac>
 800c470:	4603      	mov	r3, r0
 800c472:	2b00      	cmp	r3, #0
 800c474:	d003      	beq.n	800c47e <SecureElementProcessJoinAccept+0xf0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800c476:	2301      	movs	r3, #1
 800c478:	e002      	b.n	800c480 <SecureElementProcessJoinAccept+0xf2>
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800c47a:	2304      	movs	r3, #4
 800c47c:	e000      	b.n	800c480 <SecureElementProcessJoinAccept+0xf2>
    }

    return SECURE_ELEMENT_SUCCESS;
 800c47e:	2300      	movs	r3, #0
}
 800c480:	4618      	mov	r0, r3
 800c482:	3718      	adds	r7, #24
 800c484:	46bd      	mov	sp, r7
 800c486:	bd80      	pop	{r7, pc}

0800c488 <SecureElementSetDevEui>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
 800c488:	b580      	push	{r7, lr}
 800c48a:	b082      	sub	sp, #8
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	2b00      	cmp	r3, #0
 800c494:	d101      	bne.n	800c49a <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c496:	2302      	movs	r3, #2
 800c498:	e007      	b.n	800c4aa <SecureElementSetDevEui+0x22>
    }
    memcpy1( SeNvm->DevEui, devEui, SE_EUI_SIZE );
 800c49a:	4b06      	ldr	r3, [pc, #24]	@ (800c4b4 <SecureElementSetDevEui+0x2c>)
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	2208      	movs	r2, #8
 800c4a0:	6879      	ldr	r1, [r7, #4]
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	f00a fdf7 	bl	8017096 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800c4a8:	2300      	movs	r3, #0
}
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	3708      	adds	r7, #8
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	bd80      	pop	{r7, pc}
 800c4b2:	bf00      	nop
 800c4b4:	20000720 	.word	0x20000720

0800c4b8 <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
 800c4b8:	b480      	push	{r7}
 800c4ba:	af00      	add	r7, sp, #0
    return SeNvm->DevEui;
 800c4bc:	4b02      	ldr	r3, [pc, #8]	@ (800c4c8 <SecureElementGetDevEui+0x10>)
 800c4be:	681b      	ldr	r3, [r3, #0]
}
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	46bd      	mov	sp, r7
 800c4c4:	bc80      	pop	{r7}
 800c4c6:	4770      	bx	lr
 800c4c8:	20000720 	.word	0x20000720

0800c4cc <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
 800c4cc:	b580      	push	{r7, lr}
 800c4ce:	b082      	sub	sp, #8
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d101      	bne.n	800c4de <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c4da:	2302      	movs	r3, #2
 800c4dc:	e008      	b.n	800c4f0 <SecureElementSetJoinEui+0x24>
    }
    memcpy1( SeNvm->JoinEui, joinEui, SE_EUI_SIZE );
 800c4de:	4b06      	ldr	r3, [pc, #24]	@ (800c4f8 <SecureElementSetJoinEui+0x2c>)
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	3308      	adds	r3, #8
 800c4e4:	2208      	movs	r2, #8
 800c4e6:	6879      	ldr	r1, [r7, #4]
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	f00a fdd4 	bl	8017096 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800c4ee:	2300      	movs	r3, #0
}
 800c4f0:	4618      	mov	r0, r3
 800c4f2:	3708      	adds	r7, #8
 800c4f4:	46bd      	mov	sp, r7
 800c4f6:	bd80      	pop	{r7, pc}
 800c4f8:	20000720 	.word	0x20000720

0800c4fc <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
 800c4fc:	b480      	push	{r7}
 800c4fe:	af00      	add	r7, sp, #0
    return SeNvm->JoinEui;
 800c500:	4b03      	ldr	r3, [pc, #12]	@ (800c510 <SecureElementGetJoinEui+0x14>)
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	3308      	adds	r3, #8
}
 800c506:	4618      	mov	r0, r3
 800c508:	46bd      	mov	sp, r7
 800c50a:	bc80      	pop	{r7}
 800c50c:	4770      	bx	lr
 800c50e:	bf00      	nop
 800c510:	20000720 	.word	0x20000720

0800c514 <LmHandlerInit>:
 */
static bool LmHandlerPackageIsInitialized(uint8_t id);

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks, uint32_t fwVersion )
{
 800c514:	b580      	push	{r7, lr}
 800c516:	b082      	sub	sp, #8
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
 800c51c:	6039      	str	r1, [r7, #0]
    LmHandlerCallbacks = handlerCallbacks;
 800c51e:	4a23      	ldr	r2, [pc, #140]	@ (800c5ac <LmHandlerInit+0x98>)
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800c524:	4b22      	ldr	r3, [pc, #136]	@ (800c5b0 <LmHandlerInit+0x9c>)
 800c526:	4a23      	ldr	r2, [pc, #140]	@ (800c5b4 <LmHandlerInit+0xa0>)
 800c528:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800c52a:	4b21      	ldr	r3, [pc, #132]	@ (800c5b0 <LmHandlerInit+0x9c>)
 800c52c:	4a22      	ldr	r2, [pc, #136]	@ (800c5b8 <LmHandlerInit+0xa4>)
 800c52e:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800c530:	4b1f      	ldr	r3, [pc, #124]	@ (800c5b0 <LmHandlerInit+0x9c>)
 800c532:	4a22      	ldr	r2, [pc, #136]	@ (800c5bc <LmHandlerInit+0xa8>)
 800c534:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800c536:	4b1e      	ldr	r3, [pc, #120]	@ (800c5b0 <LmHandlerInit+0x9c>)
 800c538:	4a21      	ldr	r2, [pc, #132]	@ (800c5c0 <LmHandlerInit+0xac>)
 800c53a:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800c53c:	4b1b      	ldr	r3, [pc, #108]	@ (800c5ac <LmHandlerInit+0x98>)
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	4a20      	ldr	r2, [pc, #128]	@ (800c5c4 <LmHandlerInit+0xb0>)
 800c544:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800c546:	4b19      	ldr	r3, [pc, #100]	@ (800c5ac <LmHandlerInit+0x98>)
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	685b      	ldr	r3, [r3, #4]
 800c54c:	4a1d      	ldr	r2, [pc, #116]	@ (800c5c4 <LmHandlerInit+0xb0>)
 800c54e:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800c550:	4b16      	ldr	r3, [pc, #88]	@ (800c5ac <LmHandlerInit+0x98>)
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	689b      	ldr	r3, [r3, #8]
 800c556:	4a1b      	ldr	r2, [pc, #108]	@ (800c5c4 <LmHandlerInit+0xb0>)
 800c558:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800c55a:	4b1a      	ldr	r3, [pc, #104]	@ (800c5c4 <LmHandlerInit+0xb0>)
 800c55c:	4a1a      	ldr	r2, [pc, #104]	@ (800c5c8 <LmHandlerInit+0xb4>)
 800c55e:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800c560:	4b12      	ldr	r3, [pc, #72]	@ (800c5ac <LmHandlerInit+0x98>)
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	699b      	ldr	r3, [r3, #24]
 800c566:	4a17      	ldr	r2, [pc, #92]	@ (800c5c4 <LmHandlerInit+0xb0>)
 800c568:	6113      	str	r3, [r2, #16]

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LmhpComplianceParams.FwVersion.Value = fwVersion;
 800c56a:	4a18      	ldr	r2, [pc, #96]	@ (800c5cc <LmHandlerInit+0xb8>)
 800c56c:	683b      	ldr	r3, [r7, #0]
 800c56e:	6013      	str	r3, [r2, #0]
    LmhpComplianceParams.OnTxPeriodicityChanged = LmHandlerCallbacks->OnTxPeriodicityChanged;
 800c570:	4b0e      	ldr	r3, [pc, #56]	@ (800c5ac <LmHandlerInit+0x98>)
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c576:	4a15      	ldr	r2, [pc, #84]	@ (800c5cc <LmHandlerInit+0xb8>)
 800c578:	6053      	str	r3, [r2, #4]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerCallbacks->OnTxFrameCtrlChanged;
 800c57a:	4b0c      	ldr	r3, [pc, #48]	@ (800c5ac <LmHandlerInit+0x98>)
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c580:	4a12      	ldr	r2, [pc, #72]	@ (800c5cc <LmHandlerInit+0xb8>)
 800c582:	6093      	str	r3, [r2, #8]
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerCallbacks->OnPingSlotPeriodicityChanged;
 800c584:	4b09      	ldr	r3, [pc, #36]	@ (800c5ac <LmHandlerInit+0x98>)
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c58a:	4a10      	ldr	r2, [pc, #64]	@ (800c5cc <LmHandlerInit+0xb8>)
 800c58c:	60d3      	str	r3, [r2, #12]
#endif /* LORAMAC_VERSION */

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 800c58e:	490f      	ldr	r1, [pc, #60]	@ (800c5cc <LmHandlerInit+0xb8>)
 800c590:	2000      	movs	r0, #0
 800c592:	f000 fd87 	bl	800d0a4 <LmHandlerPackageRegister>
 800c596:	4603      	mov	r3, r0
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d002      	beq.n	800c5a2 <LmHandlerInit+0x8e>
    {
        return LORAMAC_HANDLER_ERROR;
 800c59c:	f04f 33ff 	mov.w	r3, #4294967295
 800c5a0:	e000      	b.n	800c5a4 <LmHandlerInit+0x90>
    if (LmhpPackagesRegistrationInit() != LORAMAC_HANDLER_SUCCESS)
    {
        return LORAMAC_HANDLER_ERROR;
    }
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
    return LORAMAC_HANDLER_SUCCESS;
 800c5a2:	2300      	movs	r3, #0
}
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	3708      	adds	r7, #8
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	bd80      	pop	{r7, pc}
 800c5ac:	2000075c 	.word	0x2000075c
 800c5b0:	20000760 	.word	0x20000760
 800c5b4:	0800cdb1 	.word	0x0800cdb1
 800c5b8:	0800ce19 	.word	0x0800ce19
 800c5bc:	0800cee5 	.word	0x0800cee5
 800c5c0:	0800cffd 	.word	0x0800cffd
 800c5c4:	20000770 	.word	0x20000770
 800c5c8:	0800d475 	.word	0x0800d475
 800c5cc:	20000724 	.word	0x20000724

0800c5d0 <LmHandlerConfigure>:
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	b094      	sub	sp, #80	@ 0x50
 800c5d4:	af04      	add	r7, sp, #16
 800c5d6:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 800c5d8:	2214      	movs	r2, #20
 800c5da:	6879      	ldr	r1, [r7, #4]
 800c5dc:	4891      	ldr	r0, [pc, #580]	@ (800c824 <LmHandlerConfigure+0x254>)
 800c5de:	f00e f867 	bl	801a6b0 <UTIL_MEM_cpy_8>

#if ( LORAMAC_CLASSB_ENABLED == 1 )
    IsClassBSwitchPending = false;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    IsUplinkTxPending = false;
 800c5e2:	4b91      	ldr	r3, [pc, #580]	@ (800c828 <LmHandlerConfigure+0x258>)
 800c5e4:	2200      	movs	r2, #0
 800c5e6:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    loraInfo = LoraInfo_GetPtr();
 800c5e8:	f7fe fb0a 	bl	800ac00 <LoraInfo_GetPtr>
 800c5ec:	63f8      	str	r0, [r7, #60]	@ 0x3c

    if (0U == ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 800c5ee:	4b8d      	ldr	r3, [pc, #564]	@ (800c824 <LmHandlerConfigure+0x254>)
 800c5f0:	781b      	ldrb	r3, [r3, #0]
 800c5f2:	461a      	mov	r2, r3
 800c5f4:	2301      	movs	r3, #1
 800c5f6:	4093      	lsls	r3, r2
 800c5f8:	461a      	mov	r2, r3
 800c5fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c5fc:	685b      	ldr	r3, [r3, #4]
 800c5fe:	4013      	ands	r3, r2
 800c600:	2b00      	cmp	r3, #0
 800c602:	d107      	bne.n	800c614 <LmHandlerConfigure+0x44>
    {
        MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 800c604:	4b89      	ldr	r3, [pc, #548]	@ (800c82c <LmHandlerConfigure+0x25c>)
 800c606:	2201      	movs	r2, #1
 800c608:	2100      	movs	r1, #0
 800c60a:	2000      	movs	r0, #0
 800c60c:	f00f f89a 	bl	801b744 <UTIL_ADV_TRACE_COND_FSend>
        while (1) {}  /* error: Region is not defined in the MW */
 800c610:	bf00      	nop
 800c612:	e7fd      	b.n	800c610 <LmHandlerConfigure+0x40>
    }

    if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 800c614:	4b83      	ldr	r3, [pc, #524]	@ (800c824 <LmHandlerConfigure+0x254>)
 800c616:	781b      	ldrb	r3, [r3, #0]
 800c618:	461a      	mov	r2, r3
 800c61a:	4985      	ldr	r1, [pc, #532]	@ (800c830 <LmHandlerConfigure+0x260>)
 800c61c:	4885      	ldr	r0, [pc, #532]	@ (800c834 <LmHandlerConfigure+0x264>)
 800c61e:	f004 fe95 	bl	801134c <LoRaMacInitialization>
 800c622:	4603      	mov	r3, r0
 800c624:	2b00      	cmp	r3, #0
 800c626:	d002      	beq.n	800c62e <LmHandlerConfigure+0x5e>
    {
        return LORAMAC_HANDLER_ERROR;
 800c628:	f04f 33ff 	mov.w	r3, #4294967295
 800c62c:	e0f5      	b.n	800c81a <LmHandlerConfigure+0x24a>
    }

    // Try the restore context from the Backup RAM structure if data retention is available
    mibReq.Type = MIB_NVM_CTXS;
 800c62e:	2327      	movs	r3, #39	@ 0x27
 800c630:	763b      	strb	r3, [r7, #24]
    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800c632:	f107 0318 	add.w	r3, r7, #24
 800c636:	4618      	mov	r0, r3
 800c638:	f005 fbd8 	bl	8011dec <LoRaMacMibSetRequestConfirm>
 800c63c:	4603      	mov	r3, r0
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d103      	bne.n	800c64a <LmHandlerConfigure+0x7a>
    {
        CtxRestoreDone = true;
 800c642:	4b7d      	ldr	r3, [pc, #500]	@ (800c838 <LmHandlerConfigure+0x268>)
 800c644:	2201      	movs	r2, #1
 800c646:	701a      	strb	r2, [r3, #0]
 800c648:	e02a      	b.n	800c6a0 <LmHandlerConfigure+0xd0>
    }
    else
    {
        // Restore context data backup from user callback (stored in FLASH)
        mibReq.Type = MIB_NVM_BKP_CTXS;
 800c64a:	2328      	movs	r3, #40	@ 0x28
 800c64c:	763b      	strb	r3, [r7, #24]
        if (LmHandlerCallbacks->OnRestoreContextRequest != NULL)
 800c64e:	4b7b      	ldr	r3, [pc, #492]	@ (800c83c <LmHandlerConfigure+0x26c>)
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	691b      	ldr	r3, [r3, #16]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d00c      	beq.n	800c672 <LmHandlerConfigure+0xa2>
        {
            LoRaMacMibGetRequestConfirm( &mibReq );
 800c658:	f107 0318 	add.w	r3, r7, #24
 800c65c:	4618      	mov	r0, r3
 800c65e:	f005 fa1f 	bl	8011aa0 <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest(mibReq.Param.BackupContexts, sizeof(LoRaMacNvmData_t));
 800c662:	4b76      	ldr	r3, [pc, #472]	@ (800c83c <LmHandlerConfigure+0x26c>)
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	691b      	ldr	r3, [r3, #16]
 800c668:	69fa      	ldr	r2, [r7, #28]
 800c66a:	f240 517c 	movw	r1, #1404	@ 0x57c
 800c66e:	4610      	mov	r0, r2
 800c670:	4798      	blx	r3
        }
        // Restore context data from backup to main nvm structure
        mibReq.Type = MIB_NVM_CTXS;
 800c672:	2327      	movs	r3, #39	@ 0x27
 800c674:	763b      	strb	r3, [r7, #24]
        if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800c676:	f107 0318 	add.w	r3, r7, #24
 800c67a:	4618      	mov	r0, r3
 800c67c:	f005 fbb6 	bl	8011dec <LoRaMacMibSetRequestConfirm>
 800c680:	4603      	mov	r3, r0
 800c682:	2b00      	cmp	r3, #0
 800c684:	d10c      	bne.n	800c6a0 <LmHandlerConfigure+0xd0>
        {
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 800c686:	2301      	movs	r3, #1
 800c688:	763b      	strb	r3, [r7, #24]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800c68a:	f107 0318 	add.w	r3, r7, #24
 800c68e:	4618      	mov	r0, r3
 800c690:	f005 fa06 	bl	8011aa0 <LoRaMacMibGetRequestConfirm>
            if (mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE)
 800c694:	7f3b      	ldrb	r3, [r7, #28]
 800c696:	2b00      	cmp	r3, #0
 800c698:	d002      	beq.n	800c6a0 <LmHandlerConfigure+0xd0>
            {
                CtxRestoreDone = true;
 800c69a:	4b67      	ldr	r3, [pc, #412]	@ (800c838 <LmHandlerConfigure+0x268>)
 800c69c:	2201      	movs	r2, #1
 800c69e:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    if (CtxRestoreDone == true)
 800c6a0:	4b65      	ldr	r3, [pc, #404]	@ (800c838 <LmHandlerConfigure+0x268>)
 800c6a2:	781b      	ldrb	r3, [r3, #0]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d02a      	beq.n	800c6fe <LmHandlerConfigure+0x12e>
    {
        if ( LmHandlerCallbacks->OnNvmDataChange != NULL )
 800c6a8:	4b64      	ldr	r3, [pc, #400]	@ (800c83c <LmHandlerConfigure+0x26c>)
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	69db      	ldr	r3, [r3, #28]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d004      	beq.n	800c6bc <LmHandlerConfigure+0xec>
        {
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 800c6b2:	4b62      	ldr	r3, [pc, #392]	@ (800c83c <LmHandlerConfigure+0x26c>)
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	69db      	ldr	r3, [r3, #28]
 800c6b8:	2000      	movs	r0, #0
 800c6ba:	4798      	blx	r3
        }

        mibReq.Type = MIB_DEV_ADDR;
 800c6bc:	2306      	movs	r3, #6
 800c6be:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800c6c0:	f107 0318 	add.w	r3, r7, #24
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	f005 f9eb 	bl	8011aa0 <LoRaMacMibGetRequestConfirm>
        CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800c6ca:	69fb      	ldr	r3, [r7, #28]
 800c6cc:	4a5c      	ldr	r2, [pc, #368]	@ (800c840 <LmHandlerConfigure+0x270>)
 800c6ce:	6153      	str	r3, [r2, #20]

        mibReq.Type = MIB_NVM_CTXS;
 800c6d0:	2327      	movs	r3, #39	@ 0x27
 800c6d2:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800c6d4:	f107 0318 	add.w	r3, r7, #24
 800c6d8:	4618      	mov	r0, r3
 800c6da:	f005 f9e1 	bl	8011aa0 <LoRaMacMibGetRequestConfirm>

        LmHandlerParams.ActiveRegion = mibReq.Param.Contexts->MacGroup2.Region;
 800c6de:	69fb      	ldr	r3, [r7, #28]
 800c6e0:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800c6e4:	4b4f      	ldr	r3, [pc, #316]	@ (800c824 <LmHandlerConfigure+0x254>)
 800c6e6:	701a      	strb	r2, [r3, #0]
        LmHandlerParams.DefaultClass = mibReq.Param.Contexts->MacGroup2.DeviceClass;
 800c6e8:	69fb      	ldr	r3, [r7, #28]
 800c6ea:	f893 2104 	ldrb.w	r2, [r3, #260]	@ 0x104
 800c6ee:	4b4d      	ldr	r3, [pc, #308]	@ (800c824 <LmHandlerConfigure+0x254>)
 800c6f0:	705a      	strb	r2, [r3, #1]
        LmHandlerParams.AdrEnable = mibReq.Param.Contexts->MacGroup2.AdrCtrlOn;
 800c6f2:	69fb      	ldr	r3, [r7, #28]
 800c6f4:	f893 2106 	ldrb.w	r2, [r3, #262]	@ 0x106
 800c6f8:	4b4a      	ldr	r3, [pc, #296]	@ (800c824 <LmHandlerConfigure+0x254>)
 800c6fa:	709a      	strb	r2, [r3, #2]
 800c6fc:	e019      	b.n	800c732 <LmHandlerConfigure+0x162>
    }
    else
    {
        mibReq.Type = MIB_NET_ID;
 800c6fe:	2305      	movs	r3, #5
 800c700:	763b      	strb	r3, [r7, #24]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800c702:	2300      	movs	r3, #0
 800c704:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800c706:	f107 0318 	add.w	r3, r7, #24
 800c70a:	4618      	mov	r0, r3
 800c70c:	f005 fb6e 	bl	8011dec <LoRaMacMibSetRequestConfirm>

#if ( STATIC_DEVICE_ADDRESS != 1 )
        CommissioningParams.DevAddr = LmHandlerCallbacks->GetDevAddr();
 800c710:	4b4a      	ldr	r3, [pc, #296]	@ (800c83c <LmHandlerConfigure+0x26c>)
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	68db      	ldr	r3, [r3, #12]
 800c716:	4798      	blx	r3
 800c718:	4603      	mov	r3, r0
 800c71a:	4a49      	ldr	r2, [pc, #292]	@ (800c840 <LmHandlerConfigure+0x270>)
 800c71c:	6153      	str	r3, [r2, #20]
#endif /* STATIC_DEVICE_ADDRESS != 1 */

        mibReq.Type = MIB_DEV_ADDR;
 800c71e:	2306      	movs	r3, #6
 800c720:	763b      	strb	r3, [r7, #24]
        mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 800c722:	4b47      	ldr	r3, [pc, #284]	@ (800c840 <LmHandlerConfigure+0x270>)
 800c724:	695b      	ldr	r3, [r3, #20]
 800c726:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800c728:	f107 0318 	add.w	r3, r7, #24
 800c72c:	4618      	mov	r0, r3
 800c72e:	f005 fb5d 	bl	8011dec <LoRaMacMibSetRequestConfirm>
    }
    // Read secure-element DEV_EUI and JOIN_EUI values.
    mibReq.Type = MIB_DEV_EUI;
 800c732:	2302      	movs	r3, #2
 800c734:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800c736:	f107 0318 	add.w	r3, r7, #24
 800c73a:	4618      	mov	r0, r3
 800c73c:	f005 f9b0 	bl	8011aa0 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.DevEui, mibReq.Param.DevEui, 8 );
 800c740:	69fb      	ldr	r3, [r7, #28]
 800c742:	2208      	movs	r2, #8
 800c744:	4619      	mov	r1, r3
 800c746:	483e      	ldr	r0, [pc, #248]	@ (800c840 <LmHandlerConfigure+0x270>)
 800c748:	f00a fca5 	bl	8017096 <memcpy1>

    mibReq.Type = MIB_JOIN_EUI;
 800c74c:	2303      	movs	r3, #3
 800c74e:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800c750:	f107 0318 	add.w	r3, r7, #24
 800c754:	4618      	mov	r0, r3
 800c756:	f005 f9a3 	bl	8011aa0 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8 );
 800c75a:	69fb      	ldr	r3, [r7, #28]
 800c75c:	2208      	movs	r2, #8
 800c75e:	4619      	mov	r1, r3
 800c760:	4838      	ldr	r0, [pc, #224]	@ (800c844 <LmHandlerConfigure+0x274>)
 800c762:	f00a fc98 	bl	8017096 <memcpy1>

    SecureElementPrintKeys();
 800c766:	f7ff fc21 	bl	800bfac <SecureElementPrintKeys>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 800c76a:	4b37      	ldr	r3, [pc, #220]	@ (800c848 <LmHandlerConfigure+0x278>)
 800c76c:	781b      	ldrb	r3, [r3, #0]
 800c76e:	461a      	mov	r2, r3
 800c770:	4b36      	ldr	r3, [pc, #216]	@ (800c84c <LmHandlerConfigure+0x27c>)
 800c772:	781b      	ldrb	r3, [r3, #0]
 800c774:	4619      	mov	r1, r3
 800c776:	4b36      	ldr	r3, [pc, #216]	@ (800c850 <LmHandlerConfigure+0x280>)
 800c778:	781b      	ldrb	r3, [r3, #0]
 800c77a:	4618      	mov	r0, r3
 800c77c:	4b35      	ldr	r3, [pc, #212]	@ (800c854 <LmHandlerConfigure+0x284>)
 800c77e:	781b      	ldrb	r3, [r3, #0]
 800c780:	9303      	str	r3, [sp, #12]
 800c782:	9002      	str	r0, [sp, #8]
 800c784:	9101      	str	r1, [sp, #4]
 800c786:	9200      	str	r2, [sp, #0]
 800c788:	4b33      	ldr	r3, [pc, #204]	@ (800c858 <LmHandlerConfigure+0x288>)
 800c78a:	2200      	movs	r2, #0
 800c78c:	2100      	movs	r1, #0
 800c78e:	2002      	movs	r0, #2
 800c790:	f00e ffd8 	bl	801b744 <UTIL_ADV_TRACE_COND_FSend>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG(TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n");
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 800c794:	230f      	movs	r3, #15
 800c796:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800c798:	2301      	movs	r3, #1
 800c79a:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800c79c:	f107 0318 	add.w	r3, r7, #24
 800c7a0:	4618      	mov	r0, r3
 800c7a2:	f005 fb23 	bl	8011dec <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 800c7a6:	2310      	movs	r3, #16
 800c7a8:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c7ae:	f107 0318 	add.w	r3, r7, #24
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	f005 fb1a 	bl	8011dec <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 800c7b8:	2304      	movs	r3, #4
 800c7ba:	763b      	strb	r3, [r7, #24]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800c7bc:	4b19      	ldr	r3, [pc, #100]	@ (800c824 <LmHandlerConfigure+0x254>)
 800c7be:	789b      	ldrb	r3, [r3, #2]
 800c7c0:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c7c2:	f107 0318 	add.w	r3, r7, #24
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	f005 fb10 	bl	8011dec <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_RXB_C_TIMEOUT;
 800c7cc:	2338      	movs	r3, #56	@ 0x38
 800c7ce:	763b      	strb	r3, [r7, #24]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 800c7d0:	4b14      	ldr	r3, [pc, #80]	@ (800c824 <LmHandlerConfigure+0x254>)
 800c7d2:	691b      	ldr	r3, [r3, #16]
 800c7d4:	61fb      	str	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c7d6:	f107 0318 	add.w	r3, r7, #24
 800c7da:	4618      	mov	r0, r3
 800c7dc:	f005 fb06 	bl	8011dec <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800c7e0:	230f      	movs	r3, #15
 800c7e2:	743b      	strb	r3, [r7, #16]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800c7e4:	4b0f      	ldr	r3, [pc, #60]	@ (800c824 <LmHandlerConfigure+0x254>)
 800c7e6:	781b      	ldrb	r3, [r3, #0]
 800c7e8:	f107 0210 	add.w	r2, r7, #16
 800c7ec:	4611      	mov	r1, r2
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	f008 f9b0 	bl	8014b54 <RegionGetPhyParam>
 800c7f4:	4603      	mov	r3, r0
 800c7f6:	60fb      	str	r3, [r7, #12]
    LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	bf14      	ite	ne
 800c7fe:	2301      	movne	r3, #1
 800c800:	2300      	moveq	r3, #0
 800c802:	b2da      	uxtb	r2, r3
 800c804:	4b07      	ldr	r3, [pc, #28]	@ (800c824 <LmHandlerConfigure+0x254>)
 800c806:	719a      	strb	r2, [r3, #6]

    // Set system maximum tolerated rx error in milliseconds
    LmHandlerSetSystemMaxRxError( 20 );
 800c808:	2014      	movs	r0, #20
 800c80a:	f000 fab9 	bl	800cd80 <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800c80e:	4b05      	ldr	r3, [pc, #20]	@ (800c824 <LmHandlerConfigure+0x254>)
 800c810:	799b      	ldrb	r3, [r3, #6]
 800c812:	4618      	mov	r0, r3
 800c814:	f006 f918 	bl	8012a48 <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800c818:	2300      	movs	r3, #0
}
 800c81a:	4618      	mov	r0, r3
 800c81c:	3740      	adds	r7, #64	@ 0x40
 800c81e:	46bd      	mov	sp, r7
 800c820:	bd80      	pop	{r7, pc}
 800c822:	bf00      	nop
 800c824:	20000748 	.word	0x20000748
 800c828:	20000788 	.word	0x20000788
 800c82c:	0801ee14 	.word	0x0801ee14
 800c830:	20000770 	.word	0x20000770
 800c834:	20000760 	.word	0x20000760
 800c838:	2000087e 	.word	0x2000087e
 800c83c:	2000075c 	.word	0x2000075c
 800c840:	20000078 	.word	0x20000078
 800c844:	20000080 	.word	0x20000080
 800c848:	2000008f 	.word	0x2000008f
 800c84c:	2000008e 	.word	0x2000008e
 800c850:	2000008d 	.word	0x2000008d
 800c854:	2000008c 	.word	0x2000008c
 800c858:	0801ee60 	.word	0x0801ee60

0800c85c <LmHandlerProcess>:

    return false;
}

void LmHandlerProcess( void )
{
 800c85c:	b580      	push	{r7, lr}
 800c85e:	b082      	sub	sp, #8
 800c860:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    // Processes the LoRaMac events
    LoRaMacProcess( );
 800c862:	f002 fd45 	bl	800f2f0 <LoRaMacProcess>

    // Call all packages process functions
    LmHandlerPackagesProcess( );
 800c866:	f000 fd3b 	bl	800d2e0 <LmHandlerPackagesProcess>

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Check if a package transmission is pending.
    // If it is the case exit function earlier
    if( LmHandlerPackageIsTxPending( ) == true )
 800c86a:	f000 fd0f 	bl	800d28c <LmHandlerPackageIsTxPending>
 800c86e:	4603      	mov	r3, r0
 800c870:	2b00      	cmp	r3, #0
 800c872:	d117      	bne.n	800c8a4 <LmHandlerProcess+0x48>
    {
        return;
    }

    // If a MAC layer scheduled uplink is still pending try to send it.
    if( IsUplinkTxPending == true )
 800c874:	4b0d      	ldr	r3, [pc, #52]	@ (800c8ac <LmHandlerProcess+0x50>)
 800c876:	781b      	ldrb	r3, [r3, #0]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d014      	beq.n	800c8a6 <LmHandlerProcess+0x4a>
    {
        // Send an empty message
        LmHandlerAppData_t appData =
 800c87c:	2300      	movs	r3, #0
 800c87e:	703b      	strb	r3, [r7, #0]
 800c880:	2300      	movs	r3, #0
 800c882:	707b      	strb	r3, [r7, #1]
 800c884:	2300      	movs	r3, #0
 800c886:	607b      	str	r3, [r7, #4]
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0,
        };

        if( LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false ) == LORAMAC_HANDLER_SUCCESS )
 800c888:	4b09      	ldr	r3, [pc, #36]	@ (800c8b0 <LmHandlerProcess+0x54>)
 800c88a:	78d9      	ldrb	r1, [r3, #3]
 800c88c:	463b      	mov	r3, r7
 800c88e:	2200      	movs	r2, #0
 800c890:	4618      	mov	r0, r3
 800c892:	f000 f8b7 	bl	800ca04 <LmHandlerSend>
 800c896:	4603      	mov	r3, r0
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d104      	bne.n	800c8a6 <LmHandlerProcess+0x4a>
        {
            IsUplinkTxPending = false;
 800c89c:	4b03      	ldr	r3, [pc, #12]	@ (800c8ac <LmHandlerProcess+0x50>)
 800c89e:	2200      	movs	r2, #0
 800c8a0:	701a      	strb	r2, [r3, #0]
 800c8a2:	e000      	b.n	800c8a6 <LmHandlerProcess+0x4a>
        return;
 800c8a4:	bf00      	nop
        }
    }
#endif /* LORAMAC_VERSION */
}
 800c8a6:	3708      	adds	r7, #8
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	bd80      	pop	{r7, pc}
 800c8ac:	20000788 	.word	0x20000788
 800c8b0:	20000748 	.word	0x20000748

0800c8b4 <LmHandlerGetDutyCycleWaitTime>:

TimerTime_t LmHandlerGetDutyCycleWaitTime( void )
{
 800c8b4:	b480      	push	{r7}
 800c8b6:	af00      	add	r7, sp, #0
    return DutyCycleWaitTime;
 800c8b8:	4b02      	ldr	r3, [pc, #8]	@ (800c8c4 <LmHandlerGetDutyCycleWaitTime+0x10>)
 800c8ba:	681b      	ldr	r3, [r3, #0]
}
 800c8bc:	4618      	mov	r0, r3
 800c8be:	46bd      	mov	sp, r7
 800c8c0:	bc80      	pop	{r7}
 800c8c2:	4770      	bx	lr
 800c8c4:	20000784 	.word	0x20000784

0800c8c8 <LmHandlerJoin>:

void LmHandlerJoin( ActivationType_t mode, bool forceRejoin )
{
 800c8c8:	b580      	push	{r7, lr}
 800c8ca:	b090      	sub	sp, #64	@ 0x40
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	4603      	mov	r3, r0
 800c8d0:	460a      	mov	r2, r1
 800c8d2:	71fb      	strb	r3, [r7, #7]
 800c8d4:	4613      	mov	r3, r2
 800c8d6:	71bb      	strb	r3, [r7, #6]
#endif /* ACTIVATION_BY_PERSONALIZATION */
#endif /* LORAWAN_KMS */

    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_JOIN;
 800c8d8:	2301      	movs	r3, #1
 800c8da:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800c8de:	4b36      	ldr	r3, [pc, #216]	@ (800c9b8 <LmHandlerJoin+0xf0>)
 800c8e0:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800c8e4:	b2db      	uxtb	r3, r3
 800c8e6:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31

    if ( mode == ACTIVATION_TYPE_OTAA )
 800c8ea:	79fb      	ldrb	r3, [r7, #7]
 800c8ec:	2b02      	cmp	r3, #2
 800c8ee:	d10b      	bne.n	800c908 <LmHandlerJoin+0x40>
    {
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800c8f0:	2302      	movs	r3, #2
 800c8f2:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800c8f6:	4b31      	ldr	r3, [pc, #196]	@ (800c9bc <LmHandlerJoin+0xf4>)
 800c8f8:	2202      	movs	r2, #2
 800c8fa:	719a      	strb	r2, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 800c8fc:	4a2f      	ldr	r2, [pc, #188]	@ (800c9bc <LmHandlerJoin+0xf4>)
 800c8fe:	79bb      	ldrb	r3, [r7, #6]
 800c900:	71d3      	strb	r3, [r2, #7]
        LoRaMacStart();
 800c902:	f004 ffdb 	bl	80118bc <LoRaMacStart>
 800c906:	e041      	b.n	800c98c <LmHandlerJoin+0xc4>
    }
    else
    {
        MibRequestConfirm_t mibReq;

        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 800c908:	2301      	movs	r3, #1
 800c90a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800c90e:	4b2b      	ldr	r3, [pc, #172]	@ (800c9bc <LmHandlerJoin+0xf4>)
 800c910:	2201      	movs	r2, #1
 800c912:	719a      	strb	r2, [r3, #6]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800c914:	4b28      	ldr	r3, [pc, #160]	@ (800c9b8 <LmHandlerJoin+0xf0>)
 800c916:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800c91a:	4b28      	ldr	r3, [pc, #160]	@ (800c9bc <LmHandlerJoin+0xf4>)
 800c91c:	711a      	strb	r2, [r3, #4]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800c91e:	4b27      	ldr	r3, [pc, #156]	@ (800c9bc <LmHandlerJoin+0xf4>)
 800c920:	2200      	movs	r2, #0
 800c922:	715a      	strb	r2, [r3, #5]
        JoinParams.forceRejoin = forceRejoin;
 800c924:	4a25      	ldr	r2, [pc, #148]	@ (800c9bc <LmHandlerJoin+0xf4>)
 800c926:	79bb      	ldrb	r3, [r7, #6]
 800c928:	71d3      	strb	r3, [r2, #7]

        if (CtxRestoreDone == false)
 800c92a:	4b25      	ldr	r3, [pc, #148]	@ (800c9c0 <LmHandlerJoin+0xf8>)
 800c92c:	781b      	ldrb	r3, [r3, #0]
 800c92e:	f083 0301 	eor.w	r3, r3, #1
 800c932:	b2db      	uxtb	r3, r3
 800c934:	2b00      	cmp	r3, #0
 800c936:	d01e      	beq.n	800c976 <LmHandlerJoin+0xae>
        {
            // Configure the default datarate
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 800c938:	231f      	movs	r3, #31
 800c93a:	723b      	strb	r3, [r7, #8]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 800c93c:	4b1e      	ldr	r3, [pc, #120]	@ (800c9b8 <LmHandlerJoin+0xf0>)
 800c93e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800c942:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800c944:	f107 0308 	add.w	r3, r7, #8
 800c948:	4618      	mov	r0, r3
 800c94a:	f005 fa4f 	bl	8011dec <LoRaMacMibSetRequestConfirm>

            mibReq.Type = MIB_CHANNELS_DATARATE;
 800c94e:	2320      	movs	r3, #32
 800c950:	723b      	strb	r3, [r7, #8]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 800c952:	4b19      	ldr	r3, [pc, #100]	@ (800c9b8 <LmHandlerJoin+0xf0>)
 800c954:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800c958:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800c95a:	f107 0308 	add.w	r3, r7, #8
 800c95e:	4618      	mov	r0, r3
 800c960:	f005 fa44 	bl	8011dec <LoRaMacMibSetRequestConfirm>

            /* Tell the MAC layer which network server version are we connecting too. */
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800c964:	2329      	movs	r3, #41	@ 0x29
 800c966:	723b      	strb	r3, [r7, #8]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800c968:	4b16      	ldr	r3, [pc, #88]	@ (800c9c4 <LmHandlerJoin+0xfc>)
 800c96a:	60fb      	str	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm(&mibReq);
 800c96c:	f107 0308 	add.w	r3, r7, #8
 800c970:	4618      	mov	r0, r3
 800c972:	f005 fa3b 	bl	8011dec <LoRaMacMibSetRequestConfirm>
#endif /* USE_LRWAN_1_1_X_CRYPTO */
            SecureElementSetObjHandler(APP_S_KEY, KMS_APP_S_KEY_OBJECT_HANDLE);
#endif  /* LORAWAN_KMS == 1 */
        }

        LoRaMacStart();
 800c976:	f004 ffa1 	bl	80118bc <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800c97a:	2301      	movs	r3, #1
 800c97c:	723b      	strb	r3, [r7, #8]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800c97e:	2301      	movs	r3, #1
 800c980:	733b      	strb	r3, [r7, #12]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800c982:	f107 0308 	add.w	r3, r7, #8
 800c986:	4618      	mov	r0, r3
 800c988:	f005 fa30 	bl	8011dec <LoRaMacMibSetRequestConfirm>
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
#endif
    }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if ((CtxRestoreDone == false) || (forceRejoin == true))
 800c98c:	4b0c      	ldr	r3, [pc, #48]	@ (800c9c0 <LmHandlerJoin+0xf8>)
 800c98e:	781b      	ldrb	r3, [r3, #0]
 800c990:	f083 0301 	eor.w	r3, r3, #1
 800c994:	b2db      	uxtb	r3, r3
 800c996:	2b00      	cmp	r3, #0
 800c998:	d102      	bne.n	800c9a0 <LmHandlerJoin+0xd8>
 800c99a:	79bb      	ldrb	r3, [r7, #6]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d004      	beq.n	800c9aa <LmHandlerJoin+0xe2>
    {
        // Starts the join procedure
        LoRaMacMlmeRequest( &mlmeReq );
 800c9a0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800c9a4:	4618      	mov	r0, r3
 800c9a6:	f005 fd91 	bl	80124cc <LoRaMacMlmeRequest>
    }
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800c9aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c9ac:	4a06      	ldr	r2, [pc, #24]	@ (800c9c8 <LmHandlerJoin+0x100>)
 800c9ae:	6013      	str	r3, [r2, #0]
#endif /* LORAMAC_VERSION */
}
 800c9b0:	bf00      	nop
 800c9b2:	3740      	adds	r7, #64	@ 0x40
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	bd80      	pop	{r7, pc}
 800c9b8:	20000748 	.word	0x20000748
 800c9bc:	20000090 	.word	0x20000090
 800c9c0:	2000087e 	.word	0x2000087e
 800c9c4:	01000400 	.word	0x01000400
 800c9c8:	20000784 	.word	0x20000784

0800c9cc <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 800c9cc:	b580      	push	{r7, lr}
 800c9ce:	b08a      	sub	sp, #40	@ 0x28
 800c9d0:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800c9d2:	2301      	movs	r3, #1
 800c9d4:	703b      	strb	r3, [r7, #0]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800c9d6:	463b      	mov	r3, r7
 800c9d8:	4618      	mov	r0, r3
 800c9da:	f005 f861 	bl	8011aa0 <LoRaMacMibGetRequestConfirm>
 800c9de:	4603      	mov	r3, r0
 800c9e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if( status == LORAMAC_STATUS_OK )
 800c9e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d106      	bne.n	800c9fa <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800c9ec:	793b      	ldrb	r3, [r7, #4]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d101      	bne.n	800c9f6 <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 800c9f2:	2300      	movs	r3, #0
 800c9f4:	e002      	b.n	800c9fc <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 800c9f6:	2301      	movs	r3, #1
 800c9f8:	e000      	b.n	800c9fc <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 800c9fa:	2300      	movs	r3, #0
    }
}
 800c9fc:	4618      	mov	r0, r3
 800c9fe:	3728      	adds	r7, #40	@ 0x28
 800ca00:	46bd      	mov	sp, r7
 800ca02:	bd80      	pop	{r7, pc}

0800ca04 <LmHandlerSend>:

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed, bool allowDelayedTx )
{
 800ca04:	b580      	push	{r7, lr}
 800ca06:	b08a      	sub	sp, #40	@ 0x28
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]
 800ca0c:	460b      	mov	r3, r1
 800ca0e:	70fb      	strb	r3, [r7, #3]
 800ca10:	4613      	mov	r3, r2
 800ca12:	70bb      	strb	r3, [r7, #2]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800ca14:	23ff      	movs	r3, #255	@ 0xff
 800ca16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if (LoRaMacIsBusy() == true)
 800ca1a:	f002 f9c9 	bl	800edb0 <LoRaMacIsBusy>
 800ca1e:	4603      	mov	r3, r0
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d002      	beq.n	800ca2a <LmHandlerSend+0x26>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800ca24:	f06f 0301 	mvn.w	r3, #1
 800ca28:	e0a3      	b.n	800cb72 <LmHandlerSend+0x16e>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800ca2a:	f7ff ffcf 	bl	800c9cc <LmHandlerJoinStatus>
 800ca2e:	4603      	mov	r3, r0
 800ca30:	2b01      	cmp	r3, #1
 800ca32:	d00a      	beq.n	800ca4a <LmHandlerSend+0x46>
    {
        // The network isn't joined, try again.
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800ca34:	4b51      	ldr	r3, [pc, #324]	@ (800cb7c <LmHandlerSend+0x178>)
 800ca36:	799b      	ldrb	r3, [r3, #6]
 800ca38:	4a50      	ldr	r2, [pc, #320]	@ (800cb7c <LmHandlerSend+0x178>)
 800ca3a:	79d2      	ldrb	r2, [r2, #7]
 800ca3c:	4611      	mov	r1, r2
 800ca3e:	4618      	mov	r0, r3
 800ca40:	f7ff ff42 	bl	800c8c8 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800ca44:	f06f 0302 	mvn.w	r3, #2
 800ca48:	e093      	b.n	800cb72 <LmHandlerSend+0x16e>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
    }
#endif /* LORAMAC_VERSION */

    TxParams.MsgType = isTxConfirmed;
 800ca4a:	4a4d      	ldr	r2, [pc, #308]	@ (800cb80 <LmHandlerSend+0x17c>)
 800ca4c:	78fb      	ldrb	r3, [r7, #3]
 800ca4e:	7213      	strb	r3, [r2, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 800ca50:	78fb      	ldrb	r3, [r7, #3]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	bf14      	ite	ne
 800ca56:	2301      	movne	r3, #1
 800ca58:	2300      	moveq	r3, #0
 800ca5a:	b2db      	uxtb	r3, r3
 800ca5c:	743b      	strb	r3, [r7, #16]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800ca5e:	4b49      	ldr	r3, [pc, #292]	@ (800cb84 <LmHandlerSend+0x180>)
 800ca60:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800ca64:	77bb      	strb	r3, [r7, #30]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	785b      	ldrb	r3, [r3, #1]
 800ca6a:	f107 020c 	add.w	r2, r7, #12
 800ca6e:	4611      	mov	r1, r2
 800ca70:	4618      	mov	r0, r3
 800ca72:	f004 ff85 	bl	8011980 <LoRaMacQueryTxPossible>
 800ca76:	4603      	mov	r3, r0
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d009      	beq.n	800ca90 <LmHandlerSend+0x8c>
    {
        // Send empty frame in order to flush MAC commands
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800ca7c:	2300      	movs	r3, #0
 800ca7e:	743b      	strb	r3, [r7, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800ca80:	2300      	movs	r3, #0
 800ca82:	61bb      	str	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800ca84:	2300      	movs	r3, #0
 800ca86:	83bb      	strh	r3, [r7, #28]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 800ca88:	23f9      	movs	r3, #249	@ 0xf9
 800ca8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ca8e:	e008      	b.n	800caa2 <LmHandlerSend+0x9e>
    }
    else
    {
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	781b      	ldrb	r3, [r3, #0]
 800ca94:	753b      	strb	r3, [r7, #20]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	785b      	ldrb	r3, [r3, #1]
 800ca9a:	83bb      	strh	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	685b      	ldr	r3, [r3, #4]
 800caa0:	61bb      	str	r3, [r7, #24]
    }

    TxParams.AppData = *appData;
 800caa2:	4b37      	ldr	r3, [pc, #220]	@ (800cb80 <LmHandlerSend+0x17c>)
 800caa4:	687a      	ldr	r2, [r7, #4]
 800caa6:	3310      	adds	r3, #16
 800caa8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800caac:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800cab0:	4b34      	ldr	r3, [pc, #208]	@ (800cb84 <LmHandlerSend+0x180>)
 800cab2:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800cab6:	4b32      	ldr	r3, [pc, #200]	@ (800cb80 <LmHandlerSend+0x17c>)
 800cab8:	729a      	strb	r2, [r3, #10]

    status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 800caba:	78ba      	ldrb	r2, [r7, #2]
 800cabc:	f107 0310 	add.w	r3, r7, #16
 800cac0:	4611      	mov	r1, r2
 800cac2:	4618      	mov	r0, r3
 800cac4:	f005 fe88 	bl	80127d8 <LoRaMacMcpsRequest>
 800cac8:	4603      	mov	r3, r0
 800caca:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800cace:	6a3b      	ldr	r3, [r7, #32]
 800cad0:	4a2d      	ldr	r2, [pc, #180]	@ (800cb88 <LmHandlerSend+0x184>)
 800cad2:	6013      	str	r3, [r2, #0]

    switch (status)
 800cad4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cad8:	2b11      	cmp	r3, #17
 800cada:	d843      	bhi.n	800cb64 <LmHandlerSend+0x160>
 800cadc:	a201      	add	r2, pc, #4	@ (adr r2, 800cae4 <LmHandlerSend+0xe0>)
 800cade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cae2:	bf00      	nop
 800cae4:	0800cb2d 	.word	0x0800cb2d
 800cae8:	0800cb45 	.word	0x0800cb45
 800caec:	0800cb65 	.word	0x0800cb65
 800caf0:	0800cb65 	.word	0x0800cb65
 800caf4:	0800cb65 	.word	0x0800cb65
 800caf8:	0800cb65 	.word	0x0800cb65
 800cafc:	0800cb65 	.word	0x0800cb65
 800cb00:	0800cb4d 	.word	0x0800cb4d
 800cb04:	0800cb65 	.word	0x0800cb65
 800cb08:	0800cb65 	.word	0x0800cb65
 800cb0c:	0800cb65 	.word	0x0800cb65
 800cb10:	0800cb5d 	.word	0x0800cb5d
 800cb14:	0800cb65 	.word	0x0800cb65
 800cb18:	0800cb65 	.word	0x0800cb65
 800cb1c:	0800cb45 	.word	0x0800cb45
 800cb20:	0800cb45 	.word	0x0800cb45
 800cb24:	0800cb45 	.word	0x0800cb45
 800cb28:	0800cb55 	.word	0x0800cb55
    {
        case LORAMAC_STATUS_OK:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            IsUplinkTxPending = false;
 800cb2c:	4b17      	ldr	r3, [pc, #92]	@ (800cb8c <LmHandlerSend+0x188>)
 800cb2e:	2200      	movs	r2, #0
 800cb30:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */
            if (lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED)
 800cb32:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800cb36:	f113 0f07 	cmn.w	r3, #7
 800cb3a:	d017      	beq.n	800cb6c <LmHandlerSend+0x168>
            {
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800cb3c:	2300      	movs	r3, #0
 800cb3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 800cb42:	e013      	b.n	800cb6c <LmHandlerSend+0x168>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800cb44:	23fe      	movs	r3, #254	@ 0xfe
 800cb46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800cb4a:	e010      	b.n	800cb6e <LmHandlerSend+0x16a>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800cb4c:	23fd      	movs	r3, #253	@ 0xfd
 800cb4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800cb52:	e00c      	b.n	800cb6e <LmHandlerSend+0x16a>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800cb54:	23fb      	movs	r3, #251	@ 0xfb
 800cb56:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800cb5a:	e008      	b.n	800cb6e <LmHandlerSend+0x16a>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800cb5c:	23fa      	movs	r3, #250	@ 0xfa
 800cb5e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800cb62:	e004      	b.n	800cb6e <LmHandlerSend+0x16a>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800cb64:	23ff      	movs	r3, #255	@ 0xff
 800cb66:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800cb6a:	e000      	b.n	800cb6e <LmHandlerSend+0x16a>
            break;
 800cb6c:	bf00      	nop
    }

    return lmhStatus;
 800cb6e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800cb72:	4618      	mov	r0, r3
 800cb74:	3728      	adds	r7, #40	@ 0x28
 800cb76:	46bd      	mov	sp, r7
 800cb78:	bd80      	pop	{r7, pc}
 800cb7a:	bf00      	nop
 800cb7c:	20000090 	.word	0x20000090
 800cb80:	20000098 	.word	0x20000098
 800cb84:	20000748 	.word	0x20000748
 800cb88:	20000784 	.word	0x20000784
 800cb8c:	20000788 	.word	0x20000788

0800cb90 <LmHandlerDeviceTimeReq>:

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 800cb90:	b580      	push	{r7, lr}
 800cb92:	b086      	sub	sp, #24
 800cb94:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 800cb96:	2309      	movs	r3, #9
 800cb98:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800cb9a:	463b      	mov	r3, r7
 800cb9c:	4618      	mov	r0, r3
 800cb9e:	f005 fc95 	bl	80124cc <LoRaMacMlmeRequest>
 800cba2:	4603      	mov	r3, r0
 800cba4:	75fb      	strb	r3, [r7, #23]
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800cba6:	693b      	ldr	r3, [r7, #16]
 800cba8:	4a06      	ldr	r2, [pc, #24]	@ (800cbc4 <LmHandlerDeviceTimeReq+0x34>)
 800cbaa:	6013      	str	r3, [r2, #0]

    if( status == LORAMAC_STATUS_OK )
 800cbac:	7dfb      	ldrb	r3, [r7, #23]
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d101      	bne.n	800cbb6 <LmHandlerDeviceTimeReq+0x26>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	e001      	b.n	800cbba <LmHandlerDeviceTimeReq+0x2a>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800cbb6:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800cbba:	4618      	mov	r0, r3
 800cbbc:	3718      	adds	r7, #24
 800cbbe:	46bd      	mov	sp, r7
 800cbc0:	bd80      	pop	{r7, pc}
 800cbc2:	bf00      	nop
 800cbc4:	20000784 	.word	0x20000784

0800cbc8 <LmHandlerPingSlotReq>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerPingSlotReq( uint8_t periodicity )
{
 800cbc8:	b480      	push	{r7}
 800cbca:	b083      	sub	sp, #12
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	4603      	mov	r3, r0
 800cbd0:	71fb      	strb	r3, [r7, #7]
        return LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false );
    }
    else
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    {
        return LORAMAC_HANDLER_ERROR;
 800cbd2:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	370c      	adds	r7, #12
 800cbda:	46bd      	mov	sp, r7
 800cbdc:	bc80      	pop	{r7}
 800cbde:	4770      	bx	lr

0800cbe0 <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	b08c      	sub	sp, #48	@ 0x30
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	4603      	mov	r3, r0
 800cbe8:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800cbea:	2300      	movs	r3, #0
 800cbec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    if (LoRaMacIsBusy() == true)
 800cbf0:	f002 f8de 	bl	800edb0 <LoRaMacIsBusy>
 800cbf4:	4603      	mov	r3, r0
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d002      	beq.n	800cc00 <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800cbfa:	f06f 0301 	mvn.w	r3, #1
 800cbfe:	e071      	b.n	800cce4 <LmHandlerRequestClass+0x104>
    }

    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 800cc00:	f7ff fee4 	bl	800c9cc <LmHandlerJoinStatus>
 800cc04:	4603      	mov	r3, r0
 800cc06:	2b01      	cmp	r3, #1
 800cc08:	d002      	beq.n	800cc10 <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800cc0a:	f06f 0302 	mvn.w	r3, #2
 800cc0e:	e069      	b.n	800cce4 <LmHandlerRequestClass+0x104>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800cc10:	2300      	movs	r3, #0
 800cc12:	723b      	strb	r3, [r7, #8]
    if ( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800cc14:	f107 0308 	add.w	r3, r7, #8
 800cc18:	4618      	mov	r0, r3
 800cc1a:	f004 ff41 	bl	8011aa0 <LoRaMacMibGetRequestConfirm>
 800cc1e:	4603      	mov	r3, r0
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d002      	beq.n	800cc2a <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 800cc24:	f04f 33ff 	mov.w	r3, #4294967295
 800cc28:	e05c      	b.n	800cce4 <LmHandlerRequestClass+0x104>
    }
    currentClass = mibReq.Param.Class;
 800cc2a:	7b3b      	ldrb	r3, [r7, #12]
 800cc2c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

    // Attempt to switch only if class update
    if( currentClass != newClass )
 800cc30:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 800cc34:	79fb      	ldrb	r3, [r7, #7]
 800cc36:	429a      	cmp	r2, r3
 800cc38:	d052      	beq.n	800cce0 <LmHandlerRequestClass+0x100>
    {
        switch( newClass )
 800cc3a:	79fb      	ldrb	r3, [r7, #7]
 800cc3c:	2b02      	cmp	r3, #2
 800cc3e:	d028      	beq.n	800cc92 <LmHandlerRequestClass+0xb2>
 800cc40:	2b02      	cmp	r3, #2
 800cc42:	dc48      	bgt.n	800ccd6 <LmHandlerRequestClass+0xf6>
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d002      	beq.n	800cc4e <LmHandlerRequestClass+0x6e>
 800cc48:	2b01      	cmp	r3, #1
 800cc4a:	d01e      	beq.n	800cc8a <LmHandlerRequestClass+0xaa>
                    }
                }
            }
            break;
        default:
            break;
 800cc4c:	e043      	b.n	800ccd6 <LmHandlerRequestClass+0xf6>
                if( currentClass != CLASS_A )
 800cc4e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d041      	beq.n	800ccda <LmHandlerRequestClass+0xfa>
                    mibReq.Param.Class = newClass;
 800cc56:	79fb      	ldrb	r3, [r7, #7]
 800cc58:	733b      	strb	r3, [r7, #12]
                    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800cc5a:	f107 0308 	add.w	r3, r7, #8
 800cc5e:	4618      	mov	r0, r3
 800cc60:	f005 f8c4 	bl	8011dec <LoRaMacMibSetRequestConfirm>
 800cc64:	4603      	mov	r3, r0
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d10b      	bne.n	800cc82 <LmHandlerRequestClass+0xa2>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800cc6a:	4b20      	ldr	r3, [pc, #128]	@ (800ccec <LmHandlerRequestClass+0x10c>)
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d032      	beq.n	800ccda <LmHandlerRequestClass+0xfa>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800cc74:	4b1d      	ldr	r3, [pc, #116]	@ (800ccec <LmHandlerRequestClass+0x10c>)
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cc7a:	79fa      	ldrb	r2, [r7, #7]
 800cc7c:	4610      	mov	r0, r2
 800cc7e:	4798      	blx	r3
            break;
 800cc80:	e02b      	b.n	800ccda <LmHandlerRequestClass+0xfa>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800cc82:	23ff      	movs	r3, #255	@ 0xff
 800cc84:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            break;
 800cc88:	e027      	b.n	800ccda <LmHandlerRequestClass+0xfa>
                errorStatus = LORAMAC_HANDLER_ERROR;
 800cc8a:	23ff      	movs	r3, #255	@ 0xff
 800cc8c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            break;
 800cc90:	e026      	b.n	800cce0 <LmHandlerRequestClass+0x100>
                if( currentClass != CLASS_A )
 800cc92:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d003      	beq.n	800cca2 <LmHandlerRequestClass+0xc2>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800cc9a:	23ff      	movs	r3, #255	@ 0xff
 800cc9c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            break;
 800cca0:	e01d      	b.n	800ccde <LmHandlerRequestClass+0xfe>
                    mibReq.Param.Class = newClass;
 800cca2:	79fb      	ldrb	r3, [r7, #7]
 800cca4:	733b      	strb	r3, [r7, #12]
                    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800cca6:	f107 0308 	add.w	r3, r7, #8
 800ccaa:	4618      	mov	r0, r3
 800ccac:	f005 f89e 	bl	8011dec <LoRaMacMibSetRequestConfirm>
 800ccb0:	4603      	mov	r3, r0
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d10b      	bne.n	800ccce <LmHandlerRequestClass+0xee>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800ccb6:	4b0d      	ldr	r3, [pc, #52]	@ (800ccec <LmHandlerRequestClass+0x10c>)
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d00e      	beq.n	800ccde <LmHandlerRequestClass+0xfe>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800ccc0:	4b0a      	ldr	r3, [pc, #40]	@ (800ccec <LmHandlerRequestClass+0x10c>)
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ccc6:	79fa      	ldrb	r2, [r7, #7]
 800ccc8:	4610      	mov	r0, r2
 800ccca:	4798      	blx	r3
            break;
 800cccc:	e007      	b.n	800ccde <LmHandlerRequestClass+0xfe>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800ccce:	23ff      	movs	r3, #255	@ 0xff
 800ccd0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            break;
 800ccd4:	e003      	b.n	800ccde <LmHandlerRequestClass+0xfe>
            break;
 800ccd6:	bf00      	nop
 800ccd8:	e002      	b.n	800cce0 <LmHandlerRequestClass+0x100>
            break;
 800ccda:	bf00      	nop
 800ccdc:	e000      	b.n	800cce0 <LmHandlerRequestClass+0x100>
            break;
 800ccde:	bf00      	nop
        }
    }
    return errorStatus;
 800cce0:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800cce4:	4618      	mov	r0, r3
 800cce6:	3730      	adds	r7, #48	@ 0x30
 800cce8:	46bd      	mov	sp, r7
 800ccea:	bd80      	pop	{r7, pc}
 800ccec:	2000075c 	.word	0x2000075c

0800ccf0 <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 800ccf0:	b580      	push	{r7, lr}
 800ccf2:	b08c      	sub	sp, #48	@ 0x30
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if (deviceClass == NULL)
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d102      	bne.n	800cd04 <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800ccfe:	f04f 33ff 	mov.w	r3, #4294967295
 800cd02:	e010      	b.n	800cd26 <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800cd04:	2300      	movs	r3, #0
 800cd06:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK)
 800cd08:	f107 030c 	add.w	r3, r7, #12
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	f004 fec7 	bl	8011aa0 <LoRaMacMibGetRequestConfirm>
 800cd12:	4603      	mov	r3, r0
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d002      	beq.n	800cd1e <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800cd18:	f04f 33ff 	mov.w	r3, #4294967295
 800cd1c:	e003      	b.n	800cd26 <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 800cd1e:	7c3a      	ldrb	r2, [r7, #16]
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800cd24:	2300      	movs	r3, #0
}
 800cd26:	4618      	mov	r0, r3
 800cd28:	3730      	adds	r7, #48	@ 0x30
 800cd2a:	46bd      	mov	sp, r7
 800cd2c:	bd80      	pop	{r7, pc}
	...

0800cd30 <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 800cd30:	b580      	push	{r7, lr}
 800cd32:	b08c      	sub	sp, #48	@ 0x30
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if (txDatarate == NULL)
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d102      	bne.n	800cd44 <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800cd3e:	f04f 33ff 	mov.w	r3, #4294967295
 800cd42:	e016      	b.n	800cd72 <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 800cd44:	2320      	movs	r3, #32
 800cd46:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK)
 800cd48:	f107 030c 	add.w	r3, r7, #12
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	f004 fea7 	bl	8011aa0 <LoRaMacMibGetRequestConfirm>
 800cd52:	4603      	mov	r3, r0
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d002      	beq.n	800cd5e <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800cd58:	f04f 33ff 	mov.w	r3, #4294967295
 800cd5c:	e009      	b.n	800cd72 <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 800cd5e:	f997 2010 	ldrsb.w	r2, [r7, #16]
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	f993 2000 	ldrsb.w	r2, [r3]
 800cd6c:	4b03      	ldr	r3, [pc, #12]	@ (800cd7c <LmHandlerGetTxDatarate+0x4c>)
 800cd6e:	711a      	strb	r2, [r3, #4]
    return LORAMAC_HANDLER_SUCCESS;
 800cd70:	2300      	movs	r3, #0
}
 800cd72:	4618      	mov	r0, r3
 800cd74:	3730      	adds	r7, #48	@ 0x30
 800cd76:	46bd      	mov	sp, r7
 800cd78:	bd80      	pop	{r7, pc}
 800cd7a:	bf00      	nop
 800cd7c:	20000748 	.word	0x20000748

0800cd80 <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 800cd80:	b580      	push	{r7, lr}
 800cd82:	b08c      	sub	sp, #48	@ 0x30
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800cd88:	2323      	movs	r3, #35	@ 0x23
 800cd8a:	733b      	strb	r3, [r7, #12]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	613b      	str	r3, [r7, #16]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800cd90:	f107 030c 	add.w	r3, r7, #12
 800cd94:	4618      	mov	r0, r3
 800cd96:	f005 f829 	bl	8011dec <LoRaMacMibSetRequestConfirm>
 800cd9a:	4603      	mov	r3, r0
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d002      	beq.n	800cda6 <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 800cda0:	f04f 33ff 	mov.w	r3, #4294967295
 800cda4:	e000      	b.n	800cda8 <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 800cda6:	2300      	movs	r3, #0
}
 800cda8:	4618      	mov	r0, r3
 800cdaa:	3730      	adds	r7, #48	@ 0x30
 800cdac:	46bd      	mov	sp, r7
 800cdae:	bd80      	pop	{r7, pc}

0800cdb0 <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b082      	sub	sp, #8
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 800cdb8:	4b15      	ldr	r3, [pc, #84]	@ (800ce10 <McpsConfirm+0x60>)
 800cdba:	2201      	movs	r2, #1
 800cdbc:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	785a      	ldrb	r2, [r3, #1]
 800cdc2:	4b13      	ldr	r3, [pc, #76]	@ (800ce10 <McpsConfirm+0x60>)
 800cdc4:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	789b      	ldrb	r3, [r3, #2]
 800cdca:	b25a      	sxtb	r2, r3
 800cdcc:	4b10      	ldr	r3, [pc, #64]	@ (800ce10 <McpsConfirm+0x60>)
 800cdce:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	68db      	ldr	r3, [r3, #12]
 800cdd4:	4a0e      	ldr	r2, [pc, #56]	@ (800ce10 <McpsConfirm+0x60>)
 800cdd6:	60d3      	str	r3, [r2, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800cdde:	4b0c      	ldr	r3, [pc, #48]	@ (800ce10 <McpsConfirm+0x60>)
 800cde0:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	691b      	ldr	r3, [r3, #16]
 800cde6:	b2da      	uxtb	r2, r3
 800cde8:	4b09      	ldr	r3, [pc, #36]	@ (800ce10 <McpsConfirm+0x60>)
 800cdea:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	791b      	ldrb	r3, [r3, #4]
 800cdf0:	461a      	mov	r2, r3
 800cdf2:	4b07      	ldr	r3, [pc, #28]	@ (800ce10 <McpsConfirm+0x60>)
 800cdf4:	725a      	strb	r2, [r3, #9]

    LmHandlerCallbacks->OnTxData( &TxParams );
 800cdf6:	4b07      	ldr	r3, [pc, #28]	@ (800ce14 <McpsConfirm+0x64>)
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cdfc:	4804      	ldr	r0, [pc, #16]	@ (800ce10 <McpsConfirm+0x60>)
 800cdfe:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800ce00:	6879      	ldr	r1, [r7, #4]
 800ce02:	2000      	movs	r0, #0
 800ce04:	f000 f9c6 	bl	800d194 <LmHandlerPackagesNotify>
}
 800ce08:	bf00      	nop
 800ce0a:	3708      	adds	r7, #8
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	bd80      	pop	{r7, pc}
 800ce10:	20000098 	.word	0x20000098
 800ce14:	2000075c 	.word	0x2000075c

0800ce18 <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *rxStatus )
{
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	b086      	sub	sp, #24
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	6078      	str	r0, [r7, #4]
 800ce20:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 800ce22:	2300      	movs	r3, #0
 800ce24:	73fb      	strb	r3, [r7, #15]
    RxParams.IsMcpsIndication = 1;
 800ce26:	4b2c      	ldr	r3, [pc, #176]	@ (800ced8 <McpsIndication+0xc0>)
 800ce28:	2201      	movs	r2, #1
 800ce2a:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	785a      	ldrb	r2, [r3, #1]
 800ce30:	4b29      	ldr	r3, [pc, #164]	@ (800ced8 <McpsIndication+0xc0>)
 800ce32:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800ce34:	4b28      	ldr	r3, [pc, #160]	@ (800ced8 <McpsIndication+0xc0>)
 800ce36:	785b      	ldrb	r3, [r3, #1]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d149      	bne.n	800ced0 <McpsIndication+0xb8>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	791b      	ldrb	r3, [r3, #4]
 800ce40:	b25a      	sxtb	r2, r3
 800ce42:	4b25      	ldr	r3, [pc, #148]	@ (800ced8 <McpsIndication+0xc0>)
 800ce44:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800ce46:	683b      	ldr	r3, [r7, #0]
 800ce48:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ce4c:	b25a      	sxtb	r2, r3
 800ce4e:	4b22      	ldr	r3, [pc, #136]	@ (800ced8 <McpsIndication+0xc0>)
 800ce50:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800ce52:	683b      	ldr	r3, [r7, #0]
 800ce54:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800ce58:	4b1f      	ldr	r3, [pc, #124]	@ (800ced8 <McpsIndication+0xc0>)
 800ce5a:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800ce5c:	683b      	ldr	r3, [r7, #0]
 800ce5e:	78da      	ldrb	r2, [r3, #3]
 800ce60:	4b1d      	ldr	r3, [pc, #116]	@ (800ced8 <McpsIndication+0xc0>)
 800ce62:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	691b      	ldr	r3, [r3, #16]
 800ce68:	4a1b      	ldr	r2, [pc, #108]	@ (800ced8 <McpsIndication+0xc0>)
 800ce6a:	60d3      	str	r3, [r2, #12]

    appData.Port = mcpsIndication->Port;
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	78db      	ldrb	r3, [r3, #3]
 800ce70:	743b      	strb	r3, [r7, #16]
    appData.BufferSize = mcpsIndication->BufferSize;
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	7b1b      	ldrb	r3, [r3, #12]
 800ce76:	747b      	strb	r3, [r7, #17]
    appData.Buffer = mcpsIndication->Buffer;
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	689b      	ldr	r3, [r3, #8]
 800ce7c:	617b      	str	r3, [r7, #20]

    LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 800ce7e:	4b17      	ldr	r3, [pc, #92]	@ (800cedc <McpsIndication+0xc4>)
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce84:	f107 0210 	add.w	r2, r7, #16
 800ce88:	4913      	ldr	r1, [pc, #76]	@ (800ced8 <McpsIndication+0xc0>)
 800ce8a:	4610      	mov	r0, r2
 800ce8c:	4798      	blx	r3

    if ((LmHandlerCallbacks->OnSysTimeUpdate != NULL) && (mcpsIndication->DeviceTimeAnsReceived == true))
 800ce8e:	4b13      	ldr	r3, [pc, #76]	@ (800cedc <McpsIndication+0xc4>)
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d007      	beq.n	800cea8 <McpsIndication+0x90>
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	7e1b      	ldrb	r3, [r3, #24]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d003      	beq.n	800cea8 <McpsIndication+0x90>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800cea0:	4b0e      	ldr	r3, [pc, #56]	@ (800cedc <McpsIndication+0xc4>)
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cea6:	4798      	blx	r3
    }
    // Call packages RxProcess function
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800cea8:	6879      	ldr	r1, [r7, #4]
 800ceaa:	2001      	movs	r0, #1
 800ceac:	f000 f972 	bl	800d194 <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass( &deviceClass );
 800ceb0:	f107 030f 	add.w	r3, r7, #15
 800ceb4:	4618      	mov	r0, r3
 800ceb6:	f7ff ff1b 	bl	800ccf0 <LmHandlerGetCurrentClass>
            .Port = 0
        };
        LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true);
    }
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if ( ( mcpsIndication->FramePending == true ) && ( deviceClass == CLASS_A ) )
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	795b      	ldrb	r3, [r3, #5]
 800cebe:	2b01      	cmp	r3, #1
 800cec0:	d107      	bne.n	800ced2 <McpsIndication+0xba>
 800cec2:	7bfb      	ldrb	r3, [r7, #15]
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d104      	bne.n	800ced2 <McpsIndication+0xba>
    {
        // The server signals that it has pending data to be sent.
        // We schedule an uplink as soon as possible to flush the server.
        IsUplinkTxPending = true;
 800cec8:	4b05      	ldr	r3, [pc, #20]	@ (800cee0 <McpsIndication+0xc8>)
 800ceca:	2201      	movs	r2, #1
 800cecc:	701a      	strb	r2, [r3, #0]
 800cece:	e000      	b.n	800ced2 <McpsIndication+0xba>
        return;
 800ced0:	bf00      	nop
    }
#endif /* LORAMAC_VERSION */
}
 800ced2:	3718      	adds	r7, #24
 800ced4:	46bd      	mov	sp, r7
 800ced6:	bd80      	pop	{r7, pc}
 800ced8:	200000b4 	.word	0x200000b4
 800cedc:	2000075c 	.word	0x2000075c
 800cee0:	20000788 	.word	0x20000788

0800cee4 <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800cee4:	b580      	push	{r7, lr}
 800cee6:	b08c      	sub	sp, #48	@ 0x30
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 800ceec:	4b3c      	ldr	r3, [pc, #240]	@ (800cfe0 <MlmeConfirm+0xfc>)
 800ceee:	2200      	movs	r2, #0
 800cef0:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	785a      	ldrb	r2, [r3, #1]
 800cef6:	4b3a      	ldr	r3, [pc, #232]	@ (800cfe0 <MlmeConfirm+0xfc>)
 800cef8:	705a      	strb	r2, [r3, #1]
    LmHandlerCallbacks->OnTxData( &TxParams );
 800cefa:	4b3a      	ldr	r3, [pc, #232]	@ (800cfe4 <MlmeConfirm+0x100>)
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf00:	4837      	ldr	r0, [pc, #220]	@ (800cfe0 <MlmeConfirm+0xfc>)
 800cf02:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800cf04:	6879      	ldr	r1, [r7, #4]
 800cf06:	2002      	movs	r0, #2
 800cf08:	f000 f944 	bl	800d194 <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	781b      	ldrb	r3, [r3, #0]
 800cf10:	3b01      	subs	r3, #1
 800cf12:	2b0b      	cmp	r3, #11
 800cf14:	d85c      	bhi.n	800cfd0 <MlmeConfirm+0xec>
 800cf16:	a201      	add	r2, pc, #4	@ (adr r2, 800cf1c <MlmeConfirm+0x38>)
 800cf18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf1c:	0800cf4d 	.word	0x0800cf4d
 800cf20:	0800cfd1 	.word	0x0800cfd1
 800cf24:	0800cfd1 	.word	0x0800cfd1
 800cf28:	0800cf9f 	.word	0x0800cf9f
 800cf2c:	0800cfd1 	.word	0x0800cfd1
 800cf30:	0800cfd1 	.word	0x0800cfd1
 800cf34:	0800cfd1 	.word	0x0800cfd1
 800cf38:	0800cfd1 	.word	0x0800cfd1
 800cf3c:	0800cfd1 	.word	0x0800cfd1
 800cf40:	0800cfd1 	.word	0x0800cfd1
 800cf44:	0800cfb7 	.word	0x0800cfb7
 800cf48:	0800cfd1 	.word	0x0800cfd1
    {
    case MLME_JOIN:
        {
            MibRequestConfirm_t mibReq;
            mibReq.Type = MIB_DEV_ADDR;
 800cf4c:	2306      	movs	r3, #6
 800cf4e:	733b      	strb	r3, [r7, #12]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800cf50:	f107 030c 	add.w	r3, r7, #12
 800cf54:	4618      	mov	r0, r3
 800cf56:	f004 fda3 	bl	8011aa0 <LoRaMacMibGetRequestConfirm>
            CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800cf5a:	693b      	ldr	r3, [r7, #16]
 800cf5c:	4a22      	ldr	r2, [pc, #136]	@ (800cfe8 <MlmeConfirm+0x104>)
 800cf5e:	6153      	str	r3, [r2, #20]
            LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800cf60:	4822      	ldr	r0, [pc, #136]	@ (800cfec <MlmeConfirm+0x108>)
 800cf62:	f7ff fee5 	bl	800cd30 <LmHandlerGetTxDatarate>

            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	785b      	ldrb	r3, [r3, #1]
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d108      	bne.n	800cf80 <MlmeConfirm+0x9c>
            {
                // Status is OK, node has joined the network
                JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800cf6e:	4b20      	ldr	r3, [pc, #128]	@ (800cff0 <MlmeConfirm+0x10c>)
 800cf70:	2200      	movs	r2, #0
 800cf72:	715a      	strb	r2, [r3, #5]
                LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800cf74:	4b1f      	ldr	r3, [pc, #124]	@ (800cff4 <MlmeConfirm+0x110>)
 800cf76:	785b      	ldrb	r3, [r3, #1]
 800cf78:	4618      	mov	r0, r3
 800cf7a:	f7ff fe31 	bl	800cbe0 <LmHandlerRequestClass>
 800cf7e:	e002      	b.n	800cf86 <MlmeConfirm+0xa2>
            }
            else
            {
                // Join was not successful. Try to join again
                JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800cf80:	4b1b      	ldr	r3, [pc, #108]	@ (800cff0 <MlmeConfirm+0x10c>)
 800cf82:	22ff      	movs	r2, #255	@ 0xff
 800cf84:	715a      	strb	r2, [r3, #5]
            }
            // Notify upper layer
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800cf86:	4b17      	ldr	r3, [pc, #92]	@ (800cfe4 <MlmeConfirm+0x100>)
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf8c:	4818      	ldr	r0, [pc, #96]	@ (800cff0 <MlmeConfirm+0x10c>)
 800cf8e:	4798      	blx	r3
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	785b      	ldrb	r3, [r3, #1]
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d11d      	bne.n	800cfd4 <MlmeConfirm+0xf0>
            {
                SecureElementPrintSessionKeys();
 800cf98:	f7ff f896 	bl	800c0c8 <SecureElementPrintSessionKeys>
            }
        }
        break;
 800cf9c:	e01a      	b.n	800cfd4 <MlmeConfirm+0xf0>
    case MLME_LINK_CHECK:
        {
            RxParams.LinkCheck = true;
 800cf9e:	4b16      	ldr	r3, [pc, #88]	@ (800cff8 <MlmeConfirm+0x114>)
 800cfa0:	2201      	movs	r2, #1
 800cfa2:	745a      	strb	r2, [r3, #17]
            RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	7a1a      	ldrb	r2, [r3, #8]
 800cfa8:	4b13      	ldr	r3, [pc, #76]	@ (800cff8 <MlmeConfirm+0x114>)
 800cfaa:	749a      	strb	r2, [r3, #18]
            RxParams.NbGateways = mlmeConfirm->NbGateways;
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	7a5a      	ldrb	r2, [r3, #9]
 800cfb0:	4b11      	ldr	r3, [pc, #68]	@ (800cff8 <MlmeConfirm+0x114>)
 800cfb2:	74da      	strb	r2, [r3, #19]
        }
        break;
 800cfb4:	e00f      	b.n	800cfd6 <MlmeConfirm+0xf2>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
    case MLME_BEACON_ACQUISITION:
        {
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	785b      	ldrb	r3, [r3, #1]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d105      	bne.n	800cfca <MlmeConfirm+0xe6>
            {
                // Beacon has been acquired
                // Request server for ping slot
                LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
 800cfbe:	4b0d      	ldr	r3, [pc, #52]	@ (800cff4 <MlmeConfirm+0x110>)
 800cfc0:	7b1b      	ldrb	r3, [r3, #12]
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	f7ff fe00 	bl	800cbc8 <LmHandlerPingSlotReq>
                // Beacon not acquired
                // Request Device Time again.
                LmHandlerDeviceTimeReq( );
            }
        }
        break;
 800cfc8:	e005      	b.n	800cfd6 <MlmeConfirm+0xf2>
                LmHandlerDeviceTimeReq( );
 800cfca:	f7ff fde1 	bl	800cb90 <LmHandlerDeviceTimeReq>
        break;
 800cfce:	e002      	b.n	800cfd6 <MlmeConfirm+0xf2>
            }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
    default:
        break;
 800cfd0:	bf00      	nop
 800cfd2:	e000      	b.n	800cfd6 <MlmeConfirm+0xf2>
        break;
 800cfd4:	bf00      	nop
    }
}
 800cfd6:	bf00      	nop
 800cfd8:	3730      	adds	r7, #48	@ 0x30
 800cfda:	46bd      	mov	sp, r7
 800cfdc:	bd80      	pop	{r7, pc}
 800cfde:	bf00      	nop
 800cfe0:	20000098 	.word	0x20000098
 800cfe4:	2000075c 	.word	0x2000075c
 800cfe8:	20000078 	.word	0x20000078
 800cfec:	20000094 	.word	0x20000094
 800cff0:	20000090 	.word	0x20000090
 800cff4:	20000748 	.word	0x20000748
 800cff8:	200000b4 	.word	0x200000b4

0800cffc <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *rxStatus )
{
 800cffc:	b580      	push	{r7, lr}
 800cffe:	b082      	sub	sp, #8
 800d000:	af00      	add	r7, sp, #0
 800d002:	6078      	str	r0, [r7, #4]
 800d004:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 800d006:	4b24      	ldr	r3, [pc, #144]	@ (800d098 <MlmeIndication+0x9c>)
 800d008:	2200      	movs	r2, #0
 800d00a:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	785a      	ldrb	r2, [r3, #1]
 800d010:	4b21      	ldr	r3, [pc, #132]	@ (800d098 <MlmeIndication+0x9c>)
 800d012:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	789b      	ldrb	r3, [r3, #2]
 800d018:	b25a      	sxtb	r2, r3
 800d01a:	4b1f      	ldr	r3, [pc, #124]	@ (800d098 <MlmeIndication+0x9c>)
 800d01c:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800d01e:	683b      	ldr	r3, [r7, #0]
 800d020:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d024:	b25a      	sxtb	r2, r3
 800d026:	4b1c      	ldr	r3, [pc, #112]	@ (800d098 <MlmeIndication+0x9c>)
 800d028:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800d02a:	683b      	ldr	r3, [r7, #0]
 800d02c:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800d030:	4b19      	ldr	r3, [pc, #100]	@ (800d098 <MlmeIndication+0x9c>)
 800d032:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800d034:	683b      	ldr	r3, [r7, #0]
 800d036:	78da      	ldrb	r2, [r3, #3]
 800d038:	4b17      	ldr	r3, [pc, #92]	@ (800d098 <MlmeIndication+0x9c>)
 800d03a:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	685b      	ldr	r3, [r3, #4]
 800d040:	4a15      	ldr	r2, [pc, #84]	@ (800d098 <MlmeIndication+0x9c>)
 800d042:	60d3      	str	r3, [r2, #12]
    if ((mlmeIndication->MlmeIndication != MLME_BEACON) && (mlmeIndication->MlmeIndication != MLME_BEACON_LOST))
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	781b      	ldrb	r3, [r3, #0]
 800d048:	2b0a      	cmp	r3, #10
 800d04a:	d009      	beq.n	800d060 <MlmeIndication+0x64>
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	781b      	ldrb	r3, [r3, #0]
 800d050:	2b0e      	cmp	r3, #14
 800d052:	d005      	beq.n	800d060 <MlmeIndication+0x64>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800d054:	4b11      	ldr	r3, [pc, #68]	@ (800d09c <MlmeIndication+0xa0>)
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d05a:	490f      	ldr	r1, [pc, #60]	@ (800d098 <MlmeIndication+0x9c>)
 800d05c:	2000      	movs	r0, #0
 800d05e:	4798      	blx	r3
    }

    // Call packages RxProcess function
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 800d060:	6879      	ldr	r1, [r7, #4]
 800d062:	2003      	movs	r0, #3
 800d064:	f000 f896 	bl	800d194 <LmHandlerPackagesNotify>

    switch( mlmeIndication->MlmeIndication )
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	781b      	ldrb	r3, [r3, #0]
 800d06c:	2b0e      	cmp	r3, #14
 800d06e:	d00a      	beq.n	800d086 <MlmeIndication+0x8a>
 800d070:	2b0e      	cmp	r3, #14
 800d072:	dc0a      	bgt.n	800d08a <MlmeIndication+0x8e>
 800d074:	2b06      	cmp	r3, #6
 800d076:	d002      	beq.n	800d07e <MlmeIndication+0x82>
 800d078:	2b0a      	cmp	r3, #10
 800d07a:	d008      	beq.n	800d08e <MlmeIndication+0x92>
            }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
    default:
        break;
 800d07c:	e005      	b.n	800d08a <MlmeIndication+0x8e>
            IsUplinkTxPending = true;
 800d07e:	4b08      	ldr	r3, [pc, #32]	@ (800d0a0 <MlmeIndication+0xa4>)
 800d080:	2201      	movs	r2, #1
 800d082:	701a      	strb	r2, [r3, #0]
        break;
 800d084:	e004      	b.n	800d090 <MlmeIndication+0x94>
        break;
 800d086:	bf00      	nop
 800d088:	e002      	b.n	800d090 <MlmeIndication+0x94>
        break;
 800d08a:	bf00      	nop
 800d08c:	e000      	b.n	800d090 <MlmeIndication+0x94>
        break;
 800d08e:	bf00      	nop
    }
}
 800d090:	bf00      	nop
 800d092:	3708      	adds	r7, #8
 800d094:	46bd      	mov	sp, r7
 800d096:	bd80      	pop	{r7, pc}
 800d098:	200000b4 	.word	0x200000b4
 800d09c:	2000075c 	.word	0x2000075c
 800d0a0:	20000788 	.word	0x20000788

0800d0a4 <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 800d0a4:	b580      	push	{r7, lr}
 800d0a6:	b084      	sub	sp, #16
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	4603      	mov	r3, r0
 800d0ac:	6039      	str	r1, [r7, #0]
 800d0ae:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 800d0b0:	2300      	movs	r3, #0
 800d0b2:	60fb      	str	r3, [r7, #12]
    switch( id )
 800d0b4:	79fb      	ldrb	r3, [r7, #7]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d103      	bne.n	800d0c2 <LmHandlerPackageRegister+0x1e>
    {
        case PACKAGE_ID_COMPLIANCE:
        {
            package = LmhpCompliancePackageFactory( );
 800d0ba:	f000 fa1d 	bl	800d4f8 <LmhpCompliancePackageFactory>
 800d0be:	60f8      	str	r0, [r7, #12]
            break;
 800d0c0:	e000      	b.n	800d0c4 <LmHandlerPackageRegister+0x20>
        {
#if (!defined (LORAWAN_DATA_DISTRIB_MGT) || (LORAWAN_DATA_DISTRIB_MGT == 0))
#else /*LORAWAN_DATA_DISTRIB_MGT == 1*/
            LmhpPackagesRegister( id, &package );
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
            break;
 800d0c2:	bf00      	nop
        }
    }
    if( package != NULL )
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d035      	beq.n	800d136 <LmHandlerPackageRegister+0x92>
    {
        LmHandlerPackages[id] = package;
 800d0ca:	79fb      	ldrb	r3, [r7, #7]
 800d0cc:	491d      	ldr	r1, [pc, #116]	@ (800d144 <LmHandlerPackageRegister+0xa0>)
 800d0ce:	68fa      	ldr	r2, [r7, #12]
 800d0d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800d0d4:	79fb      	ldrb	r3, [r7, #7]
 800d0d6:	4a1b      	ldr	r2, [pc, #108]	@ (800d144 <LmHandlerPackageRegister+0xa0>)
 800d0d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d0dc:	4a1a      	ldr	r2, [pc, #104]	@ (800d148 <LmHandlerPackageRegister+0xa4>)
 800d0de:	629a      	str	r2, [r3, #40]	@ 0x28
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
 800d0e0:	4b1a      	ldr	r3, [pc, #104]	@ (800d14c <LmHandlerPackageRegister+0xa8>)
 800d0e2:	681a      	ldr	r2, [r3, #0]
 800d0e4:	79fb      	ldrb	r3, [r7, #7]
 800d0e6:	4917      	ldr	r1, [pc, #92]	@ (800d144 <LmHandlerPackageRegister+0xa0>)
 800d0e8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d0ec:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800d0ee:	631a      	str	r2, [r3, #48]	@ 0x30
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
 800d0f0:	4b16      	ldr	r3, [pc, #88]	@ (800d14c <LmHandlerPackageRegister+0xa8>)
 800d0f2:	681a      	ldr	r2, [r3, #0]
 800d0f4:	79fb      	ldrb	r3, [r7, #7]
 800d0f6:	4913      	ldr	r1, [pc, #76]	@ (800d144 <LmHandlerPackageRegister+0xa0>)
 800d0f8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d0fc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800d0fe:	635a      	str	r2, [r3, #52]	@ 0x34
#endif /* LORAMAC_VERSION */
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800d100:	79fb      	ldrb	r3, [r7, #7]
 800d102:	4a10      	ldr	r2, [pc, #64]	@ (800d144 <LmHandlerPackageRegister+0xa0>)
 800d104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d108:	4a11      	ldr	r2, [pc, #68]	@ (800d150 <LmHandlerPackageRegister+0xac>)
 800d10a:	62da      	str	r2, [r3, #44]	@ 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800d10c:	4b0f      	ldr	r3, [pc, #60]	@ (800d14c <LmHandlerPackageRegister+0xa8>)
 800d10e:	681a      	ldr	r2, [r3, #0]
 800d110:	79fb      	ldrb	r3, [r7, #7]
 800d112:	490c      	ldr	r1, [pc, #48]	@ (800d144 <LmHandlerPackageRegister+0xa0>)
 800d114:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d118:	6992      	ldr	r2, [r2, #24]
 800d11a:	615a      	str	r2, [r3, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800d11c:	79fb      	ldrb	r3, [r7, #7]
 800d11e:	4a09      	ldr	r2, [pc, #36]	@ (800d144 <LmHandlerPackageRegister+0xa0>)
 800d120:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d124:	685b      	ldr	r3, [r3, #4]
 800d126:	4a0b      	ldr	r2, [pc, #44]	@ (800d154 <LmHandlerPackageRegister+0xb0>)
 800d128:	6851      	ldr	r1, [r2, #4]
 800d12a:	4a0a      	ldr	r2, [pc, #40]	@ (800d154 <LmHandlerPackageRegister+0xb0>)
 800d12c:	7852      	ldrb	r2, [r2, #1]
 800d12e:	6838      	ldr	r0, [r7, #0]
 800d130:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 800d132:	2300      	movs	r3, #0
 800d134:	e001      	b.n	800d13a <LmHandlerPackageRegister+0x96>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800d136:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800d13a:	4618      	mov	r0, r3
 800d13c:	3710      	adds	r7, #16
 800d13e:	46bd      	mov	sp, r7
 800d140:	bd80      	pop	{r7, pc}
 800d142:	bf00      	nop
 800d144:	20000734 	.word	0x20000734
 800d148:	0800c8c9 	.word	0x0800c8c9
 800d14c:	2000075c 	.word	0x2000075c
 800d150:	0800cb91 	.word	0x0800cb91
 800d154:	200000c8 	.word	0x200000c8

0800d158 <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 800d158:	b580      	push	{r7, lr}
 800d15a:	b082      	sub	sp, #8
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	4603      	mov	r3, r0
 800d160:	71fb      	strb	r3, [r7, #7]
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 800d162:	79fb      	ldrb	r3, [r7, #7]
 800d164:	2b04      	cmp	r3, #4
 800d166:	d80e      	bhi.n	800d186 <LmHandlerPackageIsInitialized+0x2e>
 800d168:	79fb      	ldrb	r3, [r7, #7]
 800d16a:	4a09      	ldr	r2, [pc, #36]	@ (800d190 <LmHandlerPackageIsInitialized+0x38>)
 800d16c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d170:	689b      	ldr	r3, [r3, #8]
 800d172:	2b00      	cmp	r3, #0
 800d174:	d007      	beq.n	800d186 <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 800d176:	79fb      	ldrb	r3, [r7, #7]
 800d178:	4a05      	ldr	r2, [pc, #20]	@ (800d190 <LmHandlerPackageIsInitialized+0x38>)
 800d17a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d17e:	689b      	ldr	r3, [r3, #8]
 800d180:	4798      	blx	r3
 800d182:	4603      	mov	r3, r0
 800d184:	e000      	b.n	800d188 <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 800d186:	2300      	movs	r3, #0
    }
}
 800d188:	4618      	mov	r0, r3
 800d18a:	3708      	adds	r7, #8
 800d18c:	46bd      	mov	sp, r7
 800d18e:	bd80      	pop	{r7, pc}
 800d190:	20000734 	.word	0x20000734

0800d194 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800d194:	b580      	push	{r7, lr}
 800d196:	b084      	sub	sp, #16
 800d198:	af00      	add	r7, sp, #0
 800d19a:	4603      	mov	r3, r0
 800d19c:	6039      	str	r1, [r7, #0]
 800d19e:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	73fb      	strb	r3, [r7, #15]
 800d1a4:	e067      	b.n	800d276 <LmHandlerPackagesNotify+0xe2>
    {
        if( LmHandlerPackages[i] != NULL )
 800d1a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d1aa:	4a37      	ldr	r2, [pc, #220]	@ (800d288 <LmHandlerPackagesNotify+0xf4>)
 800d1ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d05a      	beq.n	800d26a <LmHandlerPackagesNotify+0xd6>
        {
            switch( notifyType )
 800d1b4:	79fb      	ldrb	r3, [r7, #7]
 800d1b6:	2b03      	cmp	r3, #3
 800d1b8:	d84e      	bhi.n	800d258 <LmHandlerPackagesNotify+0xc4>
 800d1ba:	a201      	add	r2, pc, #4	@ (adr r2, 800d1c0 <LmHandlerPackagesNotify+0x2c>)
 800d1bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1c0:	0800d1d1 	.word	0x0800d1d1
 800d1c4:	0800d1f3 	.word	0x0800d1f3
 800d1c8:	0800d215 	.word	0x0800d215
 800d1cc:	0800d237 	.word	0x0800d237
            {
                case PACKAGE_MCPS_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800d1d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d1d4:	4a2c      	ldr	r2, [pc, #176]	@ (800d288 <LmHandlerPackagesNotify+0xf4>)
 800d1d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d1da:	699b      	ldr	r3, [r3, #24]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d03d      	beq.n	800d25c <LmHandlerPackagesNotify+0xc8>
                    {
                        LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t* ) params );
 800d1e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d1e4:	4a28      	ldr	r2, [pc, #160]	@ (800d288 <LmHandlerPackagesNotify+0xf4>)
 800d1e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d1ea:	699b      	ldr	r3, [r3, #24]
 800d1ec:	6838      	ldr	r0, [r7, #0]
 800d1ee:	4798      	blx	r3
                    }
                    break;
 800d1f0:	e034      	b.n	800d25c <LmHandlerPackagesNotify+0xc8>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
                          ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ))))
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                    if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
 800d1f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d1f6:	4a24      	ldr	r2, [pc, #144]	@ (800d288 <LmHandlerPackagesNotify+0xf4>)
 800d1f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d1fc:	69db      	ldr	r3, [r3, #28]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d02e      	beq.n	800d260 <LmHandlerPackagesNotify+0xcc>
#endif /* LORAMAC_VERSION */
                    {
                        LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t* )params );
 800d202:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d206:	4a20      	ldr	r2, [pc, #128]	@ (800d288 <LmHandlerPackagesNotify+0xf4>)
 800d208:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d20c:	69db      	ldr	r3, [r3, #28]
 800d20e:	6838      	ldr	r0, [r7, #0]
 800d210:	4798      	blx	r3
                    }
                    break;
 800d212:	e025      	b.n	800d260 <LmHandlerPackagesNotify+0xcc>
                }
                case PACKAGE_MLME_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800d214:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d218:	4a1b      	ldr	r2, [pc, #108]	@ (800d288 <LmHandlerPackagesNotify+0xf4>)
 800d21a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d21e:	6a1b      	ldr	r3, [r3, #32]
 800d220:	2b00      	cmp	r3, #0
 800d222:	d01f      	beq.n	800d264 <LmHandlerPackagesNotify+0xd0>
                    {
                        LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t* )params );
 800d224:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d228:	4a17      	ldr	r2, [pc, #92]	@ (800d288 <LmHandlerPackagesNotify+0xf4>)
 800d22a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d22e:	6a1b      	ldr	r3, [r3, #32]
 800d230:	6838      	ldr	r0, [r7, #0]
 800d232:	4798      	blx	r3
                    }
                    break;
 800d234:	e016      	b.n	800d264 <LmHandlerPackagesNotify+0xd0>
                }
                case PACKAGE_MLME_INDICATION:
                {
                    if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 800d236:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d23a:	4a13      	ldr	r2, [pc, #76]	@ (800d288 <LmHandlerPackagesNotify+0xf4>)
 800d23c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d242:	2b00      	cmp	r3, #0
 800d244:	d010      	beq.n	800d268 <LmHandlerPackagesNotify+0xd4>
                    {
                        LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 800d246:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d24a:	4a0f      	ldr	r2, [pc, #60]	@ (800d288 <LmHandlerPackagesNotify+0xf4>)
 800d24c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d252:	6838      	ldr	r0, [r7, #0]
 800d254:	4798      	blx	r3
                    }
                    break;
 800d256:	e007      	b.n	800d268 <LmHandlerPackagesNotify+0xd4>
                }
                default:
                {
                    break;
 800d258:	bf00      	nop
 800d25a:	e006      	b.n	800d26a <LmHandlerPackagesNotify+0xd6>
                    break;
 800d25c:	bf00      	nop
 800d25e:	e004      	b.n	800d26a <LmHandlerPackagesNotify+0xd6>
                    break;
 800d260:	bf00      	nop
 800d262:	e002      	b.n	800d26a <LmHandlerPackagesNotify+0xd6>
                    break;
 800d264:	bf00      	nop
 800d266:	e000      	b.n	800d26a <LmHandlerPackagesNotify+0xd6>
                    break;
 800d268:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d26a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d26e:	b2db      	uxtb	r3, r3
 800d270:	3301      	adds	r3, #1
 800d272:	b2db      	uxtb	r3, r3
 800d274:	73fb      	strb	r3, [r7, #15]
 800d276:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d27a:	2b04      	cmp	r3, #4
 800d27c:	dd93      	ble.n	800d1a6 <LmHandlerPackagesNotify+0x12>
                }
            }
        }
    }
}
 800d27e:	bf00      	nop
 800d280:	bf00      	nop
 800d282:	3710      	adds	r7, #16
 800d284:	46bd      	mov	sp, r7
 800d286:	bd80      	pop	{r7, pc}
 800d288:	20000734 	.word	0x20000734

0800d28c <LmHandlerPackageIsTxPending>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool LmHandlerPackageIsTxPending( void )
{
 800d28c:	b580      	push	{r7, lr}
 800d28e:	b082      	sub	sp, #8
 800d290:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d292:	2300      	movs	r3, #0
 800d294:	71fb      	strb	r3, [r7, #7]
 800d296:	e018      	b.n	800d2ca <LmHandlerPackageIsTxPending+0x3e>
    {
        if( LmHandlerPackages[i] != NULL )
 800d298:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d29c:	4a0f      	ldr	r2, [pc, #60]	@ (800d2dc <LmHandlerPackageIsTxPending+0x50>)
 800d29e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d00b      	beq.n	800d2be <LmHandlerPackageIsTxPending+0x32>
        {
            if( LmHandlerPackages[i]->IsTxPending( ) == true )
 800d2a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d2aa:	4a0c      	ldr	r2, [pc, #48]	@ (800d2dc <LmHandlerPackageIsTxPending+0x50>)
 800d2ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d2b0:	68db      	ldr	r3, [r3, #12]
 800d2b2:	4798      	blx	r3
 800d2b4:	4603      	mov	r3, r0
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d001      	beq.n	800d2be <LmHandlerPackageIsTxPending+0x32>
            {
                return true;
 800d2ba:	2301      	movs	r3, #1
 800d2bc:	e00a      	b.n	800d2d4 <LmHandlerPackageIsTxPending+0x48>
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d2be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d2c2:	b2db      	uxtb	r3, r3
 800d2c4:	3301      	adds	r3, #1
 800d2c6:	b2db      	uxtb	r3, r3
 800d2c8:	71fb      	strb	r3, [r7, #7]
 800d2ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d2ce:	2b04      	cmp	r3, #4
 800d2d0:	dde2      	ble.n	800d298 <LmHandlerPackageIsTxPending+0xc>
            }
        }
    }
    return false;
 800d2d2:	2300      	movs	r3, #0
}
 800d2d4:	4618      	mov	r0, r3
 800d2d6:	3708      	adds	r7, #8
 800d2d8:	46bd      	mov	sp, r7
 800d2da:	bd80      	pop	{r7, pc}
 800d2dc:	20000734 	.word	0x20000734

0800d2e0 <LmHandlerPackagesProcess>:
#endif /* LORAMAC_VERSION */

static void LmHandlerPackagesProcess( void )
{
 800d2e0:	b580      	push	{r7, lr}
 800d2e2:	b082      	sub	sp, #8
 800d2e4:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d2e6:	2300      	movs	r3, #0
 800d2e8:	71fb      	strb	r3, [r7, #7]
 800d2ea:	e022      	b.n	800d332 <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800d2ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d2f0:	4a14      	ldr	r2, [pc, #80]	@ (800d344 <LmHandlerPackagesProcess+0x64>)
 800d2f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d015      	beq.n	800d326 <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800d2fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d2fe:	4a11      	ldr	r2, [pc, #68]	@ (800d344 <LmHandlerPackagesProcess+0x64>)
 800d300:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d304:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800d306:	2b00      	cmp	r3, #0
 800d308:	d00d      	beq.n	800d326 <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 800d30a:	79fb      	ldrb	r3, [r7, #7]
 800d30c:	4618      	mov	r0, r3
 800d30e:	f7ff ff23 	bl	800d158 <LmHandlerPackageIsInitialized>
 800d312:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800d314:	2b00      	cmp	r3, #0
 800d316:	d006      	beq.n	800d326 <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 800d318:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d31c:	4a09      	ldr	r2, [pc, #36]	@ (800d344 <LmHandlerPackagesProcess+0x64>)
 800d31e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d322:	691b      	ldr	r3, [r3, #16]
 800d324:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d32a:	b2db      	uxtb	r3, r3
 800d32c:	3301      	adds	r3, #1
 800d32e:	b2db      	uxtb	r3, r3
 800d330:	71fb      	strb	r3, [r7, #7]
 800d332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d336:	2b04      	cmp	r3, #4
 800d338:	ddd8      	ble.n	800d2ec <LmHandlerPackagesProcess+0xc>
        }
    }
}
 800d33a:	bf00      	nop
 800d33c:	bf00      	nop
 800d33e:	3708      	adds	r7, #8
 800d340:	46bd      	mov	sp, r7
 800d342:	bd80      	pop	{r7, pc}
 800d344:	20000734 	.word	0x20000734

0800d348 <LmHandlerGetVersion>:
 * ST ADDITIONAL FUNCTIONS
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion(LmHandlerVersionType_t lmhType, uint32_t *featureVersion)
{
 800d348:	b480      	push	{r7}
 800d34a:	b083      	sub	sp, #12
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	4603      	mov	r3, r0
 800d350:	6039      	str	r1, [r7, #0]
 800d352:	71fb      	strb	r3, [r7, #7]
    if (featureVersion == NULL)
 800d354:	683b      	ldr	r3, [r7, #0]
 800d356:	2b00      	cmp	r3, #0
 800d358:	d102      	bne.n	800d360 <LmHandlerGetVersion+0x18>
    {
        return LORAMAC_HANDLER_ERROR;
 800d35a:	f04f 33ff 	mov.w	r3, #4294967295
 800d35e:	e00e      	b.n	800d37e <LmHandlerGetVersion+0x36>
    }

    switch(lmhType)
 800d360:	79fb      	ldrb	r3, [r7, #7]
 800d362:	2b00      	cmp	r3, #0
 800d364:	d002      	beq.n	800d36c <LmHandlerGetVersion+0x24>
 800d366:	2b01      	cmp	r3, #1
 800d368:	d004      	beq.n	800d374 <LmHandlerGetVersion+0x2c>
            break;
        case LORAMAC_HANDLER_REGION_VERSION:
            *featureVersion = REGION_VERSION;
            break;
        default:
          break;
 800d36a:	e007      	b.n	800d37c <LmHandlerGetVersion+0x34>
            *featureVersion = LORAMAC_VERSION;
 800d36c:	683b      	ldr	r3, [r7, #0]
 800d36e:	4a06      	ldr	r2, [pc, #24]	@ (800d388 <LmHandlerGetVersion+0x40>)
 800d370:	601a      	str	r2, [r3, #0]
            break;
 800d372:	e003      	b.n	800d37c <LmHandlerGetVersion+0x34>
            *featureVersion = REGION_VERSION;
 800d374:	683b      	ldr	r3, [r7, #0]
 800d376:	4a05      	ldr	r2, [pc, #20]	@ (800d38c <LmHandlerGetVersion+0x44>)
 800d378:	601a      	str	r2, [r3, #0]
            break;
 800d37a:	bf00      	nop
    }

    return LORAMAC_HANDLER_SUCCESS;
 800d37c:	2300      	movs	r3, #0
}
 800d37e:	4618      	mov	r0, r3
 800d380:	370c      	adds	r7, #12
 800d382:	46bd      	mov	sp, r7
 800d384:	bc80      	pop	{r7}
 800d386:	4770      	bx	lr
 800d388:	01000400 	.word	0x01000400
 800d38c:	02010001 	.word	0x02010001

0800d390 <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop(void)
{
 800d390:	b580      	push	{r7, lr}
 800d392:	af00      	add	r7, sp, #0
    if (LoRaMacDeInitialization() == LORAMAC_STATUS_OK)
 800d394:	f005 fb76 	bl	8012a84 <LoRaMacDeInitialization>
 800d398:	4603      	mov	r3, r0
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d101      	bne.n	800d3a2 <LmHandlerStop+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800d39e:	2300      	movs	r3, #0
 800d3a0:	e001      	b.n	800d3a6 <LmHandlerStop+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800d3a2:	f06f 0301 	mvn.w	r3, #1
    }
}
 800d3a6:	4618      	mov	r0, r3
 800d3a8:	bd80      	pop	{r7, pc}

0800d3aa <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt(void)
{
 800d3aa:	b580      	push	{r7, lr}
 800d3ac:	af00      	add	r7, sp, #0
    if (LoRaMacHalt() == LORAMAC_STATUS_OK)
 800d3ae:	f004 faaf 	bl	8011910 <LoRaMacHalt>
 800d3b2:	4603      	mov	r3, r0
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d101      	bne.n	800d3bc <LmHandlerHalt+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800d3b8:	2300      	movs	r3, #0
 800d3ba:	e001      	b.n	800d3c0 <LmHandlerHalt+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800d3bc:	f06f 0301 	mvn.w	r3, #1
    }
}
 800d3c0:	4618      	mov	r0, r3
 800d3c2:	bd80      	pop	{r7, pc}

0800d3c4 <LmHandlerNvmDataStore>:
        return LORAMAC_HANDLER_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 800d3c4:	b580      	push	{r7, lr}
 800d3c6:	b08e      	sub	sp, #56	@ 0x38
 800d3c8:	af00      	add	r7, sp, #0
    LoRaMacNvmData_t *nvm;
    uint32_t nvm_size;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800d3ca:	2300      	movs	r3, #0
 800d3cc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    int32_t status = NVM_DATA_OK;
 800d3d0:	2300      	movs	r3, #0
 800d3d2:	633b      	str	r3, [r7, #48]	@ 0x30

    lmhStatus = LmHandlerHalt();
 800d3d4:	f7ff ffe9 	bl	800d3aa <LmHandlerHalt>
 800d3d8:	4603      	mov	r3, r0
 800d3da:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if (lmhStatus == LORAMAC_HANDLER_SUCCESS)
 800d3de:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d12f      	bne.n	800d446 <LmHandlerNvmDataStore+0x82>
    {
        status = NvmDataMgmtStoreBegin();
 800d3e6:	f000 f859 	bl	800d49c <NvmDataMgmtStoreBegin>
 800d3ea:	6338      	str	r0, [r7, #48]	@ 0x30

        if (status == NVM_DATA_NO_UPDATED_DATA)
 800d3ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3ee:	f113 0f02 	cmn.w	r3, #2
 800d3f2:	d103      	bne.n	800d3fc <LmHandlerNvmDataStore+0x38>
        {
            lmhStatus = LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE;
 800d3f4:	23f8      	movs	r3, #248	@ 0xf8
 800d3f6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800d3fa:	e01c      	b.n	800d436 <LmHandlerNvmDataStore+0x72>
        }
        else if (( status != NVM_DATA_OK ) || (LmHandlerCallbacks->OnStoreContextRequest == NULL))
 800d3fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d104      	bne.n	800d40c <LmHandlerNvmDataStore+0x48>
 800d402:	4b1b      	ldr	r3, [pc, #108]	@ (800d470 <LmHandlerNvmDataStore+0xac>)
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	695b      	ldr	r3, [r3, #20]
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d103      	bne.n	800d414 <LmHandlerNvmDataStore+0x50>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800d40c:	23ff      	movs	r3, #255	@ 0xff
 800d40e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800d412:	e010      	b.n	800d436 <LmHandlerNvmDataStore+0x72>
        }
        else
        {
          MibRequestConfirm_t mibReq;
          mibReq.Type = MIB_NVM_CTXS;
 800d414:	2327      	movs	r3, #39	@ 0x27
 800d416:	713b      	strb	r3, [r7, #4]
          LoRaMacMibGetRequestConfirm( &mibReq );
 800d418:	1d3b      	adds	r3, r7, #4
 800d41a:	4618      	mov	r0, r3
 800d41c:	f004 fb40 	bl	8011aa0 <LoRaMacMibGetRequestConfirm>
          nvm = mibReq.Param.Contexts;
 800d420:	68bb      	ldr	r3, [r7, #8]
 800d422:	62fb      	str	r3, [r7, #44]	@ 0x2c
          nvm_size = ((sizeof(LoRaMacNvmData_t) + 7) & ~0x07);
 800d424:	f44f 63b0 	mov.w	r3, #1408	@ 0x580
 800d428:	62bb      	str	r3, [r7, #40]	@ 0x28
          LmHandlerCallbacks->OnStoreContextRequest(nvm, nvm_size);
 800d42a:	4b11      	ldr	r3, [pc, #68]	@ (800d470 <LmHandlerNvmDataStore+0xac>)
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	695b      	ldr	r3, [r3, #20]
 800d430:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d432:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d434:	4798      	blx	r3
        }

        if ( NvmDataMgmtStoreEnd() != NVM_DATA_OK )
 800d436:	f000 f847 	bl	800d4c8 <NvmDataMgmtStoreEnd>
 800d43a:	4603      	mov	r3, r0
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d002      	beq.n	800d446 <LmHandlerNvmDataStore+0x82>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800d440:	23ff      	movs	r3, #255	@ 0xff
 800d442:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
    }

    if ((lmhStatus == LORAMAC_HANDLER_SUCCESS) && (LmHandlerCallbacks->OnNvmDataChange != NULL ))
 800d446:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d109      	bne.n	800d462 <LmHandlerNvmDataStore+0x9e>
 800d44e:	4b08      	ldr	r3, [pc, #32]	@ (800d470 <LmHandlerNvmDataStore+0xac>)
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	69db      	ldr	r3, [r3, #28]
 800d454:	2b00      	cmp	r3, #0
 800d456:	d004      	beq.n	800d462 <LmHandlerNvmDataStore+0x9e>
    {
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
 800d458:	4b05      	ldr	r3, [pc, #20]	@ (800d470 <LmHandlerNvmDataStore+0xac>)
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	69db      	ldr	r3, [r3, #28]
 800d45e:	2001      	movs	r0, #1
 800d460:	4798      	blx	r3
    }

    return lmhStatus;
 800d462:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800d466:	4618      	mov	r0, r3
 800d468:	3738      	adds	r7, #56	@ 0x38
 800d46a:	46bd      	mov	sp, r7
 800d46c:	bd80      	pop	{r7, pc}
 800d46e:	bf00      	nop
 800d470:	2000075c 	.word	0x2000075c

0800d474 <NvmDataMgmtEvent>:
static uint16_t NvmNotifyFlags = 0;

#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 800d474:	b480      	push	{r7}
 800d476:	b083      	sub	sp, #12
 800d478:	af00      	add	r7, sp, #0
 800d47a:	4603      	mov	r3, r0
 800d47c:	80fb      	strh	r3, [r7, #6]
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
 800d47e:	4b06      	ldr	r3, [pc, #24]	@ (800d498 <NvmDataMgmtEvent+0x24>)
 800d480:	881a      	ldrh	r2, [r3, #0]
 800d482:	88fb      	ldrh	r3, [r7, #6]
 800d484:	4313      	orrs	r3, r2
 800d486:	b29a      	uxth	r2, r3
 800d488:	4b03      	ldr	r3, [pc, #12]	@ (800d498 <NvmDataMgmtEvent+0x24>)
 800d48a:	801a      	strh	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800d48c:	bf00      	nop
 800d48e:	370c      	adds	r7, #12
 800d490:	46bd      	mov	sp, r7
 800d492:	bc80      	pop	{r7}
 800d494:	4770      	bx	lr
 800d496:	bf00      	nop
 800d498:	20000880 	.word	0x20000880

0800d49c <NvmDataMgmtStoreBegin>:

int32_t NvmDataMgmtStoreBegin( void )
{
 800d49c:	b580      	push	{r7, lr}
 800d49e:	af00      	add	r7, sp, #0
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    // Input checks
    if( NvmNotifyFlags == LORAMAC_NVM_NOTIFY_FLAG_NONE )
 800d4a0:	4b08      	ldr	r3, [pc, #32]	@ (800d4c4 <NvmDataMgmtStoreBegin+0x28>)
 800d4a2:	881b      	ldrh	r3, [r3, #0]
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d102      	bne.n	800d4ae <NvmDataMgmtStoreBegin+0x12>
    {
        // There was no update.
        return NVM_DATA_NO_UPDATED_DATA;
 800d4a8:	f06f 0301 	mvn.w	r3, #1
 800d4ac:	e008      	b.n	800d4c0 <NvmDataMgmtStoreBegin+0x24>
    }
    if( LoRaMacStop( ) != LORAMAC_STATUS_OK )
 800d4ae:	f004 fa13 	bl	80118d8 <LoRaMacStop>
 800d4b2:	4603      	mov	r3, r0
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d002      	beq.n	800d4be <NvmDataMgmtStoreBegin+0x22>
    {
        return NVM_DATA_NOT_AVAILABLE;
 800d4b8:	f06f 0302 	mvn.w	r3, #2
 800d4bc:	e000      	b.n	800d4c0 <NvmDataMgmtStoreBegin+0x24>
    }
    return NVM_DATA_OK;
 800d4be:	2300      	movs	r3, #0
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800d4c0:	4618      	mov	r0, r3
 800d4c2:	bd80      	pop	{r7, pc}
 800d4c4:	20000880 	.word	0x20000880

0800d4c8 <NvmDataMgmtStoreEnd>:

int32_t NvmDataMgmtStoreEnd( void )
{
 800d4c8:	b580      	push	{r7, lr}
 800d4ca:	af00      	add	r7, sp, #0
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    // Reset notification flags
    NvmNotifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800d4cc:	4b03      	ldr	r3, [pc, #12]	@ (800d4dc <NvmDataMgmtStoreEnd+0x14>)
 800d4ce:	2200      	movs	r2, #0
 800d4d0:	801a      	strh	r2, [r3, #0]

    // Resume LoRaMac
    LoRaMacStart( );
 800d4d2:	f004 f9f3 	bl	80118bc <LoRaMacStart>
    return NVM_DATA_OK;
 800d4d6:	2300      	movs	r3, #0
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800d4d8:	4618      	mov	r0, r3
 800d4da:	bd80      	pop	{r7, pc}
 800d4dc:	20000880 	.word	0x20000880

0800d4e0 <ClassBStatusReset>:

/*!
 * Reset Beacon status structure
 */
static inline void ClassBStatusReset( void )
{
 800d4e0:	b580      	push	{r7, lr}
 800d4e2:	af00      	add	r7, sp, #0
    memset1( ( uint8_t* ) &ComplianceTestState.ClassBStatus, 0, sizeof( ClassBStatus_t ) / sizeof( uint8_t ) );
 800d4e4:	2220      	movs	r2, #32
 800d4e6:	2100      	movs	r1, #0
 800d4e8:	4802      	ldr	r0, [pc, #8]	@ (800d4f4 <ClassBStatusReset+0x14>)
 800d4ea:	f009 fe0f 	bl	801710c <memset1>
}
 800d4ee:	bf00      	nop
 800d4f0:	bd80      	pop	{r7, pc}
 800d4f2:	bf00      	nop
 800d4f4:	20000898 	.word	0x20000898

0800d4f8 <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate         = NULL,  // To be initialized by LmHandler
    .OnSystemReset           = NULL,  // To be initialized by LmHandler
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 800d4f8:	b480      	push	{r7}
 800d4fa:	af00      	add	r7, sp, #0
    return &CompliancePackage;
 800d4fc:	4b02      	ldr	r3, [pc, #8]	@ (800d508 <LmhpCompliancePackageFactory+0x10>)
}
 800d4fe:	4618      	mov	r0, r3
 800d500:	46bd      	mov	sp, r7
 800d502:	bc80      	pop	{r7}
 800d504:	4770      	bx	lr
 800d506:	bf00      	nop
 800d508:	200000d0 	.word	0x200000d0

0800d50c <LmhpComplianceInit>:

static void LmhpComplianceInit( void* params, uint8_t* dataBuffer, uint8_t dataBufferMaxSize )
{
 800d50c:	b580      	push	{r7, lr}
 800d50e:	b086      	sub	sp, #24
 800d510:	af02      	add	r7, sp, #8
 800d512:	60f8      	str	r0, [r7, #12]
 800d514:	60b9      	str	r1, [r7, #8]
 800d516:	4613      	mov	r3, r2
 800d518:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d018      	beq.n	800d552 <LmhpComplianceInit+0x46>
 800d520:	68bb      	ldr	r3, [r7, #8]
 800d522:	2b00      	cmp	r3, #0
 800d524:	d015      	beq.n	800d552 <LmhpComplianceInit+0x46>
    {
        ComplianceParams                      = ( LmhpComplianceParams_t* ) params;
 800d526:	4a19      	ldr	r2, [pc, #100]	@ (800d58c <LmhpComplianceInit+0x80>)
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer        = dataBuffer;
 800d52c:	4a18      	ldr	r2, [pc, #96]	@ (800d590 <LmhpComplianceInit+0x84>)
 800d52e:	68bb      	ldr	r3, [r7, #8]
 800d530:	60d3      	str	r3, [r2, #12]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800d532:	4a17      	ldr	r2, [pc, #92]	@ (800d590 <LmhpComplianceInit+0x84>)
 800d534:	79fb      	ldrb	r3, [r7, #7]
 800d536:	7253      	strb	r3, [r2, #9]
        ComplianceTestState.Initialized       = true;
 800d538:	4b15      	ldr	r3, [pc, #84]	@ (800d590 <LmhpComplianceInit+0x84>)
 800d53a:	2201      	movs	r2, #1
 800d53c:	701a      	strb	r2, [r3, #0]
        TimerInit( &ProcessTimer, OnProcessTimer );
 800d53e:	2300      	movs	r3, #0
 800d540:	9300      	str	r3, [sp, #0]
 800d542:	4b14      	ldr	r3, [pc, #80]	@ (800d594 <LmhpComplianceInit+0x88>)
 800d544:	2200      	movs	r2, #0
 800d546:	f04f 31ff 	mov.w	r1, #4294967295
 800d54a:	4813      	ldr	r0, [pc, #76]	@ (800d598 <LmhpComplianceInit+0x8c>)
 800d54c:	f00d fe4c 	bl	801b1e8 <UTIL_TIMER_Create>
 800d550:	e005      	b.n	800d55e <LmhpComplianceInit+0x52>
    }
    else
    {
        ComplianceParams                = NULL;
 800d552:	4b0e      	ldr	r3, [pc, #56]	@ (800d58c <LmhpComplianceInit+0x80>)
 800d554:	2200      	movs	r2, #0
 800d556:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 800d558:	4b0d      	ldr	r3, [pc, #52]	@ (800d590 <LmhpComplianceInit+0x84>)
 800d55a:	2200      	movs	r2, #0
 800d55c:	701a      	strb	r2, [r3, #0]
    }
    ComplianceTestState.RxAppCnt = 0;
 800d55e:	4b0c      	ldr	r3, [pc, #48]	@ (800d590 <LmhpComplianceInit+0x84>)
 800d560:	2200      	movs	r2, #0
 800d562:	821a      	strh	r2, [r3, #16]
    ClassBStatusReset( );
 800d564:	f7ff ffbc 	bl	800d4e0 <ClassBStatusReset>
    ComplianceTestState.IsTxPending = false;
 800d568:	4b09      	ldr	r3, [pc, #36]	@ (800d590 <LmhpComplianceInit+0x84>)
 800d56a:	2200      	movs	r2, #0
 800d56c:	705a      	strb	r2, [r3, #1]
    ComplianceTestState.IsBeaconRxStatusIndOn = false;
 800d56e:	4b08      	ldr	r3, [pc, #32]	@ (800d590 <LmhpComplianceInit+0x84>)
 800d570:	2200      	movs	r2, #0
 800d572:	749a      	strb	r2, [r3, #18]
    ComplianceTestState.IsResetCmdPending = false;
 800d574:	4b06      	ldr	r3, [pc, #24]	@ (800d590 <LmhpComplianceInit+0x84>)
 800d576:	2200      	movs	r2, #0
 800d578:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    ComplianceTestState.IsClassReqCmdPending = false;
 800d57c:	4b04      	ldr	r3, [pc, #16]	@ (800d590 <LmhpComplianceInit+0x84>)
 800d57e:	2200      	movs	r2, #0
 800d580:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
}
 800d584:	bf00      	nop
 800d586:	3710      	adds	r7, #16
 800d588:	46bd      	mov	sp, r7
 800d58a:	bd80      	pop	{r7, pc}
 800d58c:	200008bc 	.word	0x200008bc
 800d590:	20000884 	.word	0x20000884
 800d594:	0800de81 	.word	0x0800de81
 800d598:	200008c0 	.word	0x200008c0

0800d59c <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 800d59c:	b480      	push	{r7}
 800d59e:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 800d5a0:	4b02      	ldr	r3, [pc, #8]	@ (800d5ac <LmhpComplianceIsInitialized+0x10>)
 800d5a2:	781b      	ldrb	r3, [r3, #0]
}
 800d5a4:	4618      	mov	r0, r3
 800d5a6:	46bd      	mov	sp, r7
 800d5a8:	bc80      	pop	{r7}
 800d5aa:	4770      	bx	lr
 800d5ac:	20000884 	.word	0x20000884

0800d5b0 <LmhpComplianceIsTxPending>:

static bool LmhpComplianceIsTxPending( void )
{
 800d5b0:	b480      	push	{r7}
 800d5b2:	af00      	add	r7, sp, #0
    return ComplianceTestState.IsTxPending;
 800d5b4:	4b02      	ldr	r3, [pc, #8]	@ (800d5c0 <LmhpComplianceIsTxPending+0x10>)
 800d5b6:	785b      	ldrb	r3, [r3, #1]
}
 800d5b8:	4618      	mov	r0, r3
 800d5ba:	46bd      	mov	sp, r7
 800d5bc:	bc80      	pop	{r7}
 800d5be:	4770      	bx	lr
 800d5c0:	20000884 	.word	0x20000884

0800d5c4 <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 800d5c4:	b590      	push	{r4, r7, lr}
 800d5c6:	b085      	sub	sp, #20
 800d5c8:	af00      	add	r7, sp, #0
    if( ComplianceTestState.IsTxPending == true )
 800d5ca:	4b33      	ldr	r3, [pc, #204]	@ (800d698 <LmhpComplianceProcess+0xd4>)
 800d5cc:	785b      	ldrb	r3, [r3, #1]
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d03f      	beq.n	800d652 <LmhpComplianceProcess+0x8e>
    {
        TimerTime_t now = TimerGetCurrentTime( );
 800d5d2:	f00d ffc7 	bl	801b564 <UTIL_TIMER_GetCurrentTime>
 800d5d6:	60f8      	str	r0, [r7, #12]
        if( now > ( ComplianceTestState.TxPendingTimestamp + LmHandlerGetDutyCycleWaitTime( ) ) )
 800d5d8:	4b2f      	ldr	r3, [pc, #188]	@ (800d698 <LmhpComplianceProcess+0xd4>)
 800d5da:	685c      	ldr	r4, [r3, #4]
 800d5dc:	f7ff f96a 	bl	800c8b4 <LmHandlerGetDutyCycleWaitTime>
 800d5e0:	4603      	mov	r3, r0
 800d5e2:	4423      	add	r3, r4
 800d5e4:	68fa      	ldr	r2, [r7, #12]
 800d5e6:	429a      	cmp	r2, r3
 800d5e8:	d942      	bls.n	800d670 <LmhpComplianceProcess+0xac>
        {
            if( ComplianceTestState.DataBufferSize != 0 )
 800d5ea:	4b2b      	ldr	r3, [pc, #172]	@ (800d698 <LmhpComplianceProcess+0xd4>)
 800d5ec:	7a9b      	ldrb	r3, [r3, #10]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d03e      	beq.n	800d670 <LmhpComplianceProcess+0xac>
            {
                // Answer commands
                LmHandlerAppData_t appData = {
 800d5f2:	23e0      	movs	r3, #224	@ 0xe0
 800d5f4:	703b      	strb	r3, [r7, #0]
                    .Buffer     = ComplianceTestState.DataBuffer,
                    .BufferSize = ComplianceTestState.DataBufferSize,
 800d5f6:	4b28      	ldr	r3, [pc, #160]	@ (800d698 <LmhpComplianceProcess+0xd4>)
 800d5f8:	7a9b      	ldrb	r3, [r3, #10]
                LmHandlerAppData_t appData = {
 800d5fa:	707b      	strb	r3, [r7, #1]
                    .Buffer     = ComplianceTestState.DataBuffer,
 800d5fc:	4b26      	ldr	r3, [pc, #152]	@ (800d698 <LmhpComplianceProcess+0xd4>)
 800d5fe:	68db      	ldr	r3, [r3, #12]
                LmHandlerAppData_t appData = {
 800d600:	607b      	str	r3, [r7, #4]
                    .Port       = COMPLIANCE_PORT,
                };
                LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800d602:	23ff      	movs	r3, #255	@ 0xff
 800d604:	72fb      	strb	r3, [r7, #11]
                lmhStatus = LmHandlerSend( &appData, ComplianceTestState.IsTxConfirmed, true );
 800d606:	4b24      	ldr	r3, [pc, #144]	@ (800d698 <LmhpComplianceProcess+0xd4>)
 800d608:	7a19      	ldrb	r1, [r3, #8]
 800d60a:	463b      	mov	r3, r7
 800d60c:	2201      	movs	r2, #1
 800d60e:	4618      	mov	r0, r3
 800d610:	f7ff f9f8 	bl	800ca04 <LmHandlerSend>
 800d614:	4603      	mov	r3, r0
 800d616:	72fb      	strb	r3, [r7, #11]
                if ((lmhStatus == LORAMAC_HANDLER_BUSY_ERROR) || (lmhStatus == LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED))
 800d618:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d61c:	f113 0f02 	cmn.w	r3, #2
 800d620:	d004      	beq.n	800d62c <LmhpComplianceProcess+0x68>
 800d622:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d626:	f113 0f06 	cmn.w	r3, #6
 800d62a:	d108      	bne.n	800d63e <LmhpComplianceProcess+0x7a>
                {
                    // try to send the message again
                    TimerSetValue( &ProcessTimer, 1000 );
 800d62c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800d630:	481a      	ldr	r0, [pc, #104]	@ (800d69c <LmhpComplianceProcess+0xd8>)
 800d632:	f00d feed 	bl	801b410 <UTIL_TIMER_SetPeriod>
                    TimerStart(&ProcessTimer);
 800d636:	4819      	ldr	r0, [pc, #100]	@ (800d69c <LmhpComplianceProcess+0xd8>)
 800d638:	f00d fe0c 	bl	801b254 <UTIL_TIMER_Start>
 800d63c:	e005      	b.n	800d64a <LmhpComplianceProcess+0x86>
                }
                else
                {
                    ComplianceTestState.IsTxPending = false;
 800d63e:	4b16      	ldr	r3, [pc, #88]	@ (800d698 <LmhpComplianceProcess+0xd4>)
 800d640:	2200      	movs	r2, #0
 800d642:	705a      	strb	r2, [r3, #1]
                    ComplianceTestState.DataBufferSize = 0;
 800d644:	4b14      	ldr	r3, [pc, #80]	@ (800d698 <LmhpComplianceProcess+0xd4>)
 800d646:	2200      	movs	r2, #0
 800d648:	729a      	strb	r2, [r3, #10]
                }
                ComplianceTestState.TxPendingTimestamp = now;
 800d64a:	4a13      	ldr	r2, [pc, #76]	@ (800d698 <LmhpComplianceProcess+0xd4>)
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	6053      	str	r3, [r2, #4]
 800d650:	e00e      	b.n	800d670 <LmhpComplianceProcess+0xac>
            }
        }
    }
    else
    { // If no Tx is pending process other commands
        if( ComplianceTestState.IsClassReqCmdPending == true )
 800d652:	4b11      	ldr	r3, [pc, #68]	@ (800d698 <LmhpComplianceProcess+0xd4>)
 800d654:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d009      	beq.n	800d670 <LmhpComplianceProcess+0xac>
        {
            ComplianceTestState.IsClassReqCmdPending = false;
 800d65c:	4b0e      	ldr	r3, [pc, #56]	@ (800d698 <LmhpComplianceProcess+0xd4>)
 800d65e:	2200      	movs	r2, #0
 800d660:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
            LmHandlerRequestClass( ComplianceTestState.NewClass );
 800d664:	4b0c      	ldr	r3, [pc, #48]	@ (800d698 <LmhpComplianceProcess+0xd4>)
 800d666:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800d66a:	4618      	mov	r0, r3
 800d66c:	f7ff fab8 	bl	800cbe0 <LmHandlerRequestClass>
        }
    }

    if( ComplianceTestState.IsResetCmdPending == true )
 800d670:	4b09      	ldr	r3, [pc, #36]	@ (800d698 <LmhpComplianceProcess+0xd4>)
 800d672:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800d676:	2b00      	cmp	r3, #0
 800d678:	d00a      	beq.n	800d690 <LmhpComplianceProcess+0xcc>
    {
        ComplianceTestState.IsResetCmdPending = false;
 800d67a:	4b07      	ldr	r3, [pc, #28]	@ (800d698 <LmhpComplianceProcess+0xd4>)
 800d67c:	2200      	movs	r2, #0
 800d67e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        // Call platform MCU reset API
        if (CompliancePackage.OnSystemReset != NULL)
 800d682:	4b07      	ldr	r3, [pc, #28]	@ (800d6a0 <LmhpComplianceProcess+0xdc>)
 800d684:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d686:	2b00      	cmp	r3, #0
 800d688:	d002      	beq.n	800d690 <LmhpComplianceProcess+0xcc>
        {
            CompliancePackage.OnSystemReset( );
 800d68a:	4b05      	ldr	r3, [pc, #20]	@ (800d6a0 <LmhpComplianceProcess+0xdc>)
 800d68c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d68e:	4798      	blx	r3
        }
    }
}
 800d690:	bf00      	nop
 800d692:	3714      	adds	r7, #20
 800d694:	46bd      	mov	sp, r7
 800d696:	bd90      	pop	{r4, r7, pc}
 800d698:	20000884 	.word	0x20000884
 800d69c:	200008c0 	.word	0x200008c0
 800d6a0:	200000d0 	.word	0x200000d0

0800d6a4 <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t* mcpsIndication )
{
 800d6a4:	b5b0      	push	{r4, r5, r7, lr}
 800d6a6:	b0a4      	sub	sp, #144	@ 0x90
 800d6a8:	af00      	add	r7, sp, #0
 800d6aa:	6078      	str	r0, [r7, #4]
    uint8_t cmdIndex        = 0;
 800d6ac:	2300      	movs	r3, #0
 800d6ae:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    MibRequestConfirm_t mibReq;

    if( ComplianceTestState.Initialized == false )
 800d6b2:	4bce      	ldr	r3, [pc, #824]	@ (800d9ec <LmhpComplianceOnMcpsIndication+0x348>)
 800d6b4:	781b      	ldrb	r3, [r3, #0]
 800d6b6:	f083 0301 	eor.w	r3, r3, #1
 800d6ba:	b2db      	uxtb	r3, r3
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	f040 83b5 	bne.w	800de2c <LmhpComplianceOnMcpsIndication+0x788>
        return;
    }

    // Increment the compliance certification protocol downlink counter
    // Not counting downlinks on FPort 0
    if( ( mcpsIndication->Port > 0 ) || ( mcpsIndication->AckReceived == true ) )
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	78db      	ldrb	r3, [r3, #3]
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d103      	bne.n	800d6d2 <LmhpComplianceOnMcpsIndication+0x2e>
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	7b9b      	ldrb	r3, [r3, #14]
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d005      	beq.n	800d6de <LmhpComplianceOnMcpsIndication+0x3a>
    {
        ComplianceTestState.RxAppCnt++;
 800d6d2:	4bc6      	ldr	r3, [pc, #792]	@ (800d9ec <LmhpComplianceOnMcpsIndication+0x348>)
 800d6d4:	8a1b      	ldrh	r3, [r3, #16]
 800d6d6:	3301      	adds	r3, #1
 800d6d8:	b29a      	uxth	r2, r3
 800d6da:	4bc4      	ldr	r3, [pc, #784]	@ (800d9ec <LmhpComplianceOnMcpsIndication+0x348>)
 800d6dc:	821a      	strh	r2, [r3, #16]
    }

    if( mcpsIndication->RxData == false )
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	7b5b      	ldrb	r3, [r3, #13]
 800d6e2:	f083 0301 	eor.w	r3, r3, #1
 800d6e6:	b2db      	uxtb	r3, r3
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	f040 83a1 	bne.w	800de30 <LmhpComplianceOnMcpsIndication+0x78c>
    {
        return;
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	78db      	ldrb	r3, [r3, #3]
 800d6f2:	2be0      	cmp	r3, #224	@ 0xe0
 800d6f4:	f040 839e 	bne.w	800de34 <LmhpComplianceOnMcpsIndication+0x790>
    {
        return;
    }

    ComplianceTestState.DataBufferSize = 0;
 800d6f8:	4bbc      	ldr	r3, [pc, #752]	@ (800d9ec <LmhpComplianceOnMcpsIndication+0x348>)
 800d6fa:	2200      	movs	r2, #0
 800d6fc:	729a      	strb	r2, [r3, #10]

    switch( mcpsIndication->Buffer[cmdIndex++] )
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	689a      	ldr	r2, [r3, #8]
 800d702:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d706:	1c59      	adds	r1, r3, #1
 800d708:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800d70c:	4413      	add	r3, r2
 800d70e:	781b      	ldrb	r3, [r3, #0]
 800d710:	2b7f      	cmp	r3, #127	@ 0x7f
 800d712:	f200 836e 	bhi.w	800ddf2 <LmhpComplianceOnMcpsIndication+0x74e>
 800d716:	a201      	add	r2, pc, #4	@ (adr r2, 800d71c <LmhpComplianceOnMcpsIndication+0x78>)
 800d718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d71c:	0800d91d 	.word	0x0800d91d
 800d720:	0800d961 	.word	0x0800d961
 800d724:	0800d96b 	.word	0x0800d96b
 800d728:	0800d977 	.word	0x0800d977
 800d72c:	0800d999 	.word	0x0800d999
 800d730:	0800d9c7 	.word	0x0800d9c7
 800d734:	0800d9f5 	.word	0x0800d9f5
 800d738:	0800da53 	.word	0x0800da53
 800d73c:	0800daab 	.word	0x0800daab
 800d740:	0800db17 	.word	0x0800db17
 800d744:	0800db67 	.word	0x0800db67
 800d748:	0800ddf3 	.word	0x0800ddf3
 800d74c:	0800ddf3 	.word	0x0800ddf3
 800d750:	0800ddf3 	.word	0x0800ddf3
 800d754:	0800ddf3 	.word	0x0800ddf3
 800d758:	0800ddf3 	.word	0x0800ddf3
 800d75c:	0800ddf3 	.word	0x0800ddf3
 800d760:	0800ddf3 	.word	0x0800ddf3
 800d764:	0800ddf3 	.word	0x0800ddf3
 800d768:	0800ddf3 	.word	0x0800ddf3
 800d76c:	0800ddf3 	.word	0x0800ddf3
 800d770:	0800ddf3 	.word	0x0800ddf3
 800d774:	0800ddf3 	.word	0x0800ddf3
 800d778:	0800ddf3 	.word	0x0800ddf3
 800d77c:	0800ddf3 	.word	0x0800ddf3
 800d780:	0800ddf3 	.word	0x0800ddf3
 800d784:	0800ddf3 	.word	0x0800ddf3
 800d788:	0800ddf3 	.word	0x0800ddf3
 800d78c:	0800ddf3 	.word	0x0800ddf3
 800d790:	0800ddf3 	.word	0x0800ddf3
 800d794:	0800ddf3 	.word	0x0800ddf3
 800d798:	0800ddf3 	.word	0x0800ddf3
 800d79c:	0800db6f 	.word	0x0800db6f
 800d7a0:	0800db81 	.word	0x0800db81
 800d7a4:	0800db89 	.word	0x0800db89
 800d7a8:	0800ddf3 	.word	0x0800ddf3
 800d7ac:	0800ddf3 	.word	0x0800ddf3
 800d7b0:	0800ddf3 	.word	0x0800ddf3
 800d7b4:	0800ddf3 	.word	0x0800ddf3
 800d7b8:	0800ddf3 	.word	0x0800ddf3
 800d7bc:	0800ddf3 	.word	0x0800ddf3
 800d7c0:	0800ddf3 	.word	0x0800ddf3
 800d7c4:	0800ddf3 	.word	0x0800ddf3
 800d7c8:	0800ddf3 	.word	0x0800ddf3
 800d7cc:	0800ddf3 	.word	0x0800ddf3
 800d7d0:	0800ddf3 	.word	0x0800ddf3
 800d7d4:	0800ddf3 	.word	0x0800ddf3
 800d7d8:	0800ddf3 	.word	0x0800ddf3
 800d7dc:	0800ddf3 	.word	0x0800ddf3
 800d7e0:	0800ddf3 	.word	0x0800ddf3
 800d7e4:	0800ddf3 	.word	0x0800ddf3
 800d7e8:	0800ddf3 	.word	0x0800ddf3
 800d7ec:	0800ddf3 	.word	0x0800ddf3
 800d7f0:	0800ddf3 	.word	0x0800ddf3
 800d7f4:	0800ddf3 	.word	0x0800ddf3
 800d7f8:	0800ddf3 	.word	0x0800ddf3
 800d7fc:	0800ddf3 	.word	0x0800ddf3
 800d800:	0800ddf3 	.word	0x0800ddf3
 800d804:	0800ddf3 	.word	0x0800ddf3
 800d808:	0800ddf3 	.word	0x0800ddf3
 800d80c:	0800ddf3 	.word	0x0800ddf3
 800d810:	0800ddf3 	.word	0x0800ddf3
 800d814:	0800ddf3 	.word	0x0800ddf3
 800d818:	0800ddf3 	.word	0x0800ddf3
 800d81c:	0800ddf3 	.word	0x0800ddf3
 800d820:	0800ddf3 	.word	0x0800ddf3
 800d824:	0800ddf3 	.word	0x0800ddf3
 800d828:	0800ddf3 	.word	0x0800ddf3
 800d82c:	0800ddf3 	.word	0x0800ddf3
 800d830:	0800ddf3 	.word	0x0800ddf3
 800d834:	0800ddf3 	.word	0x0800ddf3
 800d838:	0800ddf3 	.word	0x0800ddf3
 800d83c:	0800ddf3 	.word	0x0800ddf3
 800d840:	0800ddf3 	.word	0x0800ddf3
 800d844:	0800ddf3 	.word	0x0800ddf3
 800d848:	0800ddf3 	.word	0x0800ddf3
 800d84c:	0800ddf3 	.word	0x0800ddf3
 800d850:	0800ddf3 	.word	0x0800ddf3
 800d854:	0800ddf3 	.word	0x0800ddf3
 800d858:	0800ddf3 	.word	0x0800ddf3
 800d85c:	0800ddf3 	.word	0x0800ddf3
 800d860:	0800ddf3 	.word	0x0800ddf3
 800d864:	0800ddf3 	.word	0x0800ddf3
 800d868:	0800ddf3 	.word	0x0800ddf3
 800d86c:	0800ddf3 	.word	0x0800ddf3
 800d870:	0800ddf3 	.word	0x0800ddf3
 800d874:	0800ddf3 	.word	0x0800ddf3
 800d878:	0800ddf3 	.word	0x0800ddf3
 800d87c:	0800ddf3 	.word	0x0800ddf3
 800d880:	0800ddf3 	.word	0x0800ddf3
 800d884:	0800ddf3 	.word	0x0800ddf3
 800d888:	0800ddf3 	.word	0x0800ddf3
 800d88c:	0800ddf3 	.word	0x0800ddf3
 800d890:	0800ddf3 	.word	0x0800ddf3
 800d894:	0800ddf3 	.word	0x0800ddf3
 800d898:	0800ddf3 	.word	0x0800ddf3
 800d89c:	0800ddf3 	.word	0x0800ddf3
 800d8a0:	0800ddf3 	.word	0x0800ddf3
 800d8a4:	0800ddf3 	.word	0x0800ddf3
 800d8a8:	0800ddf3 	.word	0x0800ddf3
 800d8ac:	0800ddf3 	.word	0x0800ddf3
 800d8b0:	0800ddf3 	.word	0x0800ddf3
 800d8b4:	0800ddf3 	.word	0x0800ddf3
 800d8b8:	0800ddf3 	.word	0x0800ddf3
 800d8bc:	0800ddf3 	.word	0x0800ddf3
 800d8c0:	0800ddf3 	.word	0x0800ddf3
 800d8c4:	0800ddf3 	.word	0x0800ddf3
 800d8c8:	0800ddf3 	.word	0x0800ddf3
 800d8cc:	0800ddf3 	.word	0x0800ddf3
 800d8d0:	0800ddf3 	.word	0x0800ddf3
 800d8d4:	0800ddf3 	.word	0x0800ddf3
 800d8d8:	0800ddf3 	.word	0x0800ddf3
 800d8dc:	0800ddf3 	.word	0x0800ddf3
 800d8e0:	0800ddf3 	.word	0x0800ddf3
 800d8e4:	0800ddf3 	.word	0x0800ddf3
 800d8e8:	0800ddf3 	.word	0x0800ddf3
 800d8ec:	0800ddf3 	.word	0x0800ddf3
 800d8f0:	0800ddf3 	.word	0x0800ddf3
 800d8f4:	0800ddf3 	.word	0x0800ddf3
 800d8f8:	0800ddf3 	.word	0x0800ddf3
 800d8fc:	0800ddf3 	.word	0x0800ddf3
 800d900:	0800ddf3 	.word	0x0800ddf3
 800d904:	0800ddf3 	.word	0x0800ddf3
 800d908:	0800ddf3 	.word	0x0800ddf3
 800d90c:	0800ddf3 	.word	0x0800ddf3
 800d910:	0800dbbb 	.word	0x0800dbbb
 800d914:	0800dc6d 	.word	0x0800dc6d
 800d918:	0800dc9d 	.word	0x0800dc9d
    {
    case COMPLIANCE_PKG_VERSION_REQ:
    {
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_PKG_VERSION_ANS;
 800d91c:	4b33      	ldr	r3, [pc, #204]	@ (800d9ec <LmhpComplianceOnMcpsIndication+0x348>)
 800d91e:	68da      	ldr	r2, [r3, #12]
 800d920:	4b32      	ldr	r3, [pc, #200]	@ (800d9ec <LmhpComplianceOnMcpsIndication+0x348>)
 800d922:	7a9b      	ldrb	r3, [r3, #10]
 800d924:	1c59      	adds	r1, r3, #1
 800d926:	b2c8      	uxtb	r0, r1
 800d928:	4930      	ldr	r1, [pc, #192]	@ (800d9ec <LmhpComplianceOnMcpsIndication+0x348>)
 800d92a:	7288      	strb	r0, [r1, #10]
 800d92c:	4413      	add	r3, r2
 800d92e:	2200      	movs	r2, #0
 800d930:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ID;
 800d932:	4b2e      	ldr	r3, [pc, #184]	@ (800d9ec <LmhpComplianceOnMcpsIndication+0x348>)
 800d934:	68da      	ldr	r2, [r3, #12]
 800d936:	4b2d      	ldr	r3, [pc, #180]	@ (800d9ec <LmhpComplianceOnMcpsIndication+0x348>)
 800d938:	7a9b      	ldrb	r3, [r3, #10]
 800d93a:	1c59      	adds	r1, r3, #1
 800d93c:	b2c8      	uxtb	r0, r1
 800d93e:	492b      	ldr	r1, [pc, #172]	@ (800d9ec <LmhpComplianceOnMcpsIndication+0x348>)
 800d940:	7288      	strb	r0, [r1, #10]
 800d942:	4413      	add	r3, r2
 800d944:	2206      	movs	r2, #6
 800d946:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_VERSION;
 800d948:	4b28      	ldr	r3, [pc, #160]	@ (800d9ec <LmhpComplianceOnMcpsIndication+0x348>)
 800d94a:	68da      	ldr	r2, [r3, #12]
 800d94c:	4b27      	ldr	r3, [pc, #156]	@ (800d9ec <LmhpComplianceOnMcpsIndication+0x348>)
 800d94e:	7a9b      	ldrb	r3, [r3, #10]
 800d950:	1c59      	adds	r1, r3, #1
 800d952:	b2c8      	uxtb	r0, r1
 800d954:	4925      	ldr	r1, [pc, #148]	@ (800d9ec <LmhpComplianceOnMcpsIndication+0x348>)
 800d956:	7288      	strb	r0, [r1, #10]
 800d958:	4413      	add	r3, r2
 800d95a:	2201      	movs	r2, #1
 800d95c:	701a      	strb	r2, [r3, #0]
        break;
 800d95e:	e251      	b.n	800de04 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_DUT_RESET_REQ:
    {
        ComplianceTestState.IsResetCmdPending = true;
 800d960:	4b22      	ldr	r3, [pc, #136]	@ (800d9ec <LmhpComplianceOnMcpsIndication+0x348>)
 800d962:	2201      	movs	r2, #1
 800d964:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        break;
 800d968:	e24c      	b.n	800de04 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_DUT_JOIN_REQ:
    {
        CompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 800d96a:	4b21      	ldr	r3, [pc, #132]	@ (800d9f0 <LmhpComplianceOnMcpsIndication+0x34c>)
 800d96c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d96e:	2101      	movs	r1, #1
 800d970:	2002      	movs	r0, #2
 800d972:	4798      	blx	r3
        break;
 800d974:	e246      	b.n	800de04 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_SWITCH_CLASS_REQ:
    {
        // CLASS_A = 0, CLASS_B = 1, CLASS_C = 2
        ComplianceTestState.NewClass = ( DeviceClass_t ) mcpsIndication->Buffer[cmdIndex++];
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	689a      	ldr	r2, [r3, #8]
 800d97a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d97e:	1c59      	adds	r1, r3, #1
 800d980:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800d984:	4413      	add	r3, r2
 800d986:	781a      	ldrb	r2, [r3, #0]
 800d988:	4b18      	ldr	r3, [pc, #96]	@ (800d9ec <LmhpComplianceOnMcpsIndication+0x348>)
 800d98a:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
        ComplianceTestState.IsClassReqCmdPending = true;
 800d98e:	4b17      	ldr	r3, [pc, #92]	@ (800d9ec <LmhpComplianceOnMcpsIndication+0x348>)
 800d990:	2201      	movs	r2, #1
 800d992:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        break;
 800d996:	e235      	b.n	800de04 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_ADR_BIT_CHANGE_REQ:
    {
        MibRequestConfirm_t mibReq;
        mibReq.Type            = MIB_ADR;
 800d998:	2304      	movs	r3, #4
 800d99a:	733b      	strb	r3, [r7, #12]
        mibReq.Param.AdrEnable = mcpsIndication->Buffer[cmdIndex++];
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	689a      	ldr	r2, [r3, #8]
 800d9a0:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d9a4:	1c59      	adds	r1, r3, #1
 800d9a6:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800d9aa:	4413      	add	r3, r2
 800d9ac:	781b      	ldrb	r3, [r3, #0]
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	bf14      	ite	ne
 800d9b2:	2301      	movne	r3, #1
 800d9b4:	2300      	moveq	r3, #0
 800d9b6:	b2db      	uxtb	r3, r3
 800d9b8:	743b      	strb	r3, [r7, #16]

        LoRaMacMibSetRequestConfirm( &mibReq );
 800d9ba:	f107 030c 	add.w	r3, r7, #12
 800d9be:	4618      	mov	r0, r3
 800d9c0:	f004 fa14 	bl	8011dec <LoRaMacMibSetRequestConfirm>
        break;
 800d9c4:	e21e      	b.n	800de04 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_REGIONAL_DUTY_CYCLE_CTRL_REQ:
    {
        LoRaMacTestSetDutyCycleOn( mcpsIndication->Buffer[cmdIndex++] );
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	689a      	ldr	r2, [r3, #8]
 800d9ca:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d9ce:	1c59      	adds	r1, r3, #1
 800d9d0:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800d9d4:	4413      	add	r3, r2
 800d9d6:	781b      	ldrb	r3, [r3, #0]
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	bf14      	ite	ne
 800d9dc:	2301      	movne	r3, #1
 800d9de:	2300      	moveq	r3, #0
 800d9e0:	b2db      	uxtb	r3, r3
 800d9e2:	4618      	mov	r0, r3
 800d9e4:	f005 f830 	bl	8012a48 <LoRaMacTestSetDutyCycleOn>
        break;
 800d9e8:	e20c      	b.n	800de04 <LmhpComplianceOnMcpsIndication+0x760>
 800d9ea:	bf00      	nop
 800d9ec:	20000884 	.word	0x20000884
 800d9f0:	200000d0 	.word	0x200000d0
    }
    case COMPLIANCE_TX_PERIODICITY_CHANGE_REQ:
    {
        // Periodicity in milli-seconds
        uint32_t periodicity[] = { 0, 5000, 10000, 20000, 30000, 40000, 50000, 60000, 120000, 240000, 480000 };
 800d9f4:	4ba5      	ldr	r3, [pc, #660]	@ (800dc8c <LmhpComplianceOnMcpsIndication+0x5e8>)
 800d9f6:	f107 040c 	add.w	r4, r7, #12
 800d9fa:	461d      	mov	r5, r3
 800d9fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d9fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800da00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800da02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800da04:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800da08:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        uint8_t  index         = mcpsIndication->Buffer[cmdIndex++];
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	689a      	ldr	r2, [r3, #8]
 800da10:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800da14:	1c59      	adds	r1, r3, #1
 800da16:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800da1a:	4413      	add	r3, r2
 800da1c:	781b      	ldrb	r3, [r3, #0]
 800da1e:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c

        if( index < ( sizeof( periodicity ) / sizeof( uint32_t ) ) )
 800da22:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 800da26:	2b0a      	cmp	r3, #10
 800da28:	f200 81e5 	bhi.w	800ddf6 <LmhpComplianceOnMcpsIndication+0x752>
        {
            if( ComplianceParams->OnTxPeriodicityChanged != NULL )
 800da2c:	4b98      	ldr	r3, [pc, #608]	@ (800dc90 <LmhpComplianceOnMcpsIndication+0x5ec>)
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	685b      	ldr	r3, [r3, #4]
 800da32:	2b00      	cmp	r3, #0
 800da34:	f000 81df 	beq.w	800ddf6 <LmhpComplianceOnMcpsIndication+0x752>
            {
                ComplianceParams->OnTxPeriodicityChanged( periodicity[index] );
 800da38:	4b95      	ldr	r3, [pc, #596]	@ (800dc90 <LmhpComplianceOnMcpsIndication+0x5ec>)
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	685a      	ldr	r2, [r3, #4]
 800da3e:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 800da42:	009b      	lsls	r3, r3, #2
 800da44:	3390      	adds	r3, #144	@ 0x90
 800da46:	443b      	add	r3, r7
 800da48:	f853 3c84 	ldr.w	r3, [r3, #-132]
 800da4c:	4618      	mov	r0, r3
 800da4e:	4790      	blx	r2
            }
        }
        break;
 800da50:	e1d1      	b.n	800ddf6 <LmhpComplianceOnMcpsIndication+0x752>
    }
    case COMPLIANCE_TX_FRAMES_CTRL_REQ:
    {
        uint8_t frameType = mcpsIndication->Buffer[cmdIndex++];
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	689a      	ldr	r2, [r3, #8]
 800da56:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800da5a:	1c59      	adds	r1, r3, #1
 800da5c:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800da60:	4413      	add	r3, r2
 800da62:	781b      	ldrb	r3, [r3, #0]
 800da64:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d

        if( ( frameType == 1 ) || ( frameType == 2 ) )
 800da68:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 800da6c:	2b01      	cmp	r3, #1
 800da6e:	d004      	beq.n	800da7a <LmhpComplianceOnMcpsIndication+0x3d6>
 800da70:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 800da74:	2b02      	cmp	r3, #2
 800da76:	f040 81c0 	bne.w	800ddfa <LmhpComplianceOnMcpsIndication+0x756>
        {
            ComplianceTestState.IsTxConfirmed = ( frameType != 1 ) ? LORAMAC_HANDLER_CONFIRMED_MSG : LORAMAC_HANDLER_UNCONFIRMED_MSG;
 800da7a:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 800da7e:	2b01      	cmp	r3, #1
 800da80:	bf14      	ite	ne
 800da82:	2301      	movne	r3, #1
 800da84:	2300      	moveq	r3, #0
 800da86:	b2db      	uxtb	r3, r3
 800da88:	461a      	mov	r2, r3
 800da8a:	4b82      	ldr	r3, [pc, #520]	@ (800dc94 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800da8c:	721a      	strb	r2, [r3, #8]

            if( ComplianceParams->OnTxFrameCtrlChanged != NULL )
 800da8e:	4b80      	ldr	r3, [pc, #512]	@ (800dc90 <LmhpComplianceOnMcpsIndication+0x5ec>)
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	689b      	ldr	r3, [r3, #8]
 800da94:	2b00      	cmp	r3, #0
 800da96:	f000 81b0 	beq.w	800ddfa <LmhpComplianceOnMcpsIndication+0x756>
            {
                ComplianceParams->OnTxFrameCtrlChanged( ComplianceTestState.IsTxConfirmed );
 800da9a:	4b7d      	ldr	r3, [pc, #500]	@ (800dc90 <LmhpComplianceOnMcpsIndication+0x5ec>)
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	689b      	ldr	r3, [r3, #8]
 800daa0:	4a7c      	ldr	r2, [pc, #496]	@ (800dc94 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800daa2:	7a12      	ldrb	r2, [r2, #8]
 800daa4:	4610      	mov	r0, r2
 800daa6:	4798      	blx	r3
            }
        }
        break;
 800daa8:	e1a7      	b.n	800ddfa <LmhpComplianceOnMcpsIndication+0x756>
    }
    case COMPLIANCE_ECHO_PAYLOAD_REQ:
    {
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ECHO_PAYLOAD_ANS;
 800daaa:	4b7a      	ldr	r3, [pc, #488]	@ (800dc94 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800daac:	68da      	ldr	r2, [r3, #12]
 800daae:	4b79      	ldr	r3, [pc, #484]	@ (800dc94 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800dab0:	7a9b      	ldrb	r3, [r3, #10]
 800dab2:	1c59      	adds	r1, r3, #1
 800dab4:	b2c8      	uxtb	r0, r1
 800dab6:	4977      	ldr	r1, [pc, #476]	@ (800dc94 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800dab8:	7288      	strb	r0, [r1, #10]
 800daba:	4413      	add	r3, r2
 800dabc:	2208      	movs	r2, #8
 800dabe:	701a      	strb	r2, [r3, #0]

        for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 800dac0:	2301      	movs	r3, #1
 800dac2:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
 800dac6:	e019      	b.n	800dafc <LmhpComplianceOnMcpsIndication+0x458>
             i++ )
        {
            ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	689a      	ldr	r2, [r3, #8]
 800dacc:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800dad0:	1c59      	adds	r1, r3, #1
 800dad2:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800dad6:	4413      	add	r3, r2
 800dad8:	781a      	ldrb	r2, [r3, #0]
 800dada:	4b6e      	ldr	r3, [pc, #440]	@ (800dc94 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800dadc:	68d9      	ldr	r1, [r3, #12]
 800dade:	4b6d      	ldr	r3, [pc, #436]	@ (800dc94 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800dae0:	7a9b      	ldrb	r3, [r3, #10]
 800dae2:	1c58      	adds	r0, r3, #1
 800dae4:	b2c4      	uxtb	r4, r0
 800dae6:	486b      	ldr	r0, [pc, #428]	@ (800dc94 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800dae8:	7284      	strb	r4, [r0, #10]
 800daea:	440b      	add	r3, r1
 800daec:	3201      	adds	r2, #1
 800daee:	b2d2      	uxtb	r2, r2
 800daf0:	701a      	strb	r2, [r3, #0]
             i++ )
 800daf2:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 800daf6:	3301      	adds	r3, #1
 800daf8:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
        for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 800dafc:	4b65      	ldr	r3, [pc, #404]	@ (800dc94 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800dafe:	7a5a      	ldrb	r2, [r3, #9]
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	7b1b      	ldrb	r3, [r3, #12]
 800db04:	4293      	cmp	r3, r2
 800db06:	bf28      	it	cs
 800db08:	4613      	movcs	r3, r2
 800db0a:	b2db      	uxtb	r3, r3
 800db0c:	f897 208e 	ldrb.w	r2, [r7, #142]	@ 0x8e
 800db10:	429a      	cmp	r2, r3
 800db12:	d3d9      	bcc.n	800dac8 <LmhpComplianceOnMcpsIndication+0x424>
        }
        break;
 800db14:	e176      	b.n	800de04 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_RX_APP_CNT_REQ:
    {
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_RX_APP_CNT_ANS;
 800db16:	4b5f      	ldr	r3, [pc, #380]	@ (800dc94 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800db18:	68da      	ldr	r2, [r3, #12]
 800db1a:	4b5e      	ldr	r3, [pc, #376]	@ (800dc94 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800db1c:	7a9b      	ldrb	r3, [r3, #10]
 800db1e:	1c59      	adds	r1, r3, #1
 800db20:	b2c8      	uxtb	r0, r1
 800db22:	495c      	ldr	r1, [pc, #368]	@ (800dc94 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800db24:	7288      	strb	r0, [r1, #10]
 800db26:	4413      	add	r3, r2
 800db28:	2209      	movs	r2, #9
 800db2a:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt;
 800db2c:	4b59      	ldr	r3, [pc, #356]	@ (800dc94 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800db2e:	8a18      	ldrh	r0, [r3, #16]
 800db30:	4b58      	ldr	r3, [pc, #352]	@ (800dc94 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800db32:	68da      	ldr	r2, [r3, #12]
 800db34:	4b57      	ldr	r3, [pc, #348]	@ (800dc94 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800db36:	7a9b      	ldrb	r3, [r3, #10]
 800db38:	1c59      	adds	r1, r3, #1
 800db3a:	b2cc      	uxtb	r4, r1
 800db3c:	4955      	ldr	r1, [pc, #340]	@ (800dc94 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800db3e:	728c      	strb	r4, [r1, #10]
 800db40:	4413      	add	r3, r2
 800db42:	b2c2      	uxtb	r2, r0
 800db44:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt >> 8;
 800db46:	4b53      	ldr	r3, [pc, #332]	@ (800dc94 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800db48:	8a1b      	ldrh	r3, [r3, #16]
 800db4a:	0a1b      	lsrs	r3, r3, #8
 800db4c:	b298      	uxth	r0, r3
 800db4e:	4b51      	ldr	r3, [pc, #324]	@ (800dc94 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800db50:	68da      	ldr	r2, [r3, #12]
 800db52:	4b50      	ldr	r3, [pc, #320]	@ (800dc94 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800db54:	7a9b      	ldrb	r3, [r3, #10]
 800db56:	1c59      	adds	r1, r3, #1
 800db58:	b2cc      	uxtb	r4, r1
 800db5a:	494e      	ldr	r1, [pc, #312]	@ (800dc94 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800db5c:	728c      	strb	r4, [r1, #10]
 800db5e:	4413      	add	r3, r2
 800db60:	b2c2      	uxtb	r2, r0
 800db62:	701a      	strb	r2, [r3, #0]
        break;
 800db64:	e14e      	b.n	800de04 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_RX_APP_CNT_RESET_REQ:
    {
        ComplianceTestState.RxAppCnt = 0;
 800db66:	4b4b      	ldr	r3, [pc, #300]	@ (800dc94 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800db68:	2200      	movs	r2, #0
 800db6a:	821a      	strh	r2, [r3, #16]
        break;
 800db6c:	e14a      	b.n	800de04 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_LINK_CHECK_REQ:
    {
        MlmeReq_t mlmeReq;
        mlmeReq.Type = MLME_LINK_CHECK;
 800db6e:	2304      	movs	r3, #4
 800db70:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54

        LoRaMacMlmeRequest( &mlmeReq );
 800db74:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800db78:	4618      	mov	r0, r3
 800db7a:	f004 fca7 	bl	80124cc <LoRaMacMlmeRequest>
        break;
 800db7e:	e141      	b.n	800de04 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_DEVICE_TIME_REQ:
    {
        CompliancePackage.OnDeviceTimeRequest( );
 800db80:	4b45      	ldr	r3, [pc, #276]	@ (800dc98 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800db82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db84:	4798      	blx	r3
        break;
 800db86:	e13d      	b.n	800de04 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_PING_SLOT_INFO_REQ:
    {
        ComplianceTestState.ClassBStatus.PingSlotPeriodicity = mcpsIndication->Buffer[cmdIndex++];
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	689a      	ldr	r2, [r3, #8]
 800db8c:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800db90:	1c59      	adds	r1, r3, #1
 800db92:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800db96:	4413      	add	r3, r2
 800db98:	781a      	ldrb	r2, [r3, #0]
 800db9a:	4b3e      	ldr	r3, [pc, #248]	@ (800dc94 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800db9c:	755a      	strb	r2, [r3, #21]
        if( ComplianceParams->OnPingSlotPeriodicityChanged != NULL )
 800db9e:	4b3c      	ldr	r3, [pc, #240]	@ (800dc90 <LmhpComplianceOnMcpsIndication+0x5ec>)
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	68db      	ldr	r3, [r3, #12]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	f000 812a 	beq.w	800ddfe <LmhpComplianceOnMcpsIndication+0x75a>
        {
        ComplianceParams->OnPingSlotPeriodicityChanged( ComplianceTestState.ClassBStatus.PingSlotPeriodicity );
 800dbaa:	4b39      	ldr	r3, [pc, #228]	@ (800dc90 <LmhpComplianceOnMcpsIndication+0x5ec>)
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	68db      	ldr	r3, [r3, #12]
 800dbb0:	4a38      	ldr	r2, [pc, #224]	@ (800dc94 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800dbb2:	7d52      	ldrb	r2, [r2, #21]
 800dbb4:	4610      	mov	r0, r2
 800dbb6:	4798      	blx	r3
        }
        break;
 800dbb8:	e121      	b.n	800ddfe <LmhpComplianceOnMcpsIndication+0x75a>
#endif
    /* ST_WORKAROUND_END */
    case COMPLIANCE_TX_CW_REQ:
    {
        MlmeReq_t mlmeReq;
        if( mcpsIndication->BufferSize == 7 )
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	7b1b      	ldrb	r3, [r3, #12]
 800dbbe:	2b07      	cmp	r3, #7
 800dbc0:	f040 811f 	bne.w	800de02 <LmhpComplianceOnMcpsIndication+0x75e>
        {
            mlmeReq.Type = MLME_TXCW;
 800dbc4:	2305      	movs	r3, #5
 800dbc6:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
            mlmeReq.Req.TxCw.Timeout =
                ( uint16_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) );
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	689a      	ldr	r2, [r3, #8]
 800dbce:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800dbd2:	4413      	add	r3, r2
 800dbd4:	781b      	ldrb	r3, [r3, #0]
 800dbd6:	b21a      	sxth	r2, r3
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	6899      	ldr	r1, [r3, #8]
 800dbdc:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800dbe0:	3301      	adds	r3, #1
 800dbe2:	440b      	add	r3, r1
 800dbe4:	781b      	ldrb	r3, [r3, #0]
 800dbe6:	b21b      	sxth	r3, r3
 800dbe8:	021b      	lsls	r3, r3, #8
 800dbea:	b21b      	sxth	r3, r3
 800dbec:	4313      	orrs	r3, r2
 800dbee:	b21b      	sxth	r3, r3
 800dbf0:	b29b      	uxth	r3, r3
            mlmeReq.Req.TxCw.Timeout =
 800dbf2:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
            cmdIndex += 2;
 800dbf6:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800dbfa:	3302      	adds	r3, #2
 800dbfc:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
            mlmeReq.Req.TxCw.Frequency =
                ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	689a      	ldr	r2, [r3, #8]
 800dc04:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800dc08:	4413      	add	r3, r2
 800dc0a:	781b      	ldrb	r3, [r3, #0]
 800dc0c:	4619      	mov	r1, r3
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	689a      	ldr	r2, [r3, #8]
 800dc12:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800dc16:	3301      	adds	r3, #1
 800dc18:	4413      	add	r3, r2
 800dc1a:	781b      	ldrb	r3, [r3, #0]
 800dc1c:	021b      	lsls	r3, r3, #8
 800dc1e:	ea41 0203 	orr.w	r2, r1, r3
                               ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	6899      	ldr	r1, [r3, #8]
 800dc26:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800dc2a:	3302      	adds	r3, #2
 800dc2c:	440b      	add	r3, r1
 800dc2e:	781b      	ldrb	r3, [r3, #0]
 800dc30:	041b      	lsls	r3, r3, #16
                ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 800dc32:	4313      	orrs	r3, r2
 800dc34:	461a      	mov	r2, r3
                               ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 800dc36:	2364      	movs	r3, #100	@ 0x64
 800dc38:	fb02 f303 	mul.w	r3, r2, r3
            mlmeReq.Req.TxCw.Frequency =
 800dc3c:	64bb      	str	r3, [r7, #72]	@ 0x48
                100;
            cmdIndex += 3;
 800dc3e:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800dc42:	3303      	adds	r3, #3
 800dc44:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
            mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[cmdIndex++];
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	689a      	ldr	r2, [r3, #8]
 800dc4c:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800dc50:	1c59      	adds	r1, r3, #1
 800dc52:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800dc56:	4413      	add	r3, r2
 800dc58:	781b      	ldrb	r3, [r3, #0]
 800dc5a:	b25b      	sxtb	r3, r3
 800dc5c:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c

            LoRaMacMlmeRequest( &mlmeReq );
 800dc60:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800dc64:	4618      	mov	r0, r3
 800dc66:	f004 fc31 	bl	80124cc <LoRaMacMlmeRequest>
        }
        break;
 800dc6a:	e0ca      	b.n	800de02 <LmhpComplianceOnMcpsIndication+0x75e>
    }
    case COMPLIANCE_DUT_FPORT_224_DISABLE_REQ:
    {
        mibReq.Type = MIB_IS_CERT_FPORT_ON;
 800dc6c:	2339      	movs	r3, #57	@ 0x39
 800dc6e:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
        mibReq.Param.IsCertPortOn = false;
 800dc72:	2300      	movs	r3, #0
 800dc74:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
        LoRaMacMibSetRequestConfirm( &mibReq );
 800dc78:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800dc7c:	4618      	mov	r0, r3
 800dc7e:	f004 f8b5 	bl	8011dec <LoRaMacMibSetRequestConfirm>

        ComplianceTestState.IsResetCmdPending = true;
 800dc82:	4b04      	ldr	r3, [pc, #16]	@ (800dc94 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800dc84:	2201      	movs	r2, #1
 800dc86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        break;
 800dc8a:	e0bb      	b.n	800de04 <LmhpComplianceOnMcpsIndication+0x760>
 800dc8c:	0801ee8c 	.word	0x0801ee8c
 800dc90:	200008bc 	.word	0x200008bc
 800dc94:	20000884 	.word	0x20000884
 800dc98:	200000d0 	.word	0x200000d0
    {
        Version_t           lrwanVersion;
        Version_t           lrwanRpVersion;
        MibRequestConfirm_t mibReq;

        mibReq.Type = MIB_LORAWAN_VERSION;
 800dc9c:	232a      	movs	r3, #42	@ 0x2a
 800dc9e:	733b      	strb	r3, [r7, #12]

        LoRaMacMibGetRequestConfirm( &mibReq );
 800dca0:	f107 030c 	add.w	r3, r7, #12
 800dca4:	4618      	mov	r0, r3
 800dca6:	f003 fefb 	bl	8011aa0 <LoRaMacMibGetRequestConfirm>
        lrwanVersion   = mibReq.Param.LrWanVersion.LoRaWan;
 800dcaa:	693b      	ldr	r3, [r7, #16]
 800dcac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        lrwanRpVersion = mibReq.Param.LrWanVersion.LoRaWanRegion;
 800dcae:	697b      	ldr	r3, [r7, #20]
 800dcb0:	63bb      	str	r3, [r7, #56]	@ 0x38

        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_DUT_VERSION_ANS;
 800dcb2:	4b62      	ldr	r3, [pc, #392]	@ (800de3c <LmhpComplianceOnMcpsIndication+0x798>)
 800dcb4:	68da      	ldr	r2, [r3, #12]
 800dcb6:	4b61      	ldr	r3, [pc, #388]	@ (800de3c <LmhpComplianceOnMcpsIndication+0x798>)
 800dcb8:	7a9b      	ldrb	r3, [r3, #10]
 800dcba:	1c59      	adds	r1, r3, #1
 800dcbc:	b2c8      	uxtb	r0, r1
 800dcbe:	495f      	ldr	r1, [pc, #380]	@ (800de3c <LmhpComplianceOnMcpsIndication+0x798>)
 800dcc0:	7288      	strb	r0, [r1, #10]
 800dcc2:	4413      	add	r3, r2
 800dcc4:	227f      	movs	r2, #127	@ 0x7f
 800dcc6:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Major;
 800dcc8:	4b5d      	ldr	r3, [pc, #372]	@ (800de40 <LmhpComplianceOnMcpsIndication+0x79c>)
 800dcca:	681a      	ldr	r2, [r3, #0]
 800dccc:	4b5b      	ldr	r3, [pc, #364]	@ (800de3c <LmhpComplianceOnMcpsIndication+0x798>)
 800dcce:	68d9      	ldr	r1, [r3, #12]
 800dcd0:	4b5a      	ldr	r3, [pc, #360]	@ (800de3c <LmhpComplianceOnMcpsIndication+0x798>)
 800dcd2:	7a9b      	ldrb	r3, [r3, #10]
 800dcd4:	1c58      	adds	r0, r3, #1
 800dcd6:	b2c4      	uxtb	r4, r0
 800dcd8:	4858      	ldr	r0, [pc, #352]	@ (800de3c <LmhpComplianceOnMcpsIndication+0x798>)
 800dcda:	7284      	strb	r4, [r0, #10]
 800dcdc:	440b      	add	r3, r1
 800dcde:	78d2      	ldrb	r2, [r2, #3]
 800dce0:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Minor;
 800dce2:	4b57      	ldr	r3, [pc, #348]	@ (800de40 <LmhpComplianceOnMcpsIndication+0x79c>)
 800dce4:	681a      	ldr	r2, [r3, #0]
 800dce6:	4b55      	ldr	r3, [pc, #340]	@ (800de3c <LmhpComplianceOnMcpsIndication+0x798>)
 800dce8:	68d9      	ldr	r1, [r3, #12]
 800dcea:	4b54      	ldr	r3, [pc, #336]	@ (800de3c <LmhpComplianceOnMcpsIndication+0x798>)
 800dcec:	7a9b      	ldrb	r3, [r3, #10]
 800dcee:	1c58      	adds	r0, r3, #1
 800dcf0:	b2c4      	uxtb	r4, r0
 800dcf2:	4852      	ldr	r0, [pc, #328]	@ (800de3c <LmhpComplianceOnMcpsIndication+0x798>)
 800dcf4:	7284      	strb	r4, [r0, #10]
 800dcf6:	440b      	add	r3, r1
 800dcf8:	7892      	ldrb	r2, [r2, #2]
 800dcfa:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Patch;
 800dcfc:	4b50      	ldr	r3, [pc, #320]	@ (800de40 <LmhpComplianceOnMcpsIndication+0x79c>)
 800dcfe:	681a      	ldr	r2, [r3, #0]
 800dd00:	4b4e      	ldr	r3, [pc, #312]	@ (800de3c <LmhpComplianceOnMcpsIndication+0x798>)
 800dd02:	68d9      	ldr	r1, [r3, #12]
 800dd04:	4b4d      	ldr	r3, [pc, #308]	@ (800de3c <LmhpComplianceOnMcpsIndication+0x798>)
 800dd06:	7a9b      	ldrb	r3, [r3, #10]
 800dd08:	1c58      	adds	r0, r3, #1
 800dd0a:	b2c4      	uxtb	r4, r0
 800dd0c:	484b      	ldr	r0, [pc, #300]	@ (800de3c <LmhpComplianceOnMcpsIndication+0x798>)
 800dd0e:	7284      	strb	r4, [r0, #10]
 800dd10:	440b      	add	r3, r1
 800dd12:	7852      	ldrb	r2, [r2, #1]
 800dd14:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Revision;
 800dd16:	4b4a      	ldr	r3, [pc, #296]	@ (800de40 <LmhpComplianceOnMcpsIndication+0x79c>)
 800dd18:	681a      	ldr	r2, [r3, #0]
 800dd1a:	4b48      	ldr	r3, [pc, #288]	@ (800de3c <LmhpComplianceOnMcpsIndication+0x798>)
 800dd1c:	68d9      	ldr	r1, [r3, #12]
 800dd1e:	4b47      	ldr	r3, [pc, #284]	@ (800de3c <LmhpComplianceOnMcpsIndication+0x798>)
 800dd20:	7a9b      	ldrb	r3, [r3, #10]
 800dd22:	1c58      	adds	r0, r3, #1
 800dd24:	b2c4      	uxtb	r4, r0
 800dd26:	4845      	ldr	r0, [pc, #276]	@ (800de3c <LmhpComplianceOnMcpsIndication+0x798>)
 800dd28:	7284      	strb	r4, [r0, #10]
 800dd2a:	440b      	add	r3, r1
 800dd2c:	7812      	ldrb	r2, [r2, #0]
 800dd2e:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Major;
 800dd30:	4b42      	ldr	r3, [pc, #264]	@ (800de3c <LmhpComplianceOnMcpsIndication+0x798>)
 800dd32:	68da      	ldr	r2, [r3, #12]
 800dd34:	4b41      	ldr	r3, [pc, #260]	@ (800de3c <LmhpComplianceOnMcpsIndication+0x798>)
 800dd36:	7a9b      	ldrb	r3, [r3, #10]
 800dd38:	1c59      	adds	r1, r3, #1
 800dd3a:	b2c8      	uxtb	r0, r1
 800dd3c:	493f      	ldr	r1, [pc, #252]	@ (800de3c <LmhpComplianceOnMcpsIndication+0x798>)
 800dd3e:	7288      	strb	r0, [r1, #10]
 800dd40:	4413      	add	r3, r2
 800dd42:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800dd46:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Minor;
 800dd48:	4b3c      	ldr	r3, [pc, #240]	@ (800de3c <LmhpComplianceOnMcpsIndication+0x798>)
 800dd4a:	68da      	ldr	r2, [r3, #12]
 800dd4c:	4b3b      	ldr	r3, [pc, #236]	@ (800de3c <LmhpComplianceOnMcpsIndication+0x798>)
 800dd4e:	7a9b      	ldrb	r3, [r3, #10]
 800dd50:	1c59      	adds	r1, r3, #1
 800dd52:	b2c8      	uxtb	r0, r1
 800dd54:	4939      	ldr	r1, [pc, #228]	@ (800de3c <LmhpComplianceOnMcpsIndication+0x798>)
 800dd56:	7288      	strb	r0, [r1, #10]
 800dd58:	4413      	add	r3, r2
 800dd5a:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 800dd5e:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Patch;
 800dd60:	4b36      	ldr	r3, [pc, #216]	@ (800de3c <LmhpComplianceOnMcpsIndication+0x798>)
 800dd62:	68da      	ldr	r2, [r3, #12]
 800dd64:	4b35      	ldr	r3, [pc, #212]	@ (800de3c <LmhpComplianceOnMcpsIndication+0x798>)
 800dd66:	7a9b      	ldrb	r3, [r3, #10]
 800dd68:	1c59      	adds	r1, r3, #1
 800dd6a:	b2c8      	uxtb	r0, r1
 800dd6c:	4933      	ldr	r1, [pc, #204]	@ (800de3c <LmhpComplianceOnMcpsIndication+0x798>)
 800dd6e:	7288      	strb	r0, [r1, #10]
 800dd70:	4413      	add	r3, r2
 800dd72:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 800dd76:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Revision;
 800dd78:	4b30      	ldr	r3, [pc, #192]	@ (800de3c <LmhpComplianceOnMcpsIndication+0x798>)
 800dd7a:	68da      	ldr	r2, [r3, #12]
 800dd7c:	4b2f      	ldr	r3, [pc, #188]	@ (800de3c <LmhpComplianceOnMcpsIndication+0x798>)
 800dd7e:	7a9b      	ldrb	r3, [r3, #10]
 800dd80:	1c59      	adds	r1, r3, #1
 800dd82:	b2c8      	uxtb	r0, r1
 800dd84:	492d      	ldr	r1, [pc, #180]	@ (800de3c <LmhpComplianceOnMcpsIndication+0x798>)
 800dd86:	7288      	strb	r0, [r1, #10]
 800dd88:	4413      	add	r3, r2
 800dd8a:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 800dd8e:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Major;
 800dd90:	4b2a      	ldr	r3, [pc, #168]	@ (800de3c <LmhpComplianceOnMcpsIndication+0x798>)
 800dd92:	68da      	ldr	r2, [r3, #12]
 800dd94:	4b29      	ldr	r3, [pc, #164]	@ (800de3c <LmhpComplianceOnMcpsIndication+0x798>)
 800dd96:	7a9b      	ldrb	r3, [r3, #10]
 800dd98:	1c59      	adds	r1, r3, #1
 800dd9a:	b2c8      	uxtb	r0, r1
 800dd9c:	4927      	ldr	r1, [pc, #156]	@ (800de3c <LmhpComplianceOnMcpsIndication+0x798>)
 800dd9e:	7288      	strb	r0, [r1, #10]
 800dda0:	4413      	add	r3, r2
 800dda2:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 800dda6:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Minor;
 800dda8:	4b24      	ldr	r3, [pc, #144]	@ (800de3c <LmhpComplianceOnMcpsIndication+0x798>)
 800ddaa:	68da      	ldr	r2, [r3, #12]
 800ddac:	4b23      	ldr	r3, [pc, #140]	@ (800de3c <LmhpComplianceOnMcpsIndication+0x798>)
 800ddae:	7a9b      	ldrb	r3, [r3, #10]
 800ddb0:	1c59      	adds	r1, r3, #1
 800ddb2:	b2c8      	uxtb	r0, r1
 800ddb4:	4921      	ldr	r1, [pc, #132]	@ (800de3c <LmhpComplianceOnMcpsIndication+0x798>)
 800ddb6:	7288      	strb	r0, [r1, #10]
 800ddb8:	4413      	add	r3, r2
 800ddba:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 800ddbe:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Patch;
 800ddc0:	4b1e      	ldr	r3, [pc, #120]	@ (800de3c <LmhpComplianceOnMcpsIndication+0x798>)
 800ddc2:	68da      	ldr	r2, [r3, #12]
 800ddc4:	4b1d      	ldr	r3, [pc, #116]	@ (800de3c <LmhpComplianceOnMcpsIndication+0x798>)
 800ddc6:	7a9b      	ldrb	r3, [r3, #10]
 800ddc8:	1c59      	adds	r1, r3, #1
 800ddca:	b2c8      	uxtb	r0, r1
 800ddcc:	491b      	ldr	r1, [pc, #108]	@ (800de3c <LmhpComplianceOnMcpsIndication+0x798>)
 800ddce:	7288      	strb	r0, [r1, #10]
 800ddd0:	4413      	add	r3, r2
 800ddd2:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800ddd6:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Revision;
 800ddd8:	4b18      	ldr	r3, [pc, #96]	@ (800de3c <LmhpComplianceOnMcpsIndication+0x798>)
 800ddda:	68da      	ldr	r2, [r3, #12]
 800dddc:	4b17      	ldr	r3, [pc, #92]	@ (800de3c <LmhpComplianceOnMcpsIndication+0x798>)
 800ddde:	7a9b      	ldrb	r3, [r3, #10]
 800dde0:	1c59      	adds	r1, r3, #1
 800dde2:	b2c8      	uxtb	r0, r1
 800dde4:	4915      	ldr	r1, [pc, #84]	@ (800de3c <LmhpComplianceOnMcpsIndication+0x798>)
 800dde6:	7288      	strb	r0, [r1, #10]
 800dde8:	4413      	add	r3, r2
 800ddea:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800ddee:	701a      	strb	r2, [r3, #0]
        break;
 800ddf0:	e008      	b.n	800de04 <LmhpComplianceOnMcpsIndication+0x760>
    }
    default:
    {
        break;
 800ddf2:	bf00      	nop
 800ddf4:	e006      	b.n	800de04 <LmhpComplianceOnMcpsIndication+0x760>
        break;
 800ddf6:	bf00      	nop
 800ddf8:	e004      	b.n	800de04 <LmhpComplianceOnMcpsIndication+0x760>
        break;
 800ddfa:	bf00      	nop
 800ddfc:	e002      	b.n	800de04 <LmhpComplianceOnMcpsIndication+0x760>
        break;
 800ddfe:	bf00      	nop
 800de00:	e000      	b.n	800de04 <LmhpComplianceOnMcpsIndication+0x760>
        break;
 800de02:	bf00      	nop
    }
    }

    if( ComplianceTestState.DataBufferSize != 0 )
 800de04:	4b0d      	ldr	r3, [pc, #52]	@ (800de3c <LmhpComplianceOnMcpsIndication+0x798>)
 800de06:	7a9b      	ldrb	r3, [r3, #10]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d008      	beq.n	800de1e <LmhpComplianceOnMcpsIndication+0x77a>
    {
        TimerSetValue( &ProcessTimer, 1000 );
 800de0c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800de10:	480c      	ldr	r0, [pc, #48]	@ (800de44 <LmhpComplianceOnMcpsIndication+0x7a0>)
 800de12:	f00d fafd 	bl	801b410 <UTIL_TIMER_SetPeriod>
        TimerStart(&ProcessTimer);
 800de16:	480b      	ldr	r0, [pc, #44]	@ (800de44 <LmhpComplianceOnMcpsIndication+0x7a0>)
 800de18:	f00d fa1c 	bl	801b254 <UTIL_TIMER_Start>
 800de1c:	e00b      	b.n	800de36 <LmhpComplianceOnMcpsIndication+0x792>
    }
    else
    {
        // Abort any pending Tx as a new command has been processed
        TimerStop(&ProcessTimer);
 800de1e:	4809      	ldr	r0, [pc, #36]	@ (800de44 <LmhpComplianceOnMcpsIndication+0x7a0>)
 800de20:	f00d fa86 	bl	801b330 <UTIL_TIMER_Stop>
        ComplianceTestState.IsTxPending = false;
 800de24:	4b05      	ldr	r3, [pc, #20]	@ (800de3c <LmhpComplianceOnMcpsIndication+0x798>)
 800de26:	2200      	movs	r2, #0
 800de28:	705a      	strb	r2, [r3, #1]
 800de2a:	e004      	b.n	800de36 <LmhpComplianceOnMcpsIndication+0x792>
        return;
 800de2c:	bf00      	nop
 800de2e:	e002      	b.n	800de36 <LmhpComplianceOnMcpsIndication+0x792>
        return;
 800de30:	bf00      	nop
 800de32:	e000      	b.n	800de36 <LmhpComplianceOnMcpsIndication+0x792>
        return;
 800de34:	bf00      	nop
    }
}
 800de36:	3790      	adds	r7, #144	@ 0x90
 800de38:	46bd      	mov	sp, r7
 800de3a:	bdb0      	pop	{r4, r5, r7, pc}
 800de3c:	20000884 	.word	0x20000884
 800de40:	200008bc 	.word	0x200008bc
 800de44:	200008c0 	.word	0x200008c0

0800de48 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800de48:	b480      	push	{r7}
 800de4a:	b083      	sub	sp, #12
 800de4c:	af00      	add	r7, sp, #0
 800de4e:	6078      	str	r0, [r7, #4]
        break;
    }
#endif
    /* ST_WORKAROUND_END */
    default:
        break;
 800de50:	bf00      	nop
    }
}
 800de52:	bf00      	nop
 800de54:	370c      	adds	r7, #12
 800de56:	46bd      	mov	sp, r7
 800de58:	bc80      	pop	{r7}
 800de5a:	4770      	bx	lr

0800de5c <LmhpComplianceOnMlmeIndication>:

static void LmhpComplianceOnMlmeIndication( MlmeIndication_t* mlmeIndication )
{
 800de5c:	b480      	push	{r7}
 800de5e:	b083      	sub	sp, #12
 800de60:	af00      	add	r7, sp, #0
 800de62:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800de64:	4b05      	ldr	r3, [pc, #20]	@ (800de7c <LmhpComplianceOnMlmeIndication+0x20>)
 800de66:	781b      	ldrb	r3, [r3, #0]
 800de68:	f083 0301 	eor.w	r3, r3, #1
 800de6c:	b2db      	uxtb	r3, r3
 800de6e:	2b00      	cmp	r3, #0
    {
        return;
 800de70:	bf00      	nop
#endif
    /* ST_WORKAROUND_END */
    default:
        break;
    }
}
 800de72:	370c      	adds	r7, #12
 800de74:	46bd      	mov	sp, r7
 800de76:	bc80      	pop	{r7}
 800de78:	4770      	bx	lr
 800de7a:	bf00      	nop
 800de7c:	20000884 	.word	0x20000884

0800de80 <OnProcessTimer>:
}
#endif
/* ST_WORKAROUND_END */

static void OnProcessTimer( void *context )
{
 800de80:	b580      	push	{r7, lr}
 800de82:	b082      	sub	sp, #8
 800de84:	af00      	add	r7, sp, #0
 800de86:	6078      	str	r0, [r7, #4]
    ComplianceTestState.IsTxPending = true;
 800de88:	4b04      	ldr	r3, [pc, #16]	@ (800de9c <OnProcessTimer+0x1c>)
 800de8a:	2201      	movs	r2, #1
 800de8c:	705a      	strb	r2, [r3, #1]
    CompliancePackage.OnPackageProcessEvent();
 800de8e:	4b04      	ldr	r3, [pc, #16]	@ (800dea0 <OnProcessTimer+0x20>)
 800de90:	695b      	ldr	r3, [r3, #20]
 800de92:	4798      	blx	r3
}
 800de94:	bf00      	nop
 800de96:	3708      	adds	r7, #8
 800de98:	46bd      	mov	sp, r7
 800de9a:	bd80      	pop	{r7, pc}
 800de9c:	20000884 	.word	0x20000884
 800dea0:	200000d0 	.word	0x200000d0

0800dea4 <OnRadioTxDone>:
    int16_t Rssi;
    int8_t Snr;
}RxDoneParams;

static void OnRadioTxDone( void )
{
 800dea4:	b590      	push	{r4, r7, lr}
 800dea6:	b083      	sub	sp, #12
 800dea8:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800deaa:	f00d fb5b 	bl	801b564 <UTIL_TIMER_GetCurrentTime>
 800deae:	4603      	mov	r3, r0
 800deb0:	4a16      	ldr	r2, [pc, #88]	@ (800df0c <OnRadioTxDone+0x68>)
 800deb2:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800deb4:	4c16      	ldr	r4, [pc, #88]	@ (800df10 <OnRadioTxDone+0x6c>)
 800deb6:	463b      	mov	r3, r7
 800deb8:	4618      	mov	r0, r3
 800deba:	f00c fcd3 	bl	801a864 <SysTimeGet>
 800debe:	f504 734e 	add.w	r3, r4, #824	@ 0x338
 800dec2:	463a      	mov	r2, r7
 800dec4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800dec8:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 800decc:	4a11      	ldr	r2, [pc, #68]	@ (800df14 <OnRadioTxDone+0x70>)
 800dece:	7813      	ldrb	r3, [r2, #0]
 800ded0:	f043 0320 	orr.w	r3, r3, #32
 800ded4:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800ded6:	4b0e      	ldr	r3, [pc, #56]	@ (800df10 <OnRadioTxDone+0x6c>)
 800ded8:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d00a      	beq.n	800def6 <OnRadioTxDone+0x52>
 800dee0:	4b0b      	ldr	r3, [pc, #44]	@ (800df10 <OnRadioTxDone+0x6c>)
 800dee2:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800dee6:	691b      	ldr	r3, [r3, #16]
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d004      	beq.n	800def6 <OnRadioTxDone+0x52>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800deec:	4b08      	ldr	r3, [pc, #32]	@ (800df10 <OnRadioTxDone+0x6c>)
 800deee:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800def2:	691b      	ldr	r3, [r3, #16]
 800def4:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800def6:	4b08      	ldr	r3, [pc, #32]	@ (800df18 <OnRadioTxDone+0x74>)
 800def8:	2201      	movs	r2, #1
 800defa:	2100      	movs	r1, #0
 800defc:	2002      	movs	r0, #2
 800defe:	f00d fc21 	bl	801b744 <UTIL_ADV_TRACE_COND_FSend>
}
 800df02:	bf00      	nop
 800df04:	370c      	adds	r7, #12
 800df06:	46bd      	mov	sp, r7
 800df08:	bd90      	pop	{r4, r7, pc}
 800df0a:	bf00      	nop
 800df0c:	20001984 	.word	0x20001984
 800df10:	200008d8 	.word	0x200008d8
 800df14:	20001980 	.word	0x20001980
 800df18:	0801eeb8 	.word	0x0801eeb8

0800df1c <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800df1c:	b580      	push	{r7, lr}
 800df1e:	b084      	sub	sp, #16
 800df20:	af00      	add	r7, sp, #0
 800df22:	60f8      	str	r0, [r7, #12]
 800df24:	4608      	mov	r0, r1
 800df26:	4611      	mov	r1, r2
 800df28:	461a      	mov	r2, r3
 800df2a:	4603      	mov	r3, r0
 800df2c:	817b      	strh	r3, [r7, #10]
 800df2e:	460b      	mov	r3, r1
 800df30:	813b      	strh	r3, [r7, #8]
 800df32:	4613      	mov	r3, r2
 800df34:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800df36:	f00d fb15 	bl	801b564 <UTIL_TIMER_GetCurrentTime>
 800df3a:	4603      	mov	r3, r0
 800df3c:	4a18      	ldr	r2, [pc, #96]	@ (800dfa0 <OnRadioRxDone+0x84>)
 800df3e:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 800df40:	4a17      	ldr	r2, [pc, #92]	@ (800dfa0 <OnRadioRxDone+0x84>)
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 800df46:	4a16      	ldr	r2, [pc, #88]	@ (800dfa0 <OnRadioRxDone+0x84>)
 800df48:	897b      	ldrh	r3, [r7, #10]
 800df4a:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 800df4c:	4a14      	ldr	r2, [pc, #80]	@ (800dfa0 <OnRadioRxDone+0x84>)
 800df4e:	893b      	ldrh	r3, [r7, #8]
 800df50:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 800df52:	4a13      	ldr	r2, [pc, #76]	@ (800dfa0 <OnRadioRxDone+0x84>)
 800df54:	79fb      	ldrb	r3, [r7, #7]
 800df56:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 800df58:	4a12      	ldr	r2, [pc, #72]	@ (800dfa4 <OnRadioRxDone+0x88>)
 800df5a:	7813      	ldrb	r3, [r2, #0]
 800df5c:	f043 0310 	orr.w	r3, r3, #16
 800df60:	7013      	strb	r3, [r2, #0]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
 800df62:	4a10      	ldr	r2, [pc, #64]	@ (800dfa4 <OnRadioRxDone+0x88>)
 800df64:	7813      	ldrb	r3, [r2, #0]
 800df66:	f043 0301 	orr.w	r3, r3, #1
 800df6a:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800df6c:	4b0e      	ldr	r3, [pc, #56]	@ (800dfa8 <OnRadioRxDone+0x8c>)
 800df6e:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800df72:	2b00      	cmp	r3, #0
 800df74:	d00a      	beq.n	800df8c <OnRadioRxDone+0x70>
 800df76:	4b0c      	ldr	r3, [pc, #48]	@ (800dfa8 <OnRadioRxDone+0x8c>)
 800df78:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800df7c:	691b      	ldr	r3, [r3, #16]
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d004      	beq.n	800df8c <OnRadioRxDone+0x70>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800df82:	4b09      	ldr	r3, [pc, #36]	@ (800dfa8 <OnRadioRxDone+0x8c>)
 800df84:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800df88:	691b      	ldr	r3, [r3, #16]
 800df8a:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800df8c:	4b07      	ldr	r3, [pc, #28]	@ (800dfac <OnRadioRxDone+0x90>)
 800df8e:	2201      	movs	r2, #1
 800df90:	2100      	movs	r1, #0
 800df92:	2002      	movs	r0, #2
 800df94:	f00d fbd6 	bl	801b744 <UTIL_ADV_TRACE_COND_FSend>
}
 800df98:	bf00      	nop
 800df9a:	3710      	adds	r7, #16
 800df9c:	46bd      	mov	sp, r7
 800df9e:	bd80      	pop	{r7, pc}
 800dfa0:	20001988 	.word	0x20001988
 800dfa4:	20001980 	.word	0x20001980
 800dfa8:	200008d8 	.word	0x200008d8
 800dfac:	0801eec8 	.word	0x0801eec8

0800dfb0 <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800dfb0:	b580      	push	{r7, lr}
 800dfb2:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800dfb4:	4a0e      	ldr	r2, [pc, #56]	@ (800dff0 <OnRadioTxTimeout+0x40>)
 800dfb6:	7813      	ldrb	r3, [r2, #0]
 800dfb8:	f043 0308 	orr.w	r3, r3, #8
 800dfbc:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800dfbe:	4b0d      	ldr	r3, [pc, #52]	@ (800dff4 <OnRadioTxTimeout+0x44>)
 800dfc0:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d00a      	beq.n	800dfde <OnRadioTxTimeout+0x2e>
 800dfc8:	4b0a      	ldr	r3, [pc, #40]	@ (800dff4 <OnRadioTxTimeout+0x44>)
 800dfca:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800dfce:	691b      	ldr	r3, [r3, #16]
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d004      	beq.n	800dfde <OnRadioTxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800dfd4:	4b07      	ldr	r3, [pc, #28]	@ (800dff4 <OnRadioTxTimeout+0x44>)
 800dfd6:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800dfda:	691b      	ldr	r3, [r3, #16]
 800dfdc:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800dfde:	4b06      	ldr	r3, [pc, #24]	@ (800dff8 <OnRadioTxTimeout+0x48>)
 800dfe0:	2201      	movs	r2, #1
 800dfe2:	2100      	movs	r1, #0
 800dfe4:	2002      	movs	r0, #2
 800dfe6:	f00d fbad 	bl	801b744 <UTIL_ADV_TRACE_COND_FSend>
}
 800dfea:	bf00      	nop
 800dfec:	bd80      	pop	{r7, pc}
 800dfee:	bf00      	nop
 800dff0:	20001980 	.word	0x20001980
 800dff4:	200008d8 	.word	0x200008d8
 800dff8:	0801eed8 	.word	0x0801eed8

0800dffc <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800dffc:	b580      	push	{r7, lr}
 800dffe:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 800e000:	4a0b      	ldr	r2, [pc, #44]	@ (800e030 <OnRadioRxError+0x34>)
 800e002:	7813      	ldrb	r3, [r2, #0]
 800e004:	f043 0304 	orr.w	r3, r3, #4
 800e008:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800e00a:	4b0a      	ldr	r3, [pc, #40]	@ (800e034 <OnRadioRxError+0x38>)
 800e00c:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800e010:	2b00      	cmp	r3, #0
 800e012:	d00a      	beq.n	800e02a <OnRadioRxError+0x2e>
 800e014:	4b07      	ldr	r3, [pc, #28]	@ (800e034 <OnRadioRxError+0x38>)
 800e016:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800e01a:	691b      	ldr	r3, [r3, #16]
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d004      	beq.n	800e02a <OnRadioRxError+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800e020:	4b04      	ldr	r3, [pc, #16]	@ (800e034 <OnRadioRxError+0x38>)
 800e022:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800e026:	691b      	ldr	r3, [r3, #16]
 800e028:	4798      	blx	r3
    }
}
 800e02a:	bf00      	nop
 800e02c:	bd80      	pop	{r7, pc}
 800e02e:	bf00      	nop
 800e030:	20001980 	.word	0x20001980
 800e034:	200008d8 	.word	0x200008d8

0800e038 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 800e038:	b580      	push	{r7, lr}
 800e03a:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800e03c:	4a0e      	ldr	r2, [pc, #56]	@ (800e078 <OnRadioRxTimeout+0x40>)
 800e03e:	7813      	ldrb	r3, [r2, #0]
 800e040:	f043 0302 	orr.w	r3, r3, #2
 800e044:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800e046:	4b0d      	ldr	r3, [pc, #52]	@ (800e07c <OnRadioRxTimeout+0x44>)
 800e048:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d00a      	beq.n	800e066 <OnRadioRxTimeout+0x2e>
 800e050:	4b0a      	ldr	r3, [pc, #40]	@ (800e07c <OnRadioRxTimeout+0x44>)
 800e052:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800e056:	691b      	ldr	r3, [r3, #16]
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d004      	beq.n	800e066 <OnRadioRxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800e05c:	4b07      	ldr	r3, [pc, #28]	@ (800e07c <OnRadioRxTimeout+0x44>)
 800e05e:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800e062:	691b      	ldr	r3, [r3, #16]
 800e064:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800e066:	4b06      	ldr	r3, [pc, #24]	@ (800e080 <OnRadioRxTimeout+0x48>)
 800e068:	2201      	movs	r2, #1
 800e06a:	2100      	movs	r1, #0
 800e06c:	2002      	movs	r0, #2
 800e06e:	f00d fb69 	bl	801b744 <UTIL_ADV_TRACE_COND_FSend>
}
 800e072:	bf00      	nop
 800e074:	bd80      	pop	{r7, pc}
 800e076:	bf00      	nop
 800e078:	20001980 	.word	0x20001980
 800e07c:	200008d8 	.word	0x200008d8
 800e080:	0801eee8 	.word	0x0801eee8

0800e084 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 800e084:	b480      	push	{r7}
 800e086:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800e088:	4b08      	ldr	r3, [pc, #32]	@ (800e0ac <UpdateRxSlotIdleState+0x28>)
 800e08a:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800e08e:	2b02      	cmp	r3, #2
 800e090:	d004      	beq.n	800e09c <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800e092:	4b07      	ldr	r3, [pc, #28]	@ (800e0b0 <UpdateRxSlotIdleState+0x2c>)
 800e094:	2206      	movs	r2, #6
 800e096:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800e09a:	e003      	b.n	800e0a4 <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800e09c:	4b04      	ldr	r3, [pc, #16]	@ (800e0b0 <UpdateRxSlotIdleState+0x2c>)
 800e09e:	2202      	movs	r2, #2
 800e0a0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
}
 800e0a4:	bf00      	nop
 800e0a6:	46bd      	mov	sp, r7
 800e0a8:	bc80      	pop	{r7}
 800e0aa:	4770      	bx	lr
 800e0ac:	20000df8 	.word	0x20000df8
 800e0b0:	200008d8 	.word	0x200008d8

0800e0b4 <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 800e0b4:	b580      	push	{r7, lr}
 800e0b6:	b08e      	sub	sp, #56	@ 0x38
 800e0b8:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800e0ba:	4b3e      	ldr	r3, [pc, #248]	@ (800e1b4 <ProcessRadioTxDone+0x100>)
 800e0bc:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800e0c0:	2b02      	cmp	r3, #2
 800e0c2:	d002      	beq.n	800e0ca <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 800e0c4:	4b3c      	ldr	r3, [pc, #240]	@ (800e1b8 <ProcessRadioTxDone+0x104>)
 800e0c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0c8:	4798      	blx	r3
    }
#if ( !defined(DISABLE_LORAWAN_RX_WINDOW) || (DISABLE_LORAWAN_RX_WINDOW == 0) )
    // Setup timers
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 800e0ca:	4b3c      	ldr	r3, [pc, #240]	@ (800e1bc <ProcessRadioTxDone+0x108>)
 800e0cc:	f8d3 33b0 	ldr.w	r3, [r3, #944]	@ 0x3b0
 800e0d0:	4619      	mov	r1, r3
 800e0d2:	483b      	ldr	r0, [pc, #236]	@ (800e1c0 <ProcessRadioTxDone+0x10c>)
 800e0d4:	f00d f99c 	bl	801b410 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800e0d8:	4839      	ldr	r0, [pc, #228]	@ (800e1c0 <ProcessRadioTxDone+0x10c>)
 800e0da:	f00d f8bb 	bl	801b254 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 800e0de:	4b37      	ldr	r3, [pc, #220]	@ (800e1bc <ProcessRadioTxDone+0x108>)
 800e0e0:	f8d3 33b4 	ldr.w	r3, [r3, #948]	@ 0x3b4
 800e0e4:	4619      	mov	r1, r3
 800e0e6:	4837      	ldr	r0, [pc, #220]	@ (800e1c4 <ProcessRadioTxDone+0x110>)
 800e0e8:	f00d f992 	bl	801b410 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800e0ec:	4835      	ldr	r0, [pc, #212]	@ (800e1c4 <ProcessRadioTxDone+0x110>)
 800e0ee:	f00d f8b1 	bl	801b254 <UTIL_TIMER_Start>
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
        TimerStart( &MacCtx.AckTimeoutTimer );
    }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( MacCtx.NodeAckRequested == true )
 800e0f2:	4b32      	ldr	r3, [pc, #200]	@ (800e1bc <ProcessRadioTxDone+0x108>)
 800e0f4:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d01a      	beq.n	800e132 <ProcessRadioTxDone+0x7e>
    {
        getPhy.Attribute = PHY_RETRANSMIT_TIMEOUT;
 800e0fc:	2315      	movs	r3, #21
 800e0fe:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e102:	4b2c      	ldr	r3, [pc, #176]	@ (800e1b4 <ProcessRadioTxDone+0x100>)
 800e104:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e108:	f107 0220 	add.w	r2, r7, #32
 800e10c:	4611      	mov	r1, r2
 800e10e:	4618      	mov	r0, r3
 800e110:	f006 fd20 	bl	8014b54 <RegionGetPhyParam>
 800e114:	4603      	mov	r3, r0
 800e116:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.RetransmitTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800e118:	4b28      	ldr	r3, [pc, #160]	@ (800e1bc <ProcessRadioTxDone+0x108>)
 800e11a:	f8d3 23b4 	ldr.w	r2, [r3, #948]	@ 0x3b4
 800e11e:	69fb      	ldr	r3, [r7, #28]
 800e120:	4413      	add	r3, r2
 800e122:	4619      	mov	r1, r3
 800e124:	4828      	ldr	r0, [pc, #160]	@ (800e1c8 <ProcessRadioTxDone+0x114>)
 800e126:	f00d f973 	bl	801b410 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.RetransmitTimeoutTimer );
 800e12a:	4827      	ldr	r0, [pc, #156]	@ (800e1c8 <ProcessRadioTxDone+0x114>)
 800e12c:	f00d f892 	bl	801b254 <UTIL_TIMER_Start>
 800e130:	e003      	b.n	800e13a <ProcessRadioTxDone+0x86>
    }
    else
    {
        // Transmission successful, setup status directly
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800e132:	4b22      	ldr	r3, [pc, #136]	@ (800e1bc <ProcessRadioTxDone+0x108>)
 800e134:	2200      	movs	r2, #0
 800e136:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
    }
#endif /* LORAMAC_VERSION */

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800e13a:	4b24      	ldr	r3, [pc, #144]	@ (800e1cc <ProcessRadioTxDone+0x118>)
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	4a1d      	ldr	r2, [pc, #116]	@ (800e1b4 <ProcessRadioTxDone+0x100>)
 800e140:	62d3      	str	r3, [r2, #44]	@ 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 800e142:	4b1e      	ldr	r3, [pc, #120]	@ (800e1bc <ProcessRadioTxDone+0x108>)
 800e144:	f893 341f 	ldrb.w	r3, [r3, #1055]	@ 0x41f
 800e148:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800e14a:	4b20      	ldr	r3, [pc, #128]	@ (800e1cc <ProcessRadioTxDone+0x118>)
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800e150:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800e154:	4618      	mov	r0, r3
 800e156:	f00c fbbd 	bl	801a8d4 <SysTimeGetMcuTime>
 800e15a:	4638      	mov	r0, r7
 800e15c:	4b15      	ldr	r3, [pc, #84]	@ (800e1b4 <ProcessRadioTxDone+0x100>)
 800e15e:	f8d3 2114 	ldr.w	r2, [r3, #276]	@ 0x114
 800e162:	9200      	str	r2, [sp, #0]
 800e164:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800e168:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800e16c:	ca06      	ldmia	r2, {r1, r2}
 800e16e:	f00c fb12 	bl	801a796 <SysTimeSub>
 800e172:	f107 0314 	add.w	r3, r7, #20
 800e176:	463a      	mov	r2, r7
 800e178:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e17c:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800e180:	4b0e      	ldr	r3, [pc, #56]	@ (800e1bc <ProcessRadioTxDone+0x108>)
 800e182:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 800e186:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 800e188:	2301      	movs	r3, #1
 800e18a:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800e18c:	4b09      	ldr	r3, [pc, #36]	@ (800e1b4 <ProcessRadioTxDone+0x100>)
 800e18e:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800e192:	2b00      	cmp	r3, #0
 800e194:	d101      	bne.n	800e19a <ProcessRadioTxDone+0xe6>
    {
        txDone.Joined  = false;
 800e196:	2300      	movs	r3, #0
 800e198:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 800e19a:	4b06      	ldr	r3, [pc, #24]	@ (800e1b4 <ProcessRadioTxDone+0x100>)
 800e19c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e1a0:	f107 0208 	add.w	r2, r7, #8
 800e1a4:	4611      	mov	r1, r2
 800e1a6:	4618      	mov	r0, r3
 800e1a8:	f006 fcec 	bl	8014b84 <RegionSetBandTxDone>
    if( MacCtx.NodeAckRequested == false )
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
    }
#endif /* LORAMAC_VERSION */
}
 800e1ac:	bf00      	nop
 800e1ae:	3730      	adds	r7, #48	@ 0x30
 800e1b0:	46bd      	mov	sp, r7
 800e1b2:	bd80      	pop	{r7, pc}
 800e1b4:	20000df8 	.word	0x20000df8
 800e1b8:	0801f57c 	.word	0x0801f57c
 800e1bc:	200008d8 	.word	0x200008d8
 800e1c0:	20000c58 	.word	0x20000c58
 800e1c4:	20000c70 	.word	0x20000c70
 800e1c8:	20000cdc 	.word	0x20000cdc
 800e1cc:	20001984 	.word	0x20001984

0800e1d0 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800e1d0:	b580      	push	{r7, lr}
 800e1d2:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800e1d4:	4b10      	ldr	r3, [pc, #64]	@ (800e218 <PrepareRxDoneAbort+0x48>)
 800e1d6:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800e1da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e1de:	4a0e      	ldr	r2, [pc, #56]	@ (800e218 <PrepareRxDoneAbort+0x48>)
 800e1e0:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    if( MacCtx.NodeAckRequested == true )
 800e1e4:	4b0c      	ldr	r3, [pc, #48]	@ (800e218 <PrepareRxDoneAbort+0x48>)
 800e1e6:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d002      	beq.n	800e1f4 <PrepareRxDoneAbort+0x24>
    {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        OnAckTimeoutTimerEvent( NULL );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        OnRetransmitTimeoutTimerEvent( NULL );
 800e1ee:	2000      	movs	r0, #0
 800e1f0:	f001 f99c 	bl	800f52c <OnRetransmitTimeoutTimerEvent>
#endif /* LORAMAC_VERSION */
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 800e1f4:	4a08      	ldr	r2, [pc, #32]	@ (800e218 <PrepareRxDoneAbort+0x48>)
 800e1f6:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800e1fa:	f043 0302 	orr.w	r3, r3, #2
 800e1fe:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
    MacCtx.MacFlags.Bits.MacDone = 1;
 800e202:	4a05      	ldr	r2, [pc, #20]	@ (800e218 <PrepareRxDoneAbort+0x48>)
 800e204:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800e208:	f043 0320 	orr.w	r3, r3, #32
 800e20c:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495

    UpdateRxSlotIdleState( );
 800e210:	f7ff ff38 	bl	800e084 <UpdateRxSlotIdleState>
}
 800e214:	bf00      	nop
 800e216:	bd80      	pop	{r7, pc}
 800e218:	200008d8 	.word	0x200008d8

0800e21c <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 800e21c:	b590      	push	{r4, r7, lr}
 800e21e:	b0a7      	sub	sp, #156	@ 0x9c
 800e220:	af02      	add	r7, sp, #8
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800e222:	2312      	movs	r3, #18
 800e224:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 800e228:	4bbd      	ldr	r3, [pc, #756]	@ (800e520 <ProcessRadioRxDone+0x304>)
 800e22a:	685b      	ldr	r3, [r3, #4]
 800e22c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    uint16_t size = RxDoneParams.Size;
 800e230:	4bbb      	ldr	r3, [pc, #748]	@ (800e520 <ProcessRadioRxDone+0x304>)
 800e232:	891b      	ldrh	r3, [r3, #8]
 800e234:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
    int16_t rssi = RxDoneParams.Rssi;
 800e238:	4bb9      	ldr	r3, [pc, #740]	@ (800e520 <ProcessRadioRxDone+0x304>)
 800e23a:	895b      	ldrh	r3, [r3, #10]
 800e23c:	f8a7 3080 	strh.w	r3, [r7, #128]	@ 0x80
    int8_t snr = RxDoneParams.Snr;
 800e240:	4bb7      	ldr	r3, [pc, #732]	@ (800e520 <ProcessRadioRxDone+0x304>)
 800e242:	7b1b      	ldrb	r3, [r3, #12]
 800e244:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f

    uint8_t pktHeaderLen = 0;
 800e248:	2300      	movs	r3, #0
 800e24a:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e

    uint32_t downLinkCounter = 0;
 800e24e:	2300      	movs	r3, #0
 800e250:	60bb      	str	r3, [r7, #8]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800e252:	4bb4      	ldr	r3, [pc, #720]	@ (800e524 <ProcessRadioRxDone+0x308>)
 800e254:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800e258:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    uint8_t multicast = 0;
 800e25c:	2300      	movs	r3, #0
 800e25e:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800e262:	2301      	movs	r3, #1
 800e264:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
    FCntIdentifier_t fCntID;

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
 800e268:	4aaf      	ldr	r2, [pc, #700]	@ (800e528 <ProcessRadioRxDone+0x30c>)
 800e26a:	7813      	ldrb	r3, [r2, #0]
 800e26c:	f023 0301 	bic.w	r3, r3, #1
 800e270:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    MacCtx.McpsConfirm.AckReceived = false;
 800e272:	4bae      	ldr	r3, [pc, #696]	@ (800e52c <ProcessRadioRxDone+0x310>)
 800e274:	2200      	movs	r2, #0
 800e276:	f883 2448 	strb.w	r2, [r3, #1096]	@ 0x448
    MacCtx.RxStatus.Rssi = rssi;
 800e27a:	4aac      	ldr	r2, [pc, #688]	@ (800e52c <ProcessRadioRxDone+0x310>)
 800e27c:	f8b7 3080 	ldrh.w	r3, [r7, #128]	@ 0x80
 800e280:	f8a2 3490 	strh.w	r3, [r2, #1168]	@ 0x490
    MacCtx.RxStatus.Snr = snr;
 800e284:	4aa9      	ldr	r2, [pc, #676]	@ (800e52c <ProcessRadioRxDone+0x310>)
 800e286:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800e28a:	f882 3492 	strb.w	r3, [r2, #1170]	@ 0x492
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 800e28e:	4ba7      	ldr	r3, [pc, #668]	@ (800e52c <ProcessRadioRxDone+0x310>)
 800e290:	f893 2494 	ldrb.w	r2, [r3, #1172]	@ 0x494
 800e294:	4ba5      	ldr	r3, [pc, #660]	@ (800e52c <ProcessRadioRxDone+0x310>)
 800e296:	f883 2493 	strb.w	r2, [r3, #1171]	@ 0x493
    MacCtx.McpsIndication.Port = 0;
 800e29a:	4ba4      	ldr	r3, [pc, #656]	@ (800e52c <ProcessRadioRxDone+0x310>)
 800e29c:	2200      	movs	r2, #0
 800e29e:	f883 2427 	strb.w	r2, [r3, #1063]	@ 0x427
    MacCtx.McpsIndication.Multicast = 0;
 800e2a2:	4ba2      	ldr	r3, [pc, #648]	@ (800e52c <ProcessRadioRxDone+0x310>)
 800e2a4:	2200      	movs	r2, #0
 800e2a6:	f883 2426 	strb.w	r2, [r3, #1062]	@ 0x426
    MacCtx.McpsIndication.FramePending = 0;
 800e2aa:	4ba0      	ldr	r3, [pc, #640]	@ (800e52c <ProcessRadioRxDone+0x310>)
 800e2ac:	2200      	movs	r2, #0
 800e2ae:	f883 2429 	strb.w	r2, [r3, #1065]	@ 0x429
    MacCtx.McpsIndication.Buffer = NULL;
 800e2b2:	4b9e      	ldr	r3, [pc, #632]	@ (800e52c <ProcessRadioRxDone+0x310>)
 800e2b4:	2200      	movs	r2, #0
 800e2b6:	f8c3 242c 	str.w	r2, [r3, #1068]	@ 0x42c
    MacCtx.McpsIndication.BufferSize = 0;
 800e2ba:	4b9c      	ldr	r3, [pc, #624]	@ (800e52c <ProcessRadioRxDone+0x310>)
 800e2bc:	2200      	movs	r2, #0
 800e2be:	f883 2430 	strb.w	r2, [r3, #1072]	@ 0x430
    MacCtx.McpsIndication.RxData = false;
 800e2c2:	4b9a      	ldr	r3, [pc, #616]	@ (800e52c <ProcessRadioRxDone+0x310>)
 800e2c4:	2200      	movs	r2, #0
 800e2c6:	f883 2431 	strb.w	r2, [r3, #1073]	@ 0x431
    MacCtx.McpsIndication.AckReceived = false;
 800e2ca:	4b98      	ldr	r3, [pc, #608]	@ (800e52c <ProcessRadioRxDone+0x310>)
 800e2cc:	2200      	movs	r2, #0
 800e2ce:	f883 2432 	strb.w	r2, [r3, #1074]	@ 0x432
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800e2d2:	4b96      	ldr	r3, [pc, #600]	@ (800e52c <ProcessRadioRxDone+0x310>)
 800e2d4:	2200      	movs	r2, #0
 800e2d6:	f8c3 2434 	str.w	r2, [r3, #1076]	@ 0x434
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800e2da:	4b94      	ldr	r3, [pc, #592]	@ (800e52c <ProcessRadioRxDone+0x310>)
 800e2dc:	2200      	movs	r2, #0
 800e2de:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
    MacCtx.McpsIndication.DevAddress = 0;
 800e2e2:	4b92      	ldr	r3, [pc, #584]	@ (800e52c <ProcessRadioRxDone+0x310>)
 800e2e4:	2200      	movs	r2, #0
 800e2e6:	f8c3 2438 	str.w	r2, [r3, #1080]	@ 0x438
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800e2ea:	4b90      	ldr	r3, [pc, #576]	@ (800e52c <ProcessRadioRxDone+0x310>)
 800e2ec:	2200      	movs	r2, #0
 800e2ee:	f883 243c 	strb.w	r2, [r3, #1084]	@ 0x43c
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.McpsIndication.ResponseTimeout = 0;
 800e2f2:	4b8e      	ldr	r3, [pc, #568]	@ (800e52c <ProcessRadioRxDone+0x310>)
 800e2f4:	2200      	movs	r2, #0
 800e2f6:	f8c3 2440 	str.w	r2, [r3, #1088]	@ 0x440
#endif /* LORAMAC_VERSION */

    Radio.Sleep( );
 800e2fa:	4b8d      	ldr	r3, [pc, #564]	@ (800e530 <ProcessRadioRxDone+0x314>)
 800e2fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e2fe:	4798      	blx	r3

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.RxWindowTimer2 );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 800e300:	4b8a      	ldr	r3, [pc, #552]	@ (800e52c <ProcessRadioRxDone+0x310>)
 800e302:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800e306:	2b00      	cmp	r3, #0
 800e308:	d102      	bne.n	800e310 <ProcessRadioRxDone+0xf4>
    {
        TimerStop( &MacCtx.RxWindowTimer2 );
 800e30a:	488a      	ldr	r0, [pc, #552]	@ (800e534 <ProcessRadioRxDone+0x318>)
 800e30c:	f00d f810 	bl	801b330 <UTIL_TIMER_Stop>
    }
#endif /* LORAMAC_VERSION */

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800e310:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800e314:	4619      	mov	r1, r3
 800e316:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 800e31a:	f004 fcdb 	bl	8012cd4 <LoRaMacClassBRxBeacon>
 800e31e:	4603      	mov	r3, r0
 800e320:	2b00      	cmp	r3, #0
 800e322:	d00b      	beq.n	800e33c <ProcessRadioRxDone+0x120>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800e324:	4a81      	ldr	r2, [pc, #516]	@ (800e52c <ProcessRadioRxDone+0x310>)
 800e326:	f8b7 3080 	ldrh.w	r3, [r7, #128]	@ 0x80
 800e32a:	f8a2 3482 	strh.w	r3, [r2, #1154]	@ 0x482
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800e32e:	4a7f      	ldr	r2, [pc, #508]	@ (800e52c <ProcessRadioRxDone+0x310>)
 800e330:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800e334:	f882 3484 	strb.w	r3, [r2, #1156]	@ 0x484
        return;
 800e338:	f000 bc22 	b.w	800eb80 <ProcessRadioRxDone+0x964>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800e33c:	4b79      	ldr	r3, [pc, #484]	@ (800e524 <ProcessRadioRxDone+0x308>)
 800e33e:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800e342:	2b01      	cmp	r3, #1
 800e344:	d11e      	bne.n	800e384 <ProcessRadioRxDone+0x168>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800e346:	f004 fcd8 	bl	8012cfa <LoRaMacClassBIsPingExpected>
 800e34a:	4603      	mov	r3, r0
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d00a      	beq.n	800e366 <ProcessRadioRxDone+0x14a>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e350:	2000      	movs	r0, #0
 800e352:	f004 fc89 	bl	8012c68 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800e356:	2000      	movs	r0, #0
 800e358:	f004 fcaa 	bl	8012cb0 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800e35c:	4b73      	ldr	r3, [pc, #460]	@ (800e52c <ProcessRadioRxDone+0x310>)
 800e35e:	2204      	movs	r2, #4
 800e360:	f883 2493 	strb.w	r2, [r3, #1171]	@ 0x493
 800e364:	e00e      	b.n	800e384 <ProcessRadioRxDone+0x168>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800e366:	f004 fccf 	bl	8012d08 <LoRaMacClassBIsMulticastExpected>
 800e36a:	4603      	mov	r3, r0
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d009      	beq.n	800e384 <ProcessRadioRxDone+0x168>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e370:	2000      	movs	r0, #0
 800e372:	f004 fc83 	bl	8012c7c <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800e376:	2000      	movs	r0, #0
 800e378:	f004 fca3 	bl	8012cc2 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800e37c:	4b6b      	ldr	r3, [pc, #428]	@ (800e52c <ProcessRadioRxDone+0x310>)
 800e37e:	2205      	movs	r2, #5
 800e380:	f883 2493 	strb.w	r2, [r3, #1171]	@ 0x493
        }
    }

    macHdr.Value = payload[pktHeaderLen++];
 800e384:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800e388:	1c5a      	adds	r2, r3, #1
 800e38a:	f887 207e 	strb.w	r2, [r7, #126]	@ 0x7e
 800e38e:	461a      	mov	r2, r3
 800e390:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e394:	4413      	add	r3, r2
 800e396:	781b      	ldrb	r3, [r3, #0]
 800e398:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c

    switch( macHdr.Bits.MType )
 800e39c:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 800e3a0:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800e3a4:	b2db      	uxtb	r3, r3
 800e3a6:	3b01      	subs	r3, #1
 800e3a8:	2b06      	cmp	r3, #6
 800e3aa:	f200 83bd 	bhi.w	800eb28 <ProcessRadioRxDone+0x90c>
 800e3ae:	a201      	add	r2, pc, #4	@ (adr r2, 800e3b4 <ProcessRadioRxDone+0x198>)
 800e3b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3b4:	0800e3d1 	.word	0x0800e3d1
 800e3b8:	0800eb29 	.word	0x0800eb29
 800e3bc:	0800e565 	.word	0x0800e565
 800e3c0:	0800eb29 	.word	0x0800eb29
 800e3c4:	0800e55d 	.word	0x0800e55d
 800e3c8:	0800eb29 	.word	0x0800eb29
 800e3cc:	0800eabb 	.word	0x0800eabb
    {
        case FRAME_TYPE_JOIN_ACCEPT:
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800e3d0:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800e3d4:	2b10      	cmp	r3, #16
 800e3d6:	d806      	bhi.n	800e3e6 <ProcessRadioRxDone+0x1ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e3d8:	4b54      	ldr	r3, [pc, #336]	@ (800e52c <ProcessRadioRxDone+0x310>)
 800e3da:	2201      	movs	r2, #1
 800e3dc:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                PrepareRxDoneAbort( );
 800e3e0:	f7ff fef6 	bl	800e1d0 <PrepareRxDoneAbort>
                return;
 800e3e4:	e3cc      	b.n	800eb80 <ProcessRadioRxDone+0x964>
            }
            macMsgJoinAccept.Buffer = payload;
 800e3e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e3ea:	60fb      	str	r3, [r7, #12]
            macMsgJoinAccept.BufSize = size;
 800e3ec:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800e3f0:	b2db      	uxtb	r3, r3
 800e3f2:	743b      	strb	r3, [r7, #16]

            // Abort in case if the device isn't joined yet and no rejoin request is ongoing.
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800e3f4:	4b4b      	ldr	r3, [pc, #300]	@ (800e524 <ProcessRadioRxDone+0x308>)
 800e3f6:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d006      	beq.n	800e40c <ProcessRadioRxDone+0x1f0>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e3fe:	4b4b      	ldr	r3, [pc, #300]	@ (800e52c <ProcessRadioRxDone+0x310>)
 800e400:	2201      	movs	r2, #1
 800e402:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                PrepareRxDoneAbort( );
 800e406:	f7ff fee3 	bl	800e1d0 <PrepareRxDoneAbort>
                return;
 800e40a:	e3b9      	b.n	800eb80 <ProcessRadioRxDone+0x964>
            }
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 800e40c:	f7fe f876 	bl	800c4fc <SecureElementGetJoinEui>
 800e410:	4601      	mov	r1, r0
 800e412:	f107 030c 	add.w	r3, r7, #12
 800e416:	461a      	mov	r2, r3
 800e418:	20ff      	movs	r0, #255	@ 0xff
 800e41a:	f005 fe29 	bl	8014070 <LoRaMacCryptoHandleJoinAccept>
 800e41e:	4603      	mov	r3, r0
 800e420:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88

            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 800e424:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 800e428:	2b00      	cmp	r3, #0
 800e42a:	f040 8085 	bne.w	800e538 <ProcessRadioRxDone+0x31c>
            {
                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800e42e:	7d7b      	ldrb	r3, [r7, #21]
 800e430:	461a      	mov	r2, r3
 800e432:	4b3c      	ldr	r3, [pc, #240]	@ (800e524 <ProcessRadioRxDone+0x308>)
 800e434:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800e438:	4b3a      	ldr	r3, [pc, #232]	@ (800e524 <ProcessRadioRxDone+0x308>)
 800e43a:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800e43e:	7dbb      	ldrb	r3, [r7, #22]
 800e440:	021b      	lsls	r3, r3, #8
 800e442:	4313      	orrs	r3, r2
 800e444:	4a37      	ldr	r2, [pc, #220]	@ (800e524 <ProcessRadioRxDone+0x308>)
 800e446:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800e44a:	4b36      	ldr	r3, [pc, #216]	@ (800e524 <ProcessRadioRxDone+0x308>)
 800e44c:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800e450:	7dfb      	ldrb	r3, [r7, #23]
 800e452:	041b      	lsls	r3, r3, #16
 800e454:	4313      	orrs	r3, r2
 800e456:	4a33      	ldr	r2, [pc, #204]	@ (800e524 <ProcessRadioRxDone+0x308>)
 800e458:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800e45c:	69bb      	ldr	r3, [r7, #24]
 800e45e:	4a31      	ldr	r2, [pc, #196]	@ (800e524 <ProcessRadioRxDone+0x308>)
 800e460:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800e464:	7f3b      	ldrb	r3, [r7, #28]
 800e466:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800e46a:	b2db      	uxtb	r3, r3
 800e46c:	461a      	mov	r2, r3
 800e46e:	4b2d      	ldr	r3, [pc, #180]	@ (800e524 <ProcessRadioRxDone+0x308>)
 800e470:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800e474:	7f3b      	ldrb	r3, [r7, #28]
 800e476:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800e47a:	b2db      	uxtb	r3, r3
 800e47c:	461a      	mov	r2, r3
 800e47e:	4b29      	ldr	r3, [pc, #164]	@ (800e524 <ProcessRadioRxDone+0x308>)
 800e480:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800e484:	7f3b      	ldrb	r3, [r7, #28]
 800e486:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800e48a:	b2db      	uxtb	r3, r3
 800e48c:	461a      	mov	r2, r3
 800e48e:	4b25      	ldr	r3, [pc, #148]	@ (800e524 <ProcessRadioRxDone+0x308>)
 800e490:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800e494:	7f7b      	ldrb	r3, [r7, #29]
 800e496:	461a      	mov	r2, r3
 800e498:	4b22      	ldr	r3, [pc, #136]	@ (800e524 <ProcessRadioRxDone+0x308>)
 800e49a:	651a      	str	r2, [r3, #80]	@ 0x50
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 800e49c:	4b21      	ldr	r3, [pc, #132]	@ (800e524 <ProcessRadioRxDone+0x308>)
 800e49e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d102      	bne.n	800e4aa <ProcessRadioRxDone+0x28e>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 800e4a4:	4b1f      	ldr	r3, [pc, #124]	@ (800e524 <ProcessRadioRxDone+0x308>)
 800e4a6:	2201      	movs	r2, #1
 800e4a8:	651a      	str	r2, [r3, #80]	@ 0x50
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800e4aa:	4b1e      	ldr	r3, [pc, #120]	@ (800e524 <ProcessRadioRxDone+0x308>)
 800e4ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e4ae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800e4b2:	fb02 f303 	mul.w	r3, r2, r3
 800e4b6:	4a1b      	ldr	r2, [pc, #108]	@ (800e524 <ProcessRadioRxDone+0x308>)
 800e4b8:	6513      	str	r3, [r2, #80]	@ 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800e4ba:	4b1a      	ldr	r3, [pc, #104]	@ (800e524 <ProcessRadioRxDone+0x308>)
 800e4bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e4be:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800e4c2:	4a18      	ldr	r2, [pc, #96]	@ (800e524 <ProcessRadioRxDone+0x308>)
 800e4c4:	6553      	str	r3, [r2, #84]	@ 0x54

                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800e4c6:	4b17      	ldr	r3, [pc, #92]	@ (800e524 <ProcessRadioRxDone+0x308>)
 800e4c8:	2200      	movs	r2, #0
 800e4ca:	f883 211a 	strb.w	r2, [r3, #282]	@ 0x11a

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800e4ce:	f107 030c 	add.w	r3, r7, #12
 800e4d2:	3312      	adds	r3, #18
 800e4d4:	677b      	str	r3, [r7, #116]	@ 0x74
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 800e4d6:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800e4da:	b2db      	uxtb	r3, r3
 800e4dc:	3b11      	subs	r3, #17
 800e4de:	b2db      	uxtb	r3, r3
 800e4e0:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                // Apply the last tx channel
                applyCFList.JoinChannel = MacCtx.Channel;
 800e4e4:	4b11      	ldr	r3, [pc, #68]	@ (800e52c <ProcessRadioRxDone+0x310>)
 800e4e6:	f893 341f 	ldrb.w	r3, [r3, #1055]	@ 0x41f
 800e4ea:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
#endif /* LORAMAC_VERSION */

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800e4ee:	4b0d      	ldr	r3, [pc, #52]	@ (800e524 <ProcessRadioRxDone+0x308>)
 800e4f0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e4f4:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 800e4f8:	4611      	mov	r1, r2
 800e4fa:	4618      	mov	r0, r3
 800e4fc:	f006 fb7c 	bl	8014bf8 <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800e500:	4b08      	ldr	r3, [pc, #32]	@ (800e524 <ProcessRadioRxDone+0x308>)
 800e502:	2202      	movs	r2, #2
 800e504:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800e508:	2001      	movs	r0, #1
 800e50a:	f005 f8dd 	bl	80136c8 <LoRaMacConfirmQueueIsCmdActive>
 800e50e:	4603      	mov	r3, r0
 800e510:	2b00      	cmp	r3, #0
 800e512:	d01b      	beq.n	800e54c <ProcessRadioRxDone+0x330>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 800e514:	2101      	movs	r1, #1
 800e516:	2000      	movs	r0, #0
 800e518:	f005 f84a 	bl	80135b0 <LoRaMacConfirmQueueSetStatus>
 800e51c:	e016      	b.n	800e54c <ProcessRadioRxDone+0x330>
 800e51e:	bf00      	nop
 800e520:	20001988 	.word	0x20001988
 800e524:	20000df8 	.word	0x20000df8
 800e528:	20001980 	.word	0x20001980
 800e52c:	200008d8 	.word	0x200008d8
 800e530:	0801f57c 	.word	0x0801f57c
 800e534:	20000c70 	.word	0x20000c70
                }
            }
            else
            {
                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800e538:	2001      	movs	r0, #1
 800e53a:	f005 f8c5 	bl	80136c8 <LoRaMacConfirmQueueIsCmdActive>
 800e53e:	4603      	mov	r3, r0
 800e540:	2b00      	cmp	r3, #0
 800e542:	d003      	beq.n	800e54c <ProcessRadioRxDone+0x330>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800e544:	2101      	movs	r1, #1
 800e546:	2007      	movs	r0, #7
 800e548:	f005 f832 	bl	80135b0 <LoRaMacConfirmQueueSetStatus>
                }
            }
            MacCtx.MacFlags.Bits.MlmeInd = 1;
 800e54c:	4ab9      	ldr	r2, [pc, #740]	@ (800e834 <ProcessRadioRxDone+0x618>)
 800e54e:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800e552:	f043 0308 	orr.w	r3, r3, #8
 800e556:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
            break;
 800e55a:	e2ec      	b.n	800eb36 <ProcessRadioRxDone+0x91a>
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800e55c:	4bb5      	ldr	r3, [pc, #724]	@ (800e834 <ProcessRadioRxDone+0x618>)
 800e55e:	2201      	movs	r2, #1
 800e560:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800e564:	4bb4      	ldr	r3, [pc, #720]	@ (800e838 <ProcessRadioRxDone+0x61c>)
 800e566:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 800e56a:	f887 306a 	strb.w	r3, [r7, #106]	@ 0x6a
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800e56e:	4bb1      	ldr	r3, [pc, #708]	@ (800e834 <ProcessRadioRxDone+0x618>)
 800e570:	f893 3428 	ldrb.w	r3, [r3, #1064]	@ 0x428
 800e574:	b25b      	sxtb	r3, r3
 800e576:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800e57a:	230d      	movs	r3, #13
 800e57c:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68

            /* ST_WORKAROUND_BEGIN: Keep repeater feature */
            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800e580:	4bad      	ldr	r3, [pc, #692]	@ (800e838 <ProcessRadioRxDone+0x61c>)
 800e582:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800e586:	2b00      	cmp	r3, #0
 800e588:	d002      	beq.n	800e590 <ProcessRadioRxDone+0x374>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800e58a:	230e      	movs	r3, #14
 800e58c:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
            }
            /* ST_WORKAROUND_END */

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e590:	4ba9      	ldr	r3, [pc, #676]	@ (800e838 <ProcessRadioRxDone+0x61c>)
 800e592:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e596:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 800e59a:	4611      	mov	r1, r2
 800e59c:	4618      	mov	r0, r3
 800e59e:	f006 fad9 	bl	8014b54 <RegionGetPhyParam>
 800e5a2:	4603      	mov	r3, r0
 800e5a4:	667b      	str	r3, [r7, #100]	@ 0x64
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800e5a6:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800e5aa:	3b0d      	subs	r3, #13
 800e5ac:	b29b      	uxth	r3, r3
 800e5ae:	b21b      	sxth	r3, r3
 800e5b0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e5b4:	b21a      	sxth	r2, r3
 800e5b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e5b8:	b21b      	sxth	r3, r3
 800e5ba:	429a      	cmp	r2, r3
 800e5bc:	dc03      	bgt.n	800e5c6 <ProcessRadioRxDone+0x3aa>
 800e5be:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800e5c2:	2b0b      	cmp	r3, #11
 800e5c4:	d806      	bhi.n	800e5d4 <ProcessRadioRxDone+0x3b8>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e5c6:	4b9b      	ldr	r3, [pc, #620]	@ (800e834 <ProcessRadioRxDone+0x618>)
 800e5c8:	2201      	movs	r2, #1
 800e5ca:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                PrepareRxDoneAbort( );
 800e5ce:	f7ff fdff 	bl	800e1d0 <PrepareRxDoneAbort>
                return;
 800e5d2:	e2d5      	b.n	800eb80 <ProcessRadioRxDone+0x964>
            }
            macMsgData.Buffer = payload;
 800e5d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e5d8:	637b      	str	r3, [r7, #52]	@ 0x34
            macMsgData.BufSize = size;
 800e5da:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800e5de:	b2db      	uxtb	r3, r3
 800e5e0:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800e5e4:	4b95      	ldr	r3, [pc, #596]	@ (800e83c <ProcessRadioRxDone+0x620>)
 800e5e6:	65bb      	str	r3, [r7, #88]	@ 0x58
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800e5e8:	23ff      	movs	r3, #255	@ 0xff
 800e5ea:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800e5ee:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800e5f2:	4618      	mov	r0, r3
 800e5f4:	f006 f835 	bl	8014662 <LoRaMacParserData>
 800e5f8:	4603      	mov	r3, r0
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d006      	beq.n	800e60c <ProcessRadioRxDone+0x3f0>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e5fe:	4b8d      	ldr	r3, [pc, #564]	@ (800e834 <ProcessRadioRxDone+0x618>)
 800e600:	2201      	movs	r2, #1
 800e602:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                PrepareRxDoneAbort( );
 800e606:	f7ff fde3 	bl	800e1d0 <PrepareRxDoneAbort>
                return;
 800e60a:	e2b9      	b.n	800eb80 <ProcessRadioRxDone+0x964>
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            // Handle Class B
            // Check if we expect a ping or a multicast slot.
            if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800e60c:	4b8a      	ldr	r3, [pc, #552]	@ (800e838 <ProcessRadioRxDone+0x61c>)
 800e60e:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800e612:	2b01      	cmp	r3, #1
 800e614:	d132      	bne.n	800e67c <ProcessRadioRxDone+0x460>
            {
                if( LoRaMacClassBIsPingExpected( ) == true )
 800e616:	f004 fb70 	bl	8012cfa <LoRaMacClassBIsPingExpected>
 800e61a:	4603      	mov	r3, r0
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d014      	beq.n	800e64a <ProcessRadioRxDone+0x42e>
                {
                    LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e620:	2000      	movs	r0, #0
 800e622:	f004 fb21 	bl	8012c68 <LoRaMacClassBSetPingSlotState>
                    LoRaMacClassBPingSlotTimerEvent( NULL );
 800e626:	2000      	movs	r0, #0
 800e628:	f004 fb42 	bl	8012cb0 <LoRaMacClassBPingSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800e62c:	4b81      	ldr	r3, [pc, #516]	@ (800e834 <ProcessRadioRxDone+0x618>)
 800e62e:	2204      	movs	r2, #4
 800e630:	f883 2493 	strb.w	r2, [r3, #1171]	@ 0x493
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800e634:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e636:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800e63a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800e63e:	b2db      	uxtb	r3, r3
 800e640:	4619      	mov	r1, r3
 800e642:	4610      	mov	r0, r2
 800e644:	f004 fbe2 	bl	8012e0c <LoRaMacClassBSetFPendingBit>
 800e648:	e018      	b.n	800e67c <ProcessRadioRxDone+0x460>
                }
                else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800e64a:	f004 fb5d 	bl	8012d08 <LoRaMacClassBIsMulticastExpected>
 800e64e:	4603      	mov	r3, r0
 800e650:	2b00      	cmp	r3, #0
 800e652:	d013      	beq.n	800e67c <ProcessRadioRxDone+0x460>
                {
                    LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e654:	2000      	movs	r0, #0
 800e656:	f004 fb11 	bl	8012c7c <LoRaMacClassBSetMulticastSlotState>
                    LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800e65a:	2000      	movs	r0, #0
 800e65c:	f004 fb31 	bl	8012cc2 <LoRaMacClassBMulticastSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800e660:	4b74      	ldr	r3, [pc, #464]	@ (800e834 <ProcessRadioRxDone+0x618>)
 800e662:	2205      	movs	r2, #5
 800e664:	f883 2493 	strb.w	r2, [r3, #1171]	@ 0x493
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800e668:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e66a:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800e66e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800e672:	b2db      	uxtb	r3, r3
 800e674:	4619      	mov	r1, r3
 800e676:	4610      	mov	r0, r2
 800e678:	f004 fbc8 	bl	8012e0c <LoRaMacClassBSetFPendingBit>
                }
            }
#endif /* LORAMAC_VERSION */

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800e67c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e67e:	4a6d      	ldr	r2, [pc, #436]	@ (800e834 <ProcessRadioRxDone+0x618>)
 800e680:	f8c2 3438 	str.w	r3, [r2, #1080]	@ 0x438

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800e684:	1dba      	adds	r2, r7, #6
 800e686:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800e68a:	4611      	mov	r1, r2
 800e68c:	4618      	mov	r0, r3
 800e68e:	f002 fd1f 	bl	80110d0 <DetermineFrameType>
 800e692:	4603      	mov	r3, r0
 800e694:	2b00      	cmp	r3, #0
 800e696:	d006      	beq.n	800e6a6 <ProcessRadioRxDone+0x48a>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e698:	4b66      	ldr	r3, [pc, #408]	@ (800e834 <ProcessRadioRxDone+0x618>)
 800e69a:	2201      	movs	r2, #1
 800e69c:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                PrepareRxDoneAbort( );
 800e6a0:	f7ff fd96 	bl	800e1d0 <PrepareRxDoneAbort>
                return;
 800e6a4:	e26c      	b.n	800eb80 <ProcessRadioRxDone+0x964>
            }

            //Check if it is a multicast message
            multicast = 0;
 800e6a6:	2300      	movs	r3, #0
 800e6a8:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
            downLinkCounter = 0;
 800e6ac:	2300      	movs	r3, #0
 800e6ae:	60bb      	str	r3, [r7, #8]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800e6b0:	2300      	movs	r3, #0
 800e6b2:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89
 800e6b6:	e049      	b.n	800e74c <ProcessRadioRxDone+0x530>
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800e6b8:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 800e6bc:	4a5e      	ldr	r2, [pc, #376]	@ (800e838 <ProcessRadioRxDone+0x61c>)
 800e6be:	212c      	movs	r1, #44	@ 0x2c
 800e6c0:	fb01 f303 	mul.w	r3, r1, r3
 800e6c4:	4413      	add	r3, r2
 800e6c6:	33dc      	adds	r3, #220	@ 0xdc
 800e6c8:	681a      	ldr	r2, [r3, #0]
 800e6ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e6cc:	429a      	cmp	r2, r3
 800e6ce:	d138      	bne.n	800e742 <ProcessRadioRxDone+0x526>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800e6d0:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 800e6d4:	4a58      	ldr	r2, [pc, #352]	@ (800e838 <ProcessRadioRxDone+0x61c>)
 800e6d6:	212c      	movs	r1, #44	@ 0x2c
 800e6d8:	fb01 f303 	mul.w	r3, r1, r3
 800e6dc:	4413      	add	r3, r2
 800e6de:	33da      	adds	r3, #218	@ 0xda
 800e6e0:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d02d      	beq.n	800e742 <ProcessRadioRxDone+0x526>
                {
                    multicast = 1;
 800e6e6:	2301      	movs	r3, #1
 800e6e8:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 800e6ec:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 800e6f0:	4a51      	ldr	r2, [pc, #324]	@ (800e838 <ProcessRadioRxDone+0x61c>)
 800e6f2:	212c      	movs	r1, #44	@ 0x2c
 800e6f4:	fb01 f303 	mul.w	r3, r1, r3
 800e6f8:	4413      	add	r3, r2
 800e6fa:	33db      	adds	r3, #219	@ 0xdb
 800e6fc:	781b      	ldrb	r3, [r3, #0]
 800e6fe:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800e702:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 800e706:	4a4c      	ldr	r2, [pc, #304]	@ (800e838 <ProcessRadioRxDone+0x61c>)
 800e708:	212c      	movs	r1, #44	@ 0x2c
 800e70a:	fb01 f303 	mul.w	r3, r1, r3
 800e70e:	4413      	add	r3, r2
 800e710:	33f8      	adds	r3, #248	@ 0xf8
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	60bb      	str	r3, [r7, #8]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800e718:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 800e71c:	4a46      	ldr	r2, [pc, #280]	@ (800e838 <ProcessRadioRxDone+0x61c>)
 800e71e:	212c      	movs	r1, #44	@ 0x2c
 800e720:	fb01 f303 	mul.w	r3, r1, r3
 800e724:	4413      	add	r3, r2
 800e726:	33dc      	adds	r3, #220	@ 0xdc
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800e72e:	4b42      	ldr	r3, [pc, #264]	@ (800e838 <ProcessRadioRxDone+0x61c>)
 800e730:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800e734:	2b02      	cmp	r3, #2
 800e736:	d10e      	bne.n	800e756 <ProcessRadioRxDone+0x53a>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800e738:	4b3e      	ldr	r3, [pc, #248]	@ (800e834 <ProcessRadioRxDone+0x618>)
 800e73a:	2203      	movs	r2, #3
 800e73c:	f883 2493 	strb.w	r2, [r3, #1171]	@ 0x493
                    }
                    break;
 800e740:	e009      	b.n	800e756 <ProcessRadioRxDone+0x53a>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800e742:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 800e746:	3301      	adds	r3, #1
 800e748:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89
 800e74c:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 800e750:	2b00      	cmp	r3, #0
 800e752:	d0b1      	beq.n	800e6b8 <ProcessRadioRxDone+0x49c>
 800e754:	e000      	b.n	800e758 <ProcessRadioRxDone+0x53c>
                    break;
 800e756:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800e758:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 800e75c:	2b01      	cmp	r3, #1
 800e75e:	d117      	bne.n	800e790 <ProcessRadioRxDone+0x574>
 800e760:	79bb      	ldrb	r3, [r7, #6]
 800e762:	2b03      	cmp	r3, #3
 800e764:	d10d      	bne.n	800e782 <ProcessRadioRxDone+0x566>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800e766:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800e76a:	f003 0320 	and.w	r3, r3, #32
 800e76e:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800e770:	2b00      	cmp	r3, #0
 800e772:	d106      	bne.n	800e782 <ProcessRadioRxDone+0x566>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 800e774:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800e778:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e77c:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d006      	beq.n	800e790 <ProcessRadioRxDone+0x574>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e782:	4b2c      	ldr	r3, [pc, #176]	@ (800e834 <ProcessRadioRxDone+0x618>)
 800e784:	2201      	movs	r2, #1
 800e786:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                PrepareRxDoneAbort( );
 800e78a:	f7ff fd21 	bl	800e1d0 <PrepareRxDoneAbort>
                return;
 800e78e:	e1f7      	b.n	800eb80 <ProcessRadioRxDone+0x964>
                PrepareRxDoneAbort( );
                return;
            }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, &fCntID, &downLinkCounter );
 800e790:	79b9      	ldrb	r1, [r7, #6]
 800e792:	4c29      	ldr	r4, [pc, #164]	@ (800e838 <ProcessRadioRxDone+0x61c>)
 800e794:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800e798:	f897 008a 	ldrb.w	r0, [r7, #138]	@ 0x8a
 800e79c:	f107 0308 	add.w	r3, r7, #8
 800e7a0:	9301      	str	r3, [sp, #4]
 800e7a2:	1dfb      	adds	r3, r7, #7
 800e7a4:	9300      	str	r3, [sp, #0]
 800e7a6:	f8d4 3118 	ldr.w	r3, [r4, #280]	@ 0x118
 800e7aa:	f000 fee7 	bl	800f57c <GetFCntDown>
 800e7ae:	4603      	mov	r3, r0
 800e7b0:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800e7b4:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d017      	beq.n	800e7ec <ProcessRadioRxDone+0x5d0>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800e7bc:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 800e7c0:	2b07      	cmp	r3, #7
 800e7c2:	d104      	bne.n	800e7ce <ProcessRadioRxDone+0x5b2>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800e7c4:	4b1b      	ldr	r3, [pc, #108]	@ (800e834 <ProcessRadioRxDone+0x618>)
 800e7c6:	2208      	movs	r2, #8
 800e7c8:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
 800e7cc:	e003      	b.n	800e7d6 <ProcessRadioRxDone+0x5ba>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e7ce:	4b19      	ldr	r3, [pc, #100]	@ (800e834 <ProcessRadioRxDone+0x618>)
 800e7d0:	2201      	movs	r2, #1
 800e7d2:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800e7d6:	68bb      	ldr	r3, [r7, #8]
 800e7d8:	4a16      	ldr	r2, [pc, #88]	@ (800e834 <ProcessRadioRxDone+0x618>)
 800e7da:	f8c2 3434 	str.w	r3, [r2, #1076]	@ 0x434
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800e7de:	68bb      	ldr	r3, [r7, #8]
 800e7e0:	4a14      	ldr	r2, [pc, #80]	@ (800e834 <ProcessRadioRxDone+0x618>)
 800e7e2:	f8c2 3470 	str.w	r3, [r2, #1136]	@ 0x470
                PrepareRxDoneAbort( );
 800e7e6:	f7ff fcf3 	bl	800e1d0 <PrepareRxDoneAbort>
                return;
 800e7ea:	e1c9      	b.n	800eb80 <ProcessRadioRxDone+0x964>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800e7ec:	79fa      	ldrb	r2, [r7, #7]
 800e7ee:	68b9      	ldr	r1, [r7, #8]
 800e7f0:	f897 008a 	ldrb.w	r0, [r7, #138]	@ 0x8a
 800e7f4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800e7f8:	9300      	str	r3, [sp, #0]
 800e7fa:	460b      	mov	r3, r1
 800e7fc:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 800e800:	f005 fd80 	bl	8014304 <LoRaMacCryptoUnsecureMessage>
 800e804:	4603      	mov	r3, r0
 800e806:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800e80a:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d016      	beq.n	800e840 <ProcessRadioRxDone+0x624>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800e812:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 800e816:	2b02      	cmp	r3, #2
 800e818:	d104      	bne.n	800e824 <ProcessRadioRxDone+0x608>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800e81a:	4b06      	ldr	r3, [pc, #24]	@ (800e834 <ProcessRadioRxDone+0x618>)
 800e81c:	220a      	movs	r2, #10
 800e81e:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
 800e822:	e003      	b.n	800e82c <ProcessRadioRxDone+0x610>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800e824:	4b03      	ldr	r3, [pc, #12]	@ (800e834 <ProcessRadioRxDone+0x618>)
 800e826:	220b      	movs	r2, #11
 800e828:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                }
                PrepareRxDoneAbort( );
 800e82c:	f7ff fcd0 	bl	800e1d0 <PrepareRxDoneAbort>
                return;
 800e830:	e1a6      	b.n	800eb80 <ProcessRadioRxDone+0x964>
 800e832:	bf00      	nop
 800e834:	200008d8 	.word	0x200008d8
 800e838:	20000df8 	.word	0x20000df8
 800e83c:	20000b10 	.word	0x20000b10
            }
#endif /* LORAMAC_VERSION */

            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800e840:	4bb5      	ldr	r3, [pc, #724]	@ (800eb18 <ProcessRadioRxDone+0x8fc>)
 800e842:	2200      	movs	r2, #0
 800e844:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
            MacCtx.McpsIndication.Multicast = multicast;
 800e848:	4ab3      	ldr	r2, [pc, #716]	@ (800eb18 <ProcessRadioRxDone+0x8fc>)
 800e84a:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 800e84e:	f882 3426 	strb.w	r3, [r2, #1062]	@ 0x426
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 800e852:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800e856:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800e85a:	b2db      	uxtb	r3, r3
 800e85c:	461a      	mov	r2, r3
 800e85e:	4bae      	ldr	r3, [pc, #696]	@ (800eb18 <ProcessRadioRxDone+0x8fc>)
 800e860:	f883 2429 	strb.w	r2, [r3, #1065]	@ 0x429
            MacCtx.McpsIndication.Buffer = NULL;
 800e864:	4bac      	ldr	r3, [pc, #688]	@ (800eb18 <ProcessRadioRxDone+0x8fc>)
 800e866:	2200      	movs	r2, #0
 800e868:	f8c3 242c 	str.w	r2, [r3, #1068]	@ 0x42c
            MacCtx.McpsIndication.BufferSize = 0;
 800e86c:	4baa      	ldr	r3, [pc, #680]	@ (800eb18 <ProcessRadioRxDone+0x8fc>)
 800e86e:	2200      	movs	r2, #0
 800e870:	f883 2430 	strb.w	r2, [r3, #1072]	@ 0x430
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800e874:	68bb      	ldr	r3, [r7, #8]
 800e876:	4aa8      	ldr	r2, [pc, #672]	@ (800eb18 <ProcessRadioRxDone+0x8fc>)
 800e878:	f8c2 3434 	str.w	r3, [r2, #1076]	@ 0x434
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800e87c:	68bb      	ldr	r3, [r7, #8]
 800e87e:	4aa6      	ldr	r2, [pc, #664]	@ (800eb18 <ProcessRadioRxDone+0x8fc>)
 800e880:	f8c2 3470 	str.w	r3, [r2, #1136]	@ 0x470
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800e884:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800e888:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e88c:	b2db      	uxtb	r3, r3
 800e88e:	2b00      	cmp	r3, #0
 800e890:	bf14      	ite	ne
 800e892:	2301      	movne	r3, #1
 800e894:	2300      	moveq	r3, #0
 800e896:	b2da      	uxtb	r2, r3
 800e898:	4b9f      	ldr	r3, [pc, #636]	@ (800eb18 <ProcessRadioRxDone+0x8fc>)
 800e89a:	f883 2432 	strb.w	r2, [r3, #1074]	@ 0x432

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800e89e:	4b9e      	ldr	r3, [pc, #632]	@ (800eb18 <ProcessRadioRxDone+0x8fc>)
 800e8a0:	2200      	movs	r2, #0
 800e8a2:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800e8a6:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800e8aa:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e8ae:	b2db      	uxtb	r3, r3
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	bf14      	ite	ne
 800e8b4:	2301      	movne	r3, #1
 800e8b6:	2300      	moveq	r3, #0
 800e8b8:	b2da      	uxtb	r2, r3
 800e8ba:	4b97      	ldr	r3, [pc, #604]	@ (800eb18 <ProcessRadioRxDone+0x8fc>)
 800e8bc:	f883 2448 	strb.w	r2, [r3, #1096]	@ 0x448

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800e8c0:	4b95      	ldr	r3, [pc, #596]	@ (800eb18 <ProcessRadioRxDone+0x8fc>)
 800e8c2:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d004      	beq.n	800e8d4 <ProcessRadioRxDone+0x6b8>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800e8ca:	4b93      	ldr	r3, [pc, #588]	@ (800eb18 <ProcessRadioRxDone+0x8fc>)
 800e8cc:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800e8d0:	2b01      	cmp	r3, #1
 800e8d2:	d106      	bne.n	800e8e2 <ProcessRadioRxDone+0x6c6>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 800e8d4:	4b91      	ldr	r3, [pc, #580]	@ (800eb1c <ProcessRadioRxDone+0x900>)
 800e8d6:	2200      	movs	r2, #0
 800e8d8:	629a      	str	r2, [r3, #40]	@ 0x28
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                Nvm.MacGroup2.DownlinkReceived = true;
 800e8da:	4b90      	ldr	r3, [pc, #576]	@ (800eb1c <ProcessRadioRxDone+0x900>)
 800e8dc:	2201      	movs	r2, #1
 800e8de:	f883 210a 	strb.w	r2, [r3, #266]	@ 0x10a
#endif /* LORAMAC_VERSION */
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 800e8e2:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 800e8e6:	2b01      	cmp	r3, #1
 800e8e8:	d104      	bne.n	800e8f4 <ProcessRadioRxDone+0x6d8>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800e8ea:	4b8b      	ldr	r3, [pc, #556]	@ (800eb18 <ProcessRadioRxDone+0x8fc>)
 800e8ec:	2202      	movs	r2, #2
 800e8ee:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
 800e8f2:	e034      	b.n	800e95e <ProcessRadioRxDone+0x742>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800e8f4:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 800e8f8:	f023 031f 	bic.w	r3, r3, #31
 800e8fc:	b2db      	uxtb	r3, r3
 800e8fe:	2ba0      	cmp	r3, #160	@ 0xa0
 800e900:	d125      	bne.n	800e94e <ProcessRadioRxDone+0x732>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 800e902:	4b86      	ldr	r3, [pc, #536]	@ (800eb1c <ProcessRadioRxDone+0x900>)
 800e904:	2201      	movs	r2, #1
 800e906:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800e90a:	4b84      	ldr	r3, [pc, #528]	@ (800eb1c <ProcessRadioRxDone+0x900>)
 800e90c:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 800e910:	2b00      	cmp	r3, #0
 800e912:	d102      	bne.n	800e91a <ProcessRadioRxDone+0x6fe>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 800e914:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e916:	4a81      	ldr	r2, [pc, #516]	@ (800eb1c <ProcessRadioRxDone+0x900>)
 800e918:	6353      	str	r3, [r2, #52]	@ 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800e91a:	4b7f      	ldr	r3, [pc, #508]	@ (800eb18 <ProcessRadioRxDone+0x8fc>)
 800e91c:	2201      	movs	r2, #1
 800e91e:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                    // Handle response timeout for class c and class b downlinks
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800e922:	4b7d      	ldr	r3, [pc, #500]	@ (800eb18 <ProcessRadioRxDone+0x8fc>)
 800e924:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d018      	beq.n	800e95e <ProcessRadioRxDone+0x742>
                        ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) )
 800e92c:	4b7a      	ldr	r3, [pc, #488]	@ (800eb18 <ProcessRadioRxDone+0x8fc>)
 800e92e:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800e932:	2b01      	cmp	r3, #1
 800e934:	d013      	beq.n	800e95e <ProcessRadioRxDone+0x742>
                    {
                        // Calculate timeout
                        MacCtx.McpsIndication.ResponseTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 800e936:	4b79      	ldr	r3, [pc, #484]	@ (800eb1c <ProcessRadioRxDone+0x900>)
 800e938:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e93c:	4a76      	ldr	r2, [pc, #472]	@ (800eb18 <ProcessRadioRxDone+0x8fc>)
 800e93e:	f8c2 3440 	str.w	r3, [r2, #1088]	@ 0x440
                        MacCtx.ResponseTimeoutStartTime = RxDoneParams.LastRxDone;
 800e942:	4b77      	ldr	r3, [pc, #476]	@ (800eb20 <ProcessRadioRxDone+0x904>)
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	4a74      	ldr	r2, [pc, #464]	@ (800eb18 <ProcessRadioRxDone+0x8fc>)
 800e948:	f8c2 349c 	str.w	r3, [r2, #1180]	@ 0x49c
 800e94c:	e007      	b.n	800e95e <ProcessRadioRxDone+0x742>
                    }
#endif /* LORAMAC_VERSION */
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 800e94e:	4b73      	ldr	r3, [pc, #460]	@ (800eb1c <ProcessRadioRxDone+0x900>)
 800e950:	2200      	movs	r2, #0
 800e952:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800e956:	4b70      	ldr	r3, [pc, #448]	@ (800eb18 <ProcessRadioRxDone+0x8fc>)
 800e958:	2200      	movs	r2, #0
 800e95a:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
                }
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800e95e:	4b6e      	ldr	r3, [pc, #440]	@ (800eb18 <ProcessRadioRxDone+0x8fc>)
 800e960:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800e964:	4a6c      	ldr	r2, [pc, #432]	@ (800eb18 <ProcessRadioRxDone+0x8fc>)
 800e966:	f892 2444 	ldrb.w	r2, [r2, #1092]	@ 0x444
 800e96a:	f897 1040 	ldrb.w	r1, [r7, #64]	@ 0x40
 800e96e:	4618      	mov	r0, r3
 800e970:	f001 ff96 	bl	80108a0 <RemoveMacCommands>

            switch( fType )
 800e974:	79bb      	ldrb	r3, [r7, #6]
 800e976:	2b03      	cmp	r3, #3
 800e978:	d873      	bhi.n	800ea62 <ProcessRadioRxDone+0x846>
 800e97a:	a201      	add	r2, pc, #4	@ (adr r2, 800e980 <ProcessRadioRxDone+0x764>)
 800e97c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e980:	0800e991 	.word	0x0800e991
 800e984:	0800e9e1 	.word	0x0800e9e1
 800e988:	0800ea17 	.word	0x0800ea17
 800e98c:	0800ea3d 	.word	0x0800ea3d
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800e990:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800e994:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800e998:	b2db      	uxtb	r3, r3
 800e99a:	461c      	mov	r4, r3
 800e99c:	4b5e      	ldr	r3, [pc, #376]	@ (800eb18 <ProcessRadioRxDone+0x8fc>)
 800e99e:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800e9a2:	f997 107f 	ldrsb.w	r1, [r7, #127]	@ 0x7f
 800e9a6:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800e9aa:	f102 0010 	add.w	r0, r2, #16
 800e9ae:	9300      	str	r3, [sp, #0]
 800e9b0:	460b      	mov	r3, r1
 800e9b2:	4622      	mov	r2, r4
 800e9b4:	2100      	movs	r1, #0
 800e9b6:	f000 ff45 	bl	800f844 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800e9ba:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 800e9be:	4b56      	ldr	r3, [pc, #344]	@ (800eb18 <ProcessRadioRxDone+0x8fc>)
 800e9c0:	f883 2427 	strb.w	r2, [r3, #1063]	@ 0x427
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800e9c4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e9c6:	4a54      	ldr	r2, [pc, #336]	@ (800eb18 <ProcessRadioRxDone+0x8fc>)
 800e9c8:	f8c2 342c 	str.w	r3, [r2, #1068]	@ 0x42c
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800e9cc:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800e9d0:	4b51      	ldr	r3, [pc, #324]	@ (800eb18 <ProcessRadioRxDone+0x8fc>)
 800e9d2:	f883 2430 	strb.w	r2, [r3, #1072]	@ 0x430
                    MacCtx.McpsIndication.RxData = true;
 800e9d6:	4b50      	ldr	r3, [pc, #320]	@ (800eb18 <ProcessRadioRxDone+0x8fc>)
 800e9d8:	2201      	movs	r2, #1
 800e9da:	f883 2431 	strb.w	r2, [r3, #1073]	@ 0x431
                    break;
 800e9de:	e047      	b.n	800ea70 <ProcessRadioRxDone+0x854>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800e9e0:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800e9e4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800e9e8:	b2db      	uxtb	r3, r3
 800e9ea:	461c      	mov	r4, r3
 800e9ec:	4b4a      	ldr	r3, [pc, #296]	@ (800eb18 <ProcessRadioRxDone+0x8fc>)
 800e9ee:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800e9f2:	f997 107f 	ldrsb.w	r1, [r7, #127]	@ 0x7f
 800e9f6:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800e9fa:	f102 0010 	add.w	r0, r2, #16
 800e9fe:	9300      	str	r3, [sp, #0]
 800ea00:	460b      	mov	r3, r1
 800ea02:	4622      	mov	r2, r4
 800ea04:	2100      	movs	r1, #0
 800ea06:	f000 ff1d 	bl	800f844 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800ea0a:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 800ea0e:	4b42      	ldr	r3, [pc, #264]	@ (800eb18 <ProcessRadioRxDone+0x8fc>)
 800ea10:	f883 2427 	strb.w	r2, [r3, #1063]	@ 0x427
                    break;
 800ea14:	e02c      	b.n	800ea70 <ProcessRadioRxDone+0x854>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 800ea16:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800ea18:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800ea1c:	4b3e      	ldr	r3, [pc, #248]	@ (800eb18 <ProcessRadioRxDone+0x8fc>)
 800ea1e:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800ea22:	f997 107f 	ldrsb.w	r1, [r7, #127]	@ 0x7f
 800ea26:	9300      	str	r3, [sp, #0]
 800ea28:	460b      	mov	r3, r1
 800ea2a:	2100      	movs	r1, #0
 800ea2c:	f000 ff0a 	bl	800f844 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800ea30:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 800ea34:	4b38      	ldr	r3, [pc, #224]	@ (800eb18 <ProcessRadioRxDone+0x8fc>)
 800ea36:	f883 2427 	strb.w	r2, [r3, #1063]	@ 0x427
                    break;
 800ea3a:	e019      	b.n	800ea70 <ProcessRadioRxDone+0x854>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800ea3c:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 800ea40:	4b35      	ldr	r3, [pc, #212]	@ (800eb18 <ProcessRadioRxDone+0x8fc>)
 800ea42:	f883 2427 	strb.w	r2, [r3, #1063]	@ 0x427
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800ea46:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ea48:	4a33      	ldr	r2, [pc, #204]	@ (800eb18 <ProcessRadioRxDone+0x8fc>)
 800ea4a:	f8c2 342c 	str.w	r3, [r2, #1068]	@ 0x42c
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800ea4e:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800ea52:	4b31      	ldr	r3, [pc, #196]	@ (800eb18 <ProcessRadioRxDone+0x8fc>)
 800ea54:	f883 2430 	strb.w	r2, [r3, #1072]	@ 0x430
                    MacCtx.McpsIndication.RxData = true;
 800ea58:	4b2f      	ldr	r3, [pc, #188]	@ (800eb18 <ProcessRadioRxDone+0x8fc>)
 800ea5a:	2201      	movs	r2, #1
 800ea5c:	f883 2431 	strb.w	r2, [r3, #1073]	@ 0x431
                    break;
 800ea60:	e006      	b.n	800ea70 <ProcessRadioRxDone+0x854>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ea62:	4b2d      	ldr	r3, [pc, #180]	@ (800eb18 <ProcessRadioRxDone+0x8fc>)
 800ea64:	2201      	movs	r2, #1
 800ea66:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                    PrepareRxDoneAbort( );
 800ea6a:	f7ff fbb1 	bl	800e1d0 <PrepareRxDoneAbort>
                    break;
 800ea6e:	bf00      	nop
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 800ea70:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800ea74:	2be0      	cmp	r3, #224	@ 0xe0
 800ea76:	d118      	bne.n	800eaaa <ProcessRadioRxDone+0x88e>
 800ea78:	4b28      	ldr	r3, [pc, #160]	@ (800eb1c <ProcessRadioRxDone+0x900>)
 800ea7a:	f893 310b 	ldrb.w	r3, [r3, #267]	@ 0x10b
 800ea7e:	f083 0301 	eor.w	r3, r3, #1
 800ea82:	b2db      	uxtb	r3, r3
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d010      	beq.n	800eaaa <ProcessRadioRxDone+0x88e>
            { // Do not notify the upper layer of data reception on FPort LORAMAC_CERT_FPORT if the port
              // handling is disabled.
                MacCtx.McpsIndication.Port = macMsgData.FPort;
 800ea88:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 800ea8c:	4b22      	ldr	r3, [pc, #136]	@ (800eb18 <ProcessRadioRxDone+0x8fc>)
 800ea8e:	f883 2427 	strb.w	r2, [r3, #1063]	@ 0x427
                MacCtx.McpsIndication.Buffer = NULL;
 800ea92:	4b21      	ldr	r3, [pc, #132]	@ (800eb18 <ProcessRadioRxDone+0x8fc>)
 800ea94:	2200      	movs	r2, #0
 800ea96:	f8c3 242c 	str.w	r2, [r3, #1068]	@ 0x42c
                MacCtx.McpsIndication.BufferSize = 0;
 800ea9a:	4b1f      	ldr	r3, [pc, #124]	@ (800eb18 <ProcessRadioRxDone+0x8fc>)
 800ea9c:	2200      	movs	r2, #0
 800ea9e:	f883 2430 	strb.w	r2, [r3, #1072]	@ 0x430
                MacCtx.McpsIndication.RxData = false;
 800eaa2:	4b1d      	ldr	r3, [pc, #116]	@ (800eb18 <ProcessRadioRxDone+0x8fc>)
 800eaa4:	2200      	movs	r2, #0
 800eaa6:	f883 2431 	strb.w	r2, [r3, #1073]	@ 0x431
            }
#endif /* LORAMAC_VERSION */

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800eaaa:	4a1b      	ldr	r2, [pc, #108]	@ (800eb18 <ProcessRadioRxDone+0x8fc>)
 800eaac:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800eab0:	f043 0302 	orr.w	r3, r3, #2
 800eab4:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495

            break;
 800eab8:	e03d      	b.n	800eb36 <ProcessRadioRxDone+0x91a>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800eaba:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800eabe:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800eac2:	18d1      	adds	r1, r2, r3
 800eac4:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800eac8:	b29b      	uxth	r3, r3
 800eaca:	f8b7 2082 	ldrh.w	r2, [r7, #130]	@ 0x82
 800eace:	1ad3      	subs	r3, r2, r3
 800ead0:	b29b      	uxth	r3, r3
 800ead2:	461a      	mov	r2, r3
 800ead4:	4813      	ldr	r0, [pc, #76]	@ (800eb24 <ProcessRadioRxDone+0x908>)
 800ead6:	f008 fade 	bl	8017096 <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800eada:	4b0f      	ldr	r3, [pc, #60]	@ (800eb18 <ProcessRadioRxDone+0x8fc>)
 800eadc:	2203      	movs	r2, #3
 800eade:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800eae2:	4b0d      	ldr	r3, [pc, #52]	@ (800eb18 <ProcessRadioRxDone+0x8fc>)
 800eae4:	2200      	movs	r2, #0
 800eae6:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800eaea:	4b0b      	ldr	r3, [pc, #44]	@ (800eb18 <ProcessRadioRxDone+0x8fc>)
 800eaec:	4a0d      	ldr	r2, [pc, #52]	@ (800eb24 <ProcessRadioRxDone+0x908>)
 800eaee:	f8c3 242c 	str.w	r2, [r3, #1068]	@ 0x42c
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800eaf2:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800eaf6:	b2da      	uxtb	r2, r3
 800eaf8:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800eafc:	1ad3      	subs	r3, r2, r3
 800eafe:	b2da      	uxtb	r2, r3
 800eb00:	4b05      	ldr	r3, [pc, #20]	@ (800eb18 <ProcessRadioRxDone+0x8fc>)
 800eb02:	f883 2430 	strb.w	r2, [r3, #1072]	@ 0x430

            MacCtx.MacFlags.Bits.McpsInd = 1;
 800eb06:	4a04      	ldr	r2, [pc, #16]	@ (800eb18 <ProcessRadioRxDone+0x8fc>)
 800eb08:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800eb0c:	f043 0302 	orr.w	r3, r3, #2
 800eb10:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
            break;
 800eb14:	e00f      	b.n	800eb36 <ProcessRadioRxDone+0x91a>
 800eb16:	bf00      	nop
 800eb18:	200008d8 	.word	0x200008d8
 800eb1c:	20000df8 	.word	0x20000df8
 800eb20:	20001988 	.word	0x20001988
 800eb24:	20000b10 	.word	0x20000b10
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800eb28:	4b17      	ldr	r3, [pc, #92]	@ (800eb88 <ProcessRadioRxDone+0x96c>)
 800eb2a:	2201      	movs	r2, #1
 800eb2c:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
            PrepareRxDoneAbort( );
 800eb30:	f7ff fb4e 	bl	800e1d0 <PrepareRxDoneAbort>
            break;
 800eb34:	bf00      	nop
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Verify if we need to disable the RetransmitTimeoutTimer
    // Only aplies if downlink is received on Rx1 or Rx2 windows.
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800eb36:	4b14      	ldr	r3, [pc, #80]	@ (800eb88 <ProcessRadioRxDone+0x96c>)
 800eb38:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d004      	beq.n	800eb4a <ProcessRadioRxDone+0x92e>
        ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800eb40:	4b11      	ldr	r3, [pc, #68]	@ (800eb88 <ProcessRadioRxDone+0x96c>)
 800eb42:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800eb46:	2b01      	cmp	r3, #1
 800eb48:	d10c      	bne.n	800eb64 <ProcessRadioRxDone+0x948>
    {
        if( MacCtx.NodeAckRequested == true )
 800eb4a:	4b0f      	ldr	r3, [pc, #60]	@ (800eb88 <ProcessRadioRxDone+0x96c>)
 800eb4c:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d007      	beq.n	800eb64 <ProcessRadioRxDone+0x948>
        {
            if( MacCtx.McpsConfirm.AckReceived == true )
 800eb54:	4b0c      	ldr	r3, [pc, #48]	@ (800eb88 <ProcessRadioRxDone+0x96c>)
 800eb56:	f893 3448 	ldrb.w	r3, [r3, #1096]	@ 0x448
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d002      	beq.n	800eb64 <ProcessRadioRxDone+0x948>
            {
                OnRetransmitTimeoutTimerEvent( NULL );
 800eb5e:	2000      	movs	r0, #0
 800eb60:	f000 fce4 	bl	800f52c <OnRetransmitTimeoutTimerEvent>
            }
        }
    }

    if( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_CLASS_C )
 800eb64:	4b08      	ldr	r3, [pc, #32]	@ (800eb88 <ProcessRadioRxDone+0x96c>)
 800eb66:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800eb6a:	2b02      	cmp	r3, #2
 800eb6c:	d006      	beq.n	800eb7c <ProcessRadioRxDone+0x960>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 800eb6e:	4a06      	ldr	r2, [pc, #24]	@ (800eb88 <ProcessRadioRxDone+0x96c>)
 800eb70:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800eb74:	f043 0320 	orr.w	r3, r3, #32
 800eb78:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
    }
#endif /* LORAMAC_VERSION */

    UpdateRxSlotIdleState( );
 800eb7c:	f7ff fa82 	bl	800e084 <UpdateRxSlotIdleState>
}
 800eb80:	3794      	adds	r7, #148	@ 0x94
 800eb82:	46bd      	mov	sp, r7
 800eb84:	bd90      	pop	{r4, r7, pc}
 800eb86:	bf00      	nop
 800eb88:	200008d8 	.word	0x200008d8

0800eb8c <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 800eb8c:	b580      	push	{r7, lr}
 800eb8e:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800eb90:	4b11      	ldr	r3, [pc, #68]	@ (800ebd8 <ProcessRadioTxTimeout+0x4c>)
 800eb92:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800eb96:	2b02      	cmp	r3, #2
 800eb98:	d002      	beq.n	800eba0 <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 800eb9a:	4b10      	ldr	r3, [pc, #64]	@ (800ebdc <ProcessRadioTxTimeout+0x50>)
 800eb9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb9e:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 800eba0:	f7ff fa70 	bl	800e084 <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800eba4:	4b0e      	ldr	r3, [pc, #56]	@ (800ebe0 <ProcessRadioTxTimeout+0x54>)
 800eba6:	2202      	movs	r2, #2
 800eba8:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800ebac:	2002      	movs	r0, #2
 800ebae:	f004 fd57 	bl	8013660 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800ebb2:	4b0b      	ldr	r3, [pc, #44]	@ (800ebe0 <ProcessRadioTxTimeout+0x54>)
 800ebb4:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d003      	beq.n	800ebc4 <ProcessRadioTxTimeout+0x38>
    {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        MacCtx.AckTimeoutRetry = true;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        MacCtx.RetransmitTimeoutRetry = true;
 800ebbc:	4b08      	ldr	r3, [pc, #32]	@ (800ebe0 <ProcessRadioTxTimeout+0x54>)
 800ebbe:	2201      	movs	r2, #1
 800ebc0:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
#endif /* LORAMAC_VERSION */
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800ebc4:	4a06      	ldr	r2, [pc, #24]	@ (800ebe0 <ProcessRadioTxTimeout+0x54>)
 800ebc6:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800ebca:	f043 0320 	orr.w	r3, r3, #32
 800ebce:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
}
 800ebd2:	bf00      	nop
 800ebd4:	bd80      	pop	{r7, pc}
 800ebd6:	bf00      	nop
 800ebd8:	20000df8 	.word	0x20000df8
 800ebdc:	0801f57c 	.word	0x0801f57c
 800ebe0:	200008d8 	.word	0x200008d8

0800ebe4 <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 800ebe4:	b580      	push	{r7, lr}
 800ebe6:	b084      	sub	sp, #16
 800ebe8:	af00      	add	r7, sp, #0
 800ebea:	4603      	mov	r3, r0
 800ebec:	460a      	mov	r2, r1
 800ebee:	71fb      	strb	r3, [r7, #7]
 800ebf0:	4613      	mov	r3, r2
 800ebf2:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 800ebf4:	2300      	movs	r3, #0
 800ebf6:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800ebf8:	4b3d      	ldr	r3, [pc, #244]	@ (800ecf0 <HandleRadioRxErrorTimeout+0x10c>)
 800ebfa:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800ebfe:	2b02      	cmp	r3, #2
 800ec00:	d002      	beq.n	800ec08 <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 800ec02:	4b3c      	ldr	r3, [pc, #240]	@ (800ecf4 <HandleRadioRxErrorTimeout+0x110>)
 800ec04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec06:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800ec08:	f004 f870 	bl	8012cec <LoRaMacClassBIsBeaconExpected>
 800ec0c:	4603      	mov	r3, r0
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d007      	beq.n	800ec22 <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800ec12:	2002      	movs	r0, #2
 800ec14:	f004 f81e 	bl	8012c54 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800ec18:	2000      	movs	r0, #0
 800ec1a:	f004 f840 	bl	8012c9e <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800ec1e:	2301      	movs	r3, #1
 800ec20:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800ec22:	4b33      	ldr	r3, [pc, #204]	@ (800ecf0 <HandleRadioRxErrorTimeout+0x10c>)
 800ec24:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800ec28:	2b01      	cmp	r3, #1
 800ec2a:	d119      	bne.n	800ec60 <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800ec2c:	f004 f865 	bl	8012cfa <LoRaMacClassBIsPingExpected>
 800ec30:	4603      	mov	r3, r0
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d007      	beq.n	800ec46 <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800ec36:	2000      	movs	r0, #0
 800ec38:	f004 f816 	bl	8012c68 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800ec3c:	2000      	movs	r0, #0
 800ec3e:	f004 f837 	bl	8012cb0 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800ec42:	2301      	movs	r3, #1
 800ec44:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800ec46:	f004 f85f 	bl	8012d08 <LoRaMacClassBIsMulticastExpected>
 800ec4a:	4603      	mov	r3, r0
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d007      	beq.n	800ec60 <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800ec50:	2000      	movs	r0, #0
 800ec52:	f004 f813 	bl	8012c7c <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800ec56:	2000      	movs	r0, #0
 800ec58:	f004 f833 	bl	8012cc2 <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 800ec5c:	2301      	movs	r3, #1
 800ec5e:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 800ec60:	7bfb      	ldrb	r3, [r7, #15]
 800ec62:	f083 0301 	eor.w	r3, r3, #1
 800ec66:	b2db      	uxtb	r3, r3
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d03b      	beq.n	800ece4 <HandleRadioRxErrorTimeout+0x100>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800ec6c:	4b22      	ldr	r3, [pc, #136]	@ (800ecf8 <HandleRadioRxErrorTimeout+0x114>)
 800ec6e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d122      	bne.n	800ecbc <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 800ec76:	4b20      	ldr	r3, [pc, #128]	@ (800ecf8 <HandleRadioRxErrorTimeout+0x114>)
 800ec78:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d003      	beq.n	800ec88 <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800ec80:	4a1d      	ldr	r2, [pc, #116]	@ (800ecf8 <HandleRadioRxErrorTimeout+0x114>)
 800ec82:	79fb      	ldrb	r3, [r7, #7]
 800ec84:	f882 3445 	strb.w	r3, [r2, #1093]	@ 0x445
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800ec88:	79fb      	ldrb	r3, [r7, #7]
 800ec8a:	4618      	mov	r0, r3
 800ec8c:	f004 fce8 	bl	8013660 <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800ec90:	4b17      	ldr	r3, [pc, #92]	@ (800ecf0 <HandleRadioRxErrorTimeout+0x10c>)
 800ec92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec94:	4618      	mov	r0, r3
 800ec96:	f00c fc77 	bl	801b588 <UTIL_TIMER_GetElapsedTime>
 800ec9a:	4602      	mov	r2, r0
 800ec9c:	4b16      	ldr	r3, [pc, #88]	@ (800ecf8 <HandleRadioRxErrorTimeout+0x114>)
 800ec9e:	f8d3 33b4 	ldr.w	r3, [r3, #948]	@ 0x3b4
 800eca2:	429a      	cmp	r2, r3
 800eca4:	d31e      	bcc.n	800ece4 <HandleRadioRxErrorTimeout+0x100>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 800eca6:	4815      	ldr	r0, [pc, #84]	@ (800ecfc <HandleRadioRxErrorTimeout+0x118>)
 800eca8:	f00c fb42 	bl	801b330 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800ecac:	4a12      	ldr	r2, [pc, #72]	@ (800ecf8 <HandleRadioRxErrorTimeout+0x114>)
 800ecae:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800ecb2:	f043 0320 	orr.w	r3, r3, #32
 800ecb6:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
 800ecba:	e013      	b.n	800ece4 <HandleRadioRxErrorTimeout+0x100>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 800ecbc:	4b0e      	ldr	r3, [pc, #56]	@ (800ecf8 <HandleRadioRxErrorTimeout+0x114>)
 800ecbe:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d003      	beq.n	800ecce <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800ecc6:	4a0c      	ldr	r2, [pc, #48]	@ (800ecf8 <HandleRadioRxErrorTimeout+0x114>)
 800ecc8:	79bb      	ldrb	r3, [r7, #6]
 800ecca:	f882 3445 	strb.w	r3, [r2, #1093]	@ 0x445
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800ecce:	79bb      	ldrb	r3, [r7, #6]
 800ecd0:	4618      	mov	r0, r3
 800ecd2:	f004 fcc5 	bl	8013660 <LoRaMacConfirmQueueSetStatusCmn>
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
            }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            MacCtx.MacFlags.Bits.MacDone = 1;
 800ecd6:	4a08      	ldr	r2, [pc, #32]	@ (800ecf8 <HandleRadioRxErrorTimeout+0x114>)
 800ecd8:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800ecdc:	f043 0320 	orr.w	r3, r3, #32
 800ece0:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
#endif /* LORAMAC_VERSION */
        }
    }

    UpdateRxSlotIdleState( );
 800ece4:	f7ff f9ce 	bl	800e084 <UpdateRxSlotIdleState>
}
 800ece8:	bf00      	nop
 800ecea:	3710      	adds	r7, #16
 800ecec:	46bd      	mov	sp, r7
 800ecee:	bd80      	pop	{r7, pc}
 800ecf0:	20000df8 	.word	0x20000df8
 800ecf4:	0801f57c 	.word	0x0801f57c
 800ecf8:	200008d8 	.word	0x200008d8
 800ecfc:	20000c70 	.word	0x20000c70

0800ed00 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 800ed00:	b580      	push	{r7, lr}
 800ed02:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800ed04:	2106      	movs	r1, #6
 800ed06:	2005      	movs	r0, #5
 800ed08:	f7ff ff6c 	bl	800ebe4 <HandleRadioRxErrorTimeout>
}
 800ed0c:	bf00      	nop
 800ed0e:	bd80      	pop	{r7, pc}

0800ed10 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 800ed10:	b580      	push	{r7, lr}
 800ed12:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800ed14:	2104      	movs	r1, #4
 800ed16:	2003      	movs	r0, #3
 800ed18:	f7ff ff64 	bl	800ebe4 <HandleRadioRxErrorTimeout>
}
 800ed1c:	bf00      	nop
 800ed1e:	bd80      	pop	{r7, pc}

0800ed20 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 800ed20:	b580      	push	{r7, lr}
 800ed22:	b084      	sub	sp, #16
 800ed24:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ed26:	f3ef 8310 	mrs	r3, PRIMASK
 800ed2a:	607b      	str	r3, [r7, #4]
  return(result);
 800ed2c:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 800ed2e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800ed30:	b672      	cpsid	i
}
 800ed32:	bf00      	nop
    events = LoRaMacRadioEvents;
 800ed34:	4b1d      	ldr	r3, [pc, #116]	@ (800edac <LoRaMacHandleIrqEvents+0x8c>)
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 800ed3a:	4b1c      	ldr	r3, [pc, #112]	@ (800edac <LoRaMacHandleIrqEvents+0x8c>)
 800ed3c:	2200      	movs	r2, #0
 800ed3e:	601a      	str	r2, [r3, #0]
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ed44:	68bb      	ldr	r3, [r7, #8]
 800ed46:	f383 8810 	msr	PRIMASK, r3
}
 800ed4a:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 800ed4c:	683b      	ldr	r3, [r7, #0]
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d027      	beq.n	800eda2 <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 800ed52:	783b      	ldrb	r3, [r7, #0]
 800ed54:	f003 0320 	and.w	r3, r3, #32
 800ed58:	b2db      	uxtb	r3, r3
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d001      	beq.n	800ed62 <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 800ed5e:	f7ff f9a9 	bl	800e0b4 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 800ed62:	783b      	ldrb	r3, [r7, #0]
 800ed64:	f003 0310 	and.w	r3, r3, #16
 800ed68:	b2db      	uxtb	r3, r3
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d001      	beq.n	800ed72 <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 800ed6e:	f7ff fa55 	bl	800e21c <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 800ed72:	783b      	ldrb	r3, [r7, #0]
 800ed74:	f003 0308 	and.w	r3, r3, #8
 800ed78:	b2db      	uxtb	r3, r3
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d001      	beq.n	800ed82 <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 800ed7e:	f7ff ff05 	bl	800eb8c <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 800ed82:	783b      	ldrb	r3, [r7, #0]
 800ed84:	f003 0304 	and.w	r3, r3, #4
 800ed88:	b2db      	uxtb	r3, r3
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d001      	beq.n	800ed92 <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 800ed8e:	f7ff ffb7 	bl	800ed00 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 800ed92:	783b      	ldrb	r3, [r7, #0]
 800ed94:	f003 0302 	and.w	r3, r3, #2
 800ed98:	b2db      	uxtb	r3, r3
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d001      	beq.n	800eda2 <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 800ed9e:	f7ff ffb7 	bl	800ed10 <ProcessRadioRxTimeout>
        }
    }
}
 800eda2:	bf00      	nop
 800eda4:	3710      	adds	r7, #16
 800eda6:	46bd      	mov	sp, r7
 800eda8:	bd80      	pop	{r7, pc}
 800edaa:	bf00      	nop
 800edac:	20001980 	.word	0x20001980

0800edb0 <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 800edb0:	b480      	push	{r7}
 800edb2:	af00      	add	r7, sp, #0
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( LoRaMacRadioEvents.Events.RxProcessPending == 1 )
 800edb4:	4b0c      	ldr	r3, [pc, #48]	@ (800ede8 <LoRaMacIsBusy+0x38>)
 800edb6:	781b      	ldrb	r3, [r3, #0]
 800edb8:	f003 0301 	and.w	r3, r3, #1
 800edbc:	b2db      	uxtb	r3, r3
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d001      	beq.n	800edc6 <LoRaMacIsBusy+0x16>
    {
        return true;
 800edc2:	2301      	movs	r3, #1
 800edc4:	e00c      	b.n	800ede0 <LoRaMacIsBusy+0x30>
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800edc6:	4b09      	ldr	r3, [pc, #36]	@ (800edec <LoRaMacIsBusy+0x3c>)
 800edc8:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d106      	bne.n	800edde <LoRaMacIsBusy+0x2e>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800edd0:	4b06      	ldr	r3, [pc, #24]	@ (800edec <LoRaMacIsBusy+0x3c>)
 800edd2:	f893 3496 	ldrb.w	r3, [r3, #1174]	@ 0x496
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800edd6:	2b01      	cmp	r3, #1
 800edd8:	d101      	bne.n	800edde <LoRaMacIsBusy+0x2e>
    {
        return false;
 800edda:	2300      	movs	r3, #0
 800eddc:	e000      	b.n	800ede0 <LoRaMacIsBusy+0x30>
    }
    return true;
 800edde:	2301      	movs	r3, #1
}
 800ede0:	4618      	mov	r0, r3
 800ede2:	46bd      	mov	sp, r7
 800ede4:	bc80      	pop	{r7}
 800ede6:	4770      	bx	lr
 800ede8:	20001980 	.word	0x20001980
 800edec:	200008d8 	.word	0x200008d8

0800edf0 <LoRaMacEnableRequests>:

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 800edf0:	b480      	push	{r7}
 800edf2:	b083      	sub	sp, #12
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	4603      	mov	r3, r0
 800edf8:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 800edfa:	4a04      	ldr	r2, [pc, #16]	@ (800ee0c <LoRaMacEnableRequests+0x1c>)
 800edfc:	79fb      	ldrb	r3, [r7, #7]
 800edfe:	f882 3496 	strb.w	r3, [r2, #1174]	@ 0x496
}
 800ee02:	bf00      	nop
 800ee04:	370c      	adds	r7, #12
 800ee06:	46bd      	mov	sp, r7
 800ee08:	bc80      	pop	{r7}
 800ee0a:	4770      	bx	lr
 800ee0c:	200008d8 	.word	0x200008d8

0800ee10 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 800ee10:	b580      	push	{r7, lr}
 800ee12:	b082      	sub	sp, #8
 800ee14:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 800ee16:	4b2c      	ldr	r3, [pc, #176]	@ (800eec8 <LoRaMacHandleRequestEvents+0xb8>)
 800ee18:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800ee1c:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 800ee1e:	4b2a      	ldr	r3, [pc, #168]	@ (800eec8 <LoRaMacHandleRequestEvents+0xb8>)
 800ee20:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d14a      	bne.n	800eebe <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800ee28:	4b27      	ldr	r3, [pc, #156]	@ (800eec8 <LoRaMacHandleRequestEvents+0xb8>)
 800ee2a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800ee2e:	f003 0301 	and.w	r3, r3, #1
 800ee32:	b2db      	uxtb	r3, r3
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d006      	beq.n	800ee46 <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800ee38:	4a23      	ldr	r2, [pc, #140]	@ (800eec8 <LoRaMacHandleRequestEvents+0xb8>)
 800ee3a:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800ee3e:	f023 0301 	bic.w	r3, r3, #1
 800ee42:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800ee46:	4b20      	ldr	r3, [pc, #128]	@ (800eec8 <LoRaMacHandleRequestEvents+0xb8>)
 800ee48:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800ee4c:	f003 0304 	and.w	r3, r3, #4
 800ee50:	b2db      	uxtb	r3, r3
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d006      	beq.n	800ee64 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800ee56:	4a1c      	ldr	r2, [pc, #112]	@ (800eec8 <LoRaMacHandleRequestEvents+0xb8>)
 800ee58:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800ee5c:	f023 0304 	bic.w	r3, r3, #4
 800ee60:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800ee64:	2001      	movs	r0, #1
 800ee66:	f7ff ffc3 	bl	800edf0 <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 800ee6a:	793b      	ldrb	r3, [r7, #4]
 800ee6c:	f003 0301 	and.w	r3, r3, #1
 800ee70:	b2db      	uxtb	r3, r3
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d005      	beq.n	800ee82 <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800ee76:	4b14      	ldr	r3, [pc, #80]	@ (800eec8 <LoRaMacHandleRequestEvents+0xb8>)
 800ee78:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	4813      	ldr	r0, [pc, #76]	@ (800eecc <LoRaMacHandleRequestEvents+0xbc>)
 800ee80:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 800ee82:	793b      	ldrb	r3, [r7, #4]
 800ee84:	f003 0304 	and.w	r3, r3, #4
 800ee88:	b2db      	uxtb	r3, r3
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d00e      	beq.n	800eeac <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800ee8e:	4810      	ldr	r0, [pc, #64]	@ (800eed0 <LoRaMacHandleRequestEvents+0xc0>)
 800ee90:	f004 fc34 	bl	80136fc <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800ee94:	f004 fc7e 	bl	8013794 <LoRaMacConfirmQueueGetCnt>
 800ee98:	4603      	mov	r3, r0
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d006      	beq.n	800eeac <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800ee9e:	4a0a      	ldr	r2, [pc, #40]	@ (800eec8 <LoRaMacHandleRequestEvents+0xb8>)
 800eea0:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800eea4:	f043 0304 	orr.w	r3, r3, #4
 800eea8:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 800eeac:	f003 ff4a 	bl	8012d44 <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 800eeb0:	4a05      	ldr	r2, [pc, #20]	@ (800eec8 <LoRaMacHandleRequestEvents+0xb8>)
 800eeb2:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800eeb6:	f023 0320 	bic.w	r3, r3, #32
 800eeba:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
    }
}
 800eebe:	bf00      	nop
 800eec0:	3708      	adds	r7, #8
 800eec2:	46bd      	mov	sp, r7
 800eec4:	bd80      	pop	{r7, pc}
 800eec6:	bf00      	nop
 800eec8:	200008d8 	.word	0x200008d8
 800eecc:	20000d1c 	.word	0x20000d1c
 800eed0:	20000d30 	.word	0x20000d30

0800eed4 <LoRaMacHandleScheduleUplinkEvent>:

static void LoRaMacHandleScheduleUplinkEvent( void )
{
 800eed4:	b580      	push	{r7, lr}
 800eed6:	b082      	sub	sp, #8
 800eed8:	af00      	add	r7, sp, #0
    // Handle events
    if( MacCtx.MacState == LORAMAC_IDLE )
 800eeda:	4b07      	ldr	r3, [pc, #28]	@ (800eef8 <LoRaMacHandleScheduleUplinkEvent+0x24>)
 800eedc:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d105      	bne.n	800eef0 <LoRaMacHandleScheduleUplinkEvent+0x1c>
    {
        // Verify if sticky MAC commands are pending or not
        bool isStickyMacCommandPending = false;
 800eee4:	2300      	movs	r3, #0
 800eee6:	71fb      	strb	r3, [r7, #7]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 800eee8:	1dfb      	adds	r3, r7, #7
 800eeea:	4618      	mov	r0, r3
 800eeec:	f004 f9ec 	bl	80132c8 <LoRaMacCommandsStickyCmdsPending>
        {// Setup MLME indication
            /* ST_WORKAROUND: remove unnecessary mlme operation to prevent uplinks burst */
            //SetMlmeScheduleUplinkIndication( );
        }
    }
}
 800eef0:	bf00      	nop
 800eef2:	3708      	adds	r7, #8
 800eef4:	46bd      	mov	sp, r7
 800eef6:	bd80      	pop	{r7, pc}
 800eef8:	200008d8 	.word	0x200008d8

0800eefc <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 800eefc:	b580      	push	{r7, lr}
 800eefe:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800ef00:	4b16      	ldr	r3, [pc, #88]	@ (800ef5c <LoRaMacHandleIndicationEvents+0x60>)
 800ef02:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800ef06:	f003 0308 	and.w	r3, r3, #8
 800ef0a:	b2db      	uxtb	r3, r3
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d00d      	beq.n	800ef2c <LoRaMacHandleIndicationEvents+0x30>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800ef10:	4a12      	ldr	r2, [pc, #72]	@ (800ef5c <LoRaMacHandleIndicationEvents+0x60>)
 800ef12:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800ef16:	f023 0308 	bic.w	r3, r3, #8
 800ef1a:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 800ef1e:	4b0f      	ldr	r3, [pc, #60]	@ (800ef5c <LoRaMacHandleIndicationEvents+0x60>)
 800ef20:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 800ef24:	68db      	ldr	r3, [r3, #12]
 800ef26:	490e      	ldr	r1, [pc, #56]	@ (800ef60 <LoRaMacHandleIndicationEvents+0x64>)
 800ef28:	480e      	ldr	r0, [pc, #56]	@ (800ef64 <LoRaMacHandleIndicationEvents+0x68>)
 800ef2a:	4798      	blx	r3
    }
    */
    /*ST_WORKAROUND_END */

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800ef2c:	4b0b      	ldr	r3, [pc, #44]	@ (800ef5c <LoRaMacHandleIndicationEvents+0x60>)
 800ef2e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800ef32:	f003 0302 	and.w	r3, r3, #2
 800ef36:	b2db      	uxtb	r3, r3
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d00d      	beq.n	800ef58 <LoRaMacHandleIndicationEvents+0x5c>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800ef3c:	4a07      	ldr	r2, [pc, #28]	@ (800ef5c <LoRaMacHandleIndicationEvents+0x60>)
 800ef3e:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800ef42:	f023 0302 	bic.w	r3, r3, #2
 800ef46:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 800ef4a:	4b04      	ldr	r3, [pc, #16]	@ (800ef5c <LoRaMacHandleIndicationEvents+0x60>)
 800ef4c:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 800ef50:	685b      	ldr	r3, [r3, #4]
 800ef52:	4903      	ldr	r1, [pc, #12]	@ (800ef60 <LoRaMacHandleIndicationEvents+0x64>)
 800ef54:	4804      	ldr	r0, [pc, #16]	@ (800ef68 <LoRaMacHandleIndicationEvents+0x6c>)
 800ef56:	4798      	blx	r3
    }
}
 800ef58:	bf00      	nop
 800ef5a:	bd80      	pop	{r7, pc}
 800ef5c:	200008d8 	.word	0x200008d8
 800ef60:	20000d68 	.word	0x20000d68
 800ef64:	20000d44 	.word	0x20000d44
 800ef68:	20000cfc 	.word	0x20000cfc

0800ef6c <LoRaMacHandleMcpsRequest>:

static void LoRaMacHandleMcpsRequest( void )
{
 800ef6c:	b580      	push	{r7, lr}
 800ef6e:	b082      	sub	sp, #8
 800ef70:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800ef72:	4b2a      	ldr	r3, [pc, #168]	@ (800f01c <LoRaMacHandleMcpsRequest+0xb0>)
 800ef74:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800ef78:	f003 0301 	and.w	r3, r3, #1
 800ef7c:	b2db      	uxtb	r3, r3
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d048      	beq.n	800f014 <LoRaMacHandleMcpsRequest+0xa8>
    {
        bool stopRetransmission = false;
 800ef82:	2300      	movs	r3, #0
 800ef84:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 800ef86:	2300      	movs	r3, #0
 800ef88:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800ef8a:	4b24      	ldr	r3, [pc, #144]	@ (800f01c <LoRaMacHandleMcpsRequest+0xb0>)
 800ef8c:	f893 3444 	ldrb.w	r3, [r3, #1092]	@ 0x444
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d004      	beq.n	800ef9e <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 800ef94:	4b21      	ldr	r3, [pc, #132]	@ (800f01c <LoRaMacHandleMcpsRequest+0xb0>)
 800ef96:	f893 3444 	ldrb.w	r3, [r3, #1092]	@ 0x444
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800ef9a:	2b03      	cmp	r3, #3
 800ef9c:	d104      	bne.n	800efa8 <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800ef9e:	f002 f8f9 	bl	8011194 <CheckRetransUnconfirmedUplink>
 800efa2:	4603      	mov	r3, r0
 800efa4:	71fb      	strb	r3, [r7, #7]
 800efa6:	e010      	b.n	800efca <LoRaMacHandleMcpsRequest+0x5e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800efa8:	4b1c      	ldr	r3, [pc, #112]	@ (800f01c <LoRaMacHandleMcpsRequest+0xb0>)
 800efaa:	f893 3444 	ldrb.w	r3, [r3, #1092]	@ 0x444
 800efae:	2b01      	cmp	r3, #1
 800efb0:	d10b      	bne.n	800efca <LoRaMacHandleMcpsRequest+0x5e>
            else
            {
                waitForRetransmission = true;
            }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            if( MacCtx.RetransmitTimeoutRetry == true )
 800efb2:	4b1a      	ldr	r3, [pc, #104]	@ (800f01c <LoRaMacHandleMcpsRequest+0xb0>)
 800efb4:	f893 341d 	ldrb.w	r3, [r3, #1053]	@ 0x41d
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d004      	beq.n	800efc6 <LoRaMacHandleMcpsRequest+0x5a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 800efbc:	f002 f916 	bl	80111ec <CheckRetransConfirmedUplink>
 800efc0:	4603      	mov	r3, r0
 800efc2:	71fb      	strb	r3, [r7, #7]
 800efc4:	e001      	b.n	800efca <LoRaMacHandleMcpsRequest+0x5e>
            }
            else
            {
                waitForRetransmission = true;
 800efc6:	2301      	movs	r3, #1
 800efc8:	71bb      	strb	r3, [r7, #6]
            }
#endif /* LORAMAC_VERSION */
        }

        if( stopRetransmission == true )
 800efca:	79fb      	ldrb	r3, [r7, #7]
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d00d      	beq.n	800efec <LoRaMacHandleMcpsRequest+0x80>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 800efd0:	4813      	ldr	r0, [pc, #76]	@ (800f020 <LoRaMacHandleMcpsRequest+0xb4>)
 800efd2:	f00c f9ad 	bl	801b330 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800efd6:	4b11      	ldr	r3, [pc, #68]	@ (800f01c <LoRaMacHandleMcpsRequest+0xb0>)
 800efd8:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800efdc:	f023 0320 	bic.w	r3, r3, #32
 800efe0:	4a0e      	ldr	r2, [pc, #56]	@ (800f01c <LoRaMacHandleMcpsRequest+0xb0>)
 800efe2:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
            StopRetransmission( );
 800efe6:	f002 f93b 	bl	8011260 <StopRetransmission>
#endif /* LORAMAC_VERSION */
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 800efea:	e013      	b.n	800f014 <LoRaMacHandleMcpsRequest+0xa8>
        else if( waitForRetransmission == false )
 800efec:	79bb      	ldrb	r3, [r7, #6]
 800efee:	f083 0301 	eor.w	r3, r3, #1
 800eff2:	b2db      	uxtb	r3, r3
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d00d      	beq.n	800f014 <LoRaMacHandleMcpsRequest+0xa8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800eff8:	4a08      	ldr	r2, [pc, #32]	@ (800f01c <LoRaMacHandleMcpsRequest+0xb0>)
 800effa:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800effe:	f023 0320 	bic.w	r3, r3, #32
 800f002:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
            MacCtx.RetransmitTimeoutRetry = false;
 800f006:	4b05      	ldr	r3, [pc, #20]	@ (800f01c <LoRaMacHandleMcpsRequest+0xb0>)
 800f008:	2200      	movs	r2, #0
 800f00a:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
            OnTxDelayedTimerEvent( NULL );
 800f00e:	2000      	movs	r0, #0
 800f010:	f000 f9c8 	bl	800f3a4 <OnTxDelayedTimerEvent>
}
 800f014:	bf00      	nop
 800f016:	3708      	adds	r7, #8
 800f018:	46bd      	mov	sp, r7
 800f01a:	bd80      	pop	{r7, pc}
 800f01c:	200008d8 	.word	0x200008d8
 800f020:	20000c40 	.word	0x20000c40

0800f024 <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 800f024:	b580      	push	{r7, lr}
 800f026:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800f028:	4b18      	ldr	r3, [pc, #96]	@ (800f08c <LoRaMacHandleMlmeRequest+0x68>)
 800f02a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800f02e:	f003 0304 	and.w	r3, r3, #4
 800f032:	b2db      	uxtb	r3, r3
 800f034:	2b00      	cmp	r3, #0
 800f036:	d026      	beq.n	800f086 <LoRaMacHandleMlmeRequest+0x62>
    {
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800f038:	2001      	movs	r0, #1
 800f03a:	f004 fb45 	bl	80136c8 <LoRaMacConfirmQueueIsCmdActive>
 800f03e:	4603      	mov	r3, r0
 800f040:	2b00      	cmp	r3, #0
 800f042:	d012      	beq.n	800f06a <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800f044:	2001      	movs	r0, #1
 800f046:	f004 fae1 	bl	801360c <LoRaMacConfirmQueueGetStatus>
 800f04a:	4603      	mov	r3, r0
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d103      	bne.n	800f058 <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 800f050:	4b0e      	ldr	r3, [pc, #56]	@ (800f08c <LoRaMacHandleMlmeRequest+0x68>)
 800f052:	2200      	movs	r2, #0
 800f054:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
            }
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800f058:	4b0c      	ldr	r3, [pc, #48]	@ (800f08c <LoRaMacHandleMlmeRequest+0x68>)
 800f05a:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f05e:	f023 0302 	bic.w	r3, r3, #2
 800f062:	4a0a      	ldr	r2, [pc, #40]	@ (800f08c <LoRaMacHandleMlmeRequest+0x68>)
 800f064:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
#endif /* LORAMAC_VERSION */
    }
}
 800f068:	e00d      	b.n	800f086 <LoRaMacHandleMlmeRequest+0x62>
        else if( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true )
 800f06a:	2005      	movs	r0, #5
 800f06c:	f004 fb2c 	bl	80136c8 <LoRaMacConfirmQueueIsCmdActive>
 800f070:	4603      	mov	r3, r0
 800f072:	2b00      	cmp	r3, #0
 800f074:	d007      	beq.n	800f086 <LoRaMacHandleMlmeRequest+0x62>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800f076:	4b05      	ldr	r3, [pc, #20]	@ (800f08c <LoRaMacHandleMlmeRequest+0x68>)
 800f078:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f07c:	f023 0302 	bic.w	r3, r3, #2
 800f080:	4a02      	ldr	r2, [pc, #8]	@ (800f08c <LoRaMacHandleMlmeRequest+0x68>)
 800f082:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
}
 800f086:	bf00      	nop
 800f088:	bd80      	pop	{r7, pc}
 800f08a:	bf00      	nop
 800f08c:	200008d8 	.word	0x200008d8

0800f090 <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 800f090:	b580      	push	{r7, lr}
 800f092:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800f094:	200b      	movs	r0, #11
 800f096:	f004 fb17 	bl	80136c8 <LoRaMacConfirmQueueIsCmdActive>
 800f09a:	4603      	mov	r3, r0
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d019      	beq.n	800f0d4 <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800f0a0:	4b0e      	ldr	r3, [pc, #56]	@ (800f0dc <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800f0a2:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800f0a6:	f003 0301 	and.w	r3, r3, #1
 800f0aa:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d111      	bne.n	800f0d4 <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800f0b0:	4b0a      	ldr	r3, [pc, #40]	@ (800f0dc <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800f0b2:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800f0b6:	f003 0304 	and.w	r3, r3, #4
 800f0ba:	b2db      	uxtb	r3, r3
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d009      	beq.n	800f0d4 <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800f0c0:	4b06      	ldr	r3, [pc, #24]	@ (800f0dc <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800f0c2:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f0c6:	f023 0302 	bic.w	r3, r3, #2
 800f0ca:	4a04      	ldr	r2, [pc, #16]	@ (800f0dc <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800f0cc:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
            return 0x01;
 800f0d0:	2301      	movs	r3, #1
 800f0d2:	e000      	b.n	800f0d6 <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 800f0d4:	2300      	movs	r3, #0
}
 800f0d6:	4618      	mov	r0, r3
 800f0d8:	bd80      	pop	{r7, pc}
 800f0da:	bf00      	nop
 800f0dc:	200008d8 	.word	0x200008d8

0800f0e0 <CheckForMinimumAbpDatarate>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool CheckForMinimumAbpDatarate( bool adr, ActivationType_t activation, bool datarateChanged )
{
 800f0e0:	b480      	push	{r7}
 800f0e2:	b083      	sub	sp, #12
 800f0e4:	af00      	add	r7, sp, #0
 800f0e6:	4603      	mov	r3, r0
 800f0e8:	71fb      	strb	r3, [r7, #7]
 800f0ea:	460b      	mov	r3, r1
 800f0ec:	71bb      	strb	r3, [r7, #6]
 800f0ee:	4613      	mov	r3, r2
 800f0f0:	717b      	strb	r3, [r7, #5]
    if( ( adr == true ) &&
 800f0f2:	79fb      	ldrb	r3, [r7, #7]
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d00a      	beq.n	800f10e <CheckForMinimumAbpDatarate+0x2e>
 800f0f8:	79bb      	ldrb	r3, [r7, #6]
 800f0fa:	2b01      	cmp	r3, #1
 800f0fc:	d107      	bne.n	800f10e <CheckForMinimumAbpDatarate+0x2e>
        ( activation == ACTIVATION_TYPE_ABP ) &&
        ( datarateChanged == false ) )
 800f0fe:	797b      	ldrb	r3, [r7, #5]
 800f100:	f083 0301 	eor.w	r3, r3, #1
 800f104:	b2db      	uxtb	r3, r3
        ( activation == ACTIVATION_TYPE_ABP ) &&
 800f106:	2b00      	cmp	r3, #0
 800f108:	d001      	beq.n	800f10e <CheckForMinimumAbpDatarate+0x2e>
    {
        return true;
 800f10a:	2301      	movs	r3, #1
 800f10c:	e000      	b.n	800f110 <CheckForMinimumAbpDatarate+0x30>
    }
    return false;
 800f10e:	2300      	movs	r3, #0
}
 800f110:	4618      	mov	r0, r3
 800f112:	370c      	adds	r7, #12
 800f114:	46bd      	mov	sp, r7
 800f116:	bc80      	pop	{r7}
 800f118:	4770      	bx	lr
	...

0800f11c <LoRaMacCheckForRxAbort>:
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
 800f11c:	b480      	push	{r7}
 800f11e:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800f120:	4b0d      	ldr	r3, [pc, #52]	@ (800f158 <LoRaMacCheckForRxAbort+0x3c>)
 800f122:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f126:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d00f      	beq.n	800f14e <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 800f12e:	4b0a      	ldr	r3, [pc, #40]	@ (800f158 <LoRaMacCheckForRxAbort+0x3c>)
 800f130:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f134:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f138:	4a07      	ldr	r2, [pc, #28]	@ (800f158 <LoRaMacCheckForRxAbort+0x3c>)
 800f13a:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800f13e:	4b06      	ldr	r3, [pc, #24]	@ (800f158 <LoRaMacCheckForRxAbort+0x3c>)
 800f140:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f144:	f023 0302 	bic.w	r3, r3, #2
 800f148:	4a03      	ldr	r2, [pc, #12]	@ (800f158 <LoRaMacCheckForRxAbort+0x3c>)
 800f14a:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
    }
}
 800f14e:	bf00      	nop
 800f150:	46bd      	mov	sp, r7
 800f152:	bc80      	pop	{r7}
 800f154:	4770      	bx	lr
 800f156:	bf00      	nop
 800f158:	200008d8 	.word	0x200008d8

0800f15c <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 800f15c:	b580      	push	{r7, lr}
 800f15e:	b084      	sub	sp, #16
 800f160:	af00      	add	r7, sp, #0
 800f162:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 800f164:	2300      	movs	r3, #0
 800f166:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800f168:	2300      	movs	r3, #0
 800f16a:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 800f16c:	4b50      	ldr	r3, [pc, #320]	@ (800f2b0 <LoRaMacHandleNvm+0x154>)
 800f16e:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f172:	2b00      	cmp	r3, #0
 800f174:	f040 8098 	bne.w	800f2a8 <LoRaMacHandleNvm+0x14c>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	2124      	movs	r1, #36	@ 0x24
 800f17c:	4618      	mov	r0, r3
 800f17e:	f007 ffdf 	bl	8017140 <Crc32>
 800f182:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f188:	68ba      	ldr	r2, [r7, #8]
 800f18a:	429a      	cmp	r2, r3
 800f18c:	d006      	beq.n	800f19c <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	68ba      	ldr	r2, [r7, #8]
 800f192:	625a      	str	r2, [r3, #36]	@ 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 800f194:	89fb      	ldrh	r3, [r7, #14]
 800f196:	f043 0301 	orr.w	r3, r3, #1
 800f19a:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	3328      	adds	r3, #40	@ 0x28
 800f1a0:	2114      	movs	r1, #20
 800f1a2:	4618      	mov	r0, r3
 800f1a4:	f007 ffcc 	bl	8017140 <Crc32>
 800f1a8:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f1ae:	68ba      	ldr	r2, [r7, #8]
 800f1b0:	429a      	cmp	r2, r3
 800f1b2:	d006      	beq.n	800f1c2 <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	68ba      	ldr	r2, [r7, #8]
 800f1b8:	63da      	str	r2, [r3, #60]	@ 0x3c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 800f1ba:	89fb      	ldrh	r3, [r7, #14]
 800f1bc:	f043 0302 	orr.w	r3, r3, #2
 800f1c0:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	3340      	adds	r3, #64	@ 0x40
 800f1c6:	21e0      	movs	r1, #224	@ 0xe0
 800f1c8:	4618      	mov	r0, r3
 800f1ca:	f007 ffb9 	bl	8017140 <Crc32>
 800f1ce:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800f1d6:	68ba      	ldr	r2, [r7, #8]
 800f1d8:	429a      	cmp	r2, r3
 800f1da:	d007      	beq.n	800f1ec <LoRaMacHandleNvm+0x90>
    {
        nvmData->MacGroup2.Crc32 = crc;
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	68ba      	ldr	r2, [r7, #8]
 800f1e0:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 800f1e4:	89fb      	ldrh	r3, [r7, #14]
 800f1e6:	f043 0304 	orr.w	r3, r3, #4
 800f1ea:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 800f1f2:	21bc      	movs	r1, #188	@ 0xbc
 800f1f4:	4618      	mov	r0, r3
 800f1f6:	f007 ffa3 	bl	8017140 <Crc32>
 800f1fa:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 800f202:	68ba      	ldr	r2, [r7, #8]
 800f204:	429a      	cmp	r2, r3
 800f206:	d007      	beq.n	800f218 <LoRaMacHandleNvm+0xbc>
    {
        nvmData->SecureElement.Crc32 = crc;
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	68ba      	ldr	r2, [r7, #8]
 800f20c:	f8c3 21e0 	str.w	r2, [r3, #480]	@ 0x1e0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 800f210:	89fb      	ldrh	r3, [r7, #14]
 800f212:	f043 0308 	orr.w	r3, r3, #8
 800f216:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800f21e:	2100      	movs	r1, #0
 800f220:	4618      	mov	r0, r3
 800f222:	f007 ff8d 	bl	8017140 <Crc32>
 800f226:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	f8d3 31e4 	ldr.w	r3, [r3, #484]	@ 0x1e4
 800f22e:	68ba      	ldr	r2, [r7, #8]
 800f230:	429a      	cmp	r2, r3
 800f232:	d007      	beq.n	800f244 <LoRaMacHandleNvm+0xe8>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	68ba      	ldr	r2, [r7, #8]
 800f238:	f8c3 21e4 	str.w	r2, [r3, #484]	@ 0x1e4
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 800f23c:	89fb      	ldrh	r3, [r7, #14]
 800f23e:	f043 0310 	orr.w	r3, r3, #16
 800f242:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800f24a:	f44f 715e 	mov.w	r1, #888	@ 0x378
 800f24e:	4618      	mov	r0, r3
 800f250:	f007 ff76 	bl	8017140 <Crc32>
 800f254:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	f8d3 3560 	ldr.w	r3, [r3, #1376]	@ 0x560
 800f25c:	68ba      	ldr	r2, [r7, #8]
 800f25e:	429a      	cmp	r2, r3
 800f260:	d007      	beq.n	800f272 <LoRaMacHandleNvm+0x116>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	68ba      	ldr	r2, [r7, #8]
 800f266:	f8c3 2560 	str.w	r2, [r3, #1376]	@ 0x560
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 800f26a:	89fb      	ldrh	r3, [r7, #14]
 800f26c:	f043 0320 	orr.w	r3, r3, #32
 800f270:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	f203 5364 	addw	r3, r3, #1380	@ 0x564
 800f278:	2114      	movs	r1, #20
 800f27a:	4618      	mov	r0, r3
 800f27c:	f007 ff60 	bl	8017140 <Crc32>
 800f280:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	f8d3 3578 	ldr.w	r3, [r3, #1400]	@ 0x578
 800f288:	68ba      	ldr	r2, [r7, #8]
 800f28a:	429a      	cmp	r2, r3
 800f28c:	d007      	beq.n	800f29e <LoRaMacHandleNvm+0x142>
    {
        nvmData->ClassB.Crc32 = crc;
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	68ba      	ldr	r2, [r7, #8]
 800f292:	f8c3 2578 	str.w	r2, [r3, #1400]	@ 0x578
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 800f296:	89fb      	ldrh	r3, [r7, #14]
 800f298:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f29c:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 800f29e:	89fb      	ldrh	r3, [r7, #14]
 800f2a0:	4618      	mov	r0, r3
 800f2a2:	f002 f819 	bl	80112d8 <CallNvmDataChangeCallback>
 800f2a6:	e000      	b.n	800f2aa <LoRaMacHandleNvm+0x14e>
        return;
 800f2a8:	bf00      	nop
}
 800f2aa:	3710      	adds	r7, #16
 800f2ac:	46bd      	mov	sp, r7
 800f2ae:	bd80      	pop	{r7, pc}
 800f2b0:	200008d8 	.word	0x200008d8

0800f2b4 <LoRaMacHandleResponseTimeout>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool LoRaMacHandleResponseTimeout( TimerTime_t timeoutInMs, TimerTime_t startTimeInMs )
{
 800f2b4:	b580      	push	{r7, lr}
 800f2b6:	b084      	sub	sp, #16
 800f2b8:	af00      	add	r7, sp, #0
 800f2ba:	6078      	str	r0, [r7, #4]
 800f2bc:	6039      	str	r1, [r7, #0]
    if( startTimeInMs != 0 )
 800f2be:	683b      	ldr	r3, [r7, #0]
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d00d      	beq.n	800f2e0 <LoRaMacHandleResponseTimeout+0x2c>
    {
        TimerTime_t elapsedTime = TimerGetElapsedTime( startTimeInMs );
 800f2c4:	6838      	ldr	r0, [r7, #0]
 800f2c6:	f00c f95f 	bl	801b588 <UTIL_TIMER_GetElapsedTime>
 800f2ca:	60f8      	str	r0, [r7, #12]
        if( elapsedTime > timeoutInMs )
 800f2cc:	68fa      	ldr	r2, [r7, #12]
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	429a      	cmp	r2, r3
 800f2d2:	d905      	bls.n	800f2e0 <LoRaMacHandleResponseTimeout+0x2c>
        {
            Nvm.MacGroup1.SrvAckRequested = false;
 800f2d4:	4b05      	ldr	r3, [pc, #20]	@ (800f2ec <LoRaMacHandleResponseTimeout+0x38>)
 800f2d6:	2200      	movs	r2, #0
 800f2d8:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
            return true;
 800f2dc:	2301      	movs	r3, #1
 800f2de:	e000      	b.n	800f2e2 <LoRaMacHandleResponseTimeout+0x2e>
        }
    }
    return false;
 800f2e0:	2300      	movs	r3, #0
}
 800f2e2:	4618      	mov	r0, r3
 800f2e4:	3710      	adds	r7, #16
 800f2e6:	46bd      	mov	sp, r7
 800f2e8:	bd80      	pop	{r7, pc}
 800f2ea:	bf00      	nop
 800f2ec:	20000df8 	.word	0x20000df8

0800f2f0 <LoRaMacProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacProcess( void )
{
 800f2f0:	b580      	push	{r7, lr}
 800f2f2:	b082      	sub	sp, #8
 800f2f4:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 800f2f6:	2300      	movs	r3, #0
 800f2f8:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 800f2fa:	f7ff fd11 	bl	800ed20 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800f2fe:	f003 fd90 	bl	8012e22 <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800f302:	4b26      	ldr	r3, [pc, #152]	@ (800f39c <LoRaMacProcess+0xac>)
 800f304:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800f308:	f003 0320 	and.w	r3, r3, #32
 800f30c:	b2db      	uxtb	r3, r3
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d025      	beq.n	800f35e <LoRaMacProcess+0x6e>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800f312:	2000      	movs	r0, #0
 800f314:	f7ff fd6c 	bl	800edf0 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800f318:	f7ff ff00 	bl	800f11c <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 800f31c:	f001 fffa 	bl	8011314 <IsRequestPending>
 800f320:	4603      	mov	r3, r0
 800f322:	2b00      	cmp	r3, #0
 800f324:	d006      	beq.n	800f334 <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800f326:	f7ff feb3 	bl	800f090 <LoRaMacCheckForBeaconAcquisition>
 800f32a:	4603      	mov	r3, r0
 800f32c:	461a      	mov	r2, r3
 800f32e:	79fb      	ldrb	r3, [r7, #7]
 800f330:	4313      	orrs	r3, r2
 800f332:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 800f334:	79fb      	ldrb	r3, [r7, #7]
 800f336:	2b00      	cmp	r3, #0
 800f338:	d103      	bne.n	800f342 <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 800f33a:	f7ff fe73 	bl	800f024 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 800f33e:	f7ff fe15 	bl	800ef6c <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 800f342:	f7ff fd65 	bl	800ee10 <LoRaMacHandleRequestEvents>
        LoRaMacHandleScheduleUplinkEvent( );
 800f346:	f7ff fdc5 	bl	800eed4 <LoRaMacHandleScheduleUplinkEvent>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800f34a:	2001      	movs	r0, #1
 800f34c:	f7ff fd50 	bl	800edf0 <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800f350:	4a12      	ldr	r2, [pc, #72]	@ (800f39c <LoRaMacProcess+0xac>)
 800f352:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800f356:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f35a:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
    }
    LoRaMacHandleIndicationEvents( );
 800f35e:	f7ff fdcd 	bl	800eefc <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800f362:	4b0e      	ldr	r3, [pc, #56]	@ (800f39c <LoRaMacProcess+0xac>)
 800f364:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800f368:	2b02      	cmp	r3, #2
 800f36a:	d101      	bne.n	800f370 <LoRaMacProcess+0x80>
    {
        OpenContinuousRxCWindow( );
 800f36c:	f001 fbee 	bl	8010b4c <OpenContinuousRxCWindow>
    }
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 800f370:	4b0a      	ldr	r3, [pc, #40]	@ (800f39c <LoRaMacProcess+0xac>)
 800f372:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800f376:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f37a:	b2db      	uxtb	r3, r3
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d009      	beq.n	800f394 <LoRaMacProcess+0xa4>
    {
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 800f380:	4a06      	ldr	r2, [pc, #24]	@ (800f39c <LoRaMacProcess+0xac>)
 800f382:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800f386:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f38a:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
        LoRaMacHandleNvm( &Nvm );
 800f38e:	4804      	ldr	r0, [pc, #16]	@ (800f3a0 <LoRaMacProcess+0xb0>)
 800f390:	f7ff fee4 	bl	800f15c <LoRaMacHandleNvm>
    }
}
 800f394:	bf00      	nop
 800f396:	3708      	adds	r7, #8
 800f398:	46bd      	mov	sp, r7
 800f39a:	bd80      	pop	{r7, pc}
 800f39c:	200008d8 	.word	0x200008d8
 800f3a0:	20000df8 	.word	0x20000df8

0800f3a4 <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 800f3a4:	b580      	push	{r7, lr}
 800f3a6:	b082      	sub	sp, #8
 800f3a8:	af00      	add	r7, sp, #0
 800f3aa:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 800f3ac:	481e      	ldr	r0, [pc, #120]	@ (800f428 <OnTxDelayedTimerEvent+0x84>)
 800f3ae:	f00b ffbf 	bl	801b330 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800f3b2:	4b1e      	ldr	r3, [pc, #120]	@ (800f42c <OnTxDelayedTimerEvent+0x88>)
 800f3b4:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f3b8:	f023 0320 	bic.w	r3, r3, #32
 800f3bc:	4a1b      	ldr	r2, [pc, #108]	@ (800f42c <OnTxDelayedTimerEvent+0x88>)
 800f3be:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 800f3c2:	4b1b      	ldr	r3, [pc, #108]	@ (800f430 <OnTxDelayedTimerEvent+0x8c>)
 800f3c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f3c8:	4a18      	ldr	r2, [pc, #96]	@ (800f42c <OnTxDelayedTimerEvent+0x88>)
 800f3ca:	f8d2 249c 	ldr.w	r2, [r2, #1180]	@ 0x49c
 800f3ce:	4611      	mov	r1, r2
 800f3d0:	4618      	mov	r0, r3
 800f3d2:	f7ff ff6f 	bl	800f2b4 <LoRaMacHandleResponseTimeout>
 800f3d6:	4603      	mov	r3, r0
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d11e      	bne.n	800f41a <OnTxDelayedTimerEvent+0x76>
        return;
    }
#endif /* LORAMAC_VERSION */

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 800f3dc:	2001      	movs	r0, #1
 800f3de:	f001 f93b 	bl	8010658 <ScheduleTx>
 800f3e2:	4603      	mov	r3, r0
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d01a      	beq.n	800f41e <OnTxDelayedTimerEvent+0x7a>
 800f3e8:	2b0b      	cmp	r3, #11
 800f3ea:	d018      	beq.n	800f41e <OnTxDelayedTimerEvent+0x7a>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800f3ec:	4b10      	ldr	r3, [pc, #64]	@ (800f430 <OnTxDelayedTimerEvent+0x8c>)
 800f3ee:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800f3f2:	b2da      	uxtb	r2, r3
 800f3f4:	4b0d      	ldr	r3, [pc, #52]	@ (800f42c <OnTxDelayedTimerEvent+0x88>)
 800f3f6:	f883 2446 	strb.w	r2, [r3, #1094]	@ 0x446
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 800f3fa:	4b0c      	ldr	r3, [pc, #48]	@ (800f42c <OnTxDelayedTimerEvent+0x88>)
 800f3fc:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 800f400:	4b0a      	ldr	r3, [pc, #40]	@ (800f42c <OnTxDelayedTimerEvent+0x88>)
 800f402:	f883 2449 	strb.w	r2, [r3, #1097]	@ 0x449
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800f406:	4b09      	ldr	r3, [pc, #36]	@ (800f42c <OnTxDelayedTimerEvent+0x88>)
 800f408:	2209      	movs	r2, #9
 800f40a:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800f40e:	2009      	movs	r0, #9
 800f410:	f004 f926 	bl	8013660 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800f414:	f001 ff24 	bl	8011260 <StopRetransmission>
            break;
 800f418:	e002      	b.n	800f420 <OnTxDelayedTimerEvent+0x7c>
        return;
 800f41a:	bf00      	nop
 800f41c:	e000      	b.n	800f420 <OnTxDelayedTimerEvent+0x7c>
            break;
 800f41e:	bf00      	nop
        }
    }
}
 800f420:	3708      	adds	r7, #8
 800f422:	46bd      	mov	sp, r7
 800f424:	bd80      	pop	{r7, pc}
 800f426:	bf00      	nop
 800f428:	20000c40 	.word	0x20000c40
 800f42c:	200008d8 	.word	0x200008d8
 800f430:	20000df8 	.word	0x20000df8

0800f434 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 800f434:	b580      	push	{r7, lr}
 800f436:	b082      	sub	sp, #8
 800f438:	af00      	add	r7, sp, #0
 800f43a:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800f43c:	4b17      	ldr	r3, [pc, #92]	@ (800f49c <OnRxWindow1TimerEvent+0x68>)
 800f43e:	f893 241f 	ldrb.w	r2, [r3, #1055]	@ 0x41f
 800f442:	4b16      	ldr	r3, [pc, #88]	@ (800f49c <OnRxWindow1TimerEvent+0x68>)
 800f444:	f883 23b8 	strb.w	r2, [r3, #952]	@ 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 800f448:	4b15      	ldr	r3, [pc, #84]	@ (800f4a0 <OnRxWindow1TimerEvent+0x6c>)
 800f44a:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 800f44e:	b25a      	sxtb	r2, r3
 800f450:	4b12      	ldr	r3, [pc, #72]	@ (800f49c <OnRxWindow1TimerEvent+0x68>)
 800f452:	f883 23bb 	strb.w	r2, [r3, #955]	@ 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800f456:	4b12      	ldr	r3, [pc, #72]	@ (800f4a0 <OnRxWindow1TimerEvent+0x6c>)
 800f458:	f893 2075 	ldrb.w	r2, [r3, #117]	@ 0x75
 800f45c:	4b0f      	ldr	r3, [pc, #60]	@ (800f49c <OnRxWindow1TimerEvent+0x68>)
 800f45e:	f883 23c8 	strb.w	r2, [r3, #968]	@ 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800f462:	4b0f      	ldr	r3, [pc, #60]	@ (800f4a0 <OnRxWindow1TimerEvent+0x6c>)
 800f464:	f893 2080 	ldrb.w	r2, [r3, #128]	@ 0x80
 800f468:	4b0c      	ldr	r3, [pc, #48]	@ (800f49c <OnRxWindow1TimerEvent+0x68>)
 800f46a:	f883 23c9 	strb.w	r2, [r3, #969]	@ 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 800f46e:	4b0b      	ldr	r3, [pc, #44]	@ (800f49c <OnRxWindow1TimerEvent+0x68>)
 800f470:	2200      	movs	r2, #0
 800f472:	f883 23ca 	strb.w	r2, [r3, #970]	@ 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 800f476:	4b09      	ldr	r3, [pc, #36]	@ (800f49c <OnRxWindow1TimerEvent+0x68>)
 800f478:	2200      	movs	r2, #0
 800f47a:	f883 23cb 	strb.w	r2, [r3, #971]	@ 0x3cb
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800f47e:	4b08      	ldr	r3, [pc, #32]	@ (800f4a0 <OnRxWindow1TimerEvent+0x6c>)
 800f480:	f893 211c 	ldrb.w	r2, [r3, #284]	@ 0x11c
 800f484:	4b05      	ldr	r3, [pc, #20]	@ (800f49c <OnRxWindow1TimerEvent+0x68>)
 800f486:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800f48a:	4906      	ldr	r1, [pc, #24]	@ (800f4a4 <OnRxWindow1TimerEvent+0x70>)
 800f48c:	4806      	ldr	r0, [pc, #24]	@ (800f4a8 <OnRxWindow1TimerEvent+0x74>)
 800f48e:	f001 fb29 	bl	8010ae4 <RxWindowSetup>
}
 800f492:	bf00      	nop
 800f494:	3708      	adds	r7, #8
 800f496:	46bd      	mov	sp, r7
 800f498:	bd80      	pop	{r7, pc}
 800f49a:	bf00      	nop
 800f49c:	200008d8 	.word	0x200008d8
 800f4a0:	20000df8 	.word	0x20000df8
 800f4a4:	20000c90 	.word	0x20000c90
 800f4a8:	20000c58 	.word	0x20000c58

0800f4ac <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 800f4ac:	b580      	push	{r7, lr}
 800f4ae:	b082      	sub	sp, #8
 800f4b0:	af00      	add	r7, sp, #0
 800f4b2:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800f4b4:	4b19      	ldr	r3, [pc, #100]	@ (800f51c <OnRxWindow2TimerEvent+0x70>)
 800f4b6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d029      	beq.n	800f512 <OnRxWindow2TimerEvent+0x66>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800f4be:	4b17      	ldr	r3, [pc, #92]	@ (800f51c <OnRxWindow2TimerEvent+0x70>)
 800f4c0:	f893 241f 	ldrb.w	r2, [r3, #1055]	@ 0x41f
 800f4c4:	4b15      	ldr	r3, [pc, #84]	@ (800f51c <OnRxWindow2TimerEvent+0x70>)
 800f4c6:	f883 23d0 	strb.w	r2, [r3, #976]	@ 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800f4ca:	4b15      	ldr	r3, [pc, #84]	@ (800f520 <OnRxWindow2TimerEvent+0x74>)
 800f4cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f4ce:	4a13      	ldr	r2, [pc, #76]	@ (800f51c <OnRxWindow2TimerEvent+0x70>)
 800f4d0:	f8c2 33d4 	str.w	r3, [r2, #980]	@ 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800f4d4:	4b12      	ldr	r3, [pc, #72]	@ (800f520 <OnRxWindow2TimerEvent+0x74>)
 800f4d6:	f893 2075 	ldrb.w	r2, [r3, #117]	@ 0x75
 800f4da:	4b10      	ldr	r3, [pc, #64]	@ (800f51c <OnRxWindow2TimerEvent+0x70>)
 800f4dc:	f883 23e0 	strb.w	r2, [r3, #992]	@ 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800f4e0:	4b0f      	ldr	r3, [pc, #60]	@ (800f520 <OnRxWindow2TimerEvent+0x74>)
 800f4e2:	f893 2080 	ldrb.w	r2, [r3, #128]	@ 0x80
 800f4e6:	4b0d      	ldr	r3, [pc, #52]	@ (800f51c <OnRxWindow2TimerEvent+0x70>)
 800f4e8:	f883 23e1 	strb.w	r2, [r3, #993]	@ 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 800f4ec:	4b0b      	ldr	r3, [pc, #44]	@ (800f51c <OnRxWindow2TimerEvent+0x70>)
 800f4ee:	2200      	movs	r2, #0
 800f4f0:	f883 23e2 	strb.w	r2, [r3, #994]	@ 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800f4f4:	4b09      	ldr	r3, [pc, #36]	@ (800f51c <OnRxWindow2TimerEvent+0x70>)
 800f4f6:	2201      	movs	r2, #1
 800f4f8:	f883 23e3 	strb.w	r2, [r3, #995]	@ 0x3e3
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800f4fc:	4b08      	ldr	r3, [pc, #32]	@ (800f520 <OnRxWindow2TimerEvent+0x74>)
 800f4fe:	f893 211c 	ldrb.w	r2, [r3, #284]	@ 0x11c
 800f502:	4b06      	ldr	r3, [pc, #24]	@ (800f51c <OnRxWindow2TimerEvent+0x70>)
 800f504:	f883 23e4 	strb.w	r2, [r3, #996]	@ 0x3e4
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800f508:	4906      	ldr	r1, [pc, #24]	@ (800f524 <OnRxWindow2TimerEvent+0x78>)
 800f50a:	4807      	ldr	r0, [pc, #28]	@ (800f528 <OnRxWindow2TimerEvent+0x7c>)
 800f50c:	f001 faea 	bl	8010ae4 <RxWindowSetup>
 800f510:	e000      	b.n	800f514 <OnRxWindow2TimerEvent+0x68>
        return;
 800f512:	bf00      	nop
}
 800f514:	3708      	adds	r7, #8
 800f516:	46bd      	mov	sp, r7
 800f518:	bd80      	pop	{r7, pc}
 800f51a:	bf00      	nop
 800f51c:	200008d8 	.word	0x200008d8
 800f520:	20000df8 	.word	0x20000df8
 800f524:	20000ca8 	.word	0x20000ca8
 800f528:	20000c70 	.word	0x20000c70

0800f52c <OnRetransmitTimeoutTimerEvent>:

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
}
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static void OnRetransmitTimeoutTimerEvent( void* context )
{
 800f52c:	b580      	push	{r7, lr}
 800f52e:	b082      	sub	sp, #8
 800f530:	af00      	add	r7, sp, #0
 800f532:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 800f534:	480f      	ldr	r0, [pc, #60]	@ (800f574 <OnRetransmitTimeoutTimerEvent+0x48>)
 800f536:	f00b fefb 	bl	801b330 <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 800f53a:	4b0f      	ldr	r3, [pc, #60]	@ (800f578 <OnRetransmitTimeoutTimerEvent+0x4c>)
 800f53c:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
 800f540:	2b00      	cmp	r3, #0
 800f542:	d003      	beq.n	800f54c <OnRetransmitTimeoutTimerEvent+0x20>
    {
        MacCtx.RetransmitTimeoutRetry = true;
 800f544:	4b0c      	ldr	r3, [pc, #48]	@ (800f578 <OnRetransmitTimeoutTimerEvent+0x4c>)
 800f546:	2201      	movs	r2, #1
 800f548:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
    }
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800f54c:	4b0a      	ldr	r3, [pc, #40]	@ (800f578 <OnRetransmitTimeoutTimerEvent+0x4c>)
 800f54e:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800f552:	2b00      	cmp	r3, #0
 800f554:	d00a      	beq.n	800f56c <OnRetransmitTimeoutTimerEvent+0x40>
 800f556:	4b08      	ldr	r3, [pc, #32]	@ (800f578 <OnRetransmitTimeoutTimerEvent+0x4c>)
 800f558:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800f55c:	691b      	ldr	r3, [r3, #16]
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d004      	beq.n	800f56c <OnRetransmitTimeoutTimerEvent+0x40>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800f562:	4b05      	ldr	r3, [pc, #20]	@ (800f578 <OnRetransmitTimeoutTimerEvent+0x4c>)
 800f564:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800f568:	691b      	ldr	r3, [r3, #16]
 800f56a:	4798      	blx	r3
    }
}
 800f56c:	bf00      	nop
 800f56e:	3708      	adds	r7, #8
 800f570:	46bd      	mov	sp, r7
 800f572:	bd80      	pop	{r7, pc}
 800f574:	20000cdc 	.word	0x20000cdc
 800f578:	200008d8 	.word	0x200008d8

0800f57c <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 800f57c:	b580      	push	{r7, lr}
 800f57e:	b084      	sub	sp, #16
 800f580:	af00      	add	r7, sp, #0
 800f582:	60ba      	str	r2, [r7, #8]
 800f584:	607b      	str	r3, [r7, #4]
 800f586:	4603      	mov	r3, r0
 800f588:	73fb      	strb	r3, [r7, #15]
 800f58a:	460b      	mov	r3, r1
 800f58c:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 800f58e:	68bb      	ldr	r3, [r7, #8]
 800f590:	2b00      	cmp	r3, #0
 800f592:	d005      	beq.n	800f5a0 <GetFCntDown+0x24>
 800f594:	69bb      	ldr	r3, [r7, #24]
 800f596:	2b00      	cmp	r3, #0
 800f598:	d002      	beq.n	800f5a0 <GetFCntDown+0x24>
 800f59a:	69fb      	ldr	r3, [r7, #28]
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d101      	bne.n	800f5a4 <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800f5a0:	2309      	movs	r3, #9
 800f5a2:	e028      	b.n	800f5f6 <GetFCntDown+0x7a>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 800f5a4:	7bfb      	ldrb	r3, [r7, #15]
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d016      	beq.n	800f5d8 <GetFCntDown+0x5c>
 800f5aa:	2b01      	cmp	r3, #1
 800f5ac:	d118      	bne.n	800f5e0 <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 800f5ae:	79bb      	ldrb	r3, [r7, #6]
 800f5b0:	2b01      	cmp	r3, #1
 800f5b2:	d10d      	bne.n	800f5d0 <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 800f5b4:	7bbb      	ldrb	r3, [r7, #14]
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d002      	beq.n	800f5c0 <GetFCntDown+0x44>
 800f5ba:	7bbb      	ldrb	r3, [r7, #14]
 800f5bc:	2b03      	cmp	r3, #3
 800f5be:	d103      	bne.n	800f5c8 <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 800f5c0:	69bb      	ldr	r3, [r7, #24]
 800f5c2:	2202      	movs	r2, #2
 800f5c4:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 800f5c6:	e00d      	b.n	800f5e4 <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 800f5c8:	69bb      	ldr	r3, [r7, #24]
 800f5ca:	2201      	movs	r2, #1
 800f5cc:	701a      	strb	r2, [r3, #0]
            break;
 800f5ce:	e009      	b.n	800f5e4 <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 800f5d0:	69bb      	ldr	r3, [r7, #24]
 800f5d2:	2203      	movs	r2, #3
 800f5d4:	701a      	strb	r2, [r3, #0]
            break;
 800f5d6:	e005      	b.n	800f5e4 <GetFCntDown+0x68>
        /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 800f5d8:	69bb      	ldr	r3, [r7, #24]
 800f5da:	2204      	movs	r2, #4
 800f5dc:	701a      	strb	r2, [r3, #0]
            break;
 800f5de:	e001      	b.n	800f5e4 <GetFCntDown+0x68>
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        /* ST_WORKAROUND_END */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 800f5e0:	2305      	movs	r3, #5
 800f5e2:	e008      	b.n	800f5f6 <GetFCntDown+0x7a>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
 800f5e4:	69bb      	ldr	r3, [r7, #24]
 800f5e6:	7818      	ldrb	r0, [r3, #0]
 800f5e8:	68bb      	ldr	r3, [r7, #8]
 800f5ea:	89db      	ldrh	r3, [r3, #14]
 800f5ec:	69fa      	ldr	r2, [r7, #28]
 800f5ee:	4619      	mov	r1, r3
 800f5f0:	f004 fc5c 	bl	8013eac <LoRaMacCryptoGetFCntDown>
 800f5f4:	4603      	mov	r3, r0
}
 800f5f6:	4618      	mov	r0, r3
 800f5f8:	3710      	adds	r7, #16
 800f5fa:	46bd      	mov	sp, r7
 800f5fc:	bd80      	pop	{r7, pc}
	...

0800f600 <SwitchClass>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 800f600:	b5b0      	push	{r4, r5, r7, lr}
 800f602:	b084      	sub	sp, #16
 800f604:	af00      	add	r7, sp, #0
 800f606:	4603      	mov	r3, r0
 800f608:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f60a:	2303      	movs	r3, #3
 800f60c:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 800f60e:	4b62      	ldr	r3, [pc, #392]	@ (800f798 <SwitchClass+0x198>)
 800f610:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800f614:	2b02      	cmp	r3, #2
 800f616:	f000 80a7 	beq.w	800f768 <SwitchClass+0x168>
 800f61a:	2b02      	cmp	r3, #2
 800f61c:	f300 80b6 	bgt.w	800f78c <SwitchClass+0x18c>
 800f620:	2b00      	cmp	r3, #0
 800f622:	d003      	beq.n	800f62c <SwitchClass+0x2c>
 800f624:	2b01      	cmp	r3, #1
 800f626:	f000 8091 	beq.w	800f74c <SwitchClass+0x14c>
 800f62a:	e0af      	b.n	800f78c <SwitchClass+0x18c>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 800f62c:	79fb      	ldrb	r3, [r7, #7]
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d107      	bne.n	800f642 <SwitchClass+0x42>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800f632:	4b59      	ldr	r3, [pc, #356]	@ (800f798 <SwitchClass+0x198>)
 800f634:	4a58      	ldr	r2, [pc, #352]	@ (800f798 <SwitchClass+0x198>)
 800f636:	336c      	adds	r3, #108	@ 0x6c
 800f638:	3264      	adds	r2, #100	@ 0x64
 800f63a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f63e:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            if( deviceClass == CLASS_B )
 800f642:	79fb      	ldrb	r3, [r7, #7]
 800f644:	2b01      	cmp	r3, #1
 800f646:	d10c      	bne.n	800f662 <SwitchClass+0x62>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 800f648:	79fb      	ldrb	r3, [r7, #7]
 800f64a:	4618      	mov	r0, r3
 800f64c:	f003 fb80 	bl	8012d50 <LoRaMacClassBSwitchClass>
 800f650:	4603      	mov	r3, r0
 800f652:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 800f654:	7bfb      	ldrb	r3, [r7, #15]
 800f656:	2b00      	cmp	r3, #0
 800f658:	d103      	bne.n	800f662 <SwitchClass+0x62>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 800f65a:	4a4f      	ldr	r2, [pc, #316]	@ (800f798 <SwitchClass+0x198>)
 800f65c:	79fb      	ldrb	r3, [r7, #7]
 800f65e:	f882 3104 	strb.w	r3, [r2, #260]	@ 0x104
                }
            }

            if( deviceClass == CLASS_C )
 800f662:	79fb      	ldrb	r3, [r7, #7]
 800f664:	2b02      	cmp	r3, #2
 800f666:	f040 808c 	bne.w	800f782 <SwitchClass+0x182>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800f66a:	4a4b      	ldr	r2, [pc, #300]	@ (800f798 <SwitchClass+0x198>)
 800f66c:	79fb      	ldrb	r3, [r7, #7]
 800f66e:	f882 3104 	strb.w	r3, [r2, #260]	@ 0x104

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800f672:	4a4a      	ldr	r2, [pc, #296]	@ (800f79c <SwitchClass+0x19c>)
 800f674:	4b49      	ldr	r3, [pc, #292]	@ (800f79c <SwitchClass+0x19c>)
 800f676:	f502 747a 	add.w	r4, r2, #1000	@ 0x3e8
 800f67a:	f503 7574 	add.w	r5, r3, #976	@ 0x3d0
 800f67e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f680:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f682:	e895 0003 	ldmia.w	r5, {r0, r1}
 800f686:	e884 0003 	stmia.w	r4, {r0, r1}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800f68a:	4b44      	ldr	r3, [pc, #272]	@ (800f79c <SwitchClass+0x19c>)
 800f68c:	2202      	movs	r2, #2
 800f68e:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800f692:	2300      	movs	r3, #0
 800f694:	73bb      	strb	r3, [r7, #14]
 800f696:	e049      	b.n	800f72c <SwitchClass+0x12c>
                {
                    if( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true )
 800f698:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f69c:	4a3e      	ldr	r2, [pc, #248]	@ (800f798 <SwitchClass+0x198>)
 800f69e:	212c      	movs	r1, #44	@ 0x2c
 800f6a0:	fb01 f303 	mul.w	r3, r1, r3
 800f6a4:	4413      	add	r3, r2
 800f6a6:	33da      	adds	r3, #218	@ 0xda
 800f6a8:	781b      	ldrb	r3, [r3, #0]
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d038      	beq.n	800f720 <SwitchClass+0x120>
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 800f6ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f6b2:	4a39      	ldr	r2, [pc, #228]	@ (800f798 <SwitchClass+0x198>)
 800f6b4:	212c      	movs	r1, #44	@ 0x2c
 800f6b6:	fb01 f303 	mul.w	r3, r1, r3
 800f6ba:	4413      	add	r3, r2
 800f6bc:	33f0      	adds	r3, #240	@ 0xf0
 800f6be:	681b      	ldr	r3, [r3, #0]
 800f6c0:	4a35      	ldr	r2, [pc, #212]	@ (800f798 <SwitchClass+0x198>)
 800f6c2:	66d3      	str	r3, [r2, #108]	@ 0x6c
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 800f6c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f6c8:	4a33      	ldr	r2, [pc, #204]	@ (800f798 <SwitchClass+0x198>)
 800f6ca:	212c      	movs	r1, #44	@ 0x2c
 800f6cc:	fb01 f303 	mul.w	r3, r1, r3
 800f6d0:	4413      	add	r3, r2
 800f6d2:	33f4      	adds	r3, #244	@ 0xf4
 800f6d4:	f993 3000 	ldrsb.w	r3, [r3]
 800f6d8:	b2da      	uxtb	r2, r3
 800f6da:	4b2f      	ldr	r3, [pc, #188]	@ (800f798 <SwitchClass+0x198>)
 800f6dc:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800f6e0:	4b2e      	ldr	r3, [pc, #184]	@ (800f79c <SwitchClass+0x19c>)
 800f6e2:	f893 241f 	ldrb.w	r2, [r3, #1055]	@ 0x41f
 800f6e6:	4b2d      	ldr	r3, [pc, #180]	@ (800f79c <SwitchClass+0x19c>)
 800f6e8:	f883 23e8 	strb.w	r2, [r3, #1000]	@ 0x3e8
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800f6ec:	4b2a      	ldr	r3, [pc, #168]	@ (800f798 <SwitchClass+0x198>)
 800f6ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f6f0:	4a2a      	ldr	r2, [pc, #168]	@ (800f79c <SwitchClass+0x19c>)
 800f6f2:	f8c2 33ec 	str.w	r3, [r2, #1004]	@ 0x3ec
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800f6f6:	4b28      	ldr	r3, [pc, #160]	@ (800f798 <SwitchClass+0x198>)
 800f6f8:	f893 2075 	ldrb.w	r2, [r3, #117]	@ 0x75
 800f6fc:	4b27      	ldr	r3, [pc, #156]	@ (800f79c <SwitchClass+0x19c>)
 800f6fe:	f883 23f8 	strb.w	r2, [r3, #1016]	@ 0x3f8
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800f702:	4b25      	ldr	r3, [pc, #148]	@ (800f798 <SwitchClass+0x198>)
 800f704:	f893 2080 	ldrb.w	r2, [r3, #128]	@ 0x80
 800f708:	4b24      	ldr	r3, [pc, #144]	@ (800f79c <SwitchClass+0x19c>)
 800f70a:	f883 23f9 	strb.w	r2, [r3, #1017]	@ 0x3f9
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800f70e:	4b23      	ldr	r3, [pc, #140]	@ (800f79c <SwitchClass+0x19c>)
 800f710:	2203      	movs	r2, #3
 800f712:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800f716:	4b21      	ldr	r3, [pc, #132]	@ (800f79c <SwitchClass+0x19c>)
 800f718:	2201      	movs	r2, #1
 800f71a:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa
                        break;
 800f71e:	e009      	b.n	800f734 <SwitchClass+0x134>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800f720:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f724:	b2db      	uxtb	r3, r3
 800f726:	3301      	adds	r3, #1
 800f728:	b2db      	uxtb	r3, r3
 800f72a:	73bb      	strb	r3, [r7, #14]
 800f72c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f730:	2b00      	cmp	r3, #0
 800f732:	ddb1      	ble.n	800f698 <SwitchClass+0x98>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 800f734:	4b19      	ldr	r3, [pc, #100]	@ (800f79c <SwitchClass+0x19c>)
 800f736:	2200      	movs	r2, #0
 800f738:	f883 241e 	strb.w	r2, [r3, #1054]	@ 0x41e
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 800f73c:	4b18      	ldr	r3, [pc, #96]	@ (800f7a0 <SwitchClass+0x1a0>)
 800f73e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f740:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 800f742:	f001 fa03 	bl	8010b4c <OpenContinuousRxCWindow>

                status = LORAMAC_STATUS_OK;
 800f746:	2300      	movs	r3, #0
 800f748:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800f74a:	e01a      	b.n	800f782 <SwitchClass+0x182>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 800f74c:	79fb      	ldrb	r3, [r7, #7]
 800f74e:	4618      	mov	r0, r3
 800f750:	f003 fafe 	bl	8012d50 <LoRaMacClassBSwitchClass>
 800f754:	4603      	mov	r3, r0
 800f756:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 800f758:	7bfb      	ldrb	r3, [r7, #15]
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d113      	bne.n	800f786 <SwitchClass+0x186>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800f75e:	4a0e      	ldr	r2, [pc, #56]	@ (800f798 <SwitchClass+0x198>)
 800f760:	79fb      	ldrb	r3, [r7, #7]
 800f762:	f882 3104 	strb.w	r3, [r2, #260]	@ 0x104
            }
            break;
 800f766:	e00e      	b.n	800f786 <SwitchClass+0x186>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 800f768:	79fb      	ldrb	r3, [r7, #7]
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d10d      	bne.n	800f78a <SwitchClass+0x18a>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800f76e:	4a0a      	ldr	r2, [pc, #40]	@ (800f798 <SwitchClass+0x198>)
 800f770:	79fb      	ldrb	r3, [r7, #7]
 800f772:	f882 3104 	strb.w	r3, [r2, #260]	@ 0x104

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 800f776:	4b0a      	ldr	r3, [pc, #40]	@ (800f7a0 <SwitchClass+0x1a0>)
 800f778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f77a:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 800f77c:	2300      	movs	r3, #0
 800f77e:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800f780:	e003      	b.n	800f78a <SwitchClass+0x18a>
            break;
 800f782:	bf00      	nop
 800f784:	e002      	b.n	800f78c <SwitchClass+0x18c>
            break;
 800f786:	bf00      	nop
 800f788:	e000      	b.n	800f78c <SwitchClass+0x18c>
            break;
 800f78a:	bf00      	nop
        }
    }

    return status;
 800f78c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f78e:	4618      	mov	r0, r3
 800f790:	3710      	adds	r7, #16
 800f792:	46bd      	mov	sp, r7
 800f794:	bdb0      	pop	{r4, r5, r7, pc}
 800f796:	bf00      	nop
 800f798:	20000df8 	.word	0x20000df8
 800f79c:	200008d8 	.word	0x200008d8
 800f7a0:	0801f57c 	.word	0x0801f57c

0800f7a4 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 800f7a4:	b580      	push	{r7, lr}
 800f7a6:	b086      	sub	sp, #24
 800f7a8:	af00      	add	r7, sp, #0
 800f7aa:	4603      	mov	r3, r0
 800f7ac:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800f7ae:	4b10      	ldr	r3, [pc, #64]	@ (800f7f0 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800f7b0:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800f7b4:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 800f7b6:	79fb      	ldrb	r3, [r7, #7]
 800f7b8:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 800f7ba:	230d      	movs	r3, #13
 800f7bc:	743b      	strb	r3, [r7, #16]
    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800f7be:	4b0c      	ldr	r3, [pc, #48]	@ (800f7f0 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800f7c0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d001      	beq.n	800f7cc <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800f7c8:	230e      	movs	r3, #14
 800f7ca:	743b      	strb	r3, [r7, #16]
    }
    /* ST_WORKAROUND_END */
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800f7cc:	4b08      	ldr	r3, [pc, #32]	@ (800f7f0 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800f7ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f7d2:	f107 0210 	add.w	r2, r7, #16
 800f7d6:	4611      	mov	r1, r2
 800f7d8:	4618      	mov	r0, r3
 800f7da:	f005 f9bb 	bl	8014b54 <RegionGetPhyParam>
 800f7de:	4603      	mov	r3, r0
 800f7e0:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 800f7e2:	68fb      	ldr	r3, [r7, #12]
 800f7e4:	b2db      	uxtb	r3, r3
}
 800f7e6:	4618      	mov	r0, r3
 800f7e8:	3718      	adds	r7, #24
 800f7ea:	46bd      	mov	sp, r7
 800f7ec:	bd80      	pop	{r7, pc}
 800f7ee:	bf00      	nop
 800f7f0:	20000df8 	.word	0x20000df8

0800f7f4 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 800f7f4:	b580      	push	{r7, lr}
 800f7f6:	b084      	sub	sp, #16
 800f7f8:	af00      	add	r7, sp, #0
 800f7fa:	4603      	mov	r3, r0
 800f7fc:	71fb      	strb	r3, [r7, #7]
 800f7fe:	460b      	mov	r3, r1
 800f800:	71bb      	strb	r3, [r7, #6]
 800f802:	4613      	mov	r3, r2
 800f804:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 800f806:	2300      	movs	r3, #0
 800f808:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 800f80a:	2300      	movs	r3, #0
 800f80c:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800f80e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800f812:	4618      	mov	r0, r3
 800f814:	f7ff ffc6 	bl	800f7a4 <GetMaxAppPayloadWithoutFOptsLength>
 800f818:	4603      	mov	r3, r0
 800f81a:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 800f81c:	79fb      	ldrb	r3, [r7, #7]
 800f81e:	b29a      	uxth	r2, r3
 800f820:	797b      	ldrb	r3, [r7, #5]
 800f822:	b29b      	uxth	r3, r3
 800f824:	4413      	add	r3, r2
 800f826:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 800f828:	89ba      	ldrh	r2, [r7, #12]
 800f82a:	89fb      	ldrh	r3, [r7, #14]
 800f82c:	429a      	cmp	r2, r3
 800f82e:	d804      	bhi.n	800f83a <ValidatePayloadLength+0x46>
 800f830:	89bb      	ldrh	r3, [r7, #12]
 800f832:	2bff      	cmp	r3, #255	@ 0xff
 800f834:	d801      	bhi.n	800f83a <ValidatePayloadLength+0x46>
    {
        return true;
 800f836:	2301      	movs	r3, #1
 800f838:	e000      	b.n	800f83c <ValidatePayloadLength+0x48>
    }
    return false;
 800f83a:	2300      	movs	r3, #0
}
 800f83c:	4618      	mov	r0, r3
 800f83e:	3710      	adds	r7, #16
 800f840:	46bd      	mov	sp, r7
 800f842:	bd80      	pop	{r7, pc}

0800f844 <ProcessMacCommands>:
}
*/
/*ST_WORKAROUND_END */

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 800f844:	b590      	push	{r4, r7, lr}
 800f846:	b0a5      	sub	sp, #148	@ 0x94
 800f848:	af02      	add	r7, sp, #8
 800f84a:	6078      	str	r0, [r7, #4]
 800f84c:	4608      	mov	r0, r1
 800f84e:	4611      	mov	r1, r2
 800f850:	461a      	mov	r2, r3
 800f852:	4603      	mov	r3, r0
 800f854:	70fb      	strb	r3, [r7, #3]
 800f856:	460b      	mov	r3, r1
 800f858:	70bb      	strb	r3, [r7, #2]
 800f85a:	4613      	mov	r3, r2
 800f85c:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 800f85e:	2300      	movs	r3, #0
 800f860:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
    bool adrBlockFound = false;
 800f864:	2300      	movs	r3, #0
 800f866:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800f86a:	2300      	movs	r3, #0
 800f86c:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( ( rxSlot != RX_SLOT_WIN_1 ) && ( rxSlot != RX_SLOT_WIN_2 ) )
 800f870:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 800f874:	2b00      	cmp	r3, #0
 800f876:	f000 84b9 	beq.w	80101ec <ProcessMacCommands+0x9a8>
 800f87a:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 800f87e:	2b01      	cmp	r3, #1
 800f880:	f040 84ba 	bne.w	80101f8 <ProcessMacCommands+0x9b4>
        // Do only parse MAC commands for Class A RX windows
        return;
    }
#endif /* LORAMAC_VERSION */

    while( macIndex < commandsSize )
 800f884:	f000 bcb2 	b.w	80101ec <ProcessMacCommands+0x9a8>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 800f888:	78fb      	ldrb	r3, [r7, #3]
 800f88a:	687a      	ldr	r2, [r7, #4]
 800f88c:	4413      	add	r3, r2
 800f88e:	781b      	ldrb	r3, [r3, #0]
 800f890:	4618      	mov	r0, r3
 800f892:	f003 fd41 	bl	8013318 <LoRaMacCommandsGetCmdSize>
 800f896:	4603      	mov	r3, r0
 800f898:	461a      	mov	r2, r3
 800f89a:	78fb      	ldrb	r3, [r7, #3]
 800f89c:	441a      	add	r2, r3
 800f89e:	78bb      	ldrb	r3, [r7, #2]
 800f8a0:	429a      	cmp	r2, r3
 800f8a2:	f300 84ab 	bgt.w	80101fc <ProcessMacCommands+0x9b8>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 800f8a6:	78fb      	ldrb	r3, [r7, #3]
 800f8a8:	1c5a      	adds	r2, r3, #1
 800f8aa:	70fa      	strb	r2, [r7, #3]
 800f8ac:	461a      	mov	r2, r3
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	4413      	add	r3, r2
 800f8b2:	781b      	ldrb	r3, [r3, #0]
 800f8b4:	3b02      	subs	r3, #2
 800f8b6:	2b11      	cmp	r3, #17
 800f8b8:	f200 84a2 	bhi.w	8010200 <ProcessMacCommands+0x9bc>
 800f8bc:	a201      	add	r2, pc, #4	@ (adr r2, 800f8c4 <ProcessMacCommands+0x80>)
 800f8be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8c2:	bf00      	nop
 800f8c4:	0800f90d 	.word	0x0800f90d
 800f8c8:	0800f94f 	.word	0x0800f94f
 800f8cc:	0800facb 	.word	0x0800facb
 800f8d0:	0800fb09 	.word	0x0800fb09
 800f8d4:	0800fc01 	.word	0x0800fc01
 800f8d8:	0800fc51 	.word	0x0800fc51
 800f8dc:	0800fd0d 	.word	0x0800fd0d
 800f8e0:	0800fd63 	.word	0x0800fd63
 800f8e4:	0800fe47 	.word	0x0800fe47
 800f8e8:	08010201 	.word	0x08010201
 800f8ec:	08010201 	.word	0x08010201
 800f8f0:	0800fef1 	.word	0x0800fef1
 800f8f4:	08010201 	.word	0x08010201
 800f8f8:	08010201 	.word	0x08010201
 800f8fc:	08010011 	.word	0x08010011
 800f900:	08010045 	.word	0x08010045
 800f904:	080100d5 	.word	0x080100d5
 800f908:	0801014d 	.word	0x0801014d
        {
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 800f90c:	2004      	movs	r0, #4
 800f90e:	f003 fedb 	bl	80136c8 <LoRaMacConfirmQueueIsCmdActive>
 800f912:	4603      	mov	r3, r0
 800f914:	2b00      	cmp	r3, #0
 800f916:	f000 845c 	beq.w	80101d2 <ProcessMacCommands+0x98e>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 800f91a:	2104      	movs	r1, #4
 800f91c:	2000      	movs	r0, #0
 800f91e:	f003 fe47 	bl	80135b0 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 800f922:	78fb      	ldrb	r3, [r7, #3]
 800f924:	1c5a      	adds	r2, r3, #1
 800f926:	70fa      	strb	r2, [r7, #3]
 800f928:	461a      	mov	r2, r3
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	4413      	add	r3, r2
 800f92e:	781a      	ldrb	r2, [r3, #0]
 800f930:	4bb0      	ldr	r3, [pc, #704]	@ (800fbf4 <ProcessMacCommands+0x3b0>)
 800f932:	f883 2460 	strb.w	r2, [r3, #1120]	@ 0x460
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 800f936:	78fb      	ldrb	r3, [r7, #3]
 800f938:	1c5a      	adds	r2, r3, #1
 800f93a:	70fa      	strb	r2, [r7, #3]
 800f93c:	461a      	mov	r2, r3
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	4413      	add	r3, r2
 800f942:	781a      	ldrb	r2, [r3, #0]
 800f944:	4bab      	ldr	r3, [pc, #684]	@ (800fbf4 <ProcessMacCommands+0x3b0>)
 800f946:	f883 2461 	strb.w	r2, [r3, #1121]	@ 0x461
                }
                break;
 800f94a:	f000 bc42 	b.w	80101d2 <ProcessMacCommands+0x98e>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 800f94e:	2300      	movs	r3, #0
 800f950:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 800f954:	2300      	movs	r3, #0
 800f956:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
                uint8_t linkAdrNbRep = 0;
 800f95a:	2300      	movs	r3, #0
 800f95c:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 800f960:	2300      	movs	r3, #0
 800f962:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
                }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                if( adrBlockFound == false )
 800f966:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800f96a:	f083 0301 	eor.w	r3, r3, #1
 800f96e:	b2db      	uxtb	r3, r3
 800f970:	2b00      	cmp	r3, #0
 800f972:	f000 80a6 	beq.w	800fac2 <ProcessMacCommands+0x27e>
                {
                    adrBlockFound = true;
 800f976:	2301      	movs	r3, #1
 800f978:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

                    do
                    {
                        // Fill parameter structure
                        linkAdrReq.Payload = &payload[macIndex - 1];
 800f97c:	78fb      	ldrb	r3, [r7, #3]
 800f97e:	3b01      	subs	r3, #1
 800f980:	687a      	ldr	r2, [r7, #4]
 800f982:	4413      	add	r3, r2
 800f984:	65fb      	str	r3, [r7, #92]	@ 0x5c
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800f986:	4b9c      	ldr	r3, [pc, #624]	@ (800fbf8 <ProcessMacCommands+0x3b4>)
 800f988:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 800f98c:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
                        linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800f990:	4b99      	ldr	r3, [pc, #612]	@ (800fbf8 <ProcessMacCommands+0x3b4>)
 800f992:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800f996:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
                        linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800f99a:	4b97      	ldr	r3, [pc, #604]	@ (800fbf8 <ProcessMacCommands+0x3b4>)
 800f99c:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800f9a0:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
                        linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800f9a4:	4b94      	ldr	r3, [pc, #592]	@ (800fbf8 <ProcessMacCommands+0x3b4>)
 800f9a6:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 800f9aa:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
                        linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800f9ae:	4b92      	ldr	r3, [pc, #584]	@ (800fbf8 <ProcessMacCommands+0x3b4>)
 800f9b0:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 800f9b4:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
                        linkAdrReq.Version = Nvm.MacGroup2.Version;
 800f9b8:	4b8f      	ldr	r3, [pc, #572]	@ (800fbf8 <ProcessMacCommands+0x3b4>)
 800f9ba:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800f9be:	65bb      	str	r3, [r7, #88]	@ 0x58

                        // There is a fundamental difference in reporting the status
                        // of the LinkAdrRequests when ADR is on or off. When ADR is on, every
                        // LinkAdrAns contains the same value. This does not hold when ADR is off,
                        // where every LinkAdrAns requires an individual status.
                        if( Nvm.MacGroup2.AdrCtrlOn == true )
 800f9c0:	4b8d      	ldr	r3, [pc, #564]	@ (800fbf8 <ProcessMacCommands+0x3b4>)
 800f9c2:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d008      	beq.n	800f9dc <ProcessMacCommands+0x198>
                        {
                            // When ADR is on, the function RegionLinkAdrReq will take care
                            // about the parsing and interpretation of the LinkAdrRequest block and
                            // it provides one status which shall be applied to every LinkAdrAns
                            linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800f9ca:	78ba      	ldrb	r2, [r7, #2]
 800f9cc:	78fb      	ldrb	r3, [r7, #3]
 800f9ce:	1ad3      	subs	r3, r2, r3
 800f9d0:	b2db      	uxtb	r3, r3
 800f9d2:	3301      	adds	r3, #1
 800f9d4:	b2db      	uxtb	r3, r3
 800f9d6:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
 800f9da:	e002      	b.n	800f9e2 <ProcessMacCommands+0x19e>
                            // When ADR is off, this function will loop over the individual LinkAdrRequests
                            // and will call RegionLinkAdrReq for each individually, as every request
                            // requires an individual answer.
                            // When ADR is off, the function RegionLinkAdrReq ignores the new values for
                            // ChannelsDatarate, ChannelsTxPower and ChannelsNbTrans.
                            linkAdrReq.PayloadSize = 5;
 800f9dc:	2305      	movs	r3, #5
 800f9de:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
                        }

                        // Process the ADR requests
                        status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 800f9e2:	4b85      	ldr	r3, [pc, #532]	@ (800fbf8 <ProcessMacCommands+0x3b4>)
 800f9e4:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 800f9e8:	f107 0456 	add.w	r4, r7, #86	@ 0x56
 800f9ec:	f107 0257 	add.w	r2, r7, #87	@ 0x57
 800f9f0:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800f9f4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800f9f8:	9301      	str	r3, [sp, #4]
 800f9fa:	f107 0355 	add.w	r3, r7, #85	@ 0x55
 800f9fe:	9300      	str	r3, [sp, #0]
 800fa00:	4623      	mov	r3, r4
 800fa02:	f005 f964 	bl	8014cce <RegionLinkAdrReq>
 800fa06:	4603      	mov	r3, r0
 800fa08:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
                                                &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                        if( ( status & 0x07 ) == 0x07 )
 800fa0c:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800fa10:	f003 0307 	and.w	r3, r3, #7
 800fa14:	2b07      	cmp	r3, #7
 800fa16:	d119      	bne.n	800fa4c <ProcessMacCommands+0x208>
                        {
                            // Set the status that the datarate has been increased
                            if( linkAdrDatarate > Nvm.MacGroup1.ChannelsDatarate )
 800fa18:	4b77      	ldr	r3, [pc, #476]	@ (800fbf8 <ProcessMacCommands+0x3b4>)
 800fa1a:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
 800fa1e:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800fa22:	429a      	cmp	r2, r3
 800fa24:	da03      	bge.n	800fa2e <ProcessMacCommands+0x1ea>
                            {
                                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = true;
 800fa26:	4b74      	ldr	r3, [pc, #464]	@ (800fbf8 <ProcessMacCommands+0x3b4>)
 800fa28:	2201      	movs	r2, #1
 800fa2a:	f883 2109 	strb.w	r2, [r3, #265]	@ 0x109
                            }
                            Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 800fa2e:	f997 2057 	ldrsb.w	r2, [r7, #87]	@ 0x57
 800fa32:	4b71      	ldr	r3, [pc, #452]	@ (800fbf8 <ProcessMacCommands+0x3b4>)
 800fa34:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                            Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 800fa38:	f997 2056 	ldrsb.w	r2, [r7, #86]	@ 0x56
 800fa3c:	4b6e      	ldr	r3, [pc, #440]	@ (800fbf8 <ProcessMacCommands+0x3b4>)
 800fa3e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                            Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 800fa42:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 800fa46:	4b6c      	ldr	r3, [pc, #432]	@ (800fbf8 <ProcessMacCommands+0x3b4>)
 800fa48:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
                        }

                        // Add the answers to the buffer
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800fa4c:	2300      	movs	r3, #0
 800fa4e:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 800fa52:	e00b      	b.n	800fa6c <ProcessMacCommands+0x228>
                        {
                            LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 800fa54:	f107 036b 	add.w	r3, r7, #107	@ 0x6b
 800fa58:	2201      	movs	r2, #1
 800fa5a:	4619      	mov	r1, r3
 800fa5c:	2003      	movs	r0, #3
 800fa5e:	f003 fb0b 	bl	8013078 <LoRaMacCommandsAddCmd>
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800fa62:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800fa66:	3301      	adds	r3, #1
 800fa68:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 800fa6c:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800fa70:	4a62      	ldr	r2, [pc, #392]	@ (800fbfc <ProcessMacCommands+0x3b8>)
 800fa72:	fba2 2303 	umull	r2, r3, r2, r3
 800fa76:	089b      	lsrs	r3, r3, #2
 800fa78:	b2db      	uxtb	r3, r3
 800fa7a:	f897 2086 	ldrb.w	r2, [r7, #134]	@ 0x86
 800fa7e:	429a      	cmp	r2, r3
 800fa80:	d3e8      	bcc.n	800fa54 <ProcessMacCommands+0x210>
                        }
                        // Update MAC index
                        macIndex += linkAdrNbBytesParsed - 1;
 800fa82:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 800fa86:	78fb      	ldrb	r3, [r7, #3]
 800fa88:	4413      	add	r3, r2
 800fa8a:	b2db      	uxtb	r3, r3
 800fa8c:	3b01      	subs	r3, #1
 800fa8e:	70fb      	strb	r3, [r7, #3]

                        // Check to prevent invalid access
                        if( macIndex >= commandsSize )
 800fa90:	78fa      	ldrb	r2, [r7, #3]
 800fa92:	78bb      	ldrb	r3, [r7, #2]
 800fa94:	429a      	cmp	r2, r3
 800fa96:	d20a      	bcs.n	800faae <ProcessMacCommands+0x26a>
                            break;

                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 800fa98:	78fb      	ldrb	r3, [r7, #3]
 800fa9a:	1c5a      	adds	r2, r3, #1
 800fa9c:	70fa      	strb	r2, [r7, #3]
 800fa9e:	461a      	mov	r2, r3
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	4413      	add	r3, r2
 800faa4:	781b      	ldrb	r3, [r3, #0]
 800faa6:	2b03      	cmp	r3, #3
 800faa8:	f43f af68 	beq.w	800f97c <ProcessMacCommands+0x138>
 800faac:	e000      	b.n	800fab0 <ProcessMacCommands+0x26c>
                            break;
 800faae:	bf00      	nop

                    if( macIndex < commandsSize )
 800fab0:	78fa      	ldrb	r2, [r7, #3]
 800fab2:	78bb      	ldrb	r3, [r7, #2]
 800fab4:	429a      	cmp	r2, r3
 800fab6:	f080 838e 	bcs.w	80101d6 <ProcessMacCommands+0x992>
                    {
                        // Decrease the index such that it points to the next MAC command
                        macIndex--;
 800faba:	78fb      	ldrb	r3, [r7, #3]
 800fabc:	3b01      	subs	r3, #1
 800fabe:	70fb      	strb	r3, [r7, #3]
                {
                    // Increase the index by the MAC command size (without command)
                    macIndex += 4;
                }
#endif /* LORAMAC_VERSION */
                break;
 800fac0:	e389      	b.n	80101d6 <ProcessMacCommands+0x992>
                    macIndex += 4;
 800fac2:	78fb      	ldrb	r3, [r7, #3]
 800fac4:	3304      	adds	r3, #4
 800fac6:	70fb      	strb	r3, [r7, #3]
                break;
 800fac8:	e385      	b.n	80101d6 <ProcessMacCommands+0x992>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 800faca:	78fb      	ldrb	r3, [r7, #3]
 800facc:	1c5a      	adds	r2, r3, #1
 800face:	70fa      	strb	r2, [r7, #3]
 800fad0:	461a      	mov	r2, r3
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	4413      	add	r3, r2
 800fad6:	781b      	ldrb	r3, [r3, #0]
 800fad8:	f003 030f 	and.w	r3, r3, #15
 800fadc:	b2da      	uxtb	r2, r3
 800fade:	4b46      	ldr	r3, [pc, #280]	@ (800fbf8 <ProcessMacCommands+0x3b4>)
 800fae0:	f883 2107 	strb.w	r2, [r3, #263]	@ 0x107
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 800fae4:	4b44      	ldr	r3, [pc, #272]	@ (800fbf8 <ProcessMacCommands+0x3b4>)
 800fae6:	f893 3107 	ldrb.w	r3, [r3, #263]	@ 0x107
 800faea:	461a      	mov	r2, r3
 800faec:	2301      	movs	r3, #1
 800faee:	4093      	lsls	r3, r2
 800faf0:	b29a      	uxth	r2, r3
 800faf2:	4b41      	ldr	r3, [pc, #260]	@ (800fbf8 <ProcessMacCommands+0x3b4>)
 800faf4:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 800faf8:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800fafc:	2200      	movs	r2, #0
 800fafe:	4619      	mov	r1, r3
 800fb00:	2004      	movs	r0, #4
 800fb02:	f003 fab9 	bl	8013078 <LoRaMacCommandsAddCmd>
                break;
 800fb06:	e371      	b.n	80101ec <ProcessMacCommands+0x9a8>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 800fb08:	2307      	movs	r3, #7
 800fb0a:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 800fb0e:	78fb      	ldrb	r3, [r7, #3]
 800fb10:	687a      	ldr	r2, [r7, #4]
 800fb12:	4413      	add	r3, r2
 800fb14:	781b      	ldrb	r3, [r3, #0]
 800fb16:	091b      	lsrs	r3, r3, #4
 800fb18:	b2db      	uxtb	r3, r3
 800fb1a:	b25b      	sxtb	r3, r3
 800fb1c:	f003 0307 	and.w	r3, r3, #7
 800fb20:	b25b      	sxtb	r3, r3
 800fb22:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 800fb26:	78fb      	ldrb	r3, [r7, #3]
 800fb28:	687a      	ldr	r2, [r7, #4]
 800fb2a:	4413      	add	r3, r2
 800fb2c:	781b      	ldrb	r3, [r3, #0]
 800fb2e:	b25b      	sxtb	r3, r3
 800fb30:	f003 030f 	and.w	r3, r3, #15
 800fb34:	b25b      	sxtb	r3, r3
 800fb36:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
                macIndex++;
 800fb3a:	78fb      	ldrb	r3, [r7, #3]
 800fb3c:	3301      	adds	r3, #1
 800fb3e:	70fb      	strb	r3, [r7, #3]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800fb40:	78fb      	ldrb	r3, [r7, #3]
 800fb42:	1c5a      	adds	r2, r3, #1
 800fb44:	70fa      	strb	r2, [r7, #3]
 800fb46:	461a      	mov	r2, r3
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	4413      	add	r3, r2
 800fb4c:	781b      	ldrb	r3, [r3, #0]
 800fb4e:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800fb50:	78fb      	ldrb	r3, [r7, #3]
 800fb52:	1c5a      	adds	r2, r3, #1
 800fb54:	70fa      	strb	r2, [r7, #3]
 800fb56:	461a      	mov	r2, r3
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	4413      	add	r3, r2
 800fb5c:	781b      	ldrb	r3, [r3, #0]
 800fb5e:	021a      	lsls	r2, r3, #8
 800fb60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fb62:	4313      	orrs	r3, r2
 800fb64:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800fb66:	78fb      	ldrb	r3, [r7, #3]
 800fb68:	1c5a      	adds	r2, r3, #1
 800fb6a:	70fa      	strb	r2, [r7, #3]
 800fb6c:	461a      	mov	r2, r3
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	4413      	add	r3, r2
 800fb72:	781b      	ldrb	r3, [r3, #0]
 800fb74:	041a      	lsls	r2, r3, #16
 800fb76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fb78:	4313      	orrs	r3, r2
 800fb7a:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency *= 100;
 800fb7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fb7e:	2264      	movs	r2, #100	@ 0x64
 800fb80:	fb02 f303 	mul.w	r3, r2, r3
 800fb84:	653b      	str	r3, [r7, #80]	@ 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 800fb86:	4b1c      	ldr	r3, [pc, #112]	@ (800fbf8 <ProcessMacCommands+0x3b4>)
 800fb88:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800fb8c:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 800fb90:	4611      	mov	r1, r2
 800fb92:	4618      	mov	r0, r3
 800fb94:	f005 f8b5 	bl	8014d02 <RegionRxParamSetupReq>
 800fb98:	4603      	mov	r3, r0
 800fb9a:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( status & 0x07 ) == 0x07 )
 800fb9e:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800fba2:	f003 0307 	and.w	r3, r3, #7
 800fba6:	2b07      	cmp	r3, #7
 800fba8:	d117      	bne.n	800fbda <ProcessMacCommands+0x396>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 800fbaa:	f997 304c 	ldrsb.w	r3, [r7, #76]	@ 0x4c
 800fbae:	b2da      	uxtb	r2, r3
 800fbb0:	4b11      	ldr	r3, [pc, #68]	@ (800fbf8 <ProcessMacCommands+0x3b4>)
 800fbb2:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 800fbb6:	f997 304c 	ldrsb.w	r3, [r7, #76]	@ 0x4c
 800fbba:	b2da      	uxtb	r2, r3
 800fbbc:	4b0e      	ldr	r3, [pc, #56]	@ (800fbf8 <ProcessMacCommands+0x3b4>)
 800fbbe:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 800fbc2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fbc4:	4a0c      	ldr	r2, [pc, #48]	@ (800fbf8 <ProcessMacCommands+0x3b4>)
 800fbc6:	6653      	str	r3, [r2, #100]	@ 0x64
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 800fbc8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fbca:	4a0b      	ldr	r2, [pc, #44]	@ (800fbf8 <ProcessMacCommands+0x3b4>)
 800fbcc:	66d3      	str	r3, [r2, #108]	@ 0x6c
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 800fbce:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 800fbd2:	b2da      	uxtb	r2, r3
 800fbd4:	4b08      	ldr	r3, [pc, #32]	@ (800fbf8 <ProcessMacCommands+0x3b4>)
 800fbd6:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
                }
                macCmdPayload[0] = status;
 800fbda:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800fbde:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 800fbe2:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800fbe6:	2201      	movs	r2, #1
 800fbe8:	4619      	mov	r1, r3
 800fbea:	2005      	movs	r0, #5
 800fbec:	f003 fa44 	bl	8013078 <LoRaMacCommandsAddCmd>
                /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                // Setup indication to inform the application
                /* SetMlmeScheduleUplinkIndication( ); */
                /*ST_WORKAROUND_END */
                break;
 800fbf0:	e2fc      	b.n	80101ec <ProcessMacCommands+0x9a8>
 800fbf2:	bf00      	nop
 800fbf4:	200008d8 	.word	0x200008d8
 800fbf8:	20000df8 	.word	0x20000df8
 800fbfc:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 800fc00:	23ff      	movs	r3, #255	@ 0xff
 800fc02:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 800fc06:	4bb7      	ldr	r3, [pc, #732]	@ (800fee4 <ProcessMacCommands+0x6a0>)
 800fc08:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d00d      	beq.n	800fc2c <ProcessMacCommands+0x3e8>
 800fc10:	4bb4      	ldr	r3, [pc, #720]	@ (800fee4 <ProcessMacCommands+0x6a0>)
 800fc12:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d007      	beq.n	800fc2c <ProcessMacCommands+0x3e8>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 800fc1c:	4bb1      	ldr	r3, [pc, #708]	@ (800fee4 <ProcessMacCommands+0x6a0>)
 800fc1e:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	4798      	blx	r3
 800fc26:	4603      	mov	r3, r0
 800fc28:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
                }
                macCmdPayload[0] = batteryLevel;
 800fc2c:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 800fc30:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 800fc34:	787b      	ldrb	r3, [r7, #1]
 800fc36:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800fc3a:	b2db      	uxtb	r3, r3
 800fc3c:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 800fc40:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800fc44:	2202      	movs	r2, #2
 800fc46:	4619      	mov	r1, r3
 800fc48:	2006      	movs	r0, #6
 800fc4a:	f003 fa15 	bl	8013078 <LoRaMacCommandsAddCmd>
                break;
 800fc4e:	e2cd      	b.n	80101ec <ProcessMacCommands+0x9a8>
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 800fc50:	2303      	movs	r3, #3
 800fc52:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 800fc56:	78fb      	ldrb	r3, [r7, #3]
 800fc58:	1c5a      	adds	r2, r3, #1
 800fc5a:	70fa      	strb	r2, [r7, #3]
 800fc5c:	461a      	mov	r2, r3
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	4413      	add	r3, r2
 800fc62:	781b      	ldrb	r3, [r3, #0]
 800fc64:	b25b      	sxtb	r3, r3
 800fc66:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
                newChannelReq.NewChannel = &chParam;
 800fc6a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800fc6e:	647b      	str	r3, [r7, #68]	@ 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 800fc70:	78fb      	ldrb	r3, [r7, #3]
 800fc72:	1c5a      	adds	r2, r3, #1
 800fc74:	70fa      	strb	r2, [r7, #3]
 800fc76:	461a      	mov	r2, r3
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	4413      	add	r3, r2
 800fc7c:	781b      	ldrb	r3, [r3, #0]
 800fc7e:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800fc80:	78fb      	ldrb	r3, [r7, #3]
 800fc82:	1c5a      	adds	r2, r3, #1
 800fc84:	70fa      	strb	r2, [r7, #3]
 800fc86:	461a      	mov	r2, r3
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	4413      	add	r3, r2
 800fc8c:	781b      	ldrb	r3, [r3, #0]
 800fc8e:	021a      	lsls	r2, r3, #8
 800fc90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc92:	4313      	orrs	r3, r2
 800fc94:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800fc96:	78fb      	ldrb	r3, [r7, #3]
 800fc98:	1c5a      	adds	r2, r3, #1
 800fc9a:	70fa      	strb	r2, [r7, #3]
 800fc9c:	461a      	mov	r2, r3
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	4413      	add	r3, r2
 800fca2:	781b      	ldrb	r3, [r3, #0]
 800fca4:	041a      	lsls	r2, r3, #16
 800fca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fca8:	4313      	orrs	r3, r2
 800fcaa:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency *= 100;
 800fcac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fcae:	2264      	movs	r2, #100	@ 0x64
 800fcb0:	fb02 f303 	mul.w	r3, r2, r3
 800fcb4:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Rx1Frequency = 0;
 800fcb6:	2300      	movs	r3, #0
 800fcb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 800fcba:	78fb      	ldrb	r3, [r7, #3]
 800fcbc:	1c5a      	adds	r2, r3, #1
 800fcbe:	70fa      	strb	r2, [r7, #3]
 800fcc0:	461a      	mov	r2, r3
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	4413      	add	r3, r2
 800fcc6:	781b      	ldrb	r3, [r3, #0]
 800fcc8:	b25b      	sxtb	r3, r3
 800fcca:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 800fcce:	4b86      	ldr	r3, [pc, #536]	@ (800fee8 <ProcessMacCommands+0x6a4>)
 800fcd0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800fcd4:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800fcd8:	4611      	mov	r1, r2
 800fcda:	4618      	mov	r0, r3
 800fcdc:	f005 f824 	bl	8014d28 <RegionNewChannelReq>
 800fce0:	4603      	mov	r3, r0
 800fce2:	b2db      	uxtb	r3, r3
 800fce4:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( int8_t )status >= 0 )
 800fce8:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800fcec:	b25b      	sxtb	r3, r3
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	f2c0 8273 	blt.w	80101da <ProcessMacCommands+0x996>
                {
                    macCmdPayload[0] = status;
 800fcf4:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800fcf8:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 800fcfc:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800fd00:	2201      	movs	r2, #1
 800fd02:	4619      	mov	r1, r3
 800fd04:	2007      	movs	r0, #7
 800fd06:	f003 f9b7 	bl	8013078 <LoRaMacCommandsAddCmd>
                }
                break;
 800fd0a:	e266      	b.n	80101da <ProcessMacCommands+0x996>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 800fd0c:	78fb      	ldrb	r3, [r7, #3]
 800fd0e:	1c5a      	adds	r2, r3, #1
 800fd10:	70fa      	strb	r2, [r7, #3]
 800fd12:	461a      	mov	r2, r3
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	4413      	add	r3, r2
 800fd18:	781b      	ldrb	r3, [r3, #0]
 800fd1a:	f003 030f 	and.w	r3, r3, #15
 800fd1e:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84

                if( delay == 0 )
 800fd22:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d104      	bne.n	800fd34 <ProcessMacCommands+0x4f0>
                {
                    delay++;
 800fd2a:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800fd2e:	3301      	adds	r3, #1
 800fd30:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 800fd34:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800fd38:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800fd3c:	fb02 f303 	mul.w	r3, r2, r3
 800fd40:	461a      	mov	r2, r3
 800fd42:	4b69      	ldr	r3, [pc, #420]	@ (800fee8 <ProcessMacCommands+0x6a4>)
 800fd44:	651a      	str	r2, [r3, #80]	@ 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800fd46:	4b68      	ldr	r3, [pc, #416]	@ (800fee8 <ProcessMacCommands+0x6a4>)
 800fd48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fd4a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800fd4e:	4a66      	ldr	r2, [pc, #408]	@ (800fee8 <ProcessMacCommands+0x6a4>)
 800fd50:	6553      	str	r3, [r2, #84]	@ 0x54
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 800fd52:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800fd56:	2200      	movs	r2, #0
 800fd58:	4619      	mov	r1, r3
 800fd5a:	2008      	movs	r0, #8
 800fd5c:	f003 f98c 	bl	8013078 <LoRaMacCommandsAddCmd>
                /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                // Setup indication to inform the application
                /* SetMlmeScheduleUplinkIndication( ); */
                /*ST_WORKAROUND_END */
                break;
 800fd60:	e244      	b.n	80101ec <ProcessMacCommands+0x9a8>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 800fd62:	78fb      	ldrb	r3, [r7, #3]
 800fd64:	1c5a      	adds	r2, r3, #1
 800fd66:	70fa      	strb	r2, [r7, #3]
 800fd68:	461a      	mov	r2, r3
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	4413      	add	r3, r2
 800fd6e:	781b      	ldrb	r3, [r3, #0]
 800fd70:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 800fd74:	2300      	movs	r3, #0
 800fd76:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 800fd7a:	2300      	movs	r3, #0
 800fd7c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 800fd80:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800fd84:	f003 0320 	and.w	r3, r3, #32
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d002      	beq.n	800fd92 <ProcessMacCommands+0x54e>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 800fd8c:	2301      	movs	r3, #1
 800fd8e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 800fd92:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800fd96:	f003 0310 	and.w	r3, r3, #16
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d002      	beq.n	800fda4 <ProcessMacCommands+0x560>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 800fd9e:	2301      	movs	r3, #1
 800fda0:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 800fda4:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800fda8:	f003 030f 	and.w	r3, r3, #15
 800fdac:	b2db      	uxtb	r3, r3
 800fdae:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 800fdb2:	4b4d      	ldr	r3, [pc, #308]	@ (800fee8 <ProcessMacCommands+0x6a4>)
 800fdb4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800fdb8:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800fdbc:	4611      	mov	r1, r2
 800fdbe:	4618      	mov	r0, r3
 800fdc0:	f004 ffc5 	bl	8014d4e <RegionTxParamSetupReq>
 800fdc4:	4603      	mov	r3, r0
 800fdc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fdca:	f000 8208 	beq.w	80101de <ProcessMacCommands+0x99a>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 800fdce:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 800fdd2:	4b45      	ldr	r3, [pc, #276]	@ (800fee8 <ProcessMacCommands+0x6a4>)
 800fdd4:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 800fdd8:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 800fddc:	4b42      	ldr	r3, [pc, #264]	@ (800fee8 <ProcessMacCommands+0x6a4>)
 800fdde:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 800fde2:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800fde6:	461a      	mov	r2, r3
 800fde8:	4b40      	ldr	r3, [pc, #256]	@ (800feec <ProcessMacCommands+0x6a8>)
 800fdea:	5c9b      	ldrb	r3, [r3, r2]
 800fdec:	4618      	mov	r0, r3
 800fdee:	f7f0 ff69 	bl	8000cc4 <__aeabi_ui2f>
 800fdf2:	4603      	mov	r3, r0
 800fdf4:	4a3c      	ldr	r2, [pc, #240]	@ (800fee8 <ProcessMacCommands+0x6a4>)
 800fdf6:	6793      	str	r3, [r2, #120]	@ 0x78
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 800fdf8:	2302      	movs	r3, #2
 800fdfa:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800fdfe:	4b3a      	ldr	r3, [pc, #232]	@ (800fee8 <ProcessMacCommands+0x6a4>)
 800fe00:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800fe04:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800fe08:	4b37      	ldr	r3, [pc, #220]	@ (800fee8 <ProcessMacCommands+0x6a4>)
 800fe0a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800fe0e:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800fe12:	4611      	mov	r1, r2
 800fe14:	4618      	mov	r0, r3
 800fe16:	f004 fe9d 	bl	8014b54 <RegionGetPhyParam>
 800fe1a:	4603      	mov	r3, r0
 800fe1c:	62bb      	str	r3, [r7, #40]	@ 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 800fe1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe20:	b25a      	sxtb	r2, r3
 800fe22:	4b31      	ldr	r3, [pc, #196]	@ (800fee8 <ProcessMacCommands+0x6a4>)
 800fe24:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800fe28:	4293      	cmp	r3, r2
 800fe2a:	bfb8      	it	lt
 800fe2c:	4613      	movlt	r3, r2
 800fe2e:	b25a      	sxtb	r2, r3
 800fe30:	4b2d      	ldr	r3, [pc, #180]	@ (800fee8 <ProcessMacCommands+0x6a4>)
 800fe32:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 800fe36:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800fe3a:	2200      	movs	r2, #0
 800fe3c:	4619      	mov	r1, r3
 800fe3e:	2009      	movs	r0, #9
 800fe40:	f003 f91a 	bl	8013078 <LoRaMacCommandsAddCmd>
                }
                break;
 800fe44:	e1cb      	b.n	80101de <ProcessMacCommands+0x99a>
            }
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 800fe46:	2303      	movs	r3, #3
 800fe48:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 800fe4c:	78fb      	ldrb	r3, [r7, #3]
 800fe4e:	1c5a      	adds	r2, r3, #1
 800fe50:	70fa      	strb	r2, [r7, #3]
 800fe52:	461a      	mov	r2, r3
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	4413      	add	r3, r2
 800fe58:	781b      	ldrb	r3, [r3, #0]
 800fe5a:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 800fe5e:	78fb      	ldrb	r3, [r7, #3]
 800fe60:	1c5a      	adds	r2, r3, #1
 800fe62:	70fa      	strb	r2, [r7, #3]
 800fe64:	461a      	mov	r2, r3
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	4413      	add	r3, r2
 800fe6a:	781b      	ldrb	r3, [r3, #0]
 800fe6c:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800fe6e:	78fb      	ldrb	r3, [r7, #3]
 800fe70:	1c5a      	adds	r2, r3, #1
 800fe72:	70fa      	strb	r2, [r7, #3]
 800fe74:	461a      	mov	r2, r3
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	4413      	add	r3, r2
 800fe7a:	781b      	ldrb	r3, [r3, #0]
 800fe7c:	021a      	lsls	r2, r3, #8
 800fe7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe80:	4313      	orrs	r3, r2
 800fe82:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800fe84:	78fb      	ldrb	r3, [r7, #3]
 800fe86:	1c5a      	adds	r2, r3, #1
 800fe88:	70fa      	strb	r2, [r7, #3]
 800fe8a:	461a      	mov	r2, r3
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	4413      	add	r3, r2
 800fe90:	781b      	ldrb	r3, [r3, #0]
 800fe92:	041a      	lsls	r2, r3, #16
 800fe94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe96:	4313      	orrs	r3, r2
 800fe98:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency *= 100;
 800fe9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe9c:	2264      	movs	r2, #100	@ 0x64
 800fe9e:	fb02 f303 	mul.w	r3, r2, r3
 800fea2:	627b      	str	r3, [r7, #36]	@ 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 800fea4:	4b10      	ldr	r3, [pc, #64]	@ (800fee8 <ProcessMacCommands+0x6a4>)
 800fea6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800feaa:	f107 0220 	add.w	r2, r7, #32
 800feae:	4611      	mov	r1, r2
 800feb0:	4618      	mov	r0, r3
 800feb2:	f004 ff5f 	bl	8014d74 <RegionDlChannelReq>
 800feb6:	4603      	mov	r3, r0
 800feb8:	b2db      	uxtb	r3, r3
 800feba:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( int8_t )status >= 0 )
 800febe:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800fec2:	b25b      	sxtb	r3, r3
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	f2c0 818c 	blt.w	80101e2 <ProcessMacCommands+0x99e>
                {
                    macCmdPayload[0] = status;
 800feca:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800fece:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 800fed2:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800fed6:	2201      	movs	r2, #1
 800fed8:	4619      	mov	r1, r3
 800feda:	200a      	movs	r0, #10
 800fedc:	f003 f8cc 	bl	8013078 <LoRaMacCommandsAddCmd>
                    /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                    // Setup indication to inform the application
                    /* SetMlmeScheduleUplinkIndication( ); */
                    /*ST_WORKAROUND_END */
                }
                break;
 800fee0:	e17f      	b.n	80101e2 <ProcessMacCommands+0x99e>
 800fee2:	bf00      	nop
 800fee4:	200008d8 	.word	0x200008d8
 800fee8:	20000df8 	.word	0x20000df8
 800feec:	0801f4ac 	.word	0x0801f4ac
            }
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                // The mote time can be updated only when the time is received in classA
                // receive windows only.
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 800fef0:	2009      	movs	r0, #9
 800fef2:	f003 fbe9 	bl	80136c8 <LoRaMacConfirmQueueIsCmdActive>
 800fef6:	4603      	mov	r3, r0
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	f000 8084 	beq.w	8010006 <ProcessMacCommands+0x7c2>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 800fefe:	2109      	movs	r1, #9
 800ff00:	2000      	movs	r0, #0
 800ff02:	f003 fb55 	bl	80135b0 <LoRaMacConfirmQueueSetStatus>

                    SysTime_t gpsEpochTime = { 0 };
 800ff06:	f107 0318 	add.w	r3, r7, #24
 800ff0a:	2200      	movs	r2, #0
 800ff0c:	601a      	str	r2, [r3, #0]
 800ff0e:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 800ff10:	f107 0310 	add.w	r3, r7, #16
 800ff14:	2200      	movs	r2, #0
 800ff16:	601a      	str	r2, [r3, #0]
 800ff18:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 800ff1a:	f107 0308 	add.w	r3, r7, #8
 800ff1e:	2200      	movs	r2, #0
 800ff20:	601a      	str	r2, [r3, #0]
 800ff22:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 800ff24:	78fb      	ldrb	r3, [r7, #3]
 800ff26:	1c5a      	adds	r2, r3, #1
 800ff28:	70fa      	strb	r2, [r7, #3]
 800ff2a:	461a      	mov	r2, r3
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	4413      	add	r3, r2
 800ff30:	781b      	ldrb	r3, [r3, #0]
 800ff32:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 800ff34:	78fb      	ldrb	r3, [r7, #3]
 800ff36:	1c5a      	adds	r2, r3, #1
 800ff38:	70fa      	strb	r2, [r7, #3]
 800ff3a:	461a      	mov	r2, r3
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	4413      	add	r3, r2
 800ff40:	781b      	ldrb	r3, [r3, #0]
 800ff42:	021a      	lsls	r2, r3, #8
 800ff44:	69bb      	ldr	r3, [r7, #24]
 800ff46:	4313      	orrs	r3, r2
 800ff48:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 800ff4a:	78fb      	ldrb	r3, [r7, #3]
 800ff4c:	1c5a      	adds	r2, r3, #1
 800ff4e:	70fa      	strb	r2, [r7, #3]
 800ff50:	461a      	mov	r2, r3
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	4413      	add	r3, r2
 800ff56:	781b      	ldrb	r3, [r3, #0]
 800ff58:	041a      	lsls	r2, r3, #16
 800ff5a:	69bb      	ldr	r3, [r7, #24]
 800ff5c:	4313      	orrs	r3, r2
 800ff5e:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800ff60:	78fb      	ldrb	r3, [r7, #3]
 800ff62:	1c5a      	adds	r2, r3, #1
 800ff64:	70fa      	strb	r2, [r7, #3]
 800ff66:	461a      	mov	r2, r3
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	4413      	add	r3, r2
 800ff6c:	781b      	ldrb	r3, [r3, #0]
 800ff6e:	061a      	lsls	r2, r3, #24
 800ff70:	69bb      	ldr	r3, [r7, #24]
 800ff72:	4313      	orrs	r3, r2
 800ff74:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 800ff76:	78fb      	ldrb	r3, [r7, #3]
 800ff78:	1c5a      	adds	r2, r3, #1
 800ff7a:	70fa      	strb	r2, [r7, #3]
 800ff7c:	461a      	mov	r2, r3
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	4413      	add	r3, r2
 800ff82:	781b      	ldrb	r3, [r3, #0]
 800ff84:	b21b      	sxth	r3, r3
 800ff86:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 800ff88:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800ff8c:	461a      	mov	r2, r3
 800ff8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800ff92:	fb02 f303 	mul.w	r3, r2, r3
 800ff96:	121b      	asrs	r3, r3, #8
 800ff98:	b21b      	sxth	r3, r3
 800ff9a:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 800ff9c:	f107 0310 	add.w	r3, r7, #16
 800ffa0:	f107 0218 	add.w	r2, r7, #24
 800ffa4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ffa8:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epoch offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800ffac:	693a      	ldr	r2, [r7, #16]
 800ffae:	4b96      	ldr	r3, [pc, #600]	@ (8010208 <ProcessMacCommands+0x9c4>)
 800ffb0:	4413      	add	r3, r2
 800ffb2:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 800ffb4:	f107 0308 	add.w	r3, r7, #8
 800ffb8:	4618      	mov	r0, r3
 800ffba:	f00a fc53 	bl	801a864 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 800ffbe:	f107 006c 	add.w	r0, r7, #108	@ 0x6c
 800ffc2:	4b92      	ldr	r3, [pc, #584]	@ (801020c <ProcessMacCommands+0x9c8>)
 800ffc4:	f8d3 233c 	ldr.w	r2, [r3, #828]	@ 0x33c
 800ffc8:	9200      	str	r2, [sp, #0]
 800ffca:	f8d3 3338 	ldr.w	r3, [r3, #824]	@ 0x338
 800ffce:	f107 0210 	add.w	r2, r7, #16
 800ffd2:	ca06      	ldmia	r2, {r1, r2}
 800ffd4:	f00a fbdf 	bl	801a796 <SysTimeSub>
 800ffd8:	f107 0010 	add.w	r0, r7, #16
 800ffdc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ffde:	9300      	str	r3, [sp, #0]
 800ffe0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ffe2:	f107 0208 	add.w	r2, r7, #8
 800ffe6:	ca06      	ldmia	r2, {r1, r2}
 800ffe8:	f00a fb9c 	bl	801a724 <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 800ffec:	f107 0310 	add.w	r3, r7, #16
 800fff0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800fff4:	f00a fc08 	bl	801a808 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 800fff8:	f002 fee8 	bl	8012dcc <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 800fffc:	4b83      	ldr	r3, [pc, #524]	@ (801020c <ProcessMacCommands+0x9c8>)
 800fffe:	2201      	movs	r2, #1
 8010000:	f883 243c 	strb.w	r2, [r3, #1084]	@ 0x43c
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                    // In case of other receive windows the Device Time Answer is not received.
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
#endif /* LORAMAC_VERSION */
                }
                break;
 8010004:	e0f2      	b.n	80101ec <ProcessMacCommands+0x9a8>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 8010006:	4b81      	ldr	r3, [pc, #516]	@ (801020c <ProcessMacCommands+0x9c8>)
 8010008:	2200      	movs	r2, #0
 801000a:	f883 243c 	strb.w	r2, [r3, #1084]	@ 0x43c
                break;
 801000e:	e0ed      	b.n	80101ec <ProcessMacCommands+0x9a8>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 8010010:	200c      	movs	r0, #12
 8010012:	f003 fb59 	bl	80136c8 <LoRaMacConfirmQueueIsCmdActive>
 8010016:	4603      	mov	r3, r0
 8010018:	2b00      	cmp	r3, #0
 801001a:	f000 80e4 	beq.w	80101e6 <ProcessMacCommands+0x9a2>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 801001e:	210c      	movs	r1, #12
 8010020:	2000      	movs	r0, #0
 8010022:	f003 fac5 	bl	80135b0 <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 8010026:	4b79      	ldr	r3, [pc, #484]	@ (801020c <ProcessMacCommands+0x9c8>)
 8010028:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 801002c:	2b04      	cmp	r3, #4
 801002e:	f000 80da 	beq.w	80101e6 <ProcessMacCommands+0x9a2>
 8010032:	4b76      	ldr	r3, [pc, #472]	@ (801020c <ProcessMacCommands+0x9c8>)
 8010034:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8010038:	2b05      	cmp	r3, #5
 801003a:	f000 80d4 	beq.w	80101e6 <ProcessMacCommands+0x9a2>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 801003e:	f002 fea6 	bl	8012d8e <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 8010042:	e0d0      	b.n	80101e6 <ProcessMacCommands+0x9a2>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 8010044:	2303      	movs	r3, #3
 8010046:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
                uint32_t frequency = 0;
 801004a:	2300      	movs	r3, #0
 801004c:	67bb      	str	r3, [r7, #120]	@ 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 801004e:	78fb      	ldrb	r3, [r7, #3]
 8010050:	1c5a      	adds	r2, r3, #1
 8010052:	70fa      	strb	r2, [r7, #3]
 8010054:	461a      	mov	r2, r3
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	4413      	add	r3, r2
 801005a:	781b      	ldrb	r3, [r3, #0]
 801005c:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 801005e:	78fb      	ldrb	r3, [r7, #3]
 8010060:	1c5a      	adds	r2, r3, #1
 8010062:	70fa      	strb	r2, [r7, #3]
 8010064:	461a      	mov	r2, r3
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	4413      	add	r3, r2
 801006a:	781b      	ldrb	r3, [r3, #0]
 801006c:	021b      	lsls	r3, r3, #8
 801006e:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8010070:	4313      	orrs	r3, r2
 8010072:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8010074:	78fb      	ldrb	r3, [r7, #3]
 8010076:	1c5a      	adds	r2, r3, #1
 8010078:	70fa      	strb	r2, [r7, #3]
 801007a:	461a      	mov	r2, r3
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	4413      	add	r3, r2
 8010080:	781b      	ldrb	r3, [r3, #0]
 8010082:	041b      	lsls	r3, r3, #16
 8010084:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8010086:	4313      	orrs	r3, r2
 8010088:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency *= 100;
 801008a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801008c:	2264      	movs	r2, #100	@ 0x64
 801008e:	fb02 f303 	mul.w	r3, r2, r3
 8010092:	67bb      	str	r3, [r7, #120]	@ 0x78
                datarate = payload[macIndex++] & 0x0F;
 8010094:	78fb      	ldrb	r3, [r7, #3]
 8010096:	1c5a      	adds	r2, r3, #1
 8010098:	70fa      	strb	r2, [r7, #3]
 801009a:	461a      	mov	r2, r3
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	4413      	add	r3, r2
 80100a0:	781b      	ldrb	r3, [r3, #0]
 80100a2:	f003 030f 	and.w	r3, r3, #15
 80100a6:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 80100aa:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80100ae:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80100b0:	4618      	mov	r0, r3
 80100b2:	f002 fe72 	bl	8012d9a <LoRaMacClassBPingSlotChannelReq>
 80100b6:	4603      	mov	r3, r0
 80100b8:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
                macCmdPayload[0] = status;
 80100bc:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 80100c0:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
 80100c4:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80100c8:	2201      	movs	r2, #1
 80100ca:	4619      	mov	r1, r3
 80100cc:	2011      	movs	r0, #17
 80100ce:	f002 ffd3 	bl	8013078 <LoRaMacCommandsAddCmd>
                /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                // Setup indication to inform the application
                /* SetMlmeScheduleUplinkIndication( ); */
                /*ST_WORKAROUND_END */
#endif /* LORAMAC_VERSION */
                break;
 80100d2:	e08b      	b.n	80101ec <ProcessMacCommands+0x9a8>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 80100d4:	200d      	movs	r0, #13
 80100d6:	f003 faf7 	bl	80136c8 <LoRaMacConfirmQueueIsCmdActive>
 80100da:	4603      	mov	r3, r0
 80100dc:	2b00      	cmp	r3, #0
 80100de:	f000 8084 	beq.w	80101ea <ProcessMacCommands+0x9a6>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 80100e2:	210d      	movs	r1, #13
 80100e4:	2000      	movs	r0, #0
 80100e6:	f003 fa63 	bl	80135b0 <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 80100ea:	2300      	movs	r3, #0
 80100ec:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    uint8_t beaconTimingChannel = 0;
 80100f0:	2300      	movs	r3, #0
 80100f2:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 80100f6:	78fb      	ldrb	r3, [r7, #3]
 80100f8:	1c5a      	adds	r2, r3, #1
 80100fa:	70fa      	strb	r2, [r7, #3]
 80100fc:	461a      	mov	r2, r3
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	4413      	add	r3, r2
 8010102:	781b      	ldrb	r3, [r3, #0]
 8010104:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8010108:	78fb      	ldrb	r3, [r7, #3]
 801010a:	1c5a      	adds	r2, r3, #1
 801010c:	70fa      	strb	r2, [r7, #3]
 801010e:	461a      	mov	r2, r3
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	4413      	add	r3, r2
 8010114:	781b      	ldrb	r3, [r3, #0]
 8010116:	021b      	lsls	r3, r3, #8
 8010118:	b21a      	sxth	r2, r3
 801011a:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	@ 0x7e
 801011e:	4313      	orrs	r3, r2
 8010120:	b21b      	sxth	r3, r3
 8010122:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    beaconTimingChannel = payload[macIndex++];
 8010126:	78fb      	ldrb	r3, [r7, #3]
 8010128:	1c5a      	adds	r2, r3, #1
 801012a:	70fa      	strb	r2, [r7, #3]
 801012c:	461a      	mov	r2, r3
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	4413      	add	r3, r2
 8010132:	781b      	ldrb	r3, [r3, #0]
 8010134:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8010138:	4b35      	ldr	r3, [pc, #212]	@ (8010210 <ProcessMacCommands+0x9cc>)
 801013a:	681a      	ldr	r2, [r3, #0]
 801013c:	f897 107d 	ldrb.w	r1, [r7, #125]	@ 0x7d
 8010140:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8010144:	4618      	mov	r0, r3
 8010146:	f002 fe34 	bl	8012db2 <LoRaMacClassBBeaconTimingAns>
                }
                break;
 801014a:	e04e      	b.n	80101ea <ProcessMacCommands+0x9a6>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 801014c:	2300      	movs	r3, #0
 801014e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 8010152:	78fb      	ldrb	r3, [r7, #3]
 8010154:	1c5a      	adds	r2, r3, #1
 8010156:	70fa      	strb	r2, [r7, #3]
 8010158:	461a      	mov	r2, r3
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	4413      	add	r3, r2
 801015e:	781b      	ldrb	r3, [r3, #0]
 8010160:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8010164:	78fb      	ldrb	r3, [r7, #3]
 8010166:	1c5a      	adds	r2, r3, #1
 8010168:	70fa      	strb	r2, [r7, #3]
 801016a:	461a      	mov	r2, r3
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	4413      	add	r3, r2
 8010170:	781b      	ldrb	r3, [r3, #0]
 8010172:	021b      	lsls	r3, r3, #8
 8010174:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8010178:	4313      	orrs	r3, r2
 801017a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 801017e:	78fb      	ldrb	r3, [r7, #3]
 8010180:	1c5a      	adds	r2, r3, #1
 8010182:	70fa      	strb	r2, [r7, #3]
 8010184:	461a      	mov	r2, r3
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	4413      	add	r3, r2
 801018a:	781b      	ldrb	r3, [r3, #0]
 801018c:	041b      	lsls	r3, r3, #16
 801018e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8010192:	4313      	orrs	r3, r2
 8010194:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency *= 100;
 8010198:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801019c:	2264      	movs	r2, #100	@ 0x64
 801019e:	fb02 f303 	mul.w	r3, r2, r3
 80101a2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 80101a6:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 80101aa:	f002 fe15 	bl	8012dd8 <LoRaMacClassBBeaconFreqReq>
 80101ae:	4603      	mov	r3, r0
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d003      	beq.n	80101bc <ProcessMacCommands+0x978>
                    {
                        macCmdPayload[0] = 1;
 80101b4:	2301      	movs	r3, #1
 80101b6:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
 80101ba:	e002      	b.n	80101c2 <ProcessMacCommands+0x97e>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 80101bc:	2300      	movs	r3, #0
 80101be:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 80101c2:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80101c6:	2201      	movs	r2, #1
 80101c8:	4619      	mov	r1, r3
 80101ca:	2013      	movs	r0, #19
 80101cc:	f002 ff54 	bl	8013078 <LoRaMacCommandsAddCmd>
                }
                break;
 80101d0:	e00c      	b.n	80101ec <ProcessMacCommands+0x9a8>
                break;
 80101d2:	bf00      	nop
 80101d4:	e00a      	b.n	80101ec <ProcessMacCommands+0x9a8>
                break;
 80101d6:	bf00      	nop
 80101d8:	e008      	b.n	80101ec <ProcessMacCommands+0x9a8>
                break;
 80101da:	bf00      	nop
 80101dc:	e006      	b.n	80101ec <ProcessMacCommands+0x9a8>
                break;
 80101de:	bf00      	nop
 80101e0:	e004      	b.n	80101ec <ProcessMacCommands+0x9a8>
                break;
 80101e2:	bf00      	nop
 80101e4:	e002      	b.n	80101ec <ProcessMacCommands+0x9a8>
                break;
 80101e6:	bf00      	nop
 80101e8:	e000      	b.n	80101ec <ProcessMacCommands+0x9a8>
                break;
 80101ea:	bf00      	nop
    while( macIndex < commandsSize )
 80101ec:	78fa      	ldrb	r2, [r7, #3]
 80101ee:	78bb      	ldrb	r3, [r7, #2]
 80101f0:	429a      	cmp	r2, r3
 80101f2:	f4ff ab49 	bcc.w	800f888 <ProcessMacCommands+0x44>
 80101f6:	e004      	b.n	8010202 <ProcessMacCommands+0x9be>
        return;
 80101f8:	bf00      	nop
 80101fa:	e002      	b.n	8010202 <ProcessMacCommands+0x9be>
            return;
 80101fc:	bf00      	nop
 80101fe:	e000      	b.n	8010202 <ProcessMacCommands+0x9be>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 8010200:	bf00      	nop
        }
    }
}
 8010202:	378c      	adds	r7, #140	@ 0x8c
 8010204:	46bd      	mov	sp, r7
 8010206:	bd90      	pop	{r4, r7, pc}
 8010208:	12d53d80 	.word	0x12d53d80
 801020c:	200008d8 	.word	0x200008d8
 8010210:	20001988 	.word	0x20001988

08010214 <Send>:

/* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 8010214:	b580      	push	{r7, lr}
 8010216:	b08e      	sub	sp, #56	@ 0x38
 8010218:	af02      	add	r7, sp, #8
 801021a:	60f8      	str	r0, [r7, #12]
 801021c:	607a      	str	r2, [r7, #4]
 801021e:	461a      	mov	r2, r3
 8010220:	460b      	mov	r3, r1
 8010222:	72fb      	strb	r3, [r7, #11]
 8010224:	4613      	mov	r3, r2
 8010226:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010228:	2303      	movs	r3, #3
 801022a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 801022e:	4b66      	ldr	r3, [pc, #408]	@ (80103c8 <Send+0x1b4>)
 8010230:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8010234:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 8010238:	4b63      	ldr	r3, [pc, #396]	@ (80103c8 <Send+0x1b4>)
 801023a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801023e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8010242:	4b61      	ldr	r3, [pc, #388]	@ (80103c8 <Send+0x1b4>)
 8010244:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010246:	62bb      	str	r3, [r7, #40]	@ 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8010248:	4b5f      	ldr	r3, [pc, #380]	@ (80103c8 <Send+0x1b4>)
 801024a:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 801024e:	2b00      	cmp	r3, #0
 8010250:	d101      	bne.n	8010256 <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 8010252:	2307      	movs	r3, #7
 8010254:	e0b4      	b.n	80103c0 <Send+0x1ac>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 8010256:	4b5c      	ldr	r3, [pc, #368]	@ (80103c8 <Send+0x1b4>)
 8010258:	f893 3107 	ldrb.w	r3, [r3, #263]	@ 0x107
 801025c:	2b00      	cmp	r3, #0
 801025e:	d102      	bne.n	8010266 <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 8010260:	4b59      	ldr	r3, [pc, #356]	@ (80103c8 <Send+0x1b4>)
 8010262:	2200      	movs	r2, #0
 8010264:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    fCtrl.Value = 0;
 8010266:	2300      	movs	r3, #0
 8010268:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 801026c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8010270:	f023 030f 	bic.w	r3, r3, #15
 8010274:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 8010278:	4b53      	ldr	r3, [pc, #332]	@ (80103c8 <Send+0x1b4>)
 801027a:	f893 2106 	ldrb.w	r2, [r3, #262]	@ 0x106
 801027e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8010282:	f362 13c7 	bfi	r3, r2, #7, #1
 8010286:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 801028a:	4b4f      	ldr	r3, [pc, #316]	@ (80103c8 <Send+0x1b4>)
 801028c:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8010290:	2b01      	cmp	r3, #1
 8010292:	d106      	bne.n	80102a2 <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 8010294:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8010298:	f043 0310 	orr.w	r3, r3, #16
 801029c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 80102a0:	e005      	b.n	80102ae <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 80102a2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80102a6:	f023 0310 	bic.w	r3, r3, #16
 80102aa:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 80102ae:	4b46      	ldr	r3, [pc, #280]	@ (80103c8 <Send+0x1b4>)
 80102b0:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d005      	beq.n	80102c4 <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 80102b8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80102bc:	f043 0320 	orr.w	r3, r3, #32
 80102c0:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    adrNext.Region = Nvm.MacGroup2.Region;

    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
                                               &Nvm.MacGroup1.ChannelsTxPower, &adrAckCounter );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    adrNext.UpdateChanMask = true;
 80102c4:	2301      	movs	r3, #1
 80102c6:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 80102c8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80102cc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80102d0:	b2db      	uxtb	r3, r3
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	bf14      	ite	ne
 80102d6:	2301      	movne	r3, #1
 80102d8:	2300      	moveq	r3, #0
 80102da:	b2db      	uxtb	r3, r3
 80102dc:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80102de:	4b3a      	ldr	r3, [pc, #232]	@ (80103c8 <Send+0x1b4>)
 80102e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80102e2:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 80102e4:	4b39      	ldr	r3, [pc, #228]	@ (80103cc <Send+0x1b8>)
 80102e6:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 80102ea:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 80102ec:	4b37      	ldr	r3, [pc, #220]	@ (80103cc <Send+0x1b8>)
 80102ee:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	@ 0x402
 80102f2:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80102f4:	4b34      	ldr	r3, [pc, #208]	@ (80103c8 <Send+0x1b4>)
 80102f6:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 80102fa:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80102fe:	4b32      	ldr	r3, [pc, #200]	@ (80103c8 <Send+0x1b4>)
 8010300:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 8010304:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    adrNext.NbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8010308:	4b2f      	ldr	r3, [pc, #188]	@ (80103c8 <Send+0x1b4>)
 801030a:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 801030e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8010312:	4b2d      	ldr	r3, [pc, #180]	@ (80103c8 <Send+0x1b4>)
 8010314:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8010318:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 801031c:	4b2a      	ldr	r3, [pc, #168]	@ (80103c8 <Send+0x1b4>)
 801031e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010322:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 8010326:	f107 0014 	add.w	r0, r7, #20
 801032a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801032e:	9300      	str	r3, [sp, #0]
 8010330:	4b27      	ldr	r3, [pc, #156]	@ (80103d0 <Send+0x1bc>)
 8010332:	4a28      	ldr	r2, [pc, #160]	@ (80103d4 <Send+0x1c0>)
 8010334:	4928      	ldr	r1, [pc, #160]	@ (80103d8 <Send+0x1c4>)
 8010336:	f002 fbc9 	bl	8012acc <LoRaMacAdrCalcNext>
 801033a:	4603      	mov	r3, r0
 801033c:	461a      	mov	r2, r3
 801033e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8010342:	f362 1386 	bfi	r3, r2, #6, #1
 8010346:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower,
                                               &Nvm.MacGroup2.MacParams.ChannelsNbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 801034a:	7afa      	ldrb	r2, [r7, #11]
 801034c:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8010350:	893b      	ldrh	r3, [r7, #8]
 8010352:	9300      	str	r3, [sp, #0]
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	68f8      	ldr	r0, [r7, #12]
 8010358:	f000 fc42 	bl	8010be0 <PrepareFrame>
 801035c:	4603      	mov	r3, r0
 801035e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 8010362:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010366:	2b00      	cmp	r3, #0
 8010368:	d003      	beq.n	8010372 <Send+0x15e>
 801036a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801036e:	2b0a      	cmp	r3, #10
 8010370:	d107      	bne.n	8010382 <Send+0x16e>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 8010372:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8010376:	4618      	mov	r0, r3
 8010378:	f000 f96e 	bl	8010658 <ScheduleTx>
 801037c:	4603      	mov	r3, r0
 801037e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 8010382:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010386:	2b00      	cmp	r3, #0
 8010388:	d00a      	beq.n	80103a0 <Send+0x18c>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 801038a:	4a0f      	ldr	r2, [pc, #60]	@ (80103c8 <Send+0x1b4>)
 801038c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8010390:	f882 3039 	strb.w	r3, [r2, #57]	@ 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 8010394:	4a0c      	ldr	r2, [pc, #48]	@ (80103c8 <Send+0x1b4>)
 8010396:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 801039a:	f882 3038 	strb.w	r3, [r2, #56]	@ 0x38
 801039e:	e00d      	b.n	80103bc <Send+0x1a8>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 80103a0:	4b09      	ldr	r3, [pc, #36]	@ (80103c8 <Send+0x1b4>)
 80103a2:	2200      	movs	r2, #0
 80103a4:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 80103a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80103aa:	4a07      	ldr	r2, [pc, #28]	@ (80103c8 <Send+0x1b4>)
 80103ac:	6293      	str	r3, [r2, #40]	@ 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 80103ae:	f002 fedb 	bl	8013168 <LoRaMacCommandsRemoveNoneStickyCmds>
 80103b2:	4603      	mov	r3, r0
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d001      	beq.n	80103bc <Send+0x1a8>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80103b8:	2313      	movs	r3, #19
 80103ba:	e001      	b.n	80103c0 <Send+0x1ac>
        }
    }
    return status;
 80103bc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80103c0:	4618      	mov	r0, r3
 80103c2:	3730      	adds	r7, #48	@ 0x30
 80103c4:	46bd      	mov	sp, r7
 80103c6:	bd80      	pop	{r7, pc}
 80103c8:	20000df8 	.word	0x20000df8
 80103cc:	200008d8 	.word	0x200008d8
 80103d0:	20000e58 	.word	0x20000e58
 80103d4:	20000e30 	.word	0x20000e30
 80103d8:	20000e31 	.word	0x20000e31

080103dc <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 80103dc:	b580      	push	{r7, lr}
 80103de:	b084      	sub	sp, #16
 80103e0:	af00      	add	r7, sp, #0
 80103e2:	4603      	mov	r3, r0
 80103e4:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80103e6:	2300      	movs	r3, #0
 80103e8:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 80103ea:	2300      	movs	r3, #0
 80103ec:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 80103ee:	2301      	movs	r3, #1
 80103f0:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 80103f2:	79fb      	ldrb	r3, [r7, #7]
 80103f4:	2bff      	cmp	r3, #255	@ 0xff
 80103f6:	d129      	bne.n	801044c <SendReJoinReq+0x70>
    {
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 80103f8:	2000      	movs	r0, #0
 80103fa:	f7ff f901 	bl	800f600 <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 80103fe:	4b1a      	ldr	r3, [pc, #104]	@ (8010468 <SendReJoinReq+0x8c>)
 8010400:	2200      	movs	r2, #0
 8010402:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 8010406:	4b18      	ldr	r3, [pc, #96]	@ (8010468 <SendReJoinReq+0x8c>)
 8010408:	4a18      	ldr	r2, [pc, #96]	@ (801046c <SendReJoinReq+0x90>)
 801040a:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 801040e:	4b16      	ldr	r3, [pc, #88]	@ (8010468 <SendReJoinReq+0x8c>)
 8010410:	22ff      	movs	r2, #255	@ 0xff
 8010412:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 8010416:	7b3b      	ldrb	r3, [r7, #12]
 8010418:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 801041c:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 801041e:	7b3a      	ldrb	r2, [r7, #12]
 8010420:	4b11      	ldr	r3, [pc, #68]	@ (8010468 <SendReJoinReq+0x8c>)
 8010422:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d

            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 8010426:	f7fc f869 	bl	800c4fc <SecureElementGetJoinEui>
 801042a:	4603      	mov	r3, r0
 801042c:	2208      	movs	r2, #8
 801042e:	4619      	mov	r1, r3
 8010430:	480f      	ldr	r0, [pc, #60]	@ (8010470 <SendReJoinReq+0x94>)
 8010432:	f006 fe30 	bl	8017096 <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 8010436:	f7fc f83f 	bl	800c4b8 <SecureElementGetDevEui>
 801043a:	4603      	mov	r3, r0
 801043c:	2208      	movs	r2, #8
 801043e:	4619      	mov	r1, r3
 8010440:	480c      	ldr	r0, [pc, #48]	@ (8010474 <SendReJoinReq+0x98>)
 8010442:	f006 fe28 	bl	8017096 <memcpy1>

            allowDelayedTx = false;
 8010446:	2300      	movs	r3, #0
 8010448:	73fb      	strb	r3, [r7, #15]

            break;
 801044a:	e002      	b.n	8010452 <SendReJoinReq+0x76>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 801044c:	2302      	movs	r3, #2
 801044e:	73bb      	strb	r3, [r7, #14]
            break;
 8010450:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 8010452:	7bfb      	ldrb	r3, [r7, #15]
 8010454:	4618      	mov	r0, r3
 8010456:	f000 f8ff 	bl	8010658 <ScheduleTx>
 801045a:	4603      	mov	r3, r0
 801045c:	73bb      	strb	r3, [r7, #14]
    return status;
 801045e:	7bbb      	ldrb	r3, [r7, #14]
}
 8010460:	4618      	mov	r0, r3
 8010462:	3710      	adds	r7, #16
 8010464:	46bd      	mov	sp, r7
 8010466:	bd80      	pop	{r7, pc}
 8010468:	200008d8 	.word	0x200008d8
 801046c:	200008da 	.word	0x200008da
 8010470:	200009e6 	.word	0x200009e6
 8010474:	200009ee 	.word	0x200009ee

08010478 <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 8010478:	b580      	push	{r7, lr}
 801047a:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 801047c:	f002 fc36 	bl	8012cec <LoRaMacClassBIsBeaconExpected>
 8010480:	4603      	mov	r3, r0
 8010482:	2b00      	cmp	r3, #0
 8010484:	d001      	beq.n	801048a <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 8010486:	230e      	movs	r3, #14
 8010488:	e013      	b.n	80104b2 <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 801048a:	4b0b      	ldr	r3, [pc, #44]	@ (80104b8 <CheckForClassBCollision+0x40>)
 801048c:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8010490:	2b01      	cmp	r3, #1
 8010492:	d10d      	bne.n	80104b0 <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8010494:	f002 fc31 	bl	8012cfa <LoRaMacClassBIsPingExpected>
 8010498:	4603      	mov	r3, r0
 801049a:	2b00      	cmp	r3, #0
 801049c:	d001      	beq.n	80104a2 <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 801049e:	230f      	movs	r3, #15
 80104a0:	e007      	b.n	80104b2 <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 80104a2:	f002 fc31 	bl	8012d08 <LoRaMacClassBIsMulticastExpected>
 80104a6:	4603      	mov	r3, r0
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d001      	beq.n	80104b0 <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 80104ac:	230f      	movs	r3, #15
 80104ae:	e000      	b.n	80104b2 <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 80104b0:	2300      	movs	r3, #0
}
 80104b2:	4618      	mov	r0, r3
 80104b4:	bd80      	pop	{r7, pc}
 80104b6:	bf00      	nop
 80104b8:	20000df8 	.word	0x20000df8

080104bc <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 80104bc:	b590      	push	{r4, r7, lr}
 80104be:	b083      	sub	sp, #12
 80104c0:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80104c2:	4b2d      	ldr	r3, [pc, #180]	@ (8010578 <ComputeRxWindowParameters+0xbc>)
 80104c4:	f893 4040 	ldrb.w	r4, [r3, #64]	@ 0x40
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 80104c8:	4b2b      	ldr	r3, [pc, #172]	@ (8010578 <ComputeRxWindowParameters+0xbc>)
 80104ca:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 80104ce:	4b2a      	ldr	r3, [pc, #168]	@ (8010578 <ComputeRxWindowParameters+0xbc>)
 80104d0:	f893 1075 	ldrb.w	r1, [r3, #117]	@ 0x75
 80104d4:	4b28      	ldr	r3, [pc, #160]	@ (8010578 <ComputeRxWindowParameters+0xbc>)
 80104d6:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 80104da:	4b27      	ldr	r3, [pc, #156]	@ (8010578 <ComputeRxWindowParameters+0xbc>)
 80104dc:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 80104e0:	b25b      	sxtb	r3, r3
 80104e2:	f004 fc8c 	bl	8014dfe <RegionApplyDrOffset>
 80104e6:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80104e8:	b259      	sxtb	r1, r3
 80104ea:	4b23      	ldr	r3, [pc, #140]	@ (8010578 <ComputeRxWindowParameters+0xbc>)
 80104ec:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 80104f0:	4b21      	ldr	r3, [pc, #132]	@ (8010578 <ComputeRxWindowParameters+0xbc>)
 80104f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80104f4:	4821      	ldr	r0, [pc, #132]	@ (801057c <ComputeRxWindowParameters+0xc0>)
 80104f6:	9000      	str	r0, [sp, #0]
 80104f8:	4620      	mov	r0, r4
 80104fa:	f004 fba2 	bl	8014c42 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80104fe:	4b1e      	ldr	r3, [pc, #120]	@ (8010578 <ComputeRxWindowParameters+0xbc>)
 8010500:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 8010504:	4b1c      	ldr	r3, [pc, #112]	@ (8010578 <ComputeRxWindowParameters+0xbc>)
 8010506:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 801050a:	b259      	sxtb	r1, r3
 801050c:	4b1a      	ldr	r3, [pc, #104]	@ (8010578 <ComputeRxWindowParameters+0xbc>)
 801050e:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8010512:	4b19      	ldr	r3, [pc, #100]	@ (8010578 <ComputeRxWindowParameters+0xbc>)
 8010514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010516:	4c1a      	ldr	r4, [pc, #104]	@ (8010580 <ComputeRxWindowParameters+0xc4>)
 8010518:	9400      	str	r4, [sp, #0]
 801051a:	f004 fb92 	bl	8014c42 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 801051e:	4b16      	ldr	r3, [pc, #88]	@ (8010578 <ComputeRxWindowParameters+0xbc>)
 8010520:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010522:	4a18      	ldr	r2, [pc, #96]	@ (8010584 <ComputeRxWindowParameters+0xc8>)
 8010524:	f8d2 23c4 	ldr.w	r2, [r2, #964]	@ 0x3c4
 8010528:	4413      	add	r3, r2
 801052a:	4a16      	ldr	r2, [pc, #88]	@ (8010584 <ComputeRxWindowParameters+0xc8>)
 801052c:	f8c2 33b0 	str.w	r3, [r2, #944]	@ 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8010530:	4b11      	ldr	r3, [pc, #68]	@ (8010578 <ComputeRxWindowParameters+0xbc>)
 8010532:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010534:	4a13      	ldr	r2, [pc, #76]	@ (8010584 <ComputeRxWindowParameters+0xc8>)
 8010536:	f8d2 23dc 	ldr.w	r2, [r2, #988]	@ 0x3dc
 801053a:	4413      	add	r3, r2
 801053c:	4a11      	ldr	r2, [pc, #68]	@ (8010584 <ComputeRxWindowParameters+0xc8>)
 801053e:	f8c2 33b4 	str.w	r3, [r2, #948]	@ 0x3b4

    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8010542:	4b0d      	ldr	r3, [pc, #52]	@ (8010578 <ComputeRxWindowParameters+0xbc>)
 8010544:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 8010548:	2b00      	cmp	r3, #0
 801054a:	d111      	bne.n	8010570 <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 801054c:	4b0a      	ldr	r3, [pc, #40]	@ (8010578 <ComputeRxWindowParameters+0xbc>)
 801054e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010550:	4a0c      	ldr	r2, [pc, #48]	@ (8010584 <ComputeRxWindowParameters+0xc8>)
 8010552:	f8d2 23c4 	ldr.w	r2, [r2, #964]	@ 0x3c4
 8010556:	4413      	add	r3, r2
 8010558:	4a0a      	ldr	r2, [pc, #40]	@ (8010584 <ComputeRxWindowParameters+0xc8>)
 801055a:	f8c2 33b0 	str.w	r3, [r2, #944]	@ 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 801055e:	4b06      	ldr	r3, [pc, #24]	@ (8010578 <ComputeRxWindowParameters+0xbc>)
 8010560:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010562:	4a08      	ldr	r2, [pc, #32]	@ (8010584 <ComputeRxWindowParameters+0xc8>)
 8010564:	f8d2 23dc 	ldr.w	r2, [r2, #988]	@ 0x3dc
 8010568:	4413      	add	r3, r2
 801056a:	4a06      	ldr	r2, [pc, #24]	@ (8010584 <ComputeRxWindowParameters+0xc8>)
 801056c:	f8c2 33b4 	str.w	r3, [r2, #948]	@ 0x3b4
    }
}
 8010570:	bf00      	nop
 8010572:	3704      	adds	r7, #4
 8010574:	46bd      	mov	sp, r7
 8010576:	bd90      	pop	{r4, r7, pc}
 8010578:	20000df8 	.word	0x20000df8
 801057c:	20000c90 	.word	0x20000c90
 8010580:	20000ca8 	.word	0x20000ca8
 8010584:	200008d8 	.word	0x200008d8

08010588 <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 8010588:	b580      	push	{r7, lr}
 801058a:	b082      	sub	sp, #8
 801058c:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 801058e:	2300      	movs	r3, #0
 8010590:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8010592:	4b13      	ldr	r3, [pc, #76]	@ (80105e0 <VerifyTxFrame+0x58>)
 8010594:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 8010598:	2b00      	cmp	r3, #0
 801059a:	d01b      	beq.n	80105d4 <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 801059c:	1d3b      	adds	r3, r7, #4
 801059e:	4618      	mov	r0, r3
 80105a0:	f002 fe28 	bl	80131f4 <LoRaMacCommandsGetSizeSerializedCmds>
 80105a4:	4603      	mov	r3, r0
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d001      	beq.n	80105ae <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80105aa:	2313      	movs	r3, #19
 80105ac:	e013      	b.n	80105d6 <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 80105ae:	4b0d      	ldr	r3, [pc, #52]	@ (80105e4 <VerifyTxFrame+0x5c>)
 80105b0:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 80105b4:	4a0a      	ldr	r2, [pc, #40]	@ (80105e0 <VerifyTxFrame+0x58>)
 80105b6:	f992 1039 	ldrsb.w	r1, [r2, #57]	@ 0x39
 80105ba:	687a      	ldr	r2, [r7, #4]
 80105bc:	b2d2      	uxtb	r2, r2
 80105be:	4618      	mov	r0, r3
 80105c0:	f7ff f918 	bl	800f7f4 <ValidatePayloadLength>
 80105c4:	4603      	mov	r3, r0
 80105c6:	f083 0301 	eor.w	r3, r3, #1
 80105ca:	b2db      	uxtb	r3, r3
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d001      	beq.n	80105d4 <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 80105d0:	2308      	movs	r3, #8
 80105d2:	e000      	b.n	80105d6 <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 80105d4:	2300      	movs	r3, #0
}
 80105d6:	4618      	mov	r0, r3
 80105d8:	3708      	adds	r7, #8
 80105da:	46bd      	mov	sp, r7
 80105dc:	bd80      	pop	{r7, pc}
 80105de:	bf00      	nop
 80105e0:	20000df8 	.word	0x20000df8
 80105e4:	200008d8 	.word	0x200008d8

080105e8 <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 80105e8:	b580      	push	{r7, lr}
 80105ea:	b082      	sub	sp, #8
 80105ec:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 80105ee:	4b18      	ldr	r3, [pc, #96]	@ (8010650 <SerializeTxFrame+0x68>)
 80105f0:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d002      	beq.n	80105fe <SerializeTxFrame+0x16>
 80105f8:	2b04      	cmp	r3, #4
 80105fa:	d011      	beq.n	8010620 <SerializeTxFrame+0x38>
 80105fc:	e021      	b.n	8010642 <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 80105fe:	4815      	ldr	r0, [pc, #84]	@ (8010654 <SerializeTxFrame+0x6c>)
 8010600:	f004 f921 	bl	8014846 <LoRaMacSerializerJoinRequest>
 8010604:	4603      	mov	r3, r0
 8010606:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8010608:	79fb      	ldrb	r3, [r7, #7]
 801060a:	2b00      	cmp	r3, #0
 801060c:	d001      	beq.n	8010612 <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 801060e:	2311      	movs	r3, #17
 8010610:	e01a      	b.n	8010648 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8010612:	4b0f      	ldr	r3, [pc, #60]	@ (8010650 <SerializeTxFrame+0x68>)
 8010614:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8010618:	461a      	mov	r2, r3
 801061a:	4b0d      	ldr	r3, [pc, #52]	@ (8010650 <SerializeTxFrame+0x68>)
 801061c:	801a      	strh	r2, [r3, #0]
            break;
 801061e:	e012      	b.n	8010646 <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 8010620:	480c      	ldr	r0, [pc, #48]	@ (8010654 <SerializeTxFrame+0x6c>)
 8010622:	f004 f992 	bl	801494a <LoRaMacSerializerData>
 8010626:	4603      	mov	r3, r0
 8010628:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 801062a:	79fb      	ldrb	r3, [r7, #7]
 801062c:	2b00      	cmp	r3, #0
 801062e:	d001      	beq.n	8010634 <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8010630:	2311      	movs	r3, #17
 8010632:	e009      	b.n	8010648 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8010634:	4b06      	ldr	r3, [pc, #24]	@ (8010650 <SerializeTxFrame+0x68>)
 8010636:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 801063a:	461a      	mov	r2, r3
 801063c:	4b04      	ldr	r3, [pc, #16]	@ (8010650 <SerializeTxFrame+0x68>)
 801063e:	801a      	strh	r2, [r3, #0]
            break;
 8010640:	e001      	b.n	8010646 <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8010642:	2303      	movs	r3, #3
 8010644:	e000      	b.n	8010648 <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 8010646:	2300      	movs	r3, #0
}
 8010648:	4618      	mov	r0, r3
 801064a:	3708      	adds	r7, #8
 801064c:	46bd      	mov	sp, r7
 801064e:	bd80      	pop	{r7, pc}
 8010650:	200008d8 	.word	0x200008d8
 8010654:	200009e0 	.word	0x200009e0

08010658 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 8010658:	b580      	push	{r7, lr}
 801065a:	b090      	sub	sp, #64	@ 0x40
 801065c:	af02      	add	r7, sp, #8
 801065e:	4603      	mov	r3, r0
 8010660:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010662:	2303      	movs	r3, #3
 8010664:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 8010668:	f7ff ff06 	bl	8010478 <CheckForClassBCollision>
 801066c:	4603      	mov	r3, r0
 801066e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 8010672:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010676:	2b00      	cmp	r3, #0
 8010678:	d002      	beq.n	8010680 <ScheduleTx+0x28>
    {
        return status;
 801067a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801067e:	e08f      	b.n	80107a0 <ScheduleTx+0x148>
    }

    // Update back-off
    CalculateBackOff( );
 8010680:	f000 f8f4 	bl	801086c <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 8010684:	f7ff ffb0 	bl	80105e8 <SerializeTxFrame>
 8010688:	4603      	mov	r3, r0
 801068a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 801068e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010692:	2b00      	cmp	r3, #0
 8010694:	d002      	beq.n	801069c <ScheduleTx+0x44>
    {
        return status;
 8010696:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801069a:	e081      	b.n	80107a0 <ScheduleTx+0x148>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 801069c:	4b42      	ldr	r3, [pc, #264]	@ (80107a8 <ScheduleTx+0x150>)
 801069e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80106a0:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80106a2:	4b41      	ldr	r3, [pc, #260]	@ (80107a8 <ScheduleTx+0x150>)
 80106a4:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 80106a8:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 80106aa:	4b3f      	ldr	r3, [pc, #252]	@ (80107a8 <ScheduleTx+0x150>)
 80106ac:	f893 3108 	ldrb.w	r3, [r3, #264]	@ 0x108
 80106b0:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 80106b2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80106b6:	4618      	mov	r0, r3
 80106b8:	f00a f90c 	bl	801a8d4 <SysTimeGetMcuTime>
 80106bc:	4638      	mov	r0, r7
 80106be:	4b3a      	ldr	r3, [pc, #232]	@ (80107a8 <ScheduleTx+0x150>)
 80106c0:	f8d3 2114 	ldr.w	r2, [r3, #276]	@ 0x114
 80106c4:	9200      	str	r2, [sp, #0]
 80106c6:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80106ca:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80106ce:	ca06      	ldmia	r2, {r1, r2}
 80106d0:	f00a f861 	bl	801a796 <SysTimeSub>
 80106d4:	f107 0320 	add.w	r3, r7, #32
 80106d8:	463a      	mov	r2, r7
 80106da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80106de:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 80106e2:	4b31      	ldr	r3, [pc, #196]	@ (80107a8 <ScheduleTx+0x150>)
 80106e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80106e6:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 80106e8:	2300      	movs	r3, #0
 80106ea:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    nextChan.Joined = true;
 80106ee:	2301      	movs	r3, #1
 80106f0:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 80106f2:	4b2e      	ldr	r3, [pc, #184]	@ (80107ac <ScheduleTx+0x154>)
 80106f4:	881b      	ldrh	r3, [r3, #0]
 80106f6:	857b      	strh	r3, [r7, #42]	@ 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80106f8:	4b2b      	ldr	r3, [pc, #172]	@ (80107a8 <ScheduleTx+0x150>)
 80106fa:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d104      	bne.n	801070c <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 8010702:	2301      	movs	r3, #1
 8010704:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        nextChan.Joined = false;
 8010708:	2300      	movs	r3, #0
 801070a:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 801070c:	4b26      	ldr	r3, [pc, #152]	@ (80107a8 <ScheduleTx+0x150>)
 801070e:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 8010712:	f107 0114 	add.w	r1, r7, #20
 8010716:	4b26      	ldr	r3, [pc, #152]	@ (80107b0 <ScheduleTx+0x158>)
 8010718:	9300      	str	r3, [sp, #0]
 801071a:	4b26      	ldr	r3, [pc, #152]	@ (80107b4 <ScheduleTx+0x15c>)
 801071c:	4a26      	ldr	r2, [pc, #152]	@ (80107b8 <ScheduleTx+0x160>)
 801071e:	f004 fb56 	bl	8014dce <RegionNextChannel>
 8010722:	4603      	mov	r3, r0
 8010724:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if( status != LORAMAC_STATUS_OK )
 8010728:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801072c:	2b00      	cmp	r3, #0
 801072e:	d022      	beq.n	8010776 <ScheduleTx+0x11e>
    {
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 8010730:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010734:	2b0b      	cmp	r3, #11
 8010736:	d11b      	bne.n	8010770 <ScheduleTx+0x118>
 8010738:	7bfb      	ldrb	r3, [r7, #15]
 801073a:	2b00      	cmp	r3, #0
 801073c:	d018      	beq.n	8010770 <ScheduleTx+0x118>
            ( allowDelayedTx == true ) )
        {
            // Allow delayed transmissions. We have to allow it in case
            // the MAC must retransmit a frame with the frame repetitions
            if( MacCtx.DutyCycleWaitTime != 0 )
 801073e:	4b1b      	ldr	r3, [pc, #108]	@ (80107ac <ScheduleTx+0x154>)
 8010740:	f8d3 3498 	ldr.w	r3, [r3, #1176]	@ 0x498
 8010744:	2b00      	cmp	r3, #0
 8010746:	d011      	beq.n	801076c <ScheduleTx+0x114>
            {// Send later - prepare timer
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8010748:	4b18      	ldr	r3, [pc, #96]	@ (80107ac <ScheduleTx+0x154>)
 801074a:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 801074e:	f043 0320 	orr.w	r3, r3, #32
 8010752:	4a16      	ldr	r2, [pc, #88]	@ (80107ac <ScheduleTx+0x154>)
 8010754:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8010758:	4b14      	ldr	r3, [pc, #80]	@ (80107ac <ScheduleTx+0x154>)
 801075a:	f8d3 3498 	ldr.w	r3, [r3, #1176]	@ 0x498
 801075e:	4619      	mov	r1, r3
 8010760:	4816      	ldr	r0, [pc, #88]	@ (80107bc <ScheduleTx+0x164>)
 8010762:	f00a fe55 	bl	801b410 <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 8010766:	4815      	ldr	r0, [pc, #84]	@ (80107bc <ScheduleTx+0x164>)
 8010768:	f00a fd74 	bl	801b254 <UTIL_TIMER_Start>
            }
            return LORAMAC_STATUS_OK;
 801076c:	2300      	movs	r3, #0
 801076e:	e017      	b.n	80107a0 <ScheduleTx+0x148>
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 8010770:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010774:	e014      	b.n	80107a0 <ScheduleTx+0x148>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 8010776:	f7ff fea1 	bl	80104bc <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 801077a:	f7ff ff05 	bl	8010588 <VerifyTxFrame>
 801077e:	4603      	mov	r3, r0
 8010780:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 8010784:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010788:	2b00      	cmp	r3, #0
 801078a:	d002      	beq.n	8010792 <ScheduleTx+0x13a>
    {
        return status;
 801078c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010790:	e006      	b.n	80107a0 <ScheduleTx+0x148>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 8010792:	4b06      	ldr	r3, [pc, #24]	@ (80107ac <ScheduleTx+0x154>)
 8010794:	f893 341f 	ldrb.w	r3, [r3, #1055]	@ 0x41f
 8010798:	4618      	mov	r0, r3
 801079a:	f000 fb3b 	bl	8010e14 <SendFrameOnChannel>
 801079e:	4603      	mov	r3, r0
}
 80107a0:	4618      	mov	r0, r3
 80107a2:	3738      	adds	r7, #56	@ 0x38
 80107a4:	46bd      	mov	sp, r7
 80107a6:	bd80      	pop	{r7, pc}
 80107a8:	20000df8 	.word	0x20000df8
 80107ac:	200008d8 	.word	0x200008d8
 80107b0:	20000e28 	.word	0x20000e28
 80107b4:	20000d70 	.word	0x20000d70
 80107b8:	20000cf7 	.word	0x20000cf7
 80107bc:	20000c40 	.word	0x20000c40

080107c0 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 80107c0:	b580      	push	{r7, lr}
 80107c2:	b084      	sub	sp, #16
 80107c4:	af00      	add	r7, sp, #0
 80107c6:	4603      	mov	r3, r0
 80107c8:	460a      	mov	r2, r1
 80107ca:	71fb      	strb	r3, [r7, #7]
 80107cc:	4613      	mov	r3, r2
 80107ce:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 80107d0:	2312      	movs	r3, #18
 80107d2:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 80107d4:	2300      	movs	r3, #0
 80107d6:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 80107d8:	4b22      	ldr	r3, [pc, #136]	@ (8010864 <SecureFrame+0xa4>)
 80107da:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d002      	beq.n	80107e8 <SecureFrame+0x28>
 80107e2:	2b04      	cmp	r3, #4
 80107e4:	d011      	beq.n	801080a <SecureFrame+0x4a>
 80107e6:	e036      	b.n	8010856 <SecureFrame+0x96>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 80107e8:	481f      	ldr	r0, [pc, #124]	@ (8010868 <SecureFrame+0xa8>)
 80107ea:	f003 fc03 	bl	8013ff4 <LoRaMacCryptoPrepareJoinRequest>
 80107ee:	4603      	mov	r3, r0
 80107f0:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 80107f2:	7bfb      	ldrb	r3, [r7, #15]
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d001      	beq.n	80107fc <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80107f8:	2311      	movs	r3, #17
 80107fa:	e02f      	b.n	801085c <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 80107fc:	4b19      	ldr	r3, [pc, #100]	@ (8010864 <SecureFrame+0xa4>)
 80107fe:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8010802:	461a      	mov	r2, r3
 8010804:	4b17      	ldr	r3, [pc, #92]	@ (8010864 <SecureFrame+0xa4>)
 8010806:	801a      	strh	r2, [r3, #0]
            break;
 8010808:	e027      	b.n	801085a <SecureFrame+0x9a>
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 801080a:	f107 0308 	add.w	r3, r7, #8
 801080e:	4618      	mov	r0, r3
 8010810:	f003 fb34 	bl	8013e7c <LoRaMacCryptoGetFCntUp>
 8010814:	4603      	mov	r3, r0
 8010816:	2b00      	cmp	r3, #0
 8010818:	d001      	beq.n	801081e <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 801081a:	2312      	movs	r3, #18
 801081c:	e01e      	b.n	801085c <SecureFrame+0x9c>
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            if( MacCtx.ChannelsNbTransCounter >= 1 )
 801081e:	4b11      	ldr	r3, [pc, #68]	@ (8010864 <SecureFrame+0xa4>)
 8010820:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 8010824:	2b00      	cmp	r3, #0
 8010826:	d002      	beq.n	801082e <SecureFrame+0x6e>
#endif /* LORAMAC_VERSION */
            {
                fCntUp -= 1;
 8010828:	68bb      	ldr	r3, [r7, #8]
 801082a:	3b01      	subs	r3, #1
 801082c:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 801082e:	68b8      	ldr	r0, [r7, #8]
 8010830:	79ba      	ldrb	r2, [r7, #6]
 8010832:	79f9      	ldrb	r1, [r7, #7]
 8010834:	4b0c      	ldr	r3, [pc, #48]	@ (8010868 <SecureFrame+0xa8>)
 8010836:	f003 fced 	bl	8014214 <LoRaMacCryptoSecureMessage>
 801083a:	4603      	mov	r3, r0
 801083c:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 801083e:	7bfb      	ldrb	r3, [r7, #15]
 8010840:	2b00      	cmp	r3, #0
 8010842:	d001      	beq.n	8010848 <SecureFrame+0x88>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8010844:	2311      	movs	r3, #17
 8010846:	e009      	b.n	801085c <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8010848:	4b06      	ldr	r3, [pc, #24]	@ (8010864 <SecureFrame+0xa4>)
 801084a:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 801084e:	461a      	mov	r2, r3
 8010850:	4b04      	ldr	r3, [pc, #16]	@ (8010864 <SecureFrame+0xa4>)
 8010852:	801a      	strh	r2, [r3, #0]
            break;
 8010854:	e001      	b.n	801085a <SecureFrame+0x9a>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8010856:	2303      	movs	r3, #3
 8010858:	e000      	b.n	801085c <SecureFrame+0x9c>
    }
    return LORAMAC_STATUS_OK;
 801085a:	2300      	movs	r3, #0
}
 801085c:	4618      	mov	r0, r3
 801085e:	3710      	adds	r7, #16
 8010860:	46bd      	mov	sp, r7
 8010862:	bd80      	pop	{r7, pc}
 8010864:	200008d8 	.word	0x200008d8
 8010868:	200009e0 	.word	0x200009e0

0801086c <CalculateBackOff>:

static void CalculateBackOff( void )
{
 801086c:	b480      	push	{r7}
 801086e:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 8010870:	4b09      	ldr	r3, [pc, #36]	@ (8010898 <CalculateBackOff+0x2c>)
 8010872:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010874:	2b00      	cmp	r3, #0
 8010876:	d10a      	bne.n	801088e <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 8010878:	4b07      	ldr	r3, [pc, #28]	@ (8010898 <CalculateBackOff+0x2c>)
 801087a:	f8b3 310c 	ldrh.w	r3, [r3, #268]	@ 0x10c
 801087e:	3b01      	subs	r3, #1
 8010880:	4a06      	ldr	r2, [pc, #24]	@ (801089c <CalculateBackOff+0x30>)
 8010882:	f8d2 2420 	ldr.w	r2, [r2, #1056]	@ 0x420
 8010886:	fb02 f303 	mul.w	r3, r2, r3
 801088a:	4a03      	ldr	r2, [pc, #12]	@ (8010898 <CalculateBackOff+0x2c>)
 801088c:	6313      	str	r3, [r2, #48]	@ 0x30
    }
}
 801088e:	bf00      	nop
 8010890:	46bd      	mov	sp, r7
 8010892:	bc80      	pop	{r7}
 8010894:	4770      	bx	lr
 8010896:	bf00      	nop
 8010898:	20000df8 	.word	0x20000df8
 801089c:	200008d8 	.word	0x200008d8

080108a0 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 80108a0:	b580      	push	{r7, lr}
 80108a2:	b082      	sub	sp, #8
 80108a4:	af00      	add	r7, sp, #0
 80108a6:	4603      	mov	r3, r0
 80108a8:	7139      	strb	r1, [r7, #4]
 80108aa:	71fb      	strb	r3, [r7, #7]
 80108ac:	4613      	mov	r3, r2
 80108ae:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 80108b0:	79fb      	ldrb	r3, [r7, #7]
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d002      	beq.n	80108bc <RemoveMacCommands+0x1c>
 80108b6:	79fb      	ldrb	r3, [r7, #7]
 80108b8:	2b01      	cmp	r3, #1
 80108ba:	d10d      	bne.n	80108d8 <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 80108bc:	79bb      	ldrb	r3, [r7, #6]
 80108be:	2b01      	cmp	r3, #1
 80108c0:	d108      	bne.n	80108d4 <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 80108c2:	793b      	ldrb	r3, [r7, #4]
 80108c4:	f003 0320 	and.w	r3, r3, #32
 80108c8:	b2db      	uxtb	r3, r3
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	d004      	beq.n	80108d8 <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 80108ce:	f002 fc6f 	bl	80131b0 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 80108d2:	e001      	b.n	80108d8 <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 80108d4:	f002 fc6c 	bl	80131b0 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 80108d8:	bf00      	nop
 80108da:	3708      	adds	r7, #8
 80108dc:	46bd      	mov	sp, r7
 80108de:	bd80      	pop	{r7, pc}

080108e0 <ResetMacParameters>:

static void ResetMacParameters( void )
{
 80108e0:	b5b0      	push	{r4, r5, r7, lr}
 80108e2:	b090      	sub	sp, #64	@ 0x40
 80108e4:	af00      	add	r7, sp, #0
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 80108e6:	4b70      	ldr	r3, [pc, #448]	@ (8010aa8 <ResetMacParameters+0x1c8>)
 80108e8:	2200      	movs	r2, #0
 80108ea:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 80108ee:	4b6e      	ldr	r3, [pc, #440]	@ (8010aa8 <ResetMacParameters+0x1c8>)
 80108f0:	2200      	movs	r2, #0
 80108f2:	629a      	str	r2, [r3, #40]	@ 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 80108f4:	4b6d      	ldr	r3, [pc, #436]	@ (8010aac <ResetMacParameters+0x1cc>)
 80108f6:	2200      	movs	r2, #0
 80108f8:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetries = 1;
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetry = false;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RetransmitTimeoutRetry = false;
 80108fc:	4b6b      	ldr	r3, [pc, #428]	@ (8010aac <ResetMacParameters+0x1cc>)
 80108fe:	2200      	movs	r2, #0
 8010900:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
    MacCtx.ResponseTimeoutStartTime = 0;
 8010904:	4b69      	ldr	r3, [pc, #420]	@ (8010aac <ResetMacParameters+0x1cc>)
 8010906:	2200      	movs	r2, #0
 8010908:	f8c3 249c 	str.w	r2, [r3, #1180]	@ 0x49c
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.MaxDCycle = 0;
 801090c:	4b66      	ldr	r3, [pc, #408]	@ (8010aa8 <ResetMacParameters+0x1c8>)
 801090e:	2200      	movs	r2, #0
 8010910:	f883 2107 	strb.w	r2, [r3, #263]	@ 0x107
    Nvm.MacGroup2.AggregatedDCycle = 1;
 8010914:	4b64      	ldr	r3, [pc, #400]	@ (8010aa8 <ResetMacParameters+0x1c8>)
 8010916:	2201      	movs	r2, #1
 8010918:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 801091c:	4b62      	ldr	r3, [pc, #392]	@ (8010aa8 <ResetMacParameters+0x1c8>)
 801091e:	f993 20cc 	ldrsb.w	r2, [r3, #204]	@ 0xcc
 8010922:	4b61      	ldr	r3, [pc, #388]	@ (8010aa8 <ResetMacParameters+0x1c8>)
 8010924:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8010928:	4b5f      	ldr	r3, [pc, #380]	@ (8010aa8 <ResetMacParameters+0x1c8>)
 801092a:	f993 20cd 	ldrsb.w	r2, [r3, #205]	@ 0xcd
 801092e:	4b5e      	ldr	r3, [pc, #376]	@ (8010aa8 <ResetMacParameters+0x1c8>)
 8010930:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 8010934:	4b5c      	ldr	r3, [pc, #368]	@ (8010aa8 <ResetMacParameters+0x1c8>)
 8010936:	f893 20a5 	ldrb.w	r2, [r3, #165]	@ 0xa5
 801093a:	4b5b      	ldr	r3, [pc, #364]	@ (8010aa8 <ResetMacParameters+0x1c8>)
 801093c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8010940:	4b59      	ldr	r3, [pc, #356]	@ (8010aa8 <ResetMacParameters+0x1c8>)
 8010942:	4a59      	ldr	r2, [pc, #356]	@ (8010aa8 <ResetMacParameters+0x1c8>)
 8010944:	3364      	adds	r3, #100	@ 0x64
 8010946:	32a8      	adds	r2, #168	@ 0xa8
 8010948:	e892 0003 	ldmia.w	r2, {r0, r1}
 801094c:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8010950:	4b55      	ldr	r3, [pc, #340]	@ (8010aa8 <ResetMacParameters+0x1c8>)
 8010952:	4a55      	ldr	r2, [pc, #340]	@ (8010aa8 <ResetMacParameters+0x1c8>)
 8010954:	336c      	adds	r3, #108	@ 0x6c
 8010956:	32b0      	adds	r2, #176	@ 0xb0
 8010958:	e892 0003 	ldmia.w	r2, {r0, r1}
 801095c:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 8010960:	4b51      	ldr	r3, [pc, #324]	@ (8010aa8 <ResetMacParameters+0x1c8>)
 8010962:	f893 20b8 	ldrb.w	r2, [r3, #184]	@ 0xb8
 8010966:	4b50      	ldr	r3, [pc, #320]	@ (8010aa8 <ResetMacParameters+0x1c8>)
 8010968:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 801096c:	4b4e      	ldr	r3, [pc, #312]	@ (8010aa8 <ResetMacParameters+0x1c8>)
 801096e:	f893 20b9 	ldrb.w	r2, [r3, #185]	@ 0xb9
 8010972:	4b4d      	ldr	r3, [pc, #308]	@ (8010aa8 <ResetMacParameters+0x1c8>)
 8010974:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 8010978:	4b4b      	ldr	r3, [pc, #300]	@ (8010aa8 <ResetMacParameters+0x1c8>)
 801097a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 801097e:	4a4a      	ldr	r2, [pc, #296]	@ (8010aa8 <ResetMacParameters+0x1c8>)
 8010980:	6793      	str	r3, [r2, #120]	@ 0x78
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8010982:	4b49      	ldr	r3, [pc, #292]	@ (8010aa8 <ResetMacParameters+0x1c8>)
 8010984:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8010988:	4a47      	ldr	r2, [pc, #284]	@ (8010aa8 <ResetMacParameters+0x1c8>)
 801098a:	67d3      	str	r3, [r2, #124]	@ 0x7c

    MacCtx.NodeAckRequested = false;
 801098c:	4b47      	ldr	r3, [pc, #284]	@ (8010aac <ResetMacParameters+0x1cc>)
 801098e:	2200      	movs	r2, #0
 8010990:	f883 241e 	strb.w	r2, [r3, #1054]	@ 0x41e
    Nvm.MacGroup1.SrvAckRequested = false;
 8010994:	4b44      	ldr	r3, [pc, #272]	@ (8010aa8 <ResetMacParameters+0x1c8>)
 8010996:	2200      	movs	r2, #0
 8010998:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 801099c:	4b42      	ldr	r3, [pc, #264]	@ (8010aa8 <ResetMacParameters+0x1c8>)
 801099e:	2200      	movs	r2, #0
 80109a0:	f883 2109 	strb.w	r2, [r3, #265]	@ 0x109
    Nvm.MacGroup2.DownlinkReceived = false;
 80109a4:	4b40      	ldr	r3, [pc, #256]	@ (8010aa8 <ResetMacParameters+0x1c8>)
 80109a6:	2200      	movs	r2, #0
 80109a8:	f883 210a 	strb.w	r2, [r3, #266]	@ 0x10a
#endif /* LORAMAC_VERSION */

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 80109ac:	2301      	movs	r3, #1
 80109ae:	743b      	strb	r3, [r7, #16]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 80109b0:	4b3f      	ldr	r3, [pc, #252]	@ (8010ab0 <ResetMacParameters+0x1d0>)
 80109b2:	607b      	str	r3, [r7, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 80109b4:	4b3f      	ldr	r3, [pc, #252]	@ (8010ab4 <ResetMacParameters+0x1d4>)
 80109b6:	60bb      	str	r3, [r7, #8]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    params.Bands = &RegionBands;
 80109b8:	4b3f      	ldr	r3, [pc, #252]	@ (8010ab8 <ResetMacParameters+0x1d8>)
 80109ba:	60fb      	str	r3, [r7, #12]
#endif /* LORAMAC_VERSION */
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 80109bc:	4b3a      	ldr	r3, [pc, #232]	@ (8010aa8 <ResetMacParameters+0x1c8>)
 80109be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80109c2:	1d3a      	adds	r2, r7, #4
 80109c4:	4611      	mov	r1, r2
 80109c6:	4618      	mov	r0, r3
 80109c8:	f004 f8ed 	bl	8014ba6 <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 80109cc:	4b37      	ldr	r3, [pc, #220]	@ (8010aac <ResetMacParameters+0x1cc>)
 80109ce:	2200      	movs	r2, #0
 80109d0:	f883 241f 	strb.w	r2, [r3, #1055]	@ 0x41f

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 80109d4:	4b35      	ldr	r3, [pc, #212]	@ (8010aac <ResetMacParameters+0x1cc>)
 80109d6:	f893 241f 	ldrb.w	r2, [r3, #1055]	@ 0x41f
 80109da:	4b34      	ldr	r3, [pc, #208]	@ (8010aac <ResetMacParameters+0x1cc>)
 80109dc:	f883 23d0 	strb.w	r2, [r3, #976]	@ 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 80109e0:	4b31      	ldr	r3, [pc, #196]	@ (8010aa8 <ResetMacParameters+0x1c8>)
 80109e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80109e4:	4a31      	ldr	r2, [pc, #196]	@ (8010aac <ResetMacParameters+0x1cc>)
 80109e6:	f8c2 33d4 	str.w	r3, [r2, #980]	@ 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80109ea:	4b2f      	ldr	r3, [pc, #188]	@ (8010aa8 <ResetMacParameters+0x1c8>)
 80109ec:	f893 2075 	ldrb.w	r2, [r3, #117]	@ 0x75
 80109f0:	4b2e      	ldr	r3, [pc, #184]	@ (8010aac <ResetMacParameters+0x1cc>)
 80109f2:	f883 23e0 	strb.w	r2, [r3, #992]	@ 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 80109f6:	4b2c      	ldr	r3, [pc, #176]	@ (8010aa8 <ResetMacParameters+0x1c8>)
 80109f8:	f893 2080 	ldrb.w	r2, [r3, #128]	@ 0x80
 80109fc:	4b2b      	ldr	r3, [pc, #172]	@ (8010aac <ResetMacParameters+0x1cc>)
 80109fe:	f883 23e1 	strb.w	r2, [r3, #993]	@ 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 8010a02:	4b2a      	ldr	r3, [pc, #168]	@ (8010aac <ResetMacParameters+0x1cc>)
 8010a04:	2200      	movs	r2, #0
 8010a06:	f883 23e2 	strb.w	r2, [r3, #994]	@ 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8010a0a:	4b28      	ldr	r3, [pc, #160]	@ (8010aac <ResetMacParameters+0x1cc>)
 8010a0c:	2201      	movs	r2, #1
 8010a0e:	f883 23e3 	strb.w	r2, [r3, #995]	@ 0x3e3
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8010a12:	4b25      	ldr	r3, [pc, #148]	@ (8010aa8 <ResetMacParameters+0x1c8>)
 8010a14:	f893 211c 	ldrb.w	r2, [r3, #284]	@ 0x11c
 8010a18:	4b24      	ldr	r3, [pc, #144]	@ (8010aac <ResetMacParameters+0x1cc>)
 8010a1a:	f883 23e4 	strb.w	r2, [r3, #996]	@ 0x3e4
#endif /* LORAMAC_VERSION */

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8010a1e:	4a23      	ldr	r2, [pc, #140]	@ (8010aac <ResetMacParameters+0x1cc>)
 8010a20:	4b22      	ldr	r3, [pc, #136]	@ (8010aac <ResetMacParameters+0x1cc>)
 8010a22:	f502 747a 	add.w	r4, r2, #1000	@ 0x3e8
 8010a26:	f503 7574 	add.w	r5, r3, #976	@ 0x3d0
 8010a2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010a2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010a2e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8010a32:	e884 0003 	stmia.w	r4, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8010a36:	4b1d      	ldr	r3, [pc, #116]	@ (8010aac <ResetMacParameters+0x1cc>)
 8010a38:	2201      	movs	r2, #1
 8010a3a:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8010a3e:	4b1b      	ldr	r3, [pc, #108]	@ (8010aac <ResetMacParameters+0x1cc>)
 8010a40:	2202      	movs	r2, #2
 8010a42:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 8010a46:	2300      	movs	r3, #0
 8010a48:	63bb      	str	r3, [r7, #56]	@ 0x38
    classBCallbacks.MacProcessNotify = NULL;
 8010a4a:	2300      	movs	r3, #0
 8010a4c:	63fb      	str	r3, [r7, #60]	@ 0x3c

    if( MacCtx.MacCallbacks != NULL )
 8010a4e:	4b17      	ldr	r3, [pc, #92]	@ (8010aac <ResetMacParameters+0x1cc>)
 8010a50:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	d009      	beq.n	8010a6c <ResetMacParameters+0x18c>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 8010a58:	4b14      	ldr	r3, [pc, #80]	@ (8010aac <ResetMacParameters+0x1cc>)
 8010a5a:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8010a5e:	685b      	ldr	r3, [r3, #4]
 8010a60:	63bb      	str	r3, [r7, #56]	@ 0x38
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 8010a62:	4b12      	ldr	r3, [pc, #72]	@ (8010aac <ResetMacParameters+0x1cc>)
 8010a64:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8010a68:	691b      	ldr	r3, [r3, #16]
 8010a6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 8010a6c:	4b13      	ldr	r3, [pc, #76]	@ (8010abc <ResetMacParameters+0x1dc>)
 8010a6e:	617b      	str	r3, [r7, #20]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 8010a70:	4b13      	ldr	r3, [pc, #76]	@ (8010ac0 <ResetMacParameters+0x1e0>)
 8010a72:	61bb      	str	r3, [r7, #24]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 8010a74:	4b13      	ldr	r3, [pc, #76]	@ (8010ac4 <ResetMacParameters+0x1e4>)
 8010a76:	61fb      	str	r3, [r7, #28]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 8010a78:	4b13      	ldr	r3, [pc, #76]	@ (8010ac8 <ResetMacParameters+0x1e8>)
 8010a7a:	623b      	str	r3, [r7, #32]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 8010a7c:	4b13      	ldr	r3, [pc, #76]	@ (8010acc <ResetMacParameters+0x1ec>)
 8010a7e:	627b      	str	r3, [r7, #36]	@ 0x24
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 8010a80:	4b13      	ldr	r3, [pc, #76]	@ (8010ad0 <ResetMacParameters+0x1f0>)
 8010a82:	62bb      	str	r3, [r7, #40]	@ 0x28
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 8010a84:	4b13      	ldr	r3, [pc, #76]	@ (8010ad4 <ResetMacParameters+0x1f4>)
 8010a86:	62fb      	str	r3, [r7, #44]	@ 0x2c
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 8010a88:	4b13      	ldr	r3, [pc, #76]	@ (8010ad8 <ResetMacParameters+0x1f8>)
 8010a8a:	633b      	str	r3, [r7, #48]	@ 0x30
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
 8010a8c:	4b13      	ldr	r3, [pc, #76]	@ (8010adc <ResetMacParameters+0x1fc>)
 8010a8e:	637b      	str	r3, [r7, #52]	@ 0x34
#endif /* LORAMAC_VERSION */

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 8010a90:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8010a94:	f107 0314 	add.w	r3, r7, #20
 8010a98:	4a11      	ldr	r2, [pc, #68]	@ (8010ae0 <ResetMacParameters+0x200>)
 8010a9a:	4618      	mov	r0, r3
 8010a9c:	f002 f8cf 	bl	8012c3e <LoRaMacClassBInit>
}
 8010aa0:	bf00      	nop
 8010aa2:	3740      	adds	r7, #64	@ 0x40
 8010aa4:	46bd      	mov	sp, r7
 8010aa6:	bdb0      	pop	{r4, r5, r7, pc}
 8010aa8:	20000df8 	.word	0x20000df8
 8010aac:	200008d8 	.word	0x200008d8
 8010ab0:	20000fdc 	.word	0x20000fdc
 8010ab4:	20000fe0 	.word	0x20000fe0
 8010ab8:	200018f0 	.word	0x200018f0
 8010abc:	20000d44 	.word	0x20000d44
 8010ac0:	20000cfc 	.word	0x20000cfc
 8010ac4:	20000d30 	.word	0x20000d30
 8010ac8:	20000d6d 	.word	0x20000d6d
 8010acc:	20000ecc 	.word	0x20000ecc
 8010ad0:	20000e38 	.word	0x20000e38
 8010ad4:	20000e3c 	.word	0x20000e3c
 8010ad8:	20000ed0 	.word	0x20000ed0
 8010adc:	20000f14 	.word	0x20000f14
 8010ae0:	2000135c 	.word	0x2000135c

08010ae4 <RxWindowSetup>:
 *
 * \param [in] rxTimer  Window timer to be topped.
 * \param [in] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 8010ae4:	b580      	push	{r7, lr}
 8010ae6:	b082      	sub	sp, #8
 8010ae8:	af00      	add	r7, sp, #0
 8010aea:	6078      	str	r0, [r7, #4]
 8010aec:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 8010aee:	6878      	ldr	r0, [r7, #4]
 8010af0:	f00a fc1e 	bl	801b330 <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 8010af4:	4b11      	ldr	r3, [pc, #68]	@ (8010b3c <RxWindowSetup+0x58>)
 8010af6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010af8:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8010afa:	4b11      	ldr	r3, [pc, #68]	@ (8010b40 <RxWindowSetup+0x5c>)
 8010afc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010b00:	4a10      	ldr	r2, [pc, #64]	@ (8010b44 <RxWindowSetup+0x60>)
 8010b02:	6839      	ldr	r1, [r7, #0]
 8010b04:	4618      	mov	r0, r3
 8010b06:	f004 f8b6 	bl	8014c76 <RegionRxConfig>
 8010b0a:	4603      	mov	r3, r0
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	d010      	beq.n	8010b32 <RxWindowSetup+0x4e>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 8010b10:	4b0d      	ldr	r3, [pc, #52]	@ (8010b48 <RxWindowSetup+0x64>)
 8010b12:	f893 2428 	ldrb.w	r2, [r3, #1064]	@ 0x428
 8010b16:	4b0c      	ldr	r3, [pc, #48]	@ (8010b48 <RxWindowSetup+0x64>)
 8010b18:	f883 246e 	strb.w	r2, [r3, #1134]	@ 0x46e
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 8010b1c:	4b07      	ldr	r3, [pc, #28]	@ (8010b3c <RxWindowSetup+0x58>)
 8010b1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010b20:	4a07      	ldr	r2, [pc, #28]	@ (8010b40 <RxWindowSetup+0x5c>)
 8010b22:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8010b24:	4610      	mov	r0, r2
 8010b26:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 8010b28:	683b      	ldr	r3, [r7, #0]
 8010b2a:	7cda      	ldrb	r2, [r3, #19]
 8010b2c:	4b06      	ldr	r3, [pc, #24]	@ (8010b48 <RxWindowSetup+0x64>)
 8010b2e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
    }
}
 8010b32:	bf00      	nop
 8010b34:	3708      	adds	r7, #8
 8010b36:	46bd      	mov	sp, r7
 8010b38:	bd80      	pop	{r7, pc}
 8010b3a:	bf00      	nop
 8010b3c:	0801f57c 	.word	0x0801f57c
 8010b40:	20000df8 	.word	0x20000df8
 8010b44:	20000d00 	.word	0x20000d00
 8010b48:	200008d8 	.word	0x200008d8

08010b4c <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 8010b4c:	b590      	push	{r4, r7, lr}
 8010b4e:	b083      	sub	sp, #12
 8010b50:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8010b52:	4b1e      	ldr	r3, [pc, #120]	@ (8010bcc <OpenContinuousRxCWindow+0x80>)
 8010b54:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 8010b58:	4b1c      	ldr	r3, [pc, #112]	@ (8010bcc <OpenContinuousRxCWindow+0x80>)
 8010b5a:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8010b5e:	b259      	sxtb	r1, r3
 8010b60:	4b1a      	ldr	r3, [pc, #104]	@ (8010bcc <OpenContinuousRxCWindow+0x80>)
 8010b62:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8010b66:	4b19      	ldr	r3, [pc, #100]	@ (8010bcc <OpenContinuousRxCWindow+0x80>)
 8010b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010b6a:	4c19      	ldr	r4, [pc, #100]	@ (8010bd0 <OpenContinuousRxCWindow+0x84>)
 8010b6c:	9400      	str	r4, [sp, #0]
 8010b6e:	f004 f868 	bl	8014c42 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8010b72:	4b18      	ldr	r3, [pc, #96]	@ (8010bd4 <OpenContinuousRxCWindow+0x88>)
 8010b74:	2202      	movs	r2, #2
 8010b76:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8010b7a:	4b14      	ldr	r3, [pc, #80]	@ (8010bcc <OpenContinuousRxCWindow+0x80>)
 8010b7c:	f893 211c 	ldrb.w	r2, [r3, #284]	@ 0x11c
 8010b80:	4b14      	ldr	r3, [pc, #80]	@ (8010bd4 <OpenContinuousRxCWindow+0x88>)
 8010b82:	f883 23fc 	strb.w	r2, [r3, #1020]	@ 0x3fc
#endif /* LORAMAC_VERSION */
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8010b86:	4b13      	ldr	r3, [pc, #76]	@ (8010bd4 <OpenContinuousRxCWindow+0x88>)
 8010b88:	2201      	movs	r2, #1
 8010b8a:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8010b8e:	4b0f      	ldr	r3, [pc, #60]	@ (8010bcc <OpenContinuousRxCWindow+0x80>)
 8010b90:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010b94:	4a10      	ldr	r2, [pc, #64]	@ (8010bd8 <OpenContinuousRxCWindow+0x8c>)
 8010b96:	490e      	ldr	r1, [pc, #56]	@ (8010bd0 <OpenContinuousRxCWindow+0x84>)
 8010b98:	4618      	mov	r0, r3
 8010b9a:	f004 f86c 	bl	8014c76 <RegionRxConfig>
 8010b9e:	4603      	mov	r3, r0
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	d00f      	beq.n	8010bc4 <OpenContinuousRxCWindow+0x78>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 8010ba4:	4b0b      	ldr	r3, [pc, #44]	@ (8010bd4 <OpenContinuousRxCWindow+0x88>)
 8010ba6:	f893 2428 	ldrb.w	r2, [r3, #1064]	@ 0x428
 8010baa:	4b0a      	ldr	r3, [pc, #40]	@ (8010bd4 <OpenContinuousRxCWindow+0x88>)
 8010bac:	f883 246e 	strb.w	r2, [r3, #1134]	@ 0x46e
        Radio.Rx( 0 ); // Continuous mode
 8010bb0:	4b0a      	ldr	r3, [pc, #40]	@ (8010bdc <OpenContinuousRxCWindow+0x90>)
 8010bb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010bb4:	2000      	movs	r0, #0
 8010bb6:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 8010bb8:	4b06      	ldr	r3, [pc, #24]	@ (8010bd4 <OpenContinuousRxCWindow+0x88>)
 8010bba:	f893 23fb 	ldrb.w	r2, [r3, #1019]	@ 0x3fb
 8010bbe:	4b05      	ldr	r3, [pc, #20]	@ (8010bd4 <OpenContinuousRxCWindow+0x88>)
 8010bc0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
    }
}
 8010bc4:	bf00      	nop
 8010bc6:	3704      	adds	r7, #4
 8010bc8:	46bd      	mov	sp, r7
 8010bca:	bd90      	pop	{r4, r7, pc}
 8010bcc:	20000df8 	.word	0x20000df8
 8010bd0:	20000cc0 	.word	0x20000cc0
 8010bd4:	200008d8 	.word	0x200008d8
 8010bd8:	20000d00 	.word	0x20000d00
 8010bdc:	0801f57c 	.word	0x0801f57c

08010be0 <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 8010be0:	b580      	push	{r7, lr}
 8010be2:	b088      	sub	sp, #32
 8010be4:	af00      	add	r7, sp, #0
 8010be6:	60f8      	str	r0, [r7, #12]
 8010be8:	60b9      	str	r1, [r7, #8]
 8010bea:	603b      	str	r3, [r7, #0]
 8010bec:	4613      	mov	r3, r2
 8010bee:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 8010bf0:	4b81      	ldr	r3, [pc, #516]	@ (8010df8 <PrepareFrame+0x218>)
 8010bf2:	2200      	movs	r2, #0
 8010bf4:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 8010bf6:	4b80      	ldr	r3, [pc, #512]	@ (8010df8 <PrepareFrame+0x218>)
 8010bf8:	2200      	movs	r2, #0
 8010bfa:	f883 241e 	strb.w	r2, [r3, #1054]	@ 0x41e
    uint32_t fCntUp = 0;
 8010bfe:	2300      	movs	r3, #0
 8010c00:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 8010c02:	2300      	movs	r3, #0
 8010c04:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 8010c06:	2300      	movs	r3, #0
 8010c08:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 8010c0a:	683b      	ldr	r3, [r7, #0]
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d101      	bne.n	8010c14 <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 8010c10:	2300      	movs	r3, #0
 8010c12:	853b      	strh	r3, [r7, #40]	@ 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8010c14:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010c16:	461a      	mov	r2, r3
 8010c18:	6839      	ldr	r1, [r7, #0]
 8010c1a:	4878      	ldr	r0, [pc, #480]	@ (8010dfc <PrepareFrame+0x21c>)
 8010c1c:	f006 fa3b 	bl	8017096 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 8010c20:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010c22:	b2da      	uxtb	r2, r3
 8010c24:	4b74      	ldr	r3, [pc, #464]	@ (8010df8 <PrepareFrame+0x218>)
 8010c26:	f883 2237 	strb.w	r2, [r3, #567]	@ 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 8010c2a:	68fb      	ldr	r3, [r7, #12]
 8010c2c:	781a      	ldrb	r2, [r3, #0]
 8010c2e:	4b72      	ldr	r3, [pc, #456]	@ (8010df8 <PrepareFrame+0x218>)
 8010c30:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 8010c32:	68fb      	ldr	r3, [r7, #12]
 8010c34:	781b      	ldrb	r3, [r3, #0]
 8010c36:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8010c3a:	b2db      	uxtb	r3, r3
 8010c3c:	2b07      	cmp	r3, #7
 8010c3e:	f000 80b9 	beq.w	8010db4 <PrepareFrame+0x1d4>
 8010c42:	2b07      	cmp	r3, #7
 8010c44:	f300 80ce 	bgt.w	8010de4 <PrepareFrame+0x204>
 8010c48:	2b02      	cmp	r3, #2
 8010c4a:	d006      	beq.n	8010c5a <PrepareFrame+0x7a>
 8010c4c:	2b04      	cmp	r3, #4
 8010c4e:	f040 80c9 	bne.w	8010de4 <PrepareFrame+0x204>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 8010c52:	4b69      	ldr	r3, [pc, #420]	@ (8010df8 <PrepareFrame+0x218>)
 8010c54:	2201      	movs	r2, #1
 8010c56:	f883 241e 	strb.w	r2, [r3, #1054]	@ 0x41e
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 8010c5a:	4b67      	ldr	r3, [pc, #412]	@ (8010df8 <PrepareFrame+0x218>)
 8010c5c:	2204      	movs	r2, #4
 8010c5e:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 8010c62:	4b65      	ldr	r3, [pc, #404]	@ (8010df8 <PrepareFrame+0x218>)
 8010c64:	4a66      	ldr	r2, [pc, #408]	@ (8010e00 <PrepareFrame+0x220>)
 8010c66:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8010c6a:	4b63      	ldr	r3, [pc, #396]	@ (8010df8 <PrepareFrame+0x218>)
 8010c6c:	22ff      	movs	r2, #255	@ 0xff
 8010c6e:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 8010c72:	68fb      	ldr	r3, [r7, #12]
 8010c74:	781a      	ldrb	r2, [r3, #0]
 8010c76:	4b60      	ldr	r3, [pc, #384]	@ (8010df8 <PrepareFrame+0x218>)
 8010c78:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8010c7c:	4a5e      	ldr	r2, [pc, #376]	@ (8010df8 <PrepareFrame+0x218>)
 8010c7e:	79fb      	ldrb	r3, [r7, #7]
 8010c80:	f882 3128 	strb.w	r3, [r2, #296]	@ 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 8010c84:	4b5f      	ldr	r3, [pc, #380]	@ (8010e04 <PrepareFrame+0x224>)
 8010c86:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8010c8a:	4a5b      	ldr	r2, [pc, #364]	@ (8010df8 <PrepareFrame+0x218>)
 8010c8c:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8010c90:	68bb      	ldr	r3, [r7, #8]
 8010c92:	781a      	ldrb	r2, [r3, #0]
 8010c94:	4b58      	ldr	r3, [pc, #352]	@ (8010df8 <PrepareFrame+0x218>)
 8010c96:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 8010c9a:	4b57      	ldr	r3, [pc, #348]	@ (8010df8 <PrepareFrame+0x218>)
 8010c9c:	f893 2237 	ldrb.w	r2, [r3, #567]	@ 0x237
 8010ca0:	4b55      	ldr	r3, [pc, #340]	@ (8010df8 <PrepareFrame+0x218>)
 8010ca2:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 8010ca6:	4b54      	ldr	r3, [pc, #336]	@ (8010df8 <PrepareFrame+0x218>)
 8010ca8:	4a54      	ldr	r2, [pc, #336]	@ (8010dfc <PrepareFrame+0x21c>)
 8010caa:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8010cae:	f107 0318 	add.w	r3, r7, #24
 8010cb2:	4618      	mov	r0, r3
 8010cb4:	f003 f8e2 	bl	8013e7c <LoRaMacCryptoGetFCntUp>
 8010cb8:	4603      	mov	r3, r0
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d001      	beq.n	8010cc2 <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8010cbe:	2312      	movs	r3, #18
 8010cc0:	e096      	b.n	8010df0 <PrepareFrame+0x210>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 8010cc2:	69bb      	ldr	r3, [r7, #24]
 8010cc4:	b29a      	uxth	r2, r3
 8010cc6:	4b4c      	ldr	r3, [pc, #304]	@ (8010df8 <PrepareFrame+0x218>)
 8010cc8:	f8a3 2116 	strh.w	r2, [r3, #278]	@ 0x116

            // Reset confirm parameters
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = 0;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            MacCtx.McpsConfirm.NbTrans = 0;
 8010ccc:	4b4a      	ldr	r3, [pc, #296]	@ (8010df8 <PrepareFrame+0x218>)
 8010cce:	2200      	movs	r2, #0
 8010cd0:	f883 2449 	strb.w	r2, [r3, #1097]	@ 0x449
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.AckReceived = false;
 8010cd4:	4b48      	ldr	r3, [pc, #288]	@ (8010df8 <PrepareFrame+0x218>)
 8010cd6:	2200      	movs	r2, #0
 8010cd8:	f883 2448 	strb.w	r2, [r3, #1096]	@ 0x448
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 8010cdc:	69bb      	ldr	r3, [r7, #24]
 8010cde:	4a46      	ldr	r2, [pc, #280]	@ (8010df8 <PrepareFrame+0x218>)
 8010ce0:	f8c2 3450 	str.w	r3, [r2, #1104]	@ 0x450

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8010ce4:	f107 0314 	add.w	r3, r7, #20
 8010ce8:	4618      	mov	r0, r3
 8010cea:	f002 fa83 	bl	80131f4 <LoRaMacCommandsGetSizeSerializedCmds>
 8010cee:	4603      	mov	r3, r0
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	d001      	beq.n	8010cf8 <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010cf4:	2313      	movs	r3, #19
 8010cf6:	e07b      	b.n	8010df0 <PrepareFrame+0x210>
            }

            if( macCmdsSize > 0 )
 8010cf8:	697b      	ldr	r3, [r7, #20]
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	d074      	beq.n	8010de8 <PrepareFrame+0x208>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 8010cfe:	4b41      	ldr	r3, [pc, #260]	@ (8010e04 <PrepareFrame+0x224>)
 8010d00:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8010d04:	4618      	mov	r0, r3
 8010d06:	f7fe fd4d 	bl	800f7a4 <GetMaxAppPayloadWithoutFOptsLength>
 8010d0a:	4603      	mov	r3, r0
 8010d0c:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8010d0e:	4b3a      	ldr	r3, [pc, #232]	@ (8010df8 <PrepareFrame+0x218>)
 8010d10:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	d01d      	beq.n	8010d54 <PrepareFrame+0x174>
 8010d18:	697b      	ldr	r3, [r7, #20]
 8010d1a:	2b0f      	cmp	r3, #15
 8010d1c:	d81a      	bhi.n	8010d54 <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 8010d1e:	f107 0314 	add.w	r3, r7, #20
 8010d22:	4a39      	ldr	r2, [pc, #228]	@ (8010e08 <PrepareFrame+0x228>)
 8010d24:	4619      	mov	r1, r3
 8010d26:	200f      	movs	r0, #15
 8010d28:	f002 fa7a 	bl	8013220 <LoRaMacCommandsSerializeCmds>
 8010d2c:	4603      	mov	r3, r0
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	d001      	beq.n	8010d36 <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010d32:	2313      	movs	r3, #19
 8010d34:	e05c      	b.n	8010df0 <PrepareFrame+0x210>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 8010d36:	697b      	ldr	r3, [r7, #20]
 8010d38:	f003 030f 	and.w	r3, r3, #15
 8010d3c:	b2d9      	uxtb	r1, r3
 8010d3e:	68ba      	ldr	r2, [r7, #8]
 8010d40:	7813      	ldrb	r3, [r2, #0]
 8010d42:	f361 0303 	bfi	r3, r1, #0, #4
 8010d46:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8010d48:	68bb      	ldr	r3, [r7, #8]
 8010d4a:	781a      	ldrb	r2, [r3, #0]
 8010d4c:	4b2a      	ldr	r3, [pc, #168]	@ (8010df8 <PrepareFrame+0x218>)
 8010d4e:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 8010d52:	e049      	b.n	8010de8 <PrepareFrame+0x208>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8010d54:	4b28      	ldr	r3, [pc, #160]	@ (8010df8 <PrepareFrame+0x218>)
 8010d56:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	d010      	beq.n	8010d80 <PrepareFrame+0x1a0>
 8010d5e:	697b      	ldr	r3, [r7, #20]
 8010d60:	2b0f      	cmp	r3, #15
 8010d62:	d90d      	bls.n	8010d80 <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8010d64:	7ffb      	ldrb	r3, [r7, #31]
 8010d66:	f107 0114 	add.w	r1, r7, #20
 8010d6a:	4a28      	ldr	r2, [pc, #160]	@ (8010e0c <PrepareFrame+0x22c>)
 8010d6c:	4618      	mov	r0, r3
 8010d6e:	f002 fa57 	bl	8013220 <LoRaMacCommandsSerializeCmds>
 8010d72:	4603      	mov	r3, r0
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d001      	beq.n	8010d7c <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010d78:	2313      	movs	r3, #19
 8010d7a:	e039      	b.n	8010df0 <PrepareFrame+0x210>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 8010d7c:	230a      	movs	r3, #10
 8010d7e:	e037      	b.n	8010df0 <PrepareFrame+0x210>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8010d80:	7ffb      	ldrb	r3, [r7, #31]
 8010d82:	f107 0114 	add.w	r1, r7, #20
 8010d86:	4a21      	ldr	r2, [pc, #132]	@ (8010e0c <PrepareFrame+0x22c>)
 8010d88:	4618      	mov	r0, r3
 8010d8a:	f002 fa49 	bl	8013220 <LoRaMacCommandsSerializeCmds>
 8010d8e:	4603      	mov	r3, r0
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	d001      	beq.n	8010d98 <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010d94:	2313      	movs	r3, #19
 8010d96:	e02b      	b.n	8010df0 <PrepareFrame+0x210>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 8010d98:	4b17      	ldr	r3, [pc, #92]	@ (8010df8 <PrepareFrame+0x218>)
 8010d9a:	2200      	movs	r2, #0
 8010d9c:	f883 2128 	strb.w	r2, [r3, #296]	@ 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 8010da0:	4b15      	ldr	r3, [pc, #84]	@ (8010df8 <PrepareFrame+0x218>)
 8010da2:	4a1a      	ldr	r2, [pc, #104]	@ (8010e0c <PrepareFrame+0x22c>)
 8010da4:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8010da8:	697b      	ldr	r3, [r7, #20]
 8010daa:	b2da      	uxtb	r2, r3
 8010dac:	4b12      	ldr	r3, [pc, #72]	@ (8010df8 <PrepareFrame+0x218>)
 8010dae:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            break;
 8010db2:	e019      	b.n	8010de8 <PrepareFrame+0x208>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 8010db4:	683b      	ldr	r3, [r7, #0]
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d018      	beq.n	8010dec <PrepareFrame+0x20c>
 8010dba:	4b0f      	ldr	r3, [pc, #60]	@ (8010df8 <PrepareFrame+0x218>)
 8010dbc:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d013      	beq.n	8010dec <PrepareFrame+0x20c>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 8010dc4:	4812      	ldr	r0, [pc, #72]	@ (8010e10 <PrepareFrame+0x230>)
 8010dc6:	4b0c      	ldr	r3, [pc, #48]	@ (8010df8 <PrepareFrame+0x218>)
 8010dc8:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8010dcc:	461a      	mov	r2, r3
 8010dce:	6839      	ldr	r1, [r7, #0]
 8010dd0:	f006 f961 	bl	8017096 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 8010dd4:	4b08      	ldr	r3, [pc, #32]	@ (8010df8 <PrepareFrame+0x218>)
 8010dd6:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8010dda:	3301      	adds	r3, #1
 8010ddc:	b29a      	uxth	r2, r3
 8010dde:	4b06      	ldr	r3, [pc, #24]	@ (8010df8 <PrepareFrame+0x218>)
 8010de0:	801a      	strh	r2, [r3, #0]
            }
            break;
 8010de2:	e003      	b.n	8010dec <PrepareFrame+0x20c>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8010de4:	2302      	movs	r3, #2
 8010de6:	e003      	b.n	8010df0 <PrepareFrame+0x210>
            break;
 8010de8:	bf00      	nop
 8010dea:	e000      	b.n	8010dee <PrepareFrame+0x20e>
            break;
 8010dec:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 8010dee:	2300      	movs	r3, #0
}
 8010df0:	4618      	mov	r0, r3
 8010df2:	3720      	adds	r7, #32
 8010df4:	46bd      	mov	sp, r7
 8010df6:	bd80      	pop	{r7, pc}
 8010df8:	200008d8 	.word	0x200008d8
 8010dfc:	20000a10 	.word	0x20000a10
 8010e00:	200008da 	.word	0x200008da
 8010e04:	20000df8 	.word	0x20000df8
 8010e08:	200009f0 	.word	0x200009f0
 8010e0c:	20000d78 	.word	0x20000d78
 8010e10:	200008db 	.word	0x200008db

08010e14 <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 8010e14:	b580      	push	{r7, lr}
 8010e16:	b08a      	sub	sp, #40	@ 0x28
 8010e18:	af00      	add	r7, sp, #0
 8010e1a:	4603      	mov	r3, r0
 8010e1c:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010e1e:	2303      	movs	r3, #3
 8010e20:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 8010e24:	2300      	movs	r3, #0
 8010e26:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 8010e28:	79fb      	ldrb	r3, [r7, #7]
 8010e2a:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010e2c:	4b4a      	ldr	r3, [pc, #296]	@ (8010f58 <SendFrameOnChannel+0x144>)
 8010e2e:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8010e32:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8010e34:	4b48      	ldr	r3, [pc, #288]	@ (8010f58 <SendFrameOnChannel+0x144>)
 8010e36:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 8010e3a:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8010e3c:	4b46      	ldr	r3, [pc, #280]	@ (8010f58 <SendFrameOnChannel+0x144>)
 8010e3e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010e40:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8010e42:	4b45      	ldr	r3, [pc, #276]	@ (8010f58 <SendFrameOnChannel+0x144>)
 8010e44:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010e46:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8010e48:	4b44      	ldr	r3, [pc, #272]	@ (8010f5c <SendFrameOnChannel+0x148>)
 8010e4a:	881b      	ldrh	r3, [r3, #0]
 8010e4c:	83bb      	strh	r3, [r7, #28]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8010e4e:	4b42      	ldr	r3, [pc, #264]	@ (8010f58 <SendFrameOnChannel+0x144>)
 8010e50:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 8010e54:	77bb      	strb	r3, [r7, #30]
#endif /* LORAMAC_VERSION */

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8010e56:	4b40      	ldr	r3, [pc, #256]	@ (8010f58 <SendFrameOnChannel+0x144>)
 8010e58:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 8010e5c:	f107 020f 	add.w	r2, r7, #15
 8010e60:	f107 0110 	add.w	r1, r7, #16
 8010e64:	4b3e      	ldr	r3, [pc, #248]	@ (8010f60 <SendFrameOnChannel+0x14c>)
 8010e66:	f003 ff1b 	bl	8014ca0 <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010e6a:	4b3c      	ldr	r3, [pc, #240]	@ (8010f5c <SendFrameOnChannel+0x148>)
 8010e6c:	2201      	movs	r2, #1
 8010e6e:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010e72:	4b39      	ldr	r3, [pc, #228]	@ (8010f58 <SendFrameOnChannel+0x144>)
 8010e74:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8010e78:	b2da      	uxtb	r2, r3
 8010e7a:	4b38      	ldr	r3, [pc, #224]	@ (8010f5c <SendFrameOnChannel+0x148>)
 8010e7c:	f883 2446 	strb.w	r2, [r3, #1094]	@ 0x446
    MacCtx.McpsConfirm.TxPower = txPower;
 8010e80:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8010e84:	4b35      	ldr	r3, [pc, #212]	@ (8010f5c <SendFrameOnChannel+0x148>)
 8010e86:	f883 2447 	strb.w	r2, [r3, #1095]	@ 0x447
    MacCtx.McpsConfirm.Channel = channel;
 8010e8a:	79fb      	ldrb	r3, [r7, #7]
 8010e8c:	4a33      	ldr	r2, [pc, #204]	@ (8010f5c <SendFrameOnChannel+0x148>)
 8010e8e:	f8c2 3454 	str.w	r3, [r2, #1108]	@ 0x454

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8010e92:	4b32      	ldr	r3, [pc, #200]	@ (8010f5c <SendFrameOnChannel+0x148>)
 8010e94:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 8010e98:	4a30      	ldr	r2, [pc, #192]	@ (8010f5c <SendFrameOnChannel+0x148>)
 8010e9a:	f8c2 344c 	str.w	r3, [r2, #1100]	@ 0x44c
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8010e9e:	4b2f      	ldr	r3, [pc, #188]	@ (8010f5c <SendFrameOnChannel+0x148>)
 8010ea0:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 8010ea4:	4a2d      	ldr	r2, [pc, #180]	@ (8010f5c <SendFrameOnChannel+0x148>)
 8010ea6:	f8c2 345c 	str.w	r3, [r2, #1116]	@ 0x45c

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 8010eaa:	f001 ff34 	bl	8012d16 <LoRaMacClassBIsBeaconModeActive>
 8010eae:	4603      	mov	r3, r0
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d00b      	beq.n	8010ecc <SendFrameOnChannel+0xb8>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 8010eb4:	4b29      	ldr	r3, [pc, #164]	@ (8010f5c <SendFrameOnChannel+0x148>)
 8010eb6:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 8010eba:	4618      	mov	r0, r3
 8010ebc:	f001 ff96 	bl	8012dec <LoRaMacClassBIsUplinkCollision>
 8010ec0:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 8010ec2:	6a3b      	ldr	r3, [r7, #32]
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d001      	beq.n	8010ecc <SendFrameOnChannel+0xb8>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 8010ec8:	2310      	movs	r3, #16
 8010eca:	e040      	b.n	8010f4e <SendFrameOnChannel+0x13a>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8010ecc:	4b22      	ldr	r3, [pc, #136]	@ (8010f58 <SendFrameOnChannel+0x144>)
 8010ece:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8010ed2:	2b01      	cmp	r3, #1
 8010ed4:	d101      	bne.n	8010eda <SendFrameOnChannel+0xc6>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 8010ed6:	f001 ff93 	bl	8012e00 <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 8010eda:	f001 ff2d 	bl	8012d38 <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 8010ede:	4b1e      	ldr	r3, [pc, #120]	@ (8010f58 <SendFrameOnChannel+0x144>)
 8010ee0:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8010ee4:	b2db      	uxtb	r3, r3
 8010ee6:	4a1d      	ldr	r2, [pc, #116]	@ (8010f5c <SendFrameOnChannel+0x148>)
 8010ee8:	f892 241f 	ldrb.w	r2, [r2, #1055]	@ 0x41f
 8010eec:	4611      	mov	r1, r2
 8010eee:	4618      	mov	r0, r3
 8010ef0:	f7ff fc66 	bl	80107c0 <SecureFrame>
 8010ef4:	4603      	mov	r3, r0
 8010ef6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if( status != LORAMAC_STATUS_OK )
 8010efa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d002      	beq.n	8010f08 <SendFrameOnChannel+0xf4>
    {
        return status;
 8010f02:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010f06:	e022      	b.n	8010f4e <SendFrameOnChannel+0x13a>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8010f08:	4b14      	ldr	r3, [pc, #80]	@ (8010f5c <SendFrameOnChannel+0x148>)
 8010f0a:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8010f0e:	f043 0302 	orr.w	r3, r3, #2
 8010f12:	4a12      	ldr	r2, [pc, #72]	@ (8010f5c <SendFrameOnChannel+0x148>)
 8010f14:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
    if( MacCtx.NodeAckRequested == false )
    {
        MacCtx.ChannelsNbTransCounter++;
    }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.ChannelsNbTransCounter++;
 8010f18:	4b10      	ldr	r3, [pc, #64]	@ (8010f5c <SendFrameOnChannel+0x148>)
 8010f1a:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 8010f1e:	3301      	adds	r3, #1
 8010f20:	b2da      	uxtb	r2, r3
 8010f22:	4b0e      	ldr	r3, [pc, #56]	@ (8010f5c <SendFrameOnChannel+0x148>)
 8010f24:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 8010f28:	4b0c      	ldr	r3, [pc, #48]	@ (8010f5c <SendFrameOnChannel+0x148>)
 8010f2a:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 8010f2e:	4b0b      	ldr	r3, [pc, #44]	@ (8010f5c <SendFrameOnChannel+0x148>)
 8010f30:	f883 2449 	strb.w	r2, [r3, #1097]	@ 0x449
    MacCtx.ResponseTimeoutStartTime = 0;
 8010f34:	4b09      	ldr	r3, [pc, #36]	@ (8010f5c <SendFrameOnChannel+0x148>)
 8010f36:	2200      	movs	r2, #0
 8010f38:	f8c3 249c 	str.w	r2, [r3, #1180]	@ 0x49c
#endif /* LORAMAC_VERSION */

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8010f3c:	4b09      	ldr	r3, [pc, #36]	@ (8010f64 <SendFrameOnChannel+0x150>)
 8010f3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010f40:	4a06      	ldr	r2, [pc, #24]	@ (8010f5c <SendFrameOnChannel+0x148>)
 8010f42:	8812      	ldrh	r2, [r2, #0]
 8010f44:	b2d2      	uxtb	r2, r2
 8010f46:	4611      	mov	r1, r2
 8010f48:	4807      	ldr	r0, [pc, #28]	@ (8010f68 <SendFrameOnChannel+0x154>)
 8010f4a:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 8010f4c:	2300      	movs	r3, #0
}
 8010f4e:	4618      	mov	r0, r3
 8010f50:	3728      	adds	r7, #40	@ 0x28
 8010f52:	46bd      	mov	sp, r7
 8010f54:	bd80      	pop	{r7, pc}
 8010f56:	bf00      	nop
 8010f58:	20000df8 	.word	0x20000df8
 8010f5c:	200008d8 	.word	0x200008d8
 8010f60:	20000cf8 	.word	0x20000cf8
 8010f64:	0801f57c 	.word	0x0801f57c
 8010f68:	200008da 	.word	0x200008da

08010f6c <SetTxContinuousWave>:

    return LORAMAC_STATUS_OK;
}
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 8010f6c:	b580      	push	{r7, lr}
 8010f6e:	b082      	sub	sp, #8
 8010f70:	af00      	add	r7, sp, #0
 8010f72:	4603      	mov	r3, r0
 8010f74:	6039      	str	r1, [r7, #0]
 8010f76:	80fb      	strh	r3, [r7, #6]
 8010f78:	4613      	mov	r3, r2
 8010f7a:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8010f7c:	4b09      	ldr	r3, [pc, #36]	@ (8010fa4 <SetTxContinuousWave+0x38>)
 8010f7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010f80:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8010f84:	88fa      	ldrh	r2, [r7, #6]
 8010f86:	6838      	ldr	r0, [r7, #0]
 8010f88:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8010f8a:	4b07      	ldr	r3, [pc, #28]	@ (8010fa8 <SetTxContinuousWave+0x3c>)
 8010f8c:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8010f90:	f043 0302 	orr.w	r3, r3, #2
 8010f94:	4a04      	ldr	r2, [pc, #16]	@ (8010fa8 <SetTxContinuousWave+0x3c>)
 8010f96:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    return LORAMAC_STATUS_OK;
 8010f9a:	2300      	movs	r3, #0
}
 8010f9c:	4618      	mov	r0, r3
 8010f9e:	3708      	adds	r7, #8
 8010fa0:	46bd      	mov	sp, r7
 8010fa2:	bd80      	pop	{r7, pc}
 8010fa4:	0801f57c 	.word	0x0801f57c
 8010fa8:	200008d8 	.word	0x200008d8

08010fac <RestoreNvmData>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t RestoreNvmData( void )
{
 8010fac:	b580      	push	{r7, lr}
 8010fae:	b082      	sub	sp, #8
 8010fb0:	af00      	add	r7, sp, #0
    uint32_t crc = 0;
 8010fb2:	2300      	movs	r3, #0
 8010fb4:	607b      	str	r3, [r7, #4]

    // Status and parameter validation
    if( MacCtx.MacState != LORAMAC_STOPPED )
 8010fb6:	4b3e      	ldr	r3, [pc, #248]	@ (80110b0 <RestoreNvmData+0x104>)
 8010fb8:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8010fbc:	2b01      	cmp	r3, #1
 8010fbe:	d001      	beq.n	8010fc4 <RestoreNvmData+0x18>
    {
        return LORAMAC_STATUS_BUSY;
 8010fc0:	2301      	movs	r3, #1
 8010fc2:	e071      	b.n	80110a8 <RestoreNvmData+0xfc>
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 8010fc4:	2124      	movs	r1, #36	@ 0x24
 8010fc6:	483b      	ldr	r0, [pc, #236]	@ (80110b4 <RestoreNvmData+0x108>)
 8010fc8:	f006 f8ba 	bl	8017140 <Crc32>
 8010fcc:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.Crypto.Crc32 ) );
    if( crc != NvmBackup.Crypto.Crc32 )
 8010fce:	4b39      	ldr	r3, [pc, #228]	@ (80110b4 <RestoreNvmData+0x108>)
 8010fd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010fd2:	687a      	ldr	r2, [r7, #4]
 8010fd4:	429a      	cmp	r2, r3
 8010fd6:	d001      	beq.n	8010fdc <RestoreNvmData+0x30>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8010fd8:	2317      	movs	r3, #23
 8010fda:	e065      	b.n	80110a8 <RestoreNvmData+0xfc>
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 8010fdc:	2114      	movs	r1, #20
 8010fde:	4836      	ldr	r0, [pc, #216]	@ (80110b8 <RestoreNvmData+0x10c>)
 8010fe0:	f006 f8ae 	bl	8017140 <Crc32>
 8010fe4:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup1.Crc32 ) );
    if( crc != NvmBackup.MacGroup1.Crc32 )
 8010fe6:	4b33      	ldr	r3, [pc, #204]	@ (80110b4 <RestoreNvmData+0x108>)
 8010fe8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010fea:	687a      	ldr	r2, [r7, #4]
 8010fec:	429a      	cmp	r2, r3
 8010fee:	d001      	beq.n	8010ff4 <RestoreNvmData+0x48>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8010ff0:	2317      	movs	r3, #23
 8010ff2:	e059      	b.n	80110a8 <RestoreNvmData+0xfc>
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 8010ff4:	21e0      	movs	r1, #224	@ 0xe0
 8010ff6:	4831      	ldr	r0, [pc, #196]	@ (80110bc <RestoreNvmData+0x110>)
 8010ff8:	f006 f8a2 	bl	8017140 <Crc32>
 8010ffc:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup2.Crc32 ) );
    if( crc != NvmBackup.MacGroup2.Crc32 )
 8010ffe:	4b2d      	ldr	r3, [pc, #180]	@ (80110b4 <RestoreNvmData+0x108>)
 8011000:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8011004:	687a      	ldr	r2, [r7, #4]
 8011006:	429a      	cmp	r2, r3
 8011008:	d001      	beq.n	801100e <RestoreNvmData+0x62>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 801100a:	2317      	movs	r3, #23
 801100c:	e04c      	b.n	80110a8 <RestoreNvmData+0xfc>
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 801100e:	21bc      	movs	r1, #188	@ 0xbc
 8011010:	482b      	ldr	r0, [pc, #172]	@ (80110c0 <RestoreNvmData+0x114>)
 8011012:	f006 f895 	bl	8017140 <Crc32>
 8011016:	6078      	str	r0, [r7, #4]
                                                   sizeof( NvmBackup.SecureElement.Crc32 ) );
    if( crc != NvmBackup.SecureElement.Crc32 )
 8011018:	4b26      	ldr	r3, [pc, #152]	@ (80110b4 <RestoreNvmData+0x108>)
 801101a:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 801101e:	687a      	ldr	r2, [r7, #4]
 8011020:	429a      	cmp	r2, r3
 8011022:	d001      	beq.n	8011028 <RestoreNvmData+0x7c>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8011024:	2317      	movs	r3, #23
 8011026:	e03f      	b.n	80110a8 <RestoreNvmData+0xfc>
    }

    // Region
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 8011028:	2100      	movs	r1, #0
 801102a:	4826      	ldr	r0, [pc, #152]	@ (80110c4 <RestoreNvmData+0x118>)
 801102c:	f006 f888 	bl	8017140 <Crc32>
 8011030:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup1.Crc32 ) );
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 8011032:	4b20      	ldr	r3, [pc, #128]	@ (80110b4 <RestoreNvmData+0x108>)
 8011034:	f8d3 31e4 	ldr.w	r3, [r3, #484]	@ 0x1e4
 8011038:	687a      	ldr	r2, [r7, #4]
 801103a:	429a      	cmp	r2, r3
 801103c:	d001      	beq.n	8011042 <RestoreNvmData+0x96>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 801103e:	2317      	movs	r3, #23
 8011040:	e032      	b.n	80110a8 <RestoreNvmData+0xfc>
    }

    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 8011042:	2114      	movs	r1, #20
 8011044:	4820      	ldr	r0, [pc, #128]	@ (80110c8 <RestoreNvmData+0x11c>)
 8011046:	f006 f87b 	bl	8017140 <Crc32>
 801104a:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.ClassB.Crc32 ) );
    if( crc != NvmBackup.ClassB.Crc32 )
 801104c:	4b19      	ldr	r3, [pc, #100]	@ (80110b4 <RestoreNvmData+0x108>)
 801104e:	f8d3 3578 	ldr.w	r3, [r3, #1400]	@ 0x578
 8011052:	687a      	ldr	r2, [r7, #4]
 8011054:	429a      	cmp	r2, r3
 8011056:	d001      	beq.n	801105c <RestoreNvmData+0xb0>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8011058:	2317      	movs	r3, #23
 801105a:	e025      	b.n	80110a8 <RestoreNvmData+0xfc>
    }

    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 801105c:	f240 527c 	movw	r2, #1404	@ 0x57c
 8011060:	4914      	ldr	r1, [pc, #80]	@ (80110b4 <RestoreNvmData+0x108>)
 8011062:	481a      	ldr	r0, [pc, #104]	@ (80110cc <RestoreNvmData+0x120>)
 8011064:	f006 f817 	bl	8017096 <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 8011068:	f240 527c 	movw	r2, #1404	@ 0x57c
 801106c:	2100      	movs	r1, #0
 801106e:	4811      	ldr	r0, [pc, #68]	@ (80110b4 <RestoreNvmData+0x108>)
 8011070:	f006 f84c 	bl	801710c <memset1>

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8011074:	4b0e      	ldr	r3, [pc, #56]	@ (80110b0 <RestoreNvmData+0x104>)
 8011076:	f893 241f 	ldrb.w	r2, [r3, #1055]	@ 0x41f
 801107a:	4b0d      	ldr	r3, [pc, #52]	@ (80110b0 <RestoreNvmData+0x104>)
 801107c:	f883 23e8 	strb.w	r2, [r3, #1000]	@ 0x3e8
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8011080:	4b12      	ldr	r3, [pc, #72]	@ (80110cc <RestoreNvmData+0x120>)
 8011082:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011084:	4a0a      	ldr	r2, [pc, #40]	@ (80110b0 <RestoreNvmData+0x104>)
 8011086:	f8c2 33ec 	str.w	r3, [r2, #1004]	@ 0x3ec
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801108a:	4b10      	ldr	r3, [pc, #64]	@ (80110cc <RestoreNvmData+0x120>)
 801108c:	f893 2075 	ldrb.w	r2, [r3, #117]	@ 0x75
 8011090:	4b07      	ldr	r3, [pc, #28]	@ (80110b0 <RestoreNvmData+0x104>)
 8011092:	f883 23f8 	strb.w	r2, [r3, #1016]	@ 0x3f8
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8011096:	4b06      	ldr	r3, [pc, #24]	@ (80110b0 <RestoreNvmData+0x104>)
 8011098:	2201      	movs	r2, #1
 801109a:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 801109e:	4b04      	ldr	r3, [pc, #16]	@ (80110b0 <RestoreNvmData+0x104>)
 80110a0:	2202      	movs	r2, #2
 80110a2:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb

    return LORAMAC_STATUS_OK;
 80110a6:	2300      	movs	r3, #0
}
 80110a8:	4618      	mov	r0, r3
 80110aa:	3708      	adds	r7, #8
 80110ac:	46bd      	mov	sp, r7
 80110ae:	bd80      	pop	{r7, pc}
 80110b0:	200008d8 	.word	0x200008d8
 80110b4:	20001374 	.word	0x20001374
 80110b8:	2000139c 	.word	0x2000139c
 80110bc:	200013b4 	.word	0x200013b4
 80110c0:	20001498 	.word	0x20001498
 80110c4:	20001558 	.word	0x20001558
 80110c8:	200018d8 	.word	0x200018d8
 80110cc:	20000df8 	.word	0x20000df8

080110d0 <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 80110d0:	b480      	push	{r7}
 80110d2:	b083      	sub	sp, #12
 80110d4:	af00      	add	r7, sp, #0
 80110d6:	6078      	str	r0, [r7, #4]
 80110d8:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	2b00      	cmp	r3, #0
 80110de:	d002      	beq.n	80110e6 <DetermineFrameType+0x16>
 80110e0:	683b      	ldr	r3, [r7, #0]
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	d101      	bne.n	80110ea <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80110e6:	2303      	movs	r3, #3
 80110e8:	e03b      	b.n	8011162 <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	7b1b      	ldrb	r3, [r3, #12]
 80110ee:	f003 030f 	and.w	r3, r3, #15
 80110f2:	b2db      	uxtb	r3, r3
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	d008      	beq.n	801110a <DetermineFrameType+0x3a>
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80110fe:	2b00      	cmp	r3, #0
 8011100:	d003      	beq.n	801110a <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 8011102:	683b      	ldr	r3, [r7, #0]
 8011104:	2200      	movs	r2, #0
 8011106:	701a      	strb	r2, [r3, #0]
 8011108:	e02a      	b.n	8011160 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011110:	2b00      	cmp	r3, #0
 8011112:	d103      	bne.n	801111c <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 8011114:	683b      	ldr	r3, [r7, #0]
 8011116:	2201      	movs	r2, #1
 8011118:	701a      	strb	r2, [r3, #0]
 801111a:	e021      	b.n	8011160 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	7b1b      	ldrb	r3, [r3, #12]
 8011120:	f003 030f 	and.w	r3, r3, #15
 8011124:	b2db      	uxtb	r3, r3
 8011126:	2b00      	cmp	r3, #0
 8011128:	d108      	bne.n	801113c <DetermineFrameType+0x6c>
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011130:	2b00      	cmp	r3, #0
 8011132:	d103      	bne.n	801113c <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 8011134:	683b      	ldr	r3, [r7, #0]
 8011136:	2202      	movs	r2, #2
 8011138:	701a      	strb	r2, [r3, #0]
 801113a:	e011      	b.n	8011160 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	7b1b      	ldrb	r3, [r3, #12]
 8011140:	f003 030f 	and.w	r3, r3, #15
 8011144:	b2db      	uxtb	r3, r3
 8011146:	2b00      	cmp	r3, #0
 8011148:	d108      	bne.n	801115c <DetermineFrameType+0x8c>
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011150:	2b00      	cmp	r3, #0
 8011152:	d003      	beq.n	801115c <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 8011154:	683b      	ldr	r3, [r7, #0]
 8011156:	2203      	movs	r2, #3
 8011158:	701a      	strb	r2, [r3, #0]
 801115a:	e001      	b.n	8011160 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 801115c:	2318      	movs	r3, #24
 801115e:	e000      	b.n	8011162 <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 8011160:	2300      	movs	r3, #0
}
 8011162:	4618      	mov	r0, r3
 8011164:	370c      	adds	r7, #12
 8011166:	46bd      	mov	sp, r7
 8011168:	bc80      	pop	{r7}
 801116a:	4770      	bx	lr

0801116c <CheckRetrans>:
    }
    return false;
}
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool CheckRetrans( uint8_t counter, uint8_t limit )
{
 801116c:	b480      	push	{r7}
 801116e:	b083      	sub	sp, #12
 8011170:	af00      	add	r7, sp, #0
 8011172:	4603      	mov	r3, r0
 8011174:	460a      	mov	r2, r1
 8011176:	71fb      	strb	r3, [r7, #7]
 8011178:	4613      	mov	r3, r2
 801117a:	71bb      	strb	r3, [r7, #6]
    if( counter >= limit )
 801117c:	79fa      	ldrb	r2, [r7, #7]
 801117e:	79bb      	ldrb	r3, [r7, #6]
 8011180:	429a      	cmp	r2, r3
 8011182:	d301      	bcc.n	8011188 <CheckRetrans+0x1c>
    {
        return true;
 8011184:	2301      	movs	r3, #1
 8011186:	e000      	b.n	801118a <CheckRetrans+0x1e>
    }
    return false;
 8011188:	2300      	movs	r3, #0
}
 801118a:	4618      	mov	r0, r3
 801118c:	370c      	adds	r7, #12
 801118e:	46bd      	mov	sp, r7
 8011190:	bc80      	pop	{r7}
 8011192:	4770      	bx	lr

08011194 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 8011194:	b580      	push	{r7, lr}
 8011196:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 8011198:	4b12      	ldr	r3, [pc, #72]	@ (80111e4 <CheckRetransUnconfirmedUplink+0x50>)
 801119a:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 801119e:	4a12      	ldr	r2, [pc, #72]	@ (80111e8 <CheckRetransUnconfirmedUplink+0x54>)
 80111a0:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 80111a4:	4611      	mov	r1, r2
 80111a6:	4618      	mov	r0, r3
 80111a8:	f7ff ffe0 	bl	801116c <CheckRetrans>
 80111ac:	4603      	mov	r3, r0
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	d001      	beq.n	80111b6 <CheckRetransUnconfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 80111b2:	2301      	movs	r3, #1
 80111b4:	e014      	b.n	80111e0 <CheckRetransUnconfirmedUplink+0x4c>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 80111b6:	4b0b      	ldr	r3, [pc, #44]	@ (80111e4 <CheckRetransUnconfirmedUplink+0x50>)
 80111b8:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80111bc:	f003 0302 	and.w	r3, r3, #2
 80111c0:	b2db      	uxtb	r3, r3
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	d00b      	beq.n	80111de <CheckRetransUnconfirmedUplink+0x4a>
    {
        // Stop the retransmissions, if a valid downlink is received
        // a class A RX window. This holds also for class B and C.
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 80111c6:	4b07      	ldr	r3, [pc, #28]	@ (80111e4 <CheckRetransUnconfirmedUplink+0x50>)
 80111c8:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	d004      	beq.n	80111da <CheckRetransUnconfirmedUplink+0x46>
            ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 80111d0:	4b04      	ldr	r3, [pc, #16]	@ (80111e4 <CheckRetransUnconfirmedUplink+0x50>)
 80111d2:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 80111d6:	2b01      	cmp	r3, #1
 80111d8:	d101      	bne.n	80111de <CheckRetransUnconfirmedUplink+0x4a>
        {
            return true;
 80111da:	2301      	movs	r3, #1
 80111dc:	e000      	b.n	80111e0 <CheckRetransUnconfirmedUplink+0x4c>
        }
    }
    return false;
 80111de:	2300      	movs	r3, #0
}
 80111e0:	4618      	mov	r0, r3
 80111e2:	bd80      	pop	{r7, pc}
 80111e4:	200008d8 	.word	0x200008d8
 80111e8:	20000df8 	.word	0x20000df8

080111ec <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 80111ec:	b580      	push	{r7, lr}
 80111ee:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 80111f0:	4b10      	ldr	r3, [pc, #64]	@ (8011234 <CheckRetransConfirmedUplink+0x48>)
 80111f2:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 80111f6:	4a10      	ldr	r2, [pc, #64]	@ (8011238 <CheckRetransConfirmedUplink+0x4c>)
 80111f8:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 80111fc:	4611      	mov	r1, r2
 80111fe:	4618      	mov	r0, r3
 8011200:	f7ff ffb4 	bl	801116c <CheckRetrans>
 8011204:	4603      	mov	r3, r0
 8011206:	2b00      	cmp	r3, #0
 8011208:	d001      	beq.n	801120e <CheckRetransConfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 801120a:	2301      	movs	r3, #1
 801120c:	e00f      	b.n	801122e <CheckRetransConfirmedUplink+0x42>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 801120e:	4b09      	ldr	r3, [pc, #36]	@ (8011234 <CheckRetransConfirmedUplink+0x48>)
 8011210:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8011214:	f003 0302 	and.w	r3, r3, #2
 8011218:	b2db      	uxtb	r3, r3
 801121a:	2b00      	cmp	r3, #0
 801121c:	d006      	beq.n	801122c <CheckRetransConfirmedUplink+0x40>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 801121e:	4b05      	ldr	r3, [pc, #20]	@ (8011234 <CheckRetransConfirmedUplink+0x48>)
 8011220:	f893 3448 	ldrb.w	r3, [r3, #1096]	@ 0x448
 8011224:	2b00      	cmp	r3, #0
 8011226:	d001      	beq.n	801122c <CheckRetransConfirmedUplink+0x40>
        {
            return true;
 8011228:	2301      	movs	r3, #1
 801122a:	e000      	b.n	801122e <CheckRetransConfirmedUplink+0x42>
        }
    }
    return false;
 801122c:	2300      	movs	r3, #0
}
 801122e:	4618      	mov	r0, r3
 8011230:	bd80      	pop	{r7, pc}
 8011232:	bf00      	nop
 8011234:	200008d8 	.word	0x200008d8
 8011238:	20000df8 	.word	0x20000df8

0801123c <IncreaseAdrAckCounter>:

static uint32_t IncreaseAdrAckCounter( uint32_t counter )
{
 801123c:	b480      	push	{r7}
 801123e:	b083      	sub	sp, #12
 8011240:	af00      	add	r7, sp, #0
 8011242:	6078      	str	r0, [r7, #4]
    if( counter < ADR_ACK_COUNTER_MAX )
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	f1b3 3fff 	cmp.w	r3, #4294967295
 801124a:	d002      	beq.n	8011252 <IncreaseAdrAckCounter+0x16>
    {
        counter++;
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	3301      	adds	r3, #1
 8011250:	607b      	str	r3, [r7, #4]
    }
    return counter;
 8011252:	687b      	ldr	r3, [r7, #4]
}
 8011254:	4618      	mov	r0, r3
 8011256:	370c      	adds	r7, #12
 8011258:	46bd      	mov	sp, r7
 801125a:	bc80      	pop	{r7}
 801125c:	4770      	bx	lr
	...

08011260 <StopRetransmission>:
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 8011260:	b580      	push	{r7, lr}
 8011262:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8011264:	4b1a      	ldr	r3, [pc, #104]	@ (80112d0 <StopRetransmission+0x70>)
 8011266:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 801126a:	f003 0302 	and.w	r3, r3, #2
 801126e:	b2db      	uxtb	r3, r3
 8011270:	2b00      	cmp	r3, #0
 8011272:	d009      	beq.n	8011288 <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8011274:	4b16      	ldr	r3, [pc, #88]	@ (80112d0 <StopRetransmission+0x70>)
 8011276:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 801127a:	2b00      	cmp	r3, #0
 801127c:	d011      	beq.n	80112a2 <StopRetransmission+0x42>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 801127e:	4b14      	ldr	r3, [pc, #80]	@ (80112d0 <StopRetransmission+0x70>)
 8011280:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8011284:	2b01      	cmp	r3, #1
 8011286:	d00c      	beq.n	80112a2 <StopRetransmission+0x42>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8011288:	4b12      	ldr	r3, [pc, #72]	@ (80112d4 <StopRetransmission+0x74>)
 801128a:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 801128e:	2b00      	cmp	r3, #0
 8011290:	d007      	beq.n	80112a2 <StopRetransmission+0x42>
        {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
 8011292:	4b10      	ldr	r3, [pc, #64]	@ (80112d4 <StopRetransmission+0x74>)
 8011294:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011296:	4618      	mov	r0, r3
 8011298:	f7ff ffd0 	bl	801123c <IncreaseAdrAckCounter>
 801129c:	4603      	mov	r3, r0
 801129e:	4a0d      	ldr	r2, [pc, #52]	@ (80112d4 <StopRetransmission+0x74>)
 80112a0:	6293      	str	r3, [r2, #40]	@ 0x28
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 80112a2:	4b0b      	ldr	r3, [pc, #44]	@ (80112d0 <StopRetransmission+0x70>)
 80112a4:	2200      	movs	r2, #0
 80112a6:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
    MacCtx.NodeAckRequested = false;
 80112aa:	4b09      	ldr	r3, [pc, #36]	@ (80112d0 <StopRetransmission+0x70>)
 80112ac:	2200      	movs	r2, #0
 80112ae:	f883 241e 	strb.w	r2, [r3, #1054]	@ 0x41e
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RetransmitTimeoutRetry = false;
 80112b2:	4b07      	ldr	r3, [pc, #28]	@ (80112d0 <StopRetransmission+0x70>)
 80112b4:	2200      	movs	r2, #0
 80112b6:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80112ba:	4b05      	ldr	r3, [pc, #20]	@ (80112d0 <StopRetransmission+0x70>)
 80112bc:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80112c0:	f023 0302 	bic.w	r3, r3, #2
 80112c4:	4a02      	ldr	r2, [pc, #8]	@ (80112d0 <StopRetransmission+0x70>)
 80112c6:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    return true;
 80112ca:	2301      	movs	r3, #1
}
 80112cc:	4618      	mov	r0, r3
 80112ce:	bd80      	pop	{r7, pc}
 80112d0:	200008d8 	.word	0x200008d8
 80112d4:	20000df8 	.word	0x20000df8

080112d8 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 80112d8:	b580      	push	{r7, lr}
 80112da:	b082      	sub	sp, #8
 80112dc:	af00      	add	r7, sp, #0
 80112de:	4603      	mov	r3, r0
 80112e0:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 80112e2:	4b0b      	ldr	r3, [pc, #44]	@ (8011310 <CallNvmDataChangeCallback+0x38>)
 80112e4:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	d00c      	beq.n	8011306 <CallNvmDataChangeCallback+0x2e>
        ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 80112ec:	4b08      	ldr	r3, [pc, #32]	@ (8011310 <CallNvmDataChangeCallback+0x38>)
 80112ee:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 80112f2:	68db      	ldr	r3, [r3, #12]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d006      	beq.n	8011306 <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 80112f8:	4b05      	ldr	r3, [pc, #20]	@ (8011310 <CallNvmDataChangeCallback+0x38>)
 80112fa:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 80112fe:	68db      	ldr	r3, [r3, #12]
 8011300:	88fa      	ldrh	r2, [r7, #6]
 8011302:	4610      	mov	r0, r2
 8011304:	4798      	blx	r3
    }
}
 8011306:	bf00      	nop
 8011308:	3708      	adds	r7, #8
 801130a:	46bd      	mov	sp, r7
 801130c:	bd80      	pop	{r7, pc}
 801130e:	bf00      	nop
 8011310:	200008d8 	.word	0x200008d8

08011314 <IsRequestPending>:
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
}
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
 8011314:	b480      	push	{r7}
 8011316:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8011318:	4b0b      	ldr	r3, [pc, #44]	@ (8011348 <IsRequestPending+0x34>)
 801131a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 801131e:	f003 0304 	and.w	r3, r3, #4
 8011322:	b2db      	uxtb	r3, r3
 8011324:	2b00      	cmp	r3, #0
 8011326:	d107      	bne.n	8011338 <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 8011328:	4b07      	ldr	r3, [pc, #28]	@ (8011348 <IsRequestPending+0x34>)
 801132a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 801132e:	f003 0301 	and.w	r3, r3, #1
 8011332:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8011334:	2b00      	cmp	r3, #0
 8011336:	d001      	beq.n	801133c <IsRequestPending+0x28>
    {
        return 1;
 8011338:	2301      	movs	r3, #1
 801133a:	e000      	b.n	801133e <IsRequestPending+0x2a>
    }
    return 0;
 801133c:	2300      	movs	r3, #0
}
 801133e:	4618      	mov	r0, r3
 8011340:	46bd      	mov	sp, r7
 8011342:	bc80      	pop	{r7}
 8011344:	4770      	bx	lr
 8011346:	bf00      	nop
 8011348:	200008d8 	.word	0x200008d8

0801134c <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 801134c:	b590      	push	{r4, r7, lr}
 801134e:	b091      	sub	sp, #68	@ 0x44
 8011350:	af02      	add	r7, sp, #8
 8011352:	6178      	str	r0, [r7, #20]
 8011354:	6139      	str	r1, [r7, #16]
 8011356:	4613      	mov	r3, r2
 8011358:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 801135a:	697b      	ldr	r3, [r7, #20]
 801135c:	2b00      	cmp	r3, #0
 801135e:	d002      	beq.n	8011366 <LoRaMacInitialization+0x1a>
 8011360:	693b      	ldr	r3, [r7, #16]
 8011362:	2b00      	cmp	r3, #0
 8011364:	d101      	bne.n	801136a <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011366:	2303      	movs	r3, #3
 8011368:	e27c      	b.n	8011864 <LoRaMacInitialization+0x518>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 801136a:	697b      	ldr	r3, [r7, #20]
 801136c:	681b      	ldr	r3, [r3, #0]
 801136e:	2b00      	cmp	r3, #0
 8011370:	d00b      	beq.n	801138a <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 8011372:	697b      	ldr	r3, [r7, #20]
 8011374:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8011376:	2b00      	cmp	r3, #0
 8011378:	d007      	beq.n	801138a <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 801137a:	697b      	ldr	r3, [r7, #20]
 801137c:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 801137e:	2b00      	cmp	r3, #0
 8011380:	d003      	beq.n	801138a <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 8011382:	697b      	ldr	r3, [r7, #20]
 8011384:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 8011386:	2b00      	cmp	r3, #0
 8011388:	d101      	bne.n	801138e <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801138a:	2303      	movs	r3, #3
 801138c:	e26a      	b.n	8011864 <LoRaMacInitialization+0x518>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 801138e:	7bfb      	ldrb	r3, [r7, #15]
 8011390:	4618      	mov	r0, r3
 8011392:	f003 fbcf 	bl	8014b34 <RegionIsActive>
 8011396:	4603      	mov	r3, r0
 8011398:	f083 0301 	eor.w	r3, r3, #1
 801139c:	b2db      	uxtb	r3, r3
 801139e:	2b00      	cmp	r3, #0
 80113a0:	d001      	beq.n	80113a6 <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 80113a2:	2309      	movs	r3, #9
 80113a4:	e25e      	b.n	8011864 <LoRaMacInitialization+0x518>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 80113a6:	6978      	ldr	r0, [r7, #20]
 80113a8:	f002 f884 	bl	80134b4 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 80113ac:	f240 527c 	movw	r2, #1404	@ 0x57c
 80113b0:	2100      	movs	r1, #0
 80113b2:	48c7      	ldr	r0, [pc, #796]	@ (80116d0 <LoRaMacInitialization+0x384>)
 80113b4:	f005 feaa 	bl	801710c <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 80113b8:	f44f 62a4 	mov.w	r2, #1312	@ 0x520
 80113bc:	2100      	movs	r1, #0
 80113be:	48c5      	ldr	r0, [pc, #788]	@ (80116d4 <LoRaMacInitialization+0x388>)
 80113c0:	f005 fea4 	bl	801710c <memset1>
    // Set non zero variables to its default value
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetries = 1;
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 80113c4:	4ac2      	ldr	r2, [pc, #776]	@ (80116d0 <LoRaMacInitialization+0x384>)
 80113c6:	7bfb      	ldrb	r3, [r7, #15]
 80113c8:	f882 3040 	strb.w	r3, [r2, #64]	@ 0x40
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 80113cc:	4bc0      	ldr	r3, [pc, #768]	@ (80116d0 <LoRaMacInitialization+0x384>)
 80113ce:	2200      	movs	r2, #0
 80113d0:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
    Nvm.MacGroup2.MacParams.RepeaterSupport = false; /* ST_WORKAROUND: Keep repeater feature */
 80113d4:	4bbe      	ldr	r3, [pc, #760]	@ (80116d0 <LoRaMacInitialization+0x384>)
 80113d6:	2200      	movs	r2, #0
 80113d8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 80113dc:	4bbc      	ldr	r3, [pc, #752]	@ (80116d0 <LoRaMacInitialization+0x384>)
 80113de:	4abe      	ldr	r2, [pc, #760]	@ (80116d8 <LoRaMacInitialization+0x38c>)
 80113e0:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 80113e4:	2300      	movs	r3, #0
 80113e6:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    params.NvmGroup1 = &Nvm.RegionGroup1;
 80113ea:	4bbc      	ldr	r3, [pc, #752]	@ (80116dc <LoRaMacInitialization+0x390>)
 80113ec:	61fb      	str	r3, [r7, #28]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 80113ee:	4bbc      	ldr	r3, [pc, #752]	@ (80116e0 <LoRaMacInitialization+0x394>)
 80113f0:	623b      	str	r3, [r7, #32]
    params.Bands = &RegionBands;
 80113f2:	4bbc      	ldr	r3, [pc, #752]	@ (80116e4 <LoRaMacInitialization+0x398>)
 80113f4:	627b      	str	r3, [r7, #36]	@ 0x24
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 80113f6:	4bb6      	ldr	r3, [pc, #728]	@ (80116d0 <LoRaMacInitialization+0x384>)
 80113f8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80113fc:	f107 021c 	add.w	r2, r7, #28
 8011400:	4611      	mov	r1, r2
 8011402:	4618      	mov	r0, r3
 8011404:	f003 fbcf 	bl	8014ba6 <RegionInitDefaults>
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8011408:	230f      	movs	r3, #15
 801140a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801140e:	4bb0      	ldr	r3, [pc, #704]	@ (80116d0 <LoRaMacInitialization+0x384>)
 8011410:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011414:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011418:	4611      	mov	r1, r2
 801141a:	4618      	mov	r0, r3
 801141c:	f003 fb9a 	bl	8014b54 <RegionGetPhyParam>
 8011420:	4603      	mov	r3, r0
 8011422:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 8011424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011426:	2b00      	cmp	r3, #0
 8011428:	bf14      	ite	ne
 801142a:	2301      	movne	r3, #1
 801142c:	2300      	moveq	r3, #0
 801142e:	b2da      	uxtb	r2, r3
 8011430:	4ba7      	ldr	r3, [pc, #668]	@ (80116d0 <LoRaMacInitialization+0x384>)
 8011432:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108

    getPhy.Attribute = PHY_DEF_TX_POWER;
 8011436:	230a      	movs	r3, #10
 8011438:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801143c:	4ba4      	ldr	r3, [pc, #656]	@ (80116d0 <LoRaMacInitialization+0x384>)
 801143e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011442:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011446:	4611      	mov	r1, r2
 8011448:	4618      	mov	r0, r3
 801144a:	f003 fb83 	bl	8014b54 <RegionGetPhyParam>
 801144e:	4603      	mov	r3, r0
 8011450:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 8011452:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011454:	b25a      	sxtb	r2, r3
 8011456:	4b9e      	ldr	r3, [pc, #632]	@ (80116d0 <LoRaMacInitialization+0x384>)
 8011458:	f883 20cc 	strb.w	r2, [r3, #204]	@ 0xcc

    getPhy.Attribute = PHY_DEF_TX_DR;
 801145c:	2306      	movs	r3, #6
 801145e:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011462:	4b9b      	ldr	r3, [pc, #620]	@ (80116d0 <LoRaMacInitialization+0x384>)
 8011464:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011468:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801146c:	4611      	mov	r1, r2
 801146e:	4618      	mov	r0, r3
 8011470:	f003 fb70 	bl	8014b54 <RegionGetPhyParam>
 8011474:	4603      	mov	r3, r0
 8011476:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 8011478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801147a:	b25a      	sxtb	r2, r3
 801147c:	4b94      	ldr	r3, [pc, #592]	@ (80116d0 <LoRaMacInitialization+0x384>)
 801147e:	f883 20cd 	strb.w	r2, [r3, #205]	@ 0xcd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 8011482:	2310      	movs	r3, #16
 8011484:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011488:	4b91      	ldr	r3, [pc, #580]	@ (80116d0 <LoRaMacInitialization+0x384>)
 801148a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801148e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011492:	4611      	mov	r1, r2
 8011494:	4618      	mov	r0, r3
 8011496:	f003 fb5d 	bl	8014b54 <RegionGetPhyParam>
 801149a:	4603      	mov	r3, r0
 801149c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 801149e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114a0:	4a8b      	ldr	r2, [pc, #556]	@ (80116d0 <LoRaMacInitialization+0x384>)
 80114a2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 80114a6:	2311      	movs	r3, #17
 80114a8:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80114ac:	4b88      	ldr	r3, [pc, #544]	@ (80116d0 <LoRaMacInitialization+0x384>)
 80114ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80114b2:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80114b6:	4611      	mov	r1, r2
 80114b8:	4618      	mov	r0, r3
 80114ba:	f003 fb4b 	bl	8014b54 <RegionGetPhyParam>
 80114be:	4603      	mov	r3, r0
 80114c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 80114c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114c4:	4a82      	ldr	r2, [pc, #520]	@ (80116d0 <LoRaMacInitialization+0x384>)
 80114c6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 80114ca:	2312      	movs	r3, #18
 80114cc:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80114d0:	4b7f      	ldr	r3, [pc, #508]	@ (80116d0 <LoRaMacInitialization+0x384>)
 80114d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80114d6:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80114da:	4611      	mov	r1, r2
 80114dc:	4618      	mov	r0, r3
 80114de:	f003 fb39 	bl	8014b54 <RegionGetPhyParam>
 80114e2:	4603      	mov	r3, r0
 80114e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 80114e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114e8:	4a79      	ldr	r2, [pc, #484]	@ (80116d0 <LoRaMacInitialization+0x384>)
 80114ea:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 80114ee:	2313      	movs	r3, #19
 80114f0:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80114f4:	4b76      	ldr	r3, [pc, #472]	@ (80116d0 <LoRaMacInitialization+0x384>)
 80114f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80114fa:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80114fe:	4611      	mov	r1, r2
 8011500:	4618      	mov	r0, r3
 8011502:	f003 fb27 	bl	8014b54 <RegionGetPhyParam>
 8011506:	4603      	mov	r3, r0
 8011508:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 801150a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801150c:	4a70      	ldr	r2, [pc, #448]	@ (80116d0 <LoRaMacInitialization+0x384>)
 801150e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 8011512:	2314      	movs	r3, #20
 8011514:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011518:	4b6d      	ldr	r3, [pc, #436]	@ (80116d0 <LoRaMacInitialization+0x384>)
 801151a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801151e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011522:	4611      	mov	r1, r2
 8011524:	4618      	mov	r0, r3
 8011526:	f003 fb15 	bl	8014b54 <RegionGetPhyParam>
 801152a:	4603      	mov	r3, r0
 801152c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 801152e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011530:	4a67      	ldr	r2, [pc, #412]	@ (80116d0 <LoRaMacInitialization+0x384>)
 8011532:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 8011536:	2316      	movs	r3, #22
 8011538:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801153c:	4b64      	ldr	r3, [pc, #400]	@ (80116d0 <LoRaMacInitialization+0x384>)
 801153e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011542:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011546:	4611      	mov	r1, r2
 8011548:	4618      	mov	r0, r3
 801154a:	f003 fb03 	bl	8014b54 <RegionGetPhyParam>
 801154e:	4603      	mov	r3, r0
 8011550:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8011552:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011554:	b2da      	uxtb	r2, r3
 8011556:	4b5e      	ldr	r3, [pc, #376]	@ (80116d0 <LoRaMacInitialization+0x384>)
 8011558:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 801155c:	2317      	movs	r3, #23
 801155e:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011562:	4b5b      	ldr	r3, [pc, #364]	@ (80116d0 <LoRaMacInitialization+0x384>)
 8011564:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011568:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801156c:	4611      	mov	r1, r2
 801156e:	4618      	mov	r0, r3
 8011570:	f003 faf0 	bl	8014b54 <RegionGetPhyParam>
 8011574:	4603      	mov	r3, r0
 8011576:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8011578:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801157a:	4a55      	ldr	r2, [pc, #340]	@ (80116d0 <LoRaMacInitialization+0x384>)
 801157c:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 8011580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011582:	4a53      	ldr	r2, [pc, #332]	@ (80116d0 <LoRaMacInitialization+0x384>)
 8011584:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

    getPhy.Attribute = PHY_DEF_RX2_DR;
 8011588:	2318      	movs	r3, #24
 801158a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801158e:	4b50      	ldr	r3, [pc, #320]	@ (80116d0 <LoRaMacInitialization+0x384>)
 8011590:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011594:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011598:	4611      	mov	r1, r2
 801159a:	4618      	mov	r0, r3
 801159c:	f003 fada 	bl	8014b54 <RegionGetPhyParam>
 80115a0:	4603      	mov	r3, r0
 80115a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 80115a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115a6:	b2da      	uxtb	r2, r3
 80115a8:	4b49      	ldr	r3, [pc, #292]	@ (80116d0 <LoRaMacInitialization+0x384>)
 80115aa:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 80115ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115b0:	b2da      	uxtb	r2, r3
 80115b2:	4b47      	ldr	r3, [pc, #284]	@ (80116d0 <LoRaMacInitialization+0x384>)
 80115b4:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 80115b8:	231d      	movs	r3, #29
 80115ba:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80115be:	4b44      	ldr	r3, [pc, #272]	@ (80116d0 <LoRaMacInitialization+0x384>)
 80115c0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80115c4:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80115c8:	4611      	mov	r1, r2
 80115ca:	4618      	mov	r0, r3
 80115cc:	f003 fac2 	bl	8014b54 <RegionGetPhyParam>
 80115d0:	4603      	mov	r3, r0
 80115d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 80115d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115d6:	b2da      	uxtb	r2, r3
 80115d8:	4b3d      	ldr	r3, [pc, #244]	@ (80116d0 <LoRaMacInitialization+0x384>)
 80115da:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 80115de:	231e      	movs	r3, #30
 80115e0:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80115e4:	4b3a      	ldr	r3, [pc, #232]	@ (80116d0 <LoRaMacInitialization+0x384>)
 80115e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80115ea:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80115ee:	4611      	mov	r1, r2
 80115f0:	4618      	mov	r0, r3
 80115f2:	f003 faaf 	bl	8014b54 <RegionGetPhyParam>
 80115f6:	4603      	mov	r3, r0
 80115f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 80115fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115fc:	b2da      	uxtb	r2, r3
 80115fe:	4b34      	ldr	r3, [pc, #208]	@ (80116d0 <LoRaMacInitialization+0x384>)
 8011600:	f883 20b9 	strb.w	r2, [r3, #185]	@ 0xb9

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8011604:	231f      	movs	r3, #31
 8011606:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801160a:	4b31      	ldr	r3, [pc, #196]	@ (80116d0 <LoRaMacInitialization+0x384>)
 801160c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011610:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011614:	4611      	mov	r1, r2
 8011616:	4618      	mov	r0, r3
 8011618:	f003 fa9c 	bl	8014b54 <RegionGetPhyParam>
 801161c:	4603      	mov	r3, r0
 801161e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 8011620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011622:	4a2b      	ldr	r2, [pc, #172]	@ (80116d0 <LoRaMacInitialization+0x384>)
 8011624:	f8c2 30bc 	str.w	r3, [r2, #188]	@ 0xbc

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8011628:	2320      	movs	r3, #32
 801162a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801162e:	4b28      	ldr	r3, [pc, #160]	@ (80116d0 <LoRaMacInitialization+0x384>)
 8011630:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011634:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011638:	4611      	mov	r1, r2
 801163a:	4618      	mov	r0, r3
 801163c:	f003 fa8a 	bl	8014b54 <RegionGetPhyParam>
 8011640:	4603      	mov	r3, r0
 8011642:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 8011644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011646:	4a22      	ldr	r2, [pc, #136]	@ (80116d0 <LoRaMacInitialization+0x384>)
 8011648:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 801164c:	230b      	movs	r3, #11
 801164e:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011652:	4b1f      	ldr	r3, [pc, #124]	@ (80116d0 <LoRaMacInitialization+0x384>)
 8011654:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011658:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801165c:	4611      	mov	r1, r2
 801165e:	4618      	mov	r0, r3
 8011660:	f003 fa78 	bl	8014b54 <RegionGetPhyParam>
 8011664:	4603      	mov	r3, r0
 8011666:	62fb      	str	r3, [r7, #44]	@ 0x2c
    MacCtx.AdrAckLimit = phyParam.Value;
 8011668:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801166a:	b29a      	uxth	r2, r3
 801166c:	4b19      	ldr	r3, [pc, #100]	@ (80116d4 <LoRaMacInitialization+0x388>)
 801166e:	f8a3 2400 	strh.w	r2, [r3, #1024]	@ 0x400

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 8011672:	230c      	movs	r3, #12
 8011674:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011678:	4b15      	ldr	r3, [pc, #84]	@ (80116d0 <LoRaMacInitialization+0x384>)
 801167a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801167e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011682:	4611      	mov	r1, r2
 8011684:	4618      	mov	r0, r3
 8011686:	f003 fa65 	bl	8014b54 <RegionGetPhyParam>
 801168a:	4603      	mov	r3, r0
 801168c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    MacCtx.AdrAckDelay = phyParam.Value;
 801168e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011690:	b29a      	uxth	r2, r3
 8011692:	4b10      	ldr	r3, [pc, #64]	@ (80116d4 <LoRaMacInitialization+0x388>)
 8011694:	f8a3 2402 	strh.w	r2, [r3, #1026]	@ 0x402

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 8011698:	4b0d      	ldr	r3, [pc, #52]	@ (80116d0 <LoRaMacInitialization+0x384>)
 801169a:	2201      	movs	r2, #1
 801169c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 80116a0:	4b0b      	ldr	r3, [pc, #44]	@ (80116d0 <LoRaMacInitialization+0x384>)
 80116a2:	220a      	movs	r2, #10
 80116a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 80116a8:	4b09      	ldr	r3, [pc, #36]	@ (80116d0 <LoRaMacInitialization+0x384>)
 80116aa:	2206      	movs	r2, #6
 80116ac:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 80116b0:	4b07      	ldr	r3, [pc, #28]	@ (80116d0 <LoRaMacInitialization+0x384>)
 80116b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80116b6:	4a06      	ldr	r2, [pc, #24]	@ (80116d0 <LoRaMacInitialization+0x384>)
 80116b8:	6453      	str	r3, [r2, #68]	@ 0x44
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 80116ba:	4b05      	ldr	r3, [pc, #20]	@ (80116d0 <LoRaMacInitialization+0x384>)
 80116bc:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 80116c0:	4b03      	ldr	r3, [pc, #12]	@ (80116d0 <LoRaMacInitialization+0x384>)
 80116c2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 80116c6:	4b02      	ldr	r3, [pc, #8]	@ (80116d0 <LoRaMacInitialization+0x384>)
 80116c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80116cc:	e00c      	b.n	80116e8 <LoRaMacInitialization+0x39c>
 80116ce:	bf00      	nop
 80116d0:	20000df8 	.word	0x20000df8
 80116d4:	200008d8 	.word	0x200008d8
 80116d8:	01000400 	.word	0x01000400
 80116dc:	20000fdc 	.word	0x20000fdc
 80116e0:	20000fe0 	.word	0x20000fe0
 80116e4:	200018f0 	.word	0x200018f0
 80116e8:	4a60      	ldr	r2, [pc, #384]	@ (801186c <LoRaMacInitialization+0x520>)
 80116ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 80116ec:	4b5f      	ldr	r3, [pc, #380]	@ (801186c <LoRaMacInitialization+0x520>)
 80116ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80116f2:	4a5e      	ldr	r2, [pc, #376]	@ (801186c <LoRaMacInitialization+0x520>)
 80116f4:	6513      	str	r3, [r2, #80]	@ 0x50
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 80116f6:	4b5d      	ldr	r3, [pc, #372]	@ (801186c <LoRaMacInitialization+0x520>)
 80116f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80116fc:	4a5b      	ldr	r2, [pc, #364]	@ (801186c <LoRaMacInitialization+0x520>)
 80116fe:	6553      	str	r3, [r2, #84]	@ 0x54
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 8011700:	4b5a      	ldr	r3, [pc, #360]	@ (801186c <LoRaMacInitialization+0x520>)
 8011702:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8011706:	4a59      	ldr	r2, [pc, #356]	@ (801186c <LoRaMacInitialization+0x520>)
 8011708:	6593      	str	r3, [r2, #88]	@ 0x58
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 801170a:	4b58      	ldr	r3, [pc, #352]	@ (801186c <LoRaMacInitialization+0x520>)
 801170c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8011710:	4a56      	ldr	r2, [pc, #344]	@ (801186c <LoRaMacInitialization+0x520>)
 8011712:	65d3      	str	r3, [r2, #92]	@ 0x5c
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 8011714:	4b55      	ldr	r3, [pc, #340]	@ (801186c <LoRaMacInitialization+0x520>)
 8011716:	f893 20a4 	ldrb.w	r2, [r3, #164]	@ 0xa4
 801171a:	4b54      	ldr	r3, [pc, #336]	@ (801186c <LoRaMacInitialization+0x520>)
 801171c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    params.NvmGroup1 = &Nvm.RegionGroup1;
    params.NvmGroup2 = &Nvm.RegionGroup2;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
 8011720:	4b52      	ldr	r3, [pc, #328]	@ (801186c <LoRaMacInitialization+0x520>)
 8011722:	2201      	movs	r2, #1
 8011724:	f883 210b 	strb.w	r2, [r3, #267]	@ 0x10b
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 8011728:	4a51      	ldr	r2, [pc, #324]	@ (8011870 <LoRaMacInitialization+0x524>)
 801172a:	693b      	ldr	r3, [r7, #16]
 801172c:	f8c2 3348 	str.w	r3, [r2, #840]	@ 0x348
    ResetMacParameters( );
 8011730:	f7ff f8d6 	bl	80108e0 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 8011734:	4b4d      	ldr	r3, [pc, #308]	@ (801186c <LoRaMacInitialization+0x520>)
 8011736:	2201      	movs	r2, #1
 8011738:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105

    MacCtx.MacPrimitives = primitives;
 801173c:	4a4c      	ldr	r2, [pc, #304]	@ (8011870 <LoRaMacInitialization+0x524>)
 801173e:	697b      	ldr	r3, [r7, #20]
 8011740:	f8c2 3344 	str.w	r3, [r2, #836]	@ 0x344
    MacCtx.MacFlags.Value = 0;
 8011744:	4b4a      	ldr	r3, [pc, #296]	@ (8011870 <LoRaMacInitialization+0x524>)
 8011746:	2200      	movs	r2, #0
 8011748:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    MacCtx.MacState = LORAMAC_STOPPED;
 801174c:	4b48      	ldr	r3, [pc, #288]	@ (8011870 <LoRaMacInitialization+0x524>)
 801174e:	2201      	movs	r2, #1
 8011750:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 8011754:	4b45      	ldr	r3, [pc, #276]	@ (801186c <LoRaMacInitialization+0x520>)
 8011756:	2200      	movs	r2, #0
 8011758:	62da      	str	r2, [r3, #44]	@ 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 801175a:	4b44      	ldr	r3, [pc, #272]	@ (801186c <LoRaMacInitialization+0x520>)
 801175c:	2200      	movs	r2, #0
 801175e:	631a      	str	r2, [r3, #48]	@ 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8011760:	2300      	movs	r3, #0
 8011762:	9300      	str	r3, [sp, #0]
 8011764:	4b43      	ldr	r3, [pc, #268]	@ (8011874 <LoRaMacInitialization+0x528>)
 8011766:	2200      	movs	r2, #0
 8011768:	f04f 31ff 	mov.w	r1, #4294967295
 801176c:	4842      	ldr	r0, [pc, #264]	@ (8011878 <LoRaMacInitialization+0x52c>)
 801176e:	f009 fd3b 	bl	801b1e8 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 8011772:	2300      	movs	r3, #0
 8011774:	9300      	str	r3, [sp, #0]
 8011776:	4b41      	ldr	r3, [pc, #260]	@ (801187c <LoRaMacInitialization+0x530>)
 8011778:	2200      	movs	r2, #0
 801177a:	f04f 31ff 	mov.w	r1, #4294967295
 801177e:	4840      	ldr	r0, [pc, #256]	@ (8011880 <LoRaMacInitialization+0x534>)
 8011780:	f009 fd32 	bl	801b1e8 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 8011784:	2300      	movs	r3, #0
 8011786:	9300      	str	r3, [sp, #0]
 8011788:	4b3e      	ldr	r3, [pc, #248]	@ (8011884 <LoRaMacInitialization+0x538>)
 801178a:	2200      	movs	r2, #0
 801178c:	f04f 31ff 	mov.w	r1, #4294967295
 8011790:	483d      	ldr	r0, [pc, #244]	@ (8011888 <LoRaMacInitialization+0x53c>)
 8011792:	f009 fd29 	bl	801b1e8 <UTIL_TIMER_Create>
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
 8011796:	2300      	movs	r3, #0
 8011798:	9300      	str	r3, [sp, #0]
 801179a:	4b3c      	ldr	r3, [pc, #240]	@ (801188c <LoRaMacInitialization+0x540>)
 801179c:	2200      	movs	r2, #0
 801179e:	f04f 31ff 	mov.w	r1, #4294967295
 80117a2:	483b      	ldr	r0, [pc, #236]	@ (8011890 <LoRaMacInitialization+0x544>)
 80117a4:	f009 fd20 	bl	801b1e8 <UTIL_TIMER_Create>
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 80117a8:	4c30      	ldr	r4, [pc, #192]	@ (801186c <LoRaMacInitialization+0x520>)
 80117aa:	463b      	mov	r3, r7
 80117ac:	4618      	mov	r0, r3
 80117ae:	f009 f891 	bl	801a8d4 <SysTimeGetMcuTime>
 80117b2:	f504 7388 	add.w	r3, r4, #272	@ 0x110
 80117b6:	463a      	mov	r2, r7
 80117b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80117bc:	e883 0003 	stmia.w	r3, {r0, r1}

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
 80117c0:	4b34      	ldr	r3, [pc, #208]	@ (8011894 <LoRaMacInitialization+0x548>)
 80117c2:	2200      	movs	r2, #0
 80117c4:	601a      	str	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 80117c6:	4b2a      	ldr	r3, [pc, #168]	@ (8011870 <LoRaMacInitialization+0x524>)
 80117c8:	4a33      	ldr	r2, [pc, #204]	@ (8011898 <LoRaMacInitialization+0x54c>)
 80117ca:	f8c3 234c 	str.w	r2, [r3, #844]	@ 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 80117ce:	4b28      	ldr	r3, [pc, #160]	@ (8011870 <LoRaMacInitialization+0x524>)
 80117d0:	4a32      	ldr	r2, [pc, #200]	@ (801189c <LoRaMacInitialization+0x550>)
 80117d2:	f8c3 2354 	str.w	r2, [r3, #852]	@ 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 80117d6:	4b26      	ldr	r3, [pc, #152]	@ (8011870 <LoRaMacInitialization+0x524>)
 80117d8:	4a31      	ldr	r2, [pc, #196]	@ (80118a0 <LoRaMacInitialization+0x554>)
 80117da:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 80117de:	4b24      	ldr	r3, [pc, #144]	@ (8011870 <LoRaMacInitialization+0x524>)
 80117e0:	4a30      	ldr	r2, [pc, #192]	@ (80118a4 <LoRaMacInitialization+0x558>)
 80117e2:	f8c3 2350 	str.w	r2, [r3, #848]	@ 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 80117e6:	4b22      	ldr	r3, [pc, #136]	@ (8011870 <LoRaMacInitialization+0x524>)
 80117e8:	4a2f      	ldr	r2, [pc, #188]	@ (80118a8 <LoRaMacInitialization+0x55c>)
 80117ea:	f8c3 2358 	str.w	r2, [r3, #856]	@ 0x358
    Radio.Init( &MacCtx.RadioEvents );
 80117ee:	4b2f      	ldr	r3, [pc, #188]	@ (80118ac <LoRaMacInitialization+0x560>)
 80117f0:	681b      	ldr	r3, [r3, #0]
 80117f2:	482f      	ldr	r0, [pc, #188]	@ (80118b0 <LoRaMacInitialization+0x564>)
 80117f4:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement, callbacks->GetUniqueId ) != SECURE_ELEMENT_SUCCESS ) /* ST_WORKAROUND: Add unique ID callback as input parameter */
 80117f6:	693b      	ldr	r3, [r7, #16]
 80117f8:	689b      	ldr	r3, [r3, #8]
 80117fa:	4619      	mov	r1, r3
 80117fc:	482d      	ldr	r0, [pc, #180]	@ (80118b4 <LoRaMacInitialization+0x568>)
 80117fe:	f7fa fb87 	bl	800bf10 <SecureElementInit>
 8011802:	4603      	mov	r3, r0
 8011804:	2b00      	cmp	r3, #0
 8011806:	d001      	beq.n	801180c <LoRaMacInitialization+0x4c0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8011808:	2311      	movs	r3, #17
 801180a:	e02b      	b.n	8011864 <LoRaMacInitialization+0x518>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 801180c:	4817      	ldr	r0, [pc, #92]	@ (801186c <LoRaMacInitialization+0x520>)
 801180e:	f002 faf9 	bl	8013e04 <LoRaMacCryptoInit>
 8011812:	4603      	mov	r3, r0
 8011814:	2b00      	cmp	r3, #0
 8011816:	d001      	beq.n	801181c <LoRaMacInitialization+0x4d0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8011818:	2311      	movs	r3, #17
 801181a:	e023      	b.n	8011864 <LoRaMacInitialization+0x518>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 801181c:	f001 fc1c 	bl	8013058 <LoRaMacCommandsInit>
 8011820:	4603      	mov	r3, r0
 8011822:	2b00      	cmp	r3, #0
 8011824:	d001      	beq.n	801182a <LoRaMacInitialization+0x4de>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011826:	2313      	movs	r3, #19
 8011828:	e01c      	b.n	8011864 <LoRaMacInitialization+0x518>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 801182a:	4823      	ldr	r0, [pc, #140]	@ (80118b8 <LoRaMacInitialization+0x56c>)
 801182c:	f002 fb8a 	bl	8013f44 <LoRaMacCryptoSetMulticastReference>
 8011830:	4603      	mov	r3, r0
 8011832:	2b00      	cmp	r3, #0
 8011834:	d001      	beq.n	801183a <LoRaMacInitialization+0x4ee>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8011836:	2311      	movs	r3, #17
 8011838:	e014      	b.n	8011864 <LoRaMacInitialization+0x518>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 801183a:	4b1c      	ldr	r3, [pc, #112]	@ (80118ac <LoRaMacInitialization+0x560>)
 801183c:	695b      	ldr	r3, [r3, #20]
 801183e:	4798      	blx	r3
 8011840:	4603      	mov	r3, r0
 8011842:	4618      	mov	r0, r3
 8011844:	f005 fc02 	bl	801704c <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8011848:	4b18      	ldr	r3, [pc, #96]	@ (80118ac <LoRaMacInitialization+0x560>)
 801184a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801184c:	4a07      	ldr	r2, [pc, #28]	@ (801186c <LoRaMacInitialization+0x520>)
 801184e:	f892 2105 	ldrb.w	r2, [r2, #261]	@ 0x105
 8011852:	4610      	mov	r0, r2
 8011854:	4798      	blx	r3
    Radio.Sleep( );
 8011856:	4b15      	ldr	r3, [pc, #84]	@ (80118ac <LoRaMacInitialization+0x560>)
 8011858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801185a:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 801185c:	2001      	movs	r0, #1
 801185e:	f7fd fac7 	bl	800edf0 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 8011862:	2300      	movs	r3, #0
}
 8011864:	4618      	mov	r0, r3
 8011866:	373c      	adds	r7, #60	@ 0x3c
 8011868:	46bd      	mov	sp, r7
 801186a:	bd90      	pop	{r4, r7, pc}
 801186c:	20000df8 	.word	0x20000df8
 8011870:	200008d8 	.word	0x200008d8
 8011874:	0800f3a5 	.word	0x0800f3a5
 8011878:	20000c40 	.word	0x20000c40
 801187c:	0800f435 	.word	0x0800f435
 8011880:	20000c58 	.word	0x20000c58
 8011884:	0800f4ad 	.word	0x0800f4ad
 8011888:	20000c70 	.word	0x20000c70
 801188c:	0800f52d 	.word	0x0800f52d
 8011890:	20000cdc 	.word	0x20000cdc
 8011894:	20001980 	.word	0x20001980
 8011898:	0800dea5 	.word	0x0800dea5
 801189c:	0800df1d 	.word	0x0800df1d
 80118a0:	0800dffd 	.word	0x0800dffd
 80118a4:	0800dfb1 	.word	0x0800dfb1
 80118a8:	0800e039 	.word	0x0800e039
 80118ac:	0801f57c 	.word	0x0801f57c
 80118b0:	20000c24 	.word	0x20000c24
 80118b4:	20000f1c 	.word	0x20000f1c
 80118b8:	20000ed0 	.word	0x20000ed0

080118bc <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 80118bc:	b480      	push	{r7}
 80118be:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 80118c0:	4b04      	ldr	r3, [pc, #16]	@ (80118d4 <LoRaMacStart+0x18>)
 80118c2:	2200      	movs	r2, #0
 80118c4:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
    return LORAMAC_STATUS_OK;
 80118c8:	2300      	movs	r3, #0
}
 80118ca:	4618      	mov	r0, r3
 80118cc:	46bd      	mov	sp, r7
 80118ce:	bc80      	pop	{r7}
 80118d0:	4770      	bx	lr
 80118d2:	bf00      	nop
 80118d4:	200008d8 	.word	0x200008d8

080118d8 <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 80118d8:	b580      	push	{r7, lr}
 80118da:	af00      	add	r7, sp, #0
    if( LoRaMacIsBusy( ) == false )
 80118dc:	f7fd fa68 	bl	800edb0 <LoRaMacIsBusy>
 80118e0:	4603      	mov	r3, r0
 80118e2:	f083 0301 	eor.w	r3, r3, #1
 80118e6:	b2db      	uxtb	r3, r3
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	d005      	beq.n	80118f8 <LoRaMacStop+0x20>
    {
        MacCtx.MacState = LORAMAC_STOPPED;
 80118ec:	4b07      	ldr	r3, [pc, #28]	@ (801190c <LoRaMacStop+0x34>)
 80118ee:	2201      	movs	r2, #1
 80118f0:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
        return LORAMAC_STATUS_OK;
 80118f4:	2300      	movs	r3, #0
 80118f6:	e007      	b.n	8011908 <LoRaMacStop+0x30>
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 80118f8:	4b04      	ldr	r3, [pc, #16]	@ (801190c <LoRaMacStop+0x34>)
 80118fa:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80118fe:	2b01      	cmp	r3, #1
 8011900:	d101      	bne.n	8011906 <LoRaMacStop+0x2e>
    {
        return LORAMAC_STATUS_OK;
 8011902:	2300      	movs	r3, #0
 8011904:	e000      	b.n	8011908 <LoRaMacStop+0x30>
    }
    return LORAMAC_STATUS_BUSY;
 8011906:	2301      	movs	r3, #1
}
 8011908:	4618      	mov	r0, r3
 801190a:	bd80      	pop	{r7, pc}
 801190c:	200008d8 	.word	0x200008d8

08011910 <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 8011910:	b580      	push	{r7, lr}
 8011912:	af00      	add	r7, sp, #0
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 8011914:	4812      	ldr	r0, [pc, #72]	@ (8011960 <LoRaMacHalt+0x50>)
 8011916:	f009 fd0b 	bl	801b330 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 801191a:	4812      	ldr	r0, [pc, #72]	@ (8011964 <LoRaMacHalt+0x54>)
 801191c:	f009 fd08 	bl	801b330 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 8011920:	4811      	ldr	r0, [pc, #68]	@ (8011968 <LoRaMacHalt+0x58>)
 8011922:	f009 fd05 	bl	801b330 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 8011926:	4811      	ldr	r0, [pc, #68]	@ (801196c <LoRaMacHalt+0x5c>)
 8011928:	f009 fd02 	bl	801b330 <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 801192c:	f001 fa04 	bl	8012d38 <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 8011930:	4b0f      	ldr	r3, [pc, #60]	@ (8011970 <LoRaMacHalt+0x60>)
 8011932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011934:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 8011936:	4b0f      	ldr	r3, [pc, #60]	@ (8011974 <LoRaMacHalt+0x64>)
 8011938:	2200      	movs	r2, #0
 801193a:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

    LoRaMacHandleNvm( &Nvm );
 801193e:	480e      	ldr	r0, [pc, #56]	@ (8011978 <LoRaMacHalt+0x68>)
 8011940:	f7fd fc0c 	bl	800f15c <LoRaMacHandleNvm>

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
 8011944:	f240 527c 	movw	r2, #1404	@ 0x57c
 8011948:	490b      	ldr	r1, [pc, #44]	@ (8011978 <LoRaMacHalt+0x68>)
 801194a:	480c      	ldr	r0, [pc, #48]	@ (801197c <LoRaMacHalt+0x6c>)
 801194c:	f005 fba3 	bl	8017096 <memcpy1>

    MacCtx.MacState = LORAMAC_STOPPED;
 8011950:	4b08      	ldr	r3, [pc, #32]	@ (8011974 <LoRaMacHalt+0x64>)
 8011952:	2201      	movs	r2, #1
 8011954:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

    return LORAMAC_STATUS_OK;
 8011958:	2300      	movs	r3, #0
}
 801195a:	4618      	mov	r0, r3
 801195c:	bd80      	pop	{r7, pc}
 801195e:	bf00      	nop
 8011960:	20000c40 	.word	0x20000c40
 8011964:	20000c58 	.word	0x20000c58
 8011968:	20000c70 	.word	0x20000c70
 801196c:	20000cdc 	.word	0x20000cdc
 8011970:	0801f57c 	.word	0x0801f57c
 8011974:	200008d8 	.word	0x200008d8
 8011978:	20000df8 	.word	0x20000df8
 801197c:	20001374 	.word	0x20001374

08011980 <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 8011980:	b590      	push	{r4, r7, lr}
 8011982:	b08d      	sub	sp, #52	@ 0x34
 8011984:	af02      	add	r7, sp, #8
 8011986:	4603      	mov	r3, r0
 8011988:	6039      	str	r1, [r7, #0]
 801198a:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 801198c:	4b42      	ldr	r3, [pc, #264]	@ (8011a98 <LoRaMacQueryTxPossible+0x118>)
 801198e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011990:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8011992:	4b41      	ldr	r3, [pc, #260]	@ (8011a98 <LoRaMacQueryTxPossible+0x118>)
 8011994:	f993 30cd 	ldrsb.w	r3, [r3, #205]	@ 0xcd
 8011998:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 801199a:	4b3f      	ldr	r3, [pc, #252]	@ (8011a98 <LoRaMacQueryTxPossible+0x118>)
 801199c:	f993 30cc 	ldrsb.w	r3, [r3, #204]	@ 0xcc
 80119a0:	73bb      	strb	r3, [r7, #14]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
 80119a2:	4b3e      	ldr	r3, [pc, #248]	@ (8011a9c <LoRaMacQueryTxPossible+0x11c>)
 80119a4:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 80119a8:	737b      	strb	r3, [r7, #13]
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 80119aa:	2300      	movs	r3, #0
 80119ac:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 80119ae:	683b      	ldr	r3, [r7, #0]
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	d101      	bne.n	80119b8 <LoRaMacQueryTxPossible+0x38>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80119b4:	2303      	movs	r3, #3
 80119b6:	e06b      	b.n	8011a90 <LoRaMacQueryTxPossible+0x110>

    // Setup ADR request
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 80119b8:	2300      	movs	r3, #0
 80119ba:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 80119bc:	4b36      	ldr	r3, [pc, #216]	@ (8011a98 <LoRaMacQueryTxPossible+0x118>)
 80119be:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 80119c2:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80119c4:	4b34      	ldr	r3, [pc, #208]	@ (8011a98 <LoRaMacQueryTxPossible+0x118>)
 80119c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80119c8:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 80119ca:	4b34      	ldr	r3, [pc, #208]	@ (8011a9c <LoRaMacQueryTxPossible+0x11c>)
 80119cc:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 80119d0:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 80119d2:	4b32      	ldr	r3, [pc, #200]	@ (8011a9c <LoRaMacQueryTxPossible+0x11c>)
 80119d4:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	@ 0x402
 80119d8:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80119da:	4b2f      	ldr	r3, [pc, #188]	@ (8011a98 <LoRaMacQueryTxPossible+0x118>)
 80119dc:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 80119e0:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80119e4:	4b2c      	ldr	r3, [pc, #176]	@ (8011a98 <LoRaMacQueryTxPossible+0x118>)
 80119e6:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 80119ea:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
 80119ee:	4b2b      	ldr	r3, [pc, #172]	@ (8011a9c <LoRaMacQueryTxPossible+0x11c>)
 80119f0:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 80119f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80119f8:	4b27      	ldr	r3, [pc, #156]	@ (8011a98 <LoRaMacQueryTxPossible+0x118>)
 80119fa:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 80119fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 8011a02:	4b25      	ldr	r3, [pc, #148]	@ (8011a98 <LoRaMacQueryTxPossible+0x118>)
 8011a04:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011a08:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
 8011a0c:	f107 040d 	add.w	r4, r7, #13
 8011a10:	f107 020e 	add.w	r2, r7, #14
 8011a14:	f107 010f 	add.w	r1, r7, #15
 8011a18:	f107 0014 	add.w	r0, r7, #20
 8011a1c:	f107 0310 	add.w	r3, r7, #16
 8011a20:	9300      	str	r3, [sp, #0]
 8011a22:	4623      	mov	r3, r4
 8011a24:	f001 f852 	bl	8012acc <LoRaMacAdrCalcNext>
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8011a28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011a2c:	4618      	mov	r0, r3
 8011a2e:	f7fd feb9 	bl	800f7a4 <GetMaxAppPayloadWithoutFOptsLength>
 8011a32:	4603      	mov	r3, r0
 8011a34:	461a      	mov	r2, r3
 8011a36:	683b      	ldr	r3, [r7, #0]
 8011a38:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8011a3a:	f107 0308 	add.w	r3, r7, #8
 8011a3e:	4618      	mov	r0, r3
 8011a40:	f001 fbd8 	bl	80131f4 <LoRaMacCommandsGetSizeSerializedCmds>
 8011a44:	4603      	mov	r3, r0
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	d001      	beq.n	8011a4e <LoRaMacQueryTxPossible+0xce>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011a4a:	2313      	movs	r3, #19
 8011a4c:	e020      	b.n	8011a90 <LoRaMacQueryTxPossible+0x110>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 8011a4e:	68bb      	ldr	r3, [r7, #8]
 8011a50:	2b0f      	cmp	r3, #15
 8011a52:	d819      	bhi.n	8011a88 <LoRaMacQueryTxPossible+0x108>
 8011a54:	683b      	ldr	r3, [r7, #0]
 8011a56:	785b      	ldrb	r3, [r3, #1]
 8011a58:	461a      	mov	r2, r3
 8011a5a:	68bb      	ldr	r3, [r7, #8]
 8011a5c:	429a      	cmp	r2, r3
 8011a5e:	d313      	bcc.n	8011a88 <LoRaMacQueryTxPossible+0x108>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 8011a60:	683b      	ldr	r3, [r7, #0]
 8011a62:	785a      	ldrb	r2, [r3, #1]
 8011a64:	68bb      	ldr	r3, [r7, #8]
 8011a66:	b2db      	uxtb	r3, r3
 8011a68:	1ad3      	subs	r3, r2, r3
 8011a6a:	b2da      	uxtb	r2, r3
 8011a6c:	683b      	ldr	r3, [r7, #0]
 8011a6e:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 8011a70:	683b      	ldr	r3, [r7, #0]
 8011a72:	785b      	ldrb	r3, [r3, #1]
 8011a74:	4619      	mov	r1, r3
 8011a76:	79fa      	ldrb	r2, [r7, #7]
 8011a78:	68bb      	ldr	r3, [r7, #8]
 8011a7a:	4413      	add	r3, r2
 8011a7c:	4299      	cmp	r1, r3
 8011a7e:	d301      	bcc.n	8011a84 <LoRaMacQueryTxPossible+0x104>
        {
            return LORAMAC_STATUS_OK;
 8011a80:	2300      	movs	r3, #0
 8011a82:	e005      	b.n	8011a90 <LoRaMacQueryTxPossible+0x110>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 8011a84:	2308      	movs	r3, #8
 8011a86:	e003      	b.n	8011a90 <LoRaMacQueryTxPossible+0x110>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 8011a88:	683b      	ldr	r3, [r7, #0]
 8011a8a:	2200      	movs	r2, #0
 8011a8c:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 8011a8e:	2308      	movs	r3, #8
    }
}
 8011a90:	4618      	mov	r0, r3
 8011a92:	372c      	adds	r7, #44	@ 0x2c
 8011a94:	46bd      	mov	sp, r7
 8011a96:	bd90      	pop	{r4, r7, pc}
 8011a98:	20000df8 	.word	0x20000df8
 8011a9c:	200008d8 	.word	0x200008d8

08011aa0 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 8011aa0:	b590      	push	{r4, r7, lr}
 8011aa2:	b087      	sub	sp, #28
 8011aa4:	af00      	add	r7, sp, #0
 8011aa6:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8011aa8:	2300      	movs	r3, #0
 8011aaa:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	d101      	bne.n	8011ab6 <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011ab2:	2303      	movs	r3, #3
 8011ab4:	e191      	b.n	8011dda <LoRaMacMibGetRequestConfirm+0x33a>
    }

    switch( mibGet->Type )
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	781b      	ldrb	r3, [r3, #0]
 8011aba:	2b39      	cmp	r3, #57	@ 0x39
 8011abc:	f200 8186 	bhi.w	8011dcc <LoRaMacMibGetRequestConfirm+0x32c>
 8011ac0:	a201      	add	r2, pc, #4	@ (adr r2, 8011ac8 <LoRaMacMibGetRequestConfirm+0x28>)
 8011ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ac6:	bf00      	nop
 8011ac8:	08011bb1 	.word	0x08011bb1
 8011acc:	08011bbd 	.word	0x08011bbd
 8011ad0:	08011bc9 	.word	0x08011bc9
 8011ad4:	08011bd5 	.word	0x08011bd5
 8011ad8:	08011be1 	.word	0x08011be1
 8011adc:	08011bed 	.word	0x08011bed
 8011ae0:	08011bf9 	.word	0x08011bf9
 8011ae4:	08011dcd 	.word	0x08011dcd
 8011ae8:	08011dcd 	.word	0x08011dcd
 8011aec:	08011dcd 	.word	0x08011dcd
 8011af0:	08011dcd 	.word	0x08011dcd
 8011af4:	08011dcd 	.word	0x08011dcd
 8011af8:	08011dcd 	.word	0x08011dcd
 8011afc:	08011dcd 	.word	0x08011dcd
 8011b00:	08011dcd 	.word	0x08011dcd
 8011b04:	08011c05 	.word	0x08011c05
 8011b08:	08011c11 	.word	0x08011c11
 8011b0c:	08011c1d 	.word	0x08011c1d
 8011b10:	08011c3f 	.word	0x08011c3f
 8011b14:	08011c51 	.word	0x08011c51
 8011b18:	08011c63 	.word	0x08011c63
 8011b1c:	08011c75 	.word	0x08011c75
 8011b20:	08011ca9 	.word	0x08011ca9
 8011b24:	08011c87 	.word	0x08011c87
 8011b28:	08011ccb 	.word	0x08011ccb
 8011b2c:	08011cd7 	.word	0x08011cd7
 8011b30:	08011ce1 	.word	0x08011ce1
 8011b34:	08011ceb 	.word	0x08011ceb
 8011b38:	08011cf5 	.word	0x08011cf5
 8011b3c:	08011cff 	.word	0x08011cff
 8011b40:	08011d09 	.word	0x08011d09
 8011b44:	08011d35 	.word	0x08011d35
 8011b48:	08011d41 	.word	0x08011d41
 8011b4c:	08011d59 	.word	0x08011d59
 8011b50:	08011d4d 	.word	0x08011d4d
 8011b54:	08011d65 	.word	0x08011d65
 8011b58:	08011d6f 	.word	0x08011d6f
 8011b5c:	08011d7b 	.word	0x08011d7b
 8011b60:	08011d95 	.word	0x08011d95
 8011b64:	08011d85 	.word	0x08011d85
 8011b68:	08011d8d 	.word	0x08011d8d
 8011b6c:	08011dcd 	.word	0x08011dcd
 8011b70:	08011da1 	.word	0x08011da1
 8011b74:	08011dcd 	.word	0x08011dcd
 8011b78:	08011dcd 	.word	0x08011dcd
 8011b7c:	08011dcd 	.word	0x08011dcd
 8011b80:	08011dcd 	.word	0x08011dcd
 8011b84:	08011dcd 	.word	0x08011dcd
 8011b88:	08011dcd 	.word	0x08011dcd
 8011b8c:	08011dcd 	.word	0x08011dcd
 8011b90:	08011dcd 	.word	0x08011dcd
 8011b94:	08011dcd 	.word	0x08011dcd
 8011b98:	08011dcd 	.word	0x08011dcd
 8011b9c:	08011dcd 	.word	0x08011dcd
 8011ba0:	08011dcd 	.word	0x08011dcd
 8011ba4:	08011dcd 	.word	0x08011dcd
 8011ba8:	08011db5 	.word	0x08011db5
 8011bac:	08011dc1 	.word	0x08011dc1
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 8011bb0:	4b8c      	ldr	r3, [pc, #560]	@ (8011de4 <LoRaMacMibGetRequestConfirm+0x344>)
 8011bb2:	f893 2104 	ldrb.w	r2, [r3, #260]	@ 0x104
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	711a      	strb	r2, [r3, #4]
            break;
 8011bba:	e10d      	b.n	8011dd8 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8011bbc:	4b89      	ldr	r3, [pc, #548]	@ (8011de4 <LoRaMacMibGetRequestConfirm+0x344>)
 8011bbe:	f893 211c 	ldrb.w	r2, [r3, #284]	@ 0x11c
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	711a      	strb	r2, [r3, #4]
            break;
 8011bc6:	e107      	b.n	8011dd8 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_DEV_EUI:
        {
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 8011bc8:	f7fa fc76 	bl	800c4b8 <SecureElementGetDevEui>
 8011bcc:	4602      	mov	r2, r0
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	605a      	str	r2, [r3, #4]
            break;
 8011bd2:	e101      	b.n	8011dd8 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_JOIN_EUI:
        {
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 8011bd4:	f7fa fc92 	bl	800c4fc <SecureElementGetJoinEui>
 8011bd8:	4602      	mov	r2, r0
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	605a      	str	r2, [r3, #4]
            break;
 8011bde:	e0fb      	b.n	8011dd8 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 8011be0:	4b80      	ldr	r3, [pc, #512]	@ (8011de4 <LoRaMacMibGetRequestConfirm+0x344>)
 8011be2:	f893 2106 	ldrb.w	r2, [r3, #262]	@ 0x106
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	711a      	strb	r2, [r3, #4]
            break;
 8011bea:	e0f5      	b.n	8011dd8 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 8011bec:	4b7d      	ldr	r3, [pc, #500]	@ (8011de4 <LoRaMacMibGetRequestConfirm+0x344>)
 8011bee:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	605a      	str	r2, [r3, #4]
            break;
 8011bf6:	e0ef      	b.n	8011dd8 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_DEV_ADDR:
        {
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 8011bf8:	4b7a      	ldr	r3, [pc, #488]	@ (8011de4 <LoRaMacMibGetRequestConfirm+0x344>)
 8011bfa:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	605a      	str	r2, [r3, #4]
            break;
 8011c02:	e0e9      	b.n	8011dd8 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 8011c04:	4b77      	ldr	r3, [pc, #476]	@ (8011de4 <LoRaMacMibGetRequestConfirm+0x344>)
 8011c06:	f893 2105 	ldrb.w	r2, [r3, #261]	@ 0x105
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	711a      	strb	r2, [r3, #4]
            break;
 8011c0e:	e0e3      	b.n	8011dd8 <LoRaMacMibGetRequestConfirm+0x338>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8011c10:	4b74      	ldr	r3, [pc, #464]	@ (8011de4 <LoRaMacMibGetRequestConfirm+0x344>)
 8011c12:	f893 2080 	ldrb.w	r2, [r3, #128]	@ 0x80
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	711a      	strb	r2, [r3, #4]
            break;
 8011c1a:	e0dd      	b.n	8011dd8 <LoRaMacMibGetRequestConfirm+0x338>
        }
        /* ST_WORKAROUND_END */
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 8011c1c:	231c      	movs	r3, #28
 8011c1e:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011c20:	4b70      	ldr	r3, [pc, #448]	@ (8011de4 <LoRaMacMibGetRequestConfirm+0x344>)
 8011c22:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011c26:	f107 0210 	add.w	r2, r7, #16
 8011c2a:	4611      	mov	r1, r2
 8011c2c:	4618      	mov	r0, r3
 8011c2e:	f002 ff91 	bl	8014b54 <RegionGetPhyParam>
 8011c32:	4603      	mov	r3, r0
 8011c34:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 8011c36:	68fa      	ldr	r2, [r7, #12]
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	605a      	str	r2, [r3, #4]
            break;
 8011c3c:	e0cc      	b.n	8011dd8 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	4a68      	ldr	r2, [pc, #416]	@ (8011de4 <LoRaMacMibGetRequestConfirm+0x344>)
 8011c42:	3304      	adds	r3, #4
 8011c44:	3264      	adds	r2, #100	@ 0x64
 8011c46:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011c4a:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8011c4e:	e0c3      	b.n	8011dd8 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	4a64      	ldr	r2, [pc, #400]	@ (8011de4 <LoRaMacMibGetRequestConfirm+0x344>)
 8011c54:	3304      	adds	r3, #4
 8011c56:	32a8      	adds	r2, #168	@ 0xa8
 8011c58:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011c5c:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8011c60:	e0ba      	b.n	8011dd8 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	4a5f      	ldr	r2, [pc, #380]	@ (8011de4 <LoRaMacMibGetRequestConfirm+0x344>)
 8011c66:	3304      	adds	r3, #4
 8011c68:	326c      	adds	r2, #108	@ 0x6c
 8011c6a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011c6e:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8011c72:	e0b1      	b.n	8011dd8 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	4a5b      	ldr	r2, [pc, #364]	@ (8011de4 <LoRaMacMibGetRequestConfirm+0x344>)
 8011c78:	3304      	adds	r3, #4
 8011c7a:	32b0      	adds	r2, #176	@ 0xb0
 8011c7c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011c80:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8011c84:	e0a8      	b.n	8011dd8 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 8011c86:	231a      	movs	r3, #26
 8011c88:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011c8a:	4b56      	ldr	r3, [pc, #344]	@ (8011de4 <LoRaMacMibGetRequestConfirm+0x344>)
 8011c8c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011c90:	f107 0210 	add.w	r2, r7, #16
 8011c94:	4611      	mov	r1, r2
 8011c96:	4618      	mov	r0, r3
 8011c98:	f002 ff5c 	bl	8014b54 <RegionGetPhyParam>
 8011c9c:	4603      	mov	r3, r0
 8011c9e:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 8011ca0:	68fa      	ldr	r2, [r7, #12]
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	605a      	str	r2, [r3, #4]
            break;
 8011ca6:	e097      	b.n	8011dd8 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8011ca8:	2319      	movs	r3, #25
 8011caa:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011cac:	4b4d      	ldr	r3, [pc, #308]	@ (8011de4 <LoRaMacMibGetRequestConfirm+0x344>)
 8011cae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011cb2:	f107 0210 	add.w	r2, r7, #16
 8011cb6:	4611      	mov	r1, r2
 8011cb8:	4618      	mov	r0, r3
 8011cba:	f002 ff4b 	bl	8014b54 <RegionGetPhyParam>
 8011cbe:	4603      	mov	r3, r0
 8011cc0:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 8011cc2:	68fa      	ldr	r2, [r7, #12]
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	605a      	str	r2, [r3, #4]
            break;
 8011cc8:	e086      	b.n	8011dd8 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8011cca:	4b46      	ldr	r3, [pc, #280]	@ (8011de4 <LoRaMacMibGetRequestConfirm+0x344>)
 8011ccc:	f893 2060 	ldrb.w	r2, [r3, #96]	@ 0x60
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	711a      	strb	r2, [r3, #4]
            break;
 8011cd4:	e080      	b.n	8011dd8 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 8011cd6:	4b43      	ldr	r3, [pc, #268]	@ (8011de4 <LoRaMacMibGetRequestConfirm+0x344>)
 8011cd8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	605a      	str	r2, [r3, #4]
            break;
 8011cde:	e07b      	b.n	8011dd8 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 8011ce0:	4b40      	ldr	r3, [pc, #256]	@ (8011de4 <LoRaMacMibGetRequestConfirm+0x344>)
 8011ce2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	605a      	str	r2, [r3, #4]
            break;
 8011ce8:	e076      	b.n	8011dd8 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 8011cea:	4b3e      	ldr	r3, [pc, #248]	@ (8011de4 <LoRaMacMibGetRequestConfirm+0x344>)
 8011cec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	605a      	str	r2, [r3, #4]
            break;
 8011cf2:	e071      	b.n	8011dd8 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 8011cf4:	4b3b      	ldr	r3, [pc, #236]	@ (8011de4 <LoRaMacMibGetRequestConfirm+0x344>)
 8011cf6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	605a      	str	r2, [r3, #4]
            break;
 8011cfc:	e06c      	b.n	8011dd8 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 8011cfe:	4b39      	ldr	r3, [pc, #228]	@ (8011de4 <LoRaMacMibGetRequestConfirm+0x344>)
 8011d00:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	605a      	str	r2, [r3, #4]
            break;
 8011d06:	e067      	b.n	8011dd8 <LoRaMacMibGetRequestConfirm+0x338>
        }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MIB_CHANNELS_MIN_TX_DATARATE:
        {
            getPhy.Attribute = PHY_MIN_TX_DR;
 8011d08:	2302      	movs	r3, #2
 8011d0a:	743b      	strb	r3, [r7, #16]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011d0c:	4b35      	ldr	r3, [pc, #212]	@ (8011de4 <LoRaMacMibGetRequestConfirm+0x344>)
 8011d0e:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8011d12:	74bb      	strb	r3, [r7, #18]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011d14:	4b33      	ldr	r3, [pc, #204]	@ (8011de4 <LoRaMacMibGetRequestConfirm+0x344>)
 8011d16:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011d1a:	f107 0210 	add.w	r2, r7, #16
 8011d1e:	4611      	mov	r1, r2
 8011d20:	4618      	mov	r0, r3
 8011d22:	f002 ff17 	bl	8014b54 <RegionGetPhyParam>
 8011d26:	4603      	mov	r3, r0
 8011d28:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMinTxDatarate = phyParam.Value;
 8011d2a:	68fb      	ldr	r3, [r7, #12]
 8011d2c:	b25a      	sxtb	r2, r3
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	711a      	strb	r2, [r3, #4]
            break;
 8011d32:	e051      	b.n	8011dd8 <LoRaMacMibGetRequestConfirm+0x338>
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8011d34:	4b2b      	ldr	r3, [pc, #172]	@ (8011de4 <LoRaMacMibGetRequestConfirm+0x344>)
 8011d36:	f993 20cd 	ldrsb.w	r2, [r3, #205]	@ 0xcd
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	711a      	strb	r2, [r3, #4]
            break;
 8011d3e:	e04b      	b.n	8011dd8 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8011d40:	4b28      	ldr	r3, [pc, #160]	@ (8011de4 <LoRaMacMibGetRequestConfirm+0x344>)
 8011d42:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	711a      	strb	r2, [r3, #4]
            break;
 8011d4a:	e045      	b.n	8011dd8 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8011d4c:	4b25      	ldr	r3, [pc, #148]	@ (8011de4 <LoRaMacMibGetRequestConfirm+0x344>)
 8011d4e:	f993 20cc 	ldrsb.w	r2, [r3, #204]	@ 0xcc
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	711a      	strb	r2, [r3, #4]
            break;
 8011d56:	e03f      	b.n	8011dd8 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8011d58:	4b22      	ldr	r3, [pc, #136]	@ (8011de4 <LoRaMacMibGetRequestConfirm+0x344>)
 8011d5a:	f993 2038 	ldrsb.w	r2, [r3, #56]	@ 0x38
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	711a      	strb	r2, [r3, #4]
            break;
 8011d62:	e039      	b.n	8011dd8 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 8011d64:	4b1f      	ldr	r3, [pc, #124]	@ (8011de4 <LoRaMacMibGetRequestConfirm+0x344>)
 8011d66:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	605a      	str	r2, [r3, #4]
            break;
 8011d6c:	e034      	b.n	8011dd8 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 8011d6e:	4b1d      	ldr	r3, [pc, #116]	@ (8011de4 <LoRaMacMibGetRequestConfirm+0x344>)
 8011d70:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	711a      	strb	r2, [r3, #4]
            break;
 8011d78:	e02e      	b.n	8011dd8 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8011d7a:	4b1a      	ldr	r3, [pc, #104]	@ (8011de4 <LoRaMacMibGetRequestConfirm+0x344>)
 8011d7c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	605a      	str	r2, [r3, #4]
            break;
 8011d82:	e029      	b.n	8011dd8 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	4a17      	ldr	r2, [pc, #92]	@ (8011de4 <LoRaMacMibGetRequestConfirm+0x344>)
 8011d88:	605a      	str	r2, [r3, #4]
            break;
 8011d8a:	e025      	b.n	8011dd8 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_NVM_BKP_CTXS:
        {
            mibGet->Param.BackupContexts = &NvmBackup;
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	4a16      	ldr	r2, [pc, #88]	@ (8011de8 <LoRaMacMibGetRequestConfirm+0x348>)
 8011d90:	605a      	str	r2, [r3, #4]
            break;
 8011d92:	e021      	b.n	8011dd8 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8011d94:	4b13      	ldr	r3, [pc, #76]	@ (8011de4 <LoRaMacMibGetRequestConfirm+0x344>)
 8011d96:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	605a      	str	r2, [r3, #4]
            break;
 8011d9e:	e01b      	b.n	8011dd8 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	4a10      	ldr	r2, [pc, #64]	@ (8011de4 <LoRaMacMibGetRequestConfirm+0x344>)
 8011da4:	f8d2 2118 	ldr.w	r2, [r2, #280]	@ 0x118
 8011da8:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 8011daa:	687c      	ldr	r4, [r7, #4]
 8011dac:	f003 f848 	bl	8014e40 <RegionGetVersion>
 8011db0:	60a0      	str	r0, [r4, #8]
            break;
 8011db2:	e011      	b.n	8011dd8 <LoRaMacMibGetRequestConfirm+0x338>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 8011db4:	4b0b      	ldr	r3, [pc, #44]	@ (8011de4 <LoRaMacMibGetRequestConfirm+0x344>)
 8011db6:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	605a      	str	r2, [r3, #4]
            break;
 8011dbe:	e00b      	b.n	8011dd8 <LoRaMacMibGetRequestConfirm+0x338>
        }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MIB_IS_CERT_FPORT_ON:
        {
            mibGet->Param.IsCertPortOn = Nvm.MacGroup2.IsCertPortOn;
 8011dc0:	4b08      	ldr	r3, [pc, #32]	@ (8011de4 <LoRaMacMibGetRequestConfirm+0x344>)
 8011dc2:	f893 210b 	ldrb.w	r2, [r3, #267]	@ 0x10b
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	711a      	strb	r2, [r3, #4]
            break;
 8011dca:	e005      	b.n	8011dd8 <LoRaMacMibGetRequestConfirm+0x338>
        }
#endif /* LORAMAC_VERSION */
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 8011dcc:	6878      	ldr	r0, [r7, #4]
 8011dce:	f000 ffca 	bl	8012d66 <LoRaMacClassBMibGetRequestConfirm>
 8011dd2:	4603      	mov	r3, r0
 8011dd4:	75fb      	strb	r3, [r7, #23]
            break;
 8011dd6:	bf00      	nop
        }
    }
    return status;
 8011dd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8011dda:	4618      	mov	r0, r3
 8011ddc:	371c      	adds	r7, #28
 8011dde:	46bd      	mov	sp, r7
 8011de0:	bd90      	pop	{r4, r7, pc}
 8011de2:	bf00      	nop
 8011de4:	20000df8 	.word	0x20000df8
 8011de8:	20001374 	.word	0x20001374

08011dec <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 8011dec:	b580      	push	{r7, lr}
 8011dee:	b086      	sub	sp, #24
 8011df0:	af00      	add	r7, sp, #0
 8011df2:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8011df4:	2300      	movs	r3, #0
 8011df6:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	2b00      	cmp	r3, #0
 8011dfc:	d101      	bne.n	8011e02 <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011dfe:	2303      	movs	r3, #3
 8011e00:	e35c      	b.n	80124bc <LoRaMacMibSetRequestConfirm+0x6d0>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 8011e02:	4bb9      	ldr	r3, [pc, #740]	@ (80120e8 <LoRaMacMibSetRequestConfirm+0x2fc>)
 8011e04:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8011e08:	f003 0302 	and.w	r3, r3, #2
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d001      	beq.n	8011e14 <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8011e10:	2301      	movs	r3, #1
 8011e12:	e353      	b.n	80124bc <LoRaMacMibSetRequestConfirm+0x6d0>
    }

    switch( mibSet->Type )
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	781b      	ldrb	r3, [r3, #0]
 8011e18:	2b39      	cmp	r3, #57	@ 0x39
 8011e1a:	f200 8323 	bhi.w	8012464 <LoRaMacMibSetRequestConfirm+0x678>
 8011e1e:	a201      	add	r2, pc, #4	@ (adr r2, 8011e24 <LoRaMacMibSetRequestConfirm+0x38>)
 8011e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e24:	08011f0d 	.word	0x08011f0d
 8011e28:	08011f1d 	.word	0x08011f1d
 8011e2c:	08011f37 	.word	0x08011f37
 8011e30:	08011f4f 	.word	0x08011f4f
 8011e34:	08011f67 	.word	0x08011f67
 8011e38:	08011f73 	.word	0x08011f73
 8011e3c:	08011f7f 	.word	0x08011f7f
 8011e40:	08011f8b 	.word	0x08011f8b
 8011e44:	08011fb1 	.word	0x08011fb1
 8011e48:	08011fd7 	.word	0x08011fd7
 8011e4c:	08011ffd 	.word	0x08011ffd
 8011e50:	08012023 	.word	0x08012023
 8011e54:	08012049 	.word	0x08012049
 8011e58:	0801206f 	.word	0x0801206f
 8011e5c:	08012095 	.word	0x08012095
 8011e60:	080120bb 	.word	0x080120bb
 8011e64:	080120db 	.word	0x080120db
 8011e68:	08012465 	.word	0x08012465
 8011e6c:	080120f5 	.word	0x080120f5
 8011e70:	08012165 	.word	0x08012165
 8011e74:	080121a5 	.word	0x080121a5
 8011e78:	08012207 	.word	0x08012207
 8011e7c:	08012277 	.word	0x08012277
 8011e80:	08012247 	.word	0x08012247
 8011e84:	080122a7 	.word	0x080122a7
 8011e88:	080122c9 	.word	0x080122c9
 8011e8c:	080122d3 	.word	0x080122d3
 8011e90:	080122dd 	.word	0x080122dd
 8011e94:	080122e7 	.word	0x080122e7
 8011e98:	080122f1 	.word	0x080122f1
 8011e9c:	08012465 	.word	0x08012465
 8011ea0:	080122fb 	.word	0x080122fb
 8011ea4:	0801232d 	.word	0x0801232d
 8011ea8:	08012399 	.word	0x08012399
 8011eac:	08012367 	.word	0x08012367
 8011eb0:	080123d5 	.word	0x080123d5
 8011eb4:	080123eb 	.word	0x080123eb
 8011eb8:	08012403 	.word	0x08012403
 8011ebc:	0801240d 	.word	0x0801240d
 8011ec0:	08012419 	.word	0x08012419
 8011ec4:	08012465 	.word	0x08012465
 8011ec8:	08012423 	.word	0x08012423
 8011ecc:	08012465 	.word	0x08012465
 8011ed0:	08012465 	.word	0x08012465
 8011ed4:	08012465 	.word	0x08012465
 8011ed8:	08012465 	.word	0x08012465
 8011edc:	08012465 	.word	0x08012465
 8011ee0:	08012465 	.word	0x08012465
 8011ee4:	08012465 	.word	0x08012465
 8011ee8:	08012465 	.word	0x08012465
 8011eec:	08012465 	.word	0x08012465
 8011ef0:	08012465 	.word	0x08012465
 8011ef4:	08012465 	.word	0x08012465
 8011ef8:	08012465 	.word	0x08012465
 8011efc:	08012465 	.word	0x08012465
 8011f00:	08012465 	.word	0x08012465
 8011f04:	0801244d 	.word	0x0801244d
 8011f08:	08012459 	.word	0x08012459
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	791b      	ldrb	r3, [r3, #4]
 8011f10:	4618      	mov	r0, r3
 8011f12:	f7fd fb75 	bl	800f600 <SwitchClass>
 8011f16:	4603      	mov	r3, r0
 8011f18:	75fb      	strb	r3, [r7, #23]
            break;
 8011f1a:	e2c4      	b.n	80124a6 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	791b      	ldrb	r3, [r3, #4]
 8011f20:	2b02      	cmp	r3, #2
 8011f22:	d005      	beq.n	8011f30 <LoRaMacMibSetRequestConfirm+0x144>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	791a      	ldrb	r2, [r3, #4]
 8011f28:	4b70      	ldr	r3, [pc, #448]	@ (80120ec <LoRaMacMibSetRequestConfirm+0x300>)
 8011f2a:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011f2e:	e2ba      	b.n	80124a6 <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011f30:	2303      	movs	r3, #3
 8011f32:	75fb      	strb	r3, [r7, #23]
            break;
 8011f34:	e2b7      	b.n	80124a6 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	685b      	ldr	r3, [r3, #4]
 8011f3a:	4618      	mov	r0, r3
 8011f3c:	f7fa faa4 	bl	800c488 <SecureElementSetDevEui>
 8011f40:	4603      	mov	r3, r0
 8011f42:	2b00      	cmp	r3, #0
 8011f44:	f000 8294 	beq.w	8012470 <LoRaMacMibSetRequestConfirm+0x684>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011f48:	2303      	movs	r3, #3
 8011f4a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011f4c:	e290      	b.n	8012470 <LoRaMacMibSetRequestConfirm+0x684>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	685b      	ldr	r3, [r3, #4]
 8011f52:	4618      	mov	r0, r3
 8011f54:	f7fa faba 	bl	800c4cc <SecureElementSetJoinEui>
 8011f58:	4603      	mov	r3, r0
 8011f5a:	2b00      	cmp	r3, #0
 8011f5c:	f000 828a 	beq.w	8012474 <LoRaMacMibSetRequestConfirm+0x688>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011f60:	2303      	movs	r3, #3
 8011f62:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011f64:	e286      	b.n	8012474 <LoRaMacMibSetRequestConfirm+0x688>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	791a      	ldrb	r2, [r3, #4]
 8011f6a:	4b60      	ldr	r3, [pc, #384]	@ (80120ec <LoRaMacMibSetRequestConfirm+0x300>)
 8011f6c:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
            break;
 8011f70:	e299      	b.n	80124a6 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	685b      	ldr	r3, [r3, #4]
 8011f76:	4a5d      	ldr	r2, [pc, #372]	@ (80120ec <LoRaMacMibSetRequestConfirm+0x300>)
 8011f78:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
            break;
 8011f7c:	e293      	b.n	80124a6 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_DEV_ADDR:
        {
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	685b      	ldr	r3, [r3, #4]
 8011f82:	4a5a      	ldr	r2, [pc, #360]	@ (80120ec <LoRaMacMibSetRequestConfirm+0x300>)
 8011f84:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
            break;
 8011f88:	e28d      	b.n	80124a6 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	685b      	ldr	r3, [r3, #4]
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	d00b      	beq.n	8011faa <LoRaMacMibSetRequestConfirm+0x1be>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	685b      	ldr	r3, [r3, #4]
 8011f96:	4619      	mov	r1, r3
 8011f98:	2000      	movs	r0, #0
 8011f9a:	f001 fffb 	bl	8013f94 <LoRaMacCryptoSetKey>
 8011f9e:	4603      	mov	r3, r0
 8011fa0:	2b00      	cmp	r3, #0
 8011fa2:	f000 8269 	beq.w	8012478 <LoRaMacMibSetRequestConfirm+0x68c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011fa6:	2311      	movs	r3, #17
 8011fa8:	e288      	b.n	80124bc <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011faa:	2303      	movs	r3, #3
 8011fac:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011fae:	e263      	b.n	8012478 <LoRaMacMibSetRequestConfirm+0x68c>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	685b      	ldr	r3, [r3, #4]
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	d00b      	beq.n	8011fd0 <LoRaMacMibSetRequestConfirm+0x1e4>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	685b      	ldr	r3, [r3, #4]
 8011fbc:	4619      	mov	r1, r3
 8011fbe:	2001      	movs	r0, #1
 8011fc0:	f001 ffe8 	bl	8013f94 <LoRaMacCryptoSetKey>
 8011fc4:	4603      	mov	r3, r0
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	f000 8258 	beq.w	801247c <LoRaMacMibSetRequestConfirm+0x690>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011fcc:	2311      	movs	r3, #17
 8011fce:	e275      	b.n	80124bc <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011fd0:	2303      	movs	r3, #3
 8011fd2:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011fd4:	e252      	b.n	801247c <LoRaMacMibSetRequestConfirm+0x690>
            break;
        }
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	685b      	ldr	r3, [r3, #4]
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	d00b      	beq.n	8011ff6 <LoRaMacMibSetRequestConfirm+0x20a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	685b      	ldr	r3, [r3, #4]
 8011fe2:	4619      	mov	r1, r3
 8011fe4:	2002      	movs	r0, #2
 8011fe6:	f001 ffd5 	bl	8013f94 <LoRaMacCryptoSetKey>
 8011fea:	4603      	mov	r3, r0
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	f000 8247 	beq.w	8012480 <LoRaMacMibSetRequestConfirm+0x694>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011ff2:	2311      	movs	r3, #17
 8011ff4:	e262      	b.n	80124bc <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011ff6:	2303      	movs	r3, #3
 8011ff8:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011ffa:	e241      	b.n	8012480 <LoRaMacMibSetRequestConfirm+0x694>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	685b      	ldr	r3, [r3, #4]
 8012000:	2b00      	cmp	r3, #0
 8012002:	d00b      	beq.n	801201c <LoRaMacMibSetRequestConfirm+0x230>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	685b      	ldr	r3, [r3, #4]
 8012008:	4619      	mov	r1, r3
 801200a:	2003      	movs	r0, #3
 801200c:	f001 ffc2 	bl	8013f94 <LoRaMacCryptoSetKey>
 8012010:	4603      	mov	r3, r0
 8012012:	2b00      	cmp	r3, #0
 8012014:	f000 8236 	beq.w	8012484 <LoRaMacMibSetRequestConfirm+0x698>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012018:	2311      	movs	r3, #17
 801201a:	e24f      	b.n	80124bc <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801201c:	2303      	movs	r3, #3
 801201e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012020:	e230      	b.n	8012484 <LoRaMacMibSetRequestConfirm+0x698>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	685b      	ldr	r3, [r3, #4]
 8012026:	2b00      	cmp	r3, #0
 8012028:	d00b      	beq.n	8012042 <LoRaMacMibSetRequestConfirm+0x256>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	685b      	ldr	r3, [r3, #4]
 801202e:	4619      	mov	r1, r3
 8012030:	207f      	movs	r0, #127	@ 0x7f
 8012032:	f001 ffaf 	bl	8013f94 <LoRaMacCryptoSetKey>
 8012036:	4603      	mov	r3, r0
 8012038:	2b00      	cmp	r3, #0
 801203a:	f000 8225 	beq.w	8012488 <LoRaMacMibSetRequestConfirm+0x69c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801203e:	2311      	movs	r3, #17
 8012040:	e23c      	b.n	80124bc <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012042:	2303      	movs	r3, #3
 8012044:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012046:	e21f      	b.n	8012488 <LoRaMacMibSetRequestConfirm+0x69c>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 ) /* ST_WORKAROUND: reduced LORAMAC_MAX_MC_CTX */
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	685b      	ldr	r3, [r3, #4]
 801204c:	2b00      	cmp	r3, #0
 801204e:	d00b      	beq.n	8012068 <LoRaMacMibSetRequestConfirm+0x27c>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	685b      	ldr	r3, [r3, #4]
 8012054:	4619      	mov	r1, r3
 8012056:	2080      	movs	r0, #128	@ 0x80
 8012058:	f001 ff9c 	bl	8013f94 <LoRaMacCryptoSetKey>
 801205c:	4603      	mov	r3, r0
 801205e:	2b00      	cmp	r3, #0
 8012060:	f000 8214 	beq.w	801248c <LoRaMacMibSetRequestConfirm+0x6a0>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012064:	2311      	movs	r3, #17
 8012066:	e229      	b.n	80124bc <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012068:	2303      	movs	r3, #3
 801206a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801206c:	e20e      	b.n	801248c <LoRaMacMibSetRequestConfirm+0x6a0>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	685b      	ldr	r3, [r3, #4]
 8012072:	2b00      	cmp	r3, #0
 8012074:	d00b      	beq.n	801208e <LoRaMacMibSetRequestConfirm+0x2a2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	685b      	ldr	r3, [r3, #4]
 801207a:	4619      	mov	r1, r3
 801207c:	2081      	movs	r0, #129	@ 0x81
 801207e:	f001 ff89 	bl	8013f94 <LoRaMacCryptoSetKey>
 8012082:	4603      	mov	r3, r0
 8012084:	2b00      	cmp	r3, #0
 8012086:	f000 8203 	beq.w	8012490 <LoRaMacMibSetRequestConfirm+0x6a4>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801208a:	2311      	movs	r3, #17
 801208c:	e216      	b.n	80124bc <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801208e:	2303      	movs	r3, #3
 8012090:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012092:	e1fd      	b.n	8012490 <LoRaMacMibSetRequestConfirm+0x6a4>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	685b      	ldr	r3, [r3, #4]
 8012098:	2b00      	cmp	r3, #0
 801209a:	d00b      	beq.n	80120b4 <LoRaMacMibSetRequestConfirm+0x2c8>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	685b      	ldr	r3, [r3, #4]
 80120a0:	4619      	mov	r1, r3
 80120a2:	2082      	movs	r0, #130	@ 0x82
 80120a4:	f001 ff76 	bl	8013f94 <LoRaMacCryptoSetKey>
 80120a8:	4603      	mov	r3, r0
 80120aa:	2b00      	cmp	r3, #0
 80120ac:	f000 81f2 	beq.w	8012494 <LoRaMacMibSetRequestConfirm+0x6a8>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80120b0:	2311      	movs	r3, #17
 80120b2:	e203      	b.n	80124bc <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80120b4:	2303      	movs	r3, #3
 80120b6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80120b8:	e1ec      	b.n	8012494 <LoRaMacMibSetRequestConfirm+0x6a8>
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	791a      	ldrb	r2, [r3, #4]
 80120be:	4b0b      	ldr	r3, [pc, #44]	@ (80120ec <LoRaMacMibSetRequestConfirm+0x300>)
 80120c0:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 80120c4:	4b0a      	ldr	r3, [pc, #40]	@ (80120f0 <LoRaMacMibSetRequestConfirm+0x304>)
 80120c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80120c8:	4a08      	ldr	r2, [pc, #32]	@ (80120ec <LoRaMacMibSetRequestConfirm+0x300>)
 80120ca:	f892 2105 	ldrb.w	r2, [r2, #261]	@ 0x105
 80120ce:	4610      	mov	r0, r2
 80120d0:	4798      	blx	r3
            /* ST_WORAROUND_BEGIN: Required to avoid keeping the radio active after init */
            Radio.Sleep( );
 80120d2:	4b07      	ldr	r3, [pc, #28]	@ (80120f0 <LoRaMacMibSetRequestConfirm+0x304>)
 80120d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80120d6:	4798      	blx	r3
            /* ST_WORKAROUND_END */
            break;
 80120d8:	e1e5      	b.n	80124a6 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	791a      	ldrb	r2, [r3, #4]
 80120de:	4b03      	ldr	r3, [pc, #12]	@ (80120ec <LoRaMacMibSetRequestConfirm+0x300>)
 80120e0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
            break;
 80120e4:	e1df      	b.n	80124a6 <LoRaMacMibSetRequestConfirm+0x6ba>
 80120e6:	bf00      	nop
 80120e8:	200008d8 	.word	0x200008d8
 80120ec:	20000df8 	.word	0x20000df8
 80120f0:	0801f57c 	.word	0x0801f57c
        }
        /* ST_WORKAROUND_END */
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	7a1b      	ldrb	r3, [r3, #8]
 80120f8:	b25b      	sxtb	r3, r3
 80120fa:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80120fc:	4bb3      	ldr	r3, [pc, #716]	@ (80123cc <LoRaMacMibSetRequestConfirm+0x5e0>)
 80120fe:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 8012102:	727b      	strb	r3, [r7, #9]
            /* ST_WORAROUND_BEGIN: Check also the Rx Frequency parameter */
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 8012104:	4bb1      	ldr	r3, [pc, #708]	@ (80123cc <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012106:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801210a:	f107 0108 	add.w	r1, r7, #8
 801210e:	2207      	movs	r2, #7
 8012110:	4618      	mov	r0, r3
 8012112:	f002 fd5a 	bl	8014bca <RegionVerify>
 8012116:	4603      	mov	r3, r0
 8012118:	f083 0301 	eor.w	r3, r3, #1
 801211c:	b2db      	uxtb	r3, r3
 801211e:	2b00      	cmp	r3, #0
 8012120:	d002      	beq.n	8012128 <LoRaMacMibSetRequestConfirm+0x33c>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012122:	2303      	movs	r3, #3
 8012124:	75fb      	strb	r3, [r7, #23]
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            /* ST_WORKAROUND_END */
            break;
 8012126:	e1be      	b.n	80124a6 <LoRaMacMibSetRequestConfirm+0x6ba>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	685b      	ldr	r3, [r3, #4]
 801212c:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 801212e:	4ba7      	ldr	r3, [pc, #668]	@ (80123cc <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012130:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012134:	f107 0108 	add.w	r1, r7, #8
 8012138:	2200      	movs	r2, #0
 801213a:	4618      	mov	r0, r3
 801213c:	f002 fd45 	bl	8014bca <RegionVerify>
 8012140:	4603      	mov	r3, r0
 8012142:	f083 0301 	eor.w	r3, r3, #1
 8012146:	b2db      	uxtb	r3, r3
 8012148:	2b00      	cmp	r3, #0
 801214a:	d002      	beq.n	8012152 <LoRaMacMibSetRequestConfirm+0x366>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 801214c:	2303      	movs	r3, #3
 801214e:	75fb      	strb	r3, [r7, #23]
            break;
 8012150:	e1a9      	b.n	80124a6 <LoRaMacMibSetRequestConfirm+0x6ba>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 8012152:	4b9e      	ldr	r3, [pc, #632]	@ (80123cc <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012154:	687a      	ldr	r2, [r7, #4]
 8012156:	3364      	adds	r3, #100	@ 0x64
 8012158:	3204      	adds	r2, #4
 801215a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801215e:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8012162:	e1a0      	b.n	80124a6 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	7a1b      	ldrb	r3, [r3, #8]
 8012168:	b25b      	sxtb	r3, r3
 801216a:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801216c:	4b97      	ldr	r3, [pc, #604]	@ (80123cc <LoRaMacMibSetRequestConfirm+0x5e0>)
 801216e:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 8012172:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8012174:	4b95      	ldr	r3, [pc, #596]	@ (80123cc <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012176:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801217a:	f107 0108 	add.w	r1, r7, #8
 801217e:	2207      	movs	r2, #7
 8012180:	4618      	mov	r0, r3
 8012182:	f002 fd22 	bl	8014bca <RegionVerify>
 8012186:	4603      	mov	r3, r0
 8012188:	2b00      	cmp	r3, #0
 801218a:	d008      	beq.n	801219e <LoRaMacMibSetRequestConfirm+0x3b2>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 801218c:	4b8f      	ldr	r3, [pc, #572]	@ (80123cc <LoRaMacMibSetRequestConfirm+0x5e0>)
 801218e:	687a      	ldr	r2, [r7, #4]
 8012190:	33a8      	adds	r3, #168	@ 0xa8
 8012192:	3204      	adds	r2, #4
 8012194:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012198:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801219c:	e183      	b.n	80124a6 <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801219e:	2303      	movs	r3, #3
 80121a0:	75fb      	strb	r3, [r7, #23]
            break;
 80121a2:	e180      	b.n	80124a6 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	7a1b      	ldrb	r3, [r3, #8]
 80121a8:	b25b      	sxtb	r3, r3
 80121aa:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80121ac:	4b87      	ldr	r3, [pc, #540]	@ (80123cc <LoRaMacMibSetRequestConfirm+0x5e0>)
 80121ae:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 80121b2:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 80121b4:	4b85      	ldr	r3, [pc, #532]	@ (80123cc <LoRaMacMibSetRequestConfirm+0x5e0>)
 80121b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80121ba:	f107 0108 	add.w	r1, r7, #8
 80121be:	2207      	movs	r2, #7
 80121c0:	4618      	mov	r0, r3
 80121c2:	f002 fd02 	bl	8014bca <RegionVerify>
 80121c6:	4603      	mov	r3, r0
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	d019      	beq.n	8012200 <LoRaMacMibSetRequestConfirm+0x414>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 80121cc:	4b7f      	ldr	r3, [pc, #508]	@ (80123cc <LoRaMacMibSetRequestConfirm+0x5e0>)
 80121ce:	687a      	ldr	r2, [r7, #4]
 80121d0:	336c      	adds	r3, #108	@ 0x6c
 80121d2:	3204      	adds	r2, #4
 80121d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80121d8:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 80121dc:	4b7b      	ldr	r3, [pc, #492]	@ (80123cc <LoRaMacMibSetRequestConfirm+0x5e0>)
 80121de:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 80121e2:	2b02      	cmp	r3, #2
 80121e4:	f040 8158 	bne.w	8012498 <LoRaMacMibSetRequestConfirm+0x6ac>
 80121e8:	4b78      	ldr	r3, [pc, #480]	@ (80123cc <LoRaMacMibSetRequestConfirm+0x5e0>)
 80121ea:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 80121ee:	2b00      	cmp	r3, #0
 80121f0:	f000 8152 	beq.w	8012498 <LoRaMacMibSetRequestConfirm+0x6ac>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 80121f4:	4b76      	ldr	r3, [pc, #472]	@ (80123d0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80121f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80121f8:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 80121fa:	f7fe fca7 	bl	8010b4c <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80121fe:	e14b      	b.n	8012498 <LoRaMacMibSetRequestConfirm+0x6ac>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012200:	2303      	movs	r3, #3
 8012202:	75fb      	strb	r3, [r7, #23]
            break;
 8012204:	e148      	b.n	8012498 <LoRaMacMibSetRequestConfirm+0x6ac>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	7a1b      	ldrb	r3, [r3, #8]
 801220a:	b25b      	sxtb	r3, r3
 801220c:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801220e:	4b6f      	ldr	r3, [pc, #444]	@ (80123cc <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012210:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 8012214:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8012216:	4b6d      	ldr	r3, [pc, #436]	@ (80123cc <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012218:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801221c:	f107 0108 	add.w	r1, r7, #8
 8012220:	2207      	movs	r2, #7
 8012222:	4618      	mov	r0, r3
 8012224:	f002 fcd1 	bl	8014bca <RegionVerify>
 8012228:	4603      	mov	r3, r0
 801222a:	2b00      	cmp	r3, #0
 801222c:	d008      	beq.n	8012240 <LoRaMacMibSetRequestConfirm+0x454>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 801222e:	4b67      	ldr	r3, [pc, #412]	@ (80123cc <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012230:	687a      	ldr	r2, [r7, #4]
 8012232:	33b0      	adds	r3, #176	@ 0xb0
 8012234:	3204      	adds	r2, #4
 8012236:	e892 0003 	ldmia.w	r2, {r0, r1}
 801223a:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801223e:	e132      	b.n	80124a6 <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012240:	2303      	movs	r3, #3
 8012242:	75fb      	strb	r3, [r7, #23]
            break;
 8012244:	e12f      	b.n	80124a6 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	685b      	ldr	r3, [r3, #4]
 801224a:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 801224c:	2301      	movs	r3, #1
 801224e:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8012250:	4b5e      	ldr	r3, [pc, #376]	@ (80123cc <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012252:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012256:	f107 020c 	add.w	r2, r7, #12
 801225a:	4611      	mov	r1, r2
 801225c:	4618      	mov	r0, r3
 801225e:	f002 fcdd 	bl	8014c1c <RegionChanMaskSet>
 8012262:	4603      	mov	r3, r0
 8012264:	f083 0301 	eor.w	r3, r3, #1
 8012268:	b2db      	uxtb	r3, r3
 801226a:	2b00      	cmp	r3, #0
 801226c:	f000 8116 	beq.w	801249c <LoRaMacMibSetRequestConfirm+0x6b0>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012270:	2303      	movs	r3, #3
 8012272:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012274:	e112      	b.n	801249c <LoRaMacMibSetRequestConfirm+0x6b0>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	685b      	ldr	r3, [r3, #4]
 801227a:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 801227c:	2300      	movs	r3, #0
 801227e:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8012280:	4b52      	ldr	r3, [pc, #328]	@ (80123cc <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012282:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012286:	f107 020c 	add.w	r2, r7, #12
 801228a:	4611      	mov	r1, r2
 801228c:	4618      	mov	r0, r3
 801228e:	f002 fcc5 	bl	8014c1c <RegionChanMaskSet>
 8012292:	4603      	mov	r3, r0
 8012294:	f083 0301 	eor.w	r3, r3, #1
 8012298:	b2db      	uxtb	r3, r3
 801229a:	2b00      	cmp	r3, #0
 801229c:	f000 8100 	beq.w	80124a0 <LoRaMacMibSetRequestConfirm+0x6b4>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80122a0:	2303      	movs	r3, #3
 80122a2:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80122a4:	e0fc      	b.n	80124a0 <LoRaMacMibSetRequestConfirm+0x6b4>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	791b      	ldrb	r3, [r3, #4]
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d009      	beq.n	80122c2 <LoRaMacMibSetRequestConfirm+0x4d6>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 80122b2:	2b0f      	cmp	r3, #15
 80122b4:	d805      	bhi.n	80122c2 <LoRaMacMibSetRequestConfirm+0x4d6>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	791a      	ldrb	r2, [r3, #4]
 80122ba:	4b44      	ldr	r3, [pc, #272]	@ (80123cc <LoRaMacMibSetRequestConfirm+0x5e0>)
 80122bc:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80122c0:	e0f1      	b.n	80124a6 <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80122c2:	2303      	movs	r3, #3
 80122c4:	75fb      	strb	r3, [r7, #23]
            break;
 80122c6:	e0ee      	b.n	80124a6 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	685b      	ldr	r3, [r3, #4]
 80122cc:	4a3f      	ldr	r2, [pc, #252]	@ (80123cc <LoRaMacMibSetRequestConfirm+0x5e0>)
 80122ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
            break;
 80122d0:	e0e9      	b.n	80124a6 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	685b      	ldr	r3, [r3, #4]
 80122d6:	4a3d      	ldr	r2, [pc, #244]	@ (80123cc <LoRaMacMibSetRequestConfirm+0x5e0>)
 80122d8:	6513      	str	r3, [r2, #80]	@ 0x50
            break;
 80122da:	e0e4      	b.n	80124a6 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	685b      	ldr	r3, [r3, #4]
 80122e0:	4a3a      	ldr	r2, [pc, #232]	@ (80123cc <LoRaMacMibSetRequestConfirm+0x5e0>)
 80122e2:	6553      	str	r3, [r2, #84]	@ 0x54
            break;
 80122e4:	e0df      	b.n	80124a6 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	685b      	ldr	r3, [r3, #4]
 80122ea:	4a38      	ldr	r2, [pc, #224]	@ (80123cc <LoRaMacMibSetRequestConfirm+0x5e0>)
 80122ec:	6593      	str	r3, [r2, #88]	@ 0x58
            break;
 80122ee:	e0da      	b.n	80124a6 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	685b      	ldr	r3, [r3, #4]
 80122f4:	4a35      	ldr	r2, [pc, #212]	@ (80123cc <LoRaMacMibSetRequestConfirm+0x5e0>)
 80122f6:	65d3      	str	r3, [r2, #92]	@ 0x5c
            break;
 80122f8:	e0d5      	b.n	80124a6 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8012300:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 8012302:	4b32      	ldr	r3, [pc, #200]	@ (80123cc <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012304:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012308:	f107 0108 	add.w	r1, r7, #8
 801230c:	2206      	movs	r2, #6
 801230e:	4618      	mov	r0, r3
 8012310:	f002 fc5b 	bl	8014bca <RegionVerify>
 8012314:	4603      	mov	r3, r0
 8012316:	2b00      	cmp	r3, #0
 8012318:	d005      	beq.n	8012326 <LoRaMacMibSetRequestConfirm+0x53a>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 801231a:	f997 2008 	ldrsb.w	r2, [r7, #8]
 801231e:	4b2b      	ldr	r3, [pc, #172]	@ (80123cc <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012320:	f883 20cd 	strb.w	r2, [r3, #205]	@ 0xcd
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012324:	e0bf      	b.n	80124a6 <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012326:	2303      	movs	r3, #3
 8012328:	75fb      	strb	r3, [r7, #23]
            break;
 801232a:	e0bc      	b.n	80124a6 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8012332:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012334:	4b25      	ldr	r3, [pc, #148]	@ (80123cc <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012336:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 801233a:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 801233c:	4b23      	ldr	r3, [pc, #140]	@ (80123cc <LoRaMacMibSetRequestConfirm+0x5e0>)
 801233e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012342:	f107 0108 	add.w	r1, r7, #8
 8012346:	2205      	movs	r2, #5
 8012348:	4618      	mov	r0, r3
 801234a:	f002 fc3e 	bl	8014bca <RegionVerify>
 801234e:	4603      	mov	r3, r0
 8012350:	2b00      	cmp	r3, #0
 8012352:	d005      	beq.n	8012360 <LoRaMacMibSetRequestConfirm+0x574>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8012354:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8012358:	4b1c      	ldr	r3, [pc, #112]	@ (80123cc <LoRaMacMibSetRequestConfirm+0x5e0>)
 801235a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801235e:	e0a2      	b.n	80124a6 <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012360:	2303      	movs	r3, #3
 8012362:	75fb      	strb	r3, [r7, #23]
            break;
 8012364:	e09f      	b.n	80124a6 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	f993 3004 	ldrsb.w	r3, [r3, #4]
 801236c:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 801236e:	4b17      	ldr	r3, [pc, #92]	@ (80123cc <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012370:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012374:	f107 0108 	add.w	r1, r7, #8
 8012378:	220a      	movs	r2, #10
 801237a:	4618      	mov	r0, r3
 801237c:	f002 fc25 	bl	8014bca <RegionVerify>
 8012380:	4603      	mov	r3, r0
 8012382:	2b00      	cmp	r3, #0
 8012384:	d005      	beq.n	8012392 <LoRaMacMibSetRequestConfirm+0x5a6>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 8012386:	f997 2008 	ldrsb.w	r2, [r7, #8]
 801238a:	4b10      	ldr	r3, [pc, #64]	@ (80123cc <LoRaMacMibSetRequestConfirm+0x5e0>)
 801238c:	f883 20cc 	strb.w	r2, [r3, #204]	@ 0xcc
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012390:	e089      	b.n	80124a6 <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012392:	2303      	movs	r3, #3
 8012394:	75fb      	strb	r3, [r7, #23]
            break;
 8012396:	e086      	b.n	80124a6 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 801239e:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 80123a0:	4b0a      	ldr	r3, [pc, #40]	@ (80123cc <LoRaMacMibSetRequestConfirm+0x5e0>)
 80123a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80123a6:	f107 0108 	add.w	r1, r7, #8
 80123aa:	2209      	movs	r2, #9
 80123ac:	4618      	mov	r0, r3
 80123ae:	f002 fc0c 	bl	8014bca <RegionVerify>
 80123b2:	4603      	mov	r3, r0
 80123b4:	2b00      	cmp	r3, #0
 80123b6:	d005      	beq.n	80123c4 <LoRaMacMibSetRequestConfirm+0x5d8>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 80123b8:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80123bc:	4b03      	ldr	r3, [pc, #12]	@ (80123cc <LoRaMacMibSetRequestConfirm+0x5e0>)
 80123be:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80123c2:	e070      	b.n	80124a6 <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80123c4:	2303      	movs	r3, #3
 80123c6:	75fb      	strb	r3, [r7, #23]
            break;
 80123c8:	e06d      	b.n	80124a6 <LoRaMacMibSetRequestConfirm+0x6ba>
 80123ca:	bf00      	nop
 80123cc:	20000df8 	.word	0x20000df8
 80123d0:	0801f57c 	.word	0x0801f57c
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	685b      	ldr	r3, [r3, #4]
 80123d8:	4a3a      	ldr	r2, [pc, #232]	@ (80124c4 <LoRaMacMibSetRequestConfirm+0x6d8>)
 80123da:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 80123de:	4b39      	ldr	r3, [pc, #228]	@ (80124c4 <LoRaMacMibSetRequestConfirm+0x6d8>)
 80123e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80123e4:	4a37      	ldr	r2, [pc, #220]	@ (80124c4 <LoRaMacMibSetRequestConfirm+0x6d8>)
 80123e6:	6453      	str	r3, [r2, #68]	@ 0x44
            break;
 80123e8:	e05d      	b.n	80124a6 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	791a      	ldrb	r2, [r3, #4]
 80123ee:	4b35      	ldr	r3, [pc, #212]	@ (80124c4 <LoRaMacMibSetRequestConfirm+0x6d8>)
 80123f0:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
 80123f4:	4b33      	ldr	r3, [pc, #204]	@ (80124c4 <LoRaMacMibSetRequestConfirm+0x6d8>)
 80123f6:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 80123fa:	4b32      	ldr	r3, [pc, #200]	@ (80124c4 <LoRaMacMibSetRequestConfirm+0x6d8>)
 80123fc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
            break;
 8012400:	e051      	b.n	80124a6 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	685b      	ldr	r3, [r3, #4]
 8012406:	4a2f      	ldr	r2, [pc, #188]	@ (80124c4 <LoRaMacMibSetRequestConfirm+0x6d8>)
 8012408:	67d3      	str	r3, [r2, #124]	@ 0x7c
            break;
 801240a:	e04c      	b.n	80124a6 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	685b      	ldr	r3, [r3, #4]
 8012410:	4a2c      	ldr	r2, [pc, #176]	@ (80124c4 <LoRaMacMibSetRequestConfirm+0x6d8>)
 8012412:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
            break;
 8012416:	e046      	b.n	80124a6 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_NVM_CTXS:
        {
            status = RestoreNvmData( );
 8012418:	f7fe fdc8 	bl	8010fac <RestoreNvmData>
 801241c:	4603      	mov	r3, r0
 801241e:	75fb      	strb	r3, [r7, #23]
            break;
 8012420:	e041      	b.n	80124a6 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	799b      	ldrb	r3, [r3, #6]
 8012426:	2b01      	cmp	r3, #1
 8012428:	d80d      	bhi.n	8012446 <LoRaMacMibSetRequestConfirm+0x65a>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 801242a:	4a26      	ldr	r2, [pc, #152]	@ (80124c4 <LoRaMacMibSetRequestConfirm+0x6d8>)
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	685b      	ldr	r3, [r3, #4]
 8012430:	f8c2 3118 	str.w	r3, [r2, #280]	@ 0x118

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	6858      	ldr	r0, [r3, #4]
 8012438:	f001 fd10 	bl	8013e5c <LoRaMacCryptoSetLrWanVersion>
 801243c:	4603      	mov	r3, r0
 801243e:	2b00      	cmp	r3, #0
 8012440:	d030      	beq.n	80124a4 <LoRaMacMibSetRequestConfirm+0x6b8>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012442:	2311      	movs	r3, #17
 8012444:	e03a      	b.n	80124bc <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012446:	2303      	movs	r3, #3
 8012448:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801244a:	e02b      	b.n	80124a4 <LoRaMacMibSetRequestConfirm+0x6b8>
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	685b      	ldr	r3, [r3, #4]
 8012450:	4a1c      	ldr	r2, [pc, #112]	@ (80124c4 <LoRaMacMibSetRequestConfirm+0x6d8>)
 8012452:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
            break;
 8012456:	e026      	b.n	80124a6 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MIB_IS_CERT_FPORT_ON:
        {
            Nvm.MacGroup2.IsCertPortOn = mibSet->Param.IsCertPortOn;
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	791a      	ldrb	r2, [r3, #4]
 801245c:	4b19      	ldr	r3, [pc, #100]	@ (80124c4 <LoRaMacMibSetRequestConfirm+0x6d8>)
 801245e:	f883 210b 	strb.w	r2, [r3, #267]	@ 0x10b
            break;
 8012462:	e020      	b.n	80124a6 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
#endif /* LORAMAC_VERSION */
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 8012464:	6878      	ldr	r0, [r7, #4]
 8012466:	f000 fc88 	bl	8012d7a <LoRaMacMibClassBSetRequestConfirm>
 801246a:	4603      	mov	r3, r0
 801246c:	75fb      	strb	r3, [r7, #23]
            break;
 801246e:	e01a      	b.n	80124a6 <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8012470:	bf00      	nop
 8012472:	e018      	b.n	80124a6 <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8012474:	bf00      	nop
 8012476:	e016      	b.n	80124a6 <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8012478:	bf00      	nop
 801247a:	e014      	b.n	80124a6 <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 801247c:	bf00      	nop
 801247e:	e012      	b.n	80124a6 <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8012480:	bf00      	nop
 8012482:	e010      	b.n	80124a6 <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8012484:	bf00      	nop
 8012486:	e00e      	b.n	80124a6 <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8012488:	bf00      	nop
 801248a:	e00c      	b.n	80124a6 <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 801248c:	bf00      	nop
 801248e:	e00a      	b.n	80124a6 <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8012490:	bf00      	nop
 8012492:	e008      	b.n	80124a6 <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8012494:	bf00      	nop
 8012496:	e006      	b.n	80124a6 <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8012498:	bf00      	nop
 801249a:	e004      	b.n	80124a6 <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 801249c:	bf00      	nop
 801249e:	e002      	b.n	80124a6 <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 80124a0:	bf00      	nop
 80124a2:	e000      	b.n	80124a6 <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 80124a4:	bf00      	nop
        }
    }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( status == LORAMAC_STATUS_OK )
 80124a6:	7dfb      	ldrb	r3, [r7, #23]
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	d106      	bne.n	80124ba <LoRaMacMibSetRequestConfirm+0x6ce>
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 80124ac:	4a06      	ldr	r2, [pc, #24]	@ (80124c8 <LoRaMacMibSetRequestConfirm+0x6dc>)
 80124ae:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 80124b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80124b6:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
    }
#endif /* LORAMAC_VERSION */
    return status;
 80124ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80124bc:	4618      	mov	r0, r3
 80124be:	3718      	adds	r7, #24
 80124c0:	46bd      	mov	sp, r7
 80124c2:	bd80      	pop	{r7, pc}
 80124c4:	20000df8 	.word	0x20000df8
 80124c8:	200008d8 	.word	0x200008d8

080124cc <LoRaMacMlmeRequest>:
    }
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 80124cc:	b580      	push	{r7, lr}
 80124ce:	b08a      	sub	sp, #40	@ 0x28
 80124d0:	af00      	add	r7, sp, #0
 80124d2:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 80124d4:	2302      	movs	r3, #2
 80124d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 80124da:	2300      	movs	r3, #0
 80124dc:	83bb      	strh	r3, [r7, #28]

    if( mlmeRequest == NULL )
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	d101      	bne.n	80124e8 <LoRaMacMlmeRequest+0x1c>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80124e4:	2303      	movs	r3, #3
 80124e6:	e16c      	b.n	80127c2 <LoRaMacMlmeRequest+0x2f6>
    }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	2200      	movs	r2, #0
 80124ec:	611a      	str	r2, [r3, #16]
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 80124ee:	f7fc fc5f 	bl	800edb0 <LoRaMacIsBusy>
 80124f2:	4603      	mov	r3, r0
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	d001      	beq.n	80124fc <LoRaMacMlmeRequest+0x30>
    {
        return LORAMAC_STATUS_BUSY;
 80124f8:	2301      	movs	r3, #1
 80124fa:	e162      	b.n	80127c2 <LoRaMacMlmeRequest+0x2f6>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 80124fc:	f001 f956 	bl	80137ac <LoRaMacConfirmQueueIsFull>
 8012500:	4603      	mov	r3, r0
 8012502:	2b00      	cmp	r3, #0
 8012504:	d001      	beq.n	801250a <LoRaMacMlmeRequest+0x3e>
    {
        return LORAMAC_STATUS_BUSY;
 8012506:	2301      	movs	r3, #1
 8012508:	e15b      	b.n	80127c2 <LoRaMacMlmeRequest+0x2f6>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 801250a:	f001 f943 	bl	8013794 <LoRaMacConfirmQueueGetCnt>
 801250e:	4603      	mov	r3, r0
 8012510:	2b00      	cmp	r3, #0
 8012512:	d104      	bne.n	801251e <LoRaMacMlmeRequest+0x52>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 8012514:	2214      	movs	r2, #20
 8012516:	2100      	movs	r1, #0
 8012518:	48ac      	ldr	r0, [pc, #688]	@ (80127cc <LoRaMacMlmeRequest+0x300>)
 801251a:	f004 fdf7 	bl	801710c <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801251e:	4bac      	ldr	r3, [pc, #688]	@ (80127d0 <LoRaMacMlmeRequest+0x304>)
 8012520:	2201      	movs	r2, #1
 8012522:	f883 2459 	strb.w	r2, [r3, #1113]	@ 0x459

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8012526:	4aaa      	ldr	r2, [pc, #680]	@ (80127d0 <LoRaMacMlmeRequest+0x304>)
 8012528:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 801252c:	f043 0304 	orr.w	r3, r3, #4
 8012530:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
    queueElement.Request = mlmeRequest->Type;
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	781b      	ldrb	r3, [r3, #0]
 8012538:	f887 3020 	strb.w	r3, [r7, #32]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801253c:	2301      	movs	r3, #1
 801253e:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    queueElement.RestrictCommonReadyToHandle = false;
 8012542:	2300      	movs	r3, #0
 8012544:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    queueElement.ReadyToHandle = false;
 8012548:	2300      	movs	r3, #0
 801254a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
#endif /* LORAMAC_VERSION */

    switch( mlmeRequest->Type )
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	781b      	ldrb	r3, [r3, #0]
 8012552:	3b01      	subs	r3, #1
 8012554:	2b0c      	cmp	r3, #12
 8012556:	f200 8108 	bhi.w	801276a <LoRaMacMlmeRequest+0x29e>
 801255a:	a201      	add	r2, pc, #4	@ (adr r2, 8012560 <LoRaMacMlmeRequest+0x94>)
 801255c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012560:	08012595 	.word	0x08012595
 8012564:	0801276b 	.word	0x0801276b
 8012568:	0801276b 	.word	0x0801276b
 801256c:	0801266b 	.word	0x0801266b
 8012570:	0801268d 	.word	0x0801268d
 8012574:	0801276b 	.word	0x0801276b
 8012578:	0801276b 	.word	0x0801276b
 801257c:	0801276b 	.word	0x0801276b
 8012580:	080126ab 	.word	0x080126ab
 8012584:	0801276b 	.word	0x0801276b
 8012588:	08012739 	.word	0x08012739
 801258c:	080126cd 	.word	0x080126cd
 8012590:	08012717 	.word	0x08012717
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8012594:	4b8e      	ldr	r3, [pc, #568]	@ (80127d0 <LoRaMacMlmeRequest+0x304>)
 8012596:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 801259a:	f003 0320 	and.w	r3, r3, #32
 801259e:	2b00      	cmp	r3, #0
 80125a0:	d001      	beq.n	80125a6 <LoRaMacMlmeRequest+0xda>
            {
                return LORAMAC_STATUS_BUSY;
 80125a2:	2301      	movs	r3, #1
 80125a4:	e10d      	b.n	80127c2 <LoRaMacMlmeRequest+0x2f6>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
            }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_OTAA )
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	791b      	ldrb	r3, [r3, #4]
 80125aa:	2b02      	cmp	r3, #2
 80125ac:	d12e      	bne.n	801260c <LoRaMacMlmeRequest+0x140>
            {
                ResetMacParameters( );
 80125ae:	f7fe f997 	bl	80108e0 <ResetMacParameters>

                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 80125b2:	4b88      	ldr	r3, [pc, #544]	@ (80127d4 <LoRaMacMlmeRequest+0x308>)
 80125b4:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	795b      	ldrb	r3, [r3, #5]
 80125bc:	b25b      	sxtb	r3, r3
 80125be:	2200      	movs	r2, #0
 80125c0:	4619      	mov	r1, r3
 80125c2:	f002 fbea 	bl	8014d9a <RegionAlternateDr>
 80125c6:	4603      	mov	r3, r0
 80125c8:	461a      	mov	r2, r3
 80125ca:	4b82      	ldr	r3, [pc, #520]	@ (80127d4 <LoRaMacMlmeRequest+0x308>)
 80125cc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 80125d0:	2307      	movs	r3, #7
 80125d2:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

                status = SendReJoinReq( JOIN_REQ );
 80125d6:	20ff      	movs	r0, #255	@ 0xff
 80125d8:	f7fd ff00 	bl	80103dc <SendReJoinReq>
 80125dc:	4603      	mov	r3, r0
 80125de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

                if( status != LORAMAC_STATUS_OK )
 80125e2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80125e6:	2b00      	cmp	r3, #0
 80125e8:	f000 80c1 	beq.w	801276e <LoRaMacMlmeRequest+0x2a2>
                {
                    // Revert back the previous datarate ( mainly used for US915 like regions )
                    Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 80125ec:	4b79      	ldr	r3, [pc, #484]	@ (80127d4 <LoRaMacMlmeRequest+0x308>)
 80125ee:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	795b      	ldrb	r3, [r3, #5]
 80125f6:	b25b      	sxtb	r3, r3
 80125f8:	2201      	movs	r2, #1
 80125fa:	4619      	mov	r1, r3
 80125fc:	f002 fbcd 	bl	8014d9a <RegionAlternateDr>
 8012600:	4603      	mov	r3, r0
 8012602:	461a      	mov	r2, r3
 8012604:	4b73      	ldr	r3, [pc, #460]	@ (80127d4 <LoRaMacMlmeRequest+0x308>)
 8012606:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                MacCtx.MacCallbacks->MacProcessNotify( );
                MacCtx.MacFlags.Bits.MacDone = 1;
                status = LORAMAC_STATUS_OK;
            }
#endif /* LORAMAC_VERSION */
            break;
 801260a:	e0b0      	b.n	801276e <LoRaMacMlmeRequest+0x2a2>
            else if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_ABP )
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	791b      	ldrb	r3, [r3, #4]
 8012610:	2b01      	cmp	r3, #1
 8012612:	f040 80ac 	bne.w	801276e <LoRaMacMlmeRequest+0x2a2>
                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 8012616:	4b6f      	ldr	r3, [pc, #444]	@ (80127d4 <LoRaMacMlmeRequest+0x308>)
 8012618:	2200      	movs	r2, #0
 801261a:	f883 2109 	strb.w	r2, [r3, #265]	@ 0x109
                params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 801261e:	2302      	movs	r3, #2
 8012620:	763b      	strb	r3, [r7, #24]
                RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8012622:	4b6c      	ldr	r3, [pc, #432]	@ (80127d4 <LoRaMacMlmeRequest+0x308>)
 8012624:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012628:	f107 020c 	add.w	r2, r7, #12
 801262c:	4611      	mov	r1, r2
 801262e:	4618      	mov	r0, r3
 8012630:	f002 fab9 	bl	8014ba6 <RegionInitDefaults>
                Nvm.MacGroup2.NetworkActivation = mlmeRequest->Req.Join.NetworkActivation;
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	791a      	ldrb	r2, [r3, #4]
 8012638:	4b66      	ldr	r3, [pc, #408]	@ (80127d4 <LoRaMacMlmeRequest+0x308>)
 801263a:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 801263e:	2300      	movs	r3, #0
 8012640:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
                queueElement.ReadyToHandle = true;
 8012644:	2301      	movs	r3, #1
 8012646:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
                MacCtx.MacCallbacks->MacProcessNotify( );
 801264a:	4b61      	ldr	r3, [pc, #388]	@ (80127d0 <LoRaMacMlmeRequest+0x304>)
 801264c:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8012650:	691b      	ldr	r3, [r3, #16]
 8012652:	4798      	blx	r3
                MacCtx.MacFlags.Bits.MacDone = 1;
 8012654:	4a5e      	ldr	r2, [pc, #376]	@ (80127d0 <LoRaMacMlmeRequest+0x304>)
 8012656:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 801265a:	f043 0320 	orr.w	r3, r3, #32
 801265e:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
                status = LORAMAC_STATUS_OK;
 8012662:	2300      	movs	r3, #0
 8012664:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8012668:	e081      	b.n	801276e <LoRaMacMlmeRequest+0x2a2>
        }
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 801266a:	2300      	movs	r3, #0
 801266c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8012670:	f107 031c 	add.w	r3, r7, #28
 8012674:	2200      	movs	r2, #0
 8012676:	4619      	mov	r1, r3
 8012678:	2002      	movs	r0, #2
 801267a:	f000 fcfd 	bl	8013078 <LoRaMacCommandsAddCmd>
 801267e:	4603      	mov	r3, r0
 8012680:	2b00      	cmp	r3, #0
 8012682:	d076      	beq.n	8012772 <LoRaMacMlmeRequest+0x2a6>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012684:	2313      	movs	r3, #19
 8012686:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 801268a:	e072      	b.n	8012772 <LoRaMacMlmeRequest+0x2a6>
            break;
        }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	8898      	ldrh	r0, [r3, #4]
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	6899      	ldr	r1, [r3, #8]
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	f993 300c 	ldrsb.w	r3, [r3, #12]
 801269a:	b2db      	uxtb	r3, r3
 801269c:	461a      	mov	r2, r3
 801269e:	f7fe fc65 	bl	8010f6c <SetTxContinuousWave>
 80126a2:	4603      	mov	r3, r0
 80126a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 80126a8:	e06a      	b.n	8012780 <LoRaMacMlmeRequest+0x2b4>
        }
#endif /* LORAMAC_VERSION */
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 80126aa:	2300      	movs	r3, #0
 80126ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 80126b0:	f107 031c 	add.w	r3, r7, #28
 80126b4:	2200      	movs	r2, #0
 80126b6:	4619      	mov	r1, r3
 80126b8:	200d      	movs	r0, #13
 80126ba:	f000 fcdd 	bl	8013078 <LoRaMacCommandsAddCmd>
 80126be:	4603      	mov	r3, r0
 80126c0:	2b00      	cmp	r3, #0
 80126c2:	d058      	beq.n	8012776 <LoRaMacMlmeRequest+0x2aa>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80126c4:	2313      	movs	r3, #19
 80126c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 80126ca:	e054      	b.n	8012776 <LoRaMacMlmeRequest+0x2aa>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 80126cc:	4b41      	ldr	r3, [pc, #260]	@ (80127d4 <LoRaMacMlmeRequest+0x308>)
 80126ce:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 80126d2:	2b00      	cmp	r3, #0
 80126d4:	d151      	bne.n	801277a <LoRaMacMlmeRequest+0x2ae>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	791b      	ldrb	r3, [r3, #4]
 80126da:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	791b      	ldrb	r3, [r3, #4]
 80126e2:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80126e6:	b2db      	uxtb	r3, r3
 80126e8:	4618      	mov	r0, r3
 80126ea:	f000 fb1b 	bl	8012d24 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 80126ee:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80126f2:	773b      	strb	r3, [r7, #28]
                status = LORAMAC_STATUS_OK;
 80126f4:	2300      	movs	r3, #0
 80126f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 80126fa:	f107 031c 	add.w	r3, r7, #28
 80126fe:	2201      	movs	r2, #1
 8012700:	4619      	mov	r1, r3
 8012702:	2010      	movs	r0, #16
 8012704:	f000 fcb8 	bl	8013078 <LoRaMacCommandsAddCmd>
 8012708:	4603      	mov	r3, r0
 801270a:	2b00      	cmp	r3, #0
 801270c:	d035      	beq.n	801277a <LoRaMacMlmeRequest+0x2ae>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801270e:	2313      	movs	r3, #19
 8012710:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                }
            }
            break;
 8012714:	e031      	b.n	801277a <LoRaMacMlmeRequest+0x2ae>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8012716:	2300      	movs	r3, #0
 8012718:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 801271c:	f107 031c 	add.w	r3, r7, #28
 8012720:	2200      	movs	r2, #0
 8012722:	4619      	mov	r1, r3
 8012724:	2012      	movs	r0, #18
 8012726:	f000 fca7 	bl	8013078 <LoRaMacCommandsAddCmd>
 801272a:	4603      	mov	r3, r0
 801272c:	2b00      	cmp	r3, #0
 801272e:	d026      	beq.n	801277e <LoRaMacMlmeRequest+0x2b2>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012730:	2313      	movs	r3, #19
 8012732:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 8012736:	e022      	b.n	801277e <LoRaMacMlmeRequest+0x2b2>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 8012738:	2301      	movs	r3, #1
 801273a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 801273e:	f000 faa7 	bl	8012c90 <LoRaMacClassBIsAcquisitionInProgress>
 8012742:	4603      	mov	r3, r0
 8012744:	f083 0301 	eor.w	r3, r3, #1
 8012748:	b2db      	uxtb	r3, r3
 801274a:	2b00      	cmp	r3, #0
 801274c:	d009      	beq.n	8012762 <LoRaMacMlmeRequest+0x296>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 801274e:	2000      	movs	r0, #0
 8012750:	f000 fa80 	bl	8012c54 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 8012754:	2000      	movs	r0, #0
 8012756:	f000 faa2 	bl	8012c9e <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 801275a:	2300      	movs	r3, #0
 801275c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 8012760:	e00e      	b.n	8012780 <LoRaMacMlmeRequest+0x2b4>
                status = LORAMAC_STATUS_BUSY;
 8012762:	2301      	movs	r3, #1
 8012764:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8012768:	e00a      	b.n	8012780 <LoRaMacMlmeRequest+0x2b4>
        }
        default:
            break;
 801276a:	bf00      	nop
 801276c:	e008      	b.n	8012780 <LoRaMacMlmeRequest+0x2b4>
            break;
 801276e:	bf00      	nop
 8012770:	e006      	b.n	8012780 <LoRaMacMlmeRequest+0x2b4>
            break;
 8012772:	bf00      	nop
 8012774:	e004      	b.n	8012780 <LoRaMacMlmeRequest+0x2b4>
            break;
 8012776:	bf00      	nop
 8012778:	e002      	b.n	8012780 <LoRaMacMlmeRequest+0x2b4>
            break;
 801277a:	bf00      	nop
 801277c:	e000      	b.n	8012780 <LoRaMacMlmeRequest+0x2b4>
            break;
 801277e:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8012780:	4b13      	ldr	r3, [pc, #76]	@ (80127d0 <LoRaMacMlmeRequest+0x304>)
 8012782:	f8d3 2498 	ldr.w	r2, [r3, #1176]	@ 0x498
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 801278a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801278e:	2b00      	cmp	r3, #0
 8012790:	d010      	beq.n	80127b4 <LoRaMacMlmeRequest+0x2e8>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8012792:	f000 ffff 	bl	8013794 <LoRaMacConfirmQueueGetCnt>
 8012796:	4603      	mov	r3, r0
 8012798:	2b00      	cmp	r3, #0
 801279a:	d110      	bne.n	80127be <LoRaMacMlmeRequest+0x2f2>
        {
            MacCtx.NodeAckRequested = false;
 801279c:	4b0c      	ldr	r3, [pc, #48]	@ (80127d0 <LoRaMacMlmeRequest+0x304>)
 801279e:	2200      	movs	r2, #0
 80127a0:	f883 241e 	strb.w	r2, [r3, #1054]	@ 0x41e
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 80127a4:	4a0a      	ldr	r2, [pc, #40]	@ (80127d0 <LoRaMacMlmeRequest+0x304>)
 80127a6:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 80127aa:	f023 0304 	bic.w	r3, r3, #4
 80127ae:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
 80127b2:	e004      	b.n	80127be <LoRaMacMlmeRequest+0x2f2>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 80127b4:	f107 0320 	add.w	r3, r7, #32
 80127b8:	4618      	mov	r0, r3
 80127ba:	f000 fe9d 	bl	80134f8 <LoRaMacConfirmQueueAdd>
    }
    return status;
 80127be:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80127c2:	4618      	mov	r0, r3
 80127c4:	3728      	adds	r7, #40	@ 0x28
 80127c6:	46bd      	mov	sp, r7
 80127c8:	bd80      	pop	{r7, pc}
 80127ca:	bf00      	nop
 80127cc:	20000d30 	.word	0x20000d30
 80127d0:	200008d8 	.word	0x200008d8
 80127d4:	20000df8 	.word	0x20000df8

080127d8 <LoRaMacMcpsRequest>:

/* ST_WORKAROUND_BEGIN: Update MCPS request with new input parameter to allow delayed tx */
LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 80127d8:	b5b0      	push	{r4, r5, r7, lr}
 80127da:	b092      	sub	sp, #72	@ 0x48
 80127dc:	af02      	add	r7, sp, #8
 80127de:	6078      	str	r0, [r7, #4]
 80127e0:	460b      	mov	r3, r1
 80127e2:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 80127e4:	2302      	movs	r3, #2
 80127e6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 80127ea:	2300      	movs	r3, #0
 80127ec:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    /* ST_WORKAROUND_BEGIN: remove GCC9 warning */
    void* fBuffer = NULL;
 80127f0:	2300      	movs	r3, #0
 80127f2:	63bb      	str	r3, [r7, #56]	@ 0x38
    /* ST_WORKAROUND_END */
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 80127f4:	2300      	movs	r3, #0
 80127f6:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    bool readyToSend = false;
 80127fa:	2300      	movs	r3, #0
 80127fc:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    if( mcpsRequest == NULL )
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	2b00      	cmp	r3, #0
 8012804:	d101      	bne.n	801280a <LoRaMacMcpsRequest+0x32>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012806:	2303      	movs	r3, #3
 8012808:	e113      	b.n	8012a32 <LoRaMacMcpsRequest+0x25a>
        }
    }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Initialize mcpsRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mcpsRequest->ReqReturn.DutyCycleWaitTime = 0;
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	2200      	movs	r2, #0
 801280e:	611a      	str	r2, [r3, #16]

    if( LoRaMacIsBusy( ) == true )
 8012810:	f7fc face 	bl	800edb0 <LoRaMacIsBusy>
 8012814:	4603      	mov	r3, r0
 8012816:	2b00      	cmp	r3, #0
 8012818:	d001      	beq.n	801281e <LoRaMacMcpsRequest+0x46>
    {
        return LORAMAC_STATUS_BUSY;
 801281a:	2301      	movs	r3, #1
 801281c:	e109      	b.n	8012a32 <LoRaMacMcpsRequest+0x25a>
    }

    McpsReq_t request = *mcpsRequest;
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	f107 040c 	add.w	r4, r7, #12
 8012824:	461d      	mov	r5, r3
 8012826:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012828:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801282a:	682b      	ldr	r3, [r5, #0]
 801282c:	6023      	str	r3, [r4, #0]

    macHdr.Value = 0;
 801282e:	2300      	movs	r3, #0
 8012830:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8012834:	2214      	movs	r2, #20
 8012836:	2100      	movs	r1, #0
 8012838:	4880      	ldr	r0, [pc, #512]	@ (8012a3c <LoRaMacMcpsRequest+0x264>)
 801283a:	f004 fc67 	bl	801710c <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801283e:	4b80      	ldr	r3, [pc, #512]	@ (8012a40 <LoRaMacMcpsRequest+0x268>)
 8012840:	2201      	movs	r2, #1
 8012842:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445

    // Apply confirmed downlinks, if the device has not received a valid
    // downlink after a join accept.
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 8012846:	4b7f      	ldr	r3, [pc, #508]	@ (8012a44 <LoRaMacMcpsRequest+0x26c>)
 8012848:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 801284c:	2b02      	cmp	r3, #2
 801284e:	d111      	bne.n	8012874 <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 8012850:	4b7c      	ldr	r3, [pc, #496]	@ (8012a44 <LoRaMacMcpsRequest+0x26c>)
 8012852:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 8012856:	2b02      	cmp	r3, #2
 8012858:	d10c      	bne.n	8012874 <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 801285a:	4b7a      	ldr	r3, [pc, #488]	@ (8012a44 <LoRaMacMcpsRequest+0x26c>)
 801285c:	f893 310a 	ldrb.w	r3, [r3, #266]	@ 0x10a
 8012860:	f083 0301 	eor.w	r3, r3, #1
 8012864:	b2db      	uxtb	r3, r3
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 8012866:	2b00      	cmp	r3, #0
 8012868:	d004      	beq.n	8012874 <LoRaMacMcpsRequest+0x9c>
        ( request.Type == MCPS_UNCONFIRMED ) )
 801286a:	7b3b      	ldrb	r3, [r7, #12]
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 801286c:	2b00      	cmp	r3, #0
 801286e:	d101      	bne.n	8012874 <LoRaMacMcpsRequest+0x9c>
    {
        request.Type = MCPS_CONFIRMED;
 8012870:	2301      	movs	r3, #1
 8012872:	733b      	strb	r3, [r7, #12]
    }

    switch( request.Type )
 8012874:	7b3b      	ldrb	r3, [r7, #12]
 8012876:	2b03      	cmp	r3, #3
 8012878:	d030      	beq.n	80128dc <LoRaMacMcpsRequest+0x104>
 801287a:	2b03      	cmp	r3, #3
 801287c:	dc3f      	bgt.n	80128fe <LoRaMacMcpsRequest+0x126>
 801287e:	2b00      	cmp	r3, #0
 8012880:	d002      	beq.n	8012888 <LoRaMacMcpsRequest+0xb0>
 8012882:	2b01      	cmp	r3, #1
 8012884:	d015      	beq.n	80128b2 <LoRaMacMcpsRequest+0xda>
            fBufferSize = request.Req.Proprietary.fBufferSize;
            datarate = request.Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 8012886:	e03a      	b.n	80128fe <LoRaMacMcpsRequest+0x126>
            readyToSend = true;
 8012888:	2301      	movs	r3, #1
 801288a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 801288e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8012892:	2202      	movs	r2, #2
 8012894:	f362 1347 	bfi	r3, r2, #5, #3
 8012898:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            fPort = request.Req.Unconfirmed.fPort;
 801289c:	7c3b      	ldrb	r3, [r7, #16]
 801289e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
            fBuffer = request.Req.Unconfirmed.fBuffer;
 80128a2:	697b      	ldr	r3, [r7, #20]
 80128a4:	63bb      	str	r3, [r7, #56]	@ 0x38
            fBufferSize = request.Req.Unconfirmed.fBufferSize;
 80128a6:	8b3b      	ldrh	r3, [r7, #24]
 80128a8:	86fb      	strh	r3, [r7, #54]	@ 0x36
            datarate = request.Req.Unconfirmed.Datarate;
 80128aa:	7ebb      	ldrb	r3, [r7, #26]
 80128ac:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
            break;
 80128b0:	e026      	b.n	8012900 <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 80128b2:	2301      	movs	r3, #1
 80128b4:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 80128b8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80128bc:	2204      	movs	r2, #4
 80128be:	f362 1347 	bfi	r3, r2, #5, #3
 80128c2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            fPort = request.Req.Confirmed.fPort;
 80128c6:	7c3b      	ldrb	r3, [r7, #16]
 80128c8:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
            fBuffer = request.Req.Confirmed.fBuffer;
 80128cc:	697b      	ldr	r3, [r7, #20]
 80128ce:	63bb      	str	r3, [r7, #56]	@ 0x38
            fBufferSize = request.Req.Confirmed.fBufferSize;
 80128d0:	8b3b      	ldrh	r3, [r7, #24]
 80128d2:	86fb      	strh	r3, [r7, #54]	@ 0x36
            datarate = request.Req.Confirmed.Datarate;
 80128d4:	7ebb      	ldrb	r3, [r7, #26]
 80128d6:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
            break;
 80128da:	e011      	b.n	8012900 <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 80128dc:	2301      	movs	r3, #1
 80128de:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 80128e2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80128e6:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 80128ea:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            fBuffer = request.Req.Proprietary.fBuffer;
 80128ee:	693b      	ldr	r3, [r7, #16]
 80128f0:	63bb      	str	r3, [r7, #56]	@ 0x38
            fBufferSize = request.Req.Proprietary.fBufferSize;
 80128f2:	8abb      	ldrh	r3, [r7, #20]
 80128f4:	86fb      	strh	r3, [r7, #54]	@ 0x36
            datarate = request.Req.Proprietary.Datarate;
 80128f6:	7dbb      	ldrb	r3, [r7, #22]
 80128f8:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
            break;
 80128fc:	e000      	b.n	8012900 <LoRaMacMcpsRequest+0x128>
            break;
 80128fe:	bf00      	nop
    }

    // Make sure that the input datarate is compliant
    // to the regional specification.
    getPhy.Attribute = PHY_MIN_TX_DR;
 8012900:	2302      	movs	r3, #2
 8012902:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012906:	4b4f      	ldr	r3, [pc, #316]	@ (8012a44 <LoRaMacMcpsRequest+0x26c>)
 8012908:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 801290c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012910:	4b4c      	ldr	r3, [pc, #304]	@ (8012a44 <LoRaMacMcpsRequest+0x26c>)
 8012912:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012916:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 801291a:	4611      	mov	r1, r2
 801291c:	4618      	mov	r0, r3
 801291e:	f002 f919 	bl	8014b54 <RegionGetPhyParam>
 8012922:	4603      	mov	r3, r0
 8012924:	62bb      	str	r3, [r7, #40]	@ 0x28
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 8012926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012928:	b25b      	sxtb	r3, r3
 801292a:	f997 2035 	ldrsb.w	r2, [r7, #53]	@ 0x35
 801292e:	4293      	cmp	r3, r2
 8012930:	bfb8      	it	lt
 8012932:	4613      	movlt	r3, r2
 8012934:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

    // Apply minimum datarate in this special case.
    if( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 8012938:	4b42      	ldr	r3, [pc, #264]	@ (8012a44 <LoRaMacMcpsRequest+0x26c>)
 801293a:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 801293e:	4a41      	ldr	r2, [pc, #260]	@ (8012a44 <LoRaMacMcpsRequest+0x26c>)
 8012940:	f892 111c 	ldrb.w	r1, [r2, #284]	@ 0x11c
 8012944:	4a3f      	ldr	r2, [pc, #252]	@ (8012a44 <LoRaMacMcpsRequest+0x26c>)
 8012946:	f892 2109 	ldrb.w	r2, [r2, #265]	@ 0x109
 801294a:	4618      	mov	r0, r3
 801294c:	f7fc fbc8 	bl	800f0e0 <CheckForMinimumAbpDatarate>
 8012950:	4603      	mov	r3, r0
 8012952:	2b00      	cmp	r3, #0
 8012954:	d002      	beq.n	801295c <LoRaMacMcpsRequest+0x184>
                                    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true )
    {
        datarate = ( int8_t )phyParam.Value;
 8012956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012958:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if( readyToSend == true )
 801295c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8012960:	2b00      	cmp	r3, #0
 8012962:	d05f      	beq.n	8012a24 <LoRaMacMcpsRequest+0x24c>
    {
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 8012964:	4b37      	ldr	r3, [pc, #220]	@ (8012a44 <LoRaMacMcpsRequest+0x26c>)
 8012966:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 801296a:	f083 0301 	eor.w	r3, r3, #1
 801296e:	b2db      	uxtb	r3, r3
 8012970:	2b00      	cmp	r3, #0
 8012972:	d10e      	bne.n	8012992 <LoRaMacMcpsRequest+0x1ba>
            ( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 8012974:	4b33      	ldr	r3, [pc, #204]	@ (8012a44 <LoRaMacMcpsRequest+0x26c>)
 8012976:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 801297a:	4a32      	ldr	r2, [pc, #200]	@ (8012a44 <LoRaMacMcpsRequest+0x26c>)
 801297c:	f892 111c 	ldrb.w	r1, [r2, #284]	@ 0x11c
 8012980:	4a30      	ldr	r2, [pc, #192]	@ (8012a44 <LoRaMacMcpsRequest+0x26c>)
 8012982:	f892 2109 	ldrb.w	r2, [r2, #265]	@ 0x109
 8012986:	4618      	mov	r0, r3
 8012988:	f7fc fbaa 	bl	800f0e0 <CheckForMinimumAbpDatarate>
 801298c:	4603      	mov	r3, r0
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 801298e:	2b00      	cmp	r3, #0
 8012990:	d01c      	beq.n	80129cc <LoRaMacMcpsRequest+0x1f4>
                                          Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true ) )
        {
            verify.DatarateParams.Datarate = datarate;
 8012992:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8012996:	f887 3020 	strb.w	r3, [r7, #32]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801299a:	4b2a      	ldr	r3, [pc, #168]	@ (8012a44 <LoRaMacMcpsRequest+0x26c>)
 801299c:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 80129a0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 80129a4:	4b27      	ldr	r3, [pc, #156]	@ (8012a44 <LoRaMacMcpsRequest+0x26c>)
 80129a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80129aa:	f107 0120 	add.w	r1, r7, #32
 80129ae:	2205      	movs	r2, #5
 80129b0:	4618      	mov	r0, r3
 80129b2:	f002 f90a 	bl	8014bca <RegionVerify>
 80129b6:	4603      	mov	r3, r0
 80129b8:	2b00      	cmp	r3, #0
 80129ba:	d005      	beq.n	80129c8 <LoRaMacMcpsRequest+0x1f0>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 80129bc:	f997 2020 	ldrsb.w	r2, [r7, #32]
 80129c0:	4b20      	ldr	r3, [pc, #128]	@ (8012a44 <LoRaMacMcpsRequest+0x26c>)
 80129c2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 80129c6:	e001      	b.n	80129cc <LoRaMacMcpsRequest+0x1f4>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 80129c8:	2303      	movs	r3, #3
 80129ca:	e032      	b.n	8012a32 <LoRaMacMcpsRequest+0x25a>
            }
        }

        // Verification of response timeout for class b and class c
        LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 80129cc:	4b1d      	ldr	r3, [pc, #116]	@ (8012a44 <LoRaMacMcpsRequest+0x26c>)
 80129ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80129d2:	4a1b      	ldr	r2, [pc, #108]	@ (8012a40 <LoRaMacMcpsRequest+0x268>)
 80129d4:	f8d2 249c 	ldr.w	r2, [r2, #1180]	@ 0x49c
 80129d8:	4611      	mov	r1, r2
 80129da:	4618      	mov	r0, r3
 80129dc:	f7fc fc6a 	bl	800f2b4 <LoRaMacHandleResponseTimeout>
                                      MacCtx.ResponseTimeoutStartTime );

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 80129e0:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80129e2:	f897 103e 	ldrb.w	r1, [r7, #62]	@ 0x3e
 80129e6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80129ea:	78fb      	ldrb	r3, [r7, #3]
 80129ec:	9300      	str	r3, [sp, #0]
 80129ee:	4613      	mov	r3, r2
 80129f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80129f2:	f7fd fc0f 	bl	8010214 <Send>
 80129f6:	4603      	mov	r3, r0
 80129f8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if( status == LORAMAC_STATUS_OK )
 80129fc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	d10b      	bne.n	8012a1c <LoRaMacMcpsRequest+0x244>
        {
            MacCtx.McpsConfirm.McpsRequest = request.Type;
 8012a04:	7b3a      	ldrb	r2, [r7, #12]
 8012a06:	4b0e      	ldr	r3, [pc, #56]	@ (8012a40 <LoRaMacMcpsRequest+0x268>)
 8012a08:	f883 2444 	strb.w	r2, [r3, #1092]	@ 0x444
            MacCtx.MacFlags.Bits.McpsReq = 1;
 8012a0c:	4a0c      	ldr	r2, [pc, #48]	@ (8012a40 <LoRaMacMcpsRequest+0x268>)
 8012a0e:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 8012a12:	f043 0301 	orr.w	r3, r3, #1
 8012a16:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
 8012a1a:	e003      	b.n	8012a24 <LoRaMacMcpsRequest+0x24c>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 8012a1c:	4b08      	ldr	r3, [pc, #32]	@ (8012a40 <LoRaMacMcpsRequest+0x268>)
 8012a1e:	2200      	movs	r2, #0
 8012a20:	f883 241e 	strb.w	r2, [r3, #1054]	@ 0x41e
        }
    }
#endif /* LORAMAC_VERSION */

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8012a24:	4b06      	ldr	r3, [pc, #24]	@ (8012a40 <LoRaMacMcpsRequest+0x268>)
 8012a26:	f8d3 2498 	ldr.w	r2, [r3, #1176]	@ 0x498
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	611a      	str	r2, [r3, #16]

    return status;
 8012a2e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8012a32:	4618      	mov	r0, r3
 8012a34:	3740      	adds	r7, #64	@ 0x40
 8012a36:	46bd      	mov	sp, r7
 8012a38:	bdb0      	pop	{r4, r5, r7, pc}
 8012a3a:	bf00      	nop
 8012a3c:	20000d1c 	.word	0x20000d1c
 8012a40:	200008d8 	.word	0x200008d8
 8012a44:	20000df8 	.word	0x20000df8

08012a48 <LoRaMacTestSetDutyCycleOn>:
/* ST_WORKAROUND_END */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 8012a48:	b580      	push	{r7, lr}
 8012a4a:	b084      	sub	sp, #16
 8012a4c:	af00      	add	r7, sp, #0
 8012a4e:	4603      	mov	r3, r0
 8012a50:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 8012a52:	79fb      	ldrb	r3, [r7, #7]
 8012a54:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 8012a56:	4b0a      	ldr	r3, [pc, #40]	@ (8012a80 <LoRaMacTestSetDutyCycleOn+0x38>)
 8012a58:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012a5c:	f107 010c 	add.w	r1, r7, #12
 8012a60:	220f      	movs	r2, #15
 8012a62:	4618      	mov	r0, r3
 8012a64:	f002 f8b1 	bl	8014bca <RegionVerify>
 8012a68:	4603      	mov	r3, r0
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	d003      	beq.n	8012a76 <LoRaMacTestSetDutyCycleOn+0x2e>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 8012a6e:	4a04      	ldr	r2, [pc, #16]	@ (8012a80 <LoRaMacTestSetDutyCycleOn+0x38>)
 8012a70:	79fb      	ldrb	r3, [r7, #7]
 8012a72:	f882 3108 	strb.w	r3, [r2, #264]	@ 0x108
    }
}
 8012a76:	bf00      	nop
 8012a78:	3710      	adds	r7, #16
 8012a7a:	46bd      	mov	sp, r7
 8012a7c:	bd80      	pop	{r7, pc}
 8012a7e:	bf00      	nop
 8012a80:	20000df8 	.word	0x20000df8

08012a84 <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 8012a84:	b580      	push	{r7, lr}
 8012a86:	af00      	add	r7, sp, #0
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 8012a88:	f7fe ff26 	bl	80118d8 <LoRaMacStop>
 8012a8c:	4603      	mov	r3, r0
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	d111      	bne.n	8012ab6 <LoRaMacDeInitialization+0x32>
    {
        // Stop Timers
        TimerStop( &MacCtx.TxDelayedTimer );
 8012a92:	480a      	ldr	r0, [pc, #40]	@ (8012abc <LoRaMacDeInitialization+0x38>)
 8012a94:	f008 fc4c 	bl	801b330 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 8012a98:	4809      	ldr	r0, [pc, #36]	@ (8012ac0 <LoRaMacDeInitialization+0x3c>)
 8012a9a:	f008 fc49 	bl	801b330 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 8012a9e:	4809      	ldr	r0, [pc, #36]	@ (8012ac4 <LoRaMacDeInitialization+0x40>)
 8012aa0:	f008 fc46 	bl	801b330 <UTIL_TIMER_Stop>
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        TimerStop( &MacCtx.AckTimeoutTimer );
#endif /* LORAMAC_VERSION */

        // Take care about class B
        LoRaMacClassBHaltBeaconing( );
 8012aa4:	f000 f948 	bl	8012d38 <LoRaMacClassBHaltBeaconing>

        // Reset Mac parameters
        ResetMacParameters( );
 8012aa8:	f7fd ff1a 	bl	80108e0 <ResetMacParameters>

        // Switch off Radio
        Radio.Sleep( );
 8012aac:	4b06      	ldr	r3, [pc, #24]	@ (8012ac8 <LoRaMacDeInitialization+0x44>)
 8012aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012ab0:	4798      	blx	r3

        // Return success
        return LORAMAC_STATUS_OK;
 8012ab2:	2300      	movs	r3, #0
 8012ab4:	e000      	b.n	8012ab8 <LoRaMacDeInitialization+0x34>
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 8012ab6:	2301      	movs	r3, #1
    }
}
 8012ab8:	4618      	mov	r0, r3
 8012aba:	bd80      	pop	{r7, pc}
 8012abc:	20000c40 	.word	0x20000c40
 8012ac0:	20000c58 	.word	0x20000c58
 8012ac4:	20000c70 	.word	0x20000c70
 8012ac8:	0801f57c 	.word	0x0801f57c

08012acc <LoRaMacAdrCalcNext>:
    return false;
}
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut,
                         uint8_t* nbTransOut, uint32_t* adrAckCounter )
{
 8012acc:	b580      	push	{r7, lr}
 8012ace:	b08c      	sub	sp, #48	@ 0x30
 8012ad0:	af00      	add	r7, sp, #0
 8012ad2:	60f8      	str	r0, [r7, #12]
 8012ad4:	60b9      	str	r1, [r7, #8]
 8012ad6:	607a      	str	r2, [r7, #4]
 8012ad8:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 8012ada:	2300      	movs	r3, #0
 8012adc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    int8_t datarate = adrNext->Datarate;
 8012ae0:	68fb      	ldr	r3, [r7, #12]
 8012ae2:	7b1b      	ldrb	r3, [r3, #12]
 8012ae4:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    int8_t txPower = adrNext->TxPower;
 8012ae8:	68fb      	ldr	r3, [r7, #12]
 8012aea:	7b5b      	ldrb	r3, [r3, #13]
 8012aec:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint8_t nbTrans = adrNext->NbTrans;
 8012af0:	68fb      	ldr	r3, [r7, #12]
 8012af2:	7b9b      	ldrb	r3, [r3, #14]
 8012af4:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 8012af8:	68fb      	ldr	r3, [r7, #12]
 8012afa:	685a      	ldr	r2, [r3, #4]
 8012afc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012afe:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 8012b00:	68fb      	ldr	r3, [r7, #12]
 8012b02:	785b      	ldrb	r3, [r3, #1]
 8012b04:	2b00      	cmp	r3, #0
 8012b06:	f000 8088 	beq.w	8012c1a <LoRaMacAdrCalcNext+0x14e>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 8012b0a:	2302      	movs	r3, #2
 8012b0c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8012b10:	68fb      	ldr	r3, [r7, #12]
 8012b12:	7bdb      	ldrb	r3, [r3, #15]
 8012b14:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8012b18:	68fb      	ldr	r3, [r7, #12]
 8012b1a:	7c1b      	ldrb	r3, [r3, #16]
 8012b1c:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8012b20:	4611      	mov	r1, r2
 8012b22:	4618      	mov	r0, r3
 8012b24:	f002 f816 	bl	8014b54 <RegionGetPhyParam>
 8012b28:	4603      	mov	r3, r0
 8012b2a:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 8012b2c:	6a3b      	ldr	r3, [r7, #32]
 8012b2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        datarate = MAX( datarate, minTxDatarate );
 8012b32:	f997 202b 	ldrsb.w	r2, [r7, #43]	@ 0x2b
 8012b36:	f997 302e 	ldrsb.w	r3, [r7, #46]	@ 0x2e
 8012b3a:	4293      	cmp	r3, r2
 8012b3c:	bfb8      	it	lt
 8012b3e:	4613      	movlt	r3, r2
 8012b40:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

        // Verify if ADR ack req bit needs to be set.
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
 8012b44:	68fb      	ldr	r3, [r7, #12]
 8012b46:	685b      	ldr	r3, [r3, #4]
 8012b48:	68fa      	ldr	r2, [r7, #12]
 8012b4a:	8912      	ldrh	r2, [r2, #8]
 8012b4c:	4293      	cmp	r3, r2
 8012b4e:	d302      	bcc.n	8012b56 <LoRaMacAdrCalcNext+0x8a>
        {
            adrAckReq = true;
 8012b50:	2301      	movs	r3, #1
 8012b52:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        }

        // Verify, if we need to set the TX power to default
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 8012b56:	68fb      	ldr	r3, [r7, #12]
 8012b58:	685b      	ldr	r3, [r3, #4]
 8012b5a:	68fa      	ldr	r2, [r7, #12]
 8012b5c:	8912      	ldrh	r2, [r2, #8]
 8012b5e:	4611      	mov	r1, r2
 8012b60:	68fa      	ldr	r2, [r7, #12]
 8012b62:	8952      	ldrh	r2, [r2, #10]
 8012b64:	440a      	add	r2, r1
 8012b66:	4293      	cmp	r3, r2
 8012b68:	d30f      	bcc.n	8012b8a <LoRaMacAdrCalcNext+0xbe>
        {
            // Set TX Power to default
            getPhy.Attribute = PHY_DEF_TX_POWER;
 8012b6a:	230a      	movs	r3, #10
 8012b6c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8012b70:	68fb      	ldr	r3, [r7, #12]
 8012b72:	7c1b      	ldrb	r3, [r3, #16]
 8012b74:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8012b78:	4611      	mov	r1, r2
 8012b7a:	4618      	mov	r0, r3
 8012b7c:	f001 ffea 	bl	8014b54 <RegionGetPhyParam>
 8012b80:	4603      	mov	r3, r0
 8012b82:	623b      	str	r3, [r7, #32]
            txPower = phyParam.Value;
 8012b84:	6a3b      	ldr	r3, [r7, #32]
 8012b86:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
        }

        // Verify, if we need to decrease the data rate
        if( adrNext->AdrAckCounter >= ( uint32_t )( adrNext->AdrAckLimit + ( adrNext->AdrAckDelay << 1 ) ) )
 8012b8a:	68fb      	ldr	r3, [r7, #12]
 8012b8c:	685b      	ldr	r3, [r3, #4]
 8012b8e:	68fa      	ldr	r2, [r7, #12]
 8012b90:	8912      	ldrh	r2, [r2, #8]
 8012b92:	4611      	mov	r1, r2
 8012b94:	68fa      	ldr	r2, [r7, #12]
 8012b96:	8952      	ldrh	r2, [r2, #10]
 8012b98:	0052      	lsls	r2, r2, #1
 8012b9a:	440a      	add	r2, r1
 8012b9c:	4293      	cmp	r3, r2
 8012b9e:	d33c      	bcc.n	8012c1a <LoRaMacAdrCalcNext+0x14e>
        {
            // Perform actions with every adrNext->AdrAckDelay only
            if( ( ( adrNext->AdrAckCounter - adrNext->AdrAckLimit ) % adrNext->AdrAckDelay ) == 0 )
 8012ba0:	68fb      	ldr	r3, [r7, #12]
 8012ba2:	685b      	ldr	r3, [r3, #4]
 8012ba4:	68fa      	ldr	r2, [r7, #12]
 8012ba6:	8912      	ldrh	r2, [r2, #8]
 8012ba8:	1a9b      	subs	r3, r3, r2
 8012baa:	68fa      	ldr	r2, [r7, #12]
 8012bac:	8952      	ldrh	r2, [r2, #10]
 8012bae:	fbb3 f1f2 	udiv	r1, r3, r2
 8012bb2:	fb01 f202 	mul.w	r2, r1, r2
 8012bb6:	1a9b      	subs	r3, r3, r2
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	d12e      	bne.n	8012c1a <LoRaMacAdrCalcNext+0x14e>
            {
                if( datarate == minTxDatarate )
 8012bbc:	f997 202e 	ldrsb.w	r2, [r7, #46]	@ 0x2e
 8012bc0:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8012bc4:	429a      	cmp	r2, r3
 8012bc6:	d110      	bne.n	8012bea <LoRaMacAdrCalcNext+0x11e>
                {
                    // Restore the channel mask
                    if( adrNext->UpdateChanMask == true )
 8012bc8:	68fb      	ldr	r3, [r7, #12]
 8012bca:	781b      	ldrb	r3, [r3, #0]
 8012bcc:	2b00      	cmp	r3, #0
 8012bce:	d009      	beq.n	8012be4 <LoRaMacAdrCalcNext+0x118>
                    {
                        InitDefaultsParams_t params;
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8012bd0:	2302      	movs	r3, #2
 8012bd2:	773b      	strb	r3, [r7, #28]
                        RegionInitDefaults( adrNext->Region, &params );
 8012bd4:	68fb      	ldr	r3, [r7, #12]
 8012bd6:	7c1b      	ldrb	r3, [r3, #16]
 8012bd8:	f107 0210 	add.w	r2, r7, #16
 8012bdc:	4611      	mov	r1, r2
 8012bde:	4618      	mov	r0, r3
 8012be0:	f001 ffe1 	bl	8014ba6 <RegionInitDefaults>
                    }

                    // Restore NbTrans
                    nbTrans = 1;
 8012be4:	2301      	movs	r3, #1
 8012be6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                }

                // Decrease the datarate
                getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8012bea:	2321      	movs	r3, #33	@ 0x21
 8012bec:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
                getPhy.Datarate = datarate;
 8012bf0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8012bf4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
                getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8012bf8:	68fb      	ldr	r3, [r7, #12]
 8012bfa:	7bdb      	ldrb	r3, [r3, #15]
 8012bfc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8012c00:	68fb      	ldr	r3, [r7, #12]
 8012c02:	7c1b      	ldrb	r3, [r3, #16]
 8012c04:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8012c08:	4611      	mov	r1, r2
 8012c0a:	4618      	mov	r0, r3
 8012c0c:	f001 ffa2 	bl	8014b54 <RegionGetPhyParam>
 8012c10:	4603      	mov	r3, r0
 8012c12:	623b      	str	r3, [r7, #32]
                datarate = phyParam.Value;
 8012c14:	6a3b      	ldr	r3, [r7, #32]
 8012c16:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
            }
        }
    }

    *drOut = datarate;
 8012c1a:	68bb      	ldr	r3, [r7, #8]
 8012c1c:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8012c20:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8012c28:	701a      	strb	r2, [r3, #0]
    *nbTransOut = nbTrans;
 8012c2a:	683b      	ldr	r3, [r7, #0]
 8012c2c:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8012c30:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 8012c32:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8012c36:	4618      	mov	r0, r3
 8012c38:	3730      	adds	r7, #48	@ 0x30
 8012c3a:	46bd      	mov	sp, r7
 8012c3c:	bd80      	pop	{r7, pc}

08012c3e <LoRaMacClassBInit>:
#endif /* LORAMAC_VERSION */

#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmData_t* nvm )
{
 8012c3e:	b480      	push	{r7}
 8012c40:	b085      	sub	sp, #20
 8012c42:	af00      	add	r7, sp, #0
 8012c44:	60f8      	str	r0, [r7, #12]
 8012c46:	60b9      	str	r1, [r7, #8]
 8012c48:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012c4a:	bf00      	nop
 8012c4c:	3714      	adds	r7, #20
 8012c4e:	46bd      	mov	sp, r7
 8012c50:	bc80      	pop	{r7}
 8012c52:	4770      	bx	lr

08012c54 <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 8012c54:	b480      	push	{r7}
 8012c56:	b083      	sub	sp, #12
 8012c58:	af00      	add	r7, sp, #0
 8012c5a:	4603      	mov	r3, r0
 8012c5c:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012c5e:	bf00      	nop
 8012c60:	370c      	adds	r7, #12
 8012c62:	46bd      	mov	sp, r7
 8012c64:	bc80      	pop	{r7}
 8012c66:	4770      	bx	lr

08012c68 <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 8012c68:	b480      	push	{r7}
 8012c6a:	b083      	sub	sp, #12
 8012c6c:	af00      	add	r7, sp, #0
 8012c6e:	4603      	mov	r3, r0
 8012c70:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012c72:	bf00      	nop
 8012c74:	370c      	adds	r7, #12
 8012c76:	46bd      	mov	sp, r7
 8012c78:	bc80      	pop	{r7}
 8012c7a:	4770      	bx	lr

08012c7c <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 8012c7c:	b480      	push	{r7}
 8012c7e:	b083      	sub	sp, #12
 8012c80:	af00      	add	r7, sp, #0
 8012c82:	4603      	mov	r3, r0
 8012c84:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012c86:	bf00      	nop
 8012c88:	370c      	adds	r7, #12
 8012c8a:	46bd      	mov	sp, r7
 8012c8c:	bc80      	pop	{r7}
 8012c8e:	4770      	bx	lr

08012c90 <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 8012c90:	b480      	push	{r7}
 8012c92:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 8012c94:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012c96:	4618      	mov	r0, r3
 8012c98:	46bd      	mov	sp, r7
 8012c9a:	bc80      	pop	{r7}
 8012c9c:	4770      	bx	lr

08012c9e <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 8012c9e:	b480      	push	{r7}
 8012ca0:	b083      	sub	sp, #12
 8012ca2:	af00      	add	r7, sp, #0
 8012ca4:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012ca6:	bf00      	nop
 8012ca8:	370c      	adds	r7, #12
 8012caa:	46bd      	mov	sp, r7
 8012cac:	bc80      	pop	{r7}
 8012cae:	4770      	bx	lr

08012cb0 <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 8012cb0:	b480      	push	{r7}
 8012cb2:	b083      	sub	sp, #12
 8012cb4:	af00      	add	r7, sp, #0
 8012cb6:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012cb8:	bf00      	nop
 8012cba:	370c      	adds	r7, #12
 8012cbc:	46bd      	mov	sp, r7
 8012cbe:	bc80      	pop	{r7}
 8012cc0:	4770      	bx	lr

08012cc2 <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 8012cc2:	b480      	push	{r7}
 8012cc4:	b083      	sub	sp, #12
 8012cc6:	af00      	add	r7, sp, #0
 8012cc8:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012cca:	bf00      	nop
 8012ccc:	370c      	adds	r7, #12
 8012cce:	46bd      	mov	sp, r7
 8012cd0:	bc80      	pop	{r7}
 8012cd2:	4770      	bx	lr

08012cd4 <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 8012cd4:	b480      	push	{r7}
 8012cd6:	b083      	sub	sp, #12
 8012cd8:	af00      	add	r7, sp, #0
 8012cda:	6078      	str	r0, [r7, #4]
 8012cdc:	460b      	mov	r3, r1
 8012cde:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 8012ce0:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012ce2:	4618      	mov	r0, r3
 8012ce4:	370c      	adds	r7, #12
 8012ce6:	46bd      	mov	sp, r7
 8012ce8:	bc80      	pop	{r7}
 8012cea:	4770      	bx	lr

08012cec <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 8012cec:	b480      	push	{r7}
 8012cee:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8012cf0:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012cf2:	4618      	mov	r0, r3
 8012cf4:	46bd      	mov	sp, r7
 8012cf6:	bc80      	pop	{r7}
 8012cf8:	4770      	bx	lr

08012cfa <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 8012cfa:	b480      	push	{r7}
 8012cfc:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8012cfe:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012d00:	4618      	mov	r0, r3
 8012d02:	46bd      	mov	sp, r7
 8012d04:	bc80      	pop	{r7}
 8012d06:	4770      	bx	lr

08012d08 <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 8012d08:	b480      	push	{r7}
 8012d0a:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8012d0c:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012d0e:	4618      	mov	r0, r3
 8012d10:	46bd      	mov	sp, r7
 8012d12:	bc80      	pop	{r7}
 8012d14:	4770      	bx	lr

08012d16 <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 8012d16:	b480      	push	{r7}
 8012d18:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8012d1a:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012d1c:	4618      	mov	r0, r3
 8012d1e:	46bd      	mov	sp, r7
 8012d20:	bc80      	pop	{r7}
 8012d22:	4770      	bx	lr

08012d24 <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 8012d24:	b480      	push	{r7}
 8012d26:	b083      	sub	sp, #12
 8012d28:	af00      	add	r7, sp, #0
 8012d2a:	4603      	mov	r3, r0
 8012d2c:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012d2e:	bf00      	nop
 8012d30:	370c      	adds	r7, #12
 8012d32:	46bd      	mov	sp, r7
 8012d34:	bc80      	pop	{r7}
 8012d36:	4770      	bx	lr

08012d38 <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 8012d38:	b480      	push	{r7}
 8012d3a:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012d3c:	bf00      	nop
 8012d3e:	46bd      	mov	sp, r7
 8012d40:	bc80      	pop	{r7}
 8012d42:	4770      	bx	lr

08012d44 <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 8012d44:	b480      	push	{r7}
 8012d46:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012d48:	bf00      	nop
 8012d4a:	46bd      	mov	sp, r7
 8012d4c:	bc80      	pop	{r7}
 8012d4e:	4770      	bx	lr

08012d50 <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 8012d50:	b480      	push	{r7}
 8012d52:	b083      	sub	sp, #12
 8012d54:	af00      	add	r7, sp, #0
 8012d56:	4603      	mov	r3, r0
 8012d58:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012d5a:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012d5c:	4618      	mov	r0, r3
 8012d5e:	370c      	adds	r7, #12
 8012d60:	46bd      	mov	sp, r7
 8012d62:	bc80      	pop	{r7}
 8012d64:	4770      	bx	lr

08012d66 <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 8012d66:	b480      	push	{r7}
 8012d68:	b083      	sub	sp, #12
 8012d6a:	af00      	add	r7, sp, #0
 8012d6c:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012d6e:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012d70:	4618      	mov	r0, r3
 8012d72:	370c      	adds	r7, #12
 8012d74:	46bd      	mov	sp, r7
 8012d76:	bc80      	pop	{r7}
 8012d78:	4770      	bx	lr

08012d7a <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 8012d7a:	b480      	push	{r7}
 8012d7c:	b083      	sub	sp, #12
 8012d7e:	af00      	add	r7, sp, #0
 8012d80:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012d82:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012d84:	4618      	mov	r0, r3
 8012d86:	370c      	adds	r7, #12
 8012d88:	46bd      	mov	sp, r7
 8012d8a:	bc80      	pop	{r7}
 8012d8c:	4770      	bx	lr

08012d8e <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 8012d8e:	b480      	push	{r7}
 8012d90:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012d92:	bf00      	nop
 8012d94:	46bd      	mov	sp, r7
 8012d96:	bc80      	pop	{r7}
 8012d98:	4770      	bx	lr

08012d9a <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 8012d9a:	b480      	push	{r7}
 8012d9c:	b083      	sub	sp, #12
 8012d9e:	af00      	add	r7, sp, #0
 8012da0:	4603      	mov	r3, r0
 8012da2:	6039      	str	r1, [r7, #0]
 8012da4:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 8012da6:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012da8:	4618      	mov	r0, r3
 8012daa:	370c      	adds	r7, #12
 8012dac:	46bd      	mov	sp, r7
 8012dae:	bc80      	pop	{r7}
 8012db0:	4770      	bx	lr

08012db2 <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 8012db2:	b480      	push	{r7}
 8012db4:	b083      	sub	sp, #12
 8012db6:	af00      	add	r7, sp, #0
 8012db8:	4603      	mov	r3, r0
 8012dba:	603a      	str	r2, [r7, #0]
 8012dbc:	80fb      	strh	r3, [r7, #6]
 8012dbe:	460b      	mov	r3, r1
 8012dc0:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012dc2:	bf00      	nop
 8012dc4:	370c      	adds	r7, #12
 8012dc6:	46bd      	mov	sp, r7
 8012dc8:	bc80      	pop	{r7}
 8012dca:	4770      	bx	lr

08012dcc <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 8012dcc:	b480      	push	{r7}
 8012dce:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012dd0:	bf00      	nop
 8012dd2:	46bd      	mov	sp, r7
 8012dd4:	bc80      	pop	{r7}
 8012dd6:	4770      	bx	lr

08012dd8 <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 8012dd8:	b480      	push	{r7}
 8012dda:	b083      	sub	sp, #12
 8012ddc:	af00      	add	r7, sp, #0
 8012dde:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 8012de0:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012de2:	4618      	mov	r0, r3
 8012de4:	370c      	adds	r7, #12
 8012de6:	46bd      	mov	sp, r7
 8012de8:	bc80      	pop	{r7}
 8012dea:	4770      	bx	lr

08012dec <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 8012dec:	b480      	push	{r7}
 8012dee:	b083      	sub	sp, #12
 8012df0:	af00      	add	r7, sp, #0
 8012df2:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 8012df4:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012df6:	4618      	mov	r0, r3
 8012df8:	370c      	adds	r7, #12
 8012dfa:	46bd      	mov	sp, r7
 8012dfc:	bc80      	pop	{r7}
 8012dfe:	4770      	bx	lr

08012e00 <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 8012e00:	b480      	push	{r7}
 8012e02:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012e04:	bf00      	nop
 8012e06:	46bd      	mov	sp, r7
 8012e08:	bc80      	pop	{r7}
 8012e0a:	4770      	bx	lr

08012e0c <LoRaMacClassBSetFPendingBit>:
#endif /* LORAMAC_CLASSB_ENABLED */
}

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
void LoRaMacClassBSetFPendingBit( uint32_t address, uint8_t fPendingSet )
{
 8012e0c:	b480      	push	{r7}
 8012e0e:	b083      	sub	sp, #12
 8012e10:	af00      	add	r7, sp, #0
 8012e12:	6078      	str	r0, [r7, #4]
 8012e14:	460b      	mov	r3, r1
 8012e16:	70fb      	strb	r3, [r7, #3]
            }
            cur++;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012e18:	bf00      	nop
 8012e1a:	370c      	adds	r7, #12
 8012e1c:	46bd      	mov	sp, r7
 8012e1e:	bc80      	pop	{r7}
 8012e20:	4770      	bx	lr

08012e22 <LoRaMacClassBProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacClassBProcess( void )
{
 8012e22:	b480      	push	{r7}
 8012e24:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012e26:	bf00      	nop
 8012e28:	46bd      	mov	sp, r7
 8012e2a:	bc80      	pop	{r7}
 8012e2c:	4770      	bx	lr

08012e2e <IsSlotFree>:
 *
 * \param [in]    slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 8012e2e:	b480      	push	{r7}
 8012e30:	b085      	sub	sp, #20
 8012e32:	af00      	add	r7, sp, #0
 8012e34:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8012e3a:	2300      	movs	r3, #0
 8012e3c:	81fb      	strh	r3, [r7, #14]
 8012e3e:	e00a      	b.n	8012e56 <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 8012e40:	89fb      	ldrh	r3, [r7, #14]
 8012e42:	68ba      	ldr	r2, [r7, #8]
 8012e44:	4413      	add	r3, r2
 8012e46:	781b      	ldrb	r3, [r3, #0]
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	d001      	beq.n	8012e50 <IsSlotFree+0x22>
        {
            return false;
 8012e4c:	2300      	movs	r3, #0
 8012e4e:	e006      	b.n	8012e5e <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8012e50:	89fb      	ldrh	r3, [r7, #14]
 8012e52:	3301      	adds	r3, #1
 8012e54:	81fb      	strh	r3, [r7, #14]
 8012e56:	89fb      	ldrh	r3, [r7, #14]
 8012e58:	2b0f      	cmp	r3, #15
 8012e5a:	d9f1      	bls.n	8012e40 <IsSlotFree+0x12>
        }
    }
    return true;
 8012e5c:	2301      	movs	r3, #1
}
 8012e5e:	4618      	mov	r0, r3
 8012e60:	3714      	adds	r7, #20
 8012e62:	46bd      	mov	sp, r7
 8012e64:	bc80      	pop	{r7}
 8012e66:	4770      	bx	lr

08012e68 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 8012e68:	b580      	push	{r7, lr}
 8012e6a:	b082      	sub	sp, #8
 8012e6c:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 8012e6e:	2300      	movs	r3, #0
 8012e70:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8012e72:	e007      	b.n	8012e84 <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 8012e74:	79fb      	ldrb	r3, [r7, #7]
 8012e76:	3301      	adds	r3, #1
 8012e78:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 8012e7a:	79fb      	ldrb	r3, [r7, #7]
 8012e7c:	2b20      	cmp	r3, #32
 8012e7e:	d101      	bne.n	8012e84 <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 8012e80:	2300      	movs	r3, #0
 8012e82:	e012      	b.n	8012eaa <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8012e84:	79fb      	ldrb	r3, [r7, #7]
 8012e86:	011b      	lsls	r3, r3, #4
 8012e88:	3308      	adds	r3, #8
 8012e8a:	4a0a      	ldr	r2, [pc, #40]	@ (8012eb4 <MallocNewMacCommandSlot+0x4c>)
 8012e8c:	4413      	add	r3, r2
 8012e8e:	4618      	mov	r0, r3
 8012e90:	f7ff ffcd 	bl	8012e2e <IsSlotFree>
 8012e94:	4603      	mov	r3, r0
 8012e96:	f083 0301 	eor.w	r3, r3, #1
 8012e9a:	b2db      	uxtb	r3, r3
 8012e9c:	2b00      	cmp	r3, #0
 8012e9e:	d1e9      	bne.n	8012e74 <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 8012ea0:	79fb      	ldrb	r3, [r7, #7]
 8012ea2:	011b      	lsls	r3, r3, #4
 8012ea4:	3308      	adds	r3, #8
 8012ea6:	4a03      	ldr	r2, [pc, #12]	@ (8012eb4 <MallocNewMacCommandSlot+0x4c>)
 8012ea8:	4413      	add	r3, r2
}
 8012eaa:	4618      	mov	r0, r3
 8012eac:	3708      	adds	r7, #8
 8012eae:	46bd      	mov	sp, r7
 8012eb0:	bd80      	pop	{r7, pc}
 8012eb2:	bf00      	nop
 8012eb4:	20001998 	.word	0x20001998

08012eb8 <FreeMacCommandSlot>:
 * \param [in]    slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 8012eb8:	b580      	push	{r7, lr}
 8012eba:	b082      	sub	sp, #8
 8012ebc:	af00      	add	r7, sp, #0
 8012ebe:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	2b00      	cmp	r3, #0
 8012ec4:	d101      	bne.n	8012eca <FreeMacCommandSlot+0x12>
    {
        return false;
 8012ec6:	2300      	movs	r3, #0
 8012ec8:	e005      	b.n	8012ed6 <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 8012eca:	2210      	movs	r2, #16
 8012ecc:	2100      	movs	r1, #0
 8012ece:	6878      	ldr	r0, [r7, #4]
 8012ed0:	f004 f91c 	bl	801710c <memset1>

    return true;
 8012ed4:	2301      	movs	r3, #1
}
 8012ed6:	4618      	mov	r0, r3
 8012ed8:	3708      	adds	r7, #8
 8012eda:	46bd      	mov	sp, r7
 8012edc:	bd80      	pop	{r7, pc}

08012ede <LinkedListInit>:
 *
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 8012ede:	b480      	push	{r7}
 8012ee0:	b083      	sub	sp, #12
 8012ee2:	af00      	add	r7, sp, #0
 8012ee4:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	2b00      	cmp	r3, #0
 8012eea:	d101      	bne.n	8012ef0 <LinkedListInit+0x12>
    {
        return false;
 8012eec:	2300      	movs	r3, #0
 8012eee:	e006      	b.n	8012efe <LinkedListInit+0x20>
    }

    list->First = NULL;
 8012ef0:	687b      	ldr	r3, [r7, #4]
 8012ef2:	2200      	movs	r2, #0
 8012ef4:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	2200      	movs	r2, #0
 8012efa:	605a      	str	r2, [r3, #4]

    return true;
 8012efc:	2301      	movs	r3, #1
}
 8012efe:	4618      	mov	r0, r3
 8012f00:	370c      	adds	r7, #12
 8012f02:	46bd      	mov	sp, r7
 8012f04:	bc80      	pop	{r7}
 8012f06:	4770      	bx	lr

08012f08 <LinkedListAdd>:
 * \param [in]    list           - List where the element shall be added.
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 8012f08:	b480      	push	{r7}
 8012f0a:	b083      	sub	sp, #12
 8012f0c:	af00      	add	r7, sp, #0
 8012f0e:	6078      	str	r0, [r7, #4]
 8012f10:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	2b00      	cmp	r3, #0
 8012f16:	d002      	beq.n	8012f1e <LinkedListAdd+0x16>
 8012f18:	683b      	ldr	r3, [r7, #0]
 8012f1a:	2b00      	cmp	r3, #0
 8012f1c:	d101      	bne.n	8012f22 <LinkedListAdd+0x1a>
    {
        return false;
 8012f1e:	2300      	movs	r3, #0
 8012f20:	e015      	b.n	8012f4e <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	681b      	ldr	r3, [r3, #0]
 8012f26:	2b00      	cmp	r3, #0
 8012f28:	d102      	bne.n	8012f30 <LinkedListAdd+0x28>
    {
        list->First = element;
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	683a      	ldr	r2, [r7, #0]
 8012f2e:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	685b      	ldr	r3, [r3, #4]
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	d003      	beq.n	8012f40 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	685b      	ldr	r3, [r3, #4]
 8012f3c:	683a      	ldr	r2, [r7, #0]
 8012f3e:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 8012f40:	683b      	ldr	r3, [r7, #0]
 8012f42:	2200      	movs	r2, #0
 8012f44:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	683a      	ldr	r2, [r7, #0]
 8012f4a:	605a      	str	r2, [r3, #4]

    return true;
 8012f4c:	2301      	movs	r3, #1
}
 8012f4e:	4618      	mov	r0, r3
 8012f50:	370c      	adds	r7, #12
 8012f52:	46bd      	mov	sp, r7
 8012f54:	bc80      	pop	{r7}
 8012f56:	4770      	bx	lr

08012f58 <LinkedListGetPrevious>:
 * \param [in]    list           - List
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 8012f58:	b480      	push	{r7}
 8012f5a:	b085      	sub	sp, #20
 8012f5c:	af00      	add	r7, sp, #0
 8012f5e:	6078      	str	r0, [r7, #4]
 8012f60:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8012f62:	687b      	ldr	r3, [r7, #4]
 8012f64:	2b00      	cmp	r3, #0
 8012f66:	d002      	beq.n	8012f6e <LinkedListGetPrevious+0x16>
 8012f68:	683b      	ldr	r3, [r7, #0]
 8012f6a:	2b00      	cmp	r3, #0
 8012f6c:	d101      	bne.n	8012f72 <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 8012f6e:	2300      	movs	r3, #0
 8012f70:	e016      	b.n	8012fa0 <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	681b      	ldr	r3, [r3, #0]
 8012f76:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 8012f78:	683a      	ldr	r2, [r7, #0]
 8012f7a:	68fb      	ldr	r3, [r7, #12]
 8012f7c:	429a      	cmp	r2, r3
 8012f7e:	d00c      	beq.n	8012f9a <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8012f80:	e002      	b.n	8012f88 <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 8012f82:	68fb      	ldr	r3, [r7, #12]
 8012f84:	681b      	ldr	r3, [r3, #0]
 8012f86:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8012f88:	68fb      	ldr	r3, [r7, #12]
 8012f8a:	2b00      	cmp	r3, #0
 8012f8c:	d007      	beq.n	8012f9e <LinkedListGetPrevious+0x46>
 8012f8e:	68fb      	ldr	r3, [r7, #12]
 8012f90:	681b      	ldr	r3, [r3, #0]
 8012f92:	683a      	ldr	r2, [r7, #0]
 8012f94:	429a      	cmp	r2, r3
 8012f96:	d1f4      	bne.n	8012f82 <LinkedListGetPrevious+0x2a>
 8012f98:	e001      	b.n	8012f9e <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 8012f9a:	2300      	movs	r3, #0
 8012f9c:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 8012f9e:	68fb      	ldr	r3, [r7, #12]
}
 8012fa0:	4618      	mov	r0, r3
 8012fa2:	3714      	adds	r7, #20
 8012fa4:	46bd      	mov	sp, r7
 8012fa6:	bc80      	pop	{r7}
 8012fa8:	4770      	bx	lr

08012faa <LinkedListRemove>:
 * \param [in]    list           - List where the element shall be removed from.
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 8012faa:	b580      	push	{r7, lr}
 8012fac:	b084      	sub	sp, #16
 8012fae:	af00      	add	r7, sp, #0
 8012fb0:	6078      	str	r0, [r7, #4]
 8012fb2:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	2b00      	cmp	r3, #0
 8012fb8:	d002      	beq.n	8012fc0 <LinkedListRemove+0x16>
 8012fba:	683b      	ldr	r3, [r7, #0]
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d101      	bne.n	8012fc4 <LinkedListRemove+0x1a>
    {
        return false;
 8012fc0:	2300      	movs	r3, #0
 8012fc2:	e020      	b.n	8013006 <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 8012fc4:	6839      	ldr	r1, [r7, #0]
 8012fc6:	6878      	ldr	r0, [r7, #4]
 8012fc8:	f7ff ffc6 	bl	8012f58 <LinkedListGetPrevious>
 8012fcc:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	681b      	ldr	r3, [r3, #0]
 8012fd2:	683a      	ldr	r2, [r7, #0]
 8012fd4:	429a      	cmp	r2, r3
 8012fd6:	d103      	bne.n	8012fe0 <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 8012fd8:	683b      	ldr	r3, [r7, #0]
 8012fda:	681a      	ldr	r2, [r3, #0]
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	685b      	ldr	r3, [r3, #4]
 8012fe4:	683a      	ldr	r2, [r7, #0]
 8012fe6:	429a      	cmp	r2, r3
 8012fe8:	d102      	bne.n	8012ff0 <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 8012fea:	687b      	ldr	r3, [r7, #4]
 8012fec:	68fa      	ldr	r2, [r7, #12]
 8012fee:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 8012ff0:	68fb      	ldr	r3, [r7, #12]
 8012ff2:	2b00      	cmp	r3, #0
 8012ff4:	d003      	beq.n	8012ffe <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 8012ff6:	683b      	ldr	r3, [r7, #0]
 8012ff8:	681a      	ldr	r2, [r3, #0]
 8012ffa:	68fb      	ldr	r3, [r7, #12]
 8012ffc:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 8012ffe:	683b      	ldr	r3, [r7, #0]
 8013000:	2200      	movs	r2, #0
 8013002:	601a      	str	r2, [r3, #0]

    return true;
 8013004:	2301      	movs	r3, #1
}
 8013006:	4618      	mov	r0, r3
 8013008:	3710      	adds	r7, #16
 801300a:	46bd      	mov	sp, r7
 801300c:	bd80      	pop	{r7, pc}
	...

08013010 <IsSticky>:
 * \param [in]  cid                - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 8013010:	b480      	push	{r7}
 8013012:	b083      	sub	sp, #12
 8013014:	af00      	add	r7, sp, #0
 8013016:	4603      	mov	r3, r0
 8013018:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 801301a:	79fb      	ldrb	r3, [r7, #7]
 801301c:	2b11      	cmp	r3, #17
 801301e:	bf8c      	ite	hi
 8013020:	2201      	movhi	r2, #1
 8013022:	2200      	movls	r2, #0
 8013024:	b2d2      	uxtb	r2, r2
 8013026:	2a00      	cmp	r2, #0
 8013028:	d10d      	bne.n	8013046 <IsSticky+0x36>
 801302a:	4a0a      	ldr	r2, [pc, #40]	@ (8013054 <IsSticky+0x44>)
 801302c:	fa22 f303 	lsr.w	r3, r2, r3
 8013030:	f003 0301 	and.w	r3, r3, #1
 8013034:	2b00      	cmp	r3, #0
 8013036:	bf14      	ite	ne
 8013038:	2301      	movne	r3, #1
 801303a:	2300      	moveq	r3, #0
 801303c:	b2db      	uxtb	r3, r3
 801303e:	2b00      	cmp	r3, #0
 8013040:	d001      	beq.n	8013046 <IsSticky+0x36>
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
 8013042:	2301      	movs	r3, #1
 8013044:	e000      	b.n	8013048 <IsSticky+0x38>
        default:
            return false;
 8013046:	2300      	movs	r3, #0
    }
}
 8013048:	4618      	mov	r0, r3
 801304a:	370c      	adds	r7, #12
 801304c:	46bd      	mov	sp, r7
 801304e:	bc80      	pop	{r7}
 8013050:	4770      	bx	lr
 8013052:	bf00      	nop
 8013054:	00020720 	.word	0x00020720

08013058 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 8013058:	b580      	push	{r7, lr}
 801305a:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 801305c:	f44f 7203 	mov.w	r2, #524	@ 0x20c
 8013060:	2100      	movs	r1, #0
 8013062:	4804      	ldr	r0, [pc, #16]	@ (8013074 <LoRaMacCommandsInit+0x1c>)
 8013064:	f004 f852 	bl	801710c <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 8013068:	4802      	ldr	r0, [pc, #8]	@ (8013074 <LoRaMacCommandsInit+0x1c>)
 801306a:	f7ff ff38 	bl	8012ede <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 801306e:	2300      	movs	r3, #0
}
 8013070:	4618      	mov	r0, r3
 8013072:	bd80      	pop	{r7, pc}
 8013074:	20001998 	.word	0x20001998

08013078 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 8013078:	b580      	push	{r7, lr}
 801307a:	b086      	sub	sp, #24
 801307c:	af00      	add	r7, sp, #0
 801307e:	4603      	mov	r3, r0
 8013080:	60b9      	str	r1, [r7, #8]
 8013082:	607a      	str	r2, [r7, #4]
 8013084:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 8013086:	68bb      	ldr	r3, [r7, #8]
 8013088:	2b00      	cmp	r3, #0
 801308a:	d101      	bne.n	8013090 <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801308c:	2301      	movs	r3, #1
 801308e:	e033      	b.n	80130f8 <LoRaMacCommandsAddCmd+0x80>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 8013090:	f7ff feea 	bl	8012e68 <MallocNewMacCommandSlot>
 8013094:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 8013096:	697b      	ldr	r3, [r7, #20]
 8013098:	2b00      	cmp	r3, #0
 801309a:	d101      	bne.n	80130a0 <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 801309c:	2302      	movs	r3, #2
 801309e:	e02b      	b.n	80130f8 <LoRaMacCommandsAddCmd+0x80>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 80130a0:	6979      	ldr	r1, [r7, #20]
 80130a2:	4817      	ldr	r0, [pc, #92]	@ (8013100 <LoRaMacCommandsAddCmd+0x88>)
 80130a4:	f7ff ff30 	bl	8012f08 <LinkedListAdd>
 80130a8:	4603      	mov	r3, r0
 80130aa:	f083 0301 	eor.w	r3, r3, #1
 80130ae:	b2db      	uxtb	r3, r3
 80130b0:	2b00      	cmp	r3, #0
 80130b2:	d001      	beq.n	80130b8 <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 80130b4:	2305      	movs	r3, #5
 80130b6:	e01f      	b.n	80130f8 <LoRaMacCommandsAddCmd+0x80>
    }

    // Set Values
    newCmd->CID = cid;
 80130b8:	697b      	ldr	r3, [r7, #20]
 80130ba:	7bfa      	ldrb	r2, [r7, #15]
 80130bc:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 80130be:	697b      	ldr	r3, [r7, #20]
 80130c0:	687a      	ldr	r2, [r7, #4]
 80130c2:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 80130c4:	697b      	ldr	r3, [r7, #20]
 80130c6:	3305      	adds	r3, #5
 80130c8:	687a      	ldr	r2, [r7, #4]
 80130ca:	b292      	uxth	r2, r2
 80130cc:	68b9      	ldr	r1, [r7, #8]
 80130ce:	4618      	mov	r0, r3
 80130d0:	f003 ffe1 	bl	8017096 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 80130d4:	7bfb      	ldrb	r3, [r7, #15]
 80130d6:	4618      	mov	r0, r3
 80130d8:	f7ff ff9a 	bl	8013010 <IsSticky>
 80130dc:	4603      	mov	r3, r0
 80130de:	461a      	mov	r2, r3
 80130e0:	697b      	ldr	r3, [r7, #20]
 80130e2:	731a      	strb	r2, [r3, #12]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 80130e4:	4b06      	ldr	r3, [pc, #24]	@ (8013100 <LoRaMacCommandsAddCmd+0x88>)
 80130e6:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	4413      	add	r3, r2
 80130ee:	3301      	adds	r3, #1
 80130f0:	4a03      	ldr	r2, [pc, #12]	@ (8013100 <LoRaMacCommandsAddCmd+0x88>)
 80130f2:	f8c2 3208 	str.w	r3, [r2, #520]	@ 0x208

    return LORAMAC_COMMANDS_SUCCESS;
 80130f6:	2300      	movs	r3, #0
}
 80130f8:	4618      	mov	r0, r3
 80130fa:	3718      	adds	r7, #24
 80130fc:	46bd      	mov	sp, r7
 80130fe:	bd80      	pop	{r7, pc}
 8013100:	20001998 	.word	0x20001998

08013104 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 8013104:	b580      	push	{r7, lr}
 8013106:	b082      	sub	sp, #8
 8013108:	af00      	add	r7, sp, #0
 801310a:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	2b00      	cmp	r3, #0
 8013110:	d101      	bne.n	8013116 <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8013112:	2301      	movs	r3, #1
 8013114:	e021      	b.n	801315a <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 8013116:	6879      	ldr	r1, [r7, #4]
 8013118:	4812      	ldr	r0, [pc, #72]	@ (8013164 <LoRaMacCommandsRemoveCmd+0x60>)
 801311a:	f7ff ff46 	bl	8012faa <LinkedListRemove>
 801311e:	4603      	mov	r3, r0
 8013120:	f083 0301 	eor.w	r3, r3, #1
 8013124:	b2db      	uxtb	r3, r3
 8013126:	2b00      	cmp	r3, #0
 8013128:	d001      	beq.n	801312e <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 801312a:	2303      	movs	r3, #3
 801312c:	e015      	b.n	801315a <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 801312e:	4b0d      	ldr	r3, [pc, #52]	@ (8013164 <LoRaMacCommandsRemoveCmd+0x60>)
 8013130:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	689b      	ldr	r3, [r3, #8]
 8013138:	1ad3      	subs	r3, r2, r3
 801313a:	3b01      	subs	r3, #1
 801313c:	4a09      	ldr	r2, [pc, #36]	@ (8013164 <LoRaMacCommandsRemoveCmd+0x60>)
 801313e:	f8c2 3208 	str.w	r3, [r2, #520]	@ 0x208

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 8013142:	6878      	ldr	r0, [r7, #4]
 8013144:	f7ff feb8 	bl	8012eb8 <FreeMacCommandSlot>
 8013148:	4603      	mov	r3, r0
 801314a:	f083 0301 	eor.w	r3, r3, #1
 801314e:	b2db      	uxtb	r3, r3
 8013150:	2b00      	cmp	r3, #0
 8013152:	d001      	beq.n	8013158 <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 8013154:	2305      	movs	r3, #5
 8013156:	e000      	b.n	801315a <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8013158:	2300      	movs	r3, #0
}
 801315a:	4618      	mov	r0, r3
 801315c:	3708      	adds	r7, #8
 801315e:	46bd      	mov	sp, r7
 8013160:	bd80      	pop	{r7, pc}
 8013162:	bf00      	nop
 8013164:	20001998 	.word	0x20001998

08013168 <LoRaMacCommandsRemoveNoneStickyCmds>:
    }
    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 8013168:	b580      	push	{r7, lr}
 801316a:	b082      	sub	sp, #8
 801316c:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 801316e:	4b0f      	ldr	r3, [pc, #60]	@ (80131ac <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 8013170:	681b      	ldr	r3, [r3, #0]
 8013172:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8013174:	e012      	b.n	801319c <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	7b1b      	ldrb	r3, [r3, #12]
 801317a:	f083 0301 	eor.w	r3, r3, #1
 801317e:	b2db      	uxtb	r3, r3
 8013180:	2b00      	cmp	r3, #0
 8013182:	d008      	beq.n	8013196 <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	681b      	ldr	r3, [r3, #0]
 8013188:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 801318a:	6878      	ldr	r0, [r7, #4]
 801318c:	f7ff ffba 	bl	8013104 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 8013190:	683b      	ldr	r3, [r7, #0]
 8013192:	607b      	str	r3, [r7, #4]
 8013194:	e002      	b.n	801319c <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	681b      	ldr	r3, [r3, #0]
 801319a:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	2b00      	cmp	r3, #0
 80131a0:	d1e9      	bne.n	8013176 <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80131a2:	2300      	movs	r3, #0
}
 80131a4:	4618      	mov	r0, r3
 80131a6:	3708      	adds	r7, #8
 80131a8:	46bd      	mov	sp, r7
 80131aa:	bd80      	pop	{r7, pc}
 80131ac:	20001998 	.word	0x20001998

080131b0 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 80131b0:	b580      	push	{r7, lr}
 80131b2:	b082      	sub	sp, #8
 80131b4:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 80131b6:	4b0e      	ldr	r3, [pc, #56]	@ (80131f0 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>)
 80131b8:	681b      	ldr	r3, [r3, #0]
 80131ba:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 80131bc:	e00f      	b.n	80131de <LoRaMacCommandsRemoveStickyAnsCmds+0x2e>
    {
        nexElement = curElement->Next;
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	681b      	ldr	r3, [r3, #0]
 80131c2:	603b      	str	r3, [r7, #0]
        if( IsSticky( curElement->CID ) == true )
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	791b      	ldrb	r3, [r3, #4]
 80131c8:	4618      	mov	r0, r3
 80131ca:	f7ff ff21 	bl	8013010 <IsSticky>
 80131ce:	4603      	mov	r3, r0
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	d002      	beq.n	80131da <LoRaMacCommandsRemoveStickyAnsCmds+0x2a>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 80131d4:	6878      	ldr	r0, [r7, #4]
 80131d6:	f7ff ff95 	bl	8013104 <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 80131da:	683b      	ldr	r3, [r7, #0]
 80131dc:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	2b00      	cmp	r3, #0
 80131e2:	d1ec      	bne.n	80131be <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80131e4:	2300      	movs	r3, #0
}
 80131e6:	4618      	mov	r0, r3
 80131e8:	3708      	adds	r7, #8
 80131ea:	46bd      	mov	sp, r7
 80131ec:	bd80      	pop	{r7, pc}
 80131ee:	bf00      	nop
 80131f0:	20001998 	.word	0x20001998

080131f4 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 80131f4:	b480      	push	{r7}
 80131f6:	b083      	sub	sp, #12
 80131f8:	af00      	add	r7, sp, #0
 80131fa:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	2b00      	cmp	r3, #0
 8013200:	d101      	bne.n	8013206 <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8013202:	2301      	movs	r3, #1
 8013204:	e005      	b.n	8013212 <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 8013206:	4b05      	ldr	r3, [pc, #20]	@ (801321c <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 8013208:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 8013210:	2300      	movs	r3, #0
}
 8013212:	4618      	mov	r0, r3
 8013214:	370c      	adds	r7, #12
 8013216:	46bd      	mov	sp, r7
 8013218:	bc80      	pop	{r7}
 801321a:	4770      	bx	lr
 801321c:	20001998 	.word	0x20001998

08013220 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 8013220:	b580      	push	{r7, lr}
 8013222:	b088      	sub	sp, #32
 8013224:	af00      	add	r7, sp, #0
 8013226:	60f8      	str	r0, [r7, #12]
 8013228:	60b9      	str	r1, [r7, #8]
 801322a:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 801322c:	4b25      	ldr	r3, [pc, #148]	@ (80132c4 <LoRaMacCommandsSerializeCmds+0xa4>)
 801322e:	681b      	ldr	r3, [r3, #0]
 8013230:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 8013232:	2300      	movs	r3, #0
 8013234:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 8013236:	687b      	ldr	r3, [r7, #4]
 8013238:	2b00      	cmp	r3, #0
 801323a:	d002      	beq.n	8013242 <LoRaMacCommandsSerializeCmds+0x22>
 801323c:	68bb      	ldr	r3, [r7, #8]
 801323e:	2b00      	cmp	r3, #0
 8013240:	d126      	bne.n	8013290 <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8013242:	2301      	movs	r3, #1
 8013244:	e039      	b.n	80132ba <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 8013246:	7efb      	ldrb	r3, [r7, #27]
 8013248:	68fa      	ldr	r2, [r7, #12]
 801324a:	1ad2      	subs	r2, r2, r3
 801324c:	69fb      	ldr	r3, [r7, #28]
 801324e:	689b      	ldr	r3, [r3, #8]
 8013250:	3301      	adds	r3, #1
 8013252:	429a      	cmp	r2, r3
 8013254:	d320      	bcc.n	8013298 <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 8013256:	7efb      	ldrb	r3, [r7, #27]
 8013258:	1c5a      	adds	r2, r3, #1
 801325a:	76fa      	strb	r2, [r7, #27]
 801325c:	461a      	mov	r2, r3
 801325e:	687b      	ldr	r3, [r7, #4]
 8013260:	4413      	add	r3, r2
 8013262:	69fa      	ldr	r2, [r7, #28]
 8013264:	7912      	ldrb	r2, [r2, #4]
 8013266:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 8013268:	7efb      	ldrb	r3, [r7, #27]
 801326a:	687a      	ldr	r2, [r7, #4]
 801326c:	18d0      	adds	r0, r2, r3
 801326e:	69fb      	ldr	r3, [r7, #28]
 8013270:	1d59      	adds	r1, r3, #5
 8013272:	69fb      	ldr	r3, [r7, #28]
 8013274:	689b      	ldr	r3, [r3, #8]
 8013276:	b29b      	uxth	r3, r3
 8013278:	461a      	mov	r2, r3
 801327a:	f003 ff0c 	bl	8017096 <memcpy1>
            itr += curElement->PayloadSize;
 801327e:	69fb      	ldr	r3, [r7, #28]
 8013280:	689b      	ldr	r3, [r3, #8]
 8013282:	b2da      	uxtb	r2, r3
 8013284:	7efb      	ldrb	r3, [r7, #27]
 8013286:	4413      	add	r3, r2
 8013288:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 801328a:	69fb      	ldr	r3, [r7, #28]
 801328c:	681b      	ldr	r3, [r3, #0]
 801328e:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8013290:	69fb      	ldr	r3, [r7, #28]
 8013292:	2b00      	cmp	r3, #0
 8013294:	d1d7      	bne.n	8013246 <LoRaMacCommandsSerializeCmds+0x26>
 8013296:	e009      	b.n	80132ac <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 8013298:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 801329a:	e007      	b.n	80132ac <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 801329c:	69fb      	ldr	r3, [r7, #28]
 801329e:	681b      	ldr	r3, [r3, #0]
 80132a0:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 80132a2:	69f8      	ldr	r0, [r7, #28]
 80132a4:	f7ff ff2e 	bl	8013104 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 80132a8:	697b      	ldr	r3, [r7, #20]
 80132aa:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 80132ac:	69fb      	ldr	r3, [r7, #28]
 80132ae:	2b00      	cmp	r3, #0
 80132b0:	d1f4      	bne.n	801329c <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 80132b2:	68b8      	ldr	r0, [r7, #8]
 80132b4:	f7ff ff9e 	bl	80131f4 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 80132b8:	2300      	movs	r3, #0
}
 80132ba:	4618      	mov	r0, r3
 80132bc:	3720      	adds	r7, #32
 80132be:	46bd      	mov	sp, r7
 80132c0:	bd80      	pop	{r7, pc}
 80132c2:	bf00      	nop
 80132c4:	20001998 	.word	0x20001998

080132c8 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
 80132c8:	b480      	push	{r7}
 80132ca:	b085      	sub	sp, #20
 80132cc:	af00      	add	r7, sp, #0
 80132ce:	6078      	str	r0, [r7, #4]
    if( cmdsPending == NULL )
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	2b00      	cmp	r3, #0
 80132d4:	d101      	bne.n	80132da <LoRaMacCommandsStickyCmdsPending+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80132d6:	2301      	movs	r3, #1
 80132d8:	e016      	b.n	8013308 <LoRaMacCommandsStickyCmdsPending+0x40>
    }
    MacCommand_t* curElement;
    curElement = CommandsCtx.MacCommandList.First;
 80132da:	4b0e      	ldr	r3, [pc, #56]	@ (8013314 <LoRaMacCommandsStickyCmdsPending+0x4c>)
 80132dc:	681b      	ldr	r3, [r3, #0]
 80132de:	60fb      	str	r3, [r7, #12]

    *cmdsPending = false;
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	2200      	movs	r2, #0
 80132e4:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 80132e6:	e00b      	b.n	8013300 <LoRaMacCommandsStickyCmdsPending+0x38>
    {
        if( curElement->IsSticky == true )
 80132e8:	68fb      	ldr	r3, [r7, #12]
 80132ea:	7b1b      	ldrb	r3, [r3, #12]
 80132ec:	2b00      	cmp	r3, #0
 80132ee:	d004      	beq.n	80132fa <LoRaMacCommandsStickyCmdsPending+0x32>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	2201      	movs	r2, #1
 80132f4:	701a      	strb	r2, [r3, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 80132f6:	2300      	movs	r3, #0
 80132f8:	e006      	b.n	8013308 <LoRaMacCommandsStickyCmdsPending+0x40>
        }
        curElement = curElement->Next;
 80132fa:	68fb      	ldr	r3, [r7, #12]
 80132fc:	681b      	ldr	r3, [r3, #0]
 80132fe:	60fb      	str	r3, [r7, #12]
    while( curElement != NULL )
 8013300:	68fb      	ldr	r3, [r7, #12]
 8013302:	2b00      	cmp	r3, #0
 8013304:	d1f0      	bne.n	80132e8 <LoRaMacCommandsStickyCmdsPending+0x20>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8013306:	2300      	movs	r3, #0
}
 8013308:	4618      	mov	r0, r3
 801330a:	3714      	adds	r7, #20
 801330c:	46bd      	mov	sp, r7
 801330e:	bc80      	pop	{r7}
 8013310:	4770      	bx	lr
 8013312:	bf00      	nop
 8013314:	20001998 	.word	0x20001998

08013318 <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 8013318:	b480      	push	{r7}
 801331a:	b085      	sub	sp, #20
 801331c:	af00      	add	r7, sp, #0
 801331e:	4603      	mov	r3, r0
 8013320:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 8013322:	2300      	movs	r3, #0
 8013324:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 8013326:	79fb      	ldrb	r3, [r7, #7]
 8013328:	3b02      	subs	r3, #2
 801332a:	2b11      	cmp	r3, #17
 801332c:	d850      	bhi.n	80133d0 <LoRaMacCommandsGetCmdSize+0xb8>
 801332e:	a201      	add	r2, pc, #4	@ (adr r2, 8013334 <LoRaMacCommandsGetCmdSize+0x1c>)
 8013330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013334:	0801337d 	.word	0x0801337d
 8013338:	08013383 	.word	0x08013383
 801333c:	08013389 	.word	0x08013389
 8013340:	0801338f 	.word	0x0801338f
 8013344:	08013395 	.word	0x08013395
 8013348:	0801339b 	.word	0x0801339b
 801334c:	080133a1 	.word	0x080133a1
 8013350:	080133a7 	.word	0x080133a7
 8013354:	080133ad 	.word	0x080133ad
 8013358:	080133d1 	.word	0x080133d1
 801335c:	080133d1 	.word	0x080133d1
 8013360:	080133b3 	.word	0x080133b3
 8013364:	080133d1 	.word	0x080133d1
 8013368:	080133d1 	.word	0x080133d1
 801336c:	080133b9 	.word	0x080133b9
 8013370:	080133bf 	.word	0x080133bf
 8013374:	080133c5 	.word	0x080133c5
 8013378:	080133cb 	.word	0x080133cb
    {
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 801337c:	2303      	movs	r3, #3
 801337e:	73fb      	strb	r3, [r7, #15]
            break;
 8013380:	e027      	b.n	80133d2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 8013382:	2305      	movs	r3, #5
 8013384:	73fb      	strb	r3, [r7, #15]
            break;
 8013386:	e024      	b.n	80133d2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 8013388:	2302      	movs	r3, #2
 801338a:	73fb      	strb	r3, [r7, #15]
            break;
 801338c:	e021      	b.n	80133d2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 801338e:	2305      	movs	r3, #5
 8013390:	73fb      	strb	r3, [r7, #15]
            break;
 8013392:	e01e      	b.n	80133d2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 8013394:	2301      	movs	r3, #1
 8013396:	73fb      	strb	r3, [r7, #15]
            break;
 8013398:	e01b      	b.n	80133d2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 801339a:	2306      	movs	r3, #6
 801339c:	73fb      	strb	r3, [r7, #15]
            break;
 801339e:	e018      	b.n	80133d2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 80133a0:	2302      	movs	r3, #2
 80133a2:	73fb      	strb	r3, [r7, #15]
            break;
 80133a4:	e015      	b.n	80133d2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 80133a6:	2302      	movs	r3, #2
 80133a8:	73fb      	strb	r3, [r7, #15]
            break;
 80133aa:	e012      	b.n	80133d2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 80133ac:	2305      	movs	r3, #5
 80133ae:	73fb      	strb	r3, [r7, #15]
            break;
 80133b0:	e00f      	b.n	80133d2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 80133b2:	2306      	movs	r3, #6
 80133b4:	73fb      	strb	r3, [r7, #15]
            break;
 80133b6:	e00c      	b.n	80133d2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 80133b8:	2301      	movs	r3, #1
 80133ba:	73fb      	strb	r3, [r7, #15]
            break;
 80133bc:	e009      	b.n	80133d2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 80133be:	2305      	movs	r3, #5
 80133c0:	73fb      	strb	r3, [r7, #15]
            break;
 80133c2:	e006      	b.n	80133d2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 80133c4:	2304      	movs	r3, #4
 80133c6:	73fb      	strb	r3, [r7, #15]
            break;
 80133c8:	e003      	b.n	80133d2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 80133ca:	2304      	movs	r3, #4
 80133cc:	73fb      	strb	r3, [r7, #15]
            break;
 80133ce:	e000      	b.n	80133d2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 80133d0:	bf00      	nop
        }
    }
    return cidSize;
 80133d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80133d4:	4618      	mov	r0, r3
 80133d6:	3714      	adds	r7, #20
 80133d8:	46bd      	mov	sp, r7
 80133da:	bc80      	pop	{r7}
 80133dc:	4770      	bx	lr
 80133de:	bf00      	nop

080133e0 <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 80133e0:	b480      	push	{r7}
 80133e2:	b083      	sub	sp, #12
 80133e4:	af00      	add	r7, sp, #0
 80133e6:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	4a07      	ldr	r2, [pc, #28]	@ (8013408 <IncreaseBufferPointer+0x28>)
 80133ec:	4293      	cmp	r3, r2
 80133ee:	d102      	bne.n	80133f6 <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 80133f0:	4b06      	ldr	r3, [pc, #24]	@ (801340c <IncreaseBufferPointer+0x2c>)
 80133f2:	607b      	str	r3, [r7, #4]
 80133f4:	e002      	b.n	80133fc <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	3304      	adds	r3, #4
 80133fa:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 80133fc:	687b      	ldr	r3, [r7, #4]
}
 80133fe:	4618      	mov	r0, r3
 8013400:	370c      	adds	r7, #12
 8013402:	46bd      	mov	sp, r7
 8013404:	bc80      	pop	{r7}
 8013406:	4770      	bx	lr
 8013408:	20001bc0 	.word	0x20001bc0
 801340c:	20001bb0 	.word	0x20001bb0

08013410 <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 8013410:	b480      	push	{r7}
 8013412:	b083      	sub	sp, #12
 8013414:	af00      	add	r7, sp, #0
 8013416:	4603      	mov	r3, r0
 8013418:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 801341a:	79fb      	ldrb	r3, [r7, #7]
 801341c:	2b00      	cmp	r3, #0
 801341e:	d101      	bne.n	8013424 <IsListEmpty+0x14>
    {
        return true;
 8013420:	2301      	movs	r3, #1
 8013422:	e000      	b.n	8013426 <IsListEmpty+0x16>
    }
    return false;
 8013424:	2300      	movs	r3, #0
}
 8013426:	4618      	mov	r0, r3
 8013428:	370c      	adds	r7, #12
 801342a:	46bd      	mov	sp, r7
 801342c:	bc80      	pop	{r7}
 801342e:	4770      	bx	lr

08013430 <IsListFull>:

static bool IsListFull( uint8_t count )
{
 8013430:	b480      	push	{r7}
 8013432:	b083      	sub	sp, #12
 8013434:	af00      	add	r7, sp, #0
 8013436:	4603      	mov	r3, r0
 8013438:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 801343a:	79fb      	ldrb	r3, [r7, #7]
 801343c:	2b04      	cmp	r3, #4
 801343e:	d901      	bls.n	8013444 <IsListFull+0x14>
    {
        return true;
 8013440:	2301      	movs	r3, #1
 8013442:	e000      	b.n	8013446 <IsListFull+0x16>
    }
    return false;
 8013444:	2300      	movs	r3, #0
}
 8013446:	4618      	mov	r0, r3
 8013448:	370c      	adds	r7, #12
 801344a:	46bd      	mov	sp, r7
 801344c:	bc80      	pop	{r7}
 801344e:	4770      	bx	lr

08013450 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 8013450:	b580      	push	{r7, lr}
 8013452:	b086      	sub	sp, #24
 8013454:	af00      	add	r7, sp, #0
 8013456:	4603      	mov	r3, r0
 8013458:	60b9      	str	r1, [r7, #8]
 801345a:	607a      	str	r2, [r7, #4]
 801345c:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 801345e:	68bb      	ldr	r3, [r7, #8]
 8013460:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8013462:	4b13      	ldr	r3, [pc, #76]	@ (80134b0 <GetElement+0x60>)
 8013464:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013468:	4618      	mov	r0, r3
 801346a:	f7ff ffd1 	bl	8013410 <IsListEmpty>
 801346e:	4603      	mov	r3, r0
 8013470:	2b00      	cmp	r3, #0
 8013472:	d001      	beq.n	8013478 <GetElement+0x28>
    {
        return NULL;
 8013474:	2300      	movs	r3, #0
 8013476:	e017      	b.n	80134a8 <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8013478:	2300      	movs	r3, #0
 801347a:	74fb      	strb	r3, [r7, #19]
 801347c:	e00d      	b.n	801349a <GetElement+0x4a>
    {
        if( element->Request == request )
 801347e:	697b      	ldr	r3, [r7, #20]
 8013480:	781b      	ldrb	r3, [r3, #0]
 8013482:	7bfa      	ldrb	r2, [r7, #15]
 8013484:	429a      	cmp	r2, r3
 8013486:	d101      	bne.n	801348c <GetElement+0x3c>
        {
            // We have found the element
            return element;
 8013488:	697b      	ldr	r3, [r7, #20]
 801348a:	e00d      	b.n	80134a8 <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 801348c:	6978      	ldr	r0, [r7, #20]
 801348e:	f7ff ffa7 	bl	80133e0 <IncreaseBufferPointer>
 8013492:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8013494:	7cfb      	ldrb	r3, [r7, #19]
 8013496:	3301      	adds	r3, #1
 8013498:	74fb      	strb	r3, [r7, #19]
 801349a:	4b05      	ldr	r3, [pc, #20]	@ (80134b0 <GetElement+0x60>)
 801349c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80134a0:	7cfa      	ldrb	r2, [r7, #19]
 80134a2:	429a      	cmp	r2, r3
 80134a4:	d3eb      	bcc.n	801347e <GetElement+0x2e>
    }

    return NULL;
 80134a6:	2300      	movs	r3, #0
}
 80134a8:	4618      	mov	r0, r3
 80134aa:	3718      	adds	r7, #24
 80134ac:	46bd      	mov	sp, r7
 80134ae:	bd80      	pop	{r7, pc}
 80134b0:	20001ba4 	.word	0x20001ba4

080134b4 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 80134b4:	b580      	push	{r7, lr}
 80134b6:	b082      	sub	sp, #8
 80134b8:	af00      	add	r7, sp, #0
 80134ba:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 80134bc:	4a0c      	ldr	r2, [pc, #48]	@ (80134f0 <LoRaMacConfirmQueueInit+0x3c>)
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 80134c2:	4b0b      	ldr	r3, [pc, #44]	@ (80134f0 <LoRaMacConfirmQueueInit+0x3c>)
 80134c4:	2200      	movs	r2, #0
 80134c6:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 80134ca:	4b09      	ldr	r3, [pc, #36]	@ (80134f0 <LoRaMacConfirmQueueInit+0x3c>)
 80134cc:	4a09      	ldr	r2, [pc, #36]	@ (80134f4 <LoRaMacConfirmQueueInit+0x40>)
 80134ce:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 80134d0:	4b07      	ldr	r3, [pc, #28]	@ (80134f0 <LoRaMacConfirmQueueInit+0x3c>)
 80134d2:	4a08      	ldr	r2, [pc, #32]	@ (80134f4 <LoRaMacConfirmQueueInit+0x40>)
 80134d4:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 80134d6:	2214      	movs	r2, #20
 80134d8:	21ff      	movs	r1, #255	@ 0xff
 80134da:	4806      	ldr	r0, [pc, #24]	@ (80134f4 <LoRaMacConfirmQueueInit+0x40>)
 80134dc:	f003 fe16 	bl	801710c <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80134e0:	4b03      	ldr	r3, [pc, #12]	@ (80134f0 <LoRaMacConfirmQueueInit+0x3c>)
 80134e2:	2201      	movs	r2, #1
 80134e4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 80134e8:	bf00      	nop
 80134ea:	3708      	adds	r7, #8
 80134ec:	46bd      	mov	sp, r7
 80134ee:	bd80      	pop	{r7, pc}
 80134f0:	20001ba4 	.word	0x20001ba4
 80134f4:	20001bb0 	.word	0x20001bb0

080134f8 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 80134f8:	b580      	push	{r7, lr}
 80134fa:	b082      	sub	sp, #8
 80134fc:	af00      	add	r7, sp, #0
 80134fe:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8013500:	4b19      	ldr	r3, [pc, #100]	@ (8013568 <LoRaMacConfirmQueueAdd+0x70>)
 8013502:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013506:	4618      	mov	r0, r3
 8013508:	f7ff ff92 	bl	8013430 <IsListFull>
 801350c:	4603      	mov	r3, r0
 801350e:	2b00      	cmp	r3, #0
 8013510:	d001      	beq.n	8013516 <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 8013512:	2300      	movs	r3, #0
 8013514:	e024      	b.n	8013560 <LoRaMacConfirmQueueAdd+0x68>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 8013516:	4b14      	ldr	r3, [pc, #80]	@ (8013568 <LoRaMacConfirmQueueAdd+0x70>)
 8013518:	689b      	ldr	r3, [r3, #8]
 801351a:	687a      	ldr	r2, [r7, #4]
 801351c:	7812      	ldrb	r2, [r2, #0]
 801351e:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 8013520:	4b11      	ldr	r3, [pc, #68]	@ (8013568 <LoRaMacConfirmQueueAdd+0x70>)
 8013522:	689b      	ldr	r3, [r3, #8]
 8013524:	687a      	ldr	r2, [r7, #4]
 8013526:	7852      	ldrb	r2, [r2, #1]
 8013528:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 801352a:	4b0f      	ldr	r3, [pc, #60]	@ (8013568 <LoRaMacConfirmQueueAdd+0x70>)
 801352c:	689b      	ldr	r3, [r3, #8]
 801352e:	687a      	ldr	r2, [r7, #4]
 8013530:	78d2      	ldrb	r2, [r2, #3]
 8013532:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
 8013534:	4b0c      	ldr	r3, [pc, #48]	@ (8013568 <LoRaMacConfirmQueueAdd+0x70>)
 8013536:	689b      	ldr	r3, [r3, #8]
 8013538:	687a      	ldr	r2, [r7, #4]
 801353a:	7892      	ldrb	r2, [r2, #2]
 801353c:	709a      	strb	r2, [r3, #2]
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 801353e:	4b0a      	ldr	r3, [pc, #40]	@ (8013568 <LoRaMacConfirmQueueAdd+0x70>)
 8013540:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013544:	3301      	adds	r3, #1
 8013546:	b2da      	uxtb	r2, r3
 8013548:	4b07      	ldr	r3, [pc, #28]	@ (8013568 <LoRaMacConfirmQueueAdd+0x70>)
 801354a:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 801354e:	4b06      	ldr	r3, [pc, #24]	@ (8013568 <LoRaMacConfirmQueueAdd+0x70>)
 8013550:	689b      	ldr	r3, [r3, #8]
 8013552:	4618      	mov	r0, r3
 8013554:	f7ff ff44 	bl	80133e0 <IncreaseBufferPointer>
 8013558:	4603      	mov	r3, r0
 801355a:	4a03      	ldr	r2, [pc, #12]	@ (8013568 <LoRaMacConfirmQueueAdd+0x70>)
 801355c:	6093      	str	r3, [r2, #8]

    return true;
 801355e:	2301      	movs	r3, #1
}
 8013560:	4618      	mov	r0, r3
 8013562:	3708      	adds	r7, #8
 8013564:	46bd      	mov	sp, r7
 8013566:	bd80      	pop	{r7, pc}
 8013568:	20001ba4 	.word	0x20001ba4

0801356c <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 801356c:	b580      	push	{r7, lr}
 801356e:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8013570:	4b0e      	ldr	r3, [pc, #56]	@ (80135ac <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8013572:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013576:	4618      	mov	r0, r3
 8013578:	f7ff ff4a 	bl	8013410 <IsListEmpty>
 801357c:	4603      	mov	r3, r0
 801357e:	2b00      	cmp	r3, #0
 8013580:	d001      	beq.n	8013586 <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 8013582:	2300      	movs	r3, #0
 8013584:	e010      	b.n	80135a8 <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 8013586:	4b09      	ldr	r3, [pc, #36]	@ (80135ac <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8013588:	f893 3020 	ldrb.w	r3, [r3, #32]
 801358c:	3b01      	subs	r3, #1
 801358e:	b2da      	uxtb	r2, r3
 8013590:	4b06      	ldr	r3, [pc, #24]	@ (80135ac <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8013592:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8013596:	4b05      	ldr	r3, [pc, #20]	@ (80135ac <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8013598:	685b      	ldr	r3, [r3, #4]
 801359a:	4618      	mov	r0, r3
 801359c:	f7ff ff20 	bl	80133e0 <IncreaseBufferPointer>
 80135a0:	4603      	mov	r3, r0
 80135a2:	4a02      	ldr	r2, [pc, #8]	@ (80135ac <LoRaMacConfirmQueueRemoveFirst+0x40>)
 80135a4:	6053      	str	r3, [r2, #4]

    return true;
 80135a6:	2301      	movs	r3, #1
}
 80135a8:	4618      	mov	r0, r3
 80135aa:	bd80      	pop	{r7, pc}
 80135ac:	20001ba4 	.word	0x20001ba4

080135b0 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 80135b0:	b580      	push	{r7, lr}
 80135b2:	b084      	sub	sp, #16
 80135b4:	af00      	add	r7, sp, #0
 80135b6:	4603      	mov	r3, r0
 80135b8:	460a      	mov	r2, r1
 80135ba:	71fb      	strb	r3, [r7, #7]
 80135bc:	4613      	mov	r3, r2
 80135be:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 80135c0:	2300      	movs	r3, #0
 80135c2:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 80135c4:	4b10      	ldr	r3, [pc, #64]	@ (8013608 <LoRaMacConfirmQueueSetStatus+0x58>)
 80135c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80135ca:	4618      	mov	r0, r3
 80135cc:	f7ff ff20 	bl	8013410 <IsListEmpty>
 80135d0:	4603      	mov	r3, r0
 80135d2:	f083 0301 	eor.w	r3, r3, #1
 80135d6:	b2db      	uxtb	r3, r3
 80135d8:	2b00      	cmp	r3, #0
 80135da:	d011      	beq.n	8013600 <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 80135dc:	4b0a      	ldr	r3, [pc, #40]	@ (8013608 <LoRaMacConfirmQueueSetStatus+0x58>)
 80135de:	6859      	ldr	r1, [r3, #4]
 80135e0:	4b09      	ldr	r3, [pc, #36]	@ (8013608 <LoRaMacConfirmQueueSetStatus+0x58>)
 80135e2:	689a      	ldr	r2, [r3, #8]
 80135e4:	79bb      	ldrb	r3, [r7, #6]
 80135e6:	4618      	mov	r0, r3
 80135e8:	f7ff ff32 	bl	8013450 <GetElement>
 80135ec:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 80135ee:	68fb      	ldr	r3, [r7, #12]
 80135f0:	2b00      	cmp	r3, #0
 80135f2:	d005      	beq.n	8013600 <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 80135f4:	68fb      	ldr	r3, [r7, #12]
 80135f6:	79fa      	ldrb	r2, [r7, #7]
 80135f8:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 80135fa:	68fb      	ldr	r3, [r7, #12]
 80135fc:	2201      	movs	r2, #1
 80135fe:	709a      	strb	r2, [r3, #2]
        }
    }
}
 8013600:	bf00      	nop
 8013602:	3710      	adds	r7, #16
 8013604:	46bd      	mov	sp, r7
 8013606:	bd80      	pop	{r7, pc}
 8013608:	20001ba4 	.word	0x20001ba4

0801360c <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 801360c:	b580      	push	{r7, lr}
 801360e:	b084      	sub	sp, #16
 8013610:	af00      	add	r7, sp, #0
 8013612:	4603      	mov	r3, r0
 8013614:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 8013616:	2300      	movs	r3, #0
 8013618:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 801361a:	4b10      	ldr	r3, [pc, #64]	@ (801365c <LoRaMacConfirmQueueGetStatus+0x50>)
 801361c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013620:	4618      	mov	r0, r3
 8013622:	f7ff fef5 	bl	8013410 <IsListEmpty>
 8013626:	4603      	mov	r3, r0
 8013628:	f083 0301 	eor.w	r3, r3, #1
 801362c:	b2db      	uxtb	r3, r3
 801362e:	2b00      	cmp	r3, #0
 8013630:	d00e      	beq.n	8013650 <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8013632:	4b0a      	ldr	r3, [pc, #40]	@ (801365c <LoRaMacConfirmQueueGetStatus+0x50>)
 8013634:	6859      	ldr	r1, [r3, #4]
 8013636:	4b09      	ldr	r3, [pc, #36]	@ (801365c <LoRaMacConfirmQueueGetStatus+0x50>)
 8013638:	689a      	ldr	r2, [r3, #8]
 801363a:	79fb      	ldrb	r3, [r7, #7]
 801363c:	4618      	mov	r0, r3
 801363e:	f7ff ff07 	bl	8013450 <GetElement>
 8013642:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8013644:	68fb      	ldr	r3, [r7, #12]
 8013646:	2b00      	cmp	r3, #0
 8013648:	d002      	beq.n	8013650 <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 801364a:	68fb      	ldr	r3, [r7, #12]
 801364c:	785b      	ldrb	r3, [r3, #1]
 801364e:	e000      	b.n	8013652 <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 8013650:	2301      	movs	r3, #1
}
 8013652:	4618      	mov	r0, r3
 8013654:	3710      	adds	r7, #16
 8013656:	46bd      	mov	sp, r7
 8013658:	bd80      	pop	{r7, pc}
 801365a:	bf00      	nop
 801365c:	20001ba4 	.word	0x20001ba4

08013660 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 8013660:	b580      	push	{r7, lr}
 8013662:	b084      	sub	sp, #16
 8013664:	af00      	add	r7, sp, #0
 8013666:	4603      	mov	r3, r0
 8013668:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 801366a:	4b16      	ldr	r3, [pc, #88]	@ (80136c4 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 801366c:	685b      	ldr	r3, [r3, #4]
 801366e:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 8013670:	4a14      	ldr	r2, [pc, #80]	@ (80136c4 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8013672:	79fb      	ldrb	r3, [r7, #7]
 8013674:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8013678:	4b12      	ldr	r3, [pc, #72]	@ (80136c4 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 801367a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801367e:	4618      	mov	r0, r3
 8013680:	f7ff fec6 	bl	8013410 <IsListEmpty>
 8013684:	4603      	mov	r3, r0
 8013686:	f083 0301 	eor.w	r3, r3, #1
 801368a:	b2db      	uxtb	r3, r3
 801368c:	2b00      	cmp	r3, #0
 801368e:	d015      	beq.n	80136bc <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 8013690:	68fb      	ldr	r3, [r7, #12]
 8013692:	79fa      	ldrb	r2, [r7, #7]
 8013694:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 8013696:	68fb      	ldr	r3, [r7, #12]
 8013698:	78db      	ldrb	r3, [r3, #3]
 801369a:	f083 0301 	eor.w	r3, r3, #1
 801369e:	b2db      	uxtb	r3, r3
 80136a0:	2b00      	cmp	r3, #0
 80136a2:	d002      	beq.n	80136aa <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 80136a4:	68fb      	ldr	r3, [r7, #12]
 80136a6:	2201      	movs	r2, #1
 80136a8:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 80136aa:	68f8      	ldr	r0, [r7, #12]
 80136ac:	f7ff fe98 	bl	80133e0 <IncreaseBufferPointer>
 80136b0:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 80136b2:	4b04      	ldr	r3, [pc, #16]	@ (80136c4 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 80136b4:	689b      	ldr	r3, [r3, #8]
 80136b6:	68fa      	ldr	r2, [r7, #12]
 80136b8:	429a      	cmp	r2, r3
 80136ba:	d1e9      	bne.n	8013690 <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 80136bc:	bf00      	nop
 80136be:	3710      	adds	r7, #16
 80136c0:	46bd      	mov	sp, r7
 80136c2:	bd80      	pop	{r7, pc}
 80136c4:	20001ba4 	.word	0x20001ba4

080136c8 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 80136c8:	b580      	push	{r7, lr}
 80136ca:	b082      	sub	sp, #8
 80136cc:	af00      	add	r7, sp, #0
 80136ce:	4603      	mov	r3, r0
 80136d0:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 80136d2:	4b09      	ldr	r3, [pc, #36]	@ (80136f8 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 80136d4:	6859      	ldr	r1, [r3, #4]
 80136d6:	4b08      	ldr	r3, [pc, #32]	@ (80136f8 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 80136d8:	689a      	ldr	r2, [r3, #8]
 80136da:	79fb      	ldrb	r3, [r7, #7]
 80136dc:	4618      	mov	r0, r3
 80136de:	f7ff feb7 	bl	8013450 <GetElement>
 80136e2:	4603      	mov	r3, r0
 80136e4:	2b00      	cmp	r3, #0
 80136e6:	d001      	beq.n	80136ec <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 80136e8:	2301      	movs	r3, #1
 80136ea:	e000      	b.n	80136ee <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 80136ec:	2300      	movs	r3, #0
}
 80136ee:	4618      	mov	r0, r3
 80136f0:	3708      	adds	r7, #8
 80136f2:	46bd      	mov	sp, r7
 80136f4:	bd80      	pop	{r7, pc}
 80136f6:	bf00      	nop
 80136f8:	20001ba4 	.word	0x20001ba4

080136fc <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 80136fc:	b580      	push	{r7, lr}
 80136fe:	b084      	sub	sp, #16
 8013700:	af00      	add	r7, sp, #0
 8013702:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8013704:	4b22      	ldr	r3, [pc, #136]	@ (8013790 <LoRaMacConfirmQueueHandleCb+0x94>)
 8013706:	f893 3020 	ldrb.w	r3, [r3, #32]
 801370a:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 801370c:	2300      	movs	r3, #0
 801370e:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 8013710:	2300      	movs	r3, #0
 8013712:	73fb      	strb	r3, [r7, #15]
 8013714:	e032      	b.n	801377c <LoRaMacConfirmQueueHandleCb+0x80>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 8013716:	4b1e      	ldr	r3, [pc, #120]	@ (8013790 <LoRaMacConfirmQueueHandleCb+0x94>)
 8013718:	685b      	ldr	r3, [r3, #4]
 801371a:	781a      	ldrb	r2, [r3, #0]
 801371c:	687b      	ldr	r3, [r7, #4]
 801371e:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 8013720:	4b1b      	ldr	r3, [pc, #108]	@ (8013790 <LoRaMacConfirmQueueHandleCb+0x94>)
 8013722:	685b      	ldr	r3, [r3, #4]
 8013724:	785a      	ldrb	r2, [r3, #1]
 8013726:	687b      	ldr	r3, [r7, #4]
 8013728:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 801372a:	4b19      	ldr	r3, [pc, #100]	@ (8013790 <LoRaMacConfirmQueueHandleCb+0x94>)
 801372c:	685b      	ldr	r3, [r3, #4]
 801372e:	789b      	ldrb	r3, [r3, #2]
 8013730:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 8013732:	7b7b      	ldrb	r3, [r7, #13]
 8013734:	2b00      	cmp	r3, #0
 8013736:	d005      	beq.n	8013744 <LoRaMacConfirmQueueHandleCb+0x48>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 8013738:	4b15      	ldr	r3, [pc, #84]	@ (8013790 <LoRaMacConfirmQueueHandleCb+0x94>)
 801373a:	681b      	ldr	r3, [r3, #0]
 801373c:	689b      	ldr	r3, [r3, #8]
 801373e:	6878      	ldr	r0, [r7, #4]
 8013740:	4798      	blx	r3
 8013742:	e00b      	b.n	801375c <LoRaMacConfirmQueueHandleCb+0x60>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 8013744:	4b12      	ldr	r3, [pc, #72]	@ (8013790 <LoRaMacConfirmQueueHandleCb+0x94>)
 8013746:	685b      	ldr	r3, [r3, #4]
 8013748:	781b      	ldrb	r3, [r3, #0]
 801374a:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 801374c:	4b10      	ldr	r3, [pc, #64]	@ (8013790 <LoRaMacConfirmQueueHandleCb+0x94>)
 801374e:	685b      	ldr	r3, [r3, #4]
 8013750:	785b      	ldrb	r3, [r3, #1]
 8013752:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 8013754:	4b0e      	ldr	r3, [pc, #56]	@ (8013790 <LoRaMacConfirmQueueHandleCb+0x94>)
 8013756:	685b      	ldr	r3, [r3, #4]
 8013758:	78db      	ldrb	r3, [r3, #3]
 801375a:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 801375c:	f7ff ff06 	bl	801356c <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 8013760:	7b7b      	ldrb	r3, [r7, #13]
 8013762:	f083 0301 	eor.w	r3, r3, #1
 8013766:	b2db      	uxtb	r3, r3
 8013768:	2b00      	cmp	r3, #0
 801376a:	d004      	beq.n	8013776 <LoRaMacConfirmQueueHandleCb+0x7a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 801376c:	f107 0308 	add.w	r3, r7, #8
 8013770:	4618      	mov	r0, r3
 8013772:	f7ff fec1 	bl	80134f8 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 8013776:	7bfb      	ldrb	r3, [r7, #15]
 8013778:	3301      	adds	r3, #1
 801377a:	73fb      	strb	r3, [r7, #15]
 801377c:	7bfa      	ldrb	r2, [r7, #15]
 801377e:	7bbb      	ldrb	r3, [r7, #14]
 8013780:	429a      	cmp	r2, r3
 8013782:	d3c8      	bcc.n	8013716 <LoRaMacConfirmQueueHandleCb+0x1a>
        }
    }
}
 8013784:	bf00      	nop
 8013786:	bf00      	nop
 8013788:	3710      	adds	r7, #16
 801378a:	46bd      	mov	sp, r7
 801378c:	bd80      	pop	{r7, pc}
 801378e:	bf00      	nop
 8013790:	20001ba4 	.word	0x20001ba4

08013794 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 8013794:	b480      	push	{r7}
 8013796:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8013798:	4b03      	ldr	r3, [pc, #12]	@ (80137a8 <LoRaMacConfirmQueueGetCnt+0x14>)
 801379a:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 801379e:	4618      	mov	r0, r3
 80137a0:	46bd      	mov	sp, r7
 80137a2:	bc80      	pop	{r7}
 80137a4:	4770      	bx	lr
 80137a6:	bf00      	nop
 80137a8:	20001ba4 	.word	0x20001ba4

080137ac <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 80137ac:	b580      	push	{r7, lr}
 80137ae:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80137b0:	4b06      	ldr	r3, [pc, #24]	@ (80137cc <LoRaMacConfirmQueueIsFull+0x20>)
 80137b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80137b6:	4618      	mov	r0, r3
 80137b8:	f7ff fe3a 	bl	8013430 <IsListFull>
 80137bc:	4603      	mov	r3, r0
 80137be:	2b00      	cmp	r3, #0
 80137c0:	d001      	beq.n	80137c6 <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 80137c2:	2301      	movs	r3, #1
 80137c4:	e000      	b.n	80137c8 <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 80137c6:	2300      	movs	r3, #0
    }
}
 80137c8:	4618      	mov	r0, r3
 80137ca:	bd80      	pop	{r7, pc}
 80137cc:	20001ba4 	.word	0x20001ba4

080137d0 <PayloadEncrypt>:
 * \param [in] size             - Size of data
 * \param [in,out] buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 80137d0:	b580      	push	{r7, lr}
 80137d2:	b08e      	sub	sp, #56	@ 0x38
 80137d4:	af00      	add	r7, sp, #0
 80137d6:	60f8      	str	r0, [r7, #12]
 80137d8:	607b      	str	r3, [r7, #4]
 80137da:	460b      	mov	r3, r1
 80137dc:	817b      	strh	r3, [r7, #10]
 80137de:	4613      	mov	r3, r2
 80137e0:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 80137e2:	68fb      	ldr	r3, [r7, #12]
 80137e4:	2b00      	cmp	r3, #0
 80137e6:	d101      	bne.n	80137ec <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80137e8:	2309      	movs	r3, #9
 80137ea:	e084      	b.n	80138f6 <PayloadEncrypt+0x126>
    }

    uint8_t bufferIndex = 0;
 80137ec:	2300      	movs	r3, #0
 80137ee:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    uint16_t ctr = 1;
 80137f2:	2301      	movs	r3, #1
 80137f4:	86bb      	strh	r3, [r7, #52]	@ 0x34
    uint8_t sBlock[16] = { 0 };
 80137f6:	f107 0320 	add.w	r3, r7, #32
 80137fa:	2200      	movs	r2, #0
 80137fc:	601a      	str	r2, [r3, #0]
 80137fe:	605a      	str	r2, [r3, #4]
 8013800:	609a      	str	r2, [r3, #8]
 8013802:	60da      	str	r2, [r3, #12]
    uint8_t aBlock[16] = { 0 };
 8013804:	f107 0310 	add.w	r3, r7, #16
 8013808:	2200      	movs	r2, #0
 801380a:	601a      	str	r2, [r3, #0]
 801380c:	605a      	str	r2, [r3, #4]
 801380e:	609a      	str	r2, [r3, #8]
 8013810:	60da      	str	r2, [r3, #12]

    aBlock[0] = 0x01;
 8013812:	2301      	movs	r3, #1
 8013814:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 8013816:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 801381a:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	b2db      	uxtb	r3, r3
 8013820:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 8013822:	687b      	ldr	r3, [r7, #4]
 8013824:	0a1b      	lsrs	r3, r3, #8
 8013826:	b2db      	uxtb	r3, r3
 8013828:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	0c1b      	lsrs	r3, r3, #16
 801382e:	b2db      	uxtb	r3, r3
 8013830:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	0e1b      	lsrs	r3, r3, #24
 8013836:	b2db      	uxtb	r3, r3
 8013838:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 801383a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801383c:	b2db      	uxtb	r3, r3
 801383e:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8013840:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013842:	0a1b      	lsrs	r3, r3, #8
 8013844:	b2db      	uxtb	r3, r3
 8013846:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8013848:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801384a:	0c1b      	lsrs	r3, r3, #16
 801384c:	b2db      	uxtb	r3, r3
 801384e:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8013850:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013852:	0e1b      	lsrs	r3, r3, #24
 8013854:	b2db      	uxtb	r3, r3
 8013856:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 8013858:	e048      	b.n	80138ec <PayloadEncrypt+0x11c>
    {
        aBlock[15] = ctr & 0xFF;
 801385a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801385c:	b2db      	uxtb	r3, r3
 801385e:	77fb      	strb	r3, [r7, #31]
        ctr++;
 8013860:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8013862:	3301      	adds	r3, #1
 8013864:	86bb      	strh	r3, [r7, #52]	@ 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8013866:	f107 0320 	add.w	r3, r7, #32
 801386a:	7a7a      	ldrb	r2, [r7, #9]
 801386c:	f107 0010 	add.w	r0, r7, #16
 8013870:	2110      	movs	r1, #16
 8013872:	f7f8 fce6 	bl	800c242 <SecureElementAesEncrypt>
 8013876:	4603      	mov	r3, r0
 8013878:	2b00      	cmp	r3, #0
 801387a:	d001      	beq.n	8013880 <PayloadEncrypt+0xb0>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801387c:	230e      	movs	r3, #14
 801387e:	e03a      	b.n	80138f6 <PayloadEncrypt+0x126>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8013880:	2300      	movs	r3, #0
 8013882:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8013886:	e01e      	b.n	80138c6 <PayloadEncrypt+0xf6>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8013888:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 801388c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8013890:	4413      	add	r3, r2
 8013892:	461a      	mov	r2, r3
 8013894:	68fb      	ldr	r3, [r7, #12]
 8013896:	4413      	add	r3, r2
 8013898:	7819      	ldrb	r1, [r3, #0]
 801389a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801389e:	3338      	adds	r3, #56	@ 0x38
 80138a0:	443b      	add	r3, r7
 80138a2:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 80138a6:	f897 0037 	ldrb.w	r0, [r7, #55]	@ 0x37
 80138aa:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80138ae:	4403      	add	r3, r0
 80138b0:	4618      	mov	r0, r3
 80138b2:	68fb      	ldr	r3, [r7, #12]
 80138b4:	4403      	add	r3, r0
 80138b6:	404a      	eors	r2, r1
 80138b8:	b2d2      	uxtb	r2, r2
 80138ba:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 80138bc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80138c0:	3301      	adds	r3, #1
 80138c2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 80138c6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80138ca:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80138ce:	2a10      	cmp	r2, #16
 80138d0:	bfa8      	it	ge
 80138d2:	2210      	movge	r2, #16
 80138d4:	b212      	sxth	r2, r2
 80138d6:	4293      	cmp	r3, r2
 80138d8:	dbd6      	blt.n	8013888 <PayloadEncrypt+0xb8>
        }
        size -= 16;
 80138da:	897b      	ldrh	r3, [r7, #10]
 80138dc:	3b10      	subs	r3, #16
 80138de:	b29b      	uxth	r3, r3
 80138e0:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 80138e2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80138e6:	3310      	adds	r3, #16
 80138e8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    while( size > 0 )
 80138ec:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80138f0:	2b00      	cmp	r3, #0
 80138f2:	dcb2      	bgt.n	801385a <PayloadEncrypt+0x8a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80138f4:	2300      	movs	r3, #0
}
 80138f6:	4618      	mov	r0, r3
 80138f8:	3738      	adds	r7, #56	@ 0x38
 80138fa:	46bd      	mov	sp, r7
 80138fc:	bd80      	pop	{r7, pc}

080138fe <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 80138fe:	b490      	push	{r4, r7}
 8013900:	b082      	sub	sp, #8
 8013902:	af00      	add	r7, sp, #0
 8013904:	4604      	mov	r4, r0
 8013906:	4608      	mov	r0, r1
 8013908:	4611      	mov	r1, r2
 801390a:	461a      	mov	r2, r3
 801390c:	4623      	mov	r3, r4
 801390e:	80fb      	strh	r3, [r7, #6]
 8013910:	4603      	mov	r3, r0
 8013912:	717b      	strb	r3, [r7, #5]
 8013914:	460b      	mov	r3, r1
 8013916:	713b      	strb	r3, [r7, #4]
 8013918:	4613      	mov	r3, r2
 801391a:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 801391c:	69bb      	ldr	r3, [r7, #24]
 801391e:	2b00      	cmp	r3, #0
 8013920:	d101      	bne.n	8013926 <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013922:	2309      	movs	r3, #9
 8013924:	e04e      	b.n	80139c4 <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 8013926:	69bb      	ldr	r3, [r7, #24]
 8013928:	2249      	movs	r2, #73	@ 0x49
 801392a:	701a      	strb	r2, [r3, #0]
    }
    else
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    /* ST_WORAROUND_END */
    {
        b0[1] = 0x00;
 801392c:	69bb      	ldr	r3, [r7, #24]
 801392e:	3301      	adds	r3, #1
 8013930:	2200      	movs	r2, #0
 8013932:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 8013934:	69bb      	ldr	r3, [r7, #24]
 8013936:	3302      	adds	r3, #2
 8013938:	2200      	movs	r2, #0
 801393a:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 801393c:	69bb      	ldr	r3, [r7, #24]
 801393e:	3303      	adds	r3, #3
 8013940:	2200      	movs	r2, #0
 8013942:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 8013944:	69bb      	ldr	r3, [r7, #24]
 8013946:	3304      	adds	r3, #4
 8013948:	2200      	movs	r2, #0
 801394a:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 801394c:	69bb      	ldr	r3, [r7, #24]
 801394e:	3305      	adds	r3, #5
 8013950:	78fa      	ldrb	r2, [r7, #3]
 8013952:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 8013954:	69bb      	ldr	r3, [r7, #24]
 8013956:	3306      	adds	r3, #6
 8013958:	693a      	ldr	r2, [r7, #16]
 801395a:	b2d2      	uxtb	r2, r2
 801395c:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 801395e:	693b      	ldr	r3, [r7, #16]
 8013960:	0a1a      	lsrs	r2, r3, #8
 8013962:	69bb      	ldr	r3, [r7, #24]
 8013964:	3307      	adds	r3, #7
 8013966:	b2d2      	uxtb	r2, r2
 8013968:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 801396a:	693b      	ldr	r3, [r7, #16]
 801396c:	0c1a      	lsrs	r2, r3, #16
 801396e:	69bb      	ldr	r3, [r7, #24]
 8013970:	3308      	adds	r3, #8
 8013972:	b2d2      	uxtb	r2, r2
 8013974:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8013976:	693b      	ldr	r3, [r7, #16]
 8013978:	0e1a      	lsrs	r2, r3, #24
 801397a:	69bb      	ldr	r3, [r7, #24]
 801397c:	3309      	adds	r3, #9
 801397e:	b2d2      	uxtb	r2, r2
 8013980:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 8013982:	69bb      	ldr	r3, [r7, #24]
 8013984:	330a      	adds	r3, #10
 8013986:	697a      	ldr	r2, [r7, #20]
 8013988:	b2d2      	uxtb	r2, r2
 801398a:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 801398c:	697b      	ldr	r3, [r7, #20]
 801398e:	0a1a      	lsrs	r2, r3, #8
 8013990:	69bb      	ldr	r3, [r7, #24]
 8013992:	330b      	adds	r3, #11
 8013994:	b2d2      	uxtb	r2, r2
 8013996:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8013998:	697b      	ldr	r3, [r7, #20]
 801399a:	0c1a      	lsrs	r2, r3, #16
 801399c:	69bb      	ldr	r3, [r7, #24]
 801399e:	330c      	adds	r3, #12
 80139a0:	b2d2      	uxtb	r2, r2
 80139a2:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 80139a4:	697b      	ldr	r3, [r7, #20]
 80139a6:	0e1a      	lsrs	r2, r3, #24
 80139a8:	69bb      	ldr	r3, [r7, #24]
 80139aa:	330d      	adds	r3, #13
 80139ac:	b2d2      	uxtb	r2, r2
 80139ae:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 80139b0:	69bb      	ldr	r3, [r7, #24]
 80139b2:	330e      	adds	r3, #14
 80139b4:	2200      	movs	r2, #0
 80139b6:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 80139b8:	69bb      	ldr	r3, [r7, #24]
 80139ba:	330f      	adds	r3, #15
 80139bc:	88fa      	ldrh	r2, [r7, #6]
 80139be:	b2d2      	uxtb	r2, r2
 80139c0:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 80139c2:	2300      	movs	r3, #0
}
 80139c4:	4618      	mov	r0, r3
 80139c6:	3708      	adds	r7, #8
 80139c8:	46bd      	mov	sp, r7
 80139ca:	bc90      	pop	{r4, r7}
 80139cc:	4770      	bx	lr

080139ce <ComputeCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 80139ce:	b590      	push	{r4, r7, lr}
 80139d0:	b08b      	sub	sp, #44	@ 0x2c
 80139d2:	af04      	add	r7, sp, #16
 80139d4:	6078      	str	r0, [r7, #4]
 80139d6:	4608      	mov	r0, r1
 80139d8:	4611      	mov	r1, r2
 80139da:	461a      	mov	r2, r3
 80139dc:	4603      	mov	r3, r0
 80139de:	807b      	strh	r3, [r7, #2]
 80139e0:	460b      	mov	r3, r1
 80139e2:	707b      	strb	r3, [r7, #1]
 80139e4:	4613      	mov	r3, r2
 80139e6:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	2b00      	cmp	r3, #0
 80139ec:	d002      	beq.n	80139f4 <ComputeCmacB0+0x26>
 80139ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	d101      	bne.n	80139f8 <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80139f4:	2309      	movs	r3, #9
 80139f6:	e024      	b.n	8013a42 <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 80139f8:	887b      	ldrh	r3, [r7, #2]
 80139fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80139fe:	d901      	bls.n	8013a04 <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8013a00:	230d      	movs	r3, #13
 8013a02:	e01e      	b.n	8013a42 <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE];

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8013a04:	f897 4028 	ldrb.w	r4, [r7, #40]	@ 0x28
 8013a08:	783a      	ldrb	r2, [r7, #0]
 8013a0a:	7879      	ldrb	r1, [r7, #1]
 8013a0c:	8878      	ldrh	r0, [r7, #2]
 8013a0e:	f107 0308 	add.w	r3, r7, #8
 8013a12:	9302      	str	r3, [sp, #8]
 8013a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a16:	9301      	str	r3, [sp, #4]
 8013a18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013a1a:	9300      	str	r3, [sp, #0]
 8013a1c:	4623      	mov	r3, r4
 8013a1e:	f7ff ff6e 	bl	80138fe <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8013a22:	7879      	ldrb	r1, [r7, #1]
 8013a24:	887a      	ldrh	r2, [r7, #2]
 8013a26:	f107 0008 	add.w	r0, r7, #8
 8013a2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013a2c:	9300      	str	r3, [sp, #0]
 8013a2e:	460b      	mov	r3, r1
 8013a30:	6879      	ldr	r1, [r7, #4]
 8013a32:	f7f8 fbb9 	bl	800c1a8 <SecureElementComputeAesCmac>
 8013a36:	4603      	mov	r3, r0
 8013a38:	2b00      	cmp	r3, #0
 8013a3a:	d001      	beq.n	8013a40 <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013a3c:	230e      	movs	r3, #14
 8013a3e:	e000      	b.n	8013a42 <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8013a40:	2300      	movs	r3, #0
}
 8013a42:	4618      	mov	r0, r3
 8013a44:	371c      	adds	r7, #28
 8013a46:	46bd      	mov	sp, r7
 8013a48:	bd90      	pop	{r4, r7, pc}

08013a4a <VerifyCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in] expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 8013a4a:	b590      	push	{r4, r7, lr}
 8013a4c:	b0cd      	sub	sp, #308	@ 0x134
 8013a4e:	af04      	add	r7, sp, #16
 8013a50:	f507 7490 	add.w	r4, r7, #288	@ 0x120
 8013a54:	f5a4 748e 	sub.w	r4, r4, #284	@ 0x11c
 8013a58:	6020      	str	r0, [r4, #0]
 8013a5a:	460c      	mov	r4, r1
 8013a5c:	4610      	mov	r0, r2
 8013a5e:	4619      	mov	r1, r3
 8013a60:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013a64:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8013a68:	4622      	mov	r2, r4
 8013a6a:	801a      	strh	r2, [r3, #0]
 8013a6c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013a70:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 8013a74:	4602      	mov	r2, r0
 8013a76:	701a      	strb	r2, [r3, #0]
 8013a78:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013a7c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8013a80:	460a      	mov	r2, r1
 8013a82:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 8013a84:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013a88:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8013a8c:	681b      	ldr	r3, [r3, #0]
 8013a8e:	2b00      	cmp	r3, #0
 8013a90:	d101      	bne.n	8013a96 <VerifyCmacB0+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013a92:	2309      	movs	r3, #9
 8013a94:	e063      	b.n	8013b5e <VerifyCmacB0+0x114>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8013a96:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013a9a:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8013a9e:	881b      	ldrh	r3, [r3, #0]
 8013aa0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013aa4:	d901      	bls.n	8013aaa <VerifyCmacB0+0x60>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8013aa6:	230d      	movs	r3, #13
 8013aa8:	e059      	b.n	8013b5e <VerifyCmacB0+0x114>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8013aaa:	f107 030c 	add.w	r3, r7, #12
 8013aae:	f44f 7288 	mov.w	r2, #272	@ 0x110
 8013ab2:	2100      	movs	r1, #0
 8013ab4:	4618      	mov	r0, r3
 8013ab6:	f003 fb29 	bl	801710c <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8013aba:	f897 4130 	ldrb.w	r4, [r7, #304]	@ 0x130
 8013abe:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013ac2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8013ac6:	781a      	ldrb	r2, [r3, #0]
 8013ac8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013acc:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 8013ad0:	7819      	ldrb	r1, [r3, #0]
 8013ad2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013ad6:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8013ada:	8818      	ldrh	r0, [r3, #0]
 8013adc:	f107 030c 	add.w	r3, r7, #12
 8013ae0:	9302      	str	r3, [sp, #8]
 8013ae2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8013ae6:	9301      	str	r3, [sp, #4]
 8013ae8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8013aec:	9300      	str	r3, [sp, #0]
 8013aee:	4623      	mov	r3, r4
 8013af0:	f7ff ff05 	bl	80138fe <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8013af4:	f107 030c 	add.w	r3, r7, #12
 8013af8:	3310      	adds	r3, #16
 8013afa:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8013afe:	f5a2 728f 	sub.w	r2, r2, #286	@ 0x11e
 8013b02:	8812      	ldrh	r2, [r2, #0]
 8013b04:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 8013b08:	f5a1 718e 	sub.w	r1, r1, #284	@ 0x11c
 8013b0c:	6809      	ldr	r1, [r1, #0]
 8013b0e:	4618      	mov	r0, r3
 8013b10:	f003 fac1 	bl	8017096 <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8013b14:	2306      	movs	r3, #6
 8013b16:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 8013b1a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013b1e:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8013b22:	881b      	ldrh	r3, [r3, #0]
 8013b24:	3310      	adds	r3, #16
 8013b26:	b299      	uxth	r1, r3
 8013b28:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013b2c:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 8013b30:	781b      	ldrb	r3, [r3, #0]
 8013b32:	f107 000c 	add.w	r0, r7, #12
 8013b36:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 8013b3a:	f7f8 fb53 	bl	800c1e4 <SecureElementVerifyAesCmac>
 8013b3e:	4603      	mov	r3, r0
 8013b40:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 8013b44:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	d101      	bne.n	8013b50 <VerifyCmacB0+0x106>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 8013b4c:	2300      	movs	r3, #0
 8013b4e:	e006      	b.n	8013b5e <VerifyCmacB0+0x114>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 8013b50:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8013b54:	2b01      	cmp	r3, #1
 8013b56:	d101      	bne.n	8013b5c <VerifyCmacB0+0x112>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 8013b58:	2301      	movs	r3, #1
 8013b5a:	e000      	b.n	8013b5e <VerifyCmacB0+0x114>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013b5c:	230e      	movs	r3, #14
}
 8013b5e:	4618      	mov	r0, r3
 8013b60:	f507 7792 	add.w	r7, r7, #292	@ 0x124
 8013b64:	46bd      	mov	sp, r7
 8013b66:	bd90      	pop	{r4, r7, pc}

08013b68 <GetKeyAddrItem>:
 * \param [in] addrID         - Address identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 8013b68:	b480      	push	{r7}
 8013b6a:	b085      	sub	sp, #20
 8013b6c:	af00      	add	r7, sp, #0
 8013b6e:	4603      	mov	r3, r0
 8013b70:	6039      	str	r1, [r7, #0]
 8013b72:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8013b74:	2300      	movs	r3, #0
 8013b76:	73fb      	strb	r3, [r7, #15]
 8013b78:	e011      	b.n	8013b9e <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 8013b7a:	7bfb      	ldrb	r3, [r7, #15]
 8013b7c:	4a0c      	ldr	r2, [pc, #48]	@ (8013bb0 <GetKeyAddrItem+0x48>)
 8013b7e:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8013b82:	79fa      	ldrb	r2, [r7, #7]
 8013b84:	429a      	cmp	r2, r3
 8013b86:	d107      	bne.n	8013b98 <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 8013b88:	7bfb      	ldrb	r3, [r7, #15]
 8013b8a:	009b      	lsls	r3, r3, #2
 8013b8c:	4a08      	ldr	r2, [pc, #32]	@ (8013bb0 <GetKeyAddrItem+0x48>)
 8013b8e:	441a      	add	r2, r3
 8013b90:	683b      	ldr	r3, [r7, #0]
 8013b92:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 8013b94:	2300      	movs	r3, #0
 8013b96:	e006      	b.n	8013ba6 <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8013b98:	7bfb      	ldrb	r3, [r7, #15]
 8013b9a:	3301      	adds	r3, #1
 8013b9c:	73fb      	strb	r3, [r7, #15]
 8013b9e:	7bfb      	ldrb	r3, [r7, #15]
 8013ba0:	2b01      	cmp	r3, #1
 8013ba2:	d9ea      	bls.n	8013b7a <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 8013ba4:	230b      	movs	r3, #11
}
 8013ba6:	4618      	mov	r0, r3
 8013ba8:	3714      	adds	r7, #20
 8013baa:	46bd      	mov	sp, r7
 8013bac:	bc80      	pop	{r7}
 8013bae:	4770      	bx	lr
 8013bb0:	20000108 	.word	0x20000108

08013bb4 <DeriveSessionKey10x>:
 * \param [in] netID          - Network Identifier
 * \param [in] deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 8013bb4:	b580      	push	{r7, lr}
 8013bb6:	b088      	sub	sp, #32
 8013bb8:	af00      	add	r7, sp, #0
 8013bba:	60b9      	str	r1, [r7, #8]
 8013bbc:	607a      	str	r2, [r7, #4]
 8013bbe:	461a      	mov	r2, r3
 8013bc0:	4603      	mov	r3, r0
 8013bc2:	73fb      	strb	r3, [r7, #15]
 8013bc4:	4613      	mov	r3, r2
 8013bc6:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 8013bc8:	f107 0310 	add.w	r3, r7, #16
 8013bcc:	2200      	movs	r2, #0
 8013bce:	601a      	str	r2, [r3, #0]
 8013bd0:	605a      	str	r2, [r3, #4]
 8013bd2:	609a      	str	r2, [r3, #8]
 8013bd4:	60da      	str	r2, [r3, #12]

    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
    switch( keyID )
 8013bd6:	7bfb      	ldrb	r3, [r7, #15]
 8013bd8:	2b02      	cmp	r3, #2
 8013bda:	d002      	beq.n	8013be2 <DeriveSessionKey10x+0x2e>
 8013bdc:	2b03      	cmp	r3, #3
 8013bde:	d003      	beq.n	8013be8 <DeriveSessionKey10x+0x34>
 8013be0:	e005      	b.n	8013bee <DeriveSessionKey10x+0x3a>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case NWK_S_KEY:
#endif /* USE_LRWAN_1_1_X_CRYPTO */
            compBase[0] = 0x01;
 8013be2:	2301      	movs	r3, #1
 8013be4:	743b      	strb	r3, [r7, #16]
            break;
 8013be6:	e004      	b.n	8013bf2 <DeriveSessionKey10x+0x3e>
        case APP_S_KEY:
            compBase[0] = 0x02;
 8013be8:	2302      	movs	r3, #2
 8013bea:	743b      	strb	r3, [r7, #16]
            break;
 8013bec:	e001      	b.n	8013bf2 <DeriveSessionKey10x+0x3e>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8013bee:	230a      	movs	r3, #10
 8013bf0:	e02a      	b.n	8013c48 <DeriveSessionKey10x+0x94>
    }
   /* ST_WORKAROUND_END */

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 8013bf2:	68bb      	ldr	r3, [r7, #8]
 8013bf4:	b2db      	uxtb	r3, r3
 8013bf6:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 8013bf8:	68bb      	ldr	r3, [r7, #8]
 8013bfa:	0a1b      	lsrs	r3, r3, #8
 8013bfc:	b2db      	uxtb	r3, r3
 8013bfe:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 8013c00:	68bb      	ldr	r3, [r7, #8]
 8013c02:	0c1b      	lsrs	r3, r3, #16
 8013c04:	b2db      	uxtb	r3, r3
 8013c06:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 8013c08:	687b      	ldr	r3, [r7, #4]
 8013c0a:	b2db      	uxtb	r3, r3
 8013c0c:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 8013c0e:	687b      	ldr	r3, [r7, #4]
 8013c10:	0a1b      	lsrs	r3, r3, #8
 8013c12:	b2db      	uxtb	r3, r3
 8013c14:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	0c1b      	lsrs	r3, r3, #16
 8013c1a:	b2db      	uxtb	r3, r3
 8013c1c:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 8013c1e:	89bb      	ldrh	r3, [r7, #12]
 8013c20:	b2db      	uxtb	r3, r3
 8013c22:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 8013c24:	89bb      	ldrh	r3, [r7, #12]
 8013c26:	0a1b      	lsrs	r3, r3, #8
 8013c28:	b29b      	uxth	r3, r3
 8013c2a:	b2db      	uxtb	r3, r3
 8013c2c:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8013c2e:	7bfa      	ldrb	r2, [r7, #15]
 8013c30:	f107 0310 	add.w	r3, r7, #16
 8013c34:	2101      	movs	r1, #1
 8013c36:	4618      	mov	r0, r3
 8013c38:	f7f8 fb6a 	bl	800c310 <SecureElementDeriveAndStoreKey>
 8013c3c:	4603      	mov	r3, r0
 8013c3e:	2b00      	cmp	r3, #0
 8013c40:	d001      	beq.n	8013c46 <DeriveSessionKey10x+0x92>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013c42:	230e      	movs	r3, #14
 8013c44:	e000      	b.n	8013c48 <DeriveSessionKey10x+0x94>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013c46:	2300      	movs	r3, #0
}
 8013c48:	4618      	mov	r0, r3
 8013c4a:	3720      	adds	r7, #32
 8013c4c:	46bd      	mov	sp, r7
 8013c4e:	bd80      	pop	{r7, pc}

08013c50 <GetLastFcntDown>:
 * \param [in]    lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 8013c50:	b480      	push	{r7}
 8013c52:	b083      	sub	sp, #12
 8013c54:	af00      	add	r7, sp, #0
 8013c56:	4603      	mov	r3, r0
 8013c58:	6039      	str	r1, [r7, #0]
 8013c5a:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 8013c5c:	683b      	ldr	r3, [r7, #0]
 8013c5e:	2b00      	cmp	r3, #0
 8013c60:	d101      	bne.n	8013c66 <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013c62:	2309      	movs	r3, #9
 8013c64:	e03b      	b.n	8013cde <GetLastFcntDown+0x8e>
    }
    switch( fCntID )
 8013c66:	79fb      	ldrb	r3, [r7, #7]
 8013c68:	3b01      	subs	r3, #1
 8013c6a:	2b03      	cmp	r3, #3
 8013c6c:	d834      	bhi.n	8013cd8 <GetLastFcntDown+0x88>
 8013c6e:	a201      	add	r2, pc, #4	@ (adr r2, 8013c74 <GetLastFcntDown+0x24>)
 8013c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013c74:	08013c85 	.word	0x08013c85
 8013c78:	08013c9d 	.word	0x08013c9d
 8013c7c:	08013cb5 	.word	0x08013cb5
 8013c80:	08013ccd 	.word	0x08013ccd
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 8013c84:	4b18      	ldr	r3, [pc, #96]	@ (8013ce8 <GetLastFcntDown+0x98>)
 8013c86:	681b      	ldr	r3, [r3, #0]
 8013c88:	691a      	ldr	r2, [r3, #16]
 8013c8a:	683b      	ldr	r3, [r7, #0]
 8013c8c:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.NFCntDown;
 8013c8e:	4b16      	ldr	r3, [pc, #88]	@ (8013ce8 <GetLastFcntDown+0x98>)
 8013c90:	681a      	ldr	r2, [r3, #0]
 8013c92:	4b15      	ldr	r3, [pc, #84]	@ (8013ce8 <GetLastFcntDown+0x98>)
 8013c94:	681b      	ldr	r3, [r3, #0]
 8013c96:	6912      	ldr	r2, [r2, #16]
 8013c98:	621a      	str	r2, [r3, #32]
            break;
 8013c9a:	e01f      	b.n	8013cdc <GetLastFcntDown+0x8c>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 8013c9c:	4b12      	ldr	r3, [pc, #72]	@ (8013ce8 <GetLastFcntDown+0x98>)
 8013c9e:	681b      	ldr	r3, [r3, #0]
 8013ca0:	695a      	ldr	r2, [r3, #20]
 8013ca2:	683b      	ldr	r3, [r7, #0]
 8013ca4:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.AFCntDown;
 8013ca6:	4b10      	ldr	r3, [pc, #64]	@ (8013ce8 <GetLastFcntDown+0x98>)
 8013ca8:	681a      	ldr	r2, [r3, #0]
 8013caa:	4b0f      	ldr	r3, [pc, #60]	@ (8013ce8 <GetLastFcntDown+0x98>)
 8013cac:	681b      	ldr	r3, [r3, #0]
 8013cae:	6952      	ldr	r2, [r2, #20]
 8013cb0:	621a      	str	r2, [r3, #32]
            break;
 8013cb2:	e013      	b.n	8013cdc <GetLastFcntDown+0x8c>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 8013cb4:	4b0c      	ldr	r3, [pc, #48]	@ (8013ce8 <GetLastFcntDown+0x98>)
 8013cb6:	681b      	ldr	r3, [r3, #0]
 8013cb8:	699a      	ldr	r2, [r3, #24]
 8013cba:	683b      	ldr	r3, [r7, #0]
 8013cbc:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8013cbe:	4b0a      	ldr	r3, [pc, #40]	@ (8013ce8 <GetLastFcntDown+0x98>)
 8013cc0:	681a      	ldr	r2, [r3, #0]
 8013cc2:	4b09      	ldr	r3, [pc, #36]	@ (8013ce8 <GetLastFcntDown+0x98>)
 8013cc4:	681b      	ldr	r3, [r3, #0]
 8013cc6:	6992      	ldr	r2, [r2, #24]
 8013cc8:	621a      	str	r2, [r3, #32]
            break;
 8013cca:	e007      	b.n	8013cdc <GetLastFcntDown+0x8c>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 8013ccc:	4b06      	ldr	r3, [pc, #24]	@ (8013ce8 <GetLastFcntDown+0x98>)
 8013cce:	681b      	ldr	r3, [r3, #0]
 8013cd0:	69da      	ldr	r2, [r3, #28]
 8013cd2:	683b      	ldr	r3, [r7, #0]
 8013cd4:	601a      	str	r2, [r3, #0]
            break;
 8013cd6:	e001      	b.n	8013cdc <GetLastFcntDown+0x8c>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8013cd8:	2305      	movs	r3, #5
 8013cda:	e000      	b.n	8013cde <GetLastFcntDown+0x8e>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8013cdc:	2300      	movs	r3, #0
}
 8013cde:	4618      	mov	r0, r3
 8013ce0:	370c      	adds	r7, #12
 8013ce2:	46bd      	mov	sp, r7
 8013ce4:	bc80      	pop	{r7}
 8013ce6:	4770      	bx	lr
 8013ce8:	20001bc8 	.word	0x20001bc8

08013cec <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8013cec:	b580      	push	{r7, lr}
 8013cee:	b084      	sub	sp, #16
 8013cf0:	af00      	add	r7, sp, #0
 8013cf2:	4603      	mov	r3, r0
 8013cf4:	6039      	str	r1, [r7, #0]
 8013cf6:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 8013cf8:	2300      	movs	r3, #0
 8013cfa:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 8013cfc:	f107 020c 	add.w	r2, r7, #12
 8013d00:	79fb      	ldrb	r3, [r7, #7]
 8013d02:	4611      	mov	r1, r2
 8013d04:	4618      	mov	r0, r3
 8013d06:	f7ff ffa3 	bl	8013c50 <GetLastFcntDown>
 8013d0a:	4603      	mov	r3, r0
 8013d0c:	2b00      	cmp	r3, #0
 8013d0e:	d001      	beq.n	8013d14 <CheckFCntDown+0x28>
    {
        return false;
 8013d10:	2300      	movs	r3, #0
 8013d12:	e00a      	b.n	8013d2a <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 8013d14:	68fb      	ldr	r3, [r7, #12]
 8013d16:	683a      	ldr	r2, [r7, #0]
 8013d18:	429a      	cmp	r2, r3
 8013d1a:	d803      	bhi.n	8013d24 <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITAL_VALUE ) )
 8013d1c:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 8013d1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d22:	d101      	bne.n	8013d28 <CheckFCntDown+0x3c>
    {
        return true;
 8013d24:	2301      	movs	r3, #1
 8013d26:	e000      	b.n	8013d2a <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 8013d28:	2300      	movs	r3, #0
    }
}
 8013d2a:	4618      	mov	r0, r3
 8013d2c:	3710      	adds	r7, #16
 8013d2e:	46bd      	mov	sp, r7
 8013d30:	bd80      	pop	{r7, pc}
	...

08013d34 <UpdateFCntDown>:
 * \param [in]    currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8013d34:	b480      	push	{r7}
 8013d36:	b083      	sub	sp, #12
 8013d38:	af00      	add	r7, sp, #0
 8013d3a:	4603      	mov	r3, r0
 8013d3c:	6039      	str	r1, [r7, #0]
 8013d3e:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 8013d40:	79fb      	ldrb	r3, [r7, #7]
 8013d42:	3b01      	subs	r3, #1
 8013d44:	2b03      	cmp	r3, #3
 8013d46:	d81f      	bhi.n	8013d88 <UpdateFCntDown+0x54>
 8013d48:	a201      	add	r2, pc, #4	@ (adr r2, 8013d50 <UpdateFCntDown+0x1c>)
 8013d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013d4e:	bf00      	nop
 8013d50:	08013d61 	.word	0x08013d61
 8013d54:	08013d6b 	.word	0x08013d6b
 8013d58:	08013d75 	.word	0x08013d75
 8013d5c:	08013d7f 	.word	0x08013d7f
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 8013d60:	4b0c      	ldr	r3, [pc, #48]	@ (8013d94 <UpdateFCntDown+0x60>)
 8013d62:	681b      	ldr	r3, [r3, #0]
 8013d64:	683a      	ldr	r2, [r7, #0]
 8013d66:	611a      	str	r2, [r3, #16]
            break;
 8013d68:	e00f      	b.n	8013d8a <UpdateFCntDown+0x56>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 8013d6a:	4b0a      	ldr	r3, [pc, #40]	@ (8013d94 <UpdateFCntDown+0x60>)
 8013d6c:	681b      	ldr	r3, [r3, #0]
 8013d6e:	683a      	ldr	r2, [r7, #0]
 8013d70:	615a      	str	r2, [r3, #20]
            break;
 8013d72:	e00a      	b.n	8013d8a <UpdateFCntDown+0x56>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 8013d74:	4b07      	ldr	r3, [pc, #28]	@ (8013d94 <UpdateFCntDown+0x60>)
 8013d76:	681b      	ldr	r3, [r3, #0]
 8013d78:	683a      	ldr	r2, [r7, #0]
 8013d7a:	619a      	str	r2, [r3, #24]
            break;
 8013d7c:	e005      	b.n	8013d8a <UpdateFCntDown+0x56>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 8013d7e:	4b05      	ldr	r3, [pc, #20]	@ (8013d94 <UpdateFCntDown+0x60>)
 8013d80:	681b      	ldr	r3, [r3, #0]
 8013d82:	683a      	ldr	r2, [r7, #0]
 8013d84:	61da      	str	r2, [r3, #28]
            break;
 8013d86:	e000      	b.n	8013d8a <UpdateFCntDown+0x56>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 8013d88:	bf00      	nop
    }
}
 8013d8a:	bf00      	nop
 8013d8c:	370c      	adds	r7, #12
 8013d8e:	46bd      	mov	sp, r7
 8013d90:	bc80      	pop	{r7}
 8013d92:	4770      	bx	lr
 8013d94:	20001bc8 	.word	0x20001bc8

08013d98 <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 8013d98:	b480      	push	{r7}
 8013d9a:	b083      	sub	sp, #12
 8013d9c:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 8013d9e:	4b18      	ldr	r3, [pc, #96]	@ (8013e00 <ResetFCnts+0x68>)
 8013da0:	681b      	ldr	r3, [r3, #0]
 8013da2:	2200      	movs	r2, #0
 8013da4:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8013da6:	4b16      	ldr	r3, [pc, #88]	@ (8013e00 <ResetFCnts+0x68>)
 8013da8:	681b      	ldr	r3, [r3, #0]
 8013daa:	f04f 32ff 	mov.w	r2, #4294967295
 8013dae:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8013db0:	4b13      	ldr	r3, [pc, #76]	@ (8013e00 <ResetFCnts+0x68>)
 8013db2:	681b      	ldr	r3, [r3, #0]
 8013db4:	f04f 32ff 	mov.w	r2, #4294967295
 8013db8:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 8013dba:	4b11      	ldr	r3, [pc, #68]	@ (8013e00 <ResetFCnts+0x68>)
 8013dbc:	681b      	ldr	r3, [r3, #0]
 8013dbe:	f04f 32ff 	mov.w	r2, #4294967295
 8013dc2:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8013dc4:	4b0e      	ldr	r3, [pc, #56]	@ (8013e00 <ResetFCnts+0x68>)
 8013dc6:	681a      	ldr	r2, [r3, #0]
 8013dc8:	4b0d      	ldr	r3, [pc, #52]	@ (8013e00 <ResetFCnts+0x68>)
 8013dca:	681b      	ldr	r3, [r3, #0]
 8013dcc:	6992      	ldr	r2, [r2, #24]
 8013dce:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8013dd0:	2300      	movs	r3, #0
 8013dd2:	607b      	str	r3, [r7, #4]
 8013dd4:	e00b      	b.n	8013dee <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
 8013dd6:	4b0a      	ldr	r3, [pc, #40]	@ (8013e00 <ResetFCnts+0x68>)
 8013dd8:	681a      	ldr	r2, [r3, #0]
 8013dda:	687b      	ldr	r3, [r7, #4]
 8013ddc:	3306      	adds	r3, #6
 8013dde:	009b      	lsls	r3, r3, #2
 8013de0:	4413      	add	r3, r2
 8013de2:	f04f 32ff 	mov.w	r2, #4294967295
 8013de6:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8013de8:	687b      	ldr	r3, [r7, #4]
 8013dea:	3301      	adds	r3, #1
 8013dec:	607b      	str	r3, [r7, #4]
 8013dee:	687b      	ldr	r3, [r7, #4]
 8013df0:	2b00      	cmp	r3, #0
 8013df2:	ddf0      	ble.n	8013dd6 <ResetFCnts+0x3e>
    }
}
 8013df4:	bf00      	nop
 8013df6:	bf00      	nop
 8013df8:	370c      	adds	r7, #12
 8013dfa:	46bd      	mov	sp, r7
 8013dfc:	bc80      	pop	{r7}
 8013dfe:	4770      	bx	lr
 8013e00:	20001bc8 	.word	0x20001bc8

08013e04 <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 8013e04:	b580      	push	{r7, lr}
 8013e06:	b082      	sub	sp, #8
 8013e08:	af00      	add	r7, sp, #0
 8013e0a:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 8013e0c:	687b      	ldr	r3, [r7, #4]
 8013e0e:	2b00      	cmp	r3, #0
 8013e10:	d101      	bne.n	8013e16 <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 8013e12:	2308      	movs	r3, #8
 8013e14:	e01c      	b.n	8013e50 <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 8013e16:	4a10      	ldr	r2, [pc, #64]	@ (8013e58 <LoRaMacCryptoInit+0x54>)
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 8013e1c:	4b0e      	ldr	r3, [pc, #56]	@ (8013e58 <LoRaMacCryptoInit+0x54>)
 8013e1e:	681b      	ldr	r3, [r3, #0]
 8013e20:	2228      	movs	r2, #40	@ 0x28
 8013e22:	2100      	movs	r1, #0
 8013e24:	4618      	mov	r0, r3
 8013e26:	f003 f971 	bl	801710c <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 8013e2a:	4b0b      	ldr	r3, [pc, #44]	@ (8013e58 <LoRaMacCryptoInit+0x54>)
 8013e2c:	681b      	ldr	r3, [r3, #0]
 8013e2e:	2201      	movs	r2, #1
 8013e30:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 8013e32:	4b09      	ldr	r3, [pc, #36]	@ (8013e58 <LoRaMacCryptoInit+0x54>)
 8013e34:	681b      	ldr	r3, [r3, #0]
 8013e36:	2201      	movs	r2, #1
 8013e38:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 8013e3a:	4b07      	ldr	r3, [pc, #28]	@ (8013e58 <LoRaMacCryptoInit+0x54>)
 8013e3c:	681b      	ldr	r3, [r3, #0]
 8013e3e:	2201      	movs	r2, #1
 8013e40:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 8013e42:	4b05      	ldr	r3, [pc, #20]	@ (8013e58 <LoRaMacCryptoInit+0x54>)
 8013e44:	681b      	ldr	r3, [r3, #0]
 8013e46:	2200      	movs	r2, #0
 8013e48:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 8013e4a:	f7ff ffa5 	bl	8013d98 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 8013e4e:	2300      	movs	r3, #0
}
 8013e50:	4618      	mov	r0, r3
 8013e52:	3708      	adds	r7, #8
 8013e54:	46bd      	mov	sp, r7
 8013e56:	bd80      	pop	{r7, pc}
 8013e58:	20001bc8 	.word	0x20001bc8

08013e5c <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 8013e5c:	b480      	push	{r7}
 8013e5e:	b083      	sub	sp, #12
 8013e60:	af00      	add	r7, sp, #0
 8013e62:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 8013e64:	4b04      	ldr	r3, [pc, #16]	@ (8013e78 <LoRaMacCryptoSetLrWanVersion+0x1c>)
 8013e66:	681b      	ldr	r3, [r3, #0]
 8013e68:	687a      	ldr	r2, [r7, #4]
 8013e6a:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8013e6c:	2300      	movs	r3, #0
}
 8013e6e:	4618      	mov	r0, r3
 8013e70:	370c      	adds	r7, #12
 8013e72:	46bd      	mov	sp, r7
 8013e74:	bc80      	pop	{r7}
 8013e76:	4770      	bx	lr
 8013e78:	20001bc8 	.word	0x20001bc8

08013e7c <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 8013e7c:	b480      	push	{r7}
 8013e7e:	b083      	sub	sp, #12
 8013e80:	af00      	add	r7, sp, #0
 8013e82:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	d101      	bne.n	8013e8e <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013e8a:	2309      	movs	r3, #9
 8013e8c:	e006      	b.n	8013e9c <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 8013e8e:	4b06      	ldr	r3, [pc, #24]	@ (8013ea8 <LoRaMacCryptoGetFCntUp+0x2c>)
 8013e90:	681b      	ldr	r3, [r3, #0]
 8013e92:	68db      	ldr	r3, [r3, #12]
 8013e94:	1c5a      	adds	r2, r3, #1
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8013e9a:	2300      	movs	r3, #0
}
 8013e9c:	4618      	mov	r0, r3
 8013e9e:	370c      	adds	r7, #12
 8013ea0:	46bd      	mov	sp, r7
 8013ea2:	bc80      	pop	{r7}
 8013ea4:	4770      	bx	lr
 8013ea6:	bf00      	nop
 8013ea8:	20001bc8 	.word	0x20001bc8

08013eac <LoRaMacCryptoGetFCntDown>:

    return LORAMAC_CRYPTO_SUCCESS;
}
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint32_t frameFcnt, uint32_t* currentDown )
{
 8013eac:	b580      	push	{r7, lr}
 8013eae:	b088      	sub	sp, #32
 8013eb0:	af00      	add	r7, sp, #0
 8013eb2:	4603      	mov	r3, r0
 8013eb4:	60b9      	str	r1, [r7, #8]
 8013eb6:	607a      	str	r2, [r7, #4]
 8013eb8:	73fb      	strb	r3, [r7, #15]
    uint32_t lastDown = 0;
 8013eba:	2300      	movs	r3, #0
 8013ebc:	617b      	str	r3, [r7, #20]
    int32_t fCntDiff = 0;
 8013ebe:	2300      	movs	r3, #0
 8013ec0:	61fb      	str	r3, [r7, #28]
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 8013ec2:	2312      	movs	r3, #18
 8013ec4:	76fb      	strb	r3, [r7, #27]

    if( currentDown == NULL )
 8013ec6:	687b      	ldr	r3, [r7, #4]
 8013ec8:	2b00      	cmp	r3, #0
 8013eca:	d101      	bne.n	8013ed0 <LoRaMacCryptoGetFCntDown+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013ecc:	2309      	movs	r3, #9
 8013ece:	e035      	b.n	8013f3c <LoRaMacCryptoGetFCntDown+0x90>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 8013ed0:	f107 0214 	add.w	r2, r7, #20
 8013ed4:	7bfb      	ldrb	r3, [r7, #15]
 8013ed6:	4611      	mov	r1, r2
 8013ed8:	4618      	mov	r0, r3
 8013eda:	f7ff feb9 	bl	8013c50 <GetLastFcntDown>
 8013ede:	4603      	mov	r3, r0
 8013ee0:	76fb      	strb	r3, [r7, #27]
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8013ee2:	7efb      	ldrb	r3, [r7, #27]
 8013ee4:	2b00      	cmp	r3, #0
 8013ee6:	d001      	beq.n	8013eec <LoRaMacCryptoGetFCntDown+0x40>
    {
        return cryptoStatus;
 8013ee8:	7efb      	ldrb	r3, [r7, #27]
 8013eea:	e027      	b.n	8013f3c <LoRaMacCryptoGetFCntDown+0x90>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 8013eec:	697b      	ldr	r3, [r7, #20]
 8013eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013ef2:	d103      	bne.n	8013efc <LoRaMacCryptoGetFCntDown+0x50>
    {
        *currentDown = frameFcnt;
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	68ba      	ldr	r2, [r7, #8]
 8013ef8:	601a      	str	r2, [r3, #0]
 8013efa:	e01e      	b.n	8013f3a <LoRaMacCryptoGetFCntDown+0x8e>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 8013efc:	697b      	ldr	r3, [r7, #20]
 8013efe:	b29b      	uxth	r3, r3
 8013f00:	68ba      	ldr	r2, [r7, #8]
 8013f02:	1ad3      	subs	r3, r2, r3
 8013f04:	61fb      	str	r3, [r7, #28]

        if( fCntDiff > 0 )
 8013f06:	69fb      	ldr	r3, [r7, #28]
 8013f08:	2b00      	cmp	r3, #0
 8013f0a:	dd05      	ble.n	8013f18 <LoRaMacCryptoGetFCntDown+0x6c>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 8013f0c:	697a      	ldr	r2, [r7, #20]
 8013f0e:	69fb      	ldr	r3, [r7, #28]
 8013f10:	441a      	add	r2, r3
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	601a      	str	r2, [r3, #0]
 8013f16:	e010      	b.n	8013f3a <LoRaMacCryptoGetFCntDown+0x8e>
        }
        else if( fCntDiff == 0 )
 8013f18:	69fb      	ldr	r3, [r7, #28]
 8013f1a:	2b00      	cmp	r3, #0
 8013f1c:	d104      	bne.n	8013f28 <LoRaMacCryptoGetFCntDown+0x7c>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 8013f1e:	697a      	ldr	r2, [r7, #20]
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 8013f24:	2307      	movs	r3, #7
 8013f26:	e009      	b.n	8013f3c <LoRaMacCryptoGetFCntDown+0x90>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 8013f28:	697b      	ldr	r3, [r7, #20]
 8013f2a:	0c1b      	lsrs	r3, r3, #16
 8013f2c:	041b      	lsls	r3, r3, #16
 8013f2e:	68ba      	ldr	r2, [r7, #8]
 8013f30:	4413      	add	r3, r2
 8013f32:	f503 3280 	add.w	r2, r3, #65536	@ 0x10000
 8013f36:	687b      	ldr	r3, [r7, #4]
 8013f38:	601a      	str	r2, [r3, #0]
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013f3a:	2300      	movs	r3, #0
}
 8013f3c:	4618      	mov	r0, r3
 8013f3e:	3720      	adds	r7, #32
 8013f40:	46bd      	mov	sp, r7
 8013f42:	bd80      	pop	{r7, pc}

08013f44 <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 8013f44:	b480      	push	{r7}
 8013f46:	b085      	sub	sp, #20
 8013f48:	af00      	add	r7, sp, #0
 8013f4a:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 8013f4c:	687b      	ldr	r3, [r7, #4]
 8013f4e:	2b00      	cmp	r3, #0
 8013f50:	d101      	bne.n	8013f56 <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013f52:	2309      	movs	r3, #9
 8013f54:	e017      	b.n	8013f86 <LoRaMacCryptoSetMulticastReference+0x42>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8013f56:	2300      	movs	r3, #0
 8013f58:	60fb      	str	r3, [r7, #12]
 8013f5a:	e010      	b.n	8013f7e <LoRaMacCryptoSetMulticastReference+0x3a>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 8013f5c:	4b0c      	ldr	r3, [pc, #48]	@ (8013f90 <LoRaMacCryptoSetMulticastReference+0x4c>)
 8013f5e:	6819      	ldr	r1, [r3, #0]
 8013f60:	68fb      	ldr	r3, [r7, #12]
 8013f62:	222c      	movs	r2, #44	@ 0x2c
 8013f64:	fb02 f303 	mul.w	r3, r2, r3
 8013f68:	687a      	ldr	r2, [r7, #4]
 8013f6a:	4413      	add	r3, r2
 8013f6c:	68fa      	ldr	r2, [r7, #12]
 8013f6e:	3206      	adds	r2, #6
 8013f70:	0092      	lsls	r2, r2, #2
 8013f72:	440a      	add	r2, r1
 8013f74:	3204      	adds	r2, #4
 8013f76:	621a      	str	r2, [r3, #32]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8013f78:	68fb      	ldr	r3, [r7, #12]
 8013f7a:	3301      	adds	r3, #1
 8013f7c:	60fb      	str	r3, [r7, #12]
 8013f7e:	68fb      	ldr	r3, [r7, #12]
 8013f80:	2b00      	cmp	r3, #0
 8013f82:	ddeb      	ble.n	8013f5c <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013f84:	2300      	movs	r3, #0
}
 8013f86:	4618      	mov	r0, r3
 8013f88:	3714      	adds	r7, #20
 8013f8a:	46bd      	mov	sp, r7
 8013f8c:	bc80      	pop	{r7}
 8013f8e:	4770      	bx	lr
 8013f90:	20001bc8 	.word	0x20001bc8

08013f94 <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 8013f94:	b580      	push	{r7, lr}
 8013f96:	b082      	sub	sp, #8
 8013f98:	af00      	add	r7, sp, #0
 8013f9a:	4603      	mov	r3, r0
 8013f9c:	6039      	str	r1, [r7, #0]
 8013f9e:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 8013fa0:	79fb      	ldrb	r3, [r7, #7]
 8013fa2:	6839      	ldr	r1, [r7, #0]
 8013fa4:	4618      	mov	r0, r3
 8013fa6:	f7f8 f8a1 	bl	800c0ec <SecureElementSetKey>
 8013faa:	4603      	mov	r3, r0
 8013fac:	2b00      	cmp	r3, #0
 8013fae:	d001      	beq.n	8013fb4 <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013fb0:	230e      	movs	r3, #14
 8013fb2:	e018      	b.n	8013fe6 <LoRaMacCryptoSetKey+0x52>
    }
    if( keyID == APP_KEY )
 8013fb4:	79fb      	ldrb	r3, [r7, #7]
 8013fb6:	2b00      	cmp	r3, #0
 8013fb8:	d114      	bne.n	8013fe4 <LoRaMacCryptoSetKey+0x50>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveMcRootKey( CryptoNvm->LrWanVersion.Fields.Minor, keyID ) != LORAMAC_CRYPTO_SUCCESS )
 8013fba:	4b0d      	ldr	r3, [pc, #52]	@ (8013ff0 <LoRaMacCryptoSetKey+0x5c>)
 8013fbc:	681b      	ldr	r3, [r3, #0]
 8013fbe:	789b      	ldrb	r3, [r3, #2]
 8013fc0:	79fa      	ldrb	r2, [r7, #7]
 8013fc2:	4611      	mov	r1, r2
 8013fc4:	4618      	mov	r0, r3
 8013fc6:	f000 fa35 	bl	8014434 <LoRaMacCryptoDeriveMcRootKey>
 8013fca:	4603      	mov	r3, r0
 8013fcc:	2b00      	cmp	r3, #0
 8013fce:	d001      	beq.n	8013fd4 <LoRaMacCryptoSetKey+0x40>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013fd0:	230e      	movs	r3, #14
 8013fd2:	e008      	b.n	8013fe6 <LoRaMacCryptoSetKey+0x52>
        }
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8013fd4:	2004      	movs	r0, #4
 8013fd6:	f000 fa57 	bl	8014488 <LoRaMacCryptoDeriveMcKEKey>
 8013fda:	4603      	mov	r3, r0
 8013fdc:	2b00      	cmp	r3, #0
 8013fde:	d001      	beq.n	8013fe4 <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013fe0:	230e      	movs	r3, #14
 8013fe2:	e000      	b.n	8013fe6 <LoRaMacCryptoSetKey+0x52>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8013fe4:	2300      	movs	r3, #0
}
 8013fe6:	4618      	mov	r0, r3
 8013fe8:	3708      	adds	r7, #8
 8013fea:	46bd      	mov	sp, r7
 8013fec:	bd80      	pop	{r7, pc}
 8013fee:	bf00      	nop
 8013ff0:	20001bc8 	.word	0x20001bc8

08013ff4 <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8013ff4:	b580      	push	{r7, lr}
 8013ff6:	b086      	sub	sp, #24
 8013ff8:	af02      	add	r7, sp, #8
 8013ffa:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 8013ffc:	687b      	ldr	r3, [r7, #4]
 8013ffe:	2b00      	cmp	r3, #0
 8014000:	d101      	bne.n	8014006 <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014002:	2309      	movs	r3, #9
 8014004:	e02d      	b.n	8014062 <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 8014006:	2301      	movs	r3, #1
 8014008:	73fb      	strb	r3, [r7, #15]
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
    SecureElementRandomNumber( &devNonce );
    CryptoNvm->DevNonce = devNonce;
#else
    CryptoNvm->DevNonce++;
 801400a:	4b18      	ldr	r3, [pc, #96]	@ (801406c <LoRaMacCryptoPrepareJoinRequest+0x78>)
 801400c:	681b      	ldr	r3, [r3, #0]
 801400e:	889a      	ldrh	r2, [r3, #4]
 8014010:	3201      	adds	r2, #1
 8014012:	b292      	uxth	r2, r2
 8014014:	809a      	strh	r2, [r3, #4]
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 8014016:	4b15      	ldr	r3, [pc, #84]	@ (801406c <LoRaMacCryptoPrepareJoinRequest+0x78>)
 8014018:	681b      	ldr	r3, [r3, #0]
 801401a:	889a      	ldrh	r2, [r3, #4]
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8014020:	6878      	ldr	r0, [r7, #4]
 8014022:	f000 fc10 	bl	8014846 <LoRaMacSerializerJoinRequest>
 8014026:	4603      	mov	r3, r0
 8014028:	2b00      	cmp	r3, #0
 801402a:	d001      	beq.n	8014030 <LoRaMacCryptoPrepareJoinRequest+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 801402c:	2310      	movs	r3, #16
 801402e:	e018      	b.n	8014062 <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 8014030:	687b      	ldr	r3, [r7, #4]
 8014032:	6819      	ldr	r1, [r3, #0]
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	3318      	adds	r3, #24
 8014038:	7bfa      	ldrb	r2, [r7, #15]
 801403a:	9300      	str	r3, [sp, #0]
 801403c:	4613      	mov	r3, r2
 801403e:	2213      	movs	r2, #19
 8014040:	2000      	movs	r0, #0
 8014042:	f7f8 f8b1 	bl	800c1a8 <SecureElementComputeAesCmac>
 8014046:	4603      	mov	r3, r0
 8014048:	2b00      	cmp	r3, #0
 801404a:	d001      	beq.n	8014050 <LoRaMacCryptoPrepareJoinRequest+0x5c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801404c:	230e      	movs	r3, #14
 801404e:	e008      	b.n	8014062 <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8014050:	6878      	ldr	r0, [r7, #4]
 8014052:	f000 fbf8 	bl	8014846 <LoRaMacSerializerJoinRequest>
 8014056:	4603      	mov	r3, r0
 8014058:	2b00      	cmp	r3, #0
 801405a:	d001      	beq.n	8014060 <LoRaMacCryptoPrepareJoinRequest+0x6c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 801405c:	2310      	movs	r3, #16
 801405e:	e000      	b.n	8014062 <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8014060:	2300      	movs	r3, #0
}
 8014062:	4618      	mov	r0, r3
 8014064:	3710      	adds	r7, #16
 8014066:	46bd      	mov	sp, r7
 8014068:	bd80      	pop	{r7, pc}
 801406a:	bf00      	nop
 801406c:	20001bc8 	.word	0x20001bc8

08014070 <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 8014070:	b590      	push	{r4, r7, lr}
 8014072:	b097      	sub	sp, #92	@ 0x5c
 8014074:	af04      	add	r7, sp, #16
 8014076:	4603      	mov	r3, r0
 8014078:	60b9      	str	r1, [r7, #8]
 801407a:	607a      	str	r2, [r7, #4]
 801407c:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 801407e:	687b      	ldr	r3, [r7, #4]
 8014080:	2b00      	cmp	r3, #0
 8014082:	d002      	beq.n	801408a <LoRaMacCryptoHandleJoinAccept+0x1a>
 8014084:	68bb      	ldr	r3, [r7, #8]
 8014086:	2b00      	cmp	r3, #0
 8014088:	d101      	bne.n	801408e <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801408a:	2309      	movs	r3, #9
 801408c:	e0bb      	b.n	8014206 <LoRaMacCryptoHandleJoinAccept+0x196>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 801408e:	2312      	movs	r3, #18
 8014090:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 8014094:	f107 0318 	add.w	r3, r7, #24
 8014098:	2221      	movs	r2, #33	@ 0x21
 801409a:	2100      	movs	r1, #0
 801409c:	4618      	mov	r0, r3
 801409e:	f008 fb24 	bl	801c6ea <memset>
    uint8_t versionMinor         = 0;
 80140a2:	2300      	movs	r3, #0
 80140a4:	75fb      	strb	r3, [r7, #23]
    uint16_t nonce               = CryptoNvm->DevNonce;
 80140a6:	4b5a      	ldr	r3, [pc, #360]	@ (8014210 <LoRaMacCryptoHandleJoinAccept+0x1a0>)
 80140a8:	681b      	ldr	r3, [r3, #0]
 80140aa:	889b      	ldrh	r3, [r3, #4]
 80140ac:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	681c      	ldr	r4, [r3, #0]
 80140b4:	687b      	ldr	r3, [r7, #4]
 80140b6:	791b      	ldrb	r3, [r3, #4]
 80140b8:	f8b7 1044 	ldrh.w	r1, [r7, #68]	@ 0x44
 80140bc:	7bf8      	ldrb	r0, [r7, #15]
 80140be:	f107 0217 	add.w	r2, r7, #23
 80140c2:	9202      	str	r2, [sp, #8]
 80140c4:	f107 0218 	add.w	r2, r7, #24
 80140c8:	9201      	str	r2, [sp, #4]
 80140ca:	9300      	str	r3, [sp, #0]
 80140cc:	4623      	mov	r3, r4
 80140ce:	460a      	mov	r2, r1
 80140d0:	68b9      	ldr	r1, [r7, #8]
 80140d2:	f7f8 f95c 	bl	800c38e <SecureElementProcessJoinAccept>
 80140d6:	4603      	mov	r3, r0
 80140d8:	2b00      	cmp	r3, #0
 80140da:	d001      	beq.n	80140e0 <LoRaMacCryptoHandleJoinAccept+0x70>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80140dc:	230e      	movs	r3, #14
 80140de:	e092      	b.n	8014206 <LoRaMacCryptoHandleJoinAccept+0x196>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 80140e0:	687b      	ldr	r3, [r7, #4]
 80140e2:	6818      	ldr	r0, [r3, #0]
 80140e4:	687b      	ldr	r3, [r7, #4]
 80140e6:	791b      	ldrb	r3, [r3, #4]
 80140e8:	461a      	mov	r2, r3
 80140ea:	f107 0318 	add.w	r3, r7, #24
 80140ee:	4619      	mov	r1, r3
 80140f0:	f002 ffd1 	bl	8017096 <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 80140f4:	6878      	ldr	r0, [r7, #4]
 80140f6:	f000 f9e9 	bl	80144cc <LoRaMacParserJoinAccept>
 80140fa:	4603      	mov	r3, r0
 80140fc:	2b00      	cmp	r3, #0
 80140fe:	d001      	beq.n	8014104 <LoRaMacCryptoHandleJoinAccept+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8014100:	230f      	movs	r3, #15
 8014102:	e080      	b.n	8014206 <LoRaMacCryptoHandleJoinAccept+0x196>
    }

    uint32_t currentJoinNonce;

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	799b      	ldrb	r3, [r3, #6]
 8014108:	643b      	str	r3, [r7, #64]	@ 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 801410a:	687b      	ldr	r3, [r7, #4]
 801410c:	79db      	ldrb	r3, [r3, #7]
 801410e:	021b      	lsls	r3, r3, #8
 8014110:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8014112:	4313      	orrs	r3, r2
 8014114:	643b      	str	r3, [r7, #64]	@ 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 8014116:	687b      	ldr	r3, [r7, #4]
 8014118:	7a1b      	ldrb	r3, [r3, #8]
 801411a:	041b      	lsls	r3, r3, #16
 801411c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801411e:	4313      	orrs	r3, r2
 8014120:	643b      	str	r3, [r7, #64]	@ 0x40
#if( USE_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    if( currentJoinNonce > CryptoNvm->JoinNonce )
#else
    // Check if the JoinNonce is different from the previous one
    if( currentJoinNonce != CryptoNvm->JoinNonce )
 8014122:	4b3b      	ldr	r3, [pc, #236]	@ (8014210 <LoRaMacCryptoHandleJoinAccept+0x1a0>)
 8014124:	681b      	ldr	r3, [r3, #0]
 8014126:	689b      	ldr	r3, [r3, #8]
 8014128:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801412a:	429a      	cmp	r2, r3
 801412c:	d010      	beq.n	8014150 <LoRaMacCryptoHandleJoinAccept+0xe0>
#endif /* USE_JOIN_NONCE_COUNTER_CHECK */
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 801412e:	4b38      	ldr	r3, [pc, #224]	@ (8014210 <LoRaMacCryptoHandleJoinAccept+0x1a0>)
 8014130:	681b      	ldr	r3, [r3, #0]
 8014132:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8014134:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 8014136:	7dfb      	ldrb	r3, [r7, #23]
 8014138:	2100      	movs	r1, #0
 801413a:	4618      	mov	r0, r3
 801413c:	f000 f97a 	bl	8014434 <LoRaMacCryptoDeriveMcRootKey>
 8014140:	4603      	mov	r3, r0
 8014142:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014146:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801414a:	2b00      	cmp	r3, #0
 801414c:	d005      	beq.n	801415a <LoRaMacCryptoHandleJoinAccept+0xea>
 801414e:	e001      	b.n	8014154 <LoRaMacCryptoHandleJoinAccept+0xe4>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 8014150:	2303      	movs	r3, #3
 8014152:	e058      	b.n	8014206 <LoRaMacCryptoHandleJoinAccept+0x196>
    {
        return retval;
 8014154:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8014158:	e055      	b.n	8014206 <LoRaMacCryptoHandleJoinAccept+0x196>
    }

    retval = LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY );
 801415a:	2004      	movs	r0, #4
 801415c:	f000 f994 	bl	8014488 <LoRaMacCryptoDeriveMcKEKey>
 8014160:	4603      	mov	r3, r0
 8014162:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014166:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801416a:	2b00      	cmp	r3, #0
 801416c:	d002      	beq.n	8014174 <LoRaMacCryptoHandleJoinAccept+0x104>
    {
        return retval;
 801416e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8014172:	e048      	b.n	8014206 <LoRaMacCryptoHandleJoinAccept+0x196>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	7a5b      	ldrb	r3, [r3, #9]
 8014178:	63fb      	str	r3, [r7, #60]	@ 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 801417a:	687b      	ldr	r3, [r7, #4]
 801417c:	7a9b      	ldrb	r3, [r3, #10]
 801417e:	021b      	lsls	r3, r3, #8
 8014180:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8014182:	4313      	orrs	r3, r2
 8014184:	63fb      	str	r3, [r7, #60]	@ 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 8014186:	687b      	ldr	r3, [r7, #4]
 8014188:	7adb      	ldrb	r3, [r3, #11]
 801418a:	041b      	lsls	r3, r3, #16
 801418c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801418e:	4313      	orrs	r3, r2
 8014190:	63fb      	str	r3, [r7, #60]	@ 0x3c

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 8014192:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8014196:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8014198:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801419a:	2003      	movs	r0, #3
 801419c:	f7ff fd0a 	bl	8013bb4 <DeriveSessionKey10x>
 80141a0:	4603      	mov	r3, r0
 80141a2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80141a6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80141aa:	2b00      	cmp	r3, #0
 80141ac:	d002      	beq.n	80141b4 <LoRaMacCryptoHandleJoinAccept+0x144>
        {
            return retval;
 80141ae:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80141b2:	e028      	b.n	8014206 <LoRaMacCryptoHandleJoinAccept+0x196>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 80141b4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80141b8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80141ba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80141bc:	2002      	movs	r0, #2
 80141be:	f7ff fcf9 	bl	8013bb4 <DeriveSessionKey10x>
 80141c2:	4603      	mov	r3, r0
 80141c4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80141c8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80141cc:	2b00      	cmp	r3, #0
 80141ce:	d002      	beq.n	80141d6 <LoRaMacCryptoHandleJoinAccept+0x166>
        {
            return retval;
 80141d0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80141d4:	e017      	b.n	8014206 <LoRaMacCryptoHandleJoinAccept+0x196>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 80141d6:	4b0e      	ldr	r3, [pc, #56]	@ (8014210 <LoRaMacCryptoHandleJoinAccept+0x1a0>)
 80141d8:	681b      	ldr	r3, [r3, #0]
 80141da:	7dfa      	ldrb	r2, [r7, #23]
 80141dc:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    RJcount0 = 0;
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    CryptoNvm->FCntList.FCntUp = 0;
 80141de:	4b0c      	ldr	r3, [pc, #48]	@ (8014210 <LoRaMacCryptoHandleJoinAccept+0x1a0>)
 80141e0:	681b      	ldr	r3, [r3, #0]
 80141e2:	2200      	movs	r2, #0
 80141e4:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 80141e6:	4b0a      	ldr	r3, [pc, #40]	@ (8014210 <LoRaMacCryptoHandleJoinAccept+0x1a0>)
 80141e8:	681b      	ldr	r3, [r3, #0]
 80141ea:	f04f 32ff 	mov.w	r2, #4294967295
 80141ee:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 80141f0:	4b07      	ldr	r3, [pc, #28]	@ (8014210 <LoRaMacCryptoHandleJoinAccept+0x1a0>)
 80141f2:	681b      	ldr	r3, [r3, #0]
 80141f4:	f04f 32ff 	mov.w	r2, #4294967295
 80141f8:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 80141fa:	4b05      	ldr	r3, [pc, #20]	@ (8014210 <LoRaMacCryptoHandleJoinAccept+0x1a0>)
 80141fc:	681b      	ldr	r3, [r3, #0]
 80141fe:	f04f 32ff 	mov.w	r2, #4294967295
 8014202:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 8014204:	2300      	movs	r3, #0
}
 8014206:	4618      	mov	r0, r3
 8014208:	374c      	adds	r7, #76	@ 0x4c
 801420a:	46bd      	mov	sp, r7
 801420c:	bd90      	pop	{r4, r7, pc}
 801420e:	bf00      	nop
 8014210:	20001bc8 	.word	0x20001bc8

08014214 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 8014214:	b590      	push	{r4, r7, lr}
 8014216:	b08b      	sub	sp, #44	@ 0x2c
 8014218:	af04      	add	r7, sp, #16
 801421a:	60f8      	str	r0, [r7, #12]
 801421c:	607b      	str	r3, [r7, #4]
 801421e:	460b      	mov	r3, r1
 8014220:	72fb      	strb	r3, [r7, #11]
 8014222:	4613      	mov	r3, r2
 8014224:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8014226:	2312      	movs	r3, #18
 8014228:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 801422a:	2303      	movs	r3, #3
 801422c:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	2b00      	cmp	r3, #0
 8014232:	d101      	bne.n	8014238 <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014234:	2309      	movs	r3, #9
 8014236:	e05e      	b.n	80142f6 <LoRaMacCryptoSecureMessage+0xe2>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 8014238:	4b31      	ldr	r3, [pc, #196]	@ (8014300 <LoRaMacCryptoSecureMessage+0xec>)
 801423a:	681b      	ldr	r3, [r3, #0]
 801423c:	68db      	ldr	r3, [r3, #12]
 801423e:	68fa      	ldr	r2, [r7, #12]
 8014240:	429a      	cmp	r2, r3
 8014242:	d201      	bcs.n	8014248 <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8014244:	2306      	movs	r3, #6
 8014246:	e056      	b.n	80142f6 <LoRaMacCryptoSecureMessage+0xe2>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 8014248:	687b      	ldr	r3, [r7, #4]
 801424a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801424e:	2b00      	cmp	r3, #0
 8014250:	d101      	bne.n	8014256 <LoRaMacCryptoSecureMessage+0x42>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8014252:	2302      	movs	r3, #2
 8014254:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 8014256:	4b2a      	ldr	r3, [pc, #168]	@ (8014300 <LoRaMacCryptoSecureMessage+0xec>)
 8014258:	681b      	ldr	r3, [r3, #0]
 801425a:	68db      	ldr	r3, [r3, #12]
 801425c:	68fa      	ldr	r2, [r7, #12]
 801425e:	429a      	cmp	r2, r3
 8014260:	d916      	bls.n	8014290 <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 8014262:	687b      	ldr	r3, [r7, #4]
 8014264:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8014266:	687b      	ldr	r3, [r7, #4]
 8014268:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801426c:	b219      	sxth	r1, r3
 801426e:	687b      	ldr	r3, [r7, #4]
 8014270:	689c      	ldr	r4, [r3, #8]
 8014272:	7dfa      	ldrb	r2, [r7, #23]
 8014274:	68fb      	ldr	r3, [r7, #12]
 8014276:	9301      	str	r3, [sp, #4]
 8014278:	2300      	movs	r3, #0
 801427a:	9300      	str	r3, [sp, #0]
 801427c:	4623      	mov	r3, r4
 801427e:	f7ff faa7 	bl	80137d0 <PayloadEncrypt>
 8014282:	4603      	mov	r3, r0
 8014284:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014286:	7dbb      	ldrb	r3, [r7, #22]
 8014288:	2b00      	cmp	r3, #0
 801428a:	d001      	beq.n	8014290 <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 801428c:	7dbb      	ldrb	r3, [r7, #22]
 801428e:	e032      	b.n	80142f6 <LoRaMacCryptoSecureMessage+0xe2>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8014290:	6878      	ldr	r0, [r7, #4]
 8014292:	f000 fb5a 	bl	801494a <LoRaMacSerializerData>
 8014296:	4603      	mov	r3, r0
 8014298:	2b00      	cmp	r3, #0
 801429a:	d001      	beq.n	80142a0 <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 801429c:	2310      	movs	r3, #16
 801429e:	e02a      	b.n	80142f6 <LoRaMacCryptoSecureMessage+0xe2>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 80142a0:	2302      	movs	r3, #2
 80142a2:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 80142a4:	687b      	ldr	r3, [r7, #4]
 80142a6:	6818      	ldr	r0, [r3, #0]
 80142a8:	687b      	ldr	r3, [r7, #4]
 80142aa:	791b      	ldrb	r3, [r3, #4]
 80142ac:	3b04      	subs	r3, #4
 80142ae:	b299      	uxth	r1, r3
 80142b0:	687b      	ldr	r3, [r7, #4]
 80142b2:	689b      	ldr	r3, [r3, #8]
 80142b4:	687a      	ldr	r2, [r7, #4]
 80142b6:	322c      	adds	r2, #44	@ 0x2c
 80142b8:	7dfc      	ldrb	r4, [r7, #23]
 80142ba:	9203      	str	r2, [sp, #12]
 80142bc:	68fa      	ldr	r2, [r7, #12]
 80142be:	9202      	str	r2, [sp, #8]
 80142c0:	9301      	str	r3, [sp, #4]
 80142c2:	2300      	movs	r3, #0
 80142c4:	9300      	str	r3, [sp, #0]
 80142c6:	2300      	movs	r3, #0
 80142c8:	4622      	mov	r2, r4
 80142ca:	f7ff fb80 	bl	80139ce <ComputeCmacB0>
 80142ce:	4603      	mov	r3, r0
 80142d0:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80142d2:	7dbb      	ldrb	r3, [r7, #22]
 80142d4:	2b00      	cmp	r3, #0
 80142d6:	d001      	beq.n	80142dc <LoRaMacCryptoSecureMessage+0xc8>
        {
            return retval;
 80142d8:	7dbb      	ldrb	r3, [r7, #22]
 80142da:	e00c      	b.n	80142f6 <LoRaMacCryptoSecureMessage+0xe2>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80142dc:	6878      	ldr	r0, [r7, #4]
 80142de:	f000 fb34 	bl	801494a <LoRaMacSerializerData>
 80142e2:	4603      	mov	r3, r0
 80142e4:	2b00      	cmp	r3, #0
 80142e6:	d001      	beq.n	80142ec <LoRaMacCryptoSecureMessage+0xd8>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80142e8:	2310      	movs	r3, #16
 80142ea:	e004      	b.n	80142f6 <LoRaMacCryptoSecureMessage+0xe2>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 80142ec:	4b04      	ldr	r3, [pc, #16]	@ (8014300 <LoRaMacCryptoSecureMessage+0xec>)
 80142ee:	681b      	ldr	r3, [r3, #0]
 80142f0:	68fa      	ldr	r2, [r7, #12]
 80142f2:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 80142f4:	2300      	movs	r3, #0
}
 80142f6:	4618      	mov	r0, r3
 80142f8:	371c      	adds	r7, #28
 80142fa:	46bd      	mov	sp, r7
 80142fc:	bd90      	pop	{r4, r7, pc}
 80142fe:	bf00      	nop
 8014300:	20001bc8 	.word	0x20001bc8

08014304 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 8014304:	b590      	push	{r4, r7, lr}
 8014306:	b08b      	sub	sp, #44	@ 0x2c
 8014308:	af04      	add	r7, sp, #16
 801430a:	60b9      	str	r1, [r7, #8]
 801430c:	607b      	str	r3, [r7, #4]
 801430e:	4603      	mov	r3, r0
 8014310:	73fb      	strb	r3, [r7, #15]
 8014312:	4613      	mov	r3, r2
 8014314:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 8014316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014318:	2b00      	cmp	r3, #0
 801431a:	d101      	bne.n	8014320 <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801431c:	2309      	movs	r3, #9
 801431e:	e083      	b.n	8014428 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 8014320:	7bbb      	ldrb	r3, [r7, #14]
 8014322:	6879      	ldr	r1, [r7, #4]
 8014324:	4618      	mov	r0, r3
 8014326:	f7ff fce1 	bl	8013cec <CheckFCntDown>
 801432a:	4603      	mov	r3, r0
 801432c:	f083 0301 	eor.w	r3, r3, #1
 8014330:	b2db      	uxtb	r3, r3
 8014332:	2b00      	cmp	r3, #0
 8014334:	d001      	beq.n	801433a <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8014336:	2306      	movs	r3, #6
 8014338:	e076      	b.n	8014428 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 801433a:	2312      	movs	r3, #18
 801433c:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 801433e:	2303      	movs	r3, #3
 8014340:	75fb      	strb	r3, [r7, #23]
    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 8014342:	2302      	movs	r3, #2
 8014344:	753b      	strb	r3, [r7, #20]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    /* ST_WORKAROUND_END */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8014346:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014348:	f000 f98b 	bl	8014662 <LoRaMacParserData>
 801434c:	4603      	mov	r3, r0
 801434e:	2b00      	cmp	r3, #0
 8014350:	d001      	beq.n	8014356 <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8014352:	230f      	movs	r3, #15
 8014354:	e068      	b.n	8014428 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 8014356:	f107 0210 	add.w	r2, r7, #16
 801435a:	7bfb      	ldrb	r3, [r7, #15]
 801435c:	4611      	mov	r1, r2
 801435e:	4618      	mov	r0, r3
 8014360:	f7ff fc02 	bl	8013b68 <GetKeyAddrItem>
 8014364:	4603      	mov	r3, r0
 8014366:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014368:	7d7b      	ldrb	r3, [r7, #21]
 801436a:	2b00      	cmp	r3, #0
 801436c:	d001      	beq.n	8014372 <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 801436e:	7d7b      	ldrb	r3, [r7, #21]
 8014370:	e05a      	b.n	8014428 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 8014372:	693b      	ldr	r3, [r7, #16]
 8014374:	785b      	ldrb	r3, [r3, #1]
 8014376:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 8014378:	693b      	ldr	r3, [r7, #16]
 801437a:	789b      	ldrb	r3, [r3, #2]
 801437c:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 801437e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014380:	689b      	ldr	r3, [r3, #8]
 8014382:	68ba      	ldr	r2, [r7, #8]
 8014384:	429a      	cmp	r2, r3
 8014386:	d001      	beq.n	801438c <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 8014388:	2302      	movs	r3, #2
 801438a:	e04d      	b.n	8014428 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 801438c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801438e:	7b1b      	ldrb	r3, [r3, #12]
 8014390:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8014394:	b2db      	uxtb	r3, r3
 8014396:	2b00      	cmp	r3, #0
 8014398:	bf14      	ite	ne
 801439a:	2301      	movne	r3, #1
 801439c:	2300      	moveq	r3, #0
 801439e:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 80143a0:	4b23      	ldr	r3, [pc, #140]	@ (8014430 <LoRaMacCryptoUnsecureMessage+0x12c>)
 80143a2:	681b      	ldr	r3, [r3, #0]
 80143a4:	789b      	ldrb	r3, [r3, #2]
 80143a6:	2b00      	cmp	r3, #0
 80143a8:	d101      	bne.n	80143ae <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 80143aa:	2300      	movs	r3, #0
 80143ac:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 80143ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80143b0:	6818      	ldr	r0, [r3, #0]
 80143b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80143b4:	791b      	ldrb	r3, [r3, #4]
 80143b6:	3b04      	subs	r3, #4
 80143b8:	b299      	uxth	r1, r3
 80143ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80143bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80143be:	7dbc      	ldrb	r4, [r7, #22]
 80143c0:	7d3a      	ldrb	r2, [r7, #20]
 80143c2:	9303      	str	r3, [sp, #12]
 80143c4:	687b      	ldr	r3, [r7, #4]
 80143c6:	9302      	str	r3, [sp, #8]
 80143c8:	68bb      	ldr	r3, [r7, #8]
 80143ca:	9301      	str	r3, [sp, #4]
 80143cc:	2301      	movs	r3, #1
 80143ce:	9300      	str	r3, [sp, #0]
 80143d0:	4623      	mov	r3, r4
 80143d2:	f7ff fb3a 	bl	8013a4a <VerifyCmacB0>
 80143d6:	4603      	mov	r3, r0
 80143d8:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80143da:	7d7b      	ldrb	r3, [r7, #21]
 80143dc:	2b00      	cmp	r3, #0
 80143de:	d001      	beq.n	80143e4 <LoRaMacCryptoUnsecureMessage+0xe0>
    {
        return retval;
 80143e0:	7d7b      	ldrb	r3, [r7, #21]
 80143e2:	e021      	b.n	8014428 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 80143e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80143e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80143ea:	2b00      	cmp	r3, #0
 80143ec:	d101      	bne.n	80143f2 <LoRaMacCryptoUnsecureMessage+0xee>
        // Use network session encryption key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 80143ee:	2302      	movs	r3, #2
 80143f0:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 80143f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80143f4:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80143f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80143f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80143fc:	b219      	sxth	r1, r3
 80143fe:	7dfa      	ldrb	r2, [r7, #23]
 8014400:	687b      	ldr	r3, [r7, #4]
 8014402:	9301      	str	r3, [sp, #4]
 8014404:	2301      	movs	r3, #1
 8014406:	9300      	str	r3, [sp, #0]
 8014408:	68bb      	ldr	r3, [r7, #8]
 801440a:	f7ff f9e1 	bl	80137d0 <PayloadEncrypt>
 801440e:	4603      	mov	r3, r0
 8014410:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014412:	7d7b      	ldrb	r3, [r7, #21]
 8014414:	2b00      	cmp	r3, #0
 8014416:	d001      	beq.n	801441c <LoRaMacCryptoUnsecureMessage+0x118>
    {
        return retval;
 8014418:	7d7b      	ldrb	r3, [r7, #21]
 801441a:	e005      	b.n	8014428 <LoRaMacCryptoUnsecureMessage+0x124>
            }
        }
    }
#endif

    UpdateFCntDown( fCntID, fCntDown );
 801441c:	7bbb      	ldrb	r3, [r7, #14]
 801441e:	6879      	ldr	r1, [r7, #4]
 8014420:	4618      	mov	r0, r3
 8014422:	f7ff fc87 	bl	8013d34 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 8014426:	2300      	movs	r3, #0
}
 8014428:	4618      	mov	r0, r3
 801442a:	371c      	adds	r7, #28
 801442c:	46bd      	mov	sp, r7
 801442e:	bd90      	pop	{r4, r7, pc}
 8014430:	20001bc8 	.word	0x20001bc8

08014434 <LoRaMacCryptoDeriveMcRootKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 8014434:	b580      	push	{r7, lr}
 8014436:	b086      	sub	sp, #24
 8014438:	af00      	add	r7, sp, #0
 801443a:	4603      	mov	r3, r0
 801443c:	460a      	mov	r2, r1
 801443e:	71fb      	strb	r3, [r7, #7]
 8014440:	4613      	mov	r3, r2
 8014442:	71bb      	strb	r3, [r7, #6]
    // Prevent other keys than AppKey
    if( keyID != APP_KEY )
 8014444:	79bb      	ldrb	r3, [r7, #6]
 8014446:	2b00      	cmp	r3, #0
 8014448:	d001      	beq.n	801444e <LoRaMacCryptoDeriveMcRootKey+0x1a>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 801444a:	230a      	movs	r3, #10
 801444c:	e018      	b.n	8014480 <LoRaMacCryptoDeriveMcRootKey+0x4c>
    }
    uint8_t compBase[16] = { 0 };
 801444e:	f107 0308 	add.w	r3, r7, #8
 8014452:	2200      	movs	r2, #0
 8014454:	601a      	str	r2, [r3, #0]
 8014456:	605a      	str	r2, [r3, #4]
 8014458:	609a      	str	r2, [r3, #8]
 801445a:	60da      	str	r2, [r3, #12]

    if( versionMinor == 1 )
 801445c:	79fb      	ldrb	r3, [r7, #7]
 801445e:	2b01      	cmp	r3, #1
 8014460:	d101      	bne.n	8014466 <LoRaMacCryptoDeriveMcRootKey+0x32>
    {
        compBase[0] = 0x20;
 8014462:	2320      	movs	r3, #32
 8014464:	723b      	strb	r3, [r7, #8]
    }
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 8014466:	79b9      	ldrb	r1, [r7, #6]
 8014468:	f107 0308 	add.w	r3, r7, #8
 801446c:	2204      	movs	r2, #4
 801446e:	4618      	mov	r0, r3
 8014470:	f7f7 ff4e 	bl	800c310 <SecureElementDeriveAndStoreKey>
 8014474:	4603      	mov	r3, r0
 8014476:	2b00      	cmp	r3, #0
 8014478:	d001      	beq.n	801447e <LoRaMacCryptoDeriveMcRootKey+0x4a>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801447a:	230e      	movs	r3, #14
 801447c:	e000      	b.n	8014480 <LoRaMacCryptoDeriveMcRootKey+0x4c>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 801447e:	2300      	movs	r3, #0
}
 8014480:	4618      	mov	r0, r3
 8014482:	3718      	adds	r7, #24
 8014484:	46bd      	mov	sp, r7
 8014486:	bd80      	pop	{r7, pc}

08014488 <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
 8014488:	b580      	push	{r7, lr}
 801448a:	b086      	sub	sp, #24
 801448c:	af00      	add	r7, sp, #0
 801448e:	4603      	mov	r3, r0
 8014490:	71fb      	strb	r3, [r7, #7]
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 8014492:	79fb      	ldrb	r3, [r7, #7]
 8014494:	2b04      	cmp	r3, #4
 8014496:	d001      	beq.n	801449c <LoRaMacCryptoDeriveMcKEKey+0x14>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8014498:	230a      	movs	r3, #10
 801449a:	e013      	b.n	80144c4 <LoRaMacCryptoDeriveMcKEKey+0x3c>
    }
    uint8_t compBase[16] = { 0 };
 801449c:	f107 0308 	add.w	r3, r7, #8
 80144a0:	2200      	movs	r2, #0
 80144a2:	601a      	str	r2, [r3, #0]
 80144a4:	605a      	str	r2, [r3, #4]
 80144a6:	609a      	str	r2, [r3, #8]
 80144a8:	60da      	str	r2, [r3, #12]

    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 80144aa:	79f9      	ldrb	r1, [r7, #7]
 80144ac:	f107 0308 	add.w	r3, r7, #8
 80144b0:	227f      	movs	r2, #127	@ 0x7f
 80144b2:	4618      	mov	r0, r3
 80144b4:	f7f7 ff2c 	bl	800c310 <SecureElementDeriveAndStoreKey>
 80144b8:	4603      	mov	r3, r0
 80144ba:	2b00      	cmp	r3, #0
 80144bc:	d001      	beq.n	80144c2 <LoRaMacCryptoDeriveMcKEKey+0x3a>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80144be:	230e      	movs	r3, #14
 80144c0:	e000      	b.n	80144c4 <LoRaMacCryptoDeriveMcKEKey+0x3c>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80144c2:	2300      	movs	r3, #0
}
 80144c4:	4618      	mov	r0, r3
 80144c6:	3718      	adds	r7, #24
 80144c8:	46bd      	mov	sp, r7
 80144ca:	bd80      	pop	{r7, pc}

080144cc <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 80144cc:	b580      	push	{r7, lr}
 80144ce:	b084      	sub	sp, #16
 80144d0:	af00      	add	r7, sp, #0
 80144d2:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80144d4:	687b      	ldr	r3, [r7, #4]
 80144d6:	2b00      	cmp	r3, #0
 80144d8:	d003      	beq.n	80144e2 <LoRaMacParserJoinAccept+0x16>
 80144da:	687b      	ldr	r3, [r7, #4]
 80144dc:	681b      	ldr	r3, [r3, #0]
 80144de:	2b00      	cmp	r3, #0
 80144e0:	d101      	bne.n	80144e6 <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 80144e2:	2302      	movs	r3, #2
 80144e4:	e0b9      	b.n	801465a <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 80144e6:	2300      	movs	r3, #0
 80144e8:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 80144ea:	687b      	ldr	r3, [r7, #4]
 80144ec:	681a      	ldr	r2, [r3, #0]
 80144ee:	89fb      	ldrh	r3, [r7, #14]
 80144f0:	1c59      	adds	r1, r3, #1
 80144f2:	81f9      	strh	r1, [r7, #14]
 80144f4:	4413      	add	r3, r2
 80144f6:	781a      	ldrb	r2, [r3, #0]
 80144f8:	687b      	ldr	r3, [r7, #4]
 80144fa:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 80144fc:	687b      	ldr	r3, [r7, #4]
 80144fe:	1d98      	adds	r0, r3, #6
 8014500:	687b      	ldr	r3, [r7, #4]
 8014502:	681a      	ldr	r2, [r3, #0]
 8014504:	89fb      	ldrh	r3, [r7, #14]
 8014506:	4413      	add	r3, r2
 8014508:	2203      	movs	r2, #3
 801450a:	4619      	mov	r1, r3
 801450c:	f002 fdc3 	bl	8017096 <memcpy1>
    bufItr = bufItr + 3;
 8014510:	89fb      	ldrh	r3, [r7, #14]
 8014512:	3303      	adds	r3, #3
 8014514:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 8014516:	687b      	ldr	r3, [r7, #4]
 8014518:	f103 0009 	add.w	r0, r3, #9
 801451c:	687b      	ldr	r3, [r7, #4]
 801451e:	681a      	ldr	r2, [r3, #0]
 8014520:	89fb      	ldrh	r3, [r7, #14]
 8014522:	4413      	add	r3, r2
 8014524:	2203      	movs	r2, #3
 8014526:	4619      	mov	r1, r3
 8014528:	f002 fdb5 	bl	8017096 <memcpy1>
    bufItr = bufItr + 3;
 801452c:	89fb      	ldrh	r3, [r7, #14]
 801452e:	3303      	adds	r3, #3
 8014530:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 8014532:	687b      	ldr	r3, [r7, #4]
 8014534:	681a      	ldr	r2, [r3, #0]
 8014536:	89fb      	ldrh	r3, [r7, #14]
 8014538:	1c59      	adds	r1, r3, #1
 801453a:	81f9      	strh	r1, [r7, #14]
 801453c:	4413      	add	r3, r2
 801453e:	781b      	ldrb	r3, [r3, #0]
 8014540:	461a      	mov	r2, r3
 8014542:	687b      	ldr	r3, [r7, #4]
 8014544:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8014546:	687b      	ldr	r3, [r7, #4]
 8014548:	681a      	ldr	r2, [r3, #0]
 801454a:	89fb      	ldrh	r3, [r7, #14]
 801454c:	1c59      	adds	r1, r3, #1
 801454e:	81f9      	strh	r1, [r7, #14]
 8014550:	4413      	add	r3, r2
 8014552:	781b      	ldrb	r3, [r3, #0]
 8014554:	021a      	lsls	r2, r3, #8
 8014556:	687b      	ldr	r3, [r7, #4]
 8014558:	68db      	ldr	r3, [r3, #12]
 801455a:	431a      	orrs	r2, r3
 801455c:	687b      	ldr	r3, [r7, #4]
 801455e:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8014560:	687b      	ldr	r3, [r7, #4]
 8014562:	681a      	ldr	r2, [r3, #0]
 8014564:	89fb      	ldrh	r3, [r7, #14]
 8014566:	1c59      	adds	r1, r3, #1
 8014568:	81f9      	strh	r1, [r7, #14]
 801456a:	4413      	add	r3, r2
 801456c:	781b      	ldrb	r3, [r3, #0]
 801456e:	041a      	lsls	r2, r3, #16
 8014570:	687b      	ldr	r3, [r7, #4]
 8014572:	68db      	ldr	r3, [r3, #12]
 8014574:	431a      	orrs	r2, r3
 8014576:	687b      	ldr	r3, [r7, #4]
 8014578:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 801457a:	687b      	ldr	r3, [r7, #4]
 801457c:	681a      	ldr	r2, [r3, #0]
 801457e:	89fb      	ldrh	r3, [r7, #14]
 8014580:	1c59      	adds	r1, r3, #1
 8014582:	81f9      	strh	r1, [r7, #14]
 8014584:	4413      	add	r3, r2
 8014586:	781b      	ldrb	r3, [r3, #0]
 8014588:	061a      	lsls	r2, r3, #24
 801458a:	687b      	ldr	r3, [r7, #4]
 801458c:	68db      	ldr	r3, [r3, #12]
 801458e:	431a      	orrs	r2, r3
 8014590:	687b      	ldr	r3, [r7, #4]
 8014592:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	681a      	ldr	r2, [r3, #0]
 8014598:	89fb      	ldrh	r3, [r7, #14]
 801459a:	1c59      	adds	r1, r3, #1
 801459c:	81f9      	strh	r1, [r7, #14]
 801459e:	4413      	add	r3, r2
 80145a0:	781a      	ldrb	r2, [r3, #0]
 80145a2:	687b      	ldr	r3, [r7, #4]
 80145a4:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 80145a6:	687b      	ldr	r3, [r7, #4]
 80145a8:	681a      	ldr	r2, [r3, #0]
 80145aa:	89fb      	ldrh	r3, [r7, #14]
 80145ac:	1c59      	adds	r1, r3, #1
 80145ae:	81f9      	strh	r1, [r7, #14]
 80145b0:	4413      	add	r3, r2
 80145b2:	781a      	ldrb	r2, [r3, #0]
 80145b4:	687b      	ldr	r3, [r7, #4]
 80145b6:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 80145b8:	687b      	ldr	r3, [r7, #4]
 80145ba:	791b      	ldrb	r3, [r3, #4]
 80145bc:	1f1a      	subs	r2, r3, #4
 80145be:	89fb      	ldrh	r3, [r7, #14]
 80145c0:	1ad3      	subs	r3, r2, r3
 80145c2:	2b10      	cmp	r3, #16
 80145c4:	d10e      	bne.n	80145e4 <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 80145c6:	687b      	ldr	r3, [r7, #4]
 80145c8:	f103 0012 	add.w	r0, r3, #18
 80145cc:	687b      	ldr	r3, [r7, #4]
 80145ce:	681a      	ldr	r2, [r3, #0]
 80145d0:	89fb      	ldrh	r3, [r7, #14]
 80145d2:	4413      	add	r3, r2
 80145d4:	2210      	movs	r2, #16
 80145d6:	4619      	mov	r1, r3
 80145d8:	f002 fd5d 	bl	8017096 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 80145dc:	89fb      	ldrh	r3, [r7, #14]
 80145de:	3310      	adds	r3, #16
 80145e0:	81fb      	strh	r3, [r7, #14]
 80145e2:	e008      	b.n	80145f6 <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 80145e4:	687b      	ldr	r3, [r7, #4]
 80145e6:	791b      	ldrb	r3, [r3, #4]
 80145e8:	1f1a      	subs	r2, r3, #4
 80145ea:	89fb      	ldrh	r3, [r7, #14]
 80145ec:	1ad3      	subs	r3, r2, r3
 80145ee:	2b00      	cmp	r3, #0
 80145f0:	dd01      	ble.n	80145f6 <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 80145f2:	2301      	movs	r3, #1
 80145f4:	e031      	b.n	801465a <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	681a      	ldr	r2, [r3, #0]
 80145fa:	89fb      	ldrh	r3, [r7, #14]
 80145fc:	1c59      	adds	r1, r3, #1
 80145fe:	81f9      	strh	r1, [r7, #14]
 8014600:	4413      	add	r3, r2
 8014602:	781b      	ldrb	r3, [r3, #0]
 8014604:	461a      	mov	r2, r3
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	681a      	ldr	r2, [r3, #0]
 801460e:	89fb      	ldrh	r3, [r7, #14]
 8014610:	1c59      	adds	r1, r3, #1
 8014612:	81f9      	strh	r1, [r7, #14]
 8014614:	4413      	add	r3, r2
 8014616:	781b      	ldrb	r3, [r3, #0]
 8014618:	021a      	lsls	r2, r3, #8
 801461a:	687b      	ldr	r3, [r7, #4]
 801461c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801461e:	431a      	orrs	r2, r3
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8014624:	687b      	ldr	r3, [r7, #4]
 8014626:	681a      	ldr	r2, [r3, #0]
 8014628:	89fb      	ldrh	r3, [r7, #14]
 801462a:	1c59      	adds	r1, r3, #1
 801462c:	81f9      	strh	r1, [r7, #14]
 801462e:	4413      	add	r3, r2
 8014630:	781b      	ldrb	r3, [r3, #0]
 8014632:	041a      	lsls	r2, r3, #16
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014638:	431a      	orrs	r2, r3
 801463a:	687b      	ldr	r3, [r7, #4]
 801463c:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 801463e:	687b      	ldr	r3, [r7, #4]
 8014640:	681a      	ldr	r2, [r3, #0]
 8014642:	89fb      	ldrh	r3, [r7, #14]
 8014644:	1c59      	adds	r1, r3, #1
 8014646:	81f9      	strh	r1, [r7, #14]
 8014648:	4413      	add	r3, r2
 801464a:	781b      	ldrb	r3, [r3, #0]
 801464c:	061a      	lsls	r2, r3, #24
 801464e:	687b      	ldr	r3, [r7, #4]
 8014650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014652:	431a      	orrs	r2, r3
 8014654:	687b      	ldr	r3, [r7, #4]
 8014656:	625a      	str	r2, [r3, #36]	@ 0x24

    return LORAMAC_PARSER_SUCCESS;
 8014658:	2300      	movs	r3, #0
}
 801465a:	4618      	mov	r0, r3
 801465c:	3710      	adds	r7, #16
 801465e:	46bd      	mov	sp, r7
 8014660:	bd80      	pop	{r7, pc}

08014662 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 8014662:	b580      	push	{r7, lr}
 8014664:	b084      	sub	sp, #16
 8014666:	af00      	add	r7, sp, #0
 8014668:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 801466a:	687b      	ldr	r3, [r7, #4]
 801466c:	2b00      	cmp	r3, #0
 801466e:	d003      	beq.n	8014678 <LoRaMacParserData+0x16>
 8014670:	687b      	ldr	r3, [r7, #4]
 8014672:	681b      	ldr	r3, [r3, #0]
 8014674:	2b00      	cmp	r3, #0
 8014676:	d101      	bne.n	801467c <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8014678:	2302      	movs	r3, #2
 801467a:	e0e0      	b.n	801483e <LoRaMacParserData+0x1dc>
    }

    uint16_t bufItr = 0;
 801467c:	2300      	movs	r3, #0
 801467e:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	681a      	ldr	r2, [r3, #0]
 8014684:	89fb      	ldrh	r3, [r7, #14]
 8014686:	1c59      	adds	r1, r3, #1
 8014688:	81f9      	strh	r1, [r7, #14]
 801468a:	4413      	add	r3, r2
 801468c:	781a      	ldrb	r2, [r3, #0]
 801468e:	687b      	ldr	r3, [r7, #4]
 8014690:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 8014692:	687b      	ldr	r3, [r7, #4]
 8014694:	681a      	ldr	r2, [r3, #0]
 8014696:	89fb      	ldrh	r3, [r7, #14]
 8014698:	1c59      	adds	r1, r3, #1
 801469a:	81f9      	strh	r1, [r7, #14]
 801469c:	4413      	add	r3, r2
 801469e:	781b      	ldrb	r3, [r3, #0]
 80146a0:	461a      	mov	r2, r3
 80146a2:	687b      	ldr	r3, [r7, #4]
 80146a4:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 80146a6:	687b      	ldr	r3, [r7, #4]
 80146a8:	681a      	ldr	r2, [r3, #0]
 80146aa:	89fb      	ldrh	r3, [r7, #14]
 80146ac:	1c59      	adds	r1, r3, #1
 80146ae:	81f9      	strh	r1, [r7, #14]
 80146b0:	4413      	add	r3, r2
 80146b2:	781b      	ldrb	r3, [r3, #0]
 80146b4:	021a      	lsls	r2, r3, #8
 80146b6:	687b      	ldr	r3, [r7, #4]
 80146b8:	689b      	ldr	r3, [r3, #8]
 80146ba:	431a      	orrs	r2, r3
 80146bc:	687b      	ldr	r3, [r7, #4]
 80146be:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 80146c0:	687b      	ldr	r3, [r7, #4]
 80146c2:	681a      	ldr	r2, [r3, #0]
 80146c4:	89fb      	ldrh	r3, [r7, #14]
 80146c6:	1c59      	adds	r1, r3, #1
 80146c8:	81f9      	strh	r1, [r7, #14]
 80146ca:	4413      	add	r3, r2
 80146cc:	781b      	ldrb	r3, [r3, #0]
 80146ce:	041a      	lsls	r2, r3, #16
 80146d0:	687b      	ldr	r3, [r7, #4]
 80146d2:	689b      	ldr	r3, [r3, #8]
 80146d4:	431a      	orrs	r2, r3
 80146d6:	687b      	ldr	r3, [r7, #4]
 80146d8:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 80146da:	687b      	ldr	r3, [r7, #4]
 80146dc:	681a      	ldr	r2, [r3, #0]
 80146de:	89fb      	ldrh	r3, [r7, #14]
 80146e0:	1c59      	adds	r1, r3, #1
 80146e2:	81f9      	strh	r1, [r7, #14]
 80146e4:	4413      	add	r3, r2
 80146e6:	781b      	ldrb	r3, [r3, #0]
 80146e8:	061a      	lsls	r2, r3, #24
 80146ea:	687b      	ldr	r3, [r7, #4]
 80146ec:	689b      	ldr	r3, [r3, #8]
 80146ee:	431a      	orrs	r2, r3
 80146f0:	687b      	ldr	r3, [r7, #4]
 80146f2:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 80146f4:	687b      	ldr	r3, [r7, #4]
 80146f6:	681a      	ldr	r2, [r3, #0]
 80146f8:	89fb      	ldrh	r3, [r7, #14]
 80146fa:	1c59      	adds	r1, r3, #1
 80146fc:	81f9      	strh	r1, [r7, #14]
 80146fe:	4413      	add	r3, r2
 8014700:	781a      	ldrb	r2, [r3, #0]
 8014702:	687b      	ldr	r3, [r7, #4]
 8014704:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 8014706:	687b      	ldr	r3, [r7, #4]
 8014708:	681a      	ldr	r2, [r3, #0]
 801470a:	89fb      	ldrh	r3, [r7, #14]
 801470c:	1c59      	adds	r1, r3, #1
 801470e:	81f9      	strh	r1, [r7, #14]
 8014710:	4413      	add	r3, r2
 8014712:	781b      	ldrb	r3, [r3, #0]
 8014714:	461a      	mov	r2, r3
 8014716:	687b      	ldr	r3, [r7, #4]
 8014718:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 801471a:	687b      	ldr	r3, [r7, #4]
 801471c:	681a      	ldr	r2, [r3, #0]
 801471e:	89fb      	ldrh	r3, [r7, #14]
 8014720:	1c59      	adds	r1, r3, #1
 8014722:	81f9      	strh	r1, [r7, #14]
 8014724:	4413      	add	r3, r2
 8014726:	781b      	ldrb	r3, [r3, #0]
 8014728:	0219      	lsls	r1, r3, #8
 801472a:	687b      	ldr	r3, [r7, #4]
 801472c:	89db      	ldrh	r3, [r3, #14]
 801472e:	b21a      	sxth	r2, r3
 8014730:	b20b      	sxth	r3, r1
 8014732:	4313      	orrs	r3, r2
 8014734:	b21b      	sxth	r3, r3
 8014736:	b29a      	uxth	r2, r3
 8014738:	687b      	ldr	r3, [r7, #4]
 801473a:	81da      	strh	r2, [r3, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 801473c:	687b      	ldr	r3, [r7, #4]
 801473e:	f103 0010 	add.w	r0, r3, #16
 8014742:	687b      	ldr	r3, [r7, #4]
 8014744:	681a      	ldr	r2, [r3, #0]
 8014746:	89fb      	ldrh	r3, [r7, #14]
 8014748:	18d1      	adds	r1, r2, r3
 801474a:	687b      	ldr	r3, [r7, #4]
 801474c:	7b1b      	ldrb	r3, [r3, #12]
 801474e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8014752:	b2db      	uxtb	r3, r3
 8014754:	461a      	mov	r2, r3
 8014756:	f002 fc9e 	bl	8017096 <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	7b1b      	ldrb	r3, [r3, #12]
 801475e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8014762:	b2db      	uxtb	r3, r3
 8014764:	461a      	mov	r2, r3
 8014766:	89fb      	ldrh	r3, [r7, #14]
 8014768:	4413      	add	r3, r2
 801476a:	81fb      	strh	r3, [r7, #14]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 801476c:	687b      	ldr	r3, [r7, #4]
 801476e:	2200      	movs	r2, #0
 8014770:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 8014774:	687b      	ldr	r3, [r7, #4]
 8014776:	2200      	movs	r2, #0
 8014778:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 801477c:	687b      	ldr	r3, [r7, #4]
 801477e:	791b      	ldrb	r3, [r3, #4]
 8014780:	461a      	mov	r2, r3
 8014782:	89fb      	ldrh	r3, [r7, #14]
 8014784:	1ad3      	subs	r3, r2, r3
 8014786:	2b04      	cmp	r3, #4
 8014788:	dd27      	ble.n	80147da <LoRaMacParserData+0x178>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	681a      	ldr	r2, [r3, #0]
 801478e:	89fb      	ldrh	r3, [r7, #14]
 8014790:	1c59      	adds	r1, r3, #1
 8014792:	81f9      	strh	r1, [r7, #14]
 8014794:	4413      	add	r3, r2
 8014796:	781a      	ldrb	r2, [r3, #0]
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 801479e:	687b      	ldr	r3, [r7, #4]
 80147a0:	791a      	ldrb	r2, [r3, #4]
 80147a2:	89fb      	ldrh	r3, [r7, #14]
 80147a4:	b2db      	uxtb	r3, r3
 80147a6:	1ad3      	subs	r3, r2, r3
 80147a8:	b2db      	uxtb	r3, r3
 80147aa:	3b04      	subs	r3, #4
 80147ac:	b2da      	uxtb	r2, r3
 80147ae:	687b      	ldr	r3, [r7, #4]
 80147b0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 80147b4:	687b      	ldr	r3, [r7, #4]
 80147b6:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80147b8:	687b      	ldr	r3, [r7, #4]
 80147ba:	681a      	ldr	r2, [r3, #0]
 80147bc:	89fb      	ldrh	r3, [r7, #14]
 80147be:	18d1      	adds	r1, r2, r3
 80147c0:	687b      	ldr	r3, [r7, #4]
 80147c2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80147c6:	461a      	mov	r2, r3
 80147c8:	f002 fc65 	bl	8017096 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 80147cc:	687b      	ldr	r3, [r7, #4]
 80147ce:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80147d2:	461a      	mov	r2, r3
 80147d4:	89fb      	ldrh	r3, [r7, #14]
 80147d6:	4413      	add	r3, r2
 80147d8:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 80147da:	687b      	ldr	r3, [r7, #4]
 80147dc:	681a      	ldr	r2, [r3, #0]
 80147de:	687b      	ldr	r3, [r7, #4]
 80147e0:	791b      	ldrb	r3, [r3, #4]
 80147e2:	3b04      	subs	r3, #4
 80147e4:	4413      	add	r3, r2
 80147e6:	781b      	ldrb	r3, [r3, #0]
 80147e8:	461a      	mov	r2, r3
 80147ea:	687b      	ldr	r3, [r7, #4]
 80147ec:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 80147ee:	687b      	ldr	r3, [r7, #4]
 80147f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80147f2:	687b      	ldr	r3, [r7, #4]
 80147f4:	6819      	ldr	r1, [r3, #0]
 80147f6:	687b      	ldr	r3, [r7, #4]
 80147f8:	791b      	ldrb	r3, [r3, #4]
 80147fa:	3b03      	subs	r3, #3
 80147fc:	440b      	add	r3, r1
 80147fe:	781b      	ldrb	r3, [r3, #0]
 8014800:	021b      	lsls	r3, r3, #8
 8014802:	431a      	orrs	r2, r3
 8014804:	687b      	ldr	r3, [r7, #4]
 8014806:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 8014808:	687b      	ldr	r3, [r7, #4]
 801480a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801480c:	687b      	ldr	r3, [r7, #4]
 801480e:	6819      	ldr	r1, [r3, #0]
 8014810:	687b      	ldr	r3, [r7, #4]
 8014812:	791b      	ldrb	r3, [r3, #4]
 8014814:	3b02      	subs	r3, #2
 8014816:	440b      	add	r3, r1
 8014818:	781b      	ldrb	r3, [r3, #0]
 801481a:	041b      	lsls	r3, r3, #16
 801481c:	431a      	orrs	r2, r3
 801481e:	687b      	ldr	r3, [r7, #4]
 8014820:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 8014822:	687b      	ldr	r3, [r7, #4]
 8014824:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014826:	687b      	ldr	r3, [r7, #4]
 8014828:	6819      	ldr	r1, [r3, #0]
 801482a:	687b      	ldr	r3, [r7, #4]
 801482c:	791b      	ldrb	r3, [r3, #4]
 801482e:	3b01      	subs	r3, #1
 8014830:	440b      	add	r3, r1
 8014832:	781b      	ldrb	r3, [r3, #0]
 8014834:	061b      	lsls	r3, r3, #24
 8014836:	431a      	orrs	r2, r3
 8014838:	687b      	ldr	r3, [r7, #4]
 801483a:	62da      	str	r2, [r3, #44]	@ 0x2c

    return LORAMAC_PARSER_SUCCESS;
 801483c:	2300      	movs	r3, #0
}
 801483e:	4618      	mov	r0, r3
 8014840:	3710      	adds	r7, #16
 8014842:	46bd      	mov	sp, r7
 8014844:	bd80      	pop	{r7, pc}

08014846 <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8014846:	b580      	push	{r7, lr}
 8014848:	b084      	sub	sp, #16
 801484a:	af00      	add	r7, sp, #0
 801484c:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 801484e:	687b      	ldr	r3, [r7, #4]
 8014850:	2b00      	cmp	r3, #0
 8014852:	d003      	beq.n	801485c <LoRaMacSerializerJoinRequest+0x16>
 8014854:	687b      	ldr	r3, [r7, #4]
 8014856:	681b      	ldr	r3, [r3, #0]
 8014858:	2b00      	cmp	r3, #0
 801485a:	d101      	bne.n	8014860 <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 801485c:	2301      	movs	r3, #1
 801485e:	e070      	b.n	8014942 <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 8014860:	2300      	movs	r3, #0
 8014862:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	791b      	ldrb	r3, [r3, #4]
 8014868:	2b16      	cmp	r3, #22
 801486a:	d801      	bhi.n	8014870 <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 801486c:	2302      	movs	r3, #2
 801486e:	e068      	b.n	8014942 <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8014870:	687b      	ldr	r3, [r7, #4]
 8014872:	681a      	ldr	r2, [r3, #0]
 8014874:	89fb      	ldrh	r3, [r7, #14]
 8014876:	1c59      	adds	r1, r3, #1
 8014878:	81f9      	strh	r1, [r7, #14]
 801487a:	4413      	add	r3, r2
 801487c:	687a      	ldr	r2, [r7, #4]
 801487e:	7952      	ldrb	r2, [r2, #5]
 8014880:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8014882:	687b      	ldr	r3, [r7, #4]
 8014884:	681a      	ldr	r2, [r3, #0]
 8014886:	89fb      	ldrh	r3, [r7, #14]
 8014888:	18d0      	adds	r0, r2, r3
 801488a:	687b      	ldr	r3, [r7, #4]
 801488c:	3306      	adds	r3, #6
 801488e:	2208      	movs	r2, #8
 8014890:	4619      	mov	r1, r3
 8014892:	f002 fc1b 	bl	80170cc <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 8014896:	89fb      	ldrh	r3, [r7, #14]
 8014898:	3308      	adds	r3, #8
 801489a:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	681a      	ldr	r2, [r3, #0]
 80148a0:	89fb      	ldrh	r3, [r7, #14]
 80148a2:	18d0      	adds	r0, r2, r3
 80148a4:	687b      	ldr	r3, [r7, #4]
 80148a6:	330e      	adds	r3, #14
 80148a8:	2208      	movs	r2, #8
 80148aa:	4619      	mov	r1, r3
 80148ac:	f002 fc0e 	bl	80170cc <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 80148b0:	89fb      	ldrh	r3, [r7, #14]
 80148b2:	3308      	adds	r3, #8
 80148b4:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 80148b6:	687b      	ldr	r3, [r7, #4]
 80148b8:	8ad9      	ldrh	r1, [r3, #22]
 80148ba:	687b      	ldr	r3, [r7, #4]
 80148bc:	681a      	ldr	r2, [r3, #0]
 80148be:	89fb      	ldrh	r3, [r7, #14]
 80148c0:	1c58      	adds	r0, r3, #1
 80148c2:	81f8      	strh	r0, [r7, #14]
 80148c4:	4413      	add	r3, r2
 80148c6:	b2ca      	uxtb	r2, r1
 80148c8:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 80148ca:	687b      	ldr	r3, [r7, #4]
 80148cc:	8adb      	ldrh	r3, [r3, #22]
 80148ce:	0a1b      	lsrs	r3, r3, #8
 80148d0:	b299      	uxth	r1, r3
 80148d2:	687b      	ldr	r3, [r7, #4]
 80148d4:	681a      	ldr	r2, [r3, #0]
 80148d6:	89fb      	ldrh	r3, [r7, #14]
 80148d8:	1c58      	adds	r0, r3, #1
 80148da:	81f8      	strh	r0, [r7, #14]
 80148dc:	4413      	add	r3, r2
 80148de:	b2ca      	uxtb	r2, r1
 80148e0:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 80148e2:	687b      	ldr	r3, [r7, #4]
 80148e4:	6999      	ldr	r1, [r3, #24]
 80148e6:	687b      	ldr	r3, [r7, #4]
 80148e8:	681a      	ldr	r2, [r3, #0]
 80148ea:	89fb      	ldrh	r3, [r7, #14]
 80148ec:	1c58      	adds	r0, r3, #1
 80148ee:	81f8      	strh	r0, [r7, #14]
 80148f0:	4413      	add	r3, r2
 80148f2:	b2ca      	uxtb	r2, r1
 80148f4:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 80148f6:	687b      	ldr	r3, [r7, #4]
 80148f8:	699b      	ldr	r3, [r3, #24]
 80148fa:	0a19      	lsrs	r1, r3, #8
 80148fc:	687b      	ldr	r3, [r7, #4]
 80148fe:	681a      	ldr	r2, [r3, #0]
 8014900:	89fb      	ldrh	r3, [r7, #14]
 8014902:	1c58      	adds	r0, r3, #1
 8014904:	81f8      	strh	r0, [r7, #14]
 8014906:	4413      	add	r3, r2
 8014908:	b2ca      	uxtb	r2, r1
 801490a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 801490c:	687b      	ldr	r3, [r7, #4]
 801490e:	699b      	ldr	r3, [r3, #24]
 8014910:	0c19      	lsrs	r1, r3, #16
 8014912:	687b      	ldr	r3, [r7, #4]
 8014914:	681a      	ldr	r2, [r3, #0]
 8014916:	89fb      	ldrh	r3, [r7, #14]
 8014918:	1c58      	adds	r0, r3, #1
 801491a:	81f8      	strh	r0, [r7, #14]
 801491c:	4413      	add	r3, r2
 801491e:	b2ca      	uxtb	r2, r1
 8014920:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8014922:	687b      	ldr	r3, [r7, #4]
 8014924:	699b      	ldr	r3, [r3, #24]
 8014926:	0e19      	lsrs	r1, r3, #24
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	681a      	ldr	r2, [r3, #0]
 801492c:	89fb      	ldrh	r3, [r7, #14]
 801492e:	1c58      	adds	r0, r3, #1
 8014930:	81f8      	strh	r0, [r7, #14]
 8014932:	4413      	add	r3, r2
 8014934:	b2ca      	uxtb	r2, r1
 8014936:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8014938:	89fb      	ldrh	r3, [r7, #14]
 801493a:	b2da      	uxtb	r2, r3
 801493c:	687b      	ldr	r3, [r7, #4]
 801493e:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8014940:	2300      	movs	r3, #0
}
 8014942:	4618      	mov	r0, r3
 8014944:	3710      	adds	r7, #16
 8014946:	46bd      	mov	sp, r7
 8014948:	bd80      	pop	{r7, pc}

0801494a <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 801494a:	b580      	push	{r7, lr}
 801494c:	b084      	sub	sp, #16
 801494e:	af00      	add	r7, sp, #0
 8014950:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8014952:	687b      	ldr	r3, [r7, #4]
 8014954:	2b00      	cmp	r3, #0
 8014956:	d003      	beq.n	8014960 <LoRaMacSerializerData+0x16>
 8014958:	687b      	ldr	r3, [r7, #4]
 801495a:	681b      	ldr	r3, [r3, #0]
 801495c:	2b00      	cmp	r3, #0
 801495e:	d101      	bne.n	8014964 <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8014960:	2301      	movs	r3, #1
 8014962:	e0e3      	b.n	8014b2c <LoRaMacSerializerData+0x1e2>
    }

    uint16_t bufItr = 0;
 8014964:	2300      	movs	r3, #0
 8014966:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 8014968:	2308      	movs	r3, #8
 801496a:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 801496c:	687b      	ldr	r3, [r7, #4]
 801496e:	7b1b      	ldrb	r3, [r3, #12]
 8014970:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8014974:	b2db      	uxtb	r3, r3
 8014976:	461a      	mov	r2, r3
 8014978:	89bb      	ldrh	r3, [r7, #12]
 801497a:	4413      	add	r3, r2
 801497c:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 801497e:	687b      	ldr	r3, [r7, #4]
 8014980:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014984:	2b00      	cmp	r3, #0
 8014986:	d002      	beq.n	801498e <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 8014988:	89bb      	ldrh	r3, [r7, #12]
 801498a:	3301      	adds	r3, #1
 801498c:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 801498e:	687b      	ldr	r3, [r7, #4]
 8014990:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014994:	461a      	mov	r2, r3
 8014996:	89bb      	ldrh	r3, [r7, #12]
 8014998:	4413      	add	r3, r2
 801499a:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 801499c:	89bb      	ldrh	r3, [r7, #12]
 801499e:	3304      	adds	r3, #4
 80149a0:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 80149a2:	687b      	ldr	r3, [r7, #4]
 80149a4:	791b      	ldrb	r3, [r3, #4]
 80149a6:	461a      	mov	r2, r3
 80149a8:	89bb      	ldrh	r3, [r7, #12]
 80149aa:	4293      	cmp	r3, r2
 80149ac:	d901      	bls.n	80149b2 <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 80149ae:	2302      	movs	r3, #2
 80149b0:	e0bc      	b.n	8014b2c <LoRaMacSerializerData+0x1e2>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 80149b2:	687b      	ldr	r3, [r7, #4]
 80149b4:	681a      	ldr	r2, [r3, #0]
 80149b6:	89fb      	ldrh	r3, [r7, #14]
 80149b8:	1c59      	adds	r1, r3, #1
 80149ba:	81f9      	strh	r1, [r7, #14]
 80149bc:	4413      	add	r3, r2
 80149be:	687a      	ldr	r2, [r7, #4]
 80149c0:	7952      	ldrb	r2, [r2, #5]
 80149c2:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 80149c4:	687b      	ldr	r3, [r7, #4]
 80149c6:	6899      	ldr	r1, [r3, #8]
 80149c8:	687b      	ldr	r3, [r7, #4]
 80149ca:	681a      	ldr	r2, [r3, #0]
 80149cc:	89fb      	ldrh	r3, [r7, #14]
 80149ce:	1c58      	adds	r0, r3, #1
 80149d0:	81f8      	strh	r0, [r7, #14]
 80149d2:	4413      	add	r3, r2
 80149d4:	b2ca      	uxtb	r2, r1
 80149d6:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 80149d8:	687b      	ldr	r3, [r7, #4]
 80149da:	689b      	ldr	r3, [r3, #8]
 80149dc:	0a19      	lsrs	r1, r3, #8
 80149de:	687b      	ldr	r3, [r7, #4]
 80149e0:	681a      	ldr	r2, [r3, #0]
 80149e2:	89fb      	ldrh	r3, [r7, #14]
 80149e4:	1c58      	adds	r0, r3, #1
 80149e6:	81f8      	strh	r0, [r7, #14]
 80149e8:	4413      	add	r3, r2
 80149ea:	b2ca      	uxtb	r2, r1
 80149ec:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 80149ee:	687b      	ldr	r3, [r7, #4]
 80149f0:	689b      	ldr	r3, [r3, #8]
 80149f2:	0c19      	lsrs	r1, r3, #16
 80149f4:	687b      	ldr	r3, [r7, #4]
 80149f6:	681a      	ldr	r2, [r3, #0]
 80149f8:	89fb      	ldrh	r3, [r7, #14]
 80149fa:	1c58      	adds	r0, r3, #1
 80149fc:	81f8      	strh	r0, [r7, #14]
 80149fe:	4413      	add	r3, r2
 8014a00:	b2ca      	uxtb	r2, r1
 8014a02:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 8014a04:	687b      	ldr	r3, [r7, #4]
 8014a06:	689b      	ldr	r3, [r3, #8]
 8014a08:	0e19      	lsrs	r1, r3, #24
 8014a0a:	687b      	ldr	r3, [r7, #4]
 8014a0c:	681a      	ldr	r2, [r3, #0]
 8014a0e:	89fb      	ldrh	r3, [r7, #14]
 8014a10:	1c58      	adds	r0, r3, #1
 8014a12:	81f8      	strh	r0, [r7, #14]
 8014a14:	4413      	add	r3, r2
 8014a16:	b2ca      	uxtb	r2, r1
 8014a18:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 8014a1a:	687b      	ldr	r3, [r7, #4]
 8014a1c:	681a      	ldr	r2, [r3, #0]
 8014a1e:	89fb      	ldrh	r3, [r7, #14]
 8014a20:	1c59      	adds	r1, r3, #1
 8014a22:	81f9      	strh	r1, [r7, #14]
 8014a24:	4413      	add	r3, r2
 8014a26:	687a      	ldr	r2, [r7, #4]
 8014a28:	7b12      	ldrb	r2, [r2, #12]
 8014a2a:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 8014a2c:	687b      	ldr	r3, [r7, #4]
 8014a2e:	89d9      	ldrh	r1, [r3, #14]
 8014a30:	687b      	ldr	r3, [r7, #4]
 8014a32:	681a      	ldr	r2, [r3, #0]
 8014a34:	89fb      	ldrh	r3, [r7, #14]
 8014a36:	1c58      	adds	r0, r3, #1
 8014a38:	81f8      	strh	r0, [r7, #14]
 8014a3a:	4413      	add	r3, r2
 8014a3c:	b2ca      	uxtb	r2, r1
 8014a3e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 8014a40:	687b      	ldr	r3, [r7, #4]
 8014a42:	89db      	ldrh	r3, [r3, #14]
 8014a44:	0a1b      	lsrs	r3, r3, #8
 8014a46:	b299      	uxth	r1, r3
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	681a      	ldr	r2, [r3, #0]
 8014a4c:	89fb      	ldrh	r3, [r7, #14]
 8014a4e:	1c58      	adds	r0, r3, #1
 8014a50:	81f8      	strh	r0, [r7, #14]
 8014a52:	4413      	add	r3, r2
 8014a54:	b2ca      	uxtb	r2, r1
 8014a56:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8014a58:	687b      	ldr	r3, [r7, #4]
 8014a5a:	681a      	ldr	r2, [r3, #0]
 8014a5c:	89fb      	ldrh	r3, [r7, #14]
 8014a5e:	18d0      	adds	r0, r2, r3
 8014a60:	687b      	ldr	r3, [r7, #4]
 8014a62:	f103 0110 	add.w	r1, r3, #16
 8014a66:	687b      	ldr	r3, [r7, #4]
 8014a68:	7b1b      	ldrb	r3, [r3, #12]
 8014a6a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8014a6e:	b2db      	uxtb	r3, r3
 8014a70:	461a      	mov	r2, r3
 8014a72:	f002 fb10 	bl	8017096 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8014a76:	687b      	ldr	r3, [r7, #4]
 8014a78:	7b1b      	ldrb	r3, [r3, #12]
 8014a7a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8014a7e:	b2db      	uxtb	r3, r3
 8014a80:	461a      	mov	r2, r3
 8014a82:	89fb      	ldrh	r3, [r7, #14]
 8014a84:	4413      	add	r3, r2
 8014a86:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014a8e:	2b00      	cmp	r3, #0
 8014a90:	d009      	beq.n	8014aa6 <LoRaMacSerializerData+0x15c>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 8014a92:	687b      	ldr	r3, [r7, #4]
 8014a94:	681a      	ldr	r2, [r3, #0]
 8014a96:	89fb      	ldrh	r3, [r7, #14]
 8014a98:	1c59      	adds	r1, r3, #1
 8014a9a:	81f9      	strh	r1, [r7, #14]
 8014a9c:	4413      	add	r3, r2
 8014a9e:	687a      	ldr	r2, [r7, #4]
 8014aa0:	f892 2020 	ldrb.w	r2, [r2, #32]
 8014aa4:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 8014aa6:	687b      	ldr	r3, [r7, #4]
 8014aa8:	681a      	ldr	r2, [r3, #0]
 8014aaa:	89fb      	ldrh	r3, [r7, #14]
 8014aac:	18d0      	adds	r0, r2, r3
 8014aae:	687b      	ldr	r3, [r7, #4]
 8014ab0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8014ab2:	687b      	ldr	r3, [r7, #4]
 8014ab4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014ab8:	461a      	mov	r2, r3
 8014aba:	f002 faec 	bl	8017096 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8014abe:	687b      	ldr	r3, [r7, #4]
 8014ac0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014ac4:	461a      	mov	r2, r3
 8014ac6:	89fb      	ldrh	r3, [r7, #14]
 8014ac8:	4413      	add	r3, r2
 8014aca:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8014acc:	687b      	ldr	r3, [r7, #4]
 8014ace:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8014ad0:	687b      	ldr	r3, [r7, #4]
 8014ad2:	681a      	ldr	r2, [r3, #0]
 8014ad4:	89fb      	ldrh	r3, [r7, #14]
 8014ad6:	1c58      	adds	r0, r3, #1
 8014ad8:	81f8      	strh	r0, [r7, #14]
 8014ada:	4413      	add	r3, r2
 8014adc:	b2ca      	uxtb	r2, r1
 8014ade:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8014ae0:	687b      	ldr	r3, [r7, #4]
 8014ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014ae4:	0a19      	lsrs	r1, r3, #8
 8014ae6:	687b      	ldr	r3, [r7, #4]
 8014ae8:	681a      	ldr	r2, [r3, #0]
 8014aea:	89fb      	ldrh	r3, [r7, #14]
 8014aec:	1c58      	adds	r0, r3, #1
 8014aee:	81f8      	strh	r0, [r7, #14]
 8014af0:	4413      	add	r3, r2
 8014af2:	b2ca      	uxtb	r2, r1
 8014af4:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8014af6:	687b      	ldr	r3, [r7, #4]
 8014af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014afa:	0c19      	lsrs	r1, r3, #16
 8014afc:	687b      	ldr	r3, [r7, #4]
 8014afe:	681a      	ldr	r2, [r3, #0]
 8014b00:	89fb      	ldrh	r3, [r7, #14]
 8014b02:	1c58      	adds	r0, r3, #1
 8014b04:	81f8      	strh	r0, [r7, #14]
 8014b06:	4413      	add	r3, r2
 8014b08:	b2ca      	uxtb	r2, r1
 8014b0a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8014b0c:	687b      	ldr	r3, [r7, #4]
 8014b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014b10:	0e19      	lsrs	r1, r3, #24
 8014b12:	687b      	ldr	r3, [r7, #4]
 8014b14:	681a      	ldr	r2, [r3, #0]
 8014b16:	89fb      	ldrh	r3, [r7, #14]
 8014b18:	1c58      	adds	r0, r3, #1
 8014b1a:	81f8      	strh	r0, [r7, #14]
 8014b1c:	4413      	add	r3, r2
 8014b1e:	b2ca      	uxtb	r2, r1
 8014b20:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8014b22:	89fb      	ldrh	r3, [r7, #14]
 8014b24:	b2da      	uxtb	r2, r3
 8014b26:	687b      	ldr	r3, [r7, #4]
 8014b28:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8014b2a:	2300      	movs	r3, #0
}
 8014b2c:	4618      	mov	r0, r3
 8014b2e:	3710      	adds	r7, #16
 8014b30:	46bd      	mov	sp, r7
 8014b32:	bd80      	pop	{r7, pc}

08014b34 <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 8014b34:	b480      	push	{r7}
 8014b36:	b083      	sub	sp, #12
 8014b38:	af00      	add	r7, sp, #0
 8014b3a:	4603      	mov	r3, r0
 8014b3c:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014b3e:	79fb      	ldrb	r3, [r7, #7]
 8014b40:	2b00      	cmp	r3, #0
 8014b42:	d101      	bne.n	8014b48 <RegionIsActive+0x14>
    {
        AS923_IS_ACTIVE( );
 8014b44:	2301      	movs	r3, #1
 8014b46:	e000      	b.n	8014b4a <RegionIsActive+0x16>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 8014b48:	2300      	movs	r3, #0
        }
    }
}
 8014b4a:	4618      	mov	r0, r3
 8014b4c:	370c      	adds	r7, #12
 8014b4e:	46bd      	mov	sp, r7
 8014b50:	bc80      	pop	{r7}
 8014b52:	4770      	bx	lr

08014b54 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 8014b54:	b580      	push	{r7, lr}
 8014b56:	b084      	sub	sp, #16
 8014b58:	af00      	add	r7, sp, #0
 8014b5a:	4603      	mov	r3, r0
 8014b5c:	6039      	str	r1, [r7, #0]
 8014b5e:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 8014b60:	2300      	movs	r3, #0
 8014b62:	60bb      	str	r3, [r7, #8]
    switch( region )
 8014b64:	79fb      	ldrb	r3, [r7, #7]
 8014b66:	2b00      	cmp	r3, #0
 8014b68:	d105      	bne.n	8014b76 <RegionGetPhyParam+0x22>
    {
        AS923_GET_PHY_PARAM( );
 8014b6a:	6838      	ldr	r0, [r7, #0]
 8014b6c:	f000 f9ec 	bl	8014f48 <RegionAS923GetPhyParam>
 8014b70:	4603      	mov	r3, r0
 8014b72:	60fb      	str	r3, [r7, #12]
 8014b74:	e001      	b.n	8014b7a <RegionGetPhyParam+0x26>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 8014b76:	68bb      	ldr	r3, [r7, #8]
 8014b78:	60fb      	str	r3, [r7, #12]
        }
    }
}
 8014b7a:	68fb      	ldr	r3, [r7, #12]
 8014b7c:	4618      	mov	r0, r3
 8014b7e:	3710      	adds	r7, #16
 8014b80:	46bd      	mov	sp, r7
 8014b82:	bd80      	pop	{r7, pc}

08014b84 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 8014b84:	b580      	push	{r7, lr}
 8014b86:	b082      	sub	sp, #8
 8014b88:	af00      	add	r7, sp, #0
 8014b8a:	4603      	mov	r3, r0
 8014b8c:	6039      	str	r1, [r7, #0]
 8014b8e:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014b90:	79fb      	ldrb	r3, [r7, #7]
 8014b92:	2b00      	cmp	r3, #0
 8014b94:	d103      	bne.n	8014b9e <RegionSetBandTxDone+0x1a>
    {
        AS923_SET_BAND_TX_DONE( );
 8014b96:	6838      	ldr	r0, [r7, #0]
 8014b98:	f000 fb4c 	bl	8015234 <RegionAS923SetBandTxDone>
 8014b9c:	e000      	b.n	8014ba0 <RegionSetBandTxDone+0x1c>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 8014b9e:	bf00      	nop
        }
    }
}
 8014ba0:	3708      	adds	r7, #8
 8014ba2:	46bd      	mov	sp, r7
 8014ba4:	bd80      	pop	{r7, pc}

08014ba6 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 8014ba6:	b580      	push	{r7, lr}
 8014ba8:	b082      	sub	sp, #8
 8014baa:	af00      	add	r7, sp, #0
 8014bac:	4603      	mov	r3, r0
 8014bae:	6039      	str	r1, [r7, #0]
 8014bb0:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014bb2:	79fb      	ldrb	r3, [r7, #7]
 8014bb4:	2b00      	cmp	r3, #0
 8014bb6:	d103      	bne.n	8014bc0 <RegionInitDefaults+0x1a>
    {
        AS923_INIT_DEFAULTS( );
 8014bb8:	6838      	ldr	r0, [r7, #0]
 8014bba:	f000 fb67 	bl	801528c <RegionAS923InitDefaults>
 8014bbe:	e000      	b.n	8014bc2 <RegionInitDefaults+0x1c>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 8014bc0:	bf00      	nop
        }
    }
}
 8014bc2:	bf00      	nop
 8014bc4:	3708      	adds	r7, #8
 8014bc6:	46bd      	mov	sp, r7
 8014bc8:	bd80      	pop	{r7, pc}

08014bca <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8014bca:	b580      	push	{r7, lr}
 8014bcc:	b082      	sub	sp, #8
 8014bce:	af00      	add	r7, sp, #0
 8014bd0:	4603      	mov	r3, r0
 8014bd2:	6039      	str	r1, [r7, #0]
 8014bd4:	71fb      	strb	r3, [r7, #7]
 8014bd6:	4613      	mov	r3, r2
 8014bd8:	71bb      	strb	r3, [r7, #6]
    switch( region )
 8014bda:	79fb      	ldrb	r3, [r7, #7]
 8014bdc:	2b00      	cmp	r3, #0
 8014bde:	d106      	bne.n	8014bee <RegionVerify+0x24>
    {
        AS923_VERIFY( );
 8014be0:	79bb      	ldrb	r3, [r7, #6]
 8014be2:	4619      	mov	r1, r3
 8014be4:	6838      	ldr	r0, [r7, #0]
 8014be6:	f000 fbe3 	bl	80153b0 <RegionAS923Verify>
 8014bea:	4603      	mov	r3, r0
 8014bec:	e000      	b.n	8014bf0 <RegionVerify+0x26>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 8014bee:	2300      	movs	r3, #0
        }
    }
}
 8014bf0:	4618      	mov	r0, r3
 8014bf2:	3708      	adds	r7, #8
 8014bf4:	46bd      	mov	sp, r7
 8014bf6:	bd80      	pop	{r7, pc}

08014bf8 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 8014bf8:	b580      	push	{r7, lr}
 8014bfa:	b082      	sub	sp, #8
 8014bfc:	af00      	add	r7, sp, #0
 8014bfe:	4603      	mov	r3, r0
 8014c00:	6039      	str	r1, [r7, #0]
 8014c02:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014c04:	79fb      	ldrb	r3, [r7, #7]
 8014c06:	2b00      	cmp	r3, #0
 8014c08:	d103      	bne.n	8014c12 <RegionApplyCFList+0x1a>
    {
        AS923_APPLY_CF_LIST( );
 8014c0a:	6838      	ldr	r0, [r7, #0]
 8014c0c:	f000 fc6e 	bl	80154ec <RegionAS923ApplyCFList>
 8014c10:	e000      	b.n	8014c14 <RegionApplyCFList+0x1c>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 8014c12:	bf00      	nop
        }
    }
}
 8014c14:	bf00      	nop
 8014c16:	3708      	adds	r7, #8
 8014c18:	46bd      	mov	sp, r7
 8014c1a:	bd80      	pop	{r7, pc}

08014c1c <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 8014c1c:	b580      	push	{r7, lr}
 8014c1e:	b082      	sub	sp, #8
 8014c20:	af00      	add	r7, sp, #0
 8014c22:	4603      	mov	r3, r0
 8014c24:	6039      	str	r1, [r7, #0]
 8014c26:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014c28:	79fb      	ldrb	r3, [r7, #7]
 8014c2a:	2b00      	cmp	r3, #0
 8014c2c:	d104      	bne.n	8014c38 <RegionChanMaskSet+0x1c>
    {
        AS923_CHAN_MASK_SET( );
 8014c2e:	6838      	ldr	r0, [r7, #0]
 8014c30:	f000 fcd0 	bl	80155d4 <RegionAS923ChanMaskSet>
 8014c34:	4603      	mov	r3, r0
 8014c36:	e000      	b.n	8014c3a <RegionChanMaskSet+0x1e>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 8014c38:	2300      	movs	r3, #0
        }
    }
}
 8014c3a:	4618      	mov	r0, r3
 8014c3c:	3708      	adds	r7, #8
 8014c3e:	46bd      	mov	sp, r7
 8014c40:	bd80      	pop	{r7, pc}

08014c42 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8014c42:	b580      	push	{r7, lr}
 8014c44:	b082      	sub	sp, #8
 8014c46:	af00      	add	r7, sp, #0
 8014c48:	603b      	str	r3, [r7, #0]
 8014c4a:	4603      	mov	r3, r0
 8014c4c:	71fb      	strb	r3, [r7, #7]
 8014c4e:	460b      	mov	r3, r1
 8014c50:	71bb      	strb	r3, [r7, #6]
 8014c52:	4613      	mov	r3, r2
 8014c54:	717b      	strb	r3, [r7, #5]
    switch( region )
 8014c56:	79fb      	ldrb	r3, [r7, #7]
 8014c58:	2b00      	cmp	r3, #0
 8014c5a:	d107      	bne.n	8014c6c <RegionComputeRxWindowParameters+0x2a>
    {
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
 8014c5c:	7979      	ldrb	r1, [r7, #5]
 8014c5e:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8014c62:	693b      	ldr	r3, [r7, #16]
 8014c64:	683a      	ldr	r2, [r7, #0]
 8014c66:	f000 fcdf 	bl	8015628 <RegionAS923ComputeRxWindowParameters>
 8014c6a:	e000      	b.n	8014c6e <RegionComputeRxWindowParameters+0x2c>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 8014c6c:	bf00      	nop
        }
    }
}
 8014c6e:	bf00      	nop
 8014c70:	3708      	adds	r7, #8
 8014c72:	46bd      	mov	sp, r7
 8014c74:	bd80      	pop	{r7, pc}

08014c76 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8014c76:	b580      	push	{r7, lr}
 8014c78:	b084      	sub	sp, #16
 8014c7a:	af00      	add	r7, sp, #0
 8014c7c:	4603      	mov	r3, r0
 8014c7e:	60b9      	str	r1, [r7, #8]
 8014c80:	607a      	str	r2, [r7, #4]
 8014c82:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8014c84:	7bfb      	ldrb	r3, [r7, #15]
 8014c86:	2b00      	cmp	r3, #0
 8014c88:	d105      	bne.n	8014c96 <RegionRxConfig+0x20>
    {
        AS923_RX_CONFIG( );
 8014c8a:	6879      	ldr	r1, [r7, #4]
 8014c8c:	68b8      	ldr	r0, [r7, #8]
 8014c8e:	f000 fd25 	bl	80156dc <RegionAS923RxConfig>
 8014c92:	4603      	mov	r3, r0
 8014c94:	e000      	b.n	8014c98 <RegionRxConfig+0x22>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 8014c96:	2300      	movs	r3, #0
        }
    }
}
 8014c98:	4618      	mov	r0, r3
 8014c9a:	3710      	adds	r7, #16
 8014c9c:	46bd      	mov	sp, r7
 8014c9e:	bd80      	pop	{r7, pc}

08014ca0 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8014ca0:	b580      	push	{r7, lr}
 8014ca2:	b084      	sub	sp, #16
 8014ca4:	af00      	add	r7, sp, #0
 8014ca6:	60b9      	str	r1, [r7, #8]
 8014ca8:	607a      	str	r2, [r7, #4]
 8014caa:	603b      	str	r3, [r7, #0]
 8014cac:	4603      	mov	r3, r0
 8014cae:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8014cb0:	7bfb      	ldrb	r3, [r7, #15]
 8014cb2:	2b00      	cmp	r3, #0
 8014cb4:	d106      	bne.n	8014cc4 <RegionTxConfig+0x24>
    {
        AS923_TX_CONFIG( );
 8014cb6:	683a      	ldr	r2, [r7, #0]
 8014cb8:	6879      	ldr	r1, [r7, #4]
 8014cba:	68b8      	ldr	r0, [r7, #8]
 8014cbc:	f000 fdde 	bl	801587c <RegionAS923TxConfig>
 8014cc0:	4603      	mov	r3, r0
 8014cc2:	e000      	b.n	8014cc6 <RegionTxConfig+0x26>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 8014cc4:	2300      	movs	r3, #0
        }
    }
}
 8014cc6:	4618      	mov	r0, r3
 8014cc8:	3710      	adds	r7, #16
 8014cca:	46bd      	mov	sp, r7
 8014ccc:	bd80      	pop	{r7, pc}

08014cce <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8014cce:	b580      	push	{r7, lr}
 8014cd0:	b086      	sub	sp, #24
 8014cd2:	af02      	add	r7, sp, #8
 8014cd4:	60b9      	str	r1, [r7, #8]
 8014cd6:	607a      	str	r2, [r7, #4]
 8014cd8:	603b      	str	r3, [r7, #0]
 8014cda:	4603      	mov	r3, r0
 8014cdc:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8014cde:	7bfb      	ldrb	r3, [r7, #15]
 8014ce0:	2b00      	cmp	r3, #0
 8014ce2:	d109      	bne.n	8014cf8 <RegionLinkAdrReq+0x2a>
    {
        AS923_LINK_ADR_REQ( );
 8014ce4:	69fb      	ldr	r3, [r7, #28]
 8014ce6:	9300      	str	r3, [sp, #0]
 8014ce8:	69bb      	ldr	r3, [r7, #24]
 8014cea:	683a      	ldr	r2, [r7, #0]
 8014cec:	6879      	ldr	r1, [r7, #4]
 8014cee:	68b8      	ldr	r0, [r7, #8]
 8014cf0:	f000 fe94 	bl	8015a1c <RegionAS923LinkAdrReq>
 8014cf4:	4603      	mov	r3, r0
 8014cf6:	e000      	b.n	8014cfa <RegionLinkAdrReq+0x2c>
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 8014cf8:	2300      	movs	r3, #0
        }
    }
}
 8014cfa:	4618      	mov	r0, r3
 8014cfc:	3710      	adds	r7, #16
 8014cfe:	46bd      	mov	sp, r7
 8014d00:	bd80      	pop	{r7, pc}

08014d02 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 8014d02:	b580      	push	{r7, lr}
 8014d04:	b082      	sub	sp, #8
 8014d06:	af00      	add	r7, sp, #0
 8014d08:	4603      	mov	r3, r0
 8014d0a:	6039      	str	r1, [r7, #0]
 8014d0c:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014d0e:	79fb      	ldrb	r3, [r7, #7]
 8014d10:	2b00      	cmp	r3, #0
 8014d12:	d104      	bne.n	8014d1e <RegionRxParamSetupReq+0x1c>
    {
        AS923_RX_PARAM_SETUP_REQ( );
 8014d14:	6838      	ldr	r0, [r7, #0]
 8014d16:	f000 ffa3 	bl	8015c60 <RegionAS923RxParamSetupReq>
 8014d1a:	4603      	mov	r3, r0
 8014d1c:	e000      	b.n	8014d20 <RegionRxParamSetupReq+0x1e>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8014d1e:	2300      	movs	r3, #0
        }
    }
}
 8014d20:	4618      	mov	r0, r3
 8014d22:	3708      	adds	r7, #8
 8014d24:	46bd      	mov	sp, r7
 8014d26:	bd80      	pop	{r7, pc}

08014d28 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 8014d28:	b580      	push	{r7, lr}
 8014d2a:	b082      	sub	sp, #8
 8014d2c:	af00      	add	r7, sp, #0
 8014d2e:	4603      	mov	r3, r0
 8014d30:	6039      	str	r1, [r7, #0]
 8014d32:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014d34:	79fb      	ldrb	r3, [r7, #7]
 8014d36:	2b00      	cmp	r3, #0
 8014d38:	d104      	bne.n	8014d44 <RegionNewChannelReq+0x1c>
    {
        AS923_NEW_CHANNEL_REQ( );
 8014d3a:	6838      	ldr	r0, [r7, #0]
 8014d3c:	f000 ffc8 	bl	8015cd0 <RegionAS923NewChannelReq>
 8014d40:	4603      	mov	r3, r0
 8014d42:	e000      	b.n	8014d46 <RegionNewChannelReq+0x1e>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 8014d44:	2300      	movs	r3, #0
        }
    }
}
 8014d46:	4618      	mov	r0, r3
 8014d48:	3708      	adds	r7, #8
 8014d4a:	46bd      	mov	sp, r7
 8014d4c:	bd80      	pop	{r7, pc}

08014d4e <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 8014d4e:	b580      	push	{r7, lr}
 8014d50:	b082      	sub	sp, #8
 8014d52:	af00      	add	r7, sp, #0
 8014d54:	4603      	mov	r3, r0
 8014d56:	6039      	str	r1, [r7, #0]
 8014d58:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014d5a:	79fb      	ldrb	r3, [r7, #7]
 8014d5c:	2b00      	cmp	r3, #0
 8014d5e:	d104      	bne.n	8014d6a <RegionTxParamSetupReq+0x1c>
    {
        AS923_TX_PARAM_SETUP_REQ( );
 8014d60:	6838      	ldr	r0, [r7, #0]
 8014d62:	f001 f813 	bl	8015d8c <RegionAS923TxParamSetupReq>
 8014d66:	4603      	mov	r3, r0
 8014d68:	e000      	b.n	8014d6c <RegionTxParamSetupReq+0x1e>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8014d6a:	2300      	movs	r3, #0
        }
    }
}
 8014d6c:	4618      	mov	r0, r3
 8014d6e:	3708      	adds	r7, #8
 8014d70:	46bd      	mov	sp, r7
 8014d72:	bd80      	pop	{r7, pc}

08014d74 <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 8014d74:	b580      	push	{r7, lr}
 8014d76:	b082      	sub	sp, #8
 8014d78:	af00      	add	r7, sp, #0
 8014d7a:	4603      	mov	r3, r0
 8014d7c:	6039      	str	r1, [r7, #0]
 8014d7e:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014d80:	79fb      	ldrb	r3, [r7, #7]
 8014d82:	2b00      	cmp	r3, #0
 8014d84:	d104      	bne.n	8014d90 <RegionDlChannelReq+0x1c>
    {
        AS923_DL_CHANNEL_REQ( );
 8014d86:	6838      	ldr	r0, [r7, #0]
 8014d88:	f001 f80a 	bl	8015da0 <RegionAS923DlChannelReq>
 8014d8c:	4603      	mov	r3, r0
 8014d8e:	e000      	b.n	8014d92 <RegionDlChannelReq+0x1e>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 8014d90:	2300      	movs	r3, #0
        }
    }
}
 8014d92:	4618      	mov	r0, r3
 8014d94:	3708      	adds	r7, #8
 8014d96:	46bd      	mov	sp, r7
 8014d98:	bd80      	pop	{r7, pc}

08014d9a <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 8014d9a:	b580      	push	{r7, lr}
 8014d9c:	b082      	sub	sp, #8
 8014d9e:	af00      	add	r7, sp, #0
 8014da0:	4603      	mov	r3, r0
 8014da2:	71fb      	strb	r3, [r7, #7]
 8014da4:	460b      	mov	r3, r1
 8014da6:	71bb      	strb	r3, [r7, #6]
 8014da8:	4613      	mov	r3, r2
 8014daa:	717b      	strb	r3, [r7, #5]
    switch( region )
 8014dac:	79fb      	ldrb	r3, [r7, #7]
 8014dae:	2b00      	cmp	r3, #0
 8014db0:	d108      	bne.n	8014dc4 <RegionAlternateDr+0x2a>
    {
        AS923_ALTERNATE_DR( );
 8014db2:	797a      	ldrb	r2, [r7, #5]
 8014db4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8014db8:	4611      	mov	r1, r2
 8014dba:	4618      	mov	r0, r3
 8014dbc:	f001 f830 	bl	8015e20 <RegionAS923AlternateDr>
 8014dc0:	4603      	mov	r3, r0
 8014dc2:	e000      	b.n	8014dc6 <RegionAlternateDr+0x2c>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 8014dc4:	2300      	movs	r3, #0
        }
    }
}
 8014dc6:	4618      	mov	r0, r3
 8014dc8:	3708      	adds	r7, #8
 8014dca:	46bd      	mov	sp, r7
 8014dcc:	bd80      	pop	{r7, pc}

08014dce <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8014dce:	b580      	push	{r7, lr}
 8014dd0:	b084      	sub	sp, #16
 8014dd2:	af00      	add	r7, sp, #0
 8014dd4:	60b9      	str	r1, [r7, #8]
 8014dd6:	607a      	str	r2, [r7, #4]
 8014dd8:	603b      	str	r3, [r7, #0]
 8014dda:	4603      	mov	r3, r0
 8014ddc:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8014dde:	7bfb      	ldrb	r3, [r7, #15]
 8014de0:	2b00      	cmp	r3, #0
 8014de2:	d107      	bne.n	8014df4 <RegionNextChannel+0x26>
    {
        AS923_NEXT_CHANNEL( );
 8014de4:	69bb      	ldr	r3, [r7, #24]
 8014de6:	683a      	ldr	r2, [r7, #0]
 8014de8:	6879      	ldr	r1, [r7, #4]
 8014dea:	68b8      	ldr	r0, [r7, #8]
 8014dec:	f001 f826 	bl	8015e3c <RegionAS923NextChannel>
 8014df0:	4603      	mov	r3, r0
 8014df2:	e000      	b.n	8014df6 <RegionNextChannel+0x28>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8014df4:	2309      	movs	r3, #9
        }
    }
}
 8014df6:	4618      	mov	r0, r3
 8014df8:	3710      	adds	r7, #16
 8014dfa:	46bd      	mov	sp, r7
 8014dfc:	bd80      	pop	{r7, pc}

08014dfe <RegionApplyDrOffset>:
    }
}
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8014dfe:	b590      	push	{r4, r7, lr}
 8014e00:	b083      	sub	sp, #12
 8014e02:	af00      	add	r7, sp, #0
 8014e04:	4604      	mov	r4, r0
 8014e06:	4608      	mov	r0, r1
 8014e08:	4611      	mov	r1, r2
 8014e0a:	461a      	mov	r2, r3
 8014e0c:	4623      	mov	r3, r4
 8014e0e:	71fb      	strb	r3, [r7, #7]
 8014e10:	4603      	mov	r3, r0
 8014e12:	71bb      	strb	r3, [r7, #6]
 8014e14:	460b      	mov	r3, r1
 8014e16:	717b      	strb	r3, [r7, #5]
 8014e18:	4613      	mov	r3, r2
 8014e1a:	713b      	strb	r3, [r7, #4]
    switch( region )
 8014e1c:	79fb      	ldrb	r3, [r7, #7]
 8014e1e:	2b00      	cmp	r3, #0
 8014e20:	d109      	bne.n	8014e36 <RegionApplyDrOffset+0x38>
    {
        AS923_APPLY_DR_OFFSET( );
 8014e22:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8014e26:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8014e2a:	79bb      	ldrb	r3, [r7, #6]
 8014e2c:	4618      	mov	r0, r3
 8014e2e:	f001 f979 	bl	8016124 <RegionAS923ApplyDrOffset>
 8014e32:	4603      	mov	r3, r0
 8014e34:	e000      	b.n	8014e38 <RegionApplyDrOffset+0x3a>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 8014e36:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 8014e38:	4618      	mov	r0, r3
 8014e3a:	370c      	adds	r7, #12
 8014e3c:	46bd      	mov	sp, r7
 8014e3e:	bd90      	pop	{r4, r7, pc}

08014e40 <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 8014e40:	b480      	push	{r7}
 8014e42:	b083      	sub	sp, #12
 8014e44:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 8014e46:	4b04      	ldr	r3, [pc, #16]	@ (8014e58 <RegionGetVersion+0x18>)
 8014e48:	607b      	str	r3, [r7, #4]

    return version;
 8014e4a:	687b      	ldr	r3, [r7, #4]
}
 8014e4c:	4618      	mov	r0, r3
 8014e4e:	370c      	adds	r7, #12
 8014e50:	46bd      	mov	sp, r7
 8014e52:	bc80      	pop	{r7}
 8014e54:	4770      	bx	lr
 8014e56:	bf00      	nop
 8014e58:	02010001 	.word	0x02010001

08014e5c <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq )
{
 8014e5c:	b580      	push	{r7, lr}
 8014e5e:	b082      	sub	sp, #8
 8014e60:	af00      	add	r7, sp, #0
 8014e62:	6078      	str	r0, [r7, #4]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8014e64:	4b0d      	ldr	r3, [pc, #52]	@ (8014e9c <VerifyRfFreq+0x40>)
 8014e66:	6a1b      	ldr	r3, [r3, #32]
 8014e68:	6878      	ldr	r0, [r7, #4]
 8014e6a:	4798      	blx	r3
 8014e6c:	4603      	mov	r3, r0
 8014e6e:	f083 0301 	eor.w	r3, r3, #1
 8014e72:	b2db      	uxtb	r3, r3
 8014e74:	2b00      	cmp	r3, #0
 8014e76:	d001      	beq.n	8014e7c <VerifyRfFreq+0x20>
    {
        return false;
 8014e78:	2300      	movs	r3, #0
 8014e7a:	e00a      	b.n	8014e92 <VerifyRfFreq+0x36>
    }

    if( ( freq < AS923_MIN_RF_FREQUENCY ) || ( freq > AS923_MAX_RF_FREQUENCY ) )
 8014e7c:	687b      	ldr	r3, [r7, #4]
 8014e7e:	4a08      	ldr	r2, [pc, #32]	@ (8014ea0 <VerifyRfFreq+0x44>)
 8014e80:	4293      	cmp	r3, r2
 8014e82:	d903      	bls.n	8014e8c <VerifyRfFreq+0x30>
 8014e84:	687b      	ldr	r3, [r7, #4]
 8014e86:	4a07      	ldr	r2, [pc, #28]	@ (8014ea4 <VerifyRfFreq+0x48>)
 8014e88:	4293      	cmp	r3, r2
 8014e8a:	d901      	bls.n	8014e90 <VerifyRfFreq+0x34>
    {
        return false;
 8014e8c:	2300      	movs	r3, #0
 8014e8e:	e000      	b.n	8014e92 <VerifyRfFreq+0x36>
    }
    return true;
 8014e90:	2301      	movs	r3, #1
}
 8014e92:	4618      	mov	r0, r3
 8014e94:	3708      	adds	r7, #8
 8014e96:	46bd      	mov	sp, r7
 8014e98:	bd80      	pop	{r7, pc}
 8014e9a:	bf00      	nop
 8014e9c:	0801f57c 	.word	0x0801f57c
 8014ea0:	3689cabf 	.word	0x3689cabf
 8014ea4:	37502800 	.word	0x37502800

08014ea8 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8014ea8:	b590      	push	{r4, r7, lr}
 8014eaa:	b08b      	sub	sp, #44	@ 0x2c
 8014eac:	af04      	add	r7, sp, #16
 8014eae:	4603      	mov	r3, r0
 8014eb0:	460a      	mov	r2, r1
 8014eb2:	71fb      	strb	r3, [r7, #7]
 8014eb4:	4613      	mov	r3, r2
 8014eb6:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesAS923[datarate];
 8014eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014ebc:	4a1f      	ldr	r2, [pc, #124]	@ (8014f3c <GetTimeOnAir+0x94>)
 8014ebe:	5cd3      	ldrb	r3, [r2, r3]
 8014ec0:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsAS923 );
 8014ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014ec6:	491e      	ldr	r1, [pc, #120]	@ (8014f40 <GetTimeOnAir+0x98>)
 8014ec8:	4618      	mov	r0, r3
 8014eca:	f002 f835 	bl	8016f38 <RegionCommonGetBandwidth>
 8014ece:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 8014ed0:	2300      	movs	r3, #0
 8014ed2:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 8014ed4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014ed8:	2b07      	cmp	r3, #7
 8014eda:	d118      	bne.n	8014f0e <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 8014edc:	4b19      	ldr	r3, [pc, #100]	@ (8014f44 <GetTimeOnAir+0x9c>)
 8014ede:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8014ee0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014ee4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8014ee8:	fb02 f303 	mul.w	r3, r2, r3
 8014eec:	4619      	mov	r1, r3
 8014eee:	88bb      	ldrh	r3, [r7, #4]
 8014ef0:	b2db      	uxtb	r3, r3
 8014ef2:	2201      	movs	r2, #1
 8014ef4:	9203      	str	r2, [sp, #12]
 8014ef6:	9302      	str	r3, [sp, #8]
 8014ef8:	2300      	movs	r3, #0
 8014efa:	9301      	str	r3, [sp, #4]
 8014efc:	2305      	movs	r3, #5
 8014efe:	9300      	str	r3, [sp, #0]
 8014f00:	2300      	movs	r3, #0
 8014f02:	460a      	mov	r2, r1
 8014f04:	68f9      	ldr	r1, [r7, #12]
 8014f06:	2000      	movs	r0, #0
 8014f08:	47a0      	blx	r4
 8014f0a:	6178      	str	r0, [r7, #20]
 8014f0c:	e011      	b.n	8014f32 <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8014f0e:	4b0d      	ldr	r3, [pc, #52]	@ (8014f44 <GetTimeOnAir+0x9c>)
 8014f10:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8014f12:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8014f16:	88bb      	ldrh	r3, [r7, #4]
 8014f18:	b2db      	uxtb	r3, r3
 8014f1a:	2101      	movs	r1, #1
 8014f1c:	9103      	str	r1, [sp, #12]
 8014f1e:	9302      	str	r3, [sp, #8]
 8014f20:	2300      	movs	r3, #0
 8014f22:	9301      	str	r3, [sp, #4]
 8014f24:	2308      	movs	r3, #8
 8014f26:	9300      	str	r3, [sp, #0]
 8014f28:	2301      	movs	r3, #1
 8014f2a:	68f9      	ldr	r1, [r7, #12]
 8014f2c:	2001      	movs	r0, #1
 8014f2e:	47a0      	blx	r4
 8014f30:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 8014f32:	697b      	ldr	r3, [r7, #20]
}
 8014f34:	4618      	mov	r0, r3
 8014f36:	371c      	adds	r7, #28
 8014f38:	46bd      	mov	sp, r7
 8014f3a:	bd90      	pop	{r4, r7, pc}
 8014f3c:	0801f4bc 	.word	0x0801f4bc
 8014f40:	0801f4c4 	.word	0x0801f4c4
 8014f44:	0801f57c 	.word	0x0801f57c

08014f48 <RegionAS923GetPhyParam>:
#endif /* REGION_AS923 */

PhyParam_t RegionAS923GetPhyParam( GetPhyParams_t* getPhy )
{
 8014f48:	b580      	push	{r7, lr}
 8014f4a:	b088      	sub	sp, #32
 8014f4c:	af00      	add	r7, sp, #0
 8014f4e:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8014f50:	2300      	movs	r3, #0
 8014f52:	61bb      	str	r3, [r7, #24]

#if defined( REGION_AS923 )
    switch( getPhy->Attribute )
 8014f54:	687b      	ldr	r3, [r7, #4]
 8014f56:	781b      	ldrb	r3, [r3, #0]
 8014f58:	3b01      	subs	r3, #1
 8014f5a:	2b37      	cmp	r3, #55	@ 0x37
 8014f5c:	f200 814e 	bhi.w	80151fc <RegionAS923GetPhyParam+0x2b4>
 8014f60:	a201      	add	r2, pc, #4	@ (adr r2, 8014f68 <RegionAS923GetPhyParam+0x20>)
 8014f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014f66:	bf00      	nop
 8014f68:	08015049 	.word	0x08015049
 8014f6c:	0801505d 	.word	0x0801505d
 8014f70:	080151fd 	.word	0x080151fd
 8014f74:	080151fd 	.word	0x080151fd
 8014f78:	080151fd 	.word	0x080151fd
 8014f7c:	08015071 	.word	0x08015071
 8014f80:	080151fd 	.word	0x080151fd
 8014f84:	080150b7 	.word	0x080150b7
 8014f88:	080151fd 	.word	0x080151fd
 8014f8c:	080150bd 	.word	0x080150bd
 8014f90:	080150c3 	.word	0x080150c3
 8014f94:	080150c9 	.word	0x080150c9
 8014f98:	080150cf 	.word	0x080150cf
 8014f9c:	080150f7 	.word	0x080150f7
 8014fa0:	0801511f 	.word	0x0801511f
 8014fa4:	08015125 	.word	0x08015125
 8014fa8:	0801512d 	.word	0x0801512d
 8014fac:	08015135 	.word	0x08015135
 8014fb0:	0801513d 	.word	0x0801513d
 8014fb4:	08015145 	.word	0x08015145
 8014fb8:	0801514d 	.word	0x0801514d
 8014fbc:	08015161 	.word	0x08015161
 8014fc0:	08015167 	.word	0x08015167
 8014fc4:	0801516d 	.word	0x0801516d
 8014fc8:	08015173 	.word	0x08015173
 8014fcc:	0801517f 	.word	0x0801517f
 8014fd0:	0801518b 	.word	0x0801518b
 8014fd4:	08015191 	.word	0x08015191
 8014fd8:	08015199 	.word	0x08015199
 8014fdc:	0801519f 	.word	0x0801519f
 8014fe0:	080151a5 	.word	0x080151a5
 8014fe4:	080151ad 	.word	0x080151ad
 8014fe8:	08015077 	.word	0x08015077
 8014fec:	080151fd 	.word	0x080151fd
 8014ff0:	080151fd 	.word	0x080151fd
 8014ff4:	080151fd 	.word	0x080151fd
 8014ff8:	080151fd 	.word	0x080151fd
 8014ffc:	080151fd 	.word	0x080151fd
 8015000:	080151fd 	.word	0x080151fd
 8015004:	080151fd 	.word	0x080151fd
 8015008:	080151fd 	.word	0x080151fd
 801500c:	080151fd 	.word	0x080151fd
 8015010:	080151fd 	.word	0x080151fd
 8015014:	080151fd 	.word	0x080151fd
 8015018:	080151fd 	.word	0x080151fd
 801501c:	080151fd 	.word	0x080151fd
 8015020:	080151b3 	.word	0x080151b3
 8015024:	080151b9 	.word	0x080151b9
 8015028:	080151c7 	.word	0x080151c7
 801502c:	080151fd 	.word	0x080151fd
 8015030:	080151fd 	.word	0x080151fd
 8015034:	080151cd 	.word	0x080151cd
 8015038:	080151d3 	.word	0x080151d3
 801503c:	080151fd 	.word	0x080151fd
 8015040:	080151d9 	.word	0x080151d9
 8015044:	080151e9 	.word	0x080151e9
    {
        case PHY_MIN_RX_DR:
        {
            if( getPhy->DownlinkDwellTime == 0 )
 8015048:	687b      	ldr	r3, [r7, #4]
 801504a:	78db      	ldrb	r3, [r3, #3]
 801504c:	2b00      	cmp	r3, #0
 801504e:	d102      	bne.n	8015056 <RegionAS923GetPhyParam+0x10e>
            {
                phyParam.Value = AS923_RX_MIN_DATARATE;
 8015050:	2300      	movs	r3, #0
 8015052:	61bb      	str	r3, [r7, #24]
            }
            else
            {
                phyParam.Value = AS923_DWELL_LIMIT_DATARATE;
            }
            break;
 8015054:	e0d3      	b.n	80151fe <RegionAS923GetPhyParam+0x2b6>
                phyParam.Value = AS923_DWELL_LIMIT_DATARATE;
 8015056:	2302      	movs	r3, #2
 8015058:	61bb      	str	r3, [r7, #24]
            break;
 801505a:	e0d0      	b.n	80151fe <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_MIN_TX_DR:
        {
            if( getPhy->UplinkDwellTime == 0 )
 801505c:	687b      	ldr	r3, [r7, #4]
 801505e:	789b      	ldrb	r3, [r3, #2]
 8015060:	2b00      	cmp	r3, #0
 8015062:	d102      	bne.n	801506a <RegionAS923GetPhyParam+0x122>
            {
                phyParam.Value = AS923_TX_MIN_DATARATE;
 8015064:	2300      	movs	r3, #0
 8015066:	61bb      	str	r3, [r7, #24]
            }
            else
            {
                phyParam.Value = AS923_DWELL_LIMIT_DATARATE;
            }
            break;
 8015068:	e0c9      	b.n	80151fe <RegionAS923GetPhyParam+0x2b6>
                phyParam.Value = AS923_DWELL_LIMIT_DATARATE;
 801506a:	2302      	movs	r3, #2
 801506c:	61bb      	str	r3, [r7, #24]
            break;
 801506e:	e0c6      	b.n	80151fe <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = AS923_DEFAULT_DATARATE;
 8015070:	2302      	movs	r3, #2
 8015072:	61bb      	str	r3, [r7, #24]
            break;
 8015074:	e0c3      	b.n	80151fe <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 8015076:	687b      	ldr	r3, [r7, #4]
 8015078:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801507c:	733b      	strb	r3, [r7, #12]
 801507e:	2307      	movs	r3, #7
 8015080:	737b      	strb	r3, [r7, #13]
                .MaxDr = ( int8_t )AS923_TX_MAX_DATARATE,
                .MinDr = ( int8_t )( ( getPhy->UplinkDwellTime == 0 ) ? AS923_TX_MIN_DATARATE : AS923_DWELL_LIMIT_DATARATE ),
 8015082:	687b      	ldr	r3, [r7, #4]
 8015084:	789b      	ldrb	r3, [r3, #2]
 8015086:	2b00      	cmp	r3, #0
 8015088:	d101      	bne.n	801508e <RegionAS923GetPhyParam+0x146>
 801508a:	2300      	movs	r3, #0
 801508c:	e000      	b.n	8015090 <RegionAS923GetPhyParam+0x148>
 801508e:	2302      	movs	r3, #2
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8015090:	73bb      	strb	r3, [r7, #14]
 8015092:	2310      	movs	r3, #16
 8015094:	73fb      	strb	r3, [r7, #15]
                .NbChannels = AS923_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 8015096:	4b5d      	ldr	r3, [pc, #372]	@ (801520c <RegionAS923GetPhyParam+0x2c4>)
 8015098:	681b      	ldr	r3, [r3, #0]
 801509a:	f503 7358 	add.w	r3, r3, #864	@ 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801509e:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 80150a0:	4b5a      	ldr	r3, [pc, #360]	@ (801520c <RegionAS923GetPhyParam+0x2c4>)
 80150a2:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80150a4:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 80150a6:	f107 030c 	add.w	r3, r7, #12
 80150aa:	4618      	mov	r0, r3
 80150ac:	f001 fef1 	bl	8016e92 <RegionCommonGetNextLowerTxDr>
 80150b0:	4603      	mov	r3, r0
 80150b2:	61bb      	str	r3, [r7, #24]
            break;
 80150b4:	e0a3      	b.n	80151fe <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = AS923_MAX_TX_POWER;
 80150b6:	2300      	movs	r3, #0
 80150b8:	61bb      	str	r3, [r7, #24]
            break;
 80150ba:	e0a0      	b.n	80151fe <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = AS923_DEFAULT_TX_POWER;
 80150bc:	2300      	movs	r3, #0
 80150be:	61bb      	str	r3, [r7, #24]
            break;
 80150c0:	e09d      	b.n	80151fe <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 80150c2:	2340      	movs	r3, #64	@ 0x40
 80150c4:	61bb      	str	r3, [r7, #24]
            break;
 80150c6:	e09a      	b.n	80151fe <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 80150c8:	2320      	movs	r3, #32
 80150ca:	61bb      	str	r3, [r7, #24]
            break;
 80150cc:	e097      	b.n	80151fe <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_MAX_PAYLOAD:
        {
            if( getPhy->UplinkDwellTime == 0 )
 80150ce:	687b      	ldr	r3, [r7, #4]
 80150d0:	789b      	ldrb	r3, [r3, #2]
 80150d2:	2b00      	cmp	r3, #0
 80150d4:	d107      	bne.n	80150e6 <RegionAS923GetPhyParam+0x19e>
            {
                phyParam.Value = MaxPayloadOfDatarateDwell0AS923[getPhy->Datarate];
 80150d6:	687b      	ldr	r3, [r7, #4]
 80150d8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80150dc:	461a      	mov	r2, r3
 80150de:	4b4c      	ldr	r3, [pc, #304]	@ (8015210 <RegionAS923GetPhyParam+0x2c8>)
 80150e0:	5c9b      	ldrb	r3, [r3, r2]
 80150e2:	61bb      	str	r3, [r7, #24]
            }
            else
            {
                phyParam.Value = MaxPayloadOfDatarateDwell1AS923[getPhy->Datarate];
            }
            break;
 80150e4:	e08b      	b.n	80151fe <RegionAS923GetPhyParam+0x2b6>
                phyParam.Value = MaxPayloadOfDatarateDwell1AS923[getPhy->Datarate];
 80150e6:	687b      	ldr	r3, [r7, #4]
 80150e8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80150ec:	461a      	mov	r2, r3
 80150ee:	4b49      	ldr	r3, [pc, #292]	@ (8015214 <RegionAS923GetPhyParam+0x2cc>)
 80150f0:	5c9b      	ldrb	r3, [r3, r2]
 80150f2:	61bb      	str	r3, [r7, #24]
            break;
 80150f4:	e083      	b.n	80151fe <RegionAS923GetPhyParam+0x2b6>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            if( getPhy->UplinkDwellTime == 0 )
 80150f6:	687b      	ldr	r3, [r7, #4]
 80150f8:	789b      	ldrb	r3, [r3, #2]
 80150fa:	2b00      	cmp	r3, #0
 80150fc:	d107      	bne.n	801510e <RegionAS923GetPhyParam+0x1c6>
            {
                phyParam.Value = MaxPayloadOfDatarateRepeaterDwell0AS923[getPhy->Datarate];
 80150fe:	687b      	ldr	r3, [r7, #4]
 8015100:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015104:	461a      	mov	r2, r3
 8015106:	4b44      	ldr	r3, [pc, #272]	@ (8015218 <RegionAS923GetPhyParam+0x2d0>)
 8015108:	5c9b      	ldrb	r3, [r3, r2]
 801510a:	61bb      	str	r3, [r7, #24]
            }
            else
            {
                phyParam.Value = MaxPayloadOfDatarateDwell1AS923[getPhy->Datarate];
            }
            break;
 801510c:	e077      	b.n	80151fe <RegionAS923GetPhyParam+0x2b6>
                phyParam.Value = MaxPayloadOfDatarateDwell1AS923[getPhy->Datarate];
 801510e:	687b      	ldr	r3, [r7, #4]
 8015110:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015114:	461a      	mov	r2, r3
 8015116:	4b3f      	ldr	r3, [pc, #252]	@ (8015214 <RegionAS923GetPhyParam+0x2cc>)
 8015118:	5c9b      	ldrb	r3, [r3, r2]
 801511a:	61bb      	str	r3, [r7, #24]
            break;
 801511c:	e06f      	b.n	80151fe <RegionAS923GetPhyParam+0x2b6>
        }
        /* ST_WORKAROUND_END */
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = AS923_DUTY_CYCLE_ENABLED;
 801511e:	2300      	movs	r3, #0
 8015120:	61bb      	str	r3, [r7, #24]
            break;
 8015122:	e06c      	b.n	80151fe <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = AS923_MAX_RX_WINDOW;
 8015124:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8015128:	61bb      	str	r3, [r7, #24]
            break;
 801512a:	e068      	b.n	80151fe <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 801512c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8015130:	61bb      	str	r3, [r7, #24]
            break;
 8015132:	e064      	b.n	80151fe <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8015134:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8015138:	61bb      	str	r3, [r7, #24]
            break;
 801513a:	e060      	b.n	80151fe <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 801513c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8015140:	61bb      	str	r3, [r7, #24]
            break;
 8015142:	e05c      	b.n	80151fe <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8015144:	f241 7370 	movw	r3, #6000	@ 0x1770
 8015148:	61bb      	str	r3, [r7, #24]
            break;
 801514a:	e058      	b.n	80151fe <RegionAS923GetPhyParam+0x2b6>
            break;
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
        case PHY_RETRANSMIT_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 801514c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8015150:	4832      	ldr	r0, [pc, #200]	@ (801521c <RegionAS923GetPhyParam+0x2d4>)
 8015152:	f001 ff89 	bl	8017068 <randr>
 8015156:	4603      	mov	r3, r0
 8015158:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 801515c:	61bb      	str	r3, [r7, #24]
            break;
 801515e:	e04e      	b.n	80151fe <RegionAS923GetPhyParam+0x2b6>
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 8015160:	2300      	movs	r3, #0
 8015162:	61bb      	str	r3, [r7, #24]
            break;
 8015164:	e04b      	b.n	80151fe <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = AS923_RX_WND_2_FREQ - REGION_AS923_FREQ_OFFSET;
 8015166:	4b2e      	ldr	r3, [pc, #184]	@ (8015220 <RegionAS923GetPhyParam+0x2d8>)
 8015168:	61bb      	str	r3, [r7, #24]
            break;
 801516a:	e048      	b.n	80151fe <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = AS923_RX_WND_2_DR;
 801516c:	2302      	movs	r3, #2
 801516e:	61bb      	str	r3, [r7, #24]
            break;
 8015170:	e045      	b.n	80151fe <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8015172:	4b26      	ldr	r3, [pc, #152]	@ (801520c <RegionAS923GetPhyParam+0x2c4>)
 8015174:	681b      	ldr	r3, [r3, #0]
 8015176:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 801517a:	61bb      	str	r3, [r7, #24]
            break;
 801517c:	e03f      	b.n	80151fe <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 801517e:	4b23      	ldr	r3, [pc, #140]	@ (801520c <RegionAS923GetPhyParam+0x2c4>)
 8015180:	681b      	ldr	r3, [r3, #0]
 8015182:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 8015186:	61bb      	str	r3, [r7, #24]
            break;
 8015188:	e039      	b.n	80151fe <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = AS923_MAX_NB_CHANNELS;
 801518a:	2310      	movs	r3, #16
 801518c:	61bb      	str	r3, [r7, #24]
            break;
 801518e:	e036      	b.n	80151fe <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 8015190:	4b1e      	ldr	r3, [pc, #120]	@ (801520c <RegionAS923GetPhyParam+0x2c4>)
 8015192:	681b      	ldr	r3, [r3, #0]
 8015194:	61bb      	str	r3, [r7, #24]
            break;
 8015196:	e032      	b.n	80151fe <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = AS923_DEFAULT_UPLINK_DWELL_TIME;
 8015198:	2301      	movs	r3, #1
 801519a:	61bb      	str	r3, [r7, #24]
            break;
 801519c:	e02f      	b.n	80151fe <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = AS923_DEFAULT_DOWNLINK_DWELL_TIME;
 801519e:	2300      	movs	r3, #0
 80151a0:	61bb      	str	r3, [r7, #24]
            break;
 80151a2:	e02c      	b.n	80151fe <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = AS923_DEFAULT_MAX_EIRP;
 80151a4:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 80151a8:	61bb      	str	r3, [r7, #24]
            break;
 80151aa:	e028      	b.n	80151fe <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = AS923_DEFAULT_ANTENNA_GAIN;
 80151ac:	4b1d      	ldr	r3, [pc, #116]	@ (8015224 <RegionAS923GetPhyParam+0x2dc>)
 80151ae:	61bb      	str	r3, [r7, #24]
            break;
 80151b0:	e025      	b.n	80151fe <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = AS923_BEACON_CHANNEL_FREQ - REGION_AS923_FREQ_OFFSET;
 80151b2:	4b1d      	ldr	r3, [pc, #116]	@ (8015228 <RegionAS923GetPhyParam+0x2e0>)
 80151b4:	61bb      	str	r3, [r7, #24]
            break;
 80151b6:	e022      	b.n	80151fe <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = AS923_BEACON_SIZE;
 80151b8:	2311      	movs	r3, #17
 80151ba:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = AS923_RFU1_SIZE;
 80151bc:	2301      	movs	r3, #1
 80151be:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = AS923_RFU2_SIZE;
 80151c0:	2300      	movs	r3, #0
 80151c2:	76bb      	strb	r3, [r7, #26]
            break;
 80151c4:	e01b      	b.n	80151fe <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = AS923_BEACON_CHANNEL_DR;
 80151c6:	2303      	movs	r3, #3
 80151c8:	61bb      	str	r3, [r7, #24]
            break;
 80151ca:	e018      	b.n	80151fe <RegionAS923GetPhyParam+0x2b6>
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
            phyParam.Value = AS923_PING_SLOT_CHANNEL_FREQ;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            phyParam.Value = AS923_PING_SLOT_CHANNEL_FREQ - REGION_AS923_FREQ_OFFSET;
 80151cc:	4b16      	ldr	r3, [pc, #88]	@ (8015228 <RegionAS923GetPhyParam+0x2e0>)
 80151ce:	61bb      	str	r3, [r7, #24]
#endif /* REGION_VERSION */
            break;
 80151d0:	e015      	b.n	80151fe <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = AS923_PING_SLOT_CHANNEL_DR;
 80151d2:	2303      	movs	r3, #3
 80151d4:	61bb      	str	r3, [r7, #24]
            break;
 80151d6:	e012      	b.n	80151fe <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesAS923[getPhy->Datarate];
 80151d8:	687b      	ldr	r3, [r7, #4]
 80151da:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80151de:	461a      	mov	r2, r3
 80151e0:	4b12      	ldr	r3, [pc, #72]	@ (801522c <RegionAS923GetPhyParam+0x2e4>)
 80151e2:	5c9b      	ldrb	r3, [r3, r2]
 80151e4:	61bb      	str	r3, [r7, #24]
            break;
 80151e6:	e00a      	b.n	80151fe <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsAS923 );
 80151e8:	687b      	ldr	r3, [r7, #4]
 80151ea:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80151ee:	4910      	ldr	r1, [pc, #64]	@ (8015230 <RegionAS923GetPhyParam+0x2e8>)
 80151f0:	4618      	mov	r0, r3
 80151f2:	f001 fea1 	bl	8016f38 <RegionCommonGetBandwidth>
 80151f6:	4603      	mov	r3, r0
 80151f8:	61bb      	str	r3, [r7, #24]
            break;
 80151fa:	e000      	b.n	80151fe <RegionAS923GetPhyParam+0x2b6>
        }
        default:
        {
            break;
 80151fc:	bf00      	nop
        }
    }

#endif /* REGION_AS923 */
    return phyParam;
 80151fe:	69bb      	ldr	r3, [r7, #24]
 8015200:	61fb      	str	r3, [r7, #28]
 8015202:	69fb      	ldr	r3, [r7, #28]
}
 8015204:	4618      	mov	r0, r3
 8015206:	3720      	adds	r7, #32
 8015208:	46bd      	mov	sp, r7
 801520a:	bd80      	pop	{r7, pc}
 801520c:	20001bcc 	.word	0x20001bcc
 8015210:	0801f4e4 	.word	0x0801f4e4
 8015214:	0801f4f4 	.word	0x0801f4f4
 8015218:	0801f4ec 	.word	0x0801f4ec
 801521c:	fffffc18 	.word	0xfffffc18
 8015220:	3706ea00 	.word	0x3706ea00
 8015224:	4009999a 	.word	0x4009999a
 8015228:	3709f740 	.word	0x3709f740
 801522c:	0801f4bc 	.word	0x0801f4bc
 8015230:	0801f4c4 	.word	0x0801f4c4

08015234 <RegionAS923SetBandTxDone>:

void RegionAS923SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8015234:	b590      	push	{r4, r7, lr}
 8015236:	b085      	sub	sp, #20
 8015238:	af02      	add	r7, sp, #8
 801523a:	6078      	str	r0, [r7, #4]
#if defined( REGION_AS923 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 801523c:	4b11      	ldr	r3, [pc, #68]	@ (8015284 <RegionAS923SetBandTxDone+0x50>)
 801523e:	681a      	ldr	r2, [r3, #0]
 8015240:	4b11      	ldr	r3, [pc, #68]	@ (8015288 <RegionAS923SetBandTxDone+0x54>)
 8015242:	6819      	ldr	r1, [r3, #0]
 8015244:	687b      	ldr	r3, [r7, #4]
 8015246:	781b      	ldrb	r3, [r3, #0]
 8015248:	4618      	mov	r0, r3
 801524a:	4603      	mov	r3, r0
 801524c:	005b      	lsls	r3, r3, #1
 801524e:	4403      	add	r3, r0
 8015250:	009b      	lsls	r3, r3, #2
 8015252:	440b      	add	r3, r1
 8015254:	3309      	adds	r3, #9
 8015256:	781b      	ldrb	r3, [r3, #0]
 8015258:	4619      	mov	r1, r3
 801525a:	460b      	mov	r3, r1
 801525c:	005b      	lsls	r3, r3, #1
 801525e:	440b      	add	r3, r1
 8015260:	00db      	lsls	r3, r3, #3
 8015262:	18d0      	adds	r0, r2, r3
 8015264:	687b      	ldr	r3, [r7, #4]
 8015266:	6899      	ldr	r1, [r3, #8]
 8015268:	687b      	ldr	r3, [r7, #4]
 801526a:	785c      	ldrb	r4, [r3, #1]
 801526c:	687b      	ldr	r3, [r7, #4]
 801526e:	691a      	ldr	r2, [r3, #16]
 8015270:	9200      	str	r2, [sp, #0]
 8015272:	68db      	ldr	r3, [r3, #12]
 8015274:	4622      	mov	r2, r4
 8015276:	f001 f9e5 	bl	8016644 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_AS923 */
}
 801527a:	bf00      	nop
 801527c:	370c      	adds	r7, #12
 801527e:	46bd      	mov	sp, r7
 8015280:	bd90      	pop	{r4, r7, pc}
 8015282:	bf00      	nop
 8015284:	20001bd0 	.word	0x20001bd0
 8015288:	20001bcc 	.word	0x20001bcc

0801528c <RegionAS923InitDefaults>:

void RegionAS923InitDefaults( InitDefaultsParams_t* params )
{
 801528c:	b580      	push	{r7, lr}
 801528e:	b08e      	sub	sp, #56	@ 0x38
 8015290:	af00      	add	r7, sp, #0
 8015292:	6078      	str	r0, [r7, #4]
#if defined( REGION_AS923 )
    Band_t bands[AS923_MAX_NB_BANDS] =
 8015294:	2364      	movs	r3, #100	@ 0x64
 8015296:	843b      	strh	r3, [r7, #32]
 8015298:	2300      	movs	r3, #0
 801529a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 801529e:	2300      	movs	r3, #0
 80152a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80152a2:	2300      	movs	r3, #0
 80152a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80152a6:	2300      	movs	r3, #0
 80152a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80152aa:	2300      	movs	r3, #0
 80152ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80152ae:	2300      	movs	r3, #0
 80152b0:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    {
        AS923_BAND0
    };

    switch( params->Type )
 80152b4:	687b      	ldr	r3, [r7, #4]
 80152b6:	7b1b      	ldrb	r3, [r3, #12]
 80152b8:	2b02      	cmp	r3, #2
 80152ba:	d05e      	beq.n	801537a <RegionAS923InitDefaults+0xee>
 80152bc:	2b02      	cmp	r3, #2
 80152be:	dc6b      	bgt.n	8015398 <RegionAS923InitDefaults+0x10c>
 80152c0:	2b00      	cmp	r3, #0
 80152c2:	d002      	beq.n	80152ca <RegionAS923InitDefaults+0x3e>
 80152c4:	2b01      	cmp	r3, #1
 80152c6:	d043      	beq.n	8015350 <RegionAS923InitDefaults+0xc4>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 80152c8:	e066      	b.n	8015398 <RegionAS923InitDefaults+0x10c>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 80152ca:	687b      	ldr	r3, [r7, #4]
 80152cc:	681b      	ldr	r3, [r3, #0]
 80152ce:	2b00      	cmp	r3, #0
 80152d0:	d063      	beq.n	801539a <RegionAS923InitDefaults+0x10e>
 80152d2:	687b      	ldr	r3, [r7, #4]
 80152d4:	685b      	ldr	r3, [r3, #4]
 80152d6:	2b00      	cmp	r3, #0
 80152d8:	d05f      	beq.n	801539a <RegionAS923InitDefaults+0x10e>
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 80152da:	687b      	ldr	r3, [r7, #4]
 80152dc:	685b      	ldr	r3, [r3, #4]
 80152de:	4a30      	ldr	r2, [pc, #192]	@ (80153a0 <RegionAS923InitDefaults+0x114>)
 80152e0:	6013      	str	r3, [r2, #0]
            RegionBands = (Band_t*) params->Bands;
 80152e2:	687b      	ldr	r3, [r7, #4]
 80152e4:	689b      	ldr	r3, [r3, #8]
 80152e6:	4a2f      	ldr	r2, [pc, #188]	@ (80153a4 <RegionAS923InitDefaults+0x118>)
 80152e8:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * AS923_MAX_NB_BANDS );
 80152ea:	4b2e      	ldr	r3, [pc, #184]	@ (80153a4 <RegionAS923InitDefaults+0x118>)
 80152ec:	681b      	ldr	r3, [r3, #0]
 80152ee:	f107 0120 	add.w	r1, r7, #32
 80152f2:	2218      	movs	r2, #24
 80152f4:	4618      	mov	r0, r3
 80152f6:	f001 fece 	bl	8017096 <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) AS923_LC1;
 80152fa:	4b29      	ldr	r3, [pc, #164]	@ (80153a0 <RegionAS923InitDefaults+0x114>)
 80152fc:	681b      	ldr	r3, [r3, #0]
 80152fe:	4a2a      	ldr	r2, [pc, #168]	@ (80153a8 <RegionAS923InitDefaults+0x11c>)
 8015300:	ca07      	ldmia	r2, {r0, r1, r2}
 8015302:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) AS923_LC2;
 8015306:	4b26      	ldr	r3, [pc, #152]	@ (80153a0 <RegionAS923InitDefaults+0x114>)
 8015308:	681b      	ldr	r3, [r3, #0]
 801530a:	4a28      	ldr	r2, [pc, #160]	@ (80153ac <RegionAS923InitDefaults+0x120>)
 801530c:	330c      	adds	r3, #12
 801530e:	ca07      	ldmia	r2, {r0, r1, r2}
 8015310:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[0].Frequency -= REGION_AS923_FREQ_OFFSET;
 8015314:	4b22      	ldr	r3, [pc, #136]	@ (80153a0 <RegionAS923InitDefaults+0x114>)
 8015316:	681a      	ldr	r2, [r3, #0]
 8015318:	4b21      	ldr	r3, [pc, #132]	@ (80153a0 <RegionAS923InitDefaults+0x114>)
 801531a:	681b      	ldr	r3, [r3, #0]
 801531c:	6812      	ldr	r2, [r2, #0]
 801531e:	601a      	str	r2, [r3, #0]
            RegionNvmGroup2->Channels[1].Frequency -= REGION_AS923_FREQ_OFFSET;
 8015320:	4b1f      	ldr	r3, [pc, #124]	@ (80153a0 <RegionAS923InitDefaults+0x114>)
 8015322:	681a      	ldr	r2, [r3, #0]
 8015324:	4b1e      	ldr	r3, [pc, #120]	@ (80153a0 <RegionAS923InitDefaults+0x114>)
 8015326:	681b      	ldr	r3, [r3, #0]
 8015328:	68d2      	ldr	r2, [r2, #12]
 801532a:	60da      	str	r2, [r3, #12]
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 );
 801532c:	4b1c      	ldr	r3, [pc, #112]	@ (80153a0 <RegionAS923InitDefaults+0x114>)
 801532e:	681b      	ldr	r3, [r3, #0]
 8015330:	2203      	movs	r2, #3
 8015332:	f8a3 236c 	strh.w	r2, [r3, #876]	@ 0x36c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8015336:	4b1a      	ldr	r3, [pc, #104]	@ (80153a0 <RegionAS923InitDefaults+0x114>)
 8015338:	681b      	ldr	r3, [r3, #0]
 801533a:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 801533e:	4b18      	ldr	r3, [pc, #96]	@ (80153a0 <RegionAS923InitDefaults+0x114>)
 8015340:	681b      	ldr	r3, [r3, #0]
 8015342:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 8015346:	2201      	movs	r2, #1
 8015348:	4619      	mov	r1, r3
 801534a:	f001 f955 	bl	80165f8 <RegionCommonChanMaskCopy>
 801534e:	e024      	b.n	801539a <RegionAS923InitDefaults+0x10e>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 8015350:	4b13      	ldr	r3, [pc, #76]	@ (80153a0 <RegionAS923InitDefaults+0x114>)
 8015352:	681b      	ldr	r3, [r3, #0]
 8015354:	2200      	movs	r2, #0
 8015356:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 8015358:	4b11      	ldr	r3, [pc, #68]	@ (80153a0 <RegionAS923InitDefaults+0x114>)
 801535a:	681b      	ldr	r3, [r3, #0]
 801535c:	2200      	movs	r2, #0
 801535e:	611a      	str	r2, [r3, #16]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8015360:	4b0f      	ldr	r3, [pc, #60]	@ (80153a0 <RegionAS923InitDefaults+0x114>)
 8015362:	681b      	ldr	r3, [r3, #0]
 8015364:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 8015368:	4b0d      	ldr	r3, [pc, #52]	@ (80153a0 <RegionAS923InitDefaults+0x114>)
 801536a:	681b      	ldr	r3, [r3, #0]
 801536c:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 8015370:	2201      	movs	r2, #1
 8015372:	4619      	mov	r1, r3
 8015374:	f001 f940 	bl	80165f8 <RegionCommonChanMaskCopy>
            break;
 8015378:	e00f      	b.n	801539a <RegionAS923InitDefaults+0x10e>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 801537a:	4b09      	ldr	r3, [pc, #36]	@ (80153a0 <RegionAS923InitDefaults+0x114>)
 801537c:	681b      	ldr	r3, [r3, #0]
 801537e:	f8b3 1360 	ldrh.w	r1, [r3, #864]	@ 0x360
 8015382:	4b07      	ldr	r3, [pc, #28]	@ (80153a0 <RegionAS923InitDefaults+0x114>)
 8015384:	681b      	ldr	r3, [r3, #0]
 8015386:	f8b3 236c 	ldrh.w	r2, [r3, #876]	@ 0x36c
 801538a:	4b05      	ldr	r3, [pc, #20]	@ (80153a0 <RegionAS923InitDefaults+0x114>)
 801538c:	681b      	ldr	r3, [r3, #0]
 801538e:	430a      	orrs	r2, r1
 8015390:	b292      	uxth	r2, r2
 8015392:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
            break;
 8015396:	e000      	b.n	801539a <RegionAS923InitDefaults+0x10e>
            break;
 8015398:	bf00      	nop
        }
    }
#endif /* REGION_AS923 */
}
 801539a:	3738      	adds	r7, #56	@ 0x38
 801539c:	46bd      	mov	sp, r7
 801539e:	bd80      	pop	{r7, pc}
 80153a0:	20001bcc 	.word	0x20001bcc
 80153a4:	20001bd0 	.word	0x20001bd0
 80153a8:	0801eef8 	.word	0x0801eef8
 80153ac:	0801ef04 	.word	0x0801ef04

080153b0 <RegionAS923Verify>:

bool RegionAS923Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 80153b0:	b580      	push	{r7, lr}
 80153b2:	b082      	sub	sp, #8
 80153b4:	af00      	add	r7, sp, #0
 80153b6:	6078      	str	r0, [r7, #4]
 80153b8:	460b      	mov	r3, r1
 80153ba:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_AS923 )
    switch( phyAttribute )
 80153bc:	78fb      	ldrb	r3, [r7, #3]
 80153be:	2b0f      	cmp	r3, #15
 80153c0:	f200 808f 	bhi.w	80154e2 <RegionAS923Verify+0x132>
 80153c4:	a201      	add	r2, pc, #4	@ (adr r2, 80153cc <RegionAS923Verify+0x1c>)
 80153c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80153ca:	bf00      	nop
 80153cc:	0801540d 	.word	0x0801540d
 80153d0:	080154e3 	.word	0x080154e3
 80153d4:	080154e3 	.word	0x080154e3
 80153d8:	080154e3 	.word	0x080154e3
 80153dc:	080154e3 	.word	0x080154e3
 80153e0:	0801541b 	.word	0x0801541b
 80153e4:	0801545f 	.word	0x0801545f
 80153e8:	0801547d 	.word	0x0801547d
 80153ec:	080154e3 	.word	0x080154e3
 80153f0:	080154c1 	.word	0x080154c1
 80153f4:	080154c1 	.word	0x080154c1
 80153f8:	080154e3 	.word	0x080154e3
 80153fc:	080154e3 	.word	0x080154e3
 8015400:	080154e3 	.word	0x080154e3
 8015404:	080154e3 	.word	0x080154e3
 8015408:	080154df 	.word	0x080154df
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 801540c:	687b      	ldr	r3, [r7, #4]
 801540e:	681b      	ldr	r3, [r3, #0]
 8015410:	4618      	mov	r0, r3
 8015412:	f7ff fd23 	bl	8014e5c <VerifyRfFreq>
 8015416:	4603      	mov	r3, r0
 8015418:	e064      	b.n	80154e4 <RegionAS923Verify+0x134>
        }
        case PHY_TX_DR:
        {
            if( verify->DatarateParams.UplinkDwellTime == 0 )
 801541a:	687b      	ldr	r3, [r7, #4]
 801541c:	789b      	ldrb	r3, [r3, #2]
 801541e:	2b00      	cmp	r3, #0
 8015420:	d10e      	bne.n	8015440 <RegionAS923Verify+0x90>
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_TX_MIN_DATARATE, AS923_TX_MAX_DATARATE );
 8015422:	687b      	ldr	r3, [r7, #4]
 8015424:	f993 3000 	ldrsb.w	r3, [r3]
 8015428:	2207      	movs	r2, #7
 801542a:	2100      	movs	r1, #0
 801542c:	4618      	mov	r0, r3
 801542e:	f001 f866 	bl	80164fe <RegionCommonValueInRange>
 8015432:	4603      	mov	r3, r0
 8015434:	2b00      	cmp	r3, #0
 8015436:	bf14      	ite	ne
 8015438:	2301      	movne	r3, #1
 801543a:	2300      	moveq	r3, #0
 801543c:	b2db      	uxtb	r3, r3
 801543e:	e051      	b.n	80154e4 <RegionAS923Verify+0x134>
            }
            else
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_DWELL_LIMIT_DATARATE, AS923_TX_MAX_DATARATE );
 8015440:	687b      	ldr	r3, [r7, #4]
 8015442:	f993 3000 	ldrsb.w	r3, [r3]
 8015446:	2207      	movs	r2, #7
 8015448:	2102      	movs	r1, #2
 801544a:	4618      	mov	r0, r3
 801544c:	f001 f857 	bl	80164fe <RegionCommonValueInRange>
 8015450:	4603      	mov	r3, r0
 8015452:	2b00      	cmp	r3, #0
 8015454:	bf14      	ite	ne
 8015456:	2301      	movne	r3, #1
 8015458:	2300      	moveq	r3, #0
 801545a:	b2db      	uxtb	r3, r3
 801545c:	e042      	b.n	80154e4 <RegionAS923Verify+0x134>
            }
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 801545e:	687b      	ldr	r3, [r7, #4]
 8015460:	f993 3000 	ldrsb.w	r3, [r3]
 8015464:	2205      	movs	r2, #5
 8015466:	2100      	movs	r1, #0
 8015468:	4618      	mov	r0, r3
 801546a:	f001 f848 	bl	80164fe <RegionCommonValueInRange>
 801546e:	4603      	mov	r3, r0
 8015470:	2b00      	cmp	r3, #0
 8015472:	bf14      	ite	ne
 8015474:	2301      	movne	r3, #1
 8015476:	2300      	moveq	r3, #0
 8015478:	b2db      	uxtb	r3, r3
 801547a:	e033      	b.n	80154e4 <RegionAS923Verify+0x134>
        }
        case PHY_RX_DR:
        {
            if( verify->DatarateParams.DownlinkDwellTime == 0 )
 801547c:	687b      	ldr	r3, [r7, #4]
 801547e:	785b      	ldrb	r3, [r3, #1]
 8015480:	2b00      	cmp	r3, #0
 8015482:	d10e      	bne.n	80154a2 <RegionAS923Verify+0xf2>
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_RX_MIN_DATARATE, AS923_RX_MAX_DATARATE );
 8015484:	687b      	ldr	r3, [r7, #4]
 8015486:	f993 3000 	ldrsb.w	r3, [r3]
 801548a:	2207      	movs	r2, #7
 801548c:	2100      	movs	r1, #0
 801548e:	4618      	mov	r0, r3
 8015490:	f001 f835 	bl	80164fe <RegionCommonValueInRange>
 8015494:	4603      	mov	r3, r0
 8015496:	2b00      	cmp	r3, #0
 8015498:	bf14      	ite	ne
 801549a:	2301      	movne	r3, #1
 801549c:	2300      	moveq	r3, #0
 801549e:	b2db      	uxtb	r3, r3
 80154a0:	e020      	b.n	80154e4 <RegionAS923Verify+0x134>
            }
            else
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_DWELL_LIMIT_DATARATE, AS923_RX_MAX_DATARATE );
 80154a2:	687b      	ldr	r3, [r7, #4]
 80154a4:	f993 3000 	ldrsb.w	r3, [r3]
 80154a8:	2207      	movs	r2, #7
 80154aa:	2102      	movs	r1, #2
 80154ac:	4618      	mov	r0, r3
 80154ae:	f001 f826 	bl	80164fe <RegionCommonValueInRange>
 80154b2:	4603      	mov	r3, r0
 80154b4:	2b00      	cmp	r3, #0
 80154b6:	bf14      	ite	ne
 80154b8:	2301      	movne	r3, #1
 80154ba:	2300      	moveq	r3, #0
 80154bc:	b2db      	uxtb	r3, r3
 80154be:	e011      	b.n	80154e4 <RegionAS923Verify+0x134>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, AS923_MAX_TX_POWER, AS923_MIN_TX_POWER );
 80154c0:	687b      	ldr	r3, [r7, #4]
 80154c2:	f993 3000 	ldrsb.w	r3, [r3]
 80154c6:	2207      	movs	r2, #7
 80154c8:	2100      	movs	r1, #0
 80154ca:	4618      	mov	r0, r3
 80154cc:	f001 f817 	bl	80164fe <RegionCommonValueInRange>
 80154d0:	4603      	mov	r3, r0
 80154d2:	2b00      	cmp	r3, #0
 80154d4:	bf14      	ite	ne
 80154d6:	2301      	movne	r3, #1
 80154d8:	2300      	moveq	r3, #0
 80154da:	b2db      	uxtb	r3, r3
 80154dc:	e002      	b.n	80154e4 <RegionAS923Verify+0x134>
        }
        case PHY_DUTY_CYCLE:
        {
            return AS923_DUTY_CYCLE_ENABLED;
 80154de:	2300      	movs	r3, #0
 80154e0:	e000      	b.n	80154e4 <RegionAS923Verify+0x134>
        }
        default:
            return false;
 80154e2:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_AS923 */
}
 80154e4:	4618      	mov	r0, r3
 80154e6:	3708      	adds	r7, #8
 80154e8:	46bd      	mov	sp, r7
 80154ea:	bd80      	pop	{r7, pc}

080154ec <RegionAS923ApplyCFList>:

void RegionAS923ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 80154ec:	b580      	push	{r7, lr}
 80154ee:	b08a      	sub	sp, #40	@ 0x28
 80154f0:	af00      	add	r7, sp, #0
 80154f2:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 80154f4:	2350      	movs	r3, #80	@ 0x50
 80154f6:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 80154fa:	687b      	ldr	r3, [r7, #4]
 80154fc:	7a1b      	ldrb	r3, [r3, #8]
 80154fe:	2b10      	cmp	r3, #16
 8015500:	d162      	bne.n	80155c8 <RegionAS923ApplyCFList+0xdc>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 8015502:	687b      	ldr	r3, [r7, #4]
 8015504:	685b      	ldr	r3, [r3, #4]
 8015506:	330f      	adds	r3, #15
 8015508:	781b      	ldrb	r3, [r3, #0]
 801550a:	2b00      	cmp	r3, #0
 801550c:	d15e      	bne.n	80155cc <RegionAS923ApplyCFList+0xe0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = AS923_NUMB_DEFAULT_CHANNELS; chanIdx < AS923_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 801550e:	2300      	movs	r3, #0
 8015510:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015514:	2302      	movs	r3, #2
 8015516:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801551a:	e050      	b.n	80155be <RegionAS923ApplyCFList+0xd2>
    {
        if( chanIdx < ( AS923_NUMB_CHANNELS_CF_LIST + AS923_NUMB_DEFAULT_CHANNELS ) )
 801551c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015520:	2b06      	cmp	r3, #6
 8015522:	d824      	bhi.n	801556e <RegionAS923ApplyCFList+0x82>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8015524:	687b      	ldr	r3, [r7, #4]
 8015526:	685a      	ldr	r2, [r3, #4]
 8015528:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801552c:	4413      	add	r3, r2
 801552e:	781b      	ldrb	r3, [r3, #0]
 8015530:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 8015532:	69ba      	ldr	r2, [r7, #24]
 8015534:	687b      	ldr	r3, [r7, #4]
 8015536:	6859      	ldr	r1, [r3, #4]
 8015538:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801553c:	3301      	adds	r3, #1
 801553e:	440b      	add	r3, r1
 8015540:	781b      	ldrb	r3, [r3, #0]
 8015542:	021b      	lsls	r3, r3, #8
 8015544:	4313      	orrs	r3, r2
 8015546:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 8015548:	69ba      	ldr	r2, [r7, #24]
 801554a:	687b      	ldr	r3, [r7, #4]
 801554c:	6859      	ldr	r1, [r3, #4]
 801554e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015552:	3302      	adds	r3, #2
 8015554:	440b      	add	r3, r1
 8015556:	781b      	ldrb	r3, [r3, #0]
 8015558:	041b      	lsls	r3, r3, #16
 801555a:	4313      	orrs	r3, r2
 801555c:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency *= 100;
 801555e:	69bb      	ldr	r3, [r7, #24]
 8015560:	2264      	movs	r2, #100	@ 0x64
 8015562:	fb02 f303 	mul.w	r3, r2, r3
 8015566:	61bb      	str	r3, [r7, #24]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 8015568:	2300      	movs	r3, #0
 801556a:	61fb      	str	r3, [r7, #28]
 801556c:	e006      	b.n	801557c <RegionAS923ApplyCFList+0x90>
        }
        else
        {
            newChannel.Frequency = 0;
 801556e:	2300      	movs	r3, #0
 8015570:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 8015572:	2300      	movs	r3, #0
 8015574:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 8015578:	2300      	movs	r3, #0
 801557a:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 801557c:	69bb      	ldr	r3, [r7, #24]
 801557e:	2b00      	cmp	r3, #0
 8015580:	d00b      	beq.n	801559a <RegionAS923ApplyCFList+0xae>
        {
            channelAdd.NewChannel = &newChannel;
 8015582:	f107 0318 	add.w	r3, r7, #24
 8015586:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 8015588:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801558c:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionAS923ChannelAdd( &channelAdd );
 801558e:	f107 0310 	add.w	r3, r7, #16
 8015592:	4618      	mov	r0, r3
 8015594:	f000 fd00 	bl	8015f98 <RegionAS923ChannelAdd>
 8015598:	e007      	b.n	80155aa <RegionAS923ApplyCFList+0xbe>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 801559a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801559e:	733b      	strb	r3, [r7, #12]

            RegionAS923ChannelsRemove( &channelRemove );
 80155a0:	f107 030c 	add.w	r3, r7, #12
 80155a4:	4618      	mov	r0, r3
 80155a6:	f000 fd93 	bl	80160d0 <RegionAS923ChannelsRemove>
    for( uint8_t i = 0, chanIdx = AS923_NUMB_DEFAULT_CHANNELS; chanIdx < AS923_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 80155aa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80155ae:	3303      	adds	r3, #3
 80155b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80155b4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80155b8:	3301      	adds	r3, #1
 80155ba:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80155be:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80155c2:	2b0f      	cmp	r3, #15
 80155c4:	d9aa      	bls.n	801551c <RegionAS923ApplyCFList+0x30>
 80155c6:	e002      	b.n	80155ce <RegionAS923ApplyCFList+0xe2>
        return;
 80155c8:	bf00      	nop
 80155ca:	e000      	b.n	80155ce <RegionAS923ApplyCFList+0xe2>
        return;
 80155cc:	bf00      	nop
        }
    }
#endif /* REGION_AS923 */
}
 80155ce:	3728      	adds	r7, #40	@ 0x28
 80155d0:	46bd      	mov	sp, r7
 80155d2:	bd80      	pop	{r7, pc}

080155d4 <RegionAS923ChanMaskSet>:

bool RegionAS923ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 80155d4:	b580      	push	{r7, lr}
 80155d6:	b082      	sub	sp, #8
 80155d8:	af00      	add	r7, sp, #0
 80155da:	6078      	str	r0, [r7, #4]
#if defined( REGION_AS923 )
    switch( chanMaskSet->ChannelsMaskType )
 80155dc:	687b      	ldr	r3, [r7, #4]
 80155de:	791b      	ldrb	r3, [r3, #4]
 80155e0:	2b00      	cmp	r3, #0
 80155e2:	d002      	beq.n	80155ea <RegionAS923ChanMaskSet+0x16>
 80155e4:	2b01      	cmp	r3, #1
 80155e6:	d00b      	beq.n	8015600 <RegionAS923ChanMaskSet+0x2c>
 80155e8:	e015      	b.n	8015616 <RegionAS923ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, 1 );
 80155ea:	4b0e      	ldr	r3, [pc, #56]	@ (8015624 <RegionAS923ChanMaskSet+0x50>)
 80155ec:	681b      	ldr	r3, [r3, #0]
 80155ee:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 80155f2:	687b      	ldr	r3, [r7, #4]
 80155f4:	681b      	ldr	r3, [r3, #0]
 80155f6:	2201      	movs	r2, #1
 80155f8:	4619      	mov	r1, r3
 80155fa:	f000 fffd 	bl	80165f8 <RegionCommonChanMaskCopy>
            break;
 80155fe:	e00c      	b.n	801561a <RegionAS923ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 1 );
 8015600:	4b08      	ldr	r3, [pc, #32]	@ (8015624 <RegionAS923ChanMaskSet+0x50>)
 8015602:	681b      	ldr	r3, [r3, #0]
 8015604:	f503 705b 	add.w	r0, r3, #876	@ 0x36c
 8015608:	687b      	ldr	r3, [r7, #4]
 801560a:	681b      	ldr	r3, [r3, #0]
 801560c:	2201      	movs	r2, #1
 801560e:	4619      	mov	r1, r3
 8015610:	f000 fff2 	bl	80165f8 <RegionCommonChanMaskCopy>
            break;
 8015614:	e001      	b.n	801561a <RegionAS923ChanMaskSet+0x46>
        }
        default:
            return false;
 8015616:	2300      	movs	r3, #0
 8015618:	e000      	b.n	801561c <RegionAS923ChanMaskSet+0x48>
    }
    return true;
 801561a:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_AS923 */
}
 801561c:	4618      	mov	r0, r3
 801561e:	3708      	adds	r7, #8
 8015620:	46bd      	mov	sp, r7
 8015622:	bd80      	pop	{r7, pc}
 8015624:	20001bcc 	.word	0x20001bcc

08015628 <RegionAS923ComputeRxWindowParameters>:

void RegionAS923ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8015628:	b580      	push	{r7, lr}
 801562a:	b088      	sub	sp, #32
 801562c:	af02      	add	r7, sp, #8
 801562e:	60ba      	str	r2, [r7, #8]
 8015630:	607b      	str	r3, [r7, #4]
 8015632:	4603      	mov	r3, r0
 8015634:	73fb      	strb	r3, [r7, #15]
 8015636:	460b      	mov	r3, r1
 8015638:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_AS923 )
    uint32_t tSymbolInUs = 0;
 801563a:	2300      	movs	r3, #0
 801563c:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, AS923_RX_MAX_DATARATE );
 801563e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015642:	2b07      	cmp	r3, #7
 8015644:	bfa8      	it	ge
 8015646:	2307      	movge	r3, #7
 8015648:	b25a      	sxtb	r2, r3
 801564a:	687b      	ldr	r3, [r7, #4]
 801564c:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsAS923 );
 801564e:	687b      	ldr	r3, [r7, #4]
 8015650:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015654:	491e      	ldr	r1, [pc, #120]	@ (80156d0 <RegionAS923ComputeRxWindowParameters+0xa8>)
 8015656:	4618      	mov	r0, r3
 8015658:	f001 fc6e 	bl	8016f38 <RegionCommonGetBandwidth>
 801565c:	4603      	mov	r3, r0
 801565e:	b2da      	uxtb	r2, r3
 8015660:	687b      	ldr	r3, [r7, #4]
 8015662:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 8015664:	687b      	ldr	r3, [r7, #4]
 8015666:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801566a:	2b07      	cmp	r3, #7
 801566c:	d10a      	bne.n	8015684 <RegionAS923ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesAS923[rxConfigParams->Datarate] );
 801566e:	687b      	ldr	r3, [r7, #4]
 8015670:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015674:	461a      	mov	r2, r3
 8015676:	4b17      	ldr	r3, [pc, #92]	@ (80156d4 <RegionAS923ComputeRxWindowParameters+0xac>)
 8015678:	5c9b      	ldrb	r3, [r3, r2]
 801567a:	4618      	mov	r0, r3
 801567c:	f001 f9f0 	bl	8016a60 <RegionCommonComputeSymbolTimeFsk>
 8015680:	6178      	str	r0, [r7, #20]
 8015682:	e011      	b.n	80156a8 <RegionAS923ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesAS923[rxConfigParams->Datarate], BandwidthsAS923[rxConfigParams->Datarate] );
 8015684:	687b      	ldr	r3, [r7, #4]
 8015686:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801568a:	461a      	mov	r2, r3
 801568c:	4b11      	ldr	r3, [pc, #68]	@ (80156d4 <RegionAS923ComputeRxWindowParameters+0xac>)
 801568e:	5c9a      	ldrb	r2, [r3, r2]
 8015690:	687b      	ldr	r3, [r7, #4]
 8015692:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015696:	4619      	mov	r1, r3
 8015698:	4b0d      	ldr	r3, [pc, #52]	@ (80156d0 <RegionAS923ComputeRxWindowParameters+0xa8>)
 801569a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801569e:	4619      	mov	r1, r3
 80156a0:	4610      	mov	r0, r2
 80156a2:	f001 f9c7 	bl	8016a34 <RegionCommonComputeSymbolTimeLoRa>
 80156a6:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 80156a8:	4b0b      	ldr	r3, [pc, #44]	@ (80156d8 <RegionAS923ComputeRxWindowParameters+0xb0>)
 80156aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80156ac:	4798      	blx	r3
 80156ae:	687b      	ldr	r3, [r7, #4]
 80156b0:	3308      	adds	r3, #8
 80156b2:	687a      	ldr	r2, [r7, #4]
 80156b4:	320c      	adds	r2, #12
 80156b6:	7bb9      	ldrb	r1, [r7, #14]
 80156b8:	9201      	str	r2, [sp, #4]
 80156ba:	9300      	str	r3, [sp, #0]
 80156bc:	4603      	mov	r3, r0
 80156be:	68ba      	ldr	r2, [r7, #8]
 80156c0:	6978      	ldr	r0, [r7, #20]
 80156c2:	f001 f9dd 	bl	8016a80 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_AS923 */
}
 80156c6:	bf00      	nop
 80156c8:	3718      	adds	r7, #24
 80156ca:	46bd      	mov	sp, r7
 80156cc:	bd80      	pop	{r7, pc}
 80156ce:	bf00      	nop
 80156d0:	0801f4c4 	.word	0x0801f4c4
 80156d4:	0801f4bc 	.word	0x0801f4bc
 80156d8:	0801f57c 	.word	0x0801f57c

080156dc <RegionAS923RxConfig>:

bool RegionAS923RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 80156dc:	b5b0      	push	{r4, r5, r7, lr}
 80156de:	b090      	sub	sp, #64	@ 0x40
 80156e0:	af0a      	add	r7, sp, #40	@ 0x28
 80156e2:	6078      	str	r0, [r7, #4]
 80156e4:	6039      	str	r1, [r7, #0]
#if defined( REGION_AS923 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 80156e6:	687b      	ldr	r3, [r7, #4]
 80156e8:	785b      	ldrb	r3, [r3, #1]
 80156ea:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 80156ec:	2300      	movs	r3, #0
 80156ee:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 80156f0:	2300      	movs	r3, #0
 80156f2:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 80156f4:	687b      	ldr	r3, [r7, #4]
 80156f6:	685b      	ldr	r3, [r3, #4]
 80156f8:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 80156fa:	4b5a      	ldr	r3, [pc, #360]	@ (8015864 <RegionAS923RxConfig+0x188>)
 80156fc:	685b      	ldr	r3, [r3, #4]
 80156fe:	4798      	blx	r3
 8015700:	4603      	mov	r3, r0
 8015702:	2b00      	cmp	r3, #0
 8015704:	d001      	beq.n	801570a <RegionAS923RxConfig+0x2e>
    {
        return false;
 8015706:	2300      	movs	r3, #0
 8015708:	e0a8      	b.n	801585c <RegionAS923RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 801570a:	687b      	ldr	r3, [r7, #4]
 801570c:	7cdb      	ldrb	r3, [r3, #19]
 801570e:	2b00      	cmp	r3, #0
 8015710:	d126      	bne.n	8015760 <RegionAS923RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 8015712:	4b55      	ldr	r3, [pc, #340]	@ (8015868 <RegionAS923RxConfig+0x18c>)
 8015714:	681a      	ldr	r2, [r3, #0]
 8015716:	687b      	ldr	r3, [r7, #4]
 8015718:	781b      	ldrb	r3, [r3, #0]
 801571a:	4619      	mov	r1, r3
 801571c:	460b      	mov	r3, r1
 801571e:	005b      	lsls	r3, r3, #1
 8015720:	440b      	add	r3, r1
 8015722:	009b      	lsls	r3, r3, #2
 8015724:	4413      	add	r3, r2
 8015726:	681b      	ldr	r3, [r3, #0]
 8015728:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 801572a:	4b4f      	ldr	r3, [pc, #316]	@ (8015868 <RegionAS923RxConfig+0x18c>)
 801572c:	681a      	ldr	r2, [r3, #0]
 801572e:	687b      	ldr	r3, [r7, #4]
 8015730:	781b      	ldrb	r3, [r3, #0]
 8015732:	4619      	mov	r1, r3
 8015734:	460b      	mov	r3, r1
 8015736:	005b      	lsls	r3, r3, #1
 8015738:	440b      	add	r3, r1
 801573a:	009b      	lsls	r3, r3, #2
 801573c:	4413      	add	r3, r2
 801573e:	3304      	adds	r3, #4
 8015740:	681b      	ldr	r3, [r3, #0]
 8015742:	2b00      	cmp	r3, #0
 8015744:	d00c      	beq.n	8015760 <RegionAS923RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 8015746:	4b48      	ldr	r3, [pc, #288]	@ (8015868 <RegionAS923RxConfig+0x18c>)
 8015748:	681a      	ldr	r2, [r3, #0]
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	781b      	ldrb	r3, [r3, #0]
 801574e:	4619      	mov	r1, r3
 8015750:	460b      	mov	r3, r1
 8015752:	005b      	lsls	r3, r3, #1
 8015754:	440b      	add	r3, r1
 8015756:	009b      	lsls	r3, r3, #2
 8015758:	4413      	add	r3, r2
 801575a:	3304      	adds	r3, #4
 801575c:	681b      	ldr	r3, [r3, #0]
 801575e:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesAS923[dr];
 8015760:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015764:	4a41      	ldr	r2, [pc, #260]	@ (801586c <RegionAS923RxConfig+0x190>)
 8015766:	5cd3      	ldrb	r3, [r2, r3]
 8015768:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 801576a:	4b3e      	ldr	r3, [pc, #248]	@ (8015864 <RegionAS923RxConfig+0x188>)
 801576c:	68db      	ldr	r3, [r3, #12]
 801576e:	6938      	ldr	r0, [r7, #16]
 8015770:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 8015772:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015776:	2b07      	cmp	r3, #7
 8015778:	d128      	bne.n	80157cc <RegionAS923RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 801577a:	2300      	movs	r3, #0
 801577c:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 801577e:	4b39      	ldr	r3, [pc, #228]	@ (8015864 <RegionAS923RxConfig+0x188>)
 8015780:	699c      	ldr	r4, [r3, #24]
 8015782:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015786:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801578a:	fb02 f303 	mul.w	r3, r2, r3
 801578e:	4619      	mov	r1, r3
 8015790:	687b      	ldr	r3, [r7, #4]
 8015792:	689b      	ldr	r3, [r3, #8]
 8015794:	b29b      	uxth	r3, r3
 8015796:	687a      	ldr	r2, [r7, #4]
 8015798:	7c92      	ldrb	r2, [r2, #18]
 801579a:	7df8      	ldrb	r0, [r7, #23]
 801579c:	9209      	str	r2, [sp, #36]	@ 0x24
 801579e:	2200      	movs	r2, #0
 80157a0:	9208      	str	r2, [sp, #32]
 80157a2:	2200      	movs	r2, #0
 80157a4:	9207      	str	r2, [sp, #28]
 80157a6:	2200      	movs	r2, #0
 80157a8:	9206      	str	r2, [sp, #24]
 80157aa:	2201      	movs	r2, #1
 80157ac:	9205      	str	r2, [sp, #20]
 80157ae:	2200      	movs	r2, #0
 80157b0:	9204      	str	r2, [sp, #16]
 80157b2:	2200      	movs	r2, #0
 80157b4:	9203      	str	r2, [sp, #12]
 80157b6:	9302      	str	r3, [sp, #8]
 80157b8:	2305      	movs	r3, #5
 80157ba:	9301      	str	r3, [sp, #4]
 80157bc:	4b2c      	ldr	r3, [pc, #176]	@ (8015870 <RegionAS923RxConfig+0x194>)
 80157be:	9300      	str	r3, [sp, #0]
 80157c0:	2300      	movs	r3, #0
 80157c2:	460a      	mov	r2, r1
 80157c4:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80157c8:	47a0      	blx	r4
 80157ca:	e024      	b.n	8015816 <RegionAS923RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 80157cc:	2301      	movs	r3, #1
 80157ce:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 80157d0:	4b24      	ldr	r3, [pc, #144]	@ (8015864 <RegionAS923RxConfig+0x188>)
 80157d2:	699c      	ldr	r4, [r3, #24]
 80157d4:	687b      	ldr	r3, [r7, #4]
 80157d6:	789b      	ldrb	r3, [r3, #2]
 80157d8:	461d      	mov	r5, r3
 80157da:	f997 100e 	ldrsb.w	r1, [r7, #14]
 80157de:	687b      	ldr	r3, [r7, #4]
 80157e0:	689b      	ldr	r3, [r3, #8]
 80157e2:	b29b      	uxth	r3, r3
 80157e4:	687a      	ldr	r2, [r7, #4]
 80157e6:	7c92      	ldrb	r2, [r2, #18]
 80157e8:	7df8      	ldrb	r0, [r7, #23]
 80157ea:	9209      	str	r2, [sp, #36]	@ 0x24
 80157ec:	2201      	movs	r2, #1
 80157ee:	9208      	str	r2, [sp, #32]
 80157f0:	2200      	movs	r2, #0
 80157f2:	9207      	str	r2, [sp, #28]
 80157f4:	2200      	movs	r2, #0
 80157f6:	9206      	str	r2, [sp, #24]
 80157f8:	2200      	movs	r2, #0
 80157fa:	9205      	str	r2, [sp, #20]
 80157fc:	2200      	movs	r2, #0
 80157fe:	9204      	str	r2, [sp, #16]
 8015800:	2200      	movs	r2, #0
 8015802:	9203      	str	r2, [sp, #12]
 8015804:	9302      	str	r3, [sp, #8]
 8015806:	2308      	movs	r3, #8
 8015808:	9301      	str	r3, [sp, #4]
 801580a:	2300      	movs	r3, #0
 801580c:	9300      	str	r3, [sp, #0]
 801580e:	2301      	movs	r3, #1
 8015810:	460a      	mov	r2, r1
 8015812:	4629      	mov	r1, r5
 8015814:	47a0      	blx	r4
    }

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 8015816:	687b      	ldr	r3, [r7, #4]
 8015818:	7c5b      	ldrb	r3, [r3, #17]
 801581a:	2b00      	cmp	r3, #0
 801581c:	d005      	beq.n	801582a <RegionAS923RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterDwell0AS923[dr];
 801581e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015822:	4a14      	ldr	r2, [pc, #80]	@ (8015874 <RegionAS923RxConfig+0x198>)
 8015824:	5cd3      	ldrb	r3, [r2, r3]
 8015826:	75bb      	strb	r3, [r7, #22]
 8015828:	e004      	b.n	8015834 <RegionAS923RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateDwell0AS923[dr];
 801582a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801582e:	4a12      	ldr	r2, [pc, #72]	@ (8015878 <RegionAS923RxConfig+0x19c>)
 8015830:	5cd3      	ldrb	r3, [r2, r3]
 8015832:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8015834:	4b0b      	ldr	r3, [pc, #44]	@ (8015864 <RegionAS923RxConfig+0x188>)
 8015836:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015838:	7dba      	ldrb	r2, [r7, #22]
 801583a:	320d      	adds	r2, #13
 801583c:	b2d1      	uxtb	r1, r2
 801583e:	7dfa      	ldrb	r2, [r7, #23]
 8015840:	4610      	mov	r0, r2
 8015842:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8015844:	687b      	ldr	r3, [r7, #4]
 8015846:	7cdb      	ldrb	r3, [r3, #19]
 8015848:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801584c:	6939      	ldr	r1, [r7, #16]
 801584e:	4618      	mov	r0, r3
 8015850:	f001 fb90 	bl	8016f74 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 8015854:	683b      	ldr	r3, [r7, #0]
 8015856:	7bfa      	ldrb	r2, [r7, #15]
 8015858:	701a      	strb	r2, [r3, #0]
    return true;
 801585a:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_AS923 */
}
 801585c:	4618      	mov	r0, r3
 801585e:	3718      	adds	r7, #24
 8015860:	46bd      	mov	sp, r7
 8015862:	bdb0      	pop	{r4, r5, r7, pc}
 8015864:	0801f57c 	.word	0x0801f57c
 8015868:	20001bcc 	.word	0x20001bcc
 801586c:	0801f4bc 	.word	0x0801f4bc
 8015870:	00014585 	.word	0x00014585
 8015874:	0801f4ec 	.word	0x0801f4ec
 8015878:	0801f4e4 	.word	0x0801f4e4

0801587c <RegionAS923TxConfig>:

bool RegionAS923TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 801587c:	b590      	push	{r4, r7, lr}
 801587e:	b093      	sub	sp, #76	@ 0x4c
 8015880:	af0a      	add	r7, sp, #40	@ 0x28
 8015882:	60f8      	str	r0, [r7, #12]
 8015884:	60b9      	str	r1, [r7, #8]
 8015886:	607a      	str	r2, [r7, #4]
#if defined( REGION_AS923 )
    RadioModems_t modem;
    int8_t phyDr = DataratesAS923[txConfig->Datarate];
 8015888:	68fb      	ldr	r3, [r7, #12]
 801588a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801588e:	461a      	mov	r2, r3
 8015890:	4b5d      	ldr	r3, [pc, #372]	@ (8015a08 <RegionAS923TxConfig+0x18c>)
 8015892:	5c9b      	ldrb	r3, [r3, r2]
 8015894:	77bb      	strb	r3, [r7, #30]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 8015896:	68fb      	ldr	r3, [r7, #12]
 8015898:	f993 0002 	ldrsb.w	r0, [r3, #2]
 801589c:	4b5b      	ldr	r3, [pc, #364]	@ (8015a0c <RegionAS923TxConfig+0x190>)
 801589e:	681a      	ldr	r2, [r3, #0]
 80158a0:	4b5b      	ldr	r3, [pc, #364]	@ (8015a10 <RegionAS923TxConfig+0x194>)
 80158a2:	6819      	ldr	r1, [r3, #0]
 80158a4:	68fb      	ldr	r3, [r7, #12]
 80158a6:	781b      	ldrb	r3, [r3, #0]
 80158a8:	461c      	mov	r4, r3
 80158aa:	4623      	mov	r3, r4
 80158ac:	005b      	lsls	r3, r3, #1
 80158ae:	4423      	add	r3, r4
 80158b0:	009b      	lsls	r3, r3, #2
 80158b2:	440b      	add	r3, r1
 80158b4:	3309      	adds	r3, #9
 80158b6:	781b      	ldrb	r3, [r3, #0]
 80158b8:	4619      	mov	r1, r3
 80158ba:	460b      	mov	r3, r1
 80158bc:	005b      	lsls	r3, r3, #1
 80158be:	440b      	add	r3, r1
 80158c0:	00db      	lsls	r3, r3, #3
 80158c2:	4413      	add	r3, r2
 80158c4:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80158c8:	4619      	mov	r1, r3
 80158ca:	f001 fb20 	bl	8016f0e <RegionCommonLimitTxPower>
 80158ce:	4603      	mov	r3, r0
 80158d0:	777b      	strb	r3, [r7, #29]
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsAS923 );
 80158d2:	68fb      	ldr	r3, [r7, #12]
 80158d4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80158d8:	494e      	ldr	r1, [pc, #312]	@ (8015a14 <RegionAS923TxConfig+0x198>)
 80158da:	4618      	mov	r0, r3
 80158dc:	f001 fb2c 	bl	8016f38 <RegionCommonGetBandwidth>
 80158e0:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 80158e2:	2300      	movs	r3, #0
 80158e4:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 80158e6:	68fb      	ldr	r3, [r7, #12]
 80158e8:	6859      	ldr	r1, [r3, #4]
 80158ea:	68fb      	ldr	r3, [r7, #12]
 80158ec:	689a      	ldr	r2, [r3, #8]
 80158ee:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80158f2:	4618      	mov	r0, r3
 80158f4:	f001 f97c 	bl	8016bf0 <RegionCommonComputeTxPower>
 80158f8:	4603      	mov	r3, r0
 80158fa:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 80158fc:	4b46      	ldr	r3, [pc, #280]	@ (8015a18 <RegionAS923TxConfig+0x19c>)
 80158fe:	68da      	ldr	r2, [r3, #12]
 8015900:	4b43      	ldr	r3, [pc, #268]	@ (8015a10 <RegionAS923TxConfig+0x194>)
 8015902:	6819      	ldr	r1, [r3, #0]
 8015904:	68fb      	ldr	r3, [r7, #12]
 8015906:	781b      	ldrb	r3, [r3, #0]
 8015908:	4618      	mov	r0, r3
 801590a:	4603      	mov	r3, r0
 801590c:	005b      	lsls	r3, r3, #1
 801590e:	4403      	add	r3, r0
 8015910:	009b      	lsls	r3, r3, #2
 8015912:	440b      	add	r3, r1
 8015914:	681b      	ldr	r3, [r3, #0]
 8015916:	4618      	mov	r0, r3
 8015918:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 801591a:	68fb      	ldr	r3, [r7, #12]
 801591c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015920:	2b07      	cmp	r3, #7
 8015922:	d124      	bne.n	801596e <RegionAS923TxConfig+0xf2>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 8015924:	2300      	movs	r3, #0
 8015926:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 8015928:	4b3b      	ldr	r3, [pc, #236]	@ (8015a18 <RegionAS923TxConfig+0x19c>)
 801592a:	69dc      	ldr	r4, [r3, #28]
 801592c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8015930:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8015934:	fb02 f303 	mul.w	r3, r2, r3
 8015938:	461a      	mov	r2, r3
 801593a:	f997 1017 	ldrsb.w	r1, [r7, #23]
 801593e:	7ff8      	ldrb	r0, [r7, #31]
 8015940:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8015944:	9308      	str	r3, [sp, #32]
 8015946:	2300      	movs	r3, #0
 8015948:	9307      	str	r3, [sp, #28]
 801594a:	2300      	movs	r3, #0
 801594c:	9306      	str	r3, [sp, #24]
 801594e:	2300      	movs	r3, #0
 8015950:	9305      	str	r3, [sp, #20]
 8015952:	2301      	movs	r3, #1
 8015954:	9304      	str	r3, [sp, #16]
 8015956:	2300      	movs	r3, #0
 8015958:	9303      	str	r3, [sp, #12]
 801595a:	2305      	movs	r3, #5
 801595c:	9302      	str	r3, [sp, #8]
 801595e:	2300      	movs	r3, #0
 8015960:	9301      	str	r3, [sp, #4]
 8015962:	9200      	str	r2, [sp, #0]
 8015964:	69bb      	ldr	r3, [r7, #24]
 8015966:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 801596a:	47a0      	blx	r4
 801596c:	e01d      	b.n	80159aa <RegionAS923TxConfig+0x12e>
    }
    else
    {
        modem = MODEM_LORA;
 801596e:	2301      	movs	r3, #1
 8015970:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8015972:	4b29      	ldr	r3, [pc, #164]	@ (8015a18 <RegionAS923TxConfig+0x19c>)
 8015974:	69dc      	ldr	r4, [r3, #28]
 8015976:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801597a:	f997 1017 	ldrsb.w	r1, [r7, #23]
 801597e:	7ff8      	ldrb	r0, [r7, #31]
 8015980:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8015984:	9208      	str	r2, [sp, #32]
 8015986:	2200      	movs	r2, #0
 8015988:	9207      	str	r2, [sp, #28]
 801598a:	2200      	movs	r2, #0
 801598c:	9206      	str	r2, [sp, #24]
 801598e:	2200      	movs	r2, #0
 8015990:	9205      	str	r2, [sp, #20]
 8015992:	2201      	movs	r2, #1
 8015994:	9204      	str	r2, [sp, #16]
 8015996:	2200      	movs	r2, #0
 8015998:	9203      	str	r2, [sp, #12]
 801599a:	2208      	movs	r2, #8
 801599c:	9202      	str	r2, [sp, #8]
 801599e:	2201      	movs	r2, #1
 80159a0:	9201      	str	r2, [sp, #4]
 80159a2:	9300      	str	r3, [sp, #0]
 80159a4:	69bb      	ldr	r3, [r7, #24]
 80159a6:	2200      	movs	r2, #0
 80159a8:	47a0      	blx	r4
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 80159aa:	4b19      	ldr	r3, [pc, #100]	@ (8015a10 <RegionAS923TxConfig+0x194>)
 80159ac:	681a      	ldr	r2, [r3, #0]
 80159ae:	68fb      	ldr	r3, [r7, #12]
 80159b0:	781b      	ldrb	r3, [r3, #0]
 80159b2:	4619      	mov	r1, r3
 80159b4:	460b      	mov	r3, r1
 80159b6:	005b      	lsls	r3, r3, #1
 80159b8:	440b      	add	r3, r1
 80159ba:	009b      	lsls	r3, r3, #2
 80159bc:	4413      	add	r3, r2
 80159be:	681a      	ldr	r2, [r3, #0]
 80159c0:	68fb      	ldr	r3, [r7, #12]
 80159c2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80159c6:	4619      	mov	r1, r3
 80159c8:	4610      	mov	r0, r2
 80159ca:	f001 fb05 	bl	8016fd8 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 80159ce:	68fb      	ldr	r3, [r7, #12]
 80159d0:	f993 2001 	ldrsb.w	r2, [r3, #1]
 80159d4:	68fb      	ldr	r3, [r7, #12]
 80159d6:	899b      	ldrh	r3, [r3, #12]
 80159d8:	4619      	mov	r1, r3
 80159da:	4610      	mov	r0, r2
 80159dc:	f7ff fa64 	bl	8014ea8 <GetTimeOnAir>
 80159e0:	4602      	mov	r2, r0
 80159e2:	687b      	ldr	r3, [r7, #4]
 80159e4:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 80159e6:	4b0c      	ldr	r3, [pc, #48]	@ (8015a18 <RegionAS923TxConfig+0x19c>)
 80159e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80159ea:	68fa      	ldr	r2, [r7, #12]
 80159ec:	8992      	ldrh	r2, [r2, #12]
 80159ee:	b2d1      	uxtb	r1, r2
 80159f0:	7ffa      	ldrb	r2, [r7, #31]
 80159f2:	4610      	mov	r0, r2
 80159f4:	4798      	blx	r3

    *txPower = txPowerLimited;
 80159f6:	68bb      	ldr	r3, [r7, #8]
 80159f8:	7f7a      	ldrb	r2, [r7, #29]
 80159fa:	701a      	strb	r2, [r3, #0]
    return true;
 80159fc:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_AS923 */
}
 80159fe:	4618      	mov	r0, r3
 8015a00:	3724      	adds	r7, #36	@ 0x24
 8015a02:	46bd      	mov	sp, r7
 8015a04:	bd90      	pop	{r4, r7, pc}
 8015a06:	bf00      	nop
 8015a08:	0801f4bc 	.word	0x0801f4bc
 8015a0c:	20001bd0 	.word	0x20001bd0
 8015a10:	20001bcc 	.word	0x20001bcc
 8015a14:	0801f4c4 	.word	0x0801f4c4
 8015a18:	0801f57c 	.word	0x0801f57c

08015a1c <RegionAS923LinkAdrReq>:

uint8_t RegionAS923LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8015a1c:	b590      	push	{r4, r7, lr}
 8015a1e:	b093      	sub	sp, #76	@ 0x4c
 8015a20:	af00      	add	r7, sp, #0
 8015a22:	60f8      	str	r0, [r7, #12]
 8015a24:	60b9      	str	r1, [r7, #8]
 8015a26:	607a      	str	r2, [r7, #4]
 8015a28:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 8015a2a:	2307      	movs	r3, #7
 8015a2c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
#if defined( REGION_AS923 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8015a30:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8015a34:	2200      	movs	r2, #0
 8015a36:	601a      	str	r2, [r3, #0]
 8015a38:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 8015a3a:	2300      	movs	r3, #0
 8015a3c:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
    uint8_t bytesProcessed = 0;
 8015a40:	2300      	movs	r3, #0
 8015a42:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    uint16_t chMask = 0;
 8015a46:	2300      	movs	r3, #0
 8015a48:	877b      	strh	r3, [r7, #58]	@ 0x3a
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8015a4a:	e085      	b.n	8015b58 <RegionAS923LinkAdrReq+0x13c>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8015a4c:	68fb      	ldr	r3, [r7, #12]
 8015a4e:	685a      	ldr	r2, [r3, #4]
 8015a50:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8015a54:	4413      	add	r3, r2
 8015a56:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8015a5a:	4611      	mov	r1, r2
 8015a5c:	4618      	mov	r0, r3
 8015a5e:	f000 ff0f 	bl	8016880 <RegionCommonParseLinkAdrReq>
 8015a62:	4603      	mov	r3, r0
 8015a64:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44

        if( nextIndex == 0 )
 8015a68:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8015a6c:	2b00      	cmp	r3, #0
 8015a6e:	d07b      	beq.n	8015b68 <RegionAS923LinkAdrReq+0x14c>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 8015a70:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8015a74:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8015a78:	4413      	add	r3, r2
 8015a7a:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 8015a7e:	2307      	movs	r3, #7
 8015a80:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 8015a84:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8015a88:	877b      	strh	r3, [r7, #58]	@ 0x3a

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 8015a8a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8015a8e:	2b00      	cmp	r3, #0
 8015a90:	d109      	bne.n	8015aa6 <RegionAS923LinkAdrReq+0x8a>
 8015a92:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8015a94:	2b00      	cmp	r3, #0
 8015a96:	d106      	bne.n	8015aa6 <RegionAS923LinkAdrReq+0x8a>
        {
            status &= 0xFE; // Channel mask KO
 8015a98:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015a9c:	f023 0301 	bic.w	r3, r3, #1
 8015aa0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8015aa4:	e058      	b.n	8015b58 <RegionAS923LinkAdrReq+0x13c>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8015aa6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8015aaa:	2b00      	cmp	r3, #0
 8015aac:	d003      	beq.n	8015ab6 <RegionAS923LinkAdrReq+0x9a>
 8015aae:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8015ab2:	2b05      	cmp	r3, #5
 8015ab4:	d903      	bls.n	8015abe <RegionAS923LinkAdrReq+0xa2>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 8015ab6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8015aba:	2b06      	cmp	r3, #6
 8015abc:	d906      	bls.n	8015acc <RegionAS923LinkAdrReq+0xb0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 8015abe:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015ac2:	f023 0301 	bic.w	r3, r3, #1
 8015ac6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8015aca:	e045      	b.n	8015b58 <RegionAS923LinkAdrReq+0x13c>
        }
        else
        {
            for( uint8_t i = 0; i < AS923_MAX_NB_CHANNELS; i++ )
 8015acc:	2300      	movs	r3, #0
 8015ace:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8015ad2:	e03d      	b.n	8015b50 <RegionAS923LinkAdrReq+0x134>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 8015ad4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8015ad8:	2b06      	cmp	r3, #6
 8015ada:	d118      	bne.n	8015b0e <RegionAS923LinkAdrReq+0xf2>
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 8015adc:	4b5f      	ldr	r3, [pc, #380]	@ (8015c5c <RegionAS923LinkAdrReq+0x240>)
 8015ade:	6819      	ldr	r1, [r3, #0]
 8015ae0:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8015ae4:	4613      	mov	r3, r2
 8015ae6:	005b      	lsls	r3, r3, #1
 8015ae8:	4413      	add	r3, r2
 8015aea:	009b      	lsls	r3, r3, #2
 8015aec:	440b      	add	r3, r1
 8015aee:	681b      	ldr	r3, [r3, #0]
 8015af0:	2b00      	cmp	r3, #0
 8015af2:	d028      	beq.n	8015b46 <RegionAS923LinkAdrReq+0x12a>
                    {
                        chMask |= 1 << i;
 8015af4:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8015af8:	2201      	movs	r2, #1
 8015afa:	fa02 f303 	lsl.w	r3, r2, r3
 8015afe:	b21a      	sxth	r2, r3
 8015b00:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8015b02:	b21b      	sxth	r3, r3
 8015b04:	4313      	orrs	r3, r2
 8015b06:	b21b      	sxth	r3, r3
 8015b08:	b29b      	uxth	r3, r3
 8015b0a:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8015b0c:	e01b      	b.n	8015b46 <RegionAS923LinkAdrReq+0x12a>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8015b0e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8015b10:	461a      	mov	r2, r3
 8015b12:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8015b16:	fa42 f303 	asr.w	r3, r2, r3
 8015b1a:	f003 0301 	and.w	r3, r3, #1
 8015b1e:	2b00      	cmp	r3, #0
 8015b20:	d011      	beq.n	8015b46 <RegionAS923LinkAdrReq+0x12a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 8015b22:	4b4e      	ldr	r3, [pc, #312]	@ (8015c5c <RegionAS923LinkAdrReq+0x240>)
 8015b24:	6819      	ldr	r1, [r3, #0]
 8015b26:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8015b2a:	4613      	mov	r3, r2
 8015b2c:	005b      	lsls	r3, r3, #1
 8015b2e:	4413      	add	r3, r2
 8015b30:	009b      	lsls	r3, r3, #2
 8015b32:	440b      	add	r3, r1
 8015b34:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8015b36:	2b00      	cmp	r3, #0
 8015b38:	d105      	bne.n	8015b46 <RegionAS923LinkAdrReq+0x12a>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 8015b3a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015b3e:	f023 0301 	bic.w	r3, r3, #1
 8015b42:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
            for( uint8_t i = 0; i < AS923_MAX_NB_CHANNELS; i++ )
 8015b46:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8015b4a:	3301      	adds	r3, #1
 8015b4c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8015b50:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8015b54:	2b0f      	cmp	r3, #15
 8015b56:	d9bd      	bls.n	8015ad4 <RegionAS923LinkAdrReq+0xb8>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8015b58:	68fb      	ldr	r3, [r7, #12]
 8015b5a:	7a1b      	ldrb	r3, [r3, #8]
 8015b5c:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8015b60:	429a      	cmp	r2, r3
 8015b62:	f4ff af73 	bcc.w	8015a4c <RegionAS923LinkAdrReq+0x30>
 8015b66:	e000      	b.n	8015b6a <RegionAS923LinkAdrReq+0x14e>
            break; // break loop, since no more request has been found
 8015b68:	bf00      	nop
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8015b6a:	2302      	movs	r3, #2
 8015b6c:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8015b70:	68fb      	ldr	r3, [r7, #12]
 8015b72:	7a5b      	ldrb	r3, [r3, #9]
 8015b74:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    phyParam = RegionAS923GetPhyParam( &getPhy );
 8015b78:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8015b7c:	4618      	mov	r0, r3
 8015b7e:	f7ff f9e3 	bl	8014f48 <RegionAS923GetPhyParam>
 8015b82:	4603      	mov	r3, r0
 8015b84:	633b      	str	r3, [r7, #48]	@ 0x30

    linkAdrVerifyParams.Status = status;
 8015b86:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015b8a:	753b      	strb	r3, [r7, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8015b8c:	68fb      	ldr	r3, [r7, #12]
 8015b8e:	7a9b      	ldrb	r3, [r3, #10]
 8015b90:	757b      	strb	r3, [r7, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8015b92:	f997 303d 	ldrsb.w	r3, [r7, #61]	@ 0x3d
 8015b96:	75bb      	strb	r3, [r7, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8015b98:	f997 303e 	ldrsb.w	r3, [r7, #62]	@ 0x3e
 8015b9c:	75fb      	strb	r3, [r7, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8015b9e:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8015ba2:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8015ba4:	68fb      	ldr	r3, [r7, #12]
 8015ba6:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8015baa:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8015bac:	68fb      	ldr	r3, [r7, #12]
 8015bae:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8015bb2:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8015bb4:	68fb      	ldr	r3, [r7, #12]
 8015bb6:	7b5b      	ldrb	r3, [r3, #13]
 8015bb8:	b25b      	sxtb	r3, r3
 8015bba:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbChannels = AS923_MAX_NB_CHANNELS;
 8015bbc:	2310      	movs	r3, #16
 8015bbe:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 8015bc0:	f107 033a 	add.w	r3, r7, #58	@ 0x3a
 8015bc4:	623b      	str	r3, [r7, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8015bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015bc8:	b25b      	sxtb	r3, r3
 8015bca:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    linkAdrVerifyParams.MaxDatarate = AS923_TX_MAX_DATARATE;
 8015bce:	2307      	movs	r3, #7
 8015bd0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8015bd4:	4b21      	ldr	r3, [pc, #132]	@ (8015c5c <RegionAS923LinkAdrReq+0x240>)
 8015bd6:	681b      	ldr	r3, [r3, #0]
 8015bd8:	62bb      	str	r3, [r7, #40]	@ 0x28
    linkAdrVerifyParams.MinTxPower = AS923_MIN_TX_POWER;
 8015bda:	2307      	movs	r3, #7
 8015bdc:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    linkAdrVerifyParams.MaxTxPower = AS923_MAX_TX_POWER;
 8015be0:	2300      	movs	r3, #0
 8015be2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8015be6:	68fb      	ldr	r3, [r7, #12]
 8015be8:	681b      	ldr	r3, [r3, #0]
 8015bea:	613b      	str	r3, [r7, #16]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8015bec:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8015bf0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8015bf4:	1c9a      	adds	r2, r3, #2
 8015bf6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8015bfa:	1c59      	adds	r1, r3, #1
 8015bfc:	f107 0010 	add.w	r0, r7, #16
 8015c00:	4623      	mov	r3, r4
 8015c02:	f000 fe8f 	bl	8016924 <RegionCommonLinkAdrReqVerifyParams>
 8015c06:	4603      	mov	r3, r0
 8015c08:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8015c0c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015c10:	2b07      	cmp	r3, #7
 8015c12:	d10d      	bne.n	8015c30 <RegionAS923LinkAdrReq+0x214>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 8015c14:	4b11      	ldr	r3, [pc, #68]	@ (8015c5c <RegionAS923LinkAdrReq+0x240>)
 8015c16:	681b      	ldr	r3, [r3, #0]
 8015c18:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8015c1c:	220c      	movs	r2, #12
 8015c1e:	2100      	movs	r1, #0
 8015c20:	4618      	mov	r0, r3
 8015c22:	f001 fa73 	bl	801710c <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 8015c26:	4b0d      	ldr	r3, [pc, #52]	@ (8015c5c <RegionAS923LinkAdrReq+0x240>)
 8015c28:	681b      	ldr	r3, [r3, #0]
 8015c2a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8015c2c:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8015c30:	f997 203d 	ldrsb.w	r2, [r7, #61]	@ 0x3d
 8015c34:	68bb      	ldr	r3, [r7, #8]
 8015c36:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8015c38:	f997 203e 	ldrsb.w	r2, [r7, #62]	@ 0x3e
 8015c3c:	687b      	ldr	r3, [r7, #4]
 8015c3e:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8015c40:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8015c44:	683b      	ldr	r3, [r7, #0]
 8015c46:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8015c48:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8015c4a:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8015c4e:	701a      	strb	r2, [r3, #0]

#endif /* REGION_AS923 */
    return status;
 8015c50:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8015c54:	4618      	mov	r0, r3
 8015c56:	374c      	adds	r7, #76	@ 0x4c
 8015c58:	46bd      	mov	sp, r7
 8015c5a:	bd90      	pop	{r4, r7, pc}
 8015c5c:	20001bcc 	.word	0x20001bcc

08015c60 <RegionAS923RxParamSetupReq>:

uint8_t RegionAS923RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8015c60:	b580      	push	{r7, lr}
 8015c62:	b084      	sub	sp, #16
 8015c64:	af00      	add	r7, sp, #0
 8015c66:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8015c68:	2307      	movs	r3, #7
 8015c6a:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_AS923 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 8015c6c:	687b      	ldr	r3, [r7, #4]
 8015c6e:	685b      	ldr	r3, [r3, #4]
 8015c70:	4618      	mov	r0, r3
 8015c72:	f7ff f8f3 	bl	8014e5c <VerifyRfFreq>
 8015c76:	4603      	mov	r3, r0
 8015c78:	f083 0301 	eor.w	r3, r3, #1
 8015c7c:	b2db      	uxtb	r3, r3
 8015c7e:	2b00      	cmp	r3, #0
 8015c80:	d003      	beq.n	8015c8a <RegionAS923RxParamSetupReq+0x2a>
    {
        status &= 0xFE; // Channel frequency KO
 8015c82:	7bfb      	ldrb	r3, [r7, #15]
 8015c84:	f023 0301 	bic.w	r3, r3, #1
 8015c88:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, AS923_RX_MIN_DATARATE, AS923_RX_MAX_DATARATE ) == false )
 8015c8a:	687b      	ldr	r3, [r7, #4]
 8015c8c:	f993 3000 	ldrsb.w	r3, [r3]
 8015c90:	2207      	movs	r2, #7
 8015c92:	2100      	movs	r1, #0
 8015c94:	4618      	mov	r0, r3
 8015c96:	f000 fc32 	bl	80164fe <RegionCommonValueInRange>
 8015c9a:	4603      	mov	r3, r0
 8015c9c:	2b00      	cmp	r3, #0
 8015c9e:	d103      	bne.n	8015ca8 <RegionAS923RxParamSetupReq+0x48>
    {
        status &= 0xFD; // Datarate KO
 8015ca0:	7bfb      	ldrb	r3, [r7, #15]
 8015ca2:	f023 0302 	bic.w	r3, r3, #2
 8015ca6:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, AS923_MIN_RX1_DR_OFFSET, AS923_MAX_RX1_DR_OFFSET ) == false )
 8015ca8:	687b      	ldr	r3, [r7, #4]
 8015caa:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015cae:	2207      	movs	r2, #7
 8015cb0:	2100      	movs	r1, #0
 8015cb2:	4618      	mov	r0, r3
 8015cb4:	f000 fc23 	bl	80164fe <RegionCommonValueInRange>
 8015cb8:	4603      	mov	r3, r0
 8015cba:	2b00      	cmp	r3, #0
 8015cbc:	d103      	bne.n	8015cc6 <RegionAS923RxParamSetupReq+0x66>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8015cbe:	7bfb      	ldrb	r3, [r7, #15]
 8015cc0:	f023 0304 	bic.w	r3, r3, #4
 8015cc4:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_AS923 */
    return status;
 8015cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8015cc8:	4618      	mov	r0, r3
 8015cca:	3710      	adds	r7, #16
 8015ccc:	46bd      	mov	sp, r7
 8015cce:	bd80      	pop	{r7, pc}

08015cd0 <RegionAS923NewChannelReq>:

int8_t RegionAS923NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8015cd0:	b580      	push	{r7, lr}
 8015cd2:	b086      	sub	sp, #24
 8015cd4:	af00      	add	r7, sp, #0
 8015cd6:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8015cd8:	2303      	movs	r3, #3
 8015cda:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 8015cdc:	687b      	ldr	r3, [r7, #4]
 8015cde:	681b      	ldr	r3, [r3, #0]
 8015ce0:	681b      	ldr	r3, [r3, #0]
 8015ce2:	2b00      	cmp	r3, #0
 8015ce4:	d114      	bne.n	8015d10 <RegionAS923NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 8015ce6:	687b      	ldr	r3, [r7, #4]
 8015ce8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8015cec:	b2db      	uxtb	r3, r3
 8015cee:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionAS923ChannelsRemove( &channelRemove ) == false )
 8015cf0:	f107 0308 	add.w	r3, r7, #8
 8015cf4:	4618      	mov	r0, r3
 8015cf6:	f000 f9eb 	bl	80160d0 <RegionAS923ChannelsRemove>
 8015cfa:	4603      	mov	r3, r0
 8015cfc:	f083 0301 	eor.w	r3, r3, #1
 8015d00:	b2db      	uxtb	r3, r3
 8015d02:	2b00      	cmp	r3, #0
 8015d04:	d03b      	beq.n	8015d7e <RegionAS923NewChannelReq+0xae>
        {
            status &= 0xFC;
 8015d06:	7dfb      	ldrb	r3, [r7, #23]
 8015d08:	f023 0303 	bic.w	r3, r3, #3
 8015d0c:	75fb      	strb	r3, [r7, #23]
 8015d0e:	e036      	b.n	8015d7e <RegionAS923NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 8015d10:	687b      	ldr	r3, [r7, #4]
 8015d12:	681b      	ldr	r3, [r3, #0]
 8015d14:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 8015d16:	687b      	ldr	r3, [r7, #4]
 8015d18:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8015d1c:	b2db      	uxtb	r3, r3
 8015d1e:	743b      	strb	r3, [r7, #16]

        switch( RegionAS923ChannelAdd( &channelAdd ) )
 8015d20:	f107 030c 	add.w	r3, r7, #12
 8015d24:	4618      	mov	r0, r3
 8015d26:	f000 f937 	bl	8015f98 <RegionAS923ChannelAdd>
 8015d2a:	4603      	mov	r3, r0
 8015d2c:	2b06      	cmp	r3, #6
 8015d2e:	d820      	bhi.n	8015d72 <RegionAS923NewChannelReq+0xa2>
 8015d30:	a201      	add	r2, pc, #4	@ (adr r2, 8015d38 <RegionAS923NewChannelReq+0x68>)
 8015d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015d36:	bf00      	nop
 8015d38:	08015d7d 	.word	0x08015d7d
 8015d3c:	08015d73 	.word	0x08015d73
 8015d40:	08015d73 	.word	0x08015d73
 8015d44:	08015d73 	.word	0x08015d73
 8015d48:	08015d55 	.word	0x08015d55
 8015d4c:	08015d5f 	.word	0x08015d5f
 8015d50:	08015d69 	.word	0x08015d69
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 8015d54:	7dfb      	ldrb	r3, [r7, #23]
 8015d56:	f023 0301 	bic.w	r3, r3, #1
 8015d5a:	75fb      	strb	r3, [r7, #23]
                break;
 8015d5c:	e00f      	b.n	8015d7e <RegionAS923NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 8015d5e:	7dfb      	ldrb	r3, [r7, #23]
 8015d60:	f023 0302 	bic.w	r3, r3, #2
 8015d64:	75fb      	strb	r3, [r7, #23]
                break;
 8015d66:	e00a      	b.n	8015d7e <RegionAS923NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 8015d68:	7dfb      	ldrb	r3, [r7, #23]
 8015d6a:	f023 0303 	bic.w	r3, r3, #3
 8015d6e:	75fb      	strb	r3, [r7, #23]
                break;
 8015d70:	e005      	b.n	8015d7e <RegionAS923NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 8015d72:	7dfb      	ldrb	r3, [r7, #23]
 8015d74:	f023 0303 	bic.w	r3, r3, #3
 8015d78:	75fb      	strb	r3, [r7, #23]
                break;
 8015d7a:	e000      	b.n	8015d7e <RegionAS923NewChannelReq+0xae>
                break;
 8015d7c:	bf00      	nop
            }
        }
    }

    return status;
 8015d7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015d82:	4618      	mov	r0, r3
 8015d84:	3718      	adds	r7, #24
 8015d86:	46bd      	mov	sp, r7
 8015d88:	bd80      	pop	{r7, pc}
 8015d8a:	bf00      	nop

08015d8c <RegionAS923TxParamSetupReq>:

int8_t RegionAS923TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8015d8c:	b480      	push	{r7}
 8015d8e:	b083      	sub	sp, #12
 8015d90:	af00      	add	r7, sp, #0
 8015d92:	6078      	str	r0, [r7, #4]
    // Accept the request
    return 0;
 8015d94:	2300      	movs	r3, #0
}
 8015d96:	4618      	mov	r0, r3
 8015d98:	370c      	adds	r7, #12
 8015d9a:	46bd      	mov	sp, r7
 8015d9c:	bc80      	pop	{r7}
 8015d9e:	4770      	bx	lr

08015da0 <RegionAS923DlChannelReq>:

int8_t RegionAS923DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8015da0:	b580      	push	{r7, lr}
 8015da2:	b084      	sub	sp, #16
 8015da4:	af00      	add	r7, sp, #0
 8015da6:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8015da8:	2303      	movs	r3, #3
 8015daa:	73fb      	strb	r3, [r7, #15]

#if defined( REGION_AS923 )
    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency ) == false )
 8015dac:	687b      	ldr	r3, [r7, #4]
 8015dae:	685b      	ldr	r3, [r3, #4]
 8015db0:	4618      	mov	r0, r3
 8015db2:	f7ff f853 	bl	8014e5c <VerifyRfFreq>
 8015db6:	4603      	mov	r3, r0
 8015db8:	f083 0301 	eor.w	r3, r3, #1
 8015dbc:	b2db      	uxtb	r3, r3
 8015dbe:	2b00      	cmp	r3, #0
 8015dc0:	d003      	beq.n	8015dca <RegionAS923DlChannelReq+0x2a>
    {
        status &= 0xFE;
 8015dc2:	7bfb      	ldrb	r3, [r7, #15]
 8015dc4:	f023 0301 	bic.w	r3, r3, #1
 8015dc8:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 8015dca:	4b14      	ldr	r3, [pc, #80]	@ (8015e1c <RegionAS923DlChannelReq+0x7c>)
 8015dcc:	681a      	ldr	r2, [r3, #0]
 8015dce:	687b      	ldr	r3, [r7, #4]
 8015dd0:	781b      	ldrb	r3, [r3, #0]
 8015dd2:	4619      	mov	r1, r3
 8015dd4:	460b      	mov	r3, r1
 8015dd6:	005b      	lsls	r3, r3, #1
 8015dd8:	440b      	add	r3, r1
 8015dda:	009b      	lsls	r3, r3, #2
 8015ddc:	4413      	add	r3, r2
 8015dde:	681b      	ldr	r3, [r3, #0]
 8015de0:	2b00      	cmp	r3, #0
 8015de2:	d103      	bne.n	8015dec <RegionAS923DlChannelReq+0x4c>
    {
        status &= 0xFD;
 8015de4:	7bfb      	ldrb	r3, [r7, #15]
 8015de6:	f023 0302 	bic.w	r3, r3, #2
 8015dea:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 8015dec:	7bfb      	ldrb	r3, [r7, #15]
 8015dee:	2b03      	cmp	r3, #3
 8015df0:	d10d      	bne.n	8015e0e <RegionAS923DlChannelReq+0x6e>
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 8015df2:	4b0a      	ldr	r3, [pc, #40]	@ (8015e1c <RegionAS923DlChannelReq+0x7c>)
 8015df4:	6819      	ldr	r1, [r3, #0]
 8015df6:	687b      	ldr	r3, [r7, #4]
 8015df8:	781b      	ldrb	r3, [r3, #0]
 8015dfa:	4618      	mov	r0, r3
 8015dfc:	687b      	ldr	r3, [r7, #4]
 8015dfe:	685a      	ldr	r2, [r3, #4]
 8015e00:	4603      	mov	r3, r0
 8015e02:	005b      	lsls	r3, r3, #1
 8015e04:	4403      	add	r3, r0
 8015e06:	009b      	lsls	r3, r3, #2
 8015e08:	440b      	add	r3, r1
 8015e0a:	3304      	adds	r3, #4
 8015e0c:	601a      	str	r2, [r3, #0]
    }

#endif /* REGION_AS923 */
    return status;
 8015e0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015e12:	4618      	mov	r0, r3
 8015e14:	3710      	adds	r7, #16
 8015e16:	46bd      	mov	sp, r7
 8015e18:	bd80      	pop	{r7, pc}
 8015e1a:	bf00      	nop
 8015e1c:	20001bcc 	.word	0x20001bcc

08015e20 <RegionAS923AlternateDr>:

int8_t RegionAS923AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8015e20:	b480      	push	{r7}
 8015e22:	b083      	sub	sp, #12
 8015e24:	af00      	add	r7, sp, #0
 8015e26:	4603      	mov	r3, r0
 8015e28:	460a      	mov	r2, r1
 8015e2a:	71fb      	strb	r3, [r7, #7]
 8015e2c:	4613      	mov	r3, r2
 8015e2e:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_AS923 )
    // Only AS923_DWELL_LIMIT_DATARATE is supported
    return AS923_DWELL_LIMIT_DATARATE;
 8015e30:	2302      	movs	r3, #2
#else
    return -1;
#endif /* REGION_AS923 */
}
 8015e32:	4618      	mov	r0, r3
 8015e34:	370c      	adds	r7, #12
 8015e36:	46bd      	mov	sp, r7
 8015e38:	bc80      	pop	{r7}
 8015e3a:	4770      	bx	lr

08015e3c <RegionAS923NextChannel>:

LoRaMacStatus_t RegionAS923NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8015e3c:	b580      	push	{r7, lr}
 8015e3e:	b09a      	sub	sp, #104	@ 0x68
 8015e40:	af02      	add	r7, sp, #8
 8015e42:	60f8      	str	r0, [r7, #12]
 8015e44:	60b9      	str	r1, [r7, #8]
 8015e46:	607a      	str	r2, [r7, #4]
 8015e48:	603b      	str	r3, [r7, #0]
#if defined( REGION_AS923 )
    uint8_t nbEnabledChannels = 0;
 8015e4a:	2300      	movs	r3, #0
 8015e4c:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
    uint8_t nbRestrictedChannels = 0;
 8015e50:	2300      	movs	r3, #0
 8015e52:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
    uint8_t enabledChannels[AS923_MAX_NB_CHANNELS] = { 0 };
 8015e56:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8015e5a:	2200      	movs	r2, #0
 8015e5c:	601a      	str	r2, [r3, #0]
 8015e5e:	605a      	str	r2, [r3, #4]
 8015e60:	609a      	str	r2, [r3, #8]
 8015e62:	60da      	str	r2, [r3, #12]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8015e64:	230c      	movs	r3, #12
 8015e66:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    uint16_t joinChannels = AS923_JOIN_CHANNELS;
 8015e6a:	2303      	movs	r3, #3
 8015e6c:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 8015e6e:	4b48      	ldr	r3, [pc, #288]	@ (8015f90 <RegionAS923NextChannel+0x154>)
 8015e70:	681b      	ldr	r3, [r3, #0]
 8015e72:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8015e76:	2201      	movs	r2, #1
 8015e78:	2100      	movs	r1, #0
 8015e7a:	4618      	mov	r0, r3
 8015e7c:	f000 fb90 	bl	80165a0 <RegionCommonCountChannels>
 8015e80:	4603      	mov	r3, r0
 8015e82:	2b00      	cmp	r3, #0
 8015e84:	d10a      	bne.n	8015e9c <RegionAS923NextChannel+0x60>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 );
 8015e86:	4b42      	ldr	r3, [pc, #264]	@ (8015f90 <RegionAS923NextChannel+0x154>)
 8015e88:	681b      	ldr	r3, [r3, #0]
 8015e8a:	f8b3 2360 	ldrh.w	r2, [r3, #864]	@ 0x360
 8015e8e:	4b40      	ldr	r3, [pc, #256]	@ (8015f90 <RegionAS923NextChannel+0x154>)
 8015e90:	681b      	ldr	r3, [r3, #0]
 8015e92:	f042 0203 	orr.w	r2, r2, #3
 8015e96:	b292      	uxth	r2, r2
 8015e98:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8015e9c:	68fb      	ldr	r3, [r7, #12]
 8015e9e:	7a5b      	ldrb	r3, [r3, #9]
 8015ea0:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8015ea2:	68fb      	ldr	r3, [r7, #12]
 8015ea4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8015ea8:	b2db      	uxtb	r3, r3
 8015eaa:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8015eac:	4b38      	ldr	r3, [pc, #224]	@ (8015f90 <RegionAS923NextChannel+0x154>)
 8015eae:	681b      	ldr	r3, [r3, #0]
 8015eb0:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8015eb4:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8015eb6:	4b36      	ldr	r3, [pc, #216]	@ (8015f90 <RegionAS923NextChannel+0x154>)
 8015eb8:	681b      	ldr	r3, [r3, #0]
 8015eba:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 8015ebc:	4b35      	ldr	r3, [pc, #212]	@ (8015f94 <RegionAS923NextChannel+0x158>)
 8015ebe:	681b      	ldr	r3, [r3, #0]
 8015ec0:	623b      	str	r3, [r7, #32]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = AS923_MAX_NB_CHANNELS;
 8015ec2:	2310      	movs	r3, #16
 8015ec4:	84bb      	strh	r3, [r7, #36]	@ 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 8015ec6:	f107 0312 	add.w	r3, r7, #18
 8015eca:	62bb      	str	r3, [r7, #40]	@ 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8015ecc:	68fb      	ldr	r3, [r7, #12]
 8015ece:	681b      	ldr	r3, [r3, #0]
 8015ed0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8015ed2:	68fb      	ldr	r3, [r7, #12]
 8015ed4:	685b      	ldr	r3, [r3, #4]
 8015ed6:	633b      	str	r3, [r7, #48]	@ 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8015ed8:	68fb      	ldr	r3, [r7, #12]
 8015eda:	7a9b      	ldrb	r3, [r3, #10]
 8015edc:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    identifyChannelsParam.MaxBands = AS923_MAX_NB_BANDS;
 8015ee0:	2301      	movs	r3, #1
 8015ee2:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8015ee6:	68fa      	ldr	r2, [r7, #12]
 8015ee8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8015eec:	320c      	adds	r2, #12
 8015eee:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015ef2:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8015ef6:	68fb      	ldr	r3, [r7, #12]
 8015ef8:	7d1b      	ldrb	r3, [r3, #20]
 8015efa:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8015efe:	68fb      	ldr	r3, [r7, #12]
 8015f00:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8015f04:	68fb      	ldr	r3, [r7, #12]
 8015f06:	8adb      	ldrh	r3, [r3, #22]
 8015f08:	4619      	mov	r1, r3
 8015f0a:	4610      	mov	r0, r2
 8015f0c:	f7fe ffcc 	bl	8014ea8 <GetTimeOnAir>
 8015f10:	4603      	mov	r3, r0
 8015f12:	647b      	str	r3, [r7, #68]	@ 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8015f14:	f107 0314 	add.w	r3, r7, #20
 8015f18:	64bb      	str	r3, [r7, #72]	@ 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8015f1a:	f107 015e 	add.w	r1, r7, #94	@ 0x5e
 8015f1e:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8015f22:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8015f26:	687b      	ldr	r3, [r7, #4]
 8015f28:	9301      	str	r3, [sp, #4]
 8015f2a:	f107 035d 	add.w	r3, r7, #93	@ 0x5d
 8015f2e:	9300      	str	r3, [sp, #0]
 8015f30:	460b      	mov	r3, r1
 8015f32:	6839      	ldr	r1, [r7, #0]
 8015f34:	f000 ff4b 	bl	8016dce <RegionCommonIdentifyChannels>
 8015f38:	4603      	mov	r3, r0
 8015f3a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8015f3e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8015f42:	2b00      	cmp	r3, #0
 8015f44:	d10e      	bne.n	8015f64 <RegionAS923NextChannel+0x128>
        // Even if one or more channels are available according to the channel plan, no free channel
        // was found during the LBT procedure.
        status = LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND;
#else
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8015f46:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8015f4a:	3b01      	subs	r3, #1
 8015f4c:	4619      	mov	r1, r3
 8015f4e:	2000      	movs	r0, #0
 8015f50:	f001 f88a 	bl	8017068 <randr>
 8015f54:	4603      	mov	r3, r0
 8015f56:	3360      	adds	r3, #96	@ 0x60
 8015f58:	443b      	add	r3, r7
 8015f5a:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8015f5e:	68bb      	ldr	r3, [r7, #8]
 8015f60:	701a      	strb	r2, [r3, #0]
 8015f62:	e00e      	b.n	8015f82 <RegionAS923NextChannel+0x146>
#endif
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 8015f64:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8015f68:	2b0c      	cmp	r3, #12
 8015f6a:	d10a      	bne.n	8015f82 <RegionAS923NextChannel+0x146>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 );
 8015f6c:	4b08      	ldr	r3, [pc, #32]	@ (8015f90 <RegionAS923NextChannel+0x154>)
 8015f6e:	681b      	ldr	r3, [r3, #0]
 8015f70:	f8b3 2360 	ldrh.w	r2, [r3, #864]	@ 0x360
 8015f74:	4b06      	ldr	r3, [pc, #24]	@ (8015f90 <RegionAS923NextChannel+0x154>)
 8015f76:	681b      	ldr	r3, [r3, #0]
 8015f78:	f042 0203 	orr.w	r2, r2, #3
 8015f7c:	b292      	uxth	r2, r2
 8015f7e:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    }
    return status;
 8015f82:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_AS923 */
}
 8015f86:	4618      	mov	r0, r3
 8015f88:	3760      	adds	r7, #96	@ 0x60
 8015f8a:	46bd      	mov	sp, r7
 8015f8c:	bd80      	pop	{r7, pc}
 8015f8e:	bf00      	nop
 8015f90:	20001bcc 	.word	0x20001bcc
 8015f94:	20001bd0 	.word	0x20001bd0

08015f98 <RegionAS923ChannelAdd>:

LoRaMacStatus_t RegionAS923ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8015f98:	b580      	push	{r7, lr}
 8015f9a:	b084      	sub	sp, #16
 8015f9c:	af00      	add	r7, sp, #0
 8015f9e:	6078      	str	r0, [r7, #4]
#if defined( REGION_AS923 )
    bool drInvalid = false;
 8015fa0:	2300      	movs	r3, #0
 8015fa2:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 8015fa4:	2300      	movs	r3, #0
 8015fa6:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 8015fa8:	687b      	ldr	r3, [r7, #4]
 8015faa:	791b      	ldrb	r3, [r3, #4]
 8015fac:	737b      	strb	r3, [r7, #13]

    if( id < AS923_NUMB_DEFAULT_CHANNELS )
 8015fae:	7b7b      	ldrb	r3, [r7, #13]
 8015fb0:	2b01      	cmp	r3, #1
 8015fb2:	d801      	bhi.n	8015fb8 <RegionAS923ChannelAdd+0x20>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8015fb4:	2306      	movs	r3, #6
 8015fb6:	e085      	b.n	80160c4 <RegionAS923ChannelAdd+0x12c>
    }

    if( id >= AS923_MAX_NB_CHANNELS )
 8015fb8:	7b7b      	ldrb	r3, [r7, #13]
 8015fba:	2b0f      	cmp	r3, #15
 8015fbc:	d901      	bls.n	8015fc2 <RegionAS923ChannelAdd+0x2a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8015fbe:	2303      	movs	r3, #3
 8015fc0:	e080      	b.n	80160c4 <RegionAS923ChannelAdd+0x12c>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, AS923_TX_MIN_DATARATE, AS923_TX_MAX_DATARATE ) == false )
 8015fc2:	687b      	ldr	r3, [r7, #4]
 8015fc4:	681b      	ldr	r3, [r3, #0]
 8015fc6:	7a1b      	ldrb	r3, [r3, #8]
 8015fc8:	f343 0303 	sbfx	r3, r3, #0, #4
 8015fcc:	b25b      	sxtb	r3, r3
 8015fce:	2207      	movs	r2, #7
 8015fd0:	2100      	movs	r1, #0
 8015fd2:	4618      	mov	r0, r3
 8015fd4:	f000 fa93 	bl	80164fe <RegionCommonValueInRange>
 8015fd8:	4603      	mov	r3, r0
 8015fda:	2b00      	cmp	r3, #0
 8015fdc:	d101      	bne.n	8015fe2 <RegionAS923ChannelAdd+0x4a>
    {
        drInvalid = true;
 8015fde:	2301      	movs	r3, #1
 8015fe0:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, AS923_TX_MIN_DATARATE, AS923_TX_MAX_DATARATE ) == false )
 8015fe2:	687b      	ldr	r3, [r7, #4]
 8015fe4:	681b      	ldr	r3, [r3, #0]
 8015fe6:	7a1b      	ldrb	r3, [r3, #8]
 8015fe8:	f343 1303 	sbfx	r3, r3, #4, #4
 8015fec:	b25b      	sxtb	r3, r3
 8015fee:	2207      	movs	r2, #7
 8015ff0:	2100      	movs	r1, #0
 8015ff2:	4618      	mov	r0, r3
 8015ff4:	f000 fa83 	bl	80164fe <RegionCommonValueInRange>
 8015ff8:	4603      	mov	r3, r0
 8015ffa:	2b00      	cmp	r3, #0
 8015ffc:	d101      	bne.n	8016002 <RegionAS923ChannelAdd+0x6a>
    {
        drInvalid = true;
 8015ffe:	2301      	movs	r3, #1
 8016000:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 8016002:	687b      	ldr	r3, [r7, #4]
 8016004:	681b      	ldr	r3, [r3, #0]
 8016006:	7a1b      	ldrb	r3, [r3, #8]
 8016008:	f343 0303 	sbfx	r3, r3, #0, #4
 801600c:	b25a      	sxtb	r2, r3
 801600e:	687b      	ldr	r3, [r7, #4]
 8016010:	681b      	ldr	r3, [r3, #0]
 8016012:	7a1b      	ldrb	r3, [r3, #8]
 8016014:	f343 1303 	sbfx	r3, r3, #4, #4
 8016018:	b25b      	sxtb	r3, r3
 801601a:	429a      	cmp	r2, r3
 801601c:	dd01      	ble.n	8016022 <RegionAS923ChannelAdd+0x8a>
    {
        drInvalid = true;
 801601e:	2301      	movs	r3, #1
 8016020:	73fb      	strb	r3, [r7, #15]
    }

    // Check frequency
    if( freqInvalid == false )
 8016022:	7bbb      	ldrb	r3, [r7, #14]
 8016024:	f083 0301 	eor.w	r3, r3, #1
 8016028:	b2db      	uxtb	r3, r3
 801602a:	2b00      	cmp	r3, #0
 801602c:	d00d      	beq.n	801604a <RegionAS923ChannelAdd+0xb2>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency ) == false )
 801602e:	687b      	ldr	r3, [r7, #4]
 8016030:	681b      	ldr	r3, [r3, #0]
 8016032:	681b      	ldr	r3, [r3, #0]
 8016034:	4618      	mov	r0, r3
 8016036:	f7fe ff11 	bl	8014e5c <VerifyRfFreq>
 801603a:	4603      	mov	r3, r0
 801603c:	f083 0301 	eor.w	r3, r3, #1
 8016040:	b2db      	uxtb	r3, r3
 8016042:	2b00      	cmp	r3, #0
 8016044:	d001      	beq.n	801604a <RegionAS923ChannelAdd+0xb2>
        {
            freqInvalid = true;
 8016046:	2301      	movs	r3, #1
 8016048:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 801604a:	7bfb      	ldrb	r3, [r7, #15]
 801604c:	2b00      	cmp	r3, #0
 801604e:	d004      	beq.n	801605a <RegionAS923ChannelAdd+0xc2>
 8016050:	7bbb      	ldrb	r3, [r7, #14]
 8016052:	2b00      	cmp	r3, #0
 8016054:	d001      	beq.n	801605a <RegionAS923ChannelAdd+0xc2>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8016056:	2306      	movs	r3, #6
 8016058:	e034      	b.n	80160c4 <RegionAS923ChannelAdd+0x12c>
    }
    if( drInvalid == true )
 801605a:	7bfb      	ldrb	r3, [r7, #15]
 801605c:	2b00      	cmp	r3, #0
 801605e:	d001      	beq.n	8016064 <RegionAS923ChannelAdd+0xcc>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 8016060:	2305      	movs	r3, #5
 8016062:	e02f      	b.n	80160c4 <RegionAS923ChannelAdd+0x12c>
    }
    if( freqInvalid == true )
 8016064:	7bbb      	ldrb	r3, [r7, #14]
 8016066:	2b00      	cmp	r3, #0
 8016068:	d001      	beq.n	801606e <RegionAS923ChannelAdd+0xd6>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 801606a:	2304      	movs	r3, #4
 801606c:	e02a      	b.n	80160c4 <RegionAS923ChannelAdd+0x12c>
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 801606e:	4b17      	ldr	r3, [pc, #92]	@ (80160cc <RegionAS923ChannelAdd+0x134>)
 8016070:	6819      	ldr	r1, [r3, #0]
 8016072:	7b7a      	ldrb	r2, [r7, #13]
 8016074:	4613      	mov	r3, r2
 8016076:	005b      	lsls	r3, r3, #1
 8016078:	4413      	add	r3, r2
 801607a:	009b      	lsls	r3, r3, #2
 801607c:	18c8      	adds	r0, r1, r3
 801607e:	687b      	ldr	r3, [r7, #4]
 8016080:	681b      	ldr	r3, [r3, #0]
 8016082:	220c      	movs	r2, #12
 8016084:	4619      	mov	r1, r3
 8016086:	f001 f806 	bl	8017096 <memcpy1>
    RegionNvmGroup2->Channels[id].Band = 0;
 801608a:	4b10      	ldr	r3, [pc, #64]	@ (80160cc <RegionAS923ChannelAdd+0x134>)
 801608c:	6819      	ldr	r1, [r3, #0]
 801608e:	7b7a      	ldrb	r2, [r7, #13]
 8016090:	4613      	mov	r3, r2
 8016092:	005b      	lsls	r3, r3, #1
 8016094:	4413      	add	r3, r2
 8016096:	009b      	lsls	r3, r3, #2
 8016098:	440b      	add	r3, r1
 801609a:	3309      	adds	r3, #9
 801609c:	2200      	movs	r2, #0
 801609e:	701a      	strb	r2, [r3, #0]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 80160a0:	4b0a      	ldr	r3, [pc, #40]	@ (80160cc <RegionAS923ChannelAdd+0x134>)
 80160a2:	681b      	ldr	r3, [r3, #0]
 80160a4:	f8b3 3360 	ldrh.w	r3, [r3, #864]	@ 0x360
 80160a8:	b21a      	sxth	r2, r3
 80160aa:	7b7b      	ldrb	r3, [r7, #13]
 80160ac:	2101      	movs	r1, #1
 80160ae:	fa01 f303 	lsl.w	r3, r1, r3
 80160b2:	b21b      	sxth	r3, r3
 80160b4:	4313      	orrs	r3, r2
 80160b6:	b21a      	sxth	r2, r3
 80160b8:	4b04      	ldr	r3, [pc, #16]	@ (80160cc <RegionAS923ChannelAdd+0x134>)
 80160ba:	681b      	ldr	r3, [r3, #0]
 80160bc:	b292      	uxth	r2, r2
 80160be:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    return LORAMAC_STATUS_OK;
 80160c2:	2300      	movs	r3, #0
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_AS923 */
}
 80160c4:	4618      	mov	r0, r3
 80160c6:	3710      	adds	r7, #16
 80160c8:	46bd      	mov	sp, r7
 80160ca:	bd80      	pop	{r7, pc}
 80160cc:	20001bcc 	.word	0x20001bcc

080160d0 <RegionAS923ChannelsRemove>:

bool RegionAS923ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 80160d0:	b580      	push	{r7, lr}
 80160d2:	b086      	sub	sp, #24
 80160d4:	af00      	add	r7, sp, #0
 80160d6:	6078      	str	r0, [r7, #4]
#if defined( REGION_AS923 )
    uint8_t id = channelRemove->ChannelId;
 80160d8:	687b      	ldr	r3, [r7, #4]
 80160da:	781b      	ldrb	r3, [r3, #0]
 80160dc:	75fb      	strb	r3, [r7, #23]

    if( id < AS923_NUMB_DEFAULT_CHANNELS )
 80160de:	7dfb      	ldrb	r3, [r7, #23]
 80160e0:	2b01      	cmp	r3, #1
 80160e2:	d801      	bhi.n	80160e8 <RegionAS923ChannelsRemove+0x18>
    {
        return false;
 80160e4:	2300      	movs	r3, #0
 80160e6:	e016      	b.n	8016116 <RegionAS923ChannelsRemove+0x46>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 80160e8:	4b0d      	ldr	r3, [pc, #52]	@ (8016120 <RegionAS923ChannelsRemove+0x50>)
 80160ea:	6819      	ldr	r1, [r3, #0]
 80160ec:	7dfa      	ldrb	r2, [r7, #23]
 80160ee:	4613      	mov	r3, r2
 80160f0:	005b      	lsls	r3, r3, #1
 80160f2:	4413      	add	r3, r2
 80160f4:	009b      	lsls	r3, r3, #2
 80160f6:	440b      	add	r3, r1
 80160f8:	461a      	mov	r2, r3
 80160fa:	2300      	movs	r3, #0
 80160fc:	6013      	str	r3, [r2, #0]
 80160fe:	6053      	str	r3, [r2, #4]
 8016100:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, AS923_MAX_NB_CHANNELS );
 8016102:	4b07      	ldr	r3, [pc, #28]	@ (8016120 <RegionAS923ChannelsRemove+0x50>)
 8016104:	681b      	ldr	r3, [r3, #0]
 8016106:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 801610a:	7df9      	ldrb	r1, [r7, #23]
 801610c:	2210      	movs	r2, #16
 801610e:	4618      	mov	r0, r3
 8016110:	f000 fa12 	bl	8016538 <RegionCommonChanDisable>
 8016114:	4603      	mov	r3, r0
#else
    return false;
#endif /* REGION_AS923 */
}
 8016116:	4618      	mov	r0, r3
 8016118:	3718      	adds	r7, #24
 801611a:	46bd      	mov	sp, r7
 801611c:	bd80      	pop	{r7, pc}
 801611e:	bf00      	nop
 8016120:	20001bcc 	.word	0x20001bcc

08016124 <RegionAS923ApplyDrOffset>:
#endif /* REGION_AS923 */

}
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
uint8_t RegionAS923ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8016124:	b480      	push	{r7}
 8016126:	b085      	sub	sp, #20
 8016128:	af00      	add	r7, sp, #0
 801612a:	4603      	mov	r3, r0
 801612c:	71fb      	strb	r3, [r7, #7]
 801612e:	460b      	mov	r3, r1
 8016130:	71bb      	strb	r3, [r7, #6]
 8016132:	4613      	mov	r3, r2
 8016134:	717b      	strb	r3, [r7, #5]
#if defined( REGION_AS923 )
    // Initialize minDr
    int8_t minDr;

    if( downlinkDwellTime == 0 )
 8016136:	79fb      	ldrb	r3, [r7, #7]
 8016138:	2b00      	cmp	r3, #0
 801613a:	d10a      	bne.n	8016152 <RegionAS923ApplyDrOffset+0x2e>
    {
        // Update the minDR for a downlink dwell time configuration of 0
        minDr = EffectiveRx1DrOffsetDownlinkDwell0AS923[dr][drOffset];
 801613c:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8016140:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8016144:	490b      	ldr	r1, [pc, #44]	@ (8016174 <RegionAS923ApplyDrOffset+0x50>)
 8016146:	00d2      	lsls	r2, r2, #3
 8016148:	440a      	add	r2, r1
 801614a:	4413      	add	r3, r2
 801614c:	781b      	ldrb	r3, [r3, #0]
 801614e:	73fb      	strb	r3, [r7, #15]
 8016150:	e009      	b.n	8016166 <RegionAS923ApplyDrOffset+0x42>
    }
    else
    {
        // Update the minDR for a downlink dwell time configuration of 1
        minDr = EffectiveRx1DrOffsetDownlinkDwell1AS923[dr][drOffset];
 8016152:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8016156:	f997 3005 	ldrsb.w	r3, [r7, #5]
 801615a:	4907      	ldr	r1, [pc, #28]	@ (8016178 <RegionAS923ApplyDrOffset+0x54>)
 801615c:	00d2      	lsls	r2, r2, #3
 801615e:	440a      	add	r2, r1
 8016160:	4413      	add	r3, r2
 8016162:	781b      	ldrb	r3, [r3, #0]
 8016164:	73fb      	strb	r3, [r7, #15]
    }

    return minDr;
 8016166:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_AS923 */

}
 8016168:	4618      	mov	r0, r3
 801616a:	3714      	adds	r7, #20
 801616c:	46bd      	mov	sp, r7
 801616e:	bc80      	pop	{r7}
 8016170:	4770      	bx	lr
 8016172:	bf00      	nop
 8016174:	0801f4fc 	.word	0x0801f4fc
 8016178:	0801f53c 	.word	0x0801f53c

0801617c <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 801617c:	b480      	push	{r7}
 801617e:	b087      	sub	sp, #28
 8016180:	af00      	add	r7, sp, #0
 8016182:	60f8      	str	r0, [r7, #12]
 8016184:	4608      	mov	r0, r1
 8016186:	4639      	mov	r1, r7
 8016188:	e881 000c 	stmia.w	r1, {r2, r3}
 801618c:	4603      	mov	r3, r0
 801618e:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8016190:	68fb      	ldr	r3, [r7, #12]
 8016192:	881b      	ldrh	r3, [r3, #0]
 8016194:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 8016196:	7afb      	ldrb	r3, [r7, #11]
 8016198:	f083 0301 	eor.w	r3, r3, #1
 801619c:	b2db      	uxtb	r3, r3
 801619e:	2b00      	cmp	r3, #0
 80161a0:	d01b      	beq.n	80161da <GetDutyCycle+0x5e>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 80161a2:	f242 7310 	movw	r3, #10000	@ 0x2710
 80161a6:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 80161a8:	683b      	ldr	r3, [r7, #0]
 80161aa:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 80161ae:	d202      	bcs.n	80161b6 <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 80161b0:	2364      	movs	r3, #100	@ 0x64
 80161b2:	82bb      	strh	r3, [r7, #20]
 80161b4:	e00b      	b.n	80161ce <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 80161b6:	683b      	ldr	r3, [r7, #0]
 80161b8:	f649 22af 	movw	r2, #39599	@ 0x9aaf
 80161bc:	4293      	cmp	r3, r2
 80161be:	d803      	bhi.n	80161c8 <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 80161c0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80161c4:	82bb      	strh	r3, [r7, #20]
 80161c6:	e002      	b.n	80161ce <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 80161c8:	f242 7310 	movw	r3, #10000	@ 0x2710
 80161cc:	82bb      	strh	r3, [r7, #20]
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 80161ce:	8aba      	ldrh	r2, [r7, #20]
 80161d0:	8afb      	ldrh	r3, [r7, #22]
 80161d2:	4293      	cmp	r3, r2
 80161d4:	bf38      	it	cc
 80161d6:	4613      	movcc	r3, r2
 80161d8:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 80161da:	8afb      	ldrh	r3, [r7, #22]
 80161dc:	2b00      	cmp	r3, #0
 80161de:	d101      	bne.n	80161e4 <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 80161e0:	2301      	movs	r3, #1
 80161e2:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 80161e4:	8afb      	ldrh	r3, [r7, #22]
}
 80161e6:	4618      	mov	r0, r3
 80161e8:	371c      	adds	r7, #28
 80161ea:	46bd      	mov	sp, r7
 80161ec:	bc80      	pop	{r7}
 80161ee:	4770      	bx	lr

080161f0 <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 80161f0:	b580      	push	{r7, lr}
 80161f2:	b08e      	sub	sp, #56	@ 0x38
 80161f4:	af02      	add	r7, sp, #8
 80161f6:	60f8      	str	r0, [r7, #12]
 80161f8:	4608      	mov	r0, r1
 80161fa:	4639      	mov	r1, r7
 80161fc:	e881 000c 	stmia.w	r1, {r2, r3}
 8016200:	4603      	mov	r3, r0
 8016202:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8016204:	68fb      	ldr	r3, [r7, #12]
 8016206:	881b      	ldrh	r3, [r3, #0]
 8016208:	857b      	strh	r3, [r7, #42]	@ 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 801620a:	4b4b      	ldr	r3, [pc, #300]	@ (8016338 <SetMaxTimeCredits+0x148>)
 801620c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 801620e:	463b      	mov	r3, r7
 8016210:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016214:	f004 fb7e 	bl	801a914 <SysTimeToMs>
 8016218:	6278      	str	r0, [r7, #36]	@ 0x24
    SysTime_t timeDiff = { 0 };
 801621a:	f107 0314 	add.w	r3, r7, #20
 801621e:	2200      	movs	r2, #0
 8016220:	601a      	str	r2, [r3, #0]
 8016222:	605a      	str	r2, [r3, #4]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8016224:	7af9      	ldrb	r1, [r7, #11]
 8016226:	463b      	mov	r3, r7
 8016228:	cb0c      	ldmia	r3, {r2, r3}
 801622a:	68f8      	ldr	r0, [r7, #12]
 801622c:	f7ff ffa6 	bl	801617c <GetDutyCycle>
 8016230:	4603      	mov	r3, r0
 8016232:	857b      	strh	r3, [r7, #42]	@ 0x2a

    if( joined == false )
 8016234:	7afb      	ldrb	r3, [r7, #11]
 8016236:	f083 0301 	eor.w	r3, r3, #1
 801623a:	b2db      	uxtb	r3, r3
 801623c:	2b00      	cmp	r3, #0
 801623e:	d062      	beq.n	8016306 <SetMaxTimeCredits+0x116>
    {
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 8016240:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8016242:	2b64      	cmp	r3, #100	@ 0x64
 8016244:	d105      	bne.n	8016252 <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8016246:	4b3c      	ldr	r3, [pc, #240]	@ (8016338 <SetMaxTimeCredits+0x148>)
 8016248:	62fb      	str	r3, [r7, #44]	@ 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 801624a:	68fb      	ldr	r3, [r7, #12]
 801624c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801624e:	609a      	str	r2, [r3, #8]
 8016250:	e00b      	b.n	801626a <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8016252:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8016254:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8016258:	d105      	bne.n	8016266 <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 801625a:	4b38      	ldr	r3, [pc, #224]	@ (801633c <SetMaxTimeCredits+0x14c>)
 801625c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 801625e:	68fb      	ldr	r3, [r7, #12]
 8016260:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016262:	609a      	str	r2, [r3, #8]
 8016264:	e001      	b.n	801626a <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 8016266:	4b36      	ldr	r3, [pc, #216]	@ (8016340 <SetMaxTimeCredits+0x150>)
 8016268:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 801626a:	68fb      	ldr	r3, [r7, #12]
 801626c:	689a      	ldr	r2, [r3, #8]
 801626e:	f107 031c 	add.w	r3, r7, #28
 8016272:	4611      	mov	r1, r2
 8016274:	4618      	mov	r0, r3
 8016276:	f004 fb75 	bl	801a964 <SysTimeFromMs>
 801627a:	f107 0014 	add.w	r0, r7, #20
 801627e:	6a3b      	ldr	r3, [r7, #32]
 8016280:	9300      	str	r3, [sp, #0]
 8016282:	69fb      	ldr	r3, [r7, #28]
 8016284:	463a      	mov	r2, r7
 8016286:	ca06      	ldmia	r2, {r1, r2}
 8016288:	f004 fa85 	bl	801a796 <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 801628c:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8016290:	f083 0301 	eor.w	r3, r3, #1
 8016294:	b2db      	uxtb	r3, r3
 8016296:	2b00      	cmp	r3, #0
 8016298:	d006      	beq.n	80162a8 <SetMaxTimeCredits+0xb8>
 801629a:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 801629e:	f083 0301 	eor.w	r3, r3, #1
 80162a2:	b2db      	uxtb	r3, r3
 80162a4:	2b00      	cmp	r3, #0
 80162a6:	d108      	bne.n	80162ba <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 80162a8:	68fb      	ldr	r3, [r7, #12]
 80162aa:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 80162ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80162ae:	429a      	cmp	r2, r3
 80162b0:	d103      	bne.n	80162ba <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 80162b2:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 80162b4:	4a23      	ldr	r2, [pc, #140]	@ (8016344 <SetMaxTimeCredits+0x154>)
 80162b6:	4293      	cmp	r3, r2
 80162b8:	d92f      	bls.n	801631a <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 80162ba:	68fb      	ldr	r3, [r7, #12]
 80162bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80162be:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 80162c0:	683b      	ldr	r3, [r7, #0]
 80162c2:	4a21      	ldr	r2, [pc, #132]	@ (8016348 <SetMaxTimeCredits+0x158>)
 80162c4:	4293      	cmp	r3, r2
 80162c6:	d928      	bls.n	801631a <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 80162c8:	683b      	ldr	r3, [r7, #0]
 80162ca:	f5a3 33f6 	sub.w	r3, r3, #125952	@ 0x1ec00
 80162ce:	3b30      	subs	r3, #48	@ 0x30
 80162d0:	4a1e      	ldr	r2, [pc, #120]	@ (801634c <SetMaxTimeCredits+0x15c>)
 80162d2:	fba2 2303 	umull	r2, r3, r2, r3
 80162d6:	0c1b      	lsrs	r3, r3, #16
 80162d8:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 80162da:	697b      	ldr	r3, [r7, #20]
 80162dc:	4a1c      	ldr	r2, [pc, #112]	@ (8016350 <SetMaxTimeCredits+0x160>)
 80162de:	fb02 f303 	mul.w	r3, r2, r3
 80162e2:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 80162e4:	697b      	ldr	r3, [r7, #20]
 80162e6:	f503 33f6 	add.w	r3, r3, #125952	@ 0x1ec00
 80162ea:	3330      	adds	r3, #48	@ 0x30
 80162ec:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 80162ee:	2300      	movs	r3, #0
 80162f0:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 80162f2:	f107 0314 	add.w	r3, r7, #20
 80162f6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80162fa:	f004 fb0b 	bl	801a914 <SysTimeToMs>
 80162fe:	4602      	mov	r2, r0
 8016300:	68fb      	ldr	r3, [r7, #12]
 8016302:	609a      	str	r2, [r3, #8]
 8016304:	e009      	b.n	801631a <SetMaxTimeCredits+0x12a>
            }
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 8016306:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 801630a:	f083 0301 	eor.w	r3, r3, #1
 801630e:	b2db      	uxtb	r3, r3
 8016310:	2b00      	cmp	r3, #0
 8016312:	d002      	beq.n	801631a <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 8016314:	68fb      	ldr	r3, [r7, #12]
 8016316:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016318:	60da      	str	r2, [r3, #12]
        }
    }

    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 801631a:	68fb      	ldr	r3, [r7, #12]
 801631c:	685b      	ldr	r3, [r3, #4]
 801631e:	2b00      	cmp	r3, #0
 8016320:	d102      	bne.n	8016328 <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 8016322:	68fb      	ldr	r3, [r7, #12]
 8016324:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016326:	60da      	str	r2, [r3, #12]
    }

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 8016328:	68fb      	ldr	r3, [r7, #12]
 801632a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801632c:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 801632e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
}
 8016330:	4618      	mov	r0, r3
 8016332:	3730      	adds	r7, #48	@ 0x30
 8016334:	46bd      	mov	sp, r7
 8016336:	bd80      	pop	{r7, pc}
 8016338:	001b7740 	.word	0x001b7740
 801633c:	0112a880 	.word	0x0112a880
 8016340:	02932e00 	.word	0x02932e00
 8016344:	0001517f 	.word	0x0001517f
 8016348:	0001ec2f 	.word	0x0001ec2f
 801634c:	c22e4507 	.word	0xc22e4507
 8016350:	00015180 	.word	0x00015180

08016354 <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 8016354:	b580      	push	{r7, lr}
 8016356:	b086      	sub	sp, #24
 8016358:	af02      	add	r7, sp, #8
 801635a:	6078      	str	r0, [r7, #4]
 801635c:	4608      	mov	r0, r1
 801635e:	4611      	mov	r1, r2
 8016360:	461a      	mov	r2, r3
 8016362:	4603      	mov	r3, r0
 8016364:	70fb      	strb	r3, [r7, #3]
 8016366:	460b      	mov	r3, r1
 8016368:	70bb      	strb	r3, [r7, #2]
 801636a:	4613      	mov	r3, r2
 801636c:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 801636e:	78f9      	ldrb	r1, [r7, #3]
 8016370:	787b      	ldrb	r3, [r7, #1]
 8016372:	9301      	str	r3, [sp, #4]
 8016374:	78bb      	ldrb	r3, [r7, #2]
 8016376:	9300      	str	r3, [sp, #0]
 8016378:	f107 0318 	add.w	r3, r7, #24
 801637c:	cb0c      	ldmia	r3, {r2, r3}
 801637e:	6878      	ldr	r0, [r7, #4]
 8016380:	f7ff ff36 	bl	80161f0 <SetMaxTimeCredits>
 8016384:	4603      	mov	r3, r0
 8016386:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 8016388:	78fb      	ldrb	r3, [r7, #3]
 801638a:	2b00      	cmp	r3, #0
 801638c:	d00a      	beq.n	80163a4 <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 801638e:	687b      	ldr	r3, [r7, #4]
 8016390:	685b      	ldr	r3, [r3, #4]
 8016392:	4618      	mov	r0, r3
 8016394:	f005 f8f8 	bl	801b588 <UTIL_TIMER_GetElapsedTime>
 8016398:	4602      	mov	r2, r0
 801639a:	687b      	ldr	r3, [r7, #4]
 801639c:	68db      	ldr	r3, [r3, #12]
 801639e:	441a      	add	r2, r3
 80163a0:	687b      	ldr	r3, [r7, #4]
 80163a2:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 80163a4:	687b      	ldr	r3, [r7, #4]
 80163a6:	68da      	ldr	r2, [r3, #12]
 80163a8:	687b      	ldr	r3, [r7, #4]
 80163aa:	691b      	ldr	r3, [r3, #16]
 80163ac:	429a      	cmp	r2, r3
 80163ae:	d903      	bls.n	80163b8 <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 80163b0:	687b      	ldr	r3, [r7, #4]
 80163b2:	691a      	ldr	r2, [r3, #16]
 80163b4:	687b      	ldr	r3, [r7, #4]
 80163b6:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 80163b8:	687b      	ldr	r3, [r7, #4]
 80163ba:	6a3a      	ldr	r2, [r7, #32]
 80163bc:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 80163be:	89fb      	ldrh	r3, [r7, #14]
}
 80163c0:	4618      	mov	r0, r3
 80163c2:	3710      	adds	r7, #16
 80163c4:	46bd      	mov	sp, r7
 80163c6:	bd80      	pop	{r7, pc}

080163c8 <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 80163c8:	b480      	push	{r7}
 80163ca:	b085      	sub	sp, #20
 80163cc:	af00      	add	r7, sp, #0
 80163ce:	4603      	mov	r3, r0
 80163d0:	460a      	mov	r2, r1
 80163d2:	80fb      	strh	r3, [r7, #6]
 80163d4:	4613      	mov	r3, r2
 80163d6:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 80163d8:	2300      	movs	r3, #0
 80163da:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 80163dc:	2300      	movs	r3, #0
 80163de:	73bb      	strb	r3, [r7, #14]
 80163e0:	e011      	b.n	8016406 <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 80163e2:	88fa      	ldrh	r2, [r7, #6]
 80163e4:	7bbb      	ldrb	r3, [r7, #14]
 80163e6:	2101      	movs	r1, #1
 80163e8:	fa01 f303 	lsl.w	r3, r1, r3
 80163ec:	401a      	ands	r2, r3
 80163ee:	7bbb      	ldrb	r3, [r7, #14]
 80163f0:	2101      	movs	r1, #1
 80163f2:	fa01 f303 	lsl.w	r3, r1, r3
 80163f6:	429a      	cmp	r2, r3
 80163f8:	d102      	bne.n	8016400 <CountChannels+0x38>
        {
            nbActiveBits++;
 80163fa:	7bfb      	ldrb	r3, [r7, #15]
 80163fc:	3301      	adds	r3, #1
 80163fe:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 8016400:	7bbb      	ldrb	r3, [r7, #14]
 8016402:	3301      	adds	r3, #1
 8016404:	73bb      	strb	r3, [r7, #14]
 8016406:	7bba      	ldrb	r2, [r7, #14]
 8016408:	797b      	ldrb	r3, [r7, #5]
 801640a:	429a      	cmp	r2, r3
 801640c:	d3e9      	bcc.n	80163e2 <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 801640e:	7bfb      	ldrb	r3, [r7, #15]
}
 8016410:	4618      	mov	r0, r3
 8016412:	3714      	adds	r7, #20
 8016414:	46bd      	mov	sp, r7
 8016416:	bc80      	pop	{r7}
 8016418:	4770      	bx	lr

0801641a <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 801641a:	b580      	push	{r7, lr}
 801641c:	b084      	sub	sp, #16
 801641e:	af00      	add	r7, sp, #0
 8016420:	6039      	str	r1, [r7, #0]
 8016422:	4611      	mov	r1, r2
 8016424:	461a      	mov	r2, r3
 8016426:	4603      	mov	r3, r0
 8016428:	71fb      	strb	r3, [r7, #7]
 801642a:	460b      	mov	r3, r1
 801642c:	71bb      	strb	r3, [r7, #6]
 801642e:	4613      	mov	r3, r2
 8016430:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 8016432:	f997 2018 	ldrsb.w	r2, [r7, #24]
 8016436:	f997 1005 	ldrsb.w	r1, [r7, #5]
 801643a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801643e:	4618      	mov	r0, r3
 8016440:	f000 f85d 	bl	80164fe <RegionCommonValueInRange>
 8016444:	4603      	mov	r3, r0
 8016446:	2b00      	cmp	r3, #0
 8016448:	d101      	bne.n	801644e <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 801644a:	2300      	movs	r3, #0
 801644c:	e053      	b.n	80164f6 <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 801644e:	2300      	movs	r3, #0
 8016450:	73fb      	strb	r3, [r7, #15]
 8016452:	2300      	movs	r3, #0
 8016454:	73bb      	strb	r3, [r7, #14]
 8016456:	e049      	b.n	80164ec <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8016458:	2300      	movs	r3, #0
 801645a:	737b      	strb	r3, [r7, #13]
 801645c:	e03d      	b.n	80164da <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 801645e:	7bbb      	ldrb	r3, [r7, #14]
 8016460:	005b      	lsls	r3, r3, #1
 8016462:	683a      	ldr	r2, [r7, #0]
 8016464:	4413      	add	r3, r2
 8016466:	881b      	ldrh	r3, [r3, #0]
 8016468:	461a      	mov	r2, r3
 801646a:	7b7b      	ldrb	r3, [r7, #13]
 801646c:	fa42 f303 	asr.w	r3, r2, r3
 8016470:	f003 0301 	and.w	r3, r3, #1
 8016474:	2b00      	cmp	r3, #0
 8016476:	d02d      	beq.n	80164d4 <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8016478:	7bfa      	ldrb	r2, [r7, #15]
 801647a:	7b7b      	ldrb	r3, [r7, #13]
 801647c:	4413      	add	r3, r2
 801647e:	461a      	mov	r2, r3
 8016480:	4613      	mov	r3, r2
 8016482:	005b      	lsls	r3, r3, #1
 8016484:	4413      	add	r3, r2
 8016486:	009b      	lsls	r3, r3, #2
 8016488:	461a      	mov	r2, r3
 801648a:	69fb      	ldr	r3, [r7, #28]
 801648c:	4413      	add	r3, r2
 801648e:	7a1b      	ldrb	r3, [r3, #8]
 8016490:	f343 0303 	sbfx	r3, r3, #0, #4
 8016494:	b25b      	sxtb	r3, r3
 8016496:	f003 030f 	and.w	r3, r3, #15
 801649a:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 801649c:	7bfa      	ldrb	r2, [r7, #15]
 801649e:	7b7b      	ldrb	r3, [r7, #13]
 80164a0:	4413      	add	r3, r2
 80164a2:	461a      	mov	r2, r3
 80164a4:	4613      	mov	r3, r2
 80164a6:	005b      	lsls	r3, r3, #1
 80164a8:	4413      	add	r3, r2
 80164aa:	009b      	lsls	r3, r3, #2
 80164ac:	461a      	mov	r2, r3
 80164ae:	69fb      	ldr	r3, [r7, #28]
 80164b0:	4413      	add	r3, r2
 80164b2:	7a1b      	ldrb	r3, [r3, #8]
 80164b4:	f343 1303 	sbfx	r3, r3, #4, #4
 80164b8:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 80164ba:	f003 030f 	and.w	r3, r3, #15
 80164be:	b25a      	sxtb	r2, r3
 80164c0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80164c4:	4618      	mov	r0, r3
 80164c6:	f000 f81a 	bl	80164fe <RegionCommonValueInRange>
 80164ca:	4603      	mov	r3, r0
 80164cc:	2b01      	cmp	r3, #1
 80164ce:	d101      	bne.n	80164d4 <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 80164d0:	2301      	movs	r3, #1
 80164d2:	e010      	b.n	80164f6 <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 80164d4:	7b7b      	ldrb	r3, [r7, #13]
 80164d6:	3301      	adds	r3, #1
 80164d8:	737b      	strb	r3, [r7, #13]
 80164da:	7b7b      	ldrb	r3, [r7, #13]
 80164dc:	2b0f      	cmp	r3, #15
 80164de:	d9be      	bls.n	801645e <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 80164e0:	7bfb      	ldrb	r3, [r7, #15]
 80164e2:	3310      	adds	r3, #16
 80164e4:	73fb      	strb	r3, [r7, #15]
 80164e6:	7bbb      	ldrb	r3, [r7, #14]
 80164e8:	3301      	adds	r3, #1
 80164ea:	73bb      	strb	r3, [r7, #14]
 80164ec:	7bfa      	ldrb	r2, [r7, #15]
 80164ee:	79fb      	ldrb	r3, [r7, #7]
 80164f0:	429a      	cmp	r2, r3
 80164f2:	d3b1      	bcc.n	8016458 <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 80164f4:	2300      	movs	r3, #0
}
 80164f6:	4618      	mov	r0, r3
 80164f8:	3710      	adds	r7, #16
 80164fa:	46bd      	mov	sp, r7
 80164fc:	bd80      	pop	{r7, pc}

080164fe <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 80164fe:	b480      	push	{r7}
 8016500:	b083      	sub	sp, #12
 8016502:	af00      	add	r7, sp, #0
 8016504:	4603      	mov	r3, r0
 8016506:	71fb      	strb	r3, [r7, #7]
 8016508:	460b      	mov	r3, r1
 801650a:	71bb      	strb	r3, [r7, #6]
 801650c:	4613      	mov	r3, r2
 801650e:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 8016510:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8016514:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8016518:	429a      	cmp	r2, r3
 801651a:	db07      	blt.n	801652c <RegionCommonValueInRange+0x2e>
 801651c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8016520:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8016524:	429a      	cmp	r2, r3
 8016526:	dc01      	bgt.n	801652c <RegionCommonValueInRange+0x2e>
    {
        return 1;
 8016528:	2301      	movs	r3, #1
 801652a:	e000      	b.n	801652e <RegionCommonValueInRange+0x30>
    }
    return 0;
 801652c:	2300      	movs	r3, #0
}
 801652e:	4618      	mov	r0, r3
 8016530:	370c      	adds	r7, #12
 8016532:	46bd      	mov	sp, r7
 8016534:	bc80      	pop	{r7}
 8016536:	4770      	bx	lr

08016538 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 8016538:	b480      	push	{r7}
 801653a:	b085      	sub	sp, #20
 801653c:	af00      	add	r7, sp, #0
 801653e:	6078      	str	r0, [r7, #4]
 8016540:	460b      	mov	r3, r1
 8016542:	70fb      	strb	r3, [r7, #3]
 8016544:	4613      	mov	r3, r2
 8016546:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 8016548:	78fb      	ldrb	r3, [r7, #3]
 801654a:	091b      	lsrs	r3, r3, #4
 801654c:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 801654e:	78bb      	ldrb	r3, [r7, #2]
 8016550:	091b      	lsrs	r3, r3, #4
 8016552:	b2db      	uxtb	r3, r3
 8016554:	7bfa      	ldrb	r2, [r7, #15]
 8016556:	429a      	cmp	r2, r3
 8016558:	d803      	bhi.n	8016562 <RegionCommonChanDisable+0x2a>
 801655a:	78fa      	ldrb	r2, [r7, #3]
 801655c:	78bb      	ldrb	r3, [r7, #2]
 801655e:	429a      	cmp	r2, r3
 8016560:	d301      	bcc.n	8016566 <RegionCommonChanDisable+0x2e>
    {
        return false;
 8016562:	2300      	movs	r3, #0
 8016564:	e017      	b.n	8016596 <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 8016566:	7bfb      	ldrb	r3, [r7, #15]
 8016568:	005b      	lsls	r3, r3, #1
 801656a:	687a      	ldr	r2, [r7, #4]
 801656c:	4413      	add	r3, r2
 801656e:	881b      	ldrh	r3, [r3, #0]
 8016570:	b21a      	sxth	r2, r3
 8016572:	78fb      	ldrb	r3, [r7, #3]
 8016574:	f003 030f 	and.w	r3, r3, #15
 8016578:	2101      	movs	r1, #1
 801657a:	fa01 f303 	lsl.w	r3, r1, r3
 801657e:	b21b      	sxth	r3, r3
 8016580:	43db      	mvns	r3, r3
 8016582:	b21b      	sxth	r3, r3
 8016584:	4013      	ands	r3, r2
 8016586:	b219      	sxth	r1, r3
 8016588:	7bfb      	ldrb	r3, [r7, #15]
 801658a:	005b      	lsls	r3, r3, #1
 801658c:	687a      	ldr	r2, [r7, #4]
 801658e:	4413      	add	r3, r2
 8016590:	b28a      	uxth	r2, r1
 8016592:	801a      	strh	r2, [r3, #0]

    return true;
 8016594:	2301      	movs	r3, #1
}
 8016596:	4618      	mov	r0, r3
 8016598:	3714      	adds	r7, #20
 801659a:	46bd      	mov	sp, r7
 801659c:	bc80      	pop	{r7}
 801659e:	4770      	bx	lr

080165a0 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 80165a0:	b580      	push	{r7, lr}
 80165a2:	b084      	sub	sp, #16
 80165a4:	af00      	add	r7, sp, #0
 80165a6:	6078      	str	r0, [r7, #4]
 80165a8:	460b      	mov	r3, r1
 80165aa:	70fb      	strb	r3, [r7, #3]
 80165ac:	4613      	mov	r3, r2
 80165ae:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 80165b0:	2300      	movs	r3, #0
 80165b2:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 80165b4:	687b      	ldr	r3, [r7, #4]
 80165b6:	2b00      	cmp	r3, #0
 80165b8:	d101      	bne.n	80165be <RegionCommonCountChannels+0x1e>
    {
        return 0;
 80165ba:	2300      	movs	r3, #0
 80165bc:	e018      	b.n	80165f0 <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 80165be:	78fb      	ldrb	r3, [r7, #3]
 80165c0:	73bb      	strb	r3, [r7, #14]
 80165c2:	e010      	b.n	80165e6 <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 80165c4:	7bbb      	ldrb	r3, [r7, #14]
 80165c6:	005b      	lsls	r3, r3, #1
 80165c8:	687a      	ldr	r2, [r7, #4]
 80165ca:	4413      	add	r3, r2
 80165cc:	881b      	ldrh	r3, [r3, #0]
 80165ce:	2110      	movs	r1, #16
 80165d0:	4618      	mov	r0, r3
 80165d2:	f7ff fef9 	bl	80163c8 <CountChannels>
 80165d6:	4603      	mov	r3, r0
 80165d8:	461a      	mov	r2, r3
 80165da:	7bfb      	ldrb	r3, [r7, #15]
 80165dc:	4413      	add	r3, r2
 80165de:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 80165e0:	7bbb      	ldrb	r3, [r7, #14]
 80165e2:	3301      	adds	r3, #1
 80165e4:	73bb      	strb	r3, [r7, #14]
 80165e6:	7bba      	ldrb	r2, [r7, #14]
 80165e8:	78bb      	ldrb	r3, [r7, #2]
 80165ea:	429a      	cmp	r2, r3
 80165ec:	d3ea      	bcc.n	80165c4 <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 80165ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80165f0:	4618      	mov	r0, r3
 80165f2:	3710      	adds	r7, #16
 80165f4:	46bd      	mov	sp, r7
 80165f6:	bd80      	pop	{r7, pc}

080165f8 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 80165f8:	b480      	push	{r7}
 80165fa:	b087      	sub	sp, #28
 80165fc:	af00      	add	r7, sp, #0
 80165fe:	60f8      	str	r0, [r7, #12]
 8016600:	60b9      	str	r1, [r7, #8]
 8016602:	4613      	mov	r3, r2
 8016604:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 8016606:	68fb      	ldr	r3, [r7, #12]
 8016608:	2b00      	cmp	r3, #0
 801660a:	d016      	beq.n	801663a <RegionCommonChanMaskCopy+0x42>
 801660c:	68bb      	ldr	r3, [r7, #8]
 801660e:	2b00      	cmp	r3, #0
 8016610:	d013      	beq.n	801663a <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 8016612:	2300      	movs	r3, #0
 8016614:	75fb      	strb	r3, [r7, #23]
 8016616:	e00c      	b.n	8016632 <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 8016618:	7dfb      	ldrb	r3, [r7, #23]
 801661a:	005b      	lsls	r3, r3, #1
 801661c:	68ba      	ldr	r2, [r7, #8]
 801661e:	441a      	add	r2, r3
 8016620:	7dfb      	ldrb	r3, [r7, #23]
 8016622:	005b      	lsls	r3, r3, #1
 8016624:	68f9      	ldr	r1, [r7, #12]
 8016626:	440b      	add	r3, r1
 8016628:	8812      	ldrh	r2, [r2, #0]
 801662a:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 801662c:	7dfb      	ldrb	r3, [r7, #23]
 801662e:	3301      	adds	r3, #1
 8016630:	75fb      	strb	r3, [r7, #23]
 8016632:	7dfa      	ldrb	r2, [r7, #23]
 8016634:	79fb      	ldrb	r3, [r7, #7]
 8016636:	429a      	cmp	r2, r3
 8016638:	d3ee      	bcc.n	8016618 <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 801663a:	bf00      	nop
 801663c:	371c      	adds	r7, #28
 801663e:	46bd      	mov	sp, r7
 8016640:	bc80      	pop	{r7}
 8016642:	4770      	bx	lr

08016644 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8016644:	b082      	sub	sp, #8
 8016646:	b580      	push	{r7, lr}
 8016648:	b086      	sub	sp, #24
 801664a:	af00      	add	r7, sp, #0
 801664c:	60f8      	str	r0, [r7, #12]
 801664e:	60b9      	str	r1, [r7, #8]
 8016650:	627b      	str	r3, [r7, #36]	@ 0x24
 8016652:	4613      	mov	r3, r2
 8016654:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8016656:	79f9      	ldrb	r1, [r7, #7]
 8016658:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801665c:	cb0c      	ldmia	r3, {r2, r3}
 801665e:	68f8      	ldr	r0, [r7, #12]
 8016660:	f7ff fd8c 	bl	801617c <GetDutyCycle>
 8016664:	4603      	mov	r3, r0
 8016666:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 8016668:	68fb      	ldr	r3, [r7, #12]
 801666a:	68da      	ldr	r2, [r3, #12]
 801666c:	8afb      	ldrh	r3, [r7, #22]
 801666e:	68b9      	ldr	r1, [r7, #8]
 8016670:	fb01 f303 	mul.w	r3, r1, r3
 8016674:	429a      	cmp	r2, r3
 8016676:	d909      	bls.n	801668c <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 8016678:	68fb      	ldr	r3, [r7, #12]
 801667a:	68da      	ldr	r2, [r3, #12]
 801667c:	8afb      	ldrh	r3, [r7, #22]
 801667e:	68b9      	ldr	r1, [r7, #8]
 8016680:	fb01 f303 	mul.w	r3, r1, r3
 8016684:	1ad2      	subs	r2, r2, r3
 8016686:	68fb      	ldr	r3, [r7, #12]
 8016688:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 801668a:	e002      	b.n	8016692 <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 801668c:	68fb      	ldr	r3, [r7, #12]
 801668e:	2200      	movs	r2, #0
 8016690:	60da      	str	r2, [r3, #12]
}
 8016692:	bf00      	nop
 8016694:	3718      	adds	r7, #24
 8016696:	46bd      	mov	sp, r7
 8016698:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801669c:	b002      	add	sp, #8
 801669e:	4770      	bx	lr

080166a0 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 80166a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80166a2:	b08f      	sub	sp, #60	@ 0x3c
 80166a4:	af04      	add	r7, sp, #16
 80166a6:	6039      	str	r1, [r7, #0]
 80166a8:	4611      	mov	r1, r2
 80166aa:	461a      	mov	r2, r3
 80166ac:	4603      	mov	r3, r0
 80166ae:	71fb      	strb	r3, [r7, #7]
 80166b0:	460b      	mov	r3, r1
 80166b2:	71bb      	strb	r3, [r7, #6]
 80166b4:	4613      	mov	r3, r2
 80166b6:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 80166b8:	f04f 33ff 	mov.w	r3, #4294967295
 80166bc:	627b      	str	r3, [r7, #36]	@ 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 80166be:	f004 ff51 	bl	801b564 <UTIL_TIMER_GetCurrentTime>
 80166c2:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 80166c4:	2300      	movs	r3, #0
 80166c6:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 80166c8:	2301      	movs	r3, #1
 80166ca:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 80166cc:	2300      	movs	r3, #0
 80166ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 80166d2:	2300      	movs	r3, #0
 80166d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80166d8:	e0ba      	b.n	8016850 <RegionCommonUpdateBandTimeOff+0x1b0>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 80166da:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 80166de:	4613      	mov	r3, r2
 80166e0:	005b      	lsls	r3, r3, #1
 80166e2:	4413      	add	r3, r2
 80166e4:	00db      	lsls	r3, r3, #3
 80166e6:	461a      	mov	r2, r3
 80166e8:	683b      	ldr	r3, [r7, #0]
 80166ea:	189c      	adds	r4, r3, r2
 80166ec:	f897 6040 	ldrb.w	r6, [r7, #64]	@ 0x40
 80166f0:	797a      	ldrb	r2, [r7, #5]
 80166f2:	79fd      	ldrb	r5, [r7, #7]
 80166f4:	69fb      	ldr	r3, [r7, #28]
 80166f6:	9302      	str	r3, [sp, #8]
 80166f8:	46ec      	mov	ip, sp
 80166fa:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80166fe:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016702:	e88c 0003 	stmia.w	ip, {r0, r1}
 8016706:	4633      	mov	r3, r6
 8016708:	4629      	mov	r1, r5
 801670a:	4620      	mov	r0, r4
 801670c:	f7ff fe22 	bl	8016354 <UpdateTimeCredits>
 8016710:	4603      	mov	r3, r0
 8016712:	82fb      	strh	r3, [r7, #22]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 8016714:	8afa      	ldrh	r2, [r7, #22]
 8016716:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016718:	fb02 f303 	mul.w	r3, r2, r3
 801671c:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
 801671e:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8016722:	4613      	mov	r3, r2
 8016724:	005b      	lsls	r3, r3, #1
 8016726:	4413      	add	r3, r2
 8016728:	00db      	lsls	r3, r3, #3
 801672a:	461a      	mov	r2, r3
 801672c:	683b      	ldr	r3, [r7, #0]
 801672e:	4413      	add	r3, r2
 8016730:	68db      	ldr	r3, [r3, #12]
 8016732:	69ba      	ldr	r2, [r7, #24]
 8016734:	429a      	cmp	r2, r3
 8016736:	d308      	bcc.n	801674a <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8016738:	797b      	ldrb	r3, [r7, #5]
 801673a:	f083 0301 	eor.w	r3, r3, #1
 801673e:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8016740:	2b00      	cmp	r3, #0
 8016742:	d013      	beq.n	801676c <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8016744:	79fb      	ldrb	r3, [r7, #7]
 8016746:	2b00      	cmp	r3, #0
 8016748:	d010      	beq.n	801676c <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 801674a:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 801674e:	4613      	mov	r3, r2
 8016750:	005b      	lsls	r3, r3, #1
 8016752:	4413      	add	r3, r2
 8016754:	00db      	lsls	r3, r3, #3
 8016756:	461a      	mov	r2, r3
 8016758:	683b      	ldr	r3, [r7, #0]
 801675a:	4413      	add	r3, r2
 801675c:	2201      	movs	r2, #1
 801675e:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 8016760:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8016764:	3301      	adds	r3, #1
 8016766:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801676a:	e06c      	b.n	8016846 <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 801676c:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8016770:	4613      	mov	r3, r2
 8016772:	005b      	lsls	r3, r3, #1
 8016774:	4413      	add	r3, r2
 8016776:	00db      	lsls	r3, r3, #3
 8016778:	461a      	mov	r2, r3
 801677a:	683b      	ldr	r3, [r7, #0]
 801677c:	4413      	add	r3, r2
 801677e:	2200      	movs	r2, #0
 8016780:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits > creditCosts )
 8016782:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8016786:	4613      	mov	r3, r2
 8016788:	005b      	lsls	r3, r3, #1
 801678a:	4413      	add	r3, r2
 801678c:	00db      	lsls	r3, r3, #3
 801678e:	461a      	mov	r2, r3
 8016790:	683b      	ldr	r3, [r7, #0]
 8016792:	4413      	add	r3, r2
 8016794:	691b      	ldr	r3, [r3, #16]
 8016796:	69ba      	ldr	r2, [r7, #24]
 8016798:	429a      	cmp	r2, r3
 801679a:	d215      	bcs.n	80167c8 <RegionCommonUpdateBandTimeOff+0x128>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 801679c:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 80167a0:	4613      	mov	r3, r2
 80167a2:	005b      	lsls	r3, r3, #1
 80167a4:	4413      	add	r3, r2
 80167a6:	00db      	lsls	r3, r3, #3
 80167a8:	461a      	mov	r2, r3
 80167aa:	683b      	ldr	r3, [r7, #0]
 80167ac:	4413      	add	r3, r2
 80167ae:	68db      	ldr	r3, [r3, #12]
 80167b0:	69ba      	ldr	r2, [r7, #24]
 80167b2:	1ad3      	subs	r3, r2, r3
 80167b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80167b6:	4293      	cmp	r3, r2
 80167b8:	bf28      	it	cs
 80167ba:	4613      	movcs	r3, r2
 80167bc:	627b      	str	r3, [r7, #36]	@ 0x24
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 80167be:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80167c2:	3301      	adds	r3, #1
 80167c4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 80167c8:	79fb      	ldrb	r3, [r7, #7]
 80167ca:	f083 0301 	eor.w	r3, r3, #1
 80167ce:	b2db      	uxtb	r3, r3
 80167d0:	2b00      	cmp	r3, #0
 80167d2:	d038      	beq.n	8016846 <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 80167d4:	2300      	movs	r3, #0
 80167d6:	60fb      	str	r3, [r7, #12]
 80167d8:	2300      	movs	r3, #0
 80167da:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 80167dc:	8afb      	ldrh	r3, [r7, #22]
 80167de:	2b64      	cmp	r3, #100	@ 0x64
 80167e0:	d103      	bne.n	80167ea <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 80167e2:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 80167e6:	60fb      	str	r3, [r7, #12]
 80167e8:	e009      	b.n	80167fe <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 80167ea:	8afb      	ldrh	r3, [r7, #22]
 80167ec:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80167f0:	d103      	bne.n	80167fa <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 80167f2:	f649 23b0 	movw	r3, #39600	@ 0x9ab0
 80167f6:	60fb      	str	r3, [r7, #12]
 80167f8:	e001      	b.n	80167fe <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 80167fa:	4b1e      	ldr	r3, [pc, #120]	@ (8016874 <RegionCommonUpdateBandTimeOff+0x1d4>)
 80167fc:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 80167fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016800:	4a1c      	ldr	r2, [pc, #112]	@ (8016874 <RegionCommonUpdateBandTimeOff+0x1d4>)
 8016802:	4293      	cmp	r3, r2
 8016804:	d90e      	bls.n	8016824 <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 8016806:	68fa      	ldr	r2, [r7, #12]
 8016808:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801680a:	f5a3 33f6 	sub.w	r3, r3, #125952	@ 0x1ec00
 801680e:	3b30      	subs	r3, #48	@ 0x30
 8016810:	4919      	ldr	r1, [pc, #100]	@ (8016878 <RegionCommonUpdateBandTimeOff+0x1d8>)
 8016812:	fba1 1303 	umull	r1, r3, r1, r3
 8016816:	0c1b      	lsrs	r3, r3, #16
 8016818:	3301      	adds	r3, #1
 801681a:	4918      	ldr	r1, [pc, #96]	@ (801687c <RegionCommonUpdateBandTimeOff+0x1dc>)
 801681c:	fb01 f303 	mul.w	r3, r1, r3
 8016820:	4413      	add	r3, r2
 8016822:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 8016824:	f107 000c 	add.w	r0, r7, #12
 8016828:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801682a:	9300      	str	r3, [sp, #0]
 801682c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801682e:	f107 020c 	add.w	r2, r7, #12
 8016832:	ca06      	ldmia	r2, {r1, r2}
 8016834:	f003 ffaf 	bl	801a796 <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 8016838:	f107 030c 	add.w	r3, r7, #12
 801683c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016840:	f004 f868 	bl	801a914 <SysTimeToMs>
 8016844:	6278      	str	r0, [r7, #36]	@ 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 8016846:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801684a:	3301      	adds	r3, #1
 801684c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8016850:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8016854:	79bb      	ldrb	r3, [r7, #6]
 8016856:	429a      	cmp	r2, r3
 8016858:	f4ff af3f 	bcc.w	80166da <RegionCommonUpdateBandTimeOff+0x3a>
            }
        }
    }

    if( validBands == 0 )
 801685c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8016860:	2b00      	cmp	r3, #0
 8016862:	d102      	bne.n	801686a <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 8016864:	f04f 33ff 	mov.w	r3, #4294967295
 8016868:	e000      	b.n	801686c <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 801686a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 801686c:	4618      	mov	r0, r3
 801686e:	372c      	adds	r7, #44	@ 0x2c
 8016870:	46bd      	mov	sp, r7
 8016872:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016874:	0001ec30 	.word	0x0001ec30
 8016878:	c22e4507 	.word	0xc22e4507
 801687c:	00015180 	.word	0x00015180

08016880 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 8016880:	b480      	push	{r7}
 8016882:	b085      	sub	sp, #20
 8016884:	af00      	add	r7, sp, #0
 8016886:	6078      	str	r0, [r7, #4]
 8016888:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 801688a:	2300      	movs	r3, #0
 801688c:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 801688e:	687b      	ldr	r3, [r7, #4]
 8016890:	781b      	ldrb	r3, [r3, #0]
 8016892:	2b03      	cmp	r3, #3
 8016894:	d140      	bne.n	8016918 <RegionCommonParseLinkAdrReq+0x98>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 8016896:	687b      	ldr	r3, [r7, #4]
 8016898:	3301      	adds	r3, #1
 801689a:	781b      	ldrb	r3, [r3, #0]
 801689c:	b25a      	sxtb	r2, r3
 801689e:	683b      	ldr	r3, [r7, #0]
 80168a0:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 80168a2:	683b      	ldr	r3, [r7, #0]
 80168a4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80168a8:	f003 030f 	and.w	r3, r3, #15
 80168ac:	b25a      	sxtb	r2, r3
 80168ae:	683b      	ldr	r3, [r7, #0]
 80168b0:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 80168b2:	683b      	ldr	r3, [r7, #0]
 80168b4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80168b8:	b2db      	uxtb	r3, r3
 80168ba:	091b      	lsrs	r3, r3, #4
 80168bc:	b2db      	uxtb	r3, r3
 80168be:	b25a      	sxtb	r2, r3
 80168c0:	683b      	ldr	r3, [r7, #0]
 80168c2:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 80168c4:	687b      	ldr	r3, [r7, #4]
 80168c6:	3302      	adds	r3, #2
 80168c8:	781b      	ldrb	r3, [r3, #0]
 80168ca:	461a      	mov	r2, r3
 80168cc:	683b      	ldr	r3, [r7, #0]
 80168ce:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 80168d0:	683b      	ldr	r3, [r7, #0]
 80168d2:	889b      	ldrh	r3, [r3, #4]
 80168d4:	b21a      	sxth	r2, r3
 80168d6:	687b      	ldr	r3, [r7, #4]
 80168d8:	3303      	adds	r3, #3
 80168da:	781b      	ldrb	r3, [r3, #0]
 80168dc:	b21b      	sxth	r3, r3
 80168de:	021b      	lsls	r3, r3, #8
 80168e0:	b21b      	sxth	r3, r3
 80168e2:	4313      	orrs	r3, r2
 80168e4:	b21b      	sxth	r3, r3
 80168e6:	b29a      	uxth	r2, r3
 80168e8:	683b      	ldr	r3, [r7, #0]
 80168ea:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 80168ec:	687b      	ldr	r3, [r7, #4]
 80168ee:	791a      	ldrb	r2, [r3, #4]
 80168f0:	683b      	ldr	r3, [r7, #0]
 80168f2:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 80168f4:	683b      	ldr	r3, [r7, #0]
 80168f6:	781b      	ldrb	r3, [r3, #0]
 80168f8:	091b      	lsrs	r3, r3, #4
 80168fa:	b2db      	uxtb	r3, r3
 80168fc:	f003 0307 	and.w	r3, r3, #7
 8016900:	b2da      	uxtb	r2, r3
 8016902:	683b      	ldr	r3, [r7, #0]
 8016904:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 8016906:	683b      	ldr	r3, [r7, #0]
 8016908:	781b      	ldrb	r3, [r3, #0]
 801690a:	f003 030f 	and.w	r3, r3, #15
 801690e:	b2da      	uxtb	r2, r3
 8016910:	683b      	ldr	r3, [r7, #0]
 8016912:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 8016914:	2305      	movs	r3, #5
 8016916:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 8016918:	7bfb      	ldrb	r3, [r7, #15]
}
 801691a:	4618      	mov	r0, r3
 801691c:	3714      	adds	r7, #20
 801691e:	46bd      	mov	sp, r7
 8016920:	bc80      	pop	{r7}
 8016922:	4770      	bx	lr

08016924 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 8016924:	b5b0      	push	{r4, r5, r7, lr}
 8016926:	b088      	sub	sp, #32
 8016928:	af02      	add	r7, sp, #8
 801692a:	60f8      	str	r0, [r7, #12]
 801692c:	60b9      	str	r1, [r7, #8]
 801692e:	607a      	str	r2, [r7, #4]
 8016930:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 8016932:	68fb      	ldr	r3, [r7, #12]
 8016934:	791b      	ldrb	r3, [r3, #4]
 8016936:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 8016938:	68fb      	ldr	r3, [r7, #12]
 801693a:	799b      	ldrb	r3, [r3, #6]
 801693c:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 801693e:	68fb      	ldr	r3, [r7, #12]
 8016940:	79db      	ldrb	r3, [r3, #7]
 8016942:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 8016944:	68fb      	ldr	r3, [r7, #12]
 8016946:	7a1b      	ldrb	r3, [r3, #8]
 8016948:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 801694a:	68fb      	ldr	r3, [r7, #12]
 801694c:	795b      	ldrb	r3, [r3, #5]
 801694e:	f083 0301 	eor.w	r3, r3, #1
 8016952:	b2db      	uxtb	r3, r3
 8016954:	2b00      	cmp	r3, #0
 8016956:	d008      	beq.n	801696a <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 8016958:	68fb      	ldr	r3, [r7, #12]
 801695a:	7adb      	ldrb	r3, [r3, #11]
 801695c:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 801695e:	68fb      	ldr	r3, [r7, #12]
 8016960:	7a5b      	ldrb	r3, [r3, #9]
 8016962:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 8016964:	68fb      	ldr	r3, [r7, #12]
 8016966:	7a9b      	ldrb	r3, [r3, #10]
 8016968:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 801696a:	7dfb      	ldrb	r3, [r7, #23]
 801696c:	2b00      	cmp	r3, #0
 801696e:	d04a      	beq.n	8016a06 <RegionCommonLinkAdrReqVerifyParams+0xe2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 8016970:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8016974:	2b0f      	cmp	r3, #15
 8016976:	d103      	bne.n	8016980 <RegionCommonLinkAdrReqVerifyParams+0x5c>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 8016978:	68fb      	ldr	r3, [r7, #12]
 801697a:	7a5b      	ldrb	r3, [r3, #9]
 801697c:	75bb      	strb	r3, [r7, #22]
 801697e:	e01d      	b.n	80169bc <RegionCommonLinkAdrReqVerifyParams+0x98>
        }
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8016980:	68fb      	ldr	r3, [r7, #12]
 8016982:	7b18      	ldrb	r0, [r3, #12]
 8016984:	68fb      	ldr	r3, [r7, #12]
 8016986:	6919      	ldr	r1, [r3, #16]
 8016988:	68fb      	ldr	r3, [r7, #12]
 801698a:	f993 5014 	ldrsb.w	r5, [r3, #20]
 801698e:	68fb      	ldr	r3, [r7, #12]
 8016990:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8016994:	68fa      	ldr	r2, [r7, #12]
 8016996:	6992      	ldr	r2, [r2, #24]
 8016998:	f997 4016 	ldrsb.w	r4, [r7, #22]
 801699c:	9201      	str	r2, [sp, #4]
 801699e:	9300      	str	r3, [sp, #0]
 80169a0:	462b      	mov	r3, r5
 80169a2:	4622      	mov	r2, r4
 80169a4:	f7ff fd39 	bl	801641a <RegionCommonChanVerifyDr>
 80169a8:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 80169aa:	f083 0301 	eor.w	r3, r3, #1
 80169ae:	b2db      	uxtb	r3, r3
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 80169b0:	2b00      	cmp	r3, #0
 80169b2:	d003      	beq.n	80169bc <RegionCommonLinkAdrReqVerifyParams+0x98>
        {
            status &= 0xFD; // Datarate KO
 80169b4:	7dfb      	ldrb	r3, [r7, #23]
 80169b6:	f023 0302 	bic.w	r3, r3, #2
 80169ba:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( txPower == 0x0F )
 80169bc:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80169c0:	2b0f      	cmp	r3, #15
 80169c2:	d103      	bne.n	80169cc <RegionCommonLinkAdrReqVerifyParams+0xa8>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
 80169c4:	68fb      	ldr	r3, [r7, #12]
 80169c6:	7a9b      	ldrb	r3, [r3, #10]
 80169c8:	757b      	strb	r3, [r7, #21]
 80169ca:	e01c      	b.n	8016a06 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 80169cc:	68fb      	ldr	r3, [r7, #12]
 80169ce:	f993 101d 	ldrsb.w	r1, [r3, #29]
 80169d2:	68fb      	ldr	r3, [r7, #12]
 80169d4:	f993 201c 	ldrsb.w	r2, [r3, #28]
 80169d8:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80169dc:	4618      	mov	r0, r3
 80169de:	f7ff fd8e 	bl	80164fe <RegionCommonValueInRange>
 80169e2:	4603      	mov	r3, r0
 80169e4:	2b00      	cmp	r3, #0
 80169e6:	d10e      	bne.n	8016a06 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 80169e8:	68fb      	ldr	r3, [r7, #12]
 80169ea:	f993 301d 	ldrsb.w	r3, [r3, #29]
 80169ee:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80169f2:	429a      	cmp	r2, r3
 80169f4:	da03      	bge.n	80169fe <RegionCommonLinkAdrReqVerifyParams+0xda>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 80169f6:	68fb      	ldr	r3, [r7, #12]
 80169f8:	7f5b      	ldrb	r3, [r3, #29]
 80169fa:	757b      	strb	r3, [r7, #21]
 80169fc:	e003      	b.n	8016a06 <RegionCommonLinkAdrReqVerifyParams+0xe2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 80169fe:	7dfb      	ldrb	r3, [r7, #23]
 8016a00:	f023 0304 	bic.w	r3, r3, #4
 8016a04:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 8016a06:	7dfb      	ldrb	r3, [r7, #23]
 8016a08:	2b07      	cmp	r3, #7
 8016a0a:	d105      	bne.n	8016a18 <RegionCommonLinkAdrReqVerifyParams+0xf4>
    {
        if( nbRepetitions == 0 )
 8016a0c:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8016a10:	2b00      	cmp	r3, #0
 8016a12:	d101      	bne.n	8016a18 <RegionCommonLinkAdrReqVerifyParams+0xf4>
        { // Set nbRep to the default value of 1.
            nbRepetitions = 1;
 8016a14:	2301      	movs	r3, #1
 8016a16:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 8016a18:	68bb      	ldr	r3, [r7, #8]
 8016a1a:	7dba      	ldrb	r2, [r7, #22]
 8016a1c:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 8016a1e:	687b      	ldr	r3, [r7, #4]
 8016a20:	7d7a      	ldrb	r2, [r7, #21]
 8016a22:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 8016a24:	7d3a      	ldrb	r2, [r7, #20]
 8016a26:	683b      	ldr	r3, [r7, #0]
 8016a28:	701a      	strb	r2, [r3, #0]

    return status;
 8016a2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8016a2c:	4618      	mov	r0, r3
 8016a2e:	3718      	adds	r7, #24
 8016a30:	46bd      	mov	sp, r7
 8016a32:	bdb0      	pop	{r4, r5, r7, pc}

08016a34 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 8016a34:	b480      	push	{r7}
 8016a36:	b083      	sub	sp, #12
 8016a38:	af00      	add	r7, sp, #0
 8016a3a:	4603      	mov	r3, r0
 8016a3c:	6039      	str	r1, [r7, #0]
 8016a3e:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 8016a40:	79fb      	ldrb	r3, [r7, #7]
 8016a42:	4a06      	ldr	r2, [pc, #24]	@ (8016a5c <RegionCommonComputeSymbolTimeLoRa+0x28>)
 8016a44:	fa02 f303 	lsl.w	r3, r2, r3
 8016a48:	461a      	mov	r2, r3
 8016a4a:	683b      	ldr	r3, [r7, #0]
 8016a4c:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8016a50:	4618      	mov	r0, r3
 8016a52:	370c      	adds	r7, #12
 8016a54:	46bd      	mov	sp, r7
 8016a56:	bc80      	pop	{r7}
 8016a58:	4770      	bx	lr
 8016a5a:	bf00      	nop
 8016a5c:	000f4240 	.word	0x000f4240

08016a60 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 8016a60:	b480      	push	{r7}
 8016a62:	b083      	sub	sp, #12
 8016a64:	af00      	add	r7, sp, #0
 8016a66:	4603      	mov	r3, r0
 8016a68:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 8016a6a:	79fb      	ldrb	r3, [r7, #7]
 8016a6c:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8016a70:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8016a74:	4618      	mov	r0, r3
 8016a76:	370c      	adds	r7, #12
 8016a78:	46bd      	mov	sp, r7
 8016a7a:	bc80      	pop	{r7}
 8016a7c:	4770      	bx	lr
	...

08016a80 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 8016a80:	b480      	push	{r7}
 8016a82:	b085      	sub	sp, #20
 8016a84:	af00      	add	r7, sp, #0
 8016a86:	60f8      	str	r0, [r7, #12]
 8016a88:	607a      	str	r2, [r7, #4]
 8016a8a:	603b      	str	r3, [r7, #0]
 8016a8c:	460b      	mov	r3, r1
 8016a8e:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8016a90:	7afa      	ldrb	r2, [r7, #11]
 8016a92:	7afb      	ldrb	r3, [r7, #11]
 8016a94:	3b04      	subs	r3, #4
 8016a96:	4619      	mov	r1, r3
 8016a98:	68fb      	ldr	r3, [r7, #12]
 8016a9a:	fb03 f101 	mul.w	r1, r3, r1
 8016a9e:	687b      	ldr	r3, [r7, #4]
 8016aa0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8016aa4:	fb00 f303 	mul.w	r3, r0, r3
 8016aa8:	440b      	add	r3, r1
 8016aaa:	005b      	lsls	r3, r3, #1
 8016aac:	2b00      	cmp	r3, #0
 8016aae:	d013      	beq.n	8016ad8 <RegionCommonComputeRxWindowParameters+0x58>
 8016ab0:	7afb      	ldrb	r3, [r7, #11]
 8016ab2:	3b04      	subs	r3, #4
 8016ab4:	4619      	mov	r1, r3
 8016ab6:	68fb      	ldr	r3, [r7, #12]
 8016ab8:	fb03 f101 	mul.w	r1, r3, r1
 8016abc:	687b      	ldr	r3, [r7, #4]
 8016abe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8016ac2:	fb00 f303 	mul.w	r3, r0, r3
 8016ac6:	440b      	add	r3, r1
 8016ac8:	0059      	lsls	r1, r3, #1
 8016aca:	68fb      	ldr	r3, [r7, #12]
 8016acc:	440b      	add	r3, r1
 8016ace:	1e59      	subs	r1, r3, #1
 8016ad0:	68fb      	ldr	r3, [r7, #12]
 8016ad2:	fbb1 f3f3 	udiv	r3, r1, r3
 8016ad6:	e00f      	b.n	8016af8 <RegionCommonComputeRxWindowParameters+0x78>
 8016ad8:	7afb      	ldrb	r3, [r7, #11]
 8016ada:	3b04      	subs	r3, #4
 8016adc:	4619      	mov	r1, r3
 8016ade:	68fb      	ldr	r3, [r7, #12]
 8016ae0:	fb03 f101 	mul.w	r1, r3, r1
 8016ae4:	687b      	ldr	r3, [r7, #4]
 8016ae6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8016aea:	fb00 f303 	mul.w	r3, r0, r3
 8016aee:	440b      	add	r3, r1
 8016af0:	0059      	lsls	r1, r3, #1
 8016af2:	68fb      	ldr	r3, [r7, #12]
 8016af4:	fbb1 f3f3 	udiv	r3, r1, r3
 8016af8:	429a      	cmp	r2, r3
 8016afa:	bf38      	it	cc
 8016afc:	461a      	movcc	r2, r3
 8016afe:	69bb      	ldr	r3, [r7, #24]
 8016b00:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 8016b02:	68fb      	ldr	r3, [r7, #12]
 8016b04:	009b      	lsls	r3, r3, #2
 8016b06:	4619      	mov	r1, r3
 8016b08:	69bb      	ldr	r3, [r7, #24]
 8016b0a:	681b      	ldr	r3, [r3, #0]
 8016b0c:	68fa      	ldr	r2, [r7, #12]
 8016b0e:	fb02 f303 	mul.w	r3, r2, r3
 8016b12:	2b00      	cmp	r3, #0
 8016b14:	d007      	beq.n	8016b26 <RegionCommonComputeRxWindowParameters+0xa6>
 8016b16:	69bb      	ldr	r3, [r7, #24]
 8016b18:	681b      	ldr	r3, [r3, #0]
 8016b1a:	68fa      	ldr	r2, [r7, #12]
 8016b1c:	fb02 f303 	mul.w	r3, r2, r3
 8016b20:	3301      	adds	r3, #1
 8016b22:	085b      	lsrs	r3, r3, #1
 8016b24:	e005      	b.n	8016b32 <RegionCommonComputeRxWindowParameters+0xb2>
 8016b26:	69bb      	ldr	r3, [r7, #24]
 8016b28:	681b      	ldr	r3, [r3, #0]
 8016b2a:	68fa      	ldr	r2, [r7, #12]
 8016b2c:	fb02 f303 	mul.w	r3, r2, r3
 8016b30:	085b      	lsrs	r3, r3, #1
 8016b32:	1acb      	subs	r3, r1, r3
 8016b34:	683a      	ldr	r2, [r7, #0]
 8016b36:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8016b3a:	fb01 f202 	mul.w	r2, r1, r2
 8016b3e:	1a9b      	subs	r3, r3, r2
 8016b40:	2b00      	cmp	r3, #0
 8016b42:	dd27      	ble.n	8016b94 <RegionCommonComputeRxWindowParameters+0x114>
 8016b44:	68fb      	ldr	r3, [r7, #12]
 8016b46:	009b      	lsls	r3, r3, #2
 8016b48:	4619      	mov	r1, r3
 8016b4a:	69bb      	ldr	r3, [r7, #24]
 8016b4c:	681b      	ldr	r3, [r3, #0]
 8016b4e:	68fa      	ldr	r2, [r7, #12]
 8016b50:	fb02 f303 	mul.w	r3, r2, r3
 8016b54:	2b00      	cmp	r3, #0
 8016b56:	d007      	beq.n	8016b68 <RegionCommonComputeRxWindowParameters+0xe8>
 8016b58:	69bb      	ldr	r3, [r7, #24]
 8016b5a:	681b      	ldr	r3, [r3, #0]
 8016b5c:	68fa      	ldr	r2, [r7, #12]
 8016b5e:	fb02 f303 	mul.w	r3, r2, r3
 8016b62:	3301      	adds	r3, #1
 8016b64:	085b      	lsrs	r3, r3, #1
 8016b66:	e005      	b.n	8016b74 <RegionCommonComputeRxWindowParameters+0xf4>
 8016b68:	69bb      	ldr	r3, [r7, #24]
 8016b6a:	681b      	ldr	r3, [r3, #0]
 8016b6c:	68fa      	ldr	r2, [r7, #12]
 8016b6e:	fb02 f303 	mul.w	r3, r2, r3
 8016b72:	085b      	lsrs	r3, r3, #1
 8016b74:	1acb      	subs	r3, r1, r3
 8016b76:	683a      	ldr	r2, [r7, #0]
 8016b78:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8016b7c:	fb01 f202 	mul.w	r2, r1, r2
 8016b80:	1a9b      	subs	r3, r3, r2
 8016b82:	f203 33e7 	addw	r3, r3, #999	@ 0x3e7
 8016b86:	4a19      	ldr	r2, [pc, #100]	@ (8016bec <RegionCommonComputeRxWindowParameters+0x16c>)
 8016b88:	fb82 1203 	smull	r1, r2, r2, r3
 8016b8c:	1192      	asrs	r2, r2, #6
 8016b8e:	17db      	asrs	r3, r3, #31
 8016b90:	1ad3      	subs	r3, r2, r3
 8016b92:	e024      	b.n	8016bde <RegionCommonComputeRxWindowParameters+0x15e>
 8016b94:	68fb      	ldr	r3, [r7, #12]
 8016b96:	009b      	lsls	r3, r3, #2
 8016b98:	4619      	mov	r1, r3
 8016b9a:	69bb      	ldr	r3, [r7, #24]
 8016b9c:	681b      	ldr	r3, [r3, #0]
 8016b9e:	68fa      	ldr	r2, [r7, #12]
 8016ba0:	fb02 f303 	mul.w	r3, r2, r3
 8016ba4:	2b00      	cmp	r3, #0
 8016ba6:	d007      	beq.n	8016bb8 <RegionCommonComputeRxWindowParameters+0x138>
 8016ba8:	69bb      	ldr	r3, [r7, #24]
 8016baa:	681b      	ldr	r3, [r3, #0]
 8016bac:	68fa      	ldr	r2, [r7, #12]
 8016bae:	fb02 f303 	mul.w	r3, r2, r3
 8016bb2:	3301      	adds	r3, #1
 8016bb4:	085b      	lsrs	r3, r3, #1
 8016bb6:	e005      	b.n	8016bc4 <RegionCommonComputeRxWindowParameters+0x144>
 8016bb8:	69bb      	ldr	r3, [r7, #24]
 8016bba:	681b      	ldr	r3, [r3, #0]
 8016bbc:	68fa      	ldr	r2, [r7, #12]
 8016bbe:	fb02 f303 	mul.w	r3, r2, r3
 8016bc2:	085b      	lsrs	r3, r3, #1
 8016bc4:	1acb      	subs	r3, r1, r3
 8016bc6:	683a      	ldr	r2, [r7, #0]
 8016bc8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8016bcc:	fb01 f202 	mul.w	r2, r1, r2
 8016bd0:	1a9b      	subs	r3, r3, r2
 8016bd2:	4a06      	ldr	r2, [pc, #24]	@ (8016bec <RegionCommonComputeRxWindowParameters+0x16c>)
 8016bd4:	fb82 1203 	smull	r1, r2, r2, r3
 8016bd8:	1192      	asrs	r2, r2, #6
 8016bda:	17db      	asrs	r3, r3, #31
 8016bdc:	1ad3      	subs	r3, r2, r3
 8016bde:	69fa      	ldr	r2, [r7, #28]
 8016be0:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 8016be2:	bf00      	nop
 8016be4:	3714      	adds	r7, #20
 8016be6:	46bd      	mov	sp, r7
 8016be8:	bc80      	pop	{r7}
 8016bea:	4770      	bx	lr
 8016bec:	10624dd3 	.word	0x10624dd3

08016bf0 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 8016bf0:	b580      	push	{r7, lr}
 8016bf2:	b086      	sub	sp, #24
 8016bf4:	af00      	add	r7, sp, #0
 8016bf6:	4603      	mov	r3, r0
 8016bf8:	60b9      	str	r1, [r7, #8]
 8016bfa:	607a      	str	r2, [r7, #4]
 8016bfc:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8016bfe:	2300      	movs	r3, #0
 8016c00:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8016c02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016c06:	005b      	lsls	r3, r3, #1
 8016c08:	4618      	mov	r0, r3
 8016c0a:	f7ea f85b 	bl	8000cc4 <__aeabi_ui2f>
 8016c0e:	4603      	mov	r3, r0
 8016c10:	4619      	mov	r1, r3
 8016c12:	68b8      	ldr	r0, [r7, #8]
 8016c14:	f7e9 ffa4 	bl	8000b60 <__aeabi_fsub>
 8016c18:	4603      	mov	r3, r0
 8016c1a:	6879      	ldr	r1, [r7, #4]
 8016c1c:	4618      	mov	r0, r3
 8016c1e:	f7e9 ff9f 	bl	8000b60 <__aeabi_fsub>
 8016c22:	4603      	mov	r3, r0
 8016c24:	4618      	mov	r0, r3
 8016c26:	f7e9 fc67 	bl	80004f8 <__aeabi_f2d>
 8016c2a:	4602      	mov	r2, r0
 8016c2c:	460b      	mov	r3, r1
 8016c2e:	4610      	mov	r0, r2
 8016c30:	4619      	mov	r1, r3
 8016c32:	f007 fc79 	bl	801e528 <floor>
 8016c36:	4602      	mov	r2, r0
 8016c38:	460b      	mov	r3, r1
 8016c3a:	4610      	mov	r0, r2
 8016c3c:	4619      	mov	r1, r3
 8016c3e:	f7e9 ff63 	bl	8000b08 <__aeabi_d2iz>
 8016c42:	4603      	mov	r3, r0
 8016c44:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 8016c46:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016c4a:	4618      	mov	r0, r3
 8016c4c:	3718      	adds	r7, #24
 8016c4e:	46bd      	mov	sp, r7
 8016c50:	bd80      	pop	{r7, pc}

08016c52 <RegionCommonCountNbOfEnabledChannels>:
    /* ST_WORKAROUND_END */
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 8016c52:	b590      	push	{r4, r7, lr}
 8016c54:	b087      	sub	sp, #28
 8016c56:	af00      	add	r7, sp, #0
 8016c58:	60f8      	str	r0, [r7, #12]
 8016c5a:	60b9      	str	r1, [r7, #8]
 8016c5c:	607a      	str	r2, [r7, #4]
 8016c5e:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 8016c60:	2300      	movs	r3, #0
 8016c62:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 8016c64:	2300      	movs	r3, #0
 8016c66:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8016c68:	2300      	movs	r3, #0
 8016c6a:	757b      	strb	r3, [r7, #21]
 8016c6c:	2300      	movs	r3, #0
 8016c6e:	753b      	strb	r3, [r7, #20]
 8016c70:	e09c      	b.n	8016dac <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8016c72:	2300      	movs	r3, #0
 8016c74:	74fb      	strb	r3, [r7, #19]
 8016c76:	e08f      	b.n	8016d98 <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 8016c78:	68fb      	ldr	r3, [r7, #12]
 8016c7a:	685a      	ldr	r2, [r3, #4]
 8016c7c:	7d3b      	ldrb	r3, [r7, #20]
 8016c7e:	005b      	lsls	r3, r3, #1
 8016c80:	4413      	add	r3, r2
 8016c82:	881b      	ldrh	r3, [r3, #0]
 8016c84:	461a      	mov	r2, r3
 8016c86:	7cfb      	ldrb	r3, [r7, #19]
 8016c88:	fa42 f303 	asr.w	r3, r2, r3
 8016c8c:	f003 0301 	and.w	r3, r3, #1
 8016c90:	2b00      	cmp	r3, #0
 8016c92:	d07e      	beq.n	8016d92 <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 8016c94:	68fb      	ldr	r3, [r7, #12]
 8016c96:	689a      	ldr	r2, [r3, #8]
 8016c98:	7d79      	ldrb	r1, [r7, #21]
 8016c9a:	7cfb      	ldrb	r3, [r7, #19]
 8016c9c:	440b      	add	r3, r1
 8016c9e:	4619      	mov	r1, r3
 8016ca0:	460b      	mov	r3, r1
 8016ca2:	005b      	lsls	r3, r3, #1
 8016ca4:	440b      	add	r3, r1
 8016ca6:	009b      	lsls	r3, r3, #2
 8016ca8:	4413      	add	r3, r2
 8016caa:	681b      	ldr	r3, [r3, #0]
 8016cac:	2b00      	cmp	r3, #0
 8016cae:	d06b      	beq.n	8016d88 <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8016cb0:	68fb      	ldr	r3, [r7, #12]
 8016cb2:	781b      	ldrb	r3, [r3, #0]
 8016cb4:	f083 0301 	eor.w	r3, r3, #1
 8016cb8:	b2db      	uxtb	r3, r3
 8016cba:	2b00      	cmp	r3, #0
 8016cbc:	d011      	beq.n	8016ce2 <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 8016cbe:	68fb      	ldr	r3, [r7, #12]
 8016cc0:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8016cc2:	2b00      	cmp	r3, #0
 8016cc4:	d00d      	beq.n	8016ce2 <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 8016cc6:	68fb      	ldr	r3, [r7, #12]
 8016cc8:	695a      	ldr	r2, [r3, #20]
 8016cca:	7d3b      	ldrb	r3, [r7, #20]
 8016ccc:	005b      	lsls	r3, r3, #1
 8016cce:	4413      	add	r3, r2
 8016cd0:	881b      	ldrh	r3, [r3, #0]
 8016cd2:	461a      	mov	r2, r3
 8016cd4:	7cfb      	ldrb	r3, [r7, #19]
 8016cd6:	fa42 f303 	asr.w	r3, r2, r3
 8016cda:	f003 0301 	and.w	r3, r3, #1
 8016cde:	2b00      	cmp	r3, #0
 8016ce0:	d054      	beq.n	8016d8c <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8016ce2:	68fb      	ldr	r3, [r7, #12]
 8016ce4:	785b      	ldrb	r3, [r3, #1]
 8016ce6:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 8016ce8:	68fb      	ldr	r3, [r7, #12]
 8016cea:	689a      	ldr	r2, [r3, #8]
 8016cec:	7d79      	ldrb	r1, [r7, #21]
 8016cee:	7cfb      	ldrb	r3, [r7, #19]
 8016cf0:	440b      	add	r3, r1
 8016cf2:	4619      	mov	r1, r3
 8016cf4:	460b      	mov	r3, r1
 8016cf6:	005b      	lsls	r3, r3, #1
 8016cf8:	440b      	add	r3, r1
 8016cfa:	009b      	lsls	r3, r3, #2
 8016cfc:	4413      	add	r3, r2
 8016cfe:	7a1b      	ldrb	r3, [r3, #8]
 8016d00:	f343 0303 	sbfx	r3, r3, #0, #4
 8016d04:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8016d06:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 8016d08:	68fb      	ldr	r3, [r7, #12]
 8016d0a:	689a      	ldr	r2, [r3, #8]
 8016d0c:	7d79      	ldrb	r1, [r7, #21]
 8016d0e:	7cfb      	ldrb	r3, [r7, #19]
 8016d10:	440b      	add	r3, r1
 8016d12:	4619      	mov	r1, r3
 8016d14:	460b      	mov	r3, r1
 8016d16:	005b      	lsls	r3, r3, #1
 8016d18:	440b      	add	r3, r1
 8016d1a:	009b      	lsls	r3, r3, #2
 8016d1c:	4413      	add	r3, r2
 8016d1e:	7a1b      	ldrb	r3, [r3, #8]
 8016d20:	f343 1303 	sbfx	r3, r3, #4, #4
 8016d24:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8016d26:	461a      	mov	r2, r3
 8016d28:	4621      	mov	r1, r4
 8016d2a:	f7ff fbe8 	bl	80164fe <RegionCommonValueInRange>
 8016d2e:	4603      	mov	r3, r0
 8016d30:	2b00      	cmp	r3, #0
 8016d32:	d02d      	beq.n	8016d90 <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 8016d34:	68fb      	ldr	r3, [r7, #12]
 8016d36:	68da      	ldr	r2, [r3, #12]
 8016d38:	68fb      	ldr	r3, [r7, #12]
 8016d3a:	6899      	ldr	r1, [r3, #8]
 8016d3c:	7d78      	ldrb	r0, [r7, #21]
 8016d3e:	7cfb      	ldrb	r3, [r7, #19]
 8016d40:	4403      	add	r3, r0
 8016d42:	4618      	mov	r0, r3
 8016d44:	4603      	mov	r3, r0
 8016d46:	005b      	lsls	r3, r3, #1
 8016d48:	4403      	add	r3, r0
 8016d4a:	009b      	lsls	r3, r3, #2
 8016d4c:	440b      	add	r3, r1
 8016d4e:	7a5b      	ldrb	r3, [r3, #9]
 8016d50:	4619      	mov	r1, r3
 8016d52:	460b      	mov	r3, r1
 8016d54:	005b      	lsls	r3, r3, #1
 8016d56:	440b      	add	r3, r1
 8016d58:	00db      	lsls	r3, r3, #3
 8016d5a:	4413      	add	r3, r2
 8016d5c:	7d1b      	ldrb	r3, [r3, #20]
 8016d5e:	f083 0301 	eor.w	r3, r3, #1
 8016d62:	b2db      	uxtb	r3, r3
 8016d64:	2b00      	cmp	r3, #0
 8016d66:	d003      	beq.n	8016d70 <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 8016d68:	7dbb      	ldrb	r3, [r7, #22]
 8016d6a:	3301      	adds	r3, #1
 8016d6c:	75bb      	strb	r3, [r7, #22]
                    continue;
 8016d6e:	e010      	b.n	8016d92 <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 8016d70:	7dfb      	ldrb	r3, [r7, #23]
 8016d72:	1c5a      	adds	r2, r3, #1
 8016d74:	75fa      	strb	r2, [r7, #23]
 8016d76:	461a      	mov	r2, r3
 8016d78:	68bb      	ldr	r3, [r7, #8]
 8016d7a:	4413      	add	r3, r2
 8016d7c:	7d79      	ldrb	r1, [r7, #21]
 8016d7e:	7cfa      	ldrb	r2, [r7, #19]
 8016d80:	440a      	add	r2, r1
 8016d82:	b2d2      	uxtb	r2, r2
 8016d84:	701a      	strb	r2, [r3, #0]
 8016d86:	e004      	b.n	8016d92 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8016d88:	bf00      	nop
 8016d8a:	e002      	b.n	8016d92 <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 8016d8c:	bf00      	nop
 8016d8e:	e000      	b.n	8016d92 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8016d90:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 8016d92:	7cfb      	ldrb	r3, [r7, #19]
 8016d94:	3301      	adds	r3, #1
 8016d96:	74fb      	strb	r3, [r7, #19]
 8016d98:	7cfb      	ldrb	r3, [r7, #19]
 8016d9a:	2b0f      	cmp	r3, #15
 8016d9c:	f67f af6c 	bls.w	8016c78 <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8016da0:	7d7b      	ldrb	r3, [r7, #21]
 8016da2:	3310      	adds	r3, #16
 8016da4:	757b      	strb	r3, [r7, #21]
 8016da6:	7d3b      	ldrb	r3, [r7, #20]
 8016da8:	3301      	adds	r3, #1
 8016daa:	753b      	strb	r3, [r7, #20]
 8016dac:	7d7b      	ldrb	r3, [r7, #21]
 8016dae:	b29a      	uxth	r2, r3
 8016db0:	68fb      	ldr	r3, [r7, #12]
 8016db2:	8a1b      	ldrh	r3, [r3, #16]
 8016db4:	429a      	cmp	r2, r3
 8016db6:	f4ff af5c 	bcc.w	8016c72 <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 8016dba:	687b      	ldr	r3, [r7, #4]
 8016dbc:	7dfa      	ldrb	r2, [r7, #23]
 8016dbe:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 8016dc0:	683b      	ldr	r3, [r7, #0]
 8016dc2:	7dba      	ldrb	r2, [r7, #22]
 8016dc4:	701a      	strb	r2, [r3, #0]
}
 8016dc6:	bf00      	nop
 8016dc8:	371c      	adds	r7, #28
 8016dca:	46bd      	mov	sp, r7
 8016dcc:	bd90      	pop	{r4, r7, pc}

08016dce <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 8016dce:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016dd0:	b08b      	sub	sp, #44	@ 0x2c
 8016dd2:	af04      	add	r7, sp, #16
 8016dd4:	60f8      	str	r0, [r7, #12]
 8016dd6:	60b9      	str	r1, [r7, #8]
 8016dd8:	607a      	str	r2, [r7, #4]
 8016dda:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 8016ddc:	68fb      	ldr	r3, [r7, #12]
 8016dde:	685b      	ldr	r3, [r3, #4]
 8016de0:	4618      	mov	r0, r3
 8016de2:	f004 fbd1 	bl	801b588 <UTIL_TIMER_GetElapsedTime>
 8016de6:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 8016de8:	68fb      	ldr	r3, [r7, #12]
 8016dea:	681a      	ldr	r2, [r3, #0]
 8016dec:	697b      	ldr	r3, [r7, #20]
 8016dee:	1ad2      	subs	r2, r2, r3
 8016df0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016df2:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 8016df4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016df6:	2201      	movs	r2, #1
 8016df8:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 8016dfa:	683b      	ldr	r3, [r7, #0]
 8016dfc:	2200      	movs	r2, #0
 8016dfe:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8016e00:	68fb      	ldr	r3, [r7, #12]
 8016e02:	685b      	ldr	r3, [r3, #4]
 8016e04:	2b00      	cmp	r3, #0
 8016e06:	d004      	beq.n	8016e12 <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 8016e08:	68fb      	ldr	r3, [r7, #12]
 8016e0a:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8016e0c:	697a      	ldr	r2, [r7, #20]
 8016e0e:	429a      	cmp	r2, r3
 8016e10:	d32b      	bcc.n	8016e6a <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 8016e12:	68bb      	ldr	r3, [r7, #8]
 8016e14:	2200      	movs	r2, #0
 8016e16:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8016e18:	68fb      	ldr	r3, [r7, #12]
 8016e1a:	69db      	ldr	r3, [r3, #28]
 8016e1c:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 8016e1e:	68fb      	ldr	r3, [r7, #12]
 8016e20:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8016e22:	68dd      	ldr	r5, [r3, #12]
 8016e24:	68fb      	ldr	r3, [r7, #12]
 8016e26:	7a5e      	ldrb	r6, [r3, #9]
 8016e28:	68fb      	ldr	r3, [r7, #12]
 8016e2a:	f893 c008 	ldrb.w	ip, [r3, #8]
 8016e2e:	68fb      	ldr	r3, [r7, #12]
 8016e30:	7d1b      	ldrb	r3, [r3, #20]
 8016e32:	68fa      	ldr	r2, [r7, #12]
 8016e34:	6992      	ldr	r2, [r2, #24]
 8016e36:	9203      	str	r2, [sp, #12]
 8016e38:	68fa      	ldr	r2, [r7, #12]
 8016e3a:	f10d 0e04 	add.w	lr, sp, #4
 8016e3e:	320c      	adds	r2, #12
 8016e40:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016e44:	e88e 0003 	stmia.w	lr, {r0, r1}
 8016e48:	9300      	str	r3, [sp, #0]
 8016e4a:	4663      	mov	r3, ip
 8016e4c:	4632      	mov	r2, r6
 8016e4e:	4629      	mov	r1, r5
 8016e50:	4620      	mov	r0, r4
 8016e52:	f7ff fc25 	bl	80166a0 <RegionCommonUpdateBandTimeOff>
 8016e56:	4602      	mov	r2, r0
 8016e58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016e5a:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 8016e5c:	68fb      	ldr	r3, [r7, #12]
 8016e5e:	69d8      	ldr	r0, [r3, #28]
 8016e60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016e62:	683a      	ldr	r2, [r7, #0]
 8016e64:	6879      	ldr	r1, [r7, #4]
 8016e66:	f7ff fef4 	bl	8016c52 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 8016e6a:	683b      	ldr	r3, [r7, #0]
 8016e6c:	781b      	ldrb	r3, [r3, #0]
 8016e6e:	2b00      	cmp	r3, #0
 8016e70:	d004      	beq.n	8016e7c <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 8016e72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016e74:	2200      	movs	r2, #0
 8016e76:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8016e78:	2300      	movs	r3, #0
 8016e7a:	e006      	b.n	8016e8a <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 8016e7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016e7e:	781b      	ldrb	r3, [r3, #0]
 8016e80:	2b00      	cmp	r3, #0
 8016e82:	d001      	beq.n	8016e88 <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8016e84:	230b      	movs	r3, #11
 8016e86:	e000      	b.n	8016e8a <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8016e88:	230c      	movs	r3, #12
    }
}
 8016e8a:	4618      	mov	r0, r3
 8016e8c:	371c      	adds	r7, #28
 8016e8e:	46bd      	mov	sp, r7
 8016e90:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016e92 <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 8016e92:	b5b0      	push	{r4, r5, r7, lr}
 8016e94:	b086      	sub	sp, #24
 8016e96:	af02      	add	r7, sp, #8
 8016e98:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 8016e9a:	687b      	ldr	r3, [r7, #4]
 8016e9c:	781b      	ldrb	r3, [r3, #0]
 8016e9e:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 8016ea0:	687b      	ldr	r3, [r7, #4]
 8016ea2:	f993 2000 	ldrsb.w	r2, [r3]
 8016ea6:	687b      	ldr	r3, [r7, #4]
 8016ea8:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8016eac:	429a      	cmp	r2, r3
 8016eae:	d103      	bne.n	8016eb8 <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 8016eb0:	687b      	ldr	r3, [r7, #4]
 8016eb2:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8016eb6:	e026      	b.n	8016f06 <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 8016eb8:	7bfb      	ldrb	r3, [r7, #15]
 8016eba:	3b01      	subs	r3, #1
 8016ebc:	b2db      	uxtb	r3, r3
 8016ebe:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 8016ec0:	687b      	ldr	r3, [r7, #4]
 8016ec2:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8016ec6:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8016eca:	429a      	cmp	r2, r3
 8016ecc:	d019      	beq.n	8016f02 <RegionCommonGetNextLowerTxDr+0x70>
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 8016ece:	687b      	ldr	r3, [r7, #4]
 8016ed0:	78d8      	ldrb	r0, [r3, #3]
 8016ed2:	687b      	ldr	r3, [r7, #4]
 8016ed4:	6859      	ldr	r1, [r3, #4]
 8016ed6:	687b      	ldr	r3, [r7, #4]
 8016ed8:	f993 5002 	ldrsb.w	r5, [r3, #2]
 8016edc:	687b      	ldr	r3, [r7, #4]
 8016ede:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016ee2:	687a      	ldr	r2, [r7, #4]
 8016ee4:	6892      	ldr	r2, [r2, #8]
 8016ee6:	f997 400f 	ldrsb.w	r4, [r7, #15]
 8016eea:	9201      	str	r2, [sp, #4]
 8016eec:	9300      	str	r3, [sp, #0]
 8016eee:	462b      	mov	r3, r5
 8016ef0:	4622      	mov	r2, r4
 8016ef2:	f7ff fa92 	bl	801641a <RegionCommonChanVerifyDr>
 8016ef6:	4603      	mov	r3, r0
 8016ef8:	f083 0301 	eor.w	r3, r3, #1
 8016efc:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 8016efe:	2b00      	cmp	r3, #0
 8016f00:	d1da      	bne.n	8016eb8 <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 8016f02:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 8016f06:	4618      	mov	r0, r3
 8016f08:	3710      	adds	r7, #16
 8016f0a:	46bd      	mov	sp, r7
 8016f0c:	bdb0      	pop	{r4, r5, r7, pc}

08016f0e <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 8016f0e:	b480      	push	{r7}
 8016f10:	b083      	sub	sp, #12
 8016f12:	af00      	add	r7, sp, #0
 8016f14:	4603      	mov	r3, r0
 8016f16:	460a      	mov	r2, r1
 8016f18:	71fb      	strb	r3, [r7, #7]
 8016f1a:	4613      	mov	r3, r2
 8016f1c:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 8016f1e:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8016f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016f26:	4293      	cmp	r3, r2
 8016f28:	bfb8      	it	lt
 8016f2a:	4613      	movlt	r3, r2
 8016f2c:	b25b      	sxtb	r3, r3
}
 8016f2e:	4618      	mov	r0, r3
 8016f30:	370c      	adds	r7, #12
 8016f32:	46bd      	mov	sp, r7
 8016f34:	bc80      	pop	{r7}
 8016f36:	4770      	bx	lr

08016f38 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 8016f38:	b480      	push	{r7}
 8016f3a:	b083      	sub	sp, #12
 8016f3c:	af00      	add	r7, sp, #0
 8016f3e:	6078      	str	r0, [r7, #4]
 8016f40:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 8016f42:	687b      	ldr	r3, [r7, #4]
 8016f44:	009b      	lsls	r3, r3, #2
 8016f46:	683a      	ldr	r2, [r7, #0]
 8016f48:	4413      	add	r3, r2
 8016f4a:	681b      	ldr	r3, [r3, #0]
 8016f4c:	4a07      	ldr	r2, [pc, #28]	@ (8016f6c <RegionCommonGetBandwidth+0x34>)
 8016f4e:	4293      	cmp	r3, r2
 8016f50:	d004      	beq.n	8016f5c <RegionCommonGetBandwidth+0x24>
 8016f52:	4a07      	ldr	r2, [pc, #28]	@ (8016f70 <RegionCommonGetBandwidth+0x38>)
 8016f54:	4293      	cmp	r3, r2
 8016f56:	d003      	beq.n	8016f60 <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 8016f58:	2300      	movs	r3, #0
 8016f5a:	e002      	b.n	8016f62 <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 8016f5c:	2301      	movs	r3, #1
 8016f5e:	e000      	b.n	8016f62 <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 8016f60:	2302      	movs	r3, #2
    }
}
 8016f62:	4618      	mov	r0, r3
 8016f64:	370c      	adds	r7, #12
 8016f66:	46bd      	mov	sp, r7
 8016f68:	bc80      	pop	{r7}
 8016f6a:	4770      	bx	lr
 8016f6c:	0003d090 	.word	0x0003d090
 8016f70:	0007a120 	.word	0x0007a120

08016f74 <RegionCommonRxConfigPrint>:

/* ST_WORKAROUND_BEGIN: Print Tx/Rx config */
void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 8016f74:	b580      	push	{r7, lr}
 8016f76:	b086      	sub	sp, #24
 8016f78:	af04      	add	r7, sp, #16
 8016f7a:	4603      	mov	r3, r0
 8016f7c:	6039      	str	r1, [r7, #0]
 8016f7e:	71fb      	strb	r3, [r7, #7]
 8016f80:	4613      	mov	r3, r2
 8016f82:	71bb      	strb	r3, [r7, #6]
    if ( rxSlot < RX_SLOT_NONE )
 8016f84:	79fb      	ldrb	r3, [r7, #7]
 8016f86:	2b05      	cmp	r3, #5
 8016f88:	d810      	bhi.n	8016fac <RegionCommonRxConfigPrint+0x38>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 8016f8a:	79fb      	ldrb	r3, [r7, #7]
 8016f8c:	4a0f      	ldr	r2, [pc, #60]	@ (8016fcc <RegionCommonRxConfigPrint+0x58>)
 8016f8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016f92:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8016f96:	9202      	str	r2, [sp, #8]
 8016f98:	683a      	ldr	r2, [r7, #0]
 8016f9a:	9201      	str	r2, [sp, #4]
 8016f9c:	9300      	str	r3, [sp, #0]
 8016f9e:	4b0c      	ldr	r3, [pc, #48]	@ (8016fd0 <RegionCommonRxConfigPrint+0x5c>)
 8016fa0:	2201      	movs	r2, #1
 8016fa2:	2100      	movs	r1, #0
 8016fa4:	2002      	movs	r0, #2
 8016fa6:	f004 fbcd 	bl	801b744 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 8016faa:	e00a      	b.n	8016fc2 <RegionCommonRxConfigPrint+0x4e>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 8016fac:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8016fb0:	9301      	str	r3, [sp, #4]
 8016fb2:	683b      	ldr	r3, [r7, #0]
 8016fb4:	9300      	str	r3, [sp, #0]
 8016fb6:	4b07      	ldr	r3, [pc, #28]	@ (8016fd4 <RegionCommonRxConfigPrint+0x60>)
 8016fb8:	2201      	movs	r2, #1
 8016fba:	2100      	movs	r1, #0
 8016fbc:	2002      	movs	r0, #2
 8016fbe:	f004 fbc1 	bl	801b744 <UTIL_ADV_TRACE_COND_FSend>
}
 8016fc2:	bf00      	nop
 8016fc4:	3708      	adds	r7, #8
 8016fc6:	46bd      	mov	sp, r7
 8016fc8:	bd80      	pop	{r7, pc}
 8016fca:	bf00      	nop
 8016fcc:	20000110 	.word	0x20000110
 8016fd0:	0801ef50 	.word	0x0801ef50
 8016fd4:	0801ef70 	.word	0x0801ef70

08016fd8 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 8016fd8:	b580      	push	{r7, lr}
 8016fda:	b084      	sub	sp, #16
 8016fdc:	af02      	add	r7, sp, #8
 8016fde:	6078      	str	r0, [r7, #4]
 8016fe0:	460b      	mov	r3, r1
 8016fe2:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 8016fe4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016fe8:	9301      	str	r3, [sp, #4]
 8016fea:	687b      	ldr	r3, [r7, #4]
 8016fec:	9300      	str	r3, [sp, #0]
 8016fee:	4b05      	ldr	r3, [pc, #20]	@ (8017004 <RegionCommonTxConfigPrint+0x2c>)
 8016ff0:	2201      	movs	r2, #1
 8016ff2:	2100      	movs	r1, #0
 8016ff4:	2002      	movs	r0, #2
 8016ff6:	f004 fba5 	bl	801b744 <UTIL_ADV_TRACE_COND_FSend>
}
 8016ffa:	bf00      	nop
 8016ffc:	3708      	adds	r7, #8
 8016ffe:	46bd      	mov	sp, r7
 8017000:	bd80      	pop	{r7, pc}
 8017002:	bf00      	nop
 8017004:	0801ef8c 	.word	0x0801ef8c

08017008 <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 8017008:	b480      	push	{r7}
 801700a:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 801700c:	4b0d      	ldr	r3, [pc, #52]	@ (8017044 <rand1+0x3c>)
 801700e:	681b      	ldr	r3, [r3, #0]
 8017010:	4a0d      	ldr	r2, [pc, #52]	@ (8017048 <rand1+0x40>)
 8017012:	fb02 f303 	mul.w	r3, r2, r3
 8017016:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 801701a:	3339      	adds	r3, #57	@ 0x39
 801701c:	4a09      	ldr	r2, [pc, #36]	@ (8017044 <rand1+0x3c>)
 801701e:	6013      	str	r3, [r2, #0]
 8017020:	4b08      	ldr	r3, [pc, #32]	@ (8017044 <rand1+0x3c>)
 8017022:	681a      	ldr	r2, [r3, #0]
 8017024:	2303      	movs	r3, #3
 8017026:	fba3 1302 	umull	r1, r3, r3, r2
 801702a:	1ad1      	subs	r1, r2, r3
 801702c:	0849      	lsrs	r1, r1, #1
 801702e:	440b      	add	r3, r1
 8017030:	0f99      	lsrs	r1, r3, #30
 8017032:	460b      	mov	r3, r1
 8017034:	07db      	lsls	r3, r3, #31
 8017036:	1a5b      	subs	r3, r3, r1
 8017038:	1ad1      	subs	r1, r2, r3
 801703a:	460b      	mov	r3, r1
}
 801703c:	4618      	mov	r0, r3
 801703e:	46bd      	mov	sp, r7
 8017040:	bc80      	pop	{r7}
 8017042:	4770      	bx	lr
 8017044:	20000128 	.word	0x20000128
 8017048:	41c64e6d 	.word	0x41c64e6d

0801704c <srand1>:

void srand1( uint32_t seed )
{
 801704c:	b480      	push	{r7}
 801704e:	b083      	sub	sp, #12
 8017050:	af00      	add	r7, sp, #0
 8017052:	6078      	str	r0, [r7, #4]
    next = seed;
 8017054:	4a03      	ldr	r2, [pc, #12]	@ (8017064 <srand1+0x18>)
 8017056:	687b      	ldr	r3, [r7, #4]
 8017058:	6013      	str	r3, [r2, #0]
}
 801705a:	bf00      	nop
 801705c:	370c      	adds	r7, #12
 801705e:	46bd      	mov	sp, r7
 8017060:	bc80      	pop	{r7}
 8017062:	4770      	bx	lr
 8017064:	20000128 	.word	0x20000128

08017068 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 8017068:	b580      	push	{r7, lr}
 801706a:	b082      	sub	sp, #8
 801706c:	af00      	add	r7, sp, #0
 801706e:	6078      	str	r0, [r7, #4]
 8017070:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 8017072:	f7ff ffc9 	bl	8017008 <rand1>
 8017076:	4602      	mov	r2, r0
 8017078:	6839      	ldr	r1, [r7, #0]
 801707a:	687b      	ldr	r3, [r7, #4]
 801707c:	1acb      	subs	r3, r1, r3
 801707e:	3301      	adds	r3, #1
 8017080:	fb92 f1f3 	sdiv	r1, r2, r3
 8017084:	fb01 f303 	mul.w	r3, r1, r3
 8017088:	1ad2      	subs	r2, r2, r3
 801708a:	687b      	ldr	r3, [r7, #4]
 801708c:	4413      	add	r3, r2
}
 801708e:	4618      	mov	r0, r3
 8017090:	3708      	adds	r7, #8
 8017092:	46bd      	mov	sp, r7
 8017094:	bd80      	pop	{r7, pc}

08017096 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8017096:	b480      	push	{r7}
 8017098:	b085      	sub	sp, #20
 801709a:	af00      	add	r7, sp, #0
 801709c:	60f8      	str	r0, [r7, #12]
 801709e:	60b9      	str	r1, [r7, #8]
 80170a0:	4613      	mov	r3, r2
 80170a2:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 80170a4:	e007      	b.n	80170b6 <memcpy1+0x20>
    {
        *dst++ = *src++;
 80170a6:	68ba      	ldr	r2, [r7, #8]
 80170a8:	1c53      	adds	r3, r2, #1
 80170aa:	60bb      	str	r3, [r7, #8]
 80170ac:	68fb      	ldr	r3, [r7, #12]
 80170ae:	1c59      	adds	r1, r3, #1
 80170b0:	60f9      	str	r1, [r7, #12]
 80170b2:	7812      	ldrb	r2, [r2, #0]
 80170b4:	701a      	strb	r2, [r3, #0]
    while( size-- )
 80170b6:	88fb      	ldrh	r3, [r7, #6]
 80170b8:	1e5a      	subs	r2, r3, #1
 80170ba:	80fa      	strh	r2, [r7, #6]
 80170bc:	2b00      	cmp	r3, #0
 80170be:	d1f2      	bne.n	80170a6 <memcpy1+0x10>
    }
}
 80170c0:	bf00      	nop
 80170c2:	bf00      	nop
 80170c4:	3714      	adds	r7, #20
 80170c6:	46bd      	mov	sp, r7
 80170c8:	bc80      	pop	{r7}
 80170ca:	4770      	bx	lr

080170cc <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 80170cc:	b480      	push	{r7}
 80170ce:	b085      	sub	sp, #20
 80170d0:	af00      	add	r7, sp, #0
 80170d2:	60f8      	str	r0, [r7, #12]
 80170d4:	60b9      	str	r1, [r7, #8]
 80170d6:	4613      	mov	r3, r2
 80170d8:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 80170da:	88fb      	ldrh	r3, [r7, #6]
 80170dc:	3b01      	subs	r3, #1
 80170de:	68fa      	ldr	r2, [r7, #12]
 80170e0:	4413      	add	r3, r2
 80170e2:	60fb      	str	r3, [r7, #12]
    while( size-- )
 80170e4:	e007      	b.n	80170f6 <memcpyr+0x2a>
    {
        *dst-- = *src++;
 80170e6:	68ba      	ldr	r2, [r7, #8]
 80170e8:	1c53      	adds	r3, r2, #1
 80170ea:	60bb      	str	r3, [r7, #8]
 80170ec:	68fb      	ldr	r3, [r7, #12]
 80170ee:	1e59      	subs	r1, r3, #1
 80170f0:	60f9      	str	r1, [r7, #12]
 80170f2:	7812      	ldrb	r2, [r2, #0]
 80170f4:	701a      	strb	r2, [r3, #0]
    while( size-- )
 80170f6:	88fb      	ldrh	r3, [r7, #6]
 80170f8:	1e5a      	subs	r2, r3, #1
 80170fa:	80fa      	strh	r2, [r7, #6]
 80170fc:	2b00      	cmp	r3, #0
 80170fe:	d1f2      	bne.n	80170e6 <memcpyr+0x1a>
    }
}
 8017100:	bf00      	nop
 8017102:	bf00      	nop
 8017104:	3714      	adds	r7, #20
 8017106:	46bd      	mov	sp, r7
 8017108:	bc80      	pop	{r7}
 801710a:	4770      	bx	lr

0801710c <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 801710c:	b480      	push	{r7}
 801710e:	b083      	sub	sp, #12
 8017110:	af00      	add	r7, sp, #0
 8017112:	6078      	str	r0, [r7, #4]
 8017114:	460b      	mov	r3, r1
 8017116:	70fb      	strb	r3, [r7, #3]
 8017118:	4613      	mov	r3, r2
 801711a:	803b      	strh	r3, [r7, #0]
    while( size-- )
 801711c:	e004      	b.n	8017128 <memset1+0x1c>
    {
        *dst++ = value;
 801711e:	687b      	ldr	r3, [r7, #4]
 8017120:	1c5a      	adds	r2, r3, #1
 8017122:	607a      	str	r2, [r7, #4]
 8017124:	78fa      	ldrb	r2, [r7, #3]
 8017126:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8017128:	883b      	ldrh	r3, [r7, #0]
 801712a:	1e5a      	subs	r2, r3, #1
 801712c:	803a      	strh	r2, [r7, #0]
 801712e:	2b00      	cmp	r3, #0
 8017130:	d1f5      	bne.n	801711e <memset1+0x12>
    }
}
 8017132:	bf00      	nop
 8017134:	bf00      	nop
 8017136:	370c      	adds	r7, #12
 8017138:	46bd      	mov	sp, r7
 801713a:	bc80      	pop	{r7}
 801713c:	4770      	bx	lr
	...

08017140 <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 8017140:	b480      	push	{r7}
 8017142:	b085      	sub	sp, #20
 8017144:	af00      	add	r7, sp, #0
 8017146:	6078      	str	r0, [r7, #4]
 8017148:	460b      	mov	r3, r1
 801714a:	807b      	strh	r3, [r7, #2]
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 801714c:	f04f 33ff 	mov.w	r3, #4294967295
 8017150:	60fb      	str	r3, [r7, #12]

    if( buffer == NULL )
 8017152:	687b      	ldr	r3, [r7, #4]
 8017154:	2b00      	cmp	r3, #0
 8017156:	d101      	bne.n	801715c <Crc32+0x1c>
    {
        return 0;
 8017158:	2300      	movs	r3, #0
 801715a:	e026      	b.n	80171aa <Crc32+0x6a>
    }

    for( uint16_t i = 0; i < length; ++i )
 801715c:	2300      	movs	r3, #0
 801715e:	817b      	strh	r3, [r7, #10]
 8017160:	e01d      	b.n	801719e <Crc32+0x5e>
    {
        crc ^= ( uint32_t )buffer[i];
 8017162:	897b      	ldrh	r3, [r7, #10]
 8017164:	687a      	ldr	r2, [r7, #4]
 8017166:	4413      	add	r3, r2
 8017168:	781b      	ldrb	r3, [r3, #0]
 801716a:	461a      	mov	r2, r3
 801716c:	68fb      	ldr	r3, [r7, #12]
 801716e:	4053      	eors	r3, r2
 8017170:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 8017172:	2300      	movs	r3, #0
 8017174:	813b      	strh	r3, [r7, #8]
 8017176:	e00c      	b.n	8017192 <Crc32+0x52>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 8017178:	68fb      	ldr	r3, [r7, #12]
 801717a:	085a      	lsrs	r2, r3, #1
 801717c:	68fb      	ldr	r3, [r7, #12]
 801717e:	f003 0301 	and.w	r3, r3, #1
 8017182:	425b      	negs	r3, r3
 8017184:	490b      	ldr	r1, [pc, #44]	@ (80171b4 <Crc32+0x74>)
 8017186:	400b      	ands	r3, r1
 8017188:	4053      	eors	r3, r2
 801718a:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 801718c:	893b      	ldrh	r3, [r7, #8]
 801718e:	3301      	adds	r3, #1
 8017190:	813b      	strh	r3, [r7, #8]
 8017192:	893b      	ldrh	r3, [r7, #8]
 8017194:	2b07      	cmp	r3, #7
 8017196:	d9ef      	bls.n	8017178 <Crc32+0x38>
    for( uint16_t i = 0; i < length; ++i )
 8017198:	897b      	ldrh	r3, [r7, #10]
 801719a:	3301      	adds	r3, #1
 801719c:	817b      	strh	r3, [r7, #10]
 801719e:	897a      	ldrh	r2, [r7, #10]
 80171a0:	887b      	ldrh	r3, [r7, #2]
 80171a2:	429a      	cmp	r2, r3
 80171a4:	d3dd      	bcc.n	8017162 <Crc32+0x22>
        }
    }

    return ~crc;
 80171a6:	68fb      	ldr	r3, [r7, #12]
 80171a8:	43db      	mvns	r3, r3
}
 80171aa:	4618      	mov	r0, r3
 80171ac:	3714      	adds	r7, #20
 80171ae:	46bd      	mov	sp, r7
 80171b0:	bc80      	pop	{r7}
 80171b2:	4770      	bx	lr
 80171b4:	edb88320 	.word	0xedb88320

080171b8 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 80171b8:	b580      	push	{r7, lr}
 80171ba:	b084      	sub	sp, #16
 80171bc:	af02      	add	r7, sp, #8
 80171be:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 80171c0:	4a24      	ldr	r2, [pc, #144]	@ (8017254 <RadioInit+0x9c>)
 80171c2:	687b      	ldr	r3, [r7, #4]
 80171c4:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 80171c6:	4b24      	ldr	r3, [pc, #144]	@ (8017258 <RadioInit+0xa0>)
 80171c8:	2200      	movs	r2, #0
 80171ca:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 80171cc:	4b22      	ldr	r3, [pc, #136]	@ (8017258 <RadioInit+0xa0>)
 80171ce:	2200      	movs	r2, #0
 80171d0:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 80171d2:	4b21      	ldr	r3, [pc, #132]	@ (8017258 <RadioInit+0xa0>)
 80171d4:	2200      	movs	r2, #0
 80171d6:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80171d8:	4b1f      	ldr	r3, [pc, #124]	@ (8017258 <RadioInit+0xa0>)
 80171da:	2200      	movs	r2, #0
 80171dc:	659a      	str	r2, [r3, #88]	@ 0x58

    SUBGRF_Init( RadioOnDioIrq );
 80171de:	481f      	ldr	r0, [pc, #124]	@ (801725c <RadioInit+0xa4>)
 80171e0:	f001 ff8e 	bl	8019100 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 80171e4:	4b1c      	ldr	r3, [pc, #112]	@ (8017258 <RadioInit+0xa0>)
 80171e6:	2200      	movs	r2, #0
 80171e8:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 80171ea:	4b1b      	ldr	r3, [pc, #108]	@ (8017258 <RadioInit+0xa0>)
 80171ec:	2200      	movs	r2, #0
 80171ee:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 80171f0:	f002 fa1e 	bl	8019630 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 80171f4:	2100      	movs	r1, #0
 80171f6:	2000      	movs	r0, #0
 80171f8:	f002 fde6 	bl	8019dc8 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 80171fc:	2204      	movs	r2, #4
 80171fe:	2100      	movs	r1, #0
 8017200:	2001      	movs	r0, #1
 8017202:	f002 fba9 	bl	8019958 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8017206:	2300      	movs	r3, #0
 8017208:	2200      	movs	r2, #0
 801720a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801720e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8017212:	f002 fad9 	bl	80197c8 <SUBGRF_SetDioIrqParams>

    /* ST_WORKAROUND_BEGIN: Sleep radio */
    RadioSleep();
 8017216:	f000 fe83 	bl	8017f20 <RadioSleep>
    /* ST_WORKAROUND_END */
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 801721a:	2300      	movs	r3, #0
 801721c:	9300      	str	r3, [sp, #0]
 801721e:	4b10      	ldr	r3, [pc, #64]	@ (8017260 <RadioInit+0xa8>)
 8017220:	2200      	movs	r2, #0
 8017222:	f04f 31ff 	mov.w	r1, #4294967295
 8017226:	480f      	ldr	r0, [pc, #60]	@ (8017264 <RadioInit+0xac>)
 8017228:	f003 ffde 	bl	801b1e8 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 801722c:	2300      	movs	r3, #0
 801722e:	9300      	str	r3, [sp, #0]
 8017230:	4b0d      	ldr	r3, [pc, #52]	@ (8017268 <RadioInit+0xb0>)
 8017232:	2200      	movs	r2, #0
 8017234:	f04f 31ff 	mov.w	r1, #4294967295
 8017238:	480c      	ldr	r0, [pc, #48]	@ (801726c <RadioInit+0xb4>)
 801723a:	f003 ffd5 	bl	801b1e8 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 801723e:	4809      	ldr	r0, [pc, #36]	@ (8017264 <RadioInit+0xac>)
 8017240:	f004 f876 	bl	801b330 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8017244:	4809      	ldr	r0, [pc, #36]	@ (801726c <RadioInit+0xb4>)
 8017246:	f004 f873 	bl	801b330 <UTIL_TIMER_Stop>
}
 801724a:	bf00      	nop
 801724c:	3708      	adds	r7, #8
 801724e:	46bd      	mov	sp, r7
 8017250:	bd80      	pop	{r7, pc}
 8017252:	bf00      	nop
 8017254:	20001cd4 	.word	0x20001cd4
 8017258:	20001cd8 	.word	0x20001cd8
 801725c:	08018309 	.word	0x08018309
 8017260:	08018291 	.word	0x08018291
 8017264:	20001d34 	.word	0x20001d34
 8017268:	080182a5 	.word	0x080182a5
 801726c:	20001d4c 	.word	0x20001d4c

08017270 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8017270:	b580      	push	{r7, lr}
 8017272:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8017274:	f001 ff86 	bl	8019184 <SUBGRF_GetOperatingMode>
 8017278:	4603      	mov	r3, r0
 801727a:	2b07      	cmp	r3, #7
 801727c:	d00a      	beq.n	8017294 <RadioGetStatus+0x24>
 801727e:	2b07      	cmp	r3, #7
 8017280:	dc0a      	bgt.n	8017298 <RadioGetStatus+0x28>
 8017282:	2b04      	cmp	r3, #4
 8017284:	d002      	beq.n	801728c <RadioGetStatus+0x1c>
 8017286:	2b05      	cmp	r3, #5
 8017288:	d002      	beq.n	8017290 <RadioGetStatus+0x20>
 801728a:	e005      	b.n	8017298 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 801728c:	2302      	movs	r3, #2
 801728e:	e004      	b.n	801729a <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8017290:	2301      	movs	r3, #1
 8017292:	e002      	b.n	801729a <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8017294:	2303      	movs	r3, #3
 8017296:	e000      	b.n	801729a <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8017298:	2300      	movs	r3, #0
    }
}
 801729a:	4618      	mov	r0, r3
 801729c:	bd80      	pop	{r7, pc}
	...

080172a0 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 80172a0:	b580      	push	{r7, lr}
 80172a2:	b082      	sub	sp, #8
 80172a4:	af00      	add	r7, sp, #0
 80172a6:	4603      	mov	r3, r0
 80172a8:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 80172aa:	4a2a      	ldr	r2, [pc, #168]	@ (8017354 <RadioSetModem+0xb4>)
 80172ac:	79fb      	ldrb	r3, [r7, #7]
 80172ae:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 80172b0:	79fb      	ldrb	r3, [r7, #7]
 80172b2:	4618      	mov	r0, r3
 80172b4:	f003 f94b 	bl	801a54e <RFW_SetRadioModem>
    switch( modem )
 80172b8:	79fb      	ldrb	r3, [r7, #7]
 80172ba:	2b05      	cmp	r3, #5
 80172bc:	d80e      	bhi.n	80172dc <RadioSetModem+0x3c>
 80172be:	a201      	add	r2, pc, #4	@ (adr r2, 80172c4 <RadioSetModem+0x24>)
 80172c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80172c4:	080172eb 	.word	0x080172eb
 80172c8:	080172f9 	.word	0x080172f9
 80172cc:	080172dd 	.word	0x080172dd
 80172d0:	0801731f 	.word	0x0801731f
 80172d4:	0801732d 	.word	0x0801732d
 80172d8:	0801733b 	.word	0x0801733b
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 80172dc:	2003      	movs	r0, #3
 80172de:	f002 fb15 	bl	801990c <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80172e2:	4b1c      	ldr	r3, [pc, #112]	@ (8017354 <RadioSetModem+0xb4>)
 80172e4:	2200      	movs	r2, #0
 80172e6:	735a      	strb	r2, [r3, #13]
        break;
 80172e8:	e02f      	b.n	801734a <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 80172ea:	2000      	movs	r0, #0
 80172ec:	f002 fb0e 	bl	801990c <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80172f0:	4b18      	ldr	r3, [pc, #96]	@ (8017354 <RadioSetModem+0xb4>)
 80172f2:	2200      	movs	r2, #0
 80172f4:	735a      	strb	r2, [r3, #13]
        break;
 80172f6:	e028      	b.n	801734a <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 80172f8:	2001      	movs	r0, #1
 80172fa:	f002 fb07 	bl	801990c <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 80172fe:	4b15      	ldr	r3, [pc, #84]	@ (8017354 <RadioSetModem+0xb4>)
 8017300:	7b5a      	ldrb	r2, [r3, #13]
 8017302:	4b14      	ldr	r3, [pc, #80]	@ (8017354 <RadioSetModem+0xb4>)
 8017304:	7b1b      	ldrb	r3, [r3, #12]
 8017306:	429a      	cmp	r2, r3
 8017308:	d01e      	beq.n	8017348 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 801730a:	4b12      	ldr	r3, [pc, #72]	@ (8017354 <RadioSetModem+0xb4>)
 801730c:	7b1a      	ldrb	r2, [r3, #12]
 801730e:	4b11      	ldr	r3, [pc, #68]	@ (8017354 <RadioSetModem+0xb4>)
 8017310:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8017312:	4b10      	ldr	r3, [pc, #64]	@ (8017354 <RadioSetModem+0xb4>)
 8017314:	7b5b      	ldrb	r3, [r3, #13]
 8017316:	4618      	mov	r0, r3
 8017318:	f000 ff84 	bl	8018224 <RadioSetPublicNetwork>
        }
        break;
 801731c:	e014      	b.n	8017348 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 801731e:	2002      	movs	r0, #2
 8017320:	f002 faf4 	bl	801990c <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8017324:	4b0b      	ldr	r3, [pc, #44]	@ (8017354 <RadioSetModem+0xb4>)
 8017326:	2200      	movs	r2, #0
 8017328:	735a      	strb	r2, [r3, #13]
        break;
 801732a:	e00e      	b.n	801734a <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 801732c:	2002      	movs	r0, #2
 801732e:	f002 faed 	bl	801990c <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8017332:	4b08      	ldr	r3, [pc, #32]	@ (8017354 <RadioSetModem+0xb4>)
 8017334:	2200      	movs	r2, #0
 8017336:	735a      	strb	r2, [r3, #13]
        break;
 8017338:	e007      	b.n	801734a <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 801733a:	2000      	movs	r0, #0
 801733c:	f002 fae6 	bl	801990c <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8017340:	4b04      	ldr	r3, [pc, #16]	@ (8017354 <RadioSetModem+0xb4>)
 8017342:	2200      	movs	r2, #0
 8017344:	735a      	strb	r2, [r3, #13]
        break;
 8017346:	e000      	b.n	801734a <RadioSetModem+0xaa>
        break;
 8017348:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 801734a:	bf00      	nop
 801734c:	3708      	adds	r7, #8
 801734e:	46bd      	mov	sp, r7
 8017350:	bd80      	pop	{r7, pc}
 8017352:	bf00      	nop
 8017354:	20001cd8 	.word	0x20001cd8

08017358 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 8017358:	b580      	push	{r7, lr}
 801735a:	b082      	sub	sp, #8
 801735c:	af00      	add	r7, sp, #0
 801735e:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8017360:	6878      	ldr	r0, [r7, #4]
 8017362:	f002 fa8d 	bl	8019880 <SUBGRF_SetRfFrequency>
}
 8017366:	bf00      	nop
 8017368:	3708      	adds	r7, #8
 801736a:	46bd      	mov	sp, r7
 801736c:	bd80      	pop	{r7, pc}

0801736e <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 801736e:	b580      	push	{r7, lr}
 8017370:	b090      	sub	sp, #64	@ 0x40
 8017372:	af0a      	add	r7, sp, #40	@ 0x28
 8017374:	60f8      	str	r0, [r7, #12]
 8017376:	60b9      	str	r1, [r7, #8]
 8017378:	603b      	str	r3, [r7, #0]
 801737a:	4613      	mov	r3, r2
 801737c:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 801737e:	2301      	movs	r3, #1
 8017380:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 8017382:	2300      	movs	r3, #0
 8017384:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 8017386:	2300      	movs	r3, #0
 8017388:	613b      	str	r3, [r7, #16]

    RadioStandby( );  /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 801738a:	f000 fddc 	bl	8017f46 <RadioStandby>

    RadioSetModem( MODEM_FSK );
 801738e:	2000      	movs	r0, #0
 8017390:	f7ff ff86 	bl	80172a0 <RadioSetModem>

    RadioSetChannel( freq );
 8017394:	68f8      	ldr	r0, [r7, #12]
 8017396:	f7ff ffdf 	bl	8017358 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 801739a:	2301      	movs	r3, #1
 801739c:	9309      	str	r3, [sp, #36]	@ 0x24
 801739e:	2300      	movs	r3, #0
 80173a0:	9308      	str	r3, [sp, #32]
 80173a2:	2300      	movs	r3, #0
 80173a4:	9307      	str	r3, [sp, #28]
 80173a6:	2300      	movs	r3, #0
 80173a8:	9306      	str	r3, [sp, #24]
 80173aa:	2300      	movs	r3, #0
 80173ac:	9305      	str	r3, [sp, #20]
 80173ae:	2300      	movs	r3, #0
 80173b0:	9304      	str	r3, [sp, #16]
 80173b2:	2300      	movs	r3, #0
 80173b4:	9303      	str	r3, [sp, #12]
 80173b6:	2300      	movs	r3, #0
 80173b8:	9302      	str	r3, [sp, #8]
 80173ba:	2303      	movs	r3, #3
 80173bc:	9301      	str	r3, [sp, #4]
 80173be:	68bb      	ldr	r3, [r7, #8]
 80173c0:	9300      	str	r3, [sp, #0]
 80173c2:	2300      	movs	r3, #0
 80173c4:	f44f 7216 	mov.w	r2, #600	@ 0x258
 80173c8:	68b9      	ldr	r1, [r7, #8]
 80173ca:	2000      	movs	r0, #0
 80173cc:	f000 f83c 	bl	8017448 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 80173d0:	2000      	movs	r0, #0
 80173d2:	f000 fdbf 	bl	8017f54 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 80173d6:	f000 ff53 	bl	8018280 <RadioGetWakeupTime>
 80173da:	4603      	mov	r3, r0
 80173dc:	4618      	mov	r0, r3
 80173de:	f7ea feb3 	bl	8002148 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 80173e2:	f004 f8bf 	bl	801b564 <UTIL_TIMER_GetCurrentTime>
 80173e6:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80173e8:	e00d      	b.n	8017406 <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 80173ea:	2000      	movs	r0, #0
 80173ec:	f000 fe9a 	bl	8018124 <RadioRssi>
 80173f0:	4603      	mov	r3, r0
 80173f2:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 80173f4:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80173f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80173fc:	429a      	cmp	r2, r3
 80173fe:	dd02      	ble.n	8017406 <RadioIsChannelFree+0x98>
        {
            status = false;
 8017400:	2300      	movs	r3, #0
 8017402:	75fb      	strb	r3, [r7, #23]
            break;
 8017404:	e006      	b.n	8017414 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8017406:	6938      	ldr	r0, [r7, #16]
 8017408:	f004 f8be 	bl	801b588 <UTIL_TIMER_GetElapsedTime>
 801740c:	4602      	mov	r2, r0
 801740e:	683b      	ldr	r3, [r7, #0]
 8017410:	4293      	cmp	r3, r2
 8017412:	d8ea      	bhi.n	80173ea <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( ); /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 8017414:	f000 fd97 	bl	8017f46 <RadioStandby>

    return status;
 8017418:	7dfb      	ldrb	r3, [r7, #23]
}
 801741a:	4618      	mov	r0, r3
 801741c:	3718      	adds	r7, #24
 801741e:	46bd      	mov	sp, r7
 8017420:	bd80      	pop	{r7, pc}

08017422 <RadioRandom>:

static uint32_t RadioRandom( void )
{
 8017422:	b580      	push	{r7, lr}
 8017424:	b082      	sub	sp, #8
 8017426:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8017428:	2300      	movs	r3, #0
 801742a:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801742c:	2300      	movs	r3, #0
 801742e:	2200      	movs	r2, #0
 8017430:	2100      	movs	r1, #0
 8017432:	2000      	movs	r0, #0
 8017434:	f002 f9c8 	bl	80197c8 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 8017438:	f001 ff75 	bl	8019326 <SUBGRF_GetRandom>
 801743c:	6078      	str	r0, [r7, #4]

    return rnd;
 801743e:	687b      	ldr	r3, [r7, #4]
}
 8017440:	4618      	mov	r0, r3
 8017442:	3708      	adds	r7, #8
 8017444:	46bd      	mov	sp, r7
 8017446:	bd80      	pop	{r7, pc}

08017448 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8017448:	b580      	push	{r7, lr}
 801744a:	b08a      	sub	sp, #40	@ 0x28
 801744c:	af00      	add	r7, sp, #0
 801744e:	60b9      	str	r1, [r7, #8]
 8017450:	607a      	str	r2, [r7, #4]
 8017452:	461a      	mov	r2, r3
 8017454:	4603      	mov	r3, r0
 8017456:	73fb      	strb	r3, [r7, #15]
 8017458:	4613      	mov	r3, r2
 801745a:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 801745c:	4ab9      	ldr	r2, [pc, #740]	@ (8017744 <RadioSetRxConfig+0x2fc>)
 801745e:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8017462:	7053      	strb	r3, [r2, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8017464:	f003 f831 	bl	801a4ca <RFW_DeInit>
    if( rxContinuous == true )
 8017468:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 801746c:	2b00      	cmp	r3, #0
 801746e:	d001      	beq.n	8017474 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8017470:	2300      	movs	r3, #0
 8017472:	873b      	strh	r3, [r7, #56]	@ 0x38
    }
    if( fixLen == true )
 8017474:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8017478:	2b00      	cmp	r3, #0
 801747a:	d004      	beq.n	8017486 <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 801747c:	4ab2      	ldr	r2, [pc, #712]	@ (8017748 <RadioSetRxConfig+0x300>)
 801747e:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8017482:	7013      	strb	r3, [r2, #0]
 8017484:	e002      	b.n	801748c <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 8017486:	4bb0      	ldr	r3, [pc, #704]	@ (8017748 <RadioSetRxConfig+0x300>)
 8017488:	22ff      	movs	r2, #255	@ 0xff
 801748a:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 801748c:	7bfb      	ldrb	r3, [r7, #15]
 801748e:	2b05      	cmp	r3, #5
 8017490:	d009      	beq.n	80174a6 <RadioSetRxConfig+0x5e>
 8017492:	2b05      	cmp	r3, #5
 8017494:	f300 81ca 	bgt.w	801782c <RadioSetRxConfig+0x3e4>
 8017498:	2b00      	cmp	r3, #0
 801749a:	f000 80bf 	beq.w	801761c <RadioSetRxConfig+0x1d4>
 801749e:	2b01      	cmp	r3, #1
 80174a0:	f000 8124 	beq.w	80176ec <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 80174a4:	e1c2      	b.n	801782c <RadioSetRxConfig+0x3e4>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 80174a6:	2001      	movs	r0, #1
 80174a8:	f002 f884 	bl	80195b4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80174ac:	4ba5      	ldr	r3, [pc, #660]	@ (8017744 <RadioSetRxConfig+0x2fc>)
 80174ae:	2200      	movs	r2, #0
 80174b0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80174b4:	4aa3      	ldr	r2, [pc, #652]	@ (8017744 <RadioSetRxConfig+0x2fc>)
 80174b6:	687b      	ldr	r3, [r7, #4]
 80174b8:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 80174ba:	4ba2      	ldr	r3, [pc, #648]	@ (8017744 <RadioSetRxConfig+0x2fc>)
 80174bc:	2209      	movs	r2, #9
 80174be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 80174c2:	4ba0      	ldr	r3, [pc, #640]	@ (8017744 <RadioSetRxConfig+0x2fc>)
 80174c4:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80174c8:	641a      	str	r2, [r3, #64]	@ 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80174ca:	68b8      	ldr	r0, [r7, #8]
 80174cc:	f002 ff30 	bl	801a330 <SUBGRF_GetFskBandwidthRegValue>
 80174d0:	4603      	mov	r3, r0
 80174d2:	461a      	mov	r2, r3
 80174d4:	4b9b      	ldr	r3, [pc, #620]	@ (8017744 <RadioSetRxConfig+0x2fc>)
 80174d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80174da:	4b9a      	ldr	r3, [pc, #616]	@ (8017744 <RadioSetRxConfig+0x2fc>)
 80174dc:	2200      	movs	r2, #0
 80174de:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80174e0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80174e2:	00db      	lsls	r3, r3, #3
 80174e4:	b29a      	uxth	r2, r3
 80174e6:	4b97      	ldr	r3, [pc, #604]	@ (8017744 <RadioSetRxConfig+0x2fc>)
 80174e8:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 80174ea:	4b96      	ldr	r3, [pc, #600]	@ (8017744 <RadioSetRxConfig+0x2fc>)
 80174ec:	2200      	movs	r2, #0
 80174ee:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 80174f0:	4b94      	ldr	r3, [pc, #592]	@ (8017744 <RadioSetRxConfig+0x2fc>)
 80174f2:	2210      	movs	r2, #16
 80174f4:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80174f6:	4b93      	ldr	r3, [pc, #588]	@ (8017744 <RadioSetRxConfig+0x2fc>)
 80174f8:	2200      	movs	r2, #0
 80174fa:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 80174fc:	4b91      	ldr	r3, [pc, #580]	@ (8017744 <RadioSetRxConfig+0x2fc>)
 80174fe:	2200      	movs	r2, #0
 8017500:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8017502:	4b91      	ldr	r3, [pc, #580]	@ (8017748 <RadioSetRxConfig+0x300>)
 8017504:	781a      	ldrb	r2, [r3, #0]
 8017506:	4b8f      	ldr	r3, [pc, #572]	@ (8017744 <RadioSetRxConfig+0x2fc>)
 8017508:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801750a:	4b8e      	ldr	r3, [pc, #568]	@ (8017744 <RadioSetRxConfig+0x2fc>)
 801750c:	2201      	movs	r2, #1
 801750e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8017510:	4b8c      	ldr	r3, [pc, #560]	@ (8017744 <RadioSetRxConfig+0x2fc>)
 8017512:	2200      	movs	r2, #0
 8017514:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 8017516:	2005      	movs	r0, #5
 8017518:	f7ff fec2 	bl	80172a0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801751c:	488b      	ldr	r0, [pc, #556]	@ (801774c <RadioSetRxConfig+0x304>)
 801751e:	f002 fae9 	bl	8019af4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017522:	488b      	ldr	r0, [pc, #556]	@ (8017750 <RadioSetRxConfig+0x308>)
 8017524:	f002 fbb4 	bl	8019c90 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8017528:	4a8a      	ldr	r2, [pc, #552]	@ (8017754 <RadioSetRxConfig+0x30c>)
 801752a:	f107 031c 	add.w	r3, r7, #28
 801752e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017532:	e883 0003 	stmia.w	r3, {r0, r1}
 8017536:	f107 031c 	add.w	r3, r7, #28
 801753a:	4618      	mov	r0, r3
 801753c:	f001 fe71 	bl	8019222 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8017540:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8017544:	f001 febc 	bl	80192c0 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 8017548:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 801754c:	f000 fe08 	bl	8018160 <RadioRead>
 8017550:	4603      	mov	r3, r0
 8017552:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=RADIO_BIT_MASK(4);
 8017556:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801755a:	f023 0310 	bic.w	r3, r3, #16
 801755e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 8017562:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017566:	4619      	mov	r1, r3
 8017568:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 801756c:	f000 fde6 	bl	801813c <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 8017570:	2104      	movs	r1, #4
 8017572:	f640 00b9 	movw	r0, #2233	@ 0x8b9
 8017576:	f000 fde1 	bl	801813c <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 801757a:	f640 009b 	movw	r0, #2203	@ 0x89b
 801757e:	f000 fdef 	bl	8018160 <RadioRead>
 8017582:	4603      	mov	r3, r0
 8017584:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8017588:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801758c:	f023 031c 	bic.w	r3, r3, #28
 8017590:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 8017594:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017598:	f043 0308 	orr.w	r3, r3, #8
 801759c:	b2db      	uxtb	r3, r3
 801759e:	4619      	mov	r1, r3
 80175a0:	f640 009b 	movw	r0, #2203	@ 0x89b
 80175a4:	f000 fdca 	bl	801813c <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 80175a8:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 80175ac:	f000 fdd8 	bl	8018160 <RadioRead>
 80175b0:	4603      	mov	r3, r0
 80175b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 80175b6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80175ba:	f023 0318 	bic.w	r3, r3, #24
 80175be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 80175c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80175c6:	f043 0318 	orr.w	r3, r3, #24
 80175ca:	b2db      	uxtb	r3, r3
 80175cc:	4619      	mov	r1, r3
 80175ce:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 80175d2:	f000 fdb3 	bl	801813c <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 80175d6:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 80175da:	f000 fdc1 	bl	8018160 <RadioRead>
 80175de:	4603      	mov	r3, r0
 80175e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 80175e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80175e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80175ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 80175f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80175f4:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 80175f8:	b2db      	uxtb	r3, r3
 80175fa:	4619      	mov	r1, r3
 80175fc:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8017600:	f000 fd9c 	bl	801813c <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8017604:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8017606:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 801760a:	fb02 f303 	mul.w	r3, r2, r3
 801760e:	461a      	mov	r2, r3
 8017610:	687b      	ldr	r3, [r7, #4]
 8017612:	fbb2 f3f3 	udiv	r3, r2, r3
 8017616:	4a4b      	ldr	r2, [pc, #300]	@ (8017744 <RadioSetRxConfig+0x2fc>)
 8017618:	6093      	str	r3, [r2, #8]
            break;
 801761a:	e108      	b.n	801782e <RadioSetRxConfig+0x3e6>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 801761c:	2000      	movs	r0, #0
 801761e:	f001 ffc9 	bl	80195b4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8017622:	4b48      	ldr	r3, [pc, #288]	@ (8017744 <RadioSetRxConfig+0x2fc>)
 8017624:	2200      	movs	r2, #0
 8017626:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801762a:	4a46      	ldr	r2, [pc, #280]	@ (8017744 <RadioSetRxConfig+0x2fc>)
 801762c:	687b      	ldr	r3, [r7, #4]
 801762e:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8017630:	4b44      	ldr	r3, [pc, #272]	@ (8017744 <RadioSetRxConfig+0x2fc>)
 8017632:	220b      	movs	r2, #11
 8017634:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8017638:	68b8      	ldr	r0, [r7, #8]
 801763a:	f002 fe79 	bl	801a330 <SUBGRF_GetFskBandwidthRegValue>
 801763e:	4603      	mov	r3, r0
 8017640:	461a      	mov	r2, r3
 8017642:	4b40      	ldr	r3, [pc, #256]	@ (8017744 <RadioSetRxConfig+0x2fc>)
 8017644:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8017648:	4b3e      	ldr	r3, [pc, #248]	@ (8017744 <RadioSetRxConfig+0x2fc>)
 801764a:	2200      	movs	r2, #0
 801764c:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801764e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8017650:	00db      	lsls	r3, r3, #3
 8017652:	b29a      	uxth	r2, r3
 8017654:	4b3b      	ldr	r3, [pc, #236]	@ (8017744 <RadioSetRxConfig+0x2fc>)
 8017656:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8017658:	4b3a      	ldr	r3, [pc, #232]	@ (8017744 <RadioSetRxConfig+0x2fc>)
 801765a:	2204      	movs	r2, #4
 801765c:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 801765e:	4b39      	ldr	r3, [pc, #228]	@ (8017744 <RadioSetRxConfig+0x2fc>)
 8017660:	2218      	movs	r2, #24
 8017662:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8017664:	4b37      	ldr	r3, [pc, #220]	@ (8017744 <RadioSetRxConfig+0x2fc>)
 8017666:	2200      	movs	r2, #0
 8017668:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 801766a:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 801766e:	f083 0301 	eor.w	r3, r3, #1
 8017672:	b2db      	uxtb	r3, r3
 8017674:	461a      	mov	r2, r3
 8017676:	4b33      	ldr	r3, [pc, #204]	@ (8017744 <RadioSetRxConfig+0x2fc>)
 8017678:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 801767a:	4b33      	ldr	r3, [pc, #204]	@ (8017748 <RadioSetRxConfig+0x300>)
 801767c:	781a      	ldrb	r2, [r3, #0]
 801767e:	4b31      	ldr	r3, [pc, #196]	@ (8017744 <RadioSetRxConfig+0x2fc>)
 8017680:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 8017682:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8017686:	2b00      	cmp	r3, #0
 8017688:	d003      	beq.n	8017692 <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 801768a:	4b2e      	ldr	r3, [pc, #184]	@ (8017744 <RadioSetRxConfig+0x2fc>)
 801768c:	22f2      	movs	r2, #242	@ 0xf2
 801768e:	75da      	strb	r2, [r3, #23]
 8017690:	e002      	b.n	8017698 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8017692:	4b2c      	ldr	r3, [pc, #176]	@ (8017744 <RadioSetRxConfig+0x2fc>)
 8017694:	2201      	movs	r2, #1
 8017696:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8017698:	4b2a      	ldr	r3, [pc, #168]	@ (8017744 <RadioSetRxConfig+0x2fc>)
 801769a:	2201      	movs	r2, #1
 801769c:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 801769e:	f000 fc52 	bl	8017f46 <RadioStandby>
            RadioSetModem( MODEM_FSK );
 80176a2:	2000      	movs	r0, #0
 80176a4:	f7ff fdfc 	bl	80172a0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80176a8:	4828      	ldr	r0, [pc, #160]	@ (801774c <RadioSetRxConfig+0x304>)
 80176aa:	f002 fa23 	bl	8019af4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80176ae:	4828      	ldr	r0, [pc, #160]	@ (8017750 <RadioSetRxConfig+0x308>)
 80176b0:	f002 faee 	bl	8019c90 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80176b4:	4a28      	ldr	r2, [pc, #160]	@ (8017758 <RadioSetRxConfig+0x310>)
 80176b6:	f107 0314 	add.w	r3, r7, #20
 80176ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80176be:	e883 0003 	stmia.w	r3, {r0, r1}
 80176c2:	f107 0314 	add.w	r3, r7, #20
 80176c6:	4618      	mov	r0, r3
 80176c8:	f001 fdab 	bl	8019222 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80176cc:	f240 10ff 	movw	r0, #511	@ 0x1ff
 80176d0:	f001 fdf6 	bl	80192c0 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 80176d4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80176d6:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80176da:	fb02 f303 	mul.w	r3, r2, r3
 80176de:	461a      	mov	r2, r3
 80176e0:	687b      	ldr	r3, [r7, #4]
 80176e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80176e6:	4a17      	ldr	r2, [pc, #92]	@ (8017744 <RadioSetRxConfig+0x2fc>)
 80176e8:	6093      	str	r3, [r2, #8]
            break;
 80176ea:	e0a0      	b.n	801782e <RadioSetRxConfig+0x3e6>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 80176ec:	2000      	movs	r0, #0
 80176ee:	f001 ff61 	bl	80195b4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80176f2:	4b14      	ldr	r3, [pc, #80]	@ (8017744 <RadioSetRxConfig+0x2fc>)
 80176f4:	2201      	movs	r2, #1
 80176f6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 80176fa:	687b      	ldr	r3, [r7, #4]
 80176fc:	b2da      	uxtb	r2, r3
 80176fe:	4b11      	ldr	r3, [pc, #68]	@ (8017744 <RadioSetRxConfig+0x2fc>)
 8017700:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8017704:	4a15      	ldr	r2, [pc, #84]	@ (801775c <RadioSetRxConfig+0x314>)
 8017706:	68bb      	ldr	r3, [r7, #8]
 8017708:	4413      	add	r3, r2
 801770a:	781a      	ldrb	r2, [r3, #0]
 801770c:	4b0d      	ldr	r3, [pc, #52]	@ (8017744 <RadioSetRxConfig+0x2fc>)
 801770e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8017712:	4a0c      	ldr	r2, [pc, #48]	@ (8017744 <RadioSetRxConfig+0x2fc>)
 8017714:	7bbb      	ldrb	r3, [r7, #14]
 8017716:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801771a:	68bb      	ldr	r3, [r7, #8]
 801771c:	2b00      	cmp	r3, #0
 801771e:	d105      	bne.n	801772c <RadioSetRxConfig+0x2e4>
 8017720:	687b      	ldr	r3, [r7, #4]
 8017722:	2b0b      	cmp	r3, #11
 8017724:	d008      	beq.n	8017738 <RadioSetRxConfig+0x2f0>
 8017726:	687b      	ldr	r3, [r7, #4]
 8017728:	2b0c      	cmp	r3, #12
 801772a:	d005      	beq.n	8017738 <RadioSetRxConfig+0x2f0>
 801772c:	68bb      	ldr	r3, [r7, #8]
 801772e:	2b01      	cmp	r3, #1
 8017730:	d116      	bne.n	8017760 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8017732:	687b      	ldr	r3, [r7, #4]
 8017734:	2b0c      	cmp	r3, #12
 8017736:	d113      	bne.n	8017760 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8017738:	4b02      	ldr	r3, [pc, #8]	@ (8017744 <RadioSetRxConfig+0x2fc>)
 801773a:	2201      	movs	r2, #1
 801773c:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8017740:	e012      	b.n	8017768 <RadioSetRxConfig+0x320>
 8017742:	bf00      	nop
 8017744:	20001cd8 	.word	0x20001cd8
 8017748:	2000012c 	.word	0x2000012c
 801774c:	20001d10 	.word	0x20001d10
 8017750:	20001ce6 	.word	0x20001ce6
 8017754:	0801efa8 	.word	0x0801efa8
 8017758:	0801efb0 	.word	0x0801efb0
 801775c:	0801f600 	.word	0x0801f600
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8017760:	4b35      	ldr	r3, [pc, #212]	@ (8017838 <RadioSetRxConfig+0x3f0>)
 8017762:	2200      	movs	r2, #0
 8017764:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8017768:	4b33      	ldr	r3, [pc, #204]	@ (8017838 <RadioSetRxConfig+0x3f0>)
 801776a:	2201      	movs	r2, #1
 801776c:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801776e:	4b32      	ldr	r3, [pc, #200]	@ (8017838 <RadioSetRxConfig+0x3f0>)
 8017770:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8017774:	2b05      	cmp	r3, #5
 8017776:	d004      	beq.n	8017782 <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8017778:	4b2f      	ldr	r3, [pc, #188]	@ (8017838 <RadioSetRxConfig+0x3f0>)
 801777a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801777e:	2b06      	cmp	r3, #6
 8017780:	d10a      	bne.n	8017798 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 8017782:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8017784:	2b0b      	cmp	r3, #11
 8017786:	d803      	bhi.n	8017790 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8017788:	4b2b      	ldr	r3, [pc, #172]	@ (8017838 <RadioSetRxConfig+0x3f0>)
 801778a:	220c      	movs	r2, #12
 801778c:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 801778e:	e006      	b.n	801779e <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8017790:	4a29      	ldr	r2, [pc, #164]	@ (8017838 <RadioSetRxConfig+0x3f0>)
 8017792:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8017794:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8017796:	e002      	b.n	801779e <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8017798:	4a27      	ldr	r2, [pc, #156]	@ (8017838 <RadioSetRxConfig+0x3f0>)
 801779a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801779c:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 801779e:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 80177a2:	4b25      	ldr	r3, [pc, #148]	@ (8017838 <RadioSetRxConfig+0x3f0>)
 80177a4:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80177a6:	4b25      	ldr	r3, [pc, #148]	@ (801783c <RadioSetRxConfig+0x3f4>)
 80177a8:	781a      	ldrb	r2, [r3, #0]
 80177aa:	4b23      	ldr	r3, [pc, #140]	@ (8017838 <RadioSetRxConfig+0x3f0>)
 80177ac:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80177ae:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 80177b2:	4b21      	ldr	r3, [pc, #132]	@ (8017838 <RadioSetRxConfig+0x3f0>)
 80177b4:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80177b8:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 80177bc:	4b1e      	ldr	r3, [pc, #120]	@ (8017838 <RadioSetRxConfig+0x3f0>)
 80177be:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 80177c2:	f000 fbc0 	bl	8017f46 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 80177c6:	2001      	movs	r0, #1
 80177c8:	f7ff fd6a 	bl	80172a0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80177cc:	481c      	ldr	r0, [pc, #112]	@ (8017840 <RadioSetRxConfig+0x3f8>)
 80177ce:	f002 f991 	bl	8019af4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80177d2:	481c      	ldr	r0, [pc, #112]	@ (8017844 <RadioSetRxConfig+0x3fc>)
 80177d4:	f002 fa5c 	bl	8019c90 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 80177d8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80177da:	b2db      	uxtb	r3, r3
 80177dc:	4618      	mov	r0, r3
 80177de:	f001 fef8 	bl	80195d2 <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 80177e2:	4b15      	ldr	r3, [pc, #84]	@ (8017838 <RadioSetRxConfig+0x3f0>)
 80177e4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80177e8:	2b01      	cmp	r3, #1
 80177ea:	d10d      	bne.n	8017808 <RadioSetRxConfig+0x3c0>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 80177ec:	f240 7036 	movw	r0, #1846	@ 0x736
 80177f0:	f002 fba8 	bl	8019f44 <SUBGRF_ReadRegister>
 80177f4:	4603      	mov	r3, r0
 80177f6:	f023 0304 	bic.w	r3, r3, #4
 80177fa:	b2db      	uxtb	r3, r3
 80177fc:	4619      	mov	r1, r3
 80177fe:	f240 7036 	movw	r0, #1846	@ 0x736
 8017802:	f002 fb8b 	bl	8019f1c <SUBGRF_WriteRegister>
 8017806:	e00c      	b.n	8017822 <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8017808:	f240 7036 	movw	r0, #1846	@ 0x736
 801780c:	f002 fb9a 	bl	8019f44 <SUBGRF_ReadRegister>
 8017810:	4603      	mov	r3, r0
 8017812:	f043 0304 	orr.w	r3, r3, #4
 8017816:	b2db      	uxtb	r3, r3
 8017818:	4619      	mov	r1, r3
 801781a:	f240 7036 	movw	r0, #1846	@ 0x736
 801781e:	f002 fb7d 	bl	8019f1c <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8017822:	4b05      	ldr	r3, [pc, #20]	@ (8017838 <RadioSetRxConfig+0x3f0>)
 8017824:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017828:	609a      	str	r2, [r3, #8]
            break;
 801782a:	e000      	b.n	801782e <RadioSetRxConfig+0x3e6>
            break;
 801782c:	bf00      	nop
    }
}
 801782e:	bf00      	nop
 8017830:	3728      	adds	r7, #40	@ 0x28
 8017832:	46bd      	mov	sp, r7
 8017834:	bd80      	pop	{r7, pc}
 8017836:	bf00      	nop
 8017838:	20001cd8 	.word	0x20001cd8
 801783c:	2000012c 	.word	0x2000012c
 8017840:	20001d10 	.word	0x20001d10
 8017844:	20001ce6 	.word	0x20001ce6

08017848 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8017848:	b580      	push	{r7, lr}
 801784a:	b086      	sub	sp, #24
 801784c:	af00      	add	r7, sp, #0
 801784e:	60ba      	str	r2, [r7, #8]
 8017850:	607b      	str	r3, [r7, #4]
 8017852:	4603      	mov	r3, r0
 8017854:	73fb      	strb	r3, [r7, #15]
 8017856:	460b      	mov	r3, r1
 8017858:	73bb      	strb	r3, [r7, #14]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 801785a:	f002 fe36 	bl	801a4ca <RFW_DeInit>
    switch( modem )
 801785e:	7bfb      	ldrb	r3, [r7, #15]
 8017860:	2b04      	cmp	r3, #4
 8017862:	f000 80c7 	beq.w	80179f4 <RadioSetTxConfig+0x1ac>
 8017866:	2b04      	cmp	r3, #4
 8017868:	f300 80d6 	bgt.w	8017a18 <RadioSetTxConfig+0x1d0>
 801786c:	2b00      	cmp	r3, #0
 801786e:	d002      	beq.n	8017876 <RadioSetTxConfig+0x2e>
 8017870:	2b01      	cmp	r3, #1
 8017872:	d059      	beq.n	8017928 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8017874:	e0d0      	b.n	8017a18 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8017876:	4b74      	ldr	r3, [pc, #464]	@ (8017a48 <RadioSetTxConfig+0x200>)
 8017878:	2200      	movs	r2, #0
 801787a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801787e:	4a72      	ldr	r2, [pc, #456]	@ (8017a48 <RadioSetTxConfig+0x200>)
 8017880:	6a3b      	ldr	r3, [r7, #32]
 8017882:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8017884:	4b70      	ldr	r3, [pc, #448]	@ (8017a48 <RadioSetTxConfig+0x200>)
 8017886:	220b      	movs	r2, #11
 8017888:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801788c:	6878      	ldr	r0, [r7, #4]
 801788e:	f002 fd4f 	bl	801a330 <SUBGRF_GetFskBandwidthRegValue>
 8017892:	4603      	mov	r3, r0
 8017894:	461a      	mov	r2, r3
 8017896:	4b6c      	ldr	r3, [pc, #432]	@ (8017a48 <RadioSetTxConfig+0x200>)
 8017898:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 801789c:	4a6a      	ldr	r2, [pc, #424]	@ (8017a48 <RadioSetTxConfig+0x200>)
 801789e:	68bb      	ldr	r3, [r7, #8]
 80178a0:	6413      	str	r3, [r2, #64]	@ 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80178a2:	4b69      	ldr	r3, [pc, #420]	@ (8017a48 <RadioSetTxConfig+0x200>)
 80178a4:	2200      	movs	r2, #0
 80178a6:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80178a8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80178aa:	00db      	lsls	r3, r3, #3
 80178ac:	b29a      	uxth	r2, r3
 80178ae:	4b66      	ldr	r3, [pc, #408]	@ (8017a48 <RadioSetTxConfig+0x200>)
 80178b0:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80178b2:	4b65      	ldr	r3, [pc, #404]	@ (8017a48 <RadioSetTxConfig+0x200>)
 80178b4:	2204      	movs	r2, #4
 80178b6:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 80178b8:	4b63      	ldr	r3, [pc, #396]	@ (8017a48 <RadioSetTxConfig+0x200>)
 80178ba:	2218      	movs	r2, #24
 80178bc:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80178be:	4b62      	ldr	r3, [pc, #392]	@ (8017a48 <RadioSetTxConfig+0x200>)
 80178c0:	2200      	movs	r2, #0
 80178c2:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80178c4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80178c8:	f083 0301 	eor.w	r3, r3, #1
 80178cc:	b2db      	uxtb	r3, r3
 80178ce:	461a      	mov	r2, r3
 80178d0:	4b5d      	ldr	r3, [pc, #372]	@ (8017a48 <RadioSetTxConfig+0x200>)
 80178d2:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 80178d4:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80178d8:	2b00      	cmp	r3, #0
 80178da:	d003      	beq.n	80178e4 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 80178dc:	4b5a      	ldr	r3, [pc, #360]	@ (8017a48 <RadioSetTxConfig+0x200>)
 80178de:	22f2      	movs	r2, #242	@ 0xf2
 80178e0:	75da      	strb	r2, [r3, #23]
 80178e2:	e002      	b.n	80178ea <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80178e4:	4b58      	ldr	r3, [pc, #352]	@ (8017a48 <RadioSetTxConfig+0x200>)
 80178e6:	2201      	movs	r2, #1
 80178e8:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80178ea:	4b57      	ldr	r3, [pc, #348]	@ (8017a48 <RadioSetTxConfig+0x200>)
 80178ec:	2201      	movs	r2, #1
 80178ee:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 80178f0:	f000 fb29 	bl	8017f46 <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 80178f4:	2000      	movs	r0, #0
 80178f6:	f7ff fcd3 	bl	80172a0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80178fa:	4854      	ldr	r0, [pc, #336]	@ (8017a4c <RadioSetTxConfig+0x204>)
 80178fc:	f002 f8fa 	bl	8019af4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017900:	4853      	ldr	r0, [pc, #332]	@ (8017a50 <RadioSetTxConfig+0x208>)
 8017902:	f002 f9c5 	bl	8019c90 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8017906:	4a53      	ldr	r2, [pc, #332]	@ (8017a54 <RadioSetTxConfig+0x20c>)
 8017908:	f107 0310 	add.w	r3, r7, #16
 801790c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017910:	e883 0003 	stmia.w	r3, {r0, r1}
 8017914:	f107 0310 	add.w	r3, r7, #16
 8017918:	4618      	mov	r0, r3
 801791a:	f001 fc82 	bl	8019222 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801791e:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8017922:	f001 fccd 	bl	80192c0 <SUBGRF_SetWhiteningSeed>
            break;
 8017926:	e078      	b.n	8017a1a <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8017928:	4b47      	ldr	r3, [pc, #284]	@ (8017a48 <RadioSetTxConfig+0x200>)
 801792a:	2201      	movs	r2, #1
 801792c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8017930:	6a3b      	ldr	r3, [r7, #32]
 8017932:	b2da      	uxtb	r2, r3
 8017934:	4b44      	ldr	r3, [pc, #272]	@ (8017a48 <RadioSetTxConfig+0x200>)
 8017936:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 801793a:	4a47      	ldr	r2, [pc, #284]	@ (8017a58 <RadioSetTxConfig+0x210>)
 801793c:	687b      	ldr	r3, [r7, #4]
 801793e:	4413      	add	r3, r2
 8017940:	781a      	ldrb	r2, [r3, #0]
 8017942:	4b41      	ldr	r3, [pc, #260]	@ (8017a48 <RadioSetTxConfig+0x200>)
 8017944:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8017948:	4a3f      	ldr	r2, [pc, #252]	@ (8017a48 <RadioSetTxConfig+0x200>)
 801794a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801794e:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8017952:	687b      	ldr	r3, [r7, #4]
 8017954:	2b00      	cmp	r3, #0
 8017956:	d105      	bne.n	8017964 <RadioSetTxConfig+0x11c>
 8017958:	6a3b      	ldr	r3, [r7, #32]
 801795a:	2b0b      	cmp	r3, #11
 801795c:	d008      	beq.n	8017970 <RadioSetTxConfig+0x128>
 801795e:	6a3b      	ldr	r3, [r7, #32]
 8017960:	2b0c      	cmp	r3, #12
 8017962:	d005      	beq.n	8017970 <RadioSetTxConfig+0x128>
 8017964:	687b      	ldr	r3, [r7, #4]
 8017966:	2b01      	cmp	r3, #1
 8017968:	d107      	bne.n	801797a <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801796a:	6a3b      	ldr	r3, [r7, #32]
 801796c:	2b0c      	cmp	r3, #12
 801796e:	d104      	bne.n	801797a <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8017970:	4b35      	ldr	r3, [pc, #212]	@ (8017a48 <RadioSetTxConfig+0x200>)
 8017972:	2201      	movs	r2, #1
 8017974:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8017978:	e003      	b.n	8017982 <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 801797a:	4b33      	ldr	r3, [pc, #204]	@ (8017a48 <RadioSetTxConfig+0x200>)
 801797c:	2200      	movs	r2, #0
 801797e:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8017982:	4b31      	ldr	r3, [pc, #196]	@ (8017a48 <RadioSetTxConfig+0x200>)
 8017984:	2201      	movs	r2, #1
 8017986:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8017988:	4b2f      	ldr	r3, [pc, #188]	@ (8017a48 <RadioSetTxConfig+0x200>)
 801798a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 801798e:	2b05      	cmp	r3, #5
 8017990:	d004      	beq.n	801799c <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8017992:	4b2d      	ldr	r3, [pc, #180]	@ (8017a48 <RadioSetTxConfig+0x200>)
 8017994:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8017998:	2b06      	cmp	r3, #6
 801799a:	d10a      	bne.n	80179b2 <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 801799c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801799e:	2b0b      	cmp	r3, #11
 80179a0:	d803      	bhi.n	80179aa <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 80179a2:	4b29      	ldr	r3, [pc, #164]	@ (8017a48 <RadioSetTxConfig+0x200>)
 80179a4:	220c      	movs	r2, #12
 80179a6:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 80179a8:	e006      	b.n	80179b8 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80179aa:	4a27      	ldr	r2, [pc, #156]	@ (8017a48 <RadioSetTxConfig+0x200>)
 80179ac:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80179ae:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 80179b0:	e002      	b.n	80179b8 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80179b2:	4a25      	ldr	r2, [pc, #148]	@ (8017a48 <RadioSetTxConfig+0x200>)
 80179b4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80179b6:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 80179b8:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80179bc:	4b22      	ldr	r3, [pc, #136]	@ (8017a48 <RadioSetTxConfig+0x200>)
 80179be:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80179c0:	4b26      	ldr	r3, [pc, #152]	@ (8017a5c <RadioSetTxConfig+0x214>)
 80179c2:	781a      	ldrb	r2, [r3, #0]
 80179c4:	4b20      	ldr	r3, [pc, #128]	@ (8017a48 <RadioSetTxConfig+0x200>)
 80179c6:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80179c8:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80179cc:	4b1e      	ldr	r3, [pc, #120]	@ (8017a48 <RadioSetTxConfig+0x200>)
 80179ce:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80179d2:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 80179d6:	4b1c      	ldr	r3, [pc, #112]	@ (8017a48 <RadioSetTxConfig+0x200>)
 80179d8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 80179dc:	f000 fab3 	bl	8017f46 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 80179e0:	2001      	movs	r0, #1
 80179e2:	f7ff fc5d 	bl	80172a0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80179e6:	4819      	ldr	r0, [pc, #100]	@ (8017a4c <RadioSetTxConfig+0x204>)
 80179e8:	f002 f884 	bl	8019af4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80179ec:	4818      	ldr	r0, [pc, #96]	@ (8017a50 <RadioSetTxConfig+0x208>)
 80179ee:	f002 f94f 	bl	8019c90 <SUBGRF_SetPacketParams>
            break;
 80179f2:	e012      	b.n	8017a1a <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 80179f4:	2004      	movs	r0, #4
 80179f6:	f7ff fc53 	bl	80172a0 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 80179fa:	4b13      	ldr	r3, [pc, #76]	@ (8017a48 <RadioSetTxConfig+0x200>)
 80179fc:	2202      	movs	r2, #2
 80179fe:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 8017a02:	4a11      	ldr	r2, [pc, #68]	@ (8017a48 <RadioSetTxConfig+0x200>)
 8017a04:	6a3b      	ldr	r3, [r7, #32]
 8017a06:	6493      	str	r3, [r2, #72]	@ 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8017a08:	4b0f      	ldr	r3, [pc, #60]	@ (8017a48 <RadioSetTxConfig+0x200>)
 8017a0a:	2216      	movs	r2, #22
 8017a0c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8017a10:	480e      	ldr	r0, [pc, #56]	@ (8017a4c <RadioSetTxConfig+0x204>)
 8017a12:	f002 f86f 	bl	8019af4 <SUBGRF_SetModulationParams>
            break;
 8017a16:	e000      	b.n	8017a1a <RadioSetTxConfig+0x1d2>
            break;
 8017a18:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8017a1a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017a1e:	4618      	mov	r0, r3
 8017a20:	f002 fb98 	bl	801a154 <SUBGRF_SetRfTxPower>
 8017a24:	4603      	mov	r3, r0
 8017a26:	461a      	mov	r2, r3
 8017a28:	4b07      	ldr	r3, [pc, #28]	@ (8017a48 <RadioSetTxConfig+0x200>)
 8017a2a:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 8017a2e:	4b06      	ldr	r3, [pc, #24]	@ (8017a48 <RadioSetTxConfig+0x200>)
 8017a30:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8017a34:	4618      	mov	r0, r3
 8017a36:	f002 fd5c 	bl	801a4f2 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8017a3a:	4a03      	ldr	r2, [pc, #12]	@ (8017a48 <RadioSetTxConfig+0x200>)
 8017a3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017a3e:	6053      	str	r3, [r2, #4]
}
 8017a40:	bf00      	nop
 8017a42:	3718      	adds	r7, #24
 8017a44:	46bd      	mov	sp, r7
 8017a46:	bd80      	pop	{r7, pc}
 8017a48:	20001cd8 	.word	0x20001cd8
 8017a4c:	20001d10 	.word	0x20001d10
 8017a50:	20001ce6 	.word	0x20001ce6
 8017a54:	0801efb0 	.word	0x0801efb0
 8017a58:	0801f600 	.word	0x0801f600
 8017a5c:	2000012c 	.word	0x2000012c

08017a60 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8017a60:	b480      	push	{r7}
 8017a62:	b083      	sub	sp, #12
 8017a64:	af00      	add	r7, sp, #0
 8017a66:	6078      	str	r0, [r7, #4]
    return true;
 8017a68:	2301      	movs	r3, #1
}
 8017a6a:	4618      	mov	r0, r3
 8017a6c:	370c      	adds	r7, #12
 8017a6e:	46bd      	mov	sp, r7
 8017a70:	bc80      	pop	{r7}
 8017a72:	4770      	bx	lr

08017a74 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8017a74:	b480      	push	{r7}
 8017a76:	b085      	sub	sp, #20
 8017a78:	af00      	add	r7, sp, #0
 8017a7a:	4603      	mov	r3, r0
 8017a7c:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 8017a7e:	2300      	movs	r3, #0
 8017a80:	60fb      	str	r3, [r7, #12]

    switch( bw )
 8017a82:	79fb      	ldrb	r3, [r7, #7]
 8017a84:	2b0a      	cmp	r3, #10
 8017a86:	d83e      	bhi.n	8017b06 <RadioGetLoRaBandwidthInHz+0x92>
 8017a88:	a201      	add	r2, pc, #4	@ (adr r2, 8017a90 <RadioGetLoRaBandwidthInHz+0x1c>)
 8017a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017a8e:	bf00      	nop
 8017a90:	08017abd 	.word	0x08017abd
 8017a94:	08017acd 	.word	0x08017acd
 8017a98:	08017add 	.word	0x08017add
 8017a9c:	08017aed 	.word	0x08017aed
 8017aa0:	08017af5 	.word	0x08017af5
 8017aa4:	08017afb 	.word	0x08017afb
 8017aa8:	08017b01 	.word	0x08017b01
 8017aac:	08017b07 	.word	0x08017b07
 8017ab0:	08017ac5 	.word	0x08017ac5
 8017ab4:	08017ad5 	.word	0x08017ad5
 8017ab8:	08017ae5 	.word	0x08017ae5
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8017abc:	f641 6384 	movw	r3, #7812	@ 0x1e84
 8017ac0:	60fb      	str	r3, [r7, #12]
        break;
 8017ac2:	e020      	b.n	8017b06 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8017ac4:	f642 03b1 	movw	r3, #10417	@ 0x28b1
 8017ac8:	60fb      	str	r3, [r7, #12]
        break;
 8017aca:	e01c      	b.n	8017b06 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8017acc:	f643 5309 	movw	r3, #15625	@ 0x3d09
 8017ad0:	60fb      	str	r3, [r7, #12]
        break;
 8017ad2:	e018      	b.n	8017b06 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8017ad4:	f245 1361 	movw	r3, #20833	@ 0x5161
 8017ad8:	60fb      	str	r3, [r7, #12]
        break;
 8017ada:	e014      	b.n	8017b06 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8017adc:	f647 2312 	movw	r3, #31250	@ 0x7a12
 8017ae0:	60fb      	str	r3, [r7, #12]
        break;
 8017ae2:	e010      	b.n	8017b06 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8017ae4:	f24a 23c3 	movw	r3, #41667	@ 0xa2c3
 8017ae8:	60fb      	str	r3, [r7, #12]
        break;
 8017aea:	e00c      	b.n	8017b06 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8017aec:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8017af0:	60fb      	str	r3, [r7, #12]
        break;
 8017af2:	e008      	b.n	8017b06 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8017af4:	4b07      	ldr	r3, [pc, #28]	@ (8017b14 <RadioGetLoRaBandwidthInHz+0xa0>)
 8017af6:	60fb      	str	r3, [r7, #12]
        break;
 8017af8:	e005      	b.n	8017b06 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8017afa:	4b07      	ldr	r3, [pc, #28]	@ (8017b18 <RadioGetLoRaBandwidthInHz+0xa4>)
 8017afc:	60fb      	str	r3, [r7, #12]
        break;
 8017afe:	e002      	b.n	8017b06 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8017b00:	4b06      	ldr	r3, [pc, #24]	@ (8017b1c <RadioGetLoRaBandwidthInHz+0xa8>)
 8017b02:	60fb      	str	r3, [r7, #12]
        break;
 8017b04:	bf00      	nop
    }

    return bandwidthInHz;
 8017b06:	68fb      	ldr	r3, [r7, #12]
}
 8017b08:	4618      	mov	r0, r3
 8017b0a:	3714      	adds	r7, #20
 8017b0c:	46bd      	mov	sp, r7
 8017b0e:	bc80      	pop	{r7}
 8017b10:	4770      	bx	lr
 8017b12:	bf00      	nop
 8017b14:	0001e848 	.word	0x0001e848
 8017b18:	0003d090 	.word	0x0003d090
 8017b1c:	0007a120 	.word	0x0007a120

08017b20 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8017b20:	b480      	push	{r7}
 8017b22:	b083      	sub	sp, #12
 8017b24:	af00      	add	r7, sp, #0
 8017b26:	6078      	str	r0, [r7, #4]
 8017b28:	4608      	mov	r0, r1
 8017b2a:	4611      	mov	r1, r2
 8017b2c:	461a      	mov	r2, r3
 8017b2e:	4603      	mov	r3, r0
 8017b30:	70fb      	strb	r3, [r7, #3]
 8017b32:	460b      	mov	r3, r1
 8017b34:	803b      	strh	r3, [r7, #0]
 8017b36:	4613      	mov	r3, r2
 8017b38:	70bb      	strb	r3, [r7, #2]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 8017b3a:	883b      	ldrh	r3, [r7, #0]
 8017b3c:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8017b3e:	78ba      	ldrb	r2, [r7, #2]
 8017b40:	f082 0201 	eor.w	r2, r2, #1
 8017b44:	b2d2      	uxtb	r2, r2
 8017b46:	2a00      	cmp	r2, #0
 8017b48:	d001      	beq.n	8017b4e <RadioGetGfskTimeOnAirNumerator+0x2e>
 8017b4a:	2208      	movs	r2, #8
 8017b4c:	e000      	b.n	8017b50 <RadioGetGfskTimeOnAirNumerator+0x30>
 8017b4e:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8017b50:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8017b52:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8017b56:	7c3b      	ldrb	r3, [r7, #16]
 8017b58:	7d39      	ldrb	r1, [r7, #20]
 8017b5a:	2900      	cmp	r1, #0
 8017b5c:	d001      	beq.n	8017b62 <RadioGetGfskTimeOnAirNumerator+0x42>
 8017b5e:	2102      	movs	r1, #2
 8017b60:	e000      	b.n	8017b64 <RadioGetGfskTimeOnAirNumerator+0x44>
 8017b62:	2100      	movs	r1, #0
 8017b64:	440b      	add	r3, r1
 8017b66:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8017b68:	4413      	add	r3, r2
    /* ST_WORKAROUND_END */
}
 8017b6a:	4618      	mov	r0, r3
 8017b6c:	370c      	adds	r7, #12
 8017b6e:	46bd      	mov	sp, r7
 8017b70:	bc80      	pop	{r7}
 8017b72:	4770      	bx	lr

08017b74 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8017b74:	b480      	push	{r7}
 8017b76:	b08b      	sub	sp, #44	@ 0x2c
 8017b78:	af00      	add	r7, sp, #0
 8017b7a:	60f8      	str	r0, [r7, #12]
 8017b7c:	60b9      	str	r1, [r7, #8]
 8017b7e:	4611      	mov	r1, r2
 8017b80:	461a      	mov	r2, r3
 8017b82:	460b      	mov	r3, r1
 8017b84:	71fb      	strb	r3, [r7, #7]
 8017b86:	4613      	mov	r3, r2
 8017b88:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8017b8a:	79fb      	ldrb	r3, [r7, #7]
 8017b8c:	3304      	adds	r3, #4
 8017b8e:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8017b90:	2300      	movs	r3, #0
 8017b92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8017b96:	68bb      	ldr	r3, [r7, #8]
 8017b98:	2b05      	cmp	r3, #5
 8017b9a:	d002      	beq.n	8017ba2 <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8017b9c:	68bb      	ldr	r3, [r7, #8]
 8017b9e:	2b06      	cmp	r3, #6
 8017ba0:	d104      	bne.n	8017bac <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 8017ba2:	88bb      	ldrh	r3, [r7, #4]
 8017ba4:	2b0b      	cmp	r3, #11
 8017ba6:	d801      	bhi.n	8017bac <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8017ba8:	230c      	movs	r3, #12
 8017baa:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8017bac:	68fb      	ldr	r3, [r7, #12]
 8017bae:	2b00      	cmp	r3, #0
 8017bb0:	d105      	bne.n	8017bbe <RadioGetLoRaTimeOnAirNumerator+0x4a>
 8017bb2:	68bb      	ldr	r3, [r7, #8]
 8017bb4:	2b0b      	cmp	r3, #11
 8017bb6:	d008      	beq.n	8017bca <RadioGetLoRaTimeOnAirNumerator+0x56>
 8017bb8:	68bb      	ldr	r3, [r7, #8]
 8017bba:	2b0c      	cmp	r3, #12
 8017bbc:	d005      	beq.n	8017bca <RadioGetLoRaTimeOnAirNumerator+0x56>
 8017bbe:	68fb      	ldr	r3, [r7, #12]
 8017bc0:	2b01      	cmp	r3, #1
 8017bc2:	d105      	bne.n	8017bd0 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8017bc4:	68bb      	ldr	r3, [r7, #8]
 8017bc6:	2b0c      	cmp	r3, #12
 8017bc8:	d102      	bne.n	8017bd0 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8017bca:	2301      	movs	r3, #1
 8017bcc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8017bd0:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8017bd4:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 8017bd6:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8017bda:	2a00      	cmp	r2, #0
 8017bdc:	d001      	beq.n	8017be2 <RadioGetLoRaTimeOnAirNumerator+0x6e>
 8017bde:	2210      	movs	r2, #16
 8017be0:	e000      	b.n	8017be4 <RadioGetLoRaTimeOnAirNumerator+0x70>
 8017be2:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8017be4:	4413      	add	r3, r2
 8017be6:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8017be8:	68bb      	ldr	r3, [r7, #8]
 8017bea:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8017bec:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 8017bee:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8017bf2:	2a00      	cmp	r2, #0
 8017bf4:	d001      	beq.n	8017bfa <RadioGetLoRaTimeOnAirNumerator+0x86>
 8017bf6:	2200      	movs	r2, #0
 8017bf8:	e000      	b.n	8017bfc <RadioGetLoRaTimeOnAirNumerator+0x88>
 8017bfa:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8017bfc:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8017bfe:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8017c00:	68bb      	ldr	r3, [r7, #8]
 8017c02:	2b06      	cmp	r3, #6
 8017c04:	d803      	bhi.n	8017c0e <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 8017c06:	68bb      	ldr	r3, [r7, #8]
 8017c08:	009b      	lsls	r3, r3, #2
 8017c0a:	623b      	str	r3, [r7, #32]
 8017c0c:	e00e      	b.n	8017c2c <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 8017c0e:	69fb      	ldr	r3, [r7, #28]
 8017c10:	3308      	adds	r3, #8
 8017c12:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8017c14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017c18:	2b00      	cmp	r3, #0
 8017c1a:	d004      	beq.n	8017c26 <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8017c1c:	68bb      	ldr	r3, [r7, #8]
 8017c1e:	3b02      	subs	r3, #2
 8017c20:	009b      	lsls	r3, r3, #2
 8017c22:	623b      	str	r3, [r7, #32]
 8017c24:	e002      	b.n	8017c2c <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 8017c26:	68bb      	ldr	r3, [r7, #8]
 8017c28:	009b      	lsls	r3, r3, #2
 8017c2a:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8017c2c:	69fb      	ldr	r3, [r7, #28]
 8017c2e:	2b00      	cmp	r3, #0
 8017c30:	da01      	bge.n	8017c36 <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 8017c32:	2300      	movs	r3, #0
 8017c34:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8017c36:	69fa      	ldr	r2, [r7, #28]
 8017c38:	6a3b      	ldr	r3, [r7, #32]
 8017c3a:	4413      	add	r3, r2
 8017c3c:	1e5a      	subs	r2, r3, #1
 8017c3e:	6a3b      	ldr	r3, [r7, #32]
 8017c40:	fb92 f3f3 	sdiv	r3, r2, r3
 8017c44:	697a      	ldr	r2, [r7, #20]
 8017c46:	fb03 f202 	mul.w	r2, r3, r2
 8017c4a:	88bb      	ldrh	r3, [r7, #4]
 8017c4c:	4413      	add	r3, r2
    int32_t intermediate =
 8017c4e:	330c      	adds	r3, #12
 8017c50:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 8017c52:	68bb      	ldr	r3, [r7, #8]
 8017c54:	2b06      	cmp	r3, #6
 8017c56:	d802      	bhi.n	8017c5e <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8017c58:	69bb      	ldr	r3, [r7, #24]
 8017c5a:	3302      	adds	r3, #2
 8017c5c:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8017c5e:	69bb      	ldr	r3, [r7, #24]
 8017c60:	009b      	lsls	r3, r3, #2
 8017c62:	1c5a      	adds	r2, r3, #1
 8017c64:	68bb      	ldr	r3, [r7, #8]
 8017c66:	3b02      	subs	r3, #2
 8017c68:	fa02 f303 	lsl.w	r3, r2, r3
}
 8017c6c:	4618      	mov	r0, r3
 8017c6e:	372c      	adds	r7, #44	@ 0x2c
 8017c70:	46bd      	mov	sp, r7
 8017c72:	bc80      	pop	{r7}
 8017c74:	4770      	bx	lr
	...

08017c78 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8017c78:	b580      	push	{r7, lr}
 8017c7a:	b08a      	sub	sp, #40	@ 0x28
 8017c7c:	af04      	add	r7, sp, #16
 8017c7e:	60b9      	str	r1, [r7, #8]
 8017c80:	607a      	str	r2, [r7, #4]
 8017c82:	461a      	mov	r2, r3
 8017c84:	4603      	mov	r3, r0
 8017c86:	73fb      	strb	r3, [r7, #15]
 8017c88:	4613      	mov	r3, r2
 8017c8a:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8017c8c:	2300      	movs	r3, #0
 8017c8e:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8017c90:	2301      	movs	r3, #1
 8017c92:	613b      	str	r3, [r7, #16]

    switch( modem )
 8017c94:	7bfb      	ldrb	r3, [r7, #15]
 8017c96:	2b00      	cmp	r3, #0
 8017c98:	d002      	beq.n	8017ca0 <RadioTimeOnAir+0x28>
 8017c9a:	2b01      	cmp	r3, #1
 8017c9c:	d017      	beq.n	8017cce <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 8017c9e:	e035      	b.n	8017d0c <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8017ca0:	f897 0024 	ldrb.w	r0, [r7, #36]	@ 0x24
 8017ca4:	8c3a      	ldrh	r2, [r7, #32]
 8017ca6:	7bb9      	ldrb	r1, [r7, #14]
 8017ca8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8017cac:	9301      	str	r3, [sp, #4]
 8017cae:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8017cb2:	9300      	str	r3, [sp, #0]
 8017cb4:	4603      	mov	r3, r0
 8017cb6:	6878      	ldr	r0, [r7, #4]
 8017cb8:	f7ff ff32 	bl	8017b20 <RadioGetGfskTimeOnAirNumerator>
 8017cbc:	4603      	mov	r3, r0
 8017cbe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8017cc2:	fb02 f303 	mul.w	r3, r2, r3
 8017cc6:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8017cc8:	687b      	ldr	r3, [r7, #4]
 8017cca:	613b      	str	r3, [r7, #16]
        break;
 8017ccc:	e01e      	b.n	8017d0c <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8017cce:	8c39      	ldrh	r1, [r7, #32]
 8017cd0:	7bba      	ldrb	r2, [r7, #14]
 8017cd2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8017cd6:	9302      	str	r3, [sp, #8]
 8017cd8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8017cdc:	9301      	str	r3, [sp, #4]
 8017cde:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8017ce2:	9300      	str	r3, [sp, #0]
 8017ce4:	460b      	mov	r3, r1
 8017ce6:	6879      	ldr	r1, [r7, #4]
 8017ce8:	68b8      	ldr	r0, [r7, #8]
 8017cea:	f7ff ff43 	bl	8017b74 <RadioGetLoRaTimeOnAirNumerator>
 8017cee:	4603      	mov	r3, r0
 8017cf0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8017cf4:	fb02 f303 	mul.w	r3, r2, r3
 8017cf8:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8017cfa:	4a0a      	ldr	r2, [pc, #40]	@ (8017d24 <RadioTimeOnAir+0xac>)
 8017cfc:	68bb      	ldr	r3, [r7, #8]
 8017cfe:	4413      	add	r3, r2
 8017d00:	781b      	ldrb	r3, [r3, #0]
 8017d02:	4618      	mov	r0, r3
 8017d04:	f7ff feb6 	bl	8017a74 <RadioGetLoRaBandwidthInHz>
 8017d08:	6138      	str	r0, [r7, #16]
        break;
 8017d0a:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator ); /* ST_WORKAROUND : simplified calculation with macro usage */
 8017d0c:	697a      	ldr	r2, [r7, #20]
 8017d0e:	693b      	ldr	r3, [r7, #16]
 8017d10:	4413      	add	r3, r2
 8017d12:	1e5a      	subs	r2, r3, #1
 8017d14:	693b      	ldr	r3, [r7, #16]
 8017d16:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8017d1a:	4618      	mov	r0, r3
 8017d1c:	3718      	adds	r7, #24
 8017d1e:	46bd      	mov	sp, r7
 8017d20:	bd80      	pop	{r7, pc}
 8017d22:	bf00      	nop
 8017d24:	0801f600 	.word	0x0801f600

08017d28 <RadioSend>:

static void RadioSend( uint8_t *buffer, uint8_t size )
{
 8017d28:	b580      	push	{r7, lr}
 8017d2a:	b084      	sub	sp, #16
 8017d2c:	af00      	add	r7, sp, #0
 8017d2e:	6078      	str	r0, [r7, #4]
 8017d30:	460b      	mov	r3, r1
 8017d32:	70fb      	strb	r3, [r7, #3]
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8017d34:	2300      	movs	r3, #0
 8017d36:	2200      	movs	r2, #0
 8017d38:	f240 2101 	movw	r1, #513	@ 0x201
 8017d3c:	f240 2001 	movw	r0, #513	@ 0x201
 8017d40:	f001 fd42 	bl	80197c8 <SUBGRF_SetDioIrqParams>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8017d44:	4b71      	ldr	r3, [pc, #452]	@ (8017f0c <RadioSend+0x1e4>)
 8017d46:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8017d4a:	2101      	movs	r1, #1
 8017d4c:	4618      	mov	r0, r3
 8017d4e:	f002 f9d9 	bl	801a104 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 8017d52:	4b6e      	ldr	r3, [pc, #440]	@ (8017f0c <RadioSend+0x1e4>)
 8017d54:	781b      	ldrb	r3, [r3, #0]
 8017d56:	2b01      	cmp	r3, #1
 8017d58:	d112      	bne.n	8017d80 <RadioSend+0x58>
 8017d5a:	4b6c      	ldr	r3, [pc, #432]	@ (8017f0c <RadioSend+0x1e4>)
 8017d5c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8017d60:	2b06      	cmp	r3, #6
 8017d62:	d10d      	bne.n	8017d80 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8017d64:	f640 0089 	movw	r0, #2185	@ 0x889
 8017d68:	f002 f8ec 	bl	8019f44 <SUBGRF_ReadRegister>
 8017d6c:	4603      	mov	r3, r0
 8017d6e:	f023 0304 	bic.w	r3, r3, #4
 8017d72:	b2db      	uxtb	r3, r3
 8017d74:	4619      	mov	r1, r3
 8017d76:	f640 0089 	movw	r0, #2185	@ 0x889
 8017d7a:	f002 f8cf 	bl	8019f1c <SUBGRF_WriteRegister>
 8017d7e:	e00c      	b.n	8017d9a <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8017d80:	f640 0089 	movw	r0, #2185	@ 0x889
 8017d84:	f002 f8de 	bl	8019f44 <SUBGRF_ReadRegister>
 8017d88:	4603      	mov	r3, r0
 8017d8a:	f043 0304 	orr.w	r3, r3, #4
 8017d8e:	b2db      	uxtb	r3, r3
 8017d90:	4619      	mov	r1, r3
 8017d92:	f640 0089 	movw	r0, #2185	@ 0x889
 8017d96:	f002 f8c1 	bl	8019f1c <SUBGRF_WriteRegister>
    }
    /* WORKAROUND END */
    switch( SubgRf.Modem )
 8017d9a:	4b5c      	ldr	r3, [pc, #368]	@ (8017f0c <RadioSend+0x1e4>)
 8017d9c:	781b      	ldrb	r3, [r3, #0]
 8017d9e:	2b04      	cmp	r3, #4
 8017da0:	f200 80a7 	bhi.w	8017ef2 <RadioSend+0x1ca>
 8017da4:	a201      	add	r2, pc, #4	@ (adr r2, 8017dac <RadioSend+0x84>)
 8017da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017daa:	bf00      	nop
 8017dac:	08017ddb 	.word	0x08017ddb
 8017db0:	08017dc1 	.word	0x08017dc1
 8017db4:	08017ddb 	.word	0x08017ddb
 8017db8:	08017e3b 	.word	0x08017e3b
 8017dbc:	08017e5b 	.word	0x08017e5b
    {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8017dc0:	4a52      	ldr	r2, [pc, #328]	@ (8017f0c <RadioSend+0x1e4>)
 8017dc2:	78fb      	ldrb	r3, [r7, #3]
 8017dc4:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017dc6:	4852      	ldr	r0, [pc, #328]	@ (8017f10 <RadioSend+0x1e8>)
 8017dc8:	f001 ff62 	bl	8019c90 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8017dcc:	78fb      	ldrb	r3, [r7, #3]
 8017dce:	2200      	movs	r2, #0
 8017dd0:	4619      	mov	r1, r3
 8017dd2:	6878      	ldr	r0, [r7, #4]
 8017dd4:	f001 fa12 	bl	80191fc <SUBGRF_SendPayload>
            break;
 8017dd8:	e08c      	b.n	8017ef4 <RadioSend+0x1cc>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 8017dda:	f002 fb7c 	bl	801a4d6 <RFW_Is_Init>
 8017dde:	4603      	mov	r3, r0
 8017de0:	2b01      	cmp	r3, #1
 8017de2:	d11d      	bne.n	8017e20 <RadioSend+0xf8>
            {
              uint8_t outsize;
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8017de4:	f107 020d 	add.w	r2, r7, #13
 8017de8:	78fb      	ldrb	r3, [r7, #3]
 8017dea:	4619      	mov	r1, r3
 8017dec:	6878      	ldr	r0, [r7, #4]
 8017dee:	f002 fb8a 	bl	801a506 <RFW_TransmitInit>
 8017df2:	4603      	mov	r3, r0
 8017df4:	2b00      	cmp	r3, #0
 8017df6:	d10c      	bne.n	8017e12 <RadioSend+0xea>
              {
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8017df8:	7b7a      	ldrb	r2, [r7, #13]
 8017dfa:	4b44      	ldr	r3, [pc, #272]	@ (8017f0c <RadioSend+0x1e4>)
 8017dfc:	759a      	strb	r2, [r3, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017dfe:	4844      	ldr	r0, [pc, #272]	@ (8017f10 <RadioSend+0x1e8>)
 8017e00:	f001 ff46 	bl	8019c90 <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 8017e04:	7b7b      	ldrb	r3, [r7, #13]
 8017e06:	2200      	movs	r2, #0
 8017e08:	4619      	mov	r1, r3
 8017e0a:	6878      	ldr	r0, [r7, #4]
 8017e0c:	f001 f9f6 	bl	80191fc <SUBGRF_SendPayload>
            {
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
              SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 8017e10:	e070      	b.n	8017ef4 <RadioSend+0x1cc>
                MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n");
 8017e12:	4b40      	ldr	r3, [pc, #256]	@ (8017f14 <RadioSend+0x1ec>)
 8017e14:	2201      	movs	r2, #1
 8017e16:	2100      	movs	r1, #0
 8017e18:	2002      	movs	r0, #2
 8017e1a:	f003 fc93 	bl	801b744 <UTIL_ADV_TRACE_COND_FSend>
 8017e1e:	e072      	b.n	8017f06 <RadioSend+0x1de>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8017e20:	4a3a      	ldr	r2, [pc, #232]	@ (8017f0c <RadioSend+0x1e4>)
 8017e22:	78fb      	ldrb	r3, [r7, #3]
 8017e24:	7593      	strb	r3, [r2, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017e26:	483a      	ldr	r0, [pc, #232]	@ (8017f10 <RadioSend+0x1e8>)
 8017e28:	f001 ff32 	bl	8019c90 <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 8017e2c:	78fb      	ldrb	r3, [r7, #3]
 8017e2e:	2200      	movs	r2, #0
 8017e30:	4619      	mov	r1, r3
 8017e32:	6878      	ldr	r0, [r7, #4]
 8017e34:	f001 f9e2 	bl	80191fc <SUBGRF_SendPayload>
            break;
 8017e38:	e05c      	b.n	8017ef4 <RadioSend+0x1cc>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8017e3a:	4b34      	ldr	r3, [pc, #208]	@ (8017f0c <RadioSend+0x1e4>)
 8017e3c:	2202      	movs	r2, #2
 8017e3e:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8017e40:	4a32      	ldr	r2, [pc, #200]	@ (8017f0c <RadioSend+0x1e4>)
 8017e42:	78fb      	ldrb	r3, [r7, #3]
 8017e44:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017e46:	4832      	ldr	r0, [pc, #200]	@ (8017f10 <RadioSend+0x1e8>)
 8017e48:	f001 ff22 	bl	8019c90 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8017e4c:	78fb      	ldrb	r3, [r7, #3]
 8017e4e:	2200      	movs	r2, #0
 8017e50:	4619      	mov	r1, r3
 8017e52:	6878      	ldr	r0, [r7, #4]
 8017e54:	f001 f9d2 	bl	80191fc <SUBGRF_SendPayload>
            break;
 8017e58:	e04c      	b.n	8017ef4 <RadioSend+0x1cc>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 8017e5a:	78fb      	ldrb	r3, [r7, #3]
 8017e5c:	461a      	mov	r2, r3
 8017e5e:	6879      	ldr	r1, [r7, #4]
 8017e60:	482d      	ldr	r0, [pc, #180]	@ (8017f18 <RadioSend+0x1f0>)
 8017e62:	f000 fcbc 	bl	80187de <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8017e66:	4b29      	ldr	r3, [pc, #164]	@ (8017f0c <RadioSend+0x1e4>)
 8017e68:	2202      	movs	r2, #2
 8017e6a:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8017e6c:	78fb      	ldrb	r3, [r7, #3]
 8017e6e:	3301      	adds	r3, #1
 8017e70:	b2da      	uxtb	r2, r3
 8017e72:	4b26      	ldr	r3, [pc, #152]	@ (8017f0c <RadioSend+0x1e4>)
 8017e74:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017e76:	4826      	ldr	r0, [pc, #152]	@ (8017f10 <RadioSend+0x1e8>)
 8017e78:	f001 ff0a 	bl	8019c90 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 8017e7c:	2100      	movs	r1, #0
 8017e7e:	20f1      	movs	r0, #241	@ 0xf1
 8017e80:	f000 f95c 	bl	801813c <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 8017e84:	2100      	movs	r1, #0
 8017e86:	20f0      	movs	r0, #240	@ 0xf0
 8017e88:	f000 f958 	bl	801813c <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8017e8c:	4b1f      	ldr	r3, [pc, #124]	@ (8017f0c <RadioSend+0x1e4>)
 8017e8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8017e90:	2b64      	cmp	r3, #100	@ 0x64
 8017e92:	d108      	bne.n	8017ea6 <RadioSend+0x17e>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 8017e94:	2170      	movs	r1, #112	@ 0x70
 8017e96:	20f3      	movs	r0, #243	@ 0xf3
 8017e98:	f000 f950 	bl	801813c <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 8017e9c:	211d      	movs	r1, #29
 8017e9e:	20f2      	movs	r0, #242	@ 0xf2
 8017ea0:	f000 f94c 	bl	801813c <RadioWrite>
 8017ea4:	e007      	b.n	8017eb6 <RadioSend+0x18e>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 8017ea6:	21e1      	movs	r1, #225	@ 0xe1
 8017ea8:	20f3      	movs	r0, #243	@ 0xf3
 8017eaa:	f000 f947 	bl	801813c <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 8017eae:	2104      	movs	r1, #4
 8017eb0:	20f2      	movs	r0, #242	@ 0xf2
 8017eb2:	f000 f943 	bl	801813c <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 8017eb6:	78fb      	ldrb	r3, [r7, #3]
 8017eb8:	b29b      	uxth	r3, r3
 8017eba:	00db      	lsls	r3, r3, #3
 8017ebc:	b29b      	uxth	r3, r3
 8017ebe:	3302      	adds	r3, #2
 8017ec0:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 8017ec2:	89fb      	ldrh	r3, [r7, #14]
 8017ec4:	0a1b      	lsrs	r3, r3, #8
 8017ec6:	b29b      	uxth	r3, r3
 8017ec8:	b2db      	uxtb	r3, r3
 8017eca:	4619      	mov	r1, r3
 8017ecc:	20f4      	movs	r0, #244	@ 0xf4
 8017ece:	f000 f935 	bl	801813c <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 8017ed2:	89fb      	ldrh	r3, [r7, #14]
 8017ed4:	b2db      	uxtb	r3, r3
 8017ed6:	4619      	mov	r1, r3
 8017ed8:	20f5      	movs	r0, #245	@ 0xf5
 8017eda:	f000 f92f 	bl	801813c <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size+1 , 0xFFFFFF );
 8017ede:	78fb      	ldrb	r3, [r7, #3]
 8017ee0:	3301      	adds	r3, #1
 8017ee2:	b2db      	uxtb	r3, r3
 8017ee4:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8017ee8:	4619      	mov	r1, r3
 8017eea:	480b      	ldr	r0, [pc, #44]	@ (8017f18 <RadioSend+0x1f0>)
 8017eec:	f001 f986 	bl	80191fc <SUBGRF_SendPayload>
            break;
 8017ef0:	e000      	b.n	8017ef4 <RadioSend+0x1cc>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8017ef2:	bf00      	nop
    }

    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8017ef4:	4b05      	ldr	r3, [pc, #20]	@ (8017f0c <RadioSend+0x1e4>)
 8017ef6:	685b      	ldr	r3, [r3, #4]
 8017ef8:	4619      	mov	r1, r3
 8017efa:	4808      	ldr	r0, [pc, #32]	@ (8017f1c <RadioSend+0x1f4>)
 8017efc:	f003 fa88 	bl	801b410 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8017f00:	4806      	ldr	r0, [pc, #24]	@ (8017f1c <RadioSend+0x1f4>)
 8017f02:	f003 f9a7 	bl	801b254 <UTIL_TIMER_Start>
}
 8017f06:	3710      	adds	r7, #16
 8017f08:	46bd      	mov	sp, r7
 8017f0a:	bd80      	pop	{r7, pc}
 8017f0c:	20001cd8 	.word	0x20001cd8
 8017f10:	20001ce6 	.word	0x20001ce6
 8017f14:	0801efb8 	.word	0x0801efb8
 8017f18:	20001bd4 	.word	0x20001bd4
 8017f1c:	20001d34 	.word	0x20001d34

08017f20 <RadioSleep>:

static void RadioSleep( void )
{
 8017f20:	b580      	push	{r7, lr}
 8017f22:	b082      	sub	sp, #8
 8017f24:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 8017f26:	2300      	movs	r3, #0
 8017f28:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 8017f2a:	793b      	ldrb	r3, [r7, #4]
 8017f2c:	f043 0304 	orr.w	r3, r3, #4
 8017f30:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 8017f32:	7938      	ldrb	r0, [r7, #4]
 8017f34:	f001 fa3e 	bl	80193b4 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 8017f38:	2002      	movs	r0, #2
 8017f3a:	f7ea f905 	bl	8002148 <HAL_Delay>
}
 8017f3e:	bf00      	nop
 8017f40:	3708      	adds	r7, #8
 8017f42:	46bd      	mov	sp, r7
 8017f44:	bd80      	pop	{r7, pc}

08017f46 <RadioStandby>:

static void RadioStandby( void )
{
 8017f46:	b580      	push	{r7, lr}
 8017f48:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 8017f4a:	2000      	movs	r0, #0
 8017f4c:	f001 fa66 	bl	801941c <SUBGRF_SetStandby>
}
 8017f50:	bf00      	nop
 8017f52:	bd80      	pop	{r7, pc}

08017f54 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 8017f54:	b580      	push	{r7, lr}
 8017f56:	b082      	sub	sp, #8
 8017f58:	af00      	add	r7, sp, #0
 8017f5a:	6078      	str	r0, [r7, #4]
    if( 1UL == RFW_Is_Init( ) )
 8017f5c:	f002 fabb 	bl	801a4d6 <RFW_Is_Init>
 8017f60:	4603      	mov	r3, r0
 8017f62:	2b01      	cmp	r3, #1
 8017f64:	d102      	bne.n	8017f6c <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 8017f66:	f002 fade 	bl	801a526 <RFW_ReceiveInit>
 8017f6a:	e007      	b.n	8017f7c <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8017f6c:	2300      	movs	r3, #0
 8017f6e:	2200      	movs	r2, #0
 8017f70:	f240 2162 	movw	r1, #610	@ 0x262
 8017f74:	f240 2062 	movw	r0, #610	@ 0x262
 8017f78:	f001 fc26 	bl	80197c8 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 8017f7c:	687b      	ldr	r3, [r7, #4]
 8017f7e:	2b00      	cmp	r3, #0
 8017f80:	d006      	beq.n	8017f90 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8017f82:	6879      	ldr	r1, [r7, #4]
 8017f84:	4811      	ldr	r0, [pc, #68]	@ (8017fcc <RadioRx+0x78>)
 8017f86:	f003 fa43 	bl	801b410 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8017f8a:	4810      	ldr	r0, [pc, #64]	@ (8017fcc <RadioRx+0x78>)
 8017f8c:	f003 f962 	bl	801b254 <UTIL_TIMER_Start>
    }
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8017f90:	4b0f      	ldr	r3, [pc, #60]	@ (8017fd0 <RadioRx+0x7c>)
 8017f92:	2200      	movs	r2, #0
 8017f94:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8017f96:	4b0e      	ldr	r3, [pc, #56]	@ (8017fd0 <RadioRx+0x7c>)
 8017f98:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8017f9c:	2100      	movs	r1, #0
 8017f9e:	4618      	mov	r0, r3
 8017fa0:	f002 f8b0 	bl	801a104 <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 8017fa4:	4b0a      	ldr	r3, [pc, #40]	@ (8017fd0 <RadioRx+0x7c>)
 8017fa6:	785b      	ldrb	r3, [r3, #1]
 8017fa8:	2b00      	cmp	r3, #0
 8017faa:	d004      	beq.n	8017fb6 <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8017fac:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8017fb0:	f001 fa70 	bl	8019494 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8017fb4:	e005      	b.n	8017fc2 <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8017fb6:	4b06      	ldr	r3, [pc, #24]	@ (8017fd0 <RadioRx+0x7c>)
 8017fb8:	689b      	ldr	r3, [r3, #8]
 8017fba:	019b      	lsls	r3, r3, #6
 8017fbc:	4618      	mov	r0, r3
 8017fbe:	f001 fa69 	bl	8019494 <SUBGRF_SetRx>
}
 8017fc2:	bf00      	nop
 8017fc4:	3708      	adds	r7, #8
 8017fc6:	46bd      	mov	sp, r7
 8017fc8:	bd80      	pop	{r7, pc}
 8017fca:	bf00      	nop
 8017fcc:	20001d4c 	.word	0x20001d4c
 8017fd0:	20001cd8 	.word	0x20001cd8

08017fd4 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 8017fd4:	b580      	push	{r7, lr}
 8017fd6:	b082      	sub	sp, #8
 8017fd8:	af00      	add	r7, sp, #0
 8017fda:	6078      	str	r0, [r7, #4]
    if( 1UL == RFW_Is_Init() )
 8017fdc:	f002 fa7b 	bl	801a4d6 <RFW_Is_Init>
 8017fe0:	4603      	mov	r3, r0
 8017fe2:	2b01      	cmp	r3, #1
 8017fe4:	d102      	bne.n	8017fec <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 8017fe6:	f002 fa9e 	bl	801a526 <RFW_ReceiveInit>
 8017fea:	e007      	b.n	8017ffc <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8017fec:	2300      	movs	r3, #0
 8017fee:	2200      	movs	r2, #0
 8017ff0:	f240 2162 	movw	r1, #610	@ 0x262
 8017ff4:	f240 2062 	movw	r0, #610	@ 0x262
 8017ff8:	f001 fbe6 	bl	80197c8 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 8017ffc:	687b      	ldr	r3, [r7, #4]
 8017ffe:	2b00      	cmp	r3, #0
 8018000:	d006      	beq.n	8018010 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8018002:	6879      	ldr	r1, [r7, #4]
 8018004:	4811      	ldr	r0, [pc, #68]	@ (801804c <RadioRxBoosted+0x78>)
 8018006:	f003 fa03 	bl	801b410 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801800a:	4810      	ldr	r0, [pc, #64]	@ (801804c <RadioRxBoosted+0x78>)
 801800c:	f003 f922 	bl	801b254 <UTIL_TIMER_Start>
    }
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8018010:	4b0f      	ldr	r3, [pc, #60]	@ (8018050 <RadioRxBoosted+0x7c>)
 8018012:	2200      	movs	r2, #0
 8018014:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8018016:	4b0e      	ldr	r3, [pc, #56]	@ (8018050 <RadioRxBoosted+0x7c>)
 8018018:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 801801c:	2100      	movs	r1, #0
 801801e:	4618      	mov	r0, r3
 8018020:	f002 f870 	bl	801a104 <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 8018024:	4b0a      	ldr	r3, [pc, #40]	@ (8018050 <RadioRxBoosted+0x7c>)
 8018026:	785b      	ldrb	r3, [r3, #1]
 8018028:	2b00      	cmp	r3, #0
 801802a:	d004      	beq.n	8018036 <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 801802c:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8018030:	f001 fa50 	bl	80194d4 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 8018034:	e005      	b.n	8018042 <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8018036:	4b06      	ldr	r3, [pc, #24]	@ (8018050 <RadioRxBoosted+0x7c>)
 8018038:	689b      	ldr	r3, [r3, #8]
 801803a:	019b      	lsls	r3, r3, #6
 801803c:	4618      	mov	r0, r3
 801803e:	f001 fa49 	bl	80194d4 <SUBGRF_SetRxBoosted>
}
 8018042:	bf00      	nop
 8018044:	3708      	adds	r7, #8
 8018046:	46bd      	mov	sp, r7
 8018048:	bd80      	pop	{r7, pc}
 801804a:	bf00      	nop
 801804c:	20001d4c 	.word	0x20001d4c
 8018050:	20001cd8 	.word	0x20001cd8

08018054 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8018054:	b580      	push	{r7, lr}
 8018056:	b082      	sub	sp, #8
 8018058:	af00      	add	r7, sp, #0
 801805a:	6078      	str	r0, [r7, #4]
 801805c:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 801805e:	687b      	ldr	r3, [r7, #4]
 8018060:	005a      	lsls	r2, r3, #1
 8018062:	683b      	ldr	r3, [r7, #0]
 8018064:	4413      	add	r3, r2
 8018066:	4a0c      	ldr	r2, [pc, #48]	@ (8018098 <RadioSetRxDutyCycle+0x44>)
 8018068:	6593      	str	r3, [r2, #88]	@ 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801806a:	2300      	movs	r3, #0
 801806c:	2200      	movs	r2, #0
 801806e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8018072:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8018076:	f001 fba7 	bl	80197c8 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801807a:	4b07      	ldr	r3, [pc, #28]	@ (8018098 <RadioSetRxDutyCycle+0x44>)
 801807c:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8018080:	2100      	movs	r1, #0
 8018082:	4618      	mov	r0, r3
 8018084:	f002 f83e 	bl	801a104 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8018088:	6839      	ldr	r1, [r7, #0]
 801808a:	6878      	ldr	r0, [r7, #4]
 801808c:	f001 fa46 	bl	801951c <SUBGRF_SetRxDutyCycle>
}
 8018090:	bf00      	nop
 8018092:	3708      	adds	r7, #8
 8018094:	46bd      	mov	sp, r7
 8018096:	bd80      	pop	{r7, pc}
 8018098:	20001cd8 	.word	0x20001cd8

0801809c <RadioStartCad>:

static void RadioStartCad( void )
{
 801809c:	b580      	push	{r7, lr}
 801809e:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80180a0:	4b09      	ldr	r3, [pc, #36]	@ (80180c8 <RadioStartCad+0x2c>)
 80180a2:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80180a6:	2100      	movs	r1, #0
 80180a8:	4618      	mov	r0, r3
 80180aa:	f002 f82b 	bl	801a104 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 80180ae:	2300      	movs	r3, #0
 80180b0:	2200      	movs	r2, #0
 80180b2:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 80180b6:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 80180ba:	f001 fb85 	bl	80197c8 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 80180be:	f001 fa59 	bl	8019574 <SUBGRF_SetCad>
}
 80180c2:	bf00      	nop
 80180c4:	bd80      	pop	{r7, pc}
 80180c6:	bf00      	nop
 80180c8:	20001cd8 	.word	0x20001cd8

080180cc <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 80180cc:	b580      	push	{r7, lr}
 80180ce:	b084      	sub	sp, #16
 80180d0:	af00      	add	r7, sp, #0
 80180d2:	6078      	str	r0, [r7, #4]
 80180d4:	460b      	mov	r3, r1
 80180d6:	70fb      	strb	r3, [r7, #3]
 80180d8:	4613      	mov	r3, r2
 80180da:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 80180dc:	883b      	ldrh	r3, [r7, #0]
 80180de:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80180e2:	fb02 f303 	mul.w	r3, r2, r3
 80180e6:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 80180e8:	6878      	ldr	r0, [r7, #4]
 80180ea:	f001 fbc9 	bl	8019880 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 80180ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80180f2:	4618      	mov	r0, r3
 80180f4:	f002 f82e 	bl	801a154 <SUBGRF_SetRfTxPower>
 80180f8:	4603      	mov	r3, r0
 80180fa:	72fb      	strb	r3, [r7, #11]

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 80180fc:	7afb      	ldrb	r3, [r7, #11]
 80180fe:	2101      	movs	r1, #1
 8018100:	4618      	mov	r0, r3
 8018102:	f001 ffff 	bl	801a104 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 8018106:	f001 fa43 	bl	8019590 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 801810a:	68f9      	ldr	r1, [r7, #12]
 801810c:	4804      	ldr	r0, [pc, #16]	@ (8018120 <RadioSetTxContinuousWave+0x54>)
 801810e:	f003 f97f 	bl	801b410 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8018112:	4803      	ldr	r0, [pc, #12]	@ (8018120 <RadioSetTxContinuousWave+0x54>)
 8018114:	f003 f89e 	bl	801b254 <UTIL_TIMER_Start>
}
 8018118:	bf00      	nop
 801811a:	3710      	adds	r7, #16
 801811c:	46bd      	mov	sp, r7
 801811e:	bd80      	pop	{r7, pc}
 8018120:	20001d34 	.word	0x20001d34

08018124 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 8018124:	b580      	push	{r7, lr}
 8018126:	b082      	sub	sp, #8
 8018128:	af00      	add	r7, sp, #0
 801812a:	4603      	mov	r3, r0
 801812c:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 801812e:	f001 fe62 	bl	8019df6 <SUBGRF_GetRssiInst>
 8018132:	4603      	mov	r3, r0
}
 8018134:	4618      	mov	r0, r3
 8018136:	3708      	adds	r7, #8
 8018138:	46bd      	mov	sp, r7
 801813a:	bd80      	pop	{r7, pc}

0801813c <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 801813c:	b580      	push	{r7, lr}
 801813e:	b082      	sub	sp, #8
 8018140:	af00      	add	r7, sp, #0
 8018142:	4603      	mov	r3, r0
 8018144:	460a      	mov	r2, r1
 8018146:	80fb      	strh	r3, [r7, #6]
 8018148:	4613      	mov	r3, r2
 801814a:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 801814c:	797a      	ldrb	r2, [r7, #5]
 801814e:	88fb      	ldrh	r3, [r7, #6]
 8018150:	4611      	mov	r1, r2
 8018152:	4618      	mov	r0, r3
 8018154:	f001 fee2 	bl	8019f1c <SUBGRF_WriteRegister>
}
 8018158:	bf00      	nop
 801815a:	3708      	adds	r7, #8
 801815c:	46bd      	mov	sp, r7
 801815e:	bd80      	pop	{r7, pc}

08018160 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 8018160:	b580      	push	{r7, lr}
 8018162:	b082      	sub	sp, #8
 8018164:	af00      	add	r7, sp, #0
 8018166:	4603      	mov	r3, r0
 8018168:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 801816a:	88fb      	ldrh	r3, [r7, #6]
 801816c:	4618      	mov	r0, r3
 801816e:	f001 fee9 	bl	8019f44 <SUBGRF_ReadRegister>
 8018172:	4603      	mov	r3, r0
}
 8018174:	4618      	mov	r0, r3
 8018176:	3708      	adds	r7, #8
 8018178:	46bd      	mov	sp, r7
 801817a:	bd80      	pop	{r7, pc}

0801817c <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 801817c:	b580      	push	{r7, lr}
 801817e:	b082      	sub	sp, #8
 8018180:	af00      	add	r7, sp, #0
 8018182:	4603      	mov	r3, r0
 8018184:	6039      	str	r1, [r7, #0]
 8018186:	80fb      	strh	r3, [r7, #6]
 8018188:	4613      	mov	r3, r2
 801818a:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 801818c:	797b      	ldrb	r3, [r7, #5]
 801818e:	b29a      	uxth	r2, r3
 8018190:	88fb      	ldrh	r3, [r7, #6]
 8018192:	6839      	ldr	r1, [r7, #0]
 8018194:	4618      	mov	r0, r3
 8018196:	f001 fee9 	bl	8019f6c <SUBGRF_WriteRegisters>
}
 801819a:	bf00      	nop
 801819c:	3708      	adds	r7, #8
 801819e:	46bd      	mov	sp, r7
 80181a0:	bd80      	pop	{r7, pc}

080181a2 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 80181a2:	b580      	push	{r7, lr}
 80181a4:	b082      	sub	sp, #8
 80181a6:	af00      	add	r7, sp, #0
 80181a8:	4603      	mov	r3, r0
 80181aa:	6039      	str	r1, [r7, #0]
 80181ac:	80fb      	strh	r3, [r7, #6]
 80181ae:	4613      	mov	r3, r2
 80181b0:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 80181b2:	797b      	ldrb	r3, [r7, #5]
 80181b4:	b29a      	uxth	r2, r3
 80181b6:	88fb      	ldrh	r3, [r7, #6]
 80181b8:	6839      	ldr	r1, [r7, #0]
 80181ba:	4618      	mov	r0, r3
 80181bc:	f001 fef8 	bl	8019fb0 <SUBGRF_ReadRegisters>
}
 80181c0:	bf00      	nop
 80181c2:	3708      	adds	r7, #8
 80181c4:	46bd      	mov	sp, r7
 80181c6:	bd80      	pop	{r7, pc}

080181c8 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 80181c8:	b580      	push	{r7, lr}
 80181ca:	b082      	sub	sp, #8
 80181cc:	af00      	add	r7, sp, #0
 80181ce:	4603      	mov	r3, r0
 80181d0:	460a      	mov	r2, r1
 80181d2:	71fb      	strb	r3, [r7, #7]
 80181d4:	4613      	mov	r3, r2
 80181d6:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 80181d8:	79fb      	ldrb	r3, [r7, #7]
 80181da:	2b01      	cmp	r3, #1
 80181dc:	d10a      	bne.n	80181f4 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 80181de:	4a0e      	ldr	r2, [pc, #56]	@ (8018218 <RadioSetMaxPayloadLength+0x50>)
 80181e0:	79bb      	ldrb	r3, [r7, #6]
 80181e2:	7013      	strb	r3, [r2, #0]
 80181e4:	4b0c      	ldr	r3, [pc, #48]	@ (8018218 <RadioSetMaxPayloadLength+0x50>)
 80181e6:	781a      	ldrb	r2, [r3, #0]
 80181e8:	4b0c      	ldr	r3, [pc, #48]	@ (801821c <RadioSetMaxPayloadLength+0x54>)
 80181ea:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80181ec:	480c      	ldr	r0, [pc, #48]	@ (8018220 <RadioSetMaxPayloadLength+0x58>)
 80181ee:	f001 fd4f 	bl	8019c90 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 80181f2:	e00d      	b.n	8018210 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 80181f4:	4b09      	ldr	r3, [pc, #36]	@ (801821c <RadioSetMaxPayloadLength+0x54>)
 80181f6:	7d5b      	ldrb	r3, [r3, #21]
 80181f8:	2b01      	cmp	r3, #1
 80181fa:	d109      	bne.n	8018210 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 80181fc:	4a06      	ldr	r2, [pc, #24]	@ (8018218 <RadioSetMaxPayloadLength+0x50>)
 80181fe:	79bb      	ldrb	r3, [r7, #6]
 8018200:	7013      	strb	r3, [r2, #0]
 8018202:	4b05      	ldr	r3, [pc, #20]	@ (8018218 <RadioSetMaxPayloadLength+0x50>)
 8018204:	781a      	ldrb	r2, [r3, #0]
 8018206:	4b05      	ldr	r3, [pc, #20]	@ (801821c <RadioSetMaxPayloadLength+0x54>)
 8018208:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801820a:	4805      	ldr	r0, [pc, #20]	@ (8018220 <RadioSetMaxPayloadLength+0x58>)
 801820c:	f001 fd40 	bl	8019c90 <SUBGRF_SetPacketParams>
}
 8018210:	bf00      	nop
 8018212:	3708      	adds	r7, #8
 8018214:	46bd      	mov	sp, r7
 8018216:	bd80      	pop	{r7, pc}
 8018218:	2000012c 	.word	0x2000012c
 801821c:	20001cd8 	.word	0x20001cd8
 8018220:	20001ce6 	.word	0x20001ce6

08018224 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 8018224:	b580      	push	{r7, lr}
 8018226:	b082      	sub	sp, #8
 8018228:	af00      	add	r7, sp, #0
 801822a:	4603      	mov	r3, r0
 801822c:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 801822e:	4a13      	ldr	r2, [pc, #76]	@ (801827c <RadioSetPublicNetwork+0x58>)
 8018230:	79fb      	ldrb	r3, [r7, #7]
 8018232:	7313      	strb	r3, [r2, #12]
 8018234:	4b11      	ldr	r3, [pc, #68]	@ (801827c <RadioSetPublicNetwork+0x58>)
 8018236:	7b1a      	ldrb	r2, [r3, #12]
 8018238:	4b10      	ldr	r3, [pc, #64]	@ (801827c <RadioSetPublicNetwork+0x58>)
 801823a:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 801823c:	2001      	movs	r0, #1
 801823e:	f7ff f82f 	bl	80172a0 <RadioSetModem>
    if( enable == true )
 8018242:	79fb      	ldrb	r3, [r7, #7]
 8018244:	2b00      	cmp	r3, #0
 8018246:	d00a      	beq.n	801825e <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8018248:	2134      	movs	r1, #52	@ 0x34
 801824a:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 801824e:	f001 fe65 	bl	8019f1c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8018252:	2144      	movs	r1, #68	@ 0x44
 8018254:	f240 7041 	movw	r0, #1857	@ 0x741
 8018258:	f001 fe60 	bl	8019f1c <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 801825c:	e009      	b.n	8018272 <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 801825e:	2114      	movs	r1, #20
 8018260:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 8018264:	f001 fe5a 	bl	8019f1c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8018268:	2124      	movs	r1, #36	@ 0x24
 801826a:	f240 7041 	movw	r0, #1857	@ 0x741
 801826e:	f001 fe55 	bl	8019f1c <SUBGRF_WriteRegister>
}
 8018272:	bf00      	nop
 8018274:	3708      	adds	r7, #8
 8018276:	46bd      	mov	sp, r7
 8018278:	bd80      	pop	{r7, pc}
 801827a:	bf00      	nop
 801827c:	20001cd8 	.word	0x20001cd8

08018280 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 8018280:	b580      	push	{r7, lr}
 8018282:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8018284:	f001 ff9a 	bl	801a1bc <SUBGRF_GetRadioWakeUpTime>
 8018288:	4603      	mov	r3, r0
 801828a:	3303      	adds	r3, #3
}
 801828c:	4618      	mov	r0, r3
 801828e:	bd80      	pop	{r7, pc}

08018290 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 8018290:	b580      	push	{r7, lr}
 8018292:	b082      	sub	sp, #8
 8018294:	af00      	add	r7, sp, #0
 8018296:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 8018298:	f000 f80e 	bl	80182b8 <RadioOnTxTimeoutProcess>
}
 801829c:	bf00      	nop
 801829e:	3708      	adds	r7, #8
 80182a0:	46bd      	mov	sp, r7
 80182a2:	bd80      	pop	{r7, pc}

080182a4 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 80182a4:	b580      	push	{r7, lr}
 80182a6:	b082      	sub	sp, #8
 80182a8:	af00      	add	r7, sp, #0
 80182aa:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 80182ac:	f000 f818 	bl	80182e0 <RadioOnRxTimeoutProcess>
}
 80182b0:	bf00      	nop
 80182b2:	3708      	adds	r7, #8
 80182b4:	46bd      	mov	sp, r7
 80182b6:	bd80      	pop	{r7, pc}

080182b8 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 80182b8:	b580      	push	{r7, lr}
 80182ba:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80182bc:	4b07      	ldr	r3, [pc, #28]	@ (80182dc <RadioOnTxTimeoutProcess+0x24>)
 80182be:	681b      	ldr	r3, [r3, #0]
 80182c0:	2b00      	cmp	r3, #0
 80182c2:	d008      	beq.n	80182d6 <RadioOnTxTimeoutProcess+0x1e>
 80182c4:	4b05      	ldr	r3, [pc, #20]	@ (80182dc <RadioOnTxTimeoutProcess+0x24>)
 80182c6:	681b      	ldr	r3, [r3, #0]
 80182c8:	685b      	ldr	r3, [r3, #4]
 80182ca:	2b00      	cmp	r3, #0
 80182cc:	d003      	beq.n	80182d6 <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 80182ce:	4b03      	ldr	r3, [pc, #12]	@ (80182dc <RadioOnTxTimeoutProcess+0x24>)
 80182d0:	681b      	ldr	r3, [r3, #0]
 80182d2:	685b      	ldr	r3, [r3, #4]
 80182d4:	4798      	blx	r3
    }
}
 80182d6:	bf00      	nop
 80182d8:	bd80      	pop	{r7, pc}
 80182da:	bf00      	nop
 80182dc:	20001cd4 	.word	0x20001cd4

080182e0 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 80182e0:	b580      	push	{r7, lr}
 80182e2:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80182e4:	4b07      	ldr	r3, [pc, #28]	@ (8018304 <RadioOnRxTimeoutProcess+0x24>)
 80182e6:	681b      	ldr	r3, [r3, #0]
 80182e8:	2b00      	cmp	r3, #0
 80182ea:	d008      	beq.n	80182fe <RadioOnRxTimeoutProcess+0x1e>
 80182ec:	4b05      	ldr	r3, [pc, #20]	@ (8018304 <RadioOnRxTimeoutProcess+0x24>)
 80182ee:	681b      	ldr	r3, [r3, #0]
 80182f0:	68db      	ldr	r3, [r3, #12]
 80182f2:	2b00      	cmp	r3, #0
 80182f4:	d003      	beq.n	80182fe <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 80182f6:	4b03      	ldr	r3, [pc, #12]	@ (8018304 <RadioOnRxTimeoutProcess+0x24>)
 80182f8:	681b      	ldr	r3, [r3, #0]
 80182fa:	68db      	ldr	r3, [r3, #12]
 80182fc:	4798      	blx	r3
    }
}
 80182fe:	bf00      	nop
 8018300:	bd80      	pop	{r7, pc}
 8018302:	bf00      	nop
 8018304:	20001cd4 	.word	0x20001cd4

08018308 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 8018308:	b580      	push	{r7, lr}
 801830a:	b082      	sub	sp, #8
 801830c:	af00      	add	r7, sp, #0
 801830e:	4603      	mov	r3, r0
 8018310:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 8018312:	4a05      	ldr	r2, [pc, #20]	@ (8018328 <RadioOnDioIrq+0x20>)
 8018314:	88fb      	ldrh	r3, [r7, #6]
 8018316:	f8a2 3054 	strh.w	r3, [r2, #84]	@ 0x54

    RADIO_IRQ_PROCESS();
 801831a:	f000 f807 	bl	801832c <RadioIrqProcess>
}
 801831e:	bf00      	nop
 8018320:	3708      	adds	r7, #8
 8018322:	46bd      	mov	sp, r7
 8018324:	bd80      	pop	{r7, pc}
 8018326:	bf00      	nop
 8018328:	20001cd8 	.word	0x20001cd8

0801832c <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 801832c:	b5b0      	push	{r4, r5, r7, lr}
 801832e:	b082      	sub	sp, #8
 8018330:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 8018332:	2300      	movs	r3, #0
 8018334:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 8018336:	2300      	movs	r3, #0
 8018338:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 801833a:	4ba8      	ldr	r3, [pc, #672]	@ (80185dc <RadioIrqProcess+0x2b0>)
 801833c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8018340:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018344:	f000 810d 	beq.w	8018562 <RadioIrqProcess+0x236>
 8018348:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801834c:	f300 81e8 	bgt.w	8018720 <RadioIrqProcess+0x3f4>
 8018350:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8018354:	f000 80f1 	beq.w	801853a <RadioIrqProcess+0x20e>
 8018358:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801835c:	f300 81e0 	bgt.w	8018720 <RadioIrqProcess+0x3f4>
 8018360:	2b80      	cmp	r3, #128	@ 0x80
 8018362:	f000 80d6 	beq.w	8018512 <RadioIrqProcess+0x1e6>
 8018366:	2b80      	cmp	r3, #128	@ 0x80
 8018368:	f300 81da 	bgt.w	8018720 <RadioIrqProcess+0x3f4>
 801836c:	2b20      	cmp	r3, #32
 801836e:	dc49      	bgt.n	8018404 <RadioIrqProcess+0xd8>
 8018370:	2b00      	cmp	r3, #0
 8018372:	f340 81d5 	ble.w	8018720 <RadioIrqProcess+0x3f4>
 8018376:	3b01      	subs	r3, #1
 8018378:	2b1f      	cmp	r3, #31
 801837a:	f200 81d1 	bhi.w	8018720 <RadioIrqProcess+0x3f4>
 801837e:	a201      	add	r2, pc, #4	@ (adr r2, 8018384 <RadioIrqProcess+0x58>)
 8018380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018384:	0801840d 	.word	0x0801840d
 8018388:	08018447 	.word	0x08018447
 801838c:	08018721 	.word	0x08018721
 8018390:	080185fd 	.word	0x080185fd
 8018394:	08018721 	.word	0x08018721
 8018398:	08018721 	.word	0x08018721
 801839c:	08018721 	.word	0x08018721
 80183a0:	08018679 	.word	0x08018679
 80183a4:	08018721 	.word	0x08018721
 80183a8:	08018721 	.word	0x08018721
 80183ac:	08018721 	.word	0x08018721
 80183b0:	08018721 	.word	0x08018721
 80183b4:	08018721 	.word	0x08018721
 80183b8:	08018721 	.word	0x08018721
 80183bc:	08018721 	.word	0x08018721
 80183c0:	08018695 	.word	0x08018695
 80183c4:	08018721 	.word	0x08018721
 80183c8:	08018721 	.word	0x08018721
 80183cc:	08018721 	.word	0x08018721
 80183d0:	08018721 	.word	0x08018721
 80183d4:	08018721 	.word	0x08018721
 80183d8:	08018721 	.word	0x08018721
 80183dc:	08018721 	.word	0x08018721
 80183e0:	08018721 	.word	0x08018721
 80183e4:	08018721 	.word	0x08018721
 80183e8:	08018721 	.word	0x08018721
 80183ec:	08018721 	.word	0x08018721
 80183f0:	08018721 	.word	0x08018721
 80183f4:	08018721 	.word	0x08018721
 80183f8:	08018721 	.word	0x08018721
 80183fc:	08018721 	.word	0x08018721
 8018400:	080186a3 	.word	0x080186a3
 8018404:	2b40      	cmp	r3, #64	@ 0x40
 8018406:	f000 816d 	beq.w	80186e4 <RadioIrqProcess+0x3b8>
        {
            RadioEvents->RxError( );
        }
        break;
    default:
        break;
 801840a:	e189      	b.n	8018720 <RadioIrqProcess+0x3f4>
        TimerStop( &TxTimeoutTimer );
 801840c:	4874      	ldr	r0, [pc, #464]	@ (80185e0 <RadioIrqProcess+0x2b4>)
 801840e:	f002 ff8f 	bl	801b330 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 8018412:	2000      	movs	r0, #0
 8018414:	f001 f802 	bl	801941c <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 8018418:	f002 f864 	bl	801a4e4 <RFW_Is_LongPacketModeEnabled>
 801841c:	4603      	mov	r3, r0
 801841e:	2b01      	cmp	r3, #1
 8018420:	d101      	bne.n	8018426 <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 8018422:	f002 f888 	bl	801a536 <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8018426:	4b6f      	ldr	r3, [pc, #444]	@ (80185e4 <RadioIrqProcess+0x2b8>)
 8018428:	681b      	ldr	r3, [r3, #0]
 801842a:	2b00      	cmp	r3, #0
 801842c:	f000 817a 	beq.w	8018724 <RadioIrqProcess+0x3f8>
 8018430:	4b6c      	ldr	r3, [pc, #432]	@ (80185e4 <RadioIrqProcess+0x2b8>)
 8018432:	681b      	ldr	r3, [r3, #0]
 8018434:	681b      	ldr	r3, [r3, #0]
 8018436:	2b00      	cmp	r3, #0
 8018438:	f000 8174 	beq.w	8018724 <RadioIrqProcess+0x3f8>
            RadioEvents->TxDone( );
 801843c:	4b69      	ldr	r3, [pc, #420]	@ (80185e4 <RadioIrqProcess+0x2b8>)
 801843e:	681b      	ldr	r3, [r3, #0]
 8018440:	681b      	ldr	r3, [r3, #0]
 8018442:	4798      	blx	r3
        break;
 8018444:	e16e      	b.n	8018724 <RadioIrqProcess+0x3f8>
        TimerStop( &RxTimeoutTimer );
 8018446:	4868      	ldr	r0, [pc, #416]	@ (80185e8 <RadioIrqProcess+0x2bc>)
 8018448:	f002 ff72 	bl	801b330 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801844c:	4b63      	ldr	r3, [pc, #396]	@ (80185dc <RadioIrqProcess+0x2b0>)
 801844e:	785b      	ldrb	r3, [r3, #1]
 8018450:	f083 0301 	eor.w	r3, r3, #1
 8018454:	b2db      	uxtb	r3, r3
 8018456:	2b00      	cmp	r3, #0
 8018458:	d014      	beq.n	8018484 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 801845a:	2000      	movs	r0, #0
 801845c:	f000 ffde 	bl	801941c <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 8018460:	2100      	movs	r1, #0
 8018462:	f640 1002 	movw	r0, #2306	@ 0x902
 8018466:	f001 fd59 	bl	8019f1c <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 801846a:	f640 1044 	movw	r0, #2372	@ 0x944
 801846e:	f001 fd69 	bl	8019f44 <SUBGRF_ReadRegister>
 8018472:	4603      	mov	r3, r0
 8018474:	f043 0302 	orr.w	r3, r3, #2
 8018478:	b2db      	uxtb	r3, r3
 801847a:	4619      	mov	r1, r3
 801847c:	f640 1044 	movw	r0, #2372	@ 0x944
 8018480:	f001 fd4c 	bl	8019f1c <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 8018484:	1dfb      	adds	r3, r7, #7
 8018486:	22ff      	movs	r2, #255	@ 0xff
 8018488:	4619      	mov	r1, r3
 801848a:	4858      	ldr	r0, [pc, #352]	@ (80185ec <RadioIrqProcess+0x2c0>)
 801848c:	f000 fe94 	bl	80191b8 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 8018490:	4857      	ldr	r0, [pc, #348]	@ (80185f0 <RadioIrqProcess+0x2c4>)
 8018492:	f001 fcf1 	bl	8019e78 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8018496:	4b53      	ldr	r3, [pc, #332]	@ (80185e4 <RadioIrqProcess+0x2b8>)
 8018498:	681b      	ldr	r3, [r3, #0]
 801849a:	2b00      	cmp	r3, #0
 801849c:	f000 8144 	beq.w	8018728 <RadioIrqProcess+0x3fc>
 80184a0:	4b50      	ldr	r3, [pc, #320]	@ (80185e4 <RadioIrqProcess+0x2b8>)
 80184a2:	681b      	ldr	r3, [r3, #0]
 80184a4:	689b      	ldr	r3, [r3, #8]
 80184a6:	2b00      	cmp	r3, #0
 80184a8:	f000 813e 	beq.w	8018728 <RadioIrqProcess+0x3fc>
            switch( SubgRf.PacketStatus.packetType )
 80184ac:	4b4b      	ldr	r3, [pc, #300]	@ (80185dc <RadioIrqProcess+0x2b0>)
 80184ae:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80184b2:	2b01      	cmp	r3, #1
 80184b4:	d10e      	bne.n	80184d4 <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 80184b6:	4b4b      	ldr	r3, [pc, #300]	@ (80185e4 <RadioIrqProcess+0x2b8>)
 80184b8:	681b      	ldr	r3, [r3, #0]
 80184ba:	689c      	ldr	r4, [r3, #8]
 80184bc:	79fb      	ldrb	r3, [r7, #7]
 80184be:	4619      	mov	r1, r3
 80184c0:	4b46      	ldr	r3, [pc, #280]	@ (80185dc <RadioIrqProcess+0x2b0>)
 80184c2:	f993 3030 	ldrsb.w	r3, [r3, #48]	@ 0x30
 80184c6:	461a      	mov	r2, r3
 80184c8:	4b44      	ldr	r3, [pc, #272]	@ (80185dc <RadioIrqProcess+0x2b0>)
 80184ca:	f993 3031 	ldrsb.w	r3, [r3, #49]	@ 0x31
 80184ce:	4847      	ldr	r0, [pc, #284]	@ (80185ec <RadioIrqProcess+0x2c0>)
 80184d0:	47a0      	blx	r4
                break;
 80184d2:	e01d      	b.n	8018510 <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 80184d4:	4b41      	ldr	r3, [pc, #260]	@ (80185dc <RadioIrqProcess+0x2b0>)
 80184d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80184d8:	463a      	mov	r2, r7
 80184da:	4611      	mov	r1, r2
 80184dc:	4618      	mov	r0, r3
 80184de:	f001 ff4f 	bl	801a380 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 80184e2:	4b40      	ldr	r3, [pc, #256]	@ (80185e4 <RadioIrqProcess+0x2b8>)
 80184e4:	681b      	ldr	r3, [r3, #0]
 80184e6:	689c      	ldr	r4, [r3, #8]
 80184e8:	79fb      	ldrb	r3, [r7, #7]
 80184ea:	4619      	mov	r1, r3
 80184ec:	4b3b      	ldr	r3, [pc, #236]	@ (80185dc <RadioIrqProcess+0x2b0>)
 80184ee:	f993 3029 	ldrsb.w	r3, [r3, #41]	@ 0x29
 80184f2:	4618      	mov	r0, r3
 80184f4:	683b      	ldr	r3, [r7, #0]
 80184f6:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80184fa:	4a3e      	ldr	r2, [pc, #248]	@ (80185f4 <RadioIrqProcess+0x2c8>)
 80184fc:	fb82 5203 	smull	r5, r2, r2, r3
 8018500:	1192      	asrs	r2, r2, #6
 8018502:	17db      	asrs	r3, r3, #31
 8018504:	1ad3      	subs	r3, r2, r3
 8018506:	b25b      	sxtb	r3, r3
 8018508:	4602      	mov	r2, r0
 801850a:	4838      	ldr	r0, [pc, #224]	@ (80185ec <RadioIrqProcess+0x2c0>)
 801850c:	47a0      	blx	r4
                break;
 801850e:	bf00      	nop
        break;
 8018510:	e10a      	b.n	8018728 <RadioIrqProcess+0x3fc>
        SUBGRF_SetStandby( STDBY_RC );
 8018512:	2000      	movs	r0, #0
 8018514:	f000 ff82 	bl	801941c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8018518:	4b32      	ldr	r3, [pc, #200]	@ (80185e4 <RadioIrqProcess+0x2b8>)
 801851a:	681b      	ldr	r3, [r3, #0]
 801851c:	2b00      	cmp	r3, #0
 801851e:	f000 8105 	beq.w	801872c <RadioIrqProcess+0x400>
 8018522:	4b30      	ldr	r3, [pc, #192]	@ (80185e4 <RadioIrqProcess+0x2b8>)
 8018524:	681b      	ldr	r3, [r3, #0]
 8018526:	699b      	ldr	r3, [r3, #24]
 8018528:	2b00      	cmp	r3, #0
 801852a:	f000 80ff 	beq.w	801872c <RadioIrqProcess+0x400>
            RadioEvents->CadDone( false );
 801852e:	4b2d      	ldr	r3, [pc, #180]	@ (80185e4 <RadioIrqProcess+0x2b8>)
 8018530:	681b      	ldr	r3, [r3, #0]
 8018532:	699b      	ldr	r3, [r3, #24]
 8018534:	2000      	movs	r0, #0
 8018536:	4798      	blx	r3
        break;
 8018538:	e0f8      	b.n	801872c <RadioIrqProcess+0x400>
        SUBGRF_SetStandby( STDBY_RC );
 801853a:	2000      	movs	r0, #0
 801853c:	f000 ff6e 	bl	801941c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8018540:	4b28      	ldr	r3, [pc, #160]	@ (80185e4 <RadioIrqProcess+0x2b8>)
 8018542:	681b      	ldr	r3, [r3, #0]
 8018544:	2b00      	cmp	r3, #0
 8018546:	f000 80f3 	beq.w	8018730 <RadioIrqProcess+0x404>
 801854a:	4b26      	ldr	r3, [pc, #152]	@ (80185e4 <RadioIrqProcess+0x2b8>)
 801854c:	681b      	ldr	r3, [r3, #0]
 801854e:	699b      	ldr	r3, [r3, #24]
 8018550:	2b00      	cmp	r3, #0
 8018552:	f000 80ed 	beq.w	8018730 <RadioIrqProcess+0x404>
            RadioEvents->CadDone( true );
 8018556:	4b23      	ldr	r3, [pc, #140]	@ (80185e4 <RadioIrqProcess+0x2b8>)
 8018558:	681b      	ldr	r3, [r3, #0]
 801855a:	699b      	ldr	r3, [r3, #24]
 801855c:	2001      	movs	r0, #1
 801855e:	4798      	blx	r3
        break;
 8018560:	e0e6      	b.n	8018730 <RadioIrqProcess+0x404>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 8018562:	4b25      	ldr	r3, [pc, #148]	@ (80185f8 <RadioIrqProcess+0x2cc>)
 8018564:	2201      	movs	r2, #1
 8018566:	2100      	movs	r1, #0
 8018568:	2002      	movs	r0, #2
 801856a:	f003 f8eb 	bl	801b744 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 801856e:	f000 fe09 	bl	8019184 <SUBGRF_GetOperatingMode>
 8018572:	4603      	mov	r3, r0
 8018574:	2b04      	cmp	r3, #4
 8018576:	d115      	bne.n	80185a4 <RadioIrqProcess+0x278>
            TimerStop( &TxTimeoutTimer );
 8018578:	4819      	ldr	r0, [pc, #100]	@ (80185e0 <RadioIrqProcess+0x2b4>)
 801857a:	f002 fed9 	bl	801b330 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801857e:	2000      	movs	r0, #0
 8018580:	f000 ff4c 	bl	801941c <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8018584:	4b17      	ldr	r3, [pc, #92]	@ (80185e4 <RadioIrqProcess+0x2b8>)
 8018586:	681b      	ldr	r3, [r3, #0]
 8018588:	2b00      	cmp	r3, #0
 801858a:	f000 80d3 	beq.w	8018734 <RadioIrqProcess+0x408>
 801858e:	4b15      	ldr	r3, [pc, #84]	@ (80185e4 <RadioIrqProcess+0x2b8>)
 8018590:	681b      	ldr	r3, [r3, #0]
 8018592:	685b      	ldr	r3, [r3, #4]
 8018594:	2b00      	cmp	r3, #0
 8018596:	f000 80cd 	beq.w	8018734 <RadioIrqProcess+0x408>
                RadioEvents->TxTimeout( );
 801859a:	4b12      	ldr	r3, [pc, #72]	@ (80185e4 <RadioIrqProcess+0x2b8>)
 801859c:	681b      	ldr	r3, [r3, #0]
 801859e:	685b      	ldr	r3, [r3, #4]
 80185a0:	4798      	blx	r3
        break;
 80185a2:	e0c7      	b.n	8018734 <RadioIrqProcess+0x408>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 80185a4:	f000 fdee 	bl	8019184 <SUBGRF_GetOperatingMode>
 80185a8:	4603      	mov	r3, r0
 80185aa:	2b05      	cmp	r3, #5
 80185ac:	f040 80c2 	bne.w	8018734 <RadioIrqProcess+0x408>
            TimerStop( &RxTimeoutTimer );
 80185b0:	480d      	ldr	r0, [pc, #52]	@ (80185e8 <RadioIrqProcess+0x2bc>)
 80185b2:	f002 febd 	bl	801b330 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 80185b6:	2000      	movs	r0, #0
 80185b8:	f000 ff30 	bl	801941c <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80185bc:	4b09      	ldr	r3, [pc, #36]	@ (80185e4 <RadioIrqProcess+0x2b8>)
 80185be:	681b      	ldr	r3, [r3, #0]
 80185c0:	2b00      	cmp	r3, #0
 80185c2:	f000 80b7 	beq.w	8018734 <RadioIrqProcess+0x408>
 80185c6:	4b07      	ldr	r3, [pc, #28]	@ (80185e4 <RadioIrqProcess+0x2b8>)
 80185c8:	681b      	ldr	r3, [r3, #0]
 80185ca:	68db      	ldr	r3, [r3, #12]
 80185cc:	2b00      	cmp	r3, #0
 80185ce:	f000 80b1 	beq.w	8018734 <RadioIrqProcess+0x408>
                RadioEvents->RxTimeout( );
 80185d2:	4b04      	ldr	r3, [pc, #16]	@ (80185e4 <RadioIrqProcess+0x2b8>)
 80185d4:	681b      	ldr	r3, [r3, #0]
 80185d6:	68db      	ldr	r3, [r3, #12]
 80185d8:	4798      	blx	r3
        break;
 80185da:	e0ab      	b.n	8018734 <RadioIrqProcess+0x408>
 80185dc:	20001cd8 	.word	0x20001cd8
 80185e0:	20001d34 	.word	0x20001d34
 80185e4:	20001cd4 	.word	0x20001cd4
 80185e8:	20001d4c 	.word	0x20001d4c
 80185ec:	20001bd4 	.word	0x20001bd4
 80185f0:	20001cfc 	.word	0x20001cfc
 80185f4:	10624dd3 	.word	0x10624dd3
 80185f8:	0801efd0 	.word	0x0801efd0
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 80185fc:	4b54      	ldr	r3, [pc, #336]	@ (8018750 <RadioIrqProcess+0x424>)
 80185fe:	2201      	movs	r2, #1
 8018600:	2100      	movs	r1, #0
 8018602:	2002      	movs	r0, #2
 8018604:	f003 f89e 	bl	801b744 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 8018608:	4b52      	ldr	r3, [pc, #328]	@ (8018754 <RadioIrqProcess+0x428>)
 801860a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801860c:	2b00      	cmp	r3, #0
 801860e:	f000 8093 	beq.w	8018738 <RadioIrqProcess+0x40c>
          Radio.Write(SUBGHZ_RTCPRDR2, (SubgRf.RxDcPreambleDetectTimeout>>16)&0xFF); /*Update Radio RTC Period MSB*/
 8018612:	4a51      	ldr	r2, [pc, #324]	@ (8018758 <RadioIrqProcess+0x42c>)
 8018614:	4b4f      	ldr	r3, [pc, #316]	@ (8018754 <RadioIrqProcess+0x428>)
 8018616:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018618:	0c1b      	lsrs	r3, r3, #16
 801861a:	b2db      	uxtb	r3, r3
 801861c:	4619      	mov	r1, r3
 801861e:	f640 1003 	movw	r0, #2307	@ 0x903
 8018622:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCPRDR1, (SubgRf.RxDcPreambleDetectTimeout>>8)&0xFF); /*Update Radio RTC Period MidByte*/
 8018624:	4a4c      	ldr	r2, [pc, #304]	@ (8018758 <RadioIrqProcess+0x42c>)
 8018626:	4b4b      	ldr	r3, [pc, #300]	@ (8018754 <RadioIrqProcess+0x428>)
 8018628:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801862a:	0a1b      	lsrs	r3, r3, #8
 801862c:	b2db      	uxtb	r3, r3
 801862e:	4619      	mov	r1, r3
 8018630:	f640 1004 	movw	r0, #2308	@ 0x904
 8018634:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCPRDR0, (SubgRf.RxDcPreambleDetectTimeout)&0xFF); /*Update Radio RTC Period lsb*/
 8018636:	4a48      	ldr	r2, [pc, #288]	@ (8018758 <RadioIrqProcess+0x42c>)
 8018638:	4b46      	ldr	r3, [pc, #280]	@ (8018754 <RadioIrqProcess+0x428>)
 801863a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801863c:	b2db      	uxtb	r3, r3
 801863e:	4619      	mov	r1, r3
 8018640:	f640 1005 	movw	r0, #2309	@ 0x905
 8018644:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCCTLR, Radio.Read(SUBGHZ_RTCCTLR)|0x1); /*restart Radio RTC*/
 8018646:	4c44      	ldr	r4, [pc, #272]	@ (8018758 <RadioIrqProcess+0x42c>)
 8018648:	4b44      	ldr	r3, [pc, #272]	@ (801875c <RadioIrqProcess+0x430>)
 801864a:	f640 1002 	movw	r0, #2306	@ 0x902
 801864e:	4798      	blx	r3
 8018650:	4603      	mov	r3, r0
 8018652:	f043 0301 	orr.w	r3, r3, #1
 8018656:	b2db      	uxtb	r3, r3
 8018658:	4619      	mov	r1, r3
 801865a:	f640 1002 	movw	r0, #2306	@ 0x902
 801865e:	47a0      	blx	r4
          SubgRf.RxDcPreambleDetectTimeout = 0;
 8018660:	4b3c      	ldr	r3, [pc, #240]	@ (8018754 <RadioIrqProcess+0x428>)
 8018662:	2200      	movs	r2, #0
 8018664:	659a      	str	r2, [r3, #88]	@ 0x58
          SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8018666:	2300      	movs	r3, #0
 8018668:	2200      	movs	r2, #0
 801866a:	f240 2162 	movw	r1, #610	@ 0x262
 801866e:	f240 2062 	movw	r0, #610	@ 0x262
 8018672:	f001 f8a9 	bl	80197c8 <SUBGRF_SetDioIrqParams>
        break;
 8018676:	e05f      	b.n	8018738 <RadioIrqProcess+0x40c>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 8018678:	4b39      	ldr	r3, [pc, #228]	@ (8018760 <RadioIrqProcess+0x434>)
 801867a:	2201      	movs	r2, #1
 801867c:	2100      	movs	r1, #0
 801867e:	2002      	movs	r0, #2
 8018680:	f003 f860 	bl	801b744 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 8018684:	f001 ff27 	bl	801a4d6 <RFW_Is_Init>
 8018688:	4603      	mov	r3, r0
 801868a:	2b01      	cmp	r3, #1
 801868c:	d156      	bne.n	801873c <RadioIrqProcess+0x410>
            RFW_ReceivePayload( );
 801868e:	f001 ff58 	bl	801a542 <RFW_ReceivePayload>
        break;
 8018692:	e053      	b.n	801873c <RadioIrqProcess+0x410>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 8018694:	4b33      	ldr	r3, [pc, #204]	@ (8018764 <RadioIrqProcess+0x438>)
 8018696:	2201      	movs	r2, #1
 8018698:	2100      	movs	r1, #0
 801869a:	2002      	movs	r0, #2
 801869c:	f003 f852 	bl	801b744 <UTIL_ADV_TRACE_COND_FSend>
        break;
 80186a0:	e051      	b.n	8018746 <RadioIrqProcess+0x41a>
        TimerStop( &RxTimeoutTimer );
 80186a2:	4831      	ldr	r0, [pc, #196]	@ (8018768 <RadioIrqProcess+0x43c>)
 80186a4:	f002 fe44 	bl	801b330 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 80186a8:	4b2a      	ldr	r3, [pc, #168]	@ (8018754 <RadioIrqProcess+0x428>)
 80186aa:	785b      	ldrb	r3, [r3, #1]
 80186ac:	f083 0301 	eor.w	r3, r3, #1
 80186b0:	b2db      	uxtb	r3, r3
 80186b2:	2b00      	cmp	r3, #0
 80186b4:	d002      	beq.n	80186bc <RadioIrqProcess+0x390>
            SUBGRF_SetStandby( STDBY_RC );
 80186b6:	2000      	movs	r0, #0
 80186b8:	f000 feb0 	bl	801941c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80186bc:	4b2b      	ldr	r3, [pc, #172]	@ (801876c <RadioIrqProcess+0x440>)
 80186be:	681b      	ldr	r3, [r3, #0]
 80186c0:	2b00      	cmp	r3, #0
 80186c2:	d03d      	beq.n	8018740 <RadioIrqProcess+0x414>
 80186c4:	4b29      	ldr	r3, [pc, #164]	@ (801876c <RadioIrqProcess+0x440>)
 80186c6:	681b      	ldr	r3, [r3, #0]
 80186c8:	68db      	ldr	r3, [r3, #12]
 80186ca:	2b00      	cmp	r3, #0
 80186cc:	d038      	beq.n	8018740 <RadioIrqProcess+0x414>
            RadioEvents->RxTimeout( );
 80186ce:	4b27      	ldr	r3, [pc, #156]	@ (801876c <RadioIrqProcess+0x440>)
 80186d0:	681b      	ldr	r3, [r3, #0]
 80186d2:	68db      	ldr	r3, [r3, #12]
 80186d4:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 80186d6:	4b26      	ldr	r3, [pc, #152]	@ (8018770 <RadioIrqProcess+0x444>)
 80186d8:	2201      	movs	r2, #1
 80186da:	2100      	movs	r1, #0
 80186dc:	2002      	movs	r0, #2
 80186de:	f003 f831 	bl	801b744 <UTIL_ADV_TRACE_COND_FSend>
        break;
 80186e2:	e02d      	b.n	8018740 <RadioIrqProcess+0x414>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 80186e4:	4b23      	ldr	r3, [pc, #140]	@ (8018774 <RadioIrqProcess+0x448>)
 80186e6:	2201      	movs	r2, #1
 80186e8:	2100      	movs	r1, #0
 80186ea:	2002      	movs	r0, #2
 80186ec:	f003 f82a 	bl	801b744 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 80186f0:	4b18      	ldr	r3, [pc, #96]	@ (8018754 <RadioIrqProcess+0x428>)
 80186f2:	785b      	ldrb	r3, [r3, #1]
 80186f4:	f083 0301 	eor.w	r3, r3, #1
 80186f8:	b2db      	uxtb	r3, r3
 80186fa:	2b00      	cmp	r3, #0
 80186fc:	d002      	beq.n	8018704 <RadioIrqProcess+0x3d8>
            SUBGRF_SetStandby( STDBY_RC );
 80186fe:	2000      	movs	r0, #0
 8018700:	f000 fe8c 	bl	801941c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8018704:	4b19      	ldr	r3, [pc, #100]	@ (801876c <RadioIrqProcess+0x440>)
 8018706:	681b      	ldr	r3, [r3, #0]
 8018708:	2b00      	cmp	r3, #0
 801870a:	d01b      	beq.n	8018744 <RadioIrqProcess+0x418>
 801870c:	4b17      	ldr	r3, [pc, #92]	@ (801876c <RadioIrqProcess+0x440>)
 801870e:	681b      	ldr	r3, [r3, #0]
 8018710:	691b      	ldr	r3, [r3, #16]
 8018712:	2b00      	cmp	r3, #0
 8018714:	d016      	beq.n	8018744 <RadioIrqProcess+0x418>
            RadioEvents->RxError( );
 8018716:	4b15      	ldr	r3, [pc, #84]	@ (801876c <RadioIrqProcess+0x440>)
 8018718:	681b      	ldr	r3, [r3, #0]
 801871a:	691b      	ldr	r3, [r3, #16]
 801871c:	4798      	blx	r3
        break;
 801871e:	e011      	b.n	8018744 <RadioIrqProcess+0x418>
        break;
 8018720:	bf00      	nop
 8018722:	e010      	b.n	8018746 <RadioIrqProcess+0x41a>
        break;
 8018724:	bf00      	nop
 8018726:	e00e      	b.n	8018746 <RadioIrqProcess+0x41a>
        break;
 8018728:	bf00      	nop
 801872a:	e00c      	b.n	8018746 <RadioIrqProcess+0x41a>
        break;
 801872c:	bf00      	nop
 801872e:	e00a      	b.n	8018746 <RadioIrqProcess+0x41a>
        break;
 8018730:	bf00      	nop
 8018732:	e008      	b.n	8018746 <RadioIrqProcess+0x41a>
        break;
 8018734:	bf00      	nop
 8018736:	e006      	b.n	8018746 <RadioIrqProcess+0x41a>
        break;
 8018738:	bf00      	nop
 801873a:	e004      	b.n	8018746 <RadioIrqProcess+0x41a>
        break;
 801873c:	bf00      	nop
 801873e:	e002      	b.n	8018746 <RadioIrqProcess+0x41a>
        break;
 8018740:	bf00      	nop
 8018742:	e000      	b.n	8018746 <RadioIrqProcess+0x41a>
        break;
 8018744:	bf00      	nop
    }
}
 8018746:	bf00      	nop
 8018748:	3708      	adds	r7, #8
 801874a:	46bd      	mov	sp, r7
 801874c:	bdb0      	pop	{r4, r5, r7, pc}
 801874e:	bf00      	nop
 8018750:	0801efe4 	.word	0x0801efe4
 8018754:	20001cd8 	.word	0x20001cd8
 8018758:	0801813d 	.word	0x0801813d
 801875c:	08018161 	.word	0x08018161
 8018760:	0801eff0 	.word	0x0801eff0
 8018764:	0801effc 	.word	0x0801effc
 8018768:	20001d4c 	.word	0x20001d4c
 801876c:	20001cd4 	.word	0x20001cd4
 8018770:	0801f008 	.word	0x0801f008
 8018774:	0801f014 	.word	0x0801f014

08018778 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 8018778:	b580      	push	{r7, lr}
 801877a:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 801877c:	4b09      	ldr	r3, [pc, #36]	@ (80187a4 <RadioTxPrbs+0x2c>)
 801877e:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8018782:	2101      	movs	r1, #1
 8018784:	4618      	mov	r0, r3
 8018786:	f001 fcbd 	bl	801a104 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 801878a:	4b07      	ldr	r3, [pc, #28]	@ (80187a8 <RadioTxPrbs+0x30>)
 801878c:	212d      	movs	r1, #45	@ 0x2d
 801878e:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 8018792:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 8018794:	f000 ff05 	bl	80195a2 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8018798:	4804      	ldr	r0, [pc, #16]	@ (80187ac <RadioTxPrbs+0x34>)
 801879a:	f000 fe5b 	bl	8019454 <SUBGRF_SetTx>
}
 801879e:	bf00      	nop
 80187a0:	bd80      	pop	{r7, pc}
 80187a2:	bf00      	nop
 80187a4:	20001cd8 	.word	0x20001cd8
 80187a8:	0801813d 	.word	0x0801813d
 80187ac:	000fffff 	.word	0x000fffff

080187b0 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 80187b0:	b580      	push	{r7, lr}
 80187b2:	b084      	sub	sp, #16
 80187b4:	af00      	add	r7, sp, #0
 80187b6:	4603      	mov	r3, r0
 80187b8:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 80187ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80187be:	4618      	mov	r0, r3
 80187c0:	f001 fcc8 	bl	801a154 <SUBGRF_SetRfTxPower>
 80187c4:	4603      	mov	r3, r0
 80187c6:	73fb      	strb	r3, [r7, #15]
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 80187c8:	7bfb      	ldrb	r3, [r7, #15]
 80187ca:	2101      	movs	r1, #1
 80187cc:	4618      	mov	r0, r3
 80187ce:	f001 fc99 	bl	801a104 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 80187d2:	f000 fedd 	bl	8019590 <SUBGRF_SetTxContinuousWave>
}
 80187d6:	bf00      	nop
 80187d8:	3710      	adds	r7, #16
 80187da:	46bd      	mov	sp, r7
 80187dc:	bd80      	pop	{r7, pc}

080187de <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 80187de:	b480      	push	{r7}
 80187e0:	b089      	sub	sp, #36	@ 0x24
 80187e2:	af00      	add	r7, sp, #0
 80187e4:	60f8      	str	r0, [r7, #12]
 80187e6:	60b9      	str	r1, [r7, #8]
 80187e8:	4613      	mov	r3, r2
 80187ea:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 80187ec:	2300      	movs	r3, #0
 80187ee:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 80187f0:	2300      	movs	r3, #0
 80187f2:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 80187f4:	2300      	movs	r3, #0
 80187f6:	61bb      	str	r3, [r7, #24]
 80187f8:	e011      	b.n	801881e <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 80187fa:	69bb      	ldr	r3, [r7, #24]
 80187fc:	68ba      	ldr	r2, [r7, #8]
 80187fe:	4413      	add	r3, r2
 8018800:	781a      	ldrb	r2, [r3, #0]
 8018802:	69bb      	ldr	r3, [r7, #24]
 8018804:	68b9      	ldr	r1, [r7, #8]
 8018806:	440b      	add	r3, r1
 8018808:	43d2      	mvns	r2, r2
 801880a:	b2d2      	uxtb	r2, r2
 801880c:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 801880e:	69bb      	ldr	r3, [r7, #24]
 8018810:	68fa      	ldr	r2, [r7, #12]
 8018812:	4413      	add	r3, r2
 8018814:	2200      	movs	r2, #0
 8018816:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 8018818:	69bb      	ldr	r3, [r7, #24]
 801881a:	3301      	adds	r3, #1
 801881c:	61bb      	str	r3, [r7, #24]
 801881e:	79fb      	ldrb	r3, [r7, #7]
 8018820:	69ba      	ldr	r2, [r7, #24]
 8018822:	429a      	cmp	r2, r3
 8018824:	dbe9      	blt.n	80187fa <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 8018826:	2300      	movs	r3, #0
 8018828:	61bb      	str	r3, [r7, #24]
 801882a:	e049      	b.n	80188c0 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 801882c:	69bb      	ldr	r3, [r7, #24]
 801882e:	425a      	negs	r2, r3
 8018830:	f003 0307 	and.w	r3, r3, #7
 8018834:	f002 0207 	and.w	r2, r2, #7
 8018838:	bf58      	it	pl
 801883a:	4253      	negpl	r3, r2
 801883c:	b2db      	uxtb	r3, r3
 801883e:	f1c3 0307 	rsb	r3, r3, #7
 8018842:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 8018844:	69bb      	ldr	r3, [r7, #24]
 8018846:	2b00      	cmp	r3, #0
 8018848:	da00      	bge.n	801884c <payload_integration+0x6e>
 801884a:	3307      	adds	r3, #7
 801884c:	10db      	asrs	r3, r3, #3
 801884e:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 8018850:	69bb      	ldr	r3, [r7, #24]
 8018852:	3301      	adds	r3, #1
 8018854:	425a      	negs	r2, r3
 8018856:	f003 0307 	and.w	r3, r3, #7
 801885a:	f002 0207 	and.w	r2, r2, #7
 801885e:	bf58      	it	pl
 8018860:	4253      	negpl	r3, r2
 8018862:	b2db      	uxtb	r3, r3
 8018864:	f1c3 0307 	rsb	r3, r3, #7
 8018868:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 801886a:	69bb      	ldr	r3, [r7, #24]
 801886c:	3301      	adds	r3, #1
 801886e:	2b00      	cmp	r3, #0
 8018870:	da00      	bge.n	8018874 <payload_integration+0x96>
 8018872:	3307      	adds	r3, #7
 8018874:	10db      	asrs	r3, r3, #3
 8018876:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 8018878:	7dbb      	ldrb	r3, [r7, #22]
 801887a:	68ba      	ldr	r2, [r7, #8]
 801887c:	4413      	add	r3, r2
 801887e:	781b      	ldrb	r3, [r3, #0]
 8018880:	461a      	mov	r2, r3
 8018882:	7dfb      	ldrb	r3, [r7, #23]
 8018884:	fa42 f303 	asr.w	r3, r2, r3
 8018888:	b2db      	uxtb	r3, r3
 801888a:	f003 0301 	and.w	r3, r3, #1
 801888e:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 8018890:	7ffa      	ldrb	r2, [r7, #31]
 8018892:	7cfb      	ldrb	r3, [r7, #19]
 8018894:	4053      	eors	r3, r2
 8018896:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 8018898:	7d3b      	ldrb	r3, [r7, #20]
 801889a:	68fa      	ldr	r2, [r7, #12]
 801889c:	4413      	add	r3, r2
 801889e:	781b      	ldrb	r3, [r3, #0]
 80188a0:	b25a      	sxtb	r2, r3
 80188a2:	7ff9      	ldrb	r1, [r7, #31]
 80188a4:	7d7b      	ldrb	r3, [r7, #21]
 80188a6:	fa01 f303 	lsl.w	r3, r1, r3
 80188aa:	b25b      	sxtb	r3, r3
 80188ac:	4313      	orrs	r3, r2
 80188ae:	b259      	sxtb	r1, r3
 80188b0:	7d3b      	ldrb	r3, [r7, #20]
 80188b2:	68fa      	ldr	r2, [r7, #12]
 80188b4:	4413      	add	r3, r2
 80188b6:	b2ca      	uxtb	r2, r1
 80188b8:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 80188ba:	69bb      	ldr	r3, [r7, #24]
 80188bc:	3301      	adds	r3, #1
 80188be:	61bb      	str	r3, [r7, #24]
 80188c0:	79fb      	ldrb	r3, [r7, #7]
 80188c2:	00db      	lsls	r3, r3, #3
 80188c4:	69ba      	ldr	r2, [r7, #24]
 80188c6:	429a      	cmp	r2, r3
 80188c8:	dbb0      	blt.n	801882c <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 80188ca:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80188ce:	01db      	lsls	r3, r3, #7
 80188d0:	b25a      	sxtb	r2, r3
 80188d2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80188d6:	019b      	lsls	r3, r3, #6
 80188d8:	b25b      	sxtb	r3, r3
 80188da:	4313      	orrs	r3, r2
 80188dc:	b25b      	sxtb	r3, r3
 80188de:	7ffa      	ldrb	r2, [r7, #31]
 80188e0:	2a00      	cmp	r2, #0
 80188e2:	d101      	bne.n	80188e8 <payload_integration+0x10a>
 80188e4:	2220      	movs	r2, #32
 80188e6:	e000      	b.n	80188ea <payload_integration+0x10c>
 80188e8:	2200      	movs	r2, #0
 80188ea:	4313      	orrs	r3, r2
 80188ec:	b259      	sxtb	r1, r3
 80188ee:	79fb      	ldrb	r3, [r7, #7]
 80188f0:	68fa      	ldr	r2, [r7, #12]
 80188f2:	4413      	add	r3, r2
 80188f4:	b2ca      	uxtb	r2, r1
 80188f6:	701a      	strb	r2, [r3, #0]
}
 80188f8:	bf00      	nop
 80188fa:	3724      	adds	r7, #36	@ 0x24
 80188fc:	46bd      	mov	sp, r7
 80188fe:	bc80      	pop	{r7}
 8018900:	4770      	bx	lr
	...

08018904 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t* config, uint32_t rxContinuous, uint32_t symbTimeout )
{
 8018904:	b580      	push	{r7, lr}
 8018906:	b08c      	sub	sp, #48	@ 0x30
 8018908:	af00      	add	r7, sp, #0
 801890a:	60b9      	str	r1, [r7, #8]
 801890c:	607a      	str	r2, [r7, #4]
 801890e:	603b      	str	r3, [r7, #0]
 8018910:	4603      	mov	r3, r0
 8018912:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 8018914:	2300      	movs	r3, #0
 8018916:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint8_t syncword[8] = {0};
 8018918:	f107 0320 	add.w	r3, r7, #32
 801891c:	2200      	movs	r2, #0
 801891e:	601a      	str	r2, [r3, #0]
 8018920:	605a      	str	r2, [r3, #4]
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8018922:	f001 fdd2 	bl	801a4ca <RFW_DeInit>

    if( rxContinuous != 0 )
 8018926:	687b      	ldr	r3, [r7, #4]
 8018928:	2b00      	cmp	r3, #0
 801892a:	d001      	beq.n	8018930 <RadioSetRxGenericConfig+0x2c>
    {
        symbTimeout = 0;
 801892c:	2300      	movs	r3, #0
 801892e:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 8018930:	687b      	ldr	r3, [r7, #4]
 8018932:	2b00      	cmp	r3, #0
 8018934:	bf14      	ite	ne
 8018936:	2301      	movne	r3, #1
 8018938:	2300      	moveq	r3, #0
 801893a:	b2da      	uxtb	r2, r3
 801893c:	4ba3      	ldr	r3, [pc, #652]	@ (8018bcc <RadioSetRxGenericConfig+0x2c8>)
 801893e:	705a      	strb	r2, [r3, #1]

    switch( modem )
 8018940:	7bfb      	ldrb	r3, [r7, #15]
 8018942:	2b00      	cmp	r3, #0
 8018944:	d003      	beq.n	801894e <RadioSetRxGenericConfig+0x4a>
 8018946:	2b01      	cmp	r3, #1
 8018948:	f000 80dc 	beq.w	8018b04 <RadioSetRxGenericConfig+0x200>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 801894c:	e195      	b.n	8018c7a <RadioSetRxGenericConfig+0x376>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 801894e:	68bb      	ldr	r3, [r7, #8]
 8018950:	689b      	ldr	r3, [r3, #8]
 8018952:	2b00      	cmp	r3, #0
 8018954:	d003      	beq.n	801895e <RadioSetRxGenericConfig+0x5a>
 8018956:	68bb      	ldr	r3, [r7, #8]
 8018958:	68db      	ldr	r3, [r3, #12]
 801895a:	2b00      	cmp	r3, #0
 801895c:	d102      	bne.n	8018964 <RadioSetRxGenericConfig+0x60>
            return -1;
 801895e:	f04f 33ff 	mov.w	r3, #4294967295
 8018962:	e18b      	b.n	8018c7c <RadioSetRxGenericConfig+0x378>
        if( config->fsk.SyncWordLength > 8 )
 8018964:	68bb      	ldr	r3, [r7, #8]
 8018966:	7f9b      	ldrb	r3, [r3, #30]
 8018968:	2b08      	cmp	r3, #8
 801896a:	d902      	bls.n	8018972 <RadioSetRxGenericConfig+0x6e>
            return -1;
 801896c:	f04f 33ff 	mov.w	r3, #4294967295
 8018970:	e184      	b.n	8018c7c <RadioSetRxGenericConfig+0x378>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8018972:	68bb      	ldr	r3, [r7, #8]
 8018974:	6919      	ldr	r1, [r3, #16]
 8018976:	68bb      	ldr	r3, [r7, #8]
 8018978:	7f9b      	ldrb	r3, [r3, #30]
 801897a:	461a      	mov	r2, r3
 801897c:	f107 0320 	add.w	r3, r7, #32
 8018980:	4618      	mov	r0, r3
 8018982:	f001 fe95 	bl	801a6b0 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8018986:	68bb      	ldr	r3, [r7, #8]
 8018988:	681b      	ldr	r3, [r3, #0]
 801898a:	2b00      	cmp	r3, #0
 801898c:	bf14      	ite	ne
 801898e:	2301      	movne	r3, #1
 8018990:	2300      	moveq	r3, #0
 8018992:	b2db      	uxtb	r3, r3
 8018994:	4618      	mov	r0, r3
 8018996:	f000 fe0d 	bl	80195b4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801899a:	4b8c      	ldr	r3, [pc, #560]	@ (8018bcc <RadioSetRxGenericConfig+0x2c8>)
 801899c:	2200      	movs	r2, #0
 801899e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 80189a2:	68bb      	ldr	r3, [r7, #8]
 80189a4:	689b      	ldr	r3, [r3, #8]
 80189a6:	4a89      	ldr	r2, [pc, #548]	@ (8018bcc <RadioSetRxGenericConfig+0x2c8>)
 80189a8:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 80189aa:	68bb      	ldr	r3, [r7, #8]
 80189ac:	f893 2020 	ldrb.w	r2, [r3, #32]
 80189b0:	4b86      	ldr	r3, [pc, #536]	@ (8018bcc <RadioSetRxGenericConfig+0x2c8>)
 80189b2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 80189b6:	68bb      	ldr	r3, [r7, #8]
 80189b8:	685b      	ldr	r3, [r3, #4]
 80189ba:	4618      	mov	r0, r3
 80189bc:	f001 fcb8 	bl	801a330 <SUBGRF_GetFskBandwidthRegValue>
 80189c0:	4603      	mov	r3, r0
 80189c2:	461a      	mov	r2, r3
 80189c4:	4b81      	ldr	r3, [pc, #516]	@ (8018bcc <RadioSetRxGenericConfig+0x2c8>)
 80189c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80189ca:	4b80      	ldr	r3, [pc, #512]	@ (8018bcc <RadioSetRxGenericConfig+0x2c8>)
 80189cc:	2200      	movs	r2, #0
 80189ce:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 80189d0:	68bb      	ldr	r3, [r7, #8]
 80189d2:	68db      	ldr	r3, [r3, #12]
 80189d4:	b29b      	uxth	r3, r3
 80189d6:	00db      	lsls	r3, r3, #3
 80189d8:	b29a      	uxth	r2, r3
 80189da:	4b7c      	ldr	r3, [pc, #496]	@ (8018bcc <RadioSetRxGenericConfig+0x2c8>)
 80189dc:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 80189de:	68bb      	ldr	r3, [r7, #8]
 80189e0:	7fda      	ldrb	r2, [r3, #31]
 80189e2:	4b7a      	ldr	r3, [pc, #488]	@ (8018bcc <RadioSetRxGenericConfig+0x2c8>)
 80189e4:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 80189e6:	68bb      	ldr	r3, [r7, #8]
 80189e8:	7f9b      	ldrb	r3, [r3, #30]
 80189ea:	00db      	lsls	r3, r3, #3
 80189ec:	b2da      	uxtb	r2, r3
 80189ee:	4b77      	ldr	r3, [pc, #476]	@ (8018bcc <RadioSetRxGenericConfig+0x2c8>)
 80189f0:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 80189f2:	68bb      	ldr	r3, [r7, #8]
 80189f4:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 80189f8:	4b74      	ldr	r3, [pc, #464]	@ (8018bcc <RadioSetRxGenericConfig+0x2c8>)
 80189fa:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 80189fc:	68bb      	ldr	r3, [r7, #8]
 80189fe:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8018a02:	2b00      	cmp	r3, #0
 8018a04:	d105      	bne.n	8018a12 <RadioSetRxGenericConfig+0x10e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 8018a06:	68bb      	ldr	r3, [r7, #8]
 8018a08:	695b      	ldr	r3, [r3, #20]
 8018a0a:	b2da      	uxtb	r2, r3
 8018a0c:	4b6f      	ldr	r3, [pc, #444]	@ (8018bcc <RadioSetRxGenericConfig+0x2c8>)
 8018a0e:	759a      	strb	r2, [r3, #22]
 8018a10:	e00b      	b.n	8018a2a <RadioSetRxGenericConfig+0x126>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 8018a12:	68bb      	ldr	r3, [r7, #8]
 8018a14:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8018a18:	2b02      	cmp	r3, #2
 8018a1a:	d103      	bne.n	8018a24 <RadioSetRxGenericConfig+0x120>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8018a1c:	4b6b      	ldr	r3, [pc, #428]	@ (8018bcc <RadioSetRxGenericConfig+0x2c8>)
 8018a1e:	22ff      	movs	r2, #255	@ 0xff
 8018a20:	759a      	strb	r2, [r3, #22]
 8018a22:	e002      	b.n	8018a2a <RadioSetRxGenericConfig+0x126>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8018a24:	4b69      	ldr	r3, [pc, #420]	@ (8018bcc <RadioSetRxGenericConfig+0x2c8>)
 8018a26:	22ff      	movs	r2, #255	@ 0xff
 8018a28:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8018a2a:	68bb      	ldr	r3, [r7, #8]
 8018a2c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8018a30:	2b02      	cmp	r3, #2
 8018a32:	d004      	beq.n	8018a3e <RadioSetRxGenericConfig+0x13a>
 8018a34:	68bb      	ldr	r3, [r7, #8]
 8018a36:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8018a3a:	2b02      	cmp	r3, #2
 8018a3c:	d12d      	bne.n	8018a9a <RadioSetRxGenericConfig+0x196>
          if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8018a3e:	68bb      	ldr	r3, [r7, #8]
 8018a40:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8018a44:	2bf1      	cmp	r3, #241	@ 0xf1
 8018a46:	d00c      	beq.n	8018a62 <RadioSetRxGenericConfig+0x15e>
 8018a48:	68bb      	ldr	r3, [r7, #8]
 8018a4a:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8018a4e:	2bf2      	cmp	r3, #242	@ 0xf2
 8018a50:	d007      	beq.n	8018a62 <RadioSetRxGenericConfig+0x15e>
 8018a52:	68bb      	ldr	r3, [r7, #8]
 8018a54:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8018a58:	2b01      	cmp	r3, #1
 8018a5a:	d002      	beq.n	8018a62 <RadioSetRxGenericConfig+0x15e>
            return -1;
 8018a5c:	f04f 33ff 	mov.w	r3, #4294967295
 8018a60:	e10c      	b.n	8018c7c <RadioSetRxGenericConfig+0x378>
          ConfigGeneric.rtx = CONFIG_RX;
 8018a62:	2300      	movs	r3, #0
 8018a64:	773b      	strb	r3, [r7, #28]
          ConfigGeneric.RxConfig = config;
 8018a66:	68bb      	ldr	r3, [r7, #8]
 8018a68:	61bb      	str	r3, [r7, #24]
          if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 8018a6a:	4b59      	ldr	r3, [pc, #356]	@ (8018bd0 <RadioSetRxGenericConfig+0x2cc>)
 8018a6c:	6819      	ldr	r1, [r3, #0]
 8018a6e:	f107 0314 	add.w	r3, r7, #20
 8018a72:	4a58      	ldr	r2, [pc, #352]	@ (8018bd4 <RadioSetRxGenericConfig+0x2d0>)
 8018a74:	4618      	mov	r0, r3
 8018a76:	f001 fd1b 	bl	801a4b0 <RFW_Init>
 8018a7a:	4603      	mov	r3, r0
 8018a7c:	2b00      	cmp	r3, #0
 8018a7e:	d002      	beq.n	8018a86 <RadioSetRxGenericConfig+0x182>
            return -1;
 8018a80:	f04f 33ff 	mov.w	r3, #4294967295
 8018a84:	e0fa      	b.n	8018c7c <RadioSetRxGenericConfig+0x378>
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8018a86:	4b51      	ldr	r3, [pc, #324]	@ (8018bcc <RadioSetRxGenericConfig+0x2c8>)
 8018a88:	2200      	movs	r2, #0
 8018a8a:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8018a8c:	4b4f      	ldr	r3, [pc, #316]	@ (8018bcc <RadioSetRxGenericConfig+0x2c8>)
 8018a8e:	2201      	movs	r2, #1
 8018a90:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8018a92:	4b4e      	ldr	r3, [pc, #312]	@ (8018bcc <RadioSetRxGenericConfig+0x2c8>)
 8018a94:	2200      	movs	r2, #0
 8018a96:	755a      	strb	r2, [r3, #21]
        {
 8018a98:	e00e      	b.n	8018ab8 <RadioSetRxGenericConfig+0x1b4>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8018a9a:	68bb      	ldr	r3, [r7, #8]
 8018a9c:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 8018aa0:	4b4a      	ldr	r3, [pc, #296]	@ (8018bcc <RadioSetRxGenericConfig+0x2c8>)
 8018aa2:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8018aa4:	68bb      	ldr	r3, [r7, #8]
 8018aa6:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 8018aaa:	4b48      	ldr	r3, [pc, #288]	@ (8018bcc <RadioSetRxGenericConfig+0x2c8>)
 8018aac:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 8018aae:	68bb      	ldr	r3, [r7, #8]
 8018ab0:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8018ab4:	4b45      	ldr	r3, [pc, #276]	@ (8018bcc <RadioSetRxGenericConfig+0x2c8>)
 8018ab6:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8018ab8:	f7ff fa45 	bl	8017f46 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8018abc:	2000      	movs	r0, #0
 8018abe:	f7fe fbef 	bl	80172a0 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018ac2:	4845      	ldr	r0, [pc, #276]	@ (8018bd8 <RadioSetRxGenericConfig+0x2d4>)
 8018ac4:	f001 f816 	bl	8019af4 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018ac8:	4844      	ldr	r0, [pc, #272]	@ (8018bdc <RadioSetRxGenericConfig+0x2d8>)
 8018aca:	f001 f8e1 	bl	8019c90 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8018ace:	f107 0320 	add.w	r3, r7, #32
 8018ad2:	4618      	mov	r0, r3
 8018ad4:	f000 fba5 	bl	8019222 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8018ad8:	68bb      	ldr	r3, [r7, #8]
 8018ada:	8b9b      	ldrh	r3, [r3, #28]
 8018adc:	4618      	mov	r0, r3
 8018ade:	f000 fbef 	bl	80192c0 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8018ae2:	68bb      	ldr	r3, [r7, #8]
 8018ae4:	8b1b      	ldrh	r3, [r3, #24]
 8018ae6:	4618      	mov	r0, r3
 8018ae8:	f000 fbca 	bl	8019280 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 8018aec:	683b      	ldr	r3, [r7, #0]
 8018aee:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8018af2:	fb03 f202 	mul.w	r2, r3, r2
 8018af6:	68bb      	ldr	r3, [r7, #8]
 8018af8:	689b      	ldr	r3, [r3, #8]
 8018afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8018afe:	4a33      	ldr	r2, [pc, #204]	@ (8018bcc <RadioSetRxGenericConfig+0x2c8>)
 8018b00:	6093      	str	r3, [r2, #8]
        break;
 8018b02:	e0ba      	b.n	8018c7a <RadioSetRxGenericConfig+0x376>
        if( config->lora.PreambleLen == 0 )
 8018b04:	68bb      	ldr	r3, [r7, #8]
 8018b06:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8018b08:	2b00      	cmp	r3, #0
 8018b0a:	d102      	bne.n	8018b12 <RadioSetRxGenericConfig+0x20e>
            return -1;
 8018b0c:	f04f 33ff 	mov.w	r3, #4294967295
 8018b10:	e0b4      	b.n	8018c7c <RadioSetRxGenericConfig+0x378>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 8018b12:	68bb      	ldr	r3, [r7, #8]
 8018b14:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8018b18:	2b01      	cmp	r3, #1
 8018b1a:	d104      	bne.n	8018b26 <RadioSetRxGenericConfig+0x222>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 8018b1c:	68bb      	ldr	r3, [r7, #8]
 8018b1e:	695b      	ldr	r3, [r3, #20]
 8018b20:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8018b24:	e002      	b.n	8018b2c <RadioSetRxGenericConfig+0x228>
            MaxPayloadLength = 0xFF;
 8018b26:	23ff      	movs	r3, #255	@ 0xff
 8018b28:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8018b2c:	68bb      	ldr	r3, [r7, #8]
 8018b2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018b30:	2b00      	cmp	r3, #0
 8018b32:	bf14      	ite	ne
 8018b34:	2301      	movne	r3, #1
 8018b36:	2300      	moveq	r3, #0
 8018b38:	b2db      	uxtb	r3, r3
 8018b3a:	4618      	mov	r0, r3
 8018b3c:	f000 fd3a 	bl	80195b4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8018b40:	683b      	ldr	r3, [r7, #0]
 8018b42:	b2db      	uxtb	r3, r3
 8018b44:	4618      	mov	r0, r3
 8018b46:	f000 fd44 	bl	80195d2 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8018b4a:	4b20      	ldr	r3, [pc, #128]	@ (8018bcc <RadioSetRxGenericConfig+0x2c8>)
 8018b4c:	2201      	movs	r2, #1
 8018b4e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8018b52:	68bb      	ldr	r3, [r7, #8]
 8018b54:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8018b58:	4b1c      	ldr	r3, [pc, #112]	@ (8018bcc <RadioSetRxGenericConfig+0x2c8>)
 8018b5a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8018b5e:	68bb      	ldr	r3, [r7, #8]
 8018b60:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 8018b64:	4b19      	ldr	r3, [pc, #100]	@ (8018bcc <RadioSetRxGenericConfig+0x2c8>)
 8018b66:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8018b6a:	68bb      	ldr	r3, [r7, #8]
 8018b6c:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 8018b70:	4b16      	ldr	r3, [pc, #88]	@ (8018bcc <RadioSetRxGenericConfig+0x2c8>)
 8018b72:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 8018b76:	68bb      	ldr	r3, [r7, #8]
 8018b78:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8018b7c:	2b02      	cmp	r3, #2
 8018b7e:	d010      	beq.n	8018ba2 <RadioSetRxGenericConfig+0x29e>
 8018b80:	2b02      	cmp	r3, #2
 8018b82:	dc2d      	bgt.n	8018be0 <RadioSetRxGenericConfig+0x2dc>
 8018b84:	2b00      	cmp	r3, #0
 8018b86:	d002      	beq.n	8018b8e <RadioSetRxGenericConfig+0x28a>
 8018b88:	2b01      	cmp	r3, #1
 8018b8a:	d005      	beq.n	8018b98 <RadioSetRxGenericConfig+0x294>
            break;
 8018b8c:	e028      	b.n	8018be0 <RadioSetRxGenericConfig+0x2dc>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8018b8e:	4b0f      	ldr	r3, [pc, #60]	@ (8018bcc <RadioSetRxGenericConfig+0x2c8>)
 8018b90:	2200      	movs	r2, #0
 8018b92:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8018b96:	e024      	b.n	8018be2 <RadioSetRxGenericConfig+0x2de>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8018b98:	4b0c      	ldr	r3, [pc, #48]	@ (8018bcc <RadioSetRxGenericConfig+0x2c8>)
 8018b9a:	2201      	movs	r2, #1
 8018b9c:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8018ba0:	e01f      	b.n	8018be2 <RadioSetRxGenericConfig+0x2de>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8018ba2:	68bb      	ldr	r3, [r7, #8]
 8018ba4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8018ba8:	2b0b      	cmp	r3, #11
 8018baa:	d004      	beq.n	8018bb6 <RadioSetRxGenericConfig+0x2b2>
 8018bac:	68bb      	ldr	r3, [r7, #8]
 8018bae:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8018bb2:	2b0c      	cmp	r3, #12
 8018bb4:	d104      	bne.n	8018bc0 <RadioSetRxGenericConfig+0x2bc>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8018bb6:	4b05      	ldr	r3, [pc, #20]	@ (8018bcc <RadioSetRxGenericConfig+0x2c8>)
 8018bb8:	2201      	movs	r2, #1
 8018bba:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8018bbe:	e010      	b.n	8018be2 <RadioSetRxGenericConfig+0x2de>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8018bc0:	4b02      	ldr	r3, [pc, #8]	@ (8018bcc <RadioSetRxGenericConfig+0x2c8>)
 8018bc2:	2200      	movs	r2, #0
 8018bc4:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8018bc8:	e00b      	b.n	8018be2 <RadioSetRxGenericConfig+0x2de>
 8018bca:	bf00      	nop
 8018bcc:	20001cd8 	.word	0x20001cd8
 8018bd0:	20001cd4 	.word	0x20001cd4
 8018bd4:	20001d4c 	.word	0x20001d4c
 8018bd8:	20001d10 	.word	0x20001d10
 8018bdc:	20001ce6 	.word	0x20001ce6
            break;
 8018be0:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8018be2:	4b28      	ldr	r3, [pc, #160]	@ (8018c84 <RadioSetRxGenericConfig+0x380>)
 8018be4:	2201      	movs	r2, #1
 8018be6:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8018be8:	68bb      	ldr	r3, [r7, #8]
 8018bea:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 8018bec:	4b25      	ldr	r3, [pc, #148]	@ (8018c84 <RadioSetRxGenericConfig+0x380>)
 8018bee:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8018bf0:	68bb      	ldr	r3, [r7, #8]
 8018bf2:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 8018bf6:	4b23      	ldr	r3, [pc, #140]	@ (8018c84 <RadioSetRxGenericConfig+0x380>)
 8018bf8:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8018bfa:	4a22      	ldr	r2, [pc, #136]	@ (8018c84 <RadioSetRxGenericConfig+0x380>)
 8018bfc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8018c00:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8018c02:	68bb      	ldr	r3, [r7, #8]
 8018c04:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 8018c08:	4b1e      	ldr	r3, [pc, #120]	@ (8018c84 <RadioSetRxGenericConfig+0x380>)
 8018c0a:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8018c0e:	68bb      	ldr	r3, [r7, #8]
 8018c10:	f893 2035 	ldrb.w	r2, [r3, #53]	@ 0x35
 8018c14:	4b1b      	ldr	r3, [pc, #108]	@ (8018c84 <RadioSetRxGenericConfig+0x380>)
 8018c16:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        RadioStandby( );
 8018c1a:	f7ff f994 	bl	8017f46 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8018c1e:	2001      	movs	r0, #1
 8018c20:	f7fe fb3e 	bl	80172a0 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018c24:	4818      	ldr	r0, [pc, #96]	@ (8018c88 <RadioSetRxGenericConfig+0x384>)
 8018c26:	f000 ff65 	bl	8019af4 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018c2a:	4818      	ldr	r0, [pc, #96]	@ (8018c8c <RadioSetRxGenericConfig+0x388>)
 8018c2c:	f001 f830 	bl	8019c90 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8018c30:	4b14      	ldr	r3, [pc, #80]	@ (8018c84 <RadioSetRxGenericConfig+0x380>)
 8018c32:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8018c36:	2b01      	cmp	r3, #1
 8018c38:	d10d      	bne.n	8018c56 <RadioSetRxGenericConfig+0x352>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8018c3a:	f240 7036 	movw	r0, #1846	@ 0x736
 8018c3e:	f001 f981 	bl	8019f44 <SUBGRF_ReadRegister>
 8018c42:	4603      	mov	r3, r0
 8018c44:	f023 0304 	bic.w	r3, r3, #4
 8018c48:	b2db      	uxtb	r3, r3
 8018c4a:	4619      	mov	r1, r3
 8018c4c:	f240 7036 	movw	r0, #1846	@ 0x736
 8018c50:	f001 f964 	bl	8019f1c <SUBGRF_WriteRegister>
 8018c54:	e00c      	b.n	8018c70 <RadioSetRxGenericConfig+0x36c>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8018c56:	f240 7036 	movw	r0, #1846	@ 0x736
 8018c5a:	f001 f973 	bl	8019f44 <SUBGRF_ReadRegister>
 8018c5e:	4603      	mov	r3, r0
 8018c60:	f043 0304 	orr.w	r3, r3, #4
 8018c64:	b2db      	uxtb	r3, r3
 8018c66:	4619      	mov	r1, r3
 8018c68:	f240 7036 	movw	r0, #1846	@ 0x736
 8018c6c:	f001 f956 	bl	8019f1c <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 8018c70:	4b04      	ldr	r3, [pc, #16]	@ (8018c84 <RadioSetRxGenericConfig+0x380>)
 8018c72:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018c76:	609a      	str	r2, [r3, #8]
        break;
 8018c78:	bf00      	nop
    }
    return status;
 8018c7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8018c7c:	4618      	mov	r0, r3
 8018c7e:	3730      	adds	r7, #48	@ 0x30
 8018c80:	46bd      	mov	sp, r7
 8018c82:	bd80      	pop	{r7, pc}
 8018c84:	20001cd8 	.word	0x20001cd8
 8018c88:	20001d10 	.word	0x20001d10
 8018c8c:	20001ce6 	.word	0x20001ce6

08018c90 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 8018c90:	b580      	push	{r7, lr}
 8018c92:	b08e      	sub	sp, #56	@ 0x38
 8018c94:	af00      	add	r7, sp, #0
 8018c96:	60b9      	str	r1, [r7, #8]
 8018c98:	607b      	str	r3, [r7, #4]
 8018c9a:	4603      	mov	r3, r0
 8018c9c:	73fb      	strb	r3, [r7, #15]
 8018c9e:	4613      	mov	r3, r2
 8018ca0:	73bb      	strb	r3, [r7, #14]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 8018ca2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8018ca6:	2200      	movs	r2, #0
 8018ca8:	601a      	str	r2, [r3, #0]
 8018caa:	605a      	str	r2, [r3, #4]
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8018cac:	f001 fc0d 	bl	801a4ca <RFW_DeInit>
    switch( modem )
 8018cb0:	7bfb      	ldrb	r3, [r7, #15]
 8018cb2:	2b03      	cmp	r3, #3
 8018cb4:	f200 8205 	bhi.w	80190c2 <RadioSetTxGenericConfig+0x432>
 8018cb8:	a201      	add	r2, pc, #4	@ (adr r2, 8018cc0 <RadioSetTxGenericConfig+0x30>)
 8018cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018cbe:	bf00      	nop
 8018cc0:	08018e45 	.word	0x08018e45
 8018cc4:	08018f8d 	.word	0x08018f8d
 8018cc8:	08019085 	.word	0x08019085
 8018ccc:	08018cd1 	.word	0x08018cd1
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 8018cd0:	68bb      	ldr	r3, [r7, #8]
 8018cd2:	7c9b      	ldrb	r3, [r3, #18]
 8018cd4:	2b08      	cmp	r3, #8
 8018cd6:	d902      	bls.n	8018cde <RadioSetTxGenericConfig+0x4e>
        {
            return -1;
 8018cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8018cdc:	e206      	b.n	80190ec <RadioSetTxGenericConfig+0x45c>
        }
        else
        {
          RADIO_MEMCPY8(syncword, config->msk.SyncWord, config->msk.SyncWordLength);
 8018cde:	68bb      	ldr	r3, [r7, #8]
 8018ce0:	6899      	ldr	r1, [r3, #8]
 8018ce2:	68bb      	ldr	r3, [r7, #8]
 8018ce4:	7c9b      	ldrb	r3, [r3, #18]
 8018ce6:	461a      	mov	r2, r3
 8018ce8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8018cec:	4618      	mov	r0, r3
 8018cee:	f001 fcdf 	bl	801a6b0 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 8018cf2:	68bb      	ldr	r3, [r7, #8]
 8018cf4:	681b      	ldr	r3, [r3, #0]
 8018cf6:	2b00      	cmp	r3, #0
 8018cf8:	d102      	bne.n	8018d00 <RadioSetTxGenericConfig+0x70>
        {
            return -1;
 8018cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8018cfe:	e1f5      	b.n	80190ec <RadioSetTxGenericConfig+0x45c>
        }
        else if (config->msk.BitRate<= 10000)
 8018d00:	68bb      	ldr	r3, [r7, #8]
 8018d02:	681b      	ldr	r3, [r3, #0]
 8018d04:	f242 7210 	movw	r2, #10000	@ 0x2710
 8018d08:	4293      	cmp	r3, r2
 8018d0a:	d813      	bhi.n	8018d34 <RadioSetTxGenericConfig+0xa4>
        {
          /*max msk modulator datarate is 10kbps*/
          radio_modem= MODEM_MSK;
 8018d0c:	2302      	movs	r3, #2
 8018d0e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
          SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 8018d12:	4b99      	ldr	r3, [pc, #612]	@ (8018f78 <RadioSetTxGenericConfig+0x2e8>)
 8018d14:	2203      	movs	r2, #3
 8018d16:	739a      	strb	r2, [r3, #14]
          SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 8018d18:	4b97      	ldr	r3, [pc, #604]	@ (8018f78 <RadioSetTxGenericConfig+0x2e8>)
 8018d1a:	2203      	movs	r2, #3
 8018d1c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
          SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8018d20:	68bb      	ldr	r3, [r7, #8]
 8018d22:	681b      	ldr	r3, [r3, #0]
 8018d24:	4a94      	ldr	r2, [pc, #592]	@ (8018f78 <RadioSetTxGenericConfig+0x2e8>)
 8018d26:	63d3      	str	r3, [r2, #60]	@ 0x3c
          SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8018d28:	68bb      	ldr	r3, [r7, #8]
 8018d2a:	7cda      	ldrb	r2, [r3, #19]
 8018d2c:	4b92      	ldr	r3, [pc, #584]	@ (8018f78 <RadioSetTxGenericConfig+0x2e8>)
 8018d2e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8018d32:	e017      	b.n	8018d64 <RadioSetTxGenericConfig+0xd4>
        }
        else
        {
          radio_modem= MODEM_FSK;
 8018d34:	2300      	movs	r3, #0
 8018d36:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
          SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8018d3a:	4b8f      	ldr	r3, [pc, #572]	@ (8018f78 <RadioSetTxGenericConfig+0x2e8>)
 8018d3c:	2200      	movs	r2, #0
 8018d3e:	739a      	strb	r2, [r3, #14]
          SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8018d40:	4b8d      	ldr	r3, [pc, #564]	@ (8018f78 <RadioSetTxGenericConfig+0x2e8>)
 8018d42:	2200      	movs	r2, #0
 8018d44:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
          SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8018d48:	68bb      	ldr	r3, [r7, #8]
 8018d4a:	681b      	ldr	r3, [r3, #0]
 8018d4c:	4a8a      	ldr	r2, [pc, #552]	@ (8018f78 <RadioSetTxGenericConfig+0x2e8>)
 8018d4e:	63d3      	str	r3, [r2, #60]	@ 0x3c
          SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8018d50:	68bb      	ldr	r3, [r7, #8]
 8018d52:	7cda      	ldrb	r2, [r3, #19]
 8018d54:	4b88      	ldr	r3, [pc, #544]	@ (8018f78 <RadioSetTxGenericConfig+0x2e8>)
 8018d56:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
          /*do msk with gfsk modulator*/
          SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate/4;
 8018d5a:	68bb      	ldr	r3, [r7, #8]
 8018d5c:	681b      	ldr	r3, [r3, #0]
 8018d5e:	089b      	lsrs	r3, r3, #2
 8018d60:	4a85      	ldr	r2, [pc, #532]	@ (8018f78 <RadioSetTxGenericConfig+0x2e8>)
 8018d62:	6413      	str	r3, [r2, #64]	@ 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 8018d64:	68bb      	ldr	r3, [r7, #8]
 8018d66:	685b      	ldr	r3, [r3, #4]
 8018d68:	b29b      	uxth	r3, r3
 8018d6a:	00db      	lsls	r3, r3, #3
 8018d6c:	b29a      	uxth	r2, r3
 8018d6e:	4b82      	ldr	r3, [pc, #520]	@ (8018f78 <RadioSetTxGenericConfig+0x2e8>)
 8018d70:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8018d72:	4b81      	ldr	r3, [pc, #516]	@ (8018f78 <RadioSetTxGenericConfig+0x2e8>)
 8018d74:	2204      	movs	r2, #4
 8018d76:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 8018d78:	68bb      	ldr	r3, [r7, #8]
 8018d7a:	7c9b      	ldrb	r3, [r3, #18]
 8018d7c:	00db      	lsls	r3, r3, #3
 8018d7e:	b2da      	uxtb	r2, r3
 8018d80:	4b7d      	ldr	r3, [pc, #500]	@ (8018f78 <RadioSetTxGenericConfig+0x2e8>)
 8018d82:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8018d84:	4b7c      	ldr	r3, [pc, #496]	@ (8018f78 <RadioSetTxGenericConfig+0x2e8>)
 8018d86:	2200      	movs	r2, #0
 8018d88:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8018d8a:	68bb      	ldr	r3, [r7, #8]
 8018d8c:	7d9b      	ldrb	r3, [r3, #22]
 8018d8e:	2b02      	cmp	r3, #2
 8018d90:	d003      	beq.n	8018d9a <RadioSetTxGenericConfig+0x10a>
 8018d92:	68bb      	ldr	r3, [r7, #8]
 8018d94:	7d1b      	ldrb	r3, [r3, #20]
 8018d96:	2b02      	cmp	r3, #2
 8018d98:	d12b      	bne.n	8018df2 <RadioSetTxGenericConfig+0x162>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8018d9a:	68bb      	ldr	r3, [r7, #8]
 8018d9c:	7d5b      	ldrb	r3, [r3, #21]
 8018d9e:	2bf1      	cmp	r3, #241	@ 0xf1
 8018da0:	d00a      	beq.n	8018db8 <RadioSetTxGenericConfig+0x128>
 8018da2:	68bb      	ldr	r3, [r7, #8]
 8018da4:	7d5b      	ldrb	r3, [r3, #21]
 8018da6:	2bf2      	cmp	r3, #242	@ 0xf2
 8018da8:	d006      	beq.n	8018db8 <RadioSetTxGenericConfig+0x128>
 8018daa:	68bb      	ldr	r3, [r7, #8]
 8018dac:	7d5b      	ldrb	r3, [r3, #21]
 8018dae:	2b01      	cmp	r3, #1
 8018db0:	d002      	beq.n	8018db8 <RadioSetTxGenericConfig+0x128>
            {
                return -1;
 8018db2:	f04f 33ff 	mov.w	r3, #4294967295
 8018db6:	e199      	b.n	80190ec <RadioSetTxGenericConfig+0x45c>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig= config;
 8018db8:	68bb      	ldr	r3, [r7, #8]
 8018dba:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 8018dbc:	2301      	movs	r3, #1
 8018dbe:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8018dc2:	4b6e      	ldr	r3, [pc, #440]	@ (8018f7c <RadioSetTxGenericConfig+0x2ec>)
 8018dc4:	6819      	ldr	r1, [r3, #0]
 8018dc6:	f107 0320 	add.w	r3, r7, #32
 8018dca:	4a6d      	ldr	r2, [pc, #436]	@ (8018f80 <RadioSetTxGenericConfig+0x2f0>)
 8018dcc:	4618      	mov	r0, r3
 8018dce:	f001 fb6f 	bl	801a4b0 <RFW_Init>
 8018dd2:	4603      	mov	r3, r0
 8018dd4:	2b00      	cmp	r3, #0
 8018dd6:	d002      	beq.n	8018dde <RadioSetTxGenericConfig+0x14e>
            {
              return -1;
 8018dd8:	f04f 33ff 	mov.w	r3, #4294967295
 8018ddc:	e186      	b.n	80190ec <RadioSetTxGenericConfig+0x45c>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8018dde:	4b66      	ldr	r3, [pc, #408]	@ (8018f78 <RadioSetTxGenericConfig+0x2e8>)
 8018de0:	2200      	movs	r2, #0
 8018de2:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 8018de4:	4b64      	ldr	r3, [pc, #400]	@ (8018f78 <RadioSetTxGenericConfig+0x2e8>)
 8018de6:	2201      	movs	r2, #1
 8018de8:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8018dea:	4b63      	ldr	r3, [pc, #396]	@ (8018f78 <RadioSetTxGenericConfig+0x2e8>)
 8018dec:	2200      	movs	r2, #0
 8018dee:	755a      	strb	r2, [r3, #21]
        {
 8018df0:	e00b      	b.n	8018e0a <RadioSetTxGenericConfig+0x17a>
        }
        else
        {
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 8018df2:	68bb      	ldr	r3, [r7, #8]
 8018df4:	7d5a      	ldrb	r2, [r3, #21]
 8018df6:	4b60      	ldr	r3, [pc, #384]	@ (8018f78 <RadioSetTxGenericConfig+0x2e8>)
 8018df8:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 8018dfa:	68bb      	ldr	r3, [r7, #8]
 8018dfc:	7d9a      	ldrb	r2, [r3, #22]
 8018dfe:	4b5e      	ldr	r3, [pc, #376]	@ (8018f78 <RadioSetTxGenericConfig+0x2e8>)
 8018e00:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 8018e02:	68bb      	ldr	r3, [r7, #8]
 8018e04:	7d1a      	ldrb	r2, [r3, #20]
 8018e06:	4b5c      	ldr	r3, [pc, #368]	@ (8018f78 <RadioSetTxGenericConfig+0x2e8>)
 8018e08:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8018e0a:	f7ff f89c 	bl	8017f46 <RadioStandby>
        RadioSetModem( radio_modem );
 8018e0e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8018e12:	4618      	mov	r0, r3
 8018e14:	f7fe fa44 	bl	80172a0 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018e18:	485a      	ldr	r0, [pc, #360]	@ (8018f84 <RadioSetTxGenericConfig+0x2f4>)
 8018e1a:	f000 fe6b 	bl	8019af4 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018e1e:	485a      	ldr	r0, [pc, #360]	@ (8018f88 <RadioSetTxGenericConfig+0x2f8>)
 8018e20:	f000 ff36 	bl	8019c90 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8018e24:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8018e28:	4618      	mov	r0, r3
 8018e2a:	f000 f9fa 	bl	8019222 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 8018e2e:	68bb      	ldr	r3, [r7, #8]
 8018e30:	8a1b      	ldrh	r3, [r3, #16]
 8018e32:	4618      	mov	r0, r3
 8018e34:	f000 fa44 	bl	80192c0 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->msk.CrcPolynomial );
 8018e38:	68bb      	ldr	r3, [r7, #8]
 8018e3a:	899b      	ldrh	r3, [r3, #12]
 8018e3c:	4618      	mov	r0, r3
 8018e3e:	f000 fa1f 	bl	8019280 <SUBGRF_SetCrcPolynomial>
        break;
 8018e42:	e13f      	b.n	80190c4 <RadioSetTxGenericConfig+0x434>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 8018e44:	68bb      	ldr	r3, [r7, #8]
 8018e46:	681b      	ldr	r3, [r3, #0]
 8018e48:	2b00      	cmp	r3, #0
 8018e4a:	d102      	bne.n	8018e52 <RadioSetTxGenericConfig+0x1c2>
        {
            return -1;
 8018e4c:	f04f 33ff 	mov.w	r3, #4294967295
 8018e50:	e14c      	b.n	80190ec <RadioSetTxGenericConfig+0x45c>
        }
        if( config->fsk.SyncWordLength > 8 )
 8018e52:	68bb      	ldr	r3, [r7, #8]
 8018e54:	7c9b      	ldrb	r3, [r3, #18]
 8018e56:	2b08      	cmp	r3, #8
 8018e58:	d902      	bls.n	8018e60 <RadioSetTxGenericConfig+0x1d0>
        {
            return -1;
 8018e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8018e5e:	e145      	b.n	80190ec <RadioSetTxGenericConfig+0x45c>
        }
        else
        {
            RADIO_MEMCPY8(syncword, config->fsk.SyncWord, config->fsk.SyncWordLength);
 8018e60:	68bb      	ldr	r3, [r7, #8]
 8018e62:	6899      	ldr	r1, [r3, #8]
 8018e64:	68bb      	ldr	r3, [r7, #8]
 8018e66:	7c9b      	ldrb	r3, [r3, #18]
 8018e68:	461a      	mov	r2, r3
 8018e6a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8018e6e:	4618      	mov	r0, r3
 8018e70:	f001 fc1e 	bl	801a6b0 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8018e74:	4b40      	ldr	r3, [pc, #256]	@ (8018f78 <RadioSetTxGenericConfig+0x2e8>)
 8018e76:	2200      	movs	r2, #0
 8018e78:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8018e7c:	68bb      	ldr	r3, [r7, #8]
 8018e7e:	681b      	ldr	r3, [r3, #0]
 8018e80:	4a3d      	ldr	r2, [pc, #244]	@ (8018f78 <RadioSetTxGenericConfig+0x2e8>)
 8018e82:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8018e84:	68bb      	ldr	r3, [r7, #8]
 8018e86:	7cda      	ldrb	r2, [r3, #19]
 8018e88:	4b3b      	ldr	r3, [pc, #236]	@ (8018f78 <RadioSetTxGenericConfig+0x2e8>)
 8018e8a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 8018e8e:	68bb      	ldr	r3, [r7, #8]
 8018e90:	699b      	ldr	r3, [r3, #24]
 8018e92:	4a39      	ldr	r2, [pc, #228]	@ (8018f78 <RadioSetTxGenericConfig+0x2e8>)
 8018e94:	6413      	str	r3, [r2, #64]	@ 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8018e96:	4b38      	ldr	r3, [pc, #224]	@ (8018f78 <RadioSetTxGenericConfig+0x2e8>)
 8018e98:	2200      	movs	r2, #0
 8018e9a:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 8018e9c:	68bb      	ldr	r3, [r7, #8]
 8018e9e:	685b      	ldr	r3, [r3, #4]
 8018ea0:	b29b      	uxth	r3, r3
 8018ea2:	00db      	lsls	r3, r3, #3
 8018ea4:	b29a      	uxth	r2, r3
 8018ea6:	4b34      	ldr	r3, [pc, #208]	@ (8018f78 <RadioSetTxGenericConfig+0x2e8>)
 8018ea8:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8018eaa:	4b33      	ldr	r3, [pc, #204]	@ (8018f78 <RadioSetTxGenericConfig+0x2e8>)
 8018eac:	2204      	movs	r2, #4
 8018eae:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8018eb0:	68bb      	ldr	r3, [r7, #8]
 8018eb2:	7c9b      	ldrb	r3, [r3, #18]
 8018eb4:	00db      	lsls	r3, r3, #3
 8018eb6:	b2da      	uxtb	r2, r3
 8018eb8:	4b2f      	ldr	r3, [pc, #188]	@ (8018f78 <RadioSetTxGenericConfig+0x2e8>)
 8018eba:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8018ebc:	4b2e      	ldr	r3, [pc, #184]	@ (8018f78 <RadioSetTxGenericConfig+0x2e8>)
 8018ebe:	2200      	movs	r2, #0
 8018ec0:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8018ec2:	68bb      	ldr	r3, [r7, #8]
 8018ec4:	7d9b      	ldrb	r3, [r3, #22]
 8018ec6:	2b02      	cmp	r3, #2
 8018ec8:	d003      	beq.n	8018ed2 <RadioSetTxGenericConfig+0x242>
 8018eca:	68bb      	ldr	r3, [r7, #8]
 8018ecc:	7d1b      	ldrb	r3, [r3, #20]
 8018ece:	2b02      	cmp	r3, #2
 8018ed0:	d12a      	bne.n	8018f28 <RadioSetTxGenericConfig+0x298>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8018ed2:	68bb      	ldr	r3, [r7, #8]
 8018ed4:	7d5b      	ldrb	r3, [r3, #21]
 8018ed6:	2bf1      	cmp	r3, #241	@ 0xf1
 8018ed8:	d00a      	beq.n	8018ef0 <RadioSetTxGenericConfig+0x260>
 8018eda:	68bb      	ldr	r3, [r7, #8]
 8018edc:	7d5b      	ldrb	r3, [r3, #21]
 8018ede:	2bf2      	cmp	r3, #242	@ 0xf2
 8018ee0:	d006      	beq.n	8018ef0 <RadioSetTxGenericConfig+0x260>
 8018ee2:	68bb      	ldr	r3, [r7, #8]
 8018ee4:	7d5b      	ldrb	r3, [r3, #21]
 8018ee6:	2b01      	cmp	r3, #1
 8018ee8:	d002      	beq.n	8018ef0 <RadioSetTxGenericConfig+0x260>
            {
                return -1;
 8018eea:	f04f 33ff 	mov.w	r3, #4294967295
 8018eee:	e0fd      	b.n	80190ec <RadioSetTxGenericConfig+0x45c>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 8018ef0:	2301      	movs	r3, #1
 8018ef2:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 8018ef4:	68bb      	ldr	r3, [r7, #8]
 8018ef6:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8018ef8:	4b20      	ldr	r3, [pc, #128]	@ (8018f7c <RadioSetTxGenericConfig+0x2ec>)
 8018efa:	6819      	ldr	r1, [r3, #0]
 8018efc:	f107 0314 	add.w	r3, r7, #20
 8018f00:	4a1f      	ldr	r2, [pc, #124]	@ (8018f80 <RadioSetTxGenericConfig+0x2f0>)
 8018f02:	4618      	mov	r0, r3
 8018f04:	f001 fad4 	bl	801a4b0 <RFW_Init>
 8018f08:	4603      	mov	r3, r0
 8018f0a:	2b00      	cmp	r3, #0
 8018f0c:	d002      	beq.n	8018f14 <RadioSetTxGenericConfig+0x284>
            {
              return -1;
 8018f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8018f12:	e0eb      	b.n	80190ec <RadioSetTxGenericConfig+0x45c>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8018f14:	4b18      	ldr	r3, [pc, #96]	@ (8018f78 <RadioSetTxGenericConfig+0x2e8>)
 8018f16:	2200      	movs	r2, #0
 8018f18:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 8018f1a:	4b17      	ldr	r3, [pc, #92]	@ (8018f78 <RadioSetTxGenericConfig+0x2e8>)
 8018f1c:	2201      	movs	r2, #1
 8018f1e:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8018f20:	4b15      	ldr	r3, [pc, #84]	@ (8018f78 <RadioSetTxGenericConfig+0x2e8>)
 8018f22:	2200      	movs	r2, #0
 8018f24:	755a      	strb	r2, [r3, #21]
        {
 8018f26:	e00b      	b.n	8018f40 <RadioSetTxGenericConfig+0x2b0>
        }
        else
        {
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8018f28:	68bb      	ldr	r3, [r7, #8]
 8018f2a:	7d5a      	ldrb	r2, [r3, #21]
 8018f2c:	4b12      	ldr	r3, [pc, #72]	@ (8018f78 <RadioSetTxGenericConfig+0x2e8>)
 8018f2e:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8018f30:	68bb      	ldr	r3, [r7, #8]
 8018f32:	7d9a      	ldrb	r2, [r3, #22]
 8018f34:	4b10      	ldr	r3, [pc, #64]	@ (8018f78 <RadioSetTxGenericConfig+0x2e8>)
 8018f36:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 8018f38:	68bb      	ldr	r3, [r7, #8]
 8018f3a:	7d1a      	ldrb	r2, [r3, #20]
 8018f3c:	4b0e      	ldr	r3, [pc, #56]	@ (8018f78 <RadioSetTxGenericConfig+0x2e8>)
 8018f3e:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8018f40:	f7ff f801 	bl	8017f46 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8018f44:	2000      	movs	r0, #0
 8018f46:	f7fe f9ab 	bl	80172a0 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018f4a:	480e      	ldr	r0, [pc, #56]	@ (8018f84 <RadioSetTxGenericConfig+0x2f4>)
 8018f4c:	f000 fdd2 	bl	8019af4 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018f50:	480d      	ldr	r0, [pc, #52]	@ (8018f88 <RadioSetTxGenericConfig+0x2f8>)
 8018f52:	f000 fe9d 	bl	8019c90 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8018f56:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8018f5a:	4618      	mov	r0, r3
 8018f5c:	f000 f961 	bl	8019222 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8018f60:	68bb      	ldr	r3, [r7, #8]
 8018f62:	8a1b      	ldrh	r3, [r3, #16]
 8018f64:	4618      	mov	r0, r3
 8018f66:	f000 f9ab 	bl	80192c0 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 8018f6a:	68bb      	ldr	r3, [r7, #8]
 8018f6c:	899b      	ldrh	r3, [r3, #12]
 8018f6e:	4618      	mov	r0, r3
 8018f70:	f000 f986 	bl	8019280 <SUBGRF_SetCrcPolynomial>
        break;
 8018f74:	e0a6      	b.n	80190c4 <RadioSetTxGenericConfig+0x434>
 8018f76:	bf00      	nop
 8018f78:	20001cd8 	.word	0x20001cd8
 8018f7c:	20001cd4 	.word	0x20001cd4
 8018f80:	20001d34 	.word	0x20001d34
 8018f84:	20001d10 	.word	0x20001d10
 8018f88:	20001ce6 	.word	0x20001ce6
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8018f8c:	4b59      	ldr	r3, [pc, #356]	@ (80190f4 <RadioSetTxGenericConfig+0x464>)
 8018f8e:	2201      	movs	r2, #1
 8018f90:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8018f94:	68bb      	ldr	r3, [r7, #8]
 8018f96:	781a      	ldrb	r2, [r3, #0]
 8018f98:	4b56      	ldr	r3, [pc, #344]	@ (80190f4 <RadioSetTxGenericConfig+0x464>)
 8018f9a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8018f9e:	68bb      	ldr	r3, [r7, #8]
 8018fa0:	785a      	ldrb	r2, [r3, #1]
 8018fa2:	4b54      	ldr	r3, [pc, #336]	@ (80190f4 <RadioSetTxGenericConfig+0x464>)
 8018fa4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8018fa8:	68bb      	ldr	r3, [r7, #8]
 8018faa:	789a      	ldrb	r2, [r3, #2]
 8018fac:	4b51      	ldr	r3, [pc, #324]	@ (80190f4 <RadioSetTxGenericConfig+0x464>)
 8018fae:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 8018fb2:	68bb      	ldr	r3, [r7, #8]
 8018fb4:	78db      	ldrb	r3, [r3, #3]
 8018fb6:	2b02      	cmp	r3, #2
 8018fb8:	d010      	beq.n	8018fdc <RadioSetTxGenericConfig+0x34c>
 8018fba:	2b02      	cmp	r3, #2
 8018fbc:	dc20      	bgt.n	8019000 <RadioSetTxGenericConfig+0x370>
 8018fbe:	2b00      	cmp	r3, #0
 8018fc0:	d002      	beq.n	8018fc8 <RadioSetTxGenericConfig+0x338>
 8018fc2:	2b01      	cmp	r3, #1
 8018fc4:	d005      	beq.n	8018fd2 <RadioSetTxGenericConfig+0x342>
            {
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
          default:
            break;
 8018fc6:	e01b      	b.n	8019000 <RadioSetTxGenericConfig+0x370>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8018fc8:	4b4a      	ldr	r3, [pc, #296]	@ (80190f4 <RadioSetTxGenericConfig+0x464>)
 8018fca:	2200      	movs	r2, #0
 8018fcc:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8018fd0:	e017      	b.n	8019002 <RadioSetTxGenericConfig+0x372>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8018fd2:	4b48      	ldr	r3, [pc, #288]	@ (80190f4 <RadioSetTxGenericConfig+0x464>)
 8018fd4:	2201      	movs	r2, #1
 8018fd6:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8018fda:	e012      	b.n	8019002 <RadioSetTxGenericConfig+0x372>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8018fdc:	68bb      	ldr	r3, [r7, #8]
 8018fde:	781b      	ldrb	r3, [r3, #0]
 8018fe0:	2b0b      	cmp	r3, #11
 8018fe2:	d003      	beq.n	8018fec <RadioSetTxGenericConfig+0x35c>
 8018fe4:	68bb      	ldr	r3, [r7, #8]
 8018fe6:	781b      	ldrb	r3, [r3, #0]
 8018fe8:	2b0c      	cmp	r3, #12
 8018fea:	d104      	bne.n	8018ff6 <RadioSetTxGenericConfig+0x366>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8018fec:	4b41      	ldr	r3, [pc, #260]	@ (80190f4 <RadioSetTxGenericConfig+0x464>)
 8018fee:	2201      	movs	r2, #1
 8018ff0:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8018ff4:	e005      	b.n	8019002 <RadioSetTxGenericConfig+0x372>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8018ff6:	4b3f      	ldr	r3, [pc, #252]	@ (80190f4 <RadioSetTxGenericConfig+0x464>)
 8018ff8:	2200      	movs	r2, #0
 8018ffa:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8018ffe:	e000      	b.n	8019002 <RadioSetTxGenericConfig+0x372>
            break;
 8019000:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8019002:	4b3c      	ldr	r3, [pc, #240]	@ (80190f4 <RadioSetTxGenericConfig+0x464>)
 8019004:	2201      	movs	r2, #1
 8019006:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8019008:	68bb      	ldr	r3, [r7, #8]
 801900a:	889a      	ldrh	r2, [r3, #4]
 801900c:	4b39      	ldr	r3, [pc, #228]	@ (80190f4 <RadioSetTxGenericConfig+0x464>)
 801900e:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8019010:	68bb      	ldr	r3, [r7, #8]
 8019012:	799a      	ldrb	r2, [r3, #6]
 8019014:	4b37      	ldr	r3, [pc, #220]	@ (80190f4 <RadioSetTxGenericConfig+0x464>)
 8019016:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8019018:	68bb      	ldr	r3, [r7, #8]
 801901a:	79da      	ldrb	r2, [r3, #7]
 801901c:	4b35      	ldr	r3, [pc, #212]	@ (80190f4 <RadioSetTxGenericConfig+0x464>)
 801901e:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8019022:	68bb      	ldr	r3, [r7, #8]
 8019024:	7a1a      	ldrb	r2, [r3, #8]
 8019026:	4b33      	ldr	r3, [pc, #204]	@ (80190f4 <RadioSetTxGenericConfig+0x464>)
 8019028:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        RadioStandby( );
 801902c:	f7fe ff8b 	bl	8017f46 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8019030:	2001      	movs	r0, #1
 8019032:	f7fe f935 	bl	80172a0 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019036:	4830      	ldr	r0, [pc, #192]	@ (80190f8 <RadioSetTxGenericConfig+0x468>)
 8019038:	f000 fd5c 	bl	8019af4 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801903c:	482f      	ldr	r0, [pc, #188]	@ (80190fc <RadioSetTxGenericConfig+0x46c>)
 801903e:	f000 fe27 	bl	8019c90 <SUBGRF_SetPacketParams>

        // WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 8019042:	4b2c      	ldr	r3, [pc, #176]	@ (80190f4 <RadioSetTxGenericConfig+0x464>)
 8019044:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8019048:	2b06      	cmp	r3, #6
 801904a:	d10d      	bne.n	8019068 <RadioSetTxGenericConfig+0x3d8>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 801904c:	f640 0089 	movw	r0, #2185	@ 0x889
 8019050:	f000 ff78 	bl	8019f44 <SUBGRF_ReadRegister>
 8019054:	4603      	mov	r3, r0
 8019056:	f023 0304 	bic.w	r3, r3, #4
 801905a:	b2db      	uxtb	r3, r3
 801905c:	4619      	mov	r1, r3
 801905e:	f640 0089 	movw	r0, #2185	@ 0x889
 8019062:	f000 ff5b 	bl	8019f1c <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        // WORKAROUND END
        break;
 8019066:	e02d      	b.n	80190c4 <RadioSetTxGenericConfig+0x434>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8019068:	f640 0089 	movw	r0, #2185	@ 0x889
 801906c:	f000 ff6a 	bl	8019f44 <SUBGRF_ReadRegister>
 8019070:	4603      	mov	r3, r0
 8019072:	f043 0304 	orr.w	r3, r3, #4
 8019076:	b2db      	uxtb	r3, r3
 8019078:	4619      	mov	r1, r3
 801907a:	f640 0089 	movw	r0, #2185	@ 0x889
 801907e:	f000 ff4d 	bl	8019f1c <SUBGRF_WriteRegister>
        break;
 8019082:	e01f      	b.n	80190c4 <RadioSetTxGenericConfig+0x434>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 8019084:	68bb      	ldr	r3, [r7, #8]
 8019086:	681b      	ldr	r3, [r3, #0]
 8019088:	2b00      	cmp	r3, #0
 801908a:	d004      	beq.n	8019096 <RadioSetTxGenericConfig+0x406>
 801908c:	68bb      	ldr	r3, [r7, #8]
 801908e:	681b      	ldr	r3, [r3, #0]
 8019090:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8019094:	d902      	bls.n	801909c <RadioSetTxGenericConfig+0x40c>
        {
            return -1;
 8019096:	f04f 33ff 	mov.w	r3, #4294967295
 801909a:	e027      	b.n	80190ec <RadioSetTxGenericConfig+0x45c>
        }
        RadioSetModem( MODEM_BPSK );
 801909c:	2003      	movs	r0, #3
 801909e:	f7fe f8ff 	bl	80172a0 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 80190a2:	4b14      	ldr	r3, [pc, #80]	@ (80190f4 <RadioSetTxGenericConfig+0x464>)
 80190a4:	2202      	movs	r2, #2
 80190a6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 80190aa:	68bb      	ldr	r3, [r7, #8]
 80190ac:	681b      	ldr	r3, [r3, #0]
 80190ae:	4a11      	ldr	r2, [pc, #68]	@ (80190f4 <RadioSetTxGenericConfig+0x464>)
 80190b0:	6493      	str	r3, [r2, #72]	@ 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 80190b2:	4b10      	ldr	r3, [pc, #64]	@ (80190f4 <RadioSetTxGenericConfig+0x464>)
 80190b4:	2216      	movs	r2, #22
 80190b6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80190ba:	480f      	ldr	r0, [pc, #60]	@ (80190f8 <RadioSetTxGenericConfig+0x468>)
 80190bc:	f000 fd1a 	bl	8019af4 <SUBGRF_SetModulationParams>
        break;
 80190c0:	e000      	b.n	80190c4 <RadioSetTxGenericConfig+0x434>
    default:
        break;
 80190c2:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 80190c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80190c8:	4618      	mov	r0, r3
 80190ca:	f001 f843 	bl	801a154 <SUBGRF_SetRfTxPower>
 80190ce:	4603      	mov	r3, r0
 80190d0:	461a      	mov	r2, r3
 80190d2:	4b08      	ldr	r3, [pc, #32]	@ (80190f4 <RadioSetTxGenericConfig+0x464>)
 80190d4:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 80190d8:	4b06      	ldr	r3, [pc, #24]	@ (80190f4 <RadioSetTxGenericConfig+0x464>)
 80190da:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80190de:	4618      	mov	r0, r3
 80190e0:	f001 fa07 	bl	801a4f2 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 80190e4:	4a03      	ldr	r2, [pc, #12]	@ (80190f4 <RadioSetTxGenericConfig+0x464>)
 80190e6:	687b      	ldr	r3, [r7, #4]
 80190e8:	6053      	str	r3, [r2, #4]
    return 0;
 80190ea:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 80190ec:	4618      	mov	r0, r3
 80190ee:	3738      	adds	r7, #56	@ 0x38
 80190f0:	46bd      	mov	sp, r7
 80190f2:	bd80      	pop	{r7, pc}
 80190f4:	20001cd8 	.word	0x20001cd8
 80190f8:	20001d10 	.word	0x20001d10
 80190fc:	20001ce6 	.word	0x20001ce6

08019100 <SUBGRF_Init>:
static void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size );

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8019100:	b580      	push	{r7, lr}
 8019102:	b084      	sub	sp, #16
 8019104:	af00      	add	r7, sp, #0
 8019106:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 8019108:	687b      	ldr	r3, [r7, #4]
 801910a:	2b00      	cmp	r3, #0
 801910c:	d002      	beq.n	8019114 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 801910e:	4a1a      	ldr	r2, [pc, #104]	@ (8019178 <SUBGRF_Init+0x78>)
 8019110:	687b      	ldr	r3, [r7, #4]
 8019112:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 8019114:	f7e8 fe4a 	bl	8001dac <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8019118:	2002      	movs	r0, #2
 801911a:	f001 f8e7 	bl	801a2ec <Radio_SMPS_Set>

    ImageCalibrated = false;
 801911e:	4b17      	ldr	r3, [pc, #92]	@ (801917c <SUBGRF_Init+0x7c>)
 8019120:	2200      	movs	r2, #0
 8019122:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 8019124:	2000      	movs	r0, #0
 8019126:	f000 f979 	bl	801941c <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 801912a:	f7f1 fd8f 	bl	800ac4c <RBI_IsTCXO>
 801912e:	4603      	mov	r3, r0
 8019130:	2b01      	cmp	r3, #1
 8019132:	d10e      	bne.n	8019152 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8019134:	2140      	movs	r1, #64	@ 0x40
 8019136:	2001      	movs	r0, #1
 8019138:	f000 fb80 	bl	801983c <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 801913c:	2100      	movs	r1, #0
 801913e:	f640 1011 	movw	r0, #2321	@ 0x911
 8019142:	f000 feeb 	bl	8019f1c <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 8019146:	237f      	movs	r3, #127	@ 0x7f
 8019148:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 801914a:	7b38      	ldrb	r0, [r7, #12]
 801914c:	f000 fa87 	bl	801965e <SUBGRF_Calibrate>
 8019150:	e009      	b.n	8019166 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8019152:	2120      	movs	r1, #32
 8019154:	f640 1011 	movw	r0, #2321	@ 0x911
 8019158:	f000 fee0 	bl	8019f1c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801915c:	2120      	movs	r1, #32
 801915e:	f640 1012 	movw	r0, #2322	@ 0x912
 8019162:	f000 fedb 	bl	8019f1c <SUBGRF_WriteRegister>
    }
    /* Init RF Switch */
    RBI_Init();
 8019166:	f7f1 fd55 	bl	800ac14 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 801916a:	4b05      	ldr	r3, [pc, #20]	@ (8019180 <SUBGRF_Init+0x80>)
 801916c:	2201      	movs	r2, #1
 801916e:	701a      	strb	r2, [r3, #0]
}
 8019170:	bf00      	nop
 8019172:	3710      	adds	r7, #16
 8019174:	46bd      	mov	sp, r7
 8019176:	bd80      	pop	{r7, pc}
 8019178:	20001d70 	.word	0x20001d70
 801917c:	20001d6c 	.word	0x20001d6c
 8019180:	20001d64 	.word	0x20001d64

08019184 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 8019184:	b480      	push	{r7}
 8019186:	af00      	add	r7, sp, #0
    return OperatingMode;
 8019188:	4b02      	ldr	r3, [pc, #8]	@ (8019194 <SUBGRF_GetOperatingMode+0x10>)
 801918a:	781b      	ldrb	r3, [r3, #0]
}
 801918c:	4618      	mov	r0, r3
 801918e:	46bd      	mov	sp, r7
 8019190:	bc80      	pop	{r7}
 8019192:	4770      	bx	lr
 8019194:	20001d64 	.word	0x20001d64

08019198 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8019198:	b580      	push	{r7, lr}
 801919a:	b082      	sub	sp, #8
 801919c:	af00      	add	r7, sp, #0
 801919e:	6078      	str	r0, [r7, #4]
 80191a0:	460b      	mov	r3, r1
 80191a2:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 80191a4:	78fb      	ldrb	r3, [r7, #3]
 80191a6:	461a      	mov	r2, r3
 80191a8:	6879      	ldr	r1, [r7, #4]
 80191aa:	2000      	movs	r0, #0
 80191ac:	f000 ff22 	bl	8019ff4 <SUBGRF_WriteBuffer>
}
 80191b0:	bf00      	nop
 80191b2:	3708      	adds	r7, #8
 80191b4:	46bd      	mov	sp, r7
 80191b6:	bd80      	pop	{r7, pc}

080191b8 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 80191b8:	b580      	push	{r7, lr}
 80191ba:	b086      	sub	sp, #24
 80191bc:	af00      	add	r7, sp, #0
 80191be:	60f8      	str	r0, [r7, #12]
 80191c0:	60b9      	str	r1, [r7, #8]
 80191c2:	4613      	mov	r3, r2
 80191c4:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 80191c6:	2300      	movs	r3, #0
 80191c8:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 80191ca:	f107 0317 	add.w	r3, r7, #23
 80191ce:	4619      	mov	r1, r3
 80191d0:	68b8      	ldr	r0, [r7, #8]
 80191d2:	f000 fe25 	bl	8019e20 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 80191d6:	68bb      	ldr	r3, [r7, #8]
 80191d8:	781b      	ldrb	r3, [r3, #0]
 80191da:	79fa      	ldrb	r2, [r7, #7]
 80191dc:	429a      	cmp	r2, r3
 80191de:	d201      	bcs.n	80191e4 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 80191e0:	2301      	movs	r3, #1
 80191e2:	e007      	b.n	80191f4 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 80191e4:	7df8      	ldrb	r0, [r7, #23]
 80191e6:	68bb      	ldr	r3, [r7, #8]
 80191e8:	781b      	ldrb	r3, [r3, #0]
 80191ea:	461a      	mov	r2, r3
 80191ec:	68f9      	ldr	r1, [r7, #12]
 80191ee:	f000 ff23 	bl	801a038 <SUBGRF_ReadBuffer>

    return 0;
 80191f2:	2300      	movs	r3, #0
}
 80191f4:	4618      	mov	r0, r3
 80191f6:	3718      	adds	r7, #24
 80191f8:	46bd      	mov	sp, r7
 80191fa:	bd80      	pop	{r7, pc}

080191fc <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 80191fc:	b580      	push	{r7, lr}
 80191fe:	b084      	sub	sp, #16
 8019200:	af00      	add	r7, sp, #0
 8019202:	60f8      	str	r0, [r7, #12]
 8019204:	460b      	mov	r3, r1
 8019206:	607a      	str	r2, [r7, #4]
 8019208:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 801920a:	7afb      	ldrb	r3, [r7, #11]
 801920c:	4619      	mov	r1, r3
 801920e:	68f8      	ldr	r0, [r7, #12]
 8019210:	f7ff ffc2 	bl	8019198 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8019214:	6878      	ldr	r0, [r7, #4]
 8019216:	f000 f91d 	bl	8019454 <SUBGRF_SetTx>
}
 801921a:	bf00      	nop
 801921c:	3710      	adds	r7, #16
 801921e:	46bd      	mov	sp, r7
 8019220:	bd80      	pop	{r7, pc}

08019222 <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 8019222:	b580      	push	{r7, lr}
 8019224:	b082      	sub	sp, #8
 8019226:	af00      	add	r7, sp, #0
 8019228:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 801922a:	2208      	movs	r2, #8
 801922c:	6879      	ldr	r1, [r7, #4]
 801922e:	f44f 60d8 	mov.w	r0, #1728	@ 0x6c0
 8019232:	f000 fe9b 	bl	8019f6c <SUBGRF_WriteRegisters>
    return 0;
 8019236:	2300      	movs	r3, #0
}
 8019238:	4618      	mov	r0, r3
 801923a:	3708      	adds	r7, #8
 801923c:	46bd      	mov	sp, r7
 801923e:	bd80      	pop	{r7, pc}

08019240 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 8019240:	b580      	push	{r7, lr}
 8019242:	b084      	sub	sp, #16
 8019244:	af00      	add	r7, sp, #0
 8019246:	4603      	mov	r3, r0
 8019248:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 801924a:	88fb      	ldrh	r3, [r7, #6]
 801924c:	0a1b      	lsrs	r3, r3, #8
 801924e:	b29b      	uxth	r3, r3
 8019250:	b2db      	uxtb	r3, r3
 8019252:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8019254:	88fb      	ldrh	r3, [r7, #6]
 8019256:	b2db      	uxtb	r3, r3
 8019258:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801925a:	f000 fb73 	bl	8019944 <SUBGRF_GetPacketType>
 801925e:	4603      	mov	r3, r0
 8019260:	2b00      	cmp	r3, #0
 8019262:	d108      	bne.n	8019276 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8019264:	f107 030c 	add.w	r3, r7, #12
 8019268:	2202      	movs	r2, #2
 801926a:	4619      	mov	r1, r3
 801926c:	f240 60bc 	movw	r0, #1724	@ 0x6bc
 8019270:	f000 fe7c 	bl	8019f6c <SUBGRF_WriteRegisters>
            break;
 8019274:	e000      	b.n	8019278 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 8019276:	bf00      	nop
    }
}
 8019278:	bf00      	nop
 801927a:	3710      	adds	r7, #16
 801927c:	46bd      	mov	sp, r7
 801927e:	bd80      	pop	{r7, pc}

08019280 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 8019280:	b580      	push	{r7, lr}
 8019282:	b084      	sub	sp, #16
 8019284:	af00      	add	r7, sp, #0
 8019286:	4603      	mov	r3, r0
 8019288:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 801928a:	88fb      	ldrh	r3, [r7, #6]
 801928c:	0a1b      	lsrs	r3, r3, #8
 801928e:	b29b      	uxth	r3, r3
 8019290:	b2db      	uxtb	r3, r3
 8019292:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8019294:	88fb      	ldrh	r3, [r7, #6]
 8019296:	b2db      	uxtb	r3, r3
 8019298:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801929a:	f000 fb53 	bl	8019944 <SUBGRF_GetPacketType>
 801929e:	4603      	mov	r3, r0
 80192a0:	2b00      	cmp	r3, #0
 80192a2:	d108      	bne.n	80192b6 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 80192a4:	f107 030c 	add.w	r3, r7, #12
 80192a8:	2202      	movs	r2, #2
 80192aa:	4619      	mov	r1, r3
 80192ac:	f240 60be 	movw	r0, #1726	@ 0x6be
 80192b0:	f000 fe5c 	bl	8019f6c <SUBGRF_WriteRegisters>
            break;
 80192b4:	e000      	b.n	80192b8 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 80192b6:	bf00      	nop
    }
}
 80192b8:	bf00      	nop
 80192ba:	3710      	adds	r7, #16
 80192bc:	46bd      	mov	sp, r7
 80192be:	bd80      	pop	{r7, pc}

080192c0 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 80192c0:	b580      	push	{r7, lr}
 80192c2:	b084      	sub	sp, #16
 80192c4:	af00      	add	r7, sp, #0
 80192c6:	4603      	mov	r3, r0
 80192c8:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 80192ca:	2300      	movs	r3, #0
 80192cc:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 80192ce:	f000 fb39 	bl	8019944 <SUBGRF_GetPacketType>
 80192d2:	4603      	mov	r3, r0
 80192d4:	2b00      	cmp	r3, #0
 80192d6:	d121      	bne.n	801931c <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 80192d8:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 80192dc:	f000 fe32 	bl	8019f44 <SUBGRF_ReadRegister>
 80192e0:	4603      	mov	r3, r0
 80192e2:	f023 0301 	bic.w	r3, r3, #1
 80192e6:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 80192e8:	88fb      	ldrh	r3, [r7, #6]
 80192ea:	0a1b      	lsrs	r3, r3, #8
 80192ec:	b29b      	uxth	r3, r3
 80192ee:	b25b      	sxtb	r3, r3
 80192f0:	f003 0301 	and.w	r3, r3, #1
 80192f4:	b25a      	sxtb	r2, r3
 80192f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80192fa:	4313      	orrs	r3, r2
 80192fc:	b25b      	sxtb	r3, r3
 80192fe:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 8019300:	7bfb      	ldrb	r3, [r7, #15]
 8019302:	4619      	mov	r1, r3
 8019304:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 8019308:	f000 fe08 	bl	8019f1c <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 801930c:	88fb      	ldrh	r3, [r7, #6]
 801930e:	b2db      	uxtb	r3, r3
 8019310:	4619      	mov	r1, r3
 8019312:	f240 60b9 	movw	r0, #1721	@ 0x6b9
 8019316:	f000 fe01 	bl	8019f1c <SUBGRF_WriteRegister>
            break;
 801931a:	e000      	b.n	801931e <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 801931c:	bf00      	nop
    }
}
 801931e:	bf00      	nop
 8019320:	3710      	adds	r7, #16
 8019322:	46bd      	mov	sp, r7
 8019324:	bd80      	pop	{r7, pc}

08019326 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 8019326:	b580      	push	{r7, lr}
 8019328:	b082      	sub	sp, #8
 801932a:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 801932c:	2300      	movs	r3, #0
 801932e:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 8019330:	2300      	movs	r3, #0
 8019332:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 8019334:	2300      	movs	r3, #0
 8019336:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8019338:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 801933c:	f000 fe02 	bl	8019f44 <SUBGRF_ReadRegister>
 8019340:	4603      	mov	r3, r0
 8019342:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8019344:	79fb      	ldrb	r3, [r7, #7]
 8019346:	f023 0301 	bic.w	r3, r3, #1
 801934a:	b2db      	uxtb	r3, r3
 801934c:	4619      	mov	r1, r3
 801934e:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 8019352:	f000 fde3 	bl	8019f1c <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 8019356:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 801935a:	f000 fdf3 	bl	8019f44 <SUBGRF_ReadRegister>
 801935e:	4603      	mov	r3, r0
 8019360:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8019362:	79bb      	ldrb	r3, [r7, #6]
 8019364:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8019368:	b2db      	uxtb	r3, r3
 801936a:	4619      	mov	r1, r3
 801936c:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8019370:	f000 fdd4 	bl	8019f1c <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8019374:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8019378:	f000 f88c 	bl	8019494 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 801937c:	463b      	mov	r3, r7
 801937e:	2204      	movs	r2, #4
 8019380:	4619      	mov	r1, r3
 8019382:	f640 0019 	movw	r0, #2073	@ 0x819
 8019386:	f000 fe13 	bl	8019fb0 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 801938a:	2000      	movs	r0, #0
 801938c:	f000 f846 	bl	801941c <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8019390:	79fb      	ldrb	r3, [r7, #7]
 8019392:	4619      	mov	r1, r3
 8019394:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 8019398:	f000 fdc0 	bl	8019f1c <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 801939c:	79bb      	ldrb	r3, [r7, #6]
 801939e:	4619      	mov	r1, r3
 80193a0:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 80193a4:	f000 fdba 	bl	8019f1c <SUBGRF_WriteRegister>

    return number;
 80193a8:	683b      	ldr	r3, [r7, #0]
}
 80193aa:	4618      	mov	r0, r3
 80193ac:	3708      	adds	r7, #8
 80193ae:	46bd      	mov	sp, r7
 80193b0:	bd80      	pop	{r7, pc}
	...

080193b4 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 80193b4:	b580      	push	{r7, lr}
 80193b6:	b084      	sub	sp, #16
 80193b8:	af00      	add	r7, sp, #0
 80193ba:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 80193bc:	2000      	movs	r0, #0
 80193be:	f7f1 fc30 	bl	800ac22 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 80193c2:	2002      	movs	r0, #2
 80193c4:	f000 ff92 	bl	801a2ec <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 80193c8:	793b      	ldrb	r3, [r7, #4]
 80193ca:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80193ce:	b2db      	uxtb	r3, r3
 80193d0:	b25b      	sxtb	r3, r3
 80193d2:	009b      	lsls	r3, r3, #2
 80193d4:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 80193d6:	793b      	ldrb	r3, [r7, #4]
 80193d8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80193dc:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 80193de:	b25b      	sxtb	r3, r3
 80193e0:	005b      	lsls	r3, r3, #1
 80193e2:	b25b      	sxtb	r3, r3
 80193e4:	4313      	orrs	r3, r2
 80193e6:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 80193e8:	793b      	ldrb	r3, [r7, #4]
 80193ea:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80193ee:	b2db      	uxtb	r3, r3
 80193f0:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 80193f2:	4313      	orrs	r3, r2
 80193f4:	b25b      	sxtb	r3, r3
 80193f6:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 80193f8:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 80193fa:	f107 030f 	add.w	r3, r7, #15
 80193fe:	2201      	movs	r2, #1
 8019400:	4619      	mov	r1, r3
 8019402:	2084      	movs	r0, #132	@ 0x84
 8019404:	f000 fe3a 	bl	801a07c <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 8019408:	4b03      	ldr	r3, [pc, #12]	@ (8019418 <SUBGRF_SetSleep+0x64>)
 801940a:	2200      	movs	r2, #0
 801940c:	701a      	strb	r2, [r3, #0]
}
 801940e:	bf00      	nop
 8019410:	3710      	adds	r7, #16
 8019412:	46bd      	mov	sp, r7
 8019414:	bd80      	pop	{r7, pc}
 8019416:	bf00      	nop
 8019418:	20001d64 	.word	0x20001d64

0801941c <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 801941c:	b580      	push	{r7, lr}
 801941e:	b082      	sub	sp, #8
 8019420:	af00      	add	r7, sp, #0
 8019422:	4603      	mov	r3, r0
 8019424:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8019426:	1dfb      	adds	r3, r7, #7
 8019428:	2201      	movs	r2, #1
 801942a:	4619      	mov	r1, r3
 801942c:	2080      	movs	r0, #128	@ 0x80
 801942e:	f000 fe25 	bl	801a07c <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8019432:	79fb      	ldrb	r3, [r7, #7]
 8019434:	2b00      	cmp	r3, #0
 8019436:	d103      	bne.n	8019440 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 8019438:	4b05      	ldr	r3, [pc, #20]	@ (8019450 <SUBGRF_SetStandby+0x34>)
 801943a:	2201      	movs	r2, #1
 801943c:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 801943e:	e002      	b.n	8019446 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 8019440:	4b03      	ldr	r3, [pc, #12]	@ (8019450 <SUBGRF_SetStandby+0x34>)
 8019442:	2202      	movs	r2, #2
 8019444:	701a      	strb	r2, [r3, #0]
}
 8019446:	bf00      	nop
 8019448:	3708      	adds	r7, #8
 801944a:	46bd      	mov	sp, r7
 801944c:	bd80      	pop	{r7, pc}
 801944e:	bf00      	nop
 8019450:	20001d64 	.word	0x20001d64

08019454 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 8019454:	b580      	push	{r7, lr}
 8019456:	b084      	sub	sp, #16
 8019458:	af00      	add	r7, sp, #0
 801945a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 801945c:	4b0c      	ldr	r3, [pc, #48]	@ (8019490 <SUBGRF_SetTx+0x3c>)
 801945e:	2204      	movs	r2, #4
 8019460:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8019462:	687b      	ldr	r3, [r7, #4]
 8019464:	0c1b      	lsrs	r3, r3, #16
 8019466:	b2db      	uxtb	r3, r3
 8019468:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801946a:	687b      	ldr	r3, [r7, #4]
 801946c:	0a1b      	lsrs	r3, r3, #8
 801946e:	b2db      	uxtb	r3, r3
 8019470:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8019472:	687b      	ldr	r3, [r7, #4]
 8019474:	b2db      	uxtb	r3, r3
 8019476:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8019478:	f107 030c 	add.w	r3, r7, #12
 801947c:	2203      	movs	r2, #3
 801947e:	4619      	mov	r1, r3
 8019480:	2083      	movs	r0, #131	@ 0x83
 8019482:	f000 fdfb 	bl	801a07c <SUBGRF_WriteCommand>
}
 8019486:	bf00      	nop
 8019488:	3710      	adds	r7, #16
 801948a:	46bd      	mov	sp, r7
 801948c:	bd80      	pop	{r7, pc}
 801948e:	bf00      	nop
 8019490:	20001d64 	.word	0x20001d64

08019494 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 8019494:	b580      	push	{r7, lr}
 8019496:	b084      	sub	sp, #16
 8019498:	af00      	add	r7, sp, #0
 801949a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801949c:	4b0c      	ldr	r3, [pc, #48]	@ (80194d0 <SUBGRF_SetRx+0x3c>)
 801949e:	2205      	movs	r2, #5
 80194a0:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80194a2:	687b      	ldr	r3, [r7, #4]
 80194a4:	0c1b      	lsrs	r3, r3, #16
 80194a6:	b2db      	uxtb	r3, r3
 80194a8:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80194aa:	687b      	ldr	r3, [r7, #4]
 80194ac:	0a1b      	lsrs	r3, r3, #8
 80194ae:	b2db      	uxtb	r3, r3
 80194b0:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80194b2:	687b      	ldr	r3, [r7, #4]
 80194b4:	b2db      	uxtb	r3, r3
 80194b6:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 80194b8:	f107 030c 	add.w	r3, r7, #12
 80194bc:	2203      	movs	r2, #3
 80194be:	4619      	mov	r1, r3
 80194c0:	2082      	movs	r0, #130	@ 0x82
 80194c2:	f000 fddb 	bl	801a07c <SUBGRF_WriteCommand>
}
 80194c6:	bf00      	nop
 80194c8:	3710      	adds	r7, #16
 80194ca:	46bd      	mov	sp, r7
 80194cc:	bd80      	pop	{r7, pc}
 80194ce:	bf00      	nop
 80194d0:	20001d64 	.word	0x20001d64

080194d4 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 80194d4:	b580      	push	{r7, lr}
 80194d6:	b084      	sub	sp, #16
 80194d8:	af00      	add	r7, sp, #0
 80194da:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 80194dc:	4b0e      	ldr	r3, [pc, #56]	@ (8019518 <SUBGRF_SetRxBoosted+0x44>)
 80194de:	2205      	movs	r2, #5
 80194e0:	701a      	strb	r2, [r3, #0]

    /* ST_WORKAROUND_BEGIN: Sigfox patch > 0x96 replaced by 0x97 */
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 80194e2:	2197      	movs	r1, #151	@ 0x97
 80194e4:	f640 00ac 	movw	r0, #2220	@ 0x8ac
 80194e8:	f000 fd18 	bl	8019f1c <SUBGRF_WriteRegister>
    /* ST_WORKAROUND_END */

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80194ec:	687b      	ldr	r3, [r7, #4]
 80194ee:	0c1b      	lsrs	r3, r3, #16
 80194f0:	b2db      	uxtb	r3, r3
 80194f2:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80194f4:	687b      	ldr	r3, [r7, #4]
 80194f6:	0a1b      	lsrs	r3, r3, #8
 80194f8:	b2db      	uxtb	r3, r3
 80194fa:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80194fc:	687b      	ldr	r3, [r7, #4]
 80194fe:	b2db      	uxtb	r3, r3
 8019500:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8019502:	f107 030c 	add.w	r3, r7, #12
 8019506:	2203      	movs	r2, #3
 8019508:	4619      	mov	r1, r3
 801950a:	2082      	movs	r0, #130	@ 0x82
 801950c:	f000 fdb6 	bl	801a07c <SUBGRF_WriteCommand>
}
 8019510:	bf00      	nop
 8019512:	3710      	adds	r7, #16
 8019514:	46bd      	mov	sp, r7
 8019516:	bd80      	pop	{r7, pc}
 8019518:	20001d64 	.word	0x20001d64

0801951c <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801951c:	b580      	push	{r7, lr}
 801951e:	b084      	sub	sp, #16
 8019520:	af00      	add	r7, sp, #0
 8019522:	6078      	str	r0, [r7, #4]
 8019524:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 8019526:	687b      	ldr	r3, [r7, #4]
 8019528:	0c1b      	lsrs	r3, r3, #16
 801952a:	b2db      	uxtb	r3, r3
 801952c:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 801952e:	687b      	ldr	r3, [r7, #4]
 8019530:	0a1b      	lsrs	r3, r3, #8
 8019532:	b2db      	uxtb	r3, r3
 8019534:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 8019536:	687b      	ldr	r3, [r7, #4]
 8019538:	b2db      	uxtb	r3, r3
 801953a:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 801953c:	683b      	ldr	r3, [r7, #0]
 801953e:	0c1b      	lsrs	r3, r3, #16
 8019540:	b2db      	uxtb	r3, r3
 8019542:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8019544:	683b      	ldr	r3, [r7, #0]
 8019546:	0a1b      	lsrs	r3, r3, #8
 8019548:	b2db      	uxtb	r3, r3
 801954a:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 801954c:	683b      	ldr	r3, [r7, #0]
 801954e:	b2db      	uxtb	r3, r3
 8019550:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 8019552:	f107 0308 	add.w	r3, r7, #8
 8019556:	2206      	movs	r2, #6
 8019558:	4619      	mov	r1, r3
 801955a:	2094      	movs	r0, #148	@ 0x94
 801955c:	f000 fd8e 	bl	801a07c <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 8019560:	4b03      	ldr	r3, [pc, #12]	@ (8019570 <SUBGRF_SetRxDutyCycle+0x54>)
 8019562:	2206      	movs	r2, #6
 8019564:	701a      	strb	r2, [r3, #0]
}
 8019566:	bf00      	nop
 8019568:	3710      	adds	r7, #16
 801956a:	46bd      	mov	sp, r7
 801956c:	bd80      	pop	{r7, pc}
 801956e:	bf00      	nop
 8019570:	20001d64 	.word	0x20001d64

08019574 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 8019574:	b580      	push	{r7, lr}
 8019576:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 8019578:	2200      	movs	r2, #0
 801957a:	2100      	movs	r1, #0
 801957c:	20c5      	movs	r0, #197	@ 0xc5
 801957e:	f000 fd7d 	bl	801a07c <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 8019582:	4b02      	ldr	r3, [pc, #8]	@ (801958c <SUBGRF_SetCad+0x18>)
 8019584:	2207      	movs	r2, #7
 8019586:	701a      	strb	r2, [r3, #0]
}
 8019588:	bf00      	nop
 801958a:	bd80      	pop	{r7, pc}
 801958c:	20001d64 	.word	0x20001d64

08019590 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 8019590:	b580      	push	{r7, lr}
 8019592:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8019594:	2200      	movs	r2, #0
 8019596:	2100      	movs	r1, #0
 8019598:	20d1      	movs	r0, #209	@ 0xd1
 801959a:	f000 fd6f 	bl	801a07c <SUBGRF_WriteCommand>
}
 801959e:	bf00      	nop
 80195a0:	bd80      	pop	{r7, pc}

080195a2 <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 80195a2:	b580      	push	{r7, lr}
 80195a4:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 80195a6:	2200      	movs	r2, #0
 80195a8:	2100      	movs	r1, #0
 80195aa:	20d2      	movs	r0, #210	@ 0xd2
 80195ac:	f000 fd66 	bl	801a07c <SUBGRF_WriteCommand>
}
 80195b0:	bf00      	nop
 80195b2:	bd80      	pop	{r7, pc}

080195b4 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 80195b4:	b580      	push	{r7, lr}
 80195b6:	b082      	sub	sp, #8
 80195b8:	af00      	add	r7, sp, #0
 80195ba:	4603      	mov	r3, r0
 80195bc:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 80195be:	1dfb      	adds	r3, r7, #7
 80195c0:	2201      	movs	r2, #1
 80195c2:	4619      	mov	r1, r3
 80195c4:	209f      	movs	r0, #159	@ 0x9f
 80195c6:	f000 fd59 	bl	801a07c <SUBGRF_WriteCommand>
}
 80195ca:	bf00      	nop
 80195cc:	3708      	adds	r7, #8
 80195ce:	46bd      	mov	sp, r7
 80195d0:	bd80      	pop	{r7, pc}

080195d2 <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 80195d2:	b580      	push	{r7, lr}
 80195d4:	b084      	sub	sp, #16
 80195d6:	af00      	add	r7, sp, #0
 80195d8:	4603      	mov	r3, r0
 80195da:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 80195dc:	1dfb      	adds	r3, r7, #7
 80195de:	2201      	movs	r2, #1
 80195e0:	4619      	mov	r1, r3
 80195e2:	20a0      	movs	r0, #160	@ 0xa0
 80195e4:	f000 fd4a 	bl	801a07c <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 80195e8:	79fb      	ldrb	r3, [r7, #7]
 80195ea:	2b3f      	cmp	r3, #63	@ 0x3f
 80195ec:	d91c      	bls.n	8019628 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 80195ee:	79fb      	ldrb	r3, [r7, #7]
 80195f0:	085b      	lsrs	r3, r3, #1
 80195f2:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 80195f4:	2300      	movs	r3, #0
 80195f6:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 80195f8:	2300      	movs	r3, #0
 80195fa:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 80195fc:	e005      	b.n	801960a <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 80195fe:	7bfb      	ldrb	r3, [r7, #15]
 8019600:	089b      	lsrs	r3, r3, #2
 8019602:	73fb      	strb	r3, [r7, #15]
            exp++;
 8019604:	7bbb      	ldrb	r3, [r7, #14]
 8019606:	3301      	adds	r3, #1
 8019608:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 801960a:	7bfb      	ldrb	r3, [r7, #15]
 801960c:	2b1f      	cmp	r3, #31
 801960e:	d8f6      	bhi.n	80195fe <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 8019610:	7bfb      	ldrb	r3, [r7, #15]
 8019612:	00db      	lsls	r3, r3, #3
 8019614:	b2da      	uxtb	r2, r3
 8019616:	7bbb      	ldrb	r3, [r7, #14]
 8019618:	4413      	add	r3, r2
 801961a:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 801961c:	7b7b      	ldrb	r3, [r7, #13]
 801961e:	4619      	mov	r1, r3
 8019620:	f240 7006 	movw	r0, #1798	@ 0x706
 8019624:	f000 fc7a 	bl	8019f1c <SUBGRF_WriteRegister>
    }
}
 8019628:	bf00      	nop
 801962a:	3710      	adds	r7, #16
 801962c:	46bd      	mov	sp, r7
 801962e:	bd80      	pop	{r7, pc}

08019630 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 8019630:	b580      	push	{r7, lr}
 8019632:	b082      	sub	sp, #8
 8019634:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Get RegulatorMode value from RBI */
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 8019636:	f7f1 fb10 	bl	800ac5a <RBI_IsDCDC>
 801963a:	4603      	mov	r3, r0
 801963c:	2b01      	cmp	r3, #1
 801963e:	d102      	bne.n	8019646 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 8019640:	2301      	movs	r3, #1
 8019642:	71fb      	strb	r3, [r7, #7]
 8019644:	e001      	b.n	801964a <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 8019646:	2300      	movs	r3, #0
 8019648:	71fb      	strb	r3, [r7, #7]
    }
    /* ST_WORKAROUND_END */
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 801964a:	1dfb      	adds	r3, r7, #7
 801964c:	2201      	movs	r2, #1
 801964e:	4619      	mov	r1, r3
 8019650:	2096      	movs	r0, #150	@ 0x96
 8019652:	f000 fd13 	bl	801a07c <SUBGRF_WriteCommand>
}
 8019656:	bf00      	nop
 8019658:	3708      	adds	r7, #8
 801965a:	46bd      	mov	sp, r7
 801965c:	bd80      	pop	{r7, pc}

0801965e <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 801965e:	b580      	push	{r7, lr}
 8019660:	b084      	sub	sp, #16
 8019662:	af00      	add	r7, sp, #0
 8019664:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8019666:	793b      	ldrb	r3, [r7, #4]
 8019668:	f3c3 1380 	ubfx	r3, r3, #6, #1
 801966c:	b2db      	uxtb	r3, r3
 801966e:	b25b      	sxtb	r3, r3
 8019670:	019b      	lsls	r3, r3, #6
 8019672:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8019674:	793b      	ldrb	r3, [r7, #4]
 8019676:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801967a:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801967c:	b25b      	sxtb	r3, r3
 801967e:	015b      	lsls	r3, r3, #5
 8019680:	b25b      	sxtb	r3, r3
 8019682:	4313      	orrs	r3, r2
 8019684:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8019686:	793b      	ldrb	r3, [r7, #4]
 8019688:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801968c:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801968e:	b25b      	sxtb	r3, r3
 8019690:	011b      	lsls	r3, r3, #4
 8019692:	b25b      	sxtb	r3, r3
 8019694:	4313      	orrs	r3, r2
 8019696:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8019698:	793b      	ldrb	r3, [r7, #4]
 801969a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801969e:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 80196a0:	b25b      	sxtb	r3, r3
 80196a2:	00db      	lsls	r3, r3, #3
 80196a4:	b25b      	sxtb	r3, r3
 80196a6:	4313      	orrs	r3, r2
 80196a8:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 80196aa:	793b      	ldrb	r3, [r7, #4]
 80196ac:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80196b0:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 80196b2:	b25b      	sxtb	r3, r3
 80196b4:	009b      	lsls	r3, r3, #2
 80196b6:	b25b      	sxtb	r3, r3
 80196b8:	4313      	orrs	r3, r2
 80196ba:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 80196bc:	793b      	ldrb	r3, [r7, #4]
 80196be:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80196c2:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 80196c4:	b25b      	sxtb	r3, r3
 80196c6:	005b      	lsls	r3, r3, #1
 80196c8:	b25b      	sxtb	r3, r3
 80196ca:	4313      	orrs	r3, r2
 80196cc:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 80196ce:	793b      	ldrb	r3, [r7, #4]
 80196d0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80196d4:	b2db      	uxtb	r3, r3
 80196d6:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 80196d8:	4313      	orrs	r3, r2
 80196da:	b25b      	sxtb	r3, r3
 80196dc:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80196de:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 80196e0:	f107 030f 	add.w	r3, r7, #15
 80196e4:	2201      	movs	r2, #1
 80196e6:	4619      	mov	r1, r3
 80196e8:	2089      	movs	r0, #137	@ 0x89
 80196ea:	f000 fcc7 	bl	801a07c <SUBGRF_WriteCommand>
}
 80196ee:	bf00      	nop
 80196f0:	3710      	adds	r7, #16
 80196f2:	46bd      	mov	sp, r7
 80196f4:	bd80      	pop	{r7, pc}
	...

080196f8 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 80196f8:	b580      	push	{r7, lr}
 80196fa:	b084      	sub	sp, #16
 80196fc:	af00      	add	r7, sp, #0
 80196fe:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 8019700:	687b      	ldr	r3, [r7, #4]
 8019702:	4a1b      	ldr	r2, [pc, #108]	@ (8019770 <SUBGRF_CalibrateImage+0x78>)
 8019704:	4293      	cmp	r3, r2
 8019706:	d904      	bls.n	8019712 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 8019708:	23e1      	movs	r3, #225	@ 0xe1
 801970a:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 801970c:	23e9      	movs	r3, #233	@ 0xe9
 801970e:	737b      	strb	r3, [r7, #13]
 8019710:	e022      	b.n	8019758 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 850000000 )
 8019712:	687b      	ldr	r3, [r7, #4]
 8019714:	4a17      	ldr	r2, [pc, #92]	@ (8019774 <SUBGRF_CalibrateImage+0x7c>)
 8019716:	4293      	cmp	r3, r2
 8019718:	d904      	bls.n	8019724 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 801971a:	23d7      	movs	r3, #215	@ 0xd7
 801971c:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 801971e:	23db      	movs	r3, #219	@ 0xdb
 8019720:	737b      	strb	r3, [r7, #13]
 8019722:	e019      	b.n	8019758 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 770000000 )
 8019724:	687b      	ldr	r3, [r7, #4]
 8019726:	4a14      	ldr	r2, [pc, #80]	@ (8019778 <SUBGRF_CalibrateImage+0x80>)
 8019728:	4293      	cmp	r3, r2
 801972a:	d904      	bls.n	8019736 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 801972c:	23c1      	movs	r3, #193	@ 0xc1
 801972e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 8019730:	23c5      	movs	r3, #197	@ 0xc5
 8019732:	737b      	strb	r3, [r7, #13]
 8019734:	e010      	b.n	8019758 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 460000000 )
 8019736:	687b      	ldr	r3, [r7, #4]
 8019738:	4a10      	ldr	r2, [pc, #64]	@ (801977c <SUBGRF_CalibrateImage+0x84>)
 801973a:	4293      	cmp	r3, r2
 801973c:	d904      	bls.n	8019748 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 801973e:	2375      	movs	r3, #117	@ 0x75
 8019740:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 8019742:	2381      	movs	r3, #129	@ 0x81
 8019744:	737b      	strb	r3, [r7, #13]
 8019746:	e007      	b.n	8019758 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 425000000 )
 8019748:	687b      	ldr	r3, [r7, #4]
 801974a:	4a0d      	ldr	r2, [pc, #52]	@ (8019780 <SUBGRF_CalibrateImage+0x88>)
 801974c:	4293      	cmp	r3, r2
 801974e:	d903      	bls.n	8019758 <SUBGRF_CalibrateImage+0x60>
    {
        calFreq[0] = 0x6B;
 8019750:	236b      	movs	r3, #107	@ 0x6b
 8019752:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 8019754:	236f      	movs	r3, #111	@ 0x6f
 8019756:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8019758:	f107 030c 	add.w	r3, r7, #12
 801975c:	2202      	movs	r2, #2
 801975e:	4619      	mov	r1, r3
 8019760:	2098      	movs	r0, #152	@ 0x98
 8019762:	f000 fc8b 	bl	801a07c <SUBGRF_WriteCommand>
}
 8019766:	bf00      	nop
 8019768:	3710      	adds	r7, #16
 801976a:	46bd      	mov	sp, r7
 801976c:	bd80      	pop	{r7, pc}
 801976e:	bf00      	nop
 8019770:	35a4e900 	.word	0x35a4e900
 8019774:	32a9f880 	.word	0x32a9f880
 8019778:	2de54480 	.word	0x2de54480
 801977c:	1b6b0b00 	.word	0x1b6b0b00
 8019780:	1954fc40 	.word	0x1954fc40

08019784 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 8019784:	b590      	push	{r4, r7, lr}
 8019786:	b085      	sub	sp, #20
 8019788:	af00      	add	r7, sp, #0
 801978a:	4604      	mov	r4, r0
 801978c:	4608      	mov	r0, r1
 801978e:	4611      	mov	r1, r2
 8019790:	461a      	mov	r2, r3
 8019792:	4623      	mov	r3, r4
 8019794:	71fb      	strb	r3, [r7, #7]
 8019796:	4603      	mov	r3, r0
 8019798:	71bb      	strb	r3, [r7, #6]
 801979a:	460b      	mov	r3, r1
 801979c:	717b      	strb	r3, [r7, #5]
 801979e:	4613      	mov	r3, r2
 80197a0:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 80197a2:	79fb      	ldrb	r3, [r7, #7]
 80197a4:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 80197a6:	79bb      	ldrb	r3, [r7, #6]
 80197a8:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 80197aa:	797b      	ldrb	r3, [r7, #5]
 80197ac:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 80197ae:	793b      	ldrb	r3, [r7, #4]
 80197b0:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 80197b2:	f107 030c 	add.w	r3, r7, #12
 80197b6:	2204      	movs	r2, #4
 80197b8:	4619      	mov	r1, r3
 80197ba:	2095      	movs	r0, #149	@ 0x95
 80197bc:	f000 fc5e 	bl	801a07c <SUBGRF_WriteCommand>
}
 80197c0:	bf00      	nop
 80197c2:	3714      	adds	r7, #20
 80197c4:	46bd      	mov	sp, r7
 80197c6:	bd90      	pop	{r4, r7, pc}

080197c8 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 80197c8:	b590      	push	{r4, r7, lr}
 80197ca:	b085      	sub	sp, #20
 80197cc:	af00      	add	r7, sp, #0
 80197ce:	4604      	mov	r4, r0
 80197d0:	4608      	mov	r0, r1
 80197d2:	4611      	mov	r1, r2
 80197d4:	461a      	mov	r2, r3
 80197d6:	4623      	mov	r3, r4
 80197d8:	80fb      	strh	r3, [r7, #6]
 80197da:	4603      	mov	r3, r0
 80197dc:	80bb      	strh	r3, [r7, #4]
 80197de:	460b      	mov	r3, r1
 80197e0:	807b      	strh	r3, [r7, #2]
 80197e2:	4613      	mov	r3, r2
 80197e4:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 80197e6:	88fb      	ldrh	r3, [r7, #6]
 80197e8:	0a1b      	lsrs	r3, r3, #8
 80197ea:	b29b      	uxth	r3, r3
 80197ec:	b2db      	uxtb	r3, r3
 80197ee:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 80197f0:	88fb      	ldrh	r3, [r7, #6]
 80197f2:	b2db      	uxtb	r3, r3
 80197f4:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 80197f6:	88bb      	ldrh	r3, [r7, #4]
 80197f8:	0a1b      	lsrs	r3, r3, #8
 80197fa:	b29b      	uxth	r3, r3
 80197fc:	b2db      	uxtb	r3, r3
 80197fe:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8019800:	88bb      	ldrh	r3, [r7, #4]
 8019802:	b2db      	uxtb	r3, r3
 8019804:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8019806:	887b      	ldrh	r3, [r7, #2]
 8019808:	0a1b      	lsrs	r3, r3, #8
 801980a:	b29b      	uxth	r3, r3
 801980c:	b2db      	uxtb	r3, r3
 801980e:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8019810:	887b      	ldrh	r3, [r7, #2]
 8019812:	b2db      	uxtb	r3, r3
 8019814:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8019816:	883b      	ldrh	r3, [r7, #0]
 8019818:	0a1b      	lsrs	r3, r3, #8
 801981a:	b29b      	uxth	r3, r3
 801981c:	b2db      	uxtb	r3, r3
 801981e:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8019820:	883b      	ldrh	r3, [r7, #0]
 8019822:	b2db      	uxtb	r3, r3
 8019824:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8019826:	f107 0308 	add.w	r3, r7, #8
 801982a:	2208      	movs	r2, #8
 801982c:	4619      	mov	r1, r3
 801982e:	2008      	movs	r0, #8
 8019830:	f000 fc24 	bl	801a07c <SUBGRF_WriteCommand>
}
 8019834:	bf00      	nop
 8019836:	3714      	adds	r7, #20
 8019838:	46bd      	mov	sp, r7
 801983a:	bd90      	pop	{r4, r7, pc}

0801983c <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 801983c:	b580      	push	{r7, lr}
 801983e:	b084      	sub	sp, #16
 8019840:	af00      	add	r7, sp, #0
 8019842:	4603      	mov	r3, r0
 8019844:	6039      	str	r1, [r7, #0]
 8019846:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 8019848:	79fb      	ldrb	r3, [r7, #7]
 801984a:	f003 0307 	and.w	r3, r3, #7
 801984e:	b2db      	uxtb	r3, r3
 8019850:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8019852:	683b      	ldr	r3, [r7, #0]
 8019854:	0c1b      	lsrs	r3, r3, #16
 8019856:	b2db      	uxtb	r3, r3
 8019858:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801985a:	683b      	ldr	r3, [r7, #0]
 801985c:	0a1b      	lsrs	r3, r3, #8
 801985e:	b2db      	uxtb	r3, r3
 8019860:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 8019862:	683b      	ldr	r3, [r7, #0]
 8019864:	b2db      	uxtb	r3, r3
 8019866:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8019868:	f107 030c 	add.w	r3, r7, #12
 801986c:	2204      	movs	r2, #4
 801986e:	4619      	mov	r1, r3
 8019870:	2097      	movs	r0, #151	@ 0x97
 8019872:	f000 fc03 	bl	801a07c <SUBGRF_WriteCommand>
}
 8019876:	bf00      	nop
 8019878:	3710      	adds	r7, #16
 801987a:	46bd      	mov	sp, r7
 801987c:	bd80      	pop	{r7, pc}
	...

08019880 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 8019880:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8019884:	b084      	sub	sp, #16
 8019886:	af00      	add	r7, sp, #0
 8019888:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 801988a:	2300      	movs	r3, #0
 801988c:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 801988e:	4b1d      	ldr	r3, [pc, #116]	@ (8019904 <SUBGRF_SetRfFrequency+0x84>)
 8019890:	781b      	ldrb	r3, [r3, #0]
 8019892:	f083 0301 	eor.w	r3, r3, #1
 8019896:	b2db      	uxtb	r3, r3
 8019898:	2b00      	cmp	r3, #0
 801989a:	d005      	beq.n	80198a8 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 801989c:	6878      	ldr	r0, [r7, #4]
 801989e:	f7ff ff2b 	bl	80196f8 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 80198a2:	4b18      	ldr	r3, [pc, #96]	@ (8019904 <SUBGRF_SetRfFrequency+0x84>)
 80198a4:	2201      	movs	r2, #1
 80198a6:	701a      	strb	r2, [r3, #0]
    }
    /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
    SX_FREQ_TO_CHANNEL(chan, frequency);
 80198a8:	687b      	ldr	r3, [r7, #4]
 80198aa:	2200      	movs	r2, #0
 80198ac:	461c      	mov	r4, r3
 80198ae:	4615      	mov	r5, r2
 80198b0:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 80198b4:	ea4f 6844 	mov.w	r8, r4, lsl #25
 80198b8:	4a13      	ldr	r2, [pc, #76]	@ (8019908 <SUBGRF_SetRfFrequency+0x88>)
 80198ba:	f04f 0300 	mov.w	r3, #0
 80198be:	4640      	mov	r0, r8
 80198c0:	4649      	mov	r1, r9
 80198c2:	f7e7 fa7d 	bl	8000dc0 <__aeabi_uldivmod>
 80198c6:	4602      	mov	r2, r0
 80198c8:	460b      	mov	r3, r1
 80198ca:	4613      	mov	r3, r2
 80198cc:	60fb      	str	r3, [r7, #12]
    /* ST_WORKAROUND_END */
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 80198ce:	68fb      	ldr	r3, [r7, #12]
 80198d0:	0e1b      	lsrs	r3, r3, #24
 80198d2:	b2db      	uxtb	r3, r3
 80198d4:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 80198d6:	68fb      	ldr	r3, [r7, #12]
 80198d8:	0c1b      	lsrs	r3, r3, #16
 80198da:	b2db      	uxtb	r3, r3
 80198dc:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 80198de:	68fb      	ldr	r3, [r7, #12]
 80198e0:	0a1b      	lsrs	r3, r3, #8
 80198e2:	b2db      	uxtb	r3, r3
 80198e4:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 80198e6:	68fb      	ldr	r3, [r7, #12]
 80198e8:	b2db      	uxtb	r3, r3
 80198ea:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 80198ec:	f107 0308 	add.w	r3, r7, #8
 80198f0:	2204      	movs	r2, #4
 80198f2:	4619      	mov	r1, r3
 80198f4:	2086      	movs	r0, #134	@ 0x86
 80198f6:	f000 fbc1 	bl	801a07c <SUBGRF_WriteCommand>
}
 80198fa:	bf00      	nop
 80198fc:	3710      	adds	r7, #16
 80198fe:	46bd      	mov	sp, r7
 8019900:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8019904:	20001d6c 	.word	0x20001d6c
 8019908:	01e84800 	.word	0x01e84800

0801990c <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 801990c:	b580      	push	{r7, lr}
 801990e:	b082      	sub	sp, #8
 8019910:	af00      	add	r7, sp, #0
 8019912:	4603      	mov	r3, r0
 8019914:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 8019916:	79fa      	ldrb	r2, [r7, #7]
 8019918:	4b09      	ldr	r3, [pc, #36]	@ (8019940 <SUBGRF_SetPacketType+0x34>)
 801991a:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 801991c:	79fb      	ldrb	r3, [r7, #7]
 801991e:	2b00      	cmp	r3, #0
 8019920:	d104      	bne.n	801992c <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 8019922:	2100      	movs	r1, #0
 8019924:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8019928:	f000 faf8 	bl	8019f1c <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 801992c:	1dfb      	adds	r3, r7, #7
 801992e:	2201      	movs	r2, #1
 8019930:	4619      	mov	r1, r3
 8019932:	208a      	movs	r0, #138	@ 0x8a
 8019934:	f000 fba2 	bl	801a07c <SUBGRF_WriteCommand>
}
 8019938:	bf00      	nop
 801993a:	3708      	adds	r7, #8
 801993c:	46bd      	mov	sp, r7
 801993e:	bd80      	pop	{r7, pc}
 8019940:	20001d65 	.word	0x20001d65

08019944 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 8019944:	b480      	push	{r7}
 8019946:	af00      	add	r7, sp, #0
    return PacketType;
 8019948:	4b02      	ldr	r3, [pc, #8]	@ (8019954 <SUBGRF_GetPacketType+0x10>)
 801994a:	781b      	ldrb	r3, [r3, #0]
}
 801994c:	4618      	mov	r0, r3
 801994e:	46bd      	mov	sp, r7
 8019950:	bc80      	pop	{r7}
 8019952:	4770      	bx	lr
 8019954:	20001d65 	.word	0x20001d65

08019958 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 8019958:	b580      	push	{r7, lr}
 801995a:	b084      	sub	sp, #16
 801995c:	af00      	add	r7, sp, #0
 801995e:	4603      	mov	r3, r0
 8019960:	71fb      	strb	r3, [r7, #7]
 8019962:	460b      	mov	r3, r1
 8019964:	71bb      	strb	r3, [r7, #6]
 8019966:	4613      	mov	r3, r2
 8019968:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 801996a:	79fb      	ldrb	r3, [r7, #7]
 801996c:	2b01      	cmp	r3, #1
 801996e:	d149      	bne.n	8019a04 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 8019970:	2000      	movs	r0, #0
 8019972:	f7f1 f979 	bl	800ac68 <RBI_GetRFOMaxPowerConfig>
 8019976:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 8019978:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801997c:	68fa      	ldr	r2, [r7, #12]
 801997e:	429a      	cmp	r2, r3
 8019980:	da01      	bge.n	8019986 <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 8019982:	68fb      	ldr	r3, [r7, #12]
 8019984:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 8019986:	68fb      	ldr	r3, [r7, #12]
 8019988:	2b0e      	cmp	r3, #14
 801998a:	d10e      	bne.n	80199aa <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 801998c:	2301      	movs	r3, #1
 801998e:	2201      	movs	r2, #1
 8019990:	2100      	movs	r1, #0
 8019992:	2004      	movs	r0, #4
 8019994:	f7ff fef6 	bl	8019784 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8019998:	79ba      	ldrb	r2, [r7, #6]
 801999a:	68fb      	ldr	r3, [r7, #12]
 801999c:	b2db      	uxtb	r3, r3
 801999e:	1ad3      	subs	r3, r2, r3
 80199a0:	b2db      	uxtb	r3, r3
 80199a2:	330e      	adds	r3, #14
 80199a4:	b2db      	uxtb	r3, r3
 80199a6:	71bb      	strb	r3, [r7, #6]
 80199a8:	e01f      	b.n	80199ea <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 80199aa:	68fb      	ldr	r3, [r7, #12]
 80199ac:	2b0a      	cmp	r3, #10
 80199ae:	d10e      	bne.n	80199ce <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 80199b0:	2301      	movs	r3, #1
 80199b2:	2201      	movs	r2, #1
 80199b4:	2100      	movs	r1, #0
 80199b6:	2001      	movs	r0, #1
 80199b8:	f7ff fee4 	bl	8019784 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 80199bc:	79ba      	ldrb	r2, [r7, #6]
 80199be:	68fb      	ldr	r3, [r7, #12]
 80199c0:	b2db      	uxtb	r3, r3
 80199c2:	1ad3      	subs	r3, r2, r3
 80199c4:	b2db      	uxtb	r3, r3
 80199c6:	330d      	adds	r3, #13
 80199c8:	b2db      	uxtb	r3, r3
 80199ca:	71bb      	strb	r3, [r7, #6]
 80199cc:	e00d      	b.n	80199ea <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x06, 0x00, 0x01, 0x01);
 80199ce:	2301      	movs	r3, #1
 80199d0:	2201      	movs	r2, #1
 80199d2:	2100      	movs	r1, #0
 80199d4:	2006      	movs	r0, #6
 80199d6:	f7ff fed5 	bl	8019784 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 80199da:	79ba      	ldrb	r2, [r7, #6]
 80199dc:	68fb      	ldr	r3, [r7, #12]
 80199de:	b2db      	uxtb	r3, r3
 80199e0:	1ad3      	subs	r3, r2, r3
 80199e2:	b2db      	uxtb	r3, r3
 80199e4:	330e      	adds	r3, #14
 80199e6:	b2db      	uxtb	r3, r3
 80199e8:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 80199ea:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80199ee:	f113 0f11 	cmn.w	r3, #17
 80199f2:	da01      	bge.n	80199f8 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 80199f4:	23ef      	movs	r3, #239	@ 0xef
 80199f6:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 80199f8:	2118      	movs	r1, #24
 80199fa:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 80199fe:	f000 fa8d 	bl	8019f1c <SUBGRF_WriteRegister>
 8019a02:	e067      	b.n	8019ad4 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 8019a04:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 8019a08:	f000 fa9c 	bl	8019f44 <SUBGRF_ReadRegister>
 8019a0c:	4603      	mov	r3, r0
 8019a0e:	f043 031e 	orr.w	r3, r3, #30
 8019a12:	b2db      	uxtb	r3, r3
 8019a14:	4619      	mov	r1, r3
 8019a16:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 8019a1a:	f000 fa7f 	bl	8019f1c <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 8019a1e:	2001      	movs	r0, #1
 8019a20:	f7f1 f922 	bl	800ac68 <RBI_GetRFOMaxPowerConfig>
 8019a24:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 8019a26:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8019a2a:	68fa      	ldr	r2, [r7, #12]
 8019a2c:	429a      	cmp	r2, r3
 8019a2e:	da01      	bge.n	8019a34 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 8019a30:	68fb      	ldr	r3, [r7, #12]
 8019a32:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 8019a34:	68fb      	ldr	r3, [r7, #12]
 8019a36:	2b14      	cmp	r3, #20
 8019a38:	d10e      	bne.n	8019a58 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 8019a3a:	2301      	movs	r3, #1
 8019a3c:	2200      	movs	r2, #0
 8019a3e:	2105      	movs	r1, #5
 8019a40:	2003      	movs	r0, #3
 8019a42:	f7ff fe9f 	bl	8019784 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8019a46:	79ba      	ldrb	r2, [r7, #6]
 8019a48:	68fb      	ldr	r3, [r7, #12]
 8019a4a:	b2db      	uxtb	r3, r3
 8019a4c:	1ad3      	subs	r3, r2, r3
 8019a4e:	b2db      	uxtb	r3, r3
 8019a50:	3316      	adds	r3, #22
 8019a52:	b2db      	uxtb	r3, r3
 8019a54:	71bb      	strb	r3, [r7, #6]
 8019a56:	e031      	b.n	8019abc <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 8019a58:	68fb      	ldr	r3, [r7, #12]
 8019a5a:	2b11      	cmp	r3, #17
 8019a5c:	d10e      	bne.n	8019a7c <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 8019a5e:	2301      	movs	r3, #1
 8019a60:	2200      	movs	r2, #0
 8019a62:	2103      	movs	r1, #3
 8019a64:	2002      	movs	r0, #2
 8019a66:	f7ff fe8d 	bl	8019784 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8019a6a:	79ba      	ldrb	r2, [r7, #6]
 8019a6c:	68fb      	ldr	r3, [r7, #12]
 8019a6e:	b2db      	uxtb	r3, r3
 8019a70:	1ad3      	subs	r3, r2, r3
 8019a72:	b2db      	uxtb	r3, r3
 8019a74:	3316      	adds	r3, #22
 8019a76:	b2db      	uxtb	r3, r3
 8019a78:	71bb      	strb	r3, [r7, #6]
 8019a7a:	e01f      	b.n	8019abc <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 8019a7c:	68fb      	ldr	r3, [r7, #12]
 8019a7e:	2b0e      	cmp	r3, #14
 8019a80:	d10e      	bne.n	8019aa0 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 8019a82:	2301      	movs	r3, #1
 8019a84:	2200      	movs	r2, #0
 8019a86:	2102      	movs	r1, #2
 8019a88:	2002      	movs	r0, #2
 8019a8a:	f7ff fe7b 	bl	8019784 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8019a8e:	79ba      	ldrb	r2, [r7, #6]
 8019a90:	68fb      	ldr	r3, [r7, #12]
 8019a92:	b2db      	uxtb	r3, r3
 8019a94:	1ad3      	subs	r3, r2, r3
 8019a96:	b2db      	uxtb	r3, r3
 8019a98:	330e      	adds	r3, #14
 8019a9a:	b2db      	uxtb	r3, r3
 8019a9c:	71bb      	strb	r3, [r7, #6]
 8019a9e:	e00d      	b.n	8019abc <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 8019aa0:	2301      	movs	r3, #1
 8019aa2:	2200      	movs	r2, #0
 8019aa4:	2107      	movs	r1, #7
 8019aa6:	2004      	movs	r0, #4
 8019aa8:	f7ff fe6c 	bl	8019784 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8019aac:	79ba      	ldrb	r2, [r7, #6]
 8019aae:	68fb      	ldr	r3, [r7, #12]
 8019ab0:	b2db      	uxtb	r3, r3
 8019ab2:	1ad3      	subs	r3, r2, r3
 8019ab4:	b2db      	uxtb	r3, r3
 8019ab6:	3316      	adds	r3, #22
 8019ab8:	b2db      	uxtb	r3, r3
 8019aba:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 8019abc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8019ac0:	f113 0f09 	cmn.w	r3, #9
 8019ac4:	da01      	bge.n	8019aca <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 8019ac6:	23f7      	movs	r3, #247	@ 0xf7
 8019ac8:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 8019aca:	2138      	movs	r1, #56	@ 0x38
 8019acc:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8019ad0:	f000 fa24 	bl	8019f1c <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 8019ad4:	79bb      	ldrb	r3, [r7, #6]
 8019ad6:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 8019ad8:	797b      	ldrb	r3, [r7, #5]
 8019ada:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 8019adc:	f107 0308 	add.w	r3, r7, #8
 8019ae0:	2202      	movs	r2, #2
 8019ae2:	4619      	mov	r1, r3
 8019ae4:	208e      	movs	r0, #142	@ 0x8e
 8019ae6:	f000 fac9 	bl	801a07c <SUBGRF_WriteCommand>
}
 8019aea:	bf00      	nop
 8019aec:	3710      	adds	r7, #16
 8019aee:	46bd      	mov	sp, r7
 8019af0:	bd80      	pop	{r7, pc}
	...

08019af4 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 8019af4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8019af8:	b086      	sub	sp, #24
 8019afa:	af00      	add	r7, sp, #0
 8019afc:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 8019afe:	2300      	movs	r3, #0
 8019b00:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8019b02:	f107 0308 	add.w	r3, r7, #8
 8019b06:	2200      	movs	r2, #0
 8019b08:	601a      	str	r2, [r3, #0]
 8019b0a:	605a      	str	r2, [r3, #4]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 8019b0c:	687b      	ldr	r3, [r7, #4]
 8019b0e:	781a      	ldrb	r2, [r3, #0]
 8019b10:	4b5c      	ldr	r3, [pc, #368]	@ (8019c84 <SUBGRF_SetModulationParams+0x190>)
 8019b12:	781b      	ldrb	r3, [r3, #0]
 8019b14:	429a      	cmp	r2, r3
 8019b16:	d004      	beq.n	8019b22 <SUBGRF_SetModulationParams+0x2e>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8019b18:	687b      	ldr	r3, [r7, #4]
 8019b1a:	781b      	ldrb	r3, [r3, #0]
 8019b1c:	4618      	mov	r0, r3
 8019b1e:	f7ff fef5 	bl	801990c <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 8019b22:	687b      	ldr	r3, [r7, #4]
 8019b24:	781b      	ldrb	r3, [r3, #0]
 8019b26:	2b03      	cmp	r3, #3
 8019b28:	f200 80a5 	bhi.w	8019c76 <SUBGRF_SetModulationParams+0x182>
 8019b2c:	a201      	add	r2, pc, #4	@ (adr r2, 8019b34 <SUBGRF_SetModulationParams+0x40>)
 8019b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019b32:	bf00      	nop
 8019b34:	08019b45 	.word	0x08019b45
 8019b38:	08019c05 	.word	0x08019c05
 8019b3c:	08019bc7 	.word	0x08019bc7
 8019b40:	08019c33 	.word	0x08019c33
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 8019b44:	2308      	movs	r3, #8
 8019b46:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8019b48:	687b      	ldr	r3, [r7, #4]
 8019b4a:	685b      	ldr	r3, [r3, #4]
 8019b4c:	4a4e      	ldr	r2, [pc, #312]	@ (8019c88 <SUBGRF_SetModulationParams+0x194>)
 8019b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8019b52:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8019b54:	697b      	ldr	r3, [r7, #20]
 8019b56:	0c1b      	lsrs	r3, r3, #16
 8019b58:	b2db      	uxtb	r3, r3
 8019b5a:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8019b5c:	697b      	ldr	r3, [r7, #20]
 8019b5e:	0a1b      	lsrs	r3, r3, #8
 8019b60:	b2db      	uxtb	r3, r3
 8019b62:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8019b64:	697b      	ldr	r3, [r7, #20]
 8019b66:	b2db      	uxtb	r3, r3
 8019b68:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8019b6a:	687b      	ldr	r3, [r7, #4]
 8019b6c:	7b1b      	ldrb	r3, [r3, #12]
 8019b6e:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8019b70:	687b      	ldr	r3, [r7, #4]
 8019b72:	7b5b      	ldrb	r3, [r3, #13]
 8019b74:	733b      	strb	r3, [r7, #12]
        /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8019b76:	687b      	ldr	r3, [r7, #4]
 8019b78:	689b      	ldr	r3, [r3, #8]
 8019b7a:	2200      	movs	r2, #0
 8019b7c:	461c      	mov	r4, r3
 8019b7e:	4615      	mov	r5, r2
 8019b80:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8019b84:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8019b88:	4a40      	ldr	r2, [pc, #256]	@ (8019c8c <SUBGRF_SetModulationParams+0x198>)
 8019b8a:	f04f 0300 	mov.w	r3, #0
 8019b8e:	4640      	mov	r0, r8
 8019b90:	4649      	mov	r1, r9
 8019b92:	f7e7 f915 	bl	8000dc0 <__aeabi_uldivmod>
 8019b96:	4602      	mov	r2, r0
 8019b98:	460b      	mov	r3, r1
 8019b9a:	4613      	mov	r3, r2
 8019b9c:	617b      	str	r3, [r7, #20]
        /* ST_WORKAROUND_END */
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8019b9e:	697b      	ldr	r3, [r7, #20]
 8019ba0:	0c1b      	lsrs	r3, r3, #16
 8019ba2:	b2db      	uxtb	r3, r3
 8019ba4:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8019ba6:	697b      	ldr	r3, [r7, #20]
 8019ba8:	0a1b      	lsrs	r3, r3, #8
 8019baa:	b2db      	uxtb	r3, r3
 8019bac:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 8019bae:	697b      	ldr	r3, [r7, #20]
 8019bb0:	b2db      	uxtb	r3, r3
 8019bb2:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8019bb4:	7cfb      	ldrb	r3, [r7, #19]
 8019bb6:	b29a      	uxth	r2, r3
 8019bb8:	f107 0308 	add.w	r3, r7, #8
 8019bbc:	4619      	mov	r1, r3
 8019bbe:	208b      	movs	r0, #139	@ 0x8b
 8019bc0:	f000 fa5c 	bl	801a07c <SUBGRF_WriteCommand>
        break;
 8019bc4:	e058      	b.n	8019c78 <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_BPSK:
        n = 4;
 8019bc6:	2304      	movs	r3, #4
 8019bc8:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8019bca:	687b      	ldr	r3, [r7, #4]
 8019bcc:	691b      	ldr	r3, [r3, #16]
 8019bce:	4a2e      	ldr	r2, [pc, #184]	@ (8019c88 <SUBGRF_SetModulationParams+0x194>)
 8019bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8019bd4:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8019bd6:	697b      	ldr	r3, [r7, #20]
 8019bd8:	0c1b      	lsrs	r3, r3, #16
 8019bda:	b2db      	uxtb	r3, r3
 8019bdc:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8019bde:	697b      	ldr	r3, [r7, #20]
 8019be0:	0a1b      	lsrs	r3, r3, #8
 8019be2:	b2db      	uxtb	r3, r3
 8019be4:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8019be6:	697b      	ldr	r3, [r7, #20]
 8019be8:	b2db      	uxtb	r3, r3
 8019bea:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8019bec:	687b      	ldr	r3, [r7, #4]
 8019bee:	7d1b      	ldrb	r3, [r3, #20]
 8019bf0:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8019bf2:	7cfb      	ldrb	r3, [r7, #19]
 8019bf4:	b29a      	uxth	r2, r3
 8019bf6:	f107 0308 	add.w	r3, r7, #8
 8019bfa:	4619      	mov	r1, r3
 8019bfc:	208b      	movs	r0, #139	@ 0x8b
 8019bfe:	f000 fa3d 	bl	801a07c <SUBGRF_WriteCommand>
        break;
 8019c02:	e039      	b.n	8019c78 <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_LORA:
        n = 4;
 8019c04:	2304      	movs	r3, #4
 8019c06:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8019c08:	687b      	ldr	r3, [r7, #4]
 8019c0a:	7e1b      	ldrb	r3, [r3, #24]
 8019c0c:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8019c0e:	687b      	ldr	r3, [r7, #4]
 8019c10:	7e5b      	ldrb	r3, [r3, #25]
 8019c12:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8019c14:	687b      	ldr	r3, [r7, #4]
 8019c16:	7e9b      	ldrb	r3, [r3, #26]
 8019c18:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8019c1a:	687b      	ldr	r3, [r7, #4]
 8019c1c:	7edb      	ldrb	r3, [r3, #27]
 8019c1e:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8019c20:	7cfb      	ldrb	r3, [r7, #19]
 8019c22:	b29a      	uxth	r2, r3
 8019c24:	f107 0308 	add.w	r3, r7, #8
 8019c28:	4619      	mov	r1, r3
 8019c2a:	208b      	movs	r0, #139	@ 0x8b
 8019c2c:	f000 fa26 	bl	801a07c <SUBGRF_WriteCommand>

        break;
 8019c30:	e022      	b.n	8019c78 <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_GMSK:
        n = 5;
 8019c32:	2305      	movs	r3, #5
 8019c34:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8019c36:	687b      	ldr	r3, [r7, #4]
 8019c38:	685b      	ldr	r3, [r3, #4]
 8019c3a:	4a13      	ldr	r2, [pc, #76]	@ (8019c88 <SUBGRF_SetModulationParams+0x194>)
 8019c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8019c40:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8019c42:	697b      	ldr	r3, [r7, #20]
 8019c44:	0c1b      	lsrs	r3, r3, #16
 8019c46:	b2db      	uxtb	r3, r3
 8019c48:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8019c4a:	697b      	ldr	r3, [r7, #20]
 8019c4c:	0a1b      	lsrs	r3, r3, #8
 8019c4e:	b2db      	uxtb	r3, r3
 8019c50:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8019c52:	697b      	ldr	r3, [r7, #20]
 8019c54:	b2db      	uxtb	r3, r3
 8019c56:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8019c58:	687b      	ldr	r3, [r7, #4]
 8019c5a:	7b1b      	ldrb	r3, [r3, #12]
 8019c5c:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8019c5e:	687b      	ldr	r3, [r7, #4]
 8019c60:	7b5b      	ldrb	r3, [r3, #13]
 8019c62:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8019c64:	7cfb      	ldrb	r3, [r7, #19]
 8019c66:	b29a      	uxth	r2, r3
 8019c68:	f107 0308 	add.w	r3, r7, #8
 8019c6c:	4619      	mov	r1, r3
 8019c6e:	208b      	movs	r0, #139	@ 0x8b
 8019c70:	f000 fa04 	bl	801a07c <SUBGRF_WriteCommand>
        break;
 8019c74:	e000      	b.n	8019c78 <SUBGRF_SetModulationParams+0x184>
    default:
    case PACKET_TYPE_NONE:
      break;
 8019c76:	bf00      	nop
    }
}
 8019c78:	bf00      	nop
 8019c7a:	3718      	adds	r7, #24
 8019c7c:	46bd      	mov	sp, r7
 8019c7e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8019c82:	bf00      	nop
 8019c84:	20001d65 	.word	0x20001d65
 8019c88:	3d090000 	.word	0x3d090000
 8019c8c:	01e84800 	.word	0x01e84800

08019c90 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 8019c90:	b580      	push	{r7, lr}
 8019c92:	b086      	sub	sp, #24
 8019c94:	af00      	add	r7, sp, #0
 8019c96:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 8019c98:	2300      	movs	r3, #0
 8019c9a:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8019c9c:	f107 030c 	add.w	r3, r7, #12
 8019ca0:	2200      	movs	r2, #0
 8019ca2:	601a      	str	r2, [r3, #0]
 8019ca4:	605a      	str	r2, [r3, #4]
 8019ca6:	721a      	strb	r2, [r3, #8]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 8019ca8:	687b      	ldr	r3, [r7, #4]
 8019caa:	781a      	ldrb	r2, [r3, #0]
 8019cac:	4b44      	ldr	r3, [pc, #272]	@ (8019dc0 <SUBGRF_SetPacketParams+0x130>)
 8019cae:	781b      	ldrb	r3, [r3, #0]
 8019cb0:	429a      	cmp	r2, r3
 8019cb2:	d004      	beq.n	8019cbe <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 8019cb4:	687b      	ldr	r3, [r7, #4]
 8019cb6:	781b      	ldrb	r3, [r3, #0]
 8019cb8:	4618      	mov	r0, r3
 8019cba:	f7ff fe27 	bl	801990c <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 8019cbe:	687b      	ldr	r3, [r7, #4]
 8019cc0:	781b      	ldrb	r3, [r3, #0]
 8019cc2:	2b03      	cmp	r3, #3
 8019cc4:	d878      	bhi.n	8019db8 <SUBGRF_SetPacketParams+0x128>
 8019cc6:	a201      	add	r2, pc, #4	@ (adr r2, 8019ccc <SUBGRF_SetPacketParams+0x3c>)
 8019cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019ccc:	08019cdd 	.word	0x08019cdd
 8019cd0:	08019d6d 	.word	0x08019d6d
 8019cd4:	08019d61 	.word	0x08019d61
 8019cd8:	08019cdd 	.word	0x08019cdd
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8019cdc:	687b      	ldr	r3, [r7, #4]
 8019cde:	7a5b      	ldrb	r3, [r3, #9]
 8019ce0:	2bf1      	cmp	r3, #241	@ 0xf1
 8019ce2:	d10a      	bne.n	8019cfa <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8019ce4:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8019ce8:	f7ff faaa 	bl	8019240 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8019cec:	f248 0005 	movw	r0, #32773	@ 0x8005
 8019cf0:	f7ff fac6 	bl	8019280 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8019cf4:	2302      	movs	r3, #2
 8019cf6:	75bb      	strb	r3, [r7, #22]
 8019cf8:	e011      	b.n	8019d1e <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8019cfa:	687b      	ldr	r3, [r7, #4]
 8019cfc:	7a5b      	ldrb	r3, [r3, #9]
 8019cfe:	2bf2      	cmp	r3, #242	@ 0xf2
 8019d00:	d10a      	bne.n	8019d18 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8019d02:	f641 500f 	movw	r0, #7439	@ 0x1d0f
 8019d06:	f7ff fa9b 	bl	8019240 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8019d0a:	f241 0021 	movw	r0, #4129	@ 0x1021
 8019d0e:	f7ff fab7 	bl	8019280 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8019d12:	2306      	movs	r3, #6
 8019d14:	75bb      	strb	r3, [r7, #22]
 8019d16:	e002      	b.n	8019d1e <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 8019d18:	687b      	ldr	r3, [r7, #4]
 8019d1a:	7a5b      	ldrb	r3, [r3, #9]
 8019d1c:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 8019d1e:	2309      	movs	r3, #9
 8019d20:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8019d22:	687b      	ldr	r3, [r7, #4]
 8019d24:	885b      	ldrh	r3, [r3, #2]
 8019d26:	0a1b      	lsrs	r3, r3, #8
 8019d28:	b29b      	uxth	r3, r3
 8019d2a:	b2db      	uxtb	r3, r3
 8019d2c:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8019d2e:	687b      	ldr	r3, [r7, #4]
 8019d30:	885b      	ldrh	r3, [r3, #2]
 8019d32:	b2db      	uxtb	r3, r3
 8019d34:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8019d36:	687b      	ldr	r3, [r7, #4]
 8019d38:	791b      	ldrb	r3, [r3, #4]
 8019d3a:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8019d3c:	687b      	ldr	r3, [r7, #4]
 8019d3e:	795b      	ldrb	r3, [r3, #5]
 8019d40:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8019d42:	687b      	ldr	r3, [r7, #4]
 8019d44:	799b      	ldrb	r3, [r3, #6]
 8019d46:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8019d48:	687b      	ldr	r3, [r7, #4]
 8019d4a:	79db      	ldrb	r3, [r3, #7]
 8019d4c:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8019d4e:	687b      	ldr	r3, [r7, #4]
 8019d50:	7a1b      	ldrb	r3, [r3, #8]
 8019d52:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 8019d54:	7dbb      	ldrb	r3, [r7, #22]
 8019d56:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8019d58:	687b      	ldr	r3, [r7, #4]
 8019d5a:	7a9b      	ldrb	r3, [r3, #10]
 8019d5c:	753b      	strb	r3, [r7, #20]
        break;
 8019d5e:	e022      	b.n	8019da6 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 8019d60:	2301      	movs	r3, #1
 8019d62:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8019d64:	687b      	ldr	r3, [r7, #4]
 8019d66:	7b1b      	ldrb	r3, [r3, #12]
 8019d68:	733b      	strb	r3, [r7, #12]
        break;
 8019d6a:	e01c      	b.n	8019da6 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 8019d6c:	2306      	movs	r3, #6
 8019d6e:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8019d70:	687b      	ldr	r3, [r7, #4]
 8019d72:	89db      	ldrh	r3, [r3, #14]
 8019d74:	0a1b      	lsrs	r3, r3, #8
 8019d76:	b29b      	uxth	r3, r3
 8019d78:	b2db      	uxtb	r3, r3
 8019d7a:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8019d7c:	687b      	ldr	r3, [r7, #4]
 8019d7e:	89db      	ldrh	r3, [r3, #14]
 8019d80:	b2db      	uxtb	r3, r3
 8019d82:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8019d84:	687b      	ldr	r3, [r7, #4]
 8019d86:	7c1a      	ldrb	r2, [r3, #16]
 8019d88:	4b0e      	ldr	r3, [pc, #56]	@ (8019dc4 <SUBGRF_SetPacketParams+0x134>)
 8019d8a:	4611      	mov	r1, r2
 8019d8c:	7019      	strb	r1, [r3, #0]
 8019d8e:	4613      	mov	r3, r2
 8019d90:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8019d92:	687b      	ldr	r3, [r7, #4]
 8019d94:	7c5b      	ldrb	r3, [r3, #17]
 8019d96:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8019d98:	687b      	ldr	r3, [r7, #4]
 8019d9a:	7c9b      	ldrb	r3, [r3, #18]
 8019d9c:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8019d9e:	687b      	ldr	r3, [r7, #4]
 8019da0:	7cdb      	ldrb	r3, [r3, #19]
 8019da2:	747b      	strb	r3, [r7, #17]
        break;
 8019da4:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8019da6:	7dfb      	ldrb	r3, [r7, #23]
 8019da8:	b29a      	uxth	r2, r3
 8019daa:	f107 030c 	add.w	r3, r7, #12
 8019dae:	4619      	mov	r1, r3
 8019db0:	208c      	movs	r0, #140	@ 0x8c
 8019db2:	f000 f963 	bl	801a07c <SUBGRF_WriteCommand>
 8019db6:	e000      	b.n	8019dba <SUBGRF_SetPacketParams+0x12a>
        return;
 8019db8:	bf00      	nop
}
 8019dba:	3718      	adds	r7, #24
 8019dbc:	46bd      	mov	sp, r7
 8019dbe:	bd80      	pop	{r7, pc}
 8019dc0:	20001d65 	.word	0x20001d65
 8019dc4:	20001d66 	.word	0x20001d66

08019dc8 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 8019dc8:	b580      	push	{r7, lr}
 8019dca:	b084      	sub	sp, #16
 8019dcc:	af00      	add	r7, sp, #0
 8019dce:	4603      	mov	r3, r0
 8019dd0:	460a      	mov	r2, r1
 8019dd2:	71fb      	strb	r3, [r7, #7]
 8019dd4:	4613      	mov	r3, r2
 8019dd6:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 8019dd8:	79fb      	ldrb	r3, [r7, #7]
 8019dda:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 8019ddc:	79bb      	ldrb	r3, [r7, #6]
 8019dde:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8019de0:	f107 030c 	add.w	r3, r7, #12
 8019de4:	2202      	movs	r2, #2
 8019de6:	4619      	mov	r1, r3
 8019de8:	208f      	movs	r0, #143	@ 0x8f
 8019dea:	f000 f947 	bl	801a07c <SUBGRF_WriteCommand>
}
 8019dee:	bf00      	nop
 8019df0:	3710      	adds	r7, #16
 8019df2:	46bd      	mov	sp, r7
 8019df4:	bd80      	pop	{r7, pc}

08019df6 <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 8019df6:	b580      	push	{r7, lr}
 8019df8:	b082      	sub	sp, #8
 8019dfa:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 8019dfc:	2300      	movs	r3, #0
 8019dfe:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 8019e00:	1d3b      	adds	r3, r7, #4
 8019e02:	2201      	movs	r2, #1
 8019e04:	4619      	mov	r1, r3
 8019e06:	2015      	movs	r0, #21
 8019e08:	f000 f95a 	bl	801a0c0 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 8019e0c:	793b      	ldrb	r3, [r7, #4]
 8019e0e:	425b      	negs	r3, r3
 8019e10:	105b      	asrs	r3, r3, #1
 8019e12:	71fb      	strb	r3, [r7, #7]
    return rssi;
 8019e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8019e18:	4618      	mov	r0, r3
 8019e1a:	3708      	adds	r7, #8
 8019e1c:	46bd      	mov	sp, r7
 8019e1e:	bd80      	pop	{r7, pc}

08019e20 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 8019e20:	b580      	push	{r7, lr}
 8019e22:	b084      	sub	sp, #16
 8019e24:	af00      	add	r7, sp, #0
 8019e26:	6078      	str	r0, [r7, #4]
 8019e28:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8019e2a:	f107 030c 	add.w	r3, r7, #12
 8019e2e:	2202      	movs	r2, #2
 8019e30:	4619      	mov	r1, r3
 8019e32:	2013      	movs	r0, #19
 8019e34:	f000 f944 	bl	801a0c0 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8019e38:	f7ff fd84 	bl	8019944 <SUBGRF_GetPacketType>
 8019e3c:	4603      	mov	r3, r0
 8019e3e:	2b01      	cmp	r3, #1
 8019e40:	d10d      	bne.n	8019e5e <SUBGRF_GetRxBufferStatus+0x3e>
 8019e42:	4b0c      	ldr	r3, [pc, #48]	@ (8019e74 <SUBGRF_GetRxBufferStatus+0x54>)
 8019e44:	781b      	ldrb	r3, [r3, #0]
 8019e46:	b2db      	uxtb	r3, r3
 8019e48:	2b01      	cmp	r3, #1
 8019e4a:	d108      	bne.n	8019e5e <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8019e4c:	f240 7002 	movw	r0, #1794	@ 0x702
 8019e50:	f000 f878 	bl	8019f44 <SUBGRF_ReadRegister>
 8019e54:	4603      	mov	r3, r0
 8019e56:	461a      	mov	r2, r3
 8019e58:	687b      	ldr	r3, [r7, #4]
 8019e5a:	701a      	strb	r2, [r3, #0]
 8019e5c:	e002      	b.n	8019e64 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 8019e5e:	7b3a      	ldrb	r2, [r7, #12]
 8019e60:	687b      	ldr	r3, [r7, #4]
 8019e62:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 8019e64:	7b7a      	ldrb	r2, [r7, #13]
 8019e66:	683b      	ldr	r3, [r7, #0]
 8019e68:	701a      	strb	r2, [r3, #0]
}
 8019e6a:	bf00      	nop
 8019e6c:	3710      	adds	r7, #16
 8019e6e:	46bd      	mov	sp, r7
 8019e70:	bd80      	pop	{r7, pc}
 8019e72:	bf00      	nop
 8019e74:	20001d66 	.word	0x20001d66

08019e78 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 8019e78:	b580      	push	{r7, lr}
 8019e7a:	b084      	sub	sp, #16
 8019e7c:	af00      	add	r7, sp, #0
 8019e7e:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8019e80:	f107 030c 	add.w	r3, r7, #12
 8019e84:	2203      	movs	r2, #3
 8019e86:	4619      	mov	r1, r3
 8019e88:	2014      	movs	r0, #20
 8019e8a:	f000 f919 	bl	801a0c0 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 8019e8e:	f7ff fd59 	bl	8019944 <SUBGRF_GetPacketType>
 8019e92:	4603      	mov	r3, r0
 8019e94:	461a      	mov	r2, r3
 8019e96:	687b      	ldr	r3, [r7, #4]
 8019e98:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 8019e9a:	687b      	ldr	r3, [r7, #4]
 8019e9c:	781b      	ldrb	r3, [r3, #0]
 8019e9e:	2b00      	cmp	r3, #0
 8019ea0:	d002      	beq.n	8019ea8 <SUBGRF_GetPacketStatus+0x30>
 8019ea2:	2b01      	cmp	r3, #1
 8019ea4:	d013      	beq.n	8019ece <SUBGRF_GetPacketStatus+0x56>
 8019ea6:	e02a      	b.n	8019efe <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8019ea8:	7b3a      	ldrb	r2, [r7, #12]
 8019eaa:	687b      	ldr	r3, [r7, #4]
 8019eac:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8019eae:	7b7b      	ldrb	r3, [r7, #13]
 8019eb0:	425b      	negs	r3, r3
 8019eb2:	105b      	asrs	r3, r3, #1
 8019eb4:	b25a      	sxtb	r2, r3
 8019eb6:	687b      	ldr	r3, [r7, #4]
 8019eb8:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8019eba:	7bbb      	ldrb	r3, [r7, #14]
 8019ebc:	425b      	negs	r3, r3
 8019ebe:	105b      	asrs	r3, r3, #1
 8019ec0:	b25a      	sxtb	r2, r3
 8019ec2:	687b      	ldr	r3, [r7, #4]
 8019ec4:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 8019ec6:	687b      	ldr	r3, [r7, #4]
 8019ec8:	2200      	movs	r2, #0
 8019eca:	609a      	str	r2, [r3, #8]
            break;
 8019ecc:	e020      	b.n	8019f10 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8019ece:	7b3b      	ldrb	r3, [r7, #12]
 8019ed0:	425b      	negs	r3, r3
 8019ed2:	105b      	asrs	r3, r3, #1
 8019ed4:	b25a      	sxtb	r2, r3
 8019ed6:	687b      	ldr	r3, [r7, #4]
 8019ed8:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 8019eda:	7b7b      	ldrb	r3, [r7, #13]
 8019edc:	b25b      	sxtb	r3, r3
 8019ede:	3302      	adds	r3, #2
 8019ee0:	109b      	asrs	r3, r3, #2
 8019ee2:	b25a      	sxtb	r2, r3
 8019ee4:	687b      	ldr	r3, [r7, #4]
 8019ee6:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8019ee8:	7bbb      	ldrb	r3, [r7, #14]
 8019eea:	425b      	negs	r3, r3
 8019eec:	105b      	asrs	r3, r3, #1
 8019eee:	b25a      	sxtb	r2, r3
 8019ef0:	687b      	ldr	r3, [r7, #4]
 8019ef2:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8019ef4:	4b08      	ldr	r3, [pc, #32]	@ (8019f18 <SUBGRF_GetPacketStatus+0xa0>)
 8019ef6:	681a      	ldr	r2, [r3, #0]
 8019ef8:	687b      	ldr	r3, [r7, #4]
 8019efa:	611a      	str	r2, [r3, #16]
            break;
 8019efc:	e008      	b.n	8019f10 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 8019efe:	2214      	movs	r2, #20
 8019f00:	2100      	movs	r1, #0
 8019f02:	6878      	ldr	r0, [r7, #4]
 8019f04:	f000 fbf3 	bl	801a6ee <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8019f08:	687b      	ldr	r3, [r7, #4]
 8019f0a:	220f      	movs	r2, #15
 8019f0c:	701a      	strb	r2, [r3, #0]
            break;
 8019f0e:	bf00      	nop
    }
}
 8019f10:	bf00      	nop
 8019f12:	3710      	adds	r7, #16
 8019f14:	46bd      	mov	sp, r7
 8019f16:	bd80      	pop	{r7, pc}
 8019f18:	20001d68 	.word	0x20001d68

08019f1c <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 8019f1c:	b580      	push	{r7, lr}
 8019f1e:	b082      	sub	sp, #8
 8019f20:	af00      	add	r7, sp, #0
 8019f22:	4603      	mov	r3, r0
 8019f24:	460a      	mov	r2, r1
 8019f26:	80fb      	strh	r3, [r7, #6]
 8019f28:	4613      	mov	r3, r2
 8019f2a:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8019f2c:	1d7a      	adds	r2, r7, #5
 8019f2e:	88f9      	ldrh	r1, [r7, #6]
 8019f30:	2301      	movs	r3, #1
 8019f32:	4803      	ldr	r0, [pc, #12]	@ (8019f40 <SUBGRF_WriteRegister+0x24>)
 8019f34:	f7ed fb8e 	bl	8007654 <HAL_SUBGHZ_WriteRegisters>
}
 8019f38:	bf00      	nop
 8019f3a:	3708      	adds	r7, #8
 8019f3c:	46bd      	mov	sp, r7
 8019f3e:	bd80      	pop	{r7, pc}
 8019f40:	200003c4 	.word	0x200003c4

08019f44 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 8019f44:	b580      	push	{r7, lr}
 8019f46:	b084      	sub	sp, #16
 8019f48:	af00      	add	r7, sp, #0
 8019f4a:	4603      	mov	r3, r0
 8019f4c:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 8019f4e:	f107 020f 	add.w	r2, r7, #15
 8019f52:	88f9      	ldrh	r1, [r7, #6]
 8019f54:	2301      	movs	r3, #1
 8019f56:	4804      	ldr	r0, [pc, #16]	@ (8019f68 <SUBGRF_ReadRegister+0x24>)
 8019f58:	f7ed fbdb 	bl	8007712 <HAL_SUBGHZ_ReadRegisters>
    return data;
 8019f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8019f5e:	4618      	mov	r0, r3
 8019f60:	3710      	adds	r7, #16
 8019f62:	46bd      	mov	sp, r7
 8019f64:	bd80      	pop	{r7, pc}
 8019f66:	bf00      	nop
 8019f68:	200003c4 	.word	0x200003c4

08019f6c <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8019f6c:	b580      	push	{r7, lr}
 8019f6e:	b086      	sub	sp, #24
 8019f70:	af00      	add	r7, sp, #0
 8019f72:	4603      	mov	r3, r0
 8019f74:	6039      	str	r1, [r7, #0]
 8019f76:	80fb      	strh	r3, [r7, #6]
 8019f78:	4613      	mov	r3, r2
 8019f7a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019f7c:	f3ef 8310 	mrs	r3, PRIMASK
 8019f80:	60fb      	str	r3, [r7, #12]
  return(result);
 8019f82:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8019f84:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019f86:	b672      	cpsid	i
}
 8019f88:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 8019f8a:	88bb      	ldrh	r3, [r7, #4]
 8019f8c:	88f9      	ldrh	r1, [r7, #6]
 8019f8e:	683a      	ldr	r2, [r7, #0]
 8019f90:	4806      	ldr	r0, [pc, #24]	@ (8019fac <SUBGRF_WriteRegisters+0x40>)
 8019f92:	f7ed fb5f 	bl	8007654 <HAL_SUBGHZ_WriteRegisters>
 8019f96:	697b      	ldr	r3, [r7, #20]
 8019f98:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019f9a:	693b      	ldr	r3, [r7, #16]
 8019f9c:	f383 8810 	msr	PRIMASK, r3
}
 8019fa0:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8019fa2:	bf00      	nop
 8019fa4:	3718      	adds	r7, #24
 8019fa6:	46bd      	mov	sp, r7
 8019fa8:	bd80      	pop	{r7, pc}
 8019faa:	bf00      	nop
 8019fac:	200003c4 	.word	0x200003c4

08019fb0 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8019fb0:	b580      	push	{r7, lr}
 8019fb2:	b086      	sub	sp, #24
 8019fb4:	af00      	add	r7, sp, #0
 8019fb6:	4603      	mov	r3, r0
 8019fb8:	6039      	str	r1, [r7, #0]
 8019fba:	80fb      	strh	r3, [r7, #6]
 8019fbc:	4613      	mov	r3, r2
 8019fbe:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019fc0:	f3ef 8310 	mrs	r3, PRIMASK
 8019fc4:	60fb      	str	r3, [r7, #12]
  return(result);
 8019fc6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8019fc8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019fca:	b672      	cpsid	i
}
 8019fcc:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 8019fce:	88bb      	ldrh	r3, [r7, #4]
 8019fd0:	88f9      	ldrh	r1, [r7, #6]
 8019fd2:	683a      	ldr	r2, [r7, #0]
 8019fd4:	4806      	ldr	r0, [pc, #24]	@ (8019ff0 <SUBGRF_ReadRegisters+0x40>)
 8019fd6:	f7ed fb9c 	bl	8007712 <HAL_SUBGHZ_ReadRegisters>
 8019fda:	697b      	ldr	r3, [r7, #20]
 8019fdc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019fde:	693b      	ldr	r3, [r7, #16]
 8019fe0:	f383 8810 	msr	PRIMASK, r3
}
 8019fe4:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8019fe6:	bf00      	nop
 8019fe8:	3718      	adds	r7, #24
 8019fea:	46bd      	mov	sp, r7
 8019fec:	bd80      	pop	{r7, pc}
 8019fee:	bf00      	nop
 8019ff0:	200003c4 	.word	0x200003c4

08019ff4 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8019ff4:	b580      	push	{r7, lr}
 8019ff6:	b086      	sub	sp, #24
 8019ff8:	af00      	add	r7, sp, #0
 8019ffa:	4603      	mov	r3, r0
 8019ffc:	6039      	str	r1, [r7, #0]
 8019ffe:	71fb      	strb	r3, [r7, #7]
 801a000:	4613      	mov	r3, r2
 801a002:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a004:	f3ef 8310 	mrs	r3, PRIMASK
 801a008:	60fb      	str	r3, [r7, #12]
  return(result);
 801a00a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801a00c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a00e:	b672      	cpsid	i
}
 801a010:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 801a012:	79bb      	ldrb	r3, [r7, #6]
 801a014:	b29b      	uxth	r3, r3
 801a016:	79f9      	ldrb	r1, [r7, #7]
 801a018:	683a      	ldr	r2, [r7, #0]
 801a01a:	4806      	ldr	r0, [pc, #24]	@ (801a034 <SUBGRF_WriteBuffer+0x40>)
 801a01c:	f7ed fc8d 	bl	800793a <HAL_SUBGHZ_WriteBuffer>
 801a020:	697b      	ldr	r3, [r7, #20]
 801a022:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a024:	693b      	ldr	r3, [r7, #16]
 801a026:	f383 8810 	msr	PRIMASK, r3
}
 801a02a:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801a02c:	bf00      	nop
 801a02e:	3718      	adds	r7, #24
 801a030:	46bd      	mov	sp, r7
 801a032:	bd80      	pop	{r7, pc}
 801a034:	200003c4 	.word	0x200003c4

0801a038 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801a038:	b580      	push	{r7, lr}
 801a03a:	b086      	sub	sp, #24
 801a03c:	af00      	add	r7, sp, #0
 801a03e:	4603      	mov	r3, r0
 801a040:	6039      	str	r1, [r7, #0]
 801a042:	71fb      	strb	r3, [r7, #7]
 801a044:	4613      	mov	r3, r2
 801a046:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a048:	f3ef 8310 	mrs	r3, PRIMASK
 801a04c:	60fb      	str	r3, [r7, #12]
  return(result);
 801a04e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801a050:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a052:	b672      	cpsid	i
}
 801a054:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 801a056:	79bb      	ldrb	r3, [r7, #6]
 801a058:	b29b      	uxth	r3, r3
 801a05a:	79f9      	ldrb	r1, [r7, #7]
 801a05c:	683a      	ldr	r2, [r7, #0]
 801a05e:	4806      	ldr	r0, [pc, #24]	@ (801a078 <SUBGRF_ReadBuffer+0x40>)
 801a060:	f7ed fcbe 	bl	80079e0 <HAL_SUBGHZ_ReadBuffer>
 801a064:	697b      	ldr	r3, [r7, #20]
 801a066:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a068:	693b      	ldr	r3, [r7, #16]
 801a06a:	f383 8810 	msr	PRIMASK, r3
}
 801a06e:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801a070:	bf00      	nop
 801a072:	3718      	adds	r7, #24
 801a074:	46bd      	mov	sp, r7
 801a076:	bd80      	pop	{r7, pc}
 801a078:	200003c4 	.word	0x200003c4

0801a07c <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801a07c:	b580      	push	{r7, lr}
 801a07e:	b086      	sub	sp, #24
 801a080:	af00      	add	r7, sp, #0
 801a082:	4603      	mov	r3, r0
 801a084:	6039      	str	r1, [r7, #0]
 801a086:	71fb      	strb	r3, [r7, #7]
 801a088:	4613      	mov	r3, r2
 801a08a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a08c:	f3ef 8310 	mrs	r3, PRIMASK
 801a090:	60fb      	str	r3, [r7, #12]
  return(result);
 801a092:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801a094:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a096:	b672      	cpsid	i
}
 801a098:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 801a09a:	88bb      	ldrh	r3, [r7, #4]
 801a09c:	79f9      	ldrb	r1, [r7, #7]
 801a09e:	683a      	ldr	r2, [r7, #0]
 801a0a0:	4806      	ldr	r0, [pc, #24]	@ (801a0bc <SUBGRF_WriteCommand+0x40>)
 801a0a2:	f7ed fb97 	bl	80077d4 <HAL_SUBGHZ_ExecSetCmd>
 801a0a6:	697b      	ldr	r3, [r7, #20]
 801a0a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a0aa:	693b      	ldr	r3, [r7, #16]
 801a0ac:	f383 8810 	msr	PRIMASK, r3
}
 801a0b0:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801a0b2:	bf00      	nop
 801a0b4:	3718      	adds	r7, #24
 801a0b6:	46bd      	mov	sp, r7
 801a0b8:	bd80      	pop	{r7, pc}
 801a0ba:	bf00      	nop
 801a0bc:	200003c4 	.word	0x200003c4

0801a0c0 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801a0c0:	b580      	push	{r7, lr}
 801a0c2:	b086      	sub	sp, #24
 801a0c4:	af00      	add	r7, sp, #0
 801a0c6:	4603      	mov	r3, r0
 801a0c8:	6039      	str	r1, [r7, #0]
 801a0ca:	71fb      	strb	r3, [r7, #7]
 801a0cc:	4613      	mov	r3, r2
 801a0ce:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a0d0:	f3ef 8310 	mrs	r3, PRIMASK
 801a0d4:	60fb      	str	r3, [r7, #12]
  return(result);
 801a0d6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801a0d8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a0da:	b672      	cpsid	i
}
 801a0dc:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 801a0de:	88bb      	ldrh	r3, [r7, #4]
 801a0e0:	79f9      	ldrb	r1, [r7, #7]
 801a0e2:	683a      	ldr	r2, [r7, #0]
 801a0e4:	4806      	ldr	r0, [pc, #24]	@ (801a100 <SUBGRF_ReadCommand+0x40>)
 801a0e6:	f7ed fbd4 	bl	8007892 <HAL_SUBGHZ_ExecGetCmd>
 801a0ea:	697b      	ldr	r3, [r7, #20]
 801a0ec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a0ee:	693b      	ldr	r3, [r7, #16]
 801a0f0:	f383 8810 	msr	PRIMASK, r3
}
 801a0f4:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801a0f6:	bf00      	nop
 801a0f8:	3718      	adds	r7, #24
 801a0fa:	46bd      	mov	sp, r7
 801a0fc:	bd80      	pop	{r7, pc}
 801a0fe:	bf00      	nop
 801a100:	200003c4 	.word	0x200003c4

0801a104 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 801a104:	b580      	push	{r7, lr}
 801a106:	b084      	sub	sp, #16
 801a108:	af00      	add	r7, sp, #0
 801a10a:	4603      	mov	r3, r0
 801a10c:	460a      	mov	r2, r1
 801a10e:	71fb      	strb	r3, [r7, #7]
 801a110:	4613      	mov	r3, r2
 801a112:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 801a114:	2301      	movs	r3, #1
 801a116:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 801a118:	79bb      	ldrb	r3, [r7, #6]
 801a11a:	2b01      	cmp	r3, #1
 801a11c:	d10d      	bne.n	801a13a <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 801a11e:	79fb      	ldrb	r3, [r7, #7]
 801a120:	2b01      	cmp	r3, #1
 801a122:	d104      	bne.n	801a12e <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 801a124:	2302      	movs	r3, #2
 801a126:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 801a128:	2004      	movs	r0, #4
 801a12a:	f000 f8df 	bl	801a2ec <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 801a12e:	79fb      	ldrb	r3, [r7, #7]
 801a130:	2b02      	cmp	r3, #2
 801a132:	d107      	bne.n	801a144 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 801a134:	2303      	movs	r3, #3
 801a136:	73fb      	strb	r3, [r7, #15]
 801a138:	e004      	b.n	801a144 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 801a13a:	79bb      	ldrb	r3, [r7, #6]
 801a13c:	2b00      	cmp	r3, #0
 801a13e:	d101      	bne.n	801a144 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 801a140:	2301      	movs	r3, #1
 801a142:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 801a144:	7bfb      	ldrb	r3, [r7, #15]
 801a146:	4618      	mov	r0, r3
 801a148:	f7f0 fd6b 	bl	800ac22 <RBI_ConfigRFSwitch>
}
 801a14c:	bf00      	nop
 801a14e:	3710      	adds	r7, #16
 801a150:	46bd      	mov	sp, r7
 801a152:	bd80      	pop	{r7, pc}

0801a154 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 801a154:	b580      	push	{r7, lr}
 801a156:	b084      	sub	sp, #16
 801a158:	af00      	add	r7, sp, #0
 801a15a:	4603      	mov	r3, r0
 801a15c:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 801a15e:	2301      	movs	r3, #1
 801a160:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 801a162:	f7f0 fd6c 	bl	800ac3e <RBI_GetTxConfig>
 801a166:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 801a168:	68bb      	ldr	r3, [r7, #8]
 801a16a:	2b02      	cmp	r3, #2
 801a16c:	d016      	beq.n	801a19c <SUBGRF_SetRfTxPower+0x48>
 801a16e:	68bb      	ldr	r3, [r7, #8]
 801a170:	2b02      	cmp	r3, #2
 801a172:	dc16      	bgt.n	801a1a2 <SUBGRF_SetRfTxPower+0x4e>
 801a174:	68bb      	ldr	r3, [r7, #8]
 801a176:	2b00      	cmp	r3, #0
 801a178:	d003      	beq.n	801a182 <SUBGRF_SetRfTxPower+0x2e>
 801a17a:	68bb      	ldr	r3, [r7, #8]
 801a17c:	2b01      	cmp	r3, #1
 801a17e:	d00a      	beq.n	801a196 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 801a180:	e00f      	b.n	801a1a2 <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 801a182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a186:	2b0f      	cmp	r3, #15
 801a188:	dd02      	ble.n	801a190 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 801a18a:	2302      	movs	r3, #2
 801a18c:	73fb      	strb	r3, [r7, #15]
            break;
 801a18e:	e009      	b.n	801a1a4 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 801a190:	2301      	movs	r3, #1
 801a192:	73fb      	strb	r3, [r7, #15]
            break;
 801a194:	e006      	b.n	801a1a4 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 801a196:	2301      	movs	r3, #1
 801a198:	73fb      	strb	r3, [r7, #15]
            break;
 801a19a:	e003      	b.n	801a1a4 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 801a19c:	2302      	movs	r3, #2
 801a19e:	73fb      	strb	r3, [r7, #15]
            break;
 801a1a0:	e000      	b.n	801a1a4 <SUBGRF_SetRfTxPower+0x50>
            break;
 801a1a2:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 801a1a4:	f997 1007 	ldrsb.w	r1, [r7, #7]
 801a1a8:	7bfb      	ldrb	r3, [r7, #15]
 801a1aa:	2202      	movs	r2, #2
 801a1ac:	4618      	mov	r0, r3
 801a1ae:	f7ff fbd3 	bl	8019958 <SUBGRF_SetTxParams>

    return paSelect;
 801a1b2:	7bfb      	ldrb	r3, [r7, #15]
}
 801a1b4:	4618      	mov	r0, r3
 801a1b6:	3710      	adds	r7, #16
 801a1b8:	46bd      	mov	sp, r7
 801a1ba:	bd80      	pop	{r7, pc}

0801a1bc <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 801a1bc:	b480      	push	{r7}
 801a1be:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 801a1c0:	2301      	movs	r3, #1
}
 801a1c2:	4618      	mov	r0, r3
 801a1c4:	46bd      	mov	sp, r7
 801a1c6:	bc80      	pop	{r7}
 801a1c8:	4770      	bx	lr
	...

0801a1cc <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801a1cc:	b580      	push	{r7, lr}
 801a1ce:	b082      	sub	sp, #8
 801a1d0:	af00      	add	r7, sp, #0
 801a1d2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 801a1d4:	4b03      	ldr	r3, [pc, #12]	@ (801a1e4 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 801a1d6:	681b      	ldr	r3, [r3, #0]
 801a1d8:	2001      	movs	r0, #1
 801a1da:	4798      	blx	r3
}
 801a1dc:	bf00      	nop
 801a1de:	3708      	adds	r7, #8
 801a1e0:	46bd      	mov	sp, r7
 801a1e2:	bd80      	pop	{r7, pc}
 801a1e4:	20001d70 	.word	0x20001d70

0801a1e8 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801a1e8:	b580      	push	{r7, lr}
 801a1ea:	b082      	sub	sp, #8
 801a1ec:	af00      	add	r7, sp, #0
 801a1ee:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 801a1f0:	4b03      	ldr	r3, [pc, #12]	@ (801a200 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 801a1f2:	681b      	ldr	r3, [r3, #0]
 801a1f4:	2002      	movs	r0, #2
 801a1f6:	4798      	blx	r3
}
 801a1f8:	bf00      	nop
 801a1fa:	3708      	adds	r7, #8
 801a1fc:	46bd      	mov	sp, r7
 801a1fe:	bd80      	pop	{r7, pc}
 801a200:	20001d70 	.word	0x20001d70

0801a204 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 801a204:	b580      	push	{r7, lr}
 801a206:	b082      	sub	sp, #8
 801a208:	af00      	add	r7, sp, #0
 801a20a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 801a20c:	4b03      	ldr	r3, [pc, #12]	@ (801a21c <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 801a20e:	681b      	ldr	r3, [r3, #0]
 801a210:	2040      	movs	r0, #64	@ 0x40
 801a212:	4798      	blx	r3
}
 801a214:	bf00      	nop
 801a216:	3708      	adds	r7, #8
 801a218:	46bd      	mov	sp, r7
 801a21a:	bd80      	pop	{r7, pc}
 801a21c:	20001d70 	.word	0x20001d70

0801a220 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 801a220:	b580      	push	{r7, lr}
 801a222:	b082      	sub	sp, #8
 801a224:	af00      	add	r7, sp, #0
 801a226:	6078      	str	r0, [r7, #4]
 801a228:	460b      	mov	r3, r1
 801a22a:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 801a22c:	78fb      	ldrb	r3, [r7, #3]
 801a22e:	2b00      	cmp	r3, #0
 801a230:	d002      	beq.n	801a238 <HAL_SUBGHZ_CADStatusCallback+0x18>
 801a232:	2b01      	cmp	r3, #1
 801a234:	d005      	beq.n	801a242 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 801a236:	e00a      	b.n	801a24e <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 801a238:	4b07      	ldr	r3, [pc, #28]	@ (801a258 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801a23a:	681b      	ldr	r3, [r3, #0]
 801a23c:	2080      	movs	r0, #128	@ 0x80
 801a23e:	4798      	blx	r3
            break;
 801a240:	e005      	b.n	801a24e <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 801a242:	4b05      	ldr	r3, [pc, #20]	@ (801a258 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801a244:	681b      	ldr	r3, [r3, #0]
 801a246:	f44f 7080 	mov.w	r0, #256	@ 0x100
 801a24a:	4798      	blx	r3
            break;
 801a24c:	bf00      	nop
    }
}
 801a24e:	bf00      	nop
 801a250:	3708      	adds	r7, #8
 801a252:	46bd      	mov	sp, r7
 801a254:	bd80      	pop	{r7, pc}
 801a256:	bf00      	nop
 801a258:	20001d70 	.word	0x20001d70

0801a25c <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801a25c:	b580      	push	{r7, lr}
 801a25e:	b082      	sub	sp, #8
 801a260:	af00      	add	r7, sp, #0
 801a262:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 801a264:	4b04      	ldr	r3, [pc, #16]	@ (801a278 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 801a266:	681b      	ldr	r3, [r3, #0]
 801a268:	f44f 7000 	mov.w	r0, #512	@ 0x200
 801a26c:	4798      	blx	r3
}
 801a26e:	bf00      	nop
 801a270:	3708      	adds	r7, #8
 801a272:	46bd      	mov	sp, r7
 801a274:	bd80      	pop	{r7, pc}
 801a276:	bf00      	nop
 801a278:	20001d70 	.word	0x20001d70

0801a27c <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801a27c:	b580      	push	{r7, lr}
 801a27e:	b082      	sub	sp, #8
 801a280:	af00      	add	r7, sp, #0
 801a282:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 801a284:	4b03      	ldr	r3, [pc, #12]	@ (801a294 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 801a286:	681b      	ldr	r3, [r3, #0]
 801a288:	2020      	movs	r0, #32
 801a28a:	4798      	blx	r3
}
 801a28c:	bf00      	nop
 801a28e:	3708      	adds	r7, #8
 801a290:	46bd      	mov	sp, r7
 801a292:	bd80      	pop	{r7, pc}
 801a294:	20001d70 	.word	0x20001d70

0801a298 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801a298:	b580      	push	{r7, lr}
 801a29a:	b082      	sub	sp, #8
 801a29c:	af00      	add	r7, sp, #0
 801a29e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 801a2a0:	4b03      	ldr	r3, [pc, #12]	@ (801a2b0 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 801a2a2:	681b      	ldr	r3, [r3, #0]
 801a2a4:	2004      	movs	r0, #4
 801a2a6:	4798      	blx	r3
}
 801a2a8:	bf00      	nop
 801a2aa:	3708      	adds	r7, #8
 801a2ac:	46bd      	mov	sp, r7
 801a2ae:	bd80      	pop	{r7, pc}
 801a2b0:	20001d70 	.word	0x20001d70

0801a2b4 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801a2b4:	b580      	push	{r7, lr}
 801a2b6:	b082      	sub	sp, #8
 801a2b8:	af00      	add	r7, sp, #0
 801a2ba:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 801a2bc:	4b03      	ldr	r3, [pc, #12]	@ (801a2cc <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 801a2be:	681b      	ldr	r3, [r3, #0]
 801a2c0:	2008      	movs	r0, #8
 801a2c2:	4798      	blx	r3
}
 801a2c4:	bf00      	nop
 801a2c6:	3708      	adds	r7, #8
 801a2c8:	46bd      	mov	sp, r7
 801a2ca:	bd80      	pop	{r7, pc}
 801a2cc:	20001d70 	.word	0x20001d70

0801a2d0 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801a2d0:	b580      	push	{r7, lr}
 801a2d2:	b082      	sub	sp, #8
 801a2d4:	af00      	add	r7, sp, #0
 801a2d6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 801a2d8:	4b03      	ldr	r3, [pc, #12]	@ (801a2e8 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 801a2da:	681b      	ldr	r3, [r3, #0]
 801a2dc:	2010      	movs	r0, #16
 801a2de:	4798      	blx	r3
}
 801a2e0:	bf00      	nop
 801a2e2:	3708      	adds	r7, #8
 801a2e4:	46bd      	mov	sp, r7
 801a2e6:	bd80      	pop	{r7, pc}
 801a2e8:	20001d70 	.word	0x20001d70

0801a2ec <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 801a2ec:	b580      	push	{r7, lr}
 801a2ee:	b084      	sub	sp, #16
 801a2f0:	af00      	add	r7, sp, #0
 801a2f2:	4603      	mov	r3, r0
 801a2f4:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 801a2f6:	f7f0 fcb0 	bl	800ac5a <RBI_IsDCDC>
 801a2fa:	4603      	mov	r3, r0
 801a2fc:	2b01      	cmp	r3, #1
 801a2fe:	d112      	bne.n	801a326 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 801a300:	f640 1023 	movw	r0, #2339	@ 0x923
 801a304:	f7ff fe1e 	bl	8019f44 <SUBGRF_ReadRegister>
 801a308:	4603      	mov	r3, r0
 801a30a:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 801a30c:	7bfb      	ldrb	r3, [r7, #15]
 801a30e:	f023 0306 	bic.w	r3, r3, #6
 801a312:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 801a314:	7bfa      	ldrb	r2, [r7, #15]
 801a316:	79fb      	ldrb	r3, [r7, #7]
 801a318:	4313      	orrs	r3, r2
 801a31a:	b2db      	uxtb	r3, r3
 801a31c:	4619      	mov	r1, r3
 801a31e:	f640 1023 	movw	r0, #2339	@ 0x923
 801a322:	f7ff fdfb 	bl	8019f1c <SUBGRF_WriteRegister>
  }
}
 801a326:	bf00      	nop
 801a328:	3710      	adds	r7, #16
 801a32a:	46bd      	mov	sp, r7
 801a32c:	bd80      	pop	{r7, pc}
	...

0801a330 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 801a330:	b480      	push	{r7}
 801a332:	b085      	sub	sp, #20
 801a334:	af00      	add	r7, sp, #0
 801a336:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 801a338:	687b      	ldr	r3, [r7, #4]
 801a33a:	2b00      	cmp	r3, #0
 801a33c:	d101      	bne.n	801a342 <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 801a33e:	231f      	movs	r3, #31
 801a340:	e017      	b.n	801a372 <SUBGRF_GetFskBandwidthRegValue+0x42>
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801a342:	2300      	movs	r3, #0
 801a344:	73fb      	strb	r3, [r7, #15]
 801a346:	e00f      	b.n	801a368 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 801a348:	7bfb      	ldrb	r3, [r7, #15]
 801a34a:	4a0c      	ldr	r2, [pc, #48]	@ (801a37c <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801a34c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801a350:	687a      	ldr	r2, [r7, #4]
 801a352:	429a      	cmp	r2, r3
 801a354:	d205      	bcs.n	801a362 <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 801a356:	7bfb      	ldrb	r3, [r7, #15]
 801a358:	4a08      	ldr	r2, [pc, #32]	@ (801a37c <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801a35a:	00db      	lsls	r3, r3, #3
 801a35c:	4413      	add	r3, r2
 801a35e:	791b      	ldrb	r3, [r3, #4]
 801a360:	e007      	b.n	801a372 <SUBGRF_GetFskBandwidthRegValue+0x42>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801a362:	7bfb      	ldrb	r3, [r7, #15]
 801a364:	3301      	adds	r3, #1
 801a366:	73fb      	strb	r3, [r7, #15]
 801a368:	7bfb      	ldrb	r3, [r7, #15]
 801a36a:	2b15      	cmp	r3, #21
 801a36c:	d9ec      	bls.n	801a348 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 801a36e:	bf00      	nop
 801a370:	e7fd      	b.n	801a36e <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 801a372:	4618      	mov	r0, r3
 801a374:	3714      	adds	r7, #20
 801a376:	46bd      	mov	sp, r7
 801a378:	bc80      	pop	{r7}
 801a37a:	4770      	bx	lr
 801a37c:	0801f604 	.word	0x0801f604

0801a380 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 801a380:	b580      	push	{r7, lr}
 801a382:	b08a      	sub	sp, #40	@ 0x28
 801a384:	af00      	add	r7, sp, #0
 801a386:	6078      	str	r0, [r7, #4]
 801a388:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 801a38a:	4b35      	ldr	r3, [pc, #212]	@ (801a460 <SUBGRF_GetCFO+0xe0>)
 801a38c:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 801a38e:	f640 0007 	movw	r0, #2055	@ 0x807
 801a392:	f7ff fdd7 	bl	8019f44 <SUBGRF_ReadRegister>
 801a396:	4603      	mov	r3, r0
 801a398:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 801a39a:	7ffb      	ldrb	r3, [r7, #31]
 801a39c:	08db      	lsrs	r3, r3, #3
 801a39e:	b2db      	uxtb	r3, r3
 801a3a0:	f003 0303 	and.w	r3, r3, #3
 801a3a4:	3328      	adds	r3, #40	@ 0x28
 801a3a6:	443b      	add	r3, r7
 801a3a8:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 801a3ac:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 801a3ae:	7ffb      	ldrb	r3, [r7, #31]
 801a3b0:	f003 0307 	and.w	r3, r3, #7
 801a3b4:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 801a3b6:	7fba      	ldrb	r2, [r7, #30]
 801a3b8:	7f7b      	ldrb	r3, [r7, #29]
 801a3ba:	3b01      	subs	r3, #1
 801a3bc:	fa02 f303 	lsl.w	r3, r2, r3
 801a3c0:	461a      	mov	r2, r3
 801a3c2:	4b28      	ldr	r3, [pc, #160]	@ (801a464 <SUBGRF_GetCFO+0xe4>)
 801a3c4:	fbb3 f3f2 	udiv	r3, r3, r2
 801a3c8:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 801a3ca:	69ba      	ldr	r2, [r7, #24]
 801a3cc:	687b      	ldr	r3, [r7, #4]
 801a3ce:	fbb2 f3f3 	udiv	r3, r2, r3
 801a3d2:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 801a3d4:	2301      	movs	r3, #1
 801a3d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 801a3da:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a3de:	697a      	ldr	r2, [r7, #20]
 801a3e0:	fb02 f303 	mul.w	r3, r2, r3
 801a3e4:	2b07      	cmp	r3, #7
 801a3e6:	d802      	bhi.n	801a3ee <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 801a3e8:	2302      	movs	r3, #2
 801a3ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  if (cf_osr * interp < 4)
 801a3ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a3f2:	697a      	ldr	r2, [r7, #20]
 801a3f4:	fb02 f303 	mul.w	r3, r2, r3
 801a3f8:	2b03      	cmp	r3, #3
 801a3fa:	d802      	bhi.n	801a402 <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 801a3fc:	2304      	movs	r3, #4
 801a3fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 801a402:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801a406:	69bb      	ldr	r3, [r7, #24]
 801a408:	fb02 f303 	mul.w	r3, r2, r3
 801a40c:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 801a40e:	f44f 60d6 	mov.w	r0, #1712	@ 0x6b0
 801a412:	f7ff fd97 	bl	8019f44 <SUBGRF_ReadRegister>
 801a416:	4603      	mov	r3, r0
 801a418:	021b      	lsls	r3, r3, #8
 801a41a:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 801a41e:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 801a420:	f240 60b1 	movw	r0, #1713	@ 0x6b1
 801a424:	f7ff fd8e 	bl	8019f44 <SUBGRF_ReadRegister>
 801a428:	4603      	mov	r3, r0
 801a42a:	461a      	mov	r2, r3
 801a42c:	6a3b      	ldr	r3, [r7, #32]
 801a42e:	4313      	orrs	r3, r2
 801a430:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 801a432:	6a3b      	ldr	r3, [r7, #32]
 801a434:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801a438:	2b00      	cmp	r3, #0
 801a43a:	d005      	beq.n	801a448 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 801a43c:	6a3b      	ldr	r3, [r7, #32]
 801a43e:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 801a442:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 801a446:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 801a448:	693b      	ldr	r3, [r7, #16]
 801a44a:	095b      	lsrs	r3, r3, #5
 801a44c:	6a3a      	ldr	r2, [r7, #32]
 801a44e:	fb02 f303 	mul.w	r3, r2, r3
 801a452:	11da      	asrs	r2, r3, #7
 801a454:	683b      	ldr	r3, [r7, #0]
 801a456:	601a      	str	r2, [r3, #0]
}
 801a458:	bf00      	nop
 801a45a:	3728      	adds	r7, #40	@ 0x28
 801a45c:	46bd      	mov	sp, r7
 801a45e:	bd80      	pop	{r7, pc}
 801a460:	0c0a0804 	.word	0x0c0a0804
 801a464:	01e84800 	.word	0x01e84800

0801a468 <RFW_TransmitLongPacket>:
static void RFW_GetPayload( uint8_t Offset, uint8_t Length );
#endif

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout, void (*TxLongPacketGetNextChunkCb) (uint8_t** buffer, uint8_t buffer_size) )
{
 801a468:	b480      	push	{r7}
 801a46a:	b087      	sub	sp, #28
 801a46c:	af00      	add	r7, sp, #0
 801a46e:	4603      	mov	r3, r0
 801a470:	60b9      	str	r1, [r7, #8]
 801a472:	607a      	str	r2, [r7, #4]
 801a474:	81fb      	strh	r3, [r7, #14]
  int32_t status=0;
 801a476:	2300      	movs	r3, #0
 801a478:	617b      	str	r3, [r7, #20]
        default:
            break;
    }
  }
#else
  status= -1;
 801a47a:	f04f 33ff 	mov.w	r3, #4294967295
 801a47e:	617b      	str	r3, [r7, #20]
#endif
  return status;
 801a480:	697b      	ldr	r3, [r7, #20]
}
 801a482:	4618      	mov	r0, r3
 801a484:	371c      	adds	r7, #28
 801a486:	46bd      	mov	sp, r7
 801a488:	bc80      	pop	{r7}
 801a48a:	4770      	bx	lr

0801a48c <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout, void (*RxLongPacketStoreChunkCb) (uint8_t* buffer, uint8_t chunk_size) )
{
 801a48c:	b480      	push	{r7}
 801a48e:	b087      	sub	sp, #28
 801a490:	af00      	add	r7, sp, #0
 801a492:	4603      	mov	r3, r0
 801a494:	60b9      	str	r1, [r7, #8]
 801a496:	607a      	str	r2, [r7, #4]
 801a498:	73fb      	strb	r3, [r7, #15]
  int32_t status=0;
 801a49a:	2300      	movs	r3, #0
 801a49c:	617b      	str	r3, [r7, #20]
    {
      SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
    }
  }
#else
  status= -1;
 801a49e:	f04f 33ff 	mov.w	r3, #4294967295
 801a4a2:	617b      	str	r3, [r7, #20]
#endif
  return status;
 801a4a4:	697b      	ldr	r3, [r7, #20]
}
 801a4a6:	4618      	mov	r0, r3
 801a4a8:	371c      	adds	r7, #28
 801a4aa:	46bd      	mov	sp, r7
 801a4ac:	bc80      	pop	{r7}
 801a4ae:	4770      	bx	lr

0801a4b0 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t* config, RadioEvents_t* RadioEvents, TimerEvent_t* TimeoutTimerEvent)
{
 801a4b0:	b480      	push	{r7}
 801a4b2:	b085      	sub	sp, #20
 801a4b4:	af00      	add	r7, sp, #0
 801a4b6:	60f8      	str	r0, [r7, #12]
 801a4b8:	60b9      	str	r1, [r7, #8]
 801a4ba:	607a      	str	r2, [r7, #4]
  RFWPacket.Init.Enable=1;
  /* Initialize Timer for end of fixed packet, started at sync*/
  TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
  return 0;
#else
  return -1;
 801a4bc:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 801a4c0:	4618      	mov	r0, r3
 801a4c2:	3714      	adds	r7, #20
 801a4c4:	46bd      	mov	sp, r7
 801a4c6:	bc80      	pop	{r7}
 801a4c8:	4770      	bx	lr

0801a4ca <RFW_DeInit>:

void RFW_DeInit( void)
{
 801a4ca:	b480      	push	{r7}
 801a4cc:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 801a4ce:	bf00      	nop
 801a4d0:	46bd      	mov	sp, r7
 801a4d2:	bc80      	pop	{r7}
 801a4d4:	4770      	bx	lr

0801a4d6 <RFW_Is_Init>:

uint8_t RFW_Is_Init( void)
{
 801a4d6:	b480      	push	{r7}
 801a4d8:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
 801a4da:	2300      	movs	r3, #0
#endif
}
 801a4dc:	4618      	mov	r0, r3
 801a4de:	46bd      	mov	sp, r7
 801a4e0:	bc80      	pop	{r7}
 801a4e2:	4770      	bx	lr

0801a4e4 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void)
{
 801a4e4:	b480      	push	{r7}
 801a4e6:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
 801a4e8:	2300      	movs	r3, #0
#endif
}
 801a4ea:	4618      	mov	r0, r3
 801a4ec:	46bd      	mov	sp, r7
 801a4ee:	bc80      	pop	{r7}
 801a4f0:	4770      	bx	lr

0801a4f2 <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch)
{
 801a4f2:	b480      	push	{r7}
 801a4f4:	b083      	sub	sp, #12
 801a4f6:	af00      	add	r7, sp, #0
 801a4f8:	4603      	mov	r3, r0
 801a4fa:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 801a4fc:	bf00      	nop
 801a4fe:	370c      	adds	r7, #12
 801a500:	46bd      	mov	sp, r7
 801a502:	bc80      	pop	{r7}
 801a504:	4770      	bx	lr

0801a506 <RFW_TransmitInit>:

int32_t RFW_TransmitInit(uint8_t* inOutBuffer, uint8_t size, uint8_t* outSize)
{
 801a506:	b480      	push	{r7}
 801a508:	b087      	sub	sp, #28
 801a50a:	af00      	add	r7, sp, #0
 801a50c:	60f8      	str	r0, [r7, #12]
 801a50e:	460b      	mov	r3, r1
 801a510:	607a      	str	r2, [r7, #4]
 801a512:	72fb      	strb	r3, [r7, #11]
  int32_t status=-1;
 801a514:	f04f 33ff 	mov.w	r3, #4294967295
 801a518:	617b      	str	r3, [r7, #20]
    RFWPacket.LongPacketModeEnable=0;

    status= 0;
  }
#endif
  return status;
 801a51a:	697b      	ldr	r3, [r7, #20]
}
 801a51c:	4618      	mov	r0, r3
 801a51e:	371c      	adds	r7, #28
 801a520:	46bd      	mov	sp, r7
 801a522:	bc80      	pop	{r7}
 801a524:	4770      	bx	lr

0801a526 <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 801a526:	b480      	push	{r7}
 801a528:	af00      	add	r7, sp, #0
  RFWPacket.RxPayloadOffset=0;

  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
 801a52a:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 801a52e:	4618      	mov	r0, r3
 801a530:	46bd      	mov	sp, r7
 801a532:	bc80      	pop	{r7}
 801a534:	4770      	bx	lr

0801a536 <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket(void)
{
 801a536:	b480      	push	{r7}
 801a538:	af00      	add	r7, sp, #0
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_GPKTCTL1AR);
  SUBGRF_WriteRegister(SUBGHZ_GPKTCTL1AR, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_GRTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 801a53a:	bf00      	nop
 801a53c:	46bd      	mov	sp, r7
 801a53e:	bc80      	pop	{r7}
 801a540:	4770      	bx	lr

0801a542 <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 801a542:	b480      	push	{r7}
 801a544:	af00      	add	r7, sp, #0
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 801a546:	bf00      	nop
 801a548:	46bd      	mov	sp, r7
 801a54a:	bc80      	pop	{r7}
 801a54c:	4770      	bx	lr

0801a54e <RFW_SetRadioModem>:

void RFW_SetRadioModem(RadioModems_t Modem)
{
 801a54e:	b480      	push	{r7}
 801a550:	b083      	sub	sp, #12
 801a552:	af00      	add	r7, sp, #0
 801a554:	4603      	mov	r3, r0
 801a556:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 801a558:	bf00      	nop
 801a55a:	370c      	adds	r7, #12
 801a55c:	46bd      	mov	sp, r7
 801a55e:	bc80      	pop	{r7}
 801a560:	4770      	bx	lr
	...

0801a564 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801a564:	b480      	push	{r7}
 801a566:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801a568:	4b04      	ldr	r3, [pc, #16]	@ (801a57c <UTIL_LPM_Init+0x18>)
 801a56a:	2200      	movs	r2, #0
 801a56c:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801a56e:	4b04      	ldr	r3, [pc, #16]	@ (801a580 <UTIL_LPM_Init+0x1c>)
 801a570:	2200      	movs	r2, #0
 801a572:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801a574:	bf00      	nop
 801a576:	46bd      	mov	sp, r7
 801a578:	bc80      	pop	{r7}
 801a57a:	4770      	bx	lr
 801a57c:	20001d74 	.word	0x20001d74
 801a580:	20001d78 	.word	0x20001d78

0801a584 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801a584:	b480      	push	{r7}
 801a586:	b087      	sub	sp, #28
 801a588:	af00      	add	r7, sp, #0
 801a58a:	6078      	str	r0, [r7, #4]
 801a58c:	460b      	mov	r3, r1
 801a58e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a590:	f3ef 8310 	mrs	r3, PRIMASK
 801a594:	613b      	str	r3, [r7, #16]
  return(result);
 801a596:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801a598:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a59a:	b672      	cpsid	i
}
 801a59c:	bf00      	nop
  
  switch( state )
 801a59e:	78fb      	ldrb	r3, [r7, #3]
 801a5a0:	2b00      	cmp	r3, #0
 801a5a2:	d008      	beq.n	801a5b6 <UTIL_LPM_SetStopMode+0x32>
 801a5a4:	2b01      	cmp	r3, #1
 801a5a6:	d10e      	bne.n	801a5c6 <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 801a5a8:	4b0d      	ldr	r3, [pc, #52]	@ (801a5e0 <UTIL_LPM_SetStopMode+0x5c>)
 801a5aa:	681a      	ldr	r2, [r3, #0]
 801a5ac:	687b      	ldr	r3, [r7, #4]
 801a5ae:	4313      	orrs	r3, r2
 801a5b0:	4a0b      	ldr	r2, [pc, #44]	@ (801a5e0 <UTIL_LPM_SetStopMode+0x5c>)
 801a5b2:	6013      	str	r3, [r2, #0]
      break;
 801a5b4:	e008      	b.n	801a5c8 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 801a5b6:	687b      	ldr	r3, [r7, #4]
 801a5b8:	43da      	mvns	r2, r3
 801a5ba:	4b09      	ldr	r3, [pc, #36]	@ (801a5e0 <UTIL_LPM_SetStopMode+0x5c>)
 801a5bc:	681b      	ldr	r3, [r3, #0]
 801a5be:	4013      	ands	r3, r2
 801a5c0:	4a07      	ldr	r2, [pc, #28]	@ (801a5e0 <UTIL_LPM_SetStopMode+0x5c>)
 801a5c2:	6013      	str	r3, [r2, #0]
      break;
 801a5c4:	e000      	b.n	801a5c8 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 801a5c6:	bf00      	nop
 801a5c8:	697b      	ldr	r3, [r7, #20]
 801a5ca:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a5cc:	68fb      	ldr	r3, [r7, #12]
 801a5ce:	f383 8810 	msr	PRIMASK, r3
}
 801a5d2:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801a5d4:	bf00      	nop
 801a5d6:	371c      	adds	r7, #28
 801a5d8:	46bd      	mov	sp, r7
 801a5da:	bc80      	pop	{r7}
 801a5dc:	4770      	bx	lr
 801a5de:	bf00      	nop
 801a5e0:	20001d74 	.word	0x20001d74

0801a5e4 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801a5e4:	b480      	push	{r7}
 801a5e6:	b087      	sub	sp, #28
 801a5e8:	af00      	add	r7, sp, #0
 801a5ea:	6078      	str	r0, [r7, #4]
 801a5ec:	460b      	mov	r3, r1
 801a5ee:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a5f0:	f3ef 8310 	mrs	r3, PRIMASK
 801a5f4:	613b      	str	r3, [r7, #16]
  return(result);
 801a5f6:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801a5f8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a5fa:	b672      	cpsid	i
}
 801a5fc:	bf00      	nop
  
  switch(state)
 801a5fe:	78fb      	ldrb	r3, [r7, #3]
 801a600:	2b00      	cmp	r3, #0
 801a602:	d008      	beq.n	801a616 <UTIL_LPM_SetOffMode+0x32>
 801a604:	2b01      	cmp	r3, #1
 801a606:	d10e      	bne.n	801a626 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801a608:	4b0d      	ldr	r3, [pc, #52]	@ (801a640 <UTIL_LPM_SetOffMode+0x5c>)
 801a60a:	681a      	ldr	r2, [r3, #0]
 801a60c:	687b      	ldr	r3, [r7, #4]
 801a60e:	4313      	orrs	r3, r2
 801a610:	4a0b      	ldr	r2, [pc, #44]	@ (801a640 <UTIL_LPM_SetOffMode+0x5c>)
 801a612:	6013      	str	r3, [r2, #0]
      break;
 801a614:	e008      	b.n	801a628 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801a616:	687b      	ldr	r3, [r7, #4]
 801a618:	43da      	mvns	r2, r3
 801a61a:	4b09      	ldr	r3, [pc, #36]	@ (801a640 <UTIL_LPM_SetOffMode+0x5c>)
 801a61c:	681b      	ldr	r3, [r3, #0]
 801a61e:	4013      	ands	r3, r2
 801a620:	4a07      	ldr	r2, [pc, #28]	@ (801a640 <UTIL_LPM_SetOffMode+0x5c>)
 801a622:	6013      	str	r3, [r2, #0]
      break;
 801a624:	e000      	b.n	801a628 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801a626:	bf00      	nop
 801a628:	697b      	ldr	r3, [r7, #20]
 801a62a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a62c:	68fb      	ldr	r3, [r7, #12]
 801a62e:	f383 8810 	msr	PRIMASK, r3
}
 801a632:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801a634:	bf00      	nop
 801a636:	371c      	adds	r7, #28
 801a638:	46bd      	mov	sp, r7
 801a63a:	bc80      	pop	{r7}
 801a63c:	4770      	bx	lr
 801a63e:	bf00      	nop
 801a640:	20001d78 	.word	0x20001d78

0801a644 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 801a644:	b580      	push	{r7, lr}
 801a646:	b084      	sub	sp, #16
 801a648:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a64a:	f3ef 8310 	mrs	r3, PRIMASK
 801a64e:	60bb      	str	r3, [r7, #8]
  return(result);
 801a650:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 801a652:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801a654:	b672      	cpsid	i
}
 801a656:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 801a658:	4b12      	ldr	r3, [pc, #72]	@ (801a6a4 <UTIL_LPM_EnterLowPower+0x60>)
 801a65a:	681b      	ldr	r3, [r3, #0]
 801a65c:	2b00      	cmp	r3, #0
 801a65e:	d006      	beq.n	801a66e <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 801a660:	4b11      	ldr	r3, [pc, #68]	@ (801a6a8 <UTIL_LPM_EnterLowPower+0x64>)
 801a662:	681b      	ldr	r3, [r3, #0]
 801a664:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 801a666:	4b10      	ldr	r3, [pc, #64]	@ (801a6a8 <UTIL_LPM_EnterLowPower+0x64>)
 801a668:	685b      	ldr	r3, [r3, #4]
 801a66a:	4798      	blx	r3
 801a66c:	e010      	b.n	801a690 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801a66e:	4b0f      	ldr	r3, [pc, #60]	@ (801a6ac <UTIL_LPM_EnterLowPower+0x68>)
 801a670:	681b      	ldr	r3, [r3, #0]
 801a672:	2b00      	cmp	r3, #0
 801a674:	d006      	beq.n	801a684 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 801a676:	4b0c      	ldr	r3, [pc, #48]	@ (801a6a8 <UTIL_LPM_EnterLowPower+0x64>)
 801a678:	689b      	ldr	r3, [r3, #8]
 801a67a:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 801a67c:	4b0a      	ldr	r3, [pc, #40]	@ (801a6a8 <UTIL_LPM_EnterLowPower+0x64>)
 801a67e:	68db      	ldr	r3, [r3, #12]
 801a680:	4798      	blx	r3
 801a682:	e005      	b.n	801a690 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 801a684:	4b08      	ldr	r3, [pc, #32]	@ (801a6a8 <UTIL_LPM_EnterLowPower+0x64>)
 801a686:	691b      	ldr	r3, [r3, #16]
 801a688:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 801a68a:	4b07      	ldr	r3, [pc, #28]	@ (801a6a8 <UTIL_LPM_EnterLowPower+0x64>)
 801a68c:	695b      	ldr	r3, [r3, #20]
 801a68e:	4798      	blx	r3
 801a690:	68fb      	ldr	r3, [r7, #12]
 801a692:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a694:	687b      	ldr	r3, [r7, #4]
 801a696:	f383 8810 	msr	PRIMASK, r3
}
 801a69a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 801a69c:	bf00      	nop
 801a69e:	3710      	adds	r7, #16
 801a6a0:	46bd      	mov	sp, r7
 801a6a2:	bd80      	pop	{r7, pc}
 801a6a4:	20001d74 	.word	0x20001d74
 801a6a8:	0801f07c 	.word	0x0801f07c
 801a6ac:	20001d78 	.word	0x20001d78

0801a6b0 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 801a6b0:	b480      	push	{r7}
 801a6b2:	b087      	sub	sp, #28
 801a6b4:	af00      	add	r7, sp, #0
 801a6b6:	60f8      	str	r0, [r7, #12]
 801a6b8:	60b9      	str	r1, [r7, #8]
 801a6ba:	4613      	mov	r3, r2
 801a6bc:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 801a6be:	68fb      	ldr	r3, [r7, #12]
 801a6c0:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 801a6c2:	68bb      	ldr	r3, [r7, #8]
 801a6c4:	613b      	str	r3, [r7, #16]

  while( size-- )
 801a6c6:	e007      	b.n	801a6d8 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 801a6c8:	693a      	ldr	r2, [r7, #16]
 801a6ca:	1c53      	adds	r3, r2, #1
 801a6cc:	613b      	str	r3, [r7, #16]
 801a6ce:	697b      	ldr	r3, [r7, #20]
 801a6d0:	1c59      	adds	r1, r3, #1
 801a6d2:	6179      	str	r1, [r7, #20]
 801a6d4:	7812      	ldrb	r2, [r2, #0]
 801a6d6:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801a6d8:	88fb      	ldrh	r3, [r7, #6]
 801a6da:	1e5a      	subs	r2, r3, #1
 801a6dc:	80fa      	strh	r2, [r7, #6]
 801a6de:	2b00      	cmp	r3, #0
 801a6e0:	d1f2      	bne.n	801a6c8 <UTIL_MEM_cpy_8+0x18>
    }
}
 801a6e2:	bf00      	nop
 801a6e4:	bf00      	nop
 801a6e6:	371c      	adds	r7, #28
 801a6e8:	46bd      	mov	sp, r7
 801a6ea:	bc80      	pop	{r7}
 801a6ec:	4770      	bx	lr

0801a6ee <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 801a6ee:	b480      	push	{r7}
 801a6f0:	b085      	sub	sp, #20
 801a6f2:	af00      	add	r7, sp, #0
 801a6f4:	6078      	str	r0, [r7, #4]
 801a6f6:	460b      	mov	r3, r1
 801a6f8:	70fb      	strb	r3, [r7, #3]
 801a6fa:	4613      	mov	r3, r2
 801a6fc:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801a6fe:	687b      	ldr	r3, [r7, #4]
 801a700:	60fb      	str	r3, [r7, #12]
  while( size-- )
 801a702:	e004      	b.n	801a70e <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 801a704:	68fb      	ldr	r3, [r7, #12]
 801a706:	1c5a      	adds	r2, r3, #1
 801a708:	60fa      	str	r2, [r7, #12]
 801a70a:	78fa      	ldrb	r2, [r7, #3]
 801a70c:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801a70e:	883b      	ldrh	r3, [r7, #0]
 801a710:	1e5a      	subs	r2, r3, #1
 801a712:	803a      	strh	r2, [r7, #0]
 801a714:	2b00      	cmp	r3, #0
 801a716:	d1f5      	bne.n	801a704 <UTIL_MEM_set_8+0x16>
  }
}
 801a718:	bf00      	nop
 801a71a:	bf00      	nop
 801a71c:	3714      	adds	r7, #20
 801a71e:	46bd      	mov	sp, r7
 801a720:	bc80      	pop	{r7}
 801a722:	4770      	bx	lr

0801a724 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801a724:	b082      	sub	sp, #8
 801a726:	b480      	push	{r7}
 801a728:	b087      	sub	sp, #28
 801a72a:	af00      	add	r7, sp, #0
 801a72c:	60f8      	str	r0, [r7, #12]
 801a72e:	1d38      	adds	r0, r7, #4
 801a730:	e880 0006 	stmia.w	r0, {r1, r2}
 801a734:	627b      	str	r3, [r7, #36]	@ 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801a736:	2300      	movs	r3, #0
 801a738:	613b      	str	r3, [r7, #16]
 801a73a:	2300      	movs	r3, #0
 801a73c:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 801a73e:	687a      	ldr	r2, [r7, #4]
 801a740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a742:	4413      	add	r3, r2
 801a744:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801a746:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801a74a:	b29a      	uxth	r2, r3
 801a74c:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 801a750:	b29b      	uxth	r3, r3
 801a752:	4413      	add	r3, r2
 801a754:	b29b      	uxth	r3, r3
 801a756:	b21b      	sxth	r3, r3
 801a758:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 801a75a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801a75e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801a762:	db0a      	blt.n	801a77a <SysTimeAdd+0x56>
  {
    c.Seconds++;
 801a764:	693b      	ldr	r3, [r7, #16]
 801a766:	3301      	adds	r3, #1
 801a768:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 801a76a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801a76e:	b29b      	uxth	r3, r3
 801a770:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 801a774:	b29b      	uxth	r3, r3
 801a776:	b21b      	sxth	r3, r3
 801a778:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801a77a:	68fb      	ldr	r3, [r7, #12]
 801a77c:	461a      	mov	r2, r3
 801a77e:	f107 0310 	add.w	r3, r7, #16
 801a782:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a786:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801a78a:	68f8      	ldr	r0, [r7, #12]
 801a78c:	371c      	adds	r7, #28
 801a78e:	46bd      	mov	sp, r7
 801a790:	bc80      	pop	{r7}
 801a792:	b002      	add	sp, #8
 801a794:	4770      	bx	lr

0801a796 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801a796:	b082      	sub	sp, #8
 801a798:	b480      	push	{r7}
 801a79a:	b087      	sub	sp, #28
 801a79c:	af00      	add	r7, sp, #0
 801a79e:	60f8      	str	r0, [r7, #12]
 801a7a0:	1d38      	adds	r0, r7, #4
 801a7a2:	e880 0006 	stmia.w	r0, {r1, r2}
 801a7a6:	627b      	str	r3, [r7, #36]	@ 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801a7a8:	2300      	movs	r3, #0
 801a7aa:	613b      	str	r3, [r7, #16]
 801a7ac:	2300      	movs	r3, #0
 801a7ae:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 801a7b0:	687a      	ldr	r2, [r7, #4]
 801a7b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a7b4:	1ad3      	subs	r3, r2, r3
 801a7b6:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801a7b8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801a7bc:	b29a      	uxth	r2, r3
 801a7be:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 801a7c2:	b29b      	uxth	r3, r3
 801a7c4:	1ad3      	subs	r3, r2, r3
 801a7c6:	b29b      	uxth	r3, r3
 801a7c8:	b21b      	sxth	r3, r3
 801a7ca:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 801a7cc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801a7d0:	2b00      	cmp	r3, #0
 801a7d2:	da0a      	bge.n	801a7ea <SysTimeSub+0x54>
  {
    c.Seconds--;
 801a7d4:	693b      	ldr	r3, [r7, #16]
 801a7d6:	3b01      	subs	r3, #1
 801a7d8:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 801a7da:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801a7de:	b29b      	uxth	r3, r3
 801a7e0:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 801a7e4:	b29b      	uxth	r3, r3
 801a7e6:	b21b      	sxth	r3, r3
 801a7e8:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801a7ea:	68fb      	ldr	r3, [r7, #12]
 801a7ec:	461a      	mov	r2, r3
 801a7ee:	f107 0310 	add.w	r3, r7, #16
 801a7f2:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a7f6:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801a7fa:	68f8      	ldr	r0, [r7, #12]
 801a7fc:	371c      	adds	r7, #28
 801a7fe:	46bd      	mov	sp, r7
 801a800:	bc80      	pop	{r7}
 801a802:	b002      	add	sp, #8
 801a804:	4770      	bx	lr
	...

0801a808 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 801a808:	b580      	push	{r7, lr}
 801a80a:	b088      	sub	sp, #32
 801a80c:	af02      	add	r7, sp, #8
 801a80e:	463b      	mov	r3, r7
 801a810:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801a814:	2300      	movs	r3, #0
 801a816:	60bb      	str	r3, [r7, #8]
 801a818:	2300      	movs	r3, #0
 801a81a:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801a81c:	4b10      	ldr	r3, [pc, #64]	@ (801a860 <SysTimeSet+0x58>)
 801a81e:	691b      	ldr	r3, [r3, #16]
 801a820:	f107 0208 	add.w	r2, r7, #8
 801a824:	3204      	adds	r2, #4
 801a826:	4610      	mov	r0, r2
 801a828:	4798      	blx	r3
 801a82a:	4603      	mov	r3, r0
 801a82c:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801a82e:	f107 0010 	add.w	r0, r7, #16
 801a832:	68fb      	ldr	r3, [r7, #12]
 801a834:	9300      	str	r3, [sp, #0]
 801a836:	68bb      	ldr	r3, [r7, #8]
 801a838:	463a      	mov	r2, r7
 801a83a:	ca06      	ldmia	r2, {r1, r2}
 801a83c:	f7ff ffab 	bl	801a796 <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801a840:	4b07      	ldr	r3, [pc, #28]	@ (801a860 <SysTimeSet+0x58>)
 801a842:	681b      	ldr	r3, [r3, #0]
 801a844:	693a      	ldr	r2, [r7, #16]
 801a846:	4610      	mov	r0, r2
 801a848:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801a84a:	4b05      	ldr	r3, [pc, #20]	@ (801a860 <SysTimeSet+0x58>)
 801a84c:	689b      	ldr	r3, [r3, #8]
 801a84e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801a852:	4610      	mov	r0, r2
 801a854:	4798      	blx	r3
}
 801a856:	bf00      	nop
 801a858:	3718      	adds	r7, #24
 801a85a:	46bd      	mov	sp, r7
 801a85c:	bd80      	pop	{r7, pc}
 801a85e:	bf00      	nop
 801a860:	0801f160 	.word	0x0801f160

0801a864 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801a864:	b580      	push	{r7, lr}
 801a866:	b08a      	sub	sp, #40	@ 0x28
 801a868:	af02      	add	r7, sp, #8
 801a86a:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801a86c:	2300      	movs	r3, #0
 801a86e:	61bb      	str	r3, [r7, #24]
 801a870:	2300      	movs	r3, #0
 801a872:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801a874:	2300      	movs	r3, #0
 801a876:	613b      	str	r3, [r7, #16]
 801a878:	2300      	movs	r3, #0
 801a87a:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801a87c:	4b14      	ldr	r3, [pc, #80]	@ (801a8d0 <SysTimeGet+0x6c>)
 801a87e:	691b      	ldr	r3, [r3, #16]
 801a880:	f107 0218 	add.w	r2, r7, #24
 801a884:	3204      	adds	r2, #4
 801a886:	4610      	mov	r0, r2
 801a888:	4798      	blx	r3
 801a88a:	4603      	mov	r3, r0
 801a88c:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801a88e:	4b10      	ldr	r3, [pc, #64]	@ (801a8d0 <SysTimeGet+0x6c>)
 801a890:	68db      	ldr	r3, [r3, #12]
 801a892:	4798      	blx	r3
 801a894:	4603      	mov	r3, r0
 801a896:	b21b      	sxth	r3, r3
 801a898:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801a89a:	4b0d      	ldr	r3, [pc, #52]	@ (801a8d0 <SysTimeGet+0x6c>)
 801a89c:	685b      	ldr	r3, [r3, #4]
 801a89e:	4798      	blx	r3
 801a8a0:	4603      	mov	r3, r0
 801a8a2:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801a8a4:	f107 0010 	add.w	r0, r7, #16
 801a8a8:	69fb      	ldr	r3, [r7, #28]
 801a8aa:	9300      	str	r3, [sp, #0]
 801a8ac:	69bb      	ldr	r3, [r7, #24]
 801a8ae:	f107 0208 	add.w	r2, r7, #8
 801a8b2:	ca06      	ldmia	r2, {r1, r2}
 801a8b4:	f7ff ff36 	bl	801a724 <SysTimeAdd>

  return sysTime;
 801a8b8:	687b      	ldr	r3, [r7, #4]
 801a8ba:	461a      	mov	r2, r3
 801a8bc:	f107 0310 	add.w	r3, r7, #16
 801a8c0:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a8c4:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801a8c8:	6878      	ldr	r0, [r7, #4]
 801a8ca:	3720      	adds	r7, #32
 801a8cc:	46bd      	mov	sp, r7
 801a8ce:	bd80      	pop	{r7, pc}
 801a8d0:	0801f160 	.word	0x0801f160

0801a8d4 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801a8d4:	b580      	push	{r7, lr}
 801a8d6:	b084      	sub	sp, #16
 801a8d8:	af00      	add	r7, sp, #0
 801a8da:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801a8dc:	2300      	movs	r3, #0
 801a8de:	60bb      	str	r3, [r7, #8]
 801a8e0:	2300      	movs	r3, #0
 801a8e2:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801a8e4:	4b0a      	ldr	r3, [pc, #40]	@ (801a910 <SysTimeGetMcuTime+0x3c>)
 801a8e6:	691b      	ldr	r3, [r3, #16]
 801a8e8:	f107 0208 	add.w	r2, r7, #8
 801a8ec:	3204      	adds	r2, #4
 801a8ee:	4610      	mov	r0, r2
 801a8f0:	4798      	blx	r3
 801a8f2:	4603      	mov	r3, r0
 801a8f4:	60bb      	str	r3, [r7, #8]

  return calendarTime;
 801a8f6:	687b      	ldr	r3, [r7, #4]
 801a8f8:	461a      	mov	r2, r3
 801a8fa:	f107 0308 	add.w	r3, r7, #8
 801a8fe:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a902:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801a906:	6878      	ldr	r0, [r7, #4]
 801a908:	3710      	adds	r7, #16
 801a90a:	46bd      	mov	sp, r7
 801a90c:	bd80      	pop	{r7, pc}
 801a90e:	bf00      	nop
 801a910:	0801f160 	.word	0x0801f160

0801a914 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 801a914:	b580      	push	{r7, lr}
 801a916:	b088      	sub	sp, #32
 801a918:	af02      	add	r7, sp, #8
 801a91a:	463b      	mov	r3, r7
 801a91c:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801a920:	4b0f      	ldr	r3, [pc, #60]	@ (801a960 <SysTimeToMs+0x4c>)
 801a922:	68db      	ldr	r3, [r3, #12]
 801a924:	4798      	blx	r3
 801a926:	4603      	mov	r3, r0
 801a928:	b21b      	sxth	r3, r3
 801a92a:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801a92c:	4b0c      	ldr	r3, [pc, #48]	@ (801a960 <SysTimeToMs+0x4c>)
 801a92e:	685b      	ldr	r3, [r3, #4]
 801a930:	4798      	blx	r3
 801a932:	4603      	mov	r3, r0
 801a934:	613b      	str	r3, [r7, #16]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 801a936:	f107 0008 	add.w	r0, r7, #8
 801a93a:	697b      	ldr	r3, [r7, #20]
 801a93c:	9300      	str	r3, [sp, #0]
 801a93e:	693b      	ldr	r3, [r7, #16]
 801a940:	463a      	mov	r2, r7
 801a942:	ca06      	ldmia	r2, {r1, r2}
 801a944:	f7ff ff27 	bl	801a796 <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 801a948:	68bb      	ldr	r3, [r7, #8]
 801a94a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801a94e:	fb02 f303 	mul.w	r3, r2, r3
 801a952:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801a956:	4413      	add	r3, r2
}
 801a958:	4618      	mov	r0, r3
 801a95a:	3718      	adds	r7, #24
 801a95c:	46bd      	mov	sp, r7
 801a95e:	bd80      	pop	{r7, pc}
 801a960:	0801f160 	.word	0x0801f160

0801a964 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 801a964:	b580      	push	{r7, lr}
 801a966:	b08a      	sub	sp, #40	@ 0x28
 801a968:	af02      	add	r7, sp, #8
 801a96a:	6078      	str	r0, [r7, #4]
 801a96c:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 801a96e:	683b      	ldr	r3, [r7, #0]
 801a970:	4a19      	ldr	r2, [pc, #100]	@ (801a9d8 <SysTimeFromMs+0x74>)
 801a972:	fba2 2303 	umull	r2, r3, r2, r3
 801a976:	099b      	lsrs	r3, r3, #6
 801a978:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 801a97a:	69fb      	ldr	r3, [r7, #28]
 801a97c:	617b      	str	r3, [r7, #20]
 801a97e:	683b      	ldr	r3, [r7, #0]
 801a980:	b29a      	uxth	r2, r3
 801a982:	69fb      	ldr	r3, [r7, #28]
 801a984:	b29b      	uxth	r3, r3
 801a986:	4619      	mov	r1, r3
 801a988:	0149      	lsls	r1, r1, #5
 801a98a:	1ac9      	subs	r1, r1, r3
 801a98c:	0089      	lsls	r1, r1, #2
 801a98e:	440b      	add	r3, r1
 801a990:	00db      	lsls	r3, r3, #3
 801a992:	b29b      	uxth	r3, r3
 801a994:	1ad3      	subs	r3, r2, r3
 801a996:	b29b      	uxth	r3, r3
 801a998:	b21b      	sxth	r3, r3
 801a99a:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 801a99c:	f107 030c 	add.w	r3, r7, #12
 801a9a0:	2200      	movs	r2, #0
 801a9a2:	601a      	str	r2, [r3, #0]
 801a9a4:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801a9a6:	4b0d      	ldr	r3, [pc, #52]	@ (801a9dc <SysTimeFromMs+0x78>)
 801a9a8:	68db      	ldr	r3, [r3, #12]
 801a9aa:	4798      	blx	r3
 801a9ac:	4603      	mov	r3, r0
 801a9ae:	b21b      	sxth	r3, r3
 801a9b0:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801a9b2:	4b0a      	ldr	r3, [pc, #40]	@ (801a9dc <SysTimeFromMs+0x78>)
 801a9b4:	685b      	ldr	r3, [r3, #4]
 801a9b6:	4798      	blx	r3
 801a9b8:	4603      	mov	r3, r0
 801a9ba:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 801a9bc:	6878      	ldr	r0, [r7, #4]
 801a9be:	693b      	ldr	r3, [r7, #16]
 801a9c0:	9300      	str	r3, [sp, #0]
 801a9c2:	68fb      	ldr	r3, [r7, #12]
 801a9c4:	f107 0214 	add.w	r2, r7, #20
 801a9c8:	ca06      	ldmia	r2, {r1, r2}
 801a9ca:	f7ff feab 	bl	801a724 <SysTimeAdd>
}
 801a9ce:	6878      	ldr	r0, [r7, #4]
 801a9d0:	3720      	adds	r7, #32
 801a9d2:	46bd      	mov	sp, r7
 801a9d4:	bd80      	pop	{r7, pc}
 801a9d6:	bf00      	nop
 801a9d8:	10624dd3 	.word	0x10624dd3
 801a9dc:	0801f160 	.word	0x0801f160

0801a9e0 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 801a9e0:	b480      	push	{r7}
 801a9e2:	b085      	sub	sp, #20
 801a9e4:	af00      	add	r7, sp, #0
 801a9e6:	6078      	str	r0, [r7, #4]
  int i = 0;
 801a9e8:	2300      	movs	r3, #0
 801a9ea:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801a9ec:	e00e      	b.n	801aa0c <ee_skip_atoi+0x2c>
 801a9ee:	68fa      	ldr	r2, [r7, #12]
 801a9f0:	4613      	mov	r3, r2
 801a9f2:	009b      	lsls	r3, r3, #2
 801a9f4:	4413      	add	r3, r2
 801a9f6:	005b      	lsls	r3, r3, #1
 801a9f8:	4618      	mov	r0, r3
 801a9fa:	687b      	ldr	r3, [r7, #4]
 801a9fc:	681b      	ldr	r3, [r3, #0]
 801a9fe:	1c59      	adds	r1, r3, #1
 801aa00:	687a      	ldr	r2, [r7, #4]
 801aa02:	6011      	str	r1, [r2, #0]
 801aa04:	781b      	ldrb	r3, [r3, #0]
 801aa06:	4403      	add	r3, r0
 801aa08:	3b30      	subs	r3, #48	@ 0x30
 801aa0a:	60fb      	str	r3, [r7, #12]
 801aa0c:	687b      	ldr	r3, [r7, #4]
 801aa0e:	681b      	ldr	r3, [r3, #0]
 801aa10:	781b      	ldrb	r3, [r3, #0]
 801aa12:	2b2f      	cmp	r3, #47	@ 0x2f
 801aa14:	d904      	bls.n	801aa20 <ee_skip_atoi+0x40>
 801aa16:	687b      	ldr	r3, [r7, #4]
 801aa18:	681b      	ldr	r3, [r3, #0]
 801aa1a:	781b      	ldrb	r3, [r3, #0]
 801aa1c:	2b39      	cmp	r3, #57	@ 0x39
 801aa1e:	d9e6      	bls.n	801a9ee <ee_skip_atoi+0xe>
  return i;
 801aa20:	68fb      	ldr	r3, [r7, #12]
}
 801aa22:	4618      	mov	r0, r3
 801aa24:	3714      	adds	r7, #20
 801aa26:	46bd      	mov	sp, r7
 801aa28:	bc80      	pop	{r7}
 801aa2a:	4770      	bx	lr

0801aa2c <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 801aa2c:	b480      	push	{r7}
 801aa2e:	b099      	sub	sp, #100	@ 0x64
 801aa30:	af00      	add	r7, sp, #0
 801aa32:	60f8      	str	r0, [r7, #12]
 801aa34:	60b9      	str	r1, [r7, #8]
 801aa36:	607a      	str	r2, [r7, #4]
 801aa38:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 801aa3a:	4b71      	ldr	r3, [pc, #452]	@ (801ac00 <ee_number+0x1d4>)
 801aa3c:	681b      	ldr	r3, [r3, #0]
 801aa3e:	65bb      	str	r3, [r7, #88]	@ 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801aa40:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801aa42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801aa46:	2b00      	cmp	r3, #0
 801aa48:	d002      	beq.n	801aa50 <ee_number+0x24>
 801aa4a:	4b6e      	ldr	r3, [pc, #440]	@ (801ac04 <ee_number+0x1d8>)
 801aa4c:	681b      	ldr	r3, [r3, #0]
 801aa4e:	65bb      	str	r3, [r7, #88]	@ 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 801aa50:	683b      	ldr	r3, [r7, #0]
 801aa52:	2b01      	cmp	r3, #1
 801aa54:	dd02      	ble.n	801aa5c <ee_number+0x30>
 801aa56:	683b      	ldr	r3, [r7, #0]
 801aa58:	2b24      	cmp	r3, #36	@ 0x24
 801aa5a:	dd01      	ble.n	801aa60 <ee_number+0x34>
 801aa5c:	2300      	movs	r3, #0
 801aa5e:	e0ca      	b.n	801abf6 <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 801aa60:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801aa62:	f003 0301 	and.w	r3, r3, #1
 801aa66:	2b00      	cmp	r3, #0
 801aa68:	d001      	beq.n	801aa6e <ee_number+0x42>
 801aa6a:	2330      	movs	r3, #48	@ 0x30
 801aa6c:	e000      	b.n	801aa70 <ee_number+0x44>
 801aa6e:	2320      	movs	r3, #32
 801aa70:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  sign = 0;
 801aa74:	2300      	movs	r3, #0
 801aa76:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if (type & SIGN)
 801aa7a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801aa7c:	f003 0302 	and.w	r3, r3, #2
 801aa80:	2b00      	cmp	r3, #0
 801aa82:	d00b      	beq.n	801aa9c <ee_number+0x70>
  {
    if (num < 0)
 801aa84:	687b      	ldr	r3, [r7, #4]
 801aa86:	2b00      	cmp	r3, #0
 801aa88:	da08      	bge.n	801aa9c <ee_number+0x70>
    {
      sign = '-';
 801aa8a:	232d      	movs	r3, #45	@ 0x2d
 801aa8c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
      num = -num;
 801aa90:	687b      	ldr	r3, [r7, #4]
 801aa92:	425b      	negs	r3, r3
 801aa94:	607b      	str	r3, [r7, #4]
      size--;
 801aa96:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801aa98:	3b01      	subs	r3, #1
 801aa9a:	66bb      	str	r3, [r7, #104]	@ 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 801aa9c:	2300      	movs	r3, #0
 801aa9e:	657b      	str	r3, [r7, #84]	@ 0x54

  if (num == 0)
 801aaa0:	687b      	ldr	r3, [r7, #4]
 801aaa2:	2b00      	cmp	r3, #0
 801aaa4:	d11e      	bne.n	801aae4 <ee_number+0xb8>
    tmp[i++] = '0';
 801aaa6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801aaa8:	1c5a      	adds	r2, r3, #1
 801aaaa:	657a      	str	r2, [r7, #84]	@ 0x54
 801aaac:	3360      	adds	r3, #96	@ 0x60
 801aaae:	443b      	add	r3, r7
 801aab0:	2230      	movs	r2, #48	@ 0x30
 801aab2:	f803 2c50 	strb.w	r2, [r3, #-80]
 801aab6:	e018      	b.n	801aaea <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801aab8:	687b      	ldr	r3, [r7, #4]
 801aaba:	683a      	ldr	r2, [r7, #0]
 801aabc:	fbb3 f1f2 	udiv	r1, r3, r2
 801aac0:	fb01 f202 	mul.w	r2, r1, r2
 801aac4:	1a9b      	subs	r3, r3, r2
 801aac6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801aac8:	441a      	add	r2, r3
 801aaca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801aacc:	1c59      	adds	r1, r3, #1
 801aace:	6579      	str	r1, [r7, #84]	@ 0x54
 801aad0:	7812      	ldrb	r2, [r2, #0]
 801aad2:	3360      	adds	r3, #96	@ 0x60
 801aad4:	443b      	add	r3, r7
 801aad6:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 801aada:	687a      	ldr	r2, [r7, #4]
 801aadc:	683b      	ldr	r3, [r7, #0]
 801aade:	fbb2 f3f3 	udiv	r3, r2, r3
 801aae2:	607b      	str	r3, [r7, #4]
    while (num != 0)
 801aae4:	687b      	ldr	r3, [r7, #4]
 801aae6:	2b00      	cmp	r3, #0
 801aae8:	d1e6      	bne.n	801aab8 <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 801aaea:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801aaec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801aaee:	429a      	cmp	r2, r3
 801aaf0:	dd01      	ble.n	801aaf6 <ee_number+0xca>
 801aaf2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801aaf4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  size -= precision;
 801aaf6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801aaf8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801aafa:	1ad3      	subs	r3, r2, r3
 801aafc:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801aafe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801ab00:	f003 0301 	and.w	r3, r3, #1
 801ab04:	2b00      	cmp	r3, #0
 801ab06:	d112      	bne.n	801ab2e <ee_number+0x102>
 801ab08:	e00c      	b.n	801ab24 <ee_number+0xf8>
 801ab0a:	68fb      	ldr	r3, [r7, #12]
 801ab0c:	1c5a      	adds	r2, r3, #1
 801ab0e:	60fa      	str	r2, [r7, #12]
 801ab10:	2220      	movs	r2, #32
 801ab12:	701a      	strb	r2, [r3, #0]
 801ab14:	68bb      	ldr	r3, [r7, #8]
 801ab16:	3b01      	subs	r3, #1
 801ab18:	60bb      	str	r3, [r7, #8]
 801ab1a:	68bb      	ldr	r3, [r7, #8]
 801ab1c:	2b00      	cmp	r3, #0
 801ab1e:	d101      	bne.n	801ab24 <ee_number+0xf8>
 801ab20:	68fb      	ldr	r3, [r7, #12]
 801ab22:	e068      	b.n	801abf6 <ee_number+0x1ca>
 801ab24:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801ab26:	1e5a      	subs	r2, r3, #1
 801ab28:	66ba      	str	r2, [r7, #104]	@ 0x68
 801ab2a:	2b00      	cmp	r3, #0
 801ab2c:	dced      	bgt.n	801ab0a <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 801ab2e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801ab32:	2b00      	cmp	r3, #0
 801ab34:	d01b      	beq.n	801ab6e <ee_number+0x142>
 801ab36:	68fb      	ldr	r3, [r7, #12]
 801ab38:	1c5a      	adds	r2, r3, #1
 801ab3a:	60fa      	str	r2, [r7, #12]
 801ab3c:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 801ab40:	701a      	strb	r2, [r3, #0]
 801ab42:	68bb      	ldr	r3, [r7, #8]
 801ab44:	3b01      	subs	r3, #1
 801ab46:	60bb      	str	r3, [r7, #8]
 801ab48:	68bb      	ldr	r3, [r7, #8]
 801ab4a:	2b00      	cmp	r3, #0
 801ab4c:	d10f      	bne.n	801ab6e <ee_number+0x142>
 801ab4e:	68fb      	ldr	r3, [r7, #12]
 801ab50:	e051      	b.n	801abf6 <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801ab52:	68fb      	ldr	r3, [r7, #12]
 801ab54:	1c5a      	adds	r2, r3, #1
 801ab56:	60fa      	str	r2, [r7, #12]
 801ab58:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 801ab5c:	701a      	strb	r2, [r3, #0]
 801ab5e:	68bb      	ldr	r3, [r7, #8]
 801ab60:	3b01      	subs	r3, #1
 801ab62:	60bb      	str	r3, [r7, #8]
 801ab64:	68bb      	ldr	r3, [r7, #8]
 801ab66:	2b00      	cmp	r3, #0
 801ab68:	d101      	bne.n	801ab6e <ee_number+0x142>
 801ab6a:	68fb      	ldr	r3, [r7, #12]
 801ab6c:	e043      	b.n	801abf6 <ee_number+0x1ca>
 801ab6e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801ab70:	1e5a      	subs	r2, r3, #1
 801ab72:	66ba      	str	r2, [r7, #104]	@ 0x68
 801ab74:	2b00      	cmp	r3, #0
 801ab76:	dcec      	bgt.n	801ab52 <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 801ab78:	e00c      	b.n	801ab94 <ee_number+0x168>
 801ab7a:	68fb      	ldr	r3, [r7, #12]
 801ab7c:	1c5a      	adds	r2, r3, #1
 801ab7e:	60fa      	str	r2, [r7, #12]
 801ab80:	2230      	movs	r2, #48	@ 0x30
 801ab82:	701a      	strb	r2, [r3, #0]
 801ab84:	68bb      	ldr	r3, [r7, #8]
 801ab86:	3b01      	subs	r3, #1
 801ab88:	60bb      	str	r3, [r7, #8]
 801ab8a:	68bb      	ldr	r3, [r7, #8]
 801ab8c:	2b00      	cmp	r3, #0
 801ab8e:	d101      	bne.n	801ab94 <ee_number+0x168>
 801ab90:	68fb      	ldr	r3, [r7, #12]
 801ab92:	e030      	b.n	801abf6 <ee_number+0x1ca>
 801ab94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801ab96:	1e5a      	subs	r2, r3, #1
 801ab98:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801ab9a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801ab9c:	429a      	cmp	r2, r3
 801ab9e:	dbec      	blt.n	801ab7a <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 801aba0:	e010      	b.n	801abc4 <ee_number+0x198>
 801aba2:	68fb      	ldr	r3, [r7, #12]
 801aba4:	1c5a      	adds	r2, r3, #1
 801aba6:	60fa      	str	r2, [r7, #12]
 801aba8:	f107 0110 	add.w	r1, r7, #16
 801abac:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801abae:	440a      	add	r2, r1
 801abb0:	7812      	ldrb	r2, [r2, #0]
 801abb2:	701a      	strb	r2, [r3, #0]
 801abb4:	68bb      	ldr	r3, [r7, #8]
 801abb6:	3b01      	subs	r3, #1
 801abb8:	60bb      	str	r3, [r7, #8]
 801abba:	68bb      	ldr	r3, [r7, #8]
 801abbc:	2b00      	cmp	r3, #0
 801abbe:	d101      	bne.n	801abc4 <ee_number+0x198>
 801abc0:	68fb      	ldr	r3, [r7, #12]
 801abc2:	e018      	b.n	801abf6 <ee_number+0x1ca>
 801abc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801abc6:	1e5a      	subs	r2, r3, #1
 801abc8:	657a      	str	r2, [r7, #84]	@ 0x54
 801abca:	2b00      	cmp	r3, #0
 801abcc:	dce9      	bgt.n	801aba2 <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 801abce:	e00c      	b.n	801abea <ee_number+0x1be>
 801abd0:	68fb      	ldr	r3, [r7, #12]
 801abd2:	1c5a      	adds	r2, r3, #1
 801abd4:	60fa      	str	r2, [r7, #12]
 801abd6:	2220      	movs	r2, #32
 801abd8:	701a      	strb	r2, [r3, #0]
 801abda:	68bb      	ldr	r3, [r7, #8]
 801abdc:	3b01      	subs	r3, #1
 801abde:	60bb      	str	r3, [r7, #8]
 801abe0:	68bb      	ldr	r3, [r7, #8]
 801abe2:	2b00      	cmp	r3, #0
 801abe4:	d101      	bne.n	801abea <ee_number+0x1be>
 801abe6:	68fb      	ldr	r3, [r7, #12]
 801abe8:	e005      	b.n	801abf6 <ee_number+0x1ca>
 801abea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801abec:	1e5a      	subs	r2, r3, #1
 801abee:	66ba      	str	r2, [r7, #104]	@ 0x68
 801abf0:	2b00      	cmp	r3, #0
 801abf2:	dced      	bgt.n	801abd0 <ee_number+0x1a4>

  return str;
 801abf4:	68fb      	ldr	r3, [r7, #12]
}
 801abf6:	4618      	mov	r0, r3
 801abf8:	3764      	adds	r7, #100	@ 0x64
 801abfa:	46bd      	mov	sp, r7
 801abfc:	bc80      	pop	{r7}
 801abfe:	4770      	bx	lr
 801ac00:	20000130 	.word	0x20000130
 801ac04:	20000134 	.word	0x20000134

0801ac08 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801ac08:	b580      	push	{r7, lr}
 801ac0a:	b092      	sub	sp, #72	@ 0x48
 801ac0c:	af04      	add	r7, sp, #16
 801ac0e:	60f8      	str	r0, [r7, #12]
 801ac10:	60b9      	str	r1, [r7, #8]
 801ac12:	607a      	str	r2, [r7, #4]
 801ac14:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801ac16:	68bb      	ldr	r3, [r7, #8]
 801ac18:	2b00      	cmp	r3, #0
 801ac1a:	dc01      	bgt.n	801ac20 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 801ac1c:	2300      	movs	r3, #0
 801ac1e:	e13e      	b.n	801ae9e <tiny_vsnprintf_like+0x296>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801ac20:	68fb      	ldr	r3, [r7, #12]
 801ac22:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801ac24:	e128      	b.n	801ae78 <tiny_vsnprintf_like+0x270>
  {
    CHECK_STR_SIZE(buf, str, size);
 801ac26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801ac28:	68fb      	ldr	r3, [r7, #12]
 801ac2a:	1ad2      	subs	r2, r2, r3
 801ac2c:	68bb      	ldr	r3, [r7, #8]
 801ac2e:	3b01      	subs	r3, #1
 801ac30:	429a      	cmp	r2, r3
 801ac32:	f280 812e 	bge.w	801ae92 <tiny_vsnprintf_like+0x28a>

    if (*fmt != '%')
 801ac36:	687b      	ldr	r3, [r7, #4]
 801ac38:	781b      	ldrb	r3, [r3, #0]
 801ac3a:	2b25      	cmp	r3, #37	@ 0x25
 801ac3c:	d006      	beq.n	801ac4c <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 801ac3e:	687a      	ldr	r2, [r7, #4]
 801ac40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ac42:	1c59      	adds	r1, r3, #1
 801ac44:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801ac46:	7812      	ldrb	r2, [r2, #0]
 801ac48:	701a      	strb	r2, [r3, #0]
      continue;
 801ac4a:	e112      	b.n	801ae72 <tiny_vsnprintf_like+0x26a>
    }

    // Process flags
    flags = 0;
 801ac4c:	2300      	movs	r3, #0
 801ac4e:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801ac50:	687b      	ldr	r3, [r7, #4]
 801ac52:	3301      	adds	r3, #1
 801ac54:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 801ac56:	687b      	ldr	r3, [r7, #4]
 801ac58:	781b      	ldrb	r3, [r3, #0]
 801ac5a:	2b30      	cmp	r3, #48	@ 0x30
 801ac5c:	d103      	bne.n	801ac66 <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 801ac5e:	6a3b      	ldr	r3, [r7, #32]
 801ac60:	f043 0301 	orr.w	r3, r3, #1
 801ac64:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 801ac66:	f04f 33ff 	mov.w	r3, #4294967295
 801ac6a:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 801ac6c:	687b      	ldr	r3, [r7, #4]
 801ac6e:	781b      	ldrb	r3, [r3, #0]
 801ac70:	2b2f      	cmp	r3, #47	@ 0x2f
 801ac72:	d908      	bls.n	801ac86 <tiny_vsnprintf_like+0x7e>
 801ac74:	687b      	ldr	r3, [r7, #4]
 801ac76:	781b      	ldrb	r3, [r3, #0]
 801ac78:	2b39      	cmp	r3, #57	@ 0x39
 801ac7a:	d804      	bhi.n	801ac86 <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 801ac7c:	1d3b      	adds	r3, r7, #4
 801ac7e:	4618      	mov	r0, r3
 801ac80:	f7ff feae 	bl	801a9e0 <ee_skip_atoi>
 801ac84:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 801ac86:	f04f 33ff 	mov.w	r3, #4294967295
 801ac8a:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 801ac8c:	f04f 33ff 	mov.w	r3, #4294967295
 801ac90:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 801ac92:	230a      	movs	r3, #10
 801ac94:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (*fmt)
 801ac96:	687b      	ldr	r3, [r7, #4]
 801ac98:	781b      	ldrb	r3, [r3, #0]
 801ac9a:	3b58      	subs	r3, #88	@ 0x58
 801ac9c:	2b20      	cmp	r3, #32
 801ac9e:	f200 8094 	bhi.w	801adca <tiny_vsnprintf_like+0x1c2>
 801aca2:	a201      	add	r2, pc, #4	@ (adr r2, 801aca8 <tiny_vsnprintf_like+0xa0>)
 801aca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801aca8:	0801adb3 	.word	0x0801adb3
 801acac:	0801adcb 	.word	0x0801adcb
 801acb0:	0801adcb 	.word	0x0801adcb
 801acb4:	0801adcb 	.word	0x0801adcb
 801acb8:	0801adcb 	.word	0x0801adcb
 801acbc:	0801adcb 	.word	0x0801adcb
 801acc0:	0801adcb 	.word	0x0801adcb
 801acc4:	0801adcb 	.word	0x0801adcb
 801acc8:	0801adcb 	.word	0x0801adcb
 801accc:	0801adcb 	.word	0x0801adcb
 801acd0:	0801adcb 	.word	0x0801adcb
 801acd4:	0801ad37 	.word	0x0801ad37
 801acd8:	0801adc1 	.word	0x0801adc1
 801acdc:	0801adcb 	.word	0x0801adcb
 801ace0:	0801adcb 	.word	0x0801adcb
 801ace4:	0801adcb 	.word	0x0801adcb
 801ace8:	0801adcb 	.word	0x0801adcb
 801acec:	0801adc1 	.word	0x0801adc1
 801acf0:	0801adcb 	.word	0x0801adcb
 801acf4:	0801adcb 	.word	0x0801adcb
 801acf8:	0801adcb 	.word	0x0801adcb
 801acfc:	0801adcb 	.word	0x0801adcb
 801ad00:	0801adcb 	.word	0x0801adcb
 801ad04:	0801adcb 	.word	0x0801adcb
 801ad08:	0801adcb 	.word	0x0801adcb
 801ad0c:	0801adcb 	.word	0x0801adcb
 801ad10:	0801adcb 	.word	0x0801adcb
 801ad14:	0801ad57 	.word	0x0801ad57
 801ad18:	0801adcb 	.word	0x0801adcb
 801ad1c:	0801ae17 	.word	0x0801ae17
 801ad20:	0801adcb 	.word	0x0801adcb
 801ad24:	0801adcb 	.word	0x0801adcb
 801ad28:	0801adbb 	.word	0x0801adbb
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801ad2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ad2e:	1c5a      	adds	r2, r3, #1
 801ad30:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801ad32:	2220      	movs	r2, #32
 801ad34:	701a      	strb	r2, [r3, #0]
 801ad36:	69fb      	ldr	r3, [r7, #28]
 801ad38:	3b01      	subs	r3, #1
 801ad3a:	61fb      	str	r3, [r7, #28]
 801ad3c:	69fb      	ldr	r3, [r7, #28]
 801ad3e:	2b00      	cmp	r3, #0
 801ad40:	dcf4      	bgt.n	801ad2c <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 801ad42:	683b      	ldr	r3, [r7, #0]
 801ad44:	1d1a      	adds	r2, r3, #4
 801ad46:	603a      	str	r2, [r7, #0]
 801ad48:	6819      	ldr	r1, [r3, #0]
 801ad4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ad4c:	1c5a      	adds	r2, r3, #1
 801ad4e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801ad50:	b2ca      	uxtb	r2, r1
 801ad52:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801ad54:	e08d      	b.n	801ae72 <tiny_vsnprintf_like+0x26a>

      case 's':
        s = va_arg(args, char *);
 801ad56:	683b      	ldr	r3, [r7, #0]
 801ad58:	1d1a      	adds	r2, r3, #4
 801ad5a:	603a      	str	r2, [r7, #0]
 801ad5c:	681b      	ldr	r3, [r3, #0]
 801ad5e:	627b      	str	r3, [r7, #36]	@ 0x24
        if (!s) s = "<NULL>";
 801ad60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ad62:	2b00      	cmp	r3, #0
 801ad64:	d101      	bne.n	801ad6a <tiny_vsnprintf_like+0x162>
 801ad66:	4b50      	ldr	r3, [pc, #320]	@ (801aea8 <tiny_vsnprintf_like+0x2a0>)
 801ad68:	627b      	str	r3, [r7, #36]	@ 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801ad6a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801ad6c:	f7e5 fa58 	bl	8000220 <strlen>
 801ad70:	4603      	mov	r3, r0
 801ad72:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801ad74:	e004      	b.n	801ad80 <tiny_vsnprintf_like+0x178>
 801ad76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ad78:	1c5a      	adds	r2, r3, #1
 801ad7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801ad7c:	2220      	movs	r2, #32
 801ad7e:	701a      	strb	r2, [r3, #0]
 801ad80:	69fb      	ldr	r3, [r7, #28]
 801ad82:	1e5a      	subs	r2, r3, #1
 801ad84:	61fa      	str	r2, [r7, #28]
 801ad86:	693a      	ldr	r2, [r7, #16]
 801ad88:	429a      	cmp	r2, r3
 801ad8a:	dbf4      	blt.n	801ad76 <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801ad8c:	2300      	movs	r3, #0
 801ad8e:	62bb      	str	r3, [r7, #40]	@ 0x28
 801ad90:	e00a      	b.n	801ada8 <tiny_vsnprintf_like+0x1a0>
 801ad92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801ad94:	1c53      	adds	r3, r2, #1
 801ad96:	627b      	str	r3, [r7, #36]	@ 0x24
 801ad98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ad9a:	1c59      	adds	r1, r3, #1
 801ad9c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801ad9e:	7812      	ldrb	r2, [r2, #0]
 801ada0:	701a      	strb	r2, [r3, #0]
 801ada2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ada4:	3301      	adds	r3, #1
 801ada6:	62bb      	str	r3, [r7, #40]	@ 0x28
 801ada8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801adaa:	693b      	ldr	r3, [r7, #16]
 801adac:	429a      	cmp	r2, r3
 801adae:	dbf0      	blt.n	801ad92 <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 801adb0:	e05f      	b.n	801ae72 <tiny_vsnprintf_like+0x26a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 801adb2:	6a3b      	ldr	r3, [r7, #32]
 801adb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801adb8:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801adba:	2310      	movs	r3, #16
 801adbc:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
 801adbe:	e02b      	b.n	801ae18 <tiny_vsnprintf_like+0x210>

      case 'd':
      case 'i':
        flags |= SIGN;
 801adc0:	6a3b      	ldr	r3, [r7, #32]
 801adc2:	f043 0302 	orr.w	r3, r3, #2
 801adc6:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 801adc8:	e025      	b.n	801ae16 <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801adca:	687b      	ldr	r3, [r7, #4]
 801adcc:	781b      	ldrb	r3, [r3, #0]
 801adce:	2b25      	cmp	r3, #37	@ 0x25
 801add0:	d004      	beq.n	801addc <tiny_vsnprintf_like+0x1d4>
 801add2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801add4:	1c5a      	adds	r2, r3, #1
 801add6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801add8:	2225      	movs	r2, #37	@ 0x25
 801adda:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 801addc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801adde:	68fb      	ldr	r3, [r7, #12]
 801ade0:	1ad2      	subs	r2, r2, r3
 801ade2:	68bb      	ldr	r3, [r7, #8]
 801ade4:	3b01      	subs	r3, #1
 801ade6:	429a      	cmp	r2, r3
 801ade8:	da16      	bge.n	801ae18 <tiny_vsnprintf_like+0x210>
        if (*fmt)
 801adea:	687b      	ldr	r3, [r7, #4]
 801adec:	781b      	ldrb	r3, [r3, #0]
 801adee:	2b00      	cmp	r3, #0
 801adf0:	d006      	beq.n	801ae00 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 801adf2:	687a      	ldr	r2, [r7, #4]
 801adf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801adf6:	1c59      	adds	r1, r3, #1
 801adf8:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801adfa:	7812      	ldrb	r2, [r2, #0]
 801adfc:	701a      	strb	r2, [r3, #0]
 801adfe:	e002      	b.n	801ae06 <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 801ae00:	687b      	ldr	r3, [r7, #4]
 801ae02:	3b01      	subs	r3, #1
 801ae04:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801ae06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801ae08:	68fb      	ldr	r3, [r7, #12]
 801ae0a:	1ad2      	subs	r2, r2, r3
 801ae0c:	68bb      	ldr	r3, [r7, #8]
 801ae0e:	3b01      	subs	r3, #1
 801ae10:	429a      	cmp	r2, r3
 801ae12:	db2d      	blt.n	801ae70 <tiny_vsnprintf_like+0x268>
 801ae14:	e000      	b.n	801ae18 <tiny_vsnprintf_like+0x210>
        break;
 801ae16:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 801ae18:	697b      	ldr	r3, [r7, #20]
 801ae1a:	2b6c      	cmp	r3, #108	@ 0x6c
 801ae1c:	d105      	bne.n	801ae2a <tiny_vsnprintf_like+0x222>
      num = va_arg(args, unsigned long);
 801ae1e:	683b      	ldr	r3, [r7, #0]
 801ae20:	1d1a      	adds	r2, r3, #4
 801ae22:	603a      	str	r2, [r7, #0]
 801ae24:	681b      	ldr	r3, [r3, #0]
 801ae26:	637b      	str	r3, [r7, #52]	@ 0x34
 801ae28:	e00f      	b.n	801ae4a <tiny_vsnprintf_like+0x242>
    else if (flags & SIGN)
 801ae2a:	6a3b      	ldr	r3, [r7, #32]
 801ae2c:	f003 0302 	and.w	r3, r3, #2
 801ae30:	2b00      	cmp	r3, #0
 801ae32:	d005      	beq.n	801ae40 <tiny_vsnprintf_like+0x238>
      num = va_arg(args, int);
 801ae34:	683b      	ldr	r3, [r7, #0]
 801ae36:	1d1a      	adds	r2, r3, #4
 801ae38:	603a      	str	r2, [r7, #0]
 801ae3a:	681b      	ldr	r3, [r3, #0]
 801ae3c:	637b      	str	r3, [r7, #52]	@ 0x34
 801ae3e:	e004      	b.n	801ae4a <tiny_vsnprintf_like+0x242>
    else
      num = va_arg(args, unsigned int);
 801ae40:	683b      	ldr	r3, [r7, #0]
 801ae42:	1d1a      	adds	r2, r3, #4
 801ae44:	603a      	str	r2, [r7, #0]
 801ae46:	681b      	ldr	r3, [r3, #0]
 801ae48:	637b      	str	r3, [r7, #52]	@ 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801ae4a:	68bb      	ldr	r3, [r7, #8]
 801ae4c:	1e5a      	subs	r2, r3, #1
 801ae4e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801ae50:	68fb      	ldr	r3, [r7, #12]
 801ae52:	1acb      	subs	r3, r1, r3
 801ae54:	1ad1      	subs	r1, r2, r3
 801ae56:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801ae58:	6a3b      	ldr	r3, [r7, #32]
 801ae5a:	9302      	str	r3, [sp, #8]
 801ae5c:	69bb      	ldr	r3, [r7, #24]
 801ae5e:	9301      	str	r3, [sp, #4]
 801ae60:	69fb      	ldr	r3, [r7, #28]
 801ae62:	9300      	str	r3, [sp, #0]
 801ae64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ae66:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801ae68:	f7ff fde0 	bl	801aa2c <ee_number>
 801ae6c:	62f8      	str	r0, [r7, #44]	@ 0x2c
 801ae6e:	e000      	b.n	801ae72 <tiny_vsnprintf_like+0x26a>
        continue;
 801ae70:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801ae72:	687b      	ldr	r3, [r7, #4]
 801ae74:	3301      	adds	r3, #1
 801ae76:	607b      	str	r3, [r7, #4]
 801ae78:	687b      	ldr	r3, [r7, #4]
 801ae7a:	781b      	ldrb	r3, [r3, #0]
 801ae7c:	2b00      	cmp	r3, #0
 801ae7e:	f47f aed2 	bne.w	801ac26 <tiny_vsnprintf_like+0x1e>
 801ae82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801ae84:	68fb      	ldr	r3, [r7, #12]
 801ae86:	1ad2      	subs	r2, r2, r3
 801ae88:	68bb      	ldr	r3, [r7, #8]
 801ae8a:	3b01      	subs	r3, #1
 801ae8c:	429a      	cmp	r2, r3
 801ae8e:	f6bf aeca 	bge.w	801ac26 <tiny_vsnprintf_like+0x1e>
  }

  *str = '\0';
 801ae92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ae94:	2200      	movs	r2, #0
 801ae96:	701a      	strb	r2, [r3, #0]
  return str - buf;
 801ae98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801ae9a:	68fb      	ldr	r3, [r7, #12]
 801ae9c:	1ad3      	subs	r3, r2, r3
}
 801ae9e:	4618      	mov	r0, r3
 801aea0:	3738      	adds	r7, #56	@ 0x38
 801aea2:	46bd      	mov	sp, r7
 801aea4:	bd80      	pop	{r7, pc}
 801aea6:	bf00      	nop
 801aea8:	0801f074 	.word	0x0801f074

0801aeac <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801aeac:	b580      	push	{r7, lr}
 801aeae:	b090      	sub	sp, #64	@ 0x40
 801aeb0:	af00      	add	r7, sp, #0
 801aeb2:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801aeb4:	4b73      	ldr	r3, [pc, #460]	@ (801b084 <UTIL_SEQ_Run+0x1d8>)
 801aeb6:	681b      	ldr	r3, [r3, #0]
 801aeb8:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 801aeba:	4b72      	ldr	r3, [pc, #456]	@ (801b084 <UTIL_SEQ_Run+0x1d8>)
 801aebc:	681a      	ldr	r2, [r3, #0]
 801aebe:	687b      	ldr	r3, [r7, #4]
 801aec0:	4013      	ands	r3, r2
 801aec2:	4a70      	ldr	r2, [pc, #448]	@ (801b084 <UTIL_SEQ_Run+0x1d8>)
 801aec4:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 801aec6:	4b70      	ldr	r3, [pc, #448]	@ (801b088 <UTIL_SEQ_Run+0x1dc>)
 801aec8:	681b      	ldr	r3, [r3, #0]
 801aeca:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 801aecc:	4b6f      	ldr	r3, [pc, #444]	@ (801b08c <UTIL_SEQ_Run+0x1e0>)
 801aece:	681b      	ldr	r3, [r3, #0]
 801aed0:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 801aed2:	4b6f      	ldr	r3, [pc, #444]	@ (801b090 <UTIL_SEQ_Run+0x1e4>)
 801aed4:	681b      	ldr	r3, [r3, #0]
 801aed6:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 801aed8:	4b6e      	ldr	r3, [pc, #440]	@ (801b094 <UTIL_SEQ_Run+0x1e8>)
 801aeda:	681b      	ldr	r3, [r3, #0]
 801aedc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801aede:	e08d      	b.n	801affc <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 801aee0:	2300      	movs	r3, #0
 801aee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801aee4:	e002      	b.n	801aeec <UTIL_SEQ_Run+0x40>
    {
      counter++;
 801aee6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801aee8:	3301      	adds	r3, #1
 801aeea:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801aeec:	4a6a      	ldr	r2, [pc, #424]	@ (801b098 <UTIL_SEQ_Run+0x1ec>)
 801aeee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801aef0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801aef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aef6:	401a      	ands	r2, r3
 801aef8:	4b62      	ldr	r3, [pc, #392]	@ (801b084 <UTIL_SEQ_Run+0x1d8>)
 801aefa:	681b      	ldr	r3, [r3, #0]
 801aefc:	4013      	ands	r3, r2
 801aefe:	2b00      	cmp	r3, #0
 801af00:	d0f1      	beq.n	801aee6 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 801af02:	4a65      	ldr	r2, [pc, #404]	@ (801b098 <UTIL_SEQ_Run+0x1ec>)
 801af04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801af06:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801af0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801af0c:	401a      	ands	r2, r3
 801af0e:	4b5d      	ldr	r3, [pc, #372]	@ (801b084 <UTIL_SEQ_Run+0x1d8>)
 801af10:	681b      	ldr	r3, [r3, #0]
 801af12:	4013      	ands	r3, r2
 801af14:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801af16:	4a60      	ldr	r2, [pc, #384]	@ (801b098 <UTIL_SEQ_Run+0x1ec>)
 801af18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801af1a:	00db      	lsls	r3, r3, #3
 801af1c:	4413      	add	r3, r2
 801af1e:	685a      	ldr	r2, [r3, #4]
 801af20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801af22:	4013      	ands	r3, r2
 801af24:	2b00      	cmp	r3, #0
 801af26:	d106      	bne.n	801af36 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801af28:	4a5b      	ldr	r2, [pc, #364]	@ (801b098 <UTIL_SEQ_Run+0x1ec>)
 801af2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801af2c:	00db      	lsls	r3, r3, #3
 801af2e:	4413      	add	r3, r2
 801af30:	f04f 32ff 	mov.w	r2, #4294967295
 801af34:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801af36:	4a58      	ldr	r2, [pc, #352]	@ (801b098 <UTIL_SEQ_Run+0x1ec>)
 801af38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801af3a:	00db      	lsls	r3, r3, #3
 801af3c:	4413      	add	r3, r2
 801af3e:	685a      	ldr	r2, [r3, #4]
 801af40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801af42:	4013      	ands	r3, r2
 801af44:	4618      	mov	r0, r3
 801af46:	f000 f907 	bl	801b158 <SEQ_BitPosition>
 801af4a:	4603      	mov	r3, r0
 801af4c:	461a      	mov	r2, r3
 801af4e:	4b53      	ldr	r3, [pc, #332]	@ (801b09c <UTIL_SEQ_Run+0x1f0>)
 801af50:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801af52:	4a51      	ldr	r2, [pc, #324]	@ (801b098 <UTIL_SEQ_Run+0x1ec>)
 801af54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801af56:	00db      	lsls	r3, r3, #3
 801af58:	4413      	add	r3, r2
 801af5a:	685a      	ldr	r2, [r3, #4]
 801af5c:	4b4f      	ldr	r3, [pc, #316]	@ (801b09c <UTIL_SEQ_Run+0x1f0>)
 801af5e:	681b      	ldr	r3, [r3, #0]
 801af60:	2101      	movs	r1, #1
 801af62:	fa01 f303 	lsl.w	r3, r1, r3
 801af66:	43db      	mvns	r3, r3
 801af68:	401a      	ands	r2, r3
 801af6a:	494b      	ldr	r1, [pc, #300]	@ (801b098 <UTIL_SEQ_Run+0x1ec>)
 801af6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801af6e:	00db      	lsls	r3, r3, #3
 801af70:	440b      	add	r3, r1
 801af72:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801af74:	f3ef 8310 	mrs	r3, PRIMASK
 801af78:	61bb      	str	r3, [r7, #24]
  return(result);
 801af7a:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801af7c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801af7e:	b672      	cpsid	i
}
 801af80:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801af82:	4b46      	ldr	r3, [pc, #280]	@ (801b09c <UTIL_SEQ_Run+0x1f0>)
 801af84:	681b      	ldr	r3, [r3, #0]
 801af86:	2201      	movs	r2, #1
 801af88:	fa02 f303 	lsl.w	r3, r2, r3
 801af8c:	43da      	mvns	r2, r3
 801af8e:	4b3e      	ldr	r3, [pc, #248]	@ (801b088 <UTIL_SEQ_Run+0x1dc>)
 801af90:	681b      	ldr	r3, [r3, #0]
 801af92:	4013      	ands	r3, r2
 801af94:	4a3c      	ldr	r2, [pc, #240]	@ (801b088 <UTIL_SEQ_Run+0x1dc>)
 801af96:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801af98:	2301      	movs	r3, #1
 801af9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801af9c:	e013      	b.n	801afc6 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801af9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801afa0:	3b01      	subs	r3, #1
 801afa2:	4a3d      	ldr	r2, [pc, #244]	@ (801b098 <UTIL_SEQ_Run+0x1ec>)
 801afa4:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 801afa8:	4b3c      	ldr	r3, [pc, #240]	@ (801b09c <UTIL_SEQ_Run+0x1f0>)
 801afaa:	681b      	ldr	r3, [r3, #0]
 801afac:	2201      	movs	r2, #1
 801afae:	fa02 f303 	lsl.w	r3, r2, r3
 801afb2:	43da      	mvns	r2, r3
 801afb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801afb6:	3b01      	subs	r3, #1
 801afb8:	400a      	ands	r2, r1
 801afba:	4937      	ldr	r1, [pc, #220]	@ (801b098 <UTIL_SEQ_Run+0x1ec>)
 801afbc:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801afc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801afc2:	3b01      	subs	r3, #1
 801afc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801afc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801afc8:	2b00      	cmp	r3, #0
 801afca:	d1e8      	bne.n	801af9e <UTIL_SEQ_Run+0xf2>
 801afcc:	6a3b      	ldr	r3, [r7, #32]
 801afce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801afd0:	697b      	ldr	r3, [r7, #20]
 801afd2:	f383 8810 	msr	PRIMASK, r3
}
 801afd6:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 801afd8:	4b30      	ldr	r3, [pc, #192]	@ (801b09c <UTIL_SEQ_Run+0x1f0>)
 801afda:	681b      	ldr	r3, [r3, #0]
 801afdc:	4a30      	ldr	r2, [pc, #192]	@ (801b0a0 <UTIL_SEQ_Run+0x1f4>)
 801afde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801afe2:	4798      	blx	r3

    local_taskset = TaskSet;
 801afe4:	4b28      	ldr	r3, [pc, #160]	@ (801b088 <UTIL_SEQ_Run+0x1dc>)
 801afe6:	681b      	ldr	r3, [r3, #0]
 801afe8:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 801afea:	4b28      	ldr	r3, [pc, #160]	@ (801b08c <UTIL_SEQ_Run+0x1e0>)
 801afec:	681b      	ldr	r3, [r3, #0]
 801afee:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 801aff0:	4b27      	ldr	r3, [pc, #156]	@ (801b090 <UTIL_SEQ_Run+0x1e4>)
 801aff2:	681b      	ldr	r3, [r3, #0]
 801aff4:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 801aff6:	4b27      	ldr	r3, [pc, #156]	@ (801b094 <UTIL_SEQ_Run+0x1e8>)
 801aff8:	681b      	ldr	r3, [r3, #0]
 801affa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801affc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801affe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b000:	401a      	ands	r2, r3
 801b002:	4b20      	ldr	r3, [pc, #128]	@ (801b084 <UTIL_SEQ_Run+0x1d8>)
 801b004:	681b      	ldr	r3, [r3, #0]
 801b006:	4013      	ands	r3, r2
 801b008:	2b00      	cmp	r3, #0
 801b00a:	d005      	beq.n	801b018 <UTIL_SEQ_Run+0x16c>
 801b00c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801b00e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b010:	4013      	ands	r3, r2
 801b012:	2b00      	cmp	r3, #0
 801b014:	f43f af64 	beq.w	801aee0 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801b018:	4b20      	ldr	r3, [pc, #128]	@ (801b09c <UTIL_SEQ_Run+0x1f0>)
 801b01a:	f04f 32ff 	mov.w	r2, #4294967295
 801b01e:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801b020:	f000 f88e 	bl	801b140 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b024:	f3ef 8310 	mrs	r3, PRIMASK
 801b028:	613b      	str	r3, [r7, #16]
  return(result);
 801b02a:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801b02c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801b02e:	b672      	cpsid	i
}
 801b030:	bf00      	nop
  local_taskset = TaskSet;
 801b032:	4b15      	ldr	r3, [pc, #84]	@ (801b088 <UTIL_SEQ_Run+0x1dc>)
 801b034:	681b      	ldr	r3, [r3, #0]
 801b036:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 801b038:	4b14      	ldr	r3, [pc, #80]	@ (801b08c <UTIL_SEQ_Run+0x1e0>)
 801b03a:	681b      	ldr	r3, [r3, #0]
 801b03c:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 801b03e:	4b14      	ldr	r3, [pc, #80]	@ (801b090 <UTIL_SEQ_Run+0x1e4>)
 801b040:	681b      	ldr	r3, [r3, #0]
 801b042:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 801b044:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801b046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b048:	401a      	ands	r2, r3
 801b04a:	4b0e      	ldr	r3, [pc, #56]	@ (801b084 <UTIL_SEQ_Run+0x1d8>)
 801b04c:	681b      	ldr	r3, [r3, #0]
 801b04e:	4013      	ands	r3, r2
 801b050:	2b00      	cmp	r3, #0
 801b052:	d107      	bne.n	801b064 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 801b054:	4b0f      	ldr	r3, [pc, #60]	@ (801b094 <UTIL_SEQ_Run+0x1e8>)
 801b056:	681a      	ldr	r2, [r3, #0]
 801b058:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b05a:	4013      	ands	r3, r2
 801b05c:	2b00      	cmp	r3, #0
 801b05e:	d101      	bne.n	801b064 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 801b060:	f7e6 ff2c 	bl	8001ebc <UTIL_SEQ_Idle>
 801b064:	69fb      	ldr	r3, [r7, #28]
 801b066:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b068:	68fb      	ldr	r3, [r7, #12]
 801b06a:	f383 8810 	msr	PRIMASK, r3
}
 801b06e:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 801b070:	f000 f86c 	bl	801b14c <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801b074:	4a03      	ldr	r2, [pc, #12]	@ (801b084 <UTIL_SEQ_Run+0x1d8>)
 801b076:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b078:	6013      	str	r3, [r2, #0]

  return;
 801b07a:	bf00      	nop
}
 801b07c:	3740      	adds	r7, #64	@ 0x40
 801b07e:	46bd      	mov	sp, r7
 801b080:	bd80      	pop	{r7, pc}
 801b082:	bf00      	nop
 801b084:	2000013c 	.word	0x2000013c
 801b088:	20001d7c 	.word	0x20001d7c
 801b08c:	20001d80 	.word	0x20001d80
 801b090:	20000138 	.word	0x20000138
 801b094:	20001d84 	.word	0x20001d84
 801b098:	20001d9c 	.word	0x20001d9c
 801b09c:	20001d88 	.word	0x20001d88
 801b0a0:	20001d8c 	.word	0x20001d8c

0801b0a4 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801b0a4:	b580      	push	{r7, lr}
 801b0a6:	b088      	sub	sp, #32
 801b0a8:	af00      	add	r7, sp, #0
 801b0aa:	60f8      	str	r0, [r7, #12]
 801b0ac:	60b9      	str	r1, [r7, #8]
 801b0ae:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b0b0:	f3ef 8310 	mrs	r3, PRIMASK
 801b0b4:	617b      	str	r3, [r7, #20]
  return(result);
 801b0b6:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801b0b8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801b0ba:	b672      	cpsid	i
}
 801b0bc:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801b0be:	68f8      	ldr	r0, [r7, #12]
 801b0c0:	f000 f84a 	bl	801b158 <SEQ_BitPosition>
 801b0c4:	4603      	mov	r3, r0
 801b0c6:	4619      	mov	r1, r3
 801b0c8:	4a06      	ldr	r2, [pc, #24]	@ (801b0e4 <UTIL_SEQ_RegTask+0x40>)
 801b0ca:	687b      	ldr	r3, [r7, #4]
 801b0cc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801b0d0:	69fb      	ldr	r3, [r7, #28]
 801b0d2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b0d4:	69bb      	ldr	r3, [r7, #24]
 801b0d6:	f383 8810 	msr	PRIMASK, r3
}
 801b0da:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801b0dc:	bf00      	nop
}
 801b0de:	3720      	adds	r7, #32
 801b0e0:	46bd      	mov	sp, r7
 801b0e2:	bd80      	pop	{r7, pc}
 801b0e4:	20001d8c 	.word	0x20001d8c

0801b0e8 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801b0e8:	b480      	push	{r7}
 801b0ea:	b087      	sub	sp, #28
 801b0ec:	af00      	add	r7, sp, #0
 801b0ee:	6078      	str	r0, [r7, #4]
 801b0f0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b0f2:	f3ef 8310 	mrs	r3, PRIMASK
 801b0f6:	60fb      	str	r3, [r7, #12]
  return(result);
 801b0f8:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801b0fa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b0fc:	b672      	cpsid	i
}
 801b0fe:	bf00      	nop

  TaskSet |= TaskId_bm;
 801b100:	4b0d      	ldr	r3, [pc, #52]	@ (801b138 <UTIL_SEQ_SetTask+0x50>)
 801b102:	681a      	ldr	r2, [r3, #0]
 801b104:	687b      	ldr	r3, [r7, #4]
 801b106:	4313      	orrs	r3, r2
 801b108:	4a0b      	ldr	r2, [pc, #44]	@ (801b138 <UTIL_SEQ_SetTask+0x50>)
 801b10a:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801b10c:	4a0b      	ldr	r2, [pc, #44]	@ (801b13c <UTIL_SEQ_SetTask+0x54>)
 801b10e:	683b      	ldr	r3, [r7, #0]
 801b110:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801b114:	687b      	ldr	r3, [r7, #4]
 801b116:	431a      	orrs	r2, r3
 801b118:	4908      	ldr	r1, [pc, #32]	@ (801b13c <UTIL_SEQ_SetTask+0x54>)
 801b11a:	683b      	ldr	r3, [r7, #0]
 801b11c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801b120:	697b      	ldr	r3, [r7, #20]
 801b122:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b124:	693b      	ldr	r3, [r7, #16]
 801b126:	f383 8810 	msr	PRIMASK, r3
}
 801b12a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801b12c:	bf00      	nop
}
 801b12e:	371c      	adds	r7, #28
 801b130:	46bd      	mov	sp, r7
 801b132:	bc80      	pop	{r7}
 801b134:	4770      	bx	lr
 801b136:	bf00      	nop
 801b138:	20001d7c 	.word	0x20001d7c
 801b13c:	20001d9c 	.word	0x20001d9c

0801b140 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801b140:	b480      	push	{r7}
 801b142:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801b144:	bf00      	nop
}
 801b146:	46bd      	mov	sp, r7
 801b148:	bc80      	pop	{r7}
 801b14a:	4770      	bx	lr

0801b14c <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801b14c:	b480      	push	{r7}
 801b14e:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801b150:	bf00      	nop
}
 801b152:	46bd      	mov	sp, r7
 801b154:	bc80      	pop	{r7}
 801b156:	4770      	bx	lr

0801b158 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801b158:	b480      	push	{r7}
 801b15a:	b085      	sub	sp, #20
 801b15c:	af00      	add	r7, sp, #0
 801b15e:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 801b160:	2300      	movs	r3, #0
 801b162:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 801b164:	687b      	ldr	r3, [r7, #4]
 801b166:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 801b168:	68bb      	ldr	r3, [r7, #8]
 801b16a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801b16e:	d204      	bcs.n	801b17a <SEQ_BitPosition+0x22>
 801b170:	2310      	movs	r3, #16
 801b172:	73fb      	strb	r3, [r7, #15]
 801b174:	68bb      	ldr	r3, [r7, #8]
 801b176:	041b      	lsls	r3, r3, #16
 801b178:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 801b17a:	68bb      	ldr	r3, [r7, #8]
 801b17c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801b180:	d205      	bcs.n	801b18e <SEQ_BitPosition+0x36>
 801b182:	7bfb      	ldrb	r3, [r7, #15]
 801b184:	3308      	adds	r3, #8
 801b186:	73fb      	strb	r3, [r7, #15]
 801b188:	68bb      	ldr	r3, [r7, #8]
 801b18a:	021b      	lsls	r3, r3, #8
 801b18c:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 801b18e:	68bb      	ldr	r3, [r7, #8]
 801b190:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801b194:	d205      	bcs.n	801b1a2 <SEQ_BitPosition+0x4a>
 801b196:	7bfb      	ldrb	r3, [r7, #15]
 801b198:	3304      	adds	r3, #4
 801b19a:	73fb      	strb	r3, [r7, #15]
 801b19c:	68bb      	ldr	r3, [r7, #8]
 801b19e:	011b      	lsls	r3, r3, #4
 801b1a0:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 801b1a2:	68bb      	ldr	r3, [r7, #8]
 801b1a4:	0f1b      	lsrs	r3, r3, #28
 801b1a6:	4a07      	ldr	r2, [pc, #28]	@ (801b1c4 <SEQ_BitPosition+0x6c>)
 801b1a8:	5cd2      	ldrb	r2, [r2, r3]
 801b1aa:	7bfb      	ldrb	r3, [r7, #15]
 801b1ac:	4413      	add	r3, r2
 801b1ae:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801b1b0:	7bfb      	ldrb	r3, [r7, #15]
 801b1b2:	f1c3 031f 	rsb	r3, r3, #31
 801b1b6:	b2db      	uxtb	r3, r3
}
 801b1b8:	4618      	mov	r0, r3
 801b1ba:	3714      	adds	r7, #20
 801b1bc:	46bd      	mov	sp, r7
 801b1be:	bc80      	pop	{r7}
 801b1c0:	4770      	bx	lr
 801b1c2:	bf00      	nop
 801b1c4:	0801f6b4 	.word	0x0801f6b4

0801b1c8 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801b1c8:	b580      	push	{r7, lr}
 801b1ca:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801b1cc:	4b04      	ldr	r3, [pc, #16]	@ (801b1e0 <UTIL_TIMER_Init+0x18>)
 801b1ce:	2200      	movs	r2, #0
 801b1d0:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801b1d2:	4b04      	ldr	r3, [pc, #16]	@ (801b1e4 <UTIL_TIMER_Init+0x1c>)
 801b1d4:	681b      	ldr	r3, [r3, #0]
 801b1d6:	4798      	blx	r3
 801b1d8:	4603      	mov	r3, r0
}
 801b1da:	4618      	mov	r0, r3
 801b1dc:	bd80      	pop	{r7, pc}
 801b1de:	bf00      	nop
 801b1e0:	20001da4 	.word	0x20001da4
 801b1e4:	0801f134 	.word	0x0801f134

0801b1e8 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801b1e8:	b580      	push	{r7, lr}
 801b1ea:	b084      	sub	sp, #16
 801b1ec:	af00      	add	r7, sp, #0
 801b1ee:	60f8      	str	r0, [r7, #12]
 801b1f0:	60b9      	str	r1, [r7, #8]
 801b1f2:	603b      	str	r3, [r7, #0]
 801b1f4:	4613      	mov	r3, r2
 801b1f6:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 801b1f8:	68fb      	ldr	r3, [r7, #12]
 801b1fa:	2b00      	cmp	r3, #0
 801b1fc:	d023      	beq.n	801b246 <UTIL_TIMER_Create+0x5e>
 801b1fe:	683b      	ldr	r3, [r7, #0]
 801b200:	2b00      	cmp	r3, #0
 801b202:	d020      	beq.n	801b246 <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 801b204:	68fb      	ldr	r3, [r7, #12]
 801b206:	2200      	movs	r2, #0
 801b208:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801b20a:	4b11      	ldr	r3, [pc, #68]	@ (801b250 <UTIL_TIMER_Create+0x68>)
 801b20c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b20e:	68b8      	ldr	r0, [r7, #8]
 801b210:	4798      	blx	r3
 801b212:	4602      	mov	r2, r0
 801b214:	68fb      	ldr	r3, [r7, #12]
 801b216:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801b218:	68fb      	ldr	r3, [r7, #12]
 801b21a:	2200      	movs	r2, #0
 801b21c:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801b21e:	68fb      	ldr	r3, [r7, #12]
 801b220:	2200      	movs	r2, #0
 801b222:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801b224:	68fb      	ldr	r3, [r7, #12]
 801b226:	2200      	movs	r2, #0
 801b228:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801b22a:	68fb      	ldr	r3, [r7, #12]
 801b22c:	683a      	ldr	r2, [r7, #0]
 801b22e:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801b230:	68fb      	ldr	r3, [r7, #12]
 801b232:	69ba      	ldr	r2, [r7, #24]
 801b234:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801b236:	68fb      	ldr	r3, [r7, #12]
 801b238:	79fa      	ldrb	r2, [r7, #7]
 801b23a:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801b23c:	68fb      	ldr	r3, [r7, #12]
 801b23e:	2200      	movs	r2, #0
 801b240:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801b242:	2300      	movs	r3, #0
 801b244:	e000      	b.n	801b248 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801b246:	2301      	movs	r3, #1
  }
}
 801b248:	4618      	mov	r0, r3
 801b24a:	3710      	adds	r7, #16
 801b24c:	46bd      	mov	sp, r7
 801b24e:	bd80      	pop	{r7, pc}
 801b250:	0801f134 	.word	0x0801f134

0801b254 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801b254:	b580      	push	{r7, lr}
 801b256:	b08a      	sub	sp, #40	@ 0x28
 801b258:	af00      	add	r7, sp, #0
 801b25a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801b25c:	2300      	movs	r3, #0
 801b25e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801b262:	687b      	ldr	r3, [r7, #4]
 801b264:	2b00      	cmp	r3, #0
 801b266:	d056      	beq.n	801b316 <UTIL_TIMER_Start+0xc2>
 801b268:	6878      	ldr	r0, [r7, #4]
 801b26a:	f000 f9a9 	bl	801b5c0 <TimerExists>
 801b26e:	4603      	mov	r3, r0
 801b270:	f083 0301 	eor.w	r3, r3, #1
 801b274:	b2db      	uxtb	r3, r3
 801b276:	2b00      	cmp	r3, #0
 801b278:	d04d      	beq.n	801b316 <UTIL_TIMER_Start+0xc2>
 801b27a:	687b      	ldr	r3, [r7, #4]
 801b27c:	7a5b      	ldrb	r3, [r3, #9]
 801b27e:	2b00      	cmp	r3, #0
 801b280:	d149      	bne.n	801b316 <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b282:	f3ef 8310 	mrs	r3, PRIMASK
 801b286:	613b      	str	r3, [r7, #16]
  return(result);
 801b288:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801b28a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801b28c:	b672      	cpsid	i
}
 801b28e:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 801b290:	687b      	ldr	r3, [r7, #4]
 801b292:	685b      	ldr	r3, [r3, #4]
 801b294:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801b296:	4b24      	ldr	r3, [pc, #144]	@ (801b328 <UTIL_TIMER_Start+0xd4>)
 801b298:	6a1b      	ldr	r3, [r3, #32]
 801b29a:	4798      	blx	r3
 801b29c:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 801b29e:	6a3a      	ldr	r2, [r7, #32]
 801b2a0:	69bb      	ldr	r3, [r7, #24]
 801b2a2:	429a      	cmp	r2, r3
 801b2a4:	d201      	bcs.n	801b2aa <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 801b2a6:	69bb      	ldr	r3, [r7, #24]
 801b2a8:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801b2aa:	687b      	ldr	r3, [r7, #4]
 801b2ac:	6a3a      	ldr	r2, [r7, #32]
 801b2ae:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801b2b0:	687b      	ldr	r3, [r7, #4]
 801b2b2:	2200      	movs	r2, #0
 801b2b4:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801b2b6:	687b      	ldr	r3, [r7, #4]
 801b2b8:	2201      	movs	r2, #1
 801b2ba:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801b2bc:	687b      	ldr	r3, [r7, #4]
 801b2be:	2200      	movs	r2, #0
 801b2c0:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801b2c2:	4b1a      	ldr	r3, [pc, #104]	@ (801b32c <UTIL_TIMER_Start+0xd8>)
 801b2c4:	681b      	ldr	r3, [r3, #0]
 801b2c6:	2b00      	cmp	r3, #0
 801b2c8:	d106      	bne.n	801b2d8 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 801b2ca:	4b17      	ldr	r3, [pc, #92]	@ (801b328 <UTIL_TIMER_Start+0xd4>)
 801b2cc:	691b      	ldr	r3, [r3, #16]
 801b2ce:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801b2d0:	6878      	ldr	r0, [r7, #4]
 801b2d2:	f000 f9eb 	bl	801b6ac <TimerInsertNewHeadTimer>
 801b2d6:	e017      	b.n	801b308 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801b2d8:	4b13      	ldr	r3, [pc, #76]	@ (801b328 <UTIL_TIMER_Start+0xd4>)
 801b2da:	699b      	ldr	r3, [r3, #24]
 801b2dc:	4798      	blx	r3
 801b2de:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801b2e0:	687b      	ldr	r3, [r7, #4]
 801b2e2:	681a      	ldr	r2, [r3, #0]
 801b2e4:	697b      	ldr	r3, [r7, #20]
 801b2e6:	441a      	add	r2, r3
 801b2e8:	687b      	ldr	r3, [r7, #4]
 801b2ea:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801b2ec:	687b      	ldr	r3, [r7, #4]
 801b2ee:	681a      	ldr	r2, [r3, #0]
 801b2f0:	4b0e      	ldr	r3, [pc, #56]	@ (801b32c <UTIL_TIMER_Start+0xd8>)
 801b2f2:	681b      	ldr	r3, [r3, #0]
 801b2f4:	681b      	ldr	r3, [r3, #0]
 801b2f6:	429a      	cmp	r2, r3
 801b2f8:	d203      	bcs.n	801b302 <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801b2fa:	6878      	ldr	r0, [r7, #4]
 801b2fc:	f000 f9d6 	bl	801b6ac <TimerInsertNewHeadTimer>
 801b300:	e002      	b.n	801b308 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801b302:	6878      	ldr	r0, [r7, #4]
 801b304:	f000 f9a2 	bl	801b64c <TimerInsertTimer>
 801b308:	69fb      	ldr	r3, [r7, #28]
 801b30a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b30c:	68fb      	ldr	r3, [r7, #12]
 801b30e:	f383 8810 	msr	PRIMASK, r3
}
 801b312:	bf00      	nop
  {
 801b314:	e002      	b.n	801b31c <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801b316:	2301      	movs	r3, #1
 801b318:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  return ret;
 801b31c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 801b320:	4618      	mov	r0, r3
 801b322:	3728      	adds	r7, #40	@ 0x28
 801b324:	46bd      	mov	sp, r7
 801b326:	bd80      	pop	{r7, pc}
 801b328:	0801f134 	.word	0x0801f134
 801b32c:	20001da4 	.word	0x20001da4

0801b330 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801b330:	b580      	push	{r7, lr}
 801b332:	b088      	sub	sp, #32
 801b334:	af00      	add	r7, sp, #0
 801b336:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801b338:	2300      	movs	r3, #0
 801b33a:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 801b33c:	687b      	ldr	r3, [r7, #4]
 801b33e:	2b00      	cmp	r3, #0
 801b340:	d05b      	beq.n	801b3fa <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b342:	f3ef 8310 	mrs	r3, PRIMASK
 801b346:	60fb      	str	r3, [r7, #12]
  return(result);
 801b348:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801b34a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801b34c:	b672      	cpsid	i
}
 801b34e:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801b350:	4b2d      	ldr	r3, [pc, #180]	@ (801b408 <UTIL_TIMER_Stop+0xd8>)
 801b352:	681b      	ldr	r3, [r3, #0]
 801b354:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801b356:	4b2c      	ldr	r3, [pc, #176]	@ (801b408 <UTIL_TIMER_Stop+0xd8>)
 801b358:	681b      	ldr	r3, [r3, #0]
 801b35a:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801b35c:	687b      	ldr	r3, [r7, #4]
 801b35e:	2201      	movs	r2, #1
 801b360:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801b362:	4b29      	ldr	r3, [pc, #164]	@ (801b408 <UTIL_TIMER_Stop+0xd8>)
 801b364:	681b      	ldr	r3, [r3, #0]
 801b366:	2b00      	cmp	r3, #0
 801b368:	d041      	beq.n	801b3ee <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 801b36a:	687b      	ldr	r3, [r7, #4]
 801b36c:	2200      	movs	r2, #0
 801b36e:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801b370:	4b25      	ldr	r3, [pc, #148]	@ (801b408 <UTIL_TIMER_Stop+0xd8>)
 801b372:	681b      	ldr	r3, [r3, #0]
 801b374:	687a      	ldr	r2, [r7, #4]
 801b376:	429a      	cmp	r2, r3
 801b378:	d134      	bne.n	801b3e4 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 801b37a:	4b23      	ldr	r3, [pc, #140]	@ (801b408 <UTIL_TIMER_Stop+0xd8>)
 801b37c:	681b      	ldr	r3, [r3, #0]
 801b37e:	2200      	movs	r2, #0
 801b380:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801b382:	4b21      	ldr	r3, [pc, #132]	@ (801b408 <UTIL_TIMER_Stop+0xd8>)
 801b384:	681b      	ldr	r3, [r3, #0]
 801b386:	695b      	ldr	r3, [r3, #20]
 801b388:	2b00      	cmp	r3, #0
 801b38a:	d00a      	beq.n	801b3a2 <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 801b38c:	4b1e      	ldr	r3, [pc, #120]	@ (801b408 <UTIL_TIMER_Stop+0xd8>)
 801b38e:	681b      	ldr	r3, [r3, #0]
 801b390:	695b      	ldr	r3, [r3, #20]
 801b392:	4a1d      	ldr	r2, [pc, #116]	@ (801b408 <UTIL_TIMER_Stop+0xd8>)
 801b394:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 801b396:	4b1c      	ldr	r3, [pc, #112]	@ (801b408 <UTIL_TIMER_Stop+0xd8>)
 801b398:	681b      	ldr	r3, [r3, #0]
 801b39a:	4618      	mov	r0, r3
 801b39c:	f000 f92c 	bl	801b5f8 <TimerSetTimeout>
 801b3a0:	e023      	b.n	801b3ea <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801b3a2:	4b1a      	ldr	r3, [pc, #104]	@ (801b40c <UTIL_TIMER_Stop+0xdc>)
 801b3a4:	68db      	ldr	r3, [r3, #12]
 801b3a6:	4798      	blx	r3
            TimerListHead = NULL;
 801b3a8:	4b17      	ldr	r3, [pc, #92]	@ (801b408 <UTIL_TIMER_Stop+0xd8>)
 801b3aa:	2200      	movs	r2, #0
 801b3ac:	601a      	str	r2, [r3, #0]
 801b3ae:	e01c      	b.n	801b3ea <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801b3b0:	697a      	ldr	r2, [r7, #20]
 801b3b2:	687b      	ldr	r3, [r7, #4]
 801b3b4:	429a      	cmp	r2, r3
 801b3b6:	d110      	bne.n	801b3da <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 801b3b8:	697b      	ldr	r3, [r7, #20]
 801b3ba:	695b      	ldr	r3, [r3, #20]
 801b3bc:	2b00      	cmp	r3, #0
 801b3be:	d006      	beq.n	801b3ce <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 801b3c0:	697b      	ldr	r3, [r7, #20]
 801b3c2:	695b      	ldr	r3, [r3, #20]
 801b3c4:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801b3c6:	69bb      	ldr	r3, [r7, #24]
 801b3c8:	697a      	ldr	r2, [r7, #20]
 801b3ca:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801b3cc:	e00d      	b.n	801b3ea <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 801b3ce:	2300      	movs	r3, #0
 801b3d0:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801b3d2:	69bb      	ldr	r3, [r7, #24]
 801b3d4:	697a      	ldr	r2, [r7, #20]
 801b3d6:	615a      	str	r2, [r3, #20]
            break;
 801b3d8:	e007      	b.n	801b3ea <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 801b3da:	697b      	ldr	r3, [r7, #20]
 801b3dc:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801b3de:	697b      	ldr	r3, [r7, #20]
 801b3e0:	695b      	ldr	r3, [r3, #20]
 801b3e2:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801b3e4:	697b      	ldr	r3, [r7, #20]
 801b3e6:	2b00      	cmp	r3, #0
 801b3e8:	d1e2      	bne.n	801b3b0 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801b3ea:	2300      	movs	r3, #0
 801b3ec:	77fb      	strb	r3, [r7, #31]
 801b3ee:	693b      	ldr	r3, [r7, #16]
 801b3f0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b3f2:	68bb      	ldr	r3, [r7, #8]
 801b3f4:	f383 8810 	msr	PRIMASK, r3
}
 801b3f8:	e001      	b.n	801b3fe <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801b3fa:	2301      	movs	r3, #1
 801b3fc:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 801b3fe:	7ffb      	ldrb	r3, [r7, #31]
}
 801b400:	4618      	mov	r0, r3
 801b402:	3720      	adds	r7, #32
 801b404:	46bd      	mov	sp, r7
 801b406:	bd80      	pop	{r7, pc}
 801b408:	20001da4 	.word	0x20001da4
 801b40c:	0801f134 	.word	0x0801f134

0801b410 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801b410:	b580      	push	{r7, lr}
 801b412:	b084      	sub	sp, #16
 801b414:	af00      	add	r7, sp, #0
 801b416:	6078      	str	r0, [r7, #4]
 801b418:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801b41a:	2300      	movs	r3, #0
 801b41c:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 801b41e:	687b      	ldr	r3, [r7, #4]
 801b420:	2b00      	cmp	r3, #0
 801b422:	d102      	bne.n	801b42a <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801b424:	2301      	movs	r3, #1
 801b426:	73fb      	strb	r3, [r7, #15]
 801b428:	e014      	b.n	801b454 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801b42a:	4b0d      	ldr	r3, [pc, #52]	@ (801b460 <UTIL_TIMER_SetPeriod+0x50>)
 801b42c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b42e:	6838      	ldr	r0, [r7, #0]
 801b430:	4798      	blx	r3
 801b432:	4602      	mov	r2, r0
 801b434:	687b      	ldr	r3, [r7, #4]
 801b436:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801b438:	6878      	ldr	r0, [r7, #4]
 801b43a:	f000 f8c1 	bl	801b5c0 <TimerExists>
 801b43e:	4603      	mov	r3, r0
 801b440:	2b00      	cmp	r3, #0
 801b442:	d007      	beq.n	801b454 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801b444:	6878      	ldr	r0, [r7, #4]
 801b446:	f7ff ff73 	bl	801b330 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801b44a:	6878      	ldr	r0, [r7, #4]
 801b44c:	f7ff ff02 	bl	801b254 <UTIL_TIMER_Start>
 801b450:	4603      	mov	r3, r0
 801b452:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 801b454:	7bfb      	ldrb	r3, [r7, #15]
}
 801b456:	4618      	mov	r0, r3
 801b458:	3710      	adds	r7, #16
 801b45a:	46bd      	mov	sp, r7
 801b45c:	bd80      	pop	{r7, pc}
 801b45e:	bf00      	nop
 801b460:	0801f134 	.word	0x0801f134

0801b464 <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801b464:	b590      	push	{r4, r7, lr}
 801b466:	b089      	sub	sp, #36	@ 0x24
 801b468:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b46a:	f3ef 8310 	mrs	r3, PRIMASK
 801b46e:	60bb      	str	r3, [r7, #8]
  return(result);
 801b470:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801b472:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801b474:	b672      	cpsid	i
}
 801b476:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801b478:	4b38      	ldr	r3, [pc, #224]	@ (801b55c <UTIL_TIMER_IRQ_Handler+0xf8>)
 801b47a:	695b      	ldr	r3, [r3, #20]
 801b47c:	4798      	blx	r3
 801b47e:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801b480:	4b36      	ldr	r3, [pc, #216]	@ (801b55c <UTIL_TIMER_IRQ_Handler+0xf8>)
 801b482:	691b      	ldr	r3, [r3, #16]
 801b484:	4798      	blx	r3
 801b486:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801b488:	693a      	ldr	r2, [r7, #16]
 801b48a:	697b      	ldr	r3, [r7, #20]
 801b48c:	1ad3      	subs	r3, r2, r3
 801b48e:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801b490:	4b33      	ldr	r3, [pc, #204]	@ (801b560 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801b492:	681b      	ldr	r3, [r3, #0]
 801b494:	2b00      	cmp	r3, #0
 801b496:	d037      	beq.n	801b508 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 801b498:	4b31      	ldr	r3, [pc, #196]	@ (801b560 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801b49a:	681b      	ldr	r3, [r3, #0]
 801b49c:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801b49e:	69fb      	ldr	r3, [r7, #28]
 801b4a0:	681b      	ldr	r3, [r3, #0]
 801b4a2:	68fa      	ldr	r2, [r7, #12]
 801b4a4:	429a      	cmp	r2, r3
 801b4a6:	d206      	bcs.n	801b4b6 <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 801b4a8:	69fb      	ldr	r3, [r7, #28]
 801b4aa:	681a      	ldr	r2, [r3, #0]
 801b4ac:	68fb      	ldr	r3, [r7, #12]
 801b4ae:	1ad2      	subs	r2, r2, r3
 801b4b0:	69fb      	ldr	r3, [r7, #28]
 801b4b2:	601a      	str	r2, [r3, #0]
 801b4b4:	e002      	b.n	801b4bc <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 801b4b6:	69fb      	ldr	r3, [r7, #28]
 801b4b8:	2200      	movs	r2, #0
 801b4ba:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801b4bc:	69fb      	ldr	r3, [r7, #28]
 801b4be:	695b      	ldr	r3, [r3, #20]
 801b4c0:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801b4c2:	69fb      	ldr	r3, [r7, #28]
 801b4c4:	2b00      	cmp	r3, #0
 801b4c6:	d1ea      	bne.n	801b49e <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801b4c8:	e01e      	b.n	801b508 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 801b4ca:	4b25      	ldr	r3, [pc, #148]	@ (801b560 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801b4cc:	681b      	ldr	r3, [r3, #0]
 801b4ce:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801b4d0:	4b23      	ldr	r3, [pc, #140]	@ (801b560 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801b4d2:	681b      	ldr	r3, [r3, #0]
 801b4d4:	695b      	ldr	r3, [r3, #20]
 801b4d6:	4a22      	ldr	r2, [pc, #136]	@ (801b560 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801b4d8:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 801b4da:	69fb      	ldr	r3, [r7, #28]
 801b4dc:	2200      	movs	r2, #0
 801b4de:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801b4e0:	69fb      	ldr	r3, [r7, #28]
 801b4e2:	2200      	movs	r2, #0
 801b4e4:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801b4e6:	69fb      	ldr	r3, [r7, #28]
 801b4e8:	68db      	ldr	r3, [r3, #12]
 801b4ea:	69fa      	ldr	r2, [r7, #28]
 801b4ec:	6912      	ldr	r2, [r2, #16]
 801b4ee:	4610      	mov	r0, r2
 801b4f0:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801b4f2:	69fb      	ldr	r3, [r7, #28]
 801b4f4:	7adb      	ldrb	r3, [r3, #11]
 801b4f6:	2b01      	cmp	r3, #1
 801b4f8:	d106      	bne.n	801b508 <UTIL_TIMER_IRQ_Handler+0xa4>
 801b4fa:	69fb      	ldr	r3, [r7, #28]
 801b4fc:	7a9b      	ldrb	r3, [r3, #10]
 801b4fe:	2b00      	cmp	r3, #0
 801b500:	d102      	bne.n	801b508 <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 801b502:	69f8      	ldr	r0, [r7, #28]
 801b504:	f7ff fea6 	bl	801b254 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801b508:	4b15      	ldr	r3, [pc, #84]	@ (801b560 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801b50a:	681b      	ldr	r3, [r3, #0]
 801b50c:	2b00      	cmp	r3, #0
 801b50e:	d00d      	beq.n	801b52c <UTIL_TIMER_IRQ_Handler+0xc8>
 801b510:	4b13      	ldr	r3, [pc, #76]	@ (801b560 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801b512:	681b      	ldr	r3, [r3, #0]
 801b514:	681b      	ldr	r3, [r3, #0]
 801b516:	2b00      	cmp	r3, #0
 801b518:	d0d7      	beq.n	801b4ca <UTIL_TIMER_IRQ_Handler+0x66>
 801b51a:	4b11      	ldr	r3, [pc, #68]	@ (801b560 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801b51c:	681b      	ldr	r3, [r3, #0]
 801b51e:	681c      	ldr	r4, [r3, #0]
 801b520:	4b0e      	ldr	r3, [pc, #56]	@ (801b55c <UTIL_TIMER_IRQ_Handler+0xf8>)
 801b522:	699b      	ldr	r3, [r3, #24]
 801b524:	4798      	blx	r3
 801b526:	4603      	mov	r3, r0
 801b528:	429c      	cmp	r4, r3
 801b52a:	d3ce      	bcc.n	801b4ca <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801b52c:	4b0c      	ldr	r3, [pc, #48]	@ (801b560 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801b52e:	681b      	ldr	r3, [r3, #0]
 801b530:	2b00      	cmp	r3, #0
 801b532:	d009      	beq.n	801b548 <UTIL_TIMER_IRQ_Handler+0xe4>
 801b534:	4b0a      	ldr	r3, [pc, #40]	@ (801b560 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801b536:	681b      	ldr	r3, [r3, #0]
 801b538:	7a1b      	ldrb	r3, [r3, #8]
 801b53a:	2b00      	cmp	r3, #0
 801b53c:	d104      	bne.n	801b548 <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 801b53e:	4b08      	ldr	r3, [pc, #32]	@ (801b560 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801b540:	681b      	ldr	r3, [r3, #0]
 801b542:	4618      	mov	r0, r3
 801b544:	f000 f858 	bl	801b5f8 <TimerSetTimeout>
 801b548:	69bb      	ldr	r3, [r7, #24]
 801b54a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b54c:	687b      	ldr	r3, [r7, #4]
 801b54e:	f383 8810 	msr	PRIMASK, r3
}
 801b552:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801b554:	bf00      	nop
 801b556:	3724      	adds	r7, #36	@ 0x24
 801b558:	46bd      	mov	sp, r7
 801b55a:	bd90      	pop	{r4, r7, pc}
 801b55c:	0801f134 	.word	0x0801f134
 801b560:	20001da4 	.word	0x20001da4

0801b564 <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801b564:	b580      	push	{r7, lr}
 801b566:	b082      	sub	sp, #8
 801b568:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801b56a:	4b06      	ldr	r3, [pc, #24]	@ (801b584 <UTIL_TIMER_GetCurrentTime+0x20>)
 801b56c:	69db      	ldr	r3, [r3, #28]
 801b56e:	4798      	blx	r3
 801b570:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801b572:	4b04      	ldr	r3, [pc, #16]	@ (801b584 <UTIL_TIMER_GetCurrentTime+0x20>)
 801b574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b576:	6878      	ldr	r0, [r7, #4]
 801b578:	4798      	blx	r3
 801b57a:	4603      	mov	r3, r0
}
 801b57c:	4618      	mov	r0, r3
 801b57e:	3708      	adds	r7, #8
 801b580:	46bd      	mov	sp, r7
 801b582:	bd80      	pop	{r7, pc}
 801b584:	0801f134 	.word	0x0801f134

0801b588 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801b588:	b580      	push	{r7, lr}
 801b58a:	b084      	sub	sp, #16
 801b58c:	af00      	add	r7, sp, #0
 801b58e:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801b590:	4b0a      	ldr	r3, [pc, #40]	@ (801b5bc <UTIL_TIMER_GetElapsedTime+0x34>)
 801b592:	69db      	ldr	r3, [r3, #28]
 801b594:	4798      	blx	r3
 801b596:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801b598:	4b08      	ldr	r3, [pc, #32]	@ (801b5bc <UTIL_TIMER_GetElapsedTime+0x34>)
 801b59a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b59c:	6878      	ldr	r0, [r7, #4]
 801b59e:	4798      	blx	r3
 801b5a0:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801b5a2:	4b06      	ldr	r3, [pc, #24]	@ (801b5bc <UTIL_TIMER_GetElapsedTime+0x34>)
 801b5a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b5a6:	68f9      	ldr	r1, [r7, #12]
 801b5a8:	68ba      	ldr	r2, [r7, #8]
 801b5aa:	1a8a      	subs	r2, r1, r2
 801b5ac:	4610      	mov	r0, r2
 801b5ae:	4798      	blx	r3
 801b5b0:	4603      	mov	r3, r0
}
 801b5b2:	4618      	mov	r0, r3
 801b5b4:	3710      	adds	r7, #16
 801b5b6:	46bd      	mov	sp, r7
 801b5b8:	bd80      	pop	{r7, pc}
 801b5ba:	bf00      	nop
 801b5bc:	0801f134 	.word	0x0801f134

0801b5c0 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801b5c0:	b480      	push	{r7}
 801b5c2:	b085      	sub	sp, #20
 801b5c4:	af00      	add	r7, sp, #0
 801b5c6:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801b5c8:	4b0a      	ldr	r3, [pc, #40]	@ (801b5f4 <TimerExists+0x34>)
 801b5ca:	681b      	ldr	r3, [r3, #0]
 801b5cc:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801b5ce:	e008      	b.n	801b5e2 <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801b5d0:	68fa      	ldr	r2, [r7, #12]
 801b5d2:	687b      	ldr	r3, [r7, #4]
 801b5d4:	429a      	cmp	r2, r3
 801b5d6:	d101      	bne.n	801b5dc <TimerExists+0x1c>
    {
      return true;
 801b5d8:	2301      	movs	r3, #1
 801b5da:	e006      	b.n	801b5ea <TimerExists+0x2a>
    }
    cur = cur->Next;
 801b5dc:	68fb      	ldr	r3, [r7, #12]
 801b5de:	695b      	ldr	r3, [r3, #20]
 801b5e0:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801b5e2:	68fb      	ldr	r3, [r7, #12]
 801b5e4:	2b00      	cmp	r3, #0
 801b5e6:	d1f3      	bne.n	801b5d0 <TimerExists+0x10>
  }
  return false;
 801b5e8:	2300      	movs	r3, #0
}
 801b5ea:	4618      	mov	r0, r3
 801b5ec:	3714      	adds	r7, #20
 801b5ee:	46bd      	mov	sp, r7
 801b5f0:	bc80      	pop	{r7}
 801b5f2:	4770      	bx	lr
 801b5f4:	20001da4 	.word	0x20001da4

0801b5f8 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801b5f8:	b590      	push	{r4, r7, lr}
 801b5fa:	b085      	sub	sp, #20
 801b5fc:	af00      	add	r7, sp, #0
 801b5fe:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801b600:	4b11      	ldr	r3, [pc, #68]	@ (801b648 <TimerSetTimeout+0x50>)
 801b602:	6a1b      	ldr	r3, [r3, #32]
 801b604:	4798      	blx	r3
 801b606:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 801b608:	687b      	ldr	r3, [r7, #4]
 801b60a:	2201      	movs	r2, #1
 801b60c:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801b60e:	687b      	ldr	r3, [r7, #4]
 801b610:	681c      	ldr	r4, [r3, #0]
 801b612:	4b0d      	ldr	r3, [pc, #52]	@ (801b648 <TimerSetTimeout+0x50>)
 801b614:	699b      	ldr	r3, [r3, #24]
 801b616:	4798      	blx	r3
 801b618:	4602      	mov	r2, r0
 801b61a:	68fb      	ldr	r3, [r7, #12]
 801b61c:	4413      	add	r3, r2
 801b61e:	429c      	cmp	r4, r3
 801b620:	d207      	bcs.n	801b632 <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801b622:	4b09      	ldr	r3, [pc, #36]	@ (801b648 <TimerSetTimeout+0x50>)
 801b624:	699b      	ldr	r3, [r3, #24]
 801b626:	4798      	blx	r3
 801b628:	4602      	mov	r2, r0
 801b62a:	68fb      	ldr	r3, [r7, #12]
 801b62c:	441a      	add	r2, r3
 801b62e:	687b      	ldr	r3, [r7, #4]
 801b630:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801b632:	4b05      	ldr	r3, [pc, #20]	@ (801b648 <TimerSetTimeout+0x50>)
 801b634:	689b      	ldr	r3, [r3, #8]
 801b636:	687a      	ldr	r2, [r7, #4]
 801b638:	6812      	ldr	r2, [r2, #0]
 801b63a:	4610      	mov	r0, r2
 801b63c:	4798      	blx	r3
}
 801b63e:	bf00      	nop
 801b640:	3714      	adds	r7, #20
 801b642:	46bd      	mov	sp, r7
 801b644:	bd90      	pop	{r4, r7, pc}
 801b646:	bf00      	nop
 801b648:	0801f134 	.word	0x0801f134

0801b64c <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801b64c:	b480      	push	{r7}
 801b64e:	b085      	sub	sp, #20
 801b650:	af00      	add	r7, sp, #0
 801b652:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801b654:	4b14      	ldr	r3, [pc, #80]	@ (801b6a8 <TimerInsertTimer+0x5c>)
 801b656:	681b      	ldr	r3, [r3, #0]
 801b658:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801b65a:	4b13      	ldr	r3, [pc, #76]	@ (801b6a8 <TimerInsertTimer+0x5c>)
 801b65c:	681b      	ldr	r3, [r3, #0]
 801b65e:	695b      	ldr	r3, [r3, #20]
 801b660:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801b662:	e012      	b.n	801b68a <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801b664:	687b      	ldr	r3, [r7, #4]
 801b666:	681a      	ldr	r2, [r3, #0]
 801b668:	68bb      	ldr	r3, [r7, #8]
 801b66a:	681b      	ldr	r3, [r3, #0]
 801b66c:	429a      	cmp	r2, r3
 801b66e:	d905      	bls.n	801b67c <TimerInsertTimer+0x30>
    {
        cur = next;
 801b670:	68bb      	ldr	r3, [r7, #8]
 801b672:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801b674:	68bb      	ldr	r3, [r7, #8]
 801b676:	695b      	ldr	r3, [r3, #20]
 801b678:	60bb      	str	r3, [r7, #8]
 801b67a:	e006      	b.n	801b68a <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801b67c:	68fb      	ldr	r3, [r7, #12]
 801b67e:	687a      	ldr	r2, [r7, #4]
 801b680:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801b682:	687b      	ldr	r3, [r7, #4]
 801b684:	68ba      	ldr	r2, [r7, #8]
 801b686:	615a      	str	r2, [r3, #20]
        return;
 801b688:	e009      	b.n	801b69e <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801b68a:	68fb      	ldr	r3, [r7, #12]
 801b68c:	695b      	ldr	r3, [r3, #20]
 801b68e:	2b00      	cmp	r3, #0
 801b690:	d1e8      	bne.n	801b664 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801b692:	68fb      	ldr	r3, [r7, #12]
 801b694:	687a      	ldr	r2, [r7, #4]
 801b696:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801b698:	687b      	ldr	r3, [r7, #4]
 801b69a:	2200      	movs	r2, #0
 801b69c:	615a      	str	r2, [r3, #20]
}
 801b69e:	3714      	adds	r7, #20
 801b6a0:	46bd      	mov	sp, r7
 801b6a2:	bc80      	pop	{r7}
 801b6a4:	4770      	bx	lr
 801b6a6:	bf00      	nop
 801b6a8:	20001da4 	.word	0x20001da4

0801b6ac <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801b6ac:	b580      	push	{r7, lr}
 801b6ae:	b084      	sub	sp, #16
 801b6b0:	af00      	add	r7, sp, #0
 801b6b2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801b6b4:	4b0b      	ldr	r3, [pc, #44]	@ (801b6e4 <TimerInsertNewHeadTimer+0x38>)
 801b6b6:	681b      	ldr	r3, [r3, #0]
 801b6b8:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801b6ba:	68fb      	ldr	r3, [r7, #12]
 801b6bc:	2b00      	cmp	r3, #0
 801b6be:	d002      	beq.n	801b6c6 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801b6c0:	68fb      	ldr	r3, [r7, #12]
 801b6c2:	2200      	movs	r2, #0
 801b6c4:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801b6c6:	687b      	ldr	r3, [r7, #4]
 801b6c8:	68fa      	ldr	r2, [r7, #12]
 801b6ca:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801b6cc:	4a05      	ldr	r2, [pc, #20]	@ (801b6e4 <TimerInsertNewHeadTimer+0x38>)
 801b6ce:	687b      	ldr	r3, [r7, #4]
 801b6d0:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 801b6d2:	4b04      	ldr	r3, [pc, #16]	@ (801b6e4 <TimerInsertNewHeadTimer+0x38>)
 801b6d4:	681b      	ldr	r3, [r3, #0]
 801b6d6:	4618      	mov	r0, r3
 801b6d8:	f7ff ff8e 	bl	801b5f8 <TimerSetTimeout>
}
 801b6dc:	bf00      	nop
 801b6de:	3710      	adds	r7, #16
 801b6e0:	46bd      	mov	sp, r7
 801b6e2:	bd80      	pop	{r7, pc}
 801b6e4:	20001da4 	.word	0x20001da4

0801b6e8 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801b6e8:	b580      	push	{r7, lr}
 801b6ea:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801b6ec:	2218      	movs	r2, #24
 801b6ee:	2100      	movs	r1, #0
 801b6f0:	4807      	ldr	r0, [pc, #28]	@ (801b710 <UTIL_ADV_TRACE_Init+0x28>)
 801b6f2:	f7fe fffc 	bl	801a6ee <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801b6f6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801b6fa:	2100      	movs	r1, #0
 801b6fc:	4805      	ldr	r0, [pc, #20]	@ (801b714 <UTIL_ADV_TRACE_Init+0x2c>)
 801b6fe:	f7fe fff6 	bl	801a6ee <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801b702:	4b05      	ldr	r3, [pc, #20]	@ (801b718 <UTIL_ADV_TRACE_Init+0x30>)
 801b704:	681b      	ldr	r3, [r3, #0]
 801b706:	4805      	ldr	r0, [pc, #20]	@ (801b71c <UTIL_ADV_TRACE_Init+0x34>)
 801b708:	4798      	blx	r3
 801b70a:	4603      	mov	r3, r0
}
 801b70c:	4618      	mov	r0, r3
 801b70e:	bd80      	pop	{r7, pc}
 801b710:	20001da8 	.word	0x20001da8
 801b714:	20001dc0 	.word	0x20001dc0
 801b718:	0801f174 	.word	0x0801f174
 801b71c:	0801b989 	.word	0x0801b989

0801b720 <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 801b720:	b480      	push	{r7}
 801b722:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801b724:	4b06      	ldr	r3, [pc, #24]	@ (801b740 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801b726:	8a5a      	ldrh	r2, [r3, #18]
 801b728:	4b05      	ldr	r3, [pc, #20]	@ (801b740 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801b72a:	8a1b      	ldrh	r3, [r3, #16]
 801b72c:	429a      	cmp	r2, r3
 801b72e:	d101      	bne.n	801b734 <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 801b730:	2301      	movs	r3, #1
 801b732:	e000      	b.n	801b736 <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 801b734:	2300      	movs	r3, #0
}
 801b736:	4618      	mov	r0, r3
 801b738:	46bd      	mov	sp, r7
 801b73a:	bc80      	pop	{r7}
 801b73c:	4770      	bx	lr
 801b73e:	bf00      	nop
 801b740:	20001da8 	.word	0x20001da8

0801b744 <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801b744:	b408      	push	{r3}
 801b746:	b580      	push	{r7, lr}
 801b748:	b08d      	sub	sp, #52	@ 0x34
 801b74a:	af00      	add	r7, sp, #0
 801b74c:	60f8      	str	r0, [r7, #12]
 801b74e:	60b9      	str	r1, [r7, #8]
 801b750:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801b752:	2300      	movs	r3, #0
 801b754:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801b756:	2300      	movs	r3, #0
 801b758:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801b75a:	4b37      	ldr	r3, [pc, #220]	@ (801b838 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801b75c:	7a1b      	ldrb	r3, [r3, #8]
 801b75e:	461a      	mov	r2, r3
 801b760:	68fb      	ldr	r3, [r7, #12]
 801b762:	4293      	cmp	r3, r2
 801b764:	d902      	bls.n	801b76c <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801b766:	f06f 0304 	mvn.w	r3, #4
 801b76a:	e05e      	b.n	801b82a <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801b76c:	4b32      	ldr	r3, [pc, #200]	@ (801b838 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801b76e:	68da      	ldr	r2, [r3, #12]
 801b770:	68bb      	ldr	r3, [r7, #8]
 801b772:	4013      	ands	r3, r2
 801b774:	68ba      	ldr	r2, [r7, #8]
 801b776:	429a      	cmp	r2, r3
 801b778:	d002      	beq.n	801b780 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801b77a:	f06f 0305 	mvn.w	r3, #5
 801b77e:	e054      	b.n	801b82a <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801b780:	4b2d      	ldr	r3, [pc, #180]	@ (801b838 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801b782:	685b      	ldr	r3, [r3, #4]
 801b784:	2b00      	cmp	r3, #0
 801b786:	d00a      	beq.n	801b79e <UTIL_ADV_TRACE_COND_FSend+0x5a>
 801b788:	687b      	ldr	r3, [r7, #4]
 801b78a:	2b00      	cmp	r3, #0
 801b78c:	d007      	beq.n	801b79e <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801b78e:	4b2a      	ldr	r3, [pc, #168]	@ (801b838 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801b790:	685b      	ldr	r3, [r3, #4]
 801b792:	f107 0116 	add.w	r1, r7, #22
 801b796:	f107 0218 	add.w	r2, r7, #24
 801b79a:	4610      	mov	r0, r2
 801b79c:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801b79e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801b7a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801b7a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b7a6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801b7a8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801b7ac:	4823      	ldr	r0, [pc, #140]	@ (801b83c <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801b7ae:	f7ff fa2b 	bl	801ac08 <tiny_vsnprintf_like>
 801b7b2:	4603      	mov	r3, r0
 801b7b4:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  TRACE_Lock();
 801b7b6:	f000 f9f1 	bl	801bb9c <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801b7ba:	8afa      	ldrh	r2, [r7, #22]
 801b7bc:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801b7be:	4413      	add	r3, r2
 801b7c0:	b29b      	uxth	r3, r3
 801b7c2:	f107 0214 	add.w	r2, r7, #20
 801b7c6:	4611      	mov	r1, r2
 801b7c8:	4618      	mov	r0, r3
 801b7ca:	f000 f969 	bl	801baa0 <TRACE_AllocateBufer>
 801b7ce:	4603      	mov	r3, r0
 801b7d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b7d4:	d025      	beq.n	801b822 <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801b7d6:	2300      	movs	r3, #0
 801b7d8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 801b7da:	e00e      	b.n	801b7fa <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801b7dc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801b7de:	8aba      	ldrh	r2, [r7, #20]
 801b7e0:	3330      	adds	r3, #48	@ 0x30
 801b7e2:	443b      	add	r3, r7
 801b7e4:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 801b7e8:	4b15      	ldr	r3, [pc, #84]	@ (801b840 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801b7ea:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 801b7ec:	8abb      	ldrh	r3, [r7, #20]
 801b7ee:	3301      	adds	r3, #1
 801b7f0:	b29b      	uxth	r3, r3
 801b7f2:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 801b7f4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801b7f6:	3301      	adds	r3, #1
 801b7f8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 801b7fa:	8afb      	ldrh	r3, [r7, #22]
 801b7fc:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801b7fe:	429a      	cmp	r2, r3
 801b800:	d3ec      	bcc.n	801b7dc <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801b802:	8abb      	ldrh	r3, [r7, #20]
 801b804:	461a      	mov	r2, r3
 801b806:	4b0e      	ldr	r3, [pc, #56]	@ (801b840 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801b808:	18d0      	adds	r0, r2, r3
 801b80a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b80c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801b80e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801b812:	f7ff f9f9 	bl	801ac08 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801b816:	f000 f9df 	bl	801bbd8 <TRACE_UnLock>

    return TRACE_Send();
 801b81a:	f000 f831 	bl	801b880 <TRACE_Send>
 801b81e:	4603      	mov	r3, r0
 801b820:	e003      	b.n	801b82a <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801b822:	f000 f9d9 	bl	801bbd8 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801b826:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801b82a:	4618      	mov	r0, r3
 801b82c:	3734      	adds	r7, #52	@ 0x34
 801b82e:	46bd      	mov	sp, r7
 801b830:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801b834:	b001      	add	sp, #4
 801b836:	4770      	bx	lr
 801b838:	20001da8 	.word	0x20001da8
 801b83c:	200021c0 	.word	0x200021c0
 801b840:	20001dc0 	.word	0x20001dc0

0801b844 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801b844:	b480      	push	{r7}
 801b846:	b083      	sub	sp, #12
 801b848:	af00      	add	r7, sp, #0
 801b84a:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 801b84c:	4a03      	ldr	r2, [pc, #12]	@ (801b85c <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801b84e:	687b      	ldr	r3, [r7, #4]
 801b850:	6053      	str	r3, [r2, #4]
}
 801b852:	bf00      	nop
 801b854:	370c      	adds	r7, #12
 801b856:	46bd      	mov	sp, r7
 801b858:	bc80      	pop	{r7}
 801b85a:	4770      	bx	lr
 801b85c:	20001da8 	.word	0x20001da8

0801b860 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801b860:	b480      	push	{r7}
 801b862:	b083      	sub	sp, #12
 801b864:	af00      	add	r7, sp, #0
 801b866:	4603      	mov	r3, r0
 801b868:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801b86a:	4a04      	ldr	r2, [pc, #16]	@ (801b87c <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801b86c:	79fb      	ldrb	r3, [r7, #7]
 801b86e:	7213      	strb	r3, [r2, #8]
}
 801b870:	bf00      	nop
 801b872:	370c      	adds	r7, #12
 801b874:	46bd      	mov	sp, r7
 801b876:	bc80      	pop	{r7}
 801b878:	4770      	bx	lr
 801b87a:	bf00      	nop
 801b87c:	20001da8 	.word	0x20001da8

0801b880 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801b880:	b580      	push	{r7, lr}
 801b882:	b088      	sub	sp, #32
 801b884:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801b886:	2300      	movs	r3, #0
 801b888:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 801b88a:	2300      	movs	r3, #0
 801b88c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b88e:	f3ef 8310 	mrs	r3, PRIMASK
 801b892:	613b      	str	r3, [r7, #16]
  return(result);
 801b894:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801b896:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b898:	b672      	cpsid	i
}
 801b89a:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 801b89c:	f000 f9ba 	bl	801bc14 <TRACE_IsLocked>
 801b8a0:	4603      	mov	r3, r0
 801b8a2:	2b00      	cmp	r3, #0
 801b8a4:	d15d      	bne.n	801b962 <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 801b8a6:	f000 f979 	bl	801bb9c <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801b8aa:	4b34      	ldr	r3, [pc, #208]	@ (801b97c <TRACE_Send+0xfc>)
 801b8ac:	8a1a      	ldrh	r2, [r3, #16]
 801b8ae:	4b33      	ldr	r3, [pc, #204]	@ (801b97c <TRACE_Send+0xfc>)
 801b8b0:	8a5b      	ldrh	r3, [r3, #18]
 801b8b2:	429a      	cmp	r2, r3
 801b8b4:	d04d      	beq.n	801b952 <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801b8b6:	4b31      	ldr	r3, [pc, #196]	@ (801b97c <TRACE_Send+0xfc>)
 801b8b8:	789b      	ldrb	r3, [r3, #2]
 801b8ba:	2b01      	cmp	r3, #1
 801b8bc:	d117      	bne.n	801b8ee <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801b8be:	4b2f      	ldr	r3, [pc, #188]	@ (801b97c <TRACE_Send+0xfc>)
 801b8c0:	881a      	ldrh	r2, [r3, #0]
 801b8c2:	4b2e      	ldr	r3, [pc, #184]	@ (801b97c <TRACE_Send+0xfc>)
 801b8c4:	8a1b      	ldrh	r3, [r3, #16]
 801b8c6:	1ad3      	subs	r3, r2, r3
 801b8c8:	b29a      	uxth	r2, r3
 801b8ca:	4b2c      	ldr	r3, [pc, #176]	@ (801b97c <TRACE_Send+0xfc>)
 801b8cc:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801b8ce:	4b2b      	ldr	r3, [pc, #172]	@ (801b97c <TRACE_Send+0xfc>)
 801b8d0:	2202      	movs	r2, #2
 801b8d2:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801b8d4:	4b29      	ldr	r3, [pc, #164]	@ (801b97c <TRACE_Send+0xfc>)
 801b8d6:	2200      	movs	r2, #0
 801b8d8:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801b8da:	4b28      	ldr	r3, [pc, #160]	@ (801b97c <TRACE_Send+0xfc>)
 801b8dc:	8a9b      	ldrh	r3, [r3, #20]
 801b8de:	2b00      	cmp	r3, #0
 801b8e0:	d105      	bne.n	801b8ee <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801b8e2:	4b26      	ldr	r3, [pc, #152]	@ (801b97c <TRACE_Send+0xfc>)
 801b8e4:	2200      	movs	r2, #0
 801b8e6:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801b8e8:	4b24      	ldr	r3, [pc, #144]	@ (801b97c <TRACE_Send+0xfc>)
 801b8ea:	2200      	movs	r2, #0
 801b8ec:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801b8ee:	4b23      	ldr	r3, [pc, #140]	@ (801b97c <TRACE_Send+0xfc>)
 801b8f0:	789b      	ldrb	r3, [r3, #2]
 801b8f2:	2b00      	cmp	r3, #0
 801b8f4:	d115      	bne.n	801b922 <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801b8f6:	4b21      	ldr	r3, [pc, #132]	@ (801b97c <TRACE_Send+0xfc>)
 801b8f8:	8a5a      	ldrh	r2, [r3, #18]
 801b8fa:	4b20      	ldr	r3, [pc, #128]	@ (801b97c <TRACE_Send+0xfc>)
 801b8fc:	8a1b      	ldrh	r3, [r3, #16]
 801b8fe:	429a      	cmp	r2, r3
 801b900:	d908      	bls.n	801b914 <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801b902:	4b1e      	ldr	r3, [pc, #120]	@ (801b97c <TRACE_Send+0xfc>)
 801b904:	8a5a      	ldrh	r2, [r3, #18]
 801b906:	4b1d      	ldr	r3, [pc, #116]	@ (801b97c <TRACE_Send+0xfc>)
 801b908:	8a1b      	ldrh	r3, [r3, #16]
 801b90a:	1ad3      	subs	r3, r2, r3
 801b90c:	b29a      	uxth	r2, r3
 801b90e:	4b1b      	ldr	r3, [pc, #108]	@ (801b97c <TRACE_Send+0xfc>)
 801b910:	829a      	strh	r2, [r3, #20]
 801b912:	e006      	b.n	801b922 <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801b914:	4b19      	ldr	r3, [pc, #100]	@ (801b97c <TRACE_Send+0xfc>)
 801b916:	8a1b      	ldrh	r3, [r3, #16]
 801b918:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801b91c:	b29a      	uxth	r2, r3
 801b91e:	4b17      	ldr	r3, [pc, #92]	@ (801b97c <TRACE_Send+0xfc>)
 801b920:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801b922:	4b16      	ldr	r3, [pc, #88]	@ (801b97c <TRACE_Send+0xfc>)
 801b924:	8a1b      	ldrh	r3, [r3, #16]
 801b926:	461a      	mov	r2, r3
 801b928:	4b15      	ldr	r3, [pc, #84]	@ (801b980 <TRACE_Send+0x100>)
 801b92a:	4413      	add	r3, r2
 801b92c:	61bb      	str	r3, [r7, #24]
 801b92e:	697b      	ldr	r3, [r7, #20]
 801b930:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b932:	68fb      	ldr	r3, [r7, #12]
 801b934:	f383 8810 	msr	PRIMASK, r3
}
 801b938:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 801b93a:	f7e6 fbc1 	bl	80020c0 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801b93e:	4b11      	ldr	r3, [pc, #68]	@ (801b984 <TRACE_Send+0x104>)
 801b940:	68db      	ldr	r3, [r3, #12]
 801b942:	4a0e      	ldr	r2, [pc, #56]	@ (801b97c <TRACE_Send+0xfc>)
 801b944:	8a92      	ldrh	r2, [r2, #20]
 801b946:	4611      	mov	r1, r2
 801b948:	69b8      	ldr	r0, [r7, #24]
 801b94a:	4798      	blx	r3
 801b94c:	4603      	mov	r3, r0
 801b94e:	77fb      	strb	r3, [r7, #31]
 801b950:	e00d      	b.n	801b96e <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 801b952:	f000 f941 	bl	801bbd8 <TRACE_UnLock>
 801b956:	697b      	ldr	r3, [r7, #20]
 801b958:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b95a:	68bb      	ldr	r3, [r7, #8]
 801b95c:	f383 8810 	msr	PRIMASK, r3
}
 801b960:	e005      	b.n	801b96e <TRACE_Send+0xee>
 801b962:	697b      	ldr	r3, [r7, #20]
 801b964:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b966:	687b      	ldr	r3, [r7, #4]
 801b968:	f383 8810 	msr	PRIMASK, r3
}
 801b96c:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 801b96e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801b972:	4618      	mov	r0, r3
 801b974:	3720      	adds	r7, #32
 801b976:	46bd      	mov	sp, r7
 801b978:	bd80      	pop	{r7, pc}
 801b97a:	bf00      	nop
 801b97c:	20001da8 	.word	0x20001da8
 801b980:	20001dc0 	.word	0x20001dc0
 801b984:	0801f174 	.word	0x0801f174

0801b988 <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 801b988:	b580      	push	{r7, lr}
 801b98a:	b088      	sub	sp, #32
 801b98c:	af00      	add	r7, sp, #0
 801b98e:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 801b990:	2300      	movs	r3, #0
 801b992:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b994:	f3ef 8310 	mrs	r3, PRIMASK
 801b998:	617b      	str	r3, [r7, #20]
  return(result);
 801b99a:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801b99c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801b99e:	b672      	cpsid	i
}
 801b9a0:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801b9a2:	4b3c      	ldr	r3, [pc, #240]	@ (801ba94 <TRACE_TxCpltCallback+0x10c>)
 801b9a4:	789b      	ldrb	r3, [r3, #2]
 801b9a6:	2b02      	cmp	r3, #2
 801b9a8:	d106      	bne.n	801b9b8 <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801b9aa:	4b3a      	ldr	r3, [pc, #232]	@ (801ba94 <TRACE_TxCpltCallback+0x10c>)
 801b9ac:	2200      	movs	r2, #0
 801b9ae:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 801b9b0:	4b38      	ldr	r3, [pc, #224]	@ (801ba94 <TRACE_TxCpltCallback+0x10c>)
 801b9b2:	2200      	movs	r2, #0
 801b9b4:	821a      	strh	r2, [r3, #16]
 801b9b6:	e00a      	b.n	801b9ce <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801b9b8:	4b36      	ldr	r3, [pc, #216]	@ (801ba94 <TRACE_TxCpltCallback+0x10c>)
 801b9ba:	8a1a      	ldrh	r2, [r3, #16]
 801b9bc:	4b35      	ldr	r3, [pc, #212]	@ (801ba94 <TRACE_TxCpltCallback+0x10c>)
 801b9be:	8a9b      	ldrh	r3, [r3, #20]
 801b9c0:	4413      	add	r3, r2
 801b9c2:	b29b      	uxth	r3, r3
 801b9c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801b9c8:	b29a      	uxth	r2, r3
 801b9ca:	4b32      	ldr	r3, [pc, #200]	@ (801ba94 <TRACE_TxCpltCallback+0x10c>)
 801b9cc:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801b9ce:	4b31      	ldr	r3, [pc, #196]	@ (801ba94 <TRACE_TxCpltCallback+0x10c>)
 801b9d0:	8a1a      	ldrh	r2, [r3, #16]
 801b9d2:	4b30      	ldr	r3, [pc, #192]	@ (801ba94 <TRACE_TxCpltCallback+0x10c>)
 801b9d4:	8a5b      	ldrh	r3, [r3, #18]
 801b9d6:	429a      	cmp	r2, r3
 801b9d8:	d04d      	beq.n	801ba76 <TRACE_TxCpltCallback+0xee>
 801b9da:	4b2e      	ldr	r3, [pc, #184]	@ (801ba94 <TRACE_TxCpltCallback+0x10c>)
 801b9dc:	8adb      	ldrh	r3, [r3, #22]
 801b9de:	2b01      	cmp	r3, #1
 801b9e0:	d149      	bne.n	801ba76 <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801b9e2:	4b2c      	ldr	r3, [pc, #176]	@ (801ba94 <TRACE_TxCpltCallback+0x10c>)
 801b9e4:	789b      	ldrb	r3, [r3, #2]
 801b9e6:	2b01      	cmp	r3, #1
 801b9e8:	d117      	bne.n	801ba1a <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801b9ea:	4b2a      	ldr	r3, [pc, #168]	@ (801ba94 <TRACE_TxCpltCallback+0x10c>)
 801b9ec:	881a      	ldrh	r2, [r3, #0]
 801b9ee:	4b29      	ldr	r3, [pc, #164]	@ (801ba94 <TRACE_TxCpltCallback+0x10c>)
 801b9f0:	8a1b      	ldrh	r3, [r3, #16]
 801b9f2:	1ad3      	subs	r3, r2, r3
 801b9f4:	b29a      	uxth	r2, r3
 801b9f6:	4b27      	ldr	r3, [pc, #156]	@ (801ba94 <TRACE_TxCpltCallback+0x10c>)
 801b9f8:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801b9fa:	4b26      	ldr	r3, [pc, #152]	@ (801ba94 <TRACE_TxCpltCallback+0x10c>)
 801b9fc:	2202      	movs	r2, #2
 801b9fe:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 801ba00:	4b24      	ldr	r3, [pc, #144]	@ (801ba94 <TRACE_TxCpltCallback+0x10c>)
 801ba02:	2200      	movs	r2, #0
 801ba04:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801ba06:	4b23      	ldr	r3, [pc, #140]	@ (801ba94 <TRACE_TxCpltCallback+0x10c>)
 801ba08:	8a9b      	ldrh	r3, [r3, #20]
 801ba0a:	2b00      	cmp	r3, #0
 801ba0c:	d105      	bne.n	801ba1a <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801ba0e:	4b21      	ldr	r3, [pc, #132]	@ (801ba94 <TRACE_TxCpltCallback+0x10c>)
 801ba10:	2200      	movs	r2, #0
 801ba12:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801ba14:	4b1f      	ldr	r3, [pc, #124]	@ (801ba94 <TRACE_TxCpltCallback+0x10c>)
 801ba16:	2200      	movs	r2, #0
 801ba18:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801ba1a:	4b1e      	ldr	r3, [pc, #120]	@ (801ba94 <TRACE_TxCpltCallback+0x10c>)
 801ba1c:	789b      	ldrb	r3, [r3, #2]
 801ba1e:	2b00      	cmp	r3, #0
 801ba20:	d115      	bne.n	801ba4e <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801ba22:	4b1c      	ldr	r3, [pc, #112]	@ (801ba94 <TRACE_TxCpltCallback+0x10c>)
 801ba24:	8a5a      	ldrh	r2, [r3, #18]
 801ba26:	4b1b      	ldr	r3, [pc, #108]	@ (801ba94 <TRACE_TxCpltCallback+0x10c>)
 801ba28:	8a1b      	ldrh	r3, [r3, #16]
 801ba2a:	429a      	cmp	r2, r3
 801ba2c:	d908      	bls.n	801ba40 <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801ba2e:	4b19      	ldr	r3, [pc, #100]	@ (801ba94 <TRACE_TxCpltCallback+0x10c>)
 801ba30:	8a5a      	ldrh	r2, [r3, #18]
 801ba32:	4b18      	ldr	r3, [pc, #96]	@ (801ba94 <TRACE_TxCpltCallback+0x10c>)
 801ba34:	8a1b      	ldrh	r3, [r3, #16]
 801ba36:	1ad3      	subs	r3, r2, r3
 801ba38:	b29a      	uxth	r2, r3
 801ba3a:	4b16      	ldr	r3, [pc, #88]	@ (801ba94 <TRACE_TxCpltCallback+0x10c>)
 801ba3c:	829a      	strh	r2, [r3, #20]
 801ba3e:	e006      	b.n	801ba4e <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801ba40:	4b14      	ldr	r3, [pc, #80]	@ (801ba94 <TRACE_TxCpltCallback+0x10c>)
 801ba42:	8a1b      	ldrh	r3, [r3, #16]
 801ba44:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801ba48:	b29a      	uxth	r2, r3
 801ba4a:	4b12      	ldr	r3, [pc, #72]	@ (801ba94 <TRACE_TxCpltCallback+0x10c>)
 801ba4c:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801ba4e:	4b11      	ldr	r3, [pc, #68]	@ (801ba94 <TRACE_TxCpltCallback+0x10c>)
 801ba50:	8a1b      	ldrh	r3, [r3, #16]
 801ba52:	461a      	mov	r2, r3
 801ba54:	4b10      	ldr	r3, [pc, #64]	@ (801ba98 <TRACE_TxCpltCallback+0x110>)
 801ba56:	4413      	add	r3, r2
 801ba58:	61fb      	str	r3, [r7, #28]
 801ba5a:	69bb      	ldr	r3, [r7, #24]
 801ba5c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ba5e:	693b      	ldr	r3, [r7, #16]
 801ba60:	f383 8810 	msr	PRIMASK, r3
}
 801ba64:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801ba66:	4b0d      	ldr	r3, [pc, #52]	@ (801ba9c <TRACE_TxCpltCallback+0x114>)
 801ba68:	68db      	ldr	r3, [r3, #12]
 801ba6a:	4a0a      	ldr	r2, [pc, #40]	@ (801ba94 <TRACE_TxCpltCallback+0x10c>)
 801ba6c:	8a92      	ldrh	r2, [r2, #20]
 801ba6e:	4611      	mov	r1, r2
 801ba70:	69f8      	ldr	r0, [r7, #28]
 801ba72:	4798      	blx	r3
 801ba74:	e00a      	b.n	801ba8c <TRACE_TxCpltCallback+0x104>
 801ba76:	69bb      	ldr	r3, [r7, #24]
 801ba78:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ba7a:	68fb      	ldr	r3, [r7, #12]
 801ba7c:	f383 8810 	msr	PRIMASK, r3
}
 801ba80:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 801ba82:	f7e6 fb25 	bl	80020d0 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801ba86:	f000 f8a7 	bl	801bbd8 <TRACE_UnLock>
  }
}
 801ba8a:	bf00      	nop
 801ba8c:	bf00      	nop
 801ba8e:	3720      	adds	r7, #32
 801ba90:	46bd      	mov	sp, r7
 801ba92:	bd80      	pop	{r7, pc}
 801ba94:	20001da8 	.word	0x20001da8
 801ba98:	20001dc0 	.word	0x20001dc0
 801ba9c:	0801f174 	.word	0x0801f174

0801baa0 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801baa0:	b480      	push	{r7}
 801baa2:	b087      	sub	sp, #28
 801baa4:	af00      	add	r7, sp, #0
 801baa6:	4603      	mov	r3, r0
 801baa8:	6039      	str	r1, [r7, #0]
 801baaa:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 801baac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801bab0:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bab2:	f3ef 8310 	mrs	r3, PRIMASK
 801bab6:	60fb      	str	r3, [r7, #12]
  return(result);
 801bab8:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801baba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801babc:	b672      	cpsid	i
}
 801babe:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801bac0:	4b35      	ldr	r3, [pc, #212]	@ (801bb98 <TRACE_AllocateBufer+0xf8>)
 801bac2:	8a5a      	ldrh	r2, [r3, #18]
 801bac4:	4b34      	ldr	r3, [pc, #208]	@ (801bb98 <TRACE_AllocateBufer+0xf8>)
 801bac6:	8a1b      	ldrh	r3, [r3, #16]
 801bac8:	429a      	cmp	r2, r3
 801baca:	d11b      	bne.n	801bb04 <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801bacc:	4b32      	ldr	r3, [pc, #200]	@ (801bb98 <TRACE_AllocateBufer+0xf8>)
 801bace:	8a5b      	ldrh	r3, [r3, #18]
 801bad0:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801bad4:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801bad6:	88fa      	ldrh	r2, [r7, #6]
 801bad8:	8afb      	ldrh	r3, [r7, #22]
 801bada:	429a      	cmp	r2, r3
 801badc:	d33a      	bcc.n	801bb54 <TRACE_AllocateBufer+0xb4>
 801bade:	4b2e      	ldr	r3, [pc, #184]	@ (801bb98 <TRACE_AllocateBufer+0xf8>)
 801bae0:	8a1b      	ldrh	r3, [r3, #16]
 801bae2:	88fa      	ldrh	r2, [r7, #6]
 801bae4:	429a      	cmp	r2, r3
 801bae6:	d235      	bcs.n	801bb54 <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801bae8:	4b2b      	ldr	r3, [pc, #172]	@ (801bb98 <TRACE_AllocateBufer+0xf8>)
 801baea:	2201      	movs	r2, #1
 801baec:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801baee:	4b2a      	ldr	r3, [pc, #168]	@ (801bb98 <TRACE_AllocateBufer+0xf8>)
 801baf0:	8a5a      	ldrh	r2, [r3, #18]
 801baf2:	4b29      	ldr	r3, [pc, #164]	@ (801bb98 <TRACE_AllocateBufer+0xf8>)
 801baf4:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801baf6:	4b28      	ldr	r3, [pc, #160]	@ (801bb98 <TRACE_AllocateBufer+0xf8>)
 801baf8:	8a1b      	ldrh	r3, [r3, #16]
 801bafa:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801bafc:	4b26      	ldr	r3, [pc, #152]	@ (801bb98 <TRACE_AllocateBufer+0xf8>)
 801bafe:	2200      	movs	r2, #0
 801bb00:	825a      	strh	r2, [r3, #18]
 801bb02:	e027      	b.n	801bb54 <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801bb04:	4b24      	ldr	r3, [pc, #144]	@ (801bb98 <TRACE_AllocateBufer+0xf8>)
 801bb06:	8a5a      	ldrh	r2, [r3, #18]
 801bb08:	4b23      	ldr	r3, [pc, #140]	@ (801bb98 <TRACE_AllocateBufer+0xf8>)
 801bb0a:	8a1b      	ldrh	r3, [r3, #16]
 801bb0c:	429a      	cmp	r2, r3
 801bb0e:	d91b      	bls.n	801bb48 <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801bb10:	4b21      	ldr	r3, [pc, #132]	@ (801bb98 <TRACE_AllocateBufer+0xf8>)
 801bb12:	8a5b      	ldrh	r3, [r3, #18]
 801bb14:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801bb18:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801bb1a:	88fa      	ldrh	r2, [r7, #6]
 801bb1c:	8afb      	ldrh	r3, [r7, #22]
 801bb1e:	429a      	cmp	r2, r3
 801bb20:	d318      	bcc.n	801bb54 <TRACE_AllocateBufer+0xb4>
 801bb22:	4b1d      	ldr	r3, [pc, #116]	@ (801bb98 <TRACE_AllocateBufer+0xf8>)
 801bb24:	8a1b      	ldrh	r3, [r3, #16]
 801bb26:	88fa      	ldrh	r2, [r7, #6]
 801bb28:	429a      	cmp	r2, r3
 801bb2a:	d213      	bcs.n	801bb54 <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801bb2c:	4b1a      	ldr	r3, [pc, #104]	@ (801bb98 <TRACE_AllocateBufer+0xf8>)
 801bb2e:	2201      	movs	r2, #1
 801bb30:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801bb32:	4b19      	ldr	r3, [pc, #100]	@ (801bb98 <TRACE_AllocateBufer+0xf8>)
 801bb34:	8a5a      	ldrh	r2, [r3, #18]
 801bb36:	4b18      	ldr	r3, [pc, #96]	@ (801bb98 <TRACE_AllocateBufer+0xf8>)
 801bb38:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801bb3a:	4b17      	ldr	r3, [pc, #92]	@ (801bb98 <TRACE_AllocateBufer+0xf8>)
 801bb3c:	8a1b      	ldrh	r3, [r3, #16]
 801bb3e:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801bb40:	4b15      	ldr	r3, [pc, #84]	@ (801bb98 <TRACE_AllocateBufer+0xf8>)
 801bb42:	2200      	movs	r2, #0
 801bb44:	825a      	strh	r2, [r3, #18]
 801bb46:	e005      	b.n	801bb54 <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801bb48:	4b13      	ldr	r3, [pc, #76]	@ (801bb98 <TRACE_AllocateBufer+0xf8>)
 801bb4a:	8a1a      	ldrh	r2, [r3, #16]
 801bb4c:	4b12      	ldr	r3, [pc, #72]	@ (801bb98 <TRACE_AllocateBufer+0xf8>)
 801bb4e:	8a5b      	ldrh	r3, [r3, #18]
 801bb50:	1ad3      	subs	r3, r2, r3
 801bb52:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 801bb54:	8afa      	ldrh	r2, [r7, #22]
 801bb56:	88fb      	ldrh	r3, [r7, #6]
 801bb58:	429a      	cmp	r2, r3
 801bb5a:	d90f      	bls.n	801bb7c <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801bb5c:	4b0e      	ldr	r3, [pc, #56]	@ (801bb98 <TRACE_AllocateBufer+0xf8>)
 801bb5e:	8a5a      	ldrh	r2, [r3, #18]
 801bb60:	683b      	ldr	r3, [r7, #0]
 801bb62:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801bb64:	4b0c      	ldr	r3, [pc, #48]	@ (801bb98 <TRACE_AllocateBufer+0xf8>)
 801bb66:	8a5a      	ldrh	r2, [r3, #18]
 801bb68:	88fb      	ldrh	r3, [r7, #6]
 801bb6a:	4413      	add	r3, r2
 801bb6c:	b29b      	uxth	r3, r3
 801bb6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801bb72:	b29a      	uxth	r2, r3
 801bb74:	4b08      	ldr	r3, [pc, #32]	@ (801bb98 <TRACE_AllocateBufer+0xf8>)
 801bb76:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801bb78:	2300      	movs	r3, #0
 801bb7a:	82bb      	strh	r3, [r7, #20]
 801bb7c:	693b      	ldr	r3, [r7, #16]
 801bb7e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bb80:	68bb      	ldr	r3, [r7, #8]
 801bb82:	f383 8810 	msr	PRIMASK, r3
}
 801bb86:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 801bb88:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 801bb8c:	4618      	mov	r0, r3
 801bb8e:	371c      	adds	r7, #28
 801bb90:	46bd      	mov	sp, r7
 801bb92:	bc80      	pop	{r7}
 801bb94:	4770      	bx	lr
 801bb96:	bf00      	nop
 801bb98:	20001da8 	.word	0x20001da8

0801bb9c <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 801bb9c:	b480      	push	{r7}
 801bb9e:	b085      	sub	sp, #20
 801bba0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bba2:	f3ef 8310 	mrs	r3, PRIMASK
 801bba6:	607b      	str	r3, [r7, #4]
  return(result);
 801bba8:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801bbaa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801bbac:	b672      	cpsid	i
}
 801bbae:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 801bbb0:	4b08      	ldr	r3, [pc, #32]	@ (801bbd4 <TRACE_Lock+0x38>)
 801bbb2:	8adb      	ldrh	r3, [r3, #22]
 801bbb4:	3301      	adds	r3, #1
 801bbb6:	b29a      	uxth	r2, r3
 801bbb8:	4b06      	ldr	r3, [pc, #24]	@ (801bbd4 <TRACE_Lock+0x38>)
 801bbba:	82da      	strh	r2, [r3, #22]
 801bbbc:	68fb      	ldr	r3, [r7, #12]
 801bbbe:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bbc0:	68bb      	ldr	r3, [r7, #8]
 801bbc2:	f383 8810 	msr	PRIMASK, r3
}
 801bbc6:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801bbc8:	bf00      	nop
 801bbca:	3714      	adds	r7, #20
 801bbcc:	46bd      	mov	sp, r7
 801bbce:	bc80      	pop	{r7}
 801bbd0:	4770      	bx	lr
 801bbd2:	bf00      	nop
 801bbd4:	20001da8 	.word	0x20001da8

0801bbd8 <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 801bbd8:	b480      	push	{r7}
 801bbda:	b085      	sub	sp, #20
 801bbdc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bbde:	f3ef 8310 	mrs	r3, PRIMASK
 801bbe2:	607b      	str	r3, [r7, #4]
  return(result);
 801bbe4:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801bbe6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801bbe8:	b672      	cpsid	i
}
 801bbea:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 801bbec:	4b08      	ldr	r3, [pc, #32]	@ (801bc10 <TRACE_UnLock+0x38>)
 801bbee:	8adb      	ldrh	r3, [r3, #22]
 801bbf0:	3b01      	subs	r3, #1
 801bbf2:	b29a      	uxth	r2, r3
 801bbf4:	4b06      	ldr	r3, [pc, #24]	@ (801bc10 <TRACE_UnLock+0x38>)
 801bbf6:	82da      	strh	r2, [r3, #22]
 801bbf8:	68fb      	ldr	r3, [r7, #12]
 801bbfa:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bbfc:	68bb      	ldr	r3, [r7, #8]
 801bbfe:	f383 8810 	msr	PRIMASK, r3
}
 801bc02:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801bc04:	bf00      	nop
 801bc06:	3714      	adds	r7, #20
 801bc08:	46bd      	mov	sp, r7
 801bc0a:	bc80      	pop	{r7}
 801bc0c:	4770      	bx	lr
 801bc0e:	bf00      	nop
 801bc10:	20001da8 	.word	0x20001da8

0801bc14 <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 801bc14:	b480      	push	{r7}
 801bc16:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801bc18:	4b05      	ldr	r3, [pc, #20]	@ (801bc30 <TRACE_IsLocked+0x1c>)
 801bc1a:	8adb      	ldrh	r3, [r3, #22]
 801bc1c:	2b00      	cmp	r3, #0
 801bc1e:	bf14      	ite	ne
 801bc20:	2301      	movne	r3, #1
 801bc22:	2300      	moveq	r3, #0
 801bc24:	b2db      	uxtb	r3, r3
}
 801bc26:	4618      	mov	r0, r3
 801bc28:	46bd      	mov	sp, r7
 801bc2a:	bc80      	pop	{r7}
 801bc2c:	4770      	bx	lr
 801bc2e:	bf00      	nop
 801bc30:	20001da8 	.word	0x20001da8

0801bc34 <__cvt>:
 801bc34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bc38:	b088      	sub	sp, #32
 801bc3a:	2b00      	cmp	r3, #0
 801bc3c:	461d      	mov	r5, r3
 801bc3e:	4614      	mov	r4, r2
 801bc40:	bfbc      	itt	lt
 801bc42:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 801bc46:	4614      	movlt	r4, r2
 801bc48:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801bc4a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 801bc4c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 801bc50:	bfb6      	itet	lt
 801bc52:	461d      	movlt	r5, r3
 801bc54:	2300      	movge	r3, #0
 801bc56:	232d      	movlt	r3, #45	@ 0x2d
 801bc58:	7013      	strb	r3, [r2, #0]
 801bc5a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801bc5c:	f023 0820 	bic.w	r8, r3, #32
 801bc60:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801bc64:	d005      	beq.n	801bc72 <__cvt+0x3e>
 801bc66:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801bc6a:	d100      	bne.n	801bc6e <__cvt+0x3a>
 801bc6c:	3601      	adds	r6, #1
 801bc6e:	2302      	movs	r3, #2
 801bc70:	e000      	b.n	801bc74 <__cvt+0x40>
 801bc72:	2303      	movs	r3, #3
 801bc74:	aa07      	add	r2, sp, #28
 801bc76:	9204      	str	r2, [sp, #16]
 801bc78:	aa06      	add	r2, sp, #24
 801bc7a:	e9cd a202 	strd	sl, r2, [sp, #8]
 801bc7e:	e9cd 3600 	strd	r3, r6, [sp]
 801bc82:	4622      	mov	r2, r4
 801bc84:	462b      	mov	r3, r5
 801bc86:	f000 fe3b 	bl	801c900 <_dtoa_r>
 801bc8a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801bc8e:	4607      	mov	r7, r0
 801bc90:	d119      	bne.n	801bcc6 <__cvt+0x92>
 801bc92:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801bc94:	07db      	lsls	r3, r3, #31
 801bc96:	d50e      	bpl.n	801bcb6 <__cvt+0x82>
 801bc98:	eb00 0906 	add.w	r9, r0, r6
 801bc9c:	2200      	movs	r2, #0
 801bc9e:	2300      	movs	r3, #0
 801bca0:	4620      	mov	r0, r4
 801bca2:	4629      	mov	r1, r5
 801bca4:	f7e4 fee8 	bl	8000a78 <__aeabi_dcmpeq>
 801bca8:	b108      	cbz	r0, 801bcae <__cvt+0x7a>
 801bcaa:	f8cd 901c 	str.w	r9, [sp, #28]
 801bcae:	2230      	movs	r2, #48	@ 0x30
 801bcb0:	9b07      	ldr	r3, [sp, #28]
 801bcb2:	454b      	cmp	r3, r9
 801bcb4:	d31e      	bcc.n	801bcf4 <__cvt+0xc0>
 801bcb6:	9b07      	ldr	r3, [sp, #28]
 801bcb8:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801bcba:	1bdb      	subs	r3, r3, r7
 801bcbc:	4638      	mov	r0, r7
 801bcbe:	6013      	str	r3, [r2, #0]
 801bcc0:	b008      	add	sp, #32
 801bcc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bcc6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801bcca:	eb00 0906 	add.w	r9, r0, r6
 801bcce:	d1e5      	bne.n	801bc9c <__cvt+0x68>
 801bcd0:	7803      	ldrb	r3, [r0, #0]
 801bcd2:	2b30      	cmp	r3, #48	@ 0x30
 801bcd4:	d10a      	bne.n	801bcec <__cvt+0xb8>
 801bcd6:	2200      	movs	r2, #0
 801bcd8:	2300      	movs	r3, #0
 801bcda:	4620      	mov	r0, r4
 801bcdc:	4629      	mov	r1, r5
 801bcde:	f7e4 fecb 	bl	8000a78 <__aeabi_dcmpeq>
 801bce2:	b918      	cbnz	r0, 801bcec <__cvt+0xb8>
 801bce4:	f1c6 0601 	rsb	r6, r6, #1
 801bce8:	f8ca 6000 	str.w	r6, [sl]
 801bcec:	f8da 3000 	ldr.w	r3, [sl]
 801bcf0:	4499      	add	r9, r3
 801bcf2:	e7d3      	b.n	801bc9c <__cvt+0x68>
 801bcf4:	1c59      	adds	r1, r3, #1
 801bcf6:	9107      	str	r1, [sp, #28]
 801bcf8:	701a      	strb	r2, [r3, #0]
 801bcfa:	e7d9      	b.n	801bcb0 <__cvt+0x7c>

0801bcfc <__exponent>:
 801bcfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801bcfe:	2900      	cmp	r1, #0
 801bd00:	bfba      	itte	lt
 801bd02:	4249      	neglt	r1, r1
 801bd04:	232d      	movlt	r3, #45	@ 0x2d
 801bd06:	232b      	movge	r3, #43	@ 0x2b
 801bd08:	2909      	cmp	r1, #9
 801bd0a:	7002      	strb	r2, [r0, #0]
 801bd0c:	7043      	strb	r3, [r0, #1]
 801bd0e:	dd29      	ble.n	801bd64 <__exponent+0x68>
 801bd10:	f10d 0307 	add.w	r3, sp, #7
 801bd14:	461d      	mov	r5, r3
 801bd16:	270a      	movs	r7, #10
 801bd18:	461a      	mov	r2, r3
 801bd1a:	fbb1 f6f7 	udiv	r6, r1, r7
 801bd1e:	fb07 1416 	mls	r4, r7, r6, r1
 801bd22:	3430      	adds	r4, #48	@ 0x30
 801bd24:	f802 4c01 	strb.w	r4, [r2, #-1]
 801bd28:	460c      	mov	r4, r1
 801bd2a:	2c63      	cmp	r4, #99	@ 0x63
 801bd2c:	f103 33ff 	add.w	r3, r3, #4294967295
 801bd30:	4631      	mov	r1, r6
 801bd32:	dcf1      	bgt.n	801bd18 <__exponent+0x1c>
 801bd34:	3130      	adds	r1, #48	@ 0x30
 801bd36:	1e94      	subs	r4, r2, #2
 801bd38:	f803 1c01 	strb.w	r1, [r3, #-1]
 801bd3c:	1c41      	adds	r1, r0, #1
 801bd3e:	4623      	mov	r3, r4
 801bd40:	42ab      	cmp	r3, r5
 801bd42:	d30a      	bcc.n	801bd5a <__exponent+0x5e>
 801bd44:	f10d 0309 	add.w	r3, sp, #9
 801bd48:	1a9b      	subs	r3, r3, r2
 801bd4a:	42ac      	cmp	r4, r5
 801bd4c:	bf88      	it	hi
 801bd4e:	2300      	movhi	r3, #0
 801bd50:	3302      	adds	r3, #2
 801bd52:	4403      	add	r3, r0
 801bd54:	1a18      	subs	r0, r3, r0
 801bd56:	b003      	add	sp, #12
 801bd58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bd5a:	f813 6b01 	ldrb.w	r6, [r3], #1
 801bd5e:	f801 6f01 	strb.w	r6, [r1, #1]!
 801bd62:	e7ed      	b.n	801bd40 <__exponent+0x44>
 801bd64:	2330      	movs	r3, #48	@ 0x30
 801bd66:	3130      	adds	r1, #48	@ 0x30
 801bd68:	7083      	strb	r3, [r0, #2]
 801bd6a:	70c1      	strb	r1, [r0, #3]
 801bd6c:	1d03      	adds	r3, r0, #4
 801bd6e:	e7f1      	b.n	801bd54 <__exponent+0x58>

0801bd70 <_printf_float>:
 801bd70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bd74:	b091      	sub	sp, #68	@ 0x44
 801bd76:	460c      	mov	r4, r1
 801bd78:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 801bd7c:	4616      	mov	r6, r2
 801bd7e:	461f      	mov	r7, r3
 801bd80:	4605      	mov	r5, r0
 801bd82:	f000 fcbb 	bl	801c6fc <_localeconv_r>
 801bd86:	6803      	ldr	r3, [r0, #0]
 801bd88:	9308      	str	r3, [sp, #32]
 801bd8a:	4618      	mov	r0, r3
 801bd8c:	f7e4 fa48 	bl	8000220 <strlen>
 801bd90:	2300      	movs	r3, #0
 801bd92:	930e      	str	r3, [sp, #56]	@ 0x38
 801bd94:	f8d8 3000 	ldr.w	r3, [r8]
 801bd98:	9009      	str	r0, [sp, #36]	@ 0x24
 801bd9a:	3307      	adds	r3, #7
 801bd9c:	f023 0307 	bic.w	r3, r3, #7
 801bda0:	f103 0208 	add.w	r2, r3, #8
 801bda4:	f894 a018 	ldrb.w	sl, [r4, #24]
 801bda8:	f8d4 b000 	ldr.w	fp, [r4]
 801bdac:	f8c8 2000 	str.w	r2, [r8]
 801bdb0:	e9d3 8900 	ldrd	r8, r9, [r3]
 801bdb4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801bdb8:	930b      	str	r3, [sp, #44]	@ 0x2c
 801bdba:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 801bdbe:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801bdc2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801bdc6:	4b9d      	ldr	r3, [pc, #628]	@ (801c03c <_printf_float+0x2cc>)
 801bdc8:	f04f 32ff 	mov.w	r2, #4294967295
 801bdcc:	f7e4 fe86 	bl	8000adc <__aeabi_dcmpun>
 801bdd0:	bb70      	cbnz	r0, 801be30 <_printf_float+0xc0>
 801bdd2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801bdd6:	4b99      	ldr	r3, [pc, #612]	@ (801c03c <_printf_float+0x2cc>)
 801bdd8:	f04f 32ff 	mov.w	r2, #4294967295
 801bddc:	f7e4 fe60 	bl	8000aa0 <__aeabi_dcmple>
 801bde0:	bb30      	cbnz	r0, 801be30 <_printf_float+0xc0>
 801bde2:	2200      	movs	r2, #0
 801bde4:	2300      	movs	r3, #0
 801bde6:	4640      	mov	r0, r8
 801bde8:	4649      	mov	r1, r9
 801bdea:	f7e4 fe4f 	bl	8000a8c <__aeabi_dcmplt>
 801bdee:	b110      	cbz	r0, 801bdf6 <_printf_float+0x86>
 801bdf0:	232d      	movs	r3, #45	@ 0x2d
 801bdf2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801bdf6:	4a92      	ldr	r2, [pc, #584]	@ (801c040 <_printf_float+0x2d0>)
 801bdf8:	4b92      	ldr	r3, [pc, #584]	@ (801c044 <_printf_float+0x2d4>)
 801bdfa:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801bdfe:	bf8c      	ite	hi
 801be00:	4690      	movhi	r8, r2
 801be02:	4698      	movls	r8, r3
 801be04:	2303      	movs	r3, #3
 801be06:	6123      	str	r3, [r4, #16]
 801be08:	f02b 0304 	bic.w	r3, fp, #4
 801be0c:	6023      	str	r3, [r4, #0]
 801be0e:	f04f 0900 	mov.w	r9, #0
 801be12:	9700      	str	r7, [sp, #0]
 801be14:	4633      	mov	r3, r6
 801be16:	aa0f      	add	r2, sp, #60	@ 0x3c
 801be18:	4621      	mov	r1, r4
 801be1a:	4628      	mov	r0, r5
 801be1c:	f000 f9d4 	bl	801c1c8 <_printf_common>
 801be20:	3001      	adds	r0, #1
 801be22:	f040 808f 	bne.w	801bf44 <_printf_float+0x1d4>
 801be26:	f04f 30ff 	mov.w	r0, #4294967295
 801be2a:	b011      	add	sp, #68	@ 0x44
 801be2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801be30:	4642      	mov	r2, r8
 801be32:	464b      	mov	r3, r9
 801be34:	4640      	mov	r0, r8
 801be36:	4649      	mov	r1, r9
 801be38:	f7e4 fe50 	bl	8000adc <__aeabi_dcmpun>
 801be3c:	b140      	cbz	r0, 801be50 <_printf_float+0xe0>
 801be3e:	464b      	mov	r3, r9
 801be40:	2b00      	cmp	r3, #0
 801be42:	bfbc      	itt	lt
 801be44:	232d      	movlt	r3, #45	@ 0x2d
 801be46:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801be4a:	4a7f      	ldr	r2, [pc, #508]	@ (801c048 <_printf_float+0x2d8>)
 801be4c:	4b7f      	ldr	r3, [pc, #508]	@ (801c04c <_printf_float+0x2dc>)
 801be4e:	e7d4      	b.n	801bdfa <_printf_float+0x8a>
 801be50:	6863      	ldr	r3, [r4, #4]
 801be52:	1c5a      	adds	r2, r3, #1
 801be54:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 801be58:	d13f      	bne.n	801beda <_printf_float+0x16a>
 801be5a:	2306      	movs	r3, #6
 801be5c:	6063      	str	r3, [r4, #4]
 801be5e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 801be62:	2200      	movs	r2, #0
 801be64:	6023      	str	r3, [r4, #0]
 801be66:	9206      	str	r2, [sp, #24]
 801be68:	aa0e      	add	r2, sp, #56	@ 0x38
 801be6a:	e9cd a204 	strd	sl, r2, [sp, #16]
 801be6e:	aa0d      	add	r2, sp, #52	@ 0x34
 801be70:	9203      	str	r2, [sp, #12]
 801be72:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 801be76:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801be7a:	6863      	ldr	r3, [r4, #4]
 801be7c:	9300      	str	r3, [sp, #0]
 801be7e:	4642      	mov	r2, r8
 801be80:	464b      	mov	r3, r9
 801be82:	4628      	mov	r0, r5
 801be84:	910a      	str	r1, [sp, #40]	@ 0x28
 801be86:	f7ff fed5 	bl	801bc34 <__cvt>
 801be8a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801be8c:	2947      	cmp	r1, #71	@ 0x47
 801be8e:	4680      	mov	r8, r0
 801be90:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801be92:	d128      	bne.n	801bee6 <_printf_float+0x176>
 801be94:	1cc8      	adds	r0, r1, #3
 801be96:	db02      	blt.n	801be9e <_printf_float+0x12e>
 801be98:	6863      	ldr	r3, [r4, #4]
 801be9a:	4299      	cmp	r1, r3
 801be9c:	dd40      	ble.n	801bf20 <_printf_float+0x1b0>
 801be9e:	f1aa 0a02 	sub.w	sl, sl, #2
 801bea2:	fa5f fa8a 	uxtb.w	sl, sl
 801bea6:	3901      	subs	r1, #1
 801bea8:	4652      	mov	r2, sl
 801beaa:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801beae:	910d      	str	r1, [sp, #52]	@ 0x34
 801beb0:	f7ff ff24 	bl	801bcfc <__exponent>
 801beb4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801beb6:	1813      	adds	r3, r2, r0
 801beb8:	2a01      	cmp	r2, #1
 801beba:	4681      	mov	r9, r0
 801bebc:	6123      	str	r3, [r4, #16]
 801bebe:	dc02      	bgt.n	801bec6 <_printf_float+0x156>
 801bec0:	6822      	ldr	r2, [r4, #0]
 801bec2:	07d2      	lsls	r2, r2, #31
 801bec4:	d501      	bpl.n	801beca <_printf_float+0x15a>
 801bec6:	3301      	adds	r3, #1
 801bec8:	6123      	str	r3, [r4, #16]
 801beca:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 801bece:	2b00      	cmp	r3, #0
 801bed0:	d09f      	beq.n	801be12 <_printf_float+0xa2>
 801bed2:	232d      	movs	r3, #45	@ 0x2d
 801bed4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801bed8:	e79b      	b.n	801be12 <_printf_float+0xa2>
 801beda:	2947      	cmp	r1, #71	@ 0x47
 801bedc:	d1bf      	bne.n	801be5e <_printf_float+0xee>
 801bede:	2b00      	cmp	r3, #0
 801bee0:	d1bd      	bne.n	801be5e <_printf_float+0xee>
 801bee2:	2301      	movs	r3, #1
 801bee4:	e7ba      	b.n	801be5c <_printf_float+0xec>
 801bee6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801beea:	d9dc      	bls.n	801bea6 <_printf_float+0x136>
 801beec:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801bef0:	d118      	bne.n	801bf24 <_printf_float+0x1b4>
 801bef2:	2900      	cmp	r1, #0
 801bef4:	6863      	ldr	r3, [r4, #4]
 801bef6:	dd0b      	ble.n	801bf10 <_printf_float+0x1a0>
 801bef8:	6121      	str	r1, [r4, #16]
 801befa:	b913      	cbnz	r3, 801bf02 <_printf_float+0x192>
 801befc:	6822      	ldr	r2, [r4, #0]
 801befe:	07d0      	lsls	r0, r2, #31
 801bf00:	d502      	bpl.n	801bf08 <_printf_float+0x198>
 801bf02:	3301      	adds	r3, #1
 801bf04:	440b      	add	r3, r1
 801bf06:	6123      	str	r3, [r4, #16]
 801bf08:	65a1      	str	r1, [r4, #88]	@ 0x58
 801bf0a:	f04f 0900 	mov.w	r9, #0
 801bf0e:	e7dc      	b.n	801beca <_printf_float+0x15a>
 801bf10:	b913      	cbnz	r3, 801bf18 <_printf_float+0x1a8>
 801bf12:	6822      	ldr	r2, [r4, #0]
 801bf14:	07d2      	lsls	r2, r2, #31
 801bf16:	d501      	bpl.n	801bf1c <_printf_float+0x1ac>
 801bf18:	3302      	adds	r3, #2
 801bf1a:	e7f4      	b.n	801bf06 <_printf_float+0x196>
 801bf1c:	2301      	movs	r3, #1
 801bf1e:	e7f2      	b.n	801bf06 <_printf_float+0x196>
 801bf20:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801bf24:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801bf26:	4299      	cmp	r1, r3
 801bf28:	db05      	blt.n	801bf36 <_printf_float+0x1c6>
 801bf2a:	6823      	ldr	r3, [r4, #0]
 801bf2c:	6121      	str	r1, [r4, #16]
 801bf2e:	07d8      	lsls	r0, r3, #31
 801bf30:	d5ea      	bpl.n	801bf08 <_printf_float+0x198>
 801bf32:	1c4b      	adds	r3, r1, #1
 801bf34:	e7e7      	b.n	801bf06 <_printf_float+0x196>
 801bf36:	2900      	cmp	r1, #0
 801bf38:	bfd4      	ite	le
 801bf3a:	f1c1 0202 	rsble	r2, r1, #2
 801bf3e:	2201      	movgt	r2, #1
 801bf40:	4413      	add	r3, r2
 801bf42:	e7e0      	b.n	801bf06 <_printf_float+0x196>
 801bf44:	6823      	ldr	r3, [r4, #0]
 801bf46:	055a      	lsls	r2, r3, #21
 801bf48:	d407      	bmi.n	801bf5a <_printf_float+0x1ea>
 801bf4a:	6923      	ldr	r3, [r4, #16]
 801bf4c:	4642      	mov	r2, r8
 801bf4e:	4631      	mov	r1, r6
 801bf50:	4628      	mov	r0, r5
 801bf52:	47b8      	blx	r7
 801bf54:	3001      	adds	r0, #1
 801bf56:	d12b      	bne.n	801bfb0 <_printf_float+0x240>
 801bf58:	e765      	b.n	801be26 <_printf_float+0xb6>
 801bf5a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801bf5e:	f240 80dd 	bls.w	801c11c <_printf_float+0x3ac>
 801bf62:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801bf66:	2200      	movs	r2, #0
 801bf68:	2300      	movs	r3, #0
 801bf6a:	f7e4 fd85 	bl	8000a78 <__aeabi_dcmpeq>
 801bf6e:	2800      	cmp	r0, #0
 801bf70:	d033      	beq.n	801bfda <_printf_float+0x26a>
 801bf72:	4a37      	ldr	r2, [pc, #220]	@ (801c050 <_printf_float+0x2e0>)
 801bf74:	2301      	movs	r3, #1
 801bf76:	4631      	mov	r1, r6
 801bf78:	4628      	mov	r0, r5
 801bf7a:	47b8      	blx	r7
 801bf7c:	3001      	adds	r0, #1
 801bf7e:	f43f af52 	beq.w	801be26 <_printf_float+0xb6>
 801bf82:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 801bf86:	4543      	cmp	r3, r8
 801bf88:	db02      	blt.n	801bf90 <_printf_float+0x220>
 801bf8a:	6823      	ldr	r3, [r4, #0]
 801bf8c:	07d8      	lsls	r0, r3, #31
 801bf8e:	d50f      	bpl.n	801bfb0 <_printf_float+0x240>
 801bf90:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801bf94:	4631      	mov	r1, r6
 801bf96:	4628      	mov	r0, r5
 801bf98:	47b8      	blx	r7
 801bf9a:	3001      	adds	r0, #1
 801bf9c:	f43f af43 	beq.w	801be26 <_printf_float+0xb6>
 801bfa0:	f04f 0900 	mov.w	r9, #0
 801bfa4:	f108 38ff 	add.w	r8, r8, #4294967295
 801bfa8:	f104 0a1a 	add.w	sl, r4, #26
 801bfac:	45c8      	cmp	r8, r9
 801bfae:	dc09      	bgt.n	801bfc4 <_printf_float+0x254>
 801bfb0:	6823      	ldr	r3, [r4, #0]
 801bfb2:	079b      	lsls	r3, r3, #30
 801bfb4:	f100 8103 	bmi.w	801c1be <_printf_float+0x44e>
 801bfb8:	68e0      	ldr	r0, [r4, #12]
 801bfba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801bfbc:	4298      	cmp	r0, r3
 801bfbe:	bfb8      	it	lt
 801bfc0:	4618      	movlt	r0, r3
 801bfc2:	e732      	b.n	801be2a <_printf_float+0xba>
 801bfc4:	2301      	movs	r3, #1
 801bfc6:	4652      	mov	r2, sl
 801bfc8:	4631      	mov	r1, r6
 801bfca:	4628      	mov	r0, r5
 801bfcc:	47b8      	blx	r7
 801bfce:	3001      	adds	r0, #1
 801bfd0:	f43f af29 	beq.w	801be26 <_printf_float+0xb6>
 801bfd4:	f109 0901 	add.w	r9, r9, #1
 801bfd8:	e7e8      	b.n	801bfac <_printf_float+0x23c>
 801bfda:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801bfdc:	2b00      	cmp	r3, #0
 801bfde:	dc39      	bgt.n	801c054 <_printf_float+0x2e4>
 801bfe0:	4a1b      	ldr	r2, [pc, #108]	@ (801c050 <_printf_float+0x2e0>)
 801bfe2:	2301      	movs	r3, #1
 801bfe4:	4631      	mov	r1, r6
 801bfe6:	4628      	mov	r0, r5
 801bfe8:	47b8      	blx	r7
 801bfea:	3001      	adds	r0, #1
 801bfec:	f43f af1b 	beq.w	801be26 <_printf_float+0xb6>
 801bff0:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 801bff4:	ea59 0303 	orrs.w	r3, r9, r3
 801bff8:	d102      	bne.n	801c000 <_printf_float+0x290>
 801bffa:	6823      	ldr	r3, [r4, #0]
 801bffc:	07d9      	lsls	r1, r3, #31
 801bffe:	d5d7      	bpl.n	801bfb0 <_printf_float+0x240>
 801c000:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801c004:	4631      	mov	r1, r6
 801c006:	4628      	mov	r0, r5
 801c008:	47b8      	blx	r7
 801c00a:	3001      	adds	r0, #1
 801c00c:	f43f af0b 	beq.w	801be26 <_printf_float+0xb6>
 801c010:	f04f 0a00 	mov.w	sl, #0
 801c014:	f104 0b1a 	add.w	fp, r4, #26
 801c018:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c01a:	425b      	negs	r3, r3
 801c01c:	4553      	cmp	r3, sl
 801c01e:	dc01      	bgt.n	801c024 <_printf_float+0x2b4>
 801c020:	464b      	mov	r3, r9
 801c022:	e793      	b.n	801bf4c <_printf_float+0x1dc>
 801c024:	2301      	movs	r3, #1
 801c026:	465a      	mov	r2, fp
 801c028:	4631      	mov	r1, r6
 801c02a:	4628      	mov	r0, r5
 801c02c:	47b8      	blx	r7
 801c02e:	3001      	adds	r0, #1
 801c030:	f43f aef9 	beq.w	801be26 <_printf_float+0xb6>
 801c034:	f10a 0a01 	add.w	sl, sl, #1
 801c038:	e7ee      	b.n	801c018 <_printf_float+0x2a8>
 801c03a:	bf00      	nop
 801c03c:	7fefffff 	.word	0x7fefffff
 801c040:	0801f6c8 	.word	0x0801f6c8
 801c044:	0801f6c4 	.word	0x0801f6c4
 801c048:	0801f6d0 	.word	0x0801f6d0
 801c04c:	0801f6cc 	.word	0x0801f6cc
 801c050:	0801f6d4 	.word	0x0801f6d4
 801c054:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801c056:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 801c05a:	4553      	cmp	r3, sl
 801c05c:	bfa8      	it	ge
 801c05e:	4653      	movge	r3, sl
 801c060:	2b00      	cmp	r3, #0
 801c062:	4699      	mov	r9, r3
 801c064:	dc36      	bgt.n	801c0d4 <_printf_float+0x364>
 801c066:	f04f 0b00 	mov.w	fp, #0
 801c06a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801c06e:	f104 021a 	add.w	r2, r4, #26
 801c072:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801c074:	930a      	str	r3, [sp, #40]	@ 0x28
 801c076:	eba3 0309 	sub.w	r3, r3, r9
 801c07a:	455b      	cmp	r3, fp
 801c07c:	dc31      	bgt.n	801c0e2 <_printf_float+0x372>
 801c07e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c080:	459a      	cmp	sl, r3
 801c082:	dc3a      	bgt.n	801c0fa <_printf_float+0x38a>
 801c084:	6823      	ldr	r3, [r4, #0]
 801c086:	07da      	lsls	r2, r3, #31
 801c088:	d437      	bmi.n	801c0fa <_printf_float+0x38a>
 801c08a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c08c:	ebaa 0903 	sub.w	r9, sl, r3
 801c090:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c092:	ebaa 0303 	sub.w	r3, sl, r3
 801c096:	4599      	cmp	r9, r3
 801c098:	bfa8      	it	ge
 801c09a:	4699      	movge	r9, r3
 801c09c:	f1b9 0f00 	cmp.w	r9, #0
 801c0a0:	dc33      	bgt.n	801c10a <_printf_float+0x39a>
 801c0a2:	f04f 0800 	mov.w	r8, #0
 801c0a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801c0aa:	f104 0b1a 	add.w	fp, r4, #26
 801c0ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c0b0:	ebaa 0303 	sub.w	r3, sl, r3
 801c0b4:	eba3 0309 	sub.w	r3, r3, r9
 801c0b8:	4543      	cmp	r3, r8
 801c0ba:	f77f af79 	ble.w	801bfb0 <_printf_float+0x240>
 801c0be:	2301      	movs	r3, #1
 801c0c0:	465a      	mov	r2, fp
 801c0c2:	4631      	mov	r1, r6
 801c0c4:	4628      	mov	r0, r5
 801c0c6:	47b8      	blx	r7
 801c0c8:	3001      	adds	r0, #1
 801c0ca:	f43f aeac 	beq.w	801be26 <_printf_float+0xb6>
 801c0ce:	f108 0801 	add.w	r8, r8, #1
 801c0d2:	e7ec      	b.n	801c0ae <_printf_float+0x33e>
 801c0d4:	4642      	mov	r2, r8
 801c0d6:	4631      	mov	r1, r6
 801c0d8:	4628      	mov	r0, r5
 801c0da:	47b8      	blx	r7
 801c0dc:	3001      	adds	r0, #1
 801c0de:	d1c2      	bne.n	801c066 <_printf_float+0x2f6>
 801c0e0:	e6a1      	b.n	801be26 <_printf_float+0xb6>
 801c0e2:	2301      	movs	r3, #1
 801c0e4:	4631      	mov	r1, r6
 801c0e6:	4628      	mov	r0, r5
 801c0e8:	920a      	str	r2, [sp, #40]	@ 0x28
 801c0ea:	47b8      	blx	r7
 801c0ec:	3001      	adds	r0, #1
 801c0ee:	f43f ae9a 	beq.w	801be26 <_printf_float+0xb6>
 801c0f2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801c0f4:	f10b 0b01 	add.w	fp, fp, #1
 801c0f8:	e7bb      	b.n	801c072 <_printf_float+0x302>
 801c0fa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801c0fe:	4631      	mov	r1, r6
 801c100:	4628      	mov	r0, r5
 801c102:	47b8      	blx	r7
 801c104:	3001      	adds	r0, #1
 801c106:	d1c0      	bne.n	801c08a <_printf_float+0x31a>
 801c108:	e68d      	b.n	801be26 <_printf_float+0xb6>
 801c10a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801c10c:	464b      	mov	r3, r9
 801c10e:	4442      	add	r2, r8
 801c110:	4631      	mov	r1, r6
 801c112:	4628      	mov	r0, r5
 801c114:	47b8      	blx	r7
 801c116:	3001      	adds	r0, #1
 801c118:	d1c3      	bne.n	801c0a2 <_printf_float+0x332>
 801c11a:	e684      	b.n	801be26 <_printf_float+0xb6>
 801c11c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 801c120:	f1ba 0f01 	cmp.w	sl, #1
 801c124:	dc01      	bgt.n	801c12a <_printf_float+0x3ba>
 801c126:	07db      	lsls	r3, r3, #31
 801c128:	d536      	bpl.n	801c198 <_printf_float+0x428>
 801c12a:	2301      	movs	r3, #1
 801c12c:	4642      	mov	r2, r8
 801c12e:	4631      	mov	r1, r6
 801c130:	4628      	mov	r0, r5
 801c132:	47b8      	blx	r7
 801c134:	3001      	adds	r0, #1
 801c136:	f43f ae76 	beq.w	801be26 <_printf_float+0xb6>
 801c13a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801c13e:	4631      	mov	r1, r6
 801c140:	4628      	mov	r0, r5
 801c142:	47b8      	blx	r7
 801c144:	3001      	adds	r0, #1
 801c146:	f43f ae6e 	beq.w	801be26 <_printf_float+0xb6>
 801c14a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801c14e:	2200      	movs	r2, #0
 801c150:	2300      	movs	r3, #0
 801c152:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c156:	f7e4 fc8f 	bl	8000a78 <__aeabi_dcmpeq>
 801c15a:	b9c0      	cbnz	r0, 801c18e <_printf_float+0x41e>
 801c15c:	4653      	mov	r3, sl
 801c15e:	f108 0201 	add.w	r2, r8, #1
 801c162:	4631      	mov	r1, r6
 801c164:	4628      	mov	r0, r5
 801c166:	47b8      	blx	r7
 801c168:	3001      	adds	r0, #1
 801c16a:	d10c      	bne.n	801c186 <_printf_float+0x416>
 801c16c:	e65b      	b.n	801be26 <_printf_float+0xb6>
 801c16e:	2301      	movs	r3, #1
 801c170:	465a      	mov	r2, fp
 801c172:	4631      	mov	r1, r6
 801c174:	4628      	mov	r0, r5
 801c176:	47b8      	blx	r7
 801c178:	3001      	adds	r0, #1
 801c17a:	f43f ae54 	beq.w	801be26 <_printf_float+0xb6>
 801c17e:	f108 0801 	add.w	r8, r8, #1
 801c182:	45d0      	cmp	r8, sl
 801c184:	dbf3      	blt.n	801c16e <_printf_float+0x3fe>
 801c186:	464b      	mov	r3, r9
 801c188:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801c18c:	e6df      	b.n	801bf4e <_printf_float+0x1de>
 801c18e:	f04f 0800 	mov.w	r8, #0
 801c192:	f104 0b1a 	add.w	fp, r4, #26
 801c196:	e7f4      	b.n	801c182 <_printf_float+0x412>
 801c198:	2301      	movs	r3, #1
 801c19a:	4642      	mov	r2, r8
 801c19c:	e7e1      	b.n	801c162 <_printf_float+0x3f2>
 801c19e:	2301      	movs	r3, #1
 801c1a0:	464a      	mov	r2, r9
 801c1a2:	4631      	mov	r1, r6
 801c1a4:	4628      	mov	r0, r5
 801c1a6:	47b8      	blx	r7
 801c1a8:	3001      	adds	r0, #1
 801c1aa:	f43f ae3c 	beq.w	801be26 <_printf_float+0xb6>
 801c1ae:	f108 0801 	add.w	r8, r8, #1
 801c1b2:	68e3      	ldr	r3, [r4, #12]
 801c1b4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801c1b6:	1a5b      	subs	r3, r3, r1
 801c1b8:	4543      	cmp	r3, r8
 801c1ba:	dcf0      	bgt.n	801c19e <_printf_float+0x42e>
 801c1bc:	e6fc      	b.n	801bfb8 <_printf_float+0x248>
 801c1be:	f04f 0800 	mov.w	r8, #0
 801c1c2:	f104 0919 	add.w	r9, r4, #25
 801c1c6:	e7f4      	b.n	801c1b2 <_printf_float+0x442>

0801c1c8 <_printf_common>:
 801c1c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c1cc:	4616      	mov	r6, r2
 801c1ce:	4698      	mov	r8, r3
 801c1d0:	688a      	ldr	r2, [r1, #8]
 801c1d2:	690b      	ldr	r3, [r1, #16]
 801c1d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801c1d8:	4293      	cmp	r3, r2
 801c1da:	bfb8      	it	lt
 801c1dc:	4613      	movlt	r3, r2
 801c1de:	6033      	str	r3, [r6, #0]
 801c1e0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801c1e4:	4607      	mov	r7, r0
 801c1e6:	460c      	mov	r4, r1
 801c1e8:	b10a      	cbz	r2, 801c1ee <_printf_common+0x26>
 801c1ea:	3301      	adds	r3, #1
 801c1ec:	6033      	str	r3, [r6, #0]
 801c1ee:	6823      	ldr	r3, [r4, #0]
 801c1f0:	0699      	lsls	r1, r3, #26
 801c1f2:	bf42      	ittt	mi
 801c1f4:	6833      	ldrmi	r3, [r6, #0]
 801c1f6:	3302      	addmi	r3, #2
 801c1f8:	6033      	strmi	r3, [r6, #0]
 801c1fa:	6825      	ldr	r5, [r4, #0]
 801c1fc:	f015 0506 	ands.w	r5, r5, #6
 801c200:	d106      	bne.n	801c210 <_printf_common+0x48>
 801c202:	f104 0a19 	add.w	sl, r4, #25
 801c206:	68e3      	ldr	r3, [r4, #12]
 801c208:	6832      	ldr	r2, [r6, #0]
 801c20a:	1a9b      	subs	r3, r3, r2
 801c20c:	42ab      	cmp	r3, r5
 801c20e:	dc26      	bgt.n	801c25e <_printf_common+0x96>
 801c210:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801c214:	6822      	ldr	r2, [r4, #0]
 801c216:	3b00      	subs	r3, #0
 801c218:	bf18      	it	ne
 801c21a:	2301      	movne	r3, #1
 801c21c:	0692      	lsls	r2, r2, #26
 801c21e:	d42b      	bmi.n	801c278 <_printf_common+0xb0>
 801c220:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801c224:	4641      	mov	r1, r8
 801c226:	4638      	mov	r0, r7
 801c228:	47c8      	blx	r9
 801c22a:	3001      	adds	r0, #1
 801c22c:	d01e      	beq.n	801c26c <_printf_common+0xa4>
 801c22e:	6823      	ldr	r3, [r4, #0]
 801c230:	6922      	ldr	r2, [r4, #16]
 801c232:	f003 0306 	and.w	r3, r3, #6
 801c236:	2b04      	cmp	r3, #4
 801c238:	bf02      	ittt	eq
 801c23a:	68e5      	ldreq	r5, [r4, #12]
 801c23c:	6833      	ldreq	r3, [r6, #0]
 801c23e:	1aed      	subeq	r5, r5, r3
 801c240:	68a3      	ldr	r3, [r4, #8]
 801c242:	bf0c      	ite	eq
 801c244:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801c248:	2500      	movne	r5, #0
 801c24a:	4293      	cmp	r3, r2
 801c24c:	bfc4      	itt	gt
 801c24e:	1a9b      	subgt	r3, r3, r2
 801c250:	18ed      	addgt	r5, r5, r3
 801c252:	2600      	movs	r6, #0
 801c254:	341a      	adds	r4, #26
 801c256:	42b5      	cmp	r5, r6
 801c258:	d11a      	bne.n	801c290 <_printf_common+0xc8>
 801c25a:	2000      	movs	r0, #0
 801c25c:	e008      	b.n	801c270 <_printf_common+0xa8>
 801c25e:	2301      	movs	r3, #1
 801c260:	4652      	mov	r2, sl
 801c262:	4641      	mov	r1, r8
 801c264:	4638      	mov	r0, r7
 801c266:	47c8      	blx	r9
 801c268:	3001      	adds	r0, #1
 801c26a:	d103      	bne.n	801c274 <_printf_common+0xac>
 801c26c:	f04f 30ff 	mov.w	r0, #4294967295
 801c270:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c274:	3501      	adds	r5, #1
 801c276:	e7c6      	b.n	801c206 <_printf_common+0x3e>
 801c278:	18e1      	adds	r1, r4, r3
 801c27a:	1c5a      	adds	r2, r3, #1
 801c27c:	2030      	movs	r0, #48	@ 0x30
 801c27e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801c282:	4422      	add	r2, r4
 801c284:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801c288:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801c28c:	3302      	adds	r3, #2
 801c28e:	e7c7      	b.n	801c220 <_printf_common+0x58>
 801c290:	2301      	movs	r3, #1
 801c292:	4622      	mov	r2, r4
 801c294:	4641      	mov	r1, r8
 801c296:	4638      	mov	r0, r7
 801c298:	47c8      	blx	r9
 801c29a:	3001      	adds	r0, #1
 801c29c:	d0e6      	beq.n	801c26c <_printf_common+0xa4>
 801c29e:	3601      	adds	r6, #1
 801c2a0:	e7d9      	b.n	801c256 <_printf_common+0x8e>
	...

0801c2a4 <_printf_i>:
 801c2a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c2a8:	7e0f      	ldrb	r7, [r1, #24]
 801c2aa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801c2ac:	2f78      	cmp	r7, #120	@ 0x78
 801c2ae:	4691      	mov	r9, r2
 801c2b0:	4680      	mov	r8, r0
 801c2b2:	460c      	mov	r4, r1
 801c2b4:	469a      	mov	sl, r3
 801c2b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801c2ba:	d807      	bhi.n	801c2cc <_printf_i+0x28>
 801c2bc:	2f62      	cmp	r7, #98	@ 0x62
 801c2be:	d80a      	bhi.n	801c2d6 <_printf_i+0x32>
 801c2c0:	2f00      	cmp	r7, #0
 801c2c2:	f000 80d1 	beq.w	801c468 <_printf_i+0x1c4>
 801c2c6:	2f58      	cmp	r7, #88	@ 0x58
 801c2c8:	f000 80b8 	beq.w	801c43c <_printf_i+0x198>
 801c2cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801c2d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801c2d4:	e03a      	b.n	801c34c <_printf_i+0xa8>
 801c2d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801c2da:	2b15      	cmp	r3, #21
 801c2dc:	d8f6      	bhi.n	801c2cc <_printf_i+0x28>
 801c2de:	a101      	add	r1, pc, #4	@ (adr r1, 801c2e4 <_printf_i+0x40>)
 801c2e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801c2e4:	0801c33d 	.word	0x0801c33d
 801c2e8:	0801c351 	.word	0x0801c351
 801c2ec:	0801c2cd 	.word	0x0801c2cd
 801c2f0:	0801c2cd 	.word	0x0801c2cd
 801c2f4:	0801c2cd 	.word	0x0801c2cd
 801c2f8:	0801c2cd 	.word	0x0801c2cd
 801c2fc:	0801c351 	.word	0x0801c351
 801c300:	0801c2cd 	.word	0x0801c2cd
 801c304:	0801c2cd 	.word	0x0801c2cd
 801c308:	0801c2cd 	.word	0x0801c2cd
 801c30c:	0801c2cd 	.word	0x0801c2cd
 801c310:	0801c44f 	.word	0x0801c44f
 801c314:	0801c37b 	.word	0x0801c37b
 801c318:	0801c409 	.word	0x0801c409
 801c31c:	0801c2cd 	.word	0x0801c2cd
 801c320:	0801c2cd 	.word	0x0801c2cd
 801c324:	0801c471 	.word	0x0801c471
 801c328:	0801c2cd 	.word	0x0801c2cd
 801c32c:	0801c37b 	.word	0x0801c37b
 801c330:	0801c2cd 	.word	0x0801c2cd
 801c334:	0801c2cd 	.word	0x0801c2cd
 801c338:	0801c411 	.word	0x0801c411
 801c33c:	6833      	ldr	r3, [r6, #0]
 801c33e:	1d1a      	adds	r2, r3, #4
 801c340:	681b      	ldr	r3, [r3, #0]
 801c342:	6032      	str	r2, [r6, #0]
 801c344:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801c348:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801c34c:	2301      	movs	r3, #1
 801c34e:	e09c      	b.n	801c48a <_printf_i+0x1e6>
 801c350:	6833      	ldr	r3, [r6, #0]
 801c352:	6820      	ldr	r0, [r4, #0]
 801c354:	1d19      	adds	r1, r3, #4
 801c356:	6031      	str	r1, [r6, #0]
 801c358:	0606      	lsls	r6, r0, #24
 801c35a:	d501      	bpl.n	801c360 <_printf_i+0xbc>
 801c35c:	681d      	ldr	r5, [r3, #0]
 801c35e:	e003      	b.n	801c368 <_printf_i+0xc4>
 801c360:	0645      	lsls	r5, r0, #25
 801c362:	d5fb      	bpl.n	801c35c <_printf_i+0xb8>
 801c364:	f9b3 5000 	ldrsh.w	r5, [r3]
 801c368:	2d00      	cmp	r5, #0
 801c36a:	da03      	bge.n	801c374 <_printf_i+0xd0>
 801c36c:	232d      	movs	r3, #45	@ 0x2d
 801c36e:	426d      	negs	r5, r5
 801c370:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801c374:	4858      	ldr	r0, [pc, #352]	@ (801c4d8 <_printf_i+0x234>)
 801c376:	230a      	movs	r3, #10
 801c378:	e011      	b.n	801c39e <_printf_i+0xfa>
 801c37a:	6821      	ldr	r1, [r4, #0]
 801c37c:	6833      	ldr	r3, [r6, #0]
 801c37e:	0608      	lsls	r0, r1, #24
 801c380:	f853 5b04 	ldr.w	r5, [r3], #4
 801c384:	d402      	bmi.n	801c38c <_printf_i+0xe8>
 801c386:	0649      	lsls	r1, r1, #25
 801c388:	bf48      	it	mi
 801c38a:	b2ad      	uxthmi	r5, r5
 801c38c:	2f6f      	cmp	r7, #111	@ 0x6f
 801c38e:	4852      	ldr	r0, [pc, #328]	@ (801c4d8 <_printf_i+0x234>)
 801c390:	6033      	str	r3, [r6, #0]
 801c392:	bf14      	ite	ne
 801c394:	230a      	movne	r3, #10
 801c396:	2308      	moveq	r3, #8
 801c398:	2100      	movs	r1, #0
 801c39a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801c39e:	6866      	ldr	r6, [r4, #4]
 801c3a0:	60a6      	str	r6, [r4, #8]
 801c3a2:	2e00      	cmp	r6, #0
 801c3a4:	db05      	blt.n	801c3b2 <_printf_i+0x10e>
 801c3a6:	6821      	ldr	r1, [r4, #0]
 801c3a8:	432e      	orrs	r6, r5
 801c3aa:	f021 0104 	bic.w	r1, r1, #4
 801c3ae:	6021      	str	r1, [r4, #0]
 801c3b0:	d04b      	beq.n	801c44a <_printf_i+0x1a6>
 801c3b2:	4616      	mov	r6, r2
 801c3b4:	fbb5 f1f3 	udiv	r1, r5, r3
 801c3b8:	fb03 5711 	mls	r7, r3, r1, r5
 801c3bc:	5dc7      	ldrb	r7, [r0, r7]
 801c3be:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801c3c2:	462f      	mov	r7, r5
 801c3c4:	42bb      	cmp	r3, r7
 801c3c6:	460d      	mov	r5, r1
 801c3c8:	d9f4      	bls.n	801c3b4 <_printf_i+0x110>
 801c3ca:	2b08      	cmp	r3, #8
 801c3cc:	d10b      	bne.n	801c3e6 <_printf_i+0x142>
 801c3ce:	6823      	ldr	r3, [r4, #0]
 801c3d0:	07df      	lsls	r7, r3, #31
 801c3d2:	d508      	bpl.n	801c3e6 <_printf_i+0x142>
 801c3d4:	6923      	ldr	r3, [r4, #16]
 801c3d6:	6861      	ldr	r1, [r4, #4]
 801c3d8:	4299      	cmp	r1, r3
 801c3da:	bfde      	ittt	le
 801c3dc:	2330      	movle	r3, #48	@ 0x30
 801c3de:	f806 3c01 	strble.w	r3, [r6, #-1]
 801c3e2:	f106 36ff 	addle.w	r6, r6, #4294967295
 801c3e6:	1b92      	subs	r2, r2, r6
 801c3e8:	6122      	str	r2, [r4, #16]
 801c3ea:	f8cd a000 	str.w	sl, [sp]
 801c3ee:	464b      	mov	r3, r9
 801c3f0:	aa03      	add	r2, sp, #12
 801c3f2:	4621      	mov	r1, r4
 801c3f4:	4640      	mov	r0, r8
 801c3f6:	f7ff fee7 	bl	801c1c8 <_printf_common>
 801c3fa:	3001      	adds	r0, #1
 801c3fc:	d14a      	bne.n	801c494 <_printf_i+0x1f0>
 801c3fe:	f04f 30ff 	mov.w	r0, #4294967295
 801c402:	b004      	add	sp, #16
 801c404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c408:	6823      	ldr	r3, [r4, #0]
 801c40a:	f043 0320 	orr.w	r3, r3, #32
 801c40e:	6023      	str	r3, [r4, #0]
 801c410:	4832      	ldr	r0, [pc, #200]	@ (801c4dc <_printf_i+0x238>)
 801c412:	2778      	movs	r7, #120	@ 0x78
 801c414:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801c418:	6823      	ldr	r3, [r4, #0]
 801c41a:	6831      	ldr	r1, [r6, #0]
 801c41c:	061f      	lsls	r7, r3, #24
 801c41e:	f851 5b04 	ldr.w	r5, [r1], #4
 801c422:	d402      	bmi.n	801c42a <_printf_i+0x186>
 801c424:	065f      	lsls	r7, r3, #25
 801c426:	bf48      	it	mi
 801c428:	b2ad      	uxthmi	r5, r5
 801c42a:	6031      	str	r1, [r6, #0]
 801c42c:	07d9      	lsls	r1, r3, #31
 801c42e:	bf44      	itt	mi
 801c430:	f043 0320 	orrmi.w	r3, r3, #32
 801c434:	6023      	strmi	r3, [r4, #0]
 801c436:	b11d      	cbz	r5, 801c440 <_printf_i+0x19c>
 801c438:	2310      	movs	r3, #16
 801c43a:	e7ad      	b.n	801c398 <_printf_i+0xf4>
 801c43c:	4826      	ldr	r0, [pc, #152]	@ (801c4d8 <_printf_i+0x234>)
 801c43e:	e7e9      	b.n	801c414 <_printf_i+0x170>
 801c440:	6823      	ldr	r3, [r4, #0]
 801c442:	f023 0320 	bic.w	r3, r3, #32
 801c446:	6023      	str	r3, [r4, #0]
 801c448:	e7f6      	b.n	801c438 <_printf_i+0x194>
 801c44a:	4616      	mov	r6, r2
 801c44c:	e7bd      	b.n	801c3ca <_printf_i+0x126>
 801c44e:	6833      	ldr	r3, [r6, #0]
 801c450:	6825      	ldr	r5, [r4, #0]
 801c452:	6961      	ldr	r1, [r4, #20]
 801c454:	1d18      	adds	r0, r3, #4
 801c456:	6030      	str	r0, [r6, #0]
 801c458:	062e      	lsls	r6, r5, #24
 801c45a:	681b      	ldr	r3, [r3, #0]
 801c45c:	d501      	bpl.n	801c462 <_printf_i+0x1be>
 801c45e:	6019      	str	r1, [r3, #0]
 801c460:	e002      	b.n	801c468 <_printf_i+0x1c4>
 801c462:	0668      	lsls	r0, r5, #25
 801c464:	d5fb      	bpl.n	801c45e <_printf_i+0x1ba>
 801c466:	8019      	strh	r1, [r3, #0]
 801c468:	2300      	movs	r3, #0
 801c46a:	6123      	str	r3, [r4, #16]
 801c46c:	4616      	mov	r6, r2
 801c46e:	e7bc      	b.n	801c3ea <_printf_i+0x146>
 801c470:	6833      	ldr	r3, [r6, #0]
 801c472:	1d1a      	adds	r2, r3, #4
 801c474:	6032      	str	r2, [r6, #0]
 801c476:	681e      	ldr	r6, [r3, #0]
 801c478:	6862      	ldr	r2, [r4, #4]
 801c47a:	2100      	movs	r1, #0
 801c47c:	4630      	mov	r0, r6
 801c47e:	f7e3 fe7f 	bl	8000180 <memchr>
 801c482:	b108      	cbz	r0, 801c488 <_printf_i+0x1e4>
 801c484:	1b80      	subs	r0, r0, r6
 801c486:	6060      	str	r0, [r4, #4]
 801c488:	6863      	ldr	r3, [r4, #4]
 801c48a:	6123      	str	r3, [r4, #16]
 801c48c:	2300      	movs	r3, #0
 801c48e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801c492:	e7aa      	b.n	801c3ea <_printf_i+0x146>
 801c494:	6923      	ldr	r3, [r4, #16]
 801c496:	4632      	mov	r2, r6
 801c498:	4649      	mov	r1, r9
 801c49a:	4640      	mov	r0, r8
 801c49c:	47d0      	blx	sl
 801c49e:	3001      	adds	r0, #1
 801c4a0:	d0ad      	beq.n	801c3fe <_printf_i+0x15a>
 801c4a2:	6823      	ldr	r3, [r4, #0]
 801c4a4:	079b      	lsls	r3, r3, #30
 801c4a6:	d413      	bmi.n	801c4d0 <_printf_i+0x22c>
 801c4a8:	68e0      	ldr	r0, [r4, #12]
 801c4aa:	9b03      	ldr	r3, [sp, #12]
 801c4ac:	4298      	cmp	r0, r3
 801c4ae:	bfb8      	it	lt
 801c4b0:	4618      	movlt	r0, r3
 801c4b2:	e7a6      	b.n	801c402 <_printf_i+0x15e>
 801c4b4:	2301      	movs	r3, #1
 801c4b6:	4632      	mov	r2, r6
 801c4b8:	4649      	mov	r1, r9
 801c4ba:	4640      	mov	r0, r8
 801c4bc:	47d0      	blx	sl
 801c4be:	3001      	adds	r0, #1
 801c4c0:	d09d      	beq.n	801c3fe <_printf_i+0x15a>
 801c4c2:	3501      	adds	r5, #1
 801c4c4:	68e3      	ldr	r3, [r4, #12]
 801c4c6:	9903      	ldr	r1, [sp, #12]
 801c4c8:	1a5b      	subs	r3, r3, r1
 801c4ca:	42ab      	cmp	r3, r5
 801c4cc:	dcf2      	bgt.n	801c4b4 <_printf_i+0x210>
 801c4ce:	e7eb      	b.n	801c4a8 <_printf_i+0x204>
 801c4d0:	2500      	movs	r5, #0
 801c4d2:	f104 0619 	add.w	r6, r4, #25
 801c4d6:	e7f5      	b.n	801c4c4 <_printf_i+0x220>
 801c4d8:	0801f6d6 	.word	0x0801f6d6
 801c4dc:	0801f6e7 	.word	0x0801f6e7

0801c4e0 <std>:
 801c4e0:	2300      	movs	r3, #0
 801c4e2:	b510      	push	{r4, lr}
 801c4e4:	4604      	mov	r4, r0
 801c4e6:	e9c0 3300 	strd	r3, r3, [r0]
 801c4ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801c4ee:	6083      	str	r3, [r0, #8]
 801c4f0:	8181      	strh	r1, [r0, #12]
 801c4f2:	6643      	str	r3, [r0, #100]	@ 0x64
 801c4f4:	81c2      	strh	r2, [r0, #14]
 801c4f6:	6183      	str	r3, [r0, #24]
 801c4f8:	4619      	mov	r1, r3
 801c4fa:	2208      	movs	r2, #8
 801c4fc:	305c      	adds	r0, #92	@ 0x5c
 801c4fe:	f000 f8f4 	bl	801c6ea <memset>
 801c502:	4b0d      	ldr	r3, [pc, #52]	@ (801c538 <std+0x58>)
 801c504:	6263      	str	r3, [r4, #36]	@ 0x24
 801c506:	4b0d      	ldr	r3, [pc, #52]	@ (801c53c <std+0x5c>)
 801c508:	62a3      	str	r3, [r4, #40]	@ 0x28
 801c50a:	4b0d      	ldr	r3, [pc, #52]	@ (801c540 <std+0x60>)
 801c50c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801c50e:	4b0d      	ldr	r3, [pc, #52]	@ (801c544 <std+0x64>)
 801c510:	6323      	str	r3, [r4, #48]	@ 0x30
 801c512:	4b0d      	ldr	r3, [pc, #52]	@ (801c548 <std+0x68>)
 801c514:	6224      	str	r4, [r4, #32]
 801c516:	429c      	cmp	r4, r3
 801c518:	d006      	beq.n	801c528 <std+0x48>
 801c51a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801c51e:	4294      	cmp	r4, r2
 801c520:	d002      	beq.n	801c528 <std+0x48>
 801c522:	33d0      	adds	r3, #208	@ 0xd0
 801c524:	429c      	cmp	r4, r3
 801c526:	d105      	bne.n	801c534 <std+0x54>
 801c528:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801c52c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c530:	f000 b958 	b.w	801c7e4 <__retarget_lock_init_recursive>
 801c534:	bd10      	pop	{r4, pc}
 801c536:	bf00      	nop
 801c538:	0801c665 	.word	0x0801c665
 801c53c:	0801c687 	.word	0x0801c687
 801c540:	0801c6bf 	.word	0x0801c6bf
 801c544:	0801c6e3 	.word	0x0801c6e3
 801c548:	200023c0 	.word	0x200023c0

0801c54c <stdio_exit_handler>:
 801c54c:	4a02      	ldr	r2, [pc, #8]	@ (801c558 <stdio_exit_handler+0xc>)
 801c54e:	4903      	ldr	r1, [pc, #12]	@ (801c55c <stdio_exit_handler+0x10>)
 801c550:	4803      	ldr	r0, [pc, #12]	@ (801c560 <stdio_exit_handler+0x14>)
 801c552:	f000 b869 	b.w	801c628 <_fwalk_sglue>
 801c556:	bf00      	nop
 801c558:	20000140 	.word	0x20000140
 801c55c:	0801de91 	.word	0x0801de91
 801c560:	20000150 	.word	0x20000150

0801c564 <cleanup_stdio>:
 801c564:	6841      	ldr	r1, [r0, #4]
 801c566:	4b0c      	ldr	r3, [pc, #48]	@ (801c598 <cleanup_stdio+0x34>)
 801c568:	4299      	cmp	r1, r3
 801c56a:	b510      	push	{r4, lr}
 801c56c:	4604      	mov	r4, r0
 801c56e:	d001      	beq.n	801c574 <cleanup_stdio+0x10>
 801c570:	f001 fc8e 	bl	801de90 <_fflush_r>
 801c574:	68a1      	ldr	r1, [r4, #8]
 801c576:	4b09      	ldr	r3, [pc, #36]	@ (801c59c <cleanup_stdio+0x38>)
 801c578:	4299      	cmp	r1, r3
 801c57a:	d002      	beq.n	801c582 <cleanup_stdio+0x1e>
 801c57c:	4620      	mov	r0, r4
 801c57e:	f001 fc87 	bl	801de90 <_fflush_r>
 801c582:	68e1      	ldr	r1, [r4, #12]
 801c584:	4b06      	ldr	r3, [pc, #24]	@ (801c5a0 <cleanup_stdio+0x3c>)
 801c586:	4299      	cmp	r1, r3
 801c588:	d004      	beq.n	801c594 <cleanup_stdio+0x30>
 801c58a:	4620      	mov	r0, r4
 801c58c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c590:	f001 bc7e 	b.w	801de90 <_fflush_r>
 801c594:	bd10      	pop	{r4, pc}
 801c596:	bf00      	nop
 801c598:	200023c0 	.word	0x200023c0
 801c59c:	20002428 	.word	0x20002428
 801c5a0:	20002490 	.word	0x20002490

0801c5a4 <global_stdio_init.part.0>:
 801c5a4:	b510      	push	{r4, lr}
 801c5a6:	4b0b      	ldr	r3, [pc, #44]	@ (801c5d4 <global_stdio_init.part.0+0x30>)
 801c5a8:	4c0b      	ldr	r4, [pc, #44]	@ (801c5d8 <global_stdio_init.part.0+0x34>)
 801c5aa:	4a0c      	ldr	r2, [pc, #48]	@ (801c5dc <global_stdio_init.part.0+0x38>)
 801c5ac:	601a      	str	r2, [r3, #0]
 801c5ae:	4620      	mov	r0, r4
 801c5b0:	2200      	movs	r2, #0
 801c5b2:	2104      	movs	r1, #4
 801c5b4:	f7ff ff94 	bl	801c4e0 <std>
 801c5b8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801c5bc:	2201      	movs	r2, #1
 801c5be:	2109      	movs	r1, #9
 801c5c0:	f7ff ff8e 	bl	801c4e0 <std>
 801c5c4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801c5c8:	2202      	movs	r2, #2
 801c5ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c5ce:	2112      	movs	r1, #18
 801c5d0:	f7ff bf86 	b.w	801c4e0 <std>
 801c5d4:	200024f8 	.word	0x200024f8
 801c5d8:	200023c0 	.word	0x200023c0
 801c5dc:	0801c54d 	.word	0x0801c54d

0801c5e0 <__sfp_lock_acquire>:
 801c5e0:	4801      	ldr	r0, [pc, #4]	@ (801c5e8 <__sfp_lock_acquire+0x8>)
 801c5e2:	f000 b900 	b.w	801c7e6 <__retarget_lock_acquire_recursive>
 801c5e6:	bf00      	nop
 801c5e8:	20002501 	.word	0x20002501

0801c5ec <__sfp_lock_release>:
 801c5ec:	4801      	ldr	r0, [pc, #4]	@ (801c5f4 <__sfp_lock_release+0x8>)
 801c5ee:	f000 b8fb 	b.w	801c7e8 <__retarget_lock_release_recursive>
 801c5f2:	bf00      	nop
 801c5f4:	20002501 	.word	0x20002501

0801c5f8 <__sinit>:
 801c5f8:	b510      	push	{r4, lr}
 801c5fa:	4604      	mov	r4, r0
 801c5fc:	f7ff fff0 	bl	801c5e0 <__sfp_lock_acquire>
 801c600:	6a23      	ldr	r3, [r4, #32]
 801c602:	b11b      	cbz	r3, 801c60c <__sinit+0x14>
 801c604:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c608:	f7ff bff0 	b.w	801c5ec <__sfp_lock_release>
 801c60c:	4b04      	ldr	r3, [pc, #16]	@ (801c620 <__sinit+0x28>)
 801c60e:	6223      	str	r3, [r4, #32]
 801c610:	4b04      	ldr	r3, [pc, #16]	@ (801c624 <__sinit+0x2c>)
 801c612:	681b      	ldr	r3, [r3, #0]
 801c614:	2b00      	cmp	r3, #0
 801c616:	d1f5      	bne.n	801c604 <__sinit+0xc>
 801c618:	f7ff ffc4 	bl	801c5a4 <global_stdio_init.part.0>
 801c61c:	e7f2      	b.n	801c604 <__sinit+0xc>
 801c61e:	bf00      	nop
 801c620:	0801c565 	.word	0x0801c565
 801c624:	200024f8 	.word	0x200024f8

0801c628 <_fwalk_sglue>:
 801c628:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c62c:	4607      	mov	r7, r0
 801c62e:	4688      	mov	r8, r1
 801c630:	4614      	mov	r4, r2
 801c632:	2600      	movs	r6, #0
 801c634:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801c638:	f1b9 0901 	subs.w	r9, r9, #1
 801c63c:	d505      	bpl.n	801c64a <_fwalk_sglue+0x22>
 801c63e:	6824      	ldr	r4, [r4, #0]
 801c640:	2c00      	cmp	r4, #0
 801c642:	d1f7      	bne.n	801c634 <_fwalk_sglue+0xc>
 801c644:	4630      	mov	r0, r6
 801c646:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c64a:	89ab      	ldrh	r3, [r5, #12]
 801c64c:	2b01      	cmp	r3, #1
 801c64e:	d907      	bls.n	801c660 <_fwalk_sglue+0x38>
 801c650:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801c654:	3301      	adds	r3, #1
 801c656:	d003      	beq.n	801c660 <_fwalk_sglue+0x38>
 801c658:	4629      	mov	r1, r5
 801c65a:	4638      	mov	r0, r7
 801c65c:	47c0      	blx	r8
 801c65e:	4306      	orrs	r6, r0
 801c660:	3568      	adds	r5, #104	@ 0x68
 801c662:	e7e9      	b.n	801c638 <_fwalk_sglue+0x10>

0801c664 <__sread>:
 801c664:	b510      	push	{r4, lr}
 801c666:	460c      	mov	r4, r1
 801c668:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c66c:	f000 f86c 	bl	801c748 <_read_r>
 801c670:	2800      	cmp	r0, #0
 801c672:	bfab      	itete	ge
 801c674:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801c676:	89a3      	ldrhlt	r3, [r4, #12]
 801c678:	181b      	addge	r3, r3, r0
 801c67a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801c67e:	bfac      	ite	ge
 801c680:	6563      	strge	r3, [r4, #84]	@ 0x54
 801c682:	81a3      	strhlt	r3, [r4, #12]
 801c684:	bd10      	pop	{r4, pc}

0801c686 <__swrite>:
 801c686:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c68a:	461f      	mov	r7, r3
 801c68c:	898b      	ldrh	r3, [r1, #12]
 801c68e:	05db      	lsls	r3, r3, #23
 801c690:	4605      	mov	r5, r0
 801c692:	460c      	mov	r4, r1
 801c694:	4616      	mov	r6, r2
 801c696:	d505      	bpl.n	801c6a4 <__swrite+0x1e>
 801c698:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c69c:	2302      	movs	r3, #2
 801c69e:	2200      	movs	r2, #0
 801c6a0:	f000 f840 	bl	801c724 <_lseek_r>
 801c6a4:	89a3      	ldrh	r3, [r4, #12]
 801c6a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c6aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801c6ae:	81a3      	strh	r3, [r4, #12]
 801c6b0:	4632      	mov	r2, r6
 801c6b2:	463b      	mov	r3, r7
 801c6b4:	4628      	mov	r0, r5
 801c6b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c6ba:	f000 b857 	b.w	801c76c <_write_r>

0801c6be <__sseek>:
 801c6be:	b510      	push	{r4, lr}
 801c6c0:	460c      	mov	r4, r1
 801c6c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c6c6:	f000 f82d 	bl	801c724 <_lseek_r>
 801c6ca:	1c43      	adds	r3, r0, #1
 801c6cc:	89a3      	ldrh	r3, [r4, #12]
 801c6ce:	bf15      	itete	ne
 801c6d0:	6560      	strne	r0, [r4, #84]	@ 0x54
 801c6d2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801c6d6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801c6da:	81a3      	strheq	r3, [r4, #12]
 801c6dc:	bf18      	it	ne
 801c6de:	81a3      	strhne	r3, [r4, #12]
 801c6e0:	bd10      	pop	{r4, pc}

0801c6e2 <__sclose>:
 801c6e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c6e6:	f000 b80d 	b.w	801c704 <_close_r>

0801c6ea <memset>:
 801c6ea:	4402      	add	r2, r0
 801c6ec:	4603      	mov	r3, r0
 801c6ee:	4293      	cmp	r3, r2
 801c6f0:	d100      	bne.n	801c6f4 <memset+0xa>
 801c6f2:	4770      	bx	lr
 801c6f4:	f803 1b01 	strb.w	r1, [r3], #1
 801c6f8:	e7f9      	b.n	801c6ee <memset+0x4>
	...

0801c6fc <_localeconv_r>:
 801c6fc:	4800      	ldr	r0, [pc, #0]	@ (801c700 <_localeconv_r+0x4>)
 801c6fe:	4770      	bx	lr
 801c700:	2000028c 	.word	0x2000028c

0801c704 <_close_r>:
 801c704:	b538      	push	{r3, r4, r5, lr}
 801c706:	4d06      	ldr	r5, [pc, #24]	@ (801c720 <_close_r+0x1c>)
 801c708:	2300      	movs	r3, #0
 801c70a:	4604      	mov	r4, r0
 801c70c:	4608      	mov	r0, r1
 801c70e:	602b      	str	r3, [r5, #0]
 801c710:	f7e5 fe2a 	bl	8002368 <_close>
 801c714:	1c43      	adds	r3, r0, #1
 801c716:	d102      	bne.n	801c71e <_close_r+0x1a>
 801c718:	682b      	ldr	r3, [r5, #0]
 801c71a:	b103      	cbz	r3, 801c71e <_close_r+0x1a>
 801c71c:	6023      	str	r3, [r4, #0]
 801c71e:	bd38      	pop	{r3, r4, r5, pc}
 801c720:	200024fc 	.word	0x200024fc

0801c724 <_lseek_r>:
 801c724:	b538      	push	{r3, r4, r5, lr}
 801c726:	4d07      	ldr	r5, [pc, #28]	@ (801c744 <_lseek_r+0x20>)
 801c728:	4604      	mov	r4, r0
 801c72a:	4608      	mov	r0, r1
 801c72c:	4611      	mov	r1, r2
 801c72e:	2200      	movs	r2, #0
 801c730:	602a      	str	r2, [r5, #0]
 801c732:	461a      	mov	r2, r3
 801c734:	f7e5 fe3c 	bl	80023b0 <_lseek>
 801c738:	1c43      	adds	r3, r0, #1
 801c73a:	d102      	bne.n	801c742 <_lseek_r+0x1e>
 801c73c:	682b      	ldr	r3, [r5, #0]
 801c73e:	b103      	cbz	r3, 801c742 <_lseek_r+0x1e>
 801c740:	6023      	str	r3, [r4, #0]
 801c742:	bd38      	pop	{r3, r4, r5, pc}
 801c744:	200024fc 	.word	0x200024fc

0801c748 <_read_r>:
 801c748:	b538      	push	{r3, r4, r5, lr}
 801c74a:	4d07      	ldr	r5, [pc, #28]	@ (801c768 <_read_r+0x20>)
 801c74c:	4604      	mov	r4, r0
 801c74e:	4608      	mov	r0, r1
 801c750:	4611      	mov	r1, r2
 801c752:	2200      	movs	r2, #0
 801c754:	602a      	str	r2, [r5, #0]
 801c756:	461a      	mov	r2, r3
 801c758:	f7e5 fdcd 	bl	80022f6 <_read>
 801c75c:	1c43      	adds	r3, r0, #1
 801c75e:	d102      	bne.n	801c766 <_read_r+0x1e>
 801c760:	682b      	ldr	r3, [r5, #0]
 801c762:	b103      	cbz	r3, 801c766 <_read_r+0x1e>
 801c764:	6023      	str	r3, [r4, #0]
 801c766:	bd38      	pop	{r3, r4, r5, pc}
 801c768:	200024fc 	.word	0x200024fc

0801c76c <_write_r>:
 801c76c:	b538      	push	{r3, r4, r5, lr}
 801c76e:	4d07      	ldr	r5, [pc, #28]	@ (801c78c <_write_r+0x20>)
 801c770:	4604      	mov	r4, r0
 801c772:	4608      	mov	r0, r1
 801c774:	4611      	mov	r1, r2
 801c776:	2200      	movs	r2, #0
 801c778:	602a      	str	r2, [r5, #0]
 801c77a:	461a      	mov	r2, r3
 801c77c:	f7e5 fdd8 	bl	8002330 <_write>
 801c780:	1c43      	adds	r3, r0, #1
 801c782:	d102      	bne.n	801c78a <_write_r+0x1e>
 801c784:	682b      	ldr	r3, [r5, #0]
 801c786:	b103      	cbz	r3, 801c78a <_write_r+0x1e>
 801c788:	6023      	str	r3, [r4, #0]
 801c78a:	bd38      	pop	{r3, r4, r5, pc}
 801c78c:	200024fc 	.word	0x200024fc

0801c790 <__errno>:
 801c790:	4b01      	ldr	r3, [pc, #4]	@ (801c798 <__errno+0x8>)
 801c792:	6818      	ldr	r0, [r3, #0]
 801c794:	4770      	bx	lr
 801c796:	bf00      	nop
 801c798:	2000014c 	.word	0x2000014c

0801c79c <__libc_init_array>:
 801c79c:	b570      	push	{r4, r5, r6, lr}
 801c79e:	4d0d      	ldr	r5, [pc, #52]	@ (801c7d4 <__libc_init_array+0x38>)
 801c7a0:	4c0d      	ldr	r4, [pc, #52]	@ (801c7d8 <__libc_init_array+0x3c>)
 801c7a2:	1b64      	subs	r4, r4, r5
 801c7a4:	10a4      	asrs	r4, r4, #2
 801c7a6:	2600      	movs	r6, #0
 801c7a8:	42a6      	cmp	r6, r4
 801c7aa:	d109      	bne.n	801c7c0 <__libc_init_array+0x24>
 801c7ac:	4d0b      	ldr	r5, [pc, #44]	@ (801c7dc <__libc_init_array+0x40>)
 801c7ae:	4c0c      	ldr	r4, [pc, #48]	@ (801c7e0 <__libc_init_array+0x44>)
 801c7b0:	f001 ff3a 	bl	801e628 <_init>
 801c7b4:	1b64      	subs	r4, r4, r5
 801c7b6:	10a4      	asrs	r4, r4, #2
 801c7b8:	2600      	movs	r6, #0
 801c7ba:	42a6      	cmp	r6, r4
 801c7bc:	d105      	bne.n	801c7ca <__libc_init_array+0x2e>
 801c7be:	bd70      	pop	{r4, r5, r6, pc}
 801c7c0:	f855 3b04 	ldr.w	r3, [r5], #4
 801c7c4:	4798      	blx	r3
 801c7c6:	3601      	adds	r6, #1
 801c7c8:	e7ee      	b.n	801c7a8 <__libc_init_array+0xc>
 801c7ca:	f855 3b04 	ldr.w	r3, [r5], #4
 801c7ce:	4798      	blx	r3
 801c7d0:	3601      	adds	r6, #1
 801c7d2:	e7f2      	b.n	801c7ba <__libc_init_array+0x1e>
 801c7d4:	0801fb04 	.word	0x0801fb04
 801c7d8:	0801fb04 	.word	0x0801fb04
 801c7dc:	0801fb04 	.word	0x0801fb04
 801c7e0:	0801fb08 	.word	0x0801fb08

0801c7e4 <__retarget_lock_init_recursive>:
 801c7e4:	4770      	bx	lr

0801c7e6 <__retarget_lock_acquire_recursive>:
 801c7e6:	4770      	bx	lr

0801c7e8 <__retarget_lock_release_recursive>:
 801c7e8:	4770      	bx	lr

0801c7ea <quorem>:
 801c7ea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c7ee:	6903      	ldr	r3, [r0, #16]
 801c7f0:	690c      	ldr	r4, [r1, #16]
 801c7f2:	42a3      	cmp	r3, r4
 801c7f4:	4607      	mov	r7, r0
 801c7f6:	db7e      	blt.n	801c8f6 <quorem+0x10c>
 801c7f8:	3c01      	subs	r4, #1
 801c7fa:	f101 0814 	add.w	r8, r1, #20
 801c7fe:	00a3      	lsls	r3, r4, #2
 801c800:	f100 0514 	add.w	r5, r0, #20
 801c804:	9300      	str	r3, [sp, #0]
 801c806:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801c80a:	9301      	str	r3, [sp, #4]
 801c80c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801c810:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801c814:	3301      	adds	r3, #1
 801c816:	429a      	cmp	r2, r3
 801c818:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801c81c:	fbb2 f6f3 	udiv	r6, r2, r3
 801c820:	d32e      	bcc.n	801c880 <quorem+0x96>
 801c822:	f04f 0a00 	mov.w	sl, #0
 801c826:	46c4      	mov	ip, r8
 801c828:	46ae      	mov	lr, r5
 801c82a:	46d3      	mov	fp, sl
 801c82c:	f85c 3b04 	ldr.w	r3, [ip], #4
 801c830:	b298      	uxth	r0, r3
 801c832:	fb06 a000 	mla	r0, r6, r0, sl
 801c836:	0c02      	lsrs	r2, r0, #16
 801c838:	0c1b      	lsrs	r3, r3, #16
 801c83a:	fb06 2303 	mla	r3, r6, r3, r2
 801c83e:	f8de 2000 	ldr.w	r2, [lr]
 801c842:	b280      	uxth	r0, r0
 801c844:	b292      	uxth	r2, r2
 801c846:	1a12      	subs	r2, r2, r0
 801c848:	445a      	add	r2, fp
 801c84a:	f8de 0000 	ldr.w	r0, [lr]
 801c84e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801c852:	b29b      	uxth	r3, r3
 801c854:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801c858:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801c85c:	b292      	uxth	r2, r2
 801c85e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801c862:	45e1      	cmp	r9, ip
 801c864:	f84e 2b04 	str.w	r2, [lr], #4
 801c868:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801c86c:	d2de      	bcs.n	801c82c <quorem+0x42>
 801c86e:	9b00      	ldr	r3, [sp, #0]
 801c870:	58eb      	ldr	r3, [r5, r3]
 801c872:	b92b      	cbnz	r3, 801c880 <quorem+0x96>
 801c874:	9b01      	ldr	r3, [sp, #4]
 801c876:	3b04      	subs	r3, #4
 801c878:	429d      	cmp	r5, r3
 801c87a:	461a      	mov	r2, r3
 801c87c:	d32f      	bcc.n	801c8de <quorem+0xf4>
 801c87e:	613c      	str	r4, [r7, #16]
 801c880:	4638      	mov	r0, r7
 801c882:	f001 f97f 	bl	801db84 <__mcmp>
 801c886:	2800      	cmp	r0, #0
 801c888:	db25      	blt.n	801c8d6 <quorem+0xec>
 801c88a:	4629      	mov	r1, r5
 801c88c:	2000      	movs	r0, #0
 801c88e:	f858 2b04 	ldr.w	r2, [r8], #4
 801c892:	f8d1 c000 	ldr.w	ip, [r1]
 801c896:	fa1f fe82 	uxth.w	lr, r2
 801c89a:	fa1f f38c 	uxth.w	r3, ip
 801c89e:	eba3 030e 	sub.w	r3, r3, lr
 801c8a2:	4403      	add	r3, r0
 801c8a4:	0c12      	lsrs	r2, r2, #16
 801c8a6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801c8aa:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801c8ae:	b29b      	uxth	r3, r3
 801c8b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c8b4:	45c1      	cmp	r9, r8
 801c8b6:	f841 3b04 	str.w	r3, [r1], #4
 801c8ba:	ea4f 4022 	mov.w	r0, r2, asr #16
 801c8be:	d2e6      	bcs.n	801c88e <quorem+0xa4>
 801c8c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801c8c4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801c8c8:	b922      	cbnz	r2, 801c8d4 <quorem+0xea>
 801c8ca:	3b04      	subs	r3, #4
 801c8cc:	429d      	cmp	r5, r3
 801c8ce:	461a      	mov	r2, r3
 801c8d0:	d30b      	bcc.n	801c8ea <quorem+0x100>
 801c8d2:	613c      	str	r4, [r7, #16]
 801c8d4:	3601      	adds	r6, #1
 801c8d6:	4630      	mov	r0, r6
 801c8d8:	b003      	add	sp, #12
 801c8da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c8de:	6812      	ldr	r2, [r2, #0]
 801c8e0:	3b04      	subs	r3, #4
 801c8e2:	2a00      	cmp	r2, #0
 801c8e4:	d1cb      	bne.n	801c87e <quorem+0x94>
 801c8e6:	3c01      	subs	r4, #1
 801c8e8:	e7c6      	b.n	801c878 <quorem+0x8e>
 801c8ea:	6812      	ldr	r2, [r2, #0]
 801c8ec:	3b04      	subs	r3, #4
 801c8ee:	2a00      	cmp	r2, #0
 801c8f0:	d1ef      	bne.n	801c8d2 <quorem+0xe8>
 801c8f2:	3c01      	subs	r4, #1
 801c8f4:	e7ea      	b.n	801c8cc <quorem+0xe2>
 801c8f6:	2000      	movs	r0, #0
 801c8f8:	e7ee      	b.n	801c8d8 <quorem+0xee>
 801c8fa:	0000      	movs	r0, r0
 801c8fc:	0000      	movs	r0, r0
	...

0801c900 <_dtoa_r>:
 801c900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c904:	69c7      	ldr	r7, [r0, #28]
 801c906:	b097      	sub	sp, #92	@ 0x5c
 801c908:	4614      	mov	r4, r2
 801c90a:	461d      	mov	r5, r3
 801c90c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801c910:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 801c912:	4681      	mov	r9, r0
 801c914:	b97f      	cbnz	r7, 801c936 <_dtoa_r+0x36>
 801c916:	2010      	movs	r0, #16
 801c918:	f000 fe0c 	bl	801d534 <malloc>
 801c91c:	4602      	mov	r2, r0
 801c91e:	f8c9 001c 	str.w	r0, [r9, #28]
 801c922:	b920      	cbnz	r0, 801c92e <_dtoa_r+0x2e>
 801c924:	4baa      	ldr	r3, [pc, #680]	@ (801cbd0 <_dtoa_r+0x2d0>)
 801c926:	21ef      	movs	r1, #239	@ 0xef
 801c928:	48aa      	ldr	r0, [pc, #680]	@ (801cbd4 <_dtoa_r+0x2d4>)
 801c92a:	f001 faf7 	bl	801df1c <__assert_func>
 801c92e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801c932:	6007      	str	r7, [r0, #0]
 801c934:	60c7      	str	r7, [r0, #12]
 801c936:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801c93a:	6819      	ldr	r1, [r3, #0]
 801c93c:	b159      	cbz	r1, 801c956 <_dtoa_r+0x56>
 801c93e:	685a      	ldr	r2, [r3, #4]
 801c940:	604a      	str	r2, [r1, #4]
 801c942:	2301      	movs	r3, #1
 801c944:	4093      	lsls	r3, r2
 801c946:	608b      	str	r3, [r1, #8]
 801c948:	4648      	mov	r0, r9
 801c94a:	f000 fee9 	bl	801d720 <_Bfree>
 801c94e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801c952:	2200      	movs	r2, #0
 801c954:	601a      	str	r2, [r3, #0]
 801c956:	1e2b      	subs	r3, r5, #0
 801c958:	bfb9      	ittee	lt
 801c95a:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801c95e:	9307      	strlt	r3, [sp, #28]
 801c960:	2300      	movge	r3, #0
 801c962:	6033      	strge	r3, [r6, #0]
 801c964:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801c968:	4b9b      	ldr	r3, [pc, #620]	@ (801cbd8 <_dtoa_r+0x2d8>)
 801c96a:	bfbc      	itt	lt
 801c96c:	2201      	movlt	r2, #1
 801c96e:	6032      	strlt	r2, [r6, #0]
 801c970:	ea33 0308 	bics.w	r3, r3, r8
 801c974:	d112      	bne.n	801c99c <_dtoa_r+0x9c>
 801c976:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801c978:	f242 730f 	movw	r3, #9999	@ 0x270f
 801c97c:	6013      	str	r3, [r2, #0]
 801c97e:	f3c8 0313 	ubfx	r3, r8, #0, #20
 801c982:	4323      	orrs	r3, r4
 801c984:	f000 855b 	beq.w	801d43e <_dtoa_r+0xb3e>
 801c988:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801c98a:	f8df a250 	ldr.w	sl, [pc, #592]	@ 801cbdc <_dtoa_r+0x2dc>
 801c98e:	2b00      	cmp	r3, #0
 801c990:	f000 855d 	beq.w	801d44e <_dtoa_r+0xb4e>
 801c994:	f10a 0303 	add.w	r3, sl, #3
 801c998:	f000 bd57 	b.w	801d44a <_dtoa_r+0xb4a>
 801c99c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801c9a0:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 801c9a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801c9a8:	2200      	movs	r2, #0
 801c9aa:	2300      	movs	r3, #0
 801c9ac:	f7e4 f864 	bl	8000a78 <__aeabi_dcmpeq>
 801c9b0:	4607      	mov	r7, r0
 801c9b2:	b158      	cbz	r0, 801c9cc <_dtoa_r+0xcc>
 801c9b4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801c9b6:	2301      	movs	r3, #1
 801c9b8:	6013      	str	r3, [r2, #0]
 801c9ba:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801c9bc:	b113      	cbz	r3, 801c9c4 <_dtoa_r+0xc4>
 801c9be:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801c9c0:	4b87      	ldr	r3, [pc, #540]	@ (801cbe0 <_dtoa_r+0x2e0>)
 801c9c2:	6013      	str	r3, [r2, #0]
 801c9c4:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 801cbe4 <_dtoa_r+0x2e4>
 801c9c8:	f000 bd41 	b.w	801d44e <_dtoa_r+0xb4e>
 801c9cc:	ab14      	add	r3, sp, #80	@ 0x50
 801c9ce:	9301      	str	r3, [sp, #4]
 801c9d0:	ab15      	add	r3, sp, #84	@ 0x54
 801c9d2:	9300      	str	r3, [sp, #0]
 801c9d4:	4648      	mov	r0, r9
 801c9d6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801c9da:	f001 f981 	bl	801dce0 <__d2b>
 801c9de:	f3c8 560a 	ubfx	r6, r8, #20, #11
 801c9e2:	9003      	str	r0, [sp, #12]
 801c9e4:	2e00      	cmp	r6, #0
 801c9e6:	d077      	beq.n	801cad8 <_dtoa_r+0x1d8>
 801c9e8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c9ea:	9712      	str	r7, [sp, #72]	@ 0x48
 801c9ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801c9f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801c9f4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 801c9f8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801c9fc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 801ca00:	4619      	mov	r1, r3
 801ca02:	2200      	movs	r2, #0
 801ca04:	4b78      	ldr	r3, [pc, #480]	@ (801cbe8 <_dtoa_r+0x2e8>)
 801ca06:	f7e3 fc17 	bl	8000238 <__aeabi_dsub>
 801ca0a:	a36b      	add	r3, pc, #428	@ (adr r3, 801cbb8 <_dtoa_r+0x2b8>)
 801ca0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca10:	f7e3 fdca 	bl	80005a8 <__aeabi_dmul>
 801ca14:	a36a      	add	r3, pc, #424	@ (adr r3, 801cbc0 <_dtoa_r+0x2c0>)
 801ca16:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca1a:	f7e3 fc0f 	bl	800023c <__adddf3>
 801ca1e:	4604      	mov	r4, r0
 801ca20:	4630      	mov	r0, r6
 801ca22:	460d      	mov	r5, r1
 801ca24:	f7e3 fd56 	bl	80004d4 <__aeabi_i2d>
 801ca28:	a367      	add	r3, pc, #412	@ (adr r3, 801cbc8 <_dtoa_r+0x2c8>)
 801ca2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca2e:	f7e3 fdbb 	bl	80005a8 <__aeabi_dmul>
 801ca32:	4602      	mov	r2, r0
 801ca34:	460b      	mov	r3, r1
 801ca36:	4620      	mov	r0, r4
 801ca38:	4629      	mov	r1, r5
 801ca3a:	f7e3 fbff 	bl	800023c <__adddf3>
 801ca3e:	4604      	mov	r4, r0
 801ca40:	460d      	mov	r5, r1
 801ca42:	f7e4 f861 	bl	8000b08 <__aeabi_d2iz>
 801ca46:	2200      	movs	r2, #0
 801ca48:	4607      	mov	r7, r0
 801ca4a:	2300      	movs	r3, #0
 801ca4c:	4620      	mov	r0, r4
 801ca4e:	4629      	mov	r1, r5
 801ca50:	f7e4 f81c 	bl	8000a8c <__aeabi_dcmplt>
 801ca54:	b140      	cbz	r0, 801ca68 <_dtoa_r+0x168>
 801ca56:	4638      	mov	r0, r7
 801ca58:	f7e3 fd3c 	bl	80004d4 <__aeabi_i2d>
 801ca5c:	4622      	mov	r2, r4
 801ca5e:	462b      	mov	r3, r5
 801ca60:	f7e4 f80a 	bl	8000a78 <__aeabi_dcmpeq>
 801ca64:	b900      	cbnz	r0, 801ca68 <_dtoa_r+0x168>
 801ca66:	3f01      	subs	r7, #1
 801ca68:	2f16      	cmp	r7, #22
 801ca6a:	d853      	bhi.n	801cb14 <_dtoa_r+0x214>
 801ca6c:	4b5f      	ldr	r3, [pc, #380]	@ (801cbec <_dtoa_r+0x2ec>)
 801ca6e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801ca72:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca76:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801ca7a:	f7e4 f807 	bl	8000a8c <__aeabi_dcmplt>
 801ca7e:	2800      	cmp	r0, #0
 801ca80:	d04a      	beq.n	801cb18 <_dtoa_r+0x218>
 801ca82:	3f01      	subs	r7, #1
 801ca84:	2300      	movs	r3, #0
 801ca86:	930f      	str	r3, [sp, #60]	@ 0x3c
 801ca88:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801ca8a:	1b9b      	subs	r3, r3, r6
 801ca8c:	1e5a      	subs	r2, r3, #1
 801ca8e:	bf45      	ittet	mi
 801ca90:	f1c3 0301 	rsbmi	r3, r3, #1
 801ca94:	9304      	strmi	r3, [sp, #16]
 801ca96:	2300      	movpl	r3, #0
 801ca98:	2300      	movmi	r3, #0
 801ca9a:	9209      	str	r2, [sp, #36]	@ 0x24
 801ca9c:	bf54      	ite	pl
 801ca9e:	9304      	strpl	r3, [sp, #16]
 801caa0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 801caa2:	2f00      	cmp	r7, #0
 801caa4:	db3a      	blt.n	801cb1c <_dtoa_r+0x21c>
 801caa6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801caa8:	970e      	str	r7, [sp, #56]	@ 0x38
 801caaa:	443b      	add	r3, r7
 801caac:	9309      	str	r3, [sp, #36]	@ 0x24
 801caae:	2300      	movs	r3, #0
 801cab0:	930a      	str	r3, [sp, #40]	@ 0x28
 801cab2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801cab4:	2b09      	cmp	r3, #9
 801cab6:	d864      	bhi.n	801cb82 <_dtoa_r+0x282>
 801cab8:	2b05      	cmp	r3, #5
 801caba:	bfc4      	itt	gt
 801cabc:	3b04      	subgt	r3, #4
 801cabe:	9320      	strgt	r3, [sp, #128]	@ 0x80
 801cac0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801cac2:	f1a3 0302 	sub.w	r3, r3, #2
 801cac6:	bfcc      	ite	gt
 801cac8:	2400      	movgt	r4, #0
 801caca:	2401      	movle	r4, #1
 801cacc:	2b03      	cmp	r3, #3
 801cace:	d864      	bhi.n	801cb9a <_dtoa_r+0x29a>
 801cad0:	e8df f003 	tbb	[pc, r3]
 801cad4:	2c385553 	.word	0x2c385553
 801cad8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 801cadc:	441e      	add	r6, r3
 801cade:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801cae2:	2b20      	cmp	r3, #32
 801cae4:	bfc1      	itttt	gt
 801cae6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801caea:	fa08 f803 	lslgt.w	r8, r8, r3
 801caee:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801caf2:	fa24 f303 	lsrgt.w	r3, r4, r3
 801caf6:	bfd6      	itet	le
 801caf8:	f1c3 0320 	rsble	r3, r3, #32
 801cafc:	ea48 0003 	orrgt.w	r0, r8, r3
 801cb00:	fa04 f003 	lslle.w	r0, r4, r3
 801cb04:	f7e3 fcd6 	bl	80004b4 <__aeabi_ui2d>
 801cb08:	2201      	movs	r2, #1
 801cb0a:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801cb0e:	3e01      	subs	r6, #1
 801cb10:	9212      	str	r2, [sp, #72]	@ 0x48
 801cb12:	e775      	b.n	801ca00 <_dtoa_r+0x100>
 801cb14:	2301      	movs	r3, #1
 801cb16:	e7b6      	b.n	801ca86 <_dtoa_r+0x186>
 801cb18:	900f      	str	r0, [sp, #60]	@ 0x3c
 801cb1a:	e7b5      	b.n	801ca88 <_dtoa_r+0x188>
 801cb1c:	9b04      	ldr	r3, [sp, #16]
 801cb1e:	1bdb      	subs	r3, r3, r7
 801cb20:	9304      	str	r3, [sp, #16]
 801cb22:	427b      	negs	r3, r7
 801cb24:	930a      	str	r3, [sp, #40]	@ 0x28
 801cb26:	2300      	movs	r3, #0
 801cb28:	930e      	str	r3, [sp, #56]	@ 0x38
 801cb2a:	e7c2      	b.n	801cab2 <_dtoa_r+0x1b2>
 801cb2c:	2301      	movs	r3, #1
 801cb2e:	930b      	str	r3, [sp, #44]	@ 0x2c
 801cb30:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801cb32:	eb07 0b03 	add.w	fp, r7, r3
 801cb36:	f10b 0301 	add.w	r3, fp, #1
 801cb3a:	2b01      	cmp	r3, #1
 801cb3c:	9308      	str	r3, [sp, #32]
 801cb3e:	bfb8      	it	lt
 801cb40:	2301      	movlt	r3, #1
 801cb42:	e006      	b.n	801cb52 <_dtoa_r+0x252>
 801cb44:	2301      	movs	r3, #1
 801cb46:	930b      	str	r3, [sp, #44]	@ 0x2c
 801cb48:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801cb4a:	2b00      	cmp	r3, #0
 801cb4c:	dd28      	ble.n	801cba0 <_dtoa_r+0x2a0>
 801cb4e:	469b      	mov	fp, r3
 801cb50:	9308      	str	r3, [sp, #32]
 801cb52:	f8d9 001c 	ldr.w	r0, [r9, #28]
 801cb56:	2100      	movs	r1, #0
 801cb58:	2204      	movs	r2, #4
 801cb5a:	f102 0514 	add.w	r5, r2, #20
 801cb5e:	429d      	cmp	r5, r3
 801cb60:	d926      	bls.n	801cbb0 <_dtoa_r+0x2b0>
 801cb62:	6041      	str	r1, [r0, #4]
 801cb64:	4648      	mov	r0, r9
 801cb66:	f000 fd9b 	bl	801d6a0 <_Balloc>
 801cb6a:	4682      	mov	sl, r0
 801cb6c:	2800      	cmp	r0, #0
 801cb6e:	d141      	bne.n	801cbf4 <_dtoa_r+0x2f4>
 801cb70:	4b1f      	ldr	r3, [pc, #124]	@ (801cbf0 <_dtoa_r+0x2f0>)
 801cb72:	4602      	mov	r2, r0
 801cb74:	f240 11af 	movw	r1, #431	@ 0x1af
 801cb78:	e6d6      	b.n	801c928 <_dtoa_r+0x28>
 801cb7a:	2300      	movs	r3, #0
 801cb7c:	e7e3      	b.n	801cb46 <_dtoa_r+0x246>
 801cb7e:	2300      	movs	r3, #0
 801cb80:	e7d5      	b.n	801cb2e <_dtoa_r+0x22e>
 801cb82:	2401      	movs	r4, #1
 801cb84:	2300      	movs	r3, #0
 801cb86:	9320      	str	r3, [sp, #128]	@ 0x80
 801cb88:	940b      	str	r4, [sp, #44]	@ 0x2c
 801cb8a:	f04f 3bff 	mov.w	fp, #4294967295
 801cb8e:	2200      	movs	r2, #0
 801cb90:	f8cd b020 	str.w	fp, [sp, #32]
 801cb94:	2312      	movs	r3, #18
 801cb96:	9221      	str	r2, [sp, #132]	@ 0x84
 801cb98:	e7db      	b.n	801cb52 <_dtoa_r+0x252>
 801cb9a:	2301      	movs	r3, #1
 801cb9c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801cb9e:	e7f4      	b.n	801cb8a <_dtoa_r+0x28a>
 801cba0:	f04f 0b01 	mov.w	fp, #1
 801cba4:	f8cd b020 	str.w	fp, [sp, #32]
 801cba8:	465b      	mov	r3, fp
 801cbaa:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 801cbae:	e7d0      	b.n	801cb52 <_dtoa_r+0x252>
 801cbb0:	3101      	adds	r1, #1
 801cbb2:	0052      	lsls	r2, r2, #1
 801cbb4:	e7d1      	b.n	801cb5a <_dtoa_r+0x25a>
 801cbb6:	bf00      	nop
 801cbb8:	636f4361 	.word	0x636f4361
 801cbbc:	3fd287a7 	.word	0x3fd287a7
 801cbc0:	8b60c8b3 	.word	0x8b60c8b3
 801cbc4:	3fc68a28 	.word	0x3fc68a28
 801cbc8:	509f79fb 	.word	0x509f79fb
 801cbcc:	3fd34413 	.word	0x3fd34413
 801cbd0:	0801f705 	.word	0x0801f705
 801cbd4:	0801f71c 	.word	0x0801f71c
 801cbd8:	7ff00000 	.word	0x7ff00000
 801cbdc:	0801f701 	.word	0x0801f701
 801cbe0:	0801f6d5 	.word	0x0801f6d5
 801cbe4:	0801f6d4 	.word	0x0801f6d4
 801cbe8:	3ff80000 	.word	0x3ff80000
 801cbec:	0801f870 	.word	0x0801f870
 801cbf0:	0801f774 	.word	0x0801f774
 801cbf4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801cbf8:	6018      	str	r0, [r3, #0]
 801cbfa:	9b08      	ldr	r3, [sp, #32]
 801cbfc:	2b0e      	cmp	r3, #14
 801cbfe:	f200 80a1 	bhi.w	801cd44 <_dtoa_r+0x444>
 801cc02:	2c00      	cmp	r4, #0
 801cc04:	f000 809e 	beq.w	801cd44 <_dtoa_r+0x444>
 801cc08:	2f00      	cmp	r7, #0
 801cc0a:	dd33      	ble.n	801cc74 <_dtoa_r+0x374>
 801cc0c:	4b9c      	ldr	r3, [pc, #624]	@ (801ce80 <_dtoa_r+0x580>)
 801cc0e:	f007 020f 	and.w	r2, r7, #15
 801cc12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801cc16:	e9d3 3400 	ldrd	r3, r4, [r3]
 801cc1a:	05f8      	lsls	r0, r7, #23
 801cc1c:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 801cc20:	ea4f 1427 	mov.w	r4, r7, asr #4
 801cc24:	d516      	bpl.n	801cc54 <_dtoa_r+0x354>
 801cc26:	4b97      	ldr	r3, [pc, #604]	@ (801ce84 <_dtoa_r+0x584>)
 801cc28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801cc2c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801cc30:	f7e3 fde4 	bl	80007fc <__aeabi_ddiv>
 801cc34:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801cc38:	f004 040f 	and.w	r4, r4, #15
 801cc3c:	2603      	movs	r6, #3
 801cc3e:	4d91      	ldr	r5, [pc, #580]	@ (801ce84 <_dtoa_r+0x584>)
 801cc40:	b954      	cbnz	r4, 801cc58 <_dtoa_r+0x358>
 801cc42:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801cc46:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801cc4a:	f7e3 fdd7 	bl	80007fc <__aeabi_ddiv>
 801cc4e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801cc52:	e028      	b.n	801cca6 <_dtoa_r+0x3a6>
 801cc54:	2602      	movs	r6, #2
 801cc56:	e7f2      	b.n	801cc3e <_dtoa_r+0x33e>
 801cc58:	07e1      	lsls	r1, r4, #31
 801cc5a:	d508      	bpl.n	801cc6e <_dtoa_r+0x36e>
 801cc5c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801cc60:	e9d5 2300 	ldrd	r2, r3, [r5]
 801cc64:	f7e3 fca0 	bl	80005a8 <__aeabi_dmul>
 801cc68:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801cc6c:	3601      	adds	r6, #1
 801cc6e:	1064      	asrs	r4, r4, #1
 801cc70:	3508      	adds	r5, #8
 801cc72:	e7e5      	b.n	801cc40 <_dtoa_r+0x340>
 801cc74:	f000 80af 	beq.w	801cdd6 <_dtoa_r+0x4d6>
 801cc78:	427c      	negs	r4, r7
 801cc7a:	4b81      	ldr	r3, [pc, #516]	@ (801ce80 <_dtoa_r+0x580>)
 801cc7c:	4d81      	ldr	r5, [pc, #516]	@ (801ce84 <_dtoa_r+0x584>)
 801cc7e:	f004 020f 	and.w	r2, r4, #15
 801cc82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801cc86:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc8a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801cc8e:	f7e3 fc8b 	bl	80005a8 <__aeabi_dmul>
 801cc92:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801cc96:	1124      	asrs	r4, r4, #4
 801cc98:	2300      	movs	r3, #0
 801cc9a:	2602      	movs	r6, #2
 801cc9c:	2c00      	cmp	r4, #0
 801cc9e:	f040 808f 	bne.w	801cdc0 <_dtoa_r+0x4c0>
 801cca2:	2b00      	cmp	r3, #0
 801cca4:	d1d3      	bne.n	801cc4e <_dtoa_r+0x34e>
 801cca6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801cca8:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 801ccac:	2b00      	cmp	r3, #0
 801ccae:	f000 8094 	beq.w	801cdda <_dtoa_r+0x4da>
 801ccb2:	4b75      	ldr	r3, [pc, #468]	@ (801ce88 <_dtoa_r+0x588>)
 801ccb4:	2200      	movs	r2, #0
 801ccb6:	4620      	mov	r0, r4
 801ccb8:	4629      	mov	r1, r5
 801ccba:	f7e3 fee7 	bl	8000a8c <__aeabi_dcmplt>
 801ccbe:	2800      	cmp	r0, #0
 801ccc0:	f000 808b 	beq.w	801cdda <_dtoa_r+0x4da>
 801ccc4:	9b08      	ldr	r3, [sp, #32]
 801ccc6:	2b00      	cmp	r3, #0
 801ccc8:	f000 8087 	beq.w	801cdda <_dtoa_r+0x4da>
 801cccc:	f1bb 0f00 	cmp.w	fp, #0
 801ccd0:	dd34      	ble.n	801cd3c <_dtoa_r+0x43c>
 801ccd2:	4620      	mov	r0, r4
 801ccd4:	4b6d      	ldr	r3, [pc, #436]	@ (801ce8c <_dtoa_r+0x58c>)
 801ccd6:	2200      	movs	r2, #0
 801ccd8:	4629      	mov	r1, r5
 801ccda:	f7e3 fc65 	bl	80005a8 <__aeabi_dmul>
 801ccde:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801cce2:	f107 38ff 	add.w	r8, r7, #4294967295
 801cce6:	3601      	adds	r6, #1
 801cce8:	465c      	mov	r4, fp
 801ccea:	4630      	mov	r0, r6
 801ccec:	f7e3 fbf2 	bl	80004d4 <__aeabi_i2d>
 801ccf0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801ccf4:	f7e3 fc58 	bl	80005a8 <__aeabi_dmul>
 801ccf8:	4b65      	ldr	r3, [pc, #404]	@ (801ce90 <_dtoa_r+0x590>)
 801ccfa:	2200      	movs	r2, #0
 801ccfc:	f7e3 fa9e 	bl	800023c <__adddf3>
 801cd00:	4605      	mov	r5, r0
 801cd02:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801cd06:	2c00      	cmp	r4, #0
 801cd08:	d16a      	bne.n	801cde0 <_dtoa_r+0x4e0>
 801cd0a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801cd0e:	4b61      	ldr	r3, [pc, #388]	@ (801ce94 <_dtoa_r+0x594>)
 801cd10:	2200      	movs	r2, #0
 801cd12:	f7e3 fa91 	bl	8000238 <__aeabi_dsub>
 801cd16:	4602      	mov	r2, r0
 801cd18:	460b      	mov	r3, r1
 801cd1a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801cd1e:	462a      	mov	r2, r5
 801cd20:	4633      	mov	r3, r6
 801cd22:	f7e3 fed1 	bl	8000ac8 <__aeabi_dcmpgt>
 801cd26:	2800      	cmp	r0, #0
 801cd28:	f040 8298 	bne.w	801d25c <_dtoa_r+0x95c>
 801cd2c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801cd30:	462a      	mov	r2, r5
 801cd32:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801cd36:	f7e3 fea9 	bl	8000a8c <__aeabi_dcmplt>
 801cd3a:	bb38      	cbnz	r0, 801cd8c <_dtoa_r+0x48c>
 801cd3c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801cd40:	e9cd 3406 	strd	r3, r4, [sp, #24]
 801cd44:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801cd46:	2b00      	cmp	r3, #0
 801cd48:	f2c0 8157 	blt.w	801cffa <_dtoa_r+0x6fa>
 801cd4c:	2f0e      	cmp	r7, #14
 801cd4e:	f300 8154 	bgt.w	801cffa <_dtoa_r+0x6fa>
 801cd52:	4b4b      	ldr	r3, [pc, #300]	@ (801ce80 <_dtoa_r+0x580>)
 801cd54:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801cd58:	e9d3 3400 	ldrd	r3, r4, [r3]
 801cd5c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 801cd60:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801cd62:	2b00      	cmp	r3, #0
 801cd64:	f280 80e5 	bge.w	801cf32 <_dtoa_r+0x632>
 801cd68:	9b08      	ldr	r3, [sp, #32]
 801cd6a:	2b00      	cmp	r3, #0
 801cd6c:	f300 80e1 	bgt.w	801cf32 <_dtoa_r+0x632>
 801cd70:	d10c      	bne.n	801cd8c <_dtoa_r+0x48c>
 801cd72:	4b48      	ldr	r3, [pc, #288]	@ (801ce94 <_dtoa_r+0x594>)
 801cd74:	2200      	movs	r2, #0
 801cd76:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801cd7a:	f7e3 fc15 	bl	80005a8 <__aeabi_dmul>
 801cd7e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801cd82:	f7e3 fe97 	bl	8000ab4 <__aeabi_dcmpge>
 801cd86:	2800      	cmp	r0, #0
 801cd88:	f000 8266 	beq.w	801d258 <_dtoa_r+0x958>
 801cd8c:	2400      	movs	r4, #0
 801cd8e:	4625      	mov	r5, r4
 801cd90:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801cd92:	4656      	mov	r6, sl
 801cd94:	ea6f 0803 	mvn.w	r8, r3
 801cd98:	2700      	movs	r7, #0
 801cd9a:	4621      	mov	r1, r4
 801cd9c:	4648      	mov	r0, r9
 801cd9e:	f000 fcbf 	bl	801d720 <_Bfree>
 801cda2:	2d00      	cmp	r5, #0
 801cda4:	f000 80bd 	beq.w	801cf22 <_dtoa_r+0x622>
 801cda8:	b12f      	cbz	r7, 801cdb6 <_dtoa_r+0x4b6>
 801cdaa:	42af      	cmp	r7, r5
 801cdac:	d003      	beq.n	801cdb6 <_dtoa_r+0x4b6>
 801cdae:	4639      	mov	r1, r7
 801cdb0:	4648      	mov	r0, r9
 801cdb2:	f000 fcb5 	bl	801d720 <_Bfree>
 801cdb6:	4629      	mov	r1, r5
 801cdb8:	4648      	mov	r0, r9
 801cdba:	f000 fcb1 	bl	801d720 <_Bfree>
 801cdbe:	e0b0      	b.n	801cf22 <_dtoa_r+0x622>
 801cdc0:	07e2      	lsls	r2, r4, #31
 801cdc2:	d505      	bpl.n	801cdd0 <_dtoa_r+0x4d0>
 801cdc4:	e9d5 2300 	ldrd	r2, r3, [r5]
 801cdc8:	f7e3 fbee 	bl	80005a8 <__aeabi_dmul>
 801cdcc:	3601      	adds	r6, #1
 801cdce:	2301      	movs	r3, #1
 801cdd0:	1064      	asrs	r4, r4, #1
 801cdd2:	3508      	adds	r5, #8
 801cdd4:	e762      	b.n	801cc9c <_dtoa_r+0x39c>
 801cdd6:	2602      	movs	r6, #2
 801cdd8:	e765      	b.n	801cca6 <_dtoa_r+0x3a6>
 801cdda:	9c08      	ldr	r4, [sp, #32]
 801cddc:	46b8      	mov	r8, r7
 801cdde:	e784      	b.n	801ccea <_dtoa_r+0x3ea>
 801cde0:	4b27      	ldr	r3, [pc, #156]	@ (801ce80 <_dtoa_r+0x580>)
 801cde2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801cde4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801cde8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801cdec:	4454      	add	r4, sl
 801cdee:	2900      	cmp	r1, #0
 801cdf0:	d054      	beq.n	801ce9c <_dtoa_r+0x59c>
 801cdf2:	4929      	ldr	r1, [pc, #164]	@ (801ce98 <_dtoa_r+0x598>)
 801cdf4:	2000      	movs	r0, #0
 801cdf6:	f7e3 fd01 	bl	80007fc <__aeabi_ddiv>
 801cdfa:	4633      	mov	r3, r6
 801cdfc:	462a      	mov	r2, r5
 801cdfe:	f7e3 fa1b 	bl	8000238 <__aeabi_dsub>
 801ce02:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801ce06:	4656      	mov	r6, sl
 801ce08:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801ce0c:	f7e3 fe7c 	bl	8000b08 <__aeabi_d2iz>
 801ce10:	4605      	mov	r5, r0
 801ce12:	f7e3 fb5f 	bl	80004d4 <__aeabi_i2d>
 801ce16:	4602      	mov	r2, r0
 801ce18:	460b      	mov	r3, r1
 801ce1a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801ce1e:	f7e3 fa0b 	bl	8000238 <__aeabi_dsub>
 801ce22:	3530      	adds	r5, #48	@ 0x30
 801ce24:	4602      	mov	r2, r0
 801ce26:	460b      	mov	r3, r1
 801ce28:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801ce2c:	f806 5b01 	strb.w	r5, [r6], #1
 801ce30:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801ce34:	f7e3 fe2a 	bl	8000a8c <__aeabi_dcmplt>
 801ce38:	2800      	cmp	r0, #0
 801ce3a:	d172      	bne.n	801cf22 <_dtoa_r+0x622>
 801ce3c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801ce40:	4911      	ldr	r1, [pc, #68]	@ (801ce88 <_dtoa_r+0x588>)
 801ce42:	2000      	movs	r0, #0
 801ce44:	f7e3 f9f8 	bl	8000238 <__aeabi_dsub>
 801ce48:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801ce4c:	f7e3 fe1e 	bl	8000a8c <__aeabi_dcmplt>
 801ce50:	2800      	cmp	r0, #0
 801ce52:	f040 80b4 	bne.w	801cfbe <_dtoa_r+0x6be>
 801ce56:	42a6      	cmp	r6, r4
 801ce58:	f43f af70 	beq.w	801cd3c <_dtoa_r+0x43c>
 801ce5c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801ce60:	4b0a      	ldr	r3, [pc, #40]	@ (801ce8c <_dtoa_r+0x58c>)
 801ce62:	2200      	movs	r2, #0
 801ce64:	f7e3 fba0 	bl	80005a8 <__aeabi_dmul>
 801ce68:	4b08      	ldr	r3, [pc, #32]	@ (801ce8c <_dtoa_r+0x58c>)
 801ce6a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801ce6e:	2200      	movs	r2, #0
 801ce70:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801ce74:	f7e3 fb98 	bl	80005a8 <__aeabi_dmul>
 801ce78:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801ce7c:	e7c4      	b.n	801ce08 <_dtoa_r+0x508>
 801ce7e:	bf00      	nop
 801ce80:	0801f870 	.word	0x0801f870
 801ce84:	0801f848 	.word	0x0801f848
 801ce88:	3ff00000 	.word	0x3ff00000
 801ce8c:	40240000 	.word	0x40240000
 801ce90:	401c0000 	.word	0x401c0000
 801ce94:	40140000 	.word	0x40140000
 801ce98:	3fe00000 	.word	0x3fe00000
 801ce9c:	4631      	mov	r1, r6
 801ce9e:	4628      	mov	r0, r5
 801cea0:	f7e3 fb82 	bl	80005a8 <__aeabi_dmul>
 801cea4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801cea8:	9413      	str	r4, [sp, #76]	@ 0x4c
 801ceaa:	4656      	mov	r6, sl
 801ceac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801ceb0:	f7e3 fe2a 	bl	8000b08 <__aeabi_d2iz>
 801ceb4:	4605      	mov	r5, r0
 801ceb6:	f7e3 fb0d 	bl	80004d4 <__aeabi_i2d>
 801ceba:	4602      	mov	r2, r0
 801cebc:	460b      	mov	r3, r1
 801cebe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801cec2:	f7e3 f9b9 	bl	8000238 <__aeabi_dsub>
 801cec6:	3530      	adds	r5, #48	@ 0x30
 801cec8:	f806 5b01 	strb.w	r5, [r6], #1
 801cecc:	4602      	mov	r2, r0
 801cece:	460b      	mov	r3, r1
 801ced0:	42a6      	cmp	r6, r4
 801ced2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801ced6:	f04f 0200 	mov.w	r2, #0
 801ceda:	d124      	bne.n	801cf26 <_dtoa_r+0x626>
 801cedc:	4baf      	ldr	r3, [pc, #700]	@ (801d19c <_dtoa_r+0x89c>)
 801cede:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801cee2:	f7e3 f9ab 	bl	800023c <__adddf3>
 801cee6:	4602      	mov	r2, r0
 801cee8:	460b      	mov	r3, r1
 801ceea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801ceee:	f7e3 fdeb 	bl	8000ac8 <__aeabi_dcmpgt>
 801cef2:	2800      	cmp	r0, #0
 801cef4:	d163      	bne.n	801cfbe <_dtoa_r+0x6be>
 801cef6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801cefa:	49a8      	ldr	r1, [pc, #672]	@ (801d19c <_dtoa_r+0x89c>)
 801cefc:	2000      	movs	r0, #0
 801cefe:	f7e3 f99b 	bl	8000238 <__aeabi_dsub>
 801cf02:	4602      	mov	r2, r0
 801cf04:	460b      	mov	r3, r1
 801cf06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801cf0a:	f7e3 fdbf 	bl	8000a8c <__aeabi_dcmplt>
 801cf0e:	2800      	cmp	r0, #0
 801cf10:	f43f af14 	beq.w	801cd3c <_dtoa_r+0x43c>
 801cf14:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801cf16:	1e73      	subs	r3, r6, #1
 801cf18:	9313      	str	r3, [sp, #76]	@ 0x4c
 801cf1a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801cf1e:	2b30      	cmp	r3, #48	@ 0x30
 801cf20:	d0f8      	beq.n	801cf14 <_dtoa_r+0x614>
 801cf22:	4647      	mov	r7, r8
 801cf24:	e03b      	b.n	801cf9e <_dtoa_r+0x69e>
 801cf26:	4b9e      	ldr	r3, [pc, #632]	@ (801d1a0 <_dtoa_r+0x8a0>)
 801cf28:	f7e3 fb3e 	bl	80005a8 <__aeabi_dmul>
 801cf2c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801cf30:	e7bc      	b.n	801ceac <_dtoa_r+0x5ac>
 801cf32:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 801cf36:	4656      	mov	r6, sl
 801cf38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801cf3c:	4620      	mov	r0, r4
 801cf3e:	4629      	mov	r1, r5
 801cf40:	f7e3 fc5c 	bl	80007fc <__aeabi_ddiv>
 801cf44:	f7e3 fde0 	bl	8000b08 <__aeabi_d2iz>
 801cf48:	4680      	mov	r8, r0
 801cf4a:	f7e3 fac3 	bl	80004d4 <__aeabi_i2d>
 801cf4e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801cf52:	f7e3 fb29 	bl	80005a8 <__aeabi_dmul>
 801cf56:	4602      	mov	r2, r0
 801cf58:	460b      	mov	r3, r1
 801cf5a:	4620      	mov	r0, r4
 801cf5c:	4629      	mov	r1, r5
 801cf5e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801cf62:	f7e3 f969 	bl	8000238 <__aeabi_dsub>
 801cf66:	f806 4b01 	strb.w	r4, [r6], #1
 801cf6a:	9d08      	ldr	r5, [sp, #32]
 801cf6c:	eba6 040a 	sub.w	r4, r6, sl
 801cf70:	42a5      	cmp	r5, r4
 801cf72:	4602      	mov	r2, r0
 801cf74:	460b      	mov	r3, r1
 801cf76:	d133      	bne.n	801cfe0 <_dtoa_r+0x6e0>
 801cf78:	f7e3 f960 	bl	800023c <__adddf3>
 801cf7c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801cf80:	4604      	mov	r4, r0
 801cf82:	460d      	mov	r5, r1
 801cf84:	f7e3 fda0 	bl	8000ac8 <__aeabi_dcmpgt>
 801cf88:	b9c0      	cbnz	r0, 801cfbc <_dtoa_r+0x6bc>
 801cf8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801cf8e:	4620      	mov	r0, r4
 801cf90:	4629      	mov	r1, r5
 801cf92:	f7e3 fd71 	bl	8000a78 <__aeabi_dcmpeq>
 801cf96:	b110      	cbz	r0, 801cf9e <_dtoa_r+0x69e>
 801cf98:	f018 0f01 	tst.w	r8, #1
 801cf9c:	d10e      	bne.n	801cfbc <_dtoa_r+0x6bc>
 801cf9e:	9903      	ldr	r1, [sp, #12]
 801cfa0:	4648      	mov	r0, r9
 801cfa2:	f000 fbbd 	bl	801d720 <_Bfree>
 801cfa6:	2300      	movs	r3, #0
 801cfa8:	7033      	strb	r3, [r6, #0]
 801cfaa:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801cfac:	3701      	adds	r7, #1
 801cfae:	601f      	str	r7, [r3, #0]
 801cfb0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801cfb2:	2b00      	cmp	r3, #0
 801cfb4:	f000 824b 	beq.w	801d44e <_dtoa_r+0xb4e>
 801cfb8:	601e      	str	r6, [r3, #0]
 801cfba:	e248      	b.n	801d44e <_dtoa_r+0xb4e>
 801cfbc:	46b8      	mov	r8, r7
 801cfbe:	4633      	mov	r3, r6
 801cfc0:	461e      	mov	r6, r3
 801cfc2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801cfc6:	2a39      	cmp	r2, #57	@ 0x39
 801cfc8:	d106      	bne.n	801cfd8 <_dtoa_r+0x6d8>
 801cfca:	459a      	cmp	sl, r3
 801cfcc:	d1f8      	bne.n	801cfc0 <_dtoa_r+0x6c0>
 801cfce:	2230      	movs	r2, #48	@ 0x30
 801cfd0:	f108 0801 	add.w	r8, r8, #1
 801cfd4:	f88a 2000 	strb.w	r2, [sl]
 801cfd8:	781a      	ldrb	r2, [r3, #0]
 801cfda:	3201      	adds	r2, #1
 801cfdc:	701a      	strb	r2, [r3, #0]
 801cfde:	e7a0      	b.n	801cf22 <_dtoa_r+0x622>
 801cfe0:	4b6f      	ldr	r3, [pc, #444]	@ (801d1a0 <_dtoa_r+0x8a0>)
 801cfe2:	2200      	movs	r2, #0
 801cfe4:	f7e3 fae0 	bl	80005a8 <__aeabi_dmul>
 801cfe8:	2200      	movs	r2, #0
 801cfea:	2300      	movs	r3, #0
 801cfec:	4604      	mov	r4, r0
 801cfee:	460d      	mov	r5, r1
 801cff0:	f7e3 fd42 	bl	8000a78 <__aeabi_dcmpeq>
 801cff4:	2800      	cmp	r0, #0
 801cff6:	d09f      	beq.n	801cf38 <_dtoa_r+0x638>
 801cff8:	e7d1      	b.n	801cf9e <_dtoa_r+0x69e>
 801cffa:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801cffc:	2a00      	cmp	r2, #0
 801cffe:	f000 80ea 	beq.w	801d1d6 <_dtoa_r+0x8d6>
 801d002:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801d004:	2a01      	cmp	r2, #1
 801d006:	f300 80cd 	bgt.w	801d1a4 <_dtoa_r+0x8a4>
 801d00a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801d00c:	2a00      	cmp	r2, #0
 801d00e:	f000 80c1 	beq.w	801d194 <_dtoa_r+0x894>
 801d012:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801d016:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801d018:	9e04      	ldr	r6, [sp, #16]
 801d01a:	9a04      	ldr	r2, [sp, #16]
 801d01c:	441a      	add	r2, r3
 801d01e:	9204      	str	r2, [sp, #16]
 801d020:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d022:	2101      	movs	r1, #1
 801d024:	441a      	add	r2, r3
 801d026:	4648      	mov	r0, r9
 801d028:	9209      	str	r2, [sp, #36]	@ 0x24
 801d02a:	f000 fc2d 	bl	801d888 <__i2b>
 801d02e:	4605      	mov	r5, r0
 801d030:	b166      	cbz	r6, 801d04c <_dtoa_r+0x74c>
 801d032:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d034:	2b00      	cmp	r3, #0
 801d036:	dd09      	ble.n	801d04c <_dtoa_r+0x74c>
 801d038:	42b3      	cmp	r3, r6
 801d03a:	9a04      	ldr	r2, [sp, #16]
 801d03c:	bfa8      	it	ge
 801d03e:	4633      	movge	r3, r6
 801d040:	1ad2      	subs	r2, r2, r3
 801d042:	9204      	str	r2, [sp, #16]
 801d044:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d046:	1af6      	subs	r6, r6, r3
 801d048:	1ad3      	subs	r3, r2, r3
 801d04a:	9309      	str	r3, [sp, #36]	@ 0x24
 801d04c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d04e:	b30b      	cbz	r3, 801d094 <_dtoa_r+0x794>
 801d050:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d052:	2b00      	cmp	r3, #0
 801d054:	f000 80c6 	beq.w	801d1e4 <_dtoa_r+0x8e4>
 801d058:	2c00      	cmp	r4, #0
 801d05a:	f000 80c0 	beq.w	801d1de <_dtoa_r+0x8de>
 801d05e:	4629      	mov	r1, r5
 801d060:	4622      	mov	r2, r4
 801d062:	4648      	mov	r0, r9
 801d064:	f000 fcc8 	bl	801d9f8 <__pow5mult>
 801d068:	9a03      	ldr	r2, [sp, #12]
 801d06a:	4601      	mov	r1, r0
 801d06c:	4605      	mov	r5, r0
 801d06e:	4648      	mov	r0, r9
 801d070:	f000 fc20 	bl	801d8b4 <__multiply>
 801d074:	9903      	ldr	r1, [sp, #12]
 801d076:	4680      	mov	r8, r0
 801d078:	4648      	mov	r0, r9
 801d07a:	f000 fb51 	bl	801d720 <_Bfree>
 801d07e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d080:	1b1b      	subs	r3, r3, r4
 801d082:	930a      	str	r3, [sp, #40]	@ 0x28
 801d084:	f000 80b1 	beq.w	801d1ea <_dtoa_r+0x8ea>
 801d088:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d08a:	4641      	mov	r1, r8
 801d08c:	4648      	mov	r0, r9
 801d08e:	f000 fcb3 	bl	801d9f8 <__pow5mult>
 801d092:	9003      	str	r0, [sp, #12]
 801d094:	2101      	movs	r1, #1
 801d096:	4648      	mov	r0, r9
 801d098:	f000 fbf6 	bl	801d888 <__i2b>
 801d09c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d09e:	4604      	mov	r4, r0
 801d0a0:	2b00      	cmp	r3, #0
 801d0a2:	f000 81d8 	beq.w	801d456 <_dtoa_r+0xb56>
 801d0a6:	461a      	mov	r2, r3
 801d0a8:	4601      	mov	r1, r0
 801d0aa:	4648      	mov	r0, r9
 801d0ac:	f000 fca4 	bl	801d9f8 <__pow5mult>
 801d0b0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801d0b2:	2b01      	cmp	r3, #1
 801d0b4:	4604      	mov	r4, r0
 801d0b6:	f300 809f 	bgt.w	801d1f8 <_dtoa_r+0x8f8>
 801d0ba:	9b06      	ldr	r3, [sp, #24]
 801d0bc:	2b00      	cmp	r3, #0
 801d0be:	f040 8097 	bne.w	801d1f0 <_dtoa_r+0x8f0>
 801d0c2:	9b07      	ldr	r3, [sp, #28]
 801d0c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801d0c8:	2b00      	cmp	r3, #0
 801d0ca:	f040 8093 	bne.w	801d1f4 <_dtoa_r+0x8f4>
 801d0ce:	9b07      	ldr	r3, [sp, #28]
 801d0d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801d0d4:	0d1b      	lsrs	r3, r3, #20
 801d0d6:	051b      	lsls	r3, r3, #20
 801d0d8:	b133      	cbz	r3, 801d0e8 <_dtoa_r+0x7e8>
 801d0da:	9b04      	ldr	r3, [sp, #16]
 801d0dc:	3301      	adds	r3, #1
 801d0de:	9304      	str	r3, [sp, #16]
 801d0e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d0e2:	3301      	adds	r3, #1
 801d0e4:	9309      	str	r3, [sp, #36]	@ 0x24
 801d0e6:	2301      	movs	r3, #1
 801d0e8:	930a      	str	r3, [sp, #40]	@ 0x28
 801d0ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d0ec:	2b00      	cmp	r3, #0
 801d0ee:	f000 81b8 	beq.w	801d462 <_dtoa_r+0xb62>
 801d0f2:	6923      	ldr	r3, [r4, #16]
 801d0f4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801d0f8:	6918      	ldr	r0, [r3, #16]
 801d0fa:	f000 fb79 	bl	801d7f0 <__hi0bits>
 801d0fe:	f1c0 0020 	rsb	r0, r0, #32
 801d102:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d104:	4418      	add	r0, r3
 801d106:	f010 001f 	ands.w	r0, r0, #31
 801d10a:	f000 8082 	beq.w	801d212 <_dtoa_r+0x912>
 801d10e:	f1c0 0320 	rsb	r3, r0, #32
 801d112:	2b04      	cmp	r3, #4
 801d114:	dd73      	ble.n	801d1fe <_dtoa_r+0x8fe>
 801d116:	9b04      	ldr	r3, [sp, #16]
 801d118:	f1c0 001c 	rsb	r0, r0, #28
 801d11c:	4403      	add	r3, r0
 801d11e:	9304      	str	r3, [sp, #16]
 801d120:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d122:	4403      	add	r3, r0
 801d124:	4406      	add	r6, r0
 801d126:	9309      	str	r3, [sp, #36]	@ 0x24
 801d128:	9b04      	ldr	r3, [sp, #16]
 801d12a:	2b00      	cmp	r3, #0
 801d12c:	dd05      	ble.n	801d13a <_dtoa_r+0x83a>
 801d12e:	9903      	ldr	r1, [sp, #12]
 801d130:	461a      	mov	r2, r3
 801d132:	4648      	mov	r0, r9
 801d134:	f000 fcba 	bl	801daac <__lshift>
 801d138:	9003      	str	r0, [sp, #12]
 801d13a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d13c:	2b00      	cmp	r3, #0
 801d13e:	dd05      	ble.n	801d14c <_dtoa_r+0x84c>
 801d140:	4621      	mov	r1, r4
 801d142:	461a      	mov	r2, r3
 801d144:	4648      	mov	r0, r9
 801d146:	f000 fcb1 	bl	801daac <__lshift>
 801d14a:	4604      	mov	r4, r0
 801d14c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d14e:	2b00      	cmp	r3, #0
 801d150:	d061      	beq.n	801d216 <_dtoa_r+0x916>
 801d152:	9803      	ldr	r0, [sp, #12]
 801d154:	4621      	mov	r1, r4
 801d156:	f000 fd15 	bl	801db84 <__mcmp>
 801d15a:	2800      	cmp	r0, #0
 801d15c:	da5b      	bge.n	801d216 <_dtoa_r+0x916>
 801d15e:	2300      	movs	r3, #0
 801d160:	9903      	ldr	r1, [sp, #12]
 801d162:	220a      	movs	r2, #10
 801d164:	4648      	mov	r0, r9
 801d166:	f000 fafd 	bl	801d764 <__multadd>
 801d16a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d16c:	9003      	str	r0, [sp, #12]
 801d16e:	f107 38ff 	add.w	r8, r7, #4294967295
 801d172:	2b00      	cmp	r3, #0
 801d174:	f000 8177 	beq.w	801d466 <_dtoa_r+0xb66>
 801d178:	4629      	mov	r1, r5
 801d17a:	2300      	movs	r3, #0
 801d17c:	220a      	movs	r2, #10
 801d17e:	4648      	mov	r0, r9
 801d180:	f000 faf0 	bl	801d764 <__multadd>
 801d184:	f1bb 0f00 	cmp.w	fp, #0
 801d188:	4605      	mov	r5, r0
 801d18a:	dc6f      	bgt.n	801d26c <_dtoa_r+0x96c>
 801d18c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801d18e:	2b02      	cmp	r3, #2
 801d190:	dc49      	bgt.n	801d226 <_dtoa_r+0x926>
 801d192:	e06b      	b.n	801d26c <_dtoa_r+0x96c>
 801d194:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801d196:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801d19a:	e73c      	b.n	801d016 <_dtoa_r+0x716>
 801d19c:	3fe00000 	.word	0x3fe00000
 801d1a0:	40240000 	.word	0x40240000
 801d1a4:	9b08      	ldr	r3, [sp, #32]
 801d1a6:	1e5c      	subs	r4, r3, #1
 801d1a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d1aa:	42a3      	cmp	r3, r4
 801d1ac:	db09      	blt.n	801d1c2 <_dtoa_r+0x8c2>
 801d1ae:	1b1c      	subs	r4, r3, r4
 801d1b0:	9b08      	ldr	r3, [sp, #32]
 801d1b2:	2b00      	cmp	r3, #0
 801d1b4:	f6bf af30 	bge.w	801d018 <_dtoa_r+0x718>
 801d1b8:	9b04      	ldr	r3, [sp, #16]
 801d1ba:	9a08      	ldr	r2, [sp, #32]
 801d1bc:	1a9e      	subs	r6, r3, r2
 801d1be:	2300      	movs	r3, #0
 801d1c0:	e72b      	b.n	801d01a <_dtoa_r+0x71a>
 801d1c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d1c4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d1c6:	940a      	str	r4, [sp, #40]	@ 0x28
 801d1c8:	1ae3      	subs	r3, r4, r3
 801d1ca:	441a      	add	r2, r3
 801d1cc:	9e04      	ldr	r6, [sp, #16]
 801d1ce:	9b08      	ldr	r3, [sp, #32]
 801d1d0:	920e      	str	r2, [sp, #56]	@ 0x38
 801d1d2:	2400      	movs	r4, #0
 801d1d4:	e721      	b.n	801d01a <_dtoa_r+0x71a>
 801d1d6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801d1d8:	9e04      	ldr	r6, [sp, #16]
 801d1da:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801d1dc:	e728      	b.n	801d030 <_dtoa_r+0x730>
 801d1de:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801d1e2:	e751      	b.n	801d088 <_dtoa_r+0x788>
 801d1e4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d1e6:	9903      	ldr	r1, [sp, #12]
 801d1e8:	e750      	b.n	801d08c <_dtoa_r+0x78c>
 801d1ea:	f8cd 800c 	str.w	r8, [sp, #12]
 801d1ee:	e751      	b.n	801d094 <_dtoa_r+0x794>
 801d1f0:	2300      	movs	r3, #0
 801d1f2:	e779      	b.n	801d0e8 <_dtoa_r+0x7e8>
 801d1f4:	9b06      	ldr	r3, [sp, #24]
 801d1f6:	e777      	b.n	801d0e8 <_dtoa_r+0x7e8>
 801d1f8:	2300      	movs	r3, #0
 801d1fa:	930a      	str	r3, [sp, #40]	@ 0x28
 801d1fc:	e779      	b.n	801d0f2 <_dtoa_r+0x7f2>
 801d1fe:	d093      	beq.n	801d128 <_dtoa_r+0x828>
 801d200:	9a04      	ldr	r2, [sp, #16]
 801d202:	331c      	adds	r3, #28
 801d204:	441a      	add	r2, r3
 801d206:	9204      	str	r2, [sp, #16]
 801d208:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d20a:	441a      	add	r2, r3
 801d20c:	441e      	add	r6, r3
 801d20e:	9209      	str	r2, [sp, #36]	@ 0x24
 801d210:	e78a      	b.n	801d128 <_dtoa_r+0x828>
 801d212:	4603      	mov	r3, r0
 801d214:	e7f4      	b.n	801d200 <_dtoa_r+0x900>
 801d216:	9b08      	ldr	r3, [sp, #32]
 801d218:	2b00      	cmp	r3, #0
 801d21a:	46b8      	mov	r8, r7
 801d21c:	dc20      	bgt.n	801d260 <_dtoa_r+0x960>
 801d21e:	469b      	mov	fp, r3
 801d220:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801d222:	2b02      	cmp	r3, #2
 801d224:	dd1e      	ble.n	801d264 <_dtoa_r+0x964>
 801d226:	f1bb 0f00 	cmp.w	fp, #0
 801d22a:	f47f adb1 	bne.w	801cd90 <_dtoa_r+0x490>
 801d22e:	4621      	mov	r1, r4
 801d230:	465b      	mov	r3, fp
 801d232:	2205      	movs	r2, #5
 801d234:	4648      	mov	r0, r9
 801d236:	f000 fa95 	bl	801d764 <__multadd>
 801d23a:	4601      	mov	r1, r0
 801d23c:	4604      	mov	r4, r0
 801d23e:	9803      	ldr	r0, [sp, #12]
 801d240:	f000 fca0 	bl	801db84 <__mcmp>
 801d244:	2800      	cmp	r0, #0
 801d246:	f77f ada3 	ble.w	801cd90 <_dtoa_r+0x490>
 801d24a:	4656      	mov	r6, sl
 801d24c:	2331      	movs	r3, #49	@ 0x31
 801d24e:	f806 3b01 	strb.w	r3, [r6], #1
 801d252:	f108 0801 	add.w	r8, r8, #1
 801d256:	e59f      	b.n	801cd98 <_dtoa_r+0x498>
 801d258:	9c08      	ldr	r4, [sp, #32]
 801d25a:	46b8      	mov	r8, r7
 801d25c:	4625      	mov	r5, r4
 801d25e:	e7f4      	b.n	801d24a <_dtoa_r+0x94a>
 801d260:	f8dd b020 	ldr.w	fp, [sp, #32]
 801d264:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d266:	2b00      	cmp	r3, #0
 801d268:	f000 8101 	beq.w	801d46e <_dtoa_r+0xb6e>
 801d26c:	2e00      	cmp	r6, #0
 801d26e:	dd05      	ble.n	801d27c <_dtoa_r+0x97c>
 801d270:	4629      	mov	r1, r5
 801d272:	4632      	mov	r2, r6
 801d274:	4648      	mov	r0, r9
 801d276:	f000 fc19 	bl	801daac <__lshift>
 801d27a:	4605      	mov	r5, r0
 801d27c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d27e:	2b00      	cmp	r3, #0
 801d280:	d05c      	beq.n	801d33c <_dtoa_r+0xa3c>
 801d282:	6869      	ldr	r1, [r5, #4]
 801d284:	4648      	mov	r0, r9
 801d286:	f000 fa0b 	bl	801d6a0 <_Balloc>
 801d28a:	4606      	mov	r6, r0
 801d28c:	b928      	cbnz	r0, 801d29a <_dtoa_r+0x99a>
 801d28e:	4b82      	ldr	r3, [pc, #520]	@ (801d498 <_dtoa_r+0xb98>)
 801d290:	4602      	mov	r2, r0
 801d292:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801d296:	f7ff bb47 	b.w	801c928 <_dtoa_r+0x28>
 801d29a:	692a      	ldr	r2, [r5, #16]
 801d29c:	3202      	adds	r2, #2
 801d29e:	0092      	lsls	r2, r2, #2
 801d2a0:	f105 010c 	add.w	r1, r5, #12
 801d2a4:	300c      	adds	r0, #12
 801d2a6:	f000 fe2b 	bl	801df00 <memcpy>
 801d2aa:	2201      	movs	r2, #1
 801d2ac:	4631      	mov	r1, r6
 801d2ae:	4648      	mov	r0, r9
 801d2b0:	f000 fbfc 	bl	801daac <__lshift>
 801d2b4:	f10a 0301 	add.w	r3, sl, #1
 801d2b8:	9304      	str	r3, [sp, #16]
 801d2ba:	eb0a 030b 	add.w	r3, sl, fp
 801d2be:	930a      	str	r3, [sp, #40]	@ 0x28
 801d2c0:	9b06      	ldr	r3, [sp, #24]
 801d2c2:	f003 0301 	and.w	r3, r3, #1
 801d2c6:	462f      	mov	r7, r5
 801d2c8:	9309      	str	r3, [sp, #36]	@ 0x24
 801d2ca:	4605      	mov	r5, r0
 801d2cc:	9b04      	ldr	r3, [sp, #16]
 801d2ce:	9803      	ldr	r0, [sp, #12]
 801d2d0:	4621      	mov	r1, r4
 801d2d2:	f103 3bff 	add.w	fp, r3, #4294967295
 801d2d6:	f7ff fa88 	bl	801c7ea <quorem>
 801d2da:	4603      	mov	r3, r0
 801d2dc:	3330      	adds	r3, #48	@ 0x30
 801d2de:	9006      	str	r0, [sp, #24]
 801d2e0:	4639      	mov	r1, r7
 801d2e2:	9803      	ldr	r0, [sp, #12]
 801d2e4:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d2e6:	f000 fc4d 	bl	801db84 <__mcmp>
 801d2ea:	462a      	mov	r2, r5
 801d2ec:	9008      	str	r0, [sp, #32]
 801d2ee:	4621      	mov	r1, r4
 801d2f0:	4648      	mov	r0, r9
 801d2f2:	f000 fc63 	bl	801dbbc <__mdiff>
 801d2f6:	68c2      	ldr	r2, [r0, #12]
 801d2f8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d2fa:	4606      	mov	r6, r0
 801d2fc:	bb02      	cbnz	r2, 801d340 <_dtoa_r+0xa40>
 801d2fe:	4601      	mov	r1, r0
 801d300:	9803      	ldr	r0, [sp, #12]
 801d302:	f000 fc3f 	bl	801db84 <__mcmp>
 801d306:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d308:	4602      	mov	r2, r0
 801d30a:	4631      	mov	r1, r6
 801d30c:	4648      	mov	r0, r9
 801d30e:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 801d312:	f000 fa05 	bl	801d720 <_Bfree>
 801d316:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801d318:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801d31a:	9e04      	ldr	r6, [sp, #16]
 801d31c:	ea42 0103 	orr.w	r1, r2, r3
 801d320:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d322:	4319      	orrs	r1, r3
 801d324:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d326:	d10d      	bne.n	801d344 <_dtoa_r+0xa44>
 801d328:	2b39      	cmp	r3, #57	@ 0x39
 801d32a:	d027      	beq.n	801d37c <_dtoa_r+0xa7c>
 801d32c:	9a08      	ldr	r2, [sp, #32]
 801d32e:	2a00      	cmp	r2, #0
 801d330:	dd01      	ble.n	801d336 <_dtoa_r+0xa36>
 801d332:	9b06      	ldr	r3, [sp, #24]
 801d334:	3331      	adds	r3, #49	@ 0x31
 801d336:	f88b 3000 	strb.w	r3, [fp]
 801d33a:	e52e      	b.n	801cd9a <_dtoa_r+0x49a>
 801d33c:	4628      	mov	r0, r5
 801d33e:	e7b9      	b.n	801d2b4 <_dtoa_r+0x9b4>
 801d340:	2201      	movs	r2, #1
 801d342:	e7e2      	b.n	801d30a <_dtoa_r+0xa0a>
 801d344:	9908      	ldr	r1, [sp, #32]
 801d346:	2900      	cmp	r1, #0
 801d348:	db04      	blt.n	801d354 <_dtoa_r+0xa54>
 801d34a:	9820      	ldr	r0, [sp, #128]	@ 0x80
 801d34c:	4301      	orrs	r1, r0
 801d34e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801d350:	4301      	orrs	r1, r0
 801d352:	d120      	bne.n	801d396 <_dtoa_r+0xa96>
 801d354:	2a00      	cmp	r2, #0
 801d356:	ddee      	ble.n	801d336 <_dtoa_r+0xa36>
 801d358:	9903      	ldr	r1, [sp, #12]
 801d35a:	9304      	str	r3, [sp, #16]
 801d35c:	2201      	movs	r2, #1
 801d35e:	4648      	mov	r0, r9
 801d360:	f000 fba4 	bl	801daac <__lshift>
 801d364:	4621      	mov	r1, r4
 801d366:	9003      	str	r0, [sp, #12]
 801d368:	f000 fc0c 	bl	801db84 <__mcmp>
 801d36c:	2800      	cmp	r0, #0
 801d36e:	9b04      	ldr	r3, [sp, #16]
 801d370:	dc02      	bgt.n	801d378 <_dtoa_r+0xa78>
 801d372:	d1e0      	bne.n	801d336 <_dtoa_r+0xa36>
 801d374:	07da      	lsls	r2, r3, #31
 801d376:	d5de      	bpl.n	801d336 <_dtoa_r+0xa36>
 801d378:	2b39      	cmp	r3, #57	@ 0x39
 801d37a:	d1da      	bne.n	801d332 <_dtoa_r+0xa32>
 801d37c:	2339      	movs	r3, #57	@ 0x39
 801d37e:	f88b 3000 	strb.w	r3, [fp]
 801d382:	4633      	mov	r3, r6
 801d384:	461e      	mov	r6, r3
 801d386:	3b01      	subs	r3, #1
 801d388:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801d38c:	2a39      	cmp	r2, #57	@ 0x39
 801d38e:	d04e      	beq.n	801d42e <_dtoa_r+0xb2e>
 801d390:	3201      	adds	r2, #1
 801d392:	701a      	strb	r2, [r3, #0]
 801d394:	e501      	b.n	801cd9a <_dtoa_r+0x49a>
 801d396:	2a00      	cmp	r2, #0
 801d398:	dd03      	ble.n	801d3a2 <_dtoa_r+0xaa2>
 801d39a:	2b39      	cmp	r3, #57	@ 0x39
 801d39c:	d0ee      	beq.n	801d37c <_dtoa_r+0xa7c>
 801d39e:	3301      	adds	r3, #1
 801d3a0:	e7c9      	b.n	801d336 <_dtoa_r+0xa36>
 801d3a2:	9a04      	ldr	r2, [sp, #16]
 801d3a4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801d3a6:	f802 3c01 	strb.w	r3, [r2, #-1]
 801d3aa:	428a      	cmp	r2, r1
 801d3ac:	d028      	beq.n	801d400 <_dtoa_r+0xb00>
 801d3ae:	9903      	ldr	r1, [sp, #12]
 801d3b0:	2300      	movs	r3, #0
 801d3b2:	220a      	movs	r2, #10
 801d3b4:	4648      	mov	r0, r9
 801d3b6:	f000 f9d5 	bl	801d764 <__multadd>
 801d3ba:	42af      	cmp	r7, r5
 801d3bc:	9003      	str	r0, [sp, #12]
 801d3be:	f04f 0300 	mov.w	r3, #0
 801d3c2:	f04f 020a 	mov.w	r2, #10
 801d3c6:	4639      	mov	r1, r7
 801d3c8:	4648      	mov	r0, r9
 801d3ca:	d107      	bne.n	801d3dc <_dtoa_r+0xadc>
 801d3cc:	f000 f9ca 	bl	801d764 <__multadd>
 801d3d0:	4607      	mov	r7, r0
 801d3d2:	4605      	mov	r5, r0
 801d3d4:	9b04      	ldr	r3, [sp, #16]
 801d3d6:	3301      	adds	r3, #1
 801d3d8:	9304      	str	r3, [sp, #16]
 801d3da:	e777      	b.n	801d2cc <_dtoa_r+0x9cc>
 801d3dc:	f000 f9c2 	bl	801d764 <__multadd>
 801d3e0:	4629      	mov	r1, r5
 801d3e2:	4607      	mov	r7, r0
 801d3e4:	2300      	movs	r3, #0
 801d3e6:	220a      	movs	r2, #10
 801d3e8:	4648      	mov	r0, r9
 801d3ea:	f000 f9bb 	bl	801d764 <__multadd>
 801d3ee:	4605      	mov	r5, r0
 801d3f0:	e7f0      	b.n	801d3d4 <_dtoa_r+0xad4>
 801d3f2:	f1bb 0f00 	cmp.w	fp, #0
 801d3f6:	bfcc      	ite	gt
 801d3f8:	465e      	movgt	r6, fp
 801d3fa:	2601      	movle	r6, #1
 801d3fc:	4456      	add	r6, sl
 801d3fe:	2700      	movs	r7, #0
 801d400:	9903      	ldr	r1, [sp, #12]
 801d402:	9304      	str	r3, [sp, #16]
 801d404:	2201      	movs	r2, #1
 801d406:	4648      	mov	r0, r9
 801d408:	f000 fb50 	bl	801daac <__lshift>
 801d40c:	4621      	mov	r1, r4
 801d40e:	9003      	str	r0, [sp, #12]
 801d410:	f000 fbb8 	bl	801db84 <__mcmp>
 801d414:	2800      	cmp	r0, #0
 801d416:	dcb4      	bgt.n	801d382 <_dtoa_r+0xa82>
 801d418:	d102      	bne.n	801d420 <_dtoa_r+0xb20>
 801d41a:	9b04      	ldr	r3, [sp, #16]
 801d41c:	07db      	lsls	r3, r3, #31
 801d41e:	d4b0      	bmi.n	801d382 <_dtoa_r+0xa82>
 801d420:	4633      	mov	r3, r6
 801d422:	461e      	mov	r6, r3
 801d424:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801d428:	2a30      	cmp	r2, #48	@ 0x30
 801d42a:	d0fa      	beq.n	801d422 <_dtoa_r+0xb22>
 801d42c:	e4b5      	b.n	801cd9a <_dtoa_r+0x49a>
 801d42e:	459a      	cmp	sl, r3
 801d430:	d1a8      	bne.n	801d384 <_dtoa_r+0xa84>
 801d432:	2331      	movs	r3, #49	@ 0x31
 801d434:	f108 0801 	add.w	r8, r8, #1
 801d438:	f88a 3000 	strb.w	r3, [sl]
 801d43c:	e4ad      	b.n	801cd9a <_dtoa_r+0x49a>
 801d43e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801d440:	f8df a058 	ldr.w	sl, [pc, #88]	@ 801d49c <_dtoa_r+0xb9c>
 801d444:	b11b      	cbz	r3, 801d44e <_dtoa_r+0xb4e>
 801d446:	f10a 0308 	add.w	r3, sl, #8
 801d44a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801d44c:	6013      	str	r3, [r2, #0]
 801d44e:	4650      	mov	r0, sl
 801d450:	b017      	add	sp, #92	@ 0x5c
 801d452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d456:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801d458:	2b01      	cmp	r3, #1
 801d45a:	f77f ae2e 	ble.w	801d0ba <_dtoa_r+0x7ba>
 801d45e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d460:	930a      	str	r3, [sp, #40]	@ 0x28
 801d462:	2001      	movs	r0, #1
 801d464:	e64d      	b.n	801d102 <_dtoa_r+0x802>
 801d466:	f1bb 0f00 	cmp.w	fp, #0
 801d46a:	f77f aed9 	ble.w	801d220 <_dtoa_r+0x920>
 801d46e:	4656      	mov	r6, sl
 801d470:	9803      	ldr	r0, [sp, #12]
 801d472:	4621      	mov	r1, r4
 801d474:	f7ff f9b9 	bl	801c7ea <quorem>
 801d478:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 801d47c:	f806 3b01 	strb.w	r3, [r6], #1
 801d480:	eba6 020a 	sub.w	r2, r6, sl
 801d484:	4593      	cmp	fp, r2
 801d486:	ddb4      	ble.n	801d3f2 <_dtoa_r+0xaf2>
 801d488:	9903      	ldr	r1, [sp, #12]
 801d48a:	2300      	movs	r3, #0
 801d48c:	220a      	movs	r2, #10
 801d48e:	4648      	mov	r0, r9
 801d490:	f000 f968 	bl	801d764 <__multadd>
 801d494:	9003      	str	r0, [sp, #12]
 801d496:	e7eb      	b.n	801d470 <_dtoa_r+0xb70>
 801d498:	0801f774 	.word	0x0801f774
 801d49c:	0801f6f8 	.word	0x0801f6f8

0801d4a0 <_free_r>:
 801d4a0:	b538      	push	{r3, r4, r5, lr}
 801d4a2:	4605      	mov	r5, r0
 801d4a4:	2900      	cmp	r1, #0
 801d4a6:	d041      	beq.n	801d52c <_free_r+0x8c>
 801d4a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d4ac:	1f0c      	subs	r4, r1, #4
 801d4ae:	2b00      	cmp	r3, #0
 801d4b0:	bfb8      	it	lt
 801d4b2:	18e4      	addlt	r4, r4, r3
 801d4b4:	f000 f8e8 	bl	801d688 <__malloc_lock>
 801d4b8:	4a1d      	ldr	r2, [pc, #116]	@ (801d530 <_free_r+0x90>)
 801d4ba:	6813      	ldr	r3, [r2, #0]
 801d4bc:	b933      	cbnz	r3, 801d4cc <_free_r+0x2c>
 801d4be:	6063      	str	r3, [r4, #4]
 801d4c0:	6014      	str	r4, [r2, #0]
 801d4c2:	4628      	mov	r0, r5
 801d4c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d4c8:	f000 b8e4 	b.w	801d694 <__malloc_unlock>
 801d4cc:	42a3      	cmp	r3, r4
 801d4ce:	d908      	bls.n	801d4e2 <_free_r+0x42>
 801d4d0:	6820      	ldr	r0, [r4, #0]
 801d4d2:	1821      	adds	r1, r4, r0
 801d4d4:	428b      	cmp	r3, r1
 801d4d6:	bf01      	itttt	eq
 801d4d8:	6819      	ldreq	r1, [r3, #0]
 801d4da:	685b      	ldreq	r3, [r3, #4]
 801d4dc:	1809      	addeq	r1, r1, r0
 801d4de:	6021      	streq	r1, [r4, #0]
 801d4e0:	e7ed      	b.n	801d4be <_free_r+0x1e>
 801d4e2:	461a      	mov	r2, r3
 801d4e4:	685b      	ldr	r3, [r3, #4]
 801d4e6:	b10b      	cbz	r3, 801d4ec <_free_r+0x4c>
 801d4e8:	42a3      	cmp	r3, r4
 801d4ea:	d9fa      	bls.n	801d4e2 <_free_r+0x42>
 801d4ec:	6811      	ldr	r1, [r2, #0]
 801d4ee:	1850      	adds	r0, r2, r1
 801d4f0:	42a0      	cmp	r0, r4
 801d4f2:	d10b      	bne.n	801d50c <_free_r+0x6c>
 801d4f4:	6820      	ldr	r0, [r4, #0]
 801d4f6:	4401      	add	r1, r0
 801d4f8:	1850      	adds	r0, r2, r1
 801d4fa:	4283      	cmp	r3, r0
 801d4fc:	6011      	str	r1, [r2, #0]
 801d4fe:	d1e0      	bne.n	801d4c2 <_free_r+0x22>
 801d500:	6818      	ldr	r0, [r3, #0]
 801d502:	685b      	ldr	r3, [r3, #4]
 801d504:	6053      	str	r3, [r2, #4]
 801d506:	4408      	add	r0, r1
 801d508:	6010      	str	r0, [r2, #0]
 801d50a:	e7da      	b.n	801d4c2 <_free_r+0x22>
 801d50c:	d902      	bls.n	801d514 <_free_r+0x74>
 801d50e:	230c      	movs	r3, #12
 801d510:	602b      	str	r3, [r5, #0]
 801d512:	e7d6      	b.n	801d4c2 <_free_r+0x22>
 801d514:	6820      	ldr	r0, [r4, #0]
 801d516:	1821      	adds	r1, r4, r0
 801d518:	428b      	cmp	r3, r1
 801d51a:	bf04      	itt	eq
 801d51c:	6819      	ldreq	r1, [r3, #0]
 801d51e:	685b      	ldreq	r3, [r3, #4]
 801d520:	6063      	str	r3, [r4, #4]
 801d522:	bf04      	itt	eq
 801d524:	1809      	addeq	r1, r1, r0
 801d526:	6021      	streq	r1, [r4, #0]
 801d528:	6054      	str	r4, [r2, #4]
 801d52a:	e7ca      	b.n	801d4c2 <_free_r+0x22>
 801d52c:	bd38      	pop	{r3, r4, r5, pc}
 801d52e:	bf00      	nop
 801d530:	20002508 	.word	0x20002508

0801d534 <malloc>:
 801d534:	4b02      	ldr	r3, [pc, #8]	@ (801d540 <malloc+0xc>)
 801d536:	4601      	mov	r1, r0
 801d538:	6818      	ldr	r0, [r3, #0]
 801d53a:	f000 b825 	b.w	801d588 <_malloc_r>
 801d53e:	bf00      	nop
 801d540:	2000014c 	.word	0x2000014c

0801d544 <sbrk_aligned>:
 801d544:	b570      	push	{r4, r5, r6, lr}
 801d546:	4e0f      	ldr	r6, [pc, #60]	@ (801d584 <sbrk_aligned+0x40>)
 801d548:	460c      	mov	r4, r1
 801d54a:	6831      	ldr	r1, [r6, #0]
 801d54c:	4605      	mov	r5, r0
 801d54e:	b911      	cbnz	r1, 801d556 <sbrk_aligned+0x12>
 801d550:	f000 fcc6 	bl	801dee0 <_sbrk_r>
 801d554:	6030      	str	r0, [r6, #0]
 801d556:	4621      	mov	r1, r4
 801d558:	4628      	mov	r0, r5
 801d55a:	f000 fcc1 	bl	801dee0 <_sbrk_r>
 801d55e:	1c43      	adds	r3, r0, #1
 801d560:	d103      	bne.n	801d56a <sbrk_aligned+0x26>
 801d562:	f04f 34ff 	mov.w	r4, #4294967295
 801d566:	4620      	mov	r0, r4
 801d568:	bd70      	pop	{r4, r5, r6, pc}
 801d56a:	1cc4      	adds	r4, r0, #3
 801d56c:	f024 0403 	bic.w	r4, r4, #3
 801d570:	42a0      	cmp	r0, r4
 801d572:	d0f8      	beq.n	801d566 <sbrk_aligned+0x22>
 801d574:	1a21      	subs	r1, r4, r0
 801d576:	4628      	mov	r0, r5
 801d578:	f000 fcb2 	bl	801dee0 <_sbrk_r>
 801d57c:	3001      	adds	r0, #1
 801d57e:	d1f2      	bne.n	801d566 <sbrk_aligned+0x22>
 801d580:	e7ef      	b.n	801d562 <sbrk_aligned+0x1e>
 801d582:	bf00      	nop
 801d584:	20002504 	.word	0x20002504

0801d588 <_malloc_r>:
 801d588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d58c:	1ccd      	adds	r5, r1, #3
 801d58e:	f025 0503 	bic.w	r5, r5, #3
 801d592:	3508      	adds	r5, #8
 801d594:	2d0c      	cmp	r5, #12
 801d596:	bf38      	it	cc
 801d598:	250c      	movcc	r5, #12
 801d59a:	2d00      	cmp	r5, #0
 801d59c:	4606      	mov	r6, r0
 801d59e:	db01      	blt.n	801d5a4 <_malloc_r+0x1c>
 801d5a0:	42a9      	cmp	r1, r5
 801d5a2:	d904      	bls.n	801d5ae <_malloc_r+0x26>
 801d5a4:	230c      	movs	r3, #12
 801d5a6:	6033      	str	r3, [r6, #0]
 801d5a8:	2000      	movs	r0, #0
 801d5aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d5ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801d684 <_malloc_r+0xfc>
 801d5b2:	f000 f869 	bl	801d688 <__malloc_lock>
 801d5b6:	f8d8 3000 	ldr.w	r3, [r8]
 801d5ba:	461c      	mov	r4, r3
 801d5bc:	bb44      	cbnz	r4, 801d610 <_malloc_r+0x88>
 801d5be:	4629      	mov	r1, r5
 801d5c0:	4630      	mov	r0, r6
 801d5c2:	f7ff ffbf 	bl	801d544 <sbrk_aligned>
 801d5c6:	1c43      	adds	r3, r0, #1
 801d5c8:	4604      	mov	r4, r0
 801d5ca:	d158      	bne.n	801d67e <_malloc_r+0xf6>
 801d5cc:	f8d8 4000 	ldr.w	r4, [r8]
 801d5d0:	4627      	mov	r7, r4
 801d5d2:	2f00      	cmp	r7, #0
 801d5d4:	d143      	bne.n	801d65e <_malloc_r+0xd6>
 801d5d6:	2c00      	cmp	r4, #0
 801d5d8:	d04b      	beq.n	801d672 <_malloc_r+0xea>
 801d5da:	6823      	ldr	r3, [r4, #0]
 801d5dc:	4639      	mov	r1, r7
 801d5de:	4630      	mov	r0, r6
 801d5e0:	eb04 0903 	add.w	r9, r4, r3
 801d5e4:	f000 fc7c 	bl	801dee0 <_sbrk_r>
 801d5e8:	4581      	cmp	r9, r0
 801d5ea:	d142      	bne.n	801d672 <_malloc_r+0xea>
 801d5ec:	6821      	ldr	r1, [r4, #0]
 801d5ee:	1a6d      	subs	r5, r5, r1
 801d5f0:	4629      	mov	r1, r5
 801d5f2:	4630      	mov	r0, r6
 801d5f4:	f7ff ffa6 	bl	801d544 <sbrk_aligned>
 801d5f8:	3001      	adds	r0, #1
 801d5fa:	d03a      	beq.n	801d672 <_malloc_r+0xea>
 801d5fc:	6823      	ldr	r3, [r4, #0]
 801d5fe:	442b      	add	r3, r5
 801d600:	6023      	str	r3, [r4, #0]
 801d602:	f8d8 3000 	ldr.w	r3, [r8]
 801d606:	685a      	ldr	r2, [r3, #4]
 801d608:	bb62      	cbnz	r2, 801d664 <_malloc_r+0xdc>
 801d60a:	f8c8 7000 	str.w	r7, [r8]
 801d60e:	e00f      	b.n	801d630 <_malloc_r+0xa8>
 801d610:	6822      	ldr	r2, [r4, #0]
 801d612:	1b52      	subs	r2, r2, r5
 801d614:	d420      	bmi.n	801d658 <_malloc_r+0xd0>
 801d616:	2a0b      	cmp	r2, #11
 801d618:	d917      	bls.n	801d64a <_malloc_r+0xc2>
 801d61a:	1961      	adds	r1, r4, r5
 801d61c:	42a3      	cmp	r3, r4
 801d61e:	6025      	str	r5, [r4, #0]
 801d620:	bf18      	it	ne
 801d622:	6059      	strne	r1, [r3, #4]
 801d624:	6863      	ldr	r3, [r4, #4]
 801d626:	bf08      	it	eq
 801d628:	f8c8 1000 	streq.w	r1, [r8]
 801d62c:	5162      	str	r2, [r4, r5]
 801d62e:	604b      	str	r3, [r1, #4]
 801d630:	4630      	mov	r0, r6
 801d632:	f000 f82f 	bl	801d694 <__malloc_unlock>
 801d636:	f104 000b 	add.w	r0, r4, #11
 801d63a:	1d23      	adds	r3, r4, #4
 801d63c:	f020 0007 	bic.w	r0, r0, #7
 801d640:	1ac2      	subs	r2, r0, r3
 801d642:	bf1c      	itt	ne
 801d644:	1a1b      	subne	r3, r3, r0
 801d646:	50a3      	strne	r3, [r4, r2]
 801d648:	e7af      	b.n	801d5aa <_malloc_r+0x22>
 801d64a:	6862      	ldr	r2, [r4, #4]
 801d64c:	42a3      	cmp	r3, r4
 801d64e:	bf0c      	ite	eq
 801d650:	f8c8 2000 	streq.w	r2, [r8]
 801d654:	605a      	strne	r2, [r3, #4]
 801d656:	e7eb      	b.n	801d630 <_malloc_r+0xa8>
 801d658:	4623      	mov	r3, r4
 801d65a:	6864      	ldr	r4, [r4, #4]
 801d65c:	e7ae      	b.n	801d5bc <_malloc_r+0x34>
 801d65e:	463c      	mov	r4, r7
 801d660:	687f      	ldr	r7, [r7, #4]
 801d662:	e7b6      	b.n	801d5d2 <_malloc_r+0x4a>
 801d664:	461a      	mov	r2, r3
 801d666:	685b      	ldr	r3, [r3, #4]
 801d668:	42a3      	cmp	r3, r4
 801d66a:	d1fb      	bne.n	801d664 <_malloc_r+0xdc>
 801d66c:	2300      	movs	r3, #0
 801d66e:	6053      	str	r3, [r2, #4]
 801d670:	e7de      	b.n	801d630 <_malloc_r+0xa8>
 801d672:	230c      	movs	r3, #12
 801d674:	6033      	str	r3, [r6, #0]
 801d676:	4630      	mov	r0, r6
 801d678:	f000 f80c 	bl	801d694 <__malloc_unlock>
 801d67c:	e794      	b.n	801d5a8 <_malloc_r+0x20>
 801d67e:	6005      	str	r5, [r0, #0]
 801d680:	e7d6      	b.n	801d630 <_malloc_r+0xa8>
 801d682:	bf00      	nop
 801d684:	20002508 	.word	0x20002508

0801d688 <__malloc_lock>:
 801d688:	4801      	ldr	r0, [pc, #4]	@ (801d690 <__malloc_lock+0x8>)
 801d68a:	f7ff b8ac 	b.w	801c7e6 <__retarget_lock_acquire_recursive>
 801d68e:	bf00      	nop
 801d690:	20002500 	.word	0x20002500

0801d694 <__malloc_unlock>:
 801d694:	4801      	ldr	r0, [pc, #4]	@ (801d69c <__malloc_unlock+0x8>)
 801d696:	f7ff b8a7 	b.w	801c7e8 <__retarget_lock_release_recursive>
 801d69a:	bf00      	nop
 801d69c:	20002500 	.word	0x20002500

0801d6a0 <_Balloc>:
 801d6a0:	b570      	push	{r4, r5, r6, lr}
 801d6a2:	69c6      	ldr	r6, [r0, #28]
 801d6a4:	4604      	mov	r4, r0
 801d6a6:	460d      	mov	r5, r1
 801d6a8:	b976      	cbnz	r6, 801d6c8 <_Balloc+0x28>
 801d6aa:	2010      	movs	r0, #16
 801d6ac:	f7ff ff42 	bl	801d534 <malloc>
 801d6b0:	4602      	mov	r2, r0
 801d6b2:	61e0      	str	r0, [r4, #28]
 801d6b4:	b920      	cbnz	r0, 801d6c0 <_Balloc+0x20>
 801d6b6:	4b18      	ldr	r3, [pc, #96]	@ (801d718 <_Balloc+0x78>)
 801d6b8:	4818      	ldr	r0, [pc, #96]	@ (801d71c <_Balloc+0x7c>)
 801d6ba:	216b      	movs	r1, #107	@ 0x6b
 801d6bc:	f000 fc2e 	bl	801df1c <__assert_func>
 801d6c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801d6c4:	6006      	str	r6, [r0, #0]
 801d6c6:	60c6      	str	r6, [r0, #12]
 801d6c8:	69e6      	ldr	r6, [r4, #28]
 801d6ca:	68f3      	ldr	r3, [r6, #12]
 801d6cc:	b183      	cbz	r3, 801d6f0 <_Balloc+0x50>
 801d6ce:	69e3      	ldr	r3, [r4, #28]
 801d6d0:	68db      	ldr	r3, [r3, #12]
 801d6d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801d6d6:	b9b8      	cbnz	r0, 801d708 <_Balloc+0x68>
 801d6d8:	2101      	movs	r1, #1
 801d6da:	fa01 f605 	lsl.w	r6, r1, r5
 801d6de:	1d72      	adds	r2, r6, #5
 801d6e0:	0092      	lsls	r2, r2, #2
 801d6e2:	4620      	mov	r0, r4
 801d6e4:	f000 fc38 	bl	801df58 <_calloc_r>
 801d6e8:	b160      	cbz	r0, 801d704 <_Balloc+0x64>
 801d6ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801d6ee:	e00e      	b.n	801d70e <_Balloc+0x6e>
 801d6f0:	2221      	movs	r2, #33	@ 0x21
 801d6f2:	2104      	movs	r1, #4
 801d6f4:	4620      	mov	r0, r4
 801d6f6:	f000 fc2f 	bl	801df58 <_calloc_r>
 801d6fa:	69e3      	ldr	r3, [r4, #28]
 801d6fc:	60f0      	str	r0, [r6, #12]
 801d6fe:	68db      	ldr	r3, [r3, #12]
 801d700:	2b00      	cmp	r3, #0
 801d702:	d1e4      	bne.n	801d6ce <_Balloc+0x2e>
 801d704:	2000      	movs	r0, #0
 801d706:	bd70      	pop	{r4, r5, r6, pc}
 801d708:	6802      	ldr	r2, [r0, #0]
 801d70a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801d70e:	2300      	movs	r3, #0
 801d710:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801d714:	e7f7      	b.n	801d706 <_Balloc+0x66>
 801d716:	bf00      	nop
 801d718:	0801f705 	.word	0x0801f705
 801d71c:	0801f785 	.word	0x0801f785

0801d720 <_Bfree>:
 801d720:	b570      	push	{r4, r5, r6, lr}
 801d722:	69c6      	ldr	r6, [r0, #28]
 801d724:	4605      	mov	r5, r0
 801d726:	460c      	mov	r4, r1
 801d728:	b976      	cbnz	r6, 801d748 <_Bfree+0x28>
 801d72a:	2010      	movs	r0, #16
 801d72c:	f7ff ff02 	bl	801d534 <malloc>
 801d730:	4602      	mov	r2, r0
 801d732:	61e8      	str	r0, [r5, #28]
 801d734:	b920      	cbnz	r0, 801d740 <_Bfree+0x20>
 801d736:	4b09      	ldr	r3, [pc, #36]	@ (801d75c <_Bfree+0x3c>)
 801d738:	4809      	ldr	r0, [pc, #36]	@ (801d760 <_Bfree+0x40>)
 801d73a:	218f      	movs	r1, #143	@ 0x8f
 801d73c:	f000 fbee 	bl	801df1c <__assert_func>
 801d740:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801d744:	6006      	str	r6, [r0, #0]
 801d746:	60c6      	str	r6, [r0, #12]
 801d748:	b13c      	cbz	r4, 801d75a <_Bfree+0x3a>
 801d74a:	69eb      	ldr	r3, [r5, #28]
 801d74c:	6862      	ldr	r2, [r4, #4]
 801d74e:	68db      	ldr	r3, [r3, #12]
 801d750:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801d754:	6021      	str	r1, [r4, #0]
 801d756:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801d75a:	bd70      	pop	{r4, r5, r6, pc}
 801d75c:	0801f705 	.word	0x0801f705
 801d760:	0801f785 	.word	0x0801f785

0801d764 <__multadd>:
 801d764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d768:	690d      	ldr	r5, [r1, #16]
 801d76a:	4607      	mov	r7, r0
 801d76c:	460c      	mov	r4, r1
 801d76e:	461e      	mov	r6, r3
 801d770:	f101 0c14 	add.w	ip, r1, #20
 801d774:	2000      	movs	r0, #0
 801d776:	f8dc 3000 	ldr.w	r3, [ip]
 801d77a:	b299      	uxth	r1, r3
 801d77c:	fb02 6101 	mla	r1, r2, r1, r6
 801d780:	0c1e      	lsrs	r6, r3, #16
 801d782:	0c0b      	lsrs	r3, r1, #16
 801d784:	fb02 3306 	mla	r3, r2, r6, r3
 801d788:	b289      	uxth	r1, r1
 801d78a:	3001      	adds	r0, #1
 801d78c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801d790:	4285      	cmp	r5, r0
 801d792:	f84c 1b04 	str.w	r1, [ip], #4
 801d796:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801d79a:	dcec      	bgt.n	801d776 <__multadd+0x12>
 801d79c:	b30e      	cbz	r6, 801d7e2 <__multadd+0x7e>
 801d79e:	68a3      	ldr	r3, [r4, #8]
 801d7a0:	42ab      	cmp	r3, r5
 801d7a2:	dc19      	bgt.n	801d7d8 <__multadd+0x74>
 801d7a4:	6861      	ldr	r1, [r4, #4]
 801d7a6:	4638      	mov	r0, r7
 801d7a8:	3101      	adds	r1, #1
 801d7aa:	f7ff ff79 	bl	801d6a0 <_Balloc>
 801d7ae:	4680      	mov	r8, r0
 801d7b0:	b928      	cbnz	r0, 801d7be <__multadd+0x5a>
 801d7b2:	4602      	mov	r2, r0
 801d7b4:	4b0c      	ldr	r3, [pc, #48]	@ (801d7e8 <__multadd+0x84>)
 801d7b6:	480d      	ldr	r0, [pc, #52]	@ (801d7ec <__multadd+0x88>)
 801d7b8:	21ba      	movs	r1, #186	@ 0xba
 801d7ba:	f000 fbaf 	bl	801df1c <__assert_func>
 801d7be:	6922      	ldr	r2, [r4, #16]
 801d7c0:	3202      	adds	r2, #2
 801d7c2:	f104 010c 	add.w	r1, r4, #12
 801d7c6:	0092      	lsls	r2, r2, #2
 801d7c8:	300c      	adds	r0, #12
 801d7ca:	f000 fb99 	bl	801df00 <memcpy>
 801d7ce:	4621      	mov	r1, r4
 801d7d0:	4638      	mov	r0, r7
 801d7d2:	f7ff ffa5 	bl	801d720 <_Bfree>
 801d7d6:	4644      	mov	r4, r8
 801d7d8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801d7dc:	3501      	adds	r5, #1
 801d7de:	615e      	str	r6, [r3, #20]
 801d7e0:	6125      	str	r5, [r4, #16]
 801d7e2:	4620      	mov	r0, r4
 801d7e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d7e8:	0801f774 	.word	0x0801f774
 801d7ec:	0801f785 	.word	0x0801f785

0801d7f0 <__hi0bits>:
 801d7f0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801d7f4:	4603      	mov	r3, r0
 801d7f6:	bf36      	itet	cc
 801d7f8:	0403      	lslcc	r3, r0, #16
 801d7fa:	2000      	movcs	r0, #0
 801d7fc:	2010      	movcc	r0, #16
 801d7fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801d802:	bf3c      	itt	cc
 801d804:	021b      	lslcc	r3, r3, #8
 801d806:	3008      	addcc	r0, #8
 801d808:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801d80c:	bf3c      	itt	cc
 801d80e:	011b      	lslcc	r3, r3, #4
 801d810:	3004      	addcc	r0, #4
 801d812:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801d816:	bf3c      	itt	cc
 801d818:	009b      	lslcc	r3, r3, #2
 801d81a:	3002      	addcc	r0, #2
 801d81c:	2b00      	cmp	r3, #0
 801d81e:	db05      	blt.n	801d82c <__hi0bits+0x3c>
 801d820:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801d824:	f100 0001 	add.w	r0, r0, #1
 801d828:	bf08      	it	eq
 801d82a:	2020      	moveq	r0, #32
 801d82c:	4770      	bx	lr

0801d82e <__lo0bits>:
 801d82e:	6803      	ldr	r3, [r0, #0]
 801d830:	4602      	mov	r2, r0
 801d832:	f013 0007 	ands.w	r0, r3, #7
 801d836:	d00b      	beq.n	801d850 <__lo0bits+0x22>
 801d838:	07d9      	lsls	r1, r3, #31
 801d83a:	d421      	bmi.n	801d880 <__lo0bits+0x52>
 801d83c:	0798      	lsls	r0, r3, #30
 801d83e:	bf49      	itett	mi
 801d840:	085b      	lsrmi	r3, r3, #1
 801d842:	089b      	lsrpl	r3, r3, #2
 801d844:	2001      	movmi	r0, #1
 801d846:	6013      	strmi	r3, [r2, #0]
 801d848:	bf5c      	itt	pl
 801d84a:	6013      	strpl	r3, [r2, #0]
 801d84c:	2002      	movpl	r0, #2
 801d84e:	4770      	bx	lr
 801d850:	b299      	uxth	r1, r3
 801d852:	b909      	cbnz	r1, 801d858 <__lo0bits+0x2a>
 801d854:	0c1b      	lsrs	r3, r3, #16
 801d856:	2010      	movs	r0, #16
 801d858:	b2d9      	uxtb	r1, r3
 801d85a:	b909      	cbnz	r1, 801d860 <__lo0bits+0x32>
 801d85c:	3008      	adds	r0, #8
 801d85e:	0a1b      	lsrs	r3, r3, #8
 801d860:	0719      	lsls	r1, r3, #28
 801d862:	bf04      	itt	eq
 801d864:	091b      	lsreq	r3, r3, #4
 801d866:	3004      	addeq	r0, #4
 801d868:	0799      	lsls	r1, r3, #30
 801d86a:	bf04      	itt	eq
 801d86c:	089b      	lsreq	r3, r3, #2
 801d86e:	3002      	addeq	r0, #2
 801d870:	07d9      	lsls	r1, r3, #31
 801d872:	d403      	bmi.n	801d87c <__lo0bits+0x4e>
 801d874:	085b      	lsrs	r3, r3, #1
 801d876:	f100 0001 	add.w	r0, r0, #1
 801d87a:	d003      	beq.n	801d884 <__lo0bits+0x56>
 801d87c:	6013      	str	r3, [r2, #0]
 801d87e:	4770      	bx	lr
 801d880:	2000      	movs	r0, #0
 801d882:	4770      	bx	lr
 801d884:	2020      	movs	r0, #32
 801d886:	4770      	bx	lr

0801d888 <__i2b>:
 801d888:	b510      	push	{r4, lr}
 801d88a:	460c      	mov	r4, r1
 801d88c:	2101      	movs	r1, #1
 801d88e:	f7ff ff07 	bl	801d6a0 <_Balloc>
 801d892:	4602      	mov	r2, r0
 801d894:	b928      	cbnz	r0, 801d8a2 <__i2b+0x1a>
 801d896:	4b05      	ldr	r3, [pc, #20]	@ (801d8ac <__i2b+0x24>)
 801d898:	4805      	ldr	r0, [pc, #20]	@ (801d8b0 <__i2b+0x28>)
 801d89a:	f240 1145 	movw	r1, #325	@ 0x145
 801d89e:	f000 fb3d 	bl	801df1c <__assert_func>
 801d8a2:	2301      	movs	r3, #1
 801d8a4:	6144      	str	r4, [r0, #20]
 801d8a6:	6103      	str	r3, [r0, #16]
 801d8a8:	bd10      	pop	{r4, pc}
 801d8aa:	bf00      	nop
 801d8ac:	0801f774 	.word	0x0801f774
 801d8b0:	0801f785 	.word	0x0801f785

0801d8b4 <__multiply>:
 801d8b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d8b8:	4617      	mov	r7, r2
 801d8ba:	690a      	ldr	r2, [r1, #16]
 801d8bc:	693b      	ldr	r3, [r7, #16]
 801d8be:	429a      	cmp	r2, r3
 801d8c0:	bfa8      	it	ge
 801d8c2:	463b      	movge	r3, r7
 801d8c4:	4689      	mov	r9, r1
 801d8c6:	bfa4      	itt	ge
 801d8c8:	460f      	movge	r7, r1
 801d8ca:	4699      	movge	r9, r3
 801d8cc:	693d      	ldr	r5, [r7, #16]
 801d8ce:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801d8d2:	68bb      	ldr	r3, [r7, #8]
 801d8d4:	6879      	ldr	r1, [r7, #4]
 801d8d6:	eb05 060a 	add.w	r6, r5, sl
 801d8da:	42b3      	cmp	r3, r6
 801d8dc:	b085      	sub	sp, #20
 801d8de:	bfb8      	it	lt
 801d8e0:	3101      	addlt	r1, #1
 801d8e2:	f7ff fedd 	bl	801d6a0 <_Balloc>
 801d8e6:	b930      	cbnz	r0, 801d8f6 <__multiply+0x42>
 801d8e8:	4602      	mov	r2, r0
 801d8ea:	4b41      	ldr	r3, [pc, #260]	@ (801d9f0 <__multiply+0x13c>)
 801d8ec:	4841      	ldr	r0, [pc, #260]	@ (801d9f4 <__multiply+0x140>)
 801d8ee:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801d8f2:	f000 fb13 	bl	801df1c <__assert_func>
 801d8f6:	f100 0414 	add.w	r4, r0, #20
 801d8fa:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 801d8fe:	4623      	mov	r3, r4
 801d900:	2200      	movs	r2, #0
 801d902:	4573      	cmp	r3, lr
 801d904:	d320      	bcc.n	801d948 <__multiply+0x94>
 801d906:	f107 0814 	add.w	r8, r7, #20
 801d90a:	f109 0114 	add.w	r1, r9, #20
 801d90e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 801d912:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 801d916:	9302      	str	r3, [sp, #8]
 801d918:	1beb      	subs	r3, r5, r7
 801d91a:	3b15      	subs	r3, #21
 801d91c:	f023 0303 	bic.w	r3, r3, #3
 801d920:	3304      	adds	r3, #4
 801d922:	3715      	adds	r7, #21
 801d924:	42bd      	cmp	r5, r7
 801d926:	bf38      	it	cc
 801d928:	2304      	movcc	r3, #4
 801d92a:	9301      	str	r3, [sp, #4]
 801d92c:	9b02      	ldr	r3, [sp, #8]
 801d92e:	9103      	str	r1, [sp, #12]
 801d930:	428b      	cmp	r3, r1
 801d932:	d80c      	bhi.n	801d94e <__multiply+0x9a>
 801d934:	2e00      	cmp	r6, #0
 801d936:	dd03      	ble.n	801d940 <__multiply+0x8c>
 801d938:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801d93c:	2b00      	cmp	r3, #0
 801d93e:	d055      	beq.n	801d9ec <__multiply+0x138>
 801d940:	6106      	str	r6, [r0, #16]
 801d942:	b005      	add	sp, #20
 801d944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d948:	f843 2b04 	str.w	r2, [r3], #4
 801d94c:	e7d9      	b.n	801d902 <__multiply+0x4e>
 801d94e:	f8b1 a000 	ldrh.w	sl, [r1]
 801d952:	f1ba 0f00 	cmp.w	sl, #0
 801d956:	d01f      	beq.n	801d998 <__multiply+0xe4>
 801d958:	46c4      	mov	ip, r8
 801d95a:	46a1      	mov	r9, r4
 801d95c:	2700      	movs	r7, #0
 801d95e:	f85c 2b04 	ldr.w	r2, [ip], #4
 801d962:	f8d9 3000 	ldr.w	r3, [r9]
 801d966:	fa1f fb82 	uxth.w	fp, r2
 801d96a:	b29b      	uxth	r3, r3
 801d96c:	fb0a 330b 	mla	r3, sl, fp, r3
 801d970:	443b      	add	r3, r7
 801d972:	f8d9 7000 	ldr.w	r7, [r9]
 801d976:	0c12      	lsrs	r2, r2, #16
 801d978:	0c3f      	lsrs	r7, r7, #16
 801d97a:	fb0a 7202 	mla	r2, sl, r2, r7
 801d97e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 801d982:	b29b      	uxth	r3, r3
 801d984:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801d988:	4565      	cmp	r5, ip
 801d98a:	f849 3b04 	str.w	r3, [r9], #4
 801d98e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 801d992:	d8e4      	bhi.n	801d95e <__multiply+0xaa>
 801d994:	9b01      	ldr	r3, [sp, #4]
 801d996:	50e7      	str	r7, [r4, r3]
 801d998:	9b03      	ldr	r3, [sp, #12]
 801d99a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801d99e:	3104      	adds	r1, #4
 801d9a0:	f1b9 0f00 	cmp.w	r9, #0
 801d9a4:	d020      	beq.n	801d9e8 <__multiply+0x134>
 801d9a6:	6823      	ldr	r3, [r4, #0]
 801d9a8:	4647      	mov	r7, r8
 801d9aa:	46a4      	mov	ip, r4
 801d9ac:	f04f 0a00 	mov.w	sl, #0
 801d9b0:	f8b7 b000 	ldrh.w	fp, [r7]
 801d9b4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 801d9b8:	fb09 220b 	mla	r2, r9, fp, r2
 801d9bc:	4452      	add	r2, sl
 801d9be:	b29b      	uxth	r3, r3
 801d9c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801d9c4:	f84c 3b04 	str.w	r3, [ip], #4
 801d9c8:	f857 3b04 	ldr.w	r3, [r7], #4
 801d9cc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801d9d0:	f8bc 3000 	ldrh.w	r3, [ip]
 801d9d4:	fb09 330a 	mla	r3, r9, sl, r3
 801d9d8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 801d9dc:	42bd      	cmp	r5, r7
 801d9de:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801d9e2:	d8e5      	bhi.n	801d9b0 <__multiply+0xfc>
 801d9e4:	9a01      	ldr	r2, [sp, #4]
 801d9e6:	50a3      	str	r3, [r4, r2]
 801d9e8:	3404      	adds	r4, #4
 801d9ea:	e79f      	b.n	801d92c <__multiply+0x78>
 801d9ec:	3e01      	subs	r6, #1
 801d9ee:	e7a1      	b.n	801d934 <__multiply+0x80>
 801d9f0:	0801f774 	.word	0x0801f774
 801d9f4:	0801f785 	.word	0x0801f785

0801d9f8 <__pow5mult>:
 801d9f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d9fc:	4615      	mov	r5, r2
 801d9fe:	f012 0203 	ands.w	r2, r2, #3
 801da02:	4607      	mov	r7, r0
 801da04:	460e      	mov	r6, r1
 801da06:	d007      	beq.n	801da18 <__pow5mult+0x20>
 801da08:	4c25      	ldr	r4, [pc, #148]	@ (801daa0 <__pow5mult+0xa8>)
 801da0a:	3a01      	subs	r2, #1
 801da0c:	2300      	movs	r3, #0
 801da0e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801da12:	f7ff fea7 	bl	801d764 <__multadd>
 801da16:	4606      	mov	r6, r0
 801da18:	10ad      	asrs	r5, r5, #2
 801da1a:	d03d      	beq.n	801da98 <__pow5mult+0xa0>
 801da1c:	69fc      	ldr	r4, [r7, #28]
 801da1e:	b97c      	cbnz	r4, 801da40 <__pow5mult+0x48>
 801da20:	2010      	movs	r0, #16
 801da22:	f7ff fd87 	bl	801d534 <malloc>
 801da26:	4602      	mov	r2, r0
 801da28:	61f8      	str	r0, [r7, #28]
 801da2a:	b928      	cbnz	r0, 801da38 <__pow5mult+0x40>
 801da2c:	4b1d      	ldr	r3, [pc, #116]	@ (801daa4 <__pow5mult+0xac>)
 801da2e:	481e      	ldr	r0, [pc, #120]	@ (801daa8 <__pow5mult+0xb0>)
 801da30:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801da34:	f000 fa72 	bl	801df1c <__assert_func>
 801da38:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801da3c:	6004      	str	r4, [r0, #0]
 801da3e:	60c4      	str	r4, [r0, #12]
 801da40:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801da44:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801da48:	b94c      	cbnz	r4, 801da5e <__pow5mult+0x66>
 801da4a:	f240 2171 	movw	r1, #625	@ 0x271
 801da4e:	4638      	mov	r0, r7
 801da50:	f7ff ff1a 	bl	801d888 <__i2b>
 801da54:	2300      	movs	r3, #0
 801da56:	f8c8 0008 	str.w	r0, [r8, #8]
 801da5a:	4604      	mov	r4, r0
 801da5c:	6003      	str	r3, [r0, #0]
 801da5e:	f04f 0900 	mov.w	r9, #0
 801da62:	07eb      	lsls	r3, r5, #31
 801da64:	d50a      	bpl.n	801da7c <__pow5mult+0x84>
 801da66:	4631      	mov	r1, r6
 801da68:	4622      	mov	r2, r4
 801da6a:	4638      	mov	r0, r7
 801da6c:	f7ff ff22 	bl	801d8b4 <__multiply>
 801da70:	4631      	mov	r1, r6
 801da72:	4680      	mov	r8, r0
 801da74:	4638      	mov	r0, r7
 801da76:	f7ff fe53 	bl	801d720 <_Bfree>
 801da7a:	4646      	mov	r6, r8
 801da7c:	106d      	asrs	r5, r5, #1
 801da7e:	d00b      	beq.n	801da98 <__pow5mult+0xa0>
 801da80:	6820      	ldr	r0, [r4, #0]
 801da82:	b938      	cbnz	r0, 801da94 <__pow5mult+0x9c>
 801da84:	4622      	mov	r2, r4
 801da86:	4621      	mov	r1, r4
 801da88:	4638      	mov	r0, r7
 801da8a:	f7ff ff13 	bl	801d8b4 <__multiply>
 801da8e:	6020      	str	r0, [r4, #0]
 801da90:	f8c0 9000 	str.w	r9, [r0]
 801da94:	4604      	mov	r4, r0
 801da96:	e7e4      	b.n	801da62 <__pow5mult+0x6a>
 801da98:	4630      	mov	r0, r6
 801da9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801da9e:	bf00      	nop
 801daa0:	0801f838 	.word	0x0801f838
 801daa4:	0801f705 	.word	0x0801f705
 801daa8:	0801f785 	.word	0x0801f785

0801daac <__lshift>:
 801daac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801dab0:	460c      	mov	r4, r1
 801dab2:	6849      	ldr	r1, [r1, #4]
 801dab4:	6923      	ldr	r3, [r4, #16]
 801dab6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801daba:	68a3      	ldr	r3, [r4, #8]
 801dabc:	4607      	mov	r7, r0
 801dabe:	4691      	mov	r9, r2
 801dac0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801dac4:	f108 0601 	add.w	r6, r8, #1
 801dac8:	42b3      	cmp	r3, r6
 801daca:	db0b      	blt.n	801dae4 <__lshift+0x38>
 801dacc:	4638      	mov	r0, r7
 801dace:	f7ff fde7 	bl	801d6a0 <_Balloc>
 801dad2:	4605      	mov	r5, r0
 801dad4:	b948      	cbnz	r0, 801daea <__lshift+0x3e>
 801dad6:	4602      	mov	r2, r0
 801dad8:	4b28      	ldr	r3, [pc, #160]	@ (801db7c <__lshift+0xd0>)
 801dada:	4829      	ldr	r0, [pc, #164]	@ (801db80 <__lshift+0xd4>)
 801dadc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801dae0:	f000 fa1c 	bl	801df1c <__assert_func>
 801dae4:	3101      	adds	r1, #1
 801dae6:	005b      	lsls	r3, r3, #1
 801dae8:	e7ee      	b.n	801dac8 <__lshift+0x1c>
 801daea:	2300      	movs	r3, #0
 801daec:	f100 0114 	add.w	r1, r0, #20
 801daf0:	f100 0210 	add.w	r2, r0, #16
 801daf4:	4618      	mov	r0, r3
 801daf6:	4553      	cmp	r3, sl
 801daf8:	db33      	blt.n	801db62 <__lshift+0xb6>
 801dafa:	6920      	ldr	r0, [r4, #16]
 801dafc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801db00:	f104 0314 	add.w	r3, r4, #20
 801db04:	f019 091f 	ands.w	r9, r9, #31
 801db08:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801db0c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801db10:	d02b      	beq.n	801db6a <__lshift+0xbe>
 801db12:	f1c9 0e20 	rsb	lr, r9, #32
 801db16:	468a      	mov	sl, r1
 801db18:	2200      	movs	r2, #0
 801db1a:	6818      	ldr	r0, [r3, #0]
 801db1c:	fa00 f009 	lsl.w	r0, r0, r9
 801db20:	4310      	orrs	r0, r2
 801db22:	f84a 0b04 	str.w	r0, [sl], #4
 801db26:	f853 2b04 	ldr.w	r2, [r3], #4
 801db2a:	459c      	cmp	ip, r3
 801db2c:	fa22 f20e 	lsr.w	r2, r2, lr
 801db30:	d8f3      	bhi.n	801db1a <__lshift+0x6e>
 801db32:	ebac 0304 	sub.w	r3, ip, r4
 801db36:	3b15      	subs	r3, #21
 801db38:	f023 0303 	bic.w	r3, r3, #3
 801db3c:	3304      	adds	r3, #4
 801db3e:	f104 0015 	add.w	r0, r4, #21
 801db42:	4560      	cmp	r0, ip
 801db44:	bf88      	it	hi
 801db46:	2304      	movhi	r3, #4
 801db48:	50ca      	str	r2, [r1, r3]
 801db4a:	b10a      	cbz	r2, 801db50 <__lshift+0xa4>
 801db4c:	f108 0602 	add.w	r6, r8, #2
 801db50:	3e01      	subs	r6, #1
 801db52:	4638      	mov	r0, r7
 801db54:	612e      	str	r6, [r5, #16]
 801db56:	4621      	mov	r1, r4
 801db58:	f7ff fde2 	bl	801d720 <_Bfree>
 801db5c:	4628      	mov	r0, r5
 801db5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801db62:	f842 0f04 	str.w	r0, [r2, #4]!
 801db66:	3301      	adds	r3, #1
 801db68:	e7c5      	b.n	801daf6 <__lshift+0x4a>
 801db6a:	3904      	subs	r1, #4
 801db6c:	f853 2b04 	ldr.w	r2, [r3], #4
 801db70:	f841 2f04 	str.w	r2, [r1, #4]!
 801db74:	459c      	cmp	ip, r3
 801db76:	d8f9      	bhi.n	801db6c <__lshift+0xc0>
 801db78:	e7ea      	b.n	801db50 <__lshift+0xa4>
 801db7a:	bf00      	nop
 801db7c:	0801f774 	.word	0x0801f774
 801db80:	0801f785 	.word	0x0801f785

0801db84 <__mcmp>:
 801db84:	690a      	ldr	r2, [r1, #16]
 801db86:	4603      	mov	r3, r0
 801db88:	6900      	ldr	r0, [r0, #16]
 801db8a:	1a80      	subs	r0, r0, r2
 801db8c:	b530      	push	{r4, r5, lr}
 801db8e:	d10e      	bne.n	801dbae <__mcmp+0x2a>
 801db90:	3314      	adds	r3, #20
 801db92:	3114      	adds	r1, #20
 801db94:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801db98:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801db9c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801dba0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801dba4:	4295      	cmp	r5, r2
 801dba6:	d003      	beq.n	801dbb0 <__mcmp+0x2c>
 801dba8:	d205      	bcs.n	801dbb6 <__mcmp+0x32>
 801dbaa:	f04f 30ff 	mov.w	r0, #4294967295
 801dbae:	bd30      	pop	{r4, r5, pc}
 801dbb0:	42a3      	cmp	r3, r4
 801dbb2:	d3f3      	bcc.n	801db9c <__mcmp+0x18>
 801dbb4:	e7fb      	b.n	801dbae <__mcmp+0x2a>
 801dbb6:	2001      	movs	r0, #1
 801dbb8:	e7f9      	b.n	801dbae <__mcmp+0x2a>
	...

0801dbbc <__mdiff>:
 801dbbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dbc0:	4689      	mov	r9, r1
 801dbc2:	4606      	mov	r6, r0
 801dbc4:	4611      	mov	r1, r2
 801dbc6:	4648      	mov	r0, r9
 801dbc8:	4614      	mov	r4, r2
 801dbca:	f7ff ffdb 	bl	801db84 <__mcmp>
 801dbce:	1e05      	subs	r5, r0, #0
 801dbd0:	d112      	bne.n	801dbf8 <__mdiff+0x3c>
 801dbd2:	4629      	mov	r1, r5
 801dbd4:	4630      	mov	r0, r6
 801dbd6:	f7ff fd63 	bl	801d6a0 <_Balloc>
 801dbda:	4602      	mov	r2, r0
 801dbdc:	b928      	cbnz	r0, 801dbea <__mdiff+0x2e>
 801dbde:	4b3e      	ldr	r3, [pc, #248]	@ (801dcd8 <__mdiff+0x11c>)
 801dbe0:	f240 2137 	movw	r1, #567	@ 0x237
 801dbe4:	483d      	ldr	r0, [pc, #244]	@ (801dcdc <__mdiff+0x120>)
 801dbe6:	f000 f999 	bl	801df1c <__assert_func>
 801dbea:	2301      	movs	r3, #1
 801dbec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801dbf0:	4610      	mov	r0, r2
 801dbf2:	b003      	add	sp, #12
 801dbf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dbf8:	bfbc      	itt	lt
 801dbfa:	464b      	movlt	r3, r9
 801dbfc:	46a1      	movlt	r9, r4
 801dbfe:	4630      	mov	r0, r6
 801dc00:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801dc04:	bfba      	itte	lt
 801dc06:	461c      	movlt	r4, r3
 801dc08:	2501      	movlt	r5, #1
 801dc0a:	2500      	movge	r5, #0
 801dc0c:	f7ff fd48 	bl	801d6a0 <_Balloc>
 801dc10:	4602      	mov	r2, r0
 801dc12:	b918      	cbnz	r0, 801dc1c <__mdiff+0x60>
 801dc14:	4b30      	ldr	r3, [pc, #192]	@ (801dcd8 <__mdiff+0x11c>)
 801dc16:	f240 2145 	movw	r1, #581	@ 0x245
 801dc1a:	e7e3      	b.n	801dbe4 <__mdiff+0x28>
 801dc1c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801dc20:	6926      	ldr	r6, [r4, #16]
 801dc22:	60c5      	str	r5, [r0, #12]
 801dc24:	f109 0310 	add.w	r3, r9, #16
 801dc28:	f109 0514 	add.w	r5, r9, #20
 801dc2c:	f104 0e14 	add.w	lr, r4, #20
 801dc30:	f100 0b14 	add.w	fp, r0, #20
 801dc34:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801dc38:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801dc3c:	9301      	str	r3, [sp, #4]
 801dc3e:	46d9      	mov	r9, fp
 801dc40:	f04f 0c00 	mov.w	ip, #0
 801dc44:	9b01      	ldr	r3, [sp, #4]
 801dc46:	f85e 0b04 	ldr.w	r0, [lr], #4
 801dc4a:	f853 af04 	ldr.w	sl, [r3, #4]!
 801dc4e:	9301      	str	r3, [sp, #4]
 801dc50:	b281      	uxth	r1, r0
 801dc52:	fa1f f38a 	uxth.w	r3, sl
 801dc56:	1a5b      	subs	r3, r3, r1
 801dc58:	0c00      	lsrs	r0, r0, #16
 801dc5a:	4463      	add	r3, ip
 801dc5c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801dc60:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801dc64:	b29b      	uxth	r3, r3
 801dc66:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801dc6a:	4576      	cmp	r6, lr
 801dc6c:	f849 3b04 	str.w	r3, [r9], #4
 801dc70:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801dc74:	d8e6      	bhi.n	801dc44 <__mdiff+0x88>
 801dc76:	1b33      	subs	r3, r6, r4
 801dc78:	3b15      	subs	r3, #21
 801dc7a:	f023 0303 	bic.w	r3, r3, #3
 801dc7e:	3415      	adds	r4, #21
 801dc80:	3304      	adds	r3, #4
 801dc82:	42a6      	cmp	r6, r4
 801dc84:	bf38      	it	cc
 801dc86:	2304      	movcc	r3, #4
 801dc88:	441d      	add	r5, r3
 801dc8a:	445b      	add	r3, fp
 801dc8c:	461e      	mov	r6, r3
 801dc8e:	462c      	mov	r4, r5
 801dc90:	4544      	cmp	r4, r8
 801dc92:	d30e      	bcc.n	801dcb2 <__mdiff+0xf6>
 801dc94:	f108 0103 	add.w	r1, r8, #3
 801dc98:	1b49      	subs	r1, r1, r5
 801dc9a:	f021 0103 	bic.w	r1, r1, #3
 801dc9e:	3d03      	subs	r5, #3
 801dca0:	45a8      	cmp	r8, r5
 801dca2:	bf38      	it	cc
 801dca4:	2100      	movcc	r1, #0
 801dca6:	440b      	add	r3, r1
 801dca8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801dcac:	b191      	cbz	r1, 801dcd4 <__mdiff+0x118>
 801dcae:	6117      	str	r7, [r2, #16]
 801dcb0:	e79e      	b.n	801dbf0 <__mdiff+0x34>
 801dcb2:	f854 1b04 	ldr.w	r1, [r4], #4
 801dcb6:	46e6      	mov	lr, ip
 801dcb8:	0c08      	lsrs	r0, r1, #16
 801dcba:	fa1c fc81 	uxtah	ip, ip, r1
 801dcbe:	4471      	add	r1, lr
 801dcc0:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801dcc4:	b289      	uxth	r1, r1
 801dcc6:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801dcca:	f846 1b04 	str.w	r1, [r6], #4
 801dcce:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801dcd2:	e7dd      	b.n	801dc90 <__mdiff+0xd4>
 801dcd4:	3f01      	subs	r7, #1
 801dcd6:	e7e7      	b.n	801dca8 <__mdiff+0xec>
 801dcd8:	0801f774 	.word	0x0801f774
 801dcdc:	0801f785 	.word	0x0801f785

0801dce0 <__d2b>:
 801dce0:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 801dce4:	2101      	movs	r1, #1
 801dce6:	9e08      	ldr	r6, [sp, #32]
 801dce8:	4690      	mov	r8, r2
 801dcea:	4699      	mov	r9, r3
 801dcec:	f7ff fcd8 	bl	801d6a0 <_Balloc>
 801dcf0:	4604      	mov	r4, r0
 801dcf2:	b930      	cbnz	r0, 801dd02 <__d2b+0x22>
 801dcf4:	4602      	mov	r2, r0
 801dcf6:	4b24      	ldr	r3, [pc, #144]	@ (801dd88 <__d2b+0xa8>)
 801dcf8:	4824      	ldr	r0, [pc, #144]	@ (801dd8c <__d2b+0xac>)
 801dcfa:	f240 310f 	movw	r1, #783	@ 0x30f
 801dcfe:	f000 f90d 	bl	801df1c <__assert_func>
 801dd02:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801dd06:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801dd0a:	b10d      	cbz	r5, 801dd10 <__d2b+0x30>
 801dd0c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801dd10:	9301      	str	r3, [sp, #4]
 801dd12:	f1b8 0300 	subs.w	r3, r8, #0
 801dd16:	d024      	beq.n	801dd62 <__d2b+0x82>
 801dd18:	4668      	mov	r0, sp
 801dd1a:	9300      	str	r3, [sp, #0]
 801dd1c:	f7ff fd87 	bl	801d82e <__lo0bits>
 801dd20:	e9dd 1200 	ldrd	r1, r2, [sp]
 801dd24:	b1d8      	cbz	r0, 801dd5e <__d2b+0x7e>
 801dd26:	f1c0 0320 	rsb	r3, r0, #32
 801dd2a:	fa02 f303 	lsl.w	r3, r2, r3
 801dd2e:	430b      	orrs	r3, r1
 801dd30:	40c2      	lsrs	r2, r0
 801dd32:	6163      	str	r3, [r4, #20]
 801dd34:	9201      	str	r2, [sp, #4]
 801dd36:	9b01      	ldr	r3, [sp, #4]
 801dd38:	61a3      	str	r3, [r4, #24]
 801dd3a:	2b00      	cmp	r3, #0
 801dd3c:	bf0c      	ite	eq
 801dd3e:	2201      	moveq	r2, #1
 801dd40:	2202      	movne	r2, #2
 801dd42:	6122      	str	r2, [r4, #16]
 801dd44:	b1ad      	cbz	r5, 801dd72 <__d2b+0x92>
 801dd46:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801dd4a:	4405      	add	r5, r0
 801dd4c:	6035      	str	r5, [r6, #0]
 801dd4e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801dd52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dd54:	6018      	str	r0, [r3, #0]
 801dd56:	4620      	mov	r0, r4
 801dd58:	b002      	add	sp, #8
 801dd5a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 801dd5e:	6161      	str	r1, [r4, #20]
 801dd60:	e7e9      	b.n	801dd36 <__d2b+0x56>
 801dd62:	a801      	add	r0, sp, #4
 801dd64:	f7ff fd63 	bl	801d82e <__lo0bits>
 801dd68:	9b01      	ldr	r3, [sp, #4]
 801dd6a:	6163      	str	r3, [r4, #20]
 801dd6c:	3020      	adds	r0, #32
 801dd6e:	2201      	movs	r2, #1
 801dd70:	e7e7      	b.n	801dd42 <__d2b+0x62>
 801dd72:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801dd76:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801dd7a:	6030      	str	r0, [r6, #0]
 801dd7c:	6918      	ldr	r0, [r3, #16]
 801dd7e:	f7ff fd37 	bl	801d7f0 <__hi0bits>
 801dd82:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801dd86:	e7e4      	b.n	801dd52 <__d2b+0x72>
 801dd88:	0801f774 	.word	0x0801f774
 801dd8c:	0801f785 	.word	0x0801f785

0801dd90 <__sflush_r>:
 801dd90:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801dd94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dd96:	0716      	lsls	r6, r2, #28
 801dd98:	4605      	mov	r5, r0
 801dd9a:	460c      	mov	r4, r1
 801dd9c:	d454      	bmi.n	801de48 <__sflush_r+0xb8>
 801dd9e:	684b      	ldr	r3, [r1, #4]
 801dda0:	2b00      	cmp	r3, #0
 801dda2:	dc02      	bgt.n	801ddaa <__sflush_r+0x1a>
 801dda4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801dda6:	2b00      	cmp	r3, #0
 801dda8:	dd48      	ble.n	801de3c <__sflush_r+0xac>
 801ddaa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801ddac:	2e00      	cmp	r6, #0
 801ddae:	d045      	beq.n	801de3c <__sflush_r+0xac>
 801ddb0:	2300      	movs	r3, #0
 801ddb2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801ddb6:	682f      	ldr	r7, [r5, #0]
 801ddb8:	6a21      	ldr	r1, [r4, #32]
 801ddba:	602b      	str	r3, [r5, #0]
 801ddbc:	d030      	beq.n	801de20 <__sflush_r+0x90>
 801ddbe:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801ddc0:	89a3      	ldrh	r3, [r4, #12]
 801ddc2:	0759      	lsls	r1, r3, #29
 801ddc4:	d505      	bpl.n	801ddd2 <__sflush_r+0x42>
 801ddc6:	6863      	ldr	r3, [r4, #4]
 801ddc8:	1ad2      	subs	r2, r2, r3
 801ddca:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801ddcc:	b10b      	cbz	r3, 801ddd2 <__sflush_r+0x42>
 801ddce:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801ddd0:	1ad2      	subs	r2, r2, r3
 801ddd2:	2300      	movs	r3, #0
 801ddd4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801ddd6:	6a21      	ldr	r1, [r4, #32]
 801ddd8:	4628      	mov	r0, r5
 801ddda:	47b0      	blx	r6
 801dddc:	1c43      	adds	r3, r0, #1
 801ddde:	89a3      	ldrh	r3, [r4, #12]
 801dde0:	d106      	bne.n	801ddf0 <__sflush_r+0x60>
 801dde2:	6829      	ldr	r1, [r5, #0]
 801dde4:	291d      	cmp	r1, #29
 801dde6:	d82b      	bhi.n	801de40 <__sflush_r+0xb0>
 801dde8:	4a28      	ldr	r2, [pc, #160]	@ (801de8c <__sflush_r+0xfc>)
 801ddea:	40ca      	lsrs	r2, r1
 801ddec:	07d6      	lsls	r6, r2, #31
 801ddee:	d527      	bpl.n	801de40 <__sflush_r+0xb0>
 801ddf0:	2200      	movs	r2, #0
 801ddf2:	6062      	str	r2, [r4, #4]
 801ddf4:	04d9      	lsls	r1, r3, #19
 801ddf6:	6922      	ldr	r2, [r4, #16]
 801ddf8:	6022      	str	r2, [r4, #0]
 801ddfa:	d504      	bpl.n	801de06 <__sflush_r+0x76>
 801ddfc:	1c42      	adds	r2, r0, #1
 801ddfe:	d101      	bne.n	801de04 <__sflush_r+0x74>
 801de00:	682b      	ldr	r3, [r5, #0]
 801de02:	b903      	cbnz	r3, 801de06 <__sflush_r+0x76>
 801de04:	6560      	str	r0, [r4, #84]	@ 0x54
 801de06:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801de08:	602f      	str	r7, [r5, #0]
 801de0a:	b1b9      	cbz	r1, 801de3c <__sflush_r+0xac>
 801de0c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801de10:	4299      	cmp	r1, r3
 801de12:	d002      	beq.n	801de1a <__sflush_r+0x8a>
 801de14:	4628      	mov	r0, r5
 801de16:	f7ff fb43 	bl	801d4a0 <_free_r>
 801de1a:	2300      	movs	r3, #0
 801de1c:	6363      	str	r3, [r4, #52]	@ 0x34
 801de1e:	e00d      	b.n	801de3c <__sflush_r+0xac>
 801de20:	2301      	movs	r3, #1
 801de22:	4628      	mov	r0, r5
 801de24:	47b0      	blx	r6
 801de26:	4602      	mov	r2, r0
 801de28:	1c50      	adds	r0, r2, #1
 801de2a:	d1c9      	bne.n	801ddc0 <__sflush_r+0x30>
 801de2c:	682b      	ldr	r3, [r5, #0]
 801de2e:	2b00      	cmp	r3, #0
 801de30:	d0c6      	beq.n	801ddc0 <__sflush_r+0x30>
 801de32:	2b1d      	cmp	r3, #29
 801de34:	d001      	beq.n	801de3a <__sflush_r+0xaa>
 801de36:	2b16      	cmp	r3, #22
 801de38:	d11d      	bne.n	801de76 <__sflush_r+0xe6>
 801de3a:	602f      	str	r7, [r5, #0]
 801de3c:	2000      	movs	r0, #0
 801de3e:	e021      	b.n	801de84 <__sflush_r+0xf4>
 801de40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801de44:	b21b      	sxth	r3, r3
 801de46:	e01a      	b.n	801de7e <__sflush_r+0xee>
 801de48:	690f      	ldr	r7, [r1, #16]
 801de4a:	2f00      	cmp	r7, #0
 801de4c:	d0f6      	beq.n	801de3c <__sflush_r+0xac>
 801de4e:	0793      	lsls	r3, r2, #30
 801de50:	680e      	ldr	r6, [r1, #0]
 801de52:	bf08      	it	eq
 801de54:	694b      	ldreq	r3, [r1, #20]
 801de56:	600f      	str	r7, [r1, #0]
 801de58:	bf18      	it	ne
 801de5a:	2300      	movne	r3, #0
 801de5c:	1bf6      	subs	r6, r6, r7
 801de5e:	608b      	str	r3, [r1, #8]
 801de60:	2e00      	cmp	r6, #0
 801de62:	ddeb      	ble.n	801de3c <__sflush_r+0xac>
 801de64:	6a21      	ldr	r1, [r4, #32]
 801de66:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 801de6a:	4633      	mov	r3, r6
 801de6c:	463a      	mov	r2, r7
 801de6e:	4628      	mov	r0, r5
 801de70:	47e0      	blx	ip
 801de72:	2800      	cmp	r0, #0
 801de74:	dc07      	bgt.n	801de86 <__sflush_r+0xf6>
 801de76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801de7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801de7e:	81a3      	strh	r3, [r4, #12]
 801de80:	f04f 30ff 	mov.w	r0, #4294967295
 801de84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801de86:	4407      	add	r7, r0
 801de88:	1a36      	subs	r6, r6, r0
 801de8a:	e7e9      	b.n	801de60 <__sflush_r+0xd0>
 801de8c:	20400001 	.word	0x20400001

0801de90 <_fflush_r>:
 801de90:	b538      	push	{r3, r4, r5, lr}
 801de92:	690b      	ldr	r3, [r1, #16]
 801de94:	4605      	mov	r5, r0
 801de96:	460c      	mov	r4, r1
 801de98:	b913      	cbnz	r3, 801dea0 <_fflush_r+0x10>
 801de9a:	2500      	movs	r5, #0
 801de9c:	4628      	mov	r0, r5
 801de9e:	bd38      	pop	{r3, r4, r5, pc}
 801dea0:	b118      	cbz	r0, 801deaa <_fflush_r+0x1a>
 801dea2:	6a03      	ldr	r3, [r0, #32]
 801dea4:	b90b      	cbnz	r3, 801deaa <_fflush_r+0x1a>
 801dea6:	f7fe fba7 	bl	801c5f8 <__sinit>
 801deaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801deae:	2b00      	cmp	r3, #0
 801deb0:	d0f3      	beq.n	801de9a <_fflush_r+0xa>
 801deb2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801deb4:	07d0      	lsls	r0, r2, #31
 801deb6:	d404      	bmi.n	801dec2 <_fflush_r+0x32>
 801deb8:	0599      	lsls	r1, r3, #22
 801deba:	d402      	bmi.n	801dec2 <_fflush_r+0x32>
 801debc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801debe:	f7fe fc92 	bl	801c7e6 <__retarget_lock_acquire_recursive>
 801dec2:	4628      	mov	r0, r5
 801dec4:	4621      	mov	r1, r4
 801dec6:	f7ff ff63 	bl	801dd90 <__sflush_r>
 801deca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801decc:	07da      	lsls	r2, r3, #31
 801dece:	4605      	mov	r5, r0
 801ded0:	d4e4      	bmi.n	801de9c <_fflush_r+0xc>
 801ded2:	89a3      	ldrh	r3, [r4, #12]
 801ded4:	059b      	lsls	r3, r3, #22
 801ded6:	d4e1      	bmi.n	801de9c <_fflush_r+0xc>
 801ded8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801deda:	f7fe fc85 	bl	801c7e8 <__retarget_lock_release_recursive>
 801dede:	e7dd      	b.n	801de9c <_fflush_r+0xc>

0801dee0 <_sbrk_r>:
 801dee0:	b538      	push	{r3, r4, r5, lr}
 801dee2:	4d06      	ldr	r5, [pc, #24]	@ (801defc <_sbrk_r+0x1c>)
 801dee4:	2300      	movs	r3, #0
 801dee6:	4604      	mov	r4, r0
 801dee8:	4608      	mov	r0, r1
 801deea:	602b      	str	r3, [r5, #0]
 801deec:	f7e4 fa6c 	bl	80023c8 <_sbrk>
 801def0:	1c43      	adds	r3, r0, #1
 801def2:	d102      	bne.n	801defa <_sbrk_r+0x1a>
 801def4:	682b      	ldr	r3, [r5, #0]
 801def6:	b103      	cbz	r3, 801defa <_sbrk_r+0x1a>
 801def8:	6023      	str	r3, [r4, #0]
 801defa:	bd38      	pop	{r3, r4, r5, pc}
 801defc:	200024fc 	.word	0x200024fc

0801df00 <memcpy>:
 801df00:	440a      	add	r2, r1
 801df02:	4291      	cmp	r1, r2
 801df04:	f100 33ff 	add.w	r3, r0, #4294967295
 801df08:	d100      	bne.n	801df0c <memcpy+0xc>
 801df0a:	4770      	bx	lr
 801df0c:	b510      	push	{r4, lr}
 801df0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 801df12:	f803 4f01 	strb.w	r4, [r3, #1]!
 801df16:	4291      	cmp	r1, r2
 801df18:	d1f9      	bne.n	801df0e <memcpy+0xe>
 801df1a:	bd10      	pop	{r4, pc}

0801df1c <__assert_func>:
 801df1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801df1e:	4614      	mov	r4, r2
 801df20:	461a      	mov	r2, r3
 801df22:	4b09      	ldr	r3, [pc, #36]	@ (801df48 <__assert_func+0x2c>)
 801df24:	681b      	ldr	r3, [r3, #0]
 801df26:	4605      	mov	r5, r0
 801df28:	68d8      	ldr	r0, [r3, #12]
 801df2a:	b14c      	cbz	r4, 801df40 <__assert_func+0x24>
 801df2c:	4b07      	ldr	r3, [pc, #28]	@ (801df4c <__assert_func+0x30>)
 801df2e:	9100      	str	r1, [sp, #0]
 801df30:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801df34:	4906      	ldr	r1, [pc, #24]	@ (801df50 <__assert_func+0x34>)
 801df36:	462b      	mov	r3, r5
 801df38:	f000 f842 	bl	801dfc0 <fiprintf>
 801df3c:	f000 f852 	bl	801dfe4 <abort>
 801df40:	4b04      	ldr	r3, [pc, #16]	@ (801df54 <__assert_func+0x38>)
 801df42:	461c      	mov	r4, r3
 801df44:	e7f3      	b.n	801df2e <__assert_func+0x12>
 801df46:	bf00      	nop
 801df48:	2000014c 	.word	0x2000014c
 801df4c:	0801f7e8 	.word	0x0801f7e8
 801df50:	0801f7f5 	.word	0x0801f7f5
 801df54:	0801f823 	.word	0x0801f823

0801df58 <_calloc_r>:
 801df58:	b570      	push	{r4, r5, r6, lr}
 801df5a:	fba1 5402 	umull	r5, r4, r1, r2
 801df5e:	b934      	cbnz	r4, 801df6e <_calloc_r+0x16>
 801df60:	4629      	mov	r1, r5
 801df62:	f7ff fb11 	bl	801d588 <_malloc_r>
 801df66:	4606      	mov	r6, r0
 801df68:	b928      	cbnz	r0, 801df76 <_calloc_r+0x1e>
 801df6a:	4630      	mov	r0, r6
 801df6c:	bd70      	pop	{r4, r5, r6, pc}
 801df6e:	220c      	movs	r2, #12
 801df70:	6002      	str	r2, [r0, #0]
 801df72:	2600      	movs	r6, #0
 801df74:	e7f9      	b.n	801df6a <_calloc_r+0x12>
 801df76:	462a      	mov	r2, r5
 801df78:	4621      	mov	r1, r4
 801df7a:	f7fe fbb6 	bl	801c6ea <memset>
 801df7e:	e7f4      	b.n	801df6a <_calloc_r+0x12>

0801df80 <__ascii_mbtowc>:
 801df80:	b082      	sub	sp, #8
 801df82:	b901      	cbnz	r1, 801df86 <__ascii_mbtowc+0x6>
 801df84:	a901      	add	r1, sp, #4
 801df86:	b142      	cbz	r2, 801df9a <__ascii_mbtowc+0x1a>
 801df88:	b14b      	cbz	r3, 801df9e <__ascii_mbtowc+0x1e>
 801df8a:	7813      	ldrb	r3, [r2, #0]
 801df8c:	600b      	str	r3, [r1, #0]
 801df8e:	7812      	ldrb	r2, [r2, #0]
 801df90:	1e10      	subs	r0, r2, #0
 801df92:	bf18      	it	ne
 801df94:	2001      	movne	r0, #1
 801df96:	b002      	add	sp, #8
 801df98:	4770      	bx	lr
 801df9a:	4610      	mov	r0, r2
 801df9c:	e7fb      	b.n	801df96 <__ascii_mbtowc+0x16>
 801df9e:	f06f 0001 	mvn.w	r0, #1
 801dfa2:	e7f8      	b.n	801df96 <__ascii_mbtowc+0x16>

0801dfa4 <__ascii_wctomb>:
 801dfa4:	4603      	mov	r3, r0
 801dfa6:	4608      	mov	r0, r1
 801dfa8:	b141      	cbz	r1, 801dfbc <__ascii_wctomb+0x18>
 801dfaa:	2aff      	cmp	r2, #255	@ 0xff
 801dfac:	d904      	bls.n	801dfb8 <__ascii_wctomb+0x14>
 801dfae:	228a      	movs	r2, #138	@ 0x8a
 801dfb0:	601a      	str	r2, [r3, #0]
 801dfb2:	f04f 30ff 	mov.w	r0, #4294967295
 801dfb6:	4770      	bx	lr
 801dfb8:	700a      	strb	r2, [r1, #0]
 801dfba:	2001      	movs	r0, #1
 801dfbc:	4770      	bx	lr
	...

0801dfc0 <fiprintf>:
 801dfc0:	b40e      	push	{r1, r2, r3}
 801dfc2:	b503      	push	{r0, r1, lr}
 801dfc4:	4601      	mov	r1, r0
 801dfc6:	ab03      	add	r3, sp, #12
 801dfc8:	4805      	ldr	r0, [pc, #20]	@ (801dfe0 <fiprintf+0x20>)
 801dfca:	f853 2b04 	ldr.w	r2, [r3], #4
 801dfce:	6800      	ldr	r0, [r0, #0]
 801dfd0:	9301      	str	r3, [sp, #4]
 801dfd2:	f000 f835 	bl	801e040 <_vfiprintf_r>
 801dfd6:	b002      	add	sp, #8
 801dfd8:	f85d eb04 	ldr.w	lr, [sp], #4
 801dfdc:	b003      	add	sp, #12
 801dfde:	4770      	bx	lr
 801dfe0:	2000014c 	.word	0x2000014c

0801dfe4 <abort>:
 801dfe4:	b508      	push	{r3, lr}
 801dfe6:	2006      	movs	r0, #6
 801dfe8:	f000 f9fe 	bl	801e3e8 <raise>
 801dfec:	2001      	movs	r0, #1
 801dfee:	f7e4 f977 	bl	80022e0 <_exit>

0801dff2 <__sfputc_r>:
 801dff2:	6893      	ldr	r3, [r2, #8]
 801dff4:	3b01      	subs	r3, #1
 801dff6:	2b00      	cmp	r3, #0
 801dff8:	b410      	push	{r4}
 801dffa:	6093      	str	r3, [r2, #8]
 801dffc:	da07      	bge.n	801e00e <__sfputc_r+0x1c>
 801dffe:	6994      	ldr	r4, [r2, #24]
 801e000:	42a3      	cmp	r3, r4
 801e002:	db01      	blt.n	801e008 <__sfputc_r+0x16>
 801e004:	290a      	cmp	r1, #10
 801e006:	d102      	bne.n	801e00e <__sfputc_r+0x1c>
 801e008:	bc10      	pop	{r4}
 801e00a:	f000 b931 	b.w	801e270 <__swbuf_r>
 801e00e:	6813      	ldr	r3, [r2, #0]
 801e010:	1c58      	adds	r0, r3, #1
 801e012:	6010      	str	r0, [r2, #0]
 801e014:	7019      	strb	r1, [r3, #0]
 801e016:	4608      	mov	r0, r1
 801e018:	bc10      	pop	{r4}
 801e01a:	4770      	bx	lr

0801e01c <__sfputs_r>:
 801e01c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e01e:	4606      	mov	r6, r0
 801e020:	460f      	mov	r7, r1
 801e022:	4614      	mov	r4, r2
 801e024:	18d5      	adds	r5, r2, r3
 801e026:	42ac      	cmp	r4, r5
 801e028:	d101      	bne.n	801e02e <__sfputs_r+0x12>
 801e02a:	2000      	movs	r0, #0
 801e02c:	e007      	b.n	801e03e <__sfputs_r+0x22>
 801e02e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e032:	463a      	mov	r2, r7
 801e034:	4630      	mov	r0, r6
 801e036:	f7ff ffdc 	bl	801dff2 <__sfputc_r>
 801e03a:	1c43      	adds	r3, r0, #1
 801e03c:	d1f3      	bne.n	801e026 <__sfputs_r+0xa>
 801e03e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801e040 <_vfiprintf_r>:
 801e040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e044:	460d      	mov	r5, r1
 801e046:	b09d      	sub	sp, #116	@ 0x74
 801e048:	4614      	mov	r4, r2
 801e04a:	4698      	mov	r8, r3
 801e04c:	4606      	mov	r6, r0
 801e04e:	b118      	cbz	r0, 801e058 <_vfiprintf_r+0x18>
 801e050:	6a03      	ldr	r3, [r0, #32]
 801e052:	b90b      	cbnz	r3, 801e058 <_vfiprintf_r+0x18>
 801e054:	f7fe fad0 	bl	801c5f8 <__sinit>
 801e058:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801e05a:	07d9      	lsls	r1, r3, #31
 801e05c:	d405      	bmi.n	801e06a <_vfiprintf_r+0x2a>
 801e05e:	89ab      	ldrh	r3, [r5, #12]
 801e060:	059a      	lsls	r2, r3, #22
 801e062:	d402      	bmi.n	801e06a <_vfiprintf_r+0x2a>
 801e064:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801e066:	f7fe fbbe 	bl	801c7e6 <__retarget_lock_acquire_recursive>
 801e06a:	89ab      	ldrh	r3, [r5, #12]
 801e06c:	071b      	lsls	r3, r3, #28
 801e06e:	d501      	bpl.n	801e074 <_vfiprintf_r+0x34>
 801e070:	692b      	ldr	r3, [r5, #16]
 801e072:	b99b      	cbnz	r3, 801e09c <_vfiprintf_r+0x5c>
 801e074:	4629      	mov	r1, r5
 801e076:	4630      	mov	r0, r6
 801e078:	f000 f938 	bl	801e2ec <__swsetup_r>
 801e07c:	b170      	cbz	r0, 801e09c <_vfiprintf_r+0x5c>
 801e07e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801e080:	07dc      	lsls	r4, r3, #31
 801e082:	d504      	bpl.n	801e08e <_vfiprintf_r+0x4e>
 801e084:	f04f 30ff 	mov.w	r0, #4294967295
 801e088:	b01d      	add	sp, #116	@ 0x74
 801e08a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e08e:	89ab      	ldrh	r3, [r5, #12]
 801e090:	0598      	lsls	r0, r3, #22
 801e092:	d4f7      	bmi.n	801e084 <_vfiprintf_r+0x44>
 801e094:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801e096:	f7fe fba7 	bl	801c7e8 <__retarget_lock_release_recursive>
 801e09a:	e7f3      	b.n	801e084 <_vfiprintf_r+0x44>
 801e09c:	2300      	movs	r3, #0
 801e09e:	9309      	str	r3, [sp, #36]	@ 0x24
 801e0a0:	2320      	movs	r3, #32
 801e0a2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801e0a6:	f8cd 800c 	str.w	r8, [sp, #12]
 801e0aa:	2330      	movs	r3, #48	@ 0x30
 801e0ac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801e25c <_vfiprintf_r+0x21c>
 801e0b0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801e0b4:	f04f 0901 	mov.w	r9, #1
 801e0b8:	4623      	mov	r3, r4
 801e0ba:	469a      	mov	sl, r3
 801e0bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e0c0:	b10a      	cbz	r2, 801e0c6 <_vfiprintf_r+0x86>
 801e0c2:	2a25      	cmp	r2, #37	@ 0x25
 801e0c4:	d1f9      	bne.n	801e0ba <_vfiprintf_r+0x7a>
 801e0c6:	ebba 0b04 	subs.w	fp, sl, r4
 801e0ca:	d00b      	beq.n	801e0e4 <_vfiprintf_r+0xa4>
 801e0cc:	465b      	mov	r3, fp
 801e0ce:	4622      	mov	r2, r4
 801e0d0:	4629      	mov	r1, r5
 801e0d2:	4630      	mov	r0, r6
 801e0d4:	f7ff ffa2 	bl	801e01c <__sfputs_r>
 801e0d8:	3001      	adds	r0, #1
 801e0da:	f000 80a7 	beq.w	801e22c <_vfiprintf_r+0x1ec>
 801e0de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e0e0:	445a      	add	r2, fp
 801e0e2:	9209      	str	r2, [sp, #36]	@ 0x24
 801e0e4:	f89a 3000 	ldrb.w	r3, [sl]
 801e0e8:	2b00      	cmp	r3, #0
 801e0ea:	f000 809f 	beq.w	801e22c <_vfiprintf_r+0x1ec>
 801e0ee:	2300      	movs	r3, #0
 801e0f0:	f04f 32ff 	mov.w	r2, #4294967295
 801e0f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e0f8:	f10a 0a01 	add.w	sl, sl, #1
 801e0fc:	9304      	str	r3, [sp, #16]
 801e0fe:	9307      	str	r3, [sp, #28]
 801e100:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801e104:	931a      	str	r3, [sp, #104]	@ 0x68
 801e106:	4654      	mov	r4, sl
 801e108:	2205      	movs	r2, #5
 801e10a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e10e:	4853      	ldr	r0, [pc, #332]	@ (801e25c <_vfiprintf_r+0x21c>)
 801e110:	f7e2 f836 	bl	8000180 <memchr>
 801e114:	9a04      	ldr	r2, [sp, #16]
 801e116:	b9d8      	cbnz	r0, 801e150 <_vfiprintf_r+0x110>
 801e118:	06d1      	lsls	r1, r2, #27
 801e11a:	bf44      	itt	mi
 801e11c:	2320      	movmi	r3, #32
 801e11e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801e122:	0713      	lsls	r3, r2, #28
 801e124:	bf44      	itt	mi
 801e126:	232b      	movmi	r3, #43	@ 0x2b
 801e128:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801e12c:	f89a 3000 	ldrb.w	r3, [sl]
 801e130:	2b2a      	cmp	r3, #42	@ 0x2a
 801e132:	d015      	beq.n	801e160 <_vfiprintf_r+0x120>
 801e134:	9a07      	ldr	r2, [sp, #28]
 801e136:	4654      	mov	r4, sl
 801e138:	2000      	movs	r0, #0
 801e13a:	f04f 0c0a 	mov.w	ip, #10
 801e13e:	4621      	mov	r1, r4
 801e140:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e144:	3b30      	subs	r3, #48	@ 0x30
 801e146:	2b09      	cmp	r3, #9
 801e148:	d94b      	bls.n	801e1e2 <_vfiprintf_r+0x1a2>
 801e14a:	b1b0      	cbz	r0, 801e17a <_vfiprintf_r+0x13a>
 801e14c:	9207      	str	r2, [sp, #28]
 801e14e:	e014      	b.n	801e17a <_vfiprintf_r+0x13a>
 801e150:	eba0 0308 	sub.w	r3, r0, r8
 801e154:	fa09 f303 	lsl.w	r3, r9, r3
 801e158:	4313      	orrs	r3, r2
 801e15a:	9304      	str	r3, [sp, #16]
 801e15c:	46a2      	mov	sl, r4
 801e15e:	e7d2      	b.n	801e106 <_vfiprintf_r+0xc6>
 801e160:	9b03      	ldr	r3, [sp, #12]
 801e162:	1d19      	adds	r1, r3, #4
 801e164:	681b      	ldr	r3, [r3, #0]
 801e166:	9103      	str	r1, [sp, #12]
 801e168:	2b00      	cmp	r3, #0
 801e16a:	bfbb      	ittet	lt
 801e16c:	425b      	neglt	r3, r3
 801e16e:	f042 0202 	orrlt.w	r2, r2, #2
 801e172:	9307      	strge	r3, [sp, #28]
 801e174:	9307      	strlt	r3, [sp, #28]
 801e176:	bfb8      	it	lt
 801e178:	9204      	strlt	r2, [sp, #16]
 801e17a:	7823      	ldrb	r3, [r4, #0]
 801e17c:	2b2e      	cmp	r3, #46	@ 0x2e
 801e17e:	d10a      	bne.n	801e196 <_vfiprintf_r+0x156>
 801e180:	7863      	ldrb	r3, [r4, #1]
 801e182:	2b2a      	cmp	r3, #42	@ 0x2a
 801e184:	d132      	bne.n	801e1ec <_vfiprintf_r+0x1ac>
 801e186:	9b03      	ldr	r3, [sp, #12]
 801e188:	1d1a      	adds	r2, r3, #4
 801e18a:	681b      	ldr	r3, [r3, #0]
 801e18c:	9203      	str	r2, [sp, #12]
 801e18e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801e192:	3402      	adds	r4, #2
 801e194:	9305      	str	r3, [sp, #20]
 801e196:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 801e260 <_vfiprintf_r+0x220>
 801e19a:	7821      	ldrb	r1, [r4, #0]
 801e19c:	2203      	movs	r2, #3
 801e19e:	4650      	mov	r0, sl
 801e1a0:	f7e1 ffee 	bl	8000180 <memchr>
 801e1a4:	b138      	cbz	r0, 801e1b6 <_vfiprintf_r+0x176>
 801e1a6:	9b04      	ldr	r3, [sp, #16]
 801e1a8:	eba0 000a 	sub.w	r0, r0, sl
 801e1ac:	2240      	movs	r2, #64	@ 0x40
 801e1ae:	4082      	lsls	r2, r0
 801e1b0:	4313      	orrs	r3, r2
 801e1b2:	3401      	adds	r4, #1
 801e1b4:	9304      	str	r3, [sp, #16]
 801e1b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e1ba:	482a      	ldr	r0, [pc, #168]	@ (801e264 <_vfiprintf_r+0x224>)
 801e1bc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801e1c0:	2206      	movs	r2, #6
 801e1c2:	f7e1 ffdd 	bl	8000180 <memchr>
 801e1c6:	2800      	cmp	r0, #0
 801e1c8:	d03f      	beq.n	801e24a <_vfiprintf_r+0x20a>
 801e1ca:	4b27      	ldr	r3, [pc, #156]	@ (801e268 <_vfiprintf_r+0x228>)
 801e1cc:	bb1b      	cbnz	r3, 801e216 <_vfiprintf_r+0x1d6>
 801e1ce:	9b03      	ldr	r3, [sp, #12]
 801e1d0:	3307      	adds	r3, #7
 801e1d2:	f023 0307 	bic.w	r3, r3, #7
 801e1d6:	3308      	adds	r3, #8
 801e1d8:	9303      	str	r3, [sp, #12]
 801e1da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e1dc:	443b      	add	r3, r7
 801e1de:	9309      	str	r3, [sp, #36]	@ 0x24
 801e1e0:	e76a      	b.n	801e0b8 <_vfiprintf_r+0x78>
 801e1e2:	fb0c 3202 	mla	r2, ip, r2, r3
 801e1e6:	460c      	mov	r4, r1
 801e1e8:	2001      	movs	r0, #1
 801e1ea:	e7a8      	b.n	801e13e <_vfiprintf_r+0xfe>
 801e1ec:	2300      	movs	r3, #0
 801e1ee:	3401      	adds	r4, #1
 801e1f0:	9305      	str	r3, [sp, #20]
 801e1f2:	4619      	mov	r1, r3
 801e1f4:	f04f 0c0a 	mov.w	ip, #10
 801e1f8:	4620      	mov	r0, r4
 801e1fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e1fe:	3a30      	subs	r2, #48	@ 0x30
 801e200:	2a09      	cmp	r2, #9
 801e202:	d903      	bls.n	801e20c <_vfiprintf_r+0x1cc>
 801e204:	2b00      	cmp	r3, #0
 801e206:	d0c6      	beq.n	801e196 <_vfiprintf_r+0x156>
 801e208:	9105      	str	r1, [sp, #20]
 801e20a:	e7c4      	b.n	801e196 <_vfiprintf_r+0x156>
 801e20c:	fb0c 2101 	mla	r1, ip, r1, r2
 801e210:	4604      	mov	r4, r0
 801e212:	2301      	movs	r3, #1
 801e214:	e7f0      	b.n	801e1f8 <_vfiprintf_r+0x1b8>
 801e216:	ab03      	add	r3, sp, #12
 801e218:	9300      	str	r3, [sp, #0]
 801e21a:	462a      	mov	r2, r5
 801e21c:	4b13      	ldr	r3, [pc, #76]	@ (801e26c <_vfiprintf_r+0x22c>)
 801e21e:	a904      	add	r1, sp, #16
 801e220:	4630      	mov	r0, r6
 801e222:	f7fd fda5 	bl	801bd70 <_printf_float>
 801e226:	4607      	mov	r7, r0
 801e228:	1c78      	adds	r0, r7, #1
 801e22a:	d1d6      	bne.n	801e1da <_vfiprintf_r+0x19a>
 801e22c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801e22e:	07d9      	lsls	r1, r3, #31
 801e230:	d405      	bmi.n	801e23e <_vfiprintf_r+0x1fe>
 801e232:	89ab      	ldrh	r3, [r5, #12]
 801e234:	059a      	lsls	r2, r3, #22
 801e236:	d402      	bmi.n	801e23e <_vfiprintf_r+0x1fe>
 801e238:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801e23a:	f7fe fad5 	bl	801c7e8 <__retarget_lock_release_recursive>
 801e23e:	89ab      	ldrh	r3, [r5, #12]
 801e240:	065b      	lsls	r3, r3, #25
 801e242:	f53f af1f 	bmi.w	801e084 <_vfiprintf_r+0x44>
 801e246:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e248:	e71e      	b.n	801e088 <_vfiprintf_r+0x48>
 801e24a:	ab03      	add	r3, sp, #12
 801e24c:	9300      	str	r3, [sp, #0]
 801e24e:	462a      	mov	r2, r5
 801e250:	4b06      	ldr	r3, [pc, #24]	@ (801e26c <_vfiprintf_r+0x22c>)
 801e252:	a904      	add	r1, sp, #16
 801e254:	4630      	mov	r0, r6
 801e256:	f7fe f825 	bl	801c2a4 <_printf_i>
 801e25a:	e7e4      	b.n	801e226 <_vfiprintf_r+0x1e6>
 801e25c:	0801f824 	.word	0x0801f824
 801e260:	0801f82a 	.word	0x0801f82a
 801e264:	0801f82e 	.word	0x0801f82e
 801e268:	0801bd71 	.word	0x0801bd71
 801e26c:	0801e01d 	.word	0x0801e01d

0801e270 <__swbuf_r>:
 801e270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e272:	460e      	mov	r6, r1
 801e274:	4614      	mov	r4, r2
 801e276:	4605      	mov	r5, r0
 801e278:	b118      	cbz	r0, 801e282 <__swbuf_r+0x12>
 801e27a:	6a03      	ldr	r3, [r0, #32]
 801e27c:	b90b      	cbnz	r3, 801e282 <__swbuf_r+0x12>
 801e27e:	f7fe f9bb 	bl	801c5f8 <__sinit>
 801e282:	69a3      	ldr	r3, [r4, #24]
 801e284:	60a3      	str	r3, [r4, #8]
 801e286:	89a3      	ldrh	r3, [r4, #12]
 801e288:	071a      	lsls	r2, r3, #28
 801e28a:	d501      	bpl.n	801e290 <__swbuf_r+0x20>
 801e28c:	6923      	ldr	r3, [r4, #16]
 801e28e:	b943      	cbnz	r3, 801e2a2 <__swbuf_r+0x32>
 801e290:	4621      	mov	r1, r4
 801e292:	4628      	mov	r0, r5
 801e294:	f000 f82a 	bl	801e2ec <__swsetup_r>
 801e298:	b118      	cbz	r0, 801e2a2 <__swbuf_r+0x32>
 801e29a:	f04f 37ff 	mov.w	r7, #4294967295
 801e29e:	4638      	mov	r0, r7
 801e2a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e2a2:	6823      	ldr	r3, [r4, #0]
 801e2a4:	6922      	ldr	r2, [r4, #16]
 801e2a6:	1a98      	subs	r0, r3, r2
 801e2a8:	6963      	ldr	r3, [r4, #20]
 801e2aa:	b2f6      	uxtb	r6, r6
 801e2ac:	4283      	cmp	r3, r0
 801e2ae:	4637      	mov	r7, r6
 801e2b0:	dc05      	bgt.n	801e2be <__swbuf_r+0x4e>
 801e2b2:	4621      	mov	r1, r4
 801e2b4:	4628      	mov	r0, r5
 801e2b6:	f7ff fdeb 	bl	801de90 <_fflush_r>
 801e2ba:	2800      	cmp	r0, #0
 801e2bc:	d1ed      	bne.n	801e29a <__swbuf_r+0x2a>
 801e2be:	68a3      	ldr	r3, [r4, #8]
 801e2c0:	3b01      	subs	r3, #1
 801e2c2:	60a3      	str	r3, [r4, #8]
 801e2c4:	6823      	ldr	r3, [r4, #0]
 801e2c6:	1c5a      	adds	r2, r3, #1
 801e2c8:	6022      	str	r2, [r4, #0]
 801e2ca:	701e      	strb	r6, [r3, #0]
 801e2cc:	6962      	ldr	r2, [r4, #20]
 801e2ce:	1c43      	adds	r3, r0, #1
 801e2d0:	429a      	cmp	r2, r3
 801e2d2:	d004      	beq.n	801e2de <__swbuf_r+0x6e>
 801e2d4:	89a3      	ldrh	r3, [r4, #12]
 801e2d6:	07db      	lsls	r3, r3, #31
 801e2d8:	d5e1      	bpl.n	801e29e <__swbuf_r+0x2e>
 801e2da:	2e0a      	cmp	r6, #10
 801e2dc:	d1df      	bne.n	801e29e <__swbuf_r+0x2e>
 801e2de:	4621      	mov	r1, r4
 801e2e0:	4628      	mov	r0, r5
 801e2e2:	f7ff fdd5 	bl	801de90 <_fflush_r>
 801e2e6:	2800      	cmp	r0, #0
 801e2e8:	d0d9      	beq.n	801e29e <__swbuf_r+0x2e>
 801e2ea:	e7d6      	b.n	801e29a <__swbuf_r+0x2a>

0801e2ec <__swsetup_r>:
 801e2ec:	b538      	push	{r3, r4, r5, lr}
 801e2ee:	4b29      	ldr	r3, [pc, #164]	@ (801e394 <__swsetup_r+0xa8>)
 801e2f0:	4605      	mov	r5, r0
 801e2f2:	6818      	ldr	r0, [r3, #0]
 801e2f4:	460c      	mov	r4, r1
 801e2f6:	b118      	cbz	r0, 801e300 <__swsetup_r+0x14>
 801e2f8:	6a03      	ldr	r3, [r0, #32]
 801e2fa:	b90b      	cbnz	r3, 801e300 <__swsetup_r+0x14>
 801e2fc:	f7fe f97c 	bl	801c5f8 <__sinit>
 801e300:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e304:	0719      	lsls	r1, r3, #28
 801e306:	d422      	bmi.n	801e34e <__swsetup_r+0x62>
 801e308:	06da      	lsls	r2, r3, #27
 801e30a:	d407      	bmi.n	801e31c <__swsetup_r+0x30>
 801e30c:	2209      	movs	r2, #9
 801e30e:	602a      	str	r2, [r5, #0]
 801e310:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e314:	81a3      	strh	r3, [r4, #12]
 801e316:	f04f 30ff 	mov.w	r0, #4294967295
 801e31a:	e033      	b.n	801e384 <__swsetup_r+0x98>
 801e31c:	0758      	lsls	r0, r3, #29
 801e31e:	d512      	bpl.n	801e346 <__swsetup_r+0x5a>
 801e320:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801e322:	b141      	cbz	r1, 801e336 <__swsetup_r+0x4a>
 801e324:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801e328:	4299      	cmp	r1, r3
 801e32a:	d002      	beq.n	801e332 <__swsetup_r+0x46>
 801e32c:	4628      	mov	r0, r5
 801e32e:	f7ff f8b7 	bl	801d4a0 <_free_r>
 801e332:	2300      	movs	r3, #0
 801e334:	6363      	str	r3, [r4, #52]	@ 0x34
 801e336:	89a3      	ldrh	r3, [r4, #12]
 801e338:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801e33c:	81a3      	strh	r3, [r4, #12]
 801e33e:	2300      	movs	r3, #0
 801e340:	6063      	str	r3, [r4, #4]
 801e342:	6923      	ldr	r3, [r4, #16]
 801e344:	6023      	str	r3, [r4, #0]
 801e346:	89a3      	ldrh	r3, [r4, #12]
 801e348:	f043 0308 	orr.w	r3, r3, #8
 801e34c:	81a3      	strh	r3, [r4, #12]
 801e34e:	6923      	ldr	r3, [r4, #16]
 801e350:	b94b      	cbnz	r3, 801e366 <__swsetup_r+0x7a>
 801e352:	89a3      	ldrh	r3, [r4, #12]
 801e354:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801e358:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801e35c:	d003      	beq.n	801e366 <__swsetup_r+0x7a>
 801e35e:	4621      	mov	r1, r4
 801e360:	4628      	mov	r0, r5
 801e362:	f000 f883 	bl	801e46c <__smakebuf_r>
 801e366:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e36a:	f013 0201 	ands.w	r2, r3, #1
 801e36e:	d00a      	beq.n	801e386 <__swsetup_r+0x9a>
 801e370:	2200      	movs	r2, #0
 801e372:	60a2      	str	r2, [r4, #8]
 801e374:	6962      	ldr	r2, [r4, #20]
 801e376:	4252      	negs	r2, r2
 801e378:	61a2      	str	r2, [r4, #24]
 801e37a:	6922      	ldr	r2, [r4, #16]
 801e37c:	b942      	cbnz	r2, 801e390 <__swsetup_r+0xa4>
 801e37e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801e382:	d1c5      	bne.n	801e310 <__swsetup_r+0x24>
 801e384:	bd38      	pop	{r3, r4, r5, pc}
 801e386:	0799      	lsls	r1, r3, #30
 801e388:	bf58      	it	pl
 801e38a:	6962      	ldrpl	r2, [r4, #20]
 801e38c:	60a2      	str	r2, [r4, #8]
 801e38e:	e7f4      	b.n	801e37a <__swsetup_r+0x8e>
 801e390:	2000      	movs	r0, #0
 801e392:	e7f7      	b.n	801e384 <__swsetup_r+0x98>
 801e394:	2000014c 	.word	0x2000014c

0801e398 <_raise_r>:
 801e398:	291f      	cmp	r1, #31
 801e39a:	b538      	push	{r3, r4, r5, lr}
 801e39c:	4605      	mov	r5, r0
 801e39e:	460c      	mov	r4, r1
 801e3a0:	d904      	bls.n	801e3ac <_raise_r+0x14>
 801e3a2:	2316      	movs	r3, #22
 801e3a4:	6003      	str	r3, [r0, #0]
 801e3a6:	f04f 30ff 	mov.w	r0, #4294967295
 801e3aa:	bd38      	pop	{r3, r4, r5, pc}
 801e3ac:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801e3ae:	b112      	cbz	r2, 801e3b6 <_raise_r+0x1e>
 801e3b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801e3b4:	b94b      	cbnz	r3, 801e3ca <_raise_r+0x32>
 801e3b6:	4628      	mov	r0, r5
 801e3b8:	f000 f830 	bl	801e41c <_getpid_r>
 801e3bc:	4622      	mov	r2, r4
 801e3be:	4601      	mov	r1, r0
 801e3c0:	4628      	mov	r0, r5
 801e3c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e3c6:	f000 b817 	b.w	801e3f8 <_kill_r>
 801e3ca:	2b01      	cmp	r3, #1
 801e3cc:	d00a      	beq.n	801e3e4 <_raise_r+0x4c>
 801e3ce:	1c59      	adds	r1, r3, #1
 801e3d0:	d103      	bne.n	801e3da <_raise_r+0x42>
 801e3d2:	2316      	movs	r3, #22
 801e3d4:	6003      	str	r3, [r0, #0]
 801e3d6:	2001      	movs	r0, #1
 801e3d8:	e7e7      	b.n	801e3aa <_raise_r+0x12>
 801e3da:	2100      	movs	r1, #0
 801e3dc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801e3e0:	4620      	mov	r0, r4
 801e3e2:	4798      	blx	r3
 801e3e4:	2000      	movs	r0, #0
 801e3e6:	e7e0      	b.n	801e3aa <_raise_r+0x12>

0801e3e8 <raise>:
 801e3e8:	4b02      	ldr	r3, [pc, #8]	@ (801e3f4 <raise+0xc>)
 801e3ea:	4601      	mov	r1, r0
 801e3ec:	6818      	ldr	r0, [r3, #0]
 801e3ee:	f7ff bfd3 	b.w	801e398 <_raise_r>
 801e3f2:	bf00      	nop
 801e3f4:	2000014c 	.word	0x2000014c

0801e3f8 <_kill_r>:
 801e3f8:	b538      	push	{r3, r4, r5, lr}
 801e3fa:	4d07      	ldr	r5, [pc, #28]	@ (801e418 <_kill_r+0x20>)
 801e3fc:	2300      	movs	r3, #0
 801e3fe:	4604      	mov	r4, r0
 801e400:	4608      	mov	r0, r1
 801e402:	4611      	mov	r1, r2
 801e404:	602b      	str	r3, [r5, #0]
 801e406:	f7e3 ff5b 	bl	80022c0 <_kill>
 801e40a:	1c43      	adds	r3, r0, #1
 801e40c:	d102      	bne.n	801e414 <_kill_r+0x1c>
 801e40e:	682b      	ldr	r3, [r5, #0]
 801e410:	b103      	cbz	r3, 801e414 <_kill_r+0x1c>
 801e412:	6023      	str	r3, [r4, #0]
 801e414:	bd38      	pop	{r3, r4, r5, pc}
 801e416:	bf00      	nop
 801e418:	200024fc 	.word	0x200024fc

0801e41c <_getpid_r>:
 801e41c:	f7e3 bf49 	b.w	80022b2 <_getpid>

0801e420 <__swhatbuf_r>:
 801e420:	b570      	push	{r4, r5, r6, lr}
 801e422:	460c      	mov	r4, r1
 801e424:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e428:	2900      	cmp	r1, #0
 801e42a:	b096      	sub	sp, #88	@ 0x58
 801e42c:	4615      	mov	r5, r2
 801e42e:	461e      	mov	r6, r3
 801e430:	da0d      	bge.n	801e44e <__swhatbuf_r+0x2e>
 801e432:	89a3      	ldrh	r3, [r4, #12]
 801e434:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801e438:	f04f 0100 	mov.w	r1, #0
 801e43c:	bf14      	ite	ne
 801e43e:	2340      	movne	r3, #64	@ 0x40
 801e440:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801e444:	2000      	movs	r0, #0
 801e446:	6031      	str	r1, [r6, #0]
 801e448:	602b      	str	r3, [r5, #0]
 801e44a:	b016      	add	sp, #88	@ 0x58
 801e44c:	bd70      	pop	{r4, r5, r6, pc}
 801e44e:	466a      	mov	r2, sp
 801e450:	f000 f848 	bl	801e4e4 <_fstat_r>
 801e454:	2800      	cmp	r0, #0
 801e456:	dbec      	blt.n	801e432 <__swhatbuf_r+0x12>
 801e458:	9901      	ldr	r1, [sp, #4]
 801e45a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801e45e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801e462:	4259      	negs	r1, r3
 801e464:	4159      	adcs	r1, r3
 801e466:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801e46a:	e7eb      	b.n	801e444 <__swhatbuf_r+0x24>

0801e46c <__smakebuf_r>:
 801e46c:	898b      	ldrh	r3, [r1, #12]
 801e46e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801e470:	079d      	lsls	r5, r3, #30
 801e472:	4606      	mov	r6, r0
 801e474:	460c      	mov	r4, r1
 801e476:	d507      	bpl.n	801e488 <__smakebuf_r+0x1c>
 801e478:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801e47c:	6023      	str	r3, [r4, #0]
 801e47e:	6123      	str	r3, [r4, #16]
 801e480:	2301      	movs	r3, #1
 801e482:	6163      	str	r3, [r4, #20]
 801e484:	b003      	add	sp, #12
 801e486:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e488:	ab01      	add	r3, sp, #4
 801e48a:	466a      	mov	r2, sp
 801e48c:	f7ff ffc8 	bl	801e420 <__swhatbuf_r>
 801e490:	9f00      	ldr	r7, [sp, #0]
 801e492:	4605      	mov	r5, r0
 801e494:	4639      	mov	r1, r7
 801e496:	4630      	mov	r0, r6
 801e498:	f7ff f876 	bl	801d588 <_malloc_r>
 801e49c:	b948      	cbnz	r0, 801e4b2 <__smakebuf_r+0x46>
 801e49e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e4a2:	059a      	lsls	r2, r3, #22
 801e4a4:	d4ee      	bmi.n	801e484 <__smakebuf_r+0x18>
 801e4a6:	f023 0303 	bic.w	r3, r3, #3
 801e4aa:	f043 0302 	orr.w	r3, r3, #2
 801e4ae:	81a3      	strh	r3, [r4, #12]
 801e4b0:	e7e2      	b.n	801e478 <__smakebuf_r+0xc>
 801e4b2:	89a3      	ldrh	r3, [r4, #12]
 801e4b4:	6020      	str	r0, [r4, #0]
 801e4b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801e4ba:	81a3      	strh	r3, [r4, #12]
 801e4bc:	9b01      	ldr	r3, [sp, #4]
 801e4be:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801e4c2:	b15b      	cbz	r3, 801e4dc <__smakebuf_r+0x70>
 801e4c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e4c8:	4630      	mov	r0, r6
 801e4ca:	f000 f81d 	bl	801e508 <_isatty_r>
 801e4ce:	b128      	cbz	r0, 801e4dc <__smakebuf_r+0x70>
 801e4d0:	89a3      	ldrh	r3, [r4, #12]
 801e4d2:	f023 0303 	bic.w	r3, r3, #3
 801e4d6:	f043 0301 	orr.w	r3, r3, #1
 801e4da:	81a3      	strh	r3, [r4, #12]
 801e4dc:	89a3      	ldrh	r3, [r4, #12]
 801e4de:	431d      	orrs	r5, r3
 801e4e0:	81a5      	strh	r5, [r4, #12]
 801e4e2:	e7cf      	b.n	801e484 <__smakebuf_r+0x18>

0801e4e4 <_fstat_r>:
 801e4e4:	b538      	push	{r3, r4, r5, lr}
 801e4e6:	4d07      	ldr	r5, [pc, #28]	@ (801e504 <_fstat_r+0x20>)
 801e4e8:	2300      	movs	r3, #0
 801e4ea:	4604      	mov	r4, r0
 801e4ec:	4608      	mov	r0, r1
 801e4ee:	4611      	mov	r1, r2
 801e4f0:	602b      	str	r3, [r5, #0]
 801e4f2:	f7e3 ff44 	bl	800237e <_fstat>
 801e4f6:	1c43      	adds	r3, r0, #1
 801e4f8:	d102      	bne.n	801e500 <_fstat_r+0x1c>
 801e4fa:	682b      	ldr	r3, [r5, #0]
 801e4fc:	b103      	cbz	r3, 801e500 <_fstat_r+0x1c>
 801e4fe:	6023      	str	r3, [r4, #0]
 801e500:	bd38      	pop	{r3, r4, r5, pc}
 801e502:	bf00      	nop
 801e504:	200024fc 	.word	0x200024fc

0801e508 <_isatty_r>:
 801e508:	b538      	push	{r3, r4, r5, lr}
 801e50a:	4d06      	ldr	r5, [pc, #24]	@ (801e524 <_isatty_r+0x1c>)
 801e50c:	2300      	movs	r3, #0
 801e50e:	4604      	mov	r4, r0
 801e510:	4608      	mov	r0, r1
 801e512:	602b      	str	r3, [r5, #0]
 801e514:	f7e3 ff42 	bl	800239c <_isatty>
 801e518:	1c43      	adds	r3, r0, #1
 801e51a:	d102      	bne.n	801e522 <_isatty_r+0x1a>
 801e51c:	682b      	ldr	r3, [r5, #0]
 801e51e:	b103      	cbz	r3, 801e522 <_isatty_r+0x1a>
 801e520:	6023      	str	r3, [r4, #0]
 801e522:	bd38      	pop	{r3, r4, r5, pc}
 801e524:	200024fc 	.word	0x200024fc

0801e528 <floor>:
 801e528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e52c:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801e530:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 801e534:	2e13      	cmp	r6, #19
 801e536:	4602      	mov	r2, r0
 801e538:	460b      	mov	r3, r1
 801e53a:	460c      	mov	r4, r1
 801e53c:	4605      	mov	r5, r0
 801e53e:	4680      	mov	r8, r0
 801e540:	dc35      	bgt.n	801e5ae <floor+0x86>
 801e542:	2e00      	cmp	r6, #0
 801e544:	da17      	bge.n	801e576 <floor+0x4e>
 801e546:	a334      	add	r3, pc, #208	@ (adr r3, 801e618 <floor+0xf0>)
 801e548:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e54c:	f7e1 fe76 	bl	800023c <__adddf3>
 801e550:	2200      	movs	r2, #0
 801e552:	2300      	movs	r3, #0
 801e554:	f7e2 fab8 	bl	8000ac8 <__aeabi_dcmpgt>
 801e558:	b150      	cbz	r0, 801e570 <floor+0x48>
 801e55a:	2c00      	cmp	r4, #0
 801e55c:	da57      	bge.n	801e60e <floor+0xe6>
 801e55e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801e562:	432c      	orrs	r4, r5
 801e564:	2500      	movs	r5, #0
 801e566:	42ac      	cmp	r4, r5
 801e568:	4c2d      	ldr	r4, [pc, #180]	@ (801e620 <floor+0xf8>)
 801e56a:	bf08      	it	eq
 801e56c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 801e570:	4623      	mov	r3, r4
 801e572:	462a      	mov	r2, r5
 801e574:	e024      	b.n	801e5c0 <floor+0x98>
 801e576:	4f2b      	ldr	r7, [pc, #172]	@ (801e624 <floor+0xfc>)
 801e578:	4137      	asrs	r7, r6
 801e57a:	ea01 0c07 	and.w	ip, r1, r7
 801e57e:	ea5c 0c00 	orrs.w	ip, ip, r0
 801e582:	d01d      	beq.n	801e5c0 <floor+0x98>
 801e584:	a324      	add	r3, pc, #144	@ (adr r3, 801e618 <floor+0xf0>)
 801e586:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e58a:	f7e1 fe57 	bl	800023c <__adddf3>
 801e58e:	2200      	movs	r2, #0
 801e590:	2300      	movs	r3, #0
 801e592:	f7e2 fa99 	bl	8000ac8 <__aeabi_dcmpgt>
 801e596:	2800      	cmp	r0, #0
 801e598:	d0ea      	beq.n	801e570 <floor+0x48>
 801e59a:	2c00      	cmp	r4, #0
 801e59c:	bfbe      	ittt	lt
 801e59e:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 801e5a2:	4133      	asrlt	r3, r6
 801e5a4:	18e4      	addlt	r4, r4, r3
 801e5a6:	ea24 0407 	bic.w	r4, r4, r7
 801e5aa:	2500      	movs	r5, #0
 801e5ac:	e7e0      	b.n	801e570 <floor+0x48>
 801e5ae:	2e33      	cmp	r6, #51	@ 0x33
 801e5b0:	dd0a      	ble.n	801e5c8 <floor+0xa0>
 801e5b2:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801e5b6:	d103      	bne.n	801e5c0 <floor+0x98>
 801e5b8:	f7e1 fe40 	bl	800023c <__adddf3>
 801e5bc:	4602      	mov	r2, r0
 801e5be:	460b      	mov	r3, r1
 801e5c0:	4610      	mov	r0, r2
 801e5c2:	4619      	mov	r1, r3
 801e5c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e5c8:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 801e5cc:	f04f 3cff 	mov.w	ip, #4294967295
 801e5d0:	fa2c f707 	lsr.w	r7, ip, r7
 801e5d4:	4207      	tst	r7, r0
 801e5d6:	d0f3      	beq.n	801e5c0 <floor+0x98>
 801e5d8:	a30f      	add	r3, pc, #60	@ (adr r3, 801e618 <floor+0xf0>)
 801e5da:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e5de:	f7e1 fe2d 	bl	800023c <__adddf3>
 801e5e2:	2200      	movs	r2, #0
 801e5e4:	2300      	movs	r3, #0
 801e5e6:	f7e2 fa6f 	bl	8000ac8 <__aeabi_dcmpgt>
 801e5ea:	2800      	cmp	r0, #0
 801e5ec:	d0c0      	beq.n	801e570 <floor+0x48>
 801e5ee:	2c00      	cmp	r4, #0
 801e5f0:	da0a      	bge.n	801e608 <floor+0xe0>
 801e5f2:	2e14      	cmp	r6, #20
 801e5f4:	d101      	bne.n	801e5fa <floor+0xd2>
 801e5f6:	3401      	adds	r4, #1
 801e5f8:	e006      	b.n	801e608 <floor+0xe0>
 801e5fa:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 801e5fe:	2301      	movs	r3, #1
 801e600:	40b3      	lsls	r3, r6
 801e602:	441d      	add	r5, r3
 801e604:	4545      	cmp	r5, r8
 801e606:	d3f6      	bcc.n	801e5f6 <floor+0xce>
 801e608:	ea25 0507 	bic.w	r5, r5, r7
 801e60c:	e7b0      	b.n	801e570 <floor+0x48>
 801e60e:	2500      	movs	r5, #0
 801e610:	462c      	mov	r4, r5
 801e612:	e7ad      	b.n	801e570 <floor+0x48>
 801e614:	f3af 8000 	nop.w
 801e618:	8800759c 	.word	0x8800759c
 801e61c:	7e37e43c 	.word	0x7e37e43c
 801e620:	bff00000 	.word	0xbff00000
 801e624:	000fffff 	.word	0x000fffff

0801e628 <_init>:
 801e628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e62a:	bf00      	nop
 801e62c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e62e:	bc08      	pop	{r3}
 801e630:	469e      	mov	lr, r3
 801e632:	4770      	bx	lr

0801e634 <_fini>:
 801e634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e636:	bf00      	nop
 801e638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e63a:	bc08      	pop	{r3}
 801e63c:	469e      	mov	lr, r3
 801e63e:	4770      	bx	lr
