
Seeed-LoRa-E5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e590  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000147c  0801e6d0  0801e6d0  0001f6d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .USER_embedded_Keys 000000c0  0801fb4c  0801fb4c  00020b4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0801fc0c  0801fc0c  00021308  2**0
                  CONTENTS
  5 .ARM          00000008  0801fc0c  0801fc0c  00020c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0801fc14  0801fc14  00021308  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0801fc14  0801fc14  00020c14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0801fc18  0801fc18  00020c18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000308  20000000  0801fc1c  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00002220  20000308  0801ff24  00021308  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002528  0801ff24  00021528  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00021308  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003ed6c  00000000  00000000  00021332  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000a2e1  00000000  00000000  0006009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000032c0  00000000  00000000  0006a380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002686  00000000  00000000  0006d640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000288de  00000000  00000000  0006fcc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000439fb  00000000  00000000  000985a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb5c2  00000000  00000000  000dbf9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001a7561  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000ddfc  00000000  00000000  001a75a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000052  00000000  00000000  001b53a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000308 	.word	0x20000308
 800015c:	00000000 	.word	0x00000000
 8000160:	0801e6b8 	.word	0x0801e6b8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000030c 	.word	0x2000030c
 800017c:	0801e6b8 	.word	0x0801e6b8

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_frsub>:
 8000b58:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b5c:	e002      	b.n	8000b64 <__addsf3>
 8000b5e:	bf00      	nop

08000b60 <__aeabi_fsub>:
 8000b60:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b64 <__addsf3>:
 8000b64:	0042      	lsls	r2, r0, #1
 8000b66:	bf1f      	itttt	ne
 8000b68:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b6c:	ea92 0f03 	teqne	r2, r3
 8000b70:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b74:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b78:	d06a      	beq.n	8000c50 <__addsf3+0xec>
 8000b7a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b7e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b82:	bfc1      	itttt	gt
 8000b84:	18d2      	addgt	r2, r2, r3
 8000b86:	4041      	eorgt	r1, r0
 8000b88:	4048      	eorgt	r0, r1
 8000b8a:	4041      	eorgt	r1, r0
 8000b8c:	bfb8      	it	lt
 8000b8e:	425b      	neglt	r3, r3
 8000b90:	2b19      	cmp	r3, #25
 8000b92:	bf88      	it	hi
 8000b94:	4770      	bxhi	lr
 8000b96:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b9e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000baa:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bae:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4249      	negne	r1, r1
 8000bb6:	ea92 0f03 	teq	r2, r3
 8000bba:	d03f      	beq.n	8000c3c <__addsf3+0xd8>
 8000bbc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bc4:	eb10 000c 	adds.w	r0, r0, ip
 8000bc8:	f1c3 0320 	rsb	r3, r3, #32
 8000bcc:	fa01 f103 	lsl.w	r1, r1, r3
 8000bd0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bd4:	d502      	bpl.n	8000bdc <__addsf3+0x78>
 8000bd6:	4249      	negs	r1, r1
 8000bd8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bdc:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000be0:	d313      	bcc.n	8000c0a <__addsf3+0xa6>
 8000be2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000be6:	d306      	bcc.n	8000bf6 <__addsf3+0x92>
 8000be8:	0840      	lsrs	r0, r0, #1
 8000bea:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bee:	f102 0201 	add.w	r2, r2, #1
 8000bf2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bf4:	d251      	bcs.n	8000c9a <__addsf3+0x136>
 8000bf6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bfa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bfe:	bf08      	it	eq
 8000c00:	f020 0001 	biceq.w	r0, r0, #1
 8000c04:	ea40 0003 	orr.w	r0, r0, r3
 8000c08:	4770      	bx	lr
 8000c0a:	0049      	lsls	r1, r1, #1
 8000c0c:	eb40 0000 	adc.w	r0, r0, r0
 8000c10:	3a01      	subs	r2, #1
 8000c12:	bf28      	it	cs
 8000c14:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c18:	d2ed      	bcs.n	8000bf6 <__addsf3+0x92>
 8000c1a:	fab0 fc80 	clz	ip, r0
 8000c1e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c22:	ebb2 020c 	subs.w	r2, r2, ip
 8000c26:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c2a:	bfaa      	itet	ge
 8000c2c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c30:	4252      	neglt	r2, r2
 8000c32:	4318      	orrge	r0, r3
 8000c34:	bfbc      	itt	lt
 8000c36:	40d0      	lsrlt	r0, r2
 8000c38:	4318      	orrlt	r0, r3
 8000c3a:	4770      	bx	lr
 8000c3c:	f092 0f00 	teq	r2, #0
 8000c40:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c44:	bf06      	itte	eq
 8000c46:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c4a:	3201      	addeq	r2, #1
 8000c4c:	3b01      	subne	r3, #1
 8000c4e:	e7b5      	b.n	8000bbc <__addsf3+0x58>
 8000c50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c58:	bf18      	it	ne
 8000c5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c5e:	d021      	beq.n	8000ca4 <__addsf3+0x140>
 8000c60:	ea92 0f03 	teq	r2, r3
 8000c64:	d004      	beq.n	8000c70 <__addsf3+0x10c>
 8000c66:	f092 0f00 	teq	r2, #0
 8000c6a:	bf08      	it	eq
 8000c6c:	4608      	moveq	r0, r1
 8000c6e:	4770      	bx	lr
 8000c70:	ea90 0f01 	teq	r0, r1
 8000c74:	bf1c      	itt	ne
 8000c76:	2000      	movne	r0, #0
 8000c78:	4770      	bxne	lr
 8000c7a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c7e:	d104      	bne.n	8000c8a <__addsf3+0x126>
 8000c80:	0040      	lsls	r0, r0, #1
 8000c82:	bf28      	it	cs
 8000c84:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c88:	4770      	bx	lr
 8000c8a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c8e:	bf3c      	itt	cc
 8000c90:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bxcc	lr
 8000c96:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c9a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c9e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca2:	4770      	bx	lr
 8000ca4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca8:	bf16      	itet	ne
 8000caa:	4608      	movne	r0, r1
 8000cac:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cb0:	4601      	movne	r1, r0
 8000cb2:	0242      	lsls	r2, r0, #9
 8000cb4:	bf06      	itte	eq
 8000cb6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cba:	ea90 0f01 	teqeq	r0, r1
 8000cbe:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cc2:	4770      	bx	lr

08000cc4 <__aeabi_ui2f>:
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	e004      	b.n	8000cd4 <__aeabi_i2f+0x8>
 8000cca:	bf00      	nop

08000ccc <__aeabi_i2f>:
 8000ccc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000cd0:	bf48      	it	mi
 8000cd2:	4240      	negmi	r0, r0
 8000cd4:	ea5f 0c00 	movs.w	ip, r0
 8000cd8:	bf08      	it	eq
 8000cda:	4770      	bxeq	lr
 8000cdc:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000ce0:	4601      	mov	r1, r0
 8000ce2:	f04f 0000 	mov.w	r0, #0
 8000ce6:	e01c      	b.n	8000d22 <__aeabi_l2f+0x2a>

08000ce8 <__aeabi_ul2f>:
 8000ce8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cec:	bf08      	it	eq
 8000cee:	4770      	bxeq	lr
 8000cf0:	f04f 0300 	mov.w	r3, #0
 8000cf4:	e00a      	b.n	8000d0c <__aeabi_l2f+0x14>
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_l2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d04:	d502      	bpl.n	8000d0c <__aeabi_l2f+0x14>
 8000d06:	4240      	negs	r0, r0
 8000d08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0c:	ea5f 0c01 	movs.w	ip, r1
 8000d10:	bf02      	ittt	eq
 8000d12:	4684      	moveq	ip, r0
 8000d14:	4601      	moveq	r1, r0
 8000d16:	2000      	moveq	r0, #0
 8000d18:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d1c:	bf08      	it	eq
 8000d1e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d22:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d26:	fabc f28c 	clz	r2, ip
 8000d2a:	3a08      	subs	r2, #8
 8000d2c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d30:	db10      	blt.n	8000d54 <__aeabi_l2f+0x5c>
 8000d32:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d36:	4463      	add	r3, ip
 8000d38:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d3c:	f1c2 0220 	rsb	r2, r2, #32
 8000d40:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d44:	fa20 f202 	lsr.w	r2, r0, r2
 8000d48:	eb43 0002 	adc.w	r0, r3, r2
 8000d4c:	bf08      	it	eq
 8000d4e:	f020 0001 	biceq.w	r0, r0, #1
 8000d52:	4770      	bx	lr
 8000d54:	f102 0220 	add.w	r2, r2, #32
 8000d58:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5c:	f1c2 0220 	rsb	r2, r2, #32
 8000d60:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d64:	fa21 f202 	lsr.w	r2, r1, r2
 8000d68:	eb43 0002 	adc.w	r0, r3, r2
 8000d6c:	bf08      	it	eq
 8000d6e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d72:	4770      	bx	lr

08000d74 <__aeabi_f2iz>:
 8000d74:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d78:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000d7c:	d30f      	bcc.n	8000d9e <__aeabi_f2iz+0x2a>
 8000d7e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000d82:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d86:	d90d      	bls.n	8000da4 <__aeabi_f2iz+0x30>
 8000d88:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d8c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000d90:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000d94:	fa23 f002 	lsr.w	r0, r3, r2
 8000d98:	bf18      	it	ne
 8000d9a:	4240      	negne	r0, r0
 8000d9c:	4770      	bx	lr
 8000d9e:	f04f 0000 	mov.w	r0, #0
 8000da2:	4770      	bx	lr
 8000da4:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000da8:	d101      	bne.n	8000dae <__aeabi_f2iz+0x3a>
 8000daa:	0242      	lsls	r2, r0, #9
 8000dac:	d105      	bne.n	8000dba <__aeabi_f2iz+0x46>
 8000dae:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000db8:	4770      	bx	lr
 8000dba:	f04f 0000 	mov.w	r0, #0
 8000dbe:	4770      	bx	lr

08000dc0 <__aeabi_uldivmod>:
 8000dc0:	b953      	cbnz	r3, 8000dd8 <__aeabi_uldivmod+0x18>
 8000dc2:	b94a      	cbnz	r2, 8000dd8 <__aeabi_uldivmod+0x18>
 8000dc4:	2900      	cmp	r1, #0
 8000dc6:	bf08      	it	eq
 8000dc8:	2800      	cmpeq	r0, #0
 8000dca:	bf1c      	itt	ne
 8000dcc:	f04f 31ff 	movne.w	r1, #4294967295
 8000dd0:	f04f 30ff 	movne.w	r0, #4294967295
 8000dd4:	f000 b988 	b.w	80010e8 <__aeabi_idiv0>
 8000dd8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ddc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000de0:	f000 f806 	bl	8000df0 <__udivmoddi4>
 8000de4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000de8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000dec:	b004      	add	sp, #16
 8000dee:	4770      	bx	lr

08000df0 <__udivmoddi4>:
 8000df0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000df4:	9d08      	ldr	r5, [sp, #32]
 8000df6:	468e      	mov	lr, r1
 8000df8:	4604      	mov	r4, r0
 8000dfa:	4688      	mov	r8, r1
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d14a      	bne.n	8000e96 <__udivmoddi4+0xa6>
 8000e00:	428a      	cmp	r2, r1
 8000e02:	4617      	mov	r7, r2
 8000e04:	d962      	bls.n	8000ecc <__udivmoddi4+0xdc>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	b14e      	cbz	r6, 8000e20 <__udivmoddi4+0x30>
 8000e0c:	f1c6 0320 	rsb	r3, r6, #32
 8000e10:	fa01 f806 	lsl.w	r8, r1, r6
 8000e14:	fa20 f303 	lsr.w	r3, r0, r3
 8000e18:	40b7      	lsls	r7, r6
 8000e1a:	ea43 0808 	orr.w	r8, r3, r8
 8000e1e:	40b4      	lsls	r4, r6
 8000e20:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e24:	fa1f fc87 	uxth.w	ip, r7
 8000e28:	fbb8 f1fe 	udiv	r1, r8, lr
 8000e2c:	0c23      	lsrs	r3, r4, #16
 8000e2e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000e32:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e36:	fb01 f20c 	mul.w	r2, r1, ip
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x62>
 8000e3e:	18fb      	adds	r3, r7, r3
 8000e40:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e44:	f080 80ea 	bcs.w	800101c <__udivmoddi4+0x22c>
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	f240 80e7 	bls.w	800101c <__udivmoddi4+0x22c>
 8000e4e:	3902      	subs	r1, #2
 8000e50:	443b      	add	r3, r7
 8000e52:	1a9a      	subs	r2, r3, r2
 8000e54:	b2a3      	uxth	r3, r4
 8000e56:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e5a:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e62:	fb00 fc0c 	mul.w	ip, r0, ip
 8000e66:	459c      	cmp	ip, r3
 8000e68:	d909      	bls.n	8000e7e <__udivmoddi4+0x8e>
 8000e6a:	18fb      	adds	r3, r7, r3
 8000e6c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e70:	f080 80d6 	bcs.w	8001020 <__udivmoddi4+0x230>
 8000e74:	459c      	cmp	ip, r3
 8000e76:	f240 80d3 	bls.w	8001020 <__udivmoddi4+0x230>
 8000e7a:	443b      	add	r3, r7
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e82:	eba3 030c 	sub.w	r3, r3, ip
 8000e86:	2100      	movs	r1, #0
 8000e88:	b11d      	cbz	r5, 8000e92 <__udivmoddi4+0xa2>
 8000e8a:	40f3      	lsrs	r3, r6
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	e9c5 3200 	strd	r3, r2, [r5]
 8000e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e96:	428b      	cmp	r3, r1
 8000e98:	d905      	bls.n	8000ea6 <__udivmoddi4+0xb6>
 8000e9a:	b10d      	cbz	r5, 8000ea0 <__udivmoddi4+0xb0>
 8000e9c:	e9c5 0100 	strd	r0, r1, [r5]
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	4608      	mov	r0, r1
 8000ea4:	e7f5      	b.n	8000e92 <__udivmoddi4+0xa2>
 8000ea6:	fab3 f183 	clz	r1, r3
 8000eaa:	2900      	cmp	r1, #0
 8000eac:	d146      	bne.n	8000f3c <__udivmoddi4+0x14c>
 8000eae:	4573      	cmp	r3, lr
 8000eb0:	d302      	bcc.n	8000eb8 <__udivmoddi4+0xc8>
 8000eb2:	4282      	cmp	r2, r0
 8000eb4:	f200 8105 	bhi.w	80010c2 <__udivmoddi4+0x2d2>
 8000eb8:	1a84      	subs	r4, r0, r2
 8000eba:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ebe:	2001      	movs	r0, #1
 8000ec0:	4690      	mov	r8, r2
 8000ec2:	2d00      	cmp	r5, #0
 8000ec4:	d0e5      	beq.n	8000e92 <__udivmoddi4+0xa2>
 8000ec6:	e9c5 4800 	strd	r4, r8, [r5]
 8000eca:	e7e2      	b.n	8000e92 <__udivmoddi4+0xa2>
 8000ecc:	2a00      	cmp	r2, #0
 8000ece:	f000 8090 	beq.w	8000ff2 <__udivmoddi4+0x202>
 8000ed2:	fab2 f682 	clz	r6, r2
 8000ed6:	2e00      	cmp	r6, #0
 8000ed8:	f040 80a4 	bne.w	8001024 <__udivmoddi4+0x234>
 8000edc:	1a8a      	subs	r2, r1, r2
 8000ede:	0c03      	lsrs	r3, r0, #16
 8000ee0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ee4:	b280      	uxth	r0, r0
 8000ee6:	b2bc      	uxth	r4, r7
 8000ee8:	2101      	movs	r1, #1
 8000eea:	fbb2 fcfe 	udiv	ip, r2, lr
 8000eee:	fb0e 221c 	mls	r2, lr, ip, r2
 8000ef2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ef6:	fb04 f20c 	mul.w	r2, r4, ip
 8000efa:	429a      	cmp	r2, r3
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x11e>
 8000efe:	18fb      	adds	r3, r7, r3
 8000f00:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000f04:	d202      	bcs.n	8000f0c <__udivmoddi4+0x11c>
 8000f06:	429a      	cmp	r2, r3
 8000f08:	f200 80e0 	bhi.w	80010cc <__udivmoddi4+0x2dc>
 8000f0c:	46c4      	mov	ip, r8
 8000f0e:	1a9b      	subs	r3, r3, r2
 8000f10:	fbb3 f2fe 	udiv	r2, r3, lr
 8000f14:	fb0e 3312 	mls	r3, lr, r2, r3
 8000f18:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000f1c:	fb02 f404 	mul.w	r4, r2, r4
 8000f20:	429c      	cmp	r4, r3
 8000f22:	d907      	bls.n	8000f34 <__udivmoddi4+0x144>
 8000f24:	18fb      	adds	r3, r7, r3
 8000f26:	f102 30ff 	add.w	r0, r2, #4294967295
 8000f2a:	d202      	bcs.n	8000f32 <__udivmoddi4+0x142>
 8000f2c:	429c      	cmp	r4, r3
 8000f2e:	f200 80ca 	bhi.w	80010c6 <__udivmoddi4+0x2d6>
 8000f32:	4602      	mov	r2, r0
 8000f34:	1b1b      	subs	r3, r3, r4
 8000f36:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000f3a:	e7a5      	b.n	8000e88 <__udivmoddi4+0x98>
 8000f3c:	f1c1 0620 	rsb	r6, r1, #32
 8000f40:	408b      	lsls	r3, r1
 8000f42:	fa22 f706 	lsr.w	r7, r2, r6
 8000f46:	431f      	orrs	r7, r3
 8000f48:	fa0e f401 	lsl.w	r4, lr, r1
 8000f4c:	fa20 f306 	lsr.w	r3, r0, r6
 8000f50:	fa2e fe06 	lsr.w	lr, lr, r6
 8000f54:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000f58:	4323      	orrs	r3, r4
 8000f5a:	fa00 f801 	lsl.w	r8, r0, r1
 8000f5e:	fa1f fc87 	uxth.w	ip, r7
 8000f62:	fbbe f0f9 	udiv	r0, lr, r9
 8000f66:	0c1c      	lsrs	r4, r3, #16
 8000f68:	fb09 ee10 	mls	lr, r9, r0, lr
 8000f6c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000f70:	fb00 fe0c 	mul.w	lr, r0, ip
 8000f74:	45a6      	cmp	lr, r4
 8000f76:	fa02 f201 	lsl.w	r2, r2, r1
 8000f7a:	d909      	bls.n	8000f90 <__udivmoddi4+0x1a0>
 8000f7c:	193c      	adds	r4, r7, r4
 8000f7e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000f82:	f080 809c 	bcs.w	80010be <__udivmoddi4+0x2ce>
 8000f86:	45a6      	cmp	lr, r4
 8000f88:	f240 8099 	bls.w	80010be <__udivmoddi4+0x2ce>
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	443c      	add	r4, r7
 8000f90:	eba4 040e 	sub.w	r4, r4, lr
 8000f94:	fa1f fe83 	uxth.w	lr, r3
 8000f98:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f9c:	fb09 4413 	mls	r4, r9, r3, r4
 8000fa0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000fa4:	fb03 fc0c 	mul.w	ip, r3, ip
 8000fa8:	45a4      	cmp	ip, r4
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x1ce>
 8000fac:	193c      	adds	r4, r7, r4
 8000fae:	f103 3eff 	add.w	lr, r3, #4294967295
 8000fb2:	f080 8082 	bcs.w	80010ba <__udivmoddi4+0x2ca>
 8000fb6:	45a4      	cmp	ip, r4
 8000fb8:	d97f      	bls.n	80010ba <__udivmoddi4+0x2ca>
 8000fba:	3b02      	subs	r3, #2
 8000fbc:	443c      	add	r4, r7
 8000fbe:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000fc2:	eba4 040c 	sub.w	r4, r4, ip
 8000fc6:	fba0 ec02 	umull	lr, ip, r0, r2
 8000fca:	4564      	cmp	r4, ip
 8000fcc:	4673      	mov	r3, lr
 8000fce:	46e1      	mov	r9, ip
 8000fd0:	d362      	bcc.n	8001098 <__udivmoddi4+0x2a8>
 8000fd2:	d05f      	beq.n	8001094 <__udivmoddi4+0x2a4>
 8000fd4:	b15d      	cbz	r5, 8000fee <__udivmoddi4+0x1fe>
 8000fd6:	ebb8 0203 	subs.w	r2, r8, r3
 8000fda:	eb64 0409 	sbc.w	r4, r4, r9
 8000fde:	fa04 f606 	lsl.w	r6, r4, r6
 8000fe2:	fa22 f301 	lsr.w	r3, r2, r1
 8000fe6:	431e      	orrs	r6, r3
 8000fe8:	40cc      	lsrs	r4, r1
 8000fea:	e9c5 6400 	strd	r6, r4, [r5]
 8000fee:	2100      	movs	r1, #0
 8000ff0:	e74f      	b.n	8000e92 <__udivmoddi4+0xa2>
 8000ff2:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ff6:	0c01      	lsrs	r1, r0, #16
 8000ff8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ffc:	b280      	uxth	r0, r0
 8000ffe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8001002:	463b      	mov	r3, r7
 8001004:	4638      	mov	r0, r7
 8001006:	463c      	mov	r4, r7
 8001008:	46b8      	mov	r8, r7
 800100a:	46be      	mov	lr, r7
 800100c:	2620      	movs	r6, #32
 800100e:	fbb1 f1f7 	udiv	r1, r1, r7
 8001012:	eba2 0208 	sub.w	r2, r2, r8
 8001016:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800101a:	e766      	b.n	8000eea <__udivmoddi4+0xfa>
 800101c:	4601      	mov	r1, r0
 800101e:	e718      	b.n	8000e52 <__udivmoddi4+0x62>
 8001020:	4610      	mov	r0, r2
 8001022:	e72c      	b.n	8000e7e <__udivmoddi4+0x8e>
 8001024:	f1c6 0220 	rsb	r2, r6, #32
 8001028:	fa2e f302 	lsr.w	r3, lr, r2
 800102c:	40b7      	lsls	r7, r6
 800102e:	40b1      	lsls	r1, r6
 8001030:	fa20 f202 	lsr.w	r2, r0, r2
 8001034:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001038:	430a      	orrs	r2, r1
 800103a:	fbb3 f8fe 	udiv	r8, r3, lr
 800103e:	b2bc      	uxth	r4, r7
 8001040:	fb0e 3318 	mls	r3, lr, r8, r3
 8001044:	0c11      	lsrs	r1, r2, #16
 8001046:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800104a:	fb08 f904 	mul.w	r9, r8, r4
 800104e:	40b0      	lsls	r0, r6
 8001050:	4589      	cmp	r9, r1
 8001052:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8001056:	b280      	uxth	r0, r0
 8001058:	d93e      	bls.n	80010d8 <__udivmoddi4+0x2e8>
 800105a:	1879      	adds	r1, r7, r1
 800105c:	f108 3cff 	add.w	ip, r8, #4294967295
 8001060:	d201      	bcs.n	8001066 <__udivmoddi4+0x276>
 8001062:	4589      	cmp	r9, r1
 8001064:	d81f      	bhi.n	80010a6 <__udivmoddi4+0x2b6>
 8001066:	eba1 0109 	sub.w	r1, r1, r9
 800106a:	fbb1 f9fe 	udiv	r9, r1, lr
 800106e:	fb09 f804 	mul.w	r8, r9, r4
 8001072:	fb0e 1119 	mls	r1, lr, r9, r1
 8001076:	b292      	uxth	r2, r2
 8001078:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800107c:	4542      	cmp	r2, r8
 800107e:	d229      	bcs.n	80010d4 <__udivmoddi4+0x2e4>
 8001080:	18ba      	adds	r2, r7, r2
 8001082:	f109 31ff 	add.w	r1, r9, #4294967295
 8001086:	d2c4      	bcs.n	8001012 <__udivmoddi4+0x222>
 8001088:	4542      	cmp	r2, r8
 800108a:	d2c2      	bcs.n	8001012 <__udivmoddi4+0x222>
 800108c:	f1a9 0102 	sub.w	r1, r9, #2
 8001090:	443a      	add	r2, r7
 8001092:	e7be      	b.n	8001012 <__udivmoddi4+0x222>
 8001094:	45f0      	cmp	r8, lr
 8001096:	d29d      	bcs.n	8000fd4 <__udivmoddi4+0x1e4>
 8001098:	ebbe 0302 	subs.w	r3, lr, r2
 800109c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80010a0:	3801      	subs	r0, #1
 80010a2:	46e1      	mov	r9, ip
 80010a4:	e796      	b.n	8000fd4 <__udivmoddi4+0x1e4>
 80010a6:	eba7 0909 	sub.w	r9, r7, r9
 80010aa:	4449      	add	r1, r9
 80010ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80010b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80010b4:	fb09 f804 	mul.w	r8, r9, r4
 80010b8:	e7db      	b.n	8001072 <__udivmoddi4+0x282>
 80010ba:	4673      	mov	r3, lr
 80010bc:	e77f      	b.n	8000fbe <__udivmoddi4+0x1ce>
 80010be:	4650      	mov	r0, sl
 80010c0:	e766      	b.n	8000f90 <__udivmoddi4+0x1a0>
 80010c2:	4608      	mov	r0, r1
 80010c4:	e6fd      	b.n	8000ec2 <__udivmoddi4+0xd2>
 80010c6:	443b      	add	r3, r7
 80010c8:	3a02      	subs	r2, #2
 80010ca:	e733      	b.n	8000f34 <__udivmoddi4+0x144>
 80010cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80010d0:	443b      	add	r3, r7
 80010d2:	e71c      	b.n	8000f0e <__udivmoddi4+0x11e>
 80010d4:	4649      	mov	r1, r9
 80010d6:	e79c      	b.n	8001012 <__udivmoddi4+0x222>
 80010d8:	eba1 0109 	sub.w	r1, r1, r9
 80010dc:	46c4      	mov	ip, r8
 80010de:	fbb1 f9fe 	udiv	r9, r1, lr
 80010e2:	fb09 f804 	mul.w	r8, r9, r4
 80010e6:	e7c4      	b.n	8001072 <__udivmoddi4+0x282>

080010e8 <__aeabi_idiv0>:
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop

080010ec <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b085      	sub	sp, #20
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80010f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80010f8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80010fa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4313      	orrs	r3, r2
 8001102:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001104:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001108:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4013      	ands	r3, r2
 800110e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001110:	68fb      	ldr	r3, [r7, #12]
}
 8001112:	bf00      	nop
 8001114:	3714      	adds	r7, #20
 8001116:	46bd      	mov	sp, r7
 8001118:	bc80      	pop	{r7}
 800111a:	4770      	bx	lr

0800111c <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8001124:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001128:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	43db      	mvns	r3, r3
 800112e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001132:	4013      	ands	r3, r2
 8001134:	660b      	str	r3, [r1, #96]	@ 0x60
}
 8001136:	bf00      	nop
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	bc80      	pop	{r7}
 800113e:	4770      	bx	lr

08001140 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8001144:	4b23      	ldr	r3, [pc, #140]	@ (80011d4 <MX_ADC_Init+0x94>)
 8001146:	4a24      	ldr	r2, [pc, #144]	@ (80011d8 <MX_ADC_Init+0x98>)
 8001148:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800114a:	4b22      	ldr	r3, [pc, #136]	@ (80011d4 <MX_ADC_Init+0x94>)
 800114c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001150:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001152:	4b20      	ldr	r3, [pc, #128]	@ (80011d4 <MX_ADC_Init+0x94>)
 8001154:	2200      	movs	r2, #0
 8001156:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001158:	4b1e      	ldr	r3, [pc, #120]	@ (80011d4 <MX_ADC_Init+0x94>)
 800115a:	2200      	movs	r2, #0
 800115c:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800115e:	4b1d      	ldr	r3, [pc, #116]	@ (80011d4 <MX_ADC_Init+0x94>)
 8001160:	2200      	movs	r2, #0
 8001162:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001164:	4b1b      	ldr	r3, [pc, #108]	@ (80011d4 <MX_ADC_Init+0x94>)
 8001166:	2204      	movs	r2, #4
 8001168:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800116a:	4b1a      	ldr	r3, [pc, #104]	@ (80011d4 <MX_ADC_Init+0x94>)
 800116c:	2200      	movs	r2, #0
 800116e:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001170:	4b18      	ldr	r3, [pc, #96]	@ (80011d4 <MX_ADC_Init+0x94>)
 8001172:	2200      	movs	r2, #0
 8001174:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001176:	4b17      	ldr	r3, [pc, #92]	@ (80011d4 <MX_ADC_Init+0x94>)
 8001178:	2200      	movs	r2, #0
 800117a:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 800117c:	4b15      	ldr	r3, [pc, #84]	@ (80011d4 <MX_ADC_Init+0x94>)
 800117e:	2201      	movs	r2, #1
 8001180:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001182:	4b14      	ldr	r3, [pc, #80]	@ (80011d4 <MX_ADC_Init+0x94>)
 8001184:	2200      	movs	r2, #0
 8001186:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800118a:	4b12      	ldr	r3, [pc, #72]	@ (80011d4 <MX_ADC_Init+0x94>)
 800118c:	2200      	movs	r2, #0
 800118e:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001190:	4b10      	ldr	r3, [pc, #64]	@ (80011d4 <MX_ADC_Init+0x94>)
 8001192:	2200      	movs	r2, #0
 8001194:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001196:	4b0f      	ldr	r3, [pc, #60]	@ (80011d4 <MX_ADC_Init+0x94>)
 8001198:	2200      	movs	r2, #0
 800119a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800119e:	4b0d      	ldr	r3, [pc, #52]	@ (80011d4 <MX_ADC_Init+0x94>)
 80011a0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80011a4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 80011a6:	4b0b      	ldr	r3, [pc, #44]	@ (80011d4 <MX_ADC_Init+0x94>)
 80011a8:	2207      	movs	r2, #7
 80011aa:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 80011ac:	4b09      	ldr	r3, [pc, #36]	@ (80011d4 <MX_ADC_Init+0x94>)
 80011ae:	2207      	movs	r2, #7
 80011b0:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.OversamplingMode = DISABLE;
 80011b2:	4b08      	ldr	r3, [pc, #32]	@ (80011d4 <MX_ADC_Init+0x94>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80011ba:	4b06      	ldr	r3, [pc, #24]	@ (80011d4 <MX_ADC_Init+0x94>)
 80011bc:	2200      	movs	r2, #0
 80011be:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80011c0:	4804      	ldr	r0, [pc, #16]	@ (80011d4 <MX_ADC_Init+0x94>)
 80011c2:	f002 f9ad 	bl	8003520 <HAL_ADC_Init>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_ADC_Init+0x90>
  {
    Error_Handler();
 80011cc:	f000 fcba 	bl	8001b44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80011d0:	bf00      	nop
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	20000324 	.word	0x20000324
 80011d8:	40012400 	.word	0x40012400

080011dc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a05      	ldr	r2, [pc, #20]	@ (8001200 <HAL_ADC_MspInit+0x24>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d103      	bne.n	80011f6 <HAL_ADC_MspInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80011ee:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80011f2:	f7ff ff7b 	bl	80010ec <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 80011f6:	bf00      	nop
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40012400 	.word	0x40012400

08001204 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a05      	ldr	r2, [pc, #20]	@ (8001228 <HAL_ADC_MspDeInit+0x24>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d103      	bne.n	800121e <HAL_ADC_MspDeInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 8001216:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800121a:	f7ff ff7f 	bl	800111c <LL_APB2_GRP1_DisableClock>
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 800121e:	bf00      	nop
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40012400 	.word	0x40012400

0800122c <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 8001230:	4b03      	ldr	r3, [pc, #12]	@ (8001240 <SYS_InitMeasurement+0x14>)
 8001232:	4a04      	ldr	r2, [pc, #16]	@ (8001244 <SYS_InitMeasurement+0x18>)
 8001234:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 8001236:	bf00      	nop
 8001238:	46bd      	mov	sp, r7
 800123a:	bc80      	pop	{r7}
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	20000324 	.word	0x20000324
 8001244:	40012400 	.word	0x40012400

08001248 <SYS_GetBatteryLevel>:

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}

uint16_t SYS_GetBatteryLevel(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 800124e:	2300      	movs	r3, #0
 8001250:	80fb      	strh	r3, [r7, #6]
  uint32_t measuredLevel = 0;
 8001252:	2300      	movs	r3, #0
 8001254:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 8001256:	4813      	ldr	r0, [pc, #76]	@ (80012a4 <SYS_GetBatteryLevel+0x5c>)
 8001258:	f000 f82a 	bl	80012b0 <ADC_ReadChannels>
 800125c:	6038      	str	r0, [r7, #0]

  if (measuredLevel == 0)
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d102      	bne.n	800126a <SYS_GetBatteryLevel+0x22>
  {
    batteryLevelmV = 0;
 8001264:	2300      	movs	r3, #0
 8001266:	80fb      	strh	r3, [r7, #6]
 8001268:	e016      	b.n	8001298 <SYS_GetBatteryLevel+0x50>
  }
  else
  {
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 800126a:	4b0f      	ldr	r3, [pc, #60]	@ (80012a8 <SYS_GetBatteryLevel+0x60>)
 800126c:	881b      	ldrh	r3, [r3, #0]
 800126e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001272:	4293      	cmp	r3, r2
 8001274:	d00b      	beq.n	800128e <SYS_GetBatteryLevel+0x46>
    {
      /* Device with Reference voltage calibrated in production:
         use device optimized parameters */
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 8001276:	4b0c      	ldr	r3, [pc, #48]	@ (80012a8 <SYS_GetBatteryLevel+0x60>)
 8001278:	881b      	ldrh	r3, [r3, #0]
 800127a:	461a      	mov	r2, r3
 800127c:	f640 43e4 	movw	r3, #3300	@ 0xce4
 8001280:	fb03 f202 	mul.w	r2, r3, r2
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	fbb2 f3f3 	udiv	r3, r2, r3
 800128a:	80fb      	strh	r3, [r7, #6]
 800128c:	e004      	b.n	8001298 <SYS_GetBatteryLevel+0x50>
    }
    else
    {
      /* Device with Reference voltage not calibrated in production:
         use generic parameters */
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 800128e:	4a07      	ldr	r2, [pc, #28]	@ (80012ac <SYS_GetBatteryLevel+0x64>)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	fbb2 f3f3 	udiv	r3, r2, r3
 8001296:	80fb      	strh	r3, [r7, #6]
    }
  }

  return batteryLevelmV;
 8001298:	88fb      	ldrh	r3, [r7, #6]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 800129a:	4618      	mov	r0, r3
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	b4002000 	.word	0xb4002000
 80012a8:	1fff75aa 	.word	0x1fff75aa
 80012ac:	004c08d8 	.word	0x004c08d8

080012b0 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b086      	sub	sp, #24
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 80012bc:	f107 0308 	add.w	r3, r7, #8
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 80012c8:	f7ff ff3a 	bl	8001140 <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 80012cc:	481a      	ldr	r0, [pc, #104]	@ (8001338 <ADC_ReadChannels+0x88>)
 80012ce:	f002 ff56 	bl	800417e <HAL_ADCEx_Calibration_Start>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 80012d8:	f000 fc34 	bl	8001b44 <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012e0:	2300      	movs	r3, #0
 80012e2:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80012e4:	2300      	movs	r3, #0
 80012e6:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80012e8:	f107 0308 	add.w	r3, r7, #8
 80012ec:	4619      	mov	r1, r3
 80012ee:	4812      	ldr	r0, [pc, #72]	@ (8001338 <ADC_ReadChannels+0x88>)
 80012f0:	f002 fc62 	bl	8003bb8 <HAL_ADC_ConfigChannel>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 80012fa:	f000 fc23 	bl	8001b44 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 80012fe:	480e      	ldr	r0, [pc, #56]	@ (8001338 <ADC_ReadChannels+0x88>)
 8001300:	f002 fb3e 	bl	8003980 <HAL_ADC_Start>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 800130a:	f000 fc1b 	bl	8001b44 <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 800130e:	f04f 31ff 	mov.w	r1, #4294967295
 8001312:	4809      	ldr	r0, [pc, #36]	@ (8001338 <ADC_ReadChannels+0x88>)
 8001314:	f002 fbac 	bl	8003a70 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 8001318:	4807      	ldr	r0, [pc, #28]	@ (8001338 <ADC_ReadChannels+0x88>)
 800131a:	f002 fb77 	bl	8003a0c <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 800131e:	4806      	ldr	r0, [pc, #24]	@ (8001338 <ADC_ReadChannels+0x88>)
 8001320:	f002 fc3d 	bl	8003b9e <HAL_ADC_GetValue>
 8001324:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 8001326:	4804      	ldr	r0, [pc, #16]	@ (8001338 <ADC_ReadChannels+0x88>)
 8001328:	f002 faae 	bl	8003888 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 800132c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 800132e:	4618      	mov	r0, r3
 8001330:	3718      	adds	r7, #24
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	20000324 	.word	0x20000324

0800133c <LL_AHB1_GRP1_EnableClock>:
{
 800133c:	b480      	push	{r7}
 800133e:	b085      	sub	sp, #20
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001344:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001348:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800134a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4313      	orrs	r3, r2
 8001352:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001354:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001358:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4013      	ands	r3, r2
 800135e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001360:	68fb      	ldr	r3, [r7, #12]
}
 8001362:	bf00      	nop
 8001364:	3714      	adds	r7, #20
 8001366:	46bd      	mov	sp, r7
 8001368:	bc80      	pop	{r7}
 800136a:	4770      	bx	lr

0800136c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001370:	2004      	movs	r0, #4
 8001372:	f7ff ffe3 	bl	800133c <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001376:	2001      	movs	r0, #1
 8001378:	f7ff ffe0 	bl	800133c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 800137c:	2200      	movs	r2, #0
 800137e:	2102      	movs	r1, #2
 8001380:	200b      	movs	r0, #11
 8001382:	f003 f8a2 	bl	80044ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001386:	200b      	movs	r0, #11
 8001388:	f003 f8b9 	bl	80044fe <HAL_NVIC_EnableIRQ>

}
 800138c:	bf00      	nop
 800138e:	bd80      	pop	{r7, pc}

08001390 <LL_FLASH_IsActiveFlag_OperationSuspended>:
  * @rmtoll FLASH_SR      PESD         LL_FLASH_IsActiveFlag_OperationSuspended
  * @rmtoll FLASH_C2SR    PESD         LL_FLASH_IsActiveFlag_OperationSuspended
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_FLASH_IsActiveFlag_OperationSuspended(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
#if defined(CORE_CM0PLUS)
  return ((READ_BIT(FLASH->C2SR, FLASH_C2SR_PESD) == (FLASH_C2SR_PESD)) ? 1UL : 0UL);
#else
  return ((READ_BIT(FLASH->SR, FLASH_SR_PESD) == (FLASH_SR_PESD)) ? 1UL : 0UL);
 8001394:	4b06      	ldr	r3, [pc, #24]	@ (80013b0 <LL_FLASH_IsActiveFlag_OperationSuspended+0x20>)
 8001396:	691b      	ldr	r3, [r3, #16]
 8001398:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800139c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80013a0:	d101      	bne.n	80013a6 <LL_FLASH_IsActiveFlag_OperationSuspended+0x16>
 80013a2:	2301      	movs	r3, #1
 80013a4:	e000      	b.n	80013a8 <LL_FLASH_IsActiveFlag_OperationSuspended+0x18>
 80013a6:	2300      	movs	r3, #0
#endif
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bc80      	pop	{r7}
 80013ae:	4770      	bx	lr
 80013b0:	58004000 	.word	0x58004000

080013b4 <FLASH_IF_Write>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t FLASH_IF_Write(uint32_t address, uint8_t *data, uint32_t size, uint8_t *dataTempPage)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b08c      	sub	sp, #48	@ 0x30
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	607a      	str	r2, [r7, #4]
 80013c0:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN FLASH_IF_Write_1 */

  /* USER CODE END FLASH_IF_Write_1 */
  int32_t status = FLASH_OK;
 80013c2:	2300      	movs	r3, #0
 80013c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t page_start_index = PAGE(address);
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	f103 4278 	add.w	r2, r3, #4160749568	@ 0xf8000000
 80013cc:	4b56      	ldr	r3, [pc, #344]	@ (8001528 <FLASH_IF_Write+0x174>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	0299      	lsls	r1, r3, #10
 80013d2:	4b56      	ldr	r3, [pc, #344]	@ (800152c <FLASH_IF_Write+0x178>)
 80013d4:	400b      	ands	r3, r1
 80013d6:	fbb2 f1f3 	udiv	r1, r2, r3
 80013da:	fb01 f303 	mul.w	r3, r1, r3
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	0adb      	lsrs	r3, r3, #11
 80013e2:	61bb      	str	r3, [r7, #24]
  uint32_t page_end_index = PAGE(address + size - 1);
 80013e4:	68fa      	ldr	r2, [r7, #12]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4413      	add	r3, r2
 80013ea:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 80013ee:	3b01      	subs	r3, #1
 80013f0:	4a4d      	ldr	r2, [pc, #308]	@ (8001528 <FLASH_IF_Write+0x174>)
 80013f2:	6812      	ldr	r2, [r2, #0]
 80013f4:	0291      	lsls	r1, r2, #10
 80013f6:	4a4d      	ldr	r2, [pc, #308]	@ (800152c <FLASH_IF_Write+0x178>)
 80013f8:	400a      	ands	r2, r1
 80013fa:	fbb3 f1f2 	udiv	r1, r3, r2
 80013fe:	fb01 f202 	mul.w	r2, r1, r2
 8001402:	1a9b      	subs	r3, r3, r2
 8001404:	0adb      	lsrs	r3, r3, #11
 8001406:	617b      	str	r3, [r7, #20]
  uint32_t curr_size = size;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t curr_dest_addr = address;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t curr_src_addr = (uint32_t)data;
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	623b      	str	r3, [r7, #32]

  if ((data == NULL) || ((size % sizeof(uint64_t)) != 0) || ((address % sizeof(uint64_t)) != 0))
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d009      	beq.n	800142e <FLASH_IF_Write+0x7a>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	f003 0307 	and.w	r3, r3, #7
 8001420:	2b00      	cmp	r3, #0
 8001422:	d104      	bne.n	800142e <FLASH_IF_Write+0x7a>
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	f003 0307 	and.w	r3, r3, #7
 800142a:	2b00      	cmp	r3, #0
 800142c:	d002      	beq.n	8001434 <FLASH_IF_Write+0x80>
  {
    return FLASH_PARAM_ERROR;
 800142e:	f06f 0304 	mvn.w	r3, #4
 8001432:	e074      	b.n	800151e <FLASH_IF_Write+0x16a>
  }

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001434:	4b3e      	ldr	r3, [pc, #248]	@ (8001530 <FLASH_IF_Write+0x17c>)
 8001436:	695b      	ldr	r3, [r3, #20]
 8001438:	2b00      	cmp	r3, #0
 800143a:	da02      	bge.n	8001442 <FLASH_IF_Write+0x8e>
  {
    return FLASH_LOCK_ERROR;
 800143c:	f06f 0303 	mvn.w	r3, #3
 8001440:	e06d      	b.n	800151e <FLASH_IF_Write+0x16a>
  }

  if (page_start_index != page_end_index)
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	429a      	cmp	r2, r3
 8001448:	d005      	beq.n	8001456 <FLASH_IF_Write+0xa2>
  {
    curr_size = FLASH_PAGE_SIZE - (address % FLASH_PAGE_SIZE);
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001450:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8001454:	62bb      	str	r3, [r7, #40]	@ 0x28
  }

  for (uint32_t idx = page_start_index; idx <= page_end_index; idx++)
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	61fb      	str	r3, [r7, #28]
 800145a:	e05b      	b.n	8001514 <FLASH_IF_Write+0x160>
  {
    if (FLASH_IF_IsEmpty((uint8_t *)curr_dest_addr, curr_size) != FLASH_EMPTY)
 800145c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800145e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001460:	4618      	mov	r0, r3
 8001462:	f000 f8f8 	bl	8001656 <FLASH_IF_IsEmpty>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d037      	beq.n	80014dc <FLASH_IF_Write+0x128>
    {
      if (dataTempPage == NULL)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d102      	bne.n	8001478 <FLASH_IF_Write+0xc4>
      {
        return FLASH_PARAM_ERROR;
 8001472:	f06f 0304 	mvn.w	r3, #4
 8001476:	e052      	b.n	800151e <FLASH_IF_Write+0x16a>
      }
      /* backup initial Flash page data in RAM area */
      UTIL_MEM_cpy_8(dataTempPage, (uint8_t *)(idx * FLASH_PAGE_SIZE + FLASH_BASE), FLASH_PAGE_SIZE);
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800147e:	02db      	lsls	r3, r3, #11
 8001480:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001484:	4619      	mov	r1, r3
 8001486:	6838      	ldr	r0, [r7, #0]
 8001488:	f019 f95a 	bl	801a740 <UTIL_MEM_cpy_8>
      /* copy fragment into RAM area */
      UTIL_MEM_cpy_8(&dataTempPage[((uint32_t)curr_dest_addr) % FLASH_PAGE_SIZE], (uint8_t *)curr_src_addr, curr_size);
 800148c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800148e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001492:	683a      	ldr	r2, [r7, #0]
 8001494:	4413      	add	r3, r2
 8001496:	6a39      	ldr	r1, [r7, #32]
 8001498:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800149a:	b292      	uxth	r2, r2
 800149c:	4618      	mov	r0, r3
 800149e:	f019 f94f 	bl	801a740 <UTIL_MEM_cpy_8>

      /*  erase the Flash sector, to avoid writing twice in RAM */
      if (FLASH_IF_EraseByPages(idx, 1, 0) != FLASH_OK)
 80014a2:	2200      	movs	r2, #0
 80014a4:	2101      	movs	r1, #1
 80014a6:	69f8      	ldr	r0, [r7, #28]
 80014a8:	f000 f865 	bl	8001576 <FLASH_IF_EraseByPages>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d003      	beq.n	80014ba <FLASH_IF_Write+0x106>
      {
        status = FLASH_ERASE_ERROR;
 80014b2:	f06f 0301 	mvn.w	r3, #1
 80014b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break; /* exit for loop */
 80014b8:	e030      	b.n	800151c <FLASH_IF_Write+0x168>
      }
      else
      {
        /* copy the whole flash sector including fragment from RAM to Flash*/
        if (FLASH_IF_Write_Buffer(idx * FLASH_PAGE_SIZE + FLASH_BASE, dataTempPage, FLASH_PAGE_SIZE) != FLASH_OK)
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80014c0:	02db      	lsls	r3, r3, #11
 80014c2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80014c6:	6839      	ldr	r1, [r7, #0]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f000 f88a 	bl	80015e2 <FLASH_IF_Write_Buffer>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d010      	beq.n	80014f6 <FLASH_IF_Write+0x142>
        {
          status = FLASH_WRITE_ERROR;
 80014d4:	f06f 0302 	mvn.w	r3, #2
 80014d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
          break; /* exit for loop */
 80014da:	e01f      	b.n	800151c <FLASH_IF_Write+0x168>
        }
      }
    }
    else
    {
      if (FLASH_IF_Write_Buffer(curr_dest_addr, (uint8_t *)curr_src_addr, curr_size) != FLASH_OK)
 80014dc:	6a3b      	ldr	r3, [r7, #32]
 80014de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80014e0:	4619      	mov	r1, r3
 80014e2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80014e4:	f000 f87d 	bl	80015e2 <FLASH_IF_Write_Buffer>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d003      	beq.n	80014f6 <FLASH_IF_Write+0x142>
      {
        status = FLASH_WRITE_ERROR;
 80014ee:	f06f 0302 	mvn.w	r3, #2
 80014f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break; /* exit for loop */
 80014f4:	e012      	b.n	800151c <FLASH_IF_Write+0x168>
      }
    }

    /* 2nd part of memory overlapped on 2nd flash sector */
    curr_dest_addr += curr_size;
 80014f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014fa:	4413      	add	r3, r2
 80014fc:	627b      	str	r3, [r7, #36]	@ 0x24
    curr_src_addr += curr_size;
 80014fe:	6a3a      	ldr	r2, [r7, #32]
 8001500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001502:	4413      	add	r3, r2
 8001504:	623b      	str	r3, [r7, #32]
    curr_size = size - curr_size;
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (uint32_t idx = page_start_index; idx <= page_end_index; idx++)
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	3301      	adds	r3, #1
 8001512:	61fb      	str	r3, [r7, #28]
 8001514:	69fa      	ldr	r2, [r7, #28]
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	429a      	cmp	r2, r3
 800151a:	d99f      	bls.n	800145c <FLASH_IF_Write+0xa8>
  }

  return status;
 800151c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  /* USER CODE BEGIN FLASH_IF_Write_2 */

  /* USER CODE END FLASH_IF_Write_2 */
}
 800151e:	4618      	mov	r0, r3
 8001520:	3730      	adds	r7, #48	@ 0x30
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	1fff75e0 	.word	0x1fff75e0
 800152c:	03fffc00 	.word	0x03fffc00
 8001530:	58004000 	.word	0x58004000

08001534 <FLASH_IF_Write64>:

int32_t FLASH_IF_Write64(uint32_t address, uint64_t data)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	60f8      	str	r0, [r7, #12]
 800153c:	e9c7 2300 	strd	r2, r3, [r7]
  /* USER CODE BEGIN FLASH_IF_Write64_1 */

  /* USER CODE END FLASH_IF_Write64_1 */
  while (*(uint64_t *)address != data)
 8001540:	e00b      	b.n	800155a <FLASH_IF_Write64+0x26>
  {
    while (LL_FLASH_IsActiveFlag_OperationSuspended());
 8001542:	bf00      	nop
 8001544:	f7ff ff24 	bl	8001390 <LL_FLASH_IsActiveFlag_OperationSuspended>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d1fa      	bne.n	8001544 <FLASH_IF_Write64+0x10>
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address, data);
 800154e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001552:	68f9      	ldr	r1, [r7, #12]
 8001554:	2001      	movs	r0, #1
 8001556:	f003 fbd9 	bl	8004d0c <HAL_FLASH_Program>
  while (*(uint64_t *)address != data)
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001560:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001564:	4299      	cmp	r1, r3
 8001566:	bf08      	it	eq
 8001568:	4290      	cmpeq	r0, r2
 800156a:	d1ea      	bne.n	8001542 <FLASH_IF_Write64+0xe>
  }

  return FLASH_OK;
 800156c:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_Write64_2 */

  /* USER CODE END FLASH_IF_Write64_2 */
}
 800156e:	4618      	mov	r0, r3
 8001570:	3710      	adds	r7, #16
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <FLASH_IF_EraseByPages>:

int32_t FLASH_IF_EraseByPages(uint32_t page, uint16_t n, int32_t interrupt)
{
 8001576:	b580      	push	{r7, lr}
 8001578:	b08a      	sub	sp, #40	@ 0x28
 800157a:	af00      	add	r7, sp, #0
 800157c:	60f8      	str	r0, [r7, #12]
 800157e:	460b      	mov	r3, r1
 8001580:	607a      	str	r2, [r7, #4]
 8001582:	817b      	strh	r3, [r7, #10]
  /* USER CODE END FLASH_IF_EraseByPages_1 */
  HAL_StatusTypeDef hal_status;
  FLASH_EraseInitTypeDef erase_str;
  uint32_t page_error;

  erase_str.TypeErase = FLASH_TYPEERASE_PAGES;
 8001584:	2302      	movs	r3, #2
 8001586:	61bb      	str	r3, [r7, #24]
  erase_str.Page = page;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	61fb      	str	r3, [r7, #28]
  erase_str.NbPages = n;
 800158c:	897b      	ldrh	r3, [r7, #10]
 800158e:	623b      	str	r3, [r7, #32]

  /* Erase the Page */
  if (interrupt)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d008      	beq.n	80015a8 <FLASH_IF_EraseByPages+0x32>
  {
    hal_status = HAL_FLASHEx_Erase_IT(&erase_str);
 8001596:	f107 0318 	add.w	r3, r7, #24
 800159a:	4618      	mov	r0, r3
 800159c:	f003 fd54 	bl	8005048 <HAL_FLASHEx_Erase_IT>
 80015a0:	4603      	mov	r3, r0
 80015a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80015a6:	e00a      	b.n	80015be <FLASH_IF_EraseByPages+0x48>
  }
  else
  {
    hal_status = HAL_FLASHEx_Erase(&erase_str, &page_error);
 80015a8:	f107 0214 	add.w	r2, r7, #20
 80015ac:	f107 0318 	add.w	r3, r7, #24
 80015b0:	4611      	mov	r1, r2
 80015b2:	4618      	mov	r0, r3
 80015b4:	f003 fcf0 	bl	8004f98 <HAL_FLASHEx_Erase>
 80015b8:	4603      	mov	r3, r0
 80015ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return ((hal_status == HAL_OK) ? FLASH_OK : ((hal_status == HAL_BUSY) ? FLASH_BUSY : FLASH_ERASE_ERROR));
 80015be:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d008      	beq.n	80015d8 <FLASH_IF_EraseByPages+0x62>
 80015c6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d101      	bne.n	80015d2 <FLASH_IF_EraseByPages+0x5c>
 80015ce:	2301      	movs	r3, #1
 80015d0:	e003      	b.n	80015da <FLASH_IF_EraseByPages+0x64>
 80015d2:	f06f 0301 	mvn.w	r3, #1
 80015d6:	e000      	b.n	80015da <FLASH_IF_EraseByPages+0x64>
 80015d8:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_EraseByPages_2 */

  /* USER CODE END FLASH_IF_EraseByPages_2 */
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3728      	adds	r7, #40	@ 0x28
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <FLASH_IF_Write_Buffer>:

/* USER CODE END EF */

/* Private Functions Definition -----------------------------------------------*/
static int32_t FLASH_IF_Write_Buffer(uint32_t pDestination, uint8_t *pSource, uint32_t uLength)
{
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b08a      	sub	sp, #40	@ 0x28
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	60f8      	str	r0, [r7, #12]
 80015ea:	60b9      	str	r1, [r7, #8]
 80015ec:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN FLASH_IF_Write_Buffer_1 */

  /* USER CODE END FLASH_IF_Write_Buffer_1 */
  uint8_t *pSrc = pSource;
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint64_t src_value;
  int32_t status = FLASH_OK;
 80015f2:	2300      	movs	r3, #0
 80015f4:	623b      	str	r3, [r7, #32]

  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 80015f6:	2300      	movs	r3, #0
 80015f8:	61fb      	str	r3, [r7, #28]
 80015fa:	e020      	b.n	800163e <FLASH_IF_Write_Buffer+0x5c>
  {
    UTIL_MEM_cpy_8(&src_value, pSrc, sizeof(uint64_t));
 80015fc:	f107 0310 	add.w	r3, r7, #16
 8001600:	2208      	movs	r2, #8
 8001602:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001604:	4618      	mov	r0, r3
 8001606:	f019 f89b 	bl	801a740 <UTIL_MEM_cpy_8>

    /* Avoid writing 0xFFFFFFFFFFFFFFFFLL on erased Flash */
    if (src_value != UINT64_MAX)
 800160a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800160e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001612:	bf08      	it	eq
 8001614:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8001618:	d005      	beq.n	8001626 <FLASH_IF_Write_Buffer+0x44>
    {
      status = FLASH_IF_Write64(pDestination, src_value);
 800161a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800161e:	68f8      	ldr	r0, [r7, #12]
 8001620:	f7ff ff88 	bl	8001534 <FLASH_IF_Write64>
 8001624:	6238      	str	r0, [r7, #32]
    }

    pDestination += sizeof(uint64_t);
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	3308      	adds	r3, #8
 800162a:	60fb      	str	r3, [r7, #12]
    pSrc += sizeof(uint64_t);
 800162c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800162e:	3308      	adds	r3, #8
 8001630:	627b      	str	r3, [r7, #36]	@ 0x24

    if (status != FLASH_OK)
 8001632:	6a3b      	ldr	r3, [r7, #32]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d108      	bne.n	800164a <FLASH_IF_Write_Buffer+0x68>
  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	3301      	adds	r3, #1
 800163c:	61fb      	str	r3, [r7, #28]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	08db      	lsrs	r3, r3, #3
 8001642:	69fa      	ldr	r2, [r7, #28]
 8001644:	429a      	cmp	r2, r3
 8001646:	d3d9      	bcc.n	80015fc <FLASH_IF_Write_Buffer+0x1a>
 8001648:	e000      	b.n	800164c <FLASH_IF_Write_Buffer+0x6a>
    {
      /* exit the for loop*/
      break;
 800164a:	bf00      	nop
    }
  }

  return status;
 800164c:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN FLASH_IF_Write_Buffer_2 */

  /* USER CODE END FLASH_IF_Write_Buffer_2 */
}
 800164e:	4618      	mov	r0, r3
 8001650:	3728      	adds	r7, #40	@ 0x28
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <FLASH_IF_IsEmpty>:

static int32_t FLASH_IF_IsEmpty(uint8_t *addr, uint32_t size)
{
 8001656:	b480      	push	{r7}
 8001658:	b085      	sub	sp, #20
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
 800165e:	6039      	str	r1, [r7, #0]
  /* USER CODE END FLASH_IF_IsEmpty_1 */
  uint64_t *addr64;
  uint32_t i;

  /* start memory NOT 64bits aligned */
  while ((((uint32_t)addr) % sizeof(uint64_t)) != 0)
 8001660:	e00a      	b.n	8001678 <FLASH_IF_IsEmpty+0x22>
  {
    if (*addr++ != UINT8_MAX)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	1c5a      	adds	r2, r3, #1
 8001666:	607a      	str	r2, [r7, #4]
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	2bff      	cmp	r3, #255	@ 0xff
 800166c:	d001      	beq.n	8001672 <FLASH_IF_IsEmpty+0x1c>
    {
      return FLASH_NOT_EMPTY;
 800166e:	2301      	movs	r3, #1
 8001670:	e039      	b.n	80016e6 <FLASH_IF_IsEmpty+0x90>
    }
    size--;
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	3b01      	subs	r3, #1
 8001676:	603b      	str	r3, [r7, #0]
  while ((((uint32_t)addr) % sizeof(uint64_t)) != 0)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f003 0307 	and.w	r3, r3, #7
 800167e:	2b00      	cmp	r3, #0
 8001680:	d1ef      	bne.n	8001662 <FLASH_IF_IsEmpty+0xc>
  }

  /* addr64 is 64 bits aligned */
  addr64 = (uint64_t *)addr;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	60fb      	str	r3, [r7, #12]
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 8001686:	2300      	movs	r3, #0
 8001688:	60bb      	str	r3, [r7, #8]
 800168a:	e010      	b.n	80016ae <FLASH_IF_IsEmpty+0x58>
  {
    if (*addr64++ != UINT64_MAX)
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	f103 0208 	add.w	r2, r3, #8
 8001692:	60fa      	str	r2, [r7, #12]
 8001694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800169c:	bf08      	it	eq
 800169e:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 80016a2:	d001      	beq.n	80016a8 <FLASH_IF_IsEmpty+0x52>
    {
      return FLASH_NOT_EMPTY;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e01e      	b.n	80016e6 <FLASH_IF_IsEmpty+0x90>
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	3301      	adds	r3, #1
 80016ac:	60bb      	str	r3, [r7, #8]
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	08db      	lsrs	r3, r3, #3
 80016b2:	68ba      	ldr	r2, [r7, #8]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d3e9      	bcc.n	800168c <FLASH_IF_IsEmpty+0x36>
    }
  }
  size -= sizeof(uint64_t) * i;
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	00db      	lsls	r3, r3, #3
 80016bc:	683a      	ldr	r2, [r7, #0]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	603b      	str	r3, [r7, #0]

  /* end memory NOT 64 bits aligned */
  addr = (uint8_t *)addr64;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	607b      	str	r3, [r7, #4]
  while (size != 0)
 80016c6:	e00a      	b.n	80016de <FLASH_IF_IsEmpty+0x88>
  {
    if (*addr++ != UINT8_MAX)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	1c5a      	adds	r2, r3, #1
 80016cc:	607a      	str	r2, [r7, #4]
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	2bff      	cmp	r3, #255	@ 0xff
 80016d2:	d001      	beq.n	80016d8 <FLASH_IF_IsEmpty+0x82>
    {
      return FLASH_NOT_EMPTY;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e006      	b.n	80016e6 <FLASH_IF_IsEmpty+0x90>
    }
    size--;
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	3b01      	subs	r3, #1
 80016dc:	603b      	str	r3, [r7, #0]
  while (size != 0)
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d1f1      	bne.n	80016c8 <FLASH_IF_IsEmpty+0x72>
  }
  return FLASH_EMPTY;
 80016e4:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_IsEmpty_2 */

  /* USER CODE END FLASH_IF_IsEmpty_2 */
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3714      	adds	r7, #20
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bc80      	pop	{r7}
 80016ee:	4770      	bx	lr

080016f0 <LL_AHB2_GRP1_EnableClock>:
{
 80016f0:	b480      	push	{r7}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80016f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016fc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80016fe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4313      	orrs	r3, r2
 8001706:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001708:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800170c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4013      	ands	r3, r2
 8001712:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001714:	68fb      	ldr	r3, [r7, #12]
}
 8001716:	bf00      	nop
 8001718:	3714      	adds	r7, #20
 800171a:	46bd      	mov	sp, r7
 800171c:	bc80      	pop	{r7}
 800171e:	4770      	bx	lr

08001720 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001726:	1d3b      	adds	r3, r7, #4
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	605a      	str	r2, [r3, #4]
 800172e:	609a      	str	r2, [r3, #8]
 8001730:	60da      	str	r2, [r3, #12]
 8001732:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001734:	2002      	movs	r0, #2
 8001736:	f7ff ffdb 	bl	80016f0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800173a:	2004      	movs	r0, #4
 800173c:	f7ff ffd8 	bl	80016f0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001740:	2001      	movs	r0, #1
 8001742:	f7ff ffd5 	bl	80016f0 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15|DBG3_Pin|DBG4_Pin|GPIO_PIN_9
 8001746:	2200      	movs	r2, #0
 8001748:	f248 6118 	movw	r1, #34328	@ 0x8618
 800174c:	4836      	ldr	r0, [pc, #216]	@ (8001828 <MX_GPIO_Init+0x108>)
 800174e:	f003 ff84 	bl	800565a <HAL_GPIO_WritePin>
                          |DBG2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8001752:	2201      	movs	r2, #1
 8001754:	2120      	movs	r1, #32
 8001756:	4834      	ldr	r0, [pc, #208]	@ (8001828 <MX_GPIO_Init+0x108>)
 8001758:	f003 ff7f 	bl	800565a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DBG1_Pin|GPIO_PIN_9|RF_CTRL1_Pin|RF_CTRL2_Pin, GPIO_PIN_RESET);
 800175c:	2200      	movs	r2, #0
 800175e:	f240 2131 	movw	r1, #561	@ 0x231
 8001762:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001766:	f003 ff78 	bl	800565a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB15 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_9;
 800176a:	f44f 4302 	mov.w	r3, #33280	@ 0x8200
 800176e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001770:	2301      	movs	r3, #1
 8001772:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001774:	2300      	movs	r3, #0
 8001776:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001778:	2300      	movs	r3, #0
 800177a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800177c:	1d3b      	adds	r3, r7, #4
 800177e:	4619      	mov	r1, r3
 8001780:	4829      	ldr	r0, [pc, #164]	@ (8001828 <MX_GPIO_Init+0x108>)
 8001782:	f003 fd25 	bl	80051d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DBG3_Pin|DBG4_Pin|LED2_Pin|DBG2_Pin;
 8001786:	f44f 6387 	mov.w	r3, #1080	@ 0x438
 800178a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800178c:	2301      	movs	r3, #1
 800178e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001790:	2300      	movs	r3, #0
 8001792:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001794:	2303      	movs	r3, #3
 8001796:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001798:	1d3b      	adds	r3, r7, #4
 800179a:	4619      	mov	r1, r3
 800179c:	4822      	ldr	r0, [pc, #136]	@ (8001828 <MX_GPIO_Init+0x108>)
 800179e:	f003 fd17 	bl	80051d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80017a2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80017a6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017a8:	2300      	movs	r3, #0
 80017aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ac:	2300      	movs	r3, #0
 80017ae:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017b0:	1d3b      	adds	r3, r7, #4
 80017b2:	4619      	mov	r1, r3
 80017b4:	481c      	ldr	r0, [pc, #112]	@ (8001828 <MX_GPIO_Init+0x108>)
 80017b6:	f003 fd0b 	bl	80051d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DBG1_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin;
 80017ba:	2331      	movs	r3, #49	@ 0x31
 80017bc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017be:	2301      	movs	r3, #1
 80017c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c2:	2300      	movs	r3, #0
 80017c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c6:	2303      	movs	r3, #3
 80017c8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ca:	1d3b      	adds	r3, r7, #4
 80017cc:	4619      	mov	r1, r3
 80017ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017d2:	f003 fcfd 	bl	80051d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUT1_Pin;
 80017d6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017da:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017dc:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80017e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017e2:	2301      	movs	r3, #1
 80017e4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BUT1_GPIO_Port, &GPIO_InitStruct);
 80017e6:	1d3b      	adds	r3, r7, #4
 80017e8:	4619      	mov	r1, r3
 80017ea:	480f      	ldr	r0, [pc, #60]	@ (8001828 <MX_GPIO_Init+0x108>)
 80017ec:	f003 fcf0 	bl	80051d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80017f0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80017f4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017f6:	2301      	movs	r3, #1
 80017f8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fa:	2300      	movs	r3, #0
 80017fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fe:	2300      	movs	r3, #0
 8001800:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001802:	1d3b      	adds	r3, r7, #4
 8001804:	4619      	mov	r1, r3
 8001806:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800180a:	f003 fce1 	bl	80051d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800180e:	2200      	movs	r2, #0
 8001810:	2100      	movs	r1, #0
 8001812:	2029      	movs	r0, #41	@ 0x29
 8001814:	f002 fe59 	bl	80044ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001818:	2029      	movs	r0, #41	@ 0x29
 800181a:	f002 fe70 	bl	80044fe <HAL_NVIC_EnableIRQ>

}
 800181e:	bf00      	nop
 8001820:	3718      	adds	r7, #24
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	48000400 	.word	0x48000400

0800182c <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001834:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001838:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800183c:	f023 0218 	bic.w	r2, r3, #24
 8001840:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	4313      	orrs	r3, r2
 8001848:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800184c:	bf00      	nop
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	bc80      	pop	{r7}
 8001854:	4770      	bx	lr
	...

08001858 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800185c:	f001 fc72 	bl	8003144 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001860:	f000 f81e 	bl	80018a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001864:	f7ff ff5c 	bl	8001720 <MX_GPIO_Init>
  MX_LoRaWAN_Init();
 8001868:	f008 fcc8 	bl	800a1fc <MX_LoRaWAN_Init>
  MX_USART2_UART_Init();
 800186c:	f001 f930 	bl	8002ad0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8001870:	2201      	movs	r2, #1
 8001872:	2120      	movs	r1, #32
 8001874:	4809      	ldr	r0, [pc, #36]	@ (800189c <main+0x44>)
 8001876:	f003 fef0 	bl	800565a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 800187a:	2201      	movs	r2, #1
 800187c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001880:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001884:	f003 fee9 	bl	800565a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8001888:	2201      	movs	r2, #1
 800188a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800188e:	4803      	ldr	r0, [pc, #12]	@ (800189c <main+0x44>)
 8001890:	f003 fee3 	bl	800565a <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_LoRaWAN_Process();
 8001894:	f008 fcba 	bl	800a20c <MX_LoRaWAN_Process>
 8001898:	e7fc      	b.n	8001894 <main+0x3c>
 800189a:	bf00      	nop
 800189c:	48000400 	.word	0x48000400

080018a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b09a      	sub	sp, #104	@ 0x68
 80018a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018a6:	f107 0320 	add.w	r3, r7, #32
 80018aa:	2248      	movs	r2, #72	@ 0x48
 80018ac:	2100      	movs	r1, #0
 80018ae:	4618      	mov	r0, r3
 80018b0:	f01a ff63 	bl	801c77a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018b4:	f107 0308 	add.w	r3, r7, #8
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	605a      	str	r2, [r3, #4]
 80018be:	609a      	str	r2, [r3, #8]
 80018c0:	60da      	str	r2, [r3, #12]
 80018c2:	611a      	str	r2, [r3, #16]
 80018c4:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80018c6:	f003 fef7 	bl	80056b8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80018ca:	2000      	movs	r0, #0
 80018cc:	f7ff ffae 	bl	800182c <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001950 <SystemClock_Config+0xb0>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80018d8:	4a1d      	ldr	r2, [pc, #116]	@ (8001950 <SystemClock_Config+0xb0>)
 80018da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018de:	6013      	str	r3, [r2, #0]
 80018e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001950 <SystemClock_Config+0xb0>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80018e8:	607b      	str	r3, [r7, #4]
 80018ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80018ec:	2324      	movs	r3, #36	@ 0x24
 80018ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80018f0:	2381      	movs	r3, #129	@ 0x81
 80018f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80018f4:	2301      	movs	r3, #1
 80018f6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80018f8:	2300      	movs	r3, #0
 80018fa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80018fc:	23b0      	movs	r3, #176	@ 0xb0
 80018fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001900:	2300      	movs	r3, #0
 8001902:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001904:	f107 0320 	add.w	r3, r7, #32
 8001908:	4618      	mov	r0, r3
 800190a:	f004 fa21 	bl	8005d50 <HAL_RCC_OscConfig>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001914:	f000 f916 	bl	8001b44 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001918:	234f      	movs	r3, #79	@ 0x4f
 800191a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800191c:	2300      	movs	r3, #0
 800191e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001920:	2300      	movs	r3, #0
 8001922:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001924:	2300      	movs	r3, #0
 8001926:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001928:	2300      	movs	r3, #0
 800192a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 800192c:	2300      	movs	r3, #0
 800192e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001930:	f107 0308 	add.w	r3, r7, #8
 8001934:	2102      	movs	r1, #2
 8001936:	4618      	mov	r0, r3
 8001938:	f004 fda6 	bl	8006488 <HAL_RCC_ClockConfig>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001942:	f000 f8ff 	bl	8001b44 <Error_Handler>
  }
}
 8001946:	bf00      	nop
 8001948:	3768      	adds	r7, #104	@ 0x68
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	58000400 	.word	0x58000400

08001954 <PumpDelayCallback>:
UTIL_TIMER_Object_t PumpTimer;
static PumpState_t currentPumpState;
static uint8_t autoDurationMinutes = 0;

static void PumpDelayCallback(void *context)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 800195c:	2201      	movs	r2, #1
 800195e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001962:	4809      	ldr	r0, [pc, #36]	@ (8001988 <PumpDelayCallback+0x34>)
 8001964:	f003 fe79 	bl	800565a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8001968:	2201      	movs	r2, #1
 800196a:	2120      	movs	r1, #32
 800196c:	4806      	ldr	r0, [pc, #24]	@ (8001988 <PumpDelayCallback+0x34>)
 800196e:	f003 fe74 	bl	800565a <HAL_GPIO_WritePin>
    APP_LOG(TS_ON, VLEVEL_M, "[PumpStateMachine] STATE_AUTO: LED OFF \r\n");
 8001972:	4b06      	ldr	r3, [pc, #24]	@ (800198c <PumpDelayCallback+0x38>)
 8001974:	2201      	movs	r2, #1
 8001976:	2100      	movs	r1, #0
 8001978:	2002      	movs	r0, #2
 800197a:	f019 ff2b 	bl	801b7d4 <UTIL_ADV_TRACE_COND_FSend>
}
 800197e:	bf00      	nop
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	48000400 	.word	0x48000400
 800198c:	0801e6d0 	.word	0x0801e6d0

08001990 <PumpTimerCallback>:

static void PumpTimerCallback(void *context)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af02      	add	r7, sp, #8
 8001996:	6078      	str	r0, [r7, #4]
    switch (currentPumpState)
 8001998:	4b21      	ldr	r3, [pc, #132]	@ (8001a20 <PumpTimerCallback+0x90>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	2b02      	cmp	r3, #2
 800199e:	d014      	beq.n	80019ca <PumpTimerCallback+0x3a>
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	dc38      	bgt.n	8001a16 <PumpTimerCallback+0x86>
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d002      	beq.n	80019ae <PumpTimerCallback+0x1e>
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d01b      	beq.n	80019e4 <PumpTimerCallback+0x54>
            UTIL_TIMER_Create(&PumpTimer, 1000, UTIL_TIMER_ONESHOT, PumpDelayCallback, NULL);
            UTIL_TIMER_Start(&PumpTimer);
            break;

        default:
            break;
 80019ac:	e033      	b.n	8001a16 <PumpTimerCallback+0x86>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80019ae:	2201      	movs	r2, #1
 80019b0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80019b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019b8:	f003 fe4f 	bl	800565a <HAL_GPIO_WritePin>
            APP_LOG(TS_ON, VLEVEL_M, "[PumpStateMachine] STATE_PUMP_ON: \r\n");
 80019bc:	4b19      	ldr	r3, [pc, #100]	@ (8001a24 <PumpTimerCallback+0x94>)
 80019be:	2201      	movs	r2, #1
 80019c0:	2100      	movs	r1, #0
 80019c2:	2002      	movs	r0, #2
 80019c4:	f019 ff06 	bl	801b7d4 <UTIL_ADV_TRACE_COND_FSend>
            break;
 80019c8:	e026      	b.n	8001a18 <PumpTimerCallback+0x88>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 80019ca:	2201      	movs	r2, #1
 80019cc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80019d0:	4815      	ldr	r0, [pc, #84]	@ (8001a28 <PumpTimerCallback+0x98>)
 80019d2:	f003 fe42 	bl	800565a <HAL_GPIO_WritePin>
            APP_LOG(TS_ON, VLEVEL_M, "[PumpStateMachine] STATE_PUMP_OFF: \r\n");
 80019d6:	4b15      	ldr	r3, [pc, #84]	@ (8001a2c <PumpTimerCallback+0x9c>)
 80019d8:	2201      	movs	r2, #1
 80019da:	2100      	movs	r1, #0
 80019dc:	2002      	movs	r0, #2
 80019de:	f019 fef9 	bl	801b7d4 <UTIL_ADV_TRACE_COND_FSend>
            break;
 80019e2:	e019      	b.n	8001a18 <PumpTimerCallback+0x88>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80019e4:	2200      	movs	r2, #0
 80019e6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80019ea:	480f      	ldr	r0, [pc, #60]	@ (8001a28 <PumpTimerCallback+0x98>)
 80019ec:	f003 fe35 	bl	800565a <HAL_GPIO_WritePin>
            APP_LOG(TS_ON, VLEVEL_M, "[PumpStateMachine] STATE_AUTO: Time out\r\n");
 80019f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001a30 <PumpTimerCallback+0xa0>)
 80019f2:	2201      	movs	r2, #1
 80019f4:	2100      	movs	r1, #0
 80019f6:	2002      	movs	r0, #2
 80019f8:	f019 feec 	bl	801b7d4 <UTIL_ADV_TRACE_COND_FSend>
            UTIL_TIMER_Create(&PumpTimer, 1000, UTIL_TIMER_ONESHOT, PumpDelayCallback, NULL);
 80019fc:	2300      	movs	r3, #0
 80019fe:	9300      	str	r3, [sp, #0]
 8001a00:	4b0c      	ldr	r3, [pc, #48]	@ (8001a34 <PumpTimerCallback+0xa4>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001a08:	480b      	ldr	r0, [pc, #44]	@ (8001a38 <PumpTimerCallback+0xa8>)
 8001a0a:	f019 fc35 	bl	801b278 <UTIL_TIMER_Create>
            UTIL_TIMER_Start(&PumpTimer);
 8001a0e:	480a      	ldr	r0, [pc, #40]	@ (8001a38 <PumpTimerCallback+0xa8>)
 8001a10:	f019 fc68 	bl	801b2e4 <UTIL_TIMER_Start>
            break;
 8001a14:	e000      	b.n	8001a18 <PumpTimerCallback+0x88>
            break;
 8001a16:	bf00      	nop
    }
}
 8001a18:	bf00      	nop
 8001a1a:	3708      	adds	r7, #8
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	200003a4 	.word	0x200003a4
 8001a24:	0801e6fc 	.word	0x0801e6fc
 8001a28:	48000400 	.word	0x48000400
 8001a2c:	0801e724 	.word	0x0801e724
 8001a30:	0801e74c 	.word	0x0801e74c
 8001a34:	08001955 	.word	0x08001955
 8001a38:	2000038c 	.word	0x2000038c

08001a3c <PumpStateMachine>:

void PumpStateMachine(PumpState_t state, uint8_t duration)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af02      	add	r7, sp, #8
 8001a42:	4603      	mov	r3, r0
 8001a44:	460a      	mov	r2, r1
 8001a46:	71fb      	strb	r3, [r7, #7]
 8001a48:	4613      	mov	r3, r2
 8001a4a:	71bb      	strb	r3, [r7, #6]
    currentPumpState = state;
 8001a4c:	4a35      	ldr	r2, [pc, #212]	@ (8001b24 <PumpStateMachine+0xe8>)
 8001a4e:	79fb      	ldrb	r3, [r7, #7]
 8001a50:	7013      	strb	r3, [r2, #0]
    autoDurationMinutes = duration;
 8001a52:	4a35      	ldr	r2, [pc, #212]	@ (8001b28 <PumpStateMachine+0xec>)
 8001a54:	79bb      	ldrb	r3, [r7, #6]
 8001a56:	7013      	strb	r3, [r2, #0]

    switch (state)
 8001a58:	79fb      	ldrb	r3, [r7, #7]
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d020      	beq.n	8001aa0 <PumpStateMachine+0x64>
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	dc5b      	bgt.n	8001b1a <PumpStateMachine+0xde>
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d002      	beq.n	8001a6c <PumpStateMachine+0x30>
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d033      	beq.n	8001ad2 <PumpStateMachine+0x96>
            UTIL_TIMER_Create(&PumpTimer, (uint32_t)duration * 60 * 1000, UTIL_TIMER_ONESHOT, PumpTimerCallback, NULL);
            UTIL_TIMER_Start(&PumpTimer);
            break;

        default:
            break;
 8001a6a:	e056      	b.n	8001b1a <PumpStateMachine+0xde>
            APP_LOG(TS_ON, VLEVEL_M, "Command 0x01: Pump ON\r\n");
 8001a6c:	4b2f      	ldr	r3, [pc, #188]	@ (8001b2c <PumpStateMachine+0xf0>)
 8001a6e:	2201      	movs	r2, #1
 8001a70:	2100      	movs	r1, #0
 8001a72:	2002      	movs	r0, #2
 8001a74:	f019 feae 	bl	801b7d4 <UTIL_ADV_TRACE_COND_FSend>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a7e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a82:	f003 fdea 	bl	800565a <HAL_GPIO_WritePin>
            UTIL_TIMER_Create(&PumpTimer, 1000, UTIL_TIMER_ONESHOT, PumpTimerCallback, NULL);
 8001a86:	2300      	movs	r3, #0
 8001a88:	9300      	str	r3, [sp, #0]
 8001a8a:	4b29      	ldr	r3, [pc, #164]	@ (8001b30 <PumpStateMachine+0xf4>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001a92:	4828      	ldr	r0, [pc, #160]	@ (8001b34 <PumpStateMachine+0xf8>)
 8001a94:	f019 fbf0 	bl	801b278 <UTIL_TIMER_Create>
            UTIL_TIMER_Start(&PumpTimer);
 8001a98:	4826      	ldr	r0, [pc, #152]	@ (8001b34 <PumpStateMachine+0xf8>)
 8001a9a:	f019 fc23 	bl	801b2e4 <UTIL_TIMER_Start>
            break;
 8001a9e:	e03d      	b.n	8001b1c <PumpStateMachine+0xe0>
            APP_LOG(TS_ON, VLEVEL_M, "Command 0x03: Pump OFF\r\n");
 8001aa0:	4b25      	ldr	r3, [pc, #148]	@ (8001b38 <PumpStateMachine+0xfc>)
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	2002      	movs	r0, #2
 8001aa8:	f019 fe94 	bl	801b7d4 <UTIL_ADV_TRACE_COND_FSend>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8001aac:	2200      	movs	r2, #0
 8001aae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001ab2:	4822      	ldr	r0, [pc, #136]	@ (8001b3c <PumpStateMachine+0x100>)
 8001ab4:	f003 fdd1 	bl	800565a <HAL_GPIO_WritePin>
            UTIL_TIMER_Create(&PumpTimer, 1000, UTIL_TIMER_ONESHOT, PumpTimerCallback, NULL);
 8001ab8:	2300      	movs	r3, #0
 8001aba:	9300      	str	r3, [sp, #0]
 8001abc:	4b1c      	ldr	r3, [pc, #112]	@ (8001b30 <PumpStateMachine+0xf4>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001ac4:	481b      	ldr	r0, [pc, #108]	@ (8001b34 <PumpStateMachine+0xf8>)
 8001ac6:	f019 fbd7 	bl	801b278 <UTIL_TIMER_Create>
            UTIL_TIMER_Start(&PumpTimer);
 8001aca:	481a      	ldr	r0, [pc, #104]	@ (8001b34 <PumpStateMachine+0xf8>)
 8001acc:	f019 fc0a 	bl	801b2e4 <UTIL_TIMER_Start>
            break;
 8001ad0:	e024      	b.n	8001b1c <PumpStateMachine+0xe0>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	2120      	movs	r1, #32
 8001ad6:	4819      	ldr	r0, [pc, #100]	@ (8001b3c <PumpStateMachine+0x100>)
 8001ad8:	f003 fdbf 	bl	800565a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001adc:	2200      	movs	r2, #0
 8001ade:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001ae2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ae6:	f003 fdb8 	bl	800565a <HAL_GPIO_WritePin>
            APP_LOG(TS_ON, VLEVEL_M, "[PumpStateMachine] STATE_AUTO: Time : ( %d Minutes)\r\n", duration);
 8001aea:	79bb      	ldrb	r3, [r7, #6]
 8001aec:	9300      	str	r3, [sp, #0]
 8001aee:	4b14      	ldr	r3, [pc, #80]	@ (8001b40 <PumpStateMachine+0x104>)
 8001af0:	2201      	movs	r2, #1
 8001af2:	2100      	movs	r1, #0
 8001af4:	2002      	movs	r0, #2
 8001af6:	f019 fe6d 	bl	801b7d4 <UTIL_ADV_TRACE_COND_FSend>
            UTIL_TIMER_Create(&PumpTimer, (uint32_t)duration * 60 * 1000, UTIL_TIMER_ONESHOT, PumpTimerCallback, NULL);
 8001afa:	79bb      	ldrb	r3, [r7, #6]
 8001afc:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8001b00:	fb02 f103 	mul.w	r1, r2, r3
 8001b04:	2300      	movs	r3, #0
 8001b06:	9300      	str	r3, [sp, #0]
 8001b08:	4b09      	ldr	r3, [pc, #36]	@ (8001b30 <PumpStateMachine+0xf4>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	4809      	ldr	r0, [pc, #36]	@ (8001b34 <PumpStateMachine+0xf8>)
 8001b0e:	f019 fbb3 	bl	801b278 <UTIL_TIMER_Create>
            UTIL_TIMER_Start(&PumpTimer);
 8001b12:	4808      	ldr	r0, [pc, #32]	@ (8001b34 <PumpStateMachine+0xf8>)
 8001b14:	f019 fbe6 	bl	801b2e4 <UTIL_TIMER_Start>
            break;
 8001b18:	e000      	b.n	8001b1c <PumpStateMachine+0xe0>
            break;
 8001b1a:	bf00      	nop
    }
}
 8001b1c:	bf00      	nop
 8001b1e:	3708      	adds	r7, #8
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	200003a4 	.word	0x200003a4
 8001b28:	200003a5 	.word	0x200003a5
 8001b2c:	0801e778 	.word	0x0801e778
 8001b30:	08001991 	.word	0x08001991
 8001b34:	2000038c 	.word	0x2000038c
 8001b38:	0801e790 	.word	0x0801e790
 8001b3c:	48000400 	.word	0x48000400
 8001b40:	0801e7ac 	.word	0x0801e7ac

08001b44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b48:	b672      	cpsid	i
}
 8001b4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b4c:	bf00      	nop
 8001b4e:	e7fd      	b.n	8001b4c <Error_Handler+0x8>

08001b50 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001b54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b5c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001b60:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001b68:	bf00      	nop
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bc80      	pop	{r7}
 8001b6e:	4770      	bx	lr

08001b70 <LL_APB1_GRP1_EnableClock>:
{
 8001b70:	b480      	push	{r7}
 8001b72:	b085      	sub	sp, #20
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001b78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b7c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001b7e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001b88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b8c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4013      	ands	r3, r2
 8001b92:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b94:	68fb      	ldr	r3, [r7, #12]
}
 8001b96:	bf00      	nop
 8001b98:	3714      	adds	r7, #20
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bc80      	pop	{r7}
 8001b9e:	4770      	bx	lr

08001ba0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b08c      	sub	sp, #48	@ 0x30
 8001ba4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 8001ba6:	1d3b      	adds	r3, r7, #4
 8001ba8:	222c      	movs	r2, #44	@ 0x2c
 8001baa:	2100      	movs	r1, #0
 8001bac:	4618      	mov	r0, r3
 8001bae:	f01a fde4 	bl	801c77a <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001bb2:	4b22      	ldr	r3, [pc, #136]	@ (8001c3c <MX_RTC_Init+0x9c>)
 8001bb4:	4a22      	ldr	r2, [pc, #136]	@ (8001c40 <MX_RTC_Init+0xa0>)
 8001bb6:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8001bb8:	4b20      	ldr	r3, [pc, #128]	@ (8001c3c <MX_RTC_Init+0x9c>)
 8001bba:	221f      	movs	r2, #31
 8001bbc:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001bbe:	4b1f      	ldr	r3, [pc, #124]	@ (8001c3c <MX_RTC_Init+0x9c>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001bc4:	4b1d      	ldr	r3, [pc, #116]	@ (8001c3c <MX_RTC_Init+0x9c>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001bca:	4b1c      	ldr	r3, [pc, #112]	@ (8001c3c <MX_RTC_Init+0x9c>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001bd0:	4b1a      	ldr	r3, [pc, #104]	@ (8001c3c <MX_RTC_Init+0x9c>)
 8001bd2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001bd6:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001bd8:	4b18      	ldr	r3, [pc, #96]	@ (8001c3c <MX_RTC_Init+0x9c>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8001bde:	4b17      	ldr	r3, [pc, #92]	@ (8001c3c <MX_RTC_Init+0x9c>)
 8001be0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001be4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001be6:	4815      	ldr	r0, [pc, #84]	@ (8001c3c <MX_RTC_Init+0x9c>)
 8001be8:	f005 f90a 	bl	8006e00 <HAL_RTC_Init>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8001bf2:	f7ff ffa7 	bl	8001b44 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8001bf6:	4811      	ldr	r0, [pc, #68]	@ (8001c3c <MX_RTC_Init+0x9c>)
 8001bf8:	f005 fbf8 	bl	80073ec <HAL_RTCEx_SetSSRU_IT>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8001c02:	f7ff ff9f 	bl	8001b44 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001c06:	2300      	movs	r3, #0
 8001c08:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001c12:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001c16:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8001c18:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8001c1e:	1d3b      	adds	r3, r7, #4
 8001c20:	2200      	movs	r2, #0
 8001c22:	4619      	mov	r1, r3
 8001c24:	4805      	ldr	r0, [pc, #20]	@ (8001c3c <MX_RTC_Init+0x9c>)
 8001c26:	f005 f965 	bl	8006ef4 <HAL_RTC_SetAlarm_IT>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001c30:	f7ff ff88 	bl	8001b44 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001c34:	bf00      	nop
 8001c36:	3730      	adds	r7, #48	@ 0x30
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	200003a8 	.word	0x200003a8
 8001c40:	40002800 	.word	0x40002800

08001c44 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b090      	sub	sp, #64	@ 0x40
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c4c:	f107 0308 	add.w	r3, r7, #8
 8001c50:	2238      	movs	r2, #56	@ 0x38
 8001c52:	2100      	movs	r1, #0
 8001c54:	4618      	mov	r0, r3
 8001c56:	f01a fd90 	bl	801c77a <memset>
  if(rtcHandle->Instance==RTC)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a16      	ldr	r2, [pc, #88]	@ (8001cb8 <HAL_RTC_MspInit+0x74>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d125      	bne.n	8001cb0 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001c64:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001c68:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001c6a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c6e:	63fb      	str	r3, [r7, #60]	@ 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c70:	f107 0308 	add.w	r3, r7, #8
 8001c74:	4618      	mov	r0, r3
 8001c76:	f004 ffa9 	bl	8006bcc <HAL_RCCEx_PeriphCLKConfig>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001c80:	f7ff ff60 	bl	8001b44 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001c84:	f7ff ff64 	bl	8001b50 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001c88:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001c8c:	f7ff ff70 	bl	8001b70 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8001c90:	2200      	movs	r2, #0
 8001c92:	2100      	movs	r1, #0
 8001c94:	2002      	movs	r0, #2
 8001c96:	f002 fc18 	bl	80044ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8001c9a:	2002      	movs	r0, #2
 8001c9c:	f002 fc2f 	bl	80044fe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	202a      	movs	r0, #42	@ 0x2a
 8001ca6:	f002 fc10 	bl	80044ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001caa:	202a      	movs	r0, #42	@ 0x2a
 8001cac:	f002 fc27 	bl	80044fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001cb0:	bf00      	nop
 8001cb2:	3740      	adds	r7, #64	@ 0x40
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	40002800 	.word	0x40002800

08001cbc <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8001cc0:	4b03      	ldr	r3, [pc, #12]	@ (8001cd0 <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8001cc8:	bf00      	nop
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bc80      	pop	{r7}
 8001cce:	4770      	bx	lr
 8001cd0:	58000400 	.word	0x58000400

08001cd4 <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8001cd8:	bf00      	nop
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bc80      	pop	{r7}
 8001cde:	4770      	bx	lr

08001ce0 <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8001ce4:	bf00      	nop
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bc80      	pop	{r7}
 8001cea:	4770      	bx	lr

08001cec <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8001cf0:	f001 fa48 	bl	8003184 <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 8001cf4:	f7ff ffe2 	bl	8001cbc <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8001cf8:	2001      	movs	r0, #1
 8001cfa:	f003 fd6f 	bl	80057dc <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8001cfe:	bf00      	nop
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 8001d06:	f001 fa4b 	bl	80031a0 <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 8001d0a:	f001 f8cb 	bl	8002ea4 <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 8001d0e:	bf00      	nop
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 8001d16:	f001 fa35 	bl	8003184 <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001d1a:	2101      	movs	r1, #1
 8001d1c:	2000      	movs	r0, #0
 8001d1e:	f003 fcd9 	bl	80056d4 <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 8001d22:	bf00      	nop
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 8001d2a:	f001 fa39 	bl	80031a0 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 8001d2e:	bf00      	nop
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d32:	b480      	push	{r7}
 8001d34:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d36:	bf00      	nop
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bc80      	pop	{r7}
 8001d3c:	4770      	bx	lr

08001d3e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d42:	bf00      	nop
 8001d44:	e7fd      	b.n	8001d42 <NMI_Handler+0x4>

08001d46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d46:	b480      	push	{r7}
 8001d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d4a:	bf00      	nop
 8001d4c:	e7fd      	b.n	8001d4a <HardFault_Handler+0x4>

08001d4e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d52:	bf00      	nop
 8001d54:	e7fd      	b.n	8001d52 <MemManage_Handler+0x4>

08001d56 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d56:	b480      	push	{r7}
 8001d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d5a:	bf00      	nop
 8001d5c:	e7fd      	b.n	8001d5a <BusFault_Handler+0x4>

08001d5e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d62:	bf00      	nop
 8001d64:	e7fd      	b.n	8001d62 <UsageFault_Handler+0x4>

08001d66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d66:	b480      	push	{r7}
 8001d68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d6a:	bf00      	nop
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bc80      	pop	{r7}
 8001d70:	4770      	bx	lr

08001d72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d72:	b480      	push	{r7}
 8001d74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d76:	bf00      	nop
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bc80      	pop	{r7}
 8001d7c:	4770      	bx	lr

08001d7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d82:	bf00      	nop
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bc80      	pop	{r7}
 8001d88:	4770      	bx	lr

08001d8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d8e:	bf00      	nop
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bc80      	pop	{r7}
 8001d94:	4770      	bx	lr
	...

08001d98 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8001d9c:	4802      	ldr	r0, [pc, #8]	@ (8001da8 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 8001d9e:	f005 fb61 	bl	8007464 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8001da2:	bf00      	nop
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	200003a8 	.word	0x200003a8

08001dac <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001db0:	4802      	ldr	r0, [pc, #8]	@ (8001dbc <DMA1_Channel1_IRQHandler+0x10>)
 8001db2:	f002 fe3b 	bl	8004a2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001db6:	bf00      	nop
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	2000051c 	.word	0x2000051c

08001dc0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001dc4:	4802      	ldr	r0, [pc, #8]	@ (8001dd0 <USART1_IRQHandler+0x10>)
 8001dc6:	f006 f9af 	bl	8008128 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001dca:	bf00      	nop
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	200003fc 	.word	0x200003fc

08001dd4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001dd8:	4802      	ldr	r0, [pc, #8]	@ (8001de4 <USART2_IRQHandler+0x10>)
 8001dda:	f006 f9a5 	bl	8008128 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001dde:	bf00      	nop
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	2000048c 	.word	0x2000048c

08001de8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [15:10] Interrupt.
  */
void EXTI15_10_IRQHandler(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT1_Pin);
 8001dec:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001df0:	f003 fc4a 	bl	8005688 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001df4:	bf00      	nop
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001dfc:	4802      	ldr	r0, [pc, #8]	@ (8001e08 <RTC_Alarm_IRQHandler+0x10>)
 8001dfe:	f005 f9e1 	bl	80071c4 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001e02:	bf00      	nop
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	200003a8 	.word	0x200003a8

08001e0c <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001e10:	4802      	ldr	r0, [pc, #8]	@ (8001e1c <SUBGHZ_Radio_IRQHandler+0x10>)
 8001e12:	f005 fe8f 	bl	8007b34 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8001e16:	bf00      	nop
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	200003e0 	.word	0x200003e0

08001e20 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8001e28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e2c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001e2e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	664b      	str	r3, [r1, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8001e38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e3c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4013      	ands	r3, r2
 8001e42:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e44:	68fb      	ldr	r3, [r7, #12]
}
 8001e46:	bf00      	nop
 8001e48:	3714      	adds	r7, #20
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bc80      	pop	{r7}
 8001e4e:	4770      	bx	lr

08001e50 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8001e54:	4b06      	ldr	r3, [pc, #24]	@ (8001e70 <MX_SUBGHZ_Init+0x20>)
 8001e56:	2208      	movs	r2, #8
 8001e58:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8001e5a:	4805      	ldr	r0, [pc, #20]	@ (8001e70 <MX_SUBGHZ_Init+0x20>)
 8001e5c:	f005 fbee 	bl	800763c <HAL_SUBGHZ_Init>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8001e66:	f7ff fe6d 	bl	8001b44 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8001e6a:	bf00      	nop
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	200003e0 	.word	0x200003e0

08001e74 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8001e7c:	2001      	movs	r0, #1
 8001e7e:	f7ff ffcf 	bl	8001e20 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8001e82:	2200      	movs	r2, #0
 8001e84:	2100      	movs	r1, #0
 8001e86:	2032      	movs	r0, #50	@ 0x32
 8001e88:	f002 fb1f 	bl	80044ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8001e8c:	2032      	movs	r0, #50	@ 0x32
 8001e8e:	f002 fb36 	bl	80044fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8001e92:	bf00      	nop
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <LL_RCC_SetClkAfterWakeFromStop>:
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	b083      	sub	sp, #12
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001ea2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8001eac:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	608b      	str	r3, [r1, #8]
}
 8001eb6:	bf00      	nop
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bc80      	pop	{r7}
 8001ebe:	4770      	bx	lr

08001ec0 <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001ec4:	4b02      	ldr	r3, [pc, #8]	@ (8001ed0 <LL_FLASH_GetUDN+0x10>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bc80      	pop	{r7}
 8001ece:	4770      	bx	lr
 8001ed0:	1fff7580 	.word	0x1fff7580

08001ed4 <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8001ed8:	4b03      	ldr	r3, [pc, #12]	@ (8001ee8 <LL_FLASH_GetDeviceID+0x14>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	b2db      	uxtb	r3, r3
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bc80      	pop	{r7}
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	1fff7584 	.word	0x1fff7584

08001eec <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8001ef0:	4b03      	ldr	r3, [pc, #12]	@ (8001f00 <LL_FLASH_GetSTCompanyID+0x14>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	0a1b      	lsrs	r3, r3, #8
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bc80      	pop	{r7}
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	1fff7584 	.word	0x1fff7584

08001f04 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8001f08:	2000      	movs	r0, #0
 8001f0a:	f7ff ffc6 	bl	8001e9a <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 8001f0e:	f019 f9a3 	bl	801b258 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8001f12:	4b10      	ldr	r3, [pc, #64]	@ (8001f54 <SystemApp_Init+0x50>)
 8001f14:	2201      	movs	r2, #1
 8001f16:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 8001f18:	f000 f98c 	bl	8002234 <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8001f1c:	f019 fc2c 	bl	801b778 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8001f20:	480d      	ldr	r0, [pc, #52]	@ (8001f58 <SystemApp_Init+0x54>)
 8001f22:	f019 fcd7 	bl	801b8d4 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /* #warning "should be removed when proper obl is done" */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001f26:	4b0d      	ldr	r3, [pc, #52]	@ (8001f5c <SystemApp_Init+0x58>)
 8001f28:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001f2c:	611a      	str	r2, [r3, #16]

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8001f2e:	2002      	movs	r0, #2
 8001f30:	f019 fcde 	bl	801b8f0 <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 8001f34:	f7ff f97a 	bl	800122c <SYS_InitMeasurement>

  /*Initialize the Sensors */
  EnvSensors_Init();
 8001f38:	f000 fa02 	bl	8002340 <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 8001f3c:	f018 fb5a 	bl	801a5f4 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001f40:	2101      	movs	r1, #1
 8001f42:	2001      	movs	r0, #1
 8001f44:	f018 fb96 	bl	801a674 <UTIL_LPM_SetOffMode>

#if defined (LOW_POWER_DISABLE) && (LOW_POWER_DISABLE == 1)
  /* Disable Stop Mode */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001f48:	2101      	movs	r1, #1
 8001f4a:	2001      	movs	r0, #1
 8001f4c:	f018 fb62 	bl	801a614 <UTIL_LPM_SetStopMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 8001f50:	bf00      	nop
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	200003ec 	.word	0x200003ec
 8001f58:	08002125 	.word	0x08002125
 8001f5c:	58004000 	.word	0x58004000

08001f60 <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 8001f64:	f018 fbb6 	bl	801a6d4 <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 8001f68:	bf00      	nop
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
  uint8_t batteryLevel = 0;
 8001f72:	2300      	movs	r3, #0
 8001f74:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 8001f76:	f7ff f967 	bl	8001248 <SYS_GetBatteryLevel>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	80bb      	strh	r3, [r7, #4]

  /* Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 8001f7e:	88bb      	ldrh	r3, [r7, #4]
 8001f80:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d902      	bls.n	8001f8e <GetBatteryLevel+0x22>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 8001f88:	23fe      	movs	r3, #254	@ 0xfe
 8001f8a:	71fb      	strb	r3, [r7, #7]
 8001f8c:	e014      	b.n	8001fb8 <GetBatteryLevel+0x4c>
  }
  else if (batteryLevelmV < VDD_MIN)
 8001f8e:	88bb      	ldrh	r3, [r7, #4]
 8001f90:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
 8001f94:	d202      	bcs.n	8001f9c <GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
 8001f96:	2300      	movs	r3, #0
 8001f98:	71fb      	strb	r3, [r7, #7]
 8001f9a:	e00d      	b.n	8001fb8 <GetBatteryLevel+0x4c>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 8001f9c:	88bb      	ldrh	r3, [r7, #4]
 8001f9e:	f5a3 63e1 	sub.w	r3, r3, #1800	@ 0x708
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	01db      	lsls	r3, r3, #7
 8001fa8:	1a9b      	subs	r3, r3, r2
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	461a      	mov	r2, r3
 8001fae:	4b05      	ldr	r3, [pc, #20]	@ (8001fc4 <GetBatteryLevel+0x58>)
 8001fb0:	fba3 2302 	umull	r2, r3, r3, r2
 8001fb4:	09db      	lsrs	r3, r3, #7
 8001fb6:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 8001fb8:	79fb      	ldrb	r3, [r7, #7]
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	1b4e81b5 	.word	0x1b4e81b5

08001fc8 <GetTemperatureLevel>:

int16_t GetTemperatureLevel(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b088      	sub	sp, #32
 8001fcc:	af00      	add	r7, sp, #0
  int16_t temperatureLevel = 0;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	83fb      	strh	r3, [r7, #30]

  sensor_t sensor_data;

  EnvSensors_Read(&sensor_data);
 8001fd2:	1d3b      	adds	r3, r7, #4
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f000 f989 	bl	80022ec <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7fe fec9 	bl	8000d74 <__aeabi_f2iz>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	83fb      	strh	r3, [r7, #30]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 8001fe6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3720      	adds	r7, #32
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 8001ff2:	b590      	push	{r4, r7, lr}
 8001ff4:	b087      	sub	sp, #28
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 8001ffe:	f7ff ff5f 	bl	8001ec0 <LL_FLASH_GetUDN>
 8002002:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800200a:	d138      	bne.n	800207e <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 800200c:	f001 f8d6 	bl	80031bc <HAL_GetUIDw0>
 8002010:	4604      	mov	r4, r0
 8002012:	f001 f8e7 	bl	80031e4 <HAL_GetUIDw2>
 8002016:	4603      	mov	r3, r0
 8002018:	4423      	add	r3, r4
 800201a:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 800201c:	f001 f8d8 	bl	80031d0 <HAL_GetUIDw1>
 8002020:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	0e1a      	lsrs	r2, r3, #24
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	3307      	adds	r3, #7
 800202a:	b2d2      	uxtb	r2, r2
 800202c:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	0c1a      	lsrs	r2, r3, #16
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	3306      	adds	r3, #6
 8002036:	b2d2      	uxtb	r2, r2
 8002038:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	0a1a      	lsrs	r2, r3, #8
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	3305      	adds	r3, #5
 8002042:	b2d2      	uxtb	r2, r2
 8002044:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	3304      	adds	r3, #4
 800204a:	693a      	ldr	r2, [r7, #16]
 800204c:	b2d2      	uxtb	r2, r2
 800204e:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	0e1a      	lsrs	r2, r3, #24
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	3303      	adds	r3, #3
 8002058:	b2d2      	uxtb	r2, r2
 800205a:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	0c1a      	lsrs	r2, r3, #16
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	3302      	adds	r3, #2
 8002064:	b2d2      	uxtb	r2, r2
 8002066:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	0a1a      	lsrs	r2, r3, #8
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	3301      	adds	r3, #1
 8002070:	b2d2      	uxtb	r2, r2
 8002072:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	b2da      	uxtb	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 800207c:	e031      	b.n	80020e2 <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	3307      	adds	r3, #7
 8002082:	697a      	ldr	r2, [r7, #20]
 8002084:	b2d2      	uxtb	r2, r2
 8002086:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	0a1a      	lsrs	r2, r3, #8
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	3306      	adds	r3, #6
 8002090:	b2d2      	uxtb	r2, r2
 8002092:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	0c1a      	lsrs	r2, r3, #16
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	3305      	adds	r3, #5
 800209c:	b2d2      	uxtb	r2, r2
 800209e:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	0e1a      	lsrs	r2, r3, #24
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	3304      	adds	r3, #4
 80020a8:	b2d2      	uxtb	r2, r2
 80020aa:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 80020ac:	f7ff ff12 	bl	8001ed4 <LL_FLASH_GetDeviceID>
 80020b0:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	3303      	adds	r3, #3
 80020b6:	697a      	ldr	r2, [r7, #20]
 80020b8:	b2d2      	uxtb	r2, r2
 80020ba:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 80020bc:	f7ff ff16 	bl	8001eec <LL_FLASH_GetSTCompanyID>
 80020c0:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	3302      	adds	r3, #2
 80020c6:	697a      	ldr	r2, [r7, #20]
 80020c8:	b2d2      	uxtb	r2, r2
 80020ca:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	0a1a      	lsrs	r2, r3, #8
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	3301      	adds	r3, #1
 80020d4:	b2d2      	uxtb	r2, r2
 80020d6:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	0c1b      	lsrs	r3, r3, #16
 80020dc:	b2da      	uxtb	r2, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	701a      	strb	r2, [r3, #0]
}
 80020e2:	bf00      	nop
 80020e4:	371c      	adds	r7, #28
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd90      	pop	{r4, r7, pc}

080020ea <GetDevAddr>:

uint32_t GetDevAddr(void)
{
 80020ea:	b590      	push	{r4, r7, lr}
 80020ec:	b083      	sub	sp, #12
 80020ee:	af00      	add	r7, sp, #0
  uint32_t val = 0;
 80020f0:	2300      	movs	r3, #0
 80020f2:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  val = LL_FLASH_GetUDN();
 80020f4:	f7ff fee4 	bl	8001ec0 <LL_FLASH_GetUDN>
 80020f8:	6078      	str	r0, [r7, #4]
  if (val == 0xFFFFFFFF)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002100:	d10b      	bne.n	800211a <GetDevAddr+0x30>
  {
    val = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8002102:	f001 f85b 	bl	80031bc <HAL_GetUIDw0>
 8002106:	4604      	mov	r4, r0
 8002108:	f001 f862 	bl	80031d0 <HAL_GetUIDw1>
 800210c:	4603      	mov	r3, r0
 800210e:	405c      	eors	r4, r3
 8002110:	f001 f868 	bl	80031e4 <HAL_GetUIDw2>
 8002114:	4603      	mov	r3, r0
 8002116:	4063      	eors	r3, r4
 8002118:	607b      	str	r3, [r7, #4]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
  return val;
 800211a:	687b      	ldr	r3, [r7, #4]

}
 800211c:	4618      	mov	r0, r3
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	bd90      	pop	{r4, r7, pc}

08002124 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b086      	sub	sp, #24
 8002128:	af02      	add	r7, sp, #8
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 800212e:	f107 0308 	add.w	r3, r7, #8
 8002132:	4618      	mov	r0, r3
 8002134:	f018 fbde 	bl	801a8f4 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800213e:	9200      	str	r2, [sp, #0]
 8002140:	4a07      	ldr	r2, [pc, #28]	@ (8002160 <TimestampNow+0x3c>)
 8002142:	2110      	movs	r1, #16
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f000 f81d 	bl	8002184 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f7fe f868 	bl	8000220 <strlen>
 8002150:	4603      	mov	r3, r0
 8002152:	b29a      	uxth	r2, r3
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8002158:	bf00      	nop
 800215a:	3710      	adds	r7, #16
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	0801e7e4 	.word	0x0801e7e4

08002164 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8002168:	2101      	movs	r1, #1
 800216a:	2002      	movs	r0, #2
 800216c:	f018 fa52 	bl	801a614 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8002170:	bf00      	nop
 8002172:	bd80      	pop	{r7, pc}

08002174 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8002178:	2100      	movs	r1, #0
 800217a:	2002      	movs	r0, #2
 800217c:	f018 fa4a 	bl	801a614 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 8002180:	bf00      	nop
 8002182:	bd80      	pop	{r7, pc}

08002184 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8002184:	b40c      	push	{r2, r3}
 8002186:	b580      	push	{r7, lr}
 8002188:	b084      	sub	sp, #16
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
 800218e:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8002190:	f107 031c 	add.w	r3, r7, #28
 8002194:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8002196:	6839      	ldr	r1, [r7, #0]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f018 fd7b 	bl	801ac98 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 80021a2:	bf00      	nop
 80021a4:	3710      	adds	r7, #16
 80021a6:	46bd      	mov	sp, r7
 80021a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80021ac:	b002      	add	sp, #8
 80021ae:	4770      	bx	lr

080021b0 <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 80021b8:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	bc80      	pop	{r7}
 80021c2:	4770      	bx	lr

080021c4 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80021ca:	2300      	movs	r3, #0
 80021cc:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 80021ce:	4b06      	ldr	r3, [pc, #24]	@ (80021e8 <HAL_GetTick+0x24>)
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d002      	beq.n	80021dc <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 80021d6:	f000 fa41 	bl	800265c <TIMER_IF_GetTimerValue>
 80021da:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 80021dc:	687b      	ldr	r3, [r7, #4]
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	200003ec 	.word	0x200003ec

080021ec <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	4618      	mov	r0, r3
 80021f8:	f000 fab7 	bl	800276a <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 80021fc:	bf00      	nop
 80021fe:	3708      	adds	r7, #8
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}

08002204 <LL_AHB2_GRP1_EnableClock>:
{
 8002204:	b480      	push	{r7}
 8002206:	b085      	sub	sp, #20
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800220c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002210:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002212:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4313      	orrs	r3, r2
 800221a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800221c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002220:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4013      	ands	r3, r2
 8002226:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002228:	68fb      	ldr	r3, [r7, #12]
}
 800222a:	bf00      	nop
 800222c:	3714      	adds	r7, #20
 800222e:	46bd      	mov	sp, r7
 8002230:	bc80      	pop	{r7}
 8002232:	4770      	bx	lr

08002234 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b086      	sub	sp, #24
 8002238:	af00      	add	r7, sp, #0

  /* USER CODE END DBG_Init_1 */

  /* SW probes */
#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 0 )
  HAL_DBGMCU_DisableDBGSleepMode();
 800223a:	f000 ffdd 	bl	80031f8 <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 800223e:	f000 ffe1 	bl	8003204 <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 8002242:	f000 ffe5 	bl	8003210 <HAL_DBGMCU_DisableDBGStandbyMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8002246:	1d3b      	adds	r3, r7, #4
 8002248:	2200      	movs	r2, #0
 800224a:	601a      	str	r2, [r3, #0]
 800224c:	605a      	str	r2, [r3, #4]
 800224e:	609a      	str	r2, [r3, #8]
 8002250:	60da      	str	r2, [r3, #12]
 8002252:	611a      	str	r2, [r3, #16]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 8002254:	2301      	movs	r3, #1
 8002256:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 8002258:	2300      	movs	r3, #0
 800225a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 800225c:	2303      	movs	r3, #3
 800225e:	613b      	str	r3, [r7, #16]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
 8002260:	2001      	movs	r0, #1
 8002262:	f7ff ffcf 	bl	8002204 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE2_CLK_ENABLE();
 8002266:	2002      	movs	r0, #2
 8002268:	f7ff ffcc 	bl	8002204 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE3_CLK_ENABLE();
 800226c:	2002      	movs	r0, #2
 800226e:	f7ff ffc9 	bl	8002204 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE4_CLK_ENABLE();
 8002272:	2002      	movs	r0, #2
 8002274:	f7ff ffc6 	bl	8002204 <LL_AHB2_GRP1_EnableClock>

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 8002278:	2301      	movs	r3, #1
 800227a:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 800227c:	1d3b      	adds	r3, r7, #4
 800227e:	4619      	mov	r1, r3
 8002280:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002284:	f002 ffa4 	bl	80051d0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 8002288:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800228c:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 800228e:	1d3b      	adds	r3, r7, #4
 8002290:	4619      	mov	r1, r3
 8002292:	4815      	ldr	r0, [pc, #84]	@ (80022e8 <DBG_Init+0xb4>)
 8002294:	f002 ff9c 	bl	80051d0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE3_PIN;
 8002298:	2308      	movs	r3, #8
 800229a:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE3_PORT, &GPIO_InitStruct);
 800229c:	1d3b      	adds	r3, r7, #4
 800229e:	4619      	mov	r1, r3
 80022a0:	4811      	ldr	r0, [pc, #68]	@ (80022e8 <DBG_Init+0xb4>)
 80022a2:	f002 ff95 	bl	80051d0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE4_PIN;
 80022a6:	2310      	movs	r3, #16
 80022a8:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE4_PORT, &GPIO_InitStruct);
 80022aa:	1d3b      	adds	r3, r7, #4
 80022ac:	4619      	mov	r1, r3
 80022ae:	480e      	ldr	r0, [pc, #56]	@ (80022e8 <DBG_Init+0xb4>)
 80022b0:	f002 ff8e 	bl	80051d0 <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 80022b4:	2200      	movs	r2, #0
 80022b6:	2101      	movs	r1, #1
 80022b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022bc:	f003 f9cd 	bl	800565a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 80022c0:	2200      	movs	r2, #0
 80022c2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80022c6:	4808      	ldr	r0, [pc, #32]	@ (80022e8 <DBG_Init+0xb4>)
 80022c8:	f003 f9c7 	bl	800565a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE3_PORT, PROBE_LINE3_PIN, GPIO_PIN_RESET);
 80022cc:	2200      	movs	r2, #0
 80022ce:	2108      	movs	r1, #8
 80022d0:	4805      	ldr	r0, [pc, #20]	@ (80022e8 <DBG_Init+0xb4>)
 80022d2:	f003 f9c2 	bl	800565a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE4_PORT, PROBE_LINE4_PIN, GPIO_PIN_RESET);
 80022d6:	2200      	movs	r2, #0
 80022d8:	2110      	movs	r1, #16
 80022da:	4803      	ldr	r0, [pc, #12]	@ (80022e8 <DBG_Init+0xb4>)
 80022dc:	f003 f9bd 	bl	800565a <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 80022e0:	bf00      	nop
 80022e2:	3718      	adds	r7, #24
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	48000400 	.word	0x48000400

080022ec <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b087      	sub	sp, #28
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EnvSensors_Read */
  float HUMIDITY_Value = HUMIDITY_DEFAULT_VAL;
 80022f4:	4b0d      	ldr	r3, [pc, #52]	@ (800232c <EnvSensors_Read+0x40>)
 80022f6:	617b      	str	r3, [r7, #20]
  float TEMPERATURE_Value = TEMPERATURE_DEFAULT_VAL;
 80022f8:	4b0d      	ldr	r3, [pc, #52]	@ (8002330 <EnvSensors_Read+0x44>)
 80022fa:	613b      	str	r3, [r7, #16]
  float PRESSURE_Value = PRESSURE_DEFAULT_VAL;
 80022fc:	4b0d      	ldr	r3, [pc, #52]	@ (8002334 <EnvSensors_Read+0x48>)
 80022fe:	60fb      	str	r3, [r7, #12]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	697a      	ldr	r2, [r7, #20]
 8002304:	609a      	str	r2, [r3, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	693a      	ldr	r2, [r7, #16]
 800230a:	605a      	str	r2, [r3, #4]
  sensor_data->pressure    = PRESSURE_Value;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	68fa      	ldr	r2, [r7, #12]
 8002310:	601a      	str	r2, [r3, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a08      	ldr	r2, [pc, #32]	@ (8002338 <EnvSensors_Read+0x4c>)
 8002316:	60da      	str	r2, [r3, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	4a08      	ldr	r2, [pc, #32]	@ (800233c <EnvSensors_Read+0x50>)
 800231c:	611a      	str	r2, [r3, #16]

  return 0;
 800231e:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Read */
}
 8002320:	4618      	mov	r0, r3
 8002322:	371c      	adds	r7, #28
 8002324:	46bd      	mov	sp, r7
 8002326:	bc80      	pop	{r7}
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	42480000 	.word	0x42480000
 8002330:	41900000 	.word	0x41900000
 8002334:	447a0000 	.word	0x447a0000
 8002338:	003e090d 	.word	0x003e090d
 800233c:	000503ab 	.word	0x000503ab

08002340 <EnvSensors_Init>:

int32_t EnvSensors_Init(void)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
#if defined( USE_IKS01A2_ENV_SENSOR_HTS221_0 ) || defined( USE_IKS01A2_ENV_SENSOR_LPS22HB_0 ) || \
    defined( USE_IKS01A3_ENV_SENSOR_HTS221_0 ) || defined( USE_IKS01A3_ENV_SENSOR_LPS22HH_0 ) || \
    defined( USE_BSP_DRIVER )
  int32_t ret = BSP_ERROR_NONE;
 8002346:	2300      	movs	r3, #0
 8002348:	607b      	str	r3, [r7, #4]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */

#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  return 0;
 800234a:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Init */
  return ret;
}
 800234c:	4618      	mov	r0, r3
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	bc80      	pop	{r7}
 8002354:	4770      	bx	lr

08002356 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002356:	b480      	push	{r7}
 8002358:	af00      	add	r7, sp, #0
	return 1;
 800235a:	2301      	movs	r3, #1
}
 800235c:	4618      	mov	r0, r3
 800235e:	46bd      	mov	sp, r7
 8002360:	bc80      	pop	{r7}
 8002362:	4770      	bx	lr

08002364 <_kill>:

int _kill(int pid, int sig)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800236e:	f01a fa57 	bl	801c820 <__errno>
 8002372:	4603      	mov	r3, r0
 8002374:	2216      	movs	r2, #22
 8002376:	601a      	str	r2, [r3, #0]
	return -1;
 8002378:	f04f 33ff 	mov.w	r3, #4294967295
}
 800237c:	4618      	mov	r0, r3
 800237e:	3708      	adds	r7, #8
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <_exit>:

void _exit (int status)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800238c:	f04f 31ff 	mov.w	r1, #4294967295
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f7ff ffe7 	bl	8002364 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002396:	bf00      	nop
 8002398:	e7fd      	b.n	8002396 <_exit+0x12>

0800239a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800239a:	b580      	push	{r7, lr}
 800239c:	b086      	sub	sp, #24
 800239e:	af00      	add	r7, sp, #0
 80023a0:	60f8      	str	r0, [r7, #12]
 80023a2:	60b9      	str	r1, [r7, #8]
 80023a4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023a6:	2300      	movs	r3, #0
 80023a8:	617b      	str	r3, [r7, #20]
 80023aa:	e00a      	b.n	80023c2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80023ac:	f3af 8000 	nop.w
 80023b0:	4601      	mov	r1, r0
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	1c5a      	adds	r2, r3, #1
 80023b6:	60ba      	str	r2, [r7, #8]
 80023b8:	b2ca      	uxtb	r2, r1
 80023ba:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	3301      	adds	r3, #1
 80023c0:	617b      	str	r3, [r7, #20]
 80023c2:	697a      	ldr	r2, [r7, #20]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	dbf0      	blt.n	80023ac <_read+0x12>
	}

return len;
 80023ca:	687b      	ldr	r3, [r7, #4]
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3718      	adds	r7, #24
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b086      	sub	sp, #24
 80023d8:	af00      	add	r7, sp, #0
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	60b9      	str	r1, [r7, #8]
 80023de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023e0:	2300      	movs	r3, #0
 80023e2:	617b      	str	r3, [r7, #20]
 80023e4:	e009      	b.n	80023fa <_write+0x26>
	{
		__io_putchar(*ptr++);
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	1c5a      	adds	r2, r3, #1
 80023ea:	60ba      	str	r2, [r7, #8]
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	3301      	adds	r3, #1
 80023f8:	617b      	str	r3, [r7, #20]
 80023fa:	697a      	ldr	r2, [r7, #20]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	429a      	cmp	r2, r3
 8002400:	dbf1      	blt.n	80023e6 <_write+0x12>
	}
	return len;
 8002402:	687b      	ldr	r3, [r7, #4]
}
 8002404:	4618      	mov	r0, r3
 8002406:	3718      	adds	r7, #24
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <_close>:

int _close(int file)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
	return -1;
 8002414:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002418:	4618      	mov	r0, r3
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	bc80      	pop	{r7}
 8002420:	4770      	bx	lr

08002422 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002422:	b480      	push	{r7}
 8002424:	b083      	sub	sp, #12
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
 800242a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002432:	605a      	str	r2, [r3, #4]
	return 0;
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	370c      	adds	r7, #12
 800243a:	46bd      	mov	sp, r7
 800243c:	bc80      	pop	{r7}
 800243e:	4770      	bx	lr

08002440 <_isatty>:

int _isatty(int file)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
	return 1;
 8002448:	2301      	movs	r3, #1
}
 800244a:	4618      	mov	r0, r3
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	bc80      	pop	{r7}
 8002452:	4770      	bx	lr

08002454 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002454:	b480      	push	{r7}
 8002456:	b085      	sub	sp, #20
 8002458:	af00      	add	r7, sp, #0
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	60b9      	str	r1, [r7, #8]
 800245e:	607a      	str	r2, [r7, #4]
	return 0;
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	3714      	adds	r7, #20
 8002466:	46bd      	mov	sp, r7
 8002468:	bc80      	pop	{r7}
 800246a:	4770      	bx	lr

0800246c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b086      	sub	sp, #24
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002474:	4a14      	ldr	r2, [pc, #80]	@ (80024c8 <_sbrk+0x5c>)
 8002476:	4b15      	ldr	r3, [pc, #84]	@ (80024cc <_sbrk+0x60>)
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002480:	4b13      	ldr	r3, [pc, #76]	@ (80024d0 <_sbrk+0x64>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d102      	bne.n	800248e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002488:	4b11      	ldr	r3, [pc, #68]	@ (80024d0 <_sbrk+0x64>)
 800248a:	4a12      	ldr	r2, [pc, #72]	@ (80024d4 <_sbrk+0x68>)
 800248c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800248e:	4b10      	ldr	r3, [pc, #64]	@ (80024d0 <_sbrk+0x64>)
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4413      	add	r3, r2
 8002496:	693a      	ldr	r2, [r7, #16]
 8002498:	429a      	cmp	r2, r3
 800249a:	d207      	bcs.n	80024ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800249c:	f01a f9c0 	bl	801c820 <__errno>
 80024a0:	4603      	mov	r3, r0
 80024a2:	220c      	movs	r2, #12
 80024a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024a6:	f04f 33ff 	mov.w	r3, #4294967295
 80024aa:	e009      	b.n	80024c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024ac:	4b08      	ldr	r3, [pc, #32]	@ (80024d0 <_sbrk+0x64>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024b2:	4b07      	ldr	r3, [pc, #28]	@ (80024d0 <_sbrk+0x64>)
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4413      	add	r3, r2
 80024ba:	4a05      	ldr	r2, [pc, #20]	@ (80024d0 <_sbrk+0x64>)
 80024bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024be:	68fb      	ldr	r3, [r7, #12]
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3718      	adds	r7, #24
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	20010000 	.word	0x20010000
 80024cc:	00000400 	.word	0x00000400
 80024d0:	200003f0 	.word	0x200003f0
 80024d4:	20002528 	.word	0x20002528

080024d8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 80024dc:	bf00      	nop
 80024de:	46bd      	mov	sp, r7
 80024e0:	bc80      	pop	{r7}
 80024e2:	4770      	bx	lr

080024e4 <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	689b      	ldr	r3, [r3, #8]
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bc80      	pop	{r7}
 80024f8:	4770      	bx	lr
	...

080024fc <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002502:	2300      	movs	r3, #0
 8002504:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 8002506:	4b14      	ldr	r3, [pc, #80]	@ (8002558 <TIMER_IF_Init+0x5c>)
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	f083 0301 	eor.w	r3, r3, #1
 800250e:	b2db      	uxtb	r3, r3
 8002510:	2b00      	cmp	r3, #0
 8002512:	d01b      	beq.n	800254c <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002514:	4b11      	ldr	r3, [pc, #68]	@ (800255c <TIMER_IF_Init+0x60>)
 8002516:	f04f 32ff 	mov.w	r2, #4294967295
 800251a:	631a      	str	r2, [r3, #48]	@ 0x30
    /*Init RTC*/
    MX_RTC_Init();
 800251c:	f7ff fb40 	bl	8001ba0 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8002520:	f000 f856 	bl	80025d0 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002524:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002528:	480c      	ldr	r0, [pc, #48]	@ (800255c <TIMER_IF_Init+0x60>)
 800252a:	f004 fdef 	bl	800710c <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 800252e:	4b0b      	ldr	r3, [pc, #44]	@ (800255c <TIMER_IF_Init+0x60>)
 8002530:	f04f 32ff 	mov.w	r2, #4294967295
 8002534:	631a      	str	r2, [r3, #48]	@ 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8002536:	4809      	ldr	r0, [pc, #36]	@ (800255c <TIMER_IF_Init+0x60>)
 8002538:	f004 ff26 	bl	8007388 <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 800253c:	2000      	movs	r0, #0
 800253e:	f000 f9d3 	bl	80028e8 <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 8002542:	f000 f85f 	bl	8002604 <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 8002546:	4b04      	ldr	r3, [pc, #16]	@ (8002558 <TIMER_IF_Init+0x5c>)
 8002548:	2201      	movs	r2, #1
 800254a:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 800254c:	79fb      	ldrb	r3, [r7, #7]
}
 800254e:	4618      	mov	r0, r3
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	200003f4 	.word	0x200003f4
 800255c:	200003a8 	.word	0x200003a8

08002560 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b08e      	sub	sp, #56	@ 0x38
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002568:	2300      	movs	r3, #0
 800256a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 800256e:	f107 0308 	add.w	r3, r7, #8
 8002572:	222c      	movs	r2, #44	@ 0x2c
 8002574:	2100      	movs	r1, #0
 8002576:	4618      	mov	r0, r3
 8002578:	f01a f8ff 	bl	801c77a <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 800257c:	f000 f828 	bl	80025d0 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8002580:	4b11      	ldr	r3, [pc, #68]	@ (80025c8 <TIMER_IF_StartTimer+0x68>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	4413      	add	r3, r2
 8002588:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 800258a:	2300      	movs	r3, #0
 800258c:	627b      	str	r3, [r7, #36]	@ 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	43db      	mvns	r3, r3
 8002592:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002594:	2300      	movs	r3, #0
 8002596:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8002598:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800259c:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 800259e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80025a2:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80025a4:	f107 0308 	add.w	r3, r7, #8
 80025a8:	2201      	movs	r2, #1
 80025aa:	4619      	mov	r1, r3
 80025ac:	4807      	ldr	r0, [pc, #28]	@ (80025cc <TIMER_IF_StartTimer+0x6c>)
 80025ae:	f004 fca1 	bl	8006ef4 <HAL_RTC_SetAlarm_IT>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d001      	beq.n	80025bc <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 80025b8:	f7ff fac4 	bl	8001b44 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 80025bc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3738      	adds	r7, #56	@ 0x38
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	200003f8 	.word	0x200003f8
 80025cc:	200003a8 	.word	0x200003a8

080025d0 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80025d6:	2300      	movs	r3, #0
 80025d8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 80025da:	4b08      	ldr	r3, [pc, #32]	@ (80025fc <TIMER_IF_StopTimer+0x2c>)
 80025dc:	2201      	movs	r2, #1
 80025de:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 80025e0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80025e4:	4806      	ldr	r0, [pc, #24]	@ (8002600 <TIMER_IF_StopTimer+0x30>)
 80025e6:	f004 fd91 	bl	800710c <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 80025ea:	4b05      	ldr	r3, [pc, #20]	@ (8002600 <TIMER_IF_StopTimer+0x30>)
 80025ec:	f04f 32ff 	mov.w	r2, #4294967295
 80025f0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 80025f2:	79fb      	ldrb	r3, [r7, #7]
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3708      	adds	r7, #8
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	40002800 	.word	0x40002800
 8002600:	200003a8 	.word	0x200003a8

08002604 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8002608:	f000 f98e 	bl	8002928 <GetTimerTicks>
 800260c:	4603      	mov	r3, r0
 800260e:	4a03      	ldr	r2, [pc, #12]	@ (800261c <TIMER_IF_SetTimerContext+0x18>)
 8002610:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002612:	4b02      	ldr	r3, [pc, #8]	@ (800261c <TIMER_IF_SetTimerContext+0x18>)
 8002614:	681b      	ldr	r3, [r3, #0]
}
 8002616:	4618      	mov	r0, r3
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	200003f8 	.word	0x200003f8

08002620 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002624:	4b02      	ldr	r3, [pc, #8]	@ (8002630 <TIMER_IF_GetTimerContext+0x10>)
 8002626:	681b      	ldr	r3, [r3, #0]
}
 8002628:	4618      	mov	r0, r3
 800262a:	46bd      	mov	sp, r7
 800262c:	bc80      	pop	{r7}
 800262e:	4770      	bx	lr
 8002630:	200003f8 	.word	0x200003f8

08002634 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800263a:	2300      	movs	r3, #0
 800263c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 800263e:	f000 f973 	bl	8002928 <GetTimerTicks>
 8002642:	4602      	mov	r2, r0
 8002644:	4b04      	ldr	r3, [pc, #16]	@ (8002658 <TIMER_IF_GetTimerElapsedTime+0x24>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 800264c:	687b      	ldr	r3, [r7, #4]
}
 800264e:	4618      	mov	r0, r3
 8002650:	3708      	adds	r7, #8
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	200003f8 	.word	0x200003f8

0800265c <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002662:	2300      	movs	r3, #0
 8002664:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 8002666:	4b06      	ldr	r3, [pc, #24]	@ (8002680 <TIMER_IF_GetTimerValue+0x24>)
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d002      	beq.n	8002674 <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 800266e:	f000 f95b 	bl	8002928 <GetTimerTicks>
 8002672:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 8002674:	687b      	ldr	r3, [r7, #4]
}
 8002676:	4618      	mov	r0, r3
 8002678:	3708      	adds	r7, #8
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	200003f4 	.word	0x200003f4

08002684 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800268a:	2300      	movs	r3, #0
 800268c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 800268e:	2303      	movs	r3, #3
 8002690:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 8002692:	687b      	ldr	r3, [r7, #4]
}
 8002694:	4618      	mov	r0, r3
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	bc80      	pop	{r7}
 800269c:	4770      	bx	lr

0800269e <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 800269e:	b5b0      	push	{r4, r5, r7, lr}
 80026a0:	b084      	sub	sp, #16
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 80026a6:	2100      	movs	r1, #0
 80026a8:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 80026aa:	6879      	ldr	r1, [r7, #4]
 80026ac:	2000      	movs	r0, #0
 80026ae:	460a      	mov	r2, r1
 80026b0:	4603      	mov	r3, r0
 80026b2:	0d95      	lsrs	r5, r2, #22
 80026b4:	0294      	lsls	r4, r2, #10
 80026b6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80026ba:	f04f 0300 	mov.w	r3, #0
 80026be:	4620      	mov	r0, r4
 80026c0:	4629      	mov	r1, r5
 80026c2:	f7fe fb7d 	bl	8000dc0 <__aeabi_uldivmod>
 80026c6:	4602      	mov	r2, r0
 80026c8:	460b      	mov	r3, r1
 80026ca:	4613      	mov	r3, r2
 80026cc:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 80026ce:	68fb      	ldr	r3, [r7, #12]
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3710      	adds	r7, #16
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bdb0      	pop	{r4, r5, r7, pc}

080026d8 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 80026d8:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80026dc:	b085      	sub	sp, #20
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 80026e2:	2100      	movs	r1, #0
 80026e4:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 80026e6:	6879      	ldr	r1, [r7, #4]
 80026e8:	2000      	movs	r0, #0
 80026ea:	460c      	mov	r4, r1
 80026ec:	4605      	mov	r5, r0
 80026ee:	4620      	mov	r0, r4
 80026f0:	4629      	mov	r1, r5
 80026f2:	f04f 0a00 	mov.w	sl, #0
 80026f6:	f04f 0b00 	mov.w	fp, #0
 80026fa:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 80026fe:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 8002702:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 8002706:	4650      	mov	r0, sl
 8002708:	4659      	mov	r1, fp
 800270a:	1b02      	subs	r2, r0, r4
 800270c:	eb61 0305 	sbc.w	r3, r1, r5
 8002710:	f04f 0000 	mov.w	r0, #0
 8002714:	f04f 0100 	mov.w	r1, #0
 8002718:	0099      	lsls	r1, r3, #2
 800271a:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800271e:	0090      	lsls	r0, r2, #2
 8002720:	4602      	mov	r2, r0
 8002722:	460b      	mov	r3, r1
 8002724:	eb12 0804 	adds.w	r8, r2, r4
 8002728:	eb43 0905 	adc.w	r9, r3, r5
 800272c:	f04f 0200 	mov.w	r2, #0
 8002730:	f04f 0300 	mov.w	r3, #0
 8002734:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002738:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800273c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002740:	4690      	mov	r8, r2
 8002742:	4699      	mov	r9, r3
 8002744:	4640      	mov	r0, r8
 8002746:	4649      	mov	r1, r9
 8002748:	f04f 0200 	mov.w	r2, #0
 800274c:	f04f 0300 	mov.w	r3, #0
 8002750:	0a82      	lsrs	r2, r0, #10
 8002752:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002756:	0a8b      	lsrs	r3, r1, #10
 8002758:	4613      	mov	r3, r2
 800275a:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 800275c:	68fb      	ldr	r3, [r7, #12]
}
 800275e:	4618      	mov	r0, r3
 8002760:	3714      	adds	r7, #20
 8002762:	46bd      	mov	sp, r7
 8002764:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002768:	4770      	bx	lr

0800276a <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 800276a:	b580      	push	{r7, lr}
 800276c:	b084      	sub	sp, #16
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f7ff ff93 	bl	800269e <TIMER_IF_Convert_ms2Tick>
 8002778:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 800277a:	f000 f8d5 	bl	8002928 <GetTimerTicks>
 800277e:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002780:	e000      	b.n	8002784 <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 8002782:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002784:	f000 f8d0 	bl	8002928 <GetTimerTicks>
 8002788:	4602      	mov	r2, r0
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	68fa      	ldr	r2, [r7, #12]
 8002790:	429a      	cmp	r2, r3
 8002792:	d8f6      	bhi.n	8002782 <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 8002794:	bf00      	nop
 8002796:	bf00      	nop
 8002798:	3710      	adds	r7, #16
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}

0800279e <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800279e:	b580      	push	{r7, lr}
 80027a0:	b082      	sub	sp, #8
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 80027a6:	f018 fea5 	bl	801b4f4 <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 80027aa:	bf00      	nop
 80027ac:	3708      	adds	r7, #8
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 80027b2:	b580      	push	{r7, lr}
 80027b4:	b084      	sub	sp, #16
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 80027ba:	f000 f8a5 	bl	8002908 <TIMER_IF_BkUp_Read_MSBticks>
 80027be:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	3301      	adds	r3, #1
 80027c4:	4618      	mov	r0, r3
 80027c6:	f000 f88f 	bl	80028e8 <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 80027ca:	bf00      	nop
 80027cc:	3710      	adds	r7, #16
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 80027d2:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027d6:	b08c      	sub	sp, #48	@ 0x30
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 80027dc:	2300      	movs	r3, #0
 80027de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 80027e0:	f000 f8a2 	bl	8002928 <GetTimerTicks>
 80027e4:	62b8      	str	r0, [r7, #40]	@ 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 80027e6:	f000 f88f 	bl	8002908 <TIMER_IF_BkUp_Read_MSBticks>
 80027ea:	6278      	str	r0, [r7, #36]	@ 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 80027ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ee:	2200      	movs	r2, #0
 80027f0:	60bb      	str	r3, [r7, #8]
 80027f2:	60fa      	str	r2, [r7, #12]
 80027f4:	f04f 0200 	mov.w	r2, #0
 80027f8:	f04f 0300 	mov.w	r3, #0
 80027fc:	68b9      	ldr	r1, [r7, #8]
 80027fe:	000b      	movs	r3, r1
 8002800:	2200      	movs	r2, #0
 8002802:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002804:	2000      	movs	r0, #0
 8002806:	460c      	mov	r4, r1
 8002808:	4605      	mov	r5, r0
 800280a:	eb12 0804 	adds.w	r8, r2, r4
 800280e:	eb43 0905 	adc.w	r9, r3, r5
 8002812:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8002816:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800281a:	f04f 0200 	mov.w	r2, #0
 800281e:	f04f 0300 	mov.w	r3, #0
 8002822:	0a82      	lsrs	r2, r0, #10
 8002824:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002828:	0a8b      	lsrs	r3, r1, #10
 800282a:	4613      	mov	r3, r2
 800282c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	2200      	movs	r2, #0
 8002832:	603b      	str	r3, [r7, #0]
 8002834:	607a      	str	r2, [r7, #4]
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 800283c:	f04f 0b00 	mov.w	fp, #0
 8002840:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	4618      	mov	r0, r3
 8002848:	f7ff ff46 	bl	80026d8 <TIMER_IF_Convert_Tick2ms>
 800284c:	4603      	mov	r3, r0
 800284e:	b29a      	uxth	r2, r3
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 8002854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8002856:	4618      	mov	r0, r3
 8002858:	3730      	adds	r7, #48	@ 0x30
 800285a:	46bd      	mov	sp, r7
 800285c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002860 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	2100      	movs	r1, #0
 800286c:	4803      	ldr	r0, [pc, #12]	@ (800287c <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 800286e:	f004 fe1d 	bl	80074ac <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 8002872:	bf00      	nop
 8002874:	3708      	adds	r7, #8
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	200003a8 	.word	0x200003a8

08002880 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	2101      	movs	r1, #1
 800288c:	4803      	ldr	r0, [pc, #12]	@ (800289c <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 800288e:	f004 fe0d 	bl	80074ac <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 8002892:	bf00      	nop
 8002894:	3708      	adds	r7, #8
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	200003a8 	.word	0x200003a8

080028a0 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80028a6:	2300      	movs	r3, #0
 80028a8:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 80028aa:	2100      	movs	r1, #0
 80028ac:	4804      	ldr	r0, [pc, #16]	@ (80028c0 <TIMER_IF_BkUp_Read_Seconds+0x20>)
 80028ae:	f004 fe15 	bl	80074dc <HAL_RTCEx_BKUPRead>
 80028b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 80028b4:	687b      	ldr	r3, [r7, #4]
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	200003a8 	.word	0x200003a8

080028c4 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80028ca:	2300      	movs	r3, #0
 80028cc:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 80028ce:	2101      	movs	r1, #1
 80028d0:	4804      	ldr	r0, [pc, #16]	@ (80028e4 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 80028d2:	f004 fe03 	bl	80074dc <HAL_RTCEx_BKUPRead>
 80028d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 80028d8:	687b      	ldr	r3, [r7, #4]
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3708      	adds	r7, #8
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	200003a8 	.word	0x200003a8

080028e8 <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	2102      	movs	r1, #2
 80028f4:	4803      	ldr	r0, [pc, #12]	@ (8002904 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 80028f6:	f004 fdd9 	bl	80074ac <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 80028fa:	bf00      	nop
 80028fc:	3708      	adds	r7, #8
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	200003a8 	.word	0x200003a8

08002908 <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 800290e:	2102      	movs	r1, #2
 8002910:	4804      	ldr	r0, [pc, #16]	@ (8002924 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 8002912:	f004 fde3 	bl	80074dc <HAL_RTCEx_BKUPRead>
 8002916:	6078      	str	r0, [r7, #4]
  return MSBticks;
 8002918:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 800291a:	4618      	mov	r0, r3
 800291c:	3708      	adds	r7, #8
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	200003a8 	.word	0x200003a8

08002928 <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 800292e:	480b      	ldr	r0, [pc, #44]	@ (800295c <GetTimerTicks+0x34>)
 8002930:	f7ff fdd8 	bl	80024e4 <LL_RTC_TIME_GetSubSecond>
 8002934:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002936:	e003      	b.n	8002940 <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8002938:	4808      	ldr	r0, [pc, #32]	@ (800295c <GetTimerTicks+0x34>)
 800293a:	f7ff fdd3 	bl	80024e4 <LL_RTC_TIME_GetSubSecond>
 800293e:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002940:	4806      	ldr	r0, [pc, #24]	@ (800295c <GetTimerTicks+0x34>)
 8002942:	f7ff fdcf 	bl	80024e4 <LL_RTC_TIME_GetSubSecond>
 8002946:	4602      	mov	r2, r0
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	4293      	cmp	r3, r2
 800294c:	d1f4      	bne.n	8002938 <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 8002952:	4618      	mov	r0, r3
 8002954:	3708      	adds	r7, #8
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	40002800 	.word	0x40002800

08002960 <LL_AHB2_GRP1_EnableClock>:
{
 8002960:	b480      	push	{r7}
 8002962:	b085      	sub	sp, #20
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002968:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800296c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800296e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4313      	orrs	r3, r2
 8002976:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002978:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800297c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4013      	ands	r3, r2
 8002982:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002984:	68fb      	ldr	r3, [r7, #12]
}
 8002986:	bf00      	nop
 8002988:	3714      	adds	r7, #20
 800298a:	46bd      	mov	sp, r7
 800298c:	bc80      	pop	{r7}
 800298e:	4770      	bx	lr

08002990 <LL_APB1_GRP1_EnableClock>:
{
 8002990:	b480      	push	{r7}
 8002992:	b085      	sub	sp, #20
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002998:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800299c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800299e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80029a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029ac:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4013      	ands	r3, r2
 80029b2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80029b4:	68fb      	ldr	r3, [r7, #12]
}
 80029b6:	bf00      	nop
 80029b8:	3714      	adds	r7, #20
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bc80      	pop	{r7}
 80029be:	4770      	bx	lr

080029c0 <LL_APB1_GRP1_DisableClock>:
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 80029c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029cc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	43db      	mvns	r3, r3
 80029d2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80029d6:	4013      	ands	r3, r2
 80029d8:	658b      	str	r3, [r1, #88]	@ 0x58
}
 80029da:	bf00      	nop
 80029dc:	370c      	adds	r7, #12
 80029de:	46bd      	mov	sp, r7
 80029e0:	bc80      	pop	{r7}
 80029e2:	4770      	bx	lr

080029e4 <LL_APB2_GRP1_EnableClock>:
{
 80029e4:	b480      	push	{r7}
 80029e6:	b085      	sub	sp, #20
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80029ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029f0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80029f2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80029fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a00:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4013      	ands	r3, r2
 8002a06:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a08:	68fb      	ldr	r3, [r7, #12]
}
 8002a0a:	bf00      	nop
 8002a0c:	3714      	adds	r7, #20
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bc80      	pop	{r7}
 8002a12:	4770      	bx	lr

08002a14 <LL_APB2_GRP1_DisableClock>:
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8002a1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a20:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	43db      	mvns	r3, r3
 8002a26:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	660b      	str	r3, [r1, #96]	@ 0x60
}
 8002a2e:	bf00      	nop
 8002a30:	370c      	adds	r7, #12
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bc80      	pop	{r7}
 8002a36:	4770      	bx	lr

08002a38 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002a3c:	4b22      	ldr	r3, [pc, #136]	@ (8002ac8 <MX_USART1_UART_Init+0x90>)
 8002a3e:	4a23      	ldr	r2, [pc, #140]	@ (8002acc <MX_USART1_UART_Init+0x94>)
 8002a40:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002a42:	4b21      	ldr	r3, [pc, #132]	@ (8002ac8 <MX_USART1_UART_Init+0x90>)
 8002a44:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002a48:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a4a:	4b1f      	ldr	r3, [pc, #124]	@ (8002ac8 <MX_USART1_UART_Init+0x90>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002a50:	4b1d      	ldr	r3, [pc, #116]	@ (8002ac8 <MX_USART1_UART_Init+0x90>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a56:	4b1c      	ldr	r3, [pc, #112]	@ (8002ac8 <MX_USART1_UART_Init+0x90>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a5c:	4b1a      	ldr	r3, [pc, #104]	@ (8002ac8 <MX_USART1_UART_Init+0x90>)
 8002a5e:	220c      	movs	r2, #12
 8002a60:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a62:	4b19      	ldr	r3, [pc, #100]	@ (8002ac8 <MX_USART1_UART_Init+0x90>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a68:	4b17      	ldr	r3, [pc, #92]	@ (8002ac8 <MX_USART1_UART_Init+0x90>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a6e:	4b16      	ldr	r3, [pc, #88]	@ (8002ac8 <MX_USART1_UART_Init+0x90>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002a74:	4b14      	ldr	r3, [pc, #80]	@ (8002ac8 <MX_USART1_UART_Init+0x90>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a7a:	4b13      	ldr	r3, [pc, #76]	@ (8002ac8 <MX_USART1_UART_Init+0x90>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002a80:	4811      	ldr	r0, [pc, #68]	@ (8002ac8 <MX_USART1_UART_Init+0x90>)
 8002a82:	f005 fa18 	bl	8007eb6 <HAL_UART_Init>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d001      	beq.n	8002a90 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002a8c:	f7ff f85a 	bl	8001b44 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a90:	2100      	movs	r1, #0
 8002a92:	480d      	ldr	r0, [pc, #52]	@ (8002ac8 <MX_USART1_UART_Init+0x90>)
 8002a94:	f007 fac7 	bl	800a026 <HAL_UARTEx_SetTxFifoThreshold>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d001      	beq.n	8002aa2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002a9e:	f7ff f851 	bl	8001b44 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002aa2:	2100      	movs	r1, #0
 8002aa4:	4808      	ldr	r0, [pc, #32]	@ (8002ac8 <MX_USART1_UART_Init+0x90>)
 8002aa6:	f007 fafc 	bl	800a0a2 <HAL_UARTEx_SetRxFifoThreshold>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d001      	beq.n	8002ab4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002ab0:	f7ff f848 	bl	8001b44 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 8002ab4:	4804      	ldr	r0, [pc, #16]	@ (8002ac8 <MX_USART1_UART_Init+0x90>)
 8002ab6:	f007 fa43 	bl	8009f40 <HAL_UARTEx_EnableFifoMode>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d001      	beq.n	8002ac4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002ac0:	f7ff f840 	bl	8001b44 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002ac4:	bf00      	nop
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	200003fc 	.word	0x200003fc
 8002acc:	40013800 	.word	0x40013800

08002ad0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002ad4:	4b22      	ldr	r3, [pc, #136]	@ (8002b60 <MX_USART2_UART_Init+0x90>)
 8002ad6:	4a23      	ldr	r2, [pc, #140]	@ (8002b64 <MX_USART2_UART_Init+0x94>)
 8002ad8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002ada:	4b21      	ldr	r3, [pc, #132]	@ (8002b60 <MX_USART2_UART_Init+0x90>)
 8002adc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002ae0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002ae2:	4b1f      	ldr	r3, [pc, #124]	@ (8002b60 <MX_USART2_UART_Init+0x90>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002ae8:	4b1d      	ldr	r3, [pc, #116]	@ (8002b60 <MX_USART2_UART_Init+0x90>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002aee:	4b1c      	ldr	r3, [pc, #112]	@ (8002b60 <MX_USART2_UART_Init+0x90>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002af4:	4b1a      	ldr	r3, [pc, #104]	@ (8002b60 <MX_USART2_UART_Init+0x90>)
 8002af6:	220c      	movs	r2, #12
 8002af8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002afa:	4b19      	ldr	r3, [pc, #100]	@ (8002b60 <MX_USART2_UART_Init+0x90>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b00:	4b17      	ldr	r3, [pc, #92]	@ (8002b60 <MX_USART2_UART_Init+0x90>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b06:	4b16      	ldr	r3, [pc, #88]	@ (8002b60 <MX_USART2_UART_Init+0x90>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002b0c:	4b14      	ldr	r3, [pc, #80]	@ (8002b60 <MX_USART2_UART_Init+0x90>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b12:	4b13      	ldr	r3, [pc, #76]	@ (8002b60 <MX_USART2_UART_Init+0x90>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002b18:	4811      	ldr	r0, [pc, #68]	@ (8002b60 <MX_USART2_UART_Init+0x90>)
 8002b1a:	f005 f9cc 	bl	8007eb6 <HAL_UART_Init>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d001      	beq.n	8002b28 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002b24:	f7ff f80e 	bl	8001b44 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b28:	2100      	movs	r1, #0
 8002b2a:	480d      	ldr	r0, [pc, #52]	@ (8002b60 <MX_USART2_UART_Init+0x90>)
 8002b2c:	f007 fa7b 	bl	800a026 <HAL_UARTEx_SetTxFifoThreshold>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d001      	beq.n	8002b3a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002b36:	f7ff f805 	bl	8001b44 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b3a:	2100      	movs	r1, #0
 8002b3c:	4808      	ldr	r0, [pc, #32]	@ (8002b60 <MX_USART2_UART_Init+0x90>)
 8002b3e:	f007 fab0 	bl	800a0a2 <HAL_UARTEx_SetRxFifoThreshold>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d001      	beq.n	8002b4c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002b48:	f7fe fffc 	bl	8001b44 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002b4c:	4804      	ldr	r0, [pc, #16]	@ (8002b60 <MX_USART2_UART_Init+0x90>)
 8002b4e:	f007 fa32 	bl	8009fb6 <HAL_UARTEx_DisableFifoMode>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d001      	beq.n	8002b5c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002b58:	f7fe fff4 	bl	8001b44 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002b5c:	bf00      	nop
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	2000048c 	.word	0x2000048c
 8002b64:	40004400 	.word	0x40004400

08002b68 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b096      	sub	sp, #88	@ 0x58
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b70:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002b74:	2200      	movs	r2, #0
 8002b76:	601a      	str	r2, [r3, #0]
 8002b78:	605a      	str	r2, [r3, #4]
 8002b7a:	609a      	str	r2, [r3, #8]
 8002b7c:	60da      	str	r2, [r3, #12]
 8002b7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b80:	f107 030c 	add.w	r3, r7, #12
 8002b84:	2238      	movs	r2, #56	@ 0x38
 8002b86:	2100      	movs	r1, #0
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f019 fdf6 	bl	801c77a <memset>
  if(uartHandle->Instance==USART1)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a49      	ldr	r2, [pc, #292]	@ (8002cb8 <HAL_UART_MspInit+0x150>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d157      	bne.n	8002c48 <HAL_UART_MspInit+0xe0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002b9c:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8002ba0:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ba2:	f107 030c 	add.w	r3, r7, #12
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f004 f810 	bl	8006bcc <HAL_RCCEx_PeriphCLKConfig>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d001      	beq.n	8002bb6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002bb2:	f7fe ffc7 	bl	8001b44 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002bb6:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002bba:	f7ff ff13 	bl	80029e4 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bbe:	2002      	movs	r0, #2
 8002bc0:	f7ff fece 	bl	8002960 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 8002bc4:	23c0      	movs	r3, #192	@ 0xc0
 8002bc6:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc8:	2302      	movs	r3, #2
 8002bca:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002bd4:	2307      	movs	r3, #7
 8002bd6:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bd8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002bdc:	4619      	mov	r1, r3
 8002bde:	4837      	ldr	r0, [pc, #220]	@ (8002cbc <HAL_UART_MspInit+0x154>)
 8002be0:	f002 faf6 	bl	80051d0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 8002be4:	4b36      	ldr	r3, [pc, #216]	@ (8002cc0 <HAL_UART_MspInit+0x158>)
 8002be6:	4a37      	ldr	r2, [pc, #220]	@ (8002cc4 <HAL_UART_MspInit+0x15c>)
 8002be8:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002bea:	4b35      	ldr	r3, [pc, #212]	@ (8002cc0 <HAL_UART_MspInit+0x158>)
 8002bec:	2212      	movs	r2, #18
 8002bee:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002bf0:	4b33      	ldr	r3, [pc, #204]	@ (8002cc0 <HAL_UART_MspInit+0x158>)
 8002bf2:	2210      	movs	r2, #16
 8002bf4:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002bf6:	4b32      	ldr	r3, [pc, #200]	@ (8002cc0 <HAL_UART_MspInit+0x158>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002bfc:	4b30      	ldr	r3, [pc, #192]	@ (8002cc0 <HAL_UART_MspInit+0x158>)
 8002bfe:	2280      	movs	r2, #128	@ 0x80
 8002c00:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c02:	4b2f      	ldr	r3, [pc, #188]	@ (8002cc0 <HAL_UART_MspInit+0x158>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c08:	4b2d      	ldr	r3, [pc, #180]	@ (8002cc0 <HAL_UART_MspInit+0x158>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002c0e:	4b2c      	ldr	r3, [pc, #176]	@ (8002cc0 <HAL_UART_MspInit+0x158>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002c14:	4b2a      	ldr	r3, [pc, #168]	@ (8002cc0 <HAL_UART_MspInit+0x158>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002c1a:	4829      	ldr	r0, [pc, #164]	@ (8002cc0 <HAL_UART_MspInit+0x158>)
 8002c1c:	f001 fc8c 	bl	8004538 <HAL_DMA_Init>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d001      	beq.n	8002c2a <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 8002c26:	f7fe ff8d 	bl	8001b44 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a24      	ldr	r2, [pc, #144]	@ (8002cc0 <HAL_UART_MspInit+0x158>)
 8002c2e:	679a      	str	r2, [r3, #120]	@ 0x78
 8002c30:	4a23      	ldr	r2, [pc, #140]	@ (8002cc0 <HAL_UART_MspInit+0x158>)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8002c36:	2200      	movs	r2, #0
 8002c38:	2102      	movs	r1, #2
 8002c3a:	2024      	movs	r0, #36	@ 0x24
 8002c3c:	f001 fc45 	bl	80044ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002c40:	2024      	movs	r0, #36	@ 0x24
 8002c42:	f001 fc5c 	bl	80044fe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002c46:	e033      	b.n	8002cb0 <HAL_UART_MspInit+0x148>
  else if(uartHandle->Instance==USART2)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a1e      	ldr	r2, [pc, #120]	@ (8002cc8 <HAL_UART_MspInit+0x160>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d12e      	bne.n	8002cb0 <HAL_UART_MspInit+0x148>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002c52:	2302      	movs	r3, #2
 8002c54:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002c56:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 8002c5a:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c5c:	f107 030c 	add.w	r3, r7, #12
 8002c60:	4618      	mov	r0, r3
 8002c62:	f003 ffb3 	bl	8006bcc <HAL_RCCEx_PeriphCLKConfig>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d001      	beq.n	8002c70 <HAL_UART_MspInit+0x108>
      Error_Handler();
 8002c6c:	f7fe ff6a 	bl	8001b44 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c70:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8002c74:	f7ff fe8c 	bl	8002990 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c78:	2001      	movs	r0, #1
 8002c7a:	f7ff fe71 	bl	8002960 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 8002c7e:	230c      	movs	r3, #12
 8002c80:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c82:	2302      	movs	r3, #2
 8002c84:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c86:	2300      	movs	r3, #0
 8002c88:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002c8e:	2307      	movs	r3, #7
 8002c90:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c92:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002c96:	4619      	mov	r1, r3
 8002c98:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c9c:	f002 fa98 	bl	80051d0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	2100      	movs	r1, #0
 8002ca4:	2025      	movs	r0, #37	@ 0x25
 8002ca6:	f001 fc10 	bl	80044ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002caa:	2025      	movs	r0, #37	@ 0x25
 8002cac:	f001 fc27 	bl	80044fe <HAL_NVIC_EnableIRQ>
}
 8002cb0:	bf00      	nop
 8002cb2:	3758      	adds	r7, #88	@ 0x58
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	40013800 	.word	0x40013800
 8002cbc:	48000400 	.word	0x48000400
 8002cc0:	2000051c 	.word	0x2000051c
 8002cc4:	40020008 	.word	0x40020008
 8002cc8:	40004400 	.word	0x40004400

08002ccc <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a14      	ldr	r2, [pc, #80]	@ (8002d2c <HAL_UART_MspDeInit+0x60>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d110      	bne.n	8002d00 <HAL_UART_MspDeInit+0x34>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8002cde:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002ce2:	f7ff fe97 	bl	8002a14 <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOB, USARTx_RX_Pin|USARTx_TX_Pin);
 8002ce6:	21c0      	movs	r1, #192	@ 0xc0
 8002ce8:	4811      	ldr	r0, [pc, #68]	@ (8002d30 <HAL_UART_MspDeInit+0x64>)
 8002cea:	f002 fbd1 	bl	8005490 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f001 fcc8 	bl	8004688 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002cf8:	2024      	movs	r0, #36	@ 0x24
 8002cfa:	f001 fc0e 	bl	800451a <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8002cfe:	e010      	b.n	8002d22 <HAL_UART_MspDeInit+0x56>
  else if(uartHandle->Instance==USART2)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a0b      	ldr	r2, [pc, #44]	@ (8002d34 <HAL_UART_MspDeInit+0x68>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d10b      	bne.n	8002d22 <HAL_UART_MspDeInit+0x56>
    __HAL_RCC_USART2_CLK_DISABLE();
 8002d0a:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8002d0e:	f7ff fe57 	bl	80029c0 <LL_APB1_GRP1_DisableClock>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_3|GPIO_PIN_2);
 8002d12:	210c      	movs	r1, #12
 8002d14:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002d18:	f002 fbba 	bl	8005490 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8002d1c:	2025      	movs	r0, #37	@ 0x25
 8002d1e:	f001 fbfc 	bl	800451a <HAL_NVIC_DisableIRQ>
}
 8002d22:	bf00      	nop
 8002d24:	3708      	adds	r7, #8
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	40013800 	.word	0x40013800
 8002d30:	48000400 	.word	0x48000400
 8002d34:	40004400 	.word	0x40004400

08002d38 <LL_APB2_GRP1_ForceReset>:
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 8002d40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d44:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d46:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	640b      	str	r3, [r1, #64]	@ 0x40
}
 8002d50:	bf00      	nop
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bc80      	pop	{r7}
 8002d58:	4770      	bx	lr

08002d5a <LL_APB2_GRP1_ReleaseReset>:
{
 8002d5a:	b480      	push	{r7}
 8002d5c:	b083      	sub	sp, #12
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 8002d62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d66:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	43db      	mvns	r3, r3
 8002d6c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002d70:	4013      	ands	r3, r2
 8002d72:	640b      	str	r3, [r1, #64]	@ 0x40
}
 8002d74:	bf00      	nop
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bc80      	pop	{r7}
 8002d7c:	4770      	bx	lr
	...

08002d80 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002d88:	4b06      	ldr	r3, [pc, #24]	@ (8002da4 <LL_EXTI_EnableIT_0_31+0x24>)
 8002d8a:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8002d8e:	4905      	ldr	r1, [pc, #20]	@ (8002da4 <LL_EXTI_EnableIT_0_31+0x24>)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8002d98:	bf00      	nop
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bc80      	pop	{r7}
 8002da0:	4770      	bx	lr
 8002da2:	bf00      	nop
 8002da4:	58000800 	.word	0x58000800

08002da8 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8002db0:	4a07      	ldr	r2, [pc, #28]	@ (8002dd0 <vcom_Init+0x28>)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 8002db6:	f7fe fad9 	bl	800136c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002dba:	f7ff fe3d 	bl	8002a38 <MX_USART1_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_26);
 8002dbe:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8002dc2:	f7ff ffdd 	bl	8002d80 <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 8002dc6:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3708      	adds	r7, #8
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	20000580 	.word	0x20000580

08002dd4 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
 8002dd8:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002ddc:	f7ff ffac 	bl	8002d38 <LL_APB2_GRP1_ForceReset>
  __HAL_RCC_USART1_RELEASE_RESET();
 8002de0:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002de4:	f7ff ffb9 	bl	8002d5a <LL_APB2_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 8002de8:	4804      	ldr	r0, [pc, #16]	@ (8002dfc <vcom_DeInit+0x28>)
 8002dea:	f7ff ff6f 	bl	8002ccc <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8002dee:	200f      	movs	r0, #15
 8002df0:	f001 fb93 	bl	800451a <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 8002df4:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	200003fc 	.word	0x200003fc

08002e00 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	460b      	mov	r3, r1
 8002e0a:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8002e0c:	887b      	ldrh	r3, [r7, #2]
 8002e0e:	461a      	mov	r2, r3
 8002e10:	6879      	ldr	r1, [r7, #4]
 8002e12:	4804      	ldr	r0, [pc, #16]	@ (8002e24 <vcom_Trace_DMA+0x24>)
 8002e14:	f005 f8f6 	bl	8008004 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 8002e18:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3708      	adds	r7, #8
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	200003fc 	.word	0x200003fc

08002e28 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8002e30:	4a19      	ldr	r2, [pc, #100]	@ (8002e98 <vcom_ReceiveInit+0x70>)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8002e36:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002e3a:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 8002e3c:	f107 0308 	add.w	r3, r7, #8
 8002e40:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002e44:	4815      	ldr	r0, [pc, #84]	@ (8002e9c <vcom_ReceiveInit+0x74>)
 8002e46:	f006 ffee 	bl	8009e26 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 8002e4a:	bf00      	nop
 8002e4c:	4b13      	ldr	r3, [pc, #76]	@ (8002e9c <vcom_ReceiveInit+0x74>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	69db      	ldr	r3, [r3, #28]
 8002e52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e5a:	d0f7      	beq.n	8002e4c <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 8002e5c:	bf00      	nop
 8002e5e:	4b0f      	ldr	r3, [pc, #60]	@ (8002e9c <vcom_ReceiveInit+0x74>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	69db      	ldr	r3, [r3, #28]
 8002e64:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e68:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e6c:	d1f7      	bne.n	8002e5e <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8002e6e:	4b0b      	ldr	r3, [pc, #44]	@ (8002e9c <vcom_ReceiveInit+0x74>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	689a      	ldr	r2, [r3, #8]
 8002e74:	4b09      	ldr	r3, [pc, #36]	@ (8002e9c <vcom_ReceiveInit+0x74>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8002e7c:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 8002e7e:	4807      	ldr	r0, [pc, #28]	@ (8002e9c <vcom_ReceiveInit+0x74>)
 8002e80:	f007 f82c 	bl	8009edc <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 8002e84:	2201      	movs	r2, #1
 8002e86:	4906      	ldr	r1, [pc, #24]	@ (8002ea0 <vcom_ReceiveInit+0x78>)
 8002e88:	4804      	ldr	r0, [pc, #16]	@ (8002e9c <vcom_ReceiveInit+0x74>)
 8002e8a:	f005 f865 	bl	8007f58 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 8002e8e:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3710      	adds	r7, #16
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	20000584 	.word	0x20000584
 8002e9c:	200003fc 	.word	0x200003fc
 8002ea0:	2000057c 	.word	0x2000057c

08002ea4 <vcom_Resume>:

void vcom_Resume(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002ea8:	4808      	ldr	r0, [pc, #32]	@ (8002ecc <vcom_Resume+0x28>)
 8002eaa:	f005 f804 	bl	8007eb6 <HAL_UART_Init>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d001      	beq.n	8002eb8 <vcom_Resume+0x14>
  {
    Error_Handler();
 8002eb4:	f7fe fe46 	bl	8001b44 <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002eb8:	4805      	ldr	r0, [pc, #20]	@ (8002ed0 <vcom_Resume+0x2c>)
 8002eba:	f001 fb3d 	bl	8004538 <HAL_DMA_Init>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d001      	beq.n	8002ec8 <vcom_Resume+0x24>
  {
    Error_Handler();
 8002ec4:	f7fe fe3e 	bl	8001b44 <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8002ec8:	bf00      	nop
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	200003fc 	.word	0x200003fc
 8002ed0:	2000051c 	.word	0x2000051c

08002ed4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART1)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a05      	ldr	r2, [pc, #20]	@ (8002ef8 <HAL_UART_TxCpltCallback+0x24>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d103      	bne.n	8002eee <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 8002ee6:	4b05      	ldr	r3, [pc, #20]	@ (8002efc <HAL_UART_TxCpltCallback+0x28>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	2000      	movs	r0, #0
 8002eec:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8002eee:	bf00      	nop
 8002ef0:	3708      	adds	r7, #8
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	40013800 	.word	0x40013800
 8002efc:	20000580 	.word	0x20000580

08002f00 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART1)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a0d      	ldr	r2, [pc, #52]	@ (8002f44 <HAL_UART_RxCpltCallback+0x44>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d113      	bne.n	8002f3a <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 8002f12:	4b0d      	ldr	r3, [pc, #52]	@ (8002f48 <HAL_UART_RxCpltCallback+0x48>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d00a      	beq.n	8002f30 <HAL_UART_RxCpltCallback+0x30>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d105      	bne.n	8002f30 <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 8002f24:	4b08      	ldr	r3, [pc, #32]	@ (8002f48 <HAL_UART_RxCpltCallback+0x48>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	2101      	movs	r1, #1
 8002f2c:	4807      	ldr	r0, [pc, #28]	@ (8002f4c <HAL_UART_RxCpltCallback+0x4c>)
 8002f2e:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 8002f30:	2201      	movs	r2, #1
 8002f32:	4906      	ldr	r1, [pc, #24]	@ (8002f4c <HAL_UART_RxCpltCallback+0x4c>)
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f005 f80f 	bl	8007f58 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8002f3a:	bf00      	nop
 8002f3c:	3708      	adds	r7, #8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	40013800 	.word	0x40013800
 8002f48:	20000584 	.word	0x20000584
 8002f4c:	2000057c 	.word	0x2000057c

08002f50 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002f50:	480d      	ldr	r0, [pc, #52]	@ (8002f88 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002f52:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002f54:	f7ff fac0 	bl	80024d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f58:	480c      	ldr	r0, [pc, #48]	@ (8002f8c <LoopForever+0x6>)
  ldr r1, =_edata
 8002f5a:	490d      	ldr	r1, [pc, #52]	@ (8002f90 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002f5c:	4a0d      	ldr	r2, [pc, #52]	@ (8002f94 <LoopForever+0xe>)
  movs r3, #0
 8002f5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f60:	e002      	b.n	8002f68 <LoopCopyDataInit>

08002f62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f66:	3304      	adds	r3, #4

08002f68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f6c:	d3f9      	bcc.n	8002f62 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f6e:	4a0a      	ldr	r2, [pc, #40]	@ (8002f98 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002f70:	4c0a      	ldr	r4, [pc, #40]	@ (8002f9c <LoopForever+0x16>)
  movs r3, #0
 8002f72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f74:	e001      	b.n	8002f7a <LoopFillZerobss>

08002f76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f78:	3204      	adds	r2, #4

08002f7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f7c:	d3fb      	bcc.n	8002f76 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002f7e:	f019 fc55 	bl	801c82c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002f82:	f7fe fc69 	bl	8001858 <main>

08002f86 <LoopForever>:

LoopForever:
    b LoopForever
 8002f86:	e7fe      	b.n	8002f86 <LoopForever>
  ldr   r0, =_estack
 8002f88:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002f8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f90:	20000308 	.word	0x20000308
  ldr r2, =_sidata
 8002f94:	0801fc1c 	.word	0x0801fc1c
  ldr r2, =_sbss
 8002f98:	20000308 	.word	0x20000308
  ldr r4, =_ebss
 8002f9c:	20002528 	.word	0x20002528

08002fa0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002fa0:	e7fe      	b.n	8002fa0 <ADC_IRQHandler>

08002fa2 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8002fa2:	b580      	push	{r7, lr}
 8002fa4:	b086      	sub	sp, #24
 8002fa6:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8002fa8:	1d3b      	adds	r3, r7, #4
 8002faa:	2200      	movs	r2, #0
 8002fac:	601a      	str	r2, [r3, #0]
 8002fae:	605a      	str	r2, [r3, #4]
 8002fb0:	609a      	str	r2, [r3, #8]
 8002fb2:	60da      	str	r2, [r3, #12]
 8002fb4:	611a      	str	r2, [r3, #16]
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8002fb6:	2310      	movs	r3, #16
 8002fb8:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8002fc6:	1d3b      	adds	r3, r7, #4
 8002fc8:	4619      	mov	r1, r3
 8002fca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002fce:	f002 f8ff 	bl	80051d0 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8002fd2:	2320      	movs	r3, #32
 8002fd4:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8002fd6:	1d3b      	adds	r3, r7, #4
 8002fd8:	4619      	mov	r1, r3
 8002fda:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002fde:	f002 f8f7 	bl	80051d0 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	2120      	movs	r1, #32
 8002fe6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002fea:	f002 fb36 	bl	800565a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002fee:	2200      	movs	r2, #0
 8002ff0:	2110      	movs	r1, #16
 8002ff2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002ff6:	f002 fb30 	bl	800565a <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8002ffa:	2300      	movs	r3, #0
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3718      	adds	r7, #24
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}

08003004 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	4603      	mov	r3, r0
 800300c:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 800300e:	79fb      	ldrb	r3, [r7, #7]
 8003010:	2b03      	cmp	r3, #3
 8003012:	d83f      	bhi.n	8003094 <BSP_RADIO_ConfigRFSwitch+0x90>
 8003014:	a201      	add	r2, pc, #4	@ (adr r2, 800301c <BSP_RADIO_ConfigRFSwitch+0x18>)
 8003016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800301a:	bf00      	nop
 800301c:	0800302d 	.word	0x0800302d
 8003020:	08003047 	.word	0x08003047
 8003024:	08003061 	.word	0x08003061
 8003028:	0800307b 	.word	0x0800307b
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 800302c:	2200      	movs	r2, #0
 800302e:	2110      	movs	r1, #16
 8003030:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003034:	f002 fb11 	bl	800565a <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8003038:	2200      	movs	r2, #0
 800303a:	2120      	movs	r1, #32
 800303c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003040:	f002 fb0b 	bl	800565a <HAL_GPIO_WritePin>
      break;      
 8003044:	e027      	b.n	8003096 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8003046:	2201      	movs	r2, #1
 8003048:	2110      	movs	r1, #16
 800304a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800304e:	f002 fb04 	bl	800565a <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8003052:	2200      	movs	r2, #0
 8003054:	2120      	movs	r1, #32
 8003056:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800305a:	f002 fafe 	bl	800565a <HAL_GPIO_WritePin>
      break;
 800305e:	e01a      	b.n	8003096 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8003060:	2201      	movs	r2, #1
 8003062:	2110      	movs	r1, #16
 8003064:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003068:	f002 faf7 	bl	800565a <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 800306c:	2201      	movs	r2, #1
 800306e:	2120      	movs	r1, #32
 8003070:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003074:	f002 faf1 	bl	800565a <HAL_GPIO_WritePin>
      break;
 8003078:	e00d      	b.n	8003096 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 800307a:	2200      	movs	r2, #0
 800307c:	2110      	movs	r1, #16
 800307e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003082:	f002 faea 	bl	800565a <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8003086:	2201      	movs	r2, #1
 8003088:	2120      	movs	r1, #32
 800308a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800308e:	f002 fae4 	bl	800565a <HAL_GPIO_WritePin>
      break;
 8003092:	e000      	b.n	8003096 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    default:
      break;    
 8003094:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 8003096:	2300      	movs	r3, #0
}
 8003098:	4618      	mov	r0, r3
 800309a:	3708      	adds	r7, #8
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 80030a0:	b480      	push	{r7}
 80030a2:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_HP;
 80030a4:	2302      	movs	r3, #2
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bc80      	pop	{r7}
 80030ac:	4770      	bx	lr

080030ae <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 80030ae:	b480      	push	{r7}
 80030b0:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 80030b2:	2301      	movs	r3, #1
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bc80      	pop	{r7}
 80030ba:	4770      	bx	lr

080030bc <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 80030bc:	b480      	push	{r7}
 80030be:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 80030c0:	2301      	movs	r3, #1
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bc80      	pop	{r7}
 80030c8:	4770      	bx	lr

080030ca <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 80030ca:	b480      	push	{r7}
 80030cc:	b085      	sub	sp, #20
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	4603      	mov	r3, r0
 80030d2:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 80030d4:	79fb      	ldrb	r3, [r7, #7]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d102      	bne.n	80030e0 <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 80030da:	230f      	movs	r3, #15
 80030dc:	60fb      	str	r3, [r7, #12]
 80030de:	e001      	b.n	80030e4 <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 80030e0:	2316      	movs	r3, #22
 80030e2:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80030e4:	68fb      	ldr	r3, [r7, #12]
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3714      	adds	r7, #20
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bc80      	pop	{r7}
 80030ee:	4770      	bx	lr

080030f0 <LL_DBGMCU_DisableDBGSleepMode>:
{
 80030f0:	b480      	push	{r7}
 80030f2:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80030f4:	4b04      	ldr	r3, [pc, #16]	@ (8003108 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	4a03      	ldr	r2, [pc, #12]	@ (8003108 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 80030fa:	f023 0301 	bic.w	r3, r3, #1
 80030fe:	6053      	str	r3, [r2, #4]
}
 8003100:	bf00      	nop
 8003102:	46bd      	mov	sp, r7
 8003104:	bc80      	pop	{r7}
 8003106:	4770      	bx	lr
 8003108:	e0042000 	.word	0xe0042000

0800310c <LL_DBGMCU_DisableDBGStopMode>:
{
 800310c:	b480      	push	{r7}
 800310e:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8003110:	4b04      	ldr	r3, [pc, #16]	@ (8003124 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	4a03      	ldr	r2, [pc, #12]	@ (8003124 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8003116:	f023 0302 	bic.w	r3, r3, #2
 800311a:	6053      	str	r3, [r2, #4]
}
 800311c:	bf00      	nop
 800311e:	46bd      	mov	sp, r7
 8003120:	bc80      	pop	{r7}
 8003122:	4770      	bx	lr
 8003124:	e0042000 	.word	0xe0042000

08003128 <LL_DBGMCU_DisableDBGStandbyMode>:
{
 8003128:	b480      	push	{r7}
 800312a:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 800312c:	4b04      	ldr	r3, [pc, #16]	@ (8003140 <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	4a03      	ldr	r2, [pc, #12]	@ (8003140 <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8003132:	f023 0304 	bic.w	r3, r3, #4
 8003136:	6053      	str	r3, [r2, #4]
}
 8003138:	bf00      	nop
 800313a:	46bd      	mov	sp, r7
 800313c:	bc80      	pop	{r7}
 800313e:	4770      	bx	lr
 8003140:	e0042000 	.word	0xe0042000

08003144 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800314a:	2300      	movs	r3, #0
 800314c:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800314e:	2003      	movs	r0, #3
 8003150:	f001 f9b0 	bl	80044b4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003154:	f003 fb5c 	bl	8006810 <HAL_RCC_GetHCLKFreq>
 8003158:	4603      	mov	r3, r0
 800315a:	4a09      	ldr	r2, [pc, #36]	@ (8003180 <HAL_Init+0x3c>)
 800315c:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800315e:	200f      	movs	r0, #15
 8003160:	f7ff f826 	bl	80021b0 <HAL_InitTick>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d002      	beq.n	8003170 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	71fb      	strb	r3, [r7, #7]
 800316e:	e001      	b.n	8003174 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003170:	f7fe fddf 	bl	8001d32 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003174:	79fb      	ldrb	r3, [r7, #7]
}
 8003176:	4618      	mov	r0, r3
 8003178:	3708      	adds	r7, #8
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	20000000 	.word	0x20000000

08003184 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8003184:	b480      	push	{r7}
 8003186:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003188:	4b04      	ldr	r3, [pc, #16]	@ (800319c <HAL_SuspendTick+0x18>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a03      	ldr	r2, [pc, #12]	@ (800319c <HAL_SuspendTick+0x18>)
 800318e:	f023 0302 	bic.w	r3, r3, #2
 8003192:	6013      	str	r3, [r2, #0]
}
 8003194:	bf00      	nop
 8003196:	46bd      	mov	sp, r7
 8003198:	bc80      	pop	{r7}
 800319a:	4770      	bx	lr
 800319c:	e000e010 	.word	0xe000e010

080031a0 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80031a0:	b480      	push	{r7}
 80031a2:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80031a4:	4b04      	ldr	r3, [pc, #16]	@ (80031b8 <HAL_ResumeTick+0x18>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a03      	ldr	r2, [pc, #12]	@ (80031b8 <HAL_ResumeTick+0x18>)
 80031aa:	f043 0302 	orr.w	r3, r3, #2
 80031ae:	6013      	str	r3, [r2, #0]
}
 80031b0:	bf00      	nop
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bc80      	pop	{r7}
 80031b6:	4770      	bx	lr
 80031b8:	e000e010 	.word	0xe000e010

080031bc <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 80031bc:	b480      	push	{r7}
 80031be:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 80031c0:	4b02      	ldr	r3, [pc, #8]	@ (80031cc <HAL_GetUIDw0+0x10>)
 80031c2:	681b      	ldr	r3, [r3, #0]
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bc80      	pop	{r7}
 80031ca:	4770      	bx	lr
 80031cc:	1fff7590 	.word	0x1fff7590

080031d0 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 80031d4:	4b02      	ldr	r3, [pc, #8]	@ (80031e0 <HAL_GetUIDw1+0x10>)
 80031d6:	681b      	ldr	r3, [r3, #0]
}
 80031d8:	4618      	mov	r0, r3
 80031da:	46bd      	mov	sp, r7
 80031dc:	bc80      	pop	{r7}
 80031de:	4770      	bx	lr
 80031e0:	1fff7594 	.word	0x1fff7594

080031e4 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 80031e4:	b480      	push	{r7}
 80031e6:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 80031e8:	4b02      	ldr	r3, [pc, #8]	@ (80031f4 <HAL_GetUIDw2+0x10>)
 80031ea:	681b      	ldr	r3, [r3, #0]
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bc80      	pop	{r7}
 80031f2:	4770      	bx	lr
 80031f4:	1fff7598 	.word	0x1fff7598

080031f8 <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGSleepMode();
 80031fc:	f7ff ff78 	bl	80030f0 <LL_DBGMCU_DisableDBGSleepMode>
}
 8003200:	bf00      	nop
 8003202:	bd80      	pop	{r7, pc}

08003204 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStopMode();
 8003208:	f7ff ff80 	bl	800310c <LL_DBGMCU_DisableDBGStopMode>
}
 800320c:	bf00      	nop
 800320e:	bd80      	pop	{r7, pc}

08003210 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStandbyMode();
 8003214:	f7ff ff88 	bl	8003128 <LL_DBGMCU_DisableDBGStandbyMode>
}
 8003218:	bf00      	nop
 800321a:	bd80      	pop	{r7, pc}

0800321c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	431a      	orrs	r2, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	601a      	str	r2, [r3, #0]
}
 8003236:	bf00      	nop
 8003238:	370c      	adds	r7, #12
 800323a:	46bd      	mov	sp, r7
 800323c:	bc80      	pop	{r7}
 800323e:	4770      	bx	lr

08003240 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003250:	4618      	mov	r0, r3
 8003252:	370c      	adds	r7, #12
 8003254:	46bd      	mov	sp, r7
 8003256:	bc80      	pop	{r7}
 8003258:	4770      	bx	lr

0800325a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800325a:	b480      	push	{r7}
 800325c:	b085      	sub	sp, #20
 800325e:	af00      	add	r7, sp, #0
 8003260:	60f8      	str	r0, [r7, #12]
 8003262:	60b9      	str	r1, [r7, #8]
 8003264:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	695a      	ldr	r2, [r3, #20]
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	f003 0304 	and.w	r3, r3, #4
 8003270:	2107      	movs	r1, #7
 8003272:	fa01 f303 	lsl.w	r3, r1, r3
 8003276:	43db      	mvns	r3, r3
 8003278:	401a      	ands	r2, r3
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	f003 0304 	and.w	r3, r3, #4
 8003280:	6879      	ldr	r1, [r7, #4]
 8003282:	fa01 f303 	lsl.w	r3, r1, r3
 8003286:	431a      	orrs	r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 800328c:	bf00      	nop
 800328e:	3714      	adds	r7, #20
 8003290:	46bd      	mov	sp, r7
 8003292:	bc80      	pop	{r7}
 8003294:	4770      	bx	lr

08003296 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8003296:	b480      	push	{r7}
 8003298:	b083      	sub	sp, #12
 800329a:	af00      	add	r7, sp, #0
 800329c:	6078      	str	r0, [r7, #4]
 800329e:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	695a      	ldr	r2, [r3, #20]
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	f003 0304 	and.w	r3, r3, #4
 80032aa:	2107      	movs	r1, #7
 80032ac:	fa01 f303 	lsl.w	r3, r1, r3
 80032b0:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80032b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032bc:	4618      	mov	r0, r3
 80032be:	370c      	adds	r7, #12
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bc80      	pop	{r7}
 80032c4:	4770      	bx	lr

080032c6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80032c6:	b480      	push	{r7}
 80032c8:	b083      	sub	sp, #12
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d101      	bne.n	80032de <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80032da:	2301      	movs	r3, #1
 80032dc:	e000      	b.n	80032e0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bc80      	pop	{r7}
 80032e8:	4770      	bx	lr

080032ea <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80032ea:	b480      	push	{r7}
 80032ec:	b085      	sub	sp, #20
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	60f8      	str	r0, [r7, #12]
 80032f2:	60b9      	str	r1, [r7, #8]
 80032f4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	f003 031f 	and.w	r3, r3, #31
 8003300:	210f      	movs	r1, #15
 8003302:	fa01 f303 	lsl.w	r3, r1, r3
 8003306:	43db      	mvns	r3, r3
 8003308:	401a      	ands	r2, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	0e9b      	lsrs	r3, r3, #26
 800330e:	f003 010f 	and.w	r1, r3, #15
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	f003 031f 	and.w	r3, r3, #31
 8003318:	fa01 f303 	lsl.w	r3, r1, r3
 800331c:	431a      	orrs	r2, r3
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003322:	bf00      	nop
 8003324:	3714      	adds	r7, #20
 8003326:	46bd      	mov	sp, r7
 8003328:	bc80      	pop	{r7}
 800332a:	4770      	bx	lr

0800332c <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003340:	431a      	orrs	r2, r3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003346:	bf00      	nop
 8003348:	370c      	adds	r7, #12
 800334a:	46bd      	mov	sp, r7
 800334c:	bc80      	pop	{r7}
 800334e:	4770      	bx	lr

08003350 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003364:	43db      	mvns	r3, r3
 8003366:	401a      	ands	r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800336c:	bf00      	nop
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	bc80      	pop	{r7}
 8003374:	4770      	bx	lr

08003376 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8003376:	b480      	push	{r7}
 8003378:	b085      	sub	sp, #20
 800337a:	af00      	add	r7, sp, #0
 800337c:	60f8      	str	r0, [r7, #12]
 800337e:	60b9      	str	r1, [r7, #8]
 8003380:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	695a      	ldr	r2, [r3, #20]
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	021b      	lsls	r3, r3, #8
 800338a:	43db      	mvns	r3, r3
 800338c:	401a      	ands	r2, r3
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	0219      	lsls	r1, r3, #8
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	400b      	ands	r3, r1
 8003396:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 800339a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800339e:	431a      	orrs	r2, r3
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80033a4:	bf00      	nop
 80033a6:	3714      	adds	r7, #20
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bc80      	pop	{r7}
 80033ac:	4770      	bx	lr

080033ae <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80033ae:	b480      	push	{r7}
 80033b0:	b083      	sub	sp, #12
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80033be:	f023 0317 	bic.w	r3, r3, #23
 80033c2:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80033ca:	bf00      	nop
 80033cc:	370c      	adds	r7, #12
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bc80      	pop	{r7}
 80033d2:	4770      	bx	lr

080033d4 <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80033e4:	f023 0317 	bic.w	r3, r3, #23
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	6093      	str	r3, [r2, #8]
}
 80033ec:	bf00      	nop
 80033ee:	370c      	adds	r7, #12
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bc80      	pop	{r7}
 80033f4:	4770      	bx	lr

080033f6 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80033f6:	b480      	push	{r7}
 80033f8:	b083      	sub	sp, #12
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003406:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800340a:	d101      	bne.n	8003410 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800340c:	2301      	movs	r3, #1
 800340e:	e000      	b.n	8003412 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003410:	2300      	movs	r3, #0
}
 8003412:	4618      	mov	r0, r3
 8003414:	370c      	adds	r7, #12
 8003416:	46bd      	mov	sp, r7
 8003418:	bc80      	pop	{r7}
 800341a:	4770      	bx	lr

0800341c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800342c:	f023 0317 	bic.w	r3, r3, #23
 8003430:	f043 0201 	orr.w	r2, r3, #1
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003438:	bf00      	nop
 800343a:	370c      	adds	r7, #12
 800343c:	46bd      	mov	sp, r7
 800343e:	bc80      	pop	{r7}
 8003440:	4770      	bx	lr

08003442 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003442:	b480      	push	{r7}
 8003444:	b083      	sub	sp, #12
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003452:	f023 0317 	bic.w	r3, r3, #23
 8003456:	f043 0202 	orr.w	r2, r3, #2
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800345e:	bf00      	nop
 8003460:	370c      	adds	r7, #12
 8003462:	46bd      	mov	sp, r7
 8003464:	bc80      	pop	{r7}
 8003466:	4770      	bx	lr

08003468 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	f003 0301 	and.w	r3, r3, #1
 8003478:	2b01      	cmp	r3, #1
 800347a:	d101      	bne.n	8003480 <LL_ADC_IsEnabled+0x18>
 800347c:	2301      	movs	r3, #1
 800347e:	e000      	b.n	8003482 <LL_ADC_IsEnabled+0x1a>
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	370c      	adds	r7, #12
 8003486:	46bd      	mov	sp, r7
 8003488:	bc80      	pop	{r7}
 800348a:	4770      	bx	lr

0800348c <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f003 0302 	and.w	r3, r3, #2
 800349c:	2b02      	cmp	r3, #2
 800349e:	d101      	bne.n	80034a4 <LL_ADC_IsDisableOngoing+0x18>
 80034a0:	2301      	movs	r3, #1
 80034a2:	e000      	b.n	80034a6 <LL_ADC_IsDisableOngoing+0x1a>
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	370c      	adds	r7, #12
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bc80      	pop	{r7}
 80034ae:	4770      	bx	lr

080034b0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80034c0:	f023 0317 	bic.w	r3, r3, #23
 80034c4:	f043 0204 	orr.w	r2, r3, #4
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80034cc:	bf00      	nop
 80034ce:	370c      	adds	r7, #12
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bc80      	pop	{r7}
 80034d4:	4770      	bx	lr

080034d6 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80034d6:	b480      	push	{r7}
 80034d8:	b083      	sub	sp, #12
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80034e6:	f023 0317 	bic.w	r3, r3, #23
 80034ea:	f043 0210 	orr.w	r2, r3, #16
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80034f2:	bf00      	nop
 80034f4:	370c      	adds	r7, #12
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bc80      	pop	{r7}
 80034fa:	4770      	bx	lr

080034fc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	f003 0304 	and.w	r3, r3, #4
 800350c:	2b04      	cmp	r3, #4
 800350e:	d101      	bne.n	8003514 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003510:	2301      	movs	r3, #1
 8003512:	e000      	b.n	8003516 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003514:	2300      	movs	r3, #0
}
 8003516:	4618      	mov	r0, r3
 8003518:	370c      	adds	r7, #12
 800351a:	46bd      	mov	sp, r7
 800351c:	bc80      	pop	{r7}
 800351e:	4770      	bx	lr

08003520 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b088      	sub	sp, #32
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003528:	2300      	movs	r3, #0
 800352a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 800352c:	2300      	movs	r3, #0
 800352e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8003530:	2300      	movs	r3, #0
 8003532:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003534:	2300      	movs	r3, #0
 8003536:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d101      	bne.n	8003542 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e19e      	b.n	8003880 <HAL_ADC_Init+0x360>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800354c:	2b00      	cmp	r3, #0
 800354e:	d109      	bne.n	8003564 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f7fd fe43 	bl	80011dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4618      	mov	r0, r3
 800356a:	f7ff ff44 	bl	80033f6 <LL_ADC_IsInternalRegulatorEnabled>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d115      	bne.n	80035a0 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4618      	mov	r0, r3
 800357a:	f7ff ff18 	bl	80033ae <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800357e:	4b99      	ldr	r3, [pc, #612]	@ (80037e4 <HAL_ADC_Init+0x2c4>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	099b      	lsrs	r3, r3, #6
 8003584:	4a98      	ldr	r2, [pc, #608]	@ (80037e8 <HAL_ADC_Init+0x2c8>)
 8003586:	fba2 2303 	umull	r2, r3, r2, r3
 800358a:	099b      	lsrs	r3, r3, #6
 800358c:	3301      	adds	r3, #1
 800358e:	005b      	lsls	r3, r3, #1
 8003590:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003592:	e002      	b.n	800359a <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	3b01      	subs	r3, #1
 8003598:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d1f9      	bne.n	8003594 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7ff ff26 	bl	80033f6 <LL_ADC_IsInternalRegulatorEnabled>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d10d      	bne.n	80035cc <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035b4:	f043 0210 	orr.w	r2, r3, #16
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035c0:	f043 0201 	orr.w	r2, r3, #1
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7ff ff93 	bl	80034fc <LL_ADC_REG_IsConversionOngoing>
 80035d6:	60f8      	str	r0, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035dc:	f003 0310 	and.w	r3, r3, #16
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	f040 8144 	bne.w	800386e <HAL_ADC_Init+0x34e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	f040 8140 	bne.w	800386e <HAL_ADC_Init+0x34e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035f2:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80035f6:	f043 0202 	orr.w	r2, r3, #2
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4618      	mov	r0, r3
 8003604:	f7ff ff30 	bl	8003468 <LL_ADC_IsEnabled>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	f040 80a7 	bne.w	800375e <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	7e1b      	ldrb	r3, [r3, #24]
 8003618:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800361a:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	7e5b      	ldrb	r3, [r3, #25]
 8003620:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003622:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	7e9b      	ldrb	r3, [r3, #26]
 8003628:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800362a:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003630:	2a00      	cmp	r2, #0
 8003632:	d002      	beq.n	800363a <HAL_ADC_Init+0x11a>
 8003634:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003638:	e000      	b.n	800363c <HAL_ADC_Init+0x11c>
 800363a:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800363c:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003642:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	691b      	ldr	r3, [r3, #16]
 8003648:	2b00      	cmp	r3, #0
 800364a:	da04      	bge.n	8003656 <HAL_ADC_Init+0x136>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	691b      	ldr	r3, [r3, #16]
 8003650:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003654:	e001      	b.n	800365a <HAL_ADC_Init+0x13a>
 8003656:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                           |
 800365a:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003662:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003664:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003666:	69ba      	ldr	r2, [r7, #24]
 8003668:	4313      	orrs	r3, r2
 800366a:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003672:	2b01      	cmp	r3, #1
 8003674:	d114      	bne.n	80036a0 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	7e9b      	ldrb	r3, [r3, #26]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d104      	bne.n	8003688 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800367e:	69bb      	ldr	r3, [r7, #24]
 8003680:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003684:	61bb      	str	r3, [r7, #24]
 8003686:	e00b      	b.n	80036a0 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800368c:	f043 0220 	orr.w	r2, r3, #32
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003698:	f043 0201 	orr.w	r2, r3, #1
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d009      	beq.n	80036bc <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ac:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80036b4:	4313      	orrs	r3, r2
 80036b6:	69ba      	ldr	r2, [r7, #24]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	f423 33fe 	bic.w	r3, r3, #130048	@ 0x1fc00
 80036c6:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	6812      	ldr	r2, [r2, #0]
 80036ce:	69b9      	ldr	r1, [r7, #24]
 80036d0:	430b      	orrs	r3, r1
 80036d2:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80036e0:	4313      	orrs	r3, r2
 80036e2:	697a      	ldr	r2, [r7, #20]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d111      	bne.n	8003716 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80036fe:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 8003704:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800370a:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	4313      	orrs	r3, r2
 8003710:	f043 0301 	orr.w	r3, r3, #1
 8003714:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	691a      	ldr	r2, [r3, #16]
 800371c:	4b33      	ldr	r3, [pc, #204]	@ (80037ec <HAL_ADC_Init+0x2cc>)
 800371e:	4013      	ands	r3, r2
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	6812      	ldr	r2, [r2, #0]
 8003724:	6979      	ldr	r1, [r7, #20]
 8003726:	430b      	orrs	r3, r1
 8003728:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003732:	d014      	beq.n	800375e <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003738:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800373c:	d00f      	beq.n	800375e <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003742:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003746:	d00a      	beq.n	800375e <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8003748:	4b29      	ldr	r3, [pc, #164]	@ (80037f0 <HAL_ADC_Init+0x2d0>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8003758:	4925      	ldr	r1, [pc, #148]	@ (80037f0 <HAL_ADC_Init+0x2d0>)
 800375a:	4313      	orrs	r3, r2
 800375c:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6818      	ldr	r0, [r3, #0]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003766:	461a      	mov	r2, r3
 8003768:	2100      	movs	r1, #0
 800376a:	f7ff fd76 	bl	800325a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6818      	ldr	r0, [r3, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003776:	461a      	mov	r2, r3
 8003778:	491e      	ldr	r1, [pc, #120]	@ (80037f4 <HAL_ADC_Init+0x2d4>)
 800377a:	f7ff fd6e 	bl	800325a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d108      	bne.n	8003798 <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f062 020f 	orn	r2, r2, #15
 8003794:	629a      	str	r2, [r3, #40]	@ 0x28
 8003796:	e042      	b.n	800381e <HAL_ADC_Init+0x2fe>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	691b      	ldr	r3, [r3, #16]
 800379c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80037a0:	d13d      	bne.n	800381e <HAL_ADC_Init+0x2fe>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 80037a2:	2300      	movs	r3, #0
 80037a4:	613b      	str	r3, [r7, #16]
 80037a6:	e00c      	b.n	80037c2 <HAL_ADC_Init+0x2a2>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	fa22 f303 	lsr.w	r3, r2, r3
 80037b4:	f003 030f 	and.w	r3, r3, #15
 80037b8:	2b0f      	cmp	r3, #15
 80037ba:	d006      	beq.n	80037ca <HAL_ADC_Init+0x2aa>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	3301      	adds	r3, #1
 80037c0:	613b      	str	r3, [r7, #16]
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	2b07      	cmp	r3, #7
 80037c6:	d9ef      	bls.n	80037a8 <HAL_ADC_Init+0x288>
 80037c8:	e000      	b.n	80037cc <HAL_ADC_Init+0x2ac>
            ADC_CHSELR_SQ1)
        {
          break;
 80037ca:	bf00      	nop
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d112      	bne.n	80037f8 <HAL_ADC_Init+0x2d8>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f062 020f 	orn	r2, r2, #15
 80037e0:	629a      	str	r2, [r3, #40]	@ 0x28
 80037e2:	e01c      	b.n	800381e <HAL_ADC_Init+0x2fe>
 80037e4:	20000000 	.word	0x20000000
 80037e8:	053e2d63 	.word	0x053e2d63
 80037ec:	1ffffc02 	.word	0x1ffffc02
 80037f0:	40012708 	.word	0x40012708
 80037f4:	03ffff04 	.word	0x03ffff04
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	69db      	ldr	r3, [r3, #28]
 8003802:	3b01      	subs	r3, #1
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	f003 031c 	and.w	r3, r3, #28
 800380a:	f06f 020f 	mvn.w	r2, #15
 800380e:	fa02 f103 	lsl.w	r1, r2, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	430a      	orrs	r2, r1
 800381c:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	2100      	movs	r1, #0
 8003824:	4618      	mov	r0, r3
 8003826:	f7ff fd36 	bl	8003296 <LL_ADC_GetSamplingTimeCommonChannels>
 800382a:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003830:	429a      	cmp	r2, r3
 8003832:	d10b      	bne.n	800384c <HAL_ADC_Init+0x32c>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800383e:	f023 0303 	bic.w	r3, r3, #3
 8003842:	f043 0201 	orr.w	r2, r3, #1
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	659a      	str	r2, [r3, #88]	@ 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800384a:	e018      	b.n	800387e <HAL_ADC_Init+0x35e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003850:	f023 0312 	bic.w	r3, r3, #18
 8003854:	f043 0210 	orr.w	r2, r3, #16
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003860:	f043 0201 	orr.w	r2, r3, #1
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800386c:	e007      	b.n	800387e <HAL_ADC_Init+0x35e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003872:	f043 0210 	orr.w	r2, r3, #16
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 800387e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003880:	4618      	mov	r0, r3
 8003882:	3720      	adds	r7, #32
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d101      	bne.n	800389a <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e06a      	b.n	8003970 <HAL_ADC_DeInit+0xe8>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800389e:	f043 0202 	orr.w	r2, r3, #2
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 fabe 	bl	8003e28 <ADC_ConversionStop>
 80038ac:	4603      	mov	r3, r0
 80038ae:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80038b0:	7bfb      	ldrb	r3, [r7, #15]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d10f      	bne.n	80038d6 <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f000 fb82 	bl	8003fc0 <ADC_Disable>
 80038bc:	4603      	mov	r3, r0
 80038be:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80038c0:	7bfb      	ldrb	r3, [r7, #15]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d102      	bne.n	80038cc <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2201      	movs	r2, #1
 80038ca:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4618      	mov	r0, r3
 80038d2:	f7ff fd7f 	bl	80033d4 <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	6812      	ldr	r2, [r2, #0]
 80038e0:	f423 7367 	bic.w	r3, r3, #924	@ 0x39c
 80038e4:	f023 0303 	bic.w	r3, r3, #3
 80038e8:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f240 329f 	movw	r2, #927	@ 0x39f
 80038f2:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	68d9      	ldr	r1, [r3, #12]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	4b1e      	ldr	r3, [pc, #120]	@ (8003978 <HAL_ADC_DeInit+0xf0>)
 8003900:	400b      	ands	r3, r1
 8003902:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register CFGR2 */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	691a      	ldr	r2, [r3, #16]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f022 4240 	bic.w	r2, r2, #3221225472	@ 0xc0000000
 8003912:	611a      	str	r2, [r3, #16]

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	695a      	ldr	r2, [r3, #20]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f022 0207 	bic.w	r2, r2, #7
 8003922:	615a      	str	r2, [r3, #20]

  /* Reset register TR1 */
  hadc->Instance->TR1 &= ~(ADC_TR1_HT1 | ADC_TR1_LT1);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	6a1a      	ldr	r2, [r3, #32]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f002 22f0 	and.w	r2, r2, #4026593280	@ 0xf000f000
 8003932:	621a      	str	r2, [r3, #32]

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	2200      	movs	r2, #0
 8003940:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 8003942:	4b0e      	ldr	r3, [pc, #56]	@ (800397c <HAL_ADC_DeInit+0xf4>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a0d      	ldr	r2, [pc, #52]	@ (800397c <HAL_ADC_DeInit+0xf4>)
 8003948:	f023 73fe 	bic.w	r3, r3, #33292288	@ 0x1fc0000
 800394c:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f7fd fc58 	bl	8001204 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	659a      	str	r2, [r3, #88]	@ 0x58

  __HAL_UNLOCK(hadc);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 800396e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003970:	4618      	mov	r0, r3
 8003972:	3710      	adds	r7, #16
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	833e0200 	.word	0x833e0200
 800397c:	40012708 	.word	0x40012708

08003980 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4618      	mov	r0, r3
 800398e:	f7ff fdb5 	bl	80034fc <LL_ADC_REG_IsConversionOngoing>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d132      	bne.n	80039fe <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d101      	bne.n	80039a6 <HAL_ADC_Start+0x26>
 80039a2:	2302      	movs	r3, #2
 80039a4:	e02e      	b.n	8003a04 <HAL_ADC_Start+0x84>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2201      	movs	r2, #1
 80039aa:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f000 fa80 	bl	8003eb4 <ADC_Enable>
 80039b4:	4603      	mov	r3, r0
 80039b6:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80039b8:	7bfb      	ldrb	r3, [r7, #15]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d11a      	bne.n	80039f4 <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039c2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80039c6:	f023 0301 	bic.w	r3, r3, #1
 80039ca:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	221c      	movs	r2, #28
 80039de:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4618      	mov	r0, r3
 80039ee:	f7ff fd5f 	bl	80034b0 <LL_ADC_REG_StartConversion>
 80039f2:	e006      	b.n	8003a02 <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 80039fc:	e001      	b.n	8003a02 <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80039fe:	2302      	movs	r3, #2
 8003a00:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 8003a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3710      	adds	r7, #16
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}

08003a0c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d101      	bne.n	8003a22 <HAL_ADC_Stop+0x16>
 8003a1e:	2302      	movs	r3, #2
 8003a20:	e022      	b.n	8003a68 <HAL_ADC_Stop+0x5c>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2201      	movs	r2, #1
 8003a26:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 f9fc 	bl	8003e28 <ADC_ConversionStop>
 8003a30:	4603      	mov	r3, r0
 8003a32:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003a34:	7bfb      	ldrb	r3, [r7, #15]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d111      	bne.n	8003a5e <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f000 fac0 	bl	8003fc0 <ADC_Disable>
 8003a40:	4603      	mov	r3, r0
 8003a42:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003a44:	7bfb      	ldrb	r3, [r7, #15]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d109      	bne.n	8003a5e <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a4e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a52:	f023 0301 	bic.w	r3, r3, #1
 8003a56:	f043 0201 	orr.w	r2, r3, #1
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 8003a66:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3710      	adds	r7, #16
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	695b      	ldr	r3, [r3, #20]
 8003a7e:	2b08      	cmp	r3, #8
 8003a80:	d102      	bne.n	8003a88 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8003a82:	2308      	movs	r3, #8
 8003a84:	60fb      	str	r3, [r7, #12]
 8003a86:	e010      	b.n	8003aaa <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	f003 0301 	and.w	r3, r3, #1
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d007      	beq.n	8003aa6 <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a9a:	f043 0220 	orr.w	r2, r3, #32
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e077      	b.n	8003b96 <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8003aa6:	2304      	movs	r3, #4
 8003aa8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003aaa:	f7fe fb8b 	bl	80021c4 <HAL_GetTick>
 8003aae:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003ab0:	e021      	b.n	8003af6 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ab8:	d01d      	beq.n	8003af6 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003aba:	f7fe fb83 	bl	80021c4 <HAL_GetTick>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	683a      	ldr	r2, [r7, #0]
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d302      	bcc.n	8003ad0 <HAL_ADC_PollForConversion+0x60>
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d112      	bne.n	8003af6 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	4013      	ands	r3, r2
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d10b      	bne.n	8003af6 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ae2:	f043 0204 	orr.w	r2, r3, #4
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	659a      	str	r2, [r3, #88]	@ 0x58

          __HAL_UNLOCK(hadc);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e04f      	b.n	8003b96 <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	4013      	ands	r3, r2
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d0d6      	beq.n	8003ab2 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b08:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4618      	mov	r0, r3
 8003b16:	f7ff fbd6 	bl	80032c6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d031      	beq.n	8003b84 <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	7e9b      	ldrb	r3, [r3, #26]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d12d      	bne.n	8003b84 <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0308 	and.w	r3, r3, #8
 8003b32:	2b08      	cmp	r3, #8
 8003b34:	d126      	bne.n	8003b84 <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f7ff fcde 	bl	80034fc <LL_ADC_REG_IsConversionOngoing>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d112      	bne.n	8003b6c <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	685a      	ldr	r2, [r3, #4]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f022 020c 	bic.w	r2, r2, #12
 8003b54:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b5a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b5e:	f023 0301 	bic.w	r3, r3, #1
 8003b62:	f043 0201 	orr.w	r2, r3, #1
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	659a      	str	r2, [r3, #88]	@ 0x58
 8003b6a:	e00b      	b.n	8003b84 <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b70:	f043 0220 	orr.w	r2, r3, #32
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b7c:	f043 0201 	orr.w	r2, r3, #1
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	7e1b      	ldrb	r3, [r3, #24]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d103      	bne.n	8003b94 <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	220c      	movs	r2, #12
 8003b92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b94:	2300      	movs	r3, #0
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3710      	adds	r7, #16
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}

08003b9e <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003b9e:	b480      	push	{r7}
 8003ba0:	b083      	sub	sp, #12
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	370c      	adds	r7, #12
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bc80      	pop	{r7}
 8003bb4:	4770      	bx	lr
	...

08003bb8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b088      	sub	sp, #32
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d101      	bne.n	8003be0 <HAL_ADC_ConfigChannel+0x28>
 8003bdc:	2302      	movs	r3, #2
 8003bde:	e110      	b.n	8003e02 <HAL_ADC_ConfigChannel+0x24a>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4618      	mov	r0, r3
 8003bee:	f7ff fc85 	bl	80034fc <LL_ADC_REG_IsConversionOngoing>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	f040 80f7 	bne.w	8003de8 <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	f000 80b1 	beq.w	8003d66 <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	691b      	ldr	r3, [r3, #16]
 8003c08:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003c0c:	d004      	beq.n	8003c18 <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003c12:	4a7e      	ldr	r2, [pc, #504]	@ (8003e0c <HAL_ADC_ConfigChannel+0x254>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d108      	bne.n	8003c2a <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4619      	mov	r1, r3
 8003c22:	4610      	mov	r0, r2
 8003c24:	f7ff fb82 	bl	800332c <LL_ADC_REG_SetSequencerChAdd>
 8003c28:	e041      	b.n	8003cae <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	f003 031f 	and.w	r3, r3, #31
 8003c36:	210f      	movs	r1, #15
 8003c38:	fa01 f303 	lsl.w	r3, r1, r3
 8003c3c:	43db      	mvns	r3, r3
 8003c3e:	401a      	ands	r2, r3
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d105      	bne.n	8003c58 <HAL_ADC_ConfigChannel+0xa0>
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	0e9b      	lsrs	r3, r3, #26
 8003c52:	f003 031f 	and.w	r3, r3, #31
 8003c56:	e011      	b.n	8003c7c <HAL_ADC_ConfigChannel+0xc4>
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	fa93 f3a3 	rbit	r3, r3
 8003c64:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d101      	bne.n	8003c74 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 8003c70:	2320      	movs	r3, #32
 8003c72:	e003      	b.n	8003c7c <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	fab3 f383 	clz	r3, r3
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	6839      	ldr	r1, [r7, #0]
 8003c7e:	6849      	ldr	r1, [r1, #4]
 8003c80:	f001 011f 	and.w	r1, r1, #31
 8003c84:	408b      	lsls	r3, r1
 8003c86:	431a      	orrs	r2, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	089b      	lsrs	r3, r3, #2
 8003c92:	1c5a      	adds	r2, r3, #1
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	69db      	ldr	r3, [r3, #28]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d808      	bhi.n	8003cae <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6818      	ldr	r0, [r3, #0]
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	6859      	ldr	r1, [r3, #4]
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	461a      	mov	r2, r3
 8003caa:	f7ff fb1e 	bl	80032ea <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6818      	ldr	r0, [r3, #0]
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	6819      	ldr	r1, [r3, #0]
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	461a      	mov	r2, r3
 8003cbc:	f7ff fb5b 	bl	8003376 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	f280 8097 	bge.w	8003df8 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003cca:	4851      	ldr	r0, [pc, #324]	@ (8003e10 <HAL_ADC_ConfigChannel+0x258>)
 8003ccc:	f7ff fab8 	bl	8003240 <LL_ADC_GetCommonPathInternalCh>
 8003cd0:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a4f      	ldr	r2, [pc, #316]	@ (8003e14 <HAL_ADC_ConfigChannel+0x25c>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d120      	bne.n	8003d1e <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d11b      	bne.n	8003d1e <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003cec:	4619      	mov	r1, r3
 8003cee:	4848      	ldr	r0, [pc, #288]	@ (8003e10 <HAL_ADC_ConfigChannel+0x258>)
 8003cf0:	f7ff fa94 	bl	800321c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003cf4:	4b48      	ldr	r3, [pc, #288]	@ (8003e18 <HAL_ADC_ConfigChannel+0x260>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	099b      	lsrs	r3, r3, #6
 8003cfa:	4a48      	ldr	r2, [pc, #288]	@ (8003e1c <HAL_ADC_ConfigChannel+0x264>)
 8003cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8003d00:	099b      	lsrs	r3, r3, #6
 8003d02:	1c5a      	adds	r2, r3, #1
 8003d04:	4613      	mov	r3, r2
 8003d06:	005b      	lsls	r3, r3, #1
 8003d08:	4413      	add	r3, r2
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003d0e:	e002      	b.n	8003d16 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	3b01      	subs	r3, #1
 8003d14:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d1f9      	bne.n	8003d10 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003d1c:	e06c      	b.n	8003df8 <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a3f      	ldr	r2, [pc, #252]	@ (8003e20 <HAL_ADC_ConfigChannel+0x268>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d10c      	bne.n	8003d42 <HAL_ADC_ConfigChannel+0x18a>
 8003d28:	69bb      	ldr	r3, [r7, #24]
 8003d2a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d107      	bne.n	8003d42 <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003d38:	4619      	mov	r1, r3
 8003d3a:	4835      	ldr	r0, [pc, #212]	@ (8003e10 <HAL_ADC_ConfigChannel+0x258>)
 8003d3c:	f7ff fa6e 	bl	800321c <LL_ADC_SetCommonPathInternalCh>
 8003d40:	e05a      	b.n	8003df8 <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a37      	ldr	r2, [pc, #220]	@ (8003e24 <HAL_ADC_ConfigChannel+0x26c>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d155      	bne.n	8003df8 <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d150      	bne.n	8003df8 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003d56:	69bb      	ldr	r3, [r7, #24]
 8003d58:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003d5c:	4619      	mov	r1, r3
 8003d5e:	482c      	ldr	r0, [pc, #176]	@ (8003e10 <HAL_ADC_ConfigChannel+0x258>)
 8003d60:	f7ff fa5c 	bl	800321c <LL_ADC_SetCommonPathInternalCh>
 8003d64:	e048      	b.n	8003df8 <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003d6e:	d004      	beq.n	8003d7a <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003d74:	4a25      	ldr	r2, [pc, #148]	@ (8003e0c <HAL_ADC_ConfigChannel+0x254>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d107      	bne.n	8003d8a <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4619      	mov	r1, r3
 8003d84:	4610      	mov	r0, r2
 8003d86:	f7ff fae3 	bl	8003350 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	da32      	bge.n	8003df8 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003d92:	481f      	ldr	r0, [pc, #124]	@ (8003e10 <HAL_ADC_ConfigChannel+0x258>)
 8003d94:	f7ff fa54 	bl	8003240 <LL_ADC_GetCommonPathInternalCh>
 8003d98:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a1d      	ldr	r2, [pc, #116]	@ (8003e14 <HAL_ADC_ConfigChannel+0x25c>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d107      	bne.n	8003db4 <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003daa:	4619      	mov	r1, r3
 8003dac:	4818      	ldr	r0, [pc, #96]	@ (8003e10 <HAL_ADC_ConfigChannel+0x258>)
 8003dae:	f7ff fa35 	bl	800321c <LL_ADC_SetCommonPathInternalCh>
 8003db2:	e021      	b.n	8003df8 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a19      	ldr	r2, [pc, #100]	@ (8003e20 <HAL_ADC_ConfigChannel+0x268>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d107      	bne.n	8003dce <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	4812      	ldr	r0, [pc, #72]	@ (8003e10 <HAL_ADC_ConfigChannel+0x258>)
 8003dc8:	f7ff fa28 	bl	800321c <LL_ADC_SetCommonPathInternalCh>
 8003dcc:	e014      	b.n	8003df8 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a14      	ldr	r2, [pc, #80]	@ (8003e24 <HAL_ADC_ConfigChannel+0x26c>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d10f      	bne.n	8003df8 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8003dde:	4619      	mov	r1, r3
 8003de0:	480b      	ldr	r0, [pc, #44]	@ (8003e10 <HAL_ADC_ConfigChannel+0x258>)
 8003de2:	f7ff fa1b 	bl	800321c <LL_ADC_SetCommonPathInternalCh>
 8003de6:	e007      	b.n	8003df8 <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dec:	f043 0220 	orr.w	r2, r3, #32
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 8003e00:	7ffb      	ldrb	r3, [r7, #31]
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3720      	adds	r7, #32
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	80000004 	.word	0x80000004
 8003e10:	40012708 	.word	0x40012708
 8003e14:	b0001000 	.word	0xb0001000
 8003e18:	20000000 	.word	0x20000000
 8003e1c:	053e2d63 	.word	0x053e2d63
 8003e20:	b8004000 	.word	0xb8004000
 8003e24:	b4002000 	.word	0xb4002000

08003e28 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4618      	mov	r0, r3
 8003e36:	f7ff fb61 	bl	80034fc <LL_ADC_REG_IsConversionOngoing>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d033      	beq.n	8003ea8 <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4618      	mov	r0, r3
 8003e46:	f7ff fb21 	bl	800348c <LL_ADC_IsDisableOngoing>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d104      	bne.n	8003e5a <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4618      	mov	r0, r3
 8003e56:	f7ff fb3e 	bl	80034d6 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003e5a:	f7fe f9b3 	bl	80021c4 <HAL_GetTick>
 8003e5e:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003e60:	e01b      	b.n	8003e9a <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003e62:	f7fe f9af 	bl	80021c4 <HAL_GetTick>
 8003e66:	4602      	mov	r2, r0
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	d914      	bls.n	8003e9a <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	f003 0304 	and.w	r3, r3, #4
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00d      	beq.n	8003e9a <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e82:	f043 0210 	orr.w	r2, r3, #16
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e8e:	f043 0201 	orr.w	r2, r3, #1
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e007      	b.n	8003eaa <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	f003 0304 	and.w	r3, r3, #4
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d1dc      	bne.n	8003e62 <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3710      	adds	r7, #16
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
	...

08003eb4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f7ff facf 	bl	8003468 <LL_ADC_IsEnabled>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d169      	bne.n	8003fa4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	689a      	ldr	r2, [r3, #8]
 8003ed6:	4b36      	ldr	r3, [pc, #216]	@ (8003fb0 <ADC_Enable+0xfc>)
 8003ed8:	4013      	ands	r3, r2
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d00d      	beq.n	8003efa <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ee2:	f043 0210 	orr.w	r2, r3, #16
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eee:	f043 0201 	orr.w	r2, r3, #1
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e055      	b.n	8003fa6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4618      	mov	r0, r3
 8003f00:	f7ff fa8c 	bl	800341c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003f04:	482b      	ldr	r0, [pc, #172]	@ (8003fb4 <ADC_Enable+0x100>)
 8003f06:	f7ff f99b 	bl	8003240 <LL_ADC_GetCommonPathInternalCh>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d00f      	beq.n	8003f34 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003f14:	4b28      	ldr	r3, [pc, #160]	@ (8003fb8 <ADC_Enable+0x104>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	099b      	lsrs	r3, r3, #6
 8003f1a:	4a28      	ldr	r2, [pc, #160]	@ (8003fbc <ADC_Enable+0x108>)
 8003f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f20:	099b      	lsrs	r3, r3, #6
 8003f22:	3301      	adds	r3, #1
 8003f24:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003f26:	e002      	b.n	8003f2e <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	3b01      	subs	r3, #1
 8003f2c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d1f9      	bne.n	8003f28 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	7e5b      	ldrb	r3, [r3, #25]
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d033      	beq.n	8003fa4 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003f3c:	f7fe f942 	bl	80021c4 <HAL_GetTick>
 8003f40:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003f42:	e028      	b.n	8003f96 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f7ff fa8d 	bl	8003468 <LL_ADC_IsEnabled>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d104      	bne.n	8003f5e <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f7ff fa5f 	bl	800341c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003f5e:	f7fe f931 	bl	80021c4 <HAL_GetTick>
 8003f62:	4602      	mov	r2, r0
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d914      	bls.n	8003f96 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0301 	and.w	r3, r3, #1
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d00d      	beq.n	8003f96 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f7e:	f043 0210 	orr.w	r2, r3, #16
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f8a:	f043 0201 	orr.w	r2, r3, #1
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e007      	b.n	8003fa6 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0301 	and.w	r3, r3, #1
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d1cf      	bne.n	8003f44 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003fa4:	2300      	movs	r3, #0
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3710      	adds	r7, #16
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	80000017 	.word	0x80000017
 8003fb4:	40012708 	.word	0x40012708
 8003fb8:	20000000 	.word	0x20000000
 8003fbc:	053e2d63 	.word	0x053e2d63

08003fc0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f7ff fa5d 	bl	800348c <LL_ADC_IsDisableOngoing>
 8003fd2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f7ff fa45 	bl	8003468 <LL_ADC_IsEnabled>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d047      	beq.n	8004074 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d144      	bne.n	8004074 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	f003 0305 	and.w	r3, r3, #5
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d10c      	bne.n	8004012 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f7ff fa20 	bl	8003442 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2203      	movs	r2, #3
 8004008:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800400a:	f7fe f8db 	bl	80021c4 <HAL_GetTick>
 800400e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004010:	e029      	b.n	8004066 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004016:	f043 0210 	orr.w	r2, r3, #16
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004022:	f043 0201 	orr.w	r2, r3, #1
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e023      	b.n	8004076 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800402e:	f7fe f8c9 	bl	80021c4 <HAL_GetTick>
 8004032:	4602      	mov	r2, r0
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	2b02      	cmp	r3, #2
 800403a:	d914      	bls.n	8004066 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	f003 0301 	and.w	r3, r3, #1
 8004046:	2b00      	cmp	r3, #0
 8004048:	d00d      	beq.n	8004066 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800404e:	f043 0210 	orr.w	r2, r3, #16
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800405a:	f043 0201 	orr.w	r2, r3, #1
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e007      	b.n	8004076 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	f003 0301 	and.w	r3, r3, #1
 8004070:	2b00      	cmp	r3, #0
 8004072:	d1dc      	bne.n	800402e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004074:	2300      	movs	r3, #0
}
 8004076:	4618      	mov	r0, r3
 8004078:	3710      	adds	r7, #16
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}

0800407e <LL_ADC_SetCalibrationFactor>:
{
 800407e:	b480      	push	{r7}
 8004080:	b083      	sub	sp, #12
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
 8004086:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800408e:	f023 027f 	bic.w	r2, r3, #127	@ 0x7f
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	431a      	orrs	r2, r3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
}
 800409c:	bf00      	nop
 800409e:	370c      	adds	r7, #12
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bc80      	pop	{r7}
 80040a4:	4770      	bx	lr

080040a6 <LL_ADC_GetCalibrationFactor>:
{
 80040a6:	b480      	push	{r7}
 80040a8:	b083      	sub	sp, #12
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80040b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	370c      	adds	r7, #12
 80040bc:	46bd      	mov	sp, r7
 80040be:	bc80      	pop	{r7}
 80040c0:	4770      	bx	lr

080040c2 <LL_ADC_Enable>:
{
 80040c2:	b480      	push	{r7}
 80040c4:	b083      	sub	sp, #12
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80040d2:	f023 0317 	bic.w	r3, r3, #23
 80040d6:	f043 0201 	orr.w	r2, r3, #1
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	609a      	str	r2, [r3, #8]
}
 80040de:	bf00      	nop
 80040e0:	370c      	adds	r7, #12
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bc80      	pop	{r7}
 80040e6:	4770      	bx	lr

080040e8 <LL_ADC_Disable>:
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80040f8:	f023 0317 	bic.w	r3, r3, #23
 80040fc:	f043 0202 	orr.w	r2, r3, #2
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	609a      	str	r2, [r3, #8]
}
 8004104:	bf00      	nop
 8004106:	370c      	adds	r7, #12
 8004108:	46bd      	mov	sp, r7
 800410a:	bc80      	pop	{r7}
 800410c:	4770      	bx	lr

0800410e <LL_ADC_IsEnabled>:
{
 800410e:	b480      	push	{r7}
 8004110:	b083      	sub	sp, #12
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	f003 0301 	and.w	r3, r3, #1
 800411e:	2b01      	cmp	r3, #1
 8004120:	d101      	bne.n	8004126 <LL_ADC_IsEnabled+0x18>
 8004122:	2301      	movs	r3, #1
 8004124:	e000      	b.n	8004128 <LL_ADC_IsEnabled+0x1a>
 8004126:	2300      	movs	r3, #0
}
 8004128:	4618      	mov	r0, r3
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	bc80      	pop	{r7}
 8004130:	4770      	bx	lr

08004132 <LL_ADC_StartCalibration>:
{
 8004132:	b480      	push	{r7}
 8004134:	b083      	sub	sp, #12
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004142:	f023 0317 	bic.w	r3, r3, #23
 8004146:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	609a      	str	r2, [r3, #8]
}
 800414e:	bf00      	nop
 8004150:	370c      	adds	r7, #12
 8004152:	46bd      	mov	sp, r7
 8004154:	bc80      	pop	{r7}
 8004156:	4770      	bx	lr

08004158 <LL_ADC_IsCalibrationOnGoing>:
{
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004168:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800416c:	d101      	bne.n	8004172 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800416e:	2301      	movs	r3, #1
 8004170:	e000      	b.n	8004174 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004172:	2300      	movs	r3, #0
}
 8004174:	4618      	mov	r0, r3
 8004176:	370c      	adds	r7, #12
 8004178:	46bd      	mov	sp, r7
 800417a:	bc80      	pop	{r7}
 800417c:	4770      	bx	lr

0800417e <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 800417e:	b580      	push	{r7, lr}
 8004180:	b088      	sub	sp, #32
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004186:	2300      	movs	r3, #0
 8004188:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 800418a:	2300      	movs	r3, #0
 800418c:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004194:	2b01      	cmp	r3, #1
 8004196:	d101      	bne.n	800419c <HAL_ADCEx_Calibration_Start+0x1e>
 8004198:	2302      	movs	r3, #2
 800419a:	e0b9      	b.n	8004310 <HAL_ADCEx_Calibration_Start+0x192>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f7ff ff0b 	bl	8003fc0 <ADC_Disable>
 80041aa:	4603      	mov	r3, r0
 80041ac:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4618      	mov	r0, r3
 80041b4:	f7ff ffab 	bl	800410e <LL_ADC_IsEnabled>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	f040 809d 	bne.w	80042fa <HAL_ADCEx_Calibration_Start+0x17c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041c4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80041c8:	f043 0202 	orr.w	r2, r3, #2
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	68da      	ldr	r2, [r3, #12]
 80041d6:	f248 0303 	movw	r3, #32771	@ 0x8003
 80041da:	4013      	ands	r3, r2
 80041dc:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	6812      	ldr	r2, [r2, #0]
 80041e8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80041ec:	f023 0303 	bic.w	r3, r3, #3
 80041f0:	60d3      	str	r3, [r2, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80041f2:	2300      	movs	r3, #0
 80041f4:	61fb      	str	r3, [r7, #28]
 80041f6:	e02e      	b.n	8004256 <HAL_ADCEx_Calibration_Start+0xd8>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4618      	mov	r0, r3
 80041fe:	f7ff ff98 	bl	8004132 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004202:	e014      	b.n	800422e <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	3301      	adds	r3, #1
 8004208:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	f5b3 3f2e 	cmp.w	r3, #178176	@ 0x2b800
 8004210:	d30d      	bcc.n	800422e <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004216:	f023 0312 	bic.w	r3, r3, #18
 800421a:	f043 0210 	orr.w	r2, r3, #16
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e070      	b.n	8004310 <HAL_ADCEx_Calibration_Start+0x192>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4618      	mov	r0, r3
 8004234:	f7ff ff90 	bl	8004158 <LL_ADC_IsCalibrationOnGoing>
 8004238:	4603      	mov	r3, r0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d1e2      	bne.n	8004204 <HAL_ADCEx_Calibration_Start+0x86>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4618      	mov	r0, r3
 8004244:	f7ff ff2f 	bl	80040a6 <LL_ADC_GetCalibrationFactor>
 8004248:	4602      	mov	r2, r0
 800424a:	69bb      	ldr	r3, [r7, #24]
 800424c:	4413      	add	r3, r2
 800424e:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	3301      	adds	r3, #1
 8004254:	61fb      	str	r3, [r7, #28]
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	2b07      	cmp	r3, #7
 800425a:	d9cd      	bls.n	80041f8 <HAL_ADCEx_Calibration_Start+0x7a>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 800425c:	69ba      	ldr	r2, [r7, #24]
 800425e:	69fb      	ldr	r3, [r7, #28]
 8004260:	fbb2 f3f3 	udiv	r3, r2, r3
 8004264:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4618      	mov	r0, r3
 800426c:	f7ff ff29 	bl	80040c2 <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	69b9      	ldr	r1, [r7, #24]
 8004276:	4618      	mov	r0, r3
 8004278:	f7ff ff01 	bl	800407e <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4618      	mov	r0, r3
 8004282:	f7ff ff31 	bl	80040e8 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004286:	f7fd ff9d 	bl	80021c4 <HAL_GetTick>
 800428a:	60f8      	str	r0, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800428c:	e01c      	b.n	80042c8 <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800428e:	f7fd ff99 	bl	80021c4 <HAL_GetTick>
 8004292:	4602      	mov	r2, r0
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	2b02      	cmp	r3, #2
 800429a:	d915      	bls.n	80042c8 <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4618      	mov	r0, r3
 80042a2:	f7ff ff34 	bl	800410e <LL_ADC_IsEnabled>
 80042a6:	4603      	mov	r3, r0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d00d      	beq.n	80042c8 <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042b0:	f043 0210 	orr.w	r2, r3, #16
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042bc:	f043 0201 	orr.w	r2, r3, #1
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e023      	b.n	8004310 <HAL_ADCEx_Calibration_Start+0x192>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4618      	mov	r0, r3
 80042ce:	f7ff ff1e 	bl	800410e <LL_ADC_IsEnabled>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d1da      	bne.n	800428e <HAL_ADCEx_Calibration_Start+0x110>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	68d9      	ldr	r1, [r3, #12]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	693a      	ldr	r2, [r7, #16]
 80042e4:	430a      	orrs	r2, r1
 80042e6:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042ec:	f023 0303 	bic.w	r3, r3, #3
 80042f0:	f043 0201 	orr.w	r2, r3, #1
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	659a      	str	r2, [r3, #88]	@ 0x58
 80042f8:	e005      	b.n	8004306 <HAL_ADCEx_Calibration_Start+0x188>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042fe:	f043 0210 	orr.w	r2, r3, #16
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 800430e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004310:	4618      	mov	r0, r3
 8004312:	3720      	adds	r7, #32
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}

08004318 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004318:	b480      	push	{r7}
 800431a:	b085      	sub	sp, #20
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f003 0307 	and.w	r3, r3, #7
 8004326:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004328:	4b0c      	ldr	r3, [pc, #48]	@ (800435c <__NVIC_SetPriorityGrouping+0x44>)
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800432e:	68ba      	ldr	r2, [r7, #8]
 8004330:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004334:	4013      	ands	r3, r2
 8004336:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004340:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004344:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004348:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800434a:	4a04      	ldr	r2, [pc, #16]	@ (800435c <__NVIC_SetPriorityGrouping+0x44>)
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	60d3      	str	r3, [r2, #12]
}
 8004350:	bf00      	nop
 8004352:	3714      	adds	r7, #20
 8004354:	46bd      	mov	sp, r7
 8004356:	bc80      	pop	{r7}
 8004358:	4770      	bx	lr
 800435a:	bf00      	nop
 800435c:	e000ed00 	.word	0xe000ed00

08004360 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004360:	b480      	push	{r7}
 8004362:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004364:	4b04      	ldr	r3, [pc, #16]	@ (8004378 <__NVIC_GetPriorityGrouping+0x18>)
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	0a1b      	lsrs	r3, r3, #8
 800436a:	f003 0307 	and.w	r3, r3, #7
}
 800436e:	4618      	mov	r0, r3
 8004370:	46bd      	mov	sp, r7
 8004372:	bc80      	pop	{r7}
 8004374:	4770      	bx	lr
 8004376:	bf00      	nop
 8004378:	e000ed00 	.word	0xe000ed00

0800437c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800437c:	b480      	push	{r7}
 800437e:	b083      	sub	sp, #12
 8004380:	af00      	add	r7, sp, #0
 8004382:	4603      	mov	r3, r0
 8004384:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800438a:	2b00      	cmp	r3, #0
 800438c:	db0b      	blt.n	80043a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800438e:	79fb      	ldrb	r3, [r7, #7]
 8004390:	f003 021f 	and.w	r2, r3, #31
 8004394:	4906      	ldr	r1, [pc, #24]	@ (80043b0 <__NVIC_EnableIRQ+0x34>)
 8004396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800439a:	095b      	lsrs	r3, r3, #5
 800439c:	2001      	movs	r0, #1
 800439e:	fa00 f202 	lsl.w	r2, r0, r2
 80043a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80043a6:	bf00      	nop
 80043a8:	370c      	adds	r7, #12
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bc80      	pop	{r7}
 80043ae:	4770      	bx	lr
 80043b0:	e000e100 	.word	0xe000e100

080043b4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	4603      	mov	r3, r0
 80043bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	db12      	blt.n	80043ec <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043c6:	79fb      	ldrb	r3, [r7, #7]
 80043c8:	f003 021f 	and.w	r2, r3, #31
 80043cc:	490a      	ldr	r1, [pc, #40]	@ (80043f8 <__NVIC_DisableIRQ+0x44>)
 80043ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043d2:	095b      	lsrs	r3, r3, #5
 80043d4:	2001      	movs	r0, #1
 80043d6:	fa00 f202 	lsl.w	r2, r0, r2
 80043da:	3320      	adds	r3, #32
 80043dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80043e0:	f3bf 8f4f 	dsb	sy
}
 80043e4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80043e6:	f3bf 8f6f 	isb	sy
}
 80043ea:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80043ec:	bf00      	nop
 80043ee:	370c      	adds	r7, #12
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bc80      	pop	{r7}
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	e000e100 	.word	0xe000e100

080043fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
 8004402:	4603      	mov	r3, r0
 8004404:	6039      	str	r1, [r7, #0]
 8004406:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004408:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800440c:	2b00      	cmp	r3, #0
 800440e:	db0a      	blt.n	8004426 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	b2da      	uxtb	r2, r3
 8004414:	490c      	ldr	r1, [pc, #48]	@ (8004448 <__NVIC_SetPriority+0x4c>)
 8004416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800441a:	0112      	lsls	r2, r2, #4
 800441c:	b2d2      	uxtb	r2, r2
 800441e:	440b      	add	r3, r1
 8004420:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004424:	e00a      	b.n	800443c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	b2da      	uxtb	r2, r3
 800442a:	4908      	ldr	r1, [pc, #32]	@ (800444c <__NVIC_SetPriority+0x50>)
 800442c:	79fb      	ldrb	r3, [r7, #7]
 800442e:	f003 030f 	and.w	r3, r3, #15
 8004432:	3b04      	subs	r3, #4
 8004434:	0112      	lsls	r2, r2, #4
 8004436:	b2d2      	uxtb	r2, r2
 8004438:	440b      	add	r3, r1
 800443a:	761a      	strb	r2, [r3, #24]
}
 800443c:	bf00      	nop
 800443e:	370c      	adds	r7, #12
 8004440:	46bd      	mov	sp, r7
 8004442:	bc80      	pop	{r7}
 8004444:	4770      	bx	lr
 8004446:	bf00      	nop
 8004448:	e000e100 	.word	0xe000e100
 800444c:	e000ed00 	.word	0xe000ed00

08004450 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004450:	b480      	push	{r7}
 8004452:	b089      	sub	sp, #36	@ 0x24
 8004454:	af00      	add	r7, sp, #0
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	60b9      	str	r1, [r7, #8]
 800445a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f003 0307 	and.w	r3, r3, #7
 8004462:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	f1c3 0307 	rsb	r3, r3, #7
 800446a:	2b04      	cmp	r3, #4
 800446c:	bf28      	it	cs
 800446e:	2304      	movcs	r3, #4
 8004470:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	3304      	adds	r3, #4
 8004476:	2b06      	cmp	r3, #6
 8004478:	d902      	bls.n	8004480 <NVIC_EncodePriority+0x30>
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	3b03      	subs	r3, #3
 800447e:	e000      	b.n	8004482 <NVIC_EncodePriority+0x32>
 8004480:	2300      	movs	r3, #0
 8004482:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004484:	f04f 32ff 	mov.w	r2, #4294967295
 8004488:	69bb      	ldr	r3, [r7, #24]
 800448a:	fa02 f303 	lsl.w	r3, r2, r3
 800448e:	43da      	mvns	r2, r3
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	401a      	ands	r2, r3
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004498:	f04f 31ff 	mov.w	r1, #4294967295
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	fa01 f303 	lsl.w	r3, r1, r3
 80044a2:	43d9      	mvns	r1, r3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044a8:	4313      	orrs	r3, r2
         );
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3724      	adds	r7, #36	@ 0x24
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bc80      	pop	{r7}
 80044b2:	4770      	bx	lr

080044b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b082      	sub	sp, #8
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f7ff ff2b 	bl	8004318 <__NVIC_SetPriorityGrouping>
}
 80044c2:	bf00      	nop
 80044c4:	3708      	adds	r7, #8
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}

080044ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044ca:	b580      	push	{r7, lr}
 80044cc:	b086      	sub	sp, #24
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	4603      	mov	r3, r0
 80044d2:	60b9      	str	r1, [r7, #8]
 80044d4:	607a      	str	r2, [r7, #4]
 80044d6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80044d8:	f7ff ff42 	bl	8004360 <__NVIC_GetPriorityGrouping>
 80044dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	68b9      	ldr	r1, [r7, #8]
 80044e2:	6978      	ldr	r0, [r7, #20]
 80044e4:	f7ff ffb4 	bl	8004450 <NVIC_EncodePriority>
 80044e8:	4602      	mov	r2, r0
 80044ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044ee:	4611      	mov	r1, r2
 80044f0:	4618      	mov	r0, r3
 80044f2:	f7ff ff83 	bl	80043fc <__NVIC_SetPriority>
}
 80044f6:	bf00      	nop
 80044f8:	3718      	adds	r7, #24
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}

080044fe <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044fe:	b580      	push	{r7, lr}
 8004500:	b082      	sub	sp, #8
 8004502:	af00      	add	r7, sp, #0
 8004504:	4603      	mov	r3, r0
 8004506:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004508:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800450c:	4618      	mov	r0, r3
 800450e:	f7ff ff35 	bl	800437c <__NVIC_EnableIRQ>
}
 8004512:	bf00      	nop
 8004514:	3708      	adds	r7, #8
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}

0800451a <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800451a:	b580      	push	{r7, lr}
 800451c:	b082      	sub	sp, #8
 800451e:	af00      	add	r7, sp, #0
 8004520:	4603      	mov	r3, r0
 8004522:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004528:	4618      	mov	r0, r3
 800452a:	f7ff ff43 	bl	80043b4 <__NVIC_DisableIRQ>
}
 800452e:	bf00      	nop
 8004530:	3708      	adds	r7, #8
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
	...

08004538 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b082      	sub	sp, #8
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d101      	bne.n	800454a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e08e      	b.n	8004668 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	461a      	mov	r2, r3
 8004550:	4b47      	ldr	r3, [pc, #284]	@ (8004670 <HAL_DMA_Init+0x138>)
 8004552:	429a      	cmp	r2, r3
 8004554:	d80f      	bhi.n	8004576 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	461a      	mov	r2, r3
 800455c:	4b45      	ldr	r3, [pc, #276]	@ (8004674 <HAL_DMA_Init+0x13c>)
 800455e:	4413      	add	r3, r2
 8004560:	4a45      	ldr	r2, [pc, #276]	@ (8004678 <HAL_DMA_Init+0x140>)
 8004562:	fba2 2303 	umull	r2, r3, r2, r3
 8004566:	091b      	lsrs	r3, r3, #4
 8004568:	009a      	lsls	r2, r3, #2
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4a42      	ldr	r2, [pc, #264]	@ (800467c <HAL_DMA_Init+0x144>)
 8004572:	641a      	str	r2, [r3, #64]	@ 0x40
 8004574:	e00e      	b.n	8004594 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	461a      	mov	r2, r3
 800457c:	4b40      	ldr	r3, [pc, #256]	@ (8004680 <HAL_DMA_Init+0x148>)
 800457e:	4413      	add	r3, r2
 8004580:	4a3d      	ldr	r2, [pc, #244]	@ (8004678 <HAL_DMA_Init+0x140>)
 8004582:	fba2 2303 	umull	r2, r3, r2, r3
 8004586:	091b      	lsrs	r3, r3, #4
 8004588:	009a      	lsls	r2, r3, #2
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a3c      	ldr	r2, [pc, #240]	@ (8004684 <HAL_DMA_Init+0x14c>)
 8004592:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2202      	movs	r2, #2
 8004598:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	6812      	ldr	r2, [r2, #0]
 80045a6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80045aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045ae:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	6819      	ldr	r1, [r3, #0]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	689a      	ldr	r2, [r3, #8]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	431a      	orrs	r2, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	691b      	ldr	r3, [r3, #16]
 80045c4:	431a      	orrs	r2, r3
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	695b      	ldr	r3, [r3, #20]
 80045ca:	431a      	orrs	r2, r3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	699b      	ldr	r3, [r3, #24]
 80045d0:	431a      	orrs	r2, r3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	69db      	ldr	r3, [r3, #28]
 80045d6:	431a      	orrs	r2, r3
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6a1b      	ldr	r3, [r3, #32]
 80045dc:	431a      	orrs	r2, r3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	430a      	orrs	r2, r1
 80045e4:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f000 fb24 	bl	8004c34 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80045f4:	d102      	bne.n	80045fc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	685a      	ldr	r2, [r3, #4]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004604:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004608:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004612:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d010      	beq.n	800463e <HAL_DMA_Init+0x106>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	2b04      	cmp	r3, #4
 8004622:	d80c      	bhi.n	800463e <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f000 fb4d 	bl	8004cc4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800462e:	2200      	movs	r2, #0
 8004630:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800463a:	605a      	str	r2, [r3, #4]
 800463c:	e008      	b.n	8004650 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2200      	movs	r2, #0
 800464e:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2201      	movs	r2, #1
 800465a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004666:	2300      	movs	r3, #0
}
 8004668:	4618      	mov	r0, r3
 800466a:	3708      	adds	r7, #8
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}
 8004670:	40020407 	.word	0x40020407
 8004674:	bffdfff8 	.word	0xbffdfff8
 8004678:	cccccccd 	.word	0xcccccccd
 800467c:	40020000 	.word	0x40020000
 8004680:	bffdfbf8 	.word	0xbffdfbf8
 8004684:	40020400 	.word	0x40020400

08004688 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b082      	sub	sp, #8
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d101      	bne.n	800469a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e07b      	b.n	8004792 <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f022 0201 	bic.w	r2, r2, #1
 80046a8:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	461a      	mov	r2, r3
 80046b0:	4b3a      	ldr	r3, [pc, #232]	@ (800479c <HAL_DMA_DeInit+0x114>)
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d80f      	bhi.n	80046d6 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	461a      	mov	r2, r3
 80046bc:	4b38      	ldr	r3, [pc, #224]	@ (80047a0 <HAL_DMA_DeInit+0x118>)
 80046be:	4413      	add	r3, r2
 80046c0:	4a38      	ldr	r2, [pc, #224]	@ (80047a4 <HAL_DMA_DeInit+0x11c>)
 80046c2:	fba2 2303 	umull	r2, r3, r2, r3
 80046c6:	091b      	lsrs	r3, r3, #4
 80046c8:	009a      	lsls	r2, r3, #2
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4a35      	ldr	r2, [pc, #212]	@ (80047a8 <HAL_DMA_DeInit+0x120>)
 80046d2:	641a      	str	r2, [r3, #64]	@ 0x40
 80046d4:	e00e      	b.n	80046f4 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	461a      	mov	r2, r3
 80046dc:	4b33      	ldr	r3, [pc, #204]	@ (80047ac <HAL_DMA_DeInit+0x124>)
 80046de:	4413      	add	r3, r2
 80046e0:	4a30      	ldr	r2, [pc, #192]	@ (80047a4 <HAL_DMA_DeInit+0x11c>)
 80046e2:	fba2 2303 	umull	r2, r3, r2, r3
 80046e6:	091b      	lsrs	r3, r3, #4
 80046e8:	009a      	lsls	r2, r3, #2
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a2f      	ldr	r2, [pc, #188]	@ (80047b0 <HAL_DMA_DeInit+0x128>)
 80046f2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	2200      	movs	r2, #0
 80046fa:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004700:	f003 021c 	and.w	r2, r3, #28
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004708:	2101      	movs	r1, #1
 800470a:	fa01 f202 	lsl.w	r2, r1, r2
 800470e:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f000 fa8f 	bl	8004c34 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800471a:	2200      	movs	r2, #0
 800471c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004726:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d00f      	beq.n	8004750 <HAL_DMA_DeInit+0xc8>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	2b04      	cmp	r3, #4
 8004736:	d80b      	bhi.n	8004750 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f000 fac3 	bl	8004cc4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004742:	2200      	movs	r2, #0
 8004744:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800474e:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004790:	2300      	movs	r3, #0
}
 8004792:	4618      	mov	r0, r3
 8004794:	3708      	adds	r7, #8
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop
 800479c:	40020407 	.word	0x40020407
 80047a0:	bffdfff8 	.word	0xbffdfff8
 80047a4:	cccccccd 	.word	0xcccccccd
 80047a8:	40020000 	.word	0x40020000
 80047ac:	bffdfbf8 	.word	0xbffdfbf8
 80047b0:	40020400 	.word	0x40020400

080047b4 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b086      	sub	sp, #24
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	60b9      	str	r1, [r7, #8]
 80047be:	607a      	str	r2, [r7, #4]
 80047c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047c2:	2300      	movs	r3, #0
 80047c4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d101      	bne.n	80047d4 <HAL_DMA_Start_IT+0x20>
 80047d0:	2302      	movs	r3, #2
 80047d2:	e069      	b.n	80048a8 <HAL_DMA_Start_IT+0xf4>
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d155      	bne.n	8004894 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2202      	movs	r2, #2
 80047ec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2200      	movs	r2, #0
 80047f4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f022 0201 	bic.w	r2, r2, #1
 8004804:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	68b9      	ldr	r1, [r7, #8]
 800480c:	68f8      	ldr	r0, [r7, #12]
 800480e:	f000 f9d3 	bl	8004bb8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004816:	2b00      	cmp	r3, #0
 8004818:	d008      	beq.n	800482c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f042 020e 	orr.w	r2, r2, #14
 8004828:	601a      	str	r2, [r3, #0]
 800482a:	e00f      	b.n	800484c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f022 0204 	bic.w	r2, r2, #4
 800483a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f042 020a 	orr.w	r2, r2, #10
 800484a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004856:	2b00      	cmp	r3, #0
 8004858:	d007      	beq.n	800486a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004864:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004868:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800486e:	2b00      	cmp	r3, #0
 8004870:	d007      	beq.n	8004882 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800487c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004880:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f042 0201 	orr.w	r2, r2, #1
 8004890:	601a      	str	r2, [r3, #0]
 8004892:	e008      	b.n	80048a6 <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2280      	movs	r2, #128	@ 0x80
 8004898:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2200      	movs	r2, #0
 800489e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Return error status */
    status = HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80048a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3718      	adds	r7, #24
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}

080048b0 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d101      	bne.n	80048c2 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e04f      	b.n	8004962 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	2b02      	cmp	r3, #2
 80048cc:	d008      	beq.n	80048e0 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2204      	movs	r2, #4
 80048d2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	e040      	b.n	8004962 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f022 020e 	bic.w	r2, r2, #14
 80048ee:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048fa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80048fe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f022 0201 	bic.w	r2, r2, #1
 800490e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004914:	f003 021c 	and.w	r2, r3, #28
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800491c:	2101      	movs	r1, #1
 800491e:	fa01 f202 	lsl.w	r2, r1, r2
 8004922:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800492c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004932:	2b00      	cmp	r3, #0
 8004934:	d00c      	beq.n	8004950 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004940:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004944:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800494e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2200      	movs	r2, #0
 800495c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 8004960:	2300      	movs	r3, #0
}
 8004962:	4618      	mov	r0, r3
 8004964:	370c      	adds	r7, #12
 8004966:	46bd      	mov	sp, r7
 8004968:	bc80      	pop	{r7}
 800496a:	4770      	bx	lr

0800496c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b084      	sub	sp, #16
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004974:	2300      	movs	r3, #0
 8004976:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800497e:	b2db      	uxtb	r3, r3
 8004980:	2b02      	cmp	r3, #2
 8004982:	d005      	beq.n	8004990 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2204      	movs	r2, #4
 8004988:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	73fb      	strb	r3, [r7, #15]
 800498e:	e047      	b.n	8004a20 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f022 020e 	bic.w	r2, r2, #14
 800499e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f022 0201 	bic.w	r2, r2, #1
 80049ae:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049ba:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80049be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049c4:	f003 021c 	and.w	r2, r3, #28
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049cc:	2101      	movs	r1, #1
 80049ce:	fa01 f202 	lsl.w	r2, r1, r2
 80049d2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049d8:	687a      	ldr	r2, [r7, #4]
 80049da:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80049dc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d00c      	beq.n	8004a00 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80049f4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80049fe:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d003      	beq.n	8004a20 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	4798      	blx	r3
    }
  }
  return status;
 8004a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3710      	adds	r7, #16
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
	...

08004a2c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a48:	f003 031c 	and.w	r3, r3, #28
 8004a4c:	2204      	movs	r2, #4
 8004a4e:	409a      	lsls	r2, r3
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	4013      	ands	r3, r2
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d027      	beq.n	8004aa8 <HAL_DMA_IRQHandler+0x7c>
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	f003 0304 	and.w	r3, r3, #4
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d022      	beq.n	8004aa8 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0320 	and.w	r3, r3, #32
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d107      	bne.n	8004a80 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f022 0204 	bic.w	r2, r2, #4
 8004a7e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a84:	f003 021c 	and.w	r2, r3, #28
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a8c:	2104      	movs	r1, #4
 8004a8e:	fa01 f202 	lsl.w	r2, r1, r2
 8004a92:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	f000 8081 	beq.w	8004ba0 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8004aa6:	e07b      	b.n	8004ba0 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aac:	f003 031c 	and.w	r3, r3, #28
 8004ab0:	2202      	movs	r2, #2
 8004ab2:	409a      	lsls	r2, r3
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d03d      	beq.n	8004b38 <HAL_DMA_IRQHandler+0x10c>
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	f003 0302 	and.w	r3, r3, #2
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d038      	beq.n	8004b38 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 0320 	and.w	r3, r3, #32
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d10b      	bne.n	8004aec <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f022 020a 	bic.w	r2, r2, #10
 8004ae2:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	461a      	mov	r2, r3
 8004af2:	4b2e      	ldr	r3, [pc, #184]	@ (8004bac <HAL_DMA_IRQHandler+0x180>)
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d909      	bls.n	8004b0c <HAL_DMA_IRQHandler+0xe0>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004afc:	f003 031c 	and.w	r3, r3, #28
 8004b00:	4a2b      	ldr	r2, [pc, #172]	@ (8004bb0 <HAL_DMA_IRQHandler+0x184>)
 8004b02:	2102      	movs	r1, #2
 8004b04:	fa01 f303 	lsl.w	r3, r1, r3
 8004b08:	6053      	str	r3, [r2, #4]
 8004b0a:	e008      	b.n	8004b1e <HAL_DMA_IRQHandler+0xf2>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b10:	f003 031c 	and.w	r3, r3, #28
 8004b14:	4a27      	ldr	r2, [pc, #156]	@ (8004bb4 <HAL_DMA_IRQHandler+0x188>)
 8004b16:	2102      	movs	r1, #2
 8004b18:	fa01 f303 	lsl.w	r3, r1, r3
 8004b1c:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      if (hdma->XferCpltCallback != NULL)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d038      	beq.n	8004ba0 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8004b36:	e033      	b.n	8004ba0 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b3c:	f003 031c 	and.w	r3, r3, #28
 8004b40:	2208      	movs	r2, #8
 8004b42:	409a      	lsls	r2, r3
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	4013      	ands	r3, r2
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d02a      	beq.n	8004ba2 <HAL_DMA_IRQHandler+0x176>
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	f003 0308 	and.w	r3, r3, #8
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d025      	beq.n	8004ba2 <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f022 020e 	bic.w	r2, r2, #14
 8004b64:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b6a:	f003 021c 	and.w	r2, r3, #28
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b72:	2101      	movs	r1, #1
 8004b74:	fa01 f202 	lsl.w	r2, r1, r2
 8004b78:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2201      	movs	r2, #1
 8004b84:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d004      	beq.n	8004ba2 <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004ba0:	bf00      	nop
 8004ba2:	bf00      	nop
}
 8004ba4:	3710      	adds	r7, #16
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	40020080 	.word	0x40020080
 8004bb0:	40020400 	.word	0x40020400
 8004bb4:	40020000 	.word	0x40020000

08004bb8 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b085      	sub	sp, #20
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	60f8      	str	r0, [r7, #12]
 8004bc0:	60b9      	str	r1, [r7, #8]
 8004bc2:	607a      	str	r2, [r7, #4]
 8004bc4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bca:	68fa      	ldr	r2, [r7, #12]
 8004bcc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004bce:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d004      	beq.n	8004be2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bdc:	68fa      	ldr	r2, [r7, #12]
 8004bde:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004be0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004be6:	f003 021c 	and.w	r2, r3, #28
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bee:	2101      	movs	r1, #1
 8004bf0:	fa01 f202 	lsl.w	r2, r1, r2
 8004bf4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	683a      	ldr	r2, [r7, #0]
 8004bfc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	2b10      	cmp	r3, #16
 8004c04:	d108      	bne.n	8004c18 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	68ba      	ldr	r2, [r7, #8]
 8004c14:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004c16:	e007      	b.n	8004c28 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	68ba      	ldr	r2, [r7, #8]
 8004c1e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	60da      	str	r2, [r3, #12]
}
 8004c28:	bf00      	nop
 8004c2a:	3714      	adds	r7, #20
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bc80      	pop	{r7}
 8004c30:	4770      	bx	lr
	...

08004c34 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b085      	sub	sp, #20
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	461a      	mov	r2, r3
 8004c42:	4b1c      	ldr	r3, [pc, #112]	@ (8004cb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d813      	bhi.n	8004c70 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c4c:	089b      	lsrs	r3, r3, #2
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004c54:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	3b08      	subs	r3, #8
 8004c64:	4a14      	ldr	r2, [pc, #80]	@ (8004cb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8004c66:	fba2 2303 	umull	r2, r3, r2, r3
 8004c6a:	091b      	lsrs	r3, r3, #4
 8004c6c:	60fb      	str	r3, [r7, #12]
 8004c6e:	e011      	b.n	8004c94 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c74:	089b      	lsrs	r3, r3, #2
 8004c76:	009a      	lsls	r2, r3, #2
 8004c78:	4b10      	ldr	r3, [pc, #64]	@ (8004cbc <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8004c7a:	4413      	add	r3, r2
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	3b08      	subs	r3, #8
 8004c88:	4a0b      	ldr	r2, [pc, #44]	@ (8004cb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8004c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c8e:	091b      	lsrs	r3, r3, #4
 8004c90:	3307      	adds	r3, #7
 8004c92:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	4a0a      	ldr	r2, [pc, #40]	@ (8004cc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8004c98:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f003 031f 	and.w	r3, r3, #31
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	409a      	lsls	r2, r3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004ca8:	bf00      	nop
 8004caa:	3714      	adds	r7, #20
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bc80      	pop	{r7}
 8004cb0:	4770      	bx	lr
 8004cb2:	bf00      	nop
 8004cb4:	40020407 	.word	0x40020407
 8004cb8:	cccccccd 	.word	0xcccccccd
 8004cbc:	4002081c 	.word	0x4002081c
 8004cc0:	40020880 	.word	0x40020880

08004cc4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b085      	sub	sp, #20
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004cd4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004cd6:	68fa      	ldr	r2, [r7, #12]
 8004cd8:	4b0a      	ldr	r3, [pc, #40]	@ (8004d04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004cda:	4413      	add	r3, r2
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	461a      	mov	r2, r3
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	4a08      	ldr	r2, [pc, #32]	@ (8004d08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004ce8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	3b01      	subs	r3, #1
 8004cee:	f003 0303 	and.w	r3, r3, #3
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	409a      	lsls	r2, r3
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004cfa:	bf00      	nop
 8004cfc:	3714      	adds	r7, #20
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bc80      	pop	{r7}
 8004d02:	4770      	bx	lr
 8004d04:	1000823f 	.word	0x1000823f
 8004d08:	40020940 	.word	0x40020940

08004d0c <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b086      	sub	sp, #24
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	60f8      	str	r0, [r7, #12]
 8004d14:	60b9      	str	r1, [r7, #8]
 8004d16:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004d1a:	4b1c      	ldr	r3, [pc, #112]	@ (8004d8c <HAL_FLASH_Program+0x80>)
 8004d1c:	781b      	ldrb	r3, [r3, #0]
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d101      	bne.n	8004d26 <HAL_FLASH_Program+0x1a>
 8004d22:	2302      	movs	r3, #2
 8004d24:	e02d      	b.n	8004d82 <HAL_FLASH_Program+0x76>
 8004d26:	4b19      	ldr	r3, [pc, #100]	@ (8004d8c <HAL_FLASH_Program+0x80>)
 8004d28:	2201      	movs	r2, #1
 8004d2a:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004d2c:	4b17      	ldr	r3, [pc, #92]	@ (8004d8c <HAL_FLASH_Program+0x80>)
 8004d2e:	2200      	movs	r2, #0
 8004d30:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004d32:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004d36:	f000 f869 	bl	8004e0c <FLASH_WaitForLastOperation>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8004d3e:	7dfb      	ldrb	r3, [r7, #23]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d11a      	bne.n	8004d7a <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d105      	bne.n	8004d56 <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8004d4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d4e:	68b8      	ldr	r0, [r7, #8]
 8004d50:	f000 f8be 	bl	8004ed0 <FLASH_Program_DoubleWord>
 8004d54:	e004      	b.n	8004d60 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 double-word (64-bit) row at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	4619      	mov	r1, r3
 8004d5a:	68b8      	ldr	r0, [r7, #8]
 8004d5c:	f000 f8de 	bl	8004f1c <FLASH_Program_Fast>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004d60:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004d64:	f000 f852 	bl	8004e0c <FLASH_WaitForLastOperation>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
#ifdef CORE_CM0PLUS
    CLEAR_BIT(FLASH->C2CR, TypeProgram);
#else
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8004d6c:	4b08      	ldr	r3, [pc, #32]	@ (8004d90 <HAL_FLASH_Program+0x84>)
 8004d6e:	695a      	ldr	r2, [r3, #20]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	43db      	mvns	r3, r3
 8004d74:	4906      	ldr	r1, [pc, #24]	@ (8004d90 <HAL_FLASH_Program+0x84>)
 8004d76:	4013      	ands	r3, r2
 8004d78:	614b      	str	r3, [r1, #20]
#endif
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004d7a:	4b04      	ldr	r3, [pc, #16]	@ (8004d8c <HAL_FLASH_Program+0x80>)
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8004d80:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3718      	adds	r7, #24
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop
 8004d8c:	20000588 	.word	0x20000588
 8004d90:	58004000 	.word	0x58004000

08004d94 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b083      	sub	sp, #12
 8004d98:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8004d9e:	4b0b      	ldr	r3, [pc, #44]	@ (8004dcc <HAL_FLASH_Unlock+0x38>)
 8004da0:	695b      	ldr	r3, [r3, #20]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	da0b      	bge.n	8004dbe <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004da6:	4b09      	ldr	r3, [pc, #36]	@ (8004dcc <HAL_FLASH_Unlock+0x38>)
 8004da8:	4a09      	ldr	r2, [pc, #36]	@ (8004dd0 <HAL_FLASH_Unlock+0x3c>)
 8004daa:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004dac:	4b07      	ldr	r3, [pc, #28]	@ (8004dcc <HAL_FLASH_Unlock+0x38>)
 8004dae:	4a09      	ldr	r2, [pc, #36]	@ (8004dd4 <HAL_FLASH_Unlock+0x40>)
 8004db0:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8004db2:	4b06      	ldr	r3, [pc, #24]	@ (8004dcc <HAL_FLASH_Unlock+0x38>)
 8004db4:	695b      	ldr	r3, [r3, #20]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	da01      	bge.n	8004dbe <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8004dbe:	79fb      	ldrb	r3, [r7, #7]
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	370c      	adds	r7, #12
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bc80      	pop	{r7}
 8004dc8:	4770      	bx	lr
 8004dca:	bf00      	nop
 8004dcc:	58004000 	.word	0x58004000
 8004dd0:	45670123 	.word	0x45670123
 8004dd4:	cdef89ab 	.word	0xcdef89ab

08004dd8 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b083      	sub	sp, #12
 8004ddc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004dde:	2300      	movs	r3, #0
 8004de0:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004de2:	4b09      	ldr	r3, [pc, #36]	@ (8004e08 <HAL_FLASH_Lock+0x30>)
 8004de4:	695b      	ldr	r3, [r3, #20]
 8004de6:	4a08      	ldr	r2, [pc, #32]	@ (8004e08 <HAL_FLASH_Lock+0x30>)
 8004de8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004dec:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8004dee:	4b06      	ldr	r3, [pc, #24]	@ (8004e08 <HAL_FLASH_Lock+0x30>)
 8004df0:	695b      	ldr	r3, [r3, #20]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	db01      	blt.n	8004dfa <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8004dfa:	79fb      	ldrb	r3, [r7, #7]
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	370c      	adds	r7, #12
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bc80      	pop	{r7}
 8004e04:	4770      	bx	lr
 8004e06:	bf00      	nop
 8004e08:	58004000 	.word	0x58004000

08004e0c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8004e14:	f7fd f9d6 	bl	80021c4 <HAL_GetTick>
 8004e18:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004e1a:	e009      	b.n	8004e30 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8004e1c:	f7fd f9d2 	bl	80021c4 <HAL_GetTick>
 8004e20:	4602      	mov	r2, r0
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d801      	bhi.n	8004e30 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8004e2c:	2303      	movs	r3, #3
 8004e2e:	e046      	b.n	8004ebe <FLASH_WaitForLastOperation+0xb2>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004e30:	4b25      	ldr	r3, [pc, #148]	@ (8004ec8 <FLASH_WaitForLastOperation+0xbc>)
 8004e32:	691b      	ldr	r3, [r3, #16]
 8004e34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e3c:	d0ee      	beq.n	8004e1c <FLASH_WaitForLastOperation+0x10>
  /* check flash errors. Only ECC correction can be checked here as ECCD
      generates NMI */
#ifdef CORE_CM0PLUS
  error = FLASH->C2SR;
#else
  error = FLASH->SR;
 8004e3e:	4b22      	ldr	r3, [pc, #136]	@ (8004ec8 <FLASH_WaitForLastOperation+0xbc>)
 8004e40:	691b      	ldr	r3, [r3, #16]
 8004e42:	60bb      	str	r3, [r7, #8]
#endif

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	f003 0301 	and.w	r3, r3, #1
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d002      	beq.n	8004e54 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004e4e:	4b1e      	ldr	r3, [pc, #120]	@ (8004ec8 <FLASH_WaitForLastOperation+0xbc>)
 8004e50:	2201      	movs	r2, #1
 8004e52:	611a      	str	r2, [r3, #16]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 8004e54:	68ba      	ldr	r2, [r7, #8]
 8004e56:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e64:	d307      	bcc.n	8004e76 <FLASH_WaitForLastOperation+0x6a>
 8004e66:	4b18      	ldr	r3, [pc, #96]	@ (8004ec8 <FLASH_WaitForLastOperation+0xbc>)
 8004e68:	699a      	ldr	r2, [r3, #24]
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004e70:	4915      	ldr	r1, [pc, #84]	@ (8004ec8 <FLASH_WaitForLastOperation+0xbc>)
 8004e72:	4313      	orrs	r3, r2
 8004e74:	618b      	str	r3, [r1, #24]
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d004      	beq.n	8004e8a <FLASH_WaitForLastOperation+0x7e>
 8004e80:	4a11      	ldr	r2, [pc, #68]	@ (8004ec8 <FLASH_WaitForLastOperation+0xbc>)
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8004e88:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d00e      	beq.n	8004eae <FLASH_WaitForLastOperation+0xa2>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8004e90:	4a0e      	ldr	r2, [pc, #56]	@ (8004ecc <FLASH_WaitForLastOperation+0xc0>)
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e011      	b.n	8004ebe <FLASH_WaitForLastOperation+0xb2>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8004e9a:	f7fd f993 	bl	80021c4 <HAL_GetTick>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	1ad3      	subs	r3, r2, r3
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d801      	bhi.n	8004eae <FLASH_WaitForLastOperation+0xa2>
    {
      return HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	e007      	b.n	8004ebe <FLASH_WaitForLastOperation+0xb2>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8004eae:	4b06      	ldr	r3, [pc, #24]	@ (8004ec8 <FLASH_WaitForLastOperation+0xbc>)
 8004eb0:	691b      	ldr	r3, [r3, #16]
 8004eb2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004eb6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004eba:	d0ee      	beq.n	8004e9a <FLASH_WaitForLastOperation+0x8e>
    }
  }

  return HAL_OK;
 8004ebc:	2300      	movs	r3, #0
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3710      	adds	r7, #16
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	58004000 	.word	0x58004000
 8004ecc:	20000588 	.word	0x20000588

08004ed0 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b085      	sub	sp, #20
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	60f8      	str	r0, [r7, #12]
 8004ed8:	e9c7 2300 	strd	r2, r3, [r7]
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8004edc:	4b0e      	ldr	r3, [pc, #56]	@ (8004f18 <FLASH_Program_DoubleWord+0x48>)
 8004ede:	695b      	ldr	r3, [r3, #20]
 8004ee0:	4a0d      	ldr	r2, [pc, #52]	@ (8004f18 <FLASH_Program_DoubleWord+0x48>)
 8004ee2:	f043 0301 	orr.w	r3, r3, #1
 8004ee6:	6153      	str	r3, [r2, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	683a      	ldr	r2, [r7, #0]
 8004eec:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8004eee:	f3bf 8f6f 	isb	sy
}
 8004ef2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8004ef4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004ef8:	f04f 0200 	mov.w	r2, #0
 8004efc:	f04f 0300 	mov.w	r3, #0
 8004f00:	000a      	movs	r2, r1
 8004f02:	2300      	movs	r3, #0
 8004f04:	68f9      	ldr	r1, [r7, #12]
 8004f06:	3104      	adds	r1, #4
 8004f08:	4613      	mov	r3, r2
 8004f0a:	600b      	str	r3, [r1, #0]
}
 8004f0c:	bf00      	nop
 8004f0e:	3714      	adds	r7, #20
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bc80      	pop	{r7}
 8004f14:	4770      	bx	lr
 8004f16:	bf00      	nop
 8004f18:	58004000 	.word	0x58004000

08004f1c <FLASH_Program_Fast>:
#ifdef CORE_CM0PLUS
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#else
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#endif
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b089      	sub	sp, #36	@ 0x24
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8004f26:	2340      	movs	r3, #64	@ 0x40
 8004f28:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	617b      	str	r3, [r7, #20]

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8004f32:	4b18      	ldr	r3, [pc, #96]	@ (8004f94 <FLASH_Program_Fast+0x78>)
 8004f34:	695b      	ldr	r3, [r3, #20]
 8004f36:	4a17      	ldr	r2, [pc, #92]	@ (8004f94 <FLASH_Program_Fast+0x78>)
 8004f38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004f3c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f3e:	f3ef 8310 	mrs	r3, PRIMASK
 8004f42:	60fb      	str	r3, [r7, #12]
  return(result);
 8004f44:	68fb      	ldr	r3, [r7, #12]
#endif

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
 8004f46:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8004f48:	b672      	cpsid	i
}
 8004f4a:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	69bb      	ldr	r3, [r7, #24]
 8004f52:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8004f54:	69bb      	ldr	r3, [r7, #24]
 8004f56:	3304      	adds	r3, #4
 8004f58:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	3304      	adds	r3, #4
 8004f5e:	617b      	str	r3, [r7, #20]
    row_index--;
 8004f60:	7ffb      	ldrb	r3, [r7, #31]
 8004f62:	3b01      	subs	r3, #1
 8004f64:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8004f66:	7ffb      	ldrb	r3, [r7, #31]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d1ef      	bne.n	8004f4c <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 8004f6c:	bf00      	nop
 8004f6e:	4b09      	ldr	r3, [pc, #36]	@ (8004f94 <FLASH_Program_Fast+0x78>)
 8004f70:	691b      	ldr	r3, [r3, #16]
 8004f72:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f76:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f7a:	d0f8      	beq.n	8004f6e <FLASH_Program_Fast+0x52>
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	f383 8810 	msr	PRIMASK, r3
}
 8004f86:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8004f88:	bf00      	nop
 8004f8a:	3724      	adds	r7, #36	@ 0x24
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bc80      	pop	{r7}
 8004f90:	4770      	bx	lr
 8004f92:	bf00      	nop
 8004f94:	58004000 	.word	0x58004000

08004f98 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b084      	sub	sp, #16
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004fa2:	4b28      	ldr	r3, [pc, #160]	@ (8005044 <HAL_FLASHEx_Erase+0xac>)
 8004fa4:	781b      	ldrb	r3, [r3, #0]
 8004fa6:	2b01      	cmp	r3, #1
 8004fa8:	d101      	bne.n	8004fae <HAL_FLASHEx_Erase+0x16>
 8004faa:	2302      	movs	r3, #2
 8004fac:	e046      	b.n	800503c <HAL_FLASHEx_Erase+0xa4>
 8004fae:	4b25      	ldr	r3, [pc, #148]	@ (8005044 <HAL_FLASHEx_Erase+0xac>)
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004fb4:	4b23      	ldr	r3, [pc, #140]	@ (8005044 <HAL_FLASHEx_Erase+0xac>)
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004fba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004fbe:	f7ff ff25 	bl	8004e0c <FLASH_WaitForLastOperation>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004fc6:	7bfb      	ldrb	r3, [r7, #15]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d133      	bne.n	8005034 <HAL_FLASHEx_Erase+0x9c>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	2b04      	cmp	r3, #4
 8004fd2:	d108      	bne.n	8004fe6 <HAL_FLASHEx_Erase+0x4e>
    {
      /* Mass erase to be done */
      FLASH_MassErase();
 8004fd4:	f000 f880 	bl	80050d8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004fd8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004fdc:	f7ff ff16 	bl	8004e0c <FLASH_WaitForLastOperation>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	73fb      	strb	r3, [r7, #15]
 8004fe4:	e024      	b.n	8005030 <HAL_FLASHEx_Erase+0x98>
      /* If operation is completed or interrupted, no need to clear the Mass Erase Bit */
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8004fec:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	60bb      	str	r3, [r7, #8]
 8004ff4:	e012      	b.n	800501c <HAL_FLASHEx_Erase+0x84>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 8004ff6:	68b8      	ldr	r0, [r7, #8]
 8004ff8:	f000 f87e 	bl	80050f8 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004ffc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005000:	f7ff ff04 	bl	8004e0c <FLASH_WaitForLastOperation>
 8005004:	4603      	mov	r3, r0
 8005006:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 8005008:	7bfb      	ldrb	r3, [r7, #15]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d003      	beq.n	8005016 <HAL_FLASHEx_Erase+0x7e>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	68ba      	ldr	r2, [r7, #8]
 8005012:	601a      	str	r2, [r3, #0]
          break;
 8005014:	e00a      	b.n	800502c <HAL_FLASHEx_Erase+0x94>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	3301      	adds	r3, #1
 800501a:	60bb      	str	r3, [r7, #8]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	685a      	ldr	r2, [r3, #4]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	4413      	add	r3, r2
 8005026:	68ba      	ldr	r2, [r7, #8]
 8005028:	429a      	cmp	r2, r3
 800502a:	d3e4      	bcc.n	8004ff6 <HAL_FLASHEx_Erase+0x5e>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 800502c:	f000 f8c0 	bl	80051b0 <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8005030:	f000 f87a 	bl	8005128 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005034:	4b03      	ldr	r3, [pc, #12]	@ (8005044 <HAL_FLASHEx_Erase+0xac>)
 8005036:	2200      	movs	r2, #0
 8005038:	701a      	strb	r2, [r3, #0]

  return status;
 800503a:	7bfb      	ldrb	r3, [r7, #15]
}
 800503c:	4618      	mov	r0, r3
 800503e:	3710      	adds	r7, #16
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}
 8005044:	20000588 	.word	0x20000588

08005048 <HAL_FLASHEx_Erase_IT>:
  * @param  pEraseInit Pointer to an @ref FLASH_EraseInitTypeDef structure that
  *         contains the configuration information for the erasing.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b084      	sub	sp, #16
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005050:	4b1f      	ldr	r3, [pc, #124]	@ (80050d0 <HAL_FLASHEx_Erase_IT+0x88>)
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	2b01      	cmp	r3, #1
 8005056:	d101      	bne.n	800505c <HAL_FLASHEx_Erase_IT+0x14>
 8005058:	2302      	movs	r3, #2
 800505a:	e034      	b.n	80050c6 <HAL_FLASHEx_Erase_IT+0x7e>
 800505c:	4b1c      	ldr	r3, [pc, #112]	@ (80050d0 <HAL_FLASHEx_Erase_IT+0x88>)
 800505e:	2201      	movs	r2, #1
 8005060:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005062:	4b1b      	ldr	r3, [pc, #108]	@ (80050d0 <HAL_FLASHEx_Erase_IT+0x88>)
 8005064:	2200      	movs	r2, #0
 8005066:	605a      	str	r2, [r3, #4]

  /* save procedure for interrupt treatment */
  pFlash.ProcedureOnGoing = pEraseInit->TypeErase;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a18      	ldr	r2, [pc, #96]	@ (80050d0 <HAL_FLASHEx_Erase_IT+0x88>)
 800506e:	6093      	str	r3, [r2, #8]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005070:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005074:	f7ff feca 	bl	8004e0c <FLASH_WaitForLastOperation>
 8005078:	4603      	mov	r3, r0
 800507a:	73fb      	strb	r3, [r7, #15]

  if (status != HAL_OK)
 800507c:	7bfb      	ldrb	r3, [r7, #15]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d003      	beq.n	800508a <HAL_FLASHEx_Erase_IT+0x42>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8005082:	4b13      	ldr	r3, [pc, #76]	@ (80050d0 <HAL_FLASHEx_Erase_IT+0x88>)
 8005084:	2200      	movs	r2, #0
 8005086:	701a      	strb	r2, [r3, #0]
 8005088:	e01c      	b.n	80050c4 <HAL_FLASHEx_Erase_IT+0x7c>
  }
  else
  {
    /* Enable End of Operation and Error interrupts */
    __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 800508a:	4b12      	ldr	r3, [pc, #72]	@ (80050d4 <HAL_FLASHEx_Erase_IT+0x8c>)
 800508c:	695b      	ldr	r3, [r3, #20]
 800508e:	4a11      	ldr	r2, [pc, #68]	@ (80050d4 <HAL_FLASHEx_Erase_IT+0x8c>)
 8005090:	f043 7340 	orr.w	r3, r3, #50331648	@ 0x3000000
 8005094:	6153      	str	r3, [r2, #20]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	2b04      	cmp	r3, #4
 800509c:	d105      	bne.n	80050aa <HAL_FLASHEx_Erase_IT+0x62>
    {
      /* Set Page to 0 for Interrupt callback management */
      pFlash.Page = 0;
 800509e:	4b0c      	ldr	r3, [pc, #48]	@ (80050d0 <HAL_FLASHEx_Erase_IT+0x88>)
 80050a0:	2200      	movs	r2, #0
 80050a2:	611a      	str	r2, [r3, #16]

      /* Proceed to Mass Erase */
      FLASH_MassErase();
 80050a4:	f000 f818 	bl	80050d8 <FLASH_MassErase>
 80050a8:	e00c      	b.n	80050c4 <HAL_FLASHEx_Erase_IT+0x7c>
    }
    else
    {
      /* Erase by page to be done */
      pFlash.NbPagesToErase = pEraseInit->NbPages;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	4a08      	ldr	r2, [pc, #32]	@ (80050d0 <HAL_FLASHEx_Erase_IT+0x88>)
 80050b0:	6153      	str	r3, [r2, #20]
      pFlash.Page = pEraseInit->Page;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	4a06      	ldr	r2, [pc, #24]	@ (80050d0 <HAL_FLASHEx_Erase_IT+0x88>)
 80050b8:	6113      	str	r3, [r2, #16]

      /*Erase 1st page and wait for IT */
      FLASH_PageErase(pEraseInit->Page);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	4618      	mov	r0, r3
 80050c0:	f000 f81a 	bl	80050f8 <FLASH_PageErase>
    }
  }

  /* return status */
  return status;
 80050c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3710      	adds	r7, #16
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}
 80050ce:	bf00      	nop
 80050d0:	20000588 	.word	0x20000588
 80050d4:	58004000 	.word	0x58004000

080050d8 <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 80050d8:	b480      	push	{r7}
 80050da:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 80050dc:	4b05      	ldr	r3, [pc, #20]	@ (80050f4 <FLASH_MassErase+0x1c>)
 80050de:	695b      	ldr	r3, [r3, #20]
 80050e0:	4a04      	ldr	r2, [pc, #16]	@ (80050f4 <FLASH_MassErase+0x1c>)
 80050e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050e6:	f043 0304 	orr.w	r3, r3, #4
 80050ea:	6153      	str	r3, [r2, #20]
#endif
}
 80050ec:	bf00      	nop
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bc80      	pop	{r7}
 80050f2:	4770      	bx	lr
 80050f4:	58004000 	.word	0x58004000

080050f8 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b083      	sub	sp, #12
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]

  /* Proceed to erase the page */
#ifdef CORE_CM0PLUS
  MODIFY_REG(FLASH->C2CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
#else
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8005100:	4b08      	ldr	r3, [pc, #32]	@ (8005124 <FLASH_PageErase+0x2c>)
 8005102:	695b      	ldr	r3, [r3, #20]
 8005104:	f423 727e 	bic.w	r2, r3, #1016	@ 0x3f8
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	00db      	lsls	r3, r3, #3
 800510c:	4313      	orrs	r3, r2
 800510e:	4a05      	ldr	r2, [pc, #20]	@ (8005124 <FLASH_PageErase+0x2c>)
 8005110:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005114:	f043 0302 	orr.w	r3, r3, #2
 8005118:	6153      	str	r3, [r2, #20]
#endif
}
 800511a:	bf00      	nop
 800511c:	370c      	adds	r7, #12
 800511e:	46bd      	mov	sp, r7
 8005120:	bc80      	pop	{r7}
 8005122:	4770      	bx	lr
 8005124:	58004000 	.word	0x58004000

08005128 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8005128:	b480      	push	{r7}
 800512a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 800512c:	4b1f      	ldr	r3, [pc, #124]	@ (80051ac <FLASH_FlushCaches+0x84>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005134:	2b01      	cmp	r3, #1
 8005136:	d117      	bne.n	8005168 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005138:	4b1c      	ldr	r3, [pc, #112]	@ (80051ac <FLASH_FlushCaches+0x84>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a1b      	ldr	r2, [pc, #108]	@ (80051ac <FLASH_FlushCaches+0x84>)
 800513e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005142:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8005144:	4b19      	ldr	r3, [pc, #100]	@ (80051ac <FLASH_FlushCaches+0x84>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a18      	ldr	r2, [pc, #96]	@ (80051ac <FLASH_FlushCaches+0x84>)
 800514a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800514e:	6013      	str	r3, [r2, #0]
 8005150:	4b16      	ldr	r3, [pc, #88]	@ (80051ac <FLASH_FlushCaches+0x84>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a15      	ldr	r2, [pc, #84]	@ (80051ac <FLASH_FlushCaches+0x84>)
 8005156:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800515a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800515c:	4b13      	ldr	r3, [pc, #76]	@ (80051ac <FLASH_FlushCaches+0x84>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a12      	ldr	r2, [pc, #72]	@ (80051ac <FLASH_FlushCaches+0x84>)
 8005162:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005166:	6013      	str	r3, [r2, #0]
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 8005168:	4b10      	ldr	r3, [pc, #64]	@ (80051ac <FLASH_FlushCaches+0x84>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005170:	2b01      	cmp	r3, #1
 8005172:	d117      	bne.n	80051a4 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8005174:	4b0d      	ldr	r3, [pc, #52]	@ (80051ac <FLASH_FlushCaches+0x84>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a0c      	ldr	r2, [pc, #48]	@ (80051ac <FLASH_FlushCaches+0x84>)
 800517a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800517e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8005180:	4b0a      	ldr	r3, [pc, #40]	@ (80051ac <FLASH_FlushCaches+0x84>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a09      	ldr	r2, [pc, #36]	@ (80051ac <FLASH_FlushCaches+0x84>)
 8005186:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800518a:	6013      	str	r3, [r2, #0]
 800518c:	4b07      	ldr	r3, [pc, #28]	@ (80051ac <FLASH_FlushCaches+0x84>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a06      	ldr	r2, [pc, #24]	@ (80051ac <FLASH_FlushCaches+0x84>)
 8005192:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005196:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8005198:	4b04      	ldr	r3, [pc, #16]	@ (80051ac <FLASH_FlushCaches+0x84>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a03      	ldr	r2, [pc, #12]	@ (80051ac <FLASH_FlushCaches+0x84>)
 800519e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80051a2:	6013      	str	r3, [r2, #0]
  }
#endif
}
 80051a4:	bf00      	nop
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bc80      	pop	{r7}
 80051aa:	4770      	bx	lr
 80051ac:	58004000 	.word	0x58004000

080051b0 <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 80051b0:	b480      	push	{r7}
 80051b2:	af00      	add	r7, sp, #0
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80051b4:	4b05      	ldr	r3, [pc, #20]	@ (80051cc <FLASH_AcknowledgePageErase+0x1c>)
 80051b6:	695b      	ldr	r3, [r3, #20]
 80051b8:	4a04      	ldr	r2, [pc, #16]	@ (80051cc <FLASH_AcknowledgePageErase+0x1c>)
 80051ba:	f423 737e 	bic.w	r3, r3, #1016	@ 0x3f8
 80051be:	f023 0302 	bic.w	r3, r3, #2
 80051c2:	6153      	str	r3, [r2, #20]
#endif
}
 80051c4:	bf00      	nop
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bc80      	pop	{r7}
 80051ca:	4770      	bx	lr
 80051cc:	58004000 	.word	0x58004000

080051d0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b087      	sub	sp, #28
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80051da:	2300      	movs	r3, #0
 80051dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80051de:	e140      	b.n	8005462 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	2101      	movs	r1, #1
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	fa01 f303 	lsl.w	r3, r1, r3
 80051ec:	4013      	ands	r3, r2
 80051ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	f000 8132 	beq.w	800545c <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	f003 0303 	and.w	r3, r3, #3
 8005200:	2b01      	cmp	r3, #1
 8005202:	d005      	beq.n	8005210 <HAL_GPIO_Init+0x40>
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	f003 0303 	and.w	r3, r3, #3
 800520c:	2b02      	cmp	r3, #2
 800520e:	d130      	bne.n	8005272 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	005b      	lsls	r3, r3, #1
 800521a:	2203      	movs	r2, #3
 800521c:	fa02 f303 	lsl.w	r3, r2, r3
 8005220:	43db      	mvns	r3, r3
 8005222:	693a      	ldr	r2, [r7, #16]
 8005224:	4013      	ands	r3, r2
 8005226:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	68da      	ldr	r2, [r3, #12]
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	005b      	lsls	r3, r3, #1
 8005230:	fa02 f303 	lsl.w	r3, r2, r3
 8005234:	693a      	ldr	r2, [r7, #16]
 8005236:	4313      	orrs	r3, r2
 8005238:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	693a      	ldr	r2, [r7, #16]
 800523e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005246:	2201      	movs	r2, #1
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	fa02 f303 	lsl.w	r3, r2, r3
 800524e:	43db      	mvns	r3, r3
 8005250:	693a      	ldr	r2, [r7, #16]
 8005252:	4013      	ands	r3, r2
 8005254:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	091b      	lsrs	r3, r3, #4
 800525c:	f003 0201 	and.w	r2, r3, #1
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	fa02 f303 	lsl.w	r3, r2, r3
 8005266:	693a      	ldr	r2, [r7, #16]
 8005268:	4313      	orrs	r3, r2
 800526a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	693a      	ldr	r2, [r7, #16]
 8005270:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	f003 0303 	and.w	r3, r3, #3
 800527a:	2b03      	cmp	r3, #3
 800527c:	d017      	beq.n	80052ae <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	68db      	ldr	r3, [r3, #12]
 8005282:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	005b      	lsls	r3, r3, #1
 8005288:	2203      	movs	r2, #3
 800528a:	fa02 f303 	lsl.w	r3, r2, r3
 800528e:	43db      	mvns	r3, r3
 8005290:	693a      	ldr	r2, [r7, #16]
 8005292:	4013      	ands	r3, r2
 8005294:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	689a      	ldr	r2, [r3, #8]
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	005b      	lsls	r3, r3, #1
 800529e:	fa02 f303 	lsl.w	r3, r2, r3
 80052a2:	693a      	ldr	r2, [r7, #16]
 80052a4:	4313      	orrs	r3, r2
 80052a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	693a      	ldr	r2, [r7, #16]
 80052ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	f003 0303 	and.w	r3, r3, #3
 80052b6:	2b02      	cmp	r3, #2
 80052b8:	d123      	bne.n	8005302 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	08da      	lsrs	r2, r3, #3
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	3208      	adds	r2, #8
 80052c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	f003 0307 	and.w	r3, r3, #7
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	220f      	movs	r2, #15
 80052d2:	fa02 f303 	lsl.w	r3, r2, r3
 80052d6:	43db      	mvns	r3, r3
 80052d8:	693a      	ldr	r2, [r7, #16]
 80052da:	4013      	ands	r3, r2
 80052dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	691a      	ldr	r2, [r3, #16]
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	f003 0307 	and.w	r3, r3, #7
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	fa02 f303 	lsl.w	r3, r2, r3
 80052ee:	693a      	ldr	r2, [r7, #16]
 80052f0:	4313      	orrs	r3, r2
 80052f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	08da      	lsrs	r2, r3, #3
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	3208      	adds	r2, #8
 80052fc:	6939      	ldr	r1, [r7, #16]
 80052fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	005b      	lsls	r3, r3, #1
 800530c:	2203      	movs	r2, #3
 800530e:	fa02 f303 	lsl.w	r3, r2, r3
 8005312:	43db      	mvns	r3, r3
 8005314:	693a      	ldr	r2, [r7, #16]
 8005316:	4013      	ands	r3, r2
 8005318:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	f003 0203 	and.w	r2, r3, #3
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	005b      	lsls	r3, r3, #1
 8005326:	fa02 f303 	lsl.w	r3, r2, r3
 800532a:	693a      	ldr	r2, [r7, #16]
 800532c:	4313      	orrs	r3, r2
 800532e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	693a      	ldr	r2, [r7, #16]
 8005334:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800533e:	2b00      	cmp	r3, #0
 8005340:	f000 808c 	beq.w	800545c <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8005344:	4a4e      	ldr	r2, [pc, #312]	@ (8005480 <HAL_GPIO_Init+0x2b0>)
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	089b      	lsrs	r3, r3, #2
 800534a:	3302      	adds	r3, #2
 800534c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005350:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	f003 0303 	and.w	r3, r3, #3
 8005358:	009b      	lsls	r3, r3, #2
 800535a:	2207      	movs	r2, #7
 800535c:	fa02 f303 	lsl.w	r3, r2, r3
 8005360:	43db      	mvns	r3, r3
 8005362:	693a      	ldr	r2, [r7, #16]
 8005364:	4013      	ands	r3, r2
 8005366:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800536e:	d00d      	beq.n	800538c <HAL_GPIO_Init+0x1bc>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4a44      	ldr	r2, [pc, #272]	@ (8005484 <HAL_GPIO_Init+0x2b4>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d007      	beq.n	8005388 <HAL_GPIO_Init+0x1b8>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	4a43      	ldr	r2, [pc, #268]	@ (8005488 <HAL_GPIO_Init+0x2b8>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d101      	bne.n	8005384 <HAL_GPIO_Init+0x1b4>
 8005380:	2302      	movs	r3, #2
 8005382:	e004      	b.n	800538e <HAL_GPIO_Init+0x1be>
 8005384:	2307      	movs	r3, #7
 8005386:	e002      	b.n	800538e <HAL_GPIO_Init+0x1be>
 8005388:	2301      	movs	r3, #1
 800538a:	e000      	b.n	800538e <HAL_GPIO_Init+0x1be>
 800538c:	2300      	movs	r3, #0
 800538e:	697a      	ldr	r2, [r7, #20]
 8005390:	f002 0203 	and.w	r2, r2, #3
 8005394:	0092      	lsls	r2, r2, #2
 8005396:	4093      	lsls	r3, r2
 8005398:	693a      	ldr	r2, [r7, #16]
 800539a:	4313      	orrs	r3, r2
 800539c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800539e:	4938      	ldr	r1, [pc, #224]	@ (8005480 <HAL_GPIO_Init+0x2b0>)
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	089b      	lsrs	r3, r3, #2
 80053a4:	3302      	adds	r3, #2
 80053a6:	693a      	ldr	r2, [r7, #16]
 80053a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80053ac:	4b37      	ldr	r3, [pc, #220]	@ (800548c <HAL_GPIO_Init+0x2bc>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	43db      	mvns	r3, r3
 80053b6:	693a      	ldr	r2, [r7, #16]
 80053b8:	4013      	ands	r3, r2
 80053ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d003      	beq.n	80053d0 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 80053c8:	693a      	ldr	r2, [r7, #16]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	4313      	orrs	r3, r2
 80053ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80053d0:	4a2e      	ldr	r2, [pc, #184]	@ (800548c <HAL_GPIO_Init+0x2bc>)
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80053d6:	4b2d      	ldr	r3, [pc, #180]	@ (800548c <HAL_GPIO_Init+0x2bc>)
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	43db      	mvns	r3, r3
 80053e0:	693a      	ldr	r2, [r7, #16]
 80053e2:	4013      	ands	r3, r2
 80053e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d003      	beq.n	80053fa <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 80053f2:	693a      	ldr	r2, [r7, #16]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80053fa:	4a24      	ldr	r2, [pc, #144]	@ (800548c <HAL_GPIO_Init+0x2bc>)
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8005400:	4b22      	ldr	r3, [pc, #136]	@ (800548c <HAL_GPIO_Init+0x2bc>)
 8005402:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005406:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	43db      	mvns	r3, r3
 800540c:	693a      	ldr	r2, [r7, #16]
 800540e:	4013      	ands	r3, r2
 8005410:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800541a:	2b00      	cmp	r3, #0
 800541c:	d003      	beq.n	8005426 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 800541e:	693a      	ldr	r2, [r7, #16]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	4313      	orrs	r3, r2
 8005424:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8005426:	4a19      	ldr	r2, [pc, #100]	@ (800548c <HAL_GPIO_Init+0x2bc>)
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800542e:	4b17      	ldr	r3, [pc, #92]	@ (800548c <HAL_GPIO_Init+0x2bc>)
 8005430:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005434:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	43db      	mvns	r3, r3
 800543a:	693a      	ldr	r2, [r7, #16]
 800543c:	4013      	ands	r3, r2
 800543e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005448:	2b00      	cmp	r3, #0
 800544a:	d003      	beq.n	8005454 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800544c:	693a      	ldr	r2, [r7, #16]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	4313      	orrs	r3, r2
 8005452:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8005454:	4a0d      	ldr	r2, [pc, #52]	@ (800548c <HAL_GPIO_Init+0x2bc>)
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	3301      	adds	r3, #1
 8005460:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	fa22 f303 	lsr.w	r3, r2, r3
 800546c:	2b00      	cmp	r3, #0
 800546e:	f47f aeb7 	bne.w	80051e0 <HAL_GPIO_Init+0x10>
  }
}
 8005472:	bf00      	nop
 8005474:	bf00      	nop
 8005476:	371c      	adds	r7, #28
 8005478:	46bd      	mov	sp, r7
 800547a:	bc80      	pop	{r7}
 800547c:	4770      	bx	lr
 800547e:	bf00      	nop
 8005480:	40010000 	.word	0x40010000
 8005484:	48000400 	.word	0x48000400
 8005488:	48000800 	.word	0x48000800
 800548c:	58000800 	.word	0x58000800

08005490 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005490:	b480      	push	{r7}
 8005492:	b087      	sub	sp, #28
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800549a:	2300      	movs	r3, #0
 800549c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800549e:	e0af      	b.n	8005600 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80054a0:	2201      	movs	r2, #1
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	fa02 f303 	lsl.w	r3, r2, r3
 80054a8:	683a      	ldr	r2, [r7, #0]
 80054aa:	4013      	ands	r3, r2
 80054ac:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	f000 80a2 	beq.w	80055fa <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80054b6:	4a59      	ldr	r2, [pc, #356]	@ (800561c <HAL_GPIO_DeInit+0x18c>)
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	089b      	lsrs	r3, r3, #2
 80054bc:	3302      	adds	r3, #2
 80054be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054c2:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	f003 0303 	and.w	r3, r3, #3
 80054ca:	009b      	lsls	r3, r3, #2
 80054cc:	2207      	movs	r2, #7
 80054ce:	fa02 f303 	lsl.w	r3, r2, r3
 80054d2:	68fa      	ldr	r2, [r7, #12]
 80054d4:	4013      	ands	r3, r2
 80054d6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80054de:	d00d      	beq.n	80054fc <HAL_GPIO_DeInit+0x6c>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	4a4f      	ldr	r2, [pc, #316]	@ (8005620 <HAL_GPIO_DeInit+0x190>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d007      	beq.n	80054f8 <HAL_GPIO_DeInit+0x68>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4a4e      	ldr	r2, [pc, #312]	@ (8005624 <HAL_GPIO_DeInit+0x194>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d101      	bne.n	80054f4 <HAL_GPIO_DeInit+0x64>
 80054f0:	2302      	movs	r3, #2
 80054f2:	e004      	b.n	80054fe <HAL_GPIO_DeInit+0x6e>
 80054f4:	2307      	movs	r3, #7
 80054f6:	e002      	b.n	80054fe <HAL_GPIO_DeInit+0x6e>
 80054f8:	2301      	movs	r3, #1
 80054fa:	e000      	b.n	80054fe <HAL_GPIO_DeInit+0x6e>
 80054fc:	2300      	movs	r3, #0
 80054fe:	697a      	ldr	r2, [r7, #20]
 8005500:	f002 0203 	and.w	r2, r2, #3
 8005504:	0092      	lsls	r2, r2, #2
 8005506:	4093      	lsls	r3, r2
 8005508:	68fa      	ldr	r2, [r7, #12]
 800550a:	429a      	cmp	r2, r3
 800550c:	d136      	bne.n	800557c <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 800550e:	4b46      	ldr	r3, [pc, #280]	@ (8005628 <HAL_GPIO_DeInit+0x198>)
 8005510:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	43db      	mvns	r3, r3
 8005518:	4943      	ldr	r1, [pc, #268]	@ (8005628 <HAL_GPIO_DeInit+0x198>)
 800551a:	4013      	ands	r3, r2
 800551c:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8005520:	4b41      	ldr	r3, [pc, #260]	@ (8005628 <HAL_GPIO_DeInit+0x198>)
 8005522:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	43db      	mvns	r3, r3
 800552a:	493f      	ldr	r1, [pc, #252]	@ (8005628 <HAL_GPIO_DeInit+0x198>)
 800552c:	4013      	ands	r3, r2
 800552e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8005532:	4b3d      	ldr	r3, [pc, #244]	@ (8005628 <HAL_GPIO_DeInit+0x198>)
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	43db      	mvns	r3, r3
 800553a:	493b      	ldr	r1, [pc, #236]	@ (8005628 <HAL_GPIO_DeInit+0x198>)
 800553c:	4013      	ands	r3, r2
 800553e:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8005540:	4b39      	ldr	r3, [pc, #228]	@ (8005628 <HAL_GPIO_DeInit+0x198>)
 8005542:	685a      	ldr	r2, [r3, #4]
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	43db      	mvns	r3, r3
 8005548:	4937      	ldr	r1, [pc, #220]	@ (8005628 <HAL_GPIO_DeInit+0x198>)
 800554a:	4013      	ands	r3, r2
 800554c:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	f003 0303 	and.w	r3, r3, #3
 8005554:	009b      	lsls	r3, r3, #2
 8005556:	2207      	movs	r2, #7
 8005558:	fa02 f303 	lsl.w	r3, r2, r3
 800555c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800555e:	4a2f      	ldr	r2, [pc, #188]	@ (800561c <HAL_GPIO_DeInit+0x18c>)
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	089b      	lsrs	r3, r3, #2
 8005564:	3302      	adds	r3, #2
 8005566:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	43da      	mvns	r2, r3
 800556e:	482b      	ldr	r0, [pc, #172]	@ (800561c <HAL_GPIO_DeInit+0x18c>)
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	089b      	lsrs	r3, r3, #2
 8005574:	400a      	ands	r2, r1
 8005576:	3302      	adds	r3, #2
 8005578:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	005b      	lsls	r3, r3, #1
 8005584:	2103      	movs	r1, #3
 8005586:	fa01 f303 	lsl.w	r3, r1, r3
 800558a:	431a      	orrs	r2, r3
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	08da      	lsrs	r2, r3, #3
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	3208      	adds	r2, #8
 8005598:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	f003 0307 	and.w	r3, r3, #7
 80055a2:	009b      	lsls	r3, r3, #2
 80055a4:	220f      	movs	r2, #15
 80055a6:	fa02 f303 	lsl.w	r3, r2, r3
 80055aa:	43db      	mvns	r3, r3
 80055ac:	697a      	ldr	r2, [r7, #20]
 80055ae:	08d2      	lsrs	r2, r2, #3
 80055b0:	4019      	ands	r1, r3
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	3208      	adds	r2, #8
 80055b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	689a      	ldr	r2, [r3, #8]
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	005b      	lsls	r3, r3, #1
 80055c2:	2103      	movs	r1, #3
 80055c4:	fa01 f303 	lsl.w	r3, r1, r3
 80055c8:	43db      	mvns	r3, r3
 80055ca:	401a      	ands	r2, r3
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	685a      	ldr	r2, [r3, #4]
 80055d4:	2101      	movs	r1, #1
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	fa01 f303 	lsl.w	r3, r1, r3
 80055dc:	43db      	mvns	r3, r3
 80055de:	401a      	ands	r2, r3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	68da      	ldr	r2, [r3, #12]
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	005b      	lsls	r3, r3, #1
 80055ec:	2103      	movs	r1, #3
 80055ee:	fa01 f303 	lsl.w	r3, r1, r3
 80055f2:	43db      	mvns	r3, r3
 80055f4:	401a      	ands	r2, r3
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	60da      	str	r2, [r3, #12]
    }

    position++;
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	3301      	adds	r3, #1
 80055fe:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8005600:	683a      	ldr	r2, [r7, #0]
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	fa22 f303 	lsr.w	r3, r2, r3
 8005608:	2b00      	cmp	r3, #0
 800560a:	f47f af49 	bne.w	80054a0 <HAL_GPIO_DeInit+0x10>
  }
}
 800560e:	bf00      	nop
 8005610:	bf00      	nop
 8005612:	371c      	adds	r7, #28
 8005614:	46bd      	mov	sp, r7
 8005616:	bc80      	pop	{r7}
 8005618:	4770      	bx	lr
 800561a:	bf00      	nop
 800561c:	40010000 	.word	0x40010000
 8005620:	48000400 	.word	0x48000400
 8005624:	48000800 	.word	0x48000800
 8005628:	58000800 	.word	0x58000800

0800562c <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800562c:	b480      	push	{r7}
 800562e:	b085      	sub	sp, #20
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	460b      	mov	r3, r1
 8005636:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	691a      	ldr	r2, [r3, #16]
 800563c:	887b      	ldrh	r3, [r7, #2]
 800563e:	4013      	ands	r3, r2
 8005640:	2b00      	cmp	r3, #0
 8005642:	d002      	beq.n	800564a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005644:	2301      	movs	r3, #1
 8005646:	73fb      	strb	r3, [r7, #15]
 8005648:	e001      	b.n	800564e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800564a:	2300      	movs	r3, #0
 800564c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800564e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005650:	4618      	mov	r0, r3
 8005652:	3714      	adds	r7, #20
 8005654:	46bd      	mov	sp, r7
 8005656:	bc80      	pop	{r7}
 8005658:	4770      	bx	lr

0800565a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800565a:	b480      	push	{r7}
 800565c:	b083      	sub	sp, #12
 800565e:	af00      	add	r7, sp, #0
 8005660:	6078      	str	r0, [r7, #4]
 8005662:	460b      	mov	r3, r1
 8005664:	807b      	strh	r3, [r7, #2]
 8005666:	4613      	mov	r3, r2
 8005668:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800566a:	787b      	ldrb	r3, [r7, #1]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d003      	beq.n	8005678 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005670:	887a      	ldrh	r2, [r7, #2]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005676:	e002      	b.n	800567e <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005678:	887a      	ldrh	r2, [r7, #2]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800567e:	bf00      	nop
 8005680:	370c      	adds	r7, #12
 8005682:	46bd      	mov	sp, r7
 8005684:	bc80      	pop	{r7}
 8005686:	4770      	bx	lr

08005688 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b082      	sub	sp, #8
 800568c:	af00      	add	r7, sp, #0
 800568e:	4603      	mov	r3, r0
 8005690:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005692:	4b08      	ldr	r3, [pc, #32]	@ (80056b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005694:	68da      	ldr	r2, [r3, #12]
 8005696:	88fb      	ldrh	r3, [r7, #6]
 8005698:	4013      	ands	r3, r2
 800569a:	2b00      	cmp	r3, #0
 800569c:	d006      	beq.n	80056ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800569e:	4a05      	ldr	r2, [pc, #20]	@ (80056b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80056a0:	88fb      	ldrh	r3, [r7, #6]
 80056a2:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80056a4:	88fb      	ldrh	r3, [r7, #6]
 80056a6:	4618      	mov	r0, r3
 80056a8:	f004 fed0 	bl	800a44c <HAL_GPIO_EXTI_Callback>
  }
}
 80056ac:	bf00      	nop
 80056ae:	3708      	adds	r7, #8
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}
 80056b4:	58000800 	.word	0x58000800

080056b8 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80056b8:	b480      	push	{r7}
 80056ba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80056bc:	4b04      	ldr	r3, [pc, #16]	@ (80056d0 <HAL_PWR_EnableBkUpAccess+0x18>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a03      	ldr	r2, [pc, #12]	@ (80056d0 <HAL_PWR_EnableBkUpAccess+0x18>)
 80056c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056c6:	6013      	str	r3, [r2, #0]
}
 80056c8:	bf00      	nop
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bc80      	pop	{r7}
 80056ce:	4770      	bx	lr
 80056d0:	58000400 	.word	0x58000400

080056d4 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b082      	sub	sp, #8
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	460b      	mov	r3, r1
 80056de:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d10c      	bne.n	8005700 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 80056e6:	4b13      	ldr	r3, [pc, #76]	@ (8005734 <HAL_PWR_EnterSLEEPMode+0x60>)
 80056e8:	695b      	ldr	r3, [r3, #20]
 80056ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80056ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80056f2:	d10d      	bne.n	8005710 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 80056f4:	f000 f83c 	bl	8005770 <HAL_PWREx_DisableLowPowerRunMode>
 80056f8:	4603      	mov	r3, r0
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d008      	beq.n	8005710 <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 80056fe:	e015      	b.n	800572c <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8005700:	4b0c      	ldr	r3, [pc, #48]	@ (8005734 <HAL_PWR_EnterSLEEPMode+0x60>)
 8005702:	695b      	ldr	r3, [r3, #20]
 8005704:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005708:	2b00      	cmp	r3, #0
 800570a:	d101      	bne.n	8005710 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 800570c:	f000 f822 	bl	8005754 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005710:	4b09      	ldr	r3, [pc, #36]	@ (8005738 <HAL_PWR_EnterSLEEPMode+0x64>)
 8005712:	691b      	ldr	r3, [r3, #16]
 8005714:	4a08      	ldr	r2, [pc, #32]	@ (8005738 <HAL_PWR_EnterSLEEPMode+0x64>)
 8005716:	f023 0304 	bic.w	r3, r3, #4
 800571a:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 800571c:	78fb      	ldrb	r3, [r7, #3]
 800571e:	2b01      	cmp	r3, #1
 8005720:	d101      	bne.n	8005726 <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8005722:	bf30      	wfi
 8005724:	e002      	b.n	800572c <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8005726:	bf40      	sev
    __WFE();
 8005728:	bf20      	wfe
    __WFE();
 800572a:	bf20      	wfe
  }
}
 800572c:	3708      	adds	r7, #8
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
 8005732:	bf00      	nop
 8005734:	58000400 	.word	0x58000400
 8005738:	e000ed00 	.word	0xe000ed00

0800573c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800573c:	b480      	push	{r7}
 800573e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8005740:	4b03      	ldr	r3, [pc, #12]	@ (8005750 <HAL_PWREx_GetVoltageRange+0x14>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8005748:	4618      	mov	r0, r3
 800574a:	46bd      	mov	sp, r7
 800574c:	bc80      	pop	{r7}
 800574e:	4770      	bx	lr
 8005750:	58000400 	.word	0x58000400

08005754 <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8005754:	b480      	push	{r7}
 8005756:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8005758:	4b04      	ldr	r3, [pc, #16]	@ (800576c <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a03      	ldr	r2, [pc, #12]	@ (800576c <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 800575e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005762:	6013      	str	r3, [r2, #0]
}
 8005764:	bf00      	nop
 8005766:	46bd      	mov	sp, r7
 8005768:	bc80      	pop	{r7}
 800576a:	4770      	bx	lr
 800576c:	58000400 	.word	0x58000400

08005770 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8005770:	b480      	push	{r7}
 8005772:	b083      	sub	sp, #12
 8005774:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8005776:	4b16      	ldr	r3, [pc, #88]	@ (80057d0 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a15      	ldr	r2, [pc, #84]	@ (80057d0 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 800577c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005780:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8005782:	4b14      	ldr	r3, [pc, #80]	@ (80057d4 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	2232      	movs	r2, #50	@ 0x32
 8005788:	fb02 f303 	mul.w	r3, r2, r3
 800578c:	4a12      	ldr	r2, [pc, #72]	@ (80057d8 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 800578e:	fba2 2303 	umull	r2, r3, r2, r3
 8005792:	0c9b      	lsrs	r3, r3, #18
 8005794:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8005796:	e002      	b.n	800579e <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	3b01      	subs	r3, #1
 800579c:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800579e:	4b0c      	ldr	r3, [pc, #48]	@ (80057d0 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80057a0:	695b      	ldr	r3, [r3, #20]
 80057a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80057a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80057aa:	d102      	bne.n	80057b2 <HAL_PWREx_DisableLowPowerRunMode+0x42>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d1f2      	bne.n	8005798 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 80057b2:	4b07      	ldr	r3, [pc, #28]	@ (80057d0 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80057b4:	695b      	ldr	r3, [r3, #20]
 80057b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80057ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80057be:	d101      	bne.n	80057c4 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 80057c0:	2303      	movs	r3, #3
 80057c2:	e000      	b.n	80057c6 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 80057c4:	2300      	movs	r3, #0
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	370c      	adds	r7, #12
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bc80      	pop	{r7}
 80057ce:	4770      	bx	lr
 80057d0:	58000400 	.word	0x58000400
 80057d4:	20000000 	.word	0x20000000
 80057d8:	431bde83 	.word	0x431bde83

080057dc <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 80057dc:	b480      	push	{r7}
 80057de:	b083      	sub	sp, #12
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	4603      	mov	r3, r0
 80057e4:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 80057e6:	4b10      	ldr	r3, [pc, #64]	@ (8005828 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f023 0307 	bic.w	r3, r3, #7
 80057ee:	4a0e      	ldr	r2, [pc, #56]	@ (8005828 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 80057f0:	f043 0302 	orr.w	r3, r3, #2
 80057f4:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80057f6:	4b0d      	ldr	r3, [pc, #52]	@ (800582c <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80057f8:	691b      	ldr	r3, [r3, #16]
 80057fa:	4a0c      	ldr	r2, [pc, #48]	@ (800582c <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80057fc:	f043 0304 	orr.w	r3, r3, #4
 8005800:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8005802:	79fb      	ldrb	r3, [r7, #7]
 8005804:	2b01      	cmp	r3, #1
 8005806:	d101      	bne.n	800580c <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8005808:	bf30      	wfi
 800580a:	e002      	b.n	8005812 <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800580c:	bf40      	sev
    __WFE();
 800580e:	bf20      	wfe
    __WFE();
 8005810:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005812:	4b06      	ldr	r3, [pc, #24]	@ (800582c <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8005814:	691b      	ldr	r3, [r3, #16]
 8005816:	4a05      	ldr	r2, [pc, #20]	@ (800582c <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8005818:	f023 0304 	bic.w	r3, r3, #4
 800581c:	6113      	str	r3, [r2, #16]
}
 800581e:	bf00      	nop
 8005820:	370c      	adds	r7, #12
 8005822:	46bd      	mov	sp, r7
 8005824:	bc80      	pop	{r7}
 8005826:	4770      	bx	lr
 8005828:	58000400 	.word	0x58000400
 800582c:	e000ed00 	.word	0xe000ed00

08005830 <LL_PWR_IsEnabledBkUpAccess>:
{
 8005830:	b480      	push	{r7}
 8005832:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8005834:	4b06      	ldr	r3, [pc, #24]	@ (8005850 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800583c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005840:	d101      	bne.n	8005846 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8005842:	2301      	movs	r3, #1
 8005844:	e000      	b.n	8005848 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8005846:	2300      	movs	r3, #0
}
 8005848:	4618      	mov	r0, r3
 800584a:	46bd      	mov	sp, r7
 800584c:	bc80      	pop	{r7}
 800584e:	4770      	bx	lr
 8005850:	58000400 	.word	0x58000400

08005854 <LL_RCC_HSE_EnableTcxo>:
{
 8005854:	b480      	push	{r7}
 8005856:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8005858:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005862:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005866:	6013      	str	r3, [r2, #0]
}
 8005868:	bf00      	nop
 800586a:	46bd      	mov	sp, r7
 800586c:	bc80      	pop	{r7}
 800586e:	4770      	bx	lr

08005870 <LL_RCC_HSE_DisableTcxo>:
{
 8005870:	b480      	push	{r7}
 8005872:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8005874:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800587e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005882:	6013      	str	r3, [r2, #0]
}
 8005884:	bf00      	nop
 8005886:	46bd      	mov	sp, r7
 8005888:	bc80      	pop	{r7}
 800588a:	4770      	bx	lr

0800588c <LL_RCC_HSE_IsEnabledDiv2>:
{
 800588c:	b480      	push	{r7}
 800588e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8005890:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800589a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800589e:	d101      	bne.n	80058a4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80058a0:	2301      	movs	r3, #1
 80058a2:	e000      	b.n	80058a6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80058a4:	2300      	movs	r3, #0
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bc80      	pop	{r7}
 80058ac:	4770      	bx	lr

080058ae <LL_RCC_HSE_Enable>:
{
 80058ae:	b480      	push	{r7}
 80058b0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80058b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80058bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058c0:	6013      	str	r3, [r2, #0]
}
 80058c2:	bf00      	nop
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bc80      	pop	{r7}
 80058c8:	4770      	bx	lr

080058ca <LL_RCC_HSE_Disable>:
{
 80058ca:	b480      	push	{r7}
 80058cc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80058ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80058d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80058dc:	6013      	str	r3, [r2, #0]
}
 80058de:	bf00      	nop
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bc80      	pop	{r7}
 80058e4:	4770      	bx	lr

080058e6 <LL_RCC_HSE_IsReady>:
{
 80058e6:	b480      	push	{r7}
 80058e8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80058ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80058f8:	d101      	bne.n	80058fe <LL_RCC_HSE_IsReady+0x18>
 80058fa:	2301      	movs	r3, #1
 80058fc:	e000      	b.n	8005900 <LL_RCC_HSE_IsReady+0x1a>
 80058fe:	2300      	movs	r3, #0
}
 8005900:	4618      	mov	r0, r3
 8005902:	46bd      	mov	sp, r7
 8005904:	bc80      	pop	{r7}
 8005906:	4770      	bx	lr

08005908 <LL_RCC_HSI_Enable>:
{
 8005908:	b480      	push	{r7}
 800590a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800590c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005916:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800591a:	6013      	str	r3, [r2, #0]
}
 800591c:	bf00      	nop
 800591e:	46bd      	mov	sp, r7
 8005920:	bc80      	pop	{r7}
 8005922:	4770      	bx	lr

08005924 <LL_RCC_HSI_Disable>:
{
 8005924:	b480      	push	{r7}
 8005926:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8005928:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005932:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005936:	6013      	str	r3, [r2, #0]
}
 8005938:	bf00      	nop
 800593a:	46bd      	mov	sp, r7
 800593c:	bc80      	pop	{r7}
 800593e:	4770      	bx	lr

08005940 <LL_RCC_HSI_IsReady>:
{
 8005940:	b480      	push	{r7}
 8005942:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005944:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800594e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005952:	d101      	bne.n	8005958 <LL_RCC_HSI_IsReady+0x18>
 8005954:	2301      	movs	r3, #1
 8005956:	e000      	b.n	800595a <LL_RCC_HSI_IsReady+0x1a>
 8005958:	2300      	movs	r3, #0
}
 800595a:	4618      	mov	r0, r3
 800595c:	46bd      	mov	sp, r7
 800595e:	bc80      	pop	{r7}
 8005960:	4770      	bx	lr

08005962 <LL_RCC_HSI_SetCalibTrimming>:
{
 8005962:	b480      	push	{r7}
 8005964:	b083      	sub	sp, #12
 8005966:	af00      	add	r7, sp, #0
 8005968:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800596a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	061b      	lsls	r3, r3, #24
 8005978:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800597c:	4313      	orrs	r3, r2
 800597e:	604b      	str	r3, [r1, #4]
}
 8005980:	bf00      	nop
 8005982:	370c      	adds	r7, #12
 8005984:	46bd      	mov	sp, r7
 8005986:	bc80      	pop	{r7}
 8005988:	4770      	bx	lr

0800598a <LL_RCC_LSE_IsReady>:
{
 800598a:	b480      	push	{r7}
 800598c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800598e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005992:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005996:	f003 0302 	and.w	r3, r3, #2
 800599a:	2b02      	cmp	r3, #2
 800599c:	d101      	bne.n	80059a2 <LL_RCC_LSE_IsReady+0x18>
 800599e:	2301      	movs	r3, #1
 80059a0:	e000      	b.n	80059a4 <LL_RCC_LSE_IsReady+0x1a>
 80059a2:	2300      	movs	r3, #0
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bc80      	pop	{r7}
 80059aa:	4770      	bx	lr

080059ac <LL_RCC_LSI_Enable>:
{
 80059ac:	b480      	push	{r7}
 80059ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80059b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059b8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80059bc:	f043 0301 	orr.w	r3, r3, #1
 80059c0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80059c4:	bf00      	nop
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bc80      	pop	{r7}
 80059ca:	4770      	bx	lr

080059cc <LL_RCC_LSI_Disable>:
{
 80059cc:	b480      	push	{r7}
 80059ce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80059d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059d8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80059dc:	f023 0301 	bic.w	r3, r3, #1
 80059e0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80059e4:	bf00      	nop
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bc80      	pop	{r7}
 80059ea:	4770      	bx	lr

080059ec <LL_RCC_LSI_IsReady>:
{
 80059ec:	b480      	push	{r7}
 80059ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80059f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059f8:	f003 0302 	and.w	r3, r3, #2
 80059fc:	2b02      	cmp	r3, #2
 80059fe:	d101      	bne.n	8005a04 <LL_RCC_LSI_IsReady+0x18>
 8005a00:	2301      	movs	r3, #1
 8005a02:	e000      	b.n	8005a06 <LL_RCC_LSI_IsReady+0x1a>
 8005a04:	2300      	movs	r3, #0
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bc80      	pop	{r7}
 8005a0c:	4770      	bx	lr

08005a0e <LL_RCC_MSI_Enable>:
{
 8005a0e:	b480      	push	{r7}
 8005a10:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8005a12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005a1c:	f043 0301 	orr.w	r3, r3, #1
 8005a20:	6013      	str	r3, [r2, #0]
}
 8005a22:	bf00      	nop
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bc80      	pop	{r7}
 8005a28:	4770      	bx	lr

08005a2a <LL_RCC_MSI_Disable>:
{
 8005a2a:	b480      	push	{r7}
 8005a2c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8005a2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005a38:	f023 0301 	bic.w	r3, r3, #1
 8005a3c:	6013      	str	r3, [r2, #0]
}
 8005a3e:	bf00      	nop
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bc80      	pop	{r7}
 8005a44:	4770      	bx	lr

08005a46 <LL_RCC_MSI_IsReady>:
{
 8005a46:	b480      	push	{r7}
 8005a48:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005a4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 0302 	and.w	r3, r3, #2
 8005a54:	2b02      	cmp	r3, #2
 8005a56:	d101      	bne.n	8005a5c <LL_RCC_MSI_IsReady+0x16>
 8005a58:	2301      	movs	r3, #1
 8005a5a:	e000      	b.n	8005a5e <LL_RCC_MSI_IsReady+0x18>
 8005a5c:	2300      	movs	r3, #0
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bc80      	pop	{r7}
 8005a64:	4770      	bx	lr

08005a66 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8005a66:	b480      	push	{r7}
 8005a68:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8005a6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f003 0308 	and.w	r3, r3, #8
 8005a74:	2b08      	cmp	r3, #8
 8005a76:	d101      	bne.n	8005a7c <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8005a78:	2301      	movs	r3, #1
 8005a7a:	e000      	b.n	8005a7e <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8005a7c:	2300      	movs	r3, #0
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bc80      	pop	{r7}
 8005a84:	4770      	bx	lr

08005a86 <LL_RCC_MSI_GetRange>:
{
 8005a86:	b480      	push	{r7}
 8005a88:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8005a8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bc80      	pop	{r7}
 8005a9a:	4770      	bx	lr

08005a9c <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8005aa0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005aa4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005aa8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bc80      	pop	{r7}
 8005ab2:	4770      	bx	lr

08005ab4 <LL_RCC_MSI_SetCalibTrimming>:
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b083      	sub	sp, #12
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005abc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	021b      	lsls	r3, r3, #8
 8005aca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	604b      	str	r3, [r1, #4]
}
 8005ad2:	bf00      	nop
 8005ad4:	370c      	adds	r7, #12
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bc80      	pop	{r7}
 8005ada:	4770      	bx	lr

08005adc <LL_RCC_SetSysClkSource>:
{
 8005adc:	b480      	push	{r7}
 8005ade:	b083      	sub	sp, #12
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005ae4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	f023 0203 	bic.w	r2, r3, #3
 8005aee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	4313      	orrs	r3, r2
 8005af6:	608b      	str	r3, [r1, #8]
}
 8005af8:	bf00      	nop
 8005afa:	370c      	adds	r7, #12
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bc80      	pop	{r7}
 8005b00:	4770      	bx	lr

08005b02 <LL_RCC_GetSysClkSource>:
{
 8005b02:	b480      	push	{r7}
 8005b04:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005b06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	f003 030c 	and.w	r3, r3, #12
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bc80      	pop	{r7}
 8005b16:	4770      	bx	lr

08005b18 <LL_RCC_SetAHBPrescaler>:
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8005b20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005b2a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4313      	orrs	r3, r2
 8005b32:	608b      	str	r3, [r1, #8]
}
 8005b34:	bf00      	nop
 8005b36:	370c      	adds	r7, #12
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bc80      	pop	{r7}
 8005b3c:	4770      	bx	lr

08005b3e <LL_RCC_SetAHB3Prescaler>:
{
 8005b3e:	b480      	push	{r7}
 8005b40:	b083      	sub	sp, #12
 8005b42:	af00      	add	r7, sp, #0
 8005b44:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8005b46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b4a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005b4e:	f023 020f 	bic.w	r2, r3, #15
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	091b      	lsrs	r3, r3, #4
 8005b56:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8005b60:	bf00      	nop
 8005b62:	370c      	adds	r7, #12
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bc80      	pop	{r7}
 8005b68:	4770      	bx	lr

08005b6a <LL_RCC_SetAPB1Prescaler>:
{
 8005b6a:	b480      	push	{r7}
 8005b6c:	b083      	sub	sp, #12
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005b72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005b7c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	4313      	orrs	r3, r2
 8005b84:	608b      	str	r3, [r1, #8]
}
 8005b86:	bf00      	nop
 8005b88:	370c      	adds	r7, #12
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bc80      	pop	{r7}
 8005b8e:	4770      	bx	lr

08005b90 <LL_RCC_SetAPB2Prescaler>:
{
 8005b90:	b480      	push	{r7}
 8005b92:	b083      	sub	sp, #12
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005b98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005ba2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	608b      	str	r3, [r1, #8]
}
 8005bac:	bf00      	nop
 8005bae:	370c      	adds	r7, #12
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bc80      	pop	{r7}
 8005bb4:	4770      	bx	lr

08005bb6 <LL_RCC_GetAHBPrescaler>:
{
 8005bb6:	b480      	push	{r7}
 8005bb8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005bba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bc80      	pop	{r7}
 8005bca:	4770      	bx	lr

08005bcc <LL_RCC_GetAHB3Prescaler>:
{
 8005bcc:	b480      	push	{r7}
 8005bce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005bd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bd4:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005bd8:	011b      	lsls	r3, r3, #4
 8005bda:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bc80      	pop	{r7}
 8005be4:	4770      	bx	lr

08005be6 <LL_RCC_GetAPB1Prescaler>:
{
 8005be6:	b480      	push	{r7}
 8005be8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005bea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bc80      	pop	{r7}
 8005bfa:	4770      	bx	lr

08005bfc <LL_RCC_GetAPB2Prescaler>:
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005c00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c04:	689b      	ldr	r3, [r3, #8]
 8005c06:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bc80      	pop	{r7}
 8005c10:	4770      	bx	lr

08005c12 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8005c12:	b480      	push	{r7}
 8005c14:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005c16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005c20:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005c24:	6013      	str	r3, [r2, #0]
}
 8005c26:	bf00      	nop
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bc80      	pop	{r7}
 8005c2c:	4770      	bx	lr

08005c2e <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8005c2e:	b480      	push	{r7}
 8005c30:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005c32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005c3c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005c40:	6013      	str	r3, [r2, #0]
}
 8005c42:	bf00      	nop
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bc80      	pop	{r7}
 8005c48:	4770      	bx	lr

08005c4a <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8005c4a:	b480      	push	{r7}
 8005c4c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005c4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c58:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005c5c:	d101      	bne.n	8005c62 <LL_RCC_PLL_IsReady+0x18>
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e000      	b.n	8005c64 <LL_RCC_PLL_IsReady+0x1a>
 8005c62:	2300      	movs	r3, #0
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bc80      	pop	{r7}
 8005c6a:	4770      	bx	lr

08005c6c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005c70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c74:	68db      	ldr	r3, [r3, #12]
 8005c76:	0a1b      	lsrs	r3, r3, #8
 8005c78:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bc80      	pop	{r7}
 8005c82:	4770      	bx	lr

08005c84 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8005c84:	b480      	push	{r7}
 8005c86:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005c88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c8c:	68db      	ldr	r3, [r3, #12]
 8005c8e:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bc80      	pop	{r7}
 8005c98:	4770      	bx	lr

08005c9a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005c9a:	b480      	push	{r7}
 8005c9c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005c9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ca2:	68db      	ldr	r3, [r3, #12]
 8005ca4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bc80      	pop	{r7}
 8005cae:	4770      	bx	lr

08005cb0 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005cb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005cb8:	68db      	ldr	r3, [r3, #12]
 8005cba:	f003 0303 	and.w	r3, r3, #3
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bc80      	pop	{r7}
 8005cc4:	4770      	bx	lr

08005cc6 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8005cc6:	b480      	push	{r7}
 8005cc8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8005cca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005cd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005cd8:	d101      	bne.n	8005cde <LL_RCC_IsActiveFlag_HPRE+0x18>
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e000      	b.n	8005ce0 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8005cde:	2300      	movs	r3, #0
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bc80      	pop	{r7}
 8005ce6:	4770      	bx	lr

08005ce8 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005cec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005cf0:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005cf4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005cf8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005cfc:	d101      	bne.n	8005d02 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8005cfe:	2301      	movs	r3, #1
 8005d00:	e000      	b.n	8005d04 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8005d02:	2300      	movs	r3, #0
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bc80      	pop	{r7}
 8005d0a:	4770      	bx	lr

08005d0c <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005d10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d1a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005d1e:	d101      	bne.n	8005d24 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8005d20:	2301      	movs	r3, #1
 8005d22:	e000      	b.n	8005d26 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8005d24:	2300      	movs	r3, #0
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bc80      	pop	{r7}
 8005d2c:	4770      	bx	lr

08005d2e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8005d2e:	b480      	push	{r7}
 8005d30:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8005d32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005d3c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005d40:	d101      	bne.n	8005d46 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8005d42:	2301      	movs	r3, #1
 8005d44:	e000      	b.n	8005d48 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8005d46:	2300      	movs	r3, #0
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bc80      	pop	{r7}
 8005d4e:	4770      	bx	lr

08005d50 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b088      	sub	sp, #32
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d101      	bne.n	8005d62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e38b      	b.n	800647a <HAL_RCC_OscConfig+0x72a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d62:	f7ff fece 	bl	8005b02 <LL_RCC_GetSysClkSource>
 8005d66:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005d68:	f7ff ffa2 	bl	8005cb0 <LL_RCC_PLL_GetMainSource>
 8005d6c:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f003 0320 	and.w	r3, r3, #32
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	f000 80c9 	beq.w	8005f0e <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005d7c:	69fb      	ldr	r3, [r7, #28]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d005      	beq.n	8005d8e <HAL_RCC_OscConfig+0x3e>
 8005d82:	69fb      	ldr	r3, [r7, #28]
 8005d84:	2b0c      	cmp	r3, #12
 8005d86:	d17b      	bne.n	8005e80 <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005d88:	69bb      	ldr	r3, [r7, #24]
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	d178      	bne.n	8005e80 <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005d8e:	f7ff fe5a 	bl	8005a46 <LL_RCC_MSI_IsReady>
 8005d92:	4603      	mov	r3, r0
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d005      	beq.n	8005da4 <HAL_RCC_OscConfig+0x54>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6a1b      	ldr	r3, [r3, #32]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d101      	bne.n	8005da4 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8005da0:	2301      	movs	r3, #1
 8005da2:	e36a      	b.n	800647a <HAL_RCC_OscConfig+0x72a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005da8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f003 0308 	and.w	r3, r3, #8
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d005      	beq.n	8005dc2 <HAL_RCC_OscConfig+0x72>
 8005db6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005dc0:	e006      	b.n	8005dd0 <HAL_RCC_OscConfig+0x80>
 8005dc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005dc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005dca:	091b      	lsrs	r3, r3, #4
 8005dcc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d222      	bcs.n	8005e1a <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f000 fd51 	bl	8006880 <RCC_SetFlashLatencyFromMSIRange>
 8005dde:	4603      	mov	r3, r0
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d001      	beq.n	8005de8 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	e348      	b.n	800647a <HAL_RCC_OscConfig+0x72a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005de8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005df2:	f043 0308 	orr.w	r3, r3, #8
 8005df6:	6013      	str	r3, [r2, #0]
 8005df8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e06:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e12:	4618      	mov	r0, r3
 8005e14:	f7ff fe4e 	bl	8005ab4 <LL_RCC_MSI_SetCalibTrimming>
 8005e18:	e021      	b.n	8005e5e <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005e1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005e24:	f043 0308 	orr.w	r3, r3, #8
 8005e28:	6013      	str	r3, [r2, #0]
 8005e2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e38:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e44:	4618      	mov	r0, r3
 8005e46:	f7ff fe35 	bl	8005ab4 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f000 fd16 	bl	8006880 <RCC_SetFlashLatencyFromMSIRange>
 8005e54:	4603      	mov	r3, r0
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d001      	beq.n	8005e5e <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	e30d      	b.n	800647a <HAL_RCC_OscConfig+0x72a>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005e5e:	f000 fcd7 	bl	8006810 <HAL_RCC_GetHCLKFreq>
 8005e62:	4603      	mov	r3, r0
 8005e64:	4aa1      	ldr	r2, [pc, #644]	@ (80060ec <HAL_RCC_OscConfig+0x39c>)
 8005e66:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005e68:	4ba1      	ldr	r3, [pc, #644]	@ (80060f0 <HAL_RCC_OscConfig+0x3a0>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f7fc f99f 	bl	80021b0 <HAL_InitTick>
 8005e72:	4603      	mov	r3, r0
 8005e74:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8005e76:	7cfb      	ldrb	r3, [r7, #19]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d047      	beq.n	8005f0c <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 8005e7c:	7cfb      	ldrb	r3, [r7, #19]
 8005e7e:	e2fc      	b.n	800647a <HAL_RCC_OscConfig+0x72a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6a1b      	ldr	r3, [r3, #32]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d02c      	beq.n	8005ee2 <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005e88:	f7ff fdc1 	bl	8005a0e <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005e8c:	f7fc f99a 	bl	80021c4 <HAL_GetTick>
 8005e90:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8005e92:	e008      	b.n	8005ea6 <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005e94:	f7fc f996 	bl	80021c4 <HAL_GetTick>
 8005e98:	4602      	mov	r2, r0
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	1ad3      	subs	r3, r2, r3
 8005e9e:	2b02      	cmp	r3, #2
 8005ea0:	d901      	bls.n	8005ea6 <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 8005ea2:	2303      	movs	r3, #3
 8005ea4:	e2e9      	b.n	800647a <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() == 0U)
 8005ea6:	f7ff fdce 	bl	8005a46 <LL_RCC_MSI_IsReady>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d0f1      	beq.n	8005e94 <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005eb0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005eba:	f043 0308 	orr.w	r3, r3, #8
 8005ebe:	6013      	str	r3, [r2, #0]
 8005ec0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ece:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eda:	4618      	mov	r0, r3
 8005edc:	f7ff fdea 	bl	8005ab4 <LL_RCC_MSI_SetCalibTrimming>
 8005ee0:	e015      	b.n	8005f0e <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005ee2:	f7ff fda2 	bl	8005a2a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005ee6:	f7fc f96d 	bl	80021c4 <HAL_GetTick>
 8005eea:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8005eec:	e008      	b.n	8005f00 <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005eee:	f7fc f969 	bl	80021c4 <HAL_GetTick>
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	1ad3      	subs	r3, r2, r3
 8005ef8:	2b02      	cmp	r3, #2
 8005efa:	d901      	bls.n	8005f00 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8005efc:	2303      	movs	r3, #3
 8005efe:	e2bc      	b.n	800647a <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() != 0U)
 8005f00:	f7ff fda1 	bl	8005a46 <LL_RCC_MSI_IsReady>
 8005f04:	4603      	mov	r3, r0
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d1f1      	bne.n	8005eee <HAL_RCC_OscConfig+0x19e>
 8005f0a:	e000      	b.n	8005f0e <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005f0c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f003 0301 	and.w	r3, r3, #1
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d05f      	beq.n	8005fda <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005f1a:	69fb      	ldr	r3, [r7, #28]
 8005f1c:	2b08      	cmp	r3, #8
 8005f1e:	d005      	beq.n	8005f2c <HAL_RCC_OscConfig+0x1dc>
 8005f20:	69fb      	ldr	r3, [r7, #28]
 8005f22:	2b0c      	cmp	r3, #12
 8005f24:	d10d      	bne.n	8005f42 <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005f26:	69bb      	ldr	r3, [r7, #24]
 8005f28:	2b03      	cmp	r3, #3
 8005f2a:	d10a      	bne.n	8005f42 <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f2c:	f7ff fcdb 	bl	80058e6 <LL_RCC_HSE_IsReady>
 8005f30:	4603      	mov	r3, r0
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d050      	beq.n	8005fd8 <HAL_RCC_OscConfig+0x288>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d14c      	bne.n	8005fd8 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e29b      	b.n	800647a <HAL_RCC_OscConfig+0x72a>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8005f42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005f54:	4313      	orrs	r3, r2
 8005f56:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f60:	d102      	bne.n	8005f68 <HAL_RCC_OscConfig+0x218>
 8005f62:	f7ff fca4 	bl	80058ae <LL_RCC_HSE_Enable>
 8005f66:	e00d      	b.n	8005f84 <HAL_RCC_OscConfig+0x234>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8005f70:	d104      	bne.n	8005f7c <HAL_RCC_OscConfig+0x22c>
 8005f72:	f7ff fc6f 	bl	8005854 <LL_RCC_HSE_EnableTcxo>
 8005f76:	f7ff fc9a 	bl	80058ae <LL_RCC_HSE_Enable>
 8005f7a:	e003      	b.n	8005f84 <HAL_RCC_OscConfig+0x234>
 8005f7c:	f7ff fca5 	bl	80058ca <LL_RCC_HSE_Disable>
 8005f80:	f7ff fc76 	bl	8005870 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d012      	beq.n	8005fb2 <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f8c:	f7fc f91a 	bl	80021c4 <HAL_GetTick>
 8005f90:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8005f92:	e008      	b.n	8005fa6 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f94:	f7fc f916 	bl	80021c4 <HAL_GetTick>
 8005f98:	4602      	mov	r2, r0
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	1ad3      	subs	r3, r2, r3
 8005f9e:	2b64      	cmp	r3, #100	@ 0x64
 8005fa0:	d901      	bls.n	8005fa6 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8005fa2:	2303      	movs	r3, #3
 8005fa4:	e269      	b.n	800647a <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() == 0U)
 8005fa6:	f7ff fc9e 	bl	80058e6 <LL_RCC_HSE_IsReady>
 8005faa:	4603      	mov	r3, r0
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d0f1      	beq.n	8005f94 <HAL_RCC_OscConfig+0x244>
 8005fb0:	e013      	b.n	8005fda <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fb2:	f7fc f907 	bl	80021c4 <HAL_GetTick>
 8005fb6:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8005fb8:	e008      	b.n	8005fcc <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005fba:	f7fc f903 	bl	80021c4 <HAL_GetTick>
 8005fbe:	4602      	mov	r2, r0
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	1ad3      	subs	r3, r2, r3
 8005fc4:	2b64      	cmp	r3, #100	@ 0x64
 8005fc6:	d901      	bls.n	8005fcc <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 8005fc8:	2303      	movs	r3, #3
 8005fca:	e256      	b.n	800647a <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005fcc:	f7ff fc8b 	bl	80058e6 <LL_RCC_HSE_IsReady>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d1f1      	bne.n	8005fba <HAL_RCC_OscConfig+0x26a>
 8005fd6:	e000      	b.n	8005fda <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fd8:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f003 0302 	and.w	r3, r3, #2
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d04b      	beq.n	800607e <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005fe6:	69fb      	ldr	r3, [r7, #28]
 8005fe8:	2b04      	cmp	r3, #4
 8005fea:	d005      	beq.n	8005ff8 <HAL_RCC_OscConfig+0x2a8>
 8005fec:	69fb      	ldr	r3, [r7, #28]
 8005fee:	2b0c      	cmp	r3, #12
 8005ff0:	d113      	bne.n	800601a <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005ff2:	69bb      	ldr	r3, [r7, #24]
 8005ff4:	2b02      	cmp	r3, #2
 8005ff6:	d110      	bne.n	800601a <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ff8:	f7ff fca2 	bl	8005940 <LL_RCC_HSI_IsReady>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d005      	beq.n	800600e <HAL_RCC_OscConfig+0x2be>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	691b      	ldr	r3, [r3, #16]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d101      	bne.n	800600e <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 800600a:	2301      	movs	r3, #1
 800600c:	e235      	b.n	800647a <HAL_RCC_OscConfig+0x72a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	695b      	ldr	r3, [r3, #20]
 8006012:	4618      	mov	r0, r3
 8006014:	f7ff fca5 	bl	8005962 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006018:	e031      	b.n	800607e <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	691b      	ldr	r3, [r3, #16]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d019      	beq.n	8006056 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006022:	f7ff fc71 	bl	8005908 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006026:	f7fc f8cd 	bl	80021c4 <HAL_GetTick>
 800602a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800602c:	e008      	b.n	8006040 <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800602e:	f7fc f8c9 	bl	80021c4 <HAL_GetTick>
 8006032:	4602      	mov	r2, r0
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	1ad3      	subs	r3, r2, r3
 8006038:	2b02      	cmp	r3, #2
 800603a:	d901      	bls.n	8006040 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 800603c:	2303      	movs	r3, #3
 800603e:	e21c      	b.n	800647a <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() == 0U)
 8006040:	f7ff fc7e 	bl	8005940 <LL_RCC_HSI_IsReady>
 8006044:	4603      	mov	r3, r0
 8006046:	2b00      	cmp	r3, #0
 8006048:	d0f1      	beq.n	800602e <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	695b      	ldr	r3, [r3, #20]
 800604e:	4618      	mov	r0, r3
 8006050:	f7ff fc87 	bl	8005962 <LL_RCC_HSI_SetCalibTrimming>
 8006054:	e013      	b.n	800607e <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006056:	f7ff fc65 	bl	8005924 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800605a:	f7fc f8b3 	bl	80021c4 <HAL_GetTick>
 800605e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8006060:	e008      	b.n	8006074 <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006062:	f7fc f8af 	bl	80021c4 <HAL_GetTick>
 8006066:	4602      	mov	r2, r0
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	1ad3      	subs	r3, r2, r3
 800606c:	2b02      	cmp	r3, #2
 800606e:	d901      	bls.n	8006074 <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 8006070:	2303      	movs	r3, #3
 8006072:	e202      	b.n	800647a <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() != 0U)
 8006074:	f7ff fc64 	bl	8005940 <LL_RCC_HSI_IsReady>
 8006078:	4603      	mov	r3, r0
 800607a:	2b00      	cmp	r3, #0
 800607c:	d1f1      	bne.n	8006062 <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f003 0308 	and.w	r3, r3, #8
 8006086:	2b00      	cmp	r3, #0
 8006088:	d06f      	beq.n	800616a <HAL_RCC_OscConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	699b      	ldr	r3, [r3, #24]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d057      	beq.n	8006142 <HAL_RCC_OscConfig+0x3f2>
    {
      uint32_t csr_temp = RCC->CSR;
 8006092:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006096:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800609a:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	69da      	ldr	r2, [r3, #28]
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f003 0310 	and.w	r3, r3, #16
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d036      	beq.n	8006118 <HAL_RCC_OscConfig+0x3c8>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	f003 0302 	and.w	r3, r3, #2
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d006      	beq.n	80060c2 <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d101      	bne.n	80060c2 <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	e1db      	b.n	800647a <HAL_RCC_OscConfig+0x72a>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	f003 0301 	and.w	r3, r3, #1
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d018      	beq.n	80060fe <HAL_RCC_OscConfig+0x3ae>
        {
          __HAL_RCC_LSI_DISABLE();
 80060cc:	f7ff fc7e 	bl	80059cc <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80060d0:	f7fc f878 	bl	80021c4 <HAL_GetTick>
 80060d4:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80060d6:	e00d      	b.n	80060f4 <HAL_RCC_OscConfig+0x3a4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80060d8:	f7fc f874 	bl	80021c4 <HAL_GetTick>
 80060dc:	4602      	mov	r2, r0
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	1ad3      	subs	r3, r2, r3
 80060e2:	2b11      	cmp	r3, #17
 80060e4:	d906      	bls.n	80060f4 <HAL_RCC_OscConfig+0x3a4>
            {
              return HAL_TIMEOUT;
 80060e6:	2303      	movs	r3, #3
 80060e8:	e1c7      	b.n	800647a <HAL_RCC_OscConfig+0x72a>
 80060ea:	bf00      	nop
 80060ec:	20000000 	.word	0x20000000
 80060f0:	20000004 	.word	0x20000004
          while (LL_RCC_LSI_IsReady() != 0U)
 80060f4:	f7ff fc7a 	bl	80059ec <LL_RCC_LSI_IsReady>
 80060f8:	4603      	mov	r3, r0
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d1ec      	bne.n	80060d8 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80060fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006102:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006106:	f023 0210 	bic.w	r2, r3, #16
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	69db      	ldr	r3, [r3, #28]
 800610e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006112:	4313      	orrs	r3, r2
 8006114:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006118:	f7ff fc48 	bl	80059ac <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800611c:	f7fc f852 	bl	80021c4 <HAL_GetTick>
 8006120:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8006122:	e008      	b.n	8006136 <HAL_RCC_OscConfig+0x3e6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006124:	f7fc f84e 	bl	80021c4 <HAL_GetTick>
 8006128:	4602      	mov	r2, r0
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	1ad3      	subs	r3, r2, r3
 800612e:	2b11      	cmp	r3, #17
 8006130:	d901      	bls.n	8006136 <HAL_RCC_OscConfig+0x3e6>
        {
          return HAL_TIMEOUT;
 8006132:	2303      	movs	r3, #3
 8006134:	e1a1      	b.n	800647a <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() == 0U)
 8006136:	f7ff fc59 	bl	80059ec <LL_RCC_LSI_IsReady>
 800613a:	4603      	mov	r3, r0
 800613c:	2b00      	cmp	r3, #0
 800613e:	d0f1      	beq.n	8006124 <HAL_RCC_OscConfig+0x3d4>
 8006140:	e013      	b.n	800616a <HAL_RCC_OscConfig+0x41a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006142:	f7ff fc43 	bl	80059cc <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006146:	f7fc f83d 	bl	80021c4 <HAL_GetTick>
 800614a:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 800614c:	e008      	b.n	8006160 <HAL_RCC_OscConfig+0x410>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800614e:	f7fc f839 	bl	80021c4 <HAL_GetTick>
 8006152:	4602      	mov	r2, r0
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	1ad3      	subs	r3, r2, r3
 8006158:	2b11      	cmp	r3, #17
 800615a:	d901      	bls.n	8006160 <HAL_RCC_OscConfig+0x410>
        {
          return HAL_TIMEOUT;
 800615c:	2303      	movs	r3, #3
 800615e:	e18c      	b.n	800647a <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() != 0U)
 8006160:	f7ff fc44 	bl	80059ec <LL_RCC_LSI_IsReady>
 8006164:	4603      	mov	r3, r0
 8006166:	2b00      	cmp	r3, #0
 8006168:	d1f1      	bne.n	800614e <HAL_RCC_OscConfig+0x3fe>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f003 0304 	and.w	r3, r3, #4
 8006172:	2b00      	cmp	r3, #0
 8006174:	f000 80d8 	beq.w	8006328 <HAL_RCC_OscConfig+0x5d8>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8006178:	f7ff fb5a 	bl	8005830 <LL_PWR_IsEnabledBkUpAccess>
 800617c:	4603      	mov	r3, r0
 800617e:	2b00      	cmp	r3, #0
 8006180:	d113      	bne.n	80061aa <HAL_RCC_OscConfig+0x45a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006182:	f7ff fa99 	bl	80056b8 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006186:	f7fc f81d 	bl	80021c4 <HAL_GetTick>
 800618a:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800618c:	e008      	b.n	80061a0 <HAL_RCC_OscConfig+0x450>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800618e:	f7fc f819 	bl	80021c4 <HAL_GetTick>
 8006192:	4602      	mov	r2, r0
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	1ad3      	subs	r3, r2, r3
 8006198:	2b02      	cmp	r3, #2
 800619a:	d901      	bls.n	80061a0 <HAL_RCC_OscConfig+0x450>
        {
          return HAL_TIMEOUT;
 800619c:	2303      	movs	r3, #3
 800619e:	e16c      	b.n	800647a <HAL_RCC_OscConfig+0x72a>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80061a0:	f7ff fb46 	bl	8005830 <LL_PWR_IsEnabledBkUpAccess>
 80061a4:	4603      	mov	r3, r0
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d0f1      	beq.n	800618e <HAL_RCC_OscConfig+0x43e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	68db      	ldr	r3, [r3, #12]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d07b      	beq.n	80062aa <HAL_RCC_OscConfig+0x55a>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	68db      	ldr	r3, [r3, #12]
 80061b6:	2b85      	cmp	r3, #133	@ 0x85
 80061b8:	d003      	beq.n	80061c2 <HAL_RCC_OscConfig+0x472>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	68db      	ldr	r3, [r3, #12]
 80061be:	2b05      	cmp	r3, #5
 80061c0:	d109      	bne.n	80061d6 <HAL_RCC_OscConfig+0x486>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80061c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80061c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061ca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80061ce:	f043 0304 	orr.w	r3, r3, #4
 80061d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061d6:	f7fb fff5 	bl	80021c4 <HAL_GetTick>
 80061da:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80061dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80061e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061e4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80061e8:	f043 0301 	orr.w	r3, r3, #1
 80061ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80061f0:	e00a      	b.n	8006208 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061f2:	f7fb ffe7 	bl	80021c4 <HAL_GetTick>
 80061f6:	4602      	mov	r2, r0
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	1ad3      	subs	r3, r2, r3
 80061fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006200:	4293      	cmp	r3, r2
 8006202:	d901      	bls.n	8006208 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8006204:	2303      	movs	r3, #3
 8006206:	e138      	b.n	800647a <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() == 0U)
 8006208:	f7ff fbbf 	bl	800598a <LL_RCC_LSE_IsReady>
 800620c:	4603      	mov	r3, r0
 800620e:	2b00      	cmp	r3, #0
 8006210:	d0ef      	beq.n	80061f2 <HAL_RCC_OscConfig+0x4a2>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	68db      	ldr	r3, [r3, #12]
 8006216:	2b81      	cmp	r3, #129	@ 0x81
 8006218:	d003      	beq.n	8006222 <HAL_RCC_OscConfig+0x4d2>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	68db      	ldr	r3, [r3, #12]
 800621e:	2b85      	cmp	r3, #133	@ 0x85
 8006220:	d121      	bne.n	8006266 <HAL_RCC_OscConfig+0x516>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006222:	f7fb ffcf 	bl	80021c4 <HAL_GetTick>
 8006226:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006228:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800622c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006230:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006234:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006238:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800623c:	e00a      	b.n	8006254 <HAL_RCC_OscConfig+0x504>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800623e:	f7fb ffc1 	bl	80021c4 <HAL_GetTick>
 8006242:	4602      	mov	r2, r0
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	1ad3      	subs	r3, r2, r3
 8006248:	f241 3288 	movw	r2, #5000	@ 0x1388
 800624c:	4293      	cmp	r3, r2
 800624e:	d901      	bls.n	8006254 <HAL_RCC_OscConfig+0x504>
          {
            return HAL_TIMEOUT;
 8006250:	2303      	movs	r3, #3
 8006252:	e112      	b.n	800647a <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006254:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006258:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800625c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006260:	2b00      	cmp	r3, #0
 8006262:	d0ec      	beq.n	800623e <HAL_RCC_OscConfig+0x4ee>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8006264:	e060      	b.n	8006328 <HAL_RCC_OscConfig+0x5d8>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006266:	f7fb ffad 	bl	80021c4 <HAL_GetTick>
 800626a:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800626c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006270:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006274:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006278:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800627c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006280:	e00a      	b.n	8006298 <HAL_RCC_OscConfig+0x548>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006282:	f7fb ff9f 	bl	80021c4 <HAL_GetTick>
 8006286:	4602      	mov	r2, r0
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	1ad3      	subs	r3, r2, r3
 800628c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006290:	4293      	cmp	r3, r2
 8006292:	d901      	bls.n	8006298 <HAL_RCC_OscConfig+0x548>
          {
            return HAL_TIMEOUT;
 8006294:	2303      	movs	r3, #3
 8006296:	e0f0      	b.n	800647a <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006298:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800629c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d1ec      	bne.n	8006282 <HAL_RCC_OscConfig+0x532>
 80062a8:	e03e      	b.n	8006328 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062aa:	f7fb ff8b 	bl	80021c4 <HAL_GetTick>
 80062ae:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80062b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062b8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80062bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80062c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80062c4:	e00a      	b.n	80062dc <HAL_RCC_OscConfig+0x58c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062c6:	f7fb ff7d 	bl	80021c4 <HAL_GetTick>
 80062ca:	4602      	mov	r2, r0
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	1ad3      	subs	r3, r2, r3
 80062d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d901      	bls.n	80062dc <HAL_RCC_OscConfig+0x58c>
        {
          return HAL_TIMEOUT;
 80062d8:	2303      	movs	r3, #3
 80062da:	e0ce      	b.n	800647a <HAL_RCC_OscConfig+0x72a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80062dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d1ec      	bne.n	80062c6 <HAL_RCC_OscConfig+0x576>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062ec:	f7fb ff6a 	bl	80021c4 <HAL_GetTick>
 80062f0:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80062f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062fa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80062fe:	f023 0301 	bic.w	r3, r3, #1
 8006302:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8006306:	e00a      	b.n	800631e <HAL_RCC_OscConfig+0x5ce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006308:	f7fb ff5c 	bl	80021c4 <HAL_GetTick>
 800630c:	4602      	mov	r2, r0
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	1ad3      	subs	r3, r2, r3
 8006312:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006316:	4293      	cmp	r3, r2
 8006318:	d901      	bls.n	800631e <HAL_RCC_OscConfig+0x5ce>
        {
          return HAL_TIMEOUT;
 800631a:	2303      	movs	r3, #3
 800631c:	e0ad      	b.n	800647a <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() != 0U)
 800631e:	f7ff fb34 	bl	800598a <LL_RCC_LSE_IsReady>
 8006322:	4603      	mov	r3, r0
 8006324:	2b00      	cmp	r3, #0
 8006326:	d1ef      	bne.n	8006308 <HAL_RCC_OscConfig+0x5b8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800632c:	2b00      	cmp	r3, #0
 800632e:	f000 80a3 	beq.w	8006478 <HAL_RCC_OscConfig+0x728>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006332:	69fb      	ldr	r3, [r7, #28]
 8006334:	2b0c      	cmp	r3, #12
 8006336:	d076      	beq.n	8006426 <HAL_RCC_OscConfig+0x6d6>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800633c:	2b02      	cmp	r3, #2
 800633e:	d14b      	bne.n	80063d8 <HAL_RCC_OscConfig+0x688>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006340:	f7ff fc75 	bl	8005c2e <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006344:	f7fb ff3e 	bl	80021c4 <HAL_GetTick>
 8006348:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 800634a:	e008      	b.n	800635e <HAL_RCC_OscConfig+0x60e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800634c:	f7fb ff3a 	bl	80021c4 <HAL_GetTick>
 8006350:	4602      	mov	r2, r0
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	1ad3      	subs	r3, r2, r3
 8006356:	2b0a      	cmp	r3, #10
 8006358:	d901      	bls.n	800635e <HAL_RCC_OscConfig+0x60e>
          {
            return HAL_TIMEOUT;
 800635a:	2303      	movs	r3, #3
 800635c:	e08d      	b.n	800647a <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 800635e:	f7ff fc74 	bl	8005c4a <LL_RCC_PLL_IsReady>
 8006362:	4603      	mov	r3, r0
 8006364:	2b00      	cmp	r3, #0
 8006366:	d1f1      	bne.n	800634c <HAL_RCC_OscConfig+0x5fc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006368:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800636c:	68da      	ldr	r2, [r3, #12]
 800636e:	4b45      	ldr	r3, [pc, #276]	@ (8006484 <HAL_RCC_OscConfig+0x734>)
 8006370:	4013      	ands	r3, r2
 8006372:	687a      	ldr	r2, [r7, #4]
 8006374:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8006376:	687a      	ldr	r2, [r7, #4]
 8006378:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800637a:	4311      	orrs	r1, r2
 800637c:	687a      	ldr	r2, [r7, #4]
 800637e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006380:	0212      	lsls	r2, r2, #8
 8006382:	4311      	orrs	r1, r2
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006388:	4311      	orrs	r1, r2
 800638a:	687a      	ldr	r2, [r7, #4]
 800638c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800638e:	4311      	orrs	r1, r2
 8006390:	687a      	ldr	r2, [r7, #4]
 8006392:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8006394:	430a      	orrs	r2, r1
 8006396:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800639a:	4313      	orrs	r3, r2
 800639c:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800639e:	f7ff fc38 	bl	8005c12 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80063a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80063a6:	68db      	ldr	r3, [r3, #12]
 80063a8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80063ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80063b0:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063b2:	f7fb ff07 	bl	80021c4 <HAL_GetTick>
 80063b6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80063b8:	e008      	b.n	80063cc <HAL_RCC_OscConfig+0x67c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063ba:	f7fb ff03 	bl	80021c4 <HAL_GetTick>
 80063be:	4602      	mov	r2, r0
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	1ad3      	subs	r3, r2, r3
 80063c4:	2b0a      	cmp	r3, #10
 80063c6:	d901      	bls.n	80063cc <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 80063c8:	2303      	movs	r3, #3
 80063ca:	e056      	b.n	800647a <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() == 0U)
 80063cc:	f7ff fc3d 	bl	8005c4a <LL_RCC_PLL_IsReady>
 80063d0:	4603      	mov	r3, r0
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d0f1      	beq.n	80063ba <HAL_RCC_OscConfig+0x66a>
 80063d6:	e04f      	b.n	8006478 <HAL_RCC_OscConfig+0x728>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063d8:	f7ff fc29 	bl	8005c2e <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80063dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80063e0:	68db      	ldr	r3, [r3, #12]
 80063e2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80063e6:	f023 0303 	bic.w	r3, r3, #3
 80063ea:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 80063ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80063f0:	68db      	ldr	r3, [r3, #12]
 80063f2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80063f6:	f023 5388 	bic.w	r3, r3, #285212672	@ 0x11000000
 80063fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80063fe:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006400:	f7fb fee0 	bl	80021c4 <HAL_GetTick>
 8006404:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8006406:	e008      	b.n	800641a <HAL_RCC_OscConfig+0x6ca>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006408:	f7fb fedc 	bl	80021c4 <HAL_GetTick>
 800640c:	4602      	mov	r2, r0
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	1ad3      	subs	r3, r2, r3
 8006412:	2b0a      	cmp	r3, #10
 8006414:	d901      	bls.n	800641a <HAL_RCC_OscConfig+0x6ca>
          {
            return HAL_TIMEOUT;
 8006416:	2303      	movs	r3, #3
 8006418:	e02f      	b.n	800647a <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 800641a:	f7ff fc16 	bl	8005c4a <LL_RCC_PLL_IsReady>
 800641e:	4603      	mov	r3, r0
 8006420:	2b00      	cmp	r3, #0
 8006422:	d1f1      	bne.n	8006408 <HAL_RCC_OscConfig+0x6b8>
 8006424:	e028      	b.n	8006478 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800642a:	2b01      	cmp	r3, #1
 800642c:	d101      	bne.n	8006432 <HAL_RCC_OscConfig+0x6e2>
      {
        return HAL_ERROR;
 800642e:	2301      	movs	r3, #1
 8006430:	e023      	b.n	800647a <HAL_RCC_OscConfig+0x72a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006432:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006436:	68db      	ldr	r3, [r3, #12]
 8006438:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 800643a:	69bb      	ldr	r3, [r7, #24]
 800643c:	f003 0203 	and.w	r2, r3, #3
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006444:	429a      	cmp	r2, r3
 8006446:	d115      	bne.n	8006474 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8006448:	69bb      	ldr	r3, [r7, #24]
 800644a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006452:	429a      	cmp	r2, r3
 8006454:	d10e      	bne.n	8006474 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8006456:	69bb      	ldr	r3, [r7, #24]
 8006458:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006460:	021b      	lsls	r3, r3, #8
 8006462:	429a      	cmp	r2, r3
 8006464:	d106      	bne.n	8006474 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8006466:	69bb      	ldr	r3, [r7, #24]
 8006468:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006470:	429a      	cmp	r2, r3
 8006472:	d001      	beq.n	8006478 <HAL_RCC_OscConfig+0x728>
        {
          return HAL_ERROR;
 8006474:	2301      	movs	r3, #1
 8006476:	e000      	b.n	800647a <HAL_RCC_OscConfig+0x72a>
        }
      }
    }
  }
  return HAL_OK;
 8006478:	2300      	movs	r3, #0
}
 800647a:	4618      	mov	r0, r3
 800647c:	3720      	adds	r7, #32
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}
 8006482:	bf00      	nop
 8006484:	11c1808c 	.word	0x11c1808c

08006488 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b084      	sub	sp, #16
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d101      	bne.n	800649c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006498:	2301      	movs	r3, #1
 800649a:	e10f      	b.n	80066bc <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800649c:	4b89      	ldr	r3, [pc, #548]	@ (80066c4 <HAL_RCC_ClockConfig+0x23c>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f003 0307 	and.w	r3, r3, #7
 80064a4:	683a      	ldr	r2, [r7, #0]
 80064a6:	429a      	cmp	r2, r3
 80064a8:	d91b      	bls.n	80064e2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064aa:	4b86      	ldr	r3, [pc, #536]	@ (80066c4 <HAL_RCC_ClockConfig+0x23c>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f023 0207 	bic.w	r2, r3, #7
 80064b2:	4984      	ldr	r1, [pc, #528]	@ (80066c4 <HAL_RCC_ClockConfig+0x23c>)
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	4313      	orrs	r3, r2
 80064b8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064ba:	f7fb fe83 	bl	80021c4 <HAL_GetTick>
 80064be:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80064c0:	e008      	b.n	80064d4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80064c2:	f7fb fe7f 	bl	80021c4 <HAL_GetTick>
 80064c6:	4602      	mov	r2, r0
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	1ad3      	subs	r3, r2, r3
 80064cc:	2b02      	cmp	r3, #2
 80064ce:	d901      	bls.n	80064d4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80064d0:	2303      	movs	r3, #3
 80064d2:	e0f3      	b.n	80066bc <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80064d4:	4b7b      	ldr	r3, [pc, #492]	@ (80066c4 <HAL_RCC_ClockConfig+0x23c>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f003 0307 	and.w	r3, r3, #7
 80064dc:	683a      	ldr	r2, [r7, #0]
 80064de:	429a      	cmp	r2, r3
 80064e0:	d1ef      	bne.n	80064c2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f003 0302 	and.w	r3, r3, #2
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d016      	beq.n	800651c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	689b      	ldr	r3, [r3, #8]
 80064f2:	4618      	mov	r0, r3
 80064f4:	f7ff fb10 	bl	8005b18 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80064f8:	f7fb fe64 	bl	80021c4 <HAL_GetTick>
 80064fc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80064fe:	e008      	b.n	8006512 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006500:	f7fb fe60 	bl	80021c4 <HAL_GetTick>
 8006504:	4602      	mov	r2, r0
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	1ad3      	subs	r3, r2, r3
 800650a:	2b02      	cmp	r3, #2
 800650c:	d901      	bls.n	8006512 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800650e:	2303      	movs	r3, #3
 8006510:	e0d4      	b.n	80066bc <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006512:	f7ff fbd8 	bl	8005cc6 <LL_RCC_IsActiveFlag_HPRE>
 8006516:	4603      	mov	r3, r0
 8006518:	2b00      	cmp	r3, #0
 800651a:	d0f1      	beq.n	8006500 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006524:	2b00      	cmp	r3, #0
 8006526:	d016      	beq.n	8006556 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	695b      	ldr	r3, [r3, #20]
 800652c:	4618      	mov	r0, r3
 800652e:	f7ff fb06 	bl	8005b3e <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006532:	f7fb fe47 	bl	80021c4 <HAL_GetTick>
 8006536:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006538:	e008      	b.n	800654c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800653a:	f7fb fe43 	bl	80021c4 <HAL_GetTick>
 800653e:	4602      	mov	r2, r0
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	1ad3      	subs	r3, r2, r3
 8006544:	2b02      	cmp	r3, #2
 8006546:	d901      	bls.n	800654c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8006548:	2303      	movs	r3, #3
 800654a:	e0b7      	b.n	80066bc <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800654c:	f7ff fbcc 	bl	8005ce8 <LL_RCC_IsActiveFlag_SHDHPRE>
 8006550:	4603      	mov	r3, r0
 8006552:	2b00      	cmp	r3, #0
 8006554:	d0f1      	beq.n	800653a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f003 0304 	and.w	r3, r3, #4
 800655e:	2b00      	cmp	r3, #0
 8006560:	d016      	beq.n	8006590 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	68db      	ldr	r3, [r3, #12]
 8006566:	4618      	mov	r0, r3
 8006568:	f7ff faff 	bl	8005b6a <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800656c:	f7fb fe2a 	bl	80021c4 <HAL_GetTick>
 8006570:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006572:	e008      	b.n	8006586 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006574:	f7fb fe26 	bl	80021c4 <HAL_GetTick>
 8006578:	4602      	mov	r2, r0
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	1ad3      	subs	r3, r2, r3
 800657e:	2b02      	cmp	r3, #2
 8006580:	d901      	bls.n	8006586 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8006582:	2303      	movs	r3, #3
 8006584:	e09a      	b.n	80066bc <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006586:	f7ff fbc1 	bl	8005d0c <LL_RCC_IsActiveFlag_PPRE1>
 800658a:	4603      	mov	r3, r0
 800658c:	2b00      	cmp	r3, #0
 800658e:	d0f1      	beq.n	8006574 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f003 0308 	and.w	r3, r3, #8
 8006598:	2b00      	cmp	r3, #0
 800659a:	d017      	beq.n	80065cc <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	691b      	ldr	r3, [r3, #16]
 80065a0:	00db      	lsls	r3, r3, #3
 80065a2:	4618      	mov	r0, r3
 80065a4:	f7ff faf4 	bl	8005b90 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80065a8:	f7fb fe0c 	bl	80021c4 <HAL_GetTick>
 80065ac:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80065ae:	e008      	b.n	80065c2 <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80065b0:	f7fb fe08 	bl	80021c4 <HAL_GetTick>
 80065b4:	4602      	mov	r2, r0
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	1ad3      	subs	r3, r2, r3
 80065ba:	2b02      	cmp	r3, #2
 80065bc:	d901      	bls.n	80065c2 <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 80065be:	2303      	movs	r3, #3
 80065c0:	e07c      	b.n	80066bc <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80065c2:	f7ff fbb4 	bl	8005d2e <LL_RCC_IsActiveFlag_PPRE2>
 80065c6:	4603      	mov	r3, r0
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d0f1      	beq.n	80065b0 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f003 0301 	and.w	r3, r3, #1
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d043      	beq.n	8006660 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	2b02      	cmp	r3, #2
 80065de:	d106      	bne.n	80065ee <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80065e0:	f7ff f981 	bl	80058e6 <LL_RCC_HSE_IsReady>
 80065e4:	4603      	mov	r3, r0
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d11e      	bne.n	8006628 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80065ea:	2301      	movs	r3, #1
 80065ec:	e066      	b.n	80066bc <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	2b03      	cmp	r3, #3
 80065f4:	d106      	bne.n	8006604 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80065f6:	f7ff fb28 	bl	8005c4a <LL_RCC_PLL_IsReady>
 80065fa:	4603      	mov	r3, r0
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d113      	bne.n	8006628 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006600:	2301      	movs	r3, #1
 8006602:	e05b      	b.n	80066bc <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d106      	bne.n	800661a <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800660c:	f7ff fa1b 	bl	8005a46 <LL_RCC_MSI_IsReady>
 8006610:	4603      	mov	r3, r0
 8006612:	2b00      	cmp	r3, #0
 8006614:	d108      	bne.n	8006628 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006616:	2301      	movs	r3, #1
 8006618:	e050      	b.n	80066bc <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800661a:	f7ff f991 	bl	8005940 <LL_RCC_HSI_IsReady>
 800661e:	4603      	mov	r3, r0
 8006620:	2b00      	cmp	r3, #0
 8006622:	d101      	bne.n	8006628 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006624:	2301      	movs	r3, #1
 8006626:	e049      	b.n	80066bc <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	4618      	mov	r0, r3
 800662e:	f7ff fa55 	bl	8005adc <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006632:	f7fb fdc7 	bl	80021c4 <HAL_GetTick>
 8006636:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006638:	e00a      	b.n	8006650 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800663a:	f7fb fdc3 	bl	80021c4 <HAL_GetTick>
 800663e:	4602      	mov	r2, r0
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	1ad3      	subs	r3, r2, r3
 8006644:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006648:	4293      	cmp	r3, r2
 800664a:	d901      	bls.n	8006650 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 800664c:	2303      	movs	r3, #3
 800664e:	e035      	b.n	80066bc <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006650:	f7ff fa57 	bl	8005b02 <LL_RCC_GetSysClkSource>
 8006654:	4602      	mov	r2, r0
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	009b      	lsls	r3, r3, #2
 800665c:	429a      	cmp	r2, r3
 800665e:	d1ec      	bne.n	800663a <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006660:	4b18      	ldr	r3, [pc, #96]	@ (80066c4 <HAL_RCC_ClockConfig+0x23c>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f003 0307 	and.w	r3, r3, #7
 8006668:	683a      	ldr	r2, [r7, #0]
 800666a:	429a      	cmp	r2, r3
 800666c:	d21b      	bcs.n	80066a6 <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800666e:	4b15      	ldr	r3, [pc, #84]	@ (80066c4 <HAL_RCC_ClockConfig+0x23c>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f023 0207 	bic.w	r2, r3, #7
 8006676:	4913      	ldr	r1, [pc, #76]	@ (80066c4 <HAL_RCC_ClockConfig+0x23c>)
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	4313      	orrs	r3, r2
 800667c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800667e:	f7fb fda1 	bl	80021c4 <HAL_GetTick>
 8006682:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006684:	e008      	b.n	8006698 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006686:	f7fb fd9d 	bl	80021c4 <HAL_GetTick>
 800668a:	4602      	mov	r2, r0
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	1ad3      	subs	r3, r2, r3
 8006690:	2b02      	cmp	r3, #2
 8006692:	d901      	bls.n	8006698 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8006694:	2303      	movs	r3, #3
 8006696:	e011      	b.n	80066bc <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006698:	4b0a      	ldr	r3, [pc, #40]	@ (80066c4 <HAL_RCC_ClockConfig+0x23c>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f003 0307 	and.w	r3, r3, #7
 80066a0:	683a      	ldr	r2, [r7, #0]
 80066a2:	429a      	cmp	r2, r3
 80066a4:	d1ef      	bne.n	8006686 <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80066a6:	f000 f8b3 	bl	8006810 <HAL_RCC_GetHCLKFreq>
 80066aa:	4603      	mov	r3, r0
 80066ac:	4a06      	ldr	r2, [pc, #24]	@ (80066c8 <HAL_RCC_ClockConfig+0x240>)
 80066ae:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80066b0:	4b06      	ldr	r3, [pc, #24]	@ (80066cc <HAL_RCC_ClockConfig+0x244>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4618      	mov	r0, r3
 80066b6:	f7fb fd7b 	bl	80021b0 <HAL_InitTick>
 80066ba:	4603      	mov	r3, r0
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3710      	adds	r7, #16
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}
 80066c4:	58004000 	.word	0x58004000
 80066c8:	20000000 	.word	0x20000000
 80066cc:	20000004 	.word	0x20000004

080066d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80066d0:	b590      	push	{r4, r7, lr}
 80066d2:	b087      	sub	sp, #28
 80066d4:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 80066d6:	2300      	movs	r3, #0
 80066d8:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 80066da:	2300      	movs	r3, #0
 80066dc:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80066de:	f7ff fa10 	bl	8005b02 <LL_RCC_GetSysClkSource>
 80066e2:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80066e4:	f7ff fae4 	bl	8005cb0 <LL_RCC_PLL_GetMainSource>
 80066e8:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d005      	beq.n	80066fc <HAL_RCC_GetSysClockFreq+0x2c>
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	2b0c      	cmp	r3, #12
 80066f4:	d139      	bne.n	800676a <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d136      	bne.n	800676a <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80066fc:	f7ff f9b3 	bl	8005a66 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006700:	4603      	mov	r3, r0
 8006702:	2b00      	cmp	r3, #0
 8006704:	d115      	bne.n	8006732 <HAL_RCC_GetSysClockFreq+0x62>
 8006706:	f7ff f9ae 	bl	8005a66 <LL_RCC_MSI_IsEnabledRangeSelect>
 800670a:	4603      	mov	r3, r0
 800670c:	2b01      	cmp	r3, #1
 800670e:	d106      	bne.n	800671e <HAL_RCC_GetSysClockFreq+0x4e>
 8006710:	f7ff f9b9 	bl	8005a86 <LL_RCC_MSI_GetRange>
 8006714:	4603      	mov	r3, r0
 8006716:	0a1b      	lsrs	r3, r3, #8
 8006718:	f003 030f 	and.w	r3, r3, #15
 800671c:	e005      	b.n	800672a <HAL_RCC_GetSysClockFreq+0x5a>
 800671e:	f7ff f9bd 	bl	8005a9c <LL_RCC_MSI_GetRangeAfterStandby>
 8006722:	4603      	mov	r3, r0
 8006724:	0a1b      	lsrs	r3, r3, #8
 8006726:	f003 030f 	and.w	r3, r3, #15
 800672a:	4a36      	ldr	r2, [pc, #216]	@ (8006804 <HAL_RCC_GetSysClockFreq+0x134>)
 800672c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006730:	e014      	b.n	800675c <HAL_RCC_GetSysClockFreq+0x8c>
 8006732:	f7ff f998 	bl	8005a66 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006736:	4603      	mov	r3, r0
 8006738:	2b01      	cmp	r3, #1
 800673a:	d106      	bne.n	800674a <HAL_RCC_GetSysClockFreq+0x7a>
 800673c:	f7ff f9a3 	bl	8005a86 <LL_RCC_MSI_GetRange>
 8006740:	4603      	mov	r3, r0
 8006742:	091b      	lsrs	r3, r3, #4
 8006744:	f003 030f 	and.w	r3, r3, #15
 8006748:	e005      	b.n	8006756 <HAL_RCC_GetSysClockFreq+0x86>
 800674a:	f7ff f9a7 	bl	8005a9c <LL_RCC_MSI_GetRangeAfterStandby>
 800674e:	4603      	mov	r3, r0
 8006750:	091b      	lsrs	r3, r3, #4
 8006752:	f003 030f 	and.w	r3, r3, #15
 8006756:	4a2b      	ldr	r2, [pc, #172]	@ (8006804 <HAL_RCC_GetSysClockFreq+0x134>)
 8006758:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800675c:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d115      	bne.n	8006790 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006768:	e012      	b.n	8006790 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	2b04      	cmp	r3, #4
 800676e:	d102      	bne.n	8006776 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006770:	4b25      	ldr	r3, [pc, #148]	@ (8006808 <HAL_RCC_GetSysClockFreq+0x138>)
 8006772:	617b      	str	r3, [r7, #20]
 8006774:	e00c      	b.n	8006790 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	2b08      	cmp	r3, #8
 800677a:	d109      	bne.n	8006790 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800677c:	f7ff f886 	bl	800588c <LL_RCC_HSE_IsEnabledDiv2>
 8006780:	4603      	mov	r3, r0
 8006782:	2b01      	cmp	r3, #1
 8006784:	d102      	bne.n	800678c <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8006786:	4b20      	ldr	r3, [pc, #128]	@ (8006808 <HAL_RCC_GetSysClockFreq+0x138>)
 8006788:	617b      	str	r3, [r7, #20]
 800678a:	e001      	b.n	8006790 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800678c:	4b1f      	ldr	r3, [pc, #124]	@ (800680c <HAL_RCC_GetSysClockFreq+0x13c>)
 800678e:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006790:	f7ff f9b7 	bl	8005b02 <LL_RCC_GetSysClkSource>
 8006794:	4603      	mov	r3, r0
 8006796:	2b0c      	cmp	r3, #12
 8006798:	d12f      	bne.n	80067fa <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800679a:	f7ff fa89 	bl	8005cb0 <LL_RCC_PLL_GetMainSource>
 800679e:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2b02      	cmp	r3, #2
 80067a4:	d003      	beq.n	80067ae <HAL_RCC_GetSysClockFreq+0xde>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2b03      	cmp	r3, #3
 80067aa:	d003      	beq.n	80067b4 <HAL_RCC_GetSysClockFreq+0xe4>
 80067ac:	e00d      	b.n	80067ca <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80067ae:	4b16      	ldr	r3, [pc, #88]	@ (8006808 <HAL_RCC_GetSysClockFreq+0x138>)
 80067b0:	60fb      	str	r3, [r7, #12]
        break;
 80067b2:	e00d      	b.n	80067d0 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80067b4:	f7ff f86a 	bl	800588c <LL_RCC_HSE_IsEnabledDiv2>
 80067b8:	4603      	mov	r3, r0
 80067ba:	2b01      	cmp	r3, #1
 80067bc:	d102      	bne.n	80067c4 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80067be:	4b12      	ldr	r3, [pc, #72]	@ (8006808 <HAL_RCC_GetSysClockFreq+0x138>)
 80067c0:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80067c2:	e005      	b.n	80067d0 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80067c4:	4b11      	ldr	r3, [pc, #68]	@ (800680c <HAL_RCC_GetSysClockFreq+0x13c>)
 80067c6:	60fb      	str	r3, [r7, #12]
        break;
 80067c8:	e002      	b.n	80067d0 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	60fb      	str	r3, [r7, #12]
        break;
 80067ce:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80067d0:	f7ff fa4c 	bl	8005c6c <LL_RCC_PLL_GetN>
 80067d4:	4602      	mov	r2, r0
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	fb03 f402 	mul.w	r4, r3, r2
 80067dc:	f7ff fa5d 	bl	8005c9a <LL_RCC_PLL_GetDivider>
 80067e0:	4603      	mov	r3, r0
 80067e2:	091b      	lsrs	r3, r3, #4
 80067e4:	3301      	adds	r3, #1
 80067e6:	fbb4 f4f3 	udiv	r4, r4, r3
 80067ea:	f7ff fa4b 	bl	8005c84 <LL_RCC_PLL_GetR>
 80067ee:	4603      	mov	r3, r0
 80067f0:	0f5b      	lsrs	r3, r3, #29
 80067f2:	3301      	adds	r3, #1
 80067f4:	fbb4 f3f3 	udiv	r3, r4, r3
 80067f8:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80067fa:	697b      	ldr	r3, [r7, #20]
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	371c      	adds	r7, #28
 8006800:	46bd      	mov	sp, r7
 8006802:	bd90      	pop	{r4, r7, pc}
 8006804:	0801f204 	.word	0x0801f204
 8006808:	00f42400 	.word	0x00f42400
 800680c:	01e84800 	.word	0x01e84800

08006810 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006810:	b598      	push	{r3, r4, r7, lr}
 8006812:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8006814:	f7ff ff5c 	bl	80066d0 <HAL_RCC_GetSysClockFreq>
 8006818:	4604      	mov	r4, r0
 800681a:	f7ff f9cc 	bl	8005bb6 <LL_RCC_GetAHBPrescaler>
 800681e:	4603      	mov	r3, r0
 8006820:	091b      	lsrs	r3, r3, #4
 8006822:	f003 030f 	and.w	r3, r3, #15
 8006826:	4a03      	ldr	r2, [pc, #12]	@ (8006834 <HAL_RCC_GetHCLKFreq+0x24>)
 8006828:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800682c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8006830:	4618      	mov	r0, r3
 8006832:	bd98      	pop	{r3, r4, r7, pc}
 8006834:	0801f1a4 	.word	0x0801f1a4

08006838 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006838:	b598      	push	{r3, r4, r7, lr}
 800683a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800683c:	f7ff ffe8 	bl	8006810 <HAL_RCC_GetHCLKFreq>
 8006840:	4604      	mov	r4, r0
 8006842:	f7ff f9d0 	bl	8005be6 <LL_RCC_GetAPB1Prescaler>
 8006846:	4603      	mov	r3, r0
 8006848:	0a1b      	lsrs	r3, r3, #8
 800684a:	4a03      	ldr	r2, [pc, #12]	@ (8006858 <HAL_RCC_GetPCLK1Freq+0x20>)
 800684c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006850:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006854:	4618      	mov	r0, r3
 8006856:	bd98      	pop	{r3, r4, r7, pc}
 8006858:	0801f1e4 	.word	0x0801f1e4

0800685c <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800685c:	b598      	push	{r3, r4, r7, lr}
 800685e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8006860:	f7ff ffd6 	bl	8006810 <HAL_RCC_GetHCLKFreq>
 8006864:	4604      	mov	r4, r0
 8006866:	f7ff f9c9 	bl	8005bfc <LL_RCC_GetAPB2Prescaler>
 800686a:	4603      	mov	r3, r0
 800686c:	0adb      	lsrs	r3, r3, #11
 800686e:	4a03      	ldr	r2, [pc, #12]	@ (800687c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006874:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006878:	4618      	mov	r0, r3
 800687a:	bd98      	pop	{r3, r4, r7, pc}
 800687c:	0801f1e4 	.word	0x0801f1e4

08006880 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8006880:	b590      	push	{r4, r7, lr}
 8006882:	b085      	sub	sp, #20
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	091b      	lsrs	r3, r3, #4
 800688c:	f003 030f 	and.w	r3, r3, #15
 8006890:	4a10      	ldr	r2, [pc, #64]	@ (80068d4 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8006892:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006896:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8006898:	f7ff f998 	bl	8005bcc <LL_RCC_GetAHB3Prescaler>
 800689c:	4603      	mov	r3, r0
 800689e:	091b      	lsrs	r3, r3, #4
 80068a0:	f003 030f 	and.w	r3, r3, #15
 80068a4:	4a0c      	ldr	r2, [pc, #48]	@ (80068d8 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 80068a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068aa:	68fa      	ldr	r2, [r7, #12]
 80068ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80068b0:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	4a09      	ldr	r2, [pc, #36]	@ (80068dc <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80068b6:	fba2 2303 	umull	r2, r3, r2, r3
 80068ba:	0c9c      	lsrs	r4, r3, #18
 80068bc:	f7fe ff3e 	bl	800573c <HAL_PWREx_GetVoltageRange>
 80068c0:	4603      	mov	r3, r0
 80068c2:	4619      	mov	r1, r3
 80068c4:	4620      	mov	r0, r4
 80068c6:	f000 f80b 	bl	80068e0 <RCC_SetFlashLatency>
 80068ca:	4603      	mov	r3, r0
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3714      	adds	r7, #20
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd90      	pop	{r4, r7, pc}
 80068d4:	0801f204 	.word	0x0801f204
 80068d8:	0801f1a4 	.word	0x0801f1a4
 80068dc:	431bde83 	.word	0x431bde83

080068e0 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b08e      	sub	sp, #56	@ 0x38
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
 80068e8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80068ea:	4a3a      	ldr	r2, [pc, #232]	@ (80069d4 <RCC_SetFlashLatency+0xf4>)
 80068ec:	f107 0320 	add.w	r3, r7, #32
 80068f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80068f4:	6018      	str	r0, [r3, #0]
 80068f6:	3304      	adds	r3, #4
 80068f8:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80068fa:	4a37      	ldr	r2, [pc, #220]	@ (80069d8 <RCC_SetFlashLatency+0xf8>)
 80068fc:	f107 0318 	add.w	r3, r7, #24
 8006900:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006904:	6018      	str	r0, [r3, #0]
 8006906:	3304      	adds	r3, #4
 8006908:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 800690a:	4a34      	ldr	r2, [pc, #208]	@ (80069dc <RCC_SetFlashLatency+0xfc>)
 800690c:	f107 030c 	add.w	r3, r7, #12
 8006910:	ca07      	ldmia	r2, {r0, r1, r2}
 8006912:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8006916:	2300      	movs	r3, #0
 8006918:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006920:	d11b      	bne.n	800695a <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006922:	2300      	movs	r3, #0
 8006924:	633b      	str	r3, [r7, #48]	@ 0x30
 8006926:	e014      	b.n	8006952 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8006928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800692a:	005b      	lsls	r3, r3, #1
 800692c:	3338      	adds	r3, #56	@ 0x38
 800692e:	443b      	add	r3, r7
 8006930:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8006934:	461a      	mov	r2, r3
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	4293      	cmp	r3, r2
 800693a:	d807      	bhi.n	800694c <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800693c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800693e:	009b      	lsls	r3, r3, #2
 8006940:	3338      	adds	r3, #56	@ 0x38
 8006942:	443b      	add	r3, r7
 8006944:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006948:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800694a:	e021      	b.n	8006990 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800694c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800694e:	3301      	adds	r3, #1
 8006950:	633b      	str	r3, [r7, #48]	@ 0x30
 8006952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006954:	2b02      	cmp	r3, #2
 8006956:	d9e7      	bls.n	8006928 <RCC_SetFlashLatency+0x48>
 8006958:	e01a      	b.n	8006990 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800695a:	2300      	movs	r3, #0
 800695c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800695e:	e014      	b.n	800698a <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8006960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006962:	005b      	lsls	r3, r3, #1
 8006964:	3338      	adds	r3, #56	@ 0x38
 8006966:	443b      	add	r3, r7
 8006968:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 800696c:	461a      	mov	r2, r3
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	4293      	cmp	r3, r2
 8006972:	d807      	bhi.n	8006984 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006974:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006976:	009b      	lsls	r3, r3, #2
 8006978:	3338      	adds	r3, #56	@ 0x38
 800697a:	443b      	add	r3, r7
 800697c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006980:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006982:	e005      	b.n	8006990 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006984:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006986:	3301      	adds	r3, #1
 8006988:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800698a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800698c:	2b02      	cmp	r3, #2
 800698e:	d9e7      	bls.n	8006960 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006990:	4b13      	ldr	r3, [pc, #76]	@ (80069e0 <RCC_SetFlashLatency+0x100>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f023 0207 	bic.w	r2, r3, #7
 8006998:	4911      	ldr	r1, [pc, #68]	@ (80069e0 <RCC_SetFlashLatency+0x100>)
 800699a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800699c:	4313      	orrs	r3, r2
 800699e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80069a0:	f7fb fc10 	bl	80021c4 <HAL_GetTick>
 80069a4:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80069a6:	e008      	b.n	80069ba <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80069a8:	f7fb fc0c 	bl	80021c4 <HAL_GetTick>
 80069ac:	4602      	mov	r2, r0
 80069ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069b0:	1ad3      	subs	r3, r2, r3
 80069b2:	2b02      	cmp	r3, #2
 80069b4:	d901      	bls.n	80069ba <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 80069b6:	2303      	movs	r3, #3
 80069b8:	e007      	b.n	80069ca <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80069ba:	4b09      	ldr	r3, [pc, #36]	@ (80069e0 <RCC_SetFlashLatency+0x100>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f003 0307 	and.w	r3, r3, #7
 80069c2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80069c4:	429a      	cmp	r2, r3
 80069c6:	d1ef      	bne.n	80069a8 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 80069c8:	2300      	movs	r3, #0
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3738      	adds	r7, #56	@ 0x38
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}
 80069d2:	bf00      	nop
 80069d4:	0801e7f0 	.word	0x0801e7f0
 80069d8:	0801e7f8 	.word	0x0801e7f8
 80069dc:	0801e800 	.word	0x0801e800
 80069e0:	58004000 	.word	0x58004000

080069e4 <LL_RCC_LSE_IsReady>:
{
 80069e4:	b480      	push	{r7}
 80069e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80069e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069f0:	f003 0302 	and.w	r3, r3, #2
 80069f4:	2b02      	cmp	r3, #2
 80069f6:	d101      	bne.n	80069fc <LL_RCC_LSE_IsReady+0x18>
 80069f8:	2301      	movs	r3, #1
 80069fa:	e000      	b.n	80069fe <LL_RCC_LSE_IsReady+0x1a>
 80069fc:	2300      	movs	r3, #0
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bc80      	pop	{r7}
 8006a04:	4770      	bx	lr

08006a06 <LL_RCC_SetUSARTClockSource>:
{
 8006a06:	b480      	push	{r7}
 8006a08:	b083      	sub	sp, #12
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8006a0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a12:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	0c1b      	lsrs	r3, r3, #16
 8006a1a:	43db      	mvns	r3, r3
 8006a1c:	401a      	ands	r2, r3
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	b29b      	uxth	r3, r3
 8006a22:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006a26:	4313      	orrs	r3, r2
 8006a28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006a2c:	bf00      	nop
 8006a2e:	370c      	adds	r7, #12
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bc80      	pop	{r7}
 8006a34:	4770      	bx	lr

08006a36 <LL_RCC_SetI2SClockSource>:
{
 8006a36:	b480      	push	{r7}
 8006a38:	b083      	sub	sp, #12
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8006a3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a46:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006a4a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	4313      	orrs	r3, r2
 8006a52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006a56:	bf00      	nop
 8006a58:	370c      	adds	r7, #12
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bc80      	pop	{r7}
 8006a5e:	4770      	bx	lr

08006a60 <LL_RCC_SetLPUARTClockSource>:
{
 8006a60:	b480      	push	{r7}
 8006a62:	b083      	sub	sp, #12
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8006a68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a70:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006a74:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006a80:	bf00      	nop
 8006a82:	370c      	adds	r7, #12
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bc80      	pop	{r7}
 8006a88:	4770      	bx	lr

08006a8a <LL_RCC_SetI2CClockSource>:
{
 8006a8a:	b480      	push	{r7}
 8006a8c:	b083      	sub	sp, #12
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006a92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a96:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	091b      	lsrs	r3, r3, #4
 8006a9e:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8006aa2:	43db      	mvns	r3, r3
 8006aa4:	401a      	ands	r2, r3
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	011b      	lsls	r3, r3, #4
 8006aaa:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8006aae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006ab8:	bf00      	nop
 8006aba:	370c      	adds	r7, #12
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bc80      	pop	{r7}
 8006ac0:	4770      	bx	lr

08006ac2 <LL_RCC_SetLPTIMClockSource>:
{
 8006ac2:	b480      	push	{r7}
 8006ac4:	b083      	sub	sp, #12
 8006ac6:	af00      	add	r7, sp, #0
 8006ac8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8006aca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ace:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	0c1b      	lsrs	r3, r3, #16
 8006ad6:	041b      	lsls	r3, r3, #16
 8006ad8:	43db      	mvns	r3, r3
 8006ada:	401a      	ands	r2, r3
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	041b      	lsls	r3, r3, #16
 8006ae0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006aea:	bf00      	nop
 8006aec:	370c      	adds	r7, #12
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bc80      	pop	{r7}
 8006af2:	4770      	bx	lr

08006af4 <LL_RCC_SetRNGClockSource>:
{
 8006af4:	b480      	push	{r7}
 8006af6:	b083      	sub	sp, #12
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8006afc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b04:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8006b08:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006b14:	bf00      	nop
 8006b16:	370c      	adds	r7, #12
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bc80      	pop	{r7}
 8006b1c:	4770      	bx	lr

08006b1e <LL_RCC_SetADCClockSource>:
{
 8006b1e:	b480      	push	{r7}
 8006b20:	b083      	sub	sp, #12
 8006b22:	af00      	add	r7, sp, #0
 8006b24:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006b26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b2e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006b32:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006b3e:	bf00      	nop
 8006b40:	370c      	adds	r7, #12
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bc80      	pop	{r7}
 8006b46:	4770      	bx	lr

08006b48 <LL_RCC_SetRTCClockSource>:
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b083      	sub	sp, #12
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8006b50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b58:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006b5c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	4313      	orrs	r3, r2
 8006b64:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8006b68:	bf00      	nop
 8006b6a:	370c      	adds	r7, #12
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bc80      	pop	{r7}
 8006b70:	4770      	bx	lr

08006b72 <LL_RCC_GetRTCClockSource>:
{
 8006b72:	b480      	push	{r7}
 8006b74:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006b76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bc80      	pop	{r7}
 8006b88:	4770      	bx	lr

08006b8a <LL_RCC_ForceBackupDomainReset>:
{
 8006b8a:	b480      	push	{r7}
 8006b8c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006b8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b96:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006b9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b9e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006ba2:	bf00      	nop
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bc80      	pop	{r7}
 8006ba8:	4770      	bx	lr

08006baa <LL_RCC_ReleaseBackupDomainReset>:
{
 8006baa:	b480      	push	{r7}
 8006bac:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006bae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bb6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006bba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006bbe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006bc2:	bf00      	nop
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bc80      	pop	{r7}
 8006bc8:	4770      	bx	lr
	...

08006bcc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b086      	sub	sp, #24
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8006bd8:	2300      	movs	r3, #0
 8006bda:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8006bdc:	2300      	movs	r3, #0
 8006bde:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d058      	beq.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8006bec:	f7fe fd64 	bl	80056b8 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006bf0:	f7fb fae8 	bl	80021c4 <HAL_GetTick>
 8006bf4:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8006bf6:	e009      	b.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006bf8:	f7fb fae4 	bl	80021c4 <HAL_GetTick>
 8006bfc:	4602      	mov	r2, r0
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	1ad3      	subs	r3, r2, r3
 8006c02:	2b02      	cmp	r3, #2
 8006c04:	d902      	bls.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8006c06:	2303      	movs	r3, #3
 8006c08:	74fb      	strb	r3, [r7, #19]
        break;
 8006c0a:	e006      	b.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8006c0c:	4b7b      	ldr	r3, [pc, #492]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c18:	d1ee      	bne.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8006c1a:	7cfb      	ldrb	r3, [r7, #19]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d13c      	bne.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8006c20:	f7ff ffa7 	bl	8006b72 <LL_RCC_GetRTCClockSource>
 8006c24:	4602      	mov	r2, r0
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	d00f      	beq.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006c2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c3a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006c3c:	f7ff ffa5 	bl	8006b8a <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006c40:	f7ff ffb3 	bl	8006baa <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006c44:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	f003 0302 	and.w	r3, r3, #2
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d014      	beq.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c58:	f7fb fab4 	bl	80021c4 <HAL_GetTick>
 8006c5c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8006c5e:	e00b      	b.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c60:	f7fb fab0 	bl	80021c4 <HAL_GetTick>
 8006c64:	4602      	mov	r2, r0
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	1ad3      	subs	r3, r2, r3
 8006c6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d902      	bls.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8006c72:	2303      	movs	r3, #3
 8006c74:	74fb      	strb	r3, [r7, #19]
            break;
 8006c76:	e004      	b.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8006c78:	f7ff feb4 	bl	80069e4 <LL_RCC_LSE_IsReady>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	2b01      	cmp	r3, #1
 8006c80:	d1ee      	bne.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8006c82:	7cfb      	ldrb	r3, [r7, #19]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d105      	bne.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	f7ff ff5b 	bl	8006b48 <LL_RCC_SetRTCClockSource>
 8006c92:	e004      	b.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006c94:	7cfb      	ldrb	r3, [r7, #19]
 8006c96:	74bb      	strb	r3, [r7, #18]
 8006c98:	e001      	b.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c9a:	7cfb      	ldrb	r3, [r7, #19]
 8006c9c:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f003 0301 	and.w	r3, r3, #1
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d004      	beq.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f7ff fea9 	bl	8006a06 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f003 0302 	and.w	r3, r3, #2
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d004      	beq.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	689b      	ldr	r3, [r3, #8]
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	f7ff fe9e 	bl	8006a06 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f003 0320 	and.w	r3, r3, #32
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d004      	beq.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	691b      	ldr	r3, [r3, #16]
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f7ff fec0 	bl	8006a60 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d004      	beq.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6a1b      	ldr	r3, [r3, #32]
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f7ff fee6 	bl	8006ac2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d004      	beq.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d06:	4618      	mov	r0, r3
 8006d08:	f7ff fedb 	bl	8006ac2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d004      	beq.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	f7ff fed0 	bl	8006ac2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d004      	beq.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	695b      	ldr	r3, [r3, #20]
 8006d32:	4618      	mov	r0, r3
 8006d34:	f7ff fea9 	bl	8006a8a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d004      	beq.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	699b      	ldr	r3, [r3, #24]
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f7ff fe9e 	bl	8006a8a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d004      	beq.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	69db      	ldr	r3, [r3, #28]
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f7ff fe93 	bl	8006a8a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f003 0310 	and.w	r3, r3, #16
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d011      	beq.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	68db      	ldr	r3, [r3, #12]
 8006d74:	4618      	mov	r0, r3
 8006d76:	f7ff fe5e 	bl	8006a36 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	68db      	ldr	r3, [r3, #12]
 8006d7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d82:	d107      	bne.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8006d84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d88:	68db      	ldr	r3, [r3, #12]
 8006d8a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006d8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006d92:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d010      	beq.n	8006dc2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006da4:	4618      	mov	r0, r3
 8006da6:	f7ff fea5 	bl	8006af4 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d107      	bne.n	8006dc2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006db2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006db6:	68db      	ldr	r3, [r3, #12]
 8006db8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006dbc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006dc0:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d011      	beq.n	8006df2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f7ff fea3 	bl	8006b1e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ddc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006de0:	d107      	bne.n	8006df2 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006de2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006de6:	68db      	ldr	r3, [r3, #12]
 8006de8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006dec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006df0:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8006df2:	7cbb      	ldrb	r3, [r7, #18]
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3718      	adds	r7, #24
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}
 8006dfc:	58000400 	.word	0x58000400

08006e00 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b084      	sub	sp, #16
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006e08:	2301      	movs	r3, #1
 8006e0a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d068      	beq.n	8006ee4 <HAL_RTC_Init+0xe4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006e18:	b2db      	uxtb	r3, r3
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d106      	bne.n	8006e2c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2200      	movs	r2, #0
 8006e22:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f7fa ff0c 	bl	8001c44 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2202      	movs	r2, #2
 8006e30:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006e34:	4b2e      	ldr	r3, [pc, #184]	@ (8006ef0 <HAL_RTC_Init+0xf0>)
 8006e36:	22ca      	movs	r2, #202	@ 0xca
 8006e38:	625a      	str	r2, [r3, #36]	@ 0x24
 8006e3a:	4b2d      	ldr	r3, [pc, #180]	@ (8006ef0 <HAL_RTC_Init+0xf0>)
 8006e3c:	2253      	movs	r2, #83	@ 0x53
 8006e3e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f000 fa0f 	bl	8007264 <RTC_EnterInitMode>
 8006e46:	4603      	mov	r3, r0
 8006e48:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8006e4a:	7bfb      	ldrb	r3, [r7, #15]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d13f      	bne.n	8006ed0 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8006e50:	4b27      	ldr	r3, [pc, #156]	@ (8006ef0 <HAL_RTC_Init+0xf0>)
 8006e52:	699b      	ldr	r3, [r3, #24]
 8006e54:	4a26      	ldr	r2, [pc, #152]	@ (8006ef0 <HAL_RTC_Init+0xf0>)
 8006e56:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 8006e5a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e5e:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8006e60:	4b23      	ldr	r3, [pc, #140]	@ (8006ef0 <HAL_RTC_Init+0xf0>)
 8006e62:	699a      	ldr	r2, [r3, #24]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6859      	ldr	r1, [r3, #4]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	691b      	ldr	r3, [r3, #16]
 8006e6c:	4319      	orrs	r1, r3
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	699b      	ldr	r3, [r3, #24]
 8006e72:	430b      	orrs	r3, r1
 8006e74:	491e      	ldr	r1, [pc, #120]	@ (8006ef0 <HAL_RTC_Init+0xf0>)
 8006e76:	4313      	orrs	r3, r2
 8006e78:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	68da      	ldr	r2, [r3, #12]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	689b      	ldr	r3, [r3, #8]
 8006e82:	041b      	lsls	r3, r3, #16
 8006e84:	491a      	ldr	r1, [pc, #104]	@ (8006ef0 <HAL_RTC_Init+0xf0>)
 8006e86:	4313      	orrs	r3, r2
 8006e88:	610b      	str	r3, [r1, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8006e8a:	4b19      	ldr	r3, [pc, #100]	@ (8006ef0 <HAL_RTC_Init+0xf0>)
 8006e8c:	68db      	ldr	r3, [r3, #12]
 8006e8e:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e9a:	430b      	orrs	r3, r1
 8006e9c:	4914      	ldr	r1, [pc, #80]	@ (8006ef0 <HAL_RTC_Init+0xf0>)
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	60cb      	str	r3, [r1, #12]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f000 fa12 	bl	80072cc <RTC_ExitInitMode>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8006eac:	7bfb      	ldrb	r3, [r7, #15]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d10e      	bne.n	8006ed0 <HAL_RTC_Init+0xd0>
      {
        MODIFY_REG(RTC->CR, \
 8006eb2:	4b0f      	ldr	r3, [pc, #60]	@ (8006ef0 <HAL_RTC_Init+0xf0>)
 8006eb4:	699b      	ldr	r3, [r3, #24]
 8006eb6:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6a19      	ldr	r1, [r3, #32]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	69db      	ldr	r3, [r3, #28]
 8006ec2:	4319      	orrs	r1, r3
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	695b      	ldr	r3, [r3, #20]
 8006ec8:	430b      	orrs	r3, r1
 8006eca:	4909      	ldr	r1, [pc, #36]	@ (8006ef0 <HAL_RTC_Init+0xf0>)
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ed0:	4b07      	ldr	r3, [pc, #28]	@ (8006ef0 <HAL_RTC_Init+0xf0>)
 8006ed2:	22ff      	movs	r2, #255	@ 0xff
 8006ed4:	625a      	str	r2, [r3, #36]	@ 0x24

    if (status == HAL_OK)
 8006ed6:	7bfb      	ldrb	r3, [r7, #15]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d103      	bne.n	8006ee4 <HAL_RTC_Init+0xe4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2201      	movs	r2, #1
 8006ee0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 8006ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3710      	adds	r7, #16
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}
 8006eee:	bf00      	nop
 8006ef0:	40002800 	.word	0x40002800

08006ef4 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006ef4:	b590      	push	{r4, r7, lr}
 8006ef6:	b087      	sub	sp, #28
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	60f8      	str	r0, [r7, #12]
 8006efc:	60b9      	str	r1, [r7, #8]
 8006efe:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8006f00:	2300      	movs	r3, #0
 8006f02:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006f0a:	2b01      	cmp	r3, #1
 8006f0c:	d101      	bne.n	8006f12 <HAL_RTC_SetAlarm_IT+0x1e>
 8006f0e:	2302      	movs	r3, #2
 8006f10:	e0f3      	b.n	80070fa <HAL_RTC_SetAlarm_IT+0x206>
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2201      	movs	r2, #1
 8006f16:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2202      	movs	r2, #2
 8006f1e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8006f22:	4b78      	ldr	r3, [pc, #480]	@ (8007104 <HAL_RTC_SetAlarm_IT+0x210>)
 8006f24:	68db      	ldr	r3, [r3, #12]
 8006f26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f2a:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f32:	d06a      	beq.n	800700a <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d13a      	bne.n	8006fb0 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006f3a:	4b72      	ldr	r3, [pc, #456]	@ (8007104 <HAL_RTC_SetAlarm_IT+0x210>)
 8006f3c:	699b      	ldr	r3, [r3, #24]
 8006f3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d102      	bne.n	8006f4c <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	695b      	ldr	r3, [r3, #20]
 8006f50:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	781b      	ldrb	r3, [r3, #0]
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f000 f9f5 	bl	8007348 <RTC_ByteToBcd2>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	785b      	ldrb	r3, [r3, #1]
 8006f66:	4618      	mov	r0, r3
 8006f68:	f000 f9ee 	bl	8007348 <RTC_ByteToBcd2>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006f70:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	789b      	ldrb	r3, [r3, #2]
 8006f76:	4618      	mov	r0, r3
 8006f78:	f000 f9e6 	bl	8007348 <RTC_ByteToBcd2>
 8006f7c:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006f7e:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	78db      	ldrb	r3, [r3, #3]
 8006f86:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006f88:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006f92:	4618      	mov	r0, r3
 8006f94:	f000 f9d8 	bl	8007348 <RTC_ByteToBcd2>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006f9c:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006fa4:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006faa:	4313      	orrs	r3, r2
 8006fac:	617b      	str	r3, [r7, #20]
 8006fae:	e02c      	b.n	800700a <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	695b      	ldr	r3, [r3, #20]
 8006fb4:	f1b3 3f80 	cmp.w	r3, #2155905152	@ 0x80808080
 8006fb8:	d00d      	beq.n	8006fd6 <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	695b      	ldr	r3, [r3, #20]
 8006fbe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006fc2:	d008      	beq.n	8006fd6 <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006fc4:	4b4f      	ldr	r3, [pc, #316]	@ (8007104 <HAL_RTC_SetAlarm_IT+0x210>)
 8006fc6:	699b      	ldr	r3, [r3, #24]
 8006fc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d102      	bne.n	8006fd6 <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	781b      	ldrb	r3, [r3, #0]
 8006fda:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	785b      	ldrb	r3, [r3, #1]
 8006fe0:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006fe2:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006fe4:	68ba      	ldr	r2, [r7, #8]
 8006fe6:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006fe8:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	78db      	ldrb	r3, [r3, #3]
 8006fee:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006ff0:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006ff8:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006ffa:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8007000:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007006:	4313      	orrs	r3, r2
 8007008:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800700a:	4b3e      	ldr	r3, [pc, #248]	@ (8007104 <HAL_RTC_SetAlarm_IT+0x210>)
 800700c:	22ca      	movs	r2, #202	@ 0xca
 800700e:	625a      	str	r2, [r3, #36]	@ 0x24
 8007010:	4b3c      	ldr	r3, [pc, #240]	@ (8007104 <HAL_RTC_SetAlarm_IT+0x210>)
 8007012:	2253      	movs	r2, #83	@ 0x53
 8007014:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800701a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800701e:	d12c      	bne.n	800707a <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8007020:	4b38      	ldr	r3, [pc, #224]	@ (8007104 <HAL_RTC_SetAlarm_IT+0x210>)
 8007022:	699b      	ldr	r3, [r3, #24]
 8007024:	4a37      	ldr	r2, [pc, #220]	@ (8007104 <HAL_RTC_SetAlarm_IT+0x210>)
 8007026:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800702a:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 800702c:	4b35      	ldr	r3, [pc, #212]	@ (8007104 <HAL_RTC_SetAlarm_IT+0x210>)
 800702e:	2201      	movs	r2, #1
 8007030:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007038:	d107      	bne.n	800704a <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	699a      	ldr	r2, [r3, #24]
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	69db      	ldr	r3, [r3, #28]
 8007042:	4930      	ldr	r1, [pc, #192]	@ (8007104 <HAL_RTC_SetAlarm_IT+0x210>)
 8007044:	4313      	orrs	r3, r2
 8007046:	644b      	str	r3, [r1, #68]	@ 0x44
 8007048:	e006      	b.n	8007058 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 800704a:	4a2e      	ldr	r2, [pc, #184]	@ (8007104 <HAL_RTC_SetAlarm_IT+0x210>)
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	6413      	str	r3, [r2, #64]	@ 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8007050:	4a2c      	ldr	r2, [pc, #176]	@ (8007104 <HAL_RTC_SetAlarm_IT+0x210>)
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	699b      	ldr	r3, [r3, #24]
 8007056:	6453      	str	r3, [r2, #68]	@ 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8007058:	4a2a      	ldr	r2, [pc, #168]	@ (8007104 <HAL_RTC_SetAlarm_IT+0x210>)
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	6713      	str	r3, [r2, #112]	@ 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007064:	f043 0201 	orr.w	r2, r3, #1
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800706c:	4b25      	ldr	r3, [pc, #148]	@ (8007104 <HAL_RTC_SetAlarm_IT+0x210>)
 800706e:	699b      	ldr	r3, [r3, #24]
 8007070:	4a24      	ldr	r2, [pc, #144]	@ (8007104 <HAL_RTC_SetAlarm_IT+0x210>)
 8007072:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
 8007076:	6193      	str	r3, [r2, #24]
 8007078:	e02b      	b.n	80070d2 <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800707a:	4b22      	ldr	r3, [pc, #136]	@ (8007104 <HAL_RTC_SetAlarm_IT+0x210>)
 800707c:	699b      	ldr	r3, [r3, #24]
 800707e:	4a21      	ldr	r2, [pc, #132]	@ (8007104 <HAL_RTC_SetAlarm_IT+0x210>)
 8007080:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 8007084:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8007086:	4b1f      	ldr	r3, [pc, #124]	@ (8007104 <HAL_RTC_SetAlarm_IT+0x210>)
 8007088:	2202      	movs	r2, #2
 800708a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007092:	d107      	bne.n	80070a4 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	699a      	ldr	r2, [r3, #24]
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	69db      	ldr	r3, [r3, #28]
 800709c:	4919      	ldr	r1, [pc, #100]	@ (8007104 <HAL_RTC_SetAlarm_IT+0x210>)
 800709e:	4313      	orrs	r3, r2
 80070a0:	64cb      	str	r3, [r1, #76]	@ 0x4c
 80070a2:	e006      	b.n	80070b2 <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 80070a4:	4a17      	ldr	r2, [pc, #92]	@ (8007104 <HAL_RTC_SetAlarm_IT+0x210>)
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	6493      	str	r3, [r2, #72]	@ 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 80070aa:	4a16      	ldr	r2, [pc, #88]	@ (8007104 <HAL_RTC_SetAlarm_IT+0x210>)
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	699b      	ldr	r3, [r3, #24]
 80070b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 80070b2:	4a14      	ldr	r2, [pc, #80]	@ (8007104 <HAL_RTC_SetAlarm_IT+0x210>)
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	6753      	str	r3, [r2, #116]	@ 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070be:	f043 0202 	orr.w	r2, r3, #2
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80070c6:	4b0f      	ldr	r3, [pc, #60]	@ (8007104 <HAL_RTC_SetAlarm_IT+0x210>)
 80070c8:	699b      	ldr	r3, [r3, #24]
 80070ca:	4a0e      	ldr	r2, [pc, #56]	@ (8007104 <HAL_RTC_SetAlarm_IT+0x210>)
 80070cc:	f443 5308 	orr.w	r3, r3, #8704	@ 0x2200
 80070d0:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80070d2:	4b0d      	ldr	r3, [pc, #52]	@ (8007108 <HAL_RTC_SetAlarm_IT+0x214>)
 80070d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80070d8:	4a0b      	ldr	r2, [pc, #44]	@ (8007108 <HAL_RTC_SetAlarm_IT+0x214>)
 80070da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80070de:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80070e2:	4b08      	ldr	r3, [pc, #32]	@ (8007104 <HAL_RTC_SetAlarm_IT+0x210>)
 80070e4:	22ff      	movs	r2, #255	@ 0xff
 80070e6:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	2201      	movs	r2, #1
 80070ec:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	2200      	movs	r2, #0
 80070f4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80070f8:	2300      	movs	r3, #0
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	371c      	adds	r7, #28
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd90      	pop	{r4, r7, pc}
 8007102:	bf00      	nop
 8007104:	40002800 	.word	0x40002800
 8007108:	58000800 	.word	0x58000800

0800710c <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 800710c:	b480      	push	{r7}
 800710e:	b083      	sub	sp, #12
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800711c:	2b01      	cmp	r3, #1
 800711e:	d101      	bne.n	8007124 <HAL_RTC_DeactivateAlarm+0x18>
 8007120:	2302      	movs	r3, #2
 8007122:	e048      	b.n	80071b6 <HAL_RTC_DeactivateAlarm+0xaa>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2201      	movs	r2, #1
 8007128:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2202      	movs	r2, #2
 8007130:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007134:	4b22      	ldr	r3, [pc, #136]	@ (80071c0 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007136:	22ca      	movs	r2, #202	@ 0xca
 8007138:	625a      	str	r2, [r3, #36]	@ 0x24
 800713a:	4b21      	ldr	r3, [pc, #132]	@ (80071c0 <HAL_RTC_DeactivateAlarm+0xb4>)
 800713c:	2253      	movs	r2, #83	@ 0x53
 800713e:	625a      	str	r2, [r3, #36]	@ 0x24

  if (Alarm == RTC_ALARM_A)
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007146:	d115      	bne.n	8007174 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8007148:	4b1d      	ldr	r3, [pc, #116]	@ (80071c0 <HAL_RTC_DeactivateAlarm+0xb4>)
 800714a:	699b      	ldr	r3, [r3, #24]
 800714c:	4a1c      	ldr	r2, [pc, #112]	@ (80071c0 <HAL_RTC_DeactivateAlarm+0xb4>)
 800714e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8007152:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8007154:	4b1a      	ldr	r3, [pc, #104]	@ (80071c0 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007156:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007158:	4a19      	ldr	r2, [pc, #100]	@ (80071c0 <HAL_RTC_DeactivateAlarm+0xb4>)
 800715a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800715e:	6453      	str	r3, [r2, #68]	@ 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007164:	f023 0201 	bic.w	r2, r3, #1
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 800716c:	4b14      	ldr	r3, [pc, #80]	@ (80071c0 <HAL_RTC_DeactivateAlarm+0xb4>)
 800716e:	2201      	movs	r2, #1
 8007170:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007172:	e014      	b.n	800719e <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8007174:	4b12      	ldr	r3, [pc, #72]	@ (80071c0 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007176:	699b      	ldr	r3, [r3, #24]
 8007178:	4a11      	ldr	r2, [pc, #68]	@ (80071c0 <HAL_RTC_DeactivateAlarm+0xb4>)
 800717a:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 800717e:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8007180:	4b0f      	ldr	r3, [pc, #60]	@ (80071c0 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007182:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007184:	4a0e      	ldr	r2, [pc, #56]	@ (80071c0 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007186:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800718a:	64d3      	str	r3, [r2, #76]	@ 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007190:	f023 0202 	bic.w	r2, r3, #2
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8007198:	4b09      	ldr	r3, [pc, #36]	@ (80071c0 <HAL_RTC_DeactivateAlarm+0xb4>)
 800719a:	2202      	movs	r2, #2
 800719c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800719e:	4b08      	ldr	r3, [pc, #32]	@ (80071c0 <HAL_RTC_DeactivateAlarm+0xb4>)
 80071a0:	22ff      	movs	r2, #255	@ 0xff
 80071a2:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2201      	movs	r2, #1
 80071a8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2200      	movs	r2, #0
 80071b0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80071b4:	2300      	movs	r3, #0
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	370c      	adds	r7, #12
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bc80      	pop	{r7}
 80071be:	4770      	bx	lr
 80071c0:	40002800 	.word	0x40002800

080071c4 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b084      	sub	sp, #16
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 80071cc:	4b11      	ldr	r3, [pc, #68]	@ (8007214 <HAL_RTC_AlarmIRQHandler+0x50>)
 80071ce:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071d4:	4013      	ands	r3, r2
 80071d6:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f003 0301 	and.w	r3, r3, #1
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d005      	beq.n	80071ee <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80071e2:	4b0c      	ldr	r3, [pc, #48]	@ (8007214 <HAL_RTC_AlarmIRQHandler+0x50>)
 80071e4:	2201      	movs	r2, #1
 80071e6:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f7fb fad8 	bl	800279e <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	f003 0302 	and.w	r3, r3, #2
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d005      	beq.n	8007204 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80071f8:	4b06      	ldr	r3, [pc, #24]	@ (8007214 <HAL_RTC_AlarmIRQHandler+0x50>)
 80071fa:	2202      	movs	r2, #2
 80071fc:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f000 f94a 	bl	8007498 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2201      	movs	r2, #1
 8007208:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 800720c:	bf00      	nop
 800720e:	3710      	adds	r7, #16
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}
 8007214:	40002800 	.word	0x40002800

08007218 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b084      	sub	sp, #16
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8007220:	4b0f      	ldr	r3, [pc, #60]	@ (8007260 <HAL_RTC_WaitForSynchro+0x48>)
 8007222:	68db      	ldr	r3, [r3, #12]
 8007224:	4a0e      	ldr	r2, [pc, #56]	@ (8007260 <HAL_RTC_WaitForSynchro+0x48>)
 8007226:	f023 0320 	bic.w	r3, r3, #32
 800722a:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800722c:	f7fa ffca 	bl	80021c4 <HAL_GetTick>
 8007230:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8007232:	e009      	b.n	8007248 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007234:	f7fa ffc6 	bl	80021c4 <HAL_GetTick>
 8007238:	4602      	mov	r2, r0
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	1ad3      	subs	r3, r2, r3
 800723e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007242:	d901      	bls.n	8007248 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8007244:	2303      	movs	r3, #3
 8007246:	e006      	b.n	8007256 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8007248:	4b05      	ldr	r3, [pc, #20]	@ (8007260 <HAL_RTC_WaitForSynchro+0x48>)
 800724a:	68db      	ldr	r3, [r3, #12]
 800724c:	f003 0320 	and.w	r3, r3, #32
 8007250:	2b00      	cmp	r3, #0
 8007252:	d0ef      	beq.n	8007234 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8007254:	2300      	movs	r3, #0
}
 8007256:	4618      	mov	r0, r3
 8007258:	3710      	adds	r7, #16
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}
 800725e:	bf00      	nop
 8007260:	40002800 	.word	0x40002800

08007264 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b084      	sub	sp, #16
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800726c:	2300      	movs	r3, #0
 800726e:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8007270:	4b15      	ldr	r3, [pc, #84]	@ (80072c8 <RTC_EnterInitMode+0x64>)
 8007272:	68db      	ldr	r3, [r3, #12]
 8007274:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007278:	2b00      	cmp	r3, #0
 800727a:	d120      	bne.n	80072be <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800727c:	4b12      	ldr	r3, [pc, #72]	@ (80072c8 <RTC_EnterInitMode+0x64>)
 800727e:	68db      	ldr	r3, [r3, #12]
 8007280:	4a11      	ldr	r2, [pc, #68]	@ (80072c8 <RTC_EnterInitMode+0x64>)
 8007282:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007286:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8007288:	f7fa ff9c 	bl	80021c4 <HAL_GetTick>
 800728c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800728e:	e00d      	b.n	80072ac <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007290:	f7fa ff98 	bl	80021c4 <HAL_GetTick>
 8007294:	4602      	mov	r2, r0
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	1ad3      	subs	r3, r2, r3
 800729a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800729e:	d905      	bls.n	80072ac <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80072a0:	2303      	movs	r3, #3
 80072a2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2203      	movs	r2, #3
 80072a8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80072ac:	4b06      	ldr	r3, [pc, #24]	@ (80072c8 <RTC_EnterInitMode+0x64>)
 80072ae:	68db      	ldr	r3, [r3, #12]
 80072b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d102      	bne.n	80072be <RTC_EnterInitMode+0x5a>
 80072b8:	7bfb      	ldrb	r3, [r7, #15]
 80072ba:	2b03      	cmp	r3, #3
 80072bc:	d1e8      	bne.n	8007290 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 80072be:	7bfb      	ldrb	r3, [r7, #15]
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	3710      	adds	r7, #16
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}
 80072c8:	40002800 	.word	0x40002800

080072cc <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b084      	sub	sp, #16
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80072d4:	2300      	movs	r3, #0
 80072d6:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80072d8:	4b1a      	ldr	r3, [pc, #104]	@ (8007344 <RTC_ExitInitMode+0x78>)
 80072da:	68db      	ldr	r3, [r3, #12]
 80072dc:	4a19      	ldr	r2, [pc, #100]	@ (8007344 <RTC_ExitInitMode+0x78>)
 80072de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80072e2:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80072e4:	4b17      	ldr	r3, [pc, #92]	@ (8007344 <RTC_ExitInitMode+0x78>)
 80072e6:	699b      	ldr	r3, [r3, #24]
 80072e8:	f003 0320 	and.w	r3, r3, #32
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d10c      	bne.n	800730a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f7ff ff91 	bl	8007218 <HAL_RTC_WaitForSynchro>
 80072f6:	4603      	mov	r3, r0
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d01e      	beq.n	800733a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2203      	movs	r2, #3
 8007300:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8007304:	2303      	movs	r3, #3
 8007306:	73fb      	strb	r3, [r7, #15]
 8007308:	e017      	b.n	800733a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800730a:	4b0e      	ldr	r3, [pc, #56]	@ (8007344 <RTC_ExitInitMode+0x78>)
 800730c:	699b      	ldr	r3, [r3, #24]
 800730e:	4a0d      	ldr	r2, [pc, #52]	@ (8007344 <RTC_ExitInitMode+0x78>)
 8007310:	f023 0320 	bic.w	r3, r3, #32
 8007314:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f7ff ff7e 	bl	8007218 <HAL_RTC_WaitForSynchro>
 800731c:	4603      	mov	r3, r0
 800731e:	2b00      	cmp	r3, #0
 8007320:	d005      	beq.n	800732e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2203      	movs	r2, #3
 8007326:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800732a:	2303      	movs	r3, #3
 800732c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800732e:	4b05      	ldr	r3, [pc, #20]	@ (8007344 <RTC_ExitInitMode+0x78>)
 8007330:	699b      	ldr	r3, [r3, #24]
 8007332:	4a04      	ldr	r2, [pc, #16]	@ (8007344 <RTC_ExitInitMode+0x78>)
 8007334:	f043 0320 	orr.w	r3, r3, #32
 8007338:	6193      	str	r3, [r2, #24]
  }

  return status;
 800733a:	7bfb      	ldrb	r3, [r7, #15]
}
 800733c:	4618      	mov	r0, r3
 800733e:	3710      	adds	r7, #16
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}
 8007344:	40002800 	.word	0x40002800

08007348 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007348:	b480      	push	{r7}
 800734a:	b085      	sub	sp, #20
 800734c:	af00      	add	r7, sp, #0
 800734e:	4603      	mov	r3, r0
 8007350:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8007352:	2300      	movs	r3, #0
 8007354:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8007356:	79fb      	ldrb	r3, [r7, #7]
 8007358:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 800735a:	e005      	b.n	8007368 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	3301      	adds	r3, #1
 8007360:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8007362:	7afb      	ldrb	r3, [r7, #11]
 8007364:	3b0a      	subs	r3, #10
 8007366:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8007368:	7afb      	ldrb	r3, [r7, #11]
 800736a:	2b09      	cmp	r3, #9
 800736c:	d8f6      	bhi.n	800735c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	b2db      	uxtb	r3, r3
 8007372:	011b      	lsls	r3, r3, #4
 8007374:	b2da      	uxtb	r2, r3
 8007376:	7afb      	ldrb	r3, [r7, #11]
 8007378:	4313      	orrs	r3, r2
 800737a:	b2db      	uxtb	r3, r3
}
 800737c:	4618      	mov	r0, r3
 800737e:	3714      	adds	r7, #20
 8007380:	46bd      	mov	sp, r7
 8007382:	bc80      	pop	{r7}
 8007384:	4770      	bx	lr
	...

08007388 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8007388:	b480      	push	{r7}
 800738a:	b083      	sub	sp, #12
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8007396:	2b01      	cmp	r3, #1
 8007398:	d101      	bne.n	800739e <HAL_RTCEx_EnableBypassShadow+0x16>
 800739a:	2302      	movs	r3, #2
 800739c:	e01f      	b.n	80073de <HAL_RTCEx_EnableBypassShadow+0x56>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2201      	movs	r2, #1
 80073a2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2202      	movs	r2, #2
 80073aa:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80073ae:	4b0e      	ldr	r3, [pc, #56]	@ (80073e8 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80073b0:	22ca      	movs	r2, #202	@ 0xca
 80073b2:	625a      	str	r2, [r3, #36]	@ 0x24
 80073b4:	4b0c      	ldr	r3, [pc, #48]	@ (80073e8 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80073b6:	2253      	movs	r2, #83	@ 0x53
 80073b8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80073ba:	4b0b      	ldr	r3, [pc, #44]	@ (80073e8 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80073bc:	699b      	ldr	r3, [r3, #24]
 80073be:	4a0a      	ldr	r2, [pc, #40]	@ (80073e8 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80073c0:	f043 0320 	orr.w	r3, r3, #32
 80073c4:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80073c6:	4b08      	ldr	r3, [pc, #32]	@ (80073e8 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80073c8:	22ff      	movs	r2, #255	@ 0xff
 80073ca:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2201      	movs	r2, #1
 80073d0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2200      	movs	r2, #0
 80073d8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80073dc:	2300      	movs	r3, #0
}
 80073de:	4618      	mov	r0, r3
 80073e0:	370c      	adds	r7, #12
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bc80      	pop	{r7}
 80073e6:	4770      	bx	lr
 80073e8:	40002800 	.word	0x40002800

080073ec <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b083      	sub	sp, #12
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80073fa:	2b01      	cmp	r3, #1
 80073fc:	d101      	bne.n	8007402 <HAL_RTCEx_SetSSRU_IT+0x16>
 80073fe:	2302      	movs	r3, #2
 8007400:	e027      	b.n	8007452 <HAL_RTCEx_SetSSRU_IT+0x66>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2201      	movs	r2, #1
 8007406:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2202      	movs	r2, #2
 800740e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007412:	4b12      	ldr	r3, [pc, #72]	@ (800745c <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007414:	22ca      	movs	r2, #202	@ 0xca
 8007416:	625a      	str	r2, [r3, #36]	@ 0x24
 8007418:	4b10      	ldr	r3, [pc, #64]	@ (800745c <HAL_RTCEx_SetSSRU_IT+0x70>)
 800741a:	2253      	movs	r2, #83	@ 0x53
 800741c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 800741e:	4b0f      	ldr	r3, [pc, #60]	@ (800745c <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007420:	699b      	ldr	r3, [r3, #24]
 8007422:	4a0e      	ldr	r2, [pc, #56]	@ (800745c <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007424:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007428:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 800742a:	4b0d      	ldr	r3, [pc, #52]	@ (8007460 <HAL_RTCEx_SetSSRU_IT+0x74>)
 800742c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007430:	4a0b      	ldr	r2, [pc, #44]	@ (8007460 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8007432:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007436:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800743a:	4b08      	ldr	r3, [pc, #32]	@ (800745c <HAL_RTCEx_SetSSRU_IT+0x70>)
 800743c:	22ff      	movs	r2, #255	@ 0xff
 800743e:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2201      	movs	r2, #1
 8007444:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2200      	movs	r2, #0
 800744c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8007450:	2300      	movs	r3, #0
}
 8007452:	4618      	mov	r0, r3
 8007454:	370c      	adds	r7, #12
 8007456:	46bd      	mov	sp, r7
 8007458:	bc80      	pop	{r7}
 800745a:	4770      	bx	lr
 800745c:	40002800 	.word	0x40002800
 8007460:	58000800 	.word	0x58000800

08007464 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b082      	sub	sp, #8
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 800746c:	4b09      	ldr	r3, [pc, #36]	@ (8007494 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 800746e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007470:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007474:	2b00      	cmp	r3, #0
 8007476:	d005      	beq.n	8007484 <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 8007478:	4b06      	ldr	r3, [pc, #24]	@ (8007494 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 800747a:	2240      	movs	r2, #64	@ 0x40
 800747c:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f7fb f997 	bl	80027b2 <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2201      	movs	r2, #1
 8007488:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 800748c:	bf00      	nop
 800748e:	3708      	adds	r7, #8
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}
 8007494:	40002800 	.word	0x40002800

08007498 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8007498:	b480      	push	{r7}
 800749a:	b083      	sub	sp, #12
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80074a0:	bf00      	nop
 80074a2:	370c      	adds	r7, #12
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bc80      	pop	{r7}
 80074a8:	4770      	bx	lr
	...

080074ac <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b087      	sub	sp, #28
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	60f8      	str	r0, [r7, #12]
 80074b4:	60b9      	str	r1, [r7, #8]
 80074b6:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 80074b8:	4b07      	ldr	r3, [pc, #28]	@ (80074d8 <HAL_RTCEx_BKUPWrite+0x2c>)
 80074ba:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	009b      	lsls	r3, r3, #2
 80074c0:	697a      	ldr	r2, [r7, #20]
 80074c2:	4413      	add	r3, r2
 80074c4:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	687a      	ldr	r2, [r7, #4]
 80074ca:	601a      	str	r2, [r3, #0]
}
 80074cc:	bf00      	nop
 80074ce:	371c      	adds	r7, #28
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bc80      	pop	{r7}
 80074d4:	4770      	bx	lr
 80074d6:	bf00      	nop
 80074d8:	4000b100 	.word	0x4000b100

080074dc <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80074dc:	b480      	push	{r7}
 80074de:	b085      	sub	sp, #20
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
 80074e4:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 80074e6:	4b07      	ldr	r3, [pc, #28]	@ (8007504 <HAL_RTCEx_BKUPRead+0x28>)
 80074e8:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	009b      	lsls	r3, r3, #2
 80074ee:	68fa      	ldr	r2, [r7, #12]
 80074f0:	4413      	add	r3, r2
 80074f2:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3714      	adds	r7, #20
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bc80      	pop	{r7}
 8007500:	4770      	bx	lr
 8007502:	bf00      	nop
 8007504:	4000b100 	.word	0x4000b100

08007508 <LL_PWR_SetRadioBusyTrigger>:
{
 8007508:	b480      	push	{r7}
 800750a:	b083      	sub	sp, #12
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8007510:	4b06      	ldr	r3, [pc, #24]	@ (800752c <LL_PWR_SetRadioBusyTrigger+0x24>)
 8007512:	689b      	ldr	r3, [r3, #8]
 8007514:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007518:	4904      	ldr	r1, [pc, #16]	@ (800752c <LL_PWR_SetRadioBusyTrigger+0x24>)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	4313      	orrs	r3, r2
 800751e:	608b      	str	r3, [r1, #8]
}
 8007520:	bf00      	nop
 8007522:	370c      	adds	r7, #12
 8007524:	46bd      	mov	sp, r7
 8007526:	bc80      	pop	{r7}
 8007528:	4770      	bx	lr
 800752a:	bf00      	nop
 800752c:	58000400 	.word	0x58000400

08007530 <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 8007530:	b480      	push	{r7}
 8007532:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007534:	4b05      	ldr	r3, [pc, #20]	@ (800754c <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8007536:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800753a:	4a04      	ldr	r2, [pc, #16]	@ (800754c <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 800753c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007540:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8007544:	bf00      	nop
 8007546:	46bd      	mov	sp, r7
 8007548:	bc80      	pop	{r7}
 800754a:	4770      	bx	lr
 800754c:	58000400 	.word	0x58000400

08007550 <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 8007550:	b480      	push	{r7}
 8007552:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007554:	4b05      	ldr	r3, [pc, #20]	@ (800756c <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8007556:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800755a:	4a04      	ldr	r2, [pc, #16]	@ (800756c <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 800755c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007560:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8007564:	bf00      	nop
 8007566:	46bd      	mov	sp, r7
 8007568:	bc80      	pop	{r7}
 800756a:	4770      	bx	lr
 800756c:	58000400 	.word	0x58000400

08007570 <LL_PWR_ClearFlag_RFBUSY>:
{
 8007570:	b480      	push	{r7}
 8007572:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8007574:	4b03      	ldr	r3, [pc, #12]	@ (8007584 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8007576:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800757a:	619a      	str	r2, [r3, #24]
}
 800757c:	bf00      	nop
 800757e:	46bd      	mov	sp, r7
 8007580:	bc80      	pop	{r7}
 8007582:	4770      	bx	lr
 8007584:	58000400 	.word	0x58000400

08007588 <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 8007588:	b480      	push	{r7}
 800758a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 800758c:	4b06      	ldr	r3, [pc, #24]	@ (80075a8 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 800758e:	695b      	ldr	r3, [r3, #20]
 8007590:	f003 0302 	and.w	r3, r3, #2
 8007594:	2b02      	cmp	r3, #2
 8007596:	d101      	bne.n	800759c <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8007598:	2301      	movs	r3, #1
 800759a:	e000      	b.n	800759e <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 800759c:	2300      	movs	r3, #0
}
 800759e:	4618      	mov	r0, r3
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bc80      	pop	{r7}
 80075a4:	4770      	bx	lr
 80075a6:	bf00      	nop
 80075a8:	58000400 	.word	0x58000400

080075ac <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 80075ac:	b480      	push	{r7}
 80075ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 80075b0:	4b06      	ldr	r3, [pc, #24]	@ (80075cc <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 80075b2:	695b      	ldr	r3, [r3, #20]
 80075b4:	f003 0304 	and.w	r3, r3, #4
 80075b8:	2b04      	cmp	r3, #4
 80075ba:	d101      	bne.n	80075c0 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 80075bc:	2301      	movs	r3, #1
 80075be:	e000      	b.n	80075c2 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 80075c0:	2300      	movs	r3, #0
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bc80      	pop	{r7}
 80075c8:	4770      	bx	lr
 80075ca:	bf00      	nop
 80075cc:	58000400 	.word	0x58000400

080075d0 <LL_RCC_RF_DisableReset>:
{
 80075d0:	b480      	push	{r7}
 80075d2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 80075d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80075d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80075dc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80075e0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80075e4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80075e8:	bf00      	nop
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bc80      	pop	{r7}
 80075ee:	4770      	bx	lr

080075f0 <LL_RCC_IsRFUnderReset>:
{
 80075f0:	b480      	push	{r7}
 80075f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 80075f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80075f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80075fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007600:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007604:	d101      	bne.n	800760a <LL_RCC_IsRFUnderReset+0x1a>
 8007606:	2301      	movs	r3, #1
 8007608:	e000      	b.n	800760c <LL_RCC_IsRFUnderReset+0x1c>
 800760a:	2300      	movs	r3, #0
}
 800760c:	4618      	mov	r0, r3
 800760e:	46bd      	mov	sp, r7
 8007610:	bc80      	pop	{r7}
 8007612:	4770      	bx	lr

08007614 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8007614:	b480      	push	{r7}
 8007616:	b083      	sub	sp, #12
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800761c:	4b06      	ldr	r3, [pc, #24]	@ (8007638 <LL_EXTI_EnableIT_32_63+0x24>)
 800761e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8007622:	4905      	ldr	r1, [pc, #20]	@ (8007638 <LL_EXTI_EnableIT_32_63+0x24>)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	4313      	orrs	r3, r2
 8007628:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800762c:	bf00      	nop
 800762e:	370c      	adds	r7, #12
 8007630:	46bd      	mov	sp, r7
 8007632:	bc80      	pop	{r7}
 8007634:	4770      	bx	lr
 8007636:	bf00      	nop
 8007638:	58000800 	.word	0x58000800

0800763c <HAL_SUBGHZ_Init>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b084      	sub	sp, #16
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d103      	bne.n	8007652 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 800764a:	2301      	movs	r3, #1
 800764c:	73fb      	strb	r3, [r7, #15]
    return status;
 800764e:	7bfb      	ldrb	r3, [r7, #15]
 8007650:	e04b      	b.n	80076ea <HAL_SUBGHZ_Init+0xae>
  }
  else
  {
    status = HAL_OK;
 8007652:	2300      	movs	r3, #0
 8007654:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	799b      	ldrb	r3, [r3, #6]
 800765a:	b2db      	uxtb	r3, r3
 800765c:	2b00      	cmp	r3, #0
 800765e:	d105      	bne.n	800766c <HAL_SUBGHZ_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2200      	movs	r2, #0
 8007664:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f7fa fc04 	bl	8001e74 <HAL_SUBGHZ_MspInit>
#endif /* USE_HAL_ SUBGHZ_REGISTER_CALLBACKS */
  }

  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2202      	movs	r2, #2
 8007670:	719a      	strb	r2, [r3, #6]

  /* De-asserts the reset signal of the Radio peripheral */
  LL_RCC_RF_DisableReset();
 8007672:	f7ff ffad 	bl	80075d0 <LL_RCC_RF_DisableReset>

  /* Verify that Radio in reset status flag is set */
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007676:	4b1f      	ldr	r3, [pc, #124]	@ (80076f4 <HAL_SUBGHZ_Init+0xb8>)
 8007678:	681a      	ldr	r2, [r3, #0]
 800767a:	4613      	mov	r3, r2
 800767c:	00db      	lsls	r3, r3, #3
 800767e:	1a9b      	subs	r3, r3, r2
 8007680:	009b      	lsls	r3, r3, #2
 8007682:	0cdb      	lsrs	r3, r3, #19
 8007684:	2264      	movs	r2, #100	@ 0x64
 8007686:	fb02 f303 	mul.w	r3, r2, r3
 800768a:	60bb      	str	r3, [r7, #8]

  do
  {
    if (count == 0U)
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d105      	bne.n	800769e <HAL_SUBGHZ_Init+0x62>
    {
      status  = HAL_ERROR;
 8007692:	2301      	movs	r3, #1
 8007694:	73fb      	strb	r3, [r7, #15]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2201      	movs	r2, #1
 800769a:	609a      	str	r2, [r3, #8]
      break;
 800769c:	e007      	b.n	80076ae <HAL_SUBGHZ_Init+0x72>
    }
    count--;
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	3b01      	subs	r3, #1
 80076a2:	60bb      	str	r3, [r7, #8]
  } while (LL_RCC_IsRFUnderReset() != 0UL);
 80076a4:	f7ff ffa4 	bl	80075f0 <LL_RCC_IsRFUnderReset>
 80076a8:	4603      	mov	r3, r0
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d1ee      	bne.n	800768c <HAL_SUBGHZ_Init+0x50>

  /* Asserts the reset signal of the Radio peripheral */
  LL_PWR_UnselectSUBGHZSPI_NSS();
 80076ae:	f7ff ff3f 	bl	8007530 <LL_PWR_UnselectSUBGHZSPI_NSS>

  /* Enable wakeup signal of the Radio peripheral */
  LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
  /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 80076b2:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80076b6:	f7ff ffad 	bl	8007614 <LL_EXTI_EnableIT_32_63>

  /* Enable wakeup signal of the Radio peripheral */
  LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 80076ba:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80076be:	f7ff ff23 	bl	8007508 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 80076c2:	f7ff ff55 	bl	8007570 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 80076c6:	7bfb      	ldrb	r3, [r7, #15]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d10a      	bne.n	80076e2 <HAL_SUBGHZ_Init+0xa6>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4618      	mov	r0, r3
 80076d2:	f000 faaf 	bl	8007c34 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2201      	movs	r2, #1
 80076da:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2200      	movs	r2, #0
 80076e0:	609a      	str	r2, [r3, #8]
  }
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2201      	movs	r2, #1
 80076e6:	719a      	strb	r2, [r3, #6]

  return status;
 80076e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3710      	adds	r7, #16
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}
 80076f2:	bf00      	nop
 80076f4:	20000000 	.word	0x20000000

080076f8 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b086      	sub	sp, #24
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	60f8      	str	r0, [r7, #12]
 8007700:	607a      	str	r2, [r7, #4]
 8007702:	461a      	mov	r2, r3
 8007704:	460b      	mov	r3, r1
 8007706:	817b      	strh	r3, [r7, #10]
 8007708:	4613      	mov	r3, r2
 800770a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	799b      	ldrb	r3, [r3, #6]
 8007710:	b2db      	uxtb	r3, r3
 8007712:	2b01      	cmp	r3, #1
 8007714:	d14a      	bne.n	80077ac <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	795b      	ldrb	r3, [r3, #5]
 800771a:	2b01      	cmp	r3, #1
 800771c:	d101      	bne.n	8007722 <HAL_SUBGHZ_WriteRegisters+0x2a>
 800771e:	2302      	movs	r3, #2
 8007720:	e045      	b.n	80077ae <HAL_SUBGHZ_WriteRegisters+0xb6>
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	2201      	movs	r2, #1
 8007726:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	2202      	movs	r2, #2
 800772c:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800772e:	68f8      	ldr	r0, [r7, #12]
 8007730:	f000 fb4e 	bl	8007dd0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007734:	f7ff ff0c 	bl	8007550 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8007738:	210d      	movs	r1, #13
 800773a:	68f8      	ldr	r0, [r7, #12]
 800773c:	f000 fa9a 	bl	8007c74 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8007740:	897b      	ldrh	r3, [r7, #10]
 8007742:	0a1b      	lsrs	r3, r3, #8
 8007744:	b29b      	uxth	r3, r3
 8007746:	b2db      	uxtb	r3, r3
 8007748:	4619      	mov	r1, r3
 800774a:	68f8      	ldr	r0, [r7, #12]
 800774c:	f000 fa92 	bl	8007c74 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8007750:	897b      	ldrh	r3, [r7, #10]
 8007752:	b2db      	uxtb	r3, r3
 8007754:	4619      	mov	r1, r3
 8007756:	68f8      	ldr	r0, [r7, #12]
 8007758:	f000 fa8c 	bl	8007c74 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800775c:	2300      	movs	r3, #0
 800775e:	82bb      	strh	r3, [r7, #20]
 8007760:	e00a      	b.n	8007778 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8007762:	8abb      	ldrh	r3, [r7, #20]
 8007764:	687a      	ldr	r2, [r7, #4]
 8007766:	4413      	add	r3, r2
 8007768:	781b      	ldrb	r3, [r3, #0]
 800776a:	4619      	mov	r1, r3
 800776c:	68f8      	ldr	r0, [r7, #12]
 800776e:	f000 fa81 	bl	8007c74 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007772:	8abb      	ldrh	r3, [r7, #20]
 8007774:	3301      	adds	r3, #1
 8007776:	82bb      	strh	r3, [r7, #20]
 8007778:	8aba      	ldrh	r2, [r7, #20]
 800777a:	893b      	ldrh	r3, [r7, #8]
 800777c:	429a      	cmp	r2, r3
 800777e:	d3f0      	bcc.n	8007762 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007780:	f7ff fed6 	bl	8007530 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007784:	68f8      	ldr	r0, [r7, #12]
 8007786:	f000 fb47 	bl	8007e18 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	689b      	ldr	r3, [r3, #8]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d002      	beq.n	8007798 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8007792:	2301      	movs	r3, #1
 8007794:	75fb      	strb	r3, [r7, #23]
 8007796:	e001      	b.n	800779c <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8007798:	2300      	movs	r3, #0
 800779a:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	2201      	movs	r2, #1
 80077a0:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2200      	movs	r2, #0
 80077a6:	715a      	strb	r2, [r3, #5]

    return status;
 80077a8:	7dfb      	ldrb	r3, [r7, #23]
 80077aa:	e000      	b.n	80077ae <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 80077ac:	2302      	movs	r3, #2
  }
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3718      	adds	r7, #24
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}

080077b6 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 80077b6:	b580      	push	{r7, lr}
 80077b8:	b088      	sub	sp, #32
 80077ba:	af00      	add	r7, sp, #0
 80077bc:	60f8      	str	r0, [r7, #12]
 80077be:	607a      	str	r2, [r7, #4]
 80077c0:	461a      	mov	r2, r3
 80077c2:	460b      	mov	r3, r1
 80077c4:	817b      	strh	r3, [r7, #10]
 80077c6:	4613      	mov	r3, r2
 80077c8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	799b      	ldrb	r3, [r3, #6]
 80077d2:	b2db      	uxtb	r3, r3
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	d14a      	bne.n	800786e <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	795b      	ldrb	r3, [r3, #5]
 80077dc:	2b01      	cmp	r3, #1
 80077de:	d101      	bne.n	80077e4 <HAL_SUBGHZ_ReadRegisters+0x2e>
 80077e0:	2302      	movs	r3, #2
 80077e2:	e045      	b.n	8007870 <HAL_SUBGHZ_ReadRegisters+0xba>
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	2201      	movs	r2, #1
 80077e8:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80077ea:	68f8      	ldr	r0, [r7, #12]
 80077ec:	f000 faf0 	bl	8007dd0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80077f0:	f7ff feae 	bl	8007550 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 80077f4:	211d      	movs	r1, #29
 80077f6:	68f8      	ldr	r0, [r7, #12]
 80077f8:	f000 fa3c 	bl	8007c74 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80077fc:	897b      	ldrh	r3, [r7, #10]
 80077fe:	0a1b      	lsrs	r3, r3, #8
 8007800:	b29b      	uxth	r3, r3
 8007802:	b2db      	uxtb	r3, r3
 8007804:	4619      	mov	r1, r3
 8007806:	68f8      	ldr	r0, [r7, #12]
 8007808:	f000 fa34 	bl	8007c74 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 800780c:	897b      	ldrh	r3, [r7, #10]
 800780e:	b2db      	uxtb	r3, r3
 8007810:	4619      	mov	r1, r3
 8007812:	68f8      	ldr	r0, [r7, #12]
 8007814:	f000 fa2e 	bl	8007c74 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8007818:	2100      	movs	r1, #0
 800781a:	68f8      	ldr	r0, [r7, #12]
 800781c:	f000 fa2a 	bl	8007c74 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007820:	2300      	movs	r3, #0
 8007822:	82fb      	strh	r3, [r7, #22]
 8007824:	e009      	b.n	800783a <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007826:	69b9      	ldr	r1, [r7, #24]
 8007828:	68f8      	ldr	r0, [r7, #12]
 800782a:	f000 fa79 	bl	8007d20 <SUBGHZSPI_Receive>
      pData++;
 800782e:	69bb      	ldr	r3, [r7, #24]
 8007830:	3301      	adds	r3, #1
 8007832:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8007834:	8afb      	ldrh	r3, [r7, #22]
 8007836:	3301      	adds	r3, #1
 8007838:	82fb      	strh	r3, [r7, #22]
 800783a:	8afa      	ldrh	r2, [r7, #22]
 800783c:	893b      	ldrh	r3, [r7, #8]
 800783e:	429a      	cmp	r2, r3
 8007840:	d3f1      	bcc.n	8007826 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007842:	f7ff fe75 	bl	8007530 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007846:	68f8      	ldr	r0, [r7, #12]
 8007848:	f000 fae6 	bl	8007e18 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	689b      	ldr	r3, [r3, #8]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d002      	beq.n	800785a <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8007854:	2301      	movs	r3, #1
 8007856:	77fb      	strb	r3, [r7, #31]
 8007858:	e001      	b.n	800785e <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 800785a:	2300      	movs	r3, #0
 800785c:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	2201      	movs	r2, #1
 8007862:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2200      	movs	r2, #0
 8007868:	715a      	strb	r2, [r3, #5]

    return status;
 800786a:	7ffb      	ldrb	r3, [r7, #31]
 800786c:	e000      	b.n	8007870 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 800786e:	2302      	movs	r3, #2
  }
}
 8007870:	4618      	mov	r0, r3
 8007872:	3720      	adds	r7, #32
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}

08007878 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b086      	sub	sp, #24
 800787c:	af00      	add	r7, sp, #0
 800787e:	60f8      	str	r0, [r7, #12]
 8007880:	607a      	str	r2, [r7, #4]
 8007882:	461a      	mov	r2, r3
 8007884:	460b      	mov	r3, r1
 8007886:	72fb      	strb	r3, [r7, #11]
 8007888:	4613      	mov	r3, r2
 800788a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	799b      	ldrb	r3, [r3, #6]
 8007890:	b2db      	uxtb	r3, r3
 8007892:	2b01      	cmp	r3, #1
 8007894:	d14a      	bne.n	800792c <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	795b      	ldrb	r3, [r3, #5]
 800789a:	2b01      	cmp	r3, #1
 800789c:	d101      	bne.n	80078a2 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 800789e:	2302      	movs	r3, #2
 80078a0:	e045      	b.n	800792e <HAL_SUBGHZ_ExecSetCmd+0xb6>
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	2201      	movs	r2, #1
 80078a6:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80078a8:	68f8      	ldr	r0, [r7, #12]
 80078aa:	f000 fa91 	bl	8007dd0 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 80078ae:	7afb      	ldrb	r3, [r7, #11]
 80078b0:	2b84      	cmp	r3, #132	@ 0x84
 80078b2:	d002      	beq.n	80078ba <HAL_SUBGHZ_ExecSetCmd+0x42>
 80078b4:	7afb      	ldrb	r3, [r7, #11]
 80078b6:	2b94      	cmp	r3, #148	@ 0x94
 80078b8:	d103      	bne.n	80078c2 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2201      	movs	r2, #1
 80078be:	711a      	strb	r2, [r3, #4]
 80078c0:	e002      	b.n	80078c8 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2200      	movs	r2, #0
 80078c6:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80078c8:	f7ff fe42 	bl	8007550 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80078cc:	7afb      	ldrb	r3, [r7, #11]
 80078ce:	4619      	mov	r1, r3
 80078d0:	68f8      	ldr	r0, [r7, #12]
 80078d2:	f000 f9cf 	bl	8007c74 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80078d6:	2300      	movs	r3, #0
 80078d8:	82bb      	strh	r3, [r7, #20]
 80078da:	e00a      	b.n	80078f2 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80078dc:	8abb      	ldrh	r3, [r7, #20]
 80078de:	687a      	ldr	r2, [r7, #4]
 80078e0:	4413      	add	r3, r2
 80078e2:	781b      	ldrb	r3, [r3, #0]
 80078e4:	4619      	mov	r1, r3
 80078e6:	68f8      	ldr	r0, [r7, #12]
 80078e8:	f000 f9c4 	bl	8007c74 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80078ec:	8abb      	ldrh	r3, [r7, #20]
 80078ee:	3301      	adds	r3, #1
 80078f0:	82bb      	strh	r3, [r7, #20]
 80078f2:	8aba      	ldrh	r2, [r7, #20]
 80078f4:	893b      	ldrh	r3, [r7, #8]
 80078f6:	429a      	cmp	r2, r3
 80078f8:	d3f0      	bcc.n	80078dc <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80078fa:	f7ff fe19 	bl	8007530 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 80078fe:	7afb      	ldrb	r3, [r7, #11]
 8007900:	2b84      	cmp	r3, #132	@ 0x84
 8007902:	d002      	beq.n	800790a <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007904:	68f8      	ldr	r0, [r7, #12]
 8007906:	f000 fa87 	bl	8007e18 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	689b      	ldr	r3, [r3, #8]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d002      	beq.n	8007918 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8007912:	2301      	movs	r3, #1
 8007914:	75fb      	strb	r3, [r7, #23]
 8007916:	e001      	b.n	800791c <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8007918:	2300      	movs	r3, #0
 800791a:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	2201      	movs	r2, #1
 8007920:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	2200      	movs	r2, #0
 8007926:	715a      	strb	r2, [r3, #5]

    return status;
 8007928:	7dfb      	ldrb	r3, [r7, #23]
 800792a:	e000      	b.n	800792e <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 800792c:	2302      	movs	r3, #2
  }
}
 800792e:	4618      	mov	r0, r3
 8007930:	3718      	adds	r7, #24
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}

08007936 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8007936:	b580      	push	{r7, lr}
 8007938:	b088      	sub	sp, #32
 800793a:	af00      	add	r7, sp, #0
 800793c:	60f8      	str	r0, [r7, #12]
 800793e:	607a      	str	r2, [r7, #4]
 8007940:	461a      	mov	r2, r3
 8007942:	460b      	mov	r3, r1
 8007944:	72fb      	strb	r3, [r7, #11]
 8007946:	4613      	mov	r3, r2
 8007948:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	799b      	ldrb	r3, [r3, #6]
 8007952:	b2db      	uxtb	r3, r3
 8007954:	2b01      	cmp	r3, #1
 8007956:	d13d      	bne.n	80079d4 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	795b      	ldrb	r3, [r3, #5]
 800795c:	2b01      	cmp	r3, #1
 800795e:	d101      	bne.n	8007964 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8007960:	2302      	movs	r3, #2
 8007962:	e038      	b.n	80079d6 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	2201      	movs	r2, #1
 8007968:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800796a:	68f8      	ldr	r0, [r7, #12]
 800796c:	f000 fa30 	bl	8007dd0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007970:	f7ff fdee 	bl	8007550 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8007974:	7afb      	ldrb	r3, [r7, #11]
 8007976:	4619      	mov	r1, r3
 8007978:	68f8      	ldr	r0, [r7, #12]
 800797a:	f000 f97b 	bl	8007c74 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800797e:	2100      	movs	r1, #0
 8007980:	68f8      	ldr	r0, [r7, #12]
 8007982:	f000 f977 	bl	8007c74 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007986:	2300      	movs	r3, #0
 8007988:	82fb      	strh	r3, [r7, #22]
 800798a:	e009      	b.n	80079a0 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800798c:	69b9      	ldr	r1, [r7, #24]
 800798e:	68f8      	ldr	r0, [r7, #12]
 8007990:	f000 f9c6 	bl	8007d20 <SUBGHZSPI_Receive>
      pData++;
 8007994:	69bb      	ldr	r3, [r7, #24]
 8007996:	3301      	adds	r3, #1
 8007998:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800799a:	8afb      	ldrh	r3, [r7, #22]
 800799c:	3301      	adds	r3, #1
 800799e:	82fb      	strh	r3, [r7, #22]
 80079a0:	8afa      	ldrh	r2, [r7, #22]
 80079a2:	893b      	ldrh	r3, [r7, #8]
 80079a4:	429a      	cmp	r2, r3
 80079a6:	d3f1      	bcc.n	800798c <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80079a8:	f7ff fdc2 	bl	8007530 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80079ac:	68f8      	ldr	r0, [r7, #12]
 80079ae:	f000 fa33 	bl	8007e18 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	689b      	ldr	r3, [r3, #8]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d002      	beq.n	80079c0 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 80079ba:	2301      	movs	r3, #1
 80079bc:	77fb      	strb	r3, [r7, #31]
 80079be:	e001      	b.n	80079c4 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 80079c0:	2300      	movs	r3, #0
 80079c2:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	2201      	movs	r2, #1
 80079c8:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	2200      	movs	r2, #0
 80079ce:	715a      	strb	r2, [r3, #5]

    return status;
 80079d0:	7ffb      	ldrb	r3, [r7, #31]
 80079d2:	e000      	b.n	80079d6 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80079d4:	2302      	movs	r3, #2
  }
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	3720      	adds	r7, #32
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}

080079de <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 80079de:	b580      	push	{r7, lr}
 80079e0:	b086      	sub	sp, #24
 80079e2:	af00      	add	r7, sp, #0
 80079e4:	60f8      	str	r0, [r7, #12]
 80079e6:	607a      	str	r2, [r7, #4]
 80079e8:	461a      	mov	r2, r3
 80079ea:	460b      	mov	r3, r1
 80079ec:	72fb      	strb	r3, [r7, #11]
 80079ee:	4613      	mov	r3, r2
 80079f0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	799b      	ldrb	r3, [r3, #6]
 80079f6:	b2db      	uxtb	r3, r3
 80079f8:	2b01      	cmp	r3, #1
 80079fa:	d13e      	bne.n	8007a7a <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	795b      	ldrb	r3, [r3, #5]
 8007a00:	2b01      	cmp	r3, #1
 8007a02:	d101      	bne.n	8007a08 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8007a04:	2302      	movs	r3, #2
 8007a06:	e039      	b.n	8007a7c <HAL_SUBGHZ_WriteBuffer+0x9e>
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007a0e:	68f8      	ldr	r0, [r7, #12]
 8007a10:	f000 f9de 	bl	8007dd0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007a14:	f7ff fd9c 	bl	8007550 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8007a18:	210e      	movs	r1, #14
 8007a1a:	68f8      	ldr	r0, [r7, #12]
 8007a1c:	f000 f92a 	bl	8007c74 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8007a20:	7afb      	ldrb	r3, [r7, #11]
 8007a22:	4619      	mov	r1, r3
 8007a24:	68f8      	ldr	r0, [r7, #12]
 8007a26:	f000 f925 	bl	8007c74 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	82bb      	strh	r3, [r7, #20]
 8007a2e:	e00a      	b.n	8007a46 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8007a30:	8abb      	ldrh	r3, [r7, #20]
 8007a32:	687a      	ldr	r2, [r7, #4]
 8007a34:	4413      	add	r3, r2
 8007a36:	781b      	ldrb	r3, [r3, #0]
 8007a38:	4619      	mov	r1, r3
 8007a3a:	68f8      	ldr	r0, [r7, #12]
 8007a3c:	f000 f91a 	bl	8007c74 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007a40:	8abb      	ldrh	r3, [r7, #20]
 8007a42:	3301      	adds	r3, #1
 8007a44:	82bb      	strh	r3, [r7, #20]
 8007a46:	8aba      	ldrh	r2, [r7, #20]
 8007a48:	893b      	ldrh	r3, [r7, #8]
 8007a4a:	429a      	cmp	r2, r3
 8007a4c:	d3f0      	bcc.n	8007a30 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007a4e:	f7ff fd6f 	bl	8007530 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007a52:	68f8      	ldr	r0, [r7, #12]
 8007a54:	f000 f9e0 	bl	8007e18 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	689b      	ldr	r3, [r3, #8]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d002      	beq.n	8007a66 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8007a60:	2301      	movs	r3, #1
 8007a62:	75fb      	strb	r3, [r7, #23]
 8007a64:	e001      	b.n	8007a6a <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8007a66:	2300      	movs	r3, #0
 8007a68:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	2201      	movs	r2, #1
 8007a6e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	2200      	movs	r2, #0
 8007a74:	715a      	strb	r2, [r3, #5]

    return status;
 8007a76:	7dfb      	ldrb	r3, [r7, #23]
 8007a78:	e000      	b.n	8007a7c <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8007a7a:	2302      	movs	r3, #2
  }
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3718      	adds	r7, #24
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}

08007a84 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b088      	sub	sp, #32
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	60f8      	str	r0, [r7, #12]
 8007a8c:	607a      	str	r2, [r7, #4]
 8007a8e:	461a      	mov	r2, r3
 8007a90:	460b      	mov	r3, r1
 8007a92:	72fb      	strb	r3, [r7, #11]
 8007a94:	4613      	mov	r3, r2
 8007a96:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	799b      	ldrb	r3, [r3, #6]
 8007aa0:	b2db      	uxtb	r3, r3
 8007aa2:	2b01      	cmp	r3, #1
 8007aa4:	d141      	bne.n	8007b2a <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	795b      	ldrb	r3, [r3, #5]
 8007aaa:	2b01      	cmp	r3, #1
 8007aac:	d101      	bne.n	8007ab2 <HAL_SUBGHZ_ReadBuffer+0x2e>
 8007aae:	2302      	movs	r3, #2
 8007ab0:	e03c      	b.n	8007b2c <HAL_SUBGHZ_ReadBuffer+0xa8>
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	2201      	movs	r2, #1
 8007ab6:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007ab8:	68f8      	ldr	r0, [r7, #12]
 8007aba:	f000 f989 	bl	8007dd0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007abe:	f7ff fd47 	bl	8007550 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8007ac2:	211e      	movs	r1, #30
 8007ac4:	68f8      	ldr	r0, [r7, #12]
 8007ac6:	f000 f8d5 	bl	8007c74 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8007aca:	7afb      	ldrb	r3, [r7, #11]
 8007acc:	4619      	mov	r1, r3
 8007ace:	68f8      	ldr	r0, [r7, #12]
 8007ad0:	f000 f8d0 	bl	8007c74 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8007ad4:	2100      	movs	r1, #0
 8007ad6:	68f8      	ldr	r0, [r7, #12]
 8007ad8:	f000 f8cc 	bl	8007c74 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007adc:	2300      	movs	r3, #0
 8007ade:	82fb      	strh	r3, [r7, #22]
 8007ae0:	e009      	b.n	8007af6 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007ae2:	69b9      	ldr	r1, [r7, #24]
 8007ae4:	68f8      	ldr	r0, [r7, #12]
 8007ae6:	f000 f91b 	bl	8007d20 <SUBGHZSPI_Receive>
      pData++;
 8007aea:	69bb      	ldr	r3, [r7, #24]
 8007aec:	3301      	adds	r3, #1
 8007aee:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8007af0:	8afb      	ldrh	r3, [r7, #22]
 8007af2:	3301      	adds	r3, #1
 8007af4:	82fb      	strh	r3, [r7, #22]
 8007af6:	8afa      	ldrh	r2, [r7, #22]
 8007af8:	893b      	ldrh	r3, [r7, #8]
 8007afa:	429a      	cmp	r2, r3
 8007afc:	d3f1      	bcc.n	8007ae2 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007afe:	f7ff fd17 	bl	8007530 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007b02:	68f8      	ldr	r0, [r7, #12]
 8007b04:	f000 f988 	bl	8007e18 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	689b      	ldr	r3, [r3, #8]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d002      	beq.n	8007b16 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8007b10:	2301      	movs	r3, #1
 8007b12:	77fb      	strb	r3, [r7, #31]
 8007b14:	e001      	b.n	8007b1a <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8007b16:	2300      	movs	r3, #0
 8007b18:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	2201      	movs	r2, #1
 8007b1e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	2200      	movs	r2, #0
 8007b24:	715a      	strb	r2, [r3, #5]

    return status;
 8007b26:	7ffb      	ldrb	r3, [r7, #31]
 8007b28:	e000      	b.n	8007b2c <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8007b2a:	2302      	movs	r3, #2
  }
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3720      	adds	r7, #32
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}

08007b34 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b084      	sub	sp, #16
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8007b40:	f107 020c 	add.w	r2, r7, #12
 8007b44:	2302      	movs	r3, #2
 8007b46:	2112      	movs	r1, #18
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f7ff fef4 	bl	8007936 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8007b4e:	7b3b      	ldrb	r3, [r7, #12]
 8007b50:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8007b52:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007b56:	021b      	lsls	r3, r3, #8
 8007b58:	b21a      	sxth	r2, r3
 8007b5a:	7b7b      	ldrb	r3, [r7, #13]
 8007b5c:	b21b      	sxth	r3, r3
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	b21b      	sxth	r3, r3
 8007b62:	81fb      	strh	r3, [r7, #14]

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8007b64:	89fb      	ldrh	r3, [r7, #14]
 8007b66:	f003 0301 	and.w	r3, r3, #1
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d002      	beq.n	8007b74 <HAL_SUBGHZ_IRQHandler+0x40>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f012 fb74 	bl	801a25c <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8007b74:	89fb      	ldrh	r3, [r7, #14]
 8007b76:	085b      	lsrs	r3, r3, #1
 8007b78:	f003 0301 	and.w	r3, r3, #1
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d002      	beq.n	8007b86 <HAL_SUBGHZ_IRQHandler+0x52>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f012 fb79 	bl	801a278 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8007b86:	89fb      	ldrh	r3, [r7, #14]
 8007b88:	089b      	lsrs	r3, r3, #2
 8007b8a:	f003 0301 	and.w	r3, r3, #1
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d002      	beq.n	8007b98 <HAL_SUBGHZ_IRQHandler+0x64>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f012 fbc8 	bl	801a328 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8007b98:	89fb      	ldrh	r3, [r7, #14]
 8007b9a:	08db      	lsrs	r3, r3, #3
 8007b9c:	f003 0301 	and.w	r3, r3, #1
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d002      	beq.n	8007baa <HAL_SUBGHZ_IRQHandler+0x76>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f012 fbcd 	bl	801a344 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8007baa:	89fb      	ldrh	r3, [r7, #14]
 8007bac:	091b      	lsrs	r3, r3, #4
 8007bae:	f003 0301 	and.w	r3, r3, #1
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d002      	beq.n	8007bbc <HAL_SUBGHZ_IRQHandler+0x88>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f012 fbd2 	bl	801a360 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8007bbc:	89fb      	ldrh	r3, [r7, #14]
 8007bbe:	095b      	lsrs	r3, r3, #5
 8007bc0:	f003 0301 	and.w	r3, r3, #1
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d002      	beq.n	8007bce <HAL_SUBGHZ_IRQHandler+0x9a>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f012 fb9f 	bl	801a30c <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8007bce:	89fb      	ldrh	r3, [r7, #14]
 8007bd0:	099b      	lsrs	r3, r3, #6
 8007bd2:	f003 0301 	and.w	r3, r3, #1
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d002      	beq.n	8007be0 <HAL_SUBGHZ_IRQHandler+0xac>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f012 fb5a 	bl	801a294 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8007be0:	89fb      	ldrh	r3, [r7, #14]
 8007be2:	09db      	lsrs	r3, r3, #7
 8007be4:	f003 0301 	and.w	r3, r3, #1
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d00e      	beq.n	8007c0a <HAL_SUBGHZ_IRQHandler+0xd6>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8007bec:	89fb      	ldrh	r3, [r7, #14]
 8007bee:	0a1b      	lsrs	r3, r3, #8
 8007bf0:	f003 0301 	and.w	r3, r3, #1
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d004      	beq.n	8007c02 <HAL_SUBGHZ_IRQHandler+0xce>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8007bf8:	2101      	movs	r1, #1
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f012 fb58 	bl	801a2b0 <HAL_SUBGHZ_CADStatusCallback>
 8007c00:	e003      	b.n	8007c0a <HAL_SUBGHZ_IRQHandler+0xd6>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8007c02:	2100      	movs	r1, #0
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f012 fb53 	bl	801a2b0 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8007c0a:	89fb      	ldrh	r3, [r7, #14]
 8007c0c:	0a5b      	lsrs	r3, r3, #9
 8007c0e:	f003 0301 	and.w	r3, r3, #1
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d002      	beq.n	8007c1c <HAL_SUBGHZ_IRQHandler+0xe8>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f012 fb68 	bl	801a2ec <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 8007c1c:	f107 020c 	add.w	r2, r7, #12
 8007c20:	2302      	movs	r3, #2
 8007c22:	2102      	movs	r1, #2
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f7ff fe27 	bl	8007878 <HAL_SUBGHZ_ExecSetCmd>
}
 8007c2a:	bf00      	nop
 8007c2c:	3710      	adds	r7, #16
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}
	...

08007c34 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b083      	sub	sp, #12
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8007c3c:	4b0c      	ldr	r3, [pc, #48]	@ (8007c70 <SUBGHZSPI_Init+0x3c>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4a0b      	ldr	r2, [pc, #44]	@ (8007c70 <SUBGHZSPI_Init+0x3c>)
 8007c42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c46:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8007c48:	4a09      	ldr	r2, [pc, #36]	@ (8007c70 <SUBGHZSPI_Init+0x3c>)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f443 7341 	orr.w	r3, r3, #772	@ 0x304
 8007c50:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8007c52:	4b07      	ldr	r3, [pc, #28]	@ (8007c70 <SUBGHZSPI_Init+0x3c>)
 8007c54:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 8007c58:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8007c5a:	4b05      	ldr	r3, [pc, #20]	@ (8007c70 <SUBGHZSPI_Init+0x3c>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	4a04      	ldr	r2, [pc, #16]	@ (8007c70 <SUBGHZSPI_Init+0x3c>)
 8007c60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c64:	6013      	str	r3, [r2, #0]
}
 8007c66:	bf00      	nop
 8007c68:	370c      	adds	r7, #12
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bc80      	pop	{r7}
 8007c6e:	4770      	bx	lr
 8007c70:	58010000 	.word	0x58010000

08007c74 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8007c74:	b480      	push	{r7}
 8007c76:	b087      	sub	sp, #28
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
 8007c7c:	460b      	mov	r3, r1
 8007c7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8007c80:	2300      	movs	r3, #0
 8007c82:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007c84:	4b23      	ldr	r3, [pc, #140]	@ (8007d14 <SUBGHZSPI_Transmit+0xa0>)
 8007c86:	681a      	ldr	r2, [r3, #0]
 8007c88:	4613      	mov	r3, r2
 8007c8a:	00db      	lsls	r3, r3, #3
 8007c8c:	1a9b      	subs	r3, r3, r2
 8007c8e:	009b      	lsls	r3, r3, #2
 8007c90:	0cdb      	lsrs	r3, r3, #19
 8007c92:	2264      	movs	r2, #100	@ 0x64
 8007c94:	fb02 f303 	mul.w	r3, r2, r3
 8007c98:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d105      	bne.n	8007cac <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	609a      	str	r2, [r3, #8]
      break;
 8007caa:	e008      	b.n	8007cbe <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	3b01      	subs	r3, #1
 8007cb0:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8007cb2:	4b19      	ldr	r3, [pc, #100]	@ (8007d18 <SUBGHZSPI_Transmit+0xa4>)
 8007cb4:	689b      	ldr	r3, [r3, #8]
 8007cb6:	f003 0302 	and.w	r3, r3, #2
 8007cba:	2b02      	cmp	r3, #2
 8007cbc:	d1ed      	bne.n	8007c9a <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8007cbe:	4b17      	ldr	r3, [pc, #92]	@ (8007d1c <SUBGHZSPI_Transmit+0xa8>)
 8007cc0:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8007cc2:	693b      	ldr	r3, [r7, #16]
 8007cc4:	78fa      	ldrb	r2, [r7, #3]
 8007cc6:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007cc8:	4b12      	ldr	r3, [pc, #72]	@ (8007d14 <SUBGHZSPI_Transmit+0xa0>)
 8007cca:	681a      	ldr	r2, [r3, #0]
 8007ccc:	4613      	mov	r3, r2
 8007cce:	00db      	lsls	r3, r3, #3
 8007cd0:	1a9b      	subs	r3, r3, r2
 8007cd2:	009b      	lsls	r3, r3, #2
 8007cd4:	0cdb      	lsrs	r3, r3, #19
 8007cd6:	2264      	movs	r2, #100	@ 0x64
 8007cd8:	fb02 f303 	mul.w	r3, r2, r3
 8007cdc:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d105      	bne.n	8007cf0 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2201      	movs	r2, #1
 8007cec:	609a      	str	r2, [r3, #8]
      break;
 8007cee:	e008      	b.n	8007d02 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	3b01      	subs	r3, #1
 8007cf4:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8007cf6:	4b08      	ldr	r3, [pc, #32]	@ (8007d18 <SUBGHZSPI_Transmit+0xa4>)
 8007cf8:	689b      	ldr	r3, [r3, #8]
 8007cfa:	f003 0301 	and.w	r3, r3, #1
 8007cfe:	2b01      	cmp	r3, #1
 8007d00:	d1ed      	bne.n	8007cde <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8007d02:	4b05      	ldr	r3, [pc, #20]	@ (8007d18 <SUBGHZSPI_Transmit+0xa4>)
 8007d04:	68db      	ldr	r3, [r3, #12]

  return status;
 8007d06:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	371c      	adds	r7, #28
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bc80      	pop	{r7}
 8007d10:	4770      	bx	lr
 8007d12:	bf00      	nop
 8007d14:	20000000 	.word	0x20000000
 8007d18:	58010000 	.word	0x58010000
 8007d1c:	5801000c 	.word	0x5801000c

08007d20 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8007d20:	b480      	push	{r7}
 8007d22:	b087      	sub	sp, #28
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
 8007d28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007d2e:	4b25      	ldr	r3, [pc, #148]	@ (8007dc4 <SUBGHZSPI_Receive+0xa4>)
 8007d30:	681a      	ldr	r2, [r3, #0]
 8007d32:	4613      	mov	r3, r2
 8007d34:	00db      	lsls	r3, r3, #3
 8007d36:	1a9b      	subs	r3, r3, r2
 8007d38:	009b      	lsls	r3, r3, #2
 8007d3a:	0cdb      	lsrs	r3, r3, #19
 8007d3c:	2264      	movs	r2, #100	@ 0x64
 8007d3e:	fb02 f303 	mul.w	r3, r2, r3
 8007d42:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d105      	bne.n	8007d56 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2201      	movs	r2, #1
 8007d52:	609a      	str	r2, [r3, #8]
      break;
 8007d54:	e008      	b.n	8007d68 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	3b01      	subs	r3, #1
 8007d5a:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8007d5c:	4b1a      	ldr	r3, [pc, #104]	@ (8007dc8 <SUBGHZSPI_Receive+0xa8>)
 8007d5e:	689b      	ldr	r3, [r3, #8]
 8007d60:	f003 0302 	and.w	r3, r3, #2
 8007d64:	2b02      	cmp	r3, #2
 8007d66:	d1ed      	bne.n	8007d44 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8007d68:	4b18      	ldr	r3, [pc, #96]	@ (8007dcc <SUBGHZSPI_Receive+0xac>)
 8007d6a:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8007d6c:	693b      	ldr	r3, [r7, #16]
 8007d6e:	22ff      	movs	r2, #255	@ 0xff
 8007d70:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007d72:	4b14      	ldr	r3, [pc, #80]	@ (8007dc4 <SUBGHZSPI_Receive+0xa4>)
 8007d74:	681a      	ldr	r2, [r3, #0]
 8007d76:	4613      	mov	r3, r2
 8007d78:	00db      	lsls	r3, r3, #3
 8007d7a:	1a9b      	subs	r3, r3, r2
 8007d7c:	009b      	lsls	r3, r3, #2
 8007d7e:	0cdb      	lsrs	r3, r3, #19
 8007d80:	2264      	movs	r2, #100	@ 0x64
 8007d82:	fb02 f303 	mul.w	r3, r2, r3
 8007d86:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d105      	bne.n	8007d9a <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2201      	movs	r2, #1
 8007d96:	609a      	str	r2, [r3, #8]
      break;
 8007d98:	e008      	b.n	8007dac <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	3b01      	subs	r3, #1
 8007d9e:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8007da0:	4b09      	ldr	r3, [pc, #36]	@ (8007dc8 <SUBGHZSPI_Receive+0xa8>)
 8007da2:	689b      	ldr	r3, [r3, #8]
 8007da4:	f003 0301 	and.w	r3, r3, #1
 8007da8:	2b01      	cmp	r3, #1
 8007daa:	d1ed      	bne.n	8007d88 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8007dac:	4b06      	ldr	r3, [pc, #24]	@ (8007dc8 <SUBGHZSPI_Receive+0xa8>)
 8007dae:	68db      	ldr	r3, [r3, #12]
 8007db0:	b2da      	uxtb	r2, r3
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	701a      	strb	r2, [r3, #0]

  return status;
 8007db6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	371c      	adds	r7, #28
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bc80      	pop	{r7}
 8007dc0:	4770      	bx	lr
 8007dc2:	bf00      	nop
 8007dc4:	20000000 	.word	0x20000000
 8007dc8:	58010000 	.word	0x58010000
 8007dcc:	5801000c 	.word	0x5801000c

08007dd0 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b084      	sub	sp, #16
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	791b      	ldrb	r3, [r3, #4]
 8007ddc:	2b01      	cmp	r3, #1
 8007dde:	d111      	bne.n	8007e04 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8007de0:	4b0c      	ldr	r3, [pc, #48]	@ (8007e14 <SUBGHZ_CheckDeviceReady+0x44>)
 8007de2:	681a      	ldr	r2, [r3, #0]
 8007de4:	4613      	mov	r3, r2
 8007de6:	005b      	lsls	r3, r3, #1
 8007de8:	4413      	add	r3, r2
 8007dea:	00db      	lsls	r3, r3, #3
 8007dec:	0c1b      	lsrs	r3, r3, #16
 8007dee:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007df0:	f7ff fbae 	bl	8007550 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	3b01      	subs	r3, #1
 8007df8:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d1f9      	bne.n	8007df4 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007e00:	f7ff fb96 	bl	8007530 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f000 f807 	bl	8007e18 <SUBGHZ_WaitOnBusy>
 8007e0a:	4603      	mov	r3, r0
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	3710      	adds	r7, #16
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}
 8007e14:	20000000 	.word	0x20000000

08007e18 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b086      	sub	sp, #24
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8007e20:	2300      	movs	r3, #0
 8007e22:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8007e24:	4b12      	ldr	r3, [pc, #72]	@ (8007e70 <SUBGHZ_WaitOnBusy+0x58>)
 8007e26:	681a      	ldr	r2, [r3, #0]
 8007e28:	4613      	mov	r3, r2
 8007e2a:	005b      	lsls	r3, r3, #1
 8007e2c:	4413      	add	r3, r2
 8007e2e:	00db      	lsls	r3, r3, #3
 8007e30:	0d1b      	lsrs	r3, r3, #20
 8007e32:	2264      	movs	r2, #100	@ 0x64
 8007e34:	fb02 f303 	mul.w	r3, r2, r3
 8007e38:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8007e3a:	f7ff fbb7 	bl	80075ac <LL_PWR_IsActiveFlag_RFBUSYMS>
 8007e3e:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d105      	bne.n	8007e52 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8007e46:	2301      	movs	r3, #1
 8007e48:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2202      	movs	r2, #2
 8007e4e:	609a      	str	r2, [r3, #8]
      break;
 8007e50:	e009      	b.n	8007e66 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	3b01      	subs	r3, #1
 8007e56:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8007e58:	f7ff fb96 	bl	8007588 <LL_PWR_IsActiveFlag_RFBUSYS>
 8007e5c:	4602      	mov	r2, r0
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	4013      	ands	r3, r2
 8007e62:	2b01      	cmp	r3, #1
 8007e64:	d0e9      	beq.n	8007e3a <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8007e66:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	3718      	adds	r7, #24
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}
 8007e70:	20000000 	.word	0x20000000

08007e74 <LL_RCC_GetUSARTClockSource>:
{
 8007e74:	b480      	push	{r7}
 8007e76:	b083      	sub	sp, #12
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8007e7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007e80:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	401a      	ands	r2, r3
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	041b      	lsls	r3, r3, #16
 8007e8c:	4313      	orrs	r3, r2
}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	370c      	adds	r7, #12
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bc80      	pop	{r7}
 8007e96:	4770      	bx	lr

08007e98 <LL_RCC_GetLPUARTClockSource>:
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b083      	sub	sp, #12
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8007ea0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007ea4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	4013      	ands	r3, r2
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	370c      	adds	r7, #12
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bc80      	pop	{r7}
 8007eb4:	4770      	bx	lr

08007eb6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007eb6:	b580      	push	{r7, lr}
 8007eb8:	b082      	sub	sp, #8
 8007eba:	af00      	add	r7, sp, #0
 8007ebc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d101      	bne.n	8007ec8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	e042      	b.n	8007f4e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d106      	bne.n	8007ee0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f7fa fe44 	bl	8002b68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2224      	movs	r2, #36	@ 0x24
 8007ee4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  __HAL_UART_DISABLE(huart);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	681a      	ldr	r2, [r3, #0]
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f022 0201 	bic.w	r2, r2, #1
 8007ef6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f000 fc4b 	bl	8008794 <UART_SetConfig>
 8007efe:	4603      	mov	r3, r0
 8007f00:	2b01      	cmp	r3, #1
 8007f02:	d101      	bne.n	8007f08 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007f04:	2301      	movs	r3, #1
 8007f06:	e022      	b.n	8007f4e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d002      	beq.n	8007f16 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f000 feb3 	bl	8008c7c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	685a      	ldr	r2, [r3, #4]
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007f24:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	689a      	ldr	r2, [r3, #8]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007f34:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	681a      	ldr	r2, [r3, #0]
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f042 0201 	orr.w	r2, r2, #1
 8007f44:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f000 ff39 	bl	8008dbe <UART_CheckIdleState>
 8007f4c:	4603      	mov	r3, r0
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	3708      	adds	r7, #8
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}
	...

08007f58 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b08a      	sub	sp, #40	@ 0x28
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	60f8      	str	r0, [r7, #12]
 8007f60:	60b9      	str	r1, [r7, #8]
 8007f62:	4613      	mov	r3, r2
 8007f64:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f6c:	2b20      	cmp	r3, #32
 8007f6e:	d142      	bne.n	8007ff6 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d002      	beq.n	8007f7c <HAL_UART_Receive_IT+0x24>
 8007f76:	88fb      	ldrh	r3, [r7, #6]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d101      	bne.n	8007f80 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	e03b      	b.n	8007ff8 <HAL_UART_Receive_IT+0xa0>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007f86:	2b01      	cmp	r3, #1
 8007f88:	d101      	bne.n	8007f8e <HAL_UART_Receive_IT+0x36>
 8007f8a:	2302      	movs	r3, #2
 8007f8c:	e034      	b.n	8007ff8 <HAL_UART_Receive_IT+0xa0>
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	2201      	movs	r2, #1
 8007f92:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	4a17      	ldr	r2, [pc, #92]	@ (8008000 <HAL_UART_Receive_IT+0xa8>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d01f      	beq.n	8007fe6 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	685b      	ldr	r3, [r3, #4]
 8007fac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d018      	beq.n	8007fe6 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	e853 3f00 	ldrex	r3, [r3]
 8007fc0:	613b      	str	r3, [r7, #16]
   return(result);
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007fc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	461a      	mov	r2, r3
 8007fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fd2:	623b      	str	r3, [r7, #32]
 8007fd4:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fd6:	69f9      	ldr	r1, [r7, #28]
 8007fd8:	6a3a      	ldr	r2, [r7, #32]
 8007fda:	e841 2300 	strex	r3, r2, [r1]
 8007fde:	61bb      	str	r3, [r7, #24]
   return(result);
 8007fe0:	69bb      	ldr	r3, [r7, #24]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d1e6      	bne.n	8007fb4 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8007fe6:	88fb      	ldrh	r3, [r7, #6]
 8007fe8:	461a      	mov	r2, r3
 8007fea:	68b9      	ldr	r1, [r7, #8]
 8007fec:	68f8      	ldr	r0, [r7, #12]
 8007fee:	f000 fff9 	bl	8008fe4 <UART_Start_Receive_IT>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	e000      	b.n	8007ff8 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007ff6:	2302      	movs	r3, #2
  }
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	3728      	adds	r7, #40	@ 0x28
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}
 8008000:	40008000 	.word	0x40008000

08008004 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b08a      	sub	sp, #40	@ 0x28
 8008008:	af00      	add	r7, sp, #0
 800800a:	60f8      	str	r0, [r7, #12]
 800800c:	60b9      	str	r1, [r7, #8]
 800800e:	4613      	mov	r3, r2
 8008010:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008018:	2b20      	cmp	r3, #32
 800801a:	d17a      	bne.n	8008112 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d002      	beq.n	8008028 <HAL_UART_Transmit_DMA+0x24>
 8008022:	88fb      	ldrh	r3, [r7, #6]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d101      	bne.n	800802c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8008028:	2301      	movs	r3, #1
 800802a:	e073      	b.n	8008114 <HAL_UART_Transmit_DMA+0x110>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8008032:	2b01      	cmp	r3, #1
 8008034:	d101      	bne.n	800803a <HAL_UART_Transmit_DMA+0x36>
 8008036:	2302      	movs	r3, #2
 8008038:	e06c      	b.n	8008114 <HAL_UART_Transmit_DMA+0x110>
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	2201      	movs	r2, #1
 800803e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    huart->pTxBuffPtr  = pData;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	68ba      	ldr	r2, [r7, #8]
 8008046:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	88fa      	ldrh	r2, [r7, #6]
 800804c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	88fa      	ldrh	r2, [r7, #6]
 8008054:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	2200      	movs	r2, #0
 800805c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	2221      	movs	r2, #33	@ 0x21
 8008064:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    if (huart->hdmatx != NULL)
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800806c:	2b00      	cmp	r3, #0
 800806e:	d02c      	beq.n	80080ca <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008074:	4a29      	ldr	r2, [pc, #164]	@ (800811c <HAL_UART_Transmit_DMA+0x118>)
 8008076:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800807c:	4a28      	ldr	r2, [pc, #160]	@ (8008120 <HAL_UART_Transmit_DMA+0x11c>)
 800807e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008084:	4a27      	ldr	r2, [pc, #156]	@ (8008124 <HAL_UART_Transmit_DMA+0x120>)
 8008086:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800808c:	2200      	movs	r2, #0
 800808e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008098:	4619      	mov	r1, r3
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	3328      	adds	r3, #40	@ 0x28
 80080a0:	461a      	mov	r2, r3
 80080a2:	88fb      	ldrh	r3, [r7, #6]
 80080a4:	f7fc fb86 	bl	80047b4 <HAL_DMA_Start_IT>
 80080a8:	4603      	mov	r3, r0
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d00d      	beq.n	80080ca <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	2210      	movs	r2, #16
 80080b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	2200      	movs	r2, #0
 80080ba:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	2220      	movs	r2, #32
 80080c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        return HAL_ERROR;
 80080c6:	2301      	movs	r3, #1
 80080c8:	e024      	b.n	8008114 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	2240      	movs	r2, #64	@ 0x40
 80080d0:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	2200      	movs	r2, #0
 80080d6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	3308      	adds	r3, #8
 80080e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080e2:	697b      	ldr	r3, [r7, #20]
 80080e4:	e853 3f00 	ldrex	r3, [r3]
 80080e8:	613b      	str	r3, [r7, #16]
   return(result);
 80080ea:	693b      	ldr	r3, [r7, #16]
 80080ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	3308      	adds	r3, #8
 80080f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80080fa:	623a      	str	r2, [r7, #32]
 80080fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080fe:	69f9      	ldr	r1, [r7, #28]
 8008100:	6a3a      	ldr	r2, [r7, #32]
 8008102:	e841 2300 	strex	r3, r2, [r1]
 8008106:	61bb      	str	r3, [r7, #24]
   return(result);
 8008108:	69bb      	ldr	r3, [r7, #24]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d1e5      	bne.n	80080da <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800810e:	2300      	movs	r3, #0
 8008110:	e000      	b.n	8008114 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 8008112:	2302      	movs	r3, #2
  }
}
 8008114:	4618      	mov	r0, r3
 8008116:	3728      	adds	r7, #40	@ 0x28
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}
 800811c:	0800937f 	.word	0x0800937f
 8008120:	08009419 	.word	0x08009419
 8008124:	08009435 	.word	0x08009435

08008128 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b0ba      	sub	sp, #232	@ 0xe8
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	69db      	ldr	r3, [r3, #28]
 8008136:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	689b      	ldr	r3, [r3, #8]
 800814a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800814e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008152:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008156:	4013      	ands	r3, r2
 8008158:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800815c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008160:	2b00      	cmp	r3, #0
 8008162:	d11b      	bne.n	800819c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008164:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008168:	f003 0320 	and.w	r3, r3, #32
 800816c:	2b00      	cmp	r3, #0
 800816e:	d015      	beq.n	800819c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008170:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008174:	f003 0320 	and.w	r3, r3, #32
 8008178:	2b00      	cmp	r3, #0
 800817a:	d105      	bne.n	8008188 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800817c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008180:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008184:	2b00      	cmp	r3, #0
 8008186:	d009      	beq.n	800819c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800818c:	2b00      	cmp	r3, #0
 800818e:	f000 82d6 	beq.w	800873e <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	4798      	blx	r3
      }
      return;
 800819a:	e2d0      	b.n	800873e <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800819c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	f000 811f 	beq.w	80083e4 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80081a6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80081aa:	4b8b      	ldr	r3, [pc, #556]	@ (80083d8 <HAL_UART_IRQHandler+0x2b0>)
 80081ac:	4013      	ands	r3, r2
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d106      	bne.n	80081c0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80081b2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80081b6:	4b89      	ldr	r3, [pc, #548]	@ (80083dc <HAL_UART_IRQHandler+0x2b4>)
 80081b8:	4013      	ands	r3, r2
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	f000 8112 	beq.w	80083e4 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80081c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081c4:	f003 0301 	and.w	r3, r3, #1
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d011      	beq.n	80081f0 <HAL_UART_IRQHandler+0xc8>
 80081cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80081d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d00b      	beq.n	80081f0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	2201      	movs	r2, #1
 80081de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80081e6:	f043 0201 	orr.w	r2, r3, #1
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80081f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081f4:	f003 0302 	and.w	r3, r3, #2
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d011      	beq.n	8008220 <HAL_UART_IRQHandler+0xf8>
 80081fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008200:	f003 0301 	and.w	r3, r3, #1
 8008204:	2b00      	cmp	r3, #0
 8008206:	d00b      	beq.n	8008220 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	2202      	movs	r2, #2
 800820e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008216:	f043 0204 	orr.w	r2, r3, #4
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008220:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008224:	f003 0304 	and.w	r3, r3, #4
 8008228:	2b00      	cmp	r3, #0
 800822a:	d011      	beq.n	8008250 <HAL_UART_IRQHandler+0x128>
 800822c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008230:	f003 0301 	and.w	r3, r3, #1
 8008234:	2b00      	cmp	r3, #0
 8008236:	d00b      	beq.n	8008250 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	2204      	movs	r2, #4
 800823e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008246:	f043 0202 	orr.w	r2, r3, #2
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008250:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008254:	f003 0308 	and.w	r3, r3, #8
 8008258:	2b00      	cmp	r3, #0
 800825a:	d017      	beq.n	800828c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800825c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008260:	f003 0320 	and.w	r3, r3, #32
 8008264:	2b00      	cmp	r3, #0
 8008266:	d105      	bne.n	8008274 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008268:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800826c:	4b5a      	ldr	r3, [pc, #360]	@ (80083d8 <HAL_UART_IRQHandler+0x2b0>)
 800826e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008270:	2b00      	cmp	r3, #0
 8008272:	d00b      	beq.n	800828c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	2208      	movs	r2, #8
 800827a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008282:	f043 0208 	orr.w	r2, r3, #8
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800828c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008290:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008294:	2b00      	cmp	r3, #0
 8008296:	d012      	beq.n	80082be <HAL_UART_IRQHandler+0x196>
 8008298:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800829c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d00c      	beq.n	80082be <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80082ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80082b4:	f043 0220 	orr.w	r2, r3, #32
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	f000 823c 	beq.w	8008742 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80082ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082ce:	f003 0320 	and.w	r3, r3, #32
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d013      	beq.n	80082fe <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80082d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80082da:	f003 0320 	and.w	r3, r3, #32
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d105      	bne.n	80082ee <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80082e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80082e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d007      	beq.n	80082fe <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d003      	beq.n	80082fe <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008304:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	689b      	ldr	r3, [r3, #8]
 800830e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008312:	2b40      	cmp	r3, #64	@ 0x40
 8008314:	d005      	beq.n	8008322 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008316:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800831a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800831e:	2b00      	cmp	r3, #0
 8008320:	d04f      	beq.n	80083c2 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f000 ffc6 	bl	80092b4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	689b      	ldr	r3, [r3, #8]
 800832e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008332:	2b40      	cmp	r3, #64	@ 0x40
 8008334:	d141      	bne.n	80083ba <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	3308      	adds	r3, #8
 800833c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008340:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008344:	e853 3f00 	ldrex	r3, [r3]
 8008348:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800834c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008350:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008354:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	3308      	adds	r3, #8
 800835e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008362:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008366:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800836a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800836e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008372:	e841 2300 	strex	r3, r2, [r1]
 8008376:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800837a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800837e:	2b00      	cmp	r3, #0
 8008380:	d1d9      	bne.n	8008336 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008386:	2b00      	cmp	r3, #0
 8008388:	d013      	beq.n	80083b2 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800838e:	4a14      	ldr	r2, [pc, #80]	@ (80083e0 <HAL_UART_IRQHandler+0x2b8>)
 8008390:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008396:	4618      	mov	r0, r3
 8008398:	f7fc fae8 	bl	800496c <HAL_DMA_Abort_IT>
 800839c:	4603      	mov	r3, r0
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d017      	beq.n	80083d2 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80083a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083a8:	687a      	ldr	r2, [r7, #4]
 80083aa:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
 80083ac:	4610      	mov	r0, r2
 80083ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083b0:	e00f      	b.n	80083d2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f000 f9d9 	bl	800876a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083b8:	e00b      	b.n	80083d2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f000 f9d5 	bl	800876a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083c0:	e007      	b.n	80083d2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f000 f9d1 	bl	800876a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2200      	movs	r2, #0
 80083cc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      }
    }
    return;
 80083d0:	e1b7      	b.n	8008742 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083d2:	bf00      	nop
    return;
 80083d4:	e1b5      	b.n	8008742 <HAL_UART_IRQHandler+0x61a>
 80083d6:	bf00      	nop
 80083d8:	10000001 	.word	0x10000001
 80083dc:	04000120 	.word	0x04000120
 80083e0:	080094b5 	.word	0x080094b5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80083e8:	2b01      	cmp	r3, #1
 80083ea:	f040 814a 	bne.w	8008682 <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80083ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80083f2:	f003 0310 	and.w	r3, r3, #16
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	f000 8143 	beq.w	8008682 <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80083fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008400:	f003 0310 	and.w	r3, r3, #16
 8008404:	2b00      	cmp	r3, #0
 8008406:	f000 813c 	beq.w	8008682 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	2210      	movs	r2, #16
 8008410:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	689b      	ldr	r3, [r3, #8]
 8008418:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800841c:	2b40      	cmp	r3, #64	@ 0x40
 800841e:	f040 80b5 	bne.w	800858c <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	685b      	ldr	r3, [r3, #4]
 800842a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if (  (nb_remaining_rx_data > 0U)
 800842e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008432:	2b00      	cmp	r3, #0
 8008434:	f000 8187 	beq.w	8008746 <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800843e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008442:	429a      	cmp	r2, r3
 8008444:	f080 817f 	bcs.w	8008746 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800844e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f003 0320 	and.w	r3, r3, #32
 800845e:	2b00      	cmp	r3, #0
 8008460:	f040 8086 	bne.w	8008570 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800846c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008470:	e853 3f00 	ldrex	r3, [r3]
 8008474:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008478:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800847c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008480:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	461a      	mov	r2, r3
 800848a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800848e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008492:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008496:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800849a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800849e:	e841 2300 	strex	r3, r2, [r1]
 80084a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80084a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d1da      	bne.n	8008464 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	3308      	adds	r3, #8
 80084b4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80084b8:	e853 3f00 	ldrex	r3, [r3]
 80084bc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80084be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80084c0:	f023 0301 	bic.w	r3, r3, #1
 80084c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	3308      	adds	r3, #8
 80084ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80084d2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80084d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084d8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80084da:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80084de:	e841 2300 	strex	r3, r2, [r1]
 80084e2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80084e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d1e1      	bne.n	80084ae <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	3308      	adds	r3, #8
 80084f0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80084f4:	e853 3f00 	ldrex	r3, [r3]
 80084f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80084fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80084fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008500:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	3308      	adds	r3, #8
 800850a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800850e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008510:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008512:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008514:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008516:	e841 2300 	strex	r3, r2, [r1]
 800851a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800851c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800851e:	2b00      	cmp	r3, #0
 8008520:	d1e3      	bne.n	80084ea <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2220      	movs	r2, #32
 8008526:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2200      	movs	r2, #0
 800852e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008536:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008538:	e853 3f00 	ldrex	r3, [r3]
 800853c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800853e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008540:	f023 0310 	bic.w	r3, r3, #16
 8008544:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	461a      	mov	r2, r3
 800854e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008552:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008554:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008556:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008558:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800855a:	e841 2300 	strex	r3, r2, [r1]
 800855e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008560:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008562:	2b00      	cmp	r3, #0
 8008564:	d1e4      	bne.n	8008530 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800856a:	4618      	mov	r0, r3
 800856c:	f7fc f9a0 	bl	80048b0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800857c:	b29b      	uxth	r3, r3
 800857e:	1ad3      	subs	r3, r2, r3
 8008580:	b29b      	uxth	r3, r3
 8008582:	4619      	mov	r1, r3
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f000 f8f9 	bl	800877c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800858a:	e0dc      	b.n	8008746 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008598:	b29b      	uxth	r3, r3
 800859a:	1ad3      	subs	r3, r2, r3
 800859c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if (  (huart->RxXferCount > 0U)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80085a6:	b29b      	uxth	r3, r3
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	f000 80ce 	beq.w	800874a <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 80085ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	f000 80c9 	beq.w	800874a <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085c0:	e853 3f00 	ldrex	r3, [r3]
 80085c4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80085c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80085cc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	461a      	mov	r2, r3
 80085d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80085da:	647b      	str	r3, [r7, #68]	@ 0x44
 80085dc:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085de:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80085e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80085e2:	e841 2300 	strex	r3, r2, [r1]
 80085e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80085e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d1e4      	bne.n	80085b8 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	3308      	adds	r3, #8
 80085f4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085f8:	e853 3f00 	ldrex	r3, [r3]
 80085fc:	623b      	str	r3, [r7, #32]
   return(result);
 80085fe:	6a3b      	ldr	r3, [r7, #32]
 8008600:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008604:	f023 0301 	bic.w	r3, r3, #1
 8008608:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	3308      	adds	r3, #8
 8008612:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008616:	633a      	str	r2, [r7, #48]	@ 0x30
 8008618:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800861a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800861c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800861e:	e841 2300 	strex	r3, r2, [r1]
 8008622:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008626:	2b00      	cmp	r3, #0
 8008628:	d1e1      	bne.n	80085ee <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2220      	movs	r2, #32
 800862e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2200      	movs	r2, #0
 8008636:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2200      	movs	r2, #0
 800863c:	671a      	str	r2, [r3, #112]	@ 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008644:	693b      	ldr	r3, [r7, #16]
 8008646:	e853 3f00 	ldrex	r3, [r3]
 800864a:	60fb      	str	r3, [r7, #12]
   return(result);
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	f023 0310 	bic.w	r3, r3, #16
 8008652:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	461a      	mov	r2, r3
 800865c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008660:	61fb      	str	r3, [r7, #28]
 8008662:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008664:	69b9      	ldr	r1, [r7, #24]
 8008666:	69fa      	ldr	r2, [r7, #28]
 8008668:	e841 2300 	strex	r3, r2, [r1]
 800866c:	617b      	str	r3, [r7, #20]
   return(result);
 800866e:	697b      	ldr	r3, [r7, #20]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d1e4      	bne.n	800863e <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008674:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008678:	4619      	mov	r1, r3
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f000 f87e 	bl	800877c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008680:	e063      	b.n	800874a <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008686:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800868a:	2b00      	cmp	r3, #0
 800868c:	d00e      	beq.n	80086ac <HAL_UART_IRQHandler+0x584>
 800868e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008692:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008696:	2b00      	cmp	r3, #0
 8008698:	d008      	beq.n	80086ac <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80086a2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f001 fba3 	bl	8009df0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80086aa:	e051      	b.n	8008750 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80086ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d014      	beq.n	80086e2 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80086b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d105      	bne.n	80086d0 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80086c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80086c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d008      	beq.n	80086e2 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d03a      	beq.n	800874e <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	4798      	blx	r3
    }
    return;
 80086e0:	e035      	b.n	800874e <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80086e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d009      	beq.n	8008702 <HAL_UART_IRQHandler+0x5da>
 80086ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d003      	beq.n	8008702 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f000 fef0 	bl	80094e0 <UART_EndTransmit_IT>
    return;
 8008700:	e026      	b.n	8008750 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008702:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008706:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800870a:	2b00      	cmp	r3, #0
 800870c:	d009      	beq.n	8008722 <HAL_UART_IRQHandler+0x5fa>
 800870e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008712:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008716:	2b00      	cmp	r3, #0
 8008718:	d003      	beq.n	8008722 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f001 fb7a 	bl	8009e14 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008720:	e016      	b.n	8008750 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008726:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800872a:	2b00      	cmp	r3, #0
 800872c:	d010      	beq.n	8008750 <HAL_UART_IRQHandler+0x628>
 800872e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008732:	2b00      	cmp	r3, #0
 8008734:	da0c      	bge.n	8008750 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f001 fb63 	bl	8009e02 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800873c:	e008      	b.n	8008750 <HAL_UART_IRQHandler+0x628>
      return;
 800873e:	bf00      	nop
 8008740:	e006      	b.n	8008750 <HAL_UART_IRQHandler+0x628>
    return;
 8008742:	bf00      	nop
 8008744:	e004      	b.n	8008750 <HAL_UART_IRQHandler+0x628>
      return;
 8008746:	bf00      	nop
 8008748:	e002      	b.n	8008750 <HAL_UART_IRQHandler+0x628>
      return;
 800874a:	bf00      	nop
 800874c:	e000      	b.n	8008750 <HAL_UART_IRQHandler+0x628>
    return;
 800874e:	bf00      	nop
  }
}
 8008750:	37e8      	adds	r7, #232	@ 0xe8
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}
 8008756:	bf00      	nop

08008758 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008758:	b480      	push	{r7}
 800875a:	b083      	sub	sp, #12
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008760:	bf00      	nop
 8008762:	370c      	adds	r7, #12
 8008764:	46bd      	mov	sp, r7
 8008766:	bc80      	pop	{r7}
 8008768:	4770      	bx	lr

0800876a <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800876a:	b480      	push	{r7}
 800876c:	b083      	sub	sp, #12
 800876e:	af00      	add	r7, sp, #0
 8008770:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008772:	bf00      	nop
 8008774:	370c      	adds	r7, #12
 8008776:	46bd      	mov	sp, r7
 8008778:	bc80      	pop	{r7}
 800877a:	4770      	bx	lr

0800877c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800877c:	b480      	push	{r7}
 800877e:	b083      	sub	sp, #12
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
 8008784:	460b      	mov	r3, r1
 8008786:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008788:	bf00      	nop
 800878a:	370c      	adds	r7, #12
 800878c:	46bd      	mov	sp, r7
 800878e:	bc80      	pop	{r7}
 8008790:	4770      	bx	lr
	...

08008794 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008794:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008798:	b08c      	sub	sp, #48	@ 0x30
 800879a:	af00      	add	r7, sp, #0
 800879c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800879e:	2300      	movs	r3, #0
 80087a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80087a4:	697b      	ldr	r3, [r7, #20]
 80087a6:	689a      	ldr	r2, [r3, #8]
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	691b      	ldr	r3, [r3, #16]
 80087ac:	431a      	orrs	r2, r3
 80087ae:	697b      	ldr	r3, [r7, #20]
 80087b0:	695b      	ldr	r3, [r3, #20]
 80087b2:	431a      	orrs	r2, r3
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	69db      	ldr	r3, [r3, #28]
 80087b8:	4313      	orrs	r3, r2
 80087ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80087bc:	697b      	ldr	r3, [r7, #20]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	681a      	ldr	r2, [r3, #0]
 80087c2:	4b94      	ldr	r3, [pc, #592]	@ (8008a14 <UART_SetConfig+0x280>)
 80087c4:	4013      	ands	r3, r2
 80087c6:	697a      	ldr	r2, [r7, #20]
 80087c8:	6812      	ldr	r2, [r2, #0]
 80087ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80087cc:	430b      	orrs	r3, r1
 80087ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80087d0:	697b      	ldr	r3, [r7, #20]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	685b      	ldr	r3, [r3, #4]
 80087d6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	68da      	ldr	r2, [r3, #12]
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	430a      	orrs	r2, r1
 80087e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80087e6:	697b      	ldr	r3, [r7, #20]
 80087e8:	699b      	ldr	r3, [r3, #24]
 80087ea:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80087ec:	697b      	ldr	r3, [r7, #20]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4a89      	ldr	r2, [pc, #548]	@ (8008a18 <UART_SetConfig+0x284>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d004      	beq.n	8008800 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	6a1b      	ldr	r3, [r3, #32]
 80087fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80087fc:	4313      	orrs	r3, r2
 80087fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008800:	697b      	ldr	r3, [r7, #20]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	689b      	ldr	r3, [r3, #8]
 8008806:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800880a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800880e:	697a      	ldr	r2, [r7, #20]
 8008810:	6812      	ldr	r2, [r2, #0]
 8008812:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008814:	430b      	orrs	r3, r1
 8008816:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008818:	697b      	ldr	r3, [r7, #20]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800881e:	f023 010f 	bic.w	r1, r3, #15
 8008822:	697b      	ldr	r3, [r7, #20]
 8008824:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008826:	697b      	ldr	r3, [r7, #20]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	430a      	orrs	r2, r1
 800882c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800882e:	697b      	ldr	r3, [r7, #20]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	4a7a      	ldr	r2, [pc, #488]	@ (8008a1c <UART_SetConfig+0x288>)
 8008834:	4293      	cmp	r3, r2
 8008836:	d127      	bne.n	8008888 <UART_SetConfig+0xf4>
 8008838:	2003      	movs	r0, #3
 800883a:	f7ff fb1b 	bl	8007e74 <LL_RCC_GetUSARTClockSource>
 800883e:	4603      	mov	r3, r0
 8008840:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 8008844:	2b03      	cmp	r3, #3
 8008846:	d81b      	bhi.n	8008880 <UART_SetConfig+0xec>
 8008848:	a201      	add	r2, pc, #4	@ (adr r2, 8008850 <UART_SetConfig+0xbc>)
 800884a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800884e:	bf00      	nop
 8008850:	08008861 	.word	0x08008861
 8008854:	08008871 	.word	0x08008871
 8008858:	08008869 	.word	0x08008869
 800885c:	08008879 	.word	0x08008879
 8008860:	2301      	movs	r3, #1
 8008862:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008866:	e080      	b.n	800896a <UART_SetConfig+0x1d6>
 8008868:	2302      	movs	r3, #2
 800886a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800886e:	e07c      	b.n	800896a <UART_SetConfig+0x1d6>
 8008870:	2304      	movs	r3, #4
 8008872:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008876:	e078      	b.n	800896a <UART_SetConfig+0x1d6>
 8008878:	2308      	movs	r3, #8
 800887a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800887e:	e074      	b.n	800896a <UART_SetConfig+0x1d6>
 8008880:	2310      	movs	r3, #16
 8008882:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008886:	e070      	b.n	800896a <UART_SetConfig+0x1d6>
 8008888:	697b      	ldr	r3, [r7, #20]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	4a64      	ldr	r2, [pc, #400]	@ (8008a20 <UART_SetConfig+0x28c>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d138      	bne.n	8008904 <UART_SetConfig+0x170>
 8008892:	200c      	movs	r0, #12
 8008894:	f7ff faee 	bl	8007e74 <LL_RCC_GetUSARTClockSource>
 8008898:	4603      	mov	r3, r0
 800889a:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 800889e:	2b0c      	cmp	r3, #12
 80088a0:	d82c      	bhi.n	80088fc <UART_SetConfig+0x168>
 80088a2:	a201      	add	r2, pc, #4	@ (adr r2, 80088a8 <UART_SetConfig+0x114>)
 80088a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088a8:	080088dd 	.word	0x080088dd
 80088ac:	080088fd 	.word	0x080088fd
 80088b0:	080088fd 	.word	0x080088fd
 80088b4:	080088fd 	.word	0x080088fd
 80088b8:	080088ed 	.word	0x080088ed
 80088bc:	080088fd 	.word	0x080088fd
 80088c0:	080088fd 	.word	0x080088fd
 80088c4:	080088fd 	.word	0x080088fd
 80088c8:	080088e5 	.word	0x080088e5
 80088cc:	080088fd 	.word	0x080088fd
 80088d0:	080088fd 	.word	0x080088fd
 80088d4:	080088fd 	.word	0x080088fd
 80088d8:	080088f5 	.word	0x080088f5
 80088dc:	2300      	movs	r3, #0
 80088de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088e2:	e042      	b.n	800896a <UART_SetConfig+0x1d6>
 80088e4:	2302      	movs	r3, #2
 80088e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088ea:	e03e      	b.n	800896a <UART_SetConfig+0x1d6>
 80088ec:	2304      	movs	r3, #4
 80088ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088f2:	e03a      	b.n	800896a <UART_SetConfig+0x1d6>
 80088f4:	2308      	movs	r3, #8
 80088f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088fa:	e036      	b.n	800896a <UART_SetConfig+0x1d6>
 80088fc:	2310      	movs	r3, #16
 80088fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008902:	e032      	b.n	800896a <UART_SetConfig+0x1d6>
 8008904:	697b      	ldr	r3, [r7, #20]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	4a43      	ldr	r2, [pc, #268]	@ (8008a18 <UART_SetConfig+0x284>)
 800890a:	4293      	cmp	r3, r2
 800890c:	d12a      	bne.n	8008964 <UART_SetConfig+0x1d0>
 800890e:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8008912:	f7ff fac1 	bl	8007e98 <LL_RCC_GetLPUARTClockSource>
 8008916:	4603      	mov	r3, r0
 8008918:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800891c:	d01a      	beq.n	8008954 <UART_SetConfig+0x1c0>
 800891e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008922:	d81b      	bhi.n	800895c <UART_SetConfig+0x1c8>
 8008924:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008928:	d00c      	beq.n	8008944 <UART_SetConfig+0x1b0>
 800892a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800892e:	d815      	bhi.n	800895c <UART_SetConfig+0x1c8>
 8008930:	2b00      	cmp	r3, #0
 8008932:	d003      	beq.n	800893c <UART_SetConfig+0x1a8>
 8008934:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008938:	d008      	beq.n	800894c <UART_SetConfig+0x1b8>
 800893a:	e00f      	b.n	800895c <UART_SetConfig+0x1c8>
 800893c:	2300      	movs	r3, #0
 800893e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008942:	e012      	b.n	800896a <UART_SetConfig+0x1d6>
 8008944:	2302      	movs	r3, #2
 8008946:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800894a:	e00e      	b.n	800896a <UART_SetConfig+0x1d6>
 800894c:	2304      	movs	r3, #4
 800894e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008952:	e00a      	b.n	800896a <UART_SetConfig+0x1d6>
 8008954:	2308      	movs	r3, #8
 8008956:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800895a:	e006      	b.n	800896a <UART_SetConfig+0x1d6>
 800895c:	2310      	movs	r3, #16
 800895e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008962:	e002      	b.n	800896a <UART_SetConfig+0x1d6>
 8008964:	2310      	movs	r3, #16
 8008966:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	4a2a      	ldr	r2, [pc, #168]	@ (8008a18 <UART_SetConfig+0x284>)
 8008970:	4293      	cmp	r3, r2
 8008972:	f040 80a4 	bne.w	8008abe <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008976:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800897a:	2b08      	cmp	r3, #8
 800897c:	d823      	bhi.n	80089c6 <UART_SetConfig+0x232>
 800897e:	a201      	add	r2, pc, #4	@ (adr r2, 8008984 <UART_SetConfig+0x1f0>)
 8008980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008984:	080089a9 	.word	0x080089a9
 8008988:	080089c7 	.word	0x080089c7
 800898c:	080089b1 	.word	0x080089b1
 8008990:	080089c7 	.word	0x080089c7
 8008994:	080089b7 	.word	0x080089b7
 8008998:	080089c7 	.word	0x080089c7
 800899c:	080089c7 	.word	0x080089c7
 80089a0:	080089c7 	.word	0x080089c7
 80089a4:	080089bf 	.word	0x080089bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80089a8:	f7fd ff46 	bl	8006838 <HAL_RCC_GetPCLK1Freq>
 80089ac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80089ae:	e010      	b.n	80089d2 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80089b0:	4b1c      	ldr	r3, [pc, #112]	@ (8008a24 <UART_SetConfig+0x290>)
 80089b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80089b4:	e00d      	b.n	80089d2 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80089b6:	f7fd fe8b 	bl	80066d0 <HAL_RCC_GetSysClockFreq>
 80089ba:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80089bc:	e009      	b.n	80089d2 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80089be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80089c2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80089c4:	e005      	b.n	80089d2 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 80089c6:	2300      	movs	r3, #0
 80089c8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80089ca:	2301      	movs	r3, #1
 80089cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80089d0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80089d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	f000 8137 	beq.w	8008c48 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80089da:	697b      	ldr	r3, [r7, #20]
 80089dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089de:	4a12      	ldr	r2, [pc, #72]	@ (8008a28 <UART_SetConfig+0x294>)
 80089e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80089e4:	461a      	mov	r2, r3
 80089e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80089ec:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80089ee:	697b      	ldr	r3, [r7, #20]
 80089f0:	685a      	ldr	r2, [r3, #4]
 80089f2:	4613      	mov	r3, r2
 80089f4:	005b      	lsls	r3, r3, #1
 80089f6:	4413      	add	r3, r2
 80089f8:	69ba      	ldr	r2, [r7, #24]
 80089fa:	429a      	cmp	r2, r3
 80089fc:	d305      	bcc.n	8008a0a <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80089fe:	697b      	ldr	r3, [r7, #20]
 8008a00:	685b      	ldr	r3, [r3, #4]
 8008a02:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008a04:	69ba      	ldr	r2, [r7, #24]
 8008a06:	429a      	cmp	r2, r3
 8008a08:	d910      	bls.n	8008a2c <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008a10:	e11a      	b.n	8008c48 <UART_SetConfig+0x4b4>
 8008a12:	bf00      	nop
 8008a14:	cfff69f3 	.word	0xcfff69f3
 8008a18:	40008000 	.word	0x40008000
 8008a1c:	40013800 	.word	0x40013800
 8008a20:	40004400 	.word	0x40004400
 8008a24:	00f42400 	.word	0x00f42400
 8008a28:	0801f294 	.word	0x0801f294
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a2e:	2200      	movs	r2, #0
 8008a30:	60bb      	str	r3, [r7, #8]
 8008a32:	60fa      	str	r2, [r7, #12]
 8008a34:	697b      	ldr	r3, [r7, #20]
 8008a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a38:	4a8e      	ldr	r2, [pc, #568]	@ (8008c74 <UART_SetConfig+0x4e0>)
 8008a3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a3e:	b29b      	uxth	r3, r3
 8008a40:	2200      	movs	r2, #0
 8008a42:	603b      	str	r3, [r7, #0]
 8008a44:	607a      	str	r2, [r7, #4]
 8008a46:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a4a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008a4e:	f7f8 f9b7 	bl	8000dc0 <__aeabi_uldivmod>
 8008a52:	4602      	mov	r2, r0
 8008a54:	460b      	mov	r3, r1
 8008a56:	4610      	mov	r0, r2
 8008a58:	4619      	mov	r1, r3
 8008a5a:	f04f 0200 	mov.w	r2, #0
 8008a5e:	f04f 0300 	mov.w	r3, #0
 8008a62:	020b      	lsls	r3, r1, #8
 8008a64:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008a68:	0202      	lsls	r2, r0, #8
 8008a6a:	6979      	ldr	r1, [r7, #20]
 8008a6c:	6849      	ldr	r1, [r1, #4]
 8008a6e:	0849      	lsrs	r1, r1, #1
 8008a70:	2000      	movs	r0, #0
 8008a72:	460c      	mov	r4, r1
 8008a74:	4605      	mov	r5, r0
 8008a76:	eb12 0804 	adds.w	r8, r2, r4
 8008a7a:	eb43 0905 	adc.w	r9, r3, r5
 8008a7e:	697b      	ldr	r3, [r7, #20]
 8008a80:	685b      	ldr	r3, [r3, #4]
 8008a82:	2200      	movs	r2, #0
 8008a84:	469a      	mov	sl, r3
 8008a86:	4693      	mov	fp, r2
 8008a88:	4652      	mov	r2, sl
 8008a8a:	465b      	mov	r3, fp
 8008a8c:	4640      	mov	r0, r8
 8008a8e:	4649      	mov	r1, r9
 8008a90:	f7f8 f996 	bl	8000dc0 <__aeabi_uldivmod>
 8008a94:	4602      	mov	r2, r0
 8008a96:	460b      	mov	r3, r1
 8008a98:	4613      	mov	r3, r2
 8008a9a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008a9c:	6a3b      	ldr	r3, [r7, #32]
 8008a9e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008aa2:	d308      	bcc.n	8008ab6 <UART_SetConfig+0x322>
 8008aa4:	6a3b      	ldr	r3, [r7, #32]
 8008aa6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008aaa:	d204      	bcs.n	8008ab6 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8008aac:	697b      	ldr	r3, [r7, #20]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	6a3a      	ldr	r2, [r7, #32]
 8008ab2:	60da      	str	r2, [r3, #12]
 8008ab4:	e0c8      	b.n	8008c48 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008abc:	e0c4      	b.n	8008c48 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008abe:	697b      	ldr	r3, [r7, #20]
 8008ac0:	69db      	ldr	r3, [r3, #28]
 8008ac2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008ac6:	d168      	bne.n	8008b9a <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8008ac8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008acc:	2b08      	cmp	r3, #8
 8008ace:	d828      	bhi.n	8008b22 <UART_SetConfig+0x38e>
 8008ad0:	a201      	add	r2, pc, #4	@ (adr r2, 8008ad8 <UART_SetConfig+0x344>)
 8008ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ad6:	bf00      	nop
 8008ad8:	08008afd 	.word	0x08008afd
 8008adc:	08008b05 	.word	0x08008b05
 8008ae0:	08008b0d 	.word	0x08008b0d
 8008ae4:	08008b23 	.word	0x08008b23
 8008ae8:	08008b13 	.word	0x08008b13
 8008aec:	08008b23 	.word	0x08008b23
 8008af0:	08008b23 	.word	0x08008b23
 8008af4:	08008b23 	.word	0x08008b23
 8008af8:	08008b1b 	.word	0x08008b1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008afc:	f7fd fe9c 	bl	8006838 <HAL_RCC_GetPCLK1Freq>
 8008b00:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008b02:	e014      	b.n	8008b2e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008b04:	f7fd feaa 	bl	800685c <HAL_RCC_GetPCLK2Freq>
 8008b08:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008b0a:	e010      	b.n	8008b2e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008b0c:	4b5a      	ldr	r3, [pc, #360]	@ (8008c78 <UART_SetConfig+0x4e4>)
 8008b0e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008b10:	e00d      	b.n	8008b2e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008b12:	f7fd fddd 	bl	80066d0 <HAL_RCC_GetSysClockFreq>
 8008b16:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008b18:	e009      	b.n	8008b2e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008b1e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008b20:	e005      	b.n	8008b2e <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8008b22:	2300      	movs	r3, #0
 8008b24:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008b26:	2301      	movs	r3, #1
 8008b28:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008b2c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	f000 8089 	beq.w	8008c48 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b3a:	4a4e      	ldr	r2, [pc, #312]	@ (8008c74 <UART_SetConfig+0x4e0>)
 8008b3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b40:	461a      	mov	r2, r3
 8008b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b44:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b48:	005a      	lsls	r2, r3, #1
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	685b      	ldr	r3, [r3, #4]
 8008b4e:	085b      	lsrs	r3, r3, #1
 8008b50:	441a      	add	r2, r3
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	685b      	ldr	r3, [r3, #4]
 8008b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b5a:	b29b      	uxth	r3, r3
 8008b5c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b5e:	6a3b      	ldr	r3, [r7, #32]
 8008b60:	2b0f      	cmp	r3, #15
 8008b62:	d916      	bls.n	8008b92 <UART_SetConfig+0x3fe>
 8008b64:	6a3b      	ldr	r3, [r7, #32]
 8008b66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b6a:	d212      	bcs.n	8008b92 <UART_SetConfig+0x3fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008b6c:	6a3b      	ldr	r3, [r7, #32]
 8008b6e:	b29b      	uxth	r3, r3
 8008b70:	f023 030f 	bic.w	r3, r3, #15
 8008b74:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008b76:	6a3b      	ldr	r3, [r7, #32]
 8008b78:	085b      	lsrs	r3, r3, #1
 8008b7a:	b29b      	uxth	r3, r3
 8008b7c:	f003 0307 	and.w	r3, r3, #7
 8008b80:	b29a      	uxth	r2, r3
 8008b82:	8bfb      	ldrh	r3, [r7, #30]
 8008b84:	4313      	orrs	r3, r2
 8008b86:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008b88:	697b      	ldr	r3, [r7, #20]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	8bfa      	ldrh	r2, [r7, #30]
 8008b8e:	60da      	str	r2, [r3, #12]
 8008b90:	e05a      	b.n	8008c48 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8008b92:	2301      	movs	r3, #1
 8008b94:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008b98:	e056      	b.n	8008c48 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008b9a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008b9e:	2b08      	cmp	r3, #8
 8008ba0:	d827      	bhi.n	8008bf2 <UART_SetConfig+0x45e>
 8008ba2:	a201      	add	r2, pc, #4	@ (adr r2, 8008ba8 <UART_SetConfig+0x414>)
 8008ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ba8:	08008bcd 	.word	0x08008bcd
 8008bac:	08008bd5 	.word	0x08008bd5
 8008bb0:	08008bdd 	.word	0x08008bdd
 8008bb4:	08008bf3 	.word	0x08008bf3
 8008bb8:	08008be3 	.word	0x08008be3
 8008bbc:	08008bf3 	.word	0x08008bf3
 8008bc0:	08008bf3 	.word	0x08008bf3
 8008bc4:	08008bf3 	.word	0x08008bf3
 8008bc8:	08008beb 	.word	0x08008beb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008bcc:	f7fd fe34 	bl	8006838 <HAL_RCC_GetPCLK1Freq>
 8008bd0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008bd2:	e014      	b.n	8008bfe <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008bd4:	f7fd fe42 	bl	800685c <HAL_RCC_GetPCLK2Freq>
 8008bd8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008bda:	e010      	b.n	8008bfe <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008bdc:	4b26      	ldr	r3, [pc, #152]	@ (8008c78 <UART_SetConfig+0x4e4>)
 8008bde:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008be0:	e00d      	b.n	8008bfe <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008be2:	f7fd fd75 	bl	80066d0 <HAL_RCC_GetSysClockFreq>
 8008be6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008be8:	e009      	b.n	8008bfe <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008bea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008bee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008bf0:	e005      	b.n	8008bfe <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008bfc:	bf00      	nop
    }

    if (pclk != 0U)
 8008bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d021      	beq.n	8008c48 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c04:	697b      	ldr	r3, [r7, #20]
 8008c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c08:	4a1a      	ldr	r2, [pc, #104]	@ (8008c74 <UART_SetConfig+0x4e0>)
 8008c0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c0e:	461a      	mov	r2, r3
 8008c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c12:	fbb3 f2f2 	udiv	r2, r3, r2
 8008c16:	697b      	ldr	r3, [r7, #20]
 8008c18:	685b      	ldr	r3, [r3, #4]
 8008c1a:	085b      	lsrs	r3, r3, #1
 8008c1c:	441a      	add	r2, r3
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	685b      	ldr	r3, [r3, #4]
 8008c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c26:	b29b      	uxth	r3, r3
 8008c28:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c2a:	6a3b      	ldr	r3, [r7, #32]
 8008c2c:	2b0f      	cmp	r3, #15
 8008c2e:	d908      	bls.n	8008c42 <UART_SetConfig+0x4ae>
 8008c30:	6a3b      	ldr	r3, [r7, #32]
 8008c32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c36:	d204      	bcs.n	8008c42 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = usartdiv;
 8008c38:	697b      	ldr	r3, [r7, #20]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	6a3a      	ldr	r2, [r7, #32]
 8008c3e:	60da      	str	r2, [r3, #12]
 8008c40:	e002      	b.n	8008c48 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8008c42:	2301      	movs	r3, #1
 8008c44:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008c48:	697b      	ldr	r3, [r7, #20]
 8008c4a:	2201      	movs	r2, #1
 8008c4c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008c50:	697b      	ldr	r3, [r7, #20]
 8008c52:	2201      	movs	r2, #1
 8008c54:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008c58:	697b      	ldr	r3, [r7, #20]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	671a      	str	r2, [r3, #112]	@ 0x70
  huart->TxISR = NULL;
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	2200      	movs	r2, #0
 8008c62:	675a      	str	r2, [r3, #116]	@ 0x74

  return ret;
 8008c64:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	3730      	adds	r7, #48	@ 0x30
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008c72:	bf00      	nop
 8008c74:	0801f294 	.word	0x0801f294
 8008c78:	00f42400 	.word	0x00f42400

08008c7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008c7c:	b480      	push	{r7}
 8008c7e:	b083      	sub	sp, #12
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c88:	f003 0301 	and.w	r3, r3, #1
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d00a      	beq.n	8008ca6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	685b      	ldr	r3, [r3, #4]
 8008c96:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	430a      	orrs	r2, r1
 8008ca4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008caa:	f003 0302 	and.w	r3, r3, #2
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d00a      	beq.n	8008cc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	685b      	ldr	r3, [r3, #4]
 8008cb8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	430a      	orrs	r2, r1
 8008cc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ccc:	f003 0304 	and.w	r3, r3, #4
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d00a      	beq.n	8008cea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	685b      	ldr	r3, [r3, #4]
 8008cda:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	430a      	orrs	r2, r1
 8008ce8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cee:	f003 0308 	and.w	r3, r3, #8
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d00a      	beq.n	8008d0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	685b      	ldr	r3, [r3, #4]
 8008cfc:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	430a      	orrs	r2, r1
 8008d0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d10:	f003 0310 	and.w	r3, r3, #16
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d00a      	beq.n	8008d2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	689b      	ldr	r3, [r3, #8]
 8008d1e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	430a      	orrs	r2, r1
 8008d2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d32:	f003 0320 	and.w	r3, r3, #32
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d00a      	beq.n	8008d50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	689b      	ldr	r3, [r3, #8]
 8008d40:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	430a      	orrs	r2, r1
 8008d4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d01a      	beq.n	8008d92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	685b      	ldr	r3, [r3, #4]
 8008d62:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	430a      	orrs	r2, r1
 8008d70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008d7a:	d10a      	bne.n	8008d92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	685b      	ldr	r3, [r3, #4]
 8008d82:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	430a      	orrs	r2, r1
 8008d90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d00a      	beq.n	8008db4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	685b      	ldr	r3, [r3, #4]
 8008da4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	430a      	orrs	r2, r1
 8008db2:	605a      	str	r2, [r3, #4]
  }
}
 8008db4:	bf00      	nop
 8008db6:	370c      	adds	r7, #12
 8008db8:	46bd      	mov	sp, r7
 8008dba:	bc80      	pop	{r7}
 8008dbc:	4770      	bx	lr

08008dbe <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008dbe:	b580      	push	{r7, lr}
 8008dc0:	b086      	sub	sp, #24
 8008dc2:	af02      	add	r7, sp, #8
 8008dc4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008dce:	f7f9 f9f9 	bl	80021c4 <HAL_GetTick>
 8008dd2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f003 0308 	and.w	r3, r3, #8
 8008dde:	2b08      	cmp	r3, #8
 8008de0:	d10e      	bne.n	8008e00 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008de2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008de6:	9300      	str	r3, [sp, #0]
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	2200      	movs	r2, #0
 8008dec:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008df0:	6878      	ldr	r0, [r7, #4]
 8008df2:	f000 f82f 	bl	8008e54 <UART_WaitOnFlagUntilTimeout>
 8008df6:	4603      	mov	r3, r0
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d001      	beq.n	8008e00 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008dfc:	2303      	movs	r3, #3
 8008dfe:	e025      	b.n	8008e4c <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f003 0304 	and.w	r3, r3, #4
 8008e0a:	2b04      	cmp	r3, #4
 8008e0c:	d10e      	bne.n	8008e2c <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e0e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008e12:	9300      	str	r3, [sp, #0]
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	2200      	movs	r2, #0
 8008e18:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	f000 f819 	bl	8008e54 <UART_WaitOnFlagUntilTimeout>
 8008e22:	4603      	mov	r3, r0
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d001      	beq.n	8008e2c <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e28:	2303      	movs	r3, #3
 8008e2a:	e00f      	b.n	8008e4c <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2220      	movs	r2, #32
 8008e30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2220      	movs	r2, #32
 8008e38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2200      	movs	r2, #0
 8008e40:	66da      	str	r2, [r3, #108]	@ 0x6c

  __HAL_UNLOCK(huart);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2200      	movs	r2, #0
 8008e46:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8008e4a:	2300      	movs	r3, #0
}
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	3710      	adds	r7, #16
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}

08008e54 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b09c      	sub	sp, #112	@ 0x70
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	60f8      	str	r0, [r7, #12]
 8008e5c:	60b9      	str	r1, [r7, #8]
 8008e5e:	603b      	str	r3, [r7, #0]
 8008e60:	4613      	mov	r3, r2
 8008e62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e64:	e0a9      	b.n	8008fba <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e66:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e6c:	f000 80a5 	beq.w	8008fba <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e70:	f7f9 f9a8 	bl	80021c4 <HAL_GetTick>
 8008e74:	4602      	mov	r2, r0
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	1ad3      	subs	r3, r2, r3
 8008e7a:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8008e7c:	429a      	cmp	r2, r3
 8008e7e:	d302      	bcc.n	8008e86 <UART_WaitOnFlagUntilTimeout+0x32>
 8008e80:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d140      	bne.n	8008f08 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008e8e:	e853 3f00 	ldrex	r3, [r3]
 8008e92:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008e94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008e96:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8008e9a:	667b      	str	r3, [r7, #100]	@ 0x64
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	461a      	mov	r2, r3
 8008ea2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008ea4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008ea6:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ea8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008eaa:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008eac:	e841 2300 	strex	r3, r2, [r1]
 8008eb0:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8008eb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d1e6      	bne.n	8008e86 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	3308      	adds	r3, #8
 8008ebe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ec0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ec2:	e853 3f00 	ldrex	r3, [r3]
 8008ec6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008ec8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eca:	f023 0301 	bic.w	r3, r3, #1
 8008ece:	663b      	str	r3, [r7, #96]	@ 0x60
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	3308      	adds	r3, #8
 8008ed6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008ed8:	64ba      	str	r2, [r7, #72]	@ 0x48
 8008eda:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008edc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008ede:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008ee0:	e841 2300 	strex	r3, r2, [r1]
 8008ee4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008ee6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d1e5      	bne.n	8008eb8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	2220      	movs	r2, #32
 8008ef0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	2220      	movs	r2, #32
 8008ef8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        __HAL_UNLOCK(huart);
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	2200      	movs	r2, #0
 8008f00:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8008f04:	2303      	movs	r3, #3
 8008f06:	e069      	b.n	8008fdc <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f003 0304 	and.w	r3, r3, #4
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d051      	beq.n	8008fba <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	69db      	ldr	r3, [r3, #28]
 8008f1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008f20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008f24:	d149      	bne.n	8008fba <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008f2e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f38:	e853 3f00 	ldrex	r3, [r3]
 8008f3c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f40:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8008f44:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	461a      	mov	r2, r3
 8008f4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008f4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f50:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f52:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008f54:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008f56:	e841 2300 	strex	r3, r2, [r1]
 8008f5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008f5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d1e6      	bne.n	8008f30 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	3308      	adds	r3, #8
 8008f68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f6a:	697b      	ldr	r3, [r7, #20]
 8008f6c:	e853 3f00 	ldrex	r3, [r3]
 8008f70:	613b      	str	r3, [r7, #16]
   return(result);
 8008f72:	693b      	ldr	r3, [r7, #16]
 8008f74:	f023 0301 	bic.w	r3, r3, #1
 8008f78:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	3308      	adds	r3, #8
 8008f80:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008f82:	623a      	str	r2, [r7, #32]
 8008f84:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f86:	69f9      	ldr	r1, [r7, #28]
 8008f88:	6a3a      	ldr	r2, [r7, #32]
 8008f8a:	e841 2300 	strex	r3, r2, [r1]
 8008f8e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008f90:	69bb      	ldr	r3, [r7, #24]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d1e5      	bne.n	8008f62 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	2220      	movs	r2, #32
 8008f9a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	2220      	movs	r2, #32
 8008fa2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	2220      	movs	r2, #32
 8008faa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008fb6:	2303      	movs	r3, #3
 8008fb8:	e010      	b.n	8008fdc <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	69da      	ldr	r2, [r3, #28]
 8008fc0:	68bb      	ldr	r3, [r7, #8]
 8008fc2:	4013      	ands	r3, r2
 8008fc4:	68ba      	ldr	r2, [r7, #8]
 8008fc6:	429a      	cmp	r2, r3
 8008fc8:	bf0c      	ite	eq
 8008fca:	2301      	moveq	r3, #1
 8008fcc:	2300      	movne	r3, #0
 8008fce:	b2db      	uxtb	r3, r3
 8008fd0:	461a      	mov	r2, r3
 8008fd2:	79fb      	ldrb	r3, [r7, #7]
 8008fd4:	429a      	cmp	r2, r3
 8008fd6:	f43f af46 	beq.w	8008e66 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008fda:	2300      	movs	r3, #0
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	3770      	adds	r7, #112	@ 0x70
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}

08008fe4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b0a3      	sub	sp, #140	@ 0x8c
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	60f8      	str	r0, [r7, #12]
 8008fec:	60b9      	str	r1, [r7, #8]
 8008fee:	4613      	mov	r3, r2
 8008ff0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	68ba      	ldr	r2, [r7, #8]
 8008ff6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	88fa      	ldrh	r2, [r7, #6]
 8008ffc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	88fa      	ldrh	r2, [r7, #6]
 8009004:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	2200      	movs	r2, #0
 800900c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	689b      	ldr	r3, [r3, #8]
 8009012:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009016:	d10e      	bne.n	8009036 <UART_Start_Receive_IT+0x52>
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	691b      	ldr	r3, [r3, #16]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d105      	bne.n	800902c <UART_Start_Receive_IT+0x48>
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8009026:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800902a:	e02d      	b.n	8009088 <UART_Start_Receive_IT+0xa4>
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	22ff      	movs	r2, #255	@ 0xff
 8009030:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009034:	e028      	b.n	8009088 <UART_Start_Receive_IT+0xa4>
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	689b      	ldr	r3, [r3, #8]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d10d      	bne.n	800905a <UART_Start_Receive_IT+0x76>
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	691b      	ldr	r3, [r3, #16]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d104      	bne.n	8009050 <UART_Start_Receive_IT+0x6c>
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	22ff      	movs	r2, #255	@ 0xff
 800904a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800904e:	e01b      	b.n	8009088 <UART_Start_Receive_IT+0xa4>
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	227f      	movs	r2, #127	@ 0x7f
 8009054:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009058:	e016      	b.n	8009088 <UART_Start_Receive_IT+0xa4>
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	689b      	ldr	r3, [r3, #8]
 800905e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009062:	d10d      	bne.n	8009080 <UART_Start_Receive_IT+0x9c>
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	691b      	ldr	r3, [r3, #16]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d104      	bne.n	8009076 <UART_Start_Receive_IT+0x92>
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	227f      	movs	r2, #127	@ 0x7f
 8009070:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009074:	e008      	b.n	8009088 <UART_Start_Receive_IT+0xa4>
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	223f      	movs	r2, #63	@ 0x3f
 800907a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800907e:	e003      	b.n	8009088 <UART_Start_Receive_IT+0xa4>
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	2200      	movs	r2, #0
 8009084:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	2200      	movs	r2, #0
 800908c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	2222      	movs	r2, #34	@ 0x22
 8009094:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	3308      	adds	r3, #8
 800909e:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80090a2:	e853 3f00 	ldrex	r3, [r3]
 80090a6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80090a8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80090aa:	f043 0301 	orr.w	r3, r3, #1
 80090ae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	3308      	adds	r3, #8
 80090b8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80090bc:	673a      	str	r2, [r7, #112]	@ 0x70
 80090be:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090c0:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80090c2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80090c4:	e841 2300 	strex	r3, r2, [r1]
 80090c8:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80090ca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d1e3      	bne.n	8009098 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80090d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80090d8:	d153      	bne.n	8009182 <UART_Start_Receive_IT+0x19e>
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80090e0:	88fa      	ldrh	r2, [r7, #6]
 80090e2:	429a      	cmp	r2, r3
 80090e4:	d34d      	bcc.n	8009182 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	689b      	ldr	r3, [r3, #8]
 80090ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80090ee:	d107      	bne.n	8009100 <UART_Start_Receive_IT+0x11c>
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	691b      	ldr	r3, [r3, #16]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d103      	bne.n	8009100 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	4a4a      	ldr	r2, [pc, #296]	@ (8009224 <UART_Start_Receive_IT+0x240>)
 80090fc:	671a      	str	r2, [r3, #112]	@ 0x70
 80090fe:	e002      	b.n	8009106 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	4a49      	ldr	r2, [pc, #292]	@ (8009228 <UART_Start_Receive_IT+0x244>)
 8009104:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    __HAL_UNLOCK(huart);
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	2200      	movs	r2, #0
 800910a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	691b      	ldr	r3, [r3, #16]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d01a      	beq.n	800914c <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800911c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800911e:	e853 3f00 	ldrex	r3, [r3]
 8009122:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009124:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009126:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800912a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	461a      	mov	r2, r3
 8009134:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009138:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800913a:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800913c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800913e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009140:	e841 2300 	strex	r3, r2, [r1]
 8009144:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8009146:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009148:	2b00      	cmp	r3, #0
 800914a:	d1e4      	bne.n	8009116 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	3308      	adds	r3, #8
 8009152:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009154:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009156:	e853 3f00 	ldrex	r3, [r3]
 800915a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800915c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800915e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009162:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	3308      	adds	r3, #8
 800916a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800916c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800916e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009170:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009172:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009174:	e841 2300 	strex	r3, r2, [r1]
 8009178:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800917a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800917c:	2b00      	cmp	r3, #0
 800917e:	d1e5      	bne.n	800914c <UART_Start_Receive_IT+0x168>
 8009180:	e04a      	b.n	8009218 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	689b      	ldr	r3, [r3, #8]
 8009186:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800918a:	d107      	bne.n	800919c <UART_Start_Receive_IT+0x1b8>
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	691b      	ldr	r3, [r3, #16]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d103      	bne.n	800919c <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	4a25      	ldr	r2, [pc, #148]	@ (800922c <UART_Start_Receive_IT+0x248>)
 8009198:	671a      	str	r2, [r3, #112]	@ 0x70
 800919a:	e002      	b.n	80091a2 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	4a24      	ldr	r2, [pc, #144]	@ (8009230 <UART_Start_Receive_IT+0x24c>)
 80091a0:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    __HAL_UNLOCK(huart);
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	2200      	movs	r2, #0
 80091a6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	691b      	ldr	r3, [r3, #16]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d019      	beq.n	80091e6 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091ba:	e853 3f00 	ldrex	r3, [r3]
 80091be:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80091c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091c2:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80091c6:	677b      	str	r3, [r7, #116]	@ 0x74
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	461a      	mov	r2, r3
 80091ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80091d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80091d2:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091d4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80091d6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80091d8:	e841 2300 	strex	r3, r2, [r1]
 80091dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80091de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d1e6      	bne.n	80091b2 <UART_Start_Receive_IT+0x1ce>
 80091e4:	e018      	b.n	8009218 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ec:	697b      	ldr	r3, [r7, #20]
 80091ee:	e853 3f00 	ldrex	r3, [r3]
 80091f2:	613b      	str	r3, [r7, #16]
   return(result);
 80091f4:	693b      	ldr	r3, [r7, #16]
 80091f6:	f043 0320 	orr.w	r3, r3, #32
 80091fa:	67bb      	str	r3, [r7, #120]	@ 0x78
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	461a      	mov	r2, r3
 8009202:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009204:	623b      	str	r3, [r7, #32]
 8009206:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009208:	69f9      	ldr	r1, [r7, #28]
 800920a:	6a3a      	ldr	r2, [r7, #32]
 800920c:	e841 2300 	strex	r3, r2, [r1]
 8009210:	61bb      	str	r3, [r7, #24]
   return(result);
 8009212:	69bb      	ldr	r3, [r7, #24]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d1e6      	bne.n	80091e6 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8009218:	2300      	movs	r3, #0
}
 800921a:	4618      	mov	r0, r3
 800921c:	378c      	adds	r7, #140	@ 0x8c
 800921e:	46bd      	mov	sp, r7
 8009220:	bc80      	pop	{r7}
 8009222:	4770      	bx	lr
 8009224:	08009af1 	.word	0x08009af1
 8009228:	080097f9 	.word	0x080097f9
 800922c:	08009697 	.word	0x08009697
 8009230:	08009537 	.word	0x08009537

08009234 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009234:	b480      	push	{r7}
 8009236:	b08f      	sub	sp, #60	@ 0x3c
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009242:	6a3b      	ldr	r3, [r7, #32]
 8009244:	e853 3f00 	ldrex	r3, [r3]
 8009248:	61fb      	str	r3, [r7, #28]
   return(result);
 800924a:	69fb      	ldr	r3, [r7, #28]
 800924c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009250:	637b      	str	r3, [r7, #52]	@ 0x34
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	461a      	mov	r2, r3
 8009258:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800925a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800925c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800925e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009260:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009262:	e841 2300 	strex	r3, r2, [r1]
 8009266:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800926a:	2b00      	cmp	r3, #0
 800926c:	d1e6      	bne.n	800923c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	3308      	adds	r3, #8
 8009274:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	e853 3f00 	ldrex	r3, [r3]
 800927c:	60bb      	str	r3, [r7, #8]
   return(result);
 800927e:	68bb      	ldr	r3, [r7, #8]
 8009280:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009284:	633b      	str	r3, [r7, #48]	@ 0x30
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	3308      	adds	r3, #8
 800928c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800928e:	61ba      	str	r2, [r7, #24]
 8009290:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009292:	6979      	ldr	r1, [r7, #20]
 8009294:	69ba      	ldr	r2, [r7, #24]
 8009296:	e841 2300 	strex	r3, r2, [r1]
 800929a:	613b      	str	r3, [r7, #16]
   return(result);
 800929c:	693b      	ldr	r3, [r7, #16]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d1e5      	bne.n	800926e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2220      	movs	r2, #32
 80092a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
}
 80092aa:	bf00      	nop
 80092ac:	373c      	adds	r7, #60	@ 0x3c
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bc80      	pop	{r7}
 80092b2:	4770      	bx	lr

080092b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80092b4:	b480      	push	{r7}
 80092b6:	b095      	sub	sp, #84	@ 0x54
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092c4:	e853 3f00 	ldrex	r3, [r3]
 80092c8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80092ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80092d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	461a      	mov	r2, r3
 80092d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80092da:	643b      	str	r3, [r7, #64]	@ 0x40
 80092dc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092de:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80092e0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80092e2:	e841 2300 	strex	r3, r2, [r1]
 80092e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80092e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d1e6      	bne.n	80092bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	3308      	adds	r3, #8
 80092f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092f6:	6a3b      	ldr	r3, [r7, #32]
 80092f8:	e853 3f00 	ldrex	r3, [r3]
 80092fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80092fe:	69fb      	ldr	r3, [r7, #28]
 8009300:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009304:	f023 0301 	bic.w	r3, r3, #1
 8009308:	64bb      	str	r3, [r7, #72]	@ 0x48
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	3308      	adds	r3, #8
 8009310:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009312:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009314:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009316:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009318:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800931a:	e841 2300 	strex	r3, r2, [r1]
 800931e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009322:	2b00      	cmp	r3, #0
 8009324:	d1e3      	bne.n	80092ee <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800932a:	2b01      	cmp	r3, #1
 800932c:	d118      	bne.n	8009360 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	e853 3f00 	ldrex	r3, [r3]
 800933a:	60bb      	str	r3, [r7, #8]
   return(result);
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	f023 0310 	bic.w	r3, r3, #16
 8009342:	647b      	str	r3, [r7, #68]	@ 0x44
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	461a      	mov	r2, r3
 800934a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800934c:	61bb      	str	r3, [r7, #24]
 800934e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009350:	6979      	ldr	r1, [r7, #20]
 8009352:	69ba      	ldr	r2, [r7, #24]
 8009354:	e841 2300 	strex	r3, r2, [r1]
 8009358:	613b      	str	r3, [r7, #16]
   return(result);
 800935a:	693b      	ldr	r3, [r7, #16]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d1e6      	bne.n	800932e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2220      	movs	r2, #32
 8009364:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2200      	movs	r2, #0
 800936c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2200      	movs	r2, #0
 8009372:	671a      	str	r2, [r3, #112]	@ 0x70
}
 8009374:	bf00      	nop
 8009376:	3754      	adds	r7, #84	@ 0x54
 8009378:	46bd      	mov	sp, r7
 800937a:	bc80      	pop	{r7}
 800937c:	4770      	bx	lr

0800937e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800937e:	b580      	push	{r7, lr}
 8009380:	b090      	sub	sp, #64	@ 0x40
 8009382:	af00      	add	r7, sp, #0
 8009384:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800938a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f003 0320 	and.w	r3, r3, #32
 8009396:	2b00      	cmp	r3, #0
 8009398:	d137      	bne.n	800940a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800939a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800939c:	2200      	movs	r2, #0
 800939e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80093a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	3308      	adds	r3, #8
 80093a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093ac:	e853 3f00 	ldrex	r3, [r3]
 80093b0:	623b      	str	r3, [r7, #32]
   return(result);
 80093b2:	6a3b      	ldr	r3, [r7, #32]
 80093b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80093b8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80093ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	3308      	adds	r3, #8
 80093c0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80093c2:	633a      	str	r2, [r7, #48]	@ 0x30
 80093c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80093c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093ca:	e841 2300 	strex	r3, r2, [r1]
 80093ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80093d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d1e5      	bne.n	80093a2 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80093d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093dc:	693b      	ldr	r3, [r7, #16]
 80093de:	e853 3f00 	ldrex	r3, [r3]
 80093e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80093ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80093ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	461a      	mov	r2, r3
 80093f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093f4:	61fb      	str	r3, [r7, #28]
 80093f6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093f8:	69b9      	ldr	r1, [r7, #24]
 80093fa:	69fa      	ldr	r2, [r7, #28]
 80093fc:	e841 2300 	strex	r3, r2, [r1]
 8009400:	617b      	str	r3, [r7, #20]
   return(result);
 8009402:	697b      	ldr	r3, [r7, #20]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d1e6      	bne.n	80093d6 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009408:	e002      	b.n	8009410 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800940a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800940c:	f7f9 fd62 	bl	8002ed4 <HAL_UART_TxCpltCallback>
}
 8009410:	bf00      	nop
 8009412:	3740      	adds	r7, #64	@ 0x40
 8009414:	46bd      	mov	sp, r7
 8009416:	bd80      	pop	{r7, pc}

08009418 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b084      	sub	sp, #16
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009424:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009426:	68f8      	ldr	r0, [r7, #12]
 8009428:	f7ff f996 	bl	8008758 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800942c:	bf00      	nop
 800942e:	3710      	adds	r7, #16
 8009430:	46bd      	mov	sp, r7
 8009432:	bd80      	pop	{r7, pc}

08009434 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b086      	sub	sp, #24
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009440:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009442:	697b      	ldr	r3, [r7, #20]
 8009444:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009448:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800944a:	697b      	ldr	r3, [r7, #20]
 800944c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009450:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009452:	697b      	ldr	r3, [r7, #20]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	689b      	ldr	r3, [r3, #8]
 8009458:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800945c:	2b80      	cmp	r3, #128	@ 0x80
 800945e:	d109      	bne.n	8009474 <UART_DMAError+0x40>
 8009460:	693b      	ldr	r3, [r7, #16]
 8009462:	2b21      	cmp	r3, #33	@ 0x21
 8009464:	d106      	bne.n	8009474 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009466:	697b      	ldr	r3, [r7, #20]
 8009468:	2200      	movs	r2, #0
 800946a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800946e:	6978      	ldr	r0, [r7, #20]
 8009470:	f7ff fee0 	bl	8009234 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009474:	697b      	ldr	r3, [r7, #20]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	689b      	ldr	r3, [r3, #8]
 800947a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800947e:	2b40      	cmp	r3, #64	@ 0x40
 8009480:	d109      	bne.n	8009496 <UART_DMAError+0x62>
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	2b22      	cmp	r3, #34	@ 0x22
 8009486:	d106      	bne.n	8009496 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009488:	697b      	ldr	r3, [r7, #20]
 800948a:	2200      	movs	r2, #0
 800948c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8009490:	6978      	ldr	r0, [r7, #20]
 8009492:	f7ff ff0f 	bl	80092b4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009496:	697b      	ldr	r3, [r7, #20]
 8009498:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800949c:	f043 0210 	orr.w	r2, r3, #16
 80094a0:	697b      	ldr	r3, [r7, #20]
 80094a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80094a6:	6978      	ldr	r0, [r7, #20]
 80094a8:	f7ff f95f 	bl	800876a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80094ac:	bf00      	nop
 80094ae:	3718      	adds	r7, #24
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}

080094b4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b084      	sub	sp, #16
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	2200      	movs	r2, #0
 80094c6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	2200      	movs	r2, #0
 80094ce:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80094d2:	68f8      	ldr	r0, [r7, #12]
 80094d4:	f7ff f949 	bl	800876a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80094d8:	bf00      	nop
 80094da:	3710      	adds	r7, #16
 80094dc:	46bd      	mov	sp, r7
 80094de:	bd80      	pop	{r7, pc}

080094e0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b088      	sub	sp, #32
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	e853 3f00 	ldrex	r3, [r3]
 80094f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80094f6:	68bb      	ldr	r3, [r7, #8]
 80094f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80094fc:	61fb      	str	r3, [r7, #28]
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	461a      	mov	r2, r3
 8009504:	69fb      	ldr	r3, [r7, #28]
 8009506:	61bb      	str	r3, [r7, #24]
 8009508:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800950a:	6979      	ldr	r1, [r7, #20]
 800950c:	69ba      	ldr	r2, [r7, #24]
 800950e:	e841 2300 	strex	r3, r2, [r1]
 8009512:	613b      	str	r3, [r7, #16]
   return(result);
 8009514:	693b      	ldr	r3, [r7, #16]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d1e6      	bne.n	80094e8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2220      	movs	r2, #32
 800951e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2200      	movs	r2, #0
 8009526:	675a      	str	r2, [r3, #116]	@ 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	f7f9 fcd3 	bl	8002ed4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800952e:	bf00      	nop
 8009530:	3720      	adds	r7, #32
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}

08009536 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009536:	b580      	push	{r7, lr}
 8009538:	b096      	sub	sp, #88	@ 0x58
 800953a:	af00      	add	r7, sp, #0
 800953c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009544:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800954e:	2b22      	cmp	r3, #34	@ 0x22
 8009550:	f040 8095 	bne.w	800967e <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800955a:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800955e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8009562:	b2d9      	uxtb	r1, r3
 8009564:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8009568:	b2da      	uxtb	r2, r3
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800956e:	400a      	ands	r2, r1
 8009570:	b2d2      	uxtb	r2, r2
 8009572:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009578:	1c5a      	adds	r2, r3, #1
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009584:	b29b      	uxth	r3, r3
 8009586:	3b01      	subs	r3, #1
 8009588:	b29a      	uxth	r2, r3
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009596:	b29b      	uxth	r3, r3
 8009598:	2b00      	cmp	r3, #0
 800959a:	d178      	bne.n	800968e <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095a4:	e853 3f00 	ldrex	r3, [r3]
 80095a8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80095aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80095b0:	653b      	str	r3, [r7, #80]	@ 0x50
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	461a      	mov	r2, r3
 80095b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80095ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80095bc:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095be:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80095c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80095c2:	e841 2300 	strex	r3, r2, [r1]
 80095c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80095c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d1e6      	bne.n	800959c <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	3308      	adds	r3, #8
 80095d4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095d8:	e853 3f00 	ldrex	r3, [r3]
 80095dc:	623b      	str	r3, [r7, #32]
   return(result);
 80095de:	6a3b      	ldr	r3, [r7, #32]
 80095e0:	f023 0301 	bic.w	r3, r3, #1
 80095e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	3308      	adds	r3, #8
 80095ec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80095ee:	633a      	str	r2, [r7, #48]	@ 0x30
 80095f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80095f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80095f6:	e841 2300 	strex	r3, r2, [r1]
 80095fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80095fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d1e5      	bne.n	80095ce <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2220      	movs	r2, #32
 8009606:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2200      	movs	r2, #0
 800960e:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009614:	2b01      	cmp	r3, #1
 8009616:	d12e      	bne.n	8009676 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2200      	movs	r2, #0
 800961c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009624:	693b      	ldr	r3, [r7, #16]
 8009626:	e853 3f00 	ldrex	r3, [r3]
 800962a:	60fb      	str	r3, [r7, #12]
   return(result);
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	f023 0310 	bic.w	r3, r3, #16
 8009632:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	461a      	mov	r2, r3
 800963a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800963c:	61fb      	str	r3, [r7, #28]
 800963e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009640:	69b9      	ldr	r1, [r7, #24]
 8009642:	69fa      	ldr	r2, [r7, #28]
 8009644:	e841 2300 	strex	r3, r2, [r1]
 8009648:	617b      	str	r3, [r7, #20]
   return(result);
 800964a:	697b      	ldr	r3, [r7, #20]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d1e6      	bne.n	800961e <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	69db      	ldr	r3, [r3, #28]
 8009656:	f003 0310 	and.w	r3, r3, #16
 800965a:	2b10      	cmp	r3, #16
 800965c:	d103      	bne.n	8009666 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	2210      	movs	r2, #16
 8009664:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800966c:	4619      	mov	r1, r3
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	f7ff f884 	bl	800877c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009674:	e00b      	b.n	800968e <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	f7f9 fc42 	bl	8002f00 <HAL_UART_RxCpltCallback>
}
 800967c:	e007      	b.n	800968e <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	699a      	ldr	r2, [r3, #24]
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f042 0208 	orr.w	r2, r2, #8
 800968c:	619a      	str	r2, [r3, #24]
}
 800968e:	bf00      	nop
 8009690:	3758      	adds	r7, #88	@ 0x58
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}

08009696 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009696:	b580      	push	{r7, lr}
 8009698:	b096      	sub	sp, #88	@ 0x58
 800969a:	af00      	add	r7, sp, #0
 800969c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80096a4:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80096ae:	2b22      	cmp	r3, #34	@ 0x22
 80096b0:	f040 8095 	bne.w	80097de <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096ba:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80096c2:	653b      	str	r3, [r7, #80]	@ 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80096c4:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 80096c8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80096cc:	4013      	ands	r3, r2
 80096ce:	b29a      	uxth	r2, r3
 80096d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80096d2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80096d8:	1c9a      	adds	r2, r3, #2
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80096e4:	b29b      	uxth	r3, r3
 80096e6:	3b01      	subs	r3, #1
 80096e8:	b29a      	uxth	r2, r3
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80096f6:	b29b      	uxth	r3, r3
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d178      	bne.n	80097ee <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009702:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009704:	e853 3f00 	ldrex	r3, [r3]
 8009708:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800970a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800970c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009710:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	461a      	mov	r2, r3
 8009718:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800971a:	643b      	str	r3, [r7, #64]	@ 0x40
 800971c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800971e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009720:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009722:	e841 2300 	strex	r3, r2, [r1]
 8009726:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009728:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800972a:	2b00      	cmp	r3, #0
 800972c:	d1e6      	bne.n	80096fc <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	3308      	adds	r3, #8
 8009734:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009736:	6a3b      	ldr	r3, [r7, #32]
 8009738:	e853 3f00 	ldrex	r3, [r3]
 800973c:	61fb      	str	r3, [r7, #28]
   return(result);
 800973e:	69fb      	ldr	r3, [r7, #28]
 8009740:	f023 0301 	bic.w	r3, r3, #1
 8009744:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	3308      	adds	r3, #8
 800974c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800974e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009750:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009752:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009754:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009756:	e841 2300 	strex	r3, r2, [r1]
 800975a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800975c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800975e:	2b00      	cmp	r3, #0
 8009760:	d1e5      	bne.n	800972e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2220      	movs	r2, #32
 8009766:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	2200      	movs	r2, #0
 800976e:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009774:	2b01      	cmp	r3, #1
 8009776:	d12e      	bne.n	80097d6 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2200      	movs	r2, #0
 800977c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	e853 3f00 	ldrex	r3, [r3]
 800978a:	60bb      	str	r3, [r7, #8]
   return(result);
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	f023 0310 	bic.w	r3, r3, #16
 8009792:	647b      	str	r3, [r7, #68]	@ 0x44
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	461a      	mov	r2, r3
 800979a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800979c:	61bb      	str	r3, [r7, #24]
 800979e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097a0:	6979      	ldr	r1, [r7, #20]
 80097a2:	69ba      	ldr	r2, [r7, #24]
 80097a4:	e841 2300 	strex	r3, r2, [r1]
 80097a8:	613b      	str	r3, [r7, #16]
   return(result);
 80097aa:	693b      	ldr	r3, [r7, #16]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d1e6      	bne.n	800977e <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	69db      	ldr	r3, [r3, #28]
 80097b6:	f003 0310 	and.w	r3, r3, #16
 80097ba:	2b10      	cmp	r3, #16
 80097bc:	d103      	bne.n	80097c6 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	2210      	movs	r2, #16
 80097c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80097cc:	4619      	mov	r1, r3
 80097ce:	6878      	ldr	r0, [r7, #4]
 80097d0:	f7fe ffd4 	bl	800877c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80097d4:	e00b      	b.n	80097ee <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f7f9 fb92 	bl	8002f00 <HAL_UART_RxCpltCallback>
}
 80097dc:	e007      	b.n	80097ee <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	699a      	ldr	r2, [r3, #24]
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f042 0208 	orr.w	r2, r2, #8
 80097ec:	619a      	str	r2, [r3, #24]
}
 80097ee:	bf00      	nop
 80097f0:	3758      	adds	r7, #88	@ 0x58
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bd80      	pop	{r7, pc}
	...

080097f8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b0a6      	sub	sp, #152	@ 0x98
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009806:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	69db      	ldr	r3, [r3, #28]
 8009810:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	689b      	ldr	r3, [r3, #8]
 8009824:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800982e:	2b22      	cmp	r3, #34	@ 0x22
 8009830:	f040 814f 	bne.w	8009ad2 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800983a:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800983e:	e0f6      	b.n	8009a2e <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009846:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800984a:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 800984e:	b2d9      	uxtb	r1, r3
 8009850:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8009854:	b2da      	uxtb	r2, r3
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800985a:	400a      	ands	r2, r1
 800985c:	b2d2      	uxtb	r2, r2
 800985e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009864:	1c5a      	adds	r2, r3, #1
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009870:	b29b      	uxth	r3, r3
 8009872:	3b01      	subs	r3, #1
 8009874:	b29a      	uxth	r2, r3
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	69db      	ldr	r3, [r3, #28]
 8009882:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009886:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800988a:	f003 0307 	and.w	r3, r3, #7
 800988e:	2b00      	cmp	r3, #0
 8009890:	d053      	beq.n	800993a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009892:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009896:	f003 0301 	and.w	r3, r3, #1
 800989a:	2b00      	cmp	r3, #0
 800989c:	d011      	beq.n	80098c2 <UART_RxISR_8BIT_FIFOEN+0xca>
 800989e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80098a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d00b      	beq.n	80098c2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	2201      	movs	r2, #1
 80098b0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80098b8:	f043 0201 	orr.w	r2, r3, #1
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80098c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80098c6:	f003 0302 	and.w	r3, r3, #2
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d011      	beq.n	80098f2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80098ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80098d2:	f003 0301 	and.w	r3, r3, #1
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d00b      	beq.n	80098f2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	2202      	movs	r2, #2
 80098e0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80098e8:	f043 0204 	orr.w	r2, r3, #4
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80098f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80098f6:	f003 0304 	and.w	r3, r3, #4
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d011      	beq.n	8009922 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80098fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009902:	f003 0301 	and.w	r3, r3, #1
 8009906:	2b00      	cmp	r3, #0
 8009908:	d00b      	beq.n	8009922 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	2204      	movs	r2, #4
 8009910:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009918:	f043 0202 	orr.w	r2, r3, #2
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009928:	2b00      	cmp	r3, #0
 800992a:	d006      	beq.n	800993a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	f7fe ff1c 	bl	800876a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	2200      	movs	r2, #0
 8009936:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009940:	b29b      	uxth	r3, r3
 8009942:	2b00      	cmp	r3, #0
 8009944:	d173      	bne.n	8009a2e <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800994c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800994e:	e853 3f00 	ldrex	r3, [r3]
 8009952:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8009954:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009956:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800995a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	461a      	mov	r2, r3
 8009964:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009968:	66bb      	str	r3, [r7, #104]	@ 0x68
 800996a:	667a      	str	r2, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800996c:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800996e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009970:	e841 2300 	strex	r3, r2, [r1]
 8009974:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009976:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009978:	2b00      	cmp	r3, #0
 800997a:	d1e4      	bne.n	8009946 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	3308      	adds	r3, #8
 8009982:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009984:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009986:	e853 3f00 	ldrex	r3, [r3]
 800998a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800998c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800998e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009992:	f023 0301 	bic.w	r3, r3, #1
 8009996:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	3308      	adds	r3, #8
 800999e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80099a0:	657a      	str	r2, [r7, #84]	@ 0x54
 80099a2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099a4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80099a6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80099a8:	e841 2300 	strex	r3, r2, [r1]
 80099ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80099ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d1e3      	bne.n	800997c <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2220      	movs	r2, #32
 80099b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2200      	movs	r2, #0
 80099c0:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80099c6:	2b01      	cmp	r3, #1
 80099c8:	d12e      	bne.n	8009a28 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2200      	movs	r2, #0
 80099ce:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099d8:	e853 3f00 	ldrex	r3, [r3]
 80099dc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80099de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099e0:	f023 0310 	bic.w	r3, r3, #16
 80099e4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	461a      	mov	r2, r3
 80099ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80099ee:	643b      	str	r3, [r7, #64]	@ 0x40
 80099f0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099f2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80099f4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80099f6:	e841 2300 	strex	r3, r2, [r1]
 80099fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80099fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d1e6      	bne.n	80099d0 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	69db      	ldr	r3, [r3, #28]
 8009a08:	f003 0310 	and.w	r3, r3, #16
 8009a0c:	2b10      	cmp	r3, #16
 8009a0e:	d103      	bne.n	8009a18 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	2210      	movs	r2, #16
 8009a16:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009a1e:	4619      	mov	r1, r3
 8009a20:	6878      	ldr	r0, [r7, #4]
 8009a22:	f7fe feab 	bl	800877c <HAL_UARTEx_RxEventCallback>
 8009a26:	e002      	b.n	8009a2e <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	f7f9 fa69 	bl	8002f00 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009a2e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d006      	beq.n	8009a44 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8009a36:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009a3a:	f003 0320 	and.w	r3, r3, #32
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	f47f aefe 	bne.w	8009840 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009a4a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009a4e:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d045      	beq.n	8009ae2 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009a5c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009a60:	429a      	cmp	r2, r3
 8009a62:	d23e      	bcs.n	8009ae2 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	3308      	adds	r3, #8
 8009a6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a6c:	6a3b      	ldr	r3, [r7, #32]
 8009a6e:	e853 3f00 	ldrex	r3, [r3]
 8009a72:	61fb      	str	r3, [r7, #28]
   return(result);
 8009a74:	69fb      	ldr	r3, [r7, #28]
 8009a76:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009a7a:	673b      	str	r3, [r7, #112]	@ 0x70
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	3308      	adds	r3, #8
 8009a82:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8009a84:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009a86:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a88:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009a8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009a8c:	e841 2300 	strex	r3, r2, [r1]
 8009a90:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d1e5      	bne.n	8009a64 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	4a14      	ldr	r2, [pc, #80]	@ (8009aec <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8009a9c:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	e853 3f00 	ldrex	r3, [r3]
 8009aaa:	60bb      	str	r3, [r7, #8]
   return(result);
 8009aac:	68bb      	ldr	r3, [r7, #8]
 8009aae:	f043 0320 	orr.w	r3, r3, #32
 8009ab2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	461a      	mov	r2, r3
 8009aba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009abc:	61bb      	str	r3, [r7, #24]
 8009abe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ac0:	6979      	ldr	r1, [r7, #20]
 8009ac2:	69ba      	ldr	r2, [r7, #24]
 8009ac4:	e841 2300 	strex	r3, r2, [r1]
 8009ac8:	613b      	str	r3, [r7, #16]
   return(result);
 8009aca:	693b      	ldr	r3, [r7, #16]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d1e6      	bne.n	8009a9e <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009ad0:	e007      	b.n	8009ae2 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	699a      	ldr	r2, [r3, #24]
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f042 0208 	orr.w	r2, r2, #8
 8009ae0:	619a      	str	r2, [r3, #24]
}
 8009ae2:	bf00      	nop
 8009ae4:	3798      	adds	r7, #152	@ 0x98
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	bd80      	pop	{r7, pc}
 8009aea:	bf00      	nop
 8009aec:	08009537 	.word	0x08009537

08009af0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b0a8      	sub	sp, #160	@ 0xa0
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009afe:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	69db      	ldr	r3, [r3, #28]
 8009b08:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	689b      	ldr	r3, [r3, #8]
 8009b1c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b26:	2b22      	cmp	r3, #34	@ 0x22
 8009b28:	f040 8153 	bne.w	8009dd2 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009b32:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009b36:	e0fa      	b.n	8009d2e <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b3e:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b46:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8009b4a:	f8b7 208c 	ldrh.w	r2, [r7, #140]	@ 0x8c
 8009b4e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 8009b52:	4013      	ands	r3, r2
 8009b54:	b29a      	uxth	r2, r3
 8009b56:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009b5a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b60:	1c9a      	adds	r2, r3, #2
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009b6c:	b29b      	uxth	r3, r3
 8009b6e:	3b01      	subs	r3, #1
 8009b70:	b29a      	uxth	r2, r3
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	69db      	ldr	r3, [r3, #28]
 8009b7e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009b82:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009b86:	f003 0307 	and.w	r3, r3, #7
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d053      	beq.n	8009c36 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009b8e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009b92:	f003 0301 	and.w	r3, r3, #1
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d011      	beq.n	8009bbe <UART_RxISR_16BIT_FIFOEN+0xce>
 8009b9a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009b9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d00b      	beq.n	8009bbe <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	2201      	movs	r2, #1
 8009bac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009bb4:	f043 0201 	orr.w	r2, r3, #1
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009bbe:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009bc2:	f003 0302 	and.w	r3, r3, #2
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d011      	beq.n	8009bee <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009bca:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009bce:	f003 0301 	and.w	r3, r3, #1
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d00b      	beq.n	8009bee <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	2202      	movs	r2, #2
 8009bdc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009be4:	f043 0204 	orr.w	r2, r3, #4
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009bee:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009bf2:	f003 0304 	and.w	r3, r3, #4
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d011      	beq.n	8009c1e <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009bfa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009bfe:	f003 0301 	and.w	r3, r3, #1
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d00b      	beq.n	8009c1e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	2204      	movs	r2, #4
 8009c0c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009c14:	f043 0202 	orr.w	r2, r3, #2
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d006      	beq.n	8009c36 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009c28:	6878      	ldr	r0, [r7, #4]
 8009c2a:	f7fe fd9e 	bl	800876a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2200      	movs	r2, #0
 8009c32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009c3c:	b29b      	uxth	r3, r3
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d175      	bne.n	8009d2e <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c48:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009c4a:	e853 3f00 	ldrex	r3, [r3]
 8009c4e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009c50:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009c52:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009c56:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	461a      	mov	r2, r3
 8009c60:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009c64:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009c66:	66ba      	str	r2, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c68:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009c6a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009c6c:	e841 2300 	strex	r3, r2, [r1]
 8009c70:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009c72:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d1e4      	bne.n	8009c42 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	3308      	adds	r3, #8
 8009c7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c82:	e853 3f00 	ldrex	r3, [r3]
 8009c86:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009c88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009c8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009c8e:	f023 0301 	bic.w	r3, r3, #1
 8009c92:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	3308      	adds	r3, #8
 8009c9c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009ca0:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009ca2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ca4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009ca6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009ca8:	e841 2300 	strex	r3, r2, [r1]
 8009cac:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009cae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d1e1      	bne.n	8009c78 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2220      	movs	r2, #32
 8009cb8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009cc6:	2b01      	cmp	r3, #1
 8009cc8:	d12e      	bne.n	8009d28 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	2200      	movs	r2, #0
 8009cce:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cd8:	e853 3f00 	ldrex	r3, [r3]
 8009cdc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009cde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ce0:	f023 0310 	bic.w	r3, r3, #16
 8009ce4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	461a      	mov	r2, r3
 8009cec:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009cee:	647b      	str	r3, [r7, #68]	@ 0x44
 8009cf0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cf2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009cf4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009cf6:	e841 2300 	strex	r3, r2, [r1]
 8009cfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009cfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d1e6      	bne.n	8009cd0 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	69db      	ldr	r3, [r3, #28]
 8009d08:	f003 0310 	and.w	r3, r3, #16
 8009d0c:	2b10      	cmp	r3, #16
 8009d0e:	d103      	bne.n	8009d18 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	2210      	movs	r2, #16
 8009d16:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009d1e:	4619      	mov	r1, r3
 8009d20:	6878      	ldr	r0, [r7, #4]
 8009d22:	f7fe fd2b 	bl	800877c <HAL_UARTEx_RxEventCallback>
 8009d26:	e002      	b.n	8009d2e <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009d28:	6878      	ldr	r0, [r7, #4]
 8009d2a:	f7f9 f8e9 	bl	8002f00 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009d2e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d006      	beq.n	8009d44 <UART_RxISR_16BIT_FIFOEN+0x254>
 8009d36:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009d3a:	f003 0320 	and.w	r3, r3, #32
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	f47f aefa 	bne.w	8009b38 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009d4a:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009d4e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d045      	beq.n	8009de2 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009d5c:	f8b7 207a 	ldrh.w	r2, [r7, #122]	@ 0x7a
 8009d60:	429a      	cmp	r2, r3
 8009d62:	d23e      	bcs.n	8009de2 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	3308      	adds	r3, #8
 8009d6a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d6e:	e853 3f00 	ldrex	r3, [r3]
 8009d72:	623b      	str	r3, [r7, #32]
   return(result);
 8009d74:	6a3b      	ldr	r3, [r7, #32]
 8009d76:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009d7a:	677b      	str	r3, [r7, #116]	@ 0x74
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	3308      	adds	r3, #8
 8009d82:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8009d84:	633a      	str	r2, [r7, #48]	@ 0x30
 8009d86:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d88:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009d8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d8c:	e841 2300 	strex	r3, r2, [r1]
 8009d90:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009d92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d1e5      	bne.n	8009d64 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	4a14      	ldr	r2, [pc, #80]	@ (8009dec <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8009d9c:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009da4:	693b      	ldr	r3, [r7, #16]
 8009da6:	e853 3f00 	ldrex	r3, [r3]
 8009daa:	60fb      	str	r3, [r7, #12]
   return(result);
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	f043 0320 	orr.w	r3, r3, #32
 8009db2:	673b      	str	r3, [r7, #112]	@ 0x70
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	461a      	mov	r2, r3
 8009dba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009dbc:	61fb      	str	r3, [r7, #28]
 8009dbe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dc0:	69b9      	ldr	r1, [r7, #24]
 8009dc2:	69fa      	ldr	r2, [r7, #28]
 8009dc4:	e841 2300 	strex	r3, r2, [r1]
 8009dc8:	617b      	str	r3, [r7, #20]
   return(result);
 8009dca:	697b      	ldr	r3, [r7, #20]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d1e6      	bne.n	8009d9e <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009dd0:	e007      	b.n	8009de2 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	699a      	ldr	r2, [r3, #24]
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	f042 0208 	orr.w	r2, r2, #8
 8009de0:	619a      	str	r2, [r3, #24]
}
 8009de2:	bf00      	nop
 8009de4:	37a0      	adds	r7, #160	@ 0xa0
 8009de6:	46bd      	mov	sp, r7
 8009de8:	bd80      	pop	{r7, pc}
 8009dea:	bf00      	nop
 8009dec:	08009697 	.word	0x08009697

08009df0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009df0:	b480      	push	{r7}
 8009df2:	b083      	sub	sp, #12
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009df8:	bf00      	nop
 8009dfa:	370c      	adds	r7, #12
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bc80      	pop	{r7}
 8009e00:	4770      	bx	lr

08009e02 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009e02:	b480      	push	{r7}
 8009e04:	b083      	sub	sp, #12
 8009e06:	af00      	add	r7, sp, #0
 8009e08:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009e0a:	bf00      	nop
 8009e0c:	370c      	adds	r7, #12
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bc80      	pop	{r7}
 8009e12:	4770      	bx	lr

08009e14 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009e14:	b480      	push	{r7}
 8009e16:	b083      	sub	sp, #12
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009e1c:	bf00      	nop
 8009e1e:	370c      	adds	r7, #12
 8009e20:	46bd      	mov	sp, r7
 8009e22:	bc80      	pop	{r7}
 8009e24:	4770      	bx	lr

08009e26 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8009e26:	b580      	push	{r7, lr}
 8009e28:	b088      	sub	sp, #32
 8009e2a:	af02      	add	r7, sp, #8
 8009e2c:	60f8      	str	r0, [r7, #12]
 8009e2e:	1d3b      	adds	r3, r7, #4
 8009e30:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 8009e34:	2300      	movs	r3, #0
 8009e36:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009e3e:	2b01      	cmp	r3, #1
 8009e40:	d101      	bne.n	8009e46 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 8009e42:	2302      	movs	r3, #2
 8009e44:	e046      	b.n	8009ed4 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	2201      	movs	r2, #1
 8009e4a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	2224      	movs	r2, #36	@ 0x24
 8009e52:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	681a      	ldr	r2, [r3, #0]
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	f022 0201 	bic.w	r2, r2, #1
 8009e64:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	689b      	ldr	r3, [r3, #8]
 8009e6c:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009e70:	687a      	ldr	r2, [r7, #4]
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	430a      	orrs	r2, r1
 8009e78:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d105      	bne.n	8009e8c <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8009e80:	1d3b      	adds	r3, r7, #4
 8009e82:	e893 0006 	ldmia.w	r3, {r1, r2}
 8009e86:	68f8      	ldr	r0, [r7, #12]
 8009e88:	f000 f949 	bl	800a11e <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	681a      	ldr	r2, [r3, #0]
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	f042 0201 	orr.w	r2, r2, #1
 8009e9a:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009e9c:	f7f8 f992 	bl	80021c4 <HAL_GetTick>
 8009ea0:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009ea2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009ea6:	9300      	str	r3, [sp, #0]
 8009ea8:	693b      	ldr	r3, [r7, #16]
 8009eaa:	2200      	movs	r2, #0
 8009eac:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009eb0:	68f8      	ldr	r0, [r7, #12]
 8009eb2:	f7fe ffcf 	bl	8008e54 <UART_WaitOnFlagUntilTimeout>
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d002      	beq.n	8009ec2 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 8009ebc:	2303      	movs	r3, #3
 8009ebe:	75fb      	strb	r3, [r7, #23]
 8009ec0:	e003      	b.n	8009eca <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	2220      	movs	r2, #32
 8009ec6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	2200      	movs	r2, #0
 8009ece:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return status;
 8009ed2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	3718      	adds	r7, #24
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}

08009edc <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8009edc:	b480      	push	{r7}
 8009ede:	b089      	sub	sp, #36	@ 0x24
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009eea:	2b01      	cmp	r3, #1
 8009eec:	d101      	bne.n	8009ef2 <HAL_UARTEx_EnableStopMode+0x16>
 8009eee:	2302      	movs	r3, #2
 8009ef0:	e021      	b.n	8009f36 <HAL_UARTEx_EnableStopMode+0x5a>
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	2201      	movs	r2, #1
 8009ef6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	e853 3f00 	ldrex	r3, [r3]
 8009f06:	60bb      	str	r3, [r7, #8]
   return(result);
 8009f08:	68bb      	ldr	r3, [r7, #8]
 8009f0a:	f043 0302 	orr.w	r3, r3, #2
 8009f0e:	61fb      	str	r3, [r7, #28]
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	461a      	mov	r2, r3
 8009f16:	69fb      	ldr	r3, [r7, #28]
 8009f18:	61bb      	str	r3, [r7, #24]
 8009f1a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f1c:	6979      	ldr	r1, [r7, #20]
 8009f1e:	69ba      	ldr	r2, [r7, #24]
 8009f20:	e841 2300 	strex	r3, r2, [r1]
 8009f24:	613b      	str	r3, [r7, #16]
   return(result);
 8009f26:	693b      	ldr	r3, [r7, #16]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d1e6      	bne.n	8009efa <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2200      	movs	r2, #0
 8009f30:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8009f34:	2300      	movs	r3, #0
}
 8009f36:	4618      	mov	r0, r3
 8009f38:	3724      	adds	r7, #36	@ 0x24
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	bc80      	pop	{r7}
 8009f3e:	4770      	bx	lr

08009f40 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b084      	sub	sp, #16
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009f4e:	2b01      	cmp	r3, #1
 8009f50:	d101      	bne.n	8009f56 <HAL_UARTEx_EnableFifoMode+0x16>
 8009f52:	2302      	movs	r3, #2
 8009f54:	e02b      	b.n	8009fae <HAL_UARTEx_EnableFifoMode+0x6e>
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	2201      	movs	r2, #1
 8009f5a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	2224      	movs	r2, #36	@ 0x24
 8009f62:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	681a      	ldr	r2, [r3, #0]
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	f022 0201 	bic.w	r2, r2, #1
 8009f7c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009f84:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8009f8c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	68fa      	ldr	r2, [r7, #12]
 8009f94:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	f000 f8e4 	bl	800a164 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2220      	movs	r2, #32
 8009fa0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8009fac:	2300      	movs	r3, #0
}
 8009fae:	4618      	mov	r0, r3
 8009fb0:	3710      	adds	r7, #16
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	bd80      	pop	{r7, pc}

08009fb6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009fb6:	b480      	push	{r7}
 8009fb8:	b085      	sub	sp, #20
 8009fba:	af00      	add	r7, sp, #0
 8009fbc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009fc4:	2b01      	cmp	r3, #1
 8009fc6:	d101      	bne.n	8009fcc <HAL_UARTEx_DisableFifoMode+0x16>
 8009fc8:	2302      	movs	r3, #2
 8009fca:	e027      	b.n	800a01c <HAL_UARTEx_DisableFifoMode+0x66>
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2201      	movs	r2, #1
 8009fd0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2224      	movs	r2, #36	@ 0x24
 8009fd8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	681a      	ldr	r2, [r3, #0]
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	f022 0201 	bic.w	r2, r2, #1
 8009ff2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009ffa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2200      	movs	r2, #0
 800a000:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	68fa      	ldr	r2, [r7, #12]
 800a008:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	2220      	movs	r2, #32
 800a00e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2200      	movs	r2, #0
 800a016:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800a01a:	2300      	movs	r3, #0
}
 800a01c:	4618      	mov	r0, r3
 800a01e:	3714      	adds	r7, #20
 800a020:	46bd      	mov	sp, r7
 800a022:	bc80      	pop	{r7}
 800a024:	4770      	bx	lr

0800a026 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a026:	b580      	push	{r7, lr}
 800a028:	b084      	sub	sp, #16
 800a02a:	af00      	add	r7, sp, #0
 800a02c:	6078      	str	r0, [r7, #4]
 800a02e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a036:	2b01      	cmp	r3, #1
 800a038:	d101      	bne.n	800a03e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a03a:	2302      	movs	r3, #2
 800a03c:	e02d      	b.n	800a09a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	2201      	movs	r2, #1
 800a042:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	2224      	movs	r2, #36	@ 0x24
 800a04a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	681a      	ldr	r2, [r3, #0]
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	f022 0201 	bic.w	r2, r2, #1
 800a064:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	689b      	ldr	r3, [r3, #8]
 800a06c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	683a      	ldr	r2, [r7, #0]
 800a076:	430a      	orrs	r2, r1
 800a078:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	f000 f872 	bl	800a164 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	68fa      	ldr	r2, [r7, #12]
 800a086:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2220      	movs	r2, #32
 800a08c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2200      	movs	r2, #0
 800a094:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800a098:	2300      	movs	r3, #0
}
 800a09a:	4618      	mov	r0, r3
 800a09c:	3710      	adds	r7, #16
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	bd80      	pop	{r7, pc}

0800a0a2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a0a2:	b580      	push	{r7, lr}
 800a0a4:	b084      	sub	sp, #16
 800a0a6:	af00      	add	r7, sp, #0
 800a0a8:	6078      	str	r0, [r7, #4]
 800a0aa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a0b2:	2b01      	cmp	r3, #1
 800a0b4:	d101      	bne.n	800a0ba <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a0b6:	2302      	movs	r3, #2
 800a0b8:	e02d      	b.n	800a116 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2201      	movs	r2, #1
 800a0be:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	2224      	movs	r2, #36	@ 0x24
 800a0c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	681a      	ldr	r2, [r3, #0]
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	f022 0201 	bic.w	r2, r2, #1
 800a0e0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	689b      	ldr	r3, [r3, #8]
 800a0e8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	683a      	ldr	r2, [r7, #0]
 800a0f2:	430a      	orrs	r2, r1
 800a0f4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a0f6:	6878      	ldr	r0, [r7, #4]
 800a0f8:	f000 f834 	bl	800a164 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	68fa      	ldr	r2, [r7, #12]
 800a102:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	2220      	movs	r2, #32
 800a108:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2200      	movs	r2, #0
 800a110:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800a114:	2300      	movs	r3, #0
}
 800a116:	4618      	mov	r0, r3
 800a118:	3710      	adds	r7, #16
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd80      	pop	{r7, pc}

0800a11e <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800a11e:	b480      	push	{r7}
 800a120:	b085      	sub	sp, #20
 800a122:	af00      	add	r7, sp, #0
 800a124:	60f8      	str	r0, [r7, #12]
 800a126:	1d3b      	adds	r3, r7, #4
 800a128:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	685b      	ldr	r3, [r3, #4]
 800a132:	f023 0210 	bic.w	r2, r3, #16
 800a136:	893b      	ldrh	r3, [r7, #8]
 800a138:	4619      	mov	r1, r3
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	430a      	orrs	r2, r1
 800a140:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	685b      	ldr	r3, [r3, #4]
 800a148:	f023 417f 	bic.w	r1, r3, #4278190080	@ 0xff000000
 800a14c:	7abb      	ldrb	r3, [r7, #10]
 800a14e:	061a      	lsls	r2, r3, #24
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	430a      	orrs	r2, r1
 800a156:	605a      	str	r2, [r3, #4]
}
 800a158:	bf00      	nop
 800a15a:	3714      	adds	r7, #20
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bc80      	pop	{r7}
 800a160:	4770      	bx	lr
	...

0800a164 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a164:	b480      	push	{r7}
 800a166:	b085      	sub	sp, #20
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a170:	2b00      	cmp	r3, #0
 800a172:	d108      	bne.n	800a186 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2201      	movs	r2, #1
 800a178:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2201      	movs	r2, #1
 800a180:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a184:	e031      	b.n	800a1ea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a186:	2308      	movs	r3, #8
 800a188:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a18a:	2308      	movs	r3, #8
 800a18c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	689b      	ldr	r3, [r3, #8]
 800a194:	0e5b      	lsrs	r3, r3, #25
 800a196:	b2db      	uxtb	r3, r3
 800a198:	f003 0307 	and.w	r3, r3, #7
 800a19c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	689b      	ldr	r3, [r3, #8]
 800a1a4:	0f5b      	lsrs	r3, r3, #29
 800a1a6:	b2db      	uxtb	r3, r3
 800a1a8:	f003 0307 	and.w	r3, r3, #7
 800a1ac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a1ae:	7bbb      	ldrb	r3, [r7, #14]
 800a1b0:	7b3a      	ldrb	r2, [r7, #12]
 800a1b2:	4910      	ldr	r1, [pc, #64]	@ (800a1f4 <UARTEx_SetNbDataToProcess+0x90>)
 800a1b4:	5c8a      	ldrb	r2, [r1, r2]
 800a1b6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a1ba:	7b3a      	ldrb	r2, [r7, #12]
 800a1bc:	490e      	ldr	r1, [pc, #56]	@ (800a1f8 <UARTEx_SetNbDataToProcess+0x94>)
 800a1be:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a1c0:	fb93 f3f2 	sdiv	r3, r3, r2
 800a1c4:	b29a      	uxth	r2, r3
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a1cc:	7bfb      	ldrb	r3, [r7, #15]
 800a1ce:	7b7a      	ldrb	r2, [r7, #13]
 800a1d0:	4908      	ldr	r1, [pc, #32]	@ (800a1f4 <UARTEx_SetNbDataToProcess+0x90>)
 800a1d2:	5c8a      	ldrb	r2, [r1, r2]
 800a1d4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a1d8:	7b7a      	ldrb	r2, [r7, #13]
 800a1da:	4907      	ldr	r1, [pc, #28]	@ (800a1f8 <UARTEx_SetNbDataToProcess+0x94>)
 800a1dc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a1de:	fb93 f3f2 	sdiv	r3, r3, r2
 800a1e2:	b29a      	uxth	r2, r3
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a1ea:	bf00      	nop
 800a1ec:	3714      	adds	r7, #20
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bc80      	pop	{r7}
 800a1f2:	4770      	bx	lr
 800a1f4:	0801f2ac 	.word	0x0801f2ac
 800a1f8:	0801f2b4 	.word	0x0801f2b4

0800a1fc <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 800a200:	f7f7 fe80 	bl	8001f04 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 800a204:	f000 f820 	bl	800a248 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 800a208:	bf00      	nop
 800a20a:	bd80      	pop	{r7, pc}

0800a20c <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800a210:	f04f 30ff 	mov.w	r0, #4294967295
 800a214:	f010 fe92 	bl	801af3c <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 800a218:	bf00      	nop
 800a21a:	bd80      	pop	{r7, pc}

0800a21c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800a21c:	b480      	push	{r7}
 800a21e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800a220:	f3bf 8f4f 	dsb	sy
}
 800a224:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800a226:	4b06      	ldr	r3, [pc, #24]	@ (800a240 <__NVIC_SystemReset+0x24>)
 800a228:	68db      	ldr	r3, [r3, #12]
 800a22a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800a22e:	4904      	ldr	r1, [pc, #16]	@ (800a240 <__NVIC_SystemReset+0x24>)
 800a230:	4b04      	ldr	r3, [pc, #16]	@ (800a244 <__NVIC_SystemReset+0x28>)
 800a232:	4313      	orrs	r3, r2
 800a234:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800a236:	f3bf 8f4f 	dsb	sy
}
 800a23a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800a23c:	bf00      	nop
 800a23e:	e7fd      	b.n	800a23c <__NVIC_SystemReset+0x20>
 800a240:	e000ed00 	.word	0xe000ed00
 800a244:	05fa0004 	.word	0x05fa0004

0800a248 <LoRaWAN_Init>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b086      	sub	sp, #24
 800a24c:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN LoRaWAN_Init_LV */
  uint32_t feature_version = 0UL;
 800a24e:	2300      	movs	r3, #0
 800a250:	607b      	str	r3, [r7, #4]
  /* USER CODE END LoRaWAN_Init_LV */

  /* USER CODE BEGIN LoRaWAN_Init_1 */

  /* Get LoRaWAN APP version*/
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 800a252:	2300      	movs	r3, #0
 800a254:	9302      	str	r3, [sp, #8]
 800a256:	2302      	movs	r3, #2
 800a258:	9301      	str	r3, [sp, #4]
 800a25a:	2301      	movs	r3, #1
 800a25c:	9300      	str	r3, [sp, #0]
 800a25e:	4b60      	ldr	r3, [pc, #384]	@ (800a3e0 <LoRaWAN_Init+0x198>)
 800a260:	2200      	movs	r2, #0
 800a262:	2100      	movs	r1, #0
 800a264:	2002      	movs	r0, #2
 800a266:	f011 fab5 	bl	801b7d4 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(APP_VERSION_MAIN),
          (uint8_t)(APP_VERSION_SUB1),
          (uint8_t)(APP_VERSION_SUB2));

  /* Get MW LoRaWAN info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION:  V%X.%X.%X\r\n",
 800a26a:	2300      	movs	r3, #0
 800a26c:	9302      	str	r3, [sp, #8]
 800a26e:	2304      	movs	r3, #4
 800a270:	9301      	str	r3, [sp, #4]
 800a272:	2302      	movs	r3, #2
 800a274:	9300      	str	r3, [sp, #0]
 800a276:	4b5b      	ldr	r3, [pc, #364]	@ (800a3e4 <LoRaWAN_Init+0x19c>)
 800a278:	2200      	movs	r2, #0
 800a27a:	2100      	movs	r1, #0
 800a27c:	2002      	movs	r0, #2
 800a27e:	f011 faa9 	bl	801b7d4 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(LORAWAN_VERSION_MAIN),
          (uint8_t)(LORAWAN_VERSION_SUB1),
          (uint8_t)(LORAWAN_VERSION_SUB2));

  /* Get MW SubGhz_Phy info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:    V%X.%X.%X\r\n",
 800a282:	2300      	movs	r3, #0
 800a284:	9302      	str	r3, [sp, #8]
 800a286:	2302      	movs	r3, #2
 800a288:	9301      	str	r3, [sp, #4]
 800a28a:	2301      	movs	r3, #1
 800a28c:	9300      	str	r3, [sp, #0]
 800a28e:	4b56      	ldr	r3, [pc, #344]	@ (800a3e8 <LoRaWAN_Init+0x1a0>)
 800a290:	2200      	movs	r2, #0
 800a292:	2100      	movs	r1, #0
 800a294:	2002      	movs	r0, #2
 800a296:	f011 fa9d 	bl	801b7d4 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(SUBGHZ_PHY_VERSION_MAIN),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB1),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB2));

  /* Get LoRaWAN Link Layer info */
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 800a29a:	1d3b      	adds	r3, r7, #4
 800a29c:	4619      	mov	r1, r3
 800a29e:	2000      	movs	r0, #0
 800a2a0:	f003 f89a 	bl	800d3d8 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "L2_SPEC_VERSION:     V%X.%X.%X\r\n",
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	0e1b      	lsrs	r3, r3, #24
 800a2a8:	b2db      	uxtb	r3, r3
 800a2aa:	461a      	mov	r2, r3
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	0c1b      	lsrs	r3, r3, #16
 800a2b0:	b2db      	uxtb	r3, r3
 800a2b2:	4619      	mov	r1, r3
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	0a1b      	lsrs	r3, r3, #8
 800a2b8:	b2db      	uxtb	r3, r3
 800a2ba:	9302      	str	r3, [sp, #8]
 800a2bc:	9101      	str	r1, [sp, #4]
 800a2be:	9200      	str	r2, [sp, #0]
 800a2c0:	4b4a      	ldr	r3, [pc, #296]	@ (800a3ec <LoRaWAN_Init+0x1a4>)
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	2100      	movs	r1, #0
 800a2c6:	2002      	movs	r0, #2
 800a2c8:	f011 fa84 	bl	801b7d4 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8));

  /* Get LoRaWAN Regional Parameters info */
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 800a2cc:	1d3b      	adds	r3, r7, #4
 800a2ce:	4619      	mov	r1, r3
 800a2d0:	2001      	movs	r0, #1
 800a2d2:	f003 f881 	bl	800d3d8 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "RP_SPEC_VERSION:     V%X-%X.%X.%X\r\n",
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	0e1b      	lsrs	r3, r3, #24
 800a2da:	b2db      	uxtb	r3, r3
 800a2dc:	461a      	mov	r2, r3
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	0c1b      	lsrs	r3, r3, #16
 800a2e2:	b2db      	uxtb	r3, r3
 800a2e4:	4619      	mov	r1, r3
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	0a1b      	lsrs	r3, r3, #8
 800a2ea:	b2db      	uxtb	r3, r3
 800a2ec:	6878      	ldr	r0, [r7, #4]
 800a2ee:	b2c0      	uxtb	r0, r0
 800a2f0:	9003      	str	r0, [sp, #12]
 800a2f2:	9302      	str	r3, [sp, #8]
 800a2f4:	9101      	str	r1, [sp, #4]
 800a2f6:	9200      	str	r2, [sp, #0]
 800a2f8:	4b3d      	ldr	r3, [pc, #244]	@ (800a3f0 <LoRaWAN_Init+0x1a8>)
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	2100      	movs	r1, #0
 800a2fe:	2002      	movs	r0, #2
 800a300:	f011 fa68 	bl	801b7d4 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8),
          (uint8_t)(feature_version));

  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 800a304:	2300      	movs	r3, #0
 800a306:	9300      	str	r3, [sp, #0]
 800a308:	4b3a      	ldr	r3, [pc, #232]	@ (800a3f4 <LoRaWAN_Init+0x1ac>)
 800a30a:	2200      	movs	r2, #0
 800a30c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800a310:	4839      	ldr	r0, [pc, #228]	@ (800a3f8 <LoRaWAN_Init+0x1b0>)
 800a312:	f010 ffb1 	bl	801b278 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 800a316:	2300      	movs	r3, #0
 800a318:	9300      	str	r3, [sp, #0]
 800a31a:	4b38      	ldr	r3, [pc, #224]	@ (800a3fc <LoRaWAN_Init+0x1b4>)
 800a31c:	2200      	movs	r2, #0
 800a31e:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800a322:	4837      	ldr	r0, [pc, #220]	@ (800a400 <LoRaWAN_Init+0x1b8>)
 800a324:	f010 ffa8 	bl	801b278 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 800a328:	2300      	movs	r3, #0
 800a32a:	9300      	str	r3, [sp, #0]
 800a32c:	4b35      	ldr	r3, [pc, #212]	@ (800a404 <LoRaWAN_Init+0x1bc>)
 800a32e:	2201      	movs	r2, #1
 800a330:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800a334:	4834      	ldr	r0, [pc, #208]	@ (800a408 <LoRaWAN_Init+0x1c0>)
 800a336:	f010 ff9f 	bl	801b278 <UTIL_TIMER_Create>

  /* USER CODE END LoRaWAN_Init_1 */

  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 800a33a:	2300      	movs	r3, #0
 800a33c:	9300      	str	r3, [sp, #0]
 800a33e:	4b33      	ldr	r3, [pc, #204]	@ (800a40c <LoRaWAN_Init+0x1c4>)
 800a340:	2200      	movs	r2, #0
 800a342:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800a346:	4832      	ldr	r0, [pc, #200]	@ (800a410 <LoRaWAN_Init+0x1c8>)
 800a348:	f010 ff96 	bl	801b278 <UTIL_TIMER_Create>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 800a34c:	4a31      	ldr	r2, [pc, #196]	@ (800a414 <LoRaWAN_Init+0x1cc>)
 800a34e:	2100      	movs	r1, #0
 800a350:	2001      	movs	r0, #1
 800a352:	f010 feef 	bl	801b134 <UTIL_SEQ_RegTask>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 800a356:	4a30      	ldr	r2, [pc, #192]	@ (800a418 <LoRaWAN_Init+0x1d0>)
 800a358:	2100      	movs	r1, #0
 800a35a:	2002      	movs	r0, #2
 800a35c:	f010 feea 	bl	801b134 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 800a360:	4a2e      	ldr	r2, [pc, #184]	@ (800a41c <LoRaWAN_Init+0x1d4>)
 800a362:	2100      	movs	r1, #0
 800a364:	2004      	movs	r0, #4
 800a366:	f010 fee5 	bl	801b134 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 800a36a:	4a2d      	ldr	r2, [pc, #180]	@ (800a420 <LoRaWAN_Init+0x1d8>)
 800a36c:	2100      	movs	r1, #0
 800a36e:	2008      	movs	r0, #8
 800a370:	f010 fee0 	bl	801b134 <UTIL_SEQ_RegTask>

  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 800a374:	f000 fc5a 	bl	800ac2c <LoraInfo_Init>

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 800a378:	f04f 7181 	mov.w	r1, #16908288	@ 0x1020000
 800a37c:	4829      	ldr	r0, [pc, #164]	@ (800a424 <LoRaWAN_Init+0x1dc>)
 800a37e:	f002 f911 	bl	800c5a4 <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 800a382:	4829      	ldr	r0, [pc, #164]	@ (800a428 <LoRaWAN_Init+0x1e0>)
 800a384:	f002 f96c 	bl	800c660 <LmHandlerConfigure>

  /* USER CODE BEGIN LoRaWAN_Init_2 */
  UTIL_TIMER_Start(&JoinLedTimer);
 800a388:	481f      	ldr	r0, [pc, #124]	@ (800a408 <LoRaWAN_Init+0x1c0>)
 800a38a:	f010 ffab 	bl	801b2e4 <UTIL_TIMER_Start>
  UTIL_TIMER_Create(&CurrentSensorTimer, 1000, UTIL_TIMER_ONESHOT, CurrentSensorCallback, NULL);
 800a38e:	2300      	movs	r3, #0
 800a390:	9300      	str	r3, [sp, #0]
 800a392:	4b26      	ldr	r3, [pc, #152]	@ (800a42c <LoRaWAN_Init+0x1e4>)
 800a394:	2200      	movs	r2, #0
 800a396:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800a39a:	4825      	ldr	r0, [pc, #148]	@ (800a430 <LoRaWAN_Init+0x1e8>)
 800a39c:	f010 ff6c 	bl	801b278 <UTIL_TIMER_Create>
  UTIL_TIMER_Start(&CurrentSensorTimer);
 800a3a0:	4823      	ldr	r0, [pc, #140]	@ (800a430 <LoRaWAN_Init+0x1e8>)
 800a3a2:	f010 ff9f 	bl	801b2e4 <UTIL_TIMER_Start>
  /* USER CODE END LoRaWAN_Init_2 */

  LmHandlerJoin(ActivationType, ForceRejoin);
 800a3a6:	4b23      	ldr	r3, [pc, #140]	@ (800a434 <LoRaWAN_Init+0x1ec>)
 800a3a8:	781b      	ldrb	r3, [r3, #0]
 800a3aa:	4a23      	ldr	r2, [pc, #140]	@ (800a438 <LoRaWAN_Init+0x1f0>)
 800a3ac:	7812      	ldrb	r2, [r2, #0]
 800a3ae:	4611      	mov	r1, r2
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	f002 fad1 	bl	800c958 <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 800a3b6:	4b21      	ldr	r3, [pc, #132]	@ (800a43c <LoRaWAN_Init+0x1f4>)
 800a3b8:	781b      	ldrb	r3, [r3, #0]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d10b      	bne.n	800a3d6 <LoRaWAN_Init+0x18e>
  {
    /* send every time timer elapses */
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 800a3be:	4b20      	ldr	r3, [pc, #128]	@ (800a440 <LoRaWAN_Init+0x1f8>)
 800a3c0:	6819      	ldr	r1, [r3, #0]
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	9300      	str	r3, [sp, #0]
 800a3c6:	4b1f      	ldr	r3, [pc, #124]	@ (800a444 <LoRaWAN_Init+0x1fc>)
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	481f      	ldr	r0, [pc, #124]	@ (800a448 <LoRaWAN_Init+0x200>)
 800a3cc:	f010 ff54 	bl	801b278 <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 800a3d0:	481d      	ldr	r0, [pc, #116]	@ (800a448 <LoRaWAN_Init+0x200>)
 800a3d2:	f010 ff87 	bl	801b2e4 <UTIL_TIMER_Start>
  }

  /* USER CODE BEGIN LoRaWAN_Init_Last */

  /* USER CODE END LoRaWAN_Init_Last */
}
 800a3d6:	bf00      	nop
 800a3d8:	3708      	adds	r7, #8
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bd80      	pop	{r7, pc}
 800a3de:	bf00      	nop
 800a3e0:	0801e80c 	.word	0x0801e80c
 800a3e4:	0801e830 	.word	0x0801e830
 800a3e8:	0801e854 	.word	0x0801e854
 800a3ec:	0801e878 	.word	0x0801e878
 800a3f0:	0801e89c 	.word	0x0801e89c
 800a3f4:	0800a799 	.word	0x0800a799
 800a3f8:	200006c8 	.word	0x200006c8
 800a3fc:	0800a7ab 	.word	0x0800a7ab
 800a400:	200006e0 	.word	0x200006e0
 800a404:	0800a7bd 	.word	0x0800a7bd
 800a408:	200006f8 	.word	0x200006f8
 800a40c:	0800aaf5 	.word	0x0800aaf5
 800a410:	200005bc 	.word	0x200005bc
 800a414:	0800c8ed 	.word	0x0800c8ed
 800a418:	0800a709 	.word	0x0800a709
 800a41c:	0800ab19 	.word	0x0800ab19
 800a420:	0800aa75 	.word	0x0800aa75
 800a424:	2000000c 	.word	0x2000000c
 800a428:	20000058 	.word	0x20000058
 800a42c:	0800a475 	.word	0x0800a475
 800a430:	20000710 	.word	0x20000710
 800a434:	20000008 	.word	0x20000008
 800a438:	20000009 	.word	0x20000009
 800a43c:	200005a0 	.word	0x200005a0
 800a440:	2000006c 	.word	0x2000006c
 800a444:	0800a775 	.word	0x0800a775
 800a448:	200005a4 	.word	0x200005a4

0800a44c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN PB_Callbacks */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b082      	sub	sp, #8
 800a450:	af00      	add	r7, sp, #0
 800a452:	4603      	mov	r3, r0
 800a454:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 800a456:	88fb      	ldrh	r3, [r7, #6]
 800a458:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a45c:	d104      	bne.n	800a468 <HAL_GPIO_EXTI_Callback+0x1c>
  {
    case  BUT1_Pin:
    	// XXX: always initialized
      if (EventType == TX_ON_EVENT || 1)
      {
        UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800a45e:	2100      	movs	r1, #0
 800a460:	2002      	movs	r0, #2
 800a462:	f010 fe89 	bl	801b178 <UTIL_SEQ_SetTask>
      }
      break;
 800a466:	e000      	b.n	800a46a <HAL_GPIO_EXTI_Callback+0x1e>
    default:
      break;
 800a468:	bf00      	nop
  }
}
 800a46a:	bf00      	nop
 800a46c:	3708      	adds	r7, #8
 800a46e:	46bd      	mov	sp, r7
 800a470:	bd80      	pop	{r7, pc}
	...

0800a474 <CurrentSensorCallback>:

static void CurrentSensorCallback(void *context)
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b084      	sub	sp, #16
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
    static bool lastCurrentState = false;
    static bool initialized = false;

    GPIO_PinState pinState = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 800a47c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800a480:	4855      	ldr	r0, [pc, #340]	@ (800a5d8 <CurrentSensorCallback+0x164>)
 800a482:	f7fb f8d3 	bl	800562c <HAL_GPIO_ReadPin>
 800a486:	4603      	mov	r3, r0
 800a488:	73fb      	strb	r3, [r7, #15]
    bool currentState = (pinState == GPIO_PIN_SET);
 800a48a:	7bfb      	ldrb	r3, [r7, #15]
 800a48c:	2b01      	cmp	r3, #1
 800a48e:	bf0c      	ite	eq
 800a490:	2301      	moveq	r3, #1
 800a492:	2300      	movne	r3, #0
 800a494:	73bb      	strb	r3, [r7, #14]

    if (!initialized)
 800a496:	4b51      	ldr	r3, [pc, #324]	@ (800a5dc <CurrentSensorCallback+0x168>)
 800a498:	781b      	ldrb	r3, [r3, #0]
 800a49a:	f083 0301 	eor.w	r3, r3, #1
 800a49e:	b2db      	uxtb	r3, r3
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d03f      	beq.n	800a524 <CurrentSensorCallback+0xb0>
    {
        lastCurrentState = currentState;
 800a4a4:	4a4e      	ldr	r2, [pc, #312]	@ (800a5e0 <CurrentSensorCallback+0x16c>)
 800a4a6:	7bbb      	ldrb	r3, [r7, #14]
 800a4a8:	7013      	strb	r3, [r2, #0]
        currentDetected = currentState;
 800a4aa:	4a4e      	ldr	r2, [pc, #312]	@ (800a5e4 <CurrentSensorCallback+0x170>)
 800a4ac:	7bbb      	ldrb	r3, [r7, #14]
 800a4ae:	7013      	strb	r3, [r2, #0]
        initialized = true;
 800a4b0:	4b4a      	ldr	r3, [pc, #296]	@ (800a5dc <CurrentSensorCallback+0x168>)
 800a4b2:	2201      	movs	r2, #1
 800a4b4:	701a      	strb	r2, [r3, #0]

        if (currentState)
 800a4b6:	7bbb      	ldrb	r3, [r7, #14]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d018      	beq.n	800a4ee <CurrentSensorCallback+0x7a>
        {
            APP_LOG(TS_ON, VLEVEL_M, "First check: Current detected! Sending pump ON uplink...\r\n");
 800a4bc:	4b4a      	ldr	r3, [pc, #296]	@ (800a5e8 <CurrentSensorCallback+0x174>)
 800a4be:	2201      	movs	r2, #1
 800a4c0:	2100      	movs	r1, #0
 800a4c2:	2002      	movs	r0, #2
 800a4c4:	f011 f986 	bl	801b7d4 <UTIL_ADV_TRACE_COND_FSend>
            AppData.Port = LORAWAN_USER_APP_PORT;
 800a4c8:	4b48      	ldr	r3, [pc, #288]	@ (800a5ec <CurrentSensorCallback+0x178>)
 800a4ca:	2202      	movs	r2, #2
 800a4cc:	701a      	strb	r2, [r3, #0]
            AppData.BufferSize = 1;
 800a4ce:	4b47      	ldr	r3, [pc, #284]	@ (800a5ec <CurrentSensorCallback+0x178>)
 800a4d0:	2201      	movs	r2, #1
 800a4d2:	705a      	strb	r2, [r3, #1]
            AppDataBuffer[0] = 0x01; // Pump ON
 800a4d4:	4b46      	ldr	r3, [pc, #280]	@ (800a5f0 <CurrentSensorCallback+0x17c>)
 800a4d6:	2201      	movs	r2, #1
 800a4d8:	701a      	strb	r2, [r3, #0]
            AppData.Buffer = AppDataBuffer;
 800a4da:	4b44      	ldr	r3, [pc, #272]	@ (800a5ec <CurrentSensorCallback+0x178>)
 800a4dc:	4a44      	ldr	r2, [pc, #272]	@ (800a5f0 <CurrentSensorCallback+0x17c>)
 800a4de:	605a      	str	r2, [r3, #4]
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800a4e0:	2201      	movs	r2, #1
 800a4e2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a4e6:	483c      	ldr	r0, [pc, #240]	@ (800a5d8 <CurrentSensorCallback+0x164>)
 800a4e8:	f7fb f8b7 	bl	800565a <HAL_GPIO_WritePin>
 800a4ec:	e017      	b.n	800a51e <CurrentSensorCallback+0xaa>
        }
        else
        {
            APP_LOG(TS_ON, VLEVEL_M, "First check: No current! Sending pump OFF uplink...\r\n");
 800a4ee:	4b41      	ldr	r3, [pc, #260]	@ (800a5f4 <CurrentSensorCallback+0x180>)
 800a4f0:	2201      	movs	r2, #1
 800a4f2:	2100      	movs	r1, #0
 800a4f4:	2002      	movs	r0, #2
 800a4f6:	f011 f96d 	bl	801b7d4 <UTIL_ADV_TRACE_COND_FSend>
            AppData.Port = LORAWAN_USER_APP_PORT;
 800a4fa:	4b3c      	ldr	r3, [pc, #240]	@ (800a5ec <CurrentSensorCallback+0x178>)
 800a4fc:	2202      	movs	r2, #2
 800a4fe:	701a      	strb	r2, [r3, #0]
            AppData.BufferSize = 1;
 800a500:	4b3a      	ldr	r3, [pc, #232]	@ (800a5ec <CurrentSensorCallback+0x178>)
 800a502:	2201      	movs	r2, #1
 800a504:	705a      	strb	r2, [r3, #1]
            AppDataBuffer[0] = 0x00; // Pump OFF
 800a506:	4b3a      	ldr	r3, [pc, #232]	@ (800a5f0 <CurrentSensorCallback+0x17c>)
 800a508:	2200      	movs	r2, #0
 800a50a:	701a      	strb	r2, [r3, #0]
            AppData.Buffer = AppDataBuffer;
 800a50c:	4b37      	ldr	r3, [pc, #220]	@ (800a5ec <CurrentSensorCallback+0x178>)
 800a50e:	4a38      	ldr	r2, [pc, #224]	@ (800a5f0 <CurrentSensorCallback+0x17c>)
 800a510:	605a      	str	r2, [r3, #4]
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800a512:	2200      	movs	r2, #0
 800a514:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a518:	482f      	ldr	r0, [pc, #188]	@ (800a5d8 <CurrentSensorCallback+0x164>)
 800a51a:	f7fb f89e 	bl	800565a <HAL_GPIO_WritePin>
        }

        // เรียก SendTxData หลังจากตั้งค่าเสร็จ
        SendTxData();
 800a51e:	f000 f8f3 	bl	800a708 <SendTxData>
 800a522:	e052      	b.n	800a5ca <CurrentSensorCallback+0x156>
    }
    else if (currentState != lastCurrentState)
 800a524:	4b2e      	ldr	r3, [pc, #184]	@ (800a5e0 <CurrentSensorCallback+0x16c>)
 800a526:	781b      	ldrb	r3, [r3, #0]
 800a528:	7bba      	ldrb	r2, [r7, #14]
 800a52a:	429a      	cmp	r2, r3
 800a52c:	d04d      	beq.n	800a5ca <CurrentSensorCallback+0x156>
    {
        if (currentState)
 800a52e:	7bbb      	ldrb	r3, [r7, #14]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d015      	beq.n	800a560 <CurrentSensorCallback+0xec>
        {
            APP_LOG(TS_ON, VLEVEL_M, "Current detected! Sending pump ON uplink...\r\n");
 800a534:	4b30      	ldr	r3, [pc, #192]	@ (800a5f8 <CurrentSensorCallback+0x184>)
 800a536:	2201      	movs	r2, #1
 800a538:	2100      	movs	r1, #0
 800a53a:	2002      	movs	r0, #2
 800a53c:	f011 f94a 	bl	801b7d4 <UTIL_ADV_TRACE_COND_FSend>
            AppData.Port = LORAWAN_USER_APP_PORT;
 800a540:	4b2a      	ldr	r3, [pc, #168]	@ (800a5ec <CurrentSensorCallback+0x178>)
 800a542:	2202      	movs	r2, #2
 800a544:	701a      	strb	r2, [r3, #0]
            AppData.BufferSize = 1;
 800a546:	4b29      	ldr	r3, [pc, #164]	@ (800a5ec <CurrentSensorCallback+0x178>)
 800a548:	2201      	movs	r2, #1
 800a54a:	705a      	strb	r2, [r3, #1]
            AppDataBuffer[0] = 0x01; // Pump ON
 800a54c:	4b28      	ldr	r3, [pc, #160]	@ (800a5f0 <CurrentSensorCallback+0x17c>)
 800a54e:	2201      	movs	r2, #1
 800a550:	701a      	strb	r2, [r3, #0]
            AppData.Buffer = AppDataBuffer;
 800a552:	4b26      	ldr	r3, [pc, #152]	@ (800a5ec <CurrentSensorCallback+0x178>)
 800a554:	4a26      	ldr	r2, [pc, #152]	@ (800a5f0 <CurrentSensorCallback+0x17c>)
 800a556:	605a      	str	r2, [r3, #4]

            currentDetected = true;
 800a558:	4b22      	ldr	r3, [pc, #136]	@ (800a5e4 <CurrentSensorCallback+0x170>)
 800a55a:	2201      	movs	r2, #1
 800a55c:	701a      	strb	r2, [r3, #0]
 800a55e:	e02f      	b.n	800a5c0 <CurrentSensorCallback+0x14c>
        }
        else
        {
            APP_LOG(TS_ON, VLEVEL_M, "No current! Sending pump OFF uplink...\r\n");
 800a560:	4b26      	ldr	r3, [pc, #152]	@ (800a5fc <CurrentSensorCallback+0x188>)
 800a562:	2201      	movs	r2, #1
 800a564:	2100      	movs	r1, #0
 800a566:	2002      	movs	r0, #2
 800a568:	f011 f934 	bl	801b7d4 <UTIL_ADV_TRACE_COND_FSend>
            AppData.Port = LORAWAN_USER_APP_PORT;
 800a56c:	4b1f      	ldr	r3, [pc, #124]	@ (800a5ec <CurrentSensorCallback+0x178>)
 800a56e:	2202      	movs	r2, #2
 800a570:	701a      	strb	r2, [r3, #0]
            AppData.BufferSize = 1;
 800a572:	4b1e      	ldr	r3, [pc, #120]	@ (800a5ec <CurrentSensorCallback+0x178>)
 800a574:	2201      	movs	r2, #1
 800a576:	705a      	strb	r2, [r3, #1]
            AppDataBuffer[0] = 0x00; // Pump OFF
 800a578:	4b1d      	ldr	r3, [pc, #116]	@ (800a5f0 <CurrentSensorCallback+0x17c>)
 800a57a:	2200      	movs	r2, #0
 800a57c:	701a      	strb	r2, [r3, #0]
            AppData.Buffer = AppDataBuffer;
 800a57e:	4b1b      	ldr	r3, [pc, #108]	@ (800a5ec <CurrentSensorCallback+0x178>)
 800a580:	4a1b      	ldr	r2, [pc, #108]	@ (800a5f0 <CurrentSensorCallback+0x17c>)
 800a582:	605a      	str	r2, [r3, #4]

            currentDetected = false;
 800a584:	4b17      	ldr	r3, [pc, #92]	@ (800a5e4 <CurrentSensorCallback+0x170>)
 800a586:	2200      	movs	r2, #0
 800a588:	701a      	strb	r2, [r3, #0]

            if (pumpState == STATE_PUMP_ON || pumpState == STATE_AUTO)
 800a58a:	4b1d      	ldr	r3, [pc, #116]	@ (800a600 <CurrentSensorCallback+0x18c>)
 800a58c:	781b      	ldrb	r3, [r3, #0]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d003      	beq.n	800a59a <CurrentSensorCallback+0x126>
 800a592:	4b1b      	ldr	r3, [pc, #108]	@ (800a600 <CurrentSensorCallback+0x18c>)
 800a594:	781b      	ldrb	r3, [r3, #0]
 800a596:	2b01      	cmp	r3, #1
 800a598:	d10c      	bne.n	800a5b4 <CurrentSensorCallback+0x140>
            {
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET); // LED error
 800a59a:	2200      	movs	r2, #0
 800a59c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a5a0:	480d      	ldr	r0, [pc, #52]	@ (800a5d8 <CurrentSensorCallback+0x164>)
 800a5a2:	f7fb f85a 	bl	800565a <HAL_GPIO_WritePin>
                APP_LOG(TS_ON, VLEVEL_M, "ERROR: Pump should be ON but no current detected!\r\n");
 800a5a6:	4b17      	ldr	r3, [pc, #92]	@ (800a604 <CurrentSensorCallback+0x190>)
 800a5a8:	2201      	movs	r2, #1
 800a5aa:	2100      	movs	r1, #0
 800a5ac:	2002      	movs	r0, #2
 800a5ae:	f011 f911 	bl	801b7d4 <UTIL_ADV_TRACE_COND_FSend>
 800a5b2:	e005      	b.n	800a5c0 <CurrentSensorCallback+0x14c>
            }
            else
            {
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800a5b4:	2201      	movs	r2, #1
 800a5b6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a5ba:	4807      	ldr	r0, [pc, #28]	@ (800a5d8 <CurrentSensorCallback+0x164>)
 800a5bc:	f7fb f84d 	bl	800565a <HAL_GPIO_WritePin>
            }
        }

        lastCurrentState = currentState;
 800a5c0:	4a07      	ldr	r2, [pc, #28]	@ (800a5e0 <CurrentSensorCallback+0x16c>)
 800a5c2:	7bbb      	ldrb	r3, [r7, #14]
 800a5c4:	7013      	strb	r3, [r2, #0]
        SendTxData(); // เรียก SendTxData หลังจากตั้งค่า AppData เสร็จ
 800a5c6:	f000 f89f 	bl	800a708 <SendTxData>
    }

    UTIL_TIMER_Start(&CurrentSensorTimer);
 800a5ca:	480f      	ldr	r0, [pc, #60]	@ (800a608 <CurrentSensorCallback+0x194>)
 800a5cc:	f010 fe8a 	bl	801b2e4 <UTIL_TIMER_Start>
}
 800a5d0:	bf00      	nop
 800a5d2:	3710      	adds	r7, #16
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	bd80      	pop	{r7, pc}
 800a5d8:	48000400 	.word	0x48000400
 800a5dc:	20000729 	.word	0x20000729
 800a5e0:	2000072a 	.word	0x2000072a
 800a5e4:	20000728 	.word	0x20000728
 800a5e8:	0801e8c0 	.word	0x0801e8c0
 800a5ec:	20000070 	.word	0x20000070
 800a5f0:	200005d4 	.word	0x200005d4
 800a5f4:	0801e8fc 	.word	0x0801e8fc
 800a5f8:	0801e934 	.word	0x0801e934
 800a5fc:	0801e964 	.word	0x0801e964
 800a600:	20000388 	.word	0x20000388
 800a604:	0801e990 	.word	0x0801e990
 800a608:	20000710 	.word	0x20000710

0800a60c <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b086      	sub	sp, #24
 800a610:	af02      	add	r7, sp, #8
 800a612:	6078      	str	r0, [r7, #4]
 800a614:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */
  if (params != NULL && appData != NULL && appData->Buffer != NULL && appData->BufferSize > 0)
 800a616:	683b      	ldr	r3, [r7, #0]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d063      	beq.n	800a6e4 <OnRxData+0xd8>
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d060      	beq.n	800a6e4 <OnRxData+0xd8>
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	685b      	ldr	r3, [r3, #4]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d05c      	beq.n	800a6e4 <OnRxData+0xd8>
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	785b      	ldrb	r3, [r3, #1]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d058      	beq.n	800a6e4 <OnRxData+0xd8>
  {
    uint8_t command = appData->Buffer[0];
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	685b      	ldr	r3, [r3, #4]
 800a636:	781b      	ldrb	r3, [r3, #0]
 800a638:	73fb      	strb	r3, [r7, #15]
    uint8_t duration = appData->Buffer[1];
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	685b      	ldr	r3, [r3, #4]
 800a63e:	785b      	ldrb	r3, [r3, #1]
 800a640:	73bb      	strb	r3, [r7, #14]


    switch (command)
 800a642:	7bfb      	ldrb	r3, [r7, #15]
 800a644:	2b03      	cmp	r3, #3
 800a646:	d034      	beq.n	800a6b2 <OnRxData+0xa6>
 800a648:	2b03      	cmp	r3, #3
 800a64a:	dc42      	bgt.n	800a6d2 <OnRxData+0xc6>
 800a64c:	2b01      	cmp	r3, #1
 800a64e:	d002      	beq.n	800a656 <OnRxData+0x4a>
 800a650:	2b02      	cmp	r3, #2
 800a652:	d010      	beq.n	800a676 <OnRxData+0x6a>
 800a654:	e03d      	b.n	800a6d2 <OnRxData+0xc6>
    {
      case 0x01:  // Pump ON
        APP_LOG(TS_ON, VLEVEL_M, "Command 0x01: Pump ON\r\n");
 800a656:	4b25      	ldr	r3, [pc, #148]	@ (800a6ec <OnRxData+0xe0>)
 800a658:	2201      	movs	r2, #1
 800a65a:	2100      	movs	r1, #0
 800a65c:	2002      	movs	r0, #2
 800a65e:	f011 f8b9 	bl	801b7d4 <UTIL_ADV_TRACE_COND_FSend>
        pumpState = STATE_PUMP_ON;
 800a662:	4b23      	ldr	r3, [pc, #140]	@ (800a6f0 <OnRxData+0xe4>)
 800a664:	2200      	movs	r2, #0
 800a666:	701a      	strb	r2, [r3, #0]
        PumpStateMachine(pumpState, 0);
 800a668:	4b21      	ldr	r3, [pc, #132]	@ (800a6f0 <OnRxData+0xe4>)
 800a66a:	781b      	ldrb	r3, [r3, #0]
 800a66c:	2100      	movs	r1, #0
 800a66e:	4618      	mov	r0, r3
 800a670:	f7f7 f9e4 	bl	8001a3c <PumpStateMachine>
        break;
 800a674:	e036      	b.n	800a6e4 <OnRxData+0xd8>

      case 0x02:  // Pump AUTO
        APP_LOG(TS_ON, VLEVEL_M, "Command 0x02: Pump AUTO\r\n");
 800a676:	4b1f      	ldr	r3, [pc, #124]	@ (800a6f4 <OnRxData+0xe8>)
 800a678:	2201      	movs	r2, #1
 800a67a:	2100      	movs	r1, #0
 800a67c:	2002      	movs	r0, #2
 800a67e:	f011 f8a9 	bl	801b7d4 <UTIL_ADV_TRACE_COND_FSend>
        durationMinutes = duration;
 800a682:	4a1d      	ldr	r2, [pc, #116]	@ (800a6f8 <OnRxData+0xec>)
 800a684:	7bbb      	ldrb	r3, [r7, #14]
 800a686:	7013      	strb	r3, [r2, #0]
        APP_LOG(TS_ON, VLEVEL_M, "Duration: %d minute(s)\r\n", durationMinutes);
 800a688:	4b1b      	ldr	r3, [pc, #108]	@ (800a6f8 <OnRxData+0xec>)
 800a68a:	781b      	ldrb	r3, [r3, #0]
 800a68c:	9300      	str	r3, [sp, #0]
 800a68e:	4b1b      	ldr	r3, [pc, #108]	@ (800a6fc <OnRxData+0xf0>)
 800a690:	2201      	movs	r2, #1
 800a692:	2100      	movs	r1, #0
 800a694:	2002      	movs	r0, #2
 800a696:	f011 f89d 	bl	801b7d4 <UTIL_ADV_TRACE_COND_FSend>
        pumpState = STATE_AUTO;
 800a69a:	4b15      	ldr	r3, [pc, #84]	@ (800a6f0 <OnRxData+0xe4>)
 800a69c:	2201      	movs	r2, #1
 800a69e:	701a      	strb	r2, [r3, #0]
        PumpStateMachine(pumpState,durationMinutes);
 800a6a0:	4b13      	ldr	r3, [pc, #76]	@ (800a6f0 <OnRxData+0xe4>)
 800a6a2:	781b      	ldrb	r3, [r3, #0]
 800a6a4:	4a14      	ldr	r2, [pc, #80]	@ (800a6f8 <OnRxData+0xec>)
 800a6a6:	7812      	ldrb	r2, [r2, #0]
 800a6a8:	4611      	mov	r1, r2
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	f7f7 f9c6 	bl	8001a3c <PumpStateMachine>
        break;
 800a6b0:	e018      	b.n	800a6e4 <OnRxData+0xd8>

      case 0x03:  // Pump OFF
        APP_LOG(TS_ON, VLEVEL_M, "Command 0x03: Pump OFF\r\n");
 800a6b2:	4b13      	ldr	r3, [pc, #76]	@ (800a700 <OnRxData+0xf4>)
 800a6b4:	2201      	movs	r2, #1
 800a6b6:	2100      	movs	r1, #0
 800a6b8:	2002      	movs	r0, #2
 800a6ba:	f011 f88b 	bl	801b7d4 <UTIL_ADV_TRACE_COND_FSend>
        pumpState = STATE_PUMP_OFF;
 800a6be:	4b0c      	ldr	r3, [pc, #48]	@ (800a6f0 <OnRxData+0xe4>)
 800a6c0:	2202      	movs	r2, #2
 800a6c2:	701a      	strb	r2, [r3, #0]
        PumpStateMachine(pumpState, 0);
 800a6c4:	4b0a      	ldr	r3, [pc, #40]	@ (800a6f0 <OnRxData+0xe4>)
 800a6c6:	781b      	ldrb	r3, [r3, #0]
 800a6c8:	2100      	movs	r1, #0
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	f7f7 f9b6 	bl	8001a3c <PumpStateMachine>
        break;
 800a6d0:	e008      	b.n	800a6e4 <OnRxData+0xd8>

      default:
        APP_LOG(TS_ON, VLEVEL_M, "Unknown command: 0x%02X\r\n", command);
 800a6d2:	7bfb      	ldrb	r3, [r7, #15]
 800a6d4:	9300      	str	r3, [sp, #0]
 800a6d6:	4b0b      	ldr	r3, [pc, #44]	@ (800a704 <OnRxData+0xf8>)
 800a6d8:	2201      	movs	r2, #1
 800a6da:	2100      	movs	r1, #0
 800a6dc:	2002      	movs	r0, #2
 800a6de:	f011 f879 	bl	801b7d4 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800a6e2:	bf00      	nop
    }
  }
  /* USER CODE END OnRxData_1 */
}
 800a6e4:	bf00      	nop
 800a6e6:	3710      	adds	r7, #16
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	bd80      	pop	{r7, pc}
 800a6ec:	0801e9c4 	.word	0x0801e9c4
 800a6f0:	20000388 	.word	0x20000388
 800a6f4:	0801e9dc 	.word	0x0801e9dc
 800a6f8:	20000389 	.word	0x20000389
 800a6fc:	0801e9f8 	.word	0x0801e9f8
 800a700:	0801ea14 	.word	0x0801ea14
 800a704:	0801ea30 	.word	0x0801ea30

0800a708 <SendTxData>:


static void SendTxData(void)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b082      	sub	sp, #8
 800a70c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SendTxData_1 */
	 LmHandlerErrorStatus_t status;

	  if (AppData.BufferSize == 0 || AppData.Buffer == NULL)
 800a70e:	4b15      	ldr	r3, [pc, #84]	@ (800a764 <SendTxData+0x5c>)
 800a710:	785b      	ldrb	r3, [r3, #1]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d003      	beq.n	800a71e <SendTxData+0x16>
 800a716:	4b13      	ldr	r3, [pc, #76]	@ (800a764 <SendTxData+0x5c>)
 800a718:	685b      	ldr	r3, [r3, #4]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d106      	bne.n	800a72c <SendTxData+0x24>
	  {
	    APP_LOG(TS_ON, VLEVEL_L, "No data to send!\r\n");
 800a71e:	4b12      	ldr	r3, [pc, #72]	@ (800a768 <SendTxData+0x60>)
 800a720:	2201      	movs	r2, #1
 800a722:	2100      	movs	r1, #0
 800a724:	2001      	movs	r0, #1
 800a726:	f011 f855 	bl	801b7d4 <UTIL_ADV_TRACE_COND_FSend>
	    return;
 800a72a:	e017      	b.n	800a75c <SendTxData+0x54>
	  }

	  status = LmHandlerSend(&AppData, LORAWAN_DEFAULT_CONFIRMED_MSG_STATE, false);
 800a72c:	2200      	movs	r2, #0
 800a72e:	2100      	movs	r1, #0
 800a730:	480c      	ldr	r0, [pc, #48]	@ (800a764 <SendTxData+0x5c>)
 800a732:	f002 f9af 	bl	800ca94 <LmHandlerSend>
 800a736:	4603      	mov	r3, r0
 800a738:	71fb      	strb	r3, [r7, #7]

	  if (status == LORAMAC_HANDLER_SUCCESS)
 800a73a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d106      	bne.n	800a750 <SendTxData+0x48>
	  {
	    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST SUCCESS\r\n");
 800a742:	4b0a      	ldr	r3, [pc, #40]	@ (800a76c <SendTxData+0x64>)
 800a744:	2201      	movs	r2, #1
 800a746:	2100      	movs	r1, #0
 800a748:	2001      	movs	r0, #1
 800a74a:	f011 f843 	bl	801b7d4 <UTIL_ADV_TRACE_COND_FSend>
 800a74e:	e005      	b.n	800a75c <SendTxData+0x54>
	  }
	  else
	  {
	    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST FAILED\r\n");
 800a750:	4b07      	ldr	r3, [pc, #28]	@ (800a770 <SendTxData+0x68>)
 800a752:	2201      	movs	r2, #1
 800a754:	2100      	movs	r1, #0
 800a756:	2001      	movs	r0, #1
 800a758:	f011 f83c 	bl	801b7d4 <UTIL_ADV_TRACE_COND_FSend>
	  }
  /* USER CODE END SendTxData_1 */
}
 800a75c:	3708      	adds	r7, #8
 800a75e:	46bd      	mov	sp, r7
 800a760:	bd80      	pop	{r7, pc}
 800a762:	bf00      	nop
 800a764:	20000070 	.word	0x20000070
 800a768:	0801ea4c 	.word	0x0801ea4c
 800a76c:	0801ea60 	.word	0x0801ea60
 800a770:	0801ea78 	.word	0x0801ea78

0800a774 <OnTxTimerEvent>:



static void OnTxTimerEvent(void *context)
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b082      	sub	sp, #8
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800a77c:	2100      	movs	r1, #0
 800a77e:	2002      	movs	r0, #2
 800a780:	f010 fcfa 	bl	801b178 <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 800a784:	4803      	ldr	r0, [pc, #12]	@ (800a794 <OnTxTimerEvent+0x20>)
 800a786:	f010 fdad 	bl	801b2e4 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 800a78a:	bf00      	nop
 800a78c:	3708      	adds	r7, #8
 800a78e:	46bd      	mov	sp, r7
 800a790:	bd80      	pop	{r7, pc}
 800a792:	bf00      	nop
 800a794:	200005a4 	.word	0x200005a4

0800a798 <OnTxTimerLedEvent>:

/* USER CODE BEGIN PrFD_LedEvents */
static void OnTxTimerLedEvent(void *context)
{
 800a798:	b480      	push	{r7}
 800a79a:	b083      	sub	sp, #12
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
#if 0	// XXX: No LED available
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
}
 800a7a0:	bf00      	nop
 800a7a2:	370c      	adds	r7, #12
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	bc80      	pop	{r7}
 800a7a8:	4770      	bx	lr

0800a7aa <OnRxTimerLedEvent>:

static void OnRxTimerLedEvent(void *context)
{
 800a7aa:	b480      	push	{r7}
 800a7ac:	b083      	sub	sp, #12
 800a7ae:	af00      	add	r7, sp, #0
 800a7b0:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
#endif
}
 800a7b2:	bf00      	nop
 800a7b4:	370c      	adds	r7, #12
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	bc80      	pop	{r7}
 800a7ba:	4770      	bx	lr

0800a7bc <OnJoinTimerLedEvent>:

static void OnJoinTimerLedEvent(void *context)
{
 800a7bc:	b480      	push	{r7}
 800a7be:	b083      	sub	sp, #12
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
#endif
}
 800a7c4:	bf00      	nop
 800a7c6:	370c      	adds	r7, #12
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	bc80      	pop	{r7}
 800a7cc:	4770      	bx	lr
	...

0800a7d0 <OnTxData>:

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b086      	sub	sp, #24
 800a7d4:	af04      	add	r7, sp, #16
 800a7d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  if ((params != NULL))
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d041      	beq.n	800a862 <OnTxData+0x92>
  {
    /* Process Tx event only if its a mcps response to prevent some internal events (mlme) */
    if (params->IsMcpsConfirm != 0)
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	781b      	ldrb	r3, [r3, #0]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d03d      	beq.n	800a862 <OnTxData+0x92>
    {
#if 0	// XXX: No LED available
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif
      UTIL_TIMER_Start(&TxLedTimer);
 800a7e6:	4821      	ldr	r0, [pc, #132]	@ (800a86c <OnTxData+0x9c>)
 800a7e8:	f010 fd7c 	bl	801b2e4 <UTIL_TIMER_Start>

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 800a7ec:	4b20      	ldr	r3, [pc, #128]	@ (800a870 <OnTxData+0xa0>)
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	2100      	movs	r1, #0
 800a7f2:	2002      	movs	r0, #2
 800a7f4:	f010 ffee 	bl	801b7d4 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	68db      	ldr	r3, [r3, #12]
 800a7fc:	687a      	ldr	r2, [r7, #4]
 800a7fe:	7c12      	ldrb	r2, [r2, #16]
 800a800:	4611      	mov	r1, r2
 800a802:	687a      	ldr	r2, [r7, #4]
 800a804:	f992 200a 	ldrsb.w	r2, [r2, #10]
 800a808:	4610      	mov	r0, r2
 800a80a:	687a      	ldr	r2, [r7, #4]
 800a80c:	f992 2018 	ldrsb.w	r2, [r2, #24]
 800a810:	9203      	str	r2, [sp, #12]
 800a812:	9002      	str	r0, [sp, #8]
 800a814:	9101      	str	r1, [sp, #4]
 800a816:	9300      	str	r3, [sp, #0]
 800a818:	4b16      	ldr	r3, [pc, #88]	@ (800a874 <OnTxData+0xa4>)
 800a81a:	2200      	movs	r2, #0
 800a81c:	2100      	movs	r1, #0
 800a81e:	2003      	movs	r0, #3
 800a820:	f010 ffd8 	bl	801b7d4 <UTIL_ADV_TRACE_COND_FSend>
              params->AppData.Port, params->Datarate, params->TxPower);

      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 800a824:	4b14      	ldr	r3, [pc, #80]	@ (800a878 <OnTxData+0xa8>)
 800a826:	2200      	movs	r2, #0
 800a828:	2100      	movs	r1, #0
 800a82a:	2003      	movs	r0, #3
 800a82c:	f010 ffd2 	bl	801b7d4 <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	7a1b      	ldrb	r3, [r3, #8]
 800a834:	2b01      	cmp	r3, #1
 800a836:	d10e      	bne.n	800a856 <OnTxData+0x86>
      {
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	7a5b      	ldrb	r3, [r3, #9]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d001      	beq.n	800a844 <OnTxData+0x74>
 800a840:	4b0e      	ldr	r3, [pc, #56]	@ (800a87c <OnTxData+0xac>)
 800a842:	e000      	b.n	800a846 <OnTxData+0x76>
 800a844:	4b0e      	ldr	r3, [pc, #56]	@ (800a880 <OnTxData+0xb0>)
 800a846:	9300      	str	r3, [sp, #0]
 800a848:	4b0e      	ldr	r3, [pc, #56]	@ (800a884 <OnTxData+0xb4>)
 800a84a:	2200      	movs	r2, #0
 800a84c:	2100      	movs	r1, #0
 800a84e:	2003      	movs	r0, #3
 800a850:	f010 ffc0 	bl	801b7d4 <UTIL_ADV_TRACE_COND_FSend>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
      }
    }
  }
  /* USER CODE END OnTxData_1 */
}
 800a854:	e005      	b.n	800a862 <OnTxData+0x92>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 800a856:	4b0c      	ldr	r3, [pc, #48]	@ (800a888 <OnTxData+0xb8>)
 800a858:	2200      	movs	r2, #0
 800a85a:	2100      	movs	r1, #0
 800a85c:	2003      	movs	r0, #3
 800a85e:	f010 ffb9 	bl	801b7d4 <UTIL_ADV_TRACE_COND_FSend>
}
 800a862:	bf00      	nop
 800a864:	3708      	adds	r7, #8
 800a866:	46bd      	mov	sp, r7
 800a868:	bd80      	pop	{r7, pc}
 800a86a:	bf00      	nop
 800a86c:	200006c8 	.word	0x200006c8
 800a870:	0801ea90 	.word	0x0801ea90
 800a874:	0801eac4 	.word	0x0801eac4
 800a878:	0801eaf8 	.word	0x0801eaf8
 800a87c:	0801eb08 	.word	0x0801eb08
 800a880:	0801eb0c 	.word	0x0801eb0c
 800a884:	0801eb14 	.word	0x0801eb14
 800a888:	0801eb28 	.word	0x0801eb28

0800a88c <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b082      	sub	sp, #8
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
	if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d108      	bne.n	800a8b0 <OnJoinRequest+0x24>
	{
	    APP_LOG(TS_OFF, VLEVEL_M, "Join Success -> Switching to Class C and Halt\r\n");
 800a89e:	4b06      	ldr	r3, [pc, #24]	@ (800a8b8 <OnJoinRequest+0x2c>)
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	2100      	movs	r1, #0
 800a8a4:	2002      	movs	r0, #2
 800a8a6:	f010 ff95 	bl	801b7d4 <UTIL_ADV_TRACE_COND_FSend>
	    LmHandlerRequestClass(CLASS_C);    // บังคับเปลี่ยนเป็น Class C
 800a8aa:	2002      	movs	r0, #2
 800a8ac:	f002 f9e0 	bl	800cc70 <LmHandlerRequestClass>
	}

  /* USER CODE END OnJoinRequest_1 */
}
 800a8b0:	bf00      	nop
 800a8b2:	3708      	adds	r7, #8
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	bd80      	pop	{r7, pc}
 800a8b8:	0801eb38 	.word	0x0801eb38

0800a8bc <OnBeaconStatusChange>:

static void OnBeaconStatusChange(LmHandlerBeaconParams_t *params)
{
 800a8bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a8be:	b093      	sub	sp, #76	@ 0x4c
 800a8c0:	af0c      	add	r7, sp, #48	@ 0x30
 800a8c2:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN OnBeaconStatusChange_1 */
  if (params != NULL)
 800a8c4:	697b      	ldr	r3, [r7, #20]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d056      	beq.n	800a978 <OnBeaconStatusChange+0xbc>
  {
    switch (params->State)
 800a8ca:	697b      	ldr	r3, [r7, #20]
 800a8cc:	785b      	ldrb	r3, [r3, #1]
 800a8ce:	2b02      	cmp	r3, #2
 800a8d0:	d008      	beq.n	800a8e4 <OnBeaconStatusChange+0x28>
 800a8d2:	2b03      	cmp	r3, #3
 800a8d4:	d049      	beq.n	800a96a <OnBeaconStatusChange+0xae>
    {
      default:
      case LORAMAC_HANDLER_BEACON_LOST:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON LOST\r\n");
 800a8d6:	4b2a      	ldr	r3, [pc, #168]	@ (800a980 <OnBeaconStatusChange+0xc4>)
 800a8d8:	2200      	movs	r2, #0
 800a8da:	2100      	movs	r1, #0
 800a8dc:	2002      	movs	r0, #2
 800a8de:	f010 ff79 	bl	801b7d4 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800a8e2:	e049      	b.n	800a978 <OnBeaconStatusChange+0xbc>
      }
      case LORAMAC_HANDLER_BEACON_RX:
      {
        APP_LOG(TS_OFF, VLEVEL_M,
 800a8e4:	697b      	ldr	r3, [r7, #20]
 800a8e6:	7c1b      	ldrb	r3, [r3, #16]
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	697b      	ldr	r3, [r7, #20]
 800a8ec:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800a8f0:	461c      	mov	r4, r3
 800a8f2:	697b      	ldr	r3, [r7, #20]
 800a8f4:	f993 3014 	ldrsb.w	r3, [r3, #20]
 800a8f8:	461d      	mov	r5, r3
 800a8fa:	697b      	ldr	r3, [r7, #20]
 800a8fc:	68db      	ldr	r3, [r3, #12]
 800a8fe:	697a      	ldr	r2, [r7, #20]
 800a900:	6852      	ldr	r2, [r2, #4]
 800a902:	6979      	ldr	r1, [r7, #20]
 800a904:	7d89      	ldrb	r1, [r1, #22]
 800a906:	460e      	mov	r6, r1
 800a908:	6979      	ldr	r1, [r7, #20]
 800a90a:	7dc9      	ldrb	r1, [r1, #23]
 800a90c:	6139      	str	r1, [r7, #16]
 800a90e:	6979      	ldr	r1, [r7, #20]
 800a910:	7e09      	ldrb	r1, [r1, #24]
 800a912:	60f9      	str	r1, [r7, #12]
 800a914:	6979      	ldr	r1, [r7, #20]
 800a916:	7e49      	ldrb	r1, [r1, #25]
 800a918:	60b9      	str	r1, [r7, #8]
 800a91a:	6979      	ldr	r1, [r7, #20]
 800a91c:	7e89      	ldrb	r1, [r1, #26]
 800a91e:	6079      	str	r1, [r7, #4]
 800a920:	6979      	ldr	r1, [r7, #20]
 800a922:	7ec9      	ldrb	r1, [r1, #27]
 800a924:	6039      	str	r1, [r7, #0]
 800a926:	6979      	ldr	r1, [r7, #20]
 800a928:	7f09      	ldrb	r1, [r1, #28]
 800a92a:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a92c:	f8d7 c000 	ldr.w	ip, [r7]
 800a930:	f8cd c028 	str.w	ip, [sp, #40]	@ 0x28
 800a934:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800a938:	f8cd c024 	str.w	ip, [sp, #36]	@ 0x24
 800a93c:	f8d7 c008 	ldr.w	ip, [r7, #8]
 800a940:	f8cd c020 	str.w	ip, [sp, #32]
 800a944:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 800a948:	f8cd c01c 	str.w	ip, [sp, #28]
 800a94c:	6939      	ldr	r1, [r7, #16]
 800a94e:	9106      	str	r1, [sp, #24]
 800a950:	9605      	str	r6, [sp, #20]
 800a952:	9204      	str	r2, [sp, #16]
 800a954:	9303      	str	r3, [sp, #12]
 800a956:	9502      	str	r5, [sp, #8]
 800a958:	9401      	str	r4, [sp, #4]
 800a95a:	9000      	str	r0, [sp, #0]
 800a95c:	4b09      	ldr	r3, [pc, #36]	@ (800a984 <OnBeaconStatusChange+0xc8>)
 800a95e:	2200      	movs	r2, #0
 800a960:	2100      	movs	r1, #0
 800a962:	2002      	movs	r0, #2
 800a964:	f010 ff36 	bl	801b7d4 <UTIL_ADV_TRACE_COND_FSend>
                params->Info.Datarate, params->Info.Rssi, params->Info.Snr, params->Info.Frequency,
                params->Info.Time.Seconds, params->Info.GwSpecific.InfoDesc,
                params->Info.GwSpecific.Info[0], params->Info.GwSpecific.Info[1],
                params->Info.GwSpecific.Info[2], params->Info.GwSpecific.Info[3],
                params->Info.GwSpecific.Info[4], params->Info.GwSpecific.Info[5]);
        break;
 800a968:	e006      	b.n	800a978 <OnBeaconStatusChange+0xbc>
      }
      case LORAMAC_HANDLER_BEACON_NRX:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
 800a96a:	4b07      	ldr	r3, [pc, #28]	@ (800a988 <OnBeaconStatusChange+0xcc>)
 800a96c:	2200      	movs	r2, #0
 800a96e:	2100      	movs	r1, #0
 800a970:	2002      	movs	r0, #2
 800a972:	f010 ff2f 	bl	801b7d4 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800a976:	bf00      	nop
      }
    }
  }
  /* USER CODE END OnBeaconStatusChange_1 */
}
 800a978:	bf00      	nop
 800a97a:	371c      	adds	r7, #28
 800a97c:	46bd      	mov	sp, r7
 800a97e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a980:	0801eb68 	.word	0x0801eb68
 800a984:	0801eb80 	.word	0x0801eb80
 800a988:	0801ebf4 	.word	0x0801ebf4

0800a98c <OnClassChange>:

static void OnClassChange(DeviceClass_t deviceClass)
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b084      	sub	sp, #16
 800a990:	af02      	add	r7, sp, #8
 800a992:	4603      	mov	r3, r0
 800a994:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnClassChange_1 */
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 800a996:	79fb      	ldrb	r3, [r7, #7]
 800a998:	4a06      	ldr	r2, [pc, #24]	@ (800a9b4 <OnClassChange+0x28>)
 800a99a:	5cd3      	ldrb	r3, [r2, r3]
 800a99c:	9300      	str	r3, [sp, #0]
 800a99e:	4b06      	ldr	r3, [pc, #24]	@ (800a9b8 <OnClassChange+0x2c>)
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	2100      	movs	r1, #0
 800a9a4:	2002      	movs	r0, #2
 800a9a6:	f010 ff15 	bl	801b7d4 <UTIL_ADV_TRACE_COND_FSend>
  /* USER CODE END OnClassChange_1 */
}
 800a9aa:	bf00      	nop
 800a9ac:	3708      	adds	r7, #8
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	bd80      	pop	{r7, pc}
 800a9b2:	bf00      	nop
 800a9b4:	0801ec30 	.word	0x0801ec30
 800a9b8:	0801ec14 	.word	0x0801ec14

0800a9bc <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 800a9c0:	2100      	movs	r1, #0
 800a9c2:	2001      	movs	r0, #1
 800a9c4:	f010 fbd8 	bl	801b178 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 800a9c8:	bf00      	nop
 800a9ca:	bd80      	pop	{r7, pc}

0800a9cc <OnTxPeriodicityChanged>:

static void OnTxPeriodicityChanged(uint32_t periodicity)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b082      	sub	sp, #8
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxPeriodicityChanged_1 */

  /* USER CODE END OnTxPeriodicityChanged_1 */
  TxPeriodicity = periodicity;
 800a9d4:	4a0d      	ldr	r2, [pc, #52]	@ (800aa0c <OnTxPeriodicityChanged+0x40>)
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	6013      	str	r3, [r2, #0]

  if (TxPeriodicity == 0)
 800a9da:	4b0c      	ldr	r3, [pc, #48]	@ (800aa0c <OnTxPeriodicityChanged+0x40>)
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d103      	bne.n	800a9ea <OnTxPeriodicityChanged+0x1e>
  {
    /* Revert to application default periodicity */
    TxPeriodicity = APP_TX_DUTYCYCLE;
 800a9e2:	4b0a      	ldr	r3, [pc, #40]	@ (800aa0c <OnTxPeriodicityChanged+0x40>)
 800a9e4:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a9e8:	601a      	str	r2, [r3, #0]
  }

  /* Update timer periodicity */
  UTIL_TIMER_Stop(&TxTimer);
 800a9ea:	4809      	ldr	r0, [pc, #36]	@ (800aa10 <OnTxPeriodicityChanged+0x44>)
 800a9ec:	f010 fce8 	bl	801b3c0 <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 800a9f0:	4b06      	ldr	r3, [pc, #24]	@ (800aa0c <OnTxPeriodicityChanged+0x40>)
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	4619      	mov	r1, r3
 800a9f6:	4806      	ldr	r0, [pc, #24]	@ (800aa10 <OnTxPeriodicityChanged+0x44>)
 800a9f8:	f010 fd52 	bl	801b4a0 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 800a9fc:	4804      	ldr	r0, [pc, #16]	@ (800aa10 <OnTxPeriodicityChanged+0x44>)
 800a9fe:	f010 fc71 	bl	801b2e4 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxPeriodicityChanged_2 */

  /* USER CODE END OnTxPeriodicityChanged_2 */
}
 800aa02:	bf00      	nop
 800aa04:	3708      	adds	r7, #8
 800aa06:	46bd      	mov	sp, r7
 800aa08:	bd80      	pop	{r7, pc}
 800aa0a:	bf00      	nop
 800aa0c:	2000006c 	.word	0x2000006c
 800aa10:	200005a4 	.word	0x200005a4

0800aa14 <OnTxFrameCtrlChanged>:

static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
 800aa14:	b480      	push	{r7}
 800aa16:	b083      	sub	sp, #12
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	4603      	mov	r3, r0
 800aa1c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800aa1e:	4a04      	ldr	r2, [pc, #16]	@ (800aa30 <OnTxFrameCtrlChanged+0x1c>)
 800aa20:	79fb      	ldrb	r3, [r7, #7]
 800aa22:	70d3      	strb	r3, [r2, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 800aa24:	bf00      	nop
 800aa26:	370c      	adds	r7, #12
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	bc80      	pop	{r7}
 800aa2c:	4770      	bx	lr
 800aa2e:	bf00      	nop
 800aa30:	20000058 	.word	0x20000058

0800aa34 <OnPingSlotPeriodicityChanged>:

static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
 800aa34:	b480      	push	{r7}
 800aa36:	b083      	sub	sp, #12
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	4603      	mov	r3, r0
 800aa3c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800aa3e:	4a04      	ldr	r2, [pc, #16]	@ (800aa50 <OnPingSlotPeriodicityChanged+0x1c>)
 800aa40:	79fb      	ldrb	r3, [r7, #7]
 800aa42:	7313      	strb	r3, [r2, #12]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 800aa44:	bf00      	nop
 800aa46:	370c      	adds	r7, #12
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	bc80      	pop	{r7}
 800aa4c:	4770      	bx	lr
 800aa4e:	bf00      	nop
 800aa50:	20000058 	.word	0x20000058

0800aa54 <OnSystemReset>:

static void OnSystemReset(void)
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSystemReset_1 */

  /* USER CODE END OnSystemReset_1 */
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800aa58:	f002 fcef 	bl	800d43a <LmHandlerHalt>
 800aa5c:	4603      	mov	r3, r0
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d106      	bne.n	800aa70 <OnSystemReset+0x1c>
 800aa62:	f001 fffb 	bl	800ca5c <LmHandlerJoinStatus>
 800aa66:	4603      	mov	r3, r0
 800aa68:	2b01      	cmp	r3, #1
 800aa6a:	d101      	bne.n	800aa70 <OnSystemReset+0x1c>
  {
    NVIC_SystemReset();
 800aa6c:	f7ff fbd6 	bl	800a21c <__NVIC_SystemReset>
  }
  /* USER CODE BEGIN OnSystemReset_Last */

  /* USER CODE END OnSystemReset_Last */
}
 800aa70:	bf00      	nop
 800aa72:	bd80      	pop	{r7, pc}

0800aa74 <StopJoin>:

static void StopJoin(void)
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif

  /* USER CODE END StopJoin_1 */

  UTIL_TIMER_Stop(&TxTimer);
 800aa78:	4817      	ldr	r0, [pc, #92]	@ (800aad8 <StopJoin+0x64>)
 800aa7a:	f010 fca1 	bl	801b3c0 <UTIL_TIMER_Stop>

  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 800aa7e:	f002 fccf 	bl	800d420 <LmHandlerStop>
 800aa82:	4603      	mov	r3, r0
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d006      	beq.n	800aa96 <StopJoin+0x22>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 800aa88:	4b14      	ldr	r3, [pc, #80]	@ (800aadc <StopJoin+0x68>)
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	2100      	movs	r1, #0
 800aa8e:	2002      	movs	r0, #2
 800aa90:	f010 fea0 	bl	801b7d4 <UTIL_ADV_TRACE_COND_FSend>
 800aa94:	e01a      	b.n	800aacc <StopJoin+0x58>
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 800aa96:	4b12      	ldr	r3, [pc, #72]	@ (800aae0 <StopJoin+0x6c>)
 800aa98:	2200      	movs	r2, #0
 800aa9a:	2100      	movs	r1, #0
 800aa9c:	2002      	movs	r0, #2
 800aa9e:	f010 fe99 	bl	801b7d4 <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_OTAA;
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to OTAA mode\r\n");
    }
    else
    {
      ActivationType = ACTIVATION_TYPE_ABP;
 800aaa2:	4b10      	ldr	r3, [pc, #64]	@ (800aae4 <StopJoin+0x70>)
 800aaa4:	2201      	movs	r2, #1
 800aaa6:	701a      	strb	r2, [r3, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 800aaa8:	4b0f      	ldr	r3, [pc, #60]	@ (800aae8 <StopJoin+0x74>)
 800aaaa:	2200      	movs	r2, #0
 800aaac:	2100      	movs	r1, #0
 800aaae:	2002      	movs	r0, #2
 800aab0:	f010 fe90 	bl	801b7d4 <UTIL_ADV_TRACE_COND_FSend>
    }
    LmHandlerConfigure(&LmHandlerParams);
 800aab4:	480d      	ldr	r0, [pc, #52]	@ (800aaec <StopJoin+0x78>)
 800aab6:	f001 fdd3 	bl	800c660 <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 800aaba:	4b0a      	ldr	r3, [pc, #40]	@ (800aae4 <StopJoin+0x70>)
 800aabc:	781b      	ldrb	r3, [r3, #0]
 800aabe:	2101      	movs	r1, #1
 800aac0:	4618      	mov	r0, r3
 800aac2:	f001 ff49 	bl	800c958 <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 800aac6:	4804      	ldr	r0, [pc, #16]	@ (800aad8 <StopJoin+0x64>)
 800aac8:	f010 fc0c 	bl	801b2e4 <UTIL_TIMER_Start>
  }
  UTIL_TIMER_Start(&StopJoinTimer);
 800aacc:	4808      	ldr	r0, [pc, #32]	@ (800aaf0 <StopJoin+0x7c>)
 800aace:	f010 fc09 	bl	801b2e4 <UTIL_TIMER_Start>
  /* USER CODE BEGIN StopJoin_Last */

  /* USER CODE END StopJoin_Last */
}
 800aad2:	bf00      	nop
 800aad4:	bd80      	pop	{r7, pc}
 800aad6:	bf00      	nop
 800aad8:	200005a4 	.word	0x200005a4
 800aadc:	0801ec34 	.word	0x0801ec34
 800aae0:	0801ec54 	.word	0x0801ec54
 800aae4:	20000008 	.word	0x20000008
 800aae8:	0801ec68 	.word	0x0801ec68
 800aaec:	20000058 	.word	0x20000058
 800aaf0:	200005bc 	.word	0x200005bc

0800aaf4 <OnStopJoinTimerEvent>:

static void OnStopJoinTimerEvent(void *context)
{
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b082      	sub	sp, #8
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnStopJoinTimerEvent_1 */

  /* USER CODE END OnStopJoinTimerEvent_1 */
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 800aafc:	4b05      	ldr	r3, [pc, #20]	@ (800ab14 <OnStopJoinTimerEvent+0x20>)
 800aafe:	781b      	ldrb	r3, [r3, #0]
 800ab00:	2b02      	cmp	r3, #2
 800ab02:	d103      	bne.n	800ab0c <OnStopJoinTimerEvent+0x18>
  {
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 800ab04:	2100      	movs	r1, #0
 800ab06:	2008      	movs	r0, #8
 800ab08:	f010 fb36 	bl	801b178 <UTIL_SEQ_SetTask>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
  /* USER CODE END OnStopJoinTimerEvent_Last */
}
 800ab0c:	bf00      	nop
 800ab0e:	3708      	adds	r7, #8
 800ab10:	46bd      	mov	sp, r7
 800ab12:	bd80      	pop	{r7, pc}
 800ab14:	20000008 	.word	0x20000008

0800ab18 <StoreContext>:

static void StoreContext(void)
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b082      	sub	sp, #8
 800ab1c:	af00      	add	r7, sp, #0
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800ab1e:	23ff      	movs	r3, #255	@ 0xff
 800ab20:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN StoreContext_1 */

  /* USER CODE END StoreContext_1 */
  status = LmHandlerNvmDataStore();
 800ab22:	f002 fc97 	bl	800d454 <LmHandlerNvmDataStore>
 800ab26:	4603      	mov	r3, r0
 800ab28:	71fb      	strb	r3, [r7, #7]

  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 800ab2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ab2e:	f113 0f08 	cmn.w	r3, #8
 800ab32:	d106      	bne.n	800ab42 <StoreContext+0x2a>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 800ab34:	4b0a      	ldr	r3, [pc, #40]	@ (800ab60 <StoreContext+0x48>)
 800ab36:	2200      	movs	r2, #0
 800ab38:	2100      	movs	r1, #0
 800ab3a:	2002      	movs	r0, #2
 800ab3c:	f010 fe4a 	bl	801b7d4 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
  }
  /* USER CODE BEGIN StoreContext_Last */

  /* USER CODE END StoreContext_Last */
}
 800ab40:	e00a      	b.n	800ab58 <StoreContext+0x40>
  else if (status == LORAMAC_HANDLER_ERROR)
 800ab42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ab46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab4a:	d105      	bne.n	800ab58 <StoreContext+0x40>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 800ab4c:	4b05      	ldr	r3, [pc, #20]	@ (800ab64 <StoreContext+0x4c>)
 800ab4e:	2200      	movs	r2, #0
 800ab50:	2100      	movs	r1, #0
 800ab52:	2002      	movs	r0, #2
 800ab54:	f010 fe3e 	bl	801b7d4 <UTIL_ADV_TRACE_COND_FSend>
}
 800ab58:	bf00      	nop
 800ab5a:	3708      	adds	r7, #8
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	bd80      	pop	{r7, pc}
 800ab60:	0801ec88 	.word	0x0801ec88
 800ab64:	0801eca0 	.word	0x0801eca0

0800ab68 <OnNvmDataChange>:

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b082      	sub	sp, #8
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	4603      	mov	r3, r0
 800ab70:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 800ab72:	79fb      	ldrb	r3, [r7, #7]
 800ab74:	2b01      	cmp	r3, #1
 800ab76:	d106      	bne.n	800ab86 <OnNvmDataChange+0x1e>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 800ab78:	4b08      	ldr	r3, [pc, #32]	@ (800ab9c <OnNvmDataChange+0x34>)
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	2100      	movs	r1, #0
 800ab7e:	2002      	movs	r0, #2
 800ab80:	f010 fe28 	bl	801b7d4 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 800ab84:	e005      	b.n	800ab92 <OnNvmDataChange+0x2a>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 800ab86:	4b06      	ldr	r3, [pc, #24]	@ (800aba0 <OnNvmDataChange+0x38>)
 800ab88:	2200      	movs	r2, #0
 800ab8a:	2100      	movs	r1, #0
 800ab8c:	2002      	movs	r0, #2
 800ab8e:	f010 fe21 	bl	801b7d4 <UTIL_ADV_TRACE_COND_FSend>
}
 800ab92:	bf00      	nop
 800ab94:	3708      	adds	r7, #8
 800ab96:	46bd      	mov	sp, r7
 800ab98:	bd80      	pop	{r7, pc}
 800ab9a:	bf00      	nop
 800ab9c:	0801ecb8 	.word	0x0801ecb8
 800aba0:	0801eccc 	.word	0x0801eccc

0800aba4 <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b082      	sub	sp, #8
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
 800abac:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (HAL_FLASH_Unlock() == HAL_OK)
 800abae:	f7fa f8f1 	bl	8004d94 <HAL_FLASH_Unlock>
 800abb2:	4603      	mov	r3, r0
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d11c      	bne.n	800abf2 <OnStoreContextRequest+0x4e>
  {
    if (FLASH_IF_EraseByPages(PAGE(LORAWAN_NVM_BASE_ADDRESS), 1, 0U) == FLASH_OK)
 800abb8:	4b10      	ldr	r3, [pc, #64]	@ (800abfc <OnStoreContextRequest+0x58>)
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	029a      	lsls	r2, r3, #10
 800abbe:	4b10      	ldr	r3, [pc, #64]	@ (800ac00 <OnStoreContextRequest+0x5c>)
 800abc0:	4013      	ands	r3, r2
 800abc2:	f44f 327c 	mov.w	r2, #258048	@ 0x3f000
 800abc6:	fbb2 f1f3 	udiv	r1, r2, r3
 800abca:	fb01 f303 	mul.w	r3, r1, r3
 800abce:	1ad3      	subs	r3, r2, r3
 800abd0:	0adb      	lsrs	r3, r3, #11
 800abd2:	2200      	movs	r2, #0
 800abd4:	2101      	movs	r1, #1
 800abd6:	4618      	mov	r0, r3
 800abd8:	f7f6 fccd 	bl	8001576 <FLASH_IF_EraseByPages>
 800abdc:	4603      	mov	r3, r0
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d105      	bne.n	800abee <OnStoreContextRequest+0x4a>
    {
      FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (uint8_t *)nvm, nvm_size, NULL);
 800abe2:	2300      	movs	r3, #0
 800abe4:	683a      	ldr	r2, [r7, #0]
 800abe6:	6879      	ldr	r1, [r7, #4]
 800abe8:	4806      	ldr	r0, [pc, #24]	@ (800ac04 <OnStoreContextRequest+0x60>)
 800abea:	f7f6 fbe3 	bl	80013b4 <FLASH_IF_Write>
    }
    HAL_FLASH_Lock();
 800abee:	f7fa f8f3 	bl	8004dd8 <HAL_FLASH_Lock>
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 800abf2:	bf00      	nop
 800abf4:	3708      	adds	r7, #8
 800abf6:	46bd      	mov	sp, r7
 800abf8:	bd80      	pop	{r7, pc}
 800abfa:	bf00      	nop
 800abfc:	1fff75e0 	.word	0x1fff75e0
 800ac00:	03fffc00 	.word	0x03fffc00
 800ac04:	0803f000 	.word	0x0803f000

0800ac08 <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b082      	sub	sp, #8
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
 800ac10:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  UTIL_MEM_cpy_8(nvm, (void *)LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 800ac12:	683b      	ldr	r3, [r7, #0]
 800ac14:	b29b      	uxth	r3, r3
 800ac16:	461a      	mov	r2, r3
 800ac18:	4903      	ldr	r1, [pc, #12]	@ (800ac28 <OnRestoreContextRequest+0x20>)
 800ac1a:	6878      	ldr	r0, [r7, #4]
 800ac1c:	f00f fd90 	bl	801a740 <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 800ac20:	bf00      	nop
 800ac22:	3708      	adds	r7, #8
 800ac24:	46bd      	mov	sp, r7
 800ac26:	bd80      	pop	{r7, pc}
 800ac28:	0803f000 	.word	0x0803f000

0800ac2c <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	af00      	add	r7, sp, #0
  loraInfo.ActivationMode = 0;
 800ac30:	4b15      	ldr	r3, [pc, #84]	@ (800ac88 <LoraInfo_Init+0x5c>)
 800ac32:	2200      	movs	r2, #0
 800ac34:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 800ac36:	4b14      	ldr	r3, [pc, #80]	@ (800ac88 <LoraInfo_Init+0x5c>)
 800ac38:	2200      	movs	r2, #0
 800ac3a:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 800ac3c:	4b12      	ldr	r3, [pc, #72]	@ (800ac88 <LoraInfo_Init+0x5c>)
 800ac3e:	2200      	movs	r2, #0
 800ac40:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800ac42:	4b11      	ldr	r3, [pc, #68]	@ (800ac88 <LoraInfo_Init+0x5c>)
 800ac44:	2200      	movs	r2, #0
 800ac46:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN LoraInfo_Init_1 */

  /* USER CODE END LoraInfo_Init_1 */

#ifdef  REGION_AS923
  loraInfo.Region |= (1 << LORAMAC_REGION_AS923);
 800ac48:	4b0f      	ldr	r3, [pc, #60]	@ (800ac88 <LoraInfo_Init+0x5c>)
 800ac4a:	685b      	ldr	r3, [r3, #4]
 800ac4c:	f043 0301 	orr.w	r3, r3, #1
 800ac50:	4a0d      	ldr	r2, [pc, #52]	@ (800ac88 <LoraInfo_Init+0x5c>)
 800ac52:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864);
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 800ac54:	4b0c      	ldr	r3, [pc, #48]	@ (800ac88 <LoraInfo_Init+0x5c>)
 800ac56:	685b      	ldr	r3, [r3, #4]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d10d      	bne.n	800ac78 <LoraInfo_Init+0x4c>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 800ac5c:	4b0b      	ldr	r3, [pc, #44]	@ (800ac8c <LoraInfo_Init+0x60>)
 800ac5e:	2200      	movs	r2, #0
 800ac60:	2100      	movs	r1, #0
 800ac62:	2000      	movs	r0, #0
 800ac64:	f010 fdb6 	bl	801b7d4 <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 800ac68:	bf00      	nop
 800ac6a:	f010 fda1 	bl	801b7b0 <UTIL_ADV_TRACE_IsBufferEmpty>
 800ac6e:	4603      	mov	r3, r0
 800ac70:	2b01      	cmp	r3, #1
 800ac72:	d1fa      	bne.n	800ac6a <LoraInfo_Init+0x3e>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 800ac74:	bf00      	nop
 800ac76:	e7fd      	b.n	800ac74 <LoraInfo_Init+0x48>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 800ac78:	4b03      	ldr	r3, [pc, #12]	@ (800ac88 <LoraInfo_Init+0x5c>)
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	60da      	str	r2, [r3, #12]
  loraInfo.ActivationMode = 3;
 800ac7e:	4b02      	ldr	r3, [pc, #8]	@ (800ac88 <LoraInfo_Init+0x5c>)
 800ac80:	2203      	movs	r2, #3
 800ac82:	601a      	str	r2, [r3, #0]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALIZATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800ac84:	bf00      	nop
 800ac86:	bd80      	pop	{r7, pc}
 800ac88:	2000072c 	.word	0x2000072c
 800ac8c:	0801ece0 	.word	0x0801ece0

0800ac90 <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 800ac90:	b480      	push	{r7}
 800ac92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 800ac94:	4b02      	ldr	r3, [pc, #8]	@ (800aca0 <LoraInfo_GetPtr+0x10>)
}
 800ac96:	4618      	mov	r0, r3
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	bc80      	pop	{r7}
 800ac9c:	4770      	bx	lr
 800ac9e:	bf00      	nop
 800aca0:	2000072c 	.word	0x2000072c

0800aca4 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 800aca8:	f7f8 f97b 	bl	8002fa2 <BSP_RADIO_Init>
 800acac:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800acae:	4618      	mov	r0, r3
 800acb0:	bd80      	pop	{r7, pc}

0800acb2 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800acb2:	b580      	push	{r7, lr}
 800acb4:	b082      	sub	sp, #8
 800acb6:	af00      	add	r7, sp, #0
 800acb8:	4603      	mov	r3, r0
 800acba:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800acbc:	79fb      	ldrb	r3, [r7, #7]
 800acbe:	4618      	mov	r0, r3
 800acc0:	f7f8 f9a0 	bl	8003004 <BSP_RADIO_ConfigRFSwitch>
 800acc4:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800acc6:	4618      	mov	r0, r3
 800acc8:	3708      	adds	r7, #8
 800acca:	46bd      	mov	sp, r7
 800accc:	bd80      	pop	{r7, pc}

0800acce <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800acce:	b580      	push	{r7, lr}
 800acd0:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 800acd2:	f7f8 f9e5 	bl	80030a0 <BSP_RADIO_GetTxConfig>
 800acd6:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800acd8:	4618      	mov	r0, r3
 800acda:	bd80      	pop	{r7, pc}

0800acdc <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 800ace0:	f7f8 f9e5 	bl	80030ae <BSP_RADIO_IsTCXO>
 800ace4:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800ace6:	4618      	mov	r0, r3
 800ace8:	bd80      	pop	{r7, pc}

0800acea <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800acea:	b580      	push	{r7, lr}
 800acec:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 800acee:	f7f8 f9e5 	bl	80030bc <BSP_RADIO_IsDCDC>
 800acf2:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800acf4:	4618      	mov	r0, r3
 800acf6:	bd80      	pop	{r7, pc}

0800acf8 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b082      	sub	sp, #8
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	4603      	mov	r3, r0
 800ad00:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 800ad02:	79fb      	ldrb	r3, [r7, #7]
 800ad04:	4618      	mov	r0, r3
 800ad06:	f7f8 f9e0 	bl	80030ca <BSP_RADIO_GetRFOMaxPowerConfig>
 800ad0a:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	3708      	adds	r7, #8
 800ad10:	46bd      	mov	sp, r7
 800ad12:	bd80      	pop	{r7, pc}

0800ad14 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b082      	sub	sp, #8
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	33f1      	adds	r3, #241	@ 0xf1
 800ad20:	2210      	movs	r2, #16
 800ad22:	2100      	movs	r1, #0
 800ad24:	4618      	mov	r0, r3
 800ad26:	f00c fa39 	bl	801719c <memset1>
    ctx->M_n = 0;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	22f0      	movs	r2, #240	@ 0xf0
 800ad36:	2100      	movs	r1, #0
 800ad38:	4618      	mov	r0, r3
 800ad3a:	f00c fa2f 	bl	801719c <memset1>
}
 800ad3e:	bf00      	nop
 800ad40:	3708      	adds	r7, #8
 800ad42:	46bd      	mov	sp, r7
 800ad44:	bd80      	pop	{r7, pc}

0800ad46 <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800ad46:	b580      	push	{r7, lr}
 800ad48:	b082      	sub	sp, #8
 800ad4a:	af00      	add	r7, sp, #0
 800ad4c:	6078      	str	r0, [r7, #4]
 800ad4e:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	461a      	mov	r2, r3
 800ad54:	2110      	movs	r1, #16
 800ad56:	6838      	ldr	r0, [r7, #0]
 800ad58:	f000 fe60 	bl	800ba1c <lorawan_aes_set_key>
}
 800ad5c:	bf00      	nop
 800ad5e:	3708      	adds	r7, #8
 800ad60:	46bd      	mov	sp, r7
 800ad62:	bd80      	pop	{r7, pc}

0800ad64 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b08c      	sub	sp, #48	@ 0x30
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	60f8      	str	r0, [r7, #12]
 800ad6c:	60b9      	str	r1, [r7, #8]
 800ad6e:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	f000 80a1 	beq.w	800aebe <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800ad82:	f1c3 0310 	rsb	r3, r3, #16
 800ad86:	687a      	ldr	r2, [r7, #4]
 800ad88:	4293      	cmp	r3, r2
 800ad8a:	bf28      	it	cs
 800ad8c:	4613      	movcs	r3, r2
 800ad8e:	627b      	str	r3, [r7, #36]	@ 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	f203 1201 	addw	r2, r3, #257	@ 0x101
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800ad9c:	4413      	add	r3, r2
 800ad9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ada0:	b292      	uxth	r2, r2
 800ada2:	68b9      	ldr	r1, [r7, #8]
 800ada4:	4618      	mov	r0, r3
 800ada6:	f00c f9be 	bl	8017126 <memcpy1>
        ctx->M_n += mlen;
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	f8d3 2114 	ldr.w	r2, [r3, #276]	@ 0x114
 800adb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adb2:	441a      	add	r2, r3
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
        if( ctx->M_n < 16 || len == mlen )
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800adc0:	2b0f      	cmp	r3, #15
 800adc2:	f240 808d 	bls.w	800aee0 <AES_CMAC_Update+0x17c>
 800adc6:	687a      	ldr	r2, [r7, #4]
 800adc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adca:	429a      	cmp	r2, r3
 800adcc:	f000 8088 	beq.w	800aee0 <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 800add0:	2300      	movs	r3, #0
 800add2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800add4:	e015      	b.n	800ae02 <AES_CMAC_Update+0x9e>
 800add6:	68fa      	ldr	r2, [r7, #12]
 800add8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adda:	4413      	add	r3, r2
 800addc:	33f1      	adds	r3, #241	@ 0xf1
 800adde:	781a      	ldrb	r2, [r3, #0]
 800ade0:	68f9      	ldr	r1, [r7, #12]
 800ade2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ade4:	440b      	add	r3, r1
 800ade6:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800adea:	781b      	ldrb	r3, [r3, #0]
 800adec:	4053      	eors	r3, r2
 800adee:	b2d9      	uxtb	r1, r3
 800adf0:	68fa      	ldr	r2, [r7, #12]
 800adf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adf4:	4413      	add	r3, r2
 800adf6:	33f1      	adds	r3, #241	@ 0xf1
 800adf8:	460a      	mov	r2, r1
 800adfa:	701a      	strb	r2, [r3, #0]
 800adfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adfe:	3301      	adds	r3, #1
 800ae00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ae02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae04:	2b0f      	cmp	r3, #15
 800ae06:	dde6      	ble.n	800add6 <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 800ae0e:	f107 0314 	add.w	r3, r7, #20
 800ae12:	2210      	movs	r2, #16
 800ae14:	4618      	mov	r0, r3
 800ae16:	f00c f986 	bl	8017126 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800ae1a:	68fa      	ldr	r2, [r7, #12]
 800ae1c:	f107 0114 	add.w	r1, r7, #20
 800ae20:	f107 0314 	add.w	r3, r7, #20
 800ae24:	4618      	mov	r0, r3
 800ae26:	f000 fed7 	bl	800bbd8 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	33f1      	adds	r3, #241	@ 0xf1
 800ae2e:	f107 0114 	add.w	r1, r7, #20
 800ae32:	2210      	movs	r2, #16
 800ae34:	4618      	mov	r0, r3
 800ae36:	f00c f976 	bl	8017126 <memcpy1>

        data += mlen;
 800ae3a:	68ba      	ldr	r2, [r7, #8]
 800ae3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae3e:	4413      	add	r3, r2
 800ae40:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800ae42:	687a      	ldr	r2, [r7, #4]
 800ae44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae46:	1ad3      	subs	r3, r2, r3
 800ae48:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800ae4a:	e038      	b.n	800aebe <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ae50:	e013      	b.n	800ae7a <AES_CMAC_Update+0x116>
 800ae52:	68fa      	ldr	r2, [r7, #12]
 800ae54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae56:	4413      	add	r3, r2
 800ae58:	33f1      	adds	r3, #241	@ 0xf1
 800ae5a:	781a      	ldrb	r2, [r3, #0]
 800ae5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae5e:	68b9      	ldr	r1, [r7, #8]
 800ae60:	440b      	add	r3, r1
 800ae62:	781b      	ldrb	r3, [r3, #0]
 800ae64:	4053      	eors	r3, r2
 800ae66:	b2d9      	uxtb	r1, r3
 800ae68:	68fa      	ldr	r2, [r7, #12]
 800ae6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae6c:	4413      	add	r3, r2
 800ae6e:	33f1      	adds	r3, #241	@ 0xf1
 800ae70:	460a      	mov	r2, r1
 800ae72:	701a      	strb	r2, [r3, #0]
 800ae74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae76:	3301      	adds	r3, #1
 800ae78:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ae7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae7c:	2b0f      	cmp	r3, #15
 800ae7e:	dde8      	ble.n	800ae52 <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 800ae86:	f107 0314 	add.w	r3, r7, #20
 800ae8a:	2210      	movs	r2, #16
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	f00c f94a 	bl	8017126 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800ae92:	68fa      	ldr	r2, [r7, #12]
 800ae94:	f107 0114 	add.w	r1, r7, #20
 800ae98:	f107 0314 	add.w	r3, r7, #20
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	f000 fe9b 	bl	800bbd8 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	33f1      	adds	r3, #241	@ 0xf1
 800aea6:	f107 0114 	add.w	r1, r7, #20
 800aeaa:	2210      	movs	r2, #16
 800aeac:	4618      	mov	r0, r3
 800aeae:	f00c f93a 	bl	8017126 <memcpy1>

        data += 16;
 800aeb2:	68bb      	ldr	r3, [r7, #8]
 800aeb4:	3310      	adds	r3, #16
 800aeb6:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	3b10      	subs	r3, #16
 800aebc:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	2b10      	cmp	r3, #16
 800aec2:	d8c3      	bhi.n	800ae4c <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800aeca:	687a      	ldr	r2, [r7, #4]
 800aecc:	b292      	uxth	r2, r2
 800aece:	68b9      	ldr	r1, [r7, #8]
 800aed0:	4618      	mov	r0, r3
 800aed2:	f00c f928 	bl	8017126 <memcpy1>
    ctx->M_n = len;
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	687a      	ldr	r2, [r7, #4]
 800aeda:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
 800aede:	e000      	b.n	800aee2 <AES_CMAC_Update+0x17e>
            return;
 800aee0:	bf00      	nop
}
 800aee2:	3730      	adds	r7, #48	@ 0x30
 800aee4:	46bd      	mov	sp, r7
 800aee6:	bd80      	pop	{r7, pc}

0800aee8 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b092      	sub	sp, #72	@ 0x48
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
 800aef0:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800aef2:	f107 031c 	add.w	r3, r7, #28
 800aef6:	2210      	movs	r2, #16
 800aef8:	2100      	movs	r1, #0
 800aefa:	4618      	mov	r0, r3
 800aefc:	f00c f94e 	bl	801719c <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800af00:	683a      	ldr	r2, [r7, #0]
 800af02:	f107 011c 	add.w	r1, r7, #28
 800af06:	f107 031c 	add.w	r3, r7, #28
 800af0a:	4618      	mov	r0, r3
 800af0c:	f000 fe64 	bl	800bbd8 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800af10:	7f3b      	ldrb	r3, [r7, #28]
 800af12:	b25b      	sxtb	r3, r3
 800af14:	2b00      	cmp	r3, #0
 800af16:	da31      	bge.n	800af7c <AES_CMAC_Final+0x94>
    {
        LSHIFT( K, K );
 800af18:	2300      	movs	r3, #0
 800af1a:	647b      	str	r3, [r7, #68]	@ 0x44
 800af1c:	e01c      	b.n	800af58 <AES_CMAC_Final+0x70>
 800af1e:	f107 021c 	add.w	r2, r7, #28
 800af22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800af24:	4413      	add	r3, r2
 800af26:	781b      	ldrb	r3, [r3, #0]
 800af28:	b25b      	sxtb	r3, r3
 800af2a:	005b      	lsls	r3, r3, #1
 800af2c:	b25a      	sxtb	r2, r3
 800af2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800af30:	3301      	adds	r3, #1
 800af32:	3348      	adds	r3, #72	@ 0x48
 800af34:	443b      	add	r3, r7
 800af36:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800af3a:	09db      	lsrs	r3, r3, #7
 800af3c:	b2db      	uxtb	r3, r3
 800af3e:	b25b      	sxtb	r3, r3
 800af40:	4313      	orrs	r3, r2
 800af42:	b25b      	sxtb	r3, r3
 800af44:	b2d9      	uxtb	r1, r3
 800af46:	f107 021c 	add.w	r2, r7, #28
 800af4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800af4c:	4413      	add	r3, r2
 800af4e:	460a      	mov	r2, r1
 800af50:	701a      	strb	r2, [r3, #0]
 800af52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800af54:	3301      	adds	r3, #1
 800af56:	647b      	str	r3, [r7, #68]	@ 0x44
 800af58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800af5a:	2b0e      	cmp	r3, #14
 800af5c:	dddf      	ble.n	800af1e <AES_CMAC_Final+0x36>
 800af5e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800af62:	005b      	lsls	r3, r3, #1
 800af64:	b2db      	uxtb	r3, r3
 800af66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        K[15] ^= 0x87;
 800af6a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800af6e:	f083 0378 	eor.w	r3, r3, #120	@ 0x78
 800af72:	43db      	mvns	r3, r3
 800af74:	b2db      	uxtb	r3, r3
 800af76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af7a:	e028      	b.n	800afce <AES_CMAC_Final+0xe6>
    }
    else
        LSHIFT( K, K );
 800af7c:	2300      	movs	r3, #0
 800af7e:	643b      	str	r3, [r7, #64]	@ 0x40
 800af80:	e01c      	b.n	800afbc <AES_CMAC_Final+0xd4>
 800af82:	f107 021c 	add.w	r2, r7, #28
 800af86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af88:	4413      	add	r3, r2
 800af8a:	781b      	ldrb	r3, [r3, #0]
 800af8c:	b25b      	sxtb	r3, r3
 800af8e:	005b      	lsls	r3, r3, #1
 800af90:	b25a      	sxtb	r2, r3
 800af92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af94:	3301      	adds	r3, #1
 800af96:	3348      	adds	r3, #72	@ 0x48
 800af98:	443b      	add	r3, r7
 800af9a:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800af9e:	09db      	lsrs	r3, r3, #7
 800afa0:	b2db      	uxtb	r3, r3
 800afa2:	b25b      	sxtb	r3, r3
 800afa4:	4313      	orrs	r3, r2
 800afa6:	b25b      	sxtb	r3, r3
 800afa8:	b2d9      	uxtb	r1, r3
 800afaa:	f107 021c 	add.w	r2, r7, #28
 800afae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800afb0:	4413      	add	r3, r2
 800afb2:	460a      	mov	r2, r1
 800afb4:	701a      	strb	r2, [r3, #0]
 800afb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800afb8:	3301      	adds	r3, #1
 800afba:	643b      	str	r3, [r7, #64]	@ 0x40
 800afbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800afbe:	2b0e      	cmp	r3, #14
 800afc0:	dddf      	ble.n	800af82 <AES_CMAC_Final+0x9a>
 800afc2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800afc6:	005b      	lsls	r3, r3, #1
 800afc8:	b2db      	uxtb	r3, r3
 800afca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

    if( ctx->M_n == 16 )
 800afce:	683b      	ldr	r3, [r7, #0]
 800afd0:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800afd4:	2b10      	cmp	r3, #16
 800afd6:	d11d      	bne.n	800b014 <AES_CMAC_Final+0x12c>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800afd8:	2300      	movs	r3, #0
 800afda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800afdc:	e016      	b.n	800b00c <AES_CMAC_Final+0x124>
 800afde:	683a      	ldr	r2, [r7, #0]
 800afe0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800afe2:	4413      	add	r3, r2
 800afe4:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800afe8:	781a      	ldrb	r2, [r3, #0]
 800afea:	f107 011c 	add.w	r1, r7, #28
 800afee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aff0:	440b      	add	r3, r1
 800aff2:	781b      	ldrb	r3, [r3, #0]
 800aff4:	4053      	eors	r3, r2
 800aff6:	b2d9      	uxtb	r1, r3
 800aff8:	683a      	ldr	r2, [r7, #0]
 800affa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800affc:	4413      	add	r3, r2
 800affe:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800b002:	460a      	mov	r2, r1
 800b004:	701a      	strb	r2, [r3, #0]
 800b006:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b008:	3301      	adds	r3, #1
 800b00a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b00c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b00e:	2b0f      	cmp	r3, #15
 800b010:	dde5      	ble.n	800afde <AES_CMAC_Final+0xf6>
 800b012:	e098      	b.n	800b146 <AES_CMAC_Final+0x25e>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800b014:	7f3b      	ldrb	r3, [r7, #28]
 800b016:	b25b      	sxtb	r3, r3
 800b018:	2b00      	cmp	r3, #0
 800b01a:	da31      	bge.n	800b080 <AES_CMAC_Final+0x198>
        {
            LSHIFT( K, K );
 800b01c:	2300      	movs	r3, #0
 800b01e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b020:	e01c      	b.n	800b05c <AES_CMAC_Final+0x174>
 800b022:	f107 021c 	add.w	r2, r7, #28
 800b026:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b028:	4413      	add	r3, r2
 800b02a:	781b      	ldrb	r3, [r3, #0]
 800b02c:	b25b      	sxtb	r3, r3
 800b02e:	005b      	lsls	r3, r3, #1
 800b030:	b25a      	sxtb	r2, r3
 800b032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b034:	3301      	adds	r3, #1
 800b036:	3348      	adds	r3, #72	@ 0x48
 800b038:	443b      	add	r3, r7
 800b03a:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800b03e:	09db      	lsrs	r3, r3, #7
 800b040:	b2db      	uxtb	r3, r3
 800b042:	b25b      	sxtb	r3, r3
 800b044:	4313      	orrs	r3, r2
 800b046:	b25b      	sxtb	r3, r3
 800b048:	b2d9      	uxtb	r1, r3
 800b04a:	f107 021c 	add.w	r2, r7, #28
 800b04e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b050:	4413      	add	r3, r2
 800b052:	460a      	mov	r2, r1
 800b054:	701a      	strb	r2, [r3, #0]
 800b056:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b058:	3301      	adds	r3, #1
 800b05a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b05c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b05e:	2b0e      	cmp	r3, #14
 800b060:	dddf      	ble.n	800b022 <AES_CMAC_Final+0x13a>
 800b062:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b066:	005b      	lsls	r3, r3, #1
 800b068:	b2db      	uxtb	r3, r3
 800b06a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
            K[15] ^= 0x87;
 800b06e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b072:	f083 0378 	eor.w	r3, r3, #120	@ 0x78
 800b076:	43db      	mvns	r3, r3
 800b078:	b2db      	uxtb	r3, r3
 800b07a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b07e:	e028      	b.n	800b0d2 <AES_CMAC_Final+0x1ea>
        }
        else
            LSHIFT( K, K );
 800b080:	2300      	movs	r3, #0
 800b082:	637b      	str	r3, [r7, #52]	@ 0x34
 800b084:	e01c      	b.n	800b0c0 <AES_CMAC_Final+0x1d8>
 800b086:	f107 021c 	add.w	r2, r7, #28
 800b08a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b08c:	4413      	add	r3, r2
 800b08e:	781b      	ldrb	r3, [r3, #0]
 800b090:	b25b      	sxtb	r3, r3
 800b092:	005b      	lsls	r3, r3, #1
 800b094:	b25a      	sxtb	r2, r3
 800b096:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b098:	3301      	adds	r3, #1
 800b09a:	3348      	adds	r3, #72	@ 0x48
 800b09c:	443b      	add	r3, r7
 800b09e:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800b0a2:	09db      	lsrs	r3, r3, #7
 800b0a4:	b2db      	uxtb	r3, r3
 800b0a6:	b25b      	sxtb	r3, r3
 800b0a8:	4313      	orrs	r3, r2
 800b0aa:	b25b      	sxtb	r3, r3
 800b0ac:	b2d9      	uxtb	r1, r3
 800b0ae:	f107 021c 	add.w	r2, r7, #28
 800b0b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0b4:	4413      	add	r3, r2
 800b0b6:	460a      	mov	r2, r1
 800b0b8:	701a      	strb	r2, [r3, #0]
 800b0ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0bc:	3301      	adds	r3, #1
 800b0be:	637b      	str	r3, [r7, #52]	@ 0x34
 800b0c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0c2:	2b0e      	cmp	r3, #14
 800b0c4:	dddf      	ble.n	800b086 <AES_CMAC_Final+0x19e>
 800b0c6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b0ca:	005b      	lsls	r3, r3, #1
 800b0cc:	b2db      	uxtb	r3, r3
 800b0ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800b0d2:	683b      	ldr	r3, [r7, #0]
 800b0d4:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800b0d8:	683a      	ldr	r2, [r7, #0]
 800b0da:	4413      	add	r3, r2
 800b0dc:	2280      	movs	r2, #128	@ 0x80
 800b0de:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        while( ++ctx->M_n < 16 )
 800b0e2:	e007      	b.n	800b0f4 <AES_CMAC_Final+0x20c>
            ctx->M_last[ctx->M_n] = 0;
 800b0e4:	683b      	ldr	r3, [r7, #0]
 800b0e6:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800b0ea:	683a      	ldr	r2, [r7, #0]
 800b0ec:	4413      	add	r3, r2
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        while( ++ctx->M_n < 16 )
 800b0f4:	683b      	ldr	r3, [r7, #0]
 800b0f6:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800b0fa:	1c5a      	adds	r2, r3, #1
 800b0fc:	683b      	ldr	r3, [r7, #0]
 800b0fe:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
 800b102:	683b      	ldr	r3, [r7, #0]
 800b104:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800b108:	2b0f      	cmp	r3, #15
 800b10a:	d9eb      	bls.n	800b0e4 <AES_CMAC_Final+0x1fc>

        XOR( K, ctx->M_last );
 800b10c:	2300      	movs	r3, #0
 800b10e:	633b      	str	r3, [r7, #48]	@ 0x30
 800b110:	e016      	b.n	800b140 <AES_CMAC_Final+0x258>
 800b112:	683a      	ldr	r2, [r7, #0]
 800b114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b116:	4413      	add	r3, r2
 800b118:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800b11c:	781a      	ldrb	r2, [r3, #0]
 800b11e:	f107 011c 	add.w	r1, r7, #28
 800b122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b124:	440b      	add	r3, r1
 800b126:	781b      	ldrb	r3, [r3, #0]
 800b128:	4053      	eors	r3, r2
 800b12a:	b2d9      	uxtb	r1, r3
 800b12c:	683a      	ldr	r2, [r7, #0]
 800b12e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b130:	4413      	add	r3, r2
 800b132:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800b136:	460a      	mov	r2, r1
 800b138:	701a      	strb	r2, [r3, #0]
 800b13a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b13c:	3301      	adds	r3, #1
 800b13e:	633b      	str	r3, [r7, #48]	@ 0x30
 800b140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b142:	2b0f      	cmp	r3, #15
 800b144:	dde5      	ble.n	800b112 <AES_CMAC_Final+0x22a>
    }
    XOR( ctx->M_last, ctx->X );
 800b146:	2300      	movs	r3, #0
 800b148:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b14a:	e015      	b.n	800b178 <AES_CMAC_Final+0x290>
 800b14c:	683a      	ldr	r2, [r7, #0]
 800b14e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b150:	4413      	add	r3, r2
 800b152:	33f1      	adds	r3, #241	@ 0xf1
 800b154:	781a      	ldrb	r2, [r3, #0]
 800b156:	6839      	ldr	r1, [r7, #0]
 800b158:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b15a:	440b      	add	r3, r1
 800b15c:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800b160:	781b      	ldrb	r3, [r3, #0]
 800b162:	4053      	eors	r3, r2
 800b164:	b2d9      	uxtb	r1, r3
 800b166:	683a      	ldr	r2, [r7, #0]
 800b168:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b16a:	4413      	add	r3, r2
 800b16c:	33f1      	adds	r3, #241	@ 0xf1
 800b16e:	460a      	mov	r2, r1
 800b170:	701a      	strb	r2, [r3, #0]
 800b172:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b174:	3301      	adds	r3, #1
 800b176:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b178:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b17a:	2b0f      	cmp	r3, #15
 800b17c:	dde6      	ble.n	800b14c <AES_CMAC_Final+0x264>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800b17e:	683b      	ldr	r3, [r7, #0]
 800b180:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 800b184:	f107 030c 	add.w	r3, r7, #12
 800b188:	2210      	movs	r2, #16
 800b18a:	4618      	mov	r0, r3
 800b18c:	f00b ffcb 	bl	8017126 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800b190:	683a      	ldr	r2, [r7, #0]
 800b192:	f107 030c 	add.w	r3, r7, #12
 800b196:	6879      	ldr	r1, [r7, #4]
 800b198:	4618      	mov	r0, r3
 800b19a:	f000 fd1d 	bl	800bbd8 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800b19e:	f107 031c 	add.w	r3, r7, #28
 800b1a2:	2210      	movs	r2, #16
 800b1a4:	2100      	movs	r1, #0
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	f00b fff8 	bl	801719c <memset1>
}
 800b1ac:	bf00      	nop
 800b1ae:	3748      	adds	r7, #72	@ 0x48
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	bd80      	pop	{r7, pc}

0800b1b4 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800b1b4:	b480      	push	{r7}
 800b1b6:	b083      	sub	sp, #12
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
 800b1bc:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800b1be:	683b      	ldr	r3, [r7, #0]
 800b1c0:	781a      	ldrb	r2, [r3, #0]
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	3301      	adds	r3, #1
 800b1ca:	683a      	ldr	r2, [r7, #0]
 800b1cc:	7852      	ldrb	r2, [r2, #1]
 800b1ce:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	3302      	adds	r3, #2
 800b1d4:	683a      	ldr	r2, [r7, #0]
 800b1d6:	7892      	ldrb	r2, [r2, #2]
 800b1d8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	3303      	adds	r3, #3
 800b1de:	683a      	ldr	r2, [r7, #0]
 800b1e0:	78d2      	ldrb	r2, [r2, #3]
 800b1e2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	3304      	adds	r3, #4
 800b1e8:	683a      	ldr	r2, [r7, #0]
 800b1ea:	7912      	ldrb	r2, [r2, #4]
 800b1ec:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	3305      	adds	r3, #5
 800b1f2:	683a      	ldr	r2, [r7, #0]
 800b1f4:	7952      	ldrb	r2, [r2, #5]
 800b1f6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	3306      	adds	r3, #6
 800b1fc:	683a      	ldr	r2, [r7, #0]
 800b1fe:	7992      	ldrb	r2, [r2, #6]
 800b200:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	3307      	adds	r3, #7
 800b206:	683a      	ldr	r2, [r7, #0]
 800b208:	79d2      	ldrb	r2, [r2, #7]
 800b20a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	3308      	adds	r3, #8
 800b210:	683a      	ldr	r2, [r7, #0]
 800b212:	7a12      	ldrb	r2, [r2, #8]
 800b214:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	3309      	adds	r3, #9
 800b21a:	683a      	ldr	r2, [r7, #0]
 800b21c:	7a52      	ldrb	r2, [r2, #9]
 800b21e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	330a      	adds	r3, #10
 800b224:	683a      	ldr	r2, [r7, #0]
 800b226:	7a92      	ldrb	r2, [r2, #10]
 800b228:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	330b      	adds	r3, #11
 800b22e:	683a      	ldr	r2, [r7, #0]
 800b230:	7ad2      	ldrb	r2, [r2, #11]
 800b232:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	330c      	adds	r3, #12
 800b238:	683a      	ldr	r2, [r7, #0]
 800b23a:	7b12      	ldrb	r2, [r2, #12]
 800b23c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	330d      	adds	r3, #13
 800b242:	683a      	ldr	r2, [r7, #0]
 800b244:	7b52      	ldrb	r2, [r2, #13]
 800b246:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	330e      	adds	r3, #14
 800b24c:	683a      	ldr	r2, [r7, #0]
 800b24e:	7b92      	ldrb	r2, [r2, #14]
 800b250:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	330f      	adds	r3, #15
 800b256:	683a      	ldr	r2, [r7, #0]
 800b258:	7bd2      	ldrb	r2, [r2, #15]
 800b25a:	701a      	strb	r2, [r3, #0]
#endif
}
 800b25c:	bf00      	nop
 800b25e:	370c      	adds	r7, #12
 800b260:	46bd      	mov	sp, r7
 800b262:	bc80      	pop	{r7}
 800b264:	4770      	bx	lr

0800b266 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800b266:	b480      	push	{r7}
 800b268:	b085      	sub	sp, #20
 800b26a:	af00      	add	r7, sp, #0
 800b26c:	60f8      	str	r0, [r7, #12]
 800b26e:	60b9      	str	r1, [r7, #8]
 800b270:	4613      	mov	r3, r2
 800b272:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800b274:	e007      	b.n	800b286 <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800b276:	68ba      	ldr	r2, [r7, #8]
 800b278:	1c53      	adds	r3, r2, #1
 800b27a:	60bb      	str	r3, [r7, #8]
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	1c59      	adds	r1, r3, #1
 800b280:	60f9      	str	r1, [r7, #12]
 800b282:	7812      	ldrb	r2, [r2, #0]
 800b284:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800b286:	79fb      	ldrb	r3, [r7, #7]
 800b288:	1e5a      	subs	r2, r3, #1
 800b28a:	71fa      	strb	r2, [r7, #7]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d1f2      	bne.n	800b276 <copy_block_nn+0x10>
}
 800b290:	bf00      	nop
 800b292:	bf00      	nop
 800b294:	3714      	adds	r7, #20
 800b296:	46bd      	mov	sp, r7
 800b298:	bc80      	pop	{r7}
 800b29a:	4770      	bx	lr

0800b29c <xor_block>:

static void xor_block( void *d, const void *s )
{
 800b29c:	b480      	push	{r7}
 800b29e:	b083      	sub	sp, #12
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
 800b2a4:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	781a      	ldrb	r2, [r3, #0]
 800b2aa:	683b      	ldr	r3, [r7, #0]
 800b2ac:	781b      	ldrb	r3, [r3, #0]
 800b2ae:	4053      	eors	r3, r2
 800b2b0:	b2da      	uxtb	r2, r3
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	3301      	adds	r3, #1
 800b2ba:	7819      	ldrb	r1, [r3, #0]
 800b2bc:	683b      	ldr	r3, [r7, #0]
 800b2be:	3301      	adds	r3, #1
 800b2c0:	781a      	ldrb	r2, [r3, #0]
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	3301      	adds	r3, #1
 800b2c6:	404a      	eors	r2, r1
 800b2c8:	b2d2      	uxtb	r2, r2
 800b2ca:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	3302      	adds	r3, #2
 800b2d0:	7819      	ldrb	r1, [r3, #0]
 800b2d2:	683b      	ldr	r3, [r7, #0]
 800b2d4:	3302      	adds	r3, #2
 800b2d6:	781a      	ldrb	r2, [r3, #0]
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	3302      	adds	r3, #2
 800b2dc:	404a      	eors	r2, r1
 800b2de:	b2d2      	uxtb	r2, r2
 800b2e0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	3303      	adds	r3, #3
 800b2e6:	7819      	ldrb	r1, [r3, #0]
 800b2e8:	683b      	ldr	r3, [r7, #0]
 800b2ea:	3303      	adds	r3, #3
 800b2ec:	781a      	ldrb	r2, [r3, #0]
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	3303      	adds	r3, #3
 800b2f2:	404a      	eors	r2, r1
 800b2f4:	b2d2      	uxtb	r2, r2
 800b2f6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	3304      	adds	r3, #4
 800b2fc:	7819      	ldrb	r1, [r3, #0]
 800b2fe:	683b      	ldr	r3, [r7, #0]
 800b300:	3304      	adds	r3, #4
 800b302:	781a      	ldrb	r2, [r3, #0]
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	3304      	adds	r3, #4
 800b308:	404a      	eors	r2, r1
 800b30a:	b2d2      	uxtb	r2, r2
 800b30c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	3305      	adds	r3, #5
 800b312:	7819      	ldrb	r1, [r3, #0]
 800b314:	683b      	ldr	r3, [r7, #0]
 800b316:	3305      	adds	r3, #5
 800b318:	781a      	ldrb	r2, [r3, #0]
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	3305      	adds	r3, #5
 800b31e:	404a      	eors	r2, r1
 800b320:	b2d2      	uxtb	r2, r2
 800b322:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	3306      	adds	r3, #6
 800b328:	7819      	ldrb	r1, [r3, #0]
 800b32a:	683b      	ldr	r3, [r7, #0]
 800b32c:	3306      	adds	r3, #6
 800b32e:	781a      	ldrb	r2, [r3, #0]
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	3306      	adds	r3, #6
 800b334:	404a      	eors	r2, r1
 800b336:	b2d2      	uxtb	r2, r2
 800b338:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	3307      	adds	r3, #7
 800b33e:	7819      	ldrb	r1, [r3, #0]
 800b340:	683b      	ldr	r3, [r7, #0]
 800b342:	3307      	adds	r3, #7
 800b344:	781a      	ldrb	r2, [r3, #0]
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	3307      	adds	r3, #7
 800b34a:	404a      	eors	r2, r1
 800b34c:	b2d2      	uxtb	r2, r2
 800b34e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	3308      	adds	r3, #8
 800b354:	7819      	ldrb	r1, [r3, #0]
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	3308      	adds	r3, #8
 800b35a:	781a      	ldrb	r2, [r3, #0]
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	3308      	adds	r3, #8
 800b360:	404a      	eors	r2, r1
 800b362:	b2d2      	uxtb	r2, r2
 800b364:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	3309      	adds	r3, #9
 800b36a:	7819      	ldrb	r1, [r3, #0]
 800b36c:	683b      	ldr	r3, [r7, #0]
 800b36e:	3309      	adds	r3, #9
 800b370:	781a      	ldrb	r2, [r3, #0]
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	3309      	adds	r3, #9
 800b376:	404a      	eors	r2, r1
 800b378:	b2d2      	uxtb	r2, r2
 800b37a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	330a      	adds	r3, #10
 800b380:	7819      	ldrb	r1, [r3, #0]
 800b382:	683b      	ldr	r3, [r7, #0]
 800b384:	330a      	adds	r3, #10
 800b386:	781a      	ldrb	r2, [r3, #0]
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	330a      	adds	r3, #10
 800b38c:	404a      	eors	r2, r1
 800b38e:	b2d2      	uxtb	r2, r2
 800b390:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	330b      	adds	r3, #11
 800b396:	7819      	ldrb	r1, [r3, #0]
 800b398:	683b      	ldr	r3, [r7, #0]
 800b39a:	330b      	adds	r3, #11
 800b39c:	781a      	ldrb	r2, [r3, #0]
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	330b      	adds	r3, #11
 800b3a2:	404a      	eors	r2, r1
 800b3a4:	b2d2      	uxtb	r2, r2
 800b3a6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	330c      	adds	r3, #12
 800b3ac:	7819      	ldrb	r1, [r3, #0]
 800b3ae:	683b      	ldr	r3, [r7, #0]
 800b3b0:	330c      	adds	r3, #12
 800b3b2:	781a      	ldrb	r2, [r3, #0]
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	330c      	adds	r3, #12
 800b3b8:	404a      	eors	r2, r1
 800b3ba:	b2d2      	uxtb	r2, r2
 800b3bc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	330d      	adds	r3, #13
 800b3c2:	7819      	ldrb	r1, [r3, #0]
 800b3c4:	683b      	ldr	r3, [r7, #0]
 800b3c6:	330d      	adds	r3, #13
 800b3c8:	781a      	ldrb	r2, [r3, #0]
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	330d      	adds	r3, #13
 800b3ce:	404a      	eors	r2, r1
 800b3d0:	b2d2      	uxtb	r2, r2
 800b3d2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	330e      	adds	r3, #14
 800b3d8:	7819      	ldrb	r1, [r3, #0]
 800b3da:	683b      	ldr	r3, [r7, #0]
 800b3dc:	330e      	adds	r3, #14
 800b3de:	781a      	ldrb	r2, [r3, #0]
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	330e      	adds	r3, #14
 800b3e4:	404a      	eors	r2, r1
 800b3e6:	b2d2      	uxtb	r2, r2
 800b3e8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	330f      	adds	r3, #15
 800b3ee:	7819      	ldrb	r1, [r3, #0]
 800b3f0:	683b      	ldr	r3, [r7, #0]
 800b3f2:	330f      	adds	r3, #15
 800b3f4:	781a      	ldrb	r2, [r3, #0]
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	330f      	adds	r3, #15
 800b3fa:	404a      	eors	r2, r1
 800b3fc:	b2d2      	uxtb	r2, r2
 800b3fe:	701a      	strb	r2, [r3, #0]
#endif
}
 800b400:	bf00      	nop
 800b402:	370c      	adds	r7, #12
 800b404:	46bd      	mov	sp, r7
 800b406:	bc80      	pop	{r7}
 800b408:	4770      	bx	lr

0800b40a <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800b40a:	b480      	push	{r7}
 800b40c:	b085      	sub	sp, #20
 800b40e:	af00      	add	r7, sp, #0
 800b410:	60f8      	str	r0, [r7, #12]
 800b412:	60b9      	str	r1, [r7, #8]
 800b414:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800b416:	68bb      	ldr	r3, [r7, #8]
 800b418:	781a      	ldrb	r2, [r3, #0]
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	781b      	ldrb	r3, [r3, #0]
 800b41e:	4053      	eors	r3, r2
 800b420:	b2da      	uxtb	r2, r3
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800b426:	68bb      	ldr	r3, [r7, #8]
 800b428:	3301      	adds	r3, #1
 800b42a:	7819      	ldrb	r1, [r3, #0]
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	3301      	adds	r3, #1
 800b430:	781a      	ldrb	r2, [r3, #0]
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	3301      	adds	r3, #1
 800b436:	404a      	eors	r2, r1
 800b438:	b2d2      	uxtb	r2, r2
 800b43a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800b43c:	68bb      	ldr	r3, [r7, #8]
 800b43e:	3302      	adds	r3, #2
 800b440:	7819      	ldrb	r1, [r3, #0]
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	3302      	adds	r3, #2
 800b446:	781a      	ldrb	r2, [r3, #0]
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	3302      	adds	r3, #2
 800b44c:	404a      	eors	r2, r1
 800b44e:	b2d2      	uxtb	r2, r2
 800b450:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800b452:	68bb      	ldr	r3, [r7, #8]
 800b454:	3303      	adds	r3, #3
 800b456:	7819      	ldrb	r1, [r3, #0]
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	3303      	adds	r3, #3
 800b45c:	781a      	ldrb	r2, [r3, #0]
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	3303      	adds	r3, #3
 800b462:	404a      	eors	r2, r1
 800b464:	b2d2      	uxtb	r2, r2
 800b466:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800b468:	68bb      	ldr	r3, [r7, #8]
 800b46a:	3304      	adds	r3, #4
 800b46c:	7819      	ldrb	r1, [r3, #0]
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	3304      	adds	r3, #4
 800b472:	781a      	ldrb	r2, [r3, #0]
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	3304      	adds	r3, #4
 800b478:	404a      	eors	r2, r1
 800b47a:	b2d2      	uxtb	r2, r2
 800b47c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800b47e:	68bb      	ldr	r3, [r7, #8]
 800b480:	3305      	adds	r3, #5
 800b482:	7819      	ldrb	r1, [r3, #0]
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	3305      	adds	r3, #5
 800b488:	781a      	ldrb	r2, [r3, #0]
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	3305      	adds	r3, #5
 800b48e:	404a      	eors	r2, r1
 800b490:	b2d2      	uxtb	r2, r2
 800b492:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800b494:	68bb      	ldr	r3, [r7, #8]
 800b496:	3306      	adds	r3, #6
 800b498:	7819      	ldrb	r1, [r3, #0]
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	3306      	adds	r3, #6
 800b49e:	781a      	ldrb	r2, [r3, #0]
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	3306      	adds	r3, #6
 800b4a4:	404a      	eors	r2, r1
 800b4a6:	b2d2      	uxtb	r2, r2
 800b4a8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800b4aa:	68bb      	ldr	r3, [r7, #8]
 800b4ac:	3307      	adds	r3, #7
 800b4ae:	7819      	ldrb	r1, [r3, #0]
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	3307      	adds	r3, #7
 800b4b4:	781a      	ldrb	r2, [r3, #0]
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	3307      	adds	r3, #7
 800b4ba:	404a      	eors	r2, r1
 800b4bc:	b2d2      	uxtb	r2, r2
 800b4be:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800b4c0:	68bb      	ldr	r3, [r7, #8]
 800b4c2:	3308      	adds	r3, #8
 800b4c4:	7819      	ldrb	r1, [r3, #0]
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	3308      	adds	r3, #8
 800b4ca:	781a      	ldrb	r2, [r3, #0]
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	3308      	adds	r3, #8
 800b4d0:	404a      	eors	r2, r1
 800b4d2:	b2d2      	uxtb	r2, r2
 800b4d4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800b4d6:	68bb      	ldr	r3, [r7, #8]
 800b4d8:	3309      	adds	r3, #9
 800b4da:	7819      	ldrb	r1, [r3, #0]
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	3309      	adds	r3, #9
 800b4e0:	781a      	ldrb	r2, [r3, #0]
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	3309      	adds	r3, #9
 800b4e6:	404a      	eors	r2, r1
 800b4e8:	b2d2      	uxtb	r2, r2
 800b4ea:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800b4ec:	68bb      	ldr	r3, [r7, #8]
 800b4ee:	330a      	adds	r3, #10
 800b4f0:	7819      	ldrb	r1, [r3, #0]
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	330a      	adds	r3, #10
 800b4f6:	781a      	ldrb	r2, [r3, #0]
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	330a      	adds	r3, #10
 800b4fc:	404a      	eors	r2, r1
 800b4fe:	b2d2      	uxtb	r2, r2
 800b500:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800b502:	68bb      	ldr	r3, [r7, #8]
 800b504:	330b      	adds	r3, #11
 800b506:	7819      	ldrb	r1, [r3, #0]
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	330b      	adds	r3, #11
 800b50c:	781a      	ldrb	r2, [r3, #0]
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	330b      	adds	r3, #11
 800b512:	404a      	eors	r2, r1
 800b514:	b2d2      	uxtb	r2, r2
 800b516:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800b518:	68bb      	ldr	r3, [r7, #8]
 800b51a:	330c      	adds	r3, #12
 800b51c:	7819      	ldrb	r1, [r3, #0]
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	330c      	adds	r3, #12
 800b522:	781a      	ldrb	r2, [r3, #0]
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	330c      	adds	r3, #12
 800b528:	404a      	eors	r2, r1
 800b52a:	b2d2      	uxtb	r2, r2
 800b52c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800b52e:	68bb      	ldr	r3, [r7, #8]
 800b530:	330d      	adds	r3, #13
 800b532:	7819      	ldrb	r1, [r3, #0]
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	330d      	adds	r3, #13
 800b538:	781a      	ldrb	r2, [r3, #0]
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	330d      	adds	r3, #13
 800b53e:	404a      	eors	r2, r1
 800b540:	b2d2      	uxtb	r2, r2
 800b542:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800b544:	68bb      	ldr	r3, [r7, #8]
 800b546:	330e      	adds	r3, #14
 800b548:	7819      	ldrb	r1, [r3, #0]
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	330e      	adds	r3, #14
 800b54e:	781a      	ldrb	r2, [r3, #0]
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	330e      	adds	r3, #14
 800b554:	404a      	eors	r2, r1
 800b556:	b2d2      	uxtb	r2, r2
 800b558:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800b55a:	68bb      	ldr	r3, [r7, #8]
 800b55c:	330f      	adds	r3, #15
 800b55e:	7819      	ldrb	r1, [r3, #0]
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	330f      	adds	r3, #15
 800b564:	781a      	ldrb	r2, [r3, #0]
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	330f      	adds	r3, #15
 800b56a:	404a      	eors	r2, r1
 800b56c:	b2d2      	uxtb	r2, r2
 800b56e:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800b570:	bf00      	nop
 800b572:	3714      	adds	r7, #20
 800b574:	46bd      	mov	sp, r7
 800b576:	bc80      	pop	{r7}
 800b578:	4770      	bx	lr

0800b57a <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800b57a:	b580      	push	{r7, lr}
 800b57c:	b082      	sub	sp, #8
 800b57e:	af00      	add	r7, sp, #0
 800b580:	6078      	str	r0, [r7, #4]
 800b582:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800b584:	6839      	ldr	r1, [r7, #0]
 800b586:	6878      	ldr	r0, [r7, #4]
 800b588:	f7ff fe88 	bl	800b29c <xor_block>
}
 800b58c:	bf00      	nop
 800b58e:	3708      	adds	r7, #8
 800b590:	46bd      	mov	sp, r7
 800b592:	bd80      	pop	{r7, pc}

0800b594 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800b594:	b480      	push	{r7}
 800b596:	b085      	sub	sp, #20
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	781b      	ldrb	r3, [r3, #0]
 800b5a0:	461a      	mov	r2, r3
 800b5a2:	4b48      	ldr	r3, [pc, #288]	@ (800b6c4 <shift_sub_rows+0x130>)
 800b5a4:	5c9a      	ldrb	r2, [r3, r2]
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	701a      	strb	r2, [r3, #0]
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	3304      	adds	r3, #4
 800b5ae:	781b      	ldrb	r3, [r3, #0]
 800b5b0:	4619      	mov	r1, r3
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	3304      	adds	r3, #4
 800b5b6:	4a43      	ldr	r2, [pc, #268]	@ (800b6c4 <shift_sub_rows+0x130>)
 800b5b8:	5c52      	ldrb	r2, [r2, r1]
 800b5ba:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	3308      	adds	r3, #8
 800b5c0:	781b      	ldrb	r3, [r3, #0]
 800b5c2:	4619      	mov	r1, r3
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	3308      	adds	r3, #8
 800b5c8:	4a3e      	ldr	r2, [pc, #248]	@ (800b6c4 <shift_sub_rows+0x130>)
 800b5ca:	5c52      	ldrb	r2, [r2, r1]
 800b5cc:	701a      	strb	r2, [r3, #0]
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	330c      	adds	r3, #12
 800b5d2:	781b      	ldrb	r3, [r3, #0]
 800b5d4:	4619      	mov	r1, r3
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	330c      	adds	r3, #12
 800b5da:	4a3a      	ldr	r2, [pc, #232]	@ (800b6c4 <shift_sub_rows+0x130>)
 800b5dc:	5c52      	ldrb	r2, [r2, r1]
 800b5de:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	785b      	ldrb	r3, [r3, #1]
 800b5e4:	73fb      	strb	r3, [r7, #15]
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	3305      	adds	r3, #5
 800b5ea:	781b      	ldrb	r3, [r3, #0]
 800b5ec:	4619      	mov	r1, r3
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	3301      	adds	r3, #1
 800b5f2:	4a34      	ldr	r2, [pc, #208]	@ (800b6c4 <shift_sub_rows+0x130>)
 800b5f4:	5c52      	ldrb	r2, [r2, r1]
 800b5f6:	701a      	strb	r2, [r3, #0]
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	3309      	adds	r3, #9
 800b5fc:	781b      	ldrb	r3, [r3, #0]
 800b5fe:	4619      	mov	r1, r3
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	3305      	adds	r3, #5
 800b604:	4a2f      	ldr	r2, [pc, #188]	@ (800b6c4 <shift_sub_rows+0x130>)
 800b606:	5c52      	ldrb	r2, [r2, r1]
 800b608:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	330d      	adds	r3, #13
 800b60e:	781b      	ldrb	r3, [r3, #0]
 800b610:	4619      	mov	r1, r3
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	3309      	adds	r3, #9
 800b616:	4a2b      	ldr	r2, [pc, #172]	@ (800b6c4 <shift_sub_rows+0x130>)
 800b618:	5c52      	ldrb	r2, [r2, r1]
 800b61a:	701a      	strb	r2, [r3, #0]
 800b61c:	7bfa      	ldrb	r2, [r7, #15]
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	330d      	adds	r3, #13
 800b622:	4928      	ldr	r1, [pc, #160]	@ (800b6c4 <shift_sub_rows+0x130>)
 800b624:	5c8a      	ldrb	r2, [r1, r2]
 800b626:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	789b      	ldrb	r3, [r3, #2]
 800b62c:	73fb      	strb	r3, [r7, #15]
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	330a      	adds	r3, #10
 800b632:	781b      	ldrb	r3, [r3, #0]
 800b634:	4619      	mov	r1, r3
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	3302      	adds	r3, #2
 800b63a:	4a22      	ldr	r2, [pc, #136]	@ (800b6c4 <shift_sub_rows+0x130>)
 800b63c:	5c52      	ldrb	r2, [r2, r1]
 800b63e:	701a      	strb	r2, [r3, #0]
 800b640:	7bfa      	ldrb	r2, [r7, #15]
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	330a      	adds	r3, #10
 800b646:	491f      	ldr	r1, [pc, #124]	@ (800b6c4 <shift_sub_rows+0x130>)
 800b648:	5c8a      	ldrb	r2, [r1, r2]
 800b64a:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	799b      	ldrb	r3, [r3, #6]
 800b650:	73fb      	strb	r3, [r7, #15]
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	330e      	adds	r3, #14
 800b656:	781b      	ldrb	r3, [r3, #0]
 800b658:	4619      	mov	r1, r3
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	3306      	adds	r3, #6
 800b65e:	4a19      	ldr	r2, [pc, #100]	@ (800b6c4 <shift_sub_rows+0x130>)
 800b660:	5c52      	ldrb	r2, [r2, r1]
 800b662:	701a      	strb	r2, [r3, #0]
 800b664:	7bfa      	ldrb	r2, [r7, #15]
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	330e      	adds	r3, #14
 800b66a:	4916      	ldr	r1, [pc, #88]	@ (800b6c4 <shift_sub_rows+0x130>)
 800b66c:	5c8a      	ldrb	r2, [r1, r2]
 800b66e:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	7bdb      	ldrb	r3, [r3, #15]
 800b674:	73fb      	strb	r3, [r7, #15]
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	330b      	adds	r3, #11
 800b67a:	781b      	ldrb	r3, [r3, #0]
 800b67c:	4619      	mov	r1, r3
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	330f      	adds	r3, #15
 800b682:	4a10      	ldr	r2, [pc, #64]	@ (800b6c4 <shift_sub_rows+0x130>)
 800b684:	5c52      	ldrb	r2, [r2, r1]
 800b686:	701a      	strb	r2, [r3, #0]
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	3307      	adds	r3, #7
 800b68c:	781b      	ldrb	r3, [r3, #0]
 800b68e:	4619      	mov	r1, r3
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	330b      	adds	r3, #11
 800b694:	4a0b      	ldr	r2, [pc, #44]	@ (800b6c4 <shift_sub_rows+0x130>)
 800b696:	5c52      	ldrb	r2, [r2, r1]
 800b698:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	3303      	adds	r3, #3
 800b69e:	781b      	ldrb	r3, [r3, #0]
 800b6a0:	4619      	mov	r1, r3
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	3307      	adds	r3, #7
 800b6a6:	4a07      	ldr	r2, [pc, #28]	@ (800b6c4 <shift_sub_rows+0x130>)
 800b6a8:	5c52      	ldrb	r2, [r2, r1]
 800b6aa:	701a      	strb	r2, [r3, #0]
 800b6ac:	7bfa      	ldrb	r2, [r7, #15]
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	3303      	adds	r3, #3
 800b6b2:	4904      	ldr	r1, [pc, #16]	@ (800b6c4 <shift_sub_rows+0x130>)
 800b6b4:	5c8a      	ldrb	r2, [r1, r2]
 800b6b6:	701a      	strb	r2, [r3, #0]
}
 800b6b8:	bf00      	nop
 800b6ba:	3714      	adds	r7, #20
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	bc80      	pop	{r7}
 800b6c0:	4770      	bx	lr
 800b6c2:	bf00      	nop
 800b6c4:	0801f2bc 	.word	0x0801f2bc

0800b6c8 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b086      	sub	sp, #24
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800b6d0:	f107 0308 	add.w	r3, r7, #8
 800b6d4:	6879      	ldr	r1, [r7, #4]
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	f7ff fd6c 	bl	800b1b4 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800b6dc:	7a3b      	ldrb	r3, [r7, #8]
 800b6de:	461a      	mov	r2, r3
 800b6e0:	4b9a      	ldr	r3, [pc, #616]	@ (800b94c <mix_sub_columns+0x284>)
 800b6e2:	5c9a      	ldrb	r2, [r3, r2]
 800b6e4:	7b7b      	ldrb	r3, [r7, #13]
 800b6e6:	4619      	mov	r1, r3
 800b6e8:	4b99      	ldr	r3, [pc, #612]	@ (800b950 <mix_sub_columns+0x288>)
 800b6ea:	5c5b      	ldrb	r3, [r3, r1]
 800b6ec:	4053      	eors	r3, r2
 800b6ee:	b2da      	uxtb	r2, r3
 800b6f0:	7cbb      	ldrb	r3, [r7, #18]
 800b6f2:	4619      	mov	r1, r3
 800b6f4:	4b97      	ldr	r3, [pc, #604]	@ (800b954 <mix_sub_columns+0x28c>)
 800b6f6:	5c5b      	ldrb	r3, [r3, r1]
 800b6f8:	4053      	eors	r3, r2
 800b6fa:	b2da      	uxtb	r2, r3
 800b6fc:	7dfb      	ldrb	r3, [r7, #23]
 800b6fe:	4619      	mov	r1, r3
 800b700:	4b94      	ldr	r3, [pc, #592]	@ (800b954 <mix_sub_columns+0x28c>)
 800b702:	5c5b      	ldrb	r3, [r3, r1]
 800b704:	4053      	eors	r3, r2
 800b706:	b2da      	uxtb	r2, r3
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800b70c:	7a3b      	ldrb	r3, [r7, #8]
 800b70e:	461a      	mov	r2, r3
 800b710:	4b90      	ldr	r3, [pc, #576]	@ (800b954 <mix_sub_columns+0x28c>)
 800b712:	5c9a      	ldrb	r2, [r3, r2]
 800b714:	7b7b      	ldrb	r3, [r7, #13]
 800b716:	4619      	mov	r1, r3
 800b718:	4b8c      	ldr	r3, [pc, #560]	@ (800b94c <mix_sub_columns+0x284>)
 800b71a:	5c5b      	ldrb	r3, [r3, r1]
 800b71c:	4053      	eors	r3, r2
 800b71e:	b2da      	uxtb	r2, r3
 800b720:	7cbb      	ldrb	r3, [r7, #18]
 800b722:	4619      	mov	r1, r3
 800b724:	4b8a      	ldr	r3, [pc, #552]	@ (800b950 <mix_sub_columns+0x288>)
 800b726:	5c5b      	ldrb	r3, [r3, r1]
 800b728:	4053      	eors	r3, r2
 800b72a:	b2d9      	uxtb	r1, r3
 800b72c:	7dfb      	ldrb	r3, [r7, #23]
 800b72e:	461a      	mov	r2, r3
 800b730:	4b88      	ldr	r3, [pc, #544]	@ (800b954 <mix_sub_columns+0x28c>)
 800b732:	5c9a      	ldrb	r2, [r3, r2]
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	3301      	adds	r3, #1
 800b738:	404a      	eors	r2, r1
 800b73a:	b2d2      	uxtb	r2, r2
 800b73c:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800b73e:	7a3b      	ldrb	r3, [r7, #8]
 800b740:	461a      	mov	r2, r3
 800b742:	4b84      	ldr	r3, [pc, #528]	@ (800b954 <mix_sub_columns+0x28c>)
 800b744:	5c9a      	ldrb	r2, [r3, r2]
 800b746:	7b7b      	ldrb	r3, [r7, #13]
 800b748:	4619      	mov	r1, r3
 800b74a:	4b82      	ldr	r3, [pc, #520]	@ (800b954 <mix_sub_columns+0x28c>)
 800b74c:	5c5b      	ldrb	r3, [r3, r1]
 800b74e:	4053      	eors	r3, r2
 800b750:	b2da      	uxtb	r2, r3
 800b752:	7cbb      	ldrb	r3, [r7, #18]
 800b754:	4619      	mov	r1, r3
 800b756:	4b7d      	ldr	r3, [pc, #500]	@ (800b94c <mix_sub_columns+0x284>)
 800b758:	5c5b      	ldrb	r3, [r3, r1]
 800b75a:	4053      	eors	r3, r2
 800b75c:	b2d9      	uxtb	r1, r3
 800b75e:	7dfb      	ldrb	r3, [r7, #23]
 800b760:	461a      	mov	r2, r3
 800b762:	4b7b      	ldr	r3, [pc, #492]	@ (800b950 <mix_sub_columns+0x288>)
 800b764:	5c9a      	ldrb	r2, [r3, r2]
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	3302      	adds	r3, #2
 800b76a:	404a      	eors	r2, r1
 800b76c:	b2d2      	uxtb	r2, r2
 800b76e:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800b770:	7a3b      	ldrb	r3, [r7, #8]
 800b772:	461a      	mov	r2, r3
 800b774:	4b76      	ldr	r3, [pc, #472]	@ (800b950 <mix_sub_columns+0x288>)
 800b776:	5c9a      	ldrb	r2, [r3, r2]
 800b778:	7b7b      	ldrb	r3, [r7, #13]
 800b77a:	4619      	mov	r1, r3
 800b77c:	4b75      	ldr	r3, [pc, #468]	@ (800b954 <mix_sub_columns+0x28c>)
 800b77e:	5c5b      	ldrb	r3, [r3, r1]
 800b780:	4053      	eors	r3, r2
 800b782:	b2da      	uxtb	r2, r3
 800b784:	7cbb      	ldrb	r3, [r7, #18]
 800b786:	4619      	mov	r1, r3
 800b788:	4b72      	ldr	r3, [pc, #456]	@ (800b954 <mix_sub_columns+0x28c>)
 800b78a:	5c5b      	ldrb	r3, [r3, r1]
 800b78c:	4053      	eors	r3, r2
 800b78e:	b2d9      	uxtb	r1, r3
 800b790:	7dfb      	ldrb	r3, [r7, #23]
 800b792:	461a      	mov	r2, r3
 800b794:	4b6d      	ldr	r3, [pc, #436]	@ (800b94c <mix_sub_columns+0x284>)
 800b796:	5c9a      	ldrb	r2, [r3, r2]
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	3303      	adds	r3, #3
 800b79c:	404a      	eors	r2, r1
 800b79e:	b2d2      	uxtb	r2, r2
 800b7a0:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800b7a2:	7b3b      	ldrb	r3, [r7, #12]
 800b7a4:	461a      	mov	r2, r3
 800b7a6:	4b69      	ldr	r3, [pc, #420]	@ (800b94c <mix_sub_columns+0x284>)
 800b7a8:	5c9a      	ldrb	r2, [r3, r2]
 800b7aa:	7c7b      	ldrb	r3, [r7, #17]
 800b7ac:	4619      	mov	r1, r3
 800b7ae:	4b68      	ldr	r3, [pc, #416]	@ (800b950 <mix_sub_columns+0x288>)
 800b7b0:	5c5b      	ldrb	r3, [r3, r1]
 800b7b2:	4053      	eors	r3, r2
 800b7b4:	b2da      	uxtb	r2, r3
 800b7b6:	7dbb      	ldrb	r3, [r7, #22]
 800b7b8:	4619      	mov	r1, r3
 800b7ba:	4b66      	ldr	r3, [pc, #408]	@ (800b954 <mix_sub_columns+0x28c>)
 800b7bc:	5c5b      	ldrb	r3, [r3, r1]
 800b7be:	4053      	eors	r3, r2
 800b7c0:	b2d9      	uxtb	r1, r3
 800b7c2:	7afb      	ldrb	r3, [r7, #11]
 800b7c4:	461a      	mov	r2, r3
 800b7c6:	4b63      	ldr	r3, [pc, #396]	@ (800b954 <mix_sub_columns+0x28c>)
 800b7c8:	5c9a      	ldrb	r2, [r3, r2]
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	3304      	adds	r3, #4
 800b7ce:	404a      	eors	r2, r1
 800b7d0:	b2d2      	uxtb	r2, r2
 800b7d2:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800b7d4:	7b3b      	ldrb	r3, [r7, #12]
 800b7d6:	461a      	mov	r2, r3
 800b7d8:	4b5e      	ldr	r3, [pc, #376]	@ (800b954 <mix_sub_columns+0x28c>)
 800b7da:	5c9a      	ldrb	r2, [r3, r2]
 800b7dc:	7c7b      	ldrb	r3, [r7, #17]
 800b7de:	4619      	mov	r1, r3
 800b7e0:	4b5a      	ldr	r3, [pc, #360]	@ (800b94c <mix_sub_columns+0x284>)
 800b7e2:	5c5b      	ldrb	r3, [r3, r1]
 800b7e4:	4053      	eors	r3, r2
 800b7e6:	b2da      	uxtb	r2, r3
 800b7e8:	7dbb      	ldrb	r3, [r7, #22]
 800b7ea:	4619      	mov	r1, r3
 800b7ec:	4b58      	ldr	r3, [pc, #352]	@ (800b950 <mix_sub_columns+0x288>)
 800b7ee:	5c5b      	ldrb	r3, [r3, r1]
 800b7f0:	4053      	eors	r3, r2
 800b7f2:	b2d9      	uxtb	r1, r3
 800b7f4:	7afb      	ldrb	r3, [r7, #11]
 800b7f6:	461a      	mov	r2, r3
 800b7f8:	4b56      	ldr	r3, [pc, #344]	@ (800b954 <mix_sub_columns+0x28c>)
 800b7fa:	5c9a      	ldrb	r2, [r3, r2]
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	3305      	adds	r3, #5
 800b800:	404a      	eors	r2, r1
 800b802:	b2d2      	uxtb	r2, r2
 800b804:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800b806:	7b3b      	ldrb	r3, [r7, #12]
 800b808:	461a      	mov	r2, r3
 800b80a:	4b52      	ldr	r3, [pc, #328]	@ (800b954 <mix_sub_columns+0x28c>)
 800b80c:	5c9a      	ldrb	r2, [r3, r2]
 800b80e:	7c7b      	ldrb	r3, [r7, #17]
 800b810:	4619      	mov	r1, r3
 800b812:	4b50      	ldr	r3, [pc, #320]	@ (800b954 <mix_sub_columns+0x28c>)
 800b814:	5c5b      	ldrb	r3, [r3, r1]
 800b816:	4053      	eors	r3, r2
 800b818:	b2da      	uxtb	r2, r3
 800b81a:	7dbb      	ldrb	r3, [r7, #22]
 800b81c:	4619      	mov	r1, r3
 800b81e:	4b4b      	ldr	r3, [pc, #300]	@ (800b94c <mix_sub_columns+0x284>)
 800b820:	5c5b      	ldrb	r3, [r3, r1]
 800b822:	4053      	eors	r3, r2
 800b824:	b2d9      	uxtb	r1, r3
 800b826:	7afb      	ldrb	r3, [r7, #11]
 800b828:	461a      	mov	r2, r3
 800b82a:	4b49      	ldr	r3, [pc, #292]	@ (800b950 <mix_sub_columns+0x288>)
 800b82c:	5c9a      	ldrb	r2, [r3, r2]
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	3306      	adds	r3, #6
 800b832:	404a      	eors	r2, r1
 800b834:	b2d2      	uxtb	r2, r2
 800b836:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800b838:	7b3b      	ldrb	r3, [r7, #12]
 800b83a:	461a      	mov	r2, r3
 800b83c:	4b44      	ldr	r3, [pc, #272]	@ (800b950 <mix_sub_columns+0x288>)
 800b83e:	5c9a      	ldrb	r2, [r3, r2]
 800b840:	7c7b      	ldrb	r3, [r7, #17]
 800b842:	4619      	mov	r1, r3
 800b844:	4b43      	ldr	r3, [pc, #268]	@ (800b954 <mix_sub_columns+0x28c>)
 800b846:	5c5b      	ldrb	r3, [r3, r1]
 800b848:	4053      	eors	r3, r2
 800b84a:	b2da      	uxtb	r2, r3
 800b84c:	7dbb      	ldrb	r3, [r7, #22]
 800b84e:	4619      	mov	r1, r3
 800b850:	4b40      	ldr	r3, [pc, #256]	@ (800b954 <mix_sub_columns+0x28c>)
 800b852:	5c5b      	ldrb	r3, [r3, r1]
 800b854:	4053      	eors	r3, r2
 800b856:	b2d9      	uxtb	r1, r3
 800b858:	7afb      	ldrb	r3, [r7, #11]
 800b85a:	461a      	mov	r2, r3
 800b85c:	4b3b      	ldr	r3, [pc, #236]	@ (800b94c <mix_sub_columns+0x284>)
 800b85e:	5c9a      	ldrb	r2, [r3, r2]
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	3307      	adds	r3, #7
 800b864:	404a      	eors	r2, r1
 800b866:	b2d2      	uxtb	r2, r2
 800b868:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800b86a:	7c3b      	ldrb	r3, [r7, #16]
 800b86c:	461a      	mov	r2, r3
 800b86e:	4b37      	ldr	r3, [pc, #220]	@ (800b94c <mix_sub_columns+0x284>)
 800b870:	5c9a      	ldrb	r2, [r3, r2]
 800b872:	7d7b      	ldrb	r3, [r7, #21]
 800b874:	4619      	mov	r1, r3
 800b876:	4b36      	ldr	r3, [pc, #216]	@ (800b950 <mix_sub_columns+0x288>)
 800b878:	5c5b      	ldrb	r3, [r3, r1]
 800b87a:	4053      	eors	r3, r2
 800b87c:	b2da      	uxtb	r2, r3
 800b87e:	7abb      	ldrb	r3, [r7, #10]
 800b880:	4619      	mov	r1, r3
 800b882:	4b34      	ldr	r3, [pc, #208]	@ (800b954 <mix_sub_columns+0x28c>)
 800b884:	5c5b      	ldrb	r3, [r3, r1]
 800b886:	4053      	eors	r3, r2
 800b888:	b2d9      	uxtb	r1, r3
 800b88a:	7bfb      	ldrb	r3, [r7, #15]
 800b88c:	461a      	mov	r2, r3
 800b88e:	4b31      	ldr	r3, [pc, #196]	@ (800b954 <mix_sub_columns+0x28c>)
 800b890:	5c9a      	ldrb	r2, [r3, r2]
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	3308      	adds	r3, #8
 800b896:	404a      	eors	r2, r1
 800b898:	b2d2      	uxtb	r2, r2
 800b89a:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800b89c:	7c3b      	ldrb	r3, [r7, #16]
 800b89e:	461a      	mov	r2, r3
 800b8a0:	4b2c      	ldr	r3, [pc, #176]	@ (800b954 <mix_sub_columns+0x28c>)
 800b8a2:	5c9a      	ldrb	r2, [r3, r2]
 800b8a4:	7d7b      	ldrb	r3, [r7, #21]
 800b8a6:	4619      	mov	r1, r3
 800b8a8:	4b28      	ldr	r3, [pc, #160]	@ (800b94c <mix_sub_columns+0x284>)
 800b8aa:	5c5b      	ldrb	r3, [r3, r1]
 800b8ac:	4053      	eors	r3, r2
 800b8ae:	b2da      	uxtb	r2, r3
 800b8b0:	7abb      	ldrb	r3, [r7, #10]
 800b8b2:	4619      	mov	r1, r3
 800b8b4:	4b26      	ldr	r3, [pc, #152]	@ (800b950 <mix_sub_columns+0x288>)
 800b8b6:	5c5b      	ldrb	r3, [r3, r1]
 800b8b8:	4053      	eors	r3, r2
 800b8ba:	b2d9      	uxtb	r1, r3
 800b8bc:	7bfb      	ldrb	r3, [r7, #15]
 800b8be:	461a      	mov	r2, r3
 800b8c0:	4b24      	ldr	r3, [pc, #144]	@ (800b954 <mix_sub_columns+0x28c>)
 800b8c2:	5c9a      	ldrb	r2, [r3, r2]
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	3309      	adds	r3, #9
 800b8c8:	404a      	eors	r2, r1
 800b8ca:	b2d2      	uxtb	r2, r2
 800b8cc:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800b8ce:	7c3b      	ldrb	r3, [r7, #16]
 800b8d0:	461a      	mov	r2, r3
 800b8d2:	4b20      	ldr	r3, [pc, #128]	@ (800b954 <mix_sub_columns+0x28c>)
 800b8d4:	5c9a      	ldrb	r2, [r3, r2]
 800b8d6:	7d7b      	ldrb	r3, [r7, #21]
 800b8d8:	4619      	mov	r1, r3
 800b8da:	4b1e      	ldr	r3, [pc, #120]	@ (800b954 <mix_sub_columns+0x28c>)
 800b8dc:	5c5b      	ldrb	r3, [r3, r1]
 800b8de:	4053      	eors	r3, r2
 800b8e0:	b2da      	uxtb	r2, r3
 800b8e2:	7abb      	ldrb	r3, [r7, #10]
 800b8e4:	4619      	mov	r1, r3
 800b8e6:	4b19      	ldr	r3, [pc, #100]	@ (800b94c <mix_sub_columns+0x284>)
 800b8e8:	5c5b      	ldrb	r3, [r3, r1]
 800b8ea:	4053      	eors	r3, r2
 800b8ec:	b2d9      	uxtb	r1, r3
 800b8ee:	7bfb      	ldrb	r3, [r7, #15]
 800b8f0:	461a      	mov	r2, r3
 800b8f2:	4b17      	ldr	r3, [pc, #92]	@ (800b950 <mix_sub_columns+0x288>)
 800b8f4:	5c9a      	ldrb	r2, [r3, r2]
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	330a      	adds	r3, #10
 800b8fa:	404a      	eors	r2, r1
 800b8fc:	b2d2      	uxtb	r2, r2
 800b8fe:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800b900:	7c3b      	ldrb	r3, [r7, #16]
 800b902:	461a      	mov	r2, r3
 800b904:	4b12      	ldr	r3, [pc, #72]	@ (800b950 <mix_sub_columns+0x288>)
 800b906:	5c9a      	ldrb	r2, [r3, r2]
 800b908:	7d7b      	ldrb	r3, [r7, #21]
 800b90a:	4619      	mov	r1, r3
 800b90c:	4b11      	ldr	r3, [pc, #68]	@ (800b954 <mix_sub_columns+0x28c>)
 800b90e:	5c5b      	ldrb	r3, [r3, r1]
 800b910:	4053      	eors	r3, r2
 800b912:	b2da      	uxtb	r2, r3
 800b914:	7abb      	ldrb	r3, [r7, #10]
 800b916:	4619      	mov	r1, r3
 800b918:	4b0e      	ldr	r3, [pc, #56]	@ (800b954 <mix_sub_columns+0x28c>)
 800b91a:	5c5b      	ldrb	r3, [r3, r1]
 800b91c:	4053      	eors	r3, r2
 800b91e:	b2d9      	uxtb	r1, r3
 800b920:	7bfb      	ldrb	r3, [r7, #15]
 800b922:	461a      	mov	r2, r3
 800b924:	4b09      	ldr	r3, [pc, #36]	@ (800b94c <mix_sub_columns+0x284>)
 800b926:	5c9a      	ldrb	r2, [r3, r2]
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	330b      	adds	r3, #11
 800b92c:	404a      	eors	r2, r1
 800b92e:	b2d2      	uxtb	r2, r2
 800b930:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800b932:	7d3b      	ldrb	r3, [r7, #20]
 800b934:	461a      	mov	r2, r3
 800b936:	4b05      	ldr	r3, [pc, #20]	@ (800b94c <mix_sub_columns+0x284>)
 800b938:	5c9a      	ldrb	r2, [r3, r2]
 800b93a:	7a7b      	ldrb	r3, [r7, #9]
 800b93c:	4619      	mov	r1, r3
 800b93e:	4b04      	ldr	r3, [pc, #16]	@ (800b950 <mix_sub_columns+0x288>)
 800b940:	5c5b      	ldrb	r3, [r3, r1]
 800b942:	4053      	eors	r3, r2
 800b944:	b2da      	uxtb	r2, r3
 800b946:	7bbb      	ldrb	r3, [r7, #14]
 800b948:	4619      	mov	r1, r3
 800b94a:	e005      	b.n	800b958 <mix_sub_columns+0x290>
 800b94c:	0801f3bc 	.word	0x0801f3bc
 800b950:	0801f4bc 	.word	0x0801f4bc
 800b954:	0801f2bc 	.word	0x0801f2bc
 800b958:	4b2d      	ldr	r3, [pc, #180]	@ (800ba10 <mix_sub_columns+0x348>)
 800b95a:	5c5b      	ldrb	r3, [r3, r1]
 800b95c:	4053      	eors	r3, r2
 800b95e:	b2d9      	uxtb	r1, r3
 800b960:	7cfb      	ldrb	r3, [r7, #19]
 800b962:	461a      	mov	r2, r3
 800b964:	4b2a      	ldr	r3, [pc, #168]	@ (800ba10 <mix_sub_columns+0x348>)
 800b966:	5c9a      	ldrb	r2, [r3, r2]
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	330c      	adds	r3, #12
 800b96c:	404a      	eors	r2, r1
 800b96e:	b2d2      	uxtb	r2, r2
 800b970:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800b972:	7d3b      	ldrb	r3, [r7, #20]
 800b974:	461a      	mov	r2, r3
 800b976:	4b26      	ldr	r3, [pc, #152]	@ (800ba10 <mix_sub_columns+0x348>)
 800b978:	5c9a      	ldrb	r2, [r3, r2]
 800b97a:	7a7b      	ldrb	r3, [r7, #9]
 800b97c:	4619      	mov	r1, r3
 800b97e:	4b25      	ldr	r3, [pc, #148]	@ (800ba14 <mix_sub_columns+0x34c>)
 800b980:	5c5b      	ldrb	r3, [r3, r1]
 800b982:	4053      	eors	r3, r2
 800b984:	b2da      	uxtb	r2, r3
 800b986:	7bbb      	ldrb	r3, [r7, #14]
 800b988:	4619      	mov	r1, r3
 800b98a:	4b23      	ldr	r3, [pc, #140]	@ (800ba18 <mix_sub_columns+0x350>)
 800b98c:	5c5b      	ldrb	r3, [r3, r1]
 800b98e:	4053      	eors	r3, r2
 800b990:	b2d9      	uxtb	r1, r3
 800b992:	7cfb      	ldrb	r3, [r7, #19]
 800b994:	461a      	mov	r2, r3
 800b996:	4b1e      	ldr	r3, [pc, #120]	@ (800ba10 <mix_sub_columns+0x348>)
 800b998:	5c9a      	ldrb	r2, [r3, r2]
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	330d      	adds	r3, #13
 800b99e:	404a      	eors	r2, r1
 800b9a0:	b2d2      	uxtb	r2, r2
 800b9a2:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800b9a4:	7d3b      	ldrb	r3, [r7, #20]
 800b9a6:	461a      	mov	r2, r3
 800b9a8:	4b19      	ldr	r3, [pc, #100]	@ (800ba10 <mix_sub_columns+0x348>)
 800b9aa:	5c9a      	ldrb	r2, [r3, r2]
 800b9ac:	7a7b      	ldrb	r3, [r7, #9]
 800b9ae:	4619      	mov	r1, r3
 800b9b0:	4b17      	ldr	r3, [pc, #92]	@ (800ba10 <mix_sub_columns+0x348>)
 800b9b2:	5c5b      	ldrb	r3, [r3, r1]
 800b9b4:	4053      	eors	r3, r2
 800b9b6:	b2da      	uxtb	r2, r3
 800b9b8:	7bbb      	ldrb	r3, [r7, #14]
 800b9ba:	4619      	mov	r1, r3
 800b9bc:	4b15      	ldr	r3, [pc, #84]	@ (800ba14 <mix_sub_columns+0x34c>)
 800b9be:	5c5b      	ldrb	r3, [r3, r1]
 800b9c0:	4053      	eors	r3, r2
 800b9c2:	b2d9      	uxtb	r1, r3
 800b9c4:	7cfb      	ldrb	r3, [r7, #19]
 800b9c6:	461a      	mov	r2, r3
 800b9c8:	4b13      	ldr	r3, [pc, #76]	@ (800ba18 <mix_sub_columns+0x350>)
 800b9ca:	5c9a      	ldrb	r2, [r3, r2]
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	330e      	adds	r3, #14
 800b9d0:	404a      	eors	r2, r1
 800b9d2:	b2d2      	uxtb	r2, r2
 800b9d4:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800b9d6:	7d3b      	ldrb	r3, [r7, #20]
 800b9d8:	461a      	mov	r2, r3
 800b9da:	4b0f      	ldr	r3, [pc, #60]	@ (800ba18 <mix_sub_columns+0x350>)
 800b9dc:	5c9a      	ldrb	r2, [r3, r2]
 800b9de:	7a7b      	ldrb	r3, [r7, #9]
 800b9e0:	4619      	mov	r1, r3
 800b9e2:	4b0b      	ldr	r3, [pc, #44]	@ (800ba10 <mix_sub_columns+0x348>)
 800b9e4:	5c5b      	ldrb	r3, [r3, r1]
 800b9e6:	4053      	eors	r3, r2
 800b9e8:	b2da      	uxtb	r2, r3
 800b9ea:	7bbb      	ldrb	r3, [r7, #14]
 800b9ec:	4619      	mov	r1, r3
 800b9ee:	4b08      	ldr	r3, [pc, #32]	@ (800ba10 <mix_sub_columns+0x348>)
 800b9f0:	5c5b      	ldrb	r3, [r3, r1]
 800b9f2:	4053      	eors	r3, r2
 800b9f4:	b2d9      	uxtb	r1, r3
 800b9f6:	7cfb      	ldrb	r3, [r7, #19]
 800b9f8:	461a      	mov	r2, r3
 800b9fa:	4b06      	ldr	r3, [pc, #24]	@ (800ba14 <mix_sub_columns+0x34c>)
 800b9fc:	5c9a      	ldrb	r2, [r3, r2]
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	330f      	adds	r3, #15
 800ba02:	404a      	eors	r2, r1
 800ba04:	b2d2      	uxtb	r2, r2
 800ba06:	701a      	strb	r2, [r3, #0]
  }
 800ba08:	bf00      	nop
 800ba0a:	3718      	adds	r7, #24
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	bd80      	pop	{r7, pc}
 800ba10:	0801f2bc 	.word	0x0801f2bc
 800ba14:	0801f3bc 	.word	0x0801f3bc
 800ba18:	0801f4bc 	.word	0x0801f4bc

0800ba1c <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	b086      	sub	sp, #24
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	60f8      	str	r0, [r7, #12]
 800ba24:	460b      	mov	r3, r1
 800ba26:	607a      	str	r2, [r7, #4]
 800ba28:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800ba2a:	7afb      	ldrb	r3, [r7, #11]
 800ba2c:	3b10      	subs	r3, #16
 800ba2e:	2b10      	cmp	r3, #16
 800ba30:	bf8c      	ite	hi
 800ba32:	2201      	movhi	r2, #1
 800ba34:	2200      	movls	r2, #0
 800ba36:	b2d2      	uxtb	r2, r2
 800ba38:	2a00      	cmp	r2, #0
 800ba3a:	d10b      	bne.n	800ba54 <lorawan_aes_set_key+0x38>
 800ba3c:	4a64      	ldr	r2, [pc, #400]	@ (800bbd0 <lorawan_aes_set_key+0x1b4>)
 800ba3e:	fa22 f303 	lsr.w	r3, r2, r3
 800ba42:	f003 0301 	and.w	r3, r3, #1
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	bf14      	ite	ne
 800ba4a:	2301      	movne	r3, #1
 800ba4c:	2300      	moveq	r3, #0
 800ba4e:	b2db      	uxtb	r3, r3
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d105      	bne.n	800ba60 <lorawan_aes_set_key+0x44>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	2200      	movs	r2, #0
 800ba58:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
        return ( uint8_t )-1;
 800ba5c:	23ff      	movs	r3, #255	@ 0xff
 800ba5e:	e0b3      	b.n	800bbc8 <lorawan_aes_set_key+0x1ac>
        break;
 800ba60:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	7afa      	ldrb	r2, [r7, #11]
 800ba66:	68f9      	ldr	r1, [r7, #12]
 800ba68:	4618      	mov	r0, r3
 800ba6a:	f7ff fbfc 	bl	800b266 <copy_block_nn>
    hi = (keylen + 28) << 2;
 800ba6e:	7afb      	ldrb	r3, [r7, #11]
 800ba70:	331c      	adds	r3, #28
 800ba72:	b2db      	uxtb	r3, r3
 800ba74:	009b      	lsls	r3, r3, #2
 800ba76:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800ba78:	7c7b      	ldrb	r3, [r7, #17]
 800ba7a:	091b      	lsrs	r3, r3, #4
 800ba7c:	b2db      	uxtb	r3, r3
 800ba7e:	3b01      	subs	r3, #1
 800ba80:	b2da      	uxtb	r2, r3
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800ba88:	7afb      	ldrb	r3, [r7, #11]
 800ba8a:	75fb      	strb	r3, [r7, #23]
 800ba8c:	2301      	movs	r3, #1
 800ba8e:	75bb      	strb	r3, [r7, #22]
 800ba90:	e094      	b.n	800bbbc <lorawan_aes_set_key+0x1a0>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800ba92:	7dfb      	ldrb	r3, [r7, #23]
 800ba94:	3b04      	subs	r3, #4
 800ba96:	687a      	ldr	r2, [r7, #4]
 800ba98:	5cd3      	ldrb	r3, [r2, r3]
 800ba9a:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800ba9c:	7dfb      	ldrb	r3, [r7, #23]
 800ba9e:	3b03      	subs	r3, #3
 800baa0:	687a      	ldr	r2, [r7, #4]
 800baa2:	5cd3      	ldrb	r3, [r2, r3]
 800baa4:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800baa6:	7dfb      	ldrb	r3, [r7, #23]
 800baa8:	3b02      	subs	r3, #2
 800baaa:	687a      	ldr	r2, [r7, #4]
 800baac:	5cd3      	ldrb	r3, [r2, r3]
 800baae:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800bab0:	7dfb      	ldrb	r3, [r7, #23]
 800bab2:	3b01      	subs	r3, #1
 800bab4:	687a      	ldr	r2, [r7, #4]
 800bab6:	5cd3      	ldrb	r3, [r2, r3]
 800bab8:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800baba:	7dfb      	ldrb	r3, [r7, #23]
 800babc:	7afa      	ldrb	r2, [r7, #11]
 800babe:	fbb3 f1f2 	udiv	r1, r3, r2
 800bac2:	fb01 f202 	mul.w	r2, r1, r2
 800bac6:	1a9b      	subs	r3, r3, r2
 800bac8:	b2db      	uxtb	r3, r3
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d128      	bne.n	800bb20 <lorawan_aes_set_key+0x104>
        {
            tt = t0;
 800bace:	7d7b      	ldrb	r3, [r7, #21]
 800bad0:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800bad2:	7d3b      	ldrb	r3, [r7, #20]
 800bad4:	4a3f      	ldr	r2, [pc, #252]	@ (800bbd4 <lorawan_aes_set_key+0x1b8>)
 800bad6:	5cd2      	ldrb	r2, [r2, r3]
 800bad8:	7dbb      	ldrb	r3, [r7, #22]
 800bada:	4053      	eors	r3, r2
 800badc:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800bade:	7cfb      	ldrb	r3, [r7, #19]
 800bae0:	4a3c      	ldr	r2, [pc, #240]	@ (800bbd4 <lorawan_aes_set_key+0x1b8>)
 800bae2:	5cd3      	ldrb	r3, [r2, r3]
 800bae4:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800bae6:	7cbb      	ldrb	r3, [r7, #18]
 800bae8:	4a3a      	ldr	r2, [pc, #232]	@ (800bbd4 <lorawan_aes_set_key+0x1b8>)
 800baea:	5cd3      	ldrb	r3, [r2, r3]
 800baec:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800baee:	7c3b      	ldrb	r3, [r7, #16]
 800baf0:	4a38      	ldr	r2, [pc, #224]	@ (800bbd4 <lorawan_aes_set_key+0x1b8>)
 800baf2:	5cd3      	ldrb	r3, [r2, r3]
 800baf4:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800baf6:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800bafa:	005b      	lsls	r3, r3, #1
 800bafc:	b25a      	sxtb	r2, r3
 800bafe:	7dbb      	ldrb	r3, [r7, #22]
 800bb00:	09db      	lsrs	r3, r3, #7
 800bb02:	b2db      	uxtb	r3, r3
 800bb04:	b25b      	sxtb	r3, r3
 800bb06:	4619      	mov	r1, r3
 800bb08:	0049      	lsls	r1, r1, #1
 800bb0a:	440b      	add	r3, r1
 800bb0c:	4619      	mov	r1, r3
 800bb0e:	00c8      	lsls	r0, r1, #3
 800bb10:	4619      	mov	r1, r3
 800bb12:	4603      	mov	r3, r0
 800bb14:	440b      	add	r3, r1
 800bb16:	b25b      	sxtb	r3, r3
 800bb18:	4053      	eors	r3, r2
 800bb1a:	b25b      	sxtb	r3, r3
 800bb1c:	75bb      	strb	r3, [r7, #22]
 800bb1e:	e01c      	b.n	800bb5a <lorawan_aes_set_key+0x13e>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800bb20:	7afb      	ldrb	r3, [r7, #11]
 800bb22:	2b18      	cmp	r3, #24
 800bb24:	d919      	bls.n	800bb5a <lorawan_aes_set_key+0x13e>
 800bb26:	7dfb      	ldrb	r3, [r7, #23]
 800bb28:	7afa      	ldrb	r2, [r7, #11]
 800bb2a:	fbb3 f1f2 	udiv	r1, r3, r2
 800bb2e:	fb01 f202 	mul.w	r2, r1, r2
 800bb32:	1a9b      	subs	r3, r3, r2
 800bb34:	b2db      	uxtb	r3, r3
 800bb36:	2b10      	cmp	r3, #16
 800bb38:	d10f      	bne.n	800bb5a <lorawan_aes_set_key+0x13e>
        {
            t0 = s_box(t0);
 800bb3a:	7d7b      	ldrb	r3, [r7, #21]
 800bb3c:	4a25      	ldr	r2, [pc, #148]	@ (800bbd4 <lorawan_aes_set_key+0x1b8>)
 800bb3e:	5cd3      	ldrb	r3, [r2, r3]
 800bb40:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800bb42:	7d3b      	ldrb	r3, [r7, #20]
 800bb44:	4a23      	ldr	r2, [pc, #140]	@ (800bbd4 <lorawan_aes_set_key+0x1b8>)
 800bb46:	5cd3      	ldrb	r3, [r2, r3]
 800bb48:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800bb4a:	7cfb      	ldrb	r3, [r7, #19]
 800bb4c:	4a21      	ldr	r2, [pc, #132]	@ (800bbd4 <lorawan_aes_set_key+0x1b8>)
 800bb4e:	5cd3      	ldrb	r3, [r2, r3]
 800bb50:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800bb52:	7cbb      	ldrb	r3, [r7, #18]
 800bb54:	4a1f      	ldr	r2, [pc, #124]	@ (800bbd4 <lorawan_aes_set_key+0x1b8>)
 800bb56:	5cd3      	ldrb	r3, [r2, r3]
 800bb58:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800bb5a:	7dfa      	ldrb	r2, [r7, #23]
 800bb5c:	7afb      	ldrb	r3, [r7, #11]
 800bb5e:	1ad3      	subs	r3, r2, r3
 800bb60:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800bb62:	7c3b      	ldrb	r3, [r7, #16]
 800bb64:	687a      	ldr	r2, [r7, #4]
 800bb66:	5cd1      	ldrb	r1, [r2, r3]
 800bb68:	7dfb      	ldrb	r3, [r7, #23]
 800bb6a:	7d7a      	ldrb	r2, [r7, #21]
 800bb6c:	404a      	eors	r2, r1
 800bb6e:	b2d1      	uxtb	r1, r2
 800bb70:	687a      	ldr	r2, [r7, #4]
 800bb72:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800bb74:	7c3b      	ldrb	r3, [r7, #16]
 800bb76:	3301      	adds	r3, #1
 800bb78:	687a      	ldr	r2, [r7, #4]
 800bb7a:	5cd1      	ldrb	r1, [r2, r3]
 800bb7c:	7dfb      	ldrb	r3, [r7, #23]
 800bb7e:	3301      	adds	r3, #1
 800bb80:	7d3a      	ldrb	r2, [r7, #20]
 800bb82:	404a      	eors	r2, r1
 800bb84:	b2d1      	uxtb	r1, r2
 800bb86:	687a      	ldr	r2, [r7, #4]
 800bb88:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800bb8a:	7c3b      	ldrb	r3, [r7, #16]
 800bb8c:	3302      	adds	r3, #2
 800bb8e:	687a      	ldr	r2, [r7, #4]
 800bb90:	5cd1      	ldrb	r1, [r2, r3]
 800bb92:	7dfb      	ldrb	r3, [r7, #23]
 800bb94:	3302      	adds	r3, #2
 800bb96:	7cfa      	ldrb	r2, [r7, #19]
 800bb98:	404a      	eors	r2, r1
 800bb9a:	b2d1      	uxtb	r1, r2
 800bb9c:	687a      	ldr	r2, [r7, #4]
 800bb9e:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800bba0:	7c3b      	ldrb	r3, [r7, #16]
 800bba2:	3303      	adds	r3, #3
 800bba4:	687a      	ldr	r2, [r7, #4]
 800bba6:	5cd1      	ldrb	r1, [r2, r3]
 800bba8:	7dfb      	ldrb	r3, [r7, #23]
 800bbaa:	3303      	adds	r3, #3
 800bbac:	7cba      	ldrb	r2, [r7, #18]
 800bbae:	404a      	eors	r2, r1
 800bbb0:	b2d1      	uxtb	r1, r2
 800bbb2:	687a      	ldr	r2, [r7, #4]
 800bbb4:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800bbb6:	7dfb      	ldrb	r3, [r7, #23]
 800bbb8:	3304      	adds	r3, #4
 800bbba:	75fb      	strb	r3, [r7, #23]
 800bbbc:	7dfa      	ldrb	r2, [r7, #23]
 800bbbe:	7c7b      	ldrb	r3, [r7, #17]
 800bbc0:	429a      	cmp	r2, r3
 800bbc2:	f4ff af66 	bcc.w	800ba92 <lorawan_aes_set_key+0x76>
    }
    return 0;
 800bbc6:	2300      	movs	r3, #0
}
 800bbc8:	4618      	mov	r0, r3
 800bbca:	3718      	adds	r7, #24
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	bd80      	pop	{r7, pc}
 800bbd0:	00010101 	.word	0x00010101
 800bbd4:	0801f2bc 	.word	0x0801f2bc

0800bbd8 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b08a      	sub	sp, #40	@ 0x28
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	60f8      	str	r0, [r7, #12]
 800bbe0:	60b9      	str	r1, [r7, #8]
 800bbe2:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d038      	beq.n	800bc60 <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800bbee:	687a      	ldr	r2, [r7, #4]
 800bbf0:	f107 0314 	add.w	r3, r7, #20
 800bbf4:	68f9      	ldr	r1, [r7, #12]
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	f7ff fc07 	bl	800b40a <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800bbfc:	2301      	movs	r3, #1
 800bbfe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800bc02:	e014      	b.n	800bc2e <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800bc04:	f107 0314 	add.w	r3, r7, #20
 800bc08:	4618      	mov	r0, r3
 800bc0a:	f7ff fd5d 	bl	800b6c8 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800bc14:	0112      	lsls	r2, r2, #4
 800bc16:	441a      	add	r2, r3
 800bc18:	f107 0314 	add.w	r3, r7, #20
 800bc1c:	4611      	mov	r1, r2
 800bc1e:	4618      	mov	r0, r3
 800bc20:	f7ff fcab 	bl	800b57a <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800bc24:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bc28:	3301      	adds	r3, #1
 800bc2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800bc34:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800bc38:	429a      	cmp	r2, r3
 800bc3a:	d3e3      	bcc.n	800bc04 <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800bc3c:	f107 0314 	add.w	r3, r7, #20
 800bc40:	4618      	mov	r0, r3
 800bc42:	f7ff fca7 	bl	800b594 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800bc4c:	0112      	lsls	r2, r2, #4
 800bc4e:	441a      	add	r2, r3
 800bc50:	f107 0314 	add.w	r3, r7, #20
 800bc54:	4619      	mov	r1, r3
 800bc56:	68b8      	ldr	r0, [r7, #8]
 800bc58:	f7ff fbd7 	bl	800b40a <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800bc5c:	2300      	movs	r3, #0
 800bc5e:	e000      	b.n	800bc62 <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800bc60:	23ff      	movs	r3, #255	@ 0xff
}
 800bc62:	4618      	mov	r0, r3
 800bc64:	3728      	adds	r7, #40	@ 0x28
 800bc66:	46bd      	mov	sp, r7
 800bc68:	bd80      	pop	{r7, pc}
	...

0800bc6c <PrintKey>:
static SecureElementStatus_t ComputeCmac(uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID,
                                         uint32_t *cmac);

/* Private functions ---------------------------------------------------------*/
static void PrintKey( KeyIdentifier_t key )
{
 800bc6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc6e:	b09d      	sub	sp, #116	@ 0x74
 800bc70:	af10      	add	r7, sp, #64	@ 0x40
 800bc72:	4603      	mov	r3, r0
 800bc74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800bc78:	2306      	movs	r3, #6
 800bc7a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    Key_t *keyItem;
    retval = SecureElementGetKeyByID(key, &keyItem);
 800bc7e:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800bc82:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bc86:	4611      	mov	r1, r2
 800bc88:	4618      	mov	r0, r3
 800bc8a:	f000 f9a7 	bl	800bfdc <SecureElementGetKeyByID>
 800bc8e:	4603      	mov	r3, r0
 800bc90:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
#else
    uint8_t extractable_key[16] = {0};
    retval = SecureElementGetKeyByID(key, (uint8_t*)extractable_key);
#endif /* LORAWAN_KMS */
    if (retval == SECURE_ELEMENT_SUCCESS)
 800bc94:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	f040 80b0 	bne.w	800bdfe <PrintKey+0x192>
    {
        if (key == APP_KEY)
 800bc9e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d106      	bne.n	800bcb4 <PrintKey+0x48>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppKey:      ");
 800bca6:	4b58      	ldr	r3, [pc, #352]	@ (800be08 <PrintKey+0x19c>)
 800bca8:	2200      	movs	r2, #0
 800bcaa:	2100      	movs	r1, #0
 800bcac:	2002      	movs	r0, #2
 800bcae:	f00f fd91 	bl	801b7d4 <UTIL_ADV_TRACE_COND_FSend>
 800bcb2:	e056      	b.n	800bd62 <PrintKey+0xf6>
        }
        else if (key == NWK_KEY)
 800bcb4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bcb8:	2b01      	cmp	r3, #1
 800bcba:	d106      	bne.n	800bcca <PrintKey+0x5e>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkKey:      ");
 800bcbc:	4b53      	ldr	r3, [pc, #332]	@ (800be0c <PrintKey+0x1a0>)
 800bcbe:	2200      	movs	r2, #0
 800bcc0:	2100      	movs	r1, #0
 800bcc2:	2002      	movs	r0, #2
 800bcc4:	f00f fd86 	bl	801b7d4 <UTIL_ADV_TRACE_COND_FSend>
 800bcc8:	e04b      	b.n	800bd62 <PrintKey+0xf6>
        }
        else if (key == APP_S_KEY)
 800bcca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bcce:	2b03      	cmp	r3, #3
 800bcd0:	d106      	bne.n	800bce0 <PrintKey+0x74>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppSKey:     ");
 800bcd2:	4b4f      	ldr	r3, [pc, #316]	@ (800be10 <PrintKey+0x1a4>)
 800bcd4:	2200      	movs	r2, #0
 800bcd6:	2100      	movs	r1, #0
 800bcd8:	2002      	movs	r0, #2
 800bcda:	f00f fd7b 	bl	801b7d4 <UTIL_ADV_TRACE_COND_FSend>
 800bcde:	e040      	b.n	800bd62 <PrintKey+0xf6>
        }
        else if (key == NWK_S_KEY)
 800bce0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bce4:	2b02      	cmp	r3, #2
 800bce6:	d106      	bne.n	800bcf6 <PrintKey+0x8a>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey:     ");
 800bce8:	4b4a      	ldr	r3, [pc, #296]	@ (800be14 <PrintKey+0x1a8>)
 800bcea:	2200      	movs	r2, #0
 800bcec:	2100      	movs	r1, #0
 800bcee:	2002      	movs	r0, #2
 800bcf0:	f00f fd70 	bl	801b7d4 <UTIL_ADV_TRACE_COND_FSend>
 800bcf4:	e035      	b.n	800bd62 <PrintKey+0xf6>
        }
        else if (key == MC_ROOT_KEY)
 800bcf6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bcfa:	2b04      	cmp	r3, #4
 800bcfc:	d106      	bne.n	800bd0c <PrintKey+0xa0>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCRootKey:   ");
 800bcfe:	4b46      	ldr	r3, [pc, #280]	@ (800be18 <PrintKey+0x1ac>)
 800bd00:	2200      	movs	r2, #0
 800bd02:	2100      	movs	r1, #0
 800bd04:	2002      	movs	r0, #2
 800bd06:	f00f fd65 	bl	801b7d4 <UTIL_ADV_TRACE_COND_FSend>
 800bd0a:	e02a      	b.n	800bd62 <PrintKey+0xf6>
        }
        else if (key == MC_KE_KEY)
 800bd0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bd10:	2b7f      	cmp	r3, #127	@ 0x7f
 800bd12:	d106      	bne.n	800bd22 <PrintKey+0xb6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKEKey:     ");
 800bd14:	4b41      	ldr	r3, [pc, #260]	@ (800be1c <PrintKey+0x1b0>)
 800bd16:	2200      	movs	r2, #0
 800bd18:	2100      	movs	r1, #0
 800bd1a:	2002      	movs	r0, #2
 800bd1c:	f00f fd5a 	bl	801b7d4 <UTIL_ADV_TRACE_COND_FSend>
 800bd20:	e01f      	b.n	800bd62 <PrintKey+0xf6>
        }
        else if (key == MC_KEY_0)
 800bd22:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bd26:	2b80      	cmp	r3, #128	@ 0x80
 800bd28:	d106      	bne.n	800bd38 <PrintKey+0xcc>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKey_0:     ");
 800bd2a:	4b3d      	ldr	r3, [pc, #244]	@ (800be20 <PrintKey+0x1b4>)
 800bd2c:	2200      	movs	r2, #0
 800bd2e:	2100      	movs	r1, #0
 800bd30:	2002      	movs	r0, #2
 800bd32:	f00f fd4f 	bl	801b7d4 <UTIL_ADV_TRACE_COND_FSend>
 800bd36:	e014      	b.n	800bd62 <PrintKey+0xf6>
        }
        else if (key == MC_APP_S_KEY_0)
 800bd38:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bd3c:	2b81      	cmp	r3, #129	@ 0x81
 800bd3e:	d106      	bne.n	800bd4e <PrintKey+0xe2>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCAppSKey_0: ");
 800bd40:	4b38      	ldr	r3, [pc, #224]	@ (800be24 <PrintKey+0x1b8>)
 800bd42:	2200      	movs	r2, #0
 800bd44:	2100      	movs	r1, #0
 800bd46:	2002      	movs	r0, #2
 800bd48:	f00f fd44 	bl	801b7d4 <UTIL_ADV_TRACE_COND_FSend>
 800bd4c:	e009      	b.n	800bd62 <PrintKey+0xf6>
        }
        else if (key == MC_NWK_S_KEY_0)
 800bd4e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bd52:	2b82      	cmp	r3, #130	@ 0x82
 800bd54:	d105      	bne.n	800bd62 <PrintKey+0xf6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCNwkSKey_0: ");
 800bd56:	4b34      	ldr	r3, [pc, #208]	@ (800be28 <PrintKey+0x1bc>)
 800bd58:	2200      	movs	r2, #0
 800bd5a:	2100      	movs	r1, #0
 800bd5c:	2002      	movs	r0, #2
 800bd5e:	f00f fd39 	bl	801b7d4 <UTIL_ADV_TRACE_COND_FSend>
        }
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800bd62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd64:	785b      	ldrb	r3, [r3, #1]
 800bd66:	4618      	mov	r0, r3
 800bd68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd6a:	789b      	ldrb	r3, [r3, #2]
 800bd6c:	461c      	mov	r4, r3
 800bd6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd70:	78db      	ldrb	r3, [r3, #3]
 800bd72:	461d      	mov	r5, r3
 800bd74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd76:	791b      	ldrb	r3, [r3, #4]
 800bd78:	461e      	mov	r6, r3
 800bd7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd7c:	795b      	ldrb	r3, [r3, #5]
 800bd7e:	623b      	str	r3, [r7, #32]
 800bd80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd82:	799b      	ldrb	r3, [r3, #6]
 800bd84:	61fb      	str	r3, [r7, #28]
 800bd86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd88:	79db      	ldrb	r3, [r3, #7]
 800bd8a:	61bb      	str	r3, [r7, #24]
 800bd8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd8e:	7a1b      	ldrb	r3, [r3, #8]
 800bd90:	617b      	str	r3, [r7, #20]
 800bd92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd94:	7a5b      	ldrb	r3, [r3, #9]
 800bd96:	613b      	str	r3, [r7, #16]
 800bd98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd9a:	7a9b      	ldrb	r3, [r3, #10]
 800bd9c:	60fb      	str	r3, [r7, #12]
 800bd9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bda0:	7adb      	ldrb	r3, [r3, #11]
 800bda2:	60bb      	str	r3, [r7, #8]
 800bda4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bda6:	7b1b      	ldrb	r3, [r3, #12]
 800bda8:	607b      	str	r3, [r7, #4]
 800bdaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdac:	7b5b      	ldrb	r3, [r3, #13]
 800bdae:	603b      	str	r3, [r7, #0]
 800bdb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdb2:	7b9b      	ldrb	r3, [r3, #14]
 800bdb4:	4619      	mov	r1, r3
 800bdb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdb8:	7bdb      	ldrb	r3, [r3, #15]
 800bdba:	461a      	mov	r2, r3
 800bdbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdbe:	7c1b      	ldrb	r3, [r3, #16]
 800bdc0:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bdc2:	920e      	str	r2, [sp, #56]	@ 0x38
 800bdc4:	910d      	str	r1, [sp, #52]	@ 0x34
 800bdc6:	683a      	ldr	r2, [r7, #0]
 800bdc8:	920c      	str	r2, [sp, #48]	@ 0x30
 800bdca:	687a      	ldr	r2, [r7, #4]
 800bdcc:	920b      	str	r2, [sp, #44]	@ 0x2c
 800bdce:	68ba      	ldr	r2, [r7, #8]
 800bdd0:	920a      	str	r2, [sp, #40]	@ 0x28
 800bdd2:	68fa      	ldr	r2, [r7, #12]
 800bdd4:	9209      	str	r2, [sp, #36]	@ 0x24
 800bdd6:	693a      	ldr	r2, [r7, #16]
 800bdd8:	9208      	str	r2, [sp, #32]
 800bdda:	697a      	ldr	r2, [r7, #20]
 800bddc:	9207      	str	r2, [sp, #28]
 800bdde:	69ba      	ldr	r2, [r7, #24]
 800bde0:	9206      	str	r2, [sp, #24]
 800bde2:	69fa      	ldr	r2, [r7, #28]
 800bde4:	9205      	str	r2, [sp, #20]
 800bde6:	6a3b      	ldr	r3, [r7, #32]
 800bde8:	9304      	str	r3, [sp, #16]
 800bdea:	9603      	str	r6, [sp, #12]
 800bdec:	9502      	str	r5, [sp, #8]
 800bdee:	9401      	str	r4, [sp, #4]
 800bdf0:	9000      	str	r0, [sp, #0]
 800bdf2:	4b0e      	ldr	r3, [pc, #56]	@ (800be2c <PrintKey+0x1c0>)
 800bdf4:	2200      	movs	r2, #0
 800bdf6:	2100      	movs	r1, #0
 800bdf8:	2002      	movs	r0, #2
 800bdfa:	f00f fceb 	bl	801b7d4 <UTIL_ADV_TRACE_COND_FSend>
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
               HEX16(extractable_key));
#endif /* LORAWAN_KMS */
    }
#endif /* KEY_EXTRACTABLE */
}
 800bdfe:	bf00      	nop
 800be00:	3734      	adds	r7, #52	@ 0x34
 800be02:	46bd      	mov	sp, r7
 800be04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be06:	bf00      	nop
 800be08:	0801ed30 	.word	0x0801ed30
 800be0c:	0801ed48 	.word	0x0801ed48
 800be10:	0801ed60 	.word	0x0801ed60
 800be14:	0801ed78 	.word	0x0801ed78
 800be18:	0801ed90 	.word	0x0801ed90
 800be1c:	0801eda8 	.word	0x0801eda8
 800be20:	0801edc0 	.word	0x0801edc0
 800be24:	0801edd8 	.word	0x0801edd8
 800be28:	0801edf0 	.word	0x0801edf0
 800be2c:	0801ee08 	.word	0x0801ee08

0800be30 <GetKeyByID>:
 * \param [in] keyID          - Key identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t** keyItem )
{
 800be30:	b480      	push	{r7}
 800be32:	b085      	sub	sp, #20
 800be34:	af00      	add	r7, sp, #0
 800be36:	4603      	mov	r3, r0
 800be38:	6039      	str	r1, [r7, #0]
 800be3a:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800be3c:	2300      	movs	r3, #0
 800be3e:	73fb      	strb	r3, [r7, #15]
 800be40:	e01a      	b.n	800be78 <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800be42:	4b12      	ldr	r3, [pc, #72]	@ (800be8c <GetKeyByID+0x5c>)
 800be44:	6819      	ldr	r1, [r3, #0]
 800be46:	7bfa      	ldrb	r2, [r7, #15]
 800be48:	4613      	mov	r3, r2
 800be4a:	011b      	lsls	r3, r3, #4
 800be4c:	4413      	add	r3, r2
 800be4e:	440b      	add	r3, r1
 800be50:	3310      	adds	r3, #16
 800be52:	781b      	ldrb	r3, [r3, #0]
 800be54:	79fa      	ldrb	r2, [r7, #7]
 800be56:	429a      	cmp	r2, r3
 800be58:	d10b      	bne.n	800be72 <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800be5a:	4b0c      	ldr	r3, [pc, #48]	@ (800be8c <GetKeyByID+0x5c>)
 800be5c:	6819      	ldr	r1, [r3, #0]
 800be5e:	7bfa      	ldrb	r2, [r7, #15]
 800be60:	4613      	mov	r3, r2
 800be62:	011b      	lsls	r3, r3, #4
 800be64:	4413      	add	r3, r2
 800be66:	3310      	adds	r3, #16
 800be68:	18ca      	adds	r2, r1, r3
 800be6a:	683b      	ldr	r3, [r7, #0]
 800be6c:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800be6e:	2300      	movs	r3, #0
 800be70:	e006      	b.n	800be80 <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800be72:	7bfb      	ldrb	r3, [r7, #15]
 800be74:	3301      	adds	r3, #1
 800be76:	73fb      	strb	r3, [r7, #15]
 800be78:	7bfb      	ldrb	r3, [r7, #15]
 800be7a:	2b09      	cmp	r3, #9
 800be7c:	d9e1      	bls.n	800be42 <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800be7e:	2303      	movs	r3, #3
}
 800be80:	4618      	mov	r0, r3
 800be82:	3714      	adds	r7, #20
 800be84:	46bd      	mov	sp, r7
 800be86:	bc80      	pop	{r7}
 800be88:	4770      	bx	lr
 800be8a:	bf00      	nop
 800be8c:	2000073c 	.word	0x2000073c

0800be90 <ComputeCmac>:
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                          uint32_t* cmac )
{
 800be90:	b590      	push	{r4, r7, lr}
 800be92:	b0d1      	sub	sp, #324	@ 0x144
 800be94:	af00      	add	r7, sp, #0
 800be96:	f507 74a0 	add.w	r4, r7, #320	@ 0x140
 800be9a:	f5a4 749a 	sub.w	r4, r4, #308	@ 0x134
 800be9e:	6020      	str	r0, [r4, #0]
 800bea0:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 800bea4:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 800bea8:	6001      	str	r1, [r0, #0]
 800beaa:	4619      	mov	r1, r3
 800beac:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800beb0:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 800beb4:	801a      	strh	r2, [r3, #0]
 800beb6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800beba:	f2a3 133b 	subw	r3, r3, #315	@ 0x13b
 800bebe:	460a      	mov	r2, r1
 800bec0:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800bec2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800bec6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d003      	beq.n	800bed8 <ComputeCmac+0x48>
 800bed0:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d101      	bne.n	800bedc <ComputeCmac+0x4c>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bed8:	2302      	movs	r3, #2
 800beda:	e05c      	b.n	800bf96 <ComputeCmac+0x106>

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800bedc:	f107 0314 	add.w	r3, r7, #20
 800bee0:	4618      	mov	r0, r3
 800bee2:	f7fe ff17 	bl	800ad14 <AES_CMAC_Init>

    Key_t*                keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800bee6:	f107 0210 	add.w	r2, r7, #16
 800beea:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800beee:	f2a3 133b 	subw	r3, r3, #315	@ 0x13b
 800bef2:	781b      	ldrb	r3, [r3, #0]
 800bef4:	4611      	mov	r1, r2
 800bef6:	4618      	mov	r0, r3
 800bef8:	f7ff ff9a 	bl	800be30 <GetKeyByID>
 800befc:	4603      	mov	r3, r0
 800befe:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800bf02:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d143      	bne.n	800bf92 <ComputeCmac+0x102>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800bf0a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800bf0e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	1c5a      	adds	r2, r3, #1
 800bf16:	f107 0314 	add.w	r3, r7, #20
 800bf1a:	4611      	mov	r1, r2
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	f7fe ff12 	bl	800ad46 <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800bf22:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800bf26:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d009      	beq.n	800bf44 <ComputeCmac+0xb4>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
 800bf30:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800bf34:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800bf38:	f107 0014 	add.w	r0, r7, #20
 800bf3c:	2210      	movs	r2, #16
 800bf3e:	6819      	ldr	r1, [r3, #0]
 800bf40:	f7fe ff10 	bl	800ad64 <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800bf44:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800bf48:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 800bf4c:	881a      	ldrh	r2, [r3, #0]
 800bf4e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800bf52:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800bf56:	f107 0014 	add.w	r0, r7, #20
 800bf5a:	6819      	ldr	r1, [r3, #0]
 800bf5c:	f7fe ff02 	bl	800ad64 <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800bf60:	f107 0214 	add.w	r2, r7, #20
 800bf64:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 800bf68:	4611      	mov	r1, r2
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	f7fe ffbc 	bl	800aee8 <AES_CMAC_Final>

        // Bring into the required format
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800bf70:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800bf74:	061a      	lsls	r2, r3, #24
 800bf76:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 800bf7a:	041b      	lsls	r3, r3, #16
 800bf7c:	431a      	orrs	r2, r3
 800bf7e:	f897 312d 	ldrb.w	r3, [r7, #301]	@ 0x12d
 800bf82:	021b      	lsls	r3, r3, #8
 800bf84:	4313      	orrs	r3, r2
                              ( uint32_t ) Cmac[0] );
 800bf86:	f897 212c 	ldrb.w	r2, [r7, #300]	@ 0x12c
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800bf8a:	431a      	orrs	r2, r3
 800bf8c:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800bf90:	601a      	str	r2, [r3, #0]
    if (rv != CKR_OK)
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800bf92:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
}
 800bf96:	4618      	mov	r0, r3
 800bf98:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	bd90      	pop	{r4, r7, pc}

0800bfa0 <SecureElementInit>:
/*
 * API functions
 */
/* ST_WORKAROUND: Add unique ID callback as input parameter */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm, SecureElementGetUniqueId seGetUniqueId )
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b082      	sub	sp, #8
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
 800bfa8:	6039      	str	r1, [r7, #0]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    if( nvm == NULL )
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d101      	bne.n	800bfb4 <SecureElementInit+0x14>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bfb0:	2302      	movs	r3, #2
 800bfb2:	e00a      	b.n	800bfca <SecureElementInit+0x2a>
    }

    // Initialize nvm pointer
    SeNvm = nvm;
 800bfb4:	4a07      	ldr	r2, [pc, #28]	@ (800bfd4 <SecureElementInit+0x34>)
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	6013      	str	r3, [r2, #0]

    // Initialize data
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 800bfba:	4b06      	ldr	r3, [pc, #24]	@ (800bfd4 <SecureElementInit+0x34>)
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	22c0      	movs	r2, #192	@ 0xc0
 800bfc0:	4905      	ldr	r1, [pc, #20]	@ (800bfd8 <SecureElementInit+0x38>)
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	f00b f8af 	bl	8017126 <memcpy1>
        // Get a DevEUI from MCU unique ID
        seGetUniqueId(SeNvm->DevEui);
    }
#endif /* STATIC_DEVICE_EUI */
#endif /* !SECURE_ELEMENT_PRE_PROVISIONED */
    return SECURE_ELEMENT_SUCCESS;
 800bfc8:	2300      	movs	r3, #0
}
 800bfca:	4618      	mov	r0, r3
 800bfcc:	3708      	adds	r7, #8
 800bfce:	46bd      	mov	sp, r7
 800bfd0:	bd80      	pop	{r7, pc}
 800bfd2:	bf00      	nop
 800bfd4:	2000073c 	.word	0x2000073c
 800bfd8:	0801fb4c 	.word	0x0801fb4c

0800bfdc <SecureElementGetKeyByID>:
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem)
#else
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, uint8_t* extractable_key )
#endif /* LORAWAN_KMS */
{
 800bfdc:	b480      	push	{r7}
 800bfde:	b085      	sub	sp, #20
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	4603      	mov	r3, r0
 800bfe4:	6039      	str	r1, [r7, #0]
 800bfe6:	71fb      	strb	r3, [r7, #7]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800bfe8:	2300      	movs	r3, #0
 800bfea:	73fb      	strb	r3, [r7, #15]
 800bfec:	e01a      	b.n	800c024 <SecureElementGetKeyByID+0x48>
    {
        if (SeNvm->KeyList[i].KeyID == keyID)
 800bfee:	4b12      	ldr	r3, [pc, #72]	@ (800c038 <SecureElementGetKeyByID+0x5c>)
 800bff0:	6819      	ldr	r1, [r3, #0]
 800bff2:	7bfa      	ldrb	r2, [r7, #15]
 800bff4:	4613      	mov	r3, r2
 800bff6:	011b      	lsls	r3, r3, #4
 800bff8:	4413      	add	r3, r2
 800bffa:	440b      	add	r3, r1
 800bffc:	3310      	adds	r3, #16
 800bffe:	781b      	ldrb	r3, [r3, #0]
 800c000:	79fa      	ldrb	r2, [r7, #7]
 800c002:	429a      	cmp	r2, r3
 800c004:	d10b      	bne.n	800c01e <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &(SeNvm->KeyList[i]);
 800c006:	4b0c      	ldr	r3, [pc, #48]	@ (800c038 <SecureElementGetKeyByID+0x5c>)
 800c008:	6819      	ldr	r1, [r3, #0]
 800c00a:	7bfa      	ldrb	r2, [r7, #15]
 800c00c:	4613      	mov	r3, r2
 800c00e:	011b      	lsls	r3, r3, #4
 800c010:	4413      	add	r3, r2
 800c012:	3310      	adds	r3, #16
 800c014:	18ca      	adds	r2, r1, r3
 800c016:	683b      	ldr	r3, [r7, #0]
 800c018:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800c01a:	2300      	movs	r3, #0
 800c01c:	e006      	b.n	800c02c <SecureElementGetKeyByID+0x50>
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800c01e:	7bfb      	ldrb	r3, [r7, #15]
 800c020:	3301      	adds	r3, #1
 800c022:	73fb      	strb	r3, [r7, #15]
 800c024:	7bfb      	ldrb	r3, [r7, #15]
 800c026:	2b09      	cmp	r3, #9
 800c028:	d9e1      	bls.n	800bfee <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800c02a:	2303      	movs	r3, #3
        return SECURE_ELEMENT_ERROR;
    }
    return SECURE_ELEMENT_SUCCESS;

#endif /* LORAWAN_KMS == 1 */
}
 800c02c:	4618      	mov	r0, r3
 800c02e:	3714      	adds	r7, #20
 800c030:	46bd      	mov	sp, r7
 800c032:	bc80      	pop	{r7}
 800c034:	4770      	bx	lr
 800c036:	bf00      	nop
 800c038:	2000073c 	.word	0x2000073c

0800c03c <SecureElementPrintKeys>:

SecureElementStatus_t SecureElementPrintKeys( void )
{
 800c03c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c03e:	b08b      	sub	sp, #44	@ 0x2c
 800c040:	af08      	add	r7, sp, #32
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    MW_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 800c042:	4b3f      	ldr	r3, [pc, #252]	@ (800c140 <SecureElementPrintKeys+0x104>)
 800c044:	2200      	movs	r2, #0
 800c046:	2100      	movs	r1, #0
 800c048:	2002      	movs	r0, #2
 800c04a:	f00f fbc3 	bl	801b7d4 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_KEY);
 800c04e:	2000      	movs	r0, #0
 800c050:	f7ff fe0c 	bl	800bc6c <PrintKey>
    PrintKey(NWK_KEY);
 800c054:	2001      	movs	r0, #1
 800c056:	f7ff fe09 	bl	800bc6c <PrintKey>
    MW_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
 800c05a:	4b3a      	ldr	r3, [pc, #232]	@ (800c144 <SecureElementPrintKeys+0x108>)
 800c05c:	2200      	movs	r2, #0
 800c05e:	2100      	movs	r1, #0
 800c060:	2002      	movs	r0, #2
 800c062:	f00f fbb7 	bl	801b7d4 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_S_KEY);
 800c066:	2003      	movs	r0, #3
 800c068:	f7ff fe00 	bl	800bc6c <PrintKey>
    PrintKey(NWK_S_KEY);
 800c06c:	2002      	movs	r0, #2
 800c06e:	f7ff fdfd 	bl	800bc6c <PrintKey>
#endif /* KEY_EXTRACTABLE */
    MW_LOG(TS_OFF, VLEVEL_M, "###### IDs  ######\r\n");
 800c072:	4b35      	ldr	r3, [pc, #212]	@ (800c148 <SecureElementPrintKeys+0x10c>)
 800c074:	2200      	movs	r2, #0
 800c076:	2100      	movs	r1, #0
 800c078:	2002      	movs	r0, #2
 800c07a:	f00f fbab 	bl	801b7d4 <UTIL_ADV_TRACE_COND_FSend>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevEui:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800c07e:	4b33      	ldr	r3, [pc, #204]	@ (800c14c <SecureElementPrintKeys+0x110>)
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	781b      	ldrb	r3, [r3, #0]
 800c084:	461a      	mov	r2, r3
 800c086:	4b31      	ldr	r3, [pc, #196]	@ (800c14c <SecureElementPrintKeys+0x110>)
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	785b      	ldrb	r3, [r3, #1]
 800c08c:	4619      	mov	r1, r3
 800c08e:	4b2f      	ldr	r3, [pc, #188]	@ (800c14c <SecureElementPrintKeys+0x110>)
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	789b      	ldrb	r3, [r3, #2]
 800c094:	4618      	mov	r0, r3
 800c096:	4b2d      	ldr	r3, [pc, #180]	@ (800c14c <SecureElementPrintKeys+0x110>)
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	78db      	ldrb	r3, [r3, #3]
 800c09c:	461c      	mov	r4, r3
 800c09e:	4b2b      	ldr	r3, [pc, #172]	@ (800c14c <SecureElementPrintKeys+0x110>)
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	791b      	ldrb	r3, [r3, #4]
 800c0a4:	461d      	mov	r5, r3
 800c0a6:	4b29      	ldr	r3, [pc, #164]	@ (800c14c <SecureElementPrintKeys+0x110>)
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	795b      	ldrb	r3, [r3, #5]
 800c0ac:	461e      	mov	r6, r3
 800c0ae:	4b27      	ldr	r3, [pc, #156]	@ (800c14c <SecureElementPrintKeys+0x110>)
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	799b      	ldrb	r3, [r3, #6]
 800c0b4:	607b      	str	r3, [r7, #4]
 800c0b6:	4b25      	ldr	r3, [pc, #148]	@ (800c14c <SecureElementPrintKeys+0x110>)
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	79db      	ldrb	r3, [r3, #7]
 800c0bc:	9307      	str	r3, [sp, #28]
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	9306      	str	r3, [sp, #24]
 800c0c2:	9605      	str	r6, [sp, #20]
 800c0c4:	9504      	str	r5, [sp, #16]
 800c0c6:	9403      	str	r4, [sp, #12]
 800c0c8:	9002      	str	r0, [sp, #8]
 800c0ca:	9101      	str	r1, [sp, #4]
 800c0cc:	9200      	str	r2, [sp, #0]
 800c0ce:	4b20      	ldr	r3, [pc, #128]	@ (800c150 <SecureElementPrintKeys+0x114>)
 800c0d0:	2200      	movs	r2, #0
 800c0d2:	2100      	movs	r1, #0
 800c0d4:	2002      	movs	r0, #2
 800c0d6:	f00f fb7d 	bl	801b7d4 <UTIL_ADV_TRACE_COND_FSend>
           HEX8(SeNvm->DevEui));
    MW_LOG(TS_OFF, VLEVEL_M, "###### AppEui:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800c0da:	4b1c      	ldr	r3, [pc, #112]	@ (800c14c <SecureElementPrintKeys+0x110>)
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	7a1b      	ldrb	r3, [r3, #8]
 800c0e0:	461a      	mov	r2, r3
 800c0e2:	4b1a      	ldr	r3, [pc, #104]	@ (800c14c <SecureElementPrintKeys+0x110>)
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	7a5b      	ldrb	r3, [r3, #9]
 800c0e8:	4619      	mov	r1, r3
 800c0ea:	4b18      	ldr	r3, [pc, #96]	@ (800c14c <SecureElementPrintKeys+0x110>)
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	7a9b      	ldrb	r3, [r3, #10]
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	4b16      	ldr	r3, [pc, #88]	@ (800c14c <SecureElementPrintKeys+0x110>)
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	7adb      	ldrb	r3, [r3, #11]
 800c0f8:	461c      	mov	r4, r3
 800c0fa:	4b14      	ldr	r3, [pc, #80]	@ (800c14c <SecureElementPrintKeys+0x110>)
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	7b1b      	ldrb	r3, [r3, #12]
 800c100:	461d      	mov	r5, r3
 800c102:	4b12      	ldr	r3, [pc, #72]	@ (800c14c <SecureElementPrintKeys+0x110>)
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	7b5b      	ldrb	r3, [r3, #13]
 800c108:	461e      	mov	r6, r3
 800c10a:	4b10      	ldr	r3, [pc, #64]	@ (800c14c <SecureElementPrintKeys+0x110>)
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	7b9b      	ldrb	r3, [r3, #14]
 800c110:	607b      	str	r3, [r7, #4]
 800c112:	4b0e      	ldr	r3, [pc, #56]	@ (800c14c <SecureElementPrintKeys+0x110>)
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	7bdb      	ldrb	r3, [r3, #15]
 800c118:	9307      	str	r3, [sp, #28]
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	9306      	str	r3, [sp, #24]
 800c11e:	9605      	str	r6, [sp, #20]
 800c120:	9504      	str	r5, [sp, #16]
 800c122:	9403      	str	r4, [sp, #12]
 800c124:	9002      	str	r0, [sp, #8]
 800c126:	9101      	str	r1, [sp, #4]
 800c128:	9200      	str	r2, [sp, #0]
 800c12a:	4b0a      	ldr	r3, [pc, #40]	@ (800c154 <SecureElementPrintKeys+0x118>)
 800c12c:	2200      	movs	r2, #0
 800c12e:	2100      	movs	r1, #0
 800c130:	2002      	movs	r0, #2
 800c132:	f00f fb4f 	bl	801b7d4 <UTIL_ADV_TRACE_COND_FSend>
           HEX8(SeNvm->JoinEui));
    return SECURE_ELEMENT_SUCCESS;
 800c136:	2300      	movs	r3, #0
}
 800c138:	4618      	mov	r0, r3
 800c13a:	370c      	adds	r7, #12
 800c13c:	46bd      	mov	sp, r7
 800c13e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c140:	0801ee5c 	.word	0x0801ee5c
 800c144:	0801ee74 	.word	0x0801ee74
 800c148:	0801ee8c 	.word	0x0801ee8c
 800c14c:	2000073c 	.word	0x2000073c
 800c150:	0801eea4 	.word	0x0801eea4
 800c154:	0801eee4 	.word	0x0801eee4

0800c158 <SecureElementPrintSessionKeys>:
    
SecureElementStatus_t SecureElementPrintSessionKeys( void )
{
 800c158:	b580      	push	{r7, lr}
 800c15a:	af00      	add	r7, sp, #0
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    PrintKey(MC_ROOT_KEY);
 800c15c:	2004      	movs	r0, #4
 800c15e:	f7ff fd85 	bl	800bc6c <PrintKey>
    PrintKey(MC_KE_KEY);
 800c162:	207f      	movs	r0, #127	@ 0x7f
 800c164:	f7ff fd82 	bl	800bc6c <PrintKey>
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    PrintKey(F_NWK_S_INT_KEY);
    PrintKey(S_NWK_S_INT_KEY);
    PrintKey(NWK_S_ENC_KEY);
#else
    PrintKey(NWK_S_KEY);
 800c168:	2002      	movs	r0, #2
 800c16a:	f7ff fd7f 	bl	800bc6c <PrintKey>
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    PrintKey(APP_S_KEY);
 800c16e:	2003      	movs	r0, #3
 800c170:	f7ff fd7c 	bl	800bc6c <PrintKey>
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_SUCCESS;
 800c174:	2300      	movs	r3, #0
}
 800c176:	4618      	mov	r0, r3
 800c178:	bd80      	pop	{r7, pc}
	...

0800c17c <SecureElementSetKey>:
#endif /* LORAWAN_KMS */
}
/* ST_WORKAROUND_END */

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 800c17c:	b580      	push	{r7, lr}
 800c17e:	b088      	sub	sp, #32
 800c180:	af00      	add	r7, sp, #0
 800c182:	4603      	mov	r3, r0
 800c184:	6039      	str	r1, [r7, #0]
 800c186:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800c188:	683b      	ldr	r3, [r7, #0]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d101      	bne.n	800c192 <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c18e:	2302      	movs	r3, #2
 800c190:	e04b      	b.n	800c22a <SecureElementSetKey+0xae>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800c192:	2300      	movs	r3, #0
 800c194:	77fb      	strb	r3, [r7, #31]
 800c196:	e044      	b.n	800c222 <SecureElementSetKey+0xa6>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800c198:	4b26      	ldr	r3, [pc, #152]	@ (800c234 <SecureElementSetKey+0xb8>)
 800c19a:	6819      	ldr	r1, [r3, #0]
 800c19c:	7ffa      	ldrb	r2, [r7, #31]
 800c19e:	4613      	mov	r3, r2
 800c1a0:	011b      	lsls	r3, r3, #4
 800c1a2:	4413      	add	r3, r2
 800c1a4:	440b      	add	r3, r1
 800c1a6:	3310      	adds	r3, #16
 800c1a8:	781b      	ldrb	r3, [r3, #0]
 800c1aa:	79fa      	ldrb	r2, [r7, #7]
 800c1ac:	429a      	cmp	r2, r3
 800c1ae:	d135      	bne.n	800c21c <SecureElementSetKey+0xa0>
        {
            /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if ( keyID == MC_KEY_0 )
 800c1b0:	79fb      	ldrb	r3, [r7, #7]
 800c1b2:	2b80      	cmp	r3, #128	@ 0x80
 800c1b4:	d122      	bne.n	800c1fc <SecureElementSetKey+0x80>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            /* ST_WORKAROUND_END */
            {  // Decrypt the key if its a Mckey
                SecureElementStatus_t retval           = SECURE_ELEMENT_ERROR;
 800c1b6:	2306      	movs	r3, #6
 800c1b8:	77bb      	strb	r3, [r7, #30]
                uint8_t               decryptedKey[16] = { 0 };
 800c1ba:	f107 030c 	add.w	r3, r7, #12
 800c1be:	2200      	movs	r2, #0
 800c1c0:	601a      	str	r2, [r3, #0]
 800c1c2:	605a      	str	r2, [r3, #4]
 800c1c4:	609a      	str	r2, [r3, #8]
 800c1c6:	60da      	str	r2, [r3, #12]

                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 800c1c8:	f107 030c 	add.w	r3, r7, #12
 800c1cc:	227f      	movs	r2, #127	@ 0x7f
 800c1ce:	2110      	movs	r1, #16
 800c1d0:	6838      	ldr	r0, [r7, #0]
 800c1d2:	f000 f87e 	bl	800c2d2 <SecureElementAesEncrypt>
 800c1d6:	4603      	mov	r3, r0
 800c1d8:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800c1da:	4b16      	ldr	r3, [pc, #88]	@ (800c234 <SecureElementSetKey+0xb8>)
 800c1dc:	6819      	ldr	r1, [r3, #0]
 800c1de:	7ffa      	ldrb	r2, [r7, #31]
 800c1e0:	4613      	mov	r3, r2
 800c1e2:	011b      	lsls	r3, r3, #4
 800c1e4:	4413      	add	r3, r2
 800c1e6:	3310      	adds	r3, #16
 800c1e8:	440b      	add	r3, r1
 800c1ea:	3301      	adds	r3, #1
 800c1ec:	f107 010c 	add.w	r1, r7, #12
 800c1f0:	2210      	movs	r2, #16
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	f00a ff97 	bl	8017126 <memcpy1>
                return retval;
 800c1f8:	7fbb      	ldrb	r3, [r7, #30]
 800c1fa:	e016      	b.n	800c22a <SecureElementSetKey+0xae>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800c1fc:	4b0d      	ldr	r3, [pc, #52]	@ (800c234 <SecureElementSetKey+0xb8>)
 800c1fe:	6819      	ldr	r1, [r3, #0]
 800c200:	7ffa      	ldrb	r2, [r7, #31]
 800c202:	4613      	mov	r3, r2
 800c204:	011b      	lsls	r3, r3, #4
 800c206:	4413      	add	r3, r2
 800c208:	3310      	adds	r3, #16
 800c20a:	440b      	add	r3, r1
 800c20c:	3301      	adds	r3, #1
 800c20e:	2210      	movs	r2, #16
 800c210:	6839      	ldr	r1, [r7, #0]
 800c212:	4618      	mov	r0, r3
 800c214:	f00a ff87 	bl	8017126 <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800c218:	2300      	movs	r3, #0
 800c21a:	e006      	b.n	800c22a <SecureElementSetKey+0xae>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800c21c:	7ffb      	ldrb	r3, [r7, #31]
 800c21e:	3301      	adds	r3, #1
 800c220:	77fb      	strb	r3, [r7, #31]
 800c222:	7ffb      	ldrb	r3, [r7, #31]
 800c224:	2b09      	cmp	r3, #9
 800c226:	d9b7      	bls.n	800c198 <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800c228:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800c22a:	4618      	mov	r0, r3
 800c22c:	3720      	adds	r7, #32
 800c22e:	46bd      	mov	sp, r7
 800c230:	bd80      	pop	{r7, pc}
 800c232:	bf00      	nop
 800c234:	2000073c 	.word	0x2000073c

0800c238 <SecureElementComputeAesCmac>:

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size,
                                                   KeyIdentifier_t keyID, uint32_t* cmac )
{
 800c238:	b580      	push	{r7, lr}
 800c23a:	b086      	sub	sp, #24
 800c23c:	af02      	add	r7, sp, #8
 800c23e:	60f8      	str	r0, [r7, #12]
 800c240:	60b9      	str	r1, [r7, #8]
 800c242:	4611      	mov	r1, r2
 800c244:	461a      	mov	r2, r3
 800c246:	460b      	mov	r3, r1
 800c248:	80fb      	strh	r3, [r7, #6]
 800c24a:	4613      	mov	r3, r2
 800c24c:	717b      	strb	r3, [r7, #5]
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 800c24e:	797b      	ldrb	r3, [r7, #5]
 800c250:	2b7e      	cmp	r3, #126	@ 0x7e
 800c252:	d901      	bls.n	800c258 <SecureElementComputeAesCmac+0x20>
    {
        // Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800c254:	2303      	movs	r3, #3
 800c256:	e009      	b.n	800c26c <SecureElementComputeAesCmac+0x34>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800c258:	7979      	ldrb	r1, [r7, #5]
 800c25a:	88fa      	ldrh	r2, [r7, #6]
 800c25c:	69bb      	ldr	r3, [r7, #24]
 800c25e:	9300      	str	r3, [sp, #0]
 800c260:	460b      	mov	r3, r1
 800c262:	68b9      	ldr	r1, [r7, #8]
 800c264:	68f8      	ldr	r0, [r7, #12]
 800c266:	f7ff fe13 	bl	800be90 <ComputeCmac>
 800c26a:	4603      	mov	r3, r0
}
 800c26c:	4618      	mov	r0, r3
 800c26e:	3710      	adds	r7, #16
 800c270:	46bd      	mov	sp, r7
 800c272:	bd80      	pop	{r7, pc}

0800c274 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800c274:	b580      	push	{r7, lr}
 800c276:	b088      	sub	sp, #32
 800c278:	af02      	add	r7, sp, #8
 800c27a:	60f8      	str	r0, [r7, #12]
 800c27c:	607a      	str	r2, [r7, #4]
 800c27e:	461a      	mov	r2, r3
 800c280:	460b      	mov	r3, r1
 800c282:	817b      	strh	r3, [r7, #10]
 800c284:	4613      	mov	r3, r2
 800c286:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL )
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d101      	bne.n	800c292 <SecureElementVerifyAesCmac+0x1e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c28e:	2302      	movs	r3, #2
 800c290:	e01b      	b.n	800c2ca <SecureElementVerifyAesCmac+0x56>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 800c292:	2306      	movs	r3, #6
 800c294:	75fb      	strb	r3, [r7, #23]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint32_t              compCmac = 0;
 800c296:	2300      	movs	r3, #0
 800c298:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800c29a:	7a79      	ldrb	r1, [r7, #9]
 800c29c:	897a      	ldrh	r2, [r7, #10]
 800c29e:	f107 0310 	add.w	r3, r7, #16
 800c2a2:	9300      	str	r3, [sp, #0]
 800c2a4:	460b      	mov	r3, r1
 800c2a6:	68f9      	ldr	r1, [r7, #12]
 800c2a8:	2000      	movs	r0, #0
 800c2aa:	f7ff fdf1 	bl	800be90 <ComputeCmac>
 800c2ae:	4603      	mov	r3, r0
 800c2b0:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800c2b2:	7dfb      	ldrb	r3, [r7, #23]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d001      	beq.n	800c2bc <SecureElementVerifyAesCmac+0x48>
    {
        return retval;
 800c2b8:	7dfb      	ldrb	r3, [r7, #23]
 800c2ba:	e006      	b.n	800c2ca <SecureElementVerifyAesCmac+0x56>
    }

    if( expectedCmac != compCmac )
 800c2bc:	693b      	ldr	r3, [r7, #16]
 800c2be:	687a      	ldr	r2, [r7, #4]
 800c2c0:	429a      	cmp	r2, r3
 800c2c2:	d001      	beq.n	800c2c8 <SecureElementVerifyAesCmac+0x54>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800c2c4:	2301      	movs	r3, #1
 800c2c6:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 800c2c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	3718      	adds	r7, #24
 800c2ce:	46bd      	mov	sp, r7
 800c2d0:	bd80      	pop	{r7, pc}

0800c2d2 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                               uint8_t* encBuffer )
{
 800c2d2:	b580      	push	{r7, lr}
 800c2d4:	b0c2      	sub	sp, #264	@ 0x108
 800c2d6:	af00      	add	r7, sp, #0
 800c2d8:	60f8      	str	r0, [r7, #12]
 800c2da:	4608      	mov	r0, r1
 800c2dc:	4611      	mov	r1, r2
 800c2de:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800c2e2:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800c2e6:	6013      	str	r3, [r2, #0]
 800c2e8:	4603      	mov	r3, r0
 800c2ea:	817b      	strh	r3, [r7, #10]
 800c2ec:	460b      	mov	r3, r1
 800c2ee:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL || encBuffer == NULL )
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d006      	beq.n	800c304 <SecureElementAesEncrypt+0x32>
 800c2f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c2fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	2b00      	cmp	r3, #0
 800c302:	d101      	bne.n	800c308 <SecureElementAesEncrypt+0x36>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c304:	2302      	movs	r3, #2
 800c306:	e046      	b.n	800c396 <SecureElementAesEncrypt+0xc4>
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 800c308:	897b      	ldrh	r3, [r7, #10]
 800c30a:	f003 030f 	and.w	r3, r3, #15
 800c30e:	b29b      	uxth	r3, r3
 800c310:	2b00      	cmp	r3, #0
 800c312:	d001      	beq.n	800c318 <SecureElementAesEncrypt+0x46>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800c314:	2305      	movs	r3, #5
 800c316:	e03e      	b.n	800c396 <SecureElementAesEncrypt+0xc4>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800c318:	f107 0314 	add.w	r3, r7, #20
 800c31c:	22f0      	movs	r2, #240	@ 0xf0
 800c31e:	2100      	movs	r1, #0
 800c320:	4618      	mov	r0, r3
 800c322:	f00a ff3b 	bl	801719c <memset1>

    Key_t*                pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800c326:	f107 0210 	add.w	r2, r7, #16
 800c32a:	7a7b      	ldrb	r3, [r7, #9]
 800c32c:	4611      	mov	r1, r2
 800c32e:	4618      	mov	r0, r3
 800c330:	f7ff fd7e 	bl	800be30 <GetKeyByID>
 800c334:	4603      	mov	r3, r0
 800c336:	f887 3106 	strb.w	r3, [r7, #262]	@ 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 800c33a:	f897 3106 	ldrb.w	r3, [r7, #262]	@ 0x106
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d127      	bne.n	800c392 <SecureElementAesEncrypt+0xc0>
    {
        lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 800c342:	693b      	ldr	r3, [r7, #16]
 800c344:	3301      	adds	r3, #1
 800c346:	f107 0214 	add.w	r2, r7, #20
 800c34a:	2110      	movs	r1, #16
 800c34c:	4618      	mov	r0, r3
 800c34e:	f7ff fb65 	bl	800ba1c <lorawan_aes_set_key>

        uint8_t block = 0;
 800c352:	2300      	movs	r3, #0
 800c354:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107

        while( size != 0 )
 800c358:	e018      	b.n	800c38c <SecureElementAesEncrypt+0xba>
        {
            lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 800c35a:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800c35e:	68fa      	ldr	r2, [r7, #12]
 800c360:	18d0      	adds	r0, r2, r3
 800c362:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800c366:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800c36a:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800c36e:	6812      	ldr	r2, [r2, #0]
 800c370:	4413      	add	r3, r2
 800c372:	f107 0214 	add.w	r2, r7, #20
 800c376:	4619      	mov	r1, r3
 800c378:	f7ff fc2e 	bl	800bbd8 <lorawan_aes_encrypt>
            block = block + 16;
 800c37c:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800c380:	3310      	adds	r3, #16
 800c382:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
            size  = size - 16;
 800c386:	897b      	ldrh	r3, [r7, #10]
 800c388:	3b10      	subs	r3, #16
 800c38a:	817b      	strh	r3, [r7, #10]
        while( size != 0 )
 800c38c:	897b      	ldrh	r3, [r7, #10]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d1e3      	bne.n	800c35a <SecureElementAesEncrypt+0x88>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 800c392:	f897 3106 	ldrb.w	r3, [r7, #262]	@ 0x106
}
 800c396:	4618      	mov	r0, r3
 800c398:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800c39c:	46bd      	mov	sp, r7
 800c39e:	bd80      	pop	{r7, pc}

0800c3a0 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t* input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800c3a0:	b580      	push	{r7, lr}
 800c3a2:	b088      	sub	sp, #32
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	6078      	str	r0, [r7, #4]
 800c3a8:	460b      	mov	r3, r1
 800c3aa:	70fb      	strb	r3, [r7, #3]
 800c3ac:	4613      	mov	r3, r2
 800c3ae:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d101      	bne.n	800c3ba <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c3b6:	2302      	movs	r3, #2
 800c3b8:	e02d      	b.n	800c416 <SecureElementDeriveAndStoreKey+0x76>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 800c3ba:	2306      	movs	r3, #6
 800c3bc:	77fb      	strb	r3, [r7, #31]

    // In case of MC_KE_KEY, only McRootKey can be used as root key
    if( targetKeyID == MC_KE_KEY )
 800c3be:	78bb      	ldrb	r3, [r7, #2]
 800c3c0:	2b7f      	cmp	r3, #127	@ 0x7f
 800c3c2:	d104      	bne.n	800c3ce <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800c3c4:	78fb      	ldrb	r3, [r7, #3]
 800c3c6:	2b04      	cmp	r3, #4
 800c3c8:	d001      	beq.n	800c3ce <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800c3ca:	2303      	movs	r3, #3
 800c3cc:	e023      	b.n	800c416 <SecureElementDeriveAndStoreKey+0x76>
        }
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t key[16] = { 0 };
 800c3ce:	f107 030c 	add.w	r3, r7, #12
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	601a      	str	r2, [r3, #0]
 800c3d6:	605a      	str	r2, [r3, #4]
 800c3d8:	609a      	str	r2, [r3, #8]
 800c3da:	60da      	str	r2, [r3, #12]
    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 800c3dc:	f107 030c 	add.w	r3, r7, #12
 800c3e0:	78fa      	ldrb	r2, [r7, #3]
 800c3e2:	2110      	movs	r1, #16
 800c3e4:	6878      	ldr	r0, [r7, #4]
 800c3e6:	f7ff ff74 	bl	800c2d2 <SecureElementAesEncrypt>
 800c3ea:	4603      	mov	r3, r0
 800c3ec:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800c3ee:	7ffb      	ldrb	r3, [r7, #31]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d001      	beq.n	800c3f8 <SecureElementDeriveAndStoreKey+0x58>
    {
        return retval;
 800c3f4:	7ffb      	ldrb	r3, [r7, #31]
 800c3f6:	e00e      	b.n	800c416 <SecureElementDeriveAndStoreKey+0x76>
    }

    // Store key
    retval = SecureElementSetKey( targetKeyID, key );
 800c3f8:	f107 020c 	add.w	r2, r7, #12
 800c3fc:	78bb      	ldrb	r3, [r7, #2]
 800c3fe:	4611      	mov	r1, r2
 800c400:	4618      	mov	r0, r3
 800c402:	f7ff febb 	bl	800c17c <SecureElementSetKey>
 800c406:	4603      	mov	r3, r0
 800c408:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800c40a:	7ffb      	ldrb	r3, [r7, #31]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d001      	beq.n	800c414 <SecureElementDeriveAndStoreKey+0x74>
    {
        return retval;
 800c410:	7ffb      	ldrb	r3, [r7, #31]
 800c412:	e000      	b.n	800c416 <SecureElementDeriveAndStoreKey+0x76>
    }

    return SECURE_ELEMENT_SUCCESS;
 800c414:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800c416:	4618      	mov	r0, r3
 800c418:	3720      	adds	r7, #32
 800c41a:	46bd      	mov	sp, r7
 800c41c:	bd80      	pop	{r7, pc}

0800c41e <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEui,
                                                      uint16_t devNonce, uint8_t* encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t* decJoinAccept,
                                                      uint8_t* versionMinor )
{
 800c41e:	b580      	push	{r7, lr}
 800c420:	b086      	sub	sp, #24
 800c422:	af00      	add	r7, sp, #0
 800c424:	60b9      	str	r1, [r7, #8]
 800c426:	607b      	str	r3, [r7, #4]
 800c428:	4603      	mov	r3, r0
 800c42a:	73fb      	strb	r3, [r7, #15]
 800c42c:	4613      	mov	r3, r2
 800c42e:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	2b00      	cmp	r3, #0
 800c434:	d005      	beq.n	800c442 <SecureElementProcessJoinAccept+0x24>
 800c436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d002      	beq.n	800c442 <SecureElementProcessJoinAccept+0x24>
 800c43c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d101      	bne.n	800c446 <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c442:	2302      	movs	r3, #2
 800c444:	e064      	b.n	800c510 <SecureElementProcessJoinAccept+0xf2>
    }

    // Check that frame size isn't bigger than a JoinAccept with CFList size
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800c446:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c44a:	2b21      	cmp	r3, #33	@ 0x21
 800c44c:	d901      	bls.n	800c452 <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800c44e:	2305      	movs	r3, #5
 800c450:	e05e      	b.n	800c510 <SecureElementProcessJoinAccept+0xf2>
    }

    // Determine decryption key
    KeyIdentifier_t encKeyID = NWK_KEY;
 800c452:	2301      	movs	r3, #1
 800c454:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800c456:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c45a:	b29b      	uxth	r3, r3
 800c45c:	461a      	mov	r2, r3
 800c45e:	6879      	ldr	r1, [r7, #4]
 800c460:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c462:	f00a fe60 	bl	8017126 <memcpy1>

    // Decrypt JoinAccept, skip MHDR
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	1c58      	adds	r0, r3, #1
 800c46a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c46e:	b29b      	uxth	r3, r3
 800c470:	3b01      	subs	r3, #1
 800c472:	b299      	uxth	r1, r3
 800c474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c476:	3301      	adds	r3, #1
 800c478:	7dfa      	ldrb	r2, [r7, #23]
 800c47a:	f7ff ff2a 	bl	800c2d2 <SecureElementAesEncrypt>
 800c47e:	4603      	mov	r3, r0
 800c480:	2b00      	cmp	r3, #0
 800c482:	d001      	beq.n	800c488 <SecureElementProcessJoinAccept+0x6a>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800c484:	2307      	movs	r3, #7
 800c486:	e043      	b.n	800c510 <SecureElementProcessJoinAccept+0xf2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800c488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c48a:	330b      	adds	r3, #11
 800c48c:	781b      	ldrb	r3, [r3, #0]
 800c48e:	09db      	lsrs	r3, r3, #7
 800c490:	b2da      	uxtb	r2, r3
 800c492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c494:	701a      	strb	r2, [r3, #0]

    uint32_t mic = 0;
 800c496:	2300      	movs	r3, #0
 800c498:	613b      	str	r3, [r7, #16]

    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
 800c49a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c49e:	3b04      	subs	r3, #4
 800c4a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c4a2:	4413      	add	r3, r2
 800c4a4:	781b      	ldrb	r3, [r3, #0]
 800c4a6:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
 800c4a8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c4ac:	3b03      	subs	r3, #3
 800c4ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c4b0:	4413      	add	r3, r2
 800c4b2:	781b      	ldrb	r3, [r3, #0]
 800c4b4:	021b      	lsls	r3, r3, #8
 800c4b6:	693a      	ldr	r2, [r7, #16]
 800c4b8:	4313      	orrs	r3, r2
 800c4ba:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 800c4bc:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c4c0:	3b02      	subs	r3, #2
 800c4c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c4c4:	4413      	add	r3, r2
 800c4c6:	781b      	ldrb	r3, [r3, #0]
 800c4c8:	041b      	lsls	r3, r3, #16
 800c4ca:	693a      	ldr	r2, [r7, #16]
 800c4cc:	4313      	orrs	r3, r2
 800c4ce:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 800c4d0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c4d4:	3b01      	subs	r3, #1
 800c4d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c4d8:	4413      	add	r3, r2
 800c4da:	781b      	ldrb	r3, [r3, #0]
 800c4dc:	061b      	lsls	r3, r3, #24
 800c4de:	693a      	ldr	r2, [r7, #16]
 800c4e0:	4313      	orrs	r3, r2
 800c4e2:	613b      	str	r3, [r7, #16]
    //  - Header buffer to be used for MIC computation
    //        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
    //        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]

    // Verify mic
    if( *versionMinor == 0 )
 800c4e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4e6:	781b      	ldrb	r3, [r3, #0]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d10e      	bne.n	800c50a <SecureElementProcessJoinAccept+0xec>
    {
        // For LoRaWAN 1.0.x
        //   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
        //   CFListType)
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800c4ec:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c4f0:	b29b      	uxth	r3, r3
 800c4f2:	3b04      	subs	r3, #4
 800c4f4:	b299      	uxth	r1, r3
 800c4f6:	2301      	movs	r3, #1
 800c4f8:	693a      	ldr	r2, [r7, #16]
 800c4fa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c4fc:	f7ff feba 	bl	800c274 <SecureElementVerifyAesCmac>
 800c500:	4603      	mov	r3, r0
 800c502:	2b00      	cmp	r3, #0
 800c504:	d003      	beq.n	800c50e <SecureElementProcessJoinAccept+0xf0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800c506:	2301      	movs	r3, #1
 800c508:	e002      	b.n	800c510 <SecureElementProcessJoinAccept+0xf2>
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800c50a:	2304      	movs	r3, #4
 800c50c:	e000      	b.n	800c510 <SecureElementProcessJoinAccept+0xf2>
    }

    return SECURE_ELEMENT_SUCCESS;
 800c50e:	2300      	movs	r3, #0
}
 800c510:	4618      	mov	r0, r3
 800c512:	3718      	adds	r7, #24
 800c514:	46bd      	mov	sp, r7
 800c516:	bd80      	pop	{r7, pc}

0800c518 <SecureElementSetDevEui>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
 800c518:	b580      	push	{r7, lr}
 800c51a:	b082      	sub	sp, #8
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	2b00      	cmp	r3, #0
 800c524:	d101      	bne.n	800c52a <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c526:	2302      	movs	r3, #2
 800c528:	e007      	b.n	800c53a <SecureElementSetDevEui+0x22>
    }
    memcpy1( SeNvm->DevEui, devEui, SE_EUI_SIZE );
 800c52a:	4b06      	ldr	r3, [pc, #24]	@ (800c544 <SecureElementSetDevEui+0x2c>)
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	2208      	movs	r2, #8
 800c530:	6879      	ldr	r1, [r7, #4]
 800c532:	4618      	mov	r0, r3
 800c534:	f00a fdf7 	bl	8017126 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800c538:	2300      	movs	r3, #0
}
 800c53a:	4618      	mov	r0, r3
 800c53c:	3708      	adds	r7, #8
 800c53e:	46bd      	mov	sp, r7
 800c540:	bd80      	pop	{r7, pc}
 800c542:	bf00      	nop
 800c544:	2000073c 	.word	0x2000073c

0800c548 <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
 800c548:	b480      	push	{r7}
 800c54a:	af00      	add	r7, sp, #0
    return SeNvm->DevEui;
 800c54c:	4b02      	ldr	r3, [pc, #8]	@ (800c558 <SecureElementGetDevEui+0x10>)
 800c54e:	681b      	ldr	r3, [r3, #0]
}
 800c550:	4618      	mov	r0, r3
 800c552:	46bd      	mov	sp, r7
 800c554:	bc80      	pop	{r7}
 800c556:	4770      	bx	lr
 800c558:	2000073c 	.word	0x2000073c

0800c55c <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
 800c55c:	b580      	push	{r7, lr}
 800c55e:	b082      	sub	sp, #8
 800c560:	af00      	add	r7, sp, #0
 800c562:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d101      	bne.n	800c56e <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c56a:	2302      	movs	r3, #2
 800c56c:	e008      	b.n	800c580 <SecureElementSetJoinEui+0x24>
    }
    memcpy1( SeNvm->JoinEui, joinEui, SE_EUI_SIZE );
 800c56e:	4b06      	ldr	r3, [pc, #24]	@ (800c588 <SecureElementSetJoinEui+0x2c>)
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	3308      	adds	r3, #8
 800c574:	2208      	movs	r2, #8
 800c576:	6879      	ldr	r1, [r7, #4]
 800c578:	4618      	mov	r0, r3
 800c57a:	f00a fdd4 	bl	8017126 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800c57e:	2300      	movs	r3, #0
}
 800c580:	4618      	mov	r0, r3
 800c582:	3708      	adds	r7, #8
 800c584:	46bd      	mov	sp, r7
 800c586:	bd80      	pop	{r7, pc}
 800c588:	2000073c 	.word	0x2000073c

0800c58c <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
 800c58c:	b480      	push	{r7}
 800c58e:	af00      	add	r7, sp, #0
    return SeNvm->JoinEui;
 800c590:	4b03      	ldr	r3, [pc, #12]	@ (800c5a0 <SecureElementGetJoinEui+0x14>)
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	3308      	adds	r3, #8
}
 800c596:	4618      	mov	r0, r3
 800c598:	46bd      	mov	sp, r7
 800c59a:	bc80      	pop	{r7}
 800c59c:	4770      	bx	lr
 800c59e:	bf00      	nop
 800c5a0:	2000073c 	.word	0x2000073c

0800c5a4 <LmHandlerInit>:
 */
static bool LmHandlerPackageIsInitialized(uint8_t id);

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks, uint32_t fwVersion )
{
 800c5a4:	b580      	push	{r7, lr}
 800c5a6:	b082      	sub	sp, #8
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	6078      	str	r0, [r7, #4]
 800c5ac:	6039      	str	r1, [r7, #0]
    LmHandlerCallbacks = handlerCallbacks;
 800c5ae:	4a23      	ldr	r2, [pc, #140]	@ (800c63c <LmHandlerInit+0x98>)
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800c5b4:	4b22      	ldr	r3, [pc, #136]	@ (800c640 <LmHandlerInit+0x9c>)
 800c5b6:	4a23      	ldr	r2, [pc, #140]	@ (800c644 <LmHandlerInit+0xa0>)
 800c5b8:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800c5ba:	4b21      	ldr	r3, [pc, #132]	@ (800c640 <LmHandlerInit+0x9c>)
 800c5bc:	4a22      	ldr	r2, [pc, #136]	@ (800c648 <LmHandlerInit+0xa4>)
 800c5be:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800c5c0:	4b1f      	ldr	r3, [pc, #124]	@ (800c640 <LmHandlerInit+0x9c>)
 800c5c2:	4a22      	ldr	r2, [pc, #136]	@ (800c64c <LmHandlerInit+0xa8>)
 800c5c4:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800c5c6:	4b1e      	ldr	r3, [pc, #120]	@ (800c640 <LmHandlerInit+0x9c>)
 800c5c8:	4a21      	ldr	r2, [pc, #132]	@ (800c650 <LmHandlerInit+0xac>)
 800c5ca:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800c5cc:	4b1b      	ldr	r3, [pc, #108]	@ (800c63c <LmHandlerInit+0x98>)
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	4a20      	ldr	r2, [pc, #128]	@ (800c654 <LmHandlerInit+0xb0>)
 800c5d4:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800c5d6:	4b19      	ldr	r3, [pc, #100]	@ (800c63c <LmHandlerInit+0x98>)
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	685b      	ldr	r3, [r3, #4]
 800c5dc:	4a1d      	ldr	r2, [pc, #116]	@ (800c654 <LmHandlerInit+0xb0>)
 800c5de:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800c5e0:	4b16      	ldr	r3, [pc, #88]	@ (800c63c <LmHandlerInit+0x98>)
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	689b      	ldr	r3, [r3, #8]
 800c5e6:	4a1b      	ldr	r2, [pc, #108]	@ (800c654 <LmHandlerInit+0xb0>)
 800c5e8:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800c5ea:	4b1a      	ldr	r3, [pc, #104]	@ (800c654 <LmHandlerInit+0xb0>)
 800c5ec:	4a1a      	ldr	r2, [pc, #104]	@ (800c658 <LmHandlerInit+0xb4>)
 800c5ee:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800c5f0:	4b12      	ldr	r3, [pc, #72]	@ (800c63c <LmHandlerInit+0x98>)
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	699b      	ldr	r3, [r3, #24]
 800c5f6:	4a17      	ldr	r2, [pc, #92]	@ (800c654 <LmHandlerInit+0xb0>)
 800c5f8:	6113      	str	r3, [r2, #16]

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LmhpComplianceParams.FwVersion.Value = fwVersion;
 800c5fa:	4a18      	ldr	r2, [pc, #96]	@ (800c65c <LmHandlerInit+0xb8>)
 800c5fc:	683b      	ldr	r3, [r7, #0]
 800c5fe:	6013      	str	r3, [r2, #0]
    LmhpComplianceParams.OnTxPeriodicityChanged = LmHandlerCallbacks->OnTxPeriodicityChanged;
 800c600:	4b0e      	ldr	r3, [pc, #56]	@ (800c63c <LmHandlerInit+0x98>)
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c606:	4a15      	ldr	r2, [pc, #84]	@ (800c65c <LmHandlerInit+0xb8>)
 800c608:	6053      	str	r3, [r2, #4]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerCallbacks->OnTxFrameCtrlChanged;
 800c60a:	4b0c      	ldr	r3, [pc, #48]	@ (800c63c <LmHandlerInit+0x98>)
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c610:	4a12      	ldr	r2, [pc, #72]	@ (800c65c <LmHandlerInit+0xb8>)
 800c612:	6093      	str	r3, [r2, #8]
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerCallbacks->OnPingSlotPeriodicityChanged;
 800c614:	4b09      	ldr	r3, [pc, #36]	@ (800c63c <LmHandlerInit+0x98>)
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c61a:	4a10      	ldr	r2, [pc, #64]	@ (800c65c <LmHandlerInit+0xb8>)
 800c61c:	60d3      	str	r3, [r2, #12]
#endif /* LORAMAC_VERSION */

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 800c61e:	490f      	ldr	r1, [pc, #60]	@ (800c65c <LmHandlerInit+0xb8>)
 800c620:	2000      	movs	r0, #0
 800c622:	f000 fd87 	bl	800d134 <LmHandlerPackageRegister>
 800c626:	4603      	mov	r3, r0
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d002      	beq.n	800c632 <LmHandlerInit+0x8e>
    {
        return LORAMAC_HANDLER_ERROR;
 800c62c:	f04f 33ff 	mov.w	r3, #4294967295
 800c630:	e000      	b.n	800c634 <LmHandlerInit+0x90>
    if (LmhpPackagesRegistrationInit() != LORAMAC_HANDLER_SUCCESS)
    {
        return LORAMAC_HANDLER_ERROR;
    }
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
    return LORAMAC_HANDLER_SUCCESS;
 800c632:	2300      	movs	r3, #0
}
 800c634:	4618      	mov	r0, r3
 800c636:	3708      	adds	r7, #8
 800c638:	46bd      	mov	sp, r7
 800c63a:	bd80      	pop	{r7, pc}
 800c63c:	20000778 	.word	0x20000778
 800c640:	2000077c 	.word	0x2000077c
 800c644:	0800ce41 	.word	0x0800ce41
 800c648:	0800cea9 	.word	0x0800cea9
 800c64c:	0800cf75 	.word	0x0800cf75
 800c650:	0800d08d 	.word	0x0800d08d
 800c654:	2000078c 	.word	0x2000078c
 800c658:	0800d505 	.word	0x0800d505
 800c65c:	20000740 	.word	0x20000740

0800c660 <LmHandlerConfigure>:
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 800c660:	b580      	push	{r7, lr}
 800c662:	b094      	sub	sp, #80	@ 0x50
 800c664:	af04      	add	r7, sp, #16
 800c666:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 800c668:	2214      	movs	r2, #20
 800c66a:	6879      	ldr	r1, [r7, #4]
 800c66c:	4891      	ldr	r0, [pc, #580]	@ (800c8b4 <LmHandlerConfigure+0x254>)
 800c66e:	f00e f867 	bl	801a740 <UTIL_MEM_cpy_8>

#if ( LORAMAC_CLASSB_ENABLED == 1 )
    IsClassBSwitchPending = false;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    IsUplinkTxPending = false;
 800c672:	4b91      	ldr	r3, [pc, #580]	@ (800c8b8 <LmHandlerConfigure+0x258>)
 800c674:	2200      	movs	r2, #0
 800c676:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    loraInfo = LoraInfo_GetPtr();
 800c678:	f7fe fb0a 	bl	800ac90 <LoraInfo_GetPtr>
 800c67c:	63f8      	str	r0, [r7, #60]	@ 0x3c

    if (0U == ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 800c67e:	4b8d      	ldr	r3, [pc, #564]	@ (800c8b4 <LmHandlerConfigure+0x254>)
 800c680:	781b      	ldrb	r3, [r3, #0]
 800c682:	461a      	mov	r2, r3
 800c684:	2301      	movs	r3, #1
 800c686:	4093      	lsls	r3, r2
 800c688:	461a      	mov	r2, r3
 800c68a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c68c:	685b      	ldr	r3, [r3, #4]
 800c68e:	4013      	ands	r3, r2
 800c690:	2b00      	cmp	r3, #0
 800c692:	d107      	bne.n	800c6a4 <LmHandlerConfigure+0x44>
    {
        MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 800c694:	4b89      	ldr	r3, [pc, #548]	@ (800c8bc <LmHandlerConfigure+0x25c>)
 800c696:	2201      	movs	r2, #1
 800c698:	2100      	movs	r1, #0
 800c69a:	2000      	movs	r0, #0
 800c69c:	f00f f89a 	bl	801b7d4 <UTIL_ADV_TRACE_COND_FSend>
        while (1) {}  /* error: Region is not defined in the MW */
 800c6a0:	bf00      	nop
 800c6a2:	e7fd      	b.n	800c6a0 <LmHandlerConfigure+0x40>
    }

    if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 800c6a4:	4b83      	ldr	r3, [pc, #524]	@ (800c8b4 <LmHandlerConfigure+0x254>)
 800c6a6:	781b      	ldrb	r3, [r3, #0]
 800c6a8:	461a      	mov	r2, r3
 800c6aa:	4985      	ldr	r1, [pc, #532]	@ (800c8c0 <LmHandlerConfigure+0x260>)
 800c6ac:	4885      	ldr	r0, [pc, #532]	@ (800c8c4 <LmHandlerConfigure+0x264>)
 800c6ae:	f004 fe95 	bl	80113dc <LoRaMacInitialization>
 800c6b2:	4603      	mov	r3, r0
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d002      	beq.n	800c6be <LmHandlerConfigure+0x5e>
    {
        return LORAMAC_HANDLER_ERROR;
 800c6b8:	f04f 33ff 	mov.w	r3, #4294967295
 800c6bc:	e0f5      	b.n	800c8aa <LmHandlerConfigure+0x24a>
    }

    // Try the restore context from the Backup RAM structure if data retention is available
    mibReq.Type = MIB_NVM_CTXS;
 800c6be:	2327      	movs	r3, #39	@ 0x27
 800c6c0:	763b      	strb	r3, [r7, #24]
    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800c6c2:	f107 0318 	add.w	r3, r7, #24
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	f005 fbd8 	bl	8011e7c <LoRaMacMibSetRequestConfirm>
 800c6cc:	4603      	mov	r3, r0
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d103      	bne.n	800c6da <LmHandlerConfigure+0x7a>
    {
        CtxRestoreDone = true;
 800c6d2:	4b7d      	ldr	r3, [pc, #500]	@ (800c8c8 <LmHandlerConfigure+0x268>)
 800c6d4:	2201      	movs	r2, #1
 800c6d6:	701a      	strb	r2, [r3, #0]
 800c6d8:	e02a      	b.n	800c730 <LmHandlerConfigure+0xd0>
    }
    else
    {
        // Restore context data backup from user callback (stored in FLASH)
        mibReq.Type = MIB_NVM_BKP_CTXS;
 800c6da:	2328      	movs	r3, #40	@ 0x28
 800c6dc:	763b      	strb	r3, [r7, #24]
        if (LmHandlerCallbacks->OnRestoreContextRequest != NULL)
 800c6de:	4b7b      	ldr	r3, [pc, #492]	@ (800c8cc <LmHandlerConfigure+0x26c>)
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	691b      	ldr	r3, [r3, #16]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d00c      	beq.n	800c702 <LmHandlerConfigure+0xa2>
        {
            LoRaMacMibGetRequestConfirm( &mibReq );
 800c6e8:	f107 0318 	add.w	r3, r7, #24
 800c6ec:	4618      	mov	r0, r3
 800c6ee:	f005 fa1f 	bl	8011b30 <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest(mibReq.Param.BackupContexts, sizeof(LoRaMacNvmData_t));
 800c6f2:	4b76      	ldr	r3, [pc, #472]	@ (800c8cc <LmHandlerConfigure+0x26c>)
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	691b      	ldr	r3, [r3, #16]
 800c6f8:	69fa      	ldr	r2, [r7, #28]
 800c6fa:	f240 517c 	movw	r1, #1404	@ 0x57c
 800c6fe:	4610      	mov	r0, r2
 800c700:	4798      	blx	r3
        }
        // Restore context data from backup to main nvm structure
        mibReq.Type = MIB_NVM_CTXS;
 800c702:	2327      	movs	r3, #39	@ 0x27
 800c704:	763b      	strb	r3, [r7, #24]
        if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800c706:	f107 0318 	add.w	r3, r7, #24
 800c70a:	4618      	mov	r0, r3
 800c70c:	f005 fbb6 	bl	8011e7c <LoRaMacMibSetRequestConfirm>
 800c710:	4603      	mov	r3, r0
 800c712:	2b00      	cmp	r3, #0
 800c714:	d10c      	bne.n	800c730 <LmHandlerConfigure+0xd0>
        {
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 800c716:	2301      	movs	r3, #1
 800c718:	763b      	strb	r3, [r7, #24]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800c71a:	f107 0318 	add.w	r3, r7, #24
 800c71e:	4618      	mov	r0, r3
 800c720:	f005 fa06 	bl	8011b30 <LoRaMacMibGetRequestConfirm>
            if (mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE)
 800c724:	7f3b      	ldrb	r3, [r7, #28]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d002      	beq.n	800c730 <LmHandlerConfigure+0xd0>
            {
                CtxRestoreDone = true;
 800c72a:	4b67      	ldr	r3, [pc, #412]	@ (800c8c8 <LmHandlerConfigure+0x268>)
 800c72c:	2201      	movs	r2, #1
 800c72e:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    if (CtxRestoreDone == true)
 800c730:	4b65      	ldr	r3, [pc, #404]	@ (800c8c8 <LmHandlerConfigure+0x268>)
 800c732:	781b      	ldrb	r3, [r3, #0]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d02a      	beq.n	800c78e <LmHandlerConfigure+0x12e>
    {
        if ( LmHandlerCallbacks->OnNvmDataChange != NULL )
 800c738:	4b64      	ldr	r3, [pc, #400]	@ (800c8cc <LmHandlerConfigure+0x26c>)
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	69db      	ldr	r3, [r3, #28]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d004      	beq.n	800c74c <LmHandlerConfigure+0xec>
        {
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 800c742:	4b62      	ldr	r3, [pc, #392]	@ (800c8cc <LmHandlerConfigure+0x26c>)
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	69db      	ldr	r3, [r3, #28]
 800c748:	2000      	movs	r0, #0
 800c74a:	4798      	blx	r3
        }

        mibReq.Type = MIB_DEV_ADDR;
 800c74c:	2306      	movs	r3, #6
 800c74e:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800c750:	f107 0318 	add.w	r3, r7, #24
 800c754:	4618      	mov	r0, r3
 800c756:	f005 f9eb 	bl	8011b30 <LoRaMacMibGetRequestConfirm>
        CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800c75a:	69fb      	ldr	r3, [r7, #28]
 800c75c:	4a5c      	ldr	r2, [pc, #368]	@ (800c8d0 <LmHandlerConfigure+0x270>)
 800c75e:	6153      	str	r3, [r2, #20]

        mibReq.Type = MIB_NVM_CTXS;
 800c760:	2327      	movs	r3, #39	@ 0x27
 800c762:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800c764:	f107 0318 	add.w	r3, r7, #24
 800c768:	4618      	mov	r0, r3
 800c76a:	f005 f9e1 	bl	8011b30 <LoRaMacMibGetRequestConfirm>

        LmHandlerParams.ActiveRegion = mibReq.Param.Contexts->MacGroup2.Region;
 800c76e:	69fb      	ldr	r3, [r7, #28]
 800c770:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800c774:	4b4f      	ldr	r3, [pc, #316]	@ (800c8b4 <LmHandlerConfigure+0x254>)
 800c776:	701a      	strb	r2, [r3, #0]
        LmHandlerParams.DefaultClass = mibReq.Param.Contexts->MacGroup2.DeviceClass;
 800c778:	69fb      	ldr	r3, [r7, #28]
 800c77a:	f893 2104 	ldrb.w	r2, [r3, #260]	@ 0x104
 800c77e:	4b4d      	ldr	r3, [pc, #308]	@ (800c8b4 <LmHandlerConfigure+0x254>)
 800c780:	705a      	strb	r2, [r3, #1]
        LmHandlerParams.AdrEnable = mibReq.Param.Contexts->MacGroup2.AdrCtrlOn;
 800c782:	69fb      	ldr	r3, [r7, #28]
 800c784:	f893 2106 	ldrb.w	r2, [r3, #262]	@ 0x106
 800c788:	4b4a      	ldr	r3, [pc, #296]	@ (800c8b4 <LmHandlerConfigure+0x254>)
 800c78a:	709a      	strb	r2, [r3, #2]
 800c78c:	e019      	b.n	800c7c2 <LmHandlerConfigure+0x162>
    }
    else
    {
        mibReq.Type = MIB_NET_ID;
 800c78e:	2305      	movs	r3, #5
 800c790:	763b      	strb	r3, [r7, #24]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800c792:	2300      	movs	r3, #0
 800c794:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800c796:	f107 0318 	add.w	r3, r7, #24
 800c79a:	4618      	mov	r0, r3
 800c79c:	f005 fb6e 	bl	8011e7c <LoRaMacMibSetRequestConfirm>

#if ( STATIC_DEVICE_ADDRESS != 1 )
        CommissioningParams.DevAddr = LmHandlerCallbacks->GetDevAddr();
 800c7a0:	4b4a      	ldr	r3, [pc, #296]	@ (800c8cc <LmHandlerConfigure+0x26c>)
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	68db      	ldr	r3, [r3, #12]
 800c7a6:	4798      	blx	r3
 800c7a8:	4603      	mov	r3, r0
 800c7aa:	4a49      	ldr	r2, [pc, #292]	@ (800c8d0 <LmHandlerConfigure+0x270>)
 800c7ac:	6153      	str	r3, [r2, #20]
#endif /* STATIC_DEVICE_ADDRESS != 1 */

        mibReq.Type = MIB_DEV_ADDR;
 800c7ae:	2306      	movs	r3, #6
 800c7b0:	763b      	strb	r3, [r7, #24]
        mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 800c7b2:	4b47      	ldr	r3, [pc, #284]	@ (800c8d0 <LmHandlerConfigure+0x270>)
 800c7b4:	695b      	ldr	r3, [r3, #20]
 800c7b6:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800c7b8:	f107 0318 	add.w	r3, r7, #24
 800c7bc:	4618      	mov	r0, r3
 800c7be:	f005 fb5d 	bl	8011e7c <LoRaMacMibSetRequestConfirm>
    }
    // Read secure-element DEV_EUI and JOIN_EUI values.
    mibReq.Type = MIB_DEV_EUI;
 800c7c2:	2302      	movs	r3, #2
 800c7c4:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800c7c6:	f107 0318 	add.w	r3, r7, #24
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	f005 f9b0 	bl	8011b30 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.DevEui, mibReq.Param.DevEui, 8 );
 800c7d0:	69fb      	ldr	r3, [r7, #28]
 800c7d2:	2208      	movs	r2, #8
 800c7d4:	4619      	mov	r1, r3
 800c7d6:	483e      	ldr	r0, [pc, #248]	@ (800c8d0 <LmHandlerConfigure+0x270>)
 800c7d8:	f00a fca5 	bl	8017126 <memcpy1>

    mibReq.Type = MIB_JOIN_EUI;
 800c7dc:	2303      	movs	r3, #3
 800c7de:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800c7e0:	f107 0318 	add.w	r3, r7, #24
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	f005 f9a3 	bl	8011b30 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8 );
 800c7ea:	69fb      	ldr	r3, [r7, #28]
 800c7ec:	2208      	movs	r2, #8
 800c7ee:	4619      	mov	r1, r3
 800c7f0:	4838      	ldr	r0, [pc, #224]	@ (800c8d4 <LmHandlerConfigure+0x274>)
 800c7f2:	f00a fc98 	bl	8017126 <memcpy1>

    SecureElementPrintKeys();
 800c7f6:	f7ff fc21 	bl	800c03c <SecureElementPrintKeys>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 800c7fa:	4b37      	ldr	r3, [pc, #220]	@ (800c8d8 <LmHandlerConfigure+0x278>)
 800c7fc:	781b      	ldrb	r3, [r3, #0]
 800c7fe:	461a      	mov	r2, r3
 800c800:	4b36      	ldr	r3, [pc, #216]	@ (800c8dc <LmHandlerConfigure+0x27c>)
 800c802:	781b      	ldrb	r3, [r3, #0]
 800c804:	4619      	mov	r1, r3
 800c806:	4b36      	ldr	r3, [pc, #216]	@ (800c8e0 <LmHandlerConfigure+0x280>)
 800c808:	781b      	ldrb	r3, [r3, #0]
 800c80a:	4618      	mov	r0, r3
 800c80c:	4b35      	ldr	r3, [pc, #212]	@ (800c8e4 <LmHandlerConfigure+0x284>)
 800c80e:	781b      	ldrb	r3, [r3, #0]
 800c810:	9303      	str	r3, [sp, #12]
 800c812:	9002      	str	r0, [sp, #8]
 800c814:	9101      	str	r1, [sp, #4]
 800c816:	9200      	str	r2, [sp, #0]
 800c818:	4b33      	ldr	r3, [pc, #204]	@ (800c8e8 <LmHandlerConfigure+0x288>)
 800c81a:	2200      	movs	r2, #0
 800c81c:	2100      	movs	r1, #0
 800c81e:	2002      	movs	r0, #2
 800c820:	f00e ffd8 	bl	801b7d4 <UTIL_ADV_TRACE_COND_FSend>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG(TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n");
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 800c824:	230f      	movs	r3, #15
 800c826:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800c828:	2301      	movs	r3, #1
 800c82a:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800c82c:	f107 0318 	add.w	r3, r7, #24
 800c830:	4618      	mov	r0, r3
 800c832:	f005 fb23 	bl	8011e7c <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 800c836:	2310      	movs	r3, #16
 800c838:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800c83a:	2300      	movs	r3, #0
 800c83c:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c83e:	f107 0318 	add.w	r3, r7, #24
 800c842:	4618      	mov	r0, r3
 800c844:	f005 fb1a 	bl	8011e7c <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 800c848:	2304      	movs	r3, #4
 800c84a:	763b      	strb	r3, [r7, #24]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800c84c:	4b19      	ldr	r3, [pc, #100]	@ (800c8b4 <LmHandlerConfigure+0x254>)
 800c84e:	789b      	ldrb	r3, [r3, #2]
 800c850:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c852:	f107 0318 	add.w	r3, r7, #24
 800c856:	4618      	mov	r0, r3
 800c858:	f005 fb10 	bl	8011e7c <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_RXB_C_TIMEOUT;
 800c85c:	2338      	movs	r3, #56	@ 0x38
 800c85e:	763b      	strb	r3, [r7, #24]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 800c860:	4b14      	ldr	r3, [pc, #80]	@ (800c8b4 <LmHandlerConfigure+0x254>)
 800c862:	691b      	ldr	r3, [r3, #16]
 800c864:	61fb      	str	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c866:	f107 0318 	add.w	r3, r7, #24
 800c86a:	4618      	mov	r0, r3
 800c86c:	f005 fb06 	bl	8011e7c <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800c870:	230f      	movs	r3, #15
 800c872:	743b      	strb	r3, [r7, #16]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800c874:	4b0f      	ldr	r3, [pc, #60]	@ (800c8b4 <LmHandlerConfigure+0x254>)
 800c876:	781b      	ldrb	r3, [r3, #0]
 800c878:	f107 0210 	add.w	r2, r7, #16
 800c87c:	4611      	mov	r1, r2
 800c87e:	4618      	mov	r0, r3
 800c880:	f008 f9b0 	bl	8014be4 <RegionGetPhyParam>
 800c884:	4603      	mov	r3, r0
 800c886:	60fb      	str	r3, [r7, #12]
    LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	bf14      	ite	ne
 800c88e:	2301      	movne	r3, #1
 800c890:	2300      	moveq	r3, #0
 800c892:	b2da      	uxtb	r2, r3
 800c894:	4b07      	ldr	r3, [pc, #28]	@ (800c8b4 <LmHandlerConfigure+0x254>)
 800c896:	719a      	strb	r2, [r3, #6]

    // Set system maximum tolerated rx error in milliseconds
    LmHandlerSetSystemMaxRxError( 20 );
 800c898:	2014      	movs	r0, #20
 800c89a:	f000 fab9 	bl	800ce10 <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800c89e:	4b05      	ldr	r3, [pc, #20]	@ (800c8b4 <LmHandlerConfigure+0x254>)
 800c8a0:	799b      	ldrb	r3, [r3, #6]
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	f006 f918 	bl	8012ad8 <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800c8a8:	2300      	movs	r3, #0
}
 800c8aa:	4618      	mov	r0, r3
 800c8ac:	3740      	adds	r7, #64	@ 0x40
 800c8ae:	46bd      	mov	sp, r7
 800c8b0:	bd80      	pop	{r7, pc}
 800c8b2:	bf00      	nop
 800c8b4:	20000764 	.word	0x20000764
 800c8b8:	200007a4 	.word	0x200007a4
 800c8bc:	0801ef24 	.word	0x0801ef24
 800c8c0:	2000078c 	.word	0x2000078c
 800c8c4:	2000077c 	.word	0x2000077c
 800c8c8:	2000089a 	.word	0x2000089a
 800c8cc:	20000778 	.word	0x20000778
 800c8d0:	20000078 	.word	0x20000078
 800c8d4:	20000080 	.word	0x20000080
 800c8d8:	2000008f 	.word	0x2000008f
 800c8dc:	2000008e 	.word	0x2000008e
 800c8e0:	2000008d 	.word	0x2000008d
 800c8e4:	2000008c 	.word	0x2000008c
 800c8e8:	0801ef70 	.word	0x0801ef70

0800c8ec <LmHandlerProcess>:

    return false;
}

void LmHandlerProcess( void )
{
 800c8ec:	b580      	push	{r7, lr}
 800c8ee:	b082      	sub	sp, #8
 800c8f0:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    // Processes the LoRaMac events
    LoRaMacProcess( );
 800c8f2:	f002 fd45 	bl	800f380 <LoRaMacProcess>

    // Call all packages process functions
    LmHandlerPackagesProcess( );
 800c8f6:	f000 fd3b 	bl	800d370 <LmHandlerPackagesProcess>

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Check if a package transmission is pending.
    // If it is the case exit function earlier
    if( LmHandlerPackageIsTxPending( ) == true )
 800c8fa:	f000 fd0f 	bl	800d31c <LmHandlerPackageIsTxPending>
 800c8fe:	4603      	mov	r3, r0
 800c900:	2b00      	cmp	r3, #0
 800c902:	d117      	bne.n	800c934 <LmHandlerProcess+0x48>
    {
        return;
    }

    // If a MAC layer scheduled uplink is still pending try to send it.
    if( IsUplinkTxPending == true )
 800c904:	4b0d      	ldr	r3, [pc, #52]	@ (800c93c <LmHandlerProcess+0x50>)
 800c906:	781b      	ldrb	r3, [r3, #0]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d014      	beq.n	800c936 <LmHandlerProcess+0x4a>
    {
        // Send an empty message
        LmHandlerAppData_t appData =
 800c90c:	2300      	movs	r3, #0
 800c90e:	703b      	strb	r3, [r7, #0]
 800c910:	2300      	movs	r3, #0
 800c912:	707b      	strb	r3, [r7, #1]
 800c914:	2300      	movs	r3, #0
 800c916:	607b      	str	r3, [r7, #4]
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0,
        };

        if( LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false ) == LORAMAC_HANDLER_SUCCESS )
 800c918:	4b09      	ldr	r3, [pc, #36]	@ (800c940 <LmHandlerProcess+0x54>)
 800c91a:	78d9      	ldrb	r1, [r3, #3]
 800c91c:	463b      	mov	r3, r7
 800c91e:	2200      	movs	r2, #0
 800c920:	4618      	mov	r0, r3
 800c922:	f000 f8b7 	bl	800ca94 <LmHandlerSend>
 800c926:	4603      	mov	r3, r0
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d104      	bne.n	800c936 <LmHandlerProcess+0x4a>
        {
            IsUplinkTxPending = false;
 800c92c:	4b03      	ldr	r3, [pc, #12]	@ (800c93c <LmHandlerProcess+0x50>)
 800c92e:	2200      	movs	r2, #0
 800c930:	701a      	strb	r2, [r3, #0]
 800c932:	e000      	b.n	800c936 <LmHandlerProcess+0x4a>
        return;
 800c934:	bf00      	nop
        }
    }
#endif /* LORAMAC_VERSION */
}
 800c936:	3708      	adds	r7, #8
 800c938:	46bd      	mov	sp, r7
 800c93a:	bd80      	pop	{r7, pc}
 800c93c:	200007a4 	.word	0x200007a4
 800c940:	20000764 	.word	0x20000764

0800c944 <LmHandlerGetDutyCycleWaitTime>:

TimerTime_t LmHandlerGetDutyCycleWaitTime( void )
{
 800c944:	b480      	push	{r7}
 800c946:	af00      	add	r7, sp, #0
    return DutyCycleWaitTime;
 800c948:	4b02      	ldr	r3, [pc, #8]	@ (800c954 <LmHandlerGetDutyCycleWaitTime+0x10>)
 800c94a:	681b      	ldr	r3, [r3, #0]
}
 800c94c:	4618      	mov	r0, r3
 800c94e:	46bd      	mov	sp, r7
 800c950:	bc80      	pop	{r7}
 800c952:	4770      	bx	lr
 800c954:	200007a0 	.word	0x200007a0

0800c958 <LmHandlerJoin>:

void LmHandlerJoin( ActivationType_t mode, bool forceRejoin )
{
 800c958:	b580      	push	{r7, lr}
 800c95a:	b090      	sub	sp, #64	@ 0x40
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	4603      	mov	r3, r0
 800c960:	460a      	mov	r2, r1
 800c962:	71fb      	strb	r3, [r7, #7]
 800c964:	4613      	mov	r3, r2
 800c966:	71bb      	strb	r3, [r7, #6]
#endif /* ACTIVATION_BY_PERSONALIZATION */
#endif /* LORAWAN_KMS */

    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_JOIN;
 800c968:	2301      	movs	r3, #1
 800c96a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800c96e:	4b36      	ldr	r3, [pc, #216]	@ (800ca48 <LmHandlerJoin+0xf0>)
 800c970:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800c974:	b2db      	uxtb	r3, r3
 800c976:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31

    if ( mode == ACTIVATION_TYPE_OTAA )
 800c97a:	79fb      	ldrb	r3, [r7, #7]
 800c97c:	2b02      	cmp	r3, #2
 800c97e:	d10b      	bne.n	800c998 <LmHandlerJoin+0x40>
    {
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800c980:	2302      	movs	r3, #2
 800c982:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800c986:	4b31      	ldr	r3, [pc, #196]	@ (800ca4c <LmHandlerJoin+0xf4>)
 800c988:	2202      	movs	r2, #2
 800c98a:	719a      	strb	r2, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 800c98c:	4a2f      	ldr	r2, [pc, #188]	@ (800ca4c <LmHandlerJoin+0xf4>)
 800c98e:	79bb      	ldrb	r3, [r7, #6]
 800c990:	71d3      	strb	r3, [r2, #7]
        LoRaMacStart();
 800c992:	f004 ffdb 	bl	801194c <LoRaMacStart>
 800c996:	e041      	b.n	800ca1c <LmHandlerJoin+0xc4>
    }
    else
    {
        MibRequestConfirm_t mibReq;

        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 800c998:	2301      	movs	r3, #1
 800c99a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800c99e:	4b2b      	ldr	r3, [pc, #172]	@ (800ca4c <LmHandlerJoin+0xf4>)
 800c9a0:	2201      	movs	r2, #1
 800c9a2:	719a      	strb	r2, [r3, #6]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800c9a4:	4b28      	ldr	r3, [pc, #160]	@ (800ca48 <LmHandlerJoin+0xf0>)
 800c9a6:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800c9aa:	4b28      	ldr	r3, [pc, #160]	@ (800ca4c <LmHandlerJoin+0xf4>)
 800c9ac:	711a      	strb	r2, [r3, #4]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800c9ae:	4b27      	ldr	r3, [pc, #156]	@ (800ca4c <LmHandlerJoin+0xf4>)
 800c9b0:	2200      	movs	r2, #0
 800c9b2:	715a      	strb	r2, [r3, #5]
        JoinParams.forceRejoin = forceRejoin;
 800c9b4:	4a25      	ldr	r2, [pc, #148]	@ (800ca4c <LmHandlerJoin+0xf4>)
 800c9b6:	79bb      	ldrb	r3, [r7, #6]
 800c9b8:	71d3      	strb	r3, [r2, #7]

        if (CtxRestoreDone == false)
 800c9ba:	4b25      	ldr	r3, [pc, #148]	@ (800ca50 <LmHandlerJoin+0xf8>)
 800c9bc:	781b      	ldrb	r3, [r3, #0]
 800c9be:	f083 0301 	eor.w	r3, r3, #1
 800c9c2:	b2db      	uxtb	r3, r3
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d01e      	beq.n	800ca06 <LmHandlerJoin+0xae>
        {
            // Configure the default datarate
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 800c9c8:	231f      	movs	r3, #31
 800c9ca:	723b      	strb	r3, [r7, #8]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 800c9cc:	4b1e      	ldr	r3, [pc, #120]	@ (800ca48 <LmHandlerJoin+0xf0>)
 800c9ce:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800c9d2:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800c9d4:	f107 0308 	add.w	r3, r7, #8
 800c9d8:	4618      	mov	r0, r3
 800c9da:	f005 fa4f 	bl	8011e7c <LoRaMacMibSetRequestConfirm>

            mibReq.Type = MIB_CHANNELS_DATARATE;
 800c9de:	2320      	movs	r3, #32
 800c9e0:	723b      	strb	r3, [r7, #8]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 800c9e2:	4b19      	ldr	r3, [pc, #100]	@ (800ca48 <LmHandlerJoin+0xf0>)
 800c9e4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800c9e8:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800c9ea:	f107 0308 	add.w	r3, r7, #8
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	f005 fa44 	bl	8011e7c <LoRaMacMibSetRequestConfirm>

            /* Tell the MAC layer which network server version are we connecting too. */
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800c9f4:	2329      	movs	r3, #41	@ 0x29
 800c9f6:	723b      	strb	r3, [r7, #8]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800c9f8:	4b16      	ldr	r3, [pc, #88]	@ (800ca54 <LmHandlerJoin+0xfc>)
 800c9fa:	60fb      	str	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm(&mibReq);
 800c9fc:	f107 0308 	add.w	r3, r7, #8
 800ca00:	4618      	mov	r0, r3
 800ca02:	f005 fa3b 	bl	8011e7c <LoRaMacMibSetRequestConfirm>
#endif /* USE_LRWAN_1_1_X_CRYPTO */
            SecureElementSetObjHandler(APP_S_KEY, KMS_APP_S_KEY_OBJECT_HANDLE);
#endif  /* LORAWAN_KMS == 1 */
        }

        LoRaMacStart();
 800ca06:	f004 ffa1 	bl	801194c <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800ca0a:	2301      	movs	r3, #1
 800ca0c:	723b      	strb	r3, [r7, #8]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800ca0e:	2301      	movs	r3, #1
 800ca10:	733b      	strb	r3, [r7, #12]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800ca12:	f107 0308 	add.w	r3, r7, #8
 800ca16:	4618      	mov	r0, r3
 800ca18:	f005 fa30 	bl	8011e7c <LoRaMacMibSetRequestConfirm>
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
#endif
    }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if ((CtxRestoreDone == false) || (forceRejoin == true))
 800ca1c:	4b0c      	ldr	r3, [pc, #48]	@ (800ca50 <LmHandlerJoin+0xf8>)
 800ca1e:	781b      	ldrb	r3, [r3, #0]
 800ca20:	f083 0301 	eor.w	r3, r3, #1
 800ca24:	b2db      	uxtb	r3, r3
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d102      	bne.n	800ca30 <LmHandlerJoin+0xd8>
 800ca2a:	79bb      	ldrb	r3, [r7, #6]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d004      	beq.n	800ca3a <LmHandlerJoin+0xe2>
    {
        // Starts the join procedure
        LoRaMacMlmeRequest( &mlmeReq );
 800ca30:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800ca34:	4618      	mov	r0, r3
 800ca36:	f005 fd91 	bl	801255c <LoRaMacMlmeRequest>
    }
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800ca3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca3c:	4a06      	ldr	r2, [pc, #24]	@ (800ca58 <LmHandlerJoin+0x100>)
 800ca3e:	6013      	str	r3, [r2, #0]
#endif /* LORAMAC_VERSION */
}
 800ca40:	bf00      	nop
 800ca42:	3740      	adds	r7, #64	@ 0x40
 800ca44:	46bd      	mov	sp, r7
 800ca46:	bd80      	pop	{r7, pc}
 800ca48:	20000764 	.word	0x20000764
 800ca4c:	20000090 	.word	0x20000090
 800ca50:	2000089a 	.word	0x2000089a
 800ca54:	01000400 	.word	0x01000400
 800ca58:	200007a0 	.word	0x200007a0

0800ca5c <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 800ca5c:	b580      	push	{r7, lr}
 800ca5e:	b08a      	sub	sp, #40	@ 0x28
 800ca60:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800ca62:	2301      	movs	r3, #1
 800ca64:	703b      	strb	r3, [r7, #0]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800ca66:	463b      	mov	r3, r7
 800ca68:	4618      	mov	r0, r3
 800ca6a:	f005 f861 	bl	8011b30 <LoRaMacMibGetRequestConfirm>
 800ca6e:	4603      	mov	r3, r0
 800ca70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if( status == LORAMAC_STATUS_OK )
 800ca74:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d106      	bne.n	800ca8a <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800ca7c:	793b      	ldrb	r3, [r7, #4]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d101      	bne.n	800ca86 <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 800ca82:	2300      	movs	r3, #0
 800ca84:	e002      	b.n	800ca8c <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 800ca86:	2301      	movs	r3, #1
 800ca88:	e000      	b.n	800ca8c <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 800ca8a:	2300      	movs	r3, #0
    }
}
 800ca8c:	4618      	mov	r0, r3
 800ca8e:	3728      	adds	r7, #40	@ 0x28
 800ca90:	46bd      	mov	sp, r7
 800ca92:	bd80      	pop	{r7, pc}

0800ca94 <LmHandlerSend>:

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed, bool allowDelayedTx )
{
 800ca94:	b580      	push	{r7, lr}
 800ca96:	b08a      	sub	sp, #40	@ 0x28
 800ca98:	af00      	add	r7, sp, #0
 800ca9a:	6078      	str	r0, [r7, #4]
 800ca9c:	460b      	mov	r3, r1
 800ca9e:	70fb      	strb	r3, [r7, #3]
 800caa0:	4613      	mov	r3, r2
 800caa2:	70bb      	strb	r3, [r7, #2]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800caa4:	23ff      	movs	r3, #255	@ 0xff
 800caa6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if (LoRaMacIsBusy() == true)
 800caaa:	f002 f9c9 	bl	800ee40 <LoRaMacIsBusy>
 800caae:	4603      	mov	r3, r0
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d002      	beq.n	800caba <LmHandlerSend+0x26>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800cab4:	f06f 0301 	mvn.w	r3, #1
 800cab8:	e0a3      	b.n	800cc02 <LmHandlerSend+0x16e>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800caba:	f7ff ffcf 	bl	800ca5c <LmHandlerJoinStatus>
 800cabe:	4603      	mov	r3, r0
 800cac0:	2b01      	cmp	r3, #1
 800cac2:	d00a      	beq.n	800cada <LmHandlerSend+0x46>
    {
        // The network isn't joined, try again.
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800cac4:	4b51      	ldr	r3, [pc, #324]	@ (800cc0c <LmHandlerSend+0x178>)
 800cac6:	799b      	ldrb	r3, [r3, #6]
 800cac8:	4a50      	ldr	r2, [pc, #320]	@ (800cc0c <LmHandlerSend+0x178>)
 800caca:	79d2      	ldrb	r2, [r2, #7]
 800cacc:	4611      	mov	r1, r2
 800cace:	4618      	mov	r0, r3
 800cad0:	f7ff ff42 	bl	800c958 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800cad4:	f06f 0302 	mvn.w	r3, #2
 800cad8:	e093      	b.n	800cc02 <LmHandlerSend+0x16e>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
    }
#endif /* LORAMAC_VERSION */

    TxParams.MsgType = isTxConfirmed;
 800cada:	4a4d      	ldr	r2, [pc, #308]	@ (800cc10 <LmHandlerSend+0x17c>)
 800cadc:	78fb      	ldrb	r3, [r7, #3]
 800cade:	7213      	strb	r3, [r2, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 800cae0:	78fb      	ldrb	r3, [r7, #3]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	bf14      	ite	ne
 800cae6:	2301      	movne	r3, #1
 800cae8:	2300      	moveq	r3, #0
 800caea:	b2db      	uxtb	r3, r3
 800caec:	743b      	strb	r3, [r7, #16]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800caee:	4b49      	ldr	r3, [pc, #292]	@ (800cc14 <LmHandlerSend+0x180>)
 800caf0:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800caf4:	77bb      	strb	r3, [r7, #30]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	785b      	ldrb	r3, [r3, #1]
 800cafa:	f107 020c 	add.w	r2, r7, #12
 800cafe:	4611      	mov	r1, r2
 800cb00:	4618      	mov	r0, r3
 800cb02:	f004 ff85 	bl	8011a10 <LoRaMacQueryTxPossible>
 800cb06:	4603      	mov	r3, r0
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d009      	beq.n	800cb20 <LmHandlerSend+0x8c>
    {
        // Send empty frame in order to flush MAC commands
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800cb0c:	2300      	movs	r3, #0
 800cb0e:	743b      	strb	r3, [r7, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800cb10:	2300      	movs	r3, #0
 800cb12:	61bb      	str	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800cb14:	2300      	movs	r3, #0
 800cb16:	83bb      	strh	r3, [r7, #28]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 800cb18:	23f9      	movs	r3, #249	@ 0xf9
 800cb1a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800cb1e:	e008      	b.n	800cb32 <LmHandlerSend+0x9e>
    }
    else
    {
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	781b      	ldrb	r3, [r3, #0]
 800cb24:	753b      	strb	r3, [r7, #20]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	785b      	ldrb	r3, [r3, #1]
 800cb2a:	83bb      	strh	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	685b      	ldr	r3, [r3, #4]
 800cb30:	61bb      	str	r3, [r7, #24]
    }

    TxParams.AppData = *appData;
 800cb32:	4b37      	ldr	r3, [pc, #220]	@ (800cc10 <LmHandlerSend+0x17c>)
 800cb34:	687a      	ldr	r2, [r7, #4]
 800cb36:	3310      	adds	r3, #16
 800cb38:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cb3c:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800cb40:	4b34      	ldr	r3, [pc, #208]	@ (800cc14 <LmHandlerSend+0x180>)
 800cb42:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800cb46:	4b32      	ldr	r3, [pc, #200]	@ (800cc10 <LmHandlerSend+0x17c>)
 800cb48:	729a      	strb	r2, [r3, #10]

    status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 800cb4a:	78ba      	ldrb	r2, [r7, #2]
 800cb4c:	f107 0310 	add.w	r3, r7, #16
 800cb50:	4611      	mov	r1, r2
 800cb52:	4618      	mov	r0, r3
 800cb54:	f005 fe88 	bl	8012868 <LoRaMacMcpsRequest>
 800cb58:	4603      	mov	r3, r0
 800cb5a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800cb5e:	6a3b      	ldr	r3, [r7, #32]
 800cb60:	4a2d      	ldr	r2, [pc, #180]	@ (800cc18 <LmHandlerSend+0x184>)
 800cb62:	6013      	str	r3, [r2, #0]

    switch (status)
 800cb64:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cb68:	2b11      	cmp	r3, #17
 800cb6a:	d843      	bhi.n	800cbf4 <LmHandlerSend+0x160>
 800cb6c:	a201      	add	r2, pc, #4	@ (adr r2, 800cb74 <LmHandlerSend+0xe0>)
 800cb6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb72:	bf00      	nop
 800cb74:	0800cbbd 	.word	0x0800cbbd
 800cb78:	0800cbd5 	.word	0x0800cbd5
 800cb7c:	0800cbf5 	.word	0x0800cbf5
 800cb80:	0800cbf5 	.word	0x0800cbf5
 800cb84:	0800cbf5 	.word	0x0800cbf5
 800cb88:	0800cbf5 	.word	0x0800cbf5
 800cb8c:	0800cbf5 	.word	0x0800cbf5
 800cb90:	0800cbdd 	.word	0x0800cbdd
 800cb94:	0800cbf5 	.word	0x0800cbf5
 800cb98:	0800cbf5 	.word	0x0800cbf5
 800cb9c:	0800cbf5 	.word	0x0800cbf5
 800cba0:	0800cbed 	.word	0x0800cbed
 800cba4:	0800cbf5 	.word	0x0800cbf5
 800cba8:	0800cbf5 	.word	0x0800cbf5
 800cbac:	0800cbd5 	.word	0x0800cbd5
 800cbb0:	0800cbd5 	.word	0x0800cbd5
 800cbb4:	0800cbd5 	.word	0x0800cbd5
 800cbb8:	0800cbe5 	.word	0x0800cbe5
    {
        case LORAMAC_STATUS_OK:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            IsUplinkTxPending = false;
 800cbbc:	4b17      	ldr	r3, [pc, #92]	@ (800cc1c <LmHandlerSend+0x188>)
 800cbbe:	2200      	movs	r2, #0
 800cbc0:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */
            if (lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED)
 800cbc2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800cbc6:	f113 0f07 	cmn.w	r3, #7
 800cbca:	d017      	beq.n	800cbfc <LmHandlerSend+0x168>
            {
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800cbcc:	2300      	movs	r3, #0
 800cbce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 800cbd2:	e013      	b.n	800cbfc <LmHandlerSend+0x168>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800cbd4:	23fe      	movs	r3, #254	@ 0xfe
 800cbd6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800cbda:	e010      	b.n	800cbfe <LmHandlerSend+0x16a>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800cbdc:	23fd      	movs	r3, #253	@ 0xfd
 800cbde:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800cbe2:	e00c      	b.n	800cbfe <LmHandlerSend+0x16a>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800cbe4:	23fb      	movs	r3, #251	@ 0xfb
 800cbe6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800cbea:	e008      	b.n	800cbfe <LmHandlerSend+0x16a>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800cbec:	23fa      	movs	r3, #250	@ 0xfa
 800cbee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800cbf2:	e004      	b.n	800cbfe <LmHandlerSend+0x16a>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800cbf4:	23ff      	movs	r3, #255	@ 0xff
 800cbf6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800cbfa:	e000      	b.n	800cbfe <LmHandlerSend+0x16a>
            break;
 800cbfc:	bf00      	nop
    }

    return lmhStatus;
 800cbfe:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800cc02:	4618      	mov	r0, r3
 800cc04:	3728      	adds	r7, #40	@ 0x28
 800cc06:	46bd      	mov	sp, r7
 800cc08:	bd80      	pop	{r7, pc}
 800cc0a:	bf00      	nop
 800cc0c:	20000090 	.word	0x20000090
 800cc10:	20000098 	.word	0x20000098
 800cc14:	20000764 	.word	0x20000764
 800cc18:	200007a0 	.word	0x200007a0
 800cc1c:	200007a4 	.word	0x200007a4

0800cc20 <LmHandlerDeviceTimeReq>:

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 800cc20:	b580      	push	{r7, lr}
 800cc22:	b086      	sub	sp, #24
 800cc24:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 800cc26:	2309      	movs	r3, #9
 800cc28:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800cc2a:	463b      	mov	r3, r7
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	f005 fc95 	bl	801255c <LoRaMacMlmeRequest>
 800cc32:	4603      	mov	r3, r0
 800cc34:	75fb      	strb	r3, [r7, #23]
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800cc36:	693b      	ldr	r3, [r7, #16]
 800cc38:	4a06      	ldr	r2, [pc, #24]	@ (800cc54 <LmHandlerDeviceTimeReq+0x34>)
 800cc3a:	6013      	str	r3, [r2, #0]

    if( status == LORAMAC_STATUS_OK )
 800cc3c:	7dfb      	ldrb	r3, [r7, #23]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d101      	bne.n	800cc46 <LmHandlerDeviceTimeReq+0x26>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800cc42:	2300      	movs	r3, #0
 800cc44:	e001      	b.n	800cc4a <LmHandlerDeviceTimeReq+0x2a>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800cc46:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	3718      	adds	r7, #24
 800cc4e:	46bd      	mov	sp, r7
 800cc50:	bd80      	pop	{r7, pc}
 800cc52:	bf00      	nop
 800cc54:	200007a0 	.word	0x200007a0

0800cc58 <LmHandlerPingSlotReq>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerPingSlotReq( uint8_t periodicity )
{
 800cc58:	b480      	push	{r7}
 800cc5a:	b083      	sub	sp, #12
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	4603      	mov	r3, r0
 800cc60:	71fb      	strb	r3, [r7, #7]
        return LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false );
    }
    else
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    {
        return LORAMAC_HANDLER_ERROR;
 800cc62:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800cc66:	4618      	mov	r0, r3
 800cc68:	370c      	adds	r7, #12
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	bc80      	pop	{r7}
 800cc6e:	4770      	bx	lr

0800cc70 <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 800cc70:	b580      	push	{r7, lr}
 800cc72:	b08c      	sub	sp, #48	@ 0x30
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	4603      	mov	r3, r0
 800cc78:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800cc7a:	2300      	movs	r3, #0
 800cc7c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    if (LoRaMacIsBusy() == true)
 800cc80:	f002 f8de 	bl	800ee40 <LoRaMacIsBusy>
 800cc84:	4603      	mov	r3, r0
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d002      	beq.n	800cc90 <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800cc8a:	f06f 0301 	mvn.w	r3, #1
 800cc8e:	e071      	b.n	800cd74 <LmHandlerRequestClass+0x104>
    }

    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 800cc90:	f7ff fee4 	bl	800ca5c <LmHandlerJoinStatus>
 800cc94:	4603      	mov	r3, r0
 800cc96:	2b01      	cmp	r3, #1
 800cc98:	d002      	beq.n	800cca0 <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800cc9a:	f06f 0302 	mvn.w	r3, #2
 800cc9e:	e069      	b.n	800cd74 <LmHandlerRequestClass+0x104>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800cca0:	2300      	movs	r3, #0
 800cca2:	723b      	strb	r3, [r7, #8]
    if ( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800cca4:	f107 0308 	add.w	r3, r7, #8
 800cca8:	4618      	mov	r0, r3
 800ccaa:	f004 ff41 	bl	8011b30 <LoRaMacMibGetRequestConfirm>
 800ccae:	4603      	mov	r3, r0
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d002      	beq.n	800ccba <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 800ccb4:	f04f 33ff 	mov.w	r3, #4294967295
 800ccb8:	e05c      	b.n	800cd74 <LmHandlerRequestClass+0x104>
    }
    currentClass = mibReq.Param.Class;
 800ccba:	7b3b      	ldrb	r3, [r7, #12]
 800ccbc:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

    // Attempt to switch only if class update
    if( currentClass != newClass )
 800ccc0:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 800ccc4:	79fb      	ldrb	r3, [r7, #7]
 800ccc6:	429a      	cmp	r2, r3
 800ccc8:	d052      	beq.n	800cd70 <LmHandlerRequestClass+0x100>
    {
        switch( newClass )
 800ccca:	79fb      	ldrb	r3, [r7, #7]
 800cccc:	2b02      	cmp	r3, #2
 800ccce:	d028      	beq.n	800cd22 <LmHandlerRequestClass+0xb2>
 800ccd0:	2b02      	cmp	r3, #2
 800ccd2:	dc48      	bgt.n	800cd66 <LmHandlerRequestClass+0xf6>
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d002      	beq.n	800ccde <LmHandlerRequestClass+0x6e>
 800ccd8:	2b01      	cmp	r3, #1
 800ccda:	d01e      	beq.n	800cd1a <LmHandlerRequestClass+0xaa>
                    }
                }
            }
            break;
        default:
            break;
 800ccdc:	e043      	b.n	800cd66 <LmHandlerRequestClass+0xf6>
                if( currentClass != CLASS_A )
 800ccde:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d041      	beq.n	800cd6a <LmHandlerRequestClass+0xfa>
                    mibReq.Param.Class = newClass;
 800cce6:	79fb      	ldrb	r3, [r7, #7]
 800cce8:	733b      	strb	r3, [r7, #12]
                    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800ccea:	f107 0308 	add.w	r3, r7, #8
 800ccee:	4618      	mov	r0, r3
 800ccf0:	f005 f8c4 	bl	8011e7c <LoRaMacMibSetRequestConfirm>
 800ccf4:	4603      	mov	r3, r0
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d10b      	bne.n	800cd12 <LmHandlerRequestClass+0xa2>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800ccfa:	4b20      	ldr	r3, [pc, #128]	@ (800cd7c <LmHandlerRequestClass+0x10c>)
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d032      	beq.n	800cd6a <LmHandlerRequestClass+0xfa>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800cd04:	4b1d      	ldr	r3, [pc, #116]	@ (800cd7c <LmHandlerRequestClass+0x10c>)
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd0a:	79fa      	ldrb	r2, [r7, #7]
 800cd0c:	4610      	mov	r0, r2
 800cd0e:	4798      	blx	r3
            break;
 800cd10:	e02b      	b.n	800cd6a <LmHandlerRequestClass+0xfa>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800cd12:	23ff      	movs	r3, #255	@ 0xff
 800cd14:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            break;
 800cd18:	e027      	b.n	800cd6a <LmHandlerRequestClass+0xfa>
                errorStatus = LORAMAC_HANDLER_ERROR;
 800cd1a:	23ff      	movs	r3, #255	@ 0xff
 800cd1c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            break;
 800cd20:	e026      	b.n	800cd70 <LmHandlerRequestClass+0x100>
                if( currentClass != CLASS_A )
 800cd22:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d003      	beq.n	800cd32 <LmHandlerRequestClass+0xc2>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800cd2a:	23ff      	movs	r3, #255	@ 0xff
 800cd2c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            break;
 800cd30:	e01d      	b.n	800cd6e <LmHandlerRequestClass+0xfe>
                    mibReq.Param.Class = newClass;
 800cd32:	79fb      	ldrb	r3, [r7, #7]
 800cd34:	733b      	strb	r3, [r7, #12]
                    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800cd36:	f107 0308 	add.w	r3, r7, #8
 800cd3a:	4618      	mov	r0, r3
 800cd3c:	f005 f89e 	bl	8011e7c <LoRaMacMibSetRequestConfirm>
 800cd40:	4603      	mov	r3, r0
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d10b      	bne.n	800cd5e <LmHandlerRequestClass+0xee>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800cd46:	4b0d      	ldr	r3, [pc, #52]	@ (800cd7c <LmHandlerRequestClass+0x10c>)
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d00e      	beq.n	800cd6e <LmHandlerRequestClass+0xfe>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800cd50:	4b0a      	ldr	r3, [pc, #40]	@ (800cd7c <LmHandlerRequestClass+0x10c>)
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd56:	79fa      	ldrb	r2, [r7, #7]
 800cd58:	4610      	mov	r0, r2
 800cd5a:	4798      	blx	r3
            break;
 800cd5c:	e007      	b.n	800cd6e <LmHandlerRequestClass+0xfe>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800cd5e:	23ff      	movs	r3, #255	@ 0xff
 800cd60:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            break;
 800cd64:	e003      	b.n	800cd6e <LmHandlerRequestClass+0xfe>
            break;
 800cd66:	bf00      	nop
 800cd68:	e002      	b.n	800cd70 <LmHandlerRequestClass+0x100>
            break;
 800cd6a:	bf00      	nop
 800cd6c:	e000      	b.n	800cd70 <LmHandlerRequestClass+0x100>
            break;
 800cd6e:	bf00      	nop
        }
    }
    return errorStatus;
 800cd70:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800cd74:	4618      	mov	r0, r3
 800cd76:	3730      	adds	r7, #48	@ 0x30
 800cd78:	46bd      	mov	sp, r7
 800cd7a:	bd80      	pop	{r7, pc}
 800cd7c:	20000778 	.word	0x20000778

0800cd80 <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 800cd80:	b580      	push	{r7, lr}
 800cd82:	b08c      	sub	sp, #48	@ 0x30
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if (deviceClass == NULL)
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d102      	bne.n	800cd94 <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800cd8e:	f04f 33ff 	mov.w	r3, #4294967295
 800cd92:	e010      	b.n	800cdb6 <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800cd94:	2300      	movs	r3, #0
 800cd96:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK)
 800cd98:	f107 030c 	add.w	r3, r7, #12
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	f004 fec7 	bl	8011b30 <LoRaMacMibGetRequestConfirm>
 800cda2:	4603      	mov	r3, r0
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d002      	beq.n	800cdae <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800cda8:	f04f 33ff 	mov.w	r3, #4294967295
 800cdac:	e003      	b.n	800cdb6 <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 800cdae:	7c3a      	ldrb	r2, [r7, #16]
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800cdb4:	2300      	movs	r3, #0
}
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	3730      	adds	r7, #48	@ 0x30
 800cdba:	46bd      	mov	sp, r7
 800cdbc:	bd80      	pop	{r7, pc}
	...

0800cdc0 <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 800cdc0:	b580      	push	{r7, lr}
 800cdc2:	b08c      	sub	sp, #48	@ 0x30
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if (txDatarate == NULL)
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d102      	bne.n	800cdd4 <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800cdce:	f04f 33ff 	mov.w	r3, #4294967295
 800cdd2:	e016      	b.n	800ce02 <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 800cdd4:	2320      	movs	r3, #32
 800cdd6:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK)
 800cdd8:	f107 030c 	add.w	r3, r7, #12
 800cddc:	4618      	mov	r0, r3
 800cdde:	f004 fea7 	bl	8011b30 <LoRaMacMibGetRequestConfirm>
 800cde2:	4603      	mov	r3, r0
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d002      	beq.n	800cdee <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800cde8:	f04f 33ff 	mov.w	r3, #4294967295
 800cdec:	e009      	b.n	800ce02 <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 800cdee:	f997 2010 	ldrsb.w	r2, [r7, #16]
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	f993 2000 	ldrsb.w	r2, [r3]
 800cdfc:	4b03      	ldr	r3, [pc, #12]	@ (800ce0c <LmHandlerGetTxDatarate+0x4c>)
 800cdfe:	711a      	strb	r2, [r3, #4]
    return LORAMAC_HANDLER_SUCCESS;
 800ce00:	2300      	movs	r3, #0
}
 800ce02:	4618      	mov	r0, r3
 800ce04:	3730      	adds	r7, #48	@ 0x30
 800ce06:	46bd      	mov	sp, r7
 800ce08:	bd80      	pop	{r7, pc}
 800ce0a:	bf00      	nop
 800ce0c:	20000764 	.word	0x20000764

0800ce10 <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 800ce10:	b580      	push	{r7, lr}
 800ce12:	b08c      	sub	sp, #48	@ 0x30
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800ce18:	2323      	movs	r3, #35	@ 0x23
 800ce1a:	733b      	strb	r3, [r7, #12]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	613b      	str	r3, [r7, #16]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800ce20:	f107 030c 	add.w	r3, r7, #12
 800ce24:	4618      	mov	r0, r3
 800ce26:	f005 f829 	bl	8011e7c <LoRaMacMibSetRequestConfirm>
 800ce2a:	4603      	mov	r3, r0
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d002      	beq.n	800ce36 <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 800ce30:	f04f 33ff 	mov.w	r3, #4294967295
 800ce34:	e000      	b.n	800ce38 <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 800ce36:	2300      	movs	r3, #0
}
 800ce38:	4618      	mov	r0, r3
 800ce3a:	3730      	adds	r7, #48	@ 0x30
 800ce3c:	46bd      	mov	sp, r7
 800ce3e:	bd80      	pop	{r7, pc}

0800ce40 <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	b082      	sub	sp, #8
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 800ce48:	4b15      	ldr	r3, [pc, #84]	@ (800cea0 <McpsConfirm+0x60>)
 800ce4a:	2201      	movs	r2, #1
 800ce4c:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	785a      	ldrb	r2, [r3, #1]
 800ce52:	4b13      	ldr	r3, [pc, #76]	@ (800cea0 <McpsConfirm+0x60>)
 800ce54:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	789b      	ldrb	r3, [r3, #2]
 800ce5a:	b25a      	sxtb	r2, r3
 800ce5c:	4b10      	ldr	r3, [pc, #64]	@ (800cea0 <McpsConfirm+0x60>)
 800ce5e:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	68db      	ldr	r3, [r3, #12]
 800ce64:	4a0e      	ldr	r2, [pc, #56]	@ (800cea0 <McpsConfirm+0x60>)
 800ce66:	60d3      	str	r3, [r2, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800ce6e:	4b0c      	ldr	r3, [pc, #48]	@ (800cea0 <McpsConfirm+0x60>)
 800ce70:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	691b      	ldr	r3, [r3, #16]
 800ce76:	b2da      	uxtb	r2, r3
 800ce78:	4b09      	ldr	r3, [pc, #36]	@ (800cea0 <McpsConfirm+0x60>)
 800ce7a:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	791b      	ldrb	r3, [r3, #4]
 800ce80:	461a      	mov	r2, r3
 800ce82:	4b07      	ldr	r3, [pc, #28]	@ (800cea0 <McpsConfirm+0x60>)
 800ce84:	725a      	strb	r2, [r3, #9]

    LmHandlerCallbacks->OnTxData( &TxParams );
 800ce86:	4b07      	ldr	r3, [pc, #28]	@ (800cea4 <McpsConfirm+0x64>)
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce8c:	4804      	ldr	r0, [pc, #16]	@ (800cea0 <McpsConfirm+0x60>)
 800ce8e:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800ce90:	6879      	ldr	r1, [r7, #4]
 800ce92:	2000      	movs	r0, #0
 800ce94:	f000 f9c6 	bl	800d224 <LmHandlerPackagesNotify>
}
 800ce98:	bf00      	nop
 800ce9a:	3708      	adds	r7, #8
 800ce9c:	46bd      	mov	sp, r7
 800ce9e:	bd80      	pop	{r7, pc}
 800cea0:	20000098 	.word	0x20000098
 800cea4:	20000778 	.word	0x20000778

0800cea8 <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *rxStatus )
{
 800cea8:	b580      	push	{r7, lr}
 800ceaa:	b086      	sub	sp, #24
 800ceac:	af00      	add	r7, sp, #0
 800ceae:	6078      	str	r0, [r7, #4]
 800ceb0:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 800ceb2:	2300      	movs	r3, #0
 800ceb4:	73fb      	strb	r3, [r7, #15]
    RxParams.IsMcpsIndication = 1;
 800ceb6:	4b2c      	ldr	r3, [pc, #176]	@ (800cf68 <McpsIndication+0xc0>)
 800ceb8:	2201      	movs	r2, #1
 800ceba:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	785a      	ldrb	r2, [r3, #1]
 800cec0:	4b29      	ldr	r3, [pc, #164]	@ (800cf68 <McpsIndication+0xc0>)
 800cec2:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800cec4:	4b28      	ldr	r3, [pc, #160]	@ (800cf68 <McpsIndication+0xc0>)
 800cec6:	785b      	ldrb	r3, [r3, #1]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d149      	bne.n	800cf60 <McpsIndication+0xb8>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	791b      	ldrb	r3, [r3, #4]
 800ced0:	b25a      	sxtb	r2, r3
 800ced2:	4b25      	ldr	r3, [pc, #148]	@ (800cf68 <McpsIndication+0xc0>)
 800ced4:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800ced6:	683b      	ldr	r3, [r7, #0]
 800ced8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cedc:	b25a      	sxtb	r2, r3
 800cede:	4b22      	ldr	r3, [pc, #136]	@ (800cf68 <McpsIndication+0xc0>)
 800cee0:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800cee2:	683b      	ldr	r3, [r7, #0]
 800cee4:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800cee8:	4b1f      	ldr	r3, [pc, #124]	@ (800cf68 <McpsIndication+0xc0>)
 800ceea:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800ceec:	683b      	ldr	r3, [r7, #0]
 800ceee:	78da      	ldrb	r2, [r3, #3]
 800cef0:	4b1d      	ldr	r3, [pc, #116]	@ (800cf68 <McpsIndication+0xc0>)
 800cef2:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	691b      	ldr	r3, [r3, #16]
 800cef8:	4a1b      	ldr	r2, [pc, #108]	@ (800cf68 <McpsIndication+0xc0>)
 800cefa:	60d3      	str	r3, [r2, #12]

    appData.Port = mcpsIndication->Port;
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	78db      	ldrb	r3, [r3, #3]
 800cf00:	743b      	strb	r3, [r7, #16]
    appData.BufferSize = mcpsIndication->BufferSize;
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	7b1b      	ldrb	r3, [r3, #12]
 800cf06:	747b      	strb	r3, [r7, #17]
    appData.Buffer = mcpsIndication->Buffer;
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	689b      	ldr	r3, [r3, #8]
 800cf0c:	617b      	str	r3, [r7, #20]

    LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 800cf0e:	4b17      	ldr	r3, [pc, #92]	@ (800cf6c <McpsIndication+0xc4>)
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf14:	f107 0210 	add.w	r2, r7, #16
 800cf18:	4913      	ldr	r1, [pc, #76]	@ (800cf68 <McpsIndication+0xc0>)
 800cf1a:	4610      	mov	r0, r2
 800cf1c:	4798      	blx	r3

    if ((LmHandlerCallbacks->OnSysTimeUpdate != NULL) && (mcpsIndication->DeviceTimeAnsReceived == true))
 800cf1e:	4b13      	ldr	r3, [pc, #76]	@ (800cf6c <McpsIndication+0xc4>)
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d007      	beq.n	800cf38 <McpsIndication+0x90>
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	7e1b      	ldrb	r3, [r3, #24]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d003      	beq.n	800cf38 <McpsIndication+0x90>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800cf30:	4b0e      	ldr	r3, [pc, #56]	@ (800cf6c <McpsIndication+0xc4>)
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf36:	4798      	blx	r3
    }
    // Call packages RxProcess function
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800cf38:	6879      	ldr	r1, [r7, #4]
 800cf3a:	2001      	movs	r0, #1
 800cf3c:	f000 f972 	bl	800d224 <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass( &deviceClass );
 800cf40:	f107 030f 	add.w	r3, r7, #15
 800cf44:	4618      	mov	r0, r3
 800cf46:	f7ff ff1b 	bl	800cd80 <LmHandlerGetCurrentClass>
            .Port = 0
        };
        LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true);
    }
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if ( ( mcpsIndication->FramePending == true ) && ( deviceClass == CLASS_A ) )
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	795b      	ldrb	r3, [r3, #5]
 800cf4e:	2b01      	cmp	r3, #1
 800cf50:	d107      	bne.n	800cf62 <McpsIndication+0xba>
 800cf52:	7bfb      	ldrb	r3, [r7, #15]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d104      	bne.n	800cf62 <McpsIndication+0xba>
    {
        // The server signals that it has pending data to be sent.
        // We schedule an uplink as soon as possible to flush the server.
        IsUplinkTxPending = true;
 800cf58:	4b05      	ldr	r3, [pc, #20]	@ (800cf70 <McpsIndication+0xc8>)
 800cf5a:	2201      	movs	r2, #1
 800cf5c:	701a      	strb	r2, [r3, #0]
 800cf5e:	e000      	b.n	800cf62 <McpsIndication+0xba>
        return;
 800cf60:	bf00      	nop
    }
#endif /* LORAMAC_VERSION */
}
 800cf62:	3718      	adds	r7, #24
 800cf64:	46bd      	mov	sp, r7
 800cf66:	bd80      	pop	{r7, pc}
 800cf68:	200000b4 	.word	0x200000b4
 800cf6c:	20000778 	.word	0x20000778
 800cf70:	200007a4 	.word	0x200007a4

0800cf74 <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800cf74:	b580      	push	{r7, lr}
 800cf76:	b08c      	sub	sp, #48	@ 0x30
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 800cf7c:	4b3c      	ldr	r3, [pc, #240]	@ (800d070 <MlmeConfirm+0xfc>)
 800cf7e:	2200      	movs	r2, #0
 800cf80:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	785a      	ldrb	r2, [r3, #1]
 800cf86:	4b3a      	ldr	r3, [pc, #232]	@ (800d070 <MlmeConfirm+0xfc>)
 800cf88:	705a      	strb	r2, [r3, #1]
    LmHandlerCallbacks->OnTxData( &TxParams );
 800cf8a:	4b3a      	ldr	r3, [pc, #232]	@ (800d074 <MlmeConfirm+0x100>)
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf90:	4837      	ldr	r0, [pc, #220]	@ (800d070 <MlmeConfirm+0xfc>)
 800cf92:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800cf94:	6879      	ldr	r1, [r7, #4]
 800cf96:	2002      	movs	r0, #2
 800cf98:	f000 f944 	bl	800d224 <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	781b      	ldrb	r3, [r3, #0]
 800cfa0:	3b01      	subs	r3, #1
 800cfa2:	2b0b      	cmp	r3, #11
 800cfa4:	d85c      	bhi.n	800d060 <MlmeConfirm+0xec>
 800cfa6:	a201      	add	r2, pc, #4	@ (adr r2, 800cfac <MlmeConfirm+0x38>)
 800cfa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfac:	0800cfdd 	.word	0x0800cfdd
 800cfb0:	0800d061 	.word	0x0800d061
 800cfb4:	0800d061 	.word	0x0800d061
 800cfb8:	0800d02f 	.word	0x0800d02f
 800cfbc:	0800d061 	.word	0x0800d061
 800cfc0:	0800d061 	.word	0x0800d061
 800cfc4:	0800d061 	.word	0x0800d061
 800cfc8:	0800d061 	.word	0x0800d061
 800cfcc:	0800d061 	.word	0x0800d061
 800cfd0:	0800d061 	.word	0x0800d061
 800cfd4:	0800d047 	.word	0x0800d047
 800cfd8:	0800d061 	.word	0x0800d061
    {
    case MLME_JOIN:
        {
            MibRequestConfirm_t mibReq;
            mibReq.Type = MIB_DEV_ADDR;
 800cfdc:	2306      	movs	r3, #6
 800cfde:	733b      	strb	r3, [r7, #12]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800cfe0:	f107 030c 	add.w	r3, r7, #12
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	f004 fda3 	bl	8011b30 <LoRaMacMibGetRequestConfirm>
            CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800cfea:	693b      	ldr	r3, [r7, #16]
 800cfec:	4a22      	ldr	r2, [pc, #136]	@ (800d078 <MlmeConfirm+0x104>)
 800cfee:	6153      	str	r3, [r2, #20]
            LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800cff0:	4822      	ldr	r0, [pc, #136]	@ (800d07c <MlmeConfirm+0x108>)
 800cff2:	f7ff fee5 	bl	800cdc0 <LmHandlerGetTxDatarate>

            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	785b      	ldrb	r3, [r3, #1]
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d108      	bne.n	800d010 <MlmeConfirm+0x9c>
            {
                // Status is OK, node has joined the network
                JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800cffe:	4b20      	ldr	r3, [pc, #128]	@ (800d080 <MlmeConfirm+0x10c>)
 800d000:	2200      	movs	r2, #0
 800d002:	715a      	strb	r2, [r3, #5]
                LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800d004:	4b1f      	ldr	r3, [pc, #124]	@ (800d084 <MlmeConfirm+0x110>)
 800d006:	785b      	ldrb	r3, [r3, #1]
 800d008:	4618      	mov	r0, r3
 800d00a:	f7ff fe31 	bl	800cc70 <LmHandlerRequestClass>
 800d00e:	e002      	b.n	800d016 <MlmeConfirm+0xa2>
            }
            else
            {
                // Join was not successful. Try to join again
                JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800d010:	4b1b      	ldr	r3, [pc, #108]	@ (800d080 <MlmeConfirm+0x10c>)
 800d012:	22ff      	movs	r2, #255	@ 0xff
 800d014:	715a      	strb	r2, [r3, #5]
            }
            // Notify upper layer
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800d016:	4b17      	ldr	r3, [pc, #92]	@ (800d074 <MlmeConfirm+0x100>)
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d01c:	4818      	ldr	r0, [pc, #96]	@ (800d080 <MlmeConfirm+0x10c>)
 800d01e:	4798      	blx	r3
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	785b      	ldrb	r3, [r3, #1]
 800d024:	2b00      	cmp	r3, #0
 800d026:	d11d      	bne.n	800d064 <MlmeConfirm+0xf0>
            {
                SecureElementPrintSessionKeys();
 800d028:	f7ff f896 	bl	800c158 <SecureElementPrintSessionKeys>
            }
        }
        break;
 800d02c:	e01a      	b.n	800d064 <MlmeConfirm+0xf0>
    case MLME_LINK_CHECK:
        {
            RxParams.LinkCheck = true;
 800d02e:	4b16      	ldr	r3, [pc, #88]	@ (800d088 <MlmeConfirm+0x114>)
 800d030:	2201      	movs	r2, #1
 800d032:	745a      	strb	r2, [r3, #17]
            RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	7a1a      	ldrb	r2, [r3, #8]
 800d038:	4b13      	ldr	r3, [pc, #76]	@ (800d088 <MlmeConfirm+0x114>)
 800d03a:	749a      	strb	r2, [r3, #18]
            RxParams.NbGateways = mlmeConfirm->NbGateways;
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	7a5a      	ldrb	r2, [r3, #9]
 800d040:	4b11      	ldr	r3, [pc, #68]	@ (800d088 <MlmeConfirm+0x114>)
 800d042:	74da      	strb	r2, [r3, #19]
        }
        break;
 800d044:	e00f      	b.n	800d066 <MlmeConfirm+0xf2>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
    case MLME_BEACON_ACQUISITION:
        {
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	785b      	ldrb	r3, [r3, #1]
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d105      	bne.n	800d05a <MlmeConfirm+0xe6>
            {
                // Beacon has been acquired
                // Request server for ping slot
                LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
 800d04e:	4b0d      	ldr	r3, [pc, #52]	@ (800d084 <MlmeConfirm+0x110>)
 800d050:	7b1b      	ldrb	r3, [r3, #12]
 800d052:	4618      	mov	r0, r3
 800d054:	f7ff fe00 	bl	800cc58 <LmHandlerPingSlotReq>
                // Beacon not acquired
                // Request Device Time again.
                LmHandlerDeviceTimeReq( );
            }
        }
        break;
 800d058:	e005      	b.n	800d066 <MlmeConfirm+0xf2>
                LmHandlerDeviceTimeReq( );
 800d05a:	f7ff fde1 	bl	800cc20 <LmHandlerDeviceTimeReq>
        break;
 800d05e:	e002      	b.n	800d066 <MlmeConfirm+0xf2>
            }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
    default:
        break;
 800d060:	bf00      	nop
 800d062:	e000      	b.n	800d066 <MlmeConfirm+0xf2>
        break;
 800d064:	bf00      	nop
    }
}
 800d066:	bf00      	nop
 800d068:	3730      	adds	r7, #48	@ 0x30
 800d06a:	46bd      	mov	sp, r7
 800d06c:	bd80      	pop	{r7, pc}
 800d06e:	bf00      	nop
 800d070:	20000098 	.word	0x20000098
 800d074:	20000778 	.word	0x20000778
 800d078:	20000078 	.word	0x20000078
 800d07c:	20000094 	.word	0x20000094
 800d080:	20000090 	.word	0x20000090
 800d084:	20000764 	.word	0x20000764
 800d088:	200000b4 	.word	0x200000b4

0800d08c <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *rxStatus )
{
 800d08c:	b580      	push	{r7, lr}
 800d08e:	b082      	sub	sp, #8
 800d090:	af00      	add	r7, sp, #0
 800d092:	6078      	str	r0, [r7, #4]
 800d094:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 800d096:	4b24      	ldr	r3, [pc, #144]	@ (800d128 <MlmeIndication+0x9c>)
 800d098:	2200      	movs	r2, #0
 800d09a:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	785a      	ldrb	r2, [r3, #1]
 800d0a0:	4b21      	ldr	r3, [pc, #132]	@ (800d128 <MlmeIndication+0x9c>)
 800d0a2:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	789b      	ldrb	r3, [r3, #2]
 800d0a8:	b25a      	sxtb	r2, r3
 800d0aa:	4b1f      	ldr	r3, [pc, #124]	@ (800d128 <MlmeIndication+0x9c>)
 800d0ac:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800d0ae:	683b      	ldr	r3, [r7, #0]
 800d0b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d0b4:	b25a      	sxtb	r2, r3
 800d0b6:	4b1c      	ldr	r3, [pc, #112]	@ (800d128 <MlmeIndication+0x9c>)
 800d0b8:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800d0ba:	683b      	ldr	r3, [r7, #0]
 800d0bc:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800d0c0:	4b19      	ldr	r3, [pc, #100]	@ (800d128 <MlmeIndication+0x9c>)
 800d0c2:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800d0c4:	683b      	ldr	r3, [r7, #0]
 800d0c6:	78da      	ldrb	r2, [r3, #3]
 800d0c8:	4b17      	ldr	r3, [pc, #92]	@ (800d128 <MlmeIndication+0x9c>)
 800d0ca:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	685b      	ldr	r3, [r3, #4]
 800d0d0:	4a15      	ldr	r2, [pc, #84]	@ (800d128 <MlmeIndication+0x9c>)
 800d0d2:	60d3      	str	r3, [r2, #12]
    if ((mlmeIndication->MlmeIndication != MLME_BEACON) && (mlmeIndication->MlmeIndication != MLME_BEACON_LOST))
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	781b      	ldrb	r3, [r3, #0]
 800d0d8:	2b0a      	cmp	r3, #10
 800d0da:	d009      	beq.n	800d0f0 <MlmeIndication+0x64>
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	781b      	ldrb	r3, [r3, #0]
 800d0e0:	2b0e      	cmp	r3, #14
 800d0e2:	d005      	beq.n	800d0f0 <MlmeIndication+0x64>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800d0e4:	4b11      	ldr	r3, [pc, #68]	@ (800d12c <MlmeIndication+0xa0>)
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0ea:	490f      	ldr	r1, [pc, #60]	@ (800d128 <MlmeIndication+0x9c>)
 800d0ec:	2000      	movs	r0, #0
 800d0ee:	4798      	blx	r3
    }

    // Call packages RxProcess function
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 800d0f0:	6879      	ldr	r1, [r7, #4]
 800d0f2:	2003      	movs	r0, #3
 800d0f4:	f000 f896 	bl	800d224 <LmHandlerPackagesNotify>

    switch( mlmeIndication->MlmeIndication )
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	781b      	ldrb	r3, [r3, #0]
 800d0fc:	2b0e      	cmp	r3, #14
 800d0fe:	d00a      	beq.n	800d116 <MlmeIndication+0x8a>
 800d100:	2b0e      	cmp	r3, #14
 800d102:	dc0a      	bgt.n	800d11a <MlmeIndication+0x8e>
 800d104:	2b06      	cmp	r3, #6
 800d106:	d002      	beq.n	800d10e <MlmeIndication+0x82>
 800d108:	2b0a      	cmp	r3, #10
 800d10a:	d008      	beq.n	800d11e <MlmeIndication+0x92>
            }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
    default:
        break;
 800d10c:	e005      	b.n	800d11a <MlmeIndication+0x8e>
            IsUplinkTxPending = true;
 800d10e:	4b08      	ldr	r3, [pc, #32]	@ (800d130 <MlmeIndication+0xa4>)
 800d110:	2201      	movs	r2, #1
 800d112:	701a      	strb	r2, [r3, #0]
        break;
 800d114:	e004      	b.n	800d120 <MlmeIndication+0x94>
        break;
 800d116:	bf00      	nop
 800d118:	e002      	b.n	800d120 <MlmeIndication+0x94>
        break;
 800d11a:	bf00      	nop
 800d11c:	e000      	b.n	800d120 <MlmeIndication+0x94>
        break;
 800d11e:	bf00      	nop
    }
}
 800d120:	bf00      	nop
 800d122:	3708      	adds	r7, #8
 800d124:	46bd      	mov	sp, r7
 800d126:	bd80      	pop	{r7, pc}
 800d128:	200000b4 	.word	0x200000b4
 800d12c:	20000778 	.word	0x20000778
 800d130:	200007a4 	.word	0x200007a4

0800d134 <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 800d134:	b580      	push	{r7, lr}
 800d136:	b084      	sub	sp, #16
 800d138:	af00      	add	r7, sp, #0
 800d13a:	4603      	mov	r3, r0
 800d13c:	6039      	str	r1, [r7, #0]
 800d13e:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 800d140:	2300      	movs	r3, #0
 800d142:	60fb      	str	r3, [r7, #12]
    switch( id )
 800d144:	79fb      	ldrb	r3, [r7, #7]
 800d146:	2b00      	cmp	r3, #0
 800d148:	d103      	bne.n	800d152 <LmHandlerPackageRegister+0x1e>
    {
        case PACKAGE_ID_COMPLIANCE:
        {
            package = LmhpCompliancePackageFactory( );
 800d14a:	f000 fa1d 	bl	800d588 <LmhpCompliancePackageFactory>
 800d14e:	60f8      	str	r0, [r7, #12]
            break;
 800d150:	e000      	b.n	800d154 <LmHandlerPackageRegister+0x20>
        {
#if (!defined (LORAWAN_DATA_DISTRIB_MGT) || (LORAWAN_DATA_DISTRIB_MGT == 0))
#else /*LORAWAN_DATA_DISTRIB_MGT == 1*/
            LmhpPackagesRegister( id, &package );
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
            break;
 800d152:	bf00      	nop
        }
    }
    if( package != NULL )
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d035      	beq.n	800d1c6 <LmHandlerPackageRegister+0x92>
    {
        LmHandlerPackages[id] = package;
 800d15a:	79fb      	ldrb	r3, [r7, #7]
 800d15c:	491d      	ldr	r1, [pc, #116]	@ (800d1d4 <LmHandlerPackageRegister+0xa0>)
 800d15e:	68fa      	ldr	r2, [r7, #12]
 800d160:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800d164:	79fb      	ldrb	r3, [r7, #7]
 800d166:	4a1b      	ldr	r2, [pc, #108]	@ (800d1d4 <LmHandlerPackageRegister+0xa0>)
 800d168:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d16c:	4a1a      	ldr	r2, [pc, #104]	@ (800d1d8 <LmHandlerPackageRegister+0xa4>)
 800d16e:	629a      	str	r2, [r3, #40]	@ 0x28
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
 800d170:	4b1a      	ldr	r3, [pc, #104]	@ (800d1dc <LmHandlerPackageRegister+0xa8>)
 800d172:	681a      	ldr	r2, [r3, #0]
 800d174:	79fb      	ldrb	r3, [r7, #7]
 800d176:	4917      	ldr	r1, [pc, #92]	@ (800d1d4 <LmHandlerPackageRegister+0xa0>)
 800d178:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d17c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800d17e:	631a      	str	r2, [r3, #48]	@ 0x30
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
 800d180:	4b16      	ldr	r3, [pc, #88]	@ (800d1dc <LmHandlerPackageRegister+0xa8>)
 800d182:	681a      	ldr	r2, [r3, #0]
 800d184:	79fb      	ldrb	r3, [r7, #7]
 800d186:	4913      	ldr	r1, [pc, #76]	@ (800d1d4 <LmHandlerPackageRegister+0xa0>)
 800d188:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d18c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800d18e:	635a      	str	r2, [r3, #52]	@ 0x34
#endif /* LORAMAC_VERSION */
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800d190:	79fb      	ldrb	r3, [r7, #7]
 800d192:	4a10      	ldr	r2, [pc, #64]	@ (800d1d4 <LmHandlerPackageRegister+0xa0>)
 800d194:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d198:	4a11      	ldr	r2, [pc, #68]	@ (800d1e0 <LmHandlerPackageRegister+0xac>)
 800d19a:	62da      	str	r2, [r3, #44]	@ 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800d19c:	4b0f      	ldr	r3, [pc, #60]	@ (800d1dc <LmHandlerPackageRegister+0xa8>)
 800d19e:	681a      	ldr	r2, [r3, #0]
 800d1a0:	79fb      	ldrb	r3, [r7, #7]
 800d1a2:	490c      	ldr	r1, [pc, #48]	@ (800d1d4 <LmHandlerPackageRegister+0xa0>)
 800d1a4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d1a8:	6992      	ldr	r2, [r2, #24]
 800d1aa:	615a      	str	r2, [r3, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800d1ac:	79fb      	ldrb	r3, [r7, #7]
 800d1ae:	4a09      	ldr	r2, [pc, #36]	@ (800d1d4 <LmHandlerPackageRegister+0xa0>)
 800d1b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d1b4:	685b      	ldr	r3, [r3, #4]
 800d1b6:	4a0b      	ldr	r2, [pc, #44]	@ (800d1e4 <LmHandlerPackageRegister+0xb0>)
 800d1b8:	6851      	ldr	r1, [r2, #4]
 800d1ba:	4a0a      	ldr	r2, [pc, #40]	@ (800d1e4 <LmHandlerPackageRegister+0xb0>)
 800d1bc:	7852      	ldrb	r2, [r2, #1]
 800d1be:	6838      	ldr	r0, [r7, #0]
 800d1c0:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 800d1c2:	2300      	movs	r3, #0
 800d1c4:	e001      	b.n	800d1ca <LmHandlerPackageRegister+0x96>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800d1c6:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	3710      	adds	r7, #16
 800d1ce:	46bd      	mov	sp, r7
 800d1d0:	bd80      	pop	{r7, pc}
 800d1d2:	bf00      	nop
 800d1d4:	20000750 	.word	0x20000750
 800d1d8:	0800c959 	.word	0x0800c959
 800d1dc:	20000778 	.word	0x20000778
 800d1e0:	0800cc21 	.word	0x0800cc21
 800d1e4:	200000c8 	.word	0x200000c8

0800d1e8 <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 800d1e8:	b580      	push	{r7, lr}
 800d1ea:	b082      	sub	sp, #8
 800d1ec:	af00      	add	r7, sp, #0
 800d1ee:	4603      	mov	r3, r0
 800d1f0:	71fb      	strb	r3, [r7, #7]
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 800d1f2:	79fb      	ldrb	r3, [r7, #7]
 800d1f4:	2b04      	cmp	r3, #4
 800d1f6:	d80e      	bhi.n	800d216 <LmHandlerPackageIsInitialized+0x2e>
 800d1f8:	79fb      	ldrb	r3, [r7, #7]
 800d1fa:	4a09      	ldr	r2, [pc, #36]	@ (800d220 <LmHandlerPackageIsInitialized+0x38>)
 800d1fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d200:	689b      	ldr	r3, [r3, #8]
 800d202:	2b00      	cmp	r3, #0
 800d204:	d007      	beq.n	800d216 <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 800d206:	79fb      	ldrb	r3, [r7, #7]
 800d208:	4a05      	ldr	r2, [pc, #20]	@ (800d220 <LmHandlerPackageIsInitialized+0x38>)
 800d20a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d20e:	689b      	ldr	r3, [r3, #8]
 800d210:	4798      	blx	r3
 800d212:	4603      	mov	r3, r0
 800d214:	e000      	b.n	800d218 <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 800d216:	2300      	movs	r3, #0
    }
}
 800d218:	4618      	mov	r0, r3
 800d21a:	3708      	adds	r7, #8
 800d21c:	46bd      	mov	sp, r7
 800d21e:	bd80      	pop	{r7, pc}
 800d220:	20000750 	.word	0x20000750

0800d224 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800d224:	b580      	push	{r7, lr}
 800d226:	b084      	sub	sp, #16
 800d228:	af00      	add	r7, sp, #0
 800d22a:	4603      	mov	r3, r0
 800d22c:	6039      	str	r1, [r7, #0]
 800d22e:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d230:	2300      	movs	r3, #0
 800d232:	73fb      	strb	r3, [r7, #15]
 800d234:	e067      	b.n	800d306 <LmHandlerPackagesNotify+0xe2>
    {
        if( LmHandlerPackages[i] != NULL )
 800d236:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d23a:	4a37      	ldr	r2, [pc, #220]	@ (800d318 <LmHandlerPackagesNotify+0xf4>)
 800d23c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d240:	2b00      	cmp	r3, #0
 800d242:	d05a      	beq.n	800d2fa <LmHandlerPackagesNotify+0xd6>
        {
            switch( notifyType )
 800d244:	79fb      	ldrb	r3, [r7, #7]
 800d246:	2b03      	cmp	r3, #3
 800d248:	d84e      	bhi.n	800d2e8 <LmHandlerPackagesNotify+0xc4>
 800d24a:	a201      	add	r2, pc, #4	@ (adr r2, 800d250 <LmHandlerPackagesNotify+0x2c>)
 800d24c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d250:	0800d261 	.word	0x0800d261
 800d254:	0800d283 	.word	0x0800d283
 800d258:	0800d2a5 	.word	0x0800d2a5
 800d25c:	0800d2c7 	.word	0x0800d2c7
            {
                case PACKAGE_MCPS_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800d260:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d264:	4a2c      	ldr	r2, [pc, #176]	@ (800d318 <LmHandlerPackagesNotify+0xf4>)
 800d266:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d26a:	699b      	ldr	r3, [r3, #24]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d03d      	beq.n	800d2ec <LmHandlerPackagesNotify+0xc8>
                    {
                        LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t* ) params );
 800d270:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d274:	4a28      	ldr	r2, [pc, #160]	@ (800d318 <LmHandlerPackagesNotify+0xf4>)
 800d276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d27a:	699b      	ldr	r3, [r3, #24]
 800d27c:	6838      	ldr	r0, [r7, #0]
 800d27e:	4798      	blx	r3
                    }
                    break;
 800d280:	e034      	b.n	800d2ec <LmHandlerPackagesNotify+0xc8>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
                          ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ))))
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                    if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
 800d282:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d286:	4a24      	ldr	r2, [pc, #144]	@ (800d318 <LmHandlerPackagesNotify+0xf4>)
 800d288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d28c:	69db      	ldr	r3, [r3, #28]
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d02e      	beq.n	800d2f0 <LmHandlerPackagesNotify+0xcc>
#endif /* LORAMAC_VERSION */
                    {
                        LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t* )params );
 800d292:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d296:	4a20      	ldr	r2, [pc, #128]	@ (800d318 <LmHandlerPackagesNotify+0xf4>)
 800d298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d29c:	69db      	ldr	r3, [r3, #28]
 800d29e:	6838      	ldr	r0, [r7, #0]
 800d2a0:	4798      	blx	r3
                    }
                    break;
 800d2a2:	e025      	b.n	800d2f0 <LmHandlerPackagesNotify+0xcc>
                }
                case PACKAGE_MLME_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800d2a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d2a8:	4a1b      	ldr	r2, [pc, #108]	@ (800d318 <LmHandlerPackagesNotify+0xf4>)
 800d2aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d2ae:	6a1b      	ldr	r3, [r3, #32]
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d01f      	beq.n	800d2f4 <LmHandlerPackagesNotify+0xd0>
                    {
                        LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t* )params );
 800d2b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d2b8:	4a17      	ldr	r2, [pc, #92]	@ (800d318 <LmHandlerPackagesNotify+0xf4>)
 800d2ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d2be:	6a1b      	ldr	r3, [r3, #32]
 800d2c0:	6838      	ldr	r0, [r7, #0]
 800d2c2:	4798      	blx	r3
                    }
                    break;
 800d2c4:	e016      	b.n	800d2f4 <LmHandlerPackagesNotify+0xd0>
                }
                case PACKAGE_MLME_INDICATION:
                {
                    if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 800d2c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d2ca:	4a13      	ldr	r2, [pc, #76]	@ (800d318 <LmHandlerPackagesNotify+0xf4>)
 800d2cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d2d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d010      	beq.n	800d2f8 <LmHandlerPackagesNotify+0xd4>
                    {
                        LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 800d2d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d2da:	4a0f      	ldr	r2, [pc, #60]	@ (800d318 <LmHandlerPackagesNotify+0xf4>)
 800d2dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d2e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d2e2:	6838      	ldr	r0, [r7, #0]
 800d2e4:	4798      	blx	r3
                    }
                    break;
 800d2e6:	e007      	b.n	800d2f8 <LmHandlerPackagesNotify+0xd4>
                }
                default:
                {
                    break;
 800d2e8:	bf00      	nop
 800d2ea:	e006      	b.n	800d2fa <LmHandlerPackagesNotify+0xd6>
                    break;
 800d2ec:	bf00      	nop
 800d2ee:	e004      	b.n	800d2fa <LmHandlerPackagesNotify+0xd6>
                    break;
 800d2f0:	bf00      	nop
 800d2f2:	e002      	b.n	800d2fa <LmHandlerPackagesNotify+0xd6>
                    break;
 800d2f4:	bf00      	nop
 800d2f6:	e000      	b.n	800d2fa <LmHandlerPackagesNotify+0xd6>
                    break;
 800d2f8:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d2fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d2fe:	b2db      	uxtb	r3, r3
 800d300:	3301      	adds	r3, #1
 800d302:	b2db      	uxtb	r3, r3
 800d304:	73fb      	strb	r3, [r7, #15]
 800d306:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d30a:	2b04      	cmp	r3, #4
 800d30c:	dd93      	ble.n	800d236 <LmHandlerPackagesNotify+0x12>
                }
            }
        }
    }
}
 800d30e:	bf00      	nop
 800d310:	bf00      	nop
 800d312:	3710      	adds	r7, #16
 800d314:	46bd      	mov	sp, r7
 800d316:	bd80      	pop	{r7, pc}
 800d318:	20000750 	.word	0x20000750

0800d31c <LmHandlerPackageIsTxPending>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool LmHandlerPackageIsTxPending( void )
{
 800d31c:	b580      	push	{r7, lr}
 800d31e:	b082      	sub	sp, #8
 800d320:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d322:	2300      	movs	r3, #0
 800d324:	71fb      	strb	r3, [r7, #7]
 800d326:	e018      	b.n	800d35a <LmHandlerPackageIsTxPending+0x3e>
    {
        if( LmHandlerPackages[i] != NULL )
 800d328:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d32c:	4a0f      	ldr	r2, [pc, #60]	@ (800d36c <LmHandlerPackageIsTxPending+0x50>)
 800d32e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d332:	2b00      	cmp	r3, #0
 800d334:	d00b      	beq.n	800d34e <LmHandlerPackageIsTxPending+0x32>
        {
            if( LmHandlerPackages[i]->IsTxPending( ) == true )
 800d336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d33a:	4a0c      	ldr	r2, [pc, #48]	@ (800d36c <LmHandlerPackageIsTxPending+0x50>)
 800d33c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d340:	68db      	ldr	r3, [r3, #12]
 800d342:	4798      	blx	r3
 800d344:	4603      	mov	r3, r0
 800d346:	2b00      	cmp	r3, #0
 800d348:	d001      	beq.n	800d34e <LmHandlerPackageIsTxPending+0x32>
            {
                return true;
 800d34a:	2301      	movs	r3, #1
 800d34c:	e00a      	b.n	800d364 <LmHandlerPackageIsTxPending+0x48>
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d34e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d352:	b2db      	uxtb	r3, r3
 800d354:	3301      	adds	r3, #1
 800d356:	b2db      	uxtb	r3, r3
 800d358:	71fb      	strb	r3, [r7, #7]
 800d35a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d35e:	2b04      	cmp	r3, #4
 800d360:	dde2      	ble.n	800d328 <LmHandlerPackageIsTxPending+0xc>
            }
        }
    }
    return false;
 800d362:	2300      	movs	r3, #0
}
 800d364:	4618      	mov	r0, r3
 800d366:	3708      	adds	r7, #8
 800d368:	46bd      	mov	sp, r7
 800d36a:	bd80      	pop	{r7, pc}
 800d36c:	20000750 	.word	0x20000750

0800d370 <LmHandlerPackagesProcess>:
#endif /* LORAMAC_VERSION */

static void LmHandlerPackagesProcess( void )
{
 800d370:	b580      	push	{r7, lr}
 800d372:	b082      	sub	sp, #8
 800d374:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d376:	2300      	movs	r3, #0
 800d378:	71fb      	strb	r3, [r7, #7]
 800d37a:	e022      	b.n	800d3c2 <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800d37c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d380:	4a14      	ldr	r2, [pc, #80]	@ (800d3d4 <LmHandlerPackagesProcess+0x64>)
 800d382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d015      	beq.n	800d3b6 <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800d38a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d38e:	4a11      	ldr	r2, [pc, #68]	@ (800d3d4 <LmHandlerPackagesProcess+0x64>)
 800d390:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d394:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800d396:	2b00      	cmp	r3, #0
 800d398:	d00d      	beq.n	800d3b6 <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 800d39a:	79fb      	ldrb	r3, [r7, #7]
 800d39c:	4618      	mov	r0, r3
 800d39e:	f7ff ff23 	bl	800d1e8 <LmHandlerPackageIsInitialized>
 800d3a2:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d006      	beq.n	800d3b6 <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 800d3a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d3ac:	4a09      	ldr	r2, [pc, #36]	@ (800d3d4 <LmHandlerPackagesProcess+0x64>)
 800d3ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d3b2:	691b      	ldr	r3, [r3, #16]
 800d3b4:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d3b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d3ba:	b2db      	uxtb	r3, r3
 800d3bc:	3301      	adds	r3, #1
 800d3be:	b2db      	uxtb	r3, r3
 800d3c0:	71fb      	strb	r3, [r7, #7]
 800d3c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d3c6:	2b04      	cmp	r3, #4
 800d3c8:	ddd8      	ble.n	800d37c <LmHandlerPackagesProcess+0xc>
        }
    }
}
 800d3ca:	bf00      	nop
 800d3cc:	bf00      	nop
 800d3ce:	3708      	adds	r7, #8
 800d3d0:	46bd      	mov	sp, r7
 800d3d2:	bd80      	pop	{r7, pc}
 800d3d4:	20000750 	.word	0x20000750

0800d3d8 <LmHandlerGetVersion>:
 * ST ADDITIONAL FUNCTIONS
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion(LmHandlerVersionType_t lmhType, uint32_t *featureVersion)
{
 800d3d8:	b480      	push	{r7}
 800d3da:	b083      	sub	sp, #12
 800d3dc:	af00      	add	r7, sp, #0
 800d3de:	4603      	mov	r3, r0
 800d3e0:	6039      	str	r1, [r7, #0]
 800d3e2:	71fb      	strb	r3, [r7, #7]
    if (featureVersion == NULL)
 800d3e4:	683b      	ldr	r3, [r7, #0]
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d102      	bne.n	800d3f0 <LmHandlerGetVersion+0x18>
    {
        return LORAMAC_HANDLER_ERROR;
 800d3ea:	f04f 33ff 	mov.w	r3, #4294967295
 800d3ee:	e00e      	b.n	800d40e <LmHandlerGetVersion+0x36>
    }

    switch(lmhType)
 800d3f0:	79fb      	ldrb	r3, [r7, #7]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d002      	beq.n	800d3fc <LmHandlerGetVersion+0x24>
 800d3f6:	2b01      	cmp	r3, #1
 800d3f8:	d004      	beq.n	800d404 <LmHandlerGetVersion+0x2c>
            break;
        case LORAMAC_HANDLER_REGION_VERSION:
            *featureVersion = REGION_VERSION;
            break;
        default:
          break;
 800d3fa:	e007      	b.n	800d40c <LmHandlerGetVersion+0x34>
            *featureVersion = LORAMAC_VERSION;
 800d3fc:	683b      	ldr	r3, [r7, #0]
 800d3fe:	4a06      	ldr	r2, [pc, #24]	@ (800d418 <LmHandlerGetVersion+0x40>)
 800d400:	601a      	str	r2, [r3, #0]
            break;
 800d402:	e003      	b.n	800d40c <LmHandlerGetVersion+0x34>
            *featureVersion = REGION_VERSION;
 800d404:	683b      	ldr	r3, [r7, #0]
 800d406:	4a05      	ldr	r2, [pc, #20]	@ (800d41c <LmHandlerGetVersion+0x44>)
 800d408:	601a      	str	r2, [r3, #0]
            break;
 800d40a:	bf00      	nop
    }

    return LORAMAC_HANDLER_SUCCESS;
 800d40c:	2300      	movs	r3, #0
}
 800d40e:	4618      	mov	r0, r3
 800d410:	370c      	adds	r7, #12
 800d412:	46bd      	mov	sp, r7
 800d414:	bc80      	pop	{r7}
 800d416:	4770      	bx	lr
 800d418:	01000400 	.word	0x01000400
 800d41c:	02010001 	.word	0x02010001

0800d420 <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop(void)
{
 800d420:	b580      	push	{r7, lr}
 800d422:	af00      	add	r7, sp, #0
    if (LoRaMacDeInitialization() == LORAMAC_STATUS_OK)
 800d424:	f005 fb76 	bl	8012b14 <LoRaMacDeInitialization>
 800d428:	4603      	mov	r3, r0
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d101      	bne.n	800d432 <LmHandlerStop+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800d42e:	2300      	movs	r3, #0
 800d430:	e001      	b.n	800d436 <LmHandlerStop+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800d432:	f06f 0301 	mvn.w	r3, #1
    }
}
 800d436:	4618      	mov	r0, r3
 800d438:	bd80      	pop	{r7, pc}

0800d43a <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt(void)
{
 800d43a:	b580      	push	{r7, lr}
 800d43c:	af00      	add	r7, sp, #0
    if (LoRaMacHalt() == LORAMAC_STATUS_OK)
 800d43e:	f004 faaf 	bl	80119a0 <LoRaMacHalt>
 800d442:	4603      	mov	r3, r0
 800d444:	2b00      	cmp	r3, #0
 800d446:	d101      	bne.n	800d44c <LmHandlerHalt+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800d448:	2300      	movs	r3, #0
 800d44a:	e001      	b.n	800d450 <LmHandlerHalt+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800d44c:	f06f 0301 	mvn.w	r3, #1
    }
}
 800d450:	4618      	mov	r0, r3
 800d452:	bd80      	pop	{r7, pc}

0800d454 <LmHandlerNvmDataStore>:
        return LORAMAC_HANDLER_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 800d454:	b580      	push	{r7, lr}
 800d456:	b08e      	sub	sp, #56	@ 0x38
 800d458:	af00      	add	r7, sp, #0
    LoRaMacNvmData_t *nvm;
    uint32_t nvm_size;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800d45a:	2300      	movs	r3, #0
 800d45c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    int32_t status = NVM_DATA_OK;
 800d460:	2300      	movs	r3, #0
 800d462:	633b      	str	r3, [r7, #48]	@ 0x30

    lmhStatus = LmHandlerHalt();
 800d464:	f7ff ffe9 	bl	800d43a <LmHandlerHalt>
 800d468:	4603      	mov	r3, r0
 800d46a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if (lmhStatus == LORAMAC_HANDLER_SUCCESS)
 800d46e:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800d472:	2b00      	cmp	r3, #0
 800d474:	d12f      	bne.n	800d4d6 <LmHandlerNvmDataStore+0x82>
    {
        status = NvmDataMgmtStoreBegin();
 800d476:	f000 f859 	bl	800d52c <NvmDataMgmtStoreBegin>
 800d47a:	6338      	str	r0, [r7, #48]	@ 0x30

        if (status == NVM_DATA_NO_UPDATED_DATA)
 800d47c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d47e:	f113 0f02 	cmn.w	r3, #2
 800d482:	d103      	bne.n	800d48c <LmHandlerNvmDataStore+0x38>
        {
            lmhStatus = LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE;
 800d484:	23f8      	movs	r3, #248	@ 0xf8
 800d486:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800d48a:	e01c      	b.n	800d4c6 <LmHandlerNvmDataStore+0x72>
        }
        else if (( status != NVM_DATA_OK ) || (LmHandlerCallbacks->OnStoreContextRequest == NULL))
 800d48c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d104      	bne.n	800d49c <LmHandlerNvmDataStore+0x48>
 800d492:	4b1b      	ldr	r3, [pc, #108]	@ (800d500 <LmHandlerNvmDataStore+0xac>)
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	695b      	ldr	r3, [r3, #20]
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d103      	bne.n	800d4a4 <LmHandlerNvmDataStore+0x50>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800d49c:	23ff      	movs	r3, #255	@ 0xff
 800d49e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800d4a2:	e010      	b.n	800d4c6 <LmHandlerNvmDataStore+0x72>
        }
        else
        {
          MibRequestConfirm_t mibReq;
          mibReq.Type = MIB_NVM_CTXS;
 800d4a4:	2327      	movs	r3, #39	@ 0x27
 800d4a6:	713b      	strb	r3, [r7, #4]
          LoRaMacMibGetRequestConfirm( &mibReq );
 800d4a8:	1d3b      	adds	r3, r7, #4
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	f004 fb40 	bl	8011b30 <LoRaMacMibGetRequestConfirm>
          nvm = mibReq.Param.Contexts;
 800d4b0:	68bb      	ldr	r3, [r7, #8]
 800d4b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
          nvm_size = ((sizeof(LoRaMacNvmData_t) + 7) & ~0x07);
 800d4b4:	f44f 63b0 	mov.w	r3, #1408	@ 0x580
 800d4b8:	62bb      	str	r3, [r7, #40]	@ 0x28
          LmHandlerCallbacks->OnStoreContextRequest(nvm, nvm_size);
 800d4ba:	4b11      	ldr	r3, [pc, #68]	@ (800d500 <LmHandlerNvmDataStore+0xac>)
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	695b      	ldr	r3, [r3, #20]
 800d4c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d4c2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d4c4:	4798      	blx	r3
        }

        if ( NvmDataMgmtStoreEnd() != NVM_DATA_OK )
 800d4c6:	f000 f847 	bl	800d558 <NvmDataMgmtStoreEnd>
 800d4ca:	4603      	mov	r3, r0
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d002      	beq.n	800d4d6 <LmHandlerNvmDataStore+0x82>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800d4d0:	23ff      	movs	r3, #255	@ 0xff
 800d4d2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
    }

    if ((lmhStatus == LORAMAC_HANDLER_SUCCESS) && (LmHandlerCallbacks->OnNvmDataChange != NULL ))
 800d4d6:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d109      	bne.n	800d4f2 <LmHandlerNvmDataStore+0x9e>
 800d4de:	4b08      	ldr	r3, [pc, #32]	@ (800d500 <LmHandlerNvmDataStore+0xac>)
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	69db      	ldr	r3, [r3, #28]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d004      	beq.n	800d4f2 <LmHandlerNvmDataStore+0x9e>
    {
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
 800d4e8:	4b05      	ldr	r3, [pc, #20]	@ (800d500 <LmHandlerNvmDataStore+0xac>)
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	69db      	ldr	r3, [r3, #28]
 800d4ee:	2001      	movs	r0, #1
 800d4f0:	4798      	blx	r3
    }

    return lmhStatus;
 800d4f2:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800d4f6:	4618      	mov	r0, r3
 800d4f8:	3738      	adds	r7, #56	@ 0x38
 800d4fa:	46bd      	mov	sp, r7
 800d4fc:	bd80      	pop	{r7, pc}
 800d4fe:	bf00      	nop
 800d500:	20000778 	.word	0x20000778

0800d504 <NvmDataMgmtEvent>:
static uint16_t NvmNotifyFlags = 0;

#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 800d504:	b480      	push	{r7}
 800d506:	b083      	sub	sp, #12
 800d508:	af00      	add	r7, sp, #0
 800d50a:	4603      	mov	r3, r0
 800d50c:	80fb      	strh	r3, [r7, #6]
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
 800d50e:	4b06      	ldr	r3, [pc, #24]	@ (800d528 <NvmDataMgmtEvent+0x24>)
 800d510:	881a      	ldrh	r2, [r3, #0]
 800d512:	88fb      	ldrh	r3, [r7, #6]
 800d514:	4313      	orrs	r3, r2
 800d516:	b29a      	uxth	r2, r3
 800d518:	4b03      	ldr	r3, [pc, #12]	@ (800d528 <NvmDataMgmtEvent+0x24>)
 800d51a:	801a      	strh	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800d51c:	bf00      	nop
 800d51e:	370c      	adds	r7, #12
 800d520:	46bd      	mov	sp, r7
 800d522:	bc80      	pop	{r7}
 800d524:	4770      	bx	lr
 800d526:	bf00      	nop
 800d528:	2000089c 	.word	0x2000089c

0800d52c <NvmDataMgmtStoreBegin>:

int32_t NvmDataMgmtStoreBegin( void )
{
 800d52c:	b580      	push	{r7, lr}
 800d52e:	af00      	add	r7, sp, #0
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    // Input checks
    if( NvmNotifyFlags == LORAMAC_NVM_NOTIFY_FLAG_NONE )
 800d530:	4b08      	ldr	r3, [pc, #32]	@ (800d554 <NvmDataMgmtStoreBegin+0x28>)
 800d532:	881b      	ldrh	r3, [r3, #0]
 800d534:	2b00      	cmp	r3, #0
 800d536:	d102      	bne.n	800d53e <NvmDataMgmtStoreBegin+0x12>
    {
        // There was no update.
        return NVM_DATA_NO_UPDATED_DATA;
 800d538:	f06f 0301 	mvn.w	r3, #1
 800d53c:	e008      	b.n	800d550 <NvmDataMgmtStoreBegin+0x24>
    }
    if( LoRaMacStop( ) != LORAMAC_STATUS_OK )
 800d53e:	f004 fa13 	bl	8011968 <LoRaMacStop>
 800d542:	4603      	mov	r3, r0
 800d544:	2b00      	cmp	r3, #0
 800d546:	d002      	beq.n	800d54e <NvmDataMgmtStoreBegin+0x22>
    {
        return NVM_DATA_NOT_AVAILABLE;
 800d548:	f06f 0302 	mvn.w	r3, #2
 800d54c:	e000      	b.n	800d550 <NvmDataMgmtStoreBegin+0x24>
    }
    return NVM_DATA_OK;
 800d54e:	2300      	movs	r3, #0
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800d550:	4618      	mov	r0, r3
 800d552:	bd80      	pop	{r7, pc}
 800d554:	2000089c 	.word	0x2000089c

0800d558 <NvmDataMgmtStoreEnd>:

int32_t NvmDataMgmtStoreEnd( void )
{
 800d558:	b580      	push	{r7, lr}
 800d55a:	af00      	add	r7, sp, #0
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    // Reset notification flags
    NvmNotifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800d55c:	4b03      	ldr	r3, [pc, #12]	@ (800d56c <NvmDataMgmtStoreEnd+0x14>)
 800d55e:	2200      	movs	r2, #0
 800d560:	801a      	strh	r2, [r3, #0]

    // Resume LoRaMac
    LoRaMacStart( );
 800d562:	f004 f9f3 	bl	801194c <LoRaMacStart>
    return NVM_DATA_OK;
 800d566:	2300      	movs	r3, #0
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800d568:	4618      	mov	r0, r3
 800d56a:	bd80      	pop	{r7, pc}
 800d56c:	2000089c 	.word	0x2000089c

0800d570 <ClassBStatusReset>:

/*!
 * Reset Beacon status structure
 */
static inline void ClassBStatusReset( void )
{
 800d570:	b580      	push	{r7, lr}
 800d572:	af00      	add	r7, sp, #0
    memset1( ( uint8_t* ) &ComplianceTestState.ClassBStatus, 0, sizeof( ClassBStatus_t ) / sizeof( uint8_t ) );
 800d574:	2220      	movs	r2, #32
 800d576:	2100      	movs	r1, #0
 800d578:	4802      	ldr	r0, [pc, #8]	@ (800d584 <ClassBStatusReset+0x14>)
 800d57a:	f009 fe0f 	bl	801719c <memset1>
}
 800d57e:	bf00      	nop
 800d580:	bd80      	pop	{r7, pc}
 800d582:	bf00      	nop
 800d584:	200008b4 	.word	0x200008b4

0800d588 <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate         = NULL,  // To be initialized by LmHandler
    .OnSystemReset           = NULL,  // To be initialized by LmHandler
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 800d588:	b480      	push	{r7}
 800d58a:	af00      	add	r7, sp, #0
    return &CompliancePackage;
 800d58c:	4b02      	ldr	r3, [pc, #8]	@ (800d598 <LmhpCompliancePackageFactory+0x10>)
}
 800d58e:	4618      	mov	r0, r3
 800d590:	46bd      	mov	sp, r7
 800d592:	bc80      	pop	{r7}
 800d594:	4770      	bx	lr
 800d596:	bf00      	nop
 800d598:	200000d0 	.word	0x200000d0

0800d59c <LmhpComplianceInit>:

static void LmhpComplianceInit( void* params, uint8_t* dataBuffer, uint8_t dataBufferMaxSize )
{
 800d59c:	b580      	push	{r7, lr}
 800d59e:	b086      	sub	sp, #24
 800d5a0:	af02      	add	r7, sp, #8
 800d5a2:	60f8      	str	r0, [r7, #12]
 800d5a4:	60b9      	str	r1, [r7, #8]
 800d5a6:	4613      	mov	r3, r2
 800d5a8:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d018      	beq.n	800d5e2 <LmhpComplianceInit+0x46>
 800d5b0:	68bb      	ldr	r3, [r7, #8]
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d015      	beq.n	800d5e2 <LmhpComplianceInit+0x46>
    {
        ComplianceParams                      = ( LmhpComplianceParams_t* ) params;
 800d5b6:	4a19      	ldr	r2, [pc, #100]	@ (800d61c <LmhpComplianceInit+0x80>)
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer        = dataBuffer;
 800d5bc:	4a18      	ldr	r2, [pc, #96]	@ (800d620 <LmhpComplianceInit+0x84>)
 800d5be:	68bb      	ldr	r3, [r7, #8]
 800d5c0:	60d3      	str	r3, [r2, #12]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800d5c2:	4a17      	ldr	r2, [pc, #92]	@ (800d620 <LmhpComplianceInit+0x84>)
 800d5c4:	79fb      	ldrb	r3, [r7, #7]
 800d5c6:	7253      	strb	r3, [r2, #9]
        ComplianceTestState.Initialized       = true;
 800d5c8:	4b15      	ldr	r3, [pc, #84]	@ (800d620 <LmhpComplianceInit+0x84>)
 800d5ca:	2201      	movs	r2, #1
 800d5cc:	701a      	strb	r2, [r3, #0]
        TimerInit( &ProcessTimer, OnProcessTimer );
 800d5ce:	2300      	movs	r3, #0
 800d5d0:	9300      	str	r3, [sp, #0]
 800d5d2:	4b14      	ldr	r3, [pc, #80]	@ (800d624 <LmhpComplianceInit+0x88>)
 800d5d4:	2200      	movs	r2, #0
 800d5d6:	f04f 31ff 	mov.w	r1, #4294967295
 800d5da:	4813      	ldr	r0, [pc, #76]	@ (800d628 <LmhpComplianceInit+0x8c>)
 800d5dc:	f00d fe4c 	bl	801b278 <UTIL_TIMER_Create>
 800d5e0:	e005      	b.n	800d5ee <LmhpComplianceInit+0x52>
    }
    else
    {
        ComplianceParams                = NULL;
 800d5e2:	4b0e      	ldr	r3, [pc, #56]	@ (800d61c <LmhpComplianceInit+0x80>)
 800d5e4:	2200      	movs	r2, #0
 800d5e6:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 800d5e8:	4b0d      	ldr	r3, [pc, #52]	@ (800d620 <LmhpComplianceInit+0x84>)
 800d5ea:	2200      	movs	r2, #0
 800d5ec:	701a      	strb	r2, [r3, #0]
    }
    ComplianceTestState.RxAppCnt = 0;
 800d5ee:	4b0c      	ldr	r3, [pc, #48]	@ (800d620 <LmhpComplianceInit+0x84>)
 800d5f0:	2200      	movs	r2, #0
 800d5f2:	821a      	strh	r2, [r3, #16]
    ClassBStatusReset( );
 800d5f4:	f7ff ffbc 	bl	800d570 <ClassBStatusReset>
    ComplianceTestState.IsTxPending = false;
 800d5f8:	4b09      	ldr	r3, [pc, #36]	@ (800d620 <LmhpComplianceInit+0x84>)
 800d5fa:	2200      	movs	r2, #0
 800d5fc:	705a      	strb	r2, [r3, #1]
    ComplianceTestState.IsBeaconRxStatusIndOn = false;
 800d5fe:	4b08      	ldr	r3, [pc, #32]	@ (800d620 <LmhpComplianceInit+0x84>)
 800d600:	2200      	movs	r2, #0
 800d602:	749a      	strb	r2, [r3, #18]
    ComplianceTestState.IsResetCmdPending = false;
 800d604:	4b06      	ldr	r3, [pc, #24]	@ (800d620 <LmhpComplianceInit+0x84>)
 800d606:	2200      	movs	r2, #0
 800d608:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    ComplianceTestState.IsClassReqCmdPending = false;
 800d60c:	4b04      	ldr	r3, [pc, #16]	@ (800d620 <LmhpComplianceInit+0x84>)
 800d60e:	2200      	movs	r2, #0
 800d610:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
}
 800d614:	bf00      	nop
 800d616:	3710      	adds	r7, #16
 800d618:	46bd      	mov	sp, r7
 800d61a:	bd80      	pop	{r7, pc}
 800d61c:	200008d8 	.word	0x200008d8
 800d620:	200008a0 	.word	0x200008a0
 800d624:	0800df11 	.word	0x0800df11
 800d628:	200008dc 	.word	0x200008dc

0800d62c <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 800d62c:	b480      	push	{r7}
 800d62e:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 800d630:	4b02      	ldr	r3, [pc, #8]	@ (800d63c <LmhpComplianceIsInitialized+0x10>)
 800d632:	781b      	ldrb	r3, [r3, #0]
}
 800d634:	4618      	mov	r0, r3
 800d636:	46bd      	mov	sp, r7
 800d638:	bc80      	pop	{r7}
 800d63a:	4770      	bx	lr
 800d63c:	200008a0 	.word	0x200008a0

0800d640 <LmhpComplianceIsTxPending>:

static bool LmhpComplianceIsTxPending( void )
{
 800d640:	b480      	push	{r7}
 800d642:	af00      	add	r7, sp, #0
    return ComplianceTestState.IsTxPending;
 800d644:	4b02      	ldr	r3, [pc, #8]	@ (800d650 <LmhpComplianceIsTxPending+0x10>)
 800d646:	785b      	ldrb	r3, [r3, #1]
}
 800d648:	4618      	mov	r0, r3
 800d64a:	46bd      	mov	sp, r7
 800d64c:	bc80      	pop	{r7}
 800d64e:	4770      	bx	lr
 800d650:	200008a0 	.word	0x200008a0

0800d654 <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 800d654:	b590      	push	{r4, r7, lr}
 800d656:	b085      	sub	sp, #20
 800d658:	af00      	add	r7, sp, #0
    if( ComplianceTestState.IsTxPending == true )
 800d65a:	4b33      	ldr	r3, [pc, #204]	@ (800d728 <LmhpComplianceProcess+0xd4>)
 800d65c:	785b      	ldrb	r3, [r3, #1]
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d03f      	beq.n	800d6e2 <LmhpComplianceProcess+0x8e>
    {
        TimerTime_t now = TimerGetCurrentTime( );
 800d662:	f00d ffc7 	bl	801b5f4 <UTIL_TIMER_GetCurrentTime>
 800d666:	60f8      	str	r0, [r7, #12]
        if( now > ( ComplianceTestState.TxPendingTimestamp + LmHandlerGetDutyCycleWaitTime( ) ) )
 800d668:	4b2f      	ldr	r3, [pc, #188]	@ (800d728 <LmhpComplianceProcess+0xd4>)
 800d66a:	685c      	ldr	r4, [r3, #4]
 800d66c:	f7ff f96a 	bl	800c944 <LmHandlerGetDutyCycleWaitTime>
 800d670:	4603      	mov	r3, r0
 800d672:	4423      	add	r3, r4
 800d674:	68fa      	ldr	r2, [r7, #12]
 800d676:	429a      	cmp	r2, r3
 800d678:	d942      	bls.n	800d700 <LmhpComplianceProcess+0xac>
        {
            if( ComplianceTestState.DataBufferSize != 0 )
 800d67a:	4b2b      	ldr	r3, [pc, #172]	@ (800d728 <LmhpComplianceProcess+0xd4>)
 800d67c:	7a9b      	ldrb	r3, [r3, #10]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d03e      	beq.n	800d700 <LmhpComplianceProcess+0xac>
            {
                // Answer commands
                LmHandlerAppData_t appData = {
 800d682:	23e0      	movs	r3, #224	@ 0xe0
 800d684:	703b      	strb	r3, [r7, #0]
                    .Buffer     = ComplianceTestState.DataBuffer,
                    .BufferSize = ComplianceTestState.DataBufferSize,
 800d686:	4b28      	ldr	r3, [pc, #160]	@ (800d728 <LmhpComplianceProcess+0xd4>)
 800d688:	7a9b      	ldrb	r3, [r3, #10]
                LmHandlerAppData_t appData = {
 800d68a:	707b      	strb	r3, [r7, #1]
                    .Buffer     = ComplianceTestState.DataBuffer,
 800d68c:	4b26      	ldr	r3, [pc, #152]	@ (800d728 <LmhpComplianceProcess+0xd4>)
 800d68e:	68db      	ldr	r3, [r3, #12]
                LmHandlerAppData_t appData = {
 800d690:	607b      	str	r3, [r7, #4]
                    .Port       = COMPLIANCE_PORT,
                };
                LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800d692:	23ff      	movs	r3, #255	@ 0xff
 800d694:	72fb      	strb	r3, [r7, #11]
                lmhStatus = LmHandlerSend( &appData, ComplianceTestState.IsTxConfirmed, true );
 800d696:	4b24      	ldr	r3, [pc, #144]	@ (800d728 <LmhpComplianceProcess+0xd4>)
 800d698:	7a19      	ldrb	r1, [r3, #8]
 800d69a:	463b      	mov	r3, r7
 800d69c:	2201      	movs	r2, #1
 800d69e:	4618      	mov	r0, r3
 800d6a0:	f7ff f9f8 	bl	800ca94 <LmHandlerSend>
 800d6a4:	4603      	mov	r3, r0
 800d6a6:	72fb      	strb	r3, [r7, #11]
                if ((lmhStatus == LORAMAC_HANDLER_BUSY_ERROR) || (lmhStatus == LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED))
 800d6a8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d6ac:	f113 0f02 	cmn.w	r3, #2
 800d6b0:	d004      	beq.n	800d6bc <LmhpComplianceProcess+0x68>
 800d6b2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d6b6:	f113 0f06 	cmn.w	r3, #6
 800d6ba:	d108      	bne.n	800d6ce <LmhpComplianceProcess+0x7a>
                {
                    // try to send the message again
                    TimerSetValue( &ProcessTimer, 1000 );
 800d6bc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800d6c0:	481a      	ldr	r0, [pc, #104]	@ (800d72c <LmhpComplianceProcess+0xd8>)
 800d6c2:	f00d feed 	bl	801b4a0 <UTIL_TIMER_SetPeriod>
                    TimerStart(&ProcessTimer);
 800d6c6:	4819      	ldr	r0, [pc, #100]	@ (800d72c <LmhpComplianceProcess+0xd8>)
 800d6c8:	f00d fe0c 	bl	801b2e4 <UTIL_TIMER_Start>
 800d6cc:	e005      	b.n	800d6da <LmhpComplianceProcess+0x86>
                }
                else
                {
                    ComplianceTestState.IsTxPending = false;
 800d6ce:	4b16      	ldr	r3, [pc, #88]	@ (800d728 <LmhpComplianceProcess+0xd4>)
 800d6d0:	2200      	movs	r2, #0
 800d6d2:	705a      	strb	r2, [r3, #1]
                    ComplianceTestState.DataBufferSize = 0;
 800d6d4:	4b14      	ldr	r3, [pc, #80]	@ (800d728 <LmhpComplianceProcess+0xd4>)
 800d6d6:	2200      	movs	r2, #0
 800d6d8:	729a      	strb	r2, [r3, #10]
                }
                ComplianceTestState.TxPendingTimestamp = now;
 800d6da:	4a13      	ldr	r2, [pc, #76]	@ (800d728 <LmhpComplianceProcess+0xd4>)
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	6053      	str	r3, [r2, #4]
 800d6e0:	e00e      	b.n	800d700 <LmhpComplianceProcess+0xac>
            }
        }
    }
    else
    { // If no Tx is pending process other commands
        if( ComplianceTestState.IsClassReqCmdPending == true )
 800d6e2:	4b11      	ldr	r3, [pc, #68]	@ (800d728 <LmhpComplianceProcess+0xd4>)
 800d6e4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d009      	beq.n	800d700 <LmhpComplianceProcess+0xac>
        {
            ComplianceTestState.IsClassReqCmdPending = false;
 800d6ec:	4b0e      	ldr	r3, [pc, #56]	@ (800d728 <LmhpComplianceProcess+0xd4>)
 800d6ee:	2200      	movs	r2, #0
 800d6f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
            LmHandlerRequestClass( ComplianceTestState.NewClass );
 800d6f4:	4b0c      	ldr	r3, [pc, #48]	@ (800d728 <LmhpComplianceProcess+0xd4>)
 800d6f6:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800d6fa:	4618      	mov	r0, r3
 800d6fc:	f7ff fab8 	bl	800cc70 <LmHandlerRequestClass>
        }
    }

    if( ComplianceTestState.IsResetCmdPending == true )
 800d700:	4b09      	ldr	r3, [pc, #36]	@ (800d728 <LmhpComplianceProcess+0xd4>)
 800d702:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800d706:	2b00      	cmp	r3, #0
 800d708:	d00a      	beq.n	800d720 <LmhpComplianceProcess+0xcc>
    {
        ComplianceTestState.IsResetCmdPending = false;
 800d70a:	4b07      	ldr	r3, [pc, #28]	@ (800d728 <LmhpComplianceProcess+0xd4>)
 800d70c:	2200      	movs	r2, #0
 800d70e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        // Call platform MCU reset API
        if (CompliancePackage.OnSystemReset != NULL)
 800d712:	4b07      	ldr	r3, [pc, #28]	@ (800d730 <LmhpComplianceProcess+0xdc>)
 800d714:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d716:	2b00      	cmp	r3, #0
 800d718:	d002      	beq.n	800d720 <LmhpComplianceProcess+0xcc>
        {
            CompliancePackage.OnSystemReset( );
 800d71a:	4b05      	ldr	r3, [pc, #20]	@ (800d730 <LmhpComplianceProcess+0xdc>)
 800d71c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d71e:	4798      	blx	r3
        }
    }
}
 800d720:	bf00      	nop
 800d722:	3714      	adds	r7, #20
 800d724:	46bd      	mov	sp, r7
 800d726:	bd90      	pop	{r4, r7, pc}
 800d728:	200008a0 	.word	0x200008a0
 800d72c:	200008dc 	.word	0x200008dc
 800d730:	200000d0 	.word	0x200000d0

0800d734 <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t* mcpsIndication )
{
 800d734:	b5b0      	push	{r4, r5, r7, lr}
 800d736:	b0a4      	sub	sp, #144	@ 0x90
 800d738:	af00      	add	r7, sp, #0
 800d73a:	6078      	str	r0, [r7, #4]
    uint8_t cmdIndex        = 0;
 800d73c:	2300      	movs	r3, #0
 800d73e:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    MibRequestConfirm_t mibReq;

    if( ComplianceTestState.Initialized == false )
 800d742:	4bce      	ldr	r3, [pc, #824]	@ (800da7c <LmhpComplianceOnMcpsIndication+0x348>)
 800d744:	781b      	ldrb	r3, [r3, #0]
 800d746:	f083 0301 	eor.w	r3, r3, #1
 800d74a:	b2db      	uxtb	r3, r3
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	f040 83b5 	bne.w	800debc <LmhpComplianceOnMcpsIndication+0x788>
        return;
    }

    // Increment the compliance certification protocol downlink counter
    // Not counting downlinks on FPort 0
    if( ( mcpsIndication->Port > 0 ) || ( mcpsIndication->AckReceived == true ) )
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	78db      	ldrb	r3, [r3, #3]
 800d756:	2b00      	cmp	r3, #0
 800d758:	d103      	bne.n	800d762 <LmhpComplianceOnMcpsIndication+0x2e>
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	7b9b      	ldrb	r3, [r3, #14]
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d005      	beq.n	800d76e <LmhpComplianceOnMcpsIndication+0x3a>
    {
        ComplianceTestState.RxAppCnt++;
 800d762:	4bc6      	ldr	r3, [pc, #792]	@ (800da7c <LmhpComplianceOnMcpsIndication+0x348>)
 800d764:	8a1b      	ldrh	r3, [r3, #16]
 800d766:	3301      	adds	r3, #1
 800d768:	b29a      	uxth	r2, r3
 800d76a:	4bc4      	ldr	r3, [pc, #784]	@ (800da7c <LmhpComplianceOnMcpsIndication+0x348>)
 800d76c:	821a      	strh	r2, [r3, #16]
    }

    if( mcpsIndication->RxData == false )
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	7b5b      	ldrb	r3, [r3, #13]
 800d772:	f083 0301 	eor.w	r3, r3, #1
 800d776:	b2db      	uxtb	r3, r3
 800d778:	2b00      	cmp	r3, #0
 800d77a:	f040 83a1 	bne.w	800dec0 <LmhpComplianceOnMcpsIndication+0x78c>
    {
        return;
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	78db      	ldrb	r3, [r3, #3]
 800d782:	2be0      	cmp	r3, #224	@ 0xe0
 800d784:	f040 839e 	bne.w	800dec4 <LmhpComplianceOnMcpsIndication+0x790>
    {
        return;
    }

    ComplianceTestState.DataBufferSize = 0;
 800d788:	4bbc      	ldr	r3, [pc, #752]	@ (800da7c <LmhpComplianceOnMcpsIndication+0x348>)
 800d78a:	2200      	movs	r2, #0
 800d78c:	729a      	strb	r2, [r3, #10]

    switch( mcpsIndication->Buffer[cmdIndex++] )
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	689a      	ldr	r2, [r3, #8]
 800d792:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d796:	1c59      	adds	r1, r3, #1
 800d798:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800d79c:	4413      	add	r3, r2
 800d79e:	781b      	ldrb	r3, [r3, #0]
 800d7a0:	2b7f      	cmp	r3, #127	@ 0x7f
 800d7a2:	f200 836e 	bhi.w	800de82 <LmhpComplianceOnMcpsIndication+0x74e>
 800d7a6:	a201      	add	r2, pc, #4	@ (adr r2, 800d7ac <LmhpComplianceOnMcpsIndication+0x78>)
 800d7a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7ac:	0800d9ad 	.word	0x0800d9ad
 800d7b0:	0800d9f1 	.word	0x0800d9f1
 800d7b4:	0800d9fb 	.word	0x0800d9fb
 800d7b8:	0800da07 	.word	0x0800da07
 800d7bc:	0800da29 	.word	0x0800da29
 800d7c0:	0800da57 	.word	0x0800da57
 800d7c4:	0800da85 	.word	0x0800da85
 800d7c8:	0800dae3 	.word	0x0800dae3
 800d7cc:	0800db3b 	.word	0x0800db3b
 800d7d0:	0800dba7 	.word	0x0800dba7
 800d7d4:	0800dbf7 	.word	0x0800dbf7
 800d7d8:	0800de83 	.word	0x0800de83
 800d7dc:	0800de83 	.word	0x0800de83
 800d7e0:	0800de83 	.word	0x0800de83
 800d7e4:	0800de83 	.word	0x0800de83
 800d7e8:	0800de83 	.word	0x0800de83
 800d7ec:	0800de83 	.word	0x0800de83
 800d7f0:	0800de83 	.word	0x0800de83
 800d7f4:	0800de83 	.word	0x0800de83
 800d7f8:	0800de83 	.word	0x0800de83
 800d7fc:	0800de83 	.word	0x0800de83
 800d800:	0800de83 	.word	0x0800de83
 800d804:	0800de83 	.word	0x0800de83
 800d808:	0800de83 	.word	0x0800de83
 800d80c:	0800de83 	.word	0x0800de83
 800d810:	0800de83 	.word	0x0800de83
 800d814:	0800de83 	.word	0x0800de83
 800d818:	0800de83 	.word	0x0800de83
 800d81c:	0800de83 	.word	0x0800de83
 800d820:	0800de83 	.word	0x0800de83
 800d824:	0800de83 	.word	0x0800de83
 800d828:	0800de83 	.word	0x0800de83
 800d82c:	0800dbff 	.word	0x0800dbff
 800d830:	0800dc11 	.word	0x0800dc11
 800d834:	0800dc19 	.word	0x0800dc19
 800d838:	0800de83 	.word	0x0800de83
 800d83c:	0800de83 	.word	0x0800de83
 800d840:	0800de83 	.word	0x0800de83
 800d844:	0800de83 	.word	0x0800de83
 800d848:	0800de83 	.word	0x0800de83
 800d84c:	0800de83 	.word	0x0800de83
 800d850:	0800de83 	.word	0x0800de83
 800d854:	0800de83 	.word	0x0800de83
 800d858:	0800de83 	.word	0x0800de83
 800d85c:	0800de83 	.word	0x0800de83
 800d860:	0800de83 	.word	0x0800de83
 800d864:	0800de83 	.word	0x0800de83
 800d868:	0800de83 	.word	0x0800de83
 800d86c:	0800de83 	.word	0x0800de83
 800d870:	0800de83 	.word	0x0800de83
 800d874:	0800de83 	.word	0x0800de83
 800d878:	0800de83 	.word	0x0800de83
 800d87c:	0800de83 	.word	0x0800de83
 800d880:	0800de83 	.word	0x0800de83
 800d884:	0800de83 	.word	0x0800de83
 800d888:	0800de83 	.word	0x0800de83
 800d88c:	0800de83 	.word	0x0800de83
 800d890:	0800de83 	.word	0x0800de83
 800d894:	0800de83 	.word	0x0800de83
 800d898:	0800de83 	.word	0x0800de83
 800d89c:	0800de83 	.word	0x0800de83
 800d8a0:	0800de83 	.word	0x0800de83
 800d8a4:	0800de83 	.word	0x0800de83
 800d8a8:	0800de83 	.word	0x0800de83
 800d8ac:	0800de83 	.word	0x0800de83
 800d8b0:	0800de83 	.word	0x0800de83
 800d8b4:	0800de83 	.word	0x0800de83
 800d8b8:	0800de83 	.word	0x0800de83
 800d8bc:	0800de83 	.word	0x0800de83
 800d8c0:	0800de83 	.word	0x0800de83
 800d8c4:	0800de83 	.word	0x0800de83
 800d8c8:	0800de83 	.word	0x0800de83
 800d8cc:	0800de83 	.word	0x0800de83
 800d8d0:	0800de83 	.word	0x0800de83
 800d8d4:	0800de83 	.word	0x0800de83
 800d8d8:	0800de83 	.word	0x0800de83
 800d8dc:	0800de83 	.word	0x0800de83
 800d8e0:	0800de83 	.word	0x0800de83
 800d8e4:	0800de83 	.word	0x0800de83
 800d8e8:	0800de83 	.word	0x0800de83
 800d8ec:	0800de83 	.word	0x0800de83
 800d8f0:	0800de83 	.word	0x0800de83
 800d8f4:	0800de83 	.word	0x0800de83
 800d8f8:	0800de83 	.word	0x0800de83
 800d8fc:	0800de83 	.word	0x0800de83
 800d900:	0800de83 	.word	0x0800de83
 800d904:	0800de83 	.word	0x0800de83
 800d908:	0800de83 	.word	0x0800de83
 800d90c:	0800de83 	.word	0x0800de83
 800d910:	0800de83 	.word	0x0800de83
 800d914:	0800de83 	.word	0x0800de83
 800d918:	0800de83 	.word	0x0800de83
 800d91c:	0800de83 	.word	0x0800de83
 800d920:	0800de83 	.word	0x0800de83
 800d924:	0800de83 	.word	0x0800de83
 800d928:	0800de83 	.word	0x0800de83
 800d92c:	0800de83 	.word	0x0800de83
 800d930:	0800de83 	.word	0x0800de83
 800d934:	0800de83 	.word	0x0800de83
 800d938:	0800de83 	.word	0x0800de83
 800d93c:	0800de83 	.word	0x0800de83
 800d940:	0800de83 	.word	0x0800de83
 800d944:	0800de83 	.word	0x0800de83
 800d948:	0800de83 	.word	0x0800de83
 800d94c:	0800de83 	.word	0x0800de83
 800d950:	0800de83 	.word	0x0800de83
 800d954:	0800de83 	.word	0x0800de83
 800d958:	0800de83 	.word	0x0800de83
 800d95c:	0800de83 	.word	0x0800de83
 800d960:	0800de83 	.word	0x0800de83
 800d964:	0800de83 	.word	0x0800de83
 800d968:	0800de83 	.word	0x0800de83
 800d96c:	0800de83 	.word	0x0800de83
 800d970:	0800de83 	.word	0x0800de83
 800d974:	0800de83 	.word	0x0800de83
 800d978:	0800de83 	.word	0x0800de83
 800d97c:	0800de83 	.word	0x0800de83
 800d980:	0800de83 	.word	0x0800de83
 800d984:	0800de83 	.word	0x0800de83
 800d988:	0800de83 	.word	0x0800de83
 800d98c:	0800de83 	.word	0x0800de83
 800d990:	0800de83 	.word	0x0800de83
 800d994:	0800de83 	.word	0x0800de83
 800d998:	0800de83 	.word	0x0800de83
 800d99c:	0800de83 	.word	0x0800de83
 800d9a0:	0800dc4b 	.word	0x0800dc4b
 800d9a4:	0800dcfd 	.word	0x0800dcfd
 800d9a8:	0800dd2d 	.word	0x0800dd2d
    {
    case COMPLIANCE_PKG_VERSION_REQ:
    {
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_PKG_VERSION_ANS;
 800d9ac:	4b33      	ldr	r3, [pc, #204]	@ (800da7c <LmhpComplianceOnMcpsIndication+0x348>)
 800d9ae:	68da      	ldr	r2, [r3, #12]
 800d9b0:	4b32      	ldr	r3, [pc, #200]	@ (800da7c <LmhpComplianceOnMcpsIndication+0x348>)
 800d9b2:	7a9b      	ldrb	r3, [r3, #10]
 800d9b4:	1c59      	adds	r1, r3, #1
 800d9b6:	b2c8      	uxtb	r0, r1
 800d9b8:	4930      	ldr	r1, [pc, #192]	@ (800da7c <LmhpComplianceOnMcpsIndication+0x348>)
 800d9ba:	7288      	strb	r0, [r1, #10]
 800d9bc:	4413      	add	r3, r2
 800d9be:	2200      	movs	r2, #0
 800d9c0:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ID;
 800d9c2:	4b2e      	ldr	r3, [pc, #184]	@ (800da7c <LmhpComplianceOnMcpsIndication+0x348>)
 800d9c4:	68da      	ldr	r2, [r3, #12]
 800d9c6:	4b2d      	ldr	r3, [pc, #180]	@ (800da7c <LmhpComplianceOnMcpsIndication+0x348>)
 800d9c8:	7a9b      	ldrb	r3, [r3, #10]
 800d9ca:	1c59      	adds	r1, r3, #1
 800d9cc:	b2c8      	uxtb	r0, r1
 800d9ce:	492b      	ldr	r1, [pc, #172]	@ (800da7c <LmhpComplianceOnMcpsIndication+0x348>)
 800d9d0:	7288      	strb	r0, [r1, #10]
 800d9d2:	4413      	add	r3, r2
 800d9d4:	2206      	movs	r2, #6
 800d9d6:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_VERSION;
 800d9d8:	4b28      	ldr	r3, [pc, #160]	@ (800da7c <LmhpComplianceOnMcpsIndication+0x348>)
 800d9da:	68da      	ldr	r2, [r3, #12]
 800d9dc:	4b27      	ldr	r3, [pc, #156]	@ (800da7c <LmhpComplianceOnMcpsIndication+0x348>)
 800d9de:	7a9b      	ldrb	r3, [r3, #10]
 800d9e0:	1c59      	adds	r1, r3, #1
 800d9e2:	b2c8      	uxtb	r0, r1
 800d9e4:	4925      	ldr	r1, [pc, #148]	@ (800da7c <LmhpComplianceOnMcpsIndication+0x348>)
 800d9e6:	7288      	strb	r0, [r1, #10]
 800d9e8:	4413      	add	r3, r2
 800d9ea:	2201      	movs	r2, #1
 800d9ec:	701a      	strb	r2, [r3, #0]
        break;
 800d9ee:	e251      	b.n	800de94 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_DUT_RESET_REQ:
    {
        ComplianceTestState.IsResetCmdPending = true;
 800d9f0:	4b22      	ldr	r3, [pc, #136]	@ (800da7c <LmhpComplianceOnMcpsIndication+0x348>)
 800d9f2:	2201      	movs	r2, #1
 800d9f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        break;
 800d9f8:	e24c      	b.n	800de94 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_DUT_JOIN_REQ:
    {
        CompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 800d9fa:	4b21      	ldr	r3, [pc, #132]	@ (800da80 <LmhpComplianceOnMcpsIndication+0x34c>)
 800d9fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d9fe:	2101      	movs	r1, #1
 800da00:	2002      	movs	r0, #2
 800da02:	4798      	blx	r3
        break;
 800da04:	e246      	b.n	800de94 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_SWITCH_CLASS_REQ:
    {
        // CLASS_A = 0, CLASS_B = 1, CLASS_C = 2
        ComplianceTestState.NewClass = ( DeviceClass_t ) mcpsIndication->Buffer[cmdIndex++];
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	689a      	ldr	r2, [r3, #8]
 800da0a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800da0e:	1c59      	adds	r1, r3, #1
 800da10:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800da14:	4413      	add	r3, r2
 800da16:	781a      	ldrb	r2, [r3, #0]
 800da18:	4b18      	ldr	r3, [pc, #96]	@ (800da7c <LmhpComplianceOnMcpsIndication+0x348>)
 800da1a:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
        ComplianceTestState.IsClassReqCmdPending = true;
 800da1e:	4b17      	ldr	r3, [pc, #92]	@ (800da7c <LmhpComplianceOnMcpsIndication+0x348>)
 800da20:	2201      	movs	r2, #1
 800da22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        break;
 800da26:	e235      	b.n	800de94 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_ADR_BIT_CHANGE_REQ:
    {
        MibRequestConfirm_t mibReq;
        mibReq.Type            = MIB_ADR;
 800da28:	2304      	movs	r3, #4
 800da2a:	733b      	strb	r3, [r7, #12]
        mibReq.Param.AdrEnable = mcpsIndication->Buffer[cmdIndex++];
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	689a      	ldr	r2, [r3, #8]
 800da30:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800da34:	1c59      	adds	r1, r3, #1
 800da36:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800da3a:	4413      	add	r3, r2
 800da3c:	781b      	ldrb	r3, [r3, #0]
 800da3e:	2b00      	cmp	r3, #0
 800da40:	bf14      	ite	ne
 800da42:	2301      	movne	r3, #1
 800da44:	2300      	moveq	r3, #0
 800da46:	b2db      	uxtb	r3, r3
 800da48:	743b      	strb	r3, [r7, #16]

        LoRaMacMibSetRequestConfirm( &mibReq );
 800da4a:	f107 030c 	add.w	r3, r7, #12
 800da4e:	4618      	mov	r0, r3
 800da50:	f004 fa14 	bl	8011e7c <LoRaMacMibSetRequestConfirm>
        break;
 800da54:	e21e      	b.n	800de94 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_REGIONAL_DUTY_CYCLE_CTRL_REQ:
    {
        LoRaMacTestSetDutyCycleOn( mcpsIndication->Buffer[cmdIndex++] );
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	689a      	ldr	r2, [r3, #8]
 800da5a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800da5e:	1c59      	adds	r1, r3, #1
 800da60:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800da64:	4413      	add	r3, r2
 800da66:	781b      	ldrb	r3, [r3, #0]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	bf14      	ite	ne
 800da6c:	2301      	movne	r3, #1
 800da6e:	2300      	moveq	r3, #0
 800da70:	b2db      	uxtb	r3, r3
 800da72:	4618      	mov	r0, r3
 800da74:	f005 f830 	bl	8012ad8 <LoRaMacTestSetDutyCycleOn>
        break;
 800da78:	e20c      	b.n	800de94 <LmhpComplianceOnMcpsIndication+0x760>
 800da7a:	bf00      	nop
 800da7c:	200008a0 	.word	0x200008a0
 800da80:	200000d0 	.word	0x200000d0
    }
    case COMPLIANCE_TX_PERIODICITY_CHANGE_REQ:
    {
        // Periodicity in milli-seconds
        uint32_t periodicity[] = { 0, 5000, 10000, 20000, 30000, 40000, 50000, 60000, 120000, 240000, 480000 };
 800da84:	4ba5      	ldr	r3, [pc, #660]	@ (800dd1c <LmhpComplianceOnMcpsIndication+0x5e8>)
 800da86:	f107 040c 	add.w	r4, r7, #12
 800da8a:	461d      	mov	r5, r3
 800da8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800da8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800da90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800da92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800da94:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800da98:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        uint8_t  index         = mcpsIndication->Buffer[cmdIndex++];
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	689a      	ldr	r2, [r3, #8]
 800daa0:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800daa4:	1c59      	adds	r1, r3, #1
 800daa6:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800daaa:	4413      	add	r3, r2
 800daac:	781b      	ldrb	r3, [r3, #0]
 800daae:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c

        if( index < ( sizeof( periodicity ) / sizeof( uint32_t ) ) )
 800dab2:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 800dab6:	2b0a      	cmp	r3, #10
 800dab8:	f200 81e5 	bhi.w	800de86 <LmhpComplianceOnMcpsIndication+0x752>
        {
            if( ComplianceParams->OnTxPeriodicityChanged != NULL )
 800dabc:	4b98      	ldr	r3, [pc, #608]	@ (800dd20 <LmhpComplianceOnMcpsIndication+0x5ec>)
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	685b      	ldr	r3, [r3, #4]
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	f000 81df 	beq.w	800de86 <LmhpComplianceOnMcpsIndication+0x752>
            {
                ComplianceParams->OnTxPeriodicityChanged( periodicity[index] );
 800dac8:	4b95      	ldr	r3, [pc, #596]	@ (800dd20 <LmhpComplianceOnMcpsIndication+0x5ec>)
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	685a      	ldr	r2, [r3, #4]
 800dace:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 800dad2:	009b      	lsls	r3, r3, #2
 800dad4:	3390      	adds	r3, #144	@ 0x90
 800dad6:	443b      	add	r3, r7
 800dad8:	f853 3c84 	ldr.w	r3, [r3, #-132]
 800dadc:	4618      	mov	r0, r3
 800dade:	4790      	blx	r2
            }
        }
        break;
 800dae0:	e1d1      	b.n	800de86 <LmhpComplianceOnMcpsIndication+0x752>
    }
    case COMPLIANCE_TX_FRAMES_CTRL_REQ:
    {
        uint8_t frameType = mcpsIndication->Buffer[cmdIndex++];
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	689a      	ldr	r2, [r3, #8]
 800dae6:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800daea:	1c59      	adds	r1, r3, #1
 800daec:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800daf0:	4413      	add	r3, r2
 800daf2:	781b      	ldrb	r3, [r3, #0]
 800daf4:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d

        if( ( frameType == 1 ) || ( frameType == 2 ) )
 800daf8:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 800dafc:	2b01      	cmp	r3, #1
 800dafe:	d004      	beq.n	800db0a <LmhpComplianceOnMcpsIndication+0x3d6>
 800db00:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 800db04:	2b02      	cmp	r3, #2
 800db06:	f040 81c0 	bne.w	800de8a <LmhpComplianceOnMcpsIndication+0x756>
        {
            ComplianceTestState.IsTxConfirmed = ( frameType != 1 ) ? LORAMAC_HANDLER_CONFIRMED_MSG : LORAMAC_HANDLER_UNCONFIRMED_MSG;
 800db0a:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 800db0e:	2b01      	cmp	r3, #1
 800db10:	bf14      	ite	ne
 800db12:	2301      	movne	r3, #1
 800db14:	2300      	moveq	r3, #0
 800db16:	b2db      	uxtb	r3, r3
 800db18:	461a      	mov	r2, r3
 800db1a:	4b82      	ldr	r3, [pc, #520]	@ (800dd24 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800db1c:	721a      	strb	r2, [r3, #8]

            if( ComplianceParams->OnTxFrameCtrlChanged != NULL )
 800db1e:	4b80      	ldr	r3, [pc, #512]	@ (800dd20 <LmhpComplianceOnMcpsIndication+0x5ec>)
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	689b      	ldr	r3, [r3, #8]
 800db24:	2b00      	cmp	r3, #0
 800db26:	f000 81b0 	beq.w	800de8a <LmhpComplianceOnMcpsIndication+0x756>
            {
                ComplianceParams->OnTxFrameCtrlChanged( ComplianceTestState.IsTxConfirmed );
 800db2a:	4b7d      	ldr	r3, [pc, #500]	@ (800dd20 <LmhpComplianceOnMcpsIndication+0x5ec>)
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	689b      	ldr	r3, [r3, #8]
 800db30:	4a7c      	ldr	r2, [pc, #496]	@ (800dd24 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800db32:	7a12      	ldrb	r2, [r2, #8]
 800db34:	4610      	mov	r0, r2
 800db36:	4798      	blx	r3
            }
        }
        break;
 800db38:	e1a7      	b.n	800de8a <LmhpComplianceOnMcpsIndication+0x756>
    }
    case COMPLIANCE_ECHO_PAYLOAD_REQ:
    {
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ECHO_PAYLOAD_ANS;
 800db3a:	4b7a      	ldr	r3, [pc, #488]	@ (800dd24 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800db3c:	68da      	ldr	r2, [r3, #12]
 800db3e:	4b79      	ldr	r3, [pc, #484]	@ (800dd24 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800db40:	7a9b      	ldrb	r3, [r3, #10]
 800db42:	1c59      	adds	r1, r3, #1
 800db44:	b2c8      	uxtb	r0, r1
 800db46:	4977      	ldr	r1, [pc, #476]	@ (800dd24 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800db48:	7288      	strb	r0, [r1, #10]
 800db4a:	4413      	add	r3, r2
 800db4c:	2208      	movs	r2, #8
 800db4e:	701a      	strb	r2, [r3, #0]

        for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 800db50:	2301      	movs	r3, #1
 800db52:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
 800db56:	e019      	b.n	800db8c <LmhpComplianceOnMcpsIndication+0x458>
             i++ )
        {
            ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	689a      	ldr	r2, [r3, #8]
 800db5c:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800db60:	1c59      	adds	r1, r3, #1
 800db62:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800db66:	4413      	add	r3, r2
 800db68:	781a      	ldrb	r2, [r3, #0]
 800db6a:	4b6e      	ldr	r3, [pc, #440]	@ (800dd24 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800db6c:	68d9      	ldr	r1, [r3, #12]
 800db6e:	4b6d      	ldr	r3, [pc, #436]	@ (800dd24 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800db70:	7a9b      	ldrb	r3, [r3, #10]
 800db72:	1c58      	adds	r0, r3, #1
 800db74:	b2c4      	uxtb	r4, r0
 800db76:	486b      	ldr	r0, [pc, #428]	@ (800dd24 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800db78:	7284      	strb	r4, [r0, #10]
 800db7a:	440b      	add	r3, r1
 800db7c:	3201      	adds	r2, #1
 800db7e:	b2d2      	uxtb	r2, r2
 800db80:	701a      	strb	r2, [r3, #0]
             i++ )
 800db82:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 800db86:	3301      	adds	r3, #1
 800db88:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
        for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 800db8c:	4b65      	ldr	r3, [pc, #404]	@ (800dd24 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800db8e:	7a5a      	ldrb	r2, [r3, #9]
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	7b1b      	ldrb	r3, [r3, #12]
 800db94:	4293      	cmp	r3, r2
 800db96:	bf28      	it	cs
 800db98:	4613      	movcs	r3, r2
 800db9a:	b2db      	uxtb	r3, r3
 800db9c:	f897 208e 	ldrb.w	r2, [r7, #142]	@ 0x8e
 800dba0:	429a      	cmp	r2, r3
 800dba2:	d3d9      	bcc.n	800db58 <LmhpComplianceOnMcpsIndication+0x424>
        }
        break;
 800dba4:	e176      	b.n	800de94 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_RX_APP_CNT_REQ:
    {
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_RX_APP_CNT_ANS;
 800dba6:	4b5f      	ldr	r3, [pc, #380]	@ (800dd24 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800dba8:	68da      	ldr	r2, [r3, #12]
 800dbaa:	4b5e      	ldr	r3, [pc, #376]	@ (800dd24 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800dbac:	7a9b      	ldrb	r3, [r3, #10]
 800dbae:	1c59      	adds	r1, r3, #1
 800dbb0:	b2c8      	uxtb	r0, r1
 800dbb2:	495c      	ldr	r1, [pc, #368]	@ (800dd24 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800dbb4:	7288      	strb	r0, [r1, #10]
 800dbb6:	4413      	add	r3, r2
 800dbb8:	2209      	movs	r2, #9
 800dbba:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt;
 800dbbc:	4b59      	ldr	r3, [pc, #356]	@ (800dd24 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800dbbe:	8a18      	ldrh	r0, [r3, #16]
 800dbc0:	4b58      	ldr	r3, [pc, #352]	@ (800dd24 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800dbc2:	68da      	ldr	r2, [r3, #12]
 800dbc4:	4b57      	ldr	r3, [pc, #348]	@ (800dd24 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800dbc6:	7a9b      	ldrb	r3, [r3, #10]
 800dbc8:	1c59      	adds	r1, r3, #1
 800dbca:	b2cc      	uxtb	r4, r1
 800dbcc:	4955      	ldr	r1, [pc, #340]	@ (800dd24 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800dbce:	728c      	strb	r4, [r1, #10]
 800dbd0:	4413      	add	r3, r2
 800dbd2:	b2c2      	uxtb	r2, r0
 800dbd4:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt >> 8;
 800dbd6:	4b53      	ldr	r3, [pc, #332]	@ (800dd24 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800dbd8:	8a1b      	ldrh	r3, [r3, #16]
 800dbda:	0a1b      	lsrs	r3, r3, #8
 800dbdc:	b298      	uxth	r0, r3
 800dbde:	4b51      	ldr	r3, [pc, #324]	@ (800dd24 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800dbe0:	68da      	ldr	r2, [r3, #12]
 800dbe2:	4b50      	ldr	r3, [pc, #320]	@ (800dd24 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800dbe4:	7a9b      	ldrb	r3, [r3, #10]
 800dbe6:	1c59      	adds	r1, r3, #1
 800dbe8:	b2cc      	uxtb	r4, r1
 800dbea:	494e      	ldr	r1, [pc, #312]	@ (800dd24 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800dbec:	728c      	strb	r4, [r1, #10]
 800dbee:	4413      	add	r3, r2
 800dbf0:	b2c2      	uxtb	r2, r0
 800dbf2:	701a      	strb	r2, [r3, #0]
        break;
 800dbf4:	e14e      	b.n	800de94 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_RX_APP_CNT_RESET_REQ:
    {
        ComplianceTestState.RxAppCnt = 0;
 800dbf6:	4b4b      	ldr	r3, [pc, #300]	@ (800dd24 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800dbf8:	2200      	movs	r2, #0
 800dbfa:	821a      	strh	r2, [r3, #16]
        break;
 800dbfc:	e14a      	b.n	800de94 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_LINK_CHECK_REQ:
    {
        MlmeReq_t mlmeReq;
        mlmeReq.Type = MLME_LINK_CHECK;
 800dbfe:	2304      	movs	r3, #4
 800dc00:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54

        LoRaMacMlmeRequest( &mlmeReq );
 800dc04:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800dc08:	4618      	mov	r0, r3
 800dc0a:	f004 fca7 	bl	801255c <LoRaMacMlmeRequest>
        break;
 800dc0e:	e141      	b.n	800de94 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_DEVICE_TIME_REQ:
    {
        CompliancePackage.OnDeviceTimeRequest( );
 800dc10:	4b45      	ldr	r3, [pc, #276]	@ (800dd28 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800dc12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc14:	4798      	blx	r3
        break;
 800dc16:	e13d      	b.n	800de94 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_PING_SLOT_INFO_REQ:
    {
        ComplianceTestState.ClassBStatus.PingSlotPeriodicity = mcpsIndication->Buffer[cmdIndex++];
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	689a      	ldr	r2, [r3, #8]
 800dc1c:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800dc20:	1c59      	adds	r1, r3, #1
 800dc22:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800dc26:	4413      	add	r3, r2
 800dc28:	781a      	ldrb	r2, [r3, #0]
 800dc2a:	4b3e      	ldr	r3, [pc, #248]	@ (800dd24 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800dc2c:	755a      	strb	r2, [r3, #21]
        if( ComplianceParams->OnPingSlotPeriodicityChanged != NULL )
 800dc2e:	4b3c      	ldr	r3, [pc, #240]	@ (800dd20 <LmhpComplianceOnMcpsIndication+0x5ec>)
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	68db      	ldr	r3, [r3, #12]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	f000 812a 	beq.w	800de8e <LmhpComplianceOnMcpsIndication+0x75a>
        {
        ComplianceParams->OnPingSlotPeriodicityChanged( ComplianceTestState.ClassBStatus.PingSlotPeriodicity );
 800dc3a:	4b39      	ldr	r3, [pc, #228]	@ (800dd20 <LmhpComplianceOnMcpsIndication+0x5ec>)
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	68db      	ldr	r3, [r3, #12]
 800dc40:	4a38      	ldr	r2, [pc, #224]	@ (800dd24 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800dc42:	7d52      	ldrb	r2, [r2, #21]
 800dc44:	4610      	mov	r0, r2
 800dc46:	4798      	blx	r3
        }
        break;
 800dc48:	e121      	b.n	800de8e <LmhpComplianceOnMcpsIndication+0x75a>
#endif
    /* ST_WORKAROUND_END */
    case COMPLIANCE_TX_CW_REQ:
    {
        MlmeReq_t mlmeReq;
        if( mcpsIndication->BufferSize == 7 )
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	7b1b      	ldrb	r3, [r3, #12]
 800dc4e:	2b07      	cmp	r3, #7
 800dc50:	f040 811f 	bne.w	800de92 <LmhpComplianceOnMcpsIndication+0x75e>
        {
            mlmeReq.Type = MLME_TXCW;
 800dc54:	2305      	movs	r3, #5
 800dc56:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
            mlmeReq.Req.TxCw.Timeout =
                ( uint16_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) );
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	689a      	ldr	r2, [r3, #8]
 800dc5e:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800dc62:	4413      	add	r3, r2
 800dc64:	781b      	ldrb	r3, [r3, #0]
 800dc66:	b21a      	sxth	r2, r3
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	6899      	ldr	r1, [r3, #8]
 800dc6c:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800dc70:	3301      	adds	r3, #1
 800dc72:	440b      	add	r3, r1
 800dc74:	781b      	ldrb	r3, [r3, #0]
 800dc76:	b21b      	sxth	r3, r3
 800dc78:	021b      	lsls	r3, r3, #8
 800dc7a:	b21b      	sxth	r3, r3
 800dc7c:	4313      	orrs	r3, r2
 800dc7e:	b21b      	sxth	r3, r3
 800dc80:	b29b      	uxth	r3, r3
            mlmeReq.Req.TxCw.Timeout =
 800dc82:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
            cmdIndex += 2;
 800dc86:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800dc8a:	3302      	adds	r3, #2
 800dc8c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
            mlmeReq.Req.TxCw.Frequency =
                ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	689a      	ldr	r2, [r3, #8]
 800dc94:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800dc98:	4413      	add	r3, r2
 800dc9a:	781b      	ldrb	r3, [r3, #0]
 800dc9c:	4619      	mov	r1, r3
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	689a      	ldr	r2, [r3, #8]
 800dca2:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800dca6:	3301      	adds	r3, #1
 800dca8:	4413      	add	r3, r2
 800dcaa:	781b      	ldrb	r3, [r3, #0]
 800dcac:	021b      	lsls	r3, r3, #8
 800dcae:	ea41 0203 	orr.w	r2, r1, r3
                               ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	6899      	ldr	r1, [r3, #8]
 800dcb6:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800dcba:	3302      	adds	r3, #2
 800dcbc:	440b      	add	r3, r1
 800dcbe:	781b      	ldrb	r3, [r3, #0]
 800dcc0:	041b      	lsls	r3, r3, #16
                ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 800dcc2:	4313      	orrs	r3, r2
 800dcc4:	461a      	mov	r2, r3
                               ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 800dcc6:	2364      	movs	r3, #100	@ 0x64
 800dcc8:	fb02 f303 	mul.w	r3, r2, r3
            mlmeReq.Req.TxCw.Frequency =
 800dccc:	64bb      	str	r3, [r7, #72]	@ 0x48
                100;
            cmdIndex += 3;
 800dcce:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800dcd2:	3303      	adds	r3, #3
 800dcd4:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
            mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[cmdIndex++];
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	689a      	ldr	r2, [r3, #8]
 800dcdc:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800dce0:	1c59      	adds	r1, r3, #1
 800dce2:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800dce6:	4413      	add	r3, r2
 800dce8:	781b      	ldrb	r3, [r3, #0]
 800dcea:	b25b      	sxtb	r3, r3
 800dcec:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c

            LoRaMacMlmeRequest( &mlmeReq );
 800dcf0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	f004 fc31 	bl	801255c <LoRaMacMlmeRequest>
        }
        break;
 800dcfa:	e0ca      	b.n	800de92 <LmhpComplianceOnMcpsIndication+0x75e>
    }
    case COMPLIANCE_DUT_FPORT_224_DISABLE_REQ:
    {
        mibReq.Type = MIB_IS_CERT_FPORT_ON;
 800dcfc:	2339      	movs	r3, #57	@ 0x39
 800dcfe:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
        mibReq.Param.IsCertPortOn = false;
 800dd02:	2300      	movs	r3, #0
 800dd04:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
        LoRaMacMibSetRequestConfirm( &mibReq );
 800dd08:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800dd0c:	4618      	mov	r0, r3
 800dd0e:	f004 f8b5 	bl	8011e7c <LoRaMacMibSetRequestConfirm>

        ComplianceTestState.IsResetCmdPending = true;
 800dd12:	4b04      	ldr	r3, [pc, #16]	@ (800dd24 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800dd14:	2201      	movs	r2, #1
 800dd16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        break;
 800dd1a:	e0bb      	b.n	800de94 <LmhpComplianceOnMcpsIndication+0x760>
 800dd1c:	0801ef9c 	.word	0x0801ef9c
 800dd20:	200008d8 	.word	0x200008d8
 800dd24:	200008a0 	.word	0x200008a0
 800dd28:	200000d0 	.word	0x200000d0
    {
        Version_t           lrwanVersion;
        Version_t           lrwanRpVersion;
        MibRequestConfirm_t mibReq;

        mibReq.Type = MIB_LORAWAN_VERSION;
 800dd2c:	232a      	movs	r3, #42	@ 0x2a
 800dd2e:	733b      	strb	r3, [r7, #12]

        LoRaMacMibGetRequestConfirm( &mibReq );
 800dd30:	f107 030c 	add.w	r3, r7, #12
 800dd34:	4618      	mov	r0, r3
 800dd36:	f003 fefb 	bl	8011b30 <LoRaMacMibGetRequestConfirm>
        lrwanVersion   = mibReq.Param.LrWanVersion.LoRaWan;
 800dd3a:	693b      	ldr	r3, [r7, #16]
 800dd3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        lrwanRpVersion = mibReq.Param.LrWanVersion.LoRaWanRegion;
 800dd3e:	697b      	ldr	r3, [r7, #20]
 800dd40:	63bb      	str	r3, [r7, #56]	@ 0x38

        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_DUT_VERSION_ANS;
 800dd42:	4b62      	ldr	r3, [pc, #392]	@ (800decc <LmhpComplianceOnMcpsIndication+0x798>)
 800dd44:	68da      	ldr	r2, [r3, #12]
 800dd46:	4b61      	ldr	r3, [pc, #388]	@ (800decc <LmhpComplianceOnMcpsIndication+0x798>)
 800dd48:	7a9b      	ldrb	r3, [r3, #10]
 800dd4a:	1c59      	adds	r1, r3, #1
 800dd4c:	b2c8      	uxtb	r0, r1
 800dd4e:	495f      	ldr	r1, [pc, #380]	@ (800decc <LmhpComplianceOnMcpsIndication+0x798>)
 800dd50:	7288      	strb	r0, [r1, #10]
 800dd52:	4413      	add	r3, r2
 800dd54:	227f      	movs	r2, #127	@ 0x7f
 800dd56:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Major;
 800dd58:	4b5d      	ldr	r3, [pc, #372]	@ (800ded0 <LmhpComplianceOnMcpsIndication+0x79c>)
 800dd5a:	681a      	ldr	r2, [r3, #0]
 800dd5c:	4b5b      	ldr	r3, [pc, #364]	@ (800decc <LmhpComplianceOnMcpsIndication+0x798>)
 800dd5e:	68d9      	ldr	r1, [r3, #12]
 800dd60:	4b5a      	ldr	r3, [pc, #360]	@ (800decc <LmhpComplianceOnMcpsIndication+0x798>)
 800dd62:	7a9b      	ldrb	r3, [r3, #10]
 800dd64:	1c58      	adds	r0, r3, #1
 800dd66:	b2c4      	uxtb	r4, r0
 800dd68:	4858      	ldr	r0, [pc, #352]	@ (800decc <LmhpComplianceOnMcpsIndication+0x798>)
 800dd6a:	7284      	strb	r4, [r0, #10]
 800dd6c:	440b      	add	r3, r1
 800dd6e:	78d2      	ldrb	r2, [r2, #3]
 800dd70:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Minor;
 800dd72:	4b57      	ldr	r3, [pc, #348]	@ (800ded0 <LmhpComplianceOnMcpsIndication+0x79c>)
 800dd74:	681a      	ldr	r2, [r3, #0]
 800dd76:	4b55      	ldr	r3, [pc, #340]	@ (800decc <LmhpComplianceOnMcpsIndication+0x798>)
 800dd78:	68d9      	ldr	r1, [r3, #12]
 800dd7a:	4b54      	ldr	r3, [pc, #336]	@ (800decc <LmhpComplianceOnMcpsIndication+0x798>)
 800dd7c:	7a9b      	ldrb	r3, [r3, #10]
 800dd7e:	1c58      	adds	r0, r3, #1
 800dd80:	b2c4      	uxtb	r4, r0
 800dd82:	4852      	ldr	r0, [pc, #328]	@ (800decc <LmhpComplianceOnMcpsIndication+0x798>)
 800dd84:	7284      	strb	r4, [r0, #10]
 800dd86:	440b      	add	r3, r1
 800dd88:	7892      	ldrb	r2, [r2, #2]
 800dd8a:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Patch;
 800dd8c:	4b50      	ldr	r3, [pc, #320]	@ (800ded0 <LmhpComplianceOnMcpsIndication+0x79c>)
 800dd8e:	681a      	ldr	r2, [r3, #0]
 800dd90:	4b4e      	ldr	r3, [pc, #312]	@ (800decc <LmhpComplianceOnMcpsIndication+0x798>)
 800dd92:	68d9      	ldr	r1, [r3, #12]
 800dd94:	4b4d      	ldr	r3, [pc, #308]	@ (800decc <LmhpComplianceOnMcpsIndication+0x798>)
 800dd96:	7a9b      	ldrb	r3, [r3, #10]
 800dd98:	1c58      	adds	r0, r3, #1
 800dd9a:	b2c4      	uxtb	r4, r0
 800dd9c:	484b      	ldr	r0, [pc, #300]	@ (800decc <LmhpComplianceOnMcpsIndication+0x798>)
 800dd9e:	7284      	strb	r4, [r0, #10]
 800dda0:	440b      	add	r3, r1
 800dda2:	7852      	ldrb	r2, [r2, #1]
 800dda4:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Revision;
 800dda6:	4b4a      	ldr	r3, [pc, #296]	@ (800ded0 <LmhpComplianceOnMcpsIndication+0x79c>)
 800dda8:	681a      	ldr	r2, [r3, #0]
 800ddaa:	4b48      	ldr	r3, [pc, #288]	@ (800decc <LmhpComplianceOnMcpsIndication+0x798>)
 800ddac:	68d9      	ldr	r1, [r3, #12]
 800ddae:	4b47      	ldr	r3, [pc, #284]	@ (800decc <LmhpComplianceOnMcpsIndication+0x798>)
 800ddb0:	7a9b      	ldrb	r3, [r3, #10]
 800ddb2:	1c58      	adds	r0, r3, #1
 800ddb4:	b2c4      	uxtb	r4, r0
 800ddb6:	4845      	ldr	r0, [pc, #276]	@ (800decc <LmhpComplianceOnMcpsIndication+0x798>)
 800ddb8:	7284      	strb	r4, [r0, #10]
 800ddba:	440b      	add	r3, r1
 800ddbc:	7812      	ldrb	r2, [r2, #0]
 800ddbe:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Major;
 800ddc0:	4b42      	ldr	r3, [pc, #264]	@ (800decc <LmhpComplianceOnMcpsIndication+0x798>)
 800ddc2:	68da      	ldr	r2, [r3, #12]
 800ddc4:	4b41      	ldr	r3, [pc, #260]	@ (800decc <LmhpComplianceOnMcpsIndication+0x798>)
 800ddc6:	7a9b      	ldrb	r3, [r3, #10]
 800ddc8:	1c59      	adds	r1, r3, #1
 800ddca:	b2c8      	uxtb	r0, r1
 800ddcc:	493f      	ldr	r1, [pc, #252]	@ (800decc <LmhpComplianceOnMcpsIndication+0x798>)
 800ddce:	7288      	strb	r0, [r1, #10]
 800ddd0:	4413      	add	r3, r2
 800ddd2:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800ddd6:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Minor;
 800ddd8:	4b3c      	ldr	r3, [pc, #240]	@ (800decc <LmhpComplianceOnMcpsIndication+0x798>)
 800ddda:	68da      	ldr	r2, [r3, #12]
 800dddc:	4b3b      	ldr	r3, [pc, #236]	@ (800decc <LmhpComplianceOnMcpsIndication+0x798>)
 800ddde:	7a9b      	ldrb	r3, [r3, #10]
 800dde0:	1c59      	adds	r1, r3, #1
 800dde2:	b2c8      	uxtb	r0, r1
 800dde4:	4939      	ldr	r1, [pc, #228]	@ (800decc <LmhpComplianceOnMcpsIndication+0x798>)
 800dde6:	7288      	strb	r0, [r1, #10]
 800dde8:	4413      	add	r3, r2
 800ddea:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 800ddee:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Patch;
 800ddf0:	4b36      	ldr	r3, [pc, #216]	@ (800decc <LmhpComplianceOnMcpsIndication+0x798>)
 800ddf2:	68da      	ldr	r2, [r3, #12]
 800ddf4:	4b35      	ldr	r3, [pc, #212]	@ (800decc <LmhpComplianceOnMcpsIndication+0x798>)
 800ddf6:	7a9b      	ldrb	r3, [r3, #10]
 800ddf8:	1c59      	adds	r1, r3, #1
 800ddfa:	b2c8      	uxtb	r0, r1
 800ddfc:	4933      	ldr	r1, [pc, #204]	@ (800decc <LmhpComplianceOnMcpsIndication+0x798>)
 800ddfe:	7288      	strb	r0, [r1, #10]
 800de00:	4413      	add	r3, r2
 800de02:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 800de06:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Revision;
 800de08:	4b30      	ldr	r3, [pc, #192]	@ (800decc <LmhpComplianceOnMcpsIndication+0x798>)
 800de0a:	68da      	ldr	r2, [r3, #12]
 800de0c:	4b2f      	ldr	r3, [pc, #188]	@ (800decc <LmhpComplianceOnMcpsIndication+0x798>)
 800de0e:	7a9b      	ldrb	r3, [r3, #10]
 800de10:	1c59      	adds	r1, r3, #1
 800de12:	b2c8      	uxtb	r0, r1
 800de14:	492d      	ldr	r1, [pc, #180]	@ (800decc <LmhpComplianceOnMcpsIndication+0x798>)
 800de16:	7288      	strb	r0, [r1, #10]
 800de18:	4413      	add	r3, r2
 800de1a:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 800de1e:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Major;
 800de20:	4b2a      	ldr	r3, [pc, #168]	@ (800decc <LmhpComplianceOnMcpsIndication+0x798>)
 800de22:	68da      	ldr	r2, [r3, #12]
 800de24:	4b29      	ldr	r3, [pc, #164]	@ (800decc <LmhpComplianceOnMcpsIndication+0x798>)
 800de26:	7a9b      	ldrb	r3, [r3, #10]
 800de28:	1c59      	adds	r1, r3, #1
 800de2a:	b2c8      	uxtb	r0, r1
 800de2c:	4927      	ldr	r1, [pc, #156]	@ (800decc <LmhpComplianceOnMcpsIndication+0x798>)
 800de2e:	7288      	strb	r0, [r1, #10]
 800de30:	4413      	add	r3, r2
 800de32:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 800de36:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Minor;
 800de38:	4b24      	ldr	r3, [pc, #144]	@ (800decc <LmhpComplianceOnMcpsIndication+0x798>)
 800de3a:	68da      	ldr	r2, [r3, #12]
 800de3c:	4b23      	ldr	r3, [pc, #140]	@ (800decc <LmhpComplianceOnMcpsIndication+0x798>)
 800de3e:	7a9b      	ldrb	r3, [r3, #10]
 800de40:	1c59      	adds	r1, r3, #1
 800de42:	b2c8      	uxtb	r0, r1
 800de44:	4921      	ldr	r1, [pc, #132]	@ (800decc <LmhpComplianceOnMcpsIndication+0x798>)
 800de46:	7288      	strb	r0, [r1, #10]
 800de48:	4413      	add	r3, r2
 800de4a:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 800de4e:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Patch;
 800de50:	4b1e      	ldr	r3, [pc, #120]	@ (800decc <LmhpComplianceOnMcpsIndication+0x798>)
 800de52:	68da      	ldr	r2, [r3, #12]
 800de54:	4b1d      	ldr	r3, [pc, #116]	@ (800decc <LmhpComplianceOnMcpsIndication+0x798>)
 800de56:	7a9b      	ldrb	r3, [r3, #10]
 800de58:	1c59      	adds	r1, r3, #1
 800de5a:	b2c8      	uxtb	r0, r1
 800de5c:	491b      	ldr	r1, [pc, #108]	@ (800decc <LmhpComplianceOnMcpsIndication+0x798>)
 800de5e:	7288      	strb	r0, [r1, #10]
 800de60:	4413      	add	r3, r2
 800de62:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800de66:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Revision;
 800de68:	4b18      	ldr	r3, [pc, #96]	@ (800decc <LmhpComplianceOnMcpsIndication+0x798>)
 800de6a:	68da      	ldr	r2, [r3, #12]
 800de6c:	4b17      	ldr	r3, [pc, #92]	@ (800decc <LmhpComplianceOnMcpsIndication+0x798>)
 800de6e:	7a9b      	ldrb	r3, [r3, #10]
 800de70:	1c59      	adds	r1, r3, #1
 800de72:	b2c8      	uxtb	r0, r1
 800de74:	4915      	ldr	r1, [pc, #84]	@ (800decc <LmhpComplianceOnMcpsIndication+0x798>)
 800de76:	7288      	strb	r0, [r1, #10]
 800de78:	4413      	add	r3, r2
 800de7a:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800de7e:	701a      	strb	r2, [r3, #0]
        break;
 800de80:	e008      	b.n	800de94 <LmhpComplianceOnMcpsIndication+0x760>
    }
    default:
    {
        break;
 800de82:	bf00      	nop
 800de84:	e006      	b.n	800de94 <LmhpComplianceOnMcpsIndication+0x760>
        break;
 800de86:	bf00      	nop
 800de88:	e004      	b.n	800de94 <LmhpComplianceOnMcpsIndication+0x760>
        break;
 800de8a:	bf00      	nop
 800de8c:	e002      	b.n	800de94 <LmhpComplianceOnMcpsIndication+0x760>
        break;
 800de8e:	bf00      	nop
 800de90:	e000      	b.n	800de94 <LmhpComplianceOnMcpsIndication+0x760>
        break;
 800de92:	bf00      	nop
    }
    }

    if( ComplianceTestState.DataBufferSize != 0 )
 800de94:	4b0d      	ldr	r3, [pc, #52]	@ (800decc <LmhpComplianceOnMcpsIndication+0x798>)
 800de96:	7a9b      	ldrb	r3, [r3, #10]
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d008      	beq.n	800deae <LmhpComplianceOnMcpsIndication+0x77a>
    {
        TimerSetValue( &ProcessTimer, 1000 );
 800de9c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800dea0:	480c      	ldr	r0, [pc, #48]	@ (800ded4 <LmhpComplianceOnMcpsIndication+0x7a0>)
 800dea2:	f00d fafd 	bl	801b4a0 <UTIL_TIMER_SetPeriod>
        TimerStart(&ProcessTimer);
 800dea6:	480b      	ldr	r0, [pc, #44]	@ (800ded4 <LmhpComplianceOnMcpsIndication+0x7a0>)
 800dea8:	f00d fa1c 	bl	801b2e4 <UTIL_TIMER_Start>
 800deac:	e00b      	b.n	800dec6 <LmhpComplianceOnMcpsIndication+0x792>
    }
    else
    {
        // Abort any pending Tx as a new command has been processed
        TimerStop(&ProcessTimer);
 800deae:	4809      	ldr	r0, [pc, #36]	@ (800ded4 <LmhpComplianceOnMcpsIndication+0x7a0>)
 800deb0:	f00d fa86 	bl	801b3c0 <UTIL_TIMER_Stop>
        ComplianceTestState.IsTxPending = false;
 800deb4:	4b05      	ldr	r3, [pc, #20]	@ (800decc <LmhpComplianceOnMcpsIndication+0x798>)
 800deb6:	2200      	movs	r2, #0
 800deb8:	705a      	strb	r2, [r3, #1]
 800deba:	e004      	b.n	800dec6 <LmhpComplianceOnMcpsIndication+0x792>
        return;
 800debc:	bf00      	nop
 800debe:	e002      	b.n	800dec6 <LmhpComplianceOnMcpsIndication+0x792>
        return;
 800dec0:	bf00      	nop
 800dec2:	e000      	b.n	800dec6 <LmhpComplianceOnMcpsIndication+0x792>
        return;
 800dec4:	bf00      	nop
    }
}
 800dec6:	3790      	adds	r7, #144	@ 0x90
 800dec8:	46bd      	mov	sp, r7
 800deca:	bdb0      	pop	{r4, r5, r7, pc}
 800decc:	200008a0 	.word	0x200008a0
 800ded0:	200008d8 	.word	0x200008d8
 800ded4:	200008dc 	.word	0x200008dc

0800ded8 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800ded8:	b480      	push	{r7}
 800deda:	b083      	sub	sp, #12
 800dedc:	af00      	add	r7, sp, #0
 800dede:	6078      	str	r0, [r7, #4]
        break;
    }
#endif
    /* ST_WORKAROUND_END */
    default:
        break;
 800dee0:	bf00      	nop
    }
}
 800dee2:	bf00      	nop
 800dee4:	370c      	adds	r7, #12
 800dee6:	46bd      	mov	sp, r7
 800dee8:	bc80      	pop	{r7}
 800deea:	4770      	bx	lr

0800deec <LmhpComplianceOnMlmeIndication>:

static void LmhpComplianceOnMlmeIndication( MlmeIndication_t* mlmeIndication )
{
 800deec:	b480      	push	{r7}
 800deee:	b083      	sub	sp, #12
 800def0:	af00      	add	r7, sp, #0
 800def2:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800def4:	4b05      	ldr	r3, [pc, #20]	@ (800df0c <LmhpComplianceOnMlmeIndication+0x20>)
 800def6:	781b      	ldrb	r3, [r3, #0]
 800def8:	f083 0301 	eor.w	r3, r3, #1
 800defc:	b2db      	uxtb	r3, r3
 800defe:	2b00      	cmp	r3, #0
    {
        return;
 800df00:	bf00      	nop
#endif
    /* ST_WORKAROUND_END */
    default:
        break;
    }
}
 800df02:	370c      	adds	r7, #12
 800df04:	46bd      	mov	sp, r7
 800df06:	bc80      	pop	{r7}
 800df08:	4770      	bx	lr
 800df0a:	bf00      	nop
 800df0c:	200008a0 	.word	0x200008a0

0800df10 <OnProcessTimer>:
}
#endif
/* ST_WORKAROUND_END */

static void OnProcessTimer( void *context )
{
 800df10:	b580      	push	{r7, lr}
 800df12:	b082      	sub	sp, #8
 800df14:	af00      	add	r7, sp, #0
 800df16:	6078      	str	r0, [r7, #4]
    ComplianceTestState.IsTxPending = true;
 800df18:	4b04      	ldr	r3, [pc, #16]	@ (800df2c <OnProcessTimer+0x1c>)
 800df1a:	2201      	movs	r2, #1
 800df1c:	705a      	strb	r2, [r3, #1]
    CompliancePackage.OnPackageProcessEvent();
 800df1e:	4b04      	ldr	r3, [pc, #16]	@ (800df30 <OnProcessTimer+0x20>)
 800df20:	695b      	ldr	r3, [r3, #20]
 800df22:	4798      	blx	r3
}
 800df24:	bf00      	nop
 800df26:	3708      	adds	r7, #8
 800df28:	46bd      	mov	sp, r7
 800df2a:	bd80      	pop	{r7, pc}
 800df2c:	200008a0 	.word	0x200008a0
 800df30:	200000d0 	.word	0x200000d0

0800df34 <OnRadioTxDone>:
    int16_t Rssi;
    int8_t Snr;
}RxDoneParams;

static void OnRadioTxDone( void )
{
 800df34:	b590      	push	{r4, r7, lr}
 800df36:	b083      	sub	sp, #12
 800df38:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800df3a:	f00d fb5b 	bl	801b5f4 <UTIL_TIMER_GetCurrentTime>
 800df3e:	4603      	mov	r3, r0
 800df40:	4a16      	ldr	r2, [pc, #88]	@ (800df9c <OnRadioTxDone+0x68>)
 800df42:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800df44:	4c16      	ldr	r4, [pc, #88]	@ (800dfa0 <OnRadioTxDone+0x6c>)
 800df46:	463b      	mov	r3, r7
 800df48:	4618      	mov	r0, r3
 800df4a:	f00c fcd3 	bl	801a8f4 <SysTimeGet>
 800df4e:	f504 734e 	add.w	r3, r4, #824	@ 0x338
 800df52:	463a      	mov	r2, r7
 800df54:	e892 0003 	ldmia.w	r2, {r0, r1}
 800df58:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 800df5c:	4a11      	ldr	r2, [pc, #68]	@ (800dfa4 <OnRadioTxDone+0x70>)
 800df5e:	7813      	ldrb	r3, [r2, #0]
 800df60:	f043 0320 	orr.w	r3, r3, #32
 800df64:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800df66:	4b0e      	ldr	r3, [pc, #56]	@ (800dfa0 <OnRadioTxDone+0x6c>)
 800df68:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d00a      	beq.n	800df86 <OnRadioTxDone+0x52>
 800df70:	4b0b      	ldr	r3, [pc, #44]	@ (800dfa0 <OnRadioTxDone+0x6c>)
 800df72:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800df76:	691b      	ldr	r3, [r3, #16]
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d004      	beq.n	800df86 <OnRadioTxDone+0x52>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800df7c:	4b08      	ldr	r3, [pc, #32]	@ (800dfa0 <OnRadioTxDone+0x6c>)
 800df7e:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800df82:	691b      	ldr	r3, [r3, #16]
 800df84:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800df86:	4b08      	ldr	r3, [pc, #32]	@ (800dfa8 <OnRadioTxDone+0x74>)
 800df88:	2201      	movs	r2, #1
 800df8a:	2100      	movs	r1, #0
 800df8c:	2002      	movs	r0, #2
 800df8e:	f00d fc21 	bl	801b7d4 <UTIL_ADV_TRACE_COND_FSend>
}
 800df92:	bf00      	nop
 800df94:	370c      	adds	r7, #12
 800df96:	46bd      	mov	sp, r7
 800df98:	bd90      	pop	{r4, r7, pc}
 800df9a:	bf00      	nop
 800df9c:	200019a0 	.word	0x200019a0
 800dfa0:	200008f4 	.word	0x200008f4
 800dfa4:	2000199c 	.word	0x2000199c
 800dfa8:	0801efc8 	.word	0x0801efc8

0800dfac <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800dfac:	b580      	push	{r7, lr}
 800dfae:	b084      	sub	sp, #16
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	60f8      	str	r0, [r7, #12]
 800dfb4:	4608      	mov	r0, r1
 800dfb6:	4611      	mov	r1, r2
 800dfb8:	461a      	mov	r2, r3
 800dfba:	4603      	mov	r3, r0
 800dfbc:	817b      	strh	r3, [r7, #10]
 800dfbe:	460b      	mov	r3, r1
 800dfc0:	813b      	strh	r3, [r7, #8]
 800dfc2:	4613      	mov	r3, r2
 800dfc4:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800dfc6:	f00d fb15 	bl	801b5f4 <UTIL_TIMER_GetCurrentTime>
 800dfca:	4603      	mov	r3, r0
 800dfcc:	4a18      	ldr	r2, [pc, #96]	@ (800e030 <OnRadioRxDone+0x84>)
 800dfce:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 800dfd0:	4a17      	ldr	r2, [pc, #92]	@ (800e030 <OnRadioRxDone+0x84>)
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 800dfd6:	4a16      	ldr	r2, [pc, #88]	@ (800e030 <OnRadioRxDone+0x84>)
 800dfd8:	897b      	ldrh	r3, [r7, #10]
 800dfda:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 800dfdc:	4a14      	ldr	r2, [pc, #80]	@ (800e030 <OnRadioRxDone+0x84>)
 800dfde:	893b      	ldrh	r3, [r7, #8]
 800dfe0:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 800dfe2:	4a13      	ldr	r2, [pc, #76]	@ (800e030 <OnRadioRxDone+0x84>)
 800dfe4:	79fb      	ldrb	r3, [r7, #7]
 800dfe6:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 800dfe8:	4a12      	ldr	r2, [pc, #72]	@ (800e034 <OnRadioRxDone+0x88>)
 800dfea:	7813      	ldrb	r3, [r2, #0]
 800dfec:	f043 0310 	orr.w	r3, r3, #16
 800dff0:	7013      	strb	r3, [r2, #0]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
 800dff2:	4a10      	ldr	r2, [pc, #64]	@ (800e034 <OnRadioRxDone+0x88>)
 800dff4:	7813      	ldrb	r3, [r2, #0]
 800dff6:	f043 0301 	orr.w	r3, r3, #1
 800dffa:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800dffc:	4b0e      	ldr	r3, [pc, #56]	@ (800e038 <OnRadioRxDone+0x8c>)
 800dffe:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800e002:	2b00      	cmp	r3, #0
 800e004:	d00a      	beq.n	800e01c <OnRadioRxDone+0x70>
 800e006:	4b0c      	ldr	r3, [pc, #48]	@ (800e038 <OnRadioRxDone+0x8c>)
 800e008:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800e00c:	691b      	ldr	r3, [r3, #16]
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d004      	beq.n	800e01c <OnRadioRxDone+0x70>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800e012:	4b09      	ldr	r3, [pc, #36]	@ (800e038 <OnRadioRxDone+0x8c>)
 800e014:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800e018:	691b      	ldr	r3, [r3, #16]
 800e01a:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800e01c:	4b07      	ldr	r3, [pc, #28]	@ (800e03c <OnRadioRxDone+0x90>)
 800e01e:	2201      	movs	r2, #1
 800e020:	2100      	movs	r1, #0
 800e022:	2002      	movs	r0, #2
 800e024:	f00d fbd6 	bl	801b7d4 <UTIL_ADV_TRACE_COND_FSend>
}
 800e028:	bf00      	nop
 800e02a:	3710      	adds	r7, #16
 800e02c:	46bd      	mov	sp, r7
 800e02e:	bd80      	pop	{r7, pc}
 800e030:	200019a4 	.word	0x200019a4
 800e034:	2000199c 	.word	0x2000199c
 800e038:	200008f4 	.word	0x200008f4
 800e03c:	0801efd8 	.word	0x0801efd8

0800e040 <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800e040:	b580      	push	{r7, lr}
 800e042:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800e044:	4a0e      	ldr	r2, [pc, #56]	@ (800e080 <OnRadioTxTimeout+0x40>)
 800e046:	7813      	ldrb	r3, [r2, #0]
 800e048:	f043 0308 	orr.w	r3, r3, #8
 800e04c:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800e04e:	4b0d      	ldr	r3, [pc, #52]	@ (800e084 <OnRadioTxTimeout+0x44>)
 800e050:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800e054:	2b00      	cmp	r3, #0
 800e056:	d00a      	beq.n	800e06e <OnRadioTxTimeout+0x2e>
 800e058:	4b0a      	ldr	r3, [pc, #40]	@ (800e084 <OnRadioTxTimeout+0x44>)
 800e05a:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800e05e:	691b      	ldr	r3, [r3, #16]
 800e060:	2b00      	cmp	r3, #0
 800e062:	d004      	beq.n	800e06e <OnRadioTxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800e064:	4b07      	ldr	r3, [pc, #28]	@ (800e084 <OnRadioTxTimeout+0x44>)
 800e066:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800e06a:	691b      	ldr	r3, [r3, #16]
 800e06c:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800e06e:	4b06      	ldr	r3, [pc, #24]	@ (800e088 <OnRadioTxTimeout+0x48>)
 800e070:	2201      	movs	r2, #1
 800e072:	2100      	movs	r1, #0
 800e074:	2002      	movs	r0, #2
 800e076:	f00d fbad 	bl	801b7d4 <UTIL_ADV_TRACE_COND_FSend>
}
 800e07a:	bf00      	nop
 800e07c:	bd80      	pop	{r7, pc}
 800e07e:	bf00      	nop
 800e080:	2000199c 	.word	0x2000199c
 800e084:	200008f4 	.word	0x200008f4
 800e088:	0801efe8 	.word	0x0801efe8

0800e08c <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800e08c:	b580      	push	{r7, lr}
 800e08e:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 800e090:	4a0b      	ldr	r2, [pc, #44]	@ (800e0c0 <OnRadioRxError+0x34>)
 800e092:	7813      	ldrb	r3, [r2, #0]
 800e094:	f043 0304 	orr.w	r3, r3, #4
 800e098:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800e09a:	4b0a      	ldr	r3, [pc, #40]	@ (800e0c4 <OnRadioRxError+0x38>)
 800e09c:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d00a      	beq.n	800e0ba <OnRadioRxError+0x2e>
 800e0a4:	4b07      	ldr	r3, [pc, #28]	@ (800e0c4 <OnRadioRxError+0x38>)
 800e0a6:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800e0aa:	691b      	ldr	r3, [r3, #16]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d004      	beq.n	800e0ba <OnRadioRxError+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800e0b0:	4b04      	ldr	r3, [pc, #16]	@ (800e0c4 <OnRadioRxError+0x38>)
 800e0b2:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800e0b6:	691b      	ldr	r3, [r3, #16]
 800e0b8:	4798      	blx	r3
    }
}
 800e0ba:	bf00      	nop
 800e0bc:	bd80      	pop	{r7, pc}
 800e0be:	bf00      	nop
 800e0c0:	2000199c 	.word	0x2000199c
 800e0c4:	200008f4 	.word	0x200008f4

0800e0c8 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 800e0c8:	b580      	push	{r7, lr}
 800e0ca:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800e0cc:	4a0e      	ldr	r2, [pc, #56]	@ (800e108 <OnRadioRxTimeout+0x40>)
 800e0ce:	7813      	ldrb	r3, [r2, #0]
 800e0d0:	f043 0302 	orr.w	r3, r3, #2
 800e0d4:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800e0d6:	4b0d      	ldr	r3, [pc, #52]	@ (800e10c <OnRadioRxTimeout+0x44>)
 800e0d8:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d00a      	beq.n	800e0f6 <OnRadioRxTimeout+0x2e>
 800e0e0:	4b0a      	ldr	r3, [pc, #40]	@ (800e10c <OnRadioRxTimeout+0x44>)
 800e0e2:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800e0e6:	691b      	ldr	r3, [r3, #16]
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d004      	beq.n	800e0f6 <OnRadioRxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800e0ec:	4b07      	ldr	r3, [pc, #28]	@ (800e10c <OnRadioRxTimeout+0x44>)
 800e0ee:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800e0f2:	691b      	ldr	r3, [r3, #16]
 800e0f4:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800e0f6:	4b06      	ldr	r3, [pc, #24]	@ (800e110 <OnRadioRxTimeout+0x48>)
 800e0f8:	2201      	movs	r2, #1
 800e0fa:	2100      	movs	r1, #0
 800e0fc:	2002      	movs	r0, #2
 800e0fe:	f00d fb69 	bl	801b7d4 <UTIL_ADV_TRACE_COND_FSend>
}
 800e102:	bf00      	nop
 800e104:	bd80      	pop	{r7, pc}
 800e106:	bf00      	nop
 800e108:	2000199c 	.word	0x2000199c
 800e10c:	200008f4 	.word	0x200008f4
 800e110:	0801eff8 	.word	0x0801eff8

0800e114 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 800e114:	b480      	push	{r7}
 800e116:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800e118:	4b08      	ldr	r3, [pc, #32]	@ (800e13c <UpdateRxSlotIdleState+0x28>)
 800e11a:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800e11e:	2b02      	cmp	r3, #2
 800e120:	d004      	beq.n	800e12c <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800e122:	4b07      	ldr	r3, [pc, #28]	@ (800e140 <UpdateRxSlotIdleState+0x2c>)
 800e124:	2206      	movs	r2, #6
 800e126:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800e12a:	e003      	b.n	800e134 <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800e12c:	4b04      	ldr	r3, [pc, #16]	@ (800e140 <UpdateRxSlotIdleState+0x2c>)
 800e12e:	2202      	movs	r2, #2
 800e130:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
}
 800e134:	bf00      	nop
 800e136:	46bd      	mov	sp, r7
 800e138:	bc80      	pop	{r7}
 800e13a:	4770      	bx	lr
 800e13c:	20000e14 	.word	0x20000e14
 800e140:	200008f4 	.word	0x200008f4

0800e144 <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 800e144:	b580      	push	{r7, lr}
 800e146:	b08e      	sub	sp, #56	@ 0x38
 800e148:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800e14a:	4b3e      	ldr	r3, [pc, #248]	@ (800e244 <ProcessRadioTxDone+0x100>)
 800e14c:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800e150:	2b02      	cmp	r3, #2
 800e152:	d002      	beq.n	800e15a <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 800e154:	4b3c      	ldr	r3, [pc, #240]	@ (800e248 <ProcessRadioTxDone+0x104>)
 800e156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e158:	4798      	blx	r3
    }
#if ( !defined(DISABLE_LORAWAN_RX_WINDOW) || (DISABLE_LORAWAN_RX_WINDOW == 0) )
    // Setup timers
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 800e15a:	4b3c      	ldr	r3, [pc, #240]	@ (800e24c <ProcessRadioTxDone+0x108>)
 800e15c:	f8d3 33b0 	ldr.w	r3, [r3, #944]	@ 0x3b0
 800e160:	4619      	mov	r1, r3
 800e162:	483b      	ldr	r0, [pc, #236]	@ (800e250 <ProcessRadioTxDone+0x10c>)
 800e164:	f00d f99c 	bl	801b4a0 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800e168:	4839      	ldr	r0, [pc, #228]	@ (800e250 <ProcessRadioTxDone+0x10c>)
 800e16a:	f00d f8bb 	bl	801b2e4 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 800e16e:	4b37      	ldr	r3, [pc, #220]	@ (800e24c <ProcessRadioTxDone+0x108>)
 800e170:	f8d3 33b4 	ldr.w	r3, [r3, #948]	@ 0x3b4
 800e174:	4619      	mov	r1, r3
 800e176:	4837      	ldr	r0, [pc, #220]	@ (800e254 <ProcessRadioTxDone+0x110>)
 800e178:	f00d f992 	bl	801b4a0 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800e17c:	4835      	ldr	r0, [pc, #212]	@ (800e254 <ProcessRadioTxDone+0x110>)
 800e17e:	f00d f8b1 	bl	801b2e4 <UTIL_TIMER_Start>
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
        TimerStart( &MacCtx.AckTimeoutTimer );
    }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( MacCtx.NodeAckRequested == true )
 800e182:	4b32      	ldr	r3, [pc, #200]	@ (800e24c <ProcessRadioTxDone+0x108>)
 800e184:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d01a      	beq.n	800e1c2 <ProcessRadioTxDone+0x7e>
    {
        getPhy.Attribute = PHY_RETRANSMIT_TIMEOUT;
 800e18c:	2315      	movs	r3, #21
 800e18e:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e192:	4b2c      	ldr	r3, [pc, #176]	@ (800e244 <ProcessRadioTxDone+0x100>)
 800e194:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e198:	f107 0220 	add.w	r2, r7, #32
 800e19c:	4611      	mov	r1, r2
 800e19e:	4618      	mov	r0, r3
 800e1a0:	f006 fd20 	bl	8014be4 <RegionGetPhyParam>
 800e1a4:	4603      	mov	r3, r0
 800e1a6:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.RetransmitTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800e1a8:	4b28      	ldr	r3, [pc, #160]	@ (800e24c <ProcessRadioTxDone+0x108>)
 800e1aa:	f8d3 23b4 	ldr.w	r2, [r3, #948]	@ 0x3b4
 800e1ae:	69fb      	ldr	r3, [r7, #28]
 800e1b0:	4413      	add	r3, r2
 800e1b2:	4619      	mov	r1, r3
 800e1b4:	4828      	ldr	r0, [pc, #160]	@ (800e258 <ProcessRadioTxDone+0x114>)
 800e1b6:	f00d f973 	bl	801b4a0 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.RetransmitTimeoutTimer );
 800e1ba:	4827      	ldr	r0, [pc, #156]	@ (800e258 <ProcessRadioTxDone+0x114>)
 800e1bc:	f00d f892 	bl	801b2e4 <UTIL_TIMER_Start>
 800e1c0:	e003      	b.n	800e1ca <ProcessRadioTxDone+0x86>
    }
    else
    {
        // Transmission successful, setup status directly
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800e1c2:	4b22      	ldr	r3, [pc, #136]	@ (800e24c <ProcessRadioTxDone+0x108>)
 800e1c4:	2200      	movs	r2, #0
 800e1c6:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
    }
#endif /* LORAMAC_VERSION */

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800e1ca:	4b24      	ldr	r3, [pc, #144]	@ (800e25c <ProcessRadioTxDone+0x118>)
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	4a1d      	ldr	r2, [pc, #116]	@ (800e244 <ProcessRadioTxDone+0x100>)
 800e1d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 800e1d2:	4b1e      	ldr	r3, [pc, #120]	@ (800e24c <ProcessRadioTxDone+0x108>)
 800e1d4:	f893 341f 	ldrb.w	r3, [r3, #1055]	@ 0x41f
 800e1d8:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800e1da:	4b20      	ldr	r3, [pc, #128]	@ (800e25c <ProcessRadioTxDone+0x118>)
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800e1e0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800e1e4:	4618      	mov	r0, r3
 800e1e6:	f00c fbbd 	bl	801a964 <SysTimeGetMcuTime>
 800e1ea:	4638      	mov	r0, r7
 800e1ec:	4b15      	ldr	r3, [pc, #84]	@ (800e244 <ProcessRadioTxDone+0x100>)
 800e1ee:	f8d3 2114 	ldr.w	r2, [r3, #276]	@ 0x114
 800e1f2:	9200      	str	r2, [sp, #0]
 800e1f4:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800e1f8:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800e1fc:	ca06      	ldmia	r2, {r1, r2}
 800e1fe:	f00c fb12 	bl	801a826 <SysTimeSub>
 800e202:	f107 0314 	add.w	r3, r7, #20
 800e206:	463a      	mov	r2, r7
 800e208:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e20c:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800e210:	4b0e      	ldr	r3, [pc, #56]	@ (800e24c <ProcessRadioTxDone+0x108>)
 800e212:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 800e216:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 800e218:	2301      	movs	r3, #1
 800e21a:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800e21c:	4b09      	ldr	r3, [pc, #36]	@ (800e244 <ProcessRadioTxDone+0x100>)
 800e21e:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800e222:	2b00      	cmp	r3, #0
 800e224:	d101      	bne.n	800e22a <ProcessRadioTxDone+0xe6>
    {
        txDone.Joined  = false;
 800e226:	2300      	movs	r3, #0
 800e228:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 800e22a:	4b06      	ldr	r3, [pc, #24]	@ (800e244 <ProcessRadioTxDone+0x100>)
 800e22c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e230:	f107 0208 	add.w	r2, r7, #8
 800e234:	4611      	mov	r1, r2
 800e236:	4618      	mov	r0, r3
 800e238:	f006 fcec 	bl	8014c14 <RegionSetBandTxDone>
    if( MacCtx.NodeAckRequested == false )
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
    }
#endif /* LORAMAC_VERSION */
}
 800e23c:	bf00      	nop
 800e23e:	3730      	adds	r7, #48	@ 0x30
 800e240:	46bd      	mov	sp, r7
 800e242:	bd80      	pop	{r7, pc}
 800e244:	20000e14 	.word	0x20000e14
 800e248:	0801f68c 	.word	0x0801f68c
 800e24c:	200008f4 	.word	0x200008f4
 800e250:	20000c74 	.word	0x20000c74
 800e254:	20000c8c 	.word	0x20000c8c
 800e258:	20000cf8 	.word	0x20000cf8
 800e25c:	200019a0 	.word	0x200019a0

0800e260 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800e260:	b580      	push	{r7, lr}
 800e262:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800e264:	4b10      	ldr	r3, [pc, #64]	@ (800e2a8 <PrepareRxDoneAbort+0x48>)
 800e266:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800e26a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e26e:	4a0e      	ldr	r2, [pc, #56]	@ (800e2a8 <PrepareRxDoneAbort+0x48>)
 800e270:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    if( MacCtx.NodeAckRequested == true )
 800e274:	4b0c      	ldr	r3, [pc, #48]	@ (800e2a8 <PrepareRxDoneAbort+0x48>)
 800e276:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d002      	beq.n	800e284 <PrepareRxDoneAbort+0x24>
    {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        OnAckTimeoutTimerEvent( NULL );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        OnRetransmitTimeoutTimerEvent( NULL );
 800e27e:	2000      	movs	r0, #0
 800e280:	f001 f99c 	bl	800f5bc <OnRetransmitTimeoutTimerEvent>
#endif /* LORAMAC_VERSION */
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 800e284:	4a08      	ldr	r2, [pc, #32]	@ (800e2a8 <PrepareRxDoneAbort+0x48>)
 800e286:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800e28a:	f043 0302 	orr.w	r3, r3, #2
 800e28e:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
    MacCtx.MacFlags.Bits.MacDone = 1;
 800e292:	4a05      	ldr	r2, [pc, #20]	@ (800e2a8 <PrepareRxDoneAbort+0x48>)
 800e294:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800e298:	f043 0320 	orr.w	r3, r3, #32
 800e29c:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495

    UpdateRxSlotIdleState( );
 800e2a0:	f7ff ff38 	bl	800e114 <UpdateRxSlotIdleState>
}
 800e2a4:	bf00      	nop
 800e2a6:	bd80      	pop	{r7, pc}
 800e2a8:	200008f4 	.word	0x200008f4

0800e2ac <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 800e2ac:	b590      	push	{r4, r7, lr}
 800e2ae:	b0a7      	sub	sp, #156	@ 0x9c
 800e2b0:	af02      	add	r7, sp, #8
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800e2b2:	2312      	movs	r3, #18
 800e2b4:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 800e2b8:	4bbd      	ldr	r3, [pc, #756]	@ (800e5b0 <ProcessRadioRxDone+0x304>)
 800e2ba:	685b      	ldr	r3, [r3, #4]
 800e2bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    uint16_t size = RxDoneParams.Size;
 800e2c0:	4bbb      	ldr	r3, [pc, #748]	@ (800e5b0 <ProcessRadioRxDone+0x304>)
 800e2c2:	891b      	ldrh	r3, [r3, #8]
 800e2c4:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
    int16_t rssi = RxDoneParams.Rssi;
 800e2c8:	4bb9      	ldr	r3, [pc, #740]	@ (800e5b0 <ProcessRadioRxDone+0x304>)
 800e2ca:	895b      	ldrh	r3, [r3, #10]
 800e2cc:	f8a7 3080 	strh.w	r3, [r7, #128]	@ 0x80
    int8_t snr = RxDoneParams.Snr;
 800e2d0:	4bb7      	ldr	r3, [pc, #732]	@ (800e5b0 <ProcessRadioRxDone+0x304>)
 800e2d2:	7b1b      	ldrb	r3, [r3, #12]
 800e2d4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f

    uint8_t pktHeaderLen = 0;
 800e2d8:	2300      	movs	r3, #0
 800e2da:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e

    uint32_t downLinkCounter = 0;
 800e2de:	2300      	movs	r3, #0
 800e2e0:	60bb      	str	r3, [r7, #8]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800e2e2:	4bb4      	ldr	r3, [pc, #720]	@ (800e5b4 <ProcessRadioRxDone+0x308>)
 800e2e4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800e2e8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    uint8_t multicast = 0;
 800e2ec:	2300      	movs	r3, #0
 800e2ee:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800e2f2:	2301      	movs	r3, #1
 800e2f4:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
    FCntIdentifier_t fCntID;

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
 800e2f8:	4aaf      	ldr	r2, [pc, #700]	@ (800e5b8 <ProcessRadioRxDone+0x30c>)
 800e2fa:	7813      	ldrb	r3, [r2, #0]
 800e2fc:	f023 0301 	bic.w	r3, r3, #1
 800e300:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    MacCtx.McpsConfirm.AckReceived = false;
 800e302:	4bae      	ldr	r3, [pc, #696]	@ (800e5bc <ProcessRadioRxDone+0x310>)
 800e304:	2200      	movs	r2, #0
 800e306:	f883 2448 	strb.w	r2, [r3, #1096]	@ 0x448
    MacCtx.RxStatus.Rssi = rssi;
 800e30a:	4aac      	ldr	r2, [pc, #688]	@ (800e5bc <ProcessRadioRxDone+0x310>)
 800e30c:	f8b7 3080 	ldrh.w	r3, [r7, #128]	@ 0x80
 800e310:	f8a2 3490 	strh.w	r3, [r2, #1168]	@ 0x490
    MacCtx.RxStatus.Snr = snr;
 800e314:	4aa9      	ldr	r2, [pc, #676]	@ (800e5bc <ProcessRadioRxDone+0x310>)
 800e316:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800e31a:	f882 3492 	strb.w	r3, [r2, #1170]	@ 0x492
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 800e31e:	4ba7      	ldr	r3, [pc, #668]	@ (800e5bc <ProcessRadioRxDone+0x310>)
 800e320:	f893 2494 	ldrb.w	r2, [r3, #1172]	@ 0x494
 800e324:	4ba5      	ldr	r3, [pc, #660]	@ (800e5bc <ProcessRadioRxDone+0x310>)
 800e326:	f883 2493 	strb.w	r2, [r3, #1171]	@ 0x493
    MacCtx.McpsIndication.Port = 0;
 800e32a:	4ba4      	ldr	r3, [pc, #656]	@ (800e5bc <ProcessRadioRxDone+0x310>)
 800e32c:	2200      	movs	r2, #0
 800e32e:	f883 2427 	strb.w	r2, [r3, #1063]	@ 0x427
    MacCtx.McpsIndication.Multicast = 0;
 800e332:	4ba2      	ldr	r3, [pc, #648]	@ (800e5bc <ProcessRadioRxDone+0x310>)
 800e334:	2200      	movs	r2, #0
 800e336:	f883 2426 	strb.w	r2, [r3, #1062]	@ 0x426
    MacCtx.McpsIndication.FramePending = 0;
 800e33a:	4ba0      	ldr	r3, [pc, #640]	@ (800e5bc <ProcessRadioRxDone+0x310>)
 800e33c:	2200      	movs	r2, #0
 800e33e:	f883 2429 	strb.w	r2, [r3, #1065]	@ 0x429
    MacCtx.McpsIndication.Buffer = NULL;
 800e342:	4b9e      	ldr	r3, [pc, #632]	@ (800e5bc <ProcessRadioRxDone+0x310>)
 800e344:	2200      	movs	r2, #0
 800e346:	f8c3 242c 	str.w	r2, [r3, #1068]	@ 0x42c
    MacCtx.McpsIndication.BufferSize = 0;
 800e34a:	4b9c      	ldr	r3, [pc, #624]	@ (800e5bc <ProcessRadioRxDone+0x310>)
 800e34c:	2200      	movs	r2, #0
 800e34e:	f883 2430 	strb.w	r2, [r3, #1072]	@ 0x430
    MacCtx.McpsIndication.RxData = false;
 800e352:	4b9a      	ldr	r3, [pc, #616]	@ (800e5bc <ProcessRadioRxDone+0x310>)
 800e354:	2200      	movs	r2, #0
 800e356:	f883 2431 	strb.w	r2, [r3, #1073]	@ 0x431
    MacCtx.McpsIndication.AckReceived = false;
 800e35a:	4b98      	ldr	r3, [pc, #608]	@ (800e5bc <ProcessRadioRxDone+0x310>)
 800e35c:	2200      	movs	r2, #0
 800e35e:	f883 2432 	strb.w	r2, [r3, #1074]	@ 0x432
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800e362:	4b96      	ldr	r3, [pc, #600]	@ (800e5bc <ProcessRadioRxDone+0x310>)
 800e364:	2200      	movs	r2, #0
 800e366:	f8c3 2434 	str.w	r2, [r3, #1076]	@ 0x434
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800e36a:	4b94      	ldr	r3, [pc, #592]	@ (800e5bc <ProcessRadioRxDone+0x310>)
 800e36c:	2200      	movs	r2, #0
 800e36e:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
    MacCtx.McpsIndication.DevAddress = 0;
 800e372:	4b92      	ldr	r3, [pc, #584]	@ (800e5bc <ProcessRadioRxDone+0x310>)
 800e374:	2200      	movs	r2, #0
 800e376:	f8c3 2438 	str.w	r2, [r3, #1080]	@ 0x438
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800e37a:	4b90      	ldr	r3, [pc, #576]	@ (800e5bc <ProcessRadioRxDone+0x310>)
 800e37c:	2200      	movs	r2, #0
 800e37e:	f883 243c 	strb.w	r2, [r3, #1084]	@ 0x43c
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.McpsIndication.ResponseTimeout = 0;
 800e382:	4b8e      	ldr	r3, [pc, #568]	@ (800e5bc <ProcessRadioRxDone+0x310>)
 800e384:	2200      	movs	r2, #0
 800e386:	f8c3 2440 	str.w	r2, [r3, #1088]	@ 0x440
#endif /* LORAMAC_VERSION */

    Radio.Sleep( );
 800e38a:	4b8d      	ldr	r3, [pc, #564]	@ (800e5c0 <ProcessRadioRxDone+0x314>)
 800e38c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e38e:	4798      	blx	r3

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.RxWindowTimer2 );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 800e390:	4b8a      	ldr	r3, [pc, #552]	@ (800e5bc <ProcessRadioRxDone+0x310>)
 800e392:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800e396:	2b00      	cmp	r3, #0
 800e398:	d102      	bne.n	800e3a0 <ProcessRadioRxDone+0xf4>
    {
        TimerStop( &MacCtx.RxWindowTimer2 );
 800e39a:	488a      	ldr	r0, [pc, #552]	@ (800e5c4 <ProcessRadioRxDone+0x318>)
 800e39c:	f00d f810 	bl	801b3c0 <UTIL_TIMER_Stop>
    }
#endif /* LORAMAC_VERSION */

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800e3a0:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800e3a4:	4619      	mov	r1, r3
 800e3a6:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 800e3aa:	f004 fcdb 	bl	8012d64 <LoRaMacClassBRxBeacon>
 800e3ae:	4603      	mov	r3, r0
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d00b      	beq.n	800e3cc <ProcessRadioRxDone+0x120>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800e3b4:	4a81      	ldr	r2, [pc, #516]	@ (800e5bc <ProcessRadioRxDone+0x310>)
 800e3b6:	f8b7 3080 	ldrh.w	r3, [r7, #128]	@ 0x80
 800e3ba:	f8a2 3482 	strh.w	r3, [r2, #1154]	@ 0x482
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800e3be:	4a7f      	ldr	r2, [pc, #508]	@ (800e5bc <ProcessRadioRxDone+0x310>)
 800e3c0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800e3c4:	f882 3484 	strb.w	r3, [r2, #1156]	@ 0x484
        return;
 800e3c8:	f000 bc22 	b.w	800ec10 <ProcessRadioRxDone+0x964>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800e3cc:	4b79      	ldr	r3, [pc, #484]	@ (800e5b4 <ProcessRadioRxDone+0x308>)
 800e3ce:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800e3d2:	2b01      	cmp	r3, #1
 800e3d4:	d11e      	bne.n	800e414 <ProcessRadioRxDone+0x168>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800e3d6:	f004 fcd8 	bl	8012d8a <LoRaMacClassBIsPingExpected>
 800e3da:	4603      	mov	r3, r0
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d00a      	beq.n	800e3f6 <ProcessRadioRxDone+0x14a>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e3e0:	2000      	movs	r0, #0
 800e3e2:	f004 fc89 	bl	8012cf8 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800e3e6:	2000      	movs	r0, #0
 800e3e8:	f004 fcaa 	bl	8012d40 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800e3ec:	4b73      	ldr	r3, [pc, #460]	@ (800e5bc <ProcessRadioRxDone+0x310>)
 800e3ee:	2204      	movs	r2, #4
 800e3f0:	f883 2493 	strb.w	r2, [r3, #1171]	@ 0x493
 800e3f4:	e00e      	b.n	800e414 <ProcessRadioRxDone+0x168>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800e3f6:	f004 fccf 	bl	8012d98 <LoRaMacClassBIsMulticastExpected>
 800e3fa:	4603      	mov	r3, r0
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d009      	beq.n	800e414 <ProcessRadioRxDone+0x168>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e400:	2000      	movs	r0, #0
 800e402:	f004 fc83 	bl	8012d0c <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800e406:	2000      	movs	r0, #0
 800e408:	f004 fca3 	bl	8012d52 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800e40c:	4b6b      	ldr	r3, [pc, #428]	@ (800e5bc <ProcessRadioRxDone+0x310>)
 800e40e:	2205      	movs	r2, #5
 800e410:	f883 2493 	strb.w	r2, [r3, #1171]	@ 0x493
        }
    }

    macHdr.Value = payload[pktHeaderLen++];
 800e414:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800e418:	1c5a      	adds	r2, r3, #1
 800e41a:	f887 207e 	strb.w	r2, [r7, #126]	@ 0x7e
 800e41e:	461a      	mov	r2, r3
 800e420:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e424:	4413      	add	r3, r2
 800e426:	781b      	ldrb	r3, [r3, #0]
 800e428:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c

    switch( macHdr.Bits.MType )
 800e42c:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 800e430:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800e434:	b2db      	uxtb	r3, r3
 800e436:	3b01      	subs	r3, #1
 800e438:	2b06      	cmp	r3, #6
 800e43a:	f200 83bd 	bhi.w	800ebb8 <ProcessRadioRxDone+0x90c>
 800e43e:	a201      	add	r2, pc, #4	@ (adr r2, 800e444 <ProcessRadioRxDone+0x198>)
 800e440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e444:	0800e461 	.word	0x0800e461
 800e448:	0800ebb9 	.word	0x0800ebb9
 800e44c:	0800e5f5 	.word	0x0800e5f5
 800e450:	0800ebb9 	.word	0x0800ebb9
 800e454:	0800e5ed 	.word	0x0800e5ed
 800e458:	0800ebb9 	.word	0x0800ebb9
 800e45c:	0800eb4b 	.word	0x0800eb4b
    {
        case FRAME_TYPE_JOIN_ACCEPT:
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800e460:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800e464:	2b10      	cmp	r3, #16
 800e466:	d806      	bhi.n	800e476 <ProcessRadioRxDone+0x1ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e468:	4b54      	ldr	r3, [pc, #336]	@ (800e5bc <ProcessRadioRxDone+0x310>)
 800e46a:	2201      	movs	r2, #1
 800e46c:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                PrepareRxDoneAbort( );
 800e470:	f7ff fef6 	bl	800e260 <PrepareRxDoneAbort>
                return;
 800e474:	e3cc      	b.n	800ec10 <ProcessRadioRxDone+0x964>
            }
            macMsgJoinAccept.Buffer = payload;
 800e476:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e47a:	60fb      	str	r3, [r7, #12]
            macMsgJoinAccept.BufSize = size;
 800e47c:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800e480:	b2db      	uxtb	r3, r3
 800e482:	743b      	strb	r3, [r7, #16]

            // Abort in case if the device isn't joined yet and no rejoin request is ongoing.
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800e484:	4b4b      	ldr	r3, [pc, #300]	@ (800e5b4 <ProcessRadioRxDone+0x308>)
 800e486:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d006      	beq.n	800e49c <ProcessRadioRxDone+0x1f0>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e48e:	4b4b      	ldr	r3, [pc, #300]	@ (800e5bc <ProcessRadioRxDone+0x310>)
 800e490:	2201      	movs	r2, #1
 800e492:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                PrepareRxDoneAbort( );
 800e496:	f7ff fee3 	bl	800e260 <PrepareRxDoneAbort>
                return;
 800e49a:	e3b9      	b.n	800ec10 <ProcessRadioRxDone+0x964>
            }
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 800e49c:	f7fe f876 	bl	800c58c <SecureElementGetJoinEui>
 800e4a0:	4601      	mov	r1, r0
 800e4a2:	f107 030c 	add.w	r3, r7, #12
 800e4a6:	461a      	mov	r2, r3
 800e4a8:	20ff      	movs	r0, #255	@ 0xff
 800e4aa:	f005 fe29 	bl	8014100 <LoRaMacCryptoHandleJoinAccept>
 800e4ae:	4603      	mov	r3, r0
 800e4b0:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88

            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 800e4b4:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	f040 8085 	bne.w	800e5c8 <ProcessRadioRxDone+0x31c>
            {
                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800e4be:	7d7b      	ldrb	r3, [r7, #21]
 800e4c0:	461a      	mov	r2, r3
 800e4c2:	4b3c      	ldr	r3, [pc, #240]	@ (800e5b4 <ProcessRadioRxDone+0x308>)
 800e4c4:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800e4c8:	4b3a      	ldr	r3, [pc, #232]	@ (800e5b4 <ProcessRadioRxDone+0x308>)
 800e4ca:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800e4ce:	7dbb      	ldrb	r3, [r7, #22]
 800e4d0:	021b      	lsls	r3, r3, #8
 800e4d2:	4313      	orrs	r3, r2
 800e4d4:	4a37      	ldr	r2, [pc, #220]	@ (800e5b4 <ProcessRadioRxDone+0x308>)
 800e4d6:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800e4da:	4b36      	ldr	r3, [pc, #216]	@ (800e5b4 <ProcessRadioRxDone+0x308>)
 800e4dc:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800e4e0:	7dfb      	ldrb	r3, [r7, #23]
 800e4e2:	041b      	lsls	r3, r3, #16
 800e4e4:	4313      	orrs	r3, r2
 800e4e6:	4a33      	ldr	r2, [pc, #204]	@ (800e5b4 <ProcessRadioRxDone+0x308>)
 800e4e8:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800e4ec:	69bb      	ldr	r3, [r7, #24]
 800e4ee:	4a31      	ldr	r2, [pc, #196]	@ (800e5b4 <ProcessRadioRxDone+0x308>)
 800e4f0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800e4f4:	7f3b      	ldrb	r3, [r7, #28]
 800e4f6:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800e4fa:	b2db      	uxtb	r3, r3
 800e4fc:	461a      	mov	r2, r3
 800e4fe:	4b2d      	ldr	r3, [pc, #180]	@ (800e5b4 <ProcessRadioRxDone+0x308>)
 800e500:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800e504:	7f3b      	ldrb	r3, [r7, #28]
 800e506:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800e50a:	b2db      	uxtb	r3, r3
 800e50c:	461a      	mov	r2, r3
 800e50e:	4b29      	ldr	r3, [pc, #164]	@ (800e5b4 <ProcessRadioRxDone+0x308>)
 800e510:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800e514:	7f3b      	ldrb	r3, [r7, #28]
 800e516:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800e51a:	b2db      	uxtb	r3, r3
 800e51c:	461a      	mov	r2, r3
 800e51e:	4b25      	ldr	r3, [pc, #148]	@ (800e5b4 <ProcessRadioRxDone+0x308>)
 800e520:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800e524:	7f7b      	ldrb	r3, [r7, #29]
 800e526:	461a      	mov	r2, r3
 800e528:	4b22      	ldr	r3, [pc, #136]	@ (800e5b4 <ProcessRadioRxDone+0x308>)
 800e52a:	651a      	str	r2, [r3, #80]	@ 0x50
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 800e52c:	4b21      	ldr	r3, [pc, #132]	@ (800e5b4 <ProcessRadioRxDone+0x308>)
 800e52e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e530:	2b00      	cmp	r3, #0
 800e532:	d102      	bne.n	800e53a <ProcessRadioRxDone+0x28e>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 800e534:	4b1f      	ldr	r3, [pc, #124]	@ (800e5b4 <ProcessRadioRxDone+0x308>)
 800e536:	2201      	movs	r2, #1
 800e538:	651a      	str	r2, [r3, #80]	@ 0x50
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800e53a:	4b1e      	ldr	r3, [pc, #120]	@ (800e5b4 <ProcessRadioRxDone+0x308>)
 800e53c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e53e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800e542:	fb02 f303 	mul.w	r3, r2, r3
 800e546:	4a1b      	ldr	r2, [pc, #108]	@ (800e5b4 <ProcessRadioRxDone+0x308>)
 800e548:	6513      	str	r3, [r2, #80]	@ 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800e54a:	4b1a      	ldr	r3, [pc, #104]	@ (800e5b4 <ProcessRadioRxDone+0x308>)
 800e54c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e54e:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800e552:	4a18      	ldr	r2, [pc, #96]	@ (800e5b4 <ProcessRadioRxDone+0x308>)
 800e554:	6553      	str	r3, [r2, #84]	@ 0x54

                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800e556:	4b17      	ldr	r3, [pc, #92]	@ (800e5b4 <ProcessRadioRxDone+0x308>)
 800e558:	2200      	movs	r2, #0
 800e55a:	f883 211a 	strb.w	r2, [r3, #282]	@ 0x11a

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800e55e:	f107 030c 	add.w	r3, r7, #12
 800e562:	3312      	adds	r3, #18
 800e564:	677b      	str	r3, [r7, #116]	@ 0x74
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 800e566:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800e56a:	b2db      	uxtb	r3, r3
 800e56c:	3b11      	subs	r3, #17
 800e56e:	b2db      	uxtb	r3, r3
 800e570:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                // Apply the last tx channel
                applyCFList.JoinChannel = MacCtx.Channel;
 800e574:	4b11      	ldr	r3, [pc, #68]	@ (800e5bc <ProcessRadioRxDone+0x310>)
 800e576:	f893 341f 	ldrb.w	r3, [r3, #1055]	@ 0x41f
 800e57a:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
#endif /* LORAMAC_VERSION */

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800e57e:	4b0d      	ldr	r3, [pc, #52]	@ (800e5b4 <ProcessRadioRxDone+0x308>)
 800e580:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e584:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 800e588:	4611      	mov	r1, r2
 800e58a:	4618      	mov	r0, r3
 800e58c:	f006 fb7c 	bl	8014c88 <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800e590:	4b08      	ldr	r3, [pc, #32]	@ (800e5b4 <ProcessRadioRxDone+0x308>)
 800e592:	2202      	movs	r2, #2
 800e594:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800e598:	2001      	movs	r0, #1
 800e59a:	f005 f8dd 	bl	8013758 <LoRaMacConfirmQueueIsCmdActive>
 800e59e:	4603      	mov	r3, r0
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d01b      	beq.n	800e5dc <ProcessRadioRxDone+0x330>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 800e5a4:	2101      	movs	r1, #1
 800e5a6:	2000      	movs	r0, #0
 800e5a8:	f005 f84a 	bl	8013640 <LoRaMacConfirmQueueSetStatus>
 800e5ac:	e016      	b.n	800e5dc <ProcessRadioRxDone+0x330>
 800e5ae:	bf00      	nop
 800e5b0:	200019a4 	.word	0x200019a4
 800e5b4:	20000e14 	.word	0x20000e14
 800e5b8:	2000199c 	.word	0x2000199c
 800e5bc:	200008f4 	.word	0x200008f4
 800e5c0:	0801f68c 	.word	0x0801f68c
 800e5c4:	20000c8c 	.word	0x20000c8c
                }
            }
            else
            {
                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800e5c8:	2001      	movs	r0, #1
 800e5ca:	f005 f8c5 	bl	8013758 <LoRaMacConfirmQueueIsCmdActive>
 800e5ce:	4603      	mov	r3, r0
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d003      	beq.n	800e5dc <ProcessRadioRxDone+0x330>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800e5d4:	2101      	movs	r1, #1
 800e5d6:	2007      	movs	r0, #7
 800e5d8:	f005 f832 	bl	8013640 <LoRaMacConfirmQueueSetStatus>
                }
            }
            MacCtx.MacFlags.Bits.MlmeInd = 1;
 800e5dc:	4ab9      	ldr	r2, [pc, #740]	@ (800e8c4 <ProcessRadioRxDone+0x618>)
 800e5de:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800e5e2:	f043 0308 	orr.w	r3, r3, #8
 800e5e6:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
            break;
 800e5ea:	e2ec      	b.n	800ebc6 <ProcessRadioRxDone+0x91a>
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800e5ec:	4bb5      	ldr	r3, [pc, #724]	@ (800e8c4 <ProcessRadioRxDone+0x618>)
 800e5ee:	2201      	movs	r2, #1
 800e5f0:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800e5f4:	4bb4      	ldr	r3, [pc, #720]	@ (800e8c8 <ProcessRadioRxDone+0x61c>)
 800e5f6:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 800e5fa:	f887 306a 	strb.w	r3, [r7, #106]	@ 0x6a
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800e5fe:	4bb1      	ldr	r3, [pc, #708]	@ (800e8c4 <ProcessRadioRxDone+0x618>)
 800e600:	f893 3428 	ldrb.w	r3, [r3, #1064]	@ 0x428
 800e604:	b25b      	sxtb	r3, r3
 800e606:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800e60a:	230d      	movs	r3, #13
 800e60c:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68

            /* ST_WORKAROUND_BEGIN: Keep repeater feature */
            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800e610:	4bad      	ldr	r3, [pc, #692]	@ (800e8c8 <ProcessRadioRxDone+0x61c>)
 800e612:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800e616:	2b00      	cmp	r3, #0
 800e618:	d002      	beq.n	800e620 <ProcessRadioRxDone+0x374>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800e61a:	230e      	movs	r3, #14
 800e61c:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
            }
            /* ST_WORKAROUND_END */

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e620:	4ba9      	ldr	r3, [pc, #676]	@ (800e8c8 <ProcessRadioRxDone+0x61c>)
 800e622:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e626:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 800e62a:	4611      	mov	r1, r2
 800e62c:	4618      	mov	r0, r3
 800e62e:	f006 fad9 	bl	8014be4 <RegionGetPhyParam>
 800e632:	4603      	mov	r3, r0
 800e634:	667b      	str	r3, [r7, #100]	@ 0x64
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800e636:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800e63a:	3b0d      	subs	r3, #13
 800e63c:	b29b      	uxth	r3, r3
 800e63e:	b21b      	sxth	r3, r3
 800e640:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e644:	b21a      	sxth	r2, r3
 800e646:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e648:	b21b      	sxth	r3, r3
 800e64a:	429a      	cmp	r2, r3
 800e64c:	dc03      	bgt.n	800e656 <ProcessRadioRxDone+0x3aa>
 800e64e:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800e652:	2b0b      	cmp	r3, #11
 800e654:	d806      	bhi.n	800e664 <ProcessRadioRxDone+0x3b8>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e656:	4b9b      	ldr	r3, [pc, #620]	@ (800e8c4 <ProcessRadioRxDone+0x618>)
 800e658:	2201      	movs	r2, #1
 800e65a:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                PrepareRxDoneAbort( );
 800e65e:	f7ff fdff 	bl	800e260 <PrepareRxDoneAbort>
                return;
 800e662:	e2d5      	b.n	800ec10 <ProcessRadioRxDone+0x964>
            }
            macMsgData.Buffer = payload;
 800e664:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e668:	637b      	str	r3, [r7, #52]	@ 0x34
            macMsgData.BufSize = size;
 800e66a:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800e66e:	b2db      	uxtb	r3, r3
 800e670:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800e674:	4b95      	ldr	r3, [pc, #596]	@ (800e8cc <ProcessRadioRxDone+0x620>)
 800e676:	65bb      	str	r3, [r7, #88]	@ 0x58
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800e678:	23ff      	movs	r3, #255	@ 0xff
 800e67a:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800e67e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800e682:	4618      	mov	r0, r3
 800e684:	f006 f835 	bl	80146f2 <LoRaMacParserData>
 800e688:	4603      	mov	r3, r0
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d006      	beq.n	800e69c <ProcessRadioRxDone+0x3f0>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e68e:	4b8d      	ldr	r3, [pc, #564]	@ (800e8c4 <ProcessRadioRxDone+0x618>)
 800e690:	2201      	movs	r2, #1
 800e692:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                PrepareRxDoneAbort( );
 800e696:	f7ff fde3 	bl	800e260 <PrepareRxDoneAbort>
                return;
 800e69a:	e2b9      	b.n	800ec10 <ProcessRadioRxDone+0x964>
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            // Handle Class B
            // Check if we expect a ping or a multicast slot.
            if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800e69c:	4b8a      	ldr	r3, [pc, #552]	@ (800e8c8 <ProcessRadioRxDone+0x61c>)
 800e69e:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800e6a2:	2b01      	cmp	r3, #1
 800e6a4:	d132      	bne.n	800e70c <ProcessRadioRxDone+0x460>
            {
                if( LoRaMacClassBIsPingExpected( ) == true )
 800e6a6:	f004 fb70 	bl	8012d8a <LoRaMacClassBIsPingExpected>
 800e6aa:	4603      	mov	r3, r0
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d014      	beq.n	800e6da <ProcessRadioRxDone+0x42e>
                {
                    LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e6b0:	2000      	movs	r0, #0
 800e6b2:	f004 fb21 	bl	8012cf8 <LoRaMacClassBSetPingSlotState>
                    LoRaMacClassBPingSlotTimerEvent( NULL );
 800e6b6:	2000      	movs	r0, #0
 800e6b8:	f004 fb42 	bl	8012d40 <LoRaMacClassBPingSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800e6bc:	4b81      	ldr	r3, [pc, #516]	@ (800e8c4 <ProcessRadioRxDone+0x618>)
 800e6be:	2204      	movs	r2, #4
 800e6c0:	f883 2493 	strb.w	r2, [r3, #1171]	@ 0x493
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800e6c4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e6c6:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800e6ca:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800e6ce:	b2db      	uxtb	r3, r3
 800e6d0:	4619      	mov	r1, r3
 800e6d2:	4610      	mov	r0, r2
 800e6d4:	f004 fbe2 	bl	8012e9c <LoRaMacClassBSetFPendingBit>
 800e6d8:	e018      	b.n	800e70c <ProcessRadioRxDone+0x460>
                }
                else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800e6da:	f004 fb5d 	bl	8012d98 <LoRaMacClassBIsMulticastExpected>
 800e6de:	4603      	mov	r3, r0
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d013      	beq.n	800e70c <ProcessRadioRxDone+0x460>
                {
                    LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e6e4:	2000      	movs	r0, #0
 800e6e6:	f004 fb11 	bl	8012d0c <LoRaMacClassBSetMulticastSlotState>
                    LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800e6ea:	2000      	movs	r0, #0
 800e6ec:	f004 fb31 	bl	8012d52 <LoRaMacClassBMulticastSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800e6f0:	4b74      	ldr	r3, [pc, #464]	@ (800e8c4 <ProcessRadioRxDone+0x618>)
 800e6f2:	2205      	movs	r2, #5
 800e6f4:	f883 2493 	strb.w	r2, [r3, #1171]	@ 0x493
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800e6f8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e6fa:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800e6fe:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800e702:	b2db      	uxtb	r3, r3
 800e704:	4619      	mov	r1, r3
 800e706:	4610      	mov	r0, r2
 800e708:	f004 fbc8 	bl	8012e9c <LoRaMacClassBSetFPendingBit>
                }
            }
#endif /* LORAMAC_VERSION */

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800e70c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e70e:	4a6d      	ldr	r2, [pc, #436]	@ (800e8c4 <ProcessRadioRxDone+0x618>)
 800e710:	f8c2 3438 	str.w	r3, [r2, #1080]	@ 0x438

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800e714:	1dba      	adds	r2, r7, #6
 800e716:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800e71a:	4611      	mov	r1, r2
 800e71c:	4618      	mov	r0, r3
 800e71e:	f002 fd1f 	bl	8011160 <DetermineFrameType>
 800e722:	4603      	mov	r3, r0
 800e724:	2b00      	cmp	r3, #0
 800e726:	d006      	beq.n	800e736 <ProcessRadioRxDone+0x48a>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e728:	4b66      	ldr	r3, [pc, #408]	@ (800e8c4 <ProcessRadioRxDone+0x618>)
 800e72a:	2201      	movs	r2, #1
 800e72c:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                PrepareRxDoneAbort( );
 800e730:	f7ff fd96 	bl	800e260 <PrepareRxDoneAbort>
                return;
 800e734:	e26c      	b.n	800ec10 <ProcessRadioRxDone+0x964>
            }

            //Check if it is a multicast message
            multicast = 0;
 800e736:	2300      	movs	r3, #0
 800e738:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
            downLinkCounter = 0;
 800e73c:	2300      	movs	r3, #0
 800e73e:	60bb      	str	r3, [r7, #8]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800e740:	2300      	movs	r3, #0
 800e742:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89
 800e746:	e049      	b.n	800e7dc <ProcessRadioRxDone+0x530>
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800e748:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 800e74c:	4a5e      	ldr	r2, [pc, #376]	@ (800e8c8 <ProcessRadioRxDone+0x61c>)
 800e74e:	212c      	movs	r1, #44	@ 0x2c
 800e750:	fb01 f303 	mul.w	r3, r1, r3
 800e754:	4413      	add	r3, r2
 800e756:	33dc      	adds	r3, #220	@ 0xdc
 800e758:	681a      	ldr	r2, [r3, #0]
 800e75a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e75c:	429a      	cmp	r2, r3
 800e75e:	d138      	bne.n	800e7d2 <ProcessRadioRxDone+0x526>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800e760:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 800e764:	4a58      	ldr	r2, [pc, #352]	@ (800e8c8 <ProcessRadioRxDone+0x61c>)
 800e766:	212c      	movs	r1, #44	@ 0x2c
 800e768:	fb01 f303 	mul.w	r3, r1, r3
 800e76c:	4413      	add	r3, r2
 800e76e:	33da      	adds	r3, #218	@ 0xda
 800e770:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800e772:	2b00      	cmp	r3, #0
 800e774:	d02d      	beq.n	800e7d2 <ProcessRadioRxDone+0x526>
                {
                    multicast = 1;
 800e776:	2301      	movs	r3, #1
 800e778:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 800e77c:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 800e780:	4a51      	ldr	r2, [pc, #324]	@ (800e8c8 <ProcessRadioRxDone+0x61c>)
 800e782:	212c      	movs	r1, #44	@ 0x2c
 800e784:	fb01 f303 	mul.w	r3, r1, r3
 800e788:	4413      	add	r3, r2
 800e78a:	33db      	adds	r3, #219	@ 0xdb
 800e78c:	781b      	ldrb	r3, [r3, #0]
 800e78e:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800e792:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 800e796:	4a4c      	ldr	r2, [pc, #304]	@ (800e8c8 <ProcessRadioRxDone+0x61c>)
 800e798:	212c      	movs	r1, #44	@ 0x2c
 800e79a:	fb01 f303 	mul.w	r3, r1, r3
 800e79e:	4413      	add	r3, r2
 800e7a0:	33f8      	adds	r3, #248	@ 0xf8
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	60bb      	str	r3, [r7, #8]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800e7a8:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 800e7ac:	4a46      	ldr	r2, [pc, #280]	@ (800e8c8 <ProcessRadioRxDone+0x61c>)
 800e7ae:	212c      	movs	r1, #44	@ 0x2c
 800e7b0:	fb01 f303 	mul.w	r3, r1, r3
 800e7b4:	4413      	add	r3, r2
 800e7b6:	33dc      	adds	r3, #220	@ 0xdc
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800e7be:	4b42      	ldr	r3, [pc, #264]	@ (800e8c8 <ProcessRadioRxDone+0x61c>)
 800e7c0:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800e7c4:	2b02      	cmp	r3, #2
 800e7c6:	d10e      	bne.n	800e7e6 <ProcessRadioRxDone+0x53a>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800e7c8:	4b3e      	ldr	r3, [pc, #248]	@ (800e8c4 <ProcessRadioRxDone+0x618>)
 800e7ca:	2203      	movs	r2, #3
 800e7cc:	f883 2493 	strb.w	r2, [r3, #1171]	@ 0x493
                    }
                    break;
 800e7d0:	e009      	b.n	800e7e6 <ProcessRadioRxDone+0x53a>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800e7d2:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 800e7d6:	3301      	adds	r3, #1
 800e7d8:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89
 800e7dc:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d0b1      	beq.n	800e748 <ProcessRadioRxDone+0x49c>
 800e7e4:	e000      	b.n	800e7e8 <ProcessRadioRxDone+0x53c>
                    break;
 800e7e6:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800e7e8:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 800e7ec:	2b01      	cmp	r3, #1
 800e7ee:	d117      	bne.n	800e820 <ProcessRadioRxDone+0x574>
 800e7f0:	79bb      	ldrb	r3, [r7, #6]
 800e7f2:	2b03      	cmp	r3, #3
 800e7f4:	d10d      	bne.n	800e812 <ProcessRadioRxDone+0x566>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800e7f6:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800e7fa:	f003 0320 	and.w	r3, r3, #32
 800e7fe:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800e800:	2b00      	cmp	r3, #0
 800e802:	d106      	bne.n	800e812 <ProcessRadioRxDone+0x566>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 800e804:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800e808:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e80c:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d006      	beq.n	800e820 <ProcessRadioRxDone+0x574>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e812:	4b2c      	ldr	r3, [pc, #176]	@ (800e8c4 <ProcessRadioRxDone+0x618>)
 800e814:	2201      	movs	r2, #1
 800e816:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                PrepareRxDoneAbort( );
 800e81a:	f7ff fd21 	bl	800e260 <PrepareRxDoneAbort>
                return;
 800e81e:	e1f7      	b.n	800ec10 <ProcessRadioRxDone+0x964>
                PrepareRxDoneAbort( );
                return;
            }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, &fCntID, &downLinkCounter );
 800e820:	79b9      	ldrb	r1, [r7, #6]
 800e822:	4c29      	ldr	r4, [pc, #164]	@ (800e8c8 <ProcessRadioRxDone+0x61c>)
 800e824:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800e828:	f897 008a 	ldrb.w	r0, [r7, #138]	@ 0x8a
 800e82c:	f107 0308 	add.w	r3, r7, #8
 800e830:	9301      	str	r3, [sp, #4]
 800e832:	1dfb      	adds	r3, r7, #7
 800e834:	9300      	str	r3, [sp, #0]
 800e836:	f8d4 3118 	ldr.w	r3, [r4, #280]	@ 0x118
 800e83a:	f000 fee7 	bl	800f60c <GetFCntDown>
 800e83e:	4603      	mov	r3, r0
 800e840:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800e844:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d017      	beq.n	800e87c <ProcessRadioRxDone+0x5d0>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800e84c:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 800e850:	2b07      	cmp	r3, #7
 800e852:	d104      	bne.n	800e85e <ProcessRadioRxDone+0x5b2>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800e854:	4b1b      	ldr	r3, [pc, #108]	@ (800e8c4 <ProcessRadioRxDone+0x618>)
 800e856:	2208      	movs	r2, #8
 800e858:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
 800e85c:	e003      	b.n	800e866 <ProcessRadioRxDone+0x5ba>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e85e:	4b19      	ldr	r3, [pc, #100]	@ (800e8c4 <ProcessRadioRxDone+0x618>)
 800e860:	2201      	movs	r2, #1
 800e862:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800e866:	68bb      	ldr	r3, [r7, #8]
 800e868:	4a16      	ldr	r2, [pc, #88]	@ (800e8c4 <ProcessRadioRxDone+0x618>)
 800e86a:	f8c2 3434 	str.w	r3, [r2, #1076]	@ 0x434
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800e86e:	68bb      	ldr	r3, [r7, #8]
 800e870:	4a14      	ldr	r2, [pc, #80]	@ (800e8c4 <ProcessRadioRxDone+0x618>)
 800e872:	f8c2 3470 	str.w	r3, [r2, #1136]	@ 0x470
                PrepareRxDoneAbort( );
 800e876:	f7ff fcf3 	bl	800e260 <PrepareRxDoneAbort>
                return;
 800e87a:	e1c9      	b.n	800ec10 <ProcessRadioRxDone+0x964>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800e87c:	79fa      	ldrb	r2, [r7, #7]
 800e87e:	68b9      	ldr	r1, [r7, #8]
 800e880:	f897 008a 	ldrb.w	r0, [r7, #138]	@ 0x8a
 800e884:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800e888:	9300      	str	r3, [sp, #0]
 800e88a:	460b      	mov	r3, r1
 800e88c:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 800e890:	f005 fd80 	bl	8014394 <LoRaMacCryptoUnsecureMessage>
 800e894:	4603      	mov	r3, r0
 800e896:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800e89a:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d016      	beq.n	800e8d0 <ProcessRadioRxDone+0x624>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800e8a2:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 800e8a6:	2b02      	cmp	r3, #2
 800e8a8:	d104      	bne.n	800e8b4 <ProcessRadioRxDone+0x608>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800e8aa:	4b06      	ldr	r3, [pc, #24]	@ (800e8c4 <ProcessRadioRxDone+0x618>)
 800e8ac:	220a      	movs	r2, #10
 800e8ae:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
 800e8b2:	e003      	b.n	800e8bc <ProcessRadioRxDone+0x610>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800e8b4:	4b03      	ldr	r3, [pc, #12]	@ (800e8c4 <ProcessRadioRxDone+0x618>)
 800e8b6:	220b      	movs	r2, #11
 800e8b8:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                }
                PrepareRxDoneAbort( );
 800e8bc:	f7ff fcd0 	bl	800e260 <PrepareRxDoneAbort>
                return;
 800e8c0:	e1a6      	b.n	800ec10 <ProcessRadioRxDone+0x964>
 800e8c2:	bf00      	nop
 800e8c4:	200008f4 	.word	0x200008f4
 800e8c8:	20000e14 	.word	0x20000e14
 800e8cc:	20000b2c 	.word	0x20000b2c
            }
#endif /* LORAMAC_VERSION */

            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800e8d0:	4bb5      	ldr	r3, [pc, #724]	@ (800eba8 <ProcessRadioRxDone+0x8fc>)
 800e8d2:	2200      	movs	r2, #0
 800e8d4:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
            MacCtx.McpsIndication.Multicast = multicast;
 800e8d8:	4ab3      	ldr	r2, [pc, #716]	@ (800eba8 <ProcessRadioRxDone+0x8fc>)
 800e8da:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 800e8de:	f882 3426 	strb.w	r3, [r2, #1062]	@ 0x426
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 800e8e2:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800e8e6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800e8ea:	b2db      	uxtb	r3, r3
 800e8ec:	461a      	mov	r2, r3
 800e8ee:	4bae      	ldr	r3, [pc, #696]	@ (800eba8 <ProcessRadioRxDone+0x8fc>)
 800e8f0:	f883 2429 	strb.w	r2, [r3, #1065]	@ 0x429
            MacCtx.McpsIndication.Buffer = NULL;
 800e8f4:	4bac      	ldr	r3, [pc, #688]	@ (800eba8 <ProcessRadioRxDone+0x8fc>)
 800e8f6:	2200      	movs	r2, #0
 800e8f8:	f8c3 242c 	str.w	r2, [r3, #1068]	@ 0x42c
            MacCtx.McpsIndication.BufferSize = 0;
 800e8fc:	4baa      	ldr	r3, [pc, #680]	@ (800eba8 <ProcessRadioRxDone+0x8fc>)
 800e8fe:	2200      	movs	r2, #0
 800e900:	f883 2430 	strb.w	r2, [r3, #1072]	@ 0x430
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800e904:	68bb      	ldr	r3, [r7, #8]
 800e906:	4aa8      	ldr	r2, [pc, #672]	@ (800eba8 <ProcessRadioRxDone+0x8fc>)
 800e908:	f8c2 3434 	str.w	r3, [r2, #1076]	@ 0x434
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800e90c:	68bb      	ldr	r3, [r7, #8]
 800e90e:	4aa6      	ldr	r2, [pc, #664]	@ (800eba8 <ProcessRadioRxDone+0x8fc>)
 800e910:	f8c2 3470 	str.w	r3, [r2, #1136]	@ 0x470
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800e914:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800e918:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e91c:	b2db      	uxtb	r3, r3
 800e91e:	2b00      	cmp	r3, #0
 800e920:	bf14      	ite	ne
 800e922:	2301      	movne	r3, #1
 800e924:	2300      	moveq	r3, #0
 800e926:	b2da      	uxtb	r2, r3
 800e928:	4b9f      	ldr	r3, [pc, #636]	@ (800eba8 <ProcessRadioRxDone+0x8fc>)
 800e92a:	f883 2432 	strb.w	r2, [r3, #1074]	@ 0x432

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800e92e:	4b9e      	ldr	r3, [pc, #632]	@ (800eba8 <ProcessRadioRxDone+0x8fc>)
 800e930:	2200      	movs	r2, #0
 800e932:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800e936:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800e93a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e93e:	b2db      	uxtb	r3, r3
 800e940:	2b00      	cmp	r3, #0
 800e942:	bf14      	ite	ne
 800e944:	2301      	movne	r3, #1
 800e946:	2300      	moveq	r3, #0
 800e948:	b2da      	uxtb	r2, r3
 800e94a:	4b97      	ldr	r3, [pc, #604]	@ (800eba8 <ProcessRadioRxDone+0x8fc>)
 800e94c:	f883 2448 	strb.w	r2, [r3, #1096]	@ 0x448

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800e950:	4b95      	ldr	r3, [pc, #596]	@ (800eba8 <ProcessRadioRxDone+0x8fc>)
 800e952:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800e956:	2b00      	cmp	r3, #0
 800e958:	d004      	beq.n	800e964 <ProcessRadioRxDone+0x6b8>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800e95a:	4b93      	ldr	r3, [pc, #588]	@ (800eba8 <ProcessRadioRxDone+0x8fc>)
 800e95c:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800e960:	2b01      	cmp	r3, #1
 800e962:	d106      	bne.n	800e972 <ProcessRadioRxDone+0x6c6>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 800e964:	4b91      	ldr	r3, [pc, #580]	@ (800ebac <ProcessRadioRxDone+0x900>)
 800e966:	2200      	movs	r2, #0
 800e968:	629a      	str	r2, [r3, #40]	@ 0x28
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                Nvm.MacGroup2.DownlinkReceived = true;
 800e96a:	4b90      	ldr	r3, [pc, #576]	@ (800ebac <ProcessRadioRxDone+0x900>)
 800e96c:	2201      	movs	r2, #1
 800e96e:	f883 210a 	strb.w	r2, [r3, #266]	@ 0x10a
#endif /* LORAMAC_VERSION */
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 800e972:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 800e976:	2b01      	cmp	r3, #1
 800e978:	d104      	bne.n	800e984 <ProcessRadioRxDone+0x6d8>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800e97a:	4b8b      	ldr	r3, [pc, #556]	@ (800eba8 <ProcessRadioRxDone+0x8fc>)
 800e97c:	2202      	movs	r2, #2
 800e97e:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
 800e982:	e034      	b.n	800e9ee <ProcessRadioRxDone+0x742>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800e984:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 800e988:	f023 031f 	bic.w	r3, r3, #31
 800e98c:	b2db      	uxtb	r3, r3
 800e98e:	2ba0      	cmp	r3, #160	@ 0xa0
 800e990:	d125      	bne.n	800e9de <ProcessRadioRxDone+0x732>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 800e992:	4b86      	ldr	r3, [pc, #536]	@ (800ebac <ProcessRadioRxDone+0x900>)
 800e994:	2201      	movs	r2, #1
 800e996:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800e99a:	4b84      	ldr	r3, [pc, #528]	@ (800ebac <ProcessRadioRxDone+0x900>)
 800e99c:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d102      	bne.n	800e9aa <ProcessRadioRxDone+0x6fe>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 800e9a4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e9a6:	4a81      	ldr	r2, [pc, #516]	@ (800ebac <ProcessRadioRxDone+0x900>)
 800e9a8:	6353      	str	r3, [r2, #52]	@ 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800e9aa:	4b7f      	ldr	r3, [pc, #508]	@ (800eba8 <ProcessRadioRxDone+0x8fc>)
 800e9ac:	2201      	movs	r2, #1
 800e9ae:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                    // Handle response timeout for class c and class b downlinks
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800e9b2:	4b7d      	ldr	r3, [pc, #500]	@ (800eba8 <ProcessRadioRxDone+0x8fc>)
 800e9b4:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d018      	beq.n	800e9ee <ProcessRadioRxDone+0x742>
                        ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) )
 800e9bc:	4b7a      	ldr	r3, [pc, #488]	@ (800eba8 <ProcessRadioRxDone+0x8fc>)
 800e9be:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800e9c2:	2b01      	cmp	r3, #1
 800e9c4:	d013      	beq.n	800e9ee <ProcessRadioRxDone+0x742>
                    {
                        // Calculate timeout
                        MacCtx.McpsIndication.ResponseTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 800e9c6:	4b79      	ldr	r3, [pc, #484]	@ (800ebac <ProcessRadioRxDone+0x900>)
 800e9c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e9cc:	4a76      	ldr	r2, [pc, #472]	@ (800eba8 <ProcessRadioRxDone+0x8fc>)
 800e9ce:	f8c2 3440 	str.w	r3, [r2, #1088]	@ 0x440
                        MacCtx.ResponseTimeoutStartTime = RxDoneParams.LastRxDone;
 800e9d2:	4b77      	ldr	r3, [pc, #476]	@ (800ebb0 <ProcessRadioRxDone+0x904>)
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	4a74      	ldr	r2, [pc, #464]	@ (800eba8 <ProcessRadioRxDone+0x8fc>)
 800e9d8:	f8c2 349c 	str.w	r3, [r2, #1180]	@ 0x49c
 800e9dc:	e007      	b.n	800e9ee <ProcessRadioRxDone+0x742>
                    }
#endif /* LORAMAC_VERSION */
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 800e9de:	4b73      	ldr	r3, [pc, #460]	@ (800ebac <ProcessRadioRxDone+0x900>)
 800e9e0:	2200      	movs	r2, #0
 800e9e2:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800e9e6:	4b70      	ldr	r3, [pc, #448]	@ (800eba8 <ProcessRadioRxDone+0x8fc>)
 800e9e8:	2200      	movs	r2, #0
 800e9ea:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
                }
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800e9ee:	4b6e      	ldr	r3, [pc, #440]	@ (800eba8 <ProcessRadioRxDone+0x8fc>)
 800e9f0:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800e9f4:	4a6c      	ldr	r2, [pc, #432]	@ (800eba8 <ProcessRadioRxDone+0x8fc>)
 800e9f6:	f892 2444 	ldrb.w	r2, [r2, #1092]	@ 0x444
 800e9fa:	f897 1040 	ldrb.w	r1, [r7, #64]	@ 0x40
 800e9fe:	4618      	mov	r0, r3
 800ea00:	f001 ff96 	bl	8010930 <RemoveMacCommands>

            switch( fType )
 800ea04:	79bb      	ldrb	r3, [r7, #6]
 800ea06:	2b03      	cmp	r3, #3
 800ea08:	d873      	bhi.n	800eaf2 <ProcessRadioRxDone+0x846>
 800ea0a:	a201      	add	r2, pc, #4	@ (adr r2, 800ea10 <ProcessRadioRxDone+0x764>)
 800ea0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea10:	0800ea21 	.word	0x0800ea21
 800ea14:	0800ea71 	.word	0x0800ea71
 800ea18:	0800eaa7 	.word	0x0800eaa7
 800ea1c:	0800eacd 	.word	0x0800eacd
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800ea20:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800ea24:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800ea28:	b2db      	uxtb	r3, r3
 800ea2a:	461c      	mov	r4, r3
 800ea2c:	4b5e      	ldr	r3, [pc, #376]	@ (800eba8 <ProcessRadioRxDone+0x8fc>)
 800ea2e:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800ea32:	f997 107f 	ldrsb.w	r1, [r7, #127]	@ 0x7f
 800ea36:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800ea3a:	f102 0010 	add.w	r0, r2, #16
 800ea3e:	9300      	str	r3, [sp, #0]
 800ea40:	460b      	mov	r3, r1
 800ea42:	4622      	mov	r2, r4
 800ea44:	2100      	movs	r1, #0
 800ea46:	f000 ff45 	bl	800f8d4 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800ea4a:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 800ea4e:	4b56      	ldr	r3, [pc, #344]	@ (800eba8 <ProcessRadioRxDone+0x8fc>)
 800ea50:	f883 2427 	strb.w	r2, [r3, #1063]	@ 0x427
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800ea54:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ea56:	4a54      	ldr	r2, [pc, #336]	@ (800eba8 <ProcessRadioRxDone+0x8fc>)
 800ea58:	f8c2 342c 	str.w	r3, [r2, #1068]	@ 0x42c
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800ea5c:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800ea60:	4b51      	ldr	r3, [pc, #324]	@ (800eba8 <ProcessRadioRxDone+0x8fc>)
 800ea62:	f883 2430 	strb.w	r2, [r3, #1072]	@ 0x430
                    MacCtx.McpsIndication.RxData = true;
 800ea66:	4b50      	ldr	r3, [pc, #320]	@ (800eba8 <ProcessRadioRxDone+0x8fc>)
 800ea68:	2201      	movs	r2, #1
 800ea6a:	f883 2431 	strb.w	r2, [r3, #1073]	@ 0x431
                    break;
 800ea6e:	e047      	b.n	800eb00 <ProcessRadioRxDone+0x854>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800ea70:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800ea74:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800ea78:	b2db      	uxtb	r3, r3
 800ea7a:	461c      	mov	r4, r3
 800ea7c:	4b4a      	ldr	r3, [pc, #296]	@ (800eba8 <ProcessRadioRxDone+0x8fc>)
 800ea7e:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800ea82:	f997 107f 	ldrsb.w	r1, [r7, #127]	@ 0x7f
 800ea86:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800ea8a:	f102 0010 	add.w	r0, r2, #16
 800ea8e:	9300      	str	r3, [sp, #0]
 800ea90:	460b      	mov	r3, r1
 800ea92:	4622      	mov	r2, r4
 800ea94:	2100      	movs	r1, #0
 800ea96:	f000 ff1d 	bl	800f8d4 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800ea9a:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 800ea9e:	4b42      	ldr	r3, [pc, #264]	@ (800eba8 <ProcessRadioRxDone+0x8fc>)
 800eaa0:	f883 2427 	strb.w	r2, [r3, #1063]	@ 0x427
                    break;
 800eaa4:	e02c      	b.n	800eb00 <ProcessRadioRxDone+0x854>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 800eaa6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800eaa8:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800eaac:	4b3e      	ldr	r3, [pc, #248]	@ (800eba8 <ProcessRadioRxDone+0x8fc>)
 800eaae:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800eab2:	f997 107f 	ldrsb.w	r1, [r7, #127]	@ 0x7f
 800eab6:	9300      	str	r3, [sp, #0]
 800eab8:	460b      	mov	r3, r1
 800eaba:	2100      	movs	r1, #0
 800eabc:	f000 ff0a 	bl	800f8d4 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800eac0:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 800eac4:	4b38      	ldr	r3, [pc, #224]	@ (800eba8 <ProcessRadioRxDone+0x8fc>)
 800eac6:	f883 2427 	strb.w	r2, [r3, #1063]	@ 0x427
                    break;
 800eaca:	e019      	b.n	800eb00 <ProcessRadioRxDone+0x854>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800eacc:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 800ead0:	4b35      	ldr	r3, [pc, #212]	@ (800eba8 <ProcessRadioRxDone+0x8fc>)
 800ead2:	f883 2427 	strb.w	r2, [r3, #1063]	@ 0x427
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800ead6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ead8:	4a33      	ldr	r2, [pc, #204]	@ (800eba8 <ProcessRadioRxDone+0x8fc>)
 800eada:	f8c2 342c 	str.w	r3, [r2, #1068]	@ 0x42c
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800eade:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800eae2:	4b31      	ldr	r3, [pc, #196]	@ (800eba8 <ProcessRadioRxDone+0x8fc>)
 800eae4:	f883 2430 	strb.w	r2, [r3, #1072]	@ 0x430
                    MacCtx.McpsIndication.RxData = true;
 800eae8:	4b2f      	ldr	r3, [pc, #188]	@ (800eba8 <ProcessRadioRxDone+0x8fc>)
 800eaea:	2201      	movs	r2, #1
 800eaec:	f883 2431 	strb.w	r2, [r3, #1073]	@ 0x431
                    break;
 800eaf0:	e006      	b.n	800eb00 <ProcessRadioRxDone+0x854>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800eaf2:	4b2d      	ldr	r3, [pc, #180]	@ (800eba8 <ProcessRadioRxDone+0x8fc>)
 800eaf4:	2201      	movs	r2, #1
 800eaf6:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                    PrepareRxDoneAbort( );
 800eafa:	f7ff fbb1 	bl	800e260 <PrepareRxDoneAbort>
                    break;
 800eafe:	bf00      	nop
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 800eb00:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800eb04:	2be0      	cmp	r3, #224	@ 0xe0
 800eb06:	d118      	bne.n	800eb3a <ProcessRadioRxDone+0x88e>
 800eb08:	4b28      	ldr	r3, [pc, #160]	@ (800ebac <ProcessRadioRxDone+0x900>)
 800eb0a:	f893 310b 	ldrb.w	r3, [r3, #267]	@ 0x10b
 800eb0e:	f083 0301 	eor.w	r3, r3, #1
 800eb12:	b2db      	uxtb	r3, r3
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d010      	beq.n	800eb3a <ProcessRadioRxDone+0x88e>
            { // Do not notify the upper layer of data reception on FPort LORAMAC_CERT_FPORT if the port
              // handling is disabled.
                MacCtx.McpsIndication.Port = macMsgData.FPort;
 800eb18:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 800eb1c:	4b22      	ldr	r3, [pc, #136]	@ (800eba8 <ProcessRadioRxDone+0x8fc>)
 800eb1e:	f883 2427 	strb.w	r2, [r3, #1063]	@ 0x427
                MacCtx.McpsIndication.Buffer = NULL;
 800eb22:	4b21      	ldr	r3, [pc, #132]	@ (800eba8 <ProcessRadioRxDone+0x8fc>)
 800eb24:	2200      	movs	r2, #0
 800eb26:	f8c3 242c 	str.w	r2, [r3, #1068]	@ 0x42c
                MacCtx.McpsIndication.BufferSize = 0;
 800eb2a:	4b1f      	ldr	r3, [pc, #124]	@ (800eba8 <ProcessRadioRxDone+0x8fc>)
 800eb2c:	2200      	movs	r2, #0
 800eb2e:	f883 2430 	strb.w	r2, [r3, #1072]	@ 0x430
                MacCtx.McpsIndication.RxData = false;
 800eb32:	4b1d      	ldr	r3, [pc, #116]	@ (800eba8 <ProcessRadioRxDone+0x8fc>)
 800eb34:	2200      	movs	r2, #0
 800eb36:	f883 2431 	strb.w	r2, [r3, #1073]	@ 0x431
            }
#endif /* LORAMAC_VERSION */

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800eb3a:	4a1b      	ldr	r2, [pc, #108]	@ (800eba8 <ProcessRadioRxDone+0x8fc>)
 800eb3c:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800eb40:	f043 0302 	orr.w	r3, r3, #2
 800eb44:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495

            break;
 800eb48:	e03d      	b.n	800ebc6 <ProcessRadioRxDone+0x91a>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800eb4a:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800eb4e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800eb52:	18d1      	adds	r1, r2, r3
 800eb54:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800eb58:	b29b      	uxth	r3, r3
 800eb5a:	f8b7 2082 	ldrh.w	r2, [r7, #130]	@ 0x82
 800eb5e:	1ad3      	subs	r3, r2, r3
 800eb60:	b29b      	uxth	r3, r3
 800eb62:	461a      	mov	r2, r3
 800eb64:	4813      	ldr	r0, [pc, #76]	@ (800ebb4 <ProcessRadioRxDone+0x908>)
 800eb66:	f008 fade 	bl	8017126 <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800eb6a:	4b0f      	ldr	r3, [pc, #60]	@ (800eba8 <ProcessRadioRxDone+0x8fc>)
 800eb6c:	2203      	movs	r2, #3
 800eb6e:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800eb72:	4b0d      	ldr	r3, [pc, #52]	@ (800eba8 <ProcessRadioRxDone+0x8fc>)
 800eb74:	2200      	movs	r2, #0
 800eb76:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800eb7a:	4b0b      	ldr	r3, [pc, #44]	@ (800eba8 <ProcessRadioRxDone+0x8fc>)
 800eb7c:	4a0d      	ldr	r2, [pc, #52]	@ (800ebb4 <ProcessRadioRxDone+0x908>)
 800eb7e:	f8c3 242c 	str.w	r2, [r3, #1068]	@ 0x42c
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800eb82:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800eb86:	b2da      	uxtb	r2, r3
 800eb88:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800eb8c:	1ad3      	subs	r3, r2, r3
 800eb8e:	b2da      	uxtb	r2, r3
 800eb90:	4b05      	ldr	r3, [pc, #20]	@ (800eba8 <ProcessRadioRxDone+0x8fc>)
 800eb92:	f883 2430 	strb.w	r2, [r3, #1072]	@ 0x430

            MacCtx.MacFlags.Bits.McpsInd = 1;
 800eb96:	4a04      	ldr	r2, [pc, #16]	@ (800eba8 <ProcessRadioRxDone+0x8fc>)
 800eb98:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800eb9c:	f043 0302 	orr.w	r3, r3, #2
 800eba0:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
            break;
 800eba4:	e00f      	b.n	800ebc6 <ProcessRadioRxDone+0x91a>
 800eba6:	bf00      	nop
 800eba8:	200008f4 	.word	0x200008f4
 800ebac:	20000e14 	.word	0x20000e14
 800ebb0:	200019a4 	.word	0x200019a4
 800ebb4:	20000b2c 	.word	0x20000b2c
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ebb8:	4b17      	ldr	r3, [pc, #92]	@ (800ec18 <ProcessRadioRxDone+0x96c>)
 800ebba:	2201      	movs	r2, #1
 800ebbc:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
            PrepareRxDoneAbort( );
 800ebc0:	f7ff fb4e 	bl	800e260 <PrepareRxDoneAbort>
            break;
 800ebc4:	bf00      	nop
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Verify if we need to disable the RetransmitTimeoutTimer
    // Only aplies if downlink is received on Rx1 or Rx2 windows.
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800ebc6:	4b14      	ldr	r3, [pc, #80]	@ (800ec18 <ProcessRadioRxDone+0x96c>)
 800ebc8:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d004      	beq.n	800ebda <ProcessRadioRxDone+0x92e>
        ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800ebd0:	4b11      	ldr	r3, [pc, #68]	@ (800ec18 <ProcessRadioRxDone+0x96c>)
 800ebd2:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800ebd6:	2b01      	cmp	r3, #1
 800ebd8:	d10c      	bne.n	800ebf4 <ProcessRadioRxDone+0x948>
    {
        if( MacCtx.NodeAckRequested == true )
 800ebda:	4b0f      	ldr	r3, [pc, #60]	@ (800ec18 <ProcessRadioRxDone+0x96c>)
 800ebdc:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d007      	beq.n	800ebf4 <ProcessRadioRxDone+0x948>
        {
            if( MacCtx.McpsConfirm.AckReceived == true )
 800ebe4:	4b0c      	ldr	r3, [pc, #48]	@ (800ec18 <ProcessRadioRxDone+0x96c>)
 800ebe6:	f893 3448 	ldrb.w	r3, [r3, #1096]	@ 0x448
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d002      	beq.n	800ebf4 <ProcessRadioRxDone+0x948>
            {
                OnRetransmitTimeoutTimerEvent( NULL );
 800ebee:	2000      	movs	r0, #0
 800ebf0:	f000 fce4 	bl	800f5bc <OnRetransmitTimeoutTimerEvent>
            }
        }
    }

    if( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_CLASS_C )
 800ebf4:	4b08      	ldr	r3, [pc, #32]	@ (800ec18 <ProcessRadioRxDone+0x96c>)
 800ebf6:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800ebfa:	2b02      	cmp	r3, #2
 800ebfc:	d006      	beq.n	800ec0c <ProcessRadioRxDone+0x960>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 800ebfe:	4a06      	ldr	r2, [pc, #24]	@ (800ec18 <ProcessRadioRxDone+0x96c>)
 800ec00:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800ec04:	f043 0320 	orr.w	r3, r3, #32
 800ec08:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
    }
#endif /* LORAMAC_VERSION */

    UpdateRxSlotIdleState( );
 800ec0c:	f7ff fa82 	bl	800e114 <UpdateRxSlotIdleState>
}
 800ec10:	3794      	adds	r7, #148	@ 0x94
 800ec12:	46bd      	mov	sp, r7
 800ec14:	bd90      	pop	{r4, r7, pc}
 800ec16:	bf00      	nop
 800ec18:	200008f4 	.word	0x200008f4

0800ec1c <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 800ec1c:	b580      	push	{r7, lr}
 800ec1e:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800ec20:	4b11      	ldr	r3, [pc, #68]	@ (800ec68 <ProcessRadioTxTimeout+0x4c>)
 800ec22:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800ec26:	2b02      	cmp	r3, #2
 800ec28:	d002      	beq.n	800ec30 <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 800ec2a:	4b10      	ldr	r3, [pc, #64]	@ (800ec6c <ProcessRadioTxTimeout+0x50>)
 800ec2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec2e:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 800ec30:	f7ff fa70 	bl	800e114 <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800ec34:	4b0e      	ldr	r3, [pc, #56]	@ (800ec70 <ProcessRadioTxTimeout+0x54>)
 800ec36:	2202      	movs	r2, #2
 800ec38:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800ec3c:	2002      	movs	r0, #2
 800ec3e:	f004 fd57 	bl	80136f0 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800ec42:	4b0b      	ldr	r3, [pc, #44]	@ (800ec70 <ProcessRadioTxTimeout+0x54>)
 800ec44:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d003      	beq.n	800ec54 <ProcessRadioTxTimeout+0x38>
    {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        MacCtx.AckTimeoutRetry = true;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        MacCtx.RetransmitTimeoutRetry = true;
 800ec4c:	4b08      	ldr	r3, [pc, #32]	@ (800ec70 <ProcessRadioTxTimeout+0x54>)
 800ec4e:	2201      	movs	r2, #1
 800ec50:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
#endif /* LORAMAC_VERSION */
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800ec54:	4a06      	ldr	r2, [pc, #24]	@ (800ec70 <ProcessRadioTxTimeout+0x54>)
 800ec56:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800ec5a:	f043 0320 	orr.w	r3, r3, #32
 800ec5e:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
}
 800ec62:	bf00      	nop
 800ec64:	bd80      	pop	{r7, pc}
 800ec66:	bf00      	nop
 800ec68:	20000e14 	.word	0x20000e14
 800ec6c:	0801f68c 	.word	0x0801f68c
 800ec70:	200008f4 	.word	0x200008f4

0800ec74 <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 800ec74:	b580      	push	{r7, lr}
 800ec76:	b084      	sub	sp, #16
 800ec78:	af00      	add	r7, sp, #0
 800ec7a:	4603      	mov	r3, r0
 800ec7c:	460a      	mov	r2, r1
 800ec7e:	71fb      	strb	r3, [r7, #7]
 800ec80:	4613      	mov	r3, r2
 800ec82:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 800ec84:	2300      	movs	r3, #0
 800ec86:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800ec88:	4b3d      	ldr	r3, [pc, #244]	@ (800ed80 <HandleRadioRxErrorTimeout+0x10c>)
 800ec8a:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800ec8e:	2b02      	cmp	r3, #2
 800ec90:	d002      	beq.n	800ec98 <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 800ec92:	4b3c      	ldr	r3, [pc, #240]	@ (800ed84 <HandleRadioRxErrorTimeout+0x110>)
 800ec94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec96:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800ec98:	f004 f870 	bl	8012d7c <LoRaMacClassBIsBeaconExpected>
 800ec9c:	4603      	mov	r3, r0
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d007      	beq.n	800ecb2 <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800eca2:	2002      	movs	r0, #2
 800eca4:	f004 f81e 	bl	8012ce4 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800eca8:	2000      	movs	r0, #0
 800ecaa:	f004 f840 	bl	8012d2e <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800ecae:	2301      	movs	r3, #1
 800ecb0:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800ecb2:	4b33      	ldr	r3, [pc, #204]	@ (800ed80 <HandleRadioRxErrorTimeout+0x10c>)
 800ecb4:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800ecb8:	2b01      	cmp	r3, #1
 800ecba:	d119      	bne.n	800ecf0 <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800ecbc:	f004 f865 	bl	8012d8a <LoRaMacClassBIsPingExpected>
 800ecc0:	4603      	mov	r3, r0
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d007      	beq.n	800ecd6 <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800ecc6:	2000      	movs	r0, #0
 800ecc8:	f004 f816 	bl	8012cf8 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800eccc:	2000      	movs	r0, #0
 800ecce:	f004 f837 	bl	8012d40 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800ecd2:	2301      	movs	r3, #1
 800ecd4:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800ecd6:	f004 f85f 	bl	8012d98 <LoRaMacClassBIsMulticastExpected>
 800ecda:	4603      	mov	r3, r0
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d007      	beq.n	800ecf0 <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800ece0:	2000      	movs	r0, #0
 800ece2:	f004 f813 	bl	8012d0c <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800ece6:	2000      	movs	r0, #0
 800ece8:	f004 f833 	bl	8012d52 <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 800ecec:	2301      	movs	r3, #1
 800ecee:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 800ecf0:	7bfb      	ldrb	r3, [r7, #15]
 800ecf2:	f083 0301 	eor.w	r3, r3, #1
 800ecf6:	b2db      	uxtb	r3, r3
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d03b      	beq.n	800ed74 <HandleRadioRxErrorTimeout+0x100>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800ecfc:	4b22      	ldr	r3, [pc, #136]	@ (800ed88 <HandleRadioRxErrorTimeout+0x114>)
 800ecfe:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d122      	bne.n	800ed4c <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 800ed06:	4b20      	ldr	r3, [pc, #128]	@ (800ed88 <HandleRadioRxErrorTimeout+0x114>)
 800ed08:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d003      	beq.n	800ed18 <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800ed10:	4a1d      	ldr	r2, [pc, #116]	@ (800ed88 <HandleRadioRxErrorTimeout+0x114>)
 800ed12:	79fb      	ldrb	r3, [r7, #7]
 800ed14:	f882 3445 	strb.w	r3, [r2, #1093]	@ 0x445
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800ed18:	79fb      	ldrb	r3, [r7, #7]
 800ed1a:	4618      	mov	r0, r3
 800ed1c:	f004 fce8 	bl	80136f0 <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800ed20:	4b17      	ldr	r3, [pc, #92]	@ (800ed80 <HandleRadioRxErrorTimeout+0x10c>)
 800ed22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed24:	4618      	mov	r0, r3
 800ed26:	f00c fc77 	bl	801b618 <UTIL_TIMER_GetElapsedTime>
 800ed2a:	4602      	mov	r2, r0
 800ed2c:	4b16      	ldr	r3, [pc, #88]	@ (800ed88 <HandleRadioRxErrorTimeout+0x114>)
 800ed2e:	f8d3 33b4 	ldr.w	r3, [r3, #948]	@ 0x3b4
 800ed32:	429a      	cmp	r2, r3
 800ed34:	d31e      	bcc.n	800ed74 <HandleRadioRxErrorTimeout+0x100>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 800ed36:	4815      	ldr	r0, [pc, #84]	@ (800ed8c <HandleRadioRxErrorTimeout+0x118>)
 800ed38:	f00c fb42 	bl	801b3c0 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800ed3c:	4a12      	ldr	r2, [pc, #72]	@ (800ed88 <HandleRadioRxErrorTimeout+0x114>)
 800ed3e:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800ed42:	f043 0320 	orr.w	r3, r3, #32
 800ed46:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
 800ed4a:	e013      	b.n	800ed74 <HandleRadioRxErrorTimeout+0x100>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 800ed4c:	4b0e      	ldr	r3, [pc, #56]	@ (800ed88 <HandleRadioRxErrorTimeout+0x114>)
 800ed4e:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d003      	beq.n	800ed5e <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800ed56:	4a0c      	ldr	r2, [pc, #48]	@ (800ed88 <HandleRadioRxErrorTimeout+0x114>)
 800ed58:	79bb      	ldrb	r3, [r7, #6]
 800ed5a:	f882 3445 	strb.w	r3, [r2, #1093]	@ 0x445
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800ed5e:	79bb      	ldrb	r3, [r7, #6]
 800ed60:	4618      	mov	r0, r3
 800ed62:	f004 fcc5 	bl	80136f0 <LoRaMacConfirmQueueSetStatusCmn>
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
            }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            MacCtx.MacFlags.Bits.MacDone = 1;
 800ed66:	4a08      	ldr	r2, [pc, #32]	@ (800ed88 <HandleRadioRxErrorTimeout+0x114>)
 800ed68:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800ed6c:	f043 0320 	orr.w	r3, r3, #32
 800ed70:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
#endif /* LORAMAC_VERSION */
        }
    }

    UpdateRxSlotIdleState( );
 800ed74:	f7ff f9ce 	bl	800e114 <UpdateRxSlotIdleState>
}
 800ed78:	bf00      	nop
 800ed7a:	3710      	adds	r7, #16
 800ed7c:	46bd      	mov	sp, r7
 800ed7e:	bd80      	pop	{r7, pc}
 800ed80:	20000e14 	.word	0x20000e14
 800ed84:	0801f68c 	.word	0x0801f68c
 800ed88:	200008f4 	.word	0x200008f4
 800ed8c:	20000c8c 	.word	0x20000c8c

0800ed90 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 800ed90:	b580      	push	{r7, lr}
 800ed92:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800ed94:	2106      	movs	r1, #6
 800ed96:	2005      	movs	r0, #5
 800ed98:	f7ff ff6c 	bl	800ec74 <HandleRadioRxErrorTimeout>
}
 800ed9c:	bf00      	nop
 800ed9e:	bd80      	pop	{r7, pc}

0800eda0 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 800eda0:	b580      	push	{r7, lr}
 800eda2:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800eda4:	2104      	movs	r1, #4
 800eda6:	2003      	movs	r0, #3
 800eda8:	f7ff ff64 	bl	800ec74 <HandleRadioRxErrorTimeout>
}
 800edac:	bf00      	nop
 800edae:	bd80      	pop	{r7, pc}

0800edb0 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 800edb0:	b580      	push	{r7, lr}
 800edb2:	b084      	sub	sp, #16
 800edb4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800edb6:	f3ef 8310 	mrs	r3, PRIMASK
 800edba:	607b      	str	r3, [r7, #4]
  return(result);
 800edbc:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 800edbe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800edc0:	b672      	cpsid	i
}
 800edc2:	bf00      	nop
    events = LoRaMacRadioEvents;
 800edc4:	4b1d      	ldr	r3, [pc, #116]	@ (800ee3c <LoRaMacHandleIrqEvents+0x8c>)
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 800edca:	4b1c      	ldr	r3, [pc, #112]	@ (800ee3c <LoRaMacHandleIrqEvents+0x8c>)
 800edcc:	2200      	movs	r2, #0
 800edce:	601a      	str	r2, [r3, #0]
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800edd4:	68bb      	ldr	r3, [r7, #8]
 800edd6:	f383 8810 	msr	PRIMASK, r3
}
 800edda:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 800eddc:	683b      	ldr	r3, [r7, #0]
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d027      	beq.n	800ee32 <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 800ede2:	783b      	ldrb	r3, [r7, #0]
 800ede4:	f003 0320 	and.w	r3, r3, #32
 800ede8:	b2db      	uxtb	r3, r3
 800edea:	2b00      	cmp	r3, #0
 800edec:	d001      	beq.n	800edf2 <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 800edee:	f7ff f9a9 	bl	800e144 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 800edf2:	783b      	ldrb	r3, [r7, #0]
 800edf4:	f003 0310 	and.w	r3, r3, #16
 800edf8:	b2db      	uxtb	r3, r3
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d001      	beq.n	800ee02 <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 800edfe:	f7ff fa55 	bl	800e2ac <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 800ee02:	783b      	ldrb	r3, [r7, #0]
 800ee04:	f003 0308 	and.w	r3, r3, #8
 800ee08:	b2db      	uxtb	r3, r3
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d001      	beq.n	800ee12 <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 800ee0e:	f7ff ff05 	bl	800ec1c <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 800ee12:	783b      	ldrb	r3, [r7, #0]
 800ee14:	f003 0304 	and.w	r3, r3, #4
 800ee18:	b2db      	uxtb	r3, r3
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d001      	beq.n	800ee22 <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 800ee1e:	f7ff ffb7 	bl	800ed90 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 800ee22:	783b      	ldrb	r3, [r7, #0]
 800ee24:	f003 0302 	and.w	r3, r3, #2
 800ee28:	b2db      	uxtb	r3, r3
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d001      	beq.n	800ee32 <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 800ee2e:	f7ff ffb7 	bl	800eda0 <ProcessRadioRxTimeout>
        }
    }
}
 800ee32:	bf00      	nop
 800ee34:	3710      	adds	r7, #16
 800ee36:	46bd      	mov	sp, r7
 800ee38:	bd80      	pop	{r7, pc}
 800ee3a:	bf00      	nop
 800ee3c:	2000199c 	.word	0x2000199c

0800ee40 <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 800ee40:	b480      	push	{r7}
 800ee42:	af00      	add	r7, sp, #0
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( LoRaMacRadioEvents.Events.RxProcessPending == 1 )
 800ee44:	4b0c      	ldr	r3, [pc, #48]	@ (800ee78 <LoRaMacIsBusy+0x38>)
 800ee46:	781b      	ldrb	r3, [r3, #0]
 800ee48:	f003 0301 	and.w	r3, r3, #1
 800ee4c:	b2db      	uxtb	r3, r3
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d001      	beq.n	800ee56 <LoRaMacIsBusy+0x16>
    {
        return true;
 800ee52:	2301      	movs	r3, #1
 800ee54:	e00c      	b.n	800ee70 <LoRaMacIsBusy+0x30>
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800ee56:	4b09      	ldr	r3, [pc, #36]	@ (800ee7c <LoRaMacIsBusy+0x3c>)
 800ee58:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d106      	bne.n	800ee6e <LoRaMacIsBusy+0x2e>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800ee60:	4b06      	ldr	r3, [pc, #24]	@ (800ee7c <LoRaMacIsBusy+0x3c>)
 800ee62:	f893 3496 	ldrb.w	r3, [r3, #1174]	@ 0x496
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800ee66:	2b01      	cmp	r3, #1
 800ee68:	d101      	bne.n	800ee6e <LoRaMacIsBusy+0x2e>
    {
        return false;
 800ee6a:	2300      	movs	r3, #0
 800ee6c:	e000      	b.n	800ee70 <LoRaMacIsBusy+0x30>
    }
    return true;
 800ee6e:	2301      	movs	r3, #1
}
 800ee70:	4618      	mov	r0, r3
 800ee72:	46bd      	mov	sp, r7
 800ee74:	bc80      	pop	{r7}
 800ee76:	4770      	bx	lr
 800ee78:	2000199c 	.word	0x2000199c
 800ee7c:	200008f4 	.word	0x200008f4

0800ee80 <LoRaMacEnableRequests>:

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 800ee80:	b480      	push	{r7}
 800ee82:	b083      	sub	sp, #12
 800ee84:	af00      	add	r7, sp, #0
 800ee86:	4603      	mov	r3, r0
 800ee88:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 800ee8a:	4a04      	ldr	r2, [pc, #16]	@ (800ee9c <LoRaMacEnableRequests+0x1c>)
 800ee8c:	79fb      	ldrb	r3, [r7, #7]
 800ee8e:	f882 3496 	strb.w	r3, [r2, #1174]	@ 0x496
}
 800ee92:	bf00      	nop
 800ee94:	370c      	adds	r7, #12
 800ee96:	46bd      	mov	sp, r7
 800ee98:	bc80      	pop	{r7}
 800ee9a:	4770      	bx	lr
 800ee9c:	200008f4 	.word	0x200008f4

0800eea0 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 800eea0:	b580      	push	{r7, lr}
 800eea2:	b082      	sub	sp, #8
 800eea4:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 800eea6:	4b2c      	ldr	r3, [pc, #176]	@ (800ef58 <LoRaMacHandleRequestEvents+0xb8>)
 800eea8:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800eeac:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 800eeae:	4b2a      	ldr	r3, [pc, #168]	@ (800ef58 <LoRaMacHandleRequestEvents+0xb8>)
 800eeb0:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d14a      	bne.n	800ef4e <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800eeb8:	4b27      	ldr	r3, [pc, #156]	@ (800ef58 <LoRaMacHandleRequestEvents+0xb8>)
 800eeba:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800eebe:	f003 0301 	and.w	r3, r3, #1
 800eec2:	b2db      	uxtb	r3, r3
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d006      	beq.n	800eed6 <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800eec8:	4a23      	ldr	r2, [pc, #140]	@ (800ef58 <LoRaMacHandleRequestEvents+0xb8>)
 800eeca:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800eece:	f023 0301 	bic.w	r3, r3, #1
 800eed2:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800eed6:	4b20      	ldr	r3, [pc, #128]	@ (800ef58 <LoRaMacHandleRequestEvents+0xb8>)
 800eed8:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800eedc:	f003 0304 	and.w	r3, r3, #4
 800eee0:	b2db      	uxtb	r3, r3
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d006      	beq.n	800eef4 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800eee6:	4a1c      	ldr	r2, [pc, #112]	@ (800ef58 <LoRaMacHandleRequestEvents+0xb8>)
 800eee8:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800eeec:	f023 0304 	bic.w	r3, r3, #4
 800eef0:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800eef4:	2001      	movs	r0, #1
 800eef6:	f7ff ffc3 	bl	800ee80 <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 800eefa:	793b      	ldrb	r3, [r7, #4]
 800eefc:	f003 0301 	and.w	r3, r3, #1
 800ef00:	b2db      	uxtb	r3, r3
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d005      	beq.n	800ef12 <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800ef06:	4b14      	ldr	r3, [pc, #80]	@ (800ef58 <LoRaMacHandleRequestEvents+0xb8>)
 800ef08:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	4813      	ldr	r0, [pc, #76]	@ (800ef5c <LoRaMacHandleRequestEvents+0xbc>)
 800ef10:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 800ef12:	793b      	ldrb	r3, [r7, #4]
 800ef14:	f003 0304 	and.w	r3, r3, #4
 800ef18:	b2db      	uxtb	r3, r3
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d00e      	beq.n	800ef3c <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800ef1e:	4810      	ldr	r0, [pc, #64]	@ (800ef60 <LoRaMacHandleRequestEvents+0xc0>)
 800ef20:	f004 fc34 	bl	801378c <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800ef24:	f004 fc7e 	bl	8013824 <LoRaMacConfirmQueueGetCnt>
 800ef28:	4603      	mov	r3, r0
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d006      	beq.n	800ef3c <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800ef2e:	4a0a      	ldr	r2, [pc, #40]	@ (800ef58 <LoRaMacHandleRequestEvents+0xb8>)
 800ef30:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800ef34:	f043 0304 	orr.w	r3, r3, #4
 800ef38:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 800ef3c:	f003 ff4a 	bl	8012dd4 <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 800ef40:	4a05      	ldr	r2, [pc, #20]	@ (800ef58 <LoRaMacHandleRequestEvents+0xb8>)
 800ef42:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800ef46:	f023 0320 	bic.w	r3, r3, #32
 800ef4a:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
    }
}
 800ef4e:	bf00      	nop
 800ef50:	3708      	adds	r7, #8
 800ef52:	46bd      	mov	sp, r7
 800ef54:	bd80      	pop	{r7, pc}
 800ef56:	bf00      	nop
 800ef58:	200008f4 	.word	0x200008f4
 800ef5c:	20000d38 	.word	0x20000d38
 800ef60:	20000d4c 	.word	0x20000d4c

0800ef64 <LoRaMacHandleScheduleUplinkEvent>:

static void LoRaMacHandleScheduleUplinkEvent( void )
{
 800ef64:	b580      	push	{r7, lr}
 800ef66:	b082      	sub	sp, #8
 800ef68:	af00      	add	r7, sp, #0
    // Handle events
    if( MacCtx.MacState == LORAMAC_IDLE )
 800ef6a:	4b07      	ldr	r3, [pc, #28]	@ (800ef88 <LoRaMacHandleScheduleUplinkEvent+0x24>)
 800ef6c:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d105      	bne.n	800ef80 <LoRaMacHandleScheduleUplinkEvent+0x1c>
    {
        // Verify if sticky MAC commands are pending or not
        bool isStickyMacCommandPending = false;
 800ef74:	2300      	movs	r3, #0
 800ef76:	71fb      	strb	r3, [r7, #7]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 800ef78:	1dfb      	adds	r3, r7, #7
 800ef7a:	4618      	mov	r0, r3
 800ef7c:	f004 f9ec 	bl	8013358 <LoRaMacCommandsStickyCmdsPending>
        {// Setup MLME indication
            /* ST_WORKAROUND: remove unnecessary mlme operation to prevent uplinks burst */
            //SetMlmeScheduleUplinkIndication( );
        }
    }
}
 800ef80:	bf00      	nop
 800ef82:	3708      	adds	r7, #8
 800ef84:	46bd      	mov	sp, r7
 800ef86:	bd80      	pop	{r7, pc}
 800ef88:	200008f4 	.word	0x200008f4

0800ef8c <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 800ef8c:	b580      	push	{r7, lr}
 800ef8e:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800ef90:	4b16      	ldr	r3, [pc, #88]	@ (800efec <LoRaMacHandleIndicationEvents+0x60>)
 800ef92:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800ef96:	f003 0308 	and.w	r3, r3, #8
 800ef9a:	b2db      	uxtb	r3, r3
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d00d      	beq.n	800efbc <LoRaMacHandleIndicationEvents+0x30>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800efa0:	4a12      	ldr	r2, [pc, #72]	@ (800efec <LoRaMacHandleIndicationEvents+0x60>)
 800efa2:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800efa6:	f023 0308 	bic.w	r3, r3, #8
 800efaa:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 800efae:	4b0f      	ldr	r3, [pc, #60]	@ (800efec <LoRaMacHandleIndicationEvents+0x60>)
 800efb0:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 800efb4:	68db      	ldr	r3, [r3, #12]
 800efb6:	490e      	ldr	r1, [pc, #56]	@ (800eff0 <LoRaMacHandleIndicationEvents+0x64>)
 800efb8:	480e      	ldr	r0, [pc, #56]	@ (800eff4 <LoRaMacHandleIndicationEvents+0x68>)
 800efba:	4798      	blx	r3
    }
    */
    /*ST_WORKAROUND_END */

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800efbc:	4b0b      	ldr	r3, [pc, #44]	@ (800efec <LoRaMacHandleIndicationEvents+0x60>)
 800efbe:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800efc2:	f003 0302 	and.w	r3, r3, #2
 800efc6:	b2db      	uxtb	r3, r3
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d00d      	beq.n	800efe8 <LoRaMacHandleIndicationEvents+0x5c>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800efcc:	4a07      	ldr	r2, [pc, #28]	@ (800efec <LoRaMacHandleIndicationEvents+0x60>)
 800efce:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800efd2:	f023 0302 	bic.w	r3, r3, #2
 800efd6:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 800efda:	4b04      	ldr	r3, [pc, #16]	@ (800efec <LoRaMacHandleIndicationEvents+0x60>)
 800efdc:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 800efe0:	685b      	ldr	r3, [r3, #4]
 800efe2:	4903      	ldr	r1, [pc, #12]	@ (800eff0 <LoRaMacHandleIndicationEvents+0x64>)
 800efe4:	4804      	ldr	r0, [pc, #16]	@ (800eff8 <LoRaMacHandleIndicationEvents+0x6c>)
 800efe6:	4798      	blx	r3
    }
}
 800efe8:	bf00      	nop
 800efea:	bd80      	pop	{r7, pc}
 800efec:	200008f4 	.word	0x200008f4
 800eff0:	20000d84 	.word	0x20000d84
 800eff4:	20000d60 	.word	0x20000d60
 800eff8:	20000d18 	.word	0x20000d18

0800effc <LoRaMacHandleMcpsRequest>:

static void LoRaMacHandleMcpsRequest( void )
{
 800effc:	b580      	push	{r7, lr}
 800effe:	b082      	sub	sp, #8
 800f000:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800f002:	4b2a      	ldr	r3, [pc, #168]	@ (800f0ac <LoRaMacHandleMcpsRequest+0xb0>)
 800f004:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800f008:	f003 0301 	and.w	r3, r3, #1
 800f00c:	b2db      	uxtb	r3, r3
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d048      	beq.n	800f0a4 <LoRaMacHandleMcpsRequest+0xa8>
    {
        bool stopRetransmission = false;
 800f012:	2300      	movs	r3, #0
 800f014:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 800f016:	2300      	movs	r3, #0
 800f018:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800f01a:	4b24      	ldr	r3, [pc, #144]	@ (800f0ac <LoRaMacHandleMcpsRequest+0xb0>)
 800f01c:	f893 3444 	ldrb.w	r3, [r3, #1092]	@ 0x444
 800f020:	2b00      	cmp	r3, #0
 800f022:	d004      	beq.n	800f02e <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 800f024:	4b21      	ldr	r3, [pc, #132]	@ (800f0ac <LoRaMacHandleMcpsRequest+0xb0>)
 800f026:	f893 3444 	ldrb.w	r3, [r3, #1092]	@ 0x444
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800f02a:	2b03      	cmp	r3, #3
 800f02c:	d104      	bne.n	800f038 <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800f02e:	f002 f8f9 	bl	8011224 <CheckRetransUnconfirmedUplink>
 800f032:	4603      	mov	r3, r0
 800f034:	71fb      	strb	r3, [r7, #7]
 800f036:	e010      	b.n	800f05a <LoRaMacHandleMcpsRequest+0x5e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800f038:	4b1c      	ldr	r3, [pc, #112]	@ (800f0ac <LoRaMacHandleMcpsRequest+0xb0>)
 800f03a:	f893 3444 	ldrb.w	r3, [r3, #1092]	@ 0x444
 800f03e:	2b01      	cmp	r3, #1
 800f040:	d10b      	bne.n	800f05a <LoRaMacHandleMcpsRequest+0x5e>
            else
            {
                waitForRetransmission = true;
            }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            if( MacCtx.RetransmitTimeoutRetry == true )
 800f042:	4b1a      	ldr	r3, [pc, #104]	@ (800f0ac <LoRaMacHandleMcpsRequest+0xb0>)
 800f044:	f893 341d 	ldrb.w	r3, [r3, #1053]	@ 0x41d
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d004      	beq.n	800f056 <LoRaMacHandleMcpsRequest+0x5a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 800f04c:	f002 f916 	bl	801127c <CheckRetransConfirmedUplink>
 800f050:	4603      	mov	r3, r0
 800f052:	71fb      	strb	r3, [r7, #7]
 800f054:	e001      	b.n	800f05a <LoRaMacHandleMcpsRequest+0x5e>
            }
            else
            {
                waitForRetransmission = true;
 800f056:	2301      	movs	r3, #1
 800f058:	71bb      	strb	r3, [r7, #6]
            }
#endif /* LORAMAC_VERSION */
        }

        if( stopRetransmission == true )
 800f05a:	79fb      	ldrb	r3, [r7, #7]
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d00d      	beq.n	800f07c <LoRaMacHandleMcpsRequest+0x80>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 800f060:	4813      	ldr	r0, [pc, #76]	@ (800f0b0 <LoRaMacHandleMcpsRequest+0xb4>)
 800f062:	f00c f9ad 	bl	801b3c0 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800f066:	4b11      	ldr	r3, [pc, #68]	@ (800f0ac <LoRaMacHandleMcpsRequest+0xb0>)
 800f068:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f06c:	f023 0320 	bic.w	r3, r3, #32
 800f070:	4a0e      	ldr	r2, [pc, #56]	@ (800f0ac <LoRaMacHandleMcpsRequest+0xb0>)
 800f072:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
            StopRetransmission( );
 800f076:	f002 f93b 	bl	80112f0 <StopRetransmission>
#endif /* LORAMAC_VERSION */
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 800f07a:	e013      	b.n	800f0a4 <LoRaMacHandleMcpsRequest+0xa8>
        else if( waitForRetransmission == false )
 800f07c:	79bb      	ldrb	r3, [r7, #6]
 800f07e:	f083 0301 	eor.w	r3, r3, #1
 800f082:	b2db      	uxtb	r3, r3
 800f084:	2b00      	cmp	r3, #0
 800f086:	d00d      	beq.n	800f0a4 <LoRaMacHandleMcpsRequest+0xa8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800f088:	4a08      	ldr	r2, [pc, #32]	@ (800f0ac <LoRaMacHandleMcpsRequest+0xb0>)
 800f08a:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800f08e:	f023 0320 	bic.w	r3, r3, #32
 800f092:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
            MacCtx.RetransmitTimeoutRetry = false;
 800f096:	4b05      	ldr	r3, [pc, #20]	@ (800f0ac <LoRaMacHandleMcpsRequest+0xb0>)
 800f098:	2200      	movs	r2, #0
 800f09a:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
            OnTxDelayedTimerEvent( NULL );
 800f09e:	2000      	movs	r0, #0
 800f0a0:	f000 f9c8 	bl	800f434 <OnTxDelayedTimerEvent>
}
 800f0a4:	bf00      	nop
 800f0a6:	3708      	adds	r7, #8
 800f0a8:	46bd      	mov	sp, r7
 800f0aa:	bd80      	pop	{r7, pc}
 800f0ac:	200008f4 	.word	0x200008f4
 800f0b0:	20000c5c 	.word	0x20000c5c

0800f0b4 <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 800f0b4:	b580      	push	{r7, lr}
 800f0b6:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800f0b8:	4b18      	ldr	r3, [pc, #96]	@ (800f11c <LoRaMacHandleMlmeRequest+0x68>)
 800f0ba:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800f0be:	f003 0304 	and.w	r3, r3, #4
 800f0c2:	b2db      	uxtb	r3, r3
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d026      	beq.n	800f116 <LoRaMacHandleMlmeRequest+0x62>
    {
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800f0c8:	2001      	movs	r0, #1
 800f0ca:	f004 fb45 	bl	8013758 <LoRaMacConfirmQueueIsCmdActive>
 800f0ce:	4603      	mov	r3, r0
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d012      	beq.n	800f0fa <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800f0d4:	2001      	movs	r0, #1
 800f0d6:	f004 fae1 	bl	801369c <LoRaMacConfirmQueueGetStatus>
 800f0da:	4603      	mov	r3, r0
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d103      	bne.n	800f0e8 <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 800f0e0:	4b0e      	ldr	r3, [pc, #56]	@ (800f11c <LoRaMacHandleMlmeRequest+0x68>)
 800f0e2:	2200      	movs	r2, #0
 800f0e4:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
            }
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800f0e8:	4b0c      	ldr	r3, [pc, #48]	@ (800f11c <LoRaMacHandleMlmeRequest+0x68>)
 800f0ea:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f0ee:	f023 0302 	bic.w	r3, r3, #2
 800f0f2:	4a0a      	ldr	r2, [pc, #40]	@ (800f11c <LoRaMacHandleMlmeRequest+0x68>)
 800f0f4:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
#endif /* LORAMAC_VERSION */
    }
}
 800f0f8:	e00d      	b.n	800f116 <LoRaMacHandleMlmeRequest+0x62>
        else if( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true )
 800f0fa:	2005      	movs	r0, #5
 800f0fc:	f004 fb2c 	bl	8013758 <LoRaMacConfirmQueueIsCmdActive>
 800f100:	4603      	mov	r3, r0
 800f102:	2b00      	cmp	r3, #0
 800f104:	d007      	beq.n	800f116 <LoRaMacHandleMlmeRequest+0x62>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800f106:	4b05      	ldr	r3, [pc, #20]	@ (800f11c <LoRaMacHandleMlmeRequest+0x68>)
 800f108:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f10c:	f023 0302 	bic.w	r3, r3, #2
 800f110:	4a02      	ldr	r2, [pc, #8]	@ (800f11c <LoRaMacHandleMlmeRequest+0x68>)
 800f112:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
}
 800f116:	bf00      	nop
 800f118:	bd80      	pop	{r7, pc}
 800f11a:	bf00      	nop
 800f11c:	200008f4 	.word	0x200008f4

0800f120 <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 800f120:	b580      	push	{r7, lr}
 800f122:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800f124:	200b      	movs	r0, #11
 800f126:	f004 fb17 	bl	8013758 <LoRaMacConfirmQueueIsCmdActive>
 800f12a:	4603      	mov	r3, r0
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d019      	beq.n	800f164 <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800f130:	4b0e      	ldr	r3, [pc, #56]	@ (800f16c <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800f132:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800f136:	f003 0301 	and.w	r3, r3, #1
 800f13a:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d111      	bne.n	800f164 <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800f140:	4b0a      	ldr	r3, [pc, #40]	@ (800f16c <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800f142:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800f146:	f003 0304 	and.w	r3, r3, #4
 800f14a:	b2db      	uxtb	r3, r3
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d009      	beq.n	800f164 <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800f150:	4b06      	ldr	r3, [pc, #24]	@ (800f16c <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800f152:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f156:	f023 0302 	bic.w	r3, r3, #2
 800f15a:	4a04      	ldr	r2, [pc, #16]	@ (800f16c <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800f15c:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
            return 0x01;
 800f160:	2301      	movs	r3, #1
 800f162:	e000      	b.n	800f166 <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 800f164:	2300      	movs	r3, #0
}
 800f166:	4618      	mov	r0, r3
 800f168:	bd80      	pop	{r7, pc}
 800f16a:	bf00      	nop
 800f16c:	200008f4 	.word	0x200008f4

0800f170 <CheckForMinimumAbpDatarate>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool CheckForMinimumAbpDatarate( bool adr, ActivationType_t activation, bool datarateChanged )
{
 800f170:	b480      	push	{r7}
 800f172:	b083      	sub	sp, #12
 800f174:	af00      	add	r7, sp, #0
 800f176:	4603      	mov	r3, r0
 800f178:	71fb      	strb	r3, [r7, #7]
 800f17a:	460b      	mov	r3, r1
 800f17c:	71bb      	strb	r3, [r7, #6]
 800f17e:	4613      	mov	r3, r2
 800f180:	717b      	strb	r3, [r7, #5]
    if( ( adr == true ) &&
 800f182:	79fb      	ldrb	r3, [r7, #7]
 800f184:	2b00      	cmp	r3, #0
 800f186:	d00a      	beq.n	800f19e <CheckForMinimumAbpDatarate+0x2e>
 800f188:	79bb      	ldrb	r3, [r7, #6]
 800f18a:	2b01      	cmp	r3, #1
 800f18c:	d107      	bne.n	800f19e <CheckForMinimumAbpDatarate+0x2e>
        ( activation == ACTIVATION_TYPE_ABP ) &&
        ( datarateChanged == false ) )
 800f18e:	797b      	ldrb	r3, [r7, #5]
 800f190:	f083 0301 	eor.w	r3, r3, #1
 800f194:	b2db      	uxtb	r3, r3
        ( activation == ACTIVATION_TYPE_ABP ) &&
 800f196:	2b00      	cmp	r3, #0
 800f198:	d001      	beq.n	800f19e <CheckForMinimumAbpDatarate+0x2e>
    {
        return true;
 800f19a:	2301      	movs	r3, #1
 800f19c:	e000      	b.n	800f1a0 <CheckForMinimumAbpDatarate+0x30>
    }
    return false;
 800f19e:	2300      	movs	r3, #0
}
 800f1a0:	4618      	mov	r0, r3
 800f1a2:	370c      	adds	r7, #12
 800f1a4:	46bd      	mov	sp, r7
 800f1a6:	bc80      	pop	{r7}
 800f1a8:	4770      	bx	lr
	...

0800f1ac <LoRaMacCheckForRxAbort>:
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
 800f1ac:	b480      	push	{r7}
 800f1ae:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800f1b0:	4b0d      	ldr	r3, [pc, #52]	@ (800f1e8 <LoRaMacCheckForRxAbort+0x3c>)
 800f1b2:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f1b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d00f      	beq.n	800f1de <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 800f1be:	4b0a      	ldr	r3, [pc, #40]	@ (800f1e8 <LoRaMacCheckForRxAbort+0x3c>)
 800f1c0:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f1c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f1c8:	4a07      	ldr	r2, [pc, #28]	@ (800f1e8 <LoRaMacCheckForRxAbort+0x3c>)
 800f1ca:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800f1ce:	4b06      	ldr	r3, [pc, #24]	@ (800f1e8 <LoRaMacCheckForRxAbort+0x3c>)
 800f1d0:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f1d4:	f023 0302 	bic.w	r3, r3, #2
 800f1d8:	4a03      	ldr	r2, [pc, #12]	@ (800f1e8 <LoRaMacCheckForRxAbort+0x3c>)
 800f1da:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
    }
}
 800f1de:	bf00      	nop
 800f1e0:	46bd      	mov	sp, r7
 800f1e2:	bc80      	pop	{r7}
 800f1e4:	4770      	bx	lr
 800f1e6:	bf00      	nop
 800f1e8:	200008f4 	.word	0x200008f4

0800f1ec <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 800f1ec:	b580      	push	{r7, lr}
 800f1ee:	b084      	sub	sp, #16
 800f1f0:	af00      	add	r7, sp, #0
 800f1f2:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 800f1f4:	2300      	movs	r3, #0
 800f1f6:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800f1f8:	2300      	movs	r3, #0
 800f1fa:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 800f1fc:	4b50      	ldr	r3, [pc, #320]	@ (800f340 <LoRaMacHandleNvm+0x154>)
 800f1fe:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f202:	2b00      	cmp	r3, #0
 800f204:	f040 8098 	bne.w	800f338 <LoRaMacHandleNvm+0x14c>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	2124      	movs	r1, #36	@ 0x24
 800f20c:	4618      	mov	r0, r3
 800f20e:	f007 ffdf 	bl	80171d0 <Crc32>
 800f212:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f218:	68ba      	ldr	r2, [r7, #8]
 800f21a:	429a      	cmp	r2, r3
 800f21c:	d006      	beq.n	800f22c <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	68ba      	ldr	r2, [r7, #8]
 800f222:	625a      	str	r2, [r3, #36]	@ 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 800f224:	89fb      	ldrh	r3, [r7, #14]
 800f226:	f043 0301 	orr.w	r3, r3, #1
 800f22a:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	3328      	adds	r3, #40	@ 0x28
 800f230:	2114      	movs	r1, #20
 800f232:	4618      	mov	r0, r3
 800f234:	f007 ffcc 	bl	80171d0 <Crc32>
 800f238:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f23e:	68ba      	ldr	r2, [r7, #8]
 800f240:	429a      	cmp	r2, r3
 800f242:	d006      	beq.n	800f252 <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	68ba      	ldr	r2, [r7, #8]
 800f248:	63da      	str	r2, [r3, #60]	@ 0x3c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 800f24a:	89fb      	ldrh	r3, [r7, #14]
 800f24c:	f043 0302 	orr.w	r3, r3, #2
 800f250:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	3340      	adds	r3, #64	@ 0x40
 800f256:	21e0      	movs	r1, #224	@ 0xe0
 800f258:	4618      	mov	r0, r3
 800f25a:	f007 ffb9 	bl	80171d0 <Crc32>
 800f25e:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800f266:	68ba      	ldr	r2, [r7, #8]
 800f268:	429a      	cmp	r2, r3
 800f26a:	d007      	beq.n	800f27c <LoRaMacHandleNvm+0x90>
    {
        nvmData->MacGroup2.Crc32 = crc;
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	68ba      	ldr	r2, [r7, #8]
 800f270:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 800f274:	89fb      	ldrh	r3, [r7, #14]
 800f276:	f043 0304 	orr.w	r3, r3, #4
 800f27a:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 800f282:	21bc      	movs	r1, #188	@ 0xbc
 800f284:	4618      	mov	r0, r3
 800f286:	f007 ffa3 	bl	80171d0 <Crc32>
 800f28a:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 800f292:	68ba      	ldr	r2, [r7, #8]
 800f294:	429a      	cmp	r2, r3
 800f296:	d007      	beq.n	800f2a8 <LoRaMacHandleNvm+0xbc>
    {
        nvmData->SecureElement.Crc32 = crc;
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	68ba      	ldr	r2, [r7, #8]
 800f29c:	f8c3 21e0 	str.w	r2, [r3, #480]	@ 0x1e0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 800f2a0:	89fb      	ldrh	r3, [r7, #14]
 800f2a2:	f043 0308 	orr.w	r3, r3, #8
 800f2a6:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800f2ae:	2100      	movs	r1, #0
 800f2b0:	4618      	mov	r0, r3
 800f2b2:	f007 ff8d 	bl	80171d0 <Crc32>
 800f2b6:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	f8d3 31e4 	ldr.w	r3, [r3, #484]	@ 0x1e4
 800f2be:	68ba      	ldr	r2, [r7, #8]
 800f2c0:	429a      	cmp	r2, r3
 800f2c2:	d007      	beq.n	800f2d4 <LoRaMacHandleNvm+0xe8>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	68ba      	ldr	r2, [r7, #8]
 800f2c8:	f8c3 21e4 	str.w	r2, [r3, #484]	@ 0x1e4
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 800f2cc:	89fb      	ldrh	r3, [r7, #14]
 800f2ce:	f043 0310 	orr.w	r3, r3, #16
 800f2d2:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800f2da:	f44f 715e 	mov.w	r1, #888	@ 0x378
 800f2de:	4618      	mov	r0, r3
 800f2e0:	f007 ff76 	bl	80171d0 <Crc32>
 800f2e4:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	f8d3 3560 	ldr.w	r3, [r3, #1376]	@ 0x560
 800f2ec:	68ba      	ldr	r2, [r7, #8]
 800f2ee:	429a      	cmp	r2, r3
 800f2f0:	d007      	beq.n	800f302 <LoRaMacHandleNvm+0x116>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	68ba      	ldr	r2, [r7, #8]
 800f2f6:	f8c3 2560 	str.w	r2, [r3, #1376]	@ 0x560
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 800f2fa:	89fb      	ldrh	r3, [r7, #14]
 800f2fc:	f043 0320 	orr.w	r3, r3, #32
 800f300:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	f203 5364 	addw	r3, r3, #1380	@ 0x564
 800f308:	2114      	movs	r1, #20
 800f30a:	4618      	mov	r0, r3
 800f30c:	f007 ff60 	bl	80171d0 <Crc32>
 800f310:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	f8d3 3578 	ldr.w	r3, [r3, #1400]	@ 0x578
 800f318:	68ba      	ldr	r2, [r7, #8]
 800f31a:	429a      	cmp	r2, r3
 800f31c:	d007      	beq.n	800f32e <LoRaMacHandleNvm+0x142>
    {
        nvmData->ClassB.Crc32 = crc;
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	68ba      	ldr	r2, [r7, #8]
 800f322:	f8c3 2578 	str.w	r2, [r3, #1400]	@ 0x578
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 800f326:	89fb      	ldrh	r3, [r7, #14]
 800f328:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f32c:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 800f32e:	89fb      	ldrh	r3, [r7, #14]
 800f330:	4618      	mov	r0, r3
 800f332:	f002 f819 	bl	8011368 <CallNvmDataChangeCallback>
 800f336:	e000      	b.n	800f33a <LoRaMacHandleNvm+0x14e>
        return;
 800f338:	bf00      	nop
}
 800f33a:	3710      	adds	r7, #16
 800f33c:	46bd      	mov	sp, r7
 800f33e:	bd80      	pop	{r7, pc}
 800f340:	200008f4 	.word	0x200008f4

0800f344 <LoRaMacHandleResponseTimeout>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool LoRaMacHandleResponseTimeout( TimerTime_t timeoutInMs, TimerTime_t startTimeInMs )
{
 800f344:	b580      	push	{r7, lr}
 800f346:	b084      	sub	sp, #16
 800f348:	af00      	add	r7, sp, #0
 800f34a:	6078      	str	r0, [r7, #4]
 800f34c:	6039      	str	r1, [r7, #0]
    if( startTimeInMs != 0 )
 800f34e:	683b      	ldr	r3, [r7, #0]
 800f350:	2b00      	cmp	r3, #0
 800f352:	d00d      	beq.n	800f370 <LoRaMacHandleResponseTimeout+0x2c>
    {
        TimerTime_t elapsedTime = TimerGetElapsedTime( startTimeInMs );
 800f354:	6838      	ldr	r0, [r7, #0]
 800f356:	f00c f95f 	bl	801b618 <UTIL_TIMER_GetElapsedTime>
 800f35a:	60f8      	str	r0, [r7, #12]
        if( elapsedTime > timeoutInMs )
 800f35c:	68fa      	ldr	r2, [r7, #12]
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	429a      	cmp	r2, r3
 800f362:	d905      	bls.n	800f370 <LoRaMacHandleResponseTimeout+0x2c>
        {
            Nvm.MacGroup1.SrvAckRequested = false;
 800f364:	4b05      	ldr	r3, [pc, #20]	@ (800f37c <LoRaMacHandleResponseTimeout+0x38>)
 800f366:	2200      	movs	r2, #0
 800f368:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
            return true;
 800f36c:	2301      	movs	r3, #1
 800f36e:	e000      	b.n	800f372 <LoRaMacHandleResponseTimeout+0x2e>
        }
    }
    return false;
 800f370:	2300      	movs	r3, #0
}
 800f372:	4618      	mov	r0, r3
 800f374:	3710      	adds	r7, #16
 800f376:	46bd      	mov	sp, r7
 800f378:	bd80      	pop	{r7, pc}
 800f37a:	bf00      	nop
 800f37c:	20000e14 	.word	0x20000e14

0800f380 <LoRaMacProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacProcess( void )
{
 800f380:	b580      	push	{r7, lr}
 800f382:	b082      	sub	sp, #8
 800f384:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 800f386:	2300      	movs	r3, #0
 800f388:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 800f38a:	f7ff fd11 	bl	800edb0 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800f38e:	f003 fd90 	bl	8012eb2 <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800f392:	4b26      	ldr	r3, [pc, #152]	@ (800f42c <LoRaMacProcess+0xac>)
 800f394:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800f398:	f003 0320 	and.w	r3, r3, #32
 800f39c:	b2db      	uxtb	r3, r3
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d025      	beq.n	800f3ee <LoRaMacProcess+0x6e>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800f3a2:	2000      	movs	r0, #0
 800f3a4:	f7ff fd6c 	bl	800ee80 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800f3a8:	f7ff ff00 	bl	800f1ac <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 800f3ac:	f001 fffa 	bl	80113a4 <IsRequestPending>
 800f3b0:	4603      	mov	r3, r0
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d006      	beq.n	800f3c4 <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800f3b6:	f7ff feb3 	bl	800f120 <LoRaMacCheckForBeaconAcquisition>
 800f3ba:	4603      	mov	r3, r0
 800f3bc:	461a      	mov	r2, r3
 800f3be:	79fb      	ldrb	r3, [r7, #7]
 800f3c0:	4313      	orrs	r3, r2
 800f3c2:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 800f3c4:	79fb      	ldrb	r3, [r7, #7]
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d103      	bne.n	800f3d2 <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 800f3ca:	f7ff fe73 	bl	800f0b4 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 800f3ce:	f7ff fe15 	bl	800effc <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 800f3d2:	f7ff fd65 	bl	800eea0 <LoRaMacHandleRequestEvents>
        LoRaMacHandleScheduleUplinkEvent( );
 800f3d6:	f7ff fdc5 	bl	800ef64 <LoRaMacHandleScheduleUplinkEvent>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800f3da:	2001      	movs	r0, #1
 800f3dc:	f7ff fd50 	bl	800ee80 <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800f3e0:	4a12      	ldr	r2, [pc, #72]	@ (800f42c <LoRaMacProcess+0xac>)
 800f3e2:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800f3e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f3ea:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
    }
    LoRaMacHandleIndicationEvents( );
 800f3ee:	f7ff fdcd 	bl	800ef8c <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800f3f2:	4b0e      	ldr	r3, [pc, #56]	@ (800f42c <LoRaMacProcess+0xac>)
 800f3f4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800f3f8:	2b02      	cmp	r3, #2
 800f3fa:	d101      	bne.n	800f400 <LoRaMacProcess+0x80>
    {
        OpenContinuousRxCWindow( );
 800f3fc:	f001 fbee 	bl	8010bdc <OpenContinuousRxCWindow>
    }
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 800f400:	4b0a      	ldr	r3, [pc, #40]	@ (800f42c <LoRaMacProcess+0xac>)
 800f402:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800f406:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f40a:	b2db      	uxtb	r3, r3
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d009      	beq.n	800f424 <LoRaMacProcess+0xa4>
    {
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 800f410:	4a06      	ldr	r2, [pc, #24]	@ (800f42c <LoRaMacProcess+0xac>)
 800f412:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800f416:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f41a:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
        LoRaMacHandleNvm( &Nvm );
 800f41e:	4804      	ldr	r0, [pc, #16]	@ (800f430 <LoRaMacProcess+0xb0>)
 800f420:	f7ff fee4 	bl	800f1ec <LoRaMacHandleNvm>
    }
}
 800f424:	bf00      	nop
 800f426:	3708      	adds	r7, #8
 800f428:	46bd      	mov	sp, r7
 800f42a:	bd80      	pop	{r7, pc}
 800f42c:	200008f4 	.word	0x200008f4
 800f430:	20000e14 	.word	0x20000e14

0800f434 <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 800f434:	b580      	push	{r7, lr}
 800f436:	b082      	sub	sp, #8
 800f438:	af00      	add	r7, sp, #0
 800f43a:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 800f43c:	481e      	ldr	r0, [pc, #120]	@ (800f4b8 <OnTxDelayedTimerEvent+0x84>)
 800f43e:	f00b ffbf 	bl	801b3c0 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800f442:	4b1e      	ldr	r3, [pc, #120]	@ (800f4bc <OnTxDelayedTimerEvent+0x88>)
 800f444:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f448:	f023 0320 	bic.w	r3, r3, #32
 800f44c:	4a1b      	ldr	r2, [pc, #108]	@ (800f4bc <OnTxDelayedTimerEvent+0x88>)
 800f44e:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 800f452:	4b1b      	ldr	r3, [pc, #108]	@ (800f4c0 <OnTxDelayedTimerEvent+0x8c>)
 800f454:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f458:	4a18      	ldr	r2, [pc, #96]	@ (800f4bc <OnTxDelayedTimerEvent+0x88>)
 800f45a:	f8d2 249c 	ldr.w	r2, [r2, #1180]	@ 0x49c
 800f45e:	4611      	mov	r1, r2
 800f460:	4618      	mov	r0, r3
 800f462:	f7ff ff6f 	bl	800f344 <LoRaMacHandleResponseTimeout>
 800f466:	4603      	mov	r3, r0
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d11e      	bne.n	800f4aa <OnTxDelayedTimerEvent+0x76>
        return;
    }
#endif /* LORAMAC_VERSION */

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 800f46c:	2001      	movs	r0, #1
 800f46e:	f001 f93b 	bl	80106e8 <ScheduleTx>
 800f472:	4603      	mov	r3, r0
 800f474:	2b00      	cmp	r3, #0
 800f476:	d01a      	beq.n	800f4ae <OnTxDelayedTimerEvent+0x7a>
 800f478:	2b0b      	cmp	r3, #11
 800f47a:	d018      	beq.n	800f4ae <OnTxDelayedTimerEvent+0x7a>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800f47c:	4b10      	ldr	r3, [pc, #64]	@ (800f4c0 <OnTxDelayedTimerEvent+0x8c>)
 800f47e:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800f482:	b2da      	uxtb	r2, r3
 800f484:	4b0d      	ldr	r3, [pc, #52]	@ (800f4bc <OnTxDelayedTimerEvent+0x88>)
 800f486:	f883 2446 	strb.w	r2, [r3, #1094]	@ 0x446
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 800f48a:	4b0c      	ldr	r3, [pc, #48]	@ (800f4bc <OnTxDelayedTimerEvent+0x88>)
 800f48c:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 800f490:	4b0a      	ldr	r3, [pc, #40]	@ (800f4bc <OnTxDelayedTimerEvent+0x88>)
 800f492:	f883 2449 	strb.w	r2, [r3, #1097]	@ 0x449
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800f496:	4b09      	ldr	r3, [pc, #36]	@ (800f4bc <OnTxDelayedTimerEvent+0x88>)
 800f498:	2209      	movs	r2, #9
 800f49a:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800f49e:	2009      	movs	r0, #9
 800f4a0:	f004 f926 	bl	80136f0 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800f4a4:	f001 ff24 	bl	80112f0 <StopRetransmission>
            break;
 800f4a8:	e002      	b.n	800f4b0 <OnTxDelayedTimerEvent+0x7c>
        return;
 800f4aa:	bf00      	nop
 800f4ac:	e000      	b.n	800f4b0 <OnTxDelayedTimerEvent+0x7c>
            break;
 800f4ae:	bf00      	nop
        }
    }
}
 800f4b0:	3708      	adds	r7, #8
 800f4b2:	46bd      	mov	sp, r7
 800f4b4:	bd80      	pop	{r7, pc}
 800f4b6:	bf00      	nop
 800f4b8:	20000c5c 	.word	0x20000c5c
 800f4bc:	200008f4 	.word	0x200008f4
 800f4c0:	20000e14 	.word	0x20000e14

0800f4c4 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 800f4c4:	b580      	push	{r7, lr}
 800f4c6:	b082      	sub	sp, #8
 800f4c8:	af00      	add	r7, sp, #0
 800f4ca:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800f4cc:	4b17      	ldr	r3, [pc, #92]	@ (800f52c <OnRxWindow1TimerEvent+0x68>)
 800f4ce:	f893 241f 	ldrb.w	r2, [r3, #1055]	@ 0x41f
 800f4d2:	4b16      	ldr	r3, [pc, #88]	@ (800f52c <OnRxWindow1TimerEvent+0x68>)
 800f4d4:	f883 23b8 	strb.w	r2, [r3, #952]	@ 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 800f4d8:	4b15      	ldr	r3, [pc, #84]	@ (800f530 <OnRxWindow1TimerEvent+0x6c>)
 800f4da:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 800f4de:	b25a      	sxtb	r2, r3
 800f4e0:	4b12      	ldr	r3, [pc, #72]	@ (800f52c <OnRxWindow1TimerEvent+0x68>)
 800f4e2:	f883 23bb 	strb.w	r2, [r3, #955]	@ 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800f4e6:	4b12      	ldr	r3, [pc, #72]	@ (800f530 <OnRxWindow1TimerEvent+0x6c>)
 800f4e8:	f893 2075 	ldrb.w	r2, [r3, #117]	@ 0x75
 800f4ec:	4b0f      	ldr	r3, [pc, #60]	@ (800f52c <OnRxWindow1TimerEvent+0x68>)
 800f4ee:	f883 23c8 	strb.w	r2, [r3, #968]	@ 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800f4f2:	4b0f      	ldr	r3, [pc, #60]	@ (800f530 <OnRxWindow1TimerEvent+0x6c>)
 800f4f4:	f893 2080 	ldrb.w	r2, [r3, #128]	@ 0x80
 800f4f8:	4b0c      	ldr	r3, [pc, #48]	@ (800f52c <OnRxWindow1TimerEvent+0x68>)
 800f4fa:	f883 23c9 	strb.w	r2, [r3, #969]	@ 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 800f4fe:	4b0b      	ldr	r3, [pc, #44]	@ (800f52c <OnRxWindow1TimerEvent+0x68>)
 800f500:	2200      	movs	r2, #0
 800f502:	f883 23ca 	strb.w	r2, [r3, #970]	@ 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 800f506:	4b09      	ldr	r3, [pc, #36]	@ (800f52c <OnRxWindow1TimerEvent+0x68>)
 800f508:	2200      	movs	r2, #0
 800f50a:	f883 23cb 	strb.w	r2, [r3, #971]	@ 0x3cb
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800f50e:	4b08      	ldr	r3, [pc, #32]	@ (800f530 <OnRxWindow1TimerEvent+0x6c>)
 800f510:	f893 211c 	ldrb.w	r2, [r3, #284]	@ 0x11c
 800f514:	4b05      	ldr	r3, [pc, #20]	@ (800f52c <OnRxWindow1TimerEvent+0x68>)
 800f516:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800f51a:	4906      	ldr	r1, [pc, #24]	@ (800f534 <OnRxWindow1TimerEvent+0x70>)
 800f51c:	4806      	ldr	r0, [pc, #24]	@ (800f538 <OnRxWindow1TimerEvent+0x74>)
 800f51e:	f001 fb29 	bl	8010b74 <RxWindowSetup>
}
 800f522:	bf00      	nop
 800f524:	3708      	adds	r7, #8
 800f526:	46bd      	mov	sp, r7
 800f528:	bd80      	pop	{r7, pc}
 800f52a:	bf00      	nop
 800f52c:	200008f4 	.word	0x200008f4
 800f530:	20000e14 	.word	0x20000e14
 800f534:	20000cac 	.word	0x20000cac
 800f538:	20000c74 	.word	0x20000c74

0800f53c <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 800f53c:	b580      	push	{r7, lr}
 800f53e:	b082      	sub	sp, #8
 800f540:	af00      	add	r7, sp, #0
 800f542:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800f544:	4b19      	ldr	r3, [pc, #100]	@ (800f5ac <OnRxWindow2TimerEvent+0x70>)
 800f546:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d029      	beq.n	800f5a2 <OnRxWindow2TimerEvent+0x66>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800f54e:	4b17      	ldr	r3, [pc, #92]	@ (800f5ac <OnRxWindow2TimerEvent+0x70>)
 800f550:	f893 241f 	ldrb.w	r2, [r3, #1055]	@ 0x41f
 800f554:	4b15      	ldr	r3, [pc, #84]	@ (800f5ac <OnRxWindow2TimerEvent+0x70>)
 800f556:	f883 23d0 	strb.w	r2, [r3, #976]	@ 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800f55a:	4b15      	ldr	r3, [pc, #84]	@ (800f5b0 <OnRxWindow2TimerEvent+0x74>)
 800f55c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f55e:	4a13      	ldr	r2, [pc, #76]	@ (800f5ac <OnRxWindow2TimerEvent+0x70>)
 800f560:	f8c2 33d4 	str.w	r3, [r2, #980]	@ 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800f564:	4b12      	ldr	r3, [pc, #72]	@ (800f5b0 <OnRxWindow2TimerEvent+0x74>)
 800f566:	f893 2075 	ldrb.w	r2, [r3, #117]	@ 0x75
 800f56a:	4b10      	ldr	r3, [pc, #64]	@ (800f5ac <OnRxWindow2TimerEvent+0x70>)
 800f56c:	f883 23e0 	strb.w	r2, [r3, #992]	@ 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800f570:	4b0f      	ldr	r3, [pc, #60]	@ (800f5b0 <OnRxWindow2TimerEvent+0x74>)
 800f572:	f893 2080 	ldrb.w	r2, [r3, #128]	@ 0x80
 800f576:	4b0d      	ldr	r3, [pc, #52]	@ (800f5ac <OnRxWindow2TimerEvent+0x70>)
 800f578:	f883 23e1 	strb.w	r2, [r3, #993]	@ 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 800f57c:	4b0b      	ldr	r3, [pc, #44]	@ (800f5ac <OnRxWindow2TimerEvent+0x70>)
 800f57e:	2200      	movs	r2, #0
 800f580:	f883 23e2 	strb.w	r2, [r3, #994]	@ 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800f584:	4b09      	ldr	r3, [pc, #36]	@ (800f5ac <OnRxWindow2TimerEvent+0x70>)
 800f586:	2201      	movs	r2, #1
 800f588:	f883 23e3 	strb.w	r2, [r3, #995]	@ 0x3e3
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800f58c:	4b08      	ldr	r3, [pc, #32]	@ (800f5b0 <OnRxWindow2TimerEvent+0x74>)
 800f58e:	f893 211c 	ldrb.w	r2, [r3, #284]	@ 0x11c
 800f592:	4b06      	ldr	r3, [pc, #24]	@ (800f5ac <OnRxWindow2TimerEvent+0x70>)
 800f594:	f883 23e4 	strb.w	r2, [r3, #996]	@ 0x3e4
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800f598:	4906      	ldr	r1, [pc, #24]	@ (800f5b4 <OnRxWindow2TimerEvent+0x78>)
 800f59a:	4807      	ldr	r0, [pc, #28]	@ (800f5b8 <OnRxWindow2TimerEvent+0x7c>)
 800f59c:	f001 faea 	bl	8010b74 <RxWindowSetup>
 800f5a0:	e000      	b.n	800f5a4 <OnRxWindow2TimerEvent+0x68>
        return;
 800f5a2:	bf00      	nop
}
 800f5a4:	3708      	adds	r7, #8
 800f5a6:	46bd      	mov	sp, r7
 800f5a8:	bd80      	pop	{r7, pc}
 800f5aa:	bf00      	nop
 800f5ac:	200008f4 	.word	0x200008f4
 800f5b0:	20000e14 	.word	0x20000e14
 800f5b4:	20000cc4 	.word	0x20000cc4
 800f5b8:	20000c8c 	.word	0x20000c8c

0800f5bc <OnRetransmitTimeoutTimerEvent>:

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
}
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static void OnRetransmitTimeoutTimerEvent( void* context )
{
 800f5bc:	b580      	push	{r7, lr}
 800f5be:	b082      	sub	sp, #8
 800f5c0:	af00      	add	r7, sp, #0
 800f5c2:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 800f5c4:	480f      	ldr	r0, [pc, #60]	@ (800f604 <OnRetransmitTimeoutTimerEvent+0x48>)
 800f5c6:	f00b fefb 	bl	801b3c0 <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 800f5ca:	4b0f      	ldr	r3, [pc, #60]	@ (800f608 <OnRetransmitTimeoutTimerEvent+0x4c>)
 800f5cc:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d003      	beq.n	800f5dc <OnRetransmitTimeoutTimerEvent+0x20>
    {
        MacCtx.RetransmitTimeoutRetry = true;
 800f5d4:	4b0c      	ldr	r3, [pc, #48]	@ (800f608 <OnRetransmitTimeoutTimerEvent+0x4c>)
 800f5d6:	2201      	movs	r2, #1
 800f5d8:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
    }
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800f5dc:	4b0a      	ldr	r3, [pc, #40]	@ (800f608 <OnRetransmitTimeoutTimerEvent+0x4c>)
 800f5de:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d00a      	beq.n	800f5fc <OnRetransmitTimeoutTimerEvent+0x40>
 800f5e6:	4b08      	ldr	r3, [pc, #32]	@ (800f608 <OnRetransmitTimeoutTimerEvent+0x4c>)
 800f5e8:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800f5ec:	691b      	ldr	r3, [r3, #16]
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d004      	beq.n	800f5fc <OnRetransmitTimeoutTimerEvent+0x40>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800f5f2:	4b05      	ldr	r3, [pc, #20]	@ (800f608 <OnRetransmitTimeoutTimerEvent+0x4c>)
 800f5f4:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800f5f8:	691b      	ldr	r3, [r3, #16]
 800f5fa:	4798      	blx	r3
    }
}
 800f5fc:	bf00      	nop
 800f5fe:	3708      	adds	r7, #8
 800f600:	46bd      	mov	sp, r7
 800f602:	bd80      	pop	{r7, pc}
 800f604:	20000cf8 	.word	0x20000cf8
 800f608:	200008f4 	.word	0x200008f4

0800f60c <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 800f60c:	b580      	push	{r7, lr}
 800f60e:	b084      	sub	sp, #16
 800f610:	af00      	add	r7, sp, #0
 800f612:	60ba      	str	r2, [r7, #8]
 800f614:	607b      	str	r3, [r7, #4]
 800f616:	4603      	mov	r3, r0
 800f618:	73fb      	strb	r3, [r7, #15]
 800f61a:	460b      	mov	r3, r1
 800f61c:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 800f61e:	68bb      	ldr	r3, [r7, #8]
 800f620:	2b00      	cmp	r3, #0
 800f622:	d005      	beq.n	800f630 <GetFCntDown+0x24>
 800f624:	69bb      	ldr	r3, [r7, #24]
 800f626:	2b00      	cmp	r3, #0
 800f628:	d002      	beq.n	800f630 <GetFCntDown+0x24>
 800f62a:	69fb      	ldr	r3, [r7, #28]
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d101      	bne.n	800f634 <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800f630:	2309      	movs	r3, #9
 800f632:	e028      	b.n	800f686 <GetFCntDown+0x7a>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 800f634:	7bfb      	ldrb	r3, [r7, #15]
 800f636:	2b00      	cmp	r3, #0
 800f638:	d016      	beq.n	800f668 <GetFCntDown+0x5c>
 800f63a:	2b01      	cmp	r3, #1
 800f63c:	d118      	bne.n	800f670 <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 800f63e:	79bb      	ldrb	r3, [r7, #6]
 800f640:	2b01      	cmp	r3, #1
 800f642:	d10d      	bne.n	800f660 <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 800f644:	7bbb      	ldrb	r3, [r7, #14]
 800f646:	2b00      	cmp	r3, #0
 800f648:	d002      	beq.n	800f650 <GetFCntDown+0x44>
 800f64a:	7bbb      	ldrb	r3, [r7, #14]
 800f64c:	2b03      	cmp	r3, #3
 800f64e:	d103      	bne.n	800f658 <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 800f650:	69bb      	ldr	r3, [r7, #24]
 800f652:	2202      	movs	r2, #2
 800f654:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 800f656:	e00d      	b.n	800f674 <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 800f658:	69bb      	ldr	r3, [r7, #24]
 800f65a:	2201      	movs	r2, #1
 800f65c:	701a      	strb	r2, [r3, #0]
            break;
 800f65e:	e009      	b.n	800f674 <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 800f660:	69bb      	ldr	r3, [r7, #24]
 800f662:	2203      	movs	r2, #3
 800f664:	701a      	strb	r2, [r3, #0]
            break;
 800f666:	e005      	b.n	800f674 <GetFCntDown+0x68>
        /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 800f668:	69bb      	ldr	r3, [r7, #24]
 800f66a:	2204      	movs	r2, #4
 800f66c:	701a      	strb	r2, [r3, #0]
            break;
 800f66e:	e001      	b.n	800f674 <GetFCntDown+0x68>
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        /* ST_WORKAROUND_END */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 800f670:	2305      	movs	r3, #5
 800f672:	e008      	b.n	800f686 <GetFCntDown+0x7a>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
 800f674:	69bb      	ldr	r3, [r7, #24]
 800f676:	7818      	ldrb	r0, [r3, #0]
 800f678:	68bb      	ldr	r3, [r7, #8]
 800f67a:	89db      	ldrh	r3, [r3, #14]
 800f67c:	69fa      	ldr	r2, [r7, #28]
 800f67e:	4619      	mov	r1, r3
 800f680:	f004 fc5c 	bl	8013f3c <LoRaMacCryptoGetFCntDown>
 800f684:	4603      	mov	r3, r0
}
 800f686:	4618      	mov	r0, r3
 800f688:	3710      	adds	r7, #16
 800f68a:	46bd      	mov	sp, r7
 800f68c:	bd80      	pop	{r7, pc}
	...

0800f690 <SwitchClass>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 800f690:	b5b0      	push	{r4, r5, r7, lr}
 800f692:	b084      	sub	sp, #16
 800f694:	af00      	add	r7, sp, #0
 800f696:	4603      	mov	r3, r0
 800f698:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f69a:	2303      	movs	r3, #3
 800f69c:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 800f69e:	4b62      	ldr	r3, [pc, #392]	@ (800f828 <SwitchClass+0x198>)
 800f6a0:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800f6a4:	2b02      	cmp	r3, #2
 800f6a6:	f000 80a7 	beq.w	800f7f8 <SwitchClass+0x168>
 800f6aa:	2b02      	cmp	r3, #2
 800f6ac:	f300 80b6 	bgt.w	800f81c <SwitchClass+0x18c>
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d003      	beq.n	800f6bc <SwitchClass+0x2c>
 800f6b4:	2b01      	cmp	r3, #1
 800f6b6:	f000 8091 	beq.w	800f7dc <SwitchClass+0x14c>
 800f6ba:	e0af      	b.n	800f81c <SwitchClass+0x18c>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 800f6bc:	79fb      	ldrb	r3, [r7, #7]
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d107      	bne.n	800f6d2 <SwitchClass+0x42>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800f6c2:	4b59      	ldr	r3, [pc, #356]	@ (800f828 <SwitchClass+0x198>)
 800f6c4:	4a58      	ldr	r2, [pc, #352]	@ (800f828 <SwitchClass+0x198>)
 800f6c6:	336c      	adds	r3, #108	@ 0x6c
 800f6c8:	3264      	adds	r2, #100	@ 0x64
 800f6ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f6ce:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            if( deviceClass == CLASS_B )
 800f6d2:	79fb      	ldrb	r3, [r7, #7]
 800f6d4:	2b01      	cmp	r3, #1
 800f6d6:	d10c      	bne.n	800f6f2 <SwitchClass+0x62>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 800f6d8:	79fb      	ldrb	r3, [r7, #7]
 800f6da:	4618      	mov	r0, r3
 800f6dc:	f003 fb80 	bl	8012de0 <LoRaMacClassBSwitchClass>
 800f6e0:	4603      	mov	r3, r0
 800f6e2:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 800f6e4:	7bfb      	ldrb	r3, [r7, #15]
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d103      	bne.n	800f6f2 <SwitchClass+0x62>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 800f6ea:	4a4f      	ldr	r2, [pc, #316]	@ (800f828 <SwitchClass+0x198>)
 800f6ec:	79fb      	ldrb	r3, [r7, #7]
 800f6ee:	f882 3104 	strb.w	r3, [r2, #260]	@ 0x104
                }
            }

            if( deviceClass == CLASS_C )
 800f6f2:	79fb      	ldrb	r3, [r7, #7]
 800f6f4:	2b02      	cmp	r3, #2
 800f6f6:	f040 808c 	bne.w	800f812 <SwitchClass+0x182>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800f6fa:	4a4b      	ldr	r2, [pc, #300]	@ (800f828 <SwitchClass+0x198>)
 800f6fc:	79fb      	ldrb	r3, [r7, #7]
 800f6fe:	f882 3104 	strb.w	r3, [r2, #260]	@ 0x104

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800f702:	4a4a      	ldr	r2, [pc, #296]	@ (800f82c <SwitchClass+0x19c>)
 800f704:	4b49      	ldr	r3, [pc, #292]	@ (800f82c <SwitchClass+0x19c>)
 800f706:	f502 747a 	add.w	r4, r2, #1000	@ 0x3e8
 800f70a:	f503 7574 	add.w	r5, r3, #976	@ 0x3d0
 800f70e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f710:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f712:	e895 0003 	ldmia.w	r5, {r0, r1}
 800f716:	e884 0003 	stmia.w	r4, {r0, r1}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800f71a:	4b44      	ldr	r3, [pc, #272]	@ (800f82c <SwitchClass+0x19c>)
 800f71c:	2202      	movs	r2, #2
 800f71e:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800f722:	2300      	movs	r3, #0
 800f724:	73bb      	strb	r3, [r7, #14]
 800f726:	e049      	b.n	800f7bc <SwitchClass+0x12c>
                {
                    if( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true )
 800f728:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f72c:	4a3e      	ldr	r2, [pc, #248]	@ (800f828 <SwitchClass+0x198>)
 800f72e:	212c      	movs	r1, #44	@ 0x2c
 800f730:	fb01 f303 	mul.w	r3, r1, r3
 800f734:	4413      	add	r3, r2
 800f736:	33da      	adds	r3, #218	@ 0xda
 800f738:	781b      	ldrb	r3, [r3, #0]
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d038      	beq.n	800f7b0 <SwitchClass+0x120>
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 800f73e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f742:	4a39      	ldr	r2, [pc, #228]	@ (800f828 <SwitchClass+0x198>)
 800f744:	212c      	movs	r1, #44	@ 0x2c
 800f746:	fb01 f303 	mul.w	r3, r1, r3
 800f74a:	4413      	add	r3, r2
 800f74c:	33f0      	adds	r3, #240	@ 0xf0
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	4a35      	ldr	r2, [pc, #212]	@ (800f828 <SwitchClass+0x198>)
 800f752:	66d3      	str	r3, [r2, #108]	@ 0x6c
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 800f754:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f758:	4a33      	ldr	r2, [pc, #204]	@ (800f828 <SwitchClass+0x198>)
 800f75a:	212c      	movs	r1, #44	@ 0x2c
 800f75c:	fb01 f303 	mul.w	r3, r1, r3
 800f760:	4413      	add	r3, r2
 800f762:	33f4      	adds	r3, #244	@ 0xf4
 800f764:	f993 3000 	ldrsb.w	r3, [r3]
 800f768:	b2da      	uxtb	r2, r3
 800f76a:	4b2f      	ldr	r3, [pc, #188]	@ (800f828 <SwitchClass+0x198>)
 800f76c:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800f770:	4b2e      	ldr	r3, [pc, #184]	@ (800f82c <SwitchClass+0x19c>)
 800f772:	f893 241f 	ldrb.w	r2, [r3, #1055]	@ 0x41f
 800f776:	4b2d      	ldr	r3, [pc, #180]	@ (800f82c <SwitchClass+0x19c>)
 800f778:	f883 23e8 	strb.w	r2, [r3, #1000]	@ 0x3e8
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800f77c:	4b2a      	ldr	r3, [pc, #168]	@ (800f828 <SwitchClass+0x198>)
 800f77e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f780:	4a2a      	ldr	r2, [pc, #168]	@ (800f82c <SwitchClass+0x19c>)
 800f782:	f8c2 33ec 	str.w	r3, [r2, #1004]	@ 0x3ec
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800f786:	4b28      	ldr	r3, [pc, #160]	@ (800f828 <SwitchClass+0x198>)
 800f788:	f893 2075 	ldrb.w	r2, [r3, #117]	@ 0x75
 800f78c:	4b27      	ldr	r3, [pc, #156]	@ (800f82c <SwitchClass+0x19c>)
 800f78e:	f883 23f8 	strb.w	r2, [r3, #1016]	@ 0x3f8
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800f792:	4b25      	ldr	r3, [pc, #148]	@ (800f828 <SwitchClass+0x198>)
 800f794:	f893 2080 	ldrb.w	r2, [r3, #128]	@ 0x80
 800f798:	4b24      	ldr	r3, [pc, #144]	@ (800f82c <SwitchClass+0x19c>)
 800f79a:	f883 23f9 	strb.w	r2, [r3, #1017]	@ 0x3f9
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800f79e:	4b23      	ldr	r3, [pc, #140]	@ (800f82c <SwitchClass+0x19c>)
 800f7a0:	2203      	movs	r2, #3
 800f7a2:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800f7a6:	4b21      	ldr	r3, [pc, #132]	@ (800f82c <SwitchClass+0x19c>)
 800f7a8:	2201      	movs	r2, #1
 800f7aa:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa
                        break;
 800f7ae:	e009      	b.n	800f7c4 <SwitchClass+0x134>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800f7b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f7b4:	b2db      	uxtb	r3, r3
 800f7b6:	3301      	adds	r3, #1
 800f7b8:	b2db      	uxtb	r3, r3
 800f7ba:	73bb      	strb	r3, [r7, #14]
 800f7bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	ddb1      	ble.n	800f728 <SwitchClass+0x98>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 800f7c4:	4b19      	ldr	r3, [pc, #100]	@ (800f82c <SwitchClass+0x19c>)
 800f7c6:	2200      	movs	r2, #0
 800f7c8:	f883 241e 	strb.w	r2, [r3, #1054]	@ 0x41e
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 800f7cc:	4b18      	ldr	r3, [pc, #96]	@ (800f830 <SwitchClass+0x1a0>)
 800f7ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f7d0:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 800f7d2:	f001 fa03 	bl	8010bdc <OpenContinuousRxCWindow>

                status = LORAMAC_STATUS_OK;
 800f7d6:	2300      	movs	r3, #0
 800f7d8:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800f7da:	e01a      	b.n	800f812 <SwitchClass+0x182>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 800f7dc:	79fb      	ldrb	r3, [r7, #7]
 800f7de:	4618      	mov	r0, r3
 800f7e0:	f003 fafe 	bl	8012de0 <LoRaMacClassBSwitchClass>
 800f7e4:	4603      	mov	r3, r0
 800f7e6:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 800f7e8:	7bfb      	ldrb	r3, [r7, #15]
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d113      	bne.n	800f816 <SwitchClass+0x186>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800f7ee:	4a0e      	ldr	r2, [pc, #56]	@ (800f828 <SwitchClass+0x198>)
 800f7f0:	79fb      	ldrb	r3, [r7, #7]
 800f7f2:	f882 3104 	strb.w	r3, [r2, #260]	@ 0x104
            }
            break;
 800f7f6:	e00e      	b.n	800f816 <SwitchClass+0x186>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 800f7f8:	79fb      	ldrb	r3, [r7, #7]
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d10d      	bne.n	800f81a <SwitchClass+0x18a>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800f7fe:	4a0a      	ldr	r2, [pc, #40]	@ (800f828 <SwitchClass+0x198>)
 800f800:	79fb      	ldrb	r3, [r7, #7]
 800f802:	f882 3104 	strb.w	r3, [r2, #260]	@ 0x104

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 800f806:	4b0a      	ldr	r3, [pc, #40]	@ (800f830 <SwitchClass+0x1a0>)
 800f808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f80a:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 800f80c:	2300      	movs	r3, #0
 800f80e:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800f810:	e003      	b.n	800f81a <SwitchClass+0x18a>
            break;
 800f812:	bf00      	nop
 800f814:	e002      	b.n	800f81c <SwitchClass+0x18c>
            break;
 800f816:	bf00      	nop
 800f818:	e000      	b.n	800f81c <SwitchClass+0x18c>
            break;
 800f81a:	bf00      	nop
        }
    }

    return status;
 800f81c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f81e:	4618      	mov	r0, r3
 800f820:	3710      	adds	r7, #16
 800f822:	46bd      	mov	sp, r7
 800f824:	bdb0      	pop	{r4, r5, r7, pc}
 800f826:	bf00      	nop
 800f828:	20000e14 	.word	0x20000e14
 800f82c:	200008f4 	.word	0x200008f4
 800f830:	0801f68c 	.word	0x0801f68c

0800f834 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 800f834:	b580      	push	{r7, lr}
 800f836:	b086      	sub	sp, #24
 800f838:	af00      	add	r7, sp, #0
 800f83a:	4603      	mov	r3, r0
 800f83c:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800f83e:	4b10      	ldr	r3, [pc, #64]	@ (800f880 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800f840:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800f844:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 800f846:	79fb      	ldrb	r3, [r7, #7]
 800f848:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 800f84a:	230d      	movs	r3, #13
 800f84c:	743b      	strb	r3, [r7, #16]
    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800f84e:	4b0c      	ldr	r3, [pc, #48]	@ (800f880 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800f850:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800f854:	2b00      	cmp	r3, #0
 800f856:	d001      	beq.n	800f85c <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800f858:	230e      	movs	r3, #14
 800f85a:	743b      	strb	r3, [r7, #16]
    }
    /* ST_WORKAROUND_END */
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800f85c:	4b08      	ldr	r3, [pc, #32]	@ (800f880 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800f85e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f862:	f107 0210 	add.w	r2, r7, #16
 800f866:	4611      	mov	r1, r2
 800f868:	4618      	mov	r0, r3
 800f86a:	f005 f9bb 	bl	8014be4 <RegionGetPhyParam>
 800f86e:	4603      	mov	r3, r0
 800f870:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 800f872:	68fb      	ldr	r3, [r7, #12]
 800f874:	b2db      	uxtb	r3, r3
}
 800f876:	4618      	mov	r0, r3
 800f878:	3718      	adds	r7, #24
 800f87a:	46bd      	mov	sp, r7
 800f87c:	bd80      	pop	{r7, pc}
 800f87e:	bf00      	nop
 800f880:	20000e14 	.word	0x20000e14

0800f884 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 800f884:	b580      	push	{r7, lr}
 800f886:	b084      	sub	sp, #16
 800f888:	af00      	add	r7, sp, #0
 800f88a:	4603      	mov	r3, r0
 800f88c:	71fb      	strb	r3, [r7, #7]
 800f88e:	460b      	mov	r3, r1
 800f890:	71bb      	strb	r3, [r7, #6]
 800f892:	4613      	mov	r3, r2
 800f894:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 800f896:	2300      	movs	r3, #0
 800f898:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 800f89a:	2300      	movs	r3, #0
 800f89c:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800f89e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800f8a2:	4618      	mov	r0, r3
 800f8a4:	f7ff ffc6 	bl	800f834 <GetMaxAppPayloadWithoutFOptsLength>
 800f8a8:	4603      	mov	r3, r0
 800f8aa:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 800f8ac:	79fb      	ldrb	r3, [r7, #7]
 800f8ae:	b29a      	uxth	r2, r3
 800f8b0:	797b      	ldrb	r3, [r7, #5]
 800f8b2:	b29b      	uxth	r3, r3
 800f8b4:	4413      	add	r3, r2
 800f8b6:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 800f8b8:	89ba      	ldrh	r2, [r7, #12]
 800f8ba:	89fb      	ldrh	r3, [r7, #14]
 800f8bc:	429a      	cmp	r2, r3
 800f8be:	d804      	bhi.n	800f8ca <ValidatePayloadLength+0x46>
 800f8c0:	89bb      	ldrh	r3, [r7, #12]
 800f8c2:	2bff      	cmp	r3, #255	@ 0xff
 800f8c4:	d801      	bhi.n	800f8ca <ValidatePayloadLength+0x46>
    {
        return true;
 800f8c6:	2301      	movs	r3, #1
 800f8c8:	e000      	b.n	800f8cc <ValidatePayloadLength+0x48>
    }
    return false;
 800f8ca:	2300      	movs	r3, #0
}
 800f8cc:	4618      	mov	r0, r3
 800f8ce:	3710      	adds	r7, #16
 800f8d0:	46bd      	mov	sp, r7
 800f8d2:	bd80      	pop	{r7, pc}

0800f8d4 <ProcessMacCommands>:
}
*/
/*ST_WORKAROUND_END */

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 800f8d4:	b590      	push	{r4, r7, lr}
 800f8d6:	b0a5      	sub	sp, #148	@ 0x94
 800f8d8:	af02      	add	r7, sp, #8
 800f8da:	6078      	str	r0, [r7, #4]
 800f8dc:	4608      	mov	r0, r1
 800f8de:	4611      	mov	r1, r2
 800f8e0:	461a      	mov	r2, r3
 800f8e2:	4603      	mov	r3, r0
 800f8e4:	70fb      	strb	r3, [r7, #3]
 800f8e6:	460b      	mov	r3, r1
 800f8e8:	70bb      	strb	r3, [r7, #2]
 800f8ea:	4613      	mov	r3, r2
 800f8ec:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 800f8ee:	2300      	movs	r3, #0
 800f8f0:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
    bool adrBlockFound = false;
 800f8f4:	2300      	movs	r3, #0
 800f8f6:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800f8fa:	2300      	movs	r3, #0
 800f8fc:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( ( rxSlot != RX_SLOT_WIN_1 ) && ( rxSlot != RX_SLOT_WIN_2 ) )
 800f900:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 800f904:	2b00      	cmp	r3, #0
 800f906:	f000 84b9 	beq.w	801027c <ProcessMacCommands+0x9a8>
 800f90a:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 800f90e:	2b01      	cmp	r3, #1
 800f910:	f040 84ba 	bne.w	8010288 <ProcessMacCommands+0x9b4>
        // Do only parse MAC commands for Class A RX windows
        return;
    }
#endif /* LORAMAC_VERSION */

    while( macIndex < commandsSize )
 800f914:	f000 bcb2 	b.w	801027c <ProcessMacCommands+0x9a8>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 800f918:	78fb      	ldrb	r3, [r7, #3]
 800f91a:	687a      	ldr	r2, [r7, #4]
 800f91c:	4413      	add	r3, r2
 800f91e:	781b      	ldrb	r3, [r3, #0]
 800f920:	4618      	mov	r0, r3
 800f922:	f003 fd41 	bl	80133a8 <LoRaMacCommandsGetCmdSize>
 800f926:	4603      	mov	r3, r0
 800f928:	461a      	mov	r2, r3
 800f92a:	78fb      	ldrb	r3, [r7, #3]
 800f92c:	441a      	add	r2, r3
 800f92e:	78bb      	ldrb	r3, [r7, #2]
 800f930:	429a      	cmp	r2, r3
 800f932:	f300 84ab 	bgt.w	801028c <ProcessMacCommands+0x9b8>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 800f936:	78fb      	ldrb	r3, [r7, #3]
 800f938:	1c5a      	adds	r2, r3, #1
 800f93a:	70fa      	strb	r2, [r7, #3]
 800f93c:	461a      	mov	r2, r3
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	4413      	add	r3, r2
 800f942:	781b      	ldrb	r3, [r3, #0]
 800f944:	3b02      	subs	r3, #2
 800f946:	2b11      	cmp	r3, #17
 800f948:	f200 84a2 	bhi.w	8010290 <ProcessMacCommands+0x9bc>
 800f94c:	a201      	add	r2, pc, #4	@ (adr r2, 800f954 <ProcessMacCommands+0x80>)
 800f94e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f952:	bf00      	nop
 800f954:	0800f99d 	.word	0x0800f99d
 800f958:	0800f9df 	.word	0x0800f9df
 800f95c:	0800fb5b 	.word	0x0800fb5b
 800f960:	0800fb99 	.word	0x0800fb99
 800f964:	0800fc91 	.word	0x0800fc91
 800f968:	0800fce1 	.word	0x0800fce1
 800f96c:	0800fd9d 	.word	0x0800fd9d
 800f970:	0800fdf3 	.word	0x0800fdf3
 800f974:	0800fed7 	.word	0x0800fed7
 800f978:	08010291 	.word	0x08010291
 800f97c:	08010291 	.word	0x08010291
 800f980:	0800ff81 	.word	0x0800ff81
 800f984:	08010291 	.word	0x08010291
 800f988:	08010291 	.word	0x08010291
 800f98c:	080100a1 	.word	0x080100a1
 800f990:	080100d5 	.word	0x080100d5
 800f994:	08010165 	.word	0x08010165
 800f998:	080101dd 	.word	0x080101dd
        {
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 800f99c:	2004      	movs	r0, #4
 800f99e:	f003 fedb 	bl	8013758 <LoRaMacConfirmQueueIsCmdActive>
 800f9a2:	4603      	mov	r3, r0
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	f000 845c 	beq.w	8010262 <ProcessMacCommands+0x98e>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 800f9aa:	2104      	movs	r1, #4
 800f9ac:	2000      	movs	r0, #0
 800f9ae:	f003 fe47 	bl	8013640 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 800f9b2:	78fb      	ldrb	r3, [r7, #3]
 800f9b4:	1c5a      	adds	r2, r3, #1
 800f9b6:	70fa      	strb	r2, [r7, #3]
 800f9b8:	461a      	mov	r2, r3
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	4413      	add	r3, r2
 800f9be:	781a      	ldrb	r2, [r3, #0]
 800f9c0:	4bb0      	ldr	r3, [pc, #704]	@ (800fc84 <ProcessMacCommands+0x3b0>)
 800f9c2:	f883 2460 	strb.w	r2, [r3, #1120]	@ 0x460
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 800f9c6:	78fb      	ldrb	r3, [r7, #3]
 800f9c8:	1c5a      	adds	r2, r3, #1
 800f9ca:	70fa      	strb	r2, [r7, #3]
 800f9cc:	461a      	mov	r2, r3
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	4413      	add	r3, r2
 800f9d2:	781a      	ldrb	r2, [r3, #0]
 800f9d4:	4bab      	ldr	r3, [pc, #684]	@ (800fc84 <ProcessMacCommands+0x3b0>)
 800f9d6:	f883 2461 	strb.w	r2, [r3, #1121]	@ 0x461
                }
                break;
 800f9da:	f000 bc42 	b.w	8010262 <ProcessMacCommands+0x98e>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 800f9de:	2300      	movs	r3, #0
 800f9e0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 800f9e4:	2300      	movs	r3, #0
 800f9e6:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
                uint8_t linkAdrNbRep = 0;
 800f9ea:	2300      	movs	r3, #0
 800f9ec:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 800f9f0:	2300      	movs	r3, #0
 800f9f2:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
                }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                if( adrBlockFound == false )
 800f9f6:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800f9fa:	f083 0301 	eor.w	r3, r3, #1
 800f9fe:	b2db      	uxtb	r3, r3
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	f000 80a6 	beq.w	800fb52 <ProcessMacCommands+0x27e>
                {
                    adrBlockFound = true;
 800fa06:	2301      	movs	r3, #1
 800fa08:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

                    do
                    {
                        // Fill parameter structure
                        linkAdrReq.Payload = &payload[macIndex - 1];
 800fa0c:	78fb      	ldrb	r3, [r7, #3]
 800fa0e:	3b01      	subs	r3, #1
 800fa10:	687a      	ldr	r2, [r7, #4]
 800fa12:	4413      	add	r3, r2
 800fa14:	65fb      	str	r3, [r7, #92]	@ 0x5c
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800fa16:	4b9c      	ldr	r3, [pc, #624]	@ (800fc88 <ProcessMacCommands+0x3b4>)
 800fa18:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 800fa1c:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
                        linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800fa20:	4b99      	ldr	r3, [pc, #612]	@ (800fc88 <ProcessMacCommands+0x3b4>)
 800fa22:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800fa26:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
                        linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800fa2a:	4b97      	ldr	r3, [pc, #604]	@ (800fc88 <ProcessMacCommands+0x3b4>)
 800fa2c:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800fa30:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
                        linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800fa34:	4b94      	ldr	r3, [pc, #592]	@ (800fc88 <ProcessMacCommands+0x3b4>)
 800fa36:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 800fa3a:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
                        linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800fa3e:	4b92      	ldr	r3, [pc, #584]	@ (800fc88 <ProcessMacCommands+0x3b4>)
 800fa40:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 800fa44:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
                        linkAdrReq.Version = Nvm.MacGroup2.Version;
 800fa48:	4b8f      	ldr	r3, [pc, #572]	@ (800fc88 <ProcessMacCommands+0x3b4>)
 800fa4a:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800fa4e:	65bb      	str	r3, [r7, #88]	@ 0x58

                        // There is a fundamental difference in reporting the status
                        // of the LinkAdrRequests when ADR is on or off. When ADR is on, every
                        // LinkAdrAns contains the same value. This does not hold when ADR is off,
                        // where every LinkAdrAns requires an individual status.
                        if( Nvm.MacGroup2.AdrCtrlOn == true )
 800fa50:	4b8d      	ldr	r3, [pc, #564]	@ (800fc88 <ProcessMacCommands+0x3b4>)
 800fa52:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d008      	beq.n	800fa6c <ProcessMacCommands+0x198>
                        {
                            // When ADR is on, the function RegionLinkAdrReq will take care
                            // about the parsing and interpretation of the LinkAdrRequest block and
                            // it provides one status which shall be applied to every LinkAdrAns
                            linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800fa5a:	78ba      	ldrb	r2, [r7, #2]
 800fa5c:	78fb      	ldrb	r3, [r7, #3]
 800fa5e:	1ad3      	subs	r3, r2, r3
 800fa60:	b2db      	uxtb	r3, r3
 800fa62:	3301      	adds	r3, #1
 800fa64:	b2db      	uxtb	r3, r3
 800fa66:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
 800fa6a:	e002      	b.n	800fa72 <ProcessMacCommands+0x19e>
                            // When ADR is off, this function will loop over the individual LinkAdrRequests
                            // and will call RegionLinkAdrReq for each individually, as every request
                            // requires an individual answer.
                            // When ADR is off, the function RegionLinkAdrReq ignores the new values for
                            // ChannelsDatarate, ChannelsTxPower and ChannelsNbTrans.
                            linkAdrReq.PayloadSize = 5;
 800fa6c:	2305      	movs	r3, #5
 800fa6e:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
                        }

                        // Process the ADR requests
                        status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 800fa72:	4b85      	ldr	r3, [pc, #532]	@ (800fc88 <ProcessMacCommands+0x3b4>)
 800fa74:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 800fa78:	f107 0456 	add.w	r4, r7, #86	@ 0x56
 800fa7c:	f107 0257 	add.w	r2, r7, #87	@ 0x57
 800fa80:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800fa84:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800fa88:	9301      	str	r3, [sp, #4]
 800fa8a:	f107 0355 	add.w	r3, r7, #85	@ 0x55
 800fa8e:	9300      	str	r3, [sp, #0]
 800fa90:	4623      	mov	r3, r4
 800fa92:	f005 f964 	bl	8014d5e <RegionLinkAdrReq>
 800fa96:	4603      	mov	r3, r0
 800fa98:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
                                                &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                        if( ( status & 0x07 ) == 0x07 )
 800fa9c:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800faa0:	f003 0307 	and.w	r3, r3, #7
 800faa4:	2b07      	cmp	r3, #7
 800faa6:	d119      	bne.n	800fadc <ProcessMacCommands+0x208>
                        {
                            // Set the status that the datarate has been increased
                            if( linkAdrDatarate > Nvm.MacGroup1.ChannelsDatarate )
 800faa8:	4b77      	ldr	r3, [pc, #476]	@ (800fc88 <ProcessMacCommands+0x3b4>)
 800faaa:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
 800faae:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800fab2:	429a      	cmp	r2, r3
 800fab4:	da03      	bge.n	800fabe <ProcessMacCommands+0x1ea>
                            {
                                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = true;
 800fab6:	4b74      	ldr	r3, [pc, #464]	@ (800fc88 <ProcessMacCommands+0x3b4>)
 800fab8:	2201      	movs	r2, #1
 800faba:	f883 2109 	strb.w	r2, [r3, #265]	@ 0x109
                            }
                            Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 800fabe:	f997 2057 	ldrsb.w	r2, [r7, #87]	@ 0x57
 800fac2:	4b71      	ldr	r3, [pc, #452]	@ (800fc88 <ProcessMacCommands+0x3b4>)
 800fac4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                            Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 800fac8:	f997 2056 	ldrsb.w	r2, [r7, #86]	@ 0x56
 800facc:	4b6e      	ldr	r3, [pc, #440]	@ (800fc88 <ProcessMacCommands+0x3b4>)
 800face:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                            Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 800fad2:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 800fad6:	4b6c      	ldr	r3, [pc, #432]	@ (800fc88 <ProcessMacCommands+0x3b4>)
 800fad8:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
                        }

                        // Add the answers to the buffer
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800fadc:	2300      	movs	r3, #0
 800fade:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 800fae2:	e00b      	b.n	800fafc <ProcessMacCommands+0x228>
                        {
                            LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 800fae4:	f107 036b 	add.w	r3, r7, #107	@ 0x6b
 800fae8:	2201      	movs	r2, #1
 800faea:	4619      	mov	r1, r3
 800faec:	2003      	movs	r0, #3
 800faee:	f003 fb0b 	bl	8013108 <LoRaMacCommandsAddCmd>
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800faf2:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800faf6:	3301      	adds	r3, #1
 800faf8:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 800fafc:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800fb00:	4a62      	ldr	r2, [pc, #392]	@ (800fc8c <ProcessMacCommands+0x3b8>)
 800fb02:	fba2 2303 	umull	r2, r3, r2, r3
 800fb06:	089b      	lsrs	r3, r3, #2
 800fb08:	b2db      	uxtb	r3, r3
 800fb0a:	f897 2086 	ldrb.w	r2, [r7, #134]	@ 0x86
 800fb0e:	429a      	cmp	r2, r3
 800fb10:	d3e8      	bcc.n	800fae4 <ProcessMacCommands+0x210>
                        }
                        // Update MAC index
                        macIndex += linkAdrNbBytesParsed - 1;
 800fb12:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 800fb16:	78fb      	ldrb	r3, [r7, #3]
 800fb18:	4413      	add	r3, r2
 800fb1a:	b2db      	uxtb	r3, r3
 800fb1c:	3b01      	subs	r3, #1
 800fb1e:	70fb      	strb	r3, [r7, #3]

                        // Check to prevent invalid access
                        if( macIndex >= commandsSize )
 800fb20:	78fa      	ldrb	r2, [r7, #3]
 800fb22:	78bb      	ldrb	r3, [r7, #2]
 800fb24:	429a      	cmp	r2, r3
 800fb26:	d20a      	bcs.n	800fb3e <ProcessMacCommands+0x26a>
                            break;

                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 800fb28:	78fb      	ldrb	r3, [r7, #3]
 800fb2a:	1c5a      	adds	r2, r3, #1
 800fb2c:	70fa      	strb	r2, [r7, #3]
 800fb2e:	461a      	mov	r2, r3
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	4413      	add	r3, r2
 800fb34:	781b      	ldrb	r3, [r3, #0]
 800fb36:	2b03      	cmp	r3, #3
 800fb38:	f43f af68 	beq.w	800fa0c <ProcessMacCommands+0x138>
 800fb3c:	e000      	b.n	800fb40 <ProcessMacCommands+0x26c>
                            break;
 800fb3e:	bf00      	nop

                    if( macIndex < commandsSize )
 800fb40:	78fa      	ldrb	r2, [r7, #3]
 800fb42:	78bb      	ldrb	r3, [r7, #2]
 800fb44:	429a      	cmp	r2, r3
 800fb46:	f080 838e 	bcs.w	8010266 <ProcessMacCommands+0x992>
                    {
                        // Decrease the index such that it points to the next MAC command
                        macIndex--;
 800fb4a:	78fb      	ldrb	r3, [r7, #3]
 800fb4c:	3b01      	subs	r3, #1
 800fb4e:	70fb      	strb	r3, [r7, #3]
                {
                    // Increase the index by the MAC command size (without command)
                    macIndex += 4;
                }
#endif /* LORAMAC_VERSION */
                break;
 800fb50:	e389      	b.n	8010266 <ProcessMacCommands+0x992>
                    macIndex += 4;
 800fb52:	78fb      	ldrb	r3, [r7, #3]
 800fb54:	3304      	adds	r3, #4
 800fb56:	70fb      	strb	r3, [r7, #3]
                break;
 800fb58:	e385      	b.n	8010266 <ProcessMacCommands+0x992>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 800fb5a:	78fb      	ldrb	r3, [r7, #3]
 800fb5c:	1c5a      	adds	r2, r3, #1
 800fb5e:	70fa      	strb	r2, [r7, #3]
 800fb60:	461a      	mov	r2, r3
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	4413      	add	r3, r2
 800fb66:	781b      	ldrb	r3, [r3, #0]
 800fb68:	f003 030f 	and.w	r3, r3, #15
 800fb6c:	b2da      	uxtb	r2, r3
 800fb6e:	4b46      	ldr	r3, [pc, #280]	@ (800fc88 <ProcessMacCommands+0x3b4>)
 800fb70:	f883 2107 	strb.w	r2, [r3, #263]	@ 0x107
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 800fb74:	4b44      	ldr	r3, [pc, #272]	@ (800fc88 <ProcessMacCommands+0x3b4>)
 800fb76:	f893 3107 	ldrb.w	r3, [r3, #263]	@ 0x107
 800fb7a:	461a      	mov	r2, r3
 800fb7c:	2301      	movs	r3, #1
 800fb7e:	4093      	lsls	r3, r2
 800fb80:	b29a      	uxth	r2, r3
 800fb82:	4b41      	ldr	r3, [pc, #260]	@ (800fc88 <ProcessMacCommands+0x3b4>)
 800fb84:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 800fb88:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800fb8c:	2200      	movs	r2, #0
 800fb8e:	4619      	mov	r1, r3
 800fb90:	2004      	movs	r0, #4
 800fb92:	f003 fab9 	bl	8013108 <LoRaMacCommandsAddCmd>
                break;
 800fb96:	e371      	b.n	801027c <ProcessMacCommands+0x9a8>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 800fb98:	2307      	movs	r3, #7
 800fb9a:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 800fb9e:	78fb      	ldrb	r3, [r7, #3]
 800fba0:	687a      	ldr	r2, [r7, #4]
 800fba2:	4413      	add	r3, r2
 800fba4:	781b      	ldrb	r3, [r3, #0]
 800fba6:	091b      	lsrs	r3, r3, #4
 800fba8:	b2db      	uxtb	r3, r3
 800fbaa:	b25b      	sxtb	r3, r3
 800fbac:	f003 0307 	and.w	r3, r3, #7
 800fbb0:	b25b      	sxtb	r3, r3
 800fbb2:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 800fbb6:	78fb      	ldrb	r3, [r7, #3]
 800fbb8:	687a      	ldr	r2, [r7, #4]
 800fbba:	4413      	add	r3, r2
 800fbbc:	781b      	ldrb	r3, [r3, #0]
 800fbbe:	b25b      	sxtb	r3, r3
 800fbc0:	f003 030f 	and.w	r3, r3, #15
 800fbc4:	b25b      	sxtb	r3, r3
 800fbc6:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
                macIndex++;
 800fbca:	78fb      	ldrb	r3, [r7, #3]
 800fbcc:	3301      	adds	r3, #1
 800fbce:	70fb      	strb	r3, [r7, #3]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800fbd0:	78fb      	ldrb	r3, [r7, #3]
 800fbd2:	1c5a      	adds	r2, r3, #1
 800fbd4:	70fa      	strb	r2, [r7, #3]
 800fbd6:	461a      	mov	r2, r3
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	4413      	add	r3, r2
 800fbdc:	781b      	ldrb	r3, [r3, #0]
 800fbde:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800fbe0:	78fb      	ldrb	r3, [r7, #3]
 800fbe2:	1c5a      	adds	r2, r3, #1
 800fbe4:	70fa      	strb	r2, [r7, #3]
 800fbe6:	461a      	mov	r2, r3
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	4413      	add	r3, r2
 800fbec:	781b      	ldrb	r3, [r3, #0]
 800fbee:	021a      	lsls	r2, r3, #8
 800fbf0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fbf2:	4313      	orrs	r3, r2
 800fbf4:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800fbf6:	78fb      	ldrb	r3, [r7, #3]
 800fbf8:	1c5a      	adds	r2, r3, #1
 800fbfa:	70fa      	strb	r2, [r7, #3]
 800fbfc:	461a      	mov	r2, r3
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	4413      	add	r3, r2
 800fc02:	781b      	ldrb	r3, [r3, #0]
 800fc04:	041a      	lsls	r2, r3, #16
 800fc06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fc08:	4313      	orrs	r3, r2
 800fc0a:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency *= 100;
 800fc0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fc0e:	2264      	movs	r2, #100	@ 0x64
 800fc10:	fb02 f303 	mul.w	r3, r2, r3
 800fc14:	653b      	str	r3, [r7, #80]	@ 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 800fc16:	4b1c      	ldr	r3, [pc, #112]	@ (800fc88 <ProcessMacCommands+0x3b4>)
 800fc18:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800fc1c:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 800fc20:	4611      	mov	r1, r2
 800fc22:	4618      	mov	r0, r3
 800fc24:	f005 f8b5 	bl	8014d92 <RegionRxParamSetupReq>
 800fc28:	4603      	mov	r3, r0
 800fc2a:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( status & 0x07 ) == 0x07 )
 800fc2e:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800fc32:	f003 0307 	and.w	r3, r3, #7
 800fc36:	2b07      	cmp	r3, #7
 800fc38:	d117      	bne.n	800fc6a <ProcessMacCommands+0x396>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 800fc3a:	f997 304c 	ldrsb.w	r3, [r7, #76]	@ 0x4c
 800fc3e:	b2da      	uxtb	r2, r3
 800fc40:	4b11      	ldr	r3, [pc, #68]	@ (800fc88 <ProcessMacCommands+0x3b4>)
 800fc42:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 800fc46:	f997 304c 	ldrsb.w	r3, [r7, #76]	@ 0x4c
 800fc4a:	b2da      	uxtb	r2, r3
 800fc4c:	4b0e      	ldr	r3, [pc, #56]	@ (800fc88 <ProcessMacCommands+0x3b4>)
 800fc4e:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 800fc52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fc54:	4a0c      	ldr	r2, [pc, #48]	@ (800fc88 <ProcessMacCommands+0x3b4>)
 800fc56:	6653      	str	r3, [r2, #100]	@ 0x64
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 800fc58:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fc5a:	4a0b      	ldr	r2, [pc, #44]	@ (800fc88 <ProcessMacCommands+0x3b4>)
 800fc5c:	66d3      	str	r3, [r2, #108]	@ 0x6c
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 800fc5e:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 800fc62:	b2da      	uxtb	r2, r3
 800fc64:	4b08      	ldr	r3, [pc, #32]	@ (800fc88 <ProcessMacCommands+0x3b4>)
 800fc66:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
                }
                macCmdPayload[0] = status;
 800fc6a:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800fc6e:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 800fc72:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800fc76:	2201      	movs	r2, #1
 800fc78:	4619      	mov	r1, r3
 800fc7a:	2005      	movs	r0, #5
 800fc7c:	f003 fa44 	bl	8013108 <LoRaMacCommandsAddCmd>
                /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                // Setup indication to inform the application
                /* SetMlmeScheduleUplinkIndication( ); */
                /*ST_WORKAROUND_END */
                break;
 800fc80:	e2fc      	b.n	801027c <ProcessMacCommands+0x9a8>
 800fc82:	bf00      	nop
 800fc84:	200008f4 	.word	0x200008f4
 800fc88:	20000e14 	.word	0x20000e14
 800fc8c:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 800fc90:	23ff      	movs	r3, #255	@ 0xff
 800fc92:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 800fc96:	4bb7      	ldr	r3, [pc, #732]	@ (800ff74 <ProcessMacCommands+0x6a0>)
 800fc98:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d00d      	beq.n	800fcbc <ProcessMacCommands+0x3e8>
 800fca0:	4bb4      	ldr	r3, [pc, #720]	@ (800ff74 <ProcessMacCommands+0x6a0>)
 800fca2:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800fca6:	681b      	ldr	r3, [r3, #0]
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d007      	beq.n	800fcbc <ProcessMacCommands+0x3e8>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 800fcac:	4bb1      	ldr	r3, [pc, #708]	@ (800ff74 <ProcessMacCommands+0x6a0>)
 800fcae:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	4798      	blx	r3
 800fcb6:	4603      	mov	r3, r0
 800fcb8:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
                }
                macCmdPayload[0] = batteryLevel;
 800fcbc:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 800fcc0:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 800fcc4:	787b      	ldrb	r3, [r7, #1]
 800fcc6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800fcca:	b2db      	uxtb	r3, r3
 800fccc:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 800fcd0:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800fcd4:	2202      	movs	r2, #2
 800fcd6:	4619      	mov	r1, r3
 800fcd8:	2006      	movs	r0, #6
 800fcda:	f003 fa15 	bl	8013108 <LoRaMacCommandsAddCmd>
                break;
 800fcde:	e2cd      	b.n	801027c <ProcessMacCommands+0x9a8>
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 800fce0:	2303      	movs	r3, #3
 800fce2:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 800fce6:	78fb      	ldrb	r3, [r7, #3]
 800fce8:	1c5a      	adds	r2, r3, #1
 800fcea:	70fa      	strb	r2, [r7, #3]
 800fcec:	461a      	mov	r2, r3
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	4413      	add	r3, r2
 800fcf2:	781b      	ldrb	r3, [r3, #0]
 800fcf4:	b25b      	sxtb	r3, r3
 800fcf6:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
                newChannelReq.NewChannel = &chParam;
 800fcfa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800fcfe:	647b      	str	r3, [r7, #68]	@ 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 800fd00:	78fb      	ldrb	r3, [r7, #3]
 800fd02:	1c5a      	adds	r2, r3, #1
 800fd04:	70fa      	strb	r2, [r7, #3]
 800fd06:	461a      	mov	r2, r3
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	4413      	add	r3, r2
 800fd0c:	781b      	ldrb	r3, [r3, #0]
 800fd0e:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800fd10:	78fb      	ldrb	r3, [r7, #3]
 800fd12:	1c5a      	adds	r2, r3, #1
 800fd14:	70fa      	strb	r2, [r7, #3]
 800fd16:	461a      	mov	r2, r3
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	4413      	add	r3, r2
 800fd1c:	781b      	ldrb	r3, [r3, #0]
 800fd1e:	021a      	lsls	r2, r3, #8
 800fd20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd22:	4313      	orrs	r3, r2
 800fd24:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800fd26:	78fb      	ldrb	r3, [r7, #3]
 800fd28:	1c5a      	adds	r2, r3, #1
 800fd2a:	70fa      	strb	r2, [r7, #3]
 800fd2c:	461a      	mov	r2, r3
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	4413      	add	r3, r2
 800fd32:	781b      	ldrb	r3, [r3, #0]
 800fd34:	041a      	lsls	r2, r3, #16
 800fd36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd38:	4313      	orrs	r3, r2
 800fd3a:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency *= 100;
 800fd3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd3e:	2264      	movs	r2, #100	@ 0x64
 800fd40:	fb02 f303 	mul.w	r3, r2, r3
 800fd44:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Rx1Frequency = 0;
 800fd46:	2300      	movs	r3, #0
 800fd48:	63fb      	str	r3, [r7, #60]	@ 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 800fd4a:	78fb      	ldrb	r3, [r7, #3]
 800fd4c:	1c5a      	adds	r2, r3, #1
 800fd4e:	70fa      	strb	r2, [r7, #3]
 800fd50:	461a      	mov	r2, r3
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	4413      	add	r3, r2
 800fd56:	781b      	ldrb	r3, [r3, #0]
 800fd58:	b25b      	sxtb	r3, r3
 800fd5a:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 800fd5e:	4b86      	ldr	r3, [pc, #536]	@ (800ff78 <ProcessMacCommands+0x6a4>)
 800fd60:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800fd64:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800fd68:	4611      	mov	r1, r2
 800fd6a:	4618      	mov	r0, r3
 800fd6c:	f005 f824 	bl	8014db8 <RegionNewChannelReq>
 800fd70:	4603      	mov	r3, r0
 800fd72:	b2db      	uxtb	r3, r3
 800fd74:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( int8_t )status >= 0 )
 800fd78:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800fd7c:	b25b      	sxtb	r3, r3
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	f2c0 8273 	blt.w	801026a <ProcessMacCommands+0x996>
                {
                    macCmdPayload[0] = status;
 800fd84:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800fd88:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 800fd8c:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800fd90:	2201      	movs	r2, #1
 800fd92:	4619      	mov	r1, r3
 800fd94:	2007      	movs	r0, #7
 800fd96:	f003 f9b7 	bl	8013108 <LoRaMacCommandsAddCmd>
                }
                break;
 800fd9a:	e266      	b.n	801026a <ProcessMacCommands+0x996>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 800fd9c:	78fb      	ldrb	r3, [r7, #3]
 800fd9e:	1c5a      	adds	r2, r3, #1
 800fda0:	70fa      	strb	r2, [r7, #3]
 800fda2:	461a      	mov	r2, r3
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	4413      	add	r3, r2
 800fda8:	781b      	ldrb	r3, [r3, #0]
 800fdaa:	f003 030f 	and.w	r3, r3, #15
 800fdae:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84

                if( delay == 0 )
 800fdb2:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	d104      	bne.n	800fdc4 <ProcessMacCommands+0x4f0>
                {
                    delay++;
 800fdba:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800fdbe:	3301      	adds	r3, #1
 800fdc0:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 800fdc4:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800fdc8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800fdcc:	fb02 f303 	mul.w	r3, r2, r3
 800fdd0:	461a      	mov	r2, r3
 800fdd2:	4b69      	ldr	r3, [pc, #420]	@ (800ff78 <ProcessMacCommands+0x6a4>)
 800fdd4:	651a      	str	r2, [r3, #80]	@ 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800fdd6:	4b68      	ldr	r3, [pc, #416]	@ (800ff78 <ProcessMacCommands+0x6a4>)
 800fdd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fdda:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800fdde:	4a66      	ldr	r2, [pc, #408]	@ (800ff78 <ProcessMacCommands+0x6a4>)
 800fde0:	6553      	str	r3, [r2, #84]	@ 0x54
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 800fde2:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800fde6:	2200      	movs	r2, #0
 800fde8:	4619      	mov	r1, r3
 800fdea:	2008      	movs	r0, #8
 800fdec:	f003 f98c 	bl	8013108 <LoRaMacCommandsAddCmd>
                /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                // Setup indication to inform the application
                /* SetMlmeScheduleUplinkIndication( ); */
                /*ST_WORKAROUND_END */
                break;
 800fdf0:	e244      	b.n	801027c <ProcessMacCommands+0x9a8>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 800fdf2:	78fb      	ldrb	r3, [r7, #3]
 800fdf4:	1c5a      	adds	r2, r3, #1
 800fdf6:	70fa      	strb	r2, [r7, #3]
 800fdf8:	461a      	mov	r2, r3
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	4413      	add	r3, r2
 800fdfe:	781b      	ldrb	r3, [r3, #0]
 800fe00:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 800fe04:	2300      	movs	r3, #0
 800fe06:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 800fe0a:	2300      	movs	r3, #0
 800fe0c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 800fe10:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800fe14:	f003 0320 	and.w	r3, r3, #32
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d002      	beq.n	800fe22 <ProcessMacCommands+0x54e>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 800fe1c:	2301      	movs	r3, #1
 800fe1e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 800fe22:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800fe26:	f003 0310 	and.w	r3, r3, #16
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d002      	beq.n	800fe34 <ProcessMacCommands+0x560>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 800fe2e:	2301      	movs	r3, #1
 800fe30:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 800fe34:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800fe38:	f003 030f 	and.w	r3, r3, #15
 800fe3c:	b2db      	uxtb	r3, r3
 800fe3e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 800fe42:	4b4d      	ldr	r3, [pc, #308]	@ (800ff78 <ProcessMacCommands+0x6a4>)
 800fe44:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800fe48:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800fe4c:	4611      	mov	r1, r2
 800fe4e:	4618      	mov	r0, r3
 800fe50:	f004 ffc5 	bl	8014dde <RegionTxParamSetupReq>
 800fe54:	4603      	mov	r3, r0
 800fe56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe5a:	f000 8208 	beq.w	801026e <ProcessMacCommands+0x99a>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 800fe5e:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 800fe62:	4b45      	ldr	r3, [pc, #276]	@ (800ff78 <ProcessMacCommands+0x6a4>)
 800fe64:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 800fe68:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 800fe6c:	4b42      	ldr	r3, [pc, #264]	@ (800ff78 <ProcessMacCommands+0x6a4>)
 800fe6e:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 800fe72:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800fe76:	461a      	mov	r2, r3
 800fe78:	4b40      	ldr	r3, [pc, #256]	@ (800ff7c <ProcessMacCommands+0x6a8>)
 800fe7a:	5c9b      	ldrb	r3, [r3, r2]
 800fe7c:	4618      	mov	r0, r3
 800fe7e:	f7f0 ff21 	bl	8000cc4 <__aeabi_ui2f>
 800fe82:	4603      	mov	r3, r0
 800fe84:	4a3c      	ldr	r2, [pc, #240]	@ (800ff78 <ProcessMacCommands+0x6a4>)
 800fe86:	6793      	str	r3, [r2, #120]	@ 0x78
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 800fe88:	2302      	movs	r3, #2
 800fe8a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800fe8e:	4b3a      	ldr	r3, [pc, #232]	@ (800ff78 <ProcessMacCommands+0x6a4>)
 800fe90:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800fe94:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800fe98:	4b37      	ldr	r3, [pc, #220]	@ (800ff78 <ProcessMacCommands+0x6a4>)
 800fe9a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800fe9e:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800fea2:	4611      	mov	r1, r2
 800fea4:	4618      	mov	r0, r3
 800fea6:	f004 fe9d 	bl	8014be4 <RegionGetPhyParam>
 800feaa:	4603      	mov	r3, r0
 800feac:	62bb      	str	r3, [r7, #40]	@ 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 800feae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800feb0:	b25a      	sxtb	r2, r3
 800feb2:	4b31      	ldr	r3, [pc, #196]	@ (800ff78 <ProcessMacCommands+0x6a4>)
 800feb4:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800feb8:	4293      	cmp	r3, r2
 800feba:	bfb8      	it	lt
 800febc:	4613      	movlt	r3, r2
 800febe:	b25a      	sxtb	r2, r3
 800fec0:	4b2d      	ldr	r3, [pc, #180]	@ (800ff78 <ProcessMacCommands+0x6a4>)
 800fec2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 800fec6:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800feca:	2200      	movs	r2, #0
 800fecc:	4619      	mov	r1, r3
 800fece:	2009      	movs	r0, #9
 800fed0:	f003 f91a 	bl	8013108 <LoRaMacCommandsAddCmd>
                }
                break;
 800fed4:	e1cb      	b.n	801026e <ProcessMacCommands+0x99a>
            }
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 800fed6:	2303      	movs	r3, #3
 800fed8:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 800fedc:	78fb      	ldrb	r3, [r7, #3]
 800fede:	1c5a      	adds	r2, r3, #1
 800fee0:	70fa      	strb	r2, [r7, #3]
 800fee2:	461a      	mov	r2, r3
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	4413      	add	r3, r2
 800fee8:	781b      	ldrb	r3, [r3, #0]
 800feea:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 800feee:	78fb      	ldrb	r3, [r7, #3]
 800fef0:	1c5a      	adds	r2, r3, #1
 800fef2:	70fa      	strb	r2, [r7, #3]
 800fef4:	461a      	mov	r2, r3
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	4413      	add	r3, r2
 800fefa:	781b      	ldrb	r3, [r3, #0]
 800fefc:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800fefe:	78fb      	ldrb	r3, [r7, #3]
 800ff00:	1c5a      	adds	r2, r3, #1
 800ff02:	70fa      	strb	r2, [r7, #3]
 800ff04:	461a      	mov	r2, r3
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	4413      	add	r3, r2
 800ff0a:	781b      	ldrb	r3, [r3, #0]
 800ff0c:	021a      	lsls	r2, r3, #8
 800ff0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff10:	4313      	orrs	r3, r2
 800ff12:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800ff14:	78fb      	ldrb	r3, [r7, #3]
 800ff16:	1c5a      	adds	r2, r3, #1
 800ff18:	70fa      	strb	r2, [r7, #3]
 800ff1a:	461a      	mov	r2, r3
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	4413      	add	r3, r2
 800ff20:	781b      	ldrb	r3, [r3, #0]
 800ff22:	041a      	lsls	r2, r3, #16
 800ff24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff26:	4313      	orrs	r3, r2
 800ff28:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency *= 100;
 800ff2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff2c:	2264      	movs	r2, #100	@ 0x64
 800ff2e:	fb02 f303 	mul.w	r3, r2, r3
 800ff32:	627b      	str	r3, [r7, #36]	@ 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 800ff34:	4b10      	ldr	r3, [pc, #64]	@ (800ff78 <ProcessMacCommands+0x6a4>)
 800ff36:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ff3a:	f107 0220 	add.w	r2, r7, #32
 800ff3e:	4611      	mov	r1, r2
 800ff40:	4618      	mov	r0, r3
 800ff42:	f004 ff5f 	bl	8014e04 <RegionDlChannelReq>
 800ff46:	4603      	mov	r3, r0
 800ff48:	b2db      	uxtb	r3, r3
 800ff4a:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( int8_t )status >= 0 )
 800ff4e:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800ff52:	b25b      	sxtb	r3, r3
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	f2c0 818c 	blt.w	8010272 <ProcessMacCommands+0x99e>
                {
                    macCmdPayload[0] = status;
 800ff5a:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800ff5e:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 800ff62:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800ff66:	2201      	movs	r2, #1
 800ff68:	4619      	mov	r1, r3
 800ff6a:	200a      	movs	r0, #10
 800ff6c:	f003 f8cc 	bl	8013108 <LoRaMacCommandsAddCmd>
                    /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                    // Setup indication to inform the application
                    /* SetMlmeScheduleUplinkIndication( ); */
                    /*ST_WORKAROUND_END */
                }
                break;
 800ff70:	e17f      	b.n	8010272 <ProcessMacCommands+0x99e>
 800ff72:	bf00      	nop
 800ff74:	200008f4 	.word	0x200008f4
 800ff78:	20000e14 	.word	0x20000e14
 800ff7c:	0801f5bc 	.word	0x0801f5bc
            }
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                // The mote time can be updated only when the time is received in classA
                // receive windows only.
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 800ff80:	2009      	movs	r0, #9
 800ff82:	f003 fbe9 	bl	8013758 <LoRaMacConfirmQueueIsCmdActive>
 800ff86:	4603      	mov	r3, r0
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	f000 8084 	beq.w	8010096 <ProcessMacCommands+0x7c2>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 800ff8e:	2109      	movs	r1, #9
 800ff90:	2000      	movs	r0, #0
 800ff92:	f003 fb55 	bl	8013640 <LoRaMacConfirmQueueSetStatus>

                    SysTime_t gpsEpochTime = { 0 };
 800ff96:	f107 0318 	add.w	r3, r7, #24
 800ff9a:	2200      	movs	r2, #0
 800ff9c:	601a      	str	r2, [r3, #0]
 800ff9e:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 800ffa0:	f107 0310 	add.w	r3, r7, #16
 800ffa4:	2200      	movs	r2, #0
 800ffa6:	601a      	str	r2, [r3, #0]
 800ffa8:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 800ffaa:	f107 0308 	add.w	r3, r7, #8
 800ffae:	2200      	movs	r2, #0
 800ffb0:	601a      	str	r2, [r3, #0]
 800ffb2:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 800ffb4:	78fb      	ldrb	r3, [r7, #3]
 800ffb6:	1c5a      	adds	r2, r3, #1
 800ffb8:	70fa      	strb	r2, [r7, #3]
 800ffba:	461a      	mov	r2, r3
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	4413      	add	r3, r2
 800ffc0:	781b      	ldrb	r3, [r3, #0]
 800ffc2:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 800ffc4:	78fb      	ldrb	r3, [r7, #3]
 800ffc6:	1c5a      	adds	r2, r3, #1
 800ffc8:	70fa      	strb	r2, [r7, #3]
 800ffca:	461a      	mov	r2, r3
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	4413      	add	r3, r2
 800ffd0:	781b      	ldrb	r3, [r3, #0]
 800ffd2:	021a      	lsls	r2, r3, #8
 800ffd4:	69bb      	ldr	r3, [r7, #24]
 800ffd6:	4313      	orrs	r3, r2
 800ffd8:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 800ffda:	78fb      	ldrb	r3, [r7, #3]
 800ffdc:	1c5a      	adds	r2, r3, #1
 800ffde:	70fa      	strb	r2, [r7, #3]
 800ffe0:	461a      	mov	r2, r3
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	4413      	add	r3, r2
 800ffe6:	781b      	ldrb	r3, [r3, #0]
 800ffe8:	041a      	lsls	r2, r3, #16
 800ffea:	69bb      	ldr	r3, [r7, #24]
 800ffec:	4313      	orrs	r3, r2
 800ffee:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800fff0:	78fb      	ldrb	r3, [r7, #3]
 800fff2:	1c5a      	adds	r2, r3, #1
 800fff4:	70fa      	strb	r2, [r7, #3]
 800fff6:	461a      	mov	r2, r3
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	4413      	add	r3, r2
 800fffc:	781b      	ldrb	r3, [r3, #0]
 800fffe:	061a      	lsls	r2, r3, #24
 8010000:	69bb      	ldr	r3, [r7, #24]
 8010002:	4313      	orrs	r3, r2
 8010004:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 8010006:	78fb      	ldrb	r3, [r7, #3]
 8010008:	1c5a      	adds	r2, r3, #1
 801000a:	70fa      	strb	r2, [r7, #3]
 801000c:	461a      	mov	r2, r3
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	4413      	add	r3, r2
 8010012:	781b      	ldrb	r3, [r3, #0]
 8010014:	b21b      	sxth	r3, r3
 8010016:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8010018:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 801001c:	461a      	mov	r2, r3
 801001e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010022:	fb02 f303 	mul.w	r3, r2, r3
 8010026:	121b      	asrs	r3, r3, #8
 8010028:	b21b      	sxth	r3, r3
 801002a:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 801002c:	f107 0310 	add.w	r3, r7, #16
 8010030:	f107 0218 	add.w	r2, r7, #24
 8010034:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010038:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epoch offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 801003c:	693a      	ldr	r2, [r7, #16]
 801003e:	4b96      	ldr	r3, [pc, #600]	@ (8010298 <ProcessMacCommands+0x9c4>)
 8010040:	4413      	add	r3, r2
 8010042:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 8010044:	f107 0308 	add.w	r3, r7, #8
 8010048:	4618      	mov	r0, r3
 801004a:	f00a fc53 	bl	801a8f4 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 801004e:	f107 006c 	add.w	r0, r7, #108	@ 0x6c
 8010052:	4b92      	ldr	r3, [pc, #584]	@ (801029c <ProcessMacCommands+0x9c8>)
 8010054:	f8d3 233c 	ldr.w	r2, [r3, #828]	@ 0x33c
 8010058:	9200      	str	r2, [sp, #0]
 801005a:	f8d3 3338 	ldr.w	r3, [r3, #824]	@ 0x338
 801005e:	f107 0210 	add.w	r2, r7, #16
 8010062:	ca06      	ldmia	r2, {r1, r2}
 8010064:	f00a fbdf 	bl	801a826 <SysTimeSub>
 8010068:	f107 0010 	add.w	r0, r7, #16
 801006c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801006e:	9300      	str	r3, [sp, #0]
 8010070:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010072:	f107 0208 	add.w	r2, r7, #8
 8010076:	ca06      	ldmia	r2, {r1, r2}
 8010078:	f00a fb9c 	bl	801a7b4 <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 801007c:	f107 0310 	add.w	r3, r7, #16
 8010080:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010084:	f00a fc08 	bl	801a898 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 8010088:	f002 fee8 	bl	8012e5c <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 801008c:	4b83      	ldr	r3, [pc, #524]	@ (801029c <ProcessMacCommands+0x9c8>)
 801008e:	2201      	movs	r2, #1
 8010090:	f883 243c 	strb.w	r2, [r3, #1084]	@ 0x43c
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                    // In case of other receive windows the Device Time Answer is not received.
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
#endif /* LORAMAC_VERSION */
                }
                break;
 8010094:	e0f2      	b.n	801027c <ProcessMacCommands+0x9a8>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 8010096:	4b81      	ldr	r3, [pc, #516]	@ (801029c <ProcessMacCommands+0x9c8>)
 8010098:	2200      	movs	r2, #0
 801009a:	f883 243c 	strb.w	r2, [r3, #1084]	@ 0x43c
                break;
 801009e:	e0ed      	b.n	801027c <ProcessMacCommands+0x9a8>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 80100a0:	200c      	movs	r0, #12
 80100a2:	f003 fb59 	bl	8013758 <LoRaMacConfirmQueueIsCmdActive>
 80100a6:	4603      	mov	r3, r0
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	f000 80e4 	beq.w	8010276 <ProcessMacCommands+0x9a2>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 80100ae:	210c      	movs	r1, #12
 80100b0:	2000      	movs	r0, #0
 80100b2:	f003 fac5 	bl	8013640 <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 80100b6:	4b79      	ldr	r3, [pc, #484]	@ (801029c <ProcessMacCommands+0x9c8>)
 80100b8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80100bc:	2b04      	cmp	r3, #4
 80100be:	f000 80da 	beq.w	8010276 <ProcessMacCommands+0x9a2>
 80100c2:	4b76      	ldr	r3, [pc, #472]	@ (801029c <ProcessMacCommands+0x9c8>)
 80100c4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80100c8:	2b05      	cmp	r3, #5
 80100ca:	f000 80d4 	beq.w	8010276 <ProcessMacCommands+0x9a2>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 80100ce:	f002 fea6 	bl	8012e1e <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 80100d2:	e0d0      	b.n	8010276 <ProcessMacCommands+0x9a2>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 80100d4:	2303      	movs	r3, #3
 80100d6:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
                uint32_t frequency = 0;
 80100da:	2300      	movs	r3, #0
 80100dc:	67bb      	str	r3, [r7, #120]	@ 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 80100de:	78fb      	ldrb	r3, [r7, #3]
 80100e0:	1c5a      	adds	r2, r3, #1
 80100e2:	70fa      	strb	r2, [r7, #3]
 80100e4:	461a      	mov	r2, r3
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	4413      	add	r3, r2
 80100ea:	781b      	ldrb	r3, [r3, #0]
 80100ec:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 80100ee:	78fb      	ldrb	r3, [r7, #3]
 80100f0:	1c5a      	adds	r2, r3, #1
 80100f2:	70fa      	strb	r2, [r7, #3]
 80100f4:	461a      	mov	r2, r3
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	4413      	add	r3, r2
 80100fa:	781b      	ldrb	r3, [r3, #0]
 80100fc:	021b      	lsls	r3, r3, #8
 80100fe:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8010100:	4313      	orrs	r3, r2
 8010102:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8010104:	78fb      	ldrb	r3, [r7, #3]
 8010106:	1c5a      	adds	r2, r3, #1
 8010108:	70fa      	strb	r2, [r7, #3]
 801010a:	461a      	mov	r2, r3
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	4413      	add	r3, r2
 8010110:	781b      	ldrb	r3, [r3, #0]
 8010112:	041b      	lsls	r3, r3, #16
 8010114:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8010116:	4313      	orrs	r3, r2
 8010118:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency *= 100;
 801011a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801011c:	2264      	movs	r2, #100	@ 0x64
 801011e:	fb02 f303 	mul.w	r3, r2, r3
 8010122:	67bb      	str	r3, [r7, #120]	@ 0x78
                datarate = payload[macIndex++] & 0x0F;
 8010124:	78fb      	ldrb	r3, [r7, #3]
 8010126:	1c5a      	adds	r2, r3, #1
 8010128:	70fa      	strb	r2, [r7, #3]
 801012a:	461a      	mov	r2, r3
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	4413      	add	r3, r2
 8010130:	781b      	ldrb	r3, [r3, #0]
 8010132:	f003 030f 	and.w	r3, r3, #15
 8010136:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 801013a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 801013e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8010140:	4618      	mov	r0, r3
 8010142:	f002 fe72 	bl	8012e2a <LoRaMacClassBPingSlotChannelReq>
 8010146:	4603      	mov	r3, r0
 8010148:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
                macCmdPayload[0] = status;
 801014c:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 8010150:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
 8010154:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8010158:	2201      	movs	r2, #1
 801015a:	4619      	mov	r1, r3
 801015c:	2011      	movs	r0, #17
 801015e:	f002 ffd3 	bl	8013108 <LoRaMacCommandsAddCmd>
                /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                // Setup indication to inform the application
                /* SetMlmeScheduleUplinkIndication( ); */
                /*ST_WORKAROUND_END */
#endif /* LORAMAC_VERSION */
                break;
 8010162:	e08b      	b.n	801027c <ProcessMacCommands+0x9a8>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 8010164:	200d      	movs	r0, #13
 8010166:	f003 faf7 	bl	8013758 <LoRaMacConfirmQueueIsCmdActive>
 801016a:	4603      	mov	r3, r0
 801016c:	2b00      	cmp	r3, #0
 801016e:	f000 8084 	beq.w	801027a <ProcessMacCommands+0x9a6>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 8010172:	210d      	movs	r1, #13
 8010174:	2000      	movs	r0, #0
 8010176:	f003 fa63 	bl	8013640 <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 801017a:	2300      	movs	r3, #0
 801017c:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    uint8_t beaconTimingChannel = 0;
 8010180:	2300      	movs	r3, #0
 8010182:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 8010186:	78fb      	ldrb	r3, [r7, #3]
 8010188:	1c5a      	adds	r2, r3, #1
 801018a:	70fa      	strb	r2, [r7, #3]
 801018c:	461a      	mov	r2, r3
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	4413      	add	r3, r2
 8010192:	781b      	ldrb	r3, [r3, #0]
 8010194:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8010198:	78fb      	ldrb	r3, [r7, #3]
 801019a:	1c5a      	adds	r2, r3, #1
 801019c:	70fa      	strb	r2, [r7, #3]
 801019e:	461a      	mov	r2, r3
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	4413      	add	r3, r2
 80101a4:	781b      	ldrb	r3, [r3, #0]
 80101a6:	021b      	lsls	r3, r3, #8
 80101a8:	b21a      	sxth	r2, r3
 80101aa:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	@ 0x7e
 80101ae:	4313      	orrs	r3, r2
 80101b0:	b21b      	sxth	r3, r3
 80101b2:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    beaconTimingChannel = payload[macIndex++];
 80101b6:	78fb      	ldrb	r3, [r7, #3]
 80101b8:	1c5a      	adds	r2, r3, #1
 80101ba:	70fa      	strb	r2, [r7, #3]
 80101bc:	461a      	mov	r2, r3
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	4413      	add	r3, r2
 80101c2:	781b      	ldrb	r3, [r3, #0]
 80101c4:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 80101c8:	4b35      	ldr	r3, [pc, #212]	@ (80102a0 <ProcessMacCommands+0x9cc>)
 80101ca:	681a      	ldr	r2, [r3, #0]
 80101cc:	f897 107d 	ldrb.w	r1, [r7, #125]	@ 0x7d
 80101d0:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 80101d4:	4618      	mov	r0, r3
 80101d6:	f002 fe34 	bl	8012e42 <LoRaMacClassBBeaconTimingAns>
                }
                break;
 80101da:	e04e      	b.n	801027a <ProcessMacCommands+0x9a6>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 80101dc:	2300      	movs	r3, #0
 80101de:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 80101e2:	78fb      	ldrb	r3, [r7, #3]
 80101e4:	1c5a      	adds	r2, r3, #1
 80101e6:	70fa      	strb	r2, [r7, #3]
 80101e8:	461a      	mov	r2, r3
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	4413      	add	r3, r2
 80101ee:	781b      	ldrb	r3, [r3, #0]
 80101f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 80101f4:	78fb      	ldrb	r3, [r7, #3]
 80101f6:	1c5a      	adds	r2, r3, #1
 80101f8:	70fa      	strb	r2, [r7, #3]
 80101fa:	461a      	mov	r2, r3
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	4413      	add	r3, r2
 8010200:	781b      	ldrb	r3, [r3, #0]
 8010202:	021b      	lsls	r3, r3, #8
 8010204:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8010208:	4313      	orrs	r3, r2
 801020a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 801020e:	78fb      	ldrb	r3, [r7, #3]
 8010210:	1c5a      	adds	r2, r3, #1
 8010212:	70fa      	strb	r2, [r7, #3]
 8010214:	461a      	mov	r2, r3
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	4413      	add	r3, r2
 801021a:	781b      	ldrb	r3, [r3, #0]
 801021c:	041b      	lsls	r3, r3, #16
 801021e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8010222:	4313      	orrs	r3, r2
 8010224:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency *= 100;
 8010228:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801022c:	2264      	movs	r2, #100	@ 0x64
 801022e:	fb02 f303 	mul.w	r3, r2, r3
 8010232:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 8010236:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 801023a:	f002 fe15 	bl	8012e68 <LoRaMacClassBBeaconFreqReq>
 801023e:	4603      	mov	r3, r0
 8010240:	2b00      	cmp	r3, #0
 8010242:	d003      	beq.n	801024c <ProcessMacCommands+0x978>
                    {
                        macCmdPayload[0] = 1;
 8010244:	2301      	movs	r3, #1
 8010246:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
 801024a:	e002      	b.n	8010252 <ProcessMacCommands+0x97e>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 801024c:	2300      	movs	r3, #0
 801024e:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 8010252:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8010256:	2201      	movs	r2, #1
 8010258:	4619      	mov	r1, r3
 801025a:	2013      	movs	r0, #19
 801025c:	f002 ff54 	bl	8013108 <LoRaMacCommandsAddCmd>
                }
                break;
 8010260:	e00c      	b.n	801027c <ProcessMacCommands+0x9a8>
                break;
 8010262:	bf00      	nop
 8010264:	e00a      	b.n	801027c <ProcessMacCommands+0x9a8>
                break;
 8010266:	bf00      	nop
 8010268:	e008      	b.n	801027c <ProcessMacCommands+0x9a8>
                break;
 801026a:	bf00      	nop
 801026c:	e006      	b.n	801027c <ProcessMacCommands+0x9a8>
                break;
 801026e:	bf00      	nop
 8010270:	e004      	b.n	801027c <ProcessMacCommands+0x9a8>
                break;
 8010272:	bf00      	nop
 8010274:	e002      	b.n	801027c <ProcessMacCommands+0x9a8>
                break;
 8010276:	bf00      	nop
 8010278:	e000      	b.n	801027c <ProcessMacCommands+0x9a8>
                break;
 801027a:	bf00      	nop
    while( macIndex < commandsSize )
 801027c:	78fa      	ldrb	r2, [r7, #3]
 801027e:	78bb      	ldrb	r3, [r7, #2]
 8010280:	429a      	cmp	r2, r3
 8010282:	f4ff ab49 	bcc.w	800f918 <ProcessMacCommands+0x44>
 8010286:	e004      	b.n	8010292 <ProcessMacCommands+0x9be>
        return;
 8010288:	bf00      	nop
 801028a:	e002      	b.n	8010292 <ProcessMacCommands+0x9be>
            return;
 801028c:	bf00      	nop
 801028e:	e000      	b.n	8010292 <ProcessMacCommands+0x9be>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 8010290:	bf00      	nop
        }
    }
}
 8010292:	378c      	adds	r7, #140	@ 0x8c
 8010294:	46bd      	mov	sp, r7
 8010296:	bd90      	pop	{r4, r7, pc}
 8010298:	12d53d80 	.word	0x12d53d80
 801029c:	200008f4 	.word	0x200008f4
 80102a0:	200019a4 	.word	0x200019a4

080102a4 <Send>:

/* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 80102a4:	b580      	push	{r7, lr}
 80102a6:	b08e      	sub	sp, #56	@ 0x38
 80102a8:	af02      	add	r7, sp, #8
 80102aa:	60f8      	str	r0, [r7, #12]
 80102ac:	607a      	str	r2, [r7, #4]
 80102ae:	461a      	mov	r2, r3
 80102b0:	460b      	mov	r3, r1
 80102b2:	72fb      	strb	r3, [r7, #11]
 80102b4:	4613      	mov	r3, r2
 80102b6:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80102b8:	2303      	movs	r3, #3
 80102ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 80102be:	4b66      	ldr	r3, [pc, #408]	@ (8010458 <Send+0x1b4>)
 80102c0:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80102c4:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 80102c8:	4b63      	ldr	r3, [pc, #396]	@ (8010458 <Send+0x1b4>)
 80102ca:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80102ce:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80102d2:	4b61      	ldr	r3, [pc, #388]	@ (8010458 <Send+0x1b4>)
 80102d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80102d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80102d8:	4b5f      	ldr	r3, [pc, #380]	@ (8010458 <Send+0x1b4>)
 80102da:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d101      	bne.n	80102e6 <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 80102e2:	2307      	movs	r3, #7
 80102e4:	e0b4      	b.n	8010450 <Send+0x1ac>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 80102e6:	4b5c      	ldr	r3, [pc, #368]	@ (8010458 <Send+0x1b4>)
 80102e8:	f893 3107 	ldrb.w	r3, [r3, #263]	@ 0x107
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d102      	bne.n	80102f6 <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 80102f0:	4b59      	ldr	r3, [pc, #356]	@ (8010458 <Send+0x1b4>)
 80102f2:	2200      	movs	r2, #0
 80102f4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    fCtrl.Value = 0;
 80102f6:	2300      	movs	r3, #0
 80102f8:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 80102fc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8010300:	f023 030f 	bic.w	r3, r3, #15
 8010304:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 8010308:	4b53      	ldr	r3, [pc, #332]	@ (8010458 <Send+0x1b4>)
 801030a:	f893 2106 	ldrb.w	r2, [r3, #262]	@ 0x106
 801030e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8010312:	f362 13c7 	bfi	r3, r2, #7, #1
 8010316:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 801031a:	4b4f      	ldr	r3, [pc, #316]	@ (8010458 <Send+0x1b4>)
 801031c:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8010320:	2b01      	cmp	r3, #1
 8010322:	d106      	bne.n	8010332 <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 8010324:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8010328:	f043 0310 	orr.w	r3, r3, #16
 801032c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 8010330:	e005      	b.n	801033e <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 8010332:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8010336:	f023 0310 	bic.w	r3, r3, #16
 801033a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 801033e:	4b46      	ldr	r3, [pc, #280]	@ (8010458 <Send+0x1b4>)
 8010340:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8010344:	2b00      	cmp	r3, #0
 8010346:	d005      	beq.n	8010354 <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 8010348:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 801034c:	f043 0320 	orr.w	r3, r3, #32
 8010350:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    adrNext.Region = Nvm.MacGroup2.Region;

    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
                                               &Nvm.MacGroup1.ChannelsTxPower, &adrAckCounter );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    adrNext.UpdateChanMask = true;
 8010354:	2301      	movs	r3, #1
 8010356:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 8010358:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 801035c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8010360:	b2db      	uxtb	r3, r3
 8010362:	2b00      	cmp	r3, #0
 8010364:	bf14      	ite	ne
 8010366:	2301      	movne	r3, #1
 8010368:	2300      	moveq	r3, #0
 801036a:	b2db      	uxtb	r3, r3
 801036c:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 801036e:	4b3a      	ldr	r3, [pc, #232]	@ (8010458 <Send+0x1b4>)
 8010370:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010372:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8010374:	4b39      	ldr	r3, [pc, #228]	@ (801045c <Send+0x1b8>)
 8010376:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 801037a:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 801037c:	4b37      	ldr	r3, [pc, #220]	@ (801045c <Send+0x1b8>)
 801037e:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	@ 0x402
 8010382:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010384:	4b34      	ldr	r3, [pc, #208]	@ (8010458 <Send+0x1b4>)
 8010386:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 801038a:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 801038e:	4b32      	ldr	r3, [pc, #200]	@ (8010458 <Send+0x1b4>)
 8010390:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 8010394:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    adrNext.NbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8010398:	4b2f      	ldr	r3, [pc, #188]	@ (8010458 <Send+0x1b4>)
 801039a:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 801039e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80103a2:	4b2d      	ldr	r3, [pc, #180]	@ (8010458 <Send+0x1b4>)
 80103a4:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 80103a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 80103ac:	4b2a      	ldr	r3, [pc, #168]	@ (8010458 <Send+0x1b4>)
 80103ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80103b2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 80103b6:	f107 0014 	add.w	r0, r7, #20
 80103ba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80103be:	9300      	str	r3, [sp, #0]
 80103c0:	4b27      	ldr	r3, [pc, #156]	@ (8010460 <Send+0x1bc>)
 80103c2:	4a28      	ldr	r2, [pc, #160]	@ (8010464 <Send+0x1c0>)
 80103c4:	4928      	ldr	r1, [pc, #160]	@ (8010468 <Send+0x1c4>)
 80103c6:	f002 fbc9 	bl	8012b5c <LoRaMacAdrCalcNext>
 80103ca:	4603      	mov	r3, r0
 80103cc:	461a      	mov	r2, r3
 80103ce:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80103d2:	f362 1386 	bfi	r3, r2, #6, #1
 80103d6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower,
                                               &Nvm.MacGroup2.MacParams.ChannelsNbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 80103da:	7afa      	ldrb	r2, [r7, #11]
 80103dc:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 80103e0:	893b      	ldrh	r3, [r7, #8]
 80103e2:	9300      	str	r3, [sp, #0]
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	68f8      	ldr	r0, [r7, #12]
 80103e8:	f000 fc42 	bl	8010c70 <PrepareFrame>
 80103ec:	4603      	mov	r3, r0
 80103ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 80103f2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d003      	beq.n	8010402 <Send+0x15e>
 80103fa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80103fe:	2b0a      	cmp	r3, #10
 8010400:	d107      	bne.n	8010412 <Send+0x16e>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 8010402:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8010406:	4618      	mov	r0, r3
 8010408:	f000 f96e 	bl	80106e8 <ScheduleTx>
 801040c:	4603      	mov	r3, r0
 801040e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 8010412:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010416:	2b00      	cmp	r3, #0
 8010418:	d00a      	beq.n	8010430 <Send+0x18c>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 801041a:	4a0f      	ldr	r2, [pc, #60]	@ (8010458 <Send+0x1b4>)
 801041c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8010420:	f882 3039 	strb.w	r3, [r2, #57]	@ 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 8010424:	4a0c      	ldr	r2, [pc, #48]	@ (8010458 <Send+0x1b4>)
 8010426:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 801042a:	f882 3038 	strb.w	r3, [r2, #56]	@ 0x38
 801042e:	e00d      	b.n	801044c <Send+0x1a8>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 8010430:	4b09      	ldr	r3, [pc, #36]	@ (8010458 <Send+0x1b4>)
 8010432:	2200      	movs	r2, #0
 8010434:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 8010438:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801043a:	4a07      	ldr	r2, [pc, #28]	@ (8010458 <Send+0x1b4>)
 801043c:	6293      	str	r3, [r2, #40]	@ 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 801043e:	f002 fedb 	bl	80131f8 <LoRaMacCommandsRemoveNoneStickyCmds>
 8010442:	4603      	mov	r3, r0
 8010444:	2b00      	cmp	r3, #0
 8010446:	d001      	beq.n	801044c <Send+0x1a8>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010448:	2313      	movs	r3, #19
 801044a:	e001      	b.n	8010450 <Send+0x1ac>
        }
    }
    return status;
 801044c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8010450:	4618      	mov	r0, r3
 8010452:	3730      	adds	r7, #48	@ 0x30
 8010454:	46bd      	mov	sp, r7
 8010456:	bd80      	pop	{r7, pc}
 8010458:	20000e14 	.word	0x20000e14
 801045c:	200008f4 	.word	0x200008f4
 8010460:	20000e74 	.word	0x20000e74
 8010464:	20000e4c 	.word	0x20000e4c
 8010468:	20000e4d 	.word	0x20000e4d

0801046c <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 801046c:	b580      	push	{r7, lr}
 801046e:	b084      	sub	sp, #16
 8010470:	af00      	add	r7, sp, #0
 8010472:	4603      	mov	r3, r0
 8010474:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010476:	2300      	movs	r3, #0
 8010478:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 801047a:	2300      	movs	r3, #0
 801047c:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 801047e:	2301      	movs	r3, #1
 8010480:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 8010482:	79fb      	ldrb	r3, [r7, #7]
 8010484:	2bff      	cmp	r3, #255	@ 0xff
 8010486:	d129      	bne.n	80104dc <SendReJoinReq+0x70>
    {
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 8010488:	2000      	movs	r0, #0
 801048a:	f7ff f901 	bl	800f690 <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 801048e:	4b1a      	ldr	r3, [pc, #104]	@ (80104f8 <SendReJoinReq+0x8c>)
 8010490:	2200      	movs	r2, #0
 8010492:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 8010496:	4b18      	ldr	r3, [pc, #96]	@ (80104f8 <SendReJoinReq+0x8c>)
 8010498:	4a18      	ldr	r2, [pc, #96]	@ (80104fc <SendReJoinReq+0x90>)
 801049a:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 801049e:	4b16      	ldr	r3, [pc, #88]	@ (80104f8 <SendReJoinReq+0x8c>)
 80104a0:	22ff      	movs	r2, #255	@ 0xff
 80104a2:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 80104a6:	7b3b      	ldrb	r3, [r7, #12]
 80104a8:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 80104ac:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 80104ae:	7b3a      	ldrb	r2, [r7, #12]
 80104b0:	4b11      	ldr	r3, [pc, #68]	@ (80104f8 <SendReJoinReq+0x8c>)
 80104b2:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d

            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 80104b6:	f7fc f869 	bl	800c58c <SecureElementGetJoinEui>
 80104ba:	4603      	mov	r3, r0
 80104bc:	2208      	movs	r2, #8
 80104be:	4619      	mov	r1, r3
 80104c0:	480f      	ldr	r0, [pc, #60]	@ (8010500 <SendReJoinReq+0x94>)
 80104c2:	f006 fe30 	bl	8017126 <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 80104c6:	f7fc f83f 	bl	800c548 <SecureElementGetDevEui>
 80104ca:	4603      	mov	r3, r0
 80104cc:	2208      	movs	r2, #8
 80104ce:	4619      	mov	r1, r3
 80104d0:	480c      	ldr	r0, [pc, #48]	@ (8010504 <SendReJoinReq+0x98>)
 80104d2:	f006 fe28 	bl	8017126 <memcpy1>

            allowDelayedTx = false;
 80104d6:	2300      	movs	r3, #0
 80104d8:	73fb      	strb	r3, [r7, #15]

            break;
 80104da:	e002      	b.n	80104e2 <SendReJoinReq+0x76>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 80104dc:	2302      	movs	r3, #2
 80104de:	73bb      	strb	r3, [r7, #14]
            break;
 80104e0:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 80104e2:	7bfb      	ldrb	r3, [r7, #15]
 80104e4:	4618      	mov	r0, r3
 80104e6:	f000 f8ff 	bl	80106e8 <ScheduleTx>
 80104ea:	4603      	mov	r3, r0
 80104ec:	73bb      	strb	r3, [r7, #14]
    return status;
 80104ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80104f0:	4618      	mov	r0, r3
 80104f2:	3710      	adds	r7, #16
 80104f4:	46bd      	mov	sp, r7
 80104f6:	bd80      	pop	{r7, pc}
 80104f8:	200008f4 	.word	0x200008f4
 80104fc:	200008f6 	.word	0x200008f6
 8010500:	20000a02 	.word	0x20000a02
 8010504:	20000a0a 	.word	0x20000a0a

08010508 <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 8010508:	b580      	push	{r7, lr}
 801050a:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 801050c:	f002 fc36 	bl	8012d7c <LoRaMacClassBIsBeaconExpected>
 8010510:	4603      	mov	r3, r0
 8010512:	2b00      	cmp	r3, #0
 8010514:	d001      	beq.n	801051a <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 8010516:	230e      	movs	r3, #14
 8010518:	e013      	b.n	8010542 <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 801051a:	4b0b      	ldr	r3, [pc, #44]	@ (8010548 <CheckForClassBCollision+0x40>)
 801051c:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8010520:	2b01      	cmp	r3, #1
 8010522:	d10d      	bne.n	8010540 <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8010524:	f002 fc31 	bl	8012d8a <LoRaMacClassBIsPingExpected>
 8010528:	4603      	mov	r3, r0
 801052a:	2b00      	cmp	r3, #0
 801052c:	d001      	beq.n	8010532 <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 801052e:	230f      	movs	r3, #15
 8010530:	e007      	b.n	8010542 <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8010532:	f002 fc31 	bl	8012d98 <LoRaMacClassBIsMulticastExpected>
 8010536:	4603      	mov	r3, r0
 8010538:	2b00      	cmp	r3, #0
 801053a:	d001      	beq.n	8010540 <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 801053c:	230f      	movs	r3, #15
 801053e:	e000      	b.n	8010542 <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 8010540:	2300      	movs	r3, #0
}
 8010542:	4618      	mov	r0, r3
 8010544:	bd80      	pop	{r7, pc}
 8010546:	bf00      	nop
 8010548:	20000e14 	.word	0x20000e14

0801054c <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 801054c:	b590      	push	{r4, r7, lr}
 801054e:	b083      	sub	sp, #12
 8010550:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8010552:	4b2d      	ldr	r3, [pc, #180]	@ (8010608 <ComputeRxWindowParameters+0xbc>)
 8010554:	f893 4040 	ldrb.w	r4, [r3, #64]	@ 0x40
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8010558:	4b2b      	ldr	r3, [pc, #172]	@ (8010608 <ComputeRxWindowParameters+0xbc>)
 801055a:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 801055e:	4b2a      	ldr	r3, [pc, #168]	@ (8010608 <ComputeRxWindowParameters+0xbc>)
 8010560:	f893 1075 	ldrb.w	r1, [r3, #117]	@ 0x75
 8010564:	4b28      	ldr	r3, [pc, #160]	@ (8010608 <ComputeRxWindowParameters+0xbc>)
 8010566:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 801056a:	4b27      	ldr	r3, [pc, #156]	@ (8010608 <ComputeRxWindowParameters+0xbc>)
 801056c:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8010570:	b25b      	sxtb	r3, r3
 8010572:	f004 fc8c 	bl	8014e8e <RegionApplyDrOffset>
 8010576:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8010578:	b259      	sxtb	r1, r3
 801057a:	4b23      	ldr	r3, [pc, #140]	@ (8010608 <ComputeRxWindowParameters+0xbc>)
 801057c:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8010580:	4b21      	ldr	r3, [pc, #132]	@ (8010608 <ComputeRxWindowParameters+0xbc>)
 8010582:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010584:	4821      	ldr	r0, [pc, #132]	@ (801060c <ComputeRxWindowParameters+0xc0>)
 8010586:	9000      	str	r0, [sp, #0]
 8010588:	4620      	mov	r0, r4
 801058a:	f004 fba2 	bl	8014cd2 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 801058e:	4b1e      	ldr	r3, [pc, #120]	@ (8010608 <ComputeRxWindowParameters+0xbc>)
 8010590:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 8010594:	4b1c      	ldr	r3, [pc, #112]	@ (8010608 <ComputeRxWindowParameters+0xbc>)
 8010596:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 801059a:	b259      	sxtb	r1, r3
 801059c:	4b1a      	ldr	r3, [pc, #104]	@ (8010608 <ComputeRxWindowParameters+0xbc>)
 801059e:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 80105a2:	4b19      	ldr	r3, [pc, #100]	@ (8010608 <ComputeRxWindowParameters+0xbc>)
 80105a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80105a6:	4c1a      	ldr	r4, [pc, #104]	@ (8010610 <ComputeRxWindowParameters+0xc4>)
 80105a8:	9400      	str	r4, [sp, #0]
 80105aa:	f004 fb92 	bl	8014cd2 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 80105ae:	4b16      	ldr	r3, [pc, #88]	@ (8010608 <ComputeRxWindowParameters+0xbc>)
 80105b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80105b2:	4a18      	ldr	r2, [pc, #96]	@ (8010614 <ComputeRxWindowParameters+0xc8>)
 80105b4:	f8d2 23c4 	ldr.w	r2, [r2, #964]	@ 0x3c4
 80105b8:	4413      	add	r3, r2
 80105ba:	4a16      	ldr	r2, [pc, #88]	@ (8010614 <ComputeRxWindowParameters+0xc8>)
 80105bc:	f8c2 33b0 	str.w	r3, [r2, #944]	@ 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 80105c0:	4b11      	ldr	r3, [pc, #68]	@ (8010608 <ComputeRxWindowParameters+0xbc>)
 80105c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80105c4:	4a13      	ldr	r2, [pc, #76]	@ (8010614 <ComputeRxWindowParameters+0xc8>)
 80105c6:	f8d2 23dc 	ldr.w	r2, [r2, #988]	@ 0x3dc
 80105ca:	4413      	add	r3, r2
 80105cc:	4a11      	ldr	r2, [pc, #68]	@ (8010614 <ComputeRxWindowParameters+0xc8>)
 80105ce:	f8c2 33b4 	str.w	r3, [r2, #948]	@ 0x3b4

    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80105d2:	4b0d      	ldr	r3, [pc, #52]	@ (8010608 <ComputeRxWindowParameters+0xbc>)
 80105d4:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d111      	bne.n	8010600 <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 80105dc:	4b0a      	ldr	r3, [pc, #40]	@ (8010608 <ComputeRxWindowParameters+0xbc>)
 80105de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80105e0:	4a0c      	ldr	r2, [pc, #48]	@ (8010614 <ComputeRxWindowParameters+0xc8>)
 80105e2:	f8d2 23c4 	ldr.w	r2, [r2, #964]	@ 0x3c4
 80105e6:	4413      	add	r3, r2
 80105e8:	4a0a      	ldr	r2, [pc, #40]	@ (8010614 <ComputeRxWindowParameters+0xc8>)
 80105ea:	f8c2 33b0 	str.w	r3, [r2, #944]	@ 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 80105ee:	4b06      	ldr	r3, [pc, #24]	@ (8010608 <ComputeRxWindowParameters+0xbc>)
 80105f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80105f2:	4a08      	ldr	r2, [pc, #32]	@ (8010614 <ComputeRxWindowParameters+0xc8>)
 80105f4:	f8d2 23dc 	ldr.w	r2, [r2, #988]	@ 0x3dc
 80105f8:	4413      	add	r3, r2
 80105fa:	4a06      	ldr	r2, [pc, #24]	@ (8010614 <ComputeRxWindowParameters+0xc8>)
 80105fc:	f8c2 33b4 	str.w	r3, [r2, #948]	@ 0x3b4
    }
}
 8010600:	bf00      	nop
 8010602:	3704      	adds	r7, #4
 8010604:	46bd      	mov	sp, r7
 8010606:	bd90      	pop	{r4, r7, pc}
 8010608:	20000e14 	.word	0x20000e14
 801060c:	20000cac 	.word	0x20000cac
 8010610:	20000cc4 	.word	0x20000cc4
 8010614:	200008f4 	.word	0x200008f4

08010618 <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 8010618:	b580      	push	{r7, lr}
 801061a:	b082      	sub	sp, #8
 801061c:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 801061e:	2300      	movs	r3, #0
 8010620:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8010622:	4b13      	ldr	r3, [pc, #76]	@ (8010670 <VerifyTxFrame+0x58>)
 8010624:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 8010628:	2b00      	cmp	r3, #0
 801062a:	d01b      	beq.n	8010664 <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 801062c:	1d3b      	adds	r3, r7, #4
 801062e:	4618      	mov	r0, r3
 8010630:	f002 fe28 	bl	8013284 <LoRaMacCommandsGetSizeSerializedCmds>
 8010634:	4603      	mov	r3, r0
 8010636:	2b00      	cmp	r3, #0
 8010638:	d001      	beq.n	801063e <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801063a:	2313      	movs	r3, #19
 801063c:	e013      	b.n	8010666 <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 801063e:	4b0d      	ldr	r3, [pc, #52]	@ (8010674 <VerifyTxFrame+0x5c>)
 8010640:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8010644:	4a0a      	ldr	r2, [pc, #40]	@ (8010670 <VerifyTxFrame+0x58>)
 8010646:	f992 1039 	ldrsb.w	r1, [r2, #57]	@ 0x39
 801064a:	687a      	ldr	r2, [r7, #4]
 801064c:	b2d2      	uxtb	r2, r2
 801064e:	4618      	mov	r0, r3
 8010650:	f7ff f918 	bl	800f884 <ValidatePayloadLength>
 8010654:	4603      	mov	r3, r0
 8010656:	f083 0301 	eor.w	r3, r3, #1
 801065a:	b2db      	uxtb	r3, r3
 801065c:	2b00      	cmp	r3, #0
 801065e:	d001      	beq.n	8010664 <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 8010660:	2308      	movs	r3, #8
 8010662:	e000      	b.n	8010666 <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 8010664:	2300      	movs	r3, #0
}
 8010666:	4618      	mov	r0, r3
 8010668:	3708      	adds	r7, #8
 801066a:	46bd      	mov	sp, r7
 801066c:	bd80      	pop	{r7, pc}
 801066e:	bf00      	nop
 8010670:	20000e14 	.word	0x20000e14
 8010674:	200008f4 	.word	0x200008f4

08010678 <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 8010678:	b580      	push	{r7, lr}
 801067a:	b082      	sub	sp, #8
 801067c:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 801067e:	4b18      	ldr	r3, [pc, #96]	@ (80106e0 <SerializeTxFrame+0x68>)
 8010680:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8010684:	2b00      	cmp	r3, #0
 8010686:	d002      	beq.n	801068e <SerializeTxFrame+0x16>
 8010688:	2b04      	cmp	r3, #4
 801068a:	d011      	beq.n	80106b0 <SerializeTxFrame+0x38>
 801068c:	e021      	b.n	80106d2 <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 801068e:	4815      	ldr	r0, [pc, #84]	@ (80106e4 <SerializeTxFrame+0x6c>)
 8010690:	f004 f921 	bl	80148d6 <LoRaMacSerializerJoinRequest>
 8010694:	4603      	mov	r3, r0
 8010696:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8010698:	79fb      	ldrb	r3, [r7, #7]
 801069a:	2b00      	cmp	r3, #0
 801069c:	d001      	beq.n	80106a2 <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 801069e:	2311      	movs	r3, #17
 80106a0:	e01a      	b.n	80106d8 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 80106a2:	4b0f      	ldr	r3, [pc, #60]	@ (80106e0 <SerializeTxFrame+0x68>)
 80106a4:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 80106a8:	461a      	mov	r2, r3
 80106aa:	4b0d      	ldr	r3, [pc, #52]	@ (80106e0 <SerializeTxFrame+0x68>)
 80106ac:	801a      	strh	r2, [r3, #0]
            break;
 80106ae:	e012      	b.n	80106d6 <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 80106b0:	480c      	ldr	r0, [pc, #48]	@ (80106e4 <SerializeTxFrame+0x6c>)
 80106b2:	f004 f992 	bl	80149da <LoRaMacSerializerData>
 80106b6:	4603      	mov	r3, r0
 80106b8:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 80106ba:	79fb      	ldrb	r3, [r7, #7]
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d001      	beq.n	80106c4 <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80106c0:	2311      	movs	r3, #17
 80106c2:	e009      	b.n	80106d8 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 80106c4:	4b06      	ldr	r3, [pc, #24]	@ (80106e0 <SerializeTxFrame+0x68>)
 80106c6:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 80106ca:	461a      	mov	r2, r3
 80106cc:	4b04      	ldr	r3, [pc, #16]	@ (80106e0 <SerializeTxFrame+0x68>)
 80106ce:	801a      	strh	r2, [r3, #0]
            break;
 80106d0:	e001      	b.n	80106d6 <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 80106d2:	2303      	movs	r3, #3
 80106d4:	e000      	b.n	80106d8 <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 80106d6:	2300      	movs	r3, #0
}
 80106d8:	4618      	mov	r0, r3
 80106da:	3708      	adds	r7, #8
 80106dc:	46bd      	mov	sp, r7
 80106de:	bd80      	pop	{r7, pc}
 80106e0:	200008f4 	.word	0x200008f4
 80106e4:	200009fc 	.word	0x200009fc

080106e8 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 80106e8:	b580      	push	{r7, lr}
 80106ea:	b090      	sub	sp, #64	@ 0x40
 80106ec:	af02      	add	r7, sp, #8
 80106ee:	4603      	mov	r3, r0
 80106f0:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80106f2:	2303      	movs	r3, #3
 80106f4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 80106f8:	f7ff ff06 	bl	8010508 <CheckForClassBCollision>
 80106fc:	4603      	mov	r3, r0
 80106fe:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 8010702:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010706:	2b00      	cmp	r3, #0
 8010708:	d002      	beq.n	8010710 <ScheduleTx+0x28>
    {
        return status;
 801070a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801070e:	e08f      	b.n	8010830 <ScheduleTx+0x148>
    }

    // Update back-off
    CalculateBackOff( );
 8010710:	f000 f8f4 	bl	80108fc <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 8010714:	f7ff ffb0 	bl	8010678 <SerializeTxFrame>
 8010718:	4603      	mov	r3, r0
 801071a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 801071e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010722:	2b00      	cmp	r3, #0
 8010724:	d002      	beq.n	801072c <ScheduleTx+0x44>
    {
        return status;
 8010726:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801072a:	e081      	b.n	8010830 <ScheduleTx+0x148>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 801072c:	4b42      	ldr	r3, [pc, #264]	@ (8010838 <ScheduleTx+0x150>)
 801072e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010730:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010732:	4b41      	ldr	r3, [pc, #260]	@ (8010838 <ScheduleTx+0x150>)
 8010734:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8010738:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 801073a:	4b3f      	ldr	r3, [pc, #252]	@ (8010838 <ScheduleTx+0x150>)
 801073c:	f893 3108 	ldrb.w	r3, [r3, #264]	@ 0x108
 8010740:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8010742:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8010746:	4618      	mov	r0, r3
 8010748:	f00a f90c 	bl	801a964 <SysTimeGetMcuTime>
 801074c:	4638      	mov	r0, r7
 801074e:	4b3a      	ldr	r3, [pc, #232]	@ (8010838 <ScheduleTx+0x150>)
 8010750:	f8d3 2114 	ldr.w	r2, [r3, #276]	@ 0x114
 8010754:	9200      	str	r2, [sp, #0]
 8010756:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 801075a:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 801075e:	ca06      	ldmia	r2, {r1, r2}
 8010760:	f00a f861 	bl	801a826 <SysTimeSub>
 8010764:	f107 0320 	add.w	r3, r7, #32
 8010768:	463a      	mov	r2, r7
 801076a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801076e:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 8010772:	4b31      	ldr	r3, [pc, #196]	@ (8010838 <ScheduleTx+0x150>)
 8010774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010776:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 8010778:	2300      	movs	r3, #0
 801077a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    nextChan.Joined = true;
 801077e:	2301      	movs	r3, #1
 8010780:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 8010782:	4b2e      	ldr	r3, [pc, #184]	@ (801083c <ScheduleTx+0x154>)
 8010784:	881b      	ldrh	r3, [r3, #0]
 8010786:	857b      	strh	r3, [r7, #42]	@ 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8010788:	4b2b      	ldr	r3, [pc, #172]	@ (8010838 <ScheduleTx+0x150>)
 801078a:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 801078e:	2b00      	cmp	r3, #0
 8010790:	d104      	bne.n	801079c <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 8010792:	2301      	movs	r3, #1
 8010794:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        nextChan.Joined = false;
 8010798:	2300      	movs	r3, #0
 801079a:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 801079c:	4b26      	ldr	r3, [pc, #152]	@ (8010838 <ScheduleTx+0x150>)
 801079e:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 80107a2:	f107 0114 	add.w	r1, r7, #20
 80107a6:	4b26      	ldr	r3, [pc, #152]	@ (8010840 <ScheduleTx+0x158>)
 80107a8:	9300      	str	r3, [sp, #0]
 80107aa:	4b26      	ldr	r3, [pc, #152]	@ (8010844 <ScheduleTx+0x15c>)
 80107ac:	4a26      	ldr	r2, [pc, #152]	@ (8010848 <ScheduleTx+0x160>)
 80107ae:	f004 fb56 	bl	8014e5e <RegionNextChannel>
 80107b2:	4603      	mov	r3, r0
 80107b4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if( status != LORAMAC_STATUS_OK )
 80107b8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d022      	beq.n	8010806 <ScheduleTx+0x11e>
    {
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 80107c0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80107c4:	2b0b      	cmp	r3, #11
 80107c6:	d11b      	bne.n	8010800 <ScheduleTx+0x118>
 80107c8:	7bfb      	ldrb	r3, [r7, #15]
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	d018      	beq.n	8010800 <ScheduleTx+0x118>
            ( allowDelayedTx == true ) )
        {
            // Allow delayed transmissions. We have to allow it in case
            // the MAC must retransmit a frame with the frame repetitions
            if( MacCtx.DutyCycleWaitTime != 0 )
 80107ce:	4b1b      	ldr	r3, [pc, #108]	@ (801083c <ScheduleTx+0x154>)
 80107d0:	f8d3 3498 	ldr.w	r3, [r3, #1176]	@ 0x498
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d011      	beq.n	80107fc <ScheduleTx+0x114>
            {// Send later - prepare timer
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 80107d8:	4b18      	ldr	r3, [pc, #96]	@ (801083c <ScheduleTx+0x154>)
 80107da:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80107de:	f043 0320 	orr.w	r3, r3, #32
 80107e2:	4a16      	ldr	r2, [pc, #88]	@ (801083c <ScheduleTx+0x154>)
 80107e4:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 80107e8:	4b14      	ldr	r3, [pc, #80]	@ (801083c <ScheduleTx+0x154>)
 80107ea:	f8d3 3498 	ldr.w	r3, [r3, #1176]	@ 0x498
 80107ee:	4619      	mov	r1, r3
 80107f0:	4816      	ldr	r0, [pc, #88]	@ (801084c <ScheduleTx+0x164>)
 80107f2:	f00a fe55 	bl	801b4a0 <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 80107f6:	4815      	ldr	r0, [pc, #84]	@ (801084c <ScheduleTx+0x164>)
 80107f8:	f00a fd74 	bl	801b2e4 <UTIL_TIMER_Start>
            }
            return LORAMAC_STATUS_OK;
 80107fc:	2300      	movs	r3, #0
 80107fe:	e017      	b.n	8010830 <ScheduleTx+0x148>
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 8010800:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010804:	e014      	b.n	8010830 <ScheduleTx+0x148>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 8010806:	f7ff fea1 	bl	801054c <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 801080a:	f7ff ff05 	bl	8010618 <VerifyTxFrame>
 801080e:	4603      	mov	r3, r0
 8010810:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 8010814:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010818:	2b00      	cmp	r3, #0
 801081a:	d002      	beq.n	8010822 <ScheduleTx+0x13a>
    {
        return status;
 801081c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010820:	e006      	b.n	8010830 <ScheduleTx+0x148>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 8010822:	4b06      	ldr	r3, [pc, #24]	@ (801083c <ScheduleTx+0x154>)
 8010824:	f893 341f 	ldrb.w	r3, [r3, #1055]	@ 0x41f
 8010828:	4618      	mov	r0, r3
 801082a:	f000 fb3b 	bl	8010ea4 <SendFrameOnChannel>
 801082e:	4603      	mov	r3, r0
}
 8010830:	4618      	mov	r0, r3
 8010832:	3738      	adds	r7, #56	@ 0x38
 8010834:	46bd      	mov	sp, r7
 8010836:	bd80      	pop	{r7, pc}
 8010838:	20000e14 	.word	0x20000e14
 801083c:	200008f4 	.word	0x200008f4
 8010840:	20000e44 	.word	0x20000e44
 8010844:	20000d8c 	.word	0x20000d8c
 8010848:	20000d13 	.word	0x20000d13
 801084c:	20000c5c 	.word	0x20000c5c

08010850 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 8010850:	b580      	push	{r7, lr}
 8010852:	b084      	sub	sp, #16
 8010854:	af00      	add	r7, sp, #0
 8010856:	4603      	mov	r3, r0
 8010858:	460a      	mov	r2, r1
 801085a:	71fb      	strb	r3, [r7, #7]
 801085c:	4613      	mov	r3, r2
 801085e:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 8010860:	2312      	movs	r3, #18
 8010862:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 8010864:	2300      	movs	r3, #0
 8010866:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 8010868:	4b22      	ldr	r3, [pc, #136]	@ (80108f4 <SecureFrame+0xa4>)
 801086a:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 801086e:	2b00      	cmp	r3, #0
 8010870:	d002      	beq.n	8010878 <SecureFrame+0x28>
 8010872:	2b04      	cmp	r3, #4
 8010874:	d011      	beq.n	801089a <SecureFrame+0x4a>
 8010876:	e036      	b.n	80108e6 <SecureFrame+0x96>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8010878:	481f      	ldr	r0, [pc, #124]	@ (80108f8 <SecureFrame+0xa8>)
 801087a:	f003 fc03 	bl	8014084 <LoRaMacCryptoPrepareJoinRequest>
 801087e:	4603      	mov	r3, r0
 8010880:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8010882:	7bfb      	ldrb	r3, [r7, #15]
 8010884:	2b00      	cmp	r3, #0
 8010886:	d001      	beq.n	801088c <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8010888:	2311      	movs	r3, #17
 801088a:	e02f      	b.n	80108ec <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 801088c:	4b19      	ldr	r3, [pc, #100]	@ (80108f4 <SecureFrame+0xa4>)
 801088e:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8010892:	461a      	mov	r2, r3
 8010894:	4b17      	ldr	r3, [pc, #92]	@ (80108f4 <SecureFrame+0xa4>)
 8010896:	801a      	strh	r2, [r3, #0]
            break;
 8010898:	e027      	b.n	80108ea <SecureFrame+0x9a>
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 801089a:	f107 0308 	add.w	r3, r7, #8
 801089e:	4618      	mov	r0, r3
 80108a0:	f003 fb34 	bl	8013f0c <LoRaMacCryptoGetFCntUp>
 80108a4:	4603      	mov	r3, r0
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d001      	beq.n	80108ae <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 80108aa:	2312      	movs	r3, #18
 80108ac:	e01e      	b.n	80108ec <SecureFrame+0x9c>
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            if( MacCtx.ChannelsNbTransCounter >= 1 )
 80108ae:	4b11      	ldr	r3, [pc, #68]	@ (80108f4 <SecureFrame+0xa4>)
 80108b0:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d002      	beq.n	80108be <SecureFrame+0x6e>
#endif /* LORAMAC_VERSION */
            {
                fCntUp -= 1;
 80108b8:	68bb      	ldr	r3, [r7, #8]
 80108ba:	3b01      	subs	r3, #1
 80108bc:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 80108be:	68b8      	ldr	r0, [r7, #8]
 80108c0:	79ba      	ldrb	r2, [r7, #6]
 80108c2:	79f9      	ldrb	r1, [r7, #7]
 80108c4:	4b0c      	ldr	r3, [pc, #48]	@ (80108f8 <SecureFrame+0xa8>)
 80108c6:	f003 fced 	bl	80142a4 <LoRaMacCryptoSecureMessage>
 80108ca:	4603      	mov	r3, r0
 80108cc:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 80108ce:	7bfb      	ldrb	r3, [r7, #15]
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	d001      	beq.n	80108d8 <SecureFrame+0x88>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80108d4:	2311      	movs	r3, #17
 80108d6:	e009      	b.n	80108ec <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 80108d8:	4b06      	ldr	r3, [pc, #24]	@ (80108f4 <SecureFrame+0xa4>)
 80108da:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 80108de:	461a      	mov	r2, r3
 80108e0:	4b04      	ldr	r3, [pc, #16]	@ (80108f4 <SecureFrame+0xa4>)
 80108e2:	801a      	strh	r2, [r3, #0]
            break;
 80108e4:	e001      	b.n	80108ea <SecureFrame+0x9a>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 80108e6:	2303      	movs	r3, #3
 80108e8:	e000      	b.n	80108ec <SecureFrame+0x9c>
    }
    return LORAMAC_STATUS_OK;
 80108ea:	2300      	movs	r3, #0
}
 80108ec:	4618      	mov	r0, r3
 80108ee:	3710      	adds	r7, #16
 80108f0:	46bd      	mov	sp, r7
 80108f2:	bd80      	pop	{r7, pc}
 80108f4:	200008f4 	.word	0x200008f4
 80108f8:	200009fc 	.word	0x200009fc

080108fc <CalculateBackOff>:

static void CalculateBackOff( void )
{
 80108fc:	b480      	push	{r7}
 80108fe:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 8010900:	4b09      	ldr	r3, [pc, #36]	@ (8010928 <CalculateBackOff+0x2c>)
 8010902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010904:	2b00      	cmp	r3, #0
 8010906:	d10a      	bne.n	801091e <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 8010908:	4b07      	ldr	r3, [pc, #28]	@ (8010928 <CalculateBackOff+0x2c>)
 801090a:	f8b3 310c 	ldrh.w	r3, [r3, #268]	@ 0x10c
 801090e:	3b01      	subs	r3, #1
 8010910:	4a06      	ldr	r2, [pc, #24]	@ (801092c <CalculateBackOff+0x30>)
 8010912:	f8d2 2420 	ldr.w	r2, [r2, #1056]	@ 0x420
 8010916:	fb02 f303 	mul.w	r3, r2, r3
 801091a:	4a03      	ldr	r2, [pc, #12]	@ (8010928 <CalculateBackOff+0x2c>)
 801091c:	6313      	str	r3, [r2, #48]	@ 0x30
    }
}
 801091e:	bf00      	nop
 8010920:	46bd      	mov	sp, r7
 8010922:	bc80      	pop	{r7}
 8010924:	4770      	bx	lr
 8010926:	bf00      	nop
 8010928:	20000e14 	.word	0x20000e14
 801092c:	200008f4 	.word	0x200008f4

08010930 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 8010930:	b580      	push	{r7, lr}
 8010932:	b082      	sub	sp, #8
 8010934:	af00      	add	r7, sp, #0
 8010936:	4603      	mov	r3, r0
 8010938:	7139      	strb	r1, [r7, #4]
 801093a:	71fb      	strb	r3, [r7, #7]
 801093c:	4613      	mov	r3, r2
 801093e:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 8010940:	79fb      	ldrb	r3, [r7, #7]
 8010942:	2b00      	cmp	r3, #0
 8010944:	d002      	beq.n	801094c <RemoveMacCommands+0x1c>
 8010946:	79fb      	ldrb	r3, [r7, #7]
 8010948:	2b01      	cmp	r3, #1
 801094a:	d10d      	bne.n	8010968 <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 801094c:	79bb      	ldrb	r3, [r7, #6]
 801094e:	2b01      	cmp	r3, #1
 8010950:	d108      	bne.n	8010964 <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 8010952:	793b      	ldrb	r3, [r7, #4]
 8010954:	f003 0320 	and.w	r3, r3, #32
 8010958:	b2db      	uxtb	r3, r3
 801095a:	2b00      	cmp	r3, #0
 801095c:	d004      	beq.n	8010968 <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 801095e:	f002 fc6f 	bl	8013240 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 8010962:	e001      	b.n	8010968 <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 8010964:	f002 fc6c 	bl	8013240 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 8010968:	bf00      	nop
 801096a:	3708      	adds	r7, #8
 801096c:	46bd      	mov	sp, r7
 801096e:	bd80      	pop	{r7, pc}

08010970 <ResetMacParameters>:

static void ResetMacParameters( void )
{
 8010970:	b5b0      	push	{r4, r5, r7, lr}
 8010972:	b090      	sub	sp, #64	@ 0x40
 8010974:	af00      	add	r7, sp, #0
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 8010976:	4b70      	ldr	r3, [pc, #448]	@ (8010b38 <ResetMacParameters+0x1c8>)
 8010978:	2200      	movs	r2, #0
 801097a:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 801097e:	4b6e      	ldr	r3, [pc, #440]	@ (8010b38 <ResetMacParameters+0x1c8>)
 8010980:	2200      	movs	r2, #0
 8010982:	629a      	str	r2, [r3, #40]	@ 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 8010984:	4b6d      	ldr	r3, [pc, #436]	@ (8010b3c <ResetMacParameters+0x1cc>)
 8010986:	2200      	movs	r2, #0
 8010988:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetries = 1;
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetry = false;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RetransmitTimeoutRetry = false;
 801098c:	4b6b      	ldr	r3, [pc, #428]	@ (8010b3c <ResetMacParameters+0x1cc>)
 801098e:	2200      	movs	r2, #0
 8010990:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
    MacCtx.ResponseTimeoutStartTime = 0;
 8010994:	4b69      	ldr	r3, [pc, #420]	@ (8010b3c <ResetMacParameters+0x1cc>)
 8010996:	2200      	movs	r2, #0
 8010998:	f8c3 249c 	str.w	r2, [r3, #1180]	@ 0x49c
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.MaxDCycle = 0;
 801099c:	4b66      	ldr	r3, [pc, #408]	@ (8010b38 <ResetMacParameters+0x1c8>)
 801099e:	2200      	movs	r2, #0
 80109a0:	f883 2107 	strb.w	r2, [r3, #263]	@ 0x107
    Nvm.MacGroup2.AggregatedDCycle = 1;
 80109a4:	4b64      	ldr	r3, [pc, #400]	@ (8010b38 <ResetMacParameters+0x1c8>)
 80109a6:	2201      	movs	r2, #1
 80109a8:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 80109ac:	4b62      	ldr	r3, [pc, #392]	@ (8010b38 <ResetMacParameters+0x1c8>)
 80109ae:	f993 20cc 	ldrsb.w	r2, [r3, #204]	@ 0xcc
 80109b2:	4b61      	ldr	r3, [pc, #388]	@ (8010b38 <ResetMacParameters+0x1c8>)
 80109b4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 80109b8:	4b5f      	ldr	r3, [pc, #380]	@ (8010b38 <ResetMacParameters+0x1c8>)
 80109ba:	f993 20cd 	ldrsb.w	r2, [r3, #205]	@ 0xcd
 80109be:	4b5e      	ldr	r3, [pc, #376]	@ (8010b38 <ResetMacParameters+0x1c8>)
 80109c0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 80109c4:	4b5c      	ldr	r3, [pc, #368]	@ (8010b38 <ResetMacParameters+0x1c8>)
 80109c6:	f893 20a5 	ldrb.w	r2, [r3, #165]	@ 0xa5
 80109ca:	4b5b      	ldr	r3, [pc, #364]	@ (8010b38 <ResetMacParameters+0x1c8>)
 80109cc:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 80109d0:	4b59      	ldr	r3, [pc, #356]	@ (8010b38 <ResetMacParameters+0x1c8>)
 80109d2:	4a59      	ldr	r2, [pc, #356]	@ (8010b38 <ResetMacParameters+0x1c8>)
 80109d4:	3364      	adds	r3, #100	@ 0x64
 80109d6:	32a8      	adds	r2, #168	@ 0xa8
 80109d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80109dc:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 80109e0:	4b55      	ldr	r3, [pc, #340]	@ (8010b38 <ResetMacParameters+0x1c8>)
 80109e2:	4a55      	ldr	r2, [pc, #340]	@ (8010b38 <ResetMacParameters+0x1c8>)
 80109e4:	336c      	adds	r3, #108	@ 0x6c
 80109e6:	32b0      	adds	r2, #176	@ 0xb0
 80109e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80109ec:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 80109f0:	4b51      	ldr	r3, [pc, #324]	@ (8010b38 <ResetMacParameters+0x1c8>)
 80109f2:	f893 20b8 	ldrb.w	r2, [r3, #184]	@ 0xb8
 80109f6:	4b50      	ldr	r3, [pc, #320]	@ (8010b38 <ResetMacParameters+0x1c8>)
 80109f8:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 80109fc:	4b4e      	ldr	r3, [pc, #312]	@ (8010b38 <ResetMacParameters+0x1c8>)
 80109fe:	f893 20b9 	ldrb.w	r2, [r3, #185]	@ 0xb9
 8010a02:	4b4d      	ldr	r3, [pc, #308]	@ (8010b38 <ResetMacParameters+0x1c8>)
 8010a04:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 8010a08:	4b4b      	ldr	r3, [pc, #300]	@ (8010b38 <ResetMacParameters+0x1c8>)
 8010a0a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8010a0e:	4a4a      	ldr	r2, [pc, #296]	@ (8010b38 <ResetMacParameters+0x1c8>)
 8010a10:	6793      	str	r3, [r2, #120]	@ 0x78
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8010a12:	4b49      	ldr	r3, [pc, #292]	@ (8010b38 <ResetMacParameters+0x1c8>)
 8010a14:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8010a18:	4a47      	ldr	r2, [pc, #284]	@ (8010b38 <ResetMacParameters+0x1c8>)
 8010a1a:	67d3      	str	r3, [r2, #124]	@ 0x7c

    MacCtx.NodeAckRequested = false;
 8010a1c:	4b47      	ldr	r3, [pc, #284]	@ (8010b3c <ResetMacParameters+0x1cc>)
 8010a1e:	2200      	movs	r2, #0
 8010a20:	f883 241e 	strb.w	r2, [r3, #1054]	@ 0x41e
    Nvm.MacGroup1.SrvAckRequested = false;
 8010a24:	4b44      	ldr	r3, [pc, #272]	@ (8010b38 <ResetMacParameters+0x1c8>)
 8010a26:	2200      	movs	r2, #0
 8010a28:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 8010a2c:	4b42      	ldr	r3, [pc, #264]	@ (8010b38 <ResetMacParameters+0x1c8>)
 8010a2e:	2200      	movs	r2, #0
 8010a30:	f883 2109 	strb.w	r2, [r3, #265]	@ 0x109
    Nvm.MacGroup2.DownlinkReceived = false;
 8010a34:	4b40      	ldr	r3, [pc, #256]	@ (8010b38 <ResetMacParameters+0x1c8>)
 8010a36:	2200      	movs	r2, #0
 8010a38:	f883 210a 	strb.w	r2, [r3, #266]	@ 0x10a
#endif /* LORAMAC_VERSION */

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 8010a3c:	2301      	movs	r3, #1
 8010a3e:	743b      	strb	r3, [r7, #16]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8010a40:	4b3f      	ldr	r3, [pc, #252]	@ (8010b40 <ResetMacParameters+0x1d0>)
 8010a42:	607b      	str	r3, [r7, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8010a44:	4b3f      	ldr	r3, [pc, #252]	@ (8010b44 <ResetMacParameters+0x1d4>)
 8010a46:	60bb      	str	r3, [r7, #8]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    params.Bands = &RegionBands;
 8010a48:	4b3f      	ldr	r3, [pc, #252]	@ (8010b48 <ResetMacParameters+0x1d8>)
 8010a4a:	60fb      	str	r3, [r7, #12]
#endif /* LORAMAC_VERSION */
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8010a4c:	4b3a      	ldr	r3, [pc, #232]	@ (8010b38 <ResetMacParameters+0x1c8>)
 8010a4e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010a52:	1d3a      	adds	r2, r7, #4
 8010a54:	4611      	mov	r1, r2
 8010a56:	4618      	mov	r0, r3
 8010a58:	f004 f8ed 	bl	8014c36 <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 8010a5c:	4b37      	ldr	r3, [pc, #220]	@ (8010b3c <ResetMacParameters+0x1cc>)
 8010a5e:	2200      	movs	r2, #0
 8010a60:	f883 241f 	strb.w	r2, [r3, #1055]	@ 0x41f

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8010a64:	4b35      	ldr	r3, [pc, #212]	@ (8010b3c <ResetMacParameters+0x1cc>)
 8010a66:	f893 241f 	ldrb.w	r2, [r3, #1055]	@ 0x41f
 8010a6a:	4b34      	ldr	r3, [pc, #208]	@ (8010b3c <ResetMacParameters+0x1cc>)
 8010a6c:	f883 23d0 	strb.w	r2, [r3, #976]	@ 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8010a70:	4b31      	ldr	r3, [pc, #196]	@ (8010b38 <ResetMacParameters+0x1c8>)
 8010a72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010a74:	4a31      	ldr	r2, [pc, #196]	@ (8010b3c <ResetMacParameters+0x1cc>)
 8010a76:	f8c2 33d4 	str.w	r3, [r2, #980]	@ 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010a7a:	4b2f      	ldr	r3, [pc, #188]	@ (8010b38 <ResetMacParameters+0x1c8>)
 8010a7c:	f893 2075 	ldrb.w	r2, [r3, #117]	@ 0x75
 8010a80:	4b2e      	ldr	r3, [pc, #184]	@ (8010b3c <ResetMacParameters+0x1cc>)
 8010a82:	f883 23e0 	strb.w	r2, [r3, #992]	@ 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8010a86:	4b2c      	ldr	r3, [pc, #176]	@ (8010b38 <ResetMacParameters+0x1c8>)
 8010a88:	f893 2080 	ldrb.w	r2, [r3, #128]	@ 0x80
 8010a8c:	4b2b      	ldr	r3, [pc, #172]	@ (8010b3c <ResetMacParameters+0x1cc>)
 8010a8e:	f883 23e1 	strb.w	r2, [r3, #993]	@ 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 8010a92:	4b2a      	ldr	r3, [pc, #168]	@ (8010b3c <ResetMacParameters+0x1cc>)
 8010a94:	2200      	movs	r2, #0
 8010a96:	f883 23e2 	strb.w	r2, [r3, #994]	@ 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8010a9a:	4b28      	ldr	r3, [pc, #160]	@ (8010b3c <ResetMacParameters+0x1cc>)
 8010a9c:	2201      	movs	r2, #1
 8010a9e:	f883 23e3 	strb.w	r2, [r3, #995]	@ 0x3e3
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8010aa2:	4b25      	ldr	r3, [pc, #148]	@ (8010b38 <ResetMacParameters+0x1c8>)
 8010aa4:	f893 211c 	ldrb.w	r2, [r3, #284]	@ 0x11c
 8010aa8:	4b24      	ldr	r3, [pc, #144]	@ (8010b3c <ResetMacParameters+0x1cc>)
 8010aaa:	f883 23e4 	strb.w	r2, [r3, #996]	@ 0x3e4
#endif /* LORAMAC_VERSION */

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8010aae:	4a23      	ldr	r2, [pc, #140]	@ (8010b3c <ResetMacParameters+0x1cc>)
 8010ab0:	4b22      	ldr	r3, [pc, #136]	@ (8010b3c <ResetMacParameters+0x1cc>)
 8010ab2:	f502 747a 	add.w	r4, r2, #1000	@ 0x3e8
 8010ab6:	f503 7574 	add.w	r5, r3, #976	@ 0x3d0
 8010aba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010abc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010abe:	e895 0003 	ldmia.w	r5, {r0, r1}
 8010ac2:	e884 0003 	stmia.w	r4, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8010ac6:	4b1d      	ldr	r3, [pc, #116]	@ (8010b3c <ResetMacParameters+0x1cc>)
 8010ac8:	2201      	movs	r2, #1
 8010aca:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8010ace:	4b1b      	ldr	r3, [pc, #108]	@ (8010b3c <ResetMacParameters+0x1cc>)
 8010ad0:	2202      	movs	r2, #2
 8010ad2:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 8010ad6:	2300      	movs	r3, #0
 8010ad8:	63bb      	str	r3, [r7, #56]	@ 0x38
    classBCallbacks.MacProcessNotify = NULL;
 8010ada:	2300      	movs	r3, #0
 8010adc:	63fb      	str	r3, [r7, #60]	@ 0x3c

    if( MacCtx.MacCallbacks != NULL )
 8010ade:	4b17      	ldr	r3, [pc, #92]	@ (8010b3c <ResetMacParameters+0x1cc>)
 8010ae0:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d009      	beq.n	8010afc <ResetMacParameters+0x18c>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 8010ae8:	4b14      	ldr	r3, [pc, #80]	@ (8010b3c <ResetMacParameters+0x1cc>)
 8010aea:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8010aee:	685b      	ldr	r3, [r3, #4]
 8010af0:	63bb      	str	r3, [r7, #56]	@ 0x38
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 8010af2:	4b12      	ldr	r3, [pc, #72]	@ (8010b3c <ResetMacParameters+0x1cc>)
 8010af4:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8010af8:	691b      	ldr	r3, [r3, #16]
 8010afa:	63fb      	str	r3, [r7, #60]	@ 0x3c
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 8010afc:	4b13      	ldr	r3, [pc, #76]	@ (8010b4c <ResetMacParameters+0x1dc>)
 8010afe:	617b      	str	r3, [r7, #20]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 8010b00:	4b13      	ldr	r3, [pc, #76]	@ (8010b50 <ResetMacParameters+0x1e0>)
 8010b02:	61bb      	str	r3, [r7, #24]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 8010b04:	4b13      	ldr	r3, [pc, #76]	@ (8010b54 <ResetMacParameters+0x1e4>)
 8010b06:	61fb      	str	r3, [r7, #28]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 8010b08:	4b13      	ldr	r3, [pc, #76]	@ (8010b58 <ResetMacParameters+0x1e8>)
 8010b0a:	623b      	str	r3, [r7, #32]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 8010b0c:	4b13      	ldr	r3, [pc, #76]	@ (8010b5c <ResetMacParameters+0x1ec>)
 8010b0e:	627b      	str	r3, [r7, #36]	@ 0x24
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 8010b10:	4b13      	ldr	r3, [pc, #76]	@ (8010b60 <ResetMacParameters+0x1f0>)
 8010b12:	62bb      	str	r3, [r7, #40]	@ 0x28
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 8010b14:	4b13      	ldr	r3, [pc, #76]	@ (8010b64 <ResetMacParameters+0x1f4>)
 8010b16:	62fb      	str	r3, [r7, #44]	@ 0x2c
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 8010b18:	4b13      	ldr	r3, [pc, #76]	@ (8010b68 <ResetMacParameters+0x1f8>)
 8010b1a:	633b      	str	r3, [r7, #48]	@ 0x30
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
 8010b1c:	4b13      	ldr	r3, [pc, #76]	@ (8010b6c <ResetMacParameters+0x1fc>)
 8010b1e:	637b      	str	r3, [r7, #52]	@ 0x34
#endif /* LORAMAC_VERSION */

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 8010b20:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8010b24:	f107 0314 	add.w	r3, r7, #20
 8010b28:	4a11      	ldr	r2, [pc, #68]	@ (8010b70 <ResetMacParameters+0x200>)
 8010b2a:	4618      	mov	r0, r3
 8010b2c:	f002 f8cf 	bl	8012cce <LoRaMacClassBInit>
}
 8010b30:	bf00      	nop
 8010b32:	3740      	adds	r7, #64	@ 0x40
 8010b34:	46bd      	mov	sp, r7
 8010b36:	bdb0      	pop	{r4, r5, r7, pc}
 8010b38:	20000e14 	.word	0x20000e14
 8010b3c:	200008f4 	.word	0x200008f4
 8010b40:	20000ff8 	.word	0x20000ff8
 8010b44:	20000ffc 	.word	0x20000ffc
 8010b48:	2000190c 	.word	0x2000190c
 8010b4c:	20000d60 	.word	0x20000d60
 8010b50:	20000d18 	.word	0x20000d18
 8010b54:	20000d4c 	.word	0x20000d4c
 8010b58:	20000d89 	.word	0x20000d89
 8010b5c:	20000ee8 	.word	0x20000ee8
 8010b60:	20000e54 	.word	0x20000e54
 8010b64:	20000e58 	.word	0x20000e58
 8010b68:	20000eec 	.word	0x20000eec
 8010b6c:	20000f30 	.word	0x20000f30
 8010b70:	20001378 	.word	0x20001378

08010b74 <RxWindowSetup>:
 *
 * \param [in] rxTimer  Window timer to be topped.
 * \param [in] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 8010b74:	b580      	push	{r7, lr}
 8010b76:	b082      	sub	sp, #8
 8010b78:	af00      	add	r7, sp, #0
 8010b7a:	6078      	str	r0, [r7, #4]
 8010b7c:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 8010b7e:	6878      	ldr	r0, [r7, #4]
 8010b80:	f00a fc1e 	bl	801b3c0 <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 8010b84:	4b11      	ldr	r3, [pc, #68]	@ (8010bcc <RxWindowSetup+0x58>)
 8010b86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010b88:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8010b8a:	4b11      	ldr	r3, [pc, #68]	@ (8010bd0 <RxWindowSetup+0x5c>)
 8010b8c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010b90:	4a10      	ldr	r2, [pc, #64]	@ (8010bd4 <RxWindowSetup+0x60>)
 8010b92:	6839      	ldr	r1, [r7, #0]
 8010b94:	4618      	mov	r0, r3
 8010b96:	f004 f8b6 	bl	8014d06 <RegionRxConfig>
 8010b9a:	4603      	mov	r3, r0
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	d010      	beq.n	8010bc2 <RxWindowSetup+0x4e>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 8010ba0:	4b0d      	ldr	r3, [pc, #52]	@ (8010bd8 <RxWindowSetup+0x64>)
 8010ba2:	f893 2428 	ldrb.w	r2, [r3, #1064]	@ 0x428
 8010ba6:	4b0c      	ldr	r3, [pc, #48]	@ (8010bd8 <RxWindowSetup+0x64>)
 8010ba8:	f883 246e 	strb.w	r2, [r3, #1134]	@ 0x46e
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 8010bac:	4b07      	ldr	r3, [pc, #28]	@ (8010bcc <RxWindowSetup+0x58>)
 8010bae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010bb0:	4a07      	ldr	r2, [pc, #28]	@ (8010bd0 <RxWindowSetup+0x5c>)
 8010bb2:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8010bb4:	4610      	mov	r0, r2
 8010bb6:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 8010bb8:	683b      	ldr	r3, [r7, #0]
 8010bba:	7cda      	ldrb	r2, [r3, #19]
 8010bbc:	4b06      	ldr	r3, [pc, #24]	@ (8010bd8 <RxWindowSetup+0x64>)
 8010bbe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
    }
}
 8010bc2:	bf00      	nop
 8010bc4:	3708      	adds	r7, #8
 8010bc6:	46bd      	mov	sp, r7
 8010bc8:	bd80      	pop	{r7, pc}
 8010bca:	bf00      	nop
 8010bcc:	0801f68c 	.word	0x0801f68c
 8010bd0:	20000e14 	.word	0x20000e14
 8010bd4:	20000d1c 	.word	0x20000d1c
 8010bd8:	200008f4 	.word	0x200008f4

08010bdc <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 8010bdc:	b590      	push	{r4, r7, lr}
 8010bde:	b083      	sub	sp, #12
 8010be0:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8010be2:	4b1e      	ldr	r3, [pc, #120]	@ (8010c5c <OpenContinuousRxCWindow+0x80>)
 8010be4:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 8010be8:	4b1c      	ldr	r3, [pc, #112]	@ (8010c5c <OpenContinuousRxCWindow+0x80>)
 8010bea:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8010bee:	b259      	sxtb	r1, r3
 8010bf0:	4b1a      	ldr	r3, [pc, #104]	@ (8010c5c <OpenContinuousRxCWindow+0x80>)
 8010bf2:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8010bf6:	4b19      	ldr	r3, [pc, #100]	@ (8010c5c <OpenContinuousRxCWindow+0x80>)
 8010bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010bfa:	4c19      	ldr	r4, [pc, #100]	@ (8010c60 <OpenContinuousRxCWindow+0x84>)
 8010bfc:	9400      	str	r4, [sp, #0]
 8010bfe:	f004 f868 	bl	8014cd2 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8010c02:	4b18      	ldr	r3, [pc, #96]	@ (8010c64 <OpenContinuousRxCWindow+0x88>)
 8010c04:	2202      	movs	r2, #2
 8010c06:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8010c0a:	4b14      	ldr	r3, [pc, #80]	@ (8010c5c <OpenContinuousRxCWindow+0x80>)
 8010c0c:	f893 211c 	ldrb.w	r2, [r3, #284]	@ 0x11c
 8010c10:	4b14      	ldr	r3, [pc, #80]	@ (8010c64 <OpenContinuousRxCWindow+0x88>)
 8010c12:	f883 23fc 	strb.w	r2, [r3, #1020]	@ 0x3fc
#endif /* LORAMAC_VERSION */
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8010c16:	4b13      	ldr	r3, [pc, #76]	@ (8010c64 <OpenContinuousRxCWindow+0x88>)
 8010c18:	2201      	movs	r2, #1
 8010c1a:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8010c1e:	4b0f      	ldr	r3, [pc, #60]	@ (8010c5c <OpenContinuousRxCWindow+0x80>)
 8010c20:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010c24:	4a10      	ldr	r2, [pc, #64]	@ (8010c68 <OpenContinuousRxCWindow+0x8c>)
 8010c26:	490e      	ldr	r1, [pc, #56]	@ (8010c60 <OpenContinuousRxCWindow+0x84>)
 8010c28:	4618      	mov	r0, r3
 8010c2a:	f004 f86c 	bl	8014d06 <RegionRxConfig>
 8010c2e:	4603      	mov	r3, r0
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	d00f      	beq.n	8010c54 <OpenContinuousRxCWindow+0x78>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 8010c34:	4b0b      	ldr	r3, [pc, #44]	@ (8010c64 <OpenContinuousRxCWindow+0x88>)
 8010c36:	f893 2428 	ldrb.w	r2, [r3, #1064]	@ 0x428
 8010c3a:	4b0a      	ldr	r3, [pc, #40]	@ (8010c64 <OpenContinuousRxCWindow+0x88>)
 8010c3c:	f883 246e 	strb.w	r2, [r3, #1134]	@ 0x46e
        Radio.Rx( 0 ); // Continuous mode
 8010c40:	4b0a      	ldr	r3, [pc, #40]	@ (8010c6c <OpenContinuousRxCWindow+0x90>)
 8010c42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010c44:	2000      	movs	r0, #0
 8010c46:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 8010c48:	4b06      	ldr	r3, [pc, #24]	@ (8010c64 <OpenContinuousRxCWindow+0x88>)
 8010c4a:	f893 23fb 	ldrb.w	r2, [r3, #1019]	@ 0x3fb
 8010c4e:	4b05      	ldr	r3, [pc, #20]	@ (8010c64 <OpenContinuousRxCWindow+0x88>)
 8010c50:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
    }
}
 8010c54:	bf00      	nop
 8010c56:	3704      	adds	r7, #4
 8010c58:	46bd      	mov	sp, r7
 8010c5a:	bd90      	pop	{r4, r7, pc}
 8010c5c:	20000e14 	.word	0x20000e14
 8010c60:	20000cdc 	.word	0x20000cdc
 8010c64:	200008f4 	.word	0x200008f4
 8010c68:	20000d1c 	.word	0x20000d1c
 8010c6c:	0801f68c 	.word	0x0801f68c

08010c70 <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 8010c70:	b580      	push	{r7, lr}
 8010c72:	b088      	sub	sp, #32
 8010c74:	af00      	add	r7, sp, #0
 8010c76:	60f8      	str	r0, [r7, #12]
 8010c78:	60b9      	str	r1, [r7, #8]
 8010c7a:	603b      	str	r3, [r7, #0]
 8010c7c:	4613      	mov	r3, r2
 8010c7e:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 8010c80:	4b81      	ldr	r3, [pc, #516]	@ (8010e88 <PrepareFrame+0x218>)
 8010c82:	2200      	movs	r2, #0
 8010c84:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 8010c86:	4b80      	ldr	r3, [pc, #512]	@ (8010e88 <PrepareFrame+0x218>)
 8010c88:	2200      	movs	r2, #0
 8010c8a:	f883 241e 	strb.w	r2, [r3, #1054]	@ 0x41e
    uint32_t fCntUp = 0;
 8010c8e:	2300      	movs	r3, #0
 8010c90:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 8010c92:	2300      	movs	r3, #0
 8010c94:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 8010c96:	2300      	movs	r3, #0
 8010c98:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 8010c9a:	683b      	ldr	r3, [r7, #0]
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d101      	bne.n	8010ca4 <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 8010ca0:	2300      	movs	r3, #0
 8010ca2:	853b      	strh	r3, [r7, #40]	@ 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8010ca4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010ca6:	461a      	mov	r2, r3
 8010ca8:	6839      	ldr	r1, [r7, #0]
 8010caa:	4878      	ldr	r0, [pc, #480]	@ (8010e8c <PrepareFrame+0x21c>)
 8010cac:	f006 fa3b 	bl	8017126 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 8010cb0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010cb2:	b2da      	uxtb	r2, r3
 8010cb4:	4b74      	ldr	r3, [pc, #464]	@ (8010e88 <PrepareFrame+0x218>)
 8010cb6:	f883 2237 	strb.w	r2, [r3, #567]	@ 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 8010cba:	68fb      	ldr	r3, [r7, #12]
 8010cbc:	781a      	ldrb	r2, [r3, #0]
 8010cbe:	4b72      	ldr	r3, [pc, #456]	@ (8010e88 <PrepareFrame+0x218>)
 8010cc0:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 8010cc2:	68fb      	ldr	r3, [r7, #12]
 8010cc4:	781b      	ldrb	r3, [r3, #0]
 8010cc6:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8010cca:	b2db      	uxtb	r3, r3
 8010ccc:	2b07      	cmp	r3, #7
 8010cce:	f000 80b9 	beq.w	8010e44 <PrepareFrame+0x1d4>
 8010cd2:	2b07      	cmp	r3, #7
 8010cd4:	f300 80ce 	bgt.w	8010e74 <PrepareFrame+0x204>
 8010cd8:	2b02      	cmp	r3, #2
 8010cda:	d006      	beq.n	8010cea <PrepareFrame+0x7a>
 8010cdc:	2b04      	cmp	r3, #4
 8010cde:	f040 80c9 	bne.w	8010e74 <PrepareFrame+0x204>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 8010ce2:	4b69      	ldr	r3, [pc, #420]	@ (8010e88 <PrepareFrame+0x218>)
 8010ce4:	2201      	movs	r2, #1
 8010ce6:	f883 241e 	strb.w	r2, [r3, #1054]	@ 0x41e
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 8010cea:	4b67      	ldr	r3, [pc, #412]	@ (8010e88 <PrepareFrame+0x218>)
 8010cec:	2204      	movs	r2, #4
 8010cee:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 8010cf2:	4b65      	ldr	r3, [pc, #404]	@ (8010e88 <PrepareFrame+0x218>)
 8010cf4:	4a66      	ldr	r2, [pc, #408]	@ (8010e90 <PrepareFrame+0x220>)
 8010cf6:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8010cfa:	4b63      	ldr	r3, [pc, #396]	@ (8010e88 <PrepareFrame+0x218>)
 8010cfc:	22ff      	movs	r2, #255	@ 0xff
 8010cfe:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 8010d02:	68fb      	ldr	r3, [r7, #12]
 8010d04:	781a      	ldrb	r2, [r3, #0]
 8010d06:	4b60      	ldr	r3, [pc, #384]	@ (8010e88 <PrepareFrame+0x218>)
 8010d08:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8010d0c:	4a5e      	ldr	r2, [pc, #376]	@ (8010e88 <PrepareFrame+0x218>)
 8010d0e:	79fb      	ldrb	r3, [r7, #7]
 8010d10:	f882 3128 	strb.w	r3, [r2, #296]	@ 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 8010d14:	4b5f      	ldr	r3, [pc, #380]	@ (8010e94 <PrepareFrame+0x224>)
 8010d16:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8010d1a:	4a5b      	ldr	r2, [pc, #364]	@ (8010e88 <PrepareFrame+0x218>)
 8010d1c:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8010d20:	68bb      	ldr	r3, [r7, #8]
 8010d22:	781a      	ldrb	r2, [r3, #0]
 8010d24:	4b58      	ldr	r3, [pc, #352]	@ (8010e88 <PrepareFrame+0x218>)
 8010d26:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 8010d2a:	4b57      	ldr	r3, [pc, #348]	@ (8010e88 <PrepareFrame+0x218>)
 8010d2c:	f893 2237 	ldrb.w	r2, [r3, #567]	@ 0x237
 8010d30:	4b55      	ldr	r3, [pc, #340]	@ (8010e88 <PrepareFrame+0x218>)
 8010d32:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 8010d36:	4b54      	ldr	r3, [pc, #336]	@ (8010e88 <PrepareFrame+0x218>)
 8010d38:	4a54      	ldr	r2, [pc, #336]	@ (8010e8c <PrepareFrame+0x21c>)
 8010d3a:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8010d3e:	f107 0318 	add.w	r3, r7, #24
 8010d42:	4618      	mov	r0, r3
 8010d44:	f003 f8e2 	bl	8013f0c <LoRaMacCryptoGetFCntUp>
 8010d48:	4603      	mov	r3, r0
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d001      	beq.n	8010d52 <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8010d4e:	2312      	movs	r3, #18
 8010d50:	e096      	b.n	8010e80 <PrepareFrame+0x210>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 8010d52:	69bb      	ldr	r3, [r7, #24]
 8010d54:	b29a      	uxth	r2, r3
 8010d56:	4b4c      	ldr	r3, [pc, #304]	@ (8010e88 <PrepareFrame+0x218>)
 8010d58:	f8a3 2116 	strh.w	r2, [r3, #278]	@ 0x116

            // Reset confirm parameters
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = 0;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            MacCtx.McpsConfirm.NbTrans = 0;
 8010d5c:	4b4a      	ldr	r3, [pc, #296]	@ (8010e88 <PrepareFrame+0x218>)
 8010d5e:	2200      	movs	r2, #0
 8010d60:	f883 2449 	strb.w	r2, [r3, #1097]	@ 0x449
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.AckReceived = false;
 8010d64:	4b48      	ldr	r3, [pc, #288]	@ (8010e88 <PrepareFrame+0x218>)
 8010d66:	2200      	movs	r2, #0
 8010d68:	f883 2448 	strb.w	r2, [r3, #1096]	@ 0x448
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 8010d6c:	69bb      	ldr	r3, [r7, #24]
 8010d6e:	4a46      	ldr	r2, [pc, #280]	@ (8010e88 <PrepareFrame+0x218>)
 8010d70:	f8c2 3450 	str.w	r3, [r2, #1104]	@ 0x450

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8010d74:	f107 0314 	add.w	r3, r7, #20
 8010d78:	4618      	mov	r0, r3
 8010d7a:	f002 fa83 	bl	8013284 <LoRaMacCommandsGetSizeSerializedCmds>
 8010d7e:	4603      	mov	r3, r0
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d001      	beq.n	8010d88 <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010d84:	2313      	movs	r3, #19
 8010d86:	e07b      	b.n	8010e80 <PrepareFrame+0x210>
            }

            if( macCmdsSize > 0 )
 8010d88:	697b      	ldr	r3, [r7, #20]
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	d074      	beq.n	8010e78 <PrepareFrame+0x208>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 8010d8e:	4b41      	ldr	r3, [pc, #260]	@ (8010e94 <PrepareFrame+0x224>)
 8010d90:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8010d94:	4618      	mov	r0, r3
 8010d96:	f7fe fd4d 	bl	800f834 <GetMaxAppPayloadWithoutFOptsLength>
 8010d9a:	4603      	mov	r3, r0
 8010d9c:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8010d9e:	4b3a      	ldr	r3, [pc, #232]	@ (8010e88 <PrepareFrame+0x218>)
 8010da0:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d01d      	beq.n	8010de4 <PrepareFrame+0x174>
 8010da8:	697b      	ldr	r3, [r7, #20]
 8010daa:	2b0f      	cmp	r3, #15
 8010dac:	d81a      	bhi.n	8010de4 <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 8010dae:	f107 0314 	add.w	r3, r7, #20
 8010db2:	4a39      	ldr	r2, [pc, #228]	@ (8010e98 <PrepareFrame+0x228>)
 8010db4:	4619      	mov	r1, r3
 8010db6:	200f      	movs	r0, #15
 8010db8:	f002 fa7a 	bl	80132b0 <LoRaMacCommandsSerializeCmds>
 8010dbc:	4603      	mov	r3, r0
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	d001      	beq.n	8010dc6 <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010dc2:	2313      	movs	r3, #19
 8010dc4:	e05c      	b.n	8010e80 <PrepareFrame+0x210>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 8010dc6:	697b      	ldr	r3, [r7, #20]
 8010dc8:	f003 030f 	and.w	r3, r3, #15
 8010dcc:	b2d9      	uxtb	r1, r3
 8010dce:	68ba      	ldr	r2, [r7, #8]
 8010dd0:	7813      	ldrb	r3, [r2, #0]
 8010dd2:	f361 0303 	bfi	r3, r1, #0, #4
 8010dd6:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8010dd8:	68bb      	ldr	r3, [r7, #8]
 8010dda:	781a      	ldrb	r2, [r3, #0]
 8010ddc:	4b2a      	ldr	r3, [pc, #168]	@ (8010e88 <PrepareFrame+0x218>)
 8010dde:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 8010de2:	e049      	b.n	8010e78 <PrepareFrame+0x208>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8010de4:	4b28      	ldr	r3, [pc, #160]	@ (8010e88 <PrepareFrame+0x218>)
 8010de6:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	d010      	beq.n	8010e10 <PrepareFrame+0x1a0>
 8010dee:	697b      	ldr	r3, [r7, #20]
 8010df0:	2b0f      	cmp	r3, #15
 8010df2:	d90d      	bls.n	8010e10 <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8010df4:	7ffb      	ldrb	r3, [r7, #31]
 8010df6:	f107 0114 	add.w	r1, r7, #20
 8010dfa:	4a28      	ldr	r2, [pc, #160]	@ (8010e9c <PrepareFrame+0x22c>)
 8010dfc:	4618      	mov	r0, r3
 8010dfe:	f002 fa57 	bl	80132b0 <LoRaMacCommandsSerializeCmds>
 8010e02:	4603      	mov	r3, r0
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d001      	beq.n	8010e0c <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010e08:	2313      	movs	r3, #19
 8010e0a:	e039      	b.n	8010e80 <PrepareFrame+0x210>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 8010e0c:	230a      	movs	r3, #10
 8010e0e:	e037      	b.n	8010e80 <PrepareFrame+0x210>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8010e10:	7ffb      	ldrb	r3, [r7, #31]
 8010e12:	f107 0114 	add.w	r1, r7, #20
 8010e16:	4a21      	ldr	r2, [pc, #132]	@ (8010e9c <PrepareFrame+0x22c>)
 8010e18:	4618      	mov	r0, r3
 8010e1a:	f002 fa49 	bl	80132b0 <LoRaMacCommandsSerializeCmds>
 8010e1e:	4603      	mov	r3, r0
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	d001      	beq.n	8010e28 <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010e24:	2313      	movs	r3, #19
 8010e26:	e02b      	b.n	8010e80 <PrepareFrame+0x210>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 8010e28:	4b17      	ldr	r3, [pc, #92]	@ (8010e88 <PrepareFrame+0x218>)
 8010e2a:	2200      	movs	r2, #0
 8010e2c:	f883 2128 	strb.w	r2, [r3, #296]	@ 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 8010e30:	4b15      	ldr	r3, [pc, #84]	@ (8010e88 <PrepareFrame+0x218>)
 8010e32:	4a1a      	ldr	r2, [pc, #104]	@ (8010e9c <PrepareFrame+0x22c>)
 8010e34:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8010e38:	697b      	ldr	r3, [r7, #20]
 8010e3a:	b2da      	uxtb	r2, r3
 8010e3c:	4b12      	ldr	r3, [pc, #72]	@ (8010e88 <PrepareFrame+0x218>)
 8010e3e:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            break;
 8010e42:	e019      	b.n	8010e78 <PrepareFrame+0x208>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 8010e44:	683b      	ldr	r3, [r7, #0]
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d018      	beq.n	8010e7c <PrepareFrame+0x20c>
 8010e4a:	4b0f      	ldr	r3, [pc, #60]	@ (8010e88 <PrepareFrame+0x218>)
 8010e4c:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d013      	beq.n	8010e7c <PrepareFrame+0x20c>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 8010e54:	4812      	ldr	r0, [pc, #72]	@ (8010ea0 <PrepareFrame+0x230>)
 8010e56:	4b0c      	ldr	r3, [pc, #48]	@ (8010e88 <PrepareFrame+0x218>)
 8010e58:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8010e5c:	461a      	mov	r2, r3
 8010e5e:	6839      	ldr	r1, [r7, #0]
 8010e60:	f006 f961 	bl	8017126 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 8010e64:	4b08      	ldr	r3, [pc, #32]	@ (8010e88 <PrepareFrame+0x218>)
 8010e66:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8010e6a:	3301      	adds	r3, #1
 8010e6c:	b29a      	uxth	r2, r3
 8010e6e:	4b06      	ldr	r3, [pc, #24]	@ (8010e88 <PrepareFrame+0x218>)
 8010e70:	801a      	strh	r2, [r3, #0]
            }
            break;
 8010e72:	e003      	b.n	8010e7c <PrepareFrame+0x20c>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8010e74:	2302      	movs	r3, #2
 8010e76:	e003      	b.n	8010e80 <PrepareFrame+0x210>
            break;
 8010e78:	bf00      	nop
 8010e7a:	e000      	b.n	8010e7e <PrepareFrame+0x20e>
            break;
 8010e7c:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 8010e7e:	2300      	movs	r3, #0
}
 8010e80:	4618      	mov	r0, r3
 8010e82:	3720      	adds	r7, #32
 8010e84:	46bd      	mov	sp, r7
 8010e86:	bd80      	pop	{r7, pc}
 8010e88:	200008f4 	.word	0x200008f4
 8010e8c:	20000a2c 	.word	0x20000a2c
 8010e90:	200008f6 	.word	0x200008f6
 8010e94:	20000e14 	.word	0x20000e14
 8010e98:	20000a0c 	.word	0x20000a0c
 8010e9c:	20000d94 	.word	0x20000d94
 8010ea0:	200008f7 	.word	0x200008f7

08010ea4 <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 8010ea4:	b580      	push	{r7, lr}
 8010ea6:	b08a      	sub	sp, #40	@ 0x28
 8010ea8:	af00      	add	r7, sp, #0
 8010eaa:	4603      	mov	r3, r0
 8010eac:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010eae:	2303      	movs	r3, #3
 8010eb0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 8010eb4:	2300      	movs	r3, #0
 8010eb6:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 8010eb8:	79fb      	ldrb	r3, [r7, #7]
 8010eba:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010ebc:	4b4a      	ldr	r3, [pc, #296]	@ (8010fe8 <SendFrameOnChannel+0x144>)
 8010ebe:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8010ec2:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8010ec4:	4b48      	ldr	r3, [pc, #288]	@ (8010fe8 <SendFrameOnChannel+0x144>)
 8010ec6:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 8010eca:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8010ecc:	4b46      	ldr	r3, [pc, #280]	@ (8010fe8 <SendFrameOnChannel+0x144>)
 8010ece:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010ed0:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8010ed2:	4b45      	ldr	r3, [pc, #276]	@ (8010fe8 <SendFrameOnChannel+0x144>)
 8010ed4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010ed6:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8010ed8:	4b44      	ldr	r3, [pc, #272]	@ (8010fec <SendFrameOnChannel+0x148>)
 8010eda:	881b      	ldrh	r3, [r3, #0]
 8010edc:	83bb      	strh	r3, [r7, #28]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8010ede:	4b42      	ldr	r3, [pc, #264]	@ (8010fe8 <SendFrameOnChannel+0x144>)
 8010ee0:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 8010ee4:	77bb      	strb	r3, [r7, #30]
#endif /* LORAMAC_VERSION */

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8010ee6:	4b40      	ldr	r3, [pc, #256]	@ (8010fe8 <SendFrameOnChannel+0x144>)
 8010ee8:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 8010eec:	f107 020f 	add.w	r2, r7, #15
 8010ef0:	f107 0110 	add.w	r1, r7, #16
 8010ef4:	4b3e      	ldr	r3, [pc, #248]	@ (8010ff0 <SendFrameOnChannel+0x14c>)
 8010ef6:	f003 ff1b 	bl	8014d30 <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010efa:	4b3c      	ldr	r3, [pc, #240]	@ (8010fec <SendFrameOnChannel+0x148>)
 8010efc:	2201      	movs	r2, #1
 8010efe:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010f02:	4b39      	ldr	r3, [pc, #228]	@ (8010fe8 <SendFrameOnChannel+0x144>)
 8010f04:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8010f08:	b2da      	uxtb	r2, r3
 8010f0a:	4b38      	ldr	r3, [pc, #224]	@ (8010fec <SendFrameOnChannel+0x148>)
 8010f0c:	f883 2446 	strb.w	r2, [r3, #1094]	@ 0x446
    MacCtx.McpsConfirm.TxPower = txPower;
 8010f10:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8010f14:	4b35      	ldr	r3, [pc, #212]	@ (8010fec <SendFrameOnChannel+0x148>)
 8010f16:	f883 2447 	strb.w	r2, [r3, #1095]	@ 0x447
    MacCtx.McpsConfirm.Channel = channel;
 8010f1a:	79fb      	ldrb	r3, [r7, #7]
 8010f1c:	4a33      	ldr	r2, [pc, #204]	@ (8010fec <SendFrameOnChannel+0x148>)
 8010f1e:	f8c2 3454 	str.w	r3, [r2, #1108]	@ 0x454

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8010f22:	4b32      	ldr	r3, [pc, #200]	@ (8010fec <SendFrameOnChannel+0x148>)
 8010f24:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 8010f28:	4a30      	ldr	r2, [pc, #192]	@ (8010fec <SendFrameOnChannel+0x148>)
 8010f2a:	f8c2 344c 	str.w	r3, [r2, #1100]	@ 0x44c
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8010f2e:	4b2f      	ldr	r3, [pc, #188]	@ (8010fec <SendFrameOnChannel+0x148>)
 8010f30:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 8010f34:	4a2d      	ldr	r2, [pc, #180]	@ (8010fec <SendFrameOnChannel+0x148>)
 8010f36:	f8c2 345c 	str.w	r3, [r2, #1116]	@ 0x45c

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 8010f3a:	f001 ff34 	bl	8012da6 <LoRaMacClassBIsBeaconModeActive>
 8010f3e:	4603      	mov	r3, r0
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d00b      	beq.n	8010f5c <SendFrameOnChannel+0xb8>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 8010f44:	4b29      	ldr	r3, [pc, #164]	@ (8010fec <SendFrameOnChannel+0x148>)
 8010f46:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 8010f4a:	4618      	mov	r0, r3
 8010f4c:	f001 ff96 	bl	8012e7c <LoRaMacClassBIsUplinkCollision>
 8010f50:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 8010f52:	6a3b      	ldr	r3, [r7, #32]
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d001      	beq.n	8010f5c <SendFrameOnChannel+0xb8>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 8010f58:	2310      	movs	r3, #16
 8010f5a:	e040      	b.n	8010fde <SendFrameOnChannel+0x13a>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8010f5c:	4b22      	ldr	r3, [pc, #136]	@ (8010fe8 <SendFrameOnChannel+0x144>)
 8010f5e:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8010f62:	2b01      	cmp	r3, #1
 8010f64:	d101      	bne.n	8010f6a <SendFrameOnChannel+0xc6>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 8010f66:	f001 ff93 	bl	8012e90 <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 8010f6a:	f001 ff2d 	bl	8012dc8 <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 8010f6e:	4b1e      	ldr	r3, [pc, #120]	@ (8010fe8 <SendFrameOnChannel+0x144>)
 8010f70:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8010f74:	b2db      	uxtb	r3, r3
 8010f76:	4a1d      	ldr	r2, [pc, #116]	@ (8010fec <SendFrameOnChannel+0x148>)
 8010f78:	f892 241f 	ldrb.w	r2, [r2, #1055]	@ 0x41f
 8010f7c:	4611      	mov	r1, r2
 8010f7e:	4618      	mov	r0, r3
 8010f80:	f7ff fc66 	bl	8010850 <SecureFrame>
 8010f84:	4603      	mov	r3, r0
 8010f86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if( status != LORAMAC_STATUS_OK )
 8010f8a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	d002      	beq.n	8010f98 <SendFrameOnChannel+0xf4>
    {
        return status;
 8010f92:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010f96:	e022      	b.n	8010fde <SendFrameOnChannel+0x13a>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8010f98:	4b14      	ldr	r3, [pc, #80]	@ (8010fec <SendFrameOnChannel+0x148>)
 8010f9a:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8010f9e:	f043 0302 	orr.w	r3, r3, #2
 8010fa2:	4a12      	ldr	r2, [pc, #72]	@ (8010fec <SendFrameOnChannel+0x148>)
 8010fa4:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
    if( MacCtx.NodeAckRequested == false )
    {
        MacCtx.ChannelsNbTransCounter++;
    }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.ChannelsNbTransCounter++;
 8010fa8:	4b10      	ldr	r3, [pc, #64]	@ (8010fec <SendFrameOnChannel+0x148>)
 8010faa:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 8010fae:	3301      	adds	r3, #1
 8010fb0:	b2da      	uxtb	r2, r3
 8010fb2:	4b0e      	ldr	r3, [pc, #56]	@ (8010fec <SendFrameOnChannel+0x148>)
 8010fb4:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 8010fb8:	4b0c      	ldr	r3, [pc, #48]	@ (8010fec <SendFrameOnChannel+0x148>)
 8010fba:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 8010fbe:	4b0b      	ldr	r3, [pc, #44]	@ (8010fec <SendFrameOnChannel+0x148>)
 8010fc0:	f883 2449 	strb.w	r2, [r3, #1097]	@ 0x449
    MacCtx.ResponseTimeoutStartTime = 0;
 8010fc4:	4b09      	ldr	r3, [pc, #36]	@ (8010fec <SendFrameOnChannel+0x148>)
 8010fc6:	2200      	movs	r2, #0
 8010fc8:	f8c3 249c 	str.w	r2, [r3, #1180]	@ 0x49c
#endif /* LORAMAC_VERSION */

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8010fcc:	4b09      	ldr	r3, [pc, #36]	@ (8010ff4 <SendFrameOnChannel+0x150>)
 8010fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010fd0:	4a06      	ldr	r2, [pc, #24]	@ (8010fec <SendFrameOnChannel+0x148>)
 8010fd2:	8812      	ldrh	r2, [r2, #0]
 8010fd4:	b2d2      	uxtb	r2, r2
 8010fd6:	4611      	mov	r1, r2
 8010fd8:	4807      	ldr	r0, [pc, #28]	@ (8010ff8 <SendFrameOnChannel+0x154>)
 8010fda:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 8010fdc:	2300      	movs	r3, #0
}
 8010fde:	4618      	mov	r0, r3
 8010fe0:	3728      	adds	r7, #40	@ 0x28
 8010fe2:	46bd      	mov	sp, r7
 8010fe4:	bd80      	pop	{r7, pc}
 8010fe6:	bf00      	nop
 8010fe8:	20000e14 	.word	0x20000e14
 8010fec:	200008f4 	.word	0x200008f4
 8010ff0:	20000d14 	.word	0x20000d14
 8010ff4:	0801f68c 	.word	0x0801f68c
 8010ff8:	200008f6 	.word	0x200008f6

08010ffc <SetTxContinuousWave>:

    return LORAMAC_STATUS_OK;
}
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 8010ffc:	b580      	push	{r7, lr}
 8010ffe:	b082      	sub	sp, #8
 8011000:	af00      	add	r7, sp, #0
 8011002:	4603      	mov	r3, r0
 8011004:	6039      	str	r1, [r7, #0]
 8011006:	80fb      	strh	r3, [r7, #6]
 8011008:	4613      	mov	r3, r2
 801100a:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 801100c:	4b09      	ldr	r3, [pc, #36]	@ (8011034 <SetTxContinuousWave+0x38>)
 801100e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011010:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8011014:	88fa      	ldrh	r2, [r7, #6]
 8011016:	6838      	ldr	r0, [r7, #0]
 8011018:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 801101a:	4b07      	ldr	r3, [pc, #28]	@ (8011038 <SetTxContinuousWave+0x3c>)
 801101c:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8011020:	f043 0302 	orr.w	r3, r3, #2
 8011024:	4a04      	ldr	r2, [pc, #16]	@ (8011038 <SetTxContinuousWave+0x3c>)
 8011026:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    return LORAMAC_STATUS_OK;
 801102a:	2300      	movs	r3, #0
}
 801102c:	4618      	mov	r0, r3
 801102e:	3708      	adds	r7, #8
 8011030:	46bd      	mov	sp, r7
 8011032:	bd80      	pop	{r7, pc}
 8011034:	0801f68c 	.word	0x0801f68c
 8011038:	200008f4 	.word	0x200008f4

0801103c <RestoreNvmData>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t RestoreNvmData( void )
{
 801103c:	b580      	push	{r7, lr}
 801103e:	b082      	sub	sp, #8
 8011040:	af00      	add	r7, sp, #0
    uint32_t crc = 0;
 8011042:	2300      	movs	r3, #0
 8011044:	607b      	str	r3, [r7, #4]

    // Status and parameter validation
    if( MacCtx.MacState != LORAMAC_STOPPED )
 8011046:	4b3e      	ldr	r3, [pc, #248]	@ (8011140 <RestoreNvmData+0x104>)
 8011048:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 801104c:	2b01      	cmp	r3, #1
 801104e:	d001      	beq.n	8011054 <RestoreNvmData+0x18>
    {
        return LORAMAC_STATUS_BUSY;
 8011050:	2301      	movs	r3, #1
 8011052:	e071      	b.n	8011138 <RestoreNvmData+0xfc>
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 8011054:	2124      	movs	r1, #36	@ 0x24
 8011056:	483b      	ldr	r0, [pc, #236]	@ (8011144 <RestoreNvmData+0x108>)
 8011058:	f006 f8ba 	bl	80171d0 <Crc32>
 801105c:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.Crypto.Crc32 ) );
    if( crc != NvmBackup.Crypto.Crc32 )
 801105e:	4b39      	ldr	r3, [pc, #228]	@ (8011144 <RestoreNvmData+0x108>)
 8011060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011062:	687a      	ldr	r2, [r7, #4]
 8011064:	429a      	cmp	r2, r3
 8011066:	d001      	beq.n	801106c <RestoreNvmData+0x30>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8011068:	2317      	movs	r3, #23
 801106a:	e065      	b.n	8011138 <RestoreNvmData+0xfc>
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 801106c:	2114      	movs	r1, #20
 801106e:	4836      	ldr	r0, [pc, #216]	@ (8011148 <RestoreNvmData+0x10c>)
 8011070:	f006 f8ae 	bl	80171d0 <Crc32>
 8011074:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup1.Crc32 ) );
    if( crc != NvmBackup.MacGroup1.Crc32 )
 8011076:	4b33      	ldr	r3, [pc, #204]	@ (8011144 <RestoreNvmData+0x108>)
 8011078:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801107a:	687a      	ldr	r2, [r7, #4]
 801107c:	429a      	cmp	r2, r3
 801107e:	d001      	beq.n	8011084 <RestoreNvmData+0x48>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8011080:	2317      	movs	r3, #23
 8011082:	e059      	b.n	8011138 <RestoreNvmData+0xfc>
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 8011084:	21e0      	movs	r1, #224	@ 0xe0
 8011086:	4831      	ldr	r0, [pc, #196]	@ (801114c <RestoreNvmData+0x110>)
 8011088:	f006 f8a2 	bl	80171d0 <Crc32>
 801108c:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup2.Crc32 ) );
    if( crc != NvmBackup.MacGroup2.Crc32 )
 801108e:	4b2d      	ldr	r3, [pc, #180]	@ (8011144 <RestoreNvmData+0x108>)
 8011090:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8011094:	687a      	ldr	r2, [r7, #4]
 8011096:	429a      	cmp	r2, r3
 8011098:	d001      	beq.n	801109e <RestoreNvmData+0x62>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 801109a:	2317      	movs	r3, #23
 801109c:	e04c      	b.n	8011138 <RestoreNvmData+0xfc>
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 801109e:	21bc      	movs	r1, #188	@ 0xbc
 80110a0:	482b      	ldr	r0, [pc, #172]	@ (8011150 <RestoreNvmData+0x114>)
 80110a2:	f006 f895 	bl	80171d0 <Crc32>
 80110a6:	6078      	str	r0, [r7, #4]
                                                   sizeof( NvmBackup.SecureElement.Crc32 ) );
    if( crc != NvmBackup.SecureElement.Crc32 )
 80110a8:	4b26      	ldr	r3, [pc, #152]	@ (8011144 <RestoreNvmData+0x108>)
 80110aa:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 80110ae:	687a      	ldr	r2, [r7, #4]
 80110b0:	429a      	cmp	r2, r3
 80110b2:	d001      	beq.n	80110b8 <RestoreNvmData+0x7c>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80110b4:	2317      	movs	r3, #23
 80110b6:	e03f      	b.n	8011138 <RestoreNvmData+0xfc>
    }

    // Region
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 80110b8:	2100      	movs	r1, #0
 80110ba:	4826      	ldr	r0, [pc, #152]	@ (8011154 <RestoreNvmData+0x118>)
 80110bc:	f006 f888 	bl	80171d0 <Crc32>
 80110c0:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup1.Crc32 ) );
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 80110c2:	4b20      	ldr	r3, [pc, #128]	@ (8011144 <RestoreNvmData+0x108>)
 80110c4:	f8d3 31e4 	ldr.w	r3, [r3, #484]	@ 0x1e4
 80110c8:	687a      	ldr	r2, [r7, #4]
 80110ca:	429a      	cmp	r2, r3
 80110cc:	d001      	beq.n	80110d2 <RestoreNvmData+0x96>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80110ce:	2317      	movs	r3, #23
 80110d0:	e032      	b.n	8011138 <RestoreNvmData+0xfc>
    }

    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 80110d2:	2114      	movs	r1, #20
 80110d4:	4820      	ldr	r0, [pc, #128]	@ (8011158 <RestoreNvmData+0x11c>)
 80110d6:	f006 f87b 	bl	80171d0 <Crc32>
 80110da:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.ClassB.Crc32 ) );
    if( crc != NvmBackup.ClassB.Crc32 )
 80110dc:	4b19      	ldr	r3, [pc, #100]	@ (8011144 <RestoreNvmData+0x108>)
 80110de:	f8d3 3578 	ldr.w	r3, [r3, #1400]	@ 0x578
 80110e2:	687a      	ldr	r2, [r7, #4]
 80110e4:	429a      	cmp	r2, r3
 80110e6:	d001      	beq.n	80110ec <RestoreNvmData+0xb0>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80110e8:	2317      	movs	r3, #23
 80110ea:	e025      	b.n	8011138 <RestoreNvmData+0xfc>
    }

    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 80110ec:	f240 527c 	movw	r2, #1404	@ 0x57c
 80110f0:	4914      	ldr	r1, [pc, #80]	@ (8011144 <RestoreNvmData+0x108>)
 80110f2:	481a      	ldr	r0, [pc, #104]	@ (801115c <RestoreNvmData+0x120>)
 80110f4:	f006 f817 	bl	8017126 <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 80110f8:	f240 527c 	movw	r2, #1404	@ 0x57c
 80110fc:	2100      	movs	r1, #0
 80110fe:	4811      	ldr	r0, [pc, #68]	@ (8011144 <RestoreNvmData+0x108>)
 8011100:	f006 f84c 	bl	801719c <memset1>

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8011104:	4b0e      	ldr	r3, [pc, #56]	@ (8011140 <RestoreNvmData+0x104>)
 8011106:	f893 241f 	ldrb.w	r2, [r3, #1055]	@ 0x41f
 801110a:	4b0d      	ldr	r3, [pc, #52]	@ (8011140 <RestoreNvmData+0x104>)
 801110c:	f883 23e8 	strb.w	r2, [r3, #1000]	@ 0x3e8
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8011110:	4b12      	ldr	r3, [pc, #72]	@ (801115c <RestoreNvmData+0x120>)
 8011112:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011114:	4a0a      	ldr	r2, [pc, #40]	@ (8011140 <RestoreNvmData+0x104>)
 8011116:	f8c2 33ec 	str.w	r3, [r2, #1004]	@ 0x3ec
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801111a:	4b10      	ldr	r3, [pc, #64]	@ (801115c <RestoreNvmData+0x120>)
 801111c:	f893 2075 	ldrb.w	r2, [r3, #117]	@ 0x75
 8011120:	4b07      	ldr	r3, [pc, #28]	@ (8011140 <RestoreNvmData+0x104>)
 8011122:	f883 23f8 	strb.w	r2, [r3, #1016]	@ 0x3f8
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8011126:	4b06      	ldr	r3, [pc, #24]	@ (8011140 <RestoreNvmData+0x104>)
 8011128:	2201      	movs	r2, #1
 801112a:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 801112e:	4b04      	ldr	r3, [pc, #16]	@ (8011140 <RestoreNvmData+0x104>)
 8011130:	2202      	movs	r2, #2
 8011132:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb

    return LORAMAC_STATUS_OK;
 8011136:	2300      	movs	r3, #0
}
 8011138:	4618      	mov	r0, r3
 801113a:	3708      	adds	r7, #8
 801113c:	46bd      	mov	sp, r7
 801113e:	bd80      	pop	{r7, pc}
 8011140:	200008f4 	.word	0x200008f4
 8011144:	20001390 	.word	0x20001390
 8011148:	200013b8 	.word	0x200013b8
 801114c:	200013d0 	.word	0x200013d0
 8011150:	200014b4 	.word	0x200014b4
 8011154:	20001574 	.word	0x20001574
 8011158:	200018f4 	.word	0x200018f4
 801115c:	20000e14 	.word	0x20000e14

08011160 <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 8011160:	b480      	push	{r7}
 8011162:	b083      	sub	sp, #12
 8011164:	af00      	add	r7, sp, #0
 8011166:	6078      	str	r0, [r7, #4]
 8011168:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	2b00      	cmp	r3, #0
 801116e:	d002      	beq.n	8011176 <DetermineFrameType+0x16>
 8011170:	683b      	ldr	r3, [r7, #0]
 8011172:	2b00      	cmp	r3, #0
 8011174:	d101      	bne.n	801117a <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011176:	2303      	movs	r3, #3
 8011178:	e03b      	b.n	80111f2 <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	7b1b      	ldrb	r3, [r3, #12]
 801117e:	f003 030f 	and.w	r3, r3, #15
 8011182:	b2db      	uxtb	r3, r3
 8011184:	2b00      	cmp	r3, #0
 8011186:	d008      	beq.n	801119a <DetermineFrameType+0x3a>
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801118e:	2b00      	cmp	r3, #0
 8011190:	d003      	beq.n	801119a <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 8011192:	683b      	ldr	r3, [r7, #0]
 8011194:	2200      	movs	r2, #0
 8011196:	701a      	strb	r2, [r3, #0]
 8011198:	e02a      	b.n	80111f0 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d103      	bne.n	80111ac <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 80111a4:	683b      	ldr	r3, [r7, #0]
 80111a6:	2201      	movs	r2, #1
 80111a8:	701a      	strb	r2, [r3, #0]
 80111aa:	e021      	b.n	80111f0 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	7b1b      	ldrb	r3, [r3, #12]
 80111b0:	f003 030f 	and.w	r3, r3, #15
 80111b4:	b2db      	uxtb	r3, r3
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d108      	bne.n	80111cc <DetermineFrameType+0x6c>
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d103      	bne.n	80111cc <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 80111c4:	683b      	ldr	r3, [r7, #0]
 80111c6:	2202      	movs	r2, #2
 80111c8:	701a      	strb	r2, [r3, #0]
 80111ca:	e011      	b.n	80111f0 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	7b1b      	ldrb	r3, [r3, #12]
 80111d0:	f003 030f 	and.w	r3, r3, #15
 80111d4:	b2db      	uxtb	r3, r3
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d108      	bne.n	80111ec <DetermineFrameType+0x8c>
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	d003      	beq.n	80111ec <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 80111e4:	683b      	ldr	r3, [r7, #0]
 80111e6:	2203      	movs	r2, #3
 80111e8:	701a      	strb	r2, [r3, #0]
 80111ea:	e001      	b.n	80111f0 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 80111ec:	2318      	movs	r3, #24
 80111ee:	e000      	b.n	80111f2 <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 80111f0:	2300      	movs	r3, #0
}
 80111f2:	4618      	mov	r0, r3
 80111f4:	370c      	adds	r7, #12
 80111f6:	46bd      	mov	sp, r7
 80111f8:	bc80      	pop	{r7}
 80111fa:	4770      	bx	lr

080111fc <CheckRetrans>:
    }
    return false;
}
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool CheckRetrans( uint8_t counter, uint8_t limit )
{
 80111fc:	b480      	push	{r7}
 80111fe:	b083      	sub	sp, #12
 8011200:	af00      	add	r7, sp, #0
 8011202:	4603      	mov	r3, r0
 8011204:	460a      	mov	r2, r1
 8011206:	71fb      	strb	r3, [r7, #7]
 8011208:	4613      	mov	r3, r2
 801120a:	71bb      	strb	r3, [r7, #6]
    if( counter >= limit )
 801120c:	79fa      	ldrb	r2, [r7, #7]
 801120e:	79bb      	ldrb	r3, [r7, #6]
 8011210:	429a      	cmp	r2, r3
 8011212:	d301      	bcc.n	8011218 <CheckRetrans+0x1c>
    {
        return true;
 8011214:	2301      	movs	r3, #1
 8011216:	e000      	b.n	801121a <CheckRetrans+0x1e>
    }
    return false;
 8011218:	2300      	movs	r3, #0
}
 801121a:	4618      	mov	r0, r3
 801121c:	370c      	adds	r7, #12
 801121e:	46bd      	mov	sp, r7
 8011220:	bc80      	pop	{r7}
 8011222:	4770      	bx	lr

08011224 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 8011224:	b580      	push	{r7, lr}
 8011226:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 8011228:	4b12      	ldr	r3, [pc, #72]	@ (8011274 <CheckRetransUnconfirmedUplink+0x50>)
 801122a:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 801122e:	4a12      	ldr	r2, [pc, #72]	@ (8011278 <CheckRetransUnconfirmedUplink+0x54>)
 8011230:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8011234:	4611      	mov	r1, r2
 8011236:	4618      	mov	r0, r3
 8011238:	f7ff ffe0 	bl	80111fc <CheckRetrans>
 801123c:	4603      	mov	r3, r0
 801123e:	2b00      	cmp	r3, #0
 8011240:	d001      	beq.n	8011246 <CheckRetransUnconfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 8011242:	2301      	movs	r3, #1
 8011244:	e014      	b.n	8011270 <CheckRetransUnconfirmedUplink+0x4c>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8011246:	4b0b      	ldr	r3, [pc, #44]	@ (8011274 <CheckRetransUnconfirmedUplink+0x50>)
 8011248:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 801124c:	f003 0302 	and.w	r3, r3, #2
 8011250:	b2db      	uxtb	r3, r3
 8011252:	2b00      	cmp	r3, #0
 8011254:	d00b      	beq.n	801126e <CheckRetransUnconfirmedUplink+0x4a>
    {
        // Stop the retransmissions, if a valid downlink is received
        // a class A RX window. This holds also for class B and C.
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8011256:	4b07      	ldr	r3, [pc, #28]	@ (8011274 <CheckRetransUnconfirmedUplink+0x50>)
 8011258:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 801125c:	2b00      	cmp	r3, #0
 801125e:	d004      	beq.n	801126a <CheckRetransUnconfirmedUplink+0x46>
            ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 8011260:	4b04      	ldr	r3, [pc, #16]	@ (8011274 <CheckRetransUnconfirmedUplink+0x50>)
 8011262:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8011266:	2b01      	cmp	r3, #1
 8011268:	d101      	bne.n	801126e <CheckRetransUnconfirmedUplink+0x4a>
        {
            return true;
 801126a:	2301      	movs	r3, #1
 801126c:	e000      	b.n	8011270 <CheckRetransUnconfirmedUplink+0x4c>
        }
    }
    return false;
 801126e:	2300      	movs	r3, #0
}
 8011270:	4618      	mov	r0, r3
 8011272:	bd80      	pop	{r7, pc}
 8011274:	200008f4 	.word	0x200008f4
 8011278:	20000e14 	.word	0x20000e14

0801127c <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 801127c:	b580      	push	{r7, lr}
 801127e:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 8011280:	4b10      	ldr	r3, [pc, #64]	@ (80112c4 <CheckRetransConfirmedUplink+0x48>)
 8011282:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 8011286:	4a10      	ldr	r2, [pc, #64]	@ (80112c8 <CheckRetransConfirmedUplink+0x4c>)
 8011288:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 801128c:	4611      	mov	r1, r2
 801128e:	4618      	mov	r0, r3
 8011290:	f7ff ffb4 	bl	80111fc <CheckRetrans>
 8011294:	4603      	mov	r3, r0
 8011296:	2b00      	cmp	r3, #0
 8011298:	d001      	beq.n	801129e <CheckRetransConfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 801129a:	2301      	movs	r3, #1
 801129c:	e00f      	b.n	80112be <CheckRetransConfirmedUplink+0x42>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 801129e:	4b09      	ldr	r3, [pc, #36]	@ (80112c4 <CheckRetransConfirmedUplink+0x48>)
 80112a0:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80112a4:	f003 0302 	and.w	r3, r3, #2
 80112a8:	b2db      	uxtb	r3, r3
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	d006      	beq.n	80112bc <CheckRetransConfirmedUplink+0x40>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 80112ae:	4b05      	ldr	r3, [pc, #20]	@ (80112c4 <CheckRetransConfirmedUplink+0x48>)
 80112b0:	f893 3448 	ldrb.w	r3, [r3, #1096]	@ 0x448
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d001      	beq.n	80112bc <CheckRetransConfirmedUplink+0x40>
        {
            return true;
 80112b8:	2301      	movs	r3, #1
 80112ba:	e000      	b.n	80112be <CheckRetransConfirmedUplink+0x42>
        }
    }
    return false;
 80112bc:	2300      	movs	r3, #0
}
 80112be:	4618      	mov	r0, r3
 80112c0:	bd80      	pop	{r7, pc}
 80112c2:	bf00      	nop
 80112c4:	200008f4 	.word	0x200008f4
 80112c8:	20000e14 	.word	0x20000e14

080112cc <IncreaseAdrAckCounter>:

static uint32_t IncreaseAdrAckCounter( uint32_t counter )
{
 80112cc:	b480      	push	{r7}
 80112ce:	b083      	sub	sp, #12
 80112d0:	af00      	add	r7, sp, #0
 80112d2:	6078      	str	r0, [r7, #4]
    if( counter < ADR_ACK_COUNTER_MAX )
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80112da:	d002      	beq.n	80112e2 <IncreaseAdrAckCounter+0x16>
    {
        counter++;
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	3301      	adds	r3, #1
 80112e0:	607b      	str	r3, [r7, #4]
    }
    return counter;
 80112e2:	687b      	ldr	r3, [r7, #4]
}
 80112e4:	4618      	mov	r0, r3
 80112e6:	370c      	adds	r7, #12
 80112e8:	46bd      	mov	sp, r7
 80112ea:	bc80      	pop	{r7}
 80112ec:	4770      	bx	lr
	...

080112f0 <StopRetransmission>:
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 80112f0:	b580      	push	{r7, lr}
 80112f2:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 80112f4:	4b1a      	ldr	r3, [pc, #104]	@ (8011360 <StopRetransmission+0x70>)
 80112f6:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80112fa:	f003 0302 	and.w	r3, r3, #2
 80112fe:	b2db      	uxtb	r3, r3
 8011300:	2b00      	cmp	r3, #0
 8011302:	d009      	beq.n	8011318 <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8011304:	4b16      	ldr	r3, [pc, #88]	@ (8011360 <StopRetransmission+0x70>)
 8011306:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 801130a:	2b00      	cmp	r3, #0
 801130c:	d011      	beq.n	8011332 <StopRetransmission+0x42>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 801130e:	4b14      	ldr	r3, [pc, #80]	@ (8011360 <StopRetransmission+0x70>)
 8011310:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8011314:	2b01      	cmp	r3, #1
 8011316:	d00c      	beq.n	8011332 <StopRetransmission+0x42>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8011318:	4b12      	ldr	r3, [pc, #72]	@ (8011364 <StopRetransmission+0x74>)
 801131a:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 801131e:	2b00      	cmp	r3, #0
 8011320:	d007      	beq.n	8011332 <StopRetransmission+0x42>
        {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
 8011322:	4b10      	ldr	r3, [pc, #64]	@ (8011364 <StopRetransmission+0x74>)
 8011324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011326:	4618      	mov	r0, r3
 8011328:	f7ff ffd0 	bl	80112cc <IncreaseAdrAckCounter>
 801132c:	4603      	mov	r3, r0
 801132e:	4a0d      	ldr	r2, [pc, #52]	@ (8011364 <StopRetransmission+0x74>)
 8011330:	6293      	str	r3, [r2, #40]	@ 0x28
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8011332:	4b0b      	ldr	r3, [pc, #44]	@ (8011360 <StopRetransmission+0x70>)
 8011334:	2200      	movs	r2, #0
 8011336:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
    MacCtx.NodeAckRequested = false;
 801133a:	4b09      	ldr	r3, [pc, #36]	@ (8011360 <StopRetransmission+0x70>)
 801133c:	2200      	movs	r2, #0
 801133e:	f883 241e 	strb.w	r2, [r3, #1054]	@ 0x41e
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RetransmitTimeoutRetry = false;
 8011342:	4b07      	ldr	r3, [pc, #28]	@ (8011360 <StopRetransmission+0x70>)
 8011344:	2200      	movs	r2, #0
 8011346:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 801134a:	4b05      	ldr	r3, [pc, #20]	@ (8011360 <StopRetransmission+0x70>)
 801134c:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8011350:	f023 0302 	bic.w	r3, r3, #2
 8011354:	4a02      	ldr	r2, [pc, #8]	@ (8011360 <StopRetransmission+0x70>)
 8011356:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    return true;
 801135a:	2301      	movs	r3, #1
}
 801135c:	4618      	mov	r0, r3
 801135e:	bd80      	pop	{r7, pc}
 8011360:	200008f4 	.word	0x200008f4
 8011364:	20000e14 	.word	0x20000e14

08011368 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 8011368:	b580      	push	{r7, lr}
 801136a:	b082      	sub	sp, #8
 801136c:	af00      	add	r7, sp, #0
 801136e:	4603      	mov	r3, r0
 8011370:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8011372:	4b0b      	ldr	r3, [pc, #44]	@ (80113a0 <CallNvmDataChangeCallback+0x38>)
 8011374:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8011378:	2b00      	cmp	r3, #0
 801137a:	d00c      	beq.n	8011396 <CallNvmDataChangeCallback+0x2e>
        ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 801137c:	4b08      	ldr	r3, [pc, #32]	@ (80113a0 <CallNvmDataChangeCallback+0x38>)
 801137e:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8011382:	68db      	ldr	r3, [r3, #12]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8011384:	2b00      	cmp	r3, #0
 8011386:	d006      	beq.n	8011396 <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 8011388:	4b05      	ldr	r3, [pc, #20]	@ (80113a0 <CallNvmDataChangeCallback+0x38>)
 801138a:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 801138e:	68db      	ldr	r3, [r3, #12]
 8011390:	88fa      	ldrh	r2, [r7, #6]
 8011392:	4610      	mov	r0, r2
 8011394:	4798      	blx	r3
    }
}
 8011396:	bf00      	nop
 8011398:	3708      	adds	r7, #8
 801139a:	46bd      	mov	sp, r7
 801139c:	bd80      	pop	{r7, pc}
 801139e:	bf00      	nop
 80113a0:	200008f4 	.word	0x200008f4

080113a4 <IsRequestPending>:
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
}
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
 80113a4:	b480      	push	{r7}
 80113a6:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 80113a8:	4b0b      	ldr	r3, [pc, #44]	@ (80113d8 <IsRequestPending+0x34>)
 80113aa:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80113ae:	f003 0304 	and.w	r3, r3, #4
 80113b2:	b2db      	uxtb	r3, r3
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d107      	bne.n	80113c8 <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 80113b8:	4b07      	ldr	r3, [pc, #28]	@ (80113d8 <IsRequestPending+0x34>)
 80113ba:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80113be:	f003 0301 	and.w	r3, r3, #1
 80113c2:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	d001      	beq.n	80113cc <IsRequestPending+0x28>
    {
        return 1;
 80113c8:	2301      	movs	r3, #1
 80113ca:	e000      	b.n	80113ce <IsRequestPending+0x2a>
    }
    return 0;
 80113cc:	2300      	movs	r3, #0
}
 80113ce:	4618      	mov	r0, r3
 80113d0:	46bd      	mov	sp, r7
 80113d2:	bc80      	pop	{r7}
 80113d4:	4770      	bx	lr
 80113d6:	bf00      	nop
 80113d8:	200008f4 	.word	0x200008f4

080113dc <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 80113dc:	b590      	push	{r4, r7, lr}
 80113de:	b091      	sub	sp, #68	@ 0x44
 80113e0:	af02      	add	r7, sp, #8
 80113e2:	6178      	str	r0, [r7, #20]
 80113e4:	6139      	str	r1, [r7, #16]
 80113e6:	4613      	mov	r3, r2
 80113e8:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 80113ea:	697b      	ldr	r3, [r7, #20]
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d002      	beq.n	80113f6 <LoRaMacInitialization+0x1a>
 80113f0:	693b      	ldr	r3, [r7, #16]
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d101      	bne.n	80113fa <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80113f6:	2303      	movs	r3, #3
 80113f8:	e27c      	b.n	80118f4 <LoRaMacInitialization+0x518>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 80113fa:	697b      	ldr	r3, [r7, #20]
 80113fc:	681b      	ldr	r3, [r3, #0]
 80113fe:	2b00      	cmp	r3, #0
 8011400:	d00b      	beq.n	801141a <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 8011402:	697b      	ldr	r3, [r7, #20]
 8011404:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8011406:	2b00      	cmp	r3, #0
 8011408:	d007      	beq.n	801141a <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 801140a:	697b      	ldr	r3, [r7, #20]
 801140c:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 801140e:	2b00      	cmp	r3, #0
 8011410:	d003      	beq.n	801141a <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 8011412:	697b      	ldr	r3, [r7, #20]
 8011414:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 8011416:	2b00      	cmp	r3, #0
 8011418:	d101      	bne.n	801141e <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801141a:	2303      	movs	r3, #3
 801141c:	e26a      	b.n	80118f4 <LoRaMacInitialization+0x518>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 801141e:	7bfb      	ldrb	r3, [r7, #15]
 8011420:	4618      	mov	r0, r3
 8011422:	f003 fbcf 	bl	8014bc4 <RegionIsActive>
 8011426:	4603      	mov	r3, r0
 8011428:	f083 0301 	eor.w	r3, r3, #1
 801142c:	b2db      	uxtb	r3, r3
 801142e:	2b00      	cmp	r3, #0
 8011430:	d001      	beq.n	8011436 <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8011432:	2309      	movs	r3, #9
 8011434:	e25e      	b.n	80118f4 <LoRaMacInitialization+0x518>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 8011436:	6978      	ldr	r0, [r7, #20]
 8011438:	f002 f884 	bl	8013544 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 801143c:	f240 527c 	movw	r2, #1404	@ 0x57c
 8011440:	2100      	movs	r1, #0
 8011442:	48c7      	ldr	r0, [pc, #796]	@ (8011760 <LoRaMacInitialization+0x384>)
 8011444:	f005 feaa 	bl	801719c <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8011448:	f44f 62a4 	mov.w	r2, #1312	@ 0x520
 801144c:	2100      	movs	r1, #0
 801144e:	48c5      	ldr	r0, [pc, #788]	@ (8011764 <LoRaMacInitialization+0x388>)
 8011450:	f005 fea4 	bl	801719c <memset1>
    // Set non zero variables to its default value
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetries = 1;
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 8011454:	4ac2      	ldr	r2, [pc, #776]	@ (8011760 <LoRaMacInitialization+0x384>)
 8011456:	7bfb      	ldrb	r3, [r7, #15]
 8011458:	f882 3040 	strb.w	r3, [r2, #64]	@ 0x40
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 801145c:	4bc0      	ldr	r3, [pc, #768]	@ (8011760 <LoRaMacInitialization+0x384>)
 801145e:	2200      	movs	r2, #0
 8011460:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
    Nvm.MacGroup2.MacParams.RepeaterSupport = false; /* ST_WORKAROUND: Keep repeater feature */
 8011464:	4bbe      	ldr	r3, [pc, #760]	@ (8011760 <LoRaMacInitialization+0x384>)
 8011466:	2200      	movs	r2, #0
 8011468:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 801146c:	4bbc      	ldr	r3, [pc, #752]	@ (8011760 <LoRaMacInitialization+0x384>)
 801146e:	4abe      	ldr	r2, [pc, #760]	@ (8011768 <LoRaMacInitialization+0x38c>)
 8011470:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 8011474:	2300      	movs	r3, #0
 8011476:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    params.NvmGroup1 = &Nvm.RegionGroup1;
 801147a:	4bbc      	ldr	r3, [pc, #752]	@ (801176c <LoRaMacInitialization+0x390>)
 801147c:	61fb      	str	r3, [r7, #28]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 801147e:	4bbc      	ldr	r3, [pc, #752]	@ (8011770 <LoRaMacInitialization+0x394>)
 8011480:	623b      	str	r3, [r7, #32]
    params.Bands = &RegionBands;
 8011482:	4bbc      	ldr	r3, [pc, #752]	@ (8011774 <LoRaMacInitialization+0x398>)
 8011484:	627b      	str	r3, [r7, #36]	@ 0x24
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8011486:	4bb6      	ldr	r3, [pc, #728]	@ (8011760 <LoRaMacInitialization+0x384>)
 8011488:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801148c:	f107 021c 	add.w	r2, r7, #28
 8011490:	4611      	mov	r1, r2
 8011492:	4618      	mov	r0, r3
 8011494:	f003 fbcf 	bl	8014c36 <RegionInitDefaults>
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8011498:	230f      	movs	r3, #15
 801149a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801149e:	4bb0      	ldr	r3, [pc, #704]	@ (8011760 <LoRaMacInitialization+0x384>)
 80114a0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80114a4:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80114a8:	4611      	mov	r1, r2
 80114aa:	4618      	mov	r0, r3
 80114ac:	f003 fb9a 	bl	8014be4 <RegionGetPhyParam>
 80114b0:	4603      	mov	r3, r0
 80114b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 80114b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114b6:	2b00      	cmp	r3, #0
 80114b8:	bf14      	ite	ne
 80114ba:	2301      	movne	r3, #1
 80114bc:	2300      	moveq	r3, #0
 80114be:	b2da      	uxtb	r2, r3
 80114c0:	4ba7      	ldr	r3, [pc, #668]	@ (8011760 <LoRaMacInitialization+0x384>)
 80114c2:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108

    getPhy.Attribute = PHY_DEF_TX_POWER;
 80114c6:	230a      	movs	r3, #10
 80114c8:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80114cc:	4ba4      	ldr	r3, [pc, #656]	@ (8011760 <LoRaMacInitialization+0x384>)
 80114ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80114d2:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80114d6:	4611      	mov	r1, r2
 80114d8:	4618      	mov	r0, r3
 80114da:	f003 fb83 	bl	8014be4 <RegionGetPhyParam>
 80114de:	4603      	mov	r3, r0
 80114e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 80114e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114e4:	b25a      	sxtb	r2, r3
 80114e6:	4b9e      	ldr	r3, [pc, #632]	@ (8011760 <LoRaMacInitialization+0x384>)
 80114e8:	f883 20cc 	strb.w	r2, [r3, #204]	@ 0xcc

    getPhy.Attribute = PHY_DEF_TX_DR;
 80114ec:	2306      	movs	r3, #6
 80114ee:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80114f2:	4b9b      	ldr	r3, [pc, #620]	@ (8011760 <LoRaMacInitialization+0x384>)
 80114f4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80114f8:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80114fc:	4611      	mov	r1, r2
 80114fe:	4618      	mov	r0, r3
 8011500:	f003 fb70 	bl	8014be4 <RegionGetPhyParam>
 8011504:	4603      	mov	r3, r0
 8011506:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 8011508:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801150a:	b25a      	sxtb	r2, r3
 801150c:	4b94      	ldr	r3, [pc, #592]	@ (8011760 <LoRaMacInitialization+0x384>)
 801150e:	f883 20cd 	strb.w	r2, [r3, #205]	@ 0xcd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 8011512:	2310      	movs	r3, #16
 8011514:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011518:	4b91      	ldr	r3, [pc, #580]	@ (8011760 <LoRaMacInitialization+0x384>)
 801151a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801151e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011522:	4611      	mov	r1, r2
 8011524:	4618      	mov	r0, r3
 8011526:	f003 fb5d 	bl	8014be4 <RegionGetPhyParam>
 801152a:	4603      	mov	r3, r0
 801152c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 801152e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011530:	4a8b      	ldr	r2, [pc, #556]	@ (8011760 <LoRaMacInitialization+0x384>)
 8011532:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8011536:	2311      	movs	r3, #17
 8011538:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801153c:	4b88      	ldr	r3, [pc, #544]	@ (8011760 <LoRaMacInitialization+0x384>)
 801153e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011542:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011546:	4611      	mov	r1, r2
 8011548:	4618      	mov	r0, r3
 801154a:	f003 fb4b 	bl	8014be4 <RegionGetPhyParam>
 801154e:	4603      	mov	r3, r0
 8011550:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8011552:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011554:	4a82      	ldr	r2, [pc, #520]	@ (8011760 <LoRaMacInitialization+0x384>)
 8011556:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 801155a:	2312      	movs	r3, #18
 801155c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011560:	4b7f      	ldr	r3, [pc, #508]	@ (8011760 <LoRaMacInitialization+0x384>)
 8011562:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011566:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801156a:	4611      	mov	r1, r2
 801156c:	4618      	mov	r0, r3
 801156e:	f003 fb39 	bl	8014be4 <RegionGetPhyParam>
 8011572:	4603      	mov	r3, r0
 8011574:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8011576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011578:	4a79      	ldr	r2, [pc, #484]	@ (8011760 <LoRaMacInitialization+0x384>)
 801157a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 801157e:	2313      	movs	r3, #19
 8011580:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011584:	4b76      	ldr	r3, [pc, #472]	@ (8011760 <LoRaMacInitialization+0x384>)
 8011586:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801158a:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801158e:	4611      	mov	r1, r2
 8011590:	4618      	mov	r0, r3
 8011592:	f003 fb27 	bl	8014be4 <RegionGetPhyParam>
 8011596:	4603      	mov	r3, r0
 8011598:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 801159a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801159c:	4a70      	ldr	r2, [pc, #448]	@ (8011760 <LoRaMacInitialization+0x384>)
 801159e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 80115a2:	2314      	movs	r3, #20
 80115a4:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80115a8:	4b6d      	ldr	r3, [pc, #436]	@ (8011760 <LoRaMacInitialization+0x384>)
 80115aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80115ae:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80115b2:	4611      	mov	r1, r2
 80115b4:	4618      	mov	r0, r3
 80115b6:	f003 fb15 	bl	8014be4 <RegionGetPhyParam>
 80115ba:	4603      	mov	r3, r0
 80115bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 80115be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115c0:	4a67      	ldr	r2, [pc, #412]	@ (8011760 <LoRaMacInitialization+0x384>)
 80115c2:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 80115c6:	2316      	movs	r3, #22
 80115c8:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80115cc:	4b64      	ldr	r3, [pc, #400]	@ (8011760 <LoRaMacInitialization+0x384>)
 80115ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80115d2:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80115d6:	4611      	mov	r1, r2
 80115d8:	4618      	mov	r0, r3
 80115da:	f003 fb03 	bl	8014be4 <RegionGetPhyParam>
 80115de:	4603      	mov	r3, r0
 80115e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 80115e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115e4:	b2da      	uxtb	r2, r3
 80115e6:	4b5e      	ldr	r3, [pc, #376]	@ (8011760 <LoRaMacInitialization+0x384>)
 80115e8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 80115ec:	2317      	movs	r3, #23
 80115ee:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80115f2:	4b5b      	ldr	r3, [pc, #364]	@ (8011760 <LoRaMacInitialization+0x384>)
 80115f4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80115f8:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80115fc:	4611      	mov	r1, r2
 80115fe:	4618      	mov	r0, r3
 8011600:	f003 faf0 	bl	8014be4 <RegionGetPhyParam>
 8011604:	4603      	mov	r3, r0
 8011606:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8011608:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801160a:	4a55      	ldr	r2, [pc, #340]	@ (8011760 <LoRaMacInitialization+0x384>)
 801160c:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 8011610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011612:	4a53      	ldr	r2, [pc, #332]	@ (8011760 <LoRaMacInitialization+0x384>)
 8011614:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

    getPhy.Attribute = PHY_DEF_RX2_DR;
 8011618:	2318      	movs	r3, #24
 801161a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801161e:	4b50      	ldr	r3, [pc, #320]	@ (8011760 <LoRaMacInitialization+0x384>)
 8011620:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011624:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011628:	4611      	mov	r1, r2
 801162a:	4618      	mov	r0, r3
 801162c:	f003 fada 	bl	8014be4 <RegionGetPhyParam>
 8011630:	4603      	mov	r3, r0
 8011632:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8011634:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011636:	b2da      	uxtb	r2, r3
 8011638:	4b49      	ldr	r3, [pc, #292]	@ (8011760 <LoRaMacInitialization+0x384>)
 801163a:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 801163e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011640:	b2da      	uxtb	r2, r3
 8011642:	4b47      	ldr	r3, [pc, #284]	@ (8011760 <LoRaMacInitialization+0x384>)
 8011644:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8011648:	231d      	movs	r3, #29
 801164a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801164e:	4b44      	ldr	r3, [pc, #272]	@ (8011760 <LoRaMacInitialization+0x384>)
 8011650:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011654:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011658:	4611      	mov	r1, r2
 801165a:	4618      	mov	r0, r3
 801165c:	f003 fac2 	bl	8014be4 <RegionGetPhyParam>
 8011660:	4603      	mov	r3, r0
 8011662:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8011664:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011666:	b2da      	uxtb	r2, r3
 8011668:	4b3d      	ldr	r3, [pc, #244]	@ (8011760 <LoRaMacInitialization+0x384>)
 801166a:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 801166e:	231e      	movs	r3, #30
 8011670:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011674:	4b3a      	ldr	r3, [pc, #232]	@ (8011760 <LoRaMacInitialization+0x384>)
 8011676:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801167a:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801167e:	4611      	mov	r1, r2
 8011680:	4618      	mov	r0, r3
 8011682:	f003 faaf 	bl	8014be4 <RegionGetPhyParam>
 8011686:	4603      	mov	r3, r0
 8011688:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 801168a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801168c:	b2da      	uxtb	r2, r3
 801168e:	4b34      	ldr	r3, [pc, #208]	@ (8011760 <LoRaMacInitialization+0x384>)
 8011690:	f883 20b9 	strb.w	r2, [r3, #185]	@ 0xb9

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8011694:	231f      	movs	r3, #31
 8011696:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801169a:	4b31      	ldr	r3, [pc, #196]	@ (8011760 <LoRaMacInitialization+0x384>)
 801169c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80116a0:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80116a4:	4611      	mov	r1, r2
 80116a6:	4618      	mov	r0, r3
 80116a8:	f003 fa9c 	bl	8014be4 <RegionGetPhyParam>
 80116ac:	4603      	mov	r3, r0
 80116ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 80116b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80116b2:	4a2b      	ldr	r2, [pc, #172]	@ (8011760 <LoRaMacInitialization+0x384>)
 80116b4:	f8c2 30bc 	str.w	r3, [r2, #188]	@ 0xbc

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 80116b8:	2320      	movs	r3, #32
 80116ba:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80116be:	4b28      	ldr	r3, [pc, #160]	@ (8011760 <LoRaMacInitialization+0x384>)
 80116c0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80116c4:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80116c8:	4611      	mov	r1, r2
 80116ca:	4618      	mov	r0, r3
 80116cc:	f003 fa8a 	bl	8014be4 <RegionGetPhyParam>
 80116d0:	4603      	mov	r3, r0
 80116d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 80116d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80116d6:	4a22      	ldr	r2, [pc, #136]	@ (8011760 <LoRaMacInitialization+0x384>)
 80116d8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 80116dc:	230b      	movs	r3, #11
 80116de:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80116e2:	4b1f      	ldr	r3, [pc, #124]	@ (8011760 <LoRaMacInitialization+0x384>)
 80116e4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80116e8:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80116ec:	4611      	mov	r1, r2
 80116ee:	4618      	mov	r0, r3
 80116f0:	f003 fa78 	bl	8014be4 <RegionGetPhyParam>
 80116f4:	4603      	mov	r3, r0
 80116f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    MacCtx.AdrAckLimit = phyParam.Value;
 80116f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80116fa:	b29a      	uxth	r2, r3
 80116fc:	4b19      	ldr	r3, [pc, #100]	@ (8011764 <LoRaMacInitialization+0x388>)
 80116fe:	f8a3 2400 	strh.w	r2, [r3, #1024]	@ 0x400

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 8011702:	230c      	movs	r3, #12
 8011704:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011708:	4b15      	ldr	r3, [pc, #84]	@ (8011760 <LoRaMacInitialization+0x384>)
 801170a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801170e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011712:	4611      	mov	r1, r2
 8011714:	4618      	mov	r0, r3
 8011716:	f003 fa65 	bl	8014be4 <RegionGetPhyParam>
 801171a:	4603      	mov	r3, r0
 801171c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    MacCtx.AdrAckDelay = phyParam.Value;
 801171e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011720:	b29a      	uxth	r2, r3
 8011722:	4b10      	ldr	r3, [pc, #64]	@ (8011764 <LoRaMacInitialization+0x388>)
 8011724:	f8a3 2402 	strh.w	r2, [r3, #1026]	@ 0x402

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 8011728:	4b0d      	ldr	r3, [pc, #52]	@ (8011760 <LoRaMacInitialization+0x384>)
 801172a:	2201      	movs	r2, #1
 801172c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 8011730:	4b0b      	ldr	r3, [pc, #44]	@ (8011760 <LoRaMacInitialization+0x384>)
 8011732:	220a      	movs	r2, #10
 8011734:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 8011738:	4b09      	ldr	r3, [pc, #36]	@ (8011760 <LoRaMacInitialization+0x384>)
 801173a:	2206      	movs	r2, #6
 801173c:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 8011740:	4b07      	ldr	r3, [pc, #28]	@ (8011760 <LoRaMacInitialization+0x384>)
 8011742:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011746:	4a06      	ldr	r2, [pc, #24]	@ (8011760 <LoRaMacInitialization+0x384>)
 8011748:	6453      	str	r3, [r2, #68]	@ 0x44
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 801174a:	4b05      	ldr	r3, [pc, #20]	@ (8011760 <LoRaMacInitialization+0x384>)
 801174c:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 8011750:	4b03      	ldr	r3, [pc, #12]	@ (8011760 <LoRaMacInitialization+0x384>)
 8011752:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 8011756:	4b02      	ldr	r3, [pc, #8]	@ (8011760 <LoRaMacInitialization+0x384>)
 8011758:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801175c:	e00c      	b.n	8011778 <LoRaMacInitialization+0x39c>
 801175e:	bf00      	nop
 8011760:	20000e14 	.word	0x20000e14
 8011764:	200008f4 	.word	0x200008f4
 8011768:	01000400 	.word	0x01000400
 801176c:	20000ff8 	.word	0x20000ff8
 8011770:	20000ffc 	.word	0x20000ffc
 8011774:	2000190c 	.word	0x2000190c
 8011778:	4a60      	ldr	r2, [pc, #384]	@ (80118fc <LoRaMacInitialization+0x520>)
 801177a:	64d3      	str	r3, [r2, #76]	@ 0x4c
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 801177c:	4b5f      	ldr	r3, [pc, #380]	@ (80118fc <LoRaMacInitialization+0x520>)
 801177e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8011782:	4a5e      	ldr	r2, [pc, #376]	@ (80118fc <LoRaMacInitialization+0x520>)
 8011784:	6513      	str	r3, [r2, #80]	@ 0x50
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 8011786:	4b5d      	ldr	r3, [pc, #372]	@ (80118fc <LoRaMacInitialization+0x520>)
 8011788:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801178c:	4a5b      	ldr	r2, [pc, #364]	@ (80118fc <LoRaMacInitialization+0x520>)
 801178e:	6553      	str	r3, [r2, #84]	@ 0x54
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 8011790:	4b5a      	ldr	r3, [pc, #360]	@ (80118fc <LoRaMacInitialization+0x520>)
 8011792:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8011796:	4a59      	ldr	r2, [pc, #356]	@ (80118fc <LoRaMacInitialization+0x520>)
 8011798:	6593      	str	r3, [r2, #88]	@ 0x58
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 801179a:	4b58      	ldr	r3, [pc, #352]	@ (80118fc <LoRaMacInitialization+0x520>)
 801179c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80117a0:	4a56      	ldr	r2, [pc, #344]	@ (80118fc <LoRaMacInitialization+0x520>)
 80117a2:	65d3      	str	r3, [r2, #92]	@ 0x5c
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 80117a4:	4b55      	ldr	r3, [pc, #340]	@ (80118fc <LoRaMacInitialization+0x520>)
 80117a6:	f893 20a4 	ldrb.w	r2, [r3, #164]	@ 0xa4
 80117aa:	4b54      	ldr	r3, [pc, #336]	@ (80118fc <LoRaMacInitialization+0x520>)
 80117ac:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    params.NvmGroup1 = &Nvm.RegionGroup1;
    params.NvmGroup2 = &Nvm.RegionGroup2;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
 80117b0:	4b52      	ldr	r3, [pc, #328]	@ (80118fc <LoRaMacInitialization+0x520>)
 80117b2:	2201      	movs	r2, #1
 80117b4:	f883 210b 	strb.w	r2, [r3, #267]	@ 0x10b
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 80117b8:	4a51      	ldr	r2, [pc, #324]	@ (8011900 <LoRaMacInitialization+0x524>)
 80117ba:	693b      	ldr	r3, [r7, #16]
 80117bc:	f8c2 3348 	str.w	r3, [r2, #840]	@ 0x348
    ResetMacParameters( );
 80117c0:	f7ff f8d6 	bl	8010970 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 80117c4:	4b4d      	ldr	r3, [pc, #308]	@ (80118fc <LoRaMacInitialization+0x520>)
 80117c6:	2201      	movs	r2, #1
 80117c8:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105

    MacCtx.MacPrimitives = primitives;
 80117cc:	4a4c      	ldr	r2, [pc, #304]	@ (8011900 <LoRaMacInitialization+0x524>)
 80117ce:	697b      	ldr	r3, [r7, #20]
 80117d0:	f8c2 3344 	str.w	r3, [r2, #836]	@ 0x344
    MacCtx.MacFlags.Value = 0;
 80117d4:	4b4a      	ldr	r3, [pc, #296]	@ (8011900 <LoRaMacInitialization+0x524>)
 80117d6:	2200      	movs	r2, #0
 80117d8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    MacCtx.MacState = LORAMAC_STOPPED;
 80117dc:	4b48      	ldr	r3, [pc, #288]	@ (8011900 <LoRaMacInitialization+0x524>)
 80117de:	2201      	movs	r2, #1
 80117e0:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 80117e4:	4b45      	ldr	r3, [pc, #276]	@ (80118fc <LoRaMacInitialization+0x520>)
 80117e6:	2200      	movs	r2, #0
 80117e8:	62da      	str	r2, [r3, #44]	@ 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 80117ea:	4b44      	ldr	r3, [pc, #272]	@ (80118fc <LoRaMacInitialization+0x520>)
 80117ec:	2200      	movs	r2, #0
 80117ee:	631a      	str	r2, [r3, #48]	@ 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 80117f0:	2300      	movs	r3, #0
 80117f2:	9300      	str	r3, [sp, #0]
 80117f4:	4b43      	ldr	r3, [pc, #268]	@ (8011904 <LoRaMacInitialization+0x528>)
 80117f6:	2200      	movs	r2, #0
 80117f8:	f04f 31ff 	mov.w	r1, #4294967295
 80117fc:	4842      	ldr	r0, [pc, #264]	@ (8011908 <LoRaMacInitialization+0x52c>)
 80117fe:	f009 fd3b 	bl	801b278 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 8011802:	2300      	movs	r3, #0
 8011804:	9300      	str	r3, [sp, #0]
 8011806:	4b41      	ldr	r3, [pc, #260]	@ (801190c <LoRaMacInitialization+0x530>)
 8011808:	2200      	movs	r2, #0
 801180a:	f04f 31ff 	mov.w	r1, #4294967295
 801180e:	4840      	ldr	r0, [pc, #256]	@ (8011910 <LoRaMacInitialization+0x534>)
 8011810:	f009 fd32 	bl	801b278 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 8011814:	2300      	movs	r3, #0
 8011816:	9300      	str	r3, [sp, #0]
 8011818:	4b3e      	ldr	r3, [pc, #248]	@ (8011914 <LoRaMacInitialization+0x538>)
 801181a:	2200      	movs	r2, #0
 801181c:	f04f 31ff 	mov.w	r1, #4294967295
 8011820:	483d      	ldr	r0, [pc, #244]	@ (8011918 <LoRaMacInitialization+0x53c>)
 8011822:	f009 fd29 	bl	801b278 <UTIL_TIMER_Create>
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
 8011826:	2300      	movs	r3, #0
 8011828:	9300      	str	r3, [sp, #0]
 801182a:	4b3c      	ldr	r3, [pc, #240]	@ (801191c <LoRaMacInitialization+0x540>)
 801182c:	2200      	movs	r2, #0
 801182e:	f04f 31ff 	mov.w	r1, #4294967295
 8011832:	483b      	ldr	r0, [pc, #236]	@ (8011920 <LoRaMacInitialization+0x544>)
 8011834:	f009 fd20 	bl	801b278 <UTIL_TIMER_Create>
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 8011838:	4c30      	ldr	r4, [pc, #192]	@ (80118fc <LoRaMacInitialization+0x520>)
 801183a:	463b      	mov	r3, r7
 801183c:	4618      	mov	r0, r3
 801183e:	f009 f891 	bl	801a964 <SysTimeGetMcuTime>
 8011842:	f504 7388 	add.w	r3, r4, #272	@ 0x110
 8011846:	463a      	mov	r2, r7
 8011848:	e892 0003 	ldmia.w	r2, {r0, r1}
 801184c:	e883 0003 	stmia.w	r3, {r0, r1}

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
 8011850:	4b34      	ldr	r3, [pc, #208]	@ (8011924 <LoRaMacInitialization+0x548>)
 8011852:	2200      	movs	r2, #0
 8011854:	601a      	str	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 8011856:	4b2a      	ldr	r3, [pc, #168]	@ (8011900 <LoRaMacInitialization+0x524>)
 8011858:	4a33      	ldr	r2, [pc, #204]	@ (8011928 <LoRaMacInitialization+0x54c>)
 801185a:	f8c3 234c 	str.w	r2, [r3, #844]	@ 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 801185e:	4b28      	ldr	r3, [pc, #160]	@ (8011900 <LoRaMacInitialization+0x524>)
 8011860:	4a32      	ldr	r2, [pc, #200]	@ (801192c <LoRaMacInitialization+0x550>)
 8011862:	f8c3 2354 	str.w	r2, [r3, #852]	@ 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 8011866:	4b26      	ldr	r3, [pc, #152]	@ (8011900 <LoRaMacInitialization+0x524>)
 8011868:	4a31      	ldr	r2, [pc, #196]	@ (8011930 <LoRaMacInitialization+0x554>)
 801186a:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 801186e:	4b24      	ldr	r3, [pc, #144]	@ (8011900 <LoRaMacInitialization+0x524>)
 8011870:	4a30      	ldr	r2, [pc, #192]	@ (8011934 <LoRaMacInitialization+0x558>)
 8011872:	f8c3 2350 	str.w	r2, [r3, #848]	@ 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 8011876:	4b22      	ldr	r3, [pc, #136]	@ (8011900 <LoRaMacInitialization+0x524>)
 8011878:	4a2f      	ldr	r2, [pc, #188]	@ (8011938 <LoRaMacInitialization+0x55c>)
 801187a:	f8c3 2358 	str.w	r2, [r3, #856]	@ 0x358
    Radio.Init( &MacCtx.RadioEvents );
 801187e:	4b2f      	ldr	r3, [pc, #188]	@ (801193c <LoRaMacInitialization+0x560>)
 8011880:	681b      	ldr	r3, [r3, #0]
 8011882:	482f      	ldr	r0, [pc, #188]	@ (8011940 <LoRaMacInitialization+0x564>)
 8011884:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement, callbacks->GetUniqueId ) != SECURE_ELEMENT_SUCCESS ) /* ST_WORKAROUND: Add unique ID callback as input parameter */
 8011886:	693b      	ldr	r3, [r7, #16]
 8011888:	689b      	ldr	r3, [r3, #8]
 801188a:	4619      	mov	r1, r3
 801188c:	482d      	ldr	r0, [pc, #180]	@ (8011944 <LoRaMacInitialization+0x568>)
 801188e:	f7fa fb87 	bl	800bfa0 <SecureElementInit>
 8011892:	4603      	mov	r3, r0
 8011894:	2b00      	cmp	r3, #0
 8011896:	d001      	beq.n	801189c <LoRaMacInitialization+0x4c0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8011898:	2311      	movs	r3, #17
 801189a:	e02b      	b.n	80118f4 <LoRaMacInitialization+0x518>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 801189c:	4817      	ldr	r0, [pc, #92]	@ (80118fc <LoRaMacInitialization+0x520>)
 801189e:	f002 faf9 	bl	8013e94 <LoRaMacCryptoInit>
 80118a2:	4603      	mov	r3, r0
 80118a4:	2b00      	cmp	r3, #0
 80118a6:	d001      	beq.n	80118ac <LoRaMacInitialization+0x4d0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 80118a8:	2311      	movs	r3, #17
 80118aa:	e023      	b.n	80118f4 <LoRaMacInitialization+0x518>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 80118ac:	f001 fc1c 	bl	80130e8 <LoRaMacCommandsInit>
 80118b0:	4603      	mov	r3, r0
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d001      	beq.n	80118ba <LoRaMacInitialization+0x4de>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80118b6:	2313      	movs	r3, #19
 80118b8:	e01c      	b.n	80118f4 <LoRaMacInitialization+0x518>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 80118ba:	4823      	ldr	r0, [pc, #140]	@ (8011948 <LoRaMacInitialization+0x56c>)
 80118bc:	f002 fb8a 	bl	8013fd4 <LoRaMacCryptoSetMulticastReference>
 80118c0:	4603      	mov	r3, r0
 80118c2:	2b00      	cmp	r3, #0
 80118c4:	d001      	beq.n	80118ca <LoRaMacInitialization+0x4ee>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 80118c6:	2311      	movs	r3, #17
 80118c8:	e014      	b.n	80118f4 <LoRaMacInitialization+0x518>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 80118ca:	4b1c      	ldr	r3, [pc, #112]	@ (801193c <LoRaMacInitialization+0x560>)
 80118cc:	695b      	ldr	r3, [r3, #20]
 80118ce:	4798      	blx	r3
 80118d0:	4603      	mov	r3, r0
 80118d2:	4618      	mov	r0, r3
 80118d4:	f005 fc02 	bl	80170dc <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 80118d8:	4b18      	ldr	r3, [pc, #96]	@ (801193c <LoRaMacInitialization+0x560>)
 80118da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80118dc:	4a07      	ldr	r2, [pc, #28]	@ (80118fc <LoRaMacInitialization+0x520>)
 80118de:	f892 2105 	ldrb.w	r2, [r2, #261]	@ 0x105
 80118e2:	4610      	mov	r0, r2
 80118e4:	4798      	blx	r3
    Radio.Sleep( );
 80118e6:	4b15      	ldr	r3, [pc, #84]	@ (801193c <LoRaMacInitialization+0x560>)
 80118e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80118ea:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 80118ec:	2001      	movs	r0, #1
 80118ee:	f7fd fac7 	bl	800ee80 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 80118f2:	2300      	movs	r3, #0
}
 80118f4:	4618      	mov	r0, r3
 80118f6:	373c      	adds	r7, #60	@ 0x3c
 80118f8:	46bd      	mov	sp, r7
 80118fa:	bd90      	pop	{r4, r7, pc}
 80118fc:	20000e14 	.word	0x20000e14
 8011900:	200008f4 	.word	0x200008f4
 8011904:	0800f435 	.word	0x0800f435
 8011908:	20000c5c 	.word	0x20000c5c
 801190c:	0800f4c5 	.word	0x0800f4c5
 8011910:	20000c74 	.word	0x20000c74
 8011914:	0800f53d 	.word	0x0800f53d
 8011918:	20000c8c 	.word	0x20000c8c
 801191c:	0800f5bd 	.word	0x0800f5bd
 8011920:	20000cf8 	.word	0x20000cf8
 8011924:	2000199c 	.word	0x2000199c
 8011928:	0800df35 	.word	0x0800df35
 801192c:	0800dfad 	.word	0x0800dfad
 8011930:	0800e08d 	.word	0x0800e08d
 8011934:	0800e041 	.word	0x0800e041
 8011938:	0800e0c9 	.word	0x0800e0c9
 801193c:	0801f68c 	.word	0x0801f68c
 8011940:	20000c40 	.word	0x20000c40
 8011944:	20000f38 	.word	0x20000f38
 8011948:	20000eec 	.word	0x20000eec

0801194c <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 801194c:	b480      	push	{r7}
 801194e:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 8011950:	4b04      	ldr	r3, [pc, #16]	@ (8011964 <LoRaMacStart+0x18>)
 8011952:	2200      	movs	r2, #0
 8011954:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
    return LORAMAC_STATUS_OK;
 8011958:	2300      	movs	r3, #0
}
 801195a:	4618      	mov	r0, r3
 801195c:	46bd      	mov	sp, r7
 801195e:	bc80      	pop	{r7}
 8011960:	4770      	bx	lr
 8011962:	bf00      	nop
 8011964:	200008f4 	.word	0x200008f4

08011968 <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 8011968:	b580      	push	{r7, lr}
 801196a:	af00      	add	r7, sp, #0
    if( LoRaMacIsBusy( ) == false )
 801196c:	f7fd fa68 	bl	800ee40 <LoRaMacIsBusy>
 8011970:	4603      	mov	r3, r0
 8011972:	f083 0301 	eor.w	r3, r3, #1
 8011976:	b2db      	uxtb	r3, r3
 8011978:	2b00      	cmp	r3, #0
 801197a:	d005      	beq.n	8011988 <LoRaMacStop+0x20>
    {
        MacCtx.MacState = LORAMAC_STOPPED;
 801197c:	4b07      	ldr	r3, [pc, #28]	@ (801199c <LoRaMacStop+0x34>)
 801197e:	2201      	movs	r2, #1
 8011980:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
        return LORAMAC_STATUS_OK;
 8011984:	2300      	movs	r3, #0
 8011986:	e007      	b.n	8011998 <LoRaMacStop+0x30>
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 8011988:	4b04      	ldr	r3, [pc, #16]	@ (801199c <LoRaMacStop+0x34>)
 801198a:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 801198e:	2b01      	cmp	r3, #1
 8011990:	d101      	bne.n	8011996 <LoRaMacStop+0x2e>
    {
        return LORAMAC_STATUS_OK;
 8011992:	2300      	movs	r3, #0
 8011994:	e000      	b.n	8011998 <LoRaMacStop+0x30>
    }
    return LORAMAC_STATUS_BUSY;
 8011996:	2301      	movs	r3, #1
}
 8011998:	4618      	mov	r0, r3
 801199a:	bd80      	pop	{r7, pc}
 801199c:	200008f4 	.word	0x200008f4

080119a0 <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 80119a0:	b580      	push	{r7, lr}
 80119a2:	af00      	add	r7, sp, #0
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 80119a4:	4812      	ldr	r0, [pc, #72]	@ (80119f0 <LoRaMacHalt+0x50>)
 80119a6:	f009 fd0b 	bl	801b3c0 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 80119aa:	4812      	ldr	r0, [pc, #72]	@ (80119f4 <LoRaMacHalt+0x54>)
 80119ac:	f009 fd08 	bl	801b3c0 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 80119b0:	4811      	ldr	r0, [pc, #68]	@ (80119f8 <LoRaMacHalt+0x58>)
 80119b2:	f009 fd05 	bl	801b3c0 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 80119b6:	4811      	ldr	r0, [pc, #68]	@ (80119fc <LoRaMacHalt+0x5c>)
 80119b8:	f009 fd02 	bl	801b3c0 <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 80119bc:	f001 fa04 	bl	8012dc8 <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 80119c0:	4b0f      	ldr	r3, [pc, #60]	@ (8011a00 <LoRaMacHalt+0x60>)
 80119c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80119c4:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 80119c6:	4b0f      	ldr	r3, [pc, #60]	@ (8011a04 <LoRaMacHalt+0x64>)
 80119c8:	2200      	movs	r2, #0
 80119ca:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

    LoRaMacHandleNvm( &Nvm );
 80119ce:	480e      	ldr	r0, [pc, #56]	@ (8011a08 <LoRaMacHalt+0x68>)
 80119d0:	f7fd fc0c 	bl	800f1ec <LoRaMacHandleNvm>

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
 80119d4:	f240 527c 	movw	r2, #1404	@ 0x57c
 80119d8:	490b      	ldr	r1, [pc, #44]	@ (8011a08 <LoRaMacHalt+0x68>)
 80119da:	480c      	ldr	r0, [pc, #48]	@ (8011a0c <LoRaMacHalt+0x6c>)
 80119dc:	f005 fba3 	bl	8017126 <memcpy1>

    MacCtx.MacState = LORAMAC_STOPPED;
 80119e0:	4b08      	ldr	r3, [pc, #32]	@ (8011a04 <LoRaMacHalt+0x64>)
 80119e2:	2201      	movs	r2, #1
 80119e4:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

    return LORAMAC_STATUS_OK;
 80119e8:	2300      	movs	r3, #0
}
 80119ea:	4618      	mov	r0, r3
 80119ec:	bd80      	pop	{r7, pc}
 80119ee:	bf00      	nop
 80119f0:	20000c5c 	.word	0x20000c5c
 80119f4:	20000c74 	.word	0x20000c74
 80119f8:	20000c8c 	.word	0x20000c8c
 80119fc:	20000cf8 	.word	0x20000cf8
 8011a00:	0801f68c 	.word	0x0801f68c
 8011a04:	200008f4 	.word	0x200008f4
 8011a08:	20000e14 	.word	0x20000e14
 8011a0c:	20001390 	.word	0x20001390

08011a10 <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 8011a10:	b590      	push	{r4, r7, lr}
 8011a12:	b08d      	sub	sp, #52	@ 0x34
 8011a14:	af02      	add	r7, sp, #8
 8011a16:	4603      	mov	r3, r0
 8011a18:	6039      	str	r1, [r7, #0]
 8011a1a:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8011a1c:	4b42      	ldr	r3, [pc, #264]	@ (8011b28 <LoRaMacQueryTxPossible+0x118>)
 8011a1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011a20:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8011a22:	4b41      	ldr	r3, [pc, #260]	@ (8011b28 <LoRaMacQueryTxPossible+0x118>)
 8011a24:	f993 30cd 	ldrsb.w	r3, [r3, #205]	@ 0xcd
 8011a28:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8011a2a:	4b3f      	ldr	r3, [pc, #252]	@ (8011b28 <LoRaMacQueryTxPossible+0x118>)
 8011a2c:	f993 30cc 	ldrsb.w	r3, [r3, #204]	@ 0xcc
 8011a30:	73bb      	strb	r3, [r7, #14]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
 8011a32:	4b3e      	ldr	r3, [pc, #248]	@ (8011b2c <LoRaMacQueryTxPossible+0x11c>)
 8011a34:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 8011a38:	737b      	strb	r3, [r7, #13]
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 8011a3a:	2300      	movs	r3, #0
 8011a3c:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 8011a3e:	683b      	ldr	r3, [r7, #0]
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	d101      	bne.n	8011a48 <LoRaMacQueryTxPossible+0x38>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011a44:	2303      	movs	r3, #3
 8011a46:	e06b      	b.n	8011b20 <LoRaMacQueryTxPossible+0x110>

    // Setup ADR request
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 8011a48:	2300      	movs	r3, #0
 8011a4a:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8011a4c:	4b36      	ldr	r3, [pc, #216]	@ (8011b28 <LoRaMacQueryTxPossible+0x118>)
 8011a4e:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8011a52:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8011a54:	4b34      	ldr	r3, [pc, #208]	@ (8011b28 <LoRaMacQueryTxPossible+0x118>)
 8011a56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011a58:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8011a5a:	4b34      	ldr	r3, [pc, #208]	@ (8011b2c <LoRaMacQueryTxPossible+0x11c>)
 8011a5c:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8011a60:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 8011a62:	4b32      	ldr	r3, [pc, #200]	@ (8011b2c <LoRaMacQueryTxPossible+0x11c>)
 8011a64:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	@ 0x402
 8011a68:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8011a6a:	4b2f      	ldr	r3, [pc, #188]	@ (8011b28 <LoRaMacQueryTxPossible+0x118>)
 8011a6c:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8011a70:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8011a74:	4b2c      	ldr	r3, [pc, #176]	@ (8011b28 <LoRaMacQueryTxPossible+0x118>)
 8011a76:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 8011a7a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
 8011a7e:	4b2b      	ldr	r3, [pc, #172]	@ (8011b2c <LoRaMacQueryTxPossible+0x11c>)
 8011a80:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 8011a84:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011a88:	4b27      	ldr	r3, [pc, #156]	@ (8011b28 <LoRaMacQueryTxPossible+0x118>)
 8011a8a:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8011a8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 8011a92:	4b25      	ldr	r3, [pc, #148]	@ (8011b28 <LoRaMacQueryTxPossible+0x118>)
 8011a94:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011a98:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
 8011a9c:	f107 040d 	add.w	r4, r7, #13
 8011aa0:	f107 020e 	add.w	r2, r7, #14
 8011aa4:	f107 010f 	add.w	r1, r7, #15
 8011aa8:	f107 0014 	add.w	r0, r7, #20
 8011aac:	f107 0310 	add.w	r3, r7, #16
 8011ab0:	9300      	str	r3, [sp, #0]
 8011ab2:	4623      	mov	r3, r4
 8011ab4:	f001 f852 	bl	8012b5c <LoRaMacAdrCalcNext>
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8011ab8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011abc:	4618      	mov	r0, r3
 8011abe:	f7fd feb9 	bl	800f834 <GetMaxAppPayloadWithoutFOptsLength>
 8011ac2:	4603      	mov	r3, r0
 8011ac4:	461a      	mov	r2, r3
 8011ac6:	683b      	ldr	r3, [r7, #0]
 8011ac8:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8011aca:	f107 0308 	add.w	r3, r7, #8
 8011ace:	4618      	mov	r0, r3
 8011ad0:	f001 fbd8 	bl	8013284 <LoRaMacCommandsGetSizeSerializedCmds>
 8011ad4:	4603      	mov	r3, r0
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	d001      	beq.n	8011ade <LoRaMacQueryTxPossible+0xce>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011ada:	2313      	movs	r3, #19
 8011adc:	e020      	b.n	8011b20 <LoRaMacQueryTxPossible+0x110>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 8011ade:	68bb      	ldr	r3, [r7, #8]
 8011ae0:	2b0f      	cmp	r3, #15
 8011ae2:	d819      	bhi.n	8011b18 <LoRaMacQueryTxPossible+0x108>
 8011ae4:	683b      	ldr	r3, [r7, #0]
 8011ae6:	785b      	ldrb	r3, [r3, #1]
 8011ae8:	461a      	mov	r2, r3
 8011aea:	68bb      	ldr	r3, [r7, #8]
 8011aec:	429a      	cmp	r2, r3
 8011aee:	d313      	bcc.n	8011b18 <LoRaMacQueryTxPossible+0x108>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 8011af0:	683b      	ldr	r3, [r7, #0]
 8011af2:	785a      	ldrb	r2, [r3, #1]
 8011af4:	68bb      	ldr	r3, [r7, #8]
 8011af6:	b2db      	uxtb	r3, r3
 8011af8:	1ad3      	subs	r3, r2, r3
 8011afa:	b2da      	uxtb	r2, r3
 8011afc:	683b      	ldr	r3, [r7, #0]
 8011afe:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 8011b00:	683b      	ldr	r3, [r7, #0]
 8011b02:	785b      	ldrb	r3, [r3, #1]
 8011b04:	4619      	mov	r1, r3
 8011b06:	79fa      	ldrb	r2, [r7, #7]
 8011b08:	68bb      	ldr	r3, [r7, #8]
 8011b0a:	4413      	add	r3, r2
 8011b0c:	4299      	cmp	r1, r3
 8011b0e:	d301      	bcc.n	8011b14 <LoRaMacQueryTxPossible+0x104>
        {
            return LORAMAC_STATUS_OK;
 8011b10:	2300      	movs	r3, #0
 8011b12:	e005      	b.n	8011b20 <LoRaMacQueryTxPossible+0x110>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 8011b14:	2308      	movs	r3, #8
 8011b16:	e003      	b.n	8011b20 <LoRaMacQueryTxPossible+0x110>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 8011b18:	683b      	ldr	r3, [r7, #0]
 8011b1a:	2200      	movs	r2, #0
 8011b1c:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 8011b1e:	2308      	movs	r3, #8
    }
}
 8011b20:	4618      	mov	r0, r3
 8011b22:	372c      	adds	r7, #44	@ 0x2c
 8011b24:	46bd      	mov	sp, r7
 8011b26:	bd90      	pop	{r4, r7, pc}
 8011b28:	20000e14 	.word	0x20000e14
 8011b2c:	200008f4 	.word	0x200008f4

08011b30 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 8011b30:	b590      	push	{r4, r7, lr}
 8011b32:	b087      	sub	sp, #28
 8011b34:	af00      	add	r7, sp, #0
 8011b36:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8011b38:	2300      	movs	r3, #0
 8011b3a:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d101      	bne.n	8011b46 <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011b42:	2303      	movs	r3, #3
 8011b44:	e191      	b.n	8011e6a <LoRaMacMibGetRequestConfirm+0x33a>
    }

    switch( mibGet->Type )
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	781b      	ldrb	r3, [r3, #0]
 8011b4a:	2b39      	cmp	r3, #57	@ 0x39
 8011b4c:	f200 8186 	bhi.w	8011e5c <LoRaMacMibGetRequestConfirm+0x32c>
 8011b50:	a201      	add	r2, pc, #4	@ (adr r2, 8011b58 <LoRaMacMibGetRequestConfirm+0x28>)
 8011b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b56:	bf00      	nop
 8011b58:	08011c41 	.word	0x08011c41
 8011b5c:	08011c4d 	.word	0x08011c4d
 8011b60:	08011c59 	.word	0x08011c59
 8011b64:	08011c65 	.word	0x08011c65
 8011b68:	08011c71 	.word	0x08011c71
 8011b6c:	08011c7d 	.word	0x08011c7d
 8011b70:	08011c89 	.word	0x08011c89
 8011b74:	08011e5d 	.word	0x08011e5d
 8011b78:	08011e5d 	.word	0x08011e5d
 8011b7c:	08011e5d 	.word	0x08011e5d
 8011b80:	08011e5d 	.word	0x08011e5d
 8011b84:	08011e5d 	.word	0x08011e5d
 8011b88:	08011e5d 	.word	0x08011e5d
 8011b8c:	08011e5d 	.word	0x08011e5d
 8011b90:	08011e5d 	.word	0x08011e5d
 8011b94:	08011c95 	.word	0x08011c95
 8011b98:	08011ca1 	.word	0x08011ca1
 8011b9c:	08011cad 	.word	0x08011cad
 8011ba0:	08011ccf 	.word	0x08011ccf
 8011ba4:	08011ce1 	.word	0x08011ce1
 8011ba8:	08011cf3 	.word	0x08011cf3
 8011bac:	08011d05 	.word	0x08011d05
 8011bb0:	08011d39 	.word	0x08011d39
 8011bb4:	08011d17 	.word	0x08011d17
 8011bb8:	08011d5b 	.word	0x08011d5b
 8011bbc:	08011d67 	.word	0x08011d67
 8011bc0:	08011d71 	.word	0x08011d71
 8011bc4:	08011d7b 	.word	0x08011d7b
 8011bc8:	08011d85 	.word	0x08011d85
 8011bcc:	08011d8f 	.word	0x08011d8f
 8011bd0:	08011d99 	.word	0x08011d99
 8011bd4:	08011dc5 	.word	0x08011dc5
 8011bd8:	08011dd1 	.word	0x08011dd1
 8011bdc:	08011de9 	.word	0x08011de9
 8011be0:	08011ddd 	.word	0x08011ddd
 8011be4:	08011df5 	.word	0x08011df5
 8011be8:	08011dff 	.word	0x08011dff
 8011bec:	08011e0b 	.word	0x08011e0b
 8011bf0:	08011e25 	.word	0x08011e25
 8011bf4:	08011e15 	.word	0x08011e15
 8011bf8:	08011e1d 	.word	0x08011e1d
 8011bfc:	08011e5d 	.word	0x08011e5d
 8011c00:	08011e31 	.word	0x08011e31
 8011c04:	08011e5d 	.word	0x08011e5d
 8011c08:	08011e5d 	.word	0x08011e5d
 8011c0c:	08011e5d 	.word	0x08011e5d
 8011c10:	08011e5d 	.word	0x08011e5d
 8011c14:	08011e5d 	.word	0x08011e5d
 8011c18:	08011e5d 	.word	0x08011e5d
 8011c1c:	08011e5d 	.word	0x08011e5d
 8011c20:	08011e5d 	.word	0x08011e5d
 8011c24:	08011e5d 	.word	0x08011e5d
 8011c28:	08011e5d 	.word	0x08011e5d
 8011c2c:	08011e5d 	.word	0x08011e5d
 8011c30:	08011e5d 	.word	0x08011e5d
 8011c34:	08011e5d 	.word	0x08011e5d
 8011c38:	08011e45 	.word	0x08011e45
 8011c3c:	08011e51 	.word	0x08011e51
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 8011c40:	4b8c      	ldr	r3, [pc, #560]	@ (8011e74 <LoRaMacMibGetRequestConfirm+0x344>)
 8011c42:	f893 2104 	ldrb.w	r2, [r3, #260]	@ 0x104
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	711a      	strb	r2, [r3, #4]
            break;
 8011c4a:	e10d      	b.n	8011e68 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8011c4c:	4b89      	ldr	r3, [pc, #548]	@ (8011e74 <LoRaMacMibGetRequestConfirm+0x344>)
 8011c4e:	f893 211c 	ldrb.w	r2, [r3, #284]	@ 0x11c
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	711a      	strb	r2, [r3, #4]
            break;
 8011c56:	e107      	b.n	8011e68 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_DEV_EUI:
        {
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 8011c58:	f7fa fc76 	bl	800c548 <SecureElementGetDevEui>
 8011c5c:	4602      	mov	r2, r0
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	605a      	str	r2, [r3, #4]
            break;
 8011c62:	e101      	b.n	8011e68 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_JOIN_EUI:
        {
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 8011c64:	f7fa fc92 	bl	800c58c <SecureElementGetJoinEui>
 8011c68:	4602      	mov	r2, r0
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	605a      	str	r2, [r3, #4]
            break;
 8011c6e:	e0fb      	b.n	8011e68 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 8011c70:	4b80      	ldr	r3, [pc, #512]	@ (8011e74 <LoRaMacMibGetRequestConfirm+0x344>)
 8011c72:	f893 2106 	ldrb.w	r2, [r3, #262]	@ 0x106
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	711a      	strb	r2, [r3, #4]
            break;
 8011c7a:	e0f5      	b.n	8011e68 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 8011c7c:	4b7d      	ldr	r3, [pc, #500]	@ (8011e74 <LoRaMacMibGetRequestConfirm+0x344>)
 8011c7e:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	605a      	str	r2, [r3, #4]
            break;
 8011c86:	e0ef      	b.n	8011e68 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_DEV_ADDR:
        {
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 8011c88:	4b7a      	ldr	r3, [pc, #488]	@ (8011e74 <LoRaMacMibGetRequestConfirm+0x344>)
 8011c8a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	605a      	str	r2, [r3, #4]
            break;
 8011c92:	e0e9      	b.n	8011e68 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 8011c94:	4b77      	ldr	r3, [pc, #476]	@ (8011e74 <LoRaMacMibGetRequestConfirm+0x344>)
 8011c96:	f893 2105 	ldrb.w	r2, [r3, #261]	@ 0x105
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	711a      	strb	r2, [r3, #4]
            break;
 8011c9e:	e0e3      	b.n	8011e68 <LoRaMacMibGetRequestConfirm+0x338>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8011ca0:	4b74      	ldr	r3, [pc, #464]	@ (8011e74 <LoRaMacMibGetRequestConfirm+0x344>)
 8011ca2:	f893 2080 	ldrb.w	r2, [r3, #128]	@ 0x80
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	711a      	strb	r2, [r3, #4]
            break;
 8011caa:	e0dd      	b.n	8011e68 <LoRaMacMibGetRequestConfirm+0x338>
        }
        /* ST_WORKAROUND_END */
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 8011cac:	231c      	movs	r3, #28
 8011cae:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011cb0:	4b70      	ldr	r3, [pc, #448]	@ (8011e74 <LoRaMacMibGetRequestConfirm+0x344>)
 8011cb2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011cb6:	f107 0210 	add.w	r2, r7, #16
 8011cba:	4611      	mov	r1, r2
 8011cbc:	4618      	mov	r0, r3
 8011cbe:	f002 ff91 	bl	8014be4 <RegionGetPhyParam>
 8011cc2:	4603      	mov	r3, r0
 8011cc4:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 8011cc6:	68fa      	ldr	r2, [r7, #12]
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	605a      	str	r2, [r3, #4]
            break;
 8011ccc:	e0cc      	b.n	8011e68 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	4a68      	ldr	r2, [pc, #416]	@ (8011e74 <LoRaMacMibGetRequestConfirm+0x344>)
 8011cd2:	3304      	adds	r3, #4
 8011cd4:	3264      	adds	r2, #100	@ 0x64
 8011cd6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011cda:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8011cde:	e0c3      	b.n	8011e68 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	4a64      	ldr	r2, [pc, #400]	@ (8011e74 <LoRaMacMibGetRequestConfirm+0x344>)
 8011ce4:	3304      	adds	r3, #4
 8011ce6:	32a8      	adds	r2, #168	@ 0xa8
 8011ce8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011cec:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8011cf0:	e0ba      	b.n	8011e68 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	4a5f      	ldr	r2, [pc, #380]	@ (8011e74 <LoRaMacMibGetRequestConfirm+0x344>)
 8011cf6:	3304      	adds	r3, #4
 8011cf8:	326c      	adds	r2, #108	@ 0x6c
 8011cfa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011cfe:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8011d02:	e0b1      	b.n	8011e68 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	4a5b      	ldr	r2, [pc, #364]	@ (8011e74 <LoRaMacMibGetRequestConfirm+0x344>)
 8011d08:	3304      	adds	r3, #4
 8011d0a:	32b0      	adds	r2, #176	@ 0xb0
 8011d0c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011d10:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8011d14:	e0a8      	b.n	8011e68 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 8011d16:	231a      	movs	r3, #26
 8011d18:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011d1a:	4b56      	ldr	r3, [pc, #344]	@ (8011e74 <LoRaMacMibGetRequestConfirm+0x344>)
 8011d1c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011d20:	f107 0210 	add.w	r2, r7, #16
 8011d24:	4611      	mov	r1, r2
 8011d26:	4618      	mov	r0, r3
 8011d28:	f002 ff5c 	bl	8014be4 <RegionGetPhyParam>
 8011d2c:	4603      	mov	r3, r0
 8011d2e:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 8011d30:	68fa      	ldr	r2, [r7, #12]
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	605a      	str	r2, [r3, #4]
            break;
 8011d36:	e097      	b.n	8011e68 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8011d38:	2319      	movs	r3, #25
 8011d3a:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011d3c:	4b4d      	ldr	r3, [pc, #308]	@ (8011e74 <LoRaMacMibGetRequestConfirm+0x344>)
 8011d3e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011d42:	f107 0210 	add.w	r2, r7, #16
 8011d46:	4611      	mov	r1, r2
 8011d48:	4618      	mov	r0, r3
 8011d4a:	f002 ff4b 	bl	8014be4 <RegionGetPhyParam>
 8011d4e:	4603      	mov	r3, r0
 8011d50:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 8011d52:	68fa      	ldr	r2, [r7, #12]
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	605a      	str	r2, [r3, #4]
            break;
 8011d58:	e086      	b.n	8011e68 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8011d5a:	4b46      	ldr	r3, [pc, #280]	@ (8011e74 <LoRaMacMibGetRequestConfirm+0x344>)
 8011d5c:	f893 2060 	ldrb.w	r2, [r3, #96]	@ 0x60
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	711a      	strb	r2, [r3, #4]
            break;
 8011d64:	e080      	b.n	8011e68 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 8011d66:	4b43      	ldr	r3, [pc, #268]	@ (8011e74 <LoRaMacMibGetRequestConfirm+0x344>)
 8011d68:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	605a      	str	r2, [r3, #4]
            break;
 8011d6e:	e07b      	b.n	8011e68 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 8011d70:	4b40      	ldr	r3, [pc, #256]	@ (8011e74 <LoRaMacMibGetRequestConfirm+0x344>)
 8011d72:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	605a      	str	r2, [r3, #4]
            break;
 8011d78:	e076      	b.n	8011e68 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 8011d7a:	4b3e      	ldr	r3, [pc, #248]	@ (8011e74 <LoRaMacMibGetRequestConfirm+0x344>)
 8011d7c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	605a      	str	r2, [r3, #4]
            break;
 8011d82:	e071      	b.n	8011e68 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 8011d84:	4b3b      	ldr	r3, [pc, #236]	@ (8011e74 <LoRaMacMibGetRequestConfirm+0x344>)
 8011d86:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	605a      	str	r2, [r3, #4]
            break;
 8011d8c:	e06c      	b.n	8011e68 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 8011d8e:	4b39      	ldr	r3, [pc, #228]	@ (8011e74 <LoRaMacMibGetRequestConfirm+0x344>)
 8011d90:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	605a      	str	r2, [r3, #4]
            break;
 8011d96:	e067      	b.n	8011e68 <LoRaMacMibGetRequestConfirm+0x338>
        }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MIB_CHANNELS_MIN_TX_DATARATE:
        {
            getPhy.Attribute = PHY_MIN_TX_DR;
 8011d98:	2302      	movs	r3, #2
 8011d9a:	743b      	strb	r3, [r7, #16]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011d9c:	4b35      	ldr	r3, [pc, #212]	@ (8011e74 <LoRaMacMibGetRequestConfirm+0x344>)
 8011d9e:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8011da2:	74bb      	strb	r3, [r7, #18]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011da4:	4b33      	ldr	r3, [pc, #204]	@ (8011e74 <LoRaMacMibGetRequestConfirm+0x344>)
 8011da6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011daa:	f107 0210 	add.w	r2, r7, #16
 8011dae:	4611      	mov	r1, r2
 8011db0:	4618      	mov	r0, r3
 8011db2:	f002 ff17 	bl	8014be4 <RegionGetPhyParam>
 8011db6:	4603      	mov	r3, r0
 8011db8:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMinTxDatarate = phyParam.Value;
 8011dba:	68fb      	ldr	r3, [r7, #12]
 8011dbc:	b25a      	sxtb	r2, r3
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	711a      	strb	r2, [r3, #4]
            break;
 8011dc2:	e051      	b.n	8011e68 <LoRaMacMibGetRequestConfirm+0x338>
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8011dc4:	4b2b      	ldr	r3, [pc, #172]	@ (8011e74 <LoRaMacMibGetRequestConfirm+0x344>)
 8011dc6:	f993 20cd 	ldrsb.w	r2, [r3, #205]	@ 0xcd
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	711a      	strb	r2, [r3, #4]
            break;
 8011dce:	e04b      	b.n	8011e68 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8011dd0:	4b28      	ldr	r3, [pc, #160]	@ (8011e74 <LoRaMacMibGetRequestConfirm+0x344>)
 8011dd2:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	711a      	strb	r2, [r3, #4]
            break;
 8011dda:	e045      	b.n	8011e68 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8011ddc:	4b25      	ldr	r3, [pc, #148]	@ (8011e74 <LoRaMacMibGetRequestConfirm+0x344>)
 8011dde:	f993 20cc 	ldrsb.w	r2, [r3, #204]	@ 0xcc
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	711a      	strb	r2, [r3, #4]
            break;
 8011de6:	e03f      	b.n	8011e68 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8011de8:	4b22      	ldr	r3, [pc, #136]	@ (8011e74 <LoRaMacMibGetRequestConfirm+0x344>)
 8011dea:	f993 2038 	ldrsb.w	r2, [r3, #56]	@ 0x38
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	711a      	strb	r2, [r3, #4]
            break;
 8011df2:	e039      	b.n	8011e68 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 8011df4:	4b1f      	ldr	r3, [pc, #124]	@ (8011e74 <LoRaMacMibGetRequestConfirm+0x344>)
 8011df6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	605a      	str	r2, [r3, #4]
            break;
 8011dfc:	e034      	b.n	8011e68 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 8011dfe:	4b1d      	ldr	r3, [pc, #116]	@ (8011e74 <LoRaMacMibGetRequestConfirm+0x344>)
 8011e00:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	711a      	strb	r2, [r3, #4]
            break;
 8011e08:	e02e      	b.n	8011e68 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8011e0a:	4b1a      	ldr	r3, [pc, #104]	@ (8011e74 <LoRaMacMibGetRequestConfirm+0x344>)
 8011e0c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	605a      	str	r2, [r3, #4]
            break;
 8011e12:	e029      	b.n	8011e68 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	4a17      	ldr	r2, [pc, #92]	@ (8011e74 <LoRaMacMibGetRequestConfirm+0x344>)
 8011e18:	605a      	str	r2, [r3, #4]
            break;
 8011e1a:	e025      	b.n	8011e68 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_NVM_BKP_CTXS:
        {
            mibGet->Param.BackupContexts = &NvmBackup;
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	4a16      	ldr	r2, [pc, #88]	@ (8011e78 <LoRaMacMibGetRequestConfirm+0x348>)
 8011e20:	605a      	str	r2, [r3, #4]
            break;
 8011e22:	e021      	b.n	8011e68 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8011e24:	4b13      	ldr	r3, [pc, #76]	@ (8011e74 <LoRaMacMibGetRequestConfirm+0x344>)
 8011e26:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	605a      	str	r2, [r3, #4]
            break;
 8011e2e:	e01b      	b.n	8011e68 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	4a10      	ldr	r2, [pc, #64]	@ (8011e74 <LoRaMacMibGetRequestConfirm+0x344>)
 8011e34:	f8d2 2118 	ldr.w	r2, [r2, #280]	@ 0x118
 8011e38:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 8011e3a:	687c      	ldr	r4, [r7, #4]
 8011e3c:	f003 f848 	bl	8014ed0 <RegionGetVersion>
 8011e40:	60a0      	str	r0, [r4, #8]
            break;
 8011e42:	e011      	b.n	8011e68 <LoRaMacMibGetRequestConfirm+0x338>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 8011e44:	4b0b      	ldr	r3, [pc, #44]	@ (8011e74 <LoRaMacMibGetRequestConfirm+0x344>)
 8011e46:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	605a      	str	r2, [r3, #4]
            break;
 8011e4e:	e00b      	b.n	8011e68 <LoRaMacMibGetRequestConfirm+0x338>
        }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MIB_IS_CERT_FPORT_ON:
        {
            mibGet->Param.IsCertPortOn = Nvm.MacGroup2.IsCertPortOn;
 8011e50:	4b08      	ldr	r3, [pc, #32]	@ (8011e74 <LoRaMacMibGetRequestConfirm+0x344>)
 8011e52:	f893 210b 	ldrb.w	r2, [r3, #267]	@ 0x10b
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	711a      	strb	r2, [r3, #4]
            break;
 8011e5a:	e005      	b.n	8011e68 <LoRaMacMibGetRequestConfirm+0x338>
        }
#endif /* LORAMAC_VERSION */
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 8011e5c:	6878      	ldr	r0, [r7, #4]
 8011e5e:	f000 ffca 	bl	8012df6 <LoRaMacClassBMibGetRequestConfirm>
 8011e62:	4603      	mov	r3, r0
 8011e64:	75fb      	strb	r3, [r7, #23]
            break;
 8011e66:	bf00      	nop
        }
    }
    return status;
 8011e68:	7dfb      	ldrb	r3, [r7, #23]
}
 8011e6a:	4618      	mov	r0, r3
 8011e6c:	371c      	adds	r7, #28
 8011e6e:	46bd      	mov	sp, r7
 8011e70:	bd90      	pop	{r4, r7, pc}
 8011e72:	bf00      	nop
 8011e74:	20000e14 	.word	0x20000e14
 8011e78:	20001390 	.word	0x20001390

08011e7c <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 8011e7c:	b580      	push	{r7, lr}
 8011e7e:	b086      	sub	sp, #24
 8011e80:	af00      	add	r7, sp, #0
 8011e82:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8011e84:	2300      	movs	r3, #0
 8011e86:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	d101      	bne.n	8011e92 <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011e8e:	2303      	movs	r3, #3
 8011e90:	e35c      	b.n	801254c <LoRaMacMibSetRequestConfirm+0x6d0>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 8011e92:	4bb9      	ldr	r3, [pc, #740]	@ (8012178 <LoRaMacMibSetRequestConfirm+0x2fc>)
 8011e94:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8011e98:	f003 0302 	and.w	r3, r3, #2
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d001      	beq.n	8011ea4 <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8011ea0:	2301      	movs	r3, #1
 8011ea2:	e353      	b.n	801254c <LoRaMacMibSetRequestConfirm+0x6d0>
    }

    switch( mibSet->Type )
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	781b      	ldrb	r3, [r3, #0]
 8011ea8:	2b39      	cmp	r3, #57	@ 0x39
 8011eaa:	f200 8323 	bhi.w	80124f4 <LoRaMacMibSetRequestConfirm+0x678>
 8011eae:	a201      	add	r2, pc, #4	@ (adr r2, 8011eb4 <LoRaMacMibSetRequestConfirm+0x38>)
 8011eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011eb4:	08011f9d 	.word	0x08011f9d
 8011eb8:	08011fad 	.word	0x08011fad
 8011ebc:	08011fc7 	.word	0x08011fc7
 8011ec0:	08011fdf 	.word	0x08011fdf
 8011ec4:	08011ff7 	.word	0x08011ff7
 8011ec8:	08012003 	.word	0x08012003
 8011ecc:	0801200f 	.word	0x0801200f
 8011ed0:	0801201b 	.word	0x0801201b
 8011ed4:	08012041 	.word	0x08012041
 8011ed8:	08012067 	.word	0x08012067
 8011edc:	0801208d 	.word	0x0801208d
 8011ee0:	080120b3 	.word	0x080120b3
 8011ee4:	080120d9 	.word	0x080120d9
 8011ee8:	080120ff 	.word	0x080120ff
 8011eec:	08012125 	.word	0x08012125
 8011ef0:	0801214b 	.word	0x0801214b
 8011ef4:	0801216b 	.word	0x0801216b
 8011ef8:	080124f5 	.word	0x080124f5
 8011efc:	08012185 	.word	0x08012185
 8011f00:	080121f5 	.word	0x080121f5
 8011f04:	08012235 	.word	0x08012235
 8011f08:	08012297 	.word	0x08012297
 8011f0c:	08012307 	.word	0x08012307
 8011f10:	080122d7 	.word	0x080122d7
 8011f14:	08012337 	.word	0x08012337
 8011f18:	08012359 	.word	0x08012359
 8011f1c:	08012363 	.word	0x08012363
 8011f20:	0801236d 	.word	0x0801236d
 8011f24:	08012377 	.word	0x08012377
 8011f28:	08012381 	.word	0x08012381
 8011f2c:	080124f5 	.word	0x080124f5
 8011f30:	0801238b 	.word	0x0801238b
 8011f34:	080123bd 	.word	0x080123bd
 8011f38:	08012429 	.word	0x08012429
 8011f3c:	080123f7 	.word	0x080123f7
 8011f40:	08012465 	.word	0x08012465
 8011f44:	0801247b 	.word	0x0801247b
 8011f48:	08012493 	.word	0x08012493
 8011f4c:	0801249d 	.word	0x0801249d
 8011f50:	080124a9 	.word	0x080124a9
 8011f54:	080124f5 	.word	0x080124f5
 8011f58:	080124b3 	.word	0x080124b3
 8011f5c:	080124f5 	.word	0x080124f5
 8011f60:	080124f5 	.word	0x080124f5
 8011f64:	080124f5 	.word	0x080124f5
 8011f68:	080124f5 	.word	0x080124f5
 8011f6c:	080124f5 	.word	0x080124f5
 8011f70:	080124f5 	.word	0x080124f5
 8011f74:	080124f5 	.word	0x080124f5
 8011f78:	080124f5 	.word	0x080124f5
 8011f7c:	080124f5 	.word	0x080124f5
 8011f80:	080124f5 	.word	0x080124f5
 8011f84:	080124f5 	.word	0x080124f5
 8011f88:	080124f5 	.word	0x080124f5
 8011f8c:	080124f5 	.word	0x080124f5
 8011f90:	080124f5 	.word	0x080124f5
 8011f94:	080124dd 	.word	0x080124dd
 8011f98:	080124e9 	.word	0x080124e9
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	791b      	ldrb	r3, [r3, #4]
 8011fa0:	4618      	mov	r0, r3
 8011fa2:	f7fd fb75 	bl	800f690 <SwitchClass>
 8011fa6:	4603      	mov	r3, r0
 8011fa8:	75fb      	strb	r3, [r7, #23]
            break;
 8011faa:	e2c4      	b.n	8012536 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	791b      	ldrb	r3, [r3, #4]
 8011fb0:	2b02      	cmp	r3, #2
 8011fb2:	d005      	beq.n	8011fc0 <LoRaMacMibSetRequestConfirm+0x144>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	791a      	ldrb	r2, [r3, #4]
 8011fb8:	4b70      	ldr	r3, [pc, #448]	@ (801217c <LoRaMacMibSetRequestConfirm+0x300>)
 8011fba:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011fbe:	e2ba      	b.n	8012536 <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011fc0:	2303      	movs	r3, #3
 8011fc2:	75fb      	strb	r3, [r7, #23]
            break;
 8011fc4:	e2b7      	b.n	8012536 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	685b      	ldr	r3, [r3, #4]
 8011fca:	4618      	mov	r0, r3
 8011fcc:	f7fa faa4 	bl	800c518 <SecureElementSetDevEui>
 8011fd0:	4603      	mov	r3, r0
 8011fd2:	2b00      	cmp	r3, #0
 8011fd4:	f000 8294 	beq.w	8012500 <LoRaMacMibSetRequestConfirm+0x684>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011fd8:	2303      	movs	r3, #3
 8011fda:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011fdc:	e290      	b.n	8012500 <LoRaMacMibSetRequestConfirm+0x684>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	685b      	ldr	r3, [r3, #4]
 8011fe2:	4618      	mov	r0, r3
 8011fe4:	f7fa faba 	bl	800c55c <SecureElementSetJoinEui>
 8011fe8:	4603      	mov	r3, r0
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	f000 828a 	beq.w	8012504 <LoRaMacMibSetRequestConfirm+0x688>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011ff0:	2303      	movs	r3, #3
 8011ff2:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011ff4:	e286      	b.n	8012504 <LoRaMacMibSetRequestConfirm+0x688>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	791a      	ldrb	r2, [r3, #4]
 8011ffa:	4b60      	ldr	r3, [pc, #384]	@ (801217c <LoRaMacMibSetRequestConfirm+0x300>)
 8011ffc:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
            break;
 8012000:	e299      	b.n	8012536 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	685b      	ldr	r3, [r3, #4]
 8012006:	4a5d      	ldr	r2, [pc, #372]	@ (801217c <LoRaMacMibSetRequestConfirm+0x300>)
 8012008:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
            break;
 801200c:	e293      	b.n	8012536 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_DEV_ADDR:
        {
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	685b      	ldr	r3, [r3, #4]
 8012012:	4a5a      	ldr	r2, [pc, #360]	@ (801217c <LoRaMacMibSetRequestConfirm+0x300>)
 8012014:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
            break;
 8012018:	e28d      	b.n	8012536 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	685b      	ldr	r3, [r3, #4]
 801201e:	2b00      	cmp	r3, #0
 8012020:	d00b      	beq.n	801203a <LoRaMacMibSetRequestConfirm+0x1be>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	685b      	ldr	r3, [r3, #4]
 8012026:	4619      	mov	r1, r3
 8012028:	2000      	movs	r0, #0
 801202a:	f001 fffb 	bl	8014024 <LoRaMacCryptoSetKey>
 801202e:	4603      	mov	r3, r0
 8012030:	2b00      	cmp	r3, #0
 8012032:	f000 8269 	beq.w	8012508 <LoRaMacMibSetRequestConfirm+0x68c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012036:	2311      	movs	r3, #17
 8012038:	e288      	b.n	801254c <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801203a:	2303      	movs	r3, #3
 801203c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801203e:	e263      	b.n	8012508 <LoRaMacMibSetRequestConfirm+0x68c>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	685b      	ldr	r3, [r3, #4]
 8012044:	2b00      	cmp	r3, #0
 8012046:	d00b      	beq.n	8012060 <LoRaMacMibSetRequestConfirm+0x1e4>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	685b      	ldr	r3, [r3, #4]
 801204c:	4619      	mov	r1, r3
 801204e:	2001      	movs	r0, #1
 8012050:	f001 ffe8 	bl	8014024 <LoRaMacCryptoSetKey>
 8012054:	4603      	mov	r3, r0
 8012056:	2b00      	cmp	r3, #0
 8012058:	f000 8258 	beq.w	801250c <LoRaMacMibSetRequestConfirm+0x690>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801205c:	2311      	movs	r3, #17
 801205e:	e275      	b.n	801254c <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012060:	2303      	movs	r3, #3
 8012062:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012064:	e252      	b.n	801250c <LoRaMacMibSetRequestConfirm+0x690>
            break;
        }
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	685b      	ldr	r3, [r3, #4]
 801206a:	2b00      	cmp	r3, #0
 801206c:	d00b      	beq.n	8012086 <LoRaMacMibSetRequestConfirm+0x20a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	685b      	ldr	r3, [r3, #4]
 8012072:	4619      	mov	r1, r3
 8012074:	2002      	movs	r0, #2
 8012076:	f001 ffd5 	bl	8014024 <LoRaMacCryptoSetKey>
 801207a:	4603      	mov	r3, r0
 801207c:	2b00      	cmp	r3, #0
 801207e:	f000 8247 	beq.w	8012510 <LoRaMacMibSetRequestConfirm+0x694>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012082:	2311      	movs	r3, #17
 8012084:	e262      	b.n	801254c <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012086:	2303      	movs	r3, #3
 8012088:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801208a:	e241      	b.n	8012510 <LoRaMacMibSetRequestConfirm+0x694>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	685b      	ldr	r3, [r3, #4]
 8012090:	2b00      	cmp	r3, #0
 8012092:	d00b      	beq.n	80120ac <LoRaMacMibSetRequestConfirm+0x230>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	685b      	ldr	r3, [r3, #4]
 8012098:	4619      	mov	r1, r3
 801209a:	2003      	movs	r0, #3
 801209c:	f001 ffc2 	bl	8014024 <LoRaMacCryptoSetKey>
 80120a0:	4603      	mov	r3, r0
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	f000 8236 	beq.w	8012514 <LoRaMacMibSetRequestConfirm+0x698>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80120a8:	2311      	movs	r3, #17
 80120aa:	e24f      	b.n	801254c <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80120ac:	2303      	movs	r3, #3
 80120ae:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80120b0:	e230      	b.n	8012514 <LoRaMacMibSetRequestConfirm+0x698>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	685b      	ldr	r3, [r3, #4]
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	d00b      	beq.n	80120d2 <LoRaMacMibSetRequestConfirm+0x256>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	685b      	ldr	r3, [r3, #4]
 80120be:	4619      	mov	r1, r3
 80120c0:	207f      	movs	r0, #127	@ 0x7f
 80120c2:	f001 ffaf 	bl	8014024 <LoRaMacCryptoSetKey>
 80120c6:	4603      	mov	r3, r0
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	f000 8225 	beq.w	8012518 <LoRaMacMibSetRequestConfirm+0x69c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80120ce:	2311      	movs	r3, #17
 80120d0:	e23c      	b.n	801254c <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80120d2:	2303      	movs	r3, #3
 80120d4:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80120d6:	e21f      	b.n	8012518 <LoRaMacMibSetRequestConfirm+0x69c>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 ) /* ST_WORKAROUND: reduced LORAMAC_MAX_MC_CTX */
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	685b      	ldr	r3, [r3, #4]
 80120dc:	2b00      	cmp	r3, #0
 80120de:	d00b      	beq.n	80120f8 <LoRaMacMibSetRequestConfirm+0x27c>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	685b      	ldr	r3, [r3, #4]
 80120e4:	4619      	mov	r1, r3
 80120e6:	2080      	movs	r0, #128	@ 0x80
 80120e8:	f001 ff9c 	bl	8014024 <LoRaMacCryptoSetKey>
 80120ec:	4603      	mov	r3, r0
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	f000 8214 	beq.w	801251c <LoRaMacMibSetRequestConfirm+0x6a0>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80120f4:	2311      	movs	r3, #17
 80120f6:	e229      	b.n	801254c <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80120f8:	2303      	movs	r3, #3
 80120fa:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80120fc:	e20e      	b.n	801251c <LoRaMacMibSetRequestConfirm+0x6a0>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	685b      	ldr	r3, [r3, #4]
 8012102:	2b00      	cmp	r3, #0
 8012104:	d00b      	beq.n	801211e <LoRaMacMibSetRequestConfirm+0x2a2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	685b      	ldr	r3, [r3, #4]
 801210a:	4619      	mov	r1, r3
 801210c:	2081      	movs	r0, #129	@ 0x81
 801210e:	f001 ff89 	bl	8014024 <LoRaMacCryptoSetKey>
 8012112:	4603      	mov	r3, r0
 8012114:	2b00      	cmp	r3, #0
 8012116:	f000 8203 	beq.w	8012520 <LoRaMacMibSetRequestConfirm+0x6a4>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801211a:	2311      	movs	r3, #17
 801211c:	e216      	b.n	801254c <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801211e:	2303      	movs	r3, #3
 8012120:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012122:	e1fd      	b.n	8012520 <LoRaMacMibSetRequestConfirm+0x6a4>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	685b      	ldr	r3, [r3, #4]
 8012128:	2b00      	cmp	r3, #0
 801212a:	d00b      	beq.n	8012144 <LoRaMacMibSetRequestConfirm+0x2c8>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	685b      	ldr	r3, [r3, #4]
 8012130:	4619      	mov	r1, r3
 8012132:	2082      	movs	r0, #130	@ 0x82
 8012134:	f001 ff76 	bl	8014024 <LoRaMacCryptoSetKey>
 8012138:	4603      	mov	r3, r0
 801213a:	2b00      	cmp	r3, #0
 801213c:	f000 81f2 	beq.w	8012524 <LoRaMacMibSetRequestConfirm+0x6a8>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012140:	2311      	movs	r3, #17
 8012142:	e203      	b.n	801254c <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012144:	2303      	movs	r3, #3
 8012146:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012148:	e1ec      	b.n	8012524 <LoRaMacMibSetRequestConfirm+0x6a8>
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	791a      	ldrb	r2, [r3, #4]
 801214e:	4b0b      	ldr	r3, [pc, #44]	@ (801217c <LoRaMacMibSetRequestConfirm+0x300>)
 8012150:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8012154:	4b0a      	ldr	r3, [pc, #40]	@ (8012180 <LoRaMacMibSetRequestConfirm+0x304>)
 8012156:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012158:	4a08      	ldr	r2, [pc, #32]	@ (801217c <LoRaMacMibSetRequestConfirm+0x300>)
 801215a:	f892 2105 	ldrb.w	r2, [r2, #261]	@ 0x105
 801215e:	4610      	mov	r0, r2
 8012160:	4798      	blx	r3
            /* ST_WORAROUND_BEGIN: Required to avoid keeping the radio active after init */
            Radio.Sleep( );
 8012162:	4b07      	ldr	r3, [pc, #28]	@ (8012180 <LoRaMacMibSetRequestConfirm+0x304>)
 8012164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012166:	4798      	blx	r3
            /* ST_WORKAROUND_END */
            break;
 8012168:	e1e5      	b.n	8012536 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	791a      	ldrb	r2, [r3, #4]
 801216e:	4b03      	ldr	r3, [pc, #12]	@ (801217c <LoRaMacMibSetRequestConfirm+0x300>)
 8012170:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
            break;
 8012174:	e1df      	b.n	8012536 <LoRaMacMibSetRequestConfirm+0x6ba>
 8012176:	bf00      	nop
 8012178:	200008f4 	.word	0x200008f4
 801217c:	20000e14 	.word	0x20000e14
 8012180:	0801f68c 	.word	0x0801f68c
        }
        /* ST_WORKAROUND_END */
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	7a1b      	ldrb	r3, [r3, #8]
 8012188:	b25b      	sxtb	r3, r3
 801218a:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801218c:	4bb3      	ldr	r3, [pc, #716]	@ (801245c <LoRaMacMibSetRequestConfirm+0x5e0>)
 801218e:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 8012192:	727b      	strb	r3, [r7, #9]
            /* ST_WORAROUND_BEGIN: Check also the Rx Frequency parameter */
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 8012194:	4bb1      	ldr	r3, [pc, #708]	@ (801245c <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012196:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801219a:	f107 0108 	add.w	r1, r7, #8
 801219e:	2207      	movs	r2, #7
 80121a0:	4618      	mov	r0, r3
 80121a2:	f002 fd5a 	bl	8014c5a <RegionVerify>
 80121a6:	4603      	mov	r3, r0
 80121a8:	f083 0301 	eor.w	r3, r3, #1
 80121ac:	b2db      	uxtb	r3, r3
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	d002      	beq.n	80121b8 <LoRaMacMibSetRequestConfirm+0x33c>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80121b2:	2303      	movs	r3, #3
 80121b4:	75fb      	strb	r3, [r7, #23]
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            /* ST_WORKAROUND_END */
            break;
 80121b6:	e1be      	b.n	8012536 <LoRaMacMibSetRequestConfirm+0x6ba>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	685b      	ldr	r3, [r3, #4]
 80121bc:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 80121be:	4ba7      	ldr	r3, [pc, #668]	@ (801245c <LoRaMacMibSetRequestConfirm+0x5e0>)
 80121c0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80121c4:	f107 0108 	add.w	r1, r7, #8
 80121c8:	2200      	movs	r2, #0
 80121ca:	4618      	mov	r0, r3
 80121cc:	f002 fd45 	bl	8014c5a <RegionVerify>
 80121d0:	4603      	mov	r3, r0
 80121d2:	f083 0301 	eor.w	r3, r3, #1
 80121d6:	b2db      	uxtb	r3, r3
 80121d8:	2b00      	cmp	r3, #0
 80121da:	d002      	beq.n	80121e2 <LoRaMacMibSetRequestConfirm+0x366>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 80121dc:	2303      	movs	r3, #3
 80121de:	75fb      	strb	r3, [r7, #23]
            break;
 80121e0:	e1a9      	b.n	8012536 <LoRaMacMibSetRequestConfirm+0x6ba>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 80121e2:	4b9e      	ldr	r3, [pc, #632]	@ (801245c <LoRaMacMibSetRequestConfirm+0x5e0>)
 80121e4:	687a      	ldr	r2, [r7, #4]
 80121e6:	3364      	adds	r3, #100	@ 0x64
 80121e8:	3204      	adds	r2, #4
 80121ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80121ee:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80121f2:	e1a0      	b.n	8012536 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	7a1b      	ldrb	r3, [r3, #8]
 80121f8:	b25b      	sxtb	r3, r3
 80121fa:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80121fc:	4b97      	ldr	r3, [pc, #604]	@ (801245c <LoRaMacMibSetRequestConfirm+0x5e0>)
 80121fe:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 8012202:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8012204:	4b95      	ldr	r3, [pc, #596]	@ (801245c <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012206:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801220a:	f107 0108 	add.w	r1, r7, #8
 801220e:	2207      	movs	r2, #7
 8012210:	4618      	mov	r0, r3
 8012212:	f002 fd22 	bl	8014c5a <RegionVerify>
 8012216:	4603      	mov	r3, r0
 8012218:	2b00      	cmp	r3, #0
 801221a:	d008      	beq.n	801222e <LoRaMacMibSetRequestConfirm+0x3b2>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 801221c:	4b8f      	ldr	r3, [pc, #572]	@ (801245c <LoRaMacMibSetRequestConfirm+0x5e0>)
 801221e:	687a      	ldr	r2, [r7, #4]
 8012220:	33a8      	adds	r3, #168	@ 0xa8
 8012222:	3204      	adds	r2, #4
 8012224:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012228:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801222c:	e183      	b.n	8012536 <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801222e:	2303      	movs	r3, #3
 8012230:	75fb      	strb	r3, [r7, #23]
            break;
 8012232:	e180      	b.n	8012536 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	7a1b      	ldrb	r3, [r3, #8]
 8012238:	b25b      	sxtb	r3, r3
 801223a:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801223c:	4b87      	ldr	r3, [pc, #540]	@ (801245c <LoRaMacMibSetRequestConfirm+0x5e0>)
 801223e:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 8012242:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8012244:	4b85      	ldr	r3, [pc, #532]	@ (801245c <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012246:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801224a:	f107 0108 	add.w	r1, r7, #8
 801224e:	2207      	movs	r2, #7
 8012250:	4618      	mov	r0, r3
 8012252:	f002 fd02 	bl	8014c5a <RegionVerify>
 8012256:	4603      	mov	r3, r0
 8012258:	2b00      	cmp	r3, #0
 801225a:	d019      	beq.n	8012290 <LoRaMacMibSetRequestConfirm+0x414>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 801225c:	4b7f      	ldr	r3, [pc, #508]	@ (801245c <LoRaMacMibSetRequestConfirm+0x5e0>)
 801225e:	687a      	ldr	r2, [r7, #4]
 8012260:	336c      	adds	r3, #108	@ 0x6c
 8012262:	3204      	adds	r2, #4
 8012264:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012268:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 801226c:	4b7b      	ldr	r3, [pc, #492]	@ (801245c <LoRaMacMibSetRequestConfirm+0x5e0>)
 801226e:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8012272:	2b02      	cmp	r3, #2
 8012274:	f040 8158 	bne.w	8012528 <LoRaMacMibSetRequestConfirm+0x6ac>
 8012278:	4b78      	ldr	r3, [pc, #480]	@ (801245c <LoRaMacMibSetRequestConfirm+0x5e0>)
 801227a:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 801227e:	2b00      	cmp	r3, #0
 8012280:	f000 8152 	beq.w	8012528 <LoRaMacMibSetRequestConfirm+0x6ac>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 8012284:	4b76      	ldr	r3, [pc, #472]	@ (8012460 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012288:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 801228a:	f7fe fca7 	bl	8010bdc <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801228e:	e14b      	b.n	8012528 <LoRaMacMibSetRequestConfirm+0x6ac>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012290:	2303      	movs	r3, #3
 8012292:	75fb      	strb	r3, [r7, #23]
            break;
 8012294:	e148      	b.n	8012528 <LoRaMacMibSetRequestConfirm+0x6ac>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	7a1b      	ldrb	r3, [r3, #8]
 801229a:	b25b      	sxtb	r3, r3
 801229c:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801229e:	4b6f      	ldr	r3, [pc, #444]	@ (801245c <LoRaMacMibSetRequestConfirm+0x5e0>)
 80122a0:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 80122a4:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 80122a6:	4b6d      	ldr	r3, [pc, #436]	@ (801245c <LoRaMacMibSetRequestConfirm+0x5e0>)
 80122a8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80122ac:	f107 0108 	add.w	r1, r7, #8
 80122b0:	2207      	movs	r2, #7
 80122b2:	4618      	mov	r0, r3
 80122b4:	f002 fcd1 	bl	8014c5a <RegionVerify>
 80122b8:	4603      	mov	r3, r0
 80122ba:	2b00      	cmp	r3, #0
 80122bc:	d008      	beq.n	80122d0 <LoRaMacMibSetRequestConfirm+0x454>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 80122be:	4b67      	ldr	r3, [pc, #412]	@ (801245c <LoRaMacMibSetRequestConfirm+0x5e0>)
 80122c0:	687a      	ldr	r2, [r7, #4]
 80122c2:	33b0      	adds	r3, #176	@ 0xb0
 80122c4:	3204      	adds	r2, #4
 80122c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80122ca:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80122ce:	e132      	b.n	8012536 <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80122d0:	2303      	movs	r3, #3
 80122d2:	75fb      	strb	r3, [r7, #23]
            break;
 80122d4:	e12f      	b.n	8012536 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	685b      	ldr	r3, [r3, #4]
 80122da:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 80122dc:	2301      	movs	r3, #1
 80122de:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 80122e0:	4b5e      	ldr	r3, [pc, #376]	@ (801245c <LoRaMacMibSetRequestConfirm+0x5e0>)
 80122e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80122e6:	f107 020c 	add.w	r2, r7, #12
 80122ea:	4611      	mov	r1, r2
 80122ec:	4618      	mov	r0, r3
 80122ee:	f002 fcdd 	bl	8014cac <RegionChanMaskSet>
 80122f2:	4603      	mov	r3, r0
 80122f4:	f083 0301 	eor.w	r3, r3, #1
 80122f8:	b2db      	uxtb	r3, r3
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	f000 8116 	beq.w	801252c <LoRaMacMibSetRequestConfirm+0x6b0>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012300:	2303      	movs	r3, #3
 8012302:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012304:	e112      	b.n	801252c <LoRaMacMibSetRequestConfirm+0x6b0>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	685b      	ldr	r3, [r3, #4]
 801230a:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 801230c:	2300      	movs	r3, #0
 801230e:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8012310:	4b52      	ldr	r3, [pc, #328]	@ (801245c <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012312:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012316:	f107 020c 	add.w	r2, r7, #12
 801231a:	4611      	mov	r1, r2
 801231c:	4618      	mov	r0, r3
 801231e:	f002 fcc5 	bl	8014cac <RegionChanMaskSet>
 8012322:	4603      	mov	r3, r0
 8012324:	f083 0301 	eor.w	r3, r3, #1
 8012328:	b2db      	uxtb	r3, r3
 801232a:	2b00      	cmp	r3, #0
 801232c:	f000 8100 	beq.w	8012530 <LoRaMacMibSetRequestConfirm+0x6b4>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012330:	2303      	movs	r3, #3
 8012332:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012334:	e0fc      	b.n	8012530 <LoRaMacMibSetRequestConfirm+0x6b4>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	791b      	ldrb	r3, [r3, #4]
 801233a:	2b00      	cmp	r3, #0
 801233c:	d009      	beq.n	8012352 <LoRaMacMibSetRequestConfirm+0x4d6>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8012342:	2b0f      	cmp	r3, #15
 8012344:	d805      	bhi.n	8012352 <LoRaMacMibSetRequestConfirm+0x4d6>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	791a      	ldrb	r2, [r3, #4]
 801234a:	4b44      	ldr	r3, [pc, #272]	@ (801245c <LoRaMacMibSetRequestConfirm+0x5e0>)
 801234c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012350:	e0f1      	b.n	8012536 <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012352:	2303      	movs	r3, #3
 8012354:	75fb      	strb	r3, [r7, #23]
            break;
 8012356:	e0ee      	b.n	8012536 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	685b      	ldr	r3, [r3, #4]
 801235c:	4a3f      	ldr	r2, [pc, #252]	@ (801245c <LoRaMacMibSetRequestConfirm+0x5e0>)
 801235e:	64d3      	str	r3, [r2, #76]	@ 0x4c
            break;
 8012360:	e0e9      	b.n	8012536 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	685b      	ldr	r3, [r3, #4]
 8012366:	4a3d      	ldr	r2, [pc, #244]	@ (801245c <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012368:	6513      	str	r3, [r2, #80]	@ 0x50
            break;
 801236a:	e0e4      	b.n	8012536 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	685b      	ldr	r3, [r3, #4]
 8012370:	4a3a      	ldr	r2, [pc, #232]	@ (801245c <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012372:	6553      	str	r3, [r2, #84]	@ 0x54
            break;
 8012374:	e0df      	b.n	8012536 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	685b      	ldr	r3, [r3, #4]
 801237a:	4a38      	ldr	r2, [pc, #224]	@ (801245c <LoRaMacMibSetRequestConfirm+0x5e0>)
 801237c:	6593      	str	r3, [r2, #88]	@ 0x58
            break;
 801237e:	e0da      	b.n	8012536 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	685b      	ldr	r3, [r3, #4]
 8012384:	4a35      	ldr	r2, [pc, #212]	@ (801245c <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012386:	65d3      	str	r3, [r2, #92]	@ 0x5c
            break;
 8012388:	e0d5      	b.n	8012536 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8012390:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 8012392:	4b32      	ldr	r3, [pc, #200]	@ (801245c <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012394:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012398:	f107 0108 	add.w	r1, r7, #8
 801239c:	2206      	movs	r2, #6
 801239e:	4618      	mov	r0, r3
 80123a0:	f002 fc5b 	bl	8014c5a <RegionVerify>
 80123a4:	4603      	mov	r3, r0
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	d005      	beq.n	80123b6 <LoRaMacMibSetRequestConfirm+0x53a>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 80123aa:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80123ae:	4b2b      	ldr	r3, [pc, #172]	@ (801245c <LoRaMacMibSetRequestConfirm+0x5e0>)
 80123b0:	f883 20cd 	strb.w	r2, [r3, #205]	@ 0xcd
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80123b4:	e0bf      	b.n	8012536 <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80123b6:	2303      	movs	r3, #3
 80123b8:	75fb      	strb	r3, [r7, #23]
            break;
 80123ba:	e0bc      	b.n	8012536 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80123c2:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80123c4:	4b25      	ldr	r3, [pc, #148]	@ (801245c <LoRaMacMibSetRequestConfirm+0x5e0>)
 80123c6:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 80123ca:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 80123cc:	4b23      	ldr	r3, [pc, #140]	@ (801245c <LoRaMacMibSetRequestConfirm+0x5e0>)
 80123ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80123d2:	f107 0108 	add.w	r1, r7, #8
 80123d6:	2205      	movs	r2, #5
 80123d8:	4618      	mov	r0, r3
 80123da:	f002 fc3e 	bl	8014c5a <RegionVerify>
 80123de:	4603      	mov	r3, r0
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	d005      	beq.n	80123f0 <LoRaMacMibSetRequestConfirm+0x574>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 80123e4:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80123e8:	4b1c      	ldr	r3, [pc, #112]	@ (801245c <LoRaMacMibSetRequestConfirm+0x5e0>)
 80123ea:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80123ee:	e0a2      	b.n	8012536 <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80123f0:	2303      	movs	r3, #3
 80123f2:	75fb      	strb	r3, [r7, #23]
            break;
 80123f4:	e09f      	b.n	8012536 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80123fc:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 80123fe:	4b17      	ldr	r3, [pc, #92]	@ (801245c <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012400:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012404:	f107 0108 	add.w	r1, r7, #8
 8012408:	220a      	movs	r2, #10
 801240a:	4618      	mov	r0, r3
 801240c:	f002 fc25 	bl	8014c5a <RegionVerify>
 8012410:	4603      	mov	r3, r0
 8012412:	2b00      	cmp	r3, #0
 8012414:	d005      	beq.n	8012422 <LoRaMacMibSetRequestConfirm+0x5a6>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 8012416:	f997 2008 	ldrsb.w	r2, [r7, #8]
 801241a:	4b10      	ldr	r3, [pc, #64]	@ (801245c <LoRaMacMibSetRequestConfirm+0x5e0>)
 801241c:	f883 20cc 	strb.w	r2, [r3, #204]	@ 0xcc
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012420:	e089      	b.n	8012536 <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012422:	2303      	movs	r3, #3
 8012424:	75fb      	strb	r3, [r7, #23]
            break;
 8012426:	e086      	b.n	8012536 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 801242e:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8012430:	4b0a      	ldr	r3, [pc, #40]	@ (801245c <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012432:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012436:	f107 0108 	add.w	r1, r7, #8
 801243a:	2209      	movs	r2, #9
 801243c:	4618      	mov	r0, r3
 801243e:	f002 fc0c 	bl	8014c5a <RegionVerify>
 8012442:	4603      	mov	r3, r0
 8012444:	2b00      	cmp	r3, #0
 8012446:	d005      	beq.n	8012454 <LoRaMacMibSetRequestConfirm+0x5d8>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 8012448:	f997 2008 	ldrsb.w	r2, [r7, #8]
 801244c:	4b03      	ldr	r3, [pc, #12]	@ (801245c <LoRaMacMibSetRequestConfirm+0x5e0>)
 801244e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012452:	e070      	b.n	8012536 <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012454:	2303      	movs	r3, #3
 8012456:	75fb      	strb	r3, [r7, #23]
            break;
 8012458:	e06d      	b.n	8012536 <LoRaMacMibSetRequestConfirm+0x6ba>
 801245a:	bf00      	nop
 801245c:	20000e14 	.word	0x20000e14
 8012460:	0801f68c 	.word	0x0801f68c
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	685b      	ldr	r3, [r3, #4]
 8012468:	4a3a      	ldr	r2, [pc, #232]	@ (8012554 <LoRaMacMibSetRequestConfirm+0x6d8>)
 801246a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 801246e:	4b39      	ldr	r3, [pc, #228]	@ (8012554 <LoRaMacMibSetRequestConfirm+0x6d8>)
 8012470:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8012474:	4a37      	ldr	r2, [pc, #220]	@ (8012554 <LoRaMacMibSetRequestConfirm+0x6d8>)
 8012476:	6453      	str	r3, [r2, #68]	@ 0x44
            break;
 8012478:	e05d      	b.n	8012536 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	791a      	ldrb	r2, [r3, #4]
 801247e:	4b35      	ldr	r3, [pc, #212]	@ (8012554 <LoRaMacMibSetRequestConfirm+0x6d8>)
 8012480:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
 8012484:	4b33      	ldr	r3, [pc, #204]	@ (8012554 <LoRaMacMibSetRequestConfirm+0x6d8>)
 8012486:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 801248a:	4b32      	ldr	r3, [pc, #200]	@ (8012554 <LoRaMacMibSetRequestConfirm+0x6d8>)
 801248c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
            break;
 8012490:	e051      	b.n	8012536 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	685b      	ldr	r3, [r3, #4]
 8012496:	4a2f      	ldr	r2, [pc, #188]	@ (8012554 <LoRaMacMibSetRequestConfirm+0x6d8>)
 8012498:	67d3      	str	r3, [r2, #124]	@ 0x7c
            break;
 801249a:	e04c      	b.n	8012536 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	685b      	ldr	r3, [r3, #4]
 80124a0:	4a2c      	ldr	r2, [pc, #176]	@ (8012554 <LoRaMacMibSetRequestConfirm+0x6d8>)
 80124a2:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
            break;
 80124a6:	e046      	b.n	8012536 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_NVM_CTXS:
        {
            status = RestoreNvmData( );
 80124a8:	f7fe fdc8 	bl	801103c <RestoreNvmData>
 80124ac:	4603      	mov	r3, r0
 80124ae:	75fb      	strb	r3, [r7, #23]
            break;
 80124b0:	e041      	b.n	8012536 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	799b      	ldrb	r3, [r3, #6]
 80124b6:	2b01      	cmp	r3, #1
 80124b8:	d80d      	bhi.n	80124d6 <LoRaMacMibSetRequestConfirm+0x65a>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 80124ba:	4a26      	ldr	r2, [pc, #152]	@ (8012554 <LoRaMacMibSetRequestConfirm+0x6d8>)
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	685b      	ldr	r3, [r3, #4]
 80124c0:	f8c2 3118 	str.w	r3, [r2, #280]	@ 0x118

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	6858      	ldr	r0, [r3, #4]
 80124c8:	f001 fd10 	bl	8013eec <LoRaMacCryptoSetLrWanVersion>
 80124cc:	4603      	mov	r3, r0
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	d030      	beq.n	8012534 <LoRaMacMibSetRequestConfirm+0x6b8>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80124d2:	2311      	movs	r3, #17
 80124d4:	e03a      	b.n	801254c <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80124d6:	2303      	movs	r3, #3
 80124d8:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80124da:	e02b      	b.n	8012534 <LoRaMacMibSetRequestConfirm+0x6b8>
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	685b      	ldr	r3, [r3, #4]
 80124e0:	4a1c      	ldr	r2, [pc, #112]	@ (8012554 <LoRaMacMibSetRequestConfirm+0x6d8>)
 80124e2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
            break;
 80124e6:	e026      	b.n	8012536 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MIB_IS_CERT_FPORT_ON:
        {
            Nvm.MacGroup2.IsCertPortOn = mibSet->Param.IsCertPortOn;
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	791a      	ldrb	r2, [r3, #4]
 80124ec:	4b19      	ldr	r3, [pc, #100]	@ (8012554 <LoRaMacMibSetRequestConfirm+0x6d8>)
 80124ee:	f883 210b 	strb.w	r2, [r3, #267]	@ 0x10b
            break;
 80124f2:	e020      	b.n	8012536 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
#endif /* LORAMAC_VERSION */
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 80124f4:	6878      	ldr	r0, [r7, #4]
 80124f6:	f000 fc88 	bl	8012e0a <LoRaMacMibClassBSetRequestConfirm>
 80124fa:	4603      	mov	r3, r0
 80124fc:	75fb      	strb	r3, [r7, #23]
            break;
 80124fe:	e01a      	b.n	8012536 <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8012500:	bf00      	nop
 8012502:	e018      	b.n	8012536 <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8012504:	bf00      	nop
 8012506:	e016      	b.n	8012536 <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8012508:	bf00      	nop
 801250a:	e014      	b.n	8012536 <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 801250c:	bf00      	nop
 801250e:	e012      	b.n	8012536 <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8012510:	bf00      	nop
 8012512:	e010      	b.n	8012536 <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8012514:	bf00      	nop
 8012516:	e00e      	b.n	8012536 <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8012518:	bf00      	nop
 801251a:	e00c      	b.n	8012536 <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 801251c:	bf00      	nop
 801251e:	e00a      	b.n	8012536 <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8012520:	bf00      	nop
 8012522:	e008      	b.n	8012536 <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8012524:	bf00      	nop
 8012526:	e006      	b.n	8012536 <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8012528:	bf00      	nop
 801252a:	e004      	b.n	8012536 <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 801252c:	bf00      	nop
 801252e:	e002      	b.n	8012536 <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8012530:	bf00      	nop
 8012532:	e000      	b.n	8012536 <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8012534:	bf00      	nop
        }
    }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( status == LORAMAC_STATUS_OK )
 8012536:	7dfb      	ldrb	r3, [r7, #23]
 8012538:	2b00      	cmp	r3, #0
 801253a:	d106      	bne.n	801254a <LoRaMacMibSetRequestConfirm+0x6ce>
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 801253c:	4a06      	ldr	r2, [pc, #24]	@ (8012558 <LoRaMacMibSetRequestConfirm+0x6dc>)
 801253e:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 8012542:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012546:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
    }
#endif /* LORAMAC_VERSION */
    return status;
 801254a:	7dfb      	ldrb	r3, [r7, #23]
}
 801254c:	4618      	mov	r0, r3
 801254e:	3718      	adds	r7, #24
 8012550:	46bd      	mov	sp, r7
 8012552:	bd80      	pop	{r7, pc}
 8012554:	20000e14 	.word	0x20000e14
 8012558:	200008f4 	.word	0x200008f4

0801255c <LoRaMacMlmeRequest>:
    }
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 801255c:	b580      	push	{r7, lr}
 801255e:	b08a      	sub	sp, #40	@ 0x28
 8012560:	af00      	add	r7, sp, #0
 8012562:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012564:	2302      	movs	r3, #2
 8012566:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 801256a:	2300      	movs	r3, #0
 801256c:	83bb      	strh	r3, [r7, #28]

    if( mlmeRequest == NULL )
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	2b00      	cmp	r3, #0
 8012572:	d101      	bne.n	8012578 <LoRaMacMlmeRequest+0x1c>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012574:	2303      	movs	r3, #3
 8012576:	e16c      	b.n	8012852 <LoRaMacMlmeRequest+0x2f6>
    }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	2200      	movs	r2, #0
 801257c:	611a      	str	r2, [r3, #16]
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 801257e:	f7fc fc5f 	bl	800ee40 <LoRaMacIsBusy>
 8012582:	4603      	mov	r3, r0
 8012584:	2b00      	cmp	r3, #0
 8012586:	d001      	beq.n	801258c <LoRaMacMlmeRequest+0x30>
    {
        return LORAMAC_STATUS_BUSY;
 8012588:	2301      	movs	r3, #1
 801258a:	e162      	b.n	8012852 <LoRaMacMlmeRequest+0x2f6>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 801258c:	f001 f956 	bl	801383c <LoRaMacConfirmQueueIsFull>
 8012590:	4603      	mov	r3, r0
 8012592:	2b00      	cmp	r3, #0
 8012594:	d001      	beq.n	801259a <LoRaMacMlmeRequest+0x3e>
    {
        return LORAMAC_STATUS_BUSY;
 8012596:	2301      	movs	r3, #1
 8012598:	e15b      	b.n	8012852 <LoRaMacMlmeRequest+0x2f6>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 801259a:	f001 f943 	bl	8013824 <LoRaMacConfirmQueueGetCnt>
 801259e:	4603      	mov	r3, r0
 80125a0:	2b00      	cmp	r3, #0
 80125a2:	d104      	bne.n	80125ae <LoRaMacMlmeRequest+0x52>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 80125a4:	2214      	movs	r2, #20
 80125a6:	2100      	movs	r1, #0
 80125a8:	48ac      	ldr	r0, [pc, #688]	@ (801285c <LoRaMacMlmeRequest+0x300>)
 80125aa:	f004 fdf7 	bl	801719c <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80125ae:	4bac      	ldr	r3, [pc, #688]	@ (8012860 <LoRaMacMlmeRequest+0x304>)
 80125b0:	2201      	movs	r2, #1
 80125b2:	f883 2459 	strb.w	r2, [r3, #1113]	@ 0x459

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 80125b6:	4aaa      	ldr	r2, [pc, #680]	@ (8012860 <LoRaMacMlmeRequest+0x304>)
 80125b8:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 80125bc:	f043 0304 	orr.w	r3, r3, #4
 80125c0:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
    queueElement.Request = mlmeRequest->Type;
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	781b      	ldrb	r3, [r3, #0]
 80125c8:	f887 3020 	strb.w	r3, [r7, #32]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80125cc:	2301      	movs	r3, #1
 80125ce:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    queueElement.RestrictCommonReadyToHandle = false;
 80125d2:	2300      	movs	r3, #0
 80125d4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    queueElement.ReadyToHandle = false;
 80125d8:	2300      	movs	r3, #0
 80125da:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
#endif /* LORAMAC_VERSION */

    switch( mlmeRequest->Type )
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	781b      	ldrb	r3, [r3, #0]
 80125e2:	3b01      	subs	r3, #1
 80125e4:	2b0c      	cmp	r3, #12
 80125e6:	f200 8108 	bhi.w	80127fa <LoRaMacMlmeRequest+0x29e>
 80125ea:	a201      	add	r2, pc, #4	@ (adr r2, 80125f0 <LoRaMacMlmeRequest+0x94>)
 80125ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80125f0:	08012625 	.word	0x08012625
 80125f4:	080127fb 	.word	0x080127fb
 80125f8:	080127fb 	.word	0x080127fb
 80125fc:	080126fb 	.word	0x080126fb
 8012600:	0801271d 	.word	0x0801271d
 8012604:	080127fb 	.word	0x080127fb
 8012608:	080127fb 	.word	0x080127fb
 801260c:	080127fb 	.word	0x080127fb
 8012610:	0801273b 	.word	0x0801273b
 8012614:	080127fb 	.word	0x080127fb
 8012618:	080127c9 	.word	0x080127c9
 801261c:	0801275d 	.word	0x0801275d
 8012620:	080127a7 	.word	0x080127a7
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8012624:	4b8e      	ldr	r3, [pc, #568]	@ (8012860 <LoRaMacMlmeRequest+0x304>)
 8012626:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 801262a:	f003 0320 	and.w	r3, r3, #32
 801262e:	2b00      	cmp	r3, #0
 8012630:	d001      	beq.n	8012636 <LoRaMacMlmeRequest+0xda>
            {
                return LORAMAC_STATUS_BUSY;
 8012632:	2301      	movs	r3, #1
 8012634:	e10d      	b.n	8012852 <LoRaMacMlmeRequest+0x2f6>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
            }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_OTAA )
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	791b      	ldrb	r3, [r3, #4]
 801263a:	2b02      	cmp	r3, #2
 801263c:	d12e      	bne.n	801269c <LoRaMacMlmeRequest+0x140>
            {
                ResetMacParameters( );
 801263e:	f7fe f997 	bl	8010970 <ResetMacParameters>

                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8012642:	4b88      	ldr	r3, [pc, #544]	@ (8012864 <LoRaMacMlmeRequest+0x308>)
 8012644:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	795b      	ldrb	r3, [r3, #5]
 801264c:	b25b      	sxtb	r3, r3
 801264e:	2200      	movs	r2, #0
 8012650:	4619      	mov	r1, r3
 8012652:	f002 fbea 	bl	8014e2a <RegionAlternateDr>
 8012656:	4603      	mov	r3, r0
 8012658:	461a      	mov	r2, r3
 801265a:	4b82      	ldr	r3, [pc, #520]	@ (8012864 <LoRaMacMlmeRequest+0x308>)
 801265c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8012660:	2307      	movs	r3, #7
 8012662:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

                status = SendReJoinReq( JOIN_REQ );
 8012666:	20ff      	movs	r0, #255	@ 0xff
 8012668:	f7fd ff00 	bl	801046c <SendReJoinReq>
 801266c:	4603      	mov	r3, r0
 801266e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

                if( status != LORAMAC_STATUS_OK )
 8012672:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012676:	2b00      	cmp	r3, #0
 8012678:	f000 80c1 	beq.w	80127fe <LoRaMacMlmeRequest+0x2a2>
                {
                    // Revert back the previous datarate ( mainly used for US915 like regions )
                    Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 801267c:	4b79      	ldr	r3, [pc, #484]	@ (8012864 <LoRaMacMlmeRequest+0x308>)
 801267e:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	795b      	ldrb	r3, [r3, #5]
 8012686:	b25b      	sxtb	r3, r3
 8012688:	2201      	movs	r2, #1
 801268a:	4619      	mov	r1, r3
 801268c:	f002 fbcd 	bl	8014e2a <RegionAlternateDr>
 8012690:	4603      	mov	r3, r0
 8012692:	461a      	mov	r2, r3
 8012694:	4b73      	ldr	r3, [pc, #460]	@ (8012864 <LoRaMacMlmeRequest+0x308>)
 8012696:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                MacCtx.MacCallbacks->MacProcessNotify( );
                MacCtx.MacFlags.Bits.MacDone = 1;
                status = LORAMAC_STATUS_OK;
            }
#endif /* LORAMAC_VERSION */
            break;
 801269a:	e0b0      	b.n	80127fe <LoRaMacMlmeRequest+0x2a2>
            else if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_ABP )
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	791b      	ldrb	r3, [r3, #4]
 80126a0:	2b01      	cmp	r3, #1
 80126a2:	f040 80ac 	bne.w	80127fe <LoRaMacMlmeRequest+0x2a2>
                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 80126a6:	4b6f      	ldr	r3, [pc, #444]	@ (8012864 <LoRaMacMlmeRequest+0x308>)
 80126a8:	2200      	movs	r2, #0
 80126aa:	f883 2109 	strb.w	r2, [r3, #265]	@ 0x109
                params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 80126ae:	2302      	movs	r3, #2
 80126b0:	763b      	strb	r3, [r7, #24]
                RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 80126b2:	4b6c      	ldr	r3, [pc, #432]	@ (8012864 <LoRaMacMlmeRequest+0x308>)
 80126b4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80126b8:	f107 020c 	add.w	r2, r7, #12
 80126bc:	4611      	mov	r1, r2
 80126be:	4618      	mov	r0, r3
 80126c0:	f002 fab9 	bl	8014c36 <RegionInitDefaults>
                Nvm.MacGroup2.NetworkActivation = mlmeRequest->Req.Join.NetworkActivation;
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	791a      	ldrb	r2, [r3, #4]
 80126c8:	4b66      	ldr	r3, [pc, #408]	@ (8012864 <LoRaMacMlmeRequest+0x308>)
 80126ca:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80126ce:	2300      	movs	r3, #0
 80126d0:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
                queueElement.ReadyToHandle = true;
 80126d4:	2301      	movs	r3, #1
 80126d6:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
                MacCtx.MacCallbacks->MacProcessNotify( );
 80126da:	4b61      	ldr	r3, [pc, #388]	@ (8012860 <LoRaMacMlmeRequest+0x304>)
 80126dc:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 80126e0:	691b      	ldr	r3, [r3, #16]
 80126e2:	4798      	blx	r3
                MacCtx.MacFlags.Bits.MacDone = 1;
 80126e4:	4a5e      	ldr	r2, [pc, #376]	@ (8012860 <LoRaMacMlmeRequest+0x304>)
 80126e6:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 80126ea:	f043 0320 	orr.w	r3, r3, #32
 80126ee:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
                status = LORAMAC_STATUS_OK;
 80126f2:	2300      	movs	r3, #0
 80126f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 80126f8:	e081      	b.n	80127fe <LoRaMacMlmeRequest+0x2a2>
        }
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 80126fa:	2300      	movs	r3, #0
 80126fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8012700:	f107 031c 	add.w	r3, r7, #28
 8012704:	2200      	movs	r2, #0
 8012706:	4619      	mov	r1, r3
 8012708:	2002      	movs	r0, #2
 801270a:	f000 fcfd 	bl	8013108 <LoRaMacCommandsAddCmd>
 801270e:	4603      	mov	r3, r0
 8012710:	2b00      	cmp	r3, #0
 8012712:	d076      	beq.n	8012802 <LoRaMacMlmeRequest+0x2a6>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012714:	2313      	movs	r3, #19
 8012716:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 801271a:	e072      	b.n	8012802 <LoRaMacMlmeRequest+0x2a6>
            break;
        }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	8898      	ldrh	r0, [r3, #4]
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	6899      	ldr	r1, [r3, #8]
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	f993 300c 	ldrsb.w	r3, [r3, #12]
 801272a:	b2db      	uxtb	r3, r3
 801272c:	461a      	mov	r2, r3
 801272e:	f7fe fc65 	bl	8010ffc <SetTxContinuousWave>
 8012732:	4603      	mov	r3, r0
 8012734:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8012738:	e06a      	b.n	8012810 <LoRaMacMlmeRequest+0x2b4>
        }
#endif /* LORAMAC_VERSION */
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 801273a:	2300      	movs	r3, #0
 801273c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8012740:	f107 031c 	add.w	r3, r7, #28
 8012744:	2200      	movs	r2, #0
 8012746:	4619      	mov	r1, r3
 8012748:	200d      	movs	r0, #13
 801274a:	f000 fcdd 	bl	8013108 <LoRaMacCommandsAddCmd>
 801274e:	4603      	mov	r3, r0
 8012750:	2b00      	cmp	r3, #0
 8012752:	d058      	beq.n	8012806 <LoRaMacMlmeRequest+0x2aa>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012754:	2313      	movs	r3, #19
 8012756:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 801275a:	e054      	b.n	8012806 <LoRaMacMlmeRequest+0x2aa>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 801275c:	4b41      	ldr	r3, [pc, #260]	@ (8012864 <LoRaMacMlmeRequest+0x308>)
 801275e:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8012762:	2b00      	cmp	r3, #0
 8012764:	d151      	bne.n	801280a <LoRaMacMlmeRequest+0x2ae>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	791b      	ldrb	r3, [r3, #4]
 801276a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	791b      	ldrb	r3, [r3, #4]
 8012772:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8012776:	b2db      	uxtb	r3, r3
 8012778:	4618      	mov	r0, r3
 801277a:	f000 fb1b 	bl	8012db4 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 801277e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012782:	773b      	strb	r3, [r7, #28]
                status = LORAMAC_STATUS_OK;
 8012784:	2300      	movs	r3, #0
 8012786:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 801278a:	f107 031c 	add.w	r3, r7, #28
 801278e:	2201      	movs	r2, #1
 8012790:	4619      	mov	r1, r3
 8012792:	2010      	movs	r0, #16
 8012794:	f000 fcb8 	bl	8013108 <LoRaMacCommandsAddCmd>
 8012798:	4603      	mov	r3, r0
 801279a:	2b00      	cmp	r3, #0
 801279c:	d035      	beq.n	801280a <LoRaMacMlmeRequest+0x2ae>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801279e:	2313      	movs	r3, #19
 80127a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                }
            }
            break;
 80127a4:	e031      	b.n	801280a <LoRaMacMlmeRequest+0x2ae>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 80127a6:	2300      	movs	r3, #0
 80127a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 80127ac:	f107 031c 	add.w	r3, r7, #28
 80127b0:	2200      	movs	r2, #0
 80127b2:	4619      	mov	r1, r3
 80127b4:	2012      	movs	r0, #18
 80127b6:	f000 fca7 	bl	8013108 <LoRaMacCommandsAddCmd>
 80127ba:	4603      	mov	r3, r0
 80127bc:	2b00      	cmp	r3, #0
 80127be:	d026      	beq.n	801280e <LoRaMacMlmeRequest+0x2b2>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80127c0:	2313      	movs	r3, #19
 80127c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 80127c6:	e022      	b.n	801280e <LoRaMacMlmeRequest+0x2b2>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 80127c8:	2301      	movs	r3, #1
 80127ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 80127ce:	f000 faa7 	bl	8012d20 <LoRaMacClassBIsAcquisitionInProgress>
 80127d2:	4603      	mov	r3, r0
 80127d4:	f083 0301 	eor.w	r3, r3, #1
 80127d8:	b2db      	uxtb	r3, r3
 80127da:	2b00      	cmp	r3, #0
 80127dc:	d009      	beq.n	80127f2 <LoRaMacMlmeRequest+0x296>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 80127de:	2000      	movs	r0, #0
 80127e0:	f000 fa80 	bl	8012ce4 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 80127e4:	2000      	movs	r0, #0
 80127e6:	f000 faa2 	bl	8012d2e <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 80127ea:	2300      	movs	r3, #0
 80127ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 80127f0:	e00e      	b.n	8012810 <LoRaMacMlmeRequest+0x2b4>
                status = LORAMAC_STATUS_BUSY;
 80127f2:	2301      	movs	r3, #1
 80127f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 80127f8:	e00a      	b.n	8012810 <LoRaMacMlmeRequest+0x2b4>
        }
        default:
            break;
 80127fa:	bf00      	nop
 80127fc:	e008      	b.n	8012810 <LoRaMacMlmeRequest+0x2b4>
            break;
 80127fe:	bf00      	nop
 8012800:	e006      	b.n	8012810 <LoRaMacMlmeRequest+0x2b4>
            break;
 8012802:	bf00      	nop
 8012804:	e004      	b.n	8012810 <LoRaMacMlmeRequest+0x2b4>
            break;
 8012806:	bf00      	nop
 8012808:	e002      	b.n	8012810 <LoRaMacMlmeRequest+0x2b4>
            break;
 801280a:	bf00      	nop
 801280c:	e000      	b.n	8012810 <LoRaMacMlmeRequest+0x2b4>
            break;
 801280e:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8012810:	4b13      	ldr	r3, [pc, #76]	@ (8012860 <LoRaMacMlmeRequest+0x304>)
 8012812:	f8d3 2498 	ldr.w	r2, [r3, #1176]	@ 0x498
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 801281a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801281e:	2b00      	cmp	r3, #0
 8012820:	d010      	beq.n	8012844 <LoRaMacMlmeRequest+0x2e8>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8012822:	f000 ffff 	bl	8013824 <LoRaMacConfirmQueueGetCnt>
 8012826:	4603      	mov	r3, r0
 8012828:	2b00      	cmp	r3, #0
 801282a:	d110      	bne.n	801284e <LoRaMacMlmeRequest+0x2f2>
        {
            MacCtx.NodeAckRequested = false;
 801282c:	4b0c      	ldr	r3, [pc, #48]	@ (8012860 <LoRaMacMlmeRequest+0x304>)
 801282e:	2200      	movs	r2, #0
 8012830:	f883 241e 	strb.w	r2, [r3, #1054]	@ 0x41e
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8012834:	4a0a      	ldr	r2, [pc, #40]	@ (8012860 <LoRaMacMlmeRequest+0x304>)
 8012836:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 801283a:	f023 0304 	bic.w	r3, r3, #4
 801283e:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
 8012842:	e004      	b.n	801284e <LoRaMacMlmeRequest+0x2f2>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 8012844:	f107 0320 	add.w	r3, r7, #32
 8012848:	4618      	mov	r0, r3
 801284a:	f000 fe9d 	bl	8013588 <LoRaMacConfirmQueueAdd>
    }
    return status;
 801284e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8012852:	4618      	mov	r0, r3
 8012854:	3728      	adds	r7, #40	@ 0x28
 8012856:	46bd      	mov	sp, r7
 8012858:	bd80      	pop	{r7, pc}
 801285a:	bf00      	nop
 801285c:	20000d4c 	.word	0x20000d4c
 8012860:	200008f4 	.word	0x200008f4
 8012864:	20000e14 	.word	0x20000e14

08012868 <LoRaMacMcpsRequest>:

/* ST_WORKAROUND_BEGIN: Update MCPS request with new input parameter to allow delayed tx */
LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 8012868:	b5b0      	push	{r4, r5, r7, lr}
 801286a:	b092      	sub	sp, #72	@ 0x48
 801286c:	af02      	add	r7, sp, #8
 801286e:	6078      	str	r0, [r7, #4]
 8012870:	460b      	mov	r3, r1
 8012872:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012874:	2302      	movs	r3, #2
 8012876:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 801287a:	2300      	movs	r3, #0
 801287c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    /* ST_WORKAROUND_BEGIN: remove GCC9 warning */
    void* fBuffer = NULL;
 8012880:	2300      	movs	r3, #0
 8012882:	63bb      	str	r3, [r7, #56]	@ 0x38
    /* ST_WORKAROUND_END */
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 8012884:	2300      	movs	r3, #0
 8012886:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    bool readyToSend = false;
 801288a:	2300      	movs	r3, #0
 801288c:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    if( mcpsRequest == NULL )
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	2b00      	cmp	r3, #0
 8012894:	d101      	bne.n	801289a <LoRaMacMcpsRequest+0x32>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012896:	2303      	movs	r3, #3
 8012898:	e113      	b.n	8012ac2 <LoRaMacMcpsRequest+0x25a>
        }
    }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Initialize mcpsRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mcpsRequest->ReqReturn.DutyCycleWaitTime = 0;
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	2200      	movs	r2, #0
 801289e:	611a      	str	r2, [r3, #16]

    if( LoRaMacIsBusy( ) == true )
 80128a0:	f7fc face 	bl	800ee40 <LoRaMacIsBusy>
 80128a4:	4603      	mov	r3, r0
 80128a6:	2b00      	cmp	r3, #0
 80128a8:	d001      	beq.n	80128ae <LoRaMacMcpsRequest+0x46>
    {
        return LORAMAC_STATUS_BUSY;
 80128aa:	2301      	movs	r3, #1
 80128ac:	e109      	b.n	8012ac2 <LoRaMacMcpsRequest+0x25a>
    }

    McpsReq_t request = *mcpsRequest;
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	f107 040c 	add.w	r4, r7, #12
 80128b4:	461d      	mov	r5, r3
 80128b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80128b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80128ba:	682b      	ldr	r3, [r5, #0]
 80128bc:	6023      	str	r3, [r4, #0]

    macHdr.Value = 0;
 80128be:	2300      	movs	r3, #0
 80128c0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 80128c4:	2214      	movs	r2, #20
 80128c6:	2100      	movs	r1, #0
 80128c8:	4880      	ldr	r0, [pc, #512]	@ (8012acc <LoRaMacMcpsRequest+0x264>)
 80128ca:	f004 fc67 	bl	801719c <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80128ce:	4b80      	ldr	r3, [pc, #512]	@ (8012ad0 <LoRaMacMcpsRequest+0x268>)
 80128d0:	2201      	movs	r2, #1
 80128d2:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445

    // Apply confirmed downlinks, if the device has not received a valid
    // downlink after a join accept.
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 80128d6:	4b7f      	ldr	r3, [pc, #508]	@ (8012ad4 <LoRaMacMcpsRequest+0x26c>)
 80128d8:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 80128dc:	2b02      	cmp	r3, #2
 80128de:	d111      	bne.n	8012904 <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 80128e0:	4b7c      	ldr	r3, [pc, #496]	@ (8012ad4 <LoRaMacMcpsRequest+0x26c>)
 80128e2:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 80128e6:	2b02      	cmp	r3, #2
 80128e8:	d10c      	bne.n	8012904 <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 80128ea:	4b7a      	ldr	r3, [pc, #488]	@ (8012ad4 <LoRaMacMcpsRequest+0x26c>)
 80128ec:	f893 310a 	ldrb.w	r3, [r3, #266]	@ 0x10a
 80128f0:	f083 0301 	eor.w	r3, r3, #1
 80128f4:	b2db      	uxtb	r3, r3
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d004      	beq.n	8012904 <LoRaMacMcpsRequest+0x9c>
        ( request.Type == MCPS_UNCONFIRMED ) )
 80128fa:	7b3b      	ldrb	r3, [r7, #12]
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 80128fc:	2b00      	cmp	r3, #0
 80128fe:	d101      	bne.n	8012904 <LoRaMacMcpsRequest+0x9c>
    {
        request.Type = MCPS_CONFIRMED;
 8012900:	2301      	movs	r3, #1
 8012902:	733b      	strb	r3, [r7, #12]
    }

    switch( request.Type )
 8012904:	7b3b      	ldrb	r3, [r7, #12]
 8012906:	2b03      	cmp	r3, #3
 8012908:	d030      	beq.n	801296c <LoRaMacMcpsRequest+0x104>
 801290a:	2b03      	cmp	r3, #3
 801290c:	dc3f      	bgt.n	801298e <LoRaMacMcpsRequest+0x126>
 801290e:	2b00      	cmp	r3, #0
 8012910:	d002      	beq.n	8012918 <LoRaMacMcpsRequest+0xb0>
 8012912:	2b01      	cmp	r3, #1
 8012914:	d015      	beq.n	8012942 <LoRaMacMcpsRequest+0xda>
            fBufferSize = request.Req.Proprietary.fBufferSize;
            datarate = request.Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 8012916:	e03a      	b.n	801298e <LoRaMacMcpsRequest+0x126>
            readyToSend = true;
 8012918:	2301      	movs	r3, #1
 801291a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 801291e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8012922:	2202      	movs	r2, #2
 8012924:	f362 1347 	bfi	r3, r2, #5, #3
 8012928:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            fPort = request.Req.Unconfirmed.fPort;
 801292c:	7c3b      	ldrb	r3, [r7, #16]
 801292e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
            fBuffer = request.Req.Unconfirmed.fBuffer;
 8012932:	697b      	ldr	r3, [r7, #20]
 8012934:	63bb      	str	r3, [r7, #56]	@ 0x38
            fBufferSize = request.Req.Unconfirmed.fBufferSize;
 8012936:	8b3b      	ldrh	r3, [r7, #24]
 8012938:	86fb      	strh	r3, [r7, #54]	@ 0x36
            datarate = request.Req.Unconfirmed.Datarate;
 801293a:	7ebb      	ldrb	r3, [r7, #26]
 801293c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
            break;
 8012940:	e026      	b.n	8012990 <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 8012942:	2301      	movs	r3, #1
 8012944:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8012948:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801294c:	2204      	movs	r2, #4
 801294e:	f362 1347 	bfi	r3, r2, #5, #3
 8012952:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            fPort = request.Req.Confirmed.fPort;
 8012956:	7c3b      	ldrb	r3, [r7, #16]
 8012958:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
            fBuffer = request.Req.Confirmed.fBuffer;
 801295c:	697b      	ldr	r3, [r7, #20]
 801295e:	63bb      	str	r3, [r7, #56]	@ 0x38
            fBufferSize = request.Req.Confirmed.fBufferSize;
 8012960:	8b3b      	ldrh	r3, [r7, #24]
 8012962:	86fb      	strh	r3, [r7, #54]	@ 0x36
            datarate = request.Req.Confirmed.Datarate;
 8012964:	7ebb      	ldrb	r3, [r7, #26]
 8012966:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
            break;
 801296a:	e011      	b.n	8012990 <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 801296c:	2301      	movs	r3, #1
 801296e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 8012972:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8012976:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 801297a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            fBuffer = request.Req.Proprietary.fBuffer;
 801297e:	693b      	ldr	r3, [r7, #16]
 8012980:	63bb      	str	r3, [r7, #56]	@ 0x38
            fBufferSize = request.Req.Proprietary.fBufferSize;
 8012982:	8abb      	ldrh	r3, [r7, #20]
 8012984:	86fb      	strh	r3, [r7, #54]	@ 0x36
            datarate = request.Req.Proprietary.Datarate;
 8012986:	7dbb      	ldrb	r3, [r7, #22]
 8012988:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
            break;
 801298c:	e000      	b.n	8012990 <LoRaMacMcpsRequest+0x128>
            break;
 801298e:	bf00      	nop
    }

    // Make sure that the input datarate is compliant
    // to the regional specification.
    getPhy.Attribute = PHY_MIN_TX_DR;
 8012990:	2302      	movs	r3, #2
 8012992:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012996:	4b4f      	ldr	r3, [pc, #316]	@ (8012ad4 <LoRaMacMcpsRequest+0x26c>)
 8012998:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 801299c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80129a0:	4b4c      	ldr	r3, [pc, #304]	@ (8012ad4 <LoRaMacMcpsRequest+0x26c>)
 80129a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80129a6:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80129aa:	4611      	mov	r1, r2
 80129ac:	4618      	mov	r0, r3
 80129ae:	f002 f919 	bl	8014be4 <RegionGetPhyParam>
 80129b2:	4603      	mov	r3, r0
 80129b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 80129b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80129b8:	b25b      	sxtb	r3, r3
 80129ba:	f997 2035 	ldrsb.w	r2, [r7, #53]	@ 0x35
 80129be:	4293      	cmp	r3, r2
 80129c0:	bfb8      	it	lt
 80129c2:	4613      	movlt	r3, r2
 80129c4:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

    // Apply minimum datarate in this special case.
    if( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 80129c8:	4b42      	ldr	r3, [pc, #264]	@ (8012ad4 <LoRaMacMcpsRequest+0x26c>)
 80129ca:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 80129ce:	4a41      	ldr	r2, [pc, #260]	@ (8012ad4 <LoRaMacMcpsRequest+0x26c>)
 80129d0:	f892 111c 	ldrb.w	r1, [r2, #284]	@ 0x11c
 80129d4:	4a3f      	ldr	r2, [pc, #252]	@ (8012ad4 <LoRaMacMcpsRequest+0x26c>)
 80129d6:	f892 2109 	ldrb.w	r2, [r2, #265]	@ 0x109
 80129da:	4618      	mov	r0, r3
 80129dc:	f7fc fbc8 	bl	800f170 <CheckForMinimumAbpDatarate>
 80129e0:	4603      	mov	r3, r0
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	d002      	beq.n	80129ec <LoRaMacMcpsRequest+0x184>
                                    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true )
    {
        datarate = ( int8_t )phyParam.Value;
 80129e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80129e8:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if( readyToSend == true )
 80129ec:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	d05f      	beq.n	8012ab4 <LoRaMacMcpsRequest+0x24c>
    {
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 80129f4:	4b37      	ldr	r3, [pc, #220]	@ (8012ad4 <LoRaMacMcpsRequest+0x26c>)
 80129f6:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 80129fa:	f083 0301 	eor.w	r3, r3, #1
 80129fe:	b2db      	uxtb	r3, r3
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	d10e      	bne.n	8012a22 <LoRaMacMcpsRequest+0x1ba>
            ( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 8012a04:	4b33      	ldr	r3, [pc, #204]	@ (8012ad4 <LoRaMacMcpsRequest+0x26c>)
 8012a06:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8012a0a:	4a32      	ldr	r2, [pc, #200]	@ (8012ad4 <LoRaMacMcpsRequest+0x26c>)
 8012a0c:	f892 111c 	ldrb.w	r1, [r2, #284]	@ 0x11c
 8012a10:	4a30      	ldr	r2, [pc, #192]	@ (8012ad4 <LoRaMacMcpsRequest+0x26c>)
 8012a12:	f892 2109 	ldrb.w	r2, [r2, #265]	@ 0x109
 8012a16:	4618      	mov	r0, r3
 8012a18:	f7fc fbaa 	bl	800f170 <CheckForMinimumAbpDatarate>
 8012a1c:	4603      	mov	r3, r0
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	d01c      	beq.n	8012a5c <LoRaMacMcpsRequest+0x1f4>
                                          Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true ) )
        {
            verify.DatarateParams.Datarate = datarate;
 8012a22:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8012a26:	f887 3020 	strb.w	r3, [r7, #32]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012a2a:	4b2a      	ldr	r3, [pc, #168]	@ (8012ad4 <LoRaMacMcpsRequest+0x26c>)
 8012a2c:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8012a30:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8012a34:	4b27      	ldr	r3, [pc, #156]	@ (8012ad4 <LoRaMacMcpsRequest+0x26c>)
 8012a36:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012a3a:	f107 0120 	add.w	r1, r7, #32
 8012a3e:	2205      	movs	r2, #5
 8012a40:	4618      	mov	r0, r3
 8012a42:	f002 f90a 	bl	8014c5a <RegionVerify>
 8012a46:	4603      	mov	r3, r0
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	d005      	beq.n	8012a58 <LoRaMacMcpsRequest+0x1f0>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8012a4c:	f997 2020 	ldrsb.w	r2, [r7, #32]
 8012a50:	4b20      	ldr	r3, [pc, #128]	@ (8012ad4 <LoRaMacMcpsRequest+0x26c>)
 8012a52:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 8012a56:	e001      	b.n	8012a5c <LoRaMacMcpsRequest+0x1f4>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 8012a58:	2303      	movs	r3, #3
 8012a5a:	e032      	b.n	8012ac2 <LoRaMacMcpsRequest+0x25a>
            }
        }

        // Verification of response timeout for class b and class c
        LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 8012a5c:	4b1d      	ldr	r3, [pc, #116]	@ (8012ad4 <LoRaMacMcpsRequest+0x26c>)
 8012a5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012a62:	4a1b      	ldr	r2, [pc, #108]	@ (8012ad0 <LoRaMacMcpsRequest+0x268>)
 8012a64:	f8d2 249c 	ldr.w	r2, [r2, #1180]	@ 0x49c
 8012a68:	4611      	mov	r1, r2
 8012a6a:	4618      	mov	r0, r3
 8012a6c:	f7fc fc6a 	bl	800f344 <LoRaMacHandleResponseTimeout>
                                      MacCtx.ResponseTimeoutStartTime );

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 8012a70:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8012a72:	f897 103e 	ldrb.w	r1, [r7, #62]	@ 0x3e
 8012a76:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8012a7a:	78fb      	ldrb	r3, [r7, #3]
 8012a7c:	9300      	str	r3, [sp, #0]
 8012a7e:	4613      	mov	r3, r2
 8012a80:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012a82:	f7fd fc0f 	bl	80102a4 <Send>
 8012a86:	4603      	mov	r3, r0
 8012a88:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if( status == LORAMAC_STATUS_OK )
 8012a8c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8012a90:	2b00      	cmp	r3, #0
 8012a92:	d10b      	bne.n	8012aac <LoRaMacMcpsRequest+0x244>
        {
            MacCtx.McpsConfirm.McpsRequest = request.Type;
 8012a94:	7b3a      	ldrb	r2, [r7, #12]
 8012a96:	4b0e      	ldr	r3, [pc, #56]	@ (8012ad0 <LoRaMacMcpsRequest+0x268>)
 8012a98:	f883 2444 	strb.w	r2, [r3, #1092]	@ 0x444
            MacCtx.MacFlags.Bits.McpsReq = 1;
 8012a9c:	4a0c      	ldr	r2, [pc, #48]	@ (8012ad0 <LoRaMacMcpsRequest+0x268>)
 8012a9e:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 8012aa2:	f043 0301 	orr.w	r3, r3, #1
 8012aa6:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
 8012aaa:	e003      	b.n	8012ab4 <LoRaMacMcpsRequest+0x24c>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 8012aac:	4b08      	ldr	r3, [pc, #32]	@ (8012ad0 <LoRaMacMcpsRequest+0x268>)
 8012aae:	2200      	movs	r2, #0
 8012ab0:	f883 241e 	strb.w	r2, [r3, #1054]	@ 0x41e
        }
    }
#endif /* LORAMAC_VERSION */

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8012ab4:	4b06      	ldr	r3, [pc, #24]	@ (8012ad0 <LoRaMacMcpsRequest+0x268>)
 8012ab6:	f8d3 2498 	ldr.w	r2, [r3, #1176]	@ 0x498
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	611a      	str	r2, [r3, #16]

    return status;
 8012abe:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8012ac2:	4618      	mov	r0, r3
 8012ac4:	3740      	adds	r7, #64	@ 0x40
 8012ac6:	46bd      	mov	sp, r7
 8012ac8:	bdb0      	pop	{r4, r5, r7, pc}
 8012aca:	bf00      	nop
 8012acc:	20000d38 	.word	0x20000d38
 8012ad0:	200008f4 	.word	0x200008f4
 8012ad4:	20000e14 	.word	0x20000e14

08012ad8 <LoRaMacTestSetDutyCycleOn>:
/* ST_WORKAROUND_END */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 8012ad8:	b580      	push	{r7, lr}
 8012ada:	b084      	sub	sp, #16
 8012adc:	af00      	add	r7, sp, #0
 8012ade:	4603      	mov	r3, r0
 8012ae0:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 8012ae2:	79fb      	ldrb	r3, [r7, #7]
 8012ae4:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 8012ae6:	4b0a      	ldr	r3, [pc, #40]	@ (8012b10 <LoRaMacTestSetDutyCycleOn+0x38>)
 8012ae8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012aec:	f107 010c 	add.w	r1, r7, #12
 8012af0:	220f      	movs	r2, #15
 8012af2:	4618      	mov	r0, r3
 8012af4:	f002 f8b1 	bl	8014c5a <RegionVerify>
 8012af8:	4603      	mov	r3, r0
 8012afa:	2b00      	cmp	r3, #0
 8012afc:	d003      	beq.n	8012b06 <LoRaMacTestSetDutyCycleOn+0x2e>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 8012afe:	4a04      	ldr	r2, [pc, #16]	@ (8012b10 <LoRaMacTestSetDutyCycleOn+0x38>)
 8012b00:	79fb      	ldrb	r3, [r7, #7]
 8012b02:	f882 3108 	strb.w	r3, [r2, #264]	@ 0x108
    }
}
 8012b06:	bf00      	nop
 8012b08:	3710      	adds	r7, #16
 8012b0a:	46bd      	mov	sp, r7
 8012b0c:	bd80      	pop	{r7, pc}
 8012b0e:	bf00      	nop
 8012b10:	20000e14 	.word	0x20000e14

08012b14 <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 8012b14:	b580      	push	{r7, lr}
 8012b16:	af00      	add	r7, sp, #0
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 8012b18:	f7fe ff26 	bl	8011968 <LoRaMacStop>
 8012b1c:	4603      	mov	r3, r0
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	d111      	bne.n	8012b46 <LoRaMacDeInitialization+0x32>
    {
        // Stop Timers
        TimerStop( &MacCtx.TxDelayedTimer );
 8012b22:	480a      	ldr	r0, [pc, #40]	@ (8012b4c <LoRaMacDeInitialization+0x38>)
 8012b24:	f008 fc4c 	bl	801b3c0 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 8012b28:	4809      	ldr	r0, [pc, #36]	@ (8012b50 <LoRaMacDeInitialization+0x3c>)
 8012b2a:	f008 fc49 	bl	801b3c0 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 8012b2e:	4809      	ldr	r0, [pc, #36]	@ (8012b54 <LoRaMacDeInitialization+0x40>)
 8012b30:	f008 fc46 	bl	801b3c0 <UTIL_TIMER_Stop>
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        TimerStop( &MacCtx.AckTimeoutTimer );
#endif /* LORAMAC_VERSION */

        // Take care about class B
        LoRaMacClassBHaltBeaconing( );
 8012b34:	f000 f948 	bl	8012dc8 <LoRaMacClassBHaltBeaconing>

        // Reset Mac parameters
        ResetMacParameters( );
 8012b38:	f7fd ff1a 	bl	8010970 <ResetMacParameters>

        // Switch off Radio
        Radio.Sleep( );
 8012b3c:	4b06      	ldr	r3, [pc, #24]	@ (8012b58 <LoRaMacDeInitialization+0x44>)
 8012b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012b40:	4798      	blx	r3

        // Return success
        return LORAMAC_STATUS_OK;
 8012b42:	2300      	movs	r3, #0
 8012b44:	e000      	b.n	8012b48 <LoRaMacDeInitialization+0x34>
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 8012b46:	2301      	movs	r3, #1
    }
}
 8012b48:	4618      	mov	r0, r3
 8012b4a:	bd80      	pop	{r7, pc}
 8012b4c:	20000c5c 	.word	0x20000c5c
 8012b50:	20000c74 	.word	0x20000c74
 8012b54:	20000c8c 	.word	0x20000c8c
 8012b58:	0801f68c 	.word	0x0801f68c

08012b5c <LoRaMacAdrCalcNext>:
    return false;
}
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut,
                         uint8_t* nbTransOut, uint32_t* adrAckCounter )
{
 8012b5c:	b580      	push	{r7, lr}
 8012b5e:	b08c      	sub	sp, #48	@ 0x30
 8012b60:	af00      	add	r7, sp, #0
 8012b62:	60f8      	str	r0, [r7, #12]
 8012b64:	60b9      	str	r1, [r7, #8]
 8012b66:	607a      	str	r2, [r7, #4]
 8012b68:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 8012b6a:	2300      	movs	r3, #0
 8012b6c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    int8_t datarate = adrNext->Datarate;
 8012b70:	68fb      	ldr	r3, [r7, #12]
 8012b72:	7b1b      	ldrb	r3, [r3, #12]
 8012b74:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    int8_t txPower = adrNext->TxPower;
 8012b78:	68fb      	ldr	r3, [r7, #12]
 8012b7a:	7b5b      	ldrb	r3, [r3, #13]
 8012b7c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint8_t nbTrans = adrNext->NbTrans;
 8012b80:	68fb      	ldr	r3, [r7, #12]
 8012b82:	7b9b      	ldrb	r3, [r3, #14]
 8012b84:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 8012b88:	68fb      	ldr	r3, [r7, #12]
 8012b8a:	685a      	ldr	r2, [r3, #4]
 8012b8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012b8e:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 8012b90:	68fb      	ldr	r3, [r7, #12]
 8012b92:	785b      	ldrb	r3, [r3, #1]
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	f000 8088 	beq.w	8012caa <LoRaMacAdrCalcNext+0x14e>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 8012b9a:	2302      	movs	r3, #2
 8012b9c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8012ba0:	68fb      	ldr	r3, [r7, #12]
 8012ba2:	7bdb      	ldrb	r3, [r3, #15]
 8012ba4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8012ba8:	68fb      	ldr	r3, [r7, #12]
 8012baa:	7c1b      	ldrb	r3, [r3, #16]
 8012bac:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8012bb0:	4611      	mov	r1, r2
 8012bb2:	4618      	mov	r0, r3
 8012bb4:	f002 f816 	bl	8014be4 <RegionGetPhyParam>
 8012bb8:	4603      	mov	r3, r0
 8012bba:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 8012bbc:	6a3b      	ldr	r3, [r7, #32]
 8012bbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        datarate = MAX( datarate, minTxDatarate );
 8012bc2:	f997 202b 	ldrsb.w	r2, [r7, #43]	@ 0x2b
 8012bc6:	f997 302e 	ldrsb.w	r3, [r7, #46]	@ 0x2e
 8012bca:	4293      	cmp	r3, r2
 8012bcc:	bfb8      	it	lt
 8012bce:	4613      	movlt	r3, r2
 8012bd0:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

        // Verify if ADR ack req bit needs to be set.
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
 8012bd4:	68fb      	ldr	r3, [r7, #12]
 8012bd6:	685b      	ldr	r3, [r3, #4]
 8012bd8:	68fa      	ldr	r2, [r7, #12]
 8012bda:	8912      	ldrh	r2, [r2, #8]
 8012bdc:	4293      	cmp	r3, r2
 8012bde:	d302      	bcc.n	8012be6 <LoRaMacAdrCalcNext+0x8a>
        {
            adrAckReq = true;
 8012be0:	2301      	movs	r3, #1
 8012be2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        }

        // Verify, if we need to set the TX power to default
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 8012be6:	68fb      	ldr	r3, [r7, #12]
 8012be8:	685b      	ldr	r3, [r3, #4]
 8012bea:	68fa      	ldr	r2, [r7, #12]
 8012bec:	8912      	ldrh	r2, [r2, #8]
 8012bee:	4611      	mov	r1, r2
 8012bf0:	68fa      	ldr	r2, [r7, #12]
 8012bf2:	8952      	ldrh	r2, [r2, #10]
 8012bf4:	440a      	add	r2, r1
 8012bf6:	4293      	cmp	r3, r2
 8012bf8:	d30f      	bcc.n	8012c1a <LoRaMacAdrCalcNext+0xbe>
        {
            // Set TX Power to default
            getPhy.Attribute = PHY_DEF_TX_POWER;
 8012bfa:	230a      	movs	r3, #10
 8012bfc:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8012c00:	68fb      	ldr	r3, [r7, #12]
 8012c02:	7c1b      	ldrb	r3, [r3, #16]
 8012c04:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8012c08:	4611      	mov	r1, r2
 8012c0a:	4618      	mov	r0, r3
 8012c0c:	f001 ffea 	bl	8014be4 <RegionGetPhyParam>
 8012c10:	4603      	mov	r3, r0
 8012c12:	623b      	str	r3, [r7, #32]
            txPower = phyParam.Value;
 8012c14:	6a3b      	ldr	r3, [r7, #32]
 8012c16:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
        }

        // Verify, if we need to decrease the data rate
        if( adrNext->AdrAckCounter >= ( uint32_t )( adrNext->AdrAckLimit + ( adrNext->AdrAckDelay << 1 ) ) )
 8012c1a:	68fb      	ldr	r3, [r7, #12]
 8012c1c:	685b      	ldr	r3, [r3, #4]
 8012c1e:	68fa      	ldr	r2, [r7, #12]
 8012c20:	8912      	ldrh	r2, [r2, #8]
 8012c22:	4611      	mov	r1, r2
 8012c24:	68fa      	ldr	r2, [r7, #12]
 8012c26:	8952      	ldrh	r2, [r2, #10]
 8012c28:	0052      	lsls	r2, r2, #1
 8012c2a:	440a      	add	r2, r1
 8012c2c:	4293      	cmp	r3, r2
 8012c2e:	d33c      	bcc.n	8012caa <LoRaMacAdrCalcNext+0x14e>
        {
            // Perform actions with every adrNext->AdrAckDelay only
            if( ( ( adrNext->AdrAckCounter - adrNext->AdrAckLimit ) % adrNext->AdrAckDelay ) == 0 )
 8012c30:	68fb      	ldr	r3, [r7, #12]
 8012c32:	685b      	ldr	r3, [r3, #4]
 8012c34:	68fa      	ldr	r2, [r7, #12]
 8012c36:	8912      	ldrh	r2, [r2, #8]
 8012c38:	1a9b      	subs	r3, r3, r2
 8012c3a:	68fa      	ldr	r2, [r7, #12]
 8012c3c:	8952      	ldrh	r2, [r2, #10]
 8012c3e:	fbb3 f1f2 	udiv	r1, r3, r2
 8012c42:	fb01 f202 	mul.w	r2, r1, r2
 8012c46:	1a9b      	subs	r3, r3, r2
 8012c48:	2b00      	cmp	r3, #0
 8012c4a:	d12e      	bne.n	8012caa <LoRaMacAdrCalcNext+0x14e>
            {
                if( datarate == minTxDatarate )
 8012c4c:	f997 202e 	ldrsb.w	r2, [r7, #46]	@ 0x2e
 8012c50:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8012c54:	429a      	cmp	r2, r3
 8012c56:	d110      	bne.n	8012c7a <LoRaMacAdrCalcNext+0x11e>
                {
                    // Restore the channel mask
                    if( adrNext->UpdateChanMask == true )
 8012c58:	68fb      	ldr	r3, [r7, #12]
 8012c5a:	781b      	ldrb	r3, [r3, #0]
 8012c5c:	2b00      	cmp	r3, #0
 8012c5e:	d009      	beq.n	8012c74 <LoRaMacAdrCalcNext+0x118>
                    {
                        InitDefaultsParams_t params;
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8012c60:	2302      	movs	r3, #2
 8012c62:	773b      	strb	r3, [r7, #28]
                        RegionInitDefaults( adrNext->Region, &params );
 8012c64:	68fb      	ldr	r3, [r7, #12]
 8012c66:	7c1b      	ldrb	r3, [r3, #16]
 8012c68:	f107 0210 	add.w	r2, r7, #16
 8012c6c:	4611      	mov	r1, r2
 8012c6e:	4618      	mov	r0, r3
 8012c70:	f001 ffe1 	bl	8014c36 <RegionInitDefaults>
                    }

                    // Restore NbTrans
                    nbTrans = 1;
 8012c74:	2301      	movs	r3, #1
 8012c76:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                }

                // Decrease the datarate
                getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8012c7a:	2321      	movs	r3, #33	@ 0x21
 8012c7c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
                getPhy.Datarate = datarate;
 8012c80:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8012c84:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
                getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8012c88:	68fb      	ldr	r3, [r7, #12]
 8012c8a:	7bdb      	ldrb	r3, [r3, #15]
 8012c8c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8012c90:	68fb      	ldr	r3, [r7, #12]
 8012c92:	7c1b      	ldrb	r3, [r3, #16]
 8012c94:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8012c98:	4611      	mov	r1, r2
 8012c9a:	4618      	mov	r0, r3
 8012c9c:	f001 ffa2 	bl	8014be4 <RegionGetPhyParam>
 8012ca0:	4603      	mov	r3, r0
 8012ca2:	623b      	str	r3, [r7, #32]
                datarate = phyParam.Value;
 8012ca4:	6a3b      	ldr	r3, [r7, #32]
 8012ca6:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
            }
        }
    }

    *drOut = datarate;
 8012caa:	68bb      	ldr	r3, [r7, #8]
 8012cac:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8012cb0:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8012cb8:	701a      	strb	r2, [r3, #0]
    *nbTransOut = nbTrans;
 8012cba:	683b      	ldr	r3, [r7, #0]
 8012cbc:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8012cc0:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 8012cc2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8012cc6:	4618      	mov	r0, r3
 8012cc8:	3730      	adds	r7, #48	@ 0x30
 8012cca:	46bd      	mov	sp, r7
 8012ccc:	bd80      	pop	{r7, pc}

08012cce <LoRaMacClassBInit>:
#endif /* LORAMAC_VERSION */

#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmData_t* nvm )
{
 8012cce:	b480      	push	{r7}
 8012cd0:	b085      	sub	sp, #20
 8012cd2:	af00      	add	r7, sp, #0
 8012cd4:	60f8      	str	r0, [r7, #12]
 8012cd6:	60b9      	str	r1, [r7, #8]
 8012cd8:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012cda:	bf00      	nop
 8012cdc:	3714      	adds	r7, #20
 8012cde:	46bd      	mov	sp, r7
 8012ce0:	bc80      	pop	{r7}
 8012ce2:	4770      	bx	lr

08012ce4 <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 8012ce4:	b480      	push	{r7}
 8012ce6:	b083      	sub	sp, #12
 8012ce8:	af00      	add	r7, sp, #0
 8012cea:	4603      	mov	r3, r0
 8012cec:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012cee:	bf00      	nop
 8012cf0:	370c      	adds	r7, #12
 8012cf2:	46bd      	mov	sp, r7
 8012cf4:	bc80      	pop	{r7}
 8012cf6:	4770      	bx	lr

08012cf8 <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 8012cf8:	b480      	push	{r7}
 8012cfa:	b083      	sub	sp, #12
 8012cfc:	af00      	add	r7, sp, #0
 8012cfe:	4603      	mov	r3, r0
 8012d00:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012d02:	bf00      	nop
 8012d04:	370c      	adds	r7, #12
 8012d06:	46bd      	mov	sp, r7
 8012d08:	bc80      	pop	{r7}
 8012d0a:	4770      	bx	lr

08012d0c <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 8012d0c:	b480      	push	{r7}
 8012d0e:	b083      	sub	sp, #12
 8012d10:	af00      	add	r7, sp, #0
 8012d12:	4603      	mov	r3, r0
 8012d14:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012d16:	bf00      	nop
 8012d18:	370c      	adds	r7, #12
 8012d1a:	46bd      	mov	sp, r7
 8012d1c:	bc80      	pop	{r7}
 8012d1e:	4770      	bx	lr

08012d20 <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 8012d20:	b480      	push	{r7}
 8012d22:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 8012d24:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012d26:	4618      	mov	r0, r3
 8012d28:	46bd      	mov	sp, r7
 8012d2a:	bc80      	pop	{r7}
 8012d2c:	4770      	bx	lr

08012d2e <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 8012d2e:	b480      	push	{r7}
 8012d30:	b083      	sub	sp, #12
 8012d32:	af00      	add	r7, sp, #0
 8012d34:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012d36:	bf00      	nop
 8012d38:	370c      	adds	r7, #12
 8012d3a:	46bd      	mov	sp, r7
 8012d3c:	bc80      	pop	{r7}
 8012d3e:	4770      	bx	lr

08012d40 <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 8012d40:	b480      	push	{r7}
 8012d42:	b083      	sub	sp, #12
 8012d44:	af00      	add	r7, sp, #0
 8012d46:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012d48:	bf00      	nop
 8012d4a:	370c      	adds	r7, #12
 8012d4c:	46bd      	mov	sp, r7
 8012d4e:	bc80      	pop	{r7}
 8012d50:	4770      	bx	lr

08012d52 <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 8012d52:	b480      	push	{r7}
 8012d54:	b083      	sub	sp, #12
 8012d56:	af00      	add	r7, sp, #0
 8012d58:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012d5a:	bf00      	nop
 8012d5c:	370c      	adds	r7, #12
 8012d5e:	46bd      	mov	sp, r7
 8012d60:	bc80      	pop	{r7}
 8012d62:	4770      	bx	lr

08012d64 <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 8012d64:	b480      	push	{r7}
 8012d66:	b083      	sub	sp, #12
 8012d68:	af00      	add	r7, sp, #0
 8012d6a:	6078      	str	r0, [r7, #4]
 8012d6c:	460b      	mov	r3, r1
 8012d6e:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 8012d70:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012d72:	4618      	mov	r0, r3
 8012d74:	370c      	adds	r7, #12
 8012d76:	46bd      	mov	sp, r7
 8012d78:	bc80      	pop	{r7}
 8012d7a:	4770      	bx	lr

08012d7c <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 8012d7c:	b480      	push	{r7}
 8012d7e:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8012d80:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012d82:	4618      	mov	r0, r3
 8012d84:	46bd      	mov	sp, r7
 8012d86:	bc80      	pop	{r7}
 8012d88:	4770      	bx	lr

08012d8a <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 8012d8a:	b480      	push	{r7}
 8012d8c:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8012d8e:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012d90:	4618      	mov	r0, r3
 8012d92:	46bd      	mov	sp, r7
 8012d94:	bc80      	pop	{r7}
 8012d96:	4770      	bx	lr

08012d98 <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 8012d98:	b480      	push	{r7}
 8012d9a:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8012d9c:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012d9e:	4618      	mov	r0, r3
 8012da0:	46bd      	mov	sp, r7
 8012da2:	bc80      	pop	{r7}
 8012da4:	4770      	bx	lr

08012da6 <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 8012da6:	b480      	push	{r7}
 8012da8:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8012daa:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012dac:	4618      	mov	r0, r3
 8012dae:	46bd      	mov	sp, r7
 8012db0:	bc80      	pop	{r7}
 8012db2:	4770      	bx	lr

08012db4 <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 8012db4:	b480      	push	{r7}
 8012db6:	b083      	sub	sp, #12
 8012db8:	af00      	add	r7, sp, #0
 8012dba:	4603      	mov	r3, r0
 8012dbc:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012dbe:	bf00      	nop
 8012dc0:	370c      	adds	r7, #12
 8012dc2:	46bd      	mov	sp, r7
 8012dc4:	bc80      	pop	{r7}
 8012dc6:	4770      	bx	lr

08012dc8 <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 8012dc8:	b480      	push	{r7}
 8012dca:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012dcc:	bf00      	nop
 8012dce:	46bd      	mov	sp, r7
 8012dd0:	bc80      	pop	{r7}
 8012dd2:	4770      	bx	lr

08012dd4 <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 8012dd4:	b480      	push	{r7}
 8012dd6:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012dd8:	bf00      	nop
 8012dda:	46bd      	mov	sp, r7
 8012ddc:	bc80      	pop	{r7}
 8012dde:	4770      	bx	lr

08012de0 <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 8012de0:	b480      	push	{r7}
 8012de2:	b083      	sub	sp, #12
 8012de4:	af00      	add	r7, sp, #0
 8012de6:	4603      	mov	r3, r0
 8012de8:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012dea:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012dec:	4618      	mov	r0, r3
 8012dee:	370c      	adds	r7, #12
 8012df0:	46bd      	mov	sp, r7
 8012df2:	bc80      	pop	{r7}
 8012df4:	4770      	bx	lr

08012df6 <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 8012df6:	b480      	push	{r7}
 8012df8:	b083      	sub	sp, #12
 8012dfa:	af00      	add	r7, sp, #0
 8012dfc:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012dfe:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012e00:	4618      	mov	r0, r3
 8012e02:	370c      	adds	r7, #12
 8012e04:	46bd      	mov	sp, r7
 8012e06:	bc80      	pop	{r7}
 8012e08:	4770      	bx	lr

08012e0a <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 8012e0a:	b480      	push	{r7}
 8012e0c:	b083      	sub	sp, #12
 8012e0e:	af00      	add	r7, sp, #0
 8012e10:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012e12:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012e14:	4618      	mov	r0, r3
 8012e16:	370c      	adds	r7, #12
 8012e18:	46bd      	mov	sp, r7
 8012e1a:	bc80      	pop	{r7}
 8012e1c:	4770      	bx	lr

08012e1e <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 8012e1e:	b480      	push	{r7}
 8012e20:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012e22:	bf00      	nop
 8012e24:	46bd      	mov	sp, r7
 8012e26:	bc80      	pop	{r7}
 8012e28:	4770      	bx	lr

08012e2a <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 8012e2a:	b480      	push	{r7}
 8012e2c:	b083      	sub	sp, #12
 8012e2e:	af00      	add	r7, sp, #0
 8012e30:	4603      	mov	r3, r0
 8012e32:	6039      	str	r1, [r7, #0]
 8012e34:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 8012e36:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012e38:	4618      	mov	r0, r3
 8012e3a:	370c      	adds	r7, #12
 8012e3c:	46bd      	mov	sp, r7
 8012e3e:	bc80      	pop	{r7}
 8012e40:	4770      	bx	lr

08012e42 <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 8012e42:	b480      	push	{r7}
 8012e44:	b083      	sub	sp, #12
 8012e46:	af00      	add	r7, sp, #0
 8012e48:	4603      	mov	r3, r0
 8012e4a:	603a      	str	r2, [r7, #0]
 8012e4c:	80fb      	strh	r3, [r7, #6]
 8012e4e:	460b      	mov	r3, r1
 8012e50:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012e52:	bf00      	nop
 8012e54:	370c      	adds	r7, #12
 8012e56:	46bd      	mov	sp, r7
 8012e58:	bc80      	pop	{r7}
 8012e5a:	4770      	bx	lr

08012e5c <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 8012e5c:	b480      	push	{r7}
 8012e5e:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012e60:	bf00      	nop
 8012e62:	46bd      	mov	sp, r7
 8012e64:	bc80      	pop	{r7}
 8012e66:	4770      	bx	lr

08012e68 <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 8012e68:	b480      	push	{r7}
 8012e6a:	b083      	sub	sp, #12
 8012e6c:	af00      	add	r7, sp, #0
 8012e6e:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 8012e70:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012e72:	4618      	mov	r0, r3
 8012e74:	370c      	adds	r7, #12
 8012e76:	46bd      	mov	sp, r7
 8012e78:	bc80      	pop	{r7}
 8012e7a:	4770      	bx	lr

08012e7c <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 8012e7c:	b480      	push	{r7}
 8012e7e:	b083      	sub	sp, #12
 8012e80:	af00      	add	r7, sp, #0
 8012e82:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 8012e84:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012e86:	4618      	mov	r0, r3
 8012e88:	370c      	adds	r7, #12
 8012e8a:	46bd      	mov	sp, r7
 8012e8c:	bc80      	pop	{r7}
 8012e8e:	4770      	bx	lr

08012e90 <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 8012e90:	b480      	push	{r7}
 8012e92:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012e94:	bf00      	nop
 8012e96:	46bd      	mov	sp, r7
 8012e98:	bc80      	pop	{r7}
 8012e9a:	4770      	bx	lr

08012e9c <LoRaMacClassBSetFPendingBit>:
#endif /* LORAMAC_CLASSB_ENABLED */
}

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
void LoRaMacClassBSetFPendingBit( uint32_t address, uint8_t fPendingSet )
{
 8012e9c:	b480      	push	{r7}
 8012e9e:	b083      	sub	sp, #12
 8012ea0:	af00      	add	r7, sp, #0
 8012ea2:	6078      	str	r0, [r7, #4]
 8012ea4:	460b      	mov	r3, r1
 8012ea6:	70fb      	strb	r3, [r7, #3]
            }
            cur++;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012ea8:	bf00      	nop
 8012eaa:	370c      	adds	r7, #12
 8012eac:	46bd      	mov	sp, r7
 8012eae:	bc80      	pop	{r7}
 8012eb0:	4770      	bx	lr

08012eb2 <LoRaMacClassBProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacClassBProcess( void )
{
 8012eb2:	b480      	push	{r7}
 8012eb4:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012eb6:	bf00      	nop
 8012eb8:	46bd      	mov	sp, r7
 8012eba:	bc80      	pop	{r7}
 8012ebc:	4770      	bx	lr

08012ebe <IsSlotFree>:
 *
 * \param [in]    slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 8012ebe:	b480      	push	{r7}
 8012ec0:	b085      	sub	sp, #20
 8012ec2:	af00      	add	r7, sp, #0
 8012ec4:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8012eca:	2300      	movs	r3, #0
 8012ecc:	81fb      	strh	r3, [r7, #14]
 8012ece:	e00a      	b.n	8012ee6 <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 8012ed0:	89fb      	ldrh	r3, [r7, #14]
 8012ed2:	68ba      	ldr	r2, [r7, #8]
 8012ed4:	4413      	add	r3, r2
 8012ed6:	781b      	ldrb	r3, [r3, #0]
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	d001      	beq.n	8012ee0 <IsSlotFree+0x22>
        {
            return false;
 8012edc:	2300      	movs	r3, #0
 8012ede:	e006      	b.n	8012eee <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8012ee0:	89fb      	ldrh	r3, [r7, #14]
 8012ee2:	3301      	adds	r3, #1
 8012ee4:	81fb      	strh	r3, [r7, #14]
 8012ee6:	89fb      	ldrh	r3, [r7, #14]
 8012ee8:	2b0f      	cmp	r3, #15
 8012eea:	d9f1      	bls.n	8012ed0 <IsSlotFree+0x12>
        }
    }
    return true;
 8012eec:	2301      	movs	r3, #1
}
 8012eee:	4618      	mov	r0, r3
 8012ef0:	3714      	adds	r7, #20
 8012ef2:	46bd      	mov	sp, r7
 8012ef4:	bc80      	pop	{r7}
 8012ef6:	4770      	bx	lr

08012ef8 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 8012ef8:	b580      	push	{r7, lr}
 8012efa:	b082      	sub	sp, #8
 8012efc:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 8012efe:	2300      	movs	r3, #0
 8012f00:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8012f02:	e007      	b.n	8012f14 <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 8012f04:	79fb      	ldrb	r3, [r7, #7]
 8012f06:	3301      	adds	r3, #1
 8012f08:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 8012f0a:	79fb      	ldrb	r3, [r7, #7]
 8012f0c:	2b20      	cmp	r3, #32
 8012f0e:	d101      	bne.n	8012f14 <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 8012f10:	2300      	movs	r3, #0
 8012f12:	e012      	b.n	8012f3a <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8012f14:	79fb      	ldrb	r3, [r7, #7]
 8012f16:	011b      	lsls	r3, r3, #4
 8012f18:	3308      	adds	r3, #8
 8012f1a:	4a0a      	ldr	r2, [pc, #40]	@ (8012f44 <MallocNewMacCommandSlot+0x4c>)
 8012f1c:	4413      	add	r3, r2
 8012f1e:	4618      	mov	r0, r3
 8012f20:	f7ff ffcd 	bl	8012ebe <IsSlotFree>
 8012f24:	4603      	mov	r3, r0
 8012f26:	f083 0301 	eor.w	r3, r3, #1
 8012f2a:	b2db      	uxtb	r3, r3
 8012f2c:	2b00      	cmp	r3, #0
 8012f2e:	d1e9      	bne.n	8012f04 <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 8012f30:	79fb      	ldrb	r3, [r7, #7]
 8012f32:	011b      	lsls	r3, r3, #4
 8012f34:	3308      	adds	r3, #8
 8012f36:	4a03      	ldr	r2, [pc, #12]	@ (8012f44 <MallocNewMacCommandSlot+0x4c>)
 8012f38:	4413      	add	r3, r2
}
 8012f3a:	4618      	mov	r0, r3
 8012f3c:	3708      	adds	r7, #8
 8012f3e:	46bd      	mov	sp, r7
 8012f40:	bd80      	pop	{r7, pc}
 8012f42:	bf00      	nop
 8012f44:	200019b4 	.word	0x200019b4

08012f48 <FreeMacCommandSlot>:
 * \param [in]    slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 8012f48:	b580      	push	{r7, lr}
 8012f4a:	b082      	sub	sp, #8
 8012f4c:	af00      	add	r7, sp, #0
 8012f4e:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	2b00      	cmp	r3, #0
 8012f54:	d101      	bne.n	8012f5a <FreeMacCommandSlot+0x12>
    {
        return false;
 8012f56:	2300      	movs	r3, #0
 8012f58:	e005      	b.n	8012f66 <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 8012f5a:	2210      	movs	r2, #16
 8012f5c:	2100      	movs	r1, #0
 8012f5e:	6878      	ldr	r0, [r7, #4]
 8012f60:	f004 f91c 	bl	801719c <memset1>

    return true;
 8012f64:	2301      	movs	r3, #1
}
 8012f66:	4618      	mov	r0, r3
 8012f68:	3708      	adds	r7, #8
 8012f6a:	46bd      	mov	sp, r7
 8012f6c:	bd80      	pop	{r7, pc}

08012f6e <LinkedListInit>:
 *
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 8012f6e:	b480      	push	{r7}
 8012f70:	b083      	sub	sp, #12
 8012f72:	af00      	add	r7, sp, #0
 8012f74:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	d101      	bne.n	8012f80 <LinkedListInit+0x12>
    {
        return false;
 8012f7c:	2300      	movs	r3, #0
 8012f7e:	e006      	b.n	8012f8e <LinkedListInit+0x20>
    }

    list->First = NULL;
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	2200      	movs	r2, #0
 8012f84:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	2200      	movs	r2, #0
 8012f8a:	605a      	str	r2, [r3, #4]

    return true;
 8012f8c:	2301      	movs	r3, #1
}
 8012f8e:	4618      	mov	r0, r3
 8012f90:	370c      	adds	r7, #12
 8012f92:	46bd      	mov	sp, r7
 8012f94:	bc80      	pop	{r7}
 8012f96:	4770      	bx	lr

08012f98 <LinkedListAdd>:
 * \param [in]    list           - List where the element shall be added.
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 8012f98:	b480      	push	{r7}
 8012f9a:	b083      	sub	sp, #12
 8012f9c:	af00      	add	r7, sp, #0
 8012f9e:	6078      	str	r0, [r7, #4]
 8012fa0:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	2b00      	cmp	r3, #0
 8012fa6:	d002      	beq.n	8012fae <LinkedListAdd+0x16>
 8012fa8:	683b      	ldr	r3, [r7, #0]
 8012faa:	2b00      	cmp	r3, #0
 8012fac:	d101      	bne.n	8012fb2 <LinkedListAdd+0x1a>
    {
        return false;
 8012fae:	2300      	movs	r3, #0
 8012fb0:	e015      	b.n	8012fde <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 8012fb2:	687b      	ldr	r3, [r7, #4]
 8012fb4:	681b      	ldr	r3, [r3, #0]
 8012fb6:	2b00      	cmp	r3, #0
 8012fb8:	d102      	bne.n	8012fc0 <LinkedListAdd+0x28>
    {
        list->First = element;
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	683a      	ldr	r2, [r7, #0]
 8012fbe:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	685b      	ldr	r3, [r3, #4]
 8012fc4:	2b00      	cmp	r3, #0
 8012fc6:	d003      	beq.n	8012fd0 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	685b      	ldr	r3, [r3, #4]
 8012fcc:	683a      	ldr	r2, [r7, #0]
 8012fce:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 8012fd0:	683b      	ldr	r3, [r7, #0]
 8012fd2:	2200      	movs	r2, #0
 8012fd4:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 8012fd6:	687b      	ldr	r3, [r7, #4]
 8012fd8:	683a      	ldr	r2, [r7, #0]
 8012fda:	605a      	str	r2, [r3, #4]

    return true;
 8012fdc:	2301      	movs	r3, #1
}
 8012fde:	4618      	mov	r0, r3
 8012fe0:	370c      	adds	r7, #12
 8012fe2:	46bd      	mov	sp, r7
 8012fe4:	bc80      	pop	{r7}
 8012fe6:	4770      	bx	lr

08012fe8 <LinkedListGetPrevious>:
 * \param [in]    list           - List
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 8012fe8:	b480      	push	{r7}
 8012fea:	b085      	sub	sp, #20
 8012fec:	af00      	add	r7, sp, #0
 8012fee:	6078      	str	r0, [r7, #4]
 8012ff0:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8012ff2:	687b      	ldr	r3, [r7, #4]
 8012ff4:	2b00      	cmp	r3, #0
 8012ff6:	d002      	beq.n	8012ffe <LinkedListGetPrevious+0x16>
 8012ff8:	683b      	ldr	r3, [r7, #0]
 8012ffa:	2b00      	cmp	r3, #0
 8012ffc:	d101      	bne.n	8013002 <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 8012ffe:	2300      	movs	r3, #0
 8013000:	e016      	b.n	8013030 <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	681b      	ldr	r3, [r3, #0]
 8013006:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 8013008:	683a      	ldr	r2, [r7, #0]
 801300a:	68fb      	ldr	r3, [r7, #12]
 801300c:	429a      	cmp	r2, r3
 801300e:	d00c      	beq.n	801302a <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8013010:	e002      	b.n	8013018 <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 8013012:	68fb      	ldr	r3, [r7, #12]
 8013014:	681b      	ldr	r3, [r3, #0]
 8013016:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8013018:	68fb      	ldr	r3, [r7, #12]
 801301a:	2b00      	cmp	r3, #0
 801301c:	d007      	beq.n	801302e <LinkedListGetPrevious+0x46>
 801301e:	68fb      	ldr	r3, [r7, #12]
 8013020:	681b      	ldr	r3, [r3, #0]
 8013022:	683a      	ldr	r2, [r7, #0]
 8013024:	429a      	cmp	r2, r3
 8013026:	d1f4      	bne.n	8013012 <LinkedListGetPrevious+0x2a>
 8013028:	e001      	b.n	801302e <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 801302a:	2300      	movs	r3, #0
 801302c:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 801302e:	68fb      	ldr	r3, [r7, #12]
}
 8013030:	4618      	mov	r0, r3
 8013032:	3714      	adds	r7, #20
 8013034:	46bd      	mov	sp, r7
 8013036:	bc80      	pop	{r7}
 8013038:	4770      	bx	lr

0801303a <LinkedListRemove>:
 * \param [in]    list           - List where the element shall be removed from.
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 801303a:	b580      	push	{r7, lr}
 801303c:	b084      	sub	sp, #16
 801303e:	af00      	add	r7, sp, #0
 8013040:	6078      	str	r0, [r7, #4]
 8013042:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8013044:	687b      	ldr	r3, [r7, #4]
 8013046:	2b00      	cmp	r3, #0
 8013048:	d002      	beq.n	8013050 <LinkedListRemove+0x16>
 801304a:	683b      	ldr	r3, [r7, #0]
 801304c:	2b00      	cmp	r3, #0
 801304e:	d101      	bne.n	8013054 <LinkedListRemove+0x1a>
    {
        return false;
 8013050:	2300      	movs	r3, #0
 8013052:	e020      	b.n	8013096 <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 8013054:	6839      	ldr	r1, [r7, #0]
 8013056:	6878      	ldr	r0, [r7, #4]
 8013058:	f7ff ffc6 	bl	8012fe8 <LinkedListGetPrevious>
 801305c:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 801305e:	687b      	ldr	r3, [r7, #4]
 8013060:	681b      	ldr	r3, [r3, #0]
 8013062:	683a      	ldr	r2, [r7, #0]
 8013064:	429a      	cmp	r2, r3
 8013066:	d103      	bne.n	8013070 <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 8013068:	683b      	ldr	r3, [r7, #0]
 801306a:	681a      	ldr	r2, [r3, #0]
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	685b      	ldr	r3, [r3, #4]
 8013074:	683a      	ldr	r2, [r7, #0]
 8013076:	429a      	cmp	r2, r3
 8013078:	d102      	bne.n	8013080 <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	68fa      	ldr	r2, [r7, #12]
 801307e:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 8013080:	68fb      	ldr	r3, [r7, #12]
 8013082:	2b00      	cmp	r3, #0
 8013084:	d003      	beq.n	801308e <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 8013086:	683b      	ldr	r3, [r7, #0]
 8013088:	681a      	ldr	r2, [r3, #0]
 801308a:	68fb      	ldr	r3, [r7, #12]
 801308c:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 801308e:	683b      	ldr	r3, [r7, #0]
 8013090:	2200      	movs	r2, #0
 8013092:	601a      	str	r2, [r3, #0]

    return true;
 8013094:	2301      	movs	r3, #1
}
 8013096:	4618      	mov	r0, r3
 8013098:	3710      	adds	r7, #16
 801309a:	46bd      	mov	sp, r7
 801309c:	bd80      	pop	{r7, pc}
	...

080130a0 <IsSticky>:
 * \param [in]  cid                - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 80130a0:	b480      	push	{r7}
 80130a2:	b083      	sub	sp, #12
 80130a4:	af00      	add	r7, sp, #0
 80130a6:	4603      	mov	r3, r0
 80130a8:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 80130aa:	79fb      	ldrb	r3, [r7, #7]
 80130ac:	2b11      	cmp	r3, #17
 80130ae:	bf8c      	ite	hi
 80130b0:	2201      	movhi	r2, #1
 80130b2:	2200      	movls	r2, #0
 80130b4:	b2d2      	uxtb	r2, r2
 80130b6:	2a00      	cmp	r2, #0
 80130b8:	d10d      	bne.n	80130d6 <IsSticky+0x36>
 80130ba:	4a0a      	ldr	r2, [pc, #40]	@ (80130e4 <IsSticky+0x44>)
 80130bc:	fa22 f303 	lsr.w	r3, r2, r3
 80130c0:	f003 0301 	and.w	r3, r3, #1
 80130c4:	2b00      	cmp	r3, #0
 80130c6:	bf14      	ite	ne
 80130c8:	2301      	movne	r3, #1
 80130ca:	2300      	moveq	r3, #0
 80130cc:	b2db      	uxtb	r3, r3
 80130ce:	2b00      	cmp	r3, #0
 80130d0:	d001      	beq.n	80130d6 <IsSticky+0x36>
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
 80130d2:	2301      	movs	r3, #1
 80130d4:	e000      	b.n	80130d8 <IsSticky+0x38>
        default:
            return false;
 80130d6:	2300      	movs	r3, #0
    }
}
 80130d8:	4618      	mov	r0, r3
 80130da:	370c      	adds	r7, #12
 80130dc:	46bd      	mov	sp, r7
 80130de:	bc80      	pop	{r7}
 80130e0:	4770      	bx	lr
 80130e2:	bf00      	nop
 80130e4:	00020720 	.word	0x00020720

080130e8 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 80130e8:	b580      	push	{r7, lr}
 80130ea:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 80130ec:	f44f 7203 	mov.w	r2, #524	@ 0x20c
 80130f0:	2100      	movs	r1, #0
 80130f2:	4804      	ldr	r0, [pc, #16]	@ (8013104 <LoRaMacCommandsInit+0x1c>)
 80130f4:	f004 f852 	bl	801719c <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 80130f8:	4802      	ldr	r0, [pc, #8]	@ (8013104 <LoRaMacCommandsInit+0x1c>)
 80130fa:	f7ff ff38 	bl	8012f6e <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 80130fe:	2300      	movs	r3, #0
}
 8013100:	4618      	mov	r0, r3
 8013102:	bd80      	pop	{r7, pc}
 8013104:	200019b4 	.word	0x200019b4

08013108 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 8013108:	b580      	push	{r7, lr}
 801310a:	b086      	sub	sp, #24
 801310c:	af00      	add	r7, sp, #0
 801310e:	4603      	mov	r3, r0
 8013110:	60b9      	str	r1, [r7, #8]
 8013112:	607a      	str	r2, [r7, #4]
 8013114:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 8013116:	68bb      	ldr	r3, [r7, #8]
 8013118:	2b00      	cmp	r3, #0
 801311a:	d101      	bne.n	8013120 <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801311c:	2301      	movs	r3, #1
 801311e:	e033      	b.n	8013188 <LoRaMacCommandsAddCmd+0x80>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 8013120:	f7ff feea 	bl	8012ef8 <MallocNewMacCommandSlot>
 8013124:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 8013126:	697b      	ldr	r3, [r7, #20]
 8013128:	2b00      	cmp	r3, #0
 801312a:	d101      	bne.n	8013130 <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 801312c:	2302      	movs	r3, #2
 801312e:	e02b      	b.n	8013188 <LoRaMacCommandsAddCmd+0x80>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 8013130:	6979      	ldr	r1, [r7, #20]
 8013132:	4817      	ldr	r0, [pc, #92]	@ (8013190 <LoRaMacCommandsAddCmd+0x88>)
 8013134:	f7ff ff30 	bl	8012f98 <LinkedListAdd>
 8013138:	4603      	mov	r3, r0
 801313a:	f083 0301 	eor.w	r3, r3, #1
 801313e:	b2db      	uxtb	r3, r3
 8013140:	2b00      	cmp	r3, #0
 8013142:	d001      	beq.n	8013148 <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 8013144:	2305      	movs	r3, #5
 8013146:	e01f      	b.n	8013188 <LoRaMacCommandsAddCmd+0x80>
    }

    // Set Values
    newCmd->CID = cid;
 8013148:	697b      	ldr	r3, [r7, #20]
 801314a:	7bfa      	ldrb	r2, [r7, #15]
 801314c:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 801314e:	697b      	ldr	r3, [r7, #20]
 8013150:	687a      	ldr	r2, [r7, #4]
 8013152:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 8013154:	697b      	ldr	r3, [r7, #20]
 8013156:	3305      	adds	r3, #5
 8013158:	687a      	ldr	r2, [r7, #4]
 801315a:	b292      	uxth	r2, r2
 801315c:	68b9      	ldr	r1, [r7, #8]
 801315e:	4618      	mov	r0, r3
 8013160:	f003 ffe1 	bl	8017126 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 8013164:	7bfb      	ldrb	r3, [r7, #15]
 8013166:	4618      	mov	r0, r3
 8013168:	f7ff ff9a 	bl	80130a0 <IsSticky>
 801316c:	4603      	mov	r3, r0
 801316e:	461a      	mov	r2, r3
 8013170:	697b      	ldr	r3, [r7, #20]
 8013172:	731a      	strb	r2, [r3, #12]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 8013174:	4b06      	ldr	r3, [pc, #24]	@ (8013190 <LoRaMacCommandsAddCmd+0x88>)
 8013176:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	4413      	add	r3, r2
 801317e:	3301      	adds	r3, #1
 8013180:	4a03      	ldr	r2, [pc, #12]	@ (8013190 <LoRaMacCommandsAddCmd+0x88>)
 8013182:	f8c2 3208 	str.w	r3, [r2, #520]	@ 0x208

    return LORAMAC_COMMANDS_SUCCESS;
 8013186:	2300      	movs	r3, #0
}
 8013188:	4618      	mov	r0, r3
 801318a:	3718      	adds	r7, #24
 801318c:	46bd      	mov	sp, r7
 801318e:	bd80      	pop	{r7, pc}
 8013190:	200019b4 	.word	0x200019b4

08013194 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 8013194:	b580      	push	{r7, lr}
 8013196:	b082      	sub	sp, #8
 8013198:	af00      	add	r7, sp, #0
 801319a:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	2b00      	cmp	r3, #0
 80131a0:	d101      	bne.n	80131a6 <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80131a2:	2301      	movs	r3, #1
 80131a4:	e021      	b.n	80131ea <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 80131a6:	6879      	ldr	r1, [r7, #4]
 80131a8:	4812      	ldr	r0, [pc, #72]	@ (80131f4 <LoRaMacCommandsRemoveCmd+0x60>)
 80131aa:	f7ff ff46 	bl	801303a <LinkedListRemove>
 80131ae:	4603      	mov	r3, r0
 80131b0:	f083 0301 	eor.w	r3, r3, #1
 80131b4:	b2db      	uxtb	r3, r3
 80131b6:	2b00      	cmp	r3, #0
 80131b8:	d001      	beq.n	80131be <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 80131ba:	2303      	movs	r3, #3
 80131bc:	e015      	b.n	80131ea <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 80131be:	4b0d      	ldr	r3, [pc, #52]	@ (80131f4 <LoRaMacCommandsRemoveCmd+0x60>)
 80131c0:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	689b      	ldr	r3, [r3, #8]
 80131c8:	1ad3      	subs	r3, r2, r3
 80131ca:	3b01      	subs	r3, #1
 80131cc:	4a09      	ldr	r2, [pc, #36]	@ (80131f4 <LoRaMacCommandsRemoveCmd+0x60>)
 80131ce:	f8c2 3208 	str.w	r3, [r2, #520]	@ 0x208

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 80131d2:	6878      	ldr	r0, [r7, #4]
 80131d4:	f7ff feb8 	bl	8012f48 <FreeMacCommandSlot>
 80131d8:	4603      	mov	r3, r0
 80131da:	f083 0301 	eor.w	r3, r3, #1
 80131de:	b2db      	uxtb	r3, r3
 80131e0:	2b00      	cmp	r3, #0
 80131e2:	d001      	beq.n	80131e8 <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 80131e4:	2305      	movs	r3, #5
 80131e6:	e000      	b.n	80131ea <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80131e8:	2300      	movs	r3, #0
}
 80131ea:	4618      	mov	r0, r3
 80131ec:	3708      	adds	r7, #8
 80131ee:	46bd      	mov	sp, r7
 80131f0:	bd80      	pop	{r7, pc}
 80131f2:	bf00      	nop
 80131f4:	200019b4 	.word	0x200019b4

080131f8 <LoRaMacCommandsRemoveNoneStickyCmds>:
    }
    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 80131f8:	b580      	push	{r7, lr}
 80131fa:	b082      	sub	sp, #8
 80131fc:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 80131fe:	4b0f      	ldr	r3, [pc, #60]	@ (801323c <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 8013200:	681b      	ldr	r3, [r3, #0]
 8013202:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8013204:	e012      	b.n	801322c <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	7b1b      	ldrb	r3, [r3, #12]
 801320a:	f083 0301 	eor.w	r3, r3, #1
 801320e:	b2db      	uxtb	r3, r3
 8013210:	2b00      	cmp	r3, #0
 8013212:	d008      	beq.n	8013226 <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	681b      	ldr	r3, [r3, #0]
 8013218:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 801321a:	6878      	ldr	r0, [r7, #4]
 801321c:	f7ff ffba 	bl	8013194 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 8013220:	683b      	ldr	r3, [r7, #0]
 8013222:	607b      	str	r3, [r7, #4]
 8013224:	e002      	b.n	801322c <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	681b      	ldr	r3, [r3, #0]
 801322a:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	2b00      	cmp	r3, #0
 8013230:	d1e9      	bne.n	8013206 <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8013232:	2300      	movs	r3, #0
}
 8013234:	4618      	mov	r0, r3
 8013236:	3708      	adds	r7, #8
 8013238:	46bd      	mov	sp, r7
 801323a:	bd80      	pop	{r7, pc}
 801323c:	200019b4 	.word	0x200019b4

08013240 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 8013240:	b580      	push	{r7, lr}
 8013242:	b082      	sub	sp, #8
 8013244:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8013246:	4b0e      	ldr	r3, [pc, #56]	@ (8013280 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>)
 8013248:	681b      	ldr	r3, [r3, #0]
 801324a:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 801324c:	e00f      	b.n	801326e <LoRaMacCommandsRemoveStickyAnsCmds+0x2e>
    {
        nexElement = curElement->Next;
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	681b      	ldr	r3, [r3, #0]
 8013252:	603b      	str	r3, [r7, #0]
        if( IsSticky( curElement->CID ) == true )
 8013254:	687b      	ldr	r3, [r7, #4]
 8013256:	791b      	ldrb	r3, [r3, #4]
 8013258:	4618      	mov	r0, r3
 801325a:	f7ff ff21 	bl	80130a0 <IsSticky>
 801325e:	4603      	mov	r3, r0
 8013260:	2b00      	cmp	r3, #0
 8013262:	d002      	beq.n	801326a <LoRaMacCommandsRemoveStickyAnsCmds+0x2a>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 8013264:	6878      	ldr	r0, [r7, #4]
 8013266:	f7ff ff95 	bl	8013194 <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 801326a:	683b      	ldr	r3, [r7, #0]
 801326c:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	2b00      	cmp	r3, #0
 8013272:	d1ec      	bne.n	801324e <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8013274:	2300      	movs	r3, #0
}
 8013276:	4618      	mov	r0, r3
 8013278:	3708      	adds	r7, #8
 801327a:	46bd      	mov	sp, r7
 801327c:	bd80      	pop	{r7, pc}
 801327e:	bf00      	nop
 8013280:	200019b4 	.word	0x200019b4

08013284 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 8013284:	b480      	push	{r7}
 8013286:	b083      	sub	sp, #12
 8013288:	af00      	add	r7, sp, #0
 801328a:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	2b00      	cmp	r3, #0
 8013290:	d101      	bne.n	8013296 <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8013292:	2301      	movs	r3, #1
 8013294:	e005      	b.n	80132a2 <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 8013296:	4b05      	ldr	r3, [pc, #20]	@ (80132ac <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 8013298:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 80132a0:	2300      	movs	r3, #0
}
 80132a2:	4618      	mov	r0, r3
 80132a4:	370c      	adds	r7, #12
 80132a6:	46bd      	mov	sp, r7
 80132a8:	bc80      	pop	{r7}
 80132aa:	4770      	bx	lr
 80132ac:	200019b4 	.word	0x200019b4

080132b0 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 80132b0:	b580      	push	{r7, lr}
 80132b2:	b088      	sub	sp, #32
 80132b4:	af00      	add	r7, sp, #0
 80132b6:	60f8      	str	r0, [r7, #12]
 80132b8:	60b9      	str	r1, [r7, #8]
 80132ba:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 80132bc:	4b25      	ldr	r3, [pc, #148]	@ (8013354 <LoRaMacCommandsSerializeCmds+0xa4>)
 80132be:	681b      	ldr	r3, [r3, #0]
 80132c0:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 80132c2:	2300      	movs	r3, #0
 80132c4:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 80132c6:	687b      	ldr	r3, [r7, #4]
 80132c8:	2b00      	cmp	r3, #0
 80132ca:	d002      	beq.n	80132d2 <LoRaMacCommandsSerializeCmds+0x22>
 80132cc:	68bb      	ldr	r3, [r7, #8]
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	d126      	bne.n	8013320 <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80132d2:	2301      	movs	r3, #1
 80132d4:	e039      	b.n	801334a <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 80132d6:	7efb      	ldrb	r3, [r7, #27]
 80132d8:	68fa      	ldr	r2, [r7, #12]
 80132da:	1ad2      	subs	r2, r2, r3
 80132dc:	69fb      	ldr	r3, [r7, #28]
 80132de:	689b      	ldr	r3, [r3, #8]
 80132e0:	3301      	adds	r3, #1
 80132e2:	429a      	cmp	r2, r3
 80132e4:	d320      	bcc.n	8013328 <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 80132e6:	7efb      	ldrb	r3, [r7, #27]
 80132e8:	1c5a      	adds	r2, r3, #1
 80132ea:	76fa      	strb	r2, [r7, #27]
 80132ec:	461a      	mov	r2, r3
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	4413      	add	r3, r2
 80132f2:	69fa      	ldr	r2, [r7, #28]
 80132f4:	7912      	ldrb	r2, [r2, #4]
 80132f6:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 80132f8:	7efb      	ldrb	r3, [r7, #27]
 80132fa:	687a      	ldr	r2, [r7, #4]
 80132fc:	18d0      	adds	r0, r2, r3
 80132fe:	69fb      	ldr	r3, [r7, #28]
 8013300:	1d59      	adds	r1, r3, #5
 8013302:	69fb      	ldr	r3, [r7, #28]
 8013304:	689b      	ldr	r3, [r3, #8]
 8013306:	b29b      	uxth	r3, r3
 8013308:	461a      	mov	r2, r3
 801330a:	f003 ff0c 	bl	8017126 <memcpy1>
            itr += curElement->PayloadSize;
 801330e:	69fb      	ldr	r3, [r7, #28]
 8013310:	689b      	ldr	r3, [r3, #8]
 8013312:	b2da      	uxtb	r2, r3
 8013314:	7efb      	ldrb	r3, [r7, #27]
 8013316:	4413      	add	r3, r2
 8013318:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 801331a:	69fb      	ldr	r3, [r7, #28]
 801331c:	681b      	ldr	r3, [r3, #0]
 801331e:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8013320:	69fb      	ldr	r3, [r7, #28]
 8013322:	2b00      	cmp	r3, #0
 8013324:	d1d7      	bne.n	80132d6 <LoRaMacCommandsSerializeCmds+0x26>
 8013326:	e009      	b.n	801333c <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 8013328:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 801332a:	e007      	b.n	801333c <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 801332c:	69fb      	ldr	r3, [r7, #28]
 801332e:	681b      	ldr	r3, [r3, #0]
 8013330:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 8013332:	69f8      	ldr	r0, [r7, #28]
 8013334:	f7ff ff2e 	bl	8013194 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 8013338:	697b      	ldr	r3, [r7, #20]
 801333a:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 801333c:	69fb      	ldr	r3, [r7, #28]
 801333e:	2b00      	cmp	r3, #0
 8013340:	d1f4      	bne.n	801332c <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 8013342:	68b8      	ldr	r0, [r7, #8]
 8013344:	f7ff ff9e 	bl	8013284 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 8013348:	2300      	movs	r3, #0
}
 801334a:	4618      	mov	r0, r3
 801334c:	3720      	adds	r7, #32
 801334e:	46bd      	mov	sp, r7
 8013350:	bd80      	pop	{r7, pc}
 8013352:	bf00      	nop
 8013354:	200019b4 	.word	0x200019b4

08013358 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
 8013358:	b480      	push	{r7}
 801335a:	b085      	sub	sp, #20
 801335c:	af00      	add	r7, sp, #0
 801335e:	6078      	str	r0, [r7, #4]
    if( cmdsPending == NULL )
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	2b00      	cmp	r3, #0
 8013364:	d101      	bne.n	801336a <LoRaMacCommandsStickyCmdsPending+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8013366:	2301      	movs	r3, #1
 8013368:	e016      	b.n	8013398 <LoRaMacCommandsStickyCmdsPending+0x40>
    }
    MacCommand_t* curElement;
    curElement = CommandsCtx.MacCommandList.First;
 801336a:	4b0e      	ldr	r3, [pc, #56]	@ (80133a4 <LoRaMacCommandsStickyCmdsPending+0x4c>)
 801336c:	681b      	ldr	r3, [r3, #0]
 801336e:	60fb      	str	r3, [r7, #12]

    *cmdsPending = false;
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	2200      	movs	r2, #0
 8013374:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 8013376:	e00b      	b.n	8013390 <LoRaMacCommandsStickyCmdsPending+0x38>
    {
        if( curElement->IsSticky == true )
 8013378:	68fb      	ldr	r3, [r7, #12]
 801337a:	7b1b      	ldrb	r3, [r3, #12]
 801337c:	2b00      	cmp	r3, #0
 801337e:	d004      	beq.n	801338a <LoRaMacCommandsStickyCmdsPending+0x32>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 8013380:	687b      	ldr	r3, [r7, #4]
 8013382:	2201      	movs	r2, #1
 8013384:	701a      	strb	r2, [r3, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 8013386:	2300      	movs	r3, #0
 8013388:	e006      	b.n	8013398 <LoRaMacCommandsStickyCmdsPending+0x40>
        }
        curElement = curElement->Next;
 801338a:	68fb      	ldr	r3, [r7, #12]
 801338c:	681b      	ldr	r3, [r3, #0]
 801338e:	60fb      	str	r3, [r7, #12]
    while( curElement != NULL )
 8013390:	68fb      	ldr	r3, [r7, #12]
 8013392:	2b00      	cmp	r3, #0
 8013394:	d1f0      	bne.n	8013378 <LoRaMacCommandsStickyCmdsPending+0x20>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8013396:	2300      	movs	r3, #0
}
 8013398:	4618      	mov	r0, r3
 801339a:	3714      	adds	r7, #20
 801339c:	46bd      	mov	sp, r7
 801339e:	bc80      	pop	{r7}
 80133a0:	4770      	bx	lr
 80133a2:	bf00      	nop
 80133a4:	200019b4 	.word	0x200019b4

080133a8 <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 80133a8:	b480      	push	{r7}
 80133aa:	b085      	sub	sp, #20
 80133ac:	af00      	add	r7, sp, #0
 80133ae:	4603      	mov	r3, r0
 80133b0:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 80133b2:	2300      	movs	r3, #0
 80133b4:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 80133b6:	79fb      	ldrb	r3, [r7, #7]
 80133b8:	3b02      	subs	r3, #2
 80133ba:	2b11      	cmp	r3, #17
 80133bc:	d850      	bhi.n	8013460 <LoRaMacCommandsGetCmdSize+0xb8>
 80133be:	a201      	add	r2, pc, #4	@ (adr r2, 80133c4 <LoRaMacCommandsGetCmdSize+0x1c>)
 80133c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80133c4:	0801340d 	.word	0x0801340d
 80133c8:	08013413 	.word	0x08013413
 80133cc:	08013419 	.word	0x08013419
 80133d0:	0801341f 	.word	0x0801341f
 80133d4:	08013425 	.word	0x08013425
 80133d8:	0801342b 	.word	0x0801342b
 80133dc:	08013431 	.word	0x08013431
 80133e0:	08013437 	.word	0x08013437
 80133e4:	0801343d 	.word	0x0801343d
 80133e8:	08013461 	.word	0x08013461
 80133ec:	08013461 	.word	0x08013461
 80133f0:	08013443 	.word	0x08013443
 80133f4:	08013461 	.word	0x08013461
 80133f8:	08013461 	.word	0x08013461
 80133fc:	08013449 	.word	0x08013449
 8013400:	0801344f 	.word	0x0801344f
 8013404:	08013455 	.word	0x08013455
 8013408:	0801345b 	.word	0x0801345b
    {
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 801340c:	2303      	movs	r3, #3
 801340e:	73fb      	strb	r3, [r7, #15]
            break;
 8013410:	e027      	b.n	8013462 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 8013412:	2305      	movs	r3, #5
 8013414:	73fb      	strb	r3, [r7, #15]
            break;
 8013416:	e024      	b.n	8013462 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 8013418:	2302      	movs	r3, #2
 801341a:	73fb      	strb	r3, [r7, #15]
            break;
 801341c:	e021      	b.n	8013462 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 801341e:	2305      	movs	r3, #5
 8013420:	73fb      	strb	r3, [r7, #15]
            break;
 8013422:	e01e      	b.n	8013462 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 8013424:	2301      	movs	r3, #1
 8013426:	73fb      	strb	r3, [r7, #15]
            break;
 8013428:	e01b      	b.n	8013462 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 801342a:	2306      	movs	r3, #6
 801342c:	73fb      	strb	r3, [r7, #15]
            break;
 801342e:	e018      	b.n	8013462 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 8013430:	2302      	movs	r3, #2
 8013432:	73fb      	strb	r3, [r7, #15]
            break;
 8013434:	e015      	b.n	8013462 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 8013436:	2302      	movs	r3, #2
 8013438:	73fb      	strb	r3, [r7, #15]
            break;
 801343a:	e012      	b.n	8013462 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 801343c:	2305      	movs	r3, #5
 801343e:	73fb      	strb	r3, [r7, #15]
            break;
 8013440:	e00f      	b.n	8013462 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 8013442:	2306      	movs	r3, #6
 8013444:	73fb      	strb	r3, [r7, #15]
            break;
 8013446:	e00c      	b.n	8013462 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 8013448:	2301      	movs	r3, #1
 801344a:	73fb      	strb	r3, [r7, #15]
            break;
 801344c:	e009      	b.n	8013462 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 801344e:	2305      	movs	r3, #5
 8013450:	73fb      	strb	r3, [r7, #15]
            break;
 8013452:	e006      	b.n	8013462 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 8013454:	2304      	movs	r3, #4
 8013456:	73fb      	strb	r3, [r7, #15]
            break;
 8013458:	e003      	b.n	8013462 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 801345a:	2304      	movs	r3, #4
 801345c:	73fb      	strb	r3, [r7, #15]
            break;
 801345e:	e000      	b.n	8013462 <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 8013460:	bf00      	nop
        }
    }
    return cidSize;
 8013462:	7bfb      	ldrb	r3, [r7, #15]
}
 8013464:	4618      	mov	r0, r3
 8013466:	3714      	adds	r7, #20
 8013468:	46bd      	mov	sp, r7
 801346a:	bc80      	pop	{r7}
 801346c:	4770      	bx	lr
 801346e:	bf00      	nop

08013470 <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 8013470:	b480      	push	{r7}
 8013472:	b083      	sub	sp, #12
 8013474:	af00      	add	r7, sp, #0
 8013476:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	4a07      	ldr	r2, [pc, #28]	@ (8013498 <IncreaseBufferPointer+0x28>)
 801347c:	4293      	cmp	r3, r2
 801347e:	d102      	bne.n	8013486 <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8013480:	4b06      	ldr	r3, [pc, #24]	@ (801349c <IncreaseBufferPointer+0x2c>)
 8013482:	607b      	str	r3, [r7, #4]
 8013484:	e002      	b.n	801348c <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	3304      	adds	r3, #4
 801348a:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 801348c:	687b      	ldr	r3, [r7, #4]
}
 801348e:	4618      	mov	r0, r3
 8013490:	370c      	adds	r7, #12
 8013492:	46bd      	mov	sp, r7
 8013494:	bc80      	pop	{r7}
 8013496:	4770      	bx	lr
 8013498:	20001bdc 	.word	0x20001bdc
 801349c:	20001bcc 	.word	0x20001bcc

080134a0 <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 80134a0:	b480      	push	{r7}
 80134a2:	b083      	sub	sp, #12
 80134a4:	af00      	add	r7, sp, #0
 80134a6:	4603      	mov	r3, r0
 80134a8:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 80134aa:	79fb      	ldrb	r3, [r7, #7]
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	d101      	bne.n	80134b4 <IsListEmpty+0x14>
    {
        return true;
 80134b0:	2301      	movs	r3, #1
 80134b2:	e000      	b.n	80134b6 <IsListEmpty+0x16>
    }
    return false;
 80134b4:	2300      	movs	r3, #0
}
 80134b6:	4618      	mov	r0, r3
 80134b8:	370c      	adds	r7, #12
 80134ba:	46bd      	mov	sp, r7
 80134bc:	bc80      	pop	{r7}
 80134be:	4770      	bx	lr

080134c0 <IsListFull>:

static bool IsListFull( uint8_t count )
{
 80134c0:	b480      	push	{r7}
 80134c2:	b083      	sub	sp, #12
 80134c4:	af00      	add	r7, sp, #0
 80134c6:	4603      	mov	r3, r0
 80134c8:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 80134ca:	79fb      	ldrb	r3, [r7, #7]
 80134cc:	2b04      	cmp	r3, #4
 80134ce:	d901      	bls.n	80134d4 <IsListFull+0x14>
    {
        return true;
 80134d0:	2301      	movs	r3, #1
 80134d2:	e000      	b.n	80134d6 <IsListFull+0x16>
    }
    return false;
 80134d4:	2300      	movs	r3, #0
}
 80134d6:	4618      	mov	r0, r3
 80134d8:	370c      	adds	r7, #12
 80134da:	46bd      	mov	sp, r7
 80134dc:	bc80      	pop	{r7}
 80134de:	4770      	bx	lr

080134e0 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 80134e0:	b580      	push	{r7, lr}
 80134e2:	b086      	sub	sp, #24
 80134e4:	af00      	add	r7, sp, #0
 80134e6:	4603      	mov	r3, r0
 80134e8:	60b9      	str	r1, [r7, #8]
 80134ea:	607a      	str	r2, [r7, #4]
 80134ec:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 80134ee:	68bb      	ldr	r3, [r7, #8]
 80134f0:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80134f2:	4b13      	ldr	r3, [pc, #76]	@ (8013540 <GetElement+0x60>)
 80134f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80134f8:	4618      	mov	r0, r3
 80134fa:	f7ff ffd1 	bl	80134a0 <IsListEmpty>
 80134fe:	4603      	mov	r3, r0
 8013500:	2b00      	cmp	r3, #0
 8013502:	d001      	beq.n	8013508 <GetElement+0x28>
    {
        return NULL;
 8013504:	2300      	movs	r3, #0
 8013506:	e017      	b.n	8013538 <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8013508:	2300      	movs	r3, #0
 801350a:	74fb      	strb	r3, [r7, #19]
 801350c:	e00d      	b.n	801352a <GetElement+0x4a>
    {
        if( element->Request == request )
 801350e:	697b      	ldr	r3, [r7, #20]
 8013510:	781b      	ldrb	r3, [r3, #0]
 8013512:	7bfa      	ldrb	r2, [r7, #15]
 8013514:	429a      	cmp	r2, r3
 8013516:	d101      	bne.n	801351c <GetElement+0x3c>
        {
            // We have found the element
            return element;
 8013518:	697b      	ldr	r3, [r7, #20]
 801351a:	e00d      	b.n	8013538 <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 801351c:	6978      	ldr	r0, [r7, #20]
 801351e:	f7ff ffa7 	bl	8013470 <IncreaseBufferPointer>
 8013522:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8013524:	7cfb      	ldrb	r3, [r7, #19]
 8013526:	3301      	adds	r3, #1
 8013528:	74fb      	strb	r3, [r7, #19]
 801352a:	4b05      	ldr	r3, [pc, #20]	@ (8013540 <GetElement+0x60>)
 801352c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013530:	7cfa      	ldrb	r2, [r7, #19]
 8013532:	429a      	cmp	r2, r3
 8013534:	d3eb      	bcc.n	801350e <GetElement+0x2e>
    }

    return NULL;
 8013536:	2300      	movs	r3, #0
}
 8013538:	4618      	mov	r0, r3
 801353a:	3718      	adds	r7, #24
 801353c:	46bd      	mov	sp, r7
 801353e:	bd80      	pop	{r7, pc}
 8013540:	20001bc0 	.word	0x20001bc0

08013544 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 8013544:	b580      	push	{r7, lr}
 8013546:	b082      	sub	sp, #8
 8013548:	af00      	add	r7, sp, #0
 801354a:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 801354c:	4a0c      	ldr	r2, [pc, #48]	@ (8013580 <LoRaMacConfirmQueueInit+0x3c>)
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 8013552:	4b0b      	ldr	r3, [pc, #44]	@ (8013580 <LoRaMacConfirmQueueInit+0x3c>)
 8013554:	2200      	movs	r2, #0
 8013556:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 801355a:	4b09      	ldr	r3, [pc, #36]	@ (8013580 <LoRaMacConfirmQueueInit+0x3c>)
 801355c:	4a09      	ldr	r2, [pc, #36]	@ (8013584 <LoRaMacConfirmQueueInit+0x40>)
 801355e:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8013560:	4b07      	ldr	r3, [pc, #28]	@ (8013580 <LoRaMacConfirmQueueInit+0x3c>)
 8013562:	4a08      	ldr	r2, [pc, #32]	@ (8013584 <LoRaMacConfirmQueueInit+0x40>)
 8013564:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 8013566:	2214      	movs	r2, #20
 8013568:	21ff      	movs	r1, #255	@ 0xff
 801356a:	4806      	ldr	r0, [pc, #24]	@ (8013584 <LoRaMacConfirmQueueInit+0x40>)
 801356c:	f003 fe16 	bl	801719c <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8013570:	4b03      	ldr	r3, [pc, #12]	@ (8013580 <LoRaMacConfirmQueueInit+0x3c>)
 8013572:	2201      	movs	r2, #1
 8013574:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 8013578:	bf00      	nop
 801357a:	3708      	adds	r7, #8
 801357c:	46bd      	mov	sp, r7
 801357e:	bd80      	pop	{r7, pc}
 8013580:	20001bc0 	.word	0x20001bc0
 8013584:	20001bcc 	.word	0x20001bcc

08013588 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 8013588:	b580      	push	{r7, lr}
 801358a:	b082      	sub	sp, #8
 801358c:	af00      	add	r7, sp, #0
 801358e:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8013590:	4b19      	ldr	r3, [pc, #100]	@ (80135f8 <LoRaMacConfirmQueueAdd+0x70>)
 8013592:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013596:	4618      	mov	r0, r3
 8013598:	f7ff ff92 	bl	80134c0 <IsListFull>
 801359c:	4603      	mov	r3, r0
 801359e:	2b00      	cmp	r3, #0
 80135a0:	d001      	beq.n	80135a6 <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 80135a2:	2300      	movs	r3, #0
 80135a4:	e024      	b.n	80135f0 <LoRaMacConfirmQueueAdd+0x68>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 80135a6:	4b14      	ldr	r3, [pc, #80]	@ (80135f8 <LoRaMacConfirmQueueAdd+0x70>)
 80135a8:	689b      	ldr	r3, [r3, #8]
 80135aa:	687a      	ldr	r2, [r7, #4]
 80135ac:	7812      	ldrb	r2, [r2, #0]
 80135ae:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 80135b0:	4b11      	ldr	r3, [pc, #68]	@ (80135f8 <LoRaMacConfirmQueueAdd+0x70>)
 80135b2:	689b      	ldr	r3, [r3, #8]
 80135b4:	687a      	ldr	r2, [r7, #4]
 80135b6:	7852      	ldrb	r2, [r2, #1]
 80135b8:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 80135ba:	4b0f      	ldr	r3, [pc, #60]	@ (80135f8 <LoRaMacConfirmQueueAdd+0x70>)
 80135bc:	689b      	ldr	r3, [r3, #8]
 80135be:	687a      	ldr	r2, [r7, #4]
 80135c0:	78d2      	ldrb	r2, [r2, #3]
 80135c2:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
 80135c4:	4b0c      	ldr	r3, [pc, #48]	@ (80135f8 <LoRaMacConfirmQueueAdd+0x70>)
 80135c6:	689b      	ldr	r3, [r3, #8]
 80135c8:	687a      	ldr	r2, [r7, #4]
 80135ca:	7892      	ldrb	r2, [r2, #2]
 80135cc:	709a      	strb	r2, [r3, #2]
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 80135ce:	4b0a      	ldr	r3, [pc, #40]	@ (80135f8 <LoRaMacConfirmQueueAdd+0x70>)
 80135d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80135d4:	3301      	adds	r3, #1
 80135d6:	b2da      	uxtb	r2, r3
 80135d8:	4b07      	ldr	r3, [pc, #28]	@ (80135f8 <LoRaMacConfirmQueueAdd+0x70>)
 80135da:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 80135de:	4b06      	ldr	r3, [pc, #24]	@ (80135f8 <LoRaMacConfirmQueueAdd+0x70>)
 80135e0:	689b      	ldr	r3, [r3, #8]
 80135e2:	4618      	mov	r0, r3
 80135e4:	f7ff ff44 	bl	8013470 <IncreaseBufferPointer>
 80135e8:	4603      	mov	r3, r0
 80135ea:	4a03      	ldr	r2, [pc, #12]	@ (80135f8 <LoRaMacConfirmQueueAdd+0x70>)
 80135ec:	6093      	str	r3, [r2, #8]

    return true;
 80135ee:	2301      	movs	r3, #1
}
 80135f0:	4618      	mov	r0, r3
 80135f2:	3708      	adds	r7, #8
 80135f4:	46bd      	mov	sp, r7
 80135f6:	bd80      	pop	{r7, pc}
 80135f8:	20001bc0 	.word	0x20001bc0

080135fc <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 80135fc:	b580      	push	{r7, lr}
 80135fe:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8013600:	4b0e      	ldr	r3, [pc, #56]	@ (801363c <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8013602:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013606:	4618      	mov	r0, r3
 8013608:	f7ff ff4a 	bl	80134a0 <IsListEmpty>
 801360c:	4603      	mov	r3, r0
 801360e:	2b00      	cmp	r3, #0
 8013610:	d001      	beq.n	8013616 <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 8013612:	2300      	movs	r3, #0
 8013614:	e010      	b.n	8013638 <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 8013616:	4b09      	ldr	r3, [pc, #36]	@ (801363c <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8013618:	f893 3020 	ldrb.w	r3, [r3, #32]
 801361c:	3b01      	subs	r3, #1
 801361e:	b2da      	uxtb	r2, r3
 8013620:	4b06      	ldr	r3, [pc, #24]	@ (801363c <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8013622:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8013626:	4b05      	ldr	r3, [pc, #20]	@ (801363c <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8013628:	685b      	ldr	r3, [r3, #4]
 801362a:	4618      	mov	r0, r3
 801362c:	f7ff ff20 	bl	8013470 <IncreaseBufferPointer>
 8013630:	4603      	mov	r3, r0
 8013632:	4a02      	ldr	r2, [pc, #8]	@ (801363c <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8013634:	6053      	str	r3, [r2, #4]

    return true;
 8013636:	2301      	movs	r3, #1
}
 8013638:	4618      	mov	r0, r3
 801363a:	bd80      	pop	{r7, pc}
 801363c:	20001bc0 	.word	0x20001bc0

08013640 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 8013640:	b580      	push	{r7, lr}
 8013642:	b084      	sub	sp, #16
 8013644:	af00      	add	r7, sp, #0
 8013646:	4603      	mov	r3, r0
 8013648:	460a      	mov	r2, r1
 801364a:	71fb      	strb	r3, [r7, #7]
 801364c:	4613      	mov	r3, r2
 801364e:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 8013650:	2300      	movs	r3, #0
 8013652:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8013654:	4b10      	ldr	r3, [pc, #64]	@ (8013698 <LoRaMacConfirmQueueSetStatus+0x58>)
 8013656:	f893 3020 	ldrb.w	r3, [r3, #32]
 801365a:	4618      	mov	r0, r3
 801365c:	f7ff ff20 	bl	80134a0 <IsListEmpty>
 8013660:	4603      	mov	r3, r0
 8013662:	f083 0301 	eor.w	r3, r3, #1
 8013666:	b2db      	uxtb	r3, r3
 8013668:	2b00      	cmp	r3, #0
 801366a:	d011      	beq.n	8013690 <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 801366c:	4b0a      	ldr	r3, [pc, #40]	@ (8013698 <LoRaMacConfirmQueueSetStatus+0x58>)
 801366e:	6859      	ldr	r1, [r3, #4]
 8013670:	4b09      	ldr	r3, [pc, #36]	@ (8013698 <LoRaMacConfirmQueueSetStatus+0x58>)
 8013672:	689a      	ldr	r2, [r3, #8]
 8013674:	79bb      	ldrb	r3, [r7, #6]
 8013676:	4618      	mov	r0, r3
 8013678:	f7ff ff32 	bl	80134e0 <GetElement>
 801367c:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 801367e:	68fb      	ldr	r3, [r7, #12]
 8013680:	2b00      	cmp	r3, #0
 8013682:	d005      	beq.n	8013690 <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 8013684:	68fb      	ldr	r3, [r7, #12]
 8013686:	79fa      	ldrb	r2, [r7, #7]
 8013688:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 801368a:	68fb      	ldr	r3, [r7, #12]
 801368c:	2201      	movs	r2, #1
 801368e:	709a      	strb	r2, [r3, #2]
        }
    }
}
 8013690:	bf00      	nop
 8013692:	3710      	adds	r7, #16
 8013694:	46bd      	mov	sp, r7
 8013696:	bd80      	pop	{r7, pc}
 8013698:	20001bc0 	.word	0x20001bc0

0801369c <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 801369c:	b580      	push	{r7, lr}
 801369e:	b084      	sub	sp, #16
 80136a0:	af00      	add	r7, sp, #0
 80136a2:	4603      	mov	r3, r0
 80136a4:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 80136a6:	2300      	movs	r3, #0
 80136a8:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 80136aa:	4b10      	ldr	r3, [pc, #64]	@ (80136ec <LoRaMacConfirmQueueGetStatus+0x50>)
 80136ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80136b0:	4618      	mov	r0, r3
 80136b2:	f7ff fef5 	bl	80134a0 <IsListEmpty>
 80136b6:	4603      	mov	r3, r0
 80136b8:	f083 0301 	eor.w	r3, r3, #1
 80136bc:	b2db      	uxtb	r3, r3
 80136be:	2b00      	cmp	r3, #0
 80136c0:	d00e      	beq.n	80136e0 <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 80136c2:	4b0a      	ldr	r3, [pc, #40]	@ (80136ec <LoRaMacConfirmQueueGetStatus+0x50>)
 80136c4:	6859      	ldr	r1, [r3, #4]
 80136c6:	4b09      	ldr	r3, [pc, #36]	@ (80136ec <LoRaMacConfirmQueueGetStatus+0x50>)
 80136c8:	689a      	ldr	r2, [r3, #8]
 80136ca:	79fb      	ldrb	r3, [r7, #7]
 80136cc:	4618      	mov	r0, r3
 80136ce:	f7ff ff07 	bl	80134e0 <GetElement>
 80136d2:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 80136d4:	68fb      	ldr	r3, [r7, #12]
 80136d6:	2b00      	cmp	r3, #0
 80136d8:	d002      	beq.n	80136e0 <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 80136da:	68fb      	ldr	r3, [r7, #12]
 80136dc:	785b      	ldrb	r3, [r3, #1]
 80136de:	e000      	b.n	80136e2 <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 80136e0:	2301      	movs	r3, #1
}
 80136e2:	4618      	mov	r0, r3
 80136e4:	3710      	adds	r7, #16
 80136e6:	46bd      	mov	sp, r7
 80136e8:	bd80      	pop	{r7, pc}
 80136ea:	bf00      	nop
 80136ec:	20001bc0 	.word	0x20001bc0

080136f0 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 80136f0:	b580      	push	{r7, lr}
 80136f2:	b084      	sub	sp, #16
 80136f4:	af00      	add	r7, sp, #0
 80136f6:	4603      	mov	r3, r0
 80136f8:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 80136fa:	4b16      	ldr	r3, [pc, #88]	@ (8013754 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 80136fc:	685b      	ldr	r3, [r3, #4]
 80136fe:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 8013700:	4a14      	ldr	r2, [pc, #80]	@ (8013754 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8013702:	79fb      	ldrb	r3, [r7, #7]
 8013704:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8013708:	4b12      	ldr	r3, [pc, #72]	@ (8013754 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 801370a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801370e:	4618      	mov	r0, r3
 8013710:	f7ff fec6 	bl	80134a0 <IsListEmpty>
 8013714:	4603      	mov	r3, r0
 8013716:	f083 0301 	eor.w	r3, r3, #1
 801371a:	b2db      	uxtb	r3, r3
 801371c:	2b00      	cmp	r3, #0
 801371e:	d015      	beq.n	801374c <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 8013720:	68fb      	ldr	r3, [r7, #12]
 8013722:	79fa      	ldrb	r2, [r7, #7]
 8013724:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 8013726:	68fb      	ldr	r3, [r7, #12]
 8013728:	78db      	ldrb	r3, [r3, #3]
 801372a:	f083 0301 	eor.w	r3, r3, #1
 801372e:	b2db      	uxtb	r3, r3
 8013730:	2b00      	cmp	r3, #0
 8013732:	d002      	beq.n	801373a <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 8013734:	68fb      	ldr	r3, [r7, #12]
 8013736:	2201      	movs	r2, #1
 8013738:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 801373a:	68f8      	ldr	r0, [r7, #12]
 801373c:	f7ff fe98 	bl	8013470 <IncreaseBufferPointer>
 8013740:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 8013742:	4b04      	ldr	r3, [pc, #16]	@ (8013754 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8013744:	689b      	ldr	r3, [r3, #8]
 8013746:	68fa      	ldr	r2, [r7, #12]
 8013748:	429a      	cmp	r2, r3
 801374a:	d1e9      	bne.n	8013720 <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 801374c:	bf00      	nop
 801374e:	3710      	adds	r7, #16
 8013750:	46bd      	mov	sp, r7
 8013752:	bd80      	pop	{r7, pc}
 8013754:	20001bc0 	.word	0x20001bc0

08013758 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 8013758:	b580      	push	{r7, lr}
 801375a:	b082      	sub	sp, #8
 801375c:	af00      	add	r7, sp, #0
 801375e:	4603      	mov	r3, r0
 8013760:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 8013762:	4b09      	ldr	r3, [pc, #36]	@ (8013788 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8013764:	6859      	ldr	r1, [r3, #4]
 8013766:	4b08      	ldr	r3, [pc, #32]	@ (8013788 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8013768:	689a      	ldr	r2, [r3, #8]
 801376a:	79fb      	ldrb	r3, [r7, #7]
 801376c:	4618      	mov	r0, r3
 801376e:	f7ff feb7 	bl	80134e0 <GetElement>
 8013772:	4603      	mov	r3, r0
 8013774:	2b00      	cmp	r3, #0
 8013776:	d001      	beq.n	801377c <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 8013778:	2301      	movs	r3, #1
 801377a:	e000      	b.n	801377e <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 801377c:	2300      	movs	r3, #0
}
 801377e:	4618      	mov	r0, r3
 8013780:	3708      	adds	r7, #8
 8013782:	46bd      	mov	sp, r7
 8013784:	bd80      	pop	{r7, pc}
 8013786:	bf00      	nop
 8013788:	20001bc0 	.word	0x20001bc0

0801378c <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 801378c:	b580      	push	{r7, lr}
 801378e:	b084      	sub	sp, #16
 8013790:	af00      	add	r7, sp, #0
 8013792:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8013794:	4b22      	ldr	r3, [pc, #136]	@ (8013820 <LoRaMacConfirmQueueHandleCb+0x94>)
 8013796:	f893 3020 	ldrb.w	r3, [r3, #32]
 801379a:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 801379c:	2300      	movs	r3, #0
 801379e:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 80137a0:	2300      	movs	r3, #0
 80137a2:	73fb      	strb	r3, [r7, #15]
 80137a4:	e032      	b.n	801380c <LoRaMacConfirmQueueHandleCb+0x80>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 80137a6:	4b1e      	ldr	r3, [pc, #120]	@ (8013820 <LoRaMacConfirmQueueHandleCb+0x94>)
 80137a8:	685b      	ldr	r3, [r3, #4]
 80137aa:	781a      	ldrb	r2, [r3, #0]
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 80137b0:	4b1b      	ldr	r3, [pc, #108]	@ (8013820 <LoRaMacConfirmQueueHandleCb+0x94>)
 80137b2:	685b      	ldr	r3, [r3, #4]
 80137b4:	785a      	ldrb	r2, [r3, #1]
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 80137ba:	4b19      	ldr	r3, [pc, #100]	@ (8013820 <LoRaMacConfirmQueueHandleCb+0x94>)
 80137bc:	685b      	ldr	r3, [r3, #4]
 80137be:	789b      	ldrb	r3, [r3, #2]
 80137c0:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 80137c2:	7b7b      	ldrb	r3, [r7, #13]
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	d005      	beq.n	80137d4 <LoRaMacConfirmQueueHandleCb+0x48>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 80137c8:	4b15      	ldr	r3, [pc, #84]	@ (8013820 <LoRaMacConfirmQueueHandleCb+0x94>)
 80137ca:	681b      	ldr	r3, [r3, #0]
 80137cc:	689b      	ldr	r3, [r3, #8]
 80137ce:	6878      	ldr	r0, [r7, #4]
 80137d0:	4798      	blx	r3
 80137d2:	e00b      	b.n	80137ec <LoRaMacConfirmQueueHandleCb+0x60>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 80137d4:	4b12      	ldr	r3, [pc, #72]	@ (8013820 <LoRaMacConfirmQueueHandleCb+0x94>)
 80137d6:	685b      	ldr	r3, [r3, #4]
 80137d8:	781b      	ldrb	r3, [r3, #0]
 80137da:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 80137dc:	4b10      	ldr	r3, [pc, #64]	@ (8013820 <LoRaMacConfirmQueueHandleCb+0x94>)
 80137de:	685b      	ldr	r3, [r3, #4]
 80137e0:	785b      	ldrb	r3, [r3, #1]
 80137e2:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 80137e4:	4b0e      	ldr	r3, [pc, #56]	@ (8013820 <LoRaMacConfirmQueueHandleCb+0x94>)
 80137e6:	685b      	ldr	r3, [r3, #4]
 80137e8:	78db      	ldrb	r3, [r3, #3]
 80137ea:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 80137ec:	f7ff ff06 	bl	80135fc <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 80137f0:	7b7b      	ldrb	r3, [r7, #13]
 80137f2:	f083 0301 	eor.w	r3, r3, #1
 80137f6:	b2db      	uxtb	r3, r3
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	d004      	beq.n	8013806 <LoRaMacConfirmQueueHandleCb+0x7a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 80137fc:	f107 0308 	add.w	r3, r7, #8
 8013800:	4618      	mov	r0, r3
 8013802:	f7ff fec1 	bl	8013588 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 8013806:	7bfb      	ldrb	r3, [r7, #15]
 8013808:	3301      	adds	r3, #1
 801380a:	73fb      	strb	r3, [r7, #15]
 801380c:	7bfa      	ldrb	r2, [r7, #15]
 801380e:	7bbb      	ldrb	r3, [r7, #14]
 8013810:	429a      	cmp	r2, r3
 8013812:	d3c8      	bcc.n	80137a6 <LoRaMacConfirmQueueHandleCb+0x1a>
        }
    }
}
 8013814:	bf00      	nop
 8013816:	bf00      	nop
 8013818:	3710      	adds	r7, #16
 801381a:	46bd      	mov	sp, r7
 801381c:	bd80      	pop	{r7, pc}
 801381e:	bf00      	nop
 8013820:	20001bc0 	.word	0x20001bc0

08013824 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 8013824:	b480      	push	{r7}
 8013826:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8013828:	4b03      	ldr	r3, [pc, #12]	@ (8013838 <LoRaMacConfirmQueueGetCnt+0x14>)
 801382a:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 801382e:	4618      	mov	r0, r3
 8013830:	46bd      	mov	sp, r7
 8013832:	bc80      	pop	{r7}
 8013834:	4770      	bx	lr
 8013836:	bf00      	nop
 8013838:	20001bc0 	.word	0x20001bc0

0801383c <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 801383c:	b580      	push	{r7, lr}
 801383e:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8013840:	4b06      	ldr	r3, [pc, #24]	@ (801385c <LoRaMacConfirmQueueIsFull+0x20>)
 8013842:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013846:	4618      	mov	r0, r3
 8013848:	f7ff fe3a 	bl	80134c0 <IsListFull>
 801384c:	4603      	mov	r3, r0
 801384e:	2b00      	cmp	r3, #0
 8013850:	d001      	beq.n	8013856 <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 8013852:	2301      	movs	r3, #1
 8013854:	e000      	b.n	8013858 <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 8013856:	2300      	movs	r3, #0
    }
}
 8013858:	4618      	mov	r0, r3
 801385a:	bd80      	pop	{r7, pc}
 801385c:	20001bc0 	.word	0x20001bc0

08013860 <PayloadEncrypt>:
 * \param [in] size             - Size of data
 * \param [in,out] buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 8013860:	b580      	push	{r7, lr}
 8013862:	b08e      	sub	sp, #56	@ 0x38
 8013864:	af00      	add	r7, sp, #0
 8013866:	60f8      	str	r0, [r7, #12]
 8013868:	607b      	str	r3, [r7, #4]
 801386a:	460b      	mov	r3, r1
 801386c:	817b      	strh	r3, [r7, #10]
 801386e:	4613      	mov	r3, r2
 8013870:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 8013872:	68fb      	ldr	r3, [r7, #12]
 8013874:	2b00      	cmp	r3, #0
 8013876:	d101      	bne.n	801387c <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013878:	2309      	movs	r3, #9
 801387a:	e084      	b.n	8013986 <PayloadEncrypt+0x126>
    }

    uint8_t bufferIndex = 0;
 801387c:	2300      	movs	r3, #0
 801387e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    uint16_t ctr = 1;
 8013882:	2301      	movs	r3, #1
 8013884:	86bb      	strh	r3, [r7, #52]	@ 0x34
    uint8_t sBlock[16] = { 0 };
 8013886:	f107 0320 	add.w	r3, r7, #32
 801388a:	2200      	movs	r2, #0
 801388c:	601a      	str	r2, [r3, #0]
 801388e:	605a      	str	r2, [r3, #4]
 8013890:	609a      	str	r2, [r3, #8]
 8013892:	60da      	str	r2, [r3, #12]
    uint8_t aBlock[16] = { 0 };
 8013894:	f107 0310 	add.w	r3, r7, #16
 8013898:	2200      	movs	r2, #0
 801389a:	601a      	str	r2, [r3, #0]
 801389c:	605a      	str	r2, [r3, #4]
 801389e:	609a      	str	r2, [r3, #8]
 80138a0:	60da      	str	r2, [r3, #12]

    aBlock[0] = 0x01;
 80138a2:	2301      	movs	r3, #1
 80138a4:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 80138a6:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80138aa:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	b2db      	uxtb	r3, r3
 80138b0:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	0a1b      	lsrs	r3, r3, #8
 80138b6:	b2db      	uxtb	r3, r3
 80138b8:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	0c1b      	lsrs	r3, r3, #16
 80138be:	b2db      	uxtb	r3, r3
 80138c0:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 80138c2:	687b      	ldr	r3, [r7, #4]
 80138c4:	0e1b      	lsrs	r3, r3, #24
 80138c6:	b2db      	uxtb	r3, r3
 80138c8:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 80138ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80138cc:	b2db      	uxtb	r3, r3
 80138ce:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 80138d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80138d2:	0a1b      	lsrs	r3, r3, #8
 80138d4:	b2db      	uxtb	r3, r3
 80138d6:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 80138d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80138da:	0c1b      	lsrs	r3, r3, #16
 80138dc:	b2db      	uxtb	r3, r3
 80138de:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 80138e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80138e2:	0e1b      	lsrs	r3, r3, #24
 80138e4:	b2db      	uxtb	r3, r3
 80138e6:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 80138e8:	e048      	b.n	801397c <PayloadEncrypt+0x11c>
    {
        aBlock[15] = ctr & 0xFF;
 80138ea:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80138ec:	b2db      	uxtb	r3, r3
 80138ee:	77fb      	strb	r3, [r7, #31]
        ctr++;
 80138f0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80138f2:	3301      	adds	r3, #1
 80138f4:	86bb      	strh	r3, [r7, #52]	@ 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 80138f6:	f107 0320 	add.w	r3, r7, #32
 80138fa:	7a7a      	ldrb	r2, [r7, #9]
 80138fc:	f107 0010 	add.w	r0, r7, #16
 8013900:	2110      	movs	r1, #16
 8013902:	f7f8 fce6 	bl	800c2d2 <SecureElementAesEncrypt>
 8013906:	4603      	mov	r3, r0
 8013908:	2b00      	cmp	r3, #0
 801390a:	d001      	beq.n	8013910 <PayloadEncrypt+0xb0>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801390c:	230e      	movs	r3, #14
 801390e:	e03a      	b.n	8013986 <PayloadEncrypt+0x126>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8013910:	2300      	movs	r3, #0
 8013912:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8013916:	e01e      	b.n	8013956 <PayloadEncrypt+0xf6>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8013918:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 801391c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8013920:	4413      	add	r3, r2
 8013922:	461a      	mov	r2, r3
 8013924:	68fb      	ldr	r3, [r7, #12]
 8013926:	4413      	add	r3, r2
 8013928:	7819      	ldrb	r1, [r3, #0]
 801392a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801392e:	3338      	adds	r3, #56	@ 0x38
 8013930:	443b      	add	r3, r7
 8013932:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8013936:	f897 0037 	ldrb.w	r0, [r7, #55]	@ 0x37
 801393a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801393e:	4403      	add	r3, r0
 8013940:	4618      	mov	r0, r3
 8013942:	68fb      	ldr	r3, [r7, #12]
 8013944:	4403      	add	r3, r0
 8013946:	404a      	eors	r2, r1
 8013948:	b2d2      	uxtb	r2, r2
 801394a:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 801394c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8013950:	3301      	adds	r3, #1
 8013952:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8013956:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801395a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 801395e:	2a10      	cmp	r2, #16
 8013960:	bfa8      	it	ge
 8013962:	2210      	movge	r2, #16
 8013964:	b212      	sxth	r2, r2
 8013966:	4293      	cmp	r3, r2
 8013968:	dbd6      	blt.n	8013918 <PayloadEncrypt+0xb8>
        }
        size -= 16;
 801396a:	897b      	ldrh	r3, [r7, #10]
 801396c:	3b10      	subs	r3, #16
 801396e:	b29b      	uxth	r3, r3
 8013970:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 8013972:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8013976:	3310      	adds	r3, #16
 8013978:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    while( size > 0 )
 801397c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8013980:	2b00      	cmp	r3, #0
 8013982:	dcb2      	bgt.n	80138ea <PayloadEncrypt+0x8a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013984:	2300      	movs	r3, #0
}
 8013986:	4618      	mov	r0, r3
 8013988:	3738      	adds	r7, #56	@ 0x38
 801398a:	46bd      	mov	sp, r7
 801398c:	bd80      	pop	{r7, pc}

0801398e <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 801398e:	b490      	push	{r4, r7}
 8013990:	b082      	sub	sp, #8
 8013992:	af00      	add	r7, sp, #0
 8013994:	4604      	mov	r4, r0
 8013996:	4608      	mov	r0, r1
 8013998:	4611      	mov	r1, r2
 801399a:	461a      	mov	r2, r3
 801399c:	4623      	mov	r3, r4
 801399e:	80fb      	strh	r3, [r7, #6]
 80139a0:	4603      	mov	r3, r0
 80139a2:	717b      	strb	r3, [r7, #5]
 80139a4:	460b      	mov	r3, r1
 80139a6:	713b      	strb	r3, [r7, #4]
 80139a8:	4613      	mov	r3, r2
 80139aa:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 80139ac:	69bb      	ldr	r3, [r7, #24]
 80139ae:	2b00      	cmp	r3, #0
 80139b0:	d101      	bne.n	80139b6 <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80139b2:	2309      	movs	r3, #9
 80139b4:	e04e      	b.n	8013a54 <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 80139b6:	69bb      	ldr	r3, [r7, #24]
 80139b8:	2249      	movs	r2, #73	@ 0x49
 80139ba:	701a      	strb	r2, [r3, #0]
    }
    else
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    /* ST_WORAROUND_END */
    {
        b0[1] = 0x00;
 80139bc:	69bb      	ldr	r3, [r7, #24]
 80139be:	3301      	adds	r3, #1
 80139c0:	2200      	movs	r2, #0
 80139c2:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 80139c4:	69bb      	ldr	r3, [r7, #24]
 80139c6:	3302      	adds	r3, #2
 80139c8:	2200      	movs	r2, #0
 80139ca:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 80139cc:	69bb      	ldr	r3, [r7, #24]
 80139ce:	3303      	adds	r3, #3
 80139d0:	2200      	movs	r2, #0
 80139d2:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 80139d4:	69bb      	ldr	r3, [r7, #24]
 80139d6:	3304      	adds	r3, #4
 80139d8:	2200      	movs	r2, #0
 80139da:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 80139dc:	69bb      	ldr	r3, [r7, #24]
 80139de:	3305      	adds	r3, #5
 80139e0:	78fa      	ldrb	r2, [r7, #3]
 80139e2:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 80139e4:	69bb      	ldr	r3, [r7, #24]
 80139e6:	3306      	adds	r3, #6
 80139e8:	693a      	ldr	r2, [r7, #16]
 80139ea:	b2d2      	uxtb	r2, r2
 80139ec:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 80139ee:	693b      	ldr	r3, [r7, #16]
 80139f0:	0a1a      	lsrs	r2, r3, #8
 80139f2:	69bb      	ldr	r3, [r7, #24]
 80139f4:	3307      	adds	r3, #7
 80139f6:	b2d2      	uxtb	r2, r2
 80139f8:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 80139fa:	693b      	ldr	r3, [r7, #16]
 80139fc:	0c1a      	lsrs	r2, r3, #16
 80139fe:	69bb      	ldr	r3, [r7, #24]
 8013a00:	3308      	adds	r3, #8
 8013a02:	b2d2      	uxtb	r2, r2
 8013a04:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8013a06:	693b      	ldr	r3, [r7, #16]
 8013a08:	0e1a      	lsrs	r2, r3, #24
 8013a0a:	69bb      	ldr	r3, [r7, #24]
 8013a0c:	3309      	adds	r3, #9
 8013a0e:	b2d2      	uxtb	r2, r2
 8013a10:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 8013a12:	69bb      	ldr	r3, [r7, #24]
 8013a14:	330a      	adds	r3, #10
 8013a16:	697a      	ldr	r2, [r7, #20]
 8013a18:	b2d2      	uxtb	r2, r2
 8013a1a:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8013a1c:	697b      	ldr	r3, [r7, #20]
 8013a1e:	0a1a      	lsrs	r2, r3, #8
 8013a20:	69bb      	ldr	r3, [r7, #24]
 8013a22:	330b      	adds	r3, #11
 8013a24:	b2d2      	uxtb	r2, r2
 8013a26:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8013a28:	697b      	ldr	r3, [r7, #20]
 8013a2a:	0c1a      	lsrs	r2, r3, #16
 8013a2c:	69bb      	ldr	r3, [r7, #24]
 8013a2e:	330c      	adds	r3, #12
 8013a30:	b2d2      	uxtb	r2, r2
 8013a32:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8013a34:	697b      	ldr	r3, [r7, #20]
 8013a36:	0e1a      	lsrs	r2, r3, #24
 8013a38:	69bb      	ldr	r3, [r7, #24]
 8013a3a:	330d      	adds	r3, #13
 8013a3c:	b2d2      	uxtb	r2, r2
 8013a3e:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 8013a40:	69bb      	ldr	r3, [r7, #24]
 8013a42:	330e      	adds	r3, #14
 8013a44:	2200      	movs	r2, #0
 8013a46:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 8013a48:	69bb      	ldr	r3, [r7, #24]
 8013a4a:	330f      	adds	r3, #15
 8013a4c:	88fa      	ldrh	r2, [r7, #6]
 8013a4e:	b2d2      	uxtb	r2, r2
 8013a50:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8013a52:	2300      	movs	r3, #0
}
 8013a54:	4618      	mov	r0, r3
 8013a56:	3708      	adds	r7, #8
 8013a58:	46bd      	mov	sp, r7
 8013a5a:	bc90      	pop	{r4, r7}
 8013a5c:	4770      	bx	lr

08013a5e <ComputeCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 8013a5e:	b590      	push	{r4, r7, lr}
 8013a60:	b08b      	sub	sp, #44	@ 0x2c
 8013a62:	af04      	add	r7, sp, #16
 8013a64:	6078      	str	r0, [r7, #4]
 8013a66:	4608      	mov	r0, r1
 8013a68:	4611      	mov	r1, r2
 8013a6a:	461a      	mov	r2, r3
 8013a6c:	4603      	mov	r3, r0
 8013a6e:	807b      	strh	r3, [r7, #2]
 8013a70:	460b      	mov	r3, r1
 8013a72:	707b      	strb	r3, [r7, #1]
 8013a74:	4613      	mov	r3, r2
 8013a76:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	2b00      	cmp	r3, #0
 8013a7c:	d002      	beq.n	8013a84 <ComputeCmacB0+0x26>
 8013a7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	d101      	bne.n	8013a88 <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013a84:	2309      	movs	r3, #9
 8013a86:	e024      	b.n	8013ad2 <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8013a88:	887b      	ldrh	r3, [r7, #2]
 8013a8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013a8e:	d901      	bls.n	8013a94 <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8013a90:	230d      	movs	r3, #13
 8013a92:	e01e      	b.n	8013ad2 <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE];

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8013a94:	f897 4028 	ldrb.w	r4, [r7, #40]	@ 0x28
 8013a98:	783a      	ldrb	r2, [r7, #0]
 8013a9a:	7879      	ldrb	r1, [r7, #1]
 8013a9c:	8878      	ldrh	r0, [r7, #2]
 8013a9e:	f107 0308 	add.w	r3, r7, #8
 8013aa2:	9302      	str	r3, [sp, #8]
 8013aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013aa6:	9301      	str	r3, [sp, #4]
 8013aa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013aaa:	9300      	str	r3, [sp, #0]
 8013aac:	4623      	mov	r3, r4
 8013aae:	f7ff ff6e 	bl	801398e <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8013ab2:	7879      	ldrb	r1, [r7, #1]
 8013ab4:	887a      	ldrh	r2, [r7, #2]
 8013ab6:	f107 0008 	add.w	r0, r7, #8
 8013aba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013abc:	9300      	str	r3, [sp, #0]
 8013abe:	460b      	mov	r3, r1
 8013ac0:	6879      	ldr	r1, [r7, #4]
 8013ac2:	f7f8 fbb9 	bl	800c238 <SecureElementComputeAesCmac>
 8013ac6:	4603      	mov	r3, r0
 8013ac8:	2b00      	cmp	r3, #0
 8013aca:	d001      	beq.n	8013ad0 <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013acc:	230e      	movs	r3, #14
 8013ace:	e000      	b.n	8013ad2 <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8013ad0:	2300      	movs	r3, #0
}
 8013ad2:	4618      	mov	r0, r3
 8013ad4:	371c      	adds	r7, #28
 8013ad6:	46bd      	mov	sp, r7
 8013ad8:	bd90      	pop	{r4, r7, pc}

08013ada <VerifyCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in] expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 8013ada:	b590      	push	{r4, r7, lr}
 8013adc:	b0cd      	sub	sp, #308	@ 0x134
 8013ade:	af04      	add	r7, sp, #16
 8013ae0:	f507 7490 	add.w	r4, r7, #288	@ 0x120
 8013ae4:	f5a4 748e 	sub.w	r4, r4, #284	@ 0x11c
 8013ae8:	6020      	str	r0, [r4, #0]
 8013aea:	460c      	mov	r4, r1
 8013aec:	4610      	mov	r0, r2
 8013aee:	4619      	mov	r1, r3
 8013af0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013af4:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8013af8:	4622      	mov	r2, r4
 8013afa:	801a      	strh	r2, [r3, #0]
 8013afc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013b00:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 8013b04:	4602      	mov	r2, r0
 8013b06:	701a      	strb	r2, [r3, #0]
 8013b08:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013b0c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8013b10:	460a      	mov	r2, r1
 8013b12:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 8013b14:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013b18:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8013b1c:	681b      	ldr	r3, [r3, #0]
 8013b1e:	2b00      	cmp	r3, #0
 8013b20:	d101      	bne.n	8013b26 <VerifyCmacB0+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013b22:	2309      	movs	r3, #9
 8013b24:	e063      	b.n	8013bee <VerifyCmacB0+0x114>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8013b26:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013b2a:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8013b2e:	881b      	ldrh	r3, [r3, #0]
 8013b30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013b34:	d901      	bls.n	8013b3a <VerifyCmacB0+0x60>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8013b36:	230d      	movs	r3, #13
 8013b38:	e059      	b.n	8013bee <VerifyCmacB0+0x114>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8013b3a:	f107 030c 	add.w	r3, r7, #12
 8013b3e:	f44f 7288 	mov.w	r2, #272	@ 0x110
 8013b42:	2100      	movs	r1, #0
 8013b44:	4618      	mov	r0, r3
 8013b46:	f003 fb29 	bl	801719c <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8013b4a:	f897 4130 	ldrb.w	r4, [r7, #304]	@ 0x130
 8013b4e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013b52:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8013b56:	781a      	ldrb	r2, [r3, #0]
 8013b58:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013b5c:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 8013b60:	7819      	ldrb	r1, [r3, #0]
 8013b62:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013b66:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8013b6a:	8818      	ldrh	r0, [r3, #0]
 8013b6c:	f107 030c 	add.w	r3, r7, #12
 8013b70:	9302      	str	r3, [sp, #8]
 8013b72:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8013b76:	9301      	str	r3, [sp, #4]
 8013b78:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8013b7c:	9300      	str	r3, [sp, #0]
 8013b7e:	4623      	mov	r3, r4
 8013b80:	f7ff ff05 	bl	801398e <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8013b84:	f107 030c 	add.w	r3, r7, #12
 8013b88:	3310      	adds	r3, #16
 8013b8a:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8013b8e:	f5a2 728f 	sub.w	r2, r2, #286	@ 0x11e
 8013b92:	8812      	ldrh	r2, [r2, #0]
 8013b94:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 8013b98:	f5a1 718e 	sub.w	r1, r1, #284	@ 0x11c
 8013b9c:	6809      	ldr	r1, [r1, #0]
 8013b9e:	4618      	mov	r0, r3
 8013ba0:	f003 fac1 	bl	8017126 <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8013ba4:	2306      	movs	r3, #6
 8013ba6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 8013baa:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013bae:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8013bb2:	881b      	ldrh	r3, [r3, #0]
 8013bb4:	3310      	adds	r3, #16
 8013bb6:	b299      	uxth	r1, r3
 8013bb8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013bbc:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 8013bc0:	781b      	ldrb	r3, [r3, #0]
 8013bc2:	f107 000c 	add.w	r0, r7, #12
 8013bc6:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 8013bca:	f7f8 fb53 	bl	800c274 <SecureElementVerifyAesCmac>
 8013bce:	4603      	mov	r3, r0
 8013bd0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 8013bd4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8013bd8:	2b00      	cmp	r3, #0
 8013bda:	d101      	bne.n	8013be0 <VerifyCmacB0+0x106>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 8013bdc:	2300      	movs	r3, #0
 8013bde:	e006      	b.n	8013bee <VerifyCmacB0+0x114>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 8013be0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8013be4:	2b01      	cmp	r3, #1
 8013be6:	d101      	bne.n	8013bec <VerifyCmacB0+0x112>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 8013be8:	2301      	movs	r3, #1
 8013bea:	e000      	b.n	8013bee <VerifyCmacB0+0x114>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013bec:	230e      	movs	r3, #14
}
 8013bee:	4618      	mov	r0, r3
 8013bf0:	f507 7792 	add.w	r7, r7, #292	@ 0x124
 8013bf4:	46bd      	mov	sp, r7
 8013bf6:	bd90      	pop	{r4, r7, pc}

08013bf8 <GetKeyAddrItem>:
 * \param [in] addrID         - Address identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 8013bf8:	b480      	push	{r7}
 8013bfa:	b085      	sub	sp, #20
 8013bfc:	af00      	add	r7, sp, #0
 8013bfe:	4603      	mov	r3, r0
 8013c00:	6039      	str	r1, [r7, #0]
 8013c02:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8013c04:	2300      	movs	r3, #0
 8013c06:	73fb      	strb	r3, [r7, #15]
 8013c08:	e011      	b.n	8013c2e <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 8013c0a:	7bfb      	ldrb	r3, [r7, #15]
 8013c0c:	4a0c      	ldr	r2, [pc, #48]	@ (8013c40 <GetKeyAddrItem+0x48>)
 8013c0e:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8013c12:	79fa      	ldrb	r2, [r7, #7]
 8013c14:	429a      	cmp	r2, r3
 8013c16:	d107      	bne.n	8013c28 <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 8013c18:	7bfb      	ldrb	r3, [r7, #15]
 8013c1a:	009b      	lsls	r3, r3, #2
 8013c1c:	4a08      	ldr	r2, [pc, #32]	@ (8013c40 <GetKeyAddrItem+0x48>)
 8013c1e:	441a      	add	r2, r3
 8013c20:	683b      	ldr	r3, [r7, #0]
 8013c22:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 8013c24:	2300      	movs	r3, #0
 8013c26:	e006      	b.n	8013c36 <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8013c28:	7bfb      	ldrb	r3, [r7, #15]
 8013c2a:	3301      	adds	r3, #1
 8013c2c:	73fb      	strb	r3, [r7, #15]
 8013c2e:	7bfb      	ldrb	r3, [r7, #15]
 8013c30:	2b01      	cmp	r3, #1
 8013c32:	d9ea      	bls.n	8013c0a <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 8013c34:	230b      	movs	r3, #11
}
 8013c36:	4618      	mov	r0, r3
 8013c38:	3714      	adds	r7, #20
 8013c3a:	46bd      	mov	sp, r7
 8013c3c:	bc80      	pop	{r7}
 8013c3e:	4770      	bx	lr
 8013c40:	20000108 	.word	0x20000108

08013c44 <DeriveSessionKey10x>:
 * \param [in] netID          - Network Identifier
 * \param [in] deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 8013c44:	b580      	push	{r7, lr}
 8013c46:	b088      	sub	sp, #32
 8013c48:	af00      	add	r7, sp, #0
 8013c4a:	60b9      	str	r1, [r7, #8]
 8013c4c:	607a      	str	r2, [r7, #4]
 8013c4e:	461a      	mov	r2, r3
 8013c50:	4603      	mov	r3, r0
 8013c52:	73fb      	strb	r3, [r7, #15]
 8013c54:	4613      	mov	r3, r2
 8013c56:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 8013c58:	f107 0310 	add.w	r3, r7, #16
 8013c5c:	2200      	movs	r2, #0
 8013c5e:	601a      	str	r2, [r3, #0]
 8013c60:	605a      	str	r2, [r3, #4]
 8013c62:	609a      	str	r2, [r3, #8]
 8013c64:	60da      	str	r2, [r3, #12]

    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
    switch( keyID )
 8013c66:	7bfb      	ldrb	r3, [r7, #15]
 8013c68:	2b02      	cmp	r3, #2
 8013c6a:	d002      	beq.n	8013c72 <DeriveSessionKey10x+0x2e>
 8013c6c:	2b03      	cmp	r3, #3
 8013c6e:	d003      	beq.n	8013c78 <DeriveSessionKey10x+0x34>
 8013c70:	e005      	b.n	8013c7e <DeriveSessionKey10x+0x3a>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case NWK_S_KEY:
#endif /* USE_LRWAN_1_1_X_CRYPTO */
            compBase[0] = 0x01;
 8013c72:	2301      	movs	r3, #1
 8013c74:	743b      	strb	r3, [r7, #16]
            break;
 8013c76:	e004      	b.n	8013c82 <DeriveSessionKey10x+0x3e>
        case APP_S_KEY:
            compBase[0] = 0x02;
 8013c78:	2302      	movs	r3, #2
 8013c7a:	743b      	strb	r3, [r7, #16]
            break;
 8013c7c:	e001      	b.n	8013c82 <DeriveSessionKey10x+0x3e>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8013c7e:	230a      	movs	r3, #10
 8013c80:	e02a      	b.n	8013cd8 <DeriveSessionKey10x+0x94>
    }
   /* ST_WORKAROUND_END */

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 8013c82:	68bb      	ldr	r3, [r7, #8]
 8013c84:	b2db      	uxtb	r3, r3
 8013c86:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 8013c88:	68bb      	ldr	r3, [r7, #8]
 8013c8a:	0a1b      	lsrs	r3, r3, #8
 8013c8c:	b2db      	uxtb	r3, r3
 8013c8e:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 8013c90:	68bb      	ldr	r3, [r7, #8]
 8013c92:	0c1b      	lsrs	r3, r3, #16
 8013c94:	b2db      	uxtb	r3, r3
 8013c96:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	b2db      	uxtb	r3, r3
 8013c9c:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	0a1b      	lsrs	r3, r3, #8
 8013ca2:	b2db      	uxtb	r3, r3
 8013ca4:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 8013ca6:	687b      	ldr	r3, [r7, #4]
 8013ca8:	0c1b      	lsrs	r3, r3, #16
 8013caa:	b2db      	uxtb	r3, r3
 8013cac:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 8013cae:	89bb      	ldrh	r3, [r7, #12]
 8013cb0:	b2db      	uxtb	r3, r3
 8013cb2:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 8013cb4:	89bb      	ldrh	r3, [r7, #12]
 8013cb6:	0a1b      	lsrs	r3, r3, #8
 8013cb8:	b29b      	uxth	r3, r3
 8013cba:	b2db      	uxtb	r3, r3
 8013cbc:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8013cbe:	7bfa      	ldrb	r2, [r7, #15]
 8013cc0:	f107 0310 	add.w	r3, r7, #16
 8013cc4:	2101      	movs	r1, #1
 8013cc6:	4618      	mov	r0, r3
 8013cc8:	f7f8 fb6a 	bl	800c3a0 <SecureElementDeriveAndStoreKey>
 8013ccc:	4603      	mov	r3, r0
 8013cce:	2b00      	cmp	r3, #0
 8013cd0:	d001      	beq.n	8013cd6 <DeriveSessionKey10x+0x92>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013cd2:	230e      	movs	r3, #14
 8013cd4:	e000      	b.n	8013cd8 <DeriveSessionKey10x+0x94>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013cd6:	2300      	movs	r3, #0
}
 8013cd8:	4618      	mov	r0, r3
 8013cda:	3720      	adds	r7, #32
 8013cdc:	46bd      	mov	sp, r7
 8013cde:	bd80      	pop	{r7, pc}

08013ce0 <GetLastFcntDown>:
 * \param [in]    lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 8013ce0:	b480      	push	{r7}
 8013ce2:	b083      	sub	sp, #12
 8013ce4:	af00      	add	r7, sp, #0
 8013ce6:	4603      	mov	r3, r0
 8013ce8:	6039      	str	r1, [r7, #0]
 8013cea:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 8013cec:	683b      	ldr	r3, [r7, #0]
 8013cee:	2b00      	cmp	r3, #0
 8013cf0:	d101      	bne.n	8013cf6 <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013cf2:	2309      	movs	r3, #9
 8013cf4:	e03b      	b.n	8013d6e <GetLastFcntDown+0x8e>
    }
    switch( fCntID )
 8013cf6:	79fb      	ldrb	r3, [r7, #7]
 8013cf8:	3b01      	subs	r3, #1
 8013cfa:	2b03      	cmp	r3, #3
 8013cfc:	d834      	bhi.n	8013d68 <GetLastFcntDown+0x88>
 8013cfe:	a201      	add	r2, pc, #4	@ (adr r2, 8013d04 <GetLastFcntDown+0x24>)
 8013d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013d04:	08013d15 	.word	0x08013d15
 8013d08:	08013d2d 	.word	0x08013d2d
 8013d0c:	08013d45 	.word	0x08013d45
 8013d10:	08013d5d 	.word	0x08013d5d
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 8013d14:	4b18      	ldr	r3, [pc, #96]	@ (8013d78 <GetLastFcntDown+0x98>)
 8013d16:	681b      	ldr	r3, [r3, #0]
 8013d18:	691a      	ldr	r2, [r3, #16]
 8013d1a:	683b      	ldr	r3, [r7, #0]
 8013d1c:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.NFCntDown;
 8013d1e:	4b16      	ldr	r3, [pc, #88]	@ (8013d78 <GetLastFcntDown+0x98>)
 8013d20:	681a      	ldr	r2, [r3, #0]
 8013d22:	4b15      	ldr	r3, [pc, #84]	@ (8013d78 <GetLastFcntDown+0x98>)
 8013d24:	681b      	ldr	r3, [r3, #0]
 8013d26:	6912      	ldr	r2, [r2, #16]
 8013d28:	621a      	str	r2, [r3, #32]
            break;
 8013d2a:	e01f      	b.n	8013d6c <GetLastFcntDown+0x8c>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 8013d2c:	4b12      	ldr	r3, [pc, #72]	@ (8013d78 <GetLastFcntDown+0x98>)
 8013d2e:	681b      	ldr	r3, [r3, #0]
 8013d30:	695a      	ldr	r2, [r3, #20]
 8013d32:	683b      	ldr	r3, [r7, #0]
 8013d34:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.AFCntDown;
 8013d36:	4b10      	ldr	r3, [pc, #64]	@ (8013d78 <GetLastFcntDown+0x98>)
 8013d38:	681a      	ldr	r2, [r3, #0]
 8013d3a:	4b0f      	ldr	r3, [pc, #60]	@ (8013d78 <GetLastFcntDown+0x98>)
 8013d3c:	681b      	ldr	r3, [r3, #0]
 8013d3e:	6952      	ldr	r2, [r2, #20]
 8013d40:	621a      	str	r2, [r3, #32]
            break;
 8013d42:	e013      	b.n	8013d6c <GetLastFcntDown+0x8c>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 8013d44:	4b0c      	ldr	r3, [pc, #48]	@ (8013d78 <GetLastFcntDown+0x98>)
 8013d46:	681b      	ldr	r3, [r3, #0]
 8013d48:	699a      	ldr	r2, [r3, #24]
 8013d4a:	683b      	ldr	r3, [r7, #0]
 8013d4c:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8013d4e:	4b0a      	ldr	r3, [pc, #40]	@ (8013d78 <GetLastFcntDown+0x98>)
 8013d50:	681a      	ldr	r2, [r3, #0]
 8013d52:	4b09      	ldr	r3, [pc, #36]	@ (8013d78 <GetLastFcntDown+0x98>)
 8013d54:	681b      	ldr	r3, [r3, #0]
 8013d56:	6992      	ldr	r2, [r2, #24]
 8013d58:	621a      	str	r2, [r3, #32]
            break;
 8013d5a:	e007      	b.n	8013d6c <GetLastFcntDown+0x8c>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 8013d5c:	4b06      	ldr	r3, [pc, #24]	@ (8013d78 <GetLastFcntDown+0x98>)
 8013d5e:	681b      	ldr	r3, [r3, #0]
 8013d60:	69da      	ldr	r2, [r3, #28]
 8013d62:	683b      	ldr	r3, [r7, #0]
 8013d64:	601a      	str	r2, [r3, #0]
            break;
 8013d66:	e001      	b.n	8013d6c <GetLastFcntDown+0x8c>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8013d68:	2305      	movs	r3, #5
 8013d6a:	e000      	b.n	8013d6e <GetLastFcntDown+0x8e>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8013d6c:	2300      	movs	r3, #0
}
 8013d6e:	4618      	mov	r0, r3
 8013d70:	370c      	adds	r7, #12
 8013d72:	46bd      	mov	sp, r7
 8013d74:	bc80      	pop	{r7}
 8013d76:	4770      	bx	lr
 8013d78:	20001be4 	.word	0x20001be4

08013d7c <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8013d7c:	b580      	push	{r7, lr}
 8013d7e:	b084      	sub	sp, #16
 8013d80:	af00      	add	r7, sp, #0
 8013d82:	4603      	mov	r3, r0
 8013d84:	6039      	str	r1, [r7, #0]
 8013d86:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 8013d88:	2300      	movs	r3, #0
 8013d8a:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 8013d8c:	f107 020c 	add.w	r2, r7, #12
 8013d90:	79fb      	ldrb	r3, [r7, #7]
 8013d92:	4611      	mov	r1, r2
 8013d94:	4618      	mov	r0, r3
 8013d96:	f7ff ffa3 	bl	8013ce0 <GetLastFcntDown>
 8013d9a:	4603      	mov	r3, r0
 8013d9c:	2b00      	cmp	r3, #0
 8013d9e:	d001      	beq.n	8013da4 <CheckFCntDown+0x28>
    {
        return false;
 8013da0:	2300      	movs	r3, #0
 8013da2:	e00a      	b.n	8013dba <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 8013da4:	68fb      	ldr	r3, [r7, #12]
 8013da6:	683a      	ldr	r2, [r7, #0]
 8013da8:	429a      	cmp	r2, r3
 8013daa:	d803      	bhi.n	8013db4 <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITAL_VALUE ) )
 8013dac:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 8013dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013db2:	d101      	bne.n	8013db8 <CheckFCntDown+0x3c>
    {
        return true;
 8013db4:	2301      	movs	r3, #1
 8013db6:	e000      	b.n	8013dba <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 8013db8:	2300      	movs	r3, #0
    }
}
 8013dba:	4618      	mov	r0, r3
 8013dbc:	3710      	adds	r7, #16
 8013dbe:	46bd      	mov	sp, r7
 8013dc0:	bd80      	pop	{r7, pc}
	...

08013dc4 <UpdateFCntDown>:
 * \param [in]    currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8013dc4:	b480      	push	{r7}
 8013dc6:	b083      	sub	sp, #12
 8013dc8:	af00      	add	r7, sp, #0
 8013dca:	4603      	mov	r3, r0
 8013dcc:	6039      	str	r1, [r7, #0]
 8013dce:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 8013dd0:	79fb      	ldrb	r3, [r7, #7]
 8013dd2:	3b01      	subs	r3, #1
 8013dd4:	2b03      	cmp	r3, #3
 8013dd6:	d81f      	bhi.n	8013e18 <UpdateFCntDown+0x54>
 8013dd8:	a201      	add	r2, pc, #4	@ (adr r2, 8013de0 <UpdateFCntDown+0x1c>)
 8013dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013dde:	bf00      	nop
 8013de0:	08013df1 	.word	0x08013df1
 8013de4:	08013dfb 	.word	0x08013dfb
 8013de8:	08013e05 	.word	0x08013e05
 8013dec:	08013e0f 	.word	0x08013e0f
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 8013df0:	4b0c      	ldr	r3, [pc, #48]	@ (8013e24 <UpdateFCntDown+0x60>)
 8013df2:	681b      	ldr	r3, [r3, #0]
 8013df4:	683a      	ldr	r2, [r7, #0]
 8013df6:	611a      	str	r2, [r3, #16]
            break;
 8013df8:	e00f      	b.n	8013e1a <UpdateFCntDown+0x56>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 8013dfa:	4b0a      	ldr	r3, [pc, #40]	@ (8013e24 <UpdateFCntDown+0x60>)
 8013dfc:	681b      	ldr	r3, [r3, #0]
 8013dfe:	683a      	ldr	r2, [r7, #0]
 8013e00:	615a      	str	r2, [r3, #20]
            break;
 8013e02:	e00a      	b.n	8013e1a <UpdateFCntDown+0x56>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 8013e04:	4b07      	ldr	r3, [pc, #28]	@ (8013e24 <UpdateFCntDown+0x60>)
 8013e06:	681b      	ldr	r3, [r3, #0]
 8013e08:	683a      	ldr	r2, [r7, #0]
 8013e0a:	619a      	str	r2, [r3, #24]
            break;
 8013e0c:	e005      	b.n	8013e1a <UpdateFCntDown+0x56>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 8013e0e:	4b05      	ldr	r3, [pc, #20]	@ (8013e24 <UpdateFCntDown+0x60>)
 8013e10:	681b      	ldr	r3, [r3, #0]
 8013e12:	683a      	ldr	r2, [r7, #0]
 8013e14:	61da      	str	r2, [r3, #28]
            break;
 8013e16:	e000      	b.n	8013e1a <UpdateFCntDown+0x56>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 8013e18:	bf00      	nop
    }
}
 8013e1a:	bf00      	nop
 8013e1c:	370c      	adds	r7, #12
 8013e1e:	46bd      	mov	sp, r7
 8013e20:	bc80      	pop	{r7}
 8013e22:	4770      	bx	lr
 8013e24:	20001be4 	.word	0x20001be4

08013e28 <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 8013e28:	b480      	push	{r7}
 8013e2a:	b083      	sub	sp, #12
 8013e2c:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 8013e2e:	4b18      	ldr	r3, [pc, #96]	@ (8013e90 <ResetFCnts+0x68>)
 8013e30:	681b      	ldr	r3, [r3, #0]
 8013e32:	2200      	movs	r2, #0
 8013e34:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8013e36:	4b16      	ldr	r3, [pc, #88]	@ (8013e90 <ResetFCnts+0x68>)
 8013e38:	681b      	ldr	r3, [r3, #0]
 8013e3a:	f04f 32ff 	mov.w	r2, #4294967295
 8013e3e:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8013e40:	4b13      	ldr	r3, [pc, #76]	@ (8013e90 <ResetFCnts+0x68>)
 8013e42:	681b      	ldr	r3, [r3, #0]
 8013e44:	f04f 32ff 	mov.w	r2, #4294967295
 8013e48:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 8013e4a:	4b11      	ldr	r3, [pc, #68]	@ (8013e90 <ResetFCnts+0x68>)
 8013e4c:	681b      	ldr	r3, [r3, #0]
 8013e4e:	f04f 32ff 	mov.w	r2, #4294967295
 8013e52:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8013e54:	4b0e      	ldr	r3, [pc, #56]	@ (8013e90 <ResetFCnts+0x68>)
 8013e56:	681a      	ldr	r2, [r3, #0]
 8013e58:	4b0d      	ldr	r3, [pc, #52]	@ (8013e90 <ResetFCnts+0x68>)
 8013e5a:	681b      	ldr	r3, [r3, #0]
 8013e5c:	6992      	ldr	r2, [r2, #24]
 8013e5e:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8013e60:	2300      	movs	r3, #0
 8013e62:	607b      	str	r3, [r7, #4]
 8013e64:	e00b      	b.n	8013e7e <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
 8013e66:	4b0a      	ldr	r3, [pc, #40]	@ (8013e90 <ResetFCnts+0x68>)
 8013e68:	681a      	ldr	r2, [r3, #0]
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	3306      	adds	r3, #6
 8013e6e:	009b      	lsls	r3, r3, #2
 8013e70:	4413      	add	r3, r2
 8013e72:	f04f 32ff 	mov.w	r2, #4294967295
 8013e76:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	3301      	adds	r3, #1
 8013e7c:	607b      	str	r3, [r7, #4]
 8013e7e:	687b      	ldr	r3, [r7, #4]
 8013e80:	2b00      	cmp	r3, #0
 8013e82:	ddf0      	ble.n	8013e66 <ResetFCnts+0x3e>
    }
}
 8013e84:	bf00      	nop
 8013e86:	bf00      	nop
 8013e88:	370c      	adds	r7, #12
 8013e8a:	46bd      	mov	sp, r7
 8013e8c:	bc80      	pop	{r7}
 8013e8e:	4770      	bx	lr
 8013e90:	20001be4 	.word	0x20001be4

08013e94 <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 8013e94:	b580      	push	{r7, lr}
 8013e96:	b082      	sub	sp, #8
 8013e98:	af00      	add	r7, sp, #0
 8013e9a:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	2b00      	cmp	r3, #0
 8013ea0:	d101      	bne.n	8013ea6 <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 8013ea2:	2308      	movs	r3, #8
 8013ea4:	e01c      	b.n	8013ee0 <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 8013ea6:	4a10      	ldr	r2, [pc, #64]	@ (8013ee8 <LoRaMacCryptoInit+0x54>)
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 8013eac:	4b0e      	ldr	r3, [pc, #56]	@ (8013ee8 <LoRaMacCryptoInit+0x54>)
 8013eae:	681b      	ldr	r3, [r3, #0]
 8013eb0:	2228      	movs	r2, #40	@ 0x28
 8013eb2:	2100      	movs	r1, #0
 8013eb4:	4618      	mov	r0, r3
 8013eb6:	f003 f971 	bl	801719c <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 8013eba:	4b0b      	ldr	r3, [pc, #44]	@ (8013ee8 <LoRaMacCryptoInit+0x54>)
 8013ebc:	681b      	ldr	r3, [r3, #0]
 8013ebe:	2201      	movs	r2, #1
 8013ec0:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 8013ec2:	4b09      	ldr	r3, [pc, #36]	@ (8013ee8 <LoRaMacCryptoInit+0x54>)
 8013ec4:	681b      	ldr	r3, [r3, #0]
 8013ec6:	2201      	movs	r2, #1
 8013ec8:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 8013eca:	4b07      	ldr	r3, [pc, #28]	@ (8013ee8 <LoRaMacCryptoInit+0x54>)
 8013ecc:	681b      	ldr	r3, [r3, #0]
 8013ece:	2201      	movs	r2, #1
 8013ed0:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 8013ed2:	4b05      	ldr	r3, [pc, #20]	@ (8013ee8 <LoRaMacCryptoInit+0x54>)
 8013ed4:	681b      	ldr	r3, [r3, #0]
 8013ed6:	2200      	movs	r2, #0
 8013ed8:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 8013eda:	f7ff ffa5 	bl	8013e28 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 8013ede:	2300      	movs	r3, #0
}
 8013ee0:	4618      	mov	r0, r3
 8013ee2:	3708      	adds	r7, #8
 8013ee4:	46bd      	mov	sp, r7
 8013ee6:	bd80      	pop	{r7, pc}
 8013ee8:	20001be4 	.word	0x20001be4

08013eec <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 8013eec:	b480      	push	{r7}
 8013eee:	b083      	sub	sp, #12
 8013ef0:	af00      	add	r7, sp, #0
 8013ef2:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 8013ef4:	4b04      	ldr	r3, [pc, #16]	@ (8013f08 <LoRaMacCryptoSetLrWanVersion+0x1c>)
 8013ef6:	681b      	ldr	r3, [r3, #0]
 8013ef8:	687a      	ldr	r2, [r7, #4]
 8013efa:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8013efc:	2300      	movs	r3, #0
}
 8013efe:	4618      	mov	r0, r3
 8013f00:	370c      	adds	r7, #12
 8013f02:	46bd      	mov	sp, r7
 8013f04:	bc80      	pop	{r7}
 8013f06:	4770      	bx	lr
 8013f08:	20001be4 	.word	0x20001be4

08013f0c <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 8013f0c:	b480      	push	{r7}
 8013f0e:	b083      	sub	sp, #12
 8013f10:	af00      	add	r7, sp, #0
 8013f12:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	2b00      	cmp	r3, #0
 8013f18:	d101      	bne.n	8013f1e <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013f1a:	2309      	movs	r3, #9
 8013f1c:	e006      	b.n	8013f2c <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 8013f1e:	4b06      	ldr	r3, [pc, #24]	@ (8013f38 <LoRaMacCryptoGetFCntUp+0x2c>)
 8013f20:	681b      	ldr	r3, [r3, #0]
 8013f22:	68db      	ldr	r3, [r3, #12]
 8013f24:	1c5a      	adds	r2, r3, #1
 8013f26:	687b      	ldr	r3, [r7, #4]
 8013f28:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8013f2a:	2300      	movs	r3, #0
}
 8013f2c:	4618      	mov	r0, r3
 8013f2e:	370c      	adds	r7, #12
 8013f30:	46bd      	mov	sp, r7
 8013f32:	bc80      	pop	{r7}
 8013f34:	4770      	bx	lr
 8013f36:	bf00      	nop
 8013f38:	20001be4 	.word	0x20001be4

08013f3c <LoRaMacCryptoGetFCntDown>:

    return LORAMAC_CRYPTO_SUCCESS;
}
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint32_t frameFcnt, uint32_t* currentDown )
{
 8013f3c:	b580      	push	{r7, lr}
 8013f3e:	b088      	sub	sp, #32
 8013f40:	af00      	add	r7, sp, #0
 8013f42:	4603      	mov	r3, r0
 8013f44:	60b9      	str	r1, [r7, #8]
 8013f46:	607a      	str	r2, [r7, #4]
 8013f48:	73fb      	strb	r3, [r7, #15]
    uint32_t lastDown = 0;
 8013f4a:	2300      	movs	r3, #0
 8013f4c:	617b      	str	r3, [r7, #20]
    int32_t fCntDiff = 0;
 8013f4e:	2300      	movs	r3, #0
 8013f50:	61fb      	str	r3, [r7, #28]
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 8013f52:	2312      	movs	r3, #18
 8013f54:	76fb      	strb	r3, [r7, #27]

    if( currentDown == NULL )
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	2b00      	cmp	r3, #0
 8013f5a:	d101      	bne.n	8013f60 <LoRaMacCryptoGetFCntDown+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013f5c:	2309      	movs	r3, #9
 8013f5e:	e035      	b.n	8013fcc <LoRaMacCryptoGetFCntDown+0x90>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 8013f60:	f107 0214 	add.w	r2, r7, #20
 8013f64:	7bfb      	ldrb	r3, [r7, #15]
 8013f66:	4611      	mov	r1, r2
 8013f68:	4618      	mov	r0, r3
 8013f6a:	f7ff feb9 	bl	8013ce0 <GetLastFcntDown>
 8013f6e:	4603      	mov	r3, r0
 8013f70:	76fb      	strb	r3, [r7, #27]
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8013f72:	7efb      	ldrb	r3, [r7, #27]
 8013f74:	2b00      	cmp	r3, #0
 8013f76:	d001      	beq.n	8013f7c <LoRaMacCryptoGetFCntDown+0x40>
    {
        return cryptoStatus;
 8013f78:	7efb      	ldrb	r3, [r7, #27]
 8013f7a:	e027      	b.n	8013fcc <LoRaMacCryptoGetFCntDown+0x90>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 8013f7c:	697b      	ldr	r3, [r7, #20]
 8013f7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013f82:	d103      	bne.n	8013f8c <LoRaMacCryptoGetFCntDown+0x50>
    {
        *currentDown = frameFcnt;
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	68ba      	ldr	r2, [r7, #8]
 8013f88:	601a      	str	r2, [r3, #0]
 8013f8a:	e01e      	b.n	8013fca <LoRaMacCryptoGetFCntDown+0x8e>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 8013f8c:	697b      	ldr	r3, [r7, #20]
 8013f8e:	b29b      	uxth	r3, r3
 8013f90:	68ba      	ldr	r2, [r7, #8]
 8013f92:	1ad3      	subs	r3, r2, r3
 8013f94:	61fb      	str	r3, [r7, #28]

        if( fCntDiff > 0 )
 8013f96:	69fb      	ldr	r3, [r7, #28]
 8013f98:	2b00      	cmp	r3, #0
 8013f9a:	dd05      	ble.n	8013fa8 <LoRaMacCryptoGetFCntDown+0x6c>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 8013f9c:	697a      	ldr	r2, [r7, #20]
 8013f9e:	69fb      	ldr	r3, [r7, #28]
 8013fa0:	441a      	add	r2, r3
 8013fa2:	687b      	ldr	r3, [r7, #4]
 8013fa4:	601a      	str	r2, [r3, #0]
 8013fa6:	e010      	b.n	8013fca <LoRaMacCryptoGetFCntDown+0x8e>
        }
        else if( fCntDiff == 0 )
 8013fa8:	69fb      	ldr	r3, [r7, #28]
 8013faa:	2b00      	cmp	r3, #0
 8013fac:	d104      	bne.n	8013fb8 <LoRaMacCryptoGetFCntDown+0x7c>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 8013fae:	697a      	ldr	r2, [r7, #20]
 8013fb0:	687b      	ldr	r3, [r7, #4]
 8013fb2:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 8013fb4:	2307      	movs	r3, #7
 8013fb6:	e009      	b.n	8013fcc <LoRaMacCryptoGetFCntDown+0x90>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 8013fb8:	697b      	ldr	r3, [r7, #20]
 8013fba:	0c1b      	lsrs	r3, r3, #16
 8013fbc:	041b      	lsls	r3, r3, #16
 8013fbe:	68ba      	ldr	r2, [r7, #8]
 8013fc0:	4413      	add	r3, r2
 8013fc2:	f503 3280 	add.w	r2, r3, #65536	@ 0x10000
 8013fc6:	687b      	ldr	r3, [r7, #4]
 8013fc8:	601a      	str	r2, [r3, #0]
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013fca:	2300      	movs	r3, #0
}
 8013fcc:	4618      	mov	r0, r3
 8013fce:	3720      	adds	r7, #32
 8013fd0:	46bd      	mov	sp, r7
 8013fd2:	bd80      	pop	{r7, pc}

08013fd4 <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 8013fd4:	b480      	push	{r7}
 8013fd6:	b085      	sub	sp, #20
 8013fd8:	af00      	add	r7, sp, #0
 8013fda:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 8013fdc:	687b      	ldr	r3, [r7, #4]
 8013fde:	2b00      	cmp	r3, #0
 8013fe0:	d101      	bne.n	8013fe6 <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013fe2:	2309      	movs	r3, #9
 8013fe4:	e017      	b.n	8014016 <LoRaMacCryptoSetMulticastReference+0x42>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8013fe6:	2300      	movs	r3, #0
 8013fe8:	60fb      	str	r3, [r7, #12]
 8013fea:	e010      	b.n	801400e <LoRaMacCryptoSetMulticastReference+0x3a>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 8013fec:	4b0c      	ldr	r3, [pc, #48]	@ (8014020 <LoRaMacCryptoSetMulticastReference+0x4c>)
 8013fee:	6819      	ldr	r1, [r3, #0]
 8013ff0:	68fb      	ldr	r3, [r7, #12]
 8013ff2:	222c      	movs	r2, #44	@ 0x2c
 8013ff4:	fb02 f303 	mul.w	r3, r2, r3
 8013ff8:	687a      	ldr	r2, [r7, #4]
 8013ffa:	4413      	add	r3, r2
 8013ffc:	68fa      	ldr	r2, [r7, #12]
 8013ffe:	3206      	adds	r2, #6
 8014000:	0092      	lsls	r2, r2, #2
 8014002:	440a      	add	r2, r1
 8014004:	3204      	adds	r2, #4
 8014006:	621a      	str	r2, [r3, #32]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8014008:	68fb      	ldr	r3, [r7, #12]
 801400a:	3301      	adds	r3, #1
 801400c:	60fb      	str	r3, [r7, #12]
 801400e:	68fb      	ldr	r3, [r7, #12]
 8014010:	2b00      	cmp	r3, #0
 8014012:	ddeb      	ble.n	8013fec <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8014014:	2300      	movs	r3, #0
}
 8014016:	4618      	mov	r0, r3
 8014018:	3714      	adds	r7, #20
 801401a:	46bd      	mov	sp, r7
 801401c:	bc80      	pop	{r7}
 801401e:	4770      	bx	lr
 8014020:	20001be4 	.word	0x20001be4

08014024 <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 8014024:	b580      	push	{r7, lr}
 8014026:	b082      	sub	sp, #8
 8014028:	af00      	add	r7, sp, #0
 801402a:	4603      	mov	r3, r0
 801402c:	6039      	str	r1, [r7, #0]
 801402e:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 8014030:	79fb      	ldrb	r3, [r7, #7]
 8014032:	6839      	ldr	r1, [r7, #0]
 8014034:	4618      	mov	r0, r3
 8014036:	f7f8 f8a1 	bl	800c17c <SecureElementSetKey>
 801403a:	4603      	mov	r3, r0
 801403c:	2b00      	cmp	r3, #0
 801403e:	d001      	beq.n	8014044 <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014040:	230e      	movs	r3, #14
 8014042:	e018      	b.n	8014076 <LoRaMacCryptoSetKey+0x52>
    }
    if( keyID == APP_KEY )
 8014044:	79fb      	ldrb	r3, [r7, #7]
 8014046:	2b00      	cmp	r3, #0
 8014048:	d114      	bne.n	8014074 <LoRaMacCryptoSetKey+0x50>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveMcRootKey( CryptoNvm->LrWanVersion.Fields.Minor, keyID ) != LORAMAC_CRYPTO_SUCCESS )
 801404a:	4b0d      	ldr	r3, [pc, #52]	@ (8014080 <LoRaMacCryptoSetKey+0x5c>)
 801404c:	681b      	ldr	r3, [r3, #0]
 801404e:	789b      	ldrb	r3, [r3, #2]
 8014050:	79fa      	ldrb	r2, [r7, #7]
 8014052:	4611      	mov	r1, r2
 8014054:	4618      	mov	r0, r3
 8014056:	f000 fa35 	bl	80144c4 <LoRaMacCryptoDeriveMcRootKey>
 801405a:	4603      	mov	r3, r0
 801405c:	2b00      	cmp	r3, #0
 801405e:	d001      	beq.n	8014064 <LoRaMacCryptoSetKey+0x40>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014060:	230e      	movs	r3, #14
 8014062:	e008      	b.n	8014076 <LoRaMacCryptoSetKey+0x52>
        }
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8014064:	2004      	movs	r0, #4
 8014066:	f000 fa57 	bl	8014518 <LoRaMacCryptoDeriveMcKEKey>
 801406a:	4603      	mov	r3, r0
 801406c:	2b00      	cmp	r3, #0
 801406e:	d001      	beq.n	8014074 <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014070:	230e      	movs	r3, #14
 8014072:	e000      	b.n	8014076 <LoRaMacCryptoSetKey+0x52>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8014074:	2300      	movs	r3, #0
}
 8014076:	4618      	mov	r0, r3
 8014078:	3708      	adds	r7, #8
 801407a:	46bd      	mov	sp, r7
 801407c:	bd80      	pop	{r7, pc}
 801407e:	bf00      	nop
 8014080:	20001be4 	.word	0x20001be4

08014084 <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8014084:	b580      	push	{r7, lr}
 8014086:	b086      	sub	sp, #24
 8014088:	af02      	add	r7, sp, #8
 801408a:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	2b00      	cmp	r3, #0
 8014090:	d101      	bne.n	8014096 <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014092:	2309      	movs	r3, #9
 8014094:	e02d      	b.n	80140f2 <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 8014096:	2301      	movs	r3, #1
 8014098:	73fb      	strb	r3, [r7, #15]
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
    SecureElementRandomNumber( &devNonce );
    CryptoNvm->DevNonce = devNonce;
#else
    CryptoNvm->DevNonce++;
 801409a:	4b18      	ldr	r3, [pc, #96]	@ (80140fc <LoRaMacCryptoPrepareJoinRequest+0x78>)
 801409c:	681b      	ldr	r3, [r3, #0]
 801409e:	889a      	ldrh	r2, [r3, #4]
 80140a0:	3201      	adds	r2, #1
 80140a2:	b292      	uxth	r2, r2
 80140a4:	809a      	strh	r2, [r3, #4]
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 80140a6:	4b15      	ldr	r3, [pc, #84]	@ (80140fc <LoRaMacCryptoPrepareJoinRequest+0x78>)
 80140a8:	681b      	ldr	r3, [r3, #0]
 80140aa:	889a      	ldrh	r2, [r3, #4]
 80140ac:	687b      	ldr	r3, [r7, #4]
 80140ae:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80140b0:	6878      	ldr	r0, [r7, #4]
 80140b2:	f000 fc10 	bl	80148d6 <LoRaMacSerializerJoinRequest>
 80140b6:	4603      	mov	r3, r0
 80140b8:	2b00      	cmp	r3, #0
 80140ba:	d001      	beq.n	80140c0 <LoRaMacCryptoPrepareJoinRequest+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80140bc:	2310      	movs	r3, #16
 80140be:	e018      	b.n	80140f2 <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 80140c0:	687b      	ldr	r3, [r7, #4]
 80140c2:	6819      	ldr	r1, [r3, #0]
 80140c4:	687b      	ldr	r3, [r7, #4]
 80140c6:	3318      	adds	r3, #24
 80140c8:	7bfa      	ldrb	r2, [r7, #15]
 80140ca:	9300      	str	r3, [sp, #0]
 80140cc:	4613      	mov	r3, r2
 80140ce:	2213      	movs	r2, #19
 80140d0:	2000      	movs	r0, #0
 80140d2:	f7f8 f8b1 	bl	800c238 <SecureElementComputeAesCmac>
 80140d6:	4603      	mov	r3, r0
 80140d8:	2b00      	cmp	r3, #0
 80140da:	d001      	beq.n	80140e0 <LoRaMacCryptoPrepareJoinRequest+0x5c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80140dc:	230e      	movs	r3, #14
 80140de:	e008      	b.n	80140f2 <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80140e0:	6878      	ldr	r0, [r7, #4]
 80140e2:	f000 fbf8 	bl	80148d6 <LoRaMacSerializerJoinRequest>
 80140e6:	4603      	mov	r3, r0
 80140e8:	2b00      	cmp	r3, #0
 80140ea:	d001      	beq.n	80140f0 <LoRaMacCryptoPrepareJoinRequest+0x6c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80140ec:	2310      	movs	r3, #16
 80140ee:	e000      	b.n	80140f2 <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80140f0:	2300      	movs	r3, #0
}
 80140f2:	4618      	mov	r0, r3
 80140f4:	3710      	adds	r7, #16
 80140f6:	46bd      	mov	sp, r7
 80140f8:	bd80      	pop	{r7, pc}
 80140fa:	bf00      	nop
 80140fc:	20001be4 	.word	0x20001be4

08014100 <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 8014100:	b590      	push	{r4, r7, lr}
 8014102:	b097      	sub	sp, #92	@ 0x5c
 8014104:	af04      	add	r7, sp, #16
 8014106:	4603      	mov	r3, r0
 8014108:	60b9      	str	r1, [r7, #8]
 801410a:	607a      	str	r2, [r7, #4]
 801410c:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 801410e:	687b      	ldr	r3, [r7, #4]
 8014110:	2b00      	cmp	r3, #0
 8014112:	d002      	beq.n	801411a <LoRaMacCryptoHandleJoinAccept+0x1a>
 8014114:	68bb      	ldr	r3, [r7, #8]
 8014116:	2b00      	cmp	r3, #0
 8014118:	d101      	bne.n	801411e <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801411a:	2309      	movs	r3, #9
 801411c:	e0bb      	b.n	8014296 <LoRaMacCryptoHandleJoinAccept+0x196>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 801411e:	2312      	movs	r3, #18
 8014120:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 8014124:	f107 0318 	add.w	r3, r7, #24
 8014128:	2221      	movs	r2, #33	@ 0x21
 801412a:	2100      	movs	r1, #0
 801412c:	4618      	mov	r0, r3
 801412e:	f008 fb24 	bl	801c77a <memset>
    uint8_t versionMinor         = 0;
 8014132:	2300      	movs	r3, #0
 8014134:	75fb      	strb	r3, [r7, #23]
    uint16_t nonce               = CryptoNvm->DevNonce;
 8014136:	4b5a      	ldr	r3, [pc, #360]	@ (80142a0 <LoRaMacCryptoHandleJoinAccept+0x1a0>)
 8014138:	681b      	ldr	r3, [r3, #0]
 801413a:	889b      	ldrh	r3, [r3, #4]
 801413c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 8014140:	687b      	ldr	r3, [r7, #4]
 8014142:	681c      	ldr	r4, [r3, #0]
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	791b      	ldrb	r3, [r3, #4]
 8014148:	f8b7 1044 	ldrh.w	r1, [r7, #68]	@ 0x44
 801414c:	7bf8      	ldrb	r0, [r7, #15]
 801414e:	f107 0217 	add.w	r2, r7, #23
 8014152:	9202      	str	r2, [sp, #8]
 8014154:	f107 0218 	add.w	r2, r7, #24
 8014158:	9201      	str	r2, [sp, #4]
 801415a:	9300      	str	r3, [sp, #0]
 801415c:	4623      	mov	r3, r4
 801415e:	460a      	mov	r2, r1
 8014160:	68b9      	ldr	r1, [r7, #8]
 8014162:	f7f8 f95c 	bl	800c41e <SecureElementProcessJoinAccept>
 8014166:	4603      	mov	r3, r0
 8014168:	2b00      	cmp	r3, #0
 801416a:	d001      	beq.n	8014170 <LoRaMacCryptoHandleJoinAccept+0x70>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801416c:	230e      	movs	r3, #14
 801416e:	e092      	b.n	8014296 <LoRaMacCryptoHandleJoinAccept+0x196>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 8014170:	687b      	ldr	r3, [r7, #4]
 8014172:	6818      	ldr	r0, [r3, #0]
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	791b      	ldrb	r3, [r3, #4]
 8014178:	461a      	mov	r2, r3
 801417a:	f107 0318 	add.w	r3, r7, #24
 801417e:	4619      	mov	r1, r3
 8014180:	f002 ffd1 	bl	8017126 <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8014184:	6878      	ldr	r0, [r7, #4]
 8014186:	f000 f9e9 	bl	801455c <LoRaMacParserJoinAccept>
 801418a:	4603      	mov	r3, r0
 801418c:	2b00      	cmp	r3, #0
 801418e:	d001      	beq.n	8014194 <LoRaMacCryptoHandleJoinAccept+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8014190:	230f      	movs	r3, #15
 8014192:	e080      	b.n	8014296 <LoRaMacCryptoHandleJoinAccept+0x196>
    }

    uint32_t currentJoinNonce;

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	799b      	ldrb	r3, [r3, #6]
 8014198:	643b      	str	r3, [r7, #64]	@ 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 801419a:	687b      	ldr	r3, [r7, #4]
 801419c:	79db      	ldrb	r3, [r3, #7]
 801419e:	021b      	lsls	r3, r3, #8
 80141a0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80141a2:	4313      	orrs	r3, r2
 80141a4:	643b      	str	r3, [r7, #64]	@ 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 80141a6:	687b      	ldr	r3, [r7, #4]
 80141a8:	7a1b      	ldrb	r3, [r3, #8]
 80141aa:	041b      	lsls	r3, r3, #16
 80141ac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80141ae:	4313      	orrs	r3, r2
 80141b0:	643b      	str	r3, [r7, #64]	@ 0x40
#if( USE_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    if( currentJoinNonce > CryptoNvm->JoinNonce )
#else
    // Check if the JoinNonce is different from the previous one
    if( currentJoinNonce != CryptoNvm->JoinNonce )
 80141b2:	4b3b      	ldr	r3, [pc, #236]	@ (80142a0 <LoRaMacCryptoHandleJoinAccept+0x1a0>)
 80141b4:	681b      	ldr	r3, [r3, #0]
 80141b6:	689b      	ldr	r3, [r3, #8]
 80141b8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80141ba:	429a      	cmp	r2, r3
 80141bc:	d010      	beq.n	80141e0 <LoRaMacCryptoHandleJoinAccept+0xe0>
#endif /* USE_JOIN_NONCE_COUNTER_CHECK */
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 80141be:	4b38      	ldr	r3, [pc, #224]	@ (80142a0 <LoRaMacCryptoHandleJoinAccept+0x1a0>)
 80141c0:	681b      	ldr	r3, [r3, #0]
 80141c2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80141c4:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 80141c6:	7dfb      	ldrb	r3, [r7, #23]
 80141c8:	2100      	movs	r1, #0
 80141ca:	4618      	mov	r0, r3
 80141cc:	f000 f97a 	bl	80144c4 <LoRaMacCryptoDeriveMcRootKey>
 80141d0:	4603      	mov	r3, r0
 80141d2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80141d6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80141da:	2b00      	cmp	r3, #0
 80141dc:	d005      	beq.n	80141ea <LoRaMacCryptoHandleJoinAccept+0xea>
 80141de:	e001      	b.n	80141e4 <LoRaMacCryptoHandleJoinAccept+0xe4>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 80141e0:	2303      	movs	r3, #3
 80141e2:	e058      	b.n	8014296 <LoRaMacCryptoHandleJoinAccept+0x196>
    {
        return retval;
 80141e4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80141e8:	e055      	b.n	8014296 <LoRaMacCryptoHandleJoinAccept+0x196>
    }

    retval = LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY );
 80141ea:	2004      	movs	r0, #4
 80141ec:	f000 f994 	bl	8014518 <LoRaMacCryptoDeriveMcKEKey>
 80141f0:	4603      	mov	r3, r0
 80141f2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80141f6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80141fa:	2b00      	cmp	r3, #0
 80141fc:	d002      	beq.n	8014204 <LoRaMacCryptoHandleJoinAccept+0x104>
    {
        return retval;
 80141fe:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8014202:	e048      	b.n	8014296 <LoRaMacCryptoHandleJoinAccept+0x196>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	7a5b      	ldrb	r3, [r3, #9]
 8014208:	63fb      	str	r3, [r7, #60]	@ 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 801420a:	687b      	ldr	r3, [r7, #4]
 801420c:	7a9b      	ldrb	r3, [r3, #10]
 801420e:	021b      	lsls	r3, r3, #8
 8014210:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8014212:	4313      	orrs	r3, r2
 8014214:	63fb      	str	r3, [r7, #60]	@ 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 8014216:	687b      	ldr	r3, [r7, #4]
 8014218:	7adb      	ldrb	r3, [r3, #11]
 801421a:	041b      	lsls	r3, r3, #16
 801421c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801421e:	4313      	orrs	r3, r2
 8014220:	63fb      	str	r3, [r7, #60]	@ 0x3c

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 8014222:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8014226:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8014228:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801422a:	2003      	movs	r0, #3
 801422c:	f7ff fd0a 	bl	8013c44 <DeriveSessionKey10x>
 8014230:	4603      	mov	r3, r0
 8014232:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014236:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801423a:	2b00      	cmp	r3, #0
 801423c:	d002      	beq.n	8014244 <LoRaMacCryptoHandleJoinAccept+0x144>
        {
            return retval;
 801423e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8014242:	e028      	b.n	8014296 <LoRaMacCryptoHandleJoinAccept+0x196>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 8014244:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8014248:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801424a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801424c:	2002      	movs	r0, #2
 801424e:	f7ff fcf9 	bl	8013c44 <DeriveSessionKey10x>
 8014252:	4603      	mov	r3, r0
 8014254:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014258:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801425c:	2b00      	cmp	r3, #0
 801425e:	d002      	beq.n	8014266 <LoRaMacCryptoHandleJoinAccept+0x166>
        {
            return retval;
 8014260:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8014264:	e017      	b.n	8014296 <LoRaMacCryptoHandleJoinAccept+0x196>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 8014266:	4b0e      	ldr	r3, [pc, #56]	@ (80142a0 <LoRaMacCryptoHandleJoinAccept+0x1a0>)
 8014268:	681b      	ldr	r3, [r3, #0]
 801426a:	7dfa      	ldrb	r2, [r7, #23]
 801426c:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    RJcount0 = 0;
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    CryptoNvm->FCntList.FCntUp = 0;
 801426e:	4b0c      	ldr	r3, [pc, #48]	@ (80142a0 <LoRaMacCryptoHandleJoinAccept+0x1a0>)
 8014270:	681b      	ldr	r3, [r3, #0]
 8014272:	2200      	movs	r2, #0
 8014274:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 8014276:	4b0a      	ldr	r3, [pc, #40]	@ (80142a0 <LoRaMacCryptoHandleJoinAccept+0x1a0>)
 8014278:	681b      	ldr	r3, [r3, #0]
 801427a:	f04f 32ff 	mov.w	r2, #4294967295
 801427e:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8014280:	4b07      	ldr	r3, [pc, #28]	@ (80142a0 <LoRaMacCryptoHandleJoinAccept+0x1a0>)
 8014282:	681b      	ldr	r3, [r3, #0]
 8014284:	f04f 32ff 	mov.w	r2, #4294967295
 8014288:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 801428a:	4b05      	ldr	r3, [pc, #20]	@ (80142a0 <LoRaMacCryptoHandleJoinAccept+0x1a0>)
 801428c:	681b      	ldr	r3, [r3, #0]
 801428e:	f04f 32ff 	mov.w	r2, #4294967295
 8014292:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 8014294:	2300      	movs	r3, #0
}
 8014296:	4618      	mov	r0, r3
 8014298:	374c      	adds	r7, #76	@ 0x4c
 801429a:	46bd      	mov	sp, r7
 801429c:	bd90      	pop	{r4, r7, pc}
 801429e:	bf00      	nop
 80142a0:	20001be4 	.word	0x20001be4

080142a4 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 80142a4:	b590      	push	{r4, r7, lr}
 80142a6:	b08b      	sub	sp, #44	@ 0x2c
 80142a8:	af04      	add	r7, sp, #16
 80142aa:	60f8      	str	r0, [r7, #12]
 80142ac:	607b      	str	r3, [r7, #4]
 80142ae:	460b      	mov	r3, r1
 80142b0:	72fb      	strb	r3, [r7, #11]
 80142b2:	4613      	mov	r3, r2
 80142b4:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 80142b6:	2312      	movs	r3, #18
 80142b8:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 80142ba:	2303      	movs	r3, #3
 80142bc:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 80142be:	687b      	ldr	r3, [r7, #4]
 80142c0:	2b00      	cmp	r3, #0
 80142c2:	d101      	bne.n	80142c8 <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80142c4:	2309      	movs	r3, #9
 80142c6:	e05e      	b.n	8014386 <LoRaMacCryptoSecureMessage+0xe2>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 80142c8:	4b31      	ldr	r3, [pc, #196]	@ (8014390 <LoRaMacCryptoSecureMessage+0xec>)
 80142ca:	681b      	ldr	r3, [r3, #0]
 80142cc:	68db      	ldr	r3, [r3, #12]
 80142ce:	68fa      	ldr	r2, [r7, #12]
 80142d0:	429a      	cmp	r2, r3
 80142d2:	d201      	bcs.n	80142d8 <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 80142d4:	2306      	movs	r3, #6
 80142d6:	e056      	b.n	8014386 <LoRaMacCryptoSecureMessage+0xe2>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80142de:	2b00      	cmp	r3, #0
 80142e0:	d101      	bne.n	80142e6 <LoRaMacCryptoSecureMessage+0x42>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 80142e2:	2302      	movs	r3, #2
 80142e4:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 80142e6:	4b2a      	ldr	r3, [pc, #168]	@ (8014390 <LoRaMacCryptoSecureMessage+0xec>)
 80142e8:	681b      	ldr	r3, [r3, #0]
 80142ea:	68db      	ldr	r3, [r3, #12]
 80142ec:	68fa      	ldr	r2, [r7, #12]
 80142ee:	429a      	cmp	r2, r3
 80142f0:	d916      	bls.n	8014320 <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 80142f2:	687b      	ldr	r3, [r7, #4]
 80142f4:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80142f6:	687b      	ldr	r3, [r7, #4]
 80142f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80142fc:	b219      	sxth	r1, r3
 80142fe:	687b      	ldr	r3, [r7, #4]
 8014300:	689c      	ldr	r4, [r3, #8]
 8014302:	7dfa      	ldrb	r2, [r7, #23]
 8014304:	68fb      	ldr	r3, [r7, #12]
 8014306:	9301      	str	r3, [sp, #4]
 8014308:	2300      	movs	r3, #0
 801430a:	9300      	str	r3, [sp, #0]
 801430c:	4623      	mov	r3, r4
 801430e:	f7ff faa7 	bl	8013860 <PayloadEncrypt>
 8014312:	4603      	mov	r3, r0
 8014314:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014316:	7dbb      	ldrb	r3, [r7, #22]
 8014318:	2b00      	cmp	r3, #0
 801431a:	d001      	beq.n	8014320 <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 801431c:	7dbb      	ldrb	r3, [r7, #22]
 801431e:	e032      	b.n	8014386 <LoRaMacCryptoSecureMessage+0xe2>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8014320:	6878      	ldr	r0, [r7, #4]
 8014322:	f000 fb5a 	bl	80149da <LoRaMacSerializerData>
 8014326:	4603      	mov	r3, r0
 8014328:	2b00      	cmp	r3, #0
 801432a:	d001      	beq.n	8014330 <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 801432c:	2310      	movs	r3, #16
 801432e:	e02a      	b.n	8014386 <LoRaMacCryptoSecureMessage+0xe2>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8014330:	2302      	movs	r3, #2
 8014332:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8014334:	687b      	ldr	r3, [r7, #4]
 8014336:	6818      	ldr	r0, [r3, #0]
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	791b      	ldrb	r3, [r3, #4]
 801433c:	3b04      	subs	r3, #4
 801433e:	b299      	uxth	r1, r3
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	689b      	ldr	r3, [r3, #8]
 8014344:	687a      	ldr	r2, [r7, #4]
 8014346:	322c      	adds	r2, #44	@ 0x2c
 8014348:	7dfc      	ldrb	r4, [r7, #23]
 801434a:	9203      	str	r2, [sp, #12]
 801434c:	68fa      	ldr	r2, [r7, #12]
 801434e:	9202      	str	r2, [sp, #8]
 8014350:	9301      	str	r3, [sp, #4]
 8014352:	2300      	movs	r3, #0
 8014354:	9300      	str	r3, [sp, #0]
 8014356:	2300      	movs	r3, #0
 8014358:	4622      	mov	r2, r4
 801435a:	f7ff fb80 	bl	8013a5e <ComputeCmacB0>
 801435e:	4603      	mov	r3, r0
 8014360:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014362:	7dbb      	ldrb	r3, [r7, #22]
 8014364:	2b00      	cmp	r3, #0
 8014366:	d001      	beq.n	801436c <LoRaMacCryptoSecureMessage+0xc8>
        {
            return retval;
 8014368:	7dbb      	ldrb	r3, [r7, #22]
 801436a:	e00c      	b.n	8014386 <LoRaMacCryptoSecureMessage+0xe2>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 801436c:	6878      	ldr	r0, [r7, #4]
 801436e:	f000 fb34 	bl	80149da <LoRaMacSerializerData>
 8014372:	4603      	mov	r3, r0
 8014374:	2b00      	cmp	r3, #0
 8014376:	d001      	beq.n	801437c <LoRaMacCryptoSecureMessage+0xd8>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8014378:	2310      	movs	r3, #16
 801437a:	e004      	b.n	8014386 <LoRaMacCryptoSecureMessage+0xe2>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 801437c:	4b04      	ldr	r3, [pc, #16]	@ (8014390 <LoRaMacCryptoSecureMessage+0xec>)
 801437e:	681b      	ldr	r3, [r3, #0]
 8014380:	68fa      	ldr	r2, [r7, #12]
 8014382:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 8014384:	2300      	movs	r3, #0
}
 8014386:	4618      	mov	r0, r3
 8014388:	371c      	adds	r7, #28
 801438a:	46bd      	mov	sp, r7
 801438c:	bd90      	pop	{r4, r7, pc}
 801438e:	bf00      	nop
 8014390:	20001be4 	.word	0x20001be4

08014394 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 8014394:	b590      	push	{r4, r7, lr}
 8014396:	b08b      	sub	sp, #44	@ 0x2c
 8014398:	af04      	add	r7, sp, #16
 801439a:	60b9      	str	r1, [r7, #8]
 801439c:	607b      	str	r3, [r7, #4]
 801439e:	4603      	mov	r3, r0
 80143a0:	73fb      	strb	r3, [r7, #15]
 80143a2:	4613      	mov	r3, r2
 80143a4:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 80143a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80143a8:	2b00      	cmp	r3, #0
 80143aa:	d101      	bne.n	80143b0 <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80143ac:	2309      	movs	r3, #9
 80143ae:	e083      	b.n	80144b8 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 80143b0:	7bbb      	ldrb	r3, [r7, #14]
 80143b2:	6879      	ldr	r1, [r7, #4]
 80143b4:	4618      	mov	r0, r3
 80143b6:	f7ff fce1 	bl	8013d7c <CheckFCntDown>
 80143ba:	4603      	mov	r3, r0
 80143bc:	f083 0301 	eor.w	r3, r3, #1
 80143c0:	b2db      	uxtb	r3, r3
 80143c2:	2b00      	cmp	r3, #0
 80143c4:	d001      	beq.n	80143ca <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 80143c6:	2306      	movs	r3, #6
 80143c8:	e076      	b.n	80144b8 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 80143ca:	2312      	movs	r3, #18
 80143cc:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 80143ce:	2303      	movs	r3, #3
 80143d0:	75fb      	strb	r3, [r7, #23]
    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 80143d2:	2302      	movs	r3, #2
 80143d4:	753b      	strb	r3, [r7, #20]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    /* ST_WORKAROUND_END */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 80143d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80143d8:	f000 f98b 	bl	80146f2 <LoRaMacParserData>
 80143dc:	4603      	mov	r3, r0
 80143de:	2b00      	cmp	r3, #0
 80143e0:	d001      	beq.n	80143e6 <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 80143e2:	230f      	movs	r3, #15
 80143e4:	e068      	b.n	80144b8 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 80143e6:	f107 0210 	add.w	r2, r7, #16
 80143ea:	7bfb      	ldrb	r3, [r7, #15]
 80143ec:	4611      	mov	r1, r2
 80143ee:	4618      	mov	r0, r3
 80143f0:	f7ff fc02 	bl	8013bf8 <GetKeyAddrItem>
 80143f4:	4603      	mov	r3, r0
 80143f6:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80143f8:	7d7b      	ldrb	r3, [r7, #21]
 80143fa:	2b00      	cmp	r3, #0
 80143fc:	d001      	beq.n	8014402 <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 80143fe:	7d7b      	ldrb	r3, [r7, #21]
 8014400:	e05a      	b.n	80144b8 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 8014402:	693b      	ldr	r3, [r7, #16]
 8014404:	785b      	ldrb	r3, [r3, #1]
 8014406:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 8014408:	693b      	ldr	r3, [r7, #16]
 801440a:	789b      	ldrb	r3, [r3, #2]
 801440c:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 801440e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014410:	689b      	ldr	r3, [r3, #8]
 8014412:	68ba      	ldr	r2, [r7, #8]
 8014414:	429a      	cmp	r2, r3
 8014416:	d001      	beq.n	801441c <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 8014418:	2302      	movs	r3, #2
 801441a:	e04d      	b.n	80144b8 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 801441c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801441e:	7b1b      	ldrb	r3, [r3, #12]
 8014420:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8014424:	b2db      	uxtb	r3, r3
 8014426:	2b00      	cmp	r3, #0
 8014428:	bf14      	ite	ne
 801442a:	2301      	movne	r3, #1
 801442c:	2300      	moveq	r3, #0
 801442e:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8014430:	4b23      	ldr	r3, [pc, #140]	@ (80144c0 <LoRaMacCryptoUnsecureMessage+0x12c>)
 8014432:	681b      	ldr	r3, [r3, #0]
 8014434:	789b      	ldrb	r3, [r3, #2]
 8014436:	2b00      	cmp	r3, #0
 8014438:	d101      	bne.n	801443e <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 801443a:	2300      	movs	r3, #0
 801443c:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 801443e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014440:	6818      	ldr	r0, [r3, #0]
 8014442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014444:	791b      	ldrb	r3, [r3, #4]
 8014446:	3b04      	subs	r3, #4
 8014448:	b299      	uxth	r1, r3
 801444a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801444c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801444e:	7dbc      	ldrb	r4, [r7, #22]
 8014450:	7d3a      	ldrb	r2, [r7, #20]
 8014452:	9303      	str	r3, [sp, #12]
 8014454:	687b      	ldr	r3, [r7, #4]
 8014456:	9302      	str	r3, [sp, #8]
 8014458:	68bb      	ldr	r3, [r7, #8]
 801445a:	9301      	str	r3, [sp, #4]
 801445c:	2301      	movs	r3, #1
 801445e:	9300      	str	r3, [sp, #0]
 8014460:	4623      	mov	r3, r4
 8014462:	f7ff fb3a 	bl	8013ada <VerifyCmacB0>
 8014466:	4603      	mov	r3, r0
 8014468:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 801446a:	7d7b      	ldrb	r3, [r7, #21]
 801446c:	2b00      	cmp	r3, #0
 801446e:	d001      	beq.n	8014474 <LoRaMacCryptoUnsecureMessage+0xe0>
    {
        return retval;
 8014470:	7d7b      	ldrb	r3, [r7, #21]
 8014472:	e021      	b.n	80144b8 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 8014474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014476:	f893 3020 	ldrb.w	r3, [r3, #32]
 801447a:	2b00      	cmp	r3, #0
 801447c:	d101      	bne.n	8014482 <LoRaMacCryptoUnsecureMessage+0xee>
        // Use network session encryption key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 801447e:	2302      	movs	r3, #2
 8014480:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 8014482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014484:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8014486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014488:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801448c:	b219      	sxth	r1, r3
 801448e:	7dfa      	ldrb	r2, [r7, #23]
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	9301      	str	r3, [sp, #4]
 8014494:	2301      	movs	r3, #1
 8014496:	9300      	str	r3, [sp, #0]
 8014498:	68bb      	ldr	r3, [r7, #8]
 801449a:	f7ff f9e1 	bl	8013860 <PayloadEncrypt>
 801449e:	4603      	mov	r3, r0
 80144a0:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80144a2:	7d7b      	ldrb	r3, [r7, #21]
 80144a4:	2b00      	cmp	r3, #0
 80144a6:	d001      	beq.n	80144ac <LoRaMacCryptoUnsecureMessage+0x118>
    {
        return retval;
 80144a8:	7d7b      	ldrb	r3, [r7, #21]
 80144aa:	e005      	b.n	80144b8 <LoRaMacCryptoUnsecureMessage+0x124>
            }
        }
    }
#endif

    UpdateFCntDown( fCntID, fCntDown );
 80144ac:	7bbb      	ldrb	r3, [r7, #14]
 80144ae:	6879      	ldr	r1, [r7, #4]
 80144b0:	4618      	mov	r0, r3
 80144b2:	f7ff fc87 	bl	8013dc4 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 80144b6:	2300      	movs	r3, #0
}
 80144b8:	4618      	mov	r0, r3
 80144ba:	371c      	adds	r7, #28
 80144bc:	46bd      	mov	sp, r7
 80144be:	bd90      	pop	{r4, r7, pc}
 80144c0:	20001be4 	.word	0x20001be4

080144c4 <LoRaMacCryptoDeriveMcRootKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 80144c4:	b580      	push	{r7, lr}
 80144c6:	b086      	sub	sp, #24
 80144c8:	af00      	add	r7, sp, #0
 80144ca:	4603      	mov	r3, r0
 80144cc:	460a      	mov	r2, r1
 80144ce:	71fb      	strb	r3, [r7, #7]
 80144d0:	4613      	mov	r3, r2
 80144d2:	71bb      	strb	r3, [r7, #6]
    // Prevent other keys than AppKey
    if( keyID != APP_KEY )
 80144d4:	79bb      	ldrb	r3, [r7, #6]
 80144d6:	2b00      	cmp	r3, #0
 80144d8:	d001      	beq.n	80144de <LoRaMacCryptoDeriveMcRootKey+0x1a>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 80144da:	230a      	movs	r3, #10
 80144dc:	e018      	b.n	8014510 <LoRaMacCryptoDeriveMcRootKey+0x4c>
    }
    uint8_t compBase[16] = { 0 };
 80144de:	f107 0308 	add.w	r3, r7, #8
 80144e2:	2200      	movs	r2, #0
 80144e4:	601a      	str	r2, [r3, #0]
 80144e6:	605a      	str	r2, [r3, #4]
 80144e8:	609a      	str	r2, [r3, #8]
 80144ea:	60da      	str	r2, [r3, #12]

    if( versionMinor == 1 )
 80144ec:	79fb      	ldrb	r3, [r7, #7]
 80144ee:	2b01      	cmp	r3, #1
 80144f0:	d101      	bne.n	80144f6 <LoRaMacCryptoDeriveMcRootKey+0x32>
    {
        compBase[0] = 0x20;
 80144f2:	2320      	movs	r3, #32
 80144f4:	723b      	strb	r3, [r7, #8]
    }
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 80144f6:	79b9      	ldrb	r1, [r7, #6]
 80144f8:	f107 0308 	add.w	r3, r7, #8
 80144fc:	2204      	movs	r2, #4
 80144fe:	4618      	mov	r0, r3
 8014500:	f7f7 ff4e 	bl	800c3a0 <SecureElementDeriveAndStoreKey>
 8014504:	4603      	mov	r3, r0
 8014506:	2b00      	cmp	r3, #0
 8014508:	d001      	beq.n	801450e <LoRaMacCryptoDeriveMcRootKey+0x4a>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801450a:	230e      	movs	r3, #14
 801450c:	e000      	b.n	8014510 <LoRaMacCryptoDeriveMcRootKey+0x4c>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 801450e:	2300      	movs	r3, #0
}
 8014510:	4618      	mov	r0, r3
 8014512:	3718      	adds	r7, #24
 8014514:	46bd      	mov	sp, r7
 8014516:	bd80      	pop	{r7, pc}

08014518 <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
 8014518:	b580      	push	{r7, lr}
 801451a:	b086      	sub	sp, #24
 801451c:	af00      	add	r7, sp, #0
 801451e:	4603      	mov	r3, r0
 8014520:	71fb      	strb	r3, [r7, #7]
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 8014522:	79fb      	ldrb	r3, [r7, #7]
 8014524:	2b04      	cmp	r3, #4
 8014526:	d001      	beq.n	801452c <LoRaMacCryptoDeriveMcKEKey+0x14>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8014528:	230a      	movs	r3, #10
 801452a:	e013      	b.n	8014554 <LoRaMacCryptoDeriveMcKEKey+0x3c>
    }
    uint8_t compBase[16] = { 0 };
 801452c:	f107 0308 	add.w	r3, r7, #8
 8014530:	2200      	movs	r2, #0
 8014532:	601a      	str	r2, [r3, #0]
 8014534:	605a      	str	r2, [r3, #4]
 8014536:	609a      	str	r2, [r3, #8]
 8014538:	60da      	str	r2, [r3, #12]

    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 801453a:	79f9      	ldrb	r1, [r7, #7]
 801453c:	f107 0308 	add.w	r3, r7, #8
 8014540:	227f      	movs	r2, #127	@ 0x7f
 8014542:	4618      	mov	r0, r3
 8014544:	f7f7 ff2c 	bl	800c3a0 <SecureElementDeriveAndStoreKey>
 8014548:	4603      	mov	r3, r0
 801454a:	2b00      	cmp	r3, #0
 801454c:	d001      	beq.n	8014552 <LoRaMacCryptoDeriveMcKEKey+0x3a>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801454e:	230e      	movs	r3, #14
 8014550:	e000      	b.n	8014554 <LoRaMacCryptoDeriveMcKEKey+0x3c>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8014552:	2300      	movs	r3, #0
}
 8014554:	4618      	mov	r0, r3
 8014556:	3718      	adds	r7, #24
 8014558:	46bd      	mov	sp, r7
 801455a:	bd80      	pop	{r7, pc}

0801455c <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 801455c:	b580      	push	{r7, lr}
 801455e:	b084      	sub	sp, #16
 8014560:	af00      	add	r7, sp, #0
 8014562:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8014564:	687b      	ldr	r3, [r7, #4]
 8014566:	2b00      	cmp	r3, #0
 8014568:	d003      	beq.n	8014572 <LoRaMacParserJoinAccept+0x16>
 801456a:	687b      	ldr	r3, [r7, #4]
 801456c:	681b      	ldr	r3, [r3, #0]
 801456e:	2b00      	cmp	r3, #0
 8014570:	d101      	bne.n	8014576 <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8014572:	2302      	movs	r3, #2
 8014574:	e0b9      	b.n	80146ea <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 8014576:	2300      	movs	r3, #0
 8014578:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 801457a:	687b      	ldr	r3, [r7, #4]
 801457c:	681a      	ldr	r2, [r3, #0]
 801457e:	89fb      	ldrh	r3, [r7, #14]
 8014580:	1c59      	adds	r1, r3, #1
 8014582:	81f9      	strh	r1, [r7, #14]
 8014584:	4413      	add	r3, r2
 8014586:	781a      	ldrb	r2, [r3, #0]
 8014588:	687b      	ldr	r3, [r7, #4]
 801458a:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 801458c:	687b      	ldr	r3, [r7, #4]
 801458e:	1d98      	adds	r0, r3, #6
 8014590:	687b      	ldr	r3, [r7, #4]
 8014592:	681a      	ldr	r2, [r3, #0]
 8014594:	89fb      	ldrh	r3, [r7, #14]
 8014596:	4413      	add	r3, r2
 8014598:	2203      	movs	r2, #3
 801459a:	4619      	mov	r1, r3
 801459c:	f002 fdc3 	bl	8017126 <memcpy1>
    bufItr = bufItr + 3;
 80145a0:	89fb      	ldrh	r3, [r7, #14]
 80145a2:	3303      	adds	r3, #3
 80145a4:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 80145a6:	687b      	ldr	r3, [r7, #4]
 80145a8:	f103 0009 	add.w	r0, r3, #9
 80145ac:	687b      	ldr	r3, [r7, #4]
 80145ae:	681a      	ldr	r2, [r3, #0]
 80145b0:	89fb      	ldrh	r3, [r7, #14]
 80145b2:	4413      	add	r3, r2
 80145b4:	2203      	movs	r2, #3
 80145b6:	4619      	mov	r1, r3
 80145b8:	f002 fdb5 	bl	8017126 <memcpy1>
    bufItr = bufItr + 3;
 80145bc:	89fb      	ldrh	r3, [r7, #14]
 80145be:	3303      	adds	r3, #3
 80145c0:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 80145c2:	687b      	ldr	r3, [r7, #4]
 80145c4:	681a      	ldr	r2, [r3, #0]
 80145c6:	89fb      	ldrh	r3, [r7, #14]
 80145c8:	1c59      	adds	r1, r3, #1
 80145ca:	81f9      	strh	r1, [r7, #14]
 80145cc:	4413      	add	r3, r2
 80145ce:	781b      	ldrb	r3, [r3, #0]
 80145d0:	461a      	mov	r2, r3
 80145d2:	687b      	ldr	r3, [r7, #4]
 80145d4:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 80145d6:	687b      	ldr	r3, [r7, #4]
 80145d8:	681a      	ldr	r2, [r3, #0]
 80145da:	89fb      	ldrh	r3, [r7, #14]
 80145dc:	1c59      	adds	r1, r3, #1
 80145de:	81f9      	strh	r1, [r7, #14]
 80145e0:	4413      	add	r3, r2
 80145e2:	781b      	ldrb	r3, [r3, #0]
 80145e4:	021a      	lsls	r2, r3, #8
 80145e6:	687b      	ldr	r3, [r7, #4]
 80145e8:	68db      	ldr	r3, [r3, #12]
 80145ea:	431a      	orrs	r2, r3
 80145ec:	687b      	ldr	r3, [r7, #4]
 80145ee:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 80145f0:	687b      	ldr	r3, [r7, #4]
 80145f2:	681a      	ldr	r2, [r3, #0]
 80145f4:	89fb      	ldrh	r3, [r7, #14]
 80145f6:	1c59      	adds	r1, r3, #1
 80145f8:	81f9      	strh	r1, [r7, #14]
 80145fa:	4413      	add	r3, r2
 80145fc:	781b      	ldrb	r3, [r3, #0]
 80145fe:	041a      	lsls	r2, r3, #16
 8014600:	687b      	ldr	r3, [r7, #4]
 8014602:	68db      	ldr	r3, [r3, #12]
 8014604:	431a      	orrs	r2, r3
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	681a      	ldr	r2, [r3, #0]
 801460e:	89fb      	ldrh	r3, [r7, #14]
 8014610:	1c59      	adds	r1, r3, #1
 8014612:	81f9      	strh	r1, [r7, #14]
 8014614:	4413      	add	r3, r2
 8014616:	781b      	ldrb	r3, [r3, #0]
 8014618:	061a      	lsls	r2, r3, #24
 801461a:	687b      	ldr	r3, [r7, #4]
 801461c:	68db      	ldr	r3, [r3, #12]
 801461e:	431a      	orrs	r2, r3
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 8014624:	687b      	ldr	r3, [r7, #4]
 8014626:	681a      	ldr	r2, [r3, #0]
 8014628:	89fb      	ldrh	r3, [r7, #14]
 801462a:	1c59      	adds	r1, r3, #1
 801462c:	81f9      	strh	r1, [r7, #14]
 801462e:	4413      	add	r3, r2
 8014630:	781a      	ldrb	r2, [r3, #0]
 8014632:	687b      	ldr	r3, [r7, #4]
 8014634:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 8014636:	687b      	ldr	r3, [r7, #4]
 8014638:	681a      	ldr	r2, [r3, #0]
 801463a:	89fb      	ldrh	r3, [r7, #14]
 801463c:	1c59      	adds	r1, r3, #1
 801463e:	81f9      	strh	r1, [r7, #14]
 8014640:	4413      	add	r3, r2
 8014642:	781a      	ldrb	r2, [r3, #0]
 8014644:	687b      	ldr	r3, [r7, #4]
 8014646:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 8014648:	687b      	ldr	r3, [r7, #4]
 801464a:	791b      	ldrb	r3, [r3, #4]
 801464c:	1f1a      	subs	r2, r3, #4
 801464e:	89fb      	ldrh	r3, [r7, #14]
 8014650:	1ad3      	subs	r3, r2, r3
 8014652:	2b10      	cmp	r3, #16
 8014654:	d10e      	bne.n	8014674 <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 8014656:	687b      	ldr	r3, [r7, #4]
 8014658:	f103 0012 	add.w	r0, r3, #18
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	681a      	ldr	r2, [r3, #0]
 8014660:	89fb      	ldrh	r3, [r7, #14]
 8014662:	4413      	add	r3, r2
 8014664:	2210      	movs	r2, #16
 8014666:	4619      	mov	r1, r3
 8014668:	f002 fd5d 	bl	8017126 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 801466c:	89fb      	ldrh	r3, [r7, #14]
 801466e:	3310      	adds	r3, #16
 8014670:	81fb      	strh	r3, [r7, #14]
 8014672:	e008      	b.n	8014686 <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 8014674:	687b      	ldr	r3, [r7, #4]
 8014676:	791b      	ldrb	r3, [r3, #4]
 8014678:	1f1a      	subs	r2, r3, #4
 801467a:	89fb      	ldrh	r3, [r7, #14]
 801467c:	1ad3      	subs	r3, r2, r3
 801467e:	2b00      	cmp	r3, #0
 8014680:	dd01      	ble.n	8014686 <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 8014682:	2301      	movs	r3, #1
 8014684:	e031      	b.n	80146ea <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 8014686:	687b      	ldr	r3, [r7, #4]
 8014688:	681a      	ldr	r2, [r3, #0]
 801468a:	89fb      	ldrh	r3, [r7, #14]
 801468c:	1c59      	adds	r1, r3, #1
 801468e:	81f9      	strh	r1, [r7, #14]
 8014690:	4413      	add	r3, r2
 8014692:	781b      	ldrb	r3, [r3, #0]
 8014694:	461a      	mov	r2, r3
 8014696:	687b      	ldr	r3, [r7, #4]
 8014698:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 801469a:	687b      	ldr	r3, [r7, #4]
 801469c:	681a      	ldr	r2, [r3, #0]
 801469e:	89fb      	ldrh	r3, [r7, #14]
 80146a0:	1c59      	adds	r1, r3, #1
 80146a2:	81f9      	strh	r1, [r7, #14]
 80146a4:	4413      	add	r3, r2
 80146a6:	781b      	ldrb	r3, [r3, #0]
 80146a8:	021a      	lsls	r2, r3, #8
 80146aa:	687b      	ldr	r3, [r7, #4]
 80146ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80146ae:	431a      	orrs	r2, r3
 80146b0:	687b      	ldr	r3, [r7, #4]
 80146b2:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 80146b4:	687b      	ldr	r3, [r7, #4]
 80146b6:	681a      	ldr	r2, [r3, #0]
 80146b8:	89fb      	ldrh	r3, [r7, #14]
 80146ba:	1c59      	adds	r1, r3, #1
 80146bc:	81f9      	strh	r1, [r7, #14]
 80146be:	4413      	add	r3, r2
 80146c0:	781b      	ldrb	r3, [r3, #0]
 80146c2:	041a      	lsls	r2, r3, #16
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80146c8:	431a      	orrs	r2, r3
 80146ca:	687b      	ldr	r3, [r7, #4]
 80146cc:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 80146ce:	687b      	ldr	r3, [r7, #4]
 80146d0:	681a      	ldr	r2, [r3, #0]
 80146d2:	89fb      	ldrh	r3, [r7, #14]
 80146d4:	1c59      	adds	r1, r3, #1
 80146d6:	81f9      	strh	r1, [r7, #14]
 80146d8:	4413      	add	r3, r2
 80146da:	781b      	ldrb	r3, [r3, #0]
 80146dc:	061a      	lsls	r2, r3, #24
 80146de:	687b      	ldr	r3, [r7, #4]
 80146e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80146e2:	431a      	orrs	r2, r3
 80146e4:	687b      	ldr	r3, [r7, #4]
 80146e6:	625a      	str	r2, [r3, #36]	@ 0x24

    return LORAMAC_PARSER_SUCCESS;
 80146e8:	2300      	movs	r3, #0
}
 80146ea:	4618      	mov	r0, r3
 80146ec:	3710      	adds	r7, #16
 80146ee:	46bd      	mov	sp, r7
 80146f0:	bd80      	pop	{r7, pc}

080146f2 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 80146f2:	b580      	push	{r7, lr}
 80146f4:	b084      	sub	sp, #16
 80146f6:	af00      	add	r7, sp, #0
 80146f8:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80146fa:	687b      	ldr	r3, [r7, #4]
 80146fc:	2b00      	cmp	r3, #0
 80146fe:	d003      	beq.n	8014708 <LoRaMacParserData+0x16>
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	681b      	ldr	r3, [r3, #0]
 8014704:	2b00      	cmp	r3, #0
 8014706:	d101      	bne.n	801470c <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8014708:	2302      	movs	r3, #2
 801470a:	e0e0      	b.n	80148ce <LoRaMacParserData+0x1dc>
    }

    uint16_t bufItr = 0;
 801470c:	2300      	movs	r3, #0
 801470e:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8014710:	687b      	ldr	r3, [r7, #4]
 8014712:	681a      	ldr	r2, [r3, #0]
 8014714:	89fb      	ldrh	r3, [r7, #14]
 8014716:	1c59      	adds	r1, r3, #1
 8014718:	81f9      	strh	r1, [r7, #14]
 801471a:	4413      	add	r3, r2
 801471c:	781a      	ldrb	r2, [r3, #0]
 801471e:	687b      	ldr	r3, [r7, #4]
 8014720:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 8014722:	687b      	ldr	r3, [r7, #4]
 8014724:	681a      	ldr	r2, [r3, #0]
 8014726:	89fb      	ldrh	r3, [r7, #14]
 8014728:	1c59      	adds	r1, r3, #1
 801472a:	81f9      	strh	r1, [r7, #14]
 801472c:	4413      	add	r3, r2
 801472e:	781b      	ldrb	r3, [r3, #0]
 8014730:	461a      	mov	r2, r3
 8014732:	687b      	ldr	r3, [r7, #4]
 8014734:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8014736:	687b      	ldr	r3, [r7, #4]
 8014738:	681a      	ldr	r2, [r3, #0]
 801473a:	89fb      	ldrh	r3, [r7, #14]
 801473c:	1c59      	adds	r1, r3, #1
 801473e:	81f9      	strh	r1, [r7, #14]
 8014740:	4413      	add	r3, r2
 8014742:	781b      	ldrb	r3, [r3, #0]
 8014744:	021a      	lsls	r2, r3, #8
 8014746:	687b      	ldr	r3, [r7, #4]
 8014748:	689b      	ldr	r3, [r3, #8]
 801474a:	431a      	orrs	r2, r3
 801474c:	687b      	ldr	r3, [r7, #4]
 801474e:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8014750:	687b      	ldr	r3, [r7, #4]
 8014752:	681a      	ldr	r2, [r3, #0]
 8014754:	89fb      	ldrh	r3, [r7, #14]
 8014756:	1c59      	adds	r1, r3, #1
 8014758:	81f9      	strh	r1, [r7, #14]
 801475a:	4413      	add	r3, r2
 801475c:	781b      	ldrb	r3, [r3, #0]
 801475e:	041a      	lsls	r2, r3, #16
 8014760:	687b      	ldr	r3, [r7, #4]
 8014762:	689b      	ldr	r3, [r3, #8]
 8014764:	431a      	orrs	r2, r3
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 801476a:	687b      	ldr	r3, [r7, #4]
 801476c:	681a      	ldr	r2, [r3, #0]
 801476e:	89fb      	ldrh	r3, [r7, #14]
 8014770:	1c59      	adds	r1, r3, #1
 8014772:	81f9      	strh	r1, [r7, #14]
 8014774:	4413      	add	r3, r2
 8014776:	781b      	ldrb	r3, [r3, #0]
 8014778:	061a      	lsls	r2, r3, #24
 801477a:	687b      	ldr	r3, [r7, #4]
 801477c:	689b      	ldr	r3, [r3, #8]
 801477e:	431a      	orrs	r2, r3
 8014780:	687b      	ldr	r3, [r7, #4]
 8014782:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 8014784:	687b      	ldr	r3, [r7, #4]
 8014786:	681a      	ldr	r2, [r3, #0]
 8014788:	89fb      	ldrh	r3, [r7, #14]
 801478a:	1c59      	adds	r1, r3, #1
 801478c:	81f9      	strh	r1, [r7, #14]
 801478e:	4413      	add	r3, r2
 8014790:	781a      	ldrb	r2, [r3, #0]
 8014792:	687b      	ldr	r3, [r7, #4]
 8014794:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 8014796:	687b      	ldr	r3, [r7, #4]
 8014798:	681a      	ldr	r2, [r3, #0]
 801479a:	89fb      	ldrh	r3, [r7, #14]
 801479c:	1c59      	adds	r1, r3, #1
 801479e:	81f9      	strh	r1, [r7, #14]
 80147a0:	4413      	add	r3, r2
 80147a2:	781b      	ldrb	r3, [r3, #0]
 80147a4:	461a      	mov	r2, r3
 80147a6:	687b      	ldr	r3, [r7, #4]
 80147a8:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 80147aa:	687b      	ldr	r3, [r7, #4]
 80147ac:	681a      	ldr	r2, [r3, #0]
 80147ae:	89fb      	ldrh	r3, [r7, #14]
 80147b0:	1c59      	adds	r1, r3, #1
 80147b2:	81f9      	strh	r1, [r7, #14]
 80147b4:	4413      	add	r3, r2
 80147b6:	781b      	ldrb	r3, [r3, #0]
 80147b8:	0219      	lsls	r1, r3, #8
 80147ba:	687b      	ldr	r3, [r7, #4]
 80147bc:	89db      	ldrh	r3, [r3, #14]
 80147be:	b21a      	sxth	r2, r3
 80147c0:	b20b      	sxth	r3, r1
 80147c2:	4313      	orrs	r3, r2
 80147c4:	b21b      	sxth	r3, r3
 80147c6:	b29a      	uxth	r2, r3
 80147c8:	687b      	ldr	r3, [r7, #4]
 80147ca:	81da      	strh	r2, [r3, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 80147cc:	687b      	ldr	r3, [r7, #4]
 80147ce:	f103 0010 	add.w	r0, r3, #16
 80147d2:	687b      	ldr	r3, [r7, #4]
 80147d4:	681a      	ldr	r2, [r3, #0]
 80147d6:	89fb      	ldrh	r3, [r7, #14]
 80147d8:	18d1      	adds	r1, r2, r3
 80147da:	687b      	ldr	r3, [r7, #4]
 80147dc:	7b1b      	ldrb	r3, [r3, #12]
 80147de:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80147e2:	b2db      	uxtb	r3, r3
 80147e4:	461a      	mov	r2, r3
 80147e6:	f002 fc9e 	bl	8017126 <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80147ea:	687b      	ldr	r3, [r7, #4]
 80147ec:	7b1b      	ldrb	r3, [r3, #12]
 80147ee:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80147f2:	b2db      	uxtb	r3, r3
 80147f4:	461a      	mov	r2, r3
 80147f6:	89fb      	ldrh	r3, [r7, #14]
 80147f8:	4413      	add	r3, r2
 80147fa:	81fb      	strh	r3, [r7, #14]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 80147fc:	687b      	ldr	r3, [r7, #4]
 80147fe:	2200      	movs	r2, #0
 8014800:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 8014804:	687b      	ldr	r3, [r7, #4]
 8014806:	2200      	movs	r2, #0
 8014808:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 801480c:	687b      	ldr	r3, [r7, #4]
 801480e:	791b      	ldrb	r3, [r3, #4]
 8014810:	461a      	mov	r2, r3
 8014812:	89fb      	ldrh	r3, [r7, #14]
 8014814:	1ad3      	subs	r3, r2, r3
 8014816:	2b04      	cmp	r3, #4
 8014818:	dd27      	ble.n	801486a <LoRaMacParserData+0x178>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 801481a:	687b      	ldr	r3, [r7, #4]
 801481c:	681a      	ldr	r2, [r3, #0]
 801481e:	89fb      	ldrh	r3, [r7, #14]
 8014820:	1c59      	adds	r1, r3, #1
 8014822:	81f9      	strh	r1, [r7, #14]
 8014824:	4413      	add	r3, r2
 8014826:	781a      	ldrb	r2, [r3, #0]
 8014828:	687b      	ldr	r3, [r7, #4]
 801482a:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 801482e:	687b      	ldr	r3, [r7, #4]
 8014830:	791a      	ldrb	r2, [r3, #4]
 8014832:	89fb      	ldrh	r3, [r7, #14]
 8014834:	b2db      	uxtb	r3, r3
 8014836:	1ad3      	subs	r3, r2, r3
 8014838:	b2db      	uxtb	r3, r3
 801483a:	3b04      	subs	r3, #4
 801483c:	b2da      	uxtb	r2, r3
 801483e:	687b      	ldr	r3, [r7, #4]
 8014840:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8014848:	687b      	ldr	r3, [r7, #4]
 801484a:	681a      	ldr	r2, [r3, #0]
 801484c:	89fb      	ldrh	r3, [r7, #14]
 801484e:	18d1      	adds	r1, r2, r3
 8014850:	687b      	ldr	r3, [r7, #4]
 8014852:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014856:	461a      	mov	r2, r3
 8014858:	f002 fc65 	bl	8017126 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 801485c:	687b      	ldr	r3, [r7, #4]
 801485e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014862:	461a      	mov	r2, r3
 8014864:	89fb      	ldrh	r3, [r7, #14]
 8014866:	4413      	add	r3, r2
 8014868:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 801486a:	687b      	ldr	r3, [r7, #4]
 801486c:	681a      	ldr	r2, [r3, #0]
 801486e:	687b      	ldr	r3, [r7, #4]
 8014870:	791b      	ldrb	r3, [r3, #4]
 8014872:	3b04      	subs	r3, #4
 8014874:	4413      	add	r3, r2
 8014876:	781b      	ldrb	r3, [r3, #0]
 8014878:	461a      	mov	r2, r3
 801487a:	687b      	ldr	r3, [r7, #4]
 801487c:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 801487e:	687b      	ldr	r3, [r7, #4]
 8014880:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014882:	687b      	ldr	r3, [r7, #4]
 8014884:	6819      	ldr	r1, [r3, #0]
 8014886:	687b      	ldr	r3, [r7, #4]
 8014888:	791b      	ldrb	r3, [r3, #4]
 801488a:	3b03      	subs	r3, #3
 801488c:	440b      	add	r3, r1
 801488e:	781b      	ldrb	r3, [r3, #0]
 8014890:	021b      	lsls	r3, r3, #8
 8014892:	431a      	orrs	r2, r3
 8014894:	687b      	ldr	r3, [r7, #4]
 8014896:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 8014898:	687b      	ldr	r3, [r7, #4]
 801489a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	6819      	ldr	r1, [r3, #0]
 80148a0:	687b      	ldr	r3, [r7, #4]
 80148a2:	791b      	ldrb	r3, [r3, #4]
 80148a4:	3b02      	subs	r3, #2
 80148a6:	440b      	add	r3, r1
 80148a8:	781b      	ldrb	r3, [r3, #0]
 80148aa:	041b      	lsls	r3, r3, #16
 80148ac:	431a      	orrs	r2, r3
 80148ae:	687b      	ldr	r3, [r7, #4]
 80148b0:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 80148b2:	687b      	ldr	r3, [r7, #4]
 80148b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80148b6:	687b      	ldr	r3, [r7, #4]
 80148b8:	6819      	ldr	r1, [r3, #0]
 80148ba:	687b      	ldr	r3, [r7, #4]
 80148bc:	791b      	ldrb	r3, [r3, #4]
 80148be:	3b01      	subs	r3, #1
 80148c0:	440b      	add	r3, r1
 80148c2:	781b      	ldrb	r3, [r3, #0]
 80148c4:	061b      	lsls	r3, r3, #24
 80148c6:	431a      	orrs	r2, r3
 80148c8:	687b      	ldr	r3, [r7, #4]
 80148ca:	62da      	str	r2, [r3, #44]	@ 0x2c

    return LORAMAC_PARSER_SUCCESS;
 80148cc:	2300      	movs	r3, #0
}
 80148ce:	4618      	mov	r0, r3
 80148d0:	3710      	adds	r7, #16
 80148d2:	46bd      	mov	sp, r7
 80148d4:	bd80      	pop	{r7, pc}

080148d6 <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 80148d6:	b580      	push	{r7, lr}
 80148d8:	b084      	sub	sp, #16
 80148da:	af00      	add	r7, sp, #0
 80148dc:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80148de:	687b      	ldr	r3, [r7, #4]
 80148e0:	2b00      	cmp	r3, #0
 80148e2:	d003      	beq.n	80148ec <LoRaMacSerializerJoinRequest+0x16>
 80148e4:	687b      	ldr	r3, [r7, #4]
 80148e6:	681b      	ldr	r3, [r3, #0]
 80148e8:	2b00      	cmp	r3, #0
 80148ea:	d101      	bne.n	80148f0 <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 80148ec:	2301      	movs	r3, #1
 80148ee:	e070      	b.n	80149d2 <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 80148f0:	2300      	movs	r3, #0
 80148f2:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 80148f4:	687b      	ldr	r3, [r7, #4]
 80148f6:	791b      	ldrb	r3, [r3, #4]
 80148f8:	2b16      	cmp	r3, #22
 80148fa:	d801      	bhi.n	8014900 <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 80148fc:	2302      	movs	r3, #2
 80148fe:	e068      	b.n	80149d2 <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8014900:	687b      	ldr	r3, [r7, #4]
 8014902:	681a      	ldr	r2, [r3, #0]
 8014904:	89fb      	ldrh	r3, [r7, #14]
 8014906:	1c59      	adds	r1, r3, #1
 8014908:	81f9      	strh	r1, [r7, #14]
 801490a:	4413      	add	r3, r2
 801490c:	687a      	ldr	r2, [r7, #4]
 801490e:	7952      	ldrb	r2, [r2, #5]
 8014910:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8014912:	687b      	ldr	r3, [r7, #4]
 8014914:	681a      	ldr	r2, [r3, #0]
 8014916:	89fb      	ldrh	r3, [r7, #14]
 8014918:	18d0      	adds	r0, r2, r3
 801491a:	687b      	ldr	r3, [r7, #4]
 801491c:	3306      	adds	r3, #6
 801491e:	2208      	movs	r2, #8
 8014920:	4619      	mov	r1, r3
 8014922:	f002 fc1b 	bl	801715c <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 8014926:	89fb      	ldrh	r3, [r7, #14]
 8014928:	3308      	adds	r3, #8
 801492a:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 801492c:	687b      	ldr	r3, [r7, #4]
 801492e:	681a      	ldr	r2, [r3, #0]
 8014930:	89fb      	ldrh	r3, [r7, #14]
 8014932:	18d0      	adds	r0, r2, r3
 8014934:	687b      	ldr	r3, [r7, #4]
 8014936:	330e      	adds	r3, #14
 8014938:	2208      	movs	r2, #8
 801493a:	4619      	mov	r1, r3
 801493c:	f002 fc0e 	bl	801715c <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 8014940:	89fb      	ldrh	r3, [r7, #14]
 8014942:	3308      	adds	r3, #8
 8014944:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 8014946:	687b      	ldr	r3, [r7, #4]
 8014948:	8ad9      	ldrh	r1, [r3, #22]
 801494a:	687b      	ldr	r3, [r7, #4]
 801494c:	681a      	ldr	r2, [r3, #0]
 801494e:	89fb      	ldrh	r3, [r7, #14]
 8014950:	1c58      	adds	r0, r3, #1
 8014952:	81f8      	strh	r0, [r7, #14]
 8014954:	4413      	add	r3, r2
 8014956:	b2ca      	uxtb	r2, r1
 8014958:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 801495a:	687b      	ldr	r3, [r7, #4]
 801495c:	8adb      	ldrh	r3, [r3, #22]
 801495e:	0a1b      	lsrs	r3, r3, #8
 8014960:	b299      	uxth	r1, r3
 8014962:	687b      	ldr	r3, [r7, #4]
 8014964:	681a      	ldr	r2, [r3, #0]
 8014966:	89fb      	ldrh	r3, [r7, #14]
 8014968:	1c58      	adds	r0, r3, #1
 801496a:	81f8      	strh	r0, [r7, #14]
 801496c:	4413      	add	r3, r2
 801496e:	b2ca      	uxtb	r2, r1
 8014970:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8014972:	687b      	ldr	r3, [r7, #4]
 8014974:	6999      	ldr	r1, [r3, #24]
 8014976:	687b      	ldr	r3, [r7, #4]
 8014978:	681a      	ldr	r2, [r3, #0]
 801497a:	89fb      	ldrh	r3, [r7, #14]
 801497c:	1c58      	adds	r0, r3, #1
 801497e:	81f8      	strh	r0, [r7, #14]
 8014980:	4413      	add	r3, r2
 8014982:	b2ca      	uxtb	r2, r1
 8014984:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8014986:	687b      	ldr	r3, [r7, #4]
 8014988:	699b      	ldr	r3, [r3, #24]
 801498a:	0a19      	lsrs	r1, r3, #8
 801498c:	687b      	ldr	r3, [r7, #4]
 801498e:	681a      	ldr	r2, [r3, #0]
 8014990:	89fb      	ldrh	r3, [r7, #14]
 8014992:	1c58      	adds	r0, r3, #1
 8014994:	81f8      	strh	r0, [r7, #14]
 8014996:	4413      	add	r3, r2
 8014998:	b2ca      	uxtb	r2, r1
 801499a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 801499c:	687b      	ldr	r3, [r7, #4]
 801499e:	699b      	ldr	r3, [r3, #24]
 80149a0:	0c19      	lsrs	r1, r3, #16
 80149a2:	687b      	ldr	r3, [r7, #4]
 80149a4:	681a      	ldr	r2, [r3, #0]
 80149a6:	89fb      	ldrh	r3, [r7, #14]
 80149a8:	1c58      	adds	r0, r3, #1
 80149aa:	81f8      	strh	r0, [r7, #14]
 80149ac:	4413      	add	r3, r2
 80149ae:	b2ca      	uxtb	r2, r1
 80149b0:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 80149b2:	687b      	ldr	r3, [r7, #4]
 80149b4:	699b      	ldr	r3, [r3, #24]
 80149b6:	0e19      	lsrs	r1, r3, #24
 80149b8:	687b      	ldr	r3, [r7, #4]
 80149ba:	681a      	ldr	r2, [r3, #0]
 80149bc:	89fb      	ldrh	r3, [r7, #14]
 80149be:	1c58      	adds	r0, r3, #1
 80149c0:	81f8      	strh	r0, [r7, #14]
 80149c2:	4413      	add	r3, r2
 80149c4:	b2ca      	uxtb	r2, r1
 80149c6:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 80149c8:	89fb      	ldrh	r3, [r7, #14]
 80149ca:	b2da      	uxtb	r2, r3
 80149cc:	687b      	ldr	r3, [r7, #4]
 80149ce:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 80149d0:	2300      	movs	r3, #0
}
 80149d2:	4618      	mov	r0, r3
 80149d4:	3710      	adds	r7, #16
 80149d6:	46bd      	mov	sp, r7
 80149d8:	bd80      	pop	{r7, pc}

080149da <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 80149da:	b580      	push	{r7, lr}
 80149dc:	b084      	sub	sp, #16
 80149de:	af00      	add	r7, sp, #0
 80149e0:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80149e2:	687b      	ldr	r3, [r7, #4]
 80149e4:	2b00      	cmp	r3, #0
 80149e6:	d003      	beq.n	80149f0 <LoRaMacSerializerData+0x16>
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	681b      	ldr	r3, [r3, #0]
 80149ec:	2b00      	cmp	r3, #0
 80149ee:	d101      	bne.n	80149f4 <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 80149f0:	2301      	movs	r3, #1
 80149f2:	e0e3      	b.n	8014bbc <LoRaMacSerializerData+0x1e2>
    }

    uint16_t bufItr = 0;
 80149f4:	2300      	movs	r3, #0
 80149f6:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 80149f8:	2308      	movs	r3, #8
 80149fa:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80149fc:	687b      	ldr	r3, [r7, #4]
 80149fe:	7b1b      	ldrb	r3, [r3, #12]
 8014a00:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8014a04:	b2db      	uxtb	r3, r3
 8014a06:	461a      	mov	r2, r3
 8014a08:	89bb      	ldrh	r3, [r7, #12]
 8014a0a:	4413      	add	r3, r2
 8014a0c:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 8014a0e:	687b      	ldr	r3, [r7, #4]
 8014a10:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014a14:	2b00      	cmp	r3, #0
 8014a16:	d002      	beq.n	8014a1e <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 8014a18:	89bb      	ldrh	r3, [r7, #12]
 8014a1a:	3301      	adds	r3, #1
 8014a1c:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 8014a1e:	687b      	ldr	r3, [r7, #4]
 8014a20:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014a24:	461a      	mov	r2, r3
 8014a26:	89bb      	ldrh	r3, [r7, #12]
 8014a28:	4413      	add	r3, r2
 8014a2a:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 8014a2c:	89bb      	ldrh	r3, [r7, #12]
 8014a2e:	3304      	adds	r3, #4
 8014a30:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 8014a32:	687b      	ldr	r3, [r7, #4]
 8014a34:	791b      	ldrb	r3, [r3, #4]
 8014a36:	461a      	mov	r2, r3
 8014a38:	89bb      	ldrh	r3, [r7, #12]
 8014a3a:	4293      	cmp	r3, r2
 8014a3c:	d901      	bls.n	8014a42 <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8014a3e:	2302      	movs	r3, #2
 8014a40:	e0bc      	b.n	8014bbc <LoRaMacSerializerData+0x1e2>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8014a42:	687b      	ldr	r3, [r7, #4]
 8014a44:	681a      	ldr	r2, [r3, #0]
 8014a46:	89fb      	ldrh	r3, [r7, #14]
 8014a48:	1c59      	adds	r1, r3, #1
 8014a4a:	81f9      	strh	r1, [r7, #14]
 8014a4c:	4413      	add	r3, r2
 8014a4e:	687a      	ldr	r2, [r7, #4]
 8014a50:	7952      	ldrb	r2, [r2, #5]
 8014a52:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 8014a54:	687b      	ldr	r3, [r7, #4]
 8014a56:	6899      	ldr	r1, [r3, #8]
 8014a58:	687b      	ldr	r3, [r7, #4]
 8014a5a:	681a      	ldr	r2, [r3, #0]
 8014a5c:	89fb      	ldrh	r3, [r7, #14]
 8014a5e:	1c58      	adds	r0, r3, #1
 8014a60:	81f8      	strh	r0, [r7, #14]
 8014a62:	4413      	add	r3, r2
 8014a64:	b2ca      	uxtb	r2, r1
 8014a66:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 8014a68:	687b      	ldr	r3, [r7, #4]
 8014a6a:	689b      	ldr	r3, [r3, #8]
 8014a6c:	0a19      	lsrs	r1, r3, #8
 8014a6e:	687b      	ldr	r3, [r7, #4]
 8014a70:	681a      	ldr	r2, [r3, #0]
 8014a72:	89fb      	ldrh	r3, [r7, #14]
 8014a74:	1c58      	adds	r0, r3, #1
 8014a76:	81f8      	strh	r0, [r7, #14]
 8014a78:	4413      	add	r3, r2
 8014a7a:	b2ca      	uxtb	r2, r1
 8014a7c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 8014a7e:	687b      	ldr	r3, [r7, #4]
 8014a80:	689b      	ldr	r3, [r3, #8]
 8014a82:	0c19      	lsrs	r1, r3, #16
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	681a      	ldr	r2, [r3, #0]
 8014a88:	89fb      	ldrh	r3, [r7, #14]
 8014a8a:	1c58      	adds	r0, r3, #1
 8014a8c:	81f8      	strh	r0, [r7, #14]
 8014a8e:	4413      	add	r3, r2
 8014a90:	b2ca      	uxtb	r2, r1
 8014a92:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 8014a94:	687b      	ldr	r3, [r7, #4]
 8014a96:	689b      	ldr	r3, [r3, #8]
 8014a98:	0e19      	lsrs	r1, r3, #24
 8014a9a:	687b      	ldr	r3, [r7, #4]
 8014a9c:	681a      	ldr	r2, [r3, #0]
 8014a9e:	89fb      	ldrh	r3, [r7, #14]
 8014aa0:	1c58      	adds	r0, r3, #1
 8014aa2:	81f8      	strh	r0, [r7, #14]
 8014aa4:	4413      	add	r3, r2
 8014aa6:	b2ca      	uxtb	r2, r1
 8014aa8:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 8014aaa:	687b      	ldr	r3, [r7, #4]
 8014aac:	681a      	ldr	r2, [r3, #0]
 8014aae:	89fb      	ldrh	r3, [r7, #14]
 8014ab0:	1c59      	adds	r1, r3, #1
 8014ab2:	81f9      	strh	r1, [r7, #14]
 8014ab4:	4413      	add	r3, r2
 8014ab6:	687a      	ldr	r2, [r7, #4]
 8014ab8:	7b12      	ldrb	r2, [r2, #12]
 8014aba:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 8014abc:	687b      	ldr	r3, [r7, #4]
 8014abe:	89d9      	ldrh	r1, [r3, #14]
 8014ac0:	687b      	ldr	r3, [r7, #4]
 8014ac2:	681a      	ldr	r2, [r3, #0]
 8014ac4:	89fb      	ldrh	r3, [r7, #14]
 8014ac6:	1c58      	adds	r0, r3, #1
 8014ac8:	81f8      	strh	r0, [r7, #14]
 8014aca:	4413      	add	r3, r2
 8014acc:	b2ca      	uxtb	r2, r1
 8014ace:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 8014ad0:	687b      	ldr	r3, [r7, #4]
 8014ad2:	89db      	ldrh	r3, [r3, #14]
 8014ad4:	0a1b      	lsrs	r3, r3, #8
 8014ad6:	b299      	uxth	r1, r3
 8014ad8:	687b      	ldr	r3, [r7, #4]
 8014ada:	681a      	ldr	r2, [r3, #0]
 8014adc:	89fb      	ldrh	r3, [r7, #14]
 8014ade:	1c58      	adds	r0, r3, #1
 8014ae0:	81f8      	strh	r0, [r7, #14]
 8014ae2:	4413      	add	r3, r2
 8014ae4:	b2ca      	uxtb	r2, r1
 8014ae6:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8014ae8:	687b      	ldr	r3, [r7, #4]
 8014aea:	681a      	ldr	r2, [r3, #0]
 8014aec:	89fb      	ldrh	r3, [r7, #14]
 8014aee:	18d0      	adds	r0, r2, r3
 8014af0:	687b      	ldr	r3, [r7, #4]
 8014af2:	f103 0110 	add.w	r1, r3, #16
 8014af6:	687b      	ldr	r3, [r7, #4]
 8014af8:	7b1b      	ldrb	r3, [r3, #12]
 8014afa:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8014afe:	b2db      	uxtb	r3, r3
 8014b00:	461a      	mov	r2, r3
 8014b02:	f002 fb10 	bl	8017126 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	7b1b      	ldrb	r3, [r3, #12]
 8014b0a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8014b0e:	b2db      	uxtb	r3, r3
 8014b10:	461a      	mov	r2, r3
 8014b12:	89fb      	ldrh	r3, [r7, #14]
 8014b14:	4413      	add	r3, r2
 8014b16:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 8014b18:	687b      	ldr	r3, [r7, #4]
 8014b1a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014b1e:	2b00      	cmp	r3, #0
 8014b20:	d009      	beq.n	8014b36 <LoRaMacSerializerData+0x15c>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 8014b22:	687b      	ldr	r3, [r7, #4]
 8014b24:	681a      	ldr	r2, [r3, #0]
 8014b26:	89fb      	ldrh	r3, [r7, #14]
 8014b28:	1c59      	adds	r1, r3, #1
 8014b2a:	81f9      	strh	r1, [r7, #14]
 8014b2c:	4413      	add	r3, r2
 8014b2e:	687a      	ldr	r2, [r7, #4]
 8014b30:	f892 2020 	ldrb.w	r2, [r2, #32]
 8014b34:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 8014b36:	687b      	ldr	r3, [r7, #4]
 8014b38:	681a      	ldr	r2, [r3, #0]
 8014b3a:	89fb      	ldrh	r3, [r7, #14]
 8014b3c:	18d0      	adds	r0, r2, r3
 8014b3e:	687b      	ldr	r3, [r7, #4]
 8014b40:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8014b42:	687b      	ldr	r3, [r7, #4]
 8014b44:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014b48:	461a      	mov	r2, r3
 8014b4a:	f002 faec 	bl	8017126 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8014b4e:	687b      	ldr	r3, [r7, #4]
 8014b50:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014b54:	461a      	mov	r2, r3
 8014b56:	89fb      	ldrh	r3, [r7, #14]
 8014b58:	4413      	add	r3, r2
 8014b5a:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8014b5c:	687b      	ldr	r3, [r7, #4]
 8014b5e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8014b60:	687b      	ldr	r3, [r7, #4]
 8014b62:	681a      	ldr	r2, [r3, #0]
 8014b64:	89fb      	ldrh	r3, [r7, #14]
 8014b66:	1c58      	adds	r0, r3, #1
 8014b68:	81f8      	strh	r0, [r7, #14]
 8014b6a:	4413      	add	r3, r2
 8014b6c:	b2ca      	uxtb	r2, r1
 8014b6e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8014b70:	687b      	ldr	r3, [r7, #4]
 8014b72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014b74:	0a19      	lsrs	r1, r3, #8
 8014b76:	687b      	ldr	r3, [r7, #4]
 8014b78:	681a      	ldr	r2, [r3, #0]
 8014b7a:	89fb      	ldrh	r3, [r7, #14]
 8014b7c:	1c58      	adds	r0, r3, #1
 8014b7e:	81f8      	strh	r0, [r7, #14]
 8014b80:	4413      	add	r3, r2
 8014b82:	b2ca      	uxtb	r2, r1
 8014b84:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8014b86:	687b      	ldr	r3, [r7, #4]
 8014b88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014b8a:	0c19      	lsrs	r1, r3, #16
 8014b8c:	687b      	ldr	r3, [r7, #4]
 8014b8e:	681a      	ldr	r2, [r3, #0]
 8014b90:	89fb      	ldrh	r3, [r7, #14]
 8014b92:	1c58      	adds	r0, r3, #1
 8014b94:	81f8      	strh	r0, [r7, #14]
 8014b96:	4413      	add	r3, r2
 8014b98:	b2ca      	uxtb	r2, r1
 8014b9a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8014b9c:	687b      	ldr	r3, [r7, #4]
 8014b9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014ba0:	0e19      	lsrs	r1, r3, #24
 8014ba2:	687b      	ldr	r3, [r7, #4]
 8014ba4:	681a      	ldr	r2, [r3, #0]
 8014ba6:	89fb      	ldrh	r3, [r7, #14]
 8014ba8:	1c58      	adds	r0, r3, #1
 8014baa:	81f8      	strh	r0, [r7, #14]
 8014bac:	4413      	add	r3, r2
 8014bae:	b2ca      	uxtb	r2, r1
 8014bb0:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8014bb2:	89fb      	ldrh	r3, [r7, #14]
 8014bb4:	b2da      	uxtb	r2, r3
 8014bb6:	687b      	ldr	r3, [r7, #4]
 8014bb8:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8014bba:	2300      	movs	r3, #0
}
 8014bbc:	4618      	mov	r0, r3
 8014bbe:	3710      	adds	r7, #16
 8014bc0:	46bd      	mov	sp, r7
 8014bc2:	bd80      	pop	{r7, pc}

08014bc4 <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 8014bc4:	b480      	push	{r7}
 8014bc6:	b083      	sub	sp, #12
 8014bc8:	af00      	add	r7, sp, #0
 8014bca:	4603      	mov	r3, r0
 8014bcc:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014bce:	79fb      	ldrb	r3, [r7, #7]
 8014bd0:	2b00      	cmp	r3, #0
 8014bd2:	d101      	bne.n	8014bd8 <RegionIsActive+0x14>
    {
        AS923_IS_ACTIVE( );
 8014bd4:	2301      	movs	r3, #1
 8014bd6:	e000      	b.n	8014bda <RegionIsActive+0x16>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 8014bd8:	2300      	movs	r3, #0
        }
    }
}
 8014bda:	4618      	mov	r0, r3
 8014bdc:	370c      	adds	r7, #12
 8014bde:	46bd      	mov	sp, r7
 8014be0:	bc80      	pop	{r7}
 8014be2:	4770      	bx	lr

08014be4 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 8014be4:	b580      	push	{r7, lr}
 8014be6:	b084      	sub	sp, #16
 8014be8:	af00      	add	r7, sp, #0
 8014bea:	4603      	mov	r3, r0
 8014bec:	6039      	str	r1, [r7, #0]
 8014bee:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 8014bf0:	2300      	movs	r3, #0
 8014bf2:	60bb      	str	r3, [r7, #8]
    switch( region )
 8014bf4:	79fb      	ldrb	r3, [r7, #7]
 8014bf6:	2b00      	cmp	r3, #0
 8014bf8:	d105      	bne.n	8014c06 <RegionGetPhyParam+0x22>
    {
        AS923_GET_PHY_PARAM( );
 8014bfa:	6838      	ldr	r0, [r7, #0]
 8014bfc:	f000 f9ec 	bl	8014fd8 <RegionAS923GetPhyParam>
 8014c00:	4603      	mov	r3, r0
 8014c02:	60fb      	str	r3, [r7, #12]
 8014c04:	e001      	b.n	8014c0a <RegionGetPhyParam+0x26>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 8014c06:	68bb      	ldr	r3, [r7, #8]
 8014c08:	60fb      	str	r3, [r7, #12]
        }
    }
}
 8014c0a:	68fb      	ldr	r3, [r7, #12]
 8014c0c:	4618      	mov	r0, r3
 8014c0e:	3710      	adds	r7, #16
 8014c10:	46bd      	mov	sp, r7
 8014c12:	bd80      	pop	{r7, pc}

08014c14 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 8014c14:	b580      	push	{r7, lr}
 8014c16:	b082      	sub	sp, #8
 8014c18:	af00      	add	r7, sp, #0
 8014c1a:	4603      	mov	r3, r0
 8014c1c:	6039      	str	r1, [r7, #0]
 8014c1e:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014c20:	79fb      	ldrb	r3, [r7, #7]
 8014c22:	2b00      	cmp	r3, #0
 8014c24:	d103      	bne.n	8014c2e <RegionSetBandTxDone+0x1a>
    {
        AS923_SET_BAND_TX_DONE( );
 8014c26:	6838      	ldr	r0, [r7, #0]
 8014c28:	f000 fb4c 	bl	80152c4 <RegionAS923SetBandTxDone>
 8014c2c:	e000      	b.n	8014c30 <RegionSetBandTxDone+0x1c>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 8014c2e:	bf00      	nop
        }
    }
}
 8014c30:	3708      	adds	r7, #8
 8014c32:	46bd      	mov	sp, r7
 8014c34:	bd80      	pop	{r7, pc}

08014c36 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 8014c36:	b580      	push	{r7, lr}
 8014c38:	b082      	sub	sp, #8
 8014c3a:	af00      	add	r7, sp, #0
 8014c3c:	4603      	mov	r3, r0
 8014c3e:	6039      	str	r1, [r7, #0]
 8014c40:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014c42:	79fb      	ldrb	r3, [r7, #7]
 8014c44:	2b00      	cmp	r3, #0
 8014c46:	d103      	bne.n	8014c50 <RegionInitDefaults+0x1a>
    {
        AS923_INIT_DEFAULTS( );
 8014c48:	6838      	ldr	r0, [r7, #0]
 8014c4a:	f000 fb67 	bl	801531c <RegionAS923InitDefaults>
 8014c4e:	e000      	b.n	8014c52 <RegionInitDefaults+0x1c>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 8014c50:	bf00      	nop
        }
    }
}
 8014c52:	bf00      	nop
 8014c54:	3708      	adds	r7, #8
 8014c56:	46bd      	mov	sp, r7
 8014c58:	bd80      	pop	{r7, pc}

08014c5a <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8014c5a:	b580      	push	{r7, lr}
 8014c5c:	b082      	sub	sp, #8
 8014c5e:	af00      	add	r7, sp, #0
 8014c60:	4603      	mov	r3, r0
 8014c62:	6039      	str	r1, [r7, #0]
 8014c64:	71fb      	strb	r3, [r7, #7]
 8014c66:	4613      	mov	r3, r2
 8014c68:	71bb      	strb	r3, [r7, #6]
    switch( region )
 8014c6a:	79fb      	ldrb	r3, [r7, #7]
 8014c6c:	2b00      	cmp	r3, #0
 8014c6e:	d106      	bne.n	8014c7e <RegionVerify+0x24>
    {
        AS923_VERIFY( );
 8014c70:	79bb      	ldrb	r3, [r7, #6]
 8014c72:	4619      	mov	r1, r3
 8014c74:	6838      	ldr	r0, [r7, #0]
 8014c76:	f000 fbe3 	bl	8015440 <RegionAS923Verify>
 8014c7a:	4603      	mov	r3, r0
 8014c7c:	e000      	b.n	8014c80 <RegionVerify+0x26>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 8014c7e:	2300      	movs	r3, #0
        }
    }
}
 8014c80:	4618      	mov	r0, r3
 8014c82:	3708      	adds	r7, #8
 8014c84:	46bd      	mov	sp, r7
 8014c86:	bd80      	pop	{r7, pc}

08014c88 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 8014c88:	b580      	push	{r7, lr}
 8014c8a:	b082      	sub	sp, #8
 8014c8c:	af00      	add	r7, sp, #0
 8014c8e:	4603      	mov	r3, r0
 8014c90:	6039      	str	r1, [r7, #0]
 8014c92:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014c94:	79fb      	ldrb	r3, [r7, #7]
 8014c96:	2b00      	cmp	r3, #0
 8014c98:	d103      	bne.n	8014ca2 <RegionApplyCFList+0x1a>
    {
        AS923_APPLY_CF_LIST( );
 8014c9a:	6838      	ldr	r0, [r7, #0]
 8014c9c:	f000 fc6e 	bl	801557c <RegionAS923ApplyCFList>
 8014ca0:	e000      	b.n	8014ca4 <RegionApplyCFList+0x1c>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 8014ca2:	bf00      	nop
        }
    }
}
 8014ca4:	bf00      	nop
 8014ca6:	3708      	adds	r7, #8
 8014ca8:	46bd      	mov	sp, r7
 8014caa:	bd80      	pop	{r7, pc}

08014cac <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 8014cac:	b580      	push	{r7, lr}
 8014cae:	b082      	sub	sp, #8
 8014cb0:	af00      	add	r7, sp, #0
 8014cb2:	4603      	mov	r3, r0
 8014cb4:	6039      	str	r1, [r7, #0]
 8014cb6:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014cb8:	79fb      	ldrb	r3, [r7, #7]
 8014cba:	2b00      	cmp	r3, #0
 8014cbc:	d104      	bne.n	8014cc8 <RegionChanMaskSet+0x1c>
    {
        AS923_CHAN_MASK_SET( );
 8014cbe:	6838      	ldr	r0, [r7, #0]
 8014cc0:	f000 fcd0 	bl	8015664 <RegionAS923ChanMaskSet>
 8014cc4:	4603      	mov	r3, r0
 8014cc6:	e000      	b.n	8014cca <RegionChanMaskSet+0x1e>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 8014cc8:	2300      	movs	r3, #0
        }
    }
}
 8014cca:	4618      	mov	r0, r3
 8014ccc:	3708      	adds	r7, #8
 8014cce:	46bd      	mov	sp, r7
 8014cd0:	bd80      	pop	{r7, pc}

08014cd2 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8014cd2:	b580      	push	{r7, lr}
 8014cd4:	b082      	sub	sp, #8
 8014cd6:	af00      	add	r7, sp, #0
 8014cd8:	603b      	str	r3, [r7, #0]
 8014cda:	4603      	mov	r3, r0
 8014cdc:	71fb      	strb	r3, [r7, #7]
 8014cde:	460b      	mov	r3, r1
 8014ce0:	71bb      	strb	r3, [r7, #6]
 8014ce2:	4613      	mov	r3, r2
 8014ce4:	717b      	strb	r3, [r7, #5]
    switch( region )
 8014ce6:	79fb      	ldrb	r3, [r7, #7]
 8014ce8:	2b00      	cmp	r3, #0
 8014cea:	d107      	bne.n	8014cfc <RegionComputeRxWindowParameters+0x2a>
    {
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
 8014cec:	7979      	ldrb	r1, [r7, #5]
 8014cee:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8014cf2:	693b      	ldr	r3, [r7, #16]
 8014cf4:	683a      	ldr	r2, [r7, #0]
 8014cf6:	f000 fcdf 	bl	80156b8 <RegionAS923ComputeRxWindowParameters>
 8014cfa:	e000      	b.n	8014cfe <RegionComputeRxWindowParameters+0x2c>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 8014cfc:	bf00      	nop
        }
    }
}
 8014cfe:	bf00      	nop
 8014d00:	3708      	adds	r7, #8
 8014d02:	46bd      	mov	sp, r7
 8014d04:	bd80      	pop	{r7, pc}

08014d06 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8014d06:	b580      	push	{r7, lr}
 8014d08:	b084      	sub	sp, #16
 8014d0a:	af00      	add	r7, sp, #0
 8014d0c:	4603      	mov	r3, r0
 8014d0e:	60b9      	str	r1, [r7, #8]
 8014d10:	607a      	str	r2, [r7, #4]
 8014d12:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8014d14:	7bfb      	ldrb	r3, [r7, #15]
 8014d16:	2b00      	cmp	r3, #0
 8014d18:	d105      	bne.n	8014d26 <RegionRxConfig+0x20>
    {
        AS923_RX_CONFIG( );
 8014d1a:	6879      	ldr	r1, [r7, #4]
 8014d1c:	68b8      	ldr	r0, [r7, #8]
 8014d1e:	f000 fd25 	bl	801576c <RegionAS923RxConfig>
 8014d22:	4603      	mov	r3, r0
 8014d24:	e000      	b.n	8014d28 <RegionRxConfig+0x22>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 8014d26:	2300      	movs	r3, #0
        }
    }
}
 8014d28:	4618      	mov	r0, r3
 8014d2a:	3710      	adds	r7, #16
 8014d2c:	46bd      	mov	sp, r7
 8014d2e:	bd80      	pop	{r7, pc}

08014d30 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8014d30:	b580      	push	{r7, lr}
 8014d32:	b084      	sub	sp, #16
 8014d34:	af00      	add	r7, sp, #0
 8014d36:	60b9      	str	r1, [r7, #8]
 8014d38:	607a      	str	r2, [r7, #4]
 8014d3a:	603b      	str	r3, [r7, #0]
 8014d3c:	4603      	mov	r3, r0
 8014d3e:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8014d40:	7bfb      	ldrb	r3, [r7, #15]
 8014d42:	2b00      	cmp	r3, #0
 8014d44:	d106      	bne.n	8014d54 <RegionTxConfig+0x24>
    {
        AS923_TX_CONFIG( );
 8014d46:	683a      	ldr	r2, [r7, #0]
 8014d48:	6879      	ldr	r1, [r7, #4]
 8014d4a:	68b8      	ldr	r0, [r7, #8]
 8014d4c:	f000 fdde 	bl	801590c <RegionAS923TxConfig>
 8014d50:	4603      	mov	r3, r0
 8014d52:	e000      	b.n	8014d56 <RegionTxConfig+0x26>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 8014d54:	2300      	movs	r3, #0
        }
    }
}
 8014d56:	4618      	mov	r0, r3
 8014d58:	3710      	adds	r7, #16
 8014d5a:	46bd      	mov	sp, r7
 8014d5c:	bd80      	pop	{r7, pc}

08014d5e <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8014d5e:	b580      	push	{r7, lr}
 8014d60:	b086      	sub	sp, #24
 8014d62:	af02      	add	r7, sp, #8
 8014d64:	60b9      	str	r1, [r7, #8]
 8014d66:	607a      	str	r2, [r7, #4]
 8014d68:	603b      	str	r3, [r7, #0]
 8014d6a:	4603      	mov	r3, r0
 8014d6c:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8014d6e:	7bfb      	ldrb	r3, [r7, #15]
 8014d70:	2b00      	cmp	r3, #0
 8014d72:	d109      	bne.n	8014d88 <RegionLinkAdrReq+0x2a>
    {
        AS923_LINK_ADR_REQ( );
 8014d74:	69fb      	ldr	r3, [r7, #28]
 8014d76:	9300      	str	r3, [sp, #0]
 8014d78:	69bb      	ldr	r3, [r7, #24]
 8014d7a:	683a      	ldr	r2, [r7, #0]
 8014d7c:	6879      	ldr	r1, [r7, #4]
 8014d7e:	68b8      	ldr	r0, [r7, #8]
 8014d80:	f000 fe94 	bl	8015aac <RegionAS923LinkAdrReq>
 8014d84:	4603      	mov	r3, r0
 8014d86:	e000      	b.n	8014d8a <RegionLinkAdrReq+0x2c>
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 8014d88:	2300      	movs	r3, #0
        }
    }
}
 8014d8a:	4618      	mov	r0, r3
 8014d8c:	3710      	adds	r7, #16
 8014d8e:	46bd      	mov	sp, r7
 8014d90:	bd80      	pop	{r7, pc}

08014d92 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 8014d92:	b580      	push	{r7, lr}
 8014d94:	b082      	sub	sp, #8
 8014d96:	af00      	add	r7, sp, #0
 8014d98:	4603      	mov	r3, r0
 8014d9a:	6039      	str	r1, [r7, #0]
 8014d9c:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014d9e:	79fb      	ldrb	r3, [r7, #7]
 8014da0:	2b00      	cmp	r3, #0
 8014da2:	d104      	bne.n	8014dae <RegionRxParamSetupReq+0x1c>
    {
        AS923_RX_PARAM_SETUP_REQ( );
 8014da4:	6838      	ldr	r0, [r7, #0]
 8014da6:	f000 ffa3 	bl	8015cf0 <RegionAS923RxParamSetupReq>
 8014daa:	4603      	mov	r3, r0
 8014dac:	e000      	b.n	8014db0 <RegionRxParamSetupReq+0x1e>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8014dae:	2300      	movs	r3, #0
        }
    }
}
 8014db0:	4618      	mov	r0, r3
 8014db2:	3708      	adds	r7, #8
 8014db4:	46bd      	mov	sp, r7
 8014db6:	bd80      	pop	{r7, pc}

08014db8 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 8014db8:	b580      	push	{r7, lr}
 8014dba:	b082      	sub	sp, #8
 8014dbc:	af00      	add	r7, sp, #0
 8014dbe:	4603      	mov	r3, r0
 8014dc0:	6039      	str	r1, [r7, #0]
 8014dc2:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014dc4:	79fb      	ldrb	r3, [r7, #7]
 8014dc6:	2b00      	cmp	r3, #0
 8014dc8:	d104      	bne.n	8014dd4 <RegionNewChannelReq+0x1c>
    {
        AS923_NEW_CHANNEL_REQ( );
 8014dca:	6838      	ldr	r0, [r7, #0]
 8014dcc:	f000 ffc8 	bl	8015d60 <RegionAS923NewChannelReq>
 8014dd0:	4603      	mov	r3, r0
 8014dd2:	e000      	b.n	8014dd6 <RegionNewChannelReq+0x1e>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 8014dd4:	2300      	movs	r3, #0
        }
    }
}
 8014dd6:	4618      	mov	r0, r3
 8014dd8:	3708      	adds	r7, #8
 8014dda:	46bd      	mov	sp, r7
 8014ddc:	bd80      	pop	{r7, pc}

08014dde <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 8014dde:	b580      	push	{r7, lr}
 8014de0:	b082      	sub	sp, #8
 8014de2:	af00      	add	r7, sp, #0
 8014de4:	4603      	mov	r3, r0
 8014de6:	6039      	str	r1, [r7, #0]
 8014de8:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014dea:	79fb      	ldrb	r3, [r7, #7]
 8014dec:	2b00      	cmp	r3, #0
 8014dee:	d104      	bne.n	8014dfa <RegionTxParamSetupReq+0x1c>
    {
        AS923_TX_PARAM_SETUP_REQ( );
 8014df0:	6838      	ldr	r0, [r7, #0]
 8014df2:	f001 f813 	bl	8015e1c <RegionAS923TxParamSetupReq>
 8014df6:	4603      	mov	r3, r0
 8014df8:	e000      	b.n	8014dfc <RegionTxParamSetupReq+0x1e>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8014dfa:	2300      	movs	r3, #0
        }
    }
}
 8014dfc:	4618      	mov	r0, r3
 8014dfe:	3708      	adds	r7, #8
 8014e00:	46bd      	mov	sp, r7
 8014e02:	bd80      	pop	{r7, pc}

08014e04 <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 8014e04:	b580      	push	{r7, lr}
 8014e06:	b082      	sub	sp, #8
 8014e08:	af00      	add	r7, sp, #0
 8014e0a:	4603      	mov	r3, r0
 8014e0c:	6039      	str	r1, [r7, #0]
 8014e0e:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014e10:	79fb      	ldrb	r3, [r7, #7]
 8014e12:	2b00      	cmp	r3, #0
 8014e14:	d104      	bne.n	8014e20 <RegionDlChannelReq+0x1c>
    {
        AS923_DL_CHANNEL_REQ( );
 8014e16:	6838      	ldr	r0, [r7, #0]
 8014e18:	f001 f80a 	bl	8015e30 <RegionAS923DlChannelReq>
 8014e1c:	4603      	mov	r3, r0
 8014e1e:	e000      	b.n	8014e22 <RegionDlChannelReq+0x1e>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 8014e20:	2300      	movs	r3, #0
        }
    }
}
 8014e22:	4618      	mov	r0, r3
 8014e24:	3708      	adds	r7, #8
 8014e26:	46bd      	mov	sp, r7
 8014e28:	bd80      	pop	{r7, pc}

08014e2a <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 8014e2a:	b580      	push	{r7, lr}
 8014e2c:	b082      	sub	sp, #8
 8014e2e:	af00      	add	r7, sp, #0
 8014e30:	4603      	mov	r3, r0
 8014e32:	71fb      	strb	r3, [r7, #7]
 8014e34:	460b      	mov	r3, r1
 8014e36:	71bb      	strb	r3, [r7, #6]
 8014e38:	4613      	mov	r3, r2
 8014e3a:	717b      	strb	r3, [r7, #5]
    switch( region )
 8014e3c:	79fb      	ldrb	r3, [r7, #7]
 8014e3e:	2b00      	cmp	r3, #0
 8014e40:	d108      	bne.n	8014e54 <RegionAlternateDr+0x2a>
    {
        AS923_ALTERNATE_DR( );
 8014e42:	797a      	ldrb	r2, [r7, #5]
 8014e44:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8014e48:	4611      	mov	r1, r2
 8014e4a:	4618      	mov	r0, r3
 8014e4c:	f001 f830 	bl	8015eb0 <RegionAS923AlternateDr>
 8014e50:	4603      	mov	r3, r0
 8014e52:	e000      	b.n	8014e56 <RegionAlternateDr+0x2c>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 8014e54:	2300      	movs	r3, #0
        }
    }
}
 8014e56:	4618      	mov	r0, r3
 8014e58:	3708      	adds	r7, #8
 8014e5a:	46bd      	mov	sp, r7
 8014e5c:	bd80      	pop	{r7, pc}

08014e5e <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8014e5e:	b580      	push	{r7, lr}
 8014e60:	b084      	sub	sp, #16
 8014e62:	af00      	add	r7, sp, #0
 8014e64:	60b9      	str	r1, [r7, #8]
 8014e66:	607a      	str	r2, [r7, #4]
 8014e68:	603b      	str	r3, [r7, #0]
 8014e6a:	4603      	mov	r3, r0
 8014e6c:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8014e6e:	7bfb      	ldrb	r3, [r7, #15]
 8014e70:	2b00      	cmp	r3, #0
 8014e72:	d107      	bne.n	8014e84 <RegionNextChannel+0x26>
    {
        AS923_NEXT_CHANNEL( );
 8014e74:	69bb      	ldr	r3, [r7, #24]
 8014e76:	683a      	ldr	r2, [r7, #0]
 8014e78:	6879      	ldr	r1, [r7, #4]
 8014e7a:	68b8      	ldr	r0, [r7, #8]
 8014e7c:	f001 f826 	bl	8015ecc <RegionAS923NextChannel>
 8014e80:	4603      	mov	r3, r0
 8014e82:	e000      	b.n	8014e86 <RegionNextChannel+0x28>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8014e84:	2309      	movs	r3, #9
        }
    }
}
 8014e86:	4618      	mov	r0, r3
 8014e88:	3710      	adds	r7, #16
 8014e8a:	46bd      	mov	sp, r7
 8014e8c:	bd80      	pop	{r7, pc}

08014e8e <RegionApplyDrOffset>:
    }
}
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8014e8e:	b590      	push	{r4, r7, lr}
 8014e90:	b083      	sub	sp, #12
 8014e92:	af00      	add	r7, sp, #0
 8014e94:	4604      	mov	r4, r0
 8014e96:	4608      	mov	r0, r1
 8014e98:	4611      	mov	r1, r2
 8014e9a:	461a      	mov	r2, r3
 8014e9c:	4623      	mov	r3, r4
 8014e9e:	71fb      	strb	r3, [r7, #7]
 8014ea0:	4603      	mov	r3, r0
 8014ea2:	71bb      	strb	r3, [r7, #6]
 8014ea4:	460b      	mov	r3, r1
 8014ea6:	717b      	strb	r3, [r7, #5]
 8014ea8:	4613      	mov	r3, r2
 8014eaa:	713b      	strb	r3, [r7, #4]
    switch( region )
 8014eac:	79fb      	ldrb	r3, [r7, #7]
 8014eae:	2b00      	cmp	r3, #0
 8014eb0:	d109      	bne.n	8014ec6 <RegionApplyDrOffset+0x38>
    {
        AS923_APPLY_DR_OFFSET( );
 8014eb2:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8014eb6:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8014eba:	79bb      	ldrb	r3, [r7, #6]
 8014ebc:	4618      	mov	r0, r3
 8014ebe:	f001 f979 	bl	80161b4 <RegionAS923ApplyDrOffset>
 8014ec2:	4603      	mov	r3, r0
 8014ec4:	e000      	b.n	8014ec8 <RegionApplyDrOffset+0x3a>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 8014ec6:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 8014ec8:	4618      	mov	r0, r3
 8014eca:	370c      	adds	r7, #12
 8014ecc:	46bd      	mov	sp, r7
 8014ece:	bd90      	pop	{r4, r7, pc}

08014ed0 <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 8014ed0:	b480      	push	{r7}
 8014ed2:	b083      	sub	sp, #12
 8014ed4:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 8014ed6:	4b04      	ldr	r3, [pc, #16]	@ (8014ee8 <RegionGetVersion+0x18>)
 8014ed8:	607b      	str	r3, [r7, #4]

    return version;
 8014eda:	687b      	ldr	r3, [r7, #4]
}
 8014edc:	4618      	mov	r0, r3
 8014ede:	370c      	adds	r7, #12
 8014ee0:	46bd      	mov	sp, r7
 8014ee2:	bc80      	pop	{r7}
 8014ee4:	4770      	bx	lr
 8014ee6:	bf00      	nop
 8014ee8:	02010001 	.word	0x02010001

08014eec <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq )
{
 8014eec:	b580      	push	{r7, lr}
 8014eee:	b082      	sub	sp, #8
 8014ef0:	af00      	add	r7, sp, #0
 8014ef2:	6078      	str	r0, [r7, #4]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8014ef4:	4b0d      	ldr	r3, [pc, #52]	@ (8014f2c <VerifyRfFreq+0x40>)
 8014ef6:	6a1b      	ldr	r3, [r3, #32]
 8014ef8:	6878      	ldr	r0, [r7, #4]
 8014efa:	4798      	blx	r3
 8014efc:	4603      	mov	r3, r0
 8014efe:	f083 0301 	eor.w	r3, r3, #1
 8014f02:	b2db      	uxtb	r3, r3
 8014f04:	2b00      	cmp	r3, #0
 8014f06:	d001      	beq.n	8014f0c <VerifyRfFreq+0x20>
    {
        return false;
 8014f08:	2300      	movs	r3, #0
 8014f0a:	e00a      	b.n	8014f22 <VerifyRfFreq+0x36>
    }

    if( ( freq < AS923_MIN_RF_FREQUENCY ) || ( freq > AS923_MAX_RF_FREQUENCY ) )
 8014f0c:	687b      	ldr	r3, [r7, #4]
 8014f0e:	4a08      	ldr	r2, [pc, #32]	@ (8014f30 <VerifyRfFreq+0x44>)
 8014f10:	4293      	cmp	r3, r2
 8014f12:	d903      	bls.n	8014f1c <VerifyRfFreq+0x30>
 8014f14:	687b      	ldr	r3, [r7, #4]
 8014f16:	4a07      	ldr	r2, [pc, #28]	@ (8014f34 <VerifyRfFreq+0x48>)
 8014f18:	4293      	cmp	r3, r2
 8014f1a:	d901      	bls.n	8014f20 <VerifyRfFreq+0x34>
    {
        return false;
 8014f1c:	2300      	movs	r3, #0
 8014f1e:	e000      	b.n	8014f22 <VerifyRfFreq+0x36>
    }
    return true;
 8014f20:	2301      	movs	r3, #1
}
 8014f22:	4618      	mov	r0, r3
 8014f24:	3708      	adds	r7, #8
 8014f26:	46bd      	mov	sp, r7
 8014f28:	bd80      	pop	{r7, pc}
 8014f2a:	bf00      	nop
 8014f2c:	0801f68c 	.word	0x0801f68c
 8014f30:	3689cabf 	.word	0x3689cabf
 8014f34:	37502800 	.word	0x37502800

08014f38 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8014f38:	b590      	push	{r4, r7, lr}
 8014f3a:	b08b      	sub	sp, #44	@ 0x2c
 8014f3c:	af04      	add	r7, sp, #16
 8014f3e:	4603      	mov	r3, r0
 8014f40:	460a      	mov	r2, r1
 8014f42:	71fb      	strb	r3, [r7, #7]
 8014f44:	4613      	mov	r3, r2
 8014f46:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesAS923[datarate];
 8014f48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014f4c:	4a1f      	ldr	r2, [pc, #124]	@ (8014fcc <GetTimeOnAir+0x94>)
 8014f4e:	5cd3      	ldrb	r3, [r2, r3]
 8014f50:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsAS923 );
 8014f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014f56:	491e      	ldr	r1, [pc, #120]	@ (8014fd0 <GetTimeOnAir+0x98>)
 8014f58:	4618      	mov	r0, r3
 8014f5a:	f002 f835 	bl	8016fc8 <RegionCommonGetBandwidth>
 8014f5e:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 8014f60:	2300      	movs	r3, #0
 8014f62:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 8014f64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014f68:	2b07      	cmp	r3, #7
 8014f6a:	d118      	bne.n	8014f9e <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 8014f6c:	4b19      	ldr	r3, [pc, #100]	@ (8014fd4 <GetTimeOnAir+0x9c>)
 8014f6e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8014f70:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014f74:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8014f78:	fb02 f303 	mul.w	r3, r2, r3
 8014f7c:	4619      	mov	r1, r3
 8014f7e:	88bb      	ldrh	r3, [r7, #4]
 8014f80:	b2db      	uxtb	r3, r3
 8014f82:	2201      	movs	r2, #1
 8014f84:	9203      	str	r2, [sp, #12]
 8014f86:	9302      	str	r3, [sp, #8]
 8014f88:	2300      	movs	r3, #0
 8014f8a:	9301      	str	r3, [sp, #4]
 8014f8c:	2305      	movs	r3, #5
 8014f8e:	9300      	str	r3, [sp, #0]
 8014f90:	2300      	movs	r3, #0
 8014f92:	460a      	mov	r2, r1
 8014f94:	68f9      	ldr	r1, [r7, #12]
 8014f96:	2000      	movs	r0, #0
 8014f98:	47a0      	blx	r4
 8014f9a:	6178      	str	r0, [r7, #20]
 8014f9c:	e011      	b.n	8014fc2 <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8014f9e:	4b0d      	ldr	r3, [pc, #52]	@ (8014fd4 <GetTimeOnAir+0x9c>)
 8014fa0:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8014fa2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8014fa6:	88bb      	ldrh	r3, [r7, #4]
 8014fa8:	b2db      	uxtb	r3, r3
 8014faa:	2101      	movs	r1, #1
 8014fac:	9103      	str	r1, [sp, #12]
 8014fae:	9302      	str	r3, [sp, #8]
 8014fb0:	2300      	movs	r3, #0
 8014fb2:	9301      	str	r3, [sp, #4]
 8014fb4:	2308      	movs	r3, #8
 8014fb6:	9300      	str	r3, [sp, #0]
 8014fb8:	2301      	movs	r3, #1
 8014fba:	68f9      	ldr	r1, [r7, #12]
 8014fbc:	2001      	movs	r0, #1
 8014fbe:	47a0      	blx	r4
 8014fc0:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 8014fc2:	697b      	ldr	r3, [r7, #20]
}
 8014fc4:	4618      	mov	r0, r3
 8014fc6:	371c      	adds	r7, #28
 8014fc8:	46bd      	mov	sp, r7
 8014fca:	bd90      	pop	{r4, r7, pc}
 8014fcc:	0801f5cc 	.word	0x0801f5cc
 8014fd0:	0801f5d4 	.word	0x0801f5d4
 8014fd4:	0801f68c 	.word	0x0801f68c

08014fd8 <RegionAS923GetPhyParam>:
#endif /* REGION_AS923 */

PhyParam_t RegionAS923GetPhyParam( GetPhyParams_t* getPhy )
{
 8014fd8:	b580      	push	{r7, lr}
 8014fda:	b088      	sub	sp, #32
 8014fdc:	af00      	add	r7, sp, #0
 8014fde:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8014fe0:	2300      	movs	r3, #0
 8014fe2:	61bb      	str	r3, [r7, #24]

#if defined( REGION_AS923 )
    switch( getPhy->Attribute )
 8014fe4:	687b      	ldr	r3, [r7, #4]
 8014fe6:	781b      	ldrb	r3, [r3, #0]
 8014fe8:	3b01      	subs	r3, #1
 8014fea:	2b37      	cmp	r3, #55	@ 0x37
 8014fec:	f200 814e 	bhi.w	801528c <RegionAS923GetPhyParam+0x2b4>
 8014ff0:	a201      	add	r2, pc, #4	@ (adr r2, 8014ff8 <RegionAS923GetPhyParam+0x20>)
 8014ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014ff6:	bf00      	nop
 8014ff8:	080150d9 	.word	0x080150d9
 8014ffc:	080150ed 	.word	0x080150ed
 8015000:	0801528d 	.word	0x0801528d
 8015004:	0801528d 	.word	0x0801528d
 8015008:	0801528d 	.word	0x0801528d
 801500c:	08015101 	.word	0x08015101
 8015010:	0801528d 	.word	0x0801528d
 8015014:	08015147 	.word	0x08015147
 8015018:	0801528d 	.word	0x0801528d
 801501c:	0801514d 	.word	0x0801514d
 8015020:	08015153 	.word	0x08015153
 8015024:	08015159 	.word	0x08015159
 8015028:	0801515f 	.word	0x0801515f
 801502c:	08015187 	.word	0x08015187
 8015030:	080151af 	.word	0x080151af
 8015034:	080151b5 	.word	0x080151b5
 8015038:	080151bd 	.word	0x080151bd
 801503c:	080151c5 	.word	0x080151c5
 8015040:	080151cd 	.word	0x080151cd
 8015044:	080151d5 	.word	0x080151d5
 8015048:	080151dd 	.word	0x080151dd
 801504c:	080151f1 	.word	0x080151f1
 8015050:	080151f7 	.word	0x080151f7
 8015054:	080151fd 	.word	0x080151fd
 8015058:	08015203 	.word	0x08015203
 801505c:	0801520f 	.word	0x0801520f
 8015060:	0801521b 	.word	0x0801521b
 8015064:	08015221 	.word	0x08015221
 8015068:	08015229 	.word	0x08015229
 801506c:	0801522f 	.word	0x0801522f
 8015070:	08015235 	.word	0x08015235
 8015074:	0801523d 	.word	0x0801523d
 8015078:	08015107 	.word	0x08015107
 801507c:	0801528d 	.word	0x0801528d
 8015080:	0801528d 	.word	0x0801528d
 8015084:	0801528d 	.word	0x0801528d
 8015088:	0801528d 	.word	0x0801528d
 801508c:	0801528d 	.word	0x0801528d
 8015090:	0801528d 	.word	0x0801528d
 8015094:	0801528d 	.word	0x0801528d
 8015098:	0801528d 	.word	0x0801528d
 801509c:	0801528d 	.word	0x0801528d
 80150a0:	0801528d 	.word	0x0801528d
 80150a4:	0801528d 	.word	0x0801528d
 80150a8:	0801528d 	.word	0x0801528d
 80150ac:	0801528d 	.word	0x0801528d
 80150b0:	08015243 	.word	0x08015243
 80150b4:	08015249 	.word	0x08015249
 80150b8:	08015257 	.word	0x08015257
 80150bc:	0801528d 	.word	0x0801528d
 80150c0:	0801528d 	.word	0x0801528d
 80150c4:	0801525d 	.word	0x0801525d
 80150c8:	08015263 	.word	0x08015263
 80150cc:	0801528d 	.word	0x0801528d
 80150d0:	08015269 	.word	0x08015269
 80150d4:	08015279 	.word	0x08015279
    {
        case PHY_MIN_RX_DR:
        {
            if( getPhy->DownlinkDwellTime == 0 )
 80150d8:	687b      	ldr	r3, [r7, #4]
 80150da:	78db      	ldrb	r3, [r3, #3]
 80150dc:	2b00      	cmp	r3, #0
 80150de:	d102      	bne.n	80150e6 <RegionAS923GetPhyParam+0x10e>
            {
                phyParam.Value = AS923_RX_MIN_DATARATE;
 80150e0:	2300      	movs	r3, #0
 80150e2:	61bb      	str	r3, [r7, #24]
            }
            else
            {
                phyParam.Value = AS923_DWELL_LIMIT_DATARATE;
            }
            break;
 80150e4:	e0d3      	b.n	801528e <RegionAS923GetPhyParam+0x2b6>
                phyParam.Value = AS923_DWELL_LIMIT_DATARATE;
 80150e6:	2302      	movs	r3, #2
 80150e8:	61bb      	str	r3, [r7, #24]
            break;
 80150ea:	e0d0      	b.n	801528e <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_MIN_TX_DR:
        {
            if( getPhy->UplinkDwellTime == 0 )
 80150ec:	687b      	ldr	r3, [r7, #4]
 80150ee:	789b      	ldrb	r3, [r3, #2]
 80150f0:	2b00      	cmp	r3, #0
 80150f2:	d102      	bne.n	80150fa <RegionAS923GetPhyParam+0x122>
            {
                phyParam.Value = AS923_TX_MIN_DATARATE;
 80150f4:	2300      	movs	r3, #0
 80150f6:	61bb      	str	r3, [r7, #24]
            }
            else
            {
                phyParam.Value = AS923_DWELL_LIMIT_DATARATE;
            }
            break;
 80150f8:	e0c9      	b.n	801528e <RegionAS923GetPhyParam+0x2b6>
                phyParam.Value = AS923_DWELL_LIMIT_DATARATE;
 80150fa:	2302      	movs	r3, #2
 80150fc:	61bb      	str	r3, [r7, #24]
            break;
 80150fe:	e0c6      	b.n	801528e <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = AS923_DEFAULT_DATARATE;
 8015100:	2302      	movs	r3, #2
 8015102:	61bb      	str	r3, [r7, #24]
            break;
 8015104:	e0c3      	b.n	801528e <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 8015106:	687b      	ldr	r3, [r7, #4]
 8015108:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801510c:	733b      	strb	r3, [r7, #12]
 801510e:	2307      	movs	r3, #7
 8015110:	737b      	strb	r3, [r7, #13]
                .MaxDr = ( int8_t )AS923_TX_MAX_DATARATE,
                .MinDr = ( int8_t )( ( getPhy->UplinkDwellTime == 0 ) ? AS923_TX_MIN_DATARATE : AS923_DWELL_LIMIT_DATARATE ),
 8015112:	687b      	ldr	r3, [r7, #4]
 8015114:	789b      	ldrb	r3, [r3, #2]
 8015116:	2b00      	cmp	r3, #0
 8015118:	d101      	bne.n	801511e <RegionAS923GetPhyParam+0x146>
 801511a:	2300      	movs	r3, #0
 801511c:	e000      	b.n	8015120 <RegionAS923GetPhyParam+0x148>
 801511e:	2302      	movs	r3, #2
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8015120:	73bb      	strb	r3, [r7, #14]
 8015122:	2310      	movs	r3, #16
 8015124:	73fb      	strb	r3, [r7, #15]
                .NbChannels = AS923_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 8015126:	4b5d      	ldr	r3, [pc, #372]	@ (801529c <RegionAS923GetPhyParam+0x2c4>)
 8015128:	681b      	ldr	r3, [r3, #0]
 801512a:	f503 7358 	add.w	r3, r3, #864	@ 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801512e:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 8015130:	4b5a      	ldr	r3, [pc, #360]	@ (801529c <RegionAS923GetPhyParam+0x2c4>)
 8015132:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8015134:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 8015136:	f107 030c 	add.w	r3, r7, #12
 801513a:	4618      	mov	r0, r3
 801513c:	f001 fef1 	bl	8016f22 <RegionCommonGetNextLowerTxDr>
 8015140:	4603      	mov	r3, r0
 8015142:	61bb      	str	r3, [r7, #24]
            break;
 8015144:	e0a3      	b.n	801528e <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = AS923_MAX_TX_POWER;
 8015146:	2300      	movs	r3, #0
 8015148:	61bb      	str	r3, [r7, #24]
            break;
 801514a:	e0a0      	b.n	801528e <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = AS923_DEFAULT_TX_POWER;
 801514c:	2300      	movs	r3, #0
 801514e:	61bb      	str	r3, [r7, #24]
            break;
 8015150:	e09d      	b.n	801528e <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8015152:	2340      	movs	r3, #64	@ 0x40
 8015154:	61bb      	str	r3, [r7, #24]
            break;
 8015156:	e09a      	b.n	801528e <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8015158:	2320      	movs	r3, #32
 801515a:	61bb      	str	r3, [r7, #24]
            break;
 801515c:	e097      	b.n	801528e <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_MAX_PAYLOAD:
        {
            if( getPhy->UplinkDwellTime == 0 )
 801515e:	687b      	ldr	r3, [r7, #4]
 8015160:	789b      	ldrb	r3, [r3, #2]
 8015162:	2b00      	cmp	r3, #0
 8015164:	d107      	bne.n	8015176 <RegionAS923GetPhyParam+0x19e>
            {
                phyParam.Value = MaxPayloadOfDatarateDwell0AS923[getPhy->Datarate];
 8015166:	687b      	ldr	r3, [r7, #4]
 8015168:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801516c:	461a      	mov	r2, r3
 801516e:	4b4c      	ldr	r3, [pc, #304]	@ (80152a0 <RegionAS923GetPhyParam+0x2c8>)
 8015170:	5c9b      	ldrb	r3, [r3, r2]
 8015172:	61bb      	str	r3, [r7, #24]
            }
            else
            {
                phyParam.Value = MaxPayloadOfDatarateDwell1AS923[getPhy->Datarate];
            }
            break;
 8015174:	e08b      	b.n	801528e <RegionAS923GetPhyParam+0x2b6>
                phyParam.Value = MaxPayloadOfDatarateDwell1AS923[getPhy->Datarate];
 8015176:	687b      	ldr	r3, [r7, #4]
 8015178:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801517c:	461a      	mov	r2, r3
 801517e:	4b49      	ldr	r3, [pc, #292]	@ (80152a4 <RegionAS923GetPhyParam+0x2cc>)
 8015180:	5c9b      	ldrb	r3, [r3, r2]
 8015182:	61bb      	str	r3, [r7, #24]
            break;
 8015184:	e083      	b.n	801528e <RegionAS923GetPhyParam+0x2b6>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            if( getPhy->UplinkDwellTime == 0 )
 8015186:	687b      	ldr	r3, [r7, #4]
 8015188:	789b      	ldrb	r3, [r3, #2]
 801518a:	2b00      	cmp	r3, #0
 801518c:	d107      	bne.n	801519e <RegionAS923GetPhyParam+0x1c6>
            {
                phyParam.Value = MaxPayloadOfDatarateRepeaterDwell0AS923[getPhy->Datarate];
 801518e:	687b      	ldr	r3, [r7, #4]
 8015190:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015194:	461a      	mov	r2, r3
 8015196:	4b44      	ldr	r3, [pc, #272]	@ (80152a8 <RegionAS923GetPhyParam+0x2d0>)
 8015198:	5c9b      	ldrb	r3, [r3, r2]
 801519a:	61bb      	str	r3, [r7, #24]
            }
            else
            {
                phyParam.Value = MaxPayloadOfDatarateDwell1AS923[getPhy->Datarate];
            }
            break;
 801519c:	e077      	b.n	801528e <RegionAS923GetPhyParam+0x2b6>
                phyParam.Value = MaxPayloadOfDatarateDwell1AS923[getPhy->Datarate];
 801519e:	687b      	ldr	r3, [r7, #4]
 80151a0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80151a4:	461a      	mov	r2, r3
 80151a6:	4b3f      	ldr	r3, [pc, #252]	@ (80152a4 <RegionAS923GetPhyParam+0x2cc>)
 80151a8:	5c9b      	ldrb	r3, [r3, r2]
 80151aa:	61bb      	str	r3, [r7, #24]
            break;
 80151ac:	e06f      	b.n	801528e <RegionAS923GetPhyParam+0x2b6>
        }
        /* ST_WORKAROUND_END */
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = AS923_DUTY_CYCLE_ENABLED;
 80151ae:	2300      	movs	r3, #0
 80151b0:	61bb      	str	r3, [r7, #24]
            break;
 80151b2:	e06c      	b.n	801528e <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = AS923_MAX_RX_WINDOW;
 80151b4:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80151b8:	61bb      	str	r3, [r7, #24]
            break;
 80151ba:	e068      	b.n	801528e <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 80151bc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80151c0:	61bb      	str	r3, [r7, #24]
            break;
 80151c2:	e064      	b.n	801528e <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 80151c4:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80151c8:	61bb      	str	r3, [r7, #24]
            break;
 80151ca:	e060      	b.n	801528e <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 80151cc:	f241 3388 	movw	r3, #5000	@ 0x1388
 80151d0:	61bb      	str	r3, [r7, #24]
            break;
 80151d2:	e05c      	b.n	801528e <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 80151d4:	f241 7370 	movw	r3, #6000	@ 0x1770
 80151d8:	61bb      	str	r3, [r7, #24]
            break;
 80151da:	e058      	b.n	801528e <RegionAS923GetPhyParam+0x2b6>
            break;
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
        case PHY_RETRANSMIT_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 80151dc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80151e0:	4832      	ldr	r0, [pc, #200]	@ (80152ac <RegionAS923GetPhyParam+0x2d4>)
 80151e2:	f001 ff89 	bl	80170f8 <randr>
 80151e6:	4603      	mov	r3, r0
 80151e8:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80151ec:	61bb      	str	r3, [r7, #24]
            break;
 80151ee:	e04e      	b.n	801528e <RegionAS923GetPhyParam+0x2b6>
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 80151f0:	2300      	movs	r3, #0
 80151f2:	61bb      	str	r3, [r7, #24]
            break;
 80151f4:	e04b      	b.n	801528e <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = AS923_RX_WND_2_FREQ - REGION_AS923_FREQ_OFFSET;
 80151f6:	4b2e      	ldr	r3, [pc, #184]	@ (80152b0 <RegionAS923GetPhyParam+0x2d8>)
 80151f8:	61bb      	str	r3, [r7, #24]
            break;
 80151fa:	e048      	b.n	801528e <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = AS923_RX_WND_2_DR;
 80151fc:	2302      	movs	r3, #2
 80151fe:	61bb      	str	r3, [r7, #24]
            break;
 8015200:	e045      	b.n	801528e <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8015202:	4b26      	ldr	r3, [pc, #152]	@ (801529c <RegionAS923GetPhyParam+0x2c4>)
 8015204:	681b      	ldr	r3, [r3, #0]
 8015206:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 801520a:	61bb      	str	r3, [r7, #24]
            break;
 801520c:	e03f      	b.n	801528e <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 801520e:	4b23      	ldr	r3, [pc, #140]	@ (801529c <RegionAS923GetPhyParam+0x2c4>)
 8015210:	681b      	ldr	r3, [r3, #0]
 8015212:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 8015216:	61bb      	str	r3, [r7, #24]
            break;
 8015218:	e039      	b.n	801528e <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = AS923_MAX_NB_CHANNELS;
 801521a:	2310      	movs	r3, #16
 801521c:	61bb      	str	r3, [r7, #24]
            break;
 801521e:	e036      	b.n	801528e <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 8015220:	4b1e      	ldr	r3, [pc, #120]	@ (801529c <RegionAS923GetPhyParam+0x2c4>)
 8015222:	681b      	ldr	r3, [r3, #0]
 8015224:	61bb      	str	r3, [r7, #24]
            break;
 8015226:	e032      	b.n	801528e <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = AS923_DEFAULT_UPLINK_DWELL_TIME;
 8015228:	2301      	movs	r3, #1
 801522a:	61bb      	str	r3, [r7, #24]
            break;
 801522c:	e02f      	b.n	801528e <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = AS923_DEFAULT_DOWNLINK_DWELL_TIME;
 801522e:	2300      	movs	r3, #0
 8015230:	61bb      	str	r3, [r7, #24]
            break;
 8015232:	e02c      	b.n	801528e <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = AS923_DEFAULT_MAX_EIRP;
 8015234:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8015238:	61bb      	str	r3, [r7, #24]
            break;
 801523a:	e028      	b.n	801528e <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = AS923_DEFAULT_ANTENNA_GAIN;
 801523c:	4b1d      	ldr	r3, [pc, #116]	@ (80152b4 <RegionAS923GetPhyParam+0x2dc>)
 801523e:	61bb      	str	r3, [r7, #24]
            break;
 8015240:	e025      	b.n	801528e <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = AS923_BEACON_CHANNEL_FREQ - REGION_AS923_FREQ_OFFSET;
 8015242:	4b1d      	ldr	r3, [pc, #116]	@ (80152b8 <RegionAS923GetPhyParam+0x2e0>)
 8015244:	61bb      	str	r3, [r7, #24]
            break;
 8015246:	e022      	b.n	801528e <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = AS923_BEACON_SIZE;
 8015248:	2311      	movs	r3, #17
 801524a:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = AS923_RFU1_SIZE;
 801524c:	2301      	movs	r3, #1
 801524e:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = AS923_RFU2_SIZE;
 8015250:	2300      	movs	r3, #0
 8015252:	76bb      	strb	r3, [r7, #26]
            break;
 8015254:	e01b      	b.n	801528e <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = AS923_BEACON_CHANNEL_DR;
 8015256:	2303      	movs	r3, #3
 8015258:	61bb      	str	r3, [r7, #24]
            break;
 801525a:	e018      	b.n	801528e <RegionAS923GetPhyParam+0x2b6>
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
            phyParam.Value = AS923_PING_SLOT_CHANNEL_FREQ;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            phyParam.Value = AS923_PING_SLOT_CHANNEL_FREQ - REGION_AS923_FREQ_OFFSET;
 801525c:	4b16      	ldr	r3, [pc, #88]	@ (80152b8 <RegionAS923GetPhyParam+0x2e0>)
 801525e:	61bb      	str	r3, [r7, #24]
#endif /* REGION_VERSION */
            break;
 8015260:	e015      	b.n	801528e <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = AS923_PING_SLOT_CHANNEL_DR;
 8015262:	2303      	movs	r3, #3
 8015264:	61bb      	str	r3, [r7, #24]
            break;
 8015266:	e012      	b.n	801528e <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesAS923[getPhy->Datarate];
 8015268:	687b      	ldr	r3, [r7, #4]
 801526a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801526e:	461a      	mov	r2, r3
 8015270:	4b12      	ldr	r3, [pc, #72]	@ (80152bc <RegionAS923GetPhyParam+0x2e4>)
 8015272:	5c9b      	ldrb	r3, [r3, r2]
 8015274:	61bb      	str	r3, [r7, #24]
            break;
 8015276:	e00a      	b.n	801528e <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsAS923 );
 8015278:	687b      	ldr	r3, [r7, #4]
 801527a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801527e:	4910      	ldr	r1, [pc, #64]	@ (80152c0 <RegionAS923GetPhyParam+0x2e8>)
 8015280:	4618      	mov	r0, r3
 8015282:	f001 fea1 	bl	8016fc8 <RegionCommonGetBandwidth>
 8015286:	4603      	mov	r3, r0
 8015288:	61bb      	str	r3, [r7, #24]
            break;
 801528a:	e000      	b.n	801528e <RegionAS923GetPhyParam+0x2b6>
        }
        default:
        {
            break;
 801528c:	bf00      	nop
        }
    }

#endif /* REGION_AS923 */
    return phyParam;
 801528e:	69bb      	ldr	r3, [r7, #24]
 8015290:	61fb      	str	r3, [r7, #28]
 8015292:	69fb      	ldr	r3, [r7, #28]
}
 8015294:	4618      	mov	r0, r3
 8015296:	3720      	adds	r7, #32
 8015298:	46bd      	mov	sp, r7
 801529a:	bd80      	pop	{r7, pc}
 801529c:	20001be8 	.word	0x20001be8
 80152a0:	0801f5f4 	.word	0x0801f5f4
 80152a4:	0801f604 	.word	0x0801f604
 80152a8:	0801f5fc 	.word	0x0801f5fc
 80152ac:	fffffc18 	.word	0xfffffc18
 80152b0:	3706ea00 	.word	0x3706ea00
 80152b4:	4009999a 	.word	0x4009999a
 80152b8:	3709f740 	.word	0x3709f740
 80152bc:	0801f5cc 	.word	0x0801f5cc
 80152c0:	0801f5d4 	.word	0x0801f5d4

080152c4 <RegionAS923SetBandTxDone>:

void RegionAS923SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 80152c4:	b590      	push	{r4, r7, lr}
 80152c6:	b085      	sub	sp, #20
 80152c8:	af02      	add	r7, sp, #8
 80152ca:	6078      	str	r0, [r7, #4]
#if defined( REGION_AS923 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 80152cc:	4b11      	ldr	r3, [pc, #68]	@ (8015314 <RegionAS923SetBandTxDone+0x50>)
 80152ce:	681a      	ldr	r2, [r3, #0]
 80152d0:	4b11      	ldr	r3, [pc, #68]	@ (8015318 <RegionAS923SetBandTxDone+0x54>)
 80152d2:	6819      	ldr	r1, [r3, #0]
 80152d4:	687b      	ldr	r3, [r7, #4]
 80152d6:	781b      	ldrb	r3, [r3, #0]
 80152d8:	4618      	mov	r0, r3
 80152da:	4603      	mov	r3, r0
 80152dc:	005b      	lsls	r3, r3, #1
 80152de:	4403      	add	r3, r0
 80152e0:	009b      	lsls	r3, r3, #2
 80152e2:	440b      	add	r3, r1
 80152e4:	3309      	adds	r3, #9
 80152e6:	781b      	ldrb	r3, [r3, #0]
 80152e8:	4619      	mov	r1, r3
 80152ea:	460b      	mov	r3, r1
 80152ec:	005b      	lsls	r3, r3, #1
 80152ee:	440b      	add	r3, r1
 80152f0:	00db      	lsls	r3, r3, #3
 80152f2:	18d0      	adds	r0, r2, r3
 80152f4:	687b      	ldr	r3, [r7, #4]
 80152f6:	6899      	ldr	r1, [r3, #8]
 80152f8:	687b      	ldr	r3, [r7, #4]
 80152fa:	785c      	ldrb	r4, [r3, #1]
 80152fc:	687b      	ldr	r3, [r7, #4]
 80152fe:	691a      	ldr	r2, [r3, #16]
 8015300:	9200      	str	r2, [sp, #0]
 8015302:	68db      	ldr	r3, [r3, #12]
 8015304:	4622      	mov	r2, r4
 8015306:	f001 f9e5 	bl	80166d4 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_AS923 */
}
 801530a:	bf00      	nop
 801530c:	370c      	adds	r7, #12
 801530e:	46bd      	mov	sp, r7
 8015310:	bd90      	pop	{r4, r7, pc}
 8015312:	bf00      	nop
 8015314:	20001bec 	.word	0x20001bec
 8015318:	20001be8 	.word	0x20001be8

0801531c <RegionAS923InitDefaults>:

void RegionAS923InitDefaults( InitDefaultsParams_t* params )
{
 801531c:	b580      	push	{r7, lr}
 801531e:	b08e      	sub	sp, #56	@ 0x38
 8015320:	af00      	add	r7, sp, #0
 8015322:	6078      	str	r0, [r7, #4]
#if defined( REGION_AS923 )
    Band_t bands[AS923_MAX_NB_BANDS] =
 8015324:	2364      	movs	r3, #100	@ 0x64
 8015326:	843b      	strh	r3, [r7, #32]
 8015328:	2300      	movs	r3, #0
 801532a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 801532e:	2300      	movs	r3, #0
 8015330:	627b      	str	r3, [r7, #36]	@ 0x24
 8015332:	2300      	movs	r3, #0
 8015334:	62bb      	str	r3, [r7, #40]	@ 0x28
 8015336:	2300      	movs	r3, #0
 8015338:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801533a:	2300      	movs	r3, #0
 801533c:	633b      	str	r3, [r7, #48]	@ 0x30
 801533e:	2300      	movs	r3, #0
 8015340:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    {
        AS923_BAND0
    };

    switch( params->Type )
 8015344:	687b      	ldr	r3, [r7, #4]
 8015346:	7b1b      	ldrb	r3, [r3, #12]
 8015348:	2b02      	cmp	r3, #2
 801534a:	d05e      	beq.n	801540a <RegionAS923InitDefaults+0xee>
 801534c:	2b02      	cmp	r3, #2
 801534e:	dc6b      	bgt.n	8015428 <RegionAS923InitDefaults+0x10c>
 8015350:	2b00      	cmp	r3, #0
 8015352:	d002      	beq.n	801535a <RegionAS923InitDefaults+0x3e>
 8015354:	2b01      	cmp	r3, #1
 8015356:	d043      	beq.n	80153e0 <RegionAS923InitDefaults+0xc4>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 8015358:	e066      	b.n	8015428 <RegionAS923InitDefaults+0x10c>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 801535a:	687b      	ldr	r3, [r7, #4]
 801535c:	681b      	ldr	r3, [r3, #0]
 801535e:	2b00      	cmp	r3, #0
 8015360:	d063      	beq.n	801542a <RegionAS923InitDefaults+0x10e>
 8015362:	687b      	ldr	r3, [r7, #4]
 8015364:	685b      	ldr	r3, [r3, #4]
 8015366:	2b00      	cmp	r3, #0
 8015368:	d05f      	beq.n	801542a <RegionAS923InitDefaults+0x10e>
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 801536a:	687b      	ldr	r3, [r7, #4]
 801536c:	685b      	ldr	r3, [r3, #4]
 801536e:	4a30      	ldr	r2, [pc, #192]	@ (8015430 <RegionAS923InitDefaults+0x114>)
 8015370:	6013      	str	r3, [r2, #0]
            RegionBands = (Band_t*) params->Bands;
 8015372:	687b      	ldr	r3, [r7, #4]
 8015374:	689b      	ldr	r3, [r3, #8]
 8015376:	4a2f      	ldr	r2, [pc, #188]	@ (8015434 <RegionAS923InitDefaults+0x118>)
 8015378:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * AS923_MAX_NB_BANDS );
 801537a:	4b2e      	ldr	r3, [pc, #184]	@ (8015434 <RegionAS923InitDefaults+0x118>)
 801537c:	681b      	ldr	r3, [r3, #0]
 801537e:	f107 0120 	add.w	r1, r7, #32
 8015382:	2218      	movs	r2, #24
 8015384:	4618      	mov	r0, r3
 8015386:	f001 fece 	bl	8017126 <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) AS923_LC1;
 801538a:	4b29      	ldr	r3, [pc, #164]	@ (8015430 <RegionAS923InitDefaults+0x114>)
 801538c:	681b      	ldr	r3, [r3, #0]
 801538e:	4a2a      	ldr	r2, [pc, #168]	@ (8015438 <RegionAS923InitDefaults+0x11c>)
 8015390:	ca07      	ldmia	r2, {r0, r1, r2}
 8015392:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) AS923_LC2;
 8015396:	4b26      	ldr	r3, [pc, #152]	@ (8015430 <RegionAS923InitDefaults+0x114>)
 8015398:	681b      	ldr	r3, [r3, #0]
 801539a:	4a28      	ldr	r2, [pc, #160]	@ (801543c <RegionAS923InitDefaults+0x120>)
 801539c:	330c      	adds	r3, #12
 801539e:	ca07      	ldmia	r2, {r0, r1, r2}
 80153a0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[0].Frequency -= REGION_AS923_FREQ_OFFSET;
 80153a4:	4b22      	ldr	r3, [pc, #136]	@ (8015430 <RegionAS923InitDefaults+0x114>)
 80153a6:	681a      	ldr	r2, [r3, #0]
 80153a8:	4b21      	ldr	r3, [pc, #132]	@ (8015430 <RegionAS923InitDefaults+0x114>)
 80153aa:	681b      	ldr	r3, [r3, #0]
 80153ac:	6812      	ldr	r2, [r2, #0]
 80153ae:	601a      	str	r2, [r3, #0]
            RegionNvmGroup2->Channels[1].Frequency -= REGION_AS923_FREQ_OFFSET;
 80153b0:	4b1f      	ldr	r3, [pc, #124]	@ (8015430 <RegionAS923InitDefaults+0x114>)
 80153b2:	681a      	ldr	r2, [r3, #0]
 80153b4:	4b1e      	ldr	r3, [pc, #120]	@ (8015430 <RegionAS923InitDefaults+0x114>)
 80153b6:	681b      	ldr	r3, [r3, #0]
 80153b8:	68d2      	ldr	r2, [r2, #12]
 80153ba:	60da      	str	r2, [r3, #12]
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 );
 80153bc:	4b1c      	ldr	r3, [pc, #112]	@ (8015430 <RegionAS923InitDefaults+0x114>)
 80153be:	681b      	ldr	r3, [r3, #0]
 80153c0:	2203      	movs	r2, #3
 80153c2:	f8a3 236c 	strh.w	r2, [r3, #876]	@ 0x36c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 80153c6:	4b1a      	ldr	r3, [pc, #104]	@ (8015430 <RegionAS923InitDefaults+0x114>)
 80153c8:	681b      	ldr	r3, [r3, #0]
 80153ca:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 80153ce:	4b18      	ldr	r3, [pc, #96]	@ (8015430 <RegionAS923InitDefaults+0x114>)
 80153d0:	681b      	ldr	r3, [r3, #0]
 80153d2:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 80153d6:	2201      	movs	r2, #1
 80153d8:	4619      	mov	r1, r3
 80153da:	f001 f955 	bl	8016688 <RegionCommonChanMaskCopy>
 80153de:	e024      	b.n	801542a <RegionAS923InitDefaults+0x10e>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 80153e0:	4b13      	ldr	r3, [pc, #76]	@ (8015430 <RegionAS923InitDefaults+0x114>)
 80153e2:	681b      	ldr	r3, [r3, #0]
 80153e4:	2200      	movs	r2, #0
 80153e6:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 80153e8:	4b11      	ldr	r3, [pc, #68]	@ (8015430 <RegionAS923InitDefaults+0x114>)
 80153ea:	681b      	ldr	r3, [r3, #0]
 80153ec:	2200      	movs	r2, #0
 80153ee:	611a      	str	r2, [r3, #16]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 80153f0:	4b0f      	ldr	r3, [pc, #60]	@ (8015430 <RegionAS923InitDefaults+0x114>)
 80153f2:	681b      	ldr	r3, [r3, #0]
 80153f4:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 80153f8:	4b0d      	ldr	r3, [pc, #52]	@ (8015430 <RegionAS923InitDefaults+0x114>)
 80153fa:	681b      	ldr	r3, [r3, #0]
 80153fc:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 8015400:	2201      	movs	r2, #1
 8015402:	4619      	mov	r1, r3
 8015404:	f001 f940 	bl	8016688 <RegionCommonChanMaskCopy>
            break;
 8015408:	e00f      	b.n	801542a <RegionAS923InitDefaults+0x10e>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 801540a:	4b09      	ldr	r3, [pc, #36]	@ (8015430 <RegionAS923InitDefaults+0x114>)
 801540c:	681b      	ldr	r3, [r3, #0]
 801540e:	f8b3 1360 	ldrh.w	r1, [r3, #864]	@ 0x360
 8015412:	4b07      	ldr	r3, [pc, #28]	@ (8015430 <RegionAS923InitDefaults+0x114>)
 8015414:	681b      	ldr	r3, [r3, #0]
 8015416:	f8b3 236c 	ldrh.w	r2, [r3, #876]	@ 0x36c
 801541a:	4b05      	ldr	r3, [pc, #20]	@ (8015430 <RegionAS923InitDefaults+0x114>)
 801541c:	681b      	ldr	r3, [r3, #0]
 801541e:	430a      	orrs	r2, r1
 8015420:	b292      	uxth	r2, r2
 8015422:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
            break;
 8015426:	e000      	b.n	801542a <RegionAS923InitDefaults+0x10e>
            break;
 8015428:	bf00      	nop
        }
    }
#endif /* REGION_AS923 */
}
 801542a:	3738      	adds	r7, #56	@ 0x38
 801542c:	46bd      	mov	sp, r7
 801542e:	bd80      	pop	{r7, pc}
 8015430:	20001be8 	.word	0x20001be8
 8015434:	20001bec 	.word	0x20001bec
 8015438:	0801f008 	.word	0x0801f008
 801543c:	0801f014 	.word	0x0801f014

08015440 <RegionAS923Verify>:

bool RegionAS923Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8015440:	b580      	push	{r7, lr}
 8015442:	b082      	sub	sp, #8
 8015444:	af00      	add	r7, sp, #0
 8015446:	6078      	str	r0, [r7, #4]
 8015448:	460b      	mov	r3, r1
 801544a:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_AS923 )
    switch( phyAttribute )
 801544c:	78fb      	ldrb	r3, [r7, #3]
 801544e:	2b0f      	cmp	r3, #15
 8015450:	f200 808f 	bhi.w	8015572 <RegionAS923Verify+0x132>
 8015454:	a201      	add	r2, pc, #4	@ (adr r2, 801545c <RegionAS923Verify+0x1c>)
 8015456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801545a:	bf00      	nop
 801545c:	0801549d 	.word	0x0801549d
 8015460:	08015573 	.word	0x08015573
 8015464:	08015573 	.word	0x08015573
 8015468:	08015573 	.word	0x08015573
 801546c:	08015573 	.word	0x08015573
 8015470:	080154ab 	.word	0x080154ab
 8015474:	080154ef 	.word	0x080154ef
 8015478:	0801550d 	.word	0x0801550d
 801547c:	08015573 	.word	0x08015573
 8015480:	08015551 	.word	0x08015551
 8015484:	08015551 	.word	0x08015551
 8015488:	08015573 	.word	0x08015573
 801548c:	08015573 	.word	0x08015573
 8015490:	08015573 	.word	0x08015573
 8015494:	08015573 	.word	0x08015573
 8015498:	0801556f 	.word	0x0801556f
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 801549c:	687b      	ldr	r3, [r7, #4]
 801549e:	681b      	ldr	r3, [r3, #0]
 80154a0:	4618      	mov	r0, r3
 80154a2:	f7ff fd23 	bl	8014eec <VerifyRfFreq>
 80154a6:	4603      	mov	r3, r0
 80154a8:	e064      	b.n	8015574 <RegionAS923Verify+0x134>
        }
        case PHY_TX_DR:
        {
            if( verify->DatarateParams.UplinkDwellTime == 0 )
 80154aa:	687b      	ldr	r3, [r7, #4]
 80154ac:	789b      	ldrb	r3, [r3, #2]
 80154ae:	2b00      	cmp	r3, #0
 80154b0:	d10e      	bne.n	80154d0 <RegionAS923Verify+0x90>
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_TX_MIN_DATARATE, AS923_TX_MAX_DATARATE );
 80154b2:	687b      	ldr	r3, [r7, #4]
 80154b4:	f993 3000 	ldrsb.w	r3, [r3]
 80154b8:	2207      	movs	r2, #7
 80154ba:	2100      	movs	r1, #0
 80154bc:	4618      	mov	r0, r3
 80154be:	f001 f866 	bl	801658e <RegionCommonValueInRange>
 80154c2:	4603      	mov	r3, r0
 80154c4:	2b00      	cmp	r3, #0
 80154c6:	bf14      	ite	ne
 80154c8:	2301      	movne	r3, #1
 80154ca:	2300      	moveq	r3, #0
 80154cc:	b2db      	uxtb	r3, r3
 80154ce:	e051      	b.n	8015574 <RegionAS923Verify+0x134>
            }
            else
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_DWELL_LIMIT_DATARATE, AS923_TX_MAX_DATARATE );
 80154d0:	687b      	ldr	r3, [r7, #4]
 80154d2:	f993 3000 	ldrsb.w	r3, [r3]
 80154d6:	2207      	movs	r2, #7
 80154d8:	2102      	movs	r1, #2
 80154da:	4618      	mov	r0, r3
 80154dc:	f001 f857 	bl	801658e <RegionCommonValueInRange>
 80154e0:	4603      	mov	r3, r0
 80154e2:	2b00      	cmp	r3, #0
 80154e4:	bf14      	ite	ne
 80154e6:	2301      	movne	r3, #1
 80154e8:	2300      	moveq	r3, #0
 80154ea:	b2db      	uxtb	r3, r3
 80154ec:	e042      	b.n	8015574 <RegionAS923Verify+0x134>
            }
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 80154ee:	687b      	ldr	r3, [r7, #4]
 80154f0:	f993 3000 	ldrsb.w	r3, [r3]
 80154f4:	2205      	movs	r2, #5
 80154f6:	2100      	movs	r1, #0
 80154f8:	4618      	mov	r0, r3
 80154fa:	f001 f848 	bl	801658e <RegionCommonValueInRange>
 80154fe:	4603      	mov	r3, r0
 8015500:	2b00      	cmp	r3, #0
 8015502:	bf14      	ite	ne
 8015504:	2301      	movne	r3, #1
 8015506:	2300      	moveq	r3, #0
 8015508:	b2db      	uxtb	r3, r3
 801550a:	e033      	b.n	8015574 <RegionAS923Verify+0x134>
        }
        case PHY_RX_DR:
        {
            if( verify->DatarateParams.DownlinkDwellTime == 0 )
 801550c:	687b      	ldr	r3, [r7, #4]
 801550e:	785b      	ldrb	r3, [r3, #1]
 8015510:	2b00      	cmp	r3, #0
 8015512:	d10e      	bne.n	8015532 <RegionAS923Verify+0xf2>
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_RX_MIN_DATARATE, AS923_RX_MAX_DATARATE );
 8015514:	687b      	ldr	r3, [r7, #4]
 8015516:	f993 3000 	ldrsb.w	r3, [r3]
 801551a:	2207      	movs	r2, #7
 801551c:	2100      	movs	r1, #0
 801551e:	4618      	mov	r0, r3
 8015520:	f001 f835 	bl	801658e <RegionCommonValueInRange>
 8015524:	4603      	mov	r3, r0
 8015526:	2b00      	cmp	r3, #0
 8015528:	bf14      	ite	ne
 801552a:	2301      	movne	r3, #1
 801552c:	2300      	moveq	r3, #0
 801552e:	b2db      	uxtb	r3, r3
 8015530:	e020      	b.n	8015574 <RegionAS923Verify+0x134>
            }
            else
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_DWELL_LIMIT_DATARATE, AS923_RX_MAX_DATARATE );
 8015532:	687b      	ldr	r3, [r7, #4]
 8015534:	f993 3000 	ldrsb.w	r3, [r3]
 8015538:	2207      	movs	r2, #7
 801553a:	2102      	movs	r1, #2
 801553c:	4618      	mov	r0, r3
 801553e:	f001 f826 	bl	801658e <RegionCommonValueInRange>
 8015542:	4603      	mov	r3, r0
 8015544:	2b00      	cmp	r3, #0
 8015546:	bf14      	ite	ne
 8015548:	2301      	movne	r3, #1
 801554a:	2300      	moveq	r3, #0
 801554c:	b2db      	uxtb	r3, r3
 801554e:	e011      	b.n	8015574 <RegionAS923Verify+0x134>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, AS923_MAX_TX_POWER, AS923_MIN_TX_POWER );
 8015550:	687b      	ldr	r3, [r7, #4]
 8015552:	f993 3000 	ldrsb.w	r3, [r3]
 8015556:	2207      	movs	r2, #7
 8015558:	2100      	movs	r1, #0
 801555a:	4618      	mov	r0, r3
 801555c:	f001 f817 	bl	801658e <RegionCommonValueInRange>
 8015560:	4603      	mov	r3, r0
 8015562:	2b00      	cmp	r3, #0
 8015564:	bf14      	ite	ne
 8015566:	2301      	movne	r3, #1
 8015568:	2300      	moveq	r3, #0
 801556a:	b2db      	uxtb	r3, r3
 801556c:	e002      	b.n	8015574 <RegionAS923Verify+0x134>
        }
        case PHY_DUTY_CYCLE:
        {
            return AS923_DUTY_CYCLE_ENABLED;
 801556e:	2300      	movs	r3, #0
 8015570:	e000      	b.n	8015574 <RegionAS923Verify+0x134>
        }
        default:
            return false;
 8015572:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_AS923 */
}
 8015574:	4618      	mov	r0, r3
 8015576:	3708      	adds	r7, #8
 8015578:	46bd      	mov	sp, r7
 801557a:	bd80      	pop	{r7, pc}

0801557c <RegionAS923ApplyCFList>:

void RegionAS923ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 801557c:	b580      	push	{r7, lr}
 801557e:	b08a      	sub	sp, #40	@ 0x28
 8015580:	af00      	add	r7, sp, #0
 8015582:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8015584:	2350      	movs	r3, #80	@ 0x50
 8015586:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 801558a:	687b      	ldr	r3, [r7, #4]
 801558c:	7a1b      	ldrb	r3, [r3, #8]
 801558e:	2b10      	cmp	r3, #16
 8015590:	d162      	bne.n	8015658 <RegionAS923ApplyCFList+0xdc>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 8015592:	687b      	ldr	r3, [r7, #4]
 8015594:	685b      	ldr	r3, [r3, #4]
 8015596:	330f      	adds	r3, #15
 8015598:	781b      	ldrb	r3, [r3, #0]
 801559a:	2b00      	cmp	r3, #0
 801559c:	d15e      	bne.n	801565c <RegionAS923ApplyCFList+0xe0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = AS923_NUMB_DEFAULT_CHANNELS; chanIdx < AS923_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 801559e:	2300      	movs	r3, #0
 80155a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80155a4:	2302      	movs	r3, #2
 80155a6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80155aa:	e050      	b.n	801564e <RegionAS923ApplyCFList+0xd2>
    {
        if( chanIdx < ( AS923_NUMB_CHANNELS_CF_LIST + AS923_NUMB_DEFAULT_CHANNELS ) )
 80155ac:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80155b0:	2b06      	cmp	r3, #6
 80155b2:	d824      	bhi.n	80155fe <RegionAS923ApplyCFList+0x82>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 80155b4:	687b      	ldr	r3, [r7, #4]
 80155b6:	685a      	ldr	r2, [r3, #4]
 80155b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80155bc:	4413      	add	r3, r2
 80155be:	781b      	ldrb	r3, [r3, #0]
 80155c0:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 80155c2:	69ba      	ldr	r2, [r7, #24]
 80155c4:	687b      	ldr	r3, [r7, #4]
 80155c6:	6859      	ldr	r1, [r3, #4]
 80155c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80155cc:	3301      	adds	r3, #1
 80155ce:	440b      	add	r3, r1
 80155d0:	781b      	ldrb	r3, [r3, #0]
 80155d2:	021b      	lsls	r3, r3, #8
 80155d4:	4313      	orrs	r3, r2
 80155d6:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 80155d8:	69ba      	ldr	r2, [r7, #24]
 80155da:	687b      	ldr	r3, [r7, #4]
 80155dc:	6859      	ldr	r1, [r3, #4]
 80155de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80155e2:	3302      	adds	r3, #2
 80155e4:	440b      	add	r3, r1
 80155e6:	781b      	ldrb	r3, [r3, #0]
 80155e8:	041b      	lsls	r3, r3, #16
 80155ea:	4313      	orrs	r3, r2
 80155ec:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency *= 100;
 80155ee:	69bb      	ldr	r3, [r7, #24]
 80155f0:	2264      	movs	r2, #100	@ 0x64
 80155f2:	fb02 f303 	mul.w	r3, r2, r3
 80155f6:	61bb      	str	r3, [r7, #24]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 80155f8:	2300      	movs	r3, #0
 80155fa:	61fb      	str	r3, [r7, #28]
 80155fc:	e006      	b.n	801560c <RegionAS923ApplyCFList+0x90>
        }
        else
        {
            newChannel.Frequency = 0;
 80155fe:	2300      	movs	r3, #0
 8015600:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 8015602:	2300      	movs	r3, #0
 8015604:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 8015608:	2300      	movs	r3, #0
 801560a:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 801560c:	69bb      	ldr	r3, [r7, #24]
 801560e:	2b00      	cmp	r3, #0
 8015610:	d00b      	beq.n	801562a <RegionAS923ApplyCFList+0xae>
        {
            channelAdd.NewChannel = &newChannel;
 8015612:	f107 0318 	add.w	r3, r7, #24
 8015616:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 8015618:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801561c:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionAS923ChannelAdd( &channelAdd );
 801561e:	f107 0310 	add.w	r3, r7, #16
 8015622:	4618      	mov	r0, r3
 8015624:	f000 fd00 	bl	8016028 <RegionAS923ChannelAdd>
 8015628:	e007      	b.n	801563a <RegionAS923ApplyCFList+0xbe>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 801562a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801562e:	733b      	strb	r3, [r7, #12]

            RegionAS923ChannelsRemove( &channelRemove );
 8015630:	f107 030c 	add.w	r3, r7, #12
 8015634:	4618      	mov	r0, r3
 8015636:	f000 fd93 	bl	8016160 <RegionAS923ChannelsRemove>
    for( uint8_t i = 0, chanIdx = AS923_NUMB_DEFAULT_CHANNELS; chanIdx < AS923_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 801563a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801563e:	3303      	adds	r3, #3
 8015640:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015644:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015648:	3301      	adds	r3, #1
 801564a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801564e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015652:	2b0f      	cmp	r3, #15
 8015654:	d9aa      	bls.n	80155ac <RegionAS923ApplyCFList+0x30>
 8015656:	e002      	b.n	801565e <RegionAS923ApplyCFList+0xe2>
        return;
 8015658:	bf00      	nop
 801565a:	e000      	b.n	801565e <RegionAS923ApplyCFList+0xe2>
        return;
 801565c:	bf00      	nop
        }
    }
#endif /* REGION_AS923 */
}
 801565e:	3728      	adds	r7, #40	@ 0x28
 8015660:	46bd      	mov	sp, r7
 8015662:	bd80      	pop	{r7, pc}

08015664 <RegionAS923ChanMaskSet>:

bool RegionAS923ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8015664:	b580      	push	{r7, lr}
 8015666:	b082      	sub	sp, #8
 8015668:	af00      	add	r7, sp, #0
 801566a:	6078      	str	r0, [r7, #4]
#if defined( REGION_AS923 )
    switch( chanMaskSet->ChannelsMaskType )
 801566c:	687b      	ldr	r3, [r7, #4]
 801566e:	791b      	ldrb	r3, [r3, #4]
 8015670:	2b00      	cmp	r3, #0
 8015672:	d002      	beq.n	801567a <RegionAS923ChanMaskSet+0x16>
 8015674:	2b01      	cmp	r3, #1
 8015676:	d00b      	beq.n	8015690 <RegionAS923ChanMaskSet+0x2c>
 8015678:	e015      	b.n	80156a6 <RegionAS923ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, 1 );
 801567a:	4b0e      	ldr	r3, [pc, #56]	@ (80156b4 <RegionAS923ChanMaskSet+0x50>)
 801567c:	681b      	ldr	r3, [r3, #0]
 801567e:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 8015682:	687b      	ldr	r3, [r7, #4]
 8015684:	681b      	ldr	r3, [r3, #0]
 8015686:	2201      	movs	r2, #1
 8015688:	4619      	mov	r1, r3
 801568a:	f000 fffd 	bl	8016688 <RegionCommonChanMaskCopy>
            break;
 801568e:	e00c      	b.n	80156aa <RegionAS923ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 1 );
 8015690:	4b08      	ldr	r3, [pc, #32]	@ (80156b4 <RegionAS923ChanMaskSet+0x50>)
 8015692:	681b      	ldr	r3, [r3, #0]
 8015694:	f503 705b 	add.w	r0, r3, #876	@ 0x36c
 8015698:	687b      	ldr	r3, [r7, #4]
 801569a:	681b      	ldr	r3, [r3, #0]
 801569c:	2201      	movs	r2, #1
 801569e:	4619      	mov	r1, r3
 80156a0:	f000 fff2 	bl	8016688 <RegionCommonChanMaskCopy>
            break;
 80156a4:	e001      	b.n	80156aa <RegionAS923ChanMaskSet+0x46>
        }
        default:
            return false;
 80156a6:	2300      	movs	r3, #0
 80156a8:	e000      	b.n	80156ac <RegionAS923ChanMaskSet+0x48>
    }
    return true;
 80156aa:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_AS923 */
}
 80156ac:	4618      	mov	r0, r3
 80156ae:	3708      	adds	r7, #8
 80156b0:	46bd      	mov	sp, r7
 80156b2:	bd80      	pop	{r7, pc}
 80156b4:	20001be8 	.word	0x20001be8

080156b8 <RegionAS923ComputeRxWindowParameters>:

void RegionAS923ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 80156b8:	b580      	push	{r7, lr}
 80156ba:	b088      	sub	sp, #32
 80156bc:	af02      	add	r7, sp, #8
 80156be:	60ba      	str	r2, [r7, #8]
 80156c0:	607b      	str	r3, [r7, #4]
 80156c2:	4603      	mov	r3, r0
 80156c4:	73fb      	strb	r3, [r7, #15]
 80156c6:	460b      	mov	r3, r1
 80156c8:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_AS923 )
    uint32_t tSymbolInUs = 0;
 80156ca:	2300      	movs	r3, #0
 80156cc:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, AS923_RX_MAX_DATARATE );
 80156ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80156d2:	2b07      	cmp	r3, #7
 80156d4:	bfa8      	it	ge
 80156d6:	2307      	movge	r3, #7
 80156d8:	b25a      	sxtb	r2, r3
 80156da:	687b      	ldr	r3, [r7, #4]
 80156dc:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsAS923 );
 80156de:	687b      	ldr	r3, [r7, #4]
 80156e0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80156e4:	491e      	ldr	r1, [pc, #120]	@ (8015760 <RegionAS923ComputeRxWindowParameters+0xa8>)
 80156e6:	4618      	mov	r0, r3
 80156e8:	f001 fc6e 	bl	8016fc8 <RegionCommonGetBandwidth>
 80156ec:	4603      	mov	r3, r0
 80156ee:	b2da      	uxtb	r2, r3
 80156f0:	687b      	ldr	r3, [r7, #4]
 80156f2:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 80156f4:	687b      	ldr	r3, [r7, #4]
 80156f6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80156fa:	2b07      	cmp	r3, #7
 80156fc:	d10a      	bne.n	8015714 <RegionAS923ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesAS923[rxConfigParams->Datarate] );
 80156fe:	687b      	ldr	r3, [r7, #4]
 8015700:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015704:	461a      	mov	r2, r3
 8015706:	4b17      	ldr	r3, [pc, #92]	@ (8015764 <RegionAS923ComputeRxWindowParameters+0xac>)
 8015708:	5c9b      	ldrb	r3, [r3, r2]
 801570a:	4618      	mov	r0, r3
 801570c:	f001 f9f0 	bl	8016af0 <RegionCommonComputeSymbolTimeFsk>
 8015710:	6178      	str	r0, [r7, #20]
 8015712:	e011      	b.n	8015738 <RegionAS923ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesAS923[rxConfigParams->Datarate], BandwidthsAS923[rxConfigParams->Datarate] );
 8015714:	687b      	ldr	r3, [r7, #4]
 8015716:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801571a:	461a      	mov	r2, r3
 801571c:	4b11      	ldr	r3, [pc, #68]	@ (8015764 <RegionAS923ComputeRxWindowParameters+0xac>)
 801571e:	5c9a      	ldrb	r2, [r3, r2]
 8015720:	687b      	ldr	r3, [r7, #4]
 8015722:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015726:	4619      	mov	r1, r3
 8015728:	4b0d      	ldr	r3, [pc, #52]	@ (8015760 <RegionAS923ComputeRxWindowParameters+0xa8>)
 801572a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801572e:	4619      	mov	r1, r3
 8015730:	4610      	mov	r0, r2
 8015732:	f001 f9c7 	bl	8016ac4 <RegionCommonComputeSymbolTimeLoRa>
 8015736:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8015738:	4b0b      	ldr	r3, [pc, #44]	@ (8015768 <RegionAS923ComputeRxWindowParameters+0xb0>)
 801573a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801573c:	4798      	blx	r3
 801573e:	687b      	ldr	r3, [r7, #4]
 8015740:	3308      	adds	r3, #8
 8015742:	687a      	ldr	r2, [r7, #4]
 8015744:	320c      	adds	r2, #12
 8015746:	7bb9      	ldrb	r1, [r7, #14]
 8015748:	9201      	str	r2, [sp, #4]
 801574a:	9300      	str	r3, [sp, #0]
 801574c:	4603      	mov	r3, r0
 801574e:	68ba      	ldr	r2, [r7, #8]
 8015750:	6978      	ldr	r0, [r7, #20]
 8015752:	f001 f9dd 	bl	8016b10 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_AS923 */
}
 8015756:	bf00      	nop
 8015758:	3718      	adds	r7, #24
 801575a:	46bd      	mov	sp, r7
 801575c:	bd80      	pop	{r7, pc}
 801575e:	bf00      	nop
 8015760:	0801f5d4 	.word	0x0801f5d4
 8015764:	0801f5cc 	.word	0x0801f5cc
 8015768:	0801f68c 	.word	0x0801f68c

0801576c <RegionAS923RxConfig>:

bool RegionAS923RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 801576c:	b5b0      	push	{r4, r5, r7, lr}
 801576e:	b090      	sub	sp, #64	@ 0x40
 8015770:	af0a      	add	r7, sp, #40	@ 0x28
 8015772:	6078      	str	r0, [r7, #4]
 8015774:	6039      	str	r1, [r7, #0]
#if defined( REGION_AS923 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 8015776:	687b      	ldr	r3, [r7, #4]
 8015778:	785b      	ldrb	r3, [r3, #1]
 801577a:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 801577c:	2300      	movs	r3, #0
 801577e:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 8015780:	2300      	movs	r3, #0
 8015782:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 8015784:	687b      	ldr	r3, [r7, #4]
 8015786:	685b      	ldr	r3, [r3, #4]
 8015788:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 801578a:	4b5a      	ldr	r3, [pc, #360]	@ (80158f4 <RegionAS923RxConfig+0x188>)
 801578c:	685b      	ldr	r3, [r3, #4]
 801578e:	4798      	blx	r3
 8015790:	4603      	mov	r3, r0
 8015792:	2b00      	cmp	r3, #0
 8015794:	d001      	beq.n	801579a <RegionAS923RxConfig+0x2e>
    {
        return false;
 8015796:	2300      	movs	r3, #0
 8015798:	e0a8      	b.n	80158ec <RegionAS923RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 801579a:	687b      	ldr	r3, [r7, #4]
 801579c:	7cdb      	ldrb	r3, [r3, #19]
 801579e:	2b00      	cmp	r3, #0
 80157a0:	d126      	bne.n	80157f0 <RegionAS923RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 80157a2:	4b55      	ldr	r3, [pc, #340]	@ (80158f8 <RegionAS923RxConfig+0x18c>)
 80157a4:	681a      	ldr	r2, [r3, #0]
 80157a6:	687b      	ldr	r3, [r7, #4]
 80157a8:	781b      	ldrb	r3, [r3, #0]
 80157aa:	4619      	mov	r1, r3
 80157ac:	460b      	mov	r3, r1
 80157ae:	005b      	lsls	r3, r3, #1
 80157b0:	440b      	add	r3, r1
 80157b2:	009b      	lsls	r3, r3, #2
 80157b4:	4413      	add	r3, r2
 80157b6:	681b      	ldr	r3, [r3, #0]
 80157b8:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 80157ba:	4b4f      	ldr	r3, [pc, #316]	@ (80158f8 <RegionAS923RxConfig+0x18c>)
 80157bc:	681a      	ldr	r2, [r3, #0]
 80157be:	687b      	ldr	r3, [r7, #4]
 80157c0:	781b      	ldrb	r3, [r3, #0]
 80157c2:	4619      	mov	r1, r3
 80157c4:	460b      	mov	r3, r1
 80157c6:	005b      	lsls	r3, r3, #1
 80157c8:	440b      	add	r3, r1
 80157ca:	009b      	lsls	r3, r3, #2
 80157cc:	4413      	add	r3, r2
 80157ce:	3304      	adds	r3, #4
 80157d0:	681b      	ldr	r3, [r3, #0]
 80157d2:	2b00      	cmp	r3, #0
 80157d4:	d00c      	beq.n	80157f0 <RegionAS923RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 80157d6:	4b48      	ldr	r3, [pc, #288]	@ (80158f8 <RegionAS923RxConfig+0x18c>)
 80157d8:	681a      	ldr	r2, [r3, #0]
 80157da:	687b      	ldr	r3, [r7, #4]
 80157dc:	781b      	ldrb	r3, [r3, #0]
 80157de:	4619      	mov	r1, r3
 80157e0:	460b      	mov	r3, r1
 80157e2:	005b      	lsls	r3, r3, #1
 80157e4:	440b      	add	r3, r1
 80157e6:	009b      	lsls	r3, r3, #2
 80157e8:	4413      	add	r3, r2
 80157ea:	3304      	adds	r3, #4
 80157ec:	681b      	ldr	r3, [r3, #0]
 80157ee:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesAS923[dr];
 80157f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80157f4:	4a41      	ldr	r2, [pc, #260]	@ (80158fc <RegionAS923RxConfig+0x190>)
 80157f6:	5cd3      	ldrb	r3, [r2, r3]
 80157f8:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 80157fa:	4b3e      	ldr	r3, [pc, #248]	@ (80158f4 <RegionAS923RxConfig+0x188>)
 80157fc:	68db      	ldr	r3, [r3, #12]
 80157fe:	6938      	ldr	r0, [r7, #16]
 8015800:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 8015802:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015806:	2b07      	cmp	r3, #7
 8015808:	d128      	bne.n	801585c <RegionAS923RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 801580a:	2300      	movs	r3, #0
 801580c:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 801580e:	4b39      	ldr	r3, [pc, #228]	@ (80158f4 <RegionAS923RxConfig+0x188>)
 8015810:	699c      	ldr	r4, [r3, #24]
 8015812:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015816:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801581a:	fb02 f303 	mul.w	r3, r2, r3
 801581e:	4619      	mov	r1, r3
 8015820:	687b      	ldr	r3, [r7, #4]
 8015822:	689b      	ldr	r3, [r3, #8]
 8015824:	b29b      	uxth	r3, r3
 8015826:	687a      	ldr	r2, [r7, #4]
 8015828:	7c92      	ldrb	r2, [r2, #18]
 801582a:	7df8      	ldrb	r0, [r7, #23]
 801582c:	9209      	str	r2, [sp, #36]	@ 0x24
 801582e:	2200      	movs	r2, #0
 8015830:	9208      	str	r2, [sp, #32]
 8015832:	2200      	movs	r2, #0
 8015834:	9207      	str	r2, [sp, #28]
 8015836:	2200      	movs	r2, #0
 8015838:	9206      	str	r2, [sp, #24]
 801583a:	2201      	movs	r2, #1
 801583c:	9205      	str	r2, [sp, #20]
 801583e:	2200      	movs	r2, #0
 8015840:	9204      	str	r2, [sp, #16]
 8015842:	2200      	movs	r2, #0
 8015844:	9203      	str	r2, [sp, #12]
 8015846:	9302      	str	r3, [sp, #8]
 8015848:	2305      	movs	r3, #5
 801584a:	9301      	str	r3, [sp, #4]
 801584c:	4b2c      	ldr	r3, [pc, #176]	@ (8015900 <RegionAS923RxConfig+0x194>)
 801584e:	9300      	str	r3, [sp, #0]
 8015850:	2300      	movs	r3, #0
 8015852:	460a      	mov	r2, r1
 8015854:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8015858:	47a0      	blx	r4
 801585a:	e024      	b.n	80158a6 <RegionAS923RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 801585c:	2301      	movs	r3, #1
 801585e:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8015860:	4b24      	ldr	r3, [pc, #144]	@ (80158f4 <RegionAS923RxConfig+0x188>)
 8015862:	699c      	ldr	r4, [r3, #24]
 8015864:	687b      	ldr	r3, [r7, #4]
 8015866:	789b      	ldrb	r3, [r3, #2]
 8015868:	461d      	mov	r5, r3
 801586a:	f997 100e 	ldrsb.w	r1, [r7, #14]
 801586e:	687b      	ldr	r3, [r7, #4]
 8015870:	689b      	ldr	r3, [r3, #8]
 8015872:	b29b      	uxth	r3, r3
 8015874:	687a      	ldr	r2, [r7, #4]
 8015876:	7c92      	ldrb	r2, [r2, #18]
 8015878:	7df8      	ldrb	r0, [r7, #23]
 801587a:	9209      	str	r2, [sp, #36]	@ 0x24
 801587c:	2201      	movs	r2, #1
 801587e:	9208      	str	r2, [sp, #32]
 8015880:	2200      	movs	r2, #0
 8015882:	9207      	str	r2, [sp, #28]
 8015884:	2200      	movs	r2, #0
 8015886:	9206      	str	r2, [sp, #24]
 8015888:	2200      	movs	r2, #0
 801588a:	9205      	str	r2, [sp, #20]
 801588c:	2200      	movs	r2, #0
 801588e:	9204      	str	r2, [sp, #16]
 8015890:	2200      	movs	r2, #0
 8015892:	9203      	str	r2, [sp, #12]
 8015894:	9302      	str	r3, [sp, #8]
 8015896:	2308      	movs	r3, #8
 8015898:	9301      	str	r3, [sp, #4]
 801589a:	2300      	movs	r3, #0
 801589c:	9300      	str	r3, [sp, #0]
 801589e:	2301      	movs	r3, #1
 80158a0:	460a      	mov	r2, r1
 80158a2:	4629      	mov	r1, r5
 80158a4:	47a0      	blx	r4
    }

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 80158a6:	687b      	ldr	r3, [r7, #4]
 80158a8:	7c5b      	ldrb	r3, [r3, #17]
 80158aa:	2b00      	cmp	r3, #0
 80158ac:	d005      	beq.n	80158ba <RegionAS923RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterDwell0AS923[dr];
 80158ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80158b2:	4a14      	ldr	r2, [pc, #80]	@ (8015904 <RegionAS923RxConfig+0x198>)
 80158b4:	5cd3      	ldrb	r3, [r2, r3]
 80158b6:	75bb      	strb	r3, [r7, #22]
 80158b8:	e004      	b.n	80158c4 <RegionAS923RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateDwell0AS923[dr];
 80158ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80158be:	4a12      	ldr	r2, [pc, #72]	@ (8015908 <RegionAS923RxConfig+0x19c>)
 80158c0:	5cd3      	ldrb	r3, [r2, r3]
 80158c2:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 80158c4:	4b0b      	ldr	r3, [pc, #44]	@ (80158f4 <RegionAS923RxConfig+0x188>)
 80158c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80158c8:	7dba      	ldrb	r2, [r7, #22]
 80158ca:	320d      	adds	r2, #13
 80158cc:	b2d1      	uxtb	r1, r2
 80158ce:	7dfa      	ldrb	r2, [r7, #23]
 80158d0:	4610      	mov	r0, r2
 80158d2:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 80158d4:	687b      	ldr	r3, [r7, #4]
 80158d6:	7cdb      	ldrb	r3, [r3, #19]
 80158d8:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80158dc:	6939      	ldr	r1, [r7, #16]
 80158de:	4618      	mov	r0, r3
 80158e0:	f001 fb90 	bl	8017004 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 80158e4:	683b      	ldr	r3, [r7, #0]
 80158e6:	7bfa      	ldrb	r2, [r7, #15]
 80158e8:	701a      	strb	r2, [r3, #0]
    return true;
 80158ea:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_AS923 */
}
 80158ec:	4618      	mov	r0, r3
 80158ee:	3718      	adds	r7, #24
 80158f0:	46bd      	mov	sp, r7
 80158f2:	bdb0      	pop	{r4, r5, r7, pc}
 80158f4:	0801f68c 	.word	0x0801f68c
 80158f8:	20001be8 	.word	0x20001be8
 80158fc:	0801f5cc 	.word	0x0801f5cc
 8015900:	00014585 	.word	0x00014585
 8015904:	0801f5fc 	.word	0x0801f5fc
 8015908:	0801f5f4 	.word	0x0801f5f4

0801590c <RegionAS923TxConfig>:

bool RegionAS923TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 801590c:	b590      	push	{r4, r7, lr}
 801590e:	b093      	sub	sp, #76	@ 0x4c
 8015910:	af0a      	add	r7, sp, #40	@ 0x28
 8015912:	60f8      	str	r0, [r7, #12]
 8015914:	60b9      	str	r1, [r7, #8]
 8015916:	607a      	str	r2, [r7, #4]
#if defined( REGION_AS923 )
    RadioModems_t modem;
    int8_t phyDr = DataratesAS923[txConfig->Datarate];
 8015918:	68fb      	ldr	r3, [r7, #12]
 801591a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801591e:	461a      	mov	r2, r3
 8015920:	4b5d      	ldr	r3, [pc, #372]	@ (8015a98 <RegionAS923TxConfig+0x18c>)
 8015922:	5c9b      	ldrb	r3, [r3, r2]
 8015924:	77bb      	strb	r3, [r7, #30]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 8015926:	68fb      	ldr	r3, [r7, #12]
 8015928:	f993 0002 	ldrsb.w	r0, [r3, #2]
 801592c:	4b5b      	ldr	r3, [pc, #364]	@ (8015a9c <RegionAS923TxConfig+0x190>)
 801592e:	681a      	ldr	r2, [r3, #0]
 8015930:	4b5b      	ldr	r3, [pc, #364]	@ (8015aa0 <RegionAS923TxConfig+0x194>)
 8015932:	6819      	ldr	r1, [r3, #0]
 8015934:	68fb      	ldr	r3, [r7, #12]
 8015936:	781b      	ldrb	r3, [r3, #0]
 8015938:	461c      	mov	r4, r3
 801593a:	4623      	mov	r3, r4
 801593c:	005b      	lsls	r3, r3, #1
 801593e:	4423      	add	r3, r4
 8015940:	009b      	lsls	r3, r3, #2
 8015942:	440b      	add	r3, r1
 8015944:	3309      	adds	r3, #9
 8015946:	781b      	ldrb	r3, [r3, #0]
 8015948:	4619      	mov	r1, r3
 801594a:	460b      	mov	r3, r1
 801594c:	005b      	lsls	r3, r3, #1
 801594e:	440b      	add	r3, r1
 8015950:	00db      	lsls	r3, r3, #3
 8015952:	4413      	add	r3, r2
 8015954:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8015958:	4619      	mov	r1, r3
 801595a:	f001 fb20 	bl	8016f9e <RegionCommonLimitTxPower>
 801595e:	4603      	mov	r3, r0
 8015960:	777b      	strb	r3, [r7, #29]
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsAS923 );
 8015962:	68fb      	ldr	r3, [r7, #12]
 8015964:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015968:	494e      	ldr	r1, [pc, #312]	@ (8015aa4 <RegionAS923TxConfig+0x198>)
 801596a:	4618      	mov	r0, r3
 801596c:	f001 fb2c 	bl	8016fc8 <RegionCommonGetBandwidth>
 8015970:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 8015972:	2300      	movs	r3, #0
 8015974:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8015976:	68fb      	ldr	r3, [r7, #12]
 8015978:	6859      	ldr	r1, [r3, #4]
 801597a:	68fb      	ldr	r3, [r7, #12]
 801597c:	689a      	ldr	r2, [r3, #8]
 801597e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8015982:	4618      	mov	r0, r3
 8015984:	f001 f97c 	bl	8016c80 <RegionCommonComputeTxPower>
 8015988:	4603      	mov	r3, r0
 801598a:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 801598c:	4b46      	ldr	r3, [pc, #280]	@ (8015aa8 <RegionAS923TxConfig+0x19c>)
 801598e:	68da      	ldr	r2, [r3, #12]
 8015990:	4b43      	ldr	r3, [pc, #268]	@ (8015aa0 <RegionAS923TxConfig+0x194>)
 8015992:	6819      	ldr	r1, [r3, #0]
 8015994:	68fb      	ldr	r3, [r7, #12]
 8015996:	781b      	ldrb	r3, [r3, #0]
 8015998:	4618      	mov	r0, r3
 801599a:	4603      	mov	r3, r0
 801599c:	005b      	lsls	r3, r3, #1
 801599e:	4403      	add	r3, r0
 80159a0:	009b      	lsls	r3, r3, #2
 80159a2:	440b      	add	r3, r1
 80159a4:	681b      	ldr	r3, [r3, #0]
 80159a6:	4618      	mov	r0, r3
 80159a8:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 80159aa:	68fb      	ldr	r3, [r7, #12]
 80159ac:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80159b0:	2b07      	cmp	r3, #7
 80159b2:	d124      	bne.n	80159fe <RegionAS923TxConfig+0xf2>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 80159b4:	2300      	movs	r3, #0
 80159b6:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 80159b8:	4b3b      	ldr	r3, [pc, #236]	@ (8015aa8 <RegionAS923TxConfig+0x19c>)
 80159ba:	69dc      	ldr	r4, [r3, #28]
 80159bc:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80159c0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80159c4:	fb02 f303 	mul.w	r3, r2, r3
 80159c8:	461a      	mov	r2, r3
 80159ca:	f997 1017 	ldrsb.w	r1, [r7, #23]
 80159ce:	7ff8      	ldrb	r0, [r7, #31]
 80159d0:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 80159d4:	9308      	str	r3, [sp, #32]
 80159d6:	2300      	movs	r3, #0
 80159d8:	9307      	str	r3, [sp, #28]
 80159da:	2300      	movs	r3, #0
 80159dc:	9306      	str	r3, [sp, #24]
 80159de:	2300      	movs	r3, #0
 80159e0:	9305      	str	r3, [sp, #20]
 80159e2:	2301      	movs	r3, #1
 80159e4:	9304      	str	r3, [sp, #16]
 80159e6:	2300      	movs	r3, #0
 80159e8:	9303      	str	r3, [sp, #12]
 80159ea:	2305      	movs	r3, #5
 80159ec:	9302      	str	r3, [sp, #8]
 80159ee:	2300      	movs	r3, #0
 80159f0:	9301      	str	r3, [sp, #4]
 80159f2:	9200      	str	r2, [sp, #0]
 80159f4:	69bb      	ldr	r3, [r7, #24]
 80159f6:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 80159fa:	47a0      	blx	r4
 80159fc:	e01d      	b.n	8015a3a <RegionAS923TxConfig+0x12e>
    }
    else
    {
        modem = MODEM_LORA;
 80159fe:	2301      	movs	r3, #1
 8015a00:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8015a02:	4b29      	ldr	r3, [pc, #164]	@ (8015aa8 <RegionAS923TxConfig+0x19c>)
 8015a04:	69dc      	ldr	r4, [r3, #28]
 8015a06:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8015a0a:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8015a0e:	7ff8      	ldrb	r0, [r7, #31]
 8015a10:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8015a14:	9208      	str	r2, [sp, #32]
 8015a16:	2200      	movs	r2, #0
 8015a18:	9207      	str	r2, [sp, #28]
 8015a1a:	2200      	movs	r2, #0
 8015a1c:	9206      	str	r2, [sp, #24]
 8015a1e:	2200      	movs	r2, #0
 8015a20:	9205      	str	r2, [sp, #20]
 8015a22:	2201      	movs	r2, #1
 8015a24:	9204      	str	r2, [sp, #16]
 8015a26:	2200      	movs	r2, #0
 8015a28:	9203      	str	r2, [sp, #12]
 8015a2a:	2208      	movs	r2, #8
 8015a2c:	9202      	str	r2, [sp, #8]
 8015a2e:	2201      	movs	r2, #1
 8015a30:	9201      	str	r2, [sp, #4]
 8015a32:	9300      	str	r3, [sp, #0]
 8015a34:	69bb      	ldr	r3, [r7, #24]
 8015a36:	2200      	movs	r2, #0
 8015a38:	47a0      	blx	r4
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 8015a3a:	4b19      	ldr	r3, [pc, #100]	@ (8015aa0 <RegionAS923TxConfig+0x194>)
 8015a3c:	681a      	ldr	r2, [r3, #0]
 8015a3e:	68fb      	ldr	r3, [r7, #12]
 8015a40:	781b      	ldrb	r3, [r3, #0]
 8015a42:	4619      	mov	r1, r3
 8015a44:	460b      	mov	r3, r1
 8015a46:	005b      	lsls	r3, r3, #1
 8015a48:	440b      	add	r3, r1
 8015a4a:	009b      	lsls	r3, r3, #2
 8015a4c:	4413      	add	r3, r2
 8015a4e:	681a      	ldr	r2, [r3, #0]
 8015a50:	68fb      	ldr	r3, [r7, #12]
 8015a52:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015a56:	4619      	mov	r1, r3
 8015a58:	4610      	mov	r0, r2
 8015a5a:	f001 fb05 	bl	8017068 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8015a5e:	68fb      	ldr	r3, [r7, #12]
 8015a60:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8015a64:	68fb      	ldr	r3, [r7, #12]
 8015a66:	899b      	ldrh	r3, [r3, #12]
 8015a68:	4619      	mov	r1, r3
 8015a6a:	4610      	mov	r0, r2
 8015a6c:	f7ff fa64 	bl	8014f38 <GetTimeOnAir>
 8015a70:	4602      	mov	r2, r0
 8015a72:	687b      	ldr	r3, [r7, #4]
 8015a74:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 8015a76:	4b0c      	ldr	r3, [pc, #48]	@ (8015aa8 <RegionAS923TxConfig+0x19c>)
 8015a78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015a7a:	68fa      	ldr	r2, [r7, #12]
 8015a7c:	8992      	ldrh	r2, [r2, #12]
 8015a7e:	b2d1      	uxtb	r1, r2
 8015a80:	7ffa      	ldrb	r2, [r7, #31]
 8015a82:	4610      	mov	r0, r2
 8015a84:	4798      	blx	r3

    *txPower = txPowerLimited;
 8015a86:	68bb      	ldr	r3, [r7, #8]
 8015a88:	7f7a      	ldrb	r2, [r7, #29]
 8015a8a:	701a      	strb	r2, [r3, #0]
    return true;
 8015a8c:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_AS923 */
}
 8015a8e:	4618      	mov	r0, r3
 8015a90:	3724      	adds	r7, #36	@ 0x24
 8015a92:	46bd      	mov	sp, r7
 8015a94:	bd90      	pop	{r4, r7, pc}
 8015a96:	bf00      	nop
 8015a98:	0801f5cc 	.word	0x0801f5cc
 8015a9c:	20001bec 	.word	0x20001bec
 8015aa0:	20001be8 	.word	0x20001be8
 8015aa4:	0801f5d4 	.word	0x0801f5d4
 8015aa8:	0801f68c 	.word	0x0801f68c

08015aac <RegionAS923LinkAdrReq>:

uint8_t RegionAS923LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8015aac:	b590      	push	{r4, r7, lr}
 8015aae:	b093      	sub	sp, #76	@ 0x4c
 8015ab0:	af00      	add	r7, sp, #0
 8015ab2:	60f8      	str	r0, [r7, #12]
 8015ab4:	60b9      	str	r1, [r7, #8]
 8015ab6:	607a      	str	r2, [r7, #4]
 8015ab8:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 8015aba:	2307      	movs	r3, #7
 8015abc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
#if defined( REGION_AS923 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8015ac0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8015ac4:	2200      	movs	r2, #0
 8015ac6:	601a      	str	r2, [r3, #0]
 8015ac8:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 8015aca:	2300      	movs	r3, #0
 8015acc:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
    uint8_t bytesProcessed = 0;
 8015ad0:	2300      	movs	r3, #0
 8015ad2:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    uint16_t chMask = 0;
 8015ad6:	2300      	movs	r3, #0
 8015ad8:	877b      	strh	r3, [r7, #58]	@ 0x3a
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8015ada:	e085      	b.n	8015be8 <RegionAS923LinkAdrReq+0x13c>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8015adc:	68fb      	ldr	r3, [r7, #12]
 8015ade:	685a      	ldr	r2, [r3, #4]
 8015ae0:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8015ae4:	4413      	add	r3, r2
 8015ae6:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8015aea:	4611      	mov	r1, r2
 8015aec:	4618      	mov	r0, r3
 8015aee:	f000 ff0f 	bl	8016910 <RegionCommonParseLinkAdrReq>
 8015af2:	4603      	mov	r3, r0
 8015af4:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44

        if( nextIndex == 0 )
 8015af8:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8015afc:	2b00      	cmp	r3, #0
 8015afe:	d07b      	beq.n	8015bf8 <RegionAS923LinkAdrReq+0x14c>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 8015b00:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8015b04:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8015b08:	4413      	add	r3, r2
 8015b0a:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 8015b0e:	2307      	movs	r3, #7
 8015b10:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 8015b14:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8015b18:	877b      	strh	r3, [r7, #58]	@ 0x3a

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 8015b1a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8015b1e:	2b00      	cmp	r3, #0
 8015b20:	d109      	bne.n	8015b36 <RegionAS923LinkAdrReq+0x8a>
 8015b22:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8015b24:	2b00      	cmp	r3, #0
 8015b26:	d106      	bne.n	8015b36 <RegionAS923LinkAdrReq+0x8a>
        {
            status &= 0xFE; // Channel mask KO
 8015b28:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015b2c:	f023 0301 	bic.w	r3, r3, #1
 8015b30:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8015b34:	e058      	b.n	8015be8 <RegionAS923LinkAdrReq+0x13c>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8015b36:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8015b3a:	2b00      	cmp	r3, #0
 8015b3c:	d003      	beq.n	8015b46 <RegionAS923LinkAdrReq+0x9a>
 8015b3e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8015b42:	2b05      	cmp	r3, #5
 8015b44:	d903      	bls.n	8015b4e <RegionAS923LinkAdrReq+0xa2>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 8015b46:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8015b4a:	2b06      	cmp	r3, #6
 8015b4c:	d906      	bls.n	8015b5c <RegionAS923LinkAdrReq+0xb0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 8015b4e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015b52:	f023 0301 	bic.w	r3, r3, #1
 8015b56:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8015b5a:	e045      	b.n	8015be8 <RegionAS923LinkAdrReq+0x13c>
        }
        else
        {
            for( uint8_t i = 0; i < AS923_MAX_NB_CHANNELS; i++ )
 8015b5c:	2300      	movs	r3, #0
 8015b5e:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8015b62:	e03d      	b.n	8015be0 <RegionAS923LinkAdrReq+0x134>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 8015b64:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8015b68:	2b06      	cmp	r3, #6
 8015b6a:	d118      	bne.n	8015b9e <RegionAS923LinkAdrReq+0xf2>
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 8015b6c:	4b5f      	ldr	r3, [pc, #380]	@ (8015cec <RegionAS923LinkAdrReq+0x240>)
 8015b6e:	6819      	ldr	r1, [r3, #0]
 8015b70:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8015b74:	4613      	mov	r3, r2
 8015b76:	005b      	lsls	r3, r3, #1
 8015b78:	4413      	add	r3, r2
 8015b7a:	009b      	lsls	r3, r3, #2
 8015b7c:	440b      	add	r3, r1
 8015b7e:	681b      	ldr	r3, [r3, #0]
 8015b80:	2b00      	cmp	r3, #0
 8015b82:	d028      	beq.n	8015bd6 <RegionAS923LinkAdrReq+0x12a>
                    {
                        chMask |= 1 << i;
 8015b84:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8015b88:	2201      	movs	r2, #1
 8015b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8015b8e:	b21a      	sxth	r2, r3
 8015b90:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8015b92:	b21b      	sxth	r3, r3
 8015b94:	4313      	orrs	r3, r2
 8015b96:	b21b      	sxth	r3, r3
 8015b98:	b29b      	uxth	r3, r3
 8015b9a:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8015b9c:	e01b      	b.n	8015bd6 <RegionAS923LinkAdrReq+0x12a>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8015b9e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8015ba0:	461a      	mov	r2, r3
 8015ba2:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8015ba6:	fa42 f303 	asr.w	r3, r2, r3
 8015baa:	f003 0301 	and.w	r3, r3, #1
 8015bae:	2b00      	cmp	r3, #0
 8015bb0:	d011      	beq.n	8015bd6 <RegionAS923LinkAdrReq+0x12a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 8015bb2:	4b4e      	ldr	r3, [pc, #312]	@ (8015cec <RegionAS923LinkAdrReq+0x240>)
 8015bb4:	6819      	ldr	r1, [r3, #0]
 8015bb6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8015bba:	4613      	mov	r3, r2
 8015bbc:	005b      	lsls	r3, r3, #1
 8015bbe:	4413      	add	r3, r2
 8015bc0:	009b      	lsls	r3, r3, #2
 8015bc2:	440b      	add	r3, r1
 8015bc4:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8015bc6:	2b00      	cmp	r3, #0
 8015bc8:	d105      	bne.n	8015bd6 <RegionAS923LinkAdrReq+0x12a>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 8015bca:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015bce:	f023 0301 	bic.w	r3, r3, #1
 8015bd2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
            for( uint8_t i = 0; i < AS923_MAX_NB_CHANNELS; i++ )
 8015bd6:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8015bda:	3301      	adds	r3, #1
 8015bdc:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8015be0:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8015be4:	2b0f      	cmp	r3, #15
 8015be6:	d9bd      	bls.n	8015b64 <RegionAS923LinkAdrReq+0xb8>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8015be8:	68fb      	ldr	r3, [r7, #12]
 8015bea:	7a1b      	ldrb	r3, [r3, #8]
 8015bec:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8015bf0:	429a      	cmp	r2, r3
 8015bf2:	f4ff af73 	bcc.w	8015adc <RegionAS923LinkAdrReq+0x30>
 8015bf6:	e000      	b.n	8015bfa <RegionAS923LinkAdrReq+0x14e>
            break; // break loop, since no more request has been found
 8015bf8:	bf00      	nop
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8015bfa:	2302      	movs	r3, #2
 8015bfc:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8015c00:	68fb      	ldr	r3, [r7, #12]
 8015c02:	7a5b      	ldrb	r3, [r3, #9]
 8015c04:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    phyParam = RegionAS923GetPhyParam( &getPhy );
 8015c08:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8015c0c:	4618      	mov	r0, r3
 8015c0e:	f7ff f9e3 	bl	8014fd8 <RegionAS923GetPhyParam>
 8015c12:	4603      	mov	r3, r0
 8015c14:	633b      	str	r3, [r7, #48]	@ 0x30

    linkAdrVerifyParams.Status = status;
 8015c16:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015c1a:	753b      	strb	r3, [r7, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8015c1c:	68fb      	ldr	r3, [r7, #12]
 8015c1e:	7a9b      	ldrb	r3, [r3, #10]
 8015c20:	757b      	strb	r3, [r7, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8015c22:	f997 303d 	ldrsb.w	r3, [r7, #61]	@ 0x3d
 8015c26:	75bb      	strb	r3, [r7, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8015c28:	f997 303e 	ldrsb.w	r3, [r7, #62]	@ 0x3e
 8015c2c:	75fb      	strb	r3, [r7, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8015c2e:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8015c32:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8015c34:	68fb      	ldr	r3, [r7, #12]
 8015c36:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8015c3a:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8015c3c:	68fb      	ldr	r3, [r7, #12]
 8015c3e:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8015c42:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8015c44:	68fb      	ldr	r3, [r7, #12]
 8015c46:	7b5b      	ldrb	r3, [r3, #13]
 8015c48:	b25b      	sxtb	r3, r3
 8015c4a:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbChannels = AS923_MAX_NB_CHANNELS;
 8015c4c:	2310      	movs	r3, #16
 8015c4e:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 8015c50:	f107 033a 	add.w	r3, r7, #58	@ 0x3a
 8015c54:	623b      	str	r3, [r7, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8015c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015c58:	b25b      	sxtb	r3, r3
 8015c5a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    linkAdrVerifyParams.MaxDatarate = AS923_TX_MAX_DATARATE;
 8015c5e:	2307      	movs	r3, #7
 8015c60:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8015c64:	4b21      	ldr	r3, [pc, #132]	@ (8015cec <RegionAS923LinkAdrReq+0x240>)
 8015c66:	681b      	ldr	r3, [r3, #0]
 8015c68:	62bb      	str	r3, [r7, #40]	@ 0x28
    linkAdrVerifyParams.MinTxPower = AS923_MIN_TX_POWER;
 8015c6a:	2307      	movs	r3, #7
 8015c6c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    linkAdrVerifyParams.MaxTxPower = AS923_MAX_TX_POWER;
 8015c70:	2300      	movs	r3, #0
 8015c72:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8015c76:	68fb      	ldr	r3, [r7, #12]
 8015c78:	681b      	ldr	r3, [r3, #0]
 8015c7a:	613b      	str	r3, [r7, #16]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8015c7c:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8015c80:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8015c84:	1c9a      	adds	r2, r3, #2
 8015c86:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8015c8a:	1c59      	adds	r1, r3, #1
 8015c8c:	f107 0010 	add.w	r0, r7, #16
 8015c90:	4623      	mov	r3, r4
 8015c92:	f000 fe8f 	bl	80169b4 <RegionCommonLinkAdrReqVerifyParams>
 8015c96:	4603      	mov	r3, r0
 8015c98:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8015c9c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015ca0:	2b07      	cmp	r3, #7
 8015ca2:	d10d      	bne.n	8015cc0 <RegionAS923LinkAdrReq+0x214>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 8015ca4:	4b11      	ldr	r3, [pc, #68]	@ (8015cec <RegionAS923LinkAdrReq+0x240>)
 8015ca6:	681b      	ldr	r3, [r3, #0]
 8015ca8:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8015cac:	220c      	movs	r2, #12
 8015cae:	2100      	movs	r1, #0
 8015cb0:	4618      	mov	r0, r3
 8015cb2:	f001 fa73 	bl	801719c <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 8015cb6:	4b0d      	ldr	r3, [pc, #52]	@ (8015cec <RegionAS923LinkAdrReq+0x240>)
 8015cb8:	681b      	ldr	r3, [r3, #0]
 8015cba:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8015cbc:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8015cc0:	f997 203d 	ldrsb.w	r2, [r7, #61]	@ 0x3d
 8015cc4:	68bb      	ldr	r3, [r7, #8]
 8015cc6:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8015cc8:	f997 203e 	ldrsb.w	r2, [r7, #62]	@ 0x3e
 8015ccc:	687b      	ldr	r3, [r7, #4]
 8015cce:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8015cd0:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8015cd4:	683b      	ldr	r3, [r7, #0]
 8015cd6:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8015cd8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8015cda:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8015cde:	701a      	strb	r2, [r3, #0]

#endif /* REGION_AS923 */
    return status;
 8015ce0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8015ce4:	4618      	mov	r0, r3
 8015ce6:	374c      	adds	r7, #76	@ 0x4c
 8015ce8:	46bd      	mov	sp, r7
 8015cea:	bd90      	pop	{r4, r7, pc}
 8015cec:	20001be8 	.word	0x20001be8

08015cf0 <RegionAS923RxParamSetupReq>:

uint8_t RegionAS923RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8015cf0:	b580      	push	{r7, lr}
 8015cf2:	b084      	sub	sp, #16
 8015cf4:	af00      	add	r7, sp, #0
 8015cf6:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8015cf8:	2307      	movs	r3, #7
 8015cfa:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_AS923 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 8015cfc:	687b      	ldr	r3, [r7, #4]
 8015cfe:	685b      	ldr	r3, [r3, #4]
 8015d00:	4618      	mov	r0, r3
 8015d02:	f7ff f8f3 	bl	8014eec <VerifyRfFreq>
 8015d06:	4603      	mov	r3, r0
 8015d08:	f083 0301 	eor.w	r3, r3, #1
 8015d0c:	b2db      	uxtb	r3, r3
 8015d0e:	2b00      	cmp	r3, #0
 8015d10:	d003      	beq.n	8015d1a <RegionAS923RxParamSetupReq+0x2a>
    {
        status &= 0xFE; // Channel frequency KO
 8015d12:	7bfb      	ldrb	r3, [r7, #15]
 8015d14:	f023 0301 	bic.w	r3, r3, #1
 8015d18:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, AS923_RX_MIN_DATARATE, AS923_RX_MAX_DATARATE ) == false )
 8015d1a:	687b      	ldr	r3, [r7, #4]
 8015d1c:	f993 3000 	ldrsb.w	r3, [r3]
 8015d20:	2207      	movs	r2, #7
 8015d22:	2100      	movs	r1, #0
 8015d24:	4618      	mov	r0, r3
 8015d26:	f000 fc32 	bl	801658e <RegionCommonValueInRange>
 8015d2a:	4603      	mov	r3, r0
 8015d2c:	2b00      	cmp	r3, #0
 8015d2e:	d103      	bne.n	8015d38 <RegionAS923RxParamSetupReq+0x48>
    {
        status &= 0xFD; // Datarate KO
 8015d30:	7bfb      	ldrb	r3, [r7, #15]
 8015d32:	f023 0302 	bic.w	r3, r3, #2
 8015d36:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, AS923_MIN_RX1_DR_OFFSET, AS923_MAX_RX1_DR_OFFSET ) == false )
 8015d38:	687b      	ldr	r3, [r7, #4]
 8015d3a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015d3e:	2207      	movs	r2, #7
 8015d40:	2100      	movs	r1, #0
 8015d42:	4618      	mov	r0, r3
 8015d44:	f000 fc23 	bl	801658e <RegionCommonValueInRange>
 8015d48:	4603      	mov	r3, r0
 8015d4a:	2b00      	cmp	r3, #0
 8015d4c:	d103      	bne.n	8015d56 <RegionAS923RxParamSetupReq+0x66>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8015d4e:	7bfb      	ldrb	r3, [r7, #15]
 8015d50:	f023 0304 	bic.w	r3, r3, #4
 8015d54:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_AS923 */
    return status;
 8015d56:	7bfb      	ldrb	r3, [r7, #15]
}
 8015d58:	4618      	mov	r0, r3
 8015d5a:	3710      	adds	r7, #16
 8015d5c:	46bd      	mov	sp, r7
 8015d5e:	bd80      	pop	{r7, pc}

08015d60 <RegionAS923NewChannelReq>:

int8_t RegionAS923NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8015d60:	b580      	push	{r7, lr}
 8015d62:	b086      	sub	sp, #24
 8015d64:	af00      	add	r7, sp, #0
 8015d66:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8015d68:	2303      	movs	r3, #3
 8015d6a:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 8015d6c:	687b      	ldr	r3, [r7, #4]
 8015d6e:	681b      	ldr	r3, [r3, #0]
 8015d70:	681b      	ldr	r3, [r3, #0]
 8015d72:	2b00      	cmp	r3, #0
 8015d74:	d114      	bne.n	8015da0 <RegionAS923NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 8015d76:	687b      	ldr	r3, [r7, #4]
 8015d78:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8015d7c:	b2db      	uxtb	r3, r3
 8015d7e:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionAS923ChannelsRemove( &channelRemove ) == false )
 8015d80:	f107 0308 	add.w	r3, r7, #8
 8015d84:	4618      	mov	r0, r3
 8015d86:	f000 f9eb 	bl	8016160 <RegionAS923ChannelsRemove>
 8015d8a:	4603      	mov	r3, r0
 8015d8c:	f083 0301 	eor.w	r3, r3, #1
 8015d90:	b2db      	uxtb	r3, r3
 8015d92:	2b00      	cmp	r3, #0
 8015d94:	d03b      	beq.n	8015e0e <RegionAS923NewChannelReq+0xae>
        {
            status &= 0xFC;
 8015d96:	7dfb      	ldrb	r3, [r7, #23]
 8015d98:	f023 0303 	bic.w	r3, r3, #3
 8015d9c:	75fb      	strb	r3, [r7, #23]
 8015d9e:	e036      	b.n	8015e0e <RegionAS923NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 8015da0:	687b      	ldr	r3, [r7, #4]
 8015da2:	681b      	ldr	r3, [r3, #0]
 8015da4:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 8015da6:	687b      	ldr	r3, [r7, #4]
 8015da8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8015dac:	b2db      	uxtb	r3, r3
 8015dae:	743b      	strb	r3, [r7, #16]

        switch( RegionAS923ChannelAdd( &channelAdd ) )
 8015db0:	f107 030c 	add.w	r3, r7, #12
 8015db4:	4618      	mov	r0, r3
 8015db6:	f000 f937 	bl	8016028 <RegionAS923ChannelAdd>
 8015dba:	4603      	mov	r3, r0
 8015dbc:	2b06      	cmp	r3, #6
 8015dbe:	d820      	bhi.n	8015e02 <RegionAS923NewChannelReq+0xa2>
 8015dc0:	a201      	add	r2, pc, #4	@ (adr r2, 8015dc8 <RegionAS923NewChannelReq+0x68>)
 8015dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015dc6:	bf00      	nop
 8015dc8:	08015e0d 	.word	0x08015e0d
 8015dcc:	08015e03 	.word	0x08015e03
 8015dd0:	08015e03 	.word	0x08015e03
 8015dd4:	08015e03 	.word	0x08015e03
 8015dd8:	08015de5 	.word	0x08015de5
 8015ddc:	08015def 	.word	0x08015def
 8015de0:	08015df9 	.word	0x08015df9
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 8015de4:	7dfb      	ldrb	r3, [r7, #23]
 8015de6:	f023 0301 	bic.w	r3, r3, #1
 8015dea:	75fb      	strb	r3, [r7, #23]
                break;
 8015dec:	e00f      	b.n	8015e0e <RegionAS923NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 8015dee:	7dfb      	ldrb	r3, [r7, #23]
 8015df0:	f023 0302 	bic.w	r3, r3, #2
 8015df4:	75fb      	strb	r3, [r7, #23]
                break;
 8015df6:	e00a      	b.n	8015e0e <RegionAS923NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 8015df8:	7dfb      	ldrb	r3, [r7, #23]
 8015dfa:	f023 0303 	bic.w	r3, r3, #3
 8015dfe:	75fb      	strb	r3, [r7, #23]
                break;
 8015e00:	e005      	b.n	8015e0e <RegionAS923NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 8015e02:	7dfb      	ldrb	r3, [r7, #23]
 8015e04:	f023 0303 	bic.w	r3, r3, #3
 8015e08:	75fb      	strb	r3, [r7, #23]
                break;
 8015e0a:	e000      	b.n	8015e0e <RegionAS923NewChannelReq+0xae>
                break;
 8015e0c:	bf00      	nop
            }
        }
    }

    return status;
 8015e0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015e12:	4618      	mov	r0, r3
 8015e14:	3718      	adds	r7, #24
 8015e16:	46bd      	mov	sp, r7
 8015e18:	bd80      	pop	{r7, pc}
 8015e1a:	bf00      	nop

08015e1c <RegionAS923TxParamSetupReq>:

int8_t RegionAS923TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8015e1c:	b480      	push	{r7}
 8015e1e:	b083      	sub	sp, #12
 8015e20:	af00      	add	r7, sp, #0
 8015e22:	6078      	str	r0, [r7, #4]
    // Accept the request
    return 0;
 8015e24:	2300      	movs	r3, #0
}
 8015e26:	4618      	mov	r0, r3
 8015e28:	370c      	adds	r7, #12
 8015e2a:	46bd      	mov	sp, r7
 8015e2c:	bc80      	pop	{r7}
 8015e2e:	4770      	bx	lr

08015e30 <RegionAS923DlChannelReq>:

int8_t RegionAS923DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8015e30:	b580      	push	{r7, lr}
 8015e32:	b084      	sub	sp, #16
 8015e34:	af00      	add	r7, sp, #0
 8015e36:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8015e38:	2303      	movs	r3, #3
 8015e3a:	73fb      	strb	r3, [r7, #15]

#if defined( REGION_AS923 )
    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency ) == false )
 8015e3c:	687b      	ldr	r3, [r7, #4]
 8015e3e:	685b      	ldr	r3, [r3, #4]
 8015e40:	4618      	mov	r0, r3
 8015e42:	f7ff f853 	bl	8014eec <VerifyRfFreq>
 8015e46:	4603      	mov	r3, r0
 8015e48:	f083 0301 	eor.w	r3, r3, #1
 8015e4c:	b2db      	uxtb	r3, r3
 8015e4e:	2b00      	cmp	r3, #0
 8015e50:	d003      	beq.n	8015e5a <RegionAS923DlChannelReq+0x2a>
    {
        status &= 0xFE;
 8015e52:	7bfb      	ldrb	r3, [r7, #15]
 8015e54:	f023 0301 	bic.w	r3, r3, #1
 8015e58:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 8015e5a:	4b14      	ldr	r3, [pc, #80]	@ (8015eac <RegionAS923DlChannelReq+0x7c>)
 8015e5c:	681a      	ldr	r2, [r3, #0]
 8015e5e:	687b      	ldr	r3, [r7, #4]
 8015e60:	781b      	ldrb	r3, [r3, #0]
 8015e62:	4619      	mov	r1, r3
 8015e64:	460b      	mov	r3, r1
 8015e66:	005b      	lsls	r3, r3, #1
 8015e68:	440b      	add	r3, r1
 8015e6a:	009b      	lsls	r3, r3, #2
 8015e6c:	4413      	add	r3, r2
 8015e6e:	681b      	ldr	r3, [r3, #0]
 8015e70:	2b00      	cmp	r3, #0
 8015e72:	d103      	bne.n	8015e7c <RegionAS923DlChannelReq+0x4c>
    {
        status &= 0xFD;
 8015e74:	7bfb      	ldrb	r3, [r7, #15]
 8015e76:	f023 0302 	bic.w	r3, r3, #2
 8015e7a:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 8015e7c:	7bfb      	ldrb	r3, [r7, #15]
 8015e7e:	2b03      	cmp	r3, #3
 8015e80:	d10d      	bne.n	8015e9e <RegionAS923DlChannelReq+0x6e>
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 8015e82:	4b0a      	ldr	r3, [pc, #40]	@ (8015eac <RegionAS923DlChannelReq+0x7c>)
 8015e84:	6819      	ldr	r1, [r3, #0]
 8015e86:	687b      	ldr	r3, [r7, #4]
 8015e88:	781b      	ldrb	r3, [r3, #0]
 8015e8a:	4618      	mov	r0, r3
 8015e8c:	687b      	ldr	r3, [r7, #4]
 8015e8e:	685a      	ldr	r2, [r3, #4]
 8015e90:	4603      	mov	r3, r0
 8015e92:	005b      	lsls	r3, r3, #1
 8015e94:	4403      	add	r3, r0
 8015e96:	009b      	lsls	r3, r3, #2
 8015e98:	440b      	add	r3, r1
 8015e9a:	3304      	adds	r3, #4
 8015e9c:	601a      	str	r2, [r3, #0]
    }

#endif /* REGION_AS923 */
    return status;
 8015e9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015ea2:	4618      	mov	r0, r3
 8015ea4:	3710      	adds	r7, #16
 8015ea6:	46bd      	mov	sp, r7
 8015ea8:	bd80      	pop	{r7, pc}
 8015eaa:	bf00      	nop
 8015eac:	20001be8 	.word	0x20001be8

08015eb0 <RegionAS923AlternateDr>:

int8_t RegionAS923AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8015eb0:	b480      	push	{r7}
 8015eb2:	b083      	sub	sp, #12
 8015eb4:	af00      	add	r7, sp, #0
 8015eb6:	4603      	mov	r3, r0
 8015eb8:	460a      	mov	r2, r1
 8015eba:	71fb      	strb	r3, [r7, #7]
 8015ebc:	4613      	mov	r3, r2
 8015ebe:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_AS923 )
    // Only AS923_DWELL_LIMIT_DATARATE is supported
    return AS923_DWELL_LIMIT_DATARATE;
 8015ec0:	2302      	movs	r3, #2
#else
    return -1;
#endif /* REGION_AS923 */
}
 8015ec2:	4618      	mov	r0, r3
 8015ec4:	370c      	adds	r7, #12
 8015ec6:	46bd      	mov	sp, r7
 8015ec8:	bc80      	pop	{r7}
 8015eca:	4770      	bx	lr

08015ecc <RegionAS923NextChannel>:

LoRaMacStatus_t RegionAS923NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8015ecc:	b580      	push	{r7, lr}
 8015ece:	b09a      	sub	sp, #104	@ 0x68
 8015ed0:	af02      	add	r7, sp, #8
 8015ed2:	60f8      	str	r0, [r7, #12]
 8015ed4:	60b9      	str	r1, [r7, #8]
 8015ed6:	607a      	str	r2, [r7, #4]
 8015ed8:	603b      	str	r3, [r7, #0]
#if defined( REGION_AS923 )
    uint8_t nbEnabledChannels = 0;
 8015eda:	2300      	movs	r3, #0
 8015edc:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
    uint8_t nbRestrictedChannels = 0;
 8015ee0:	2300      	movs	r3, #0
 8015ee2:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
    uint8_t enabledChannels[AS923_MAX_NB_CHANNELS] = { 0 };
 8015ee6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8015eea:	2200      	movs	r2, #0
 8015eec:	601a      	str	r2, [r3, #0]
 8015eee:	605a      	str	r2, [r3, #4]
 8015ef0:	609a      	str	r2, [r3, #8]
 8015ef2:	60da      	str	r2, [r3, #12]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8015ef4:	230c      	movs	r3, #12
 8015ef6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    uint16_t joinChannels = AS923_JOIN_CHANNELS;
 8015efa:	2303      	movs	r3, #3
 8015efc:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 8015efe:	4b48      	ldr	r3, [pc, #288]	@ (8016020 <RegionAS923NextChannel+0x154>)
 8015f00:	681b      	ldr	r3, [r3, #0]
 8015f02:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8015f06:	2201      	movs	r2, #1
 8015f08:	2100      	movs	r1, #0
 8015f0a:	4618      	mov	r0, r3
 8015f0c:	f000 fb90 	bl	8016630 <RegionCommonCountChannels>
 8015f10:	4603      	mov	r3, r0
 8015f12:	2b00      	cmp	r3, #0
 8015f14:	d10a      	bne.n	8015f2c <RegionAS923NextChannel+0x60>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 );
 8015f16:	4b42      	ldr	r3, [pc, #264]	@ (8016020 <RegionAS923NextChannel+0x154>)
 8015f18:	681b      	ldr	r3, [r3, #0]
 8015f1a:	f8b3 2360 	ldrh.w	r2, [r3, #864]	@ 0x360
 8015f1e:	4b40      	ldr	r3, [pc, #256]	@ (8016020 <RegionAS923NextChannel+0x154>)
 8015f20:	681b      	ldr	r3, [r3, #0]
 8015f22:	f042 0203 	orr.w	r2, r2, #3
 8015f26:	b292      	uxth	r2, r2
 8015f28:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8015f2c:	68fb      	ldr	r3, [r7, #12]
 8015f2e:	7a5b      	ldrb	r3, [r3, #9]
 8015f30:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8015f32:	68fb      	ldr	r3, [r7, #12]
 8015f34:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8015f38:	b2db      	uxtb	r3, r3
 8015f3a:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8015f3c:	4b38      	ldr	r3, [pc, #224]	@ (8016020 <RegionAS923NextChannel+0x154>)
 8015f3e:	681b      	ldr	r3, [r3, #0]
 8015f40:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8015f44:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8015f46:	4b36      	ldr	r3, [pc, #216]	@ (8016020 <RegionAS923NextChannel+0x154>)
 8015f48:	681b      	ldr	r3, [r3, #0]
 8015f4a:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 8015f4c:	4b35      	ldr	r3, [pc, #212]	@ (8016024 <RegionAS923NextChannel+0x158>)
 8015f4e:	681b      	ldr	r3, [r3, #0]
 8015f50:	623b      	str	r3, [r7, #32]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = AS923_MAX_NB_CHANNELS;
 8015f52:	2310      	movs	r3, #16
 8015f54:	84bb      	strh	r3, [r7, #36]	@ 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 8015f56:	f107 0312 	add.w	r3, r7, #18
 8015f5a:	62bb      	str	r3, [r7, #40]	@ 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8015f5c:	68fb      	ldr	r3, [r7, #12]
 8015f5e:	681b      	ldr	r3, [r3, #0]
 8015f60:	62fb      	str	r3, [r7, #44]	@ 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8015f62:	68fb      	ldr	r3, [r7, #12]
 8015f64:	685b      	ldr	r3, [r3, #4]
 8015f66:	633b      	str	r3, [r7, #48]	@ 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8015f68:	68fb      	ldr	r3, [r7, #12]
 8015f6a:	7a9b      	ldrb	r3, [r3, #10]
 8015f6c:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    identifyChannelsParam.MaxBands = AS923_MAX_NB_BANDS;
 8015f70:	2301      	movs	r3, #1
 8015f72:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8015f76:	68fa      	ldr	r2, [r7, #12]
 8015f78:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8015f7c:	320c      	adds	r2, #12
 8015f7e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015f82:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8015f86:	68fb      	ldr	r3, [r7, #12]
 8015f88:	7d1b      	ldrb	r3, [r3, #20]
 8015f8a:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8015f8e:	68fb      	ldr	r3, [r7, #12]
 8015f90:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8015f94:	68fb      	ldr	r3, [r7, #12]
 8015f96:	8adb      	ldrh	r3, [r3, #22]
 8015f98:	4619      	mov	r1, r3
 8015f9a:	4610      	mov	r0, r2
 8015f9c:	f7fe ffcc 	bl	8014f38 <GetTimeOnAir>
 8015fa0:	4603      	mov	r3, r0
 8015fa2:	647b      	str	r3, [r7, #68]	@ 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8015fa4:	f107 0314 	add.w	r3, r7, #20
 8015fa8:	64bb      	str	r3, [r7, #72]	@ 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8015faa:	f107 015e 	add.w	r1, r7, #94	@ 0x5e
 8015fae:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8015fb2:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8015fb6:	687b      	ldr	r3, [r7, #4]
 8015fb8:	9301      	str	r3, [sp, #4]
 8015fba:	f107 035d 	add.w	r3, r7, #93	@ 0x5d
 8015fbe:	9300      	str	r3, [sp, #0]
 8015fc0:	460b      	mov	r3, r1
 8015fc2:	6839      	ldr	r1, [r7, #0]
 8015fc4:	f000 ff4b 	bl	8016e5e <RegionCommonIdentifyChannels>
 8015fc8:	4603      	mov	r3, r0
 8015fca:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8015fce:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8015fd2:	2b00      	cmp	r3, #0
 8015fd4:	d10e      	bne.n	8015ff4 <RegionAS923NextChannel+0x128>
        // Even if one or more channels are available according to the channel plan, no free channel
        // was found during the LBT procedure.
        status = LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND;
#else
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8015fd6:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8015fda:	3b01      	subs	r3, #1
 8015fdc:	4619      	mov	r1, r3
 8015fde:	2000      	movs	r0, #0
 8015fe0:	f001 f88a 	bl	80170f8 <randr>
 8015fe4:	4603      	mov	r3, r0
 8015fe6:	3360      	adds	r3, #96	@ 0x60
 8015fe8:	443b      	add	r3, r7
 8015fea:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8015fee:	68bb      	ldr	r3, [r7, #8]
 8015ff0:	701a      	strb	r2, [r3, #0]
 8015ff2:	e00e      	b.n	8016012 <RegionAS923NextChannel+0x146>
#endif
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 8015ff4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8015ff8:	2b0c      	cmp	r3, #12
 8015ffa:	d10a      	bne.n	8016012 <RegionAS923NextChannel+0x146>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 );
 8015ffc:	4b08      	ldr	r3, [pc, #32]	@ (8016020 <RegionAS923NextChannel+0x154>)
 8015ffe:	681b      	ldr	r3, [r3, #0]
 8016000:	f8b3 2360 	ldrh.w	r2, [r3, #864]	@ 0x360
 8016004:	4b06      	ldr	r3, [pc, #24]	@ (8016020 <RegionAS923NextChannel+0x154>)
 8016006:	681b      	ldr	r3, [r3, #0]
 8016008:	f042 0203 	orr.w	r2, r2, #3
 801600c:	b292      	uxth	r2, r2
 801600e:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    }
    return status;
 8016012:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_AS923 */
}
 8016016:	4618      	mov	r0, r3
 8016018:	3760      	adds	r7, #96	@ 0x60
 801601a:	46bd      	mov	sp, r7
 801601c:	bd80      	pop	{r7, pc}
 801601e:	bf00      	nop
 8016020:	20001be8 	.word	0x20001be8
 8016024:	20001bec 	.word	0x20001bec

08016028 <RegionAS923ChannelAdd>:

LoRaMacStatus_t RegionAS923ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8016028:	b580      	push	{r7, lr}
 801602a:	b084      	sub	sp, #16
 801602c:	af00      	add	r7, sp, #0
 801602e:	6078      	str	r0, [r7, #4]
#if defined( REGION_AS923 )
    bool drInvalid = false;
 8016030:	2300      	movs	r3, #0
 8016032:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 8016034:	2300      	movs	r3, #0
 8016036:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 8016038:	687b      	ldr	r3, [r7, #4]
 801603a:	791b      	ldrb	r3, [r3, #4]
 801603c:	737b      	strb	r3, [r7, #13]

    if( id < AS923_NUMB_DEFAULT_CHANNELS )
 801603e:	7b7b      	ldrb	r3, [r7, #13]
 8016040:	2b01      	cmp	r3, #1
 8016042:	d801      	bhi.n	8016048 <RegionAS923ChannelAdd+0x20>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8016044:	2306      	movs	r3, #6
 8016046:	e085      	b.n	8016154 <RegionAS923ChannelAdd+0x12c>
    }

    if( id >= AS923_MAX_NB_CHANNELS )
 8016048:	7b7b      	ldrb	r3, [r7, #13]
 801604a:	2b0f      	cmp	r3, #15
 801604c:	d901      	bls.n	8016052 <RegionAS923ChannelAdd+0x2a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801604e:	2303      	movs	r3, #3
 8016050:	e080      	b.n	8016154 <RegionAS923ChannelAdd+0x12c>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, AS923_TX_MIN_DATARATE, AS923_TX_MAX_DATARATE ) == false )
 8016052:	687b      	ldr	r3, [r7, #4]
 8016054:	681b      	ldr	r3, [r3, #0]
 8016056:	7a1b      	ldrb	r3, [r3, #8]
 8016058:	f343 0303 	sbfx	r3, r3, #0, #4
 801605c:	b25b      	sxtb	r3, r3
 801605e:	2207      	movs	r2, #7
 8016060:	2100      	movs	r1, #0
 8016062:	4618      	mov	r0, r3
 8016064:	f000 fa93 	bl	801658e <RegionCommonValueInRange>
 8016068:	4603      	mov	r3, r0
 801606a:	2b00      	cmp	r3, #0
 801606c:	d101      	bne.n	8016072 <RegionAS923ChannelAdd+0x4a>
    {
        drInvalid = true;
 801606e:	2301      	movs	r3, #1
 8016070:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, AS923_TX_MIN_DATARATE, AS923_TX_MAX_DATARATE ) == false )
 8016072:	687b      	ldr	r3, [r7, #4]
 8016074:	681b      	ldr	r3, [r3, #0]
 8016076:	7a1b      	ldrb	r3, [r3, #8]
 8016078:	f343 1303 	sbfx	r3, r3, #4, #4
 801607c:	b25b      	sxtb	r3, r3
 801607e:	2207      	movs	r2, #7
 8016080:	2100      	movs	r1, #0
 8016082:	4618      	mov	r0, r3
 8016084:	f000 fa83 	bl	801658e <RegionCommonValueInRange>
 8016088:	4603      	mov	r3, r0
 801608a:	2b00      	cmp	r3, #0
 801608c:	d101      	bne.n	8016092 <RegionAS923ChannelAdd+0x6a>
    {
        drInvalid = true;
 801608e:	2301      	movs	r3, #1
 8016090:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 8016092:	687b      	ldr	r3, [r7, #4]
 8016094:	681b      	ldr	r3, [r3, #0]
 8016096:	7a1b      	ldrb	r3, [r3, #8]
 8016098:	f343 0303 	sbfx	r3, r3, #0, #4
 801609c:	b25a      	sxtb	r2, r3
 801609e:	687b      	ldr	r3, [r7, #4]
 80160a0:	681b      	ldr	r3, [r3, #0]
 80160a2:	7a1b      	ldrb	r3, [r3, #8]
 80160a4:	f343 1303 	sbfx	r3, r3, #4, #4
 80160a8:	b25b      	sxtb	r3, r3
 80160aa:	429a      	cmp	r2, r3
 80160ac:	dd01      	ble.n	80160b2 <RegionAS923ChannelAdd+0x8a>
    {
        drInvalid = true;
 80160ae:	2301      	movs	r3, #1
 80160b0:	73fb      	strb	r3, [r7, #15]
    }

    // Check frequency
    if( freqInvalid == false )
 80160b2:	7bbb      	ldrb	r3, [r7, #14]
 80160b4:	f083 0301 	eor.w	r3, r3, #1
 80160b8:	b2db      	uxtb	r3, r3
 80160ba:	2b00      	cmp	r3, #0
 80160bc:	d00d      	beq.n	80160da <RegionAS923ChannelAdd+0xb2>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency ) == false )
 80160be:	687b      	ldr	r3, [r7, #4]
 80160c0:	681b      	ldr	r3, [r3, #0]
 80160c2:	681b      	ldr	r3, [r3, #0]
 80160c4:	4618      	mov	r0, r3
 80160c6:	f7fe ff11 	bl	8014eec <VerifyRfFreq>
 80160ca:	4603      	mov	r3, r0
 80160cc:	f083 0301 	eor.w	r3, r3, #1
 80160d0:	b2db      	uxtb	r3, r3
 80160d2:	2b00      	cmp	r3, #0
 80160d4:	d001      	beq.n	80160da <RegionAS923ChannelAdd+0xb2>
        {
            freqInvalid = true;
 80160d6:	2301      	movs	r3, #1
 80160d8:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 80160da:	7bfb      	ldrb	r3, [r7, #15]
 80160dc:	2b00      	cmp	r3, #0
 80160de:	d004      	beq.n	80160ea <RegionAS923ChannelAdd+0xc2>
 80160e0:	7bbb      	ldrb	r3, [r7, #14]
 80160e2:	2b00      	cmp	r3, #0
 80160e4:	d001      	beq.n	80160ea <RegionAS923ChannelAdd+0xc2>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 80160e6:	2306      	movs	r3, #6
 80160e8:	e034      	b.n	8016154 <RegionAS923ChannelAdd+0x12c>
    }
    if( drInvalid == true )
 80160ea:	7bfb      	ldrb	r3, [r7, #15]
 80160ec:	2b00      	cmp	r3, #0
 80160ee:	d001      	beq.n	80160f4 <RegionAS923ChannelAdd+0xcc>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 80160f0:	2305      	movs	r3, #5
 80160f2:	e02f      	b.n	8016154 <RegionAS923ChannelAdd+0x12c>
    }
    if( freqInvalid == true )
 80160f4:	7bbb      	ldrb	r3, [r7, #14]
 80160f6:	2b00      	cmp	r3, #0
 80160f8:	d001      	beq.n	80160fe <RegionAS923ChannelAdd+0xd6>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 80160fa:	2304      	movs	r3, #4
 80160fc:	e02a      	b.n	8016154 <RegionAS923ChannelAdd+0x12c>
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 80160fe:	4b17      	ldr	r3, [pc, #92]	@ (801615c <RegionAS923ChannelAdd+0x134>)
 8016100:	6819      	ldr	r1, [r3, #0]
 8016102:	7b7a      	ldrb	r2, [r7, #13]
 8016104:	4613      	mov	r3, r2
 8016106:	005b      	lsls	r3, r3, #1
 8016108:	4413      	add	r3, r2
 801610a:	009b      	lsls	r3, r3, #2
 801610c:	18c8      	adds	r0, r1, r3
 801610e:	687b      	ldr	r3, [r7, #4]
 8016110:	681b      	ldr	r3, [r3, #0]
 8016112:	220c      	movs	r2, #12
 8016114:	4619      	mov	r1, r3
 8016116:	f001 f806 	bl	8017126 <memcpy1>
    RegionNvmGroup2->Channels[id].Band = 0;
 801611a:	4b10      	ldr	r3, [pc, #64]	@ (801615c <RegionAS923ChannelAdd+0x134>)
 801611c:	6819      	ldr	r1, [r3, #0]
 801611e:	7b7a      	ldrb	r2, [r7, #13]
 8016120:	4613      	mov	r3, r2
 8016122:	005b      	lsls	r3, r3, #1
 8016124:	4413      	add	r3, r2
 8016126:	009b      	lsls	r3, r3, #2
 8016128:	440b      	add	r3, r1
 801612a:	3309      	adds	r3, #9
 801612c:	2200      	movs	r2, #0
 801612e:	701a      	strb	r2, [r3, #0]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 8016130:	4b0a      	ldr	r3, [pc, #40]	@ (801615c <RegionAS923ChannelAdd+0x134>)
 8016132:	681b      	ldr	r3, [r3, #0]
 8016134:	f8b3 3360 	ldrh.w	r3, [r3, #864]	@ 0x360
 8016138:	b21a      	sxth	r2, r3
 801613a:	7b7b      	ldrb	r3, [r7, #13]
 801613c:	2101      	movs	r1, #1
 801613e:	fa01 f303 	lsl.w	r3, r1, r3
 8016142:	b21b      	sxth	r3, r3
 8016144:	4313      	orrs	r3, r2
 8016146:	b21a      	sxth	r2, r3
 8016148:	4b04      	ldr	r3, [pc, #16]	@ (801615c <RegionAS923ChannelAdd+0x134>)
 801614a:	681b      	ldr	r3, [r3, #0]
 801614c:	b292      	uxth	r2, r2
 801614e:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    return LORAMAC_STATUS_OK;
 8016152:	2300      	movs	r3, #0
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_AS923 */
}
 8016154:	4618      	mov	r0, r3
 8016156:	3710      	adds	r7, #16
 8016158:	46bd      	mov	sp, r7
 801615a:	bd80      	pop	{r7, pc}
 801615c:	20001be8 	.word	0x20001be8

08016160 <RegionAS923ChannelsRemove>:

bool RegionAS923ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 8016160:	b580      	push	{r7, lr}
 8016162:	b086      	sub	sp, #24
 8016164:	af00      	add	r7, sp, #0
 8016166:	6078      	str	r0, [r7, #4]
#if defined( REGION_AS923 )
    uint8_t id = channelRemove->ChannelId;
 8016168:	687b      	ldr	r3, [r7, #4]
 801616a:	781b      	ldrb	r3, [r3, #0]
 801616c:	75fb      	strb	r3, [r7, #23]

    if( id < AS923_NUMB_DEFAULT_CHANNELS )
 801616e:	7dfb      	ldrb	r3, [r7, #23]
 8016170:	2b01      	cmp	r3, #1
 8016172:	d801      	bhi.n	8016178 <RegionAS923ChannelsRemove+0x18>
    {
        return false;
 8016174:	2300      	movs	r3, #0
 8016176:	e016      	b.n	80161a6 <RegionAS923ChannelsRemove+0x46>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 8016178:	4b0d      	ldr	r3, [pc, #52]	@ (80161b0 <RegionAS923ChannelsRemove+0x50>)
 801617a:	6819      	ldr	r1, [r3, #0]
 801617c:	7dfa      	ldrb	r2, [r7, #23]
 801617e:	4613      	mov	r3, r2
 8016180:	005b      	lsls	r3, r3, #1
 8016182:	4413      	add	r3, r2
 8016184:	009b      	lsls	r3, r3, #2
 8016186:	440b      	add	r3, r1
 8016188:	461a      	mov	r2, r3
 801618a:	2300      	movs	r3, #0
 801618c:	6013      	str	r3, [r2, #0]
 801618e:	6053      	str	r3, [r2, #4]
 8016190:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, AS923_MAX_NB_CHANNELS );
 8016192:	4b07      	ldr	r3, [pc, #28]	@ (80161b0 <RegionAS923ChannelsRemove+0x50>)
 8016194:	681b      	ldr	r3, [r3, #0]
 8016196:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 801619a:	7df9      	ldrb	r1, [r7, #23]
 801619c:	2210      	movs	r2, #16
 801619e:	4618      	mov	r0, r3
 80161a0:	f000 fa12 	bl	80165c8 <RegionCommonChanDisable>
 80161a4:	4603      	mov	r3, r0
#else
    return false;
#endif /* REGION_AS923 */
}
 80161a6:	4618      	mov	r0, r3
 80161a8:	3718      	adds	r7, #24
 80161aa:	46bd      	mov	sp, r7
 80161ac:	bd80      	pop	{r7, pc}
 80161ae:	bf00      	nop
 80161b0:	20001be8 	.word	0x20001be8

080161b4 <RegionAS923ApplyDrOffset>:
#endif /* REGION_AS923 */

}
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
uint8_t RegionAS923ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 80161b4:	b480      	push	{r7}
 80161b6:	b085      	sub	sp, #20
 80161b8:	af00      	add	r7, sp, #0
 80161ba:	4603      	mov	r3, r0
 80161bc:	71fb      	strb	r3, [r7, #7]
 80161be:	460b      	mov	r3, r1
 80161c0:	71bb      	strb	r3, [r7, #6]
 80161c2:	4613      	mov	r3, r2
 80161c4:	717b      	strb	r3, [r7, #5]
#if defined( REGION_AS923 )
    // Initialize minDr
    int8_t minDr;

    if( downlinkDwellTime == 0 )
 80161c6:	79fb      	ldrb	r3, [r7, #7]
 80161c8:	2b00      	cmp	r3, #0
 80161ca:	d10a      	bne.n	80161e2 <RegionAS923ApplyDrOffset+0x2e>
    {
        // Update the minDR for a downlink dwell time configuration of 0
        minDr = EffectiveRx1DrOffsetDownlinkDwell0AS923[dr][drOffset];
 80161cc:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80161d0:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80161d4:	490b      	ldr	r1, [pc, #44]	@ (8016204 <RegionAS923ApplyDrOffset+0x50>)
 80161d6:	00d2      	lsls	r2, r2, #3
 80161d8:	440a      	add	r2, r1
 80161da:	4413      	add	r3, r2
 80161dc:	781b      	ldrb	r3, [r3, #0]
 80161de:	73fb      	strb	r3, [r7, #15]
 80161e0:	e009      	b.n	80161f6 <RegionAS923ApplyDrOffset+0x42>
    }
    else
    {
        // Update the minDR for a downlink dwell time configuration of 1
        minDr = EffectiveRx1DrOffsetDownlinkDwell1AS923[dr][drOffset];
 80161e2:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80161e6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80161ea:	4907      	ldr	r1, [pc, #28]	@ (8016208 <RegionAS923ApplyDrOffset+0x54>)
 80161ec:	00d2      	lsls	r2, r2, #3
 80161ee:	440a      	add	r2, r1
 80161f0:	4413      	add	r3, r2
 80161f2:	781b      	ldrb	r3, [r3, #0]
 80161f4:	73fb      	strb	r3, [r7, #15]
    }

    return minDr;
 80161f6:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_AS923 */

}
 80161f8:	4618      	mov	r0, r3
 80161fa:	3714      	adds	r7, #20
 80161fc:	46bd      	mov	sp, r7
 80161fe:	bc80      	pop	{r7}
 8016200:	4770      	bx	lr
 8016202:	bf00      	nop
 8016204:	0801f60c 	.word	0x0801f60c
 8016208:	0801f64c 	.word	0x0801f64c

0801620c <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 801620c:	b480      	push	{r7}
 801620e:	b087      	sub	sp, #28
 8016210:	af00      	add	r7, sp, #0
 8016212:	60f8      	str	r0, [r7, #12]
 8016214:	4608      	mov	r0, r1
 8016216:	4639      	mov	r1, r7
 8016218:	e881 000c 	stmia.w	r1, {r2, r3}
 801621c:	4603      	mov	r3, r0
 801621e:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8016220:	68fb      	ldr	r3, [r7, #12]
 8016222:	881b      	ldrh	r3, [r3, #0]
 8016224:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 8016226:	7afb      	ldrb	r3, [r7, #11]
 8016228:	f083 0301 	eor.w	r3, r3, #1
 801622c:	b2db      	uxtb	r3, r3
 801622e:	2b00      	cmp	r3, #0
 8016230:	d01b      	beq.n	801626a <GetDutyCycle+0x5e>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 8016232:	f242 7310 	movw	r3, #10000	@ 0x2710
 8016236:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 8016238:	683b      	ldr	r3, [r7, #0]
 801623a:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 801623e:	d202      	bcs.n	8016246 <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 8016240:	2364      	movs	r3, #100	@ 0x64
 8016242:	82bb      	strh	r3, [r7, #20]
 8016244:	e00b      	b.n	801625e <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 8016246:	683b      	ldr	r3, [r7, #0]
 8016248:	f649 22af 	movw	r2, #39599	@ 0x9aaf
 801624c:	4293      	cmp	r3, r2
 801624e:	d803      	bhi.n	8016258 <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 8016250:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8016254:	82bb      	strh	r3, [r7, #20]
 8016256:	e002      	b.n	801625e <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 8016258:	f242 7310 	movw	r3, #10000	@ 0x2710
 801625c:	82bb      	strh	r3, [r7, #20]
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 801625e:	8aba      	ldrh	r2, [r7, #20]
 8016260:	8afb      	ldrh	r3, [r7, #22]
 8016262:	4293      	cmp	r3, r2
 8016264:	bf38      	it	cc
 8016266:	4613      	movcc	r3, r2
 8016268:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 801626a:	8afb      	ldrh	r3, [r7, #22]
 801626c:	2b00      	cmp	r3, #0
 801626e:	d101      	bne.n	8016274 <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 8016270:	2301      	movs	r3, #1
 8016272:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 8016274:	8afb      	ldrh	r3, [r7, #22]
}
 8016276:	4618      	mov	r0, r3
 8016278:	371c      	adds	r7, #28
 801627a:	46bd      	mov	sp, r7
 801627c:	bc80      	pop	{r7}
 801627e:	4770      	bx	lr

08016280 <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 8016280:	b580      	push	{r7, lr}
 8016282:	b08e      	sub	sp, #56	@ 0x38
 8016284:	af02      	add	r7, sp, #8
 8016286:	60f8      	str	r0, [r7, #12]
 8016288:	4608      	mov	r0, r1
 801628a:	4639      	mov	r1, r7
 801628c:	e881 000c 	stmia.w	r1, {r2, r3}
 8016290:	4603      	mov	r3, r0
 8016292:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8016294:	68fb      	ldr	r3, [r7, #12]
 8016296:	881b      	ldrh	r3, [r3, #0]
 8016298:	857b      	strh	r3, [r7, #42]	@ 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 801629a:	4b4b      	ldr	r3, [pc, #300]	@ (80163c8 <SetMaxTimeCredits+0x148>)
 801629c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 801629e:	463b      	mov	r3, r7
 80162a0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80162a4:	f004 fb7e 	bl	801a9a4 <SysTimeToMs>
 80162a8:	6278      	str	r0, [r7, #36]	@ 0x24
    SysTime_t timeDiff = { 0 };
 80162aa:	f107 0314 	add.w	r3, r7, #20
 80162ae:	2200      	movs	r2, #0
 80162b0:	601a      	str	r2, [r3, #0]
 80162b2:	605a      	str	r2, [r3, #4]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 80162b4:	7af9      	ldrb	r1, [r7, #11]
 80162b6:	463b      	mov	r3, r7
 80162b8:	cb0c      	ldmia	r3, {r2, r3}
 80162ba:	68f8      	ldr	r0, [r7, #12]
 80162bc:	f7ff ffa6 	bl	801620c <GetDutyCycle>
 80162c0:	4603      	mov	r3, r0
 80162c2:	857b      	strh	r3, [r7, #42]	@ 0x2a

    if( joined == false )
 80162c4:	7afb      	ldrb	r3, [r7, #11]
 80162c6:	f083 0301 	eor.w	r3, r3, #1
 80162ca:	b2db      	uxtb	r3, r3
 80162cc:	2b00      	cmp	r3, #0
 80162ce:	d062      	beq.n	8016396 <SetMaxTimeCredits+0x116>
    {
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 80162d0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80162d2:	2b64      	cmp	r3, #100	@ 0x64
 80162d4:	d105      	bne.n	80162e2 <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 80162d6:	4b3c      	ldr	r3, [pc, #240]	@ (80163c8 <SetMaxTimeCredits+0x148>)
 80162d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 80162da:	68fb      	ldr	r3, [r7, #12]
 80162dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80162de:	609a      	str	r2, [r3, #8]
 80162e0:	e00b      	b.n	80162fa <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 80162e2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80162e4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80162e8:	d105      	bne.n	80162f6 <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 80162ea:	4b38      	ldr	r3, [pc, #224]	@ (80163cc <SetMaxTimeCredits+0x14c>)
 80162ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 80162ee:	68fb      	ldr	r3, [r7, #12]
 80162f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80162f2:	609a      	str	r2, [r3, #8]
 80162f4:	e001      	b.n	80162fa <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 80162f6:	4b36      	ldr	r3, [pc, #216]	@ (80163d0 <SetMaxTimeCredits+0x150>)
 80162f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 80162fa:	68fb      	ldr	r3, [r7, #12]
 80162fc:	689a      	ldr	r2, [r3, #8]
 80162fe:	f107 031c 	add.w	r3, r7, #28
 8016302:	4611      	mov	r1, r2
 8016304:	4618      	mov	r0, r3
 8016306:	f004 fb75 	bl	801a9f4 <SysTimeFromMs>
 801630a:	f107 0014 	add.w	r0, r7, #20
 801630e:	6a3b      	ldr	r3, [r7, #32]
 8016310:	9300      	str	r3, [sp, #0]
 8016312:	69fb      	ldr	r3, [r7, #28]
 8016314:	463a      	mov	r2, r7
 8016316:	ca06      	ldmia	r2, {r1, r2}
 8016318:	f004 fa85 	bl	801a826 <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 801631c:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8016320:	f083 0301 	eor.w	r3, r3, #1
 8016324:	b2db      	uxtb	r3, r3
 8016326:	2b00      	cmp	r3, #0
 8016328:	d006      	beq.n	8016338 <SetMaxTimeCredits+0xb8>
 801632a:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 801632e:	f083 0301 	eor.w	r3, r3, #1
 8016332:	b2db      	uxtb	r3, r3
 8016334:	2b00      	cmp	r3, #0
 8016336:	d108      	bne.n	801634a <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 8016338:	68fb      	ldr	r3, [r7, #12]
 801633a:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 801633c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801633e:	429a      	cmp	r2, r3
 8016340:	d103      	bne.n	801634a <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 8016342:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 8016344:	4a23      	ldr	r2, [pc, #140]	@ (80163d4 <SetMaxTimeCredits+0x154>)
 8016346:	4293      	cmp	r3, r2
 8016348:	d92f      	bls.n	80163aa <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 801634a:	68fb      	ldr	r3, [r7, #12]
 801634c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801634e:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8016350:	683b      	ldr	r3, [r7, #0]
 8016352:	4a21      	ldr	r2, [pc, #132]	@ (80163d8 <SetMaxTimeCredits+0x158>)
 8016354:	4293      	cmp	r3, r2
 8016356:	d928      	bls.n	80163aa <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 8016358:	683b      	ldr	r3, [r7, #0]
 801635a:	f5a3 33f6 	sub.w	r3, r3, #125952	@ 0x1ec00
 801635e:	3b30      	subs	r3, #48	@ 0x30
 8016360:	4a1e      	ldr	r2, [pc, #120]	@ (80163dc <SetMaxTimeCredits+0x15c>)
 8016362:	fba2 2303 	umull	r2, r3, r2, r3
 8016366:	0c1b      	lsrs	r3, r3, #16
 8016368:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 801636a:	697b      	ldr	r3, [r7, #20]
 801636c:	4a1c      	ldr	r2, [pc, #112]	@ (80163e0 <SetMaxTimeCredits+0x160>)
 801636e:	fb02 f303 	mul.w	r3, r2, r3
 8016372:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8016374:	697b      	ldr	r3, [r7, #20]
 8016376:	f503 33f6 	add.w	r3, r3, #125952	@ 0x1ec00
 801637a:	3330      	adds	r3, #48	@ 0x30
 801637c:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 801637e:	2300      	movs	r3, #0
 8016380:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 8016382:	f107 0314 	add.w	r3, r7, #20
 8016386:	e893 0003 	ldmia.w	r3, {r0, r1}
 801638a:	f004 fb0b 	bl	801a9a4 <SysTimeToMs>
 801638e:	4602      	mov	r2, r0
 8016390:	68fb      	ldr	r3, [r7, #12]
 8016392:	609a      	str	r2, [r3, #8]
 8016394:	e009      	b.n	80163aa <SetMaxTimeCredits+0x12a>
            }
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 8016396:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 801639a:	f083 0301 	eor.w	r3, r3, #1
 801639e:	b2db      	uxtb	r3, r3
 80163a0:	2b00      	cmp	r3, #0
 80163a2:	d002      	beq.n	80163aa <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 80163a4:	68fb      	ldr	r3, [r7, #12]
 80163a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80163a8:	60da      	str	r2, [r3, #12]
        }
    }

    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 80163aa:	68fb      	ldr	r3, [r7, #12]
 80163ac:	685b      	ldr	r3, [r3, #4]
 80163ae:	2b00      	cmp	r3, #0
 80163b0:	d102      	bne.n	80163b8 <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 80163b2:	68fb      	ldr	r3, [r7, #12]
 80163b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80163b6:	60da      	str	r2, [r3, #12]
    }

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 80163b8:	68fb      	ldr	r3, [r7, #12]
 80163ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80163bc:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 80163be:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
}
 80163c0:	4618      	mov	r0, r3
 80163c2:	3730      	adds	r7, #48	@ 0x30
 80163c4:	46bd      	mov	sp, r7
 80163c6:	bd80      	pop	{r7, pc}
 80163c8:	001b7740 	.word	0x001b7740
 80163cc:	0112a880 	.word	0x0112a880
 80163d0:	02932e00 	.word	0x02932e00
 80163d4:	0001517f 	.word	0x0001517f
 80163d8:	0001ec2f 	.word	0x0001ec2f
 80163dc:	c22e4507 	.word	0xc22e4507
 80163e0:	00015180 	.word	0x00015180

080163e4 <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 80163e4:	b580      	push	{r7, lr}
 80163e6:	b086      	sub	sp, #24
 80163e8:	af02      	add	r7, sp, #8
 80163ea:	6078      	str	r0, [r7, #4]
 80163ec:	4608      	mov	r0, r1
 80163ee:	4611      	mov	r1, r2
 80163f0:	461a      	mov	r2, r3
 80163f2:	4603      	mov	r3, r0
 80163f4:	70fb      	strb	r3, [r7, #3]
 80163f6:	460b      	mov	r3, r1
 80163f8:	70bb      	strb	r3, [r7, #2]
 80163fa:	4613      	mov	r3, r2
 80163fc:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 80163fe:	78f9      	ldrb	r1, [r7, #3]
 8016400:	787b      	ldrb	r3, [r7, #1]
 8016402:	9301      	str	r3, [sp, #4]
 8016404:	78bb      	ldrb	r3, [r7, #2]
 8016406:	9300      	str	r3, [sp, #0]
 8016408:	f107 0318 	add.w	r3, r7, #24
 801640c:	cb0c      	ldmia	r3, {r2, r3}
 801640e:	6878      	ldr	r0, [r7, #4]
 8016410:	f7ff ff36 	bl	8016280 <SetMaxTimeCredits>
 8016414:	4603      	mov	r3, r0
 8016416:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 8016418:	78fb      	ldrb	r3, [r7, #3]
 801641a:	2b00      	cmp	r3, #0
 801641c:	d00a      	beq.n	8016434 <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 801641e:	687b      	ldr	r3, [r7, #4]
 8016420:	685b      	ldr	r3, [r3, #4]
 8016422:	4618      	mov	r0, r3
 8016424:	f005 f8f8 	bl	801b618 <UTIL_TIMER_GetElapsedTime>
 8016428:	4602      	mov	r2, r0
 801642a:	687b      	ldr	r3, [r7, #4]
 801642c:	68db      	ldr	r3, [r3, #12]
 801642e:	441a      	add	r2, r3
 8016430:	687b      	ldr	r3, [r7, #4]
 8016432:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 8016434:	687b      	ldr	r3, [r7, #4]
 8016436:	68da      	ldr	r2, [r3, #12]
 8016438:	687b      	ldr	r3, [r7, #4]
 801643a:	691b      	ldr	r3, [r3, #16]
 801643c:	429a      	cmp	r2, r3
 801643e:	d903      	bls.n	8016448 <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 8016440:	687b      	ldr	r3, [r7, #4]
 8016442:	691a      	ldr	r2, [r3, #16]
 8016444:	687b      	ldr	r3, [r7, #4]
 8016446:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 8016448:	687b      	ldr	r3, [r7, #4]
 801644a:	6a3a      	ldr	r2, [r7, #32]
 801644c:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 801644e:	89fb      	ldrh	r3, [r7, #14]
}
 8016450:	4618      	mov	r0, r3
 8016452:	3710      	adds	r7, #16
 8016454:	46bd      	mov	sp, r7
 8016456:	bd80      	pop	{r7, pc}

08016458 <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 8016458:	b480      	push	{r7}
 801645a:	b085      	sub	sp, #20
 801645c:	af00      	add	r7, sp, #0
 801645e:	4603      	mov	r3, r0
 8016460:	460a      	mov	r2, r1
 8016462:	80fb      	strh	r3, [r7, #6]
 8016464:	4613      	mov	r3, r2
 8016466:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 8016468:	2300      	movs	r3, #0
 801646a:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 801646c:	2300      	movs	r3, #0
 801646e:	73bb      	strb	r3, [r7, #14]
 8016470:	e011      	b.n	8016496 <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 8016472:	88fa      	ldrh	r2, [r7, #6]
 8016474:	7bbb      	ldrb	r3, [r7, #14]
 8016476:	2101      	movs	r1, #1
 8016478:	fa01 f303 	lsl.w	r3, r1, r3
 801647c:	401a      	ands	r2, r3
 801647e:	7bbb      	ldrb	r3, [r7, #14]
 8016480:	2101      	movs	r1, #1
 8016482:	fa01 f303 	lsl.w	r3, r1, r3
 8016486:	429a      	cmp	r2, r3
 8016488:	d102      	bne.n	8016490 <CountChannels+0x38>
        {
            nbActiveBits++;
 801648a:	7bfb      	ldrb	r3, [r7, #15]
 801648c:	3301      	adds	r3, #1
 801648e:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 8016490:	7bbb      	ldrb	r3, [r7, #14]
 8016492:	3301      	adds	r3, #1
 8016494:	73bb      	strb	r3, [r7, #14]
 8016496:	7bba      	ldrb	r2, [r7, #14]
 8016498:	797b      	ldrb	r3, [r7, #5]
 801649a:	429a      	cmp	r2, r3
 801649c:	d3e9      	bcc.n	8016472 <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 801649e:	7bfb      	ldrb	r3, [r7, #15]
}
 80164a0:	4618      	mov	r0, r3
 80164a2:	3714      	adds	r7, #20
 80164a4:	46bd      	mov	sp, r7
 80164a6:	bc80      	pop	{r7}
 80164a8:	4770      	bx	lr

080164aa <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 80164aa:	b580      	push	{r7, lr}
 80164ac:	b084      	sub	sp, #16
 80164ae:	af00      	add	r7, sp, #0
 80164b0:	6039      	str	r1, [r7, #0]
 80164b2:	4611      	mov	r1, r2
 80164b4:	461a      	mov	r2, r3
 80164b6:	4603      	mov	r3, r0
 80164b8:	71fb      	strb	r3, [r7, #7]
 80164ba:	460b      	mov	r3, r1
 80164bc:	71bb      	strb	r3, [r7, #6]
 80164be:	4613      	mov	r3, r2
 80164c0:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 80164c2:	f997 2018 	ldrsb.w	r2, [r7, #24]
 80164c6:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80164ca:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80164ce:	4618      	mov	r0, r3
 80164d0:	f000 f85d 	bl	801658e <RegionCommonValueInRange>
 80164d4:	4603      	mov	r3, r0
 80164d6:	2b00      	cmp	r3, #0
 80164d8:	d101      	bne.n	80164de <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 80164da:	2300      	movs	r3, #0
 80164dc:	e053      	b.n	8016586 <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 80164de:	2300      	movs	r3, #0
 80164e0:	73fb      	strb	r3, [r7, #15]
 80164e2:	2300      	movs	r3, #0
 80164e4:	73bb      	strb	r3, [r7, #14]
 80164e6:	e049      	b.n	801657c <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 80164e8:	2300      	movs	r3, #0
 80164ea:	737b      	strb	r3, [r7, #13]
 80164ec:	e03d      	b.n	801656a <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 80164ee:	7bbb      	ldrb	r3, [r7, #14]
 80164f0:	005b      	lsls	r3, r3, #1
 80164f2:	683a      	ldr	r2, [r7, #0]
 80164f4:	4413      	add	r3, r2
 80164f6:	881b      	ldrh	r3, [r3, #0]
 80164f8:	461a      	mov	r2, r3
 80164fa:	7b7b      	ldrb	r3, [r7, #13]
 80164fc:	fa42 f303 	asr.w	r3, r2, r3
 8016500:	f003 0301 	and.w	r3, r3, #1
 8016504:	2b00      	cmp	r3, #0
 8016506:	d02d      	beq.n	8016564 <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8016508:	7bfa      	ldrb	r2, [r7, #15]
 801650a:	7b7b      	ldrb	r3, [r7, #13]
 801650c:	4413      	add	r3, r2
 801650e:	461a      	mov	r2, r3
 8016510:	4613      	mov	r3, r2
 8016512:	005b      	lsls	r3, r3, #1
 8016514:	4413      	add	r3, r2
 8016516:	009b      	lsls	r3, r3, #2
 8016518:	461a      	mov	r2, r3
 801651a:	69fb      	ldr	r3, [r7, #28]
 801651c:	4413      	add	r3, r2
 801651e:	7a1b      	ldrb	r3, [r3, #8]
 8016520:	f343 0303 	sbfx	r3, r3, #0, #4
 8016524:	b25b      	sxtb	r3, r3
 8016526:	f003 030f 	and.w	r3, r3, #15
 801652a:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 801652c:	7bfa      	ldrb	r2, [r7, #15]
 801652e:	7b7b      	ldrb	r3, [r7, #13]
 8016530:	4413      	add	r3, r2
 8016532:	461a      	mov	r2, r3
 8016534:	4613      	mov	r3, r2
 8016536:	005b      	lsls	r3, r3, #1
 8016538:	4413      	add	r3, r2
 801653a:	009b      	lsls	r3, r3, #2
 801653c:	461a      	mov	r2, r3
 801653e:	69fb      	ldr	r3, [r7, #28]
 8016540:	4413      	add	r3, r2
 8016542:	7a1b      	ldrb	r3, [r3, #8]
 8016544:	f343 1303 	sbfx	r3, r3, #4, #4
 8016548:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 801654a:	f003 030f 	and.w	r3, r3, #15
 801654e:	b25a      	sxtb	r2, r3
 8016550:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8016554:	4618      	mov	r0, r3
 8016556:	f000 f81a 	bl	801658e <RegionCommonValueInRange>
 801655a:	4603      	mov	r3, r0
 801655c:	2b01      	cmp	r3, #1
 801655e:	d101      	bne.n	8016564 <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 8016560:	2301      	movs	r3, #1
 8016562:	e010      	b.n	8016586 <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 8016564:	7b7b      	ldrb	r3, [r7, #13]
 8016566:	3301      	adds	r3, #1
 8016568:	737b      	strb	r3, [r7, #13]
 801656a:	7b7b      	ldrb	r3, [r7, #13]
 801656c:	2b0f      	cmp	r3, #15
 801656e:	d9be      	bls.n	80164ee <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8016570:	7bfb      	ldrb	r3, [r7, #15]
 8016572:	3310      	adds	r3, #16
 8016574:	73fb      	strb	r3, [r7, #15]
 8016576:	7bbb      	ldrb	r3, [r7, #14]
 8016578:	3301      	adds	r3, #1
 801657a:	73bb      	strb	r3, [r7, #14]
 801657c:	7bfa      	ldrb	r2, [r7, #15]
 801657e:	79fb      	ldrb	r3, [r7, #7]
 8016580:	429a      	cmp	r2, r3
 8016582:	d3b1      	bcc.n	80164e8 <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 8016584:	2300      	movs	r3, #0
}
 8016586:	4618      	mov	r0, r3
 8016588:	3710      	adds	r7, #16
 801658a:	46bd      	mov	sp, r7
 801658c:	bd80      	pop	{r7, pc}

0801658e <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 801658e:	b480      	push	{r7}
 8016590:	b083      	sub	sp, #12
 8016592:	af00      	add	r7, sp, #0
 8016594:	4603      	mov	r3, r0
 8016596:	71fb      	strb	r3, [r7, #7]
 8016598:	460b      	mov	r3, r1
 801659a:	71bb      	strb	r3, [r7, #6]
 801659c:	4613      	mov	r3, r2
 801659e:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 80165a0:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80165a4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80165a8:	429a      	cmp	r2, r3
 80165aa:	db07      	blt.n	80165bc <RegionCommonValueInRange+0x2e>
 80165ac:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80165b0:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80165b4:	429a      	cmp	r2, r3
 80165b6:	dc01      	bgt.n	80165bc <RegionCommonValueInRange+0x2e>
    {
        return 1;
 80165b8:	2301      	movs	r3, #1
 80165ba:	e000      	b.n	80165be <RegionCommonValueInRange+0x30>
    }
    return 0;
 80165bc:	2300      	movs	r3, #0
}
 80165be:	4618      	mov	r0, r3
 80165c0:	370c      	adds	r7, #12
 80165c2:	46bd      	mov	sp, r7
 80165c4:	bc80      	pop	{r7}
 80165c6:	4770      	bx	lr

080165c8 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 80165c8:	b480      	push	{r7}
 80165ca:	b085      	sub	sp, #20
 80165cc:	af00      	add	r7, sp, #0
 80165ce:	6078      	str	r0, [r7, #4]
 80165d0:	460b      	mov	r3, r1
 80165d2:	70fb      	strb	r3, [r7, #3]
 80165d4:	4613      	mov	r3, r2
 80165d6:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 80165d8:	78fb      	ldrb	r3, [r7, #3]
 80165da:	091b      	lsrs	r3, r3, #4
 80165dc:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 80165de:	78bb      	ldrb	r3, [r7, #2]
 80165e0:	091b      	lsrs	r3, r3, #4
 80165e2:	b2db      	uxtb	r3, r3
 80165e4:	7bfa      	ldrb	r2, [r7, #15]
 80165e6:	429a      	cmp	r2, r3
 80165e8:	d803      	bhi.n	80165f2 <RegionCommonChanDisable+0x2a>
 80165ea:	78fa      	ldrb	r2, [r7, #3]
 80165ec:	78bb      	ldrb	r3, [r7, #2]
 80165ee:	429a      	cmp	r2, r3
 80165f0:	d301      	bcc.n	80165f6 <RegionCommonChanDisable+0x2e>
    {
        return false;
 80165f2:	2300      	movs	r3, #0
 80165f4:	e017      	b.n	8016626 <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 80165f6:	7bfb      	ldrb	r3, [r7, #15]
 80165f8:	005b      	lsls	r3, r3, #1
 80165fa:	687a      	ldr	r2, [r7, #4]
 80165fc:	4413      	add	r3, r2
 80165fe:	881b      	ldrh	r3, [r3, #0]
 8016600:	b21a      	sxth	r2, r3
 8016602:	78fb      	ldrb	r3, [r7, #3]
 8016604:	f003 030f 	and.w	r3, r3, #15
 8016608:	2101      	movs	r1, #1
 801660a:	fa01 f303 	lsl.w	r3, r1, r3
 801660e:	b21b      	sxth	r3, r3
 8016610:	43db      	mvns	r3, r3
 8016612:	b21b      	sxth	r3, r3
 8016614:	4013      	ands	r3, r2
 8016616:	b219      	sxth	r1, r3
 8016618:	7bfb      	ldrb	r3, [r7, #15]
 801661a:	005b      	lsls	r3, r3, #1
 801661c:	687a      	ldr	r2, [r7, #4]
 801661e:	4413      	add	r3, r2
 8016620:	b28a      	uxth	r2, r1
 8016622:	801a      	strh	r2, [r3, #0]

    return true;
 8016624:	2301      	movs	r3, #1
}
 8016626:	4618      	mov	r0, r3
 8016628:	3714      	adds	r7, #20
 801662a:	46bd      	mov	sp, r7
 801662c:	bc80      	pop	{r7}
 801662e:	4770      	bx	lr

08016630 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8016630:	b580      	push	{r7, lr}
 8016632:	b084      	sub	sp, #16
 8016634:	af00      	add	r7, sp, #0
 8016636:	6078      	str	r0, [r7, #4]
 8016638:	460b      	mov	r3, r1
 801663a:	70fb      	strb	r3, [r7, #3]
 801663c:	4613      	mov	r3, r2
 801663e:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 8016640:	2300      	movs	r3, #0
 8016642:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 8016644:	687b      	ldr	r3, [r7, #4]
 8016646:	2b00      	cmp	r3, #0
 8016648:	d101      	bne.n	801664e <RegionCommonCountChannels+0x1e>
    {
        return 0;
 801664a:	2300      	movs	r3, #0
 801664c:	e018      	b.n	8016680 <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 801664e:	78fb      	ldrb	r3, [r7, #3]
 8016650:	73bb      	strb	r3, [r7, #14]
 8016652:	e010      	b.n	8016676 <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 8016654:	7bbb      	ldrb	r3, [r7, #14]
 8016656:	005b      	lsls	r3, r3, #1
 8016658:	687a      	ldr	r2, [r7, #4]
 801665a:	4413      	add	r3, r2
 801665c:	881b      	ldrh	r3, [r3, #0]
 801665e:	2110      	movs	r1, #16
 8016660:	4618      	mov	r0, r3
 8016662:	f7ff fef9 	bl	8016458 <CountChannels>
 8016666:	4603      	mov	r3, r0
 8016668:	461a      	mov	r2, r3
 801666a:	7bfb      	ldrb	r3, [r7, #15]
 801666c:	4413      	add	r3, r2
 801666e:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8016670:	7bbb      	ldrb	r3, [r7, #14]
 8016672:	3301      	adds	r3, #1
 8016674:	73bb      	strb	r3, [r7, #14]
 8016676:	7bba      	ldrb	r2, [r7, #14]
 8016678:	78bb      	ldrb	r3, [r7, #2]
 801667a:	429a      	cmp	r2, r3
 801667c:	d3ea      	bcc.n	8016654 <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 801667e:	7bfb      	ldrb	r3, [r7, #15]
}
 8016680:	4618      	mov	r0, r3
 8016682:	3710      	adds	r7, #16
 8016684:	46bd      	mov	sp, r7
 8016686:	bd80      	pop	{r7, pc}

08016688 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 8016688:	b480      	push	{r7}
 801668a:	b087      	sub	sp, #28
 801668c:	af00      	add	r7, sp, #0
 801668e:	60f8      	str	r0, [r7, #12]
 8016690:	60b9      	str	r1, [r7, #8]
 8016692:	4613      	mov	r3, r2
 8016694:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 8016696:	68fb      	ldr	r3, [r7, #12]
 8016698:	2b00      	cmp	r3, #0
 801669a:	d016      	beq.n	80166ca <RegionCommonChanMaskCopy+0x42>
 801669c:	68bb      	ldr	r3, [r7, #8]
 801669e:	2b00      	cmp	r3, #0
 80166a0:	d013      	beq.n	80166ca <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 80166a2:	2300      	movs	r3, #0
 80166a4:	75fb      	strb	r3, [r7, #23]
 80166a6:	e00c      	b.n	80166c2 <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 80166a8:	7dfb      	ldrb	r3, [r7, #23]
 80166aa:	005b      	lsls	r3, r3, #1
 80166ac:	68ba      	ldr	r2, [r7, #8]
 80166ae:	441a      	add	r2, r3
 80166b0:	7dfb      	ldrb	r3, [r7, #23]
 80166b2:	005b      	lsls	r3, r3, #1
 80166b4:	68f9      	ldr	r1, [r7, #12]
 80166b6:	440b      	add	r3, r1
 80166b8:	8812      	ldrh	r2, [r2, #0]
 80166ba:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 80166bc:	7dfb      	ldrb	r3, [r7, #23]
 80166be:	3301      	adds	r3, #1
 80166c0:	75fb      	strb	r3, [r7, #23]
 80166c2:	7dfa      	ldrb	r2, [r7, #23]
 80166c4:	79fb      	ldrb	r3, [r7, #7]
 80166c6:	429a      	cmp	r2, r3
 80166c8:	d3ee      	bcc.n	80166a8 <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 80166ca:	bf00      	nop
 80166cc:	371c      	adds	r7, #28
 80166ce:	46bd      	mov	sp, r7
 80166d0:	bc80      	pop	{r7}
 80166d2:	4770      	bx	lr

080166d4 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 80166d4:	b082      	sub	sp, #8
 80166d6:	b580      	push	{r7, lr}
 80166d8:	b086      	sub	sp, #24
 80166da:	af00      	add	r7, sp, #0
 80166dc:	60f8      	str	r0, [r7, #12]
 80166de:	60b9      	str	r1, [r7, #8]
 80166e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80166e2:	4613      	mov	r3, r2
 80166e4:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 80166e6:	79f9      	ldrb	r1, [r7, #7]
 80166e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80166ec:	cb0c      	ldmia	r3, {r2, r3}
 80166ee:	68f8      	ldr	r0, [r7, #12]
 80166f0:	f7ff fd8c 	bl	801620c <GetDutyCycle>
 80166f4:	4603      	mov	r3, r0
 80166f6:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 80166f8:	68fb      	ldr	r3, [r7, #12]
 80166fa:	68da      	ldr	r2, [r3, #12]
 80166fc:	8afb      	ldrh	r3, [r7, #22]
 80166fe:	68b9      	ldr	r1, [r7, #8]
 8016700:	fb01 f303 	mul.w	r3, r1, r3
 8016704:	429a      	cmp	r2, r3
 8016706:	d909      	bls.n	801671c <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 8016708:	68fb      	ldr	r3, [r7, #12]
 801670a:	68da      	ldr	r2, [r3, #12]
 801670c:	8afb      	ldrh	r3, [r7, #22]
 801670e:	68b9      	ldr	r1, [r7, #8]
 8016710:	fb01 f303 	mul.w	r3, r1, r3
 8016714:	1ad2      	subs	r2, r2, r3
 8016716:	68fb      	ldr	r3, [r7, #12]
 8016718:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 801671a:	e002      	b.n	8016722 <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 801671c:	68fb      	ldr	r3, [r7, #12]
 801671e:	2200      	movs	r2, #0
 8016720:	60da      	str	r2, [r3, #12]
}
 8016722:	bf00      	nop
 8016724:	3718      	adds	r7, #24
 8016726:	46bd      	mov	sp, r7
 8016728:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801672c:	b002      	add	sp, #8
 801672e:	4770      	bx	lr

08016730 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 8016730:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016732:	b08f      	sub	sp, #60	@ 0x3c
 8016734:	af04      	add	r7, sp, #16
 8016736:	6039      	str	r1, [r7, #0]
 8016738:	4611      	mov	r1, r2
 801673a:	461a      	mov	r2, r3
 801673c:	4603      	mov	r3, r0
 801673e:	71fb      	strb	r3, [r7, #7]
 8016740:	460b      	mov	r3, r1
 8016742:	71bb      	strb	r3, [r7, #6]
 8016744:	4613      	mov	r3, r2
 8016746:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 8016748:	f04f 33ff 	mov.w	r3, #4294967295
 801674c:	627b      	str	r3, [r7, #36]	@ 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 801674e:	f004 ff51 	bl	801b5f4 <UTIL_TIMER_GetCurrentTime>
 8016752:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 8016754:	2300      	movs	r3, #0
 8016756:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 8016758:	2301      	movs	r3, #1
 801675a:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 801675c:	2300      	movs	r3, #0
 801675e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 8016762:	2300      	movs	r3, #0
 8016764:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8016768:	e0ba      	b.n	80168e0 <RegionCommonUpdateBandTimeOff+0x1b0>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 801676a:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 801676e:	4613      	mov	r3, r2
 8016770:	005b      	lsls	r3, r3, #1
 8016772:	4413      	add	r3, r2
 8016774:	00db      	lsls	r3, r3, #3
 8016776:	461a      	mov	r2, r3
 8016778:	683b      	ldr	r3, [r7, #0]
 801677a:	189c      	adds	r4, r3, r2
 801677c:	f897 6040 	ldrb.w	r6, [r7, #64]	@ 0x40
 8016780:	797a      	ldrb	r2, [r7, #5]
 8016782:	79fd      	ldrb	r5, [r7, #7]
 8016784:	69fb      	ldr	r3, [r7, #28]
 8016786:	9302      	str	r3, [sp, #8]
 8016788:	46ec      	mov	ip, sp
 801678a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801678e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016792:	e88c 0003 	stmia.w	ip, {r0, r1}
 8016796:	4633      	mov	r3, r6
 8016798:	4629      	mov	r1, r5
 801679a:	4620      	mov	r0, r4
 801679c:	f7ff fe22 	bl	80163e4 <UpdateTimeCredits>
 80167a0:	4603      	mov	r3, r0
 80167a2:	82fb      	strh	r3, [r7, #22]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 80167a4:	8afa      	ldrh	r2, [r7, #22]
 80167a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80167a8:	fb02 f303 	mul.w	r3, r2, r3
 80167ac:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
 80167ae:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 80167b2:	4613      	mov	r3, r2
 80167b4:	005b      	lsls	r3, r3, #1
 80167b6:	4413      	add	r3, r2
 80167b8:	00db      	lsls	r3, r3, #3
 80167ba:	461a      	mov	r2, r3
 80167bc:	683b      	ldr	r3, [r7, #0]
 80167be:	4413      	add	r3, r2
 80167c0:	68db      	ldr	r3, [r3, #12]
 80167c2:	69ba      	ldr	r2, [r7, #24]
 80167c4:	429a      	cmp	r2, r3
 80167c6:	d308      	bcc.n	80167da <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 80167c8:	797b      	ldrb	r3, [r7, #5]
 80167ca:	f083 0301 	eor.w	r3, r3, #1
 80167ce:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits > creditCosts ) ||
 80167d0:	2b00      	cmp	r3, #0
 80167d2:	d013      	beq.n	80167fc <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 80167d4:	79fb      	ldrb	r3, [r7, #7]
 80167d6:	2b00      	cmp	r3, #0
 80167d8:	d010      	beq.n	80167fc <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 80167da:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 80167de:	4613      	mov	r3, r2
 80167e0:	005b      	lsls	r3, r3, #1
 80167e2:	4413      	add	r3, r2
 80167e4:	00db      	lsls	r3, r3, #3
 80167e6:	461a      	mov	r2, r3
 80167e8:	683b      	ldr	r3, [r7, #0]
 80167ea:	4413      	add	r3, r2
 80167ec:	2201      	movs	r2, #1
 80167ee:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 80167f0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80167f4:	3301      	adds	r3, #1
 80167f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80167fa:	e06c      	b.n	80168d6 <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 80167fc:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8016800:	4613      	mov	r3, r2
 8016802:	005b      	lsls	r3, r3, #1
 8016804:	4413      	add	r3, r2
 8016806:	00db      	lsls	r3, r3, #3
 8016808:	461a      	mov	r2, r3
 801680a:	683b      	ldr	r3, [r7, #0]
 801680c:	4413      	add	r3, r2
 801680e:	2200      	movs	r2, #0
 8016810:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits > creditCosts )
 8016812:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8016816:	4613      	mov	r3, r2
 8016818:	005b      	lsls	r3, r3, #1
 801681a:	4413      	add	r3, r2
 801681c:	00db      	lsls	r3, r3, #3
 801681e:	461a      	mov	r2, r3
 8016820:	683b      	ldr	r3, [r7, #0]
 8016822:	4413      	add	r3, r2
 8016824:	691b      	ldr	r3, [r3, #16]
 8016826:	69ba      	ldr	r2, [r7, #24]
 8016828:	429a      	cmp	r2, r3
 801682a:	d215      	bcs.n	8016858 <RegionCommonUpdateBandTimeOff+0x128>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 801682c:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8016830:	4613      	mov	r3, r2
 8016832:	005b      	lsls	r3, r3, #1
 8016834:	4413      	add	r3, r2
 8016836:	00db      	lsls	r3, r3, #3
 8016838:	461a      	mov	r2, r3
 801683a:	683b      	ldr	r3, [r7, #0]
 801683c:	4413      	add	r3, r2
 801683e:	68db      	ldr	r3, [r3, #12]
 8016840:	69ba      	ldr	r2, [r7, #24]
 8016842:	1ad3      	subs	r3, r2, r3
 8016844:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016846:	4293      	cmp	r3, r2
 8016848:	bf28      	it	cs
 801684a:	4613      	movcs	r3, r2
 801684c:	627b      	str	r3, [r7, #36]	@ 0x24
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 801684e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8016852:	3301      	adds	r3, #1
 8016854:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 8016858:	79fb      	ldrb	r3, [r7, #7]
 801685a:	f083 0301 	eor.w	r3, r3, #1
 801685e:	b2db      	uxtb	r3, r3
 8016860:	2b00      	cmp	r3, #0
 8016862:	d038      	beq.n	80168d6 <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 8016864:	2300      	movs	r3, #0
 8016866:	60fb      	str	r3, [r7, #12]
 8016868:	2300      	movs	r3, #0
 801686a:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 801686c:	8afb      	ldrh	r3, [r7, #22]
 801686e:	2b64      	cmp	r3, #100	@ 0x64
 8016870:	d103      	bne.n	801687a <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 8016872:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8016876:	60fb      	str	r3, [r7, #12]
 8016878:	e009      	b.n	801688e <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 801687a:	8afb      	ldrh	r3, [r7, #22]
 801687c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8016880:	d103      	bne.n	801688a <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 8016882:	f649 23b0 	movw	r3, #39600	@ 0x9ab0
 8016886:	60fb      	str	r3, [r7, #12]
 8016888:	e001      	b.n	801688e <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 801688a:	4b1e      	ldr	r3, [pc, #120]	@ (8016904 <RegionCommonUpdateBandTimeOff+0x1d4>)
 801688c:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 801688e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016890:	4a1c      	ldr	r2, [pc, #112]	@ (8016904 <RegionCommonUpdateBandTimeOff+0x1d4>)
 8016892:	4293      	cmp	r3, r2
 8016894:	d90e      	bls.n	80168b4 <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 8016896:	68fa      	ldr	r2, [r7, #12]
 8016898:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801689a:	f5a3 33f6 	sub.w	r3, r3, #125952	@ 0x1ec00
 801689e:	3b30      	subs	r3, #48	@ 0x30
 80168a0:	4919      	ldr	r1, [pc, #100]	@ (8016908 <RegionCommonUpdateBandTimeOff+0x1d8>)
 80168a2:	fba1 1303 	umull	r1, r3, r1, r3
 80168a6:	0c1b      	lsrs	r3, r3, #16
 80168a8:	3301      	adds	r3, #1
 80168aa:	4918      	ldr	r1, [pc, #96]	@ (801690c <RegionCommonUpdateBandTimeOff+0x1dc>)
 80168ac:	fb01 f303 	mul.w	r3, r1, r3
 80168b0:	4413      	add	r3, r2
 80168b2:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 80168b4:	f107 000c 	add.w	r0, r7, #12
 80168b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80168ba:	9300      	str	r3, [sp, #0]
 80168bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80168be:	f107 020c 	add.w	r2, r7, #12
 80168c2:	ca06      	ldmia	r2, {r1, r2}
 80168c4:	f003 ffaf 	bl	801a826 <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 80168c8:	f107 030c 	add.w	r3, r7, #12
 80168cc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80168d0:	f004 f868 	bl	801a9a4 <SysTimeToMs>
 80168d4:	6278      	str	r0, [r7, #36]	@ 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 80168d6:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80168da:	3301      	adds	r3, #1
 80168dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80168e0:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 80168e4:	79bb      	ldrb	r3, [r7, #6]
 80168e6:	429a      	cmp	r2, r3
 80168e8:	f4ff af3f 	bcc.w	801676a <RegionCommonUpdateBandTimeOff+0x3a>
            }
        }
    }

    if( validBands == 0 )
 80168ec:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80168f0:	2b00      	cmp	r3, #0
 80168f2:	d102      	bne.n	80168fa <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 80168f4:	f04f 33ff 	mov.w	r3, #4294967295
 80168f8:	e000      	b.n	80168fc <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 80168fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80168fc:	4618      	mov	r0, r3
 80168fe:	372c      	adds	r7, #44	@ 0x2c
 8016900:	46bd      	mov	sp, r7
 8016902:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016904:	0001ec30 	.word	0x0001ec30
 8016908:	c22e4507 	.word	0xc22e4507
 801690c:	00015180 	.word	0x00015180

08016910 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 8016910:	b480      	push	{r7}
 8016912:	b085      	sub	sp, #20
 8016914:	af00      	add	r7, sp, #0
 8016916:	6078      	str	r0, [r7, #4]
 8016918:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 801691a:	2300      	movs	r3, #0
 801691c:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 801691e:	687b      	ldr	r3, [r7, #4]
 8016920:	781b      	ldrb	r3, [r3, #0]
 8016922:	2b03      	cmp	r3, #3
 8016924:	d140      	bne.n	80169a8 <RegionCommonParseLinkAdrReq+0x98>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 8016926:	687b      	ldr	r3, [r7, #4]
 8016928:	3301      	adds	r3, #1
 801692a:	781b      	ldrb	r3, [r3, #0]
 801692c:	b25a      	sxtb	r2, r3
 801692e:	683b      	ldr	r3, [r7, #0]
 8016930:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 8016932:	683b      	ldr	r3, [r7, #0]
 8016934:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016938:	f003 030f 	and.w	r3, r3, #15
 801693c:	b25a      	sxtb	r2, r3
 801693e:	683b      	ldr	r3, [r7, #0]
 8016940:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8016942:	683b      	ldr	r3, [r7, #0]
 8016944:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016948:	b2db      	uxtb	r3, r3
 801694a:	091b      	lsrs	r3, r3, #4
 801694c:	b2db      	uxtb	r3, r3
 801694e:	b25a      	sxtb	r2, r3
 8016950:	683b      	ldr	r3, [r7, #0]
 8016952:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8016954:	687b      	ldr	r3, [r7, #4]
 8016956:	3302      	adds	r3, #2
 8016958:	781b      	ldrb	r3, [r3, #0]
 801695a:	461a      	mov	r2, r3
 801695c:	683b      	ldr	r3, [r7, #0]
 801695e:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8016960:	683b      	ldr	r3, [r7, #0]
 8016962:	889b      	ldrh	r3, [r3, #4]
 8016964:	b21a      	sxth	r2, r3
 8016966:	687b      	ldr	r3, [r7, #4]
 8016968:	3303      	adds	r3, #3
 801696a:	781b      	ldrb	r3, [r3, #0]
 801696c:	b21b      	sxth	r3, r3
 801696e:	021b      	lsls	r3, r3, #8
 8016970:	b21b      	sxth	r3, r3
 8016972:	4313      	orrs	r3, r2
 8016974:	b21b      	sxth	r3, r3
 8016976:	b29a      	uxth	r2, r3
 8016978:	683b      	ldr	r3, [r7, #0]
 801697a:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 801697c:	687b      	ldr	r3, [r7, #4]
 801697e:	791a      	ldrb	r2, [r3, #4]
 8016980:	683b      	ldr	r3, [r7, #0]
 8016982:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 8016984:	683b      	ldr	r3, [r7, #0]
 8016986:	781b      	ldrb	r3, [r3, #0]
 8016988:	091b      	lsrs	r3, r3, #4
 801698a:	b2db      	uxtb	r3, r3
 801698c:	f003 0307 	and.w	r3, r3, #7
 8016990:	b2da      	uxtb	r2, r3
 8016992:	683b      	ldr	r3, [r7, #0]
 8016994:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 8016996:	683b      	ldr	r3, [r7, #0]
 8016998:	781b      	ldrb	r3, [r3, #0]
 801699a:	f003 030f 	and.w	r3, r3, #15
 801699e:	b2da      	uxtb	r2, r3
 80169a0:	683b      	ldr	r3, [r7, #0]
 80169a2:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 80169a4:	2305      	movs	r3, #5
 80169a6:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 80169a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80169aa:	4618      	mov	r0, r3
 80169ac:	3714      	adds	r7, #20
 80169ae:	46bd      	mov	sp, r7
 80169b0:	bc80      	pop	{r7}
 80169b2:	4770      	bx	lr

080169b4 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 80169b4:	b5b0      	push	{r4, r5, r7, lr}
 80169b6:	b088      	sub	sp, #32
 80169b8:	af02      	add	r7, sp, #8
 80169ba:	60f8      	str	r0, [r7, #12]
 80169bc:	60b9      	str	r1, [r7, #8]
 80169be:	607a      	str	r2, [r7, #4]
 80169c0:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 80169c2:	68fb      	ldr	r3, [r7, #12]
 80169c4:	791b      	ldrb	r3, [r3, #4]
 80169c6:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 80169c8:	68fb      	ldr	r3, [r7, #12]
 80169ca:	799b      	ldrb	r3, [r3, #6]
 80169cc:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 80169ce:	68fb      	ldr	r3, [r7, #12]
 80169d0:	79db      	ldrb	r3, [r3, #7]
 80169d2:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 80169d4:	68fb      	ldr	r3, [r7, #12]
 80169d6:	7a1b      	ldrb	r3, [r3, #8]
 80169d8:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 80169da:	68fb      	ldr	r3, [r7, #12]
 80169dc:	795b      	ldrb	r3, [r3, #5]
 80169de:	f083 0301 	eor.w	r3, r3, #1
 80169e2:	b2db      	uxtb	r3, r3
 80169e4:	2b00      	cmp	r3, #0
 80169e6:	d008      	beq.n	80169fa <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 80169e8:	68fb      	ldr	r3, [r7, #12]
 80169ea:	7adb      	ldrb	r3, [r3, #11]
 80169ec:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 80169ee:	68fb      	ldr	r3, [r7, #12]
 80169f0:	7a5b      	ldrb	r3, [r3, #9]
 80169f2:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 80169f4:	68fb      	ldr	r3, [r7, #12]
 80169f6:	7a9b      	ldrb	r3, [r3, #10]
 80169f8:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 80169fa:	7dfb      	ldrb	r3, [r7, #23]
 80169fc:	2b00      	cmp	r3, #0
 80169fe:	d04a      	beq.n	8016a96 <RegionCommonLinkAdrReqVerifyParams+0xe2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 8016a00:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8016a04:	2b0f      	cmp	r3, #15
 8016a06:	d103      	bne.n	8016a10 <RegionCommonLinkAdrReqVerifyParams+0x5c>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 8016a08:	68fb      	ldr	r3, [r7, #12]
 8016a0a:	7a5b      	ldrb	r3, [r3, #9]
 8016a0c:	75bb      	strb	r3, [r7, #22]
 8016a0e:	e01d      	b.n	8016a4c <RegionCommonLinkAdrReqVerifyParams+0x98>
        }
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8016a10:	68fb      	ldr	r3, [r7, #12]
 8016a12:	7b18      	ldrb	r0, [r3, #12]
 8016a14:	68fb      	ldr	r3, [r7, #12]
 8016a16:	6919      	ldr	r1, [r3, #16]
 8016a18:	68fb      	ldr	r3, [r7, #12]
 8016a1a:	f993 5014 	ldrsb.w	r5, [r3, #20]
 8016a1e:	68fb      	ldr	r3, [r7, #12]
 8016a20:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8016a24:	68fa      	ldr	r2, [r7, #12]
 8016a26:	6992      	ldr	r2, [r2, #24]
 8016a28:	f997 4016 	ldrsb.w	r4, [r7, #22]
 8016a2c:	9201      	str	r2, [sp, #4]
 8016a2e:	9300      	str	r3, [sp, #0]
 8016a30:	462b      	mov	r3, r5
 8016a32:	4622      	mov	r2, r4
 8016a34:	f7ff fd39 	bl	80164aa <RegionCommonChanVerifyDr>
 8016a38:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 8016a3a:	f083 0301 	eor.w	r3, r3, #1
 8016a3e:	b2db      	uxtb	r3, r3
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8016a40:	2b00      	cmp	r3, #0
 8016a42:	d003      	beq.n	8016a4c <RegionCommonLinkAdrReqVerifyParams+0x98>
        {
            status &= 0xFD; // Datarate KO
 8016a44:	7dfb      	ldrb	r3, [r7, #23]
 8016a46:	f023 0302 	bic.w	r3, r3, #2
 8016a4a:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( txPower == 0x0F )
 8016a4c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8016a50:	2b0f      	cmp	r3, #15
 8016a52:	d103      	bne.n	8016a5c <RegionCommonLinkAdrReqVerifyParams+0xa8>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
 8016a54:	68fb      	ldr	r3, [r7, #12]
 8016a56:	7a9b      	ldrb	r3, [r3, #10]
 8016a58:	757b      	strb	r3, [r7, #21]
 8016a5a:	e01c      	b.n	8016a96 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 8016a5c:	68fb      	ldr	r3, [r7, #12]
 8016a5e:	f993 101d 	ldrsb.w	r1, [r3, #29]
 8016a62:	68fb      	ldr	r3, [r7, #12]
 8016a64:	f993 201c 	ldrsb.w	r2, [r3, #28]
 8016a68:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8016a6c:	4618      	mov	r0, r3
 8016a6e:	f7ff fd8e 	bl	801658e <RegionCommonValueInRange>
 8016a72:	4603      	mov	r3, r0
 8016a74:	2b00      	cmp	r3, #0
 8016a76:	d10e      	bne.n	8016a96 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 8016a78:	68fb      	ldr	r3, [r7, #12]
 8016a7a:	f993 301d 	ldrsb.w	r3, [r3, #29]
 8016a7e:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8016a82:	429a      	cmp	r2, r3
 8016a84:	da03      	bge.n	8016a8e <RegionCommonLinkAdrReqVerifyParams+0xda>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 8016a86:	68fb      	ldr	r3, [r7, #12]
 8016a88:	7f5b      	ldrb	r3, [r3, #29]
 8016a8a:	757b      	strb	r3, [r7, #21]
 8016a8c:	e003      	b.n	8016a96 <RegionCommonLinkAdrReqVerifyParams+0xe2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 8016a8e:	7dfb      	ldrb	r3, [r7, #23]
 8016a90:	f023 0304 	bic.w	r3, r3, #4
 8016a94:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 8016a96:	7dfb      	ldrb	r3, [r7, #23]
 8016a98:	2b07      	cmp	r3, #7
 8016a9a:	d105      	bne.n	8016aa8 <RegionCommonLinkAdrReqVerifyParams+0xf4>
    {
        if( nbRepetitions == 0 )
 8016a9c:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8016aa0:	2b00      	cmp	r3, #0
 8016aa2:	d101      	bne.n	8016aa8 <RegionCommonLinkAdrReqVerifyParams+0xf4>
        { // Set nbRep to the default value of 1.
            nbRepetitions = 1;
 8016aa4:	2301      	movs	r3, #1
 8016aa6:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 8016aa8:	68bb      	ldr	r3, [r7, #8]
 8016aaa:	7dba      	ldrb	r2, [r7, #22]
 8016aac:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 8016aae:	687b      	ldr	r3, [r7, #4]
 8016ab0:	7d7a      	ldrb	r2, [r7, #21]
 8016ab2:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 8016ab4:	7d3a      	ldrb	r2, [r7, #20]
 8016ab6:	683b      	ldr	r3, [r7, #0]
 8016ab8:	701a      	strb	r2, [r3, #0]

    return status;
 8016aba:	7dfb      	ldrb	r3, [r7, #23]
}
 8016abc:	4618      	mov	r0, r3
 8016abe:	3718      	adds	r7, #24
 8016ac0:	46bd      	mov	sp, r7
 8016ac2:	bdb0      	pop	{r4, r5, r7, pc}

08016ac4 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 8016ac4:	b480      	push	{r7}
 8016ac6:	b083      	sub	sp, #12
 8016ac8:	af00      	add	r7, sp, #0
 8016aca:	4603      	mov	r3, r0
 8016acc:	6039      	str	r1, [r7, #0]
 8016ace:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 8016ad0:	79fb      	ldrb	r3, [r7, #7]
 8016ad2:	4a06      	ldr	r2, [pc, #24]	@ (8016aec <RegionCommonComputeSymbolTimeLoRa+0x28>)
 8016ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8016ad8:	461a      	mov	r2, r3
 8016ada:	683b      	ldr	r3, [r7, #0]
 8016adc:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8016ae0:	4618      	mov	r0, r3
 8016ae2:	370c      	adds	r7, #12
 8016ae4:	46bd      	mov	sp, r7
 8016ae6:	bc80      	pop	{r7}
 8016ae8:	4770      	bx	lr
 8016aea:	bf00      	nop
 8016aec:	000f4240 	.word	0x000f4240

08016af0 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 8016af0:	b480      	push	{r7}
 8016af2:	b083      	sub	sp, #12
 8016af4:	af00      	add	r7, sp, #0
 8016af6:	4603      	mov	r3, r0
 8016af8:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 8016afa:	79fb      	ldrb	r3, [r7, #7]
 8016afc:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8016b00:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8016b04:	4618      	mov	r0, r3
 8016b06:	370c      	adds	r7, #12
 8016b08:	46bd      	mov	sp, r7
 8016b0a:	bc80      	pop	{r7}
 8016b0c:	4770      	bx	lr
	...

08016b10 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 8016b10:	b480      	push	{r7}
 8016b12:	b085      	sub	sp, #20
 8016b14:	af00      	add	r7, sp, #0
 8016b16:	60f8      	str	r0, [r7, #12]
 8016b18:	607a      	str	r2, [r7, #4]
 8016b1a:	603b      	str	r3, [r7, #0]
 8016b1c:	460b      	mov	r3, r1
 8016b1e:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8016b20:	7afa      	ldrb	r2, [r7, #11]
 8016b22:	7afb      	ldrb	r3, [r7, #11]
 8016b24:	3b04      	subs	r3, #4
 8016b26:	4619      	mov	r1, r3
 8016b28:	68fb      	ldr	r3, [r7, #12]
 8016b2a:	fb03 f101 	mul.w	r1, r3, r1
 8016b2e:	687b      	ldr	r3, [r7, #4]
 8016b30:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8016b34:	fb00 f303 	mul.w	r3, r0, r3
 8016b38:	440b      	add	r3, r1
 8016b3a:	005b      	lsls	r3, r3, #1
 8016b3c:	2b00      	cmp	r3, #0
 8016b3e:	d013      	beq.n	8016b68 <RegionCommonComputeRxWindowParameters+0x58>
 8016b40:	7afb      	ldrb	r3, [r7, #11]
 8016b42:	3b04      	subs	r3, #4
 8016b44:	4619      	mov	r1, r3
 8016b46:	68fb      	ldr	r3, [r7, #12]
 8016b48:	fb03 f101 	mul.w	r1, r3, r1
 8016b4c:	687b      	ldr	r3, [r7, #4]
 8016b4e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8016b52:	fb00 f303 	mul.w	r3, r0, r3
 8016b56:	440b      	add	r3, r1
 8016b58:	0059      	lsls	r1, r3, #1
 8016b5a:	68fb      	ldr	r3, [r7, #12]
 8016b5c:	440b      	add	r3, r1
 8016b5e:	1e59      	subs	r1, r3, #1
 8016b60:	68fb      	ldr	r3, [r7, #12]
 8016b62:	fbb1 f3f3 	udiv	r3, r1, r3
 8016b66:	e00f      	b.n	8016b88 <RegionCommonComputeRxWindowParameters+0x78>
 8016b68:	7afb      	ldrb	r3, [r7, #11]
 8016b6a:	3b04      	subs	r3, #4
 8016b6c:	4619      	mov	r1, r3
 8016b6e:	68fb      	ldr	r3, [r7, #12]
 8016b70:	fb03 f101 	mul.w	r1, r3, r1
 8016b74:	687b      	ldr	r3, [r7, #4]
 8016b76:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8016b7a:	fb00 f303 	mul.w	r3, r0, r3
 8016b7e:	440b      	add	r3, r1
 8016b80:	0059      	lsls	r1, r3, #1
 8016b82:	68fb      	ldr	r3, [r7, #12]
 8016b84:	fbb1 f3f3 	udiv	r3, r1, r3
 8016b88:	429a      	cmp	r2, r3
 8016b8a:	bf38      	it	cc
 8016b8c:	461a      	movcc	r2, r3
 8016b8e:	69bb      	ldr	r3, [r7, #24]
 8016b90:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 8016b92:	68fb      	ldr	r3, [r7, #12]
 8016b94:	009b      	lsls	r3, r3, #2
 8016b96:	4619      	mov	r1, r3
 8016b98:	69bb      	ldr	r3, [r7, #24]
 8016b9a:	681b      	ldr	r3, [r3, #0]
 8016b9c:	68fa      	ldr	r2, [r7, #12]
 8016b9e:	fb02 f303 	mul.w	r3, r2, r3
 8016ba2:	2b00      	cmp	r3, #0
 8016ba4:	d007      	beq.n	8016bb6 <RegionCommonComputeRxWindowParameters+0xa6>
 8016ba6:	69bb      	ldr	r3, [r7, #24]
 8016ba8:	681b      	ldr	r3, [r3, #0]
 8016baa:	68fa      	ldr	r2, [r7, #12]
 8016bac:	fb02 f303 	mul.w	r3, r2, r3
 8016bb0:	3301      	adds	r3, #1
 8016bb2:	085b      	lsrs	r3, r3, #1
 8016bb4:	e005      	b.n	8016bc2 <RegionCommonComputeRxWindowParameters+0xb2>
 8016bb6:	69bb      	ldr	r3, [r7, #24]
 8016bb8:	681b      	ldr	r3, [r3, #0]
 8016bba:	68fa      	ldr	r2, [r7, #12]
 8016bbc:	fb02 f303 	mul.w	r3, r2, r3
 8016bc0:	085b      	lsrs	r3, r3, #1
 8016bc2:	1acb      	subs	r3, r1, r3
 8016bc4:	683a      	ldr	r2, [r7, #0]
 8016bc6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8016bca:	fb01 f202 	mul.w	r2, r1, r2
 8016bce:	1a9b      	subs	r3, r3, r2
 8016bd0:	2b00      	cmp	r3, #0
 8016bd2:	dd27      	ble.n	8016c24 <RegionCommonComputeRxWindowParameters+0x114>
 8016bd4:	68fb      	ldr	r3, [r7, #12]
 8016bd6:	009b      	lsls	r3, r3, #2
 8016bd8:	4619      	mov	r1, r3
 8016bda:	69bb      	ldr	r3, [r7, #24]
 8016bdc:	681b      	ldr	r3, [r3, #0]
 8016bde:	68fa      	ldr	r2, [r7, #12]
 8016be0:	fb02 f303 	mul.w	r3, r2, r3
 8016be4:	2b00      	cmp	r3, #0
 8016be6:	d007      	beq.n	8016bf8 <RegionCommonComputeRxWindowParameters+0xe8>
 8016be8:	69bb      	ldr	r3, [r7, #24]
 8016bea:	681b      	ldr	r3, [r3, #0]
 8016bec:	68fa      	ldr	r2, [r7, #12]
 8016bee:	fb02 f303 	mul.w	r3, r2, r3
 8016bf2:	3301      	adds	r3, #1
 8016bf4:	085b      	lsrs	r3, r3, #1
 8016bf6:	e005      	b.n	8016c04 <RegionCommonComputeRxWindowParameters+0xf4>
 8016bf8:	69bb      	ldr	r3, [r7, #24]
 8016bfa:	681b      	ldr	r3, [r3, #0]
 8016bfc:	68fa      	ldr	r2, [r7, #12]
 8016bfe:	fb02 f303 	mul.w	r3, r2, r3
 8016c02:	085b      	lsrs	r3, r3, #1
 8016c04:	1acb      	subs	r3, r1, r3
 8016c06:	683a      	ldr	r2, [r7, #0]
 8016c08:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8016c0c:	fb01 f202 	mul.w	r2, r1, r2
 8016c10:	1a9b      	subs	r3, r3, r2
 8016c12:	f203 33e7 	addw	r3, r3, #999	@ 0x3e7
 8016c16:	4a19      	ldr	r2, [pc, #100]	@ (8016c7c <RegionCommonComputeRxWindowParameters+0x16c>)
 8016c18:	fb82 1203 	smull	r1, r2, r2, r3
 8016c1c:	1192      	asrs	r2, r2, #6
 8016c1e:	17db      	asrs	r3, r3, #31
 8016c20:	1ad3      	subs	r3, r2, r3
 8016c22:	e024      	b.n	8016c6e <RegionCommonComputeRxWindowParameters+0x15e>
 8016c24:	68fb      	ldr	r3, [r7, #12]
 8016c26:	009b      	lsls	r3, r3, #2
 8016c28:	4619      	mov	r1, r3
 8016c2a:	69bb      	ldr	r3, [r7, #24]
 8016c2c:	681b      	ldr	r3, [r3, #0]
 8016c2e:	68fa      	ldr	r2, [r7, #12]
 8016c30:	fb02 f303 	mul.w	r3, r2, r3
 8016c34:	2b00      	cmp	r3, #0
 8016c36:	d007      	beq.n	8016c48 <RegionCommonComputeRxWindowParameters+0x138>
 8016c38:	69bb      	ldr	r3, [r7, #24]
 8016c3a:	681b      	ldr	r3, [r3, #0]
 8016c3c:	68fa      	ldr	r2, [r7, #12]
 8016c3e:	fb02 f303 	mul.w	r3, r2, r3
 8016c42:	3301      	adds	r3, #1
 8016c44:	085b      	lsrs	r3, r3, #1
 8016c46:	e005      	b.n	8016c54 <RegionCommonComputeRxWindowParameters+0x144>
 8016c48:	69bb      	ldr	r3, [r7, #24]
 8016c4a:	681b      	ldr	r3, [r3, #0]
 8016c4c:	68fa      	ldr	r2, [r7, #12]
 8016c4e:	fb02 f303 	mul.w	r3, r2, r3
 8016c52:	085b      	lsrs	r3, r3, #1
 8016c54:	1acb      	subs	r3, r1, r3
 8016c56:	683a      	ldr	r2, [r7, #0]
 8016c58:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8016c5c:	fb01 f202 	mul.w	r2, r1, r2
 8016c60:	1a9b      	subs	r3, r3, r2
 8016c62:	4a06      	ldr	r2, [pc, #24]	@ (8016c7c <RegionCommonComputeRxWindowParameters+0x16c>)
 8016c64:	fb82 1203 	smull	r1, r2, r2, r3
 8016c68:	1192      	asrs	r2, r2, #6
 8016c6a:	17db      	asrs	r3, r3, #31
 8016c6c:	1ad3      	subs	r3, r2, r3
 8016c6e:	69fa      	ldr	r2, [r7, #28]
 8016c70:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 8016c72:	bf00      	nop
 8016c74:	3714      	adds	r7, #20
 8016c76:	46bd      	mov	sp, r7
 8016c78:	bc80      	pop	{r7}
 8016c7a:	4770      	bx	lr
 8016c7c:	10624dd3 	.word	0x10624dd3

08016c80 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 8016c80:	b580      	push	{r7, lr}
 8016c82:	b086      	sub	sp, #24
 8016c84:	af00      	add	r7, sp, #0
 8016c86:	4603      	mov	r3, r0
 8016c88:	60b9      	str	r1, [r7, #8]
 8016c8a:	607a      	str	r2, [r7, #4]
 8016c8c:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8016c8e:	2300      	movs	r3, #0
 8016c90:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8016c92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016c96:	005b      	lsls	r3, r3, #1
 8016c98:	4618      	mov	r0, r3
 8016c9a:	f7ea f813 	bl	8000cc4 <__aeabi_ui2f>
 8016c9e:	4603      	mov	r3, r0
 8016ca0:	4619      	mov	r1, r3
 8016ca2:	68b8      	ldr	r0, [r7, #8]
 8016ca4:	f7e9 ff5c 	bl	8000b60 <__aeabi_fsub>
 8016ca8:	4603      	mov	r3, r0
 8016caa:	6879      	ldr	r1, [r7, #4]
 8016cac:	4618      	mov	r0, r3
 8016cae:	f7e9 ff57 	bl	8000b60 <__aeabi_fsub>
 8016cb2:	4603      	mov	r3, r0
 8016cb4:	4618      	mov	r0, r3
 8016cb6:	f7e9 fc1f 	bl	80004f8 <__aeabi_f2d>
 8016cba:	4602      	mov	r2, r0
 8016cbc:	460b      	mov	r3, r1
 8016cbe:	4610      	mov	r0, r2
 8016cc0:	4619      	mov	r1, r3
 8016cc2:	f007 fc79 	bl	801e5b8 <floor>
 8016cc6:	4602      	mov	r2, r0
 8016cc8:	460b      	mov	r3, r1
 8016cca:	4610      	mov	r0, r2
 8016ccc:	4619      	mov	r1, r3
 8016cce:	f7e9 ff1b 	bl	8000b08 <__aeabi_d2iz>
 8016cd2:	4603      	mov	r3, r0
 8016cd4:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 8016cd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016cda:	4618      	mov	r0, r3
 8016cdc:	3718      	adds	r7, #24
 8016cde:	46bd      	mov	sp, r7
 8016ce0:	bd80      	pop	{r7, pc}

08016ce2 <RegionCommonCountNbOfEnabledChannels>:
    /* ST_WORKAROUND_END */
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 8016ce2:	b590      	push	{r4, r7, lr}
 8016ce4:	b087      	sub	sp, #28
 8016ce6:	af00      	add	r7, sp, #0
 8016ce8:	60f8      	str	r0, [r7, #12]
 8016cea:	60b9      	str	r1, [r7, #8]
 8016cec:	607a      	str	r2, [r7, #4]
 8016cee:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 8016cf0:	2300      	movs	r3, #0
 8016cf2:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 8016cf4:	2300      	movs	r3, #0
 8016cf6:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8016cf8:	2300      	movs	r3, #0
 8016cfa:	757b      	strb	r3, [r7, #21]
 8016cfc:	2300      	movs	r3, #0
 8016cfe:	753b      	strb	r3, [r7, #20]
 8016d00:	e09c      	b.n	8016e3c <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8016d02:	2300      	movs	r3, #0
 8016d04:	74fb      	strb	r3, [r7, #19]
 8016d06:	e08f      	b.n	8016e28 <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 8016d08:	68fb      	ldr	r3, [r7, #12]
 8016d0a:	685a      	ldr	r2, [r3, #4]
 8016d0c:	7d3b      	ldrb	r3, [r7, #20]
 8016d0e:	005b      	lsls	r3, r3, #1
 8016d10:	4413      	add	r3, r2
 8016d12:	881b      	ldrh	r3, [r3, #0]
 8016d14:	461a      	mov	r2, r3
 8016d16:	7cfb      	ldrb	r3, [r7, #19]
 8016d18:	fa42 f303 	asr.w	r3, r2, r3
 8016d1c:	f003 0301 	and.w	r3, r3, #1
 8016d20:	2b00      	cmp	r3, #0
 8016d22:	d07e      	beq.n	8016e22 <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 8016d24:	68fb      	ldr	r3, [r7, #12]
 8016d26:	689a      	ldr	r2, [r3, #8]
 8016d28:	7d79      	ldrb	r1, [r7, #21]
 8016d2a:	7cfb      	ldrb	r3, [r7, #19]
 8016d2c:	440b      	add	r3, r1
 8016d2e:	4619      	mov	r1, r3
 8016d30:	460b      	mov	r3, r1
 8016d32:	005b      	lsls	r3, r3, #1
 8016d34:	440b      	add	r3, r1
 8016d36:	009b      	lsls	r3, r3, #2
 8016d38:	4413      	add	r3, r2
 8016d3a:	681b      	ldr	r3, [r3, #0]
 8016d3c:	2b00      	cmp	r3, #0
 8016d3e:	d06b      	beq.n	8016e18 <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8016d40:	68fb      	ldr	r3, [r7, #12]
 8016d42:	781b      	ldrb	r3, [r3, #0]
 8016d44:	f083 0301 	eor.w	r3, r3, #1
 8016d48:	b2db      	uxtb	r3, r3
 8016d4a:	2b00      	cmp	r3, #0
 8016d4c:	d011      	beq.n	8016d72 <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 8016d4e:	68fb      	ldr	r3, [r7, #12]
 8016d50:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8016d52:	2b00      	cmp	r3, #0
 8016d54:	d00d      	beq.n	8016d72 <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 8016d56:	68fb      	ldr	r3, [r7, #12]
 8016d58:	695a      	ldr	r2, [r3, #20]
 8016d5a:	7d3b      	ldrb	r3, [r7, #20]
 8016d5c:	005b      	lsls	r3, r3, #1
 8016d5e:	4413      	add	r3, r2
 8016d60:	881b      	ldrh	r3, [r3, #0]
 8016d62:	461a      	mov	r2, r3
 8016d64:	7cfb      	ldrb	r3, [r7, #19]
 8016d66:	fa42 f303 	asr.w	r3, r2, r3
 8016d6a:	f003 0301 	and.w	r3, r3, #1
 8016d6e:	2b00      	cmp	r3, #0
 8016d70:	d054      	beq.n	8016e1c <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8016d72:	68fb      	ldr	r3, [r7, #12]
 8016d74:	785b      	ldrb	r3, [r3, #1]
 8016d76:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 8016d78:	68fb      	ldr	r3, [r7, #12]
 8016d7a:	689a      	ldr	r2, [r3, #8]
 8016d7c:	7d79      	ldrb	r1, [r7, #21]
 8016d7e:	7cfb      	ldrb	r3, [r7, #19]
 8016d80:	440b      	add	r3, r1
 8016d82:	4619      	mov	r1, r3
 8016d84:	460b      	mov	r3, r1
 8016d86:	005b      	lsls	r3, r3, #1
 8016d88:	440b      	add	r3, r1
 8016d8a:	009b      	lsls	r3, r3, #2
 8016d8c:	4413      	add	r3, r2
 8016d8e:	7a1b      	ldrb	r3, [r3, #8]
 8016d90:	f343 0303 	sbfx	r3, r3, #0, #4
 8016d94:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8016d96:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 8016d98:	68fb      	ldr	r3, [r7, #12]
 8016d9a:	689a      	ldr	r2, [r3, #8]
 8016d9c:	7d79      	ldrb	r1, [r7, #21]
 8016d9e:	7cfb      	ldrb	r3, [r7, #19]
 8016da0:	440b      	add	r3, r1
 8016da2:	4619      	mov	r1, r3
 8016da4:	460b      	mov	r3, r1
 8016da6:	005b      	lsls	r3, r3, #1
 8016da8:	440b      	add	r3, r1
 8016daa:	009b      	lsls	r3, r3, #2
 8016dac:	4413      	add	r3, r2
 8016dae:	7a1b      	ldrb	r3, [r3, #8]
 8016db0:	f343 1303 	sbfx	r3, r3, #4, #4
 8016db4:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8016db6:	461a      	mov	r2, r3
 8016db8:	4621      	mov	r1, r4
 8016dba:	f7ff fbe8 	bl	801658e <RegionCommonValueInRange>
 8016dbe:	4603      	mov	r3, r0
 8016dc0:	2b00      	cmp	r3, #0
 8016dc2:	d02d      	beq.n	8016e20 <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 8016dc4:	68fb      	ldr	r3, [r7, #12]
 8016dc6:	68da      	ldr	r2, [r3, #12]
 8016dc8:	68fb      	ldr	r3, [r7, #12]
 8016dca:	6899      	ldr	r1, [r3, #8]
 8016dcc:	7d78      	ldrb	r0, [r7, #21]
 8016dce:	7cfb      	ldrb	r3, [r7, #19]
 8016dd0:	4403      	add	r3, r0
 8016dd2:	4618      	mov	r0, r3
 8016dd4:	4603      	mov	r3, r0
 8016dd6:	005b      	lsls	r3, r3, #1
 8016dd8:	4403      	add	r3, r0
 8016dda:	009b      	lsls	r3, r3, #2
 8016ddc:	440b      	add	r3, r1
 8016dde:	7a5b      	ldrb	r3, [r3, #9]
 8016de0:	4619      	mov	r1, r3
 8016de2:	460b      	mov	r3, r1
 8016de4:	005b      	lsls	r3, r3, #1
 8016de6:	440b      	add	r3, r1
 8016de8:	00db      	lsls	r3, r3, #3
 8016dea:	4413      	add	r3, r2
 8016dec:	7d1b      	ldrb	r3, [r3, #20]
 8016dee:	f083 0301 	eor.w	r3, r3, #1
 8016df2:	b2db      	uxtb	r3, r3
 8016df4:	2b00      	cmp	r3, #0
 8016df6:	d003      	beq.n	8016e00 <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 8016df8:	7dbb      	ldrb	r3, [r7, #22]
 8016dfa:	3301      	adds	r3, #1
 8016dfc:	75bb      	strb	r3, [r7, #22]
                    continue;
 8016dfe:	e010      	b.n	8016e22 <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 8016e00:	7dfb      	ldrb	r3, [r7, #23]
 8016e02:	1c5a      	adds	r2, r3, #1
 8016e04:	75fa      	strb	r2, [r7, #23]
 8016e06:	461a      	mov	r2, r3
 8016e08:	68bb      	ldr	r3, [r7, #8]
 8016e0a:	4413      	add	r3, r2
 8016e0c:	7d79      	ldrb	r1, [r7, #21]
 8016e0e:	7cfa      	ldrb	r2, [r7, #19]
 8016e10:	440a      	add	r2, r1
 8016e12:	b2d2      	uxtb	r2, r2
 8016e14:	701a      	strb	r2, [r3, #0]
 8016e16:	e004      	b.n	8016e22 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8016e18:	bf00      	nop
 8016e1a:	e002      	b.n	8016e22 <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 8016e1c:	bf00      	nop
 8016e1e:	e000      	b.n	8016e22 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8016e20:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 8016e22:	7cfb      	ldrb	r3, [r7, #19]
 8016e24:	3301      	adds	r3, #1
 8016e26:	74fb      	strb	r3, [r7, #19]
 8016e28:	7cfb      	ldrb	r3, [r7, #19]
 8016e2a:	2b0f      	cmp	r3, #15
 8016e2c:	f67f af6c 	bls.w	8016d08 <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8016e30:	7d7b      	ldrb	r3, [r7, #21]
 8016e32:	3310      	adds	r3, #16
 8016e34:	757b      	strb	r3, [r7, #21]
 8016e36:	7d3b      	ldrb	r3, [r7, #20]
 8016e38:	3301      	adds	r3, #1
 8016e3a:	753b      	strb	r3, [r7, #20]
 8016e3c:	7d7b      	ldrb	r3, [r7, #21]
 8016e3e:	b29a      	uxth	r2, r3
 8016e40:	68fb      	ldr	r3, [r7, #12]
 8016e42:	8a1b      	ldrh	r3, [r3, #16]
 8016e44:	429a      	cmp	r2, r3
 8016e46:	f4ff af5c 	bcc.w	8016d02 <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 8016e4a:	687b      	ldr	r3, [r7, #4]
 8016e4c:	7dfa      	ldrb	r2, [r7, #23]
 8016e4e:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 8016e50:	683b      	ldr	r3, [r7, #0]
 8016e52:	7dba      	ldrb	r2, [r7, #22]
 8016e54:	701a      	strb	r2, [r3, #0]
}
 8016e56:	bf00      	nop
 8016e58:	371c      	adds	r7, #28
 8016e5a:	46bd      	mov	sp, r7
 8016e5c:	bd90      	pop	{r4, r7, pc}

08016e5e <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 8016e5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016e60:	b08b      	sub	sp, #44	@ 0x2c
 8016e62:	af04      	add	r7, sp, #16
 8016e64:	60f8      	str	r0, [r7, #12]
 8016e66:	60b9      	str	r1, [r7, #8]
 8016e68:	607a      	str	r2, [r7, #4]
 8016e6a:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 8016e6c:	68fb      	ldr	r3, [r7, #12]
 8016e6e:	685b      	ldr	r3, [r3, #4]
 8016e70:	4618      	mov	r0, r3
 8016e72:	f004 fbd1 	bl	801b618 <UTIL_TIMER_GetElapsedTime>
 8016e76:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 8016e78:	68fb      	ldr	r3, [r7, #12]
 8016e7a:	681a      	ldr	r2, [r3, #0]
 8016e7c:	697b      	ldr	r3, [r7, #20]
 8016e7e:	1ad2      	subs	r2, r2, r3
 8016e80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016e82:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 8016e84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016e86:	2201      	movs	r2, #1
 8016e88:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 8016e8a:	683b      	ldr	r3, [r7, #0]
 8016e8c:	2200      	movs	r2, #0
 8016e8e:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8016e90:	68fb      	ldr	r3, [r7, #12]
 8016e92:	685b      	ldr	r3, [r3, #4]
 8016e94:	2b00      	cmp	r3, #0
 8016e96:	d004      	beq.n	8016ea2 <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 8016e98:	68fb      	ldr	r3, [r7, #12]
 8016e9a:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8016e9c:	697a      	ldr	r2, [r7, #20]
 8016e9e:	429a      	cmp	r2, r3
 8016ea0:	d32b      	bcc.n	8016efa <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 8016ea2:	68bb      	ldr	r3, [r7, #8]
 8016ea4:	2200      	movs	r2, #0
 8016ea6:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8016ea8:	68fb      	ldr	r3, [r7, #12]
 8016eaa:	69db      	ldr	r3, [r3, #28]
 8016eac:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 8016eae:	68fb      	ldr	r3, [r7, #12]
 8016eb0:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8016eb2:	68dd      	ldr	r5, [r3, #12]
 8016eb4:	68fb      	ldr	r3, [r7, #12]
 8016eb6:	7a5e      	ldrb	r6, [r3, #9]
 8016eb8:	68fb      	ldr	r3, [r7, #12]
 8016eba:	f893 c008 	ldrb.w	ip, [r3, #8]
 8016ebe:	68fb      	ldr	r3, [r7, #12]
 8016ec0:	7d1b      	ldrb	r3, [r3, #20]
 8016ec2:	68fa      	ldr	r2, [r7, #12]
 8016ec4:	6992      	ldr	r2, [r2, #24]
 8016ec6:	9203      	str	r2, [sp, #12]
 8016ec8:	68fa      	ldr	r2, [r7, #12]
 8016eca:	f10d 0e04 	add.w	lr, sp, #4
 8016ece:	320c      	adds	r2, #12
 8016ed0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016ed4:	e88e 0003 	stmia.w	lr, {r0, r1}
 8016ed8:	9300      	str	r3, [sp, #0]
 8016eda:	4663      	mov	r3, ip
 8016edc:	4632      	mov	r2, r6
 8016ede:	4629      	mov	r1, r5
 8016ee0:	4620      	mov	r0, r4
 8016ee2:	f7ff fc25 	bl	8016730 <RegionCommonUpdateBandTimeOff>
 8016ee6:	4602      	mov	r2, r0
 8016ee8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016eea:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 8016eec:	68fb      	ldr	r3, [r7, #12]
 8016eee:	69d8      	ldr	r0, [r3, #28]
 8016ef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016ef2:	683a      	ldr	r2, [r7, #0]
 8016ef4:	6879      	ldr	r1, [r7, #4]
 8016ef6:	f7ff fef4 	bl	8016ce2 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 8016efa:	683b      	ldr	r3, [r7, #0]
 8016efc:	781b      	ldrb	r3, [r3, #0]
 8016efe:	2b00      	cmp	r3, #0
 8016f00:	d004      	beq.n	8016f0c <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 8016f02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016f04:	2200      	movs	r2, #0
 8016f06:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8016f08:	2300      	movs	r3, #0
 8016f0a:	e006      	b.n	8016f1a <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 8016f0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016f0e:	781b      	ldrb	r3, [r3, #0]
 8016f10:	2b00      	cmp	r3, #0
 8016f12:	d001      	beq.n	8016f18 <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8016f14:	230b      	movs	r3, #11
 8016f16:	e000      	b.n	8016f1a <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8016f18:	230c      	movs	r3, #12
    }
}
 8016f1a:	4618      	mov	r0, r3
 8016f1c:	371c      	adds	r7, #28
 8016f1e:	46bd      	mov	sp, r7
 8016f20:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016f22 <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 8016f22:	b5b0      	push	{r4, r5, r7, lr}
 8016f24:	b086      	sub	sp, #24
 8016f26:	af02      	add	r7, sp, #8
 8016f28:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 8016f2a:	687b      	ldr	r3, [r7, #4]
 8016f2c:	781b      	ldrb	r3, [r3, #0]
 8016f2e:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 8016f30:	687b      	ldr	r3, [r7, #4]
 8016f32:	f993 2000 	ldrsb.w	r2, [r3]
 8016f36:	687b      	ldr	r3, [r7, #4]
 8016f38:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8016f3c:	429a      	cmp	r2, r3
 8016f3e:	d103      	bne.n	8016f48 <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 8016f40:	687b      	ldr	r3, [r7, #4]
 8016f42:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8016f46:	e026      	b.n	8016f96 <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 8016f48:	7bfb      	ldrb	r3, [r7, #15]
 8016f4a:	3b01      	subs	r3, #1
 8016f4c:	b2db      	uxtb	r3, r3
 8016f4e:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 8016f50:	687b      	ldr	r3, [r7, #4]
 8016f52:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8016f56:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8016f5a:	429a      	cmp	r2, r3
 8016f5c:	d019      	beq.n	8016f92 <RegionCommonGetNextLowerTxDr+0x70>
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 8016f5e:	687b      	ldr	r3, [r7, #4]
 8016f60:	78d8      	ldrb	r0, [r3, #3]
 8016f62:	687b      	ldr	r3, [r7, #4]
 8016f64:	6859      	ldr	r1, [r3, #4]
 8016f66:	687b      	ldr	r3, [r7, #4]
 8016f68:	f993 5002 	ldrsb.w	r5, [r3, #2]
 8016f6c:	687b      	ldr	r3, [r7, #4]
 8016f6e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016f72:	687a      	ldr	r2, [r7, #4]
 8016f74:	6892      	ldr	r2, [r2, #8]
 8016f76:	f997 400f 	ldrsb.w	r4, [r7, #15]
 8016f7a:	9201      	str	r2, [sp, #4]
 8016f7c:	9300      	str	r3, [sp, #0]
 8016f7e:	462b      	mov	r3, r5
 8016f80:	4622      	mov	r2, r4
 8016f82:	f7ff fa92 	bl	80164aa <RegionCommonChanVerifyDr>
 8016f86:	4603      	mov	r3, r0
 8016f88:	f083 0301 	eor.w	r3, r3, #1
 8016f8c:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 8016f8e:	2b00      	cmp	r3, #0
 8016f90:	d1da      	bne.n	8016f48 <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 8016f92:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 8016f96:	4618      	mov	r0, r3
 8016f98:	3710      	adds	r7, #16
 8016f9a:	46bd      	mov	sp, r7
 8016f9c:	bdb0      	pop	{r4, r5, r7, pc}

08016f9e <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 8016f9e:	b480      	push	{r7}
 8016fa0:	b083      	sub	sp, #12
 8016fa2:	af00      	add	r7, sp, #0
 8016fa4:	4603      	mov	r3, r0
 8016fa6:	460a      	mov	r2, r1
 8016fa8:	71fb      	strb	r3, [r7, #7]
 8016faa:	4613      	mov	r3, r2
 8016fac:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 8016fae:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8016fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016fb6:	4293      	cmp	r3, r2
 8016fb8:	bfb8      	it	lt
 8016fba:	4613      	movlt	r3, r2
 8016fbc:	b25b      	sxtb	r3, r3
}
 8016fbe:	4618      	mov	r0, r3
 8016fc0:	370c      	adds	r7, #12
 8016fc2:	46bd      	mov	sp, r7
 8016fc4:	bc80      	pop	{r7}
 8016fc6:	4770      	bx	lr

08016fc8 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 8016fc8:	b480      	push	{r7}
 8016fca:	b083      	sub	sp, #12
 8016fcc:	af00      	add	r7, sp, #0
 8016fce:	6078      	str	r0, [r7, #4]
 8016fd0:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 8016fd2:	687b      	ldr	r3, [r7, #4]
 8016fd4:	009b      	lsls	r3, r3, #2
 8016fd6:	683a      	ldr	r2, [r7, #0]
 8016fd8:	4413      	add	r3, r2
 8016fda:	681b      	ldr	r3, [r3, #0]
 8016fdc:	4a07      	ldr	r2, [pc, #28]	@ (8016ffc <RegionCommonGetBandwidth+0x34>)
 8016fde:	4293      	cmp	r3, r2
 8016fe0:	d004      	beq.n	8016fec <RegionCommonGetBandwidth+0x24>
 8016fe2:	4a07      	ldr	r2, [pc, #28]	@ (8017000 <RegionCommonGetBandwidth+0x38>)
 8016fe4:	4293      	cmp	r3, r2
 8016fe6:	d003      	beq.n	8016ff0 <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 8016fe8:	2300      	movs	r3, #0
 8016fea:	e002      	b.n	8016ff2 <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 8016fec:	2301      	movs	r3, #1
 8016fee:	e000      	b.n	8016ff2 <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 8016ff0:	2302      	movs	r3, #2
    }
}
 8016ff2:	4618      	mov	r0, r3
 8016ff4:	370c      	adds	r7, #12
 8016ff6:	46bd      	mov	sp, r7
 8016ff8:	bc80      	pop	{r7}
 8016ffa:	4770      	bx	lr
 8016ffc:	0003d090 	.word	0x0003d090
 8017000:	0007a120 	.word	0x0007a120

08017004 <RegionCommonRxConfigPrint>:

/* ST_WORKAROUND_BEGIN: Print Tx/Rx config */
void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 8017004:	b580      	push	{r7, lr}
 8017006:	b086      	sub	sp, #24
 8017008:	af04      	add	r7, sp, #16
 801700a:	4603      	mov	r3, r0
 801700c:	6039      	str	r1, [r7, #0]
 801700e:	71fb      	strb	r3, [r7, #7]
 8017010:	4613      	mov	r3, r2
 8017012:	71bb      	strb	r3, [r7, #6]
    if ( rxSlot < RX_SLOT_NONE )
 8017014:	79fb      	ldrb	r3, [r7, #7]
 8017016:	2b05      	cmp	r3, #5
 8017018:	d810      	bhi.n	801703c <RegionCommonRxConfigPrint+0x38>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 801701a:	79fb      	ldrb	r3, [r7, #7]
 801701c:	4a0f      	ldr	r2, [pc, #60]	@ (801705c <RegionCommonRxConfigPrint+0x58>)
 801701e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017022:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8017026:	9202      	str	r2, [sp, #8]
 8017028:	683a      	ldr	r2, [r7, #0]
 801702a:	9201      	str	r2, [sp, #4]
 801702c:	9300      	str	r3, [sp, #0]
 801702e:	4b0c      	ldr	r3, [pc, #48]	@ (8017060 <RegionCommonRxConfigPrint+0x5c>)
 8017030:	2201      	movs	r2, #1
 8017032:	2100      	movs	r1, #0
 8017034:	2002      	movs	r0, #2
 8017036:	f004 fbcd 	bl	801b7d4 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 801703a:	e00a      	b.n	8017052 <RegionCommonRxConfigPrint+0x4e>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 801703c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8017040:	9301      	str	r3, [sp, #4]
 8017042:	683b      	ldr	r3, [r7, #0]
 8017044:	9300      	str	r3, [sp, #0]
 8017046:	4b07      	ldr	r3, [pc, #28]	@ (8017064 <RegionCommonRxConfigPrint+0x60>)
 8017048:	2201      	movs	r2, #1
 801704a:	2100      	movs	r1, #0
 801704c:	2002      	movs	r0, #2
 801704e:	f004 fbc1 	bl	801b7d4 <UTIL_ADV_TRACE_COND_FSend>
}
 8017052:	bf00      	nop
 8017054:	3708      	adds	r7, #8
 8017056:	46bd      	mov	sp, r7
 8017058:	bd80      	pop	{r7, pc}
 801705a:	bf00      	nop
 801705c:	20000110 	.word	0x20000110
 8017060:	0801f060 	.word	0x0801f060
 8017064:	0801f080 	.word	0x0801f080

08017068 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 8017068:	b580      	push	{r7, lr}
 801706a:	b084      	sub	sp, #16
 801706c:	af02      	add	r7, sp, #8
 801706e:	6078      	str	r0, [r7, #4]
 8017070:	460b      	mov	r3, r1
 8017072:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 8017074:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8017078:	9301      	str	r3, [sp, #4]
 801707a:	687b      	ldr	r3, [r7, #4]
 801707c:	9300      	str	r3, [sp, #0]
 801707e:	4b05      	ldr	r3, [pc, #20]	@ (8017094 <RegionCommonTxConfigPrint+0x2c>)
 8017080:	2201      	movs	r2, #1
 8017082:	2100      	movs	r1, #0
 8017084:	2002      	movs	r0, #2
 8017086:	f004 fba5 	bl	801b7d4 <UTIL_ADV_TRACE_COND_FSend>
}
 801708a:	bf00      	nop
 801708c:	3708      	adds	r7, #8
 801708e:	46bd      	mov	sp, r7
 8017090:	bd80      	pop	{r7, pc}
 8017092:	bf00      	nop
 8017094:	0801f09c 	.word	0x0801f09c

08017098 <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 8017098:	b480      	push	{r7}
 801709a:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 801709c:	4b0d      	ldr	r3, [pc, #52]	@ (80170d4 <rand1+0x3c>)
 801709e:	681b      	ldr	r3, [r3, #0]
 80170a0:	4a0d      	ldr	r2, [pc, #52]	@ (80170d8 <rand1+0x40>)
 80170a2:	fb02 f303 	mul.w	r3, r2, r3
 80170a6:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80170aa:	3339      	adds	r3, #57	@ 0x39
 80170ac:	4a09      	ldr	r2, [pc, #36]	@ (80170d4 <rand1+0x3c>)
 80170ae:	6013      	str	r3, [r2, #0]
 80170b0:	4b08      	ldr	r3, [pc, #32]	@ (80170d4 <rand1+0x3c>)
 80170b2:	681a      	ldr	r2, [r3, #0]
 80170b4:	2303      	movs	r3, #3
 80170b6:	fba3 1302 	umull	r1, r3, r3, r2
 80170ba:	1ad1      	subs	r1, r2, r3
 80170bc:	0849      	lsrs	r1, r1, #1
 80170be:	440b      	add	r3, r1
 80170c0:	0f99      	lsrs	r1, r3, #30
 80170c2:	460b      	mov	r3, r1
 80170c4:	07db      	lsls	r3, r3, #31
 80170c6:	1a5b      	subs	r3, r3, r1
 80170c8:	1ad1      	subs	r1, r2, r3
 80170ca:	460b      	mov	r3, r1
}
 80170cc:	4618      	mov	r0, r3
 80170ce:	46bd      	mov	sp, r7
 80170d0:	bc80      	pop	{r7}
 80170d2:	4770      	bx	lr
 80170d4:	20000128 	.word	0x20000128
 80170d8:	41c64e6d 	.word	0x41c64e6d

080170dc <srand1>:

void srand1( uint32_t seed )
{
 80170dc:	b480      	push	{r7}
 80170de:	b083      	sub	sp, #12
 80170e0:	af00      	add	r7, sp, #0
 80170e2:	6078      	str	r0, [r7, #4]
    next = seed;
 80170e4:	4a03      	ldr	r2, [pc, #12]	@ (80170f4 <srand1+0x18>)
 80170e6:	687b      	ldr	r3, [r7, #4]
 80170e8:	6013      	str	r3, [r2, #0]
}
 80170ea:	bf00      	nop
 80170ec:	370c      	adds	r7, #12
 80170ee:	46bd      	mov	sp, r7
 80170f0:	bc80      	pop	{r7}
 80170f2:	4770      	bx	lr
 80170f4:	20000128 	.word	0x20000128

080170f8 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 80170f8:	b580      	push	{r7, lr}
 80170fa:	b082      	sub	sp, #8
 80170fc:	af00      	add	r7, sp, #0
 80170fe:	6078      	str	r0, [r7, #4]
 8017100:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 8017102:	f7ff ffc9 	bl	8017098 <rand1>
 8017106:	4602      	mov	r2, r0
 8017108:	6839      	ldr	r1, [r7, #0]
 801710a:	687b      	ldr	r3, [r7, #4]
 801710c:	1acb      	subs	r3, r1, r3
 801710e:	3301      	adds	r3, #1
 8017110:	fb92 f1f3 	sdiv	r1, r2, r3
 8017114:	fb01 f303 	mul.w	r3, r1, r3
 8017118:	1ad2      	subs	r2, r2, r3
 801711a:	687b      	ldr	r3, [r7, #4]
 801711c:	4413      	add	r3, r2
}
 801711e:	4618      	mov	r0, r3
 8017120:	3708      	adds	r7, #8
 8017122:	46bd      	mov	sp, r7
 8017124:	bd80      	pop	{r7, pc}

08017126 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8017126:	b480      	push	{r7}
 8017128:	b085      	sub	sp, #20
 801712a:	af00      	add	r7, sp, #0
 801712c:	60f8      	str	r0, [r7, #12]
 801712e:	60b9      	str	r1, [r7, #8]
 8017130:	4613      	mov	r3, r2
 8017132:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 8017134:	e007      	b.n	8017146 <memcpy1+0x20>
    {
        *dst++ = *src++;
 8017136:	68ba      	ldr	r2, [r7, #8]
 8017138:	1c53      	adds	r3, r2, #1
 801713a:	60bb      	str	r3, [r7, #8]
 801713c:	68fb      	ldr	r3, [r7, #12]
 801713e:	1c59      	adds	r1, r3, #1
 8017140:	60f9      	str	r1, [r7, #12]
 8017142:	7812      	ldrb	r2, [r2, #0]
 8017144:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8017146:	88fb      	ldrh	r3, [r7, #6]
 8017148:	1e5a      	subs	r2, r3, #1
 801714a:	80fa      	strh	r2, [r7, #6]
 801714c:	2b00      	cmp	r3, #0
 801714e:	d1f2      	bne.n	8017136 <memcpy1+0x10>
    }
}
 8017150:	bf00      	nop
 8017152:	bf00      	nop
 8017154:	3714      	adds	r7, #20
 8017156:	46bd      	mov	sp, r7
 8017158:	bc80      	pop	{r7}
 801715a:	4770      	bx	lr

0801715c <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 801715c:	b480      	push	{r7}
 801715e:	b085      	sub	sp, #20
 8017160:	af00      	add	r7, sp, #0
 8017162:	60f8      	str	r0, [r7, #12]
 8017164:	60b9      	str	r1, [r7, #8]
 8017166:	4613      	mov	r3, r2
 8017168:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 801716a:	88fb      	ldrh	r3, [r7, #6]
 801716c:	3b01      	subs	r3, #1
 801716e:	68fa      	ldr	r2, [r7, #12]
 8017170:	4413      	add	r3, r2
 8017172:	60fb      	str	r3, [r7, #12]
    while( size-- )
 8017174:	e007      	b.n	8017186 <memcpyr+0x2a>
    {
        *dst-- = *src++;
 8017176:	68ba      	ldr	r2, [r7, #8]
 8017178:	1c53      	adds	r3, r2, #1
 801717a:	60bb      	str	r3, [r7, #8]
 801717c:	68fb      	ldr	r3, [r7, #12]
 801717e:	1e59      	subs	r1, r3, #1
 8017180:	60f9      	str	r1, [r7, #12]
 8017182:	7812      	ldrb	r2, [r2, #0]
 8017184:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8017186:	88fb      	ldrh	r3, [r7, #6]
 8017188:	1e5a      	subs	r2, r3, #1
 801718a:	80fa      	strh	r2, [r7, #6]
 801718c:	2b00      	cmp	r3, #0
 801718e:	d1f2      	bne.n	8017176 <memcpyr+0x1a>
    }
}
 8017190:	bf00      	nop
 8017192:	bf00      	nop
 8017194:	3714      	adds	r7, #20
 8017196:	46bd      	mov	sp, r7
 8017198:	bc80      	pop	{r7}
 801719a:	4770      	bx	lr

0801719c <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 801719c:	b480      	push	{r7}
 801719e:	b083      	sub	sp, #12
 80171a0:	af00      	add	r7, sp, #0
 80171a2:	6078      	str	r0, [r7, #4]
 80171a4:	460b      	mov	r3, r1
 80171a6:	70fb      	strb	r3, [r7, #3]
 80171a8:	4613      	mov	r3, r2
 80171aa:	803b      	strh	r3, [r7, #0]
    while( size-- )
 80171ac:	e004      	b.n	80171b8 <memset1+0x1c>
    {
        *dst++ = value;
 80171ae:	687b      	ldr	r3, [r7, #4]
 80171b0:	1c5a      	adds	r2, r3, #1
 80171b2:	607a      	str	r2, [r7, #4]
 80171b4:	78fa      	ldrb	r2, [r7, #3]
 80171b6:	701a      	strb	r2, [r3, #0]
    while( size-- )
 80171b8:	883b      	ldrh	r3, [r7, #0]
 80171ba:	1e5a      	subs	r2, r3, #1
 80171bc:	803a      	strh	r2, [r7, #0]
 80171be:	2b00      	cmp	r3, #0
 80171c0:	d1f5      	bne.n	80171ae <memset1+0x12>
    }
}
 80171c2:	bf00      	nop
 80171c4:	bf00      	nop
 80171c6:	370c      	adds	r7, #12
 80171c8:	46bd      	mov	sp, r7
 80171ca:	bc80      	pop	{r7}
 80171cc:	4770      	bx	lr
	...

080171d0 <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 80171d0:	b480      	push	{r7}
 80171d2:	b085      	sub	sp, #20
 80171d4:	af00      	add	r7, sp, #0
 80171d6:	6078      	str	r0, [r7, #4]
 80171d8:	460b      	mov	r3, r1
 80171da:	807b      	strh	r3, [r7, #2]
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 80171dc:	f04f 33ff 	mov.w	r3, #4294967295
 80171e0:	60fb      	str	r3, [r7, #12]

    if( buffer == NULL )
 80171e2:	687b      	ldr	r3, [r7, #4]
 80171e4:	2b00      	cmp	r3, #0
 80171e6:	d101      	bne.n	80171ec <Crc32+0x1c>
    {
        return 0;
 80171e8:	2300      	movs	r3, #0
 80171ea:	e026      	b.n	801723a <Crc32+0x6a>
    }

    for( uint16_t i = 0; i < length; ++i )
 80171ec:	2300      	movs	r3, #0
 80171ee:	817b      	strh	r3, [r7, #10]
 80171f0:	e01d      	b.n	801722e <Crc32+0x5e>
    {
        crc ^= ( uint32_t )buffer[i];
 80171f2:	897b      	ldrh	r3, [r7, #10]
 80171f4:	687a      	ldr	r2, [r7, #4]
 80171f6:	4413      	add	r3, r2
 80171f8:	781b      	ldrb	r3, [r3, #0]
 80171fa:	461a      	mov	r2, r3
 80171fc:	68fb      	ldr	r3, [r7, #12]
 80171fe:	4053      	eors	r3, r2
 8017200:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 8017202:	2300      	movs	r3, #0
 8017204:	813b      	strh	r3, [r7, #8]
 8017206:	e00c      	b.n	8017222 <Crc32+0x52>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 8017208:	68fb      	ldr	r3, [r7, #12]
 801720a:	085a      	lsrs	r2, r3, #1
 801720c:	68fb      	ldr	r3, [r7, #12]
 801720e:	f003 0301 	and.w	r3, r3, #1
 8017212:	425b      	negs	r3, r3
 8017214:	490b      	ldr	r1, [pc, #44]	@ (8017244 <Crc32+0x74>)
 8017216:	400b      	ands	r3, r1
 8017218:	4053      	eors	r3, r2
 801721a:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 801721c:	893b      	ldrh	r3, [r7, #8]
 801721e:	3301      	adds	r3, #1
 8017220:	813b      	strh	r3, [r7, #8]
 8017222:	893b      	ldrh	r3, [r7, #8]
 8017224:	2b07      	cmp	r3, #7
 8017226:	d9ef      	bls.n	8017208 <Crc32+0x38>
    for( uint16_t i = 0; i < length; ++i )
 8017228:	897b      	ldrh	r3, [r7, #10]
 801722a:	3301      	adds	r3, #1
 801722c:	817b      	strh	r3, [r7, #10]
 801722e:	897a      	ldrh	r2, [r7, #10]
 8017230:	887b      	ldrh	r3, [r7, #2]
 8017232:	429a      	cmp	r2, r3
 8017234:	d3dd      	bcc.n	80171f2 <Crc32+0x22>
        }
    }

    return ~crc;
 8017236:	68fb      	ldr	r3, [r7, #12]
 8017238:	43db      	mvns	r3, r3
}
 801723a:	4618      	mov	r0, r3
 801723c:	3714      	adds	r7, #20
 801723e:	46bd      	mov	sp, r7
 8017240:	bc80      	pop	{r7}
 8017242:	4770      	bx	lr
 8017244:	edb88320 	.word	0xedb88320

08017248 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8017248:	b580      	push	{r7, lr}
 801724a:	b084      	sub	sp, #16
 801724c:	af02      	add	r7, sp, #8
 801724e:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8017250:	4a24      	ldr	r2, [pc, #144]	@ (80172e4 <RadioInit+0x9c>)
 8017252:	687b      	ldr	r3, [r7, #4]
 8017254:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 8017256:	4b24      	ldr	r3, [pc, #144]	@ (80172e8 <RadioInit+0xa0>)
 8017258:	2200      	movs	r2, #0
 801725a:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 801725c:	4b22      	ldr	r3, [pc, #136]	@ (80172e8 <RadioInit+0xa0>)
 801725e:	2200      	movs	r2, #0
 8017260:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 8017262:	4b21      	ldr	r3, [pc, #132]	@ (80172e8 <RadioInit+0xa0>)
 8017264:	2200      	movs	r2, #0
 8017266:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8017268:	4b1f      	ldr	r3, [pc, #124]	@ (80172e8 <RadioInit+0xa0>)
 801726a:	2200      	movs	r2, #0
 801726c:	659a      	str	r2, [r3, #88]	@ 0x58

    SUBGRF_Init( RadioOnDioIrq );
 801726e:	481f      	ldr	r0, [pc, #124]	@ (80172ec <RadioInit+0xa4>)
 8017270:	f001 ff8e 	bl	8019190 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 8017274:	4b1c      	ldr	r3, [pc, #112]	@ (80172e8 <RadioInit+0xa0>)
 8017276:	2200      	movs	r2, #0
 8017278:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 801727a:	4b1b      	ldr	r3, [pc, #108]	@ (80172e8 <RadioInit+0xa0>)
 801727c:	2200      	movs	r2, #0
 801727e:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 8017280:	f002 fa1e 	bl	80196c0 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8017284:	2100      	movs	r1, #0
 8017286:	2000      	movs	r0, #0
 8017288:	f002 fde6 	bl	8019e58 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 801728c:	2204      	movs	r2, #4
 801728e:	2100      	movs	r1, #0
 8017290:	2001      	movs	r0, #1
 8017292:	f002 fba9 	bl	80199e8 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8017296:	2300      	movs	r3, #0
 8017298:	2200      	movs	r2, #0
 801729a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801729e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80172a2:	f002 fad9 	bl	8019858 <SUBGRF_SetDioIrqParams>

    /* ST_WORKAROUND_BEGIN: Sleep radio */
    RadioSleep();
 80172a6:	f000 fe83 	bl	8017fb0 <RadioSleep>
    /* ST_WORKAROUND_END */
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 80172aa:	2300      	movs	r3, #0
 80172ac:	9300      	str	r3, [sp, #0]
 80172ae:	4b10      	ldr	r3, [pc, #64]	@ (80172f0 <RadioInit+0xa8>)
 80172b0:	2200      	movs	r2, #0
 80172b2:	f04f 31ff 	mov.w	r1, #4294967295
 80172b6:	480f      	ldr	r0, [pc, #60]	@ (80172f4 <RadioInit+0xac>)
 80172b8:	f003 ffde 	bl	801b278 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 80172bc:	2300      	movs	r3, #0
 80172be:	9300      	str	r3, [sp, #0]
 80172c0:	4b0d      	ldr	r3, [pc, #52]	@ (80172f8 <RadioInit+0xb0>)
 80172c2:	2200      	movs	r2, #0
 80172c4:	f04f 31ff 	mov.w	r1, #4294967295
 80172c8:	480c      	ldr	r0, [pc, #48]	@ (80172fc <RadioInit+0xb4>)
 80172ca:	f003 ffd5 	bl	801b278 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 80172ce:	4809      	ldr	r0, [pc, #36]	@ (80172f4 <RadioInit+0xac>)
 80172d0:	f004 f876 	bl	801b3c0 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 80172d4:	4809      	ldr	r0, [pc, #36]	@ (80172fc <RadioInit+0xb4>)
 80172d6:	f004 f873 	bl	801b3c0 <UTIL_TIMER_Stop>
}
 80172da:	bf00      	nop
 80172dc:	3708      	adds	r7, #8
 80172de:	46bd      	mov	sp, r7
 80172e0:	bd80      	pop	{r7, pc}
 80172e2:	bf00      	nop
 80172e4:	20001cf0 	.word	0x20001cf0
 80172e8:	20001cf4 	.word	0x20001cf4
 80172ec:	08018399 	.word	0x08018399
 80172f0:	08018321 	.word	0x08018321
 80172f4:	20001d50 	.word	0x20001d50
 80172f8:	08018335 	.word	0x08018335
 80172fc:	20001d68 	.word	0x20001d68

08017300 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8017300:	b580      	push	{r7, lr}
 8017302:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8017304:	f001 ff86 	bl	8019214 <SUBGRF_GetOperatingMode>
 8017308:	4603      	mov	r3, r0
 801730a:	2b07      	cmp	r3, #7
 801730c:	d00a      	beq.n	8017324 <RadioGetStatus+0x24>
 801730e:	2b07      	cmp	r3, #7
 8017310:	dc0a      	bgt.n	8017328 <RadioGetStatus+0x28>
 8017312:	2b04      	cmp	r3, #4
 8017314:	d002      	beq.n	801731c <RadioGetStatus+0x1c>
 8017316:	2b05      	cmp	r3, #5
 8017318:	d002      	beq.n	8017320 <RadioGetStatus+0x20>
 801731a:	e005      	b.n	8017328 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 801731c:	2302      	movs	r3, #2
 801731e:	e004      	b.n	801732a <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8017320:	2301      	movs	r3, #1
 8017322:	e002      	b.n	801732a <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8017324:	2303      	movs	r3, #3
 8017326:	e000      	b.n	801732a <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8017328:	2300      	movs	r3, #0
    }
}
 801732a:	4618      	mov	r0, r3
 801732c:	bd80      	pop	{r7, pc}
	...

08017330 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8017330:	b580      	push	{r7, lr}
 8017332:	b082      	sub	sp, #8
 8017334:	af00      	add	r7, sp, #0
 8017336:	4603      	mov	r3, r0
 8017338:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 801733a:	4a2a      	ldr	r2, [pc, #168]	@ (80173e4 <RadioSetModem+0xb4>)
 801733c:	79fb      	ldrb	r3, [r7, #7]
 801733e:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 8017340:	79fb      	ldrb	r3, [r7, #7]
 8017342:	4618      	mov	r0, r3
 8017344:	f003 f94b 	bl	801a5de <RFW_SetRadioModem>
    switch( modem )
 8017348:	79fb      	ldrb	r3, [r7, #7]
 801734a:	2b05      	cmp	r3, #5
 801734c:	d80e      	bhi.n	801736c <RadioSetModem+0x3c>
 801734e:	a201      	add	r2, pc, #4	@ (adr r2, 8017354 <RadioSetModem+0x24>)
 8017350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017354:	0801737b 	.word	0x0801737b
 8017358:	08017389 	.word	0x08017389
 801735c:	0801736d 	.word	0x0801736d
 8017360:	080173af 	.word	0x080173af
 8017364:	080173bd 	.word	0x080173bd
 8017368:	080173cb 	.word	0x080173cb
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 801736c:	2003      	movs	r0, #3
 801736e:	f002 fb15 	bl	801999c <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8017372:	4b1c      	ldr	r3, [pc, #112]	@ (80173e4 <RadioSetModem+0xb4>)
 8017374:	2200      	movs	r2, #0
 8017376:	735a      	strb	r2, [r3, #13]
        break;
 8017378:	e02f      	b.n	80173da <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 801737a:	2000      	movs	r0, #0
 801737c:	f002 fb0e 	bl	801999c <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8017380:	4b18      	ldr	r3, [pc, #96]	@ (80173e4 <RadioSetModem+0xb4>)
 8017382:	2200      	movs	r2, #0
 8017384:	735a      	strb	r2, [r3, #13]
        break;
 8017386:	e028      	b.n	80173da <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8017388:	2001      	movs	r0, #1
 801738a:	f002 fb07 	bl	801999c <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 801738e:	4b15      	ldr	r3, [pc, #84]	@ (80173e4 <RadioSetModem+0xb4>)
 8017390:	7b5a      	ldrb	r2, [r3, #13]
 8017392:	4b14      	ldr	r3, [pc, #80]	@ (80173e4 <RadioSetModem+0xb4>)
 8017394:	7b1b      	ldrb	r3, [r3, #12]
 8017396:	429a      	cmp	r2, r3
 8017398:	d01e      	beq.n	80173d8 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 801739a:	4b12      	ldr	r3, [pc, #72]	@ (80173e4 <RadioSetModem+0xb4>)
 801739c:	7b1a      	ldrb	r2, [r3, #12]
 801739e:	4b11      	ldr	r3, [pc, #68]	@ (80173e4 <RadioSetModem+0xb4>)
 80173a0:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 80173a2:	4b10      	ldr	r3, [pc, #64]	@ (80173e4 <RadioSetModem+0xb4>)
 80173a4:	7b5b      	ldrb	r3, [r3, #13]
 80173a6:	4618      	mov	r0, r3
 80173a8:	f000 ff84 	bl	80182b4 <RadioSetPublicNetwork>
        }
        break;
 80173ac:	e014      	b.n	80173d8 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 80173ae:	2002      	movs	r0, #2
 80173b0:	f002 faf4 	bl	801999c <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80173b4:	4b0b      	ldr	r3, [pc, #44]	@ (80173e4 <RadioSetModem+0xb4>)
 80173b6:	2200      	movs	r2, #0
 80173b8:	735a      	strb	r2, [r3, #13]
        break;
 80173ba:	e00e      	b.n	80173da <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 80173bc:	2002      	movs	r0, #2
 80173be:	f002 faed 	bl	801999c <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80173c2:	4b08      	ldr	r3, [pc, #32]	@ (80173e4 <RadioSetModem+0xb4>)
 80173c4:	2200      	movs	r2, #0
 80173c6:	735a      	strb	r2, [r3, #13]
        break;
 80173c8:	e007      	b.n	80173da <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 80173ca:	2000      	movs	r0, #0
 80173cc:	f002 fae6 	bl	801999c <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80173d0:	4b04      	ldr	r3, [pc, #16]	@ (80173e4 <RadioSetModem+0xb4>)
 80173d2:	2200      	movs	r2, #0
 80173d4:	735a      	strb	r2, [r3, #13]
        break;
 80173d6:	e000      	b.n	80173da <RadioSetModem+0xaa>
        break;
 80173d8:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 80173da:	bf00      	nop
 80173dc:	3708      	adds	r7, #8
 80173de:	46bd      	mov	sp, r7
 80173e0:	bd80      	pop	{r7, pc}
 80173e2:	bf00      	nop
 80173e4:	20001cf4 	.word	0x20001cf4

080173e8 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 80173e8:	b580      	push	{r7, lr}
 80173ea:	b082      	sub	sp, #8
 80173ec:	af00      	add	r7, sp, #0
 80173ee:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 80173f0:	6878      	ldr	r0, [r7, #4]
 80173f2:	f002 fa8d 	bl	8019910 <SUBGRF_SetRfFrequency>
}
 80173f6:	bf00      	nop
 80173f8:	3708      	adds	r7, #8
 80173fa:	46bd      	mov	sp, r7
 80173fc:	bd80      	pop	{r7, pc}

080173fe <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 80173fe:	b580      	push	{r7, lr}
 8017400:	b090      	sub	sp, #64	@ 0x40
 8017402:	af0a      	add	r7, sp, #40	@ 0x28
 8017404:	60f8      	str	r0, [r7, #12]
 8017406:	60b9      	str	r1, [r7, #8]
 8017408:	603b      	str	r3, [r7, #0]
 801740a:	4613      	mov	r3, r2
 801740c:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 801740e:	2301      	movs	r3, #1
 8017410:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 8017412:	2300      	movs	r3, #0
 8017414:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 8017416:	2300      	movs	r3, #0
 8017418:	613b      	str	r3, [r7, #16]

    RadioStandby( );  /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 801741a:	f000 fddc 	bl	8017fd6 <RadioStandby>

    RadioSetModem( MODEM_FSK );
 801741e:	2000      	movs	r0, #0
 8017420:	f7ff ff86 	bl	8017330 <RadioSetModem>

    RadioSetChannel( freq );
 8017424:	68f8      	ldr	r0, [r7, #12]
 8017426:	f7ff ffdf 	bl	80173e8 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 801742a:	2301      	movs	r3, #1
 801742c:	9309      	str	r3, [sp, #36]	@ 0x24
 801742e:	2300      	movs	r3, #0
 8017430:	9308      	str	r3, [sp, #32]
 8017432:	2300      	movs	r3, #0
 8017434:	9307      	str	r3, [sp, #28]
 8017436:	2300      	movs	r3, #0
 8017438:	9306      	str	r3, [sp, #24]
 801743a:	2300      	movs	r3, #0
 801743c:	9305      	str	r3, [sp, #20]
 801743e:	2300      	movs	r3, #0
 8017440:	9304      	str	r3, [sp, #16]
 8017442:	2300      	movs	r3, #0
 8017444:	9303      	str	r3, [sp, #12]
 8017446:	2300      	movs	r3, #0
 8017448:	9302      	str	r3, [sp, #8]
 801744a:	2303      	movs	r3, #3
 801744c:	9301      	str	r3, [sp, #4]
 801744e:	68bb      	ldr	r3, [r7, #8]
 8017450:	9300      	str	r3, [sp, #0]
 8017452:	2300      	movs	r3, #0
 8017454:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8017458:	68b9      	ldr	r1, [r7, #8]
 801745a:	2000      	movs	r0, #0
 801745c:	f000 f83c 	bl	80174d8 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8017460:	2000      	movs	r0, #0
 8017462:	f000 fdbf 	bl	8017fe4 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8017466:	f000 ff53 	bl	8018310 <RadioGetWakeupTime>
 801746a:	4603      	mov	r3, r0
 801746c:	4618      	mov	r0, r3
 801746e:	f7ea febd 	bl	80021ec <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 8017472:	f004 f8bf 	bl	801b5f4 <UTIL_TIMER_GetCurrentTime>
 8017476:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8017478:	e00d      	b.n	8017496 <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 801747a:	2000      	movs	r0, #0
 801747c:	f000 fe9a 	bl	80181b4 <RadioRssi>
 8017480:	4603      	mov	r3, r0
 8017482:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8017484:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8017488:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801748c:	429a      	cmp	r2, r3
 801748e:	dd02      	ble.n	8017496 <RadioIsChannelFree+0x98>
        {
            status = false;
 8017490:	2300      	movs	r3, #0
 8017492:	75fb      	strb	r3, [r7, #23]
            break;
 8017494:	e006      	b.n	80174a4 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8017496:	6938      	ldr	r0, [r7, #16]
 8017498:	f004 f8be 	bl	801b618 <UTIL_TIMER_GetElapsedTime>
 801749c:	4602      	mov	r2, r0
 801749e:	683b      	ldr	r3, [r7, #0]
 80174a0:	4293      	cmp	r3, r2
 80174a2:	d8ea      	bhi.n	801747a <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( ); /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 80174a4:	f000 fd97 	bl	8017fd6 <RadioStandby>

    return status;
 80174a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80174aa:	4618      	mov	r0, r3
 80174ac:	3718      	adds	r7, #24
 80174ae:	46bd      	mov	sp, r7
 80174b0:	bd80      	pop	{r7, pc}

080174b2 <RadioRandom>:

static uint32_t RadioRandom( void )
{
 80174b2:	b580      	push	{r7, lr}
 80174b4:	b082      	sub	sp, #8
 80174b6:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 80174b8:	2300      	movs	r3, #0
 80174ba:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80174bc:	2300      	movs	r3, #0
 80174be:	2200      	movs	r2, #0
 80174c0:	2100      	movs	r1, #0
 80174c2:	2000      	movs	r0, #0
 80174c4:	f002 f9c8 	bl	8019858 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 80174c8:	f001 ff75 	bl	80193b6 <SUBGRF_GetRandom>
 80174cc:	6078      	str	r0, [r7, #4]

    return rnd;
 80174ce:	687b      	ldr	r3, [r7, #4]
}
 80174d0:	4618      	mov	r0, r3
 80174d2:	3708      	adds	r7, #8
 80174d4:	46bd      	mov	sp, r7
 80174d6:	bd80      	pop	{r7, pc}

080174d8 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 80174d8:	b580      	push	{r7, lr}
 80174da:	b08a      	sub	sp, #40	@ 0x28
 80174dc:	af00      	add	r7, sp, #0
 80174de:	60b9      	str	r1, [r7, #8]
 80174e0:	607a      	str	r2, [r7, #4]
 80174e2:	461a      	mov	r2, r3
 80174e4:	4603      	mov	r3, r0
 80174e6:	73fb      	strb	r3, [r7, #15]
 80174e8:	4613      	mov	r3, r2
 80174ea:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 80174ec:	4ab9      	ldr	r2, [pc, #740]	@ (80177d4 <RadioSetRxConfig+0x2fc>)
 80174ee:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 80174f2:	7053      	strb	r3, [r2, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 80174f4:	f003 f831 	bl	801a55a <RFW_DeInit>
    if( rxContinuous == true )
 80174f8:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 80174fc:	2b00      	cmp	r3, #0
 80174fe:	d001      	beq.n	8017504 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8017500:	2300      	movs	r3, #0
 8017502:	873b      	strh	r3, [r7, #56]	@ 0x38
    }
    if( fixLen == true )
 8017504:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8017508:	2b00      	cmp	r3, #0
 801750a:	d004      	beq.n	8017516 <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 801750c:	4ab2      	ldr	r2, [pc, #712]	@ (80177d8 <RadioSetRxConfig+0x300>)
 801750e:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8017512:	7013      	strb	r3, [r2, #0]
 8017514:	e002      	b.n	801751c <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 8017516:	4bb0      	ldr	r3, [pc, #704]	@ (80177d8 <RadioSetRxConfig+0x300>)
 8017518:	22ff      	movs	r2, #255	@ 0xff
 801751a:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 801751c:	7bfb      	ldrb	r3, [r7, #15]
 801751e:	2b05      	cmp	r3, #5
 8017520:	d009      	beq.n	8017536 <RadioSetRxConfig+0x5e>
 8017522:	2b05      	cmp	r3, #5
 8017524:	f300 81ca 	bgt.w	80178bc <RadioSetRxConfig+0x3e4>
 8017528:	2b00      	cmp	r3, #0
 801752a:	f000 80bf 	beq.w	80176ac <RadioSetRxConfig+0x1d4>
 801752e:	2b01      	cmp	r3, #1
 8017530:	f000 8124 	beq.w	801777c <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8017534:	e1c2      	b.n	80178bc <RadioSetRxConfig+0x3e4>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 8017536:	2001      	movs	r0, #1
 8017538:	f002 f884 	bl	8019644 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801753c:	4ba5      	ldr	r3, [pc, #660]	@ (80177d4 <RadioSetRxConfig+0x2fc>)
 801753e:	2200      	movs	r2, #0
 8017540:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8017544:	4aa3      	ldr	r2, [pc, #652]	@ (80177d4 <RadioSetRxConfig+0x2fc>)
 8017546:	687b      	ldr	r3, [r7, #4]
 8017548:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 801754a:	4ba2      	ldr	r3, [pc, #648]	@ (80177d4 <RadioSetRxConfig+0x2fc>)
 801754c:	2209      	movs	r2, #9
 801754e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 8017552:	4ba0      	ldr	r3, [pc, #640]	@ (80177d4 <RadioSetRxConfig+0x2fc>)
 8017554:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8017558:	641a      	str	r2, [r3, #64]	@ 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801755a:	68b8      	ldr	r0, [r7, #8]
 801755c:	f002 ff30 	bl	801a3c0 <SUBGRF_GetFskBandwidthRegValue>
 8017560:	4603      	mov	r3, r0
 8017562:	461a      	mov	r2, r3
 8017564:	4b9b      	ldr	r3, [pc, #620]	@ (80177d4 <RadioSetRxConfig+0x2fc>)
 8017566:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801756a:	4b9a      	ldr	r3, [pc, #616]	@ (80177d4 <RadioSetRxConfig+0x2fc>)
 801756c:	2200      	movs	r2, #0
 801756e:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8017570:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8017572:	00db      	lsls	r3, r3, #3
 8017574:	b29a      	uxth	r2, r3
 8017576:	4b97      	ldr	r3, [pc, #604]	@ (80177d4 <RadioSetRxConfig+0x2fc>)
 8017578:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 801757a:	4b96      	ldr	r3, [pc, #600]	@ (80177d4 <RadioSetRxConfig+0x2fc>)
 801757c:	2200      	movs	r2, #0
 801757e:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8017580:	4b94      	ldr	r3, [pc, #592]	@ (80177d4 <RadioSetRxConfig+0x2fc>)
 8017582:	2210      	movs	r2, #16
 8017584:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8017586:	4b93      	ldr	r3, [pc, #588]	@ (80177d4 <RadioSetRxConfig+0x2fc>)
 8017588:	2200      	movs	r2, #0
 801758a:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 801758c:	4b91      	ldr	r3, [pc, #580]	@ (80177d4 <RadioSetRxConfig+0x2fc>)
 801758e:	2200      	movs	r2, #0
 8017590:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8017592:	4b91      	ldr	r3, [pc, #580]	@ (80177d8 <RadioSetRxConfig+0x300>)
 8017594:	781a      	ldrb	r2, [r3, #0]
 8017596:	4b8f      	ldr	r3, [pc, #572]	@ (80177d4 <RadioSetRxConfig+0x2fc>)
 8017598:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801759a:	4b8e      	ldr	r3, [pc, #568]	@ (80177d4 <RadioSetRxConfig+0x2fc>)
 801759c:	2201      	movs	r2, #1
 801759e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 80175a0:	4b8c      	ldr	r3, [pc, #560]	@ (80177d4 <RadioSetRxConfig+0x2fc>)
 80175a2:	2200      	movs	r2, #0
 80175a4:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 80175a6:	2005      	movs	r0, #5
 80175a8:	f7ff fec2 	bl	8017330 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80175ac:	488b      	ldr	r0, [pc, #556]	@ (80177dc <RadioSetRxConfig+0x304>)
 80175ae:	f002 fae9 	bl	8019b84 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80175b2:	488b      	ldr	r0, [pc, #556]	@ (80177e0 <RadioSetRxConfig+0x308>)
 80175b4:	f002 fbb4 	bl	8019d20 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80175b8:	4a8a      	ldr	r2, [pc, #552]	@ (80177e4 <RadioSetRxConfig+0x30c>)
 80175ba:	f107 031c 	add.w	r3, r7, #28
 80175be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80175c2:	e883 0003 	stmia.w	r3, {r0, r1}
 80175c6:	f107 031c 	add.w	r3, r7, #28
 80175ca:	4618      	mov	r0, r3
 80175cc:	f001 fe71 	bl	80192b2 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80175d0:	f240 10ff 	movw	r0, #511	@ 0x1ff
 80175d4:	f001 febc 	bl	8019350 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 80175d8:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 80175dc:	f000 fe08 	bl	80181f0 <RadioRead>
 80175e0:	4603      	mov	r3, r0
 80175e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=RADIO_BIT_MASK(4);
 80175e6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80175ea:	f023 0310 	bic.w	r3, r3, #16
 80175ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 80175f2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80175f6:	4619      	mov	r1, r3
 80175f8:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 80175fc:	f000 fde6 	bl	80181cc <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 8017600:	2104      	movs	r1, #4
 8017602:	f640 00b9 	movw	r0, #2233	@ 0x8b9
 8017606:	f000 fde1 	bl	80181cc <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 801760a:	f640 009b 	movw	r0, #2203	@ 0x89b
 801760e:	f000 fdef 	bl	80181f0 <RadioRead>
 8017612:	4603      	mov	r3, r0
 8017614:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8017618:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801761c:	f023 031c 	bic.w	r3, r3, #28
 8017620:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 8017624:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017628:	f043 0308 	orr.w	r3, r3, #8
 801762c:	b2db      	uxtb	r3, r3
 801762e:	4619      	mov	r1, r3
 8017630:	f640 009b 	movw	r0, #2203	@ 0x89b
 8017634:	f000 fdca 	bl	80181cc <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 8017638:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 801763c:	f000 fdd8 	bl	80181f0 <RadioRead>
 8017640:	4603      	mov	r3, r0
 8017642:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8017646:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801764a:	f023 0318 	bic.w	r3, r3, #24
 801764e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 8017652:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017656:	f043 0318 	orr.w	r3, r3, #24
 801765a:	b2db      	uxtb	r3, r3
 801765c:	4619      	mov	r1, r3
 801765e:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 8017662:	f000 fdb3 	bl	80181cc <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 8017666:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 801766a:	f000 fdc1 	bl	80181f0 <RadioRead>
 801766e:	4603      	mov	r3, r0
 8017670:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8017674:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017678:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801767c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 8017680:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017684:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 8017688:	b2db      	uxtb	r3, r3
 801768a:	4619      	mov	r1, r3
 801768c:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8017690:	f000 fd9c 	bl	80181cc <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8017694:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8017696:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 801769a:	fb02 f303 	mul.w	r3, r2, r3
 801769e:	461a      	mov	r2, r3
 80176a0:	687b      	ldr	r3, [r7, #4]
 80176a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80176a6:	4a4b      	ldr	r2, [pc, #300]	@ (80177d4 <RadioSetRxConfig+0x2fc>)
 80176a8:	6093      	str	r3, [r2, #8]
            break;
 80176aa:	e108      	b.n	80178be <RadioSetRxConfig+0x3e6>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 80176ac:	2000      	movs	r0, #0
 80176ae:	f001 ffc9 	bl	8019644 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80176b2:	4b48      	ldr	r3, [pc, #288]	@ (80177d4 <RadioSetRxConfig+0x2fc>)
 80176b4:	2200      	movs	r2, #0
 80176b6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80176ba:	4a46      	ldr	r2, [pc, #280]	@ (80177d4 <RadioSetRxConfig+0x2fc>)
 80176bc:	687b      	ldr	r3, [r7, #4]
 80176be:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80176c0:	4b44      	ldr	r3, [pc, #272]	@ (80177d4 <RadioSetRxConfig+0x2fc>)
 80176c2:	220b      	movs	r2, #11
 80176c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80176c8:	68b8      	ldr	r0, [r7, #8]
 80176ca:	f002 fe79 	bl	801a3c0 <SUBGRF_GetFskBandwidthRegValue>
 80176ce:	4603      	mov	r3, r0
 80176d0:	461a      	mov	r2, r3
 80176d2:	4b40      	ldr	r3, [pc, #256]	@ (80177d4 <RadioSetRxConfig+0x2fc>)
 80176d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80176d8:	4b3e      	ldr	r3, [pc, #248]	@ (80177d4 <RadioSetRxConfig+0x2fc>)
 80176da:	2200      	movs	r2, #0
 80176dc:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80176de:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80176e0:	00db      	lsls	r3, r3, #3
 80176e2:	b29a      	uxth	r2, r3
 80176e4:	4b3b      	ldr	r3, [pc, #236]	@ (80177d4 <RadioSetRxConfig+0x2fc>)
 80176e6:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80176e8:	4b3a      	ldr	r3, [pc, #232]	@ (80177d4 <RadioSetRxConfig+0x2fc>)
 80176ea:	2204      	movs	r2, #4
 80176ec:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 80176ee:	4b39      	ldr	r3, [pc, #228]	@ (80177d4 <RadioSetRxConfig+0x2fc>)
 80176f0:	2218      	movs	r2, #24
 80176f2:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80176f4:	4b37      	ldr	r3, [pc, #220]	@ (80177d4 <RadioSetRxConfig+0x2fc>)
 80176f6:	2200      	movs	r2, #0
 80176f8:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80176fa:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80176fe:	f083 0301 	eor.w	r3, r3, #1
 8017702:	b2db      	uxtb	r3, r3
 8017704:	461a      	mov	r2, r3
 8017706:	4b33      	ldr	r3, [pc, #204]	@ (80177d4 <RadioSetRxConfig+0x2fc>)
 8017708:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 801770a:	4b33      	ldr	r3, [pc, #204]	@ (80177d8 <RadioSetRxConfig+0x300>)
 801770c:	781a      	ldrb	r2, [r3, #0]
 801770e:	4b31      	ldr	r3, [pc, #196]	@ (80177d4 <RadioSetRxConfig+0x2fc>)
 8017710:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 8017712:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8017716:	2b00      	cmp	r3, #0
 8017718:	d003      	beq.n	8017722 <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 801771a:	4b2e      	ldr	r3, [pc, #184]	@ (80177d4 <RadioSetRxConfig+0x2fc>)
 801771c:	22f2      	movs	r2, #242	@ 0xf2
 801771e:	75da      	strb	r2, [r3, #23]
 8017720:	e002      	b.n	8017728 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8017722:	4b2c      	ldr	r3, [pc, #176]	@ (80177d4 <RadioSetRxConfig+0x2fc>)
 8017724:	2201      	movs	r2, #1
 8017726:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8017728:	4b2a      	ldr	r3, [pc, #168]	@ (80177d4 <RadioSetRxConfig+0x2fc>)
 801772a:	2201      	movs	r2, #1
 801772c:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 801772e:	f000 fc52 	bl	8017fd6 <RadioStandby>
            RadioSetModem( MODEM_FSK );
 8017732:	2000      	movs	r0, #0
 8017734:	f7ff fdfc 	bl	8017330 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8017738:	4828      	ldr	r0, [pc, #160]	@ (80177dc <RadioSetRxConfig+0x304>)
 801773a:	f002 fa23 	bl	8019b84 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801773e:	4828      	ldr	r0, [pc, #160]	@ (80177e0 <RadioSetRxConfig+0x308>)
 8017740:	f002 faee 	bl	8019d20 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8017744:	4a28      	ldr	r2, [pc, #160]	@ (80177e8 <RadioSetRxConfig+0x310>)
 8017746:	f107 0314 	add.w	r3, r7, #20
 801774a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801774e:	e883 0003 	stmia.w	r3, {r0, r1}
 8017752:	f107 0314 	add.w	r3, r7, #20
 8017756:	4618      	mov	r0, r3
 8017758:	f001 fdab 	bl	80192b2 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801775c:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8017760:	f001 fdf6 	bl	8019350 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8017764:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8017766:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 801776a:	fb02 f303 	mul.w	r3, r2, r3
 801776e:	461a      	mov	r2, r3
 8017770:	687b      	ldr	r3, [r7, #4]
 8017772:	fbb2 f3f3 	udiv	r3, r2, r3
 8017776:	4a17      	ldr	r2, [pc, #92]	@ (80177d4 <RadioSetRxConfig+0x2fc>)
 8017778:	6093      	str	r3, [r2, #8]
            break;
 801777a:	e0a0      	b.n	80178be <RadioSetRxConfig+0x3e6>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 801777c:	2000      	movs	r0, #0
 801777e:	f001 ff61 	bl	8019644 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8017782:	4b14      	ldr	r3, [pc, #80]	@ (80177d4 <RadioSetRxConfig+0x2fc>)
 8017784:	2201      	movs	r2, #1
 8017786:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 801778a:	687b      	ldr	r3, [r7, #4]
 801778c:	b2da      	uxtb	r2, r3
 801778e:	4b11      	ldr	r3, [pc, #68]	@ (80177d4 <RadioSetRxConfig+0x2fc>)
 8017790:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8017794:	4a15      	ldr	r2, [pc, #84]	@ (80177ec <RadioSetRxConfig+0x314>)
 8017796:	68bb      	ldr	r3, [r7, #8]
 8017798:	4413      	add	r3, r2
 801779a:	781a      	ldrb	r2, [r3, #0]
 801779c:	4b0d      	ldr	r3, [pc, #52]	@ (80177d4 <RadioSetRxConfig+0x2fc>)
 801779e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 80177a2:	4a0c      	ldr	r2, [pc, #48]	@ (80177d4 <RadioSetRxConfig+0x2fc>)
 80177a4:	7bbb      	ldrb	r3, [r7, #14]
 80177a6:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80177aa:	68bb      	ldr	r3, [r7, #8]
 80177ac:	2b00      	cmp	r3, #0
 80177ae:	d105      	bne.n	80177bc <RadioSetRxConfig+0x2e4>
 80177b0:	687b      	ldr	r3, [r7, #4]
 80177b2:	2b0b      	cmp	r3, #11
 80177b4:	d008      	beq.n	80177c8 <RadioSetRxConfig+0x2f0>
 80177b6:	687b      	ldr	r3, [r7, #4]
 80177b8:	2b0c      	cmp	r3, #12
 80177ba:	d005      	beq.n	80177c8 <RadioSetRxConfig+0x2f0>
 80177bc:	68bb      	ldr	r3, [r7, #8]
 80177be:	2b01      	cmp	r3, #1
 80177c0:	d116      	bne.n	80177f0 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80177c2:	687b      	ldr	r3, [r7, #4]
 80177c4:	2b0c      	cmp	r3, #12
 80177c6:	d113      	bne.n	80177f0 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 80177c8:	4b02      	ldr	r3, [pc, #8]	@ (80177d4 <RadioSetRxConfig+0x2fc>)
 80177ca:	2201      	movs	r2, #1
 80177cc:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 80177d0:	e012      	b.n	80177f8 <RadioSetRxConfig+0x320>
 80177d2:	bf00      	nop
 80177d4:	20001cf4 	.word	0x20001cf4
 80177d8:	2000012c 	.word	0x2000012c
 80177dc:	20001d2c 	.word	0x20001d2c
 80177e0:	20001d02 	.word	0x20001d02
 80177e4:	0801f0b8 	.word	0x0801f0b8
 80177e8:	0801f0c0 	.word	0x0801f0c0
 80177ec:	0801f710 	.word	0x0801f710
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80177f0:	4b35      	ldr	r3, [pc, #212]	@ (80178c8 <RadioSetRxConfig+0x3f0>)
 80177f2:	2200      	movs	r2, #0
 80177f4:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80177f8:	4b33      	ldr	r3, [pc, #204]	@ (80178c8 <RadioSetRxConfig+0x3f0>)
 80177fa:	2201      	movs	r2, #1
 80177fc:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80177fe:	4b32      	ldr	r3, [pc, #200]	@ (80178c8 <RadioSetRxConfig+0x3f0>)
 8017800:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8017804:	2b05      	cmp	r3, #5
 8017806:	d004      	beq.n	8017812 <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8017808:	4b2f      	ldr	r3, [pc, #188]	@ (80178c8 <RadioSetRxConfig+0x3f0>)
 801780a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801780e:	2b06      	cmp	r3, #6
 8017810:	d10a      	bne.n	8017828 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 8017812:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8017814:	2b0b      	cmp	r3, #11
 8017816:	d803      	bhi.n	8017820 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8017818:	4b2b      	ldr	r3, [pc, #172]	@ (80178c8 <RadioSetRxConfig+0x3f0>)
 801781a:	220c      	movs	r2, #12
 801781c:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 801781e:	e006      	b.n	801782e <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8017820:	4a29      	ldr	r2, [pc, #164]	@ (80178c8 <RadioSetRxConfig+0x3f0>)
 8017822:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8017824:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8017826:	e002      	b.n	801782e <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8017828:	4a27      	ldr	r2, [pc, #156]	@ (80178c8 <RadioSetRxConfig+0x3f0>)
 801782a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801782c:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 801782e:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8017832:	4b25      	ldr	r3, [pc, #148]	@ (80178c8 <RadioSetRxConfig+0x3f0>)
 8017834:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8017836:	4b25      	ldr	r3, [pc, #148]	@ (80178cc <RadioSetRxConfig+0x3f4>)
 8017838:	781a      	ldrb	r2, [r3, #0]
 801783a:	4b23      	ldr	r3, [pc, #140]	@ (80178c8 <RadioSetRxConfig+0x3f0>)
 801783c:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 801783e:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 8017842:	4b21      	ldr	r3, [pc, #132]	@ (80178c8 <RadioSetRxConfig+0x3f0>)
 8017844:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8017848:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 801784c:	4b1e      	ldr	r3, [pc, #120]	@ (80178c8 <RadioSetRxConfig+0x3f0>)
 801784e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 8017852:	f000 fbc0 	bl	8017fd6 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8017856:	2001      	movs	r0, #1
 8017858:	f7ff fd6a 	bl	8017330 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801785c:	481c      	ldr	r0, [pc, #112]	@ (80178d0 <RadioSetRxConfig+0x3f8>)
 801785e:	f002 f991 	bl	8019b84 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017862:	481c      	ldr	r0, [pc, #112]	@ (80178d4 <RadioSetRxConfig+0x3fc>)
 8017864:	f002 fa5c 	bl	8019d20 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8017868:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 801786a:	b2db      	uxtb	r3, r3
 801786c:	4618      	mov	r0, r3
 801786e:	f001 fef8 	bl	8019662 <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8017872:	4b15      	ldr	r3, [pc, #84]	@ (80178c8 <RadioSetRxConfig+0x3f0>)
 8017874:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8017878:	2b01      	cmp	r3, #1
 801787a:	d10d      	bne.n	8017898 <RadioSetRxConfig+0x3c0>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 801787c:	f240 7036 	movw	r0, #1846	@ 0x736
 8017880:	f002 fba8 	bl	8019fd4 <SUBGRF_ReadRegister>
 8017884:	4603      	mov	r3, r0
 8017886:	f023 0304 	bic.w	r3, r3, #4
 801788a:	b2db      	uxtb	r3, r3
 801788c:	4619      	mov	r1, r3
 801788e:	f240 7036 	movw	r0, #1846	@ 0x736
 8017892:	f002 fb8b 	bl	8019fac <SUBGRF_WriteRegister>
 8017896:	e00c      	b.n	80178b2 <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8017898:	f240 7036 	movw	r0, #1846	@ 0x736
 801789c:	f002 fb9a 	bl	8019fd4 <SUBGRF_ReadRegister>
 80178a0:	4603      	mov	r3, r0
 80178a2:	f043 0304 	orr.w	r3, r3, #4
 80178a6:	b2db      	uxtb	r3, r3
 80178a8:	4619      	mov	r1, r3
 80178aa:	f240 7036 	movw	r0, #1846	@ 0x736
 80178ae:	f002 fb7d 	bl	8019fac <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 80178b2:	4b05      	ldr	r3, [pc, #20]	@ (80178c8 <RadioSetRxConfig+0x3f0>)
 80178b4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80178b8:	609a      	str	r2, [r3, #8]
            break;
 80178ba:	e000      	b.n	80178be <RadioSetRxConfig+0x3e6>
            break;
 80178bc:	bf00      	nop
    }
}
 80178be:	bf00      	nop
 80178c0:	3728      	adds	r7, #40	@ 0x28
 80178c2:	46bd      	mov	sp, r7
 80178c4:	bd80      	pop	{r7, pc}
 80178c6:	bf00      	nop
 80178c8:	20001cf4 	.word	0x20001cf4
 80178cc:	2000012c 	.word	0x2000012c
 80178d0:	20001d2c 	.word	0x20001d2c
 80178d4:	20001d02 	.word	0x20001d02

080178d8 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 80178d8:	b580      	push	{r7, lr}
 80178da:	b086      	sub	sp, #24
 80178dc:	af00      	add	r7, sp, #0
 80178de:	60ba      	str	r2, [r7, #8]
 80178e0:	607b      	str	r3, [r7, #4]
 80178e2:	4603      	mov	r3, r0
 80178e4:	73fb      	strb	r3, [r7, #15]
 80178e6:	460b      	mov	r3, r1
 80178e8:	73bb      	strb	r3, [r7, #14]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 80178ea:	f002 fe36 	bl	801a55a <RFW_DeInit>
    switch( modem )
 80178ee:	7bfb      	ldrb	r3, [r7, #15]
 80178f0:	2b04      	cmp	r3, #4
 80178f2:	f000 80c7 	beq.w	8017a84 <RadioSetTxConfig+0x1ac>
 80178f6:	2b04      	cmp	r3, #4
 80178f8:	f300 80d6 	bgt.w	8017aa8 <RadioSetTxConfig+0x1d0>
 80178fc:	2b00      	cmp	r3, #0
 80178fe:	d002      	beq.n	8017906 <RadioSetTxConfig+0x2e>
 8017900:	2b01      	cmp	r3, #1
 8017902:	d059      	beq.n	80179b8 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8017904:	e0d0      	b.n	8017aa8 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8017906:	4b74      	ldr	r3, [pc, #464]	@ (8017ad8 <RadioSetTxConfig+0x200>)
 8017908:	2200      	movs	r2, #0
 801790a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801790e:	4a72      	ldr	r2, [pc, #456]	@ (8017ad8 <RadioSetTxConfig+0x200>)
 8017910:	6a3b      	ldr	r3, [r7, #32]
 8017912:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8017914:	4b70      	ldr	r3, [pc, #448]	@ (8017ad8 <RadioSetTxConfig+0x200>)
 8017916:	220b      	movs	r2, #11
 8017918:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801791c:	6878      	ldr	r0, [r7, #4]
 801791e:	f002 fd4f 	bl	801a3c0 <SUBGRF_GetFskBandwidthRegValue>
 8017922:	4603      	mov	r3, r0
 8017924:	461a      	mov	r2, r3
 8017926:	4b6c      	ldr	r3, [pc, #432]	@ (8017ad8 <RadioSetTxConfig+0x200>)
 8017928:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 801792c:	4a6a      	ldr	r2, [pc, #424]	@ (8017ad8 <RadioSetTxConfig+0x200>)
 801792e:	68bb      	ldr	r3, [r7, #8]
 8017930:	6413      	str	r3, [r2, #64]	@ 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8017932:	4b69      	ldr	r3, [pc, #420]	@ (8017ad8 <RadioSetTxConfig+0x200>)
 8017934:	2200      	movs	r2, #0
 8017936:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8017938:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801793a:	00db      	lsls	r3, r3, #3
 801793c:	b29a      	uxth	r2, r3
 801793e:	4b66      	ldr	r3, [pc, #408]	@ (8017ad8 <RadioSetTxConfig+0x200>)
 8017940:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8017942:	4b65      	ldr	r3, [pc, #404]	@ (8017ad8 <RadioSetTxConfig+0x200>)
 8017944:	2204      	movs	r2, #4
 8017946:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8017948:	4b63      	ldr	r3, [pc, #396]	@ (8017ad8 <RadioSetTxConfig+0x200>)
 801794a:	2218      	movs	r2, #24
 801794c:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801794e:	4b62      	ldr	r3, [pc, #392]	@ (8017ad8 <RadioSetTxConfig+0x200>)
 8017950:	2200      	movs	r2, #0
 8017952:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8017954:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8017958:	f083 0301 	eor.w	r3, r3, #1
 801795c:	b2db      	uxtb	r3, r3
 801795e:	461a      	mov	r2, r3
 8017960:	4b5d      	ldr	r3, [pc, #372]	@ (8017ad8 <RadioSetTxConfig+0x200>)
 8017962:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 8017964:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8017968:	2b00      	cmp	r3, #0
 801796a:	d003      	beq.n	8017974 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 801796c:	4b5a      	ldr	r3, [pc, #360]	@ (8017ad8 <RadioSetTxConfig+0x200>)
 801796e:	22f2      	movs	r2, #242	@ 0xf2
 8017970:	75da      	strb	r2, [r3, #23]
 8017972:	e002      	b.n	801797a <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8017974:	4b58      	ldr	r3, [pc, #352]	@ (8017ad8 <RadioSetTxConfig+0x200>)
 8017976:	2201      	movs	r2, #1
 8017978:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 801797a:	4b57      	ldr	r3, [pc, #348]	@ (8017ad8 <RadioSetTxConfig+0x200>)
 801797c:	2201      	movs	r2, #1
 801797e:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8017980:	f000 fb29 	bl	8017fd6 <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 8017984:	2000      	movs	r0, #0
 8017986:	f7ff fcd3 	bl	8017330 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801798a:	4854      	ldr	r0, [pc, #336]	@ (8017adc <RadioSetTxConfig+0x204>)
 801798c:	f002 f8fa 	bl	8019b84 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017990:	4853      	ldr	r0, [pc, #332]	@ (8017ae0 <RadioSetTxConfig+0x208>)
 8017992:	f002 f9c5 	bl	8019d20 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8017996:	4a53      	ldr	r2, [pc, #332]	@ (8017ae4 <RadioSetTxConfig+0x20c>)
 8017998:	f107 0310 	add.w	r3, r7, #16
 801799c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80179a0:	e883 0003 	stmia.w	r3, {r0, r1}
 80179a4:	f107 0310 	add.w	r3, r7, #16
 80179a8:	4618      	mov	r0, r3
 80179aa:	f001 fc82 	bl	80192b2 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80179ae:	f240 10ff 	movw	r0, #511	@ 0x1ff
 80179b2:	f001 fccd 	bl	8019350 <SUBGRF_SetWhiteningSeed>
            break;
 80179b6:	e078      	b.n	8017aaa <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80179b8:	4b47      	ldr	r3, [pc, #284]	@ (8017ad8 <RadioSetTxConfig+0x200>)
 80179ba:	2201      	movs	r2, #1
 80179bc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 80179c0:	6a3b      	ldr	r3, [r7, #32]
 80179c2:	b2da      	uxtb	r2, r3
 80179c4:	4b44      	ldr	r3, [pc, #272]	@ (8017ad8 <RadioSetTxConfig+0x200>)
 80179c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 80179ca:	4a47      	ldr	r2, [pc, #284]	@ (8017ae8 <RadioSetTxConfig+0x210>)
 80179cc:	687b      	ldr	r3, [r7, #4]
 80179ce:	4413      	add	r3, r2
 80179d0:	781a      	ldrb	r2, [r3, #0]
 80179d2:	4b41      	ldr	r3, [pc, #260]	@ (8017ad8 <RadioSetTxConfig+0x200>)
 80179d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 80179d8:	4a3f      	ldr	r2, [pc, #252]	@ (8017ad8 <RadioSetTxConfig+0x200>)
 80179da:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80179de:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80179e2:	687b      	ldr	r3, [r7, #4]
 80179e4:	2b00      	cmp	r3, #0
 80179e6:	d105      	bne.n	80179f4 <RadioSetTxConfig+0x11c>
 80179e8:	6a3b      	ldr	r3, [r7, #32]
 80179ea:	2b0b      	cmp	r3, #11
 80179ec:	d008      	beq.n	8017a00 <RadioSetTxConfig+0x128>
 80179ee:	6a3b      	ldr	r3, [r7, #32]
 80179f0:	2b0c      	cmp	r3, #12
 80179f2:	d005      	beq.n	8017a00 <RadioSetTxConfig+0x128>
 80179f4:	687b      	ldr	r3, [r7, #4]
 80179f6:	2b01      	cmp	r3, #1
 80179f8:	d107      	bne.n	8017a0a <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80179fa:	6a3b      	ldr	r3, [r7, #32]
 80179fc:	2b0c      	cmp	r3, #12
 80179fe:	d104      	bne.n	8017a0a <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8017a00:	4b35      	ldr	r3, [pc, #212]	@ (8017ad8 <RadioSetTxConfig+0x200>)
 8017a02:	2201      	movs	r2, #1
 8017a04:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8017a08:	e003      	b.n	8017a12 <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8017a0a:	4b33      	ldr	r3, [pc, #204]	@ (8017ad8 <RadioSetTxConfig+0x200>)
 8017a0c:	2200      	movs	r2, #0
 8017a0e:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8017a12:	4b31      	ldr	r3, [pc, #196]	@ (8017ad8 <RadioSetTxConfig+0x200>)
 8017a14:	2201      	movs	r2, #1
 8017a16:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8017a18:	4b2f      	ldr	r3, [pc, #188]	@ (8017ad8 <RadioSetTxConfig+0x200>)
 8017a1a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8017a1e:	2b05      	cmp	r3, #5
 8017a20:	d004      	beq.n	8017a2c <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8017a22:	4b2d      	ldr	r3, [pc, #180]	@ (8017ad8 <RadioSetTxConfig+0x200>)
 8017a24:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8017a28:	2b06      	cmp	r3, #6
 8017a2a:	d10a      	bne.n	8017a42 <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 8017a2c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8017a2e:	2b0b      	cmp	r3, #11
 8017a30:	d803      	bhi.n	8017a3a <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8017a32:	4b29      	ldr	r3, [pc, #164]	@ (8017ad8 <RadioSetTxConfig+0x200>)
 8017a34:	220c      	movs	r2, #12
 8017a36:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8017a38:	e006      	b.n	8017a48 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8017a3a:	4a27      	ldr	r2, [pc, #156]	@ (8017ad8 <RadioSetTxConfig+0x200>)
 8017a3c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8017a3e:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8017a40:	e002      	b.n	8017a48 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8017a42:	4a25      	ldr	r2, [pc, #148]	@ (8017ad8 <RadioSetTxConfig+0x200>)
 8017a44:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8017a46:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8017a48:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8017a4c:	4b22      	ldr	r3, [pc, #136]	@ (8017ad8 <RadioSetTxConfig+0x200>)
 8017a4e:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8017a50:	4b26      	ldr	r3, [pc, #152]	@ (8017aec <RadioSetTxConfig+0x214>)
 8017a52:	781a      	ldrb	r2, [r3, #0]
 8017a54:	4b20      	ldr	r3, [pc, #128]	@ (8017ad8 <RadioSetTxConfig+0x200>)
 8017a56:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8017a58:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8017a5c:	4b1e      	ldr	r3, [pc, #120]	@ (8017ad8 <RadioSetTxConfig+0x200>)
 8017a5e:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8017a62:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8017a66:	4b1c      	ldr	r3, [pc, #112]	@ (8017ad8 <RadioSetTxConfig+0x200>)
 8017a68:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 8017a6c:	f000 fab3 	bl	8017fd6 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8017a70:	2001      	movs	r0, #1
 8017a72:	f7ff fc5d 	bl	8017330 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8017a76:	4819      	ldr	r0, [pc, #100]	@ (8017adc <RadioSetTxConfig+0x204>)
 8017a78:	f002 f884 	bl	8019b84 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017a7c:	4818      	ldr	r0, [pc, #96]	@ (8017ae0 <RadioSetTxConfig+0x208>)
 8017a7e:	f002 f94f 	bl	8019d20 <SUBGRF_SetPacketParams>
            break;
 8017a82:	e012      	b.n	8017aaa <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 8017a84:	2004      	movs	r0, #4
 8017a86:	f7ff fc53 	bl	8017330 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8017a8a:	4b13      	ldr	r3, [pc, #76]	@ (8017ad8 <RadioSetTxConfig+0x200>)
 8017a8c:	2202      	movs	r2, #2
 8017a8e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 8017a92:	4a11      	ldr	r2, [pc, #68]	@ (8017ad8 <RadioSetTxConfig+0x200>)
 8017a94:	6a3b      	ldr	r3, [r7, #32]
 8017a96:	6493      	str	r3, [r2, #72]	@ 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8017a98:	4b0f      	ldr	r3, [pc, #60]	@ (8017ad8 <RadioSetTxConfig+0x200>)
 8017a9a:	2216      	movs	r2, #22
 8017a9c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8017aa0:	480e      	ldr	r0, [pc, #56]	@ (8017adc <RadioSetTxConfig+0x204>)
 8017aa2:	f002 f86f 	bl	8019b84 <SUBGRF_SetModulationParams>
            break;
 8017aa6:	e000      	b.n	8017aaa <RadioSetTxConfig+0x1d2>
            break;
 8017aa8:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8017aaa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017aae:	4618      	mov	r0, r3
 8017ab0:	f002 fb98 	bl	801a1e4 <SUBGRF_SetRfTxPower>
 8017ab4:	4603      	mov	r3, r0
 8017ab6:	461a      	mov	r2, r3
 8017ab8:	4b07      	ldr	r3, [pc, #28]	@ (8017ad8 <RadioSetTxConfig+0x200>)
 8017aba:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 8017abe:	4b06      	ldr	r3, [pc, #24]	@ (8017ad8 <RadioSetTxConfig+0x200>)
 8017ac0:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8017ac4:	4618      	mov	r0, r3
 8017ac6:	f002 fd5c 	bl	801a582 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8017aca:	4a03      	ldr	r2, [pc, #12]	@ (8017ad8 <RadioSetTxConfig+0x200>)
 8017acc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017ace:	6053      	str	r3, [r2, #4]
}
 8017ad0:	bf00      	nop
 8017ad2:	3718      	adds	r7, #24
 8017ad4:	46bd      	mov	sp, r7
 8017ad6:	bd80      	pop	{r7, pc}
 8017ad8:	20001cf4 	.word	0x20001cf4
 8017adc:	20001d2c 	.word	0x20001d2c
 8017ae0:	20001d02 	.word	0x20001d02
 8017ae4:	0801f0c0 	.word	0x0801f0c0
 8017ae8:	0801f710 	.word	0x0801f710
 8017aec:	2000012c 	.word	0x2000012c

08017af0 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8017af0:	b480      	push	{r7}
 8017af2:	b083      	sub	sp, #12
 8017af4:	af00      	add	r7, sp, #0
 8017af6:	6078      	str	r0, [r7, #4]
    return true;
 8017af8:	2301      	movs	r3, #1
}
 8017afa:	4618      	mov	r0, r3
 8017afc:	370c      	adds	r7, #12
 8017afe:	46bd      	mov	sp, r7
 8017b00:	bc80      	pop	{r7}
 8017b02:	4770      	bx	lr

08017b04 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8017b04:	b480      	push	{r7}
 8017b06:	b085      	sub	sp, #20
 8017b08:	af00      	add	r7, sp, #0
 8017b0a:	4603      	mov	r3, r0
 8017b0c:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 8017b0e:	2300      	movs	r3, #0
 8017b10:	60fb      	str	r3, [r7, #12]

    switch( bw )
 8017b12:	79fb      	ldrb	r3, [r7, #7]
 8017b14:	2b0a      	cmp	r3, #10
 8017b16:	d83e      	bhi.n	8017b96 <RadioGetLoRaBandwidthInHz+0x92>
 8017b18:	a201      	add	r2, pc, #4	@ (adr r2, 8017b20 <RadioGetLoRaBandwidthInHz+0x1c>)
 8017b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017b1e:	bf00      	nop
 8017b20:	08017b4d 	.word	0x08017b4d
 8017b24:	08017b5d 	.word	0x08017b5d
 8017b28:	08017b6d 	.word	0x08017b6d
 8017b2c:	08017b7d 	.word	0x08017b7d
 8017b30:	08017b85 	.word	0x08017b85
 8017b34:	08017b8b 	.word	0x08017b8b
 8017b38:	08017b91 	.word	0x08017b91
 8017b3c:	08017b97 	.word	0x08017b97
 8017b40:	08017b55 	.word	0x08017b55
 8017b44:	08017b65 	.word	0x08017b65
 8017b48:	08017b75 	.word	0x08017b75
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8017b4c:	f641 6384 	movw	r3, #7812	@ 0x1e84
 8017b50:	60fb      	str	r3, [r7, #12]
        break;
 8017b52:	e020      	b.n	8017b96 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8017b54:	f642 03b1 	movw	r3, #10417	@ 0x28b1
 8017b58:	60fb      	str	r3, [r7, #12]
        break;
 8017b5a:	e01c      	b.n	8017b96 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8017b5c:	f643 5309 	movw	r3, #15625	@ 0x3d09
 8017b60:	60fb      	str	r3, [r7, #12]
        break;
 8017b62:	e018      	b.n	8017b96 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8017b64:	f245 1361 	movw	r3, #20833	@ 0x5161
 8017b68:	60fb      	str	r3, [r7, #12]
        break;
 8017b6a:	e014      	b.n	8017b96 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8017b6c:	f647 2312 	movw	r3, #31250	@ 0x7a12
 8017b70:	60fb      	str	r3, [r7, #12]
        break;
 8017b72:	e010      	b.n	8017b96 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8017b74:	f24a 23c3 	movw	r3, #41667	@ 0xa2c3
 8017b78:	60fb      	str	r3, [r7, #12]
        break;
 8017b7a:	e00c      	b.n	8017b96 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8017b7c:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8017b80:	60fb      	str	r3, [r7, #12]
        break;
 8017b82:	e008      	b.n	8017b96 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8017b84:	4b07      	ldr	r3, [pc, #28]	@ (8017ba4 <RadioGetLoRaBandwidthInHz+0xa0>)
 8017b86:	60fb      	str	r3, [r7, #12]
        break;
 8017b88:	e005      	b.n	8017b96 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8017b8a:	4b07      	ldr	r3, [pc, #28]	@ (8017ba8 <RadioGetLoRaBandwidthInHz+0xa4>)
 8017b8c:	60fb      	str	r3, [r7, #12]
        break;
 8017b8e:	e002      	b.n	8017b96 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8017b90:	4b06      	ldr	r3, [pc, #24]	@ (8017bac <RadioGetLoRaBandwidthInHz+0xa8>)
 8017b92:	60fb      	str	r3, [r7, #12]
        break;
 8017b94:	bf00      	nop
    }

    return bandwidthInHz;
 8017b96:	68fb      	ldr	r3, [r7, #12]
}
 8017b98:	4618      	mov	r0, r3
 8017b9a:	3714      	adds	r7, #20
 8017b9c:	46bd      	mov	sp, r7
 8017b9e:	bc80      	pop	{r7}
 8017ba0:	4770      	bx	lr
 8017ba2:	bf00      	nop
 8017ba4:	0001e848 	.word	0x0001e848
 8017ba8:	0003d090 	.word	0x0003d090
 8017bac:	0007a120 	.word	0x0007a120

08017bb0 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8017bb0:	b480      	push	{r7}
 8017bb2:	b083      	sub	sp, #12
 8017bb4:	af00      	add	r7, sp, #0
 8017bb6:	6078      	str	r0, [r7, #4]
 8017bb8:	4608      	mov	r0, r1
 8017bba:	4611      	mov	r1, r2
 8017bbc:	461a      	mov	r2, r3
 8017bbe:	4603      	mov	r3, r0
 8017bc0:	70fb      	strb	r3, [r7, #3]
 8017bc2:	460b      	mov	r3, r1
 8017bc4:	803b      	strh	r3, [r7, #0]
 8017bc6:	4613      	mov	r3, r2
 8017bc8:	70bb      	strb	r3, [r7, #2]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 8017bca:	883b      	ldrh	r3, [r7, #0]
 8017bcc:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8017bce:	78ba      	ldrb	r2, [r7, #2]
 8017bd0:	f082 0201 	eor.w	r2, r2, #1
 8017bd4:	b2d2      	uxtb	r2, r2
 8017bd6:	2a00      	cmp	r2, #0
 8017bd8:	d001      	beq.n	8017bde <RadioGetGfskTimeOnAirNumerator+0x2e>
 8017bda:	2208      	movs	r2, #8
 8017bdc:	e000      	b.n	8017be0 <RadioGetGfskTimeOnAirNumerator+0x30>
 8017bde:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8017be0:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8017be2:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8017be6:	7c3b      	ldrb	r3, [r7, #16]
 8017be8:	7d39      	ldrb	r1, [r7, #20]
 8017bea:	2900      	cmp	r1, #0
 8017bec:	d001      	beq.n	8017bf2 <RadioGetGfskTimeOnAirNumerator+0x42>
 8017bee:	2102      	movs	r1, #2
 8017bf0:	e000      	b.n	8017bf4 <RadioGetGfskTimeOnAirNumerator+0x44>
 8017bf2:	2100      	movs	r1, #0
 8017bf4:	440b      	add	r3, r1
 8017bf6:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8017bf8:	4413      	add	r3, r2
    /* ST_WORKAROUND_END */
}
 8017bfa:	4618      	mov	r0, r3
 8017bfc:	370c      	adds	r7, #12
 8017bfe:	46bd      	mov	sp, r7
 8017c00:	bc80      	pop	{r7}
 8017c02:	4770      	bx	lr

08017c04 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8017c04:	b480      	push	{r7}
 8017c06:	b08b      	sub	sp, #44	@ 0x2c
 8017c08:	af00      	add	r7, sp, #0
 8017c0a:	60f8      	str	r0, [r7, #12]
 8017c0c:	60b9      	str	r1, [r7, #8]
 8017c0e:	4611      	mov	r1, r2
 8017c10:	461a      	mov	r2, r3
 8017c12:	460b      	mov	r3, r1
 8017c14:	71fb      	strb	r3, [r7, #7]
 8017c16:	4613      	mov	r3, r2
 8017c18:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8017c1a:	79fb      	ldrb	r3, [r7, #7]
 8017c1c:	3304      	adds	r3, #4
 8017c1e:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8017c20:	2300      	movs	r3, #0
 8017c22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8017c26:	68bb      	ldr	r3, [r7, #8]
 8017c28:	2b05      	cmp	r3, #5
 8017c2a:	d002      	beq.n	8017c32 <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8017c2c:	68bb      	ldr	r3, [r7, #8]
 8017c2e:	2b06      	cmp	r3, #6
 8017c30:	d104      	bne.n	8017c3c <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 8017c32:	88bb      	ldrh	r3, [r7, #4]
 8017c34:	2b0b      	cmp	r3, #11
 8017c36:	d801      	bhi.n	8017c3c <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8017c38:	230c      	movs	r3, #12
 8017c3a:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8017c3c:	68fb      	ldr	r3, [r7, #12]
 8017c3e:	2b00      	cmp	r3, #0
 8017c40:	d105      	bne.n	8017c4e <RadioGetLoRaTimeOnAirNumerator+0x4a>
 8017c42:	68bb      	ldr	r3, [r7, #8]
 8017c44:	2b0b      	cmp	r3, #11
 8017c46:	d008      	beq.n	8017c5a <RadioGetLoRaTimeOnAirNumerator+0x56>
 8017c48:	68bb      	ldr	r3, [r7, #8]
 8017c4a:	2b0c      	cmp	r3, #12
 8017c4c:	d005      	beq.n	8017c5a <RadioGetLoRaTimeOnAirNumerator+0x56>
 8017c4e:	68fb      	ldr	r3, [r7, #12]
 8017c50:	2b01      	cmp	r3, #1
 8017c52:	d105      	bne.n	8017c60 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8017c54:	68bb      	ldr	r3, [r7, #8]
 8017c56:	2b0c      	cmp	r3, #12
 8017c58:	d102      	bne.n	8017c60 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8017c5a:	2301      	movs	r3, #1
 8017c5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8017c60:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8017c64:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 8017c66:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8017c6a:	2a00      	cmp	r2, #0
 8017c6c:	d001      	beq.n	8017c72 <RadioGetLoRaTimeOnAirNumerator+0x6e>
 8017c6e:	2210      	movs	r2, #16
 8017c70:	e000      	b.n	8017c74 <RadioGetLoRaTimeOnAirNumerator+0x70>
 8017c72:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8017c74:	4413      	add	r3, r2
 8017c76:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8017c78:	68bb      	ldr	r3, [r7, #8]
 8017c7a:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8017c7c:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 8017c7e:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8017c82:	2a00      	cmp	r2, #0
 8017c84:	d001      	beq.n	8017c8a <RadioGetLoRaTimeOnAirNumerator+0x86>
 8017c86:	2200      	movs	r2, #0
 8017c88:	e000      	b.n	8017c8c <RadioGetLoRaTimeOnAirNumerator+0x88>
 8017c8a:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8017c8c:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8017c8e:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8017c90:	68bb      	ldr	r3, [r7, #8]
 8017c92:	2b06      	cmp	r3, #6
 8017c94:	d803      	bhi.n	8017c9e <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 8017c96:	68bb      	ldr	r3, [r7, #8]
 8017c98:	009b      	lsls	r3, r3, #2
 8017c9a:	623b      	str	r3, [r7, #32]
 8017c9c:	e00e      	b.n	8017cbc <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 8017c9e:	69fb      	ldr	r3, [r7, #28]
 8017ca0:	3308      	adds	r3, #8
 8017ca2:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8017ca4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017ca8:	2b00      	cmp	r3, #0
 8017caa:	d004      	beq.n	8017cb6 <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8017cac:	68bb      	ldr	r3, [r7, #8]
 8017cae:	3b02      	subs	r3, #2
 8017cb0:	009b      	lsls	r3, r3, #2
 8017cb2:	623b      	str	r3, [r7, #32]
 8017cb4:	e002      	b.n	8017cbc <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 8017cb6:	68bb      	ldr	r3, [r7, #8]
 8017cb8:	009b      	lsls	r3, r3, #2
 8017cba:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8017cbc:	69fb      	ldr	r3, [r7, #28]
 8017cbe:	2b00      	cmp	r3, #0
 8017cc0:	da01      	bge.n	8017cc6 <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 8017cc2:	2300      	movs	r3, #0
 8017cc4:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8017cc6:	69fa      	ldr	r2, [r7, #28]
 8017cc8:	6a3b      	ldr	r3, [r7, #32]
 8017cca:	4413      	add	r3, r2
 8017ccc:	1e5a      	subs	r2, r3, #1
 8017cce:	6a3b      	ldr	r3, [r7, #32]
 8017cd0:	fb92 f3f3 	sdiv	r3, r2, r3
 8017cd4:	697a      	ldr	r2, [r7, #20]
 8017cd6:	fb03 f202 	mul.w	r2, r3, r2
 8017cda:	88bb      	ldrh	r3, [r7, #4]
 8017cdc:	4413      	add	r3, r2
    int32_t intermediate =
 8017cde:	330c      	adds	r3, #12
 8017ce0:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 8017ce2:	68bb      	ldr	r3, [r7, #8]
 8017ce4:	2b06      	cmp	r3, #6
 8017ce6:	d802      	bhi.n	8017cee <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8017ce8:	69bb      	ldr	r3, [r7, #24]
 8017cea:	3302      	adds	r3, #2
 8017cec:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8017cee:	69bb      	ldr	r3, [r7, #24]
 8017cf0:	009b      	lsls	r3, r3, #2
 8017cf2:	1c5a      	adds	r2, r3, #1
 8017cf4:	68bb      	ldr	r3, [r7, #8]
 8017cf6:	3b02      	subs	r3, #2
 8017cf8:	fa02 f303 	lsl.w	r3, r2, r3
}
 8017cfc:	4618      	mov	r0, r3
 8017cfe:	372c      	adds	r7, #44	@ 0x2c
 8017d00:	46bd      	mov	sp, r7
 8017d02:	bc80      	pop	{r7}
 8017d04:	4770      	bx	lr
	...

08017d08 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8017d08:	b580      	push	{r7, lr}
 8017d0a:	b08a      	sub	sp, #40	@ 0x28
 8017d0c:	af04      	add	r7, sp, #16
 8017d0e:	60b9      	str	r1, [r7, #8]
 8017d10:	607a      	str	r2, [r7, #4]
 8017d12:	461a      	mov	r2, r3
 8017d14:	4603      	mov	r3, r0
 8017d16:	73fb      	strb	r3, [r7, #15]
 8017d18:	4613      	mov	r3, r2
 8017d1a:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8017d1c:	2300      	movs	r3, #0
 8017d1e:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8017d20:	2301      	movs	r3, #1
 8017d22:	613b      	str	r3, [r7, #16]

    switch( modem )
 8017d24:	7bfb      	ldrb	r3, [r7, #15]
 8017d26:	2b00      	cmp	r3, #0
 8017d28:	d002      	beq.n	8017d30 <RadioTimeOnAir+0x28>
 8017d2a:	2b01      	cmp	r3, #1
 8017d2c:	d017      	beq.n	8017d5e <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 8017d2e:	e035      	b.n	8017d9c <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8017d30:	f897 0024 	ldrb.w	r0, [r7, #36]	@ 0x24
 8017d34:	8c3a      	ldrh	r2, [r7, #32]
 8017d36:	7bb9      	ldrb	r1, [r7, #14]
 8017d38:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8017d3c:	9301      	str	r3, [sp, #4]
 8017d3e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8017d42:	9300      	str	r3, [sp, #0]
 8017d44:	4603      	mov	r3, r0
 8017d46:	6878      	ldr	r0, [r7, #4]
 8017d48:	f7ff ff32 	bl	8017bb0 <RadioGetGfskTimeOnAirNumerator>
 8017d4c:	4603      	mov	r3, r0
 8017d4e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8017d52:	fb02 f303 	mul.w	r3, r2, r3
 8017d56:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8017d58:	687b      	ldr	r3, [r7, #4]
 8017d5a:	613b      	str	r3, [r7, #16]
        break;
 8017d5c:	e01e      	b.n	8017d9c <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8017d5e:	8c39      	ldrh	r1, [r7, #32]
 8017d60:	7bba      	ldrb	r2, [r7, #14]
 8017d62:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8017d66:	9302      	str	r3, [sp, #8]
 8017d68:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8017d6c:	9301      	str	r3, [sp, #4]
 8017d6e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8017d72:	9300      	str	r3, [sp, #0]
 8017d74:	460b      	mov	r3, r1
 8017d76:	6879      	ldr	r1, [r7, #4]
 8017d78:	68b8      	ldr	r0, [r7, #8]
 8017d7a:	f7ff ff43 	bl	8017c04 <RadioGetLoRaTimeOnAirNumerator>
 8017d7e:	4603      	mov	r3, r0
 8017d80:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8017d84:	fb02 f303 	mul.w	r3, r2, r3
 8017d88:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8017d8a:	4a0a      	ldr	r2, [pc, #40]	@ (8017db4 <RadioTimeOnAir+0xac>)
 8017d8c:	68bb      	ldr	r3, [r7, #8]
 8017d8e:	4413      	add	r3, r2
 8017d90:	781b      	ldrb	r3, [r3, #0]
 8017d92:	4618      	mov	r0, r3
 8017d94:	f7ff feb6 	bl	8017b04 <RadioGetLoRaBandwidthInHz>
 8017d98:	6138      	str	r0, [r7, #16]
        break;
 8017d9a:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator ); /* ST_WORKAROUND : simplified calculation with macro usage */
 8017d9c:	697a      	ldr	r2, [r7, #20]
 8017d9e:	693b      	ldr	r3, [r7, #16]
 8017da0:	4413      	add	r3, r2
 8017da2:	1e5a      	subs	r2, r3, #1
 8017da4:	693b      	ldr	r3, [r7, #16]
 8017da6:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8017daa:	4618      	mov	r0, r3
 8017dac:	3718      	adds	r7, #24
 8017dae:	46bd      	mov	sp, r7
 8017db0:	bd80      	pop	{r7, pc}
 8017db2:	bf00      	nop
 8017db4:	0801f710 	.word	0x0801f710

08017db8 <RadioSend>:

static void RadioSend( uint8_t *buffer, uint8_t size )
{
 8017db8:	b580      	push	{r7, lr}
 8017dba:	b084      	sub	sp, #16
 8017dbc:	af00      	add	r7, sp, #0
 8017dbe:	6078      	str	r0, [r7, #4]
 8017dc0:	460b      	mov	r3, r1
 8017dc2:	70fb      	strb	r3, [r7, #3]
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8017dc4:	2300      	movs	r3, #0
 8017dc6:	2200      	movs	r2, #0
 8017dc8:	f240 2101 	movw	r1, #513	@ 0x201
 8017dcc:	f240 2001 	movw	r0, #513	@ 0x201
 8017dd0:	f001 fd42 	bl	8019858 <SUBGRF_SetDioIrqParams>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8017dd4:	4b71      	ldr	r3, [pc, #452]	@ (8017f9c <RadioSend+0x1e4>)
 8017dd6:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8017dda:	2101      	movs	r1, #1
 8017ddc:	4618      	mov	r0, r3
 8017dde:	f002 f9d9 	bl	801a194 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 8017de2:	4b6e      	ldr	r3, [pc, #440]	@ (8017f9c <RadioSend+0x1e4>)
 8017de4:	781b      	ldrb	r3, [r3, #0]
 8017de6:	2b01      	cmp	r3, #1
 8017de8:	d112      	bne.n	8017e10 <RadioSend+0x58>
 8017dea:	4b6c      	ldr	r3, [pc, #432]	@ (8017f9c <RadioSend+0x1e4>)
 8017dec:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8017df0:	2b06      	cmp	r3, #6
 8017df2:	d10d      	bne.n	8017e10 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8017df4:	f640 0089 	movw	r0, #2185	@ 0x889
 8017df8:	f002 f8ec 	bl	8019fd4 <SUBGRF_ReadRegister>
 8017dfc:	4603      	mov	r3, r0
 8017dfe:	f023 0304 	bic.w	r3, r3, #4
 8017e02:	b2db      	uxtb	r3, r3
 8017e04:	4619      	mov	r1, r3
 8017e06:	f640 0089 	movw	r0, #2185	@ 0x889
 8017e0a:	f002 f8cf 	bl	8019fac <SUBGRF_WriteRegister>
 8017e0e:	e00c      	b.n	8017e2a <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8017e10:	f640 0089 	movw	r0, #2185	@ 0x889
 8017e14:	f002 f8de 	bl	8019fd4 <SUBGRF_ReadRegister>
 8017e18:	4603      	mov	r3, r0
 8017e1a:	f043 0304 	orr.w	r3, r3, #4
 8017e1e:	b2db      	uxtb	r3, r3
 8017e20:	4619      	mov	r1, r3
 8017e22:	f640 0089 	movw	r0, #2185	@ 0x889
 8017e26:	f002 f8c1 	bl	8019fac <SUBGRF_WriteRegister>
    }
    /* WORKAROUND END */
    switch( SubgRf.Modem )
 8017e2a:	4b5c      	ldr	r3, [pc, #368]	@ (8017f9c <RadioSend+0x1e4>)
 8017e2c:	781b      	ldrb	r3, [r3, #0]
 8017e2e:	2b04      	cmp	r3, #4
 8017e30:	f200 80a7 	bhi.w	8017f82 <RadioSend+0x1ca>
 8017e34:	a201      	add	r2, pc, #4	@ (adr r2, 8017e3c <RadioSend+0x84>)
 8017e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017e3a:	bf00      	nop
 8017e3c:	08017e6b 	.word	0x08017e6b
 8017e40:	08017e51 	.word	0x08017e51
 8017e44:	08017e6b 	.word	0x08017e6b
 8017e48:	08017ecb 	.word	0x08017ecb
 8017e4c:	08017eeb 	.word	0x08017eeb
    {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8017e50:	4a52      	ldr	r2, [pc, #328]	@ (8017f9c <RadioSend+0x1e4>)
 8017e52:	78fb      	ldrb	r3, [r7, #3]
 8017e54:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017e56:	4852      	ldr	r0, [pc, #328]	@ (8017fa0 <RadioSend+0x1e8>)
 8017e58:	f001 ff62 	bl	8019d20 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8017e5c:	78fb      	ldrb	r3, [r7, #3]
 8017e5e:	2200      	movs	r2, #0
 8017e60:	4619      	mov	r1, r3
 8017e62:	6878      	ldr	r0, [r7, #4]
 8017e64:	f001 fa12 	bl	801928c <SUBGRF_SendPayload>
            break;
 8017e68:	e08c      	b.n	8017f84 <RadioSend+0x1cc>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 8017e6a:	f002 fb7c 	bl	801a566 <RFW_Is_Init>
 8017e6e:	4603      	mov	r3, r0
 8017e70:	2b01      	cmp	r3, #1
 8017e72:	d11d      	bne.n	8017eb0 <RadioSend+0xf8>
            {
              uint8_t outsize;
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8017e74:	f107 020d 	add.w	r2, r7, #13
 8017e78:	78fb      	ldrb	r3, [r7, #3]
 8017e7a:	4619      	mov	r1, r3
 8017e7c:	6878      	ldr	r0, [r7, #4]
 8017e7e:	f002 fb8a 	bl	801a596 <RFW_TransmitInit>
 8017e82:	4603      	mov	r3, r0
 8017e84:	2b00      	cmp	r3, #0
 8017e86:	d10c      	bne.n	8017ea2 <RadioSend+0xea>
              {
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8017e88:	7b7a      	ldrb	r2, [r7, #13]
 8017e8a:	4b44      	ldr	r3, [pc, #272]	@ (8017f9c <RadioSend+0x1e4>)
 8017e8c:	759a      	strb	r2, [r3, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017e8e:	4844      	ldr	r0, [pc, #272]	@ (8017fa0 <RadioSend+0x1e8>)
 8017e90:	f001 ff46 	bl	8019d20 <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 8017e94:	7b7b      	ldrb	r3, [r7, #13]
 8017e96:	2200      	movs	r2, #0
 8017e98:	4619      	mov	r1, r3
 8017e9a:	6878      	ldr	r0, [r7, #4]
 8017e9c:	f001 f9f6 	bl	801928c <SUBGRF_SendPayload>
            {
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
              SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 8017ea0:	e070      	b.n	8017f84 <RadioSend+0x1cc>
                MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n");
 8017ea2:	4b40      	ldr	r3, [pc, #256]	@ (8017fa4 <RadioSend+0x1ec>)
 8017ea4:	2201      	movs	r2, #1
 8017ea6:	2100      	movs	r1, #0
 8017ea8:	2002      	movs	r0, #2
 8017eaa:	f003 fc93 	bl	801b7d4 <UTIL_ADV_TRACE_COND_FSend>
 8017eae:	e072      	b.n	8017f96 <RadioSend+0x1de>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8017eb0:	4a3a      	ldr	r2, [pc, #232]	@ (8017f9c <RadioSend+0x1e4>)
 8017eb2:	78fb      	ldrb	r3, [r7, #3]
 8017eb4:	7593      	strb	r3, [r2, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017eb6:	483a      	ldr	r0, [pc, #232]	@ (8017fa0 <RadioSend+0x1e8>)
 8017eb8:	f001 ff32 	bl	8019d20 <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 8017ebc:	78fb      	ldrb	r3, [r7, #3]
 8017ebe:	2200      	movs	r2, #0
 8017ec0:	4619      	mov	r1, r3
 8017ec2:	6878      	ldr	r0, [r7, #4]
 8017ec4:	f001 f9e2 	bl	801928c <SUBGRF_SendPayload>
            break;
 8017ec8:	e05c      	b.n	8017f84 <RadioSend+0x1cc>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8017eca:	4b34      	ldr	r3, [pc, #208]	@ (8017f9c <RadioSend+0x1e4>)
 8017ecc:	2202      	movs	r2, #2
 8017ece:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8017ed0:	4a32      	ldr	r2, [pc, #200]	@ (8017f9c <RadioSend+0x1e4>)
 8017ed2:	78fb      	ldrb	r3, [r7, #3]
 8017ed4:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017ed6:	4832      	ldr	r0, [pc, #200]	@ (8017fa0 <RadioSend+0x1e8>)
 8017ed8:	f001 ff22 	bl	8019d20 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8017edc:	78fb      	ldrb	r3, [r7, #3]
 8017ede:	2200      	movs	r2, #0
 8017ee0:	4619      	mov	r1, r3
 8017ee2:	6878      	ldr	r0, [r7, #4]
 8017ee4:	f001 f9d2 	bl	801928c <SUBGRF_SendPayload>
            break;
 8017ee8:	e04c      	b.n	8017f84 <RadioSend+0x1cc>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 8017eea:	78fb      	ldrb	r3, [r7, #3]
 8017eec:	461a      	mov	r2, r3
 8017eee:	6879      	ldr	r1, [r7, #4]
 8017ef0:	482d      	ldr	r0, [pc, #180]	@ (8017fa8 <RadioSend+0x1f0>)
 8017ef2:	f000 fcbc 	bl	801886e <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8017ef6:	4b29      	ldr	r3, [pc, #164]	@ (8017f9c <RadioSend+0x1e4>)
 8017ef8:	2202      	movs	r2, #2
 8017efa:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8017efc:	78fb      	ldrb	r3, [r7, #3]
 8017efe:	3301      	adds	r3, #1
 8017f00:	b2da      	uxtb	r2, r3
 8017f02:	4b26      	ldr	r3, [pc, #152]	@ (8017f9c <RadioSend+0x1e4>)
 8017f04:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017f06:	4826      	ldr	r0, [pc, #152]	@ (8017fa0 <RadioSend+0x1e8>)
 8017f08:	f001 ff0a 	bl	8019d20 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 8017f0c:	2100      	movs	r1, #0
 8017f0e:	20f1      	movs	r0, #241	@ 0xf1
 8017f10:	f000 f95c 	bl	80181cc <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 8017f14:	2100      	movs	r1, #0
 8017f16:	20f0      	movs	r0, #240	@ 0xf0
 8017f18:	f000 f958 	bl	80181cc <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8017f1c:	4b1f      	ldr	r3, [pc, #124]	@ (8017f9c <RadioSend+0x1e4>)
 8017f1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8017f20:	2b64      	cmp	r3, #100	@ 0x64
 8017f22:	d108      	bne.n	8017f36 <RadioSend+0x17e>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 8017f24:	2170      	movs	r1, #112	@ 0x70
 8017f26:	20f3      	movs	r0, #243	@ 0xf3
 8017f28:	f000 f950 	bl	80181cc <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 8017f2c:	211d      	movs	r1, #29
 8017f2e:	20f2      	movs	r0, #242	@ 0xf2
 8017f30:	f000 f94c 	bl	80181cc <RadioWrite>
 8017f34:	e007      	b.n	8017f46 <RadioSend+0x18e>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 8017f36:	21e1      	movs	r1, #225	@ 0xe1
 8017f38:	20f3      	movs	r0, #243	@ 0xf3
 8017f3a:	f000 f947 	bl	80181cc <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 8017f3e:	2104      	movs	r1, #4
 8017f40:	20f2      	movs	r0, #242	@ 0xf2
 8017f42:	f000 f943 	bl	80181cc <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 8017f46:	78fb      	ldrb	r3, [r7, #3]
 8017f48:	b29b      	uxth	r3, r3
 8017f4a:	00db      	lsls	r3, r3, #3
 8017f4c:	b29b      	uxth	r3, r3
 8017f4e:	3302      	adds	r3, #2
 8017f50:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 8017f52:	89fb      	ldrh	r3, [r7, #14]
 8017f54:	0a1b      	lsrs	r3, r3, #8
 8017f56:	b29b      	uxth	r3, r3
 8017f58:	b2db      	uxtb	r3, r3
 8017f5a:	4619      	mov	r1, r3
 8017f5c:	20f4      	movs	r0, #244	@ 0xf4
 8017f5e:	f000 f935 	bl	80181cc <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 8017f62:	89fb      	ldrh	r3, [r7, #14]
 8017f64:	b2db      	uxtb	r3, r3
 8017f66:	4619      	mov	r1, r3
 8017f68:	20f5      	movs	r0, #245	@ 0xf5
 8017f6a:	f000 f92f 	bl	80181cc <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size+1 , 0xFFFFFF );
 8017f6e:	78fb      	ldrb	r3, [r7, #3]
 8017f70:	3301      	adds	r3, #1
 8017f72:	b2db      	uxtb	r3, r3
 8017f74:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8017f78:	4619      	mov	r1, r3
 8017f7a:	480b      	ldr	r0, [pc, #44]	@ (8017fa8 <RadioSend+0x1f0>)
 8017f7c:	f001 f986 	bl	801928c <SUBGRF_SendPayload>
            break;
 8017f80:	e000      	b.n	8017f84 <RadioSend+0x1cc>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8017f82:	bf00      	nop
    }

    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8017f84:	4b05      	ldr	r3, [pc, #20]	@ (8017f9c <RadioSend+0x1e4>)
 8017f86:	685b      	ldr	r3, [r3, #4]
 8017f88:	4619      	mov	r1, r3
 8017f8a:	4808      	ldr	r0, [pc, #32]	@ (8017fac <RadioSend+0x1f4>)
 8017f8c:	f003 fa88 	bl	801b4a0 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8017f90:	4806      	ldr	r0, [pc, #24]	@ (8017fac <RadioSend+0x1f4>)
 8017f92:	f003 f9a7 	bl	801b2e4 <UTIL_TIMER_Start>
}
 8017f96:	3710      	adds	r7, #16
 8017f98:	46bd      	mov	sp, r7
 8017f9a:	bd80      	pop	{r7, pc}
 8017f9c:	20001cf4 	.word	0x20001cf4
 8017fa0:	20001d02 	.word	0x20001d02
 8017fa4:	0801f0c8 	.word	0x0801f0c8
 8017fa8:	20001bf0 	.word	0x20001bf0
 8017fac:	20001d50 	.word	0x20001d50

08017fb0 <RadioSleep>:

static void RadioSleep( void )
{
 8017fb0:	b580      	push	{r7, lr}
 8017fb2:	b082      	sub	sp, #8
 8017fb4:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 8017fb6:	2300      	movs	r3, #0
 8017fb8:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 8017fba:	793b      	ldrb	r3, [r7, #4]
 8017fbc:	f043 0304 	orr.w	r3, r3, #4
 8017fc0:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 8017fc2:	7938      	ldrb	r0, [r7, #4]
 8017fc4:	f001 fa3e 	bl	8019444 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 8017fc8:	2002      	movs	r0, #2
 8017fca:	f7ea f90f 	bl	80021ec <HAL_Delay>
}
 8017fce:	bf00      	nop
 8017fd0:	3708      	adds	r7, #8
 8017fd2:	46bd      	mov	sp, r7
 8017fd4:	bd80      	pop	{r7, pc}

08017fd6 <RadioStandby>:

static void RadioStandby( void )
{
 8017fd6:	b580      	push	{r7, lr}
 8017fd8:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 8017fda:	2000      	movs	r0, #0
 8017fdc:	f001 fa66 	bl	80194ac <SUBGRF_SetStandby>
}
 8017fe0:	bf00      	nop
 8017fe2:	bd80      	pop	{r7, pc}

08017fe4 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 8017fe4:	b580      	push	{r7, lr}
 8017fe6:	b082      	sub	sp, #8
 8017fe8:	af00      	add	r7, sp, #0
 8017fea:	6078      	str	r0, [r7, #4]
    if( 1UL == RFW_Is_Init( ) )
 8017fec:	f002 fabb 	bl	801a566 <RFW_Is_Init>
 8017ff0:	4603      	mov	r3, r0
 8017ff2:	2b01      	cmp	r3, #1
 8017ff4:	d102      	bne.n	8017ffc <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 8017ff6:	f002 fade 	bl	801a5b6 <RFW_ReceiveInit>
 8017ffa:	e007      	b.n	801800c <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8017ffc:	2300      	movs	r3, #0
 8017ffe:	2200      	movs	r2, #0
 8018000:	f240 2162 	movw	r1, #610	@ 0x262
 8018004:	f240 2062 	movw	r0, #610	@ 0x262
 8018008:	f001 fc26 	bl	8019858 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 801800c:	687b      	ldr	r3, [r7, #4]
 801800e:	2b00      	cmp	r3, #0
 8018010:	d006      	beq.n	8018020 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8018012:	6879      	ldr	r1, [r7, #4]
 8018014:	4811      	ldr	r0, [pc, #68]	@ (801805c <RadioRx+0x78>)
 8018016:	f003 fa43 	bl	801b4a0 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801801a:	4810      	ldr	r0, [pc, #64]	@ (801805c <RadioRx+0x78>)
 801801c:	f003 f962 	bl	801b2e4 <UTIL_TIMER_Start>
    }
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8018020:	4b0f      	ldr	r3, [pc, #60]	@ (8018060 <RadioRx+0x7c>)
 8018022:	2200      	movs	r2, #0
 8018024:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8018026:	4b0e      	ldr	r3, [pc, #56]	@ (8018060 <RadioRx+0x7c>)
 8018028:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 801802c:	2100      	movs	r1, #0
 801802e:	4618      	mov	r0, r3
 8018030:	f002 f8b0 	bl	801a194 <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 8018034:	4b0a      	ldr	r3, [pc, #40]	@ (8018060 <RadioRx+0x7c>)
 8018036:	785b      	ldrb	r3, [r3, #1]
 8018038:	2b00      	cmp	r3, #0
 801803a:	d004      	beq.n	8018046 <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801803c:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8018040:	f001 fa70 	bl	8019524 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8018044:	e005      	b.n	8018052 <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8018046:	4b06      	ldr	r3, [pc, #24]	@ (8018060 <RadioRx+0x7c>)
 8018048:	689b      	ldr	r3, [r3, #8]
 801804a:	019b      	lsls	r3, r3, #6
 801804c:	4618      	mov	r0, r3
 801804e:	f001 fa69 	bl	8019524 <SUBGRF_SetRx>
}
 8018052:	bf00      	nop
 8018054:	3708      	adds	r7, #8
 8018056:	46bd      	mov	sp, r7
 8018058:	bd80      	pop	{r7, pc}
 801805a:	bf00      	nop
 801805c:	20001d68 	.word	0x20001d68
 8018060:	20001cf4 	.word	0x20001cf4

08018064 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 8018064:	b580      	push	{r7, lr}
 8018066:	b082      	sub	sp, #8
 8018068:	af00      	add	r7, sp, #0
 801806a:	6078      	str	r0, [r7, #4]
    if( 1UL == RFW_Is_Init() )
 801806c:	f002 fa7b 	bl	801a566 <RFW_Is_Init>
 8018070:	4603      	mov	r3, r0
 8018072:	2b01      	cmp	r3, #1
 8018074:	d102      	bne.n	801807c <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 8018076:	f002 fa9e 	bl	801a5b6 <RFW_ReceiveInit>
 801807a:	e007      	b.n	801808c <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801807c:	2300      	movs	r3, #0
 801807e:	2200      	movs	r2, #0
 8018080:	f240 2162 	movw	r1, #610	@ 0x262
 8018084:	f240 2062 	movw	r0, #610	@ 0x262
 8018088:	f001 fbe6 	bl	8019858 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 801808c:	687b      	ldr	r3, [r7, #4]
 801808e:	2b00      	cmp	r3, #0
 8018090:	d006      	beq.n	80180a0 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8018092:	6879      	ldr	r1, [r7, #4]
 8018094:	4811      	ldr	r0, [pc, #68]	@ (80180dc <RadioRxBoosted+0x78>)
 8018096:	f003 fa03 	bl	801b4a0 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801809a:	4810      	ldr	r0, [pc, #64]	@ (80180dc <RadioRxBoosted+0x78>)
 801809c:	f003 f922 	bl	801b2e4 <UTIL_TIMER_Start>
    }
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80180a0:	4b0f      	ldr	r3, [pc, #60]	@ (80180e0 <RadioRxBoosted+0x7c>)
 80180a2:	2200      	movs	r2, #0
 80180a4:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80180a6:	4b0e      	ldr	r3, [pc, #56]	@ (80180e0 <RadioRxBoosted+0x7c>)
 80180a8:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80180ac:	2100      	movs	r1, #0
 80180ae:	4618      	mov	r0, r3
 80180b0:	f002 f870 	bl	801a194 <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 80180b4:	4b0a      	ldr	r3, [pc, #40]	@ (80180e0 <RadioRxBoosted+0x7c>)
 80180b6:	785b      	ldrb	r3, [r3, #1]
 80180b8:	2b00      	cmp	r3, #0
 80180ba:	d004      	beq.n	80180c6 <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 80180bc:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 80180c0:	f001 fa50 	bl	8019564 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 80180c4:	e005      	b.n	80180d2 <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 80180c6:	4b06      	ldr	r3, [pc, #24]	@ (80180e0 <RadioRxBoosted+0x7c>)
 80180c8:	689b      	ldr	r3, [r3, #8]
 80180ca:	019b      	lsls	r3, r3, #6
 80180cc:	4618      	mov	r0, r3
 80180ce:	f001 fa49 	bl	8019564 <SUBGRF_SetRxBoosted>
}
 80180d2:	bf00      	nop
 80180d4:	3708      	adds	r7, #8
 80180d6:	46bd      	mov	sp, r7
 80180d8:	bd80      	pop	{r7, pc}
 80180da:	bf00      	nop
 80180dc:	20001d68 	.word	0x20001d68
 80180e0:	20001cf4 	.word	0x20001cf4

080180e4 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 80180e4:	b580      	push	{r7, lr}
 80180e6:	b082      	sub	sp, #8
 80180e8:	af00      	add	r7, sp, #0
 80180ea:	6078      	str	r0, [r7, #4]
 80180ec:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 80180ee:	687b      	ldr	r3, [r7, #4]
 80180f0:	005a      	lsls	r2, r3, #1
 80180f2:	683b      	ldr	r3, [r7, #0]
 80180f4:	4413      	add	r3, r2
 80180f6:	4a0c      	ldr	r2, [pc, #48]	@ (8018128 <RadioSetRxDutyCycle+0x44>)
 80180f8:	6593      	str	r3, [r2, #88]	@ 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80180fa:	2300      	movs	r3, #0
 80180fc:	2200      	movs	r2, #0
 80180fe:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8018102:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8018106:	f001 fba7 	bl	8019858 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801810a:	4b07      	ldr	r3, [pc, #28]	@ (8018128 <RadioSetRxDutyCycle+0x44>)
 801810c:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8018110:	2100      	movs	r1, #0
 8018112:	4618      	mov	r0, r3
 8018114:	f002 f83e 	bl	801a194 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8018118:	6839      	ldr	r1, [r7, #0]
 801811a:	6878      	ldr	r0, [r7, #4]
 801811c:	f001 fa46 	bl	80195ac <SUBGRF_SetRxDutyCycle>
}
 8018120:	bf00      	nop
 8018122:	3708      	adds	r7, #8
 8018124:	46bd      	mov	sp, r7
 8018126:	bd80      	pop	{r7, pc}
 8018128:	20001cf4 	.word	0x20001cf4

0801812c <RadioStartCad>:

static void RadioStartCad( void )
{
 801812c:	b580      	push	{r7, lr}
 801812e:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8018130:	4b09      	ldr	r3, [pc, #36]	@ (8018158 <RadioStartCad+0x2c>)
 8018132:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8018136:	2100      	movs	r1, #0
 8018138:	4618      	mov	r0, r3
 801813a:	f002 f82b 	bl	801a194 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 801813e:	2300      	movs	r3, #0
 8018140:	2200      	movs	r2, #0
 8018142:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8018146:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 801814a:	f001 fb85 	bl	8019858 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 801814e:	f001 fa59 	bl	8019604 <SUBGRF_SetCad>
}
 8018152:	bf00      	nop
 8018154:	bd80      	pop	{r7, pc}
 8018156:	bf00      	nop
 8018158:	20001cf4 	.word	0x20001cf4

0801815c <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 801815c:	b580      	push	{r7, lr}
 801815e:	b084      	sub	sp, #16
 8018160:	af00      	add	r7, sp, #0
 8018162:	6078      	str	r0, [r7, #4]
 8018164:	460b      	mov	r3, r1
 8018166:	70fb      	strb	r3, [r7, #3]
 8018168:	4613      	mov	r3, r2
 801816a:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 801816c:	883b      	ldrh	r3, [r7, #0]
 801816e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8018172:	fb02 f303 	mul.w	r3, r2, r3
 8018176:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8018178:	6878      	ldr	r0, [r7, #4]
 801817a:	f001 fbc9 	bl	8019910 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 801817e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018182:	4618      	mov	r0, r3
 8018184:	f002 f82e 	bl	801a1e4 <SUBGRF_SetRfTxPower>
 8018188:	4603      	mov	r3, r0
 801818a:	72fb      	strb	r3, [r7, #11]

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 801818c:	7afb      	ldrb	r3, [r7, #11]
 801818e:	2101      	movs	r1, #1
 8018190:	4618      	mov	r0, r3
 8018192:	f001 ffff 	bl	801a194 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 8018196:	f001 fa43 	bl	8019620 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 801819a:	68f9      	ldr	r1, [r7, #12]
 801819c:	4804      	ldr	r0, [pc, #16]	@ (80181b0 <RadioSetTxContinuousWave+0x54>)
 801819e:	f003 f97f 	bl	801b4a0 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 80181a2:	4803      	ldr	r0, [pc, #12]	@ (80181b0 <RadioSetTxContinuousWave+0x54>)
 80181a4:	f003 f89e 	bl	801b2e4 <UTIL_TIMER_Start>
}
 80181a8:	bf00      	nop
 80181aa:	3710      	adds	r7, #16
 80181ac:	46bd      	mov	sp, r7
 80181ae:	bd80      	pop	{r7, pc}
 80181b0:	20001d50 	.word	0x20001d50

080181b4 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 80181b4:	b580      	push	{r7, lr}
 80181b6:	b082      	sub	sp, #8
 80181b8:	af00      	add	r7, sp, #0
 80181ba:	4603      	mov	r3, r0
 80181bc:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 80181be:	f001 fe62 	bl	8019e86 <SUBGRF_GetRssiInst>
 80181c2:	4603      	mov	r3, r0
}
 80181c4:	4618      	mov	r0, r3
 80181c6:	3708      	adds	r7, #8
 80181c8:	46bd      	mov	sp, r7
 80181ca:	bd80      	pop	{r7, pc}

080181cc <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 80181cc:	b580      	push	{r7, lr}
 80181ce:	b082      	sub	sp, #8
 80181d0:	af00      	add	r7, sp, #0
 80181d2:	4603      	mov	r3, r0
 80181d4:	460a      	mov	r2, r1
 80181d6:	80fb      	strh	r3, [r7, #6]
 80181d8:	4613      	mov	r3, r2
 80181da:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 80181dc:	797a      	ldrb	r2, [r7, #5]
 80181de:	88fb      	ldrh	r3, [r7, #6]
 80181e0:	4611      	mov	r1, r2
 80181e2:	4618      	mov	r0, r3
 80181e4:	f001 fee2 	bl	8019fac <SUBGRF_WriteRegister>
}
 80181e8:	bf00      	nop
 80181ea:	3708      	adds	r7, #8
 80181ec:	46bd      	mov	sp, r7
 80181ee:	bd80      	pop	{r7, pc}

080181f0 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 80181f0:	b580      	push	{r7, lr}
 80181f2:	b082      	sub	sp, #8
 80181f4:	af00      	add	r7, sp, #0
 80181f6:	4603      	mov	r3, r0
 80181f8:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 80181fa:	88fb      	ldrh	r3, [r7, #6]
 80181fc:	4618      	mov	r0, r3
 80181fe:	f001 fee9 	bl	8019fd4 <SUBGRF_ReadRegister>
 8018202:	4603      	mov	r3, r0
}
 8018204:	4618      	mov	r0, r3
 8018206:	3708      	adds	r7, #8
 8018208:	46bd      	mov	sp, r7
 801820a:	bd80      	pop	{r7, pc}

0801820c <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 801820c:	b580      	push	{r7, lr}
 801820e:	b082      	sub	sp, #8
 8018210:	af00      	add	r7, sp, #0
 8018212:	4603      	mov	r3, r0
 8018214:	6039      	str	r1, [r7, #0]
 8018216:	80fb      	strh	r3, [r7, #6]
 8018218:	4613      	mov	r3, r2
 801821a:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 801821c:	797b      	ldrb	r3, [r7, #5]
 801821e:	b29a      	uxth	r2, r3
 8018220:	88fb      	ldrh	r3, [r7, #6]
 8018222:	6839      	ldr	r1, [r7, #0]
 8018224:	4618      	mov	r0, r3
 8018226:	f001 fee9 	bl	8019ffc <SUBGRF_WriteRegisters>
}
 801822a:	bf00      	nop
 801822c:	3708      	adds	r7, #8
 801822e:	46bd      	mov	sp, r7
 8018230:	bd80      	pop	{r7, pc}

08018232 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8018232:	b580      	push	{r7, lr}
 8018234:	b082      	sub	sp, #8
 8018236:	af00      	add	r7, sp, #0
 8018238:	4603      	mov	r3, r0
 801823a:	6039      	str	r1, [r7, #0]
 801823c:	80fb      	strh	r3, [r7, #6]
 801823e:	4613      	mov	r3, r2
 8018240:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 8018242:	797b      	ldrb	r3, [r7, #5]
 8018244:	b29a      	uxth	r2, r3
 8018246:	88fb      	ldrh	r3, [r7, #6]
 8018248:	6839      	ldr	r1, [r7, #0]
 801824a:	4618      	mov	r0, r3
 801824c:	f001 fef8 	bl	801a040 <SUBGRF_ReadRegisters>
}
 8018250:	bf00      	nop
 8018252:	3708      	adds	r7, #8
 8018254:	46bd      	mov	sp, r7
 8018256:	bd80      	pop	{r7, pc}

08018258 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8018258:	b580      	push	{r7, lr}
 801825a:	b082      	sub	sp, #8
 801825c:	af00      	add	r7, sp, #0
 801825e:	4603      	mov	r3, r0
 8018260:	460a      	mov	r2, r1
 8018262:	71fb      	strb	r3, [r7, #7]
 8018264:	4613      	mov	r3, r2
 8018266:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8018268:	79fb      	ldrb	r3, [r7, #7]
 801826a:	2b01      	cmp	r3, #1
 801826c:	d10a      	bne.n	8018284 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 801826e:	4a0e      	ldr	r2, [pc, #56]	@ (80182a8 <RadioSetMaxPayloadLength+0x50>)
 8018270:	79bb      	ldrb	r3, [r7, #6]
 8018272:	7013      	strb	r3, [r2, #0]
 8018274:	4b0c      	ldr	r3, [pc, #48]	@ (80182a8 <RadioSetMaxPayloadLength+0x50>)
 8018276:	781a      	ldrb	r2, [r3, #0]
 8018278:	4b0c      	ldr	r3, [pc, #48]	@ (80182ac <RadioSetMaxPayloadLength+0x54>)
 801827a:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801827c:	480c      	ldr	r0, [pc, #48]	@ (80182b0 <RadioSetMaxPayloadLength+0x58>)
 801827e:	f001 fd4f 	bl	8019d20 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 8018282:	e00d      	b.n	80182a0 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8018284:	4b09      	ldr	r3, [pc, #36]	@ (80182ac <RadioSetMaxPayloadLength+0x54>)
 8018286:	7d5b      	ldrb	r3, [r3, #21]
 8018288:	2b01      	cmp	r3, #1
 801828a:	d109      	bne.n	80182a0 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 801828c:	4a06      	ldr	r2, [pc, #24]	@ (80182a8 <RadioSetMaxPayloadLength+0x50>)
 801828e:	79bb      	ldrb	r3, [r7, #6]
 8018290:	7013      	strb	r3, [r2, #0]
 8018292:	4b05      	ldr	r3, [pc, #20]	@ (80182a8 <RadioSetMaxPayloadLength+0x50>)
 8018294:	781a      	ldrb	r2, [r3, #0]
 8018296:	4b05      	ldr	r3, [pc, #20]	@ (80182ac <RadioSetMaxPayloadLength+0x54>)
 8018298:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801829a:	4805      	ldr	r0, [pc, #20]	@ (80182b0 <RadioSetMaxPayloadLength+0x58>)
 801829c:	f001 fd40 	bl	8019d20 <SUBGRF_SetPacketParams>
}
 80182a0:	bf00      	nop
 80182a2:	3708      	adds	r7, #8
 80182a4:	46bd      	mov	sp, r7
 80182a6:	bd80      	pop	{r7, pc}
 80182a8:	2000012c 	.word	0x2000012c
 80182ac:	20001cf4 	.word	0x20001cf4
 80182b0:	20001d02 	.word	0x20001d02

080182b4 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 80182b4:	b580      	push	{r7, lr}
 80182b6:	b082      	sub	sp, #8
 80182b8:	af00      	add	r7, sp, #0
 80182ba:	4603      	mov	r3, r0
 80182bc:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 80182be:	4a13      	ldr	r2, [pc, #76]	@ (801830c <RadioSetPublicNetwork+0x58>)
 80182c0:	79fb      	ldrb	r3, [r7, #7]
 80182c2:	7313      	strb	r3, [r2, #12]
 80182c4:	4b11      	ldr	r3, [pc, #68]	@ (801830c <RadioSetPublicNetwork+0x58>)
 80182c6:	7b1a      	ldrb	r2, [r3, #12]
 80182c8:	4b10      	ldr	r3, [pc, #64]	@ (801830c <RadioSetPublicNetwork+0x58>)
 80182ca:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 80182cc:	2001      	movs	r0, #1
 80182ce:	f7ff f82f 	bl	8017330 <RadioSetModem>
    if( enable == true )
 80182d2:	79fb      	ldrb	r3, [r7, #7]
 80182d4:	2b00      	cmp	r3, #0
 80182d6:	d00a      	beq.n	80182ee <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 80182d8:	2134      	movs	r1, #52	@ 0x34
 80182da:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 80182de:	f001 fe65 	bl	8019fac <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 80182e2:	2144      	movs	r1, #68	@ 0x44
 80182e4:	f240 7041 	movw	r0, #1857	@ 0x741
 80182e8:	f001 fe60 	bl	8019fac <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 80182ec:	e009      	b.n	8018302 <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 80182ee:	2114      	movs	r1, #20
 80182f0:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 80182f4:	f001 fe5a 	bl	8019fac <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 80182f8:	2124      	movs	r1, #36	@ 0x24
 80182fa:	f240 7041 	movw	r0, #1857	@ 0x741
 80182fe:	f001 fe55 	bl	8019fac <SUBGRF_WriteRegister>
}
 8018302:	bf00      	nop
 8018304:	3708      	adds	r7, #8
 8018306:	46bd      	mov	sp, r7
 8018308:	bd80      	pop	{r7, pc}
 801830a:	bf00      	nop
 801830c:	20001cf4 	.word	0x20001cf4

08018310 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 8018310:	b580      	push	{r7, lr}
 8018312:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8018314:	f001 ff9a 	bl	801a24c <SUBGRF_GetRadioWakeUpTime>
 8018318:	4603      	mov	r3, r0
 801831a:	3303      	adds	r3, #3
}
 801831c:	4618      	mov	r0, r3
 801831e:	bd80      	pop	{r7, pc}

08018320 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 8018320:	b580      	push	{r7, lr}
 8018322:	b082      	sub	sp, #8
 8018324:	af00      	add	r7, sp, #0
 8018326:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 8018328:	f000 f80e 	bl	8018348 <RadioOnTxTimeoutProcess>
}
 801832c:	bf00      	nop
 801832e:	3708      	adds	r7, #8
 8018330:	46bd      	mov	sp, r7
 8018332:	bd80      	pop	{r7, pc}

08018334 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 8018334:	b580      	push	{r7, lr}
 8018336:	b082      	sub	sp, #8
 8018338:	af00      	add	r7, sp, #0
 801833a:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 801833c:	f000 f818 	bl	8018370 <RadioOnRxTimeoutProcess>
}
 8018340:	bf00      	nop
 8018342:	3708      	adds	r7, #8
 8018344:	46bd      	mov	sp, r7
 8018346:	bd80      	pop	{r7, pc}

08018348 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 8018348:	b580      	push	{r7, lr}
 801834a:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801834c:	4b07      	ldr	r3, [pc, #28]	@ (801836c <RadioOnTxTimeoutProcess+0x24>)
 801834e:	681b      	ldr	r3, [r3, #0]
 8018350:	2b00      	cmp	r3, #0
 8018352:	d008      	beq.n	8018366 <RadioOnTxTimeoutProcess+0x1e>
 8018354:	4b05      	ldr	r3, [pc, #20]	@ (801836c <RadioOnTxTimeoutProcess+0x24>)
 8018356:	681b      	ldr	r3, [r3, #0]
 8018358:	685b      	ldr	r3, [r3, #4]
 801835a:	2b00      	cmp	r3, #0
 801835c:	d003      	beq.n	8018366 <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 801835e:	4b03      	ldr	r3, [pc, #12]	@ (801836c <RadioOnTxTimeoutProcess+0x24>)
 8018360:	681b      	ldr	r3, [r3, #0]
 8018362:	685b      	ldr	r3, [r3, #4]
 8018364:	4798      	blx	r3
    }
}
 8018366:	bf00      	nop
 8018368:	bd80      	pop	{r7, pc}
 801836a:	bf00      	nop
 801836c:	20001cf0 	.word	0x20001cf0

08018370 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8018370:	b580      	push	{r7, lr}
 8018372:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8018374:	4b07      	ldr	r3, [pc, #28]	@ (8018394 <RadioOnRxTimeoutProcess+0x24>)
 8018376:	681b      	ldr	r3, [r3, #0]
 8018378:	2b00      	cmp	r3, #0
 801837a:	d008      	beq.n	801838e <RadioOnRxTimeoutProcess+0x1e>
 801837c:	4b05      	ldr	r3, [pc, #20]	@ (8018394 <RadioOnRxTimeoutProcess+0x24>)
 801837e:	681b      	ldr	r3, [r3, #0]
 8018380:	68db      	ldr	r3, [r3, #12]
 8018382:	2b00      	cmp	r3, #0
 8018384:	d003      	beq.n	801838e <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 8018386:	4b03      	ldr	r3, [pc, #12]	@ (8018394 <RadioOnRxTimeoutProcess+0x24>)
 8018388:	681b      	ldr	r3, [r3, #0]
 801838a:	68db      	ldr	r3, [r3, #12]
 801838c:	4798      	blx	r3
    }
}
 801838e:	bf00      	nop
 8018390:	bd80      	pop	{r7, pc}
 8018392:	bf00      	nop
 8018394:	20001cf0 	.word	0x20001cf0

08018398 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 8018398:	b580      	push	{r7, lr}
 801839a:	b082      	sub	sp, #8
 801839c:	af00      	add	r7, sp, #0
 801839e:	4603      	mov	r3, r0
 80183a0:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 80183a2:	4a05      	ldr	r2, [pc, #20]	@ (80183b8 <RadioOnDioIrq+0x20>)
 80183a4:	88fb      	ldrh	r3, [r7, #6]
 80183a6:	f8a2 3054 	strh.w	r3, [r2, #84]	@ 0x54

    RADIO_IRQ_PROCESS();
 80183aa:	f000 f807 	bl	80183bc <RadioIrqProcess>
}
 80183ae:	bf00      	nop
 80183b0:	3708      	adds	r7, #8
 80183b2:	46bd      	mov	sp, r7
 80183b4:	bd80      	pop	{r7, pc}
 80183b6:	bf00      	nop
 80183b8:	20001cf4 	.word	0x20001cf4

080183bc <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 80183bc:	b5b0      	push	{r4, r5, r7, lr}
 80183be:	b082      	sub	sp, #8
 80183c0:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 80183c2:	2300      	movs	r3, #0
 80183c4:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 80183c6:	2300      	movs	r3, #0
 80183c8:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 80183ca:	4ba8      	ldr	r3, [pc, #672]	@ (801866c <RadioIrqProcess+0x2b0>)
 80183cc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80183d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80183d4:	f000 810d 	beq.w	80185f2 <RadioIrqProcess+0x236>
 80183d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80183dc:	f300 81e8 	bgt.w	80187b0 <RadioIrqProcess+0x3f4>
 80183e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80183e4:	f000 80f1 	beq.w	80185ca <RadioIrqProcess+0x20e>
 80183e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80183ec:	f300 81e0 	bgt.w	80187b0 <RadioIrqProcess+0x3f4>
 80183f0:	2b80      	cmp	r3, #128	@ 0x80
 80183f2:	f000 80d6 	beq.w	80185a2 <RadioIrqProcess+0x1e6>
 80183f6:	2b80      	cmp	r3, #128	@ 0x80
 80183f8:	f300 81da 	bgt.w	80187b0 <RadioIrqProcess+0x3f4>
 80183fc:	2b20      	cmp	r3, #32
 80183fe:	dc49      	bgt.n	8018494 <RadioIrqProcess+0xd8>
 8018400:	2b00      	cmp	r3, #0
 8018402:	f340 81d5 	ble.w	80187b0 <RadioIrqProcess+0x3f4>
 8018406:	3b01      	subs	r3, #1
 8018408:	2b1f      	cmp	r3, #31
 801840a:	f200 81d1 	bhi.w	80187b0 <RadioIrqProcess+0x3f4>
 801840e:	a201      	add	r2, pc, #4	@ (adr r2, 8018414 <RadioIrqProcess+0x58>)
 8018410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018414:	0801849d 	.word	0x0801849d
 8018418:	080184d7 	.word	0x080184d7
 801841c:	080187b1 	.word	0x080187b1
 8018420:	0801868d 	.word	0x0801868d
 8018424:	080187b1 	.word	0x080187b1
 8018428:	080187b1 	.word	0x080187b1
 801842c:	080187b1 	.word	0x080187b1
 8018430:	08018709 	.word	0x08018709
 8018434:	080187b1 	.word	0x080187b1
 8018438:	080187b1 	.word	0x080187b1
 801843c:	080187b1 	.word	0x080187b1
 8018440:	080187b1 	.word	0x080187b1
 8018444:	080187b1 	.word	0x080187b1
 8018448:	080187b1 	.word	0x080187b1
 801844c:	080187b1 	.word	0x080187b1
 8018450:	08018725 	.word	0x08018725
 8018454:	080187b1 	.word	0x080187b1
 8018458:	080187b1 	.word	0x080187b1
 801845c:	080187b1 	.word	0x080187b1
 8018460:	080187b1 	.word	0x080187b1
 8018464:	080187b1 	.word	0x080187b1
 8018468:	080187b1 	.word	0x080187b1
 801846c:	080187b1 	.word	0x080187b1
 8018470:	080187b1 	.word	0x080187b1
 8018474:	080187b1 	.word	0x080187b1
 8018478:	080187b1 	.word	0x080187b1
 801847c:	080187b1 	.word	0x080187b1
 8018480:	080187b1 	.word	0x080187b1
 8018484:	080187b1 	.word	0x080187b1
 8018488:	080187b1 	.word	0x080187b1
 801848c:	080187b1 	.word	0x080187b1
 8018490:	08018733 	.word	0x08018733
 8018494:	2b40      	cmp	r3, #64	@ 0x40
 8018496:	f000 816d 	beq.w	8018774 <RadioIrqProcess+0x3b8>
        {
            RadioEvents->RxError( );
        }
        break;
    default:
        break;
 801849a:	e189      	b.n	80187b0 <RadioIrqProcess+0x3f4>
        TimerStop( &TxTimeoutTimer );
 801849c:	4874      	ldr	r0, [pc, #464]	@ (8018670 <RadioIrqProcess+0x2b4>)
 801849e:	f002 ff8f 	bl	801b3c0 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 80184a2:	2000      	movs	r0, #0
 80184a4:	f001 f802 	bl	80194ac <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 80184a8:	f002 f864 	bl	801a574 <RFW_Is_LongPacketModeEnabled>
 80184ac:	4603      	mov	r3, r0
 80184ae:	2b01      	cmp	r3, #1
 80184b0:	d101      	bne.n	80184b6 <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 80184b2:	f002 f888 	bl	801a5c6 <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 80184b6:	4b6f      	ldr	r3, [pc, #444]	@ (8018674 <RadioIrqProcess+0x2b8>)
 80184b8:	681b      	ldr	r3, [r3, #0]
 80184ba:	2b00      	cmp	r3, #0
 80184bc:	f000 817a 	beq.w	80187b4 <RadioIrqProcess+0x3f8>
 80184c0:	4b6c      	ldr	r3, [pc, #432]	@ (8018674 <RadioIrqProcess+0x2b8>)
 80184c2:	681b      	ldr	r3, [r3, #0]
 80184c4:	681b      	ldr	r3, [r3, #0]
 80184c6:	2b00      	cmp	r3, #0
 80184c8:	f000 8174 	beq.w	80187b4 <RadioIrqProcess+0x3f8>
            RadioEvents->TxDone( );
 80184cc:	4b69      	ldr	r3, [pc, #420]	@ (8018674 <RadioIrqProcess+0x2b8>)
 80184ce:	681b      	ldr	r3, [r3, #0]
 80184d0:	681b      	ldr	r3, [r3, #0]
 80184d2:	4798      	blx	r3
        break;
 80184d4:	e16e      	b.n	80187b4 <RadioIrqProcess+0x3f8>
        TimerStop( &RxTimeoutTimer );
 80184d6:	4868      	ldr	r0, [pc, #416]	@ (8018678 <RadioIrqProcess+0x2bc>)
 80184d8:	f002 ff72 	bl	801b3c0 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 80184dc:	4b63      	ldr	r3, [pc, #396]	@ (801866c <RadioIrqProcess+0x2b0>)
 80184de:	785b      	ldrb	r3, [r3, #1]
 80184e0:	f083 0301 	eor.w	r3, r3, #1
 80184e4:	b2db      	uxtb	r3, r3
 80184e6:	2b00      	cmp	r3, #0
 80184e8:	d014      	beq.n	8018514 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 80184ea:	2000      	movs	r0, #0
 80184ec:	f000 ffde 	bl	80194ac <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 80184f0:	2100      	movs	r1, #0
 80184f2:	f640 1002 	movw	r0, #2306	@ 0x902
 80184f6:	f001 fd59 	bl	8019fac <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 80184fa:	f640 1044 	movw	r0, #2372	@ 0x944
 80184fe:	f001 fd69 	bl	8019fd4 <SUBGRF_ReadRegister>
 8018502:	4603      	mov	r3, r0
 8018504:	f043 0302 	orr.w	r3, r3, #2
 8018508:	b2db      	uxtb	r3, r3
 801850a:	4619      	mov	r1, r3
 801850c:	f640 1044 	movw	r0, #2372	@ 0x944
 8018510:	f001 fd4c 	bl	8019fac <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 8018514:	1dfb      	adds	r3, r7, #7
 8018516:	22ff      	movs	r2, #255	@ 0xff
 8018518:	4619      	mov	r1, r3
 801851a:	4858      	ldr	r0, [pc, #352]	@ (801867c <RadioIrqProcess+0x2c0>)
 801851c:	f000 fe94 	bl	8019248 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 8018520:	4857      	ldr	r0, [pc, #348]	@ (8018680 <RadioIrqProcess+0x2c4>)
 8018522:	f001 fcf1 	bl	8019f08 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8018526:	4b53      	ldr	r3, [pc, #332]	@ (8018674 <RadioIrqProcess+0x2b8>)
 8018528:	681b      	ldr	r3, [r3, #0]
 801852a:	2b00      	cmp	r3, #0
 801852c:	f000 8144 	beq.w	80187b8 <RadioIrqProcess+0x3fc>
 8018530:	4b50      	ldr	r3, [pc, #320]	@ (8018674 <RadioIrqProcess+0x2b8>)
 8018532:	681b      	ldr	r3, [r3, #0]
 8018534:	689b      	ldr	r3, [r3, #8]
 8018536:	2b00      	cmp	r3, #0
 8018538:	f000 813e 	beq.w	80187b8 <RadioIrqProcess+0x3fc>
            switch( SubgRf.PacketStatus.packetType )
 801853c:	4b4b      	ldr	r3, [pc, #300]	@ (801866c <RadioIrqProcess+0x2b0>)
 801853e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8018542:	2b01      	cmp	r3, #1
 8018544:	d10e      	bne.n	8018564 <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 8018546:	4b4b      	ldr	r3, [pc, #300]	@ (8018674 <RadioIrqProcess+0x2b8>)
 8018548:	681b      	ldr	r3, [r3, #0]
 801854a:	689c      	ldr	r4, [r3, #8]
 801854c:	79fb      	ldrb	r3, [r7, #7]
 801854e:	4619      	mov	r1, r3
 8018550:	4b46      	ldr	r3, [pc, #280]	@ (801866c <RadioIrqProcess+0x2b0>)
 8018552:	f993 3030 	ldrsb.w	r3, [r3, #48]	@ 0x30
 8018556:	461a      	mov	r2, r3
 8018558:	4b44      	ldr	r3, [pc, #272]	@ (801866c <RadioIrqProcess+0x2b0>)
 801855a:	f993 3031 	ldrsb.w	r3, [r3, #49]	@ 0x31
 801855e:	4847      	ldr	r0, [pc, #284]	@ (801867c <RadioIrqProcess+0x2c0>)
 8018560:	47a0      	blx	r4
                break;
 8018562:	e01d      	b.n	80185a0 <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8018564:	4b41      	ldr	r3, [pc, #260]	@ (801866c <RadioIrqProcess+0x2b0>)
 8018566:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018568:	463a      	mov	r2, r7
 801856a:	4611      	mov	r1, r2
 801856c:	4618      	mov	r0, r3
 801856e:	f001 ff4f 	bl	801a410 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 8018572:	4b40      	ldr	r3, [pc, #256]	@ (8018674 <RadioIrqProcess+0x2b8>)
 8018574:	681b      	ldr	r3, [r3, #0]
 8018576:	689c      	ldr	r4, [r3, #8]
 8018578:	79fb      	ldrb	r3, [r7, #7]
 801857a:	4619      	mov	r1, r3
 801857c:	4b3b      	ldr	r3, [pc, #236]	@ (801866c <RadioIrqProcess+0x2b0>)
 801857e:	f993 3029 	ldrsb.w	r3, [r3, #41]	@ 0x29
 8018582:	4618      	mov	r0, r3
 8018584:	683b      	ldr	r3, [r7, #0]
 8018586:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 801858a:	4a3e      	ldr	r2, [pc, #248]	@ (8018684 <RadioIrqProcess+0x2c8>)
 801858c:	fb82 5203 	smull	r5, r2, r2, r3
 8018590:	1192      	asrs	r2, r2, #6
 8018592:	17db      	asrs	r3, r3, #31
 8018594:	1ad3      	subs	r3, r2, r3
 8018596:	b25b      	sxtb	r3, r3
 8018598:	4602      	mov	r2, r0
 801859a:	4838      	ldr	r0, [pc, #224]	@ (801867c <RadioIrqProcess+0x2c0>)
 801859c:	47a0      	blx	r4
                break;
 801859e:	bf00      	nop
        break;
 80185a0:	e10a      	b.n	80187b8 <RadioIrqProcess+0x3fc>
        SUBGRF_SetStandby( STDBY_RC );
 80185a2:	2000      	movs	r0, #0
 80185a4:	f000 ff82 	bl	80194ac <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80185a8:	4b32      	ldr	r3, [pc, #200]	@ (8018674 <RadioIrqProcess+0x2b8>)
 80185aa:	681b      	ldr	r3, [r3, #0]
 80185ac:	2b00      	cmp	r3, #0
 80185ae:	f000 8105 	beq.w	80187bc <RadioIrqProcess+0x400>
 80185b2:	4b30      	ldr	r3, [pc, #192]	@ (8018674 <RadioIrqProcess+0x2b8>)
 80185b4:	681b      	ldr	r3, [r3, #0]
 80185b6:	699b      	ldr	r3, [r3, #24]
 80185b8:	2b00      	cmp	r3, #0
 80185ba:	f000 80ff 	beq.w	80187bc <RadioIrqProcess+0x400>
            RadioEvents->CadDone( false );
 80185be:	4b2d      	ldr	r3, [pc, #180]	@ (8018674 <RadioIrqProcess+0x2b8>)
 80185c0:	681b      	ldr	r3, [r3, #0]
 80185c2:	699b      	ldr	r3, [r3, #24]
 80185c4:	2000      	movs	r0, #0
 80185c6:	4798      	blx	r3
        break;
 80185c8:	e0f8      	b.n	80187bc <RadioIrqProcess+0x400>
        SUBGRF_SetStandby( STDBY_RC );
 80185ca:	2000      	movs	r0, #0
 80185cc:	f000 ff6e 	bl	80194ac <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80185d0:	4b28      	ldr	r3, [pc, #160]	@ (8018674 <RadioIrqProcess+0x2b8>)
 80185d2:	681b      	ldr	r3, [r3, #0]
 80185d4:	2b00      	cmp	r3, #0
 80185d6:	f000 80f3 	beq.w	80187c0 <RadioIrqProcess+0x404>
 80185da:	4b26      	ldr	r3, [pc, #152]	@ (8018674 <RadioIrqProcess+0x2b8>)
 80185dc:	681b      	ldr	r3, [r3, #0]
 80185de:	699b      	ldr	r3, [r3, #24]
 80185e0:	2b00      	cmp	r3, #0
 80185e2:	f000 80ed 	beq.w	80187c0 <RadioIrqProcess+0x404>
            RadioEvents->CadDone( true );
 80185e6:	4b23      	ldr	r3, [pc, #140]	@ (8018674 <RadioIrqProcess+0x2b8>)
 80185e8:	681b      	ldr	r3, [r3, #0]
 80185ea:	699b      	ldr	r3, [r3, #24]
 80185ec:	2001      	movs	r0, #1
 80185ee:	4798      	blx	r3
        break;
 80185f0:	e0e6      	b.n	80187c0 <RadioIrqProcess+0x404>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 80185f2:	4b25      	ldr	r3, [pc, #148]	@ (8018688 <RadioIrqProcess+0x2cc>)
 80185f4:	2201      	movs	r2, #1
 80185f6:	2100      	movs	r1, #0
 80185f8:	2002      	movs	r0, #2
 80185fa:	f003 f8eb 	bl	801b7d4 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 80185fe:	f000 fe09 	bl	8019214 <SUBGRF_GetOperatingMode>
 8018602:	4603      	mov	r3, r0
 8018604:	2b04      	cmp	r3, #4
 8018606:	d115      	bne.n	8018634 <RadioIrqProcess+0x278>
            TimerStop( &TxTimeoutTimer );
 8018608:	4819      	ldr	r0, [pc, #100]	@ (8018670 <RadioIrqProcess+0x2b4>)
 801860a:	f002 fed9 	bl	801b3c0 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801860e:	2000      	movs	r0, #0
 8018610:	f000 ff4c 	bl	80194ac <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8018614:	4b17      	ldr	r3, [pc, #92]	@ (8018674 <RadioIrqProcess+0x2b8>)
 8018616:	681b      	ldr	r3, [r3, #0]
 8018618:	2b00      	cmp	r3, #0
 801861a:	f000 80d3 	beq.w	80187c4 <RadioIrqProcess+0x408>
 801861e:	4b15      	ldr	r3, [pc, #84]	@ (8018674 <RadioIrqProcess+0x2b8>)
 8018620:	681b      	ldr	r3, [r3, #0]
 8018622:	685b      	ldr	r3, [r3, #4]
 8018624:	2b00      	cmp	r3, #0
 8018626:	f000 80cd 	beq.w	80187c4 <RadioIrqProcess+0x408>
                RadioEvents->TxTimeout( );
 801862a:	4b12      	ldr	r3, [pc, #72]	@ (8018674 <RadioIrqProcess+0x2b8>)
 801862c:	681b      	ldr	r3, [r3, #0]
 801862e:	685b      	ldr	r3, [r3, #4]
 8018630:	4798      	blx	r3
        break;
 8018632:	e0c7      	b.n	80187c4 <RadioIrqProcess+0x408>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8018634:	f000 fdee 	bl	8019214 <SUBGRF_GetOperatingMode>
 8018638:	4603      	mov	r3, r0
 801863a:	2b05      	cmp	r3, #5
 801863c:	f040 80c2 	bne.w	80187c4 <RadioIrqProcess+0x408>
            TimerStop( &RxTimeoutTimer );
 8018640:	480d      	ldr	r0, [pc, #52]	@ (8018678 <RadioIrqProcess+0x2bc>)
 8018642:	f002 febd 	bl	801b3c0 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8018646:	2000      	movs	r0, #0
 8018648:	f000 ff30 	bl	80194ac <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801864c:	4b09      	ldr	r3, [pc, #36]	@ (8018674 <RadioIrqProcess+0x2b8>)
 801864e:	681b      	ldr	r3, [r3, #0]
 8018650:	2b00      	cmp	r3, #0
 8018652:	f000 80b7 	beq.w	80187c4 <RadioIrqProcess+0x408>
 8018656:	4b07      	ldr	r3, [pc, #28]	@ (8018674 <RadioIrqProcess+0x2b8>)
 8018658:	681b      	ldr	r3, [r3, #0]
 801865a:	68db      	ldr	r3, [r3, #12]
 801865c:	2b00      	cmp	r3, #0
 801865e:	f000 80b1 	beq.w	80187c4 <RadioIrqProcess+0x408>
                RadioEvents->RxTimeout( );
 8018662:	4b04      	ldr	r3, [pc, #16]	@ (8018674 <RadioIrqProcess+0x2b8>)
 8018664:	681b      	ldr	r3, [r3, #0]
 8018666:	68db      	ldr	r3, [r3, #12]
 8018668:	4798      	blx	r3
        break;
 801866a:	e0ab      	b.n	80187c4 <RadioIrqProcess+0x408>
 801866c:	20001cf4 	.word	0x20001cf4
 8018670:	20001d50 	.word	0x20001d50
 8018674:	20001cf0 	.word	0x20001cf0
 8018678:	20001d68 	.word	0x20001d68
 801867c:	20001bf0 	.word	0x20001bf0
 8018680:	20001d18 	.word	0x20001d18
 8018684:	10624dd3 	.word	0x10624dd3
 8018688:	0801f0e0 	.word	0x0801f0e0
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 801868c:	4b54      	ldr	r3, [pc, #336]	@ (80187e0 <RadioIrqProcess+0x424>)
 801868e:	2201      	movs	r2, #1
 8018690:	2100      	movs	r1, #0
 8018692:	2002      	movs	r0, #2
 8018694:	f003 f89e 	bl	801b7d4 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 8018698:	4b52      	ldr	r3, [pc, #328]	@ (80187e4 <RadioIrqProcess+0x428>)
 801869a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801869c:	2b00      	cmp	r3, #0
 801869e:	f000 8093 	beq.w	80187c8 <RadioIrqProcess+0x40c>
          Radio.Write(SUBGHZ_RTCPRDR2, (SubgRf.RxDcPreambleDetectTimeout>>16)&0xFF); /*Update Radio RTC Period MSB*/
 80186a2:	4a51      	ldr	r2, [pc, #324]	@ (80187e8 <RadioIrqProcess+0x42c>)
 80186a4:	4b4f      	ldr	r3, [pc, #316]	@ (80187e4 <RadioIrqProcess+0x428>)
 80186a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80186a8:	0c1b      	lsrs	r3, r3, #16
 80186aa:	b2db      	uxtb	r3, r3
 80186ac:	4619      	mov	r1, r3
 80186ae:	f640 1003 	movw	r0, #2307	@ 0x903
 80186b2:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCPRDR1, (SubgRf.RxDcPreambleDetectTimeout>>8)&0xFF); /*Update Radio RTC Period MidByte*/
 80186b4:	4a4c      	ldr	r2, [pc, #304]	@ (80187e8 <RadioIrqProcess+0x42c>)
 80186b6:	4b4b      	ldr	r3, [pc, #300]	@ (80187e4 <RadioIrqProcess+0x428>)
 80186b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80186ba:	0a1b      	lsrs	r3, r3, #8
 80186bc:	b2db      	uxtb	r3, r3
 80186be:	4619      	mov	r1, r3
 80186c0:	f640 1004 	movw	r0, #2308	@ 0x904
 80186c4:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCPRDR0, (SubgRf.RxDcPreambleDetectTimeout)&0xFF); /*Update Radio RTC Period lsb*/
 80186c6:	4a48      	ldr	r2, [pc, #288]	@ (80187e8 <RadioIrqProcess+0x42c>)
 80186c8:	4b46      	ldr	r3, [pc, #280]	@ (80187e4 <RadioIrqProcess+0x428>)
 80186ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80186cc:	b2db      	uxtb	r3, r3
 80186ce:	4619      	mov	r1, r3
 80186d0:	f640 1005 	movw	r0, #2309	@ 0x905
 80186d4:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCCTLR, Radio.Read(SUBGHZ_RTCCTLR)|0x1); /*restart Radio RTC*/
 80186d6:	4c44      	ldr	r4, [pc, #272]	@ (80187e8 <RadioIrqProcess+0x42c>)
 80186d8:	4b44      	ldr	r3, [pc, #272]	@ (80187ec <RadioIrqProcess+0x430>)
 80186da:	f640 1002 	movw	r0, #2306	@ 0x902
 80186de:	4798      	blx	r3
 80186e0:	4603      	mov	r3, r0
 80186e2:	f043 0301 	orr.w	r3, r3, #1
 80186e6:	b2db      	uxtb	r3, r3
 80186e8:	4619      	mov	r1, r3
 80186ea:	f640 1002 	movw	r0, #2306	@ 0x902
 80186ee:	47a0      	blx	r4
          SubgRf.RxDcPreambleDetectTimeout = 0;
 80186f0:	4b3c      	ldr	r3, [pc, #240]	@ (80187e4 <RadioIrqProcess+0x428>)
 80186f2:	2200      	movs	r2, #0
 80186f4:	659a      	str	r2, [r3, #88]	@ 0x58
          SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80186f6:	2300      	movs	r3, #0
 80186f8:	2200      	movs	r2, #0
 80186fa:	f240 2162 	movw	r1, #610	@ 0x262
 80186fe:	f240 2062 	movw	r0, #610	@ 0x262
 8018702:	f001 f8a9 	bl	8019858 <SUBGRF_SetDioIrqParams>
        break;
 8018706:	e05f      	b.n	80187c8 <RadioIrqProcess+0x40c>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 8018708:	4b39      	ldr	r3, [pc, #228]	@ (80187f0 <RadioIrqProcess+0x434>)
 801870a:	2201      	movs	r2, #1
 801870c:	2100      	movs	r1, #0
 801870e:	2002      	movs	r0, #2
 8018710:	f003 f860 	bl	801b7d4 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 8018714:	f001 ff27 	bl	801a566 <RFW_Is_Init>
 8018718:	4603      	mov	r3, r0
 801871a:	2b01      	cmp	r3, #1
 801871c:	d156      	bne.n	80187cc <RadioIrqProcess+0x410>
            RFW_ReceivePayload( );
 801871e:	f001 ff58 	bl	801a5d2 <RFW_ReceivePayload>
        break;
 8018722:	e053      	b.n	80187cc <RadioIrqProcess+0x410>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 8018724:	4b33      	ldr	r3, [pc, #204]	@ (80187f4 <RadioIrqProcess+0x438>)
 8018726:	2201      	movs	r2, #1
 8018728:	2100      	movs	r1, #0
 801872a:	2002      	movs	r0, #2
 801872c:	f003 f852 	bl	801b7d4 <UTIL_ADV_TRACE_COND_FSend>
        break;
 8018730:	e051      	b.n	80187d6 <RadioIrqProcess+0x41a>
        TimerStop( &RxTimeoutTimer );
 8018732:	4831      	ldr	r0, [pc, #196]	@ (80187f8 <RadioIrqProcess+0x43c>)
 8018734:	f002 fe44 	bl	801b3c0 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8018738:	4b2a      	ldr	r3, [pc, #168]	@ (80187e4 <RadioIrqProcess+0x428>)
 801873a:	785b      	ldrb	r3, [r3, #1]
 801873c:	f083 0301 	eor.w	r3, r3, #1
 8018740:	b2db      	uxtb	r3, r3
 8018742:	2b00      	cmp	r3, #0
 8018744:	d002      	beq.n	801874c <RadioIrqProcess+0x390>
            SUBGRF_SetStandby( STDBY_RC );
 8018746:	2000      	movs	r0, #0
 8018748:	f000 feb0 	bl	80194ac <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801874c:	4b2b      	ldr	r3, [pc, #172]	@ (80187fc <RadioIrqProcess+0x440>)
 801874e:	681b      	ldr	r3, [r3, #0]
 8018750:	2b00      	cmp	r3, #0
 8018752:	d03d      	beq.n	80187d0 <RadioIrqProcess+0x414>
 8018754:	4b29      	ldr	r3, [pc, #164]	@ (80187fc <RadioIrqProcess+0x440>)
 8018756:	681b      	ldr	r3, [r3, #0]
 8018758:	68db      	ldr	r3, [r3, #12]
 801875a:	2b00      	cmp	r3, #0
 801875c:	d038      	beq.n	80187d0 <RadioIrqProcess+0x414>
            RadioEvents->RxTimeout( );
 801875e:	4b27      	ldr	r3, [pc, #156]	@ (80187fc <RadioIrqProcess+0x440>)
 8018760:	681b      	ldr	r3, [r3, #0]
 8018762:	68db      	ldr	r3, [r3, #12]
 8018764:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 8018766:	4b26      	ldr	r3, [pc, #152]	@ (8018800 <RadioIrqProcess+0x444>)
 8018768:	2201      	movs	r2, #1
 801876a:	2100      	movs	r1, #0
 801876c:	2002      	movs	r0, #2
 801876e:	f003 f831 	bl	801b7d4 <UTIL_ADV_TRACE_COND_FSend>
        break;
 8018772:	e02d      	b.n	80187d0 <RadioIrqProcess+0x414>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 8018774:	4b23      	ldr	r3, [pc, #140]	@ (8018804 <RadioIrqProcess+0x448>)
 8018776:	2201      	movs	r2, #1
 8018778:	2100      	movs	r1, #0
 801877a:	2002      	movs	r0, #2
 801877c:	f003 f82a 	bl	801b7d4 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 8018780:	4b18      	ldr	r3, [pc, #96]	@ (80187e4 <RadioIrqProcess+0x428>)
 8018782:	785b      	ldrb	r3, [r3, #1]
 8018784:	f083 0301 	eor.w	r3, r3, #1
 8018788:	b2db      	uxtb	r3, r3
 801878a:	2b00      	cmp	r3, #0
 801878c:	d002      	beq.n	8018794 <RadioIrqProcess+0x3d8>
            SUBGRF_SetStandby( STDBY_RC );
 801878e:	2000      	movs	r0, #0
 8018790:	f000 fe8c 	bl	80194ac <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8018794:	4b19      	ldr	r3, [pc, #100]	@ (80187fc <RadioIrqProcess+0x440>)
 8018796:	681b      	ldr	r3, [r3, #0]
 8018798:	2b00      	cmp	r3, #0
 801879a:	d01b      	beq.n	80187d4 <RadioIrqProcess+0x418>
 801879c:	4b17      	ldr	r3, [pc, #92]	@ (80187fc <RadioIrqProcess+0x440>)
 801879e:	681b      	ldr	r3, [r3, #0]
 80187a0:	691b      	ldr	r3, [r3, #16]
 80187a2:	2b00      	cmp	r3, #0
 80187a4:	d016      	beq.n	80187d4 <RadioIrqProcess+0x418>
            RadioEvents->RxError( );
 80187a6:	4b15      	ldr	r3, [pc, #84]	@ (80187fc <RadioIrqProcess+0x440>)
 80187a8:	681b      	ldr	r3, [r3, #0]
 80187aa:	691b      	ldr	r3, [r3, #16]
 80187ac:	4798      	blx	r3
        break;
 80187ae:	e011      	b.n	80187d4 <RadioIrqProcess+0x418>
        break;
 80187b0:	bf00      	nop
 80187b2:	e010      	b.n	80187d6 <RadioIrqProcess+0x41a>
        break;
 80187b4:	bf00      	nop
 80187b6:	e00e      	b.n	80187d6 <RadioIrqProcess+0x41a>
        break;
 80187b8:	bf00      	nop
 80187ba:	e00c      	b.n	80187d6 <RadioIrqProcess+0x41a>
        break;
 80187bc:	bf00      	nop
 80187be:	e00a      	b.n	80187d6 <RadioIrqProcess+0x41a>
        break;
 80187c0:	bf00      	nop
 80187c2:	e008      	b.n	80187d6 <RadioIrqProcess+0x41a>
        break;
 80187c4:	bf00      	nop
 80187c6:	e006      	b.n	80187d6 <RadioIrqProcess+0x41a>
        break;
 80187c8:	bf00      	nop
 80187ca:	e004      	b.n	80187d6 <RadioIrqProcess+0x41a>
        break;
 80187cc:	bf00      	nop
 80187ce:	e002      	b.n	80187d6 <RadioIrqProcess+0x41a>
        break;
 80187d0:	bf00      	nop
 80187d2:	e000      	b.n	80187d6 <RadioIrqProcess+0x41a>
        break;
 80187d4:	bf00      	nop
    }
}
 80187d6:	bf00      	nop
 80187d8:	3708      	adds	r7, #8
 80187da:	46bd      	mov	sp, r7
 80187dc:	bdb0      	pop	{r4, r5, r7, pc}
 80187de:	bf00      	nop
 80187e0:	0801f0f4 	.word	0x0801f0f4
 80187e4:	20001cf4 	.word	0x20001cf4
 80187e8:	080181cd 	.word	0x080181cd
 80187ec:	080181f1 	.word	0x080181f1
 80187f0:	0801f100 	.word	0x0801f100
 80187f4:	0801f10c 	.word	0x0801f10c
 80187f8:	20001d68 	.word	0x20001d68
 80187fc:	20001cf0 	.word	0x20001cf0
 8018800:	0801f118 	.word	0x0801f118
 8018804:	0801f124 	.word	0x0801f124

08018808 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 8018808:	b580      	push	{r7, lr}
 801880a:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 801880c:	4b09      	ldr	r3, [pc, #36]	@ (8018834 <RadioTxPrbs+0x2c>)
 801880e:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8018812:	2101      	movs	r1, #1
 8018814:	4618      	mov	r0, r3
 8018816:	f001 fcbd 	bl	801a194 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 801881a:	4b07      	ldr	r3, [pc, #28]	@ (8018838 <RadioTxPrbs+0x30>)
 801881c:	212d      	movs	r1, #45	@ 0x2d
 801881e:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 8018822:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 8018824:	f000 ff05 	bl	8019632 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8018828:	4804      	ldr	r0, [pc, #16]	@ (801883c <RadioTxPrbs+0x34>)
 801882a:	f000 fe5b 	bl	80194e4 <SUBGRF_SetTx>
}
 801882e:	bf00      	nop
 8018830:	bd80      	pop	{r7, pc}
 8018832:	bf00      	nop
 8018834:	20001cf4 	.word	0x20001cf4
 8018838:	080181cd 	.word	0x080181cd
 801883c:	000fffff 	.word	0x000fffff

08018840 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 8018840:	b580      	push	{r7, lr}
 8018842:	b084      	sub	sp, #16
 8018844:	af00      	add	r7, sp, #0
 8018846:	4603      	mov	r3, r0
 8018848:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 801884a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801884e:	4618      	mov	r0, r3
 8018850:	f001 fcc8 	bl	801a1e4 <SUBGRF_SetRfTxPower>
 8018854:	4603      	mov	r3, r0
 8018856:	73fb      	strb	r3, [r7, #15]
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8018858:	7bfb      	ldrb	r3, [r7, #15]
 801885a:	2101      	movs	r1, #1
 801885c:	4618      	mov	r0, r3
 801885e:	f001 fc99 	bl	801a194 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8018862:	f000 fedd 	bl	8019620 <SUBGRF_SetTxContinuousWave>
}
 8018866:	bf00      	nop
 8018868:	3710      	adds	r7, #16
 801886a:	46bd      	mov	sp, r7
 801886c:	bd80      	pop	{r7, pc}

0801886e <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 801886e:	b480      	push	{r7}
 8018870:	b089      	sub	sp, #36	@ 0x24
 8018872:	af00      	add	r7, sp, #0
 8018874:	60f8      	str	r0, [r7, #12]
 8018876:	60b9      	str	r1, [r7, #8]
 8018878:	4613      	mov	r3, r2
 801887a:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 801887c:	2300      	movs	r3, #0
 801887e:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 8018880:	2300      	movs	r3, #0
 8018882:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 8018884:	2300      	movs	r3, #0
 8018886:	61bb      	str	r3, [r7, #24]
 8018888:	e011      	b.n	80188ae <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 801888a:	69bb      	ldr	r3, [r7, #24]
 801888c:	68ba      	ldr	r2, [r7, #8]
 801888e:	4413      	add	r3, r2
 8018890:	781a      	ldrb	r2, [r3, #0]
 8018892:	69bb      	ldr	r3, [r7, #24]
 8018894:	68b9      	ldr	r1, [r7, #8]
 8018896:	440b      	add	r3, r1
 8018898:	43d2      	mvns	r2, r2
 801889a:	b2d2      	uxtb	r2, r2
 801889c:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 801889e:	69bb      	ldr	r3, [r7, #24]
 80188a0:	68fa      	ldr	r2, [r7, #12]
 80188a2:	4413      	add	r3, r2
 80188a4:	2200      	movs	r2, #0
 80188a6:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 80188a8:	69bb      	ldr	r3, [r7, #24]
 80188aa:	3301      	adds	r3, #1
 80188ac:	61bb      	str	r3, [r7, #24]
 80188ae:	79fb      	ldrb	r3, [r7, #7]
 80188b0:	69ba      	ldr	r2, [r7, #24]
 80188b2:	429a      	cmp	r2, r3
 80188b4:	dbe9      	blt.n	801888a <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 80188b6:	2300      	movs	r3, #0
 80188b8:	61bb      	str	r3, [r7, #24]
 80188ba:	e049      	b.n	8018950 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 80188bc:	69bb      	ldr	r3, [r7, #24]
 80188be:	425a      	negs	r2, r3
 80188c0:	f003 0307 	and.w	r3, r3, #7
 80188c4:	f002 0207 	and.w	r2, r2, #7
 80188c8:	bf58      	it	pl
 80188ca:	4253      	negpl	r3, r2
 80188cc:	b2db      	uxtb	r3, r3
 80188ce:	f1c3 0307 	rsb	r3, r3, #7
 80188d2:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 80188d4:	69bb      	ldr	r3, [r7, #24]
 80188d6:	2b00      	cmp	r3, #0
 80188d8:	da00      	bge.n	80188dc <payload_integration+0x6e>
 80188da:	3307      	adds	r3, #7
 80188dc:	10db      	asrs	r3, r3, #3
 80188de:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 80188e0:	69bb      	ldr	r3, [r7, #24]
 80188e2:	3301      	adds	r3, #1
 80188e4:	425a      	negs	r2, r3
 80188e6:	f003 0307 	and.w	r3, r3, #7
 80188ea:	f002 0207 	and.w	r2, r2, #7
 80188ee:	bf58      	it	pl
 80188f0:	4253      	negpl	r3, r2
 80188f2:	b2db      	uxtb	r3, r3
 80188f4:	f1c3 0307 	rsb	r3, r3, #7
 80188f8:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 80188fa:	69bb      	ldr	r3, [r7, #24]
 80188fc:	3301      	adds	r3, #1
 80188fe:	2b00      	cmp	r3, #0
 8018900:	da00      	bge.n	8018904 <payload_integration+0x96>
 8018902:	3307      	adds	r3, #7
 8018904:	10db      	asrs	r3, r3, #3
 8018906:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 8018908:	7dbb      	ldrb	r3, [r7, #22]
 801890a:	68ba      	ldr	r2, [r7, #8]
 801890c:	4413      	add	r3, r2
 801890e:	781b      	ldrb	r3, [r3, #0]
 8018910:	461a      	mov	r2, r3
 8018912:	7dfb      	ldrb	r3, [r7, #23]
 8018914:	fa42 f303 	asr.w	r3, r2, r3
 8018918:	b2db      	uxtb	r3, r3
 801891a:	f003 0301 	and.w	r3, r3, #1
 801891e:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 8018920:	7ffa      	ldrb	r2, [r7, #31]
 8018922:	7cfb      	ldrb	r3, [r7, #19]
 8018924:	4053      	eors	r3, r2
 8018926:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 8018928:	7d3b      	ldrb	r3, [r7, #20]
 801892a:	68fa      	ldr	r2, [r7, #12]
 801892c:	4413      	add	r3, r2
 801892e:	781b      	ldrb	r3, [r3, #0]
 8018930:	b25a      	sxtb	r2, r3
 8018932:	7ff9      	ldrb	r1, [r7, #31]
 8018934:	7d7b      	ldrb	r3, [r7, #21]
 8018936:	fa01 f303 	lsl.w	r3, r1, r3
 801893a:	b25b      	sxtb	r3, r3
 801893c:	4313      	orrs	r3, r2
 801893e:	b259      	sxtb	r1, r3
 8018940:	7d3b      	ldrb	r3, [r7, #20]
 8018942:	68fa      	ldr	r2, [r7, #12]
 8018944:	4413      	add	r3, r2
 8018946:	b2ca      	uxtb	r2, r1
 8018948:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 801894a:	69bb      	ldr	r3, [r7, #24]
 801894c:	3301      	adds	r3, #1
 801894e:	61bb      	str	r3, [r7, #24]
 8018950:	79fb      	ldrb	r3, [r7, #7]
 8018952:	00db      	lsls	r3, r3, #3
 8018954:	69ba      	ldr	r2, [r7, #24]
 8018956:	429a      	cmp	r2, r3
 8018958:	dbb0      	blt.n	80188bc <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 801895a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801895e:	01db      	lsls	r3, r3, #7
 8018960:	b25a      	sxtb	r2, r3
 8018962:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8018966:	019b      	lsls	r3, r3, #6
 8018968:	b25b      	sxtb	r3, r3
 801896a:	4313      	orrs	r3, r2
 801896c:	b25b      	sxtb	r3, r3
 801896e:	7ffa      	ldrb	r2, [r7, #31]
 8018970:	2a00      	cmp	r2, #0
 8018972:	d101      	bne.n	8018978 <payload_integration+0x10a>
 8018974:	2220      	movs	r2, #32
 8018976:	e000      	b.n	801897a <payload_integration+0x10c>
 8018978:	2200      	movs	r2, #0
 801897a:	4313      	orrs	r3, r2
 801897c:	b259      	sxtb	r1, r3
 801897e:	79fb      	ldrb	r3, [r7, #7]
 8018980:	68fa      	ldr	r2, [r7, #12]
 8018982:	4413      	add	r3, r2
 8018984:	b2ca      	uxtb	r2, r1
 8018986:	701a      	strb	r2, [r3, #0]
}
 8018988:	bf00      	nop
 801898a:	3724      	adds	r7, #36	@ 0x24
 801898c:	46bd      	mov	sp, r7
 801898e:	bc80      	pop	{r7}
 8018990:	4770      	bx	lr
	...

08018994 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t* config, uint32_t rxContinuous, uint32_t symbTimeout )
{
 8018994:	b580      	push	{r7, lr}
 8018996:	b08c      	sub	sp, #48	@ 0x30
 8018998:	af00      	add	r7, sp, #0
 801899a:	60b9      	str	r1, [r7, #8]
 801899c:	607a      	str	r2, [r7, #4]
 801899e:	603b      	str	r3, [r7, #0]
 80189a0:	4603      	mov	r3, r0
 80189a2:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 80189a4:	2300      	movs	r3, #0
 80189a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint8_t syncword[8] = {0};
 80189a8:	f107 0320 	add.w	r3, r7, #32
 80189ac:	2200      	movs	r2, #0
 80189ae:	601a      	str	r2, [r3, #0]
 80189b0:	605a      	str	r2, [r3, #4]
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 80189b2:	f001 fdd2 	bl	801a55a <RFW_DeInit>

    if( rxContinuous != 0 )
 80189b6:	687b      	ldr	r3, [r7, #4]
 80189b8:	2b00      	cmp	r3, #0
 80189ba:	d001      	beq.n	80189c0 <RadioSetRxGenericConfig+0x2c>
    {
        symbTimeout = 0;
 80189bc:	2300      	movs	r3, #0
 80189be:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 80189c0:	687b      	ldr	r3, [r7, #4]
 80189c2:	2b00      	cmp	r3, #0
 80189c4:	bf14      	ite	ne
 80189c6:	2301      	movne	r3, #1
 80189c8:	2300      	moveq	r3, #0
 80189ca:	b2da      	uxtb	r2, r3
 80189cc:	4ba3      	ldr	r3, [pc, #652]	@ (8018c5c <RadioSetRxGenericConfig+0x2c8>)
 80189ce:	705a      	strb	r2, [r3, #1]

    switch( modem )
 80189d0:	7bfb      	ldrb	r3, [r7, #15]
 80189d2:	2b00      	cmp	r3, #0
 80189d4:	d003      	beq.n	80189de <RadioSetRxGenericConfig+0x4a>
 80189d6:	2b01      	cmp	r3, #1
 80189d8:	f000 80dc 	beq.w	8018b94 <RadioSetRxGenericConfig+0x200>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 80189dc:	e195      	b.n	8018d0a <RadioSetRxGenericConfig+0x376>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 80189de:	68bb      	ldr	r3, [r7, #8]
 80189e0:	689b      	ldr	r3, [r3, #8]
 80189e2:	2b00      	cmp	r3, #0
 80189e4:	d003      	beq.n	80189ee <RadioSetRxGenericConfig+0x5a>
 80189e6:	68bb      	ldr	r3, [r7, #8]
 80189e8:	68db      	ldr	r3, [r3, #12]
 80189ea:	2b00      	cmp	r3, #0
 80189ec:	d102      	bne.n	80189f4 <RadioSetRxGenericConfig+0x60>
            return -1;
 80189ee:	f04f 33ff 	mov.w	r3, #4294967295
 80189f2:	e18b      	b.n	8018d0c <RadioSetRxGenericConfig+0x378>
        if( config->fsk.SyncWordLength > 8 )
 80189f4:	68bb      	ldr	r3, [r7, #8]
 80189f6:	7f9b      	ldrb	r3, [r3, #30]
 80189f8:	2b08      	cmp	r3, #8
 80189fa:	d902      	bls.n	8018a02 <RadioSetRxGenericConfig+0x6e>
            return -1;
 80189fc:	f04f 33ff 	mov.w	r3, #4294967295
 8018a00:	e184      	b.n	8018d0c <RadioSetRxGenericConfig+0x378>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8018a02:	68bb      	ldr	r3, [r7, #8]
 8018a04:	6919      	ldr	r1, [r3, #16]
 8018a06:	68bb      	ldr	r3, [r7, #8]
 8018a08:	7f9b      	ldrb	r3, [r3, #30]
 8018a0a:	461a      	mov	r2, r3
 8018a0c:	f107 0320 	add.w	r3, r7, #32
 8018a10:	4618      	mov	r0, r3
 8018a12:	f001 fe95 	bl	801a740 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8018a16:	68bb      	ldr	r3, [r7, #8]
 8018a18:	681b      	ldr	r3, [r3, #0]
 8018a1a:	2b00      	cmp	r3, #0
 8018a1c:	bf14      	ite	ne
 8018a1e:	2301      	movne	r3, #1
 8018a20:	2300      	moveq	r3, #0
 8018a22:	b2db      	uxtb	r3, r3
 8018a24:	4618      	mov	r0, r3
 8018a26:	f000 fe0d 	bl	8019644 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8018a2a:	4b8c      	ldr	r3, [pc, #560]	@ (8018c5c <RadioSetRxGenericConfig+0x2c8>)
 8018a2c:	2200      	movs	r2, #0
 8018a2e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8018a32:	68bb      	ldr	r3, [r7, #8]
 8018a34:	689b      	ldr	r3, [r3, #8]
 8018a36:	4a89      	ldr	r2, [pc, #548]	@ (8018c5c <RadioSetRxGenericConfig+0x2c8>)
 8018a38:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 8018a3a:	68bb      	ldr	r3, [r7, #8]
 8018a3c:	f893 2020 	ldrb.w	r2, [r3, #32]
 8018a40:	4b86      	ldr	r3, [pc, #536]	@ (8018c5c <RadioSetRxGenericConfig+0x2c8>)
 8018a42:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8018a46:	68bb      	ldr	r3, [r7, #8]
 8018a48:	685b      	ldr	r3, [r3, #4]
 8018a4a:	4618      	mov	r0, r3
 8018a4c:	f001 fcb8 	bl	801a3c0 <SUBGRF_GetFskBandwidthRegValue>
 8018a50:	4603      	mov	r3, r0
 8018a52:	461a      	mov	r2, r3
 8018a54:	4b81      	ldr	r3, [pc, #516]	@ (8018c5c <RadioSetRxGenericConfig+0x2c8>)
 8018a56:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8018a5a:	4b80      	ldr	r3, [pc, #512]	@ (8018c5c <RadioSetRxGenericConfig+0x2c8>)
 8018a5c:	2200      	movs	r2, #0
 8018a5e:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 8018a60:	68bb      	ldr	r3, [r7, #8]
 8018a62:	68db      	ldr	r3, [r3, #12]
 8018a64:	b29b      	uxth	r3, r3
 8018a66:	00db      	lsls	r3, r3, #3
 8018a68:	b29a      	uxth	r2, r3
 8018a6a:	4b7c      	ldr	r3, [pc, #496]	@ (8018c5c <RadioSetRxGenericConfig+0x2c8>)
 8018a6c:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 8018a6e:	68bb      	ldr	r3, [r7, #8]
 8018a70:	7fda      	ldrb	r2, [r3, #31]
 8018a72:	4b7a      	ldr	r3, [pc, #488]	@ (8018c5c <RadioSetRxGenericConfig+0x2c8>)
 8018a74:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8018a76:	68bb      	ldr	r3, [r7, #8]
 8018a78:	7f9b      	ldrb	r3, [r3, #30]
 8018a7a:	00db      	lsls	r3, r3, #3
 8018a7c:	b2da      	uxtb	r2, r3
 8018a7e:	4b77      	ldr	r3, [pc, #476]	@ (8018c5c <RadioSetRxGenericConfig+0x2c8>)
 8018a80:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 8018a82:	68bb      	ldr	r3, [r7, #8]
 8018a84:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8018a88:	4b74      	ldr	r3, [pc, #464]	@ (8018c5c <RadioSetRxGenericConfig+0x2c8>)
 8018a8a:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 8018a8c:	68bb      	ldr	r3, [r7, #8]
 8018a8e:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8018a92:	2b00      	cmp	r3, #0
 8018a94:	d105      	bne.n	8018aa2 <RadioSetRxGenericConfig+0x10e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 8018a96:	68bb      	ldr	r3, [r7, #8]
 8018a98:	695b      	ldr	r3, [r3, #20]
 8018a9a:	b2da      	uxtb	r2, r3
 8018a9c:	4b6f      	ldr	r3, [pc, #444]	@ (8018c5c <RadioSetRxGenericConfig+0x2c8>)
 8018a9e:	759a      	strb	r2, [r3, #22]
 8018aa0:	e00b      	b.n	8018aba <RadioSetRxGenericConfig+0x126>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 8018aa2:	68bb      	ldr	r3, [r7, #8]
 8018aa4:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8018aa8:	2b02      	cmp	r3, #2
 8018aaa:	d103      	bne.n	8018ab4 <RadioSetRxGenericConfig+0x120>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8018aac:	4b6b      	ldr	r3, [pc, #428]	@ (8018c5c <RadioSetRxGenericConfig+0x2c8>)
 8018aae:	22ff      	movs	r2, #255	@ 0xff
 8018ab0:	759a      	strb	r2, [r3, #22]
 8018ab2:	e002      	b.n	8018aba <RadioSetRxGenericConfig+0x126>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8018ab4:	4b69      	ldr	r3, [pc, #420]	@ (8018c5c <RadioSetRxGenericConfig+0x2c8>)
 8018ab6:	22ff      	movs	r2, #255	@ 0xff
 8018ab8:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8018aba:	68bb      	ldr	r3, [r7, #8]
 8018abc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8018ac0:	2b02      	cmp	r3, #2
 8018ac2:	d004      	beq.n	8018ace <RadioSetRxGenericConfig+0x13a>
 8018ac4:	68bb      	ldr	r3, [r7, #8]
 8018ac6:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8018aca:	2b02      	cmp	r3, #2
 8018acc:	d12d      	bne.n	8018b2a <RadioSetRxGenericConfig+0x196>
          if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8018ace:	68bb      	ldr	r3, [r7, #8]
 8018ad0:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8018ad4:	2bf1      	cmp	r3, #241	@ 0xf1
 8018ad6:	d00c      	beq.n	8018af2 <RadioSetRxGenericConfig+0x15e>
 8018ad8:	68bb      	ldr	r3, [r7, #8]
 8018ada:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8018ade:	2bf2      	cmp	r3, #242	@ 0xf2
 8018ae0:	d007      	beq.n	8018af2 <RadioSetRxGenericConfig+0x15e>
 8018ae2:	68bb      	ldr	r3, [r7, #8]
 8018ae4:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8018ae8:	2b01      	cmp	r3, #1
 8018aea:	d002      	beq.n	8018af2 <RadioSetRxGenericConfig+0x15e>
            return -1;
 8018aec:	f04f 33ff 	mov.w	r3, #4294967295
 8018af0:	e10c      	b.n	8018d0c <RadioSetRxGenericConfig+0x378>
          ConfigGeneric.rtx = CONFIG_RX;
 8018af2:	2300      	movs	r3, #0
 8018af4:	773b      	strb	r3, [r7, #28]
          ConfigGeneric.RxConfig = config;
 8018af6:	68bb      	ldr	r3, [r7, #8]
 8018af8:	61bb      	str	r3, [r7, #24]
          if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 8018afa:	4b59      	ldr	r3, [pc, #356]	@ (8018c60 <RadioSetRxGenericConfig+0x2cc>)
 8018afc:	6819      	ldr	r1, [r3, #0]
 8018afe:	f107 0314 	add.w	r3, r7, #20
 8018b02:	4a58      	ldr	r2, [pc, #352]	@ (8018c64 <RadioSetRxGenericConfig+0x2d0>)
 8018b04:	4618      	mov	r0, r3
 8018b06:	f001 fd1b 	bl	801a540 <RFW_Init>
 8018b0a:	4603      	mov	r3, r0
 8018b0c:	2b00      	cmp	r3, #0
 8018b0e:	d002      	beq.n	8018b16 <RadioSetRxGenericConfig+0x182>
            return -1;
 8018b10:	f04f 33ff 	mov.w	r3, #4294967295
 8018b14:	e0fa      	b.n	8018d0c <RadioSetRxGenericConfig+0x378>
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8018b16:	4b51      	ldr	r3, [pc, #324]	@ (8018c5c <RadioSetRxGenericConfig+0x2c8>)
 8018b18:	2200      	movs	r2, #0
 8018b1a:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8018b1c:	4b4f      	ldr	r3, [pc, #316]	@ (8018c5c <RadioSetRxGenericConfig+0x2c8>)
 8018b1e:	2201      	movs	r2, #1
 8018b20:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8018b22:	4b4e      	ldr	r3, [pc, #312]	@ (8018c5c <RadioSetRxGenericConfig+0x2c8>)
 8018b24:	2200      	movs	r2, #0
 8018b26:	755a      	strb	r2, [r3, #21]
        {
 8018b28:	e00e      	b.n	8018b48 <RadioSetRxGenericConfig+0x1b4>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8018b2a:	68bb      	ldr	r3, [r7, #8]
 8018b2c:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 8018b30:	4b4a      	ldr	r3, [pc, #296]	@ (8018c5c <RadioSetRxGenericConfig+0x2c8>)
 8018b32:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8018b34:	68bb      	ldr	r3, [r7, #8]
 8018b36:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 8018b3a:	4b48      	ldr	r3, [pc, #288]	@ (8018c5c <RadioSetRxGenericConfig+0x2c8>)
 8018b3c:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 8018b3e:	68bb      	ldr	r3, [r7, #8]
 8018b40:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8018b44:	4b45      	ldr	r3, [pc, #276]	@ (8018c5c <RadioSetRxGenericConfig+0x2c8>)
 8018b46:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8018b48:	f7ff fa45 	bl	8017fd6 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8018b4c:	2000      	movs	r0, #0
 8018b4e:	f7fe fbef 	bl	8017330 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018b52:	4845      	ldr	r0, [pc, #276]	@ (8018c68 <RadioSetRxGenericConfig+0x2d4>)
 8018b54:	f001 f816 	bl	8019b84 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018b58:	4844      	ldr	r0, [pc, #272]	@ (8018c6c <RadioSetRxGenericConfig+0x2d8>)
 8018b5a:	f001 f8e1 	bl	8019d20 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8018b5e:	f107 0320 	add.w	r3, r7, #32
 8018b62:	4618      	mov	r0, r3
 8018b64:	f000 fba5 	bl	80192b2 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8018b68:	68bb      	ldr	r3, [r7, #8]
 8018b6a:	8b9b      	ldrh	r3, [r3, #28]
 8018b6c:	4618      	mov	r0, r3
 8018b6e:	f000 fbef 	bl	8019350 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8018b72:	68bb      	ldr	r3, [r7, #8]
 8018b74:	8b1b      	ldrh	r3, [r3, #24]
 8018b76:	4618      	mov	r0, r3
 8018b78:	f000 fbca 	bl	8019310 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 8018b7c:	683b      	ldr	r3, [r7, #0]
 8018b7e:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8018b82:	fb03 f202 	mul.w	r2, r3, r2
 8018b86:	68bb      	ldr	r3, [r7, #8]
 8018b88:	689b      	ldr	r3, [r3, #8]
 8018b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8018b8e:	4a33      	ldr	r2, [pc, #204]	@ (8018c5c <RadioSetRxGenericConfig+0x2c8>)
 8018b90:	6093      	str	r3, [r2, #8]
        break;
 8018b92:	e0ba      	b.n	8018d0a <RadioSetRxGenericConfig+0x376>
        if( config->lora.PreambleLen == 0 )
 8018b94:	68bb      	ldr	r3, [r7, #8]
 8018b96:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8018b98:	2b00      	cmp	r3, #0
 8018b9a:	d102      	bne.n	8018ba2 <RadioSetRxGenericConfig+0x20e>
            return -1;
 8018b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8018ba0:	e0b4      	b.n	8018d0c <RadioSetRxGenericConfig+0x378>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 8018ba2:	68bb      	ldr	r3, [r7, #8]
 8018ba4:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8018ba8:	2b01      	cmp	r3, #1
 8018baa:	d104      	bne.n	8018bb6 <RadioSetRxGenericConfig+0x222>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 8018bac:	68bb      	ldr	r3, [r7, #8]
 8018bae:	695b      	ldr	r3, [r3, #20]
 8018bb0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8018bb4:	e002      	b.n	8018bbc <RadioSetRxGenericConfig+0x228>
            MaxPayloadLength = 0xFF;
 8018bb6:	23ff      	movs	r3, #255	@ 0xff
 8018bb8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8018bbc:	68bb      	ldr	r3, [r7, #8]
 8018bbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018bc0:	2b00      	cmp	r3, #0
 8018bc2:	bf14      	ite	ne
 8018bc4:	2301      	movne	r3, #1
 8018bc6:	2300      	moveq	r3, #0
 8018bc8:	b2db      	uxtb	r3, r3
 8018bca:	4618      	mov	r0, r3
 8018bcc:	f000 fd3a 	bl	8019644 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8018bd0:	683b      	ldr	r3, [r7, #0]
 8018bd2:	b2db      	uxtb	r3, r3
 8018bd4:	4618      	mov	r0, r3
 8018bd6:	f000 fd44 	bl	8019662 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8018bda:	4b20      	ldr	r3, [pc, #128]	@ (8018c5c <RadioSetRxGenericConfig+0x2c8>)
 8018bdc:	2201      	movs	r2, #1
 8018bde:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8018be2:	68bb      	ldr	r3, [r7, #8]
 8018be4:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8018be8:	4b1c      	ldr	r3, [pc, #112]	@ (8018c5c <RadioSetRxGenericConfig+0x2c8>)
 8018bea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8018bee:	68bb      	ldr	r3, [r7, #8]
 8018bf0:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 8018bf4:	4b19      	ldr	r3, [pc, #100]	@ (8018c5c <RadioSetRxGenericConfig+0x2c8>)
 8018bf6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8018bfa:	68bb      	ldr	r3, [r7, #8]
 8018bfc:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 8018c00:	4b16      	ldr	r3, [pc, #88]	@ (8018c5c <RadioSetRxGenericConfig+0x2c8>)
 8018c02:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 8018c06:	68bb      	ldr	r3, [r7, #8]
 8018c08:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8018c0c:	2b02      	cmp	r3, #2
 8018c0e:	d010      	beq.n	8018c32 <RadioSetRxGenericConfig+0x29e>
 8018c10:	2b02      	cmp	r3, #2
 8018c12:	dc2d      	bgt.n	8018c70 <RadioSetRxGenericConfig+0x2dc>
 8018c14:	2b00      	cmp	r3, #0
 8018c16:	d002      	beq.n	8018c1e <RadioSetRxGenericConfig+0x28a>
 8018c18:	2b01      	cmp	r3, #1
 8018c1a:	d005      	beq.n	8018c28 <RadioSetRxGenericConfig+0x294>
            break;
 8018c1c:	e028      	b.n	8018c70 <RadioSetRxGenericConfig+0x2dc>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8018c1e:	4b0f      	ldr	r3, [pc, #60]	@ (8018c5c <RadioSetRxGenericConfig+0x2c8>)
 8018c20:	2200      	movs	r2, #0
 8018c22:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8018c26:	e024      	b.n	8018c72 <RadioSetRxGenericConfig+0x2de>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8018c28:	4b0c      	ldr	r3, [pc, #48]	@ (8018c5c <RadioSetRxGenericConfig+0x2c8>)
 8018c2a:	2201      	movs	r2, #1
 8018c2c:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8018c30:	e01f      	b.n	8018c72 <RadioSetRxGenericConfig+0x2de>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8018c32:	68bb      	ldr	r3, [r7, #8]
 8018c34:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8018c38:	2b0b      	cmp	r3, #11
 8018c3a:	d004      	beq.n	8018c46 <RadioSetRxGenericConfig+0x2b2>
 8018c3c:	68bb      	ldr	r3, [r7, #8]
 8018c3e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8018c42:	2b0c      	cmp	r3, #12
 8018c44:	d104      	bne.n	8018c50 <RadioSetRxGenericConfig+0x2bc>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8018c46:	4b05      	ldr	r3, [pc, #20]	@ (8018c5c <RadioSetRxGenericConfig+0x2c8>)
 8018c48:	2201      	movs	r2, #1
 8018c4a:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8018c4e:	e010      	b.n	8018c72 <RadioSetRxGenericConfig+0x2de>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8018c50:	4b02      	ldr	r3, [pc, #8]	@ (8018c5c <RadioSetRxGenericConfig+0x2c8>)
 8018c52:	2200      	movs	r2, #0
 8018c54:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8018c58:	e00b      	b.n	8018c72 <RadioSetRxGenericConfig+0x2de>
 8018c5a:	bf00      	nop
 8018c5c:	20001cf4 	.word	0x20001cf4
 8018c60:	20001cf0 	.word	0x20001cf0
 8018c64:	20001d68 	.word	0x20001d68
 8018c68:	20001d2c 	.word	0x20001d2c
 8018c6c:	20001d02 	.word	0x20001d02
            break;
 8018c70:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8018c72:	4b28      	ldr	r3, [pc, #160]	@ (8018d14 <RadioSetRxGenericConfig+0x380>)
 8018c74:	2201      	movs	r2, #1
 8018c76:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8018c78:	68bb      	ldr	r3, [r7, #8]
 8018c7a:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 8018c7c:	4b25      	ldr	r3, [pc, #148]	@ (8018d14 <RadioSetRxGenericConfig+0x380>)
 8018c7e:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8018c80:	68bb      	ldr	r3, [r7, #8]
 8018c82:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 8018c86:	4b23      	ldr	r3, [pc, #140]	@ (8018d14 <RadioSetRxGenericConfig+0x380>)
 8018c88:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8018c8a:	4a22      	ldr	r2, [pc, #136]	@ (8018d14 <RadioSetRxGenericConfig+0x380>)
 8018c8c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8018c90:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8018c92:	68bb      	ldr	r3, [r7, #8]
 8018c94:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 8018c98:	4b1e      	ldr	r3, [pc, #120]	@ (8018d14 <RadioSetRxGenericConfig+0x380>)
 8018c9a:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8018c9e:	68bb      	ldr	r3, [r7, #8]
 8018ca0:	f893 2035 	ldrb.w	r2, [r3, #53]	@ 0x35
 8018ca4:	4b1b      	ldr	r3, [pc, #108]	@ (8018d14 <RadioSetRxGenericConfig+0x380>)
 8018ca6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        RadioStandby( );
 8018caa:	f7ff f994 	bl	8017fd6 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8018cae:	2001      	movs	r0, #1
 8018cb0:	f7fe fb3e 	bl	8017330 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018cb4:	4818      	ldr	r0, [pc, #96]	@ (8018d18 <RadioSetRxGenericConfig+0x384>)
 8018cb6:	f000 ff65 	bl	8019b84 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018cba:	4818      	ldr	r0, [pc, #96]	@ (8018d1c <RadioSetRxGenericConfig+0x388>)
 8018cbc:	f001 f830 	bl	8019d20 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8018cc0:	4b14      	ldr	r3, [pc, #80]	@ (8018d14 <RadioSetRxGenericConfig+0x380>)
 8018cc2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8018cc6:	2b01      	cmp	r3, #1
 8018cc8:	d10d      	bne.n	8018ce6 <RadioSetRxGenericConfig+0x352>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8018cca:	f240 7036 	movw	r0, #1846	@ 0x736
 8018cce:	f001 f981 	bl	8019fd4 <SUBGRF_ReadRegister>
 8018cd2:	4603      	mov	r3, r0
 8018cd4:	f023 0304 	bic.w	r3, r3, #4
 8018cd8:	b2db      	uxtb	r3, r3
 8018cda:	4619      	mov	r1, r3
 8018cdc:	f240 7036 	movw	r0, #1846	@ 0x736
 8018ce0:	f001 f964 	bl	8019fac <SUBGRF_WriteRegister>
 8018ce4:	e00c      	b.n	8018d00 <RadioSetRxGenericConfig+0x36c>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8018ce6:	f240 7036 	movw	r0, #1846	@ 0x736
 8018cea:	f001 f973 	bl	8019fd4 <SUBGRF_ReadRegister>
 8018cee:	4603      	mov	r3, r0
 8018cf0:	f043 0304 	orr.w	r3, r3, #4
 8018cf4:	b2db      	uxtb	r3, r3
 8018cf6:	4619      	mov	r1, r3
 8018cf8:	f240 7036 	movw	r0, #1846	@ 0x736
 8018cfc:	f001 f956 	bl	8019fac <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 8018d00:	4b04      	ldr	r3, [pc, #16]	@ (8018d14 <RadioSetRxGenericConfig+0x380>)
 8018d02:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018d06:	609a      	str	r2, [r3, #8]
        break;
 8018d08:	bf00      	nop
    }
    return status;
 8018d0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8018d0c:	4618      	mov	r0, r3
 8018d0e:	3730      	adds	r7, #48	@ 0x30
 8018d10:	46bd      	mov	sp, r7
 8018d12:	bd80      	pop	{r7, pc}
 8018d14:	20001cf4 	.word	0x20001cf4
 8018d18:	20001d2c 	.word	0x20001d2c
 8018d1c:	20001d02 	.word	0x20001d02

08018d20 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 8018d20:	b580      	push	{r7, lr}
 8018d22:	b08e      	sub	sp, #56	@ 0x38
 8018d24:	af00      	add	r7, sp, #0
 8018d26:	60b9      	str	r1, [r7, #8]
 8018d28:	607b      	str	r3, [r7, #4]
 8018d2a:	4603      	mov	r3, r0
 8018d2c:	73fb      	strb	r3, [r7, #15]
 8018d2e:	4613      	mov	r3, r2
 8018d30:	73bb      	strb	r3, [r7, #14]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 8018d32:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8018d36:	2200      	movs	r2, #0
 8018d38:	601a      	str	r2, [r3, #0]
 8018d3a:	605a      	str	r2, [r3, #4]
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8018d3c:	f001 fc0d 	bl	801a55a <RFW_DeInit>
    switch( modem )
 8018d40:	7bfb      	ldrb	r3, [r7, #15]
 8018d42:	2b03      	cmp	r3, #3
 8018d44:	f200 8205 	bhi.w	8019152 <RadioSetTxGenericConfig+0x432>
 8018d48:	a201      	add	r2, pc, #4	@ (adr r2, 8018d50 <RadioSetTxGenericConfig+0x30>)
 8018d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018d4e:	bf00      	nop
 8018d50:	08018ed5 	.word	0x08018ed5
 8018d54:	0801901d 	.word	0x0801901d
 8018d58:	08019115 	.word	0x08019115
 8018d5c:	08018d61 	.word	0x08018d61
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 8018d60:	68bb      	ldr	r3, [r7, #8]
 8018d62:	7c9b      	ldrb	r3, [r3, #18]
 8018d64:	2b08      	cmp	r3, #8
 8018d66:	d902      	bls.n	8018d6e <RadioSetTxGenericConfig+0x4e>
        {
            return -1;
 8018d68:	f04f 33ff 	mov.w	r3, #4294967295
 8018d6c:	e206      	b.n	801917c <RadioSetTxGenericConfig+0x45c>
        }
        else
        {
          RADIO_MEMCPY8(syncword, config->msk.SyncWord, config->msk.SyncWordLength);
 8018d6e:	68bb      	ldr	r3, [r7, #8]
 8018d70:	6899      	ldr	r1, [r3, #8]
 8018d72:	68bb      	ldr	r3, [r7, #8]
 8018d74:	7c9b      	ldrb	r3, [r3, #18]
 8018d76:	461a      	mov	r2, r3
 8018d78:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8018d7c:	4618      	mov	r0, r3
 8018d7e:	f001 fcdf 	bl	801a740 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 8018d82:	68bb      	ldr	r3, [r7, #8]
 8018d84:	681b      	ldr	r3, [r3, #0]
 8018d86:	2b00      	cmp	r3, #0
 8018d88:	d102      	bne.n	8018d90 <RadioSetTxGenericConfig+0x70>
        {
            return -1;
 8018d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8018d8e:	e1f5      	b.n	801917c <RadioSetTxGenericConfig+0x45c>
        }
        else if (config->msk.BitRate<= 10000)
 8018d90:	68bb      	ldr	r3, [r7, #8]
 8018d92:	681b      	ldr	r3, [r3, #0]
 8018d94:	f242 7210 	movw	r2, #10000	@ 0x2710
 8018d98:	4293      	cmp	r3, r2
 8018d9a:	d813      	bhi.n	8018dc4 <RadioSetTxGenericConfig+0xa4>
        {
          /*max msk modulator datarate is 10kbps*/
          radio_modem= MODEM_MSK;
 8018d9c:	2302      	movs	r3, #2
 8018d9e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
          SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 8018da2:	4b99      	ldr	r3, [pc, #612]	@ (8019008 <RadioSetTxGenericConfig+0x2e8>)
 8018da4:	2203      	movs	r2, #3
 8018da6:	739a      	strb	r2, [r3, #14]
          SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 8018da8:	4b97      	ldr	r3, [pc, #604]	@ (8019008 <RadioSetTxGenericConfig+0x2e8>)
 8018daa:	2203      	movs	r2, #3
 8018dac:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
          SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8018db0:	68bb      	ldr	r3, [r7, #8]
 8018db2:	681b      	ldr	r3, [r3, #0]
 8018db4:	4a94      	ldr	r2, [pc, #592]	@ (8019008 <RadioSetTxGenericConfig+0x2e8>)
 8018db6:	63d3      	str	r3, [r2, #60]	@ 0x3c
          SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8018db8:	68bb      	ldr	r3, [r7, #8]
 8018dba:	7cda      	ldrb	r2, [r3, #19]
 8018dbc:	4b92      	ldr	r3, [pc, #584]	@ (8019008 <RadioSetTxGenericConfig+0x2e8>)
 8018dbe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8018dc2:	e017      	b.n	8018df4 <RadioSetTxGenericConfig+0xd4>
        }
        else
        {
          radio_modem= MODEM_FSK;
 8018dc4:	2300      	movs	r3, #0
 8018dc6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
          SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8018dca:	4b8f      	ldr	r3, [pc, #572]	@ (8019008 <RadioSetTxGenericConfig+0x2e8>)
 8018dcc:	2200      	movs	r2, #0
 8018dce:	739a      	strb	r2, [r3, #14]
          SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8018dd0:	4b8d      	ldr	r3, [pc, #564]	@ (8019008 <RadioSetTxGenericConfig+0x2e8>)
 8018dd2:	2200      	movs	r2, #0
 8018dd4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
          SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8018dd8:	68bb      	ldr	r3, [r7, #8]
 8018dda:	681b      	ldr	r3, [r3, #0]
 8018ddc:	4a8a      	ldr	r2, [pc, #552]	@ (8019008 <RadioSetTxGenericConfig+0x2e8>)
 8018dde:	63d3      	str	r3, [r2, #60]	@ 0x3c
          SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8018de0:	68bb      	ldr	r3, [r7, #8]
 8018de2:	7cda      	ldrb	r2, [r3, #19]
 8018de4:	4b88      	ldr	r3, [pc, #544]	@ (8019008 <RadioSetTxGenericConfig+0x2e8>)
 8018de6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
          /*do msk with gfsk modulator*/
          SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate/4;
 8018dea:	68bb      	ldr	r3, [r7, #8]
 8018dec:	681b      	ldr	r3, [r3, #0]
 8018dee:	089b      	lsrs	r3, r3, #2
 8018df0:	4a85      	ldr	r2, [pc, #532]	@ (8019008 <RadioSetTxGenericConfig+0x2e8>)
 8018df2:	6413      	str	r3, [r2, #64]	@ 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 8018df4:	68bb      	ldr	r3, [r7, #8]
 8018df6:	685b      	ldr	r3, [r3, #4]
 8018df8:	b29b      	uxth	r3, r3
 8018dfa:	00db      	lsls	r3, r3, #3
 8018dfc:	b29a      	uxth	r2, r3
 8018dfe:	4b82      	ldr	r3, [pc, #520]	@ (8019008 <RadioSetTxGenericConfig+0x2e8>)
 8018e00:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8018e02:	4b81      	ldr	r3, [pc, #516]	@ (8019008 <RadioSetTxGenericConfig+0x2e8>)
 8018e04:	2204      	movs	r2, #4
 8018e06:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 8018e08:	68bb      	ldr	r3, [r7, #8]
 8018e0a:	7c9b      	ldrb	r3, [r3, #18]
 8018e0c:	00db      	lsls	r3, r3, #3
 8018e0e:	b2da      	uxtb	r2, r3
 8018e10:	4b7d      	ldr	r3, [pc, #500]	@ (8019008 <RadioSetTxGenericConfig+0x2e8>)
 8018e12:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8018e14:	4b7c      	ldr	r3, [pc, #496]	@ (8019008 <RadioSetTxGenericConfig+0x2e8>)
 8018e16:	2200      	movs	r2, #0
 8018e18:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8018e1a:	68bb      	ldr	r3, [r7, #8]
 8018e1c:	7d9b      	ldrb	r3, [r3, #22]
 8018e1e:	2b02      	cmp	r3, #2
 8018e20:	d003      	beq.n	8018e2a <RadioSetTxGenericConfig+0x10a>
 8018e22:	68bb      	ldr	r3, [r7, #8]
 8018e24:	7d1b      	ldrb	r3, [r3, #20]
 8018e26:	2b02      	cmp	r3, #2
 8018e28:	d12b      	bne.n	8018e82 <RadioSetTxGenericConfig+0x162>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8018e2a:	68bb      	ldr	r3, [r7, #8]
 8018e2c:	7d5b      	ldrb	r3, [r3, #21]
 8018e2e:	2bf1      	cmp	r3, #241	@ 0xf1
 8018e30:	d00a      	beq.n	8018e48 <RadioSetTxGenericConfig+0x128>
 8018e32:	68bb      	ldr	r3, [r7, #8]
 8018e34:	7d5b      	ldrb	r3, [r3, #21]
 8018e36:	2bf2      	cmp	r3, #242	@ 0xf2
 8018e38:	d006      	beq.n	8018e48 <RadioSetTxGenericConfig+0x128>
 8018e3a:	68bb      	ldr	r3, [r7, #8]
 8018e3c:	7d5b      	ldrb	r3, [r3, #21]
 8018e3e:	2b01      	cmp	r3, #1
 8018e40:	d002      	beq.n	8018e48 <RadioSetTxGenericConfig+0x128>
            {
                return -1;
 8018e42:	f04f 33ff 	mov.w	r3, #4294967295
 8018e46:	e199      	b.n	801917c <RadioSetTxGenericConfig+0x45c>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig= config;
 8018e48:	68bb      	ldr	r3, [r7, #8]
 8018e4a:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 8018e4c:	2301      	movs	r3, #1
 8018e4e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8018e52:	4b6e      	ldr	r3, [pc, #440]	@ (801900c <RadioSetTxGenericConfig+0x2ec>)
 8018e54:	6819      	ldr	r1, [r3, #0]
 8018e56:	f107 0320 	add.w	r3, r7, #32
 8018e5a:	4a6d      	ldr	r2, [pc, #436]	@ (8019010 <RadioSetTxGenericConfig+0x2f0>)
 8018e5c:	4618      	mov	r0, r3
 8018e5e:	f001 fb6f 	bl	801a540 <RFW_Init>
 8018e62:	4603      	mov	r3, r0
 8018e64:	2b00      	cmp	r3, #0
 8018e66:	d002      	beq.n	8018e6e <RadioSetTxGenericConfig+0x14e>
            {
              return -1;
 8018e68:	f04f 33ff 	mov.w	r3, #4294967295
 8018e6c:	e186      	b.n	801917c <RadioSetTxGenericConfig+0x45c>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8018e6e:	4b66      	ldr	r3, [pc, #408]	@ (8019008 <RadioSetTxGenericConfig+0x2e8>)
 8018e70:	2200      	movs	r2, #0
 8018e72:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 8018e74:	4b64      	ldr	r3, [pc, #400]	@ (8019008 <RadioSetTxGenericConfig+0x2e8>)
 8018e76:	2201      	movs	r2, #1
 8018e78:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8018e7a:	4b63      	ldr	r3, [pc, #396]	@ (8019008 <RadioSetTxGenericConfig+0x2e8>)
 8018e7c:	2200      	movs	r2, #0
 8018e7e:	755a      	strb	r2, [r3, #21]
        {
 8018e80:	e00b      	b.n	8018e9a <RadioSetTxGenericConfig+0x17a>
        }
        else
        {
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 8018e82:	68bb      	ldr	r3, [r7, #8]
 8018e84:	7d5a      	ldrb	r2, [r3, #21]
 8018e86:	4b60      	ldr	r3, [pc, #384]	@ (8019008 <RadioSetTxGenericConfig+0x2e8>)
 8018e88:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 8018e8a:	68bb      	ldr	r3, [r7, #8]
 8018e8c:	7d9a      	ldrb	r2, [r3, #22]
 8018e8e:	4b5e      	ldr	r3, [pc, #376]	@ (8019008 <RadioSetTxGenericConfig+0x2e8>)
 8018e90:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 8018e92:	68bb      	ldr	r3, [r7, #8]
 8018e94:	7d1a      	ldrb	r2, [r3, #20]
 8018e96:	4b5c      	ldr	r3, [pc, #368]	@ (8019008 <RadioSetTxGenericConfig+0x2e8>)
 8018e98:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8018e9a:	f7ff f89c 	bl	8017fd6 <RadioStandby>
        RadioSetModem( radio_modem );
 8018e9e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8018ea2:	4618      	mov	r0, r3
 8018ea4:	f7fe fa44 	bl	8017330 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018ea8:	485a      	ldr	r0, [pc, #360]	@ (8019014 <RadioSetTxGenericConfig+0x2f4>)
 8018eaa:	f000 fe6b 	bl	8019b84 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018eae:	485a      	ldr	r0, [pc, #360]	@ (8019018 <RadioSetTxGenericConfig+0x2f8>)
 8018eb0:	f000 ff36 	bl	8019d20 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8018eb4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8018eb8:	4618      	mov	r0, r3
 8018eba:	f000 f9fa 	bl	80192b2 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 8018ebe:	68bb      	ldr	r3, [r7, #8]
 8018ec0:	8a1b      	ldrh	r3, [r3, #16]
 8018ec2:	4618      	mov	r0, r3
 8018ec4:	f000 fa44 	bl	8019350 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->msk.CrcPolynomial );
 8018ec8:	68bb      	ldr	r3, [r7, #8]
 8018eca:	899b      	ldrh	r3, [r3, #12]
 8018ecc:	4618      	mov	r0, r3
 8018ece:	f000 fa1f 	bl	8019310 <SUBGRF_SetCrcPolynomial>
        break;
 8018ed2:	e13f      	b.n	8019154 <RadioSetTxGenericConfig+0x434>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 8018ed4:	68bb      	ldr	r3, [r7, #8]
 8018ed6:	681b      	ldr	r3, [r3, #0]
 8018ed8:	2b00      	cmp	r3, #0
 8018eda:	d102      	bne.n	8018ee2 <RadioSetTxGenericConfig+0x1c2>
        {
            return -1;
 8018edc:	f04f 33ff 	mov.w	r3, #4294967295
 8018ee0:	e14c      	b.n	801917c <RadioSetTxGenericConfig+0x45c>
        }
        if( config->fsk.SyncWordLength > 8 )
 8018ee2:	68bb      	ldr	r3, [r7, #8]
 8018ee4:	7c9b      	ldrb	r3, [r3, #18]
 8018ee6:	2b08      	cmp	r3, #8
 8018ee8:	d902      	bls.n	8018ef0 <RadioSetTxGenericConfig+0x1d0>
        {
            return -1;
 8018eea:	f04f 33ff 	mov.w	r3, #4294967295
 8018eee:	e145      	b.n	801917c <RadioSetTxGenericConfig+0x45c>
        }
        else
        {
            RADIO_MEMCPY8(syncword, config->fsk.SyncWord, config->fsk.SyncWordLength);
 8018ef0:	68bb      	ldr	r3, [r7, #8]
 8018ef2:	6899      	ldr	r1, [r3, #8]
 8018ef4:	68bb      	ldr	r3, [r7, #8]
 8018ef6:	7c9b      	ldrb	r3, [r3, #18]
 8018ef8:	461a      	mov	r2, r3
 8018efa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8018efe:	4618      	mov	r0, r3
 8018f00:	f001 fc1e 	bl	801a740 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8018f04:	4b40      	ldr	r3, [pc, #256]	@ (8019008 <RadioSetTxGenericConfig+0x2e8>)
 8018f06:	2200      	movs	r2, #0
 8018f08:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8018f0c:	68bb      	ldr	r3, [r7, #8]
 8018f0e:	681b      	ldr	r3, [r3, #0]
 8018f10:	4a3d      	ldr	r2, [pc, #244]	@ (8019008 <RadioSetTxGenericConfig+0x2e8>)
 8018f12:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8018f14:	68bb      	ldr	r3, [r7, #8]
 8018f16:	7cda      	ldrb	r2, [r3, #19]
 8018f18:	4b3b      	ldr	r3, [pc, #236]	@ (8019008 <RadioSetTxGenericConfig+0x2e8>)
 8018f1a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 8018f1e:	68bb      	ldr	r3, [r7, #8]
 8018f20:	699b      	ldr	r3, [r3, #24]
 8018f22:	4a39      	ldr	r2, [pc, #228]	@ (8019008 <RadioSetTxGenericConfig+0x2e8>)
 8018f24:	6413      	str	r3, [r2, #64]	@ 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8018f26:	4b38      	ldr	r3, [pc, #224]	@ (8019008 <RadioSetTxGenericConfig+0x2e8>)
 8018f28:	2200      	movs	r2, #0
 8018f2a:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 8018f2c:	68bb      	ldr	r3, [r7, #8]
 8018f2e:	685b      	ldr	r3, [r3, #4]
 8018f30:	b29b      	uxth	r3, r3
 8018f32:	00db      	lsls	r3, r3, #3
 8018f34:	b29a      	uxth	r2, r3
 8018f36:	4b34      	ldr	r3, [pc, #208]	@ (8019008 <RadioSetTxGenericConfig+0x2e8>)
 8018f38:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8018f3a:	4b33      	ldr	r3, [pc, #204]	@ (8019008 <RadioSetTxGenericConfig+0x2e8>)
 8018f3c:	2204      	movs	r2, #4
 8018f3e:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8018f40:	68bb      	ldr	r3, [r7, #8]
 8018f42:	7c9b      	ldrb	r3, [r3, #18]
 8018f44:	00db      	lsls	r3, r3, #3
 8018f46:	b2da      	uxtb	r2, r3
 8018f48:	4b2f      	ldr	r3, [pc, #188]	@ (8019008 <RadioSetTxGenericConfig+0x2e8>)
 8018f4a:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8018f4c:	4b2e      	ldr	r3, [pc, #184]	@ (8019008 <RadioSetTxGenericConfig+0x2e8>)
 8018f4e:	2200      	movs	r2, #0
 8018f50:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8018f52:	68bb      	ldr	r3, [r7, #8]
 8018f54:	7d9b      	ldrb	r3, [r3, #22]
 8018f56:	2b02      	cmp	r3, #2
 8018f58:	d003      	beq.n	8018f62 <RadioSetTxGenericConfig+0x242>
 8018f5a:	68bb      	ldr	r3, [r7, #8]
 8018f5c:	7d1b      	ldrb	r3, [r3, #20]
 8018f5e:	2b02      	cmp	r3, #2
 8018f60:	d12a      	bne.n	8018fb8 <RadioSetTxGenericConfig+0x298>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8018f62:	68bb      	ldr	r3, [r7, #8]
 8018f64:	7d5b      	ldrb	r3, [r3, #21]
 8018f66:	2bf1      	cmp	r3, #241	@ 0xf1
 8018f68:	d00a      	beq.n	8018f80 <RadioSetTxGenericConfig+0x260>
 8018f6a:	68bb      	ldr	r3, [r7, #8]
 8018f6c:	7d5b      	ldrb	r3, [r3, #21]
 8018f6e:	2bf2      	cmp	r3, #242	@ 0xf2
 8018f70:	d006      	beq.n	8018f80 <RadioSetTxGenericConfig+0x260>
 8018f72:	68bb      	ldr	r3, [r7, #8]
 8018f74:	7d5b      	ldrb	r3, [r3, #21]
 8018f76:	2b01      	cmp	r3, #1
 8018f78:	d002      	beq.n	8018f80 <RadioSetTxGenericConfig+0x260>
            {
                return -1;
 8018f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8018f7e:	e0fd      	b.n	801917c <RadioSetTxGenericConfig+0x45c>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 8018f80:	2301      	movs	r3, #1
 8018f82:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 8018f84:	68bb      	ldr	r3, [r7, #8]
 8018f86:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8018f88:	4b20      	ldr	r3, [pc, #128]	@ (801900c <RadioSetTxGenericConfig+0x2ec>)
 8018f8a:	6819      	ldr	r1, [r3, #0]
 8018f8c:	f107 0314 	add.w	r3, r7, #20
 8018f90:	4a1f      	ldr	r2, [pc, #124]	@ (8019010 <RadioSetTxGenericConfig+0x2f0>)
 8018f92:	4618      	mov	r0, r3
 8018f94:	f001 fad4 	bl	801a540 <RFW_Init>
 8018f98:	4603      	mov	r3, r0
 8018f9a:	2b00      	cmp	r3, #0
 8018f9c:	d002      	beq.n	8018fa4 <RadioSetTxGenericConfig+0x284>
            {
              return -1;
 8018f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8018fa2:	e0eb      	b.n	801917c <RadioSetTxGenericConfig+0x45c>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8018fa4:	4b18      	ldr	r3, [pc, #96]	@ (8019008 <RadioSetTxGenericConfig+0x2e8>)
 8018fa6:	2200      	movs	r2, #0
 8018fa8:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 8018faa:	4b17      	ldr	r3, [pc, #92]	@ (8019008 <RadioSetTxGenericConfig+0x2e8>)
 8018fac:	2201      	movs	r2, #1
 8018fae:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8018fb0:	4b15      	ldr	r3, [pc, #84]	@ (8019008 <RadioSetTxGenericConfig+0x2e8>)
 8018fb2:	2200      	movs	r2, #0
 8018fb4:	755a      	strb	r2, [r3, #21]
        {
 8018fb6:	e00b      	b.n	8018fd0 <RadioSetTxGenericConfig+0x2b0>
        }
        else
        {
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8018fb8:	68bb      	ldr	r3, [r7, #8]
 8018fba:	7d5a      	ldrb	r2, [r3, #21]
 8018fbc:	4b12      	ldr	r3, [pc, #72]	@ (8019008 <RadioSetTxGenericConfig+0x2e8>)
 8018fbe:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8018fc0:	68bb      	ldr	r3, [r7, #8]
 8018fc2:	7d9a      	ldrb	r2, [r3, #22]
 8018fc4:	4b10      	ldr	r3, [pc, #64]	@ (8019008 <RadioSetTxGenericConfig+0x2e8>)
 8018fc6:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 8018fc8:	68bb      	ldr	r3, [r7, #8]
 8018fca:	7d1a      	ldrb	r2, [r3, #20]
 8018fcc:	4b0e      	ldr	r3, [pc, #56]	@ (8019008 <RadioSetTxGenericConfig+0x2e8>)
 8018fce:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8018fd0:	f7ff f801 	bl	8017fd6 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8018fd4:	2000      	movs	r0, #0
 8018fd6:	f7fe f9ab 	bl	8017330 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018fda:	480e      	ldr	r0, [pc, #56]	@ (8019014 <RadioSetTxGenericConfig+0x2f4>)
 8018fdc:	f000 fdd2 	bl	8019b84 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018fe0:	480d      	ldr	r0, [pc, #52]	@ (8019018 <RadioSetTxGenericConfig+0x2f8>)
 8018fe2:	f000 fe9d 	bl	8019d20 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8018fe6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8018fea:	4618      	mov	r0, r3
 8018fec:	f000 f961 	bl	80192b2 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8018ff0:	68bb      	ldr	r3, [r7, #8]
 8018ff2:	8a1b      	ldrh	r3, [r3, #16]
 8018ff4:	4618      	mov	r0, r3
 8018ff6:	f000 f9ab 	bl	8019350 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 8018ffa:	68bb      	ldr	r3, [r7, #8]
 8018ffc:	899b      	ldrh	r3, [r3, #12]
 8018ffe:	4618      	mov	r0, r3
 8019000:	f000 f986 	bl	8019310 <SUBGRF_SetCrcPolynomial>
        break;
 8019004:	e0a6      	b.n	8019154 <RadioSetTxGenericConfig+0x434>
 8019006:	bf00      	nop
 8019008:	20001cf4 	.word	0x20001cf4
 801900c:	20001cf0 	.word	0x20001cf0
 8019010:	20001d50 	.word	0x20001d50
 8019014:	20001d2c 	.word	0x20001d2c
 8019018:	20001d02 	.word	0x20001d02
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801901c:	4b59      	ldr	r3, [pc, #356]	@ (8019184 <RadioSetTxGenericConfig+0x464>)
 801901e:	2201      	movs	r2, #1
 8019020:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8019024:	68bb      	ldr	r3, [r7, #8]
 8019026:	781a      	ldrb	r2, [r3, #0]
 8019028:	4b56      	ldr	r3, [pc, #344]	@ (8019184 <RadioSetTxGenericConfig+0x464>)
 801902a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801902e:	68bb      	ldr	r3, [r7, #8]
 8019030:	785a      	ldrb	r2, [r3, #1]
 8019032:	4b54      	ldr	r3, [pc, #336]	@ (8019184 <RadioSetTxGenericConfig+0x464>)
 8019034:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8019038:	68bb      	ldr	r3, [r7, #8]
 801903a:	789a      	ldrb	r2, [r3, #2]
 801903c:	4b51      	ldr	r3, [pc, #324]	@ (8019184 <RadioSetTxGenericConfig+0x464>)
 801903e:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 8019042:	68bb      	ldr	r3, [r7, #8]
 8019044:	78db      	ldrb	r3, [r3, #3]
 8019046:	2b02      	cmp	r3, #2
 8019048:	d010      	beq.n	801906c <RadioSetTxGenericConfig+0x34c>
 801904a:	2b02      	cmp	r3, #2
 801904c:	dc20      	bgt.n	8019090 <RadioSetTxGenericConfig+0x370>
 801904e:	2b00      	cmp	r3, #0
 8019050:	d002      	beq.n	8019058 <RadioSetTxGenericConfig+0x338>
 8019052:	2b01      	cmp	r3, #1
 8019054:	d005      	beq.n	8019062 <RadioSetTxGenericConfig+0x342>
            {
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
          default:
            break;
 8019056:	e01b      	b.n	8019090 <RadioSetTxGenericConfig+0x370>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8019058:	4b4a      	ldr	r3, [pc, #296]	@ (8019184 <RadioSetTxGenericConfig+0x464>)
 801905a:	2200      	movs	r2, #0
 801905c:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8019060:	e017      	b.n	8019092 <RadioSetTxGenericConfig+0x372>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8019062:	4b48      	ldr	r3, [pc, #288]	@ (8019184 <RadioSetTxGenericConfig+0x464>)
 8019064:	2201      	movs	r2, #1
 8019066:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801906a:	e012      	b.n	8019092 <RadioSetTxGenericConfig+0x372>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801906c:	68bb      	ldr	r3, [r7, #8]
 801906e:	781b      	ldrb	r3, [r3, #0]
 8019070:	2b0b      	cmp	r3, #11
 8019072:	d003      	beq.n	801907c <RadioSetTxGenericConfig+0x35c>
 8019074:	68bb      	ldr	r3, [r7, #8]
 8019076:	781b      	ldrb	r3, [r3, #0]
 8019078:	2b0c      	cmp	r3, #12
 801907a:	d104      	bne.n	8019086 <RadioSetTxGenericConfig+0x366>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801907c:	4b41      	ldr	r3, [pc, #260]	@ (8019184 <RadioSetTxGenericConfig+0x464>)
 801907e:	2201      	movs	r2, #1
 8019080:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8019084:	e005      	b.n	8019092 <RadioSetTxGenericConfig+0x372>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8019086:	4b3f      	ldr	r3, [pc, #252]	@ (8019184 <RadioSetTxGenericConfig+0x464>)
 8019088:	2200      	movs	r2, #0
 801908a:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801908e:	e000      	b.n	8019092 <RadioSetTxGenericConfig+0x372>
            break;
 8019090:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8019092:	4b3c      	ldr	r3, [pc, #240]	@ (8019184 <RadioSetTxGenericConfig+0x464>)
 8019094:	2201      	movs	r2, #1
 8019096:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8019098:	68bb      	ldr	r3, [r7, #8]
 801909a:	889a      	ldrh	r2, [r3, #4]
 801909c:	4b39      	ldr	r3, [pc, #228]	@ (8019184 <RadioSetTxGenericConfig+0x464>)
 801909e:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 80190a0:	68bb      	ldr	r3, [r7, #8]
 80190a2:	799a      	ldrb	r2, [r3, #6]
 80190a4:	4b37      	ldr	r3, [pc, #220]	@ (8019184 <RadioSetTxGenericConfig+0x464>)
 80190a6:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 80190a8:	68bb      	ldr	r3, [r7, #8]
 80190aa:	79da      	ldrb	r2, [r3, #7]
 80190ac:	4b35      	ldr	r3, [pc, #212]	@ (8019184 <RadioSetTxGenericConfig+0x464>)
 80190ae:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 80190b2:	68bb      	ldr	r3, [r7, #8]
 80190b4:	7a1a      	ldrb	r2, [r3, #8]
 80190b6:	4b33      	ldr	r3, [pc, #204]	@ (8019184 <RadioSetTxGenericConfig+0x464>)
 80190b8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        RadioStandby( );
 80190bc:	f7fe ff8b 	bl	8017fd6 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 80190c0:	2001      	movs	r0, #1
 80190c2:	f7fe f935 	bl	8017330 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80190c6:	4830      	ldr	r0, [pc, #192]	@ (8019188 <RadioSetTxGenericConfig+0x468>)
 80190c8:	f000 fd5c 	bl	8019b84 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80190cc:	482f      	ldr	r0, [pc, #188]	@ (801918c <RadioSetTxGenericConfig+0x46c>)
 80190ce:	f000 fe27 	bl	8019d20 <SUBGRF_SetPacketParams>

        // WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 80190d2:	4b2c      	ldr	r3, [pc, #176]	@ (8019184 <RadioSetTxGenericConfig+0x464>)
 80190d4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80190d8:	2b06      	cmp	r3, #6
 80190da:	d10d      	bne.n	80190f8 <RadioSetTxGenericConfig+0x3d8>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 80190dc:	f640 0089 	movw	r0, #2185	@ 0x889
 80190e0:	f000 ff78 	bl	8019fd4 <SUBGRF_ReadRegister>
 80190e4:	4603      	mov	r3, r0
 80190e6:	f023 0304 	bic.w	r3, r3, #4
 80190ea:	b2db      	uxtb	r3, r3
 80190ec:	4619      	mov	r1, r3
 80190ee:	f640 0089 	movw	r0, #2185	@ 0x889
 80190f2:	f000 ff5b 	bl	8019fac <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        // WORKAROUND END
        break;
 80190f6:	e02d      	b.n	8019154 <RadioSetTxGenericConfig+0x434>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 80190f8:	f640 0089 	movw	r0, #2185	@ 0x889
 80190fc:	f000 ff6a 	bl	8019fd4 <SUBGRF_ReadRegister>
 8019100:	4603      	mov	r3, r0
 8019102:	f043 0304 	orr.w	r3, r3, #4
 8019106:	b2db      	uxtb	r3, r3
 8019108:	4619      	mov	r1, r3
 801910a:	f640 0089 	movw	r0, #2185	@ 0x889
 801910e:	f000 ff4d 	bl	8019fac <SUBGRF_WriteRegister>
        break;
 8019112:	e01f      	b.n	8019154 <RadioSetTxGenericConfig+0x434>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 8019114:	68bb      	ldr	r3, [r7, #8]
 8019116:	681b      	ldr	r3, [r3, #0]
 8019118:	2b00      	cmp	r3, #0
 801911a:	d004      	beq.n	8019126 <RadioSetTxGenericConfig+0x406>
 801911c:	68bb      	ldr	r3, [r7, #8]
 801911e:	681b      	ldr	r3, [r3, #0]
 8019120:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8019124:	d902      	bls.n	801912c <RadioSetTxGenericConfig+0x40c>
        {
            return -1;
 8019126:	f04f 33ff 	mov.w	r3, #4294967295
 801912a:	e027      	b.n	801917c <RadioSetTxGenericConfig+0x45c>
        }
        RadioSetModem( MODEM_BPSK );
 801912c:	2003      	movs	r0, #3
 801912e:	f7fe f8ff 	bl	8017330 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8019132:	4b14      	ldr	r3, [pc, #80]	@ (8019184 <RadioSetTxGenericConfig+0x464>)
 8019134:	2202      	movs	r2, #2
 8019136:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 801913a:	68bb      	ldr	r3, [r7, #8]
 801913c:	681b      	ldr	r3, [r3, #0]
 801913e:	4a11      	ldr	r2, [pc, #68]	@ (8019184 <RadioSetTxGenericConfig+0x464>)
 8019140:	6493      	str	r3, [r2, #72]	@ 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8019142:	4b10      	ldr	r3, [pc, #64]	@ (8019184 <RadioSetTxGenericConfig+0x464>)
 8019144:	2216      	movs	r2, #22
 8019146:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801914a:	480f      	ldr	r0, [pc, #60]	@ (8019188 <RadioSetTxGenericConfig+0x468>)
 801914c:	f000 fd1a 	bl	8019b84 <SUBGRF_SetModulationParams>
        break;
 8019150:	e000      	b.n	8019154 <RadioSetTxGenericConfig+0x434>
    default:
        break;
 8019152:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8019154:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8019158:	4618      	mov	r0, r3
 801915a:	f001 f843 	bl	801a1e4 <SUBGRF_SetRfTxPower>
 801915e:	4603      	mov	r3, r0
 8019160:	461a      	mov	r2, r3
 8019162:	4b08      	ldr	r3, [pc, #32]	@ (8019184 <RadioSetTxGenericConfig+0x464>)
 8019164:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8019168:	4b06      	ldr	r3, [pc, #24]	@ (8019184 <RadioSetTxGenericConfig+0x464>)
 801916a:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 801916e:	4618      	mov	r0, r3
 8019170:	f001 fa07 	bl	801a582 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8019174:	4a03      	ldr	r2, [pc, #12]	@ (8019184 <RadioSetTxGenericConfig+0x464>)
 8019176:	687b      	ldr	r3, [r7, #4]
 8019178:	6053      	str	r3, [r2, #4]
    return 0;
 801917a:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801917c:	4618      	mov	r0, r3
 801917e:	3738      	adds	r7, #56	@ 0x38
 8019180:	46bd      	mov	sp, r7
 8019182:	bd80      	pop	{r7, pc}
 8019184:	20001cf4 	.word	0x20001cf4
 8019188:	20001d2c 	.word	0x20001d2c
 801918c:	20001d02 	.word	0x20001d02

08019190 <SUBGRF_Init>:
static void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size );

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8019190:	b580      	push	{r7, lr}
 8019192:	b084      	sub	sp, #16
 8019194:	af00      	add	r7, sp, #0
 8019196:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 8019198:	687b      	ldr	r3, [r7, #4]
 801919a:	2b00      	cmp	r3, #0
 801919c:	d002      	beq.n	80191a4 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 801919e:	4a1a      	ldr	r2, [pc, #104]	@ (8019208 <SUBGRF_Init+0x78>)
 80191a0:	687b      	ldr	r3, [r7, #4]
 80191a2:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 80191a4:	f7e8 fe54 	bl	8001e50 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 80191a8:	2002      	movs	r0, #2
 80191aa:	f001 f8e7 	bl	801a37c <Radio_SMPS_Set>

    ImageCalibrated = false;
 80191ae:	4b17      	ldr	r3, [pc, #92]	@ (801920c <SUBGRF_Init+0x7c>)
 80191b0:	2200      	movs	r2, #0
 80191b2:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 80191b4:	2000      	movs	r0, #0
 80191b6:	f000 f979 	bl	80194ac <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 80191ba:	f7f1 fd8f 	bl	800acdc <RBI_IsTCXO>
 80191be:	4603      	mov	r3, r0
 80191c0:	2b01      	cmp	r3, #1
 80191c2:	d10e      	bne.n	80191e2 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 80191c4:	2140      	movs	r1, #64	@ 0x40
 80191c6:	2001      	movs	r0, #1
 80191c8:	f000 fb80 	bl	80198cc <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 80191cc:	2100      	movs	r1, #0
 80191ce:	f640 1011 	movw	r0, #2321	@ 0x911
 80191d2:	f000 feeb 	bl	8019fac <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 80191d6:	237f      	movs	r3, #127	@ 0x7f
 80191d8:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 80191da:	7b38      	ldrb	r0, [r7, #12]
 80191dc:	f000 fa87 	bl	80196ee <SUBGRF_Calibrate>
 80191e0:	e009      	b.n	80191f6 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 80191e2:	2120      	movs	r1, #32
 80191e4:	f640 1011 	movw	r0, #2321	@ 0x911
 80191e8:	f000 fee0 	bl	8019fac <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 80191ec:	2120      	movs	r1, #32
 80191ee:	f640 1012 	movw	r0, #2322	@ 0x912
 80191f2:	f000 fedb 	bl	8019fac <SUBGRF_WriteRegister>
    }
    /* Init RF Switch */
    RBI_Init();
 80191f6:	f7f1 fd55 	bl	800aca4 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 80191fa:	4b05      	ldr	r3, [pc, #20]	@ (8019210 <SUBGRF_Init+0x80>)
 80191fc:	2201      	movs	r2, #1
 80191fe:	701a      	strb	r2, [r3, #0]
}
 8019200:	bf00      	nop
 8019202:	3710      	adds	r7, #16
 8019204:	46bd      	mov	sp, r7
 8019206:	bd80      	pop	{r7, pc}
 8019208:	20001d8c 	.word	0x20001d8c
 801920c:	20001d88 	.word	0x20001d88
 8019210:	20001d80 	.word	0x20001d80

08019214 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 8019214:	b480      	push	{r7}
 8019216:	af00      	add	r7, sp, #0
    return OperatingMode;
 8019218:	4b02      	ldr	r3, [pc, #8]	@ (8019224 <SUBGRF_GetOperatingMode+0x10>)
 801921a:	781b      	ldrb	r3, [r3, #0]
}
 801921c:	4618      	mov	r0, r3
 801921e:	46bd      	mov	sp, r7
 8019220:	bc80      	pop	{r7}
 8019222:	4770      	bx	lr
 8019224:	20001d80 	.word	0x20001d80

08019228 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8019228:	b580      	push	{r7, lr}
 801922a:	b082      	sub	sp, #8
 801922c:	af00      	add	r7, sp, #0
 801922e:	6078      	str	r0, [r7, #4]
 8019230:	460b      	mov	r3, r1
 8019232:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8019234:	78fb      	ldrb	r3, [r7, #3]
 8019236:	461a      	mov	r2, r3
 8019238:	6879      	ldr	r1, [r7, #4]
 801923a:	2000      	movs	r0, #0
 801923c:	f000 ff22 	bl	801a084 <SUBGRF_WriteBuffer>
}
 8019240:	bf00      	nop
 8019242:	3708      	adds	r7, #8
 8019244:	46bd      	mov	sp, r7
 8019246:	bd80      	pop	{r7, pc}

08019248 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 8019248:	b580      	push	{r7, lr}
 801924a:	b086      	sub	sp, #24
 801924c:	af00      	add	r7, sp, #0
 801924e:	60f8      	str	r0, [r7, #12]
 8019250:	60b9      	str	r1, [r7, #8]
 8019252:	4613      	mov	r3, r2
 8019254:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 8019256:	2300      	movs	r3, #0
 8019258:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 801925a:	f107 0317 	add.w	r3, r7, #23
 801925e:	4619      	mov	r1, r3
 8019260:	68b8      	ldr	r0, [r7, #8]
 8019262:	f000 fe25 	bl	8019eb0 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8019266:	68bb      	ldr	r3, [r7, #8]
 8019268:	781b      	ldrb	r3, [r3, #0]
 801926a:	79fa      	ldrb	r2, [r7, #7]
 801926c:	429a      	cmp	r2, r3
 801926e:	d201      	bcs.n	8019274 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 8019270:	2301      	movs	r3, #1
 8019272:	e007      	b.n	8019284 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8019274:	7df8      	ldrb	r0, [r7, #23]
 8019276:	68bb      	ldr	r3, [r7, #8]
 8019278:	781b      	ldrb	r3, [r3, #0]
 801927a:	461a      	mov	r2, r3
 801927c:	68f9      	ldr	r1, [r7, #12]
 801927e:	f000 ff23 	bl	801a0c8 <SUBGRF_ReadBuffer>

    return 0;
 8019282:	2300      	movs	r3, #0
}
 8019284:	4618      	mov	r0, r3
 8019286:	3718      	adds	r7, #24
 8019288:	46bd      	mov	sp, r7
 801928a:	bd80      	pop	{r7, pc}

0801928c <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 801928c:	b580      	push	{r7, lr}
 801928e:	b084      	sub	sp, #16
 8019290:	af00      	add	r7, sp, #0
 8019292:	60f8      	str	r0, [r7, #12]
 8019294:	460b      	mov	r3, r1
 8019296:	607a      	str	r2, [r7, #4]
 8019298:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 801929a:	7afb      	ldrb	r3, [r7, #11]
 801929c:	4619      	mov	r1, r3
 801929e:	68f8      	ldr	r0, [r7, #12]
 80192a0:	f7ff ffc2 	bl	8019228 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 80192a4:	6878      	ldr	r0, [r7, #4]
 80192a6:	f000 f91d 	bl	80194e4 <SUBGRF_SetTx>
}
 80192aa:	bf00      	nop
 80192ac:	3710      	adds	r7, #16
 80192ae:	46bd      	mov	sp, r7
 80192b0:	bd80      	pop	{r7, pc}

080192b2 <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 80192b2:	b580      	push	{r7, lr}
 80192b4:	b082      	sub	sp, #8
 80192b6:	af00      	add	r7, sp, #0
 80192b8:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 80192ba:	2208      	movs	r2, #8
 80192bc:	6879      	ldr	r1, [r7, #4]
 80192be:	f44f 60d8 	mov.w	r0, #1728	@ 0x6c0
 80192c2:	f000 fe9b 	bl	8019ffc <SUBGRF_WriteRegisters>
    return 0;
 80192c6:	2300      	movs	r3, #0
}
 80192c8:	4618      	mov	r0, r3
 80192ca:	3708      	adds	r7, #8
 80192cc:	46bd      	mov	sp, r7
 80192ce:	bd80      	pop	{r7, pc}

080192d0 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 80192d0:	b580      	push	{r7, lr}
 80192d2:	b084      	sub	sp, #16
 80192d4:	af00      	add	r7, sp, #0
 80192d6:	4603      	mov	r3, r0
 80192d8:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 80192da:	88fb      	ldrh	r3, [r7, #6]
 80192dc:	0a1b      	lsrs	r3, r3, #8
 80192de:	b29b      	uxth	r3, r3
 80192e0:	b2db      	uxtb	r3, r3
 80192e2:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 80192e4:	88fb      	ldrh	r3, [r7, #6]
 80192e6:	b2db      	uxtb	r3, r3
 80192e8:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 80192ea:	f000 fb73 	bl	80199d4 <SUBGRF_GetPacketType>
 80192ee:	4603      	mov	r3, r0
 80192f0:	2b00      	cmp	r3, #0
 80192f2:	d108      	bne.n	8019306 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 80192f4:	f107 030c 	add.w	r3, r7, #12
 80192f8:	2202      	movs	r2, #2
 80192fa:	4619      	mov	r1, r3
 80192fc:	f240 60bc 	movw	r0, #1724	@ 0x6bc
 8019300:	f000 fe7c 	bl	8019ffc <SUBGRF_WriteRegisters>
            break;
 8019304:	e000      	b.n	8019308 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 8019306:	bf00      	nop
    }
}
 8019308:	bf00      	nop
 801930a:	3710      	adds	r7, #16
 801930c:	46bd      	mov	sp, r7
 801930e:	bd80      	pop	{r7, pc}

08019310 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 8019310:	b580      	push	{r7, lr}
 8019312:	b084      	sub	sp, #16
 8019314:	af00      	add	r7, sp, #0
 8019316:	4603      	mov	r3, r0
 8019318:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 801931a:	88fb      	ldrh	r3, [r7, #6]
 801931c:	0a1b      	lsrs	r3, r3, #8
 801931e:	b29b      	uxth	r3, r3
 8019320:	b2db      	uxtb	r3, r3
 8019322:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8019324:	88fb      	ldrh	r3, [r7, #6]
 8019326:	b2db      	uxtb	r3, r3
 8019328:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801932a:	f000 fb53 	bl	80199d4 <SUBGRF_GetPacketType>
 801932e:	4603      	mov	r3, r0
 8019330:	2b00      	cmp	r3, #0
 8019332:	d108      	bne.n	8019346 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8019334:	f107 030c 	add.w	r3, r7, #12
 8019338:	2202      	movs	r2, #2
 801933a:	4619      	mov	r1, r3
 801933c:	f240 60be 	movw	r0, #1726	@ 0x6be
 8019340:	f000 fe5c 	bl	8019ffc <SUBGRF_WriteRegisters>
            break;
 8019344:	e000      	b.n	8019348 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 8019346:	bf00      	nop
    }
}
 8019348:	bf00      	nop
 801934a:	3710      	adds	r7, #16
 801934c:	46bd      	mov	sp, r7
 801934e:	bd80      	pop	{r7, pc}

08019350 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 8019350:	b580      	push	{r7, lr}
 8019352:	b084      	sub	sp, #16
 8019354:	af00      	add	r7, sp, #0
 8019356:	4603      	mov	r3, r0
 8019358:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 801935a:	2300      	movs	r3, #0
 801935c:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 801935e:	f000 fb39 	bl	80199d4 <SUBGRF_GetPacketType>
 8019362:	4603      	mov	r3, r0
 8019364:	2b00      	cmp	r3, #0
 8019366:	d121      	bne.n	80193ac <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8019368:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 801936c:	f000 fe32 	bl	8019fd4 <SUBGRF_ReadRegister>
 8019370:	4603      	mov	r3, r0
 8019372:	f023 0301 	bic.w	r3, r3, #1
 8019376:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8019378:	88fb      	ldrh	r3, [r7, #6]
 801937a:	0a1b      	lsrs	r3, r3, #8
 801937c:	b29b      	uxth	r3, r3
 801937e:	b25b      	sxtb	r3, r3
 8019380:	f003 0301 	and.w	r3, r3, #1
 8019384:	b25a      	sxtb	r2, r3
 8019386:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801938a:	4313      	orrs	r3, r2
 801938c:	b25b      	sxtb	r3, r3
 801938e:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 8019390:	7bfb      	ldrb	r3, [r7, #15]
 8019392:	4619      	mov	r1, r3
 8019394:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 8019398:	f000 fe08 	bl	8019fac <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 801939c:	88fb      	ldrh	r3, [r7, #6]
 801939e:	b2db      	uxtb	r3, r3
 80193a0:	4619      	mov	r1, r3
 80193a2:	f240 60b9 	movw	r0, #1721	@ 0x6b9
 80193a6:	f000 fe01 	bl	8019fac <SUBGRF_WriteRegister>
            break;
 80193aa:	e000      	b.n	80193ae <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 80193ac:	bf00      	nop
    }
}
 80193ae:	bf00      	nop
 80193b0:	3710      	adds	r7, #16
 80193b2:	46bd      	mov	sp, r7
 80193b4:	bd80      	pop	{r7, pc}

080193b6 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 80193b6:	b580      	push	{r7, lr}
 80193b8:	b082      	sub	sp, #8
 80193ba:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 80193bc:	2300      	movs	r3, #0
 80193be:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 80193c0:	2300      	movs	r3, #0
 80193c2:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 80193c4:	2300      	movs	r3, #0
 80193c6:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 80193c8:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 80193cc:	f000 fe02 	bl	8019fd4 <SUBGRF_ReadRegister>
 80193d0:	4603      	mov	r3, r0
 80193d2:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 80193d4:	79fb      	ldrb	r3, [r7, #7]
 80193d6:	f023 0301 	bic.w	r3, r3, #1
 80193da:	b2db      	uxtb	r3, r3
 80193dc:	4619      	mov	r1, r3
 80193de:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 80193e2:	f000 fde3 	bl	8019fac <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 80193e6:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 80193ea:	f000 fdf3 	bl	8019fd4 <SUBGRF_ReadRegister>
 80193ee:	4603      	mov	r3, r0
 80193f0:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 80193f2:	79bb      	ldrb	r3, [r7, #6]
 80193f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80193f8:	b2db      	uxtb	r3, r3
 80193fa:	4619      	mov	r1, r3
 80193fc:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8019400:	f000 fdd4 	bl	8019fac <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8019404:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8019408:	f000 f88c 	bl	8019524 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 801940c:	463b      	mov	r3, r7
 801940e:	2204      	movs	r2, #4
 8019410:	4619      	mov	r1, r3
 8019412:	f640 0019 	movw	r0, #2073	@ 0x819
 8019416:	f000 fe13 	bl	801a040 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 801941a:	2000      	movs	r0, #0
 801941c:	f000 f846 	bl	80194ac <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8019420:	79fb      	ldrb	r3, [r7, #7]
 8019422:	4619      	mov	r1, r3
 8019424:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 8019428:	f000 fdc0 	bl	8019fac <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 801942c:	79bb      	ldrb	r3, [r7, #6]
 801942e:	4619      	mov	r1, r3
 8019430:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8019434:	f000 fdba 	bl	8019fac <SUBGRF_WriteRegister>

    return number;
 8019438:	683b      	ldr	r3, [r7, #0]
}
 801943a:	4618      	mov	r0, r3
 801943c:	3708      	adds	r7, #8
 801943e:	46bd      	mov	sp, r7
 8019440:	bd80      	pop	{r7, pc}
	...

08019444 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 8019444:	b580      	push	{r7, lr}
 8019446:	b084      	sub	sp, #16
 8019448:	af00      	add	r7, sp, #0
 801944a:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 801944c:	2000      	movs	r0, #0
 801944e:	f7f1 fc30 	bl	800acb2 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8019452:	2002      	movs	r0, #2
 8019454:	f000 ff92 	bl	801a37c <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8019458:	793b      	ldrb	r3, [r7, #4]
 801945a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801945e:	b2db      	uxtb	r3, r3
 8019460:	b25b      	sxtb	r3, r3
 8019462:	009b      	lsls	r3, r3, #2
 8019464:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8019466:	793b      	ldrb	r3, [r7, #4]
 8019468:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801946c:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801946e:	b25b      	sxtb	r3, r3
 8019470:	005b      	lsls	r3, r3, #1
 8019472:	b25b      	sxtb	r3, r3
 8019474:	4313      	orrs	r3, r2
 8019476:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8019478:	793b      	ldrb	r3, [r7, #4]
 801947a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801947e:	b2db      	uxtb	r3, r3
 8019480:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8019482:	4313      	orrs	r3, r2
 8019484:	b25b      	sxtb	r3, r3
 8019486:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8019488:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 801948a:	f107 030f 	add.w	r3, r7, #15
 801948e:	2201      	movs	r2, #1
 8019490:	4619      	mov	r1, r3
 8019492:	2084      	movs	r0, #132	@ 0x84
 8019494:	f000 fe3a 	bl	801a10c <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 8019498:	4b03      	ldr	r3, [pc, #12]	@ (80194a8 <SUBGRF_SetSleep+0x64>)
 801949a:	2200      	movs	r2, #0
 801949c:	701a      	strb	r2, [r3, #0]
}
 801949e:	bf00      	nop
 80194a0:	3710      	adds	r7, #16
 80194a2:	46bd      	mov	sp, r7
 80194a4:	bd80      	pop	{r7, pc}
 80194a6:	bf00      	nop
 80194a8:	20001d80 	.word	0x20001d80

080194ac <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 80194ac:	b580      	push	{r7, lr}
 80194ae:	b082      	sub	sp, #8
 80194b0:	af00      	add	r7, sp, #0
 80194b2:	4603      	mov	r3, r0
 80194b4:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 80194b6:	1dfb      	adds	r3, r7, #7
 80194b8:	2201      	movs	r2, #1
 80194ba:	4619      	mov	r1, r3
 80194bc:	2080      	movs	r0, #128	@ 0x80
 80194be:	f000 fe25 	bl	801a10c <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 80194c2:	79fb      	ldrb	r3, [r7, #7]
 80194c4:	2b00      	cmp	r3, #0
 80194c6:	d103      	bne.n	80194d0 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 80194c8:	4b05      	ldr	r3, [pc, #20]	@ (80194e0 <SUBGRF_SetStandby+0x34>)
 80194ca:	2201      	movs	r2, #1
 80194cc:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 80194ce:	e002      	b.n	80194d6 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 80194d0:	4b03      	ldr	r3, [pc, #12]	@ (80194e0 <SUBGRF_SetStandby+0x34>)
 80194d2:	2202      	movs	r2, #2
 80194d4:	701a      	strb	r2, [r3, #0]
}
 80194d6:	bf00      	nop
 80194d8:	3708      	adds	r7, #8
 80194da:	46bd      	mov	sp, r7
 80194dc:	bd80      	pop	{r7, pc}
 80194de:	bf00      	nop
 80194e0:	20001d80 	.word	0x20001d80

080194e4 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 80194e4:	b580      	push	{r7, lr}
 80194e6:	b084      	sub	sp, #16
 80194e8:	af00      	add	r7, sp, #0
 80194ea:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 80194ec:	4b0c      	ldr	r3, [pc, #48]	@ (8019520 <SUBGRF_SetTx+0x3c>)
 80194ee:	2204      	movs	r2, #4
 80194f0:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80194f2:	687b      	ldr	r3, [r7, #4]
 80194f4:	0c1b      	lsrs	r3, r3, #16
 80194f6:	b2db      	uxtb	r3, r3
 80194f8:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80194fa:	687b      	ldr	r3, [r7, #4]
 80194fc:	0a1b      	lsrs	r3, r3, #8
 80194fe:	b2db      	uxtb	r3, r3
 8019500:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8019502:	687b      	ldr	r3, [r7, #4]
 8019504:	b2db      	uxtb	r3, r3
 8019506:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8019508:	f107 030c 	add.w	r3, r7, #12
 801950c:	2203      	movs	r2, #3
 801950e:	4619      	mov	r1, r3
 8019510:	2083      	movs	r0, #131	@ 0x83
 8019512:	f000 fdfb 	bl	801a10c <SUBGRF_WriteCommand>
}
 8019516:	bf00      	nop
 8019518:	3710      	adds	r7, #16
 801951a:	46bd      	mov	sp, r7
 801951c:	bd80      	pop	{r7, pc}
 801951e:	bf00      	nop
 8019520:	20001d80 	.word	0x20001d80

08019524 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 8019524:	b580      	push	{r7, lr}
 8019526:	b084      	sub	sp, #16
 8019528:	af00      	add	r7, sp, #0
 801952a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801952c:	4b0c      	ldr	r3, [pc, #48]	@ (8019560 <SUBGRF_SetRx+0x3c>)
 801952e:	2205      	movs	r2, #5
 8019530:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8019532:	687b      	ldr	r3, [r7, #4]
 8019534:	0c1b      	lsrs	r3, r3, #16
 8019536:	b2db      	uxtb	r3, r3
 8019538:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801953a:	687b      	ldr	r3, [r7, #4]
 801953c:	0a1b      	lsrs	r3, r3, #8
 801953e:	b2db      	uxtb	r3, r3
 8019540:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8019542:	687b      	ldr	r3, [r7, #4]
 8019544:	b2db      	uxtb	r3, r3
 8019546:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8019548:	f107 030c 	add.w	r3, r7, #12
 801954c:	2203      	movs	r2, #3
 801954e:	4619      	mov	r1, r3
 8019550:	2082      	movs	r0, #130	@ 0x82
 8019552:	f000 fddb 	bl	801a10c <SUBGRF_WriteCommand>
}
 8019556:	bf00      	nop
 8019558:	3710      	adds	r7, #16
 801955a:	46bd      	mov	sp, r7
 801955c:	bd80      	pop	{r7, pc}
 801955e:	bf00      	nop
 8019560:	20001d80 	.word	0x20001d80

08019564 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 8019564:	b580      	push	{r7, lr}
 8019566:	b084      	sub	sp, #16
 8019568:	af00      	add	r7, sp, #0
 801956a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801956c:	4b0e      	ldr	r3, [pc, #56]	@ (80195a8 <SUBGRF_SetRxBoosted+0x44>)
 801956e:	2205      	movs	r2, #5
 8019570:	701a      	strb	r2, [r3, #0]

    /* ST_WORKAROUND_BEGIN: Sigfox patch > 0x96 replaced by 0x97 */
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 8019572:	2197      	movs	r1, #151	@ 0x97
 8019574:	f640 00ac 	movw	r0, #2220	@ 0x8ac
 8019578:	f000 fd18 	bl	8019fac <SUBGRF_WriteRegister>
    /* ST_WORKAROUND_END */

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801957c:	687b      	ldr	r3, [r7, #4]
 801957e:	0c1b      	lsrs	r3, r3, #16
 8019580:	b2db      	uxtb	r3, r3
 8019582:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8019584:	687b      	ldr	r3, [r7, #4]
 8019586:	0a1b      	lsrs	r3, r3, #8
 8019588:	b2db      	uxtb	r3, r3
 801958a:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801958c:	687b      	ldr	r3, [r7, #4]
 801958e:	b2db      	uxtb	r3, r3
 8019590:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8019592:	f107 030c 	add.w	r3, r7, #12
 8019596:	2203      	movs	r2, #3
 8019598:	4619      	mov	r1, r3
 801959a:	2082      	movs	r0, #130	@ 0x82
 801959c:	f000 fdb6 	bl	801a10c <SUBGRF_WriteCommand>
}
 80195a0:	bf00      	nop
 80195a2:	3710      	adds	r7, #16
 80195a4:	46bd      	mov	sp, r7
 80195a6:	bd80      	pop	{r7, pc}
 80195a8:	20001d80 	.word	0x20001d80

080195ac <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 80195ac:	b580      	push	{r7, lr}
 80195ae:	b084      	sub	sp, #16
 80195b0:	af00      	add	r7, sp, #0
 80195b2:	6078      	str	r0, [r7, #4]
 80195b4:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 80195b6:	687b      	ldr	r3, [r7, #4]
 80195b8:	0c1b      	lsrs	r3, r3, #16
 80195ba:	b2db      	uxtb	r3, r3
 80195bc:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 80195be:	687b      	ldr	r3, [r7, #4]
 80195c0:	0a1b      	lsrs	r3, r3, #8
 80195c2:	b2db      	uxtb	r3, r3
 80195c4:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 80195c6:	687b      	ldr	r3, [r7, #4]
 80195c8:	b2db      	uxtb	r3, r3
 80195ca:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 80195cc:	683b      	ldr	r3, [r7, #0]
 80195ce:	0c1b      	lsrs	r3, r3, #16
 80195d0:	b2db      	uxtb	r3, r3
 80195d2:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 80195d4:	683b      	ldr	r3, [r7, #0]
 80195d6:	0a1b      	lsrs	r3, r3, #8
 80195d8:	b2db      	uxtb	r3, r3
 80195da:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 80195dc:	683b      	ldr	r3, [r7, #0]
 80195de:	b2db      	uxtb	r3, r3
 80195e0:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 80195e2:	f107 0308 	add.w	r3, r7, #8
 80195e6:	2206      	movs	r2, #6
 80195e8:	4619      	mov	r1, r3
 80195ea:	2094      	movs	r0, #148	@ 0x94
 80195ec:	f000 fd8e 	bl	801a10c <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 80195f0:	4b03      	ldr	r3, [pc, #12]	@ (8019600 <SUBGRF_SetRxDutyCycle+0x54>)
 80195f2:	2206      	movs	r2, #6
 80195f4:	701a      	strb	r2, [r3, #0]
}
 80195f6:	bf00      	nop
 80195f8:	3710      	adds	r7, #16
 80195fa:	46bd      	mov	sp, r7
 80195fc:	bd80      	pop	{r7, pc}
 80195fe:	bf00      	nop
 8019600:	20001d80 	.word	0x20001d80

08019604 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 8019604:	b580      	push	{r7, lr}
 8019606:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 8019608:	2200      	movs	r2, #0
 801960a:	2100      	movs	r1, #0
 801960c:	20c5      	movs	r0, #197	@ 0xc5
 801960e:	f000 fd7d 	bl	801a10c <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 8019612:	4b02      	ldr	r3, [pc, #8]	@ (801961c <SUBGRF_SetCad+0x18>)
 8019614:	2207      	movs	r2, #7
 8019616:	701a      	strb	r2, [r3, #0]
}
 8019618:	bf00      	nop
 801961a:	bd80      	pop	{r7, pc}
 801961c:	20001d80 	.word	0x20001d80

08019620 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 8019620:	b580      	push	{r7, lr}
 8019622:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8019624:	2200      	movs	r2, #0
 8019626:	2100      	movs	r1, #0
 8019628:	20d1      	movs	r0, #209	@ 0xd1
 801962a:	f000 fd6f 	bl	801a10c <SUBGRF_WriteCommand>
}
 801962e:	bf00      	nop
 8019630:	bd80      	pop	{r7, pc}

08019632 <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 8019632:	b580      	push	{r7, lr}
 8019634:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 8019636:	2200      	movs	r2, #0
 8019638:	2100      	movs	r1, #0
 801963a:	20d2      	movs	r0, #210	@ 0xd2
 801963c:	f000 fd66 	bl	801a10c <SUBGRF_WriteCommand>
}
 8019640:	bf00      	nop
 8019642:	bd80      	pop	{r7, pc}

08019644 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 8019644:	b580      	push	{r7, lr}
 8019646:	b082      	sub	sp, #8
 8019648:	af00      	add	r7, sp, #0
 801964a:	4603      	mov	r3, r0
 801964c:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 801964e:	1dfb      	adds	r3, r7, #7
 8019650:	2201      	movs	r2, #1
 8019652:	4619      	mov	r1, r3
 8019654:	209f      	movs	r0, #159	@ 0x9f
 8019656:	f000 fd59 	bl	801a10c <SUBGRF_WriteCommand>
}
 801965a:	bf00      	nop
 801965c:	3708      	adds	r7, #8
 801965e:	46bd      	mov	sp, r7
 8019660:	bd80      	pop	{r7, pc}

08019662 <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 8019662:	b580      	push	{r7, lr}
 8019664:	b084      	sub	sp, #16
 8019666:	af00      	add	r7, sp, #0
 8019668:	4603      	mov	r3, r0
 801966a:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 801966c:	1dfb      	adds	r3, r7, #7
 801966e:	2201      	movs	r2, #1
 8019670:	4619      	mov	r1, r3
 8019672:	20a0      	movs	r0, #160	@ 0xa0
 8019674:	f000 fd4a 	bl	801a10c <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 8019678:	79fb      	ldrb	r3, [r7, #7]
 801967a:	2b3f      	cmp	r3, #63	@ 0x3f
 801967c:	d91c      	bls.n	80196b8 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 801967e:	79fb      	ldrb	r3, [r7, #7]
 8019680:	085b      	lsrs	r3, r3, #1
 8019682:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 8019684:	2300      	movs	r3, #0
 8019686:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 8019688:	2300      	movs	r3, #0
 801968a:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 801968c:	e005      	b.n	801969a <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 801968e:	7bfb      	ldrb	r3, [r7, #15]
 8019690:	089b      	lsrs	r3, r3, #2
 8019692:	73fb      	strb	r3, [r7, #15]
            exp++;
 8019694:	7bbb      	ldrb	r3, [r7, #14]
 8019696:	3301      	adds	r3, #1
 8019698:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 801969a:	7bfb      	ldrb	r3, [r7, #15]
 801969c:	2b1f      	cmp	r3, #31
 801969e:	d8f6      	bhi.n	801968e <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 80196a0:	7bfb      	ldrb	r3, [r7, #15]
 80196a2:	00db      	lsls	r3, r3, #3
 80196a4:	b2da      	uxtb	r2, r3
 80196a6:	7bbb      	ldrb	r3, [r7, #14]
 80196a8:	4413      	add	r3, r2
 80196aa:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 80196ac:	7b7b      	ldrb	r3, [r7, #13]
 80196ae:	4619      	mov	r1, r3
 80196b0:	f240 7006 	movw	r0, #1798	@ 0x706
 80196b4:	f000 fc7a 	bl	8019fac <SUBGRF_WriteRegister>
    }
}
 80196b8:	bf00      	nop
 80196ba:	3710      	adds	r7, #16
 80196bc:	46bd      	mov	sp, r7
 80196be:	bd80      	pop	{r7, pc}

080196c0 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 80196c0:	b580      	push	{r7, lr}
 80196c2:	b082      	sub	sp, #8
 80196c4:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Get RegulatorMode value from RBI */
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 80196c6:	f7f1 fb10 	bl	800acea <RBI_IsDCDC>
 80196ca:	4603      	mov	r3, r0
 80196cc:	2b01      	cmp	r3, #1
 80196ce:	d102      	bne.n	80196d6 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 80196d0:	2301      	movs	r3, #1
 80196d2:	71fb      	strb	r3, [r7, #7]
 80196d4:	e001      	b.n	80196da <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 80196d6:	2300      	movs	r3, #0
 80196d8:	71fb      	strb	r3, [r7, #7]
    }
    /* ST_WORKAROUND_END */
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 80196da:	1dfb      	adds	r3, r7, #7
 80196dc:	2201      	movs	r2, #1
 80196de:	4619      	mov	r1, r3
 80196e0:	2096      	movs	r0, #150	@ 0x96
 80196e2:	f000 fd13 	bl	801a10c <SUBGRF_WriteCommand>
}
 80196e6:	bf00      	nop
 80196e8:	3708      	adds	r7, #8
 80196ea:	46bd      	mov	sp, r7
 80196ec:	bd80      	pop	{r7, pc}

080196ee <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 80196ee:	b580      	push	{r7, lr}
 80196f0:	b084      	sub	sp, #16
 80196f2:	af00      	add	r7, sp, #0
 80196f4:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80196f6:	793b      	ldrb	r3, [r7, #4]
 80196f8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80196fc:	b2db      	uxtb	r3, r3
 80196fe:	b25b      	sxtb	r3, r3
 8019700:	019b      	lsls	r3, r3, #6
 8019702:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8019704:	793b      	ldrb	r3, [r7, #4]
 8019706:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801970a:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801970c:	b25b      	sxtb	r3, r3
 801970e:	015b      	lsls	r3, r3, #5
 8019710:	b25b      	sxtb	r3, r3
 8019712:	4313      	orrs	r3, r2
 8019714:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8019716:	793b      	ldrb	r3, [r7, #4]
 8019718:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801971c:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801971e:	b25b      	sxtb	r3, r3
 8019720:	011b      	lsls	r3, r3, #4
 8019722:	b25b      	sxtb	r3, r3
 8019724:	4313      	orrs	r3, r2
 8019726:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8019728:	793b      	ldrb	r3, [r7, #4]
 801972a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801972e:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8019730:	b25b      	sxtb	r3, r3
 8019732:	00db      	lsls	r3, r3, #3
 8019734:	b25b      	sxtb	r3, r3
 8019736:	4313      	orrs	r3, r2
 8019738:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801973a:	793b      	ldrb	r3, [r7, #4]
 801973c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8019740:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8019742:	b25b      	sxtb	r3, r3
 8019744:	009b      	lsls	r3, r3, #2
 8019746:	b25b      	sxtb	r3, r3
 8019748:	4313      	orrs	r3, r2
 801974a:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801974c:	793b      	ldrb	r3, [r7, #4]
 801974e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8019752:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8019754:	b25b      	sxtb	r3, r3
 8019756:	005b      	lsls	r3, r3, #1
 8019758:	b25b      	sxtb	r3, r3
 801975a:	4313      	orrs	r3, r2
 801975c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 801975e:	793b      	ldrb	r3, [r7, #4]
 8019760:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8019764:	b2db      	uxtb	r3, r3
 8019766:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8019768:	4313      	orrs	r3, r2
 801976a:	b25b      	sxtb	r3, r3
 801976c:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801976e:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8019770:	f107 030f 	add.w	r3, r7, #15
 8019774:	2201      	movs	r2, #1
 8019776:	4619      	mov	r1, r3
 8019778:	2089      	movs	r0, #137	@ 0x89
 801977a:	f000 fcc7 	bl	801a10c <SUBGRF_WriteCommand>
}
 801977e:	bf00      	nop
 8019780:	3710      	adds	r7, #16
 8019782:	46bd      	mov	sp, r7
 8019784:	bd80      	pop	{r7, pc}
	...

08019788 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 8019788:	b580      	push	{r7, lr}
 801978a:	b084      	sub	sp, #16
 801978c:	af00      	add	r7, sp, #0
 801978e:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 8019790:	687b      	ldr	r3, [r7, #4]
 8019792:	4a1b      	ldr	r2, [pc, #108]	@ (8019800 <SUBGRF_CalibrateImage+0x78>)
 8019794:	4293      	cmp	r3, r2
 8019796:	d904      	bls.n	80197a2 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 8019798:	23e1      	movs	r3, #225	@ 0xe1
 801979a:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 801979c:	23e9      	movs	r3, #233	@ 0xe9
 801979e:	737b      	strb	r3, [r7, #13]
 80197a0:	e022      	b.n	80197e8 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 850000000 )
 80197a2:	687b      	ldr	r3, [r7, #4]
 80197a4:	4a17      	ldr	r2, [pc, #92]	@ (8019804 <SUBGRF_CalibrateImage+0x7c>)
 80197a6:	4293      	cmp	r3, r2
 80197a8:	d904      	bls.n	80197b4 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 80197aa:	23d7      	movs	r3, #215	@ 0xd7
 80197ac:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 80197ae:	23db      	movs	r3, #219	@ 0xdb
 80197b0:	737b      	strb	r3, [r7, #13]
 80197b2:	e019      	b.n	80197e8 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 770000000 )
 80197b4:	687b      	ldr	r3, [r7, #4]
 80197b6:	4a14      	ldr	r2, [pc, #80]	@ (8019808 <SUBGRF_CalibrateImage+0x80>)
 80197b8:	4293      	cmp	r3, r2
 80197ba:	d904      	bls.n	80197c6 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 80197bc:	23c1      	movs	r3, #193	@ 0xc1
 80197be:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 80197c0:	23c5      	movs	r3, #197	@ 0xc5
 80197c2:	737b      	strb	r3, [r7, #13]
 80197c4:	e010      	b.n	80197e8 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 460000000 )
 80197c6:	687b      	ldr	r3, [r7, #4]
 80197c8:	4a10      	ldr	r2, [pc, #64]	@ (801980c <SUBGRF_CalibrateImage+0x84>)
 80197ca:	4293      	cmp	r3, r2
 80197cc:	d904      	bls.n	80197d8 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 80197ce:	2375      	movs	r3, #117	@ 0x75
 80197d0:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 80197d2:	2381      	movs	r3, #129	@ 0x81
 80197d4:	737b      	strb	r3, [r7, #13]
 80197d6:	e007      	b.n	80197e8 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 425000000 )
 80197d8:	687b      	ldr	r3, [r7, #4]
 80197da:	4a0d      	ldr	r2, [pc, #52]	@ (8019810 <SUBGRF_CalibrateImage+0x88>)
 80197dc:	4293      	cmp	r3, r2
 80197de:	d903      	bls.n	80197e8 <SUBGRF_CalibrateImage+0x60>
    {
        calFreq[0] = 0x6B;
 80197e0:	236b      	movs	r3, #107	@ 0x6b
 80197e2:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 80197e4:	236f      	movs	r3, #111	@ 0x6f
 80197e6:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 80197e8:	f107 030c 	add.w	r3, r7, #12
 80197ec:	2202      	movs	r2, #2
 80197ee:	4619      	mov	r1, r3
 80197f0:	2098      	movs	r0, #152	@ 0x98
 80197f2:	f000 fc8b 	bl	801a10c <SUBGRF_WriteCommand>
}
 80197f6:	bf00      	nop
 80197f8:	3710      	adds	r7, #16
 80197fa:	46bd      	mov	sp, r7
 80197fc:	bd80      	pop	{r7, pc}
 80197fe:	bf00      	nop
 8019800:	35a4e900 	.word	0x35a4e900
 8019804:	32a9f880 	.word	0x32a9f880
 8019808:	2de54480 	.word	0x2de54480
 801980c:	1b6b0b00 	.word	0x1b6b0b00
 8019810:	1954fc40 	.word	0x1954fc40

08019814 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 8019814:	b590      	push	{r4, r7, lr}
 8019816:	b085      	sub	sp, #20
 8019818:	af00      	add	r7, sp, #0
 801981a:	4604      	mov	r4, r0
 801981c:	4608      	mov	r0, r1
 801981e:	4611      	mov	r1, r2
 8019820:	461a      	mov	r2, r3
 8019822:	4623      	mov	r3, r4
 8019824:	71fb      	strb	r3, [r7, #7]
 8019826:	4603      	mov	r3, r0
 8019828:	71bb      	strb	r3, [r7, #6]
 801982a:	460b      	mov	r3, r1
 801982c:	717b      	strb	r3, [r7, #5]
 801982e:	4613      	mov	r3, r2
 8019830:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 8019832:	79fb      	ldrb	r3, [r7, #7]
 8019834:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 8019836:	79bb      	ldrb	r3, [r7, #6]
 8019838:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 801983a:	797b      	ldrb	r3, [r7, #5]
 801983c:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 801983e:	793b      	ldrb	r3, [r7, #4]
 8019840:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8019842:	f107 030c 	add.w	r3, r7, #12
 8019846:	2204      	movs	r2, #4
 8019848:	4619      	mov	r1, r3
 801984a:	2095      	movs	r0, #149	@ 0x95
 801984c:	f000 fc5e 	bl	801a10c <SUBGRF_WriteCommand>
}
 8019850:	bf00      	nop
 8019852:	3714      	adds	r7, #20
 8019854:	46bd      	mov	sp, r7
 8019856:	bd90      	pop	{r4, r7, pc}

08019858 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8019858:	b590      	push	{r4, r7, lr}
 801985a:	b085      	sub	sp, #20
 801985c:	af00      	add	r7, sp, #0
 801985e:	4604      	mov	r4, r0
 8019860:	4608      	mov	r0, r1
 8019862:	4611      	mov	r1, r2
 8019864:	461a      	mov	r2, r3
 8019866:	4623      	mov	r3, r4
 8019868:	80fb      	strh	r3, [r7, #6]
 801986a:	4603      	mov	r3, r0
 801986c:	80bb      	strh	r3, [r7, #4]
 801986e:	460b      	mov	r3, r1
 8019870:	807b      	strh	r3, [r7, #2]
 8019872:	4613      	mov	r3, r2
 8019874:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8019876:	88fb      	ldrh	r3, [r7, #6]
 8019878:	0a1b      	lsrs	r3, r3, #8
 801987a:	b29b      	uxth	r3, r3
 801987c:	b2db      	uxtb	r3, r3
 801987e:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8019880:	88fb      	ldrh	r3, [r7, #6]
 8019882:	b2db      	uxtb	r3, r3
 8019884:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8019886:	88bb      	ldrh	r3, [r7, #4]
 8019888:	0a1b      	lsrs	r3, r3, #8
 801988a:	b29b      	uxth	r3, r3
 801988c:	b2db      	uxtb	r3, r3
 801988e:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8019890:	88bb      	ldrh	r3, [r7, #4]
 8019892:	b2db      	uxtb	r3, r3
 8019894:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8019896:	887b      	ldrh	r3, [r7, #2]
 8019898:	0a1b      	lsrs	r3, r3, #8
 801989a:	b29b      	uxth	r3, r3
 801989c:	b2db      	uxtb	r3, r3
 801989e:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 80198a0:	887b      	ldrh	r3, [r7, #2]
 80198a2:	b2db      	uxtb	r3, r3
 80198a4:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 80198a6:	883b      	ldrh	r3, [r7, #0]
 80198a8:	0a1b      	lsrs	r3, r3, #8
 80198aa:	b29b      	uxth	r3, r3
 80198ac:	b2db      	uxtb	r3, r3
 80198ae:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 80198b0:	883b      	ldrh	r3, [r7, #0]
 80198b2:	b2db      	uxtb	r3, r3
 80198b4:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 80198b6:	f107 0308 	add.w	r3, r7, #8
 80198ba:	2208      	movs	r2, #8
 80198bc:	4619      	mov	r1, r3
 80198be:	2008      	movs	r0, #8
 80198c0:	f000 fc24 	bl	801a10c <SUBGRF_WriteCommand>
}
 80198c4:	bf00      	nop
 80198c6:	3714      	adds	r7, #20
 80198c8:	46bd      	mov	sp, r7
 80198ca:	bd90      	pop	{r4, r7, pc}

080198cc <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 80198cc:	b580      	push	{r7, lr}
 80198ce:	b084      	sub	sp, #16
 80198d0:	af00      	add	r7, sp, #0
 80198d2:	4603      	mov	r3, r0
 80198d4:	6039      	str	r1, [r7, #0]
 80198d6:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 80198d8:	79fb      	ldrb	r3, [r7, #7]
 80198da:	f003 0307 	and.w	r3, r3, #7
 80198de:	b2db      	uxtb	r3, r3
 80198e0:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80198e2:	683b      	ldr	r3, [r7, #0]
 80198e4:	0c1b      	lsrs	r3, r3, #16
 80198e6:	b2db      	uxtb	r3, r3
 80198e8:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80198ea:	683b      	ldr	r3, [r7, #0]
 80198ec:	0a1b      	lsrs	r3, r3, #8
 80198ee:	b2db      	uxtb	r3, r3
 80198f0:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 80198f2:	683b      	ldr	r3, [r7, #0]
 80198f4:	b2db      	uxtb	r3, r3
 80198f6:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 80198f8:	f107 030c 	add.w	r3, r7, #12
 80198fc:	2204      	movs	r2, #4
 80198fe:	4619      	mov	r1, r3
 8019900:	2097      	movs	r0, #151	@ 0x97
 8019902:	f000 fc03 	bl	801a10c <SUBGRF_WriteCommand>
}
 8019906:	bf00      	nop
 8019908:	3710      	adds	r7, #16
 801990a:	46bd      	mov	sp, r7
 801990c:	bd80      	pop	{r7, pc}
	...

08019910 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 8019910:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8019914:	b084      	sub	sp, #16
 8019916:	af00      	add	r7, sp, #0
 8019918:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 801991a:	2300      	movs	r3, #0
 801991c:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 801991e:	4b1d      	ldr	r3, [pc, #116]	@ (8019994 <SUBGRF_SetRfFrequency+0x84>)
 8019920:	781b      	ldrb	r3, [r3, #0]
 8019922:	f083 0301 	eor.w	r3, r3, #1
 8019926:	b2db      	uxtb	r3, r3
 8019928:	2b00      	cmp	r3, #0
 801992a:	d005      	beq.n	8019938 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 801992c:	6878      	ldr	r0, [r7, #4]
 801992e:	f7ff ff2b 	bl	8019788 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 8019932:	4b18      	ldr	r3, [pc, #96]	@ (8019994 <SUBGRF_SetRfFrequency+0x84>)
 8019934:	2201      	movs	r2, #1
 8019936:	701a      	strb	r2, [r3, #0]
    }
    /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
    SX_FREQ_TO_CHANNEL(chan, frequency);
 8019938:	687b      	ldr	r3, [r7, #4]
 801993a:	2200      	movs	r2, #0
 801993c:	461c      	mov	r4, r3
 801993e:	4615      	mov	r5, r2
 8019940:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8019944:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8019948:	4a13      	ldr	r2, [pc, #76]	@ (8019998 <SUBGRF_SetRfFrequency+0x88>)
 801994a:	f04f 0300 	mov.w	r3, #0
 801994e:	4640      	mov	r0, r8
 8019950:	4649      	mov	r1, r9
 8019952:	f7e7 fa35 	bl	8000dc0 <__aeabi_uldivmod>
 8019956:	4602      	mov	r2, r0
 8019958:	460b      	mov	r3, r1
 801995a:	4613      	mov	r3, r2
 801995c:	60fb      	str	r3, [r7, #12]
    /* ST_WORKAROUND_END */
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 801995e:	68fb      	ldr	r3, [r7, #12]
 8019960:	0e1b      	lsrs	r3, r3, #24
 8019962:	b2db      	uxtb	r3, r3
 8019964:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8019966:	68fb      	ldr	r3, [r7, #12]
 8019968:	0c1b      	lsrs	r3, r3, #16
 801996a:	b2db      	uxtb	r3, r3
 801996c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 801996e:	68fb      	ldr	r3, [r7, #12]
 8019970:	0a1b      	lsrs	r3, r3, #8
 8019972:	b2db      	uxtb	r3, r3
 8019974:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8019976:	68fb      	ldr	r3, [r7, #12]
 8019978:	b2db      	uxtb	r3, r3
 801997a:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 801997c:	f107 0308 	add.w	r3, r7, #8
 8019980:	2204      	movs	r2, #4
 8019982:	4619      	mov	r1, r3
 8019984:	2086      	movs	r0, #134	@ 0x86
 8019986:	f000 fbc1 	bl	801a10c <SUBGRF_WriteCommand>
}
 801998a:	bf00      	nop
 801998c:	3710      	adds	r7, #16
 801998e:	46bd      	mov	sp, r7
 8019990:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8019994:	20001d88 	.word	0x20001d88
 8019998:	01e84800 	.word	0x01e84800

0801999c <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 801999c:	b580      	push	{r7, lr}
 801999e:	b082      	sub	sp, #8
 80199a0:	af00      	add	r7, sp, #0
 80199a2:	4603      	mov	r3, r0
 80199a4:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 80199a6:	79fa      	ldrb	r2, [r7, #7]
 80199a8:	4b09      	ldr	r3, [pc, #36]	@ (80199d0 <SUBGRF_SetPacketType+0x34>)
 80199aa:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 80199ac:	79fb      	ldrb	r3, [r7, #7]
 80199ae:	2b00      	cmp	r3, #0
 80199b0:	d104      	bne.n	80199bc <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 80199b2:	2100      	movs	r1, #0
 80199b4:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 80199b8:	f000 faf8 	bl	8019fac <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 80199bc:	1dfb      	adds	r3, r7, #7
 80199be:	2201      	movs	r2, #1
 80199c0:	4619      	mov	r1, r3
 80199c2:	208a      	movs	r0, #138	@ 0x8a
 80199c4:	f000 fba2 	bl	801a10c <SUBGRF_WriteCommand>
}
 80199c8:	bf00      	nop
 80199ca:	3708      	adds	r7, #8
 80199cc:	46bd      	mov	sp, r7
 80199ce:	bd80      	pop	{r7, pc}
 80199d0:	20001d81 	.word	0x20001d81

080199d4 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 80199d4:	b480      	push	{r7}
 80199d6:	af00      	add	r7, sp, #0
    return PacketType;
 80199d8:	4b02      	ldr	r3, [pc, #8]	@ (80199e4 <SUBGRF_GetPacketType+0x10>)
 80199da:	781b      	ldrb	r3, [r3, #0]
}
 80199dc:	4618      	mov	r0, r3
 80199de:	46bd      	mov	sp, r7
 80199e0:	bc80      	pop	{r7}
 80199e2:	4770      	bx	lr
 80199e4:	20001d81 	.word	0x20001d81

080199e8 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 80199e8:	b580      	push	{r7, lr}
 80199ea:	b084      	sub	sp, #16
 80199ec:	af00      	add	r7, sp, #0
 80199ee:	4603      	mov	r3, r0
 80199f0:	71fb      	strb	r3, [r7, #7]
 80199f2:	460b      	mov	r3, r1
 80199f4:	71bb      	strb	r3, [r7, #6]
 80199f6:	4613      	mov	r3, r2
 80199f8:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 80199fa:	79fb      	ldrb	r3, [r7, #7]
 80199fc:	2b01      	cmp	r3, #1
 80199fe:	d149      	bne.n	8019a94 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 8019a00:	2000      	movs	r0, #0
 8019a02:	f7f1 f979 	bl	800acf8 <RBI_GetRFOMaxPowerConfig>
 8019a06:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 8019a08:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8019a0c:	68fa      	ldr	r2, [r7, #12]
 8019a0e:	429a      	cmp	r2, r3
 8019a10:	da01      	bge.n	8019a16 <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 8019a12:	68fb      	ldr	r3, [r7, #12]
 8019a14:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 8019a16:	68fb      	ldr	r3, [r7, #12]
 8019a18:	2b0e      	cmp	r3, #14
 8019a1a:	d10e      	bne.n	8019a3a <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 8019a1c:	2301      	movs	r3, #1
 8019a1e:	2201      	movs	r2, #1
 8019a20:	2100      	movs	r1, #0
 8019a22:	2004      	movs	r0, #4
 8019a24:	f7ff fef6 	bl	8019814 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8019a28:	79ba      	ldrb	r2, [r7, #6]
 8019a2a:	68fb      	ldr	r3, [r7, #12]
 8019a2c:	b2db      	uxtb	r3, r3
 8019a2e:	1ad3      	subs	r3, r2, r3
 8019a30:	b2db      	uxtb	r3, r3
 8019a32:	330e      	adds	r3, #14
 8019a34:	b2db      	uxtb	r3, r3
 8019a36:	71bb      	strb	r3, [r7, #6]
 8019a38:	e01f      	b.n	8019a7a <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 8019a3a:	68fb      	ldr	r3, [r7, #12]
 8019a3c:	2b0a      	cmp	r3, #10
 8019a3e:	d10e      	bne.n	8019a5e <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 8019a40:	2301      	movs	r3, #1
 8019a42:	2201      	movs	r2, #1
 8019a44:	2100      	movs	r1, #0
 8019a46:	2001      	movs	r0, #1
 8019a48:	f7ff fee4 	bl	8019814 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 8019a4c:	79ba      	ldrb	r2, [r7, #6]
 8019a4e:	68fb      	ldr	r3, [r7, #12]
 8019a50:	b2db      	uxtb	r3, r3
 8019a52:	1ad3      	subs	r3, r2, r3
 8019a54:	b2db      	uxtb	r3, r3
 8019a56:	330d      	adds	r3, #13
 8019a58:	b2db      	uxtb	r3, r3
 8019a5a:	71bb      	strb	r3, [r7, #6]
 8019a5c:	e00d      	b.n	8019a7a <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x06, 0x00, 0x01, 0x01);
 8019a5e:	2301      	movs	r3, #1
 8019a60:	2201      	movs	r2, #1
 8019a62:	2100      	movs	r1, #0
 8019a64:	2006      	movs	r0, #6
 8019a66:	f7ff fed5 	bl	8019814 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8019a6a:	79ba      	ldrb	r2, [r7, #6]
 8019a6c:	68fb      	ldr	r3, [r7, #12]
 8019a6e:	b2db      	uxtb	r3, r3
 8019a70:	1ad3      	subs	r3, r2, r3
 8019a72:	b2db      	uxtb	r3, r3
 8019a74:	330e      	adds	r3, #14
 8019a76:	b2db      	uxtb	r3, r3
 8019a78:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 8019a7a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8019a7e:	f113 0f11 	cmn.w	r3, #17
 8019a82:	da01      	bge.n	8019a88 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 8019a84:	23ef      	movs	r3, #239	@ 0xef
 8019a86:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 8019a88:	2118      	movs	r1, #24
 8019a8a:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8019a8e:	f000 fa8d 	bl	8019fac <SUBGRF_WriteRegister>
 8019a92:	e067      	b.n	8019b64 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 8019a94:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 8019a98:	f000 fa9c 	bl	8019fd4 <SUBGRF_ReadRegister>
 8019a9c:	4603      	mov	r3, r0
 8019a9e:	f043 031e 	orr.w	r3, r3, #30
 8019aa2:	b2db      	uxtb	r3, r3
 8019aa4:	4619      	mov	r1, r3
 8019aa6:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 8019aaa:	f000 fa7f 	bl	8019fac <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 8019aae:	2001      	movs	r0, #1
 8019ab0:	f7f1 f922 	bl	800acf8 <RBI_GetRFOMaxPowerConfig>
 8019ab4:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 8019ab6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8019aba:	68fa      	ldr	r2, [r7, #12]
 8019abc:	429a      	cmp	r2, r3
 8019abe:	da01      	bge.n	8019ac4 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 8019ac0:	68fb      	ldr	r3, [r7, #12]
 8019ac2:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 8019ac4:	68fb      	ldr	r3, [r7, #12]
 8019ac6:	2b14      	cmp	r3, #20
 8019ac8:	d10e      	bne.n	8019ae8 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 8019aca:	2301      	movs	r3, #1
 8019acc:	2200      	movs	r2, #0
 8019ace:	2105      	movs	r1, #5
 8019ad0:	2003      	movs	r0, #3
 8019ad2:	f7ff fe9f 	bl	8019814 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8019ad6:	79ba      	ldrb	r2, [r7, #6]
 8019ad8:	68fb      	ldr	r3, [r7, #12]
 8019ada:	b2db      	uxtb	r3, r3
 8019adc:	1ad3      	subs	r3, r2, r3
 8019ade:	b2db      	uxtb	r3, r3
 8019ae0:	3316      	adds	r3, #22
 8019ae2:	b2db      	uxtb	r3, r3
 8019ae4:	71bb      	strb	r3, [r7, #6]
 8019ae6:	e031      	b.n	8019b4c <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 8019ae8:	68fb      	ldr	r3, [r7, #12]
 8019aea:	2b11      	cmp	r3, #17
 8019aec:	d10e      	bne.n	8019b0c <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 8019aee:	2301      	movs	r3, #1
 8019af0:	2200      	movs	r2, #0
 8019af2:	2103      	movs	r1, #3
 8019af4:	2002      	movs	r0, #2
 8019af6:	f7ff fe8d 	bl	8019814 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8019afa:	79ba      	ldrb	r2, [r7, #6]
 8019afc:	68fb      	ldr	r3, [r7, #12]
 8019afe:	b2db      	uxtb	r3, r3
 8019b00:	1ad3      	subs	r3, r2, r3
 8019b02:	b2db      	uxtb	r3, r3
 8019b04:	3316      	adds	r3, #22
 8019b06:	b2db      	uxtb	r3, r3
 8019b08:	71bb      	strb	r3, [r7, #6]
 8019b0a:	e01f      	b.n	8019b4c <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 8019b0c:	68fb      	ldr	r3, [r7, #12]
 8019b0e:	2b0e      	cmp	r3, #14
 8019b10:	d10e      	bne.n	8019b30 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 8019b12:	2301      	movs	r3, #1
 8019b14:	2200      	movs	r2, #0
 8019b16:	2102      	movs	r1, #2
 8019b18:	2002      	movs	r0, #2
 8019b1a:	f7ff fe7b 	bl	8019814 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8019b1e:	79ba      	ldrb	r2, [r7, #6]
 8019b20:	68fb      	ldr	r3, [r7, #12]
 8019b22:	b2db      	uxtb	r3, r3
 8019b24:	1ad3      	subs	r3, r2, r3
 8019b26:	b2db      	uxtb	r3, r3
 8019b28:	330e      	adds	r3, #14
 8019b2a:	b2db      	uxtb	r3, r3
 8019b2c:	71bb      	strb	r3, [r7, #6]
 8019b2e:	e00d      	b.n	8019b4c <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 8019b30:	2301      	movs	r3, #1
 8019b32:	2200      	movs	r2, #0
 8019b34:	2107      	movs	r1, #7
 8019b36:	2004      	movs	r0, #4
 8019b38:	f7ff fe6c 	bl	8019814 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8019b3c:	79ba      	ldrb	r2, [r7, #6]
 8019b3e:	68fb      	ldr	r3, [r7, #12]
 8019b40:	b2db      	uxtb	r3, r3
 8019b42:	1ad3      	subs	r3, r2, r3
 8019b44:	b2db      	uxtb	r3, r3
 8019b46:	3316      	adds	r3, #22
 8019b48:	b2db      	uxtb	r3, r3
 8019b4a:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 8019b4c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8019b50:	f113 0f09 	cmn.w	r3, #9
 8019b54:	da01      	bge.n	8019b5a <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 8019b56:	23f7      	movs	r3, #247	@ 0xf7
 8019b58:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 8019b5a:	2138      	movs	r1, #56	@ 0x38
 8019b5c:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8019b60:	f000 fa24 	bl	8019fac <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 8019b64:	79bb      	ldrb	r3, [r7, #6]
 8019b66:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 8019b68:	797b      	ldrb	r3, [r7, #5]
 8019b6a:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 8019b6c:	f107 0308 	add.w	r3, r7, #8
 8019b70:	2202      	movs	r2, #2
 8019b72:	4619      	mov	r1, r3
 8019b74:	208e      	movs	r0, #142	@ 0x8e
 8019b76:	f000 fac9 	bl	801a10c <SUBGRF_WriteCommand>
}
 8019b7a:	bf00      	nop
 8019b7c:	3710      	adds	r7, #16
 8019b7e:	46bd      	mov	sp, r7
 8019b80:	bd80      	pop	{r7, pc}
	...

08019b84 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 8019b84:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8019b88:	b086      	sub	sp, #24
 8019b8a:	af00      	add	r7, sp, #0
 8019b8c:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 8019b8e:	2300      	movs	r3, #0
 8019b90:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8019b92:	f107 0308 	add.w	r3, r7, #8
 8019b96:	2200      	movs	r2, #0
 8019b98:	601a      	str	r2, [r3, #0]
 8019b9a:	605a      	str	r2, [r3, #4]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 8019b9c:	687b      	ldr	r3, [r7, #4]
 8019b9e:	781a      	ldrb	r2, [r3, #0]
 8019ba0:	4b5c      	ldr	r3, [pc, #368]	@ (8019d14 <SUBGRF_SetModulationParams+0x190>)
 8019ba2:	781b      	ldrb	r3, [r3, #0]
 8019ba4:	429a      	cmp	r2, r3
 8019ba6:	d004      	beq.n	8019bb2 <SUBGRF_SetModulationParams+0x2e>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8019ba8:	687b      	ldr	r3, [r7, #4]
 8019baa:	781b      	ldrb	r3, [r3, #0]
 8019bac:	4618      	mov	r0, r3
 8019bae:	f7ff fef5 	bl	801999c <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 8019bb2:	687b      	ldr	r3, [r7, #4]
 8019bb4:	781b      	ldrb	r3, [r3, #0]
 8019bb6:	2b03      	cmp	r3, #3
 8019bb8:	f200 80a5 	bhi.w	8019d06 <SUBGRF_SetModulationParams+0x182>
 8019bbc:	a201      	add	r2, pc, #4	@ (adr r2, 8019bc4 <SUBGRF_SetModulationParams+0x40>)
 8019bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019bc2:	bf00      	nop
 8019bc4:	08019bd5 	.word	0x08019bd5
 8019bc8:	08019c95 	.word	0x08019c95
 8019bcc:	08019c57 	.word	0x08019c57
 8019bd0:	08019cc3 	.word	0x08019cc3
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 8019bd4:	2308      	movs	r3, #8
 8019bd6:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8019bd8:	687b      	ldr	r3, [r7, #4]
 8019bda:	685b      	ldr	r3, [r3, #4]
 8019bdc:	4a4e      	ldr	r2, [pc, #312]	@ (8019d18 <SUBGRF_SetModulationParams+0x194>)
 8019bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8019be2:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8019be4:	697b      	ldr	r3, [r7, #20]
 8019be6:	0c1b      	lsrs	r3, r3, #16
 8019be8:	b2db      	uxtb	r3, r3
 8019bea:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8019bec:	697b      	ldr	r3, [r7, #20]
 8019bee:	0a1b      	lsrs	r3, r3, #8
 8019bf0:	b2db      	uxtb	r3, r3
 8019bf2:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8019bf4:	697b      	ldr	r3, [r7, #20]
 8019bf6:	b2db      	uxtb	r3, r3
 8019bf8:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8019bfa:	687b      	ldr	r3, [r7, #4]
 8019bfc:	7b1b      	ldrb	r3, [r3, #12]
 8019bfe:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8019c00:	687b      	ldr	r3, [r7, #4]
 8019c02:	7b5b      	ldrb	r3, [r3, #13]
 8019c04:	733b      	strb	r3, [r7, #12]
        /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8019c06:	687b      	ldr	r3, [r7, #4]
 8019c08:	689b      	ldr	r3, [r3, #8]
 8019c0a:	2200      	movs	r2, #0
 8019c0c:	461c      	mov	r4, r3
 8019c0e:	4615      	mov	r5, r2
 8019c10:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8019c14:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8019c18:	4a40      	ldr	r2, [pc, #256]	@ (8019d1c <SUBGRF_SetModulationParams+0x198>)
 8019c1a:	f04f 0300 	mov.w	r3, #0
 8019c1e:	4640      	mov	r0, r8
 8019c20:	4649      	mov	r1, r9
 8019c22:	f7e7 f8cd 	bl	8000dc0 <__aeabi_uldivmod>
 8019c26:	4602      	mov	r2, r0
 8019c28:	460b      	mov	r3, r1
 8019c2a:	4613      	mov	r3, r2
 8019c2c:	617b      	str	r3, [r7, #20]
        /* ST_WORKAROUND_END */
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8019c2e:	697b      	ldr	r3, [r7, #20]
 8019c30:	0c1b      	lsrs	r3, r3, #16
 8019c32:	b2db      	uxtb	r3, r3
 8019c34:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8019c36:	697b      	ldr	r3, [r7, #20]
 8019c38:	0a1b      	lsrs	r3, r3, #8
 8019c3a:	b2db      	uxtb	r3, r3
 8019c3c:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 8019c3e:	697b      	ldr	r3, [r7, #20]
 8019c40:	b2db      	uxtb	r3, r3
 8019c42:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8019c44:	7cfb      	ldrb	r3, [r7, #19]
 8019c46:	b29a      	uxth	r2, r3
 8019c48:	f107 0308 	add.w	r3, r7, #8
 8019c4c:	4619      	mov	r1, r3
 8019c4e:	208b      	movs	r0, #139	@ 0x8b
 8019c50:	f000 fa5c 	bl	801a10c <SUBGRF_WriteCommand>
        break;
 8019c54:	e058      	b.n	8019d08 <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_BPSK:
        n = 4;
 8019c56:	2304      	movs	r3, #4
 8019c58:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8019c5a:	687b      	ldr	r3, [r7, #4]
 8019c5c:	691b      	ldr	r3, [r3, #16]
 8019c5e:	4a2e      	ldr	r2, [pc, #184]	@ (8019d18 <SUBGRF_SetModulationParams+0x194>)
 8019c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8019c64:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8019c66:	697b      	ldr	r3, [r7, #20]
 8019c68:	0c1b      	lsrs	r3, r3, #16
 8019c6a:	b2db      	uxtb	r3, r3
 8019c6c:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8019c6e:	697b      	ldr	r3, [r7, #20]
 8019c70:	0a1b      	lsrs	r3, r3, #8
 8019c72:	b2db      	uxtb	r3, r3
 8019c74:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8019c76:	697b      	ldr	r3, [r7, #20]
 8019c78:	b2db      	uxtb	r3, r3
 8019c7a:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8019c7c:	687b      	ldr	r3, [r7, #4]
 8019c7e:	7d1b      	ldrb	r3, [r3, #20]
 8019c80:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8019c82:	7cfb      	ldrb	r3, [r7, #19]
 8019c84:	b29a      	uxth	r2, r3
 8019c86:	f107 0308 	add.w	r3, r7, #8
 8019c8a:	4619      	mov	r1, r3
 8019c8c:	208b      	movs	r0, #139	@ 0x8b
 8019c8e:	f000 fa3d 	bl	801a10c <SUBGRF_WriteCommand>
        break;
 8019c92:	e039      	b.n	8019d08 <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_LORA:
        n = 4;
 8019c94:	2304      	movs	r3, #4
 8019c96:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8019c98:	687b      	ldr	r3, [r7, #4]
 8019c9a:	7e1b      	ldrb	r3, [r3, #24]
 8019c9c:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8019c9e:	687b      	ldr	r3, [r7, #4]
 8019ca0:	7e5b      	ldrb	r3, [r3, #25]
 8019ca2:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8019ca4:	687b      	ldr	r3, [r7, #4]
 8019ca6:	7e9b      	ldrb	r3, [r3, #26]
 8019ca8:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8019caa:	687b      	ldr	r3, [r7, #4]
 8019cac:	7edb      	ldrb	r3, [r3, #27]
 8019cae:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8019cb0:	7cfb      	ldrb	r3, [r7, #19]
 8019cb2:	b29a      	uxth	r2, r3
 8019cb4:	f107 0308 	add.w	r3, r7, #8
 8019cb8:	4619      	mov	r1, r3
 8019cba:	208b      	movs	r0, #139	@ 0x8b
 8019cbc:	f000 fa26 	bl	801a10c <SUBGRF_WriteCommand>

        break;
 8019cc0:	e022      	b.n	8019d08 <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_GMSK:
        n = 5;
 8019cc2:	2305      	movs	r3, #5
 8019cc4:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8019cc6:	687b      	ldr	r3, [r7, #4]
 8019cc8:	685b      	ldr	r3, [r3, #4]
 8019cca:	4a13      	ldr	r2, [pc, #76]	@ (8019d18 <SUBGRF_SetModulationParams+0x194>)
 8019ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8019cd0:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8019cd2:	697b      	ldr	r3, [r7, #20]
 8019cd4:	0c1b      	lsrs	r3, r3, #16
 8019cd6:	b2db      	uxtb	r3, r3
 8019cd8:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8019cda:	697b      	ldr	r3, [r7, #20]
 8019cdc:	0a1b      	lsrs	r3, r3, #8
 8019cde:	b2db      	uxtb	r3, r3
 8019ce0:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8019ce2:	697b      	ldr	r3, [r7, #20]
 8019ce4:	b2db      	uxtb	r3, r3
 8019ce6:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8019ce8:	687b      	ldr	r3, [r7, #4]
 8019cea:	7b1b      	ldrb	r3, [r3, #12]
 8019cec:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8019cee:	687b      	ldr	r3, [r7, #4]
 8019cf0:	7b5b      	ldrb	r3, [r3, #13]
 8019cf2:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8019cf4:	7cfb      	ldrb	r3, [r7, #19]
 8019cf6:	b29a      	uxth	r2, r3
 8019cf8:	f107 0308 	add.w	r3, r7, #8
 8019cfc:	4619      	mov	r1, r3
 8019cfe:	208b      	movs	r0, #139	@ 0x8b
 8019d00:	f000 fa04 	bl	801a10c <SUBGRF_WriteCommand>
        break;
 8019d04:	e000      	b.n	8019d08 <SUBGRF_SetModulationParams+0x184>
    default:
    case PACKET_TYPE_NONE:
      break;
 8019d06:	bf00      	nop
    }
}
 8019d08:	bf00      	nop
 8019d0a:	3718      	adds	r7, #24
 8019d0c:	46bd      	mov	sp, r7
 8019d0e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8019d12:	bf00      	nop
 8019d14:	20001d81 	.word	0x20001d81
 8019d18:	3d090000 	.word	0x3d090000
 8019d1c:	01e84800 	.word	0x01e84800

08019d20 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 8019d20:	b580      	push	{r7, lr}
 8019d22:	b086      	sub	sp, #24
 8019d24:	af00      	add	r7, sp, #0
 8019d26:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 8019d28:	2300      	movs	r3, #0
 8019d2a:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8019d2c:	f107 030c 	add.w	r3, r7, #12
 8019d30:	2200      	movs	r2, #0
 8019d32:	601a      	str	r2, [r3, #0]
 8019d34:	605a      	str	r2, [r3, #4]
 8019d36:	721a      	strb	r2, [r3, #8]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 8019d38:	687b      	ldr	r3, [r7, #4]
 8019d3a:	781a      	ldrb	r2, [r3, #0]
 8019d3c:	4b44      	ldr	r3, [pc, #272]	@ (8019e50 <SUBGRF_SetPacketParams+0x130>)
 8019d3e:	781b      	ldrb	r3, [r3, #0]
 8019d40:	429a      	cmp	r2, r3
 8019d42:	d004      	beq.n	8019d4e <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 8019d44:	687b      	ldr	r3, [r7, #4]
 8019d46:	781b      	ldrb	r3, [r3, #0]
 8019d48:	4618      	mov	r0, r3
 8019d4a:	f7ff fe27 	bl	801999c <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 8019d4e:	687b      	ldr	r3, [r7, #4]
 8019d50:	781b      	ldrb	r3, [r3, #0]
 8019d52:	2b03      	cmp	r3, #3
 8019d54:	d878      	bhi.n	8019e48 <SUBGRF_SetPacketParams+0x128>
 8019d56:	a201      	add	r2, pc, #4	@ (adr r2, 8019d5c <SUBGRF_SetPacketParams+0x3c>)
 8019d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019d5c:	08019d6d 	.word	0x08019d6d
 8019d60:	08019dfd 	.word	0x08019dfd
 8019d64:	08019df1 	.word	0x08019df1
 8019d68:	08019d6d 	.word	0x08019d6d
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8019d6c:	687b      	ldr	r3, [r7, #4]
 8019d6e:	7a5b      	ldrb	r3, [r3, #9]
 8019d70:	2bf1      	cmp	r3, #241	@ 0xf1
 8019d72:	d10a      	bne.n	8019d8a <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8019d74:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8019d78:	f7ff faaa 	bl	80192d0 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8019d7c:	f248 0005 	movw	r0, #32773	@ 0x8005
 8019d80:	f7ff fac6 	bl	8019310 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8019d84:	2302      	movs	r3, #2
 8019d86:	75bb      	strb	r3, [r7, #22]
 8019d88:	e011      	b.n	8019dae <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8019d8a:	687b      	ldr	r3, [r7, #4]
 8019d8c:	7a5b      	ldrb	r3, [r3, #9]
 8019d8e:	2bf2      	cmp	r3, #242	@ 0xf2
 8019d90:	d10a      	bne.n	8019da8 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8019d92:	f641 500f 	movw	r0, #7439	@ 0x1d0f
 8019d96:	f7ff fa9b 	bl	80192d0 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8019d9a:	f241 0021 	movw	r0, #4129	@ 0x1021
 8019d9e:	f7ff fab7 	bl	8019310 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8019da2:	2306      	movs	r3, #6
 8019da4:	75bb      	strb	r3, [r7, #22]
 8019da6:	e002      	b.n	8019dae <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 8019da8:	687b      	ldr	r3, [r7, #4]
 8019daa:	7a5b      	ldrb	r3, [r3, #9]
 8019dac:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 8019dae:	2309      	movs	r3, #9
 8019db0:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8019db2:	687b      	ldr	r3, [r7, #4]
 8019db4:	885b      	ldrh	r3, [r3, #2]
 8019db6:	0a1b      	lsrs	r3, r3, #8
 8019db8:	b29b      	uxth	r3, r3
 8019dba:	b2db      	uxtb	r3, r3
 8019dbc:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8019dbe:	687b      	ldr	r3, [r7, #4]
 8019dc0:	885b      	ldrh	r3, [r3, #2]
 8019dc2:	b2db      	uxtb	r3, r3
 8019dc4:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8019dc6:	687b      	ldr	r3, [r7, #4]
 8019dc8:	791b      	ldrb	r3, [r3, #4]
 8019dca:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8019dcc:	687b      	ldr	r3, [r7, #4]
 8019dce:	795b      	ldrb	r3, [r3, #5]
 8019dd0:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8019dd2:	687b      	ldr	r3, [r7, #4]
 8019dd4:	799b      	ldrb	r3, [r3, #6]
 8019dd6:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8019dd8:	687b      	ldr	r3, [r7, #4]
 8019dda:	79db      	ldrb	r3, [r3, #7]
 8019ddc:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8019dde:	687b      	ldr	r3, [r7, #4]
 8019de0:	7a1b      	ldrb	r3, [r3, #8]
 8019de2:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 8019de4:	7dbb      	ldrb	r3, [r7, #22]
 8019de6:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8019de8:	687b      	ldr	r3, [r7, #4]
 8019dea:	7a9b      	ldrb	r3, [r3, #10]
 8019dec:	753b      	strb	r3, [r7, #20]
        break;
 8019dee:	e022      	b.n	8019e36 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 8019df0:	2301      	movs	r3, #1
 8019df2:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8019df4:	687b      	ldr	r3, [r7, #4]
 8019df6:	7b1b      	ldrb	r3, [r3, #12]
 8019df8:	733b      	strb	r3, [r7, #12]
        break;
 8019dfa:	e01c      	b.n	8019e36 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 8019dfc:	2306      	movs	r3, #6
 8019dfe:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8019e00:	687b      	ldr	r3, [r7, #4]
 8019e02:	89db      	ldrh	r3, [r3, #14]
 8019e04:	0a1b      	lsrs	r3, r3, #8
 8019e06:	b29b      	uxth	r3, r3
 8019e08:	b2db      	uxtb	r3, r3
 8019e0a:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8019e0c:	687b      	ldr	r3, [r7, #4]
 8019e0e:	89db      	ldrh	r3, [r3, #14]
 8019e10:	b2db      	uxtb	r3, r3
 8019e12:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8019e14:	687b      	ldr	r3, [r7, #4]
 8019e16:	7c1a      	ldrb	r2, [r3, #16]
 8019e18:	4b0e      	ldr	r3, [pc, #56]	@ (8019e54 <SUBGRF_SetPacketParams+0x134>)
 8019e1a:	4611      	mov	r1, r2
 8019e1c:	7019      	strb	r1, [r3, #0]
 8019e1e:	4613      	mov	r3, r2
 8019e20:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8019e22:	687b      	ldr	r3, [r7, #4]
 8019e24:	7c5b      	ldrb	r3, [r3, #17]
 8019e26:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8019e28:	687b      	ldr	r3, [r7, #4]
 8019e2a:	7c9b      	ldrb	r3, [r3, #18]
 8019e2c:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8019e2e:	687b      	ldr	r3, [r7, #4]
 8019e30:	7cdb      	ldrb	r3, [r3, #19]
 8019e32:	747b      	strb	r3, [r7, #17]
        break;
 8019e34:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8019e36:	7dfb      	ldrb	r3, [r7, #23]
 8019e38:	b29a      	uxth	r2, r3
 8019e3a:	f107 030c 	add.w	r3, r7, #12
 8019e3e:	4619      	mov	r1, r3
 8019e40:	208c      	movs	r0, #140	@ 0x8c
 8019e42:	f000 f963 	bl	801a10c <SUBGRF_WriteCommand>
 8019e46:	e000      	b.n	8019e4a <SUBGRF_SetPacketParams+0x12a>
        return;
 8019e48:	bf00      	nop
}
 8019e4a:	3718      	adds	r7, #24
 8019e4c:	46bd      	mov	sp, r7
 8019e4e:	bd80      	pop	{r7, pc}
 8019e50:	20001d81 	.word	0x20001d81
 8019e54:	20001d82 	.word	0x20001d82

08019e58 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 8019e58:	b580      	push	{r7, lr}
 8019e5a:	b084      	sub	sp, #16
 8019e5c:	af00      	add	r7, sp, #0
 8019e5e:	4603      	mov	r3, r0
 8019e60:	460a      	mov	r2, r1
 8019e62:	71fb      	strb	r3, [r7, #7]
 8019e64:	4613      	mov	r3, r2
 8019e66:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 8019e68:	79fb      	ldrb	r3, [r7, #7]
 8019e6a:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 8019e6c:	79bb      	ldrb	r3, [r7, #6]
 8019e6e:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8019e70:	f107 030c 	add.w	r3, r7, #12
 8019e74:	2202      	movs	r2, #2
 8019e76:	4619      	mov	r1, r3
 8019e78:	208f      	movs	r0, #143	@ 0x8f
 8019e7a:	f000 f947 	bl	801a10c <SUBGRF_WriteCommand>
}
 8019e7e:	bf00      	nop
 8019e80:	3710      	adds	r7, #16
 8019e82:	46bd      	mov	sp, r7
 8019e84:	bd80      	pop	{r7, pc}

08019e86 <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 8019e86:	b580      	push	{r7, lr}
 8019e88:	b082      	sub	sp, #8
 8019e8a:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 8019e8c:	2300      	movs	r3, #0
 8019e8e:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 8019e90:	1d3b      	adds	r3, r7, #4
 8019e92:	2201      	movs	r2, #1
 8019e94:	4619      	mov	r1, r3
 8019e96:	2015      	movs	r0, #21
 8019e98:	f000 f95a 	bl	801a150 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 8019e9c:	793b      	ldrb	r3, [r7, #4]
 8019e9e:	425b      	negs	r3, r3
 8019ea0:	105b      	asrs	r3, r3, #1
 8019ea2:	71fb      	strb	r3, [r7, #7]
    return rssi;
 8019ea4:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8019ea8:	4618      	mov	r0, r3
 8019eaa:	3708      	adds	r7, #8
 8019eac:	46bd      	mov	sp, r7
 8019eae:	bd80      	pop	{r7, pc}

08019eb0 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 8019eb0:	b580      	push	{r7, lr}
 8019eb2:	b084      	sub	sp, #16
 8019eb4:	af00      	add	r7, sp, #0
 8019eb6:	6078      	str	r0, [r7, #4]
 8019eb8:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8019eba:	f107 030c 	add.w	r3, r7, #12
 8019ebe:	2202      	movs	r2, #2
 8019ec0:	4619      	mov	r1, r3
 8019ec2:	2013      	movs	r0, #19
 8019ec4:	f000 f944 	bl	801a150 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8019ec8:	f7ff fd84 	bl	80199d4 <SUBGRF_GetPacketType>
 8019ecc:	4603      	mov	r3, r0
 8019ece:	2b01      	cmp	r3, #1
 8019ed0:	d10d      	bne.n	8019eee <SUBGRF_GetRxBufferStatus+0x3e>
 8019ed2:	4b0c      	ldr	r3, [pc, #48]	@ (8019f04 <SUBGRF_GetRxBufferStatus+0x54>)
 8019ed4:	781b      	ldrb	r3, [r3, #0]
 8019ed6:	b2db      	uxtb	r3, r3
 8019ed8:	2b01      	cmp	r3, #1
 8019eda:	d108      	bne.n	8019eee <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8019edc:	f240 7002 	movw	r0, #1794	@ 0x702
 8019ee0:	f000 f878 	bl	8019fd4 <SUBGRF_ReadRegister>
 8019ee4:	4603      	mov	r3, r0
 8019ee6:	461a      	mov	r2, r3
 8019ee8:	687b      	ldr	r3, [r7, #4]
 8019eea:	701a      	strb	r2, [r3, #0]
 8019eec:	e002      	b.n	8019ef4 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 8019eee:	7b3a      	ldrb	r2, [r7, #12]
 8019ef0:	687b      	ldr	r3, [r7, #4]
 8019ef2:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 8019ef4:	7b7a      	ldrb	r2, [r7, #13]
 8019ef6:	683b      	ldr	r3, [r7, #0]
 8019ef8:	701a      	strb	r2, [r3, #0]
}
 8019efa:	bf00      	nop
 8019efc:	3710      	adds	r7, #16
 8019efe:	46bd      	mov	sp, r7
 8019f00:	bd80      	pop	{r7, pc}
 8019f02:	bf00      	nop
 8019f04:	20001d82 	.word	0x20001d82

08019f08 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 8019f08:	b580      	push	{r7, lr}
 8019f0a:	b084      	sub	sp, #16
 8019f0c:	af00      	add	r7, sp, #0
 8019f0e:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8019f10:	f107 030c 	add.w	r3, r7, #12
 8019f14:	2203      	movs	r2, #3
 8019f16:	4619      	mov	r1, r3
 8019f18:	2014      	movs	r0, #20
 8019f1a:	f000 f919 	bl	801a150 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 8019f1e:	f7ff fd59 	bl	80199d4 <SUBGRF_GetPacketType>
 8019f22:	4603      	mov	r3, r0
 8019f24:	461a      	mov	r2, r3
 8019f26:	687b      	ldr	r3, [r7, #4]
 8019f28:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 8019f2a:	687b      	ldr	r3, [r7, #4]
 8019f2c:	781b      	ldrb	r3, [r3, #0]
 8019f2e:	2b00      	cmp	r3, #0
 8019f30:	d002      	beq.n	8019f38 <SUBGRF_GetPacketStatus+0x30>
 8019f32:	2b01      	cmp	r3, #1
 8019f34:	d013      	beq.n	8019f5e <SUBGRF_GetPacketStatus+0x56>
 8019f36:	e02a      	b.n	8019f8e <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8019f38:	7b3a      	ldrb	r2, [r7, #12]
 8019f3a:	687b      	ldr	r3, [r7, #4]
 8019f3c:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8019f3e:	7b7b      	ldrb	r3, [r7, #13]
 8019f40:	425b      	negs	r3, r3
 8019f42:	105b      	asrs	r3, r3, #1
 8019f44:	b25a      	sxtb	r2, r3
 8019f46:	687b      	ldr	r3, [r7, #4]
 8019f48:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8019f4a:	7bbb      	ldrb	r3, [r7, #14]
 8019f4c:	425b      	negs	r3, r3
 8019f4e:	105b      	asrs	r3, r3, #1
 8019f50:	b25a      	sxtb	r2, r3
 8019f52:	687b      	ldr	r3, [r7, #4]
 8019f54:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 8019f56:	687b      	ldr	r3, [r7, #4]
 8019f58:	2200      	movs	r2, #0
 8019f5a:	609a      	str	r2, [r3, #8]
            break;
 8019f5c:	e020      	b.n	8019fa0 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8019f5e:	7b3b      	ldrb	r3, [r7, #12]
 8019f60:	425b      	negs	r3, r3
 8019f62:	105b      	asrs	r3, r3, #1
 8019f64:	b25a      	sxtb	r2, r3
 8019f66:	687b      	ldr	r3, [r7, #4]
 8019f68:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 8019f6a:	7b7b      	ldrb	r3, [r7, #13]
 8019f6c:	b25b      	sxtb	r3, r3
 8019f6e:	3302      	adds	r3, #2
 8019f70:	109b      	asrs	r3, r3, #2
 8019f72:	b25a      	sxtb	r2, r3
 8019f74:	687b      	ldr	r3, [r7, #4]
 8019f76:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8019f78:	7bbb      	ldrb	r3, [r7, #14]
 8019f7a:	425b      	negs	r3, r3
 8019f7c:	105b      	asrs	r3, r3, #1
 8019f7e:	b25a      	sxtb	r2, r3
 8019f80:	687b      	ldr	r3, [r7, #4]
 8019f82:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8019f84:	4b08      	ldr	r3, [pc, #32]	@ (8019fa8 <SUBGRF_GetPacketStatus+0xa0>)
 8019f86:	681a      	ldr	r2, [r3, #0]
 8019f88:	687b      	ldr	r3, [r7, #4]
 8019f8a:	611a      	str	r2, [r3, #16]
            break;
 8019f8c:	e008      	b.n	8019fa0 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 8019f8e:	2214      	movs	r2, #20
 8019f90:	2100      	movs	r1, #0
 8019f92:	6878      	ldr	r0, [r7, #4]
 8019f94:	f000 fbf3 	bl	801a77e <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8019f98:	687b      	ldr	r3, [r7, #4]
 8019f9a:	220f      	movs	r2, #15
 8019f9c:	701a      	strb	r2, [r3, #0]
            break;
 8019f9e:	bf00      	nop
    }
}
 8019fa0:	bf00      	nop
 8019fa2:	3710      	adds	r7, #16
 8019fa4:	46bd      	mov	sp, r7
 8019fa6:	bd80      	pop	{r7, pc}
 8019fa8:	20001d84 	.word	0x20001d84

08019fac <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 8019fac:	b580      	push	{r7, lr}
 8019fae:	b082      	sub	sp, #8
 8019fb0:	af00      	add	r7, sp, #0
 8019fb2:	4603      	mov	r3, r0
 8019fb4:	460a      	mov	r2, r1
 8019fb6:	80fb      	strh	r3, [r7, #6]
 8019fb8:	4613      	mov	r3, r2
 8019fba:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8019fbc:	1d7a      	adds	r2, r7, #5
 8019fbe:	88f9      	ldrh	r1, [r7, #6]
 8019fc0:	2301      	movs	r3, #1
 8019fc2:	4803      	ldr	r0, [pc, #12]	@ (8019fd0 <SUBGRF_WriteRegister+0x24>)
 8019fc4:	f7ed fb98 	bl	80076f8 <HAL_SUBGHZ_WriteRegisters>
}
 8019fc8:	bf00      	nop
 8019fca:	3708      	adds	r7, #8
 8019fcc:	46bd      	mov	sp, r7
 8019fce:	bd80      	pop	{r7, pc}
 8019fd0:	200003e0 	.word	0x200003e0

08019fd4 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 8019fd4:	b580      	push	{r7, lr}
 8019fd6:	b084      	sub	sp, #16
 8019fd8:	af00      	add	r7, sp, #0
 8019fda:	4603      	mov	r3, r0
 8019fdc:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 8019fde:	f107 020f 	add.w	r2, r7, #15
 8019fe2:	88f9      	ldrh	r1, [r7, #6]
 8019fe4:	2301      	movs	r3, #1
 8019fe6:	4804      	ldr	r0, [pc, #16]	@ (8019ff8 <SUBGRF_ReadRegister+0x24>)
 8019fe8:	f7ed fbe5 	bl	80077b6 <HAL_SUBGHZ_ReadRegisters>
    return data;
 8019fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8019fee:	4618      	mov	r0, r3
 8019ff0:	3710      	adds	r7, #16
 8019ff2:	46bd      	mov	sp, r7
 8019ff4:	bd80      	pop	{r7, pc}
 8019ff6:	bf00      	nop
 8019ff8:	200003e0 	.word	0x200003e0

08019ffc <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8019ffc:	b580      	push	{r7, lr}
 8019ffe:	b086      	sub	sp, #24
 801a000:	af00      	add	r7, sp, #0
 801a002:	4603      	mov	r3, r0
 801a004:	6039      	str	r1, [r7, #0]
 801a006:	80fb      	strh	r3, [r7, #6]
 801a008:	4613      	mov	r3, r2
 801a00a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a00c:	f3ef 8310 	mrs	r3, PRIMASK
 801a010:	60fb      	str	r3, [r7, #12]
  return(result);
 801a012:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801a014:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a016:	b672      	cpsid	i
}
 801a018:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 801a01a:	88bb      	ldrh	r3, [r7, #4]
 801a01c:	88f9      	ldrh	r1, [r7, #6]
 801a01e:	683a      	ldr	r2, [r7, #0]
 801a020:	4806      	ldr	r0, [pc, #24]	@ (801a03c <SUBGRF_WriteRegisters+0x40>)
 801a022:	f7ed fb69 	bl	80076f8 <HAL_SUBGHZ_WriteRegisters>
 801a026:	697b      	ldr	r3, [r7, #20]
 801a028:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a02a:	693b      	ldr	r3, [r7, #16]
 801a02c:	f383 8810 	msr	PRIMASK, r3
}
 801a030:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801a032:	bf00      	nop
 801a034:	3718      	adds	r7, #24
 801a036:	46bd      	mov	sp, r7
 801a038:	bd80      	pop	{r7, pc}
 801a03a:	bf00      	nop
 801a03c:	200003e0 	.word	0x200003e0

0801a040 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801a040:	b580      	push	{r7, lr}
 801a042:	b086      	sub	sp, #24
 801a044:	af00      	add	r7, sp, #0
 801a046:	4603      	mov	r3, r0
 801a048:	6039      	str	r1, [r7, #0]
 801a04a:	80fb      	strh	r3, [r7, #6]
 801a04c:	4613      	mov	r3, r2
 801a04e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a050:	f3ef 8310 	mrs	r3, PRIMASK
 801a054:	60fb      	str	r3, [r7, #12]
  return(result);
 801a056:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801a058:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a05a:	b672      	cpsid	i
}
 801a05c:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 801a05e:	88bb      	ldrh	r3, [r7, #4]
 801a060:	88f9      	ldrh	r1, [r7, #6]
 801a062:	683a      	ldr	r2, [r7, #0]
 801a064:	4806      	ldr	r0, [pc, #24]	@ (801a080 <SUBGRF_ReadRegisters+0x40>)
 801a066:	f7ed fba6 	bl	80077b6 <HAL_SUBGHZ_ReadRegisters>
 801a06a:	697b      	ldr	r3, [r7, #20]
 801a06c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a06e:	693b      	ldr	r3, [r7, #16]
 801a070:	f383 8810 	msr	PRIMASK, r3
}
 801a074:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801a076:	bf00      	nop
 801a078:	3718      	adds	r7, #24
 801a07a:	46bd      	mov	sp, r7
 801a07c:	bd80      	pop	{r7, pc}
 801a07e:	bf00      	nop
 801a080:	200003e0 	.word	0x200003e0

0801a084 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801a084:	b580      	push	{r7, lr}
 801a086:	b086      	sub	sp, #24
 801a088:	af00      	add	r7, sp, #0
 801a08a:	4603      	mov	r3, r0
 801a08c:	6039      	str	r1, [r7, #0]
 801a08e:	71fb      	strb	r3, [r7, #7]
 801a090:	4613      	mov	r3, r2
 801a092:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a094:	f3ef 8310 	mrs	r3, PRIMASK
 801a098:	60fb      	str	r3, [r7, #12]
  return(result);
 801a09a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801a09c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a09e:	b672      	cpsid	i
}
 801a0a0:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 801a0a2:	79bb      	ldrb	r3, [r7, #6]
 801a0a4:	b29b      	uxth	r3, r3
 801a0a6:	79f9      	ldrb	r1, [r7, #7]
 801a0a8:	683a      	ldr	r2, [r7, #0]
 801a0aa:	4806      	ldr	r0, [pc, #24]	@ (801a0c4 <SUBGRF_WriteBuffer+0x40>)
 801a0ac:	f7ed fc97 	bl	80079de <HAL_SUBGHZ_WriteBuffer>
 801a0b0:	697b      	ldr	r3, [r7, #20]
 801a0b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a0b4:	693b      	ldr	r3, [r7, #16]
 801a0b6:	f383 8810 	msr	PRIMASK, r3
}
 801a0ba:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801a0bc:	bf00      	nop
 801a0be:	3718      	adds	r7, #24
 801a0c0:	46bd      	mov	sp, r7
 801a0c2:	bd80      	pop	{r7, pc}
 801a0c4:	200003e0 	.word	0x200003e0

0801a0c8 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801a0c8:	b580      	push	{r7, lr}
 801a0ca:	b086      	sub	sp, #24
 801a0cc:	af00      	add	r7, sp, #0
 801a0ce:	4603      	mov	r3, r0
 801a0d0:	6039      	str	r1, [r7, #0]
 801a0d2:	71fb      	strb	r3, [r7, #7]
 801a0d4:	4613      	mov	r3, r2
 801a0d6:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a0d8:	f3ef 8310 	mrs	r3, PRIMASK
 801a0dc:	60fb      	str	r3, [r7, #12]
  return(result);
 801a0de:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801a0e0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a0e2:	b672      	cpsid	i
}
 801a0e4:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 801a0e6:	79bb      	ldrb	r3, [r7, #6]
 801a0e8:	b29b      	uxth	r3, r3
 801a0ea:	79f9      	ldrb	r1, [r7, #7]
 801a0ec:	683a      	ldr	r2, [r7, #0]
 801a0ee:	4806      	ldr	r0, [pc, #24]	@ (801a108 <SUBGRF_ReadBuffer+0x40>)
 801a0f0:	f7ed fcc8 	bl	8007a84 <HAL_SUBGHZ_ReadBuffer>
 801a0f4:	697b      	ldr	r3, [r7, #20]
 801a0f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a0f8:	693b      	ldr	r3, [r7, #16]
 801a0fa:	f383 8810 	msr	PRIMASK, r3
}
 801a0fe:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801a100:	bf00      	nop
 801a102:	3718      	adds	r7, #24
 801a104:	46bd      	mov	sp, r7
 801a106:	bd80      	pop	{r7, pc}
 801a108:	200003e0 	.word	0x200003e0

0801a10c <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801a10c:	b580      	push	{r7, lr}
 801a10e:	b086      	sub	sp, #24
 801a110:	af00      	add	r7, sp, #0
 801a112:	4603      	mov	r3, r0
 801a114:	6039      	str	r1, [r7, #0]
 801a116:	71fb      	strb	r3, [r7, #7]
 801a118:	4613      	mov	r3, r2
 801a11a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a11c:	f3ef 8310 	mrs	r3, PRIMASK
 801a120:	60fb      	str	r3, [r7, #12]
  return(result);
 801a122:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801a124:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a126:	b672      	cpsid	i
}
 801a128:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 801a12a:	88bb      	ldrh	r3, [r7, #4]
 801a12c:	79f9      	ldrb	r1, [r7, #7]
 801a12e:	683a      	ldr	r2, [r7, #0]
 801a130:	4806      	ldr	r0, [pc, #24]	@ (801a14c <SUBGRF_WriteCommand+0x40>)
 801a132:	f7ed fba1 	bl	8007878 <HAL_SUBGHZ_ExecSetCmd>
 801a136:	697b      	ldr	r3, [r7, #20]
 801a138:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a13a:	693b      	ldr	r3, [r7, #16]
 801a13c:	f383 8810 	msr	PRIMASK, r3
}
 801a140:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801a142:	bf00      	nop
 801a144:	3718      	adds	r7, #24
 801a146:	46bd      	mov	sp, r7
 801a148:	bd80      	pop	{r7, pc}
 801a14a:	bf00      	nop
 801a14c:	200003e0 	.word	0x200003e0

0801a150 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801a150:	b580      	push	{r7, lr}
 801a152:	b086      	sub	sp, #24
 801a154:	af00      	add	r7, sp, #0
 801a156:	4603      	mov	r3, r0
 801a158:	6039      	str	r1, [r7, #0]
 801a15a:	71fb      	strb	r3, [r7, #7]
 801a15c:	4613      	mov	r3, r2
 801a15e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a160:	f3ef 8310 	mrs	r3, PRIMASK
 801a164:	60fb      	str	r3, [r7, #12]
  return(result);
 801a166:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801a168:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a16a:	b672      	cpsid	i
}
 801a16c:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 801a16e:	88bb      	ldrh	r3, [r7, #4]
 801a170:	79f9      	ldrb	r1, [r7, #7]
 801a172:	683a      	ldr	r2, [r7, #0]
 801a174:	4806      	ldr	r0, [pc, #24]	@ (801a190 <SUBGRF_ReadCommand+0x40>)
 801a176:	f7ed fbde 	bl	8007936 <HAL_SUBGHZ_ExecGetCmd>
 801a17a:	697b      	ldr	r3, [r7, #20]
 801a17c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a17e:	693b      	ldr	r3, [r7, #16]
 801a180:	f383 8810 	msr	PRIMASK, r3
}
 801a184:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801a186:	bf00      	nop
 801a188:	3718      	adds	r7, #24
 801a18a:	46bd      	mov	sp, r7
 801a18c:	bd80      	pop	{r7, pc}
 801a18e:	bf00      	nop
 801a190:	200003e0 	.word	0x200003e0

0801a194 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 801a194:	b580      	push	{r7, lr}
 801a196:	b084      	sub	sp, #16
 801a198:	af00      	add	r7, sp, #0
 801a19a:	4603      	mov	r3, r0
 801a19c:	460a      	mov	r2, r1
 801a19e:	71fb      	strb	r3, [r7, #7]
 801a1a0:	4613      	mov	r3, r2
 801a1a2:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 801a1a4:	2301      	movs	r3, #1
 801a1a6:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 801a1a8:	79bb      	ldrb	r3, [r7, #6]
 801a1aa:	2b01      	cmp	r3, #1
 801a1ac:	d10d      	bne.n	801a1ca <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 801a1ae:	79fb      	ldrb	r3, [r7, #7]
 801a1b0:	2b01      	cmp	r3, #1
 801a1b2:	d104      	bne.n	801a1be <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 801a1b4:	2302      	movs	r3, #2
 801a1b6:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 801a1b8:	2004      	movs	r0, #4
 801a1ba:	f000 f8df 	bl	801a37c <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 801a1be:	79fb      	ldrb	r3, [r7, #7]
 801a1c0:	2b02      	cmp	r3, #2
 801a1c2:	d107      	bne.n	801a1d4 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 801a1c4:	2303      	movs	r3, #3
 801a1c6:	73fb      	strb	r3, [r7, #15]
 801a1c8:	e004      	b.n	801a1d4 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 801a1ca:	79bb      	ldrb	r3, [r7, #6]
 801a1cc:	2b00      	cmp	r3, #0
 801a1ce:	d101      	bne.n	801a1d4 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 801a1d0:	2301      	movs	r3, #1
 801a1d2:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 801a1d4:	7bfb      	ldrb	r3, [r7, #15]
 801a1d6:	4618      	mov	r0, r3
 801a1d8:	f7f0 fd6b 	bl	800acb2 <RBI_ConfigRFSwitch>
}
 801a1dc:	bf00      	nop
 801a1de:	3710      	adds	r7, #16
 801a1e0:	46bd      	mov	sp, r7
 801a1e2:	bd80      	pop	{r7, pc}

0801a1e4 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 801a1e4:	b580      	push	{r7, lr}
 801a1e6:	b084      	sub	sp, #16
 801a1e8:	af00      	add	r7, sp, #0
 801a1ea:	4603      	mov	r3, r0
 801a1ec:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 801a1ee:	2301      	movs	r3, #1
 801a1f0:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 801a1f2:	f7f0 fd6c 	bl	800acce <RBI_GetTxConfig>
 801a1f6:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 801a1f8:	68bb      	ldr	r3, [r7, #8]
 801a1fa:	2b02      	cmp	r3, #2
 801a1fc:	d016      	beq.n	801a22c <SUBGRF_SetRfTxPower+0x48>
 801a1fe:	68bb      	ldr	r3, [r7, #8]
 801a200:	2b02      	cmp	r3, #2
 801a202:	dc16      	bgt.n	801a232 <SUBGRF_SetRfTxPower+0x4e>
 801a204:	68bb      	ldr	r3, [r7, #8]
 801a206:	2b00      	cmp	r3, #0
 801a208:	d003      	beq.n	801a212 <SUBGRF_SetRfTxPower+0x2e>
 801a20a:	68bb      	ldr	r3, [r7, #8]
 801a20c:	2b01      	cmp	r3, #1
 801a20e:	d00a      	beq.n	801a226 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 801a210:	e00f      	b.n	801a232 <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 801a212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a216:	2b0f      	cmp	r3, #15
 801a218:	dd02      	ble.n	801a220 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 801a21a:	2302      	movs	r3, #2
 801a21c:	73fb      	strb	r3, [r7, #15]
            break;
 801a21e:	e009      	b.n	801a234 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 801a220:	2301      	movs	r3, #1
 801a222:	73fb      	strb	r3, [r7, #15]
            break;
 801a224:	e006      	b.n	801a234 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 801a226:	2301      	movs	r3, #1
 801a228:	73fb      	strb	r3, [r7, #15]
            break;
 801a22a:	e003      	b.n	801a234 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 801a22c:	2302      	movs	r3, #2
 801a22e:	73fb      	strb	r3, [r7, #15]
            break;
 801a230:	e000      	b.n	801a234 <SUBGRF_SetRfTxPower+0x50>
            break;
 801a232:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 801a234:	f997 1007 	ldrsb.w	r1, [r7, #7]
 801a238:	7bfb      	ldrb	r3, [r7, #15]
 801a23a:	2202      	movs	r2, #2
 801a23c:	4618      	mov	r0, r3
 801a23e:	f7ff fbd3 	bl	80199e8 <SUBGRF_SetTxParams>

    return paSelect;
 801a242:	7bfb      	ldrb	r3, [r7, #15]
}
 801a244:	4618      	mov	r0, r3
 801a246:	3710      	adds	r7, #16
 801a248:	46bd      	mov	sp, r7
 801a24a:	bd80      	pop	{r7, pc}

0801a24c <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 801a24c:	b480      	push	{r7}
 801a24e:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 801a250:	2301      	movs	r3, #1
}
 801a252:	4618      	mov	r0, r3
 801a254:	46bd      	mov	sp, r7
 801a256:	bc80      	pop	{r7}
 801a258:	4770      	bx	lr
	...

0801a25c <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801a25c:	b580      	push	{r7, lr}
 801a25e:	b082      	sub	sp, #8
 801a260:	af00      	add	r7, sp, #0
 801a262:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 801a264:	4b03      	ldr	r3, [pc, #12]	@ (801a274 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 801a266:	681b      	ldr	r3, [r3, #0]
 801a268:	2001      	movs	r0, #1
 801a26a:	4798      	blx	r3
}
 801a26c:	bf00      	nop
 801a26e:	3708      	adds	r7, #8
 801a270:	46bd      	mov	sp, r7
 801a272:	bd80      	pop	{r7, pc}
 801a274:	20001d8c 	.word	0x20001d8c

0801a278 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801a278:	b580      	push	{r7, lr}
 801a27a:	b082      	sub	sp, #8
 801a27c:	af00      	add	r7, sp, #0
 801a27e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 801a280:	4b03      	ldr	r3, [pc, #12]	@ (801a290 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 801a282:	681b      	ldr	r3, [r3, #0]
 801a284:	2002      	movs	r0, #2
 801a286:	4798      	blx	r3
}
 801a288:	bf00      	nop
 801a28a:	3708      	adds	r7, #8
 801a28c:	46bd      	mov	sp, r7
 801a28e:	bd80      	pop	{r7, pc}
 801a290:	20001d8c 	.word	0x20001d8c

0801a294 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 801a294:	b580      	push	{r7, lr}
 801a296:	b082      	sub	sp, #8
 801a298:	af00      	add	r7, sp, #0
 801a29a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 801a29c:	4b03      	ldr	r3, [pc, #12]	@ (801a2ac <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 801a29e:	681b      	ldr	r3, [r3, #0]
 801a2a0:	2040      	movs	r0, #64	@ 0x40
 801a2a2:	4798      	blx	r3
}
 801a2a4:	bf00      	nop
 801a2a6:	3708      	adds	r7, #8
 801a2a8:	46bd      	mov	sp, r7
 801a2aa:	bd80      	pop	{r7, pc}
 801a2ac:	20001d8c 	.word	0x20001d8c

0801a2b0 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 801a2b0:	b580      	push	{r7, lr}
 801a2b2:	b082      	sub	sp, #8
 801a2b4:	af00      	add	r7, sp, #0
 801a2b6:	6078      	str	r0, [r7, #4]
 801a2b8:	460b      	mov	r3, r1
 801a2ba:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 801a2bc:	78fb      	ldrb	r3, [r7, #3]
 801a2be:	2b00      	cmp	r3, #0
 801a2c0:	d002      	beq.n	801a2c8 <HAL_SUBGHZ_CADStatusCallback+0x18>
 801a2c2:	2b01      	cmp	r3, #1
 801a2c4:	d005      	beq.n	801a2d2 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 801a2c6:	e00a      	b.n	801a2de <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 801a2c8:	4b07      	ldr	r3, [pc, #28]	@ (801a2e8 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801a2ca:	681b      	ldr	r3, [r3, #0]
 801a2cc:	2080      	movs	r0, #128	@ 0x80
 801a2ce:	4798      	blx	r3
            break;
 801a2d0:	e005      	b.n	801a2de <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 801a2d2:	4b05      	ldr	r3, [pc, #20]	@ (801a2e8 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801a2d4:	681b      	ldr	r3, [r3, #0]
 801a2d6:	f44f 7080 	mov.w	r0, #256	@ 0x100
 801a2da:	4798      	blx	r3
            break;
 801a2dc:	bf00      	nop
    }
}
 801a2de:	bf00      	nop
 801a2e0:	3708      	adds	r7, #8
 801a2e2:	46bd      	mov	sp, r7
 801a2e4:	bd80      	pop	{r7, pc}
 801a2e6:	bf00      	nop
 801a2e8:	20001d8c 	.word	0x20001d8c

0801a2ec <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801a2ec:	b580      	push	{r7, lr}
 801a2ee:	b082      	sub	sp, #8
 801a2f0:	af00      	add	r7, sp, #0
 801a2f2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 801a2f4:	4b04      	ldr	r3, [pc, #16]	@ (801a308 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 801a2f6:	681b      	ldr	r3, [r3, #0]
 801a2f8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 801a2fc:	4798      	blx	r3
}
 801a2fe:	bf00      	nop
 801a300:	3708      	adds	r7, #8
 801a302:	46bd      	mov	sp, r7
 801a304:	bd80      	pop	{r7, pc}
 801a306:	bf00      	nop
 801a308:	20001d8c 	.word	0x20001d8c

0801a30c <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801a30c:	b580      	push	{r7, lr}
 801a30e:	b082      	sub	sp, #8
 801a310:	af00      	add	r7, sp, #0
 801a312:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 801a314:	4b03      	ldr	r3, [pc, #12]	@ (801a324 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 801a316:	681b      	ldr	r3, [r3, #0]
 801a318:	2020      	movs	r0, #32
 801a31a:	4798      	blx	r3
}
 801a31c:	bf00      	nop
 801a31e:	3708      	adds	r7, #8
 801a320:	46bd      	mov	sp, r7
 801a322:	bd80      	pop	{r7, pc}
 801a324:	20001d8c 	.word	0x20001d8c

0801a328 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801a328:	b580      	push	{r7, lr}
 801a32a:	b082      	sub	sp, #8
 801a32c:	af00      	add	r7, sp, #0
 801a32e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 801a330:	4b03      	ldr	r3, [pc, #12]	@ (801a340 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 801a332:	681b      	ldr	r3, [r3, #0]
 801a334:	2004      	movs	r0, #4
 801a336:	4798      	blx	r3
}
 801a338:	bf00      	nop
 801a33a:	3708      	adds	r7, #8
 801a33c:	46bd      	mov	sp, r7
 801a33e:	bd80      	pop	{r7, pc}
 801a340:	20001d8c 	.word	0x20001d8c

0801a344 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801a344:	b580      	push	{r7, lr}
 801a346:	b082      	sub	sp, #8
 801a348:	af00      	add	r7, sp, #0
 801a34a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 801a34c:	4b03      	ldr	r3, [pc, #12]	@ (801a35c <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 801a34e:	681b      	ldr	r3, [r3, #0]
 801a350:	2008      	movs	r0, #8
 801a352:	4798      	blx	r3
}
 801a354:	bf00      	nop
 801a356:	3708      	adds	r7, #8
 801a358:	46bd      	mov	sp, r7
 801a35a:	bd80      	pop	{r7, pc}
 801a35c:	20001d8c 	.word	0x20001d8c

0801a360 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801a360:	b580      	push	{r7, lr}
 801a362:	b082      	sub	sp, #8
 801a364:	af00      	add	r7, sp, #0
 801a366:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 801a368:	4b03      	ldr	r3, [pc, #12]	@ (801a378 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 801a36a:	681b      	ldr	r3, [r3, #0]
 801a36c:	2010      	movs	r0, #16
 801a36e:	4798      	blx	r3
}
 801a370:	bf00      	nop
 801a372:	3708      	adds	r7, #8
 801a374:	46bd      	mov	sp, r7
 801a376:	bd80      	pop	{r7, pc}
 801a378:	20001d8c 	.word	0x20001d8c

0801a37c <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 801a37c:	b580      	push	{r7, lr}
 801a37e:	b084      	sub	sp, #16
 801a380:	af00      	add	r7, sp, #0
 801a382:	4603      	mov	r3, r0
 801a384:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 801a386:	f7f0 fcb0 	bl	800acea <RBI_IsDCDC>
 801a38a:	4603      	mov	r3, r0
 801a38c:	2b01      	cmp	r3, #1
 801a38e:	d112      	bne.n	801a3b6 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 801a390:	f640 1023 	movw	r0, #2339	@ 0x923
 801a394:	f7ff fe1e 	bl	8019fd4 <SUBGRF_ReadRegister>
 801a398:	4603      	mov	r3, r0
 801a39a:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 801a39c:	7bfb      	ldrb	r3, [r7, #15]
 801a39e:	f023 0306 	bic.w	r3, r3, #6
 801a3a2:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 801a3a4:	7bfa      	ldrb	r2, [r7, #15]
 801a3a6:	79fb      	ldrb	r3, [r7, #7]
 801a3a8:	4313      	orrs	r3, r2
 801a3aa:	b2db      	uxtb	r3, r3
 801a3ac:	4619      	mov	r1, r3
 801a3ae:	f640 1023 	movw	r0, #2339	@ 0x923
 801a3b2:	f7ff fdfb 	bl	8019fac <SUBGRF_WriteRegister>
  }
}
 801a3b6:	bf00      	nop
 801a3b8:	3710      	adds	r7, #16
 801a3ba:	46bd      	mov	sp, r7
 801a3bc:	bd80      	pop	{r7, pc}
	...

0801a3c0 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 801a3c0:	b480      	push	{r7}
 801a3c2:	b085      	sub	sp, #20
 801a3c4:	af00      	add	r7, sp, #0
 801a3c6:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 801a3c8:	687b      	ldr	r3, [r7, #4]
 801a3ca:	2b00      	cmp	r3, #0
 801a3cc:	d101      	bne.n	801a3d2 <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 801a3ce:	231f      	movs	r3, #31
 801a3d0:	e017      	b.n	801a402 <SUBGRF_GetFskBandwidthRegValue+0x42>
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801a3d2:	2300      	movs	r3, #0
 801a3d4:	73fb      	strb	r3, [r7, #15]
 801a3d6:	e00f      	b.n	801a3f8 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 801a3d8:	7bfb      	ldrb	r3, [r7, #15]
 801a3da:	4a0c      	ldr	r2, [pc, #48]	@ (801a40c <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801a3dc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801a3e0:	687a      	ldr	r2, [r7, #4]
 801a3e2:	429a      	cmp	r2, r3
 801a3e4:	d205      	bcs.n	801a3f2 <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 801a3e6:	7bfb      	ldrb	r3, [r7, #15]
 801a3e8:	4a08      	ldr	r2, [pc, #32]	@ (801a40c <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801a3ea:	00db      	lsls	r3, r3, #3
 801a3ec:	4413      	add	r3, r2
 801a3ee:	791b      	ldrb	r3, [r3, #4]
 801a3f0:	e007      	b.n	801a402 <SUBGRF_GetFskBandwidthRegValue+0x42>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801a3f2:	7bfb      	ldrb	r3, [r7, #15]
 801a3f4:	3301      	adds	r3, #1
 801a3f6:	73fb      	strb	r3, [r7, #15]
 801a3f8:	7bfb      	ldrb	r3, [r7, #15]
 801a3fa:	2b15      	cmp	r3, #21
 801a3fc:	d9ec      	bls.n	801a3d8 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 801a3fe:	bf00      	nop
 801a400:	e7fd      	b.n	801a3fe <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 801a402:	4618      	mov	r0, r3
 801a404:	3714      	adds	r7, #20
 801a406:	46bd      	mov	sp, r7
 801a408:	bc80      	pop	{r7}
 801a40a:	4770      	bx	lr
 801a40c:	0801f714 	.word	0x0801f714

0801a410 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 801a410:	b580      	push	{r7, lr}
 801a412:	b08a      	sub	sp, #40	@ 0x28
 801a414:	af00      	add	r7, sp, #0
 801a416:	6078      	str	r0, [r7, #4]
 801a418:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 801a41a:	4b35      	ldr	r3, [pc, #212]	@ (801a4f0 <SUBGRF_GetCFO+0xe0>)
 801a41c:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 801a41e:	f640 0007 	movw	r0, #2055	@ 0x807
 801a422:	f7ff fdd7 	bl	8019fd4 <SUBGRF_ReadRegister>
 801a426:	4603      	mov	r3, r0
 801a428:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 801a42a:	7ffb      	ldrb	r3, [r7, #31]
 801a42c:	08db      	lsrs	r3, r3, #3
 801a42e:	b2db      	uxtb	r3, r3
 801a430:	f003 0303 	and.w	r3, r3, #3
 801a434:	3328      	adds	r3, #40	@ 0x28
 801a436:	443b      	add	r3, r7
 801a438:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 801a43c:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 801a43e:	7ffb      	ldrb	r3, [r7, #31]
 801a440:	f003 0307 	and.w	r3, r3, #7
 801a444:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 801a446:	7fba      	ldrb	r2, [r7, #30]
 801a448:	7f7b      	ldrb	r3, [r7, #29]
 801a44a:	3b01      	subs	r3, #1
 801a44c:	fa02 f303 	lsl.w	r3, r2, r3
 801a450:	461a      	mov	r2, r3
 801a452:	4b28      	ldr	r3, [pc, #160]	@ (801a4f4 <SUBGRF_GetCFO+0xe4>)
 801a454:	fbb3 f3f2 	udiv	r3, r3, r2
 801a458:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 801a45a:	69ba      	ldr	r2, [r7, #24]
 801a45c:	687b      	ldr	r3, [r7, #4]
 801a45e:	fbb2 f3f3 	udiv	r3, r2, r3
 801a462:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 801a464:	2301      	movs	r3, #1
 801a466:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 801a46a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a46e:	697a      	ldr	r2, [r7, #20]
 801a470:	fb02 f303 	mul.w	r3, r2, r3
 801a474:	2b07      	cmp	r3, #7
 801a476:	d802      	bhi.n	801a47e <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 801a478:	2302      	movs	r3, #2
 801a47a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  if (cf_osr * interp < 4)
 801a47e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a482:	697a      	ldr	r2, [r7, #20]
 801a484:	fb02 f303 	mul.w	r3, r2, r3
 801a488:	2b03      	cmp	r3, #3
 801a48a:	d802      	bhi.n	801a492 <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 801a48c:	2304      	movs	r3, #4
 801a48e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 801a492:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801a496:	69bb      	ldr	r3, [r7, #24]
 801a498:	fb02 f303 	mul.w	r3, r2, r3
 801a49c:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 801a49e:	f44f 60d6 	mov.w	r0, #1712	@ 0x6b0
 801a4a2:	f7ff fd97 	bl	8019fd4 <SUBGRF_ReadRegister>
 801a4a6:	4603      	mov	r3, r0
 801a4a8:	021b      	lsls	r3, r3, #8
 801a4aa:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 801a4ae:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 801a4b0:	f240 60b1 	movw	r0, #1713	@ 0x6b1
 801a4b4:	f7ff fd8e 	bl	8019fd4 <SUBGRF_ReadRegister>
 801a4b8:	4603      	mov	r3, r0
 801a4ba:	461a      	mov	r2, r3
 801a4bc:	6a3b      	ldr	r3, [r7, #32]
 801a4be:	4313      	orrs	r3, r2
 801a4c0:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 801a4c2:	6a3b      	ldr	r3, [r7, #32]
 801a4c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801a4c8:	2b00      	cmp	r3, #0
 801a4ca:	d005      	beq.n	801a4d8 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 801a4cc:	6a3b      	ldr	r3, [r7, #32]
 801a4ce:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 801a4d2:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 801a4d6:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 801a4d8:	693b      	ldr	r3, [r7, #16]
 801a4da:	095b      	lsrs	r3, r3, #5
 801a4dc:	6a3a      	ldr	r2, [r7, #32]
 801a4de:	fb02 f303 	mul.w	r3, r2, r3
 801a4e2:	11da      	asrs	r2, r3, #7
 801a4e4:	683b      	ldr	r3, [r7, #0]
 801a4e6:	601a      	str	r2, [r3, #0]
}
 801a4e8:	bf00      	nop
 801a4ea:	3728      	adds	r7, #40	@ 0x28
 801a4ec:	46bd      	mov	sp, r7
 801a4ee:	bd80      	pop	{r7, pc}
 801a4f0:	0c0a0804 	.word	0x0c0a0804
 801a4f4:	01e84800 	.word	0x01e84800

0801a4f8 <RFW_TransmitLongPacket>:
static void RFW_GetPayload( uint8_t Offset, uint8_t Length );
#endif

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout, void (*TxLongPacketGetNextChunkCb) (uint8_t** buffer, uint8_t buffer_size) )
{
 801a4f8:	b480      	push	{r7}
 801a4fa:	b087      	sub	sp, #28
 801a4fc:	af00      	add	r7, sp, #0
 801a4fe:	4603      	mov	r3, r0
 801a500:	60b9      	str	r1, [r7, #8]
 801a502:	607a      	str	r2, [r7, #4]
 801a504:	81fb      	strh	r3, [r7, #14]
  int32_t status=0;
 801a506:	2300      	movs	r3, #0
 801a508:	617b      	str	r3, [r7, #20]
        default:
            break;
    }
  }
#else
  status= -1;
 801a50a:	f04f 33ff 	mov.w	r3, #4294967295
 801a50e:	617b      	str	r3, [r7, #20]
#endif
  return status;
 801a510:	697b      	ldr	r3, [r7, #20]
}
 801a512:	4618      	mov	r0, r3
 801a514:	371c      	adds	r7, #28
 801a516:	46bd      	mov	sp, r7
 801a518:	bc80      	pop	{r7}
 801a51a:	4770      	bx	lr

0801a51c <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout, void (*RxLongPacketStoreChunkCb) (uint8_t* buffer, uint8_t chunk_size) )
{
 801a51c:	b480      	push	{r7}
 801a51e:	b087      	sub	sp, #28
 801a520:	af00      	add	r7, sp, #0
 801a522:	4603      	mov	r3, r0
 801a524:	60b9      	str	r1, [r7, #8]
 801a526:	607a      	str	r2, [r7, #4]
 801a528:	73fb      	strb	r3, [r7, #15]
  int32_t status=0;
 801a52a:	2300      	movs	r3, #0
 801a52c:	617b      	str	r3, [r7, #20]
    {
      SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
    }
  }
#else
  status= -1;
 801a52e:	f04f 33ff 	mov.w	r3, #4294967295
 801a532:	617b      	str	r3, [r7, #20]
#endif
  return status;
 801a534:	697b      	ldr	r3, [r7, #20]
}
 801a536:	4618      	mov	r0, r3
 801a538:	371c      	adds	r7, #28
 801a53a:	46bd      	mov	sp, r7
 801a53c:	bc80      	pop	{r7}
 801a53e:	4770      	bx	lr

0801a540 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t* config, RadioEvents_t* RadioEvents, TimerEvent_t* TimeoutTimerEvent)
{
 801a540:	b480      	push	{r7}
 801a542:	b085      	sub	sp, #20
 801a544:	af00      	add	r7, sp, #0
 801a546:	60f8      	str	r0, [r7, #12]
 801a548:	60b9      	str	r1, [r7, #8]
 801a54a:	607a      	str	r2, [r7, #4]
  RFWPacket.Init.Enable=1;
  /* Initialize Timer for end of fixed packet, started at sync*/
  TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
  return 0;
#else
  return -1;
 801a54c:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 801a550:	4618      	mov	r0, r3
 801a552:	3714      	adds	r7, #20
 801a554:	46bd      	mov	sp, r7
 801a556:	bc80      	pop	{r7}
 801a558:	4770      	bx	lr

0801a55a <RFW_DeInit>:

void RFW_DeInit( void)
{
 801a55a:	b480      	push	{r7}
 801a55c:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 801a55e:	bf00      	nop
 801a560:	46bd      	mov	sp, r7
 801a562:	bc80      	pop	{r7}
 801a564:	4770      	bx	lr

0801a566 <RFW_Is_Init>:

uint8_t RFW_Is_Init( void)
{
 801a566:	b480      	push	{r7}
 801a568:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
 801a56a:	2300      	movs	r3, #0
#endif
}
 801a56c:	4618      	mov	r0, r3
 801a56e:	46bd      	mov	sp, r7
 801a570:	bc80      	pop	{r7}
 801a572:	4770      	bx	lr

0801a574 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void)
{
 801a574:	b480      	push	{r7}
 801a576:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
 801a578:	2300      	movs	r3, #0
#endif
}
 801a57a:	4618      	mov	r0, r3
 801a57c:	46bd      	mov	sp, r7
 801a57e:	bc80      	pop	{r7}
 801a580:	4770      	bx	lr

0801a582 <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch)
{
 801a582:	b480      	push	{r7}
 801a584:	b083      	sub	sp, #12
 801a586:	af00      	add	r7, sp, #0
 801a588:	4603      	mov	r3, r0
 801a58a:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 801a58c:	bf00      	nop
 801a58e:	370c      	adds	r7, #12
 801a590:	46bd      	mov	sp, r7
 801a592:	bc80      	pop	{r7}
 801a594:	4770      	bx	lr

0801a596 <RFW_TransmitInit>:

int32_t RFW_TransmitInit(uint8_t* inOutBuffer, uint8_t size, uint8_t* outSize)
{
 801a596:	b480      	push	{r7}
 801a598:	b087      	sub	sp, #28
 801a59a:	af00      	add	r7, sp, #0
 801a59c:	60f8      	str	r0, [r7, #12]
 801a59e:	460b      	mov	r3, r1
 801a5a0:	607a      	str	r2, [r7, #4]
 801a5a2:	72fb      	strb	r3, [r7, #11]
  int32_t status=-1;
 801a5a4:	f04f 33ff 	mov.w	r3, #4294967295
 801a5a8:	617b      	str	r3, [r7, #20]
    RFWPacket.LongPacketModeEnable=0;

    status= 0;
  }
#endif
  return status;
 801a5aa:	697b      	ldr	r3, [r7, #20]
}
 801a5ac:	4618      	mov	r0, r3
 801a5ae:	371c      	adds	r7, #28
 801a5b0:	46bd      	mov	sp, r7
 801a5b2:	bc80      	pop	{r7}
 801a5b4:	4770      	bx	lr

0801a5b6 <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 801a5b6:	b480      	push	{r7}
 801a5b8:	af00      	add	r7, sp, #0
  RFWPacket.RxPayloadOffset=0;

  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
 801a5ba:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 801a5be:	4618      	mov	r0, r3
 801a5c0:	46bd      	mov	sp, r7
 801a5c2:	bc80      	pop	{r7}
 801a5c4:	4770      	bx	lr

0801a5c6 <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket(void)
{
 801a5c6:	b480      	push	{r7}
 801a5c8:	af00      	add	r7, sp, #0
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_GPKTCTL1AR);
  SUBGRF_WriteRegister(SUBGHZ_GPKTCTL1AR, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_GRTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 801a5ca:	bf00      	nop
 801a5cc:	46bd      	mov	sp, r7
 801a5ce:	bc80      	pop	{r7}
 801a5d0:	4770      	bx	lr

0801a5d2 <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 801a5d2:	b480      	push	{r7}
 801a5d4:	af00      	add	r7, sp, #0
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 801a5d6:	bf00      	nop
 801a5d8:	46bd      	mov	sp, r7
 801a5da:	bc80      	pop	{r7}
 801a5dc:	4770      	bx	lr

0801a5de <RFW_SetRadioModem>:

void RFW_SetRadioModem(RadioModems_t Modem)
{
 801a5de:	b480      	push	{r7}
 801a5e0:	b083      	sub	sp, #12
 801a5e2:	af00      	add	r7, sp, #0
 801a5e4:	4603      	mov	r3, r0
 801a5e6:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 801a5e8:	bf00      	nop
 801a5ea:	370c      	adds	r7, #12
 801a5ec:	46bd      	mov	sp, r7
 801a5ee:	bc80      	pop	{r7}
 801a5f0:	4770      	bx	lr
	...

0801a5f4 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801a5f4:	b480      	push	{r7}
 801a5f6:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801a5f8:	4b04      	ldr	r3, [pc, #16]	@ (801a60c <UTIL_LPM_Init+0x18>)
 801a5fa:	2200      	movs	r2, #0
 801a5fc:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801a5fe:	4b04      	ldr	r3, [pc, #16]	@ (801a610 <UTIL_LPM_Init+0x1c>)
 801a600:	2200      	movs	r2, #0
 801a602:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801a604:	bf00      	nop
 801a606:	46bd      	mov	sp, r7
 801a608:	bc80      	pop	{r7}
 801a60a:	4770      	bx	lr
 801a60c:	20001d90 	.word	0x20001d90
 801a610:	20001d94 	.word	0x20001d94

0801a614 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801a614:	b480      	push	{r7}
 801a616:	b087      	sub	sp, #28
 801a618:	af00      	add	r7, sp, #0
 801a61a:	6078      	str	r0, [r7, #4]
 801a61c:	460b      	mov	r3, r1
 801a61e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a620:	f3ef 8310 	mrs	r3, PRIMASK
 801a624:	613b      	str	r3, [r7, #16]
  return(result);
 801a626:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801a628:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a62a:	b672      	cpsid	i
}
 801a62c:	bf00      	nop
  
  switch( state )
 801a62e:	78fb      	ldrb	r3, [r7, #3]
 801a630:	2b00      	cmp	r3, #0
 801a632:	d008      	beq.n	801a646 <UTIL_LPM_SetStopMode+0x32>
 801a634:	2b01      	cmp	r3, #1
 801a636:	d10e      	bne.n	801a656 <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 801a638:	4b0d      	ldr	r3, [pc, #52]	@ (801a670 <UTIL_LPM_SetStopMode+0x5c>)
 801a63a:	681a      	ldr	r2, [r3, #0]
 801a63c:	687b      	ldr	r3, [r7, #4]
 801a63e:	4313      	orrs	r3, r2
 801a640:	4a0b      	ldr	r2, [pc, #44]	@ (801a670 <UTIL_LPM_SetStopMode+0x5c>)
 801a642:	6013      	str	r3, [r2, #0]
      break;
 801a644:	e008      	b.n	801a658 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 801a646:	687b      	ldr	r3, [r7, #4]
 801a648:	43da      	mvns	r2, r3
 801a64a:	4b09      	ldr	r3, [pc, #36]	@ (801a670 <UTIL_LPM_SetStopMode+0x5c>)
 801a64c:	681b      	ldr	r3, [r3, #0]
 801a64e:	4013      	ands	r3, r2
 801a650:	4a07      	ldr	r2, [pc, #28]	@ (801a670 <UTIL_LPM_SetStopMode+0x5c>)
 801a652:	6013      	str	r3, [r2, #0]
      break;
 801a654:	e000      	b.n	801a658 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 801a656:	bf00      	nop
 801a658:	697b      	ldr	r3, [r7, #20]
 801a65a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a65c:	68fb      	ldr	r3, [r7, #12]
 801a65e:	f383 8810 	msr	PRIMASK, r3
}
 801a662:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801a664:	bf00      	nop
 801a666:	371c      	adds	r7, #28
 801a668:	46bd      	mov	sp, r7
 801a66a:	bc80      	pop	{r7}
 801a66c:	4770      	bx	lr
 801a66e:	bf00      	nop
 801a670:	20001d90 	.word	0x20001d90

0801a674 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801a674:	b480      	push	{r7}
 801a676:	b087      	sub	sp, #28
 801a678:	af00      	add	r7, sp, #0
 801a67a:	6078      	str	r0, [r7, #4]
 801a67c:	460b      	mov	r3, r1
 801a67e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a680:	f3ef 8310 	mrs	r3, PRIMASK
 801a684:	613b      	str	r3, [r7, #16]
  return(result);
 801a686:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801a688:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a68a:	b672      	cpsid	i
}
 801a68c:	bf00      	nop
  
  switch(state)
 801a68e:	78fb      	ldrb	r3, [r7, #3]
 801a690:	2b00      	cmp	r3, #0
 801a692:	d008      	beq.n	801a6a6 <UTIL_LPM_SetOffMode+0x32>
 801a694:	2b01      	cmp	r3, #1
 801a696:	d10e      	bne.n	801a6b6 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801a698:	4b0d      	ldr	r3, [pc, #52]	@ (801a6d0 <UTIL_LPM_SetOffMode+0x5c>)
 801a69a:	681a      	ldr	r2, [r3, #0]
 801a69c:	687b      	ldr	r3, [r7, #4]
 801a69e:	4313      	orrs	r3, r2
 801a6a0:	4a0b      	ldr	r2, [pc, #44]	@ (801a6d0 <UTIL_LPM_SetOffMode+0x5c>)
 801a6a2:	6013      	str	r3, [r2, #0]
      break;
 801a6a4:	e008      	b.n	801a6b8 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801a6a6:	687b      	ldr	r3, [r7, #4]
 801a6a8:	43da      	mvns	r2, r3
 801a6aa:	4b09      	ldr	r3, [pc, #36]	@ (801a6d0 <UTIL_LPM_SetOffMode+0x5c>)
 801a6ac:	681b      	ldr	r3, [r3, #0]
 801a6ae:	4013      	ands	r3, r2
 801a6b0:	4a07      	ldr	r2, [pc, #28]	@ (801a6d0 <UTIL_LPM_SetOffMode+0x5c>)
 801a6b2:	6013      	str	r3, [r2, #0]
      break;
 801a6b4:	e000      	b.n	801a6b8 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801a6b6:	bf00      	nop
 801a6b8:	697b      	ldr	r3, [r7, #20]
 801a6ba:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a6bc:	68fb      	ldr	r3, [r7, #12]
 801a6be:	f383 8810 	msr	PRIMASK, r3
}
 801a6c2:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801a6c4:	bf00      	nop
 801a6c6:	371c      	adds	r7, #28
 801a6c8:	46bd      	mov	sp, r7
 801a6ca:	bc80      	pop	{r7}
 801a6cc:	4770      	bx	lr
 801a6ce:	bf00      	nop
 801a6d0:	20001d94 	.word	0x20001d94

0801a6d4 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 801a6d4:	b580      	push	{r7, lr}
 801a6d6:	b084      	sub	sp, #16
 801a6d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a6da:	f3ef 8310 	mrs	r3, PRIMASK
 801a6de:	60bb      	str	r3, [r7, #8]
  return(result);
 801a6e0:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 801a6e2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801a6e4:	b672      	cpsid	i
}
 801a6e6:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 801a6e8:	4b12      	ldr	r3, [pc, #72]	@ (801a734 <UTIL_LPM_EnterLowPower+0x60>)
 801a6ea:	681b      	ldr	r3, [r3, #0]
 801a6ec:	2b00      	cmp	r3, #0
 801a6ee:	d006      	beq.n	801a6fe <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 801a6f0:	4b11      	ldr	r3, [pc, #68]	@ (801a738 <UTIL_LPM_EnterLowPower+0x64>)
 801a6f2:	681b      	ldr	r3, [r3, #0]
 801a6f4:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 801a6f6:	4b10      	ldr	r3, [pc, #64]	@ (801a738 <UTIL_LPM_EnterLowPower+0x64>)
 801a6f8:	685b      	ldr	r3, [r3, #4]
 801a6fa:	4798      	blx	r3
 801a6fc:	e010      	b.n	801a720 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801a6fe:	4b0f      	ldr	r3, [pc, #60]	@ (801a73c <UTIL_LPM_EnterLowPower+0x68>)
 801a700:	681b      	ldr	r3, [r3, #0]
 801a702:	2b00      	cmp	r3, #0
 801a704:	d006      	beq.n	801a714 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 801a706:	4b0c      	ldr	r3, [pc, #48]	@ (801a738 <UTIL_LPM_EnterLowPower+0x64>)
 801a708:	689b      	ldr	r3, [r3, #8]
 801a70a:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 801a70c:	4b0a      	ldr	r3, [pc, #40]	@ (801a738 <UTIL_LPM_EnterLowPower+0x64>)
 801a70e:	68db      	ldr	r3, [r3, #12]
 801a710:	4798      	blx	r3
 801a712:	e005      	b.n	801a720 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 801a714:	4b08      	ldr	r3, [pc, #32]	@ (801a738 <UTIL_LPM_EnterLowPower+0x64>)
 801a716:	691b      	ldr	r3, [r3, #16]
 801a718:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 801a71a:	4b07      	ldr	r3, [pc, #28]	@ (801a738 <UTIL_LPM_EnterLowPower+0x64>)
 801a71c:	695b      	ldr	r3, [r3, #20]
 801a71e:	4798      	blx	r3
 801a720:	68fb      	ldr	r3, [r7, #12]
 801a722:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a724:	687b      	ldr	r3, [r7, #4]
 801a726:	f383 8810 	msr	PRIMASK, r3
}
 801a72a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 801a72c:	bf00      	nop
 801a72e:	3710      	adds	r7, #16
 801a730:	46bd      	mov	sp, r7
 801a732:	bd80      	pop	{r7, pc}
 801a734:	20001d90 	.word	0x20001d90
 801a738:	0801f18c 	.word	0x0801f18c
 801a73c:	20001d94 	.word	0x20001d94

0801a740 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 801a740:	b480      	push	{r7}
 801a742:	b087      	sub	sp, #28
 801a744:	af00      	add	r7, sp, #0
 801a746:	60f8      	str	r0, [r7, #12]
 801a748:	60b9      	str	r1, [r7, #8]
 801a74a:	4613      	mov	r3, r2
 801a74c:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 801a74e:	68fb      	ldr	r3, [r7, #12]
 801a750:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 801a752:	68bb      	ldr	r3, [r7, #8]
 801a754:	613b      	str	r3, [r7, #16]

  while( size-- )
 801a756:	e007      	b.n	801a768 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 801a758:	693a      	ldr	r2, [r7, #16]
 801a75a:	1c53      	adds	r3, r2, #1
 801a75c:	613b      	str	r3, [r7, #16]
 801a75e:	697b      	ldr	r3, [r7, #20]
 801a760:	1c59      	adds	r1, r3, #1
 801a762:	6179      	str	r1, [r7, #20]
 801a764:	7812      	ldrb	r2, [r2, #0]
 801a766:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801a768:	88fb      	ldrh	r3, [r7, #6]
 801a76a:	1e5a      	subs	r2, r3, #1
 801a76c:	80fa      	strh	r2, [r7, #6]
 801a76e:	2b00      	cmp	r3, #0
 801a770:	d1f2      	bne.n	801a758 <UTIL_MEM_cpy_8+0x18>
    }
}
 801a772:	bf00      	nop
 801a774:	bf00      	nop
 801a776:	371c      	adds	r7, #28
 801a778:	46bd      	mov	sp, r7
 801a77a:	bc80      	pop	{r7}
 801a77c:	4770      	bx	lr

0801a77e <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 801a77e:	b480      	push	{r7}
 801a780:	b085      	sub	sp, #20
 801a782:	af00      	add	r7, sp, #0
 801a784:	6078      	str	r0, [r7, #4]
 801a786:	460b      	mov	r3, r1
 801a788:	70fb      	strb	r3, [r7, #3]
 801a78a:	4613      	mov	r3, r2
 801a78c:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801a78e:	687b      	ldr	r3, [r7, #4]
 801a790:	60fb      	str	r3, [r7, #12]
  while( size-- )
 801a792:	e004      	b.n	801a79e <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 801a794:	68fb      	ldr	r3, [r7, #12]
 801a796:	1c5a      	adds	r2, r3, #1
 801a798:	60fa      	str	r2, [r7, #12]
 801a79a:	78fa      	ldrb	r2, [r7, #3]
 801a79c:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801a79e:	883b      	ldrh	r3, [r7, #0]
 801a7a0:	1e5a      	subs	r2, r3, #1
 801a7a2:	803a      	strh	r2, [r7, #0]
 801a7a4:	2b00      	cmp	r3, #0
 801a7a6:	d1f5      	bne.n	801a794 <UTIL_MEM_set_8+0x16>
  }
}
 801a7a8:	bf00      	nop
 801a7aa:	bf00      	nop
 801a7ac:	3714      	adds	r7, #20
 801a7ae:	46bd      	mov	sp, r7
 801a7b0:	bc80      	pop	{r7}
 801a7b2:	4770      	bx	lr

0801a7b4 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801a7b4:	b082      	sub	sp, #8
 801a7b6:	b480      	push	{r7}
 801a7b8:	b087      	sub	sp, #28
 801a7ba:	af00      	add	r7, sp, #0
 801a7bc:	60f8      	str	r0, [r7, #12]
 801a7be:	1d38      	adds	r0, r7, #4
 801a7c0:	e880 0006 	stmia.w	r0, {r1, r2}
 801a7c4:	627b      	str	r3, [r7, #36]	@ 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801a7c6:	2300      	movs	r3, #0
 801a7c8:	613b      	str	r3, [r7, #16]
 801a7ca:	2300      	movs	r3, #0
 801a7cc:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 801a7ce:	687a      	ldr	r2, [r7, #4]
 801a7d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a7d2:	4413      	add	r3, r2
 801a7d4:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801a7d6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801a7da:	b29a      	uxth	r2, r3
 801a7dc:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 801a7e0:	b29b      	uxth	r3, r3
 801a7e2:	4413      	add	r3, r2
 801a7e4:	b29b      	uxth	r3, r3
 801a7e6:	b21b      	sxth	r3, r3
 801a7e8:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 801a7ea:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801a7ee:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801a7f2:	db0a      	blt.n	801a80a <SysTimeAdd+0x56>
  {
    c.Seconds++;
 801a7f4:	693b      	ldr	r3, [r7, #16]
 801a7f6:	3301      	adds	r3, #1
 801a7f8:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 801a7fa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801a7fe:	b29b      	uxth	r3, r3
 801a800:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 801a804:	b29b      	uxth	r3, r3
 801a806:	b21b      	sxth	r3, r3
 801a808:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801a80a:	68fb      	ldr	r3, [r7, #12]
 801a80c:	461a      	mov	r2, r3
 801a80e:	f107 0310 	add.w	r3, r7, #16
 801a812:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a816:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801a81a:	68f8      	ldr	r0, [r7, #12]
 801a81c:	371c      	adds	r7, #28
 801a81e:	46bd      	mov	sp, r7
 801a820:	bc80      	pop	{r7}
 801a822:	b002      	add	sp, #8
 801a824:	4770      	bx	lr

0801a826 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801a826:	b082      	sub	sp, #8
 801a828:	b480      	push	{r7}
 801a82a:	b087      	sub	sp, #28
 801a82c:	af00      	add	r7, sp, #0
 801a82e:	60f8      	str	r0, [r7, #12]
 801a830:	1d38      	adds	r0, r7, #4
 801a832:	e880 0006 	stmia.w	r0, {r1, r2}
 801a836:	627b      	str	r3, [r7, #36]	@ 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801a838:	2300      	movs	r3, #0
 801a83a:	613b      	str	r3, [r7, #16]
 801a83c:	2300      	movs	r3, #0
 801a83e:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 801a840:	687a      	ldr	r2, [r7, #4]
 801a842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a844:	1ad3      	subs	r3, r2, r3
 801a846:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801a848:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801a84c:	b29a      	uxth	r2, r3
 801a84e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 801a852:	b29b      	uxth	r3, r3
 801a854:	1ad3      	subs	r3, r2, r3
 801a856:	b29b      	uxth	r3, r3
 801a858:	b21b      	sxth	r3, r3
 801a85a:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 801a85c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801a860:	2b00      	cmp	r3, #0
 801a862:	da0a      	bge.n	801a87a <SysTimeSub+0x54>
  {
    c.Seconds--;
 801a864:	693b      	ldr	r3, [r7, #16]
 801a866:	3b01      	subs	r3, #1
 801a868:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 801a86a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801a86e:	b29b      	uxth	r3, r3
 801a870:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 801a874:	b29b      	uxth	r3, r3
 801a876:	b21b      	sxth	r3, r3
 801a878:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801a87a:	68fb      	ldr	r3, [r7, #12]
 801a87c:	461a      	mov	r2, r3
 801a87e:	f107 0310 	add.w	r3, r7, #16
 801a882:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a886:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801a88a:	68f8      	ldr	r0, [r7, #12]
 801a88c:	371c      	adds	r7, #28
 801a88e:	46bd      	mov	sp, r7
 801a890:	bc80      	pop	{r7}
 801a892:	b002      	add	sp, #8
 801a894:	4770      	bx	lr
	...

0801a898 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 801a898:	b580      	push	{r7, lr}
 801a89a:	b088      	sub	sp, #32
 801a89c:	af02      	add	r7, sp, #8
 801a89e:	463b      	mov	r3, r7
 801a8a0:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801a8a4:	2300      	movs	r3, #0
 801a8a6:	60bb      	str	r3, [r7, #8]
 801a8a8:	2300      	movs	r3, #0
 801a8aa:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801a8ac:	4b10      	ldr	r3, [pc, #64]	@ (801a8f0 <SysTimeSet+0x58>)
 801a8ae:	691b      	ldr	r3, [r3, #16]
 801a8b0:	f107 0208 	add.w	r2, r7, #8
 801a8b4:	3204      	adds	r2, #4
 801a8b6:	4610      	mov	r0, r2
 801a8b8:	4798      	blx	r3
 801a8ba:	4603      	mov	r3, r0
 801a8bc:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801a8be:	f107 0010 	add.w	r0, r7, #16
 801a8c2:	68fb      	ldr	r3, [r7, #12]
 801a8c4:	9300      	str	r3, [sp, #0]
 801a8c6:	68bb      	ldr	r3, [r7, #8]
 801a8c8:	463a      	mov	r2, r7
 801a8ca:	ca06      	ldmia	r2, {r1, r2}
 801a8cc:	f7ff ffab 	bl	801a826 <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801a8d0:	4b07      	ldr	r3, [pc, #28]	@ (801a8f0 <SysTimeSet+0x58>)
 801a8d2:	681b      	ldr	r3, [r3, #0]
 801a8d4:	693a      	ldr	r2, [r7, #16]
 801a8d6:	4610      	mov	r0, r2
 801a8d8:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801a8da:	4b05      	ldr	r3, [pc, #20]	@ (801a8f0 <SysTimeSet+0x58>)
 801a8dc:	689b      	ldr	r3, [r3, #8]
 801a8de:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801a8e2:	4610      	mov	r0, r2
 801a8e4:	4798      	blx	r3
}
 801a8e6:	bf00      	nop
 801a8e8:	3718      	adds	r7, #24
 801a8ea:	46bd      	mov	sp, r7
 801a8ec:	bd80      	pop	{r7, pc}
 801a8ee:	bf00      	nop
 801a8f0:	0801f270 	.word	0x0801f270

0801a8f4 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801a8f4:	b580      	push	{r7, lr}
 801a8f6:	b08a      	sub	sp, #40	@ 0x28
 801a8f8:	af02      	add	r7, sp, #8
 801a8fa:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801a8fc:	2300      	movs	r3, #0
 801a8fe:	61bb      	str	r3, [r7, #24]
 801a900:	2300      	movs	r3, #0
 801a902:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801a904:	2300      	movs	r3, #0
 801a906:	613b      	str	r3, [r7, #16]
 801a908:	2300      	movs	r3, #0
 801a90a:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801a90c:	4b14      	ldr	r3, [pc, #80]	@ (801a960 <SysTimeGet+0x6c>)
 801a90e:	691b      	ldr	r3, [r3, #16]
 801a910:	f107 0218 	add.w	r2, r7, #24
 801a914:	3204      	adds	r2, #4
 801a916:	4610      	mov	r0, r2
 801a918:	4798      	blx	r3
 801a91a:	4603      	mov	r3, r0
 801a91c:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801a91e:	4b10      	ldr	r3, [pc, #64]	@ (801a960 <SysTimeGet+0x6c>)
 801a920:	68db      	ldr	r3, [r3, #12]
 801a922:	4798      	blx	r3
 801a924:	4603      	mov	r3, r0
 801a926:	b21b      	sxth	r3, r3
 801a928:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801a92a:	4b0d      	ldr	r3, [pc, #52]	@ (801a960 <SysTimeGet+0x6c>)
 801a92c:	685b      	ldr	r3, [r3, #4]
 801a92e:	4798      	blx	r3
 801a930:	4603      	mov	r3, r0
 801a932:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801a934:	f107 0010 	add.w	r0, r7, #16
 801a938:	69fb      	ldr	r3, [r7, #28]
 801a93a:	9300      	str	r3, [sp, #0]
 801a93c:	69bb      	ldr	r3, [r7, #24]
 801a93e:	f107 0208 	add.w	r2, r7, #8
 801a942:	ca06      	ldmia	r2, {r1, r2}
 801a944:	f7ff ff36 	bl	801a7b4 <SysTimeAdd>

  return sysTime;
 801a948:	687b      	ldr	r3, [r7, #4]
 801a94a:	461a      	mov	r2, r3
 801a94c:	f107 0310 	add.w	r3, r7, #16
 801a950:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a954:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801a958:	6878      	ldr	r0, [r7, #4]
 801a95a:	3720      	adds	r7, #32
 801a95c:	46bd      	mov	sp, r7
 801a95e:	bd80      	pop	{r7, pc}
 801a960:	0801f270 	.word	0x0801f270

0801a964 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801a964:	b580      	push	{r7, lr}
 801a966:	b084      	sub	sp, #16
 801a968:	af00      	add	r7, sp, #0
 801a96a:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801a96c:	2300      	movs	r3, #0
 801a96e:	60bb      	str	r3, [r7, #8]
 801a970:	2300      	movs	r3, #0
 801a972:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801a974:	4b0a      	ldr	r3, [pc, #40]	@ (801a9a0 <SysTimeGetMcuTime+0x3c>)
 801a976:	691b      	ldr	r3, [r3, #16]
 801a978:	f107 0208 	add.w	r2, r7, #8
 801a97c:	3204      	adds	r2, #4
 801a97e:	4610      	mov	r0, r2
 801a980:	4798      	blx	r3
 801a982:	4603      	mov	r3, r0
 801a984:	60bb      	str	r3, [r7, #8]

  return calendarTime;
 801a986:	687b      	ldr	r3, [r7, #4]
 801a988:	461a      	mov	r2, r3
 801a98a:	f107 0308 	add.w	r3, r7, #8
 801a98e:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a992:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801a996:	6878      	ldr	r0, [r7, #4]
 801a998:	3710      	adds	r7, #16
 801a99a:	46bd      	mov	sp, r7
 801a99c:	bd80      	pop	{r7, pc}
 801a99e:	bf00      	nop
 801a9a0:	0801f270 	.word	0x0801f270

0801a9a4 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 801a9a4:	b580      	push	{r7, lr}
 801a9a6:	b088      	sub	sp, #32
 801a9a8:	af02      	add	r7, sp, #8
 801a9aa:	463b      	mov	r3, r7
 801a9ac:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801a9b0:	4b0f      	ldr	r3, [pc, #60]	@ (801a9f0 <SysTimeToMs+0x4c>)
 801a9b2:	68db      	ldr	r3, [r3, #12]
 801a9b4:	4798      	blx	r3
 801a9b6:	4603      	mov	r3, r0
 801a9b8:	b21b      	sxth	r3, r3
 801a9ba:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801a9bc:	4b0c      	ldr	r3, [pc, #48]	@ (801a9f0 <SysTimeToMs+0x4c>)
 801a9be:	685b      	ldr	r3, [r3, #4]
 801a9c0:	4798      	blx	r3
 801a9c2:	4603      	mov	r3, r0
 801a9c4:	613b      	str	r3, [r7, #16]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 801a9c6:	f107 0008 	add.w	r0, r7, #8
 801a9ca:	697b      	ldr	r3, [r7, #20]
 801a9cc:	9300      	str	r3, [sp, #0]
 801a9ce:	693b      	ldr	r3, [r7, #16]
 801a9d0:	463a      	mov	r2, r7
 801a9d2:	ca06      	ldmia	r2, {r1, r2}
 801a9d4:	f7ff ff27 	bl	801a826 <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 801a9d8:	68bb      	ldr	r3, [r7, #8]
 801a9da:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801a9de:	fb02 f303 	mul.w	r3, r2, r3
 801a9e2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801a9e6:	4413      	add	r3, r2
}
 801a9e8:	4618      	mov	r0, r3
 801a9ea:	3718      	adds	r7, #24
 801a9ec:	46bd      	mov	sp, r7
 801a9ee:	bd80      	pop	{r7, pc}
 801a9f0:	0801f270 	.word	0x0801f270

0801a9f4 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 801a9f4:	b580      	push	{r7, lr}
 801a9f6:	b08a      	sub	sp, #40	@ 0x28
 801a9f8:	af02      	add	r7, sp, #8
 801a9fa:	6078      	str	r0, [r7, #4]
 801a9fc:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 801a9fe:	683b      	ldr	r3, [r7, #0]
 801aa00:	4a19      	ldr	r2, [pc, #100]	@ (801aa68 <SysTimeFromMs+0x74>)
 801aa02:	fba2 2303 	umull	r2, r3, r2, r3
 801aa06:	099b      	lsrs	r3, r3, #6
 801aa08:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 801aa0a:	69fb      	ldr	r3, [r7, #28]
 801aa0c:	617b      	str	r3, [r7, #20]
 801aa0e:	683b      	ldr	r3, [r7, #0]
 801aa10:	b29a      	uxth	r2, r3
 801aa12:	69fb      	ldr	r3, [r7, #28]
 801aa14:	b29b      	uxth	r3, r3
 801aa16:	4619      	mov	r1, r3
 801aa18:	0149      	lsls	r1, r1, #5
 801aa1a:	1ac9      	subs	r1, r1, r3
 801aa1c:	0089      	lsls	r1, r1, #2
 801aa1e:	440b      	add	r3, r1
 801aa20:	00db      	lsls	r3, r3, #3
 801aa22:	b29b      	uxth	r3, r3
 801aa24:	1ad3      	subs	r3, r2, r3
 801aa26:	b29b      	uxth	r3, r3
 801aa28:	b21b      	sxth	r3, r3
 801aa2a:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 801aa2c:	f107 030c 	add.w	r3, r7, #12
 801aa30:	2200      	movs	r2, #0
 801aa32:	601a      	str	r2, [r3, #0]
 801aa34:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801aa36:	4b0d      	ldr	r3, [pc, #52]	@ (801aa6c <SysTimeFromMs+0x78>)
 801aa38:	68db      	ldr	r3, [r3, #12]
 801aa3a:	4798      	blx	r3
 801aa3c:	4603      	mov	r3, r0
 801aa3e:	b21b      	sxth	r3, r3
 801aa40:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801aa42:	4b0a      	ldr	r3, [pc, #40]	@ (801aa6c <SysTimeFromMs+0x78>)
 801aa44:	685b      	ldr	r3, [r3, #4]
 801aa46:	4798      	blx	r3
 801aa48:	4603      	mov	r3, r0
 801aa4a:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 801aa4c:	6878      	ldr	r0, [r7, #4]
 801aa4e:	693b      	ldr	r3, [r7, #16]
 801aa50:	9300      	str	r3, [sp, #0]
 801aa52:	68fb      	ldr	r3, [r7, #12]
 801aa54:	f107 0214 	add.w	r2, r7, #20
 801aa58:	ca06      	ldmia	r2, {r1, r2}
 801aa5a:	f7ff feab 	bl	801a7b4 <SysTimeAdd>
}
 801aa5e:	6878      	ldr	r0, [r7, #4]
 801aa60:	3720      	adds	r7, #32
 801aa62:	46bd      	mov	sp, r7
 801aa64:	bd80      	pop	{r7, pc}
 801aa66:	bf00      	nop
 801aa68:	10624dd3 	.word	0x10624dd3
 801aa6c:	0801f270 	.word	0x0801f270

0801aa70 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 801aa70:	b480      	push	{r7}
 801aa72:	b085      	sub	sp, #20
 801aa74:	af00      	add	r7, sp, #0
 801aa76:	6078      	str	r0, [r7, #4]
  int i = 0;
 801aa78:	2300      	movs	r3, #0
 801aa7a:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801aa7c:	e00e      	b.n	801aa9c <ee_skip_atoi+0x2c>
 801aa7e:	68fa      	ldr	r2, [r7, #12]
 801aa80:	4613      	mov	r3, r2
 801aa82:	009b      	lsls	r3, r3, #2
 801aa84:	4413      	add	r3, r2
 801aa86:	005b      	lsls	r3, r3, #1
 801aa88:	4618      	mov	r0, r3
 801aa8a:	687b      	ldr	r3, [r7, #4]
 801aa8c:	681b      	ldr	r3, [r3, #0]
 801aa8e:	1c59      	adds	r1, r3, #1
 801aa90:	687a      	ldr	r2, [r7, #4]
 801aa92:	6011      	str	r1, [r2, #0]
 801aa94:	781b      	ldrb	r3, [r3, #0]
 801aa96:	4403      	add	r3, r0
 801aa98:	3b30      	subs	r3, #48	@ 0x30
 801aa9a:	60fb      	str	r3, [r7, #12]
 801aa9c:	687b      	ldr	r3, [r7, #4]
 801aa9e:	681b      	ldr	r3, [r3, #0]
 801aaa0:	781b      	ldrb	r3, [r3, #0]
 801aaa2:	2b2f      	cmp	r3, #47	@ 0x2f
 801aaa4:	d904      	bls.n	801aab0 <ee_skip_atoi+0x40>
 801aaa6:	687b      	ldr	r3, [r7, #4]
 801aaa8:	681b      	ldr	r3, [r3, #0]
 801aaaa:	781b      	ldrb	r3, [r3, #0]
 801aaac:	2b39      	cmp	r3, #57	@ 0x39
 801aaae:	d9e6      	bls.n	801aa7e <ee_skip_atoi+0xe>
  return i;
 801aab0:	68fb      	ldr	r3, [r7, #12]
}
 801aab2:	4618      	mov	r0, r3
 801aab4:	3714      	adds	r7, #20
 801aab6:	46bd      	mov	sp, r7
 801aab8:	bc80      	pop	{r7}
 801aaba:	4770      	bx	lr

0801aabc <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 801aabc:	b480      	push	{r7}
 801aabe:	b099      	sub	sp, #100	@ 0x64
 801aac0:	af00      	add	r7, sp, #0
 801aac2:	60f8      	str	r0, [r7, #12]
 801aac4:	60b9      	str	r1, [r7, #8]
 801aac6:	607a      	str	r2, [r7, #4]
 801aac8:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 801aaca:	4b71      	ldr	r3, [pc, #452]	@ (801ac90 <ee_number+0x1d4>)
 801aacc:	681b      	ldr	r3, [r3, #0]
 801aace:	65bb      	str	r3, [r7, #88]	@ 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801aad0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801aad2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801aad6:	2b00      	cmp	r3, #0
 801aad8:	d002      	beq.n	801aae0 <ee_number+0x24>
 801aada:	4b6e      	ldr	r3, [pc, #440]	@ (801ac94 <ee_number+0x1d8>)
 801aadc:	681b      	ldr	r3, [r3, #0]
 801aade:	65bb      	str	r3, [r7, #88]	@ 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 801aae0:	683b      	ldr	r3, [r7, #0]
 801aae2:	2b01      	cmp	r3, #1
 801aae4:	dd02      	ble.n	801aaec <ee_number+0x30>
 801aae6:	683b      	ldr	r3, [r7, #0]
 801aae8:	2b24      	cmp	r3, #36	@ 0x24
 801aaea:	dd01      	ble.n	801aaf0 <ee_number+0x34>
 801aaec:	2300      	movs	r3, #0
 801aaee:	e0ca      	b.n	801ac86 <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 801aaf0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801aaf2:	f003 0301 	and.w	r3, r3, #1
 801aaf6:	2b00      	cmp	r3, #0
 801aaf8:	d001      	beq.n	801aafe <ee_number+0x42>
 801aafa:	2330      	movs	r3, #48	@ 0x30
 801aafc:	e000      	b.n	801ab00 <ee_number+0x44>
 801aafe:	2320      	movs	r3, #32
 801ab00:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  sign = 0;
 801ab04:	2300      	movs	r3, #0
 801ab06:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if (type & SIGN)
 801ab0a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801ab0c:	f003 0302 	and.w	r3, r3, #2
 801ab10:	2b00      	cmp	r3, #0
 801ab12:	d00b      	beq.n	801ab2c <ee_number+0x70>
  {
    if (num < 0)
 801ab14:	687b      	ldr	r3, [r7, #4]
 801ab16:	2b00      	cmp	r3, #0
 801ab18:	da08      	bge.n	801ab2c <ee_number+0x70>
    {
      sign = '-';
 801ab1a:	232d      	movs	r3, #45	@ 0x2d
 801ab1c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
      num = -num;
 801ab20:	687b      	ldr	r3, [r7, #4]
 801ab22:	425b      	negs	r3, r3
 801ab24:	607b      	str	r3, [r7, #4]
      size--;
 801ab26:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801ab28:	3b01      	subs	r3, #1
 801ab2a:	66bb      	str	r3, [r7, #104]	@ 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 801ab2c:	2300      	movs	r3, #0
 801ab2e:	657b      	str	r3, [r7, #84]	@ 0x54

  if (num == 0)
 801ab30:	687b      	ldr	r3, [r7, #4]
 801ab32:	2b00      	cmp	r3, #0
 801ab34:	d11e      	bne.n	801ab74 <ee_number+0xb8>
    tmp[i++] = '0';
 801ab36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801ab38:	1c5a      	adds	r2, r3, #1
 801ab3a:	657a      	str	r2, [r7, #84]	@ 0x54
 801ab3c:	3360      	adds	r3, #96	@ 0x60
 801ab3e:	443b      	add	r3, r7
 801ab40:	2230      	movs	r2, #48	@ 0x30
 801ab42:	f803 2c50 	strb.w	r2, [r3, #-80]
 801ab46:	e018      	b.n	801ab7a <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801ab48:	687b      	ldr	r3, [r7, #4]
 801ab4a:	683a      	ldr	r2, [r7, #0]
 801ab4c:	fbb3 f1f2 	udiv	r1, r3, r2
 801ab50:	fb01 f202 	mul.w	r2, r1, r2
 801ab54:	1a9b      	subs	r3, r3, r2
 801ab56:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801ab58:	441a      	add	r2, r3
 801ab5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801ab5c:	1c59      	adds	r1, r3, #1
 801ab5e:	6579      	str	r1, [r7, #84]	@ 0x54
 801ab60:	7812      	ldrb	r2, [r2, #0]
 801ab62:	3360      	adds	r3, #96	@ 0x60
 801ab64:	443b      	add	r3, r7
 801ab66:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 801ab6a:	687a      	ldr	r2, [r7, #4]
 801ab6c:	683b      	ldr	r3, [r7, #0]
 801ab6e:	fbb2 f3f3 	udiv	r3, r2, r3
 801ab72:	607b      	str	r3, [r7, #4]
    while (num != 0)
 801ab74:	687b      	ldr	r3, [r7, #4]
 801ab76:	2b00      	cmp	r3, #0
 801ab78:	d1e6      	bne.n	801ab48 <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 801ab7a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801ab7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801ab7e:	429a      	cmp	r2, r3
 801ab80:	dd01      	ble.n	801ab86 <ee_number+0xca>
 801ab82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801ab84:	66fb      	str	r3, [r7, #108]	@ 0x6c
  size -= precision;
 801ab86:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801ab88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801ab8a:	1ad3      	subs	r3, r2, r3
 801ab8c:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801ab8e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801ab90:	f003 0301 	and.w	r3, r3, #1
 801ab94:	2b00      	cmp	r3, #0
 801ab96:	d112      	bne.n	801abbe <ee_number+0x102>
 801ab98:	e00c      	b.n	801abb4 <ee_number+0xf8>
 801ab9a:	68fb      	ldr	r3, [r7, #12]
 801ab9c:	1c5a      	adds	r2, r3, #1
 801ab9e:	60fa      	str	r2, [r7, #12]
 801aba0:	2220      	movs	r2, #32
 801aba2:	701a      	strb	r2, [r3, #0]
 801aba4:	68bb      	ldr	r3, [r7, #8]
 801aba6:	3b01      	subs	r3, #1
 801aba8:	60bb      	str	r3, [r7, #8]
 801abaa:	68bb      	ldr	r3, [r7, #8]
 801abac:	2b00      	cmp	r3, #0
 801abae:	d101      	bne.n	801abb4 <ee_number+0xf8>
 801abb0:	68fb      	ldr	r3, [r7, #12]
 801abb2:	e068      	b.n	801ac86 <ee_number+0x1ca>
 801abb4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801abb6:	1e5a      	subs	r2, r3, #1
 801abb8:	66ba      	str	r2, [r7, #104]	@ 0x68
 801abba:	2b00      	cmp	r3, #0
 801abbc:	dced      	bgt.n	801ab9a <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 801abbe:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801abc2:	2b00      	cmp	r3, #0
 801abc4:	d01b      	beq.n	801abfe <ee_number+0x142>
 801abc6:	68fb      	ldr	r3, [r7, #12]
 801abc8:	1c5a      	adds	r2, r3, #1
 801abca:	60fa      	str	r2, [r7, #12]
 801abcc:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 801abd0:	701a      	strb	r2, [r3, #0]
 801abd2:	68bb      	ldr	r3, [r7, #8]
 801abd4:	3b01      	subs	r3, #1
 801abd6:	60bb      	str	r3, [r7, #8]
 801abd8:	68bb      	ldr	r3, [r7, #8]
 801abda:	2b00      	cmp	r3, #0
 801abdc:	d10f      	bne.n	801abfe <ee_number+0x142>
 801abde:	68fb      	ldr	r3, [r7, #12]
 801abe0:	e051      	b.n	801ac86 <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801abe2:	68fb      	ldr	r3, [r7, #12]
 801abe4:	1c5a      	adds	r2, r3, #1
 801abe6:	60fa      	str	r2, [r7, #12]
 801abe8:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 801abec:	701a      	strb	r2, [r3, #0]
 801abee:	68bb      	ldr	r3, [r7, #8]
 801abf0:	3b01      	subs	r3, #1
 801abf2:	60bb      	str	r3, [r7, #8]
 801abf4:	68bb      	ldr	r3, [r7, #8]
 801abf6:	2b00      	cmp	r3, #0
 801abf8:	d101      	bne.n	801abfe <ee_number+0x142>
 801abfa:	68fb      	ldr	r3, [r7, #12]
 801abfc:	e043      	b.n	801ac86 <ee_number+0x1ca>
 801abfe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801ac00:	1e5a      	subs	r2, r3, #1
 801ac02:	66ba      	str	r2, [r7, #104]	@ 0x68
 801ac04:	2b00      	cmp	r3, #0
 801ac06:	dcec      	bgt.n	801abe2 <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 801ac08:	e00c      	b.n	801ac24 <ee_number+0x168>
 801ac0a:	68fb      	ldr	r3, [r7, #12]
 801ac0c:	1c5a      	adds	r2, r3, #1
 801ac0e:	60fa      	str	r2, [r7, #12]
 801ac10:	2230      	movs	r2, #48	@ 0x30
 801ac12:	701a      	strb	r2, [r3, #0]
 801ac14:	68bb      	ldr	r3, [r7, #8]
 801ac16:	3b01      	subs	r3, #1
 801ac18:	60bb      	str	r3, [r7, #8]
 801ac1a:	68bb      	ldr	r3, [r7, #8]
 801ac1c:	2b00      	cmp	r3, #0
 801ac1e:	d101      	bne.n	801ac24 <ee_number+0x168>
 801ac20:	68fb      	ldr	r3, [r7, #12]
 801ac22:	e030      	b.n	801ac86 <ee_number+0x1ca>
 801ac24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801ac26:	1e5a      	subs	r2, r3, #1
 801ac28:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801ac2a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801ac2c:	429a      	cmp	r2, r3
 801ac2e:	dbec      	blt.n	801ac0a <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 801ac30:	e010      	b.n	801ac54 <ee_number+0x198>
 801ac32:	68fb      	ldr	r3, [r7, #12]
 801ac34:	1c5a      	adds	r2, r3, #1
 801ac36:	60fa      	str	r2, [r7, #12]
 801ac38:	f107 0110 	add.w	r1, r7, #16
 801ac3c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801ac3e:	440a      	add	r2, r1
 801ac40:	7812      	ldrb	r2, [r2, #0]
 801ac42:	701a      	strb	r2, [r3, #0]
 801ac44:	68bb      	ldr	r3, [r7, #8]
 801ac46:	3b01      	subs	r3, #1
 801ac48:	60bb      	str	r3, [r7, #8]
 801ac4a:	68bb      	ldr	r3, [r7, #8]
 801ac4c:	2b00      	cmp	r3, #0
 801ac4e:	d101      	bne.n	801ac54 <ee_number+0x198>
 801ac50:	68fb      	ldr	r3, [r7, #12]
 801ac52:	e018      	b.n	801ac86 <ee_number+0x1ca>
 801ac54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801ac56:	1e5a      	subs	r2, r3, #1
 801ac58:	657a      	str	r2, [r7, #84]	@ 0x54
 801ac5a:	2b00      	cmp	r3, #0
 801ac5c:	dce9      	bgt.n	801ac32 <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 801ac5e:	e00c      	b.n	801ac7a <ee_number+0x1be>
 801ac60:	68fb      	ldr	r3, [r7, #12]
 801ac62:	1c5a      	adds	r2, r3, #1
 801ac64:	60fa      	str	r2, [r7, #12]
 801ac66:	2220      	movs	r2, #32
 801ac68:	701a      	strb	r2, [r3, #0]
 801ac6a:	68bb      	ldr	r3, [r7, #8]
 801ac6c:	3b01      	subs	r3, #1
 801ac6e:	60bb      	str	r3, [r7, #8]
 801ac70:	68bb      	ldr	r3, [r7, #8]
 801ac72:	2b00      	cmp	r3, #0
 801ac74:	d101      	bne.n	801ac7a <ee_number+0x1be>
 801ac76:	68fb      	ldr	r3, [r7, #12]
 801ac78:	e005      	b.n	801ac86 <ee_number+0x1ca>
 801ac7a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801ac7c:	1e5a      	subs	r2, r3, #1
 801ac7e:	66ba      	str	r2, [r7, #104]	@ 0x68
 801ac80:	2b00      	cmp	r3, #0
 801ac82:	dced      	bgt.n	801ac60 <ee_number+0x1a4>

  return str;
 801ac84:	68fb      	ldr	r3, [r7, #12]
}
 801ac86:	4618      	mov	r0, r3
 801ac88:	3764      	adds	r7, #100	@ 0x64
 801ac8a:	46bd      	mov	sp, r7
 801ac8c:	bc80      	pop	{r7}
 801ac8e:	4770      	bx	lr
 801ac90:	20000130 	.word	0x20000130
 801ac94:	20000134 	.word	0x20000134

0801ac98 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801ac98:	b580      	push	{r7, lr}
 801ac9a:	b092      	sub	sp, #72	@ 0x48
 801ac9c:	af04      	add	r7, sp, #16
 801ac9e:	60f8      	str	r0, [r7, #12]
 801aca0:	60b9      	str	r1, [r7, #8]
 801aca2:	607a      	str	r2, [r7, #4]
 801aca4:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801aca6:	68bb      	ldr	r3, [r7, #8]
 801aca8:	2b00      	cmp	r3, #0
 801acaa:	dc01      	bgt.n	801acb0 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 801acac:	2300      	movs	r3, #0
 801acae:	e13e      	b.n	801af2e <tiny_vsnprintf_like+0x296>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801acb0:	68fb      	ldr	r3, [r7, #12]
 801acb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801acb4:	e128      	b.n	801af08 <tiny_vsnprintf_like+0x270>
  {
    CHECK_STR_SIZE(buf, str, size);
 801acb6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801acb8:	68fb      	ldr	r3, [r7, #12]
 801acba:	1ad2      	subs	r2, r2, r3
 801acbc:	68bb      	ldr	r3, [r7, #8]
 801acbe:	3b01      	subs	r3, #1
 801acc0:	429a      	cmp	r2, r3
 801acc2:	f280 812e 	bge.w	801af22 <tiny_vsnprintf_like+0x28a>

    if (*fmt != '%')
 801acc6:	687b      	ldr	r3, [r7, #4]
 801acc8:	781b      	ldrb	r3, [r3, #0]
 801acca:	2b25      	cmp	r3, #37	@ 0x25
 801accc:	d006      	beq.n	801acdc <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 801acce:	687a      	ldr	r2, [r7, #4]
 801acd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801acd2:	1c59      	adds	r1, r3, #1
 801acd4:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801acd6:	7812      	ldrb	r2, [r2, #0]
 801acd8:	701a      	strb	r2, [r3, #0]
      continue;
 801acda:	e112      	b.n	801af02 <tiny_vsnprintf_like+0x26a>
    }

    // Process flags
    flags = 0;
 801acdc:	2300      	movs	r3, #0
 801acde:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801ace0:	687b      	ldr	r3, [r7, #4]
 801ace2:	3301      	adds	r3, #1
 801ace4:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 801ace6:	687b      	ldr	r3, [r7, #4]
 801ace8:	781b      	ldrb	r3, [r3, #0]
 801acea:	2b30      	cmp	r3, #48	@ 0x30
 801acec:	d103      	bne.n	801acf6 <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 801acee:	6a3b      	ldr	r3, [r7, #32]
 801acf0:	f043 0301 	orr.w	r3, r3, #1
 801acf4:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 801acf6:	f04f 33ff 	mov.w	r3, #4294967295
 801acfa:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 801acfc:	687b      	ldr	r3, [r7, #4]
 801acfe:	781b      	ldrb	r3, [r3, #0]
 801ad00:	2b2f      	cmp	r3, #47	@ 0x2f
 801ad02:	d908      	bls.n	801ad16 <tiny_vsnprintf_like+0x7e>
 801ad04:	687b      	ldr	r3, [r7, #4]
 801ad06:	781b      	ldrb	r3, [r3, #0]
 801ad08:	2b39      	cmp	r3, #57	@ 0x39
 801ad0a:	d804      	bhi.n	801ad16 <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 801ad0c:	1d3b      	adds	r3, r7, #4
 801ad0e:	4618      	mov	r0, r3
 801ad10:	f7ff feae 	bl	801aa70 <ee_skip_atoi>
 801ad14:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 801ad16:	f04f 33ff 	mov.w	r3, #4294967295
 801ad1a:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 801ad1c:	f04f 33ff 	mov.w	r3, #4294967295
 801ad20:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 801ad22:	230a      	movs	r3, #10
 801ad24:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (*fmt)
 801ad26:	687b      	ldr	r3, [r7, #4]
 801ad28:	781b      	ldrb	r3, [r3, #0]
 801ad2a:	3b58      	subs	r3, #88	@ 0x58
 801ad2c:	2b20      	cmp	r3, #32
 801ad2e:	f200 8094 	bhi.w	801ae5a <tiny_vsnprintf_like+0x1c2>
 801ad32:	a201      	add	r2, pc, #4	@ (adr r2, 801ad38 <tiny_vsnprintf_like+0xa0>)
 801ad34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ad38:	0801ae43 	.word	0x0801ae43
 801ad3c:	0801ae5b 	.word	0x0801ae5b
 801ad40:	0801ae5b 	.word	0x0801ae5b
 801ad44:	0801ae5b 	.word	0x0801ae5b
 801ad48:	0801ae5b 	.word	0x0801ae5b
 801ad4c:	0801ae5b 	.word	0x0801ae5b
 801ad50:	0801ae5b 	.word	0x0801ae5b
 801ad54:	0801ae5b 	.word	0x0801ae5b
 801ad58:	0801ae5b 	.word	0x0801ae5b
 801ad5c:	0801ae5b 	.word	0x0801ae5b
 801ad60:	0801ae5b 	.word	0x0801ae5b
 801ad64:	0801adc7 	.word	0x0801adc7
 801ad68:	0801ae51 	.word	0x0801ae51
 801ad6c:	0801ae5b 	.word	0x0801ae5b
 801ad70:	0801ae5b 	.word	0x0801ae5b
 801ad74:	0801ae5b 	.word	0x0801ae5b
 801ad78:	0801ae5b 	.word	0x0801ae5b
 801ad7c:	0801ae51 	.word	0x0801ae51
 801ad80:	0801ae5b 	.word	0x0801ae5b
 801ad84:	0801ae5b 	.word	0x0801ae5b
 801ad88:	0801ae5b 	.word	0x0801ae5b
 801ad8c:	0801ae5b 	.word	0x0801ae5b
 801ad90:	0801ae5b 	.word	0x0801ae5b
 801ad94:	0801ae5b 	.word	0x0801ae5b
 801ad98:	0801ae5b 	.word	0x0801ae5b
 801ad9c:	0801ae5b 	.word	0x0801ae5b
 801ada0:	0801ae5b 	.word	0x0801ae5b
 801ada4:	0801ade7 	.word	0x0801ade7
 801ada8:	0801ae5b 	.word	0x0801ae5b
 801adac:	0801aea7 	.word	0x0801aea7
 801adb0:	0801ae5b 	.word	0x0801ae5b
 801adb4:	0801ae5b 	.word	0x0801ae5b
 801adb8:	0801ae4b 	.word	0x0801ae4b
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801adbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801adbe:	1c5a      	adds	r2, r3, #1
 801adc0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801adc2:	2220      	movs	r2, #32
 801adc4:	701a      	strb	r2, [r3, #0]
 801adc6:	69fb      	ldr	r3, [r7, #28]
 801adc8:	3b01      	subs	r3, #1
 801adca:	61fb      	str	r3, [r7, #28]
 801adcc:	69fb      	ldr	r3, [r7, #28]
 801adce:	2b00      	cmp	r3, #0
 801add0:	dcf4      	bgt.n	801adbc <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 801add2:	683b      	ldr	r3, [r7, #0]
 801add4:	1d1a      	adds	r2, r3, #4
 801add6:	603a      	str	r2, [r7, #0]
 801add8:	6819      	ldr	r1, [r3, #0]
 801adda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801addc:	1c5a      	adds	r2, r3, #1
 801adde:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801ade0:	b2ca      	uxtb	r2, r1
 801ade2:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801ade4:	e08d      	b.n	801af02 <tiny_vsnprintf_like+0x26a>

      case 's':
        s = va_arg(args, char *);
 801ade6:	683b      	ldr	r3, [r7, #0]
 801ade8:	1d1a      	adds	r2, r3, #4
 801adea:	603a      	str	r2, [r7, #0]
 801adec:	681b      	ldr	r3, [r3, #0]
 801adee:	627b      	str	r3, [r7, #36]	@ 0x24
        if (!s) s = "<NULL>";
 801adf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801adf2:	2b00      	cmp	r3, #0
 801adf4:	d101      	bne.n	801adfa <tiny_vsnprintf_like+0x162>
 801adf6:	4b50      	ldr	r3, [pc, #320]	@ (801af38 <tiny_vsnprintf_like+0x2a0>)
 801adf8:	627b      	str	r3, [r7, #36]	@ 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801adfa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801adfc:	f7e5 fa10 	bl	8000220 <strlen>
 801ae00:	4603      	mov	r3, r0
 801ae02:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801ae04:	e004      	b.n	801ae10 <tiny_vsnprintf_like+0x178>
 801ae06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ae08:	1c5a      	adds	r2, r3, #1
 801ae0a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801ae0c:	2220      	movs	r2, #32
 801ae0e:	701a      	strb	r2, [r3, #0]
 801ae10:	69fb      	ldr	r3, [r7, #28]
 801ae12:	1e5a      	subs	r2, r3, #1
 801ae14:	61fa      	str	r2, [r7, #28]
 801ae16:	693a      	ldr	r2, [r7, #16]
 801ae18:	429a      	cmp	r2, r3
 801ae1a:	dbf4      	blt.n	801ae06 <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801ae1c:	2300      	movs	r3, #0
 801ae1e:	62bb      	str	r3, [r7, #40]	@ 0x28
 801ae20:	e00a      	b.n	801ae38 <tiny_vsnprintf_like+0x1a0>
 801ae22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801ae24:	1c53      	adds	r3, r2, #1
 801ae26:	627b      	str	r3, [r7, #36]	@ 0x24
 801ae28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ae2a:	1c59      	adds	r1, r3, #1
 801ae2c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801ae2e:	7812      	ldrb	r2, [r2, #0]
 801ae30:	701a      	strb	r2, [r3, #0]
 801ae32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ae34:	3301      	adds	r3, #1
 801ae36:	62bb      	str	r3, [r7, #40]	@ 0x28
 801ae38:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801ae3a:	693b      	ldr	r3, [r7, #16]
 801ae3c:	429a      	cmp	r2, r3
 801ae3e:	dbf0      	blt.n	801ae22 <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 801ae40:	e05f      	b.n	801af02 <tiny_vsnprintf_like+0x26a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 801ae42:	6a3b      	ldr	r3, [r7, #32]
 801ae44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ae48:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801ae4a:	2310      	movs	r3, #16
 801ae4c:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
 801ae4e:	e02b      	b.n	801aea8 <tiny_vsnprintf_like+0x210>

      case 'd':
      case 'i':
        flags |= SIGN;
 801ae50:	6a3b      	ldr	r3, [r7, #32]
 801ae52:	f043 0302 	orr.w	r3, r3, #2
 801ae56:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 801ae58:	e025      	b.n	801aea6 <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801ae5a:	687b      	ldr	r3, [r7, #4]
 801ae5c:	781b      	ldrb	r3, [r3, #0]
 801ae5e:	2b25      	cmp	r3, #37	@ 0x25
 801ae60:	d004      	beq.n	801ae6c <tiny_vsnprintf_like+0x1d4>
 801ae62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ae64:	1c5a      	adds	r2, r3, #1
 801ae66:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801ae68:	2225      	movs	r2, #37	@ 0x25
 801ae6a:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 801ae6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801ae6e:	68fb      	ldr	r3, [r7, #12]
 801ae70:	1ad2      	subs	r2, r2, r3
 801ae72:	68bb      	ldr	r3, [r7, #8]
 801ae74:	3b01      	subs	r3, #1
 801ae76:	429a      	cmp	r2, r3
 801ae78:	da16      	bge.n	801aea8 <tiny_vsnprintf_like+0x210>
        if (*fmt)
 801ae7a:	687b      	ldr	r3, [r7, #4]
 801ae7c:	781b      	ldrb	r3, [r3, #0]
 801ae7e:	2b00      	cmp	r3, #0
 801ae80:	d006      	beq.n	801ae90 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 801ae82:	687a      	ldr	r2, [r7, #4]
 801ae84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ae86:	1c59      	adds	r1, r3, #1
 801ae88:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801ae8a:	7812      	ldrb	r2, [r2, #0]
 801ae8c:	701a      	strb	r2, [r3, #0]
 801ae8e:	e002      	b.n	801ae96 <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 801ae90:	687b      	ldr	r3, [r7, #4]
 801ae92:	3b01      	subs	r3, #1
 801ae94:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801ae96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801ae98:	68fb      	ldr	r3, [r7, #12]
 801ae9a:	1ad2      	subs	r2, r2, r3
 801ae9c:	68bb      	ldr	r3, [r7, #8]
 801ae9e:	3b01      	subs	r3, #1
 801aea0:	429a      	cmp	r2, r3
 801aea2:	db2d      	blt.n	801af00 <tiny_vsnprintf_like+0x268>
 801aea4:	e000      	b.n	801aea8 <tiny_vsnprintf_like+0x210>
        break;
 801aea6:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 801aea8:	697b      	ldr	r3, [r7, #20]
 801aeaa:	2b6c      	cmp	r3, #108	@ 0x6c
 801aeac:	d105      	bne.n	801aeba <tiny_vsnprintf_like+0x222>
      num = va_arg(args, unsigned long);
 801aeae:	683b      	ldr	r3, [r7, #0]
 801aeb0:	1d1a      	adds	r2, r3, #4
 801aeb2:	603a      	str	r2, [r7, #0]
 801aeb4:	681b      	ldr	r3, [r3, #0]
 801aeb6:	637b      	str	r3, [r7, #52]	@ 0x34
 801aeb8:	e00f      	b.n	801aeda <tiny_vsnprintf_like+0x242>
    else if (flags & SIGN)
 801aeba:	6a3b      	ldr	r3, [r7, #32]
 801aebc:	f003 0302 	and.w	r3, r3, #2
 801aec0:	2b00      	cmp	r3, #0
 801aec2:	d005      	beq.n	801aed0 <tiny_vsnprintf_like+0x238>
      num = va_arg(args, int);
 801aec4:	683b      	ldr	r3, [r7, #0]
 801aec6:	1d1a      	adds	r2, r3, #4
 801aec8:	603a      	str	r2, [r7, #0]
 801aeca:	681b      	ldr	r3, [r3, #0]
 801aecc:	637b      	str	r3, [r7, #52]	@ 0x34
 801aece:	e004      	b.n	801aeda <tiny_vsnprintf_like+0x242>
    else
      num = va_arg(args, unsigned int);
 801aed0:	683b      	ldr	r3, [r7, #0]
 801aed2:	1d1a      	adds	r2, r3, #4
 801aed4:	603a      	str	r2, [r7, #0]
 801aed6:	681b      	ldr	r3, [r3, #0]
 801aed8:	637b      	str	r3, [r7, #52]	@ 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801aeda:	68bb      	ldr	r3, [r7, #8]
 801aedc:	1e5a      	subs	r2, r3, #1
 801aede:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801aee0:	68fb      	ldr	r3, [r7, #12]
 801aee2:	1acb      	subs	r3, r1, r3
 801aee4:	1ad1      	subs	r1, r2, r3
 801aee6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801aee8:	6a3b      	ldr	r3, [r7, #32]
 801aeea:	9302      	str	r3, [sp, #8]
 801aeec:	69bb      	ldr	r3, [r7, #24]
 801aeee:	9301      	str	r3, [sp, #4]
 801aef0:	69fb      	ldr	r3, [r7, #28]
 801aef2:	9300      	str	r3, [sp, #0]
 801aef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aef6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801aef8:	f7ff fde0 	bl	801aabc <ee_number>
 801aefc:	62f8      	str	r0, [r7, #44]	@ 0x2c
 801aefe:	e000      	b.n	801af02 <tiny_vsnprintf_like+0x26a>
        continue;
 801af00:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801af02:	687b      	ldr	r3, [r7, #4]
 801af04:	3301      	adds	r3, #1
 801af06:	607b      	str	r3, [r7, #4]
 801af08:	687b      	ldr	r3, [r7, #4]
 801af0a:	781b      	ldrb	r3, [r3, #0]
 801af0c:	2b00      	cmp	r3, #0
 801af0e:	f47f aed2 	bne.w	801acb6 <tiny_vsnprintf_like+0x1e>
 801af12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801af14:	68fb      	ldr	r3, [r7, #12]
 801af16:	1ad2      	subs	r2, r2, r3
 801af18:	68bb      	ldr	r3, [r7, #8]
 801af1a:	3b01      	subs	r3, #1
 801af1c:	429a      	cmp	r2, r3
 801af1e:	f6bf aeca 	bge.w	801acb6 <tiny_vsnprintf_like+0x1e>
  }

  *str = '\0';
 801af22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801af24:	2200      	movs	r2, #0
 801af26:	701a      	strb	r2, [r3, #0]
  return str - buf;
 801af28:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801af2a:	68fb      	ldr	r3, [r7, #12]
 801af2c:	1ad3      	subs	r3, r2, r3
}
 801af2e:	4618      	mov	r0, r3
 801af30:	3738      	adds	r7, #56	@ 0x38
 801af32:	46bd      	mov	sp, r7
 801af34:	bd80      	pop	{r7, pc}
 801af36:	bf00      	nop
 801af38:	0801f184 	.word	0x0801f184

0801af3c <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801af3c:	b580      	push	{r7, lr}
 801af3e:	b090      	sub	sp, #64	@ 0x40
 801af40:	af00      	add	r7, sp, #0
 801af42:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801af44:	4b73      	ldr	r3, [pc, #460]	@ (801b114 <UTIL_SEQ_Run+0x1d8>)
 801af46:	681b      	ldr	r3, [r3, #0]
 801af48:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 801af4a:	4b72      	ldr	r3, [pc, #456]	@ (801b114 <UTIL_SEQ_Run+0x1d8>)
 801af4c:	681a      	ldr	r2, [r3, #0]
 801af4e:	687b      	ldr	r3, [r7, #4]
 801af50:	4013      	ands	r3, r2
 801af52:	4a70      	ldr	r2, [pc, #448]	@ (801b114 <UTIL_SEQ_Run+0x1d8>)
 801af54:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 801af56:	4b70      	ldr	r3, [pc, #448]	@ (801b118 <UTIL_SEQ_Run+0x1dc>)
 801af58:	681b      	ldr	r3, [r3, #0]
 801af5a:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 801af5c:	4b6f      	ldr	r3, [pc, #444]	@ (801b11c <UTIL_SEQ_Run+0x1e0>)
 801af5e:	681b      	ldr	r3, [r3, #0]
 801af60:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 801af62:	4b6f      	ldr	r3, [pc, #444]	@ (801b120 <UTIL_SEQ_Run+0x1e4>)
 801af64:	681b      	ldr	r3, [r3, #0]
 801af66:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 801af68:	4b6e      	ldr	r3, [pc, #440]	@ (801b124 <UTIL_SEQ_Run+0x1e8>)
 801af6a:	681b      	ldr	r3, [r3, #0]
 801af6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801af6e:	e08d      	b.n	801b08c <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 801af70:	2300      	movs	r3, #0
 801af72:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801af74:	e002      	b.n	801af7c <UTIL_SEQ_Run+0x40>
    {
      counter++;
 801af76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801af78:	3301      	adds	r3, #1
 801af7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801af7c:	4a6a      	ldr	r2, [pc, #424]	@ (801b128 <UTIL_SEQ_Run+0x1ec>)
 801af7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801af80:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801af84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801af86:	401a      	ands	r2, r3
 801af88:	4b62      	ldr	r3, [pc, #392]	@ (801b114 <UTIL_SEQ_Run+0x1d8>)
 801af8a:	681b      	ldr	r3, [r3, #0]
 801af8c:	4013      	ands	r3, r2
 801af8e:	2b00      	cmp	r3, #0
 801af90:	d0f1      	beq.n	801af76 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 801af92:	4a65      	ldr	r2, [pc, #404]	@ (801b128 <UTIL_SEQ_Run+0x1ec>)
 801af94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801af96:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801af9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801af9c:	401a      	ands	r2, r3
 801af9e:	4b5d      	ldr	r3, [pc, #372]	@ (801b114 <UTIL_SEQ_Run+0x1d8>)
 801afa0:	681b      	ldr	r3, [r3, #0]
 801afa2:	4013      	ands	r3, r2
 801afa4:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801afa6:	4a60      	ldr	r2, [pc, #384]	@ (801b128 <UTIL_SEQ_Run+0x1ec>)
 801afa8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801afaa:	00db      	lsls	r3, r3, #3
 801afac:	4413      	add	r3, r2
 801afae:	685a      	ldr	r2, [r3, #4]
 801afb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801afb2:	4013      	ands	r3, r2
 801afb4:	2b00      	cmp	r3, #0
 801afb6:	d106      	bne.n	801afc6 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801afb8:	4a5b      	ldr	r2, [pc, #364]	@ (801b128 <UTIL_SEQ_Run+0x1ec>)
 801afba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801afbc:	00db      	lsls	r3, r3, #3
 801afbe:	4413      	add	r3, r2
 801afc0:	f04f 32ff 	mov.w	r2, #4294967295
 801afc4:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801afc6:	4a58      	ldr	r2, [pc, #352]	@ (801b128 <UTIL_SEQ_Run+0x1ec>)
 801afc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801afca:	00db      	lsls	r3, r3, #3
 801afcc:	4413      	add	r3, r2
 801afce:	685a      	ldr	r2, [r3, #4]
 801afd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801afd2:	4013      	ands	r3, r2
 801afd4:	4618      	mov	r0, r3
 801afd6:	f000 f907 	bl	801b1e8 <SEQ_BitPosition>
 801afda:	4603      	mov	r3, r0
 801afdc:	461a      	mov	r2, r3
 801afde:	4b53      	ldr	r3, [pc, #332]	@ (801b12c <UTIL_SEQ_Run+0x1f0>)
 801afe0:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801afe2:	4a51      	ldr	r2, [pc, #324]	@ (801b128 <UTIL_SEQ_Run+0x1ec>)
 801afe4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801afe6:	00db      	lsls	r3, r3, #3
 801afe8:	4413      	add	r3, r2
 801afea:	685a      	ldr	r2, [r3, #4]
 801afec:	4b4f      	ldr	r3, [pc, #316]	@ (801b12c <UTIL_SEQ_Run+0x1f0>)
 801afee:	681b      	ldr	r3, [r3, #0]
 801aff0:	2101      	movs	r1, #1
 801aff2:	fa01 f303 	lsl.w	r3, r1, r3
 801aff6:	43db      	mvns	r3, r3
 801aff8:	401a      	ands	r2, r3
 801affa:	494b      	ldr	r1, [pc, #300]	@ (801b128 <UTIL_SEQ_Run+0x1ec>)
 801affc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801affe:	00db      	lsls	r3, r3, #3
 801b000:	440b      	add	r3, r1
 801b002:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b004:	f3ef 8310 	mrs	r3, PRIMASK
 801b008:	61bb      	str	r3, [r7, #24]
  return(result);
 801b00a:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801b00c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801b00e:	b672      	cpsid	i
}
 801b010:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801b012:	4b46      	ldr	r3, [pc, #280]	@ (801b12c <UTIL_SEQ_Run+0x1f0>)
 801b014:	681b      	ldr	r3, [r3, #0]
 801b016:	2201      	movs	r2, #1
 801b018:	fa02 f303 	lsl.w	r3, r2, r3
 801b01c:	43da      	mvns	r2, r3
 801b01e:	4b3e      	ldr	r3, [pc, #248]	@ (801b118 <UTIL_SEQ_Run+0x1dc>)
 801b020:	681b      	ldr	r3, [r3, #0]
 801b022:	4013      	ands	r3, r2
 801b024:	4a3c      	ldr	r2, [pc, #240]	@ (801b118 <UTIL_SEQ_Run+0x1dc>)
 801b026:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801b028:	2301      	movs	r3, #1
 801b02a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801b02c:	e013      	b.n	801b056 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801b02e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b030:	3b01      	subs	r3, #1
 801b032:	4a3d      	ldr	r2, [pc, #244]	@ (801b128 <UTIL_SEQ_Run+0x1ec>)
 801b034:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 801b038:	4b3c      	ldr	r3, [pc, #240]	@ (801b12c <UTIL_SEQ_Run+0x1f0>)
 801b03a:	681b      	ldr	r3, [r3, #0]
 801b03c:	2201      	movs	r2, #1
 801b03e:	fa02 f303 	lsl.w	r3, r2, r3
 801b042:	43da      	mvns	r2, r3
 801b044:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b046:	3b01      	subs	r3, #1
 801b048:	400a      	ands	r2, r1
 801b04a:	4937      	ldr	r1, [pc, #220]	@ (801b128 <UTIL_SEQ_Run+0x1ec>)
 801b04c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801b050:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b052:	3b01      	subs	r3, #1
 801b054:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801b056:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b058:	2b00      	cmp	r3, #0
 801b05a:	d1e8      	bne.n	801b02e <UTIL_SEQ_Run+0xf2>
 801b05c:	6a3b      	ldr	r3, [r7, #32]
 801b05e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b060:	697b      	ldr	r3, [r7, #20]
 801b062:	f383 8810 	msr	PRIMASK, r3
}
 801b066:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 801b068:	4b30      	ldr	r3, [pc, #192]	@ (801b12c <UTIL_SEQ_Run+0x1f0>)
 801b06a:	681b      	ldr	r3, [r3, #0]
 801b06c:	4a30      	ldr	r2, [pc, #192]	@ (801b130 <UTIL_SEQ_Run+0x1f4>)
 801b06e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b072:	4798      	blx	r3

    local_taskset = TaskSet;
 801b074:	4b28      	ldr	r3, [pc, #160]	@ (801b118 <UTIL_SEQ_Run+0x1dc>)
 801b076:	681b      	ldr	r3, [r3, #0]
 801b078:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 801b07a:	4b28      	ldr	r3, [pc, #160]	@ (801b11c <UTIL_SEQ_Run+0x1e0>)
 801b07c:	681b      	ldr	r3, [r3, #0]
 801b07e:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 801b080:	4b27      	ldr	r3, [pc, #156]	@ (801b120 <UTIL_SEQ_Run+0x1e4>)
 801b082:	681b      	ldr	r3, [r3, #0]
 801b084:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 801b086:	4b27      	ldr	r3, [pc, #156]	@ (801b124 <UTIL_SEQ_Run+0x1e8>)
 801b088:	681b      	ldr	r3, [r3, #0]
 801b08a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801b08c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801b08e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b090:	401a      	ands	r2, r3
 801b092:	4b20      	ldr	r3, [pc, #128]	@ (801b114 <UTIL_SEQ_Run+0x1d8>)
 801b094:	681b      	ldr	r3, [r3, #0]
 801b096:	4013      	ands	r3, r2
 801b098:	2b00      	cmp	r3, #0
 801b09a:	d005      	beq.n	801b0a8 <UTIL_SEQ_Run+0x16c>
 801b09c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801b09e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b0a0:	4013      	ands	r3, r2
 801b0a2:	2b00      	cmp	r3, #0
 801b0a4:	f43f af64 	beq.w	801af70 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801b0a8:	4b20      	ldr	r3, [pc, #128]	@ (801b12c <UTIL_SEQ_Run+0x1f0>)
 801b0aa:	f04f 32ff 	mov.w	r2, #4294967295
 801b0ae:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801b0b0:	f000 f88e 	bl	801b1d0 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b0b4:	f3ef 8310 	mrs	r3, PRIMASK
 801b0b8:	613b      	str	r3, [r7, #16]
  return(result);
 801b0ba:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801b0bc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801b0be:	b672      	cpsid	i
}
 801b0c0:	bf00      	nop
  local_taskset = TaskSet;
 801b0c2:	4b15      	ldr	r3, [pc, #84]	@ (801b118 <UTIL_SEQ_Run+0x1dc>)
 801b0c4:	681b      	ldr	r3, [r3, #0]
 801b0c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 801b0c8:	4b14      	ldr	r3, [pc, #80]	@ (801b11c <UTIL_SEQ_Run+0x1e0>)
 801b0ca:	681b      	ldr	r3, [r3, #0]
 801b0cc:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 801b0ce:	4b14      	ldr	r3, [pc, #80]	@ (801b120 <UTIL_SEQ_Run+0x1e4>)
 801b0d0:	681b      	ldr	r3, [r3, #0]
 801b0d2:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 801b0d4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801b0d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b0d8:	401a      	ands	r2, r3
 801b0da:	4b0e      	ldr	r3, [pc, #56]	@ (801b114 <UTIL_SEQ_Run+0x1d8>)
 801b0dc:	681b      	ldr	r3, [r3, #0]
 801b0de:	4013      	ands	r3, r2
 801b0e0:	2b00      	cmp	r3, #0
 801b0e2:	d107      	bne.n	801b0f4 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 801b0e4:	4b0f      	ldr	r3, [pc, #60]	@ (801b124 <UTIL_SEQ_Run+0x1e8>)
 801b0e6:	681a      	ldr	r2, [r3, #0]
 801b0e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b0ea:	4013      	ands	r3, r2
 801b0ec:	2b00      	cmp	r3, #0
 801b0ee:	d101      	bne.n	801b0f4 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 801b0f0:	f7e6 ff36 	bl	8001f60 <UTIL_SEQ_Idle>
 801b0f4:	69fb      	ldr	r3, [r7, #28]
 801b0f6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b0f8:	68fb      	ldr	r3, [r7, #12]
 801b0fa:	f383 8810 	msr	PRIMASK, r3
}
 801b0fe:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 801b100:	f000 f86c 	bl	801b1dc <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801b104:	4a03      	ldr	r2, [pc, #12]	@ (801b114 <UTIL_SEQ_Run+0x1d8>)
 801b106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b108:	6013      	str	r3, [r2, #0]

  return;
 801b10a:	bf00      	nop
}
 801b10c:	3740      	adds	r7, #64	@ 0x40
 801b10e:	46bd      	mov	sp, r7
 801b110:	bd80      	pop	{r7, pc}
 801b112:	bf00      	nop
 801b114:	2000013c 	.word	0x2000013c
 801b118:	20001d98 	.word	0x20001d98
 801b11c:	20001d9c 	.word	0x20001d9c
 801b120:	20000138 	.word	0x20000138
 801b124:	20001da0 	.word	0x20001da0
 801b128:	20001db8 	.word	0x20001db8
 801b12c:	20001da4 	.word	0x20001da4
 801b130:	20001da8 	.word	0x20001da8

0801b134 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801b134:	b580      	push	{r7, lr}
 801b136:	b088      	sub	sp, #32
 801b138:	af00      	add	r7, sp, #0
 801b13a:	60f8      	str	r0, [r7, #12]
 801b13c:	60b9      	str	r1, [r7, #8]
 801b13e:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b140:	f3ef 8310 	mrs	r3, PRIMASK
 801b144:	617b      	str	r3, [r7, #20]
  return(result);
 801b146:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801b148:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801b14a:	b672      	cpsid	i
}
 801b14c:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801b14e:	68f8      	ldr	r0, [r7, #12]
 801b150:	f000 f84a 	bl	801b1e8 <SEQ_BitPosition>
 801b154:	4603      	mov	r3, r0
 801b156:	4619      	mov	r1, r3
 801b158:	4a06      	ldr	r2, [pc, #24]	@ (801b174 <UTIL_SEQ_RegTask+0x40>)
 801b15a:	687b      	ldr	r3, [r7, #4]
 801b15c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801b160:	69fb      	ldr	r3, [r7, #28]
 801b162:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b164:	69bb      	ldr	r3, [r7, #24]
 801b166:	f383 8810 	msr	PRIMASK, r3
}
 801b16a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801b16c:	bf00      	nop
}
 801b16e:	3720      	adds	r7, #32
 801b170:	46bd      	mov	sp, r7
 801b172:	bd80      	pop	{r7, pc}
 801b174:	20001da8 	.word	0x20001da8

0801b178 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801b178:	b480      	push	{r7}
 801b17a:	b087      	sub	sp, #28
 801b17c:	af00      	add	r7, sp, #0
 801b17e:	6078      	str	r0, [r7, #4]
 801b180:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b182:	f3ef 8310 	mrs	r3, PRIMASK
 801b186:	60fb      	str	r3, [r7, #12]
  return(result);
 801b188:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801b18a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b18c:	b672      	cpsid	i
}
 801b18e:	bf00      	nop

  TaskSet |= TaskId_bm;
 801b190:	4b0d      	ldr	r3, [pc, #52]	@ (801b1c8 <UTIL_SEQ_SetTask+0x50>)
 801b192:	681a      	ldr	r2, [r3, #0]
 801b194:	687b      	ldr	r3, [r7, #4]
 801b196:	4313      	orrs	r3, r2
 801b198:	4a0b      	ldr	r2, [pc, #44]	@ (801b1c8 <UTIL_SEQ_SetTask+0x50>)
 801b19a:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801b19c:	4a0b      	ldr	r2, [pc, #44]	@ (801b1cc <UTIL_SEQ_SetTask+0x54>)
 801b19e:	683b      	ldr	r3, [r7, #0]
 801b1a0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801b1a4:	687b      	ldr	r3, [r7, #4]
 801b1a6:	431a      	orrs	r2, r3
 801b1a8:	4908      	ldr	r1, [pc, #32]	@ (801b1cc <UTIL_SEQ_SetTask+0x54>)
 801b1aa:	683b      	ldr	r3, [r7, #0]
 801b1ac:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801b1b0:	697b      	ldr	r3, [r7, #20]
 801b1b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b1b4:	693b      	ldr	r3, [r7, #16]
 801b1b6:	f383 8810 	msr	PRIMASK, r3
}
 801b1ba:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801b1bc:	bf00      	nop
}
 801b1be:	371c      	adds	r7, #28
 801b1c0:	46bd      	mov	sp, r7
 801b1c2:	bc80      	pop	{r7}
 801b1c4:	4770      	bx	lr
 801b1c6:	bf00      	nop
 801b1c8:	20001d98 	.word	0x20001d98
 801b1cc:	20001db8 	.word	0x20001db8

0801b1d0 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801b1d0:	b480      	push	{r7}
 801b1d2:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801b1d4:	bf00      	nop
}
 801b1d6:	46bd      	mov	sp, r7
 801b1d8:	bc80      	pop	{r7}
 801b1da:	4770      	bx	lr

0801b1dc <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801b1dc:	b480      	push	{r7}
 801b1de:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801b1e0:	bf00      	nop
}
 801b1e2:	46bd      	mov	sp, r7
 801b1e4:	bc80      	pop	{r7}
 801b1e6:	4770      	bx	lr

0801b1e8 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801b1e8:	b480      	push	{r7}
 801b1ea:	b085      	sub	sp, #20
 801b1ec:	af00      	add	r7, sp, #0
 801b1ee:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 801b1f0:	2300      	movs	r3, #0
 801b1f2:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 801b1f4:	687b      	ldr	r3, [r7, #4]
 801b1f6:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 801b1f8:	68bb      	ldr	r3, [r7, #8]
 801b1fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801b1fe:	d204      	bcs.n	801b20a <SEQ_BitPosition+0x22>
 801b200:	2310      	movs	r3, #16
 801b202:	73fb      	strb	r3, [r7, #15]
 801b204:	68bb      	ldr	r3, [r7, #8]
 801b206:	041b      	lsls	r3, r3, #16
 801b208:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 801b20a:	68bb      	ldr	r3, [r7, #8]
 801b20c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801b210:	d205      	bcs.n	801b21e <SEQ_BitPosition+0x36>
 801b212:	7bfb      	ldrb	r3, [r7, #15]
 801b214:	3308      	adds	r3, #8
 801b216:	73fb      	strb	r3, [r7, #15]
 801b218:	68bb      	ldr	r3, [r7, #8]
 801b21a:	021b      	lsls	r3, r3, #8
 801b21c:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 801b21e:	68bb      	ldr	r3, [r7, #8]
 801b220:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801b224:	d205      	bcs.n	801b232 <SEQ_BitPosition+0x4a>
 801b226:	7bfb      	ldrb	r3, [r7, #15]
 801b228:	3304      	adds	r3, #4
 801b22a:	73fb      	strb	r3, [r7, #15]
 801b22c:	68bb      	ldr	r3, [r7, #8]
 801b22e:	011b      	lsls	r3, r3, #4
 801b230:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 801b232:	68bb      	ldr	r3, [r7, #8]
 801b234:	0f1b      	lsrs	r3, r3, #28
 801b236:	4a07      	ldr	r2, [pc, #28]	@ (801b254 <SEQ_BitPosition+0x6c>)
 801b238:	5cd2      	ldrb	r2, [r2, r3]
 801b23a:	7bfb      	ldrb	r3, [r7, #15]
 801b23c:	4413      	add	r3, r2
 801b23e:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801b240:	7bfb      	ldrb	r3, [r7, #15]
 801b242:	f1c3 031f 	rsb	r3, r3, #31
 801b246:	b2db      	uxtb	r3, r3
}
 801b248:	4618      	mov	r0, r3
 801b24a:	3714      	adds	r7, #20
 801b24c:	46bd      	mov	sp, r7
 801b24e:	bc80      	pop	{r7}
 801b250:	4770      	bx	lr
 801b252:	bf00      	nop
 801b254:	0801f7c4 	.word	0x0801f7c4

0801b258 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801b258:	b580      	push	{r7, lr}
 801b25a:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801b25c:	4b04      	ldr	r3, [pc, #16]	@ (801b270 <UTIL_TIMER_Init+0x18>)
 801b25e:	2200      	movs	r2, #0
 801b260:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801b262:	4b04      	ldr	r3, [pc, #16]	@ (801b274 <UTIL_TIMER_Init+0x1c>)
 801b264:	681b      	ldr	r3, [r3, #0]
 801b266:	4798      	blx	r3
 801b268:	4603      	mov	r3, r0
}
 801b26a:	4618      	mov	r0, r3
 801b26c:	bd80      	pop	{r7, pc}
 801b26e:	bf00      	nop
 801b270:	20001dc0 	.word	0x20001dc0
 801b274:	0801f244 	.word	0x0801f244

0801b278 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801b278:	b580      	push	{r7, lr}
 801b27a:	b084      	sub	sp, #16
 801b27c:	af00      	add	r7, sp, #0
 801b27e:	60f8      	str	r0, [r7, #12]
 801b280:	60b9      	str	r1, [r7, #8]
 801b282:	603b      	str	r3, [r7, #0]
 801b284:	4613      	mov	r3, r2
 801b286:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 801b288:	68fb      	ldr	r3, [r7, #12]
 801b28a:	2b00      	cmp	r3, #0
 801b28c:	d023      	beq.n	801b2d6 <UTIL_TIMER_Create+0x5e>
 801b28e:	683b      	ldr	r3, [r7, #0]
 801b290:	2b00      	cmp	r3, #0
 801b292:	d020      	beq.n	801b2d6 <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 801b294:	68fb      	ldr	r3, [r7, #12]
 801b296:	2200      	movs	r2, #0
 801b298:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801b29a:	4b11      	ldr	r3, [pc, #68]	@ (801b2e0 <UTIL_TIMER_Create+0x68>)
 801b29c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b29e:	68b8      	ldr	r0, [r7, #8]
 801b2a0:	4798      	blx	r3
 801b2a2:	4602      	mov	r2, r0
 801b2a4:	68fb      	ldr	r3, [r7, #12]
 801b2a6:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801b2a8:	68fb      	ldr	r3, [r7, #12]
 801b2aa:	2200      	movs	r2, #0
 801b2ac:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801b2ae:	68fb      	ldr	r3, [r7, #12]
 801b2b0:	2200      	movs	r2, #0
 801b2b2:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801b2b4:	68fb      	ldr	r3, [r7, #12]
 801b2b6:	2200      	movs	r2, #0
 801b2b8:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801b2ba:	68fb      	ldr	r3, [r7, #12]
 801b2bc:	683a      	ldr	r2, [r7, #0]
 801b2be:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801b2c0:	68fb      	ldr	r3, [r7, #12]
 801b2c2:	69ba      	ldr	r2, [r7, #24]
 801b2c4:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801b2c6:	68fb      	ldr	r3, [r7, #12]
 801b2c8:	79fa      	ldrb	r2, [r7, #7]
 801b2ca:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801b2cc:	68fb      	ldr	r3, [r7, #12]
 801b2ce:	2200      	movs	r2, #0
 801b2d0:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801b2d2:	2300      	movs	r3, #0
 801b2d4:	e000      	b.n	801b2d8 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801b2d6:	2301      	movs	r3, #1
  }
}
 801b2d8:	4618      	mov	r0, r3
 801b2da:	3710      	adds	r7, #16
 801b2dc:	46bd      	mov	sp, r7
 801b2de:	bd80      	pop	{r7, pc}
 801b2e0:	0801f244 	.word	0x0801f244

0801b2e4 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801b2e4:	b580      	push	{r7, lr}
 801b2e6:	b08a      	sub	sp, #40	@ 0x28
 801b2e8:	af00      	add	r7, sp, #0
 801b2ea:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801b2ec:	2300      	movs	r3, #0
 801b2ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801b2f2:	687b      	ldr	r3, [r7, #4]
 801b2f4:	2b00      	cmp	r3, #0
 801b2f6:	d056      	beq.n	801b3a6 <UTIL_TIMER_Start+0xc2>
 801b2f8:	6878      	ldr	r0, [r7, #4]
 801b2fa:	f000 f9a9 	bl	801b650 <TimerExists>
 801b2fe:	4603      	mov	r3, r0
 801b300:	f083 0301 	eor.w	r3, r3, #1
 801b304:	b2db      	uxtb	r3, r3
 801b306:	2b00      	cmp	r3, #0
 801b308:	d04d      	beq.n	801b3a6 <UTIL_TIMER_Start+0xc2>
 801b30a:	687b      	ldr	r3, [r7, #4]
 801b30c:	7a5b      	ldrb	r3, [r3, #9]
 801b30e:	2b00      	cmp	r3, #0
 801b310:	d149      	bne.n	801b3a6 <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b312:	f3ef 8310 	mrs	r3, PRIMASK
 801b316:	613b      	str	r3, [r7, #16]
  return(result);
 801b318:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801b31a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801b31c:	b672      	cpsid	i
}
 801b31e:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 801b320:	687b      	ldr	r3, [r7, #4]
 801b322:	685b      	ldr	r3, [r3, #4]
 801b324:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801b326:	4b24      	ldr	r3, [pc, #144]	@ (801b3b8 <UTIL_TIMER_Start+0xd4>)
 801b328:	6a1b      	ldr	r3, [r3, #32]
 801b32a:	4798      	blx	r3
 801b32c:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 801b32e:	6a3a      	ldr	r2, [r7, #32]
 801b330:	69bb      	ldr	r3, [r7, #24]
 801b332:	429a      	cmp	r2, r3
 801b334:	d201      	bcs.n	801b33a <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 801b336:	69bb      	ldr	r3, [r7, #24]
 801b338:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801b33a:	687b      	ldr	r3, [r7, #4]
 801b33c:	6a3a      	ldr	r2, [r7, #32]
 801b33e:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801b340:	687b      	ldr	r3, [r7, #4]
 801b342:	2200      	movs	r2, #0
 801b344:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801b346:	687b      	ldr	r3, [r7, #4]
 801b348:	2201      	movs	r2, #1
 801b34a:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801b34c:	687b      	ldr	r3, [r7, #4]
 801b34e:	2200      	movs	r2, #0
 801b350:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801b352:	4b1a      	ldr	r3, [pc, #104]	@ (801b3bc <UTIL_TIMER_Start+0xd8>)
 801b354:	681b      	ldr	r3, [r3, #0]
 801b356:	2b00      	cmp	r3, #0
 801b358:	d106      	bne.n	801b368 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 801b35a:	4b17      	ldr	r3, [pc, #92]	@ (801b3b8 <UTIL_TIMER_Start+0xd4>)
 801b35c:	691b      	ldr	r3, [r3, #16]
 801b35e:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801b360:	6878      	ldr	r0, [r7, #4]
 801b362:	f000 f9eb 	bl	801b73c <TimerInsertNewHeadTimer>
 801b366:	e017      	b.n	801b398 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801b368:	4b13      	ldr	r3, [pc, #76]	@ (801b3b8 <UTIL_TIMER_Start+0xd4>)
 801b36a:	699b      	ldr	r3, [r3, #24]
 801b36c:	4798      	blx	r3
 801b36e:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801b370:	687b      	ldr	r3, [r7, #4]
 801b372:	681a      	ldr	r2, [r3, #0]
 801b374:	697b      	ldr	r3, [r7, #20]
 801b376:	441a      	add	r2, r3
 801b378:	687b      	ldr	r3, [r7, #4]
 801b37a:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801b37c:	687b      	ldr	r3, [r7, #4]
 801b37e:	681a      	ldr	r2, [r3, #0]
 801b380:	4b0e      	ldr	r3, [pc, #56]	@ (801b3bc <UTIL_TIMER_Start+0xd8>)
 801b382:	681b      	ldr	r3, [r3, #0]
 801b384:	681b      	ldr	r3, [r3, #0]
 801b386:	429a      	cmp	r2, r3
 801b388:	d203      	bcs.n	801b392 <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801b38a:	6878      	ldr	r0, [r7, #4]
 801b38c:	f000 f9d6 	bl	801b73c <TimerInsertNewHeadTimer>
 801b390:	e002      	b.n	801b398 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801b392:	6878      	ldr	r0, [r7, #4]
 801b394:	f000 f9a2 	bl	801b6dc <TimerInsertTimer>
 801b398:	69fb      	ldr	r3, [r7, #28]
 801b39a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b39c:	68fb      	ldr	r3, [r7, #12]
 801b39e:	f383 8810 	msr	PRIMASK, r3
}
 801b3a2:	bf00      	nop
  {
 801b3a4:	e002      	b.n	801b3ac <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801b3a6:	2301      	movs	r3, #1
 801b3a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  return ret;
 801b3ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 801b3b0:	4618      	mov	r0, r3
 801b3b2:	3728      	adds	r7, #40	@ 0x28
 801b3b4:	46bd      	mov	sp, r7
 801b3b6:	bd80      	pop	{r7, pc}
 801b3b8:	0801f244 	.word	0x0801f244
 801b3bc:	20001dc0 	.word	0x20001dc0

0801b3c0 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801b3c0:	b580      	push	{r7, lr}
 801b3c2:	b088      	sub	sp, #32
 801b3c4:	af00      	add	r7, sp, #0
 801b3c6:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801b3c8:	2300      	movs	r3, #0
 801b3ca:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 801b3cc:	687b      	ldr	r3, [r7, #4]
 801b3ce:	2b00      	cmp	r3, #0
 801b3d0:	d05b      	beq.n	801b48a <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b3d2:	f3ef 8310 	mrs	r3, PRIMASK
 801b3d6:	60fb      	str	r3, [r7, #12]
  return(result);
 801b3d8:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801b3da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801b3dc:	b672      	cpsid	i
}
 801b3de:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801b3e0:	4b2d      	ldr	r3, [pc, #180]	@ (801b498 <UTIL_TIMER_Stop+0xd8>)
 801b3e2:	681b      	ldr	r3, [r3, #0]
 801b3e4:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801b3e6:	4b2c      	ldr	r3, [pc, #176]	@ (801b498 <UTIL_TIMER_Stop+0xd8>)
 801b3e8:	681b      	ldr	r3, [r3, #0]
 801b3ea:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801b3ec:	687b      	ldr	r3, [r7, #4]
 801b3ee:	2201      	movs	r2, #1
 801b3f0:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801b3f2:	4b29      	ldr	r3, [pc, #164]	@ (801b498 <UTIL_TIMER_Stop+0xd8>)
 801b3f4:	681b      	ldr	r3, [r3, #0]
 801b3f6:	2b00      	cmp	r3, #0
 801b3f8:	d041      	beq.n	801b47e <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 801b3fa:	687b      	ldr	r3, [r7, #4]
 801b3fc:	2200      	movs	r2, #0
 801b3fe:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801b400:	4b25      	ldr	r3, [pc, #148]	@ (801b498 <UTIL_TIMER_Stop+0xd8>)
 801b402:	681b      	ldr	r3, [r3, #0]
 801b404:	687a      	ldr	r2, [r7, #4]
 801b406:	429a      	cmp	r2, r3
 801b408:	d134      	bne.n	801b474 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 801b40a:	4b23      	ldr	r3, [pc, #140]	@ (801b498 <UTIL_TIMER_Stop+0xd8>)
 801b40c:	681b      	ldr	r3, [r3, #0]
 801b40e:	2200      	movs	r2, #0
 801b410:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801b412:	4b21      	ldr	r3, [pc, #132]	@ (801b498 <UTIL_TIMER_Stop+0xd8>)
 801b414:	681b      	ldr	r3, [r3, #0]
 801b416:	695b      	ldr	r3, [r3, #20]
 801b418:	2b00      	cmp	r3, #0
 801b41a:	d00a      	beq.n	801b432 <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 801b41c:	4b1e      	ldr	r3, [pc, #120]	@ (801b498 <UTIL_TIMER_Stop+0xd8>)
 801b41e:	681b      	ldr	r3, [r3, #0]
 801b420:	695b      	ldr	r3, [r3, #20]
 801b422:	4a1d      	ldr	r2, [pc, #116]	@ (801b498 <UTIL_TIMER_Stop+0xd8>)
 801b424:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 801b426:	4b1c      	ldr	r3, [pc, #112]	@ (801b498 <UTIL_TIMER_Stop+0xd8>)
 801b428:	681b      	ldr	r3, [r3, #0]
 801b42a:	4618      	mov	r0, r3
 801b42c:	f000 f92c 	bl	801b688 <TimerSetTimeout>
 801b430:	e023      	b.n	801b47a <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801b432:	4b1a      	ldr	r3, [pc, #104]	@ (801b49c <UTIL_TIMER_Stop+0xdc>)
 801b434:	68db      	ldr	r3, [r3, #12]
 801b436:	4798      	blx	r3
            TimerListHead = NULL;
 801b438:	4b17      	ldr	r3, [pc, #92]	@ (801b498 <UTIL_TIMER_Stop+0xd8>)
 801b43a:	2200      	movs	r2, #0
 801b43c:	601a      	str	r2, [r3, #0]
 801b43e:	e01c      	b.n	801b47a <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801b440:	697a      	ldr	r2, [r7, #20]
 801b442:	687b      	ldr	r3, [r7, #4]
 801b444:	429a      	cmp	r2, r3
 801b446:	d110      	bne.n	801b46a <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 801b448:	697b      	ldr	r3, [r7, #20]
 801b44a:	695b      	ldr	r3, [r3, #20]
 801b44c:	2b00      	cmp	r3, #0
 801b44e:	d006      	beq.n	801b45e <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 801b450:	697b      	ldr	r3, [r7, #20]
 801b452:	695b      	ldr	r3, [r3, #20]
 801b454:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801b456:	69bb      	ldr	r3, [r7, #24]
 801b458:	697a      	ldr	r2, [r7, #20]
 801b45a:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801b45c:	e00d      	b.n	801b47a <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 801b45e:	2300      	movs	r3, #0
 801b460:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801b462:	69bb      	ldr	r3, [r7, #24]
 801b464:	697a      	ldr	r2, [r7, #20]
 801b466:	615a      	str	r2, [r3, #20]
            break;
 801b468:	e007      	b.n	801b47a <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 801b46a:	697b      	ldr	r3, [r7, #20]
 801b46c:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801b46e:	697b      	ldr	r3, [r7, #20]
 801b470:	695b      	ldr	r3, [r3, #20]
 801b472:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801b474:	697b      	ldr	r3, [r7, #20]
 801b476:	2b00      	cmp	r3, #0
 801b478:	d1e2      	bne.n	801b440 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801b47a:	2300      	movs	r3, #0
 801b47c:	77fb      	strb	r3, [r7, #31]
 801b47e:	693b      	ldr	r3, [r7, #16]
 801b480:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b482:	68bb      	ldr	r3, [r7, #8]
 801b484:	f383 8810 	msr	PRIMASK, r3
}
 801b488:	e001      	b.n	801b48e <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801b48a:	2301      	movs	r3, #1
 801b48c:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 801b48e:	7ffb      	ldrb	r3, [r7, #31]
}
 801b490:	4618      	mov	r0, r3
 801b492:	3720      	adds	r7, #32
 801b494:	46bd      	mov	sp, r7
 801b496:	bd80      	pop	{r7, pc}
 801b498:	20001dc0 	.word	0x20001dc0
 801b49c:	0801f244 	.word	0x0801f244

0801b4a0 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801b4a0:	b580      	push	{r7, lr}
 801b4a2:	b084      	sub	sp, #16
 801b4a4:	af00      	add	r7, sp, #0
 801b4a6:	6078      	str	r0, [r7, #4]
 801b4a8:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801b4aa:	2300      	movs	r3, #0
 801b4ac:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 801b4ae:	687b      	ldr	r3, [r7, #4]
 801b4b0:	2b00      	cmp	r3, #0
 801b4b2:	d102      	bne.n	801b4ba <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801b4b4:	2301      	movs	r3, #1
 801b4b6:	73fb      	strb	r3, [r7, #15]
 801b4b8:	e014      	b.n	801b4e4 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801b4ba:	4b0d      	ldr	r3, [pc, #52]	@ (801b4f0 <UTIL_TIMER_SetPeriod+0x50>)
 801b4bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b4be:	6838      	ldr	r0, [r7, #0]
 801b4c0:	4798      	blx	r3
 801b4c2:	4602      	mov	r2, r0
 801b4c4:	687b      	ldr	r3, [r7, #4]
 801b4c6:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801b4c8:	6878      	ldr	r0, [r7, #4]
 801b4ca:	f000 f8c1 	bl	801b650 <TimerExists>
 801b4ce:	4603      	mov	r3, r0
 801b4d0:	2b00      	cmp	r3, #0
 801b4d2:	d007      	beq.n	801b4e4 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801b4d4:	6878      	ldr	r0, [r7, #4]
 801b4d6:	f7ff ff73 	bl	801b3c0 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801b4da:	6878      	ldr	r0, [r7, #4]
 801b4dc:	f7ff ff02 	bl	801b2e4 <UTIL_TIMER_Start>
 801b4e0:	4603      	mov	r3, r0
 801b4e2:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 801b4e4:	7bfb      	ldrb	r3, [r7, #15]
}
 801b4e6:	4618      	mov	r0, r3
 801b4e8:	3710      	adds	r7, #16
 801b4ea:	46bd      	mov	sp, r7
 801b4ec:	bd80      	pop	{r7, pc}
 801b4ee:	bf00      	nop
 801b4f0:	0801f244 	.word	0x0801f244

0801b4f4 <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801b4f4:	b590      	push	{r4, r7, lr}
 801b4f6:	b089      	sub	sp, #36	@ 0x24
 801b4f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b4fa:	f3ef 8310 	mrs	r3, PRIMASK
 801b4fe:	60bb      	str	r3, [r7, #8]
  return(result);
 801b500:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801b502:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801b504:	b672      	cpsid	i
}
 801b506:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801b508:	4b38      	ldr	r3, [pc, #224]	@ (801b5ec <UTIL_TIMER_IRQ_Handler+0xf8>)
 801b50a:	695b      	ldr	r3, [r3, #20]
 801b50c:	4798      	blx	r3
 801b50e:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801b510:	4b36      	ldr	r3, [pc, #216]	@ (801b5ec <UTIL_TIMER_IRQ_Handler+0xf8>)
 801b512:	691b      	ldr	r3, [r3, #16]
 801b514:	4798      	blx	r3
 801b516:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801b518:	693a      	ldr	r2, [r7, #16]
 801b51a:	697b      	ldr	r3, [r7, #20]
 801b51c:	1ad3      	subs	r3, r2, r3
 801b51e:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801b520:	4b33      	ldr	r3, [pc, #204]	@ (801b5f0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801b522:	681b      	ldr	r3, [r3, #0]
 801b524:	2b00      	cmp	r3, #0
 801b526:	d037      	beq.n	801b598 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 801b528:	4b31      	ldr	r3, [pc, #196]	@ (801b5f0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801b52a:	681b      	ldr	r3, [r3, #0]
 801b52c:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801b52e:	69fb      	ldr	r3, [r7, #28]
 801b530:	681b      	ldr	r3, [r3, #0]
 801b532:	68fa      	ldr	r2, [r7, #12]
 801b534:	429a      	cmp	r2, r3
 801b536:	d206      	bcs.n	801b546 <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 801b538:	69fb      	ldr	r3, [r7, #28]
 801b53a:	681a      	ldr	r2, [r3, #0]
 801b53c:	68fb      	ldr	r3, [r7, #12]
 801b53e:	1ad2      	subs	r2, r2, r3
 801b540:	69fb      	ldr	r3, [r7, #28]
 801b542:	601a      	str	r2, [r3, #0]
 801b544:	e002      	b.n	801b54c <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 801b546:	69fb      	ldr	r3, [r7, #28]
 801b548:	2200      	movs	r2, #0
 801b54a:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801b54c:	69fb      	ldr	r3, [r7, #28]
 801b54e:	695b      	ldr	r3, [r3, #20]
 801b550:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801b552:	69fb      	ldr	r3, [r7, #28]
 801b554:	2b00      	cmp	r3, #0
 801b556:	d1ea      	bne.n	801b52e <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801b558:	e01e      	b.n	801b598 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 801b55a:	4b25      	ldr	r3, [pc, #148]	@ (801b5f0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801b55c:	681b      	ldr	r3, [r3, #0]
 801b55e:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801b560:	4b23      	ldr	r3, [pc, #140]	@ (801b5f0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801b562:	681b      	ldr	r3, [r3, #0]
 801b564:	695b      	ldr	r3, [r3, #20]
 801b566:	4a22      	ldr	r2, [pc, #136]	@ (801b5f0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801b568:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 801b56a:	69fb      	ldr	r3, [r7, #28]
 801b56c:	2200      	movs	r2, #0
 801b56e:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801b570:	69fb      	ldr	r3, [r7, #28]
 801b572:	2200      	movs	r2, #0
 801b574:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801b576:	69fb      	ldr	r3, [r7, #28]
 801b578:	68db      	ldr	r3, [r3, #12]
 801b57a:	69fa      	ldr	r2, [r7, #28]
 801b57c:	6912      	ldr	r2, [r2, #16]
 801b57e:	4610      	mov	r0, r2
 801b580:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801b582:	69fb      	ldr	r3, [r7, #28]
 801b584:	7adb      	ldrb	r3, [r3, #11]
 801b586:	2b01      	cmp	r3, #1
 801b588:	d106      	bne.n	801b598 <UTIL_TIMER_IRQ_Handler+0xa4>
 801b58a:	69fb      	ldr	r3, [r7, #28]
 801b58c:	7a9b      	ldrb	r3, [r3, #10]
 801b58e:	2b00      	cmp	r3, #0
 801b590:	d102      	bne.n	801b598 <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 801b592:	69f8      	ldr	r0, [r7, #28]
 801b594:	f7ff fea6 	bl	801b2e4 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801b598:	4b15      	ldr	r3, [pc, #84]	@ (801b5f0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801b59a:	681b      	ldr	r3, [r3, #0]
 801b59c:	2b00      	cmp	r3, #0
 801b59e:	d00d      	beq.n	801b5bc <UTIL_TIMER_IRQ_Handler+0xc8>
 801b5a0:	4b13      	ldr	r3, [pc, #76]	@ (801b5f0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801b5a2:	681b      	ldr	r3, [r3, #0]
 801b5a4:	681b      	ldr	r3, [r3, #0]
 801b5a6:	2b00      	cmp	r3, #0
 801b5a8:	d0d7      	beq.n	801b55a <UTIL_TIMER_IRQ_Handler+0x66>
 801b5aa:	4b11      	ldr	r3, [pc, #68]	@ (801b5f0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801b5ac:	681b      	ldr	r3, [r3, #0]
 801b5ae:	681c      	ldr	r4, [r3, #0]
 801b5b0:	4b0e      	ldr	r3, [pc, #56]	@ (801b5ec <UTIL_TIMER_IRQ_Handler+0xf8>)
 801b5b2:	699b      	ldr	r3, [r3, #24]
 801b5b4:	4798      	blx	r3
 801b5b6:	4603      	mov	r3, r0
 801b5b8:	429c      	cmp	r4, r3
 801b5ba:	d3ce      	bcc.n	801b55a <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801b5bc:	4b0c      	ldr	r3, [pc, #48]	@ (801b5f0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801b5be:	681b      	ldr	r3, [r3, #0]
 801b5c0:	2b00      	cmp	r3, #0
 801b5c2:	d009      	beq.n	801b5d8 <UTIL_TIMER_IRQ_Handler+0xe4>
 801b5c4:	4b0a      	ldr	r3, [pc, #40]	@ (801b5f0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801b5c6:	681b      	ldr	r3, [r3, #0]
 801b5c8:	7a1b      	ldrb	r3, [r3, #8]
 801b5ca:	2b00      	cmp	r3, #0
 801b5cc:	d104      	bne.n	801b5d8 <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 801b5ce:	4b08      	ldr	r3, [pc, #32]	@ (801b5f0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801b5d0:	681b      	ldr	r3, [r3, #0]
 801b5d2:	4618      	mov	r0, r3
 801b5d4:	f000 f858 	bl	801b688 <TimerSetTimeout>
 801b5d8:	69bb      	ldr	r3, [r7, #24]
 801b5da:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b5dc:	687b      	ldr	r3, [r7, #4]
 801b5de:	f383 8810 	msr	PRIMASK, r3
}
 801b5e2:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801b5e4:	bf00      	nop
 801b5e6:	3724      	adds	r7, #36	@ 0x24
 801b5e8:	46bd      	mov	sp, r7
 801b5ea:	bd90      	pop	{r4, r7, pc}
 801b5ec:	0801f244 	.word	0x0801f244
 801b5f0:	20001dc0 	.word	0x20001dc0

0801b5f4 <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801b5f4:	b580      	push	{r7, lr}
 801b5f6:	b082      	sub	sp, #8
 801b5f8:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801b5fa:	4b06      	ldr	r3, [pc, #24]	@ (801b614 <UTIL_TIMER_GetCurrentTime+0x20>)
 801b5fc:	69db      	ldr	r3, [r3, #28]
 801b5fe:	4798      	blx	r3
 801b600:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801b602:	4b04      	ldr	r3, [pc, #16]	@ (801b614 <UTIL_TIMER_GetCurrentTime+0x20>)
 801b604:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b606:	6878      	ldr	r0, [r7, #4]
 801b608:	4798      	blx	r3
 801b60a:	4603      	mov	r3, r0
}
 801b60c:	4618      	mov	r0, r3
 801b60e:	3708      	adds	r7, #8
 801b610:	46bd      	mov	sp, r7
 801b612:	bd80      	pop	{r7, pc}
 801b614:	0801f244 	.word	0x0801f244

0801b618 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801b618:	b580      	push	{r7, lr}
 801b61a:	b084      	sub	sp, #16
 801b61c:	af00      	add	r7, sp, #0
 801b61e:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801b620:	4b0a      	ldr	r3, [pc, #40]	@ (801b64c <UTIL_TIMER_GetElapsedTime+0x34>)
 801b622:	69db      	ldr	r3, [r3, #28]
 801b624:	4798      	blx	r3
 801b626:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801b628:	4b08      	ldr	r3, [pc, #32]	@ (801b64c <UTIL_TIMER_GetElapsedTime+0x34>)
 801b62a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b62c:	6878      	ldr	r0, [r7, #4]
 801b62e:	4798      	blx	r3
 801b630:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801b632:	4b06      	ldr	r3, [pc, #24]	@ (801b64c <UTIL_TIMER_GetElapsedTime+0x34>)
 801b634:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b636:	68f9      	ldr	r1, [r7, #12]
 801b638:	68ba      	ldr	r2, [r7, #8]
 801b63a:	1a8a      	subs	r2, r1, r2
 801b63c:	4610      	mov	r0, r2
 801b63e:	4798      	blx	r3
 801b640:	4603      	mov	r3, r0
}
 801b642:	4618      	mov	r0, r3
 801b644:	3710      	adds	r7, #16
 801b646:	46bd      	mov	sp, r7
 801b648:	bd80      	pop	{r7, pc}
 801b64a:	bf00      	nop
 801b64c:	0801f244 	.word	0x0801f244

0801b650 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801b650:	b480      	push	{r7}
 801b652:	b085      	sub	sp, #20
 801b654:	af00      	add	r7, sp, #0
 801b656:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801b658:	4b0a      	ldr	r3, [pc, #40]	@ (801b684 <TimerExists+0x34>)
 801b65a:	681b      	ldr	r3, [r3, #0]
 801b65c:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801b65e:	e008      	b.n	801b672 <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801b660:	68fa      	ldr	r2, [r7, #12]
 801b662:	687b      	ldr	r3, [r7, #4]
 801b664:	429a      	cmp	r2, r3
 801b666:	d101      	bne.n	801b66c <TimerExists+0x1c>
    {
      return true;
 801b668:	2301      	movs	r3, #1
 801b66a:	e006      	b.n	801b67a <TimerExists+0x2a>
    }
    cur = cur->Next;
 801b66c:	68fb      	ldr	r3, [r7, #12]
 801b66e:	695b      	ldr	r3, [r3, #20]
 801b670:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801b672:	68fb      	ldr	r3, [r7, #12]
 801b674:	2b00      	cmp	r3, #0
 801b676:	d1f3      	bne.n	801b660 <TimerExists+0x10>
  }
  return false;
 801b678:	2300      	movs	r3, #0
}
 801b67a:	4618      	mov	r0, r3
 801b67c:	3714      	adds	r7, #20
 801b67e:	46bd      	mov	sp, r7
 801b680:	bc80      	pop	{r7}
 801b682:	4770      	bx	lr
 801b684:	20001dc0 	.word	0x20001dc0

0801b688 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801b688:	b590      	push	{r4, r7, lr}
 801b68a:	b085      	sub	sp, #20
 801b68c:	af00      	add	r7, sp, #0
 801b68e:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801b690:	4b11      	ldr	r3, [pc, #68]	@ (801b6d8 <TimerSetTimeout+0x50>)
 801b692:	6a1b      	ldr	r3, [r3, #32]
 801b694:	4798      	blx	r3
 801b696:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 801b698:	687b      	ldr	r3, [r7, #4]
 801b69a:	2201      	movs	r2, #1
 801b69c:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801b69e:	687b      	ldr	r3, [r7, #4]
 801b6a0:	681c      	ldr	r4, [r3, #0]
 801b6a2:	4b0d      	ldr	r3, [pc, #52]	@ (801b6d8 <TimerSetTimeout+0x50>)
 801b6a4:	699b      	ldr	r3, [r3, #24]
 801b6a6:	4798      	blx	r3
 801b6a8:	4602      	mov	r2, r0
 801b6aa:	68fb      	ldr	r3, [r7, #12]
 801b6ac:	4413      	add	r3, r2
 801b6ae:	429c      	cmp	r4, r3
 801b6b0:	d207      	bcs.n	801b6c2 <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801b6b2:	4b09      	ldr	r3, [pc, #36]	@ (801b6d8 <TimerSetTimeout+0x50>)
 801b6b4:	699b      	ldr	r3, [r3, #24]
 801b6b6:	4798      	blx	r3
 801b6b8:	4602      	mov	r2, r0
 801b6ba:	68fb      	ldr	r3, [r7, #12]
 801b6bc:	441a      	add	r2, r3
 801b6be:	687b      	ldr	r3, [r7, #4]
 801b6c0:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801b6c2:	4b05      	ldr	r3, [pc, #20]	@ (801b6d8 <TimerSetTimeout+0x50>)
 801b6c4:	689b      	ldr	r3, [r3, #8]
 801b6c6:	687a      	ldr	r2, [r7, #4]
 801b6c8:	6812      	ldr	r2, [r2, #0]
 801b6ca:	4610      	mov	r0, r2
 801b6cc:	4798      	blx	r3
}
 801b6ce:	bf00      	nop
 801b6d0:	3714      	adds	r7, #20
 801b6d2:	46bd      	mov	sp, r7
 801b6d4:	bd90      	pop	{r4, r7, pc}
 801b6d6:	bf00      	nop
 801b6d8:	0801f244 	.word	0x0801f244

0801b6dc <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801b6dc:	b480      	push	{r7}
 801b6de:	b085      	sub	sp, #20
 801b6e0:	af00      	add	r7, sp, #0
 801b6e2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801b6e4:	4b14      	ldr	r3, [pc, #80]	@ (801b738 <TimerInsertTimer+0x5c>)
 801b6e6:	681b      	ldr	r3, [r3, #0]
 801b6e8:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801b6ea:	4b13      	ldr	r3, [pc, #76]	@ (801b738 <TimerInsertTimer+0x5c>)
 801b6ec:	681b      	ldr	r3, [r3, #0]
 801b6ee:	695b      	ldr	r3, [r3, #20]
 801b6f0:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801b6f2:	e012      	b.n	801b71a <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801b6f4:	687b      	ldr	r3, [r7, #4]
 801b6f6:	681a      	ldr	r2, [r3, #0]
 801b6f8:	68bb      	ldr	r3, [r7, #8]
 801b6fa:	681b      	ldr	r3, [r3, #0]
 801b6fc:	429a      	cmp	r2, r3
 801b6fe:	d905      	bls.n	801b70c <TimerInsertTimer+0x30>
    {
        cur = next;
 801b700:	68bb      	ldr	r3, [r7, #8]
 801b702:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801b704:	68bb      	ldr	r3, [r7, #8]
 801b706:	695b      	ldr	r3, [r3, #20]
 801b708:	60bb      	str	r3, [r7, #8]
 801b70a:	e006      	b.n	801b71a <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801b70c:	68fb      	ldr	r3, [r7, #12]
 801b70e:	687a      	ldr	r2, [r7, #4]
 801b710:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801b712:	687b      	ldr	r3, [r7, #4]
 801b714:	68ba      	ldr	r2, [r7, #8]
 801b716:	615a      	str	r2, [r3, #20]
        return;
 801b718:	e009      	b.n	801b72e <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801b71a:	68fb      	ldr	r3, [r7, #12]
 801b71c:	695b      	ldr	r3, [r3, #20]
 801b71e:	2b00      	cmp	r3, #0
 801b720:	d1e8      	bne.n	801b6f4 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801b722:	68fb      	ldr	r3, [r7, #12]
 801b724:	687a      	ldr	r2, [r7, #4]
 801b726:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801b728:	687b      	ldr	r3, [r7, #4]
 801b72a:	2200      	movs	r2, #0
 801b72c:	615a      	str	r2, [r3, #20]
}
 801b72e:	3714      	adds	r7, #20
 801b730:	46bd      	mov	sp, r7
 801b732:	bc80      	pop	{r7}
 801b734:	4770      	bx	lr
 801b736:	bf00      	nop
 801b738:	20001dc0 	.word	0x20001dc0

0801b73c <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801b73c:	b580      	push	{r7, lr}
 801b73e:	b084      	sub	sp, #16
 801b740:	af00      	add	r7, sp, #0
 801b742:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801b744:	4b0b      	ldr	r3, [pc, #44]	@ (801b774 <TimerInsertNewHeadTimer+0x38>)
 801b746:	681b      	ldr	r3, [r3, #0]
 801b748:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801b74a:	68fb      	ldr	r3, [r7, #12]
 801b74c:	2b00      	cmp	r3, #0
 801b74e:	d002      	beq.n	801b756 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801b750:	68fb      	ldr	r3, [r7, #12]
 801b752:	2200      	movs	r2, #0
 801b754:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801b756:	687b      	ldr	r3, [r7, #4]
 801b758:	68fa      	ldr	r2, [r7, #12]
 801b75a:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801b75c:	4a05      	ldr	r2, [pc, #20]	@ (801b774 <TimerInsertNewHeadTimer+0x38>)
 801b75e:	687b      	ldr	r3, [r7, #4]
 801b760:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 801b762:	4b04      	ldr	r3, [pc, #16]	@ (801b774 <TimerInsertNewHeadTimer+0x38>)
 801b764:	681b      	ldr	r3, [r3, #0]
 801b766:	4618      	mov	r0, r3
 801b768:	f7ff ff8e 	bl	801b688 <TimerSetTimeout>
}
 801b76c:	bf00      	nop
 801b76e:	3710      	adds	r7, #16
 801b770:	46bd      	mov	sp, r7
 801b772:	bd80      	pop	{r7, pc}
 801b774:	20001dc0 	.word	0x20001dc0

0801b778 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801b778:	b580      	push	{r7, lr}
 801b77a:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801b77c:	2218      	movs	r2, #24
 801b77e:	2100      	movs	r1, #0
 801b780:	4807      	ldr	r0, [pc, #28]	@ (801b7a0 <UTIL_ADV_TRACE_Init+0x28>)
 801b782:	f7fe fffc 	bl	801a77e <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801b786:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801b78a:	2100      	movs	r1, #0
 801b78c:	4805      	ldr	r0, [pc, #20]	@ (801b7a4 <UTIL_ADV_TRACE_Init+0x2c>)
 801b78e:	f7fe fff6 	bl	801a77e <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801b792:	4b05      	ldr	r3, [pc, #20]	@ (801b7a8 <UTIL_ADV_TRACE_Init+0x30>)
 801b794:	681b      	ldr	r3, [r3, #0]
 801b796:	4805      	ldr	r0, [pc, #20]	@ (801b7ac <UTIL_ADV_TRACE_Init+0x34>)
 801b798:	4798      	blx	r3
 801b79a:	4603      	mov	r3, r0
}
 801b79c:	4618      	mov	r0, r3
 801b79e:	bd80      	pop	{r7, pc}
 801b7a0:	20001dc4 	.word	0x20001dc4
 801b7a4:	20001ddc 	.word	0x20001ddc
 801b7a8:	0801f284 	.word	0x0801f284
 801b7ac:	0801ba19 	.word	0x0801ba19

0801b7b0 <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 801b7b0:	b480      	push	{r7}
 801b7b2:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801b7b4:	4b06      	ldr	r3, [pc, #24]	@ (801b7d0 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801b7b6:	8a5a      	ldrh	r2, [r3, #18]
 801b7b8:	4b05      	ldr	r3, [pc, #20]	@ (801b7d0 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801b7ba:	8a1b      	ldrh	r3, [r3, #16]
 801b7bc:	429a      	cmp	r2, r3
 801b7be:	d101      	bne.n	801b7c4 <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 801b7c0:	2301      	movs	r3, #1
 801b7c2:	e000      	b.n	801b7c6 <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 801b7c4:	2300      	movs	r3, #0
}
 801b7c6:	4618      	mov	r0, r3
 801b7c8:	46bd      	mov	sp, r7
 801b7ca:	bc80      	pop	{r7}
 801b7cc:	4770      	bx	lr
 801b7ce:	bf00      	nop
 801b7d0:	20001dc4 	.word	0x20001dc4

0801b7d4 <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801b7d4:	b408      	push	{r3}
 801b7d6:	b580      	push	{r7, lr}
 801b7d8:	b08d      	sub	sp, #52	@ 0x34
 801b7da:	af00      	add	r7, sp, #0
 801b7dc:	60f8      	str	r0, [r7, #12]
 801b7de:	60b9      	str	r1, [r7, #8]
 801b7e0:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801b7e2:	2300      	movs	r3, #0
 801b7e4:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801b7e6:	2300      	movs	r3, #0
 801b7e8:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801b7ea:	4b37      	ldr	r3, [pc, #220]	@ (801b8c8 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801b7ec:	7a1b      	ldrb	r3, [r3, #8]
 801b7ee:	461a      	mov	r2, r3
 801b7f0:	68fb      	ldr	r3, [r7, #12]
 801b7f2:	4293      	cmp	r3, r2
 801b7f4:	d902      	bls.n	801b7fc <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801b7f6:	f06f 0304 	mvn.w	r3, #4
 801b7fa:	e05e      	b.n	801b8ba <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801b7fc:	4b32      	ldr	r3, [pc, #200]	@ (801b8c8 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801b7fe:	68da      	ldr	r2, [r3, #12]
 801b800:	68bb      	ldr	r3, [r7, #8]
 801b802:	4013      	ands	r3, r2
 801b804:	68ba      	ldr	r2, [r7, #8]
 801b806:	429a      	cmp	r2, r3
 801b808:	d002      	beq.n	801b810 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801b80a:	f06f 0305 	mvn.w	r3, #5
 801b80e:	e054      	b.n	801b8ba <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801b810:	4b2d      	ldr	r3, [pc, #180]	@ (801b8c8 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801b812:	685b      	ldr	r3, [r3, #4]
 801b814:	2b00      	cmp	r3, #0
 801b816:	d00a      	beq.n	801b82e <UTIL_ADV_TRACE_COND_FSend+0x5a>
 801b818:	687b      	ldr	r3, [r7, #4]
 801b81a:	2b00      	cmp	r3, #0
 801b81c:	d007      	beq.n	801b82e <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801b81e:	4b2a      	ldr	r3, [pc, #168]	@ (801b8c8 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801b820:	685b      	ldr	r3, [r3, #4]
 801b822:	f107 0116 	add.w	r1, r7, #22
 801b826:	f107 0218 	add.w	r2, r7, #24
 801b82a:	4610      	mov	r0, r2
 801b82c:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801b82e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801b832:	62bb      	str	r3, [r7, #40]	@ 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801b834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b836:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801b838:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801b83c:	4823      	ldr	r0, [pc, #140]	@ (801b8cc <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801b83e:	f7ff fa2b 	bl	801ac98 <tiny_vsnprintf_like>
 801b842:	4603      	mov	r3, r0
 801b844:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  TRACE_Lock();
 801b846:	f000 f9f1 	bl	801bc2c <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801b84a:	8afa      	ldrh	r2, [r7, #22]
 801b84c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801b84e:	4413      	add	r3, r2
 801b850:	b29b      	uxth	r3, r3
 801b852:	f107 0214 	add.w	r2, r7, #20
 801b856:	4611      	mov	r1, r2
 801b858:	4618      	mov	r0, r3
 801b85a:	f000 f969 	bl	801bb30 <TRACE_AllocateBufer>
 801b85e:	4603      	mov	r3, r0
 801b860:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b864:	d025      	beq.n	801b8b2 <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801b866:	2300      	movs	r3, #0
 801b868:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 801b86a:	e00e      	b.n	801b88a <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801b86c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801b86e:	8aba      	ldrh	r2, [r7, #20]
 801b870:	3330      	adds	r3, #48	@ 0x30
 801b872:	443b      	add	r3, r7
 801b874:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 801b878:	4b15      	ldr	r3, [pc, #84]	@ (801b8d0 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801b87a:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 801b87c:	8abb      	ldrh	r3, [r7, #20]
 801b87e:	3301      	adds	r3, #1
 801b880:	b29b      	uxth	r3, r3
 801b882:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 801b884:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801b886:	3301      	adds	r3, #1
 801b888:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 801b88a:	8afb      	ldrh	r3, [r7, #22]
 801b88c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801b88e:	429a      	cmp	r2, r3
 801b890:	d3ec      	bcc.n	801b86c <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801b892:	8abb      	ldrh	r3, [r7, #20]
 801b894:	461a      	mov	r2, r3
 801b896:	4b0e      	ldr	r3, [pc, #56]	@ (801b8d0 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801b898:	18d0      	adds	r0, r2, r3
 801b89a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b89c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801b89e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801b8a2:	f7ff f9f9 	bl	801ac98 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801b8a6:	f000 f9df 	bl	801bc68 <TRACE_UnLock>

    return TRACE_Send();
 801b8aa:	f000 f831 	bl	801b910 <TRACE_Send>
 801b8ae:	4603      	mov	r3, r0
 801b8b0:	e003      	b.n	801b8ba <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801b8b2:	f000 f9d9 	bl	801bc68 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801b8b6:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801b8ba:	4618      	mov	r0, r3
 801b8bc:	3734      	adds	r7, #52	@ 0x34
 801b8be:	46bd      	mov	sp, r7
 801b8c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801b8c4:	b001      	add	sp, #4
 801b8c6:	4770      	bx	lr
 801b8c8:	20001dc4 	.word	0x20001dc4
 801b8cc:	200021dc 	.word	0x200021dc
 801b8d0:	20001ddc 	.word	0x20001ddc

0801b8d4 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801b8d4:	b480      	push	{r7}
 801b8d6:	b083      	sub	sp, #12
 801b8d8:	af00      	add	r7, sp, #0
 801b8da:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 801b8dc:	4a03      	ldr	r2, [pc, #12]	@ (801b8ec <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801b8de:	687b      	ldr	r3, [r7, #4]
 801b8e0:	6053      	str	r3, [r2, #4]
}
 801b8e2:	bf00      	nop
 801b8e4:	370c      	adds	r7, #12
 801b8e6:	46bd      	mov	sp, r7
 801b8e8:	bc80      	pop	{r7}
 801b8ea:	4770      	bx	lr
 801b8ec:	20001dc4 	.word	0x20001dc4

0801b8f0 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801b8f0:	b480      	push	{r7}
 801b8f2:	b083      	sub	sp, #12
 801b8f4:	af00      	add	r7, sp, #0
 801b8f6:	4603      	mov	r3, r0
 801b8f8:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801b8fa:	4a04      	ldr	r2, [pc, #16]	@ (801b90c <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801b8fc:	79fb      	ldrb	r3, [r7, #7]
 801b8fe:	7213      	strb	r3, [r2, #8]
}
 801b900:	bf00      	nop
 801b902:	370c      	adds	r7, #12
 801b904:	46bd      	mov	sp, r7
 801b906:	bc80      	pop	{r7}
 801b908:	4770      	bx	lr
 801b90a:	bf00      	nop
 801b90c:	20001dc4 	.word	0x20001dc4

0801b910 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801b910:	b580      	push	{r7, lr}
 801b912:	b088      	sub	sp, #32
 801b914:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801b916:	2300      	movs	r3, #0
 801b918:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 801b91a:	2300      	movs	r3, #0
 801b91c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b91e:	f3ef 8310 	mrs	r3, PRIMASK
 801b922:	613b      	str	r3, [r7, #16]
  return(result);
 801b924:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801b926:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b928:	b672      	cpsid	i
}
 801b92a:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 801b92c:	f000 f9ba 	bl	801bca4 <TRACE_IsLocked>
 801b930:	4603      	mov	r3, r0
 801b932:	2b00      	cmp	r3, #0
 801b934:	d15d      	bne.n	801b9f2 <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 801b936:	f000 f979 	bl	801bc2c <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801b93a:	4b34      	ldr	r3, [pc, #208]	@ (801ba0c <TRACE_Send+0xfc>)
 801b93c:	8a1a      	ldrh	r2, [r3, #16]
 801b93e:	4b33      	ldr	r3, [pc, #204]	@ (801ba0c <TRACE_Send+0xfc>)
 801b940:	8a5b      	ldrh	r3, [r3, #18]
 801b942:	429a      	cmp	r2, r3
 801b944:	d04d      	beq.n	801b9e2 <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801b946:	4b31      	ldr	r3, [pc, #196]	@ (801ba0c <TRACE_Send+0xfc>)
 801b948:	789b      	ldrb	r3, [r3, #2]
 801b94a:	2b01      	cmp	r3, #1
 801b94c:	d117      	bne.n	801b97e <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801b94e:	4b2f      	ldr	r3, [pc, #188]	@ (801ba0c <TRACE_Send+0xfc>)
 801b950:	881a      	ldrh	r2, [r3, #0]
 801b952:	4b2e      	ldr	r3, [pc, #184]	@ (801ba0c <TRACE_Send+0xfc>)
 801b954:	8a1b      	ldrh	r3, [r3, #16]
 801b956:	1ad3      	subs	r3, r2, r3
 801b958:	b29a      	uxth	r2, r3
 801b95a:	4b2c      	ldr	r3, [pc, #176]	@ (801ba0c <TRACE_Send+0xfc>)
 801b95c:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801b95e:	4b2b      	ldr	r3, [pc, #172]	@ (801ba0c <TRACE_Send+0xfc>)
 801b960:	2202      	movs	r2, #2
 801b962:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801b964:	4b29      	ldr	r3, [pc, #164]	@ (801ba0c <TRACE_Send+0xfc>)
 801b966:	2200      	movs	r2, #0
 801b968:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801b96a:	4b28      	ldr	r3, [pc, #160]	@ (801ba0c <TRACE_Send+0xfc>)
 801b96c:	8a9b      	ldrh	r3, [r3, #20]
 801b96e:	2b00      	cmp	r3, #0
 801b970:	d105      	bne.n	801b97e <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801b972:	4b26      	ldr	r3, [pc, #152]	@ (801ba0c <TRACE_Send+0xfc>)
 801b974:	2200      	movs	r2, #0
 801b976:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801b978:	4b24      	ldr	r3, [pc, #144]	@ (801ba0c <TRACE_Send+0xfc>)
 801b97a:	2200      	movs	r2, #0
 801b97c:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801b97e:	4b23      	ldr	r3, [pc, #140]	@ (801ba0c <TRACE_Send+0xfc>)
 801b980:	789b      	ldrb	r3, [r3, #2]
 801b982:	2b00      	cmp	r3, #0
 801b984:	d115      	bne.n	801b9b2 <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801b986:	4b21      	ldr	r3, [pc, #132]	@ (801ba0c <TRACE_Send+0xfc>)
 801b988:	8a5a      	ldrh	r2, [r3, #18]
 801b98a:	4b20      	ldr	r3, [pc, #128]	@ (801ba0c <TRACE_Send+0xfc>)
 801b98c:	8a1b      	ldrh	r3, [r3, #16]
 801b98e:	429a      	cmp	r2, r3
 801b990:	d908      	bls.n	801b9a4 <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801b992:	4b1e      	ldr	r3, [pc, #120]	@ (801ba0c <TRACE_Send+0xfc>)
 801b994:	8a5a      	ldrh	r2, [r3, #18]
 801b996:	4b1d      	ldr	r3, [pc, #116]	@ (801ba0c <TRACE_Send+0xfc>)
 801b998:	8a1b      	ldrh	r3, [r3, #16]
 801b99a:	1ad3      	subs	r3, r2, r3
 801b99c:	b29a      	uxth	r2, r3
 801b99e:	4b1b      	ldr	r3, [pc, #108]	@ (801ba0c <TRACE_Send+0xfc>)
 801b9a0:	829a      	strh	r2, [r3, #20]
 801b9a2:	e006      	b.n	801b9b2 <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801b9a4:	4b19      	ldr	r3, [pc, #100]	@ (801ba0c <TRACE_Send+0xfc>)
 801b9a6:	8a1b      	ldrh	r3, [r3, #16]
 801b9a8:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801b9ac:	b29a      	uxth	r2, r3
 801b9ae:	4b17      	ldr	r3, [pc, #92]	@ (801ba0c <TRACE_Send+0xfc>)
 801b9b0:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801b9b2:	4b16      	ldr	r3, [pc, #88]	@ (801ba0c <TRACE_Send+0xfc>)
 801b9b4:	8a1b      	ldrh	r3, [r3, #16]
 801b9b6:	461a      	mov	r2, r3
 801b9b8:	4b15      	ldr	r3, [pc, #84]	@ (801ba10 <TRACE_Send+0x100>)
 801b9ba:	4413      	add	r3, r2
 801b9bc:	61bb      	str	r3, [r7, #24]
 801b9be:	697b      	ldr	r3, [r7, #20]
 801b9c0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b9c2:	68fb      	ldr	r3, [r7, #12]
 801b9c4:	f383 8810 	msr	PRIMASK, r3
}
 801b9c8:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 801b9ca:	f7e6 fbcb 	bl	8002164 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801b9ce:	4b11      	ldr	r3, [pc, #68]	@ (801ba14 <TRACE_Send+0x104>)
 801b9d0:	68db      	ldr	r3, [r3, #12]
 801b9d2:	4a0e      	ldr	r2, [pc, #56]	@ (801ba0c <TRACE_Send+0xfc>)
 801b9d4:	8a92      	ldrh	r2, [r2, #20]
 801b9d6:	4611      	mov	r1, r2
 801b9d8:	69b8      	ldr	r0, [r7, #24]
 801b9da:	4798      	blx	r3
 801b9dc:	4603      	mov	r3, r0
 801b9de:	77fb      	strb	r3, [r7, #31]
 801b9e0:	e00d      	b.n	801b9fe <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 801b9e2:	f000 f941 	bl	801bc68 <TRACE_UnLock>
 801b9e6:	697b      	ldr	r3, [r7, #20]
 801b9e8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b9ea:	68bb      	ldr	r3, [r7, #8]
 801b9ec:	f383 8810 	msr	PRIMASK, r3
}
 801b9f0:	e005      	b.n	801b9fe <TRACE_Send+0xee>
 801b9f2:	697b      	ldr	r3, [r7, #20]
 801b9f4:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b9f6:	687b      	ldr	r3, [r7, #4]
 801b9f8:	f383 8810 	msr	PRIMASK, r3
}
 801b9fc:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 801b9fe:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801ba02:	4618      	mov	r0, r3
 801ba04:	3720      	adds	r7, #32
 801ba06:	46bd      	mov	sp, r7
 801ba08:	bd80      	pop	{r7, pc}
 801ba0a:	bf00      	nop
 801ba0c:	20001dc4 	.word	0x20001dc4
 801ba10:	20001ddc 	.word	0x20001ddc
 801ba14:	0801f284 	.word	0x0801f284

0801ba18 <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 801ba18:	b580      	push	{r7, lr}
 801ba1a:	b088      	sub	sp, #32
 801ba1c:	af00      	add	r7, sp, #0
 801ba1e:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 801ba20:	2300      	movs	r3, #0
 801ba22:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ba24:	f3ef 8310 	mrs	r3, PRIMASK
 801ba28:	617b      	str	r3, [r7, #20]
  return(result);
 801ba2a:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801ba2c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801ba2e:	b672      	cpsid	i
}
 801ba30:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801ba32:	4b3c      	ldr	r3, [pc, #240]	@ (801bb24 <TRACE_TxCpltCallback+0x10c>)
 801ba34:	789b      	ldrb	r3, [r3, #2]
 801ba36:	2b02      	cmp	r3, #2
 801ba38:	d106      	bne.n	801ba48 <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801ba3a:	4b3a      	ldr	r3, [pc, #232]	@ (801bb24 <TRACE_TxCpltCallback+0x10c>)
 801ba3c:	2200      	movs	r2, #0
 801ba3e:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 801ba40:	4b38      	ldr	r3, [pc, #224]	@ (801bb24 <TRACE_TxCpltCallback+0x10c>)
 801ba42:	2200      	movs	r2, #0
 801ba44:	821a      	strh	r2, [r3, #16]
 801ba46:	e00a      	b.n	801ba5e <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801ba48:	4b36      	ldr	r3, [pc, #216]	@ (801bb24 <TRACE_TxCpltCallback+0x10c>)
 801ba4a:	8a1a      	ldrh	r2, [r3, #16]
 801ba4c:	4b35      	ldr	r3, [pc, #212]	@ (801bb24 <TRACE_TxCpltCallback+0x10c>)
 801ba4e:	8a9b      	ldrh	r3, [r3, #20]
 801ba50:	4413      	add	r3, r2
 801ba52:	b29b      	uxth	r3, r3
 801ba54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801ba58:	b29a      	uxth	r2, r3
 801ba5a:	4b32      	ldr	r3, [pc, #200]	@ (801bb24 <TRACE_TxCpltCallback+0x10c>)
 801ba5c:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801ba5e:	4b31      	ldr	r3, [pc, #196]	@ (801bb24 <TRACE_TxCpltCallback+0x10c>)
 801ba60:	8a1a      	ldrh	r2, [r3, #16]
 801ba62:	4b30      	ldr	r3, [pc, #192]	@ (801bb24 <TRACE_TxCpltCallback+0x10c>)
 801ba64:	8a5b      	ldrh	r3, [r3, #18]
 801ba66:	429a      	cmp	r2, r3
 801ba68:	d04d      	beq.n	801bb06 <TRACE_TxCpltCallback+0xee>
 801ba6a:	4b2e      	ldr	r3, [pc, #184]	@ (801bb24 <TRACE_TxCpltCallback+0x10c>)
 801ba6c:	8adb      	ldrh	r3, [r3, #22]
 801ba6e:	2b01      	cmp	r3, #1
 801ba70:	d149      	bne.n	801bb06 <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801ba72:	4b2c      	ldr	r3, [pc, #176]	@ (801bb24 <TRACE_TxCpltCallback+0x10c>)
 801ba74:	789b      	ldrb	r3, [r3, #2]
 801ba76:	2b01      	cmp	r3, #1
 801ba78:	d117      	bne.n	801baaa <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801ba7a:	4b2a      	ldr	r3, [pc, #168]	@ (801bb24 <TRACE_TxCpltCallback+0x10c>)
 801ba7c:	881a      	ldrh	r2, [r3, #0]
 801ba7e:	4b29      	ldr	r3, [pc, #164]	@ (801bb24 <TRACE_TxCpltCallback+0x10c>)
 801ba80:	8a1b      	ldrh	r3, [r3, #16]
 801ba82:	1ad3      	subs	r3, r2, r3
 801ba84:	b29a      	uxth	r2, r3
 801ba86:	4b27      	ldr	r3, [pc, #156]	@ (801bb24 <TRACE_TxCpltCallback+0x10c>)
 801ba88:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801ba8a:	4b26      	ldr	r3, [pc, #152]	@ (801bb24 <TRACE_TxCpltCallback+0x10c>)
 801ba8c:	2202      	movs	r2, #2
 801ba8e:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 801ba90:	4b24      	ldr	r3, [pc, #144]	@ (801bb24 <TRACE_TxCpltCallback+0x10c>)
 801ba92:	2200      	movs	r2, #0
 801ba94:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801ba96:	4b23      	ldr	r3, [pc, #140]	@ (801bb24 <TRACE_TxCpltCallback+0x10c>)
 801ba98:	8a9b      	ldrh	r3, [r3, #20]
 801ba9a:	2b00      	cmp	r3, #0
 801ba9c:	d105      	bne.n	801baaa <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801ba9e:	4b21      	ldr	r3, [pc, #132]	@ (801bb24 <TRACE_TxCpltCallback+0x10c>)
 801baa0:	2200      	movs	r2, #0
 801baa2:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801baa4:	4b1f      	ldr	r3, [pc, #124]	@ (801bb24 <TRACE_TxCpltCallback+0x10c>)
 801baa6:	2200      	movs	r2, #0
 801baa8:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801baaa:	4b1e      	ldr	r3, [pc, #120]	@ (801bb24 <TRACE_TxCpltCallback+0x10c>)
 801baac:	789b      	ldrb	r3, [r3, #2]
 801baae:	2b00      	cmp	r3, #0
 801bab0:	d115      	bne.n	801bade <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801bab2:	4b1c      	ldr	r3, [pc, #112]	@ (801bb24 <TRACE_TxCpltCallback+0x10c>)
 801bab4:	8a5a      	ldrh	r2, [r3, #18]
 801bab6:	4b1b      	ldr	r3, [pc, #108]	@ (801bb24 <TRACE_TxCpltCallback+0x10c>)
 801bab8:	8a1b      	ldrh	r3, [r3, #16]
 801baba:	429a      	cmp	r2, r3
 801babc:	d908      	bls.n	801bad0 <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801babe:	4b19      	ldr	r3, [pc, #100]	@ (801bb24 <TRACE_TxCpltCallback+0x10c>)
 801bac0:	8a5a      	ldrh	r2, [r3, #18]
 801bac2:	4b18      	ldr	r3, [pc, #96]	@ (801bb24 <TRACE_TxCpltCallback+0x10c>)
 801bac4:	8a1b      	ldrh	r3, [r3, #16]
 801bac6:	1ad3      	subs	r3, r2, r3
 801bac8:	b29a      	uxth	r2, r3
 801baca:	4b16      	ldr	r3, [pc, #88]	@ (801bb24 <TRACE_TxCpltCallback+0x10c>)
 801bacc:	829a      	strh	r2, [r3, #20]
 801bace:	e006      	b.n	801bade <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801bad0:	4b14      	ldr	r3, [pc, #80]	@ (801bb24 <TRACE_TxCpltCallback+0x10c>)
 801bad2:	8a1b      	ldrh	r3, [r3, #16]
 801bad4:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801bad8:	b29a      	uxth	r2, r3
 801bada:	4b12      	ldr	r3, [pc, #72]	@ (801bb24 <TRACE_TxCpltCallback+0x10c>)
 801badc:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801bade:	4b11      	ldr	r3, [pc, #68]	@ (801bb24 <TRACE_TxCpltCallback+0x10c>)
 801bae0:	8a1b      	ldrh	r3, [r3, #16]
 801bae2:	461a      	mov	r2, r3
 801bae4:	4b10      	ldr	r3, [pc, #64]	@ (801bb28 <TRACE_TxCpltCallback+0x110>)
 801bae6:	4413      	add	r3, r2
 801bae8:	61fb      	str	r3, [r7, #28]
 801baea:	69bb      	ldr	r3, [r7, #24]
 801baec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801baee:	693b      	ldr	r3, [r7, #16]
 801baf0:	f383 8810 	msr	PRIMASK, r3
}
 801baf4:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801baf6:	4b0d      	ldr	r3, [pc, #52]	@ (801bb2c <TRACE_TxCpltCallback+0x114>)
 801baf8:	68db      	ldr	r3, [r3, #12]
 801bafa:	4a0a      	ldr	r2, [pc, #40]	@ (801bb24 <TRACE_TxCpltCallback+0x10c>)
 801bafc:	8a92      	ldrh	r2, [r2, #20]
 801bafe:	4611      	mov	r1, r2
 801bb00:	69f8      	ldr	r0, [r7, #28]
 801bb02:	4798      	blx	r3
 801bb04:	e00a      	b.n	801bb1c <TRACE_TxCpltCallback+0x104>
 801bb06:	69bb      	ldr	r3, [r7, #24]
 801bb08:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bb0a:	68fb      	ldr	r3, [r7, #12]
 801bb0c:	f383 8810 	msr	PRIMASK, r3
}
 801bb10:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 801bb12:	f7e6 fb2f 	bl	8002174 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801bb16:	f000 f8a7 	bl	801bc68 <TRACE_UnLock>
  }
}
 801bb1a:	bf00      	nop
 801bb1c:	bf00      	nop
 801bb1e:	3720      	adds	r7, #32
 801bb20:	46bd      	mov	sp, r7
 801bb22:	bd80      	pop	{r7, pc}
 801bb24:	20001dc4 	.word	0x20001dc4
 801bb28:	20001ddc 	.word	0x20001ddc
 801bb2c:	0801f284 	.word	0x0801f284

0801bb30 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801bb30:	b480      	push	{r7}
 801bb32:	b087      	sub	sp, #28
 801bb34:	af00      	add	r7, sp, #0
 801bb36:	4603      	mov	r3, r0
 801bb38:	6039      	str	r1, [r7, #0]
 801bb3a:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 801bb3c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801bb40:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bb42:	f3ef 8310 	mrs	r3, PRIMASK
 801bb46:	60fb      	str	r3, [r7, #12]
  return(result);
 801bb48:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801bb4a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801bb4c:	b672      	cpsid	i
}
 801bb4e:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801bb50:	4b35      	ldr	r3, [pc, #212]	@ (801bc28 <TRACE_AllocateBufer+0xf8>)
 801bb52:	8a5a      	ldrh	r2, [r3, #18]
 801bb54:	4b34      	ldr	r3, [pc, #208]	@ (801bc28 <TRACE_AllocateBufer+0xf8>)
 801bb56:	8a1b      	ldrh	r3, [r3, #16]
 801bb58:	429a      	cmp	r2, r3
 801bb5a:	d11b      	bne.n	801bb94 <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801bb5c:	4b32      	ldr	r3, [pc, #200]	@ (801bc28 <TRACE_AllocateBufer+0xf8>)
 801bb5e:	8a5b      	ldrh	r3, [r3, #18]
 801bb60:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801bb64:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801bb66:	88fa      	ldrh	r2, [r7, #6]
 801bb68:	8afb      	ldrh	r3, [r7, #22]
 801bb6a:	429a      	cmp	r2, r3
 801bb6c:	d33a      	bcc.n	801bbe4 <TRACE_AllocateBufer+0xb4>
 801bb6e:	4b2e      	ldr	r3, [pc, #184]	@ (801bc28 <TRACE_AllocateBufer+0xf8>)
 801bb70:	8a1b      	ldrh	r3, [r3, #16]
 801bb72:	88fa      	ldrh	r2, [r7, #6]
 801bb74:	429a      	cmp	r2, r3
 801bb76:	d235      	bcs.n	801bbe4 <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801bb78:	4b2b      	ldr	r3, [pc, #172]	@ (801bc28 <TRACE_AllocateBufer+0xf8>)
 801bb7a:	2201      	movs	r2, #1
 801bb7c:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801bb7e:	4b2a      	ldr	r3, [pc, #168]	@ (801bc28 <TRACE_AllocateBufer+0xf8>)
 801bb80:	8a5a      	ldrh	r2, [r3, #18]
 801bb82:	4b29      	ldr	r3, [pc, #164]	@ (801bc28 <TRACE_AllocateBufer+0xf8>)
 801bb84:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801bb86:	4b28      	ldr	r3, [pc, #160]	@ (801bc28 <TRACE_AllocateBufer+0xf8>)
 801bb88:	8a1b      	ldrh	r3, [r3, #16]
 801bb8a:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801bb8c:	4b26      	ldr	r3, [pc, #152]	@ (801bc28 <TRACE_AllocateBufer+0xf8>)
 801bb8e:	2200      	movs	r2, #0
 801bb90:	825a      	strh	r2, [r3, #18]
 801bb92:	e027      	b.n	801bbe4 <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801bb94:	4b24      	ldr	r3, [pc, #144]	@ (801bc28 <TRACE_AllocateBufer+0xf8>)
 801bb96:	8a5a      	ldrh	r2, [r3, #18]
 801bb98:	4b23      	ldr	r3, [pc, #140]	@ (801bc28 <TRACE_AllocateBufer+0xf8>)
 801bb9a:	8a1b      	ldrh	r3, [r3, #16]
 801bb9c:	429a      	cmp	r2, r3
 801bb9e:	d91b      	bls.n	801bbd8 <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801bba0:	4b21      	ldr	r3, [pc, #132]	@ (801bc28 <TRACE_AllocateBufer+0xf8>)
 801bba2:	8a5b      	ldrh	r3, [r3, #18]
 801bba4:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801bba8:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801bbaa:	88fa      	ldrh	r2, [r7, #6]
 801bbac:	8afb      	ldrh	r3, [r7, #22]
 801bbae:	429a      	cmp	r2, r3
 801bbb0:	d318      	bcc.n	801bbe4 <TRACE_AllocateBufer+0xb4>
 801bbb2:	4b1d      	ldr	r3, [pc, #116]	@ (801bc28 <TRACE_AllocateBufer+0xf8>)
 801bbb4:	8a1b      	ldrh	r3, [r3, #16]
 801bbb6:	88fa      	ldrh	r2, [r7, #6]
 801bbb8:	429a      	cmp	r2, r3
 801bbba:	d213      	bcs.n	801bbe4 <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801bbbc:	4b1a      	ldr	r3, [pc, #104]	@ (801bc28 <TRACE_AllocateBufer+0xf8>)
 801bbbe:	2201      	movs	r2, #1
 801bbc0:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801bbc2:	4b19      	ldr	r3, [pc, #100]	@ (801bc28 <TRACE_AllocateBufer+0xf8>)
 801bbc4:	8a5a      	ldrh	r2, [r3, #18]
 801bbc6:	4b18      	ldr	r3, [pc, #96]	@ (801bc28 <TRACE_AllocateBufer+0xf8>)
 801bbc8:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801bbca:	4b17      	ldr	r3, [pc, #92]	@ (801bc28 <TRACE_AllocateBufer+0xf8>)
 801bbcc:	8a1b      	ldrh	r3, [r3, #16]
 801bbce:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801bbd0:	4b15      	ldr	r3, [pc, #84]	@ (801bc28 <TRACE_AllocateBufer+0xf8>)
 801bbd2:	2200      	movs	r2, #0
 801bbd4:	825a      	strh	r2, [r3, #18]
 801bbd6:	e005      	b.n	801bbe4 <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801bbd8:	4b13      	ldr	r3, [pc, #76]	@ (801bc28 <TRACE_AllocateBufer+0xf8>)
 801bbda:	8a1a      	ldrh	r2, [r3, #16]
 801bbdc:	4b12      	ldr	r3, [pc, #72]	@ (801bc28 <TRACE_AllocateBufer+0xf8>)
 801bbde:	8a5b      	ldrh	r3, [r3, #18]
 801bbe0:	1ad3      	subs	r3, r2, r3
 801bbe2:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 801bbe4:	8afa      	ldrh	r2, [r7, #22]
 801bbe6:	88fb      	ldrh	r3, [r7, #6]
 801bbe8:	429a      	cmp	r2, r3
 801bbea:	d90f      	bls.n	801bc0c <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801bbec:	4b0e      	ldr	r3, [pc, #56]	@ (801bc28 <TRACE_AllocateBufer+0xf8>)
 801bbee:	8a5a      	ldrh	r2, [r3, #18]
 801bbf0:	683b      	ldr	r3, [r7, #0]
 801bbf2:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801bbf4:	4b0c      	ldr	r3, [pc, #48]	@ (801bc28 <TRACE_AllocateBufer+0xf8>)
 801bbf6:	8a5a      	ldrh	r2, [r3, #18]
 801bbf8:	88fb      	ldrh	r3, [r7, #6]
 801bbfa:	4413      	add	r3, r2
 801bbfc:	b29b      	uxth	r3, r3
 801bbfe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801bc02:	b29a      	uxth	r2, r3
 801bc04:	4b08      	ldr	r3, [pc, #32]	@ (801bc28 <TRACE_AllocateBufer+0xf8>)
 801bc06:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801bc08:	2300      	movs	r3, #0
 801bc0a:	82bb      	strh	r3, [r7, #20]
 801bc0c:	693b      	ldr	r3, [r7, #16]
 801bc0e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bc10:	68bb      	ldr	r3, [r7, #8]
 801bc12:	f383 8810 	msr	PRIMASK, r3
}
 801bc16:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 801bc18:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 801bc1c:	4618      	mov	r0, r3
 801bc1e:	371c      	adds	r7, #28
 801bc20:	46bd      	mov	sp, r7
 801bc22:	bc80      	pop	{r7}
 801bc24:	4770      	bx	lr
 801bc26:	bf00      	nop
 801bc28:	20001dc4 	.word	0x20001dc4

0801bc2c <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 801bc2c:	b480      	push	{r7}
 801bc2e:	b085      	sub	sp, #20
 801bc30:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bc32:	f3ef 8310 	mrs	r3, PRIMASK
 801bc36:	607b      	str	r3, [r7, #4]
  return(result);
 801bc38:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801bc3a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801bc3c:	b672      	cpsid	i
}
 801bc3e:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 801bc40:	4b08      	ldr	r3, [pc, #32]	@ (801bc64 <TRACE_Lock+0x38>)
 801bc42:	8adb      	ldrh	r3, [r3, #22]
 801bc44:	3301      	adds	r3, #1
 801bc46:	b29a      	uxth	r2, r3
 801bc48:	4b06      	ldr	r3, [pc, #24]	@ (801bc64 <TRACE_Lock+0x38>)
 801bc4a:	82da      	strh	r2, [r3, #22]
 801bc4c:	68fb      	ldr	r3, [r7, #12]
 801bc4e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bc50:	68bb      	ldr	r3, [r7, #8]
 801bc52:	f383 8810 	msr	PRIMASK, r3
}
 801bc56:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801bc58:	bf00      	nop
 801bc5a:	3714      	adds	r7, #20
 801bc5c:	46bd      	mov	sp, r7
 801bc5e:	bc80      	pop	{r7}
 801bc60:	4770      	bx	lr
 801bc62:	bf00      	nop
 801bc64:	20001dc4 	.word	0x20001dc4

0801bc68 <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 801bc68:	b480      	push	{r7}
 801bc6a:	b085      	sub	sp, #20
 801bc6c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bc6e:	f3ef 8310 	mrs	r3, PRIMASK
 801bc72:	607b      	str	r3, [r7, #4]
  return(result);
 801bc74:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801bc76:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801bc78:	b672      	cpsid	i
}
 801bc7a:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 801bc7c:	4b08      	ldr	r3, [pc, #32]	@ (801bca0 <TRACE_UnLock+0x38>)
 801bc7e:	8adb      	ldrh	r3, [r3, #22]
 801bc80:	3b01      	subs	r3, #1
 801bc82:	b29a      	uxth	r2, r3
 801bc84:	4b06      	ldr	r3, [pc, #24]	@ (801bca0 <TRACE_UnLock+0x38>)
 801bc86:	82da      	strh	r2, [r3, #22]
 801bc88:	68fb      	ldr	r3, [r7, #12]
 801bc8a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bc8c:	68bb      	ldr	r3, [r7, #8]
 801bc8e:	f383 8810 	msr	PRIMASK, r3
}
 801bc92:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801bc94:	bf00      	nop
 801bc96:	3714      	adds	r7, #20
 801bc98:	46bd      	mov	sp, r7
 801bc9a:	bc80      	pop	{r7}
 801bc9c:	4770      	bx	lr
 801bc9e:	bf00      	nop
 801bca0:	20001dc4 	.word	0x20001dc4

0801bca4 <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 801bca4:	b480      	push	{r7}
 801bca6:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801bca8:	4b05      	ldr	r3, [pc, #20]	@ (801bcc0 <TRACE_IsLocked+0x1c>)
 801bcaa:	8adb      	ldrh	r3, [r3, #22]
 801bcac:	2b00      	cmp	r3, #0
 801bcae:	bf14      	ite	ne
 801bcb0:	2301      	movne	r3, #1
 801bcb2:	2300      	moveq	r3, #0
 801bcb4:	b2db      	uxtb	r3, r3
}
 801bcb6:	4618      	mov	r0, r3
 801bcb8:	46bd      	mov	sp, r7
 801bcba:	bc80      	pop	{r7}
 801bcbc:	4770      	bx	lr
 801bcbe:	bf00      	nop
 801bcc0:	20001dc4 	.word	0x20001dc4

0801bcc4 <__cvt>:
 801bcc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bcc8:	b088      	sub	sp, #32
 801bcca:	2b00      	cmp	r3, #0
 801bccc:	461d      	mov	r5, r3
 801bcce:	4614      	mov	r4, r2
 801bcd0:	bfbc      	itt	lt
 801bcd2:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 801bcd6:	4614      	movlt	r4, r2
 801bcd8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801bcda:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 801bcdc:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 801bce0:	bfb6      	itet	lt
 801bce2:	461d      	movlt	r5, r3
 801bce4:	2300      	movge	r3, #0
 801bce6:	232d      	movlt	r3, #45	@ 0x2d
 801bce8:	7013      	strb	r3, [r2, #0]
 801bcea:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801bcec:	f023 0820 	bic.w	r8, r3, #32
 801bcf0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801bcf4:	d005      	beq.n	801bd02 <__cvt+0x3e>
 801bcf6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801bcfa:	d100      	bne.n	801bcfe <__cvt+0x3a>
 801bcfc:	3601      	adds	r6, #1
 801bcfe:	2302      	movs	r3, #2
 801bd00:	e000      	b.n	801bd04 <__cvt+0x40>
 801bd02:	2303      	movs	r3, #3
 801bd04:	aa07      	add	r2, sp, #28
 801bd06:	9204      	str	r2, [sp, #16]
 801bd08:	aa06      	add	r2, sp, #24
 801bd0a:	e9cd a202 	strd	sl, r2, [sp, #8]
 801bd0e:	e9cd 3600 	strd	r3, r6, [sp]
 801bd12:	4622      	mov	r2, r4
 801bd14:	462b      	mov	r3, r5
 801bd16:	f000 fe3b 	bl	801c990 <_dtoa_r>
 801bd1a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801bd1e:	4607      	mov	r7, r0
 801bd20:	d119      	bne.n	801bd56 <__cvt+0x92>
 801bd22:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801bd24:	07db      	lsls	r3, r3, #31
 801bd26:	d50e      	bpl.n	801bd46 <__cvt+0x82>
 801bd28:	eb00 0906 	add.w	r9, r0, r6
 801bd2c:	2200      	movs	r2, #0
 801bd2e:	2300      	movs	r3, #0
 801bd30:	4620      	mov	r0, r4
 801bd32:	4629      	mov	r1, r5
 801bd34:	f7e4 fea0 	bl	8000a78 <__aeabi_dcmpeq>
 801bd38:	b108      	cbz	r0, 801bd3e <__cvt+0x7a>
 801bd3a:	f8cd 901c 	str.w	r9, [sp, #28]
 801bd3e:	2230      	movs	r2, #48	@ 0x30
 801bd40:	9b07      	ldr	r3, [sp, #28]
 801bd42:	454b      	cmp	r3, r9
 801bd44:	d31e      	bcc.n	801bd84 <__cvt+0xc0>
 801bd46:	9b07      	ldr	r3, [sp, #28]
 801bd48:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801bd4a:	1bdb      	subs	r3, r3, r7
 801bd4c:	4638      	mov	r0, r7
 801bd4e:	6013      	str	r3, [r2, #0]
 801bd50:	b008      	add	sp, #32
 801bd52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bd56:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801bd5a:	eb00 0906 	add.w	r9, r0, r6
 801bd5e:	d1e5      	bne.n	801bd2c <__cvt+0x68>
 801bd60:	7803      	ldrb	r3, [r0, #0]
 801bd62:	2b30      	cmp	r3, #48	@ 0x30
 801bd64:	d10a      	bne.n	801bd7c <__cvt+0xb8>
 801bd66:	2200      	movs	r2, #0
 801bd68:	2300      	movs	r3, #0
 801bd6a:	4620      	mov	r0, r4
 801bd6c:	4629      	mov	r1, r5
 801bd6e:	f7e4 fe83 	bl	8000a78 <__aeabi_dcmpeq>
 801bd72:	b918      	cbnz	r0, 801bd7c <__cvt+0xb8>
 801bd74:	f1c6 0601 	rsb	r6, r6, #1
 801bd78:	f8ca 6000 	str.w	r6, [sl]
 801bd7c:	f8da 3000 	ldr.w	r3, [sl]
 801bd80:	4499      	add	r9, r3
 801bd82:	e7d3      	b.n	801bd2c <__cvt+0x68>
 801bd84:	1c59      	adds	r1, r3, #1
 801bd86:	9107      	str	r1, [sp, #28]
 801bd88:	701a      	strb	r2, [r3, #0]
 801bd8a:	e7d9      	b.n	801bd40 <__cvt+0x7c>

0801bd8c <__exponent>:
 801bd8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801bd8e:	2900      	cmp	r1, #0
 801bd90:	bfba      	itte	lt
 801bd92:	4249      	neglt	r1, r1
 801bd94:	232d      	movlt	r3, #45	@ 0x2d
 801bd96:	232b      	movge	r3, #43	@ 0x2b
 801bd98:	2909      	cmp	r1, #9
 801bd9a:	7002      	strb	r2, [r0, #0]
 801bd9c:	7043      	strb	r3, [r0, #1]
 801bd9e:	dd29      	ble.n	801bdf4 <__exponent+0x68>
 801bda0:	f10d 0307 	add.w	r3, sp, #7
 801bda4:	461d      	mov	r5, r3
 801bda6:	270a      	movs	r7, #10
 801bda8:	461a      	mov	r2, r3
 801bdaa:	fbb1 f6f7 	udiv	r6, r1, r7
 801bdae:	fb07 1416 	mls	r4, r7, r6, r1
 801bdb2:	3430      	adds	r4, #48	@ 0x30
 801bdb4:	f802 4c01 	strb.w	r4, [r2, #-1]
 801bdb8:	460c      	mov	r4, r1
 801bdba:	2c63      	cmp	r4, #99	@ 0x63
 801bdbc:	f103 33ff 	add.w	r3, r3, #4294967295
 801bdc0:	4631      	mov	r1, r6
 801bdc2:	dcf1      	bgt.n	801bda8 <__exponent+0x1c>
 801bdc4:	3130      	adds	r1, #48	@ 0x30
 801bdc6:	1e94      	subs	r4, r2, #2
 801bdc8:	f803 1c01 	strb.w	r1, [r3, #-1]
 801bdcc:	1c41      	adds	r1, r0, #1
 801bdce:	4623      	mov	r3, r4
 801bdd0:	42ab      	cmp	r3, r5
 801bdd2:	d30a      	bcc.n	801bdea <__exponent+0x5e>
 801bdd4:	f10d 0309 	add.w	r3, sp, #9
 801bdd8:	1a9b      	subs	r3, r3, r2
 801bdda:	42ac      	cmp	r4, r5
 801bddc:	bf88      	it	hi
 801bdde:	2300      	movhi	r3, #0
 801bde0:	3302      	adds	r3, #2
 801bde2:	4403      	add	r3, r0
 801bde4:	1a18      	subs	r0, r3, r0
 801bde6:	b003      	add	sp, #12
 801bde8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bdea:	f813 6b01 	ldrb.w	r6, [r3], #1
 801bdee:	f801 6f01 	strb.w	r6, [r1, #1]!
 801bdf2:	e7ed      	b.n	801bdd0 <__exponent+0x44>
 801bdf4:	2330      	movs	r3, #48	@ 0x30
 801bdf6:	3130      	adds	r1, #48	@ 0x30
 801bdf8:	7083      	strb	r3, [r0, #2]
 801bdfa:	70c1      	strb	r1, [r0, #3]
 801bdfc:	1d03      	adds	r3, r0, #4
 801bdfe:	e7f1      	b.n	801bde4 <__exponent+0x58>

0801be00 <_printf_float>:
 801be00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801be04:	b091      	sub	sp, #68	@ 0x44
 801be06:	460c      	mov	r4, r1
 801be08:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 801be0c:	4616      	mov	r6, r2
 801be0e:	461f      	mov	r7, r3
 801be10:	4605      	mov	r5, r0
 801be12:	f000 fcbb 	bl	801c78c <_localeconv_r>
 801be16:	6803      	ldr	r3, [r0, #0]
 801be18:	9308      	str	r3, [sp, #32]
 801be1a:	4618      	mov	r0, r3
 801be1c:	f7e4 fa00 	bl	8000220 <strlen>
 801be20:	2300      	movs	r3, #0
 801be22:	930e      	str	r3, [sp, #56]	@ 0x38
 801be24:	f8d8 3000 	ldr.w	r3, [r8]
 801be28:	9009      	str	r0, [sp, #36]	@ 0x24
 801be2a:	3307      	adds	r3, #7
 801be2c:	f023 0307 	bic.w	r3, r3, #7
 801be30:	f103 0208 	add.w	r2, r3, #8
 801be34:	f894 a018 	ldrb.w	sl, [r4, #24]
 801be38:	f8d4 b000 	ldr.w	fp, [r4]
 801be3c:	f8c8 2000 	str.w	r2, [r8]
 801be40:	e9d3 8900 	ldrd	r8, r9, [r3]
 801be44:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801be48:	930b      	str	r3, [sp, #44]	@ 0x2c
 801be4a:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 801be4e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801be52:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801be56:	4b9d      	ldr	r3, [pc, #628]	@ (801c0cc <_printf_float+0x2cc>)
 801be58:	f04f 32ff 	mov.w	r2, #4294967295
 801be5c:	f7e4 fe3e 	bl	8000adc <__aeabi_dcmpun>
 801be60:	bb70      	cbnz	r0, 801bec0 <_printf_float+0xc0>
 801be62:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801be66:	4b99      	ldr	r3, [pc, #612]	@ (801c0cc <_printf_float+0x2cc>)
 801be68:	f04f 32ff 	mov.w	r2, #4294967295
 801be6c:	f7e4 fe18 	bl	8000aa0 <__aeabi_dcmple>
 801be70:	bb30      	cbnz	r0, 801bec0 <_printf_float+0xc0>
 801be72:	2200      	movs	r2, #0
 801be74:	2300      	movs	r3, #0
 801be76:	4640      	mov	r0, r8
 801be78:	4649      	mov	r1, r9
 801be7a:	f7e4 fe07 	bl	8000a8c <__aeabi_dcmplt>
 801be7e:	b110      	cbz	r0, 801be86 <_printf_float+0x86>
 801be80:	232d      	movs	r3, #45	@ 0x2d
 801be82:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801be86:	4a92      	ldr	r2, [pc, #584]	@ (801c0d0 <_printf_float+0x2d0>)
 801be88:	4b92      	ldr	r3, [pc, #584]	@ (801c0d4 <_printf_float+0x2d4>)
 801be8a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801be8e:	bf8c      	ite	hi
 801be90:	4690      	movhi	r8, r2
 801be92:	4698      	movls	r8, r3
 801be94:	2303      	movs	r3, #3
 801be96:	6123      	str	r3, [r4, #16]
 801be98:	f02b 0304 	bic.w	r3, fp, #4
 801be9c:	6023      	str	r3, [r4, #0]
 801be9e:	f04f 0900 	mov.w	r9, #0
 801bea2:	9700      	str	r7, [sp, #0]
 801bea4:	4633      	mov	r3, r6
 801bea6:	aa0f      	add	r2, sp, #60	@ 0x3c
 801bea8:	4621      	mov	r1, r4
 801beaa:	4628      	mov	r0, r5
 801beac:	f000 f9d4 	bl	801c258 <_printf_common>
 801beb0:	3001      	adds	r0, #1
 801beb2:	f040 808f 	bne.w	801bfd4 <_printf_float+0x1d4>
 801beb6:	f04f 30ff 	mov.w	r0, #4294967295
 801beba:	b011      	add	sp, #68	@ 0x44
 801bebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bec0:	4642      	mov	r2, r8
 801bec2:	464b      	mov	r3, r9
 801bec4:	4640      	mov	r0, r8
 801bec6:	4649      	mov	r1, r9
 801bec8:	f7e4 fe08 	bl	8000adc <__aeabi_dcmpun>
 801becc:	b140      	cbz	r0, 801bee0 <_printf_float+0xe0>
 801bece:	464b      	mov	r3, r9
 801bed0:	2b00      	cmp	r3, #0
 801bed2:	bfbc      	itt	lt
 801bed4:	232d      	movlt	r3, #45	@ 0x2d
 801bed6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801beda:	4a7f      	ldr	r2, [pc, #508]	@ (801c0d8 <_printf_float+0x2d8>)
 801bedc:	4b7f      	ldr	r3, [pc, #508]	@ (801c0dc <_printf_float+0x2dc>)
 801bede:	e7d4      	b.n	801be8a <_printf_float+0x8a>
 801bee0:	6863      	ldr	r3, [r4, #4]
 801bee2:	1c5a      	adds	r2, r3, #1
 801bee4:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 801bee8:	d13f      	bne.n	801bf6a <_printf_float+0x16a>
 801beea:	2306      	movs	r3, #6
 801beec:	6063      	str	r3, [r4, #4]
 801beee:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 801bef2:	2200      	movs	r2, #0
 801bef4:	6023      	str	r3, [r4, #0]
 801bef6:	9206      	str	r2, [sp, #24]
 801bef8:	aa0e      	add	r2, sp, #56	@ 0x38
 801befa:	e9cd a204 	strd	sl, r2, [sp, #16]
 801befe:	aa0d      	add	r2, sp, #52	@ 0x34
 801bf00:	9203      	str	r2, [sp, #12]
 801bf02:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 801bf06:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801bf0a:	6863      	ldr	r3, [r4, #4]
 801bf0c:	9300      	str	r3, [sp, #0]
 801bf0e:	4642      	mov	r2, r8
 801bf10:	464b      	mov	r3, r9
 801bf12:	4628      	mov	r0, r5
 801bf14:	910a      	str	r1, [sp, #40]	@ 0x28
 801bf16:	f7ff fed5 	bl	801bcc4 <__cvt>
 801bf1a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801bf1c:	2947      	cmp	r1, #71	@ 0x47
 801bf1e:	4680      	mov	r8, r0
 801bf20:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801bf22:	d128      	bne.n	801bf76 <_printf_float+0x176>
 801bf24:	1cc8      	adds	r0, r1, #3
 801bf26:	db02      	blt.n	801bf2e <_printf_float+0x12e>
 801bf28:	6863      	ldr	r3, [r4, #4]
 801bf2a:	4299      	cmp	r1, r3
 801bf2c:	dd40      	ble.n	801bfb0 <_printf_float+0x1b0>
 801bf2e:	f1aa 0a02 	sub.w	sl, sl, #2
 801bf32:	fa5f fa8a 	uxtb.w	sl, sl
 801bf36:	3901      	subs	r1, #1
 801bf38:	4652      	mov	r2, sl
 801bf3a:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801bf3e:	910d      	str	r1, [sp, #52]	@ 0x34
 801bf40:	f7ff ff24 	bl	801bd8c <__exponent>
 801bf44:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801bf46:	1813      	adds	r3, r2, r0
 801bf48:	2a01      	cmp	r2, #1
 801bf4a:	4681      	mov	r9, r0
 801bf4c:	6123      	str	r3, [r4, #16]
 801bf4e:	dc02      	bgt.n	801bf56 <_printf_float+0x156>
 801bf50:	6822      	ldr	r2, [r4, #0]
 801bf52:	07d2      	lsls	r2, r2, #31
 801bf54:	d501      	bpl.n	801bf5a <_printf_float+0x15a>
 801bf56:	3301      	adds	r3, #1
 801bf58:	6123      	str	r3, [r4, #16]
 801bf5a:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 801bf5e:	2b00      	cmp	r3, #0
 801bf60:	d09f      	beq.n	801bea2 <_printf_float+0xa2>
 801bf62:	232d      	movs	r3, #45	@ 0x2d
 801bf64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801bf68:	e79b      	b.n	801bea2 <_printf_float+0xa2>
 801bf6a:	2947      	cmp	r1, #71	@ 0x47
 801bf6c:	d1bf      	bne.n	801beee <_printf_float+0xee>
 801bf6e:	2b00      	cmp	r3, #0
 801bf70:	d1bd      	bne.n	801beee <_printf_float+0xee>
 801bf72:	2301      	movs	r3, #1
 801bf74:	e7ba      	b.n	801beec <_printf_float+0xec>
 801bf76:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801bf7a:	d9dc      	bls.n	801bf36 <_printf_float+0x136>
 801bf7c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801bf80:	d118      	bne.n	801bfb4 <_printf_float+0x1b4>
 801bf82:	2900      	cmp	r1, #0
 801bf84:	6863      	ldr	r3, [r4, #4]
 801bf86:	dd0b      	ble.n	801bfa0 <_printf_float+0x1a0>
 801bf88:	6121      	str	r1, [r4, #16]
 801bf8a:	b913      	cbnz	r3, 801bf92 <_printf_float+0x192>
 801bf8c:	6822      	ldr	r2, [r4, #0]
 801bf8e:	07d0      	lsls	r0, r2, #31
 801bf90:	d502      	bpl.n	801bf98 <_printf_float+0x198>
 801bf92:	3301      	adds	r3, #1
 801bf94:	440b      	add	r3, r1
 801bf96:	6123      	str	r3, [r4, #16]
 801bf98:	65a1      	str	r1, [r4, #88]	@ 0x58
 801bf9a:	f04f 0900 	mov.w	r9, #0
 801bf9e:	e7dc      	b.n	801bf5a <_printf_float+0x15a>
 801bfa0:	b913      	cbnz	r3, 801bfa8 <_printf_float+0x1a8>
 801bfa2:	6822      	ldr	r2, [r4, #0]
 801bfa4:	07d2      	lsls	r2, r2, #31
 801bfa6:	d501      	bpl.n	801bfac <_printf_float+0x1ac>
 801bfa8:	3302      	adds	r3, #2
 801bfaa:	e7f4      	b.n	801bf96 <_printf_float+0x196>
 801bfac:	2301      	movs	r3, #1
 801bfae:	e7f2      	b.n	801bf96 <_printf_float+0x196>
 801bfb0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801bfb4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801bfb6:	4299      	cmp	r1, r3
 801bfb8:	db05      	blt.n	801bfc6 <_printf_float+0x1c6>
 801bfba:	6823      	ldr	r3, [r4, #0]
 801bfbc:	6121      	str	r1, [r4, #16]
 801bfbe:	07d8      	lsls	r0, r3, #31
 801bfc0:	d5ea      	bpl.n	801bf98 <_printf_float+0x198>
 801bfc2:	1c4b      	adds	r3, r1, #1
 801bfc4:	e7e7      	b.n	801bf96 <_printf_float+0x196>
 801bfc6:	2900      	cmp	r1, #0
 801bfc8:	bfd4      	ite	le
 801bfca:	f1c1 0202 	rsble	r2, r1, #2
 801bfce:	2201      	movgt	r2, #1
 801bfd0:	4413      	add	r3, r2
 801bfd2:	e7e0      	b.n	801bf96 <_printf_float+0x196>
 801bfd4:	6823      	ldr	r3, [r4, #0]
 801bfd6:	055a      	lsls	r2, r3, #21
 801bfd8:	d407      	bmi.n	801bfea <_printf_float+0x1ea>
 801bfda:	6923      	ldr	r3, [r4, #16]
 801bfdc:	4642      	mov	r2, r8
 801bfde:	4631      	mov	r1, r6
 801bfe0:	4628      	mov	r0, r5
 801bfe2:	47b8      	blx	r7
 801bfe4:	3001      	adds	r0, #1
 801bfe6:	d12b      	bne.n	801c040 <_printf_float+0x240>
 801bfe8:	e765      	b.n	801beb6 <_printf_float+0xb6>
 801bfea:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801bfee:	f240 80dd 	bls.w	801c1ac <_printf_float+0x3ac>
 801bff2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801bff6:	2200      	movs	r2, #0
 801bff8:	2300      	movs	r3, #0
 801bffa:	f7e4 fd3d 	bl	8000a78 <__aeabi_dcmpeq>
 801bffe:	2800      	cmp	r0, #0
 801c000:	d033      	beq.n	801c06a <_printf_float+0x26a>
 801c002:	4a37      	ldr	r2, [pc, #220]	@ (801c0e0 <_printf_float+0x2e0>)
 801c004:	2301      	movs	r3, #1
 801c006:	4631      	mov	r1, r6
 801c008:	4628      	mov	r0, r5
 801c00a:	47b8      	blx	r7
 801c00c:	3001      	adds	r0, #1
 801c00e:	f43f af52 	beq.w	801beb6 <_printf_float+0xb6>
 801c012:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 801c016:	4543      	cmp	r3, r8
 801c018:	db02      	blt.n	801c020 <_printf_float+0x220>
 801c01a:	6823      	ldr	r3, [r4, #0]
 801c01c:	07d8      	lsls	r0, r3, #31
 801c01e:	d50f      	bpl.n	801c040 <_printf_float+0x240>
 801c020:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801c024:	4631      	mov	r1, r6
 801c026:	4628      	mov	r0, r5
 801c028:	47b8      	blx	r7
 801c02a:	3001      	adds	r0, #1
 801c02c:	f43f af43 	beq.w	801beb6 <_printf_float+0xb6>
 801c030:	f04f 0900 	mov.w	r9, #0
 801c034:	f108 38ff 	add.w	r8, r8, #4294967295
 801c038:	f104 0a1a 	add.w	sl, r4, #26
 801c03c:	45c8      	cmp	r8, r9
 801c03e:	dc09      	bgt.n	801c054 <_printf_float+0x254>
 801c040:	6823      	ldr	r3, [r4, #0]
 801c042:	079b      	lsls	r3, r3, #30
 801c044:	f100 8103 	bmi.w	801c24e <_printf_float+0x44e>
 801c048:	68e0      	ldr	r0, [r4, #12]
 801c04a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c04c:	4298      	cmp	r0, r3
 801c04e:	bfb8      	it	lt
 801c050:	4618      	movlt	r0, r3
 801c052:	e732      	b.n	801beba <_printf_float+0xba>
 801c054:	2301      	movs	r3, #1
 801c056:	4652      	mov	r2, sl
 801c058:	4631      	mov	r1, r6
 801c05a:	4628      	mov	r0, r5
 801c05c:	47b8      	blx	r7
 801c05e:	3001      	adds	r0, #1
 801c060:	f43f af29 	beq.w	801beb6 <_printf_float+0xb6>
 801c064:	f109 0901 	add.w	r9, r9, #1
 801c068:	e7e8      	b.n	801c03c <_printf_float+0x23c>
 801c06a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c06c:	2b00      	cmp	r3, #0
 801c06e:	dc39      	bgt.n	801c0e4 <_printf_float+0x2e4>
 801c070:	4a1b      	ldr	r2, [pc, #108]	@ (801c0e0 <_printf_float+0x2e0>)
 801c072:	2301      	movs	r3, #1
 801c074:	4631      	mov	r1, r6
 801c076:	4628      	mov	r0, r5
 801c078:	47b8      	blx	r7
 801c07a:	3001      	adds	r0, #1
 801c07c:	f43f af1b 	beq.w	801beb6 <_printf_float+0xb6>
 801c080:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 801c084:	ea59 0303 	orrs.w	r3, r9, r3
 801c088:	d102      	bne.n	801c090 <_printf_float+0x290>
 801c08a:	6823      	ldr	r3, [r4, #0]
 801c08c:	07d9      	lsls	r1, r3, #31
 801c08e:	d5d7      	bpl.n	801c040 <_printf_float+0x240>
 801c090:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801c094:	4631      	mov	r1, r6
 801c096:	4628      	mov	r0, r5
 801c098:	47b8      	blx	r7
 801c09a:	3001      	adds	r0, #1
 801c09c:	f43f af0b 	beq.w	801beb6 <_printf_float+0xb6>
 801c0a0:	f04f 0a00 	mov.w	sl, #0
 801c0a4:	f104 0b1a 	add.w	fp, r4, #26
 801c0a8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c0aa:	425b      	negs	r3, r3
 801c0ac:	4553      	cmp	r3, sl
 801c0ae:	dc01      	bgt.n	801c0b4 <_printf_float+0x2b4>
 801c0b0:	464b      	mov	r3, r9
 801c0b2:	e793      	b.n	801bfdc <_printf_float+0x1dc>
 801c0b4:	2301      	movs	r3, #1
 801c0b6:	465a      	mov	r2, fp
 801c0b8:	4631      	mov	r1, r6
 801c0ba:	4628      	mov	r0, r5
 801c0bc:	47b8      	blx	r7
 801c0be:	3001      	adds	r0, #1
 801c0c0:	f43f aef9 	beq.w	801beb6 <_printf_float+0xb6>
 801c0c4:	f10a 0a01 	add.w	sl, sl, #1
 801c0c8:	e7ee      	b.n	801c0a8 <_printf_float+0x2a8>
 801c0ca:	bf00      	nop
 801c0cc:	7fefffff 	.word	0x7fefffff
 801c0d0:	0801f7d8 	.word	0x0801f7d8
 801c0d4:	0801f7d4 	.word	0x0801f7d4
 801c0d8:	0801f7e0 	.word	0x0801f7e0
 801c0dc:	0801f7dc 	.word	0x0801f7dc
 801c0e0:	0801f7e4 	.word	0x0801f7e4
 801c0e4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801c0e6:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 801c0ea:	4553      	cmp	r3, sl
 801c0ec:	bfa8      	it	ge
 801c0ee:	4653      	movge	r3, sl
 801c0f0:	2b00      	cmp	r3, #0
 801c0f2:	4699      	mov	r9, r3
 801c0f4:	dc36      	bgt.n	801c164 <_printf_float+0x364>
 801c0f6:	f04f 0b00 	mov.w	fp, #0
 801c0fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801c0fe:	f104 021a 	add.w	r2, r4, #26
 801c102:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801c104:	930a      	str	r3, [sp, #40]	@ 0x28
 801c106:	eba3 0309 	sub.w	r3, r3, r9
 801c10a:	455b      	cmp	r3, fp
 801c10c:	dc31      	bgt.n	801c172 <_printf_float+0x372>
 801c10e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c110:	459a      	cmp	sl, r3
 801c112:	dc3a      	bgt.n	801c18a <_printf_float+0x38a>
 801c114:	6823      	ldr	r3, [r4, #0]
 801c116:	07da      	lsls	r2, r3, #31
 801c118:	d437      	bmi.n	801c18a <_printf_float+0x38a>
 801c11a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c11c:	ebaa 0903 	sub.w	r9, sl, r3
 801c120:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c122:	ebaa 0303 	sub.w	r3, sl, r3
 801c126:	4599      	cmp	r9, r3
 801c128:	bfa8      	it	ge
 801c12a:	4699      	movge	r9, r3
 801c12c:	f1b9 0f00 	cmp.w	r9, #0
 801c130:	dc33      	bgt.n	801c19a <_printf_float+0x39a>
 801c132:	f04f 0800 	mov.w	r8, #0
 801c136:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801c13a:	f104 0b1a 	add.w	fp, r4, #26
 801c13e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c140:	ebaa 0303 	sub.w	r3, sl, r3
 801c144:	eba3 0309 	sub.w	r3, r3, r9
 801c148:	4543      	cmp	r3, r8
 801c14a:	f77f af79 	ble.w	801c040 <_printf_float+0x240>
 801c14e:	2301      	movs	r3, #1
 801c150:	465a      	mov	r2, fp
 801c152:	4631      	mov	r1, r6
 801c154:	4628      	mov	r0, r5
 801c156:	47b8      	blx	r7
 801c158:	3001      	adds	r0, #1
 801c15a:	f43f aeac 	beq.w	801beb6 <_printf_float+0xb6>
 801c15e:	f108 0801 	add.w	r8, r8, #1
 801c162:	e7ec      	b.n	801c13e <_printf_float+0x33e>
 801c164:	4642      	mov	r2, r8
 801c166:	4631      	mov	r1, r6
 801c168:	4628      	mov	r0, r5
 801c16a:	47b8      	blx	r7
 801c16c:	3001      	adds	r0, #1
 801c16e:	d1c2      	bne.n	801c0f6 <_printf_float+0x2f6>
 801c170:	e6a1      	b.n	801beb6 <_printf_float+0xb6>
 801c172:	2301      	movs	r3, #1
 801c174:	4631      	mov	r1, r6
 801c176:	4628      	mov	r0, r5
 801c178:	920a      	str	r2, [sp, #40]	@ 0x28
 801c17a:	47b8      	blx	r7
 801c17c:	3001      	adds	r0, #1
 801c17e:	f43f ae9a 	beq.w	801beb6 <_printf_float+0xb6>
 801c182:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801c184:	f10b 0b01 	add.w	fp, fp, #1
 801c188:	e7bb      	b.n	801c102 <_printf_float+0x302>
 801c18a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801c18e:	4631      	mov	r1, r6
 801c190:	4628      	mov	r0, r5
 801c192:	47b8      	blx	r7
 801c194:	3001      	adds	r0, #1
 801c196:	d1c0      	bne.n	801c11a <_printf_float+0x31a>
 801c198:	e68d      	b.n	801beb6 <_printf_float+0xb6>
 801c19a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801c19c:	464b      	mov	r3, r9
 801c19e:	4442      	add	r2, r8
 801c1a0:	4631      	mov	r1, r6
 801c1a2:	4628      	mov	r0, r5
 801c1a4:	47b8      	blx	r7
 801c1a6:	3001      	adds	r0, #1
 801c1a8:	d1c3      	bne.n	801c132 <_printf_float+0x332>
 801c1aa:	e684      	b.n	801beb6 <_printf_float+0xb6>
 801c1ac:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 801c1b0:	f1ba 0f01 	cmp.w	sl, #1
 801c1b4:	dc01      	bgt.n	801c1ba <_printf_float+0x3ba>
 801c1b6:	07db      	lsls	r3, r3, #31
 801c1b8:	d536      	bpl.n	801c228 <_printf_float+0x428>
 801c1ba:	2301      	movs	r3, #1
 801c1bc:	4642      	mov	r2, r8
 801c1be:	4631      	mov	r1, r6
 801c1c0:	4628      	mov	r0, r5
 801c1c2:	47b8      	blx	r7
 801c1c4:	3001      	adds	r0, #1
 801c1c6:	f43f ae76 	beq.w	801beb6 <_printf_float+0xb6>
 801c1ca:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801c1ce:	4631      	mov	r1, r6
 801c1d0:	4628      	mov	r0, r5
 801c1d2:	47b8      	blx	r7
 801c1d4:	3001      	adds	r0, #1
 801c1d6:	f43f ae6e 	beq.w	801beb6 <_printf_float+0xb6>
 801c1da:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801c1de:	2200      	movs	r2, #0
 801c1e0:	2300      	movs	r3, #0
 801c1e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c1e6:	f7e4 fc47 	bl	8000a78 <__aeabi_dcmpeq>
 801c1ea:	b9c0      	cbnz	r0, 801c21e <_printf_float+0x41e>
 801c1ec:	4653      	mov	r3, sl
 801c1ee:	f108 0201 	add.w	r2, r8, #1
 801c1f2:	4631      	mov	r1, r6
 801c1f4:	4628      	mov	r0, r5
 801c1f6:	47b8      	blx	r7
 801c1f8:	3001      	adds	r0, #1
 801c1fa:	d10c      	bne.n	801c216 <_printf_float+0x416>
 801c1fc:	e65b      	b.n	801beb6 <_printf_float+0xb6>
 801c1fe:	2301      	movs	r3, #1
 801c200:	465a      	mov	r2, fp
 801c202:	4631      	mov	r1, r6
 801c204:	4628      	mov	r0, r5
 801c206:	47b8      	blx	r7
 801c208:	3001      	adds	r0, #1
 801c20a:	f43f ae54 	beq.w	801beb6 <_printf_float+0xb6>
 801c20e:	f108 0801 	add.w	r8, r8, #1
 801c212:	45d0      	cmp	r8, sl
 801c214:	dbf3      	blt.n	801c1fe <_printf_float+0x3fe>
 801c216:	464b      	mov	r3, r9
 801c218:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801c21c:	e6df      	b.n	801bfde <_printf_float+0x1de>
 801c21e:	f04f 0800 	mov.w	r8, #0
 801c222:	f104 0b1a 	add.w	fp, r4, #26
 801c226:	e7f4      	b.n	801c212 <_printf_float+0x412>
 801c228:	2301      	movs	r3, #1
 801c22a:	4642      	mov	r2, r8
 801c22c:	e7e1      	b.n	801c1f2 <_printf_float+0x3f2>
 801c22e:	2301      	movs	r3, #1
 801c230:	464a      	mov	r2, r9
 801c232:	4631      	mov	r1, r6
 801c234:	4628      	mov	r0, r5
 801c236:	47b8      	blx	r7
 801c238:	3001      	adds	r0, #1
 801c23a:	f43f ae3c 	beq.w	801beb6 <_printf_float+0xb6>
 801c23e:	f108 0801 	add.w	r8, r8, #1
 801c242:	68e3      	ldr	r3, [r4, #12]
 801c244:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801c246:	1a5b      	subs	r3, r3, r1
 801c248:	4543      	cmp	r3, r8
 801c24a:	dcf0      	bgt.n	801c22e <_printf_float+0x42e>
 801c24c:	e6fc      	b.n	801c048 <_printf_float+0x248>
 801c24e:	f04f 0800 	mov.w	r8, #0
 801c252:	f104 0919 	add.w	r9, r4, #25
 801c256:	e7f4      	b.n	801c242 <_printf_float+0x442>

0801c258 <_printf_common>:
 801c258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c25c:	4616      	mov	r6, r2
 801c25e:	4698      	mov	r8, r3
 801c260:	688a      	ldr	r2, [r1, #8]
 801c262:	690b      	ldr	r3, [r1, #16]
 801c264:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801c268:	4293      	cmp	r3, r2
 801c26a:	bfb8      	it	lt
 801c26c:	4613      	movlt	r3, r2
 801c26e:	6033      	str	r3, [r6, #0]
 801c270:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801c274:	4607      	mov	r7, r0
 801c276:	460c      	mov	r4, r1
 801c278:	b10a      	cbz	r2, 801c27e <_printf_common+0x26>
 801c27a:	3301      	adds	r3, #1
 801c27c:	6033      	str	r3, [r6, #0]
 801c27e:	6823      	ldr	r3, [r4, #0]
 801c280:	0699      	lsls	r1, r3, #26
 801c282:	bf42      	ittt	mi
 801c284:	6833      	ldrmi	r3, [r6, #0]
 801c286:	3302      	addmi	r3, #2
 801c288:	6033      	strmi	r3, [r6, #0]
 801c28a:	6825      	ldr	r5, [r4, #0]
 801c28c:	f015 0506 	ands.w	r5, r5, #6
 801c290:	d106      	bne.n	801c2a0 <_printf_common+0x48>
 801c292:	f104 0a19 	add.w	sl, r4, #25
 801c296:	68e3      	ldr	r3, [r4, #12]
 801c298:	6832      	ldr	r2, [r6, #0]
 801c29a:	1a9b      	subs	r3, r3, r2
 801c29c:	42ab      	cmp	r3, r5
 801c29e:	dc26      	bgt.n	801c2ee <_printf_common+0x96>
 801c2a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801c2a4:	6822      	ldr	r2, [r4, #0]
 801c2a6:	3b00      	subs	r3, #0
 801c2a8:	bf18      	it	ne
 801c2aa:	2301      	movne	r3, #1
 801c2ac:	0692      	lsls	r2, r2, #26
 801c2ae:	d42b      	bmi.n	801c308 <_printf_common+0xb0>
 801c2b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801c2b4:	4641      	mov	r1, r8
 801c2b6:	4638      	mov	r0, r7
 801c2b8:	47c8      	blx	r9
 801c2ba:	3001      	adds	r0, #1
 801c2bc:	d01e      	beq.n	801c2fc <_printf_common+0xa4>
 801c2be:	6823      	ldr	r3, [r4, #0]
 801c2c0:	6922      	ldr	r2, [r4, #16]
 801c2c2:	f003 0306 	and.w	r3, r3, #6
 801c2c6:	2b04      	cmp	r3, #4
 801c2c8:	bf02      	ittt	eq
 801c2ca:	68e5      	ldreq	r5, [r4, #12]
 801c2cc:	6833      	ldreq	r3, [r6, #0]
 801c2ce:	1aed      	subeq	r5, r5, r3
 801c2d0:	68a3      	ldr	r3, [r4, #8]
 801c2d2:	bf0c      	ite	eq
 801c2d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801c2d8:	2500      	movne	r5, #0
 801c2da:	4293      	cmp	r3, r2
 801c2dc:	bfc4      	itt	gt
 801c2de:	1a9b      	subgt	r3, r3, r2
 801c2e0:	18ed      	addgt	r5, r5, r3
 801c2e2:	2600      	movs	r6, #0
 801c2e4:	341a      	adds	r4, #26
 801c2e6:	42b5      	cmp	r5, r6
 801c2e8:	d11a      	bne.n	801c320 <_printf_common+0xc8>
 801c2ea:	2000      	movs	r0, #0
 801c2ec:	e008      	b.n	801c300 <_printf_common+0xa8>
 801c2ee:	2301      	movs	r3, #1
 801c2f0:	4652      	mov	r2, sl
 801c2f2:	4641      	mov	r1, r8
 801c2f4:	4638      	mov	r0, r7
 801c2f6:	47c8      	blx	r9
 801c2f8:	3001      	adds	r0, #1
 801c2fa:	d103      	bne.n	801c304 <_printf_common+0xac>
 801c2fc:	f04f 30ff 	mov.w	r0, #4294967295
 801c300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c304:	3501      	adds	r5, #1
 801c306:	e7c6      	b.n	801c296 <_printf_common+0x3e>
 801c308:	18e1      	adds	r1, r4, r3
 801c30a:	1c5a      	adds	r2, r3, #1
 801c30c:	2030      	movs	r0, #48	@ 0x30
 801c30e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801c312:	4422      	add	r2, r4
 801c314:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801c318:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801c31c:	3302      	adds	r3, #2
 801c31e:	e7c7      	b.n	801c2b0 <_printf_common+0x58>
 801c320:	2301      	movs	r3, #1
 801c322:	4622      	mov	r2, r4
 801c324:	4641      	mov	r1, r8
 801c326:	4638      	mov	r0, r7
 801c328:	47c8      	blx	r9
 801c32a:	3001      	adds	r0, #1
 801c32c:	d0e6      	beq.n	801c2fc <_printf_common+0xa4>
 801c32e:	3601      	adds	r6, #1
 801c330:	e7d9      	b.n	801c2e6 <_printf_common+0x8e>
	...

0801c334 <_printf_i>:
 801c334:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c338:	7e0f      	ldrb	r7, [r1, #24]
 801c33a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801c33c:	2f78      	cmp	r7, #120	@ 0x78
 801c33e:	4691      	mov	r9, r2
 801c340:	4680      	mov	r8, r0
 801c342:	460c      	mov	r4, r1
 801c344:	469a      	mov	sl, r3
 801c346:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801c34a:	d807      	bhi.n	801c35c <_printf_i+0x28>
 801c34c:	2f62      	cmp	r7, #98	@ 0x62
 801c34e:	d80a      	bhi.n	801c366 <_printf_i+0x32>
 801c350:	2f00      	cmp	r7, #0
 801c352:	f000 80d1 	beq.w	801c4f8 <_printf_i+0x1c4>
 801c356:	2f58      	cmp	r7, #88	@ 0x58
 801c358:	f000 80b8 	beq.w	801c4cc <_printf_i+0x198>
 801c35c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801c360:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801c364:	e03a      	b.n	801c3dc <_printf_i+0xa8>
 801c366:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801c36a:	2b15      	cmp	r3, #21
 801c36c:	d8f6      	bhi.n	801c35c <_printf_i+0x28>
 801c36e:	a101      	add	r1, pc, #4	@ (adr r1, 801c374 <_printf_i+0x40>)
 801c370:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801c374:	0801c3cd 	.word	0x0801c3cd
 801c378:	0801c3e1 	.word	0x0801c3e1
 801c37c:	0801c35d 	.word	0x0801c35d
 801c380:	0801c35d 	.word	0x0801c35d
 801c384:	0801c35d 	.word	0x0801c35d
 801c388:	0801c35d 	.word	0x0801c35d
 801c38c:	0801c3e1 	.word	0x0801c3e1
 801c390:	0801c35d 	.word	0x0801c35d
 801c394:	0801c35d 	.word	0x0801c35d
 801c398:	0801c35d 	.word	0x0801c35d
 801c39c:	0801c35d 	.word	0x0801c35d
 801c3a0:	0801c4df 	.word	0x0801c4df
 801c3a4:	0801c40b 	.word	0x0801c40b
 801c3a8:	0801c499 	.word	0x0801c499
 801c3ac:	0801c35d 	.word	0x0801c35d
 801c3b0:	0801c35d 	.word	0x0801c35d
 801c3b4:	0801c501 	.word	0x0801c501
 801c3b8:	0801c35d 	.word	0x0801c35d
 801c3bc:	0801c40b 	.word	0x0801c40b
 801c3c0:	0801c35d 	.word	0x0801c35d
 801c3c4:	0801c35d 	.word	0x0801c35d
 801c3c8:	0801c4a1 	.word	0x0801c4a1
 801c3cc:	6833      	ldr	r3, [r6, #0]
 801c3ce:	1d1a      	adds	r2, r3, #4
 801c3d0:	681b      	ldr	r3, [r3, #0]
 801c3d2:	6032      	str	r2, [r6, #0]
 801c3d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801c3d8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801c3dc:	2301      	movs	r3, #1
 801c3de:	e09c      	b.n	801c51a <_printf_i+0x1e6>
 801c3e0:	6833      	ldr	r3, [r6, #0]
 801c3e2:	6820      	ldr	r0, [r4, #0]
 801c3e4:	1d19      	adds	r1, r3, #4
 801c3e6:	6031      	str	r1, [r6, #0]
 801c3e8:	0606      	lsls	r6, r0, #24
 801c3ea:	d501      	bpl.n	801c3f0 <_printf_i+0xbc>
 801c3ec:	681d      	ldr	r5, [r3, #0]
 801c3ee:	e003      	b.n	801c3f8 <_printf_i+0xc4>
 801c3f0:	0645      	lsls	r5, r0, #25
 801c3f2:	d5fb      	bpl.n	801c3ec <_printf_i+0xb8>
 801c3f4:	f9b3 5000 	ldrsh.w	r5, [r3]
 801c3f8:	2d00      	cmp	r5, #0
 801c3fa:	da03      	bge.n	801c404 <_printf_i+0xd0>
 801c3fc:	232d      	movs	r3, #45	@ 0x2d
 801c3fe:	426d      	negs	r5, r5
 801c400:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801c404:	4858      	ldr	r0, [pc, #352]	@ (801c568 <_printf_i+0x234>)
 801c406:	230a      	movs	r3, #10
 801c408:	e011      	b.n	801c42e <_printf_i+0xfa>
 801c40a:	6821      	ldr	r1, [r4, #0]
 801c40c:	6833      	ldr	r3, [r6, #0]
 801c40e:	0608      	lsls	r0, r1, #24
 801c410:	f853 5b04 	ldr.w	r5, [r3], #4
 801c414:	d402      	bmi.n	801c41c <_printf_i+0xe8>
 801c416:	0649      	lsls	r1, r1, #25
 801c418:	bf48      	it	mi
 801c41a:	b2ad      	uxthmi	r5, r5
 801c41c:	2f6f      	cmp	r7, #111	@ 0x6f
 801c41e:	4852      	ldr	r0, [pc, #328]	@ (801c568 <_printf_i+0x234>)
 801c420:	6033      	str	r3, [r6, #0]
 801c422:	bf14      	ite	ne
 801c424:	230a      	movne	r3, #10
 801c426:	2308      	moveq	r3, #8
 801c428:	2100      	movs	r1, #0
 801c42a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801c42e:	6866      	ldr	r6, [r4, #4]
 801c430:	60a6      	str	r6, [r4, #8]
 801c432:	2e00      	cmp	r6, #0
 801c434:	db05      	blt.n	801c442 <_printf_i+0x10e>
 801c436:	6821      	ldr	r1, [r4, #0]
 801c438:	432e      	orrs	r6, r5
 801c43a:	f021 0104 	bic.w	r1, r1, #4
 801c43e:	6021      	str	r1, [r4, #0]
 801c440:	d04b      	beq.n	801c4da <_printf_i+0x1a6>
 801c442:	4616      	mov	r6, r2
 801c444:	fbb5 f1f3 	udiv	r1, r5, r3
 801c448:	fb03 5711 	mls	r7, r3, r1, r5
 801c44c:	5dc7      	ldrb	r7, [r0, r7]
 801c44e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801c452:	462f      	mov	r7, r5
 801c454:	42bb      	cmp	r3, r7
 801c456:	460d      	mov	r5, r1
 801c458:	d9f4      	bls.n	801c444 <_printf_i+0x110>
 801c45a:	2b08      	cmp	r3, #8
 801c45c:	d10b      	bne.n	801c476 <_printf_i+0x142>
 801c45e:	6823      	ldr	r3, [r4, #0]
 801c460:	07df      	lsls	r7, r3, #31
 801c462:	d508      	bpl.n	801c476 <_printf_i+0x142>
 801c464:	6923      	ldr	r3, [r4, #16]
 801c466:	6861      	ldr	r1, [r4, #4]
 801c468:	4299      	cmp	r1, r3
 801c46a:	bfde      	ittt	le
 801c46c:	2330      	movle	r3, #48	@ 0x30
 801c46e:	f806 3c01 	strble.w	r3, [r6, #-1]
 801c472:	f106 36ff 	addle.w	r6, r6, #4294967295
 801c476:	1b92      	subs	r2, r2, r6
 801c478:	6122      	str	r2, [r4, #16]
 801c47a:	f8cd a000 	str.w	sl, [sp]
 801c47e:	464b      	mov	r3, r9
 801c480:	aa03      	add	r2, sp, #12
 801c482:	4621      	mov	r1, r4
 801c484:	4640      	mov	r0, r8
 801c486:	f7ff fee7 	bl	801c258 <_printf_common>
 801c48a:	3001      	adds	r0, #1
 801c48c:	d14a      	bne.n	801c524 <_printf_i+0x1f0>
 801c48e:	f04f 30ff 	mov.w	r0, #4294967295
 801c492:	b004      	add	sp, #16
 801c494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c498:	6823      	ldr	r3, [r4, #0]
 801c49a:	f043 0320 	orr.w	r3, r3, #32
 801c49e:	6023      	str	r3, [r4, #0]
 801c4a0:	4832      	ldr	r0, [pc, #200]	@ (801c56c <_printf_i+0x238>)
 801c4a2:	2778      	movs	r7, #120	@ 0x78
 801c4a4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801c4a8:	6823      	ldr	r3, [r4, #0]
 801c4aa:	6831      	ldr	r1, [r6, #0]
 801c4ac:	061f      	lsls	r7, r3, #24
 801c4ae:	f851 5b04 	ldr.w	r5, [r1], #4
 801c4b2:	d402      	bmi.n	801c4ba <_printf_i+0x186>
 801c4b4:	065f      	lsls	r7, r3, #25
 801c4b6:	bf48      	it	mi
 801c4b8:	b2ad      	uxthmi	r5, r5
 801c4ba:	6031      	str	r1, [r6, #0]
 801c4bc:	07d9      	lsls	r1, r3, #31
 801c4be:	bf44      	itt	mi
 801c4c0:	f043 0320 	orrmi.w	r3, r3, #32
 801c4c4:	6023      	strmi	r3, [r4, #0]
 801c4c6:	b11d      	cbz	r5, 801c4d0 <_printf_i+0x19c>
 801c4c8:	2310      	movs	r3, #16
 801c4ca:	e7ad      	b.n	801c428 <_printf_i+0xf4>
 801c4cc:	4826      	ldr	r0, [pc, #152]	@ (801c568 <_printf_i+0x234>)
 801c4ce:	e7e9      	b.n	801c4a4 <_printf_i+0x170>
 801c4d0:	6823      	ldr	r3, [r4, #0]
 801c4d2:	f023 0320 	bic.w	r3, r3, #32
 801c4d6:	6023      	str	r3, [r4, #0]
 801c4d8:	e7f6      	b.n	801c4c8 <_printf_i+0x194>
 801c4da:	4616      	mov	r6, r2
 801c4dc:	e7bd      	b.n	801c45a <_printf_i+0x126>
 801c4de:	6833      	ldr	r3, [r6, #0]
 801c4e0:	6825      	ldr	r5, [r4, #0]
 801c4e2:	6961      	ldr	r1, [r4, #20]
 801c4e4:	1d18      	adds	r0, r3, #4
 801c4e6:	6030      	str	r0, [r6, #0]
 801c4e8:	062e      	lsls	r6, r5, #24
 801c4ea:	681b      	ldr	r3, [r3, #0]
 801c4ec:	d501      	bpl.n	801c4f2 <_printf_i+0x1be>
 801c4ee:	6019      	str	r1, [r3, #0]
 801c4f0:	e002      	b.n	801c4f8 <_printf_i+0x1c4>
 801c4f2:	0668      	lsls	r0, r5, #25
 801c4f4:	d5fb      	bpl.n	801c4ee <_printf_i+0x1ba>
 801c4f6:	8019      	strh	r1, [r3, #0]
 801c4f8:	2300      	movs	r3, #0
 801c4fa:	6123      	str	r3, [r4, #16]
 801c4fc:	4616      	mov	r6, r2
 801c4fe:	e7bc      	b.n	801c47a <_printf_i+0x146>
 801c500:	6833      	ldr	r3, [r6, #0]
 801c502:	1d1a      	adds	r2, r3, #4
 801c504:	6032      	str	r2, [r6, #0]
 801c506:	681e      	ldr	r6, [r3, #0]
 801c508:	6862      	ldr	r2, [r4, #4]
 801c50a:	2100      	movs	r1, #0
 801c50c:	4630      	mov	r0, r6
 801c50e:	f7e3 fe37 	bl	8000180 <memchr>
 801c512:	b108      	cbz	r0, 801c518 <_printf_i+0x1e4>
 801c514:	1b80      	subs	r0, r0, r6
 801c516:	6060      	str	r0, [r4, #4]
 801c518:	6863      	ldr	r3, [r4, #4]
 801c51a:	6123      	str	r3, [r4, #16]
 801c51c:	2300      	movs	r3, #0
 801c51e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801c522:	e7aa      	b.n	801c47a <_printf_i+0x146>
 801c524:	6923      	ldr	r3, [r4, #16]
 801c526:	4632      	mov	r2, r6
 801c528:	4649      	mov	r1, r9
 801c52a:	4640      	mov	r0, r8
 801c52c:	47d0      	blx	sl
 801c52e:	3001      	adds	r0, #1
 801c530:	d0ad      	beq.n	801c48e <_printf_i+0x15a>
 801c532:	6823      	ldr	r3, [r4, #0]
 801c534:	079b      	lsls	r3, r3, #30
 801c536:	d413      	bmi.n	801c560 <_printf_i+0x22c>
 801c538:	68e0      	ldr	r0, [r4, #12]
 801c53a:	9b03      	ldr	r3, [sp, #12]
 801c53c:	4298      	cmp	r0, r3
 801c53e:	bfb8      	it	lt
 801c540:	4618      	movlt	r0, r3
 801c542:	e7a6      	b.n	801c492 <_printf_i+0x15e>
 801c544:	2301      	movs	r3, #1
 801c546:	4632      	mov	r2, r6
 801c548:	4649      	mov	r1, r9
 801c54a:	4640      	mov	r0, r8
 801c54c:	47d0      	blx	sl
 801c54e:	3001      	adds	r0, #1
 801c550:	d09d      	beq.n	801c48e <_printf_i+0x15a>
 801c552:	3501      	adds	r5, #1
 801c554:	68e3      	ldr	r3, [r4, #12]
 801c556:	9903      	ldr	r1, [sp, #12]
 801c558:	1a5b      	subs	r3, r3, r1
 801c55a:	42ab      	cmp	r3, r5
 801c55c:	dcf2      	bgt.n	801c544 <_printf_i+0x210>
 801c55e:	e7eb      	b.n	801c538 <_printf_i+0x204>
 801c560:	2500      	movs	r5, #0
 801c562:	f104 0619 	add.w	r6, r4, #25
 801c566:	e7f5      	b.n	801c554 <_printf_i+0x220>
 801c568:	0801f7e6 	.word	0x0801f7e6
 801c56c:	0801f7f7 	.word	0x0801f7f7

0801c570 <std>:
 801c570:	2300      	movs	r3, #0
 801c572:	b510      	push	{r4, lr}
 801c574:	4604      	mov	r4, r0
 801c576:	e9c0 3300 	strd	r3, r3, [r0]
 801c57a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801c57e:	6083      	str	r3, [r0, #8]
 801c580:	8181      	strh	r1, [r0, #12]
 801c582:	6643      	str	r3, [r0, #100]	@ 0x64
 801c584:	81c2      	strh	r2, [r0, #14]
 801c586:	6183      	str	r3, [r0, #24]
 801c588:	4619      	mov	r1, r3
 801c58a:	2208      	movs	r2, #8
 801c58c:	305c      	adds	r0, #92	@ 0x5c
 801c58e:	f000 f8f4 	bl	801c77a <memset>
 801c592:	4b0d      	ldr	r3, [pc, #52]	@ (801c5c8 <std+0x58>)
 801c594:	6263      	str	r3, [r4, #36]	@ 0x24
 801c596:	4b0d      	ldr	r3, [pc, #52]	@ (801c5cc <std+0x5c>)
 801c598:	62a3      	str	r3, [r4, #40]	@ 0x28
 801c59a:	4b0d      	ldr	r3, [pc, #52]	@ (801c5d0 <std+0x60>)
 801c59c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801c59e:	4b0d      	ldr	r3, [pc, #52]	@ (801c5d4 <std+0x64>)
 801c5a0:	6323      	str	r3, [r4, #48]	@ 0x30
 801c5a2:	4b0d      	ldr	r3, [pc, #52]	@ (801c5d8 <std+0x68>)
 801c5a4:	6224      	str	r4, [r4, #32]
 801c5a6:	429c      	cmp	r4, r3
 801c5a8:	d006      	beq.n	801c5b8 <std+0x48>
 801c5aa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801c5ae:	4294      	cmp	r4, r2
 801c5b0:	d002      	beq.n	801c5b8 <std+0x48>
 801c5b2:	33d0      	adds	r3, #208	@ 0xd0
 801c5b4:	429c      	cmp	r4, r3
 801c5b6:	d105      	bne.n	801c5c4 <std+0x54>
 801c5b8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801c5bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c5c0:	f000 b958 	b.w	801c874 <__retarget_lock_init_recursive>
 801c5c4:	bd10      	pop	{r4, pc}
 801c5c6:	bf00      	nop
 801c5c8:	0801c6f5 	.word	0x0801c6f5
 801c5cc:	0801c717 	.word	0x0801c717
 801c5d0:	0801c74f 	.word	0x0801c74f
 801c5d4:	0801c773 	.word	0x0801c773
 801c5d8:	200023dc 	.word	0x200023dc

0801c5dc <stdio_exit_handler>:
 801c5dc:	4a02      	ldr	r2, [pc, #8]	@ (801c5e8 <stdio_exit_handler+0xc>)
 801c5de:	4903      	ldr	r1, [pc, #12]	@ (801c5ec <stdio_exit_handler+0x10>)
 801c5e0:	4803      	ldr	r0, [pc, #12]	@ (801c5f0 <stdio_exit_handler+0x14>)
 801c5e2:	f000 b869 	b.w	801c6b8 <_fwalk_sglue>
 801c5e6:	bf00      	nop
 801c5e8:	20000140 	.word	0x20000140
 801c5ec:	0801df21 	.word	0x0801df21
 801c5f0:	20000150 	.word	0x20000150

0801c5f4 <cleanup_stdio>:
 801c5f4:	6841      	ldr	r1, [r0, #4]
 801c5f6:	4b0c      	ldr	r3, [pc, #48]	@ (801c628 <cleanup_stdio+0x34>)
 801c5f8:	4299      	cmp	r1, r3
 801c5fa:	b510      	push	{r4, lr}
 801c5fc:	4604      	mov	r4, r0
 801c5fe:	d001      	beq.n	801c604 <cleanup_stdio+0x10>
 801c600:	f001 fc8e 	bl	801df20 <_fflush_r>
 801c604:	68a1      	ldr	r1, [r4, #8]
 801c606:	4b09      	ldr	r3, [pc, #36]	@ (801c62c <cleanup_stdio+0x38>)
 801c608:	4299      	cmp	r1, r3
 801c60a:	d002      	beq.n	801c612 <cleanup_stdio+0x1e>
 801c60c:	4620      	mov	r0, r4
 801c60e:	f001 fc87 	bl	801df20 <_fflush_r>
 801c612:	68e1      	ldr	r1, [r4, #12]
 801c614:	4b06      	ldr	r3, [pc, #24]	@ (801c630 <cleanup_stdio+0x3c>)
 801c616:	4299      	cmp	r1, r3
 801c618:	d004      	beq.n	801c624 <cleanup_stdio+0x30>
 801c61a:	4620      	mov	r0, r4
 801c61c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c620:	f001 bc7e 	b.w	801df20 <_fflush_r>
 801c624:	bd10      	pop	{r4, pc}
 801c626:	bf00      	nop
 801c628:	200023dc 	.word	0x200023dc
 801c62c:	20002444 	.word	0x20002444
 801c630:	200024ac 	.word	0x200024ac

0801c634 <global_stdio_init.part.0>:
 801c634:	b510      	push	{r4, lr}
 801c636:	4b0b      	ldr	r3, [pc, #44]	@ (801c664 <global_stdio_init.part.0+0x30>)
 801c638:	4c0b      	ldr	r4, [pc, #44]	@ (801c668 <global_stdio_init.part.0+0x34>)
 801c63a:	4a0c      	ldr	r2, [pc, #48]	@ (801c66c <global_stdio_init.part.0+0x38>)
 801c63c:	601a      	str	r2, [r3, #0]
 801c63e:	4620      	mov	r0, r4
 801c640:	2200      	movs	r2, #0
 801c642:	2104      	movs	r1, #4
 801c644:	f7ff ff94 	bl	801c570 <std>
 801c648:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801c64c:	2201      	movs	r2, #1
 801c64e:	2109      	movs	r1, #9
 801c650:	f7ff ff8e 	bl	801c570 <std>
 801c654:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801c658:	2202      	movs	r2, #2
 801c65a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c65e:	2112      	movs	r1, #18
 801c660:	f7ff bf86 	b.w	801c570 <std>
 801c664:	20002514 	.word	0x20002514
 801c668:	200023dc 	.word	0x200023dc
 801c66c:	0801c5dd 	.word	0x0801c5dd

0801c670 <__sfp_lock_acquire>:
 801c670:	4801      	ldr	r0, [pc, #4]	@ (801c678 <__sfp_lock_acquire+0x8>)
 801c672:	f000 b900 	b.w	801c876 <__retarget_lock_acquire_recursive>
 801c676:	bf00      	nop
 801c678:	2000251d 	.word	0x2000251d

0801c67c <__sfp_lock_release>:
 801c67c:	4801      	ldr	r0, [pc, #4]	@ (801c684 <__sfp_lock_release+0x8>)
 801c67e:	f000 b8fb 	b.w	801c878 <__retarget_lock_release_recursive>
 801c682:	bf00      	nop
 801c684:	2000251d 	.word	0x2000251d

0801c688 <__sinit>:
 801c688:	b510      	push	{r4, lr}
 801c68a:	4604      	mov	r4, r0
 801c68c:	f7ff fff0 	bl	801c670 <__sfp_lock_acquire>
 801c690:	6a23      	ldr	r3, [r4, #32]
 801c692:	b11b      	cbz	r3, 801c69c <__sinit+0x14>
 801c694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c698:	f7ff bff0 	b.w	801c67c <__sfp_lock_release>
 801c69c:	4b04      	ldr	r3, [pc, #16]	@ (801c6b0 <__sinit+0x28>)
 801c69e:	6223      	str	r3, [r4, #32]
 801c6a0:	4b04      	ldr	r3, [pc, #16]	@ (801c6b4 <__sinit+0x2c>)
 801c6a2:	681b      	ldr	r3, [r3, #0]
 801c6a4:	2b00      	cmp	r3, #0
 801c6a6:	d1f5      	bne.n	801c694 <__sinit+0xc>
 801c6a8:	f7ff ffc4 	bl	801c634 <global_stdio_init.part.0>
 801c6ac:	e7f2      	b.n	801c694 <__sinit+0xc>
 801c6ae:	bf00      	nop
 801c6b0:	0801c5f5 	.word	0x0801c5f5
 801c6b4:	20002514 	.word	0x20002514

0801c6b8 <_fwalk_sglue>:
 801c6b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c6bc:	4607      	mov	r7, r0
 801c6be:	4688      	mov	r8, r1
 801c6c0:	4614      	mov	r4, r2
 801c6c2:	2600      	movs	r6, #0
 801c6c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801c6c8:	f1b9 0901 	subs.w	r9, r9, #1
 801c6cc:	d505      	bpl.n	801c6da <_fwalk_sglue+0x22>
 801c6ce:	6824      	ldr	r4, [r4, #0]
 801c6d0:	2c00      	cmp	r4, #0
 801c6d2:	d1f7      	bne.n	801c6c4 <_fwalk_sglue+0xc>
 801c6d4:	4630      	mov	r0, r6
 801c6d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c6da:	89ab      	ldrh	r3, [r5, #12]
 801c6dc:	2b01      	cmp	r3, #1
 801c6de:	d907      	bls.n	801c6f0 <_fwalk_sglue+0x38>
 801c6e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801c6e4:	3301      	adds	r3, #1
 801c6e6:	d003      	beq.n	801c6f0 <_fwalk_sglue+0x38>
 801c6e8:	4629      	mov	r1, r5
 801c6ea:	4638      	mov	r0, r7
 801c6ec:	47c0      	blx	r8
 801c6ee:	4306      	orrs	r6, r0
 801c6f0:	3568      	adds	r5, #104	@ 0x68
 801c6f2:	e7e9      	b.n	801c6c8 <_fwalk_sglue+0x10>

0801c6f4 <__sread>:
 801c6f4:	b510      	push	{r4, lr}
 801c6f6:	460c      	mov	r4, r1
 801c6f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c6fc:	f000 f86c 	bl	801c7d8 <_read_r>
 801c700:	2800      	cmp	r0, #0
 801c702:	bfab      	itete	ge
 801c704:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801c706:	89a3      	ldrhlt	r3, [r4, #12]
 801c708:	181b      	addge	r3, r3, r0
 801c70a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801c70e:	bfac      	ite	ge
 801c710:	6563      	strge	r3, [r4, #84]	@ 0x54
 801c712:	81a3      	strhlt	r3, [r4, #12]
 801c714:	bd10      	pop	{r4, pc}

0801c716 <__swrite>:
 801c716:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c71a:	461f      	mov	r7, r3
 801c71c:	898b      	ldrh	r3, [r1, #12]
 801c71e:	05db      	lsls	r3, r3, #23
 801c720:	4605      	mov	r5, r0
 801c722:	460c      	mov	r4, r1
 801c724:	4616      	mov	r6, r2
 801c726:	d505      	bpl.n	801c734 <__swrite+0x1e>
 801c728:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c72c:	2302      	movs	r3, #2
 801c72e:	2200      	movs	r2, #0
 801c730:	f000 f840 	bl	801c7b4 <_lseek_r>
 801c734:	89a3      	ldrh	r3, [r4, #12]
 801c736:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c73a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801c73e:	81a3      	strh	r3, [r4, #12]
 801c740:	4632      	mov	r2, r6
 801c742:	463b      	mov	r3, r7
 801c744:	4628      	mov	r0, r5
 801c746:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c74a:	f000 b857 	b.w	801c7fc <_write_r>

0801c74e <__sseek>:
 801c74e:	b510      	push	{r4, lr}
 801c750:	460c      	mov	r4, r1
 801c752:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c756:	f000 f82d 	bl	801c7b4 <_lseek_r>
 801c75a:	1c43      	adds	r3, r0, #1
 801c75c:	89a3      	ldrh	r3, [r4, #12]
 801c75e:	bf15      	itete	ne
 801c760:	6560      	strne	r0, [r4, #84]	@ 0x54
 801c762:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801c766:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801c76a:	81a3      	strheq	r3, [r4, #12]
 801c76c:	bf18      	it	ne
 801c76e:	81a3      	strhne	r3, [r4, #12]
 801c770:	bd10      	pop	{r4, pc}

0801c772 <__sclose>:
 801c772:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c776:	f000 b80d 	b.w	801c794 <_close_r>

0801c77a <memset>:
 801c77a:	4402      	add	r2, r0
 801c77c:	4603      	mov	r3, r0
 801c77e:	4293      	cmp	r3, r2
 801c780:	d100      	bne.n	801c784 <memset+0xa>
 801c782:	4770      	bx	lr
 801c784:	f803 1b01 	strb.w	r1, [r3], #1
 801c788:	e7f9      	b.n	801c77e <memset+0x4>
	...

0801c78c <_localeconv_r>:
 801c78c:	4800      	ldr	r0, [pc, #0]	@ (801c790 <_localeconv_r+0x4>)
 801c78e:	4770      	bx	lr
 801c790:	2000028c 	.word	0x2000028c

0801c794 <_close_r>:
 801c794:	b538      	push	{r3, r4, r5, lr}
 801c796:	4d06      	ldr	r5, [pc, #24]	@ (801c7b0 <_close_r+0x1c>)
 801c798:	2300      	movs	r3, #0
 801c79a:	4604      	mov	r4, r0
 801c79c:	4608      	mov	r0, r1
 801c79e:	602b      	str	r3, [r5, #0]
 801c7a0:	f7e5 fe34 	bl	800240c <_close>
 801c7a4:	1c43      	adds	r3, r0, #1
 801c7a6:	d102      	bne.n	801c7ae <_close_r+0x1a>
 801c7a8:	682b      	ldr	r3, [r5, #0]
 801c7aa:	b103      	cbz	r3, 801c7ae <_close_r+0x1a>
 801c7ac:	6023      	str	r3, [r4, #0]
 801c7ae:	bd38      	pop	{r3, r4, r5, pc}
 801c7b0:	20002518 	.word	0x20002518

0801c7b4 <_lseek_r>:
 801c7b4:	b538      	push	{r3, r4, r5, lr}
 801c7b6:	4d07      	ldr	r5, [pc, #28]	@ (801c7d4 <_lseek_r+0x20>)
 801c7b8:	4604      	mov	r4, r0
 801c7ba:	4608      	mov	r0, r1
 801c7bc:	4611      	mov	r1, r2
 801c7be:	2200      	movs	r2, #0
 801c7c0:	602a      	str	r2, [r5, #0]
 801c7c2:	461a      	mov	r2, r3
 801c7c4:	f7e5 fe46 	bl	8002454 <_lseek>
 801c7c8:	1c43      	adds	r3, r0, #1
 801c7ca:	d102      	bne.n	801c7d2 <_lseek_r+0x1e>
 801c7cc:	682b      	ldr	r3, [r5, #0]
 801c7ce:	b103      	cbz	r3, 801c7d2 <_lseek_r+0x1e>
 801c7d0:	6023      	str	r3, [r4, #0]
 801c7d2:	bd38      	pop	{r3, r4, r5, pc}
 801c7d4:	20002518 	.word	0x20002518

0801c7d8 <_read_r>:
 801c7d8:	b538      	push	{r3, r4, r5, lr}
 801c7da:	4d07      	ldr	r5, [pc, #28]	@ (801c7f8 <_read_r+0x20>)
 801c7dc:	4604      	mov	r4, r0
 801c7de:	4608      	mov	r0, r1
 801c7e0:	4611      	mov	r1, r2
 801c7e2:	2200      	movs	r2, #0
 801c7e4:	602a      	str	r2, [r5, #0]
 801c7e6:	461a      	mov	r2, r3
 801c7e8:	f7e5 fdd7 	bl	800239a <_read>
 801c7ec:	1c43      	adds	r3, r0, #1
 801c7ee:	d102      	bne.n	801c7f6 <_read_r+0x1e>
 801c7f0:	682b      	ldr	r3, [r5, #0]
 801c7f2:	b103      	cbz	r3, 801c7f6 <_read_r+0x1e>
 801c7f4:	6023      	str	r3, [r4, #0]
 801c7f6:	bd38      	pop	{r3, r4, r5, pc}
 801c7f8:	20002518 	.word	0x20002518

0801c7fc <_write_r>:
 801c7fc:	b538      	push	{r3, r4, r5, lr}
 801c7fe:	4d07      	ldr	r5, [pc, #28]	@ (801c81c <_write_r+0x20>)
 801c800:	4604      	mov	r4, r0
 801c802:	4608      	mov	r0, r1
 801c804:	4611      	mov	r1, r2
 801c806:	2200      	movs	r2, #0
 801c808:	602a      	str	r2, [r5, #0]
 801c80a:	461a      	mov	r2, r3
 801c80c:	f7e5 fde2 	bl	80023d4 <_write>
 801c810:	1c43      	adds	r3, r0, #1
 801c812:	d102      	bne.n	801c81a <_write_r+0x1e>
 801c814:	682b      	ldr	r3, [r5, #0]
 801c816:	b103      	cbz	r3, 801c81a <_write_r+0x1e>
 801c818:	6023      	str	r3, [r4, #0]
 801c81a:	bd38      	pop	{r3, r4, r5, pc}
 801c81c:	20002518 	.word	0x20002518

0801c820 <__errno>:
 801c820:	4b01      	ldr	r3, [pc, #4]	@ (801c828 <__errno+0x8>)
 801c822:	6818      	ldr	r0, [r3, #0]
 801c824:	4770      	bx	lr
 801c826:	bf00      	nop
 801c828:	2000014c 	.word	0x2000014c

0801c82c <__libc_init_array>:
 801c82c:	b570      	push	{r4, r5, r6, lr}
 801c82e:	4d0d      	ldr	r5, [pc, #52]	@ (801c864 <__libc_init_array+0x38>)
 801c830:	4c0d      	ldr	r4, [pc, #52]	@ (801c868 <__libc_init_array+0x3c>)
 801c832:	1b64      	subs	r4, r4, r5
 801c834:	10a4      	asrs	r4, r4, #2
 801c836:	2600      	movs	r6, #0
 801c838:	42a6      	cmp	r6, r4
 801c83a:	d109      	bne.n	801c850 <__libc_init_array+0x24>
 801c83c:	4d0b      	ldr	r5, [pc, #44]	@ (801c86c <__libc_init_array+0x40>)
 801c83e:	4c0c      	ldr	r4, [pc, #48]	@ (801c870 <__libc_init_array+0x44>)
 801c840:	f001 ff3a 	bl	801e6b8 <_init>
 801c844:	1b64      	subs	r4, r4, r5
 801c846:	10a4      	asrs	r4, r4, #2
 801c848:	2600      	movs	r6, #0
 801c84a:	42a6      	cmp	r6, r4
 801c84c:	d105      	bne.n	801c85a <__libc_init_array+0x2e>
 801c84e:	bd70      	pop	{r4, r5, r6, pc}
 801c850:	f855 3b04 	ldr.w	r3, [r5], #4
 801c854:	4798      	blx	r3
 801c856:	3601      	adds	r6, #1
 801c858:	e7ee      	b.n	801c838 <__libc_init_array+0xc>
 801c85a:	f855 3b04 	ldr.w	r3, [r5], #4
 801c85e:	4798      	blx	r3
 801c860:	3601      	adds	r6, #1
 801c862:	e7f2      	b.n	801c84a <__libc_init_array+0x1e>
 801c864:	0801fc14 	.word	0x0801fc14
 801c868:	0801fc14 	.word	0x0801fc14
 801c86c:	0801fc14 	.word	0x0801fc14
 801c870:	0801fc18 	.word	0x0801fc18

0801c874 <__retarget_lock_init_recursive>:
 801c874:	4770      	bx	lr

0801c876 <__retarget_lock_acquire_recursive>:
 801c876:	4770      	bx	lr

0801c878 <__retarget_lock_release_recursive>:
 801c878:	4770      	bx	lr

0801c87a <quorem>:
 801c87a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c87e:	6903      	ldr	r3, [r0, #16]
 801c880:	690c      	ldr	r4, [r1, #16]
 801c882:	42a3      	cmp	r3, r4
 801c884:	4607      	mov	r7, r0
 801c886:	db7e      	blt.n	801c986 <quorem+0x10c>
 801c888:	3c01      	subs	r4, #1
 801c88a:	f101 0814 	add.w	r8, r1, #20
 801c88e:	00a3      	lsls	r3, r4, #2
 801c890:	f100 0514 	add.w	r5, r0, #20
 801c894:	9300      	str	r3, [sp, #0]
 801c896:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801c89a:	9301      	str	r3, [sp, #4]
 801c89c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801c8a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801c8a4:	3301      	adds	r3, #1
 801c8a6:	429a      	cmp	r2, r3
 801c8a8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801c8ac:	fbb2 f6f3 	udiv	r6, r2, r3
 801c8b0:	d32e      	bcc.n	801c910 <quorem+0x96>
 801c8b2:	f04f 0a00 	mov.w	sl, #0
 801c8b6:	46c4      	mov	ip, r8
 801c8b8:	46ae      	mov	lr, r5
 801c8ba:	46d3      	mov	fp, sl
 801c8bc:	f85c 3b04 	ldr.w	r3, [ip], #4
 801c8c0:	b298      	uxth	r0, r3
 801c8c2:	fb06 a000 	mla	r0, r6, r0, sl
 801c8c6:	0c02      	lsrs	r2, r0, #16
 801c8c8:	0c1b      	lsrs	r3, r3, #16
 801c8ca:	fb06 2303 	mla	r3, r6, r3, r2
 801c8ce:	f8de 2000 	ldr.w	r2, [lr]
 801c8d2:	b280      	uxth	r0, r0
 801c8d4:	b292      	uxth	r2, r2
 801c8d6:	1a12      	subs	r2, r2, r0
 801c8d8:	445a      	add	r2, fp
 801c8da:	f8de 0000 	ldr.w	r0, [lr]
 801c8de:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801c8e2:	b29b      	uxth	r3, r3
 801c8e4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801c8e8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801c8ec:	b292      	uxth	r2, r2
 801c8ee:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801c8f2:	45e1      	cmp	r9, ip
 801c8f4:	f84e 2b04 	str.w	r2, [lr], #4
 801c8f8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801c8fc:	d2de      	bcs.n	801c8bc <quorem+0x42>
 801c8fe:	9b00      	ldr	r3, [sp, #0]
 801c900:	58eb      	ldr	r3, [r5, r3]
 801c902:	b92b      	cbnz	r3, 801c910 <quorem+0x96>
 801c904:	9b01      	ldr	r3, [sp, #4]
 801c906:	3b04      	subs	r3, #4
 801c908:	429d      	cmp	r5, r3
 801c90a:	461a      	mov	r2, r3
 801c90c:	d32f      	bcc.n	801c96e <quorem+0xf4>
 801c90e:	613c      	str	r4, [r7, #16]
 801c910:	4638      	mov	r0, r7
 801c912:	f001 f97f 	bl	801dc14 <__mcmp>
 801c916:	2800      	cmp	r0, #0
 801c918:	db25      	blt.n	801c966 <quorem+0xec>
 801c91a:	4629      	mov	r1, r5
 801c91c:	2000      	movs	r0, #0
 801c91e:	f858 2b04 	ldr.w	r2, [r8], #4
 801c922:	f8d1 c000 	ldr.w	ip, [r1]
 801c926:	fa1f fe82 	uxth.w	lr, r2
 801c92a:	fa1f f38c 	uxth.w	r3, ip
 801c92e:	eba3 030e 	sub.w	r3, r3, lr
 801c932:	4403      	add	r3, r0
 801c934:	0c12      	lsrs	r2, r2, #16
 801c936:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801c93a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801c93e:	b29b      	uxth	r3, r3
 801c940:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c944:	45c1      	cmp	r9, r8
 801c946:	f841 3b04 	str.w	r3, [r1], #4
 801c94a:	ea4f 4022 	mov.w	r0, r2, asr #16
 801c94e:	d2e6      	bcs.n	801c91e <quorem+0xa4>
 801c950:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801c954:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801c958:	b922      	cbnz	r2, 801c964 <quorem+0xea>
 801c95a:	3b04      	subs	r3, #4
 801c95c:	429d      	cmp	r5, r3
 801c95e:	461a      	mov	r2, r3
 801c960:	d30b      	bcc.n	801c97a <quorem+0x100>
 801c962:	613c      	str	r4, [r7, #16]
 801c964:	3601      	adds	r6, #1
 801c966:	4630      	mov	r0, r6
 801c968:	b003      	add	sp, #12
 801c96a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c96e:	6812      	ldr	r2, [r2, #0]
 801c970:	3b04      	subs	r3, #4
 801c972:	2a00      	cmp	r2, #0
 801c974:	d1cb      	bne.n	801c90e <quorem+0x94>
 801c976:	3c01      	subs	r4, #1
 801c978:	e7c6      	b.n	801c908 <quorem+0x8e>
 801c97a:	6812      	ldr	r2, [r2, #0]
 801c97c:	3b04      	subs	r3, #4
 801c97e:	2a00      	cmp	r2, #0
 801c980:	d1ef      	bne.n	801c962 <quorem+0xe8>
 801c982:	3c01      	subs	r4, #1
 801c984:	e7ea      	b.n	801c95c <quorem+0xe2>
 801c986:	2000      	movs	r0, #0
 801c988:	e7ee      	b.n	801c968 <quorem+0xee>
 801c98a:	0000      	movs	r0, r0
 801c98c:	0000      	movs	r0, r0
	...

0801c990 <_dtoa_r>:
 801c990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c994:	69c7      	ldr	r7, [r0, #28]
 801c996:	b097      	sub	sp, #92	@ 0x5c
 801c998:	4614      	mov	r4, r2
 801c99a:	461d      	mov	r5, r3
 801c99c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801c9a0:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 801c9a2:	4681      	mov	r9, r0
 801c9a4:	b97f      	cbnz	r7, 801c9c6 <_dtoa_r+0x36>
 801c9a6:	2010      	movs	r0, #16
 801c9a8:	f000 fe0c 	bl	801d5c4 <malloc>
 801c9ac:	4602      	mov	r2, r0
 801c9ae:	f8c9 001c 	str.w	r0, [r9, #28]
 801c9b2:	b920      	cbnz	r0, 801c9be <_dtoa_r+0x2e>
 801c9b4:	4baa      	ldr	r3, [pc, #680]	@ (801cc60 <_dtoa_r+0x2d0>)
 801c9b6:	21ef      	movs	r1, #239	@ 0xef
 801c9b8:	48aa      	ldr	r0, [pc, #680]	@ (801cc64 <_dtoa_r+0x2d4>)
 801c9ba:	f001 faf7 	bl	801dfac <__assert_func>
 801c9be:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801c9c2:	6007      	str	r7, [r0, #0]
 801c9c4:	60c7      	str	r7, [r0, #12]
 801c9c6:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801c9ca:	6819      	ldr	r1, [r3, #0]
 801c9cc:	b159      	cbz	r1, 801c9e6 <_dtoa_r+0x56>
 801c9ce:	685a      	ldr	r2, [r3, #4]
 801c9d0:	604a      	str	r2, [r1, #4]
 801c9d2:	2301      	movs	r3, #1
 801c9d4:	4093      	lsls	r3, r2
 801c9d6:	608b      	str	r3, [r1, #8]
 801c9d8:	4648      	mov	r0, r9
 801c9da:	f000 fee9 	bl	801d7b0 <_Bfree>
 801c9de:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801c9e2:	2200      	movs	r2, #0
 801c9e4:	601a      	str	r2, [r3, #0]
 801c9e6:	1e2b      	subs	r3, r5, #0
 801c9e8:	bfb9      	ittee	lt
 801c9ea:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801c9ee:	9307      	strlt	r3, [sp, #28]
 801c9f0:	2300      	movge	r3, #0
 801c9f2:	6033      	strge	r3, [r6, #0]
 801c9f4:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801c9f8:	4b9b      	ldr	r3, [pc, #620]	@ (801cc68 <_dtoa_r+0x2d8>)
 801c9fa:	bfbc      	itt	lt
 801c9fc:	2201      	movlt	r2, #1
 801c9fe:	6032      	strlt	r2, [r6, #0]
 801ca00:	ea33 0308 	bics.w	r3, r3, r8
 801ca04:	d112      	bne.n	801ca2c <_dtoa_r+0x9c>
 801ca06:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801ca08:	f242 730f 	movw	r3, #9999	@ 0x270f
 801ca0c:	6013      	str	r3, [r2, #0]
 801ca0e:	f3c8 0313 	ubfx	r3, r8, #0, #20
 801ca12:	4323      	orrs	r3, r4
 801ca14:	f000 855b 	beq.w	801d4ce <_dtoa_r+0xb3e>
 801ca18:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801ca1a:	f8df a250 	ldr.w	sl, [pc, #592]	@ 801cc6c <_dtoa_r+0x2dc>
 801ca1e:	2b00      	cmp	r3, #0
 801ca20:	f000 855d 	beq.w	801d4de <_dtoa_r+0xb4e>
 801ca24:	f10a 0303 	add.w	r3, sl, #3
 801ca28:	f000 bd57 	b.w	801d4da <_dtoa_r+0xb4a>
 801ca2c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801ca30:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 801ca34:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801ca38:	2200      	movs	r2, #0
 801ca3a:	2300      	movs	r3, #0
 801ca3c:	f7e4 f81c 	bl	8000a78 <__aeabi_dcmpeq>
 801ca40:	4607      	mov	r7, r0
 801ca42:	b158      	cbz	r0, 801ca5c <_dtoa_r+0xcc>
 801ca44:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801ca46:	2301      	movs	r3, #1
 801ca48:	6013      	str	r3, [r2, #0]
 801ca4a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801ca4c:	b113      	cbz	r3, 801ca54 <_dtoa_r+0xc4>
 801ca4e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801ca50:	4b87      	ldr	r3, [pc, #540]	@ (801cc70 <_dtoa_r+0x2e0>)
 801ca52:	6013      	str	r3, [r2, #0]
 801ca54:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 801cc74 <_dtoa_r+0x2e4>
 801ca58:	f000 bd41 	b.w	801d4de <_dtoa_r+0xb4e>
 801ca5c:	ab14      	add	r3, sp, #80	@ 0x50
 801ca5e:	9301      	str	r3, [sp, #4]
 801ca60:	ab15      	add	r3, sp, #84	@ 0x54
 801ca62:	9300      	str	r3, [sp, #0]
 801ca64:	4648      	mov	r0, r9
 801ca66:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801ca6a:	f001 f981 	bl	801dd70 <__d2b>
 801ca6e:	f3c8 560a 	ubfx	r6, r8, #20, #11
 801ca72:	9003      	str	r0, [sp, #12]
 801ca74:	2e00      	cmp	r6, #0
 801ca76:	d077      	beq.n	801cb68 <_dtoa_r+0x1d8>
 801ca78:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ca7a:	9712      	str	r7, [sp, #72]	@ 0x48
 801ca7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801ca80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801ca84:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 801ca88:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801ca8c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 801ca90:	4619      	mov	r1, r3
 801ca92:	2200      	movs	r2, #0
 801ca94:	4b78      	ldr	r3, [pc, #480]	@ (801cc78 <_dtoa_r+0x2e8>)
 801ca96:	f7e3 fbcf 	bl	8000238 <__aeabi_dsub>
 801ca9a:	a36b      	add	r3, pc, #428	@ (adr r3, 801cc48 <_dtoa_r+0x2b8>)
 801ca9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801caa0:	f7e3 fd82 	bl	80005a8 <__aeabi_dmul>
 801caa4:	a36a      	add	r3, pc, #424	@ (adr r3, 801cc50 <_dtoa_r+0x2c0>)
 801caa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801caaa:	f7e3 fbc7 	bl	800023c <__adddf3>
 801caae:	4604      	mov	r4, r0
 801cab0:	4630      	mov	r0, r6
 801cab2:	460d      	mov	r5, r1
 801cab4:	f7e3 fd0e 	bl	80004d4 <__aeabi_i2d>
 801cab8:	a367      	add	r3, pc, #412	@ (adr r3, 801cc58 <_dtoa_r+0x2c8>)
 801caba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cabe:	f7e3 fd73 	bl	80005a8 <__aeabi_dmul>
 801cac2:	4602      	mov	r2, r0
 801cac4:	460b      	mov	r3, r1
 801cac6:	4620      	mov	r0, r4
 801cac8:	4629      	mov	r1, r5
 801caca:	f7e3 fbb7 	bl	800023c <__adddf3>
 801cace:	4604      	mov	r4, r0
 801cad0:	460d      	mov	r5, r1
 801cad2:	f7e4 f819 	bl	8000b08 <__aeabi_d2iz>
 801cad6:	2200      	movs	r2, #0
 801cad8:	4607      	mov	r7, r0
 801cada:	2300      	movs	r3, #0
 801cadc:	4620      	mov	r0, r4
 801cade:	4629      	mov	r1, r5
 801cae0:	f7e3 ffd4 	bl	8000a8c <__aeabi_dcmplt>
 801cae4:	b140      	cbz	r0, 801caf8 <_dtoa_r+0x168>
 801cae6:	4638      	mov	r0, r7
 801cae8:	f7e3 fcf4 	bl	80004d4 <__aeabi_i2d>
 801caec:	4622      	mov	r2, r4
 801caee:	462b      	mov	r3, r5
 801caf0:	f7e3 ffc2 	bl	8000a78 <__aeabi_dcmpeq>
 801caf4:	b900      	cbnz	r0, 801caf8 <_dtoa_r+0x168>
 801caf6:	3f01      	subs	r7, #1
 801caf8:	2f16      	cmp	r7, #22
 801cafa:	d853      	bhi.n	801cba4 <_dtoa_r+0x214>
 801cafc:	4b5f      	ldr	r3, [pc, #380]	@ (801cc7c <_dtoa_r+0x2ec>)
 801cafe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801cb02:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cb06:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801cb0a:	f7e3 ffbf 	bl	8000a8c <__aeabi_dcmplt>
 801cb0e:	2800      	cmp	r0, #0
 801cb10:	d04a      	beq.n	801cba8 <_dtoa_r+0x218>
 801cb12:	3f01      	subs	r7, #1
 801cb14:	2300      	movs	r3, #0
 801cb16:	930f      	str	r3, [sp, #60]	@ 0x3c
 801cb18:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801cb1a:	1b9b      	subs	r3, r3, r6
 801cb1c:	1e5a      	subs	r2, r3, #1
 801cb1e:	bf45      	ittet	mi
 801cb20:	f1c3 0301 	rsbmi	r3, r3, #1
 801cb24:	9304      	strmi	r3, [sp, #16]
 801cb26:	2300      	movpl	r3, #0
 801cb28:	2300      	movmi	r3, #0
 801cb2a:	9209      	str	r2, [sp, #36]	@ 0x24
 801cb2c:	bf54      	ite	pl
 801cb2e:	9304      	strpl	r3, [sp, #16]
 801cb30:	9309      	strmi	r3, [sp, #36]	@ 0x24
 801cb32:	2f00      	cmp	r7, #0
 801cb34:	db3a      	blt.n	801cbac <_dtoa_r+0x21c>
 801cb36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cb38:	970e      	str	r7, [sp, #56]	@ 0x38
 801cb3a:	443b      	add	r3, r7
 801cb3c:	9309      	str	r3, [sp, #36]	@ 0x24
 801cb3e:	2300      	movs	r3, #0
 801cb40:	930a      	str	r3, [sp, #40]	@ 0x28
 801cb42:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801cb44:	2b09      	cmp	r3, #9
 801cb46:	d864      	bhi.n	801cc12 <_dtoa_r+0x282>
 801cb48:	2b05      	cmp	r3, #5
 801cb4a:	bfc4      	itt	gt
 801cb4c:	3b04      	subgt	r3, #4
 801cb4e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 801cb50:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801cb52:	f1a3 0302 	sub.w	r3, r3, #2
 801cb56:	bfcc      	ite	gt
 801cb58:	2400      	movgt	r4, #0
 801cb5a:	2401      	movle	r4, #1
 801cb5c:	2b03      	cmp	r3, #3
 801cb5e:	d864      	bhi.n	801cc2a <_dtoa_r+0x29a>
 801cb60:	e8df f003 	tbb	[pc, r3]
 801cb64:	2c385553 	.word	0x2c385553
 801cb68:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 801cb6c:	441e      	add	r6, r3
 801cb6e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801cb72:	2b20      	cmp	r3, #32
 801cb74:	bfc1      	itttt	gt
 801cb76:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801cb7a:	fa08 f803 	lslgt.w	r8, r8, r3
 801cb7e:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801cb82:	fa24 f303 	lsrgt.w	r3, r4, r3
 801cb86:	bfd6      	itet	le
 801cb88:	f1c3 0320 	rsble	r3, r3, #32
 801cb8c:	ea48 0003 	orrgt.w	r0, r8, r3
 801cb90:	fa04 f003 	lslle.w	r0, r4, r3
 801cb94:	f7e3 fc8e 	bl	80004b4 <__aeabi_ui2d>
 801cb98:	2201      	movs	r2, #1
 801cb9a:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801cb9e:	3e01      	subs	r6, #1
 801cba0:	9212      	str	r2, [sp, #72]	@ 0x48
 801cba2:	e775      	b.n	801ca90 <_dtoa_r+0x100>
 801cba4:	2301      	movs	r3, #1
 801cba6:	e7b6      	b.n	801cb16 <_dtoa_r+0x186>
 801cba8:	900f      	str	r0, [sp, #60]	@ 0x3c
 801cbaa:	e7b5      	b.n	801cb18 <_dtoa_r+0x188>
 801cbac:	9b04      	ldr	r3, [sp, #16]
 801cbae:	1bdb      	subs	r3, r3, r7
 801cbb0:	9304      	str	r3, [sp, #16]
 801cbb2:	427b      	negs	r3, r7
 801cbb4:	930a      	str	r3, [sp, #40]	@ 0x28
 801cbb6:	2300      	movs	r3, #0
 801cbb8:	930e      	str	r3, [sp, #56]	@ 0x38
 801cbba:	e7c2      	b.n	801cb42 <_dtoa_r+0x1b2>
 801cbbc:	2301      	movs	r3, #1
 801cbbe:	930b      	str	r3, [sp, #44]	@ 0x2c
 801cbc0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801cbc2:	eb07 0b03 	add.w	fp, r7, r3
 801cbc6:	f10b 0301 	add.w	r3, fp, #1
 801cbca:	2b01      	cmp	r3, #1
 801cbcc:	9308      	str	r3, [sp, #32]
 801cbce:	bfb8      	it	lt
 801cbd0:	2301      	movlt	r3, #1
 801cbd2:	e006      	b.n	801cbe2 <_dtoa_r+0x252>
 801cbd4:	2301      	movs	r3, #1
 801cbd6:	930b      	str	r3, [sp, #44]	@ 0x2c
 801cbd8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801cbda:	2b00      	cmp	r3, #0
 801cbdc:	dd28      	ble.n	801cc30 <_dtoa_r+0x2a0>
 801cbde:	469b      	mov	fp, r3
 801cbe0:	9308      	str	r3, [sp, #32]
 801cbe2:	f8d9 001c 	ldr.w	r0, [r9, #28]
 801cbe6:	2100      	movs	r1, #0
 801cbe8:	2204      	movs	r2, #4
 801cbea:	f102 0514 	add.w	r5, r2, #20
 801cbee:	429d      	cmp	r5, r3
 801cbf0:	d926      	bls.n	801cc40 <_dtoa_r+0x2b0>
 801cbf2:	6041      	str	r1, [r0, #4]
 801cbf4:	4648      	mov	r0, r9
 801cbf6:	f000 fd9b 	bl	801d730 <_Balloc>
 801cbfa:	4682      	mov	sl, r0
 801cbfc:	2800      	cmp	r0, #0
 801cbfe:	d141      	bne.n	801cc84 <_dtoa_r+0x2f4>
 801cc00:	4b1f      	ldr	r3, [pc, #124]	@ (801cc80 <_dtoa_r+0x2f0>)
 801cc02:	4602      	mov	r2, r0
 801cc04:	f240 11af 	movw	r1, #431	@ 0x1af
 801cc08:	e6d6      	b.n	801c9b8 <_dtoa_r+0x28>
 801cc0a:	2300      	movs	r3, #0
 801cc0c:	e7e3      	b.n	801cbd6 <_dtoa_r+0x246>
 801cc0e:	2300      	movs	r3, #0
 801cc10:	e7d5      	b.n	801cbbe <_dtoa_r+0x22e>
 801cc12:	2401      	movs	r4, #1
 801cc14:	2300      	movs	r3, #0
 801cc16:	9320      	str	r3, [sp, #128]	@ 0x80
 801cc18:	940b      	str	r4, [sp, #44]	@ 0x2c
 801cc1a:	f04f 3bff 	mov.w	fp, #4294967295
 801cc1e:	2200      	movs	r2, #0
 801cc20:	f8cd b020 	str.w	fp, [sp, #32]
 801cc24:	2312      	movs	r3, #18
 801cc26:	9221      	str	r2, [sp, #132]	@ 0x84
 801cc28:	e7db      	b.n	801cbe2 <_dtoa_r+0x252>
 801cc2a:	2301      	movs	r3, #1
 801cc2c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801cc2e:	e7f4      	b.n	801cc1a <_dtoa_r+0x28a>
 801cc30:	f04f 0b01 	mov.w	fp, #1
 801cc34:	f8cd b020 	str.w	fp, [sp, #32]
 801cc38:	465b      	mov	r3, fp
 801cc3a:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 801cc3e:	e7d0      	b.n	801cbe2 <_dtoa_r+0x252>
 801cc40:	3101      	adds	r1, #1
 801cc42:	0052      	lsls	r2, r2, #1
 801cc44:	e7d1      	b.n	801cbea <_dtoa_r+0x25a>
 801cc46:	bf00      	nop
 801cc48:	636f4361 	.word	0x636f4361
 801cc4c:	3fd287a7 	.word	0x3fd287a7
 801cc50:	8b60c8b3 	.word	0x8b60c8b3
 801cc54:	3fc68a28 	.word	0x3fc68a28
 801cc58:	509f79fb 	.word	0x509f79fb
 801cc5c:	3fd34413 	.word	0x3fd34413
 801cc60:	0801f815 	.word	0x0801f815
 801cc64:	0801f82c 	.word	0x0801f82c
 801cc68:	7ff00000 	.word	0x7ff00000
 801cc6c:	0801f811 	.word	0x0801f811
 801cc70:	0801f7e5 	.word	0x0801f7e5
 801cc74:	0801f7e4 	.word	0x0801f7e4
 801cc78:	3ff80000 	.word	0x3ff80000
 801cc7c:	0801f980 	.word	0x0801f980
 801cc80:	0801f884 	.word	0x0801f884
 801cc84:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801cc88:	6018      	str	r0, [r3, #0]
 801cc8a:	9b08      	ldr	r3, [sp, #32]
 801cc8c:	2b0e      	cmp	r3, #14
 801cc8e:	f200 80a1 	bhi.w	801cdd4 <_dtoa_r+0x444>
 801cc92:	2c00      	cmp	r4, #0
 801cc94:	f000 809e 	beq.w	801cdd4 <_dtoa_r+0x444>
 801cc98:	2f00      	cmp	r7, #0
 801cc9a:	dd33      	ble.n	801cd04 <_dtoa_r+0x374>
 801cc9c:	4b9c      	ldr	r3, [pc, #624]	@ (801cf10 <_dtoa_r+0x580>)
 801cc9e:	f007 020f 	and.w	r2, r7, #15
 801cca2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801cca6:	e9d3 3400 	ldrd	r3, r4, [r3]
 801ccaa:	05f8      	lsls	r0, r7, #23
 801ccac:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 801ccb0:	ea4f 1427 	mov.w	r4, r7, asr #4
 801ccb4:	d516      	bpl.n	801cce4 <_dtoa_r+0x354>
 801ccb6:	4b97      	ldr	r3, [pc, #604]	@ (801cf14 <_dtoa_r+0x584>)
 801ccb8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801ccbc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801ccc0:	f7e3 fd9c 	bl	80007fc <__aeabi_ddiv>
 801ccc4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801ccc8:	f004 040f 	and.w	r4, r4, #15
 801cccc:	2603      	movs	r6, #3
 801ccce:	4d91      	ldr	r5, [pc, #580]	@ (801cf14 <_dtoa_r+0x584>)
 801ccd0:	b954      	cbnz	r4, 801cce8 <_dtoa_r+0x358>
 801ccd2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801ccd6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801ccda:	f7e3 fd8f 	bl	80007fc <__aeabi_ddiv>
 801ccde:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801cce2:	e028      	b.n	801cd36 <_dtoa_r+0x3a6>
 801cce4:	2602      	movs	r6, #2
 801cce6:	e7f2      	b.n	801ccce <_dtoa_r+0x33e>
 801cce8:	07e1      	lsls	r1, r4, #31
 801ccea:	d508      	bpl.n	801ccfe <_dtoa_r+0x36e>
 801ccec:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801ccf0:	e9d5 2300 	ldrd	r2, r3, [r5]
 801ccf4:	f7e3 fc58 	bl	80005a8 <__aeabi_dmul>
 801ccf8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801ccfc:	3601      	adds	r6, #1
 801ccfe:	1064      	asrs	r4, r4, #1
 801cd00:	3508      	adds	r5, #8
 801cd02:	e7e5      	b.n	801ccd0 <_dtoa_r+0x340>
 801cd04:	f000 80af 	beq.w	801ce66 <_dtoa_r+0x4d6>
 801cd08:	427c      	negs	r4, r7
 801cd0a:	4b81      	ldr	r3, [pc, #516]	@ (801cf10 <_dtoa_r+0x580>)
 801cd0c:	4d81      	ldr	r5, [pc, #516]	@ (801cf14 <_dtoa_r+0x584>)
 801cd0e:	f004 020f 	and.w	r2, r4, #15
 801cd12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801cd16:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cd1a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801cd1e:	f7e3 fc43 	bl	80005a8 <__aeabi_dmul>
 801cd22:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801cd26:	1124      	asrs	r4, r4, #4
 801cd28:	2300      	movs	r3, #0
 801cd2a:	2602      	movs	r6, #2
 801cd2c:	2c00      	cmp	r4, #0
 801cd2e:	f040 808f 	bne.w	801ce50 <_dtoa_r+0x4c0>
 801cd32:	2b00      	cmp	r3, #0
 801cd34:	d1d3      	bne.n	801ccde <_dtoa_r+0x34e>
 801cd36:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801cd38:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 801cd3c:	2b00      	cmp	r3, #0
 801cd3e:	f000 8094 	beq.w	801ce6a <_dtoa_r+0x4da>
 801cd42:	4b75      	ldr	r3, [pc, #468]	@ (801cf18 <_dtoa_r+0x588>)
 801cd44:	2200      	movs	r2, #0
 801cd46:	4620      	mov	r0, r4
 801cd48:	4629      	mov	r1, r5
 801cd4a:	f7e3 fe9f 	bl	8000a8c <__aeabi_dcmplt>
 801cd4e:	2800      	cmp	r0, #0
 801cd50:	f000 808b 	beq.w	801ce6a <_dtoa_r+0x4da>
 801cd54:	9b08      	ldr	r3, [sp, #32]
 801cd56:	2b00      	cmp	r3, #0
 801cd58:	f000 8087 	beq.w	801ce6a <_dtoa_r+0x4da>
 801cd5c:	f1bb 0f00 	cmp.w	fp, #0
 801cd60:	dd34      	ble.n	801cdcc <_dtoa_r+0x43c>
 801cd62:	4620      	mov	r0, r4
 801cd64:	4b6d      	ldr	r3, [pc, #436]	@ (801cf1c <_dtoa_r+0x58c>)
 801cd66:	2200      	movs	r2, #0
 801cd68:	4629      	mov	r1, r5
 801cd6a:	f7e3 fc1d 	bl	80005a8 <__aeabi_dmul>
 801cd6e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801cd72:	f107 38ff 	add.w	r8, r7, #4294967295
 801cd76:	3601      	adds	r6, #1
 801cd78:	465c      	mov	r4, fp
 801cd7a:	4630      	mov	r0, r6
 801cd7c:	f7e3 fbaa 	bl	80004d4 <__aeabi_i2d>
 801cd80:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801cd84:	f7e3 fc10 	bl	80005a8 <__aeabi_dmul>
 801cd88:	4b65      	ldr	r3, [pc, #404]	@ (801cf20 <_dtoa_r+0x590>)
 801cd8a:	2200      	movs	r2, #0
 801cd8c:	f7e3 fa56 	bl	800023c <__adddf3>
 801cd90:	4605      	mov	r5, r0
 801cd92:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801cd96:	2c00      	cmp	r4, #0
 801cd98:	d16a      	bne.n	801ce70 <_dtoa_r+0x4e0>
 801cd9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801cd9e:	4b61      	ldr	r3, [pc, #388]	@ (801cf24 <_dtoa_r+0x594>)
 801cda0:	2200      	movs	r2, #0
 801cda2:	f7e3 fa49 	bl	8000238 <__aeabi_dsub>
 801cda6:	4602      	mov	r2, r0
 801cda8:	460b      	mov	r3, r1
 801cdaa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801cdae:	462a      	mov	r2, r5
 801cdb0:	4633      	mov	r3, r6
 801cdb2:	f7e3 fe89 	bl	8000ac8 <__aeabi_dcmpgt>
 801cdb6:	2800      	cmp	r0, #0
 801cdb8:	f040 8298 	bne.w	801d2ec <_dtoa_r+0x95c>
 801cdbc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801cdc0:	462a      	mov	r2, r5
 801cdc2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801cdc6:	f7e3 fe61 	bl	8000a8c <__aeabi_dcmplt>
 801cdca:	bb38      	cbnz	r0, 801ce1c <_dtoa_r+0x48c>
 801cdcc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801cdd0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 801cdd4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801cdd6:	2b00      	cmp	r3, #0
 801cdd8:	f2c0 8157 	blt.w	801d08a <_dtoa_r+0x6fa>
 801cddc:	2f0e      	cmp	r7, #14
 801cdde:	f300 8154 	bgt.w	801d08a <_dtoa_r+0x6fa>
 801cde2:	4b4b      	ldr	r3, [pc, #300]	@ (801cf10 <_dtoa_r+0x580>)
 801cde4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801cde8:	e9d3 3400 	ldrd	r3, r4, [r3]
 801cdec:	e9cd 3404 	strd	r3, r4, [sp, #16]
 801cdf0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801cdf2:	2b00      	cmp	r3, #0
 801cdf4:	f280 80e5 	bge.w	801cfc2 <_dtoa_r+0x632>
 801cdf8:	9b08      	ldr	r3, [sp, #32]
 801cdfa:	2b00      	cmp	r3, #0
 801cdfc:	f300 80e1 	bgt.w	801cfc2 <_dtoa_r+0x632>
 801ce00:	d10c      	bne.n	801ce1c <_dtoa_r+0x48c>
 801ce02:	4b48      	ldr	r3, [pc, #288]	@ (801cf24 <_dtoa_r+0x594>)
 801ce04:	2200      	movs	r2, #0
 801ce06:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801ce0a:	f7e3 fbcd 	bl	80005a8 <__aeabi_dmul>
 801ce0e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801ce12:	f7e3 fe4f 	bl	8000ab4 <__aeabi_dcmpge>
 801ce16:	2800      	cmp	r0, #0
 801ce18:	f000 8266 	beq.w	801d2e8 <_dtoa_r+0x958>
 801ce1c:	2400      	movs	r4, #0
 801ce1e:	4625      	mov	r5, r4
 801ce20:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801ce22:	4656      	mov	r6, sl
 801ce24:	ea6f 0803 	mvn.w	r8, r3
 801ce28:	2700      	movs	r7, #0
 801ce2a:	4621      	mov	r1, r4
 801ce2c:	4648      	mov	r0, r9
 801ce2e:	f000 fcbf 	bl	801d7b0 <_Bfree>
 801ce32:	2d00      	cmp	r5, #0
 801ce34:	f000 80bd 	beq.w	801cfb2 <_dtoa_r+0x622>
 801ce38:	b12f      	cbz	r7, 801ce46 <_dtoa_r+0x4b6>
 801ce3a:	42af      	cmp	r7, r5
 801ce3c:	d003      	beq.n	801ce46 <_dtoa_r+0x4b6>
 801ce3e:	4639      	mov	r1, r7
 801ce40:	4648      	mov	r0, r9
 801ce42:	f000 fcb5 	bl	801d7b0 <_Bfree>
 801ce46:	4629      	mov	r1, r5
 801ce48:	4648      	mov	r0, r9
 801ce4a:	f000 fcb1 	bl	801d7b0 <_Bfree>
 801ce4e:	e0b0      	b.n	801cfb2 <_dtoa_r+0x622>
 801ce50:	07e2      	lsls	r2, r4, #31
 801ce52:	d505      	bpl.n	801ce60 <_dtoa_r+0x4d0>
 801ce54:	e9d5 2300 	ldrd	r2, r3, [r5]
 801ce58:	f7e3 fba6 	bl	80005a8 <__aeabi_dmul>
 801ce5c:	3601      	adds	r6, #1
 801ce5e:	2301      	movs	r3, #1
 801ce60:	1064      	asrs	r4, r4, #1
 801ce62:	3508      	adds	r5, #8
 801ce64:	e762      	b.n	801cd2c <_dtoa_r+0x39c>
 801ce66:	2602      	movs	r6, #2
 801ce68:	e765      	b.n	801cd36 <_dtoa_r+0x3a6>
 801ce6a:	9c08      	ldr	r4, [sp, #32]
 801ce6c:	46b8      	mov	r8, r7
 801ce6e:	e784      	b.n	801cd7a <_dtoa_r+0x3ea>
 801ce70:	4b27      	ldr	r3, [pc, #156]	@ (801cf10 <_dtoa_r+0x580>)
 801ce72:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801ce74:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801ce78:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801ce7c:	4454      	add	r4, sl
 801ce7e:	2900      	cmp	r1, #0
 801ce80:	d054      	beq.n	801cf2c <_dtoa_r+0x59c>
 801ce82:	4929      	ldr	r1, [pc, #164]	@ (801cf28 <_dtoa_r+0x598>)
 801ce84:	2000      	movs	r0, #0
 801ce86:	f7e3 fcb9 	bl	80007fc <__aeabi_ddiv>
 801ce8a:	4633      	mov	r3, r6
 801ce8c:	462a      	mov	r2, r5
 801ce8e:	f7e3 f9d3 	bl	8000238 <__aeabi_dsub>
 801ce92:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801ce96:	4656      	mov	r6, sl
 801ce98:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801ce9c:	f7e3 fe34 	bl	8000b08 <__aeabi_d2iz>
 801cea0:	4605      	mov	r5, r0
 801cea2:	f7e3 fb17 	bl	80004d4 <__aeabi_i2d>
 801cea6:	4602      	mov	r2, r0
 801cea8:	460b      	mov	r3, r1
 801ceaa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801ceae:	f7e3 f9c3 	bl	8000238 <__aeabi_dsub>
 801ceb2:	3530      	adds	r5, #48	@ 0x30
 801ceb4:	4602      	mov	r2, r0
 801ceb6:	460b      	mov	r3, r1
 801ceb8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801cebc:	f806 5b01 	strb.w	r5, [r6], #1
 801cec0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801cec4:	f7e3 fde2 	bl	8000a8c <__aeabi_dcmplt>
 801cec8:	2800      	cmp	r0, #0
 801ceca:	d172      	bne.n	801cfb2 <_dtoa_r+0x622>
 801cecc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801ced0:	4911      	ldr	r1, [pc, #68]	@ (801cf18 <_dtoa_r+0x588>)
 801ced2:	2000      	movs	r0, #0
 801ced4:	f7e3 f9b0 	bl	8000238 <__aeabi_dsub>
 801ced8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801cedc:	f7e3 fdd6 	bl	8000a8c <__aeabi_dcmplt>
 801cee0:	2800      	cmp	r0, #0
 801cee2:	f040 80b4 	bne.w	801d04e <_dtoa_r+0x6be>
 801cee6:	42a6      	cmp	r6, r4
 801cee8:	f43f af70 	beq.w	801cdcc <_dtoa_r+0x43c>
 801ceec:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801cef0:	4b0a      	ldr	r3, [pc, #40]	@ (801cf1c <_dtoa_r+0x58c>)
 801cef2:	2200      	movs	r2, #0
 801cef4:	f7e3 fb58 	bl	80005a8 <__aeabi_dmul>
 801cef8:	4b08      	ldr	r3, [pc, #32]	@ (801cf1c <_dtoa_r+0x58c>)
 801cefa:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801cefe:	2200      	movs	r2, #0
 801cf00:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801cf04:	f7e3 fb50 	bl	80005a8 <__aeabi_dmul>
 801cf08:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801cf0c:	e7c4      	b.n	801ce98 <_dtoa_r+0x508>
 801cf0e:	bf00      	nop
 801cf10:	0801f980 	.word	0x0801f980
 801cf14:	0801f958 	.word	0x0801f958
 801cf18:	3ff00000 	.word	0x3ff00000
 801cf1c:	40240000 	.word	0x40240000
 801cf20:	401c0000 	.word	0x401c0000
 801cf24:	40140000 	.word	0x40140000
 801cf28:	3fe00000 	.word	0x3fe00000
 801cf2c:	4631      	mov	r1, r6
 801cf2e:	4628      	mov	r0, r5
 801cf30:	f7e3 fb3a 	bl	80005a8 <__aeabi_dmul>
 801cf34:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801cf38:	9413      	str	r4, [sp, #76]	@ 0x4c
 801cf3a:	4656      	mov	r6, sl
 801cf3c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801cf40:	f7e3 fde2 	bl	8000b08 <__aeabi_d2iz>
 801cf44:	4605      	mov	r5, r0
 801cf46:	f7e3 fac5 	bl	80004d4 <__aeabi_i2d>
 801cf4a:	4602      	mov	r2, r0
 801cf4c:	460b      	mov	r3, r1
 801cf4e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801cf52:	f7e3 f971 	bl	8000238 <__aeabi_dsub>
 801cf56:	3530      	adds	r5, #48	@ 0x30
 801cf58:	f806 5b01 	strb.w	r5, [r6], #1
 801cf5c:	4602      	mov	r2, r0
 801cf5e:	460b      	mov	r3, r1
 801cf60:	42a6      	cmp	r6, r4
 801cf62:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801cf66:	f04f 0200 	mov.w	r2, #0
 801cf6a:	d124      	bne.n	801cfb6 <_dtoa_r+0x626>
 801cf6c:	4baf      	ldr	r3, [pc, #700]	@ (801d22c <_dtoa_r+0x89c>)
 801cf6e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801cf72:	f7e3 f963 	bl	800023c <__adddf3>
 801cf76:	4602      	mov	r2, r0
 801cf78:	460b      	mov	r3, r1
 801cf7a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801cf7e:	f7e3 fda3 	bl	8000ac8 <__aeabi_dcmpgt>
 801cf82:	2800      	cmp	r0, #0
 801cf84:	d163      	bne.n	801d04e <_dtoa_r+0x6be>
 801cf86:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801cf8a:	49a8      	ldr	r1, [pc, #672]	@ (801d22c <_dtoa_r+0x89c>)
 801cf8c:	2000      	movs	r0, #0
 801cf8e:	f7e3 f953 	bl	8000238 <__aeabi_dsub>
 801cf92:	4602      	mov	r2, r0
 801cf94:	460b      	mov	r3, r1
 801cf96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801cf9a:	f7e3 fd77 	bl	8000a8c <__aeabi_dcmplt>
 801cf9e:	2800      	cmp	r0, #0
 801cfa0:	f43f af14 	beq.w	801cdcc <_dtoa_r+0x43c>
 801cfa4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801cfa6:	1e73      	subs	r3, r6, #1
 801cfa8:	9313      	str	r3, [sp, #76]	@ 0x4c
 801cfaa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801cfae:	2b30      	cmp	r3, #48	@ 0x30
 801cfb0:	d0f8      	beq.n	801cfa4 <_dtoa_r+0x614>
 801cfb2:	4647      	mov	r7, r8
 801cfb4:	e03b      	b.n	801d02e <_dtoa_r+0x69e>
 801cfb6:	4b9e      	ldr	r3, [pc, #632]	@ (801d230 <_dtoa_r+0x8a0>)
 801cfb8:	f7e3 faf6 	bl	80005a8 <__aeabi_dmul>
 801cfbc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801cfc0:	e7bc      	b.n	801cf3c <_dtoa_r+0x5ac>
 801cfc2:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 801cfc6:	4656      	mov	r6, sl
 801cfc8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801cfcc:	4620      	mov	r0, r4
 801cfce:	4629      	mov	r1, r5
 801cfd0:	f7e3 fc14 	bl	80007fc <__aeabi_ddiv>
 801cfd4:	f7e3 fd98 	bl	8000b08 <__aeabi_d2iz>
 801cfd8:	4680      	mov	r8, r0
 801cfda:	f7e3 fa7b 	bl	80004d4 <__aeabi_i2d>
 801cfde:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801cfe2:	f7e3 fae1 	bl	80005a8 <__aeabi_dmul>
 801cfe6:	4602      	mov	r2, r0
 801cfe8:	460b      	mov	r3, r1
 801cfea:	4620      	mov	r0, r4
 801cfec:	4629      	mov	r1, r5
 801cfee:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801cff2:	f7e3 f921 	bl	8000238 <__aeabi_dsub>
 801cff6:	f806 4b01 	strb.w	r4, [r6], #1
 801cffa:	9d08      	ldr	r5, [sp, #32]
 801cffc:	eba6 040a 	sub.w	r4, r6, sl
 801d000:	42a5      	cmp	r5, r4
 801d002:	4602      	mov	r2, r0
 801d004:	460b      	mov	r3, r1
 801d006:	d133      	bne.n	801d070 <_dtoa_r+0x6e0>
 801d008:	f7e3 f918 	bl	800023c <__adddf3>
 801d00c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801d010:	4604      	mov	r4, r0
 801d012:	460d      	mov	r5, r1
 801d014:	f7e3 fd58 	bl	8000ac8 <__aeabi_dcmpgt>
 801d018:	b9c0      	cbnz	r0, 801d04c <_dtoa_r+0x6bc>
 801d01a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801d01e:	4620      	mov	r0, r4
 801d020:	4629      	mov	r1, r5
 801d022:	f7e3 fd29 	bl	8000a78 <__aeabi_dcmpeq>
 801d026:	b110      	cbz	r0, 801d02e <_dtoa_r+0x69e>
 801d028:	f018 0f01 	tst.w	r8, #1
 801d02c:	d10e      	bne.n	801d04c <_dtoa_r+0x6bc>
 801d02e:	9903      	ldr	r1, [sp, #12]
 801d030:	4648      	mov	r0, r9
 801d032:	f000 fbbd 	bl	801d7b0 <_Bfree>
 801d036:	2300      	movs	r3, #0
 801d038:	7033      	strb	r3, [r6, #0]
 801d03a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801d03c:	3701      	adds	r7, #1
 801d03e:	601f      	str	r7, [r3, #0]
 801d040:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801d042:	2b00      	cmp	r3, #0
 801d044:	f000 824b 	beq.w	801d4de <_dtoa_r+0xb4e>
 801d048:	601e      	str	r6, [r3, #0]
 801d04a:	e248      	b.n	801d4de <_dtoa_r+0xb4e>
 801d04c:	46b8      	mov	r8, r7
 801d04e:	4633      	mov	r3, r6
 801d050:	461e      	mov	r6, r3
 801d052:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801d056:	2a39      	cmp	r2, #57	@ 0x39
 801d058:	d106      	bne.n	801d068 <_dtoa_r+0x6d8>
 801d05a:	459a      	cmp	sl, r3
 801d05c:	d1f8      	bne.n	801d050 <_dtoa_r+0x6c0>
 801d05e:	2230      	movs	r2, #48	@ 0x30
 801d060:	f108 0801 	add.w	r8, r8, #1
 801d064:	f88a 2000 	strb.w	r2, [sl]
 801d068:	781a      	ldrb	r2, [r3, #0]
 801d06a:	3201      	adds	r2, #1
 801d06c:	701a      	strb	r2, [r3, #0]
 801d06e:	e7a0      	b.n	801cfb2 <_dtoa_r+0x622>
 801d070:	4b6f      	ldr	r3, [pc, #444]	@ (801d230 <_dtoa_r+0x8a0>)
 801d072:	2200      	movs	r2, #0
 801d074:	f7e3 fa98 	bl	80005a8 <__aeabi_dmul>
 801d078:	2200      	movs	r2, #0
 801d07a:	2300      	movs	r3, #0
 801d07c:	4604      	mov	r4, r0
 801d07e:	460d      	mov	r5, r1
 801d080:	f7e3 fcfa 	bl	8000a78 <__aeabi_dcmpeq>
 801d084:	2800      	cmp	r0, #0
 801d086:	d09f      	beq.n	801cfc8 <_dtoa_r+0x638>
 801d088:	e7d1      	b.n	801d02e <_dtoa_r+0x69e>
 801d08a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801d08c:	2a00      	cmp	r2, #0
 801d08e:	f000 80ea 	beq.w	801d266 <_dtoa_r+0x8d6>
 801d092:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801d094:	2a01      	cmp	r2, #1
 801d096:	f300 80cd 	bgt.w	801d234 <_dtoa_r+0x8a4>
 801d09a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801d09c:	2a00      	cmp	r2, #0
 801d09e:	f000 80c1 	beq.w	801d224 <_dtoa_r+0x894>
 801d0a2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801d0a6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801d0a8:	9e04      	ldr	r6, [sp, #16]
 801d0aa:	9a04      	ldr	r2, [sp, #16]
 801d0ac:	441a      	add	r2, r3
 801d0ae:	9204      	str	r2, [sp, #16]
 801d0b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d0b2:	2101      	movs	r1, #1
 801d0b4:	441a      	add	r2, r3
 801d0b6:	4648      	mov	r0, r9
 801d0b8:	9209      	str	r2, [sp, #36]	@ 0x24
 801d0ba:	f000 fc2d 	bl	801d918 <__i2b>
 801d0be:	4605      	mov	r5, r0
 801d0c0:	b166      	cbz	r6, 801d0dc <_dtoa_r+0x74c>
 801d0c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d0c4:	2b00      	cmp	r3, #0
 801d0c6:	dd09      	ble.n	801d0dc <_dtoa_r+0x74c>
 801d0c8:	42b3      	cmp	r3, r6
 801d0ca:	9a04      	ldr	r2, [sp, #16]
 801d0cc:	bfa8      	it	ge
 801d0ce:	4633      	movge	r3, r6
 801d0d0:	1ad2      	subs	r2, r2, r3
 801d0d2:	9204      	str	r2, [sp, #16]
 801d0d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d0d6:	1af6      	subs	r6, r6, r3
 801d0d8:	1ad3      	subs	r3, r2, r3
 801d0da:	9309      	str	r3, [sp, #36]	@ 0x24
 801d0dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d0de:	b30b      	cbz	r3, 801d124 <_dtoa_r+0x794>
 801d0e0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d0e2:	2b00      	cmp	r3, #0
 801d0e4:	f000 80c6 	beq.w	801d274 <_dtoa_r+0x8e4>
 801d0e8:	2c00      	cmp	r4, #0
 801d0ea:	f000 80c0 	beq.w	801d26e <_dtoa_r+0x8de>
 801d0ee:	4629      	mov	r1, r5
 801d0f0:	4622      	mov	r2, r4
 801d0f2:	4648      	mov	r0, r9
 801d0f4:	f000 fcc8 	bl	801da88 <__pow5mult>
 801d0f8:	9a03      	ldr	r2, [sp, #12]
 801d0fa:	4601      	mov	r1, r0
 801d0fc:	4605      	mov	r5, r0
 801d0fe:	4648      	mov	r0, r9
 801d100:	f000 fc20 	bl	801d944 <__multiply>
 801d104:	9903      	ldr	r1, [sp, #12]
 801d106:	4680      	mov	r8, r0
 801d108:	4648      	mov	r0, r9
 801d10a:	f000 fb51 	bl	801d7b0 <_Bfree>
 801d10e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d110:	1b1b      	subs	r3, r3, r4
 801d112:	930a      	str	r3, [sp, #40]	@ 0x28
 801d114:	f000 80b1 	beq.w	801d27a <_dtoa_r+0x8ea>
 801d118:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d11a:	4641      	mov	r1, r8
 801d11c:	4648      	mov	r0, r9
 801d11e:	f000 fcb3 	bl	801da88 <__pow5mult>
 801d122:	9003      	str	r0, [sp, #12]
 801d124:	2101      	movs	r1, #1
 801d126:	4648      	mov	r0, r9
 801d128:	f000 fbf6 	bl	801d918 <__i2b>
 801d12c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d12e:	4604      	mov	r4, r0
 801d130:	2b00      	cmp	r3, #0
 801d132:	f000 81d8 	beq.w	801d4e6 <_dtoa_r+0xb56>
 801d136:	461a      	mov	r2, r3
 801d138:	4601      	mov	r1, r0
 801d13a:	4648      	mov	r0, r9
 801d13c:	f000 fca4 	bl	801da88 <__pow5mult>
 801d140:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801d142:	2b01      	cmp	r3, #1
 801d144:	4604      	mov	r4, r0
 801d146:	f300 809f 	bgt.w	801d288 <_dtoa_r+0x8f8>
 801d14a:	9b06      	ldr	r3, [sp, #24]
 801d14c:	2b00      	cmp	r3, #0
 801d14e:	f040 8097 	bne.w	801d280 <_dtoa_r+0x8f0>
 801d152:	9b07      	ldr	r3, [sp, #28]
 801d154:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801d158:	2b00      	cmp	r3, #0
 801d15a:	f040 8093 	bne.w	801d284 <_dtoa_r+0x8f4>
 801d15e:	9b07      	ldr	r3, [sp, #28]
 801d160:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801d164:	0d1b      	lsrs	r3, r3, #20
 801d166:	051b      	lsls	r3, r3, #20
 801d168:	b133      	cbz	r3, 801d178 <_dtoa_r+0x7e8>
 801d16a:	9b04      	ldr	r3, [sp, #16]
 801d16c:	3301      	adds	r3, #1
 801d16e:	9304      	str	r3, [sp, #16]
 801d170:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d172:	3301      	adds	r3, #1
 801d174:	9309      	str	r3, [sp, #36]	@ 0x24
 801d176:	2301      	movs	r3, #1
 801d178:	930a      	str	r3, [sp, #40]	@ 0x28
 801d17a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d17c:	2b00      	cmp	r3, #0
 801d17e:	f000 81b8 	beq.w	801d4f2 <_dtoa_r+0xb62>
 801d182:	6923      	ldr	r3, [r4, #16]
 801d184:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801d188:	6918      	ldr	r0, [r3, #16]
 801d18a:	f000 fb79 	bl	801d880 <__hi0bits>
 801d18e:	f1c0 0020 	rsb	r0, r0, #32
 801d192:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d194:	4418      	add	r0, r3
 801d196:	f010 001f 	ands.w	r0, r0, #31
 801d19a:	f000 8082 	beq.w	801d2a2 <_dtoa_r+0x912>
 801d19e:	f1c0 0320 	rsb	r3, r0, #32
 801d1a2:	2b04      	cmp	r3, #4
 801d1a4:	dd73      	ble.n	801d28e <_dtoa_r+0x8fe>
 801d1a6:	9b04      	ldr	r3, [sp, #16]
 801d1a8:	f1c0 001c 	rsb	r0, r0, #28
 801d1ac:	4403      	add	r3, r0
 801d1ae:	9304      	str	r3, [sp, #16]
 801d1b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d1b2:	4403      	add	r3, r0
 801d1b4:	4406      	add	r6, r0
 801d1b6:	9309      	str	r3, [sp, #36]	@ 0x24
 801d1b8:	9b04      	ldr	r3, [sp, #16]
 801d1ba:	2b00      	cmp	r3, #0
 801d1bc:	dd05      	ble.n	801d1ca <_dtoa_r+0x83a>
 801d1be:	9903      	ldr	r1, [sp, #12]
 801d1c0:	461a      	mov	r2, r3
 801d1c2:	4648      	mov	r0, r9
 801d1c4:	f000 fcba 	bl	801db3c <__lshift>
 801d1c8:	9003      	str	r0, [sp, #12]
 801d1ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d1cc:	2b00      	cmp	r3, #0
 801d1ce:	dd05      	ble.n	801d1dc <_dtoa_r+0x84c>
 801d1d0:	4621      	mov	r1, r4
 801d1d2:	461a      	mov	r2, r3
 801d1d4:	4648      	mov	r0, r9
 801d1d6:	f000 fcb1 	bl	801db3c <__lshift>
 801d1da:	4604      	mov	r4, r0
 801d1dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d1de:	2b00      	cmp	r3, #0
 801d1e0:	d061      	beq.n	801d2a6 <_dtoa_r+0x916>
 801d1e2:	9803      	ldr	r0, [sp, #12]
 801d1e4:	4621      	mov	r1, r4
 801d1e6:	f000 fd15 	bl	801dc14 <__mcmp>
 801d1ea:	2800      	cmp	r0, #0
 801d1ec:	da5b      	bge.n	801d2a6 <_dtoa_r+0x916>
 801d1ee:	2300      	movs	r3, #0
 801d1f0:	9903      	ldr	r1, [sp, #12]
 801d1f2:	220a      	movs	r2, #10
 801d1f4:	4648      	mov	r0, r9
 801d1f6:	f000 fafd 	bl	801d7f4 <__multadd>
 801d1fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d1fc:	9003      	str	r0, [sp, #12]
 801d1fe:	f107 38ff 	add.w	r8, r7, #4294967295
 801d202:	2b00      	cmp	r3, #0
 801d204:	f000 8177 	beq.w	801d4f6 <_dtoa_r+0xb66>
 801d208:	4629      	mov	r1, r5
 801d20a:	2300      	movs	r3, #0
 801d20c:	220a      	movs	r2, #10
 801d20e:	4648      	mov	r0, r9
 801d210:	f000 faf0 	bl	801d7f4 <__multadd>
 801d214:	f1bb 0f00 	cmp.w	fp, #0
 801d218:	4605      	mov	r5, r0
 801d21a:	dc6f      	bgt.n	801d2fc <_dtoa_r+0x96c>
 801d21c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801d21e:	2b02      	cmp	r3, #2
 801d220:	dc49      	bgt.n	801d2b6 <_dtoa_r+0x926>
 801d222:	e06b      	b.n	801d2fc <_dtoa_r+0x96c>
 801d224:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801d226:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801d22a:	e73c      	b.n	801d0a6 <_dtoa_r+0x716>
 801d22c:	3fe00000 	.word	0x3fe00000
 801d230:	40240000 	.word	0x40240000
 801d234:	9b08      	ldr	r3, [sp, #32]
 801d236:	1e5c      	subs	r4, r3, #1
 801d238:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d23a:	42a3      	cmp	r3, r4
 801d23c:	db09      	blt.n	801d252 <_dtoa_r+0x8c2>
 801d23e:	1b1c      	subs	r4, r3, r4
 801d240:	9b08      	ldr	r3, [sp, #32]
 801d242:	2b00      	cmp	r3, #0
 801d244:	f6bf af30 	bge.w	801d0a8 <_dtoa_r+0x718>
 801d248:	9b04      	ldr	r3, [sp, #16]
 801d24a:	9a08      	ldr	r2, [sp, #32]
 801d24c:	1a9e      	subs	r6, r3, r2
 801d24e:	2300      	movs	r3, #0
 801d250:	e72b      	b.n	801d0aa <_dtoa_r+0x71a>
 801d252:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d254:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d256:	940a      	str	r4, [sp, #40]	@ 0x28
 801d258:	1ae3      	subs	r3, r4, r3
 801d25a:	441a      	add	r2, r3
 801d25c:	9e04      	ldr	r6, [sp, #16]
 801d25e:	9b08      	ldr	r3, [sp, #32]
 801d260:	920e      	str	r2, [sp, #56]	@ 0x38
 801d262:	2400      	movs	r4, #0
 801d264:	e721      	b.n	801d0aa <_dtoa_r+0x71a>
 801d266:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801d268:	9e04      	ldr	r6, [sp, #16]
 801d26a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801d26c:	e728      	b.n	801d0c0 <_dtoa_r+0x730>
 801d26e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801d272:	e751      	b.n	801d118 <_dtoa_r+0x788>
 801d274:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d276:	9903      	ldr	r1, [sp, #12]
 801d278:	e750      	b.n	801d11c <_dtoa_r+0x78c>
 801d27a:	f8cd 800c 	str.w	r8, [sp, #12]
 801d27e:	e751      	b.n	801d124 <_dtoa_r+0x794>
 801d280:	2300      	movs	r3, #0
 801d282:	e779      	b.n	801d178 <_dtoa_r+0x7e8>
 801d284:	9b06      	ldr	r3, [sp, #24]
 801d286:	e777      	b.n	801d178 <_dtoa_r+0x7e8>
 801d288:	2300      	movs	r3, #0
 801d28a:	930a      	str	r3, [sp, #40]	@ 0x28
 801d28c:	e779      	b.n	801d182 <_dtoa_r+0x7f2>
 801d28e:	d093      	beq.n	801d1b8 <_dtoa_r+0x828>
 801d290:	9a04      	ldr	r2, [sp, #16]
 801d292:	331c      	adds	r3, #28
 801d294:	441a      	add	r2, r3
 801d296:	9204      	str	r2, [sp, #16]
 801d298:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d29a:	441a      	add	r2, r3
 801d29c:	441e      	add	r6, r3
 801d29e:	9209      	str	r2, [sp, #36]	@ 0x24
 801d2a0:	e78a      	b.n	801d1b8 <_dtoa_r+0x828>
 801d2a2:	4603      	mov	r3, r0
 801d2a4:	e7f4      	b.n	801d290 <_dtoa_r+0x900>
 801d2a6:	9b08      	ldr	r3, [sp, #32]
 801d2a8:	2b00      	cmp	r3, #0
 801d2aa:	46b8      	mov	r8, r7
 801d2ac:	dc20      	bgt.n	801d2f0 <_dtoa_r+0x960>
 801d2ae:	469b      	mov	fp, r3
 801d2b0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801d2b2:	2b02      	cmp	r3, #2
 801d2b4:	dd1e      	ble.n	801d2f4 <_dtoa_r+0x964>
 801d2b6:	f1bb 0f00 	cmp.w	fp, #0
 801d2ba:	f47f adb1 	bne.w	801ce20 <_dtoa_r+0x490>
 801d2be:	4621      	mov	r1, r4
 801d2c0:	465b      	mov	r3, fp
 801d2c2:	2205      	movs	r2, #5
 801d2c4:	4648      	mov	r0, r9
 801d2c6:	f000 fa95 	bl	801d7f4 <__multadd>
 801d2ca:	4601      	mov	r1, r0
 801d2cc:	4604      	mov	r4, r0
 801d2ce:	9803      	ldr	r0, [sp, #12]
 801d2d0:	f000 fca0 	bl	801dc14 <__mcmp>
 801d2d4:	2800      	cmp	r0, #0
 801d2d6:	f77f ada3 	ble.w	801ce20 <_dtoa_r+0x490>
 801d2da:	4656      	mov	r6, sl
 801d2dc:	2331      	movs	r3, #49	@ 0x31
 801d2de:	f806 3b01 	strb.w	r3, [r6], #1
 801d2e2:	f108 0801 	add.w	r8, r8, #1
 801d2e6:	e59f      	b.n	801ce28 <_dtoa_r+0x498>
 801d2e8:	9c08      	ldr	r4, [sp, #32]
 801d2ea:	46b8      	mov	r8, r7
 801d2ec:	4625      	mov	r5, r4
 801d2ee:	e7f4      	b.n	801d2da <_dtoa_r+0x94a>
 801d2f0:	f8dd b020 	ldr.w	fp, [sp, #32]
 801d2f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d2f6:	2b00      	cmp	r3, #0
 801d2f8:	f000 8101 	beq.w	801d4fe <_dtoa_r+0xb6e>
 801d2fc:	2e00      	cmp	r6, #0
 801d2fe:	dd05      	ble.n	801d30c <_dtoa_r+0x97c>
 801d300:	4629      	mov	r1, r5
 801d302:	4632      	mov	r2, r6
 801d304:	4648      	mov	r0, r9
 801d306:	f000 fc19 	bl	801db3c <__lshift>
 801d30a:	4605      	mov	r5, r0
 801d30c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d30e:	2b00      	cmp	r3, #0
 801d310:	d05c      	beq.n	801d3cc <_dtoa_r+0xa3c>
 801d312:	6869      	ldr	r1, [r5, #4]
 801d314:	4648      	mov	r0, r9
 801d316:	f000 fa0b 	bl	801d730 <_Balloc>
 801d31a:	4606      	mov	r6, r0
 801d31c:	b928      	cbnz	r0, 801d32a <_dtoa_r+0x99a>
 801d31e:	4b82      	ldr	r3, [pc, #520]	@ (801d528 <_dtoa_r+0xb98>)
 801d320:	4602      	mov	r2, r0
 801d322:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801d326:	f7ff bb47 	b.w	801c9b8 <_dtoa_r+0x28>
 801d32a:	692a      	ldr	r2, [r5, #16]
 801d32c:	3202      	adds	r2, #2
 801d32e:	0092      	lsls	r2, r2, #2
 801d330:	f105 010c 	add.w	r1, r5, #12
 801d334:	300c      	adds	r0, #12
 801d336:	f000 fe2b 	bl	801df90 <memcpy>
 801d33a:	2201      	movs	r2, #1
 801d33c:	4631      	mov	r1, r6
 801d33e:	4648      	mov	r0, r9
 801d340:	f000 fbfc 	bl	801db3c <__lshift>
 801d344:	f10a 0301 	add.w	r3, sl, #1
 801d348:	9304      	str	r3, [sp, #16]
 801d34a:	eb0a 030b 	add.w	r3, sl, fp
 801d34e:	930a      	str	r3, [sp, #40]	@ 0x28
 801d350:	9b06      	ldr	r3, [sp, #24]
 801d352:	f003 0301 	and.w	r3, r3, #1
 801d356:	462f      	mov	r7, r5
 801d358:	9309      	str	r3, [sp, #36]	@ 0x24
 801d35a:	4605      	mov	r5, r0
 801d35c:	9b04      	ldr	r3, [sp, #16]
 801d35e:	9803      	ldr	r0, [sp, #12]
 801d360:	4621      	mov	r1, r4
 801d362:	f103 3bff 	add.w	fp, r3, #4294967295
 801d366:	f7ff fa88 	bl	801c87a <quorem>
 801d36a:	4603      	mov	r3, r0
 801d36c:	3330      	adds	r3, #48	@ 0x30
 801d36e:	9006      	str	r0, [sp, #24]
 801d370:	4639      	mov	r1, r7
 801d372:	9803      	ldr	r0, [sp, #12]
 801d374:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d376:	f000 fc4d 	bl	801dc14 <__mcmp>
 801d37a:	462a      	mov	r2, r5
 801d37c:	9008      	str	r0, [sp, #32]
 801d37e:	4621      	mov	r1, r4
 801d380:	4648      	mov	r0, r9
 801d382:	f000 fc63 	bl	801dc4c <__mdiff>
 801d386:	68c2      	ldr	r2, [r0, #12]
 801d388:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d38a:	4606      	mov	r6, r0
 801d38c:	bb02      	cbnz	r2, 801d3d0 <_dtoa_r+0xa40>
 801d38e:	4601      	mov	r1, r0
 801d390:	9803      	ldr	r0, [sp, #12]
 801d392:	f000 fc3f 	bl	801dc14 <__mcmp>
 801d396:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d398:	4602      	mov	r2, r0
 801d39a:	4631      	mov	r1, r6
 801d39c:	4648      	mov	r0, r9
 801d39e:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 801d3a2:	f000 fa05 	bl	801d7b0 <_Bfree>
 801d3a6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801d3a8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801d3aa:	9e04      	ldr	r6, [sp, #16]
 801d3ac:	ea42 0103 	orr.w	r1, r2, r3
 801d3b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d3b2:	4319      	orrs	r1, r3
 801d3b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d3b6:	d10d      	bne.n	801d3d4 <_dtoa_r+0xa44>
 801d3b8:	2b39      	cmp	r3, #57	@ 0x39
 801d3ba:	d027      	beq.n	801d40c <_dtoa_r+0xa7c>
 801d3bc:	9a08      	ldr	r2, [sp, #32]
 801d3be:	2a00      	cmp	r2, #0
 801d3c0:	dd01      	ble.n	801d3c6 <_dtoa_r+0xa36>
 801d3c2:	9b06      	ldr	r3, [sp, #24]
 801d3c4:	3331      	adds	r3, #49	@ 0x31
 801d3c6:	f88b 3000 	strb.w	r3, [fp]
 801d3ca:	e52e      	b.n	801ce2a <_dtoa_r+0x49a>
 801d3cc:	4628      	mov	r0, r5
 801d3ce:	e7b9      	b.n	801d344 <_dtoa_r+0x9b4>
 801d3d0:	2201      	movs	r2, #1
 801d3d2:	e7e2      	b.n	801d39a <_dtoa_r+0xa0a>
 801d3d4:	9908      	ldr	r1, [sp, #32]
 801d3d6:	2900      	cmp	r1, #0
 801d3d8:	db04      	blt.n	801d3e4 <_dtoa_r+0xa54>
 801d3da:	9820      	ldr	r0, [sp, #128]	@ 0x80
 801d3dc:	4301      	orrs	r1, r0
 801d3de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801d3e0:	4301      	orrs	r1, r0
 801d3e2:	d120      	bne.n	801d426 <_dtoa_r+0xa96>
 801d3e4:	2a00      	cmp	r2, #0
 801d3e6:	ddee      	ble.n	801d3c6 <_dtoa_r+0xa36>
 801d3e8:	9903      	ldr	r1, [sp, #12]
 801d3ea:	9304      	str	r3, [sp, #16]
 801d3ec:	2201      	movs	r2, #1
 801d3ee:	4648      	mov	r0, r9
 801d3f0:	f000 fba4 	bl	801db3c <__lshift>
 801d3f4:	4621      	mov	r1, r4
 801d3f6:	9003      	str	r0, [sp, #12]
 801d3f8:	f000 fc0c 	bl	801dc14 <__mcmp>
 801d3fc:	2800      	cmp	r0, #0
 801d3fe:	9b04      	ldr	r3, [sp, #16]
 801d400:	dc02      	bgt.n	801d408 <_dtoa_r+0xa78>
 801d402:	d1e0      	bne.n	801d3c6 <_dtoa_r+0xa36>
 801d404:	07da      	lsls	r2, r3, #31
 801d406:	d5de      	bpl.n	801d3c6 <_dtoa_r+0xa36>
 801d408:	2b39      	cmp	r3, #57	@ 0x39
 801d40a:	d1da      	bne.n	801d3c2 <_dtoa_r+0xa32>
 801d40c:	2339      	movs	r3, #57	@ 0x39
 801d40e:	f88b 3000 	strb.w	r3, [fp]
 801d412:	4633      	mov	r3, r6
 801d414:	461e      	mov	r6, r3
 801d416:	3b01      	subs	r3, #1
 801d418:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801d41c:	2a39      	cmp	r2, #57	@ 0x39
 801d41e:	d04e      	beq.n	801d4be <_dtoa_r+0xb2e>
 801d420:	3201      	adds	r2, #1
 801d422:	701a      	strb	r2, [r3, #0]
 801d424:	e501      	b.n	801ce2a <_dtoa_r+0x49a>
 801d426:	2a00      	cmp	r2, #0
 801d428:	dd03      	ble.n	801d432 <_dtoa_r+0xaa2>
 801d42a:	2b39      	cmp	r3, #57	@ 0x39
 801d42c:	d0ee      	beq.n	801d40c <_dtoa_r+0xa7c>
 801d42e:	3301      	adds	r3, #1
 801d430:	e7c9      	b.n	801d3c6 <_dtoa_r+0xa36>
 801d432:	9a04      	ldr	r2, [sp, #16]
 801d434:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801d436:	f802 3c01 	strb.w	r3, [r2, #-1]
 801d43a:	428a      	cmp	r2, r1
 801d43c:	d028      	beq.n	801d490 <_dtoa_r+0xb00>
 801d43e:	9903      	ldr	r1, [sp, #12]
 801d440:	2300      	movs	r3, #0
 801d442:	220a      	movs	r2, #10
 801d444:	4648      	mov	r0, r9
 801d446:	f000 f9d5 	bl	801d7f4 <__multadd>
 801d44a:	42af      	cmp	r7, r5
 801d44c:	9003      	str	r0, [sp, #12]
 801d44e:	f04f 0300 	mov.w	r3, #0
 801d452:	f04f 020a 	mov.w	r2, #10
 801d456:	4639      	mov	r1, r7
 801d458:	4648      	mov	r0, r9
 801d45a:	d107      	bne.n	801d46c <_dtoa_r+0xadc>
 801d45c:	f000 f9ca 	bl	801d7f4 <__multadd>
 801d460:	4607      	mov	r7, r0
 801d462:	4605      	mov	r5, r0
 801d464:	9b04      	ldr	r3, [sp, #16]
 801d466:	3301      	adds	r3, #1
 801d468:	9304      	str	r3, [sp, #16]
 801d46a:	e777      	b.n	801d35c <_dtoa_r+0x9cc>
 801d46c:	f000 f9c2 	bl	801d7f4 <__multadd>
 801d470:	4629      	mov	r1, r5
 801d472:	4607      	mov	r7, r0
 801d474:	2300      	movs	r3, #0
 801d476:	220a      	movs	r2, #10
 801d478:	4648      	mov	r0, r9
 801d47a:	f000 f9bb 	bl	801d7f4 <__multadd>
 801d47e:	4605      	mov	r5, r0
 801d480:	e7f0      	b.n	801d464 <_dtoa_r+0xad4>
 801d482:	f1bb 0f00 	cmp.w	fp, #0
 801d486:	bfcc      	ite	gt
 801d488:	465e      	movgt	r6, fp
 801d48a:	2601      	movle	r6, #1
 801d48c:	4456      	add	r6, sl
 801d48e:	2700      	movs	r7, #0
 801d490:	9903      	ldr	r1, [sp, #12]
 801d492:	9304      	str	r3, [sp, #16]
 801d494:	2201      	movs	r2, #1
 801d496:	4648      	mov	r0, r9
 801d498:	f000 fb50 	bl	801db3c <__lshift>
 801d49c:	4621      	mov	r1, r4
 801d49e:	9003      	str	r0, [sp, #12]
 801d4a0:	f000 fbb8 	bl	801dc14 <__mcmp>
 801d4a4:	2800      	cmp	r0, #0
 801d4a6:	dcb4      	bgt.n	801d412 <_dtoa_r+0xa82>
 801d4a8:	d102      	bne.n	801d4b0 <_dtoa_r+0xb20>
 801d4aa:	9b04      	ldr	r3, [sp, #16]
 801d4ac:	07db      	lsls	r3, r3, #31
 801d4ae:	d4b0      	bmi.n	801d412 <_dtoa_r+0xa82>
 801d4b0:	4633      	mov	r3, r6
 801d4b2:	461e      	mov	r6, r3
 801d4b4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801d4b8:	2a30      	cmp	r2, #48	@ 0x30
 801d4ba:	d0fa      	beq.n	801d4b2 <_dtoa_r+0xb22>
 801d4bc:	e4b5      	b.n	801ce2a <_dtoa_r+0x49a>
 801d4be:	459a      	cmp	sl, r3
 801d4c0:	d1a8      	bne.n	801d414 <_dtoa_r+0xa84>
 801d4c2:	2331      	movs	r3, #49	@ 0x31
 801d4c4:	f108 0801 	add.w	r8, r8, #1
 801d4c8:	f88a 3000 	strb.w	r3, [sl]
 801d4cc:	e4ad      	b.n	801ce2a <_dtoa_r+0x49a>
 801d4ce:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801d4d0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 801d52c <_dtoa_r+0xb9c>
 801d4d4:	b11b      	cbz	r3, 801d4de <_dtoa_r+0xb4e>
 801d4d6:	f10a 0308 	add.w	r3, sl, #8
 801d4da:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801d4dc:	6013      	str	r3, [r2, #0]
 801d4de:	4650      	mov	r0, sl
 801d4e0:	b017      	add	sp, #92	@ 0x5c
 801d4e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d4e6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801d4e8:	2b01      	cmp	r3, #1
 801d4ea:	f77f ae2e 	ble.w	801d14a <_dtoa_r+0x7ba>
 801d4ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d4f0:	930a      	str	r3, [sp, #40]	@ 0x28
 801d4f2:	2001      	movs	r0, #1
 801d4f4:	e64d      	b.n	801d192 <_dtoa_r+0x802>
 801d4f6:	f1bb 0f00 	cmp.w	fp, #0
 801d4fa:	f77f aed9 	ble.w	801d2b0 <_dtoa_r+0x920>
 801d4fe:	4656      	mov	r6, sl
 801d500:	9803      	ldr	r0, [sp, #12]
 801d502:	4621      	mov	r1, r4
 801d504:	f7ff f9b9 	bl	801c87a <quorem>
 801d508:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 801d50c:	f806 3b01 	strb.w	r3, [r6], #1
 801d510:	eba6 020a 	sub.w	r2, r6, sl
 801d514:	4593      	cmp	fp, r2
 801d516:	ddb4      	ble.n	801d482 <_dtoa_r+0xaf2>
 801d518:	9903      	ldr	r1, [sp, #12]
 801d51a:	2300      	movs	r3, #0
 801d51c:	220a      	movs	r2, #10
 801d51e:	4648      	mov	r0, r9
 801d520:	f000 f968 	bl	801d7f4 <__multadd>
 801d524:	9003      	str	r0, [sp, #12]
 801d526:	e7eb      	b.n	801d500 <_dtoa_r+0xb70>
 801d528:	0801f884 	.word	0x0801f884
 801d52c:	0801f808 	.word	0x0801f808

0801d530 <_free_r>:
 801d530:	b538      	push	{r3, r4, r5, lr}
 801d532:	4605      	mov	r5, r0
 801d534:	2900      	cmp	r1, #0
 801d536:	d041      	beq.n	801d5bc <_free_r+0x8c>
 801d538:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d53c:	1f0c      	subs	r4, r1, #4
 801d53e:	2b00      	cmp	r3, #0
 801d540:	bfb8      	it	lt
 801d542:	18e4      	addlt	r4, r4, r3
 801d544:	f000 f8e8 	bl	801d718 <__malloc_lock>
 801d548:	4a1d      	ldr	r2, [pc, #116]	@ (801d5c0 <_free_r+0x90>)
 801d54a:	6813      	ldr	r3, [r2, #0]
 801d54c:	b933      	cbnz	r3, 801d55c <_free_r+0x2c>
 801d54e:	6063      	str	r3, [r4, #4]
 801d550:	6014      	str	r4, [r2, #0]
 801d552:	4628      	mov	r0, r5
 801d554:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d558:	f000 b8e4 	b.w	801d724 <__malloc_unlock>
 801d55c:	42a3      	cmp	r3, r4
 801d55e:	d908      	bls.n	801d572 <_free_r+0x42>
 801d560:	6820      	ldr	r0, [r4, #0]
 801d562:	1821      	adds	r1, r4, r0
 801d564:	428b      	cmp	r3, r1
 801d566:	bf01      	itttt	eq
 801d568:	6819      	ldreq	r1, [r3, #0]
 801d56a:	685b      	ldreq	r3, [r3, #4]
 801d56c:	1809      	addeq	r1, r1, r0
 801d56e:	6021      	streq	r1, [r4, #0]
 801d570:	e7ed      	b.n	801d54e <_free_r+0x1e>
 801d572:	461a      	mov	r2, r3
 801d574:	685b      	ldr	r3, [r3, #4]
 801d576:	b10b      	cbz	r3, 801d57c <_free_r+0x4c>
 801d578:	42a3      	cmp	r3, r4
 801d57a:	d9fa      	bls.n	801d572 <_free_r+0x42>
 801d57c:	6811      	ldr	r1, [r2, #0]
 801d57e:	1850      	adds	r0, r2, r1
 801d580:	42a0      	cmp	r0, r4
 801d582:	d10b      	bne.n	801d59c <_free_r+0x6c>
 801d584:	6820      	ldr	r0, [r4, #0]
 801d586:	4401      	add	r1, r0
 801d588:	1850      	adds	r0, r2, r1
 801d58a:	4283      	cmp	r3, r0
 801d58c:	6011      	str	r1, [r2, #0]
 801d58e:	d1e0      	bne.n	801d552 <_free_r+0x22>
 801d590:	6818      	ldr	r0, [r3, #0]
 801d592:	685b      	ldr	r3, [r3, #4]
 801d594:	6053      	str	r3, [r2, #4]
 801d596:	4408      	add	r0, r1
 801d598:	6010      	str	r0, [r2, #0]
 801d59a:	e7da      	b.n	801d552 <_free_r+0x22>
 801d59c:	d902      	bls.n	801d5a4 <_free_r+0x74>
 801d59e:	230c      	movs	r3, #12
 801d5a0:	602b      	str	r3, [r5, #0]
 801d5a2:	e7d6      	b.n	801d552 <_free_r+0x22>
 801d5a4:	6820      	ldr	r0, [r4, #0]
 801d5a6:	1821      	adds	r1, r4, r0
 801d5a8:	428b      	cmp	r3, r1
 801d5aa:	bf04      	itt	eq
 801d5ac:	6819      	ldreq	r1, [r3, #0]
 801d5ae:	685b      	ldreq	r3, [r3, #4]
 801d5b0:	6063      	str	r3, [r4, #4]
 801d5b2:	bf04      	itt	eq
 801d5b4:	1809      	addeq	r1, r1, r0
 801d5b6:	6021      	streq	r1, [r4, #0]
 801d5b8:	6054      	str	r4, [r2, #4]
 801d5ba:	e7ca      	b.n	801d552 <_free_r+0x22>
 801d5bc:	bd38      	pop	{r3, r4, r5, pc}
 801d5be:	bf00      	nop
 801d5c0:	20002524 	.word	0x20002524

0801d5c4 <malloc>:
 801d5c4:	4b02      	ldr	r3, [pc, #8]	@ (801d5d0 <malloc+0xc>)
 801d5c6:	4601      	mov	r1, r0
 801d5c8:	6818      	ldr	r0, [r3, #0]
 801d5ca:	f000 b825 	b.w	801d618 <_malloc_r>
 801d5ce:	bf00      	nop
 801d5d0:	2000014c 	.word	0x2000014c

0801d5d4 <sbrk_aligned>:
 801d5d4:	b570      	push	{r4, r5, r6, lr}
 801d5d6:	4e0f      	ldr	r6, [pc, #60]	@ (801d614 <sbrk_aligned+0x40>)
 801d5d8:	460c      	mov	r4, r1
 801d5da:	6831      	ldr	r1, [r6, #0]
 801d5dc:	4605      	mov	r5, r0
 801d5de:	b911      	cbnz	r1, 801d5e6 <sbrk_aligned+0x12>
 801d5e0:	f000 fcc6 	bl	801df70 <_sbrk_r>
 801d5e4:	6030      	str	r0, [r6, #0]
 801d5e6:	4621      	mov	r1, r4
 801d5e8:	4628      	mov	r0, r5
 801d5ea:	f000 fcc1 	bl	801df70 <_sbrk_r>
 801d5ee:	1c43      	adds	r3, r0, #1
 801d5f0:	d103      	bne.n	801d5fa <sbrk_aligned+0x26>
 801d5f2:	f04f 34ff 	mov.w	r4, #4294967295
 801d5f6:	4620      	mov	r0, r4
 801d5f8:	bd70      	pop	{r4, r5, r6, pc}
 801d5fa:	1cc4      	adds	r4, r0, #3
 801d5fc:	f024 0403 	bic.w	r4, r4, #3
 801d600:	42a0      	cmp	r0, r4
 801d602:	d0f8      	beq.n	801d5f6 <sbrk_aligned+0x22>
 801d604:	1a21      	subs	r1, r4, r0
 801d606:	4628      	mov	r0, r5
 801d608:	f000 fcb2 	bl	801df70 <_sbrk_r>
 801d60c:	3001      	adds	r0, #1
 801d60e:	d1f2      	bne.n	801d5f6 <sbrk_aligned+0x22>
 801d610:	e7ef      	b.n	801d5f2 <sbrk_aligned+0x1e>
 801d612:	bf00      	nop
 801d614:	20002520 	.word	0x20002520

0801d618 <_malloc_r>:
 801d618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d61c:	1ccd      	adds	r5, r1, #3
 801d61e:	f025 0503 	bic.w	r5, r5, #3
 801d622:	3508      	adds	r5, #8
 801d624:	2d0c      	cmp	r5, #12
 801d626:	bf38      	it	cc
 801d628:	250c      	movcc	r5, #12
 801d62a:	2d00      	cmp	r5, #0
 801d62c:	4606      	mov	r6, r0
 801d62e:	db01      	blt.n	801d634 <_malloc_r+0x1c>
 801d630:	42a9      	cmp	r1, r5
 801d632:	d904      	bls.n	801d63e <_malloc_r+0x26>
 801d634:	230c      	movs	r3, #12
 801d636:	6033      	str	r3, [r6, #0]
 801d638:	2000      	movs	r0, #0
 801d63a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d63e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801d714 <_malloc_r+0xfc>
 801d642:	f000 f869 	bl	801d718 <__malloc_lock>
 801d646:	f8d8 3000 	ldr.w	r3, [r8]
 801d64a:	461c      	mov	r4, r3
 801d64c:	bb44      	cbnz	r4, 801d6a0 <_malloc_r+0x88>
 801d64e:	4629      	mov	r1, r5
 801d650:	4630      	mov	r0, r6
 801d652:	f7ff ffbf 	bl	801d5d4 <sbrk_aligned>
 801d656:	1c43      	adds	r3, r0, #1
 801d658:	4604      	mov	r4, r0
 801d65a:	d158      	bne.n	801d70e <_malloc_r+0xf6>
 801d65c:	f8d8 4000 	ldr.w	r4, [r8]
 801d660:	4627      	mov	r7, r4
 801d662:	2f00      	cmp	r7, #0
 801d664:	d143      	bne.n	801d6ee <_malloc_r+0xd6>
 801d666:	2c00      	cmp	r4, #0
 801d668:	d04b      	beq.n	801d702 <_malloc_r+0xea>
 801d66a:	6823      	ldr	r3, [r4, #0]
 801d66c:	4639      	mov	r1, r7
 801d66e:	4630      	mov	r0, r6
 801d670:	eb04 0903 	add.w	r9, r4, r3
 801d674:	f000 fc7c 	bl	801df70 <_sbrk_r>
 801d678:	4581      	cmp	r9, r0
 801d67a:	d142      	bne.n	801d702 <_malloc_r+0xea>
 801d67c:	6821      	ldr	r1, [r4, #0]
 801d67e:	1a6d      	subs	r5, r5, r1
 801d680:	4629      	mov	r1, r5
 801d682:	4630      	mov	r0, r6
 801d684:	f7ff ffa6 	bl	801d5d4 <sbrk_aligned>
 801d688:	3001      	adds	r0, #1
 801d68a:	d03a      	beq.n	801d702 <_malloc_r+0xea>
 801d68c:	6823      	ldr	r3, [r4, #0]
 801d68e:	442b      	add	r3, r5
 801d690:	6023      	str	r3, [r4, #0]
 801d692:	f8d8 3000 	ldr.w	r3, [r8]
 801d696:	685a      	ldr	r2, [r3, #4]
 801d698:	bb62      	cbnz	r2, 801d6f4 <_malloc_r+0xdc>
 801d69a:	f8c8 7000 	str.w	r7, [r8]
 801d69e:	e00f      	b.n	801d6c0 <_malloc_r+0xa8>
 801d6a0:	6822      	ldr	r2, [r4, #0]
 801d6a2:	1b52      	subs	r2, r2, r5
 801d6a4:	d420      	bmi.n	801d6e8 <_malloc_r+0xd0>
 801d6a6:	2a0b      	cmp	r2, #11
 801d6a8:	d917      	bls.n	801d6da <_malloc_r+0xc2>
 801d6aa:	1961      	adds	r1, r4, r5
 801d6ac:	42a3      	cmp	r3, r4
 801d6ae:	6025      	str	r5, [r4, #0]
 801d6b0:	bf18      	it	ne
 801d6b2:	6059      	strne	r1, [r3, #4]
 801d6b4:	6863      	ldr	r3, [r4, #4]
 801d6b6:	bf08      	it	eq
 801d6b8:	f8c8 1000 	streq.w	r1, [r8]
 801d6bc:	5162      	str	r2, [r4, r5]
 801d6be:	604b      	str	r3, [r1, #4]
 801d6c0:	4630      	mov	r0, r6
 801d6c2:	f000 f82f 	bl	801d724 <__malloc_unlock>
 801d6c6:	f104 000b 	add.w	r0, r4, #11
 801d6ca:	1d23      	adds	r3, r4, #4
 801d6cc:	f020 0007 	bic.w	r0, r0, #7
 801d6d0:	1ac2      	subs	r2, r0, r3
 801d6d2:	bf1c      	itt	ne
 801d6d4:	1a1b      	subne	r3, r3, r0
 801d6d6:	50a3      	strne	r3, [r4, r2]
 801d6d8:	e7af      	b.n	801d63a <_malloc_r+0x22>
 801d6da:	6862      	ldr	r2, [r4, #4]
 801d6dc:	42a3      	cmp	r3, r4
 801d6de:	bf0c      	ite	eq
 801d6e0:	f8c8 2000 	streq.w	r2, [r8]
 801d6e4:	605a      	strne	r2, [r3, #4]
 801d6e6:	e7eb      	b.n	801d6c0 <_malloc_r+0xa8>
 801d6e8:	4623      	mov	r3, r4
 801d6ea:	6864      	ldr	r4, [r4, #4]
 801d6ec:	e7ae      	b.n	801d64c <_malloc_r+0x34>
 801d6ee:	463c      	mov	r4, r7
 801d6f0:	687f      	ldr	r7, [r7, #4]
 801d6f2:	e7b6      	b.n	801d662 <_malloc_r+0x4a>
 801d6f4:	461a      	mov	r2, r3
 801d6f6:	685b      	ldr	r3, [r3, #4]
 801d6f8:	42a3      	cmp	r3, r4
 801d6fa:	d1fb      	bne.n	801d6f4 <_malloc_r+0xdc>
 801d6fc:	2300      	movs	r3, #0
 801d6fe:	6053      	str	r3, [r2, #4]
 801d700:	e7de      	b.n	801d6c0 <_malloc_r+0xa8>
 801d702:	230c      	movs	r3, #12
 801d704:	6033      	str	r3, [r6, #0]
 801d706:	4630      	mov	r0, r6
 801d708:	f000 f80c 	bl	801d724 <__malloc_unlock>
 801d70c:	e794      	b.n	801d638 <_malloc_r+0x20>
 801d70e:	6005      	str	r5, [r0, #0]
 801d710:	e7d6      	b.n	801d6c0 <_malloc_r+0xa8>
 801d712:	bf00      	nop
 801d714:	20002524 	.word	0x20002524

0801d718 <__malloc_lock>:
 801d718:	4801      	ldr	r0, [pc, #4]	@ (801d720 <__malloc_lock+0x8>)
 801d71a:	f7ff b8ac 	b.w	801c876 <__retarget_lock_acquire_recursive>
 801d71e:	bf00      	nop
 801d720:	2000251c 	.word	0x2000251c

0801d724 <__malloc_unlock>:
 801d724:	4801      	ldr	r0, [pc, #4]	@ (801d72c <__malloc_unlock+0x8>)
 801d726:	f7ff b8a7 	b.w	801c878 <__retarget_lock_release_recursive>
 801d72a:	bf00      	nop
 801d72c:	2000251c 	.word	0x2000251c

0801d730 <_Balloc>:
 801d730:	b570      	push	{r4, r5, r6, lr}
 801d732:	69c6      	ldr	r6, [r0, #28]
 801d734:	4604      	mov	r4, r0
 801d736:	460d      	mov	r5, r1
 801d738:	b976      	cbnz	r6, 801d758 <_Balloc+0x28>
 801d73a:	2010      	movs	r0, #16
 801d73c:	f7ff ff42 	bl	801d5c4 <malloc>
 801d740:	4602      	mov	r2, r0
 801d742:	61e0      	str	r0, [r4, #28]
 801d744:	b920      	cbnz	r0, 801d750 <_Balloc+0x20>
 801d746:	4b18      	ldr	r3, [pc, #96]	@ (801d7a8 <_Balloc+0x78>)
 801d748:	4818      	ldr	r0, [pc, #96]	@ (801d7ac <_Balloc+0x7c>)
 801d74a:	216b      	movs	r1, #107	@ 0x6b
 801d74c:	f000 fc2e 	bl	801dfac <__assert_func>
 801d750:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801d754:	6006      	str	r6, [r0, #0]
 801d756:	60c6      	str	r6, [r0, #12]
 801d758:	69e6      	ldr	r6, [r4, #28]
 801d75a:	68f3      	ldr	r3, [r6, #12]
 801d75c:	b183      	cbz	r3, 801d780 <_Balloc+0x50>
 801d75e:	69e3      	ldr	r3, [r4, #28]
 801d760:	68db      	ldr	r3, [r3, #12]
 801d762:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801d766:	b9b8      	cbnz	r0, 801d798 <_Balloc+0x68>
 801d768:	2101      	movs	r1, #1
 801d76a:	fa01 f605 	lsl.w	r6, r1, r5
 801d76e:	1d72      	adds	r2, r6, #5
 801d770:	0092      	lsls	r2, r2, #2
 801d772:	4620      	mov	r0, r4
 801d774:	f000 fc38 	bl	801dfe8 <_calloc_r>
 801d778:	b160      	cbz	r0, 801d794 <_Balloc+0x64>
 801d77a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801d77e:	e00e      	b.n	801d79e <_Balloc+0x6e>
 801d780:	2221      	movs	r2, #33	@ 0x21
 801d782:	2104      	movs	r1, #4
 801d784:	4620      	mov	r0, r4
 801d786:	f000 fc2f 	bl	801dfe8 <_calloc_r>
 801d78a:	69e3      	ldr	r3, [r4, #28]
 801d78c:	60f0      	str	r0, [r6, #12]
 801d78e:	68db      	ldr	r3, [r3, #12]
 801d790:	2b00      	cmp	r3, #0
 801d792:	d1e4      	bne.n	801d75e <_Balloc+0x2e>
 801d794:	2000      	movs	r0, #0
 801d796:	bd70      	pop	{r4, r5, r6, pc}
 801d798:	6802      	ldr	r2, [r0, #0]
 801d79a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801d79e:	2300      	movs	r3, #0
 801d7a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801d7a4:	e7f7      	b.n	801d796 <_Balloc+0x66>
 801d7a6:	bf00      	nop
 801d7a8:	0801f815 	.word	0x0801f815
 801d7ac:	0801f895 	.word	0x0801f895

0801d7b0 <_Bfree>:
 801d7b0:	b570      	push	{r4, r5, r6, lr}
 801d7b2:	69c6      	ldr	r6, [r0, #28]
 801d7b4:	4605      	mov	r5, r0
 801d7b6:	460c      	mov	r4, r1
 801d7b8:	b976      	cbnz	r6, 801d7d8 <_Bfree+0x28>
 801d7ba:	2010      	movs	r0, #16
 801d7bc:	f7ff ff02 	bl	801d5c4 <malloc>
 801d7c0:	4602      	mov	r2, r0
 801d7c2:	61e8      	str	r0, [r5, #28]
 801d7c4:	b920      	cbnz	r0, 801d7d0 <_Bfree+0x20>
 801d7c6:	4b09      	ldr	r3, [pc, #36]	@ (801d7ec <_Bfree+0x3c>)
 801d7c8:	4809      	ldr	r0, [pc, #36]	@ (801d7f0 <_Bfree+0x40>)
 801d7ca:	218f      	movs	r1, #143	@ 0x8f
 801d7cc:	f000 fbee 	bl	801dfac <__assert_func>
 801d7d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801d7d4:	6006      	str	r6, [r0, #0]
 801d7d6:	60c6      	str	r6, [r0, #12]
 801d7d8:	b13c      	cbz	r4, 801d7ea <_Bfree+0x3a>
 801d7da:	69eb      	ldr	r3, [r5, #28]
 801d7dc:	6862      	ldr	r2, [r4, #4]
 801d7de:	68db      	ldr	r3, [r3, #12]
 801d7e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801d7e4:	6021      	str	r1, [r4, #0]
 801d7e6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801d7ea:	bd70      	pop	{r4, r5, r6, pc}
 801d7ec:	0801f815 	.word	0x0801f815
 801d7f0:	0801f895 	.word	0x0801f895

0801d7f4 <__multadd>:
 801d7f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d7f8:	690d      	ldr	r5, [r1, #16]
 801d7fa:	4607      	mov	r7, r0
 801d7fc:	460c      	mov	r4, r1
 801d7fe:	461e      	mov	r6, r3
 801d800:	f101 0c14 	add.w	ip, r1, #20
 801d804:	2000      	movs	r0, #0
 801d806:	f8dc 3000 	ldr.w	r3, [ip]
 801d80a:	b299      	uxth	r1, r3
 801d80c:	fb02 6101 	mla	r1, r2, r1, r6
 801d810:	0c1e      	lsrs	r6, r3, #16
 801d812:	0c0b      	lsrs	r3, r1, #16
 801d814:	fb02 3306 	mla	r3, r2, r6, r3
 801d818:	b289      	uxth	r1, r1
 801d81a:	3001      	adds	r0, #1
 801d81c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801d820:	4285      	cmp	r5, r0
 801d822:	f84c 1b04 	str.w	r1, [ip], #4
 801d826:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801d82a:	dcec      	bgt.n	801d806 <__multadd+0x12>
 801d82c:	b30e      	cbz	r6, 801d872 <__multadd+0x7e>
 801d82e:	68a3      	ldr	r3, [r4, #8]
 801d830:	42ab      	cmp	r3, r5
 801d832:	dc19      	bgt.n	801d868 <__multadd+0x74>
 801d834:	6861      	ldr	r1, [r4, #4]
 801d836:	4638      	mov	r0, r7
 801d838:	3101      	adds	r1, #1
 801d83a:	f7ff ff79 	bl	801d730 <_Balloc>
 801d83e:	4680      	mov	r8, r0
 801d840:	b928      	cbnz	r0, 801d84e <__multadd+0x5a>
 801d842:	4602      	mov	r2, r0
 801d844:	4b0c      	ldr	r3, [pc, #48]	@ (801d878 <__multadd+0x84>)
 801d846:	480d      	ldr	r0, [pc, #52]	@ (801d87c <__multadd+0x88>)
 801d848:	21ba      	movs	r1, #186	@ 0xba
 801d84a:	f000 fbaf 	bl	801dfac <__assert_func>
 801d84e:	6922      	ldr	r2, [r4, #16]
 801d850:	3202      	adds	r2, #2
 801d852:	f104 010c 	add.w	r1, r4, #12
 801d856:	0092      	lsls	r2, r2, #2
 801d858:	300c      	adds	r0, #12
 801d85a:	f000 fb99 	bl	801df90 <memcpy>
 801d85e:	4621      	mov	r1, r4
 801d860:	4638      	mov	r0, r7
 801d862:	f7ff ffa5 	bl	801d7b0 <_Bfree>
 801d866:	4644      	mov	r4, r8
 801d868:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801d86c:	3501      	adds	r5, #1
 801d86e:	615e      	str	r6, [r3, #20]
 801d870:	6125      	str	r5, [r4, #16]
 801d872:	4620      	mov	r0, r4
 801d874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d878:	0801f884 	.word	0x0801f884
 801d87c:	0801f895 	.word	0x0801f895

0801d880 <__hi0bits>:
 801d880:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801d884:	4603      	mov	r3, r0
 801d886:	bf36      	itet	cc
 801d888:	0403      	lslcc	r3, r0, #16
 801d88a:	2000      	movcs	r0, #0
 801d88c:	2010      	movcc	r0, #16
 801d88e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801d892:	bf3c      	itt	cc
 801d894:	021b      	lslcc	r3, r3, #8
 801d896:	3008      	addcc	r0, #8
 801d898:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801d89c:	bf3c      	itt	cc
 801d89e:	011b      	lslcc	r3, r3, #4
 801d8a0:	3004      	addcc	r0, #4
 801d8a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801d8a6:	bf3c      	itt	cc
 801d8a8:	009b      	lslcc	r3, r3, #2
 801d8aa:	3002      	addcc	r0, #2
 801d8ac:	2b00      	cmp	r3, #0
 801d8ae:	db05      	blt.n	801d8bc <__hi0bits+0x3c>
 801d8b0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801d8b4:	f100 0001 	add.w	r0, r0, #1
 801d8b8:	bf08      	it	eq
 801d8ba:	2020      	moveq	r0, #32
 801d8bc:	4770      	bx	lr

0801d8be <__lo0bits>:
 801d8be:	6803      	ldr	r3, [r0, #0]
 801d8c0:	4602      	mov	r2, r0
 801d8c2:	f013 0007 	ands.w	r0, r3, #7
 801d8c6:	d00b      	beq.n	801d8e0 <__lo0bits+0x22>
 801d8c8:	07d9      	lsls	r1, r3, #31
 801d8ca:	d421      	bmi.n	801d910 <__lo0bits+0x52>
 801d8cc:	0798      	lsls	r0, r3, #30
 801d8ce:	bf49      	itett	mi
 801d8d0:	085b      	lsrmi	r3, r3, #1
 801d8d2:	089b      	lsrpl	r3, r3, #2
 801d8d4:	2001      	movmi	r0, #1
 801d8d6:	6013      	strmi	r3, [r2, #0]
 801d8d8:	bf5c      	itt	pl
 801d8da:	6013      	strpl	r3, [r2, #0]
 801d8dc:	2002      	movpl	r0, #2
 801d8de:	4770      	bx	lr
 801d8e0:	b299      	uxth	r1, r3
 801d8e2:	b909      	cbnz	r1, 801d8e8 <__lo0bits+0x2a>
 801d8e4:	0c1b      	lsrs	r3, r3, #16
 801d8e6:	2010      	movs	r0, #16
 801d8e8:	b2d9      	uxtb	r1, r3
 801d8ea:	b909      	cbnz	r1, 801d8f0 <__lo0bits+0x32>
 801d8ec:	3008      	adds	r0, #8
 801d8ee:	0a1b      	lsrs	r3, r3, #8
 801d8f0:	0719      	lsls	r1, r3, #28
 801d8f2:	bf04      	itt	eq
 801d8f4:	091b      	lsreq	r3, r3, #4
 801d8f6:	3004      	addeq	r0, #4
 801d8f8:	0799      	lsls	r1, r3, #30
 801d8fa:	bf04      	itt	eq
 801d8fc:	089b      	lsreq	r3, r3, #2
 801d8fe:	3002      	addeq	r0, #2
 801d900:	07d9      	lsls	r1, r3, #31
 801d902:	d403      	bmi.n	801d90c <__lo0bits+0x4e>
 801d904:	085b      	lsrs	r3, r3, #1
 801d906:	f100 0001 	add.w	r0, r0, #1
 801d90a:	d003      	beq.n	801d914 <__lo0bits+0x56>
 801d90c:	6013      	str	r3, [r2, #0]
 801d90e:	4770      	bx	lr
 801d910:	2000      	movs	r0, #0
 801d912:	4770      	bx	lr
 801d914:	2020      	movs	r0, #32
 801d916:	4770      	bx	lr

0801d918 <__i2b>:
 801d918:	b510      	push	{r4, lr}
 801d91a:	460c      	mov	r4, r1
 801d91c:	2101      	movs	r1, #1
 801d91e:	f7ff ff07 	bl	801d730 <_Balloc>
 801d922:	4602      	mov	r2, r0
 801d924:	b928      	cbnz	r0, 801d932 <__i2b+0x1a>
 801d926:	4b05      	ldr	r3, [pc, #20]	@ (801d93c <__i2b+0x24>)
 801d928:	4805      	ldr	r0, [pc, #20]	@ (801d940 <__i2b+0x28>)
 801d92a:	f240 1145 	movw	r1, #325	@ 0x145
 801d92e:	f000 fb3d 	bl	801dfac <__assert_func>
 801d932:	2301      	movs	r3, #1
 801d934:	6144      	str	r4, [r0, #20]
 801d936:	6103      	str	r3, [r0, #16]
 801d938:	bd10      	pop	{r4, pc}
 801d93a:	bf00      	nop
 801d93c:	0801f884 	.word	0x0801f884
 801d940:	0801f895 	.word	0x0801f895

0801d944 <__multiply>:
 801d944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d948:	4617      	mov	r7, r2
 801d94a:	690a      	ldr	r2, [r1, #16]
 801d94c:	693b      	ldr	r3, [r7, #16]
 801d94e:	429a      	cmp	r2, r3
 801d950:	bfa8      	it	ge
 801d952:	463b      	movge	r3, r7
 801d954:	4689      	mov	r9, r1
 801d956:	bfa4      	itt	ge
 801d958:	460f      	movge	r7, r1
 801d95a:	4699      	movge	r9, r3
 801d95c:	693d      	ldr	r5, [r7, #16]
 801d95e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801d962:	68bb      	ldr	r3, [r7, #8]
 801d964:	6879      	ldr	r1, [r7, #4]
 801d966:	eb05 060a 	add.w	r6, r5, sl
 801d96a:	42b3      	cmp	r3, r6
 801d96c:	b085      	sub	sp, #20
 801d96e:	bfb8      	it	lt
 801d970:	3101      	addlt	r1, #1
 801d972:	f7ff fedd 	bl	801d730 <_Balloc>
 801d976:	b930      	cbnz	r0, 801d986 <__multiply+0x42>
 801d978:	4602      	mov	r2, r0
 801d97a:	4b41      	ldr	r3, [pc, #260]	@ (801da80 <__multiply+0x13c>)
 801d97c:	4841      	ldr	r0, [pc, #260]	@ (801da84 <__multiply+0x140>)
 801d97e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801d982:	f000 fb13 	bl	801dfac <__assert_func>
 801d986:	f100 0414 	add.w	r4, r0, #20
 801d98a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 801d98e:	4623      	mov	r3, r4
 801d990:	2200      	movs	r2, #0
 801d992:	4573      	cmp	r3, lr
 801d994:	d320      	bcc.n	801d9d8 <__multiply+0x94>
 801d996:	f107 0814 	add.w	r8, r7, #20
 801d99a:	f109 0114 	add.w	r1, r9, #20
 801d99e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 801d9a2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 801d9a6:	9302      	str	r3, [sp, #8]
 801d9a8:	1beb      	subs	r3, r5, r7
 801d9aa:	3b15      	subs	r3, #21
 801d9ac:	f023 0303 	bic.w	r3, r3, #3
 801d9b0:	3304      	adds	r3, #4
 801d9b2:	3715      	adds	r7, #21
 801d9b4:	42bd      	cmp	r5, r7
 801d9b6:	bf38      	it	cc
 801d9b8:	2304      	movcc	r3, #4
 801d9ba:	9301      	str	r3, [sp, #4]
 801d9bc:	9b02      	ldr	r3, [sp, #8]
 801d9be:	9103      	str	r1, [sp, #12]
 801d9c0:	428b      	cmp	r3, r1
 801d9c2:	d80c      	bhi.n	801d9de <__multiply+0x9a>
 801d9c4:	2e00      	cmp	r6, #0
 801d9c6:	dd03      	ble.n	801d9d0 <__multiply+0x8c>
 801d9c8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801d9cc:	2b00      	cmp	r3, #0
 801d9ce:	d055      	beq.n	801da7c <__multiply+0x138>
 801d9d0:	6106      	str	r6, [r0, #16]
 801d9d2:	b005      	add	sp, #20
 801d9d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d9d8:	f843 2b04 	str.w	r2, [r3], #4
 801d9dc:	e7d9      	b.n	801d992 <__multiply+0x4e>
 801d9de:	f8b1 a000 	ldrh.w	sl, [r1]
 801d9e2:	f1ba 0f00 	cmp.w	sl, #0
 801d9e6:	d01f      	beq.n	801da28 <__multiply+0xe4>
 801d9e8:	46c4      	mov	ip, r8
 801d9ea:	46a1      	mov	r9, r4
 801d9ec:	2700      	movs	r7, #0
 801d9ee:	f85c 2b04 	ldr.w	r2, [ip], #4
 801d9f2:	f8d9 3000 	ldr.w	r3, [r9]
 801d9f6:	fa1f fb82 	uxth.w	fp, r2
 801d9fa:	b29b      	uxth	r3, r3
 801d9fc:	fb0a 330b 	mla	r3, sl, fp, r3
 801da00:	443b      	add	r3, r7
 801da02:	f8d9 7000 	ldr.w	r7, [r9]
 801da06:	0c12      	lsrs	r2, r2, #16
 801da08:	0c3f      	lsrs	r7, r7, #16
 801da0a:	fb0a 7202 	mla	r2, sl, r2, r7
 801da0e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 801da12:	b29b      	uxth	r3, r3
 801da14:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801da18:	4565      	cmp	r5, ip
 801da1a:	f849 3b04 	str.w	r3, [r9], #4
 801da1e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 801da22:	d8e4      	bhi.n	801d9ee <__multiply+0xaa>
 801da24:	9b01      	ldr	r3, [sp, #4]
 801da26:	50e7      	str	r7, [r4, r3]
 801da28:	9b03      	ldr	r3, [sp, #12]
 801da2a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801da2e:	3104      	adds	r1, #4
 801da30:	f1b9 0f00 	cmp.w	r9, #0
 801da34:	d020      	beq.n	801da78 <__multiply+0x134>
 801da36:	6823      	ldr	r3, [r4, #0]
 801da38:	4647      	mov	r7, r8
 801da3a:	46a4      	mov	ip, r4
 801da3c:	f04f 0a00 	mov.w	sl, #0
 801da40:	f8b7 b000 	ldrh.w	fp, [r7]
 801da44:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 801da48:	fb09 220b 	mla	r2, r9, fp, r2
 801da4c:	4452      	add	r2, sl
 801da4e:	b29b      	uxth	r3, r3
 801da50:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801da54:	f84c 3b04 	str.w	r3, [ip], #4
 801da58:	f857 3b04 	ldr.w	r3, [r7], #4
 801da5c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801da60:	f8bc 3000 	ldrh.w	r3, [ip]
 801da64:	fb09 330a 	mla	r3, r9, sl, r3
 801da68:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 801da6c:	42bd      	cmp	r5, r7
 801da6e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801da72:	d8e5      	bhi.n	801da40 <__multiply+0xfc>
 801da74:	9a01      	ldr	r2, [sp, #4]
 801da76:	50a3      	str	r3, [r4, r2]
 801da78:	3404      	adds	r4, #4
 801da7a:	e79f      	b.n	801d9bc <__multiply+0x78>
 801da7c:	3e01      	subs	r6, #1
 801da7e:	e7a1      	b.n	801d9c4 <__multiply+0x80>
 801da80:	0801f884 	.word	0x0801f884
 801da84:	0801f895 	.word	0x0801f895

0801da88 <__pow5mult>:
 801da88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801da8c:	4615      	mov	r5, r2
 801da8e:	f012 0203 	ands.w	r2, r2, #3
 801da92:	4607      	mov	r7, r0
 801da94:	460e      	mov	r6, r1
 801da96:	d007      	beq.n	801daa8 <__pow5mult+0x20>
 801da98:	4c25      	ldr	r4, [pc, #148]	@ (801db30 <__pow5mult+0xa8>)
 801da9a:	3a01      	subs	r2, #1
 801da9c:	2300      	movs	r3, #0
 801da9e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801daa2:	f7ff fea7 	bl	801d7f4 <__multadd>
 801daa6:	4606      	mov	r6, r0
 801daa8:	10ad      	asrs	r5, r5, #2
 801daaa:	d03d      	beq.n	801db28 <__pow5mult+0xa0>
 801daac:	69fc      	ldr	r4, [r7, #28]
 801daae:	b97c      	cbnz	r4, 801dad0 <__pow5mult+0x48>
 801dab0:	2010      	movs	r0, #16
 801dab2:	f7ff fd87 	bl	801d5c4 <malloc>
 801dab6:	4602      	mov	r2, r0
 801dab8:	61f8      	str	r0, [r7, #28]
 801daba:	b928      	cbnz	r0, 801dac8 <__pow5mult+0x40>
 801dabc:	4b1d      	ldr	r3, [pc, #116]	@ (801db34 <__pow5mult+0xac>)
 801dabe:	481e      	ldr	r0, [pc, #120]	@ (801db38 <__pow5mult+0xb0>)
 801dac0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801dac4:	f000 fa72 	bl	801dfac <__assert_func>
 801dac8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801dacc:	6004      	str	r4, [r0, #0]
 801dace:	60c4      	str	r4, [r0, #12]
 801dad0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801dad4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801dad8:	b94c      	cbnz	r4, 801daee <__pow5mult+0x66>
 801dada:	f240 2171 	movw	r1, #625	@ 0x271
 801dade:	4638      	mov	r0, r7
 801dae0:	f7ff ff1a 	bl	801d918 <__i2b>
 801dae4:	2300      	movs	r3, #0
 801dae6:	f8c8 0008 	str.w	r0, [r8, #8]
 801daea:	4604      	mov	r4, r0
 801daec:	6003      	str	r3, [r0, #0]
 801daee:	f04f 0900 	mov.w	r9, #0
 801daf2:	07eb      	lsls	r3, r5, #31
 801daf4:	d50a      	bpl.n	801db0c <__pow5mult+0x84>
 801daf6:	4631      	mov	r1, r6
 801daf8:	4622      	mov	r2, r4
 801dafa:	4638      	mov	r0, r7
 801dafc:	f7ff ff22 	bl	801d944 <__multiply>
 801db00:	4631      	mov	r1, r6
 801db02:	4680      	mov	r8, r0
 801db04:	4638      	mov	r0, r7
 801db06:	f7ff fe53 	bl	801d7b0 <_Bfree>
 801db0a:	4646      	mov	r6, r8
 801db0c:	106d      	asrs	r5, r5, #1
 801db0e:	d00b      	beq.n	801db28 <__pow5mult+0xa0>
 801db10:	6820      	ldr	r0, [r4, #0]
 801db12:	b938      	cbnz	r0, 801db24 <__pow5mult+0x9c>
 801db14:	4622      	mov	r2, r4
 801db16:	4621      	mov	r1, r4
 801db18:	4638      	mov	r0, r7
 801db1a:	f7ff ff13 	bl	801d944 <__multiply>
 801db1e:	6020      	str	r0, [r4, #0]
 801db20:	f8c0 9000 	str.w	r9, [r0]
 801db24:	4604      	mov	r4, r0
 801db26:	e7e4      	b.n	801daf2 <__pow5mult+0x6a>
 801db28:	4630      	mov	r0, r6
 801db2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801db2e:	bf00      	nop
 801db30:	0801f948 	.word	0x0801f948
 801db34:	0801f815 	.word	0x0801f815
 801db38:	0801f895 	.word	0x0801f895

0801db3c <__lshift>:
 801db3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801db40:	460c      	mov	r4, r1
 801db42:	6849      	ldr	r1, [r1, #4]
 801db44:	6923      	ldr	r3, [r4, #16]
 801db46:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801db4a:	68a3      	ldr	r3, [r4, #8]
 801db4c:	4607      	mov	r7, r0
 801db4e:	4691      	mov	r9, r2
 801db50:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801db54:	f108 0601 	add.w	r6, r8, #1
 801db58:	42b3      	cmp	r3, r6
 801db5a:	db0b      	blt.n	801db74 <__lshift+0x38>
 801db5c:	4638      	mov	r0, r7
 801db5e:	f7ff fde7 	bl	801d730 <_Balloc>
 801db62:	4605      	mov	r5, r0
 801db64:	b948      	cbnz	r0, 801db7a <__lshift+0x3e>
 801db66:	4602      	mov	r2, r0
 801db68:	4b28      	ldr	r3, [pc, #160]	@ (801dc0c <__lshift+0xd0>)
 801db6a:	4829      	ldr	r0, [pc, #164]	@ (801dc10 <__lshift+0xd4>)
 801db6c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801db70:	f000 fa1c 	bl	801dfac <__assert_func>
 801db74:	3101      	adds	r1, #1
 801db76:	005b      	lsls	r3, r3, #1
 801db78:	e7ee      	b.n	801db58 <__lshift+0x1c>
 801db7a:	2300      	movs	r3, #0
 801db7c:	f100 0114 	add.w	r1, r0, #20
 801db80:	f100 0210 	add.w	r2, r0, #16
 801db84:	4618      	mov	r0, r3
 801db86:	4553      	cmp	r3, sl
 801db88:	db33      	blt.n	801dbf2 <__lshift+0xb6>
 801db8a:	6920      	ldr	r0, [r4, #16]
 801db8c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801db90:	f104 0314 	add.w	r3, r4, #20
 801db94:	f019 091f 	ands.w	r9, r9, #31
 801db98:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801db9c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801dba0:	d02b      	beq.n	801dbfa <__lshift+0xbe>
 801dba2:	f1c9 0e20 	rsb	lr, r9, #32
 801dba6:	468a      	mov	sl, r1
 801dba8:	2200      	movs	r2, #0
 801dbaa:	6818      	ldr	r0, [r3, #0]
 801dbac:	fa00 f009 	lsl.w	r0, r0, r9
 801dbb0:	4310      	orrs	r0, r2
 801dbb2:	f84a 0b04 	str.w	r0, [sl], #4
 801dbb6:	f853 2b04 	ldr.w	r2, [r3], #4
 801dbba:	459c      	cmp	ip, r3
 801dbbc:	fa22 f20e 	lsr.w	r2, r2, lr
 801dbc0:	d8f3      	bhi.n	801dbaa <__lshift+0x6e>
 801dbc2:	ebac 0304 	sub.w	r3, ip, r4
 801dbc6:	3b15      	subs	r3, #21
 801dbc8:	f023 0303 	bic.w	r3, r3, #3
 801dbcc:	3304      	adds	r3, #4
 801dbce:	f104 0015 	add.w	r0, r4, #21
 801dbd2:	4560      	cmp	r0, ip
 801dbd4:	bf88      	it	hi
 801dbd6:	2304      	movhi	r3, #4
 801dbd8:	50ca      	str	r2, [r1, r3]
 801dbda:	b10a      	cbz	r2, 801dbe0 <__lshift+0xa4>
 801dbdc:	f108 0602 	add.w	r6, r8, #2
 801dbe0:	3e01      	subs	r6, #1
 801dbe2:	4638      	mov	r0, r7
 801dbe4:	612e      	str	r6, [r5, #16]
 801dbe6:	4621      	mov	r1, r4
 801dbe8:	f7ff fde2 	bl	801d7b0 <_Bfree>
 801dbec:	4628      	mov	r0, r5
 801dbee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801dbf2:	f842 0f04 	str.w	r0, [r2, #4]!
 801dbf6:	3301      	adds	r3, #1
 801dbf8:	e7c5      	b.n	801db86 <__lshift+0x4a>
 801dbfa:	3904      	subs	r1, #4
 801dbfc:	f853 2b04 	ldr.w	r2, [r3], #4
 801dc00:	f841 2f04 	str.w	r2, [r1, #4]!
 801dc04:	459c      	cmp	ip, r3
 801dc06:	d8f9      	bhi.n	801dbfc <__lshift+0xc0>
 801dc08:	e7ea      	b.n	801dbe0 <__lshift+0xa4>
 801dc0a:	bf00      	nop
 801dc0c:	0801f884 	.word	0x0801f884
 801dc10:	0801f895 	.word	0x0801f895

0801dc14 <__mcmp>:
 801dc14:	690a      	ldr	r2, [r1, #16]
 801dc16:	4603      	mov	r3, r0
 801dc18:	6900      	ldr	r0, [r0, #16]
 801dc1a:	1a80      	subs	r0, r0, r2
 801dc1c:	b530      	push	{r4, r5, lr}
 801dc1e:	d10e      	bne.n	801dc3e <__mcmp+0x2a>
 801dc20:	3314      	adds	r3, #20
 801dc22:	3114      	adds	r1, #20
 801dc24:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801dc28:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801dc2c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801dc30:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801dc34:	4295      	cmp	r5, r2
 801dc36:	d003      	beq.n	801dc40 <__mcmp+0x2c>
 801dc38:	d205      	bcs.n	801dc46 <__mcmp+0x32>
 801dc3a:	f04f 30ff 	mov.w	r0, #4294967295
 801dc3e:	bd30      	pop	{r4, r5, pc}
 801dc40:	42a3      	cmp	r3, r4
 801dc42:	d3f3      	bcc.n	801dc2c <__mcmp+0x18>
 801dc44:	e7fb      	b.n	801dc3e <__mcmp+0x2a>
 801dc46:	2001      	movs	r0, #1
 801dc48:	e7f9      	b.n	801dc3e <__mcmp+0x2a>
	...

0801dc4c <__mdiff>:
 801dc4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dc50:	4689      	mov	r9, r1
 801dc52:	4606      	mov	r6, r0
 801dc54:	4611      	mov	r1, r2
 801dc56:	4648      	mov	r0, r9
 801dc58:	4614      	mov	r4, r2
 801dc5a:	f7ff ffdb 	bl	801dc14 <__mcmp>
 801dc5e:	1e05      	subs	r5, r0, #0
 801dc60:	d112      	bne.n	801dc88 <__mdiff+0x3c>
 801dc62:	4629      	mov	r1, r5
 801dc64:	4630      	mov	r0, r6
 801dc66:	f7ff fd63 	bl	801d730 <_Balloc>
 801dc6a:	4602      	mov	r2, r0
 801dc6c:	b928      	cbnz	r0, 801dc7a <__mdiff+0x2e>
 801dc6e:	4b3e      	ldr	r3, [pc, #248]	@ (801dd68 <__mdiff+0x11c>)
 801dc70:	f240 2137 	movw	r1, #567	@ 0x237
 801dc74:	483d      	ldr	r0, [pc, #244]	@ (801dd6c <__mdiff+0x120>)
 801dc76:	f000 f999 	bl	801dfac <__assert_func>
 801dc7a:	2301      	movs	r3, #1
 801dc7c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801dc80:	4610      	mov	r0, r2
 801dc82:	b003      	add	sp, #12
 801dc84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dc88:	bfbc      	itt	lt
 801dc8a:	464b      	movlt	r3, r9
 801dc8c:	46a1      	movlt	r9, r4
 801dc8e:	4630      	mov	r0, r6
 801dc90:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801dc94:	bfba      	itte	lt
 801dc96:	461c      	movlt	r4, r3
 801dc98:	2501      	movlt	r5, #1
 801dc9a:	2500      	movge	r5, #0
 801dc9c:	f7ff fd48 	bl	801d730 <_Balloc>
 801dca0:	4602      	mov	r2, r0
 801dca2:	b918      	cbnz	r0, 801dcac <__mdiff+0x60>
 801dca4:	4b30      	ldr	r3, [pc, #192]	@ (801dd68 <__mdiff+0x11c>)
 801dca6:	f240 2145 	movw	r1, #581	@ 0x245
 801dcaa:	e7e3      	b.n	801dc74 <__mdiff+0x28>
 801dcac:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801dcb0:	6926      	ldr	r6, [r4, #16]
 801dcb2:	60c5      	str	r5, [r0, #12]
 801dcb4:	f109 0310 	add.w	r3, r9, #16
 801dcb8:	f109 0514 	add.w	r5, r9, #20
 801dcbc:	f104 0e14 	add.w	lr, r4, #20
 801dcc0:	f100 0b14 	add.w	fp, r0, #20
 801dcc4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801dcc8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801dccc:	9301      	str	r3, [sp, #4]
 801dcce:	46d9      	mov	r9, fp
 801dcd0:	f04f 0c00 	mov.w	ip, #0
 801dcd4:	9b01      	ldr	r3, [sp, #4]
 801dcd6:	f85e 0b04 	ldr.w	r0, [lr], #4
 801dcda:	f853 af04 	ldr.w	sl, [r3, #4]!
 801dcde:	9301      	str	r3, [sp, #4]
 801dce0:	b281      	uxth	r1, r0
 801dce2:	fa1f f38a 	uxth.w	r3, sl
 801dce6:	1a5b      	subs	r3, r3, r1
 801dce8:	0c00      	lsrs	r0, r0, #16
 801dcea:	4463      	add	r3, ip
 801dcec:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801dcf0:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801dcf4:	b29b      	uxth	r3, r3
 801dcf6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801dcfa:	4576      	cmp	r6, lr
 801dcfc:	f849 3b04 	str.w	r3, [r9], #4
 801dd00:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801dd04:	d8e6      	bhi.n	801dcd4 <__mdiff+0x88>
 801dd06:	1b33      	subs	r3, r6, r4
 801dd08:	3b15      	subs	r3, #21
 801dd0a:	f023 0303 	bic.w	r3, r3, #3
 801dd0e:	3415      	adds	r4, #21
 801dd10:	3304      	adds	r3, #4
 801dd12:	42a6      	cmp	r6, r4
 801dd14:	bf38      	it	cc
 801dd16:	2304      	movcc	r3, #4
 801dd18:	441d      	add	r5, r3
 801dd1a:	445b      	add	r3, fp
 801dd1c:	461e      	mov	r6, r3
 801dd1e:	462c      	mov	r4, r5
 801dd20:	4544      	cmp	r4, r8
 801dd22:	d30e      	bcc.n	801dd42 <__mdiff+0xf6>
 801dd24:	f108 0103 	add.w	r1, r8, #3
 801dd28:	1b49      	subs	r1, r1, r5
 801dd2a:	f021 0103 	bic.w	r1, r1, #3
 801dd2e:	3d03      	subs	r5, #3
 801dd30:	45a8      	cmp	r8, r5
 801dd32:	bf38      	it	cc
 801dd34:	2100      	movcc	r1, #0
 801dd36:	440b      	add	r3, r1
 801dd38:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801dd3c:	b191      	cbz	r1, 801dd64 <__mdiff+0x118>
 801dd3e:	6117      	str	r7, [r2, #16]
 801dd40:	e79e      	b.n	801dc80 <__mdiff+0x34>
 801dd42:	f854 1b04 	ldr.w	r1, [r4], #4
 801dd46:	46e6      	mov	lr, ip
 801dd48:	0c08      	lsrs	r0, r1, #16
 801dd4a:	fa1c fc81 	uxtah	ip, ip, r1
 801dd4e:	4471      	add	r1, lr
 801dd50:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801dd54:	b289      	uxth	r1, r1
 801dd56:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801dd5a:	f846 1b04 	str.w	r1, [r6], #4
 801dd5e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801dd62:	e7dd      	b.n	801dd20 <__mdiff+0xd4>
 801dd64:	3f01      	subs	r7, #1
 801dd66:	e7e7      	b.n	801dd38 <__mdiff+0xec>
 801dd68:	0801f884 	.word	0x0801f884
 801dd6c:	0801f895 	.word	0x0801f895

0801dd70 <__d2b>:
 801dd70:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 801dd74:	2101      	movs	r1, #1
 801dd76:	9e08      	ldr	r6, [sp, #32]
 801dd78:	4690      	mov	r8, r2
 801dd7a:	4699      	mov	r9, r3
 801dd7c:	f7ff fcd8 	bl	801d730 <_Balloc>
 801dd80:	4604      	mov	r4, r0
 801dd82:	b930      	cbnz	r0, 801dd92 <__d2b+0x22>
 801dd84:	4602      	mov	r2, r0
 801dd86:	4b24      	ldr	r3, [pc, #144]	@ (801de18 <__d2b+0xa8>)
 801dd88:	4824      	ldr	r0, [pc, #144]	@ (801de1c <__d2b+0xac>)
 801dd8a:	f240 310f 	movw	r1, #783	@ 0x30f
 801dd8e:	f000 f90d 	bl	801dfac <__assert_func>
 801dd92:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801dd96:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801dd9a:	b10d      	cbz	r5, 801dda0 <__d2b+0x30>
 801dd9c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801dda0:	9301      	str	r3, [sp, #4]
 801dda2:	f1b8 0300 	subs.w	r3, r8, #0
 801dda6:	d024      	beq.n	801ddf2 <__d2b+0x82>
 801dda8:	4668      	mov	r0, sp
 801ddaa:	9300      	str	r3, [sp, #0]
 801ddac:	f7ff fd87 	bl	801d8be <__lo0bits>
 801ddb0:	e9dd 1200 	ldrd	r1, r2, [sp]
 801ddb4:	b1d8      	cbz	r0, 801ddee <__d2b+0x7e>
 801ddb6:	f1c0 0320 	rsb	r3, r0, #32
 801ddba:	fa02 f303 	lsl.w	r3, r2, r3
 801ddbe:	430b      	orrs	r3, r1
 801ddc0:	40c2      	lsrs	r2, r0
 801ddc2:	6163      	str	r3, [r4, #20]
 801ddc4:	9201      	str	r2, [sp, #4]
 801ddc6:	9b01      	ldr	r3, [sp, #4]
 801ddc8:	61a3      	str	r3, [r4, #24]
 801ddca:	2b00      	cmp	r3, #0
 801ddcc:	bf0c      	ite	eq
 801ddce:	2201      	moveq	r2, #1
 801ddd0:	2202      	movne	r2, #2
 801ddd2:	6122      	str	r2, [r4, #16]
 801ddd4:	b1ad      	cbz	r5, 801de02 <__d2b+0x92>
 801ddd6:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801ddda:	4405      	add	r5, r0
 801dddc:	6035      	str	r5, [r6, #0]
 801ddde:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801dde2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dde4:	6018      	str	r0, [r3, #0]
 801dde6:	4620      	mov	r0, r4
 801dde8:	b002      	add	sp, #8
 801ddea:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 801ddee:	6161      	str	r1, [r4, #20]
 801ddf0:	e7e9      	b.n	801ddc6 <__d2b+0x56>
 801ddf2:	a801      	add	r0, sp, #4
 801ddf4:	f7ff fd63 	bl	801d8be <__lo0bits>
 801ddf8:	9b01      	ldr	r3, [sp, #4]
 801ddfa:	6163      	str	r3, [r4, #20]
 801ddfc:	3020      	adds	r0, #32
 801ddfe:	2201      	movs	r2, #1
 801de00:	e7e7      	b.n	801ddd2 <__d2b+0x62>
 801de02:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801de06:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801de0a:	6030      	str	r0, [r6, #0]
 801de0c:	6918      	ldr	r0, [r3, #16]
 801de0e:	f7ff fd37 	bl	801d880 <__hi0bits>
 801de12:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801de16:	e7e4      	b.n	801dde2 <__d2b+0x72>
 801de18:	0801f884 	.word	0x0801f884
 801de1c:	0801f895 	.word	0x0801f895

0801de20 <__sflush_r>:
 801de20:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801de24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801de26:	0716      	lsls	r6, r2, #28
 801de28:	4605      	mov	r5, r0
 801de2a:	460c      	mov	r4, r1
 801de2c:	d454      	bmi.n	801ded8 <__sflush_r+0xb8>
 801de2e:	684b      	ldr	r3, [r1, #4]
 801de30:	2b00      	cmp	r3, #0
 801de32:	dc02      	bgt.n	801de3a <__sflush_r+0x1a>
 801de34:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801de36:	2b00      	cmp	r3, #0
 801de38:	dd48      	ble.n	801decc <__sflush_r+0xac>
 801de3a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801de3c:	2e00      	cmp	r6, #0
 801de3e:	d045      	beq.n	801decc <__sflush_r+0xac>
 801de40:	2300      	movs	r3, #0
 801de42:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801de46:	682f      	ldr	r7, [r5, #0]
 801de48:	6a21      	ldr	r1, [r4, #32]
 801de4a:	602b      	str	r3, [r5, #0]
 801de4c:	d030      	beq.n	801deb0 <__sflush_r+0x90>
 801de4e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801de50:	89a3      	ldrh	r3, [r4, #12]
 801de52:	0759      	lsls	r1, r3, #29
 801de54:	d505      	bpl.n	801de62 <__sflush_r+0x42>
 801de56:	6863      	ldr	r3, [r4, #4]
 801de58:	1ad2      	subs	r2, r2, r3
 801de5a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801de5c:	b10b      	cbz	r3, 801de62 <__sflush_r+0x42>
 801de5e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801de60:	1ad2      	subs	r2, r2, r3
 801de62:	2300      	movs	r3, #0
 801de64:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801de66:	6a21      	ldr	r1, [r4, #32]
 801de68:	4628      	mov	r0, r5
 801de6a:	47b0      	blx	r6
 801de6c:	1c43      	adds	r3, r0, #1
 801de6e:	89a3      	ldrh	r3, [r4, #12]
 801de70:	d106      	bne.n	801de80 <__sflush_r+0x60>
 801de72:	6829      	ldr	r1, [r5, #0]
 801de74:	291d      	cmp	r1, #29
 801de76:	d82b      	bhi.n	801ded0 <__sflush_r+0xb0>
 801de78:	4a28      	ldr	r2, [pc, #160]	@ (801df1c <__sflush_r+0xfc>)
 801de7a:	40ca      	lsrs	r2, r1
 801de7c:	07d6      	lsls	r6, r2, #31
 801de7e:	d527      	bpl.n	801ded0 <__sflush_r+0xb0>
 801de80:	2200      	movs	r2, #0
 801de82:	6062      	str	r2, [r4, #4]
 801de84:	04d9      	lsls	r1, r3, #19
 801de86:	6922      	ldr	r2, [r4, #16]
 801de88:	6022      	str	r2, [r4, #0]
 801de8a:	d504      	bpl.n	801de96 <__sflush_r+0x76>
 801de8c:	1c42      	adds	r2, r0, #1
 801de8e:	d101      	bne.n	801de94 <__sflush_r+0x74>
 801de90:	682b      	ldr	r3, [r5, #0]
 801de92:	b903      	cbnz	r3, 801de96 <__sflush_r+0x76>
 801de94:	6560      	str	r0, [r4, #84]	@ 0x54
 801de96:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801de98:	602f      	str	r7, [r5, #0]
 801de9a:	b1b9      	cbz	r1, 801decc <__sflush_r+0xac>
 801de9c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801dea0:	4299      	cmp	r1, r3
 801dea2:	d002      	beq.n	801deaa <__sflush_r+0x8a>
 801dea4:	4628      	mov	r0, r5
 801dea6:	f7ff fb43 	bl	801d530 <_free_r>
 801deaa:	2300      	movs	r3, #0
 801deac:	6363      	str	r3, [r4, #52]	@ 0x34
 801deae:	e00d      	b.n	801decc <__sflush_r+0xac>
 801deb0:	2301      	movs	r3, #1
 801deb2:	4628      	mov	r0, r5
 801deb4:	47b0      	blx	r6
 801deb6:	4602      	mov	r2, r0
 801deb8:	1c50      	adds	r0, r2, #1
 801deba:	d1c9      	bne.n	801de50 <__sflush_r+0x30>
 801debc:	682b      	ldr	r3, [r5, #0]
 801debe:	2b00      	cmp	r3, #0
 801dec0:	d0c6      	beq.n	801de50 <__sflush_r+0x30>
 801dec2:	2b1d      	cmp	r3, #29
 801dec4:	d001      	beq.n	801deca <__sflush_r+0xaa>
 801dec6:	2b16      	cmp	r3, #22
 801dec8:	d11d      	bne.n	801df06 <__sflush_r+0xe6>
 801deca:	602f      	str	r7, [r5, #0]
 801decc:	2000      	movs	r0, #0
 801dece:	e021      	b.n	801df14 <__sflush_r+0xf4>
 801ded0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ded4:	b21b      	sxth	r3, r3
 801ded6:	e01a      	b.n	801df0e <__sflush_r+0xee>
 801ded8:	690f      	ldr	r7, [r1, #16]
 801deda:	2f00      	cmp	r7, #0
 801dedc:	d0f6      	beq.n	801decc <__sflush_r+0xac>
 801dede:	0793      	lsls	r3, r2, #30
 801dee0:	680e      	ldr	r6, [r1, #0]
 801dee2:	bf08      	it	eq
 801dee4:	694b      	ldreq	r3, [r1, #20]
 801dee6:	600f      	str	r7, [r1, #0]
 801dee8:	bf18      	it	ne
 801deea:	2300      	movne	r3, #0
 801deec:	1bf6      	subs	r6, r6, r7
 801deee:	608b      	str	r3, [r1, #8]
 801def0:	2e00      	cmp	r6, #0
 801def2:	ddeb      	ble.n	801decc <__sflush_r+0xac>
 801def4:	6a21      	ldr	r1, [r4, #32]
 801def6:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 801defa:	4633      	mov	r3, r6
 801defc:	463a      	mov	r2, r7
 801defe:	4628      	mov	r0, r5
 801df00:	47e0      	blx	ip
 801df02:	2800      	cmp	r0, #0
 801df04:	dc07      	bgt.n	801df16 <__sflush_r+0xf6>
 801df06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801df0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801df0e:	81a3      	strh	r3, [r4, #12]
 801df10:	f04f 30ff 	mov.w	r0, #4294967295
 801df14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801df16:	4407      	add	r7, r0
 801df18:	1a36      	subs	r6, r6, r0
 801df1a:	e7e9      	b.n	801def0 <__sflush_r+0xd0>
 801df1c:	20400001 	.word	0x20400001

0801df20 <_fflush_r>:
 801df20:	b538      	push	{r3, r4, r5, lr}
 801df22:	690b      	ldr	r3, [r1, #16]
 801df24:	4605      	mov	r5, r0
 801df26:	460c      	mov	r4, r1
 801df28:	b913      	cbnz	r3, 801df30 <_fflush_r+0x10>
 801df2a:	2500      	movs	r5, #0
 801df2c:	4628      	mov	r0, r5
 801df2e:	bd38      	pop	{r3, r4, r5, pc}
 801df30:	b118      	cbz	r0, 801df3a <_fflush_r+0x1a>
 801df32:	6a03      	ldr	r3, [r0, #32]
 801df34:	b90b      	cbnz	r3, 801df3a <_fflush_r+0x1a>
 801df36:	f7fe fba7 	bl	801c688 <__sinit>
 801df3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801df3e:	2b00      	cmp	r3, #0
 801df40:	d0f3      	beq.n	801df2a <_fflush_r+0xa>
 801df42:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801df44:	07d0      	lsls	r0, r2, #31
 801df46:	d404      	bmi.n	801df52 <_fflush_r+0x32>
 801df48:	0599      	lsls	r1, r3, #22
 801df4a:	d402      	bmi.n	801df52 <_fflush_r+0x32>
 801df4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801df4e:	f7fe fc92 	bl	801c876 <__retarget_lock_acquire_recursive>
 801df52:	4628      	mov	r0, r5
 801df54:	4621      	mov	r1, r4
 801df56:	f7ff ff63 	bl	801de20 <__sflush_r>
 801df5a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801df5c:	07da      	lsls	r2, r3, #31
 801df5e:	4605      	mov	r5, r0
 801df60:	d4e4      	bmi.n	801df2c <_fflush_r+0xc>
 801df62:	89a3      	ldrh	r3, [r4, #12]
 801df64:	059b      	lsls	r3, r3, #22
 801df66:	d4e1      	bmi.n	801df2c <_fflush_r+0xc>
 801df68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801df6a:	f7fe fc85 	bl	801c878 <__retarget_lock_release_recursive>
 801df6e:	e7dd      	b.n	801df2c <_fflush_r+0xc>

0801df70 <_sbrk_r>:
 801df70:	b538      	push	{r3, r4, r5, lr}
 801df72:	4d06      	ldr	r5, [pc, #24]	@ (801df8c <_sbrk_r+0x1c>)
 801df74:	2300      	movs	r3, #0
 801df76:	4604      	mov	r4, r0
 801df78:	4608      	mov	r0, r1
 801df7a:	602b      	str	r3, [r5, #0]
 801df7c:	f7e4 fa76 	bl	800246c <_sbrk>
 801df80:	1c43      	adds	r3, r0, #1
 801df82:	d102      	bne.n	801df8a <_sbrk_r+0x1a>
 801df84:	682b      	ldr	r3, [r5, #0]
 801df86:	b103      	cbz	r3, 801df8a <_sbrk_r+0x1a>
 801df88:	6023      	str	r3, [r4, #0]
 801df8a:	bd38      	pop	{r3, r4, r5, pc}
 801df8c:	20002518 	.word	0x20002518

0801df90 <memcpy>:
 801df90:	440a      	add	r2, r1
 801df92:	4291      	cmp	r1, r2
 801df94:	f100 33ff 	add.w	r3, r0, #4294967295
 801df98:	d100      	bne.n	801df9c <memcpy+0xc>
 801df9a:	4770      	bx	lr
 801df9c:	b510      	push	{r4, lr}
 801df9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 801dfa2:	f803 4f01 	strb.w	r4, [r3, #1]!
 801dfa6:	4291      	cmp	r1, r2
 801dfa8:	d1f9      	bne.n	801df9e <memcpy+0xe>
 801dfaa:	bd10      	pop	{r4, pc}

0801dfac <__assert_func>:
 801dfac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801dfae:	4614      	mov	r4, r2
 801dfb0:	461a      	mov	r2, r3
 801dfb2:	4b09      	ldr	r3, [pc, #36]	@ (801dfd8 <__assert_func+0x2c>)
 801dfb4:	681b      	ldr	r3, [r3, #0]
 801dfb6:	4605      	mov	r5, r0
 801dfb8:	68d8      	ldr	r0, [r3, #12]
 801dfba:	b14c      	cbz	r4, 801dfd0 <__assert_func+0x24>
 801dfbc:	4b07      	ldr	r3, [pc, #28]	@ (801dfdc <__assert_func+0x30>)
 801dfbe:	9100      	str	r1, [sp, #0]
 801dfc0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801dfc4:	4906      	ldr	r1, [pc, #24]	@ (801dfe0 <__assert_func+0x34>)
 801dfc6:	462b      	mov	r3, r5
 801dfc8:	f000 f842 	bl	801e050 <fiprintf>
 801dfcc:	f000 f852 	bl	801e074 <abort>
 801dfd0:	4b04      	ldr	r3, [pc, #16]	@ (801dfe4 <__assert_func+0x38>)
 801dfd2:	461c      	mov	r4, r3
 801dfd4:	e7f3      	b.n	801dfbe <__assert_func+0x12>
 801dfd6:	bf00      	nop
 801dfd8:	2000014c 	.word	0x2000014c
 801dfdc:	0801f8f8 	.word	0x0801f8f8
 801dfe0:	0801f905 	.word	0x0801f905
 801dfe4:	0801f933 	.word	0x0801f933

0801dfe8 <_calloc_r>:
 801dfe8:	b570      	push	{r4, r5, r6, lr}
 801dfea:	fba1 5402 	umull	r5, r4, r1, r2
 801dfee:	b934      	cbnz	r4, 801dffe <_calloc_r+0x16>
 801dff0:	4629      	mov	r1, r5
 801dff2:	f7ff fb11 	bl	801d618 <_malloc_r>
 801dff6:	4606      	mov	r6, r0
 801dff8:	b928      	cbnz	r0, 801e006 <_calloc_r+0x1e>
 801dffa:	4630      	mov	r0, r6
 801dffc:	bd70      	pop	{r4, r5, r6, pc}
 801dffe:	220c      	movs	r2, #12
 801e000:	6002      	str	r2, [r0, #0]
 801e002:	2600      	movs	r6, #0
 801e004:	e7f9      	b.n	801dffa <_calloc_r+0x12>
 801e006:	462a      	mov	r2, r5
 801e008:	4621      	mov	r1, r4
 801e00a:	f7fe fbb6 	bl	801c77a <memset>
 801e00e:	e7f4      	b.n	801dffa <_calloc_r+0x12>

0801e010 <__ascii_mbtowc>:
 801e010:	b082      	sub	sp, #8
 801e012:	b901      	cbnz	r1, 801e016 <__ascii_mbtowc+0x6>
 801e014:	a901      	add	r1, sp, #4
 801e016:	b142      	cbz	r2, 801e02a <__ascii_mbtowc+0x1a>
 801e018:	b14b      	cbz	r3, 801e02e <__ascii_mbtowc+0x1e>
 801e01a:	7813      	ldrb	r3, [r2, #0]
 801e01c:	600b      	str	r3, [r1, #0]
 801e01e:	7812      	ldrb	r2, [r2, #0]
 801e020:	1e10      	subs	r0, r2, #0
 801e022:	bf18      	it	ne
 801e024:	2001      	movne	r0, #1
 801e026:	b002      	add	sp, #8
 801e028:	4770      	bx	lr
 801e02a:	4610      	mov	r0, r2
 801e02c:	e7fb      	b.n	801e026 <__ascii_mbtowc+0x16>
 801e02e:	f06f 0001 	mvn.w	r0, #1
 801e032:	e7f8      	b.n	801e026 <__ascii_mbtowc+0x16>

0801e034 <__ascii_wctomb>:
 801e034:	4603      	mov	r3, r0
 801e036:	4608      	mov	r0, r1
 801e038:	b141      	cbz	r1, 801e04c <__ascii_wctomb+0x18>
 801e03a:	2aff      	cmp	r2, #255	@ 0xff
 801e03c:	d904      	bls.n	801e048 <__ascii_wctomb+0x14>
 801e03e:	228a      	movs	r2, #138	@ 0x8a
 801e040:	601a      	str	r2, [r3, #0]
 801e042:	f04f 30ff 	mov.w	r0, #4294967295
 801e046:	4770      	bx	lr
 801e048:	700a      	strb	r2, [r1, #0]
 801e04a:	2001      	movs	r0, #1
 801e04c:	4770      	bx	lr
	...

0801e050 <fiprintf>:
 801e050:	b40e      	push	{r1, r2, r3}
 801e052:	b503      	push	{r0, r1, lr}
 801e054:	4601      	mov	r1, r0
 801e056:	ab03      	add	r3, sp, #12
 801e058:	4805      	ldr	r0, [pc, #20]	@ (801e070 <fiprintf+0x20>)
 801e05a:	f853 2b04 	ldr.w	r2, [r3], #4
 801e05e:	6800      	ldr	r0, [r0, #0]
 801e060:	9301      	str	r3, [sp, #4]
 801e062:	f000 f835 	bl	801e0d0 <_vfiprintf_r>
 801e066:	b002      	add	sp, #8
 801e068:	f85d eb04 	ldr.w	lr, [sp], #4
 801e06c:	b003      	add	sp, #12
 801e06e:	4770      	bx	lr
 801e070:	2000014c 	.word	0x2000014c

0801e074 <abort>:
 801e074:	b508      	push	{r3, lr}
 801e076:	2006      	movs	r0, #6
 801e078:	f000 f9fe 	bl	801e478 <raise>
 801e07c:	2001      	movs	r0, #1
 801e07e:	f7e4 f981 	bl	8002384 <_exit>

0801e082 <__sfputc_r>:
 801e082:	6893      	ldr	r3, [r2, #8]
 801e084:	3b01      	subs	r3, #1
 801e086:	2b00      	cmp	r3, #0
 801e088:	b410      	push	{r4}
 801e08a:	6093      	str	r3, [r2, #8]
 801e08c:	da07      	bge.n	801e09e <__sfputc_r+0x1c>
 801e08e:	6994      	ldr	r4, [r2, #24]
 801e090:	42a3      	cmp	r3, r4
 801e092:	db01      	blt.n	801e098 <__sfputc_r+0x16>
 801e094:	290a      	cmp	r1, #10
 801e096:	d102      	bne.n	801e09e <__sfputc_r+0x1c>
 801e098:	bc10      	pop	{r4}
 801e09a:	f000 b931 	b.w	801e300 <__swbuf_r>
 801e09e:	6813      	ldr	r3, [r2, #0]
 801e0a0:	1c58      	adds	r0, r3, #1
 801e0a2:	6010      	str	r0, [r2, #0]
 801e0a4:	7019      	strb	r1, [r3, #0]
 801e0a6:	4608      	mov	r0, r1
 801e0a8:	bc10      	pop	{r4}
 801e0aa:	4770      	bx	lr

0801e0ac <__sfputs_r>:
 801e0ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e0ae:	4606      	mov	r6, r0
 801e0b0:	460f      	mov	r7, r1
 801e0b2:	4614      	mov	r4, r2
 801e0b4:	18d5      	adds	r5, r2, r3
 801e0b6:	42ac      	cmp	r4, r5
 801e0b8:	d101      	bne.n	801e0be <__sfputs_r+0x12>
 801e0ba:	2000      	movs	r0, #0
 801e0bc:	e007      	b.n	801e0ce <__sfputs_r+0x22>
 801e0be:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e0c2:	463a      	mov	r2, r7
 801e0c4:	4630      	mov	r0, r6
 801e0c6:	f7ff ffdc 	bl	801e082 <__sfputc_r>
 801e0ca:	1c43      	adds	r3, r0, #1
 801e0cc:	d1f3      	bne.n	801e0b6 <__sfputs_r+0xa>
 801e0ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801e0d0 <_vfiprintf_r>:
 801e0d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e0d4:	460d      	mov	r5, r1
 801e0d6:	b09d      	sub	sp, #116	@ 0x74
 801e0d8:	4614      	mov	r4, r2
 801e0da:	4698      	mov	r8, r3
 801e0dc:	4606      	mov	r6, r0
 801e0de:	b118      	cbz	r0, 801e0e8 <_vfiprintf_r+0x18>
 801e0e0:	6a03      	ldr	r3, [r0, #32]
 801e0e2:	b90b      	cbnz	r3, 801e0e8 <_vfiprintf_r+0x18>
 801e0e4:	f7fe fad0 	bl	801c688 <__sinit>
 801e0e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801e0ea:	07d9      	lsls	r1, r3, #31
 801e0ec:	d405      	bmi.n	801e0fa <_vfiprintf_r+0x2a>
 801e0ee:	89ab      	ldrh	r3, [r5, #12]
 801e0f0:	059a      	lsls	r2, r3, #22
 801e0f2:	d402      	bmi.n	801e0fa <_vfiprintf_r+0x2a>
 801e0f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801e0f6:	f7fe fbbe 	bl	801c876 <__retarget_lock_acquire_recursive>
 801e0fa:	89ab      	ldrh	r3, [r5, #12]
 801e0fc:	071b      	lsls	r3, r3, #28
 801e0fe:	d501      	bpl.n	801e104 <_vfiprintf_r+0x34>
 801e100:	692b      	ldr	r3, [r5, #16]
 801e102:	b99b      	cbnz	r3, 801e12c <_vfiprintf_r+0x5c>
 801e104:	4629      	mov	r1, r5
 801e106:	4630      	mov	r0, r6
 801e108:	f000 f938 	bl	801e37c <__swsetup_r>
 801e10c:	b170      	cbz	r0, 801e12c <_vfiprintf_r+0x5c>
 801e10e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801e110:	07dc      	lsls	r4, r3, #31
 801e112:	d504      	bpl.n	801e11e <_vfiprintf_r+0x4e>
 801e114:	f04f 30ff 	mov.w	r0, #4294967295
 801e118:	b01d      	add	sp, #116	@ 0x74
 801e11a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e11e:	89ab      	ldrh	r3, [r5, #12]
 801e120:	0598      	lsls	r0, r3, #22
 801e122:	d4f7      	bmi.n	801e114 <_vfiprintf_r+0x44>
 801e124:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801e126:	f7fe fba7 	bl	801c878 <__retarget_lock_release_recursive>
 801e12a:	e7f3      	b.n	801e114 <_vfiprintf_r+0x44>
 801e12c:	2300      	movs	r3, #0
 801e12e:	9309      	str	r3, [sp, #36]	@ 0x24
 801e130:	2320      	movs	r3, #32
 801e132:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801e136:	f8cd 800c 	str.w	r8, [sp, #12]
 801e13a:	2330      	movs	r3, #48	@ 0x30
 801e13c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801e2ec <_vfiprintf_r+0x21c>
 801e140:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801e144:	f04f 0901 	mov.w	r9, #1
 801e148:	4623      	mov	r3, r4
 801e14a:	469a      	mov	sl, r3
 801e14c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e150:	b10a      	cbz	r2, 801e156 <_vfiprintf_r+0x86>
 801e152:	2a25      	cmp	r2, #37	@ 0x25
 801e154:	d1f9      	bne.n	801e14a <_vfiprintf_r+0x7a>
 801e156:	ebba 0b04 	subs.w	fp, sl, r4
 801e15a:	d00b      	beq.n	801e174 <_vfiprintf_r+0xa4>
 801e15c:	465b      	mov	r3, fp
 801e15e:	4622      	mov	r2, r4
 801e160:	4629      	mov	r1, r5
 801e162:	4630      	mov	r0, r6
 801e164:	f7ff ffa2 	bl	801e0ac <__sfputs_r>
 801e168:	3001      	adds	r0, #1
 801e16a:	f000 80a7 	beq.w	801e2bc <_vfiprintf_r+0x1ec>
 801e16e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e170:	445a      	add	r2, fp
 801e172:	9209      	str	r2, [sp, #36]	@ 0x24
 801e174:	f89a 3000 	ldrb.w	r3, [sl]
 801e178:	2b00      	cmp	r3, #0
 801e17a:	f000 809f 	beq.w	801e2bc <_vfiprintf_r+0x1ec>
 801e17e:	2300      	movs	r3, #0
 801e180:	f04f 32ff 	mov.w	r2, #4294967295
 801e184:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e188:	f10a 0a01 	add.w	sl, sl, #1
 801e18c:	9304      	str	r3, [sp, #16]
 801e18e:	9307      	str	r3, [sp, #28]
 801e190:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801e194:	931a      	str	r3, [sp, #104]	@ 0x68
 801e196:	4654      	mov	r4, sl
 801e198:	2205      	movs	r2, #5
 801e19a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e19e:	4853      	ldr	r0, [pc, #332]	@ (801e2ec <_vfiprintf_r+0x21c>)
 801e1a0:	f7e1 ffee 	bl	8000180 <memchr>
 801e1a4:	9a04      	ldr	r2, [sp, #16]
 801e1a6:	b9d8      	cbnz	r0, 801e1e0 <_vfiprintf_r+0x110>
 801e1a8:	06d1      	lsls	r1, r2, #27
 801e1aa:	bf44      	itt	mi
 801e1ac:	2320      	movmi	r3, #32
 801e1ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801e1b2:	0713      	lsls	r3, r2, #28
 801e1b4:	bf44      	itt	mi
 801e1b6:	232b      	movmi	r3, #43	@ 0x2b
 801e1b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801e1bc:	f89a 3000 	ldrb.w	r3, [sl]
 801e1c0:	2b2a      	cmp	r3, #42	@ 0x2a
 801e1c2:	d015      	beq.n	801e1f0 <_vfiprintf_r+0x120>
 801e1c4:	9a07      	ldr	r2, [sp, #28]
 801e1c6:	4654      	mov	r4, sl
 801e1c8:	2000      	movs	r0, #0
 801e1ca:	f04f 0c0a 	mov.w	ip, #10
 801e1ce:	4621      	mov	r1, r4
 801e1d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e1d4:	3b30      	subs	r3, #48	@ 0x30
 801e1d6:	2b09      	cmp	r3, #9
 801e1d8:	d94b      	bls.n	801e272 <_vfiprintf_r+0x1a2>
 801e1da:	b1b0      	cbz	r0, 801e20a <_vfiprintf_r+0x13a>
 801e1dc:	9207      	str	r2, [sp, #28]
 801e1de:	e014      	b.n	801e20a <_vfiprintf_r+0x13a>
 801e1e0:	eba0 0308 	sub.w	r3, r0, r8
 801e1e4:	fa09 f303 	lsl.w	r3, r9, r3
 801e1e8:	4313      	orrs	r3, r2
 801e1ea:	9304      	str	r3, [sp, #16]
 801e1ec:	46a2      	mov	sl, r4
 801e1ee:	e7d2      	b.n	801e196 <_vfiprintf_r+0xc6>
 801e1f0:	9b03      	ldr	r3, [sp, #12]
 801e1f2:	1d19      	adds	r1, r3, #4
 801e1f4:	681b      	ldr	r3, [r3, #0]
 801e1f6:	9103      	str	r1, [sp, #12]
 801e1f8:	2b00      	cmp	r3, #0
 801e1fa:	bfbb      	ittet	lt
 801e1fc:	425b      	neglt	r3, r3
 801e1fe:	f042 0202 	orrlt.w	r2, r2, #2
 801e202:	9307      	strge	r3, [sp, #28]
 801e204:	9307      	strlt	r3, [sp, #28]
 801e206:	bfb8      	it	lt
 801e208:	9204      	strlt	r2, [sp, #16]
 801e20a:	7823      	ldrb	r3, [r4, #0]
 801e20c:	2b2e      	cmp	r3, #46	@ 0x2e
 801e20e:	d10a      	bne.n	801e226 <_vfiprintf_r+0x156>
 801e210:	7863      	ldrb	r3, [r4, #1]
 801e212:	2b2a      	cmp	r3, #42	@ 0x2a
 801e214:	d132      	bne.n	801e27c <_vfiprintf_r+0x1ac>
 801e216:	9b03      	ldr	r3, [sp, #12]
 801e218:	1d1a      	adds	r2, r3, #4
 801e21a:	681b      	ldr	r3, [r3, #0]
 801e21c:	9203      	str	r2, [sp, #12]
 801e21e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801e222:	3402      	adds	r4, #2
 801e224:	9305      	str	r3, [sp, #20]
 801e226:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 801e2f0 <_vfiprintf_r+0x220>
 801e22a:	7821      	ldrb	r1, [r4, #0]
 801e22c:	2203      	movs	r2, #3
 801e22e:	4650      	mov	r0, sl
 801e230:	f7e1 ffa6 	bl	8000180 <memchr>
 801e234:	b138      	cbz	r0, 801e246 <_vfiprintf_r+0x176>
 801e236:	9b04      	ldr	r3, [sp, #16]
 801e238:	eba0 000a 	sub.w	r0, r0, sl
 801e23c:	2240      	movs	r2, #64	@ 0x40
 801e23e:	4082      	lsls	r2, r0
 801e240:	4313      	orrs	r3, r2
 801e242:	3401      	adds	r4, #1
 801e244:	9304      	str	r3, [sp, #16]
 801e246:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e24a:	482a      	ldr	r0, [pc, #168]	@ (801e2f4 <_vfiprintf_r+0x224>)
 801e24c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801e250:	2206      	movs	r2, #6
 801e252:	f7e1 ff95 	bl	8000180 <memchr>
 801e256:	2800      	cmp	r0, #0
 801e258:	d03f      	beq.n	801e2da <_vfiprintf_r+0x20a>
 801e25a:	4b27      	ldr	r3, [pc, #156]	@ (801e2f8 <_vfiprintf_r+0x228>)
 801e25c:	bb1b      	cbnz	r3, 801e2a6 <_vfiprintf_r+0x1d6>
 801e25e:	9b03      	ldr	r3, [sp, #12]
 801e260:	3307      	adds	r3, #7
 801e262:	f023 0307 	bic.w	r3, r3, #7
 801e266:	3308      	adds	r3, #8
 801e268:	9303      	str	r3, [sp, #12]
 801e26a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e26c:	443b      	add	r3, r7
 801e26e:	9309      	str	r3, [sp, #36]	@ 0x24
 801e270:	e76a      	b.n	801e148 <_vfiprintf_r+0x78>
 801e272:	fb0c 3202 	mla	r2, ip, r2, r3
 801e276:	460c      	mov	r4, r1
 801e278:	2001      	movs	r0, #1
 801e27a:	e7a8      	b.n	801e1ce <_vfiprintf_r+0xfe>
 801e27c:	2300      	movs	r3, #0
 801e27e:	3401      	adds	r4, #1
 801e280:	9305      	str	r3, [sp, #20]
 801e282:	4619      	mov	r1, r3
 801e284:	f04f 0c0a 	mov.w	ip, #10
 801e288:	4620      	mov	r0, r4
 801e28a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e28e:	3a30      	subs	r2, #48	@ 0x30
 801e290:	2a09      	cmp	r2, #9
 801e292:	d903      	bls.n	801e29c <_vfiprintf_r+0x1cc>
 801e294:	2b00      	cmp	r3, #0
 801e296:	d0c6      	beq.n	801e226 <_vfiprintf_r+0x156>
 801e298:	9105      	str	r1, [sp, #20]
 801e29a:	e7c4      	b.n	801e226 <_vfiprintf_r+0x156>
 801e29c:	fb0c 2101 	mla	r1, ip, r1, r2
 801e2a0:	4604      	mov	r4, r0
 801e2a2:	2301      	movs	r3, #1
 801e2a4:	e7f0      	b.n	801e288 <_vfiprintf_r+0x1b8>
 801e2a6:	ab03      	add	r3, sp, #12
 801e2a8:	9300      	str	r3, [sp, #0]
 801e2aa:	462a      	mov	r2, r5
 801e2ac:	4b13      	ldr	r3, [pc, #76]	@ (801e2fc <_vfiprintf_r+0x22c>)
 801e2ae:	a904      	add	r1, sp, #16
 801e2b0:	4630      	mov	r0, r6
 801e2b2:	f7fd fda5 	bl	801be00 <_printf_float>
 801e2b6:	4607      	mov	r7, r0
 801e2b8:	1c78      	adds	r0, r7, #1
 801e2ba:	d1d6      	bne.n	801e26a <_vfiprintf_r+0x19a>
 801e2bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801e2be:	07d9      	lsls	r1, r3, #31
 801e2c0:	d405      	bmi.n	801e2ce <_vfiprintf_r+0x1fe>
 801e2c2:	89ab      	ldrh	r3, [r5, #12]
 801e2c4:	059a      	lsls	r2, r3, #22
 801e2c6:	d402      	bmi.n	801e2ce <_vfiprintf_r+0x1fe>
 801e2c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801e2ca:	f7fe fad5 	bl	801c878 <__retarget_lock_release_recursive>
 801e2ce:	89ab      	ldrh	r3, [r5, #12]
 801e2d0:	065b      	lsls	r3, r3, #25
 801e2d2:	f53f af1f 	bmi.w	801e114 <_vfiprintf_r+0x44>
 801e2d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e2d8:	e71e      	b.n	801e118 <_vfiprintf_r+0x48>
 801e2da:	ab03      	add	r3, sp, #12
 801e2dc:	9300      	str	r3, [sp, #0]
 801e2de:	462a      	mov	r2, r5
 801e2e0:	4b06      	ldr	r3, [pc, #24]	@ (801e2fc <_vfiprintf_r+0x22c>)
 801e2e2:	a904      	add	r1, sp, #16
 801e2e4:	4630      	mov	r0, r6
 801e2e6:	f7fe f825 	bl	801c334 <_printf_i>
 801e2ea:	e7e4      	b.n	801e2b6 <_vfiprintf_r+0x1e6>
 801e2ec:	0801f934 	.word	0x0801f934
 801e2f0:	0801f93a 	.word	0x0801f93a
 801e2f4:	0801f93e 	.word	0x0801f93e
 801e2f8:	0801be01 	.word	0x0801be01
 801e2fc:	0801e0ad 	.word	0x0801e0ad

0801e300 <__swbuf_r>:
 801e300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e302:	460e      	mov	r6, r1
 801e304:	4614      	mov	r4, r2
 801e306:	4605      	mov	r5, r0
 801e308:	b118      	cbz	r0, 801e312 <__swbuf_r+0x12>
 801e30a:	6a03      	ldr	r3, [r0, #32]
 801e30c:	b90b      	cbnz	r3, 801e312 <__swbuf_r+0x12>
 801e30e:	f7fe f9bb 	bl	801c688 <__sinit>
 801e312:	69a3      	ldr	r3, [r4, #24]
 801e314:	60a3      	str	r3, [r4, #8]
 801e316:	89a3      	ldrh	r3, [r4, #12]
 801e318:	071a      	lsls	r2, r3, #28
 801e31a:	d501      	bpl.n	801e320 <__swbuf_r+0x20>
 801e31c:	6923      	ldr	r3, [r4, #16]
 801e31e:	b943      	cbnz	r3, 801e332 <__swbuf_r+0x32>
 801e320:	4621      	mov	r1, r4
 801e322:	4628      	mov	r0, r5
 801e324:	f000 f82a 	bl	801e37c <__swsetup_r>
 801e328:	b118      	cbz	r0, 801e332 <__swbuf_r+0x32>
 801e32a:	f04f 37ff 	mov.w	r7, #4294967295
 801e32e:	4638      	mov	r0, r7
 801e330:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e332:	6823      	ldr	r3, [r4, #0]
 801e334:	6922      	ldr	r2, [r4, #16]
 801e336:	1a98      	subs	r0, r3, r2
 801e338:	6963      	ldr	r3, [r4, #20]
 801e33a:	b2f6      	uxtb	r6, r6
 801e33c:	4283      	cmp	r3, r0
 801e33e:	4637      	mov	r7, r6
 801e340:	dc05      	bgt.n	801e34e <__swbuf_r+0x4e>
 801e342:	4621      	mov	r1, r4
 801e344:	4628      	mov	r0, r5
 801e346:	f7ff fdeb 	bl	801df20 <_fflush_r>
 801e34a:	2800      	cmp	r0, #0
 801e34c:	d1ed      	bne.n	801e32a <__swbuf_r+0x2a>
 801e34e:	68a3      	ldr	r3, [r4, #8]
 801e350:	3b01      	subs	r3, #1
 801e352:	60a3      	str	r3, [r4, #8]
 801e354:	6823      	ldr	r3, [r4, #0]
 801e356:	1c5a      	adds	r2, r3, #1
 801e358:	6022      	str	r2, [r4, #0]
 801e35a:	701e      	strb	r6, [r3, #0]
 801e35c:	6962      	ldr	r2, [r4, #20]
 801e35e:	1c43      	adds	r3, r0, #1
 801e360:	429a      	cmp	r2, r3
 801e362:	d004      	beq.n	801e36e <__swbuf_r+0x6e>
 801e364:	89a3      	ldrh	r3, [r4, #12]
 801e366:	07db      	lsls	r3, r3, #31
 801e368:	d5e1      	bpl.n	801e32e <__swbuf_r+0x2e>
 801e36a:	2e0a      	cmp	r6, #10
 801e36c:	d1df      	bne.n	801e32e <__swbuf_r+0x2e>
 801e36e:	4621      	mov	r1, r4
 801e370:	4628      	mov	r0, r5
 801e372:	f7ff fdd5 	bl	801df20 <_fflush_r>
 801e376:	2800      	cmp	r0, #0
 801e378:	d0d9      	beq.n	801e32e <__swbuf_r+0x2e>
 801e37a:	e7d6      	b.n	801e32a <__swbuf_r+0x2a>

0801e37c <__swsetup_r>:
 801e37c:	b538      	push	{r3, r4, r5, lr}
 801e37e:	4b29      	ldr	r3, [pc, #164]	@ (801e424 <__swsetup_r+0xa8>)
 801e380:	4605      	mov	r5, r0
 801e382:	6818      	ldr	r0, [r3, #0]
 801e384:	460c      	mov	r4, r1
 801e386:	b118      	cbz	r0, 801e390 <__swsetup_r+0x14>
 801e388:	6a03      	ldr	r3, [r0, #32]
 801e38a:	b90b      	cbnz	r3, 801e390 <__swsetup_r+0x14>
 801e38c:	f7fe f97c 	bl	801c688 <__sinit>
 801e390:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e394:	0719      	lsls	r1, r3, #28
 801e396:	d422      	bmi.n	801e3de <__swsetup_r+0x62>
 801e398:	06da      	lsls	r2, r3, #27
 801e39a:	d407      	bmi.n	801e3ac <__swsetup_r+0x30>
 801e39c:	2209      	movs	r2, #9
 801e39e:	602a      	str	r2, [r5, #0]
 801e3a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e3a4:	81a3      	strh	r3, [r4, #12]
 801e3a6:	f04f 30ff 	mov.w	r0, #4294967295
 801e3aa:	e033      	b.n	801e414 <__swsetup_r+0x98>
 801e3ac:	0758      	lsls	r0, r3, #29
 801e3ae:	d512      	bpl.n	801e3d6 <__swsetup_r+0x5a>
 801e3b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801e3b2:	b141      	cbz	r1, 801e3c6 <__swsetup_r+0x4a>
 801e3b4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801e3b8:	4299      	cmp	r1, r3
 801e3ba:	d002      	beq.n	801e3c2 <__swsetup_r+0x46>
 801e3bc:	4628      	mov	r0, r5
 801e3be:	f7ff f8b7 	bl	801d530 <_free_r>
 801e3c2:	2300      	movs	r3, #0
 801e3c4:	6363      	str	r3, [r4, #52]	@ 0x34
 801e3c6:	89a3      	ldrh	r3, [r4, #12]
 801e3c8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801e3cc:	81a3      	strh	r3, [r4, #12]
 801e3ce:	2300      	movs	r3, #0
 801e3d0:	6063      	str	r3, [r4, #4]
 801e3d2:	6923      	ldr	r3, [r4, #16]
 801e3d4:	6023      	str	r3, [r4, #0]
 801e3d6:	89a3      	ldrh	r3, [r4, #12]
 801e3d8:	f043 0308 	orr.w	r3, r3, #8
 801e3dc:	81a3      	strh	r3, [r4, #12]
 801e3de:	6923      	ldr	r3, [r4, #16]
 801e3e0:	b94b      	cbnz	r3, 801e3f6 <__swsetup_r+0x7a>
 801e3e2:	89a3      	ldrh	r3, [r4, #12]
 801e3e4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801e3e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801e3ec:	d003      	beq.n	801e3f6 <__swsetup_r+0x7a>
 801e3ee:	4621      	mov	r1, r4
 801e3f0:	4628      	mov	r0, r5
 801e3f2:	f000 f883 	bl	801e4fc <__smakebuf_r>
 801e3f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e3fa:	f013 0201 	ands.w	r2, r3, #1
 801e3fe:	d00a      	beq.n	801e416 <__swsetup_r+0x9a>
 801e400:	2200      	movs	r2, #0
 801e402:	60a2      	str	r2, [r4, #8]
 801e404:	6962      	ldr	r2, [r4, #20]
 801e406:	4252      	negs	r2, r2
 801e408:	61a2      	str	r2, [r4, #24]
 801e40a:	6922      	ldr	r2, [r4, #16]
 801e40c:	b942      	cbnz	r2, 801e420 <__swsetup_r+0xa4>
 801e40e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801e412:	d1c5      	bne.n	801e3a0 <__swsetup_r+0x24>
 801e414:	bd38      	pop	{r3, r4, r5, pc}
 801e416:	0799      	lsls	r1, r3, #30
 801e418:	bf58      	it	pl
 801e41a:	6962      	ldrpl	r2, [r4, #20]
 801e41c:	60a2      	str	r2, [r4, #8]
 801e41e:	e7f4      	b.n	801e40a <__swsetup_r+0x8e>
 801e420:	2000      	movs	r0, #0
 801e422:	e7f7      	b.n	801e414 <__swsetup_r+0x98>
 801e424:	2000014c 	.word	0x2000014c

0801e428 <_raise_r>:
 801e428:	291f      	cmp	r1, #31
 801e42a:	b538      	push	{r3, r4, r5, lr}
 801e42c:	4605      	mov	r5, r0
 801e42e:	460c      	mov	r4, r1
 801e430:	d904      	bls.n	801e43c <_raise_r+0x14>
 801e432:	2316      	movs	r3, #22
 801e434:	6003      	str	r3, [r0, #0]
 801e436:	f04f 30ff 	mov.w	r0, #4294967295
 801e43a:	bd38      	pop	{r3, r4, r5, pc}
 801e43c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801e43e:	b112      	cbz	r2, 801e446 <_raise_r+0x1e>
 801e440:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801e444:	b94b      	cbnz	r3, 801e45a <_raise_r+0x32>
 801e446:	4628      	mov	r0, r5
 801e448:	f000 f830 	bl	801e4ac <_getpid_r>
 801e44c:	4622      	mov	r2, r4
 801e44e:	4601      	mov	r1, r0
 801e450:	4628      	mov	r0, r5
 801e452:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e456:	f000 b817 	b.w	801e488 <_kill_r>
 801e45a:	2b01      	cmp	r3, #1
 801e45c:	d00a      	beq.n	801e474 <_raise_r+0x4c>
 801e45e:	1c59      	adds	r1, r3, #1
 801e460:	d103      	bne.n	801e46a <_raise_r+0x42>
 801e462:	2316      	movs	r3, #22
 801e464:	6003      	str	r3, [r0, #0]
 801e466:	2001      	movs	r0, #1
 801e468:	e7e7      	b.n	801e43a <_raise_r+0x12>
 801e46a:	2100      	movs	r1, #0
 801e46c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801e470:	4620      	mov	r0, r4
 801e472:	4798      	blx	r3
 801e474:	2000      	movs	r0, #0
 801e476:	e7e0      	b.n	801e43a <_raise_r+0x12>

0801e478 <raise>:
 801e478:	4b02      	ldr	r3, [pc, #8]	@ (801e484 <raise+0xc>)
 801e47a:	4601      	mov	r1, r0
 801e47c:	6818      	ldr	r0, [r3, #0]
 801e47e:	f7ff bfd3 	b.w	801e428 <_raise_r>
 801e482:	bf00      	nop
 801e484:	2000014c 	.word	0x2000014c

0801e488 <_kill_r>:
 801e488:	b538      	push	{r3, r4, r5, lr}
 801e48a:	4d07      	ldr	r5, [pc, #28]	@ (801e4a8 <_kill_r+0x20>)
 801e48c:	2300      	movs	r3, #0
 801e48e:	4604      	mov	r4, r0
 801e490:	4608      	mov	r0, r1
 801e492:	4611      	mov	r1, r2
 801e494:	602b      	str	r3, [r5, #0]
 801e496:	f7e3 ff65 	bl	8002364 <_kill>
 801e49a:	1c43      	adds	r3, r0, #1
 801e49c:	d102      	bne.n	801e4a4 <_kill_r+0x1c>
 801e49e:	682b      	ldr	r3, [r5, #0]
 801e4a0:	b103      	cbz	r3, 801e4a4 <_kill_r+0x1c>
 801e4a2:	6023      	str	r3, [r4, #0]
 801e4a4:	bd38      	pop	{r3, r4, r5, pc}
 801e4a6:	bf00      	nop
 801e4a8:	20002518 	.word	0x20002518

0801e4ac <_getpid_r>:
 801e4ac:	f7e3 bf53 	b.w	8002356 <_getpid>

0801e4b0 <__swhatbuf_r>:
 801e4b0:	b570      	push	{r4, r5, r6, lr}
 801e4b2:	460c      	mov	r4, r1
 801e4b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e4b8:	2900      	cmp	r1, #0
 801e4ba:	b096      	sub	sp, #88	@ 0x58
 801e4bc:	4615      	mov	r5, r2
 801e4be:	461e      	mov	r6, r3
 801e4c0:	da0d      	bge.n	801e4de <__swhatbuf_r+0x2e>
 801e4c2:	89a3      	ldrh	r3, [r4, #12]
 801e4c4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801e4c8:	f04f 0100 	mov.w	r1, #0
 801e4cc:	bf14      	ite	ne
 801e4ce:	2340      	movne	r3, #64	@ 0x40
 801e4d0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801e4d4:	2000      	movs	r0, #0
 801e4d6:	6031      	str	r1, [r6, #0]
 801e4d8:	602b      	str	r3, [r5, #0]
 801e4da:	b016      	add	sp, #88	@ 0x58
 801e4dc:	bd70      	pop	{r4, r5, r6, pc}
 801e4de:	466a      	mov	r2, sp
 801e4e0:	f000 f848 	bl	801e574 <_fstat_r>
 801e4e4:	2800      	cmp	r0, #0
 801e4e6:	dbec      	blt.n	801e4c2 <__swhatbuf_r+0x12>
 801e4e8:	9901      	ldr	r1, [sp, #4]
 801e4ea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801e4ee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801e4f2:	4259      	negs	r1, r3
 801e4f4:	4159      	adcs	r1, r3
 801e4f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801e4fa:	e7eb      	b.n	801e4d4 <__swhatbuf_r+0x24>

0801e4fc <__smakebuf_r>:
 801e4fc:	898b      	ldrh	r3, [r1, #12]
 801e4fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801e500:	079d      	lsls	r5, r3, #30
 801e502:	4606      	mov	r6, r0
 801e504:	460c      	mov	r4, r1
 801e506:	d507      	bpl.n	801e518 <__smakebuf_r+0x1c>
 801e508:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801e50c:	6023      	str	r3, [r4, #0]
 801e50e:	6123      	str	r3, [r4, #16]
 801e510:	2301      	movs	r3, #1
 801e512:	6163      	str	r3, [r4, #20]
 801e514:	b003      	add	sp, #12
 801e516:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e518:	ab01      	add	r3, sp, #4
 801e51a:	466a      	mov	r2, sp
 801e51c:	f7ff ffc8 	bl	801e4b0 <__swhatbuf_r>
 801e520:	9f00      	ldr	r7, [sp, #0]
 801e522:	4605      	mov	r5, r0
 801e524:	4639      	mov	r1, r7
 801e526:	4630      	mov	r0, r6
 801e528:	f7ff f876 	bl	801d618 <_malloc_r>
 801e52c:	b948      	cbnz	r0, 801e542 <__smakebuf_r+0x46>
 801e52e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e532:	059a      	lsls	r2, r3, #22
 801e534:	d4ee      	bmi.n	801e514 <__smakebuf_r+0x18>
 801e536:	f023 0303 	bic.w	r3, r3, #3
 801e53a:	f043 0302 	orr.w	r3, r3, #2
 801e53e:	81a3      	strh	r3, [r4, #12]
 801e540:	e7e2      	b.n	801e508 <__smakebuf_r+0xc>
 801e542:	89a3      	ldrh	r3, [r4, #12]
 801e544:	6020      	str	r0, [r4, #0]
 801e546:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801e54a:	81a3      	strh	r3, [r4, #12]
 801e54c:	9b01      	ldr	r3, [sp, #4]
 801e54e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801e552:	b15b      	cbz	r3, 801e56c <__smakebuf_r+0x70>
 801e554:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e558:	4630      	mov	r0, r6
 801e55a:	f000 f81d 	bl	801e598 <_isatty_r>
 801e55e:	b128      	cbz	r0, 801e56c <__smakebuf_r+0x70>
 801e560:	89a3      	ldrh	r3, [r4, #12]
 801e562:	f023 0303 	bic.w	r3, r3, #3
 801e566:	f043 0301 	orr.w	r3, r3, #1
 801e56a:	81a3      	strh	r3, [r4, #12]
 801e56c:	89a3      	ldrh	r3, [r4, #12]
 801e56e:	431d      	orrs	r5, r3
 801e570:	81a5      	strh	r5, [r4, #12]
 801e572:	e7cf      	b.n	801e514 <__smakebuf_r+0x18>

0801e574 <_fstat_r>:
 801e574:	b538      	push	{r3, r4, r5, lr}
 801e576:	4d07      	ldr	r5, [pc, #28]	@ (801e594 <_fstat_r+0x20>)
 801e578:	2300      	movs	r3, #0
 801e57a:	4604      	mov	r4, r0
 801e57c:	4608      	mov	r0, r1
 801e57e:	4611      	mov	r1, r2
 801e580:	602b      	str	r3, [r5, #0]
 801e582:	f7e3 ff4e 	bl	8002422 <_fstat>
 801e586:	1c43      	adds	r3, r0, #1
 801e588:	d102      	bne.n	801e590 <_fstat_r+0x1c>
 801e58a:	682b      	ldr	r3, [r5, #0]
 801e58c:	b103      	cbz	r3, 801e590 <_fstat_r+0x1c>
 801e58e:	6023      	str	r3, [r4, #0]
 801e590:	bd38      	pop	{r3, r4, r5, pc}
 801e592:	bf00      	nop
 801e594:	20002518 	.word	0x20002518

0801e598 <_isatty_r>:
 801e598:	b538      	push	{r3, r4, r5, lr}
 801e59a:	4d06      	ldr	r5, [pc, #24]	@ (801e5b4 <_isatty_r+0x1c>)
 801e59c:	2300      	movs	r3, #0
 801e59e:	4604      	mov	r4, r0
 801e5a0:	4608      	mov	r0, r1
 801e5a2:	602b      	str	r3, [r5, #0]
 801e5a4:	f7e3 ff4c 	bl	8002440 <_isatty>
 801e5a8:	1c43      	adds	r3, r0, #1
 801e5aa:	d102      	bne.n	801e5b2 <_isatty_r+0x1a>
 801e5ac:	682b      	ldr	r3, [r5, #0]
 801e5ae:	b103      	cbz	r3, 801e5b2 <_isatty_r+0x1a>
 801e5b0:	6023      	str	r3, [r4, #0]
 801e5b2:	bd38      	pop	{r3, r4, r5, pc}
 801e5b4:	20002518 	.word	0x20002518

0801e5b8 <floor>:
 801e5b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e5bc:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801e5c0:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 801e5c4:	2e13      	cmp	r6, #19
 801e5c6:	4602      	mov	r2, r0
 801e5c8:	460b      	mov	r3, r1
 801e5ca:	460c      	mov	r4, r1
 801e5cc:	4605      	mov	r5, r0
 801e5ce:	4680      	mov	r8, r0
 801e5d0:	dc35      	bgt.n	801e63e <floor+0x86>
 801e5d2:	2e00      	cmp	r6, #0
 801e5d4:	da17      	bge.n	801e606 <floor+0x4e>
 801e5d6:	a334      	add	r3, pc, #208	@ (adr r3, 801e6a8 <floor+0xf0>)
 801e5d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e5dc:	f7e1 fe2e 	bl	800023c <__adddf3>
 801e5e0:	2200      	movs	r2, #0
 801e5e2:	2300      	movs	r3, #0
 801e5e4:	f7e2 fa70 	bl	8000ac8 <__aeabi_dcmpgt>
 801e5e8:	b150      	cbz	r0, 801e600 <floor+0x48>
 801e5ea:	2c00      	cmp	r4, #0
 801e5ec:	da57      	bge.n	801e69e <floor+0xe6>
 801e5ee:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801e5f2:	432c      	orrs	r4, r5
 801e5f4:	2500      	movs	r5, #0
 801e5f6:	42ac      	cmp	r4, r5
 801e5f8:	4c2d      	ldr	r4, [pc, #180]	@ (801e6b0 <floor+0xf8>)
 801e5fa:	bf08      	it	eq
 801e5fc:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 801e600:	4623      	mov	r3, r4
 801e602:	462a      	mov	r2, r5
 801e604:	e024      	b.n	801e650 <floor+0x98>
 801e606:	4f2b      	ldr	r7, [pc, #172]	@ (801e6b4 <floor+0xfc>)
 801e608:	4137      	asrs	r7, r6
 801e60a:	ea01 0c07 	and.w	ip, r1, r7
 801e60e:	ea5c 0c00 	orrs.w	ip, ip, r0
 801e612:	d01d      	beq.n	801e650 <floor+0x98>
 801e614:	a324      	add	r3, pc, #144	@ (adr r3, 801e6a8 <floor+0xf0>)
 801e616:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e61a:	f7e1 fe0f 	bl	800023c <__adddf3>
 801e61e:	2200      	movs	r2, #0
 801e620:	2300      	movs	r3, #0
 801e622:	f7e2 fa51 	bl	8000ac8 <__aeabi_dcmpgt>
 801e626:	2800      	cmp	r0, #0
 801e628:	d0ea      	beq.n	801e600 <floor+0x48>
 801e62a:	2c00      	cmp	r4, #0
 801e62c:	bfbe      	ittt	lt
 801e62e:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 801e632:	4133      	asrlt	r3, r6
 801e634:	18e4      	addlt	r4, r4, r3
 801e636:	ea24 0407 	bic.w	r4, r4, r7
 801e63a:	2500      	movs	r5, #0
 801e63c:	e7e0      	b.n	801e600 <floor+0x48>
 801e63e:	2e33      	cmp	r6, #51	@ 0x33
 801e640:	dd0a      	ble.n	801e658 <floor+0xa0>
 801e642:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801e646:	d103      	bne.n	801e650 <floor+0x98>
 801e648:	f7e1 fdf8 	bl	800023c <__adddf3>
 801e64c:	4602      	mov	r2, r0
 801e64e:	460b      	mov	r3, r1
 801e650:	4610      	mov	r0, r2
 801e652:	4619      	mov	r1, r3
 801e654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e658:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 801e65c:	f04f 3cff 	mov.w	ip, #4294967295
 801e660:	fa2c f707 	lsr.w	r7, ip, r7
 801e664:	4207      	tst	r7, r0
 801e666:	d0f3      	beq.n	801e650 <floor+0x98>
 801e668:	a30f      	add	r3, pc, #60	@ (adr r3, 801e6a8 <floor+0xf0>)
 801e66a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e66e:	f7e1 fde5 	bl	800023c <__adddf3>
 801e672:	2200      	movs	r2, #0
 801e674:	2300      	movs	r3, #0
 801e676:	f7e2 fa27 	bl	8000ac8 <__aeabi_dcmpgt>
 801e67a:	2800      	cmp	r0, #0
 801e67c:	d0c0      	beq.n	801e600 <floor+0x48>
 801e67e:	2c00      	cmp	r4, #0
 801e680:	da0a      	bge.n	801e698 <floor+0xe0>
 801e682:	2e14      	cmp	r6, #20
 801e684:	d101      	bne.n	801e68a <floor+0xd2>
 801e686:	3401      	adds	r4, #1
 801e688:	e006      	b.n	801e698 <floor+0xe0>
 801e68a:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 801e68e:	2301      	movs	r3, #1
 801e690:	40b3      	lsls	r3, r6
 801e692:	441d      	add	r5, r3
 801e694:	4545      	cmp	r5, r8
 801e696:	d3f6      	bcc.n	801e686 <floor+0xce>
 801e698:	ea25 0507 	bic.w	r5, r5, r7
 801e69c:	e7b0      	b.n	801e600 <floor+0x48>
 801e69e:	2500      	movs	r5, #0
 801e6a0:	462c      	mov	r4, r5
 801e6a2:	e7ad      	b.n	801e600 <floor+0x48>
 801e6a4:	f3af 8000 	nop.w
 801e6a8:	8800759c 	.word	0x8800759c
 801e6ac:	7e37e43c 	.word	0x7e37e43c
 801e6b0:	bff00000 	.word	0xbff00000
 801e6b4:	000fffff 	.word	0x000fffff

0801e6b8 <_init>:
 801e6b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e6ba:	bf00      	nop
 801e6bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e6be:	bc08      	pop	{r3}
 801e6c0:	469e      	mov	lr, r3
 801e6c2:	4770      	bx	lr

0801e6c4 <_fini>:
 801e6c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e6c6:	bf00      	nop
 801e6c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e6ca:	bc08      	pop	{r3}
 801e6cc:	469e      	mov	lr, r3
 801e6ce:	4770      	bx	lr
