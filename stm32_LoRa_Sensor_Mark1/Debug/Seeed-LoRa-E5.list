
Seeed-LoRa-E5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e398  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000144c  0801e4d8  0801e4d8  0001f4d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .USER_embedded_Keys 000000c0  0801f924  0801f924  00020924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0801f9e4  0801f9e4  00021308  2**0
                  CONTENTS
  5 .ARM          00000008  0801f9e4  0801f9e4  000209e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0801f9ec  0801f9ec  00021308  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0801f9ec  0801f9ec  000209ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0801f9f0  0801f9f0  000209f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000308  20000000  0801f9f4  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00002204  20000308  0801fcfc  00021308  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000250c  0801fcfc  0002150c  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00021308  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003ebbc  00000000  00000000  00021332  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000a2e2  00000000  00000000  0005feee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000032b8  00000000  00000000  0006a1d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000267f  00000000  00000000  0006d488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000288de  00000000  00000000  0006fb07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0004394e  00000000  00000000  000983e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb556  00000000  00000000  000dbd33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001a7289  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000ddd8  00000000  00000000  001a72cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000052  00000000  00000000  001b50a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000308 	.word	0x20000308
 800015c:	00000000 	.word	0x00000000
 8000160:	0801e4c0 	.word	0x0801e4c0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000030c 	.word	0x2000030c
 800017c:	0801e4c0 	.word	0x0801e4c0

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_frsub>:
 8000b58:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b5c:	e002      	b.n	8000b64 <__addsf3>
 8000b5e:	bf00      	nop

08000b60 <__aeabi_fsub>:
 8000b60:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b64 <__addsf3>:
 8000b64:	0042      	lsls	r2, r0, #1
 8000b66:	bf1f      	itttt	ne
 8000b68:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b6c:	ea92 0f03 	teqne	r2, r3
 8000b70:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b74:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b78:	d06a      	beq.n	8000c50 <__addsf3+0xec>
 8000b7a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b7e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b82:	bfc1      	itttt	gt
 8000b84:	18d2      	addgt	r2, r2, r3
 8000b86:	4041      	eorgt	r1, r0
 8000b88:	4048      	eorgt	r0, r1
 8000b8a:	4041      	eorgt	r1, r0
 8000b8c:	bfb8      	it	lt
 8000b8e:	425b      	neglt	r3, r3
 8000b90:	2b19      	cmp	r3, #25
 8000b92:	bf88      	it	hi
 8000b94:	4770      	bxhi	lr
 8000b96:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b9e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000baa:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bae:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4249      	negne	r1, r1
 8000bb6:	ea92 0f03 	teq	r2, r3
 8000bba:	d03f      	beq.n	8000c3c <__addsf3+0xd8>
 8000bbc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bc4:	eb10 000c 	adds.w	r0, r0, ip
 8000bc8:	f1c3 0320 	rsb	r3, r3, #32
 8000bcc:	fa01 f103 	lsl.w	r1, r1, r3
 8000bd0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bd4:	d502      	bpl.n	8000bdc <__addsf3+0x78>
 8000bd6:	4249      	negs	r1, r1
 8000bd8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bdc:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000be0:	d313      	bcc.n	8000c0a <__addsf3+0xa6>
 8000be2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000be6:	d306      	bcc.n	8000bf6 <__addsf3+0x92>
 8000be8:	0840      	lsrs	r0, r0, #1
 8000bea:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bee:	f102 0201 	add.w	r2, r2, #1
 8000bf2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bf4:	d251      	bcs.n	8000c9a <__addsf3+0x136>
 8000bf6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bfa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bfe:	bf08      	it	eq
 8000c00:	f020 0001 	biceq.w	r0, r0, #1
 8000c04:	ea40 0003 	orr.w	r0, r0, r3
 8000c08:	4770      	bx	lr
 8000c0a:	0049      	lsls	r1, r1, #1
 8000c0c:	eb40 0000 	adc.w	r0, r0, r0
 8000c10:	3a01      	subs	r2, #1
 8000c12:	bf28      	it	cs
 8000c14:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c18:	d2ed      	bcs.n	8000bf6 <__addsf3+0x92>
 8000c1a:	fab0 fc80 	clz	ip, r0
 8000c1e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c22:	ebb2 020c 	subs.w	r2, r2, ip
 8000c26:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c2a:	bfaa      	itet	ge
 8000c2c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c30:	4252      	neglt	r2, r2
 8000c32:	4318      	orrge	r0, r3
 8000c34:	bfbc      	itt	lt
 8000c36:	40d0      	lsrlt	r0, r2
 8000c38:	4318      	orrlt	r0, r3
 8000c3a:	4770      	bx	lr
 8000c3c:	f092 0f00 	teq	r2, #0
 8000c40:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c44:	bf06      	itte	eq
 8000c46:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c4a:	3201      	addeq	r2, #1
 8000c4c:	3b01      	subne	r3, #1
 8000c4e:	e7b5      	b.n	8000bbc <__addsf3+0x58>
 8000c50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c58:	bf18      	it	ne
 8000c5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c5e:	d021      	beq.n	8000ca4 <__addsf3+0x140>
 8000c60:	ea92 0f03 	teq	r2, r3
 8000c64:	d004      	beq.n	8000c70 <__addsf3+0x10c>
 8000c66:	f092 0f00 	teq	r2, #0
 8000c6a:	bf08      	it	eq
 8000c6c:	4608      	moveq	r0, r1
 8000c6e:	4770      	bx	lr
 8000c70:	ea90 0f01 	teq	r0, r1
 8000c74:	bf1c      	itt	ne
 8000c76:	2000      	movne	r0, #0
 8000c78:	4770      	bxne	lr
 8000c7a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c7e:	d104      	bne.n	8000c8a <__addsf3+0x126>
 8000c80:	0040      	lsls	r0, r0, #1
 8000c82:	bf28      	it	cs
 8000c84:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c88:	4770      	bx	lr
 8000c8a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c8e:	bf3c      	itt	cc
 8000c90:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bxcc	lr
 8000c96:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c9a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c9e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca2:	4770      	bx	lr
 8000ca4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca8:	bf16      	itet	ne
 8000caa:	4608      	movne	r0, r1
 8000cac:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cb0:	4601      	movne	r1, r0
 8000cb2:	0242      	lsls	r2, r0, #9
 8000cb4:	bf06      	itte	eq
 8000cb6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cba:	ea90 0f01 	teqeq	r0, r1
 8000cbe:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cc2:	4770      	bx	lr

08000cc4 <__aeabi_ui2f>:
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	e004      	b.n	8000cd4 <__aeabi_i2f+0x8>
 8000cca:	bf00      	nop

08000ccc <__aeabi_i2f>:
 8000ccc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000cd0:	bf48      	it	mi
 8000cd2:	4240      	negmi	r0, r0
 8000cd4:	ea5f 0c00 	movs.w	ip, r0
 8000cd8:	bf08      	it	eq
 8000cda:	4770      	bxeq	lr
 8000cdc:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000ce0:	4601      	mov	r1, r0
 8000ce2:	f04f 0000 	mov.w	r0, #0
 8000ce6:	e01c      	b.n	8000d22 <__aeabi_l2f+0x2a>

08000ce8 <__aeabi_ul2f>:
 8000ce8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cec:	bf08      	it	eq
 8000cee:	4770      	bxeq	lr
 8000cf0:	f04f 0300 	mov.w	r3, #0
 8000cf4:	e00a      	b.n	8000d0c <__aeabi_l2f+0x14>
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_l2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d04:	d502      	bpl.n	8000d0c <__aeabi_l2f+0x14>
 8000d06:	4240      	negs	r0, r0
 8000d08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0c:	ea5f 0c01 	movs.w	ip, r1
 8000d10:	bf02      	ittt	eq
 8000d12:	4684      	moveq	ip, r0
 8000d14:	4601      	moveq	r1, r0
 8000d16:	2000      	moveq	r0, #0
 8000d18:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d1c:	bf08      	it	eq
 8000d1e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d22:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d26:	fabc f28c 	clz	r2, ip
 8000d2a:	3a08      	subs	r2, #8
 8000d2c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d30:	db10      	blt.n	8000d54 <__aeabi_l2f+0x5c>
 8000d32:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d36:	4463      	add	r3, ip
 8000d38:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d3c:	f1c2 0220 	rsb	r2, r2, #32
 8000d40:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d44:	fa20 f202 	lsr.w	r2, r0, r2
 8000d48:	eb43 0002 	adc.w	r0, r3, r2
 8000d4c:	bf08      	it	eq
 8000d4e:	f020 0001 	biceq.w	r0, r0, #1
 8000d52:	4770      	bx	lr
 8000d54:	f102 0220 	add.w	r2, r2, #32
 8000d58:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5c:	f1c2 0220 	rsb	r2, r2, #32
 8000d60:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d64:	fa21 f202 	lsr.w	r2, r1, r2
 8000d68:	eb43 0002 	adc.w	r0, r3, r2
 8000d6c:	bf08      	it	eq
 8000d6e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d72:	4770      	bx	lr

08000d74 <__aeabi_f2iz>:
 8000d74:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d78:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000d7c:	d30f      	bcc.n	8000d9e <__aeabi_f2iz+0x2a>
 8000d7e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000d82:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d86:	d90d      	bls.n	8000da4 <__aeabi_f2iz+0x30>
 8000d88:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d8c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000d90:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000d94:	fa23 f002 	lsr.w	r0, r3, r2
 8000d98:	bf18      	it	ne
 8000d9a:	4240      	negne	r0, r0
 8000d9c:	4770      	bx	lr
 8000d9e:	f04f 0000 	mov.w	r0, #0
 8000da2:	4770      	bx	lr
 8000da4:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000da8:	d101      	bne.n	8000dae <__aeabi_f2iz+0x3a>
 8000daa:	0242      	lsls	r2, r0, #9
 8000dac:	d105      	bne.n	8000dba <__aeabi_f2iz+0x46>
 8000dae:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000db8:	4770      	bx	lr
 8000dba:	f04f 0000 	mov.w	r0, #0
 8000dbe:	4770      	bx	lr

08000dc0 <__aeabi_uldivmod>:
 8000dc0:	b953      	cbnz	r3, 8000dd8 <__aeabi_uldivmod+0x18>
 8000dc2:	b94a      	cbnz	r2, 8000dd8 <__aeabi_uldivmod+0x18>
 8000dc4:	2900      	cmp	r1, #0
 8000dc6:	bf08      	it	eq
 8000dc8:	2800      	cmpeq	r0, #0
 8000dca:	bf1c      	itt	ne
 8000dcc:	f04f 31ff 	movne.w	r1, #4294967295
 8000dd0:	f04f 30ff 	movne.w	r0, #4294967295
 8000dd4:	f000 b988 	b.w	80010e8 <__aeabi_idiv0>
 8000dd8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ddc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000de0:	f000 f806 	bl	8000df0 <__udivmoddi4>
 8000de4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000de8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000dec:	b004      	add	sp, #16
 8000dee:	4770      	bx	lr

08000df0 <__udivmoddi4>:
 8000df0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000df4:	9d08      	ldr	r5, [sp, #32]
 8000df6:	468e      	mov	lr, r1
 8000df8:	4604      	mov	r4, r0
 8000dfa:	4688      	mov	r8, r1
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d14a      	bne.n	8000e96 <__udivmoddi4+0xa6>
 8000e00:	428a      	cmp	r2, r1
 8000e02:	4617      	mov	r7, r2
 8000e04:	d962      	bls.n	8000ecc <__udivmoddi4+0xdc>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	b14e      	cbz	r6, 8000e20 <__udivmoddi4+0x30>
 8000e0c:	f1c6 0320 	rsb	r3, r6, #32
 8000e10:	fa01 f806 	lsl.w	r8, r1, r6
 8000e14:	fa20 f303 	lsr.w	r3, r0, r3
 8000e18:	40b7      	lsls	r7, r6
 8000e1a:	ea43 0808 	orr.w	r8, r3, r8
 8000e1e:	40b4      	lsls	r4, r6
 8000e20:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e24:	fa1f fc87 	uxth.w	ip, r7
 8000e28:	fbb8 f1fe 	udiv	r1, r8, lr
 8000e2c:	0c23      	lsrs	r3, r4, #16
 8000e2e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000e32:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e36:	fb01 f20c 	mul.w	r2, r1, ip
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x62>
 8000e3e:	18fb      	adds	r3, r7, r3
 8000e40:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e44:	f080 80ea 	bcs.w	800101c <__udivmoddi4+0x22c>
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	f240 80e7 	bls.w	800101c <__udivmoddi4+0x22c>
 8000e4e:	3902      	subs	r1, #2
 8000e50:	443b      	add	r3, r7
 8000e52:	1a9a      	subs	r2, r3, r2
 8000e54:	b2a3      	uxth	r3, r4
 8000e56:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e5a:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e62:	fb00 fc0c 	mul.w	ip, r0, ip
 8000e66:	459c      	cmp	ip, r3
 8000e68:	d909      	bls.n	8000e7e <__udivmoddi4+0x8e>
 8000e6a:	18fb      	adds	r3, r7, r3
 8000e6c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e70:	f080 80d6 	bcs.w	8001020 <__udivmoddi4+0x230>
 8000e74:	459c      	cmp	ip, r3
 8000e76:	f240 80d3 	bls.w	8001020 <__udivmoddi4+0x230>
 8000e7a:	443b      	add	r3, r7
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e82:	eba3 030c 	sub.w	r3, r3, ip
 8000e86:	2100      	movs	r1, #0
 8000e88:	b11d      	cbz	r5, 8000e92 <__udivmoddi4+0xa2>
 8000e8a:	40f3      	lsrs	r3, r6
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	e9c5 3200 	strd	r3, r2, [r5]
 8000e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e96:	428b      	cmp	r3, r1
 8000e98:	d905      	bls.n	8000ea6 <__udivmoddi4+0xb6>
 8000e9a:	b10d      	cbz	r5, 8000ea0 <__udivmoddi4+0xb0>
 8000e9c:	e9c5 0100 	strd	r0, r1, [r5]
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	4608      	mov	r0, r1
 8000ea4:	e7f5      	b.n	8000e92 <__udivmoddi4+0xa2>
 8000ea6:	fab3 f183 	clz	r1, r3
 8000eaa:	2900      	cmp	r1, #0
 8000eac:	d146      	bne.n	8000f3c <__udivmoddi4+0x14c>
 8000eae:	4573      	cmp	r3, lr
 8000eb0:	d302      	bcc.n	8000eb8 <__udivmoddi4+0xc8>
 8000eb2:	4282      	cmp	r2, r0
 8000eb4:	f200 8105 	bhi.w	80010c2 <__udivmoddi4+0x2d2>
 8000eb8:	1a84      	subs	r4, r0, r2
 8000eba:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ebe:	2001      	movs	r0, #1
 8000ec0:	4690      	mov	r8, r2
 8000ec2:	2d00      	cmp	r5, #0
 8000ec4:	d0e5      	beq.n	8000e92 <__udivmoddi4+0xa2>
 8000ec6:	e9c5 4800 	strd	r4, r8, [r5]
 8000eca:	e7e2      	b.n	8000e92 <__udivmoddi4+0xa2>
 8000ecc:	2a00      	cmp	r2, #0
 8000ece:	f000 8090 	beq.w	8000ff2 <__udivmoddi4+0x202>
 8000ed2:	fab2 f682 	clz	r6, r2
 8000ed6:	2e00      	cmp	r6, #0
 8000ed8:	f040 80a4 	bne.w	8001024 <__udivmoddi4+0x234>
 8000edc:	1a8a      	subs	r2, r1, r2
 8000ede:	0c03      	lsrs	r3, r0, #16
 8000ee0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ee4:	b280      	uxth	r0, r0
 8000ee6:	b2bc      	uxth	r4, r7
 8000ee8:	2101      	movs	r1, #1
 8000eea:	fbb2 fcfe 	udiv	ip, r2, lr
 8000eee:	fb0e 221c 	mls	r2, lr, ip, r2
 8000ef2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ef6:	fb04 f20c 	mul.w	r2, r4, ip
 8000efa:	429a      	cmp	r2, r3
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x11e>
 8000efe:	18fb      	adds	r3, r7, r3
 8000f00:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000f04:	d202      	bcs.n	8000f0c <__udivmoddi4+0x11c>
 8000f06:	429a      	cmp	r2, r3
 8000f08:	f200 80e0 	bhi.w	80010cc <__udivmoddi4+0x2dc>
 8000f0c:	46c4      	mov	ip, r8
 8000f0e:	1a9b      	subs	r3, r3, r2
 8000f10:	fbb3 f2fe 	udiv	r2, r3, lr
 8000f14:	fb0e 3312 	mls	r3, lr, r2, r3
 8000f18:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000f1c:	fb02 f404 	mul.w	r4, r2, r4
 8000f20:	429c      	cmp	r4, r3
 8000f22:	d907      	bls.n	8000f34 <__udivmoddi4+0x144>
 8000f24:	18fb      	adds	r3, r7, r3
 8000f26:	f102 30ff 	add.w	r0, r2, #4294967295
 8000f2a:	d202      	bcs.n	8000f32 <__udivmoddi4+0x142>
 8000f2c:	429c      	cmp	r4, r3
 8000f2e:	f200 80ca 	bhi.w	80010c6 <__udivmoddi4+0x2d6>
 8000f32:	4602      	mov	r2, r0
 8000f34:	1b1b      	subs	r3, r3, r4
 8000f36:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000f3a:	e7a5      	b.n	8000e88 <__udivmoddi4+0x98>
 8000f3c:	f1c1 0620 	rsb	r6, r1, #32
 8000f40:	408b      	lsls	r3, r1
 8000f42:	fa22 f706 	lsr.w	r7, r2, r6
 8000f46:	431f      	orrs	r7, r3
 8000f48:	fa0e f401 	lsl.w	r4, lr, r1
 8000f4c:	fa20 f306 	lsr.w	r3, r0, r6
 8000f50:	fa2e fe06 	lsr.w	lr, lr, r6
 8000f54:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000f58:	4323      	orrs	r3, r4
 8000f5a:	fa00 f801 	lsl.w	r8, r0, r1
 8000f5e:	fa1f fc87 	uxth.w	ip, r7
 8000f62:	fbbe f0f9 	udiv	r0, lr, r9
 8000f66:	0c1c      	lsrs	r4, r3, #16
 8000f68:	fb09 ee10 	mls	lr, r9, r0, lr
 8000f6c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000f70:	fb00 fe0c 	mul.w	lr, r0, ip
 8000f74:	45a6      	cmp	lr, r4
 8000f76:	fa02 f201 	lsl.w	r2, r2, r1
 8000f7a:	d909      	bls.n	8000f90 <__udivmoddi4+0x1a0>
 8000f7c:	193c      	adds	r4, r7, r4
 8000f7e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000f82:	f080 809c 	bcs.w	80010be <__udivmoddi4+0x2ce>
 8000f86:	45a6      	cmp	lr, r4
 8000f88:	f240 8099 	bls.w	80010be <__udivmoddi4+0x2ce>
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	443c      	add	r4, r7
 8000f90:	eba4 040e 	sub.w	r4, r4, lr
 8000f94:	fa1f fe83 	uxth.w	lr, r3
 8000f98:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f9c:	fb09 4413 	mls	r4, r9, r3, r4
 8000fa0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000fa4:	fb03 fc0c 	mul.w	ip, r3, ip
 8000fa8:	45a4      	cmp	ip, r4
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x1ce>
 8000fac:	193c      	adds	r4, r7, r4
 8000fae:	f103 3eff 	add.w	lr, r3, #4294967295
 8000fb2:	f080 8082 	bcs.w	80010ba <__udivmoddi4+0x2ca>
 8000fb6:	45a4      	cmp	ip, r4
 8000fb8:	d97f      	bls.n	80010ba <__udivmoddi4+0x2ca>
 8000fba:	3b02      	subs	r3, #2
 8000fbc:	443c      	add	r4, r7
 8000fbe:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000fc2:	eba4 040c 	sub.w	r4, r4, ip
 8000fc6:	fba0 ec02 	umull	lr, ip, r0, r2
 8000fca:	4564      	cmp	r4, ip
 8000fcc:	4673      	mov	r3, lr
 8000fce:	46e1      	mov	r9, ip
 8000fd0:	d362      	bcc.n	8001098 <__udivmoddi4+0x2a8>
 8000fd2:	d05f      	beq.n	8001094 <__udivmoddi4+0x2a4>
 8000fd4:	b15d      	cbz	r5, 8000fee <__udivmoddi4+0x1fe>
 8000fd6:	ebb8 0203 	subs.w	r2, r8, r3
 8000fda:	eb64 0409 	sbc.w	r4, r4, r9
 8000fde:	fa04 f606 	lsl.w	r6, r4, r6
 8000fe2:	fa22 f301 	lsr.w	r3, r2, r1
 8000fe6:	431e      	orrs	r6, r3
 8000fe8:	40cc      	lsrs	r4, r1
 8000fea:	e9c5 6400 	strd	r6, r4, [r5]
 8000fee:	2100      	movs	r1, #0
 8000ff0:	e74f      	b.n	8000e92 <__udivmoddi4+0xa2>
 8000ff2:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ff6:	0c01      	lsrs	r1, r0, #16
 8000ff8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ffc:	b280      	uxth	r0, r0
 8000ffe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8001002:	463b      	mov	r3, r7
 8001004:	4638      	mov	r0, r7
 8001006:	463c      	mov	r4, r7
 8001008:	46b8      	mov	r8, r7
 800100a:	46be      	mov	lr, r7
 800100c:	2620      	movs	r6, #32
 800100e:	fbb1 f1f7 	udiv	r1, r1, r7
 8001012:	eba2 0208 	sub.w	r2, r2, r8
 8001016:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800101a:	e766      	b.n	8000eea <__udivmoddi4+0xfa>
 800101c:	4601      	mov	r1, r0
 800101e:	e718      	b.n	8000e52 <__udivmoddi4+0x62>
 8001020:	4610      	mov	r0, r2
 8001022:	e72c      	b.n	8000e7e <__udivmoddi4+0x8e>
 8001024:	f1c6 0220 	rsb	r2, r6, #32
 8001028:	fa2e f302 	lsr.w	r3, lr, r2
 800102c:	40b7      	lsls	r7, r6
 800102e:	40b1      	lsls	r1, r6
 8001030:	fa20 f202 	lsr.w	r2, r0, r2
 8001034:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001038:	430a      	orrs	r2, r1
 800103a:	fbb3 f8fe 	udiv	r8, r3, lr
 800103e:	b2bc      	uxth	r4, r7
 8001040:	fb0e 3318 	mls	r3, lr, r8, r3
 8001044:	0c11      	lsrs	r1, r2, #16
 8001046:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800104a:	fb08 f904 	mul.w	r9, r8, r4
 800104e:	40b0      	lsls	r0, r6
 8001050:	4589      	cmp	r9, r1
 8001052:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8001056:	b280      	uxth	r0, r0
 8001058:	d93e      	bls.n	80010d8 <__udivmoddi4+0x2e8>
 800105a:	1879      	adds	r1, r7, r1
 800105c:	f108 3cff 	add.w	ip, r8, #4294967295
 8001060:	d201      	bcs.n	8001066 <__udivmoddi4+0x276>
 8001062:	4589      	cmp	r9, r1
 8001064:	d81f      	bhi.n	80010a6 <__udivmoddi4+0x2b6>
 8001066:	eba1 0109 	sub.w	r1, r1, r9
 800106a:	fbb1 f9fe 	udiv	r9, r1, lr
 800106e:	fb09 f804 	mul.w	r8, r9, r4
 8001072:	fb0e 1119 	mls	r1, lr, r9, r1
 8001076:	b292      	uxth	r2, r2
 8001078:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800107c:	4542      	cmp	r2, r8
 800107e:	d229      	bcs.n	80010d4 <__udivmoddi4+0x2e4>
 8001080:	18ba      	adds	r2, r7, r2
 8001082:	f109 31ff 	add.w	r1, r9, #4294967295
 8001086:	d2c4      	bcs.n	8001012 <__udivmoddi4+0x222>
 8001088:	4542      	cmp	r2, r8
 800108a:	d2c2      	bcs.n	8001012 <__udivmoddi4+0x222>
 800108c:	f1a9 0102 	sub.w	r1, r9, #2
 8001090:	443a      	add	r2, r7
 8001092:	e7be      	b.n	8001012 <__udivmoddi4+0x222>
 8001094:	45f0      	cmp	r8, lr
 8001096:	d29d      	bcs.n	8000fd4 <__udivmoddi4+0x1e4>
 8001098:	ebbe 0302 	subs.w	r3, lr, r2
 800109c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80010a0:	3801      	subs	r0, #1
 80010a2:	46e1      	mov	r9, ip
 80010a4:	e796      	b.n	8000fd4 <__udivmoddi4+0x1e4>
 80010a6:	eba7 0909 	sub.w	r9, r7, r9
 80010aa:	4449      	add	r1, r9
 80010ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80010b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80010b4:	fb09 f804 	mul.w	r8, r9, r4
 80010b8:	e7db      	b.n	8001072 <__udivmoddi4+0x282>
 80010ba:	4673      	mov	r3, lr
 80010bc:	e77f      	b.n	8000fbe <__udivmoddi4+0x1ce>
 80010be:	4650      	mov	r0, sl
 80010c0:	e766      	b.n	8000f90 <__udivmoddi4+0x1a0>
 80010c2:	4608      	mov	r0, r1
 80010c4:	e6fd      	b.n	8000ec2 <__udivmoddi4+0xd2>
 80010c6:	443b      	add	r3, r7
 80010c8:	3a02      	subs	r2, #2
 80010ca:	e733      	b.n	8000f34 <__udivmoddi4+0x144>
 80010cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80010d0:	443b      	add	r3, r7
 80010d2:	e71c      	b.n	8000f0e <__udivmoddi4+0x11e>
 80010d4:	4649      	mov	r1, r9
 80010d6:	e79c      	b.n	8001012 <__udivmoddi4+0x222>
 80010d8:	eba1 0109 	sub.w	r1, r1, r9
 80010dc:	46c4      	mov	ip, r8
 80010de:	fbb1 f9fe 	udiv	r9, r1, lr
 80010e2:	fb09 f804 	mul.w	r8, r9, r4
 80010e6:	e7c4      	b.n	8001072 <__udivmoddi4+0x282>

080010e8 <__aeabi_idiv0>:
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop

080010ec <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b085      	sub	sp, #20
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80010f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80010f8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80010fa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4313      	orrs	r3, r2
 8001102:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001104:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001108:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4013      	ands	r3, r2
 800110e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001110:	68fb      	ldr	r3, [r7, #12]
}
 8001112:	bf00      	nop
 8001114:	3714      	adds	r7, #20
 8001116:	46bd      	mov	sp, r7
 8001118:	bc80      	pop	{r7}
 800111a:	4770      	bx	lr

0800111c <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8001124:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001128:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	43db      	mvns	r3, r3
 800112e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001132:	4013      	ands	r3, r2
 8001134:	660b      	str	r3, [r1, #96]	@ 0x60
}
 8001136:	bf00      	nop
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	bc80      	pop	{r7}
 800113e:	4770      	bx	lr

08001140 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8001144:	4b23      	ldr	r3, [pc, #140]	@ (80011d4 <MX_ADC_Init+0x94>)
 8001146:	4a24      	ldr	r2, [pc, #144]	@ (80011d8 <MX_ADC_Init+0x98>)
 8001148:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800114a:	4b22      	ldr	r3, [pc, #136]	@ (80011d4 <MX_ADC_Init+0x94>)
 800114c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001150:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001152:	4b20      	ldr	r3, [pc, #128]	@ (80011d4 <MX_ADC_Init+0x94>)
 8001154:	2200      	movs	r2, #0
 8001156:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001158:	4b1e      	ldr	r3, [pc, #120]	@ (80011d4 <MX_ADC_Init+0x94>)
 800115a:	2200      	movs	r2, #0
 800115c:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800115e:	4b1d      	ldr	r3, [pc, #116]	@ (80011d4 <MX_ADC_Init+0x94>)
 8001160:	2200      	movs	r2, #0
 8001162:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001164:	4b1b      	ldr	r3, [pc, #108]	@ (80011d4 <MX_ADC_Init+0x94>)
 8001166:	2204      	movs	r2, #4
 8001168:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800116a:	4b1a      	ldr	r3, [pc, #104]	@ (80011d4 <MX_ADC_Init+0x94>)
 800116c:	2200      	movs	r2, #0
 800116e:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001170:	4b18      	ldr	r3, [pc, #96]	@ (80011d4 <MX_ADC_Init+0x94>)
 8001172:	2200      	movs	r2, #0
 8001174:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001176:	4b17      	ldr	r3, [pc, #92]	@ (80011d4 <MX_ADC_Init+0x94>)
 8001178:	2200      	movs	r2, #0
 800117a:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 800117c:	4b15      	ldr	r3, [pc, #84]	@ (80011d4 <MX_ADC_Init+0x94>)
 800117e:	2201      	movs	r2, #1
 8001180:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001182:	4b14      	ldr	r3, [pc, #80]	@ (80011d4 <MX_ADC_Init+0x94>)
 8001184:	2200      	movs	r2, #0
 8001186:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800118a:	4b12      	ldr	r3, [pc, #72]	@ (80011d4 <MX_ADC_Init+0x94>)
 800118c:	2200      	movs	r2, #0
 800118e:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001190:	4b10      	ldr	r3, [pc, #64]	@ (80011d4 <MX_ADC_Init+0x94>)
 8001192:	2200      	movs	r2, #0
 8001194:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001196:	4b0f      	ldr	r3, [pc, #60]	@ (80011d4 <MX_ADC_Init+0x94>)
 8001198:	2200      	movs	r2, #0
 800119a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800119e:	4b0d      	ldr	r3, [pc, #52]	@ (80011d4 <MX_ADC_Init+0x94>)
 80011a0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80011a4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 80011a6:	4b0b      	ldr	r3, [pc, #44]	@ (80011d4 <MX_ADC_Init+0x94>)
 80011a8:	2207      	movs	r2, #7
 80011aa:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 80011ac:	4b09      	ldr	r3, [pc, #36]	@ (80011d4 <MX_ADC_Init+0x94>)
 80011ae:	2207      	movs	r2, #7
 80011b0:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.OversamplingMode = DISABLE;
 80011b2:	4b08      	ldr	r3, [pc, #32]	@ (80011d4 <MX_ADC_Init+0x94>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80011ba:	4b06      	ldr	r3, [pc, #24]	@ (80011d4 <MX_ADC_Init+0x94>)
 80011bc:	2200      	movs	r2, #0
 80011be:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80011c0:	4804      	ldr	r0, [pc, #16]	@ (80011d4 <MX_ADC_Init+0x94>)
 80011c2:	f002 f9ad 	bl	8003520 <HAL_ADC_Init>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_ADC_Init+0x90>
  {
    Error_Handler();
 80011cc:	f000 fcba 	bl	8001b44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80011d0:	bf00      	nop
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	20000324 	.word	0x20000324
 80011d8:	40012400 	.word	0x40012400

080011dc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a05      	ldr	r2, [pc, #20]	@ (8001200 <HAL_ADC_MspInit+0x24>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d103      	bne.n	80011f6 <HAL_ADC_MspInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80011ee:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80011f2:	f7ff ff7b 	bl	80010ec <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 80011f6:	bf00      	nop
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40012400 	.word	0x40012400

08001204 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a05      	ldr	r2, [pc, #20]	@ (8001228 <HAL_ADC_MspDeInit+0x24>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d103      	bne.n	800121e <HAL_ADC_MspDeInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 8001216:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800121a:	f7ff ff7f 	bl	800111c <LL_APB2_GRP1_DisableClock>
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 800121e:	bf00      	nop
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40012400 	.word	0x40012400

0800122c <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 8001230:	4b03      	ldr	r3, [pc, #12]	@ (8001240 <SYS_InitMeasurement+0x14>)
 8001232:	4a04      	ldr	r2, [pc, #16]	@ (8001244 <SYS_InitMeasurement+0x18>)
 8001234:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 8001236:	bf00      	nop
 8001238:	46bd      	mov	sp, r7
 800123a:	bc80      	pop	{r7}
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	20000324 	.word	0x20000324
 8001244:	40012400 	.word	0x40012400

08001248 <SYS_GetBatteryLevel>:

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}

uint16_t SYS_GetBatteryLevel(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 800124e:	2300      	movs	r3, #0
 8001250:	80fb      	strh	r3, [r7, #6]
  uint32_t measuredLevel = 0;
 8001252:	2300      	movs	r3, #0
 8001254:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 8001256:	4813      	ldr	r0, [pc, #76]	@ (80012a4 <SYS_GetBatteryLevel+0x5c>)
 8001258:	f000 f82a 	bl	80012b0 <ADC_ReadChannels>
 800125c:	6038      	str	r0, [r7, #0]

  if (measuredLevel == 0)
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d102      	bne.n	800126a <SYS_GetBatteryLevel+0x22>
  {
    batteryLevelmV = 0;
 8001264:	2300      	movs	r3, #0
 8001266:	80fb      	strh	r3, [r7, #6]
 8001268:	e016      	b.n	8001298 <SYS_GetBatteryLevel+0x50>
  }
  else
  {
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 800126a:	4b0f      	ldr	r3, [pc, #60]	@ (80012a8 <SYS_GetBatteryLevel+0x60>)
 800126c:	881b      	ldrh	r3, [r3, #0]
 800126e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001272:	4293      	cmp	r3, r2
 8001274:	d00b      	beq.n	800128e <SYS_GetBatteryLevel+0x46>
    {
      /* Device with Reference voltage calibrated in production:
         use device optimized parameters */
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 8001276:	4b0c      	ldr	r3, [pc, #48]	@ (80012a8 <SYS_GetBatteryLevel+0x60>)
 8001278:	881b      	ldrh	r3, [r3, #0]
 800127a:	461a      	mov	r2, r3
 800127c:	f640 43e4 	movw	r3, #3300	@ 0xce4
 8001280:	fb03 f202 	mul.w	r2, r3, r2
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	fbb2 f3f3 	udiv	r3, r2, r3
 800128a:	80fb      	strh	r3, [r7, #6]
 800128c:	e004      	b.n	8001298 <SYS_GetBatteryLevel+0x50>
    }
    else
    {
      /* Device with Reference voltage not calibrated in production:
         use generic parameters */
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 800128e:	4a07      	ldr	r2, [pc, #28]	@ (80012ac <SYS_GetBatteryLevel+0x64>)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	fbb2 f3f3 	udiv	r3, r2, r3
 8001296:	80fb      	strh	r3, [r7, #6]
    }
  }

  return batteryLevelmV;
 8001298:	88fb      	ldrh	r3, [r7, #6]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 800129a:	4618      	mov	r0, r3
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	b4002000 	.word	0xb4002000
 80012a8:	1fff75aa 	.word	0x1fff75aa
 80012ac:	004c08d8 	.word	0x004c08d8

080012b0 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b086      	sub	sp, #24
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 80012bc:	f107 0308 	add.w	r3, r7, #8
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 80012c8:	f7ff ff3a 	bl	8001140 <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 80012cc:	481a      	ldr	r0, [pc, #104]	@ (8001338 <ADC_ReadChannels+0x88>)
 80012ce:	f002 ff56 	bl	800417e <HAL_ADCEx_Calibration_Start>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 80012d8:	f000 fc34 	bl	8001b44 <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012e0:	2300      	movs	r3, #0
 80012e2:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80012e4:	2300      	movs	r3, #0
 80012e6:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80012e8:	f107 0308 	add.w	r3, r7, #8
 80012ec:	4619      	mov	r1, r3
 80012ee:	4812      	ldr	r0, [pc, #72]	@ (8001338 <ADC_ReadChannels+0x88>)
 80012f0:	f002 fc62 	bl	8003bb8 <HAL_ADC_ConfigChannel>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 80012fa:	f000 fc23 	bl	8001b44 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 80012fe:	480e      	ldr	r0, [pc, #56]	@ (8001338 <ADC_ReadChannels+0x88>)
 8001300:	f002 fb3e 	bl	8003980 <HAL_ADC_Start>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 800130a:	f000 fc1b 	bl	8001b44 <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 800130e:	f04f 31ff 	mov.w	r1, #4294967295
 8001312:	4809      	ldr	r0, [pc, #36]	@ (8001338 <ADC_ReadChannels+0x88>)
 8001314:	f002 fbac 	bl	8003a70 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 8001318:	4807      	ldr	r0, [pc, #28]	@ (8001338 <ADC_ReadChannels+0x88>)
 800131a:	f002 fb77 	bl	8003a0c <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 800131e:	4806      	ldr	r0, [pc, #24]	@ (8001338 <ADC_ReadChannels+0x88>)
 8001320:	f002 fc3d 	bl	8003b9e <HAL_ADC_GetValue>
 8001324:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 8001326:	4804      	ldr	r0, [pc, #16]	@ (8001338 <ADC_ReadChannels+0x88>)
 8001328:	f002 faae 	bl	8003888 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 800132c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 800132e:	4618      	mov	r0, r3
 8001330:	3718      	adds	r7, #24
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	20000324 	.word	0x20000324

0800133c <LL_AHB1_GRP1_EnableClock>:
{
 800133c:	b480      	push	{r7}
 800133e:	b085      	sub	sp, #20
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001344:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001348:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800134a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4313      	orrs	r3, r2
 8001352:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001354:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001358:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4013      	ands	r3, r2
 800135e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001360:	68fb      	ldr	r3, [r7, #12]
}
 8001362:	bf00      	nop
 8001364:	3714      	adds	r7, #20
 8001366:	46bd      	mov	sp, r7
 8001368:	bc80      	pop	{r7}
 800136a:	4770      	bx	lr

0800136c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001370:	2004      	movs	r0, #4
 8001372:	f7ff ffe3 	bl	800133c <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001376:	2001      	movs	r0, #1
 8001378:	f7ff ffe0 	bl	800133c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 800137c:	2200      	movs	r2, #0
 800137e:	2102      	movs	r1, #2
 8001380:	200b      	movs	r0, #11
 8001382:	f003 f8a2 	bl	80044ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001386:	200b      	movs	r0, #11
 8001388:	f003 f8b9 	bl	80044fe <HAL_NVIC_EnableIRQ>

}
 800138c:	bf00      	nop
 800138e:	bd80      	pop	{r7, pc}

08001390 <LL_FLASH_IsActiveFlag_OperationSuspended>:
  * @rmtoll FLASH_SR      PESD         LL_FLASH_IsActiveFlag_OperationSuspended
  * @rmtoll FLASH_C2SR    PESD         LL_FLASH_IsActiveFlag_OperationSuspended
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_FLASH_IsActiveFlag_OperationSuspended(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
#if defined(CORE_CM0PLUS)
  return ((READ_BIT(FLASH->C2SR, FLASH_C2SR_PESD) == (FLASH_C2SR_PESD)) ? 1UL : 0UL);
#else
  return ((READ_BIT(FLASH->SR, FLASH_SR_PESD) == (FLASH_SR_PESD)) ? 1UL : 0UL);
 8001394:	4b06      	ldr	r3, [pc, #24]	@ (80013b0 <LL_FLASH_IsActiveFlag_OperationSuspended+0x20>)
 8001396:	691b      	ldr	r3, [r3, #16]
 8001398:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800139c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80013a0:	d101      	bne.n	80013a6 <LL_FLASH_IsActiveFlag_OperationSuspended+0x16>
 80013a2:	2301      	movs	r3, #1
 80013a4:	e000      	b.n	80013a8 <LL_FLASH_IsActiveFlag_OperationSuspended+0x18>
 80013a6:	2300      	movs	r3, #0
#endif
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bc80      	pop	{r7}
 80013ae:	4770      	bx	lr
 80013b0:	58004000 	.word	0x58004000

080013b4 <FLASH_IF_Write>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t FLASH_IF_Write(uint32_t address, uint8_t *data, uint32_t size, uint8_t *dataTempPage)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b08c      	sub	sp, #48	@ 0x30
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	607a      	str	r2, [r7, #4]
 80013c0:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN FLASH_IF_Write_1 */

  /* USER CODE END FLASH_IF_Write_1 */
  int32_t status = FLASH_OK;
 80013c2:	2300      	movs	r3, #0
 80013c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t page_start_index = PAGE(address);
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	f103 4278 	add.w	r2, r3, #4160749568	@ 0xf8000000
 80013cc:	4b56      	ldr	r3, [pc, #344]	@ (8001528 <FLASH_IF_Write+0x174>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	0299      	lsls	r1, r3, #10
 80013d2:	4b56      	ldr	r3, [pc, #344]	@ (800152c <FLASH_IF_Write+0x178>)
 80013d4:	400b      	ands	r3, r1
 80013d6:	fbb2 f1f3 	udiv	r1, r2, r3
 80013da:	fb01 f303 	mul.w	r3, r1, r3
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	0adb      	lsrs	r3, r3, #11
 80013e2:	61bb      	str	r3, [r7, #24]
  uint32_t page_end_index = PAGE(address + size - 1);
 80013e4:	68fa      	ldr	r2, [r7, #12]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4413      	add	r3, r2
 80013ea:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 80013ee:	3b01      	subs	r3, #1
 80013f0:	4a4d      	ldr	r2, [pc, #308]	@ (8001528 <FLASH_IF_Write+0x174>)
 80013f2:	6812      	ldr	r2, [r2, #0]
 80013f4:	0291      	lsls	r1, r2, #10
 80013f6:	4a4d      	ldr	r2, [pc, #308]	@ (800152c <FLASH_IF_Write+0x178>)
 80013f8:	400a      	ands	r2, r1
 80013fa:	fbb3 f1f2 	udiv	r1, r3, r2
 80013fe:	fb01 f202 	mul.w	r2, r1, r2
 8001402:	1a9b      	subs	r3, r3, r2
 8001404:	0adb      	lsrs	r3, r3, #11
 8001406:	617b      	str	r3, [r7, #20]
  uint32_t curr_size = size;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t curr_dest_addr = address;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t curr_src_addr = (uint32_t)data;
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	623b      	str	r3, [r7, #32]

  if ((data == NULL) || ((size % sizeof(uint64_t)) != 0) || ((address % sizeof(uint64_t)) != 0))
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d009      	beq.n	800142e <FLASH_IF_Write+0x7a>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	f003 0307 	and.w	r3, r3, #7
 8001420:	2b00      	cmp	r3, #0
 8001422:	d104      	bne.n	800142e <FLASH_IF_Write+0x7a>
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	f003 0307 	and.w	r3, r3, #7
 800142a:	2b00      	cmp	r3, #0
 800142c:	d002      	beq.n	8001434 <FLASH_IF_Write+0x80>
  {
    return FLASH_PARAM_ERROR;
 800142e:	f06f 0304 	mvn.w	r3, #4
 8001432:	e074      	b.n	800151e <FLASH_IF_Write+0x16a>
  }

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001434:	4b3e      	ldr	r3, [pc, #248]	@ (8001530 <FLASH_IF_Write+0x17c>)
 8001436:	695b      	ldr	r3, [r3, #20]
 8001438:	2b00      	cmp	r3, #0
 800143a:	da02      	bge.n	8001442 <FLASH_IF_Write+0x8e>
  {
    return FLASH_LOCK_ERROR;
 800143c:	f06f 0303 	mvn.w	r3, #3
 8001440:	e06d      	b.n	800151e <FLASH_IF_Write+0x16a>
  }

  if (page_start_index != page_end_index)
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	429a      	cmp	r2, r3
 8001448:	d005      	beq.n	8001456 <FLASH_IF_Write+0xa2>
  {
    curr_size = FLASH_PAGE_SIZE - (address % FLASH_PAGE_SIZE);
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001450:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8001454:	62bb      	str	r3, [r7, #40]	@ 0x28
  }

  for (uint32_t idx = page_start_index; idx <= page_end_index; idx++)
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	61fb      	str	r3, [r7, #28]
 800145a:	e05b      	b.n	8001514 <FLASH_IF_Write+0x160>
  {
    if (FLASH_IF_IsEmpty((uint8_t *)curr_dest_addr, curr_size) != FLASH_EMPTY)
 800145c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800145e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001460:	4618      	mov	r0, r3
 8001462:	f000 f8f8 	bl	8001656 <FLASH_IF_IsEmpty>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d037      	beq.n	80014dc <FLASH_IF_Write+0x128>
    {
      if (dataTempPage == NULL)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d102      	bne.n	8001478 <FLASH_IF_Write+0xc4>
      {
        return FLASH_PARAM_ERROR;
 8001472:	f06f 0304 	mvn.w	r3, #4
 8001476:	e052      	b.n	800151e <FLASH_IF_Write+0x16a>
      }
      /* backup initial Flash page data in RAM area */
      UTIL_MEM_cpy_8(dataTempPage, (uint8_t *)(idx * FLASH_PAGE_SIZE + FLASH_BASE), FLASH_PAGE_SIZE);
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800147e:	02db      	lsls	r3, r3, #11
 8001480:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001484:	4619      	mov	r1, r3
 8001486:	6838      	ldr	r0, [r7, #0]
 8001488:	f019 f860 	bl	801a54c <UTIL_MEM_cpy_8>
      /* copy fragment into RAM area */
      UTIL_MEM_cpy_8(&dataTempPage[((uint32_t)curr_dest_addr) % FLASH_PAGE_SIZE], (uint8_t *)curr_src_addr, curr_size);
 800148c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800148e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001492:	683a      	ldr	r2, [r7, #0]
 8001494:	4413      	add	r3, r2
 8001496:	6a39      	ldr	r1, [r7, #32]
 8001498:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800149a:	b292      	uxth	r2, r2
 800149c:	4618      	mov	r0, r3
 800149e:	f019 f855 	bl	801a54c <UTIL_MEM_cpy_8>

      /*  erase the Flash sector, to avoid writing twice in RAM */
      if (FLASH_IF_EraseByPages(idx, 1, 0) != FLASH_OK)
 80014a2:	2200      	movs	r2, #0
 80014a4:	2101      	movs	r1, #1
 80014a6:	69f8      	ldr	r0, [r7, #28]
 80014a8:	f000 f865 	bl	8001576 <FLASH_IF_EraseByPages>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d003      	beq.n	80014ba <FLASH_IF_Write+0x106>
      {
        status = FLASH_ERASE_ERROR;
 80014b2:	f06f 0301 	mvn.w	r3, #1
 80014b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break; /* exit for loop */
 80014b8:	e030      	b.n	800151c <FLASH_IF_Write+0x168>
      }
      else
      {
        /* copy the whole flash sector including fragment from RAM to Flash*/
        if (FLASH_IF_Write_Buffer(idx * FLASH_PAGE_SIZE + FLASH_BASE, dataTempPage, FLASH_PAGE_SIZE) != FLASH_OK)
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80014c0:	02db      	lsls	r3, r3, #11
 80014c2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80014c6:	6839      	ldr	r1, [r7, #0]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f000 f88a 	bl	80015e2 <FLASH_IF_Write_Buffer>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d010      	beq.n	80014f6 <FLASH_IF_Write+0x142>
        {
          status = FLASH_WRITE_ERROR;
 80014d4:	f06f 0302 	mvn.w	r3, #2
 80014d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
          break; /* exit for loop */
 80014da:	e01f      	b.n	800151c <FLASH_IF_Write+0x168>
        }
      }
    }
    else
    {
      if (FLASH_IF_Write_Buffer(curr_dest_addr, (uint8_t *)curr_src_addr, curr_size) != FLASH_OK)
 80014dc:	6a3b      	ldr	r3, [r7, #32]
 80014de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80014e0:	4619      	mov	r1, r3
 80014e2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80014e4:	f000 f87d 	bl	80015e2 <FLASH_IF_Write_Buffer>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d003      	beq.n	80014f6 <FLASH_IF_Write+0x142>
      {
        status = FLASH_WRITE_ERROR;
 80014ee:	f06f 0302 	mvn.w	r3, #2
 80014f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break; /* exit for loop */
 80014f4:	e012      	b.n	800151c <FLASH_IF_Write+0x168>
      }
    }

    /* 2nd part of memory overlapped on 2nd flash sector */
    curr_dest_addr += curr_size;
 80014f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014fa:	4413      	add	r3, r2
 80014fc:	627b      	str	r3, [r7, #36]	@ 0x24
    curr_src_addr += curr_size;
 80014fe:	6a3a      	ldr	r2, [r7, #32]
 8001500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001502:	4413      	add	r3, r2
 8001504:	623b      	str	r3, [r7, #32]
    curr_size = size - curr_size;
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (uint32_t idx = page_start_index; idx <= page_end_index; idx++)
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	3301      	adds	r3, #1
 8001512:	61fb      	str	r3, [r7, #28]
 8001514:	69fa      	ldr	r2, [r7, #28]
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	429a      	cmp	r2, r3
 800151a:	d99f      	bls.n	800145c <FLASH_IF_Write+0xa8>
  }

  return status;
 800151c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  /* USER CODE BEGIN FLASH_IF_Write_2 */

  /* USER CODE END FLASH_IF_Write_2 */
}
 800151e:	4618      	mov	r0, r3
 8001520:	3730      	adds	r7, #48	@ 0x30
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	1fff75e0 	.word	0x1fff75e0
 800152c:	03fffc00 	.word	0x03fffc00
 8001530:	58004000 	.word	0x58004000

08001534 <FLASH_IF_Write64>:

int32_t FLASH_IF_Write64(uint32_t address, uint64_t data)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	60f8      	str	r0, [r7, #12]
 800153c:	e9c7 2300 	strd	r2, r3, [r7]
  /* USER CODE BEGIN FLASH_IF_Write64_1 */

  /* USER CODE END FLASH_IF_Write64_1 */
  while (*(uint64_t *)address != data)
 8001540:	e00b      	b.n	800155a <FLASH_IF_Write64+0x26>
  {
    while (LL_FLASH_IsActiveFlag_OperationSuspended());
 8001542:	bf00      	nop
 8001544:	f7ff ff24 	bl	8001390 <LL_FLASH_IsActiveFlag_OperationSuspended>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d1fa      	bne.n	8001544 <FLASH_IF_Write64+0x10>
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address, data);
 800154e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001552:	68f9      	ldr	r1, [r7, #12]
 8001554:	2001      	movs	r0, #1
 8001556:	f003 fbd9 	bl	8004d0c <HAL_FLASH_Program>
  while (*(uint64_t *)address != data)
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001560:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001564:	4299      	cmp	r1, r3
 8001566:	bf08      	it	eq
 8001568:	4290      	cmpeq	r0, r2
 800156a:	d1ea      	bne.n	8001542 <FLASH_IF_Write64+0xe>
  }

  return FLASH_OK;
 800156c:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_Write64_2 */

  /* USER CODE END FLASH_IF_Write64_2 */
}
 800156e:	4618      	mov	r0, r3
 8001570:	3710      	adds	r7, #16
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <FLASH_IF_EraseByPages>:

int32_t FLASH_IF_EraseByPages(uint32_t page, uint16_t n, int32_t interrupt)
{
 8001576:	b580      	push	{r7, lr}
 8001578:	b08a      	sub	sp, #40	@ 0x28
 800157a:	af00      	add	r7, sp, #0
 800157c:	60f8      	str	r0, [r7, #12]
 800157e:	460b      	mov	r3, r1
 8001580:	607a      	str	r2, [r7, #4]
 8001582:	817b      	strh	r3, [r7, #10]
  /* USER CODE END FLASH_IF_EraseByPages_1 */
  HAL_StatusTypeDef hal_status;
  FLASH_EraseInitTypeDef erase_str;
  uint32_t page_error;

  erase_str.TypeErase = FLASH_TYPEERASE_PAGES;
 8001584:	2302      	movs	r3, #2
 8001586:	61bb      	str	r3, [r7, #24]
  erase_str.Page = page;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	61fb      	str	r3, [r7, #28]
  erase_str.NbPages = n;
 800158c:	897b      	ldrh	r3, [r7, #10]
 800158e:	623b      	str	r3, [r7, #32]

  /* Erase the Page */
  if (interrupt)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d008      	beq.n	80015a8 <FLASH_IF_EraseByPages+0x32>
  {
    hal_status = HAL_FLASHEx_Erase_IT(&erase_str);
 8001596:	f107 0318 	add.w	r3, r7, #24
 800159a:	4618      	mov	r0, r3
 800159c:	f003 fd54 	bl	8005048 <HAL_FLASHEx_Erase_IT>
 80015a0:	4603      	mov	r3, r0
 80015a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80015a6:	e00a      	b.n	80015be <FLASH_IF_EraseByPages+0x48>
  }
  else
  {
    hal_status = HAL_FLASHEx_Erase(&erase_str, &page_error);
 80015a8:	f107 0214 	add.w	r2, r7, #20
 80015ac:	f107 0318 	add.w	r3, r7, #24
 80015b0:	4611      	mov	r1, r2
 80015b2:	4618      	mov	r0, r3
 80015b4:	f003 fcf0 	bl	8004f98 <HAL_FLASHEx_Erase>
 80015b8:	4603      	mov	r3, r0
 80015ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return ((hal_status == HAL_OK) ? FLASH_OK : ((hal_status == HAL_BUSY) ? FLASH_BUSY : FLASH_ERASE_ERROR));
 80015be:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d008      	beq.n	80015d8 <FLASH_IF_EraseByPages+0x62>
 80015c6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d101      	bne.n	80015d2 <FLASH_IF_EraseByPages+0x5c>
 80015ce:	2301      	movs	r3, #1
 80015d0:	e003      	b.n	80015da <FLASH_IF_EraseByPages+0x64>
 80015d2:	f06f 0301 	mvn.w	r3, #1
 80015d6:	e000      	b.n	80015da <FLASH_IF_EraseByPages+0x64>
 80015d8:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_EraseByPages_2 */

  /* USER CODE END FLASH_IF_EraseByPages_2 */
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3728      	adds	r7, #40	@ 0x28
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <FLASH_IF_Write_Buffer>:

/* USER CODE END EF */

/* Private Functions Definition -----------------------------------------------*/
static int32_t FLASH_IF_Write_Buffer(uint32_t pDestination, uint8_t *pSource, uint32_t uLength)
{
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b08a      	sub	sp, #40	@ 0x28
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	60f8      	str	r0, [r7, #12]
 80015ea:	60b9      	str	r1, [r7, #8]
 80015ec:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN FLASH_IF_Write_Buffer_1 */

  /* USER CODE END FLASH_IF_Write_Buffer_1 */
  uint8_t *pSrc = pSource;
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint64_t src_value;
  int32_t status = FLASH_OK;
 80015f2:	2300      	movs	r3, #0
 80015f4:	623b      	str	r3, [r7, #32]

  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 80015f6:	2300      	movs	r3, #0
 80015f8:	61fb      	str	r3, [r7, #28]
 80015fa:	e020      	b.n	800163e <FLASH_IF_Write_Buffer+0x5c>
  {
    UTIL_MEM_cpy_8(&src_value, pSrc, sizeof(uint64_t));
 80015fc:	f107 0310 	add.w	r3, r7, #16
 8001600:	2208      	movs	r2, #8
 8001602:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001604:	4618      	mov	r0, r3
 8001606:	f018 ffa1 	bl	801a54c <UTIL_MEM_cpy_8>

    /* Avoid writing 0xFFFFFFFFFFFFFFFFLL on erased Flash */
    if (src_value != UINT64_MAX)
 800160a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800160e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001612:	bf08      	it	eq
 8001614:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8001618:	d005      	beq.n	8001626 <FLASH_IF_Write_Buffer+0x44>
    {
      status = FLASH_IF_Write64(pDestination, src_value);
 800161a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800161e:	68f8      	ldr	r0, [r7, #12]
 8001620:	f7ff ff88 	bl	8001534 <FLASH_IF_Write64>
 8001624:	6238      	str	r0, [r7, #32]
    }

    pDestination += sizeof(uint64_t);
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	3308      	adds	r3, #8
 800162a:	60fb      	str	r3, [r7, #12]
    pSrc += sizeof(uint64_t);
 800162c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800162e:	3308      	adds	r3, #8
 8001630:	627b      	str	r3, [r7, #36]	@ 0x24

    if (status != FLASH_OK)
 8001632:	6a3b      	ldr	r3, [r7, #32]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d108      	bne.n	800164a <FLASH_IF_Write_Buffer+0x68>
  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	3301      	adds	r3, #1
 800163c:	61fb      	str	r3, [r7, #28]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	08db      	lsrs	r3, r3, #3
 8001642:	69fa      	ldr	r2, [r7, #28]
 8001644:	429a      	cmp	r2, r3
 8001646:	d3d9      	bcc.n	80015fc <FLASH_IF_Write_Buffer+0x1a>
 8001648:	e000      	b.n	800164c <FLASH_IF_Write_Buffer+0x6a>
    {
      /* exit the for loop*/
      break;
 800164a:	bf00      	nop
    }
  }

  return status;
 800164c:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN FLASH_IF_Write_Buffer_2 */

  /* USER CODE END FLASH_IF_Write_Buffer_2 */
}
 800164e:	4618      	mov	r0, r3
 8001650:	3728      	adds	r7, #40	@ 0x28
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <FLASH_IF_IsEmpty>:

static int32_t FLASH_IF_IsEmpty(uint8_t *addr, uint32_t size)
{
 8001656:	b480      	push	{r7}
 8001658:	b085      	sub	sp, #20
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
 800165e:	6039      	str	r1, [r7, #0]
  /* USER CODE END FLASH_IF_IsEmpty_1 */
  uint64_t *addr64;
  uint32_t i;

  /* start memory NOT 64bits aligned */
  while ((((uint32_t)addr) % sizeof(uint64_t)) != 0)
 8001660:	e00a      	b.n	8001678 <FLASH_IF_IsEmpty+0x22>
  {
    if (*addr++ != UINT8_MAX)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	1c5a      	adds	r2, r3, #1
 8001666:	607a      	str	r2, [r7, #4]
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	2bff      	cmp	r3, #255	@ 0xff
 800166c:	d001      	beq.n	8001672 <FLASH_IF_IsEmpty+0x1c>
    {
      return FLASH_NOT_EMPTY;
 800166e:	2301      	movs	r3, #1
 8001670:	e039      	b.n	80016e6 <FLASH_IF_IsEmpty+0x90>
    }
    size--;
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	3b01      	subs	r3, #1
 8001676:	603b      	str	r3, [r7, #0]
  while ((((uint32_t)addr) % sizeof(uint64_t)) != 0)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f003 0307 	and.w	r3, r3, #7
 800167e:	2b00      	cmp	r3, #0
 8001680:	d1ef      	bne.n	8001662 <FLASH_IF_IsEmpty+0xc>
  }

  /* addr64 is 64 bits aligned */
  addr64 = (uint64_t *)addr;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	60fb      	str	r3, [r7, #12]
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 8001686:	2300      	movs	r3, #0
 8001688:	60bb      	str	r3, [r7, #8]
 800168a:	e010      	b.n	80016ae <FLASH_IF_IsEmpty+0x58>
  {
    if (*addr64++ != UINT64_MAX)
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	f103 0208 	add.w	r2, r3, #8
 8001692:	60fa      	str	r2, [r7, #12]
 8001694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800169c:	bf08      	it	eq
 800169e:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 80016a2:	d001      	beq.n	80016a8 <FLASH_IF_IsEmpty+0x52>
    {
      return FLASH_NOT_EMPTY;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e01e      	b.n	80016e6 <FLASH_IF_IsEmpty+0x90>
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	3301      	adds	r3, #1
 80016ac:	60bb      	str	r3, [r7, #8]
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	08db      	lsrs	r3, r3, #3
 80016b2:	68ba      	ldr	r2, [r7, #8]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d3e9      	bcc.n	800168c <FLASH_IF_IsEmpty+0x36>
    }
  }
  size -= sizeof(uint64_t) * i;
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	00db      	lsls	r3, r3, #3
 80016bc:	683a      	ldr	r2, [r7, #0]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	603b      	str	r3, [r7, #0]

  /* end memory NOT 64 bits aligned */
  addr = (uint8_t *)addr64;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	607b      	str	r3, [r7, #4]
  while (size != 0)
 80016c6:	e00a      	b.n	80016de <FLASH_IF_IsEmpty+0x88>
  {
    if (*addr++ != UINT8_MAX)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	1c5a      	adds	r2, r3, #1
 80016cc:	607a      	str	r2, [r7, #4]
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	2bff      	cmp	r3, #255	@ 0xff
 80016d2:	d001      	beq.n	80016d8 <FLASH_IF_IsEmpty+0x82>
    {
      return FLASH_NOT_EMPTY;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e006      	b.n	80016e6 <FLASH_IF_IsEmpty+0x90>
    }
    size--;
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	3b01      	subs	r3, #1
 80016dc:	603b      	str	r3, [r7, #0]
  while (size != 0)
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d1f1      	bne.n	80016c8 <FLASH_IF_IsEmpty+0x72>
  }
  return FLASH_EMPTY;
 80016e4:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_IsEmpty_2 */

  /* USER CODE END FLASH_IF_IsEmpty_2 */
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3714      	adds	r7, #20
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bc80      	pop	{r7}
 80016ee:	4770      	bx	lr

080016f0 <LL_AHB2_GRP1_EnableClock>:
{
 80016f0:	b480      	push	{r7}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80016f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016fc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80016fe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4313      	orrs	r3, r2
 8001706:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001708:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800170c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4013      	ands	r3, r2
 8001712:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001714:	68fb      	ldr	r3, [r7, #12]
}
 8001716:	bf00      	nop
 8001718:	3714      	adds	r7, #20
 800171a:	46bd      	mov	sp, r7
 800171c:	bc80      	pop	{r7}
 800171e:	4770      	bx	lr

08001720 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001726:	1d3b      	adds	r3, r7, #4
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	605a      	str	r2, [r3, #4]
 800172e:	609a      	str	r2, [r3, #8]
 8001730:	60da      	str	r2, [r3, #12]
 8001732:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001734:	2002      	movs	r0, #2
 8001736:	f7ff ffdb 	bl	80016f0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800173a:	2004      	movs	r0, #4
 800173c:	f7ff ffd8 	bl	80016f0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001740:	2001      	movs	r0, #1
 8001742:	f7ff ffd5 	bl	80016f0 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15|DBG3_Pin|DBG4_Pin|GPIO_PIN_9
 8001746:	2200      	movs	r2, #0
 8001748:	f248 6118 	movw	r1, #34328	@ 0x8618
 800174c:	4836      	ldr	r0, [pc, #216]	@ (8001828 <MX_GPIO_Init+0x108>)
 800174e:	f003 ff6d 	bl	800562c <HAL_GPIO_WritePin>
                          |DBG2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8001752:	2201      	movs	r2, #1
 8001754:	2120      	movs	r1, #32
 8001756:	4834      	ldr	r0, [pc, #208]	@ (8001828 <MX_GPIO_Init+0x108>)
 8001758:	f003 ff68 	bl	800562c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DBG1_Pin|GPIO_PIN_9|RF_CTRL1_Pin|RF_CTRL2_Pin, GPIO_PIN_RESET);
 800175c:	2200      	movs	r2, #0
 800175e:	f240 2131 	movw	r1, #561	@ 0x231
 8001762:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001766:	f003 ff61 	bl	800562c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB15 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_9;
 800176a:	f44f 4302 	mov.w	r3, #33280	@ 0x8200
 800176e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001770:	2301      	movs	r3, #1
 8001772:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001774:	2300      	movs	r3, #0
 8001776:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001778:	2300      	movs	r3, #0
 800177a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800177c:	1d3b      	adds	r3, r7, #4
 800177e:	4619      	mov	r1, r3
 8001780:	4829      	ldr	r0, [pc, #164]	@ (8001828 <MX_GPIO_Init+0x108>)
 8001782:	f003 fd25 	bl	80051d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DBG3_Pin|DBG4_Pin|LED2_Pin|DBG2_Pin;
 8001786:	f44f 6387 	mov.w	r3, #1080	@ 0x438
 800178a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800178c:	2301      	movs	r3, #1
 800178e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001790:	2300      	movs	r3, #0
 8001792:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001794:	2303      	movs	r3, #3
 8001796:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001798:	1d3b      	adds	r3, r7, #4
 800179a:	4619      	mov	r1, r3
 800179c:	4822      	ldr	r0, [pc, #136]	@ (8001828 <MX_GPIO_Init+0x108>)
 800179e:	f003 fd17 	bl	80051d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80017a2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80017a6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017a8:	2300      	movs	r3, #0
 80017aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ac:	2300      	movs	r3, #0
 80017ae:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017b0:	1d3b      	adds	r3, r7, #4
 80017b2:	4619      	mov	r1, r3
 80017b4:	481c      	ldr	r0, [pc, #112]	@ (8001828 <MX_GPIO_Init+0x108>)
 80017b6:	f003 fd0b 	bl	80051d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DBG1_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin;
 80017ba:	2331      	movs	r3, #49	@ 0x31
 80017bc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017be:	2301      	movs	r3, #1
 80017c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c2:	2300      	movs	r3, #0
 80017c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c6:	2303      	movs	r3, #3
 80017c8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ca:	1d3b      	adds	r3, r7, #4
 80017cc:	4619      	mov	r1, r3
 80017ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017d2:	f003 fcfd 	bl	80051d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUT1_Pin;
 80017d6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017da:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017dc:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80017e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017e2:	2301      	movs	r3, #1
 80017e4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BUT1_GPIO_Port, &GPIO_InitStruct);
 80017e6:	1d3b      	adds	r3, r7, #4
 80017e8:	4619      	mov	r1, r3
 80017ea:	480f      	ldr	r0, [pc, #60]	@ (8001828 <MX_GPIO_Init+0x108>)
 80017ec:	f003 fcf0 	bl	80051d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80017f0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80017f4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017f6:	2301      	movs	r3, #1
 80017f8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fa:	2300      	movs	r3, #0
 80017fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fe:	2300      	movs	r3, #0
 8001800:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001802:	1d3b      	adds	r3, r7, #4
 8001804:	4619      	mov	r1, r3
 8001806:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800180a:	f003 fce1 	bl	80051d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800180e:	2200      	movs	r2, #0
 8001810:	2100      	movs	r1, #0
 8001812:	2029      	movs	r0, #41	@ 0x29
 8001814:	f002 fe59 	bl	80044ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001818:	2029      	movs	r0, #41	@ 0x29
 800181a:	f002 fe70 	bl	80044fe <HAL_NVIC_EnableIRQ>

}
 800181e:	bf00      	nop
 8001820:	3718      	adds	r7, #24
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	48000400 	.word	0x48000400

0800182c <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001834:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001838:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800183c:	f023 0218 	bic.w	r2, r3, #24
 8001840:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	4313      	orrs	r3, r2
 8001848:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800184c:	bf00      	nop
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	bc80      	pop	{r7}
 8001854:	4770      	bx	lr
	...

08001858 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800185c:	f001 fc72 	bl	8003144 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001860:	f000 f81e 	bl	80018a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001864:	f7ff ff5c 	bl	8001720 <MX_GPIO_Init>
  MX_LoRaWAN_Init();
 8001868:	f008 fcb2 	bl	800a1d0 <MX_LoRaWAN_Init>
  MX_USART2_UART_Init();
 800186c:	f001 f930 	bl	8002ad0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8001870:	2201      	movs	r2, #1
 8001872:	2120      	movs	r1, #32
 8001874:	4809      	ldr	r0, [pc, #36]	@ (800189c <main+0x44>)
 8001876:	f003 fed9 	bl	800562c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 800187a:	2201      	movs	r2, #1
 800187c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001880:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001884:	f003 fed2 	bl	800562c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8001888:	2201      	movs	r2, #1
 800188a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800188e:	4803      	ldr	r0, [pc, #12]	@ (800189c <main+0x44>)
 8001890:	f003 fecc 	bl	800562c <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_LoRaWAN_Process();
 8001894:	f008 fca4 	bl	800a1e0 <MX_LoRaWAN_Process>
 8001898:	e7fc      	b.n	8001894 <main+0x3c>
 800189a:	bf00      	nop
 800189c:	48000400 	.word	0x48000400

080018a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b09a      	sub	sp, #104	@ 0x68
 80018a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018a6:	f107 0320 	add.w	r3, r7, #32
 80018aa:	2248      	movs	r2, #72	@ 0x48
 80018ac:	2100      	movs	r1, #0
 80018ae:	4618      	mov	r0, r3
 80018b0:	f01a fe69 	bl	801c586 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018b4:	f107 0308 	add.w	r3, r7, #8
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	605a      	str	r2, [r3, #4]
 80018be:	609a      	str	r2, [r3, #8]
 80018c0:	60da      	str	r2, [r3, #12]
 80018c2:	611a      	str	r2, [r3, #16]
 80018c4:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80018c6:	f003 fee1 	bl	800568c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80018ca:	2000      	movs	r0, #0
 80018cc:	f7ff ffae 	bl	800182c <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001950 <SystemClock_Config+0xb0>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80018d8:	4a1d      	ldr	r2, [pc, #116]	@ (8001950 <SystemClock_Config+0xb0>)
 80018da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018de:	6013      	str	r3, [r2, #0]
 80018e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001950 <SystemClock_Config+0xb0>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80018e8:	607b      	str	r3, [r7, #4]
 80018ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80018ec:	2324      	movs	r3, #36	@ 0x24
 80018ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80018f0:	2381      	movs	r3, #129	@ 0x81
 80018f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80018f4:	2301      	movs	r3, #1
 80018f6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80018f8:	2300      	movs	r3, #0
 80018fa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80018fc:	23b0      	movs	r3, #176	@ 0xb0
 80018fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001900:	2300      	movs	r3, #0
 8001902:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001904:	f107 0320 	add.w	r3, r7, #32
 8001908:	4618      	mov	r0, r3
 800190a:	f004 fa0b 	bl	8005d24 <HAL_RCC_OscConfig>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001914:	f000 f916 	bl	8001b44 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001918:	234f      	movs	r3, #79	@ 0x4f
 800191a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800191c:	2300      	movs	r3, #0
 800191e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001920:	2300      	movs	r3, #0
 8001922:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001924:	2300      	movs	r3, #0
 8001926:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001928:	2300      	movs	r3, #0
 800192a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 800192c:	2300      	movs	r3, #0
 800192e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001930:	f107 0308 	add.w	r3, r7, #8
 8001934:	2102      	movs	r1, #2
 8001936:	4618      	mov	r0, r3
 8001938:	f004 fd90 	bl	800645c <HAL_RCC_ClockConfig>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001942:	f000 f8ff 	bl	8001b44 <Error_Handler>
  }
}
 8001946:	bf00      	nop
 8001948:	3768      	adds	r7, #104	@ 0x68
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	58000400 	.word	0x58000400

08001954 <PumpDelayCallback>:
UTIL_TIMER_Object_t PumpTimer;
static PumpState_t currentPumpState;
static uint8_t autoDurationMinutes = 0;

static void PumpDelayCallback(void *context)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 800195c:	2201      	movs	r2, #1
 800195e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001962:	4809      	ldr	r0, [pc, #36]	@ (8001988 <PumpDelayCallback+0x34>)
 8001964:	f003 fe62 	bl	800562c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8001968:	2201      	movs	r2, #1
 800196a:	2120      	movs	r1, #32
 800196c:	4806      	ldr	r0, [pc, #24]	@ (8001988 <PumpDelayCallback+0x34>)
 800196e:	f003 fe5d 	bl	800562c <HAL_GPIO_WritePin>
    APP_LOG(TS_ON, VLEVEL_M, "[PumpStateMachine] STATE_AUTO: ดับ LED เสร็จแล้ว\r\n");
 8001972:	4b06      	ldr	r3, [pc, #24]	@ (800198c <PumpDelayCallback+0x38>)
 8001974:	2201      	movs	r2, #1
 8001976:	2100      	movs	r1, #0
 8001978:	2002      	movs	r0, #2
 800197a:	f019 fe31 	bl	801b5e0 <UTIL_ADV_TRACE_COND_FSend>
}
 800197e:	bf00      	nop
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	48000400 	.word	0x48000400
 800198c:	0801e4d8 	.word	0x0801e4d8

08001990 <PumpTimerCallback>:

static void PumpTimerCallback(void *context)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af02      	add	r7, sp, #8
 8001996:	6078      	str	r0, [r7, #4]
    switch (currentPumpState)
 8001998:	4b21      	ldr	r3, [pc, #132]	@ (8001a20 <PumpTimerCallback+0x90>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	2b02      	cmp	r3, #2
 800199e:	d014      	beq.n	80019ca <PumpTimerCallback+0x3a>
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	dc38      	bgt.n	8001a16 <PumpTimerCallback+0x86>
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d002      	beq.n	80019ae <PumpTimerCallback+0x1e>
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d01b      	beq.n	80019e4 <PumpTimerCallback+0x54>
            UTIL_TIMER_Create(&PumpTimer, 1000, UTIL_TIMER_ONESHOT, PumpDelayCallback, NULL);
            UTIL_TIMER_Start(&PumpTimer);
            break;

        default:
            break;
 80019ac:	e033      	b.n	8001a16 <PumpTimerCallback+0x86>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80019ae:	2201      	movs	r2, #1
 80019b0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80019b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019b8:	f003 fe38 	bl	800562c <HAL_GPIO_WritePin>
            APP_LOG(TS_ON, VLEVEL_M, "[PumpStateMachine] STATE_PUMP_ON: ครบ 1 วิ ปิดปั๊มแล้ว\r\n");
 80019bc:	4b19      	ldr	r3, [pc, #100]	@ (8001a24 <PumpTimerCallback+0x94>)
 80019be:	2201      	movs	r2, #1
 80019c0:	2100      	movs	r1, #0
 80019c2:	2002      	movs	r0, #2
 80019c4:	f019 fe0c 	bl	801b5e0 <UTIL_ADV_TRACE_COND_FSend>
            break;
 80019c8:	e026      	b.n	8001a18 <PumpTimerCallback+0x88>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 80019ca:	2201      	movs	r2, #1
 80019cc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80019d0:	4815      	ldr	r0, [pc, #84]	@ (8001a28 <PumpTimerCallback+0x98>)
 80019d2:	f003 fe2b 	bl	800562c <HAL_GPIO_WritePin>
            APP_LOG(TS_ON, VLEVEL_M, "[PumpStateMachine] STATE_PUMP_OFF: ครบ 1 วิ ปิดปั๊มแล้ว\r\n");
 80019d6:	4b15      	ldr	r3, [pc, #84]	@ (8001a2c <PumpTimerCallback+0x9c>)
 80019d8:	2201      	movs	r2, #1
 80019da:	2100      	movs	r1, #0
 80019dc:	2002      	movs	r0, #2
 80019de:	f019 fdff 	bl	801b5e0 <UTIL_ADV_TRACE_COND_FSend>
            break;
 80019e2:	e019      	b.n	8001a18 <PumpTimerCallback+0x88>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80019e4:	2200      	movs	r2, #0
 80019e6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80019ea:	480f      	ldr	r0, [pc, #60]	@ (8001a28 <PumpTimerCallback+0x98>)
 80019ec:	f003 fe1e 	bl	800562c <HAL_GPIO_WritePin>
            APP_LOG(TS_ON, VLEVEL_M, "[PumpStateMachine] STATE_AUTO: ครบเวลา ปิดปั๊มแล้ว\r\n");
 80019f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001a30 <PumpTimerCallback+0xa0>)
 80019f2:	2201      	movs	r2, #1
 80019f4:	2100      	movs	r1, #0
 80019f6:	2002      	movs	r0, #2
 80019f8:	f019 fdf2 	bl	801b5e0 <UTIL_ADV_TRACE_COND_FSend>
            UTIL_TIMER_Create(&PumpTimer, 1000, UTIL_TIMER_ONESHOT, PumpDelayCallback, NULL);
 80019fc:	2300      	movs	r3, #0
 80019fe:	9300      	str	r3, [sp, #0]
 8001a00:	4b0c      	ldr	r3, [pc, #48]	@ (8001a34 <PumpTimerCallback+0xa4>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001a08:	480b      	ldr	r0, [pc, #44]	@ (8001a38 <PumpTimerCallback+0xa8>)
 8001a0a:	f019 fb3b 	bl	801b084 <UTIL_TIMER_Create>
            UTIL_TIMER_Start(&PumpTimer);
 8001a0e:	480a      	ldr	r0, [pc, #40]	@ (8001a38 <PumpTimerCallback+0xa8>)
 8001a10:	f019 fb6e 	bl	801b0f0 <UTIL_TIMER_Start>
            break;
 8001a14:	e000      	b.n	8001a18 <PumpTimerCallback+0x88>
            break;
 8001a16:	bf00      	nop
    }
}
 8001a18:	bf00      	nop
 8001a1a:	3708      	adds	r7, #8
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	200003a4 	.word	0x200003a4
 8001a24:	0801e524 	.word	0x0801e524
 8001a28:	48000400 	.word	0x48000400
 8001a2c:	0801e580 	.word	0x0801e580
 8001a30:	0801e5dc 	.word	0x0801e5dc
 8001a34:	08001955 	.word	0x08001955
 8001a38:	2000038c 	.word	0x2000038c

08001a3c <PumpStateMachine>:

void PumpStateMachine(PumpState_t state, uint8_t duration)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af02      	add	r7, sp, #8
 8001a42:	4603      	mov	r3, r0
 8001a44:	460a      	mov	r2, r1
 8001a46:	71fb      	strb	r3, [r7, #7]
 8001a48:	4613      	mov	r3, r2
 8001a4a:	71bb      	strb	r3, [r7, #6]
    currentPumpState = state;
 8001a4c:	4a35      	ldr	r2, [pc, #212]	@ (8001b24 <PumpStateMachine+0xe8>)
 8001a4e:	79fb      	ldrb	r3, [r7, #7]
 8001a50:	7013      	strb	r3, [r2, #0]
    autoDurationMinutes = duration;
 8001a52:	4a35      	ldr	r2, [pc, #212]	@ (8001b28 <PumpStateMachine+0xec>)
 8001a54:	79bb      	ldrb	r3, [r7, #6]
 8001a56:	7013      	strb	r3, [r2, #0]

    switch (state)
 8001a58:	79fb      	ldrb	r3, [r7, #7]
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d020      	beq.n	8001aa0 <PumpStateMachine+0x64>
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	dc5b      	bgt.n	8001b1a <PumpStateMachine+0xde>
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d002      	beq.n	8001a6c <PumpStateMachine+0x30>
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d033      	beq.n	8001ad2 <PumpStateMachine+0x96>
            UTIL_TIMER_Create(&PumpTimer, (uint32_t)duration * 60 * 1000, UTIL_TIMER_ONESHOT, PumpTimerCallback, NULL);
            UTIL_TIMER_Start(&PumpTimer);
            break;

        default:
            break;
 8001a6a:	e056      	b.n	8001b1a <PumpStateMachine+0xde>
            APP_LOG(TS_ON, VLEVEL_M, "Command 0x01: Pump ON\r\n");
 8001a6c:	4b2f      	ldr	r3, [pc, #188]	@ (8001b2c <PumpStateMachine+0xf0>)
 8001a6e:	2201      	movs	r2, #1
 8001a70:	2100      	movs	r1, #0
 8001a72:	2002      	movs	r0, #2
 8001a74:	f019 fdb4 	bl	801b5e0 <UTIL_ADV_TRACE_COND_FSend>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a7e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a82:	f003 fdd3 	bl	800562c <HAL_GPIO_WritePin>
            UTIL_TIMER_Create(&PumpTimer, 1000, UTIL_TIMER_ONESHOT, PumpTimerCallback, NULL);
 8001a86:	2300      	movs	r3, #0
 8001a88:	9300      	str	r3, [sp, #0]
 8001a8a:	4b29      	ldr	r3, [pc, #164]	@ (8001b30 <PumpStateMachine+0xf4>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001a92:	4828      	ldr	r0, [pc, #160]	@ (8001b34 <PumpStateMachine+0xf8>)
 8001a94:	f019 faf6 	bl	801b084 <UTIL_TIMER_Create>
            UTIL_TIMER_Start(&PumpTimer);
 8001a98:	4826      	ldr	r0, [pc, #152]	@ (8001b34 <PumpStateMachine+0xf8>)
 8001a9a:	f019 fb29 	bl	801b0f0 <UTIL_TIMER_Start>
            break;
 8001a9e:	e03d      	b.n	8001b1c <PumpStateMachine+0xe0>
            APP_LOG(TS_ON, VLEVEL_M, "Command 0x03: Pump OFF\r\n");
 8001aa0:	4b25      	ldr	r3, [pc, #148]	@ (8001b38 <PumpStateMachine+0xfc>)
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	2002      	movs	r0, #2
 8001aa8:	f019 fd9a 	bl	801b5e0 <UTIL_ADV_TRACE_COND_FSend>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8001aac:	2200      	movs	r2, #0
 8001aae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001ab2:	4822      	ldr	r0, [pc, #136]	@ (8001b3c <PumpStateMachine+0x100>)
 8001ab4:	f003 fdba 	bl	800562c <HAL_GPIO_WritePin>
            UTIL_TIMER_Create(&PumpTimer, 1000, UTIL_TIMER_ONESHOT, PumpTimerCallback, NULL);
 8001ab8:	2300      	movs	r3, #0
 8001aba:	9300      	str	r3, [sp, #0]
 8001abc:	4b1c      	ldr	r3, [pc, #112]	@ (8001b30 <PumpStateMachine+0xf4>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001ac4:	481b      	ldr	r0, [pc, #108]	@ (8001b34 <PumpStateMachine+0xf8>)
 8001ac6:	f019 fadd 	bl	801b084 <UTIL_TIMER_Create>
            UTIL_TIMER_Start(&PumpTimer);
 8001aca:	481a      	ldr	r0, [pc, #104]	@ (8001b34 <PumpStateMachine+0xf8>)
 8001acc:	f019 fb10 	bl	801b0f0 <UTIL_TIMER_Start>
            break;
 8001ad0:	e024      	b.n	8001b1c <PumpStateMachine+0xe0>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	2120      	movs	r1, #32
 8001ad6:	4819      	ldr	r0, [pc, #100]	@ (8001b3c <PumpStateMachine+0x100>)
 8001ad8:	f003 fda8 	bl	800562c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001adc:	2200      	movs	r2, #0
 8001ade:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001ae2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ae6:	f003 fda1 	bl	800562c <HAL_GPIO_WritePin>
            APP_LOG(TS_ON, VLEVEL_M, "[PumpStateMachine] STATE_AUTO: เปิดปั๊ม (เวลา %d นาที)\r\n", duration);
 8001aea:	79bb      	ldrb	r3, [r7, #6]
 8001aec:	9300      	str	r3, [sp, #0]
 8001aee:	4b14      	ldr	r3, [pc, #80]	@ (8001b40 <PumpStateMachine+0x104>)
 8001af0:	2201      	movs	r2, #1
 8001af2:	2100      	movs	r1, #0
 8001af4:	2002      	movs	r0, #2
 8001af6:	f019 fd73 	bl	801b5e0 <UTIL_ADV_TRACE_COND_FSend>
            UTIL_TIMER_Create(&PumpTimer, (uint32_t)duration * 60 * 1000, UTIL_TIMER_ONESHOT, PumpTimerCallback, NULL);
 8001afa:	79bb      	ldrb	r3, [r7, #6]
 8001afc:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8001b00:	fb02 f103 	mul.w	r1, r2, r3
 8001b04:	2300      	movs	r3, #0
 8001b06:	9300      	str	r3, [sp, #0]
 8001b08:	4b09      	ldr	r3, [pc, #36]	@ (8001b30 <PumpStateMachine+0xf4>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	4809      	ldr	r0, [pc, #36]	@ (8001b34 <PumpStateMachine+0xf8>)
 8001b0e:	f019 fab9 	bl	801b084 <UTIL_TIMER_Create>
            UTIL_TIMER_Start(&PumpTimer);
 8001b12:	4808      	ldr	r0, [pc, #32]	@ (8001b34 <PumpStateMachine+0xf8>)
 8001b14:	f019 faec 	bl	801b0f0 <UTIL_TIMER_Start>
            break;
 8001b18:	e000      	b.n	8001b1c <PumpStateMachine+0xe0>
            break;
 8001b1a:	bf00      	nop
    }
}
 8001b1c:	bf00      	nop
 8001b1e:	3708      	adds	r7, #8
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	200003a4 	.word	0x200003a4
 8001b28:	200003a5 	.word	0x200003a5
 8001b2c:	0801e638 	.word	0x0801e638
 8001b30:	08001991 	.word	0x08001991
 8001b34:	2000038c 	.word	0x2000038c
 8001b38:	0801e650 	.word	0x0801e650
 8001b3c:	48000400 	.word	0x48000400
 8001b40:	0801e66c 	.word	0x0801e66c

08001b44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b48:	b672      	cpsid	i
}
 8001b4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b4c:	bf00      	nop
 8001b4e:	e7fd      	b.n	8001b4c <Error_Handler+0x8>

08001b50 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001b54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b5c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001b60:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001b68:	bf00      	nop
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bc80      	pop	{r7}
 8001b6e:	4770      	bx	lr

08001b70 <LL_APB1_GRP1_EnableClock>:
{
 8001b70:	b480      	push	{r7}
 8001b72:	b085      	sub	sp, #20
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001b78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b7c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001b7e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001b88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b8c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4013      	ands	r3, r2
 8001b92:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b94:	68fb      	ldr	r3, [r7, #12]
}
 8001b96:	bf00      	nop
 8001b98:	3714      	adds	r7, #20
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bc80      	pop	{r7}
 8001b9e:	4770      	bx	lr

08001ba0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b08c      	sub	sp, #48	@ 0x30
 8001ba4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 8001ba6:	1d3b      	adds	r3, r7, #4
 8001ba8:	222c      	movs	r2, #44	@ 0x2c
 8001baa:	2100      	movs	r1, #0
 8001bac:	4618      	mov	r0, r3
 8001bae:	f01a fcea 	bl	801c586 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001bb2:	4b22      	ldr	r3, [pc, #136]	@ (8001c3c <MX_RTC_Init+0x9c>)
 8001bb4:	4a22      	ldr	r2, [pc, #136]	@ (8001c40 <MX_RTC_Init+0xa0>)
 8001bb6:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8001bb8:	4b20      	ldr	r3, [pc, #128]	@ (8001c3c <MX_RTC_Init+0x9c>)
 8001bba:	221f      	movs	r2, #31
 8001bbc:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001bbe:	4b1f      	ldr	r3, [pc, #124]	@ (8001c3c <MX_RTC_Init+0x9c>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001bc4:	4b1d      	ldr	r3, [pc, #116]	@ (8001c3c <MX_RTC_Init+0x9c>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001bca:	4b1c      	ldr	r3, [pc, #112]	@ (8001c3c <MX_RTC_Init+0x9c>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001bd0:	4b1a      	ldr	r3, [pc, #104]	@ (8001c3c <MX_RTC_Init+0x9c>)
 8001bd2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001bd6:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001bd8:	4b18      	ldr	r3, [pc, #96]	@ (8001c3c <MX_RTC_Init+0x9c>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8001bde:	4b17      	ldr	r3, [pc, #92]	@ (8001c3c <MX_RTC_Init+0x9c>)
 8001be0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001be4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001be6:	4815      	ldr	r0, [pc, #84]	@ (8001c3c <MX_RTC_Init+0x9c>)
 8001be8:	f005 f8f4 	bl	8006dd4 <HAL_RTC_Init>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8001bf2:	f7ff ffa7 	bl	8001b44 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8001bf6:	4811      	ldr	r0, [pc, #68]	@ (8001c3c <MX_RTC_Init+0x9c>)
 8001bf8:	f005 fbe2 	bl	80073c0 <HAL_RTCEx_SetSSRU_IT>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8001c02:	f7ff ff9f 	bl	8001b44 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001c06:	2300      	movs	r3, #0
 8001c08:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001c12:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001c16:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8001c18:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8001c1e:	1d3b      	adds	r3, r7, #4
 8001c20:	2200      	movs	r2, #0
 8001c22:	4619      	mov	r1, r3
 8001c24:	4805      	ldr	r0, [pc, #20]	@ (8001c3c <MX_RTC_Init+0x9c>)
 8001c26:	f005 f94f 	bl	8006ec8 <HAL_RTC_SetAlarm_IT>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001c30:	f7ff ff88 	bl	8001b44 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001c34:	bf00      	nop
 8001c36:	3730      	adds	r7, #48	@ 0x30
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	200003a8 	.word	0x200003a8
 8001c40:	40002800 	.word	0x40002800

08001c44 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b090      	sub	sp, #64	@ 0x40
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c4c:	f107 0308 	add.w	r3, r7, #8
 8001c50:	2238      	movs	r2, #56	@ 0x38
 8001c52:	2100      	movs	r1, #0
 8001c54:	4618      	mov	r0, r3
 8001c56:	f01a fc96 	bl	801c586 <memset>
  if(rtcHandle->Instance==RTC)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a16      	ldr	r2, [pc, #88]	@ (8001cb8 <HAL_RTC_MspInit+0x74>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d125      	bne.n	8001cb0 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001c64:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001c68:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001c6a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c6e:	63fb      	str	r3, [r7, #60]	@ 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c70:	f107 0308 	add.w	r3, r7, #8
 8001c74:	4618      	mov	r0, r3
 8001c76:	f004 ff93 	bl	8006ba0 <HAL_RCCEx_PeriphCLKConfig>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001c80:	f7ff ff60 	bl	8001b44 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001c84:	f7ff ff64 	bl	8001b50 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001c88:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001c8c:	f7ff ff70 	bl	8001b70 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8001c90:	2200      	movs	r2, #0
 8001c92:	2100      	movs	r1, #0
 8001c94:	2002      	movs	r0, #2
 8001c96:	f002 fc18 	bl	80044ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8001c9a:	2002      	movs	r0, #2
 8001c9c:	f002 fc2f 	bl	80044fe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	202a      	movs	r0, #42	@ 0x2a
 8001ca6:	f002 fc10 	bl	80044ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001caa:	202a      	movs	r0, #42	@ 0x2a
 8001cac:	f002 fc27 	bl	80044fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001cb0:	bf00      	nop
 8001cb2:	3740      	adds	r7, #64	@ 0x40
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	40002800 	.word	0x40002800

08001cbc <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8001cc0:	4b03      	ldr	r3, [pc, #12]	@ (8001cd0 <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8001cc8:	bf00      	nop
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bc80      	pop	{r7}
 8001cce:	4770      	bx	lr
 8001cd0:	58000400 	.word	0x58000400

08001cd4 <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8001cd8:	bf00      	nop
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bc80      	pop	{r7}
 8001cde:	4770      	bx	lr

08001ce0 <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8001ce4:	bf00      	nop
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bc80      	pop	{r7}
 8001cea:	4770      	bx	lr

08001cec <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8001cf0:	f001 fa48 	bl	8003184 <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 8001cf4:	f7ff ffe2 	bl	8001cbc <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8001cf8:	2001      	movs	r0, #1
 8001cfa:	f003 fd59 	bl	80057b0 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8001cfe:	bf00      	nop
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 8001d06:	f001 fa4b 	bl	80031a0 <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 8001d0a:	f001 f8cb 	bl	8002ea4 <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 8001d0e:	bf00      	nop
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 8001d16:	f001 fa35 	bl	8003184 <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001d1a:	2101      	movs	r1, #1
 8001d1c:	2000      	movs	r0, #0
 8001d1e:	f003 fcc3 	bl	80056a8 <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 8001d22:	bf00      	nop
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 8001d2a:	f001 fa39 	bl	80031a0 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 8001d2e:	bf00      	nop
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d32:	b480      	push	{r7}
 8001d34:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d36:	bf00      	nop
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bc80      	pop	{r7}
 8001d3c:	4770      	bx	lr

08001d3e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d42:	bf00      	nop
 8001d44:	e7fd      	b.n	8001d42 <NMI_Handler+0x4>

08001d46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d46:	b480      	push	{r7}
 8001d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d4a:	bf00      	nop
 8001d4c:	e7fd      	b.n	8001d4a <HardFault_Handler+0x4>

08001d4e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d52:	bf00      	nop
 8001d54:	e7fd      	b.n	8001d52 <MemManage_Handler+0x4>

08001d56 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d56:	b480      	push	{r7}
 8001d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d5a:	bf00      	nop
 8001d5c:	e7fd      	b.n	8001d5a <BusFault_Handler+0x4>

08001d5e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d62:	bf00      	nop
 8001d64:	e7fd      	b.n	8001d62 <UsageFault_Handler+0x4>

08001d66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d66:	b480      	push	{r7}
 8001d68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d6a:	bf00      	nop
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bc80      	pop	{r7}
 8001d70:	4770      	bx	lr

08001d72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d72:	b480      	push	{r7}
 8001d74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d76:	bf00      	nop
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bc80      	pop	{r7}
 8001d7c:	4770      	bx	lr

08001d7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d82:	bf00      	nop
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bc80      	pop	{r7}
 8001d88:	4770      	bx	lr

08001d8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d8e:	bf00      	nop
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bc80      	pop	{r7}
 8001d94:	4770      	bx	lr
	...

08001d98 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8001d9c:	4802      	ldr	r0, [pc, #8]	@ (8001da8 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 8001d9e:	f005 fb4b 	bl	8007438 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8001da2:	bf00      	nop
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	200003a8 	.word	0x200003a8

08001dac <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001db0:	4802      	ldr	r0, [pc, #8]	@ (8001dbc <DMA1_Channel1_IRQHandler+0x10>)
 8001db2:	f002 fe3b 	bl	8004a2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001db6:	bf00      	nop
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	2000051c 	.word	0x2000051c

08001dc0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001dc4:	4802      	ldr	r0, [pc, #8]	@ (8001dd0 <USART1_IRQHandler+0x10>)
 8001dc6:	f006 f999 	bl	80080fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001dca:	bf00      	nop
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	200003fc 	.word	0x200003fc

08001dd4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001dd8:	4802      	ldr	r0, [pc, #8]	@ (8001de4 <USART2_IRQHandler+0x10>)
 8001dda:	f006 f98f 	bl	80080fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001dde:	bf00      	nop
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	2000048c 	.word	0x2000048c

08001de8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [15:10] Interrupt.
  */
void EXTI15_10_IRQHandler(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT1_Pin);
 8001dec:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001df0:	f003 fc34 	bl	800565c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001df4:	bf00      	nop
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001dfc:	4802      	ldr	r0, [pc, #8]	@ (8001e08 <RTC_Alarm_IRQHandler+0x10>)
 8001dfe:	f005 f9cb 	bl	8007198 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001e02:	bf00      	nop
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	200003a8 	.word	0x200003a8

08001e0c <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001e10:	4802      	ldr	r0, [pc, #8]	@ (8001e1c <SUBGHZ_Radio_IRQHandler+0x10>)
 8001e12:	f005 fe79 	bl	8007b08 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8001e16:	bf00      	nop
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	200003e0 	.word	0x200003e0

08001e20 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8001e28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e2c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001e2e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	664b      	str	r3, [r1, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8001e38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e3c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4013      	ands	r3, r2
 8001e42:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e44:	68fb      	ldr	r3, [r7, #12]
}
 8001e46:	bf00      	nop
 8001e48:	3714      	adds	r7, #20
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bc80      	pop	{r7}
 8001e4e:	4770      	bx	lr

08001e50 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8001e54:	4b06      	ldr	r3, [pc, #24]	@ (8001e70 <MX_SUBGHZ_Init+0x20>)
 8001e56:	2208      	movs	r2, #8
 8001e58:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8001e5a:	4805      	ldr	r0, [pc, #20]	@ (8001e70 <MX_SUBGHZ_Init+0x20>)
 8001e5c:	f005 fbd8 	bl	8007610 <HAL_SUBGHZ_Init>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8001e66:	f7ff fe6d 	bl	8001b44 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8001e6a:	bf00      	nop
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	200003e0 	.word	0x200003e0

08001e74 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8001e7c:	2001      	movs	r0, #1
 8001e7e:	f7ff ffcf 	bl	8001e20 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8001e82:	2200      	movs	r2, #0
 8001e84:	2100      	movs	r1, #0
 8001e86:	2032      	movs	r0, #50	@ 0x32
 8001e88:	f002 fb1f 	bl	80044ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8001e8c:	2032      	movs	r0, #50	@ 0x32
 8001e8e:	f002 fb36 	bl	80044fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8001e92:	bf00      	nop
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <LL_RCC_SetClkAfterWakeFromStop>:
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	b083      	sub	sp, #12
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001ea2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8001eac:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	608b      	str	r3, [r1, #8]
}
 8001eb6:	bf00      	nop
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bc80      	pop	{r7}
 8001ebe:	4770      	bx	lr

08001ec0 <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001ec4:	4b02      	ldr	r3, [pc, #8]	@ (8001ed0 <LL_FLASH_GetUDN+0x10>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bc80      	pop	{r7}
 8001ece:	4770      	bx	lr
 8001ed0:	1fff7580 	.word	0x1fff7580

08001ed4 <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8001ed8:	4b03      	ldr	r3, [pc, #12]	@ (8001ee8 <LL_FLASH_GetDeviceID+0x14>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	b2db      	uxtb	r3, r3
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bc80      	pop	{r7}
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	1fff7584 	.word	0x1fff7584

08001eec <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8001ef0:	4b03      	ldr	r3, [pc, #12]	@ (8001f00 <LL_FLASH_GetSTCompanyID+0x14>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	0a1b      	lsrs	r3, r3, #8
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bc80      	pop	{r7}
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	1fff7584 	.word	0x1fff7584

08001f04 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8001f08:	2000      	movs	r0, #0
 8001f0a:	f7ff ffc6 	bl	8001e9a <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 8001f0e:	f019 f8a9 	bl	801b064 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8001f12:	4b10      	ldr	r3, [pc, #64]	@ (8001f54 <SystemApp_Init+0x50>)
 8001f14:	2201      	movs	r2, #1
 8001f16:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 8001f18:	f000 f98c 	bl	8002234 <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8001f1c:	f019 fb32 	bl	801b584 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8001f20:	480d      	ldr	r0, [pc, #52]	@ (8001f58 <SystemApp_Init+0x54>)
 8001f22:	f019 fbdd 	bl	801b6e0 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /* #warning "should be removed when proper obl is done" */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001f26:	4b0d      	ldr	r3, [pc, #52]	@ (8001f5c <SystemApp_Init+0x58>)
 8001f28:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001f2c:	611a      	str	r2, [r3, #16]

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8001f2e:	2002      	movs	r0, #2
 8001f30:	f019 fbe4 	bl	801b6fc <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 8001f34:	f7ff f97a 	bl	800122c <SYS_InitMeasurement>

  /*Initialize the Sensors */
  EnvSensors_Init();
 8001f38:	f000 fa02 	bl	8002340 <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 8001f3c:	f018 fa60 	bl	801a400 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001f40:	2101      	movs	r1, #1
 8001f42:	2001      	movs	r0, #1
 8001f44:	f018 fa9c 	bl	801a480 <UTIL_LPM_SetOffMode>

#if defined (LOW_POWER_DISABLE) && (LOW_POWER_DISABLE == 1)
  /* Disable Stop Mode */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001f48:	2101      	movs	r1, #1
 8001f4a:	2001      	movs	r0, #1
 8001f4c:	f018 fa68 	bl	801a420 <UTIL_LPM_SetStopMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 8001f50:	bf00      	nop
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	200003ec 	.word	0x200003ec
 8001f58:	08002125 	.word	0x08002125
 8001f5c:	58004000 	.word	0x58004000

08001f60 <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 8001f64:	f018 fabc 	bl	801a4e0 <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 8001f68:	bf00      	nop
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
  uint8_t batteryLevel = 0;
 8001f72:	2300      	movs	r3, #0
 8001f74:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 8001f76:	f7ff f967 	bl	8001248 <SYS_GetBatteryLevel>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	80bb      	strh	r3, [r7, #4]

  /* Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 8001f7e:	88bb      	ldrh	r3, [r7, #4]
 8001f80:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d902      	bls.n	8001f8e <GetBatteryLevel+0x22>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 8001f88:	23fe      	movs	r3, #254	@ 0xfe
 8001f8a:	71fb      	strb	r3, [r7, #7]
 8001f8c:	e014      	b.n	8001fb8 <GetBatteryLevel+0x4c>
  }
  else if (batteryLevelmV < VDD_MIN)
 8001f8e:	88bb      	ldrh	r3, [r7, #4]
 8001f90:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
 8001f94:	d202      	bcs.n	8001f9c <GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
 8001f96:	2300      	movs	r3, #0
 8001f98:	71fb      	strb	r3, [r7, #7]
 8001f9a:	e00d      	b.n	8001fb8 <GetBatteryLevel+0x4c>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 8001f9c:	88bb      	ldrh	r3, [r7, #4]
 8001f9e:	f5a3 63e1 	sub.w	r3, r3, #1800	@ 0x708
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	01db      	lsls	r3, r3, #7
 8001fa8:	1a9b      	subs	r3, r3, r2
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	461a      	mov	r2, r3
 8001fae:	4b05      	ldr	r3, [pc, #20]	@ (8001fc4 <GetBatteryLevel+0x58>)
 8001fb0:	fba3 2302 	umull	r2, r3, r3, r2
 8001fb4:	09db      	lsrs	r3, r3, #7
 8001fb6:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 8001fb8:	79fb      	ldrb	r3, [r7, #7]
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	1b4e81b5 	.word	0x1b4e81b5

08001fc8 <GetTemperatureLevel>:

int16_t GetTemperatureLevel(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b088      	sub	sp, #32
 8001fcc:	af00      	add	r7, sp, #0
  int16_t temperatureLevel = 0;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	83fb      	strh	r3, [r7, #30]

  sensor_t sensor_data;

  EnvSensors_Read(&sensor_data);
 8001fd2:	1d3b      	adds	r3, r7, #4
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f000 f989 	bl	80022ec <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7fe fec9 	bl	8000d74 <__aeabi_f2iz>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	83fb      	strh	r3, [r7, #30]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 8001fe6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3720      	adds	r7, #32
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 8001ff2:	b590      	push	{r4, r7, lr}
 8001ff4:	b087      	sub	sp, #28
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 8001ffe:	f7ff ff5f 	bl	8001ec0 <LL_FLASH_GetUDN>
 8002002:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800200a:	d138      	bne.n	800207e <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 800200c:	f001 f8d6 	bl	80031bc <HAL_GetUIDw0>
 8002010:	4604      	mov	r4, r0
 8002012:	f001 f8e7 	bl	80031e4 <HAL_GetUIDw2>
 8002016:	4603      	mov	r3, r0
 8002018:	4423      	add	r3, r4
 800201a:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 800201c:	f001 f8d8 	bl	80031d0 <HAL_GetUIDw1>
 8002020:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	0e1a      	lsrs	r2, r3, #24
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	3307      	adds	r3, #7
 800202a:	b2d2      	uxtb	r2, r2
 800202c:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	0c1a      	lsrs	r2, r3, #16
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	3306      	adds	r3, #6
 8002036:	b2d2      	uxtb	r2, r2
 8002038:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	0a1a      	lsrs	r2, r3, #8
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	3305      	adds	r3, #5
 8002042:	b2d2      	uxtb	r2, r2
 8002044:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	3304      	adds	r3, #4
 800204a:	693a      	ldr	r2, [r7, #16]
 800204c:	b2d2      	uxtb	r2, r2
 800204e:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	0e1a      	lsrs	r2, r3, #24
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	3303      	adds	r3, #3
 8002058:	b2d2      	uxtb	r2, r2
 800205a:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	0c1a      	lsrs	r2, r3, #16
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	3302      	adds	r3, #2
 8002064:	b2d2      	uxtb	r2, r2
 8002066:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	0a1a      	lsrs	r2, r3, #8
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	3301      	adds	r3, #1
 8002070:	b2d2      	uxtb	r2, r2
 8002072:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	b2da      	uxtb	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 800207c:	e031      	b.n	80020e2 <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	3307      	adds	r3, #7
 8002082:	697a      	ldr	r2, [r7, #20]
 8002084:	b2d2      	uxtb	r2, r2
 8002086:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	0a1a      	lsrs	r2, r3, #8
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	3306      	adds	r3, #6
 8002090:	b2d2      	uxtb	r2, r2
 8002092:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	0c1a      	lsrs	r2, r3, #16
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	3305      	adds	r3, #5
 800209c:	b2d2      	uxtb	r2, r2
 800209e:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	0e1a      	lsrs	r2, r3, #24
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	3304      	adds	r3, #4
 80020a8:	b2d2      	uxtb	r2, r2
 80020aa:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 80020ac:	f7ff ff12 	bl	8001ed4 <LL_FLASH_GetDeviceID>
 80020b0:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	3303      	adds	r3, #3
 80020b6:	697a      	ldr	r2, [r7, #20]
 80020b8:	b2d2      	uxtb	r2, r2
 80020ba:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 80020bc:	f7ff ff16 	bl	8001eec <LL_FLASH_GetSTCompanyID>
 80020c0:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	3302      	adds	r3, #2
 80020c6:	697a      	ldr	r2, [r7, #20]
 80020c8:	b2d2      	uxtb	r2, r2
 80020ca:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	0a1a      	lsrs	r2, r3, #8
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	3301      	adds	r3, #1
 80020d4:	b2d2      	uxtb	r2, r2
 80020d6:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	0c1b      	lsrs	r3, r3, #16
 80020dc:	b2da      	uxtb	r2, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	701a      	strb	r2, [r3, #0]
}
 80020e2:	bf00      	nop
 80020e4:	371c      	adds	r7, #28
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd90      	pop	{r4, r7, pc}

080020ea <GetDevAddr>:

uint32_t GetDevAddr(void)
{
 80020ea:	b590      	push	{r4, r7, lr}
 80020ec:	b083      	sub	sp, #12
 80020ee:	af00      	add	r7, sp, #0
  uint32_t val = 0;
 80020f0:	2300      	movs	r3, #0
 80020f2:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  val = LL_FLASH_GetUDN();
 80020f4:	f7ff fee4 	bl	8001ec0 <LL_FLASH_GetUDN>
 80020f8:	6078      	str	r0, [r7, #4]
  if (val == 0xFFFFFFFF)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002100:	d10b      	bne.n	800211a <GetDevAddr+0x30>
  {
    val = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8002102:	f001 f85b 	bl	80031bc <HAL_GetUIDw0>
 8002106:	4604      	mov	r4, r0
 8002108:	f001 f862 	bl	80031d0 <HAL_GetUIDw1>
 800210c:	4603      	mov	r3, r0
 800210e:	405c      	eors	r4, r3
 8002110:	f001 f868 	bl	80031e4 <HAL_GetUIDw2>
 8002114:	4603      	mov	r3, r0
 8002116:	4063      	eors	r3, r4
 8002118:	607b      	str	r3, [r7, #4]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
  return val;
 800211a:	687b      	ldr	r3, [r7, #4]

}
 800211c:	4618      	mov	r0, r3
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	bd90      	pop	{r4, r7, pc}

08002124 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b086      	sub	sp, #24
 8002128:	af02      	add	r7, sp, #8
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 800212e:	f107 0308 	add.w	r3, r7, #8
 8002132:	4618      	mov	r0, r3
 8002134:	f018 fae4 	bl	801a700 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800213e:	9200      	str	r2, [sp, #0]
 8002140:	4a07      	ldr	r2, [pc, #28]	@ (8002160 <TimestampNow+0x3c>)
 8002142:	2110      	movs	r1, #16
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f000 f81d 	bl	8002184 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f7fe f868 	bl	8000220 <strlen>
 8002150:	4603      	mov	r3, r0
 8002152:	b29a      	uxth	r2, r3
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8002158:	bf00      	nop
 800215a:	3710      	adds	r7, #16
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	0801e6c8 	.word	0x0801e6c8

08002164 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8002168:	2101      	movs	r1, #1
 800216a:	2002      	movs	r0, #2
 800216c:	f018 f958 	bl	801a420 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8002170:	bf00      	nop
 8002172:	bd80      	pop	{r7, pc}

08002174 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8002178:	2100      	movs	r1, #0
 800217a:	2002      	movs	r0, #2
 800217c:	f018 f950 	bl	801a420 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 8002180:	bf00      	nop
 8002182:	bd80      	pop	{r7, pc}

08002184 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8002184:	b40c      	push	{r2, r3}
 8002186:	b580      	push	{r7, lr}
 8002188:	b084      	sub	sp, #16
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
 800218e:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8002190:	f107 031c 	add.w	r3, r7, #28
 8002194:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8002196:	6839      	ldr	r1, [r7, #0]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f018 fc81 	bl	801aaa4 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 80021a2:	bf00      	nop
 80021a4:	3710      	adds	r7, #16
 80021a6:	46bd      	mov	sp, r7
 80021a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80021ac:	b002      	add	sp, #8
 80021ae:	4770      	bx	lr

080021b0 <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 80021b8:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	bc80      	pop	{r7}
 80021c2:	4770      	bx	lr

080021c4 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80021ca:	2300      	movs	r3, #0
 80021cc:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 80021ce:	4b06      	ldr	r3, [pc, #24]	@ (80021e8 <HAL_GetTick+0x24>)
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d002      	beq.n	80021dc <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 80021d6:	f000 fa41 	bl	800265c <TIMER_IF_GetTimerValue>
 80021da:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 80021dc:	687b      	ldr	r3, [r7, #4]
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	200003ec 	.word	0x200003ec

080021ec <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	4618      	mov	r0, r3
 80021f8:	f000 fab7 	bl	800276a <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 80021fc:	bf00      	nop
 80021fe:	3708      	adds	r7, #8
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}

08002204 <LL_AHB2_GRP1_EnableClock>:
{
 8002204:	b480      	push	{r7}
 8002206:	b085      	sub	sp, #20
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800220c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002210:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002212:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4313      	orrs	r3, r2
 800221a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800221c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002220:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4013      	ands	r3, r2
 8002226:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002228:	68fb      	ldr	r3, [r7, #12]
}
 800222a:	bf00      	nop
 800222c:	3714      	adds	r7, #20
 800222e:	46bd      	mov	sp, r7
 8002230:	bc80      	pop	{r7}
 8002232:	4770      	bx	lr

08002234 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b086      	sub	sp, #24
 8002238:	af00      	add	r7, sp, #0

  /* USER CODE END DBG_Init_1 */

  /* SW probes */
#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 0 )
  HAL_DBGMCU_DisableDBGSleepMode();
 800223a:	f000 ffdd 	bl	80031f8 <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 800223e:	f000 ffe1 	bl	8003204 <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 8002242:	f000 ffe5 	bl	8003210 <HAL_DBGMCU_DisableDBGStandbyMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8002246:	1d3b      	adds	r3, r7, #4
 8002248:	2200      	movs	r2, #0
 800224a:	601a      	str	r2, [r3, #0]
 800224c:	605a      	str	r2, [r3, #4]
 800224e:	609a      	str	r2, [r3, #8]
 8002250:	60da      	str	r2, [r3, #12]
 8002252:	611a      	str	r2, [r3, #16]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 8002254:	2301      	movs	r3, #1
 8002256:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 8002258:	2300      	movs	r3, #0
 800225a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 800225c:	2303      	movs	r3, #3
 800225e:	613b      	str	r3, [r7, #16]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
 8002260:	2001      	movs	r0, #1
 8002262:	f7ff ffcf 	bl	8002204 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE2_CLK_ENABLE();
 8002266:	2002      	movs	r0, #2
 8002268:	f7ff ffcc 	bl	8002204 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE3_CLK_ENABLE();
 800226c:	2002      	movs	r0, #2
 800226e:	f7ff ffc9 	bl	8002204 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE4_CLK_ENABLE();
 8002272:	2002      	movs	r0, #2
 8002274:	f7ff ffc6 	bl	8002204 <LL_AHB2_GRP1_EnableClock>

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 8002278:	2301      	movs	r3, #1
 800227a:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 800227c:	1d3b      	adds	r3, r7, #4
 800227e:	4619      	mov	r1, r3
 8002280:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002284:	f002 ffa4 	bl	80051d0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 8002288:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800228c:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 800228e:	1d3b      	adds	r3, r7, #4
 8002290:	4619      	mov	r1, r3
 8002292:	4815      	ldr	r0, [pc, #84]	@ (80022e8 <DBG_Init+0xb4>)
 8002294:	f002 ff9c 	bl	80051d0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE3_PIN;
 8002298:	2308      	movs	r3, #8
 800229a:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE3_PORT, &GPIO_InitStruct);
 800229c:	1d3b      	adds	r3, r7, #4
 800229e:	4619      	mov	r1, r3
 80022a0:	4811      	ldr	r0, [pc, #68]	@ (80022e8 <DBG_Init+0xb4>)
 80022a2:	f002 ff95 	bl	80051d0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE4_PIN;
 80022a6:	2310      	movs	r3, #16
 80022a8:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE4_PORT, &GPIO_InitStruct);
 80022aa:	1d3b      	adds	r3, r7, #4
 80022ac:	4619      	mov	r1, r3
 80022ae:	480e      	ldr	r0, [pc, #56]	@ (80022e8 <DBG_Init+0xb4>)
 80022b0:	f002 ff8e 	bl	80051d0 <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 80022b4:	2200      	movs	r2, #0
 80022b6:	2101      	movs	r1, #1
 80022b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022bc:	f003 f9b6 	bl	800562c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 80022c0:	2200      	movs	r2, #0
 80022c2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80022c6:	4808      	ldr	r0, [pc, #32]	@ (80022e8 <DBG_Init+0xb4>)
 80022c8:	f003 f9b0 	bl	800562c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE3_PORT, PROBE_LINE3_PIN, GPIO_PIN_RESET);
 80022cc:	2200      	movs	r2, #0
 80022ce:	2108      	movs	r1, #8
 80022d0:	4805      	ldr	r0, [pc, #20]	@ (80022e8 <DBG_Init+0xb4>)
 80022d2:	f003 f9ab 	bl	800562c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE4_PORT, PROBE_LINE4_PIN, GPIO_PIN_RESET);
 80022d6:	2200      	movs	r2, #0
 80022d8:	2110      	movs	r1, #16
 80022da:	4803      	ldr	r0, [pc, #12]	@ (80022e8 <DBG_Init+0xb4>)
 80022dc:	f003 f9a6 	bl	800562c <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 80022e0:	bf00      	nop
 80022e2:	3718      	adds	r7, #24
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	48000400 	.word	0x48000400

080022ec <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b087      	sub	sp, #28
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EnvSensors_Read */
  float HUMIDITY_Value = HUMIDITY_DEFAULT_VAL;
 80022f4:	4b0d      	ldr	r3, [pc, #52]	@ (800232c <EnvSensors_Read+0x40>)
 80022f6:	617b      	str	r3, [r7, #20]
  float TEMPERATURE_Value = TEMPERATURE_DEFAULT_VAL;
 80022f8:	4b0d      	ldr	r3, [pc, #52]	@ (8002330 <EnvSensors_Read+0x44>)
 80022fa:	613b      	str	r3, [r7, #16]
  float PRESSURE_Value = PRESSURE_DEFAULT_VAL;
 80022fc:	4b0d      	ldr	r3, [pc, #52]	@ (8002334 <EnvSensors_Read+0x48>)
 80022fe:	60fb      	str	r3, [r7, #12]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	697a      	ldr	r2, [r7, #20]
 8002304:	609a      	str	r2, [r3, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	693a      	ldr	r2, [r7, #16]
 800230a:	605a      	str	r2, [r3, #4]
  sensor_data->pressure    = PRESSURE_Value;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	68fa      	ldr	r2, [r7, #12]
 8002310:	601a      	str	r2, [r3, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a08      	ldr	r2, [pc, #32]	@ (8002338 <EnvSensors_Read+0x4c>)
 8002316:	60da      	str	r2, [r3, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	4a08      	ldr	r2, [pc, #32]	@ (800233c <EnvSensors_Read+0x50>)
 800231c:	611a      	str	r2, [r3, #16]

  return 0;
 800231e:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Read */
}
 8002320:	4618      	mov	r0, r3
 8002322:	371c      	adds	r7, #28
 8002324:	46bd      	mov	sp, r7
 8002326:	bc80      	pop	{r7}
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	42480000 	.word	0x42480000
 8002330:	41900000 	.word	0x41900000
 8002334:	447a0000 	.word	0x447a0000
 8002338:	003e090d 	.word	0x003e090d
 800233c:	000503ab 	.word	0x000503ab

08002340 <EnvSensors_Init>:

int32_t EnvSensors_Init(void)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
#if defined( USE_IKS01A2_ENV_SENSOR_HTS221_0 ) || defined( USE_IKS01A2_ENV_SENSOR_LPS22HB_0 ) || \
    defined( USE_IKS01A3_ENV_SENSOR_HTS221_0 ) || defined( USE_IKS01A3_ENV_SENSOR_LPS22HH_0 ) || \
    defined( USE_BSP_DRIVER )
  int32_t ret = BSP_ERROR_NONE;
 8002346:	2300      	movs	r3, #0
 8002348:	607b      	str	r3, [r7, #4]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */

#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  return 0;
 800234a:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Init */
  return ret;
}
 800234c:	4618      	mov	r0, r3
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	bc80      	pop	{r7}
 8002354:	4770      	bx	lr

08002356 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002356:	b480      	push	{r7}
 8002358:	af00      	add	r7, sp, #0
	return 1;
 800235a:	2301      	movs	r3, #1
}
 800235c:	4618      	mov	r0, r3
 800235e:	46bd      	mov	sp, r7
 8002360:	bc80      	pop	{r7}
 8002362:	4770      	bx	lr

08002364 <_kill>:

int _kill(int pid, int sig)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800236e:	f01a f95d 	bl	801c62c <__errno>
 8002372:	4603      	mov	r3, r0
 8002374:	2216      	movs	r2, #22
 8002376:	601a      	str	r2, [r3, #0]
	return -1;
 8002378:	f04f 33ff 	mov.w	r3, #4294967295
}
 800237c:	4618      	mov	r0, r3
 800237e:	3708      	adds	r7, #8
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <_exit>:

void _exit (int status)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800238c:	f04f 31ff 	mov.w	r1, #4294967295
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f7ff ffe7 	bl	8002364 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002396:	bf00      	nop
 8002398:	e7fd      	b.n	8002396 <_exit+0x12>

0800239a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800239a:	b580      	push	{r7, lr}
 800239c:	b086      	sub	sp, #24
 800239e:	af00      	add	r7, sp, #0
 80023a0:	60f8      	str	r0, [r7, #12]
 80023a2:	60b9      	str	r1, [r7, #8]
 80023a4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023a6:	2300      	movs	r3, #0
 80023a8:	617b      	str	r3, [r7, #20]
 80023aa:	e00a      	b.n	80023c2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80023ac:	f3af 8000 	nop.w
 80023b0:	4601      	mov	r1, r0
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	1c5a      	adds	r2, r3, #1
 80023b6:	60ba      	str	r2, [r7, #8]
 80023b8:	b2ca      	uxtb	r2, r1
 80023ba:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	3301      	adds	r3, #1
 80023c0:	617b      	str	r3, [r7, #20]
 80023c2:	697a      	ldr	r2, [r7, #20]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	dbf0      	blt.n	80023ac <_read+0x12>
	}

return len;
 80023ca:	687b      	ldr	r3, [r7, #4]
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3718      	adds	r7, #24
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b086      	sub	sp, #24
 80023d8:	af00      	add	r7, sp, #0
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	60b9      	str	r1, [r7, #8]
 80023de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023e0:	2300      	movs	r3, #0
 80023e2:	617b      	str	r3, [r7, #20]
 80023e4:	e009      	b.n	80023fa <_write+0x26>
	{
		__io_putchar(*ptr++);
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	1c5a      	adds	r2, r3, #1
 80023ea:	60ba      	str	r2, [r7, #8]
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	3301      	adds	r3, #1
 80023f8:	617b      	str	r3, [r7, #20]
 80023fa:	697a      	ldr	r2, [r7, #20]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	429a      	cmp	r2, r3
 8002400:	dbf1      	blt.n	80023e6 <_write+0x12>
	}
	return len;
 8002402:	687b      	ldr	r3, [r7, #4]
}
 8002404:	4618      	mov	r0, r3
 8002406:	3718      	adds	r7, #24
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <_close>:

int _close(int file)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
	return -1;
 8002414:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002418:	4618      	mov	r0, r3
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	bc80      	pop	{r7}
 8002420:	4770      	bx	lr

08002422 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002422:	b480      	push	{r7}
 8002424:	b083      	sub	sp, #12
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
 800242a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002432:	605a      	str	r2, [r3, #4]
	return 0;
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	370c      	adds	r7, #12
 800243a:	46bd      	mov	sp, r7
 800243c:	bc80      	pop	{r7}
 800243e:	4770      	bx	lr

08002440 <_isatty>:

int _isatty(int file)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
	return 1;
 8002448:	2301      	movs	r3, #1
}
 800244a:	4618      	mov	r0, r3
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	bc80      	pop	{r7}
 8002452:	4770      	bx	lr

08002454 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002454:	b480      	push	{r7}
 8002456:	b085      	sub	sp, #20
 8002458:	af00      	add	r7, sp, #0
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	60b9      	str	r1, [r7, #8]
 800245e:	607a      	str	r2, [r7, #4]
	return 0;
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	3714      	adds	r7, #20
 8002466:	46bd      	mov	sp, r7
 8002468:	bc80      	pop	{r7}
 800246a:	4770      	bx	lr

0800246c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b086      	sub	sp, #24
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002474:	4a14      	ldr	r2, [pc, #80]	@ (80024c8 <_sbrk+0x5c>)
 8002476:	4b15      	ldr	r3, [pc, #84]	@ (80024cc <_sbrk+0x60>)
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002480:	4b13      	ldr	r3, [pc, #76]	@ (80024d0 <_sbrk+0x64>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d102      	bne.n	800248e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002488:	4b11      	ldr	r3, [pc, #68]	@ (80024d0 <_sbrk+0x64>)
 800248a:	4a12      	ldr	r2, [pc, #72]	@ (80024d4 <_sbrk+0x68>)
 800248c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800248e:	4b10      	ldr	r3, [pc, #64]	@ (80024d0 <_sbrk+0x64>)
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4413      	add	r3, r2
 8002496:	693a      	ldr	r2, [r7, #16]
 8002498:	429a      	cmp	r2, r3
 800249a:	d207      	bcs.n	80024ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800249c:	f01a f8c6 	bl	801c62c <__errno>
 80024a0:	4603      	mov	r3, r0
 80024a2:	220c      	movs	r2, #12
 80024a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024a6:	f04f 33ff 	mov.w	r3, #4294967295
 80024aa:	e009      	b.n	80024c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024ac:	4b08      	ldr	r3, [pc, #32]	@ (80024d0 <_sbrk+0x64>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024b2:	4b07      	ldr	r3, [pc, #28]	@ (80024d0 <_sbrk+0x64>)
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4413      	add	r3, r2
 80024ba:	4a05      	ldr	r2, [pc, #20]	@ (80024d0 <_sbrk+0x64>)
 80024bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024be:	68fb      	ldr	r3, [r7, #12]
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3718      	adds	r7, #24
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	20010000 	.word	0x20010000
 80024cc:	00000400 	.word	0x00000400
 80024d0:	200003f0 	.word	0x200003f0
 80024d4:	20002510 	.word	0x20002510

080024d8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 80024dc:	bf00      	nop
 80024de:	46bd      	mov	sp, r7
 80024e0:	bc80      	pop	{r7}
 80024e2:	4770      	bx	lr

080024e4 <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	689b      	ldr	r3, [r3, #8]
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bc80      	pop	{r7}
 80024f8:	4770      	bx	lr
	...

080024fc <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002502:	2300      	movs	r3, #0
 8002504:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 8002506:	4b14      	ldr	r3, [pc, #80]	@ (8002558 <TIMER_IF_Init+0x5c>)
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	f083 0301 	eor.w	r3, r3, #1
 800250e:	b2db      	uxtb	r3, r3
 8002510:	2b00      	cmp	r3, #0
 8002512:	d01b      	beq.n	800254c <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002514:	4b11      	ldr	r3, [pc, #68]	@ (800255c <TIMER_IF_Init+0x60>)
 8002516:	f04f 32ff 	mov.w	r2, #4294967295
 800251a:	631a      	str	r2, [r3, #48]	@ 0x30
    /*Init RTC*/
    MX_RTC_Init();
 800251c:	f7ff fb40 	bl	8001ba0 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8002520:	f000 f856 	bl	80025d0 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002524:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002528:	480c      	ldr	r0, [pc, #48]	@ (800255c <TIMER_IF_Init+0x60>)
 800252a:	f004 fdd9 	bl	80070e0 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 800252e:	4b0b      	ldr	r3, [pc, #44]	@ (800255c <TIMER_IF_Init+0x60>)
 8002530:	f04f 32ff 	mov.w	r2, #4294967295
 8002534:	631a      	str	r2, [r3, #48]	@ 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8002536:	4809      	ldr	r0, [pc, #36]	@ (800255c <TIMER_IF_Init+0x60>)
 8002538:	f004 ff10 	bl	800735c <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 800253c:	2000      	movs	r0, #0
 800253e:	f000 f9d3 	bl	80028e8 <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 8002542:	f000 f85f 	bl	8002604 <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 8002546:	4b04      	ldr	r3, [pc, #16]	@ (8002558 <TIMER_IF_Init+0x5c>)
 8002548:	2201      	movs	r2, #1
 800254a:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 800254c:	79fb      	ldrb	r3, [r7, #7]
}
 800254e:	4618      	mov	r0, r3
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	200003f4 	.word	0x200003f4
 800255c:	200003a8 	.word	0x200003a8

08002560 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b08e      	sub	sp, #56	@ 0x38
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002568:	2300      	movs	r3, #0
 800256a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 800256e:	f107 0308 	add.w	r3, r7, #8
 8002572:	222c      	movs	r2, #44	@ 0x2c
 8002574:	2100      	movs	r1, #0
 8002576:	4618      	mov	r0, r3
 8002578:	f01a f805 	bl	801c586 <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 800257c:	f000 f828 	bl	80025d0 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8002580:	4b11      	ldr	r3, [pc, #68]	@ (80025c8 <TIMER_IF_StartTimer+0x68>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	4413      	add	r3, r2
 8002588:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 800258a:	2300      	movs	r3, #0
 800258c:	627b      	str	r3, [r7, #36]	@ 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	43db      	mvns	r3, r3
 8002592:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002594:	2300      	movs	r3, #0
 8002596:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8002598:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800259c:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 800259e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80025a2:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80025a4:	f107 0308 	add.w	r3, r7, #8
 80025a8:	2201      	movs	r2, #1
 80025aa:	4619      	mov	r1, r3
 80025ac:	4807      	ldr	r0, [pc, #28]	@ (80025cc <TIMER_IF_StartTimer+0x6c>)
 80025ae:	f004 fc8b 	bl	8006ec8 <HAL_RTC_SetAlarm_IT>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d001      	beq.n	80025bc <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 80025b8:	f7ff fac4 	bl	8001b44 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 80025bc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3738      	adds	r7, #56	@ 0x38
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	200003f8 	.word	0x200003f8
 80025cc:	200003a8 	.word	0x200003a8

080025d0 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80025d6:	2300      	movs	r3, #0
 80025d8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 80025da:	4b08      	ldr	r3, [pc, #32]	@ (80025fc <TIMER_IF_StopTimer+0x2c>)
 80025dc:	2201      	movs	r2, #1
 80025de:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 80025e0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80025e4:	4806      	ldr	r0, [pc, #24]	@ (8002600 <TIMER_IF_StopTimer+0x30>)
 80025e6:	f004 fd7b 	bl	80070e0 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 80025ea:	4b05      	ldr	r3, [pc, #20]	@ (8002600 <TIMER_IF_StopTimer+0x30>)
 80025ec:	f04f 32ff 	mov.w	r2, #4294967295
 80025f0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 80025f2:	79fb      	ldrb	r3, [r7, #7]
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3708      	adds	r7, #8
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	40002800 	.word	0x40002800
 8002600:	200003a8 	.word	0x200003a8

08002604 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8002608:	f000 f98e 	bl	8002928 <GetTimerTicks>
 800260c:	4603      	mov	r3, r0
 800260e:	4a03      	ldr	r2, [pc, #12]	@ (800261c <TIMER_IF_SetTimerContext+0x18>)
 8002610:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002612:	4b02      	ldr	r3, [pc, #8]	@ (800261c <TIMER_IF_SetTimerContext+0x18>)
 8002614:	681b      	ldr	r3, [r3, #0]
}
 8002616:	4618      	mov	r0, r3
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	200003f8 	.word	0x200003f8

08002620 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002624:	4b02      	ldr	r3, [pc, #8]	@ (8002630 <TIMER_IF_GetTimerContext+0x10>)
 8002626:	681b      	ldr	r3, [r3, #0]
}
 8002628:	4618      	mov	r0, r3
 800262a:	46bd      	mov	sp, r7
 800262c:	bc80      	pop	{r7}
 800262e:	4770      	bx	lr
 8002630:	200003f8 	.word	0x200003f8

08002634 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800263a:	2300      	movs	r3, #0
 800263c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 800263e:	f000 f973 	bl	8002928 <GetTimerTicks>
 8002642:	4602      	mov	r2, r0
 8002644:	4b04      	ldr	r3, [pc, #16]	@ (8002658 <TIMER_IF_GetTimerElapsedTime+0x24>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 800264c:	687b      	ldr	r3, [r7, #4]
}
 800264e:	4618      	mov	r0, r3
 8002650:	3708      	adds	r7, #8
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	200003f8 	.word	0x200003f8

0800265c <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002662:	2300      	movs	r3, #0
 8002664:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 8002666:	4b06      	ldr	r3, [pc, #24]	@ (8002680 <TIMER_IF_GetTimerValue+0x24>)
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d002      	beq.n	8002674 <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 800266e:	f000 f95b 	bl	8002928 <GetTimerTicks>
 8002672:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 8002674:	687b      	ldr	r3, [r7, #4]
}
 8002676:	4618      	mov	r0, r3
 8002678:	3708      	adds	r7, #8
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	200003f4 	.word	0x200003f4

08002684 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800268a:	2300      	movs	r3, #0
 800268c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 800268e:	2303      	movs	r3, #3
 8002690:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 8002692:	687b      	ldr	r3, [r7, #4]
}
 8002694:	4618      	mov	r0, r3
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	bc80      	pop	{r7}
 800269c:	4770      	bx	lr

0800269e <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 800269e:	b5b0      	push	{r4, r5, r7, lr}
 80026a0:	b084      	sub	sp, #16
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 80026a6:	2100      	movs	r1, #0
 80026a8:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 80026aa:	6879      	ldr	r1, [r7, #4]
 80026ac:	2000      	movs	r0, #0
 80026ae:	460a      	mov	r2, r1
 80026b0:	4603      	mov	r3, r0
 80026b2:	0d95      	lsrs	r5, r2, #22
 80026b4:	0294      	lsls	r4, r2, #10
 80026b6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80026ba:	f04f 0300 	mov.w	r3, #0
 80026be:	4620      	mov	r0, r4
 80026c0:	4629      	mov	r1, r5
 80026c2:	f7fe fb7d 	bl	8000dc0 <__aeabi_uldivmod>
 80026c6:	4602      	mov	r2, r0
 80026c8:	460b      	mov	r3, r1
 80026ca:	4613      	mov	r3, r2
 80026cc:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 80026ce:	68fb      	ldr	r3, [r7, #12]
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3710      	adds	r7, #16
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bdb0      	pop	{r4, r5, r7, pc}

080026d8 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 80026d8:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80026dc:	b085      	sub	sp, #20
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 80026e2:	2100      	movs	r1, #0
 80026e4:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 80026e6:	6879      	ldr	r1, [r7, #4]
 80026e8:	2000      	movs	r0, #0
 80026ea:	460c      	mov	r4, r1
 80026ec:	4605      	mov	r5, r0
 80026ee:	4620      	mov	r0, r4
 80026f0:	4629      	mov	r1, r5
 80026f2:	f04f 0a00 	mov.w	sl, #0
 80026f6:	f04f 0b00 	mov.w	fp, #0
 80026fa:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 80026fe:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 8002702:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 8002706:	4650      	mov	r0, sl
 8002708:	4659      	mov	r1, fp
 800270a:	1b02      	subs	r2, r0, r4
 800270c:	eb61 0305 	sbc.w	r3, r1, r5
 8002710:	f04f 0000 	mov.w	r0, #0
 8002714:	f04f 0100 	mov.w	r1, #0
 8002718:	0099      	lsls	r1, r3, #2
 800271a:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800271e:	0090      	lsls	r0, r2, #2
 8002720:	4602      	mov	r2, r0
 8002722:	460b      	mov	r3, r1
 8002724:	eb12 0804 	adds.w	r8, r2, r4
 8002728:	eb43 0905 	adc.w	r9, r3, r5
 800272c:	f04f 0200 	mov.w	r2, #0
 8002730:	f04f 0300 	mov.w	r3, #0
 8002734:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002738:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800273c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002740:	4690      	mov	r8, r2
 8002742:	4699      	mov	r9, r3
 8002744:	4640      	mov	r0, r8
 8002746:	4649      	mov	r1, r9
 8002748:	f04f 0200 	mov.w	r2, #0
 800274c:	f04f 0300 	mov.w	r3, #0
 8002750:	0a82      	lsrs	r2, r0, #10
 8002752:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002756:	0a8b      	lsrs	r3, r1, #10
 8002758:	4613      	mov	r3, r2
 800275a:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 800275c:	68fb      	ldr	r3, [r7, #12]
}
 800275e:	4618      	mov	r0, r3
 8002760:	3714      	adds	r7, #20
 8002762:	46bd      	mov	sp, r7
 8002764:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002768:	4770      	bx	lr

0800276a <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 800276a:	b580      	push	{r7, lr}
 800276c:	b084      	sub	sp, #16
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f7ff ff93 	bl	800269e <TIMER_IF_Convert_ms2Tick>
 8002778:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 800277a:	f000 f8d5 	bl	8002928 <GetTimerTicks>
 800277e:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002780:	e000      	b.n	8002784 <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 8002782:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002784:	f000 f8d0 	bl	8002928 <GetTimerTicks>
 8002788:	4602      	mov	r2, r0
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	68fa      	ldr	r2, [r7, #12]
 8002790:	429a      	cmp	r2, r3
 8002792:	d8f6      	bhi.n	8002782 <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 8002794:	bf00      	nop
 8002796:	bf00      	nop
 8002798:	3710      	adds	r7, #16
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}

0800279e <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800279e:	b580      	push	{r7, lr}
 80027a0:	b082      	sub	sp, #8
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 80027a6:	f018 fdab 	bl	801b300 <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 80027aa:	bf00      	nop
 80027ac:	3708      	adds	r7, #8
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 80027b2:	b580      	push	{r7, lr}
 80027b4:	b084      	sub	sp, #16
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 80027ba:	f000 f8a5 	bl	8002908 <TIMER_IF_BkUp_Read_MSBticks>
 80027be:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	3301      	adds	r3, #1
 80027c4:	4618      	mov	r0, r3
 80027c6:	f000 f88f 	bl	80028e8 <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 80027ca:	bf00      	nop
 80027cc:	3710      	adds	r7, #16
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 80027d2:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027d6:	b08c      	sub	sp, #48	@ 0x30
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 80027dc:	2300      	movs	r3, #0
 80027de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 80027e0:	f000 f8a2 	bl	8002928 <GetTimerTicks>
 80027e4:	62b8      	str	r0, [r7, #40]	@ 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 80027e6:	f000 f88f 	bl	8002908 <TIMER_IF_BkUp_Read_MSBticks>
 80027ea:	6278      	str	r0, [r7, #36]	@ 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 80027ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ee:	2200      	movs	r2, #0
 80027f0:	60bb      	str	r3, [r7, #8]
 80027f2:	60fa      	str	r2, [r7, #12]
 80027f4:	f04f 0200 	mov.w	r2, #0
 80027f8:	f04f 0300 	mov.w	r3, #0
 80027fc:	68b9      	ldr	r1, [r7, #8]
 80027fe:	000b      	movs	r3, r1
 8002800:	2200      	movs	r2, #0
 8002802:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002804:	2000      	movs	r0, #0
 8002806:	460c      	mov	r4, r1
 8002808:	4605      	mov	r5, r0
 800280a:	eb12 0804 	adds.w	r8, r2, r4
 800280e:	eb43 0905 	adc.w	r9, r3, r5
 8002812:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8002816:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800281a:	f04f 0200 	mov.w	r2, #0
 800281e:	f04f 0300 	mov.w	r3, #0
 8002822:	0a82      	lsrs	r2, r0, #10
 8002824:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002828:	0a8b      	lsrs	r3, r1, #10
 800282a:	4613      	mov	r3, r2
 800282c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	2200      	movs	r2, #0
 8002832:	603b      	str	r3, [r7, #0]
 8002834:	607a      	str	r2, [r7, #4]
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 800283c:	f04f 0b00 	mov.w	fp, #0
 8002840:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	4618      	mov	r0, r3
 8002848:	f7ff ff46 	bl	80026d8 <TIMER_IF_Convert_Tick2ms>
 800284c:	4603      	mov	r3, r0
 800284e:	b29a      	uxth	r2, r3
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 8002854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8002856:	4618      	mov	r0, r3
 8002858:	3730      	adds	r7, #48	@ 0x30
 800285a:	46bd      	mov	sp, r7
 800285c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002860 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	2100      	movs	r1, #0
 800286c:	4803      	ldr	r0, [pc, #12]	@ (800287c <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 800286e:	f004 fe07 	bl	8007480 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 8002872:	bf00      	nop
 8002874:	3708      	adds	r7, #8
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	200003a8 	.word	0x200003a8

08002880 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	2101      	movs	r1, #1
 800288c:	4803      	ldr	r0, [pc, #12]	@ (800289c <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 800288e:	f004 fdf7 	bl	8007480 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 8002892:	bf00      	nop
 8002894:	3708      	adds	r7, #8
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	200003a8 	.word	0x200003a8

080028a0 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80028a6:	2300      	movs	r3, #0
 80028a8:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 80028aa:	2100      	movs	r1, #0
 80028ac:	4804      	ldr	r0, [pc, #16]	@ (80028c0 <TIMER_IF_BkUp_Read_Seconds+0x20>)
 80028ae:	f004 fdff 	bl	80074b0 <HAL_RTCEx_BKUPRead>
 80028b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 80028b4:	687b      	ldr	r3, [r7, #4]
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	200003a8 	.word	0x200003a8

080028c4 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80028ca:	2300      	movs	r3, #0
 80028cc:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 80028ce:	2101      	movs	r1, #1
 80028d0:	4804      	ldr	r0, [pc, #16]	@ (80028e4 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 80028d2:	f004 fded 	bl	80074b0 <HAL_RTCEx_BKUPRead>
 80028d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 80028d8:	687b      	ldr	r3, [r7, #4]
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3708      	adds	r7, #8
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	200003a8 	.word	0x200003a8

080028e8 <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	2102      	movs	r1, #2
 80028f4:	4803      	ldr	r0, [pc, #12]	@ (8002904 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 80028f6:	f004 fdc3 	bl	8007480 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 80028fa:	bf00      	nop
 80028fc:	3708      	adds	r7, #8
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	200003a8 	.word	0x200003a8

08002908 <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 800290e:	2102      	movs	r1, #2
 8002910:	4804      	ldr	r0, [pc, #16]	@ (8002924 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 8002912:	f004 fdcd 	bl	80074b0 <HAL_RTCEx_BKUPRead>
 8002916:	6078      	str	r0, [r7, #4]
  return MSBticks;
 8002918:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 800291a:	4618      	mov	r0, r3
 800291c:	3708      	adds	r7, #8
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	200003a8 	.word	0x200003a8

08002928 <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 800292e:	480b      	ldr	r0, [pc, #44]	@ (800295c <GetTimerTicks+0x34>)
 8002930:	f7ff fdd8 	bl	80024e4 <LL_RTC_TIME_GetSubSecond>
 8002934:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002936:	e003      	b.n	8002940 <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8002938:	4808      	ldr	r0, [pc, #32]	@ (800295c <GetTimerTicks+0x34>)
 800293a:	f7ff fdd3 	bl	80024e4 <LL_RTC_TIME_GetSubSecond>
 800293e:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002940:	4806      	ldr	r0, [pc, #24]	@ (800295c <GetTimerTicks+0x34>)
 8002942:	f7ff fdcf 	bl	80024e4 <LL_RTC_TIME_GetSubSecond>
 8002946:	4602      	mov	r2, r0
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	4293      	cmp	r3, r2
 800294c:	d1f4      	bne.n	8002938 <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 8002952:	4618      	mov	r0, r3
 8002954:	3708      	adds	r7, #8
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	40002800 	.word	0x40002800

08002960 <LL_AHB2_GRP1_EnableClock>:
{
 8002960:	b480      	push	{r7}
 8002962:	b085      	sub	sp, #20
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002968:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800296c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800296e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4313      	orrs	r3, r2
 8002976:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002978:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800297c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4013      	ands	r3, r2
 8002982:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002984:	68fb      	ldr	r3, [r7, #12]
}
 8002986:	bf00      	nop
 8002988:	3714      	adds	r7, #20
 800298a:	46bd      	mov	sp, r7
 800298c:	bc80      	pop	{r7}
 800298e:	4770      	bx	lr

08002990 <LL_APB1_GRP1_EnableClock>:
{
 8002990:	b480      	push	{r7}
 8002992:	b085      	sub	sp, #20
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002998:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800299c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800299e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80029a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029ac:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4013      	ands	r3, r2
 80029b2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80029b4:	68fb      	ldr	r3, [r7, #12]
}
 80029b6:	bf00      	nop
 80029b8:	3714      	adds	r7, #20
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bc80      	pop	{r7}
 80029be:	4770      	bx	lr

080029c0 <LL_APB1_GRP1_DisableClock>:
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 80029c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029cc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	43db      	mvns	r3, r3
 80029d2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80029d6:	4013      	ands	r3, r2
 80029d8:	658b      	str	r3, [r1, #88]	@ 0x58
}
 80029da:	bf00      	nop
 80029dc:	370c      	adds	r7, #12
 80029de:	46bd      	mov	sp, r7
 80029e0:	bc80      	pop	{r7}
 80029e2:	4770      	bx	lr

080029e4 <LL_APB2_GRP1_EnableClock>:
{
 80029e4:	b480      	push	{r7}
 80029e6:	b085      	sub	sp, #20
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80029ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029f0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80029f2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80029fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a00:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4013      	ands	r3, r2
 8002a06:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a08:	68fb      	ldr	r3, [r7, #12]
}
 8002a0a:	bf00      	nop
 8002a0c:	3714      	adds	r7, #20
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bc80      	pop	{r7}
 8002a12:	4770      	bx	lr

08002a14 <LL_APB2_GRP1_DisableClock>:
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8002a1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a20:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	43db      	mvns	r3, r3
 8002a26:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	660b      	str	r3, [r1, #96]	@ 0x60
}
 8002a2e:	bf00      	nop
 8002a30:	370c      	adds	r7, #12
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bc80      	pop	{r7}
 8002a36:	4770      	bx	lr

08002a38 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002a3c:	4b22      	ldr	r3, [pc, #136]	@ (8002ac8 <MX_USART1_UART_Init+0x90>)
 8002a3e:	4a23      	ldr	r2, [pc, #140]	@ (8002acc <MX_USART1_UART_Init+0x94>)
 8002a40:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002a42:	4b21      	ldr	r3, [pc, #132]	@ (8002ac8 <MX_USART1_UART_Init+0x90>)
 8002a44:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002a48:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a4a:	4b1f      	ldr	r3, [pc, #124]	@ (8002ac8 <MX_USART1_UART_Init+0x90>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002a50:	4b1d      	ldr	r3, [pc, #116]	@ (8002ac8 <MX_USART1_UART_Init+0x90>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a56:	4b1c      	ldr	r3, [pc, #112]	@ (8002ac8 <MX_USART1_UART_Init+0x90>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a5c:	4b1a      	ldr	r3, [pc, #104]	@ (8002ac8 <MX_USART1_UART_Init+0x90>)
 8002a5e:	220c      	movs	r2, #12
 8002a60:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a62:	4b19      	ldr	r3, [pc, #100]	@ (8002ac8 <MX_USART1_UART_Init+0x90>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a68:	4b17      	ldr	r3, [pc, #92]	@ (8002ac8 <MX_USART1_UART_Init+0x90>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a6e:	4b16      	ldr	r3, [pc, #88]	@ (8002ac8 <MX_USART1_UART_Init+0x90>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002a74:	4b14      	ldr	r3, [pc, #80]	@ (8002ac8 <MX_USART1_UART_Init+0x90>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a7a:	4b13      	ldr	r3, [pc, #76]	@ (8002ac8 <MX_USART1_UART_Init+0x90>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002a80:	4811      	ldr	r0, [pc, #68]	@ (8002ac8 <MX_USART1_UART_Init+0x90>)
 8002a82:	f005 fa02 	bl	8007e8a <HAL_UART_Init>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d001      	beq.n	8002a90 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002a8c:	f7ff f85a 	bl	8001b44 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a90:	2100      	movs	r1, #0
 8002a92:	480d      	ldr	r0, [pc, #52]	@ (8002ac8 <MX_USART1_UART_Init+0x90>)
 8002a94:	f007 fab1 	bl	8009ffa <HAL_UARTEx_SetTxFifoThreshold>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d001      	beq.n	8002aa2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002a9e:	f7ff f851 	bl	8001b44 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002aa2:	2100      	movs	r1, #0
 8002aa4:	4808      	ldr	r0, [pc, #32]	@ (8002ac8 <MX_USART1_UART_Init+0x90>)
 8002aa6:	f007 fae6 	bl	800a076 <HAL_UARTEx_SetRxFifoThreshold>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d001      	beq.n	8002ab4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002ab0:	f7ff f848 	bl	8001b44 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 8002ab4:	4804      	ldr	r0, [pc, #16]	@ (8002ac8 <MX_USART1_UART_Init+0x90>)
 8002ab6:	f007 fa2d 	bl	8009f14 <HAL_UARTEx_EnableFifoMode>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d001      	beq.n	8002ac4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002ac0:	f7ff f840 	bl	8001b44 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002ac4:	bf00      	nop
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	200003fc 	.word	0x200003fc
 8002acc:	40013800 	.word	0x40013800

08002ad0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002ad4:	4b22      	ldr	r3, [pc, #136]	@ (8002b60 <MX_USART2_UART_Init+0x90>)
 8002ad6:	4a23      	ldr	r2, [pc, #140]	@ (8002b64 <MX_USART2_UART_Init+0x94>)
 8002ad8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002ada:	4b21      	ldr	r3, [pc, #132]	@ (8002b60 <MX_USART2_UART_Init+0x90>)
 8002adc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002ae0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002ae2:	4b1f      	ldr	r3, [pc, #124]	@ (8002b60 <MX_USART2_UART_Init+0x90>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002ae8:	4b1d      	ldr	r3, [pc, #116]	@ (8002b60 <MX_USART2_UART_Init+0x90>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002aee:	4b1c      	ldr	r3, [pc, #112]	@ (8002b60 <MX_USART2_UART_Init+0x90>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002af4:	4b1a      	ldr	r3, [pc, #104]	@ (8002b60 <MX_USART2_UART_Init+0x90>)
 8002af6:	220c      	movs	r2, #12
 8002af8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002afa:	4b19      	ldr	r3, [pc, #100]	@ (8002b60 <MX_USART2_UART_Init+0x90>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b00:	4b17      	ldr	r3, [pc, #92]	@ (8002b60 <MX_USART2_UART_Init+0x90>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b06:	4b16      	ldr	r3, [pc, #88]	@ (8002b60 <MX_USART2_UART_Init+0x90>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002b0c:	4b14      	ldr	r3, [pc, #80]	@ (8002b60 <MX_USART2_UART_Init+0x90>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b12:	4b13      	ldr	r3, [pc, #76]	@ (8002b60 <MX_USART2_UART_Init+0x90>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002b18:	4811      	ldr	r0, [pc, #68]	@ (8002b60 <MX_USART2_UART_Init+0x90>)
 8002b1a:	f005 f9b6 	bl	8007e8a <HAL_UART_Init>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d001      	beq.n	8002b28 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002b24:	f7ff f80e 	bl	8001b44 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b28:	2100      	movs	r1, #0
 8002b2a:	480d      	ldr	r0, [pc, #52]	@ (8002b60 <MX_USART2_UART_Init+0x90>)
 8002b2c:	f007 fa65 	bl	8009ffa <HAL_UARTEx_SetTxFifoThreshold>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d001      	beq.n	8002b3a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002b36:	f7ff f805 	bl	8001b44 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b3a:	2100      	movs	r1, #0
 8002b3c:	4808      	ldr	r0, [pc, #32]	@ (8002b60 <MX_USART2_UART_Init+0x90>)
 8002b3e:	f007 fa9a 	bl	800a076 <HAL_UARTEx_SetRxFifoThreshold>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d001      	beq.n	8002b4c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002b48:	f7fe fffc 	bl	8001b44 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002b4c:	4804      	ldr	r0, [pc, #16]	@ (8002b60 <MX_USART2_UART_Init+0x90>)
 8002b4e:	f007 fa1c 	bl	8009f8a <HAL_UARTEx_DisableFifoMode>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d001      	beq.n	8002b5c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002b58:	f7fe fff4 	bl	8001b44 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002b5c:	bf00      	nop
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	2000048c 	.word	0x2000048c
 8002b64:	40004400 	.word	0x40004400

08002b68 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b096      	sub	sp, #88	@ 0x58
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b70:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002b74:	2200      	movs	r2, #0
 8002b76:	601a      	str	r2, [r3, #0]
 8002b78:	605a      	str	r2, [r3, #4]
 8002b7a:	609a      	str	r2, [r3, #8]
 8002b7c:	60da      	str	r2, [r3, #12]
 8002b7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b80:	f107 030c 	add.w	r3, r7, #12
 8002b84:	2238      	movs	r2, #56	@ 0x38
 8002b86:	2100      	movs	r1, #0
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f019 fcfc 	bl	801c586 <memset>
  if(uartHandle->Instance==USART1)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a49      	ldr	r2, [pc, #292]	@ (8002cb8 <HAL_UART_MspInit+0x150>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d157      	bne.n	8002c48 <HAL_UART_MspInit+0xe0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002b9c:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8002ba0:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ba2:	f107 030c 	add.w	r3, r7, #12
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f003 fffa 	bl	8006ba0 <HAL_RCCEx_PeriphCLKConfig>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d001      	beq.n	8002bb6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002bb2:	f7fe ffc7 	bl	8001b44 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002bb6:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002bba:	f7ff ff13 	bl	80029e4 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bbe:	2002      	movs	r0, #2
 8002bc0:	f7ff fece 	bl	8002960 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 8002bc4:	23c0      	movs	r3, #192	@ 0xc0
 8002bc6:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc8:	2302      	movs	r3, #2
 8002bca:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002bd4:	2307      	movs	r3, #7
 8002bd6:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bd8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002bdc:	4619      	mov	r1, r3
 8002bde:	4837      	ldr	r0, [pc, #220]	@ (8002cbc <HAL_UART_MspInit+0x154>)
 8002be0:	f002 faf6 	bl	80051d0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 8002be4:	4b36      	ldr	r3, [pc, #216]	@ (8002cc0 <HAL_UART_MspInit+0x158>)
 8002be6:	4a37      	ldr	r2, [pc, #220]	@ (8002cc4 <HAL_UART_MspInit+0x15c>)
 8002be8:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002bea:	4b35      	ldr	r3, [pc, #212]	@ (8002cc0 <HAL_UART_MspInit+0x158>)
 8002bec:	2212      	movs	r2, #18
 8002bee:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002bf0:	4b33      	ldr	r3, [pc, #204]	@ (8002cc0 <HAL_UART_MspInit+0x158>)
 8002bf2:	2210      	movs	r2, #16
 8002bf4:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002bf6:	4b32      	ldr	r3, [pc, #200]	@ (8002cc0 <HAL_UART_MspInit+0x158>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002bfc:	4b30      	ldr	r3, [pc, #192]	@ (8002cc0 <HAL_UART_MspInit+0x158>)
 8002bfe:	2280      	movs	r2, #128	@ 0x80
 8002c00:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c02:	4b2f      	ldr	r3, [pc, #188]	@ (8002cc0 <HAL_UART_MspInit+0x158>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c08:	4b2d      	ldr	r3, [pc, #180]	@ (8002cc0 <HAL_UART_MspInit+0x158>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002c0e:	4b2c      	ldr	r3, [pc, #176]	@ (8002cc0 <HAL_UART_MspInit+0x158>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002c14:	4b2a      	ldr	r3, [pc, #168]	@ (8002cc0 <HAL_UART_MspInit+0x158>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002c1a:	4829      	ldr	r0, [pc, #164]	@ (8002cc0 <HAL_UART_MspInit+0x158>)
 8002c1c:	f001 fc8c 	bl	8004538 <HAL_DMA_Init>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d001      	beq.n	8002c2a <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 8002c26:	f7fe ff8d 	bl	8001b44 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a24      	ldr	r2, [pc, #144]	@ (8002cc0 <HAL_UART_MspInit+0x158>)
 8002c2e:	679a      	str	r2, [r3, #120]	@ 0x78
 8002c30:	4a23      	ldr	r2, [pc, #140]	@ (8002cc0 <HAL_UART_MspInit+0x158>)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8002c36:	2200      	movs	r2, #0
 8002c38:	2102      	movs	r1, #2
 8002c3a:	2024      	movs	r0, #36	@ 0x24
 8002c3c:	f001 fc45 	bl	80044ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002c40:	2024      	movs	r0, #36	@ 0x24
 8002c42:	f001 fc5c 	bl	80044fe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002c46:	e033      	b.n	8002cb0 <HAL_UART_MspInit+0x148>
  else if(uartHandle->Instance==USART2)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a1e      	ldr	r2, [pc, #120]	@ (8002cc8 <HAL_UART_MspInit+0x160>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d12e      	bne.n	8002cb0 <HAL_UART_MspInit+0x148>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002c52:	2302      	movs	r3, #2
 8002c54:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002c56:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 8002c5a:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c5c:	f107 030c 	add.w	r3, r7, #12
 8002c60:	4618      	mov	r0, r3
 8002c62:	f003 ff9d 	bl	8006ba0 <HAL_RCCEx_PeriphCLKConfig>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d001      	beq.n	8002c70 <HAL_UART_MspInit+0x108>
      Error_Handler();
 8002c6c:	f7fe ff6a 	bl	8001b44 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c70:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8002c74:	f7ff fe8c 	bl	8002990 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c78:	2001      	movs	r0, #1
 8002c7a:	f7ff fe71 	bl	8002960 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 8002c7e:	230c      	movs	r3, #12
 8002c80:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c82:	2302      	movs	r3, #2
 8002c84:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c86:	2300      	movs	r3, #0
 8002c88:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002c8e:	2307      	movs	r3, #7
 8002c90:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c92:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002c96:	4619      	mov	r1, r3
 8002c98:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c9c:	f002 fa98 	bl	80051d0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	2100      	movs	r1, #0
 8002ca4:	2025      	movs	r0, #37	@ 0x25
 8002ca6:	f001 fc10 	bl	80044ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002caa:	2025      	movs	r0, #37	@ 0x25
 8002cac:	f001 fc27 	bl	80044fe <HAL_NVIC_EnableIRQ>
}
 8002cb0:	bf00      	nop
 8002cb2:	3758      	adds	r7, #88	@ 0x58
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	40013800 	.word	0x40013800
 8002cbc:	48000400 	.word	0x48000400
 8002cc0:	2000051c 	.word	0x2000051c
 8002cc4:	40020008 	.word	0x40020008
 8002cc8:	40004400 	.word	0x40004400

08002ccc <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a14      	ldr	r2, [pc, #80]	@ (8002d2c <HAL_UART_MspDeInit+0x60>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d110      	bne.n	8002d00 <HAL_UART_MspDeInit+0x34>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8002cde:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002ce2:	f7ff fe97 	bl	8002a14 <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOB, USARTx_RX_Pin|USARTx_TX_Pin);
 8002ce6:	21c0      	movs	r1, #192	@ 0xc0
 8002ce8:	4811      	ldr	r0, [pc, #68]	@ (8002d30 <HAL_UART_MspDeInit+0x64>)
 8002cea:	f002 fbd1 	bl	8005490 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f001 fcc8 	bl	8004688 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002cf8:	2024      	movs	r0, #36	@ 0x24
 8002cfa:	f001 fc0e 	bl	800451a <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8002cfe:	e010      	b.n	8002d22 <HAL_UART_MspDeInit+0x56>
  else if(uartHandle->Instance==USART2)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a0b      	ldr	r2, [pc, #44]	@ (8002d34 <HAL_UART_MspDeInit+0x68>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d10b      	bne.n	8002d22 <HAL_UART_MspDeInit+0x56>
    __HAL_RCC_USART2_CLK_DISABLE();
 8002d0a:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8002d0e:	f7ff fe57 	bl	80029c0 <LL_APB1_GRP1_DisableClock>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_3|GPIO_PIN_2);
 8002d12:	210c      	movs	r1, #12
 8002d14:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002d18:	f002 fbba 	bl	8005490 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8002d1c:	2025      	movs	r0, #37	@ 0x25
 8002d1e:	f001 fbfc 	bl	800451a <HAL_NVIC_DisableIRQ>
}
 8002d22:	bf00      	nop
 8002d24:	3708      	adds	r7, #8
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	40013800 	.word	0x40013800
 8002d30:	48000400 	.word	0x48000400
 8002d34:	40004400 	.word	0x40004400

08002d38 <LL_APB2_GRP1_ForceReset>:
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 8002d40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d44:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d46:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	640b      	str	r3, [r1, #64]	@ 0x40
}
 8002d50:	bf00      	nop
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bc80      	pop	{r7}
 8002d58:	4770      	bx	lr

08002d5a <LL_APB2_GRP1_ReleaseReset>:
{
 8002d5a:	b480      	push	{r7}
 8002d5c:	b083      	sub	sp, #12
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 8002d62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d66:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	43db      	mvns	r3, r3
 8002d6c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002d70:	4013      	ands	r3, r2
 8002d72:	640b      	str	r3, [r1, #64]	@ 0x40
}
 8002d74:	bf00      	nop
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bc80      	pop	{r7}
 8002d7c:	4770      	bx	lr
	...

08002d80 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002d88:	4b06      	ldr	r3, [pc, #24]	@ (8002da4 <LL_EXTI_EnableIT_0_31+0x24>)
 8002d8a:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8002d8e:	4905      	ldr	r1, [pc, #20]	@ (8002da4 <LL_EXTI_EnableIT_0_31+0x24>)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8002d98:	bf00      	nop
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bc80      	pop	{r7}
 8002da0:	4770      	bx	lr
 8002da2:	bf00      	nop
 8002da4:	58000800 	.word	0x58000800

08002da8 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8002db0:	4a07      	ldr	r2, [pc, #28]	@ (8002dd0 <vcom_Init+0x28>)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 8002db6:	f7fe fad9 	bl	800136c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002dba:	f7ff fe3d 	bl	8002a38 <MX_USART1_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_26);
 8002dbe:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8002dc2:	f7ff ffdd 	bl	8002d80 <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 8002dc6:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3708      	adds	r7, #8
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	20000580 	.word	0x20000580

08002dd4 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
 8002dd8:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002ddc:	f7ff ffac 	bl	8002d38 <LL_APB2_GRP1_ForceReset>
  __HAL_RCC_USART1_RELEASE_RESET();
 8002de0:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002de4:	f7ff ffb9 	bl	8002d5a <LL_APB2_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 8002de8:	4804      	ldr	r0, [pc, #16]	@ (8002dfc <vcom_DeInit+0x28>)
 8002dea:	f7ff ff6f 	bl	8002ccc <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8002dee:	200f      	movs	r0, #15
 8002df0:	f001 fb93 	bl	800451a <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 8002df4:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	200003fc 	.word	0x200003fc

08002e00 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	460b      	mov	r3, r1
 8002e0a:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8002e0c:	887b      	ldrh	r3, [r7, #2]
 8002e0e:	461a      	mov	r2, r3
 8002e10:	6879      	ldr	r1, [r7, #4]
 8002e12:	4804      	ldr	r0, [pc, #16]	@ (8002e24 <vcom_Trace_DMA+0x24>)
 8002e14:	f005 f8e0 	bl	8007fd8 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 8002e18:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3708      	adds	r7, #8
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	200003fc 	.word	0x200003fc

08002e28 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8002e30:	4a19      	ldr	r2, [pc, #100]	@ (8002e98 <vcom_ReceiveInit+0x70>)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8002e36:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002e3a:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 8002e3c:	f107 0308 	add.w	r3, r7, #8
 8002e40:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002e44:	4815      	ldr	r0, [pc, #84]	@ (8002e9c <vcom_ReceiveInit+0x74>)
 8002e46:	f006 ffd8 	bl	8009dfa <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 8002e4a:	bf00      	nop
 8002e4c:	4b13      	ldr	r3, [pc, #76]	@ (8002e9c <vcom_ReceiveInit+0x74>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	69db      	ldr	r3, [r3, #28]
 8002e52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e5a:	d0f7      	beq.n	8002e4c <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 8002e5c:	bf00      	nop
 8002e5e:	4b0f      	ldr	r3, [pc, #60]	@ (8002e9c <vcom_ReceiveInit+0x74>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	69db      	ldr	r3, [r3, #28]
 8002e64:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e68:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e6c:	d1f7      	bne.n	8002e5e <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8002e6e:	4b0b      	ldr	r3, [pc, #44]	@ (8002e9c <vcom_ReceiveInit+0x74>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	689a      	ldr	r2, [r3, #8]
 8002e74:	4b09      	ldr	r3, [pc, #36]	@ (8002e9c <vcom_ReceiveInit+0x74>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8002e7c:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 8002e7e:	4807      	ldr	r0, [pc, #28]	@ (8002e9c <vcom_ReceiveInit+0x74>)
 8002e80:	f007 f816 	bl	8009eb0 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 8002e84:	2201      	movs	r2, #1
 8002e86:	4906      	ldr	r1, [pc, #24]	@ (8002ea0 <vcom_ReceiveInit+0x78>)
 8002e88:	4804      	ldr	r0, [pc, #16]	@ (8002e9c <vcom_ReceiveInit+0x74>)
 8002e8a:	f005 f84f 	bl	8007f2c <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 8002e8e:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3710      	adds	r7, #16
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	20000584 	.word	0x20000584
 8002e9c:	200003fc 	.word	0x200003fc
 8002ea0:	2000057c 	.word	0x2000057c

08002ea4 <vcom_Resume>:

void vcom_Resume(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002ea8:	4808      	ldr	r0, [pc, #32]	@ (8002ecc <vcom_Resume+0x28>)
 8002eaa:	f004 ffee 	bl	8007e8a <HAL_UART_Init>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d001      	beq.n	8002eb8 <vcom_Resume+0x14>
  {
    Error_Handler();
 8002eb4:	f7fe fe46 	bl	8001b44 <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002eb8:	4805      	ldr	r0, [pc, #20]	@ (8002ed0 <vcom_Resume+0x2c>)
 8002eba:	f001 fb3d 	bl	8004538 <HAL_DMA_Init>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d001      	beq.n	8002ec8 <vcom_Resume+0x24>
  {
    Error_Handler();
 8002ec4:	f7fe fe3e 	bl	8001b44 <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8002ec8:	bf00      	nop
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	200003fc 	.word	0x200003fc
 8002ed0:	2000051c 	.word	0x2000051c

08002ed4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART1)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a05      	ldr	r2, [pc, #20]	@ (8002ef8 <HAL_UART_TxCpltCallback+0x24>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d103      	bne.n	8002eee <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 8002ee6:	4b05      	ldr	r3, [pc, #20]	@ (8002efc <HAL_UART_TxCpltCallback+0x28>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	2000      	movs	r0, #0
 8002eec:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8002eee:	bf00      	nop
 8002ef0:	3708      	adds	r7, #8
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	40013800 	.word	0x40013800
 8002efc:	20000580 	.word	0x20000580

08002f00 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART1)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a0d      	ldr	r2, [pc, #52]	@ (8002f44 <HAL_UART_RxCpltCallback+0x44>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d113      	bne.n	8002f3a <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 8002f12:	4b0d      	ldr	r3, [pc, #52]	@ (8002f48 <HAL_UART_RxCpltCallback+0x48>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d00a      	beq.n	8002f30 <HAL_UART_RxCpltCallback+0x30>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d105      	bne.n	8002f30 <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 8002f24:	4b08      	ldr	r3, [pc, #32]	@ (8002f48 <HAL_UART_RxCpltCallback+0x48>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	2101      	movs	r1, #1
 8002f2c:	4807      	ldr	r0, [pc, #28]	@ (8002f4c <HAL_UART_RxCpltCallback+0x4c>)
 8002f2e:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 8002f30:	2201      	movs	r2, #1
 8002f32:	4906      	ldr	r1, [pc, #24]	@ (8002f4c <HAL_UART_RxCpltCallback+0x4c>)
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f004 fff9 	bl	8007f2c <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8002f3a:	bf00      	nop
 8002f3c:	3708      	adds	r7, #8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	40013800 	.word	0x40013800
 8002f48:	20000584 	.word	0x20000584
 8002f4c:	2000057c 	.word	0x2000057c

08002f50 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002f50:	480d      	ldr	r0, [pc, #52]	@ (8002f88 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002f52:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002f54:	f7ff fac0 	bl	80024d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f58:	480c      	ldr	r0, [pc, #48]	@ (8002f8c <LoopForever+0x6>)
  ldr r1, =_edata
 8002f5a:	490d      	ldr	r1, [pc, #52]	@ (8002f90 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002f5c:	4a0d      	ldr	r2, [pc, #52]	@ (8002f94 <LoopForever+0xe>)
  movs r3, #0
 8002f5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f60:	e002      	b.n	8002f68 <LoopCopyDataInit>

08002f62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f66:	3304      	adds	r3, #4

08002f68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f6c:	d3f9      	bcc.n	8002f62 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f6e:	4a0a      	ldr	r2, [pc, #40]	@ (8002f98 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002f70:	4c0a      	ldr	r4, [pc, #40]	@ (8002f9c <LoopForever+0x16>)
  movs r3, #0
 8002f72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f74:	e001      	b.n	8002f7a <LoopFillZerobss>

08002f76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f78:	3204      	adds	r2, #4

08002f7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f7c:	d3fb      	bcc.n	8002f76 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002f7e:	f019 fb5b 	bl	801c638 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002f82:	f7fe fc69 	bl	8001858 <main>

08002f86 <LoopForever>:

LoopForever:
    b LoopForever
 8002f86:	e7fe      	b.n	8002f86 <LoopForever>
  ldr   r0, =_estack
 8002f88:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002f8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f90:	20000308 	.word	0x20000308
  ldr r2, =_sidata
 8002f94:	0801f9f4 	.word	0x0801f9f4
  ldr r2, =_sbss
 8002f98:	20000308 	.word	0x20000308
  ldr r4, =_ebss
 8002f9c:	2000250c 	.word	0x2000250c

08002fa0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002fa0:	e7fe      	b.n	8002fa0 <ADC_IRQHandler>

08002fa2 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8002fa2:	b580      	push	{r7, lr}
 8002fa4:	b086      	sub	sp, #24
 8002fa6:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8002fa8:	1d3b      	adds	r3, r7, #4
 8002faa:	2200      	movs	r2, #0
 8002fac:	601a      	str	r2, [r3, #0]
 8002fae:	605a      	str	r2, [r3, #4]
 8002fb0:	609a      	str	r2, [r3, #8]
 8002fb2:	60da      	str	r2, [r3, #12]
 8002fb4:	611a      	str	r2, [r3, #16]
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8002fb6:	2310      	movs	r3, #16
 8002fb8:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8002fc6:	1d3b      	adds	r3, r7, #4
 8002fc8:	4619      	mov	r1, r3
 8002fca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002fce:	f002 f8ff 	bl	80051d0 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8002fd2:	2320      	movs	r3, #32
 8002fd4:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8002fd6:	1d3b      	adds	r3, r7, #4
 8002fd8:	4619      	mov	r1, r3
 8002fda:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002fde:	f002 f8f7 	bl	80051d0 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	2120      	movs	r1, #32
 8002fe6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002fea:	f002 fb1f 	bl	800562c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002fee:	2200      	movs	r2, #0
 8002ff0:	2110      	movs	r1, #16
 8002ff2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002ff6:	f002 fb19 	bl	800562c <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8002ffa:	2300      	movs	r3, #0
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3718      	adds	r7, #24
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}

08003004 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	4603      	mov	r3, r0
 800300c:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 800300e:	79fb      	ldrb	r3, [r7, #7]
 8003010:	2b03      	cmp	r3, #3
 8003012:	d83f      	bhi.n	8003094 <BSP_RADIO_ConfigRFSwitch+0x90>
 8003014:	a201      	add	r2, pc, #4	@ (adr r2, 800301c <BSP_RADIO_ConfigRFSwitch+0x18>)
 8003016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800301a:	bf00      	nop
 800301c:	0800302d 	.word	0x0800302d
 8003020:	08003047 	.word	0x08003047
 8003024:	08003061 	.word	0x08003061
 8003028:	0800307b 	.word	0x0800307b
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 800302c:	2200      	movs	r2, #0
 800302e:	2110      	movs	r1, #16
 8003030:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003034:	f002 fafa 	bl	800562c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8003038:	2200      	movs	r2, #0
 800303a:	2120      	movs	r1, #32
 800303c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003040:	f002 faf4 	bl	800562c <HAL_GPIO_WritePin>
      break;      
 8003044:	e027      	b.n	8003096 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8003046:	2201      	movs	r2, #1
 8003048:	2110      	movs	r1, #16
 800304a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800304e:	f002 faed 	bl	800562c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8003052:	2200      	movs	r2, #0
 8003054:	2120      	movs	r1, #32
 8003056:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800305a:	f002 fae7 	bl	800562c <HAL_GPIO_WritePin>
      break;
 800305e:	e01a      	b.n	8003096 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8003060:	2201      	movs	r2, #1
 8003062:	2110      	movs	r1, #16
 8003064:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003068:	f002 fae0 	bl	800562c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 800306c:	2201      	movs	r2, #1
 800306e:	2120      	movs	r1, #32
 8003070:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003074:	f002 fada 	bl	800562c <HAL_GPIO_WritePin>
      break;
 8003078:	e00d      	b.n	8003096 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 800307a:	2200      	movs	r2, #0
 800307c:	2110      	movs	r1, #16
 800307e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003082:	f002 fad3 	bl	800562c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8003086:	2201      	movs	r2, #1
 8003088:	2120      	movs	r1, #32
 800308a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800308e:	f002 facd 	bl	800562c <HAL_GPIO_WritePin>
      break;
 8003092:	e000      	b.n	8003096 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    default:
      break;    
 8003094:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 8003096:	2300      	movs	r3, #0
}
 8003098:	4618      	mov	r0, r3
 800309a:	3708      	adds	r7, #8
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 80030a0:	b480      	push	{r7}
 80030a2:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_HP;
 80030a4:	2302      	movs	r3, #2
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bc80      	pop	{r7}
 80030ac:	4770      	bx	lr

080030ae <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 80030ae:	b480      	push	{r7}
 80030b0:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 80030b2:	2301      	movs	r3, #1
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bc80      	pop	{r7}
 80030ba:	4770      	bx	lr

080030bc <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 80030bc:	b480      	push	{r7}
 80030be:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 80030c0:	2301      	movs	r3, #1
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bc80      	pop	{r7}
 80030c8:	4770      	bx	lr

080030ca <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 80030ca:	b480      	push	{r7}
 80030cc:	b085      	sub	sp, #20
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	4603      	mov	r3, r0
 80030d2:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 80030d4:	79fb      	ldrb	r3, [r7, #7]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d102      	bne.n	80030e0 <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 80030da:	230f      	movs	r3, #15
 80030dc:	60fb      	str	r3, [r7, #12]
 80030de:	e001      	b.n	80030e4 <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 80030e0:	2316      	movs	r3, #22
 80030e2:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80030e4:	68fb      	ldr	r3, [r7, #12]
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3714      	adds	r7, #20
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bc80      	pop	{r7}
 80030ee:	4770      	bx	lr

080030f0 <LL_DBGMCU_DisableDBGSleepMode>:
{
 80030f0:	b480      	push	{r7}
 80030f2:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80030f4:	4b04      	ldr	r3, [pc, #16]	@ (8003108 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	4a03      	ldr	r2, [pc, #12]	@ (8003108 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 80030fa:	f023 0301 	bic.w	r3, r3, #1
 80030fe:	6053      	str	r3, [r2, #4]
}
 8003100:	bf00      	nop
 8003102:	46bd      	mov	sp, r7
 8003104:	bc80      	pop	{r7}
 8003106:	4770      	bx	lr
 8003108:	e0042000 	.word	0xe0042000

0800310c <LL_DBGMCU_DisableDBGStopMode>:
{
 800310c:	b480      	push	{r7}
 800310e:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8003110:	4b04      	ldr	r3, [pc, #16]	@ (8003124 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	4a03      	ldr	r2, [pc, #12]	@ (8003124 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8003116:	f023 0302 	bic.w	r3, r3, #2
 800311a:	6053      	str	r3, [r2, #4]
}
 800311c:	bf00      	nop
 800311e:	46bd      	mov	sp, r7
 8003120:	bc80      	pop	{r7}
 8003122:	4770      	bx	lr
 8003124:	e0042000 	.word	0xe0042000

08003128 <LL_DBGMCU_DisableDBGStandbyMode>:
{
 8003128:	b480      	push	{r7}
 800312a:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 800312c:	4b04      	ldr	r3, [pc, #16]	@ (8003140 <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	4a03      	ldr	r2, [pc, #12]	@ (8003140 <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8003132:	f023 0304 	bic.w	r3, r3, #4
 8003136:	6053      	str	r3, [r2, #4]
}
 8003138:	bf00      	nop
 800313a:	46bd      	mov	sp, r7
 800313c:	bc80      	pop	{r7}
 800313e:	4770      	bx	lr
 8003140:	e0042000 	.word	0xe0042000

08003144 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800314a:	2300      	movs	r3, #0
 800314c:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800314e:	2003      	movs	r0, #3
 8003150:	f001 f9b0 	bl	80044b4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003154:	f003 fb46 	bl	80067e4 <HAL_RCC_GetHCLKFreq>
 8003158:	4603      	mov	r3, r0
 800315a:	4a09      	ldr	r2, [pc, #36]	@ (8003180 <HAL_Init+0x3c>)
 800315c:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800315e:	200f      	movs	r0, #15
 8003160:	f7ff f826 	bl	80021b0 <HAL_InitTick>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d002      	beq.n	8003170 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	71fb      	strb	r3, [r7, #7]
 800316e:	e001      	b.n	8003174 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003170:	f7fe fddf 	bl	8001d32 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003174:	79fb      	ldrb	r3, [r7, #7]
}
 8003176:	4618      	mov	r0, r3
 8003178:	3708      	adds	r7, #8
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	20000000 	.word	0x20000000

08003184 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8003184:	b480      	push	{r7}
 8003186:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003188:	4b04      	ldr	r3, [pc, #16]	@ (800319c <HAL_SuspendTick+0x18>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a03      	ldr	r2, [pc, #12]	@ (800319c <HAL_SuspendTick+0x18>)
 800318e:	f023 0302 	bic.w	r3, r3, #2
 8003192:	6013      	str	r3, [r2, #0]
}
 8003194:	bf00      	nop
 8003196:	46bd      	mov	sp, r7
 8003198:	bc80      	pop	{r7}
 800319a:	4770      	bx	lr
 800319c:	e000e010 	.word	0xe000e010

080031a0 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80031a0:	b480      	push	{r7}
 80031a2:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80031a4:	4b04      	ldr	r3, [pc, #16]	@ (80031b8 <HAL_ResumeTick+0x18>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a03      	ldr	r2, [pc, #12]	@ (80031b8 <HAL_ResumeTick+0x18>)
 80031aa:	f043 0302 	orr.w	r3, r3, #2
 80031ae:	6013      	str	r3, [r2, #0]
}
 80031b0:	bf00      	nop
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bc80      	pop	{r7}
 80031b6:	4770      	bx	lr
 80031b8:	e000e010 	.word	0xe000e010

080031bc <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 80031bc:	b480      	push	{r7}
 80031be:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 80031c0:	4b02      	ldr	r3, [pc, #8]	@ (80031cc <HAL_GetUIDw0+0x10>)
 80031c2:	681b      	ldr	r3, [r3, #0]
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bc80      	pop	{r7}
 80031ca:	4770      	bx	lr
 80031cc:	1fff7590 	.word	0x1fff7590

080031d0 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 80031d4:	4b02      	ldr	r3, [pc, #8]	@ (80031e0 <HAL_GetUIDw1+0x10>)
 80031d6:	681b      	ldr	r3, [r3, #0]
}
 80031d8:	4618      	mov	r0, r3
 80031da:	46bd      	mov	sp, r7
 80031dc:	bc80      	pop	{r7}
 80031de:	4770      	bx	lr
 80031e0:	1fff7594 	.word	0x1fff7594

080031e4 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 80031e4:	b480      	push	{r7}
 80031e6:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 80031e8:	4b02      	ldr	r3, [pc, #8]	@ (80031f4 <HAL_GetUIDw2+0x10>)
 80031ea:	681b      	ldr	r3, [r3, #0]
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bc80      	pop	{r7}
 80031f2:	4770      	bx	lr
 80031f4:	1fff7598 	.word	0x1fff7598

080031f8 <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGSleepMode();
 80031fc:	f7ff ff78 	bl	80030f0 <LL_DBGMCU_DisableDBGSleepMode>
}
 8003200:	bf00      	nop
 8003202:	bd80      	pop	{r7, pc}

08003204 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStopMode();
 8003208:	f7ff ff80 	bl	800310c <LL_DBGMCU_DisableDBGStopMode>
}
 800320c:	bf00      	nop
 800320e:	bd80      	pop	{r7, pc}

08003210 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStandbyMode();
 8003214:	f7ff ff88 	bl	8003128 <LL_DBGMCU_DisableDBGStandbyMode>
}
 8003218:	bf00      	nop
 800321a:	bd80      	pop	{r7, pc}

0800321c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	431a      	orrs	r2, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	601a      	str	r2, [r3, #0]
}
 8003236:	bf00      	nop
 8003238:	370c      	adds	r7, #12
 800323a:	46bd      	mov	sp, r7
 800323c:	bc80      	pop	{r7}
 800323e:	4770      	bx	lr

08003240 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003250:	4618      	mov	r0, r3
 8003252:	370c      	adds	r7, #12
 8003254:	46bd      	mov	sp, r7
 8003256:	bc80      	pop	{r7}
 8003258:	4770      	bx	lr

0800325a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800325a:	b480      	push	{r7}
 800325c:	b085      	sub	sp, #20
 800325e:	af00      	add	r7, sp, #0
 8003260:	60f8      	str	r0, [r7, #12]
 8003262:	60b9      	str	r1, [r7, #8]
 8003264:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	695a      	ldr	r2, [r3, #20]
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	f003 0304 	and.w	r3, r3, #4
 8003270:	2107      	movs	r1, #7
 8003272:	fa01 f303 	lsl.w	r3, r1, r3
 8003276:	43db      	mvns	r3, r3
 8003278:	401a      	ands	r2, r3
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	f003 0304 	and.w	r3, r3, #4
 8003280:	6879      	ldr	r1, [r7, #4]
 8003282:	fa01 f303 	lsl.w	r3, r1, r3
 8003286:	431a      	orrs	r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 800328c:	bf00      	nop
 800328e:	3714      	adds	r7, #20
 8003290:	46bd      	mov	sp, r7
 8003292:	bc80      	pop	{r7}
 8003294:	4770      	bx	lr

08003296 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8003296:	b480      	push	{r7}
 8003298:	b083      	sub	sp, #12
 800329a:	af00      	add	r7, sp, #0
 800329c:	6078      	str	r0, [r7, #4]
 800329e:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	695a      	ldr	r2, [r3, #20]
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	f003 0304 	and.w	r3, r3, #4
 80032aa:	2107      	movs	r1, #7
 80032ac:	fa01 f303 	lsl.w	r3, r1, r3
 80032b0:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80032b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032bc:	4618      	mov	r0, r3
 80032be:	370c      	adds	r7, #12
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bc80      	pop	{r7}
 80032c4:	4770      	bx	lr

080032c6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80032c6:	b480      	push	{r7}
 80032c8:	b083      	sub	sp, #12
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d101      	bne.n	80032de <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80032da:	2301      	movs	r3, #1
 80032dc:	e000      	b.n	80032e0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bc80      	pop	{r7}
 80032e8:	4770      	bx	lr

080032ea <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80032ea:	b480      	push	{r7}
 80032ec:	b085      	sub	sp, #20
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	60f8      	str	r0, [r7, #12]
 80032f2:	60b9      	str	r1, [r7, #8]
 80032f4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	f003 031f 	and.w	r3, r3, #31
 8003300:	210f      	movs	r1, #15
 8003302:	fa01 f303 	lsl.w	r3, r1, r3
 8003306:	43db      	mvns	r3, r3
 8003308:	401a      	ands	r2, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	0e9b      	lsrs	r3, r3, #26
 800330e:	f003 010f 	and.w	r1, r3, #15
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	f003 031f 	and.w	r3, r3, #31
 8003318:	fa01 f303 	lsl.w	r3, r1, r3
 800331c:	431a      	orrs	r2, r3
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003322:	bf00      	nop
 8003324:	3714      	adds	r7, #20
 8003326:	46bd      	mov	sp, r7
 8003328:	bc80      	pop	{r7}
 800332a:	4770      	bx	lr

0800332c <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003340:	431a      	orrs	r2, r3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003346:	bf00      	nop
 8003348:	370c      	adds	r7, #12
 800334a:	46bd      	mov	sp, r7
 800334c:	bc80      	pop	{r7}
 800334e:	4770      	bx	lr

08003350 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003364:	43db      	mvns	r3, r3
 8003366:	401a      	ands	r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800336c:	bf00      	nop
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	bc80      	pop	{r7}
 8003374:	4770      	bx	lr

08003376 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8003376:	b480      	push	{r7}
 8003378:	b085      	sub	sp, #20
 800337a:	af00      	add	r7, sp, #0
 800337c:	60f8      	str	r0, [r7, #12]
 800337e:	60b9      	str	r1, [r7, #8]
 8003380:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	695a      	ldr	r2, [r3, #20]
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	021b      	lsls	r3, r3, #8
 800338a:	43db      	mvns	r3, r3
 800338c:	401a      	ands	r2, r3
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	0219      	lsls	r1, r3, #8
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	400b      	ands	r3, r1
 8003396:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 800339a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800339e:	431a      	orrs	r2, r3
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80033a4:	bf00      	nop
 80033a6:	3714      	adds	r7, #20
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bc80      	pop	{r7}
 80033ac:	4770      	bx	lr

080033ae <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80033ae:	b480      	push	{r7}
 80033b0:	b083      	sub	sp, #12
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80033be:	f023 0317 	bic.w	r3, r3, #23
 80033c2:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80033ca:	bf00      	nop
 80033cc:	370c      	adds	r7, #12
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bc80      	pop	{r7}
 80033d2:	4770      	bx	lr

080033d4 <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80033e4:	f023 0317 	bic.w	r3, r3, #23
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	6093      	str	r3, [r2, #8]
}
 80033ec:	bf00      	nop
 80033ee:	370c      	adds	r7, #12
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bc80      	pop	{r7}
 80033f4:	4770      	bx	lr

080033f6 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80033f6:	b480      	push	{r7}
 80033f8:	b083      	sub	sp, #12
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003406:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800340a:	d101      	bne.n	8003410 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800340c:	2301      	movs	r3, #1
 800340e:	e000      	b.n	8003412 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003410:	2300      	movs	r3, #0
}
 8003412:	4618      	mov	r0, r3
 8003414:	370c      	adds	r7, #12
 8003416:	46bd      	mov	sp, r7
 8003418:	bc80      	pop	{r7}
 800341a:	4770      	bx	lr

0800341c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800342c:	f023 0317 	bic.w	r3, r3, #23
 8003430:	f043 0201 	orr.w	r2, r3, #1
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003438:	bf00      	nop
 800343a:	370c      	adds	r7, #12
 800343c:	46bd      	mov	sp, r7
 800343e:	bc80      	pop	{r7}
 8003440:	4770      	bx	lr

08003442 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003442:	b480      	push	{r7}
 8003444:	b083      	sub	sp, #12
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003452:	f023 0317 	bic.w	r3, r3, #23
 8003456:	f043 0202 	orr.w	r2, r3, #2
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800345e:	bf00      	nop
 8003460:	370c      	adds	r7, #12
 8003462:	46bd      	mov	sp, r7
 8003464:	bc80      	pop	{r7}
 8003466:	4770      	bx	lr

08003468 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	f003 0301 	and.w	r3, r3, #1
 8003478:	2b01      	cmp	r3, #1
 800347a:	d101      	bne.n	8003480 <LL_ADC_IsEnabled+0x18>
 800347c:	2301      	movs	r3, #1
 800347e:	e000      	b.n	8003482 <LL_ADC_IsEnabled+0x1a>
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	370c      	adds	r7, #12
 8003486:	46bd      	mov	sp, r7
 8003488:	bc80      	pop	{r7}
 800348a:	4770      	bx	lr

0800348c <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f003 0302 	and.w	r3, r3, #2
 800349c:	2b02      	cmp	r3, #2
 800349e:	d101      	bne.n	80034a4 <LL_ADC_IsDisableOngoing+0x18>
 80034a0:	2301      	movs	r3, #1
 80034a2:	e000      	b.n	80034a6 <LL_ADC_IsDisableOngoing+0x1a>
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	370c      	adds	r7, #12
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bc80      	pop	{r7}
 80034ae:	4770      	bx	lr

080034b0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80034c0:	f023 0317 	bic.w	r3, r3, #23
 80034c4:	f043 0204 	orr.w	r2, r3, #4
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80034cc:	bf00      	nop
 80034ce:	370c      	adds	r7, #12
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bc80      	pop	{r7}
 80034d4:	4770      	bx	lr

080034d6 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80034d6:	b480      	push	{r7}
 80034d8:	b083      	sub	sp, #12
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80034e6:	f023 0317 	bic.w	r3, r3, #23
 80034ea:	f043 0210 	orr.w	r2, r3, #16
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80034f2:	bf00      	nop
 80034f4:	370c      	adds	r7, #12
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bc80      	pop	{r7}
 80034fa:	4770      	bx	lr

080034fc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	f003 0304 	and.w	r3, r3, #4
 800350c:	2b04      	cmp	r3, #4
 800350e:	d101      	bne.n	8003514 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003510:	2301      	movs	r3, #1
 8003512:	e000      	b.n	8003516 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003514:	2300      	movs	r3, #0
}
 8003516:	4618      	mov	r0, r3
 8003518:	370c      	adds	r7, #12
 800351a:	46bd      	mov	sp, r7
 800351c:	bc80      	pop	{r7}
 800351e:	4770      	bx	lr

08003520 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b088      	sub	sp, #32
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003528:	2300      	movs	r3, #0
 800352a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 800352c:	2300      	movs	r3, #0
 800352e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8003530:	2300      	movs	r3, #0
 8003532:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003534:	2300      	movs	r3, #0
 8003536:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d101      	bne.n	8003542 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e19e      	b.n	8003880 <HAL_ADC_Init+0x360>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800354c:	2b00      	cmp	r3, #0
 800354e:	d109      	bne.n	8003564 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f7fd fe43 	bl	80011dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4618      	mov	r0, r3
 800356a:	f7ff ff44 	bl	80033f6 <LL_ADC_IsInternalRegulatorEnabled>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d115      	bne.n	80035a0 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4618      	mov	r0, r3
 800357a:	f7ff ff18 	bl	80033ae <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800357e:	4b99      	ldr	r3, [pc, #612]	@ (80037e4 <HAL_ADC_Init+0x2c4>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	099b      	lsrs	r3, r3, #6
 8003584:	4a98      	ldr	r2, [pc, #608]	@ (80037e8 <HAL_ADC_Init+0x2c8>)
 8003586:	fba2 2303 	umull	r2, r3, r2, r3
 800358a:	099b      	lsrs	r3, r3, #6
 800358c:	3301      	adds	r3, #1
 800358e:	005b      	lsls	r3, r3, #1
 8003590:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003592:	e002      	b.n	800359a <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	3b01      	subs	r3, #1
 8003598:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d1f9      	bne.n	8003594 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7ff ff26 	bl	80033f6 <LL_ADC_IsInternalRegulatorEnabled>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d10d      	bne.n	80035cc <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035b4:	f043 0210 	orr.w	r2, r3, #16
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035c0:	f043 0201 	orr.w	r2, r3, #1
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7ff ff93 	bl	80034fc <LL_ADC_REG_IsConversionOngoing>
 80035d6:	60f8      	str	r0, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035dc:	f003 0310 	and.w	r3, r3, #16
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	f040 8144 	bne.w	800386e <HAL_ADC_Init+0x34e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	f040 8140 	bne.w	800386e <HAL_ADC_Init+0x34e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035f2:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80035f6:	f043 0202 	orr.w	r2, r3, #2
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4618      	mov	r0, r3
 8003604:	f7ff ff30 	bl	8003468 <LL_ADC_IsEnabled>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	f040 80a7 	bne.w	800375e <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	7e1b      	ldrb	r3, [r3, #24]
 8003618:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800361a:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	7e5b      	ldrb	r3, [r3, #25]
 8003620:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003622:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	7e9b      	ldrb	r3, [r3, #26]
 8003628:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800362a:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003630:	2a00      	cmp	r2, #0
 8003632:	d002      	beq.n	800363a <HAL_ADC_Init+0x11a>
 8003634:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003638:	e000      	b.n	800363c <HAL_ADC_Init+0x11c>
 800363a:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800363c:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003642:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	691b      	ldr	r3, [r3, #16]
 8003648:	2b00      	cmp	r3, #0
 800364a:	da04      	bge.n	8003656 <HAL_ADC_Init+0x136>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	691b      	ldr	r3, [r3, #16]
 8003650:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003654:	e001      	b.n	800365a <HAL_ADC_Init+0x13a>
 8003656:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                           |
 800365a:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003662:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003664:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003666:	69ba      	ldr	r2, [r7, #24]
 8003668:	4313      	orrs	r3, r2
 800366a:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003672:	2b01      	cmp	r3, #1
 8003674:	d114      	bne.n	80036a0 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	7e9b      	ldrb	r3, [r3, #26]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d104      	bne.n	8003688 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800367e:	69bb      	ldr	r3, [r7, #24]
 8003680:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003684:	61bb      	str	r3, [r7, #24]
 8003686:	e00b      	b.n	80036a0 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800368c:	f043 0220 	orr.w	r2, r3, #32
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003698:	f043 0201 	orr.w	r2, r3, #1
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d009      	beq.n	80036bc <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ac:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80036b4:	4313      	orrs	r3, r2
 80036b6:	69ba      	ldr	r2, [r7, #24]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	f423 33fe 	bic.w	r3, r3, #130048	@ 0x1fc00
 80036c6:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	6812      	ldr	r2, [r2, #0]
 80036ce:	69b9      	ldr	r1, [r7, #24]
 80036d0:	430b      	orrs	r3, r1
 80036d2:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80036e0:	4313      	orrs	r3, r2
 80036e2:	697a      	ldr	r2, [r7, #20]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d111      	bne.n	8003716 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80036fe:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 8003704:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800370a:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	4313      	orrs	r3, r2
 8003710:	f043 0301 	orr.w	r3, r3, #1
 8003714:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	691a      	ldr	r2, [r3, #16]
 800371c:	4b33      	ldr	r3, [pc, #204]	@ (80037ec <HAL_ADC_Init+0x2cc>)
 800371e:	4013      	ands	r3, r2
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	6812      	ldr	r2, [r2, #0]
 8003724:	6979      	ldr	r1, [r7, #20]
 8003726:	430b      	orrs	r3, r1
 8003728:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003732:	d014      	beq.n	800375e <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003738:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800373c:	d00f      	beq.n	800375e <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003742:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003746:	d00a      	beq.n	800375e <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8003748:	4b29      	ldr	r3, [pc, #164]	@ (80037f0 <HAL_ADC_Init+0x2d0>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8003758:	4925      	ldr	r1, [pc, #148]	@ (80037f0 <HAL_ADC_Init+0x2d0>)
 800375a:	4313      	orrs	r3, r2
 800375c:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6818      	ldr	r0, [r3, #0]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003766:	461a      	mov	r2, r3
 8003768:	2100      	movs	r1, #0
 800376a:	f7ff fd76 	bl	800325a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6818      	ldr	r0, [r3, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003776:	461a      	mov	r2, r3
 8003778:	491e      	ldr	r1, [pc, #120]	@ (80037f4 <HAL_ADC_Init+0x2d4>)
 800377a:	f7ff fd6e 	bl	800325a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d108      	bne.n	8003798 <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f062 020f 	orn	r2, r2, #15
 8003794:	629a      	str	r2, [r3, #40]	@ 0x28
 8003796:	e042      	b.n	800381e <HAL_ADC_Init+0x2fe>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	691b      	ldr	r3, [r3, #16]
 800379c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80037a0:	d13d      	bne.n	800381e <HAL_ADC_Init+0x2fe>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 80037a2:	2300      	movs	r3, #0
 80037a4:	613b      	str	r3, [r7, #16]
 80037a6:	e00c      	b.n	80037c2 <HAL_ADC_Init+0x2a2>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	fa22 f303 	lsr.w	r3, r2, r3
 80037b4:	f003 030f 	and.w	r3, r3, #15
 80037b8:	2b0f      	cmp	r3, #15
 80037ba:	d006      	beq.n	80037ca <HAL_ADC_Init+0x2aa>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	3301      	adds	r3, #1
 80037c0:	613b      	str	r3, [r7, #16]
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	2b07      	cmp	r3, #7
 80037c6:	d9ef      	bls.n	80037a8 <HAL_ADC_Init+0x288>
 80037c8:	e000      	b.n	80037cc <HAL_ADC_Init+0x2ac>
            ADC_CHSELR_SQ1)
        {
          break;
 80037ca:	bf00      	nop
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d112      	bne.n	80037f8 <HAL_ADC_Init+0x2d8>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f062 020f 	orn	r2, r2, #15
 80037e0:	629a      	str	r2, [r3, #40]	@ 0x28
 80037e2:	e01c      	b.n	800381e <HAL_ADC_Init+0x2fe>
 80037e4:	20000000 	.word	0x20000000
 80037e8:	053e2d63 	.word	0x053e2d63
 80037ec:	1ffffc02 	.word	0x1ffffc02
 80037f0:	40012708 	.word	0x40012708
 80037f4:	03ffff04 	.word	0x03ffff04
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	69db      	ldr	r3, [r3, #28]
 8003802:	3b01      	subs	r3, #1
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	f003 031c 	and.w	r3, r3, #28
 800380a:	f06f 020f 	mvn.w	r2, #15
 800380e:	fa02 f103 	lsl.w	r1, r2, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	430a      	orrs	r2, r1
 800381c:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	2100      	movs	r1, #0
 8003824:	4618      	mov	r0, r3
 8003826:	f7ff fd36 	bl	8003296 <LL_ADC_GetSamplingTimeCommonChannels>
 800382a:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003830:	429a      	cmp	r2, r3
 8003832:	d10b      	bne.n	800384c <HAL_ADC_Init+0x32c>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800383e:	f023 0303 	bic.w	r3, r3, #3
 8003842:	f043 0201 	orr.w	r2, r3, #1
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	659a      	str	r2, [r3, #88]	@ 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800384a:	e018      	b.n	800387e <HAL_ADC_Init+0x35e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003850:	f023 0312 	bic.w	r3, r3, #18
 8003854:	f043 0210 	orr.w	r2, r3, #16
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003860:	f043 0201 	orr.w	r2, r3, #1
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800386c:	e007      	b.n	800387e <HAL_ADC_Init+0x35e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003872:	f043 0210 	orr.w	r2, r3, #16
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 800387e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003880:	4618      	mov	r0, r3
 8003882:	3720      	adds	r7, #32
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d101      	bne.n	800389a <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e06a      	b.n	8003970 <HAL_ADC_DeInit+0xe8>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800389e:	f043 0202 	orr.w	r2, r3, #2
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 fabe 	bl	8003e28 <ADC_ConversionStop>
 80038ac:	4603      	mov	r3, r0
 80038ae:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80038b0:	7bfb      	ldrb	r3, [r7, #15]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d10f      	bne.n	80038d6 <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f000 fb82 	bl	8003fc0 <ADC_Disable>
 80038bc:	4603      	mov	r3, r0
 80038be:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80038c0:	7bfb      	ldrb	r3, [r7, #15]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d102      	bne.n	80038cc <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2201      	movs	r2, #1
 80038ca:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4618      	mov	r0, r3
 80038d2:	f7ff fd7f 	bl	80033d4 <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	6812      	ldr	r2, [r2, #0]
 80038e0:	f423 7367 	bic.w	r3, r3, #924	@ 0x39c
 80038e4:	f023 0303 	bic.w	r3, r3, #3
 80038e8:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f240 329f 	movw	r2, #927	@ 0x39f
 80038f2:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	68d9      	ldr	r1, [r3, #12]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	4b1e      	ldr	r3, [pc, #120]	@ (8003978 <HAL_ADC_DeInit+0xf0>)
 8003900:	400b      	ands	r3, r1
 8003902:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register CFGR2 */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	691a      	ldr	r2, [r3, #16]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f022 4240 	bic.w	r2, r2, #3221225472	@ 0xc0000000
 8003912:	611a      	str	r2, [r3, #16]

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	695a      	ldr	r2, [r3, #20]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f022 0207 	bic.w	r2, r2, #7
 8003922:	615a      	str	r2, [r3, #20]

  /* Reset register TR1 */
  hadc->Instance->TR1 &= ~(ADC_TR1_HT1 | ADC_TR1_LT1);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	6a1a      	ldr	r2, [r3, #32]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f002 22f0 	and.w	r2, r2, #4026593280	@ 0xf000f000
 8003932:	621a      	str	r2, [r3, #32]

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	2200      	movs	r2, #0
 8003940:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 8003942:	4b0e      	ldr	r3, [pc, #56]	@ (800397c <HAL_ADC_DeInit+0xf4>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a0d      	ldr	r2, [pc, #52]	@ (800397c <HAL_ADC_DeInit+0xf4>)
 8003948:	f023 73fe 	bic.w	r3, r3, #33292288	@ 0x1fc0000
 800394c:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f7fd fc58 	bl	8001204 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	659a      	str	r2, [r3, #88]	@ 0x58

  __HAL_UNLOCK(hadc);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 800396e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003970:	4618      	mov	r0, r3
 8003972:	3710      	adds	r7, #16
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	833e0200 	.word	0x833e0200
 800397c:	40012708 	.word	0x40012708

08003980 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4618      	mov	r0, r3
 800398e:	f7ff fdb5 	bl	80034fc <LL_ADC_REG_IsConversionOngoing>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d132      	bne.n	80039fe <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d101      	bne.n	80039a6 <HAL_ADC_Start+0x26>
 80039a2:	2302      	movs	r3, #2
 80039a4:	e02e      	b.n	8003a04 <HAL_ADC_Start+0x84>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2201      	movs	r2, #1
 80039aa:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f000 fa80 	bl	8003eb4 <ADC_Enable>
 80039b4:	4603      	mov	r3, r0
 80039b6:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80039b8:	7bfb      	ldrb	r3, [r7, #15]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d11a      	bne.n	80039f4 <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039c2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80039c6:	f023 0301 	bic.w	r3, r3, #1
 80039ca:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	221c      	movs	r2, #28
 80039de:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4618      	mov	r0, r3
 80039ee:	f7ff fd5f 	bl	80034b0 <LL_ADC_REG_StartConversion>
 80039f2:	e006      	b.n	8003a02 <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 80039fc:	e001      	b.n	8003a02 <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80039fe:	2302      	movs	r3, #2
 8003a00:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 8003a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3710      	adds	r7, #16
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}

08003a0c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d101      	bne.n	8003a22 <HAL_ADC_Stop+0x16>
 8003a1e:	2302      	movs	r3, #2
 8003a20:	e022      	b.n	8003a68 <HAL_ADC_Stop+0x5c>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2201      	movs	r2, #1
 8003a26:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 f9fc 	bl	8003e28 <ADC_ConversionStop>
 8003a30:	4603      	mov	r3, r0
 8003a32:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003a34:	7bfb      	ldrb	r3, [r7, #15]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d111      	bne.n	8003a5e <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f000 fac0 	bl	8003fc0 <ADC_Disable>
 8003a40:	4603      	mov	r3, r0
 8003a42:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003a44:	7bfb      	ldrb	r3, [r7, #15]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d109      	bne.n	8003a5e <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a4e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a52:	f023 0301 	bic.w	r3, r3, #1
 8003a56:	f043 0201 	orr.w	r2, r3, #1
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 8003a66:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3710      	adds	r7, #16
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	695b      	ldr	r3, [r3, #20]
 8003a7e:	2b08      	cmp	r3, #8
 8003a80:	d102      	bne.n	8003a88 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8003a82:	2308      	movs	r3, #8
 8003a84:	60fb      	str	r3, [r7, #12]
 8003a86:	e010      	b.n	8003aaa <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	f003 0301 	and.w	r3, r3, #1
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d007      	beq.n	8003aa6 <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a9a:	f043 0220 	orr.w	r2, r3, #32
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e077      	b.n	8003b96 <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8003aa6:	2304      	movs	r3, #4
 8003aa8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003aaa:	f7fe fb8b 	bl	80021c4 <HAL_GetTick>
 8003aae:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003ab0:	e021      	b.n	8003af6 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ab8:	d01d      	beq.n	8003af6 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003aba:	f7fe fb83 	bl	80021c4 <HAL_GetTick>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	683a      	ldr	r2, [r7, #0]
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d302      	bcc.n	8003ad0 <HAL_ADC_PollForConversion+0x60>
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d112      	bne.n	8003af6 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	4013      	ands	r3, r2
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d10b      	bne.n	8003af6 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ae2:	f043 0204 	orr.w	r2, r3, #4
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	659a      	str	r2, [r3, #88]	@ 0x58

          __HAL_UNLOCK(hadc);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e04f      	b.n	8003b96 <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	4013      	ands	r3, r2
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d0d6      	beq.n	8003ab2 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b08:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4618      	mov	r0, r3
 8003b16:	f7ff fbd6 	bl	80032c6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d031      	beq.n	8003b84 <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	7e9b      	ldrb	r3, [r3, #26]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d12d      	bne.n	8003b84 <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0308 	and.w	r3, r3, #8
 8003b32:	2b08      	cmp	r3, #8
 8003b34:	d126      	bne.n	8003b84 <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f7ff fcde 	bl	80034fc <LL_ADC_REG_IsConversionOngoing>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d112      	bne.n	8003b6c <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	685a      	ldr	r2, [r3, #4]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f022 020c 	bic.w	r2, r2, #12
 8003b54:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b5a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b5e:	f023 0301 	bic.w	r3, r3, #1
 8003b62:	f043 0201 	orr.w	r2, r3, #1
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	659a      	str	r2, [r3, #88]	@ 0x58
 8003b6a:	e00b      	b.n	8003b84 <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b70:	f043 0220 	orr.w	r2, r3, #32
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b7c:	f043 0201 	orr.w	r2, r3, #1
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	7e1b      	ldrb	r3, [r3, #24]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d103      	bne.n	8003b94 <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	220c      	movs	r2, #12
 8003b92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b94:	2300      	movs	r3, #0
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3710      	adds	r7, #16
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}

08003b9e <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003b9e:	b480      	push	{r7}
 8003ba0:	b083      	sub	sp, #12
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	370c      	adds	r7, #12
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bc80      	pop	{r7}
 8003bb4:	4770      	bx	lr
	...

08003bb8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b088      	sub	sp, #32
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d101      	bne.n	8003be0 <HAL_ADC_ConfigChannel+0x28>
 8003bdc:	2302      	movs	r3, #2
 8003bde:	e110      	b.n	8003e02 <HAL_ADC_ConfigChannel+0x24a>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4618      	mov	r0, r3
 8003bee:	f7ff fc85 	bl	80034fc <LL_ADC_REG_IsConversionOngoing>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	f040 80f7 	bne.w	8003de8 <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	f000 80b1 	beq.w	8003d66 <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	691b      	ldr	r3, [r3, #16]
 8003c08:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003c0c:	d004      	beq.n	8003c18 <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003c12:	4a7e      	ldr	r2, [pc, #504]	@ (8003e0c <HAL_ADC_ConfigChannel+0x254>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d108      	bne.n	8003c2a <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4619      	mov	r1, r3
 8003c22:	4610      	mov	r0, r2
 8003c24:	f7ff fb82 	bl	800332c <LL_ADC_REG_SetSequencerChAdd>
 8003c28:	e041      	b.n	8003cae <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	f003 031f 	and.w	r3, r3, #31
 8003c36:	210f      	movs	r1, #15
 8003c38:	fa01 f303 	lsl.w	r3, r1, r3
 8003c3c:	43db      	mvns	r3, r3
 8003c3e:	401a      	ands	r2, r3
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d105      	bne.n	8003c58 <HAL_ADC_ConfigChannel+0xa0>
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	0e9b      	lsrs	r3, r3, #26
 8003c52:	f003 031f 	and.w	r3, r3, #31
 8003c56:	e011      	b.n	8003c7c <HAL_ADC_ConfigChannel+0xc4>
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	fa93 f3a3 	rbit	r3, r3
 8003c64:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d101      	bne.n	8003c74 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 8003c70:	2320      	movs	r3, #32
 8003c72:	e003      	b.n	8003c7c <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	fab3 f383 	clz	r3, r3
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	6839      	ldr	r1, [r7, #0]
 8003c7e:	6849      	ldr	r1, [r1, #4]
 8003c80:	f001 011f 	and.w	r1, r1, #31
 8003c84:	408b      	lsls	r3, r1
 8003c86:	431a      	orrs	r2, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	089b      	lsrs	r3, r3, #2
 8003c92:	1c5a      	adds	r2, r3, #1
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	69db      	ldr	r3, [r3, #28]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d808      	bhi.n	8003cae <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6818      	ldr	r0, [r3, #0]
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	6859      	ldr	r1, [r3, #4]
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	461a      	mov	r2, r3
 8003caa:	f7ff fb1e 	bl	80032ea <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6818      	ldr	r0, [r3, #0]
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	6819      	ldr	r1, [r3, #0]
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	461a      	mov	r2, r3
 8003cbc:	f7ff fb5b 	bl	8003376 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	f280 8097 	bge.w	8003df8 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003cca:	4851      	ldr	r0, [pc, #324]	@ (8003e10 <HAL_ADC_ConfigChannel+0x258>)
 8003ccc:	f7ff fab8 	bl	8003240 <LL_ADC_GetCommonPathInternalCh>
 8003cd0:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a4f      	ldr	r2, [pc, #316]	@ (8003e14 <HAL_ADC_ConfigChannel+0x25c>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d120      	bne.n	8003d1e <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d11b      	bne.n	8003d1e <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003cec:	4619      	mov	r1, r3
 8003cee:	4848      	ldr	r0, [pc, #288]	@ (8003e10 <HAL_ADC_ConfigChannel+0x258>)
 8003cf0:	f7ff fa94 	bl	800321c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003cf4:	4b48      	ldr	r3, [pc, #288]	@ (8003e18 <HAL_ADC_ConfigChannel+0x260>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	099b      	lsrs	r3, r3, #6
 8003cfa:	4a48      	ldr	r2, [pc, #288]	@ (8003e1c <HAL_ADC_ConfigChannel+0x264>)
 8003cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8003d00:	099b      	lsrs	r3, r3, #6
 8003d02:	1c5a      	adds	r2, r3, #1
 8003d04:	4613      	mov	r3, r2
 8003d06:	005b      	lsls	r3, r3, #1
 8003d08:	4413      	add	r3, r2
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003d0e:	e002      	b.n	8003d16 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	3b01      	subs	r3, #1
 8003d14:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d1f9      	bne.n	8003d10 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003d1c:	e06c      	b.n	8003df8 <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a3f      	ldr	r2, [pc, #252]	@ (8003e20 <HAL_ADC_ConfigChannel+0x268>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d10c      	bne.n	8003d42 <HAL_ADC_ConfigChannel+0x18a>
 8003d28:	69bb      	ldr	r3, [r7, #24]
 8003d2a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d107      	bne.n	8003d42 <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003d38:	4619      	mov	r1, r3
 8003d3a:	4835      	ldr	r0, [pc, #212]	@ (8003e10 <HAL_ADC_ConfigChannel+0x258>)
 8003d3c:	f7ff fa6e 	bl	800321c <LL_ADC_SetCommonPathInternalCh>
 8003d40:	e05a      	b.n	8003df8 <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a37      	ldr	r2, [pc, #220]	@ (8003e24 <HAL_ADC_ConfigChannel+0x26c>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d155      	bne.n	8003df8 <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d150      	bne.n	8003df8 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003d56:	69bb      	ldr	r3, [r7, #24]
 8003d58:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003d5c:	4619      	mov	r1, r3
 8003d5e:	482c      	ldr	r0, [pc, #176]	@ (8003e10 <HAL_ADC_ConfigChannel+0x258>)
 8003d60:	f7ff fa5c 	bl	800321c <LL_ADC_SetCommonPathInternalCh>
 8003d64:	e048      	b.n	8003df8 <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003d6e:	d004      	beq.n	8003d7a <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003d74:	4a25      	ldr	r2, [pc, #148]	@ (8003e0c <HAL_ADC_ConfigChannel+0x254>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d107      	bne.n	8003d8a <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4619      	mov	r1, r3
 8003d84:	4610      	mov	r0, r2
 8003d86:	f7ff fae3 	bl	8003350 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	da32      	bge.n	8003df8 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003d92:	481f      	ldr	r0, [pc, #124]	@ (8003e10 <HAL_ADC_ConfigChannel+0x258>)
 8003d94:	f7ff fa54 	bl	8003240 <LL_ADC_GetCommonPathInternalCh>
 8003d98:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a1d      	ldr	r2, [pc, #116]	@ (8003e14 <HAL_ADC_ConfigChannel+0x25c>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d107      	bne.n	8003db4 <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003daa:	4619      	mov	r1, r3
 8003dac:	4818      	ldr	r0, [pc, #96]	@ (8003e10 <HAL_ADC_ConfigChannel+0x258>)
 8003dae:	f7ff fa35 	bl	800321c <LL_ADC_SetCommonPathInternalCh>
 8003db2:	e021      	b.n	8003df8 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a19      	ldr	r2, [pc, #100]	@ (8003e20 <HAL_ADC_ConfigChannel+0x268>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d107      	bne.n	8003dce <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	4812      	ldr	r0, [pc, #72]	@ (8003e10 <HAL_ADC_ConfigChannel+0x258>)
 8003dc8:	f7ff fa28 	bl	800321c <LL_ADC_SetCommonPathInternalCh>
 8003dcc:	e014      	b.n	8003df8 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a14      	ldr	r2, [pc, #80]	@ (8003e24 <HAL_ADC_ConfigChannel+0x26c>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d10f      	bne.n	8003df8 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8003dde:	4619      	mov	r1, r3
 8003de0:	480b      	ldr	r0, [pc, #44]	@ (8003e10 <HAL_ADC_ConfigChannel+0x258>)
 8003de2:	f7ff fa1b 	bl	800321c <LL_ADC_SetCommonPathInternalCh>
 8003de6:	e007      	b.n	8003df8 <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dec:	f043 0220 	orr.w	r2, r3, #32
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 8003e00:	7ffb      	ldrb	r3, [r7, #31]
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3720      	adds	r7, #32
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	80000004 	.word	0x80000004
 8003e10:	40012708 	.word	0x40012708
 8003e14:	b0001000 	.word	0xb0001000
 8003e18:	20000000 	.word	0x20000000
 8003e1c:	053e2d63 	.word	0x053e2d63
 8003e20:	b8004000 	.word	0xb8004000
 8003e24:	b4002000 	.word	0xb4002000

08003e28 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4618      	mov	r0, r3
 8003e36:	f7ff fb61 	bl	80034fc <LL_ADC_REG_IsConversionOngoing>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d033      	beq.n	8003ea8 <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4618      	mov	r0, r3
 8003e46:	f7ff fb21 	bl	800348c <LL_ADC_IsDisableOngoing>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d104      	bne.n	8003e5a <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4618      	mov	r0, r3
 8003e56:	f7ff fb3e 	bl	80034d6 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003e5a:	f7fe f9b3 	bl	80021c4 <HAL_GetTick>
 8003e5e:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003e60:	e01b      	b.n	8003e9a <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003e62:	f7fe f9af 	bl	80021c4 <HAL_GetTick>
 8003e66:	4602      	mov	r2, r0
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	d914      	bls.n	8003e9a <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	f003 0304 	and.w	r3, r3, #4
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00d      	beq.n	8003e9a <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e82:	f043 0210 	orr.w	r2, r3, #16
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e8e:	f043 0201 	orr.w	r2, r3, #1
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e007      	b.n	8003eaa <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	f003 0304 	and.w	r3, r3, #4
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d1dc      	bne.n	8003e62 <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3710      	adds	r7, #16
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
	...

08003eb4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f7ff facf 	bl	8003468 <LL_ADC_IsEnabled>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d169      	bne.n	8003fa4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	689a      	ldr	r2, [r3, #8]
 8003ed6:	4b36      	ldr	r3, [pc, #216]	@ (8003fb0 <ADC_Enable+0xfc>)
 8003ed8:	4013      	ands	r3, r2
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d00d      	beq.n	8003efa <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ee2:	f043 0210 	orr.w	r2, r3, #16
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eee:	f043 0201 	orr.w	r2, r3, #1
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e055      	b.n	8003fa6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4618      	mov	r0, r3
 8003f00:	f7ff fa8c 	bl	800341c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003f04:	482b      	ldr	r0, [pc, #172]	@ (8003fb4 <ADC_Enable+0x100>)
 8003f06:	f7ff f99b 	bl	8003240 <LL_ADC_GetCommonPathInternalCh>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d00f      	beq.n	8003f34 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003f14:	4b28      	ldr	r3, [pc, #160]	@ (8003fb8 <ADC_Enable+0x104>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	099b      	lsrs	r3, r3, #6
 8003f1a:	4a28      	ldr	r2, [pc, #160]	@ (8003fbc <ADC_Enable+0x108>)
 8003f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f20:	099b      	lsrs	r3, r3, #6
 8003f22:	3301      	adds	r3, #1
 8003f24:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003f26:	e002      	b.n	8003f2e <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	3b01      	subs	r3, #1
 8003f2c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d1f9      	bne.n	8003f28 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	7e5b      	ldrb	r3, [r3, #25]
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d033      	beq.n	8003fa4 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003f3c:	f7fe f942 	bl	80021c4 <HAL_GetTick>
 8003f40:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003f42:	e028      	b.n	8003f96 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f7ff fa8d 	bl	8003468 <LL_ADC_IsEnabled>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d104      	bne.n	8003f5e <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f7ff fa5f 	bl	800341c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003f5e:	f7fe f931 	bl	80021c4 <HAL_GetTick>
 8003f62:	4602      	mov	r2, r0
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d914      	bls.n	8003f96 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0301 	and.w	r3, r3, #1
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d00d      	beq.n	8003f96 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f7e:	f043 0210 	orr.w	r2, r3, #16
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f8a:	f043 0201 	orr.w	r2, r3, #1
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e007      	b.n	8003fa6 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0301 	and.w	r3, r3, #1
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d1cf      	bne.n	8003f44 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003fa4:	2300      	movs	r3, #0
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3710      	adds	r7, #16
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	80000017 	.word	0x80000017
 8003fb4:	40012708 	.word	0x40012708
 8003fb8:	20000000 	.word	0x20000000
 8003fbc:	053e2d63 	.word	0x053e2d63

08003fc0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f7ff fa5d 	bl	800348c <LL_ADC_IsDisableOngoing>
 8003fd2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f7ff fa45 	bl	8003468 <LL_ADC_IsEnabled>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d047      	beq.n	8004074 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d144      	bne.n	8004074 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	f003 0305 	and.w	r3, r3, #5
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d10c      	bne.n	8004012 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f7ff fa20 	bl	8003442 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2203      	movs	r2, #3
 8004008:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800400a:	f7fe f8db 	bl	80021c4 <HAL_GetTick>
 800400e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004010:	e029      	b.n	8004066 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004016:	f043 0210 	orr.w	r2, r3, #16
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004022:	f043 0201 	orr.w	r2, r3, #1
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e023      	b.n	8004076 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800402e:	f7fe f8c9 	bl	80021c4 <HAL_GetTick>
 8004032:	4602      	mov	r2, r0
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	2b02      	cmp	r3, #2
 800403a:	d914      	bls.n	8004066 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	f003 0301 	and.w	r3, r3, #1
 8004046:	2b00      	cmp	r3, #0
 8004048:	d00d      	beq.n	8004066 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800404e:	f043 0210 	orr.w	r2, r3, #16
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800405a:	f043 0201 	orr.w	r2, r3, #1
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e007      	b.n	8004076 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	f003 0301 	and.w	r3, r3, #1
 8004070:	2b00      	cmp	r3, #0
 8004072:	d1dc      	bne.n	800402e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004074:	2300      	movs	r3, #0
}
 8004076:	4618      	mov	r0, r3
 8004078:	3710      	adds	r7, #16
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}

0800407e <LL_ADC_SetCalibrationFactor>:
{
 800407e:	b480      	push	{r7}
 8004080:	b083      	sub	sp, #12
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
 8004086:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800408e:	f023 027f 	bic.w	r2, r3, #127	@ 0x7f
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	431a      	orrs	r2, r3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
}
 800409c:	bf00      	nop
 800409e:	370c      	adds	r7, #12
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bc80      	pop	{r7}
 80040a4:	4770      	bx	lr

080040a6 <LL_ADC_GetCalibrationFactor>:
{
 80040a6:	b480      	push	{r7}
 80040a8:	b083      	sub	sp, #12
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80040b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	370c      	adds	r7, #12
 80040bc:	46bd      	mov	sp, r7
 80040be:	bc80      	pop	{r7}
 80040c0:	4770      	bx	lr

080040c2 <LL_ADC_Enable>:
{
 80040c2:	b480      	push	{r7}
 80040c4:	b083      	sub	sp, #12
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80040d2:	f023 0317 	bic.w	r3, r3, #23
 80040d6:	f043 0201 	orr.w	r2, r3, #1
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	609a      	str	r2, [r3, #8]
}
 80040de:	bf00      	nop
 80040e0:	370c      	adds	r7, #12
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bc80      	pop	{r7}
 80040e6:	4770      	bx	lr

080040e8 <LL_ADC_Disable>:
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80040f8:	f023 0317 	bic.w	r3, r3, #23
 80040fc:	f043 0202 	orr.w	r2, r3, #2
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	609a      	str	r2, [r3, #8]
}
 8004104:	bf00      	nop
 8004106:	370c      	adds	r7, #12
 8004108:	46bd      	mov	sp, r7
 800410a:	bc80      	pop	{r7}
 800410c:	4770      	bx	lr

0800410e <LL_ADC_IsEnabled>:
{
 800410e:	b480      	push	{r7}
 8004110:	b083      	sub	sp, #12
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	f003 0301 	and.w	r3, r3, #1
 800411e:	2b01      	cmp	r3, #1
 8004120:	d101      	bne.n	8004126 <LL_ADC_IsEnabled+0x18>
 8004122:	2301      	movs	r3, #1
 8004124:	e000      	b.n	8004128 <LL_ADC_IsEnabled+0x1a>
 8004126:	2300      	movs	r3, #0
}
 8004128:	4618      	mov	r0, r3
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	bc80      	pop	{r7}
 8004130:	4770      	bx	lr

08004132 <LL_ADC_StartCalibration>:
{
 8004132:	b480      	push	{r7}
 8004134:	b083      	sub	sp, #12
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004142:	f023 0317 	bic.w	r3, r3, #23
 8004146:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	609a      	str	r2, [r3, #8]
}
 800414e:	bf00      	nop
 8004150:	370c      	adds	r7, #12
 8004152:	46bd      	mov	sp, r7
 8004154:	bc80      	pop	{r7}
 8004156:	4770      	bx	lr

08004158 <LL_ADC_IsCalibrationOnGoing>:
{
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004168:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800416c:	d101      	bne.n	8004172 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800416e:	2301      	movs	r3, #1
 8004170:	e000      	b.n	8004174 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004172:	2300      	movs	r3, #0
}
 8004174:	4618      	mov	r0, r3
 8004176:	370c      	adds	r7, #12
 8004178:	46bd      	mov	sp, r7
 800417a:	bc80      	pop	{r7}
 800417c:	4770      	bx	lr

0800417e <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 800417e:	b580      	push	{r7, lr}
 8004180:	b088      	sub	sp, #32
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004186:	2300      	movs	r3, #0
 8004188:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 800418a:	2300      	movs	r3, #0
 800418c:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004194:	2b01      	cmp	r3, #1
 8004196:	d101      	bne.n	800419c <HAL_ADCEx_Calibration_Start+0x1e>
 8004198:	2302      	movs	r3, #2
 800419a:	e0b9      	b.n	8004310 <HAL_ADCEx_Calibration_Start+0x192>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f7ff ff0b 	bl	8003fc0 <ADC_Disable>
 80041aa:	4603      	mov	r3, r0
 80041ac:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4618      	mov	r0, r3
 80041b4:	f7ff ffab 	bl	800410e <LL_ADC_IsEnabled>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	f040 809d 	bne.w	80042fa <HAL_ADCEx_Calibration_Start+0x17c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041c4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80041c8:	f043 0202 	orr.w	r2, r3, #2
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	68da      	ldr	r2, [r3, #12]
 80041d6:	f248 0303 	movw	r3, #32771	@ 0x8003
 80041da:	4013      	ands	r3, r2
 80041dc:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	6812      	ldr	r2, [r2, #0]
 80041e8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80041ec:	f023 0303 	bic.w	r3, r3, #3
 80041f0:	60d3      	str	r3, [r2, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80041f2:	2300      	movs	r3, #0
 80041f4:	61fb      	str	r3, [r7, #28]
 80041f6:	e02e      	b.n	8004256 <HAL_ADCEx_Calibration_Start+0xd8>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4618      	mov	r0, r3
 80041fe:	f7ff ff98 	bl	8004132 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004202:	e014      	b.n	800422e <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	3301      	adds	r3, #1
 8004208:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	f5b3 3f2e 	cmp.w	r3, #178176	@ 0x2b800
 8004210:	d30d      	bcc.n	800422e <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004216:	f023 0312 	bic.w	r3, r3, #18
 800421a:	f043 0210 	orr.w	r2, r3, #16
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e070      	b.n	8004310 <HAL_ADCEx_Calibration_Start+0x192>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4618      	mov	r0, r3
 8004234:	f7ff ff90 	bl	8004158 <LL_ADC_IsCalibrationOnGoing>
 8004238:	4603      	mov	r3, r0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d1e2      	bne.n	8004204 <HAL_ADCEx_Calibration_Start+0x86>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4618      	mov	r0, r3
 8004244:	f7ff ff2f 	bl	80040a6 <LL_ADC_GetCalibrationFactor>
 8004248:	4602      	mov	r2, r0
 800424a:	69bb      	ldr	r3, [r7, #24]
 800424c:	4413      	add	r3, r2
 800424e:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	3301      	adds	r3, #1
 8004254:	61fb      	str	r3, [r7, #28]
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	2b07      	cmp	r3, #7
 800425a:	d9cd      	bls.n	80041f8 <HAL_ADCEx_Calibration_Start+0x7a>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 800425c:	69ba      	ldr	r2, [r7, #24]
 800425e:	69fb      	ldr	r3, [r7, #28]
 8004260:	fbb2 f3f3 	udiv	r3, r2, r3
 8004264:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4618      	mov	r0, r3
 800426c:	f7ff ff29 	bl	80040c2 <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	69b9      	ldr	r1, [r7, #24]
 8004276:	4618      	mov	r0, r3
 8004278:	f7ff ff01 	bl	800407e <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4618      	mov	r0, r3
 8004282:	f7ff ff31 	bl	80040e8 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004286:	f7fd ff9d 	bl	80021c4 <HAL_GetTick>
 800428a:	60f8      	str	r0, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800428c:	e01c      	b.n	80042c8 <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800428e:	f7fd ff99 	bl	80021c4 <HAL_GetTick>
 8004292:	4602      	mov	r2, r0
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	2b02      	cmp	r3, #2
 800429a:	d915      	bls.n	80042c8 <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4618      	mov	r0, r3
 80042a2:	f7ff ff34 	bl	800410e <LL_ADC_IsEnabled>
 80042a6:	4603      	mov	r3, r0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d00d      	beq.n	80042c8 <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042b0:	f043 0210 	orr.w	r2, r3, #16
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042bc:	f043 0201 	orr.w	r2, r3, #1
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e023      	b.n	8004310 <HAL_ADCEx_Calibration_Start+0x192>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4618      	mov	r0, r3
 80042ce:	f7ff ff1e 	bl	800410e <LL_ADC_IsEnabled>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d1da      	bne.n	800428e <HAL_ADCEx_Calibration_Start+0x110>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	68d9      	ldr	r1, [r3, #12]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	693a      	ldr	r2, [r7, #16]
 80042e4:	430a      	orrs	r2, r1
 80042e6:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042ec:	f023 0303 	bic.w	r3, r3, #3
 80042f0:	f043 0201 	orr.w	r2, r3, #1
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	659a      	str	r2, [r3, #88]	@ 0x58
 80042f8:	e005      	b.n	8004306 <HAL_ADCEx_Calibration_Start+0x188>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042fe:	f043 0210 	orr.w	r2, r3, #16
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 800430e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004310:	4618      	mov	r0, r3
 8004312:	3720      	adds	r7, #32
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}

08004318 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004318:	b480      	push	{r7}
 800431a:	b085      	sub	sp, #20
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f003 0307 	and.w	r3, r3, #7
 8004326:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004328:	4b0c      	ldr	r3, [pc, #48]	@ (800435c <__NVIC_SetPriorityGrouping+0x44>)
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800432e:	68ba      	ldr	r2, [r7, #8]
 8004330:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004334:	4013      	ands	r3, r2
 8004336:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004340:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004344:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004348:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800434a:	4a04      	ldr	r2, [pc, #16]	@ (800435c <__NVIC_SetPriorityGrouping+0x44>)
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	60d3      	str	r3, [r2, #12]
}
 8004350:	bf00      	nop
 8004352:	3714      	adds	r7, #20
 8004354:	46bd      	mov	sp, r7
 8004356:	bc80      	pop	{r7}
 8004358:	4770      	bx	lr
 800435a:	bf00      	nop
 800435c:	e000ed00 	.word	0xe000ed00

08004360 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004360:	b480      	push	{r7}
 8004362:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004364:	4b04      	ldr	r3, [pc, #16]	@ (8004378 <__NVIC_GetPriorityGrouping+0x18>)
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	0a1b      	lsrs	r3, r3, #8
 800436a:	f003 0307 	and.w	r3, r3, #7
}
 800436e:	4618      	mov	r0, r3
 8004370:	46bd      	mov	sp, r7
 8004372:	bc80      	pop	{r7}
 8004374:	4770      	bx	lr
 8004376:	bf00      	nop
 8004378:	e000ed00 	.word	0xe000ed00

0800437c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800437c:	b480      	push	{r7}
 800437e:	b083      	sub	sp, #12
 8004380:	af00      	add	r7, sp, #0
 8004382:	4603      	mov	r3, r0
 8004384:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800438a:	2b00      	cmp	r3, #0
 800438c:	db0b      	blt.n	80043a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800438e:	79fb      	ldrb	r3, [r7, #7]
 8004390:	f003 021f 	and.w	r2, r3, #31
 8004394:	4906      	ldr	r1, [pc, #24]	@ (80043b0 <__NVIC_EnableIRQ+0x34>)
 8004396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800439a:	095b      	lsrs	r3, r3, #5
 800439c:	2001      	movs	r0, #1
 800439e:	fa00 f202 	lsl.w	r2, r0, r2
 80043a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80043a6:	bf00      	nop
 80043a8:	370c      	adds	r7, #12
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bc80      	pop	{r7}
 80043ae:	4770      	bx	lr
 80043b0:	e000e100 	.word	0xe000e100

080043b4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	4603      	mov	r3, r0
 80043bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	db12      	blt.n	80043ec <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043c6:	79fb      	ldrb	r3, [r7, #7]
 80043c8:	f003 021f 	and.w	r2, r3, #31
 80043cc:	490a      	ldr	r1, [pc, #40]	@ (80043f8 <__NVIC_DisableIRQ+0x44>)
 80043ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043d2:	095b      	lsrs	r3, r3, #5
 80043d4:	2001      	movs	r0, #1
 80043d6:	fa00 f202 	lsl.w	r2, r0, r2
 80043da:	3320      	adds	r3, #32
 80043dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80043e0:	f3bf 8f4f 	dsb	sy
}
 80043e4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80043e6:	f3bf 8f6f 	isb	sy
}
 80043ea:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80043ec:	bf00      	nop
 80043ee:	370c      	adds	r7, #12
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bc80      	pop	{r7}
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	e000e100 	.word	0xe000e100

080043fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
 8004402:	4603      	mov	r3, r0
 8004404:	6039      	str	r1, [r7, #0]
 8004406:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004408:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800440c:	2b00      	cmp	r3, #0
 800440e:	db0a      	blt.n	8004426 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	b2da      	uxtb	r2, r3
 8004414:	490c      	ldr	r1, [pc, #48]	@ (8004448 <__NVIC_SetPriority+0x4c>)
 8004416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800441a:	0112      	lsls	r2, r2, #4
 800441c:	b2d2      	uxtb	r2, r2
 800441e:	440b      	add	r3, r1
 8004420:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004424:	e00a      	b.n	800443c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	b2da      	uxtb	r2, r3
 800442a:	4908      	ldr	r1, [pc, #32]	@ (800444c <__NVIC_SetPriority+0x50>)
 800442c:	79fb      	ldrb	r3, [r7, #7]
 800442e:	f003 030f 	and.w	r3, r3, #15
 8004432:	3b04      	subs	r3, #4
 8004434:	0112      	lsls	r2, r2, #4
 8004436:	b2d2      	uxtb	r2, r2
 8004438:	440b      	add	r3, r1
 800443a:	761a      	strb	r2, [r3, #24]
}
 800443c:	bf00      	nop
 800443e:	370c      	adds	r7, #12
 8004440:	46bd      	mov	sp, r7
 8004442:	bc80      	pop	{r7}
 8004444:	4770      	bx	lr
 8004446:	bf00      	nop
 8004448:	e000e100 	.word	0xe000e100
 800444c:	e000ed00 	.word	0xe000ed00

08004450 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004450:	b480      	push	{r7}
 8004452:	b089      	sub	sp, #36	@ 0x24
 8004454:	af00      	add	r7, sp, #0
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	60b9      	str	r1, [r7, #8]
 800445a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f003 0307 	and.w	r3, r3, #7
 8004462:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	f1c3 0307 	rsb	r3, r3, #7
 800446a:	2b04      	cmp	r3, #4
 800446c:	bf28      	it	cs
 800446e:	2304      	movcs	r3, #4
 8004470:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	3304      	adds	r3, #4
 8004476:	2b06      	cmp	r3, #6
 8004478:	d902      	bls.n	8004480 <NVIC_EncodePriority+0x30>
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	3b03      	subs	r3, #3
 800447e:	e000      	b.n	8004482 <NVIC_EncodePriority+0x32>
 8004480:	2300      	movs	r3, #0
 8004482:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004484:	f04f 32ff 	mov.w	r2, #4294967295
 8004488:	69bb      	ldr	r3, [r7, #24]
 800448a:	fa02 f303 	lsl.w	r3, r2, r3
 800448e:	43da      	mvns	r2, r3
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	401a      	ands	r2, r3
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004498:	f04f 31ff 	mov.w	r1, #4294967295
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	fa01 f303 	lsl.w	r3, r1, r3
 80044a2:	43d9      	mvns	r1, r3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044a8:	4313      	orrs	r3, r2
         );
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3724      	adds	r7, #36	@ 0x24
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bc80      	pop	{r7}
 80044b2:	4770      	bx	lr

080044b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b082      	sub	sp, #8
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f7ff ff2b 	bl	8004318 <__NVIC_SetPriorityGrouping>
}
 80044c2:	bf00      	nop
 80044c4:	3708      	adds	r7, #8
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}

080044ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044ca:	b580      	push	{r7, lr}
 80044cc:	b086      	sub	sp, #24
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	4603      	mov	r3, r0
 80044d2:	60b9      	str	r1, [r7, #8]
 80044d4:	607a      	str	r2, [r7, #4]
 80044d6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80044d8:	f7ff ff42 	bl	8004360 <__NVIC_GetPriorityGrouping>
 80044dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	68b9      	ldr	r1, [r7, #8]
 80044e2:	6978      	ldr	r0, [r7, #20]
 80044e4:	f7ff ffb4 	bl	8004450 <NVIC_EncodePriority>
 80044e8:	4602      	mov	r2, r0
 80044ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044ee:	4611      	mov	r1, r2
 80044f0:	4618      	mov	r0, r3
 80044f2:	f7ff ff83 	bl	80043fc <__NVIC_SetPriority>
}
 80044f6:	bf00      	nop
 80044f8:	3718      	adds	r7, #24
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}

080044fe <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044fe:	b580      	push	{r7, lr}
 8004500:	b082      	sub	sp, #8
 8004502:	af00      	add	r7, sp, #0
 8004504:	4603      	mov	r3, r0
 8004506:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004508:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800450c:	4618      	mov	r0, r3
 800450e:	f7ff ff35 	bl	800437c <__NVIC_EnableIRQ>
}
 8004512:	bf00      	nop
 8004514:	3708      	adds	r7, #8
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}

0800451a <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800451a:	b580      	push	{r7, lr}
 800451c:	b082      	sub	sp, #8
 800451e:	af00      	add	r7, sp, #0
 8004520:	4603      	mov	r3, r0
 8004522:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004528:	4618      	mov	r0, r3
 800452a:	f7ff ff43 	bl	80043b4 <__NVIC_DisableIRQ>
}
 800452e:	bf00      	nop
 8004530:	3708      	adds	r7, #8
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
	...

08004538 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b082      	sub	sp, #8
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d101      	bne.n	800454a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e08e      	b.n	8004668 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	461a      	mov	r2, r3
 8004550:	4b47      	ldr	r3, [pc, #284]	@ (8004670 <HAL_DMA_Init+0x138>)
 8004552:	429a      	cmp	r2, r3
 8004554:	d80f      	bhi.n	8004576 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	461a      	mov	r2, r3
 800455c:	4b45      	ldr	r3, [pc, #276]	@ (8004674 <HAL_DMA_Init+0x13c>)
 800455e:	4413      	add	r3, r2
 8004560:	4a45      	ldr	r2, [pc, #276]	@ (8004678 <HAL_DMA_Init+0x140>)
 8004562:	fba2 2303 	umull	r2, r3, r2, r3
 8004566:	091b      	lsrs	r3, r3, #4
 8004568:	009a      	lsls	r2, r3, #2
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4a42      	ldr	r2, [pc, #264]	@ (800467c <HAL_DMA_Init+0x144>)
 8004572:	641a      	str	r2, [r3, #64]	@ 0x40
 8004574:	e00e      	b.n	8004594 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	461a      	mov	r2, r3
 800457c:	4b40      	ldr	r3, [pc, #256]	@ (8004680 <HAL_DMA_Init+0x148>)
 800457e:	4413      	add	r3, r2
 8004580:	4a3d      	ldr	r2, [pc, #244]	@ (8004678 <HAL_DMA_Init+0x140>)
 8004582:	fba2 2303 	umull	r2, r3, r2, r3
 8004586:	091b      	lsrs	r3, r3, #4
 8004588:	009a      	lsls	r2, r3, #2
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a3c      	ldr	r2, [pc, #240]	@ (8004684 <HAL_DMA_Init+0x14c>)
 8004592:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2202      	movs	r2, #2
 8004598:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	6812      	ldr	r2, [r2, #0]
 80045a6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80045aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045ae:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	6819      	ldr	r1, [r3, #0]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	689a      	ldr	r2, [r3, #8]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	431a      	orrs	r2, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	691b      	ldr	r3, [r3, #16]
 80045c4:	431a      	orrs	r2, r3
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	695b      	ldr	r3, [r3, #20]
 80045ca:	431a      	orrs	r2, r3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	699b      	ldr	r3, [r3, #24]
 80045d0:	431a      	orrs	r2, r3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	69db      	ldr	r3, [r3, #28]
 80045d6:	431a      	orrs	r2, r3
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6a1b      	ldr	r3, [r3, #32]
 80045dc:	431a      	orrs	r2, r3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	430a      	orrs	r2, r1
 80045e4:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f000 fb24 	bl	8004c34 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80045f4:	d102      	bne.n	80045fc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	685a      	ldr	r2, [r3, #4]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004604:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004608:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004612:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d010      	beq.n	800463e <HAL_DMA_Init+0x106>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	2b04      	cmp	r3, #4
 8004622:	d80c      	bhi.n	800463e <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f000 fb4d 	bl	8004cc4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800462e:	2200      	movs	r2, #0
 8004630:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800463a:	605a      	str	r2, [r3, #4]
 800463c:	e008      	b.n	8004650 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2200      	movs	r2, #0
 800464e:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2201      	movs	r2, #1
 800465a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004666:	2300      	movs	r3, #0
}
 8004668:	4618      	mov	r0, r3
 800466a:	3708      	adds	r7, #8
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}
 8004670:	40020407 	.word	0x40020407
 8004674:	bffdfff8 	.word	0xbffdfff8
 8004678:	cccccccd 	.word	0xcccccccd
 800467c:	40020000 	.word	0x40020000
 8004680:	bffdfbf8 	.word	0xbffdfbf8
 8004684:	40020400 	.word	0x40020400

08004688 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b082      	sub	sp, #8
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d101      	bne.n	800469a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e07b      	b.n	8004792 <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f022 0201 	bic.w	r2, r2, #1
 80046a8:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	461a      	mov	r2, r3
 80046b0:	4b3a      	ldr	r3, [pc, #232]	@ (800479c <HAL_DMA_DeInit+0x114>)
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d80f      	bhi.n	80046d6 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	461a      	mov	r2, r3
 80046bc:	4b38      	ldr	r3, [pc, #224]	@ (80047a0 <HAL_DMA_DeInit+0x118>)
 80046be:	4413      	add	r3, r2
 80046c0:	4a38      	ldr	r2, [pc, #224]	@ (80047a4 <HAL_DMA_DeInit+0x11c>)
 80046c2:	fba2 2303 	umull	r2, r3, r2, r3
 80046c6:	091b      	lsrs	r3, r3, #4
 80046c8:	009a      	lsls	r2, r3, #2
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4a35      	ldr	r2, [pc, #212]	@ (80047a8 <HAL_DMA_DeInit+0x120>)
 80046d2:	641a      	str	r2, [r3, #64]	@ 0x40
 80046d4:	e00e      	b.n	80046f4 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	461a      	mov	r2, r3
 80046dc:	4b33      	ldr	r3, [pc, #204]	@ (80047ac <HAL_DMA_DeInit+0x124>)
 80046de:	4413      	add	r3, r2
 80046e0:	4a30      	ldr	r2, [pc, #192]	@ (80047a4 <HAL_DMA_DeInit+0x11c>)
 80046e2:	fba2 2303 	umull	r2, r3, r2, r3
 80046e6:	091b      	lsrs	r3, r3, #4
 80046e8:	009a      	lsls	r2, r3, #2
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a2f      	ldr	r2, [pc, #188]	@ (80047b0 <HAL_DMA_DeInit+0x128>)
 80046f2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	2200      	movs	r2, #0
 80046fa:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004700:	f003 021c 	and.w	r2, r3, #28
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004708:	2101      	movs	r1, #1
 800470a:	fa01 f202 	lsl.w	r2, r1, r2
 800470e:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f000 fa8f 	bl	8004c34 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800471a:	2200      	movs	r2, #0
 800471c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004726:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d00f      	beq.n	8004750 <HAL_DMA_DeInit+0xc8>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	2b04      	cmp	r3, #4
 8004736:	d80b      	bhi.n	8004750 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f000 fac3 	bl	8004cc4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004742:	2200      	movs	r2, #0
 8004744:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800474e:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004790:	2300      	movs	r3, #0
}
 8004792:	4618      	mov	r0, r3
 8004794:	3708      	adds	r7, #8
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop
 800479c:	40020407 	.word	0x40020407
 80047a0:	bffdfff8 	.word	0xbffdfff8
 80047a4:	cccccccd 	.word	0xcccccccd
 80047a8:	40020000 	.word	0x40020000
 80047ac:	bffdfbf8 	.word	0xbffdfbf8
 80047b0:	40020400 	.word	0x40020400

080047b4 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b086      	sub	sp, #24
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	60b9      	str	r1, [r7, #8]
 80047be:	607a      	str	r2, [r7, #4]
 80047c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047c2:	2300      	movs	r3, #0
 80047c4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d101      	bne.n	80047d4 <HAL_DMA_Start_IT+0x20>
 80047d0:	2302      	movs	r3, #2
 80047d2:	e069      	b.n	80048a8 <HAL_DMA_Start_IT+0xf4>
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d155      	bne.n	8004894 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2202      	movs	r2, #2
 80047ec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2200      	movs	r2, #0
 80047f4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f022 0201 	bic.w	r2, r2, #1
 8004804:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	68b9      	ldr	r1, [r7, #8]
 800480c:	68f8      	ldr	r0, [r7, #12]
 800480e:	f000 f9d3 	bl	8004bb8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004816:	2b00      	cmp	r3, #0
 8004818:	d008      	beq.n	800482c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f042 020e 	orr.w	r2, r2, #14
 8004828:	601a      	str	r2, [r3, #0]
 800482a:	e00f      	b.n	800484c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f022 0204 	bic.w	r2, r2, #4
 800483a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f042 020a 	orr.w	r2, r2, #10
 800484a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004856:	2b00      	cmp	r3, #0
 8004858:	d007      	beq.n	800486a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004864:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004868:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800486e:	2b00      	cmp	r3, #0
 8004870:	d007      	beq.n	8004882 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800487c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004880:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f042 0201 	orr.w	r2, r2, #1
 8004890:	601a      	str	r2, [r3, #0]
 8004892:	e008      	b.n	80048a6 <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2280      	movs	r2, #128	@ 0x80
 8004898:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2200      	movs	r2, #0
 800489e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Return error status */
    status = HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80048a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3718      	adds	r7, #24
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}

080048b0 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d101      	bne.n	80048c2 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e04f      	b.n	8004962 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	2b02      	cmp	r3, #2
 80048cc:	d008      	beq.n	80048e0 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2204      	movs	r2, #4
 80048d2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	e040      	b.n	8004962 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f022 020e 	bic.w	r2, r2, #14
 80048ee:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048fa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80048fe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f022 0201 	bic.w	r2, r2, #1
 800490e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004914:	f003 021c 	and.w	r2, r3, #28
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800491c:	2101      	movs	r1, #1
 800491e:	fa01 f202 	lsl.w	r2, r1, r2
 8004922:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800492c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004932:	2b00      	cmp	r3, #0
 8004934:	d00c      	beq.n	8004950 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004940:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004944:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800494e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2200      	movs	r2, #0
 800495c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 8004960:	2300      	movs	r3, #0
}
 8004962:	4618      	mov	r0, r3
 8004964:	370c      	adds	r7, #12
 8004966:	46bd      	mov	sp, r7
 8004968:	bc80      	pop	{r7}
 800496a:	4770      	bx	lr

0800496c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b084      	sub	sp, #16
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004974:	2300      	movs	r3, #0
 8004976:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800497e:	b2db      	uxtb	r3, r3
 8004980:	2b02      	cmp	r3, #2
 8004982:	d005      	beq.n	8004990 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2204      	movs	r2, #4
 8004988:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	73fb      	strb	r3, [r7, #15]
 800498e:	e047      	b.n	8004a20 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f022 020e 	bic.w	r2, r2, #14
 800499e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f022 0201 	bic.w	r2, r2, #1
 80049ae:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049ba:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80049be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049c4:	f003 021c 	and.w	r2, r3, #28
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049cc:	2101      	movs	r1, #1
 80049ce:	fa01 f202 	lsl.w	r2, r1, r2
 80049d2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049d8:	687a      	ldr	r2, [r7, #4]
 80049da:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80049dc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d00c      	beq.n	8004a00 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80049f4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80049fe:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d003      	beq.n	8004a20 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	4798      	blx	r3
    }
  }
  return status;
 8004a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3710      	adds	r7, #16
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
	...

08004a2c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a48:	f003 031c 	and.w	r3, r3, #28
 8004a4c:	2204      	movs	r2, #4
 8004a4e:	409a      	lsls	r2, r3
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	4013      	ands	r3, r2
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d027      	beq.n	8004aa8 <HAL_DMA_IRQHandler+0x7c>
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	f003 0304 	and.w	r3, r3, #4
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d022      	beq.n	8004aa8 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0320 	and.w	r3, r3, #32
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d107      	bne.n	8004a80 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f022 0204 	bic.w	r2, r2, #4
 8004a7e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a84:	f003 021c 	and.w	r2, r3, #28
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a8c:	2104      	movs	r1, #4
 8004a8e:	fa01 f202 	lsl.w	r2, r1, r2
 8004a92:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	f000 8081 	beq.w	8004ba0 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8004aa6:	e07b      	b.n	8004ba0 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aac:	f003 031c 	and.w	r3, r3, #28
 8004ab0:	2202      	movs	r2, #2
 8004ab2:	409a      	lsls	r2, r3
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d03d      	beq.n	8004b38 <HAL_DMA_IRQHandler+0x10c>
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	f003 0302 	and.w	r3, r3, #2
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d038      	beq.n	8004b38 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 0320 	and.w	r3, r3, #32
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d10b      	bne.n	8004aec <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f022 020a 	bic.w	r2, r2, #10
 8004ae2:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	461a      	mov	r2, r3
 8004af2:	4b2e      	ldr	r3, [pc, #184]	@ (8004bac <HAL_DMA_IRQHandler+0x180>)
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d909      	bls.n	8004b0c <HAL_DMA_IRQHandler+0xe0>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004afc:	f003 031c 	and.w	r3, r3, #28
 8004b00:	4a2b      	ldr	r2, [pc, #172]	@ (8004bb0 <HAL_DMA_IRQHandler+0x184>)
 8004b02:	2102      	movs	r1, #2
 8004b04:	fa01 f303 	lsl.w	r3, r1, r3
 8004b08:	6053      	str	r3, [r2, #4]
 8004b0a:	e008      	b.n	8004b1e <HAL_DMA_IRQHandler+0xf2>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b10:	f003 031c 	and.w	r3, r3, #28
 8004b14:	4a27      	ldr	r2, [pc, #156]	@ (8004bb4 <HAL_DMA_IRQHandler+0x188>)
 8004b16:	2102      	movs	r1, #2
 8004b18:	fa01 f303 	lsl.w	r3, r1, r3
 8004b1c:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      if (hdma->XferCpltCallback != NULL)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d038      	beq.n	8004ba0 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8004b36:	e033      	b.n	8004ba0 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b3c:	f003 031c 	and.w	r3, r3, #28
 8004b40:	2208      	movs	r2, #8
 8004b42:	409a      	lsls	r2, r3
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	4013      	ands	r3, r2
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d02a      	beq.n	8004ba2 <HAL_DMA_IRQHandler+0x176>
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	f003 0308 	and.w	r3, r3, #8
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d025      	beq.n	8004ba2 <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f022 020e 	bic.w	r2, r2, #14
 8004b64:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b6a:	f003 021c 	and.w	r2, r3, #28
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b72:	2101      	movs	r1, #1
 8004b74:	fa01 f202 	lsl.w	r2, r1, r2
 8004b78:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2201      	movs	r2, #1
 8004b84:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d004      	beq.n	8004ba2 <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004ba0:	bf00      	nop
 8004ba2:	bf00      	nop
}
 8004ba4:	3710      	adds	r7, #16
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	40020080 	.word	0x40020080
 8004bb0:	40020400 	.word	0x40020400
 8004bb4:	40020000 	.word	0x40020000

08004bb8 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b085      	sub	sp, #20
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	60f8      	str	r0, [r7, #12]
 8004bc0:	60b9      	str	r1, [r7, #8]
 8004bc2:	607a      	str	r2, [r7, #4]
 8004bc4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bca:	68fa      	ldr	r2, [r7, #12]
 8004bcc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004bce:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d004      	beq.n	8004be2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bdc:	68fa      	ldr	r2, [r7, #12]
 8004bde:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004be0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004be6:	f003 021c 	and.w	r2, r3, #28
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bee:	2101      	movs	r1, #1
 8004bf0:	fa01 f202 	lsl.w	r2, r1, r2
 8004bf4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	683a      	ldr	r2, [r7, #0]
 8004bfc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	2b10      	cmp	r3, #16
 8004c04:	d108      	bne.n	8004c18 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	68ba      	ldr	r2, [r7, #8]
 8004c14:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004c16:	e007      	b.n	8004c28 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	68ba      	ldr	r2, [r7, #8]
 8004c1e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	60da      	str	r2, [r3, #12]
}
 8004c28:	bf00      	nop
 8004c2a:	3714      	adds	r7, #20
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bc80      	pop	{r7}
 8004c30:	4770      	bx	lr
	...

08004c34 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b085      	sub	sp, #20
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	461a      	mov	r2, r3
 8004c42:	4b1c      	ldr	r3, [pc, #112]	@ (8004cb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d813      	bhi.n	8004c70 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c4c:	089b      	lsrs	r3, r3, #2
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004c54:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	3b08      	subs	r3, #8
 8004c64:	4a14      	ldr	r2, [pc, #80]	@ (8004cb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8004c66:	fba2 2303 	umull	r2, r3, r2, r3
 8004c6a:	091b      	lsrs	r3, r3, #4
 8004c6c:	60fb      	str	r3, [r7, #12]
 8004c6e:	e011      	b.n	8004c94 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c74:	089b      	lsrs	r3, r3, #2
 8004c76:	009a      	lsls	r2, r3, #2
 8004c78:	4b10      	ldr	r3, [pc, #64]	@ (8004cbc <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8004c7a:	4413      	add	r3, r2
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	3b08      	subs	r3, #8
 8004c88:	4a0b      	ldr	r2, [pc, #44]	@ (8004cb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8004c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c8e:	091b      	lsrs	r3, r3, #4
 8004c90:	3307      	adds	r3, #7
 8004c92:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	4a0a      	ldr	r2, [pc, #40]	@ (8004cc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8004c98:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f003 031f 	and.w	r3, r3, #31
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	409a      	lsls	r2, r3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004ca8:	bf00      	nop
 8004caa:	3714      	adds	r7, #20
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bc80      	pop	{r7}
 8004cb0:	4770      	bx	lr
 8004cb2:	bf00      	nop
 8004cb4:	40020407 	.word	0x40020407
 8004cb8:	cccccccd 	.word	0xcccccccd
 8004cbc:	4002081c 	.word	0x4002081c
 8004cc0:	40020880 	.word	0x40020880

08004cc4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b085      	sub	sp, #20
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004cd4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004cd6:	68fa      	ldr	r2, [r7, #12]
 8004cd8:	4b0a      	ldr	r3, [pc, #40]	@ (8004d04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004cda:	4413      	add	r3, r2
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	461a      	mov	r2, r3
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	4a08      	ldr	r2, [pc, #32]	@ (8004d08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004ce8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	3b01      	subs	r3, #1
 8004cee:	f003 0303 	and.w	r3, r3, #3
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	409a      	lsls	r2, r3
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004cfa:	bf00      	nop
 8004cfc:	3714      	adds	r7, #20
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bc80      	pop	{r7}
 8004d02:	4770      	bx	lr
 8004d04:	1000823f 	.word	0x1000823f
 8004d08:	40020940 	.word	0x40020940

08004d0c <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b086      	sub	sp, #24
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	60f8      	str	r0, [r7, #12]
 8004d14:	60b9      	str	r1, [r7, #8]
 8004d16:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004d1a:	4b1c      	ldr	r3, [pc, #112]	@ (8004d8c <HAL_FLASH_Program+0x80>)
 8004d1c:	781b      	ldrb	r3, [r3, #0]
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d101      	bne.n	8004d26 <HAL_FLASH_Program+0x1a>
 8004d22:	2302      	movs	r3, #2
 8004d24:	e02d      	b.n	8004d82 <HAL_FLASH_Program+0x76>
 8004d26:	4b19      	ldr	r3, [pc, #100]	@ (8004d8c <HAL_FLASH_Program+0x80>)
 8004d28:	2201      	movs	r2, #1
 8004d2a:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004d2c:	4b17      	ldr	r3, [pc, #92]	@ (8004d8c <HAL_FLASH_Program+0x80>)
 8004d2e:	2200      	movs	r2, #0
 8004d30:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004d32:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004d36:	f000 f869 	bl	8004e0c <FLASH_WaitForLastOperation>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8004d3e:	7dfb      	ldrb	r3, [r7, #23]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d11a      	bne.n	8004d7a <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d105      	bne.n	8004d56 <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8004d4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d4e:	68b8      	ldr	r0, [r7, #8]
 8004d50:	f000 f8be 	bl	8004ed0 <FLASH_Program_DoubleWord>
 8004d54:	e004      	b.n	8004d60 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 double-word (64-bit) row at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	4619      	mov	r1, r3
 8004d5a:	68b8      	ldr	r0, [r7, #8]
 8004d5c:	f000 f8de 	bl	8004f1c <FLASH_Program_Fast>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004d60:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004d64:	f000 f852 	bl	8004e0c <FLASH_WaitForLastOperation>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
#ifdef CORE_CM0PLUS
    CLEAR_BIT(FLASH->C2CR, TypeProgram);
#else
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8004d6c:	4b08      	ldr	r3, [pc, #32]	@ (8004d90 <HAL_FLASH_Program+0x84>)
 8004d6e:	695a      	ldr	r2, [r3, #20]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	43db      	mvns	r3, r3
 8004d74:	4906      	ldr	r1, [pc, #24]	@ (8004d90 <HAL_FLASH_Program+0x84>)
 8004d76:	4013      	ands	r3, r2
 8004d78:	614b      	str	r3, [r1, #20]
#endif
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004d7a:	4b04      	ldr	r3, [pc, #16]	@ (8004d8c <HAL_FLASH_Program+0x80>)
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8004d80:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3718      	adds	r7, #24
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop
 8004d8c:	20000588 	.word	0x20000588
 8004d90:	58004000 	.word	0x58004000

08004d94 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b083      	sub	sp, #12
 8004d98:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8004d9e:	4b0b      	ldr	r3, [pc, #44]	@ (8004dcc <HAL_FLASH_Unlock+0x38>)
 8004da0:	695b      	ldr	r3, [r3, #20]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	da0b      	bge.n	8004dbe <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004da6:	4b09      	ldr	r3, [pc, #36]	@ (8004dcc <HAL_FLASH_Unlock+0x38>)
 8004da8:	4a09      	ldr	r2, [pc, #36]	@ (8004dd0 <HAL_FLASH_Unlock+0x3c>)
 8004daa:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004dac:	4b07      	ldr	r3, [pc, #28]	@ (8004dcc <HAL_FLASH_Unlock+0x38>)
 8004dae:	4a09      	ldr	r2, [pc, #36]	@ (8004dd4 <HAL_FLASH_Unlock+0x40>)
 8004db0:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8004db2:	4b06      	ldr	r3, [pc, #24]	@ (8004dcc <HAL_FLASH_Unlock+0x38>)
 8004db4:	695b      	ldr	r3, [r3, #20]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	da01      	bge.n	8004dbe <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8004dbe:	79fb      	ldrb	r3, [r7, #7]
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	370c      	adds	r7, #12
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bc80      	pop	{r7}
 8004dc8:	4770      	bx	lr
 8004dca:	bf00      	nop
 8004dcc:	58004000 	.word	0x58004000
 8004dd0:	45670123 	.word	0x45670123
 8004dd4:	cdef89ab 	.word	0xcdef89ab

08004dd8 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b083      	sub	sp, #12
 8004ddc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004dde:	2300      	movs	r3, #0
 8004de0:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004de2:	4b09      	ldr	r3, [pc, #36]	@ (8004e08 <HAL_FLASH_Lock+0x30>)
 8004de4:	695b      	ldr	r3, [r3, #20]
 8004de6:	4a08      	ldr	r2, [pc, #32]	@ (8004e08 <HAL_FLASH_Lock+0x30>)
 8004de8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004dec:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8004dee:	4b06      	ldr	r3, [pc, #24]	@ (8004e08 <HAL_FLASH_Lock+0x30>)
 8004df0:	695b      	ldr	r3, [r3, #20]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	db01      	blt.n	8004dfa <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8004dfa:	79fb      	ldrb	r3, [r7, #7]
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	370c      	adds	r7, #12
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bc80      	pop	{r7}
 8004e04:	4770      	bx	lr
 8004e06:	bf00      	nop
 8004e08:	58004000 	.word	0x58004000

08004e0c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8004e14:	f7fd f9d6 	bl	80021c4 <HAL_GetTick>
 8004e18:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004e1a:	e009      	b.n	8004e30 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8004e1c:	f7fd f9d2 	bl	80021c4 <HAL_GetTick>
 8004e20:	4602      	mov	r2, r0
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d801      	bhi.n	8004e30 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8004e2c:	2303      	movs	r3, #3
 8004e2e:	e046      	b.n	8004ebe <FLASH_WaitForLastOperation+0xb2>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004e30:	4b25      	ldr	r3, [pc, #148]	@ (8004ec8 <FLASH_WaitForLastOperation+0xbc>)
 8004e32:	691b      	ldr	r3, [r3, #16]
 8004e34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e3c:	d0ee      	beq.n	8004e1c <FLASH_WaitForLastOperation+0x10>
  /* check flash errors. Only ECC correction can be checked here as ECCD
      generates NMI */
#ifdef CORE_CM0PLUS
  error = FLASH->C2SR;
#else
  error = FLASH->SR;
 8004e3e:	4b22      	ldr	r3, [pc, #136]	@ (8004ec8 <FLASH_WaitForLastOperation+0xbc>)
 8004e40:	691b      	ldr	r3, [r3, #16]
 8004e42:	60bb      	str	r3, [r7, #8]
#endif

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	f003 0301 	and.w	r3, r3, #1
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d002      	beq.n	8004e54 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004e4e:	4b1e      	ldr	r3, [pc, #120]	@ (8004ec8 <FLASH_WaitForLastOperation+0xbc>)
 8004e50:	2201      	movs	r2, #1
 8004e52:	611a      	str	r2, [r3, #16]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 8004e54:	68ba      	ldr	r2, [r7, #8]
 8004e56:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e64:	d307      	bcc.n	8004e76 <FLASH_WaitForLastOperation+0x6a>
 8004e66:	4b18      	ldr	r3, [pc, #96]	@ (8004ec8 <FLASH_WaitForLastOperation+0xbc>)
 8004e68:	699a      	ldr	r2, [r3, #24]
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004e70:	4915      	ldr	r1, [pc, #84]	@ (8004ec8 <FLASH_WaitForLastOperation+0xbc>)
 8004e72:	4313      	orrs	r3, r2
 8004e74:	618b      	str	r3, [r1, #24]
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d004      	beq.n	8004e8a <FLASH_WaitForLastOperation+0x7e>
 8004e80:	4a11      	ldr	r2, [pc, #68]	@ (8004ec8 <FLASH_WaitForLastOperation+0xbc>)
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8004e88:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d00e      	beq.n	8004eae <FLASH_WaitForLastOperation+0xa2>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8004e90:	4a0e      	ldr	r2, [pc, #56]	@ (8004ecc <FLASH_WaitForLastOperation+0xc0>)
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e011      	b.n	8004ebe <FLASH_WaitForLastOperation+0xb2>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8004e9a:	f7fd f993 	bl	80021c4 <HAL_GetTick>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	1ad3      	subs	r3, r2, r3
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d801      	bhi.n	8004eae <FLASH_WaitForLastOperation+0xa2>
    {
      return HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	e007      	b.n	8004ebe <FLASH_WaitForLastOperation+0xb2>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8004eae:	4b06      	ldr	r3, [pc, #24]	@ (8004ec8 <FLASH_WaitForLastOperation+0xbc>)
 8004eb0:	691b      	ldr	r3, [r3, #16]
 8004eb2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004eb6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004eba:	d0ee      	beq.n	8004e9a <FLASH_WaitForLastOperation+0x8e>
    }
  }

  return HAL_OK;
 8004ebc:	2300      	movs	r3, #0
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3710      	adds	r7, #16
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	58004000 	.word	0x58004000
 8004ecc:	20000588 	.word	0x20000588

08004ed0 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b085      	sub	sp, #20
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	60f8      	str	r0, [r7, #12]
 8004ed8:	e9c7 2300 	strd	r2, r3, [r7]
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8004edc:	4b0e      	ldr	r3, [pc, #56]	@ (8004f18 <FLASH_Program_DoubleWord+0x48>)
 8004ede:	695b      	ldr	r3, [r3, #20]
 8004ee0:	4a0d      	ldr	r2, [pc, #52]	@ (8004f18 <FLASH_Program_DoubleWord+0x48>)
 8004ee2:	f043 0301 	orr.w	r3, r3, #1
 8004ee6:	6153      	str	r3, [r2, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	683a      	ldr	r2, [r7, #0]
 8004eec:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8004eee:	f3bf 8f6f 	isb	sy
}
 8004ef2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8004ef4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004ef8:	f04f 0200 	mov.w	r2, #0
 8004efc:	f04f 0300 	mov.w	r3, #0
 8004f00:	000a      	movs	r2, r1
 8004f02:	2300      	movs	r3, #0
 8004f04:	68f9      	ldr	r1, [r7, #12]
 8004f06:	3104      	adds	r1, #4
 8004f08:	4613      	mov	r3, r2
 8004f0a:	600b      	str	r3, [r1, #0]
}
 8004f0c:	bf00      	nop
 8004f0e:	3714      	adds	r7, #20
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bc80      	pop	{r7}
 8004f14:	4770      	bx	lr
 8004f16:	bf00      	nop
 8004f18:	58004000 	.word	0x58004000

08004f1c <FLASH_Program_Fast>:
#ifdef CORE_CM0PLUS
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#else
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#endif
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b089      	sub	sp, #36	@ 0x24
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8004f26:	2340      	movs	r3, #64	@ 0x40
 8004f28:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	617b      	str	r3, [r7, #20]

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8004f32:	4b18      	ldr	r3, [pc, #96]	@ (8004f94 <FLASH_Program_Fast+0x78>)
 8004f34:	695b      	ldr	r3, [r3, #20]
 8004f36:	4a17      	ldr	r2, [pc, #92]	@ (8004f94 <FLASH_Program_Fast+0x78>)
 8004f38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004f3c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f3e:	f3ef 8310 	mrs	r3, PRIMASK
 8004f42:	60fb      	str	r3, [r7, #12]
  return(result);
 8004f44:	68fb      	ldr	r3, [r7, #12]
#endif

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
 8004f46:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8004f48:	b672      	cpsid	i
}
 8004f4a:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	69bb      	ldr	r3, [r7, #24]
 8004f52:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8004f54:	69bb      	ldr	r3, [r7, #24]
 8004f56:	3304      	adds	r3, #4
 8004f58:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	3304      	adds	r3, #4
 8004f5e:	617b      	str	r3, [r7, #20]
    row_index--;
 8004f60:	7ffb      	ldrb	r3, [r7, #31]
 8004f62:	3b01      	subs	r3, #1
 8004f64:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8004f66:	7ffb      	ldrb	r3, [r7, #31]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d1ef      	bne.n	8004f4c <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 8004f6c:	bf00      	nop
 8004f6e:	4b09      	ldr	r3, [pc, #36]	@ (8004f94 <FLASH_Program_Fast+0x78>)
 8004f70:	691b      	ldr	r3, [r3, #16]
 8004f72:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f76:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f7a:	d0f8      	beq.n	8004f6e <FLASH_Program_Fast+0x52>
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	f383 8810 	msr	PRIMASK, r3
}
 8004f86:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8004f88:	bf00      	nop
 8004f8a:	3724      	adds	r7, #36	@ 0x24
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bc80      	pop	{r7}
 8004f90:	4770      	bx	lr
 8004f92:	bf00      	nop
 8004f94:	58004000 	.word	0x58004000

08004f98 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b084      	sub	sp, #16
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004fa2:	4b28      	ldr	r3, [pc, #160]	@ (8005044 <HAL_FLASHEx_Erase+0xac>)
 8004fa4:	781b      	ldrb	r3, [r3, #0]
 8004fa6:	2b01      	cmp	r3, #1
 8004fa8:	d101      	bne.n	8004fae <HAL_FLASHEx_Erase+0x16>
 8004faa:	2302      	movs	r3, #2
 8004fac:	e046      	b.n	800503c <HAL_FLASHEx_Erase+0xa4>
 8004fae:	4b25      	ldr	r3, [pc, #148]	@ (8005044 <HAL_FLASHEx_Erase+0xac>)
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004fb4:	4b23      	ldr	r3, [pc, #140]	@ (8005044 <HAL_FLASHEx_Erase+0xac>)
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004fba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004fbe:	f7ff ff25 	bl	8004e0c <FLASH_WaitForLastOperation>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004fc6:	7bfb      	ldrb	r3, [r7, #15]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d133      	bne.n	8005034 <HAL_FLASHEx_Erase+0x9c>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	2b04      	cmp	r3, #4
 8004fd2:	d108      	bne.n	8004fe6 <HAL_FLASHEx_Erase+0x4e>
    {
      /* Mass erase to be done */
      FLASH_MassErase();
 8004fd4:	f000 f880 	bl	80050d8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004fd8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004fdc:	f7ff ff16 	bl	8004e0c <FLASH_WaitForLastOperation>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	73fb      	strb	r3, [r7, #15]
 8004fe4:	e024      	b.n	8005030 <HAL_FLASHEx_Erase+0x98>
      /* If operation is completed or interrupted, no need to clear the Mass Erase Bit */
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8004fec:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	60bb      	str	r3, [r7, #8]
 8004ff4:	e012      	b.n	800501c <HAL_FLASHEx_Erase+0x84>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 8004ff6:	68b8      	ldr	r0, [r7, #8]
 8004ff8:	f000 f87e 	bl	80050f8 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004ffc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005000:	f7ff ff04 	bl	8004e0c <FLASH_WaitForLastOperation>
 8005004:	4603      	mov	r3, r0
 8005006:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 8005008:	7bfb      	ldrb	r3, [r7, #15]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d003      	beq.n	8005016 <HAL_FLASHEx_Erase+0x7e>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	68ba      	ldr	r2, [r7, #8]
 8005012:	601a      	str	r2, [r3, #0]
          break;
 8005014:	e00a      	b.n	800502c <HAL_FLASHEx_Erase+0x94>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	3301      	adds	r3, #1
 800501a:	60bb      	str	r3, [r7, #8]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	685a      	ldr	r2, [r3, #4]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	4413      	add	r3, r2
 8005026:	68ba      	ldr	r2, [r7, #8]
 8005028:	429a      	cmp	r2, r3
 800502a:	d3e4      	bcc.n	8004ff6 <HAL_FLASHEx_Erase+0x5e>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 800502c:	f000 f8c0 	bl	80051b0 <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8005030:	f000 f87a 	bl	8005128 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005034:	4b03      	ldr	r3, [pc, #12]	@ (8005044 <HAL_FLASHEx_Erase+0xac>)
 8005036:	2200      	movs	r2, #0
 8005038:	701a      	strb	r2, [r3, #0]

  return status;
 800503a:	7bfb      	ldrb	r3, [r7, #15]
}
 800503c:	4618      	mov	r0, r3
 800503e:	3710      	adds	r7, #16
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}
 8005044:	20000588 	.word	0x20000588

08005048 <HAL_FLASHEx_Erase_IT>:
  * @param  pEraseInit Pointer to an @ref FLASH_EraseInitTypeDef structure that
  *         contains the configuration information for the erasing.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b084      	sub	sp, #16
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005050:	4b1f      	ldr	r3, [pc, #124]	@ (80050d0 <HAL_FLASHEx_Erase_IT+0x88>)
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	2b01      	cmp	r3, #1
 8005056:	d101      	bne.n	800505c <HAL_FLASHEx_Erase_IT+0x14>
 8005058:	2302      	movs	r3, #2
 800505a:	e034      	b.n	80050c6 <HAL_FLASHEx_Erase_IT+0x7e>
 800505c:	4b1c      	ldr	r3, [pc, #112]	@ (80050d0 <HAL_FLASHEx_Erase_IT+0x88>)
 800505e:	2201      	movs	r2, #1
 8005060:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005062:	4b1b      	ldr	r3, [pc, #108]	@ (80050d0 <HAL_FLASHEx_Erase_IT+0x88>)
 8005064:	2200      	movs	r2, #0
 8005066:	605a      	str	r2, [r3, #4]

  /* save procedure for interrupt treatment */
  pFlash.ProcedureOnGoing = pEraseInit->TypeErase;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a18      	ldr	r2, [pc, #96]	@ (80050d0 <HAL_FLASHEx_Erase_IT+0x88>)
 800506e:	6093      	str	r3, [r2, #8]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005070:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005074:	f7ff feca 	bl	8004e0c <FLASH_WaitForLastOperation>
 8005078:	4603      	mov	r3, r0
 800507a:	73fb      	strb	r3, [r7, #15]

  if (status != HAL_OK)
 800507c:	7bfb      	ldrb	r3, [r7, #15]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d003      	beq.n	800508a <HAL_FLASHEx_Erase_IT+0x42>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8005082:	4b13      	ldr	r3, [pc, #76]	@ (80050d0 <HAL_FLASHEx_Erase_IT+0x88>)
 8005084:	2200      	movs	r2, #0
 8005086:	701a      	strb	r2, [r3, #0]
 8005088:	e01c      	b.n	80050c4 <HAL_FLASHEx_Erase_IT+0x7c>
  }
  else
  {
    /* Enable End of Operation and Error interrupts */
    __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 800508a:	4b12      	ldr	r3, [pc, #72]	@ (80050d4 <HAL_FLASHEx_Erase_IT+0x8c>)
 800508c:	695b      	ldr	r3, [r3, #20]
 800508e:	4a11      	ldr	r2, [pc, #68]	@ (80050d4 <HAL_FLASHEx_Erase_IT+0x8c>)
 8005090:	f043 7340 	orr.w	r3, r3, #50331648	@ 0x3000000
 8005094:	6153      	str	r3, [r2, #20]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	2b04      	cmp	r3, #4
 800509c:	d105      	bne.n	80050aa <HAL_FLASHEx_Erase_IT+0x62>
    {
      /* Set Page to 0 for Interrupt callback management */
      pFlash.Page = 0;
 800509e:	4b0c      	ldr	r3, [pc, #48]	@ (80050d0 <HAL_FLASHEx_Erase_IT+0x88>)
 80050a0:	2200      	movs	r2, #0
 80050a2:	611a      	str	r2, [r3, #16]

      /* Proceed to Mass Erase */
      FLASH_MassErase();
 80050a4:	f000 f818 	bl	80050d8 <FLASH_MassErase>
 80050a8:	e00c      	b.n	80050c4 <HAL_FLASHEx_Erase_IT+0x7c>
    }
    else
    {
      /* Erase by page to be done */
      pFlash.NbPagesToErase = pEraseInit->NbPages;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	4a08      	ldr	r2, [pc, #32]	@ (80050d0 <HAL_FLASHEx_Erase_IT+0x88>)
 80050b0:	6153      	str	r3, [r2, #20]
      pFlash.Page = pEraseInit->Page;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	4a06      	ldr	r2, [pc, #24]	@ (80050d0 <HAL_FLASHEx_Erase_IT+0x88>)
 80050b8:	6113      	str	r3, [r2, #16]

      /*Erase 1st page and wait for IT */
      FLASH_PageErase(pEraseInit->Page);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	4618      	mov	r0, r3
 80050c0:	f000 f81a 	bl	80050f8 <FLASH_PageErase>
    }
  }

  /* return status */
  return status;
 80050c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3710      	adds	r7, #16
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}
 80050ce:	bf00      	nop
 80050d0:	20000588 	.word	0x20000588
 80050d4:	58004000 	.word	0x58004000

080050d8 <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 80050d8:	b480      	push	{r7}
 80050da:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 80050dc:	4b05      	ldr	r3, [pc, #20]	@ (80050f4 <FLASH_MassErase+0x1c>)
 80050de:	695b      	ldr	r3, [r3, #20]
 80050e0:	4a04      	ldr	r2, [pc, #16]	@ (80050f4 <FLASH_MassErase+0x1c>)
 80050e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050e6:	f043 0304 	orr.w	r3, r3, #4
 80050ea:	6153      	str	r3, [r2, #20]
#endif
}
 80050ec:	bf00      	nop
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bc80      	pop	{r7}
 80050f2:	4770      	bx	lr
 80050f4:	58004000 	.word	0x58004000

080050f8 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b083      	sub	sp, #12
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]

  /* Proceed to erase the page */
#ifdef CORE_CM0PLUS
  MODIFY_REG(FLASH->C2CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
#else
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8005100:	4b08      	ldr	r3, [pc, #32]	@ (8005124 <FLASH_PageErase+0x2c>)
 8005102:	695b      	ldr	r3, [r3, #20]
 8005104:	f423 727e 	bic.w	r2, r3, #1016	@ 0x3f8
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	00db      	lsls	r3, r3, #3
 800510c:	4313      	orrs	r3, r2
 800510e:	4a05      	ldr	r2, [pc, #20]	@ (8005124 <FLASH_PageErase+0x2c>)
 8005110:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005114:	f043 0302 	orr.w	r3, r3, #2
 8005118:	6153      	str	r3, [r2, #20]
#endif
}
 800511a:	bf00      	nop
 800511c:	370c      	adds	r7, #12
 800511e:	46bd      	mov	sp, r7
 8005120:	bc80      	pop	{r7}
 8005122:	4770      	bx	lr
 8005124:	58004000 	.word	0x58004000

08005128 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8005128:	b480      	push	{r7}
 800512a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 800512c:	4b1f      	ldr	r3, [pc, #124]	@ (80051ac <FLASH_FlushCaches+0x84>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005134:	2b01      	cmp	r3, #1
 8005136:	d117      	bne.n	8005168 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005138:	4b1c      	ldr	r3, [pc, #112]	@ (80051ac <FLASH_FlushCaches+0x84>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a1b      	ldr	r2, [pc, #108]	@ (80051ac <FLASH_FlushCaches+0x84>)
 800513e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005142:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8005144:	4b19      	ldr	r3, [pc, #100]	@ (80051ac <FLASH_FlushCaches+0x84>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a18      	ldr	r2, [pc, #96]	@ (80051ac <FLASH_FlushCaches+0x84>)
 800514a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800514e:	6013      	str	r3, [r2, #0]
 8005150:	4b16      	ldr	r3, [pc, #88]	@ (80051ac <FLASH_FlushCaches+0x84>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a15      	ldr	r2, [pc, #84]	@ (80051ac <FLASH_FlushCaches+0x84>)
 8005156:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800515a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800515c:	4b13      	ldr	r3, [pc, #76]	@ (80051ac <FLASH_FlushCaches+0x84>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a12      	ldr	r2, [pc, #72]	@ (80051ac <FLASH_FlushCaches+0x84>)
 8005162:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005166:	6013      	str	r3, [r2, #0]
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 8005168:	4b10      	ldr	r3, [pc, #64]	@ (80051ac <FLASH_FlushCaches+0x84>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005170:	2b01      	cmp	r3, #1
 8005172:	d117      	bne.n	80051a4 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8005174:	4b0d      	ldr	r3, [pc, #52]	@ (80051ac <FLASH_FlushCaches+0x84>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a0c      	ldr	r2, [pc, #48]	@ (80051ac <FLASH_FlushCaches+0x84>)
 800517a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800517e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8005180:	4b0a      	ldr	r3, [pc, #40]	@ (80051ac <FLASH_FlushCaches+0x84>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a09      	ldr	r2, [pc, #36]	@ (80051ac <FLASH_FlushCaches+0x84>)
 8005186:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800518a:	6013      	str	r3, [r2, #0]
 800518c:	4b07      	ldr	r3, [pc, #28]	@ (80051ac <FLASH_FlushCaches+0x84>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a06      	ldr	r2, [pc, #24]	@ (80051ac <FLASH_FlushCaches+0x84>)
 8005192:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005196:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8005198:	4b04      	ldr	r3, [pc, #16]	@ (80051ac <FLASH_FlushCaches+0x84>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a03      	ldr	r2, [pc, #12]	@ (80051ac <FLASH_FlushCaches+0x84>)
 800519e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80051a2:	6013      	str	r3, [r2, #0]
  }
#endif
}
 80051a4:	bf00      	nop
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bc80      	pop	{r7}
 80051aa:	4770      	bx	lr
 80051ac:	58004000 	.word	0x58004000

080051b0 <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 80051b0:	b480      	push	{r7}
 80051b2:	af00      	add	r7, sp, #0
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80051b4:	4b05      	ldr	r3, [pc, #20]	@ (80051cc <FLASH_AcknowledgePageErase+0x1c>)
 80051b6:	695b      	ldr	r3, [r3, #20]
 80051b8:	4a04      	ldr	r2, [pc, #16]	@ (80051cc <FLASH_AcknowledgePageErase+0x1c>)
 80051ba:	f423 737e 	bic.w	r3, r3, #1016	@ 0x3f8
 80051be:	f023 0302 	bic.w	r3, r3, #2
 80051c2:	6153      	str	r3, [r2, #20]
#endif
}
 80051c4:	bf00      	nop
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bc80      	pop	{r7}
 80051ca:	4770      	bx	lr
 80051cc:	58004000 	.word	0x58004000

080051d0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b087      	sub	sp, #28
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80051da:	2300      	movs	r3, #0
 80051dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80051de:	e140      	b.n	8005462 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	2101      	movs	r1, #1
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	fa01 f303 	lsl.w	r3, r1, r3
 80051ec:	4013      	ands	r3, r2
 80051ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	f000 8132 	beq.w	800545c <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	f003 0303 	and.w	r3, r3, #3
 8005200:	2b01      	cmp	r3, #1
 8005202:	d005      	beq.n	8005210 <HAL_GPIO_Init+0x40>
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	f003 0303 	and.w	r3, r3, #3
 800520c:	2b02      	cmp	r3, #2
 800520e:	d130      	bne.n	8005272 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	005b      	lsls	r3, r3, #1
 800521a:	2203      	movs	r2, #3
 800521c:	fa02 f303 	lsl.w	r3, r2, r3
 8005220:	43db      	mvns	r3, r3
 8005222:	693a      	ldr	r2, [r7, #16]
 8005224:	4013      	ands	r3, r2
 8005226:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	68da      	ldr	r2, [r3, #12]
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	005b      	lsls	r3, r3, #1
 8005230:	fa02 f303 	lsl.w	r3, r2, r3
 8005234:	693a      	ldr	r2, [r7, #16]
 8005236:	4313      	orrs	r3, r2
 8005238:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	693a      	ldr	r2, [r7, #16]
 800523e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005246:	2201      	movs	r2, #1
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	fa02 f303 	lsl.w	r3, r2, r3
 800524e:	43db      	mvns	r3, r3
 8005250:	693a      	ldr	r2, [r7, #16]
 8005252:	4013      	ands	r3, r2
 8005254:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	091b      	lsrs	r3, r3, #4
 800525c:	f003 0201 	and.w	r2, r3, #1
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	fa02 f303 	lsl.w	r3, r2, r3
 8005266:	693a      	ldr	r2, [r7, #16]
 8005268:	4313      	orrs	r3, r2
 800526a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	693a      	ldr	r2, [r7, #16]
 8005270:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	f003 0303 	and.w	r3, r3, #3
 800527a:	2b03      	cmp	r3, #3
 800527c:	d017      	beq.n	80052ae <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	68db      	ldr	r3, [r3, #12]
 8005282:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	005b      	lsls	r3, r3, #1
 8005288:	2203      	movs	r2, #3
 800528a:	fa02 f303 	lsl.w	r3, r2, r3
 800528e:	43db      	mvns	r3, r3
 8005290:	693a      	ldr	r2, [r7, #16]
 8005292:	4013      	ands	r3, r2
 8005294:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	689a      	ldr	r2, [r3, #8]
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	005b      	lsls	r3, r3, #1
 800529e:	fa02 f303 	lsl.w	r3, r2, r3
 80052a2:	693a      	ldr	r2, [r7, #16]
 80052a4:	4313      	orrs	r3, r2
 80052a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	693a      	ldr	r2, [r7, #16]
 80052ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	f003 0303 	and.w	r3, r3, #3
 80052b6:	2b02      	cmp	r3, #2
 80052b8:	d123      	bne.n	8005302 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	08da      	lsrs	r2, r3, #3
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	3208      	adds	r2, #8
 80052c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	f003 0307 	and.w	r3, r3, #7
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	220f      	movs	r2, #15
 80052d2:	fa02 f303 	lsl.w	r3, r2, r3
 80052d6:	43db      	mvns	r3, r3
 80052d8:	693a      	ldr	r2, [r7, #16]
 80052da:	4013      	ands	r3, r2
 80052dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	691a      	ldr	r2, [r3, #16]
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	f003 0307 	and.w	r3, r3, #7
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	fa02 f303 	lsl.w	r3, r2, r3
 80052ee:	693a      	ldr	r2, [r7, #16]
 80052f0:	4313      	orrs	r3, r2
 80052f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	08da      	lsrs	r2, r3, #3
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	3208      	adds	r2, #8
 80052fc:	6939      	ldr	r1, [r7, #16]
 80052fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	005b      	lsls	r3, r3, #1
 800530c:	2203      	movs	r2, #3
 800530e:	fa02 f303 	lsl.w	r3, r2, r3
 8005312:	43db      	mvns	r3, r3
 8005314:	693a      	ldr	r2, [r7, #16]
 8005316:	4013      	ands	r3, r2
 8005318:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	f003 0203 	and.w	r2, r3, #3
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	005b      	lsls	r3, r3, #1
 8005326:	fa02 f303 	lsl.w	r3, r2, r3
 800532a:	693a      	ldr	r2, [r7, #16]
 800532c:	4313      	orrs	r3, r2
 800532e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	693a      	ldr	r2, [r7, #16]
 8005334:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800533e:	2b00      	cmp	r3, #0
 8005340:	f000 808c 	beq.w	800545c <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8005344:	4a4e      	ldr	r2, [pc, #312]	@ (8005480 <HAL_GPIO_Init+0x2b0>)
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	089b      	lsrs	r3, r3, #2
 800534a:	3302      	adds	r3, #2
 800534c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005350:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	f003 0303 	and.w	r3, r3, #3
 8005358:	009b      	lsls	r3, r3, #2
 800535a:	2207      	movs	r2, #7
 800535c:	fa02 f303 	lsl.w	r3, r2, r3
 8005360:	43db      	mvns	r3, r3
 8005362:	693a      	ldr	r2, [r7, #16]
 8005364:	4013      	ands	r3, r2
 8005366:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800536e:	d00d      	beq.n	800538c <HAL_GPIO_Init+0x1bc>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4a44      	ldr	r2, [pc, #272]	@ (8005484 <HAL_GPIO_Init+0x2b4>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d007      	beq.n	8005388 <HAL_GPIO_Init+0x1b8>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	4a43      	ldr	r2, [pc, #268]	@ (8005488 <HAL_GPIO_Init+0x2b8>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d101      	bne.n	8005384 <HAL_GPIO_Init+0x1b4>
 8005380:	2302      	movs	r3, #2
 8005382:	e004      	b.n	800538e <HAL_GPIO_Init+0x1be>
 8005384:	2307      	movs	r3, #7
 8005386:	e002      	b.n	800538e <HAL_GPIO_Init+0x1be>
 8005388:	2301      	movs	r3, #1
 800538a:	e000      	b.n	800538e <HAL_GPIO_Init+0x1be>
 800538c:	2300      	movs	r3, #0
 800538e:	697a      	ldr	r2, [r7, #20]
 8005390:	f002 0203 	and.w	r2, r2, #3
 8005394:	0092      	lsls	r2, r2, #2
 8005396:	4093      	lsls	r3, r2
 8005398:	693a      	ldr	r2, [r7, #16]
 800539a:	4313      	orrs	r3, r2
 800539c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800539e:	4938      	ldr	r1, [pc, #224]	@ (8005480 <HAL_GPIO_Init+0x2b0>)
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	089b      	lsrs	r3, r3, #2
 80053a4:	3302      	adds	r3, #2
 80053a6:	693a      	ldr	r2, [r7, #16]
 80053a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80053ac:	4b37      	ldr	r3, [pc, #220]	@ (800548c <HAL_GPIO_Init+0x2bc>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	43db      	mvns	r3, r3
 80053b6:	693a      	ldr	r2, [r7, #16]
 80053b8:	4013      	ands	r3, r2
 80053ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d003      	beq.n	80053d0 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 80053c8:	693a      	ldr	r2, [r7, #16]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	4313      	orrs	r3, r2
 80053ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80053d0:	4a2e      	ldr	r2, [pc, #184]	@ (800548c <HAL_GPIO_Init+0x2bc>)
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80053d6:	4b2d      	ldr	r3, [pc, #180]	@ (800548c <HAL_GPIO_Init+0x2bc>)
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	43db      	mvns	r3, r3
 80053e0:	693a      	ldr	r2, [r7, #16]
 80053e2:	4013      	ands	r3, r2
 80053e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d003      	beq.n	80053fa <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 80053f2:	693a      	ldr	r2, [r7, #16]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80053fa:	4a24      	ldr	r2, [pc, #144]	@ (800548c <HAL_GPIO_Init+0x2bc>)
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8005400:	4b22      	ldr	r3, [pc, #136]	@ (800548c <HAL_GPIO_Init+0x2bc>)
 8005402:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005406:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	43db      	mvns	r3, r3
 800540c:	693a      	ldr	r2, [r7, #16]
 800540e:	4013      	ands	r3, r2
 8005410:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800541a:	2b00      	cmp	r3, #0
 800541c:	d003      	beq.n	8005426 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 800541e:	693a      	ldr	r2, [r7, #16]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	4313      	orrs	r3, r2
 8005424:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8005426:	4a19      	ldr	r2, [pc, #100]	@ (800548c <HAL_GPIO_Init+0x2bc>)
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800542e:	4b17      	ldr	r3, [pc, #92]	@ (800548c <HAL_GPIO_Init+0x2bc>)
 8005430:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005434:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	43db      	mvns	r3, r3
 800543a:	693a      	ldr	r2, [r7, #16]
 800543c:	4013      	ands	r3, r2
 800543e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005448:	2b00      	cmp	r3, #0
 800544a:	d003      	beq.n	8005454 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800544c:	693a      	ldr	r2, [r7, #16]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	4313      	orrs	r3, r2
 8005452:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8005454:	4a0d      	ldr	r2, [pc, #52]	@ (800548c <HAL_GPIO_Init+0x2bc>)
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	3301      	adds	r3, #1
 8005460:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	fa22 f303 	lsr.w	r3, r2, r3
 800546c:	2b00      	cmp	r3, #0
 800546e:	f47f aeb7 	bne.w	80051e0 <HAL_GPIO_Init+0x10>
  }
}
 8005472:	bf00      	nop
 8005474:	bf00      	nop
 8005476:	371c      	adds	r7, #28
 8005478:	46bd      	mov	sp, r7
 800547a:	bc80      	pop	{r7}
 800547c:	4770      	bx	lr
 800547e:	bf00      	nop
 8005480:	40010000 	.word	0x40010000
 8005484:	48000400 	.word	0x48000400
 8005488:	48000800 	.word	0x48000800
 800548c:	58000800 	.word	0x58000800

08005490 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005490:	b480      	push	{r7}
 8005492:	b087      	sub	sp, #28
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800549a:	2300      	movs	r3, #0
 800549c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800549e:	e0af      	b.n	8005600 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80054a0:	2201      	movs	r2, #1
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	fa02 f303 	lsl.w	r3, r2, r3
 80054a8:	683a      	ldr	r2, [r7, #0]
 80054aa:	4013      	ands	r3, r2
 80054ac:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	f000 80a2 	beq.w	80055fa <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80054b6:	4a59      	ldr	r2, [pc, #356]	@ (800561c <HAL_GPIO_DeInit+0x18c>)
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	089b      	lsrs	r3, r3, #2
 80054bc:	3302      	adds	r3, #2
 80054be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054c2:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	f003 0303 	and.w	r3, r3, #3
 80054ca:	009b      	lsls	r3, r3, #2
 80054cc:	2207      	movs	r2, #7
 80054ce:	fa02 f303 	lsl.w	r3, r2, r3
 80054d2:	68fa      	ldr	r2, [r7, #12]
 80054d4:	4013      	ands	r3, r2
 80054d6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80054de:	d00d      	beq.n	80054fc <HAL_GPIO_DeInit+0x6c>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	4a4f      	ldr	r2, [pc, #316]	@ (8005620 <HAL_GPIO_DeInit+0x190>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d007      	beq.n	80054f8 <HAL_GPIO_DeInit+0x68>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4a4e      	ldr	r2, [pc, #312]	@ (8005624 <HAL_GPIO_DeInit+0x194>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d101      	bne.n	80054f4 <HAL_GPIO_DeInit+0x64>
 80054f0:	2302      	movs	r3, #2
 80054f2:	e004      	b.n	80054fe <HAL_GPIO_DeInit+0x6e>
 80054f4:	2307      	movs	r3, #7
 80054f6:	e002      	b.n	80054fe <HAL_GPIO_DeInit+0x6e>
 80054f8:	2301      	movs	r3, #1
 80054fa:	e000      	b.n	80054fe <HAL_GPIO_DeInit+0x6e>
 80054fc:	2300      	movs	r3, #0
 80054fe:	697a      	ldr	r2, [r7, #20]
 8005500:	f002 0203 	and.w	r2, r2, #3
 8005504:	0092      	lsls	r2, r2, #2
 8005506:	4093      	lsls	r3, r2
 8005508:	68fa      	ldr	r2, [r7, #12]
 800550a:	429a      	cmp	r2, r3
 800550c:	d136      	bne.n	800557c <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 800550e:	4b46      	ldr	r3, [pc, #280]	@ (8005628 <HAL_GPIO_DeInit+0x198>)
 8005510:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	43db      	mvns	r3, r3
 8005518:	4943      	ldr	r1, [pc, #268]	@ (8005628 <HAL_GPIO_DeInit+0x198>)
 800551a:	4013      	ands	r3, r2
 800551c:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8005520:	4b41      	ldr	r3, [pc, #260]	@ (8005628 <HAL_GPIO_DeInit+0x198>)
 8005522:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	43db      	mvns	r3, r3
 800552a:	493f      	ldr	r1, [pc, #252]	@ (8005628 <HAL_GPIO_DeInit+0x198>)
 800552c:	4013      	ands	r3, r2
 800552e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8005532:	4b3d      	ldr	r3, [pc, #244]	@ (8005628 <HAL_GPIO_DeInit+0x198>)
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	43db      	mvns	r3, r3
 800553a:	493b      	ldr	r1, [pc, #236]	@ (8005628 <HAL_GPIO_DeInit+0x198>)
 800553c:	4013      	ands	r3, r2
 800553e:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8005540:	4b39      	ldr	r3, [pc, #228]	@ (8005628 <HAL_GPIO_DeInit+0x198>)
 8005542:	685a      	ldr	r2, [r3, #4]
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	43db      	mvns	r3, r3
 8005548:	4937      	ldr	r1, [pc, #220]	@ (8005628 <HAL_GPIO_DeInit+0x198>)
 800554a:	4013      	ands	r3, r2
 800554c:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	f003 0303 	and.w	r3, r3, #3
 8005554:	009b      	lsls	r3, r3, #2
 8005556:	2207      	movs	r2, #7
 8005558:	fa02 f303 	lsl.w	r3, r2, r3
 800555c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800555e:	4a2f      	ldr	r2, [pc, #188]	@ (800561c <HAL_GPIO_DeInit+0x18c>)
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	089b      	lsrs	r3, r3, #2
 8005564:	3302      	adds	r3, #2
 8005566:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	43da      	mvns	r2, r3
 800556e:	482b      	ldr	r0, [pc, #172]	@ (800561c <HAL_GPIO_DeInit+0x18c>)
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	089b      	lsrs	r3, r3, #2
 8005574:	400a      	ands	r2, r1
 8005576:	3302      	adds	r3, #2
 8005578:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	005b      	lsls	r3, r3, #1
 8005584:	2103      	movs	r1, #3
 8005586:	fa01 f303 	lsl.w	r3, r1, r3
 800558a:	431a      	orrs	r2, r3
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	08da      	lsrs	r2, r3, #3
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	3208      	adds	r2, #8
 8005598:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	f003 0307 	and.w	r3, r3, #7
 80055a2:	009b      	lsls	r3, r3, #2
 80055a4:	220f      	movs	r2, #15
 80055a6:	fa02 f303 	lsl.w	r3, r2, r3
 80055aa:	43db      	mvns	r3, r3
 80055ac:	697a      	ldr	r2, [r7, #20]
 80055ae:	08d2      	lsrs	r2, r2, #3
 80055b0:	4019      	ands	r1, r3
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	3208      	adds	r2, #8
 80055b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	689a      	ldr	r2, [r3, #8]
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	005b      	lsls	r3, r3, #1
 80055c2:	2103      	movs	r1, #3
 80055c4:	fa01 f303 	lsl.w	r3, r1, r3
 80055c8:	43db      	mvns	r3, r3
 80055ca:	401a      	ands	r2, r3
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	685a      	ldr	r2, [r3, #4]
 80055d4:	2101      	movs	r1, #1
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	fa01 f303 	lsl.w	r3, r1, r3
 80055dc:	43db      	mvns	r3, r3
 80055de:	401a      	ands	r2, r3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	68da      	ldr	r2, [r3, #12]
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	005b      	lsls	r3, r3, #1
 80055ec:	2103      	movs	r1, #3
 80055ee:	fa01 f303 	lsl.w	r3, r1, r3
 80055f2:	43db      	mvns	r3, r3
 80055f4:	401a      	ands	r2, r3
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	60da      	str	r2, [r3, #12]
    }

    position++;
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	3301      	adds	r3, #1
 80055fe:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8005600:	683a      	ldr	r2, [r7, #0]
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	fa22 f303 	lsr.w	r3, r2, r3
 8005608:	2b00      	cmp	r3, #0
 800560a:	f47f af49 	bne.w	80054a0 <HAL_GPIO_DeInit+0x10>
  }
}
 800560e:	bf00      	nop
 8005610:	bf00      	nop
 8005612:	371c      	adds	r7, #28
 8005614:	46bd      	mov	sp, r7
 8005616:	bc80      	pop	{r7}
 8005618:	4770      	bx	lr
 800561a:	bf00      	nop
 800561c:	40010000 	.word	0x40010000
 8005620:	48000400 	.word	0x48000400
 8005624:	48000800 	.word	0x48000800
 8005628:	58000800 	.word	0x58000800

0800562c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800562c:	b480      	push	{r7}
 800562e:	b083      	sub	sp, #12
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	460b      	mov	r3, r1
 8005636:	807b      	strh	r3, [r7, #2]
 8005638:	4613      	mov	r3, r2
 800563a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800563c:	787b      	ldrb	r3, [r7, #1]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d003      	beq.n	800564a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005642:	887a      	ldrh	r2, [r7, #2]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005648:	e002      	b.n	8005650 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800564a:	887a      	ldrh	r2, [r7, #2]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005650:	bf00      	nop
 8005652:	370c      	adds	r7, #12
 8005654:	46bd      	mov	sp, r7
 8005656:	bc80      	pop	{r7}
 8005658:	4770      	bx	lr
	...

0800565c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b082      	sub	sp, #8
 8005660:	af00      	add	r7, sp, #0
 8005662:	4603      	mov	r3, r0
 8005664:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005666:	4b08      	ldr	r3, [pc, #32]	@ (8005688 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005668:	68da      	ldr	r2, [r3, #12]
 800566a:	88fb      	ldrh	r3, [r7, #6]
 800566c:	4013      	ands	r3, r2
 800566e:	2b00      	cmp	r3, #0
 8005670:	d006      	beq.n	8005680 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005672:	4a05      	ldr	r2, [pc, #20]	@ (8005688 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005674:	88fb      	ldrh	r3, [r7, #6]
 8005676:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005678:	88fb      	ldrh	r3, [r7, #6]
 800567a:	4618      	mov	r0, r3
 800567c:	f004 fec0 	bl	800a400 <HAL_GPIO_EXTI_Callback>
  }
}
 8005680:	bf00      	nop
 8005682:	3708      	adds	r7, #8
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}
 8005688:	58000800 	.word	0x58000800

0800568c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800568c:	b480      	push	{r7}
 800568e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005690:	4b04      	ldr	r3, [pc, #16]	@ (80056a4 <HAL_PWR_EnableBkUpAccess+0x18>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a03      	ldr	r2, [pc, #12]	@ (80056a4 <HAL_PWR_EnableBkUpAccess+0x18>)
 8005696:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800569a:	6013      	str	r3, [r2, #0]
}
 800569c:	bf00      	nop
 800569e:	46bd      	mov	sp, r7
 80056a0:	bc80      	pop	{r7}
 80056a2:	4770      	bx	lr
 80056a4:	58000400 	.word	0x58000400

080056a8 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b082      	sub	sp, #8
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	460b      	mov	r3, r1
 80056b2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d10c      	bne.n	80056d4 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 80056ba:	4b13      	ldr	r3, [pc, #76]	@ (8005708 <HAL_PWR_EnterSLEEPMode+0x60>)
 80056bc:	695b      	ldr	r3, [r3, #20]
 80056be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80056c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80056c6:	d10d      	bne.n	80056e4 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 80056c8:	f000 f83c 	bl	8005744 <HAL_PWREx_DisableLowPowerRunMode>
 80056cc:	4603      	mov	r3, r0
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d008      	beq.n	80056e4 <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 80056d2:	e015      	b.n	8005700 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 80056d4:	4b0c      	ldr	r3, [pc, #48]	@ (8005708 <HAL_PWR_EnterSLEEPMode+0x60>)
 80056d6:	695b      	ldr	r3, [r3, #20]
 80056d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d101      	bne.n	80056e4 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 80056e0:	f000 f822 	bl	8005728 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80056e4:	4b09      	ldr	r3, [pc, #36]	@ (800570c <HAL_PWR_EnterSLEEPMode+0x64>)
 80056e6:	691b      	ldr	r3, [r3, #16]
 80056e8:	4a08      	ldr	r2, [pc, #32]	@ (800570c <HAL_PWR_EnterSLEEPMode+0x64>)
 80056ea:	f023 0304 	bic.w	r3, r3, #4
 80056ee:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80056f0:	78fb      	ldrb	r3, [r7, #3]
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d101      	bne.n	80056fa <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80056f6:	bf30      	wfi
 80056f8:	e002      	b.n	8005700 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80056fa:	bf40      	sev
    __WFE();
 80056fc:	bf20      	wfe
    __WFE();
 80056fe:	bf20      	wfe
  }
}
 8005700:	3708      	adds	r7, #8
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
 8005706:	bf00      	nop
 8005708:	58000400 	.word	0x58000400
 800570c:	e000ed00 	.word	0xe000ed00

08005710 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005710:	b480      	push	{r7}
 8005712:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8005714:	4b03      	ldr	r3, [pc, #12]	@ (8005724 <HAL_PWREx_GetVoltageRange+0x14>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 800571c:	4618      	mov	r0, r3
 800571e:	46bd      	mov	sp, r7
 8005720:	bc80      	pop	{r7}
 8005722:	4770      	bx	lr
 8005724:	58000400 	.word	0x58000400

08005728 <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8005728:	b480      	push	{r7}
 800572a:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 800572c:	4b04      	ldr	r3, [pc, #16]	@ (8005740 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a03      	ldr	r2, [pc, #12]	@ (8005740 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8005732:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005736:	6013      	str	r3, [r2, #0]
}
 8005738:	bf00      	nop
 800573a:	46bd      	mov	sp, r7
 800573c:	bc80      	pop	{r7}
 800573e:	4770      	bx	lr
 8005740:	58000400 	.word	0x58000400

08005744 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8005744:	b480      	push	{r7}
 8005746:	b083      	sub	sp, #12
 8005748:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 800574a:	4b16      	ldr	r3, [pc, #88]	@ (80057a4 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a15      	ldr	r2, [pc, #84]	@ (80057a4 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8005750:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005754:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8005756:	4b14      	ldr	r3, [pc, #80]	@ (80057a8 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	2232      	movs	r2, #50	@ 0x32
 800575c:	fb02 f303 	mul.w	r3, r2, r3
 8005760:	4a12      	ldr	r2, [pc, #72]	@ (80057ac <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8005762:	fba2 2303 	umull	r2, r3, r2, r3
 8005766:	0c9b      	lsrs	r3, r3, #18
 8005768:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800576a:	e002      	b.n	8005772 <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	3b01      	subs	r3, #1
 8005770:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8005772:	4b0c      	ldr	r3, [pc, #48]	@ (80057a4 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8005774:	695b      	ldr	r3, [r3, #20]
 8005776:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800577a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800577e:	d102      	bne.n	8005786 <HAL_PWREx_DisableLowPowerRunMode+0x42>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d1f2      	bne.n	800576c <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8005786:	4b07      	ldr	r3, [pc, #28]	@ (80057a4 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8005788:	695b      	ldr	r3, [r3, #20]
 800578a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800578e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005792:	d101      	bne.n	8005798 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 8005794:	2303      	movs	r3, #3
 8005796:	e000      	b.n	800579a <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 8005798:	2300      	movs	r3, #0
}
 800579a:	4618      	mov	r0, r3
 800579c:	370c      	adds	r7, #12
 800579e:	46bd      	mov	sp, r7
 80057a0:	bc80      	pop	{r7}
 80057a2:	4770      	bx	lr
 80057a4:	58000400 	.word	0x58000400
 80057a8:	20000000 	.word	0x20000000
 80057ac:	431bde83 	.word	0x431bde83

080057b0 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b083      	sub	sp, #12
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	4603      	mov	r3, r0
 80057b8:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 80057ba:	4b10      	ldr	r3, [pc, #64]	@ (80057fc <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f023 0307 	bic.w	r3, r3, #7
 80057c2:	4a0e      	ldr	r2, [pc, #56]	@ (80057fc <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 80057c4:	f043 0302 	orr.w	r3, r3, #2
 80057c8:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80057ca:	4b0d      	ldr	r3, [pc, #52]	@ (8005800 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80057cc:	691b      	ldr	r3, [r3, #16]
 80057ce:	4a0c      	ldr	r2, [pc, #48]	@ (8005800 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80057d0:	f043 0304 	orr.w	r3, r3, #4
 80057d4:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 80057d6:	79fb      	ldrb	r3, [r7, #7]
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d101      	bne.n	80057e0 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80057dc:	bf30      	wfi
 80057de:	e002      	b.n	80057e6 <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80057e0:	bf40      	sev
    __WFE();
 80057e2:	bf20      	wfe
    __WFE();
 80057e4:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80057e6:	4b06      	ldr	r3, [pc, #24]	@ (8005800 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80057e8:	691b      	ldr	r3, [r3, #16]
 80057ea:	4a05      	ldr	r2, [pc, #20]	@ (8005800 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80057ec:	f023 0304 	bic.w	r3, r3, #4
 80057f0:	6113      	str	r3, [r2, #16]
}
 80057f2:	bf00      	nop
 80057f4:	370c      	adds	r7, #12
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bc80      	pop	{r7}
 80057fa:	4770      	bx	lr
 80057fc:	58000400 	.word	0x58000400
 8005800:	e000ed00 	.word	0xe000ed00

08005804 <LL_PWR_IsEnabledBkUpAccess>:
{
 8005804:	b480      	push	{r7}
 8005806:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8005808:	4b06      	ldr	r3, [pc, #24]	@ (8005824 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005810:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005814:	d101      	bne.n	800581a <LL_PWR_IsEnabledBkUpAccess+0x16>
 8005816:	2301      	movs	r3, #1
 8005818:	e000      	b.n	800581c <LL_PWR_IsEnabledBkUpAccess+0x18>
 800581a:	2300      	movs	r3, #0
}
 800581c:	4618      	mov	r0, r3
 800581e:	46bd      	mov	sp, r7
 8005820:	bc80      	pop	{r7}
 8005822:	4770      	bx	lr
 8005824:	58000400 	.word	0x58000400

08005828 <LL_RCC_HSE_EnableTcxo>:
{
 8005828:	b480      	push	{r7}
 800582a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800582c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005836:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800583a:	6013      	str	r3, [r2, #0]
}
 800583c:	bf00      	nop
 800583e:	46bd      	mov	sp, r7
 8005840:	bc80      	pop	{r7}
 8005842:	4770      	bx	lr

08005844 <LL_RCC_HSE_DisableTcxo>:
{
 8005844:	b480      	push	{r7}
 8005846:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8005848:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005852:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005856:	6013      	str	r3, [r2, #0]
}
 8005858:	bf00      	nop
 800585a:	46bd      	mov	sp, r7
 800585c:	bc80      	pop	{r7}
 800585e:	4770      	bx	lr

08005860 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8005860:	b480      	push	{r7}
 8005862:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8005864:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800586e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005872:	d101      	bne.n	8005878 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8005874:	2301      	movs	r3, #1
 8005876:	e000      	b.n	800587a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8005878:	2300      	movs	r3, #0
}
 800587a:	4618      	mov	r0, r3
 800587c:	46bd      	mov	sp, r7
 800587e:	bc80      	pop	{r7}
 8005880:	4770      	bx	lr

08005882 <LL_RCC_HSE_Enable>:
{
 8005882:	b480      	push	{r7}
 8005884:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005886:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005890:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005894:	6013      	str	r3, [r2, #0]
}
 8005896:	bf00      	nop
 8005898:	46bd      	mov	sp, r7
 800589a:	bc80      	pop	{r7}
 800589c:	4770      	bx	lr

0800589e <LL_RCC_HSE_Disable>:
{
 800589e:	b480      	push	{r7}
 80058a0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80058a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80058ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80058b0:	6013      	str	r3, [r2, #0]
}
 80058b2:	bf00      	nop
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bc80      	pop	{r7}
 80058b8:	4770      	bx	lr

080058ba <LL_RCC_HSE_IsReady>:
{
 80058ba:	b480      	push	{r7}
 80058bc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80058be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80058cc:	d101      	bne.n	80058d2 <LL_RCC_HSE_IsReady+0x18>
 80058ce:	2301      	movs	r3, #1
 80058d0:	e000      	b.n	80058d4 <LL_RCC_HSE_IsReady+0x1a>
 80058d2:	2300      	movs	r3, #0
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bc80      	pop	{r7}
 80058da:	4770      	bx	lr

080058dc <LL_RCC_HSI_Enable>:
{
 80058dc:	b480      	push	{r7}
 80058de:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80058e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80058ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058ee:	6013      	str	r3, [r2, #0]
}
 80058f0:	bf00      	nop
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bc80      	pop	{r7}
 80058f6:	4770      	bx	lr

080058f8 <LL_RCC_HSI_Disable>:
{
 80058f8:	b480      	push	{r7}
 80058fa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80058fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005906:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800590a:	6013      	str	r3, [r2, #0]
}
 800590c:	bf00      	nop
 800590e:	46bd      	mov	sp, r7
 8005910:	bc80      	pop	{r7}
 8005912:	4770      	bx	lr

08005914 <LL_RCC_HSI_IsReady>:
{
 8005914:	b480      	push	{r7}
 8005916:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005918:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005922:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005926:	d101      	bne.n	800592c <LL_RCC_HSI_IsReady+0x18>
 8005928:	2301      	movs	r3, #1
 800592a:	e000      	b.n	800592e <LL_RCC_HSI_IsReady+0x1a>
 800592c:	2300      	movs	r3, #0
}
 800592e:	4618      	mov	r0, r3
 8005930:	46bd      	mov	sp, r7
 8005932:	bc80      	pop	{r7}
 8005934:	4770      	bx	lr

08005936 <LL_RCC_HSI_SetCalibTrimming>:
{
 8005936:	b480      	push	{r7}
 8005938:	b083      	sub	sp, #12
 800593a:	af00      	add	r7, sp, #0
 800593c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800593e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	061b      	lsls	r3, r3, #24
 800594c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005950:	4313      	orrs	r3, r2
 8005952:	604b      	str	r3, [r1, #4]
}
 8005954:	bf00      	nop
 8005956:	370c      	adds	r7, #12
 8005958:	46bd      	mov	sp, r7
 800595a:	bc80      	pop	{r7}
 800595c:	4770      	bx	lr

0800595e <LL_RCC_LSE_IsReady>:
{
 800595e:	b480      	push	{r7}
 8005960:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005962:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005966:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800596a:	f003 0302 	and.w	r3, r3, #2
 800596e:	2b02      	cmp	r3, #2
 8005970:	d101      	bne.n	8005976 <LL_RCC_LSE_IsReady+0x18>
 8005972:	2301      	movs	r3, #1
 8005974:	e000      	b.n	8005978 <LL_RCC_LSE_IsReady+0x1a>
 8005976:	2300      	movs	r3, #0
}
 8005978:	4618      	mov	r0, r3
 800597a:	46bd      	mov	sp, r7
 800597c:	bc80      	pop	{r7}
 800597e:	4770      	bx	lr

08005980 <LL_RCC_LSI_Enable>:
{
 8005980:	b480      	push	{r7}
 8005982:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8005984:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005988:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800598c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005990:	f043 0301 	orr.w	r3, r3, #1
 8005994:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8005998:	bf00      	nop
 800599a:	46bd      	mov	sp, r7
 800599c:	bc80      	pop	{r7}
 800599e:	4770      	bx	lr

080059a0 <LL_RCC_LSI_Disable>:
{
 80059a0:	b480      	push	{r7}
 80059a2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80059a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059ac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80059b0:	f023 0301 	bic.w	r3, r3, #1
 80059b4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80059b8:	bf00      	nop
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bc80      	pop	{r7}
 80059be:	4770      	bx	lr

080059c0 <LL_RCC_LSI_IsReady>:
{
 80059c0:	b480      	push	{r7}
 80059c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80059c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059cc:	f003 0302 	and.w	r3, r3, #2
 80059d0:	2b02      	cmp	r3, #2
 80059d2:	d101      	bne.n	80059d8 <LL_RCC_LSI_IsReady+0x18>
 80059d4:	2301      	movs	r3, #1
 80059d6:	e000      	b.n	80059da <LL_RCC_LSI_IsReady+0x1a>
 80059d8:	2300      	movs	r3, #0
}
 80059da:	4618      	mov	r0, r3
 80059dc:	46bd      	mov	sp, r7
 80059de:	bc80      	pop	{r7}
 80059e0:	4770      	bx	lr

080059e2 <LL_RCC_MSI_Enable>:
{
 80059e2:	b480      	push	{r7}
 80059e4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80059e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80059f0:	f043 0301 	orr.w	r3, r3, #1
 80059f4:	6013      	str	r3, [r2, #0]
}
 80059f6:	bf00      	nop
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bc80      	pop	{r7}
 80059fc:	4770      	bx	lr

080059fe <LL_RCC_MSI_Disable>:
{
 80059fe:	b480      	push	{r7}
 8005a00:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8005a02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005a0c:	f023 0301 	bic.w	r3, r3, #1
 8005a10:	6013      	str	r3, [r2, #0]
}
 8005a12:	bf00      	nop
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bc80      	pop	{r7}
 8005a18:	4770      	bx	lr

08005a1a <LL_RCC_MSI_IsReady>:
{
 8005a1a:	b480      	push	{r7}
 8005a1c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005a1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f003 0302 	and.w	r3, r3, #2
 8005a28:	2b02      	cmp	r3, #2
 8005a2a:	d101      	bne.n	8005a30 <LL_RCC_MSI_IsReady+0x16>
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	e000      	b.n	8005a32 <LL_RCC_MSI_IsReady+0x18>
 8005a30:	2300      	movs	r3, #0
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bc80      	pop	{r7}
 8005a38:	4770      	bx	lr

08005a3a <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8005a3a:	b480      	push	{r7}
 8005a3c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8005a3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f003 0308 	and.w	r3, r3, #8
 8005a48:	2b08      	cmp	r3, #8
 8005a4a:	d101      	bne.n	8005a50 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	e000      	b.n	8005a52 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8005a50:	2300      	movs	r3, #0
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bc80      	pop	{r7}
 8005a58:	4770      	bx	lr

08005a5a <LL_RCC_MSI_GetRange>:
{
 8005a5a:	b480      	push	{r7}
 8005a5c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8005a5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bc80      	pop	{r7}
 8005a6e:	4770      	bx	lr

08005a70 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8005a70:	b480      	push	{r7}
 8005a72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8005a74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a78:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a7c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bc80      	pop	{r7}
 8005a86:	4770      	bx	lr

08005a88 <LL_RCC_MSI_SetCalibTrimming>:
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b083      	sub	sp, #12
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005a90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	021b      	lsls	r3, r3, #8
 8005a9e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	604b      	str	r3, [r1, #4]
}
 8005aa6:	bf00      	nop
 8005aa8:	370c      	adds	r7, #12
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bc80      	pop	{r7}
 8005aae:	4770      	bx	lr

08005ab0 <LL_RCC_SetSysClkSource>:
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b083      	sub	sp, #12
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005ab8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	f023 0203 	bic.w	r2, r3, #3
 8005ac2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	608b      	str	r3, [r1, #8]
}
 8005acc:	bf00      	nop
 8005ace:	370c      	adds	r7, #12
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bc80      	pop	{r7}
 8005ad4:	4770      	bx	lr

08005ad6 <LL_RCC_GetSysClkSource>:
{
 8005ad6:	b480      	push	{r7}
 8005ad8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005ada:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	f003 030c 	and.w	r3, r3, #12
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bc80      	pop	{r7}
 8005aea:	4770      	bx	lr

08005aec <LL_RCC_SetAHBPrescaler>:
{
 8005aec:	b480      	push	{r7}
 8005aee:	b083      	sub	sp, #12
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8005af4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005afe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	608b      	str	r3, [r1, #8]
}
 8005b08:	bf00      	nop
 8005b0a:	370c      	adds	r7, #12
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bc80      	pop	{r7}
 8005b10:	4770      	bx	lr

08005b12 <LL_RCC_SetAHB3Prescaler>:
{
 8005b12:	b480      	push	{r7}
 8005b14:	b083      	sub	sp, #12
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8005b1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b1e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005b22:	f023 020f 	bic.w	r2, r3, #15
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	091b      	lsrs	r3, r3, #4
 8005b2a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8005b34:	bf00      	nop
 8005b36:	370c      	adds	r7, #12
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bc80      	pop	{r7}
 8005b3c:	4770      	bx	lr

08005b3e <LL_RCC_SetAPB1Prescaler>:
{
 8005b3e:	b480      	push	{r7}
 8005b40:	b083      	sub	sp, #12
 8005b42:	af00      	add	r7, sp, #0
 8005b44:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005b46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005b50:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	608b      	str	r3, [r1, #8]
}
 8005b5a:	bf00      	nop
 8005b5c:	370c      	adds	r7, #12
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bc80      	pop	{r7}
 8005b62:	4770      	bx	lr

08005b64 <LL_RCC_SetAPB2Prescaler>:
{
 8005b64:	b480      	push	{r7}
 8005b66:	b083      	sub	sp, #12
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005b6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005b76:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	608b      	str	r3, [r1, #8]
}
 8005b80:	bf00      	nop
 8005b82:	370c      	adds	r7, #12
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bc80      	pop	{r7}
 8005b88:	4770      	bx	lr

08005b8a <LL_RCC_GetAHBPrescaler>:
{
 8005b8a:	b480      	push	{r7}
 8005b8c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005b8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bc80      	pop	{r7}
 8005b9e:	4770      	bx	lr

08005ba0 <LL_RCC_GetAHB3Prescaler>:
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005ba4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ba8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005bac:	011b      	lsls	r3, r3, #4
 8005bae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bc80      	pop	{r7}
 8005bb8:	4770      	bx	lr

08005bba <LL_RCC_GetAPB1Prescaler>:
{
 8005bba:	b480      	push	{r7}
 8005bbc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005bbe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bc80      	pop	{r7}
 8005bce:	4770      	bx	lr

08005bd0 <LL_RCC_GetAPB2Prescaler>:
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005bd4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bc80      	pop	{r7}
 8005be4:	4770      	bx	lr

08005be6 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8005be6:	b480      	push	{r7}
 8005be8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005bea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005bf4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005bf8:	6013      	str	r3, [r2, #0]
}
 8005bfa:	bf00      	nop
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bc80      	pop	{r7}
 8005c00:	4770      	bx	lr

08005c02 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8005c02:	b480      	push	{r7}
 8005c04:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005c06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005c10:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005c14:	6013      	str	r3, [r2, #0]
}
 8005c16:	bf00      	nop
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bc80      	pop	{r7}
 8005c1c:	4770      	bx	lr

08005c1e <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8005c1e:	b480      	push	{r7}
 8005c20:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005c22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c2c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005c30:	d101      	bne.n	8005c36 <LL_RCC_PLL_IsReady+0x18>
 8005c32:	2301      	movs	r3, #1
 8005c34:	e000      	b.n	8005c38 <LL_RCC_PLL_IsReady+0x1a>
 8005c36:	2300      	movs	r3, #0
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bc80      	pop	{r7}
 8005c3e:	4770      	bx	lr

08005c40 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005c40:	b480      	push	{r7}
 8005c42:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005c44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c48:	68db      	ldr	r3, [r3, #12]
 8005c4a:	0a1b      	lsrs	r3, r3, #8
 8005c4c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bc80      	pop	{r7}
 8005c56:	4770      	bx	lr

08005c58 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005c5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c60:	68db      	ldr	r3, [r3, #12]
 8005c62:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bc80      	pop	{r7}
 8005c6c:	4770      	bx	lr

08005c6e <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005c6e:	b480      	push	{r7}
 8005c70:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005c72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c76:	68db      	ldr	r3, [r3, #12]
 8005c78:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bc80      	pop	{r7}
 8005c82:	4770      	bx	lr

08005c84 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005c84:	b480      	push	{r7}
 8005c86:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005c88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c8c:	68db      	ldr	r3, [r3, #12]
 8005c8e:	f003 0303 	and.w	r3, r3, #3
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bc80      	pop	{r7}
 8005c98:	4770      	bx	lr

08005c9a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8005c9a:	b480      	push	{r7}
 8005c9c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8005c9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005ca8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005cac:	d101      	bne.n	8005cb2 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e000      	b.n	8005cb4 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8005cb2:	2300      	movs	r3, #0
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bc80      	pop	{r7}
 8005cba:	4770      	bx	lr

08005cbc <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005cc0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005cc4:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005cc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005ccc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005cd0:	d101      	bne.n	8005cd6 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	e000      	b.n	8005cd8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8005cd6:	2300      	movs	r3, #0
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bc80      	pop	{r7}
 8005cde:	4770      	bx	lr

08005ce0 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005ce4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005cf2:	d101      	bne.n	8005cf8 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	e000      	b.n	8005cfa <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8005cf8:	2300      	movs	r3, #0
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bc80      	pop	{r7}
 8005d00:	4770      	bx	lr

08005d02 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8005d02:	b480      	push	{r7}
 8005d04:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8005d06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005d10:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005d14:	d101      	bne.n	8005d1a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8005d16:	2301      	movs	r3, #1
 8005d18:	e000      	b.n	8005d1c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8005d1a:	2300      	movs	r3, #0
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bc80      	pop	{r7}
 8005d22:	4770      	bx	lr

08005d24 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b088      	sub	sp, #32
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d101      	bne.n	8005d36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	e38b      	b.n	800644e <HAL_RCC_OscConfig+0x72a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d36:	f7ff fece 	bl	8005ad6 <LL_RCC_GetSysClkSource>
 8005d3a:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005d3c:	f7ff ffa2 	bl	8005c84 <LL_RCC_PLL_GetMainSource>
 8005d40:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f003 0320 	and.w	r3, r3, #32
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	f000 80c9 	beq.w	8005ee2 <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005d50:	69fb      	ldr	r3, [r7, #28]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d005      	beq.n	8005d62 <HAL_RCC_OscConfig+0x3e>
 8005d56:	69fb      	ldr	r3, [r7, #28]
 8005d58:	2b0c      	cmp	r3, #12
 8005d5a:	d17b      	bne.n	8005e54 <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005d5c:	69bb      	ldr	r3, [r7, #24]
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	d178      	bne.n	8005e54 <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005d62:	f7ff fe5a 	bl	8005a1a <LL_RCC_MSI_IsReady>
 8005d66:	4603      	mov	r3, r0
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d005      	beq.n	8005d78 <HAL_RCC_OscConfig+0x54>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6a1b      	ldr	r3, [r3, #32]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d101      	bne.n	8005d78 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8005d74:	2301      	movs	r3, #1
 8005d76:	e36a      	b.n	800644e <HAL_RCC_OscConfig+0x72a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005d7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f003 0308 	and.w	r3, r3, #8
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d005      	beq.n	8005d96 <HAL_RCC_OscConfig+0x72>
 8005d8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005d94:	e006      	b.n	8005da4 <HAL_RCC_OscConfig+0x80>
 8005d96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d9e:	091b      	lsrs	r3, r3, #4
 8005da0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d222      	bcs.n	8005dee <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dac:	4618      	mov	r0, r3
 8005dae:	f000 fd51 	bl	8006854 <RCC_SetFlashLatencyFromMSIRange>
 8005db2:	4603      	mov	r3, r0
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d001      	beq.n	8005dbc <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	e348      	b.n	800644e <HAL_RCC_OscConfig+0x72a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005dbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005dc6:	f043 0308 	orr.w	r3, r3, #8
 8005dca:	6013      	str	r3, [r2, #0]
 8005dcc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dda:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005dde:	4313      	orrs	r3, r2
 8005de0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005de6:	4618      	mov	r0, r3
 8005de8:	f7ff fe4e 	bl	8005a88 <LL_RCC_MSI_SetCalibTrimming>
 8005dec:	e021      	b.n	8005e32 <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005dee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005df8:	f043 0308 	orr.w	r3, r3, #8
 8005dfc:	6013      	str	r3, [r2, #0]
 8005dfe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e0c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005e10:	4313      	orrs	r3, r2
 8005e12:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f7ff fe35 	bl	8005a88 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e22:	4618      	mov	r0, r3
 8005e24:	f000 fd16 	bl	8006854 <RCC_SetFlashLatencyFromMSIRange>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d001      	beq.n	8005e32 <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	e30d      	b.n	800644e <HAL_RCC_OscConfig+0x72a>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005e32:	f000 fcd7 	bl	80067e4 <HAL_RCC_GetHCLKFreq>
 8005e36:	4603      	mov	r3, r0
 8005e38:	4aa1      	ldr	r2, [pc, #644]	@ (80060c0 <HAL_RCC_OscConfig+0x39c>)
 8005e3a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005e3c:	4ba1      	ldr	r3, [pc, #644]	@ (80060c4 <HAL_RCC_OscConfig+0x3a0>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4618      	mov	r0, r3
 8005e42:	f7fc f9b5 	bl	80021b0 <HAL_InitTick>
 8005e46:	4603      	mov	r3, r0
 8005e48:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8005e4a:	7cfb      	ldrb	r3, [r7, #19]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d047      	beq.n	8005ee0 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 8005e50:	7cfb      	ldrb	r3, [r7, #19]
 8005e52:	e2fc      	b.n	800644e <HAL_RCC_OscConfig+0x72a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6a1b      	ldr	r3, [r3, #32]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d02c      	beq.n	8005eb6 <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005e5c:	f7ff fdc1 	bl	80059e2 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005e60:	f7fc f9b0 	bl	80021c4 <HAL_GetTick>
 8005e64:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8005e66:	e008      	b.n	8005e7a <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005e68:	f7fc f9ac 	bl	80021c4 <HAL_GetTick>
 8005e6c:	4602      	mov	r2, r0
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	1ad3      	subs	r3, r2, r3
 8005e72:	2b02      	cmp	r3, #2
 8005e74:	d901      	bls.n	8005e7a <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 8005e76:	2303      	movs	r3, #3
 8005e78:	e2e9      	b.n	800644e <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() == 0U)
 8005e7a:	f7ff fdce 	bl	8005a1a <LL_RCC_MSI_IsReady>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d0f1      	beq.n	8005e68 <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005e84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005e8e:	f043 0308 	orr.w	r3, r3, #8
 8005e92:	6013      	str	r3, [r2, #0]
 8005e94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ea2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f7ff fdea 	bl	8005a88 <LL_RCC_MSI_SetCalibTrimming>
 8005eb4:	e015      	b.n	8005ee2 <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005eb6:	f7ff fda2 	bl	80059fe <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005eba:	f7fc f983 	bl	80021c4 <HAL_GetTick>
 8005ebe:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8005ec0:	e008      	b.n	8005ed4 <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005ec2:	f7fc f97f 	bl	80021c4 <HAL_GetTick>
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	1ad3      	subs	r3, r2, r3
 8005ecc:	2b02      	cmp	r3, #2
 8005ece:	d901      	bls.n	8005ed4 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8005ed0:	2303      	movs	r3, #3
 8005ed2:	e2bc      	b.n	800644e <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() != 0U)
 8005ed4:	f7ff fda1 	bl	8005a1a <LL_RCC_MSI_IsReady>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d1f1      	bne.n	8005ec2 <HAL_RCC_OscConfig+0x19e>
 8005ede:	e000      	b.n	8005ee2 <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005ee0:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f003 0301 	and.w	r3, r3, #1
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d05f      	beq.n	8005fae <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005eee:	69fb      	ldr	r3, [r7, #28]
 8005ef0:	2b08      	cmp	r3, #8
 8005ef2:	d005      	beq.n	8005f00 <HAL_RCC_OscConfig+0x1dc>
 8005ef4:	69fb      	ldr	r3, [r7, #28]
 8005ef6:	2b0c      	cmp	r3, #12
 8005ef8:	d10d      	bne.n	8005f16 <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005efa:	69bb      	ldr	r3, [r7, #24]
 8005efc:	2b03      	cmp	r3, #3
 8005efe:	d10a      	bne.n	8005f16 <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f00:	f7ff fcdb 	bl	80058ba <LL_RCC_HSE_IsReady>
 8005f04:	4603      	mov	r3, r0
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d050      	beq.n	8005fac <HAL_RCC_OscConfig+0x288>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d14c      	bne.n	8005fac <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	e29b      	b.n	800644e <HAL_RCC_OscConfig+0x72a>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8005f16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f34:	d102      	bne.n	8005f3c <HAL_RCC_OscConfig+0x218>
 8005f36:	f7ff fca4 	bl	8005882 <LL_RCC_HSE_Enable>
 8005f3a:	e00d      	b.n	8005f58 <HAL_RCC_OscConfig+0x234>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8005f44:	d104      	bne.n	8005f50 <HAL_RCC_OscConfig+0x22c>
 8005f46:	f7ff fc6f 	bl	8005828 <LL_RCC_HSE_EnableTcxo>
 8005f4a:	f7ff fc9a 	bl	8005882 <LL_RCC_HSE_Enable>
 8005f4e:	e003      	b.n	8005f58 <HAL_RCC_OscConfig+0x234>
 8005f50:	f7ff fca5 	bl	800589e <LL_RCC_HSE_Disable>
 8005f54:	f7ff fc76 	bl	8005844 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d012      	beq.n	8005f86 <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f60:	f7fc f930 	bl	80021c4 <HAL_GetTick>
 8005f64:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8005f66:	e008      	b.n	8005f7a <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f68:	f7fc f92c 	bl	80021c4 <HAL_GetTick>
 8005f6c:	4602      	mov	r2, r0
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	1ad3      	subs	r3, r2, r3
 8005f72:	2b64      	cmp	r3, #100	@ 0x64
 8005f74:	d901      	bls.n	8005f7a <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8005f76:	2303      	movs	r3, #3
 8005f78:	e269      	b.n	800644e <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() == 0U)
 8005f7a:	f7ff fc9e 	bl	80058ba <LL_RCC_HSE_IsReady>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d0f1      	beq.n	8005f68 <HAL_RCC_OscConfig+0x244>
 8005f84:	e013      	b.n	8005fae <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f86:	f7fc f91d 	bl	80021c4 <HAL_GetTick>
 8005f8a:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8005f8c:	e008      	b.n	8005fa0 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f8e:	f7fc f919 	bl	80021c4 <HAL_GetTick>
 8005f92:	4602      	mov	r2, r0
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	1ad3      	subs	r3, r2, r3
 8005f98:	2b64      	cmp	r3, #100	@ 0x64
 8005f9a:	d901      	bls.n	8005fa0 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 8005f9c:	2303      	movs	r3, #3
 8005f9e:	e256      	b.n	800644e <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005fa0:	f7ff fc8b 	bl	80058ba <LL_RCC_HSE_IsReady>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d1f1      	bne.n	8005f8e <HAL_RCC_OscConfig+0x26a>
 8005faa:	e000      	b.n	8005fae <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fac:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f003 0302 	and.w	r3, r3, #2
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d04b      	beq.n	8006052 <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005fba:	69fb      	ldr	r3, [r7, #28]
 8005fbc:	2b04      	cmp	r3, #4
 8005fbe:	d005      	beq.n	8005fcc <HAL_RCC_OscConfig+0x2a8>
 8005fc0:	69fb      	ldr	r3, [r7, #28]
 8005fc2:	2b0c      	cmp	r3, #12
 8005fc4:	d113      	bne.n	8005fee <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005fc6:	69bb      	ldr	r3, [r7, #24]
 8005fc8:	2b02      	cmp	r3, #2
 8005fca:	d110      	bne.n	8005fee <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005fcc:	f7ff fca2 	bl	8005914 <LL_RCC_HSI_IsReady>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d005      	beq.n	8005fe2 <HAL_RCC_OscConfig+0x2be>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	691b      	ldr	r3, [r3, #16]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d101      	bne.n	8005fe2 <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	e235      	b.n	800644e <HAL_RCC_OscConfig+0x72a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	695b      	ldr	r3, [r3, #20]
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f7ff fca5 	bl	8005936 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005fec:	e031      	b.n	8006052 <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	691b      	ldr	r3, [r3, #16]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d019      	beq.n	800602a <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ff6:	f7ff fc71 	bl	80058dc <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ffa:	f7fc f8e3 	bl	80021c4 <HAL_GetTick>
 8005ffe:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8006000:	e008      	b.n	8006014 <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006002:	f7fc f8df 	bl	80021c4 <HAL_GetTick>
 8006006:	4602      	mov	r2, r0
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	1ad3      	subs	r3, r2, r3
 800600c:	2b02      	cmp	r3, #2
 800600e:	d901      	bls.n	8006014 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8006010:	2303      	movs	r3, #3
 8006012:	e21c      	b.n	800644e <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() == 0U)
 8006014:	f7ff fc7e 	bl	8005914 <LL_RCC_HSI_IsReady>
 8006018:	4603      	mov	r3, r0
 800601a:	2b00      	cmp	r3, #0
 800601c:	d0f1      	beq.n	8006002 <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	695b      	ldr	r3, [r3, #20]
 8006022:	4618      	mov	r0, r3
 8006024:	f7ff fc87 	bl	8005936 <LL_RCC_HSI_SetCalibTrimming>
 8006028:	e013      	b.n	8006052 <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800602a:	f7ff fc65 	bl	80058f8 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800602e:	f7fc f8c9 	bl	80021c4 <HAL_GetTick>
 8006032:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8006034:	e008      	b.n	8006048 <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006036:	f7fc f8c5 	bl	80021c4 <HAL_GetTick>
 800603a:	4602      	mov	r2, r0
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	1ad3      	subs	r3, r2, r3
 8006040:	2b02      	cmp	r3, #2
 8006042:	d901      	bls.n	8006048 <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 8006044:	2303      	movs	r3, #3
 8006046:	e202      	b.n	800644e <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() != 0U)
 8006048:	f7ff fc64 	bl	8005914 <LL_RCC_HSI_IsReady>
 800604c:	4603      	mov	r3, r0
 800604e:	2b00      	cmp	r3, #0
 8006050:	d1f1      	bne.n	8006036 <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f003 0308 	and.w	r3, r3, #8
 800605a:	2b00      	cmp	r3, #0
 800605c:	d06f      	beq.n	800613e <HAL_RCC_OscConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	699b      	ldr	r3, [r3, #24]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d057      	beq.n	8006116 <HAL_RCC_OscConfig+0x3f2>
    {
      uint32_t csr_temp = RCC->CSR;
 8006066:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800606a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800606e:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	69da      	ldr	r2, [r3, #28]
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f003 0310 	and.w	r3, r3, #16
 800607a:	429a      	cmp	r2, r3
 800607c:	d036      	beq.n	80060ec <HAL_RCC_OscConfig+0x3c8>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	f003 0302 	and.w	r3, r3, #2
 8006084:	2b00      	cmp	r3, #0
 8006086:	d006      	beq.n	8006096 <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800608e:	2b00      	cmp	r3, #0
 8006090:	d101      	bne.n	8006096 <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	e1db      	b.n	800644e <HAL_RCC_OscConfig+0x72a>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	f003 0301 	and.w	r3, r3, #1
 800609c:	2b00      	cmp	r3, #0
 800609e:	d018      	beq.n	80060d2 <HAL_RCC_OscConfig+0x3ae>
        {
          __HAL_RCC_LSI_DISABLE();
 80060a0:	f7ff fc7e 	bl	80059a0 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80060a4:	f7fc f88e 	bl	80021c4 <HAL_GetTick>
 80060a8:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80060aa:	e00d      	b.n	80060c8 <HAL_RCC_OscConfig+0x3a4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80060ac:	f7fc f88a 	bl	80021c4 <HAL_GetTick>
 80060b0:	4602      	mov	r2, r0
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	1ad3      	subs	r3, r2, r3
 80060b6:	2b11      	cmp	r3, #17
 80060b8:	d906      	bls.n	80060c8 <HAL_RCC_OscConfig+0x3a4>
            {
              return HAL_TIMEOUT;
 80060ba:	2303      	movs	r3, #3
 80060bc:	e1c7      	b.n	800644e <HAL_RCC_OscConfig+0x72a>
 80060be:	bf00      	nop
 80060c0:	20000000 	.word	0x20000000
 80060c4:	20000004 	.word	0x20000004
          while (LL_RCC_LSI_IsReady() != 0U)
 80060c8:	f7ff fc7a 	bl	80059c0 <LL_RCC_LSI_IsReady>
 80060cc:	4603      	mov	r3, r0
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d1ec      	bne.n	80060ac <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80060d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80060d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80060da:	f023 0210 	bic.w	r2, r3, #16
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	69db      	ldr	r3, [r3, #28]
 80060e2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80060e6:	4313      	orrs	r3, r2
 80060e8:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80060ec:	f7ff fc48 	bl	8005980 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060f0:	f7fc f868 	bl	80021c4 <HAL_GetTick>
 80060f4:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 80060f6:	e008      	b.n	800610a <HAL_RCC_OscConfig+0x3e6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80060f8:	f7fc f864 	bl	80021c4 <HAL_GetTick>
 80060fc:	4602      	mov	r2, r0
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	1ad3      	subs	r3, r2, r3
 8006102:	2b11      	cmp	r3, #17
 8006104:	d901      	bls.n	800610a <HAL_RCC_OscConfig+0x3e6>
        {
          return HAL_TIMEOUT;
 8006106:	2303      	movs	r3, #3
 8006108:	e1a1      	b.n	800644e <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() == 0U)
 800610a:	f7ff fc59 	bl	80059c0 <LL_RCC_LSI_IsReady>
 800610e:	4603      	mov	r3, r0
 8006110:	2b00      	cmp	r3, #0
 8006112:	d0f1      	beq.n	80060f8 <HAL_RCC_OscConfig+0x3d4>
 8006114:	e013      	b.n	800613e <HAL_RCC_OscConfig+0x41a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006116:	f7ff fc43 	bl	80059a0 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800611a:	f7fc f853 	bl	80021c4 <HAL_GetTick>
 800611e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8006120:	e008      	b.n	8006134 <HAL_RCC_OscConfig+0x410>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006122:	f7fc f84f 	bl	80021c4 <HAL_GetTick>
 8006126:	4602      	mov	r2, r0
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	1ad3      	subs	r3, r2, r3
 800612c:	2b11      	cmp	r3, #17
 800612e:	d901      	bls.n	8006134 <HAL_RCC_OscConfig+0x410>
        {
          return HAL_TIMEOUT;
 8006130:	2303      	movs	r3, #3
 8006132:	e18c      	b.n	800644e <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() != 0U)
 8006134:	f7ff fc44 	bl	80059c0 <LL_RCC_LSI_IsReady>
 8006138:	4603      	mov	r3, r0
 800613a:	2b00      	cmp	r3, #0
 800613c:	d1f1      	bne.n	8006122 <HAL_RCC_OscConfig+0x3fe>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f003 0304 	and.w	r3, r3, #4
 8006146:	2b00      	cmp	r3, #0
 8006148:	f000 80d8 	beq.w	80062fc <HAL_RCC_OscConfig+0x5d8>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800614c:	f7ff fb5a 	bl	8005804 <LL_PWR_IsEnabledBkUpAccess>
 8006150:	4603      	mov	r3, r0
 8006152:	2b00      	cmp	r3, #0
 8006154:	d113      	bne.n	800617e <HAL_RCC_OscConfig+0x45a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006156:	f7ff fa99 	bl	800568c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800615a:	f7fc f833 	bl	80021c4 <HAL_GetTick>
 800615e:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8006160:	e008      	b.n	8006174 <HAL_RCC_OscConfig+0x450>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006162:	f7fc f82f 	bl	80021c4 <HAL_GetTick>
 8006166:	4602      	mov	r2, r0
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	1ad3      	subs	r3, r2, r3
 800616c:	2b02      	cmp	r3, #2
 800616e:	d901      	bls.n	8006174 <HAL_RCC_OscConfig+0x450>
        {
          return HAL_TIMEOUT;
 8006170:	2303      	movs	r3, #3
 8006172:	e16c      	b.n	800644e <HAL_RCC_OscConfig+0x72a>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8006174:	f7ff fb46 	bl	8005804 <LL_PWR_IsEnabledBkUpAccess>
 8006178:	4603      	mov	r3, r0
 800617a:	2b00      	cmp	r3, #0
 800617c:	d0f1      	beq.n	8006162 <HAL_RCC_OscConfig+0x43e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	68db      	ldr	r3, [r3, #12]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d07b      	beq.n	800627e <HAL_RCC_OscConfig+0x55a>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	68db      	ldr	r3, [r3, #12]
 800618a:	2b85      	cmp	r3, #133	@ 0x85
 800618c:	d003      	beq.n	8006196 <HAL_RCC_OscConfig+0x472>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	68db      	ldr	r3, [r3, #12]
 8006192:	2b05      	cmp	r3, #5
 8006194:	d109      	bne.n	80061aa <HAL_RCC_OscConfig+0x486>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006196:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800619a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800619e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80061a2:	f043 0304 	orr.w	r3, r3, #4
 80061a6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061aa:	f7fc f80b 	bl	80021c4 <HAL_GetTick>
 80061ae:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80061b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80061b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061b8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80061bc:	f043 0301 	orr.w	r3, r3, #1
 80061c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80061c4:	e00a      	b.n	80061dc <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061c6:	f7fb fffd 	bl	80021c4 <HAL_GetTick>
 80061ca:	4602      	mov	r2, r0
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	1ad3      	subs	r3, r2, r3
 80061d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d901      	bls.n	80061dc <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 80061d8:	2303      	movs	r3, #3
 80061da:	e138      	b.n	800644e <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() == 0U)
 80061dc:	f7ff fbbf 	bl	800595e <LL_RCC_LSE_IsReady>
 80061e0:	4603      	mov	r3, r0
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d0ef      	beq.n	80061c6 <HAL_RCC_OscConfig+0x4a2>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	68db      	ldr	r3, [r3, #12]
 80061ea:	2b81      	cmp	r3, #129	@ 0x81
 80061ec:	d003      	beq.n	80061f6 <HAL_RCC_OscConfig+0x4d2>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	68db      	ldr	r3, [r3, #12]
 80061f2:	2b85      	cmp	r3, #133	@ 0x85
 80061f4:	d121      	bne.n	800623a <HAL_RCC_OscConfig+0x516>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061f6:	f7fb ffe5 	bl	80021c4 <HAL_GetTick>
 80061fa:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80061fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006200:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006204:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006208:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800620c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006210:	e00a      	b.n	8006228 <HAL_RCC_OscConfig+0x504>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006212:	f7fb ffd7 	bl	80021c4 <HAL_GetTick>
 8006216:	4602      	mov	r2, r0
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	1ad3      	subs	r3, r2, r3
 800621c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006220:	4293      	cmp	r3, r2
 8006222:	d901      	bls.n	8006228 <HAL_RCC_OscConfig+0x504>
          {
            return HAL_TIMEOUT;
 8006224:	2303      	movs	r3, #3
 8006226:	e112      	b.n	800644e <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006228:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800622c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006230:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006234:	2b00      	cmp	r3, #0
 8006236:	d0ec      	beq.n	8006212 <HAL_RCC_OscConfig+0x4ee>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8006238:	e060      	b.n	80062fc <HAL_RCC_OscConfig+0x5d8>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800623a:	f7fb ffc3 	bl	80021c4 <HAL_GetTick>
 800623e:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006240:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006244:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006248:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800624c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006250:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006254:	e00a      	b.n	800626c <HAL_RCC_OscConfig+0x548>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006256:	f7fb ffb5 	bl	80021c4 <HAL_GetTick>
 800625a:	4602      	mov	r2, r0
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	1ad3      	subs	r3, r2, r3
 8006260:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006264:	4293      	cmp	r3, r2
 8006266:	d901      	bls.n	800626c <HAL_RCC_OscConfig+0x548>
          {
            return HAL_TIMEOUT;
 8006268:	2303      	movs	r3, #3
 800626a:	e0f0      	b.n	800644e <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800626c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006270:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006274:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006278:	2b00      	cmp	r3, #0
 800627a:	d1ec      	bne.n	8006256 <HAL_RCC_OscConfig+0x532>
 800627c:	e03e      	b.n	80062fc <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800627e:	f7fb ffa1 	bl	80021c4 <HAL_GetTick>
 8006282:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006284:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006288:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800628c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006290:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006294:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006298:	e00a      	b.n	80062b0 <HAL_RCC_OscConfig+0x58c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800629a:	f7fb ff93 	bl	80021c4 <HAL_GetTick>
 800629e:	4602      	mov	r2, r0
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	1ad3      	subs	r3, r2, r3
 80062a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d901      	bls.n	80062b0 <HAL_RCC_OscConfig+0x58c>
        {
          return HAL_TIMEOUT;
 80062ac:	2303      	movs	r3, #3
 80062ae:	e0ce      	b.n	800644e <HAL_RCC_OscConfig+0x72a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80062b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d1ec      	bne.n	800629a <HAL_RCC_OscConfig+0x576>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062c0:	f7fb ff80 	bl	80021c4 <HAL_GetTick>
 80062c4:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80062c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062ce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80062d2:	f023 0301 	bic.w	r3, r3, #1
 80062d6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80062da:	e00a      	b.n	80062f2 <HAL_RCC_OscConfig+0x5ce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062dc:	f7fb ff72 	bl	80021c4 <HAL_GetTick>
 80062e0:	4602      	mov	r2, r0
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	1ad3      	subs	r3, r2, r3
 80062e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d901      	bls.n	80062f2 <HAL_RCC_OscConfig+0x5ce>
        {
          return HAL_TIMEOUT;
 80062ee:	2303      	movs	r3, #3
 80062f0:	e0ad      	b.n	800644e <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() != 0U)
 80062f2:	f7ff fb34 	bl	800595e <LL_RCC_LSE_IsReady>
 80062f6:	4603      	mov	r3, r0
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d1ef      	bne.n	80062dc <HAL_RCC_OscConfig+0x5b8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006300:	2b00      	cmp	r3, #0
 8006302:	f000 80a3 	beq.w	800644c <HAL_RCC_OscConfig+0x728>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006306:	69fb      	ldr	r3, [r7, #28]
 8006308:	2b0c      	cmp	r3, #12
 800630a:	d076      	beq.n	80063fa <HAL_RCC_OscConfig+0x6d6>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006310:	2b02      	cmp	r3, #2
 8006312:	d14b      	bne.n	80063ac <HAL_RCC_OscConfig+0x688>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006314:	f7ff fc75 	bl	8005c02 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006318:	f7fb ff54 	bl	80021c4 <HAL_GetTick>
 800631c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 800631e:	e008      	b.n	8006332 <HAL_RCC_OscConfig+0x60e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006320:	f7fb ff50 	bl	80021c4 <HAL_GetTick>
 8006324:	4602      	mov	r2, r0
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	1ad3      	subs	r3, r2, r3
 800632a:	2b0a      	cmp	r3, #10
 800632c:	d901      	bls.n	8006332 <HAL_RCC_OscConfig+0x60e>
          {
            return HAL_TIMEOUT;
 800632e:	2303      	movs	r3, #3
 8006330:	e08d      	b.n	800644e <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 8006332:	f7ff fc74 	bl	8005c1e <LL_RCC_PLL_IsReady>
 8006336:	4603      	mov	r3, r0
 8006338:	2b00      	cmp	r3, #0
 800633a:	d1f1      	bne.n	8006320 <HAL_RCC_OscConfig+0x5fc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800633c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006340:	68da      	ldr	r2, [r3, #12]
 8006342:	4b45      	ldr	r3, [pc, #276]	@ (8006458 <HAL_RCC_OscConfig+0x734>)
 8006344:	4013      	ands	r3, r2
 8006346:	687a      	ldr	r2, [r7, #4]
 8006348:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800634a:	687a      	ldr	r2, [r7, #4]
 800634c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800634e:	4311      	orrs	r1, r2
 8006350:	687a      	ldr	r2, [r7, #4]
 8006352:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006354:	0212      	lsls	r2, r2, #8
 8006356:	4311      	orrs	r1, r2
 8006358:	687a      	ldr	r2, [r7, #4]
 800635a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800635c:	4311      	orrs	r1, r2
 800635e:	687a      	ldr	r2, [r7, #4]
 8006360:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006362:	4311      	orrs	r1, r2
 8006364:	687a      	ldr	r2, [r7, #4]
 8006366:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8006368:	430a      	orrs	r2, r1
 800636a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800636e:	4313      	orrs	r3, r2
 8006370:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006372:	f7ff fc38 	bl	8005be6 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006376:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800637a:	68db      	ldr	r3, [r3, #12]
 800637c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006380:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006384:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006386:	f7fb ff1d 	bl	80021c4 <HAL_GetTick>
 800638a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 800638c:	e008      	b.n	80063a0 <HAL_RCC_OscConfig+0x67c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800638e:	f7fb ff19 	bl	80021c4 <HAL_GetTick>
 8006392:	4602      	mov	r2, r0
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	1ad3      	subs	r3, r2, r3
 8006398:	2b0a      	cmp	r3, #10
 800639a:	d901      	bls.n	80063a0 <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 800639c:	2303      	movs	r3, #3
 800639e:	e056      	b.n	800644e <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() == 0U)
 80063a0:	f7ff fc3d 	bl	8005c1e <LL_RCC_PLL_IsReady>
 80063a4:	4603      	mov	r3, r0
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d0f1      	beq.n	800638e <HAL_RCC_OscConfig+0x66a>
 80063aa:	e04f      	b.n	800644c <HAL_RCC_OscConfig+0x728>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063ac:	f7ff fc29 	bl	8005c02 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80063b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80063b4:	68db      	ldr	r3, [r3, #12]
 80063b6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80063ba:	f023 0303 	bic.w	r3, r3, #3
 80063be:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 80063c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80063c4:	68db      	ldr	r3, [r3, #12]
 80063c6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80063ca:	f023 5388 	bic.w	r3, r3, #285212672	@ 0x11000000
 80063ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80063d2:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063d4:	f7fb fef6 	bl	80021c4 <HAL_GetTick>
 80063d8:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80063da:	e008      	b.n	80063ee <HAL_RCC_OscConfig+0x6ca>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063dc:	f7fb fef2 	bl	80021c4 <HAL_GetTick>
 80063e0:	4602      	mov	r2, r0
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	1ad3      	subs	r3, r2, r3
 80063e6:	2b0a      	cmp	r3, #10
 80063e8:	d901      	bls.n	80063ee <HAL_RCC_OscConfig+0x6ca>
          {
            return HAL_TIMEOUT;
 80063ea:	2303      	movs	r3, #3
 80063ec:	e02f      	b.n	800644e <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 80063ee:	f7ff fc16 	bl	8005c1e <LL_RCC_PLL_IsReady>
 80063f2:	4603      	mov	r3, r0
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d1f1      	bne.n	80063dc <HAL_RCC_OscConfig+0x6b8>
 80063f8:	e028      	b.n	800644c <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d101      	bne.n	8006406 <HAL_RCC_OscConfig+0x6e2>
      {
        return HAL_ERROR;
 8006402:	2301      	movs	r3, #1
 8006404:	e023      	b.n	800644e <HAL_RCC_OscConfig+0x72a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006406:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800640a:	68db      	ldr	r3, [r3, #12]
 800640c:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 800640e:	69bb      	ldr	r3, [r7, #24]
 8006410:	f003 0203 	and.w	r2, r3, #3
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006418:	429a      	cmp	r2, r3
 800641a:	d115      	bne.n	8006448 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 800641c:	69bb      	ldr	r3, [r7, #24]
 800641e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006426:	429a      	cmp	r2, r3
 8006428:	d10e      	bne.n	8006448 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800642a:	69bb      	ldr	r3, [r7, #24]
 800642c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006434:	021b      	lsls	r3, r3, #8
 8006436:	429a      	cmp	r2, r3
 8006438:	d106      	bne.n	8006448 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800643a:	69bb      	ldr	r3, [r7, #24]
 800643c:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006444:	429a      	cmp	r2, r3
 8006446:	d001      	beq.n	800644c <HAL_RCC_OscConfig+0x728>
        {
          return HAL_ERROR;
 8006448:	2301      	movs	r3, #1
 800644a:	e000      	b.n	800644e <HAL_RCC_OscConfig+0x72a>
        }
      }
    }
  }
  return HAL_OK;
 800644c:	2300      	movs	r3, #0
}
 800644e:	4618      	mov	r0, r3
 8006450:	3720      	adds	r7, #32
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}
 8006456:	bf00      	nop
 8006458:	11c1808c 	.word	0x11c1808c

0800645c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b084      	sub	sp, #16
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d101      	bne.n	8006470 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800646c:	2301      	movs	r3, #1
 800646e:	e10f      	b.n	8006690 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006470:	4b89      	ldr	r3, [pc, #548]	@ (8006698 <HAL_RCC_ClockConfig+0x23c>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f003 0307 	and.w	r3, r3, #7
 8006478:	683a      	ldr	r2, [r7, #0]
 800647a:	429a      	cmp	r2, r3
 800647c:	d91b      	bls.n	80064b6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800647e:	4b86      	ldr	r3, [pc, #536]	@ (8006698 <HAL_RCC_ClockConfig+0x23c>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f023 0207 	bic.w	r2, r3, #7
 8006486:	4984      	ldr	r1, [pc, #528]	@ (8006698 <HAL_RCC_ClockConfig+0x23c>)
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	4313      	orrs	r3, r2
 800648c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800648e:	f7fb fe99 	bl	80021c4 <HAL_GetTick>
 8006492:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006494:	e008      	b.n	80064a8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006496:	f7fb fe95 	bl	80021c4 <HAL_GetTick>
 800649a:	4602      	mov	r2, r0
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	1ad3      	subs	r3, r2, r3
 80064a0:	2b02      	cmp	r3, #2
 80064a2:	d901      	bls.n	80064a8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80064a4:	2303      	movs	r3, #3
 80064a6:	e0f3      	b.n	8006690 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80064a8:	4b7b      	ldr	r3, [pc, #492]	@ (8006698 <HAL_RCC_ClockConfig+0x23c>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f003 0307 	and.w	r3, r3, #7
 80064b0:	683a      	ldr	r2, [r7, #0]
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d1ef      	bne.n	8006496 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f003 0302 	and.w	r3, r3, #2
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d016      	beq.n	80064f0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	4618      	mov	r0, r3
 80064c8:	f7ff fb10 	bl	8005aec <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80064cc:	f7fb fe7a 	bl	80021c4 <HAL_GetTick>
 80064d0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80064d2:	e008      	b.n	80064e6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80064d4:	f7fb fe76 	bl	80021c4 <HAL_GetTick>
 80064d8:	4602      	mov	r2, r0
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	1ad3      	subs	r3, r2, r3
 80064de:	2b02      	cmp	r3, #2
 80064e0:	d901      	bls.n	80064e6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80064e2:	2303      	movs	r3, #3
 80064e4:	e0d4      	b.n	8006690 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80064e6:	f7ff fbd8 	bl	8005c9a <LL_RCC_IsActiveFlag_HPRE>
 80064ea:	4603      	mov	r3, r0
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d0f1      	beq.n	80064d4 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d016      	beq.n	800652a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	695b      	ldr	r3, [r3, #20]
 8006500:	4618      	mov	r0, r3
 8006502:	f7ff fb06 	bl	8005b12 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006506:	f7fb fe5d 	bl	80021c4 <HAL_GetTick>
 800650a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800650c:	e008      	b.n	8006520 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800650e:	f7fb fe59 	bl	80021c4 <HAL_GetTick>
 8006512:	4602      	mov	r2, r0
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	1ad3      	subs	r3, r2, r3
 8006518:	2b02      	cmp	r3, #2
 800651a:	d901      	bls.n	8006520 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800651c:	2303      	movs	r3, #3
 800651e:	e0b7      	b.n	8006690 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006520:	f7ff fbcc 	bl	8005cbc <LL_RCC_IsActiveFlag_SHDHPRE>
 8006524:	4603      	mov	r3, r0
 8006526:	2b00      	cmp	r3, #0
 8006528:	d0f1      	beq.n	800650e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f003 0304 	and.w	r3, r3, #4
 8006532:	2b00      	cmp	r3, #0
 8006534:	d016      	beq.n	8006564 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	68db      	ldr	r3, [r3, #12]
 800653a:	4618      	mov	r0, r3
 800653c:	f7ff faff 	bl	8005b3e <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006540:	f7fb fe40 	bl	80021c4 <HAL_GetTick>
 8006544:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006546:	e008      	b.n	800655a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006548:	f7fb fe3c 	bl	80021c4 <HAL_GetTick>
 800654c:	4602      	mov	r2, r0
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	1ad3      	subs	r3, r2, r3
 8006552:	2b02      	cmp	r3, #2
 8006554:	d901      	bls.n	800655a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8006556:	2303      	movs	r3, #3
 8006558:	e09a      	b.n	8006690 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800655a:	f7ff fbc1 	bl	8005ce0 <LL_RCC_IsActiveFlag_PPRE1>
 800655e:	4603      	mov	r3, r0
 8006560:	2b00      	cmp	r3, #0
 8006562:	d0f1      	beq.n	8006548 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f003 0308 	and.w	r3, r3, #8
 800656c:	2b00      	cmp	r3, #0
 800656e:	d017      	beq.n	80065a0 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	691b      	ldr	r3, [r3, #16]
 8006574:	00db      	lsls	r3, r3, #3
 8006576:	4618      	mov	r0, r3
 8006578:	f7ff faf4 	bl	8005b64 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800657c:	f7fb fe22 	bl	80021c4 <HAL_GetTick>
 8006580:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006582:	e008      	b.n	8006596 <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006584:	f7fb fe1e 	bl	80021c4 <HAL_GetTick>
 8006588:	4602      	mov	r2, r0
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	1ad3      	subs	r3, r2, r3
 800658e:	2b02      	cmp	r3, #2
 8006590:	d901      	bls.n	8006596 <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8006592:	2303      	movs	r3, #3
 8006594:	e07c      	b.n	8006690 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006596:	f7ff fbb4 	bl	8005d02 <LL_RCC_IsActiveFlag_PPRE2>
 800659a:	4603      	mov	r3, r0
 800659c:	2b00      	cmp	r3, #0
 800659e:	d0f1      	beq.n	8006584 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f003 0301 	and.w	r3, r3, #1
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d043      	beq.n	8006634 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	2b02      	cmp	r3, #2
 80065b2:	d106      	bne.n	80065c2 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80065b4:	f7ff f981 	bl	80058ba <LL_RCC_HSE_IsReady>
 80065b8:	4603      	mov	r3, r0
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d11e      	bne.n	80065fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80065be:	2301      	movs	r3, #1
 80065c0:	e066      	b.n	8006690 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	2b03      	cmp	r3, #3
 80065c8:	d106      	bne.n	80065d8 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80065ca:	f7ff fb28 	bl	8005c1e <LL_RCC_PLL_IsReady>
 80065ce:	4603      	mov	r3, r0
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d113      	bne.n	80065fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80065d4:	2301      	movs	r3, #1
 80065d6:	e05b      	b.n	8006690 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d106      	bne.n	80065ee <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80065e0:	f7ff fa1b 	bl	8005a1a <LL_RCC_MSI_IsReady>
 80065e4:	4603      	mov	r3, r0
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d108      	bne.n	80065fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80065ea:	2301      	movs	r3, #1
 80065ec:	e050      	b.n	8006690 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80065ee:	f7ff f991 	bl	8005914 <LL_RCC_HSI_IsReady>
 80065f2:	4603      	mov	r3, r0
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d101      	bne.n	80065fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80065f8:	2301      	movs	r3, #1
 80065fa:	e049      	b.n	8006690 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	4618      	mov	r0, r3
 8006602:	f7ff fa55 	bl	8005ab0 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006606:	f7fb fddd 	bl	80021c4 <HAL_GetTick>
 800660a:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800660c:	e00a      	b.n	8006624 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800660e:	f7fb fdd9 	bl	80021c4 <HAL_GetTick>
 8006612:	4602      	mov	r2, r0
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	1ad3      	subs	r3, r2, r3
 8006618:	f241 3288 	movw	r2, #5000	@ 0x1388
 800661c:	4293      	cmp	r3, r2
 800661e:	d901      	bls.n	8006624 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8006620:	2303      	movs	r3, #3
 8006622:	e035      	b.n	8006690 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006624:	f7ff fa57 	bl	8005ad6 <LL_RCC_GetSysClkSource>
 8006628:	4602      	mov	r2, r0
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	009b      	lsls	r3, r3, #2
 8006630:	429a      	cmp	r2, r3
 8006632:	d1ec      	bne.n	800660e <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006634:	4b18      	ldr	r3, [pc, #96]	@ (8006698 <HAL_RCC_ClockConfig+0x23c>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f003 0307 	and.w	r3, r3, #7
 800663c:	683a      	ldr	r2, [r7, #0]
 800663e:	429a      	cmp	r2, r3
 8006640:	d21b      	bcs.n	800667a <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006642:	4b15      	ldr	r3, [pc, #84]	@ (8006698 <HAL_RCC_ClockConfig+0x23c>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f023 0207 	bic.w	r2, r3, #7
 800664a:	4913      	ldr	r1, [pc, #76]	@ (8006698 <HAL_RCC_ClockConfig+0x23c>)
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	4313      	orrs	r3, r2
 8006650:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006652:	f7fb fdb7 	bl	80021c4 <HAL_GetTick>
 8006656:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006658:	e008      	b.n	800666c <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800665a:	f7fb fdb3 	bl	80021c4 <HAL_GetTick>
 800665e:	4602      	mov	r2, r0
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	1ad3      	subs	r3, r2, r3
 8006664:	2b02      	cmp	r3, #2
 8006666:	d901      	bls.n	800666c <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8006668:	2303      	movs	r3, #3
 800666a:	e011      	b.n	8006690 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800666c:	4b0a      	ldr	r3, [pc, #40]	@ (8006698 <HAL_RCC_ClockConfig+0x23c>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f003 0307 	and.w	r3, r3, #7
 8006674:	683a      	ldr	r2, [r7, #0]
 8006676:	429a      	cmp	r2, r3
 8006678:	d1ef      	bne.n	800665a <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800667a:	f000 f8b3 	bl	80067e4 <HAL_RCC_GetHCLKFreq>
 800667e:	4603      	mov	r3, r0
 8006680:	4a06      	ldr	r2, [pc, #24]	@ (800669c <HAL_RCC_ClockConfig+0x240>)
 8006682:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006684:	4b06      	ldr	r3, [pc, #24]	@ (80066a0 <HAL_RCC_ClockConfig+0x244>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4618      	mov	r0, r3
 800668a:	f7fb fd91 	bl	80021b0 <HAL_InitTick>
 800668e:	4603      	mov	r3, r0
}
 8006690:	4618      	mov	r0, r3
 8006692:	3710      	adds	r7, #16
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}
 8006698:	58004000 	.word	0x58004000
 800669c:	20000000 	.word	0x20000000
 80066a0:	20000004 	.word	0x20000004

080066a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80066a4:	b590      	push	{r4, r7, lr}
 80066a6:	b087      	sub	sp, #28
 80066a8:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 80066aa:	2300      	movs	r3, #0
 80066ac:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 80066ae:	2300      	movs	r3, #0
 80066b0:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80066b2:	f7ff fa10 	bl	8005ad6 <LL_RCC_GetSysClkSource>
 80066b6:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80066b8:	f7ff fae4 	bl	8005c84 <LL_RCC_PLL_GetMainSource>
 80066bc:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d005      	beq.n	80066d0 <HAL_RCC_GetSysClockFreq+0x2c>
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	2b0c      	cmp	r3, #12
 80066c8:	d139      	bne.n	800673e <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	d136      	bne.n	800673e <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80066d0:	f7ff f9b3 	bl	8005a3a <LL_RCC_MSI_IsEnabledRangeSelect>
 80066d4:	4603      	mov	r3, r0
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d115      	bne.n	8006706 <HAL_RCC_GetSysClockFreq+0x62>
 80066da:	f7ff f9ae 	bl	8005a3a <LL_RCC_MSI_IsEnabledRangeSelect>
 80066de:	4603      	mov	r3, r0
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	d106      	bne.n	80066f2 <HAL_RCC_GetSysClockFreq+0x4e>
 80066e4:	f7ff f9b9 	bl	8005a5a <LL_RCC_MSI_GetRange>
 80066e8:	4603      	mov	r3, r0
 80066ea:	0a1b      	lsrs	r3, r3, #8
 80066ec:	f003 030f 	and.w	r3, r3, #15
 80066f0:	e005      	b.n	80066fe <HAL_RCC_GetSysClockFreq+0x5a>
 80066f2:	f7ff f9bd 	bl	8005a70 <LL_RCC_MSI_GetRangeAfterStandby>
 80066f6:	4603      	mov	r3, r0
 80066f8:	0a1b      	lsrs	r3, r3, #8
 80066fa:	f003 030f 	and.w	r3, r3, #15
 80066fe:	4a36      	ldr	r2, [pc, #216]	@ (80067d8 <HAL_RCC_GetSysClockFreq+0x134>)
 8006700:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006704:	e014      	b.n	8006730 <HAL_RCC_GetSysClockFreq+0x8c>
 8006706:	f7ff f998 	bl	8005a3a <LL_RCC_MSI_IsEnabledRangeSelect>
 800670a:	4603      	mov	r3, r0
 800670c:	2b01      	cmp	r3, #1
 800670e:	d106      	bne.n	800671e <HAL_RCC_GetSysClockFreq+0x7a>
 8006710:	f7ff f9a3 	bl	8005a5a <LL_RCC_MSI_GetRange>
 8006714:	4603      	mov	r3, r0
 8006716:	091b      	lsrs	r3, r3, #4
 8006718:	f003 030f 	and.w	r3, r3, #15
 800671c:	e005      	b.n	800672a <HAL_RCC_GetSysClockFreq+0x86>
 800671e:	f7ff f9a7 	bl	8005a70 <LL_RCC_MSI_GetRangeAfterStandby>
 8006722:	4603      	mov	r3, r0
 8006724:	091b      	lsrs	r3, r3, #4
 8006726:	f003 030f 	and.w	r3, r3, #15
 800672a:	4a2b      	ldr	r2, [pc, #172]	@ (80067d8 <HAL_RCC_GetSysClockFreq+0x134>)
 800672c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006730:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d115      	bne.n	8006764 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800673c:	e012      	b.n	8006764 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	2b04      	cmp	r3, #4
 8006742:	d102      	bne.n	800674a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006744:	4b25      	ldr	r3, [pc, #148]	@ (80067dc <HAL_RCC_GetSysClockFreq+0x138>)
 8006746:	617b      	str	r3, [r7, #20]
 8006748:	e00c      	b.n	8006764 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	2b08      	cmp	r3, #8
 800674e:	d109      	bne.n	8006764 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006750:	f7ff f886 	bl	8005860 <LL_RCC_HSE_IsEnabledDiv2>
 8006754:	4603      	mov	r3, r0
 8006756:	2b01      	cmp	r3, #1
 8006758:	d102      	bne.n	8006760 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800675a:	4b20      	ldr	r3, [pc, #128]	@ (80067dc <HAL_RCC_GetSysClockFreq+0x138>)
 800675c:	617b      	str	r3, [r7, #20]
 800675e:	e001      	b.n	8006764 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8006760:	4b1f      	ldr	r3, [pc, #124]	@ (80067e0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8006762:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006764:	f7ff f9b7 	bl	8005ad6 <LL_RCC_GetSysClkSource>
 8006768:	4603      	mov	r3, r0
 800676a:	2b0c      	cmp	r3, #12
 800676c:	d12f      	bne.n	80067ce <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800676e:	f7ff fa89 	bl	8005c84 <LL_RCC_PLL_GetMainSource>
 8006772:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2b02      	cmp	r3, #2
 8006778:	d003      	beq.n	8006782 <HAL_RCC_GetSysClockFreq+0xde>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2b03      	cmp	r3, #3
 800677e:	d003      	beq.n	8006788 <HAL_RCC_GetSysClockFreq+0xe4>
 8006780:	e00d      	b.n	800679e <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8006782:	4b16      	ldr	r3, [pc, #88]	@ (80067dc <HAL_RCC_GetSysClockFreq+0x138>)
 8006784:	60fb      	str	r3, [r7, #12]
        break;
 8006786:	e00d      	b.n	80067a4 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006788:	f7ff f86a 	bl	8005860 <LL_RCC_HSE_IsEnabledDiv2>
 800678c:	4603      	mov	r3, r0
 800678e:	2b01      	cmp	r3, #1
 8006790:	d102      	bne.n	8006798 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8006792:	4b12      	ldr	r3, [pc, #72]	@ (80067dc <HAL_RCC_GetSysClockFreq+0x138>)
 8006794:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8006796:	e005      	b.n	80067a4 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8006798:	4b11      	ldr	r3, [pc, #68]	@ (80067e0 <HAL_RCC_GetSysClockFreq+0x13c>)
 800679a:	60fb      	str	r3, [r7, #12]
        break;
 800679c:	e002      	b.n	80067a4 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	60fb      	str	r3, [r7, #12]
        break;
 80067a2:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80067a4:	f7ff fa4c 	bl	8005c40 <LL_RCC_PLL_GetN>
 80067a8:	4602      	mov	r2, r0
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	fb03 f402 	mul.w	r4, r3, r2
 80067b0:	f7ff fa5d 	bl	8005c6e <LL_RCC_PLL_GetDivider>
 80067b4:	4603      	mov	r3, r0
 80067b6:	091b      	lsrs	r3, r3, #4
 80067b8:	3301      	adds	r3, #1
 80067ba:	fbb4 f4f3 	udiv	r4, r4, r3
 80067be:	f7ff fa4b 	bl	8005c58 <LL_RCC_PLL_GetR>
 80067c2:	4603      	mov	r3, r0
 80067c4:	0f5b      	lsrs	r3, r3, #29
 80067c6:	3301      	adds	r3, #1
 80067c8:	fbb4 f3f3 	udiv	r3, r4, r3
 80067cc:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80067ce:	697b      	ldr	r3, [r7, #20]
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	371c      	adds	r7, #28
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd90      	pop	{r4, r7, pc}
 80067d8:	0801efdc 	.word	0x0801efdc
 80067dc:	00f42400 	.word	0x00f42400
 80067e0:	01e84800 	.word	0x01e84800

080067e4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80067e4:	b598      	push	{r3, r4, r7, lr}
 80067e6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80067e8:	f7ff ff5c 	bl	80066a4 <HAL_RCC_GetSysClockFreq>
 80067ec:	4604      	mov	r4, r0
 80067ee:	f7ff f9cc 	bl	8005b8a <LL_RCC_GetAHBPrescaler>
 80067f2:	4603      	mov	r3, r0
 80067f4:	091b      	lsrs	r3, r3, #4
 80067f6:	f003 030f 	and.w	r3, r3, #15
 80067fa:	4a03      	ldr	r2, [pc, #12]	@ (8006808 <HAL_RCC_GetHCLKFreq+0x24>)
 80067fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006800:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8006804:	4618      	mov	r0, r3
 8006806:	bd98      	pop	{r3, r4, r7, pc}
 8006808:	0801ef7c 	.word	0x0801ef7c

0800680c <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800680c:	b598      	push	{r3, r4, r7, lr}
 800680e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006810:	f7ff ffe8 	bl	80067e4 <HAL_RCC_GetHCLKFreq>
 8006814:	4604      	mov	r4, r0
 8006816:	f7ff f9d0 	bl	8005bba <LL_RCC_GetAPB1Prescaler>
 800681a:	4603      	mov	r3, r0
 800681c:	0a1b      	lsrs	r3, r3, #8
 800681e:	4a03      	ldr	r2, [pc, #12]	@ (800682c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006820:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006824:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006828:	4618      	mov	r0, r3
 800682a:	bd98      	pop	{r3, r4, r7, pc}
 800682c:	0801efbc 	.word	0x0801efbc

08006830 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006830:	b598      	push	{r3, r4, r7, lr}
 8006832:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8006834:	f7ff ffd6 	bl	80067e4 <HAL_RCC_GetHCLKFreq>
 8006838:	4604      	mov	r4, r0
 800683a:	f7ff f9c9 	bl	8005bd0 <LL_RCC_GetAPB2Prescaler>
 800683e:	4603      	mov	r3, r0
 8006840:	0adb      	lsrs	r3, r3, #11
 8006842:	4a03      	ldr	r2, [pc, #12]	@ (8006850 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006844:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006848:	fa24 f303 	lsr.w	r3, r4, r3
}
 800684c:	4618      	mov	r0, r3
 800684e:	bd98      	pop	{r3, r4, r7, pc}
 8006850:	0801efbc 	.word	0x0801efbc

08006854 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8006854:	b590      	push	{r4, r7, lr}
 8006856:	b085      	sub	sp, #20
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	091b      	lsrs	r3, r3, #4
 8006860:	f003 030f 	and.w	r3, r3, #15
 8006864:	4a10      	ldr	r2, [pc, #64]	@ (80068a8 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8006866:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800686a:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 800686c:	f7ff f998 	bl	8005ba0 <LL_RCC_GetAHB3Prescaler>
 8006870:	4603      	mov	r3, r0
 8006872:	091b      	lsrs	r3, r3, #4
 8006874:	f003 030f 	and.w	r3, r3, #15
 8006878:	4a0c      	ldr	r2, [pc, #48]	@ (80068ac <RCC_SetFlashLatencyFromMSIRange+0x58>)
 800687a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800687e:	68fa      	ldr	r2, [r7, #12]
 8006880:	fbb2 f3f3 	udiv	r3, r2, r3
 8006884:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	4a09      	ldr	r2, [pc, #36]	@ (80068b0 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 800688a:	fba2 2303 	umull	r2, r3, r2, r3
 800688e:	0c9c      	lsrs	r4, r3, #18
 8006890:	f7fe ff3e 	bl	8005710 <HAL_PWREx_GetVoltageRange>
 8006894:	4603      	mov	r3, r0
 8006896:	4619      	mov	r1, r3
 8006898:	4620      	mov	r0, r4
 800689a:	f000 f80b 	bl	80068b4 <RCC_SetFlashLatency>
 800689e:	4603      	mov	r3, r0
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3714      	adds	r7, #20
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd90      	pop	{r4, r7, pc}
 80068a8:	0801efdc 	.word	0x0801efdc
 80068ac:	0801ef7c 	.word	0x0801ef7c
 80068b0:	431bde83 	.word	0x431bde83

080068b4 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b08e      	sub	sp, #56	@ 0x38
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80068be:	4a3a      	ldr	r2, [pc, #232]	@ (80069a8 <RCC_SetFlashLatency+0xf4>)
 80068c0:	f107 0320 	add.w	r3, r7, #32
 80068c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80068c8:	6018      	str	r0, [r3, #0]
 80068ca:	3304      	adds	r3, #4
 80068cc:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80068ce:	4a37      	ldr	r2, [pc, #220]	@ (80069ac <RCC_SetFlashLatency+0xf8>)
 80068d0:	f107 0318 	add.w	r3, r7, #24
 80068d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80068d8:	6018      	str	r0, [r3, #0]
 80068da:	3304      	adds	r3, #4
 80068dc:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80068de:	4a34      	ldr	r2, [pc, #208]	@ (80069b0 <RCC_SetFlashLatency+0xfc>)
 80068e0:	f107 030c 	add.w	r3, r7, #12
 80068e4:	ca07      	ldmia	r2, {r0, r1, r2}
 80068e6:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80068ea:	2300      	movs	r3, #0
 80068ec:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80068f4:	d11b      	bne.n	800692e <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80068f6:	2300      	movs	r3, #0
 80068f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80068fa:	e014      	b.n	8006926 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80068fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068fe:	005b      	lsls	r3, r3, #1
 8006900:	3338      	adds	r3, #56	@ 0x38
 8006902:	443b      	add	r3, r7
 8006904:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8006908:	461a      	mov	r2, r3
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	4293      	cmp	r3, r2
 800690e:	d807      	bhi.n	8006920 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006912:	009b      	lsls	r3, r3, #2
 8006914:	3338      	adds	r3, #56	@ 0x38
 8006916:	443b      	add	r3, r7
 8006918:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800691c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800691e:	e021      	b.n	8006964 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006922:	3301      	adds	r3, #1
 8006924:	633b      	str	r3, [r7, #48]	@ 0x30
 8006926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006928:	2b02      	cmp	r3, #2
 800692a:	d9e7      	bls.n	80068fc <RCC_SetFlashLatency+0x48>
 800692c:	e01a      	b.n	8006964 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800692e:	2300      	movs	r3, #0
 8006930:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006932:	e014      	b.n	800695e <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8006934:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006936:	005b      	lsls	r3, r3, #1
 8006938:	3338      	adds	r3, #56	@ 0x38
 800693a:	443b      	add	r3, r7
 800693c:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8006940:	461a      	mov	r2, r3
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	4293      	cmp	r3, r2
 8006946:	d807      	bhi.n	8006958 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006948:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800694a:	009b      	lsls	r3, r3, #2
 800694c:	3338      	adds	r3, #56	@ 0x38
 800694e:	443b      	add	r3, r7
 8006950:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006954:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006956:	e005      	b.n	8006964 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006958:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800695a:	3301      	adds	r3, #1
 800695c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800695e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006960:	2b02      	cmp	r3, #2
 8006962:	d9e7      	bls.n	8006934 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006964:	4b13      	ldr	r3, [pc, #76]	@ (80069b4 <RCC_SetFlashLatency+0x100>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f023 0207 	bic.w	r2, r3, #7
 800696c:	4911      	ldr	r1, [pc, #68]	@ (80069b4 <RCC_SetFlashLatency+0x100>)
 800696e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006970:	4313      	orrs	r3, r2
 8006972:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006974:	f7fb fc26 	bl	80021c4 <HAL_GetTick>
 8006978:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800697a:	e008      	b.n	800698e <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800697c:	f7fb fc22 	bl	80021c4 <HAL_GetTick>
 8006980:	4602      	mov	r2, r0
 8006982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006984:	1ad3      	subs	r3, r2, r3
 8006986:	2b02      	cmp	r3, #2
 8006988:	d901      	bls.n	800698e <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 800698a:	2303      	movs	r3, #3
 800698c:	e007      	b.n	800699e <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800698e:	4b09      	ldr	r3, [pc, #36]	@ (80069b4 <RCC_SetFlashLatency+0x100>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f003 0307 	and.w	r3, r3, #7
 8006996:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006998:	429a      	cmp	r2, r3
 800699a:	d1ef      	bne.n	800697c <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 800699c:	2300      	movs	r3, #0
}
 800699e:	4618      	mov	r0, r3
 80069a0:	3738      	adds	r7, #56	@ 0x38
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}
 80069a6:	bf00      	nop
 80069a8:	0801e6d4 	.word	0x0801e6d4
 80069ac:	0801e6dc 	.word	0x0801e6dc
 80069b0:	0801e6e4 	.word	0x0801e6e4
 80069b4:	58004000 	.word	0x58004000

080069b8 <LL_RCC_LSE_IsReady>:
{
 80069b8:	b480      	push	{r7}
 80069ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80069bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069c4:	f003 0302 	and.w	r3, r3, #2
 80069c8:	2b02      	cmp	r3, #2
 80069ca:	d101      	bne.n	80069d0 <LL_RCC_LSE_IsReady+0x18>
 80069cc:	2301      	movs	r3, #1
 80069ce:	e000      	b.n	80069d2 <LL_RCC_LSE_IsReady+0x1a>
 80069d0:	2300      	movs	r3, #0
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bc80      	pop	{r7}
 80069d8:	4770      	bx	lr

080069da <LL_RCC_SetUSARTClockSource>:
{
 80069da:	b480      	push	{r7}
 80069dc:	b083      	sub	sp, #12
 80069de:	af00      	add	r7, sp, #0
 80069e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 80069e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069e6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	0c1b      	lsrs	r3, r3, #16
 80069ee:	43db      	mvns	r3, r3
 80069f0:	401a      	ands	r2, r3
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80069fa:	4313      	orrs	r3, r2
 80069fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006a00:	bf00      	nop
 8006a02:	370c      	adds	r7, #12
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bc80      	pop	{r7}
 8006a08:	4770      	bx	lr

08006a0a <LL_RCC_SetI2SClockSource>:
{
 8006a0a:	b480      	push	{r7}
 8006a0c:	b083      	sub	sp, #12
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8006a12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a1a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006a1e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	4313      	orrs	r3, r2
 8006a26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006a2a:	bf00      	nop
 8006a2c:	370c      	adds	r7, #12
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bc80      	pop	{r7}
 8006a32:	4770      	bx	lr

08006a34 <LL_RCC_SetLPUARTClockSource>:
{
 8006a34:	b480      	push	{r7}
 8006a36:	b083      	sub	sp, #12
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8006a3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a44:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006a48:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006a54:	bf00      	nop
 8006a56:	370c      	adds	r7, #12
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bc80      	pop	{r7}
 8006a5c:	4770      	bx	lr

08006a5e <LL_RCC_SetI2CClockSource>:
{
 8006a5e:	b480      	push	{r7}
 8006a60:	b083      	sub	sp, #12
 8006a62:	af00      	add	r7, sp, #0
 8006a64:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006a66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a6a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	091b      	lsrs	r3, r3, #4
 8006a72:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8006a76:	43db      	mvns	r3, r3
 8006a78:	401a      	ands	r2, r3
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	011b      	lsls	r3, r3, #4
 8006a7e:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8006a82:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006a86:	4313      	orrs	r3, r2
 8006a88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006a8c:	bf00      	nop
 8006a8e:	370c      	adds	r7, #12
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bc80      	pop	{r7}
 8006a94:	4770      	bx	lr

08006a96 <LL_RCC_SetLPTIMClockSource>:
{
 8006a96:	b480      	push	{r7}
 8006a98:	b083      	sub	sp, #12
 8006a9a:	af00      	add	r7, sp, #0
 8006a9c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8006a9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006aa2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	0c1b      	lsrs	r3, r3, #16
 8006aaa:	041b      	lsls	r3, r3, #16
 8006aac:	43db      	mvns	r3, r3
 8006aae:	401a      	ands	r2, r3
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	041b      	lsls	r3, r3, #16
 8006ab4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006abe:	bf00      	nop
 8006ac0:	370c      	adds	r7, #12
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bc80      	pop	{r7}
 8006ac6:	4770      	bx	lr

08006ac8 <LL_RCC_SetRNGClockSource>:
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b083      	sub	sp, #12
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8006ad0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ad8:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8006adc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006ae8:	bf00      	nop
 8006aea:	370c      	adds	r7, #12
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bc80      	pop	{r7}
 8006af0:	4770      	bx	lr

08006af2 <LL_RCC_SetADCClockSource>:
{
 8006af2:	b480      	push	{r7}
 8006af4:	b083      	sub	sp, #12
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006afa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b02:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006b06:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006b12:	bf00      	nop
 8006b14:	370c      	adds	r7, #12
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bc80      	pop	{r7}
 8006b1a:	4770      	bx	lr

08006b1c <LL_RCC_SetRTCClockSource>:
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b083      	sub	sp, #12
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8006b24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b2c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006b30:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	4313      	orrs	r3, r2
 8006b38:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8006b3c:	bf00      	nop
 8006b3e:	370c      	adds	r7, #12
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bc80      	pop	{r7}
 8006b44:	4770      	bx	lr

08006b46 <LL_RCC_GetRTCClockSource>:
{
 8006b46:	b480      	push	{r7}
 8006b48:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006b4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bc80      	pop	{r7}
 8006b5c:	4770      	bx	lr

08006b5e <LL_RCC_ForceBackupDomainReset>:
{
 8006b5e:	b480      	push	{r7}
 8006b60:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006b62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b6a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006b6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b72:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006b76:	bf00      	nop
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bc80      	pop	{r7}
 8006b7c:	4770      	bx	lr

08006b7e <LL_RCC_ReleaseBackupDomainReset>:
{
 8006b7e:	b480      	push	{r7}
 8006b80:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006b82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b8a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006b8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b92:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006b96:	bf00      	nop
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bc80      	pop	{r7}
 8006b9c:	4770      	bx	lr
	...

08006ba0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b086      	sub	sp, #24
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8006bac:	2300      	movs	r3, #0
 8006bae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d058      	beq.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8006bc0:	f7fe fd64 	bl	800568c <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006bc4:	f7fb fafe 	bl	80021c4 <HAL_GetTick>
 8006bc8:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8006bca:	e009      	b.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006bcc:	f7fb fafa 	bl	80021c4 <HAL_GetTick>
 8006bd0:	4602      	mov	r2, r0
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	1ad3      	subs	r3, r2, r3
 8006bd6:	2b02      	cmp	r3, #2
 8006bd8:	d902      	bls.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8006bda:	2303      	movs	r3, #3
 8006bdc:	74fb      	strb	r3, [r7, #19]
        break;
 8006bde:	e006      	b.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8006be0:	4b7b      	ldr	r3, [pc, #492]	@ (8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006be8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006bec:	d1ee      	bne.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8006bee:	7cfb      	ldrb	r3, [r7, #19]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d13c      	bne.n	8006c6e <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8006bf4:	f7ff ffa7 	bl	8006b46 <LL_RCC_GetRTCClockSource>
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bfe:	429a      	cmp	r2, r3
 8006c00:	d00f      	beq.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006c02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c0e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006c10:	f7ff ffa5 	bl	8006b5e <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006c14:	f7ff ffb3 	bl	8006b7e <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006c18:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	f003 0302 	and.w	r3, r3, #2
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d014      	beq.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c2c:	f7fb faca 	bl	80021c4 <HAL_GetTick>
 8006c30:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8006c32:	e00b      	b.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c34:	f7fb fac6 	bl	80021c4 <HAL_GetTick>
 8006c38:	4602      	mov	r2, r0
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	1ad3      	subs	r3, r2, r3
 8006c3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d902      	bls.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8006c46:	2303      	movs	r3, #3
 8006c48:	74fb      	strb	r3, [r7, #19]
            break;
 8006c4a:	e004      	b.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8006c4c:	f7ff feb4 	bl	80069b8 <LL_RCC_LSE_IsReady>
 8006c50:	4603      	mov	r3, r0
 8006c52:	2b01      	cmp	r3, #1
 8006c54:	d1ee      	bne.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8006c56:	7cfb      	ldrb	r3, [r7, #19]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d105      	bne.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c60:	4618      	mov	r0, r3
 8006c62:	f7ff ff5b 	bl	8006b1c <LL_RCC_SetRTCClockSource>
 8006c66:	e004      	b.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006c68:	7cfb      	ldrb	r3, [r7, #19]
 8006c6a:	74bb      	strb	r3, [r7, #18]
 8006c6c:	e001      	b.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c6e:	7cfb      	ldrb	r3, [r7, #19]
 8006c70:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f003 0301 	and.w	r3, r3, #1
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d004      	beq.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	4618      	mov	r0, r3
 8006c84:	f7ff fea9 	bl	80069da <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f003 0302 	and.w	r3, r3, #2
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d004      	beq.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	4618      	mov	r0, r3
 8006c9a:	f7ff fe9e 	bl	80069da <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f003 0320 	and.w	r3, r3, #32
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d004      	beq.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	691b      	ldr	r3, [r3, #16]
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f7ff fec0 	bl	8006a34 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d004      	beq.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6a1b      	ldr	r3, [r3, #32]
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	f7ff fee6 	bl	8006a96 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d004      	beq.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f7ff fedb 	bl	8006a96 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d004      	beq.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f7ff fed0 	bl	8006a96 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d004      	beq.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	695b      	ldr	r3, [r3, #20]
 8006d06:	4618      	mov	r0, r3
 8006d08:	f7ff fea9 	bl	8006a5e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d004      	beq.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	699b      	ldr	r3, [r3, #24]
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	f7ff fe9e 	bl	8006a5e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d004      	beq.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	69db      	ldr	r3, [r3, #28]
 8006d32:	4618      	mov	r0, r3
 8006d34:	f7ff fe93 	bl	8006a5e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f003 0310 	and.w	r3, r3, #16
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d011      	beq.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	68db      	ldr	r3, [r3, #12]
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f7ff fe5e 	bl	8006a0a <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	68db      	ldr	r3, [r3, #12]
 8006d52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d56:	d107      	bne.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8006d58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d5c:	68db      	ldr	r3, [r3, #12]
 8006d5e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006d62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006d66:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d010      	beq.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f7ff fea5 	bl	8006ac8 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d107      	bne.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006d86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d8a:	68db      	ldr	r3, [r3, #12]
 8006d8c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006d90:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006d94:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d011      	beq.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006da6:	4618      	mov	r0, r3
 8006da8:	f7ff fea3 	bl	8006af2 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006db0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006db4:	d107      	bne.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006db6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006dba:	68db      	ldr	r3, [r3, #12]
 8006dbc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006dc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006dc4:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8006dc6:	7cbb      	ldrb	r3, [r7, #18]
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3718      	adds	r7, #24
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}
 8006dd0:	58000400 	.word	0x58000400

08006dd4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b084      	sub	sp, #16
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006ddc:	2301      	movs	r3, #1
 8006dde:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d068      	beq.n	8006eb8 <HAL_RTC_Init+0xe4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006dec:	b2db      	uxtb	r3, r3
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d106      	bne.n	8006e00 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2200      	movs	r2, #0
 8006df6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f7fa ff22 	bl	8001c44 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2202      	movs	r2, #2
 8006e04:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006e08:	4b2e      	ldr	r3, [pc, #184]	@ (8006ec4 <HAL_RTC_Init+0xf0>)
 8006e0a:	22ca      	movs	r2, #202	@ 0xca
 8006e0c:	625a      	str	r2, [r3, #36]	@ 0x24
 8006e0e:	4b2d      	ldr	r3, [pc, #180]	@ (8006ec4 <HAL_RTC_Init+0xf0>)
 8006e10:	2253      	movs	r2, #83	@ 0x53
 8006e12:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f000 fa0f 	bl	8007238 <RTC_EnterInitMode>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8006e1e:	7bfb      	ldrb	r3, [r7, #15]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d13f      	bne.n	8006ea4 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8006e24:	4b27      	ldr	r3, [pc, #156]	@ (8006ec4 <HAL_RTC_Init+0xf0>)
 8006e26:	699b      	ldr	r3, [r3, #24]
 8006e28:	4a26      	ldr	r2, [pc, #152]	@ (8006ec4 <HAL_RTC_Init+0xf0>)
 8006e2a:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 8006e2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e32:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8006e34:	4b23      	ldr	r3, [pc, #140]	@ (8006ec4 <HAL_RTC_Init+0xf0>)
 8006e36:	699a      	ldr	r2, [r3, #24]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6859      	ldr	r1, [r3, #4]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	691b      	ldr	r3, [r3, #16]
 8006e40:	4319      	orrs	r1, r3
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	699b      	ldr	r3, [r3, #24]
 8006e46:	430b      	orrs	r3, r1
 8006e48:	491e      	ldr	r1, [pc, #120]	@ (8006ec4 <HAL_RTC_Init+0xf0>)
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	68da      	ldr	r2, [r3, #12]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	689b      	ldr	r3, [r3, #8]
 8006e56:	041b      	lsls	r3, r3, #16
 8006e58:	491a      	ldr	r1, [pc, #104]	@ (8006ec4 <HAL_RTC_Init+0xf0>)
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	610b      	str	r3, [r1, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8006e5e:	4b19      	ldr	r3, [pc, #100]	@ (8006ec4 <HAL_RTC_Init+0xf0>)
 8006e60:	68db      	ldr	r3, [r3, #12]
 8006e62:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e6e:	430b      	orrs	r3, r1
 8006e70:	4914      	ldr	r1, [pc, #80]	@ (8006ec4 <HAL_RTC_Init+0xf0>)
 8006e72:	4313      	orrs	r3, r2
 8006e74:	60cb      	str	r3, [r1, #12]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f000 fa12 	bl	80072a0 <RTC_ExitInitMode>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8006e80:	7bfb      	ldrb	r3, [r7, #15]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d10e      	bne.n	8006ea4 <HAL_RTC_Init+0xd0>
      {
        MODIFY_REG(RTC->CR, \
 8006e86:	4b0f      	ldr	r3, [pc, #60]	@ (8006ec4 <HAL_RTC_Init+0xf0>)
 8006e88:	699b      	ldr	r3, [r3, #24]
 8006e8a:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6a19      	ldr	r1, [r3, #32]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	69db      	ldr	r3, [r3, #28]
 8006e96:	4319      	orrs	r1, r3
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	695b      	ldr	r3, [r3, #20]
 8006e9c:	430b      	orrs	r3, r1
 8006e9e:	4909      	ldr	r1, [pc, #36]	@ (8006ec4 <HAL_RTC_Init+0xf0>)
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ea4:	4b07      	ldr	r3, [pc, #28]	@ (8006ec4 <HAL_RTC_Init+0xf0>)
 8006ea6:	22ff      	movs	r2, #255	@ 0xff
 8006ea8:	625a      	str	r2, [r3, #36]	@ 0x24

    if (status == HAL_OK)
 8006eaa:	7bfb      	ldrb	r3, [r7, #15]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d103      	bne.n	8006eb8 <HAL_RTC_Init+0xe4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 8006eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3710      	adds	r7, #16
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}
 8006ec2:	bf00      	nop
 8006ec4:	40002800 	.word	0x40002800

08006ec8 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006ec8:	b590      	push	{r4, r7, lr}
 8006eca:	b087      	sub	sp, #28
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	60f8      	str	r0, [r7, #12]
 8006ed0:	60b9      	str	r1, [r7, #8]
 8006ed2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006ede:	2b01      	cmp	r3, #1
 8006ee0:	d101      	bne.n	8006ee6 <HAL_RTC_SetAlarm_IT+0x1e>
 8006ee2:	2302      	movs	r3, #2
 8006ee4:	e0f3      	b.n	80070ce <HAL_RTC_SetAlarm_IT+0x206>
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2201      	movs	r2, #1
 8006eea:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	2202      	movs	r2, #2
 8006ef2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8006ef6:	4b78      	ldr	r3, [pc, #480]	@ (80070d8 <HAL_RTC_SetAlarm_IT+0x210>)
 8006ef8:	68db      	ldr	r3, [r3, #12]
 8006efa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006efe:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f06:	d06a      	beq.n	8006fde <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d13a      	bne.n	8006f84 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006f0e:	4b72      	ldr	r3, [pc, #456]	@ (80070d8 <HAL_RTC_SetAlarm_IT+0x210>)
 8006f10:	699b      	ldr	r3, [r3, #24]
 8006f12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d102      	bne.n	8006f20 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	695b      	ldr	r3, [r3, #20]
 8006f24:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	781b      	ldrb	r3, [r3, #0]
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f000 f9f5 	bl	800731c <RTC_ByteToBcd2>
 8006f32:	4603      	mov	r3, r0
 8006f34:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	785b      	ldrb	r3, [r3, #1]
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f000 f9ee 	bl	800731c <RTC_ByteToBcd2>
 8006f40:	4603      	mov	r3, r0
 8006f42:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006f44:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	789b      	ldrb	r3, [r3, #2]
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f000 f9e6 	bl	800731c <RTC_ByteToBcd2>
 8006f50:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006f52:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	78db      	ldrb	r3, [r3, #3]
 8006f5a:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006f5c:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006f66:	4618      	mov	r0, r3
 8006f68:	f000 f9d8 	bl	800731c <RTC_ByteToBcd2>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006f70:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006f78:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006f7e:	4313      	orrs	r3, r2
 8006f80:	617b      	str	r3, [r7, #20]
 8006f82:	e02c      	b.n	8006fde <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	695b      	ldr	r3, [r3, #20]
 8006f88:	f1b3 3f80 	cmp.w	r3, #2155905152	@ 0x80808080
 8006f8c:	d00d      	beq.n	8006faa <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	695b      	ldr	r3, [r3, #20]
 8006f92:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006f96:	d008      	beq.n	8006faa <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006f98:	4b4f      	ldr	r3, [pc, #316]	@ (80070d8 <HAL_RTC_SetAlarm_IT+0x210>)
 8006f9a:	699b      	ldr	r3, [r3, #24]
 8006f9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d102      	bne.n	8006faa <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	781b      	ldrb	r3, [r3, #0]
 8006fae:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	785b      	ldrb	r3, [r3, #1]
 8006fb4:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006fb6:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006fb8:	68ba      	ldr	r2, [r7, #8]
 8006fba:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006fbc:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	78db      	ldrb	r3, [r3, #3]
 8006fc2:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006fc4:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006fcc:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006fce:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006fd4:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006fde:	4b3e      	ldr	r3, [pc, #248]	@ (80070d8 <HAL_RTC_SetAlarm_IT+0x210>)
 8006fe0:	22ca      	movs	r2, #202	@ 0xca
 8006fe2:	625a      	str	r2, [r3, #36]	@ 0x24
 8006fe4:	4b3c      	ldr	r3, [pc, #240]	@ (80070d8 <HAL_RTC_SetAlarm_IT+0x210>)
 8006fe6:	2253      	movs	r2, #83	@ 0x53
 8006fe8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ff2:	d12c      	bne.n	800704e <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006ff4:	4b38      	ldr	r3, [pc, #224]	@ (80070d8 <HAL_RTC_SetAlarm_IT+0x210>)
 8006ff6:	699b      	ldr	r3, [r3, #24]
 8006ff8:	4a37      	ldr	r2, [pc, #220]	@ (80070d8 <HAL_RTC_SetAlarm_IT+0x210>)
 8006ffa:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8006ffe:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8007000:	4b35      	ldr	r3, [pc, #212]	@ (80070d8 <HAL_RTC_SetAlarm_IT+0x210>)
 8007002:	2201      	movs	r2, #1
 8007004:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800700c:	d107      	bne.n	800701e <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	699a      	ldr	r2, [r3, #24]
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	69db      	ldr	r3, [r3, #28]
 8007016:	4930      	ldr	r1, [pc, #192]	@ (80070d8 <HAL_RTC_SetAlarm_IT+0x210>)
 8007018:	4313      	orrs	r3, r2
 800701a:	644b      	str	r3, [r1, #68]	@ 0x44
 800701c:	e006      	b.n	800702c <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 800701e:	4a2e      	ldr	r2, [pc, #184]	@ (80070d8 <HAL_RTC_SetAlarm_IT+0x210>)
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	6413      	str	r3, [r2, #64]	@ 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8007024:	4a2c      	ldr	r2, [pc, #176]	@ (80070d8 <HAL_RTC_SetAlarm_IT+0x210>)
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	699b      	ldr	r3, [r3, #24]
 800702a:	6453      	str	r3, [r2, #68]	@ 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 800702c:	4a2a      	ldr	r2, [pc, #168]	@ (80070d8 <HAL_RTC_SetAlarm_IT+0x210>)
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	6713      	str	r3, [r2, #112]	@ 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007038:	f043 0201 	orr.w	r2, r3, #1
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8007040:	4b25      	ldr	r3, [pc, #148]	@ (80070d8 <HAL_RTC_SetAlarm_IT+0x210>)
 8007042:	699b      	ldr	r3, [r3, #24]
 8007044:	4a24      	ldr	r2, [pc, #144]	@ (80070d8 <HAL_RTC_SetAlarm_IT+0x210>)
 8007046:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
 800704a:	6193      	str	r3, [r2, #24]
 800704c:	e02b      	b.n	80070a6 <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800704e:	4b22      	ldr	r3, [pc, #136]	@ (80070d8 <HAL_RTC_SetAlarm_IT+0x210>)
 8007050:	699b      	ldr	r3, [r3, #24]
 8007052:	4a21      	ldr	r2, [pc, #132]	@ (80070d8 <HAL_RTC_SetAlarm_IT+0x210>)
 8007054:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 8007058:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800705a:	4b1f      	ldr	r3, [pc, #124]	@ (80070d8 <HAL_RTC_SetAlarm_IT+0x210>)
 800705c:	2202      	movs	r2, #2
 800705e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007066:	d107      	bne.n	8007078 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	699a      	ldr	r2, [r3, #24]
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	69db      	ldr	r3, [r3, #28]
 8007070:	4919      	ldr	r1, [pc, #100]	@ (80070d8 <HAL_RTC_SetAlarm_IT+0x210>)
 8007072:	4313      	orrs	r3, r2
 8007074:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8007076:	e006      	b.n	8007086 <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8007078:	4a17      	ldr	r2, [pc, #92]	@ (80070d8 <HAL_RTC_SetAlarm_IT+0x210>)
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	6493      	str	r3, [r2, #72]	@ 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 800707e:	4a16      	ldr	r2, [pc, #88]	@ (80070d8 <HAL_RTC_SetAlarm_IT+0x210>)
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	699b      	ldr	r3, [r3, #24]
 8007084:	64d3      	str	r3, [r2, #76]	@ 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8007086:	4a14      	ldr	r2, [pc, #80]	@ (80070d8 <HAL_RTC_SetAlarm_IT+0x210>)
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	685b      	ldr	r3, [r3, #4]
 800708c:	6753      	str	r3, [r2, #116]	@ 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007092:	f043 0202 	orr.w	r2, r3, #2
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800709a:	4b0f      	ldr	r3, [pc, #60]	@ (80070d8 <HAL_RTC_SetAlarm_IT+0x210>)
 800709c:	699b      	ldr	r3, [r3, #24]
 800709e:	4a0e      	ldr	r2, [pc, #56]	@ (80070d8 <HAL_RTC_SetAlarm_IT+0x210>)
 80070a0:	f443 5308 	orr.w	r3, r3, #8704	@ 0x2200
 80070a4:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80070a6:	4b0d      	ldr	r3, [pc, #52]	@ (80070dc <HAL_RTC_SetAlarm_IT+0x214>)
 80070a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80070ac:	4a0b      	ldr	r2, [pc, #44]	@ (80070dc <HAL_RTC_SetAlarm_IT+0x214>)
 80070ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80070b2:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80070b6:	4b08      	ldr	r3, [pc, #32]	@ (80070d8 <HAL_RTC_SetAlarm_IT+0x210>)
 80070b8:	22ff      	movs	r2, #255	@ 0xff
 80070ba:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	2201      	movs	r2, #1
 80070c0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	2200      	movs	r2, #0
 80070c8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80070cc:	2300      	movs	r3, #0
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	371c      	adds	r7, #28
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd90      	pop	{r4, r7, pc}
 80070d6:	bf00      	nop
 80070d8:	40002800 	.word	0x40002800
 80070dc:	58000800 	.word	0x58000800

080070e0 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b083      	sub	sp, #12
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
 80070e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80070f0:	2b01      	cmp	r3, #1
 80070f2:	d101      	bne.n	80070f8 <HAL_RTC_DeactivateAlarm+0x18>
 80070f4:	2302      	movs	r3, #2
 80070f6:	e048      	b.n	800718a <HAL_RTC_DeactivateAlarm+0xaa>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2201      	movs	r2, #1
 80070fc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2202      	movs	r2, #2
 8007104:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007108:	4b22      	ldr	r3, [pc, #136]	@ (8007194 <HAL_RTC_DeactivateAlarm+0xb4>)
 800710a:	22ca      	movs	r2, #202	@ 0xca
 800710c:	625a      	str	r2, [r3, #36]	@ 0x24
 800710e:	4b21      	ldr	r3, [pc, #132]	@ (8007194 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007110:	2253      	movs	r2, #83	@ 0x53
 8007112:	625a      	str	r2, [r3, #36]	@ 0x24

  if (Alarm == RTC_ALARM_A)
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800711a:	d115      	bne.n	8007148 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800711c:	4b1d      	ldr	r3, [pc, #116]	@ (8007194 <HAL_RTC_DeactivateAlarm+0xb4>)
 800711e:	699b      	ldr	r3, [r3, #24]
 8007120:	4a1c      	ldr	r2, [pc, #112]	@ (8007194 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007122:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8007126:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8007128:	4b1a      	ldr	r3, [pc, #104]	@ (8007194 <HAL_RTC_DeactivateAlarm+0xb4>)
 800712a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800712c:	4a19      	ldr	r2, [pc, #100]	@ (8007194 <HAL_RTC_DeactivateAlarm+0xb4>)
 800712e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007132:	6453      	str	r3, [r2, #68]	@ 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007138:	f023 0201 	bic.w	r2, r3, #1
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8007140:	4b14      	ldr	r3, [pc, #80]	@ (8007194 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007142:	2201      	movs	r2, #1
 8007144:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007146:	e014      	b.n	8007172 <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8007148:	4b12      	ldr	r3, [pc, #72]	@ (8007194 <HAL_RTC_DeactivateAlarm+0xb4>)
 800714a:	699b      	ldr	r3, [r3, #24]
 800714c:	4a11      	ldr	r2, [pc, #68]	@ (8007194 <HAL_RTC_DeactivateAlarm+0xb4>)
 800714e:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 8007152:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8007154:	4b0f      	ldr	r3, [pc, #60]	@ (8007194 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007156:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007158:	4a0e      	ldr	r2, [pc, #56]	@ (8007194 <HAL_RTC_DeactivateAlarm+0xb4>)
 800715a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800715e:	64d3      	str	r3, [r2, #76]	@ 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007164:	f023 0202 	bic.w	r2, r3, #2
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800716c:	4b09      	ldr	r3, [pc, #36]	@ (8007194 <HAL_RTC_DeactivateAlarm+0xb4>)
 800716e:	2202      	movs	r2, #2
 8007170:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007172:	4b08      	ldr	r3, [pc, #32]	@ (8007194 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007174:	22ff      	movs	r2, #255	@ 0xff
 8007176:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2201      	movs	r2, #1
 800717c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2200      	movs	r2, #0
 8007184:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8007188:	2300      	movs	r3, #0
}
 800718a:	4618      	mov	r0, r3
 800718c:	370c      	adds	r7, #12
 800718e:	46bd      	mov	sp, r7
 8007190:	bc80      	pop	{r7}
 8007192:	4770      	bx	lr
 8007194:	40002800 	.word	0x40002800

08007198 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b084      	sub	sp, #16
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 80071a0:	4b11      	ldr	r3, [pc, #68]	@ (80071e8 <HAL_RTC_AlarmIRQHandler+0x50>)
 80071a2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071a8:	4013      	ands	r3, r2
 80071aa:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f003 0301 	and.w	r3, r3, #1
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d005      	beq.n	80071c2 <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80071b6:	4b0c      	ldr	r3, [pc, #48]	@ (80071e8 <HAL_RTC_AlarmIRQHandler+0x50>)
 80071b8:	2201      	movs	r2, #1
 80071ba:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f7fb faee 	bl	800279e <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	f003 0302 	and.w	r3, r3, #2
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d005      	beq.n	80071d8 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80071cc:	4b06      	ldr	r3, [pc, #24]	@ (80071e8 <HAL_RTC_AlarmIRQHandler+0x50>)
 80071ce:	2202      	movs	r2, #2
 80071d0:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f000 f94a 	bl	800746c <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2201      	movs	r2, #1
 80071dc:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 80071e0:	bf00      	nop
 80071e2:	3710      	adds	r7, #16
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}
 80071e8:	40002800 	.word	0x40002800

080071ec <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b084      	sub	sp, #16
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 80071f4:	4b0f      	ldr	r3, [pc, #60]	@ (8007234 <HAL_RTC_WaitForSynchro+0x48>)
 80071f6:	68db      	ldr	r3, [r3, #12]
 80071f8:	4a0e      	ldr	r2, [pc, #56]	@ (8007234 <HAL_RTC_WaitForSynchro+0x48>)
 80071fa:	f023 0320 	bic.w	r3, r3, #32
 80071fe:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8007200:	f7fa ffe0 	bl	80021c4 <HAL_GetTick>
 8007204:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8007206:	e009      	b.n	800721c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007208:	f7fa ffdc 	bl	80021c4 <HAL_GetTick>
 800720c:	4602      	mov	r2, r0
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	1ad3      	subs	r3, r2, r3
 8007212:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007216:	d901      	bls.n	800721c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8007218:	2303      	movs	r3, #3
 800721a:	e006      	b.n	800722a <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800721c:	4b05      	ldr	r3, [pc, #20]	@ (8007234 <HAL_RTC_WaitForSynchro+0x48>)
 800721e:	68db      	ldr	r3, [r3, #12]
 8007220:	f003 0320 	and.w	r3, r3, #32
 8007224:	2b00      	cmp	r3, #0
 8007226:	d0ef      	beq.n	8007208 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8007228:	2300      	movs	r3, #0
}
 800722a:	4618      	mov	r0, r3
 800722c:	3710      	adds	r7, #16
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}
 8007232:	bf00      	nop
 8007234:	40002800 	.word	0x40002800

08007238 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b084      	sub	sp, #16
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007240:	2300      	movs	r3, #0
 8007242:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8007244:	4b15      	ldr	r3, [pc, #84]	@ (800729c <RTC_EnterInitMode+0x64>)
 8007246:	68db      	ldr	r3, [r3, #12]
 8007248:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800724c:	2b00      	cmp	r3, #0
 800724e:	d120      	bne.n	8007292 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8007250:	4b12      	ldr	r3, [pc, #72]	@ (800729c <RTC_EnterInitMode+0x64>)
 8007252:	68db      	ldr	r3, [r3, #12]
 8007254:	4a11      	ldr	r2, [pc, #68]	@ (800729c <RTC_EnterInitMode+0x64>)
 8007256:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800725a:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800725c:	f7fa ffb2 	bl	80021c4 <HAL_GetTick>
 8007260:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007262:	e00d      	b.n	8007280 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007264:	f7fa ffae 	bl	80021c4 <HAL_GetTick>
 8007268:	4602      	mov	r2, r0
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	1ad3      	subs	r3, r2, r3
 800726e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007272:	d905      	bls.n	8007280 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8007274:	2303      	movs	r3, #3
 8007276:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2203      	movs	r2, #3
 800727c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007280:	4b06      	ldr	r3, [pc, #24]	@ (800729c <RTC_EnterInitMode+0x64>)
 8007282:	68db      	ldr	r3, [r3, #12]
 8007284:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007288:	2b00      	cmp	r3, #0
 800728a:	d102      	bne.n	8007292 <RTC_EnterInitMode+0x5a>
 800728c:	7bfb      	ldrb	r3, [r7, #15]
 800728e:	2b03      	cmp	r3, #3
 8007290:	d1e8      	bne.n	8007264 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8007292:	7bfb      	ldrb	r3, [r7, #15]
}
 8007294:	4618      	mov	r0, r3
 8007296:	3710      	adds	r7, #16
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}
 800729c:	40002800 	.word	0x40002800

080072a0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b084      	sub	sp, #16
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80072a8:	2300      	movs	r3, #0
 80072aa:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80072ac:	4b1a      	ldr	r3, [pc, #104]	@ (8007318 <RTC_ExitInitMode+0x78>)
 80072ae:	68db      	ldr	r3, [r3, #12]
 80072b0:	4a19      	ldr	r2, [pc, #100]	@ (8007318 <RTC_ExitInitMode+0x78>)
 80072b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80072b6:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80072b8:	4b17      	ldr	r3, [pc, #92]	@ (8007318 <RTC_ExitInitMode+0x78>)
 80072ba:	699b      	ldr	r3, [r3, #24]
 80072bc:	f003 0320 	and.w	r3, r3, #32
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d10c      	bne.n	80072de <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f7ff ff91 	bl	80071ec <HAL_RTC_WaitForSynchro>
 80072ca:	4603      	mov	r3, r0
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d01e      	beq.n	800730e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2203      	movs	r2, #3
 80072d4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 80072d8:	2303      	movs	r3, #3
 80072da:	73fb      	strb	r3, [r7, #15]
 80072dc:	e017      	b.n	800730e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80072de:	4b0e      	ldr	r3, [pc, #56]	@ (8007318 <RTC_ExitInitMode+0x78>)
 80072e0:	699b      	ldr	r3, [r3, #24]
 80072e2:	4a0d      	ldr	r2, [pc, #52]	@ (8007318 <RTC_ExitInitMode+0x78>)
 80072e4:	f023 0320 	bic.w	r3, r3, #32
 80072e8:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f7ff ff7e 	bl	80071ec <HAL_RTC_WaitForSynchro>
 80072f0:	4603      	mov	r3, r0
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d005      	beq.n	8007302 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2203      	movs	r2, #3
 80072fa:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 80072fe:	2303      	movs	r3, #3
 8007300:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007302:	4b05      	ldr	r3, [pc, #20]	@ (8007318 <RTC_ExitInitMode+0x78>)
 8007304:	699b      	ldr	r3, [r3, #24]
 8007306:	4a04      	ldr	r2, [pc, #16]	@ (8007318 <RTC_ExitInitMode+0x78>)
 8007308:	f043 0320 	orr.w	r3, r3, #32
 800730c:	6193      	str	r3, [r2, #24]
  }

  return status;
 800730e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007310:	4618      	mov	r0, r3
 8007312:	3710      	adds	r7, #16
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}
 8007318:	40002800 	.word	0x40002800

0800731c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800731c:	b480      	push	{r7}
 800731e:	b085      	sub	sp, #20
 8007320:	af00      	add	r7, sp, #0
 8007322:	4603      	mov	r3, r0
 8007324:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8007326:	2300      	movs	r3, #0
 8007328:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 800732a:	79fb      	ldrb	r3, [r7, #7]
 800732c:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 800732e:	e005      	b.n	800733c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	3301      	adds	r3, #1
 8007334:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8007336:	7afb      	ldrb	r3, [r7, #11]
 8007338:	3b0a      	subs	r3, #10
 800733a:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 800733c:	7afb      	ldrb	r3, [r7, #11]
 800733e:	2b09      	cmp	r3, #9
 8007340:	d8f6      	bhi.n	8007330 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	b2db      	uxtb	r3, r3
 8007346:	011b      	lsls	r3, r3, #4
 8007348:	b2da      	uxtb	r2, r3
 800734a:	7afb      	ldrb	r3, [r7, #11]
 800734c:	4313      	orrs	r3, r2
 800734e:	b2db      	uxtb	r3, r3
}
 8007350:	4618      	mov	r0, r3
 8007352:	3714      	adds	r7, #20
 8007354:	46bd      	mov	sp, r7
 8007356:	bc80      	pop	{r7}
 8007358:	4770      	bx	lr
	...

0800735c <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 800735c:	b480      	push	{r7}
 800735e:	b083      	sub	sp, #12
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800736a:	2b01      	cmp	r3, #1
 800736c:	d101      	bne.n	8007372 <HAL_RTCEx_EnableBypassShadow+0x16>
 800736e:	2302      	movs	r3, #2
 8007370:	e01f      	b.n	80073b2 <HAL_RTCEx_EnableBypassShadow+0x56>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2201      	movs	r2, #1
 8007376:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2202      	movs	r2, #2
 800737e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007382:	4b0e      	ldr	r3, [pc, #56]	@ (80073bc <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007384:	22ca      	movs	r2, #202	@ 0xca
 8007386:	625a      	str	r2, [r3, #36]	@ 0x24
 8007388:	4b0c      	ldr	r3, [pc, #48]	@ (80073bc <HAL_RTCEx_EnableBypassShadow+0x60>)
 800738a:	2253      	movs	r2, #83	@ 0x53
 800738c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800738e:	4b0b      	ldr	r3, [pc, #44]	@ (80073bc <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007390:	699b      	ldr	r3, [r3, #24]
 8007392:	4a0a      	ldr	r2, [pc, #40]	@ (80073bc <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007394:	f043 0320 	orr.w	r3, r3, #32
 8007398:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800739a:	4b08      	ldr	r3, [pc, #32]	@ (80073bc <HAL_RTCEx_EnableBypassShadow+0x60>)
 800739c:	22ff      	movs	r2, #255	@ 0xff
 800739e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2201      	movs	r2, #1
 80073a4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2200      	movs	r2, #0
 80073ac:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80073b0:	2300      	movs	r3, #0
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	370c      	adds	r7, #12
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bc80      	pop	{r7}
 80073ba:	4770      	bx	lr
 80073bc:	40002800 	.word	0x40002800

080073c0 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b083      	sub	sp, #12
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80073ce:	2b01      	cmp	r3, #1
 80073d0:	d101      	bne.n	80073d6 <HAL_RTCEx_SetSSRU_IT+0x16>
 80073d2:	2302      	movs	r3, #2
 80073d4:	e027      	b.n	8007426 <HAL_RTCEx_SetSSRU_IT+0x66>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2201      	movs	r2, #1
 80073da:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2202      	movs	r2, #2
 80073e2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80073e6:	4b12      	ldr	r3, [pc, #72]	@ (8007430 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80073e8:	22ca      	movs	r2, #202	@ 0xca
 80073ea:	625a      	str	r2, [r3, #36]	@ 0x24
 80073ec:	4b10      	ldr	r3, [pc, #64]	@ (8007430 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80073ee:	2253      	movs	r2, #83	@ 0x53
 80073f0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 80073f2:	4b0f      	ldr	r3, [pc, #60]	@ (8007430 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80073f4:	699b      	ldr	r3, [r3, #24]
 80073f6:	4a0e      	ldr	r2, [pc, #56]	@ (8007430 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80073f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073fc:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 80073fe:	4b0d      	ldr	r3, [pc, #52]	@ (8007434 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8007400:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007404:	4a0b      	ldr	r2, [pc, #44]	@ (8007434 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8007406:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800740a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800740e:	4b08      	ldr	r3, [pc, #32]	@ (8007430 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007410:	22ff      	movs	r2, #255	@ 0xff
 8007412:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2201      	movs	r2, #1
 8007418:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2200      	movs	r2, #0
 8007420:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8007424:	2300      	movs	r3, #0
}
 8007426:	4618      	mov	r0, r3
 8007428:	370c      	adds	r7, #12
 800742a:	46bd      	mov	sp, r7
 800742c:	bc80      	pop	{r7}
 800742e:	4770      	bx	lr
 8007430:	40002800 	.word	0x40002800
 8007434:	58000800 	.word	0x58000800

08007438 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b082      	sub	sp, #8
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8007440:	4b09      	ldr	r3, [pc, #36]	@ (8007468 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8007442:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007444:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007448:	2b00      	cmp	r3, #0
 800744a:	d005      	beq.n	8007458 <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 800744c:	4b06      	ldr	r3, [pc, #24]	@ (8007468 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 800744e:	2240      	movs	r2, #64	@ 0x40
 8007450:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f7fb f9ad 	bl	80027b2 <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2201      	movs	r2, #1
 800745c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 8007460:	bf00      	nop
 8007462:	3708      	adds	r7, #8
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}
 8007468:	40002800 	.word	0x40002800

0800746c <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800746c:	b480      	push	{r7}
 800746e:	b083      	sub	sp, #12
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8007474:	bf00      	nop
 8007476:	370c      	adds	r7, #12
 8007478:	46bd      	mov	sp, r7
 800747a:	bc80      	pop	{r7}
 800747c:	4770      	bx	lr
	...

08007480 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8007480:	b480      	push	{r7}
 8007482:	b087      	sub	sp, #28
 8007484:	af00      	add	r7, sp, #0
 8007486:	60f8      	str	r0, [r7, #12]
 8007488:	60b9      	str	r1, [r7, #8]
 800748a:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 800748c:	4b07      	ldr	r3, [pc, #28]	@ (80074ac <HAL_RTCEx_BKUPWrite+0x2c>)
 800748e:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	009b      	lsls	r3, r3, #2
 8007494:	697a      	ldr	r2, [r7, #20]
 8007496:	4413      	add	r3, r2
 8007498:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	687a      	ldr	r2, [r7, #4]
 800749e:	601a      	str	r2, [r3, #0]
}
 80074a0:	bf00      	nop
 80074a2:	371c      	adds	r7, #28
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bc80      	pop	{r7}
 80074a8:	4770      	bx	lr
 80074aa:	bf00      	nop
 80074ac:	4000b100 	.word	0x4000b100

080074b0 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b085      	sub	sp, #20
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
 80074b8:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 80074ba:	4b07      	ldr	r3, [pc, #28]	@ (80074d8 <HAL_RTCEx_BKUPRead+0x28>)
 80074bc:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	009b      	lsls	r3, r3, #2
 80074c2:	68fa      	ldr	r2, [r7, #12]
 80074c4:	4413      	add	r3, r2
 80074c6:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	3714      	adds	r7, #20
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bc80      	pop	{r7}
 80074d4:	4770      	bx	lr
 80074d6:	bf00      	nop
 80074d8:	4000b100 	.word	0x4000b100

080074dc <LL_PWR_SetRadioBusyTrigger>:
{
 80074dc:	b480      	push	{r7}
 80074de:	b083      	sub	sp, #12
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 80074e4:	4b06      	ldr	r3, [pc, #24]	@ (8007500 <LL_PWR_SetRadioBusyTrigger+0x24>)
 80074e6:	689b      	ldr	r3, [r3, #8]
 80074e8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80074ec:	4904      	ldr	r1, [pc, #16]	@ (8007500 <LL_PWR_SetRadioBusyTrigger+0x24>)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	4313      	orrs	r3, r2
 80074f2:	608b      	str	r3, [r1, #8]
}
 80074f4:	bf00      	nop
 80074f6:	370c      	adds	r7, #12
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bc80      	pop	{r7}
 80074fc:	4770      	bx	lr
 80074fe:	bf00      	nop
 8007500:	58000400 	.word	0x58000400

08007504 <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 8007504:	b480      	push	{r7}
 8007506:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007508:	4b05      	ldr	r3, [pc, #20]	@ (8007520 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 800750a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800750e:	4a04      	ldr	r2, [pc, #16]	@ (8007520 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8007510:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007514:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8007518:	bf00      	nop
 800751a:	46bd      	mov	sp, r7
 800751c:	bc80      	pop	{r7}
 800751e:	4770      	bx	lr
 8007520:	58000400 	.word	0x58000400

08007524 <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 8007524:	b480      	push	{r7}
 8007526:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007528:	4b05      	ldr	r3, [pc, #20]	@ (8007540 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 800752a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800752e:	4a04      	ldr	r2, [pc, #16]	@ (8007540 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8007530:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007534:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8007538:	bf00      	nop
 800753a:	46bd      	mov	sp, r7
 800753c:	bc80      	pop	{r7}
 800753e:	4770      	bx	lr
 8007540:	58000400 	.word	0x58000400

08007544 <LL_PWR_ClearFlag_RFBUSY>:
{
 8007544:	b480      	push	{r7}
 8007546:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8007548:	4b03      	ldr	r3, [pc, #12]	@ (8007558 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 800754a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800754e:	619a      	str	r2, [r3, #24]
}
 8007550:	bf00      	nop
 8007552:	46bd      	mov	sp, r7
 8007554:	bc80      	pop	{r7}
 8007556:	4770      	bx	lr
 8007558:	58000400 	.word	0x58000400

0800755c <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 800755c:	b480      	push	{r7}
 800755e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8007560:	4b06      	ldr	r3, [pc, #24]	@ (800757c <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8007562:	695b      	ldr	r3, [r3, #20]
 8007564:	f003 0302 	and.w	r3, r3, #2
 8007568:	2b02      	cmp	r3, #2
 800756a:	d101      	bne.n	8007570 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 800756c:	2301      	movs	r3, #1
 800756e:	e000      	b.n	8007572 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8007570:	2300      	movs	r3, #0
}
 8007572:	4618      	mov	r0, r3
 8007574:	46bd      	mov	sp, r7
 8007576:	bc80      	pop	{r7}
 8007578:	4770      	bx	lr
 800757a:	bf00      	nop
 800757c:	58000400 	.word	0x58000400

08007580 <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 8007580:	b480      	push	{r7}
 8007582:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8007584:	4b06      	ldr	r3, [pc, #24]	@ (80075a0 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8007586:	695b      	ldr	r3, [r3, #20]
 8007588:	f003 0304 	and.w	r3, r3, #4
 800758c:	2b04      	cmp	r3, #4
 800758e:	d101      	bne.n	8007594 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8007590:	2301      	movs	r3, #1
 8007592:	e000      	b.n	8007596 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8007594:	2300      	movs	r3, #0
}
 8007596:	4618      	mov	r0, r3
 8007598:	46bd      	mov	sp, r7
 800759a:	bc80      	pop	{r7}
 800759c:	4770      	bx	lr
 800759e:	bf00      	nop
 80075a0:	58000400 	.word	0x58000400

080075a4 <LL_RCC_RF_DisableReset>:
{
 80075a4:	b480      	push	{r7}
 80075a6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 80075a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80075ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80075b0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80075b4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80075b8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80075bc:	bf00      	nop
 80075be:	46bd      	mov	sp, r7
 80075c0:	bc80      	pop	{r7}
 80075c2:	4770      	bx	lr

080075c4 <LL_RCC_IsRFUnderReset>:
{
 80075c4:	b480      	push	{r7}
 80075c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 80075c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80075cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80075d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80075d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80075d8:	d101      	bne.n	80075de <LL_RCC_IsRFUnderReset+0x1a>
 80075da:	2301      	movs	r3, #1
 80075dc:	e000      	b.n	80075e0 <LL_RCC_IsRFUnderReset+0x1c>
 80075de:	2300      	movs	r3, #0
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bc80      	pop	{r7}
 80075e6:	4770      	bx	lr

080075e8 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b083      	sub	sp, #12
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80075f0:	4b06      	ldr	r3, [pc, #24]	@ (800760c <LL_EXTI_EnableIT_32_63+0x24>)
 80075f2:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80075f6:	4905      	ldr	r1, [pc, #20]	@ (800760c <LL_EXTI_EnableIT_32_63+0x24>)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	4313      	orrs	r3, r2
 80075fc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8007600:	bf00      	nop
 8007602:	370c      	adds	r7, #12
 8007604:	46bd      	mov	sp, r7
 8007606:	bc80      	pop	{r7}
 8007608:	4770      	bx	lr
 800760a:	bf00      	nop
 800760c:	58000800 	.word	0x58000800

08007610 <HAL_SUBGHZ_Init>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b084      	sub	sp, #16
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d103      	bne.n	8007626 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 800761e:	2301      	movs	r3, #1
 8007620:	73fb      	strb	r3, [r7, #15]
    return status;
 8007622:	7bfb      	ldrb	r3, [r7, #15]
 8007624:	e04b      	b.n	80076be <HAL_SUBGHZ_Init+0xae>
  }
  else
  {
    status = HAL_OK;
 8007626:	2300      	movs	r3, #0
 8007628:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	799b      	ldrb	r3, [r3, #6]
 800762e:	b2db      	uxtb	r3, r3
 8007630:	2b00      	cmp	r3, #0
 8007632:	d105      	bne.n	8007640 <HAL_SUBGHZ_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2200      	movs	r2, #0
 8007638:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f7fa fc1a 	bl	8001e74 <HAL_SUBGHZ_MspInit>
#endif /* USE_HAL_ SUBGHZ_REGISTER_CALLBACKS */
  }

  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2202      	movs	r2, #2
 8007644:	719a      	strb	r2, [r3, #6]

  /* De-asserts the reset signal of the Radio peripheral */
  LL_RCC_RF_DisableReset();
 8007646:	f7ff ffad 	bl	80075a4 <LL_RCC_RF_DisableReset>

  /* Verify that Radio in reset status flag is set */
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800764a:	4b1f      	ldr	r3, [pc, #124]	@ (80076c8 <HAL_SUBGHZ_Init+0xb8>)
 800764c:	681a      	ldr	r2, [r3, #0]
 800764e:	4613      	mov	r3, r2
 8007650:	00db      	lsls	r3, r3, #3
 8007652:	1a9b      	subs	r3, r3, r2
 8007654:	009b      	lsls	r3, r3, #2
 8007656:	0cdb      	lsrs	r3, r3, #19
 8007658:	2264      	movs	r2, #100	@ 0x64
 800765a:	fb02 f303 	mul.w	r3, r2, r3
 800765e:	60bb      	str	r3, [r7, #8]

  do
  {
    if (count == 0U)
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d105      	bne.n	8007672 <HAL_SUBGHZ_Init+0x62>
    {
      status  = HAL_ERROR;
 8007666:	2301      	movs	r3, #1
 8007668:	73fb      	strb	r3, [r7, #15]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2201      	movs	r2, #1
 800766e:	609a      	str	r2, [r3, #8]
      break;
 8007670:	e007      	b.n	8007682 <HAL_SUBGHZ_Init+0x72>
    }
    count--;
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	3b01      	subs	r3, #1
 8007676:	60bb      	str	r3, [r7, #8]
  } while (LL_RCC_IsRFUnderReset() != 0UL);
 8007678:	f7ff ffa4 	bl	80075c4 <LL_RCC_IsRFUnderReset>
 800767c:	4603      	mov	r3, r0
 800767e:	2b00      	cmp	r3, #0
 8007680:	d1ee      	bne.n	8007660 <HAL_SUBGHZ_Init+0x50>

  /* Asserts the reset signal of the Radio peripheral */
  LL_PWR_UnselectSUBGHZSPI_NSS();
 8007682:	f7ff ff3f 	bl	8007504 <LL_PWR_UnselectSUBGHZSPI_NSS>

  /* Enable wakeup signal of the Radio peripheral */
  LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
  /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8007686:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800768a:	f7ff ffad 	bl	80075e8 <LL_EXTI_EnableIT_32_63>

  /* Enable wakeup signal of the Radio peripheral */
  LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 800768e:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8007692:	f7ff ff23 	bl	80074dc <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8007696:	f7ff ff55 	bl	8007544 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 800769a:	7bfb      	ldrb	r3, [r7, #15]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d10a      	bne.n	80076b6 <HAL_SUBGHZ_Init+0xa6>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4618      	mov	r0, r3
 80076a6:	f000 faaf 	bl	8007c08 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2201      	movs	r2, #1
 80076ae:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2200      	movs	r2, #0
 80076b4:	609a      	str	r2, [r3, #8]
  }
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2201      	movs	r2, #1
 80076ba:	719a      	strb	r2, [r3, #6]

  return status;
 80076bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80076be:	4618      	mov	r0, r3
 80076c0:	3710      	adds	r7, #16
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}
 80076c6:	bf00      	nop
 80076c8:	20000000 	.word	0x20000000

080076cc <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b086      	sub	sp, #24
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	60f8      	str	r0, [r7, #12]
 80076d4:	607a      	str	r2, [r7, #4]
 80076d6:	461a      	mov	r2, r3
 80076d8:	460b      	mov	r3, r1
 80076da:	817b      	strh	r3, [r7, #10]
 80076dc:	4613      	mov	r3, r2
 80076de:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	799b      	ldrb	r3, [r3, #6]
 80076e4:	b2db      	uxtb	r3, r3
 80076e6:	2b01      	cmp	r3, #1
 80076e8:	d14a      	bne.n	8007780 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	795b      	ldrb	r3, [r3, #5]
 80076ee:	2b01      	cmp	r3, #1
 80076f0:	d101      	bne.n	80076f6 <HAL_SUBGHZ_WriteRegisters+0x2a>
 80076f2:	2302      	movs	r3, #2
 80076f4:	e045      	b.n	8007782 <HAL_SUBGHZ_WriteRegisters+0xb6>
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	2201      	movs	r2, #1
 80076fa:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2202      	movs	r2, #2
 8007700:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007702:	68f8      	ldr	r0, [r7, #12]
 8007704:	f000 fb4e 	bl	8007da4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007708:	f7ff ff0c 	bl	8007524 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 800770c:	210d      	movs	r1, #13
 800770e:	68f8      	ldr	r0, [r7, #12]
 8007710:	f000 fa9a 	bl	8007c48 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8007714:	897b      	ldrh	r3, [r7, #10]
 8007716:	0a1b      	lsrs	r3, r3, #8
 8007718:	b29b      	uxth	r3, r3
 800771a:	b2db      	uxtb	r3, r3
 800771c:	4619      	mov	r1, r3
 800771e:	68f8      	ldr	r0, [r7, #12]
 8007720:	f000 fa92 	bl	8007c48 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8007724:	897b      	ldrh	r3, [r7, #10]
 8007726:	b2db      	uxtb	r3, r3
 8007728:	4619      	mov	r1, r3
 800772a:	68f8      	ldr	r0, [r7, #12]
 800772c:	f000 fa8c 	bl	8007c48 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007730:	2300      	movs	r3, #0
 8007732:	82bb      	strh	r3, [r7, #20]
 8007734:	e00a      	b.n	800774c <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8007736:	8abb      	ldrh	r3, [r7, #20]
 8007738:	687a      	ldr	r2, [r7, #4]
 800773a:	4413      	add	r3, r2
 800773c:	781b      	ldrb	r3, [r3, #0]
 800773e:	4619      	mov	r1, r3
 8007740:	68f8      	ldr	r0, [r7, #12]
 8007742:	f000 fa81 	bl	8007c48 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007746:	8abb      	ldrh	r3, [r7, #20]
 8007748:	3301      	adds	r3, #1
 800774a:	82bb      	strh	r3, [r7, #20]
 800774c:	8aba      	ldrh	r2, [r7, #20]
 800774e:	893b      	ldrh	r3, [r7, #8]
 8007750:	429a      	cmp	r2, r3
 8007752:	d3f0      	bcc.n	8007736 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007754:	f7ff fed6 	bl	8007504 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007758:	68f8      	ldr	r0, [r7, #12]
 800775a:	f000 fb47 	bl	8007dec <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	689b      	ldr	r3, [r3, #8]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d002      	beq.n	800776c <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8007766:	2301      	movs	r3, #1
 8007768:	75fb      	strb	r3, [r7, #23]
 800776a:	e001      	b.n	8007770 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 800776c:	2300      	movs	r3, #0
 800776e:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2201      	movs	r2, #1
 8007774:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2200      	movs	r2, #0
 800777a:	715a      	strb	r2, [r3, #5]

    return status;
 800777c:	7dfb      	ldrb	r3, [r7, #23]
 800777e:	e000      	b.n	8007782 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8007780:	2302      	movs	r3, #2
  }
}
 8007782:	4618      	mov	r0, r3
 8007784:	3718      	adds	r7, #24
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}

0800778a <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 800778a:	b580      	push	{r7, lr}
 800778c:	b088      	sub	sp, #32
 800778e:	af00      	add	r7, sp, #0
 8007790:	60f8      	str	r0, [r7, #12]
 8007792:	607a      	str	r2, [r7, #4]
 8007794:	461a      	mov	r2, r3
 8007796:	460b      	mov	r3, r1
 8007798:	817b      	strh	r3, [r7, #10]
 800779a:	4613      	mov	r3, r2
 800779c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	799b      	ldrb	r3, [r3, #6]
 80077a6:	b2db      	uxtb	r3, r3
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	d14a      	bne.n	8007842 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	795b      	ldrb	r3, [r3, #5]
 80077b0:	2b01      	cmp	r3, #1
 80077b2:	d101      	bne.n	80077b8 <HAL_SUBGHZ_ReadRegisters+0x2e>
 80077b4:	2302      	movs	r3, #2
 80077b6:	e045      	b.n	8007844 <HAL_SUBGHZ_ReadRegisters+0xba>
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	2201      	movs	r2, #1
 80077bc:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80077be:	68f8      	ldr	r0, [r7, #12]
 80077c0:	f000 faf0 	bl	8007da4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80077c4:	f7ff feae 	bl	8007524 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 80077c8:	211d      	movs	r1, #29
 80077ca:	68f8      	ldr	r0, [r7, #12]
 80077cc:	f000 fa3c 	bl	8007c48 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80077d0:	897b      	ldrh	r3, [r7, #10]
 80077d2:	0a1b      	lsrs	r3, r3, #8
 80077d4:	b29b      	uxth	r3, r3
 80077d6:	b2db      	uxtb	r3, r3
 80077d8:	4619      	mov	r1, r3
 80077da:	68f8      	ldr	r0, [r7, #12]
 80077dc:	f000 fa34 	bl	8007c48 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80077e0:	897b      	ldrh	r3, [r7, #10]
 80077e2:	b2db      	uxtb	r3, r3
 80077e4:	4619      	mov	r1, r3
 80077e6:	68f8      	ldr	r0, [r7, #12]
 80077e8:	f000 fa2e 	bl	8007c48 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 80077ec:	2100      	movs	r1, #0
 80077ee:	68f8      	ldr	r0, [r7, #12]
 80077f0:	f000 fa2a 	bl	8007c48 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80077f4:	2300      	movs	r3, #0
 80077f6:	82fb      	strh	r3, [r7, #22]
 80077f8:	e009      	b.n	800780e <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80077fa:	69b9      	ldr	r1, [r7, #24]
 80077fc:	68f8      	ldr	r0, [r7, #12]
 80077fe:	f000 fa79 	bl	8007cf4 <SUBGHZSPI_Receive>
      pData++;
 8007802:	69bb      	ldr	r3, [r7, #24]
 8007804:	3301      	adds	r3, #1
 8007806:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8007808:	8afb      	ldrh	r3, [r7, #22]
 800780a:	3301      	adds	r3, #1
 800780c:	82fb      	strh	r3, [r7, #22]
 800780e:	8afa      	ldrh	r2, [r7, #22]
 8007810:	893b      	ldrh	r3, [r7, #8]
 8007812:	429a      	cmp	r2, r3
 8007814:	d3f1      	bcc.n	80077fa <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007816:	f7ff fe75 	bl	8007504 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800781a:	68f8      	ldr	r0, [r7, #12]
 800781c:	f000 fae6 	bl	8007dec <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	689b      	ldr	r3, [r3, #8]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d002      	beq.n	800782e <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8007828:	2301      	movs	r3, #1
 800782a:	77fb      	strb	r3, [r7, #31]
 800782c:	e001      	b.n	8007832 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 800782e:	2300      	movs	r3, #0
 8007830:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	2201      	movs	r2, #1
 8007836:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	2200      	movs	r2, #0
 800783c:	715a      	strb	r2, [r3, #5]

    return status;
 800783e:	7ffb      	ldrb	r3, [r7, #31]
 8007840:	e000      	b.n	8007844 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8007842:	2302      	movs	r3, #2
  }
}
 8007844:	4618      	mov	r0, r3
 8007846:	3720      	adds	r7, #32
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}

0800784c <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b086      	sub	sp, #24
 8007850:	af00      	add	r7, sp, #0
 8007852:	60f8      	str	r0, [r7, #12]
 8007854:	607a      	str	r2, [r7, #4]
 8007856:	461a      	mov	r2, r3
 8007858:	460b      	mov	r3, r1
 800785a:	72fb      	strb	r3, [r7, #11]
 800785c:	4613      	mov	r3, r2
 800785e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	799b      	ldrb	r3, [r3, #6]
 8007864:	b2db      	uxtb	r3, r3
 8007866:	2b01      	cmp	r3, #1
 8007868:	d14a      	bne.n	8007900 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	795b      	ldrb	r3, [r3, #5]
 800786e:	2b01      	cmp	r3, #1
 8007870:	d101      	bne.n	8007876 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8007872:	2302      	movs	r3, #2
 8007874:	e045      	b.n	8007902 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	2201      	movs	r2, #1
 800787a:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800787c:	68f8      	ldr	r0, [r7, #12]
 800787e:	f000 fa91 	bl	8007da4 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8007882:	7afb      	ldrb	r3, [r7, #11]
 8007884:	2b84      	cmp	r3, #132	@ 0x84
 8007886:	d002      	beq.n	800788e <HAL_SUBGHZ_ExecSetCmd+0x42>
 8007888:	7afb      	ldrb	r3, [r7, #11]
 800788a:	2b94      	cmp	r3, #148	@ 0x94
 800788c:	d103      	bne.n	8007896 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	2201      	movs	r2, #1
 8007892:	711a      	strb	r2, [r3, #4]
 8007894:	e002      	b.n	800789c <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	2200      	movs	r2, #0
 800789a:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800789c:	f7ff fe42 	bl	8007524 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80078a0:	7afb      	ldrb	r3, [r7, #11]
 80078a2:	4619      	mov	r1, r3
 80078a4:	68f8      	ldr	r0, [r7, #12]
 80078a6:	f000 f9cf 	bl	8007c48 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80078aa:	2300      	movs	r3, #0
 80078ac:	82bb      	strh	r3, [r7, #20]
 80078ae:	e00a      	b.n	80078c6 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80078b0:	8abb      	ldrh	r3, [r7, #20]
 80078b2:	687a      	ldr	r2, [r7, #4]
 80078b4:	4413      	add	r3, r2
 80078b6:	781b      	ldrb	r3, [r3, #0]
 80078b8:	4619      	mov	r1, r3
 80078ba:	68f8      	ldr	r0, [r7, #12]
 80078bc:	f000 f9c4 	bl	8007c48 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80078c0:	8abb      	ldrh	r3, [r7, #20]
 80078c2:	3301      	adds	r3, #1
 80078c4:	82bb      	strh	r3, [r7, #20]
 80078c6:	8aba      	ldrh	r2, [r7, #20]
 80078c8:	893b      	ldrh	r3, [r7, #8]
 80078ca:	429a      	cmp	r2, r3
 80078cc:	d3f0      	bcc.n	80078b0 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80078ce:	f7ff fe19 	bl	8007504 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 80078d2:	7afb      	ldrb	r3, [r7, #11]
 80078d4:	2b84      	cmp	r3, #132	@ 0x84
 80078d6:	d002      	beq.n	80078de <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 80078d8:	68f8      	ldr	r0, [r7, #12]
 80078da:	f000 fa87 	bl	8007dec <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	689b      	ldr	r3, [r3, #8]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d002      	beq.n	80078ec <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 80078e6:	2301      	movs	r3, #1
 80078e8:	75fb      	strb	r3, [r7, #23]
 80078ea:	e001      	b.n	80078f0 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 80078ec:	2300      	movs	r3, #0
 80078ee:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2201      	movs	r2, #1
 80078f4:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2200      	movs	r2, #0
 80078fa:	715a      	strb	r2, [r3, #5]

    return status;
 80078fc:	7dfb      	ldrb	r3, [r7, #23]
 80078fe:	e000      	b.n	8007902 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8007900:	2302      	movs	r3, #2
  }
}
 8007902:	4618      	mov	r0, r3
 8007904:	3718      	adds	r7, #24
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}

0800790a <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800790a:	b580      	push	{r7, lr}
 800790c:	b088      	sub	sp, #32
 800790e:	af00      	add	r7, sp, #0
 8007910:	60f8      	str	r0, [r7, #12]
 8007912:	607a      	str	r2, [r7, #4]
 8007914:	461a      	mov	r2, r3
 8007916:	460b      	mov	r3, r1
 8007918:	72fb      	strb	r3, [r7, #11]
 800791a:	4613      	mov	r3, r2
 800791c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	799b      	ldrb	r3, [r3, #6]
 8007926:	b2db      	uxtb	r3, r3
 8007928:	2b01      	cmp	r3, #1
 800792a:	d13d      	bne.n	80079a8 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	795b      	ldrb	r3, [r3, #5]
 8007930:	2b01      	cmp	r3, #1
 8007932:	d101      	bne.n	8007938 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8007934:	2302      	movs	r3, #2
 8007936:	e038      	b.n	80079aa <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	2201      	movs	r2, #1
 800793c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800793e:	68f8      	ldr	r0, [r7, #12]
 8007940:	f000 fa30 	bl	8007da4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007944:	f7ff fdee 	bl	8007524 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8007948:	7afb      	ldrb	r3, [r7, #11]
 800794a:	4619      	mov	r1, r3
 800794c:	68f8      	ldr	r0, [r7, #12]
 800794e:	f000 f97b 	bl	8007c48 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8007952:	2100      	movs	r1, #0
 8007954:	68f8      	ldr	r0, [r7, #12]
 8007956:	f000 f977 	bl	8007c48 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800795a:	2300      	movs	r3, #0
 800795c:	82fb      	strh	r3, [r7, #22]
 800795e:	e009      	b.n	8007974 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007960:	69b9      	ldr	r1, [r7, #24]
 8007962:	68f8      	ldr	r0, [r7, #12]
 8007964:	f000 f9c6 	bl	8007cf4 <SUBGHZSPI_Receive>
      pData++;
 8007968:	69bb      	ldr	r3, [r7, #24]
 800796a:	3301      	adds	r3, #1
 800796c:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800796e:	8afb      	ldrh	r3, [r7, #22]
 8007970:	3301      	adds	r3, #1
 8007972:	82fb      	strh	r3, [r7, #22]
 8007974:	8afa      	ldrh	r2, [r7, #22]
 8007976:	893b      	ldrh	r3, [r7, #8]
 8007978:	429a      	cmp	r2, r3
 800797a:	d3f1      	bcc.n	8007960 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800797c:	f7ff fdc2 	bl	8007504 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007980:	68f8      	ldr	r0, [r7, #12]
 8007982:	f000 fa33 	bl	8007dec <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	689b      	ldr	r3, [r3, #8]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d002      	beq.n	8007994 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 800798e:	2301      	movs	r3, #1
 8007990:	77fb      	strb	r3, [r7, #31]
 8007992:	e001      	b.n	8007998 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8007994:	2300      	movs	r3, #0
 8007996:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2201      	movs	r2, #1
 800799c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2200      	movs	r2, #0
 80079a2:	715a      	strb	r2, [r3, #5]

    return status;
 80079a4:	7ffb      	ldrb	r3, [r7, #31]
 80079a6:	e000      	b.n	80079aa <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80079a8:	2302      	movs	r3, #2
  }
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	3720      	adds	r7, #32
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}

080079b2 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 80079b2:	b580      	push	{r7, lr}
 80079b4:	b086      	sub	sp, #24
 80079b6:	af00      	add	r7, sp, #0
 80079b8:	60f8      	str	r0, [r7, #12]
 80079ba:	607a      	str	r2, [r7, #4]
 80079bc:	461a      	mov	r2, r3
 80079be:	460b      	mov	r3, r1
 80079c0:	72fb      	strb	r3, [r7, #11]
 80079c2:	4613      	mov	r3, r2
 80079c4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	799b      	ldrb	r3, [r3, #6]
 80079ca:	b2db      	uxtb	r3, r3
 80079cc:	2b01      	cmp	r3, #1
 80079ce:	d13e      	bne.n	8007a4e <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	795b      	ldrb	r3, [r3, #5]
 80079d4:	2b01      	cmp	r3, #1
 80079d6:	d101      	bne.n	80079dc <HAL_SUBGHZ_WriteBuffer+0x2a>
 80079d8:	2302      	movs	r3, #2
 80079da:	e039      	b.n	8007a50 <HAL_SUBGHZ_WriteBuffer+0x9e>
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	2201      	movs	r2, #1
 80079e0:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80079e2:	68f8      	ldr	r0, [r7, #12]
 80079e4:	f000 f9de 	bl	8007da4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80079e8:	f7ff fd9c 	bl	8007524 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 80079ec:	210e      	movs	r1, #14
 80079ee:	68f8      	ldr	r0, [r7, #12]
 80079f0:	f000 f92a 	bl	8007c48 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80079f4:	7afb      	ldrb	r3, [r7, #11]
 80079f6:	4619      	mov	r1, r3
 80079f8:	68f8      	ldr	r0, [r7, #12]
 80079fa:	f000 f925 	bl	8007c48 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80079fe:	2300      	movs	r3, #0
 8007a00:	82bb      	strh	r3, [r7, #20]
 8007a02:	e00a      	b.n	8007a1a <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8007a04:	8abb      	ldrh	r3, [r7, #20]
 8007a06:	687a      	ldr	r2, [r7, #4]
 8007a08:	4413      	add	r3, r2
 8007a0a:	781b      	ldrb	r3, [r3, #0]
 8007a0c:	4619      	mov	r1, r3
 8007a0e:	68f8      	ldr	r0, [r7, #12]
 8007a10:	f000 f91a 	bl	8007c48 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007a14:	8abb      	ldrh	r3, [r7, #20]
 8007a16:	3301      	adds	r3, #1
 8007a18:	82bb      	strh	r3, [r7, #20]
 8007a1a:	8aba      	ldrh	r2, [r7, #20]
 8007a1c:	893b      	ldrh	r3, [r7, #8]
 8007a1e:	429a      	cmp	r2, r3
 8007a20:	d3f0      	bcc.n	8007a04 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007a22:	f7ff fd6f 	bl	8007504 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007a26:	68f8      	ldr	r0, [r7, #12]
 8007a28:	f000 f9e0 	bl	8007dec <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	689b      	ldr	r3, [r3, #8]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d002      	beq.n	8007a3a <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8007a34:	2301      	movs	r3, #1
 8007a36:	75fb      	strb	r3, [r7, #23]
 8007a38:	e001      	b.n	8007a3e <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	2201      	movs	r2, #1
 8007a42:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	2200      	movs	r2, #0
 8007a48:	715a      	strb	r2, [r3, #5]

    return status;
 8007a4a:	7dfb      	ldrb	r3, [r7, #23]
 8007a4c:	e000      	b.n	8007a50 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8007a4e:	2302      	movs	r3, #2
  }
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	3718      	adds	r7, #24
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}

08007a58 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b088      	sub	sp, #32
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	60f8      	str	r0, [r7, #12]
 8007a60:	607a      	str	r2, [r7, #4]
 8007a62:	461a      	mov	r2, r3
 8007a64:	460b      	mov	r3, r1
 8007a66:	72fb      	strb	r3, [r7, #11]
 8007a68:	4613      	mov	r3, r2
 8007a6a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	799b      	ldrb	r3, [r3, #6]
 8007a74:	b2db      	uxtb	r3, r3
 8007a76:	2b01      	cmp	r3, #1
 8007a78:	d141      	bne.n	8007afe <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	795b      	ldrb	r3, [r3, #5]
 8007a7e:	2b01      	cmp	r3, #1
 8007a80:	d101      	bne.n	8007a86 <HAL_SUBGHZ_ReadBuffer+0x2e>
 8007a82:	2302      	movs	r3, #2
 8007a84:	e03c      	b.n	8007b00 <HAL_SUBGHZ_ReadBuffer+0xa8>
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	2201      	movs	r2, #1
 8007a8a:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007a8c:	68f8      	ldr	r0, [r7, #12]
 8007a8e:	f000 f989 	bl	8007da4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007a92:	f7ff fd47 	bl	8007524 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8007a96:	211e      	movs	r1, #30
 8007a98:	68f8      	ldr	r0, [r7, #12]
 8007a9a:	f000 f8d5 	bl	8007c48 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8007a9e:	7afb      	ldrb	r3, [r7, #11]
 8007aa0:	4619      	mov	r1, r3
 8007aa2:	68f8      	ldr	r0, [r7, #12]
 8007aa4:	f000 f8d0 	bl	8007c48 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8007aa8:	2100      	movs	r1, #0
 8007aaa:	68f8      	ldr	r0, [r7, #12]
 8007aac:	f000 f8cc 	bl	8007c48 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	82fb      	strh	r3, [r7, #22]
 8007ab4:	e009      	b.n	8007aca <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007ab6:	69b9      	ldr	r1, [r7, #24]
 8007ab8:	68f8      	ldr	r0, [r7, #12]
 8007aba:	f000 f91b 	bl	8007cf4 <SUBGHZSPI_Receive>
      pData++;
 8007abe:	69bb      	ldr	r3, [r7, #24]
 8007ac0:	3301      	adds	r3, #1
 8007ac2:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8007ac4:	8afb      	ldrh	r3, [r7, #22]
 8007ac6:	3301      	adds	r3, #1
 8007ac8:	82fb      	strh	r3, [r7, #22]
 8007aca:	8afa      	ldrh	r2, [r7, #22]
 8007acc:	893b      	ldrh	r3, [r7, #8]
 8007ace:	429a      	cmp	r2, r3
 8007ad0:	d3f1      	bcc.n	8007ab6 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007ad2:	f7ff fd17 	bl	8007504 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007ad6:	68f8      	ldr	r0, [r7, #12]
 8007ad8:	f000 f988 	bl	8007dec <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	689b      	ldr	r3, [r3, #8]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d002      	beq.n	8007aea <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	77fb      	strb	r3, [r7, #31]
 8007ae8:	e001      	b.n	8007aee <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8007aea:	2300      	movs	r3, #0
 8007aec:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2201      	movs	r2, #1
 8007af2:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	2200      	movs	r2, #0
 8007af8:	715a      	strb	r2, [r3, #5]

    return status;
 8007afa:	7ffb      	ldrb	r3, [r7, #31]
 8007afc:	e000      	b.n	8007b00 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8007afe:	2302      	movs	r3, #2
  }
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	3720      	adds	r7, #32
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}

08007b08 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b084      	sub	sp, #16
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8007b10:	2300      	movs	r3, #0
 8007b12:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8007b14:	f107 020c 	add.w	r2, r7, #12
 8007b18:	2302      	movs	r3, #2
 8007b1a:	2112      	movs	r1, #18
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f7ff fef4 	bl	800790a <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8007b22:	7b3b      	ldrb	r3, [r7, #12]
 8007b24:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8007b26:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007b2a:	021b      	lsls	r3, r3, #8
 8007b2c:	b21a      	sxth	r2, r3
 8007b2e:	7b7b      	ldrb	r3, [r7, #13]
 8007b30:	b21b      	sxth	r3, r3
 8007b32:	4313      	orrs	r3, r2
 8007b34:	b21b      	sxth	r3, r3
 8007b36:	81fb      	strh	r3, [r7, #14]

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8007b38:	89fb      	ldrh	r3, [r7, #14]
 8007b3a:	f003 0301 	and.w	r3, r3, #1
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d002      	beq.n	8007b48 <HAL_SUBGHZ_IRQHandler+0x40>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f012 fa90 	bl	801a068 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8007b48:	89fb      	ldrh	r3, [r7, #14]
 8007b4a:	085b      	lsrs	r3, r3, #1
 8007b4c:	f003 0301 	and.w	r3, r3, #1
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d002      	beq.n	8007b5a <HAL_SUBGHZ_IRQHandler+0x52>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f012 fa95 	bl	801a084 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8007b5a:	89fb      	ldrh	r3, [r7, #14]
 8007b5c:	089b      	lsrs	r3, r3, #2
 8007b5e:	f003 0301 	and.w	r3, r3, #1
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d002      	beq.n	8007b6c <HAL_SUBGHZ_IRQHandler+0x64>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f012 fae4 	bl	801a134 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8007b6c:	89fb      	ldrh	r3, [r7, #14]
 8007b6e:	08db      	lsrs	r3, r3, #3
 8007b70:	f003 0301 	and.w	r3, r3, #1
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d002      	beq.n	8007b7e <HAL_SUBGHZ_IRQHandler+0x76>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f012 fae9 	bl	801a150 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8007b7e:	89fb      	ldrh	r3, [r7, #14]
 8007b80:	091b      	lsrs	r3, r3, #4
 8007b82:	f003 0301 	and.w	r3, r3, #1
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d002      	beq.n	8007b90 <HAL_SUBGHZ_IRQHandler+0x88>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f012 faee 	bl	801a16c <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8007b90:	89fb      	ldrh	r3, [r7, #14]
 8007b92:	095b      	lsrs	r3, r3, #5
 8007b94:	f003 0301 	and.w	r3, r3, #1
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d002      	beq.n	8007ba2 <HAL_SUBGHZ_IRQHandler+0x9a>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f012 fabb 	bl	801a118 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8007ba2:	89fb      	ldrh	r3, [r7, #14]
 8007ba4:	099b      	lsrs	r3, r3, #6
 8007ba6:	f003 0301 	and.w	r3, r3, #1
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d002      	beq.n	8007bb4 <HAL_SUBGHZ_IRQHandler+0xac>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f012 fa76 	bl	801a0a0 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8007bb4:	89fb      	ldrh	r3, [r7, #14]
 8007bb6:	09db      	lsrs	r3, r3, #7
 8007bb8:	f003 0301 	and.w	r3, r3, #1
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d00e      	beq.n	8007bde <HAL_SUBGHZ_IRQHandler+0xd6>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8007bc0:	89fb      	ldrh	r3, [r7, #14]
 8007bc2:	0a1b      	lsrs	r3, r3, #8
 8007bc4:	f003 0301 	and.w	r3, r3, #1
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d004      	beq.n	8007bd6 <HAL_SUBGHZ_IRQHandler+0xce>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8007bcc:	2101      	movs	r1, #1
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f012 fa74 	bl	801a0bc <HAL_SUBGHZ_CADStatusCallback>
 8007bd4:	e003      	b.n	8007bde <HAL_SUBGHZ_IRQHandler+0xd6>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8007bd6:	2100      	movs	r1, #0
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f012 fa6f 	bl	801a0bc <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8007bde:	89fb      	ldrh	r3, [r7, #14]
 8007be0:	0a5b      	lsrs	r3, r3, #9
 8007be2:	f003 0301 	and.w	r3, r3, #1
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d002      	beq.n	8007bf0 <HAL_SUBGHZ_IRQHandler+0xe8>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f012 fa84 	bl	801a0f8 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 8007bf0:	f107 020c 	add.w	r2, r7, #12
 8007bf4:	2302      	movs	r3, #2
 8007bf6:	2102      	movs	r1, #2
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f7ff fe27 	bl	800784c <HAL_SUBGHZ_ExecSetCmd>
}
 8007bfe:	bf00      	nop
 8007c00:	3710      	adds	r7, #16
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}
	...

08007c08 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b083      	sub	sp, #12
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8007c10:	4b0c      	ldr	r3, [pc, #48]	@ (8007c44 <SUBGHZSPI_Init+0x3c>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4a0b      	ldr	r2, [pc, #44]	@ (8007c44 <SUBGHZSPI_Init+0x3c>)
 8007c16:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c1a:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8007c1c:	4a09      	ldr	r2, [pc, #36]	@ (8007c44 <SUBGHZSPI_Init+0x3c>)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f443 7341 	orr.w	r3, r3, #772	@ 0x304
 8007c24:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8007c26:	4b07      	ldr	r3, [pc, #28]	@ (8007c44 <SUBGHZSPI_Init+0x3c>)
 8007c28:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 8007c2c:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8007c2e:	4b05      	ldr	r3, [pc, #20]	@ (8007c44 <SUBGHZSPI_Init+0x3c>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	4a04      	ldr	r2, [pc, #16]	@ (8007c44 <SUBGHZSPI_Init+0x3c>)
 8007c34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c38:	6013      	str	r3, [r2, #0]
}
 8007c3a:	bf00      	nop
 8007c3c:	370c      	adds	r7, #12
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bc80      	pop	{r7}
 8007c42:	4770      	bx	lr
 8007c44:	58010000 	.word	0x58010000

08007c48 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b087      	sub	sp, #28
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
 8007c50:	460b      	mov	r3, r1
 8007c52:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8007c54:	2300      	movs	r3, #0
 8007c56:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007c58:	4b23      	ldr	r3, [pc, #140]	@ (8007ce8 <SUBGHZSPI_Transmit+0xa0>)
 8007c5a:	681a      	ldr	r2, [r3, #0]
 8007c5c:	4613      	mov	r3, r2
 8007c5e:	00db      	lsls	r3, r3, #3
 8007c60:	1a9b      	subs	r3, r3, r2
 8007c62:	009b      	lsls	r3, r3, #2
 8007c64:	0cdb      	lsrs	r3, r3, #19
 8007c66:	2264      	movs	r2, #100	@ 0x64
 8007c68:	fb02 f303 	mul.w	r3, r2, r3
 8007c6c:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d105      	bne.n	8007c80 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8007c74:	2301      	movs	r3, #1
 8007c76:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2201      	movs	r2, #1
 8007c7c:	609a      	str	r2, [r3, #8]
      break;
 8007c7e:	e008      	b.n	8007c92 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	3b01      	subs	r3, #1
 8007c84:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8007c86:	4b19      	ldr	r3, [pc, #100]	@ (8007cec <SUBGHZSPI_Transmit+0xa4>)
 8007c88:	689b      	ldr	r3, [r3, #8]
 8007c8a:	f003 0302 	and.w	r3, r3, #2
 8007c8e:	2b02      	cmp	r3, #2
 8007c90:	d1ed      	bne.n	8007c6e <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8007c92:	4b17      	ldr	r3, [pc, #92]	@ (8007cf0 <SUBGHZSPI_Transmit+0xa8>)
 8007c94:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	78fa      	ldrb	r2, [r7, #3]
 8007c9a:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007c9c:	4b12      	ldr	r3, [pc, #72]	@ (8007ce8 <SUBGHZSPI_Transmit+0xa0>)
 8007c9e:	681a      	ldr	r2, [r3, #0]
 8007ca0:	4613      	mov	r3, r2
 8007ca2:	00db      	lsls	r3, r3, #3
 8007ca4:	1a9b      	subs	r3, r3, r2
 8007ca6:	009b      	lsls	r3, r3, #2
 8007ca8:	0cdb      	lsrs	r3, r3, #19
 8007caa:	2264      	movs	r2, #100	@ 0x64
 8007cac:	fb02 f303 	mul.w	r3, r2, r3
 8007cb0:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d105      	bne.n	8007cc4 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8007cb8:	2301      	movs	r3, #1
 8007cba:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2201      	movs	r2, #1
 8007cc0:	609a      	str	r2, [r3, #8]
      break;
 8007cc2:	e008      	b.n	8007cd6 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	3b01      	subs	r3, #1
 8007cc8:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8007cca:	4b08      	ldr	r3, [pc, #32]	@ (8007cec <SUBGHZSPI_Transmit+0xa4>)
 8007ccc:	689b      	ldr	r3, [r3, #8]
 8007cce:	f003 0301 	and.w	r3, r3, #1
 8007cd2:	2b01      	cmp	r3, #1
 8007cd4:	d1ed      	bne.n	8007cb2 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8007cd6:	4b05      	ldr	r3, [pc, #20]	@ (8007cec <SUBGHZSPI_Transmit+0xa4>)
 8007cd8:	68db      	ldr	r3, [r3, #12]

  return status;
 8007cda:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	371c      	adds	r7, #28
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bc80      	pop	{r7}
 8007ce4:	4770      	bx	lr
 8007ce6:	bf00      	nop
 8007ce8:	20000000 	.word	0x20000000
 8007cec:	58010000 	.word	0x58010000
 8007cf0:	5801000c 	.word	0x5801000c

08007cf4 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b087      	sub	sp, #28
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
 8007cfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007d02:	4b25      	ldr	r3, [pc, #148]	@ (8007d98 <SUBGHZSPI_Receive+0xa4>)
 8007d04:	681a      	ldr	r2, [r3, #0]
 8007d06:	4613      	mov	r3, r2
 8007d08:	00db      	lsls	r3, r3, #3
 8007d0a:	1a9b      	subs	r3, r3, r2
 8007d0c:	009b      	lsls	r3, r3, #2
 8007d0e:	0cdb      	lsrs	r3, r3, #19
 8007d10:	2264      	movs	r2, #100	@ 0x64
 8007d12:	fb02 f303 	mul.w	r3, r2, r3
 8007d16:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d105      	bne.n	8007d2a <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8007d1e:	2301      	movs	r3, #1
 8007d20:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2201      	movs	r2, #1
 8007d26:	609a      	str	r2, [r3, #8]
      break;
 8007d28:	e008      	b.n	8007d3c <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	3b01      	subs	r3, #1
 8007d2e:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8007d30:	4b1a      	ldr	r3, [pc, #104]	@ (8007d9c <SUBGHZSPI_Receive+0xa8>)
 8007d32:	689b      	ldr	r3, [r3, #8]
 8007d34:	f003 0302 	and.w	r3, r3, #2
 8007d38:	2b02      	cmp	r3, #2
 8007d3a:	d1ed      	bne.n	8007d18 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8007d3c:	4b18      	ldr	r3, [pc, #96]	@ (8007da0 <SUBGHZSPI_Receive+0xac>)
 8007d3e:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	22ff      	movs	r2, #255	@ 0xff
 8007d44:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007d46:	4b14      	ldr	r3, [pc, #80]	@ (8007d98 <SUBGHZSPI_Receive+0xa4>)
 8007d48:	681a      	ldr	r2, [r3, #0]
 8007d4a:	4613      	mov	r3, r2
 8007d4c:	00db      	lsls	r3, r3, #3
 8007d4e:	1a9b      	subs	r3, r3, r2
 8007d50:	009b      	lsls	r3, r3, #2
 8007d52:	0cdb      	lsrs	r3, r3, #19
 8007d54:	2264      	movs	r2, #100	@ 0x64
 8007d56:	fb02 f303 	mul.w	r3, r2, r3
 8007d5a:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d105      	bne.n	8007d6e <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8007d62:	2301      	movs	r3, #1
 8007d64:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2201      	movs	r2, #1
 8007d6a:	609a      	str	r2, [r3, #8]
      break;
 8007d6c:	e008      	b.n	8007d80 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	3b01      	subs	r3, #1
 8007d72:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8007d74:	4b09      	ldr	r3, [pc, #36]	@ (8007d9c <SUBGHZSPI_Receive+0xa8>)
 8007d76:	689b      	ldr	r3, [r3, #8]
 8007d78:	f003 0301 	and.w	r3, r3, #1
 8007d7c:	2b01      	cmp	r3, #1
 8007d7e:	d1ed      	bne.n	8007d5c <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8007d80:	4b06      	ldr	r3, [pc, #24]	@ (8007d9c <SUBGHZSPI_Receive+0xa8>)
 8007d82:	68db      	ldr	r3, [r3, #12]
 8007d84:	b2da      	uxtb	r2, r3
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	701a      	strb	r2, [r3, #0]

  return status;
 8007d8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	371c      	adds	r7, #28
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bc80      	pop	{r7}
 8007d94:	4770      	bx	lr
 8007d96:	bf00      	nop
 8007d98:	20000000 	.word	0x20000000
 8007d9c:	58010000 	.word	0x58010000
 8007da0:	5801000c 	.word	0x5801000c

08007da4 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b084      	sub	sp, #16
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	791b      	ldrb	r3, [r3, #4]
 8007db0:	2b01      	cmp	r3, #1
 8007db2:	d111      	bne.n	8007dd8 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8007db4:	4b0c      	ldr	r3, [pc, #48]	@ (8007de8 <SUBGHZ_CheckDeviceReady+0x44>)
 8007db6:	681a      	ldr	r2, [r3, #0]
 8007db8:	4613      	mov	r3, r2
 8007dba:	005b      	lsls	r3, r3, #1
 8007dbc:	4413      	add	r3, r2
 8007dbe:	00db      	lsls	r3, r3, #3
 8007dc0:	0c1b      	lsrs	r3, r3, #16
 8007dc2:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007dc4:	f7ff fbae 	bl	8007524 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	3b01      	subs	r3, #1
 8007dcc:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d1f9      	bne.n	8007dc8 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007dd4:	f7ff fb96 	bl	8007504 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f000 f807 	bl	8007dec <SUBGHZ_WaitOnBusy>
 8007dde:	4603      	mov	r3, r0
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	3710      	adds	r7, #16
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}
 8007de8:	20000000 	.word	0x20000000

08007dec <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b086      	sub	sp, #24
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8007df4:	2300      	movs	r3, #0
 8007df6:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8007df8:	4b12      	ldr	r3, [pc, #72]	@ (8007e44 <SUBGHZ_WaitOnBusy+0x58>)
 8007dfa:	681a      	ldr	r2, [r3, #0]
 8007dfc:	4613      	mov	r3, r2
 8007dfe:	005b      	lsls	r3, r3, #1
 8007e00:	4413      	add	r3, r2
 8007e02:	00db      	lsls	r3, r3, #3
 8007e04:	0d1b      	lsrs	r3, r3, #20
 8007e06:	2264      	movs	r2, #100	@ 0x64
 8007e08:	fb02 f303 	mul.w	r3, r2, r3
 8007e0c:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8007e0e:	f7ff fbb7 	bl	8007580 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8007e12:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d105      	bne.n	8007e26 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2202      	movs	r2, #2
 8007e22:	609a      	str	r2, [r3, #8]
      break;
 8007e24:	e009      	b.n	8007e3a <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	3b01      	subs	r3, #1
 8007e2a:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8007e2c:	f7ff fb96 	bl	800755c <LL_PWR_IsActiveFlag_RFBUSYS>
 8007e30:	4602      	mov	r2, r0
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	4013      	ands	r3, r2
 8007e36:	2b01      	cmp	r3, #1
 8007e38:	d0e9      	beq.n	8007e0e <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8007e3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	3718      	adds	r7, #24
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}
 8007e44:	20000000 	.word	0x20000000

08007e48 <LL_RCC_GetUSARTClockSource>:
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b083      	sub	sp, #12
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8007e50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007e54:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	401a      	ands	r2, r3
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	041b      	lsls	r3, r3, #16
 8007e60:	4313      	orrs	r3, r2
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	370c      	adds	r7, #12
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bc80      	pop	{r7}
 8007e6a:	4770      	bx	lr

08007e6c <LL_RCC_GetLPUARTClockSource>:
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b083      	sub	sp, #12
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8007e74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007e78:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	4013      	ands	r3, r2
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	370c      	adds	r7, #12
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bc80      	pop	{r7}
 8007e88:	4770      	bx	lr

08007e8a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007e8a:	b580      	push	{r7, lr}
 8007e8c:	b082      	sub	sp, #8
 8007e8e:	af00      	add	r7, sp, #0
 8007e90:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d101      	bne.n	8007e9c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e98:	2301      	movs	r3, #1
 8007e9a:	e042      	b.n	8007f22 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d106      	bne.n	8007eb4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f7fa fe5a 	bl	8002b68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2224      	movs	r2, #36	@ 0x24
 8007eb8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  __HAL_UART_DISABLE(huart);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	681a      	ldr	r2, [r3, #0]
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f022 0201 	bic.w	r2, r2, #1
 8007eca:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f000 fc4b 	bl	8008768 <UART_SetConfig>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	2b01      	cmp	r3, #1
 8007ed6:	d101      	bne.n	8007edc <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007ed8:	2301      	movs	r3, #1
 8007eda:	e022      	b.n	8007f22 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d002      	beq.n	8007eea <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f000 feb3 	bl	8008c50 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	685a      	ldr	r2, [r3, #4]
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007ef8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	689a      	ldr	r2, [r3, #8]
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007f08:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	681a      	ldr	r2, [r3, #0]
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f042 0201 	orr.w	r2, r2, #1
 8007f18:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f000 ff39 	bl	8008d92 <UART_CheckIdleState>
 8007f20:	4603      	mov	r3, r0
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	3708      	adds	r7, #8
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}
	...

08007f2c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b08a      	sub	sp, #40	@ 0x28
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	60f8      	str	r0, [r7, #12]
 8007f34:	60b9      	str	r1, [r7, #8]
 8007f36:	4613      	mov	r3, r2
 8007f38:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f40:	2b20      	cmp	r3, #32
 8007f42:	d142      	bne.n	8007fca <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d002      	beq.n	8007f50 <HAL_UART_Receive_IT+0x24>
 8007f4a:	88fb      	ldrh	r3, [r7, #6]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d101      	bne.n	8007f54 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007f50:	2301      	movs	r3, #1
 8007f52:	e03b      	b.n	8007fcc <HAL_UART_Receive_IT+0xa0>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007f5a:	2b01      	cmp	r3, #1
 8007f5c:	d101      	bne.n	8007f62 <HAL_UART_Receive_IT+0x36>
 8007f5e:	2302      	movs	r3, #2
 8007f60:	e034      	b.n	8007fcc <HAL_UART_Receive_IT+0xa0>
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	2201      	movs	r2, #1
 8007f66:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	4a17      	ldr	r2, [pc, #92]	@ (8007fd4 <HAL_UART_Receive_IT+0xa8>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d01f      	beq.n	8007fba <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	685b      	ldr	r3, [r3, #4]
 8007f80:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d018      	beq.n	8007fba <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	e853 3f00 	ldrex	r3, [r3]
 8007f94:	613b      	str	r3, [r7, #16]
   return(result);
 8007f96:	693b      	ldr	r3, [r7, #16]
 8007f98:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007f9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	461a      	mov	r2, r3
 8007fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fa6:	623b      	str	r3, [r7, #32]
 8007fa8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007faa:	69f9      	ldr	r1, [r7, #28]
 8007fac:	6a3a      	ldr	r2, [r7, #32]
 8007fae:	e841 2300 	strex	r3, r2, [r1]
 8007fb2:	61bb      	str	r3, [r7, #24]
   return(result);
 8007fb4:	69bb      	ldr	r3, [r7, #24]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d1e6      	bne.n	8007f88 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8007fba:	88fb      	ldrh	r3, [r7, #6]
 8007fbc:	461a      	mov	r2, r3
 8007fbe:	68b9      	ldr	r1, [r7, #8]
 8007fc0:	68f8      	ldr	r0, [r7, #12]
 8007fc2:	f000 fff9 	bl	8008fb8 <UART_Start_Receive_IT>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	e000      	b.n	8007fcc <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007fca:	2302      	movs	r3, #2
  }
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	3728      	adds	r7, #40	@ 0x28
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}
 8007fd4:	40008000 	.word	0x40008000

08007fd8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b08a      	sub	sp, #40	@ 0x28
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	60f8      	str	r0, [r7, #12]
 8007fe0:	60b9      	str	r1, [r7, #8]
 8007fe2:	4613      	mov	r3, r2
 8007fe4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007fec:	2b20      	cmp	r3, #32
 8007fee:	d17a      	bne.n	80080e6 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d002      	beq.n	8007ffc <HAL_UART_Transmit_DMA+0x24>
 8007ff6:	88fb      	ldrh	r3, [r7, #6]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d101      	bne.n	8008000 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	e073      	b.n	80080e8 <HAL_UART_Transmit_DMA+0x110>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8008006:	2b01      	cmp	r3, #1
 8008008:	d101      	bne.n	800800e <HAL_UART_Transmit_DMA+0x36>
 800800a:	2302      	movs	r3, #2
 800800c:	e06c      	b.n	80080e8 <HAL_UART_Transmit_DMA+0x110>
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	2201      	movs	r2, #1
 8008012:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    huart->pTxBuffPtr  = pData;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	68ba      	ldr	r2, [r7, #8]
 800801a:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	88fa      	ldrh	r2, [r7, #6]
 8008020:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	88fa      	ldrh	r2, [r7, #6]
 8008028:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	2200      	movs	r2, #0
 8008030:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	2221      	movs	r2, #33	@ 0x21
 8008038:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    if (huart->hdmatx != NULL)
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008040:	2b00      	cmp	r3, #0
 8008042:	d02c      	beq.n	800809e <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008048:	4a29      	ldr	r2, [pc, #164]	@ (80080f0 <HAL_UART_Transmit_DMA+0x118>)
 800804a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008050:	4a28      	ldr	r2, [pc, #160]	@ (80080f4 <HAL_UART_Transmit_DMA+0x11c>)
 8008052:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008058:	4a27      	ldr	r2, [pc, #156]	@ (80080f8 <HAL_UART_Transmit_DMA+0x120>)
 800805a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008060:	2200      	movs	r2, #0
 8008062:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800806c:	4619      	mov	r1, r3
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	3328      	adds	r3, #40	@ 0x28
 8008074:	461a      	mov	r2, r3
 8008076:	88fb      	ldrh	r3, [r7, #6]
 8008078:	f7fc fb9c 	bl	80047b4 <HAL_DMA_Start_IT>
 800807c:	4603      	mov	r3, r0
 800807e:	2b00      	cmp	r3, #0
 8008080:	d00d      	beq.n	800809e <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	2210      	movs	r2, #16
 8008086:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2200      	movs	r2, #0
 800808e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	2220      	movs	r2, #32
 8008096:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        return HAL_ERROR;
 800809a:	2301      	movs	r3, #1
 800809c:	e024      	b.n	80080e8 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	2240      	movs	r2, #64	@ 0x40
 80080a4:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	2200      	movs	r2, #0
 80080aa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	3308      	adds	r3, #8
 80080b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	e853 3f00 	ldrex	r3, [r3]
 80080bc:	613b      	str	r3, [r7, #16]
   return(result);
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	3308      	adds	r3, #8
 80080cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80080ce:	623a      	str	r2, [r7, #32]
 80080d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080d2:	69f9      	ldr	r1, [r7, #28]
 80080d4:	6a3a      	ldr	r2, [r7, #32]
 80080d6:	e841 2300 	strex	r3, r2, [r1]
 80080da:	61bb      	str	r3, [r7, #24]
   return(result);
 80080dc:	69bb      	ldr	r3, [r7, #24]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d1e5      	bne.n	80080ae <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 80080e2:	2300      	movs	r3, #0
 80080e4:	e000      	b.n	80080e8 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 80080e6:	2302      	movs	r3, #2
  }
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	3728      	adds	r7, #40	@ 0x28
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}
 80080f0:	08009353 	.word	0x08009353
 80080f4:	080093ed 	.word	0x080093ed
 80080f8:	08009409 	.word	0x08009409

080080fc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b0ba      	sub	sp, #232	@ 0xe8
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	69db      	ldr	r3, [r3, #28]
 800810a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	689b      	ldr	r3, [r3, #8]
 800811e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008122:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008126:	f640 030f 	movw	r3, #2063	@ 0x80f
 800812a:	4013      	ands	r3, r2
 800812c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008130:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008134:	2b00      	cmp	r3, #0
 8008136:	d11b      	bne.n	8008170 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008138:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800813c:	f003 0320 	and.w	r3, r3, #32
 8008140:	2b00      	cmp	r3, #0
 8008142:	d015      	beq.n	8008170 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008144:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008148:	f003 0320 	and.w	r3, r3, #32
 800814c:	2b00      	cmp	r3, #0
 800814e:	d105      	bne.n	800815c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008150:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008154:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008158:	2b00      	cmp	r3, #0
 800815a:	d009      	beq.n	8008170 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008160:	2b00      	cmp	r3, #0
 8008162:	f000 82d6 	beq.w	8008712 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	4798      	blx	r3
      }
      return;
 800816e:	e2d0      	b.n	8008712 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008170:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008174:	2b00      	cmp	r3, #0
 8008176:	f000 811f 	beq.w	80083b8 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800817a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800817e:	4b8b      	ldr	r3, [pc, #556]	@ (80083ac <HAL_UART_IRQHandler+0x2b0>)
 8008180:	4013      	ands	r3, r2
 8008182:	2b00      	cmp	r3, #0
 8008184:	d106      	bne.n	8008194 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008186:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800818a:	4b89      	ldr	r3, [pc, #548]	@ (80083b0 <HAL_UART_IRQHandler+0x2b4>)
 800818c:	4013      	ands	r3, r2
 800818e:	2b00      	cmp	r3, #0
 8008190:	f000 8112 	beq.w	80083b8 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008194:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008198:	f003 0301 	and.w	r3, r3, #1
 800819c:	2b00      	cmp	r3, #0
 800819e:	d011      	beq.n	80081c4 <HAL_UART_IRQHandler+0xc8>
 80081a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80081a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d00b      	beq.n	80081c4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	2201      	movs	r2, #1
 80081b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80081ba:	f043 0201 	orr.w	r2, r3, #1
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80081c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081c8:	f003 0302 	and.w	r3, r3, #2
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d011      	beq.n	80081f4 <HAL_UART_IRQHandler+0xf8>
 80081d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80081d4:	f003 0301 	and.w	r3, r3, #1
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d00b      	beq.n	80081f4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	2202      	movs	r2, #2
 80081e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80081ea:	f043 0204 	orr.w	r2, r3, #4
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80081f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081f8:	f003 0304 	and.w	r3, r3, #4
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d011      	beq.n	8008224 <HAL_UART_IRQHandler+0x128>
 8008200:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008204:	f003 0301 	and.w	r3, r3, #1
 8008208:	2b00      	cmp	r3, #0
 800820a:	d00b      	beq.n	8008224 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	2204      	movs	r2, #4
 8008212:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800821a:	f043 0202 	orr.w	r2, r3, #2
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008224:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008228:	f003 0308 	and.w	r3, r3, #8
 800822c:	2b00      	cmp	r3, #0
 800822e:	d017      	beq.n	8008260 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008230:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008234:	f003 0320 	and.w	r3, r3, #32
 8008238:	2b00      	cmp	r3, #0
 800823a:	d105      	bne.n	8008248 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800823c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008240:	4b5a      	ldr	r3, [pc, #360]	@ (80083ac <HAL_UART_IRQHandler+0x2b0>)
 8008242:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008244:	2b00      	cmp	r3, #0
 8008246:	d00b      	beq.n	8008260 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	2208      	movs	r2, #8
 800824e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008256:	f043 0208 	orr.w	r2, r3, #8
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008260:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008264:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008268:	2b00      	cmp	r3, #0
 800826a:	d012      	beq.n	8008292 <HAL_UART_IRQHandler+0x196>
 800826c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008270:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008274:	2b00      	cmp	r3, #0
 8008276:	d00c      	beq.n	8008292 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008280:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008288:	f043 0220 	orr.w	r2, r3, #32
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008298:	2b00      	cmp	r3, #0
 800829a:	f000 823c 	beq.w	8008716 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800829e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082a2:	f003 0320 	and.w	r3, r3, #32
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d013      	beq.n	80082d2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80082aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80082ae:	f003 0320 	and.w	r3, r3, #32
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d105      	bne.n	80082c2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80082b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80082ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d007      	beq.n	80082d2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d003      	beq.n	80082d2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80082d8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	689b      	ldr	r3, [r3, #8]
 80082e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082e6:	2b40      	cmp	r3, #64	@ 0x40
 80082e8:	d005      	beq.n	80082f6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80082ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80082ee:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d04f      	beq.n	8008396 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f000 ffc6 	bl	8009288 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	689b      	ldr	r3, [r3, #8]
 8008302:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008306:	2b40      	cmp	r3, #64	@ 0x40
 8008308:	d141      	bne.n	800838e <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	3308      	adds	r3, #8
 8008310:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008314:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008318:	e853 3f00 	ldrex	r3, [r3]
 800831c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008320:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008324:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008328:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	3308      	adds	r3, #8
 8008332:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008336:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800833a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800833e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008342:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008346:	e841 2300 	strex	r3, r2, [r1]
 800834a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800834e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008352:	2b00      	cmp	r3, #0
 8008354:	d1d9      	bne.n	800830a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800835a:	2b00      	cmp	r3, #0
 800835c:	d013      	beq.n	8008386 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008362:	4a14      	ldr	r2, [pc, #80]	@ (80083b4 <HAL_UART_IRQHandler+0x2b8>)
 8008364:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800836a:	4618      	mov	r0, r3
 800836c:	f7fc fafe 	bl	800496c <HAL_DMA_Abort_IT>
 8008370:	4603      	mov	r3, r0
 8008372:	2b00      	cmp	r3, #0
 8008374:	d017      	beq.n	80083a6 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800837a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800837c:	687a      	ldr	r2, [r7, #4]
 800837e:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
 8008380:	4610      	mov	r0, r2
 8008382:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008384:	e00f      	b.n	80083a6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f000 f9d9 	bl	800873e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800838c:	e00b      	b.n	80083a6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f000 f9d5 	bl	800873e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008394:	e007      	b.n	80083a6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f000 f9d1 	bl	800873e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2200      	movs	r2, #0
 80083a0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      }
    }
    return;
 80083a4:	e1b7      	b.n	8008716 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083a6:	bf00      	nop
    return;
 80083a8:	e1b5      	b.n	8008716 <HAL_UART_IRQHandler+0x61a>
 80083aa:	bf00      	nop
 80083ac:	10000001 	.word	0x10000001
 80083b0:	04000120 	.word	0x04000120
 80083b4:	08009489 	.word	0x08009489

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80083bc:	2b01      	cmp	r3, #1
 80083be:	f040 814a 	bne.w	8008656 <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80083c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80083c6:	f003 0310 	and.w	r3, r3, #16
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	f000 8143 	beq.w	8008656 <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80083d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80083d4:	f003 0310 	and.w	r3, r3, #16
 80083d8:	2b00      	cmp	r3, #0
 80083da:	f000 813c 	beq.w	8008656 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	2210      	movs	r2, #16
 80083e4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	689b      	ldr	r3, [r3, #8]
 80083ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083f0:	2b40      	cmp	r3, #64	@ 0x40
 80083f2:	f040 80b5 	bne.w	8008560 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	685b      	ldr	r3, [r3, #4]
 80083fe:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if (  (nb_remaining_rx_data > 0U)
 8008402:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008406:	2b00      	cmp	r3, #0
 8008408:	f000 8187 	beq.w	800871a <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008412:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008416:	429a      	cmp	r2, r3
 8008418:	f080 817f 	bcs.w	800871a <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008422:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f003 0320 	and.w	r3, r3, #32
 8008432:	2b00      	cmp	r3, #0
 8008434:	f040 8086 	bne.w	8008544 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008440:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008444:	e853 3f00 	ldrex	r3, [r3]
 8008448:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800844c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008450:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008454:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	461a      	mov	r2, r3
 800845e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008462:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008466:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800846a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800846e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008472:	e841 2300 	strex	r3, r2, [r1]
 8008476:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800847a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800847e:	2b00      	cmp	r3, #0
 8008480:	d1da      	bne.n	8008438 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	3308      	adds	r3, #8
 8008488:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800848a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800848c:	e853 3f00 	ldrex	r3, [r3]
 8008490:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008492:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008494:	f023 0301 	bic.w	r3, r3, #1
 8008498:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	3308      	adds	r3, #8
 80084a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80084a6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80084aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ac:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80084ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80084b2:	e841 2300 	strex	r3, r2, [r1]
 80084b6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80084b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d1e1      	bne.n	8008482 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	3308      	adds	r3, #8
 80084c4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084c6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80084c8:	e853 3f00 	ldrex	r3, [r3]
 80084cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80084ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80084d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80084d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	3308      	adds	r3, #8
 80084de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80084e2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80084e4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084e6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80084e8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80084ea:	e841 2300 	strex	r3, r2, [r1]
 80084ee:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80084f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d1e3      	bne.n	80084be <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2220      	movs	r2, #32
 80084fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2200      	movs	r2, #0
 8008502:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800850a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800850c:	e853 3f00 	ldrex	r3, [r3]
 8008510:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008512:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008514:	f023 0310 	bic.w	r3, r3, #16
 8008518:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	461a      	mov	r2, r3
 8008522:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008526:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008528:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800852a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800852c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800852e:	e841 2300 	strex	r3, r2, [r1]
 8008532:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008534:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008536:	2b00      	cmp	r3, #0
 8008538:	d1e4      	bne.n	8008504 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800853e:	4618      	mov	r0, r3
 8008540:	f7fc f9b6 	bl	80048b0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008550:	b29b      	uxth	r3, r3
 8008552:	1ad3      	subs	r3, r2, r3
 8008554:	b29b      	uxth	r3, r3
 8008556:	4619      	mov	r1, r3
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f000 f8f9 	bl	8008750 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800855e:	e0dc      	b.n	800871a <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800856c:	b29b      	uxth	r3, r3
 800856e:	1ad3      	subs	r3, r2, r3
 8008570:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if (  (huart->RxXferCount > 0U)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800857a:	b29b      	uxth	r3, r3
 800857c:	2b00      	cmp	r3, #0
 800857e:	f000 80ce 	beq.w	800871e <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 8008582:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008586:	2b00      	cmp	r3, #0
 8008588:	f000 80c9 	beq.w	800871e <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008594:	e853 3f00 	ldrex	r3, [r3]
 8008598:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800859a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800859c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80085a0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	461a      	mov	r2, r3
 80085aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80085ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80085b0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085b2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80085b4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80085b6:	e841 2300 	strex	r3, r2, [r1]
 80085ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80085bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d1e4      	bne.n	800858c <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	3308      	adds	r3, #8
 80085c8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085cc:	e853 3f00 	ldrex	r3, [r3]
 80085d0:	623b      	str	r3, [r7, #32]
   return(result);
 80085d2:	6a3b      	ldr	r3, [r7, #32]
 80085d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80085d8:	f023 0301 	bic.w	r3, r3, #1
 80085dc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	3308      	adds	r3, #8
 80085e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80085ea:	633a      	str	r2, [r7, #48]	@ 0x30
 80085ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80085f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80085f2:	e841 2300 	strex	r3, r2, [r1]
 80085f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80085f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d1e1      	bne.n	80085c2 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2220      	movs	r2, #32
 8008602:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2200      	movs	r2, #0
 800860a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2200      	movs	r2, #0
 8008610:	671a      	str	r2, [r3, #112]	@ 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008618:	693b      	ldr	r3, [r7, #16]
 800861a:	e853 3f00 	ldrex	r3, [r3]
 800861e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	f023 0310 	bic.w	r3, r3, #16
 8008626:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	461a      	mov	r2, r3
 8008630:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008634:	61fb      	str	r3, [r7, #28]
 8008636:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008638:	69b9      	ldr	r1, [r7, #24]
 800863a:	69fa      	ldr	r2, [r7, #28]
 800863c:	e841 2300 	strex	r3, r2, [r1]
 8008640:	617b      	str	r3, [r7, #20]
   return(result);
 8008642:	697b      	ldr	r3, [r7, #20]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d1e4      	bne.n	8008612 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008648:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800864c:	4619      	mov	r1, r3
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f000 f87e 	bl	8008750 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008654:	e063      	b.n	800871e <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008656:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800865a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800865e:	2b00      	cmp	r3, #0
 8008660:	d00e      	beq.n	8008680 <HAL_UART_IRQHandler+0x584>
 8008662:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008666:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800866a:	2b00      	cmp	r3, #0
 800866c:	d008      	beq.n	8008680 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008676:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f001 fba3 	bl	8009dc4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800867e:	e051      	b.n	8008724 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008680:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008684:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008688:	2b00      	cmp	r3, #0
 800868a:	d014      	beq.n	80086b6 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800868c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008690:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008694:	2b00      	cmp	r3, #0
 8008696:	d105      	bne.n	80086a4 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008698:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800869c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d008      	beq.n	80086b6 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d03a      	beq.n	8008722 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	4798      	blx	r3
    }
    return;
 80086b4:	e035      	b.n	8008722 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80086b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d009      	beq.n	80086d6 <HAL_UART_IRQHandler+0x5da>
 80086c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d003      	beq.n	80086d6 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f000 fef0 	bl	80094b4 <UART_EndTransmit_IT>
    return;
 80086d4:	e026      	b.n	8008724 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80086d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d009      	beq.n	80086f6 <HAL_UART_IRQHandler+0x5fa>
 80086e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086e6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d003      	beq.n	80086f6 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f001 fb7a 	bl	8009de8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80086f4:	e016      	b.n	8008724 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80086f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086fa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d010      	beq.n	8008724 <HAL_UART_IRQHandler+0x628>
 8008702:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008706:	2b00      	cmp	r3, #0
 8008708:	da0c      	bge.n	8008724 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f001 fb63 	bl	8009dd6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008710:	e008      	b.n	8008724 <HAL_UART_IRQHandler+0x628>
      return;
 8008712:	bf00      	nop
 8008714:	e006      	b.n	8008724 <HAL_UART_IRQHandler+0x628>
    return;
 8008716:	bf00      	nop
 8008718:	e004      	b.n	8008724 <HAL_UART_IRQHandler+0x628>
      return;
 800871a:	bf00      	nop
 800871c:	e002      	b.n	8008724 <HAL_UART_IRQHandler+0x628>
      return;
 800871e:	bf00      	nop
 8008720:	e000      	b.n	8008724 <HAL_UART_IRQHandler+0x628>
    return;
 8008722:	bf00      	nop
  }
}
 8008724:	37e8      	adds	r7, #232	@ 0xe8
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}
 800872a:	bf00      	nop

0800872c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800872c:	b480      	push	{r7}
 800872e:	b083      	sub	sp, #12
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008734:	bf00      	nop
 8008736:	370c      	adds	r7, #12
 8008738:	46bd      	mov	sp, r7
 800873a:	bc80      	pop	{r7}
 800873c:	4770      	bx	lr

0800873e <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800873e:	b480      	push	{r7}
 8008740:	b083      	sub	sp, #12
 8008742:	af00      	add	r7, sp, #0
 8008744:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008746:	bf00      	nop
 8008748:	370c      	adds	r7, #12
 800874a:	46bd      	mov	sp, r7
 800874c:	bc80      	pop	{r7}
 800874e:	4770      	bx	lr

08008750 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008750:	b480      	push	{r7}
 8008752:	b083      	sub	sp, #12
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
 8008758:	460b      	mov	r3, r1
 800875a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800875c:	bf00      	nop
 800875e:	370c      	adds	r7, #12
 8008760:	46bd      	mov	sp, r7
 8008762:	bc80      	pop	{r7}
 8008764:	4770      	bx	lr
	...

08008768 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008768:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800876c:	b08c      	sub	sp, #48	@ 0x30
 800876e:	af00      	add	r7, sp, #0
 8008770:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008772:	2300      	movs	r3, #0
 8008774:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008778:	697b      	ldr	r3, [r7, #20]
 800877a:	689a      	ldr	r2, [r3, #8]
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	691b      	ldr	r3, [r3, #16]
 8008780:	431a      	orrs	r2, r3
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	695b      	ldr	r3, [r3, #20]
 8008786:	431a      	orrs	r2, r3
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	69db      	ldr	r3, [r3, #28]
 800878c:	4313      	orrs	r3, r2
 800878e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008790:	697b      	ldr	r3, [r7, #20]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	681a      	ldr	r2, [r3, #0]
 8008796:	4b94      	ldr	r3, [pc, #592]	@ (80089e8 <UART_SetConfig+0x280>)
 8008798:	4013      	ands	r3, r2
 800879a:	697a      	ldr	r2, [r7, #20]
 800879c:	6812      	ldr	r2, [r2, #0]
 800879e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80087a0:	430b      	orrs	r3, r1
 80087a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80087a4:	697b      	ldr	r3, [r7, #20]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	685b      	ldr	r3, [r3, #4]
 80087aa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80087ae:	697b      	ldr	r3, [r7, #20]
 80087b0:	68da      	ldr	r2, [r3, #12]
 80087b2:	697b      	ldr	r3, [r7, #20]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	430a      	orrs	r2, r1
 80087b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80087ba:	697b      	ldr	r3, [r7, #20]
 80087bc:	699b      	ldr	r3, [r3, #24]
 80087be:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	4a89      	ldr	r2, [pc, #548]	@ (80089ec <UART_SetConfig+0x284>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d004      	beq.n	80087d4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	6a1b      	ldr	r3, [r3, #32]
 80087ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80087d0:	4313      	orrs	r3, r2
 80087d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	689b      	ldr	r3, [r3, #8]
 80087da:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80087de:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80087e2:	697a      	ldr	r2, [r7, #20]
 80087e4:	6812      	ldr	r2, [r2, #0]
 80087e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80087e8:	430b      	orrs	r3, r1
 80087ea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80087ec:	697b      	ldr	r3, [r7, #20]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087f2:	f023 010f 	bic.w	r1, r3, #15
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80087fa:	697b      	ldr	r3, [r7, #20]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	430a      	orrs	r2, r1
 8008800:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008802:	697b      	ldr	r3, [r7, #20]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	4a7a      	ldr	r2, [pc, #488]	@ (80089f0 <UART_SetConfig+0x288>)
 8008808:	4293      	cmp	r3, r2
 800880a:	d127      	bne.n	800885c <UART_SetConfig+0xf4>
 800880c:	2003      	movs	r0, #3
 800880e:	f7ff fb1b 	bl	8007e48 <LL_RCC_GetUSARTClockSource>
 8008812:	4603      	mov	r3, r0
 8008814:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 8008818:	2b03      	cmp	r3, #3
 800881a:	d81b      	bhi.n	8008854 <UART_SetConfig+0xec>
 800881c:	a201      	add	r2, pc, #4	@ (adr r2, 8008824 <UART_SetConfig+0xbc>)
 800881e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008822:	bf00      	nop
 8008824:	08008835 	.word	0x08008835
 8008828:	08008845 	.word	0x08008845
 800882c:	0800883d 	.word	0x0800883d
 8008830:	0800884d 	.word	0x0800884d
 8008834:	2301      	movs	r3, #1
 8008836:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800883a:	e080      	b.n	800893e <UART_SetConfig+0x1d6>
 800883c:	2302      	movs	r3, #2
 800883e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008842:	e07c      	b.n	800893e <UART_SetConfig+0x1d6>
 8008844:	2304      	movs	r3, #4
 8008846:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800884a:	e078      	b.n	800893e <UART_SetConfig+0x1d6>
 800884c:	2308      	movs	r3, #8
 800884e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008852:	e074      	b.n	800893e <UART_SetConfig+0x1d6>
 8008854:	2310      	movs	r3, #16
 8008856:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800885a:	e070      	b.n	800893e <UART_SetConfig+0x1d6>
 800885c:	697b      	ldr	r3, [r7, #20]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	4a64      	ldr	r2, [pc, #400]	@ (80089f4 <UART_SetConfig+0x28c>)
 8008862:	4293      	cmp	r3, r2
 8008864:	d138      	bne.n	80088d8 <UART_SetConfig+0x170>
 8008866:	200c      	movs	r0, #12
 8008868:	f7ff faee 	bl	8007e48 <LL_RCC_GetUSARTClockSource>
 800886c:	4603      	mov	r3, r0
 800886e:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 8008872:	2b0c      	cmp	r3, #12
 8008874:	d82c      	bhi.n	80088d0 <UART_SetConfig+0x168>
 8008876:	a201      	add	r2, pc, #4	@ (adr r2, 800887c <UART_SetConfig+0x114>)
 8008878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800887c:	080088b1 	.word	0x080088b1
 8008880:	080088d1 	.word	0x080088d1
 8008884:	080088d1 	.word	0x080088d1
 8008888:	080088d1 	.word	0x080088d1
 800888c:	080088c1 	.word	0x080088c1
 8008890:	080088d1 	.word	0x080088d1
 8008894:	080088d1 	.word	0x080088d1
 8008898:	080088d1 	.word	0x080088d1
 800889c:	080088b9 	.word	0x080088b9
 80088a0:	080088d1 	.word	0x080088d1
 80088a4:	080088d1 	.word	0x080088d1
 80088a8:	080088d1 	.word	0x080088d1
 80088ac:	080088c9 	.word	0x080088c9
 80088b0:	2300      	movs	r3, #0
 80088b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088b6:	e042      	b.n	800893e <UART_SetConfig+0x1d6>
 80088b8:	2302      	movs	r3, #2
 80088ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088be:	e03e      	b.n	800893e <UART_SetConfig+0x1d6>
 80088c0:	2304      	movs	r3, #4
 80088c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088c6:	e03a      	b.n	800893e <UART_SetConfig+0x1d6>
 80088c8:	2308      	movs	r3, #8
 80088ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088ce:	e036      	b.n	800893e <UART_SetConfig+0x1d6>
 80088d0:	2310      	movs	r3, #16
 80088d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088d6:	e032      	b.n	800893e <UART_SetConfig+0x1d6>
 80088d8:	697b      	ldr	r3, [r7, #20]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	4a43      	ldr	r2, [pc, #268]	@ (80089ec <UART_SetConfig+0x284>)
 80088de:	4293      	cmp	r3, r2
 80088e0:	d12a      	bne.n	8008938 <UART_SetConfig+0x1d0>
 80088e2:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 80088e6:	f7ff fac1 	bl	8007e6c <LL_RCC_GetLPUARTClockSource>
 80088ea:	4603      	mov	r3, r0
 80088ec:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80088f0:	d01a      	beq.n	8008928 <UART_SetConfig+0x1c0>
 80088f2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80088f6:	d81b      	bhi.n	8008930 <UART_SetConfig+0x1c8>
 80088f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80088fc:	d00c      	beq.n	8008918 <UART_SetConfig+0x1b0>
 80088fe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008902:	d815      	bhi.n	8008930 <UART_SetConfig+0x1c8>
 8008904:	2b00      	cmp	r3, #0
 8008906:	d003      	beq.n	8008910 <UART_SetConfig+0x1a8>
 8008908:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800890c:	d008      	beq.n	8008920 <UART_SetConfig+0x1b8>
 800890e:	e00f      	b.n	8008930 <UART_SetConfig+0x1c8>
 8008910:	2300      	movs	r3, #0
 8008912:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008916:	e012      	b.n	800893e <UART_SetConfig+0x1d6>
 8008918:	2302      	movs	r3, #2
 800891a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800891e:	e00e      	b.n	800893e <UART_SetConfig+0x1d6>
 8008920:	2304      	movs	r3, #4
 8008922:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008926:	e00a      	b.n	800893e <UART_SetConfig+0x1d6>
 8008928:	2308      	movs	r3, #8
 800892a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800892e:	e006      	b.n	800893e <UART_SetConfig+0x1d6>
 8008930:	2310      	movs	r3, #16
 8008932:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008936:	e002      	b.n	800893e <UART_SetConfig+0x1d6>
 8008938:	2310      	movs	r3, #16
 800893a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800893e:	697b      	ldr	r3, [r7, #20]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	4a2a      	ldr	r2, [pc, #168]	@ (80089ec <UART_SetConfig+0x284>)
 8008944:	4293      	cmp	r3, r2
 8008946:	f040 80a4 	bne.w	8008a92 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800894a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800894e:	2b08      	cmp	r3, #8
 8008950:	d823      	bhi.n	800899a <UART_SetConfig+0x232>
 8008952:	a201      	add	r2, pc, #4	@ (adr r2, 8008958 <UART_SetConfig+0x1f0>)
 8008954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008958:	0800897d 	.word	0x0800897d
 800895c:	0800899b 	.word	0x0800899b
 8008960:	08008985 	.word	0x08008985
 8008964:	0800899b 	.word	0x0800899b
 8008968:	0800898b 	.word	0x0800898b
 800896c:	0800899b 	.word	0x0800899b
 8008970:	0800899b 	.word	0x0800899b
 8008974:	0800899b 	.word	0x0800899b
 8008978:	08008993 	.word	0x08008993
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800897c:	f7fd ff46 	bl	800680c <HAL_RCC_GetPCLK1Freq>
 8008980:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008982:	e010      	b.n	80089a6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008984:	4b1c      	ldr	r3, [pc, #112]	@ (80089f8 <UART_SetConfig+0x290>)
 8008986:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008988:	e00d      	b.n	80089a6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800898a:	f7fd fe8b 	bl	80066a4 <HAL_RCC_GetSysClockFreq>
 800898e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008990:	e009      	b.n	80089a6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008992:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008996:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008998:	e005      	b.n	80089a6 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 800899a:	2300      	movs	r3, #0
 800899c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800899e:	2301      	movs	r3, #1
 80089a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80089a4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80089a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	f000 8137 	beq.w	8008c1c <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80089ae:	697b      	ldr	r3, [r7, #20]
 80089b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089b2:	4a12      	ldr	r2, [pc, #72]	@ (80089fc <UART_SetConfig+0x294>)
 80089b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80089b8:	461a      	mov	r2, r3
 80089ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80089c0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80089c2:	697b      	ldr	r3, [r7, #20]
 80089c4:	685a      	ldr	r2, [r3, #4]
 80089c6:	4613      	mov	r3, r2
 80089c8:	005b      	lsls	r3, r3, #1
 80089ca:	4413      	add	r3, r2
 80089cc:	69ba      	ldr	r2, [r7, #24]
 80089ce:	429a      	cmp	r2, r3
 80089d0:	d305      	bcc.n	80089de <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80089d2:	697b      	ldr	r3, [r7, #20]
 80089d4:	685b      	ldr	r3, [r3, #4]
 80089d6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80089d8:	69ba      	ldr	r2, [r7, #24]
 80089da:	429a      	cmp	r2, r3
 80089dc:	d910      	bls.n	8008a00 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 80089de:	2301      	movs	r3, #1
 80089e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80089e4:	e11a      	b.n	8008c1c <UART_SetConfig+0x4b4>
 80089e6:	bf00      	nop
 80089e8:	cfff69f3 	.word	0xcfff69f3
 80089ec:	40008000 	.word	0x40008000
 80089f0:	40013800 	.word	0x40013800
 80089f4:	40004400 	.word	0x40004400
 80089f8:	00f42400 	.word	0x00f42400
 80089fc:	0801f06c 	.word	0x0801f06c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a02:	2200      	movs	r2, #0
 8008a04:	60bb      	str	r3, [r7, #8]
 8008a06:	60fa      	str	r2, [r7, #12]
 8008a08:	697b      	ldr	r3, [r7, #20]
 8008a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a0c:	4a8e      	ldr	r2, [pc, #568]	@ (8008c48 <UART_SetConfig+0x4e0>)
 8008a0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a12:	b29b      	uxth	r3, r3
 8008a14:	2200      	movs	r2, #0
 8008a16:	603b      	str	r3, [r7, #0]
 8008a18:	607a      	str	r2, [r7, #4]
 8008a1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a1e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008a22:	f7f8 f9cd 	bl	8000dc0 <__aeabi_uldivmod>
 8008a26:	4602      	mov	r2, r0
 8008a28:	460b      	mov	r3, r1
 8008a2a:	4610      	mov	r0, r2
 8008a2c:	4619      	mov	r1, r3
 8008a2e:	f04f 0200 	mov.w	r2, #0
 8008a32:	f04f 0300 	mov.w	r3, #0
 8008a36:	020b      	lsls	r3, r1, #8
 8008a38:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008a3c:	0202      	lsls	r2, r0, #8
 8008a3e:	6979      	ldr	r1, [r7, #20]
 8008a40:	6849      	ldr	r1, [r1, #4]
 8008a42:	0849      	lsrs	r1, r1, #1
 8008a44:	2000      	movs	r0, #0
 8008a46:	460c      	mov	r4, r1
 8008a48:	4605      	mov	r5, r0
 8008a4a:	eb12 0804 	adds.w	r8, r2, r4
 8008a4e:	eb43 0905 	adc.w	r9, r3, r5
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	685b      	ldr	r3, [r3, #4]
 8008a56:	2200      	movs	r2, #0
 8008a58:	469a      	mov	sl, r3
 8008a5a:	4693      	mov	fp, r2
 8008a5c:	4652      	mov	r2, sl
 8008a5e:	465b      	mov	r3, fp
 8008a60:	4640      	mov	r0, r8
 8008a62:	4649      	mov	r1, r9
 8008a64:	f7f8 f9ac 	bl	8000dc0 <__aeabi_uldivmod>
 8008a68:	4602      	mov	r2, r0
 8008a6a:	460b      	mov	r3, r1
 8008a6c:	4613      	mov	r3, r2
 8008a6e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008a70:	6a3b      	ldr	r3, [r7, #32]
 8008a72:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008a76:	d308      	bcc.n	8008a8a <UART_SetConfig+0x322>
 8008a78:	6a3b      	ldr	r3, [r7, #32]
 8008a7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008a7e:	d204      	bcs.n	8008a8a <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8008a80:	697b      	ldr	r3, [r7, #20]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	6a3a      	ldr	r2, [r7, #32]
 8008a86:	60da      	str	r2, [r3, #12]
 8008a88:	e0c8      	b.n	8008c1c <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008a90:	e0c4      	b.n	8008c1c <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008a92:	697b      	ldr	r3, [r7, #20]
 8008a94:	69db      	ldr	r3, [r3, #28]
 8008a96:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008a9a:	d168      	bne.n	8008b6e <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8008a9c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008aa0:	2b08      	cmp	r3, #8
 8008aa2:	d828      	bhi.n	8008af6 <UART_SetConfig+0x38e>
 8008aa4:	a201      	add	r2, pc, #4	@ (adr r2, 8008aac <UART_SetConfig+0x344>)
 8008aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aaa:	bf00      	nop
 8008aac:	08008ad1 	.word	0x08008ad1
 8008ab0:	08008ad9 	.word	0x08008ad9
 8008ab4:	08008ae1 	.word	0x08008ae1
 8008ab8:	08008af7 	.word	0x08008af7
 8008abc:	08008ae7 	.word	0x08008ae7
 8008ac0:	08008af7 	.word	0x08008af7
 8008ac4:	08008af7 	.word	0x08008af7
 8008ac8:	08008af7 	.word	0x08008af7
 8008acc:	08008aef 	.word	0x08008aef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ad0:	f7fd fe9c 	bl	800680c <HAL_RCC_GetPCLK1Freq>
 8008ad4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008ad6:	e014      	b.n	8008b02 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008ad8:	f7fd feaa 	bl	8006830 <HAL_RCC_GetPCLK2Freq>
 8008adc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008ade:	e010      	b.n	8008b02 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008ae0:	4b5a      	ldr	r3, [pc, #360]	@ (8008c4c <UART_SetConfig+0x4e4>)
 8008ae2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008ae4:	e00d      	b.n	8008b02 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008ae6:	f7fd fddd 	bl	80066a4 <HAL_RCC_GetSysClockFreq>
 8008aea:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008aec:	e009      	b.n	8008b02 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008aee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008af2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008af4:	e005      	b.n	8008b02 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8008af6:	2300      	movs	r3, #0
 8008af8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008afa:	2301      	movs	r3, #1
 8008afc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008b00:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	f000 8089 	beq.w	8008c1c <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b0a:	697b      	ldr	r3, [r7, #20]
 8008b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b0e:	4a4e      	ldr	r2, [pc, #312]	@ (8008c48 <UART_SetConfig+0x4e0>)
 8008b10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b14:	461a      	mov	r2, r3
 8008b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b18:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b1c:	005a      	lsls	r2, r3, #1
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	685b      	ldr	r3, [r3, #4]
 8008b22:	085b      	lsrs	r3, r3, #1
 8008b24:	441a      	add	r2, r3
 8008b26:	697b      	ldr	r3, [r7, #20]
 8008b28:	685b      	ldr	r3, [r3, #4]
 8008b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b2e:	b29b      	uxth	r3, r3
 8008b30:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b32:	6a3b      	ldr	r3, [r7, #32]
 8008b34:	2b0f      	cmp	r3, #15
 8008b36:	d916      	bls.n	8008b66 <UART_SetConfig+0x3fe>
 8008b38:	6a3b      	ldr	r3, [r7, #32]
 8008b3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b3e:	d212      	bcs.n	8008b66 <UART_SetConfig+0x3fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008b40:	6a3b      	ldr	r3, [r7, #32]
 8008b42:	b29b      	uxth	r3, r3
 8008b44:	f023 030f 	bic.w	r3, r3, #15
 8008b48:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008b4a:	6a3b      	ldr	r3, [r7, #32]
 8008b4c:	085b      	lsrs	r3, r3, #1
 8008b4e:	b29b      	uxth	r3, r3
 8008b50:	f003 0307 	and.w	r3, r3, #7
 8008b54:	b29a      	uxth	r2, r3
 8008b56:	8bfb      	ldrh	r3, [r7, #30]
 8008b58:	4313      	orrs	r3, r2
 8008b5a:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008b5c:	697b      	ldr	r3, [r7, #20]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	8bfa      	ldrh	r2, [r7, #30]
 8008b62:	60da      	str	r2, [r3, #12]
 8008b64:	e05a      	b.n	8008c1c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8008b66:	2301      	movs	r3, #1
 8008b68:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008b6c:	e056      	b.n	8008c1c <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008b6e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008b72:	2b08      	cmp	r3, #8
 8008b74:	d827      	bhi.n	8008bc6 <UART_SetConfig+0x45e>
 8008b76:	a201      	add	r2, pc, #4	@ (adr r2, 8008b7c <UART_SetConfig+0x414>)
 8008b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b7c:	08008ba1 	.word	0x08008ba1
 8008b80:	08008ba9 	.word	0x08008ba9
 8008b84:	08008bb1 	.word	0x08008bb1
 8008b88:	08008bc7 	.word	0x08008bc7
 8008b8c:	08008bb7 	.word	0x08008bb7
 8008b90:	08008bc7 	.word	0x08008bc7
 8008b94:	08008bc7 	.word	0x08008bc7
 8008b98:	08008bc7 	.word	0x08008bc7
 8008b9c:	08008bbf 	.word	0x08008bbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ba0:	f7fd fe34 	bl	800680c <HAL_RCC_GetPCLK1Freq>
 8008ba4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008ba6:	e014      	b.n	8008bd2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008ba8:	f7fd fe42 	bl	8006830 <HAL_RCC_GetPCLK2Freq>
 8008bac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008bae:	e010      	b.n	8008bd2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008bb0:	4b26      	ldr	r3, [pc, #152]	@ (8008c4c <UART_SetConfig+0x4e4>)
 8008bb2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008bb4:	e00d      	b.n	8008bd2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008bb6:	f7fd fd75 	bl	80066a4 <HAL_RCC_GetSysClockFreq>
 8008bba:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008bbc:	e009      	b.n	8008bd2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008bbe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008bc2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008bc4:	e005      	b.n	8008bd2 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008bca:	2301      	movs	r3, #1
 8008bcc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008bd0:	bf00      	nop
    }

    if (pclk != 0U)
 8008bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d021      	beq.n	8008c1c <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008bd8:	697b      	ldr	r3, [r7, #20]
 8008bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bdc:	4a1a      	ldr	r2, [pc, #104]	@ (8008c48 <UART_SetConfig+0x4e0>)
 8008bde:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008be2:	461a      	mov	r2, r3
 8008be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008be6:	fbb3 f2f2 	udiv	r2, r3, r2
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	685b      	ldr	r3, [r3, #4]
 8008bee:	085b      	lsrs	r3, r3, #1
 8008bf0:	441a      	add	r2, r3
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	685b      	ldr	r3, [r3, #4]
 8008bf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bfa:	b29b      	uxth	r3, r3
 8008bfc:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008bfe:	6a3b      	ldr	r3, [r7, #32]
 8008c00:	2b0f      	cmp	r3, #15
 8008c02:	d908      	bls.n	8008c16 <UART_SetConfig+0x4ae>
 8008c04:	6a3b      	ldr	r3, [r7, #32]
 8008c06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c0a:	d204      	bcs.n	8008c16 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = usartdiv;
 8008c0c:	697b      	ldr	r3, [r7, #20]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	6a3a      	ldr	r2, [r7, #32]
 8008c12:	60da      	str	r2, [r3, #12]
 8008c14:	e002      	b.n	8008c1c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8008c16:	2301      	movs	r3, #1
 8008c18:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008c1c:	697b      	ldr	r3, [r7, #20]
 8008c1e:	2201      	movs	r2, #1
 8008c20:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008c24:	697b      	ldr	r3, [r7, #20]
 8008c26:	2201      	movs	r2, #1
 8008c28:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008c2c:	697b      	ldr	r3, [r7, #20]
 8008c2e:	2200      	movs	r2, #0
 8008c30:	671a      	str	r2, [r3, #112]	@ 0x70
  huart->TxISR = NULL;
 8008c32:	697b      	ldr	r3, [r7, #20]
 8008c34:	2200      	movs	r2, #0
 8008c36:	675a      	str	r2, [r3, #116]	@ 0x74

  return ret;
 8008c38:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	3730      	adds	r7, #48	@ 0x30
 8008c40:	46bd      	mov	sp, r7
 8008c42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008c46:	bf00      	nop
 8008c48:	0801f06c 	.word	0x0801f06c
 8008c4c:	00f42400 	.word	0x00f42400

08008c50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008c50:	b480      	push	{r7}
 8008c52:	b083      	sub	sp, #12
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c5c:	f003 0301 	and.w	r3, r3, #1
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d00a      	beq.n	8008c7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	685b      	ldr	r3, [r3, #4]
 8008c6a:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	430a      	orrs	r2, r1
 8008c78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c7e:	f003 0302 	and.w	r3, r3, #2
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d00a      	beq.n	8008c9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	685b      	ldr	r3, [r3, #4]
 8008c8c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	430a      	orrs	r2, r1
 8008c9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ca0:	f003 0304 	and.w	r3, r3, #4
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d00a      	beq.n	8008cbe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	685b      	ldr	r3, [r3, #4]
 8008cae:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	430a      	orrs	r2, r1
 8008cbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cc2:	f003 0308 	and.w	r3, r3, #8
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d00a      	beq.n	8008ce0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	685b      	ldr	r3, [r3, #4]
 8008cd0:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	430a      	orrs	r2, r1
 8008cde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ce4:	f003 0310 	and.w	r3, r3, #16
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d00a      	beq.n	8008d02 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	689b      	ldr	r3, [r3, #8]
 8008cf2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	430a      	orrs	r2, r1
 8008d00:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d06:	f003 0320 	and.w	r3, r3, #32
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d00a      	beq.n	8008d24 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	689b      	ldr	r3, [r3, #8]
 8008d14:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	430a      	orrs	r2, r1
 8008d22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d01a      	beq.n	8008d66 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	685b      	ldr	r3, [r3, #4]
 8008d36:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	430a      	orrs	r2, r1
 8008d44:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d4a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008d4e:	d10a      	bne.n	8008d66 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	685b      	ldr	r3, [r3, #4]
 8008d56:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	430a      	orrs	r2, r1
 8008d64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d00a      	beq.n	8008d88 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	685b      	ldr	r3, [r3, #4]
 8008d78:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	430a      	orrs	r2, r1
 8008d86:	605a      	str	r2, [r3, #4]
  }
}
 8008d88:	bf00      	nop
 8008d8a:	370c      	adds	r7, #12
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bc80      	pop	{r7}
 8008d90:	4770      	bx	lr

08008d92 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008d92:	b580      	push	{r7, lr}
 8008d94:	b086      	sub	sp, #24
 8008d96:	af02      	add	r7, sp, #8
 8008d98:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008da2:	f7f9 fa0f 	bl	80021c4 <HAL_GetTick>
 8008da6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f003 0308 	and.w	r3, r3, #8
 8008db2:	2b08      	cmp	r3, #8
 8008db4:	d10e      	bne.n	8008dd4 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008db6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008dba:	9300      	str	r3, [sp, #0]
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	f000 f82f 	bl	8008e28 <UART_WaitOnFlagUntilTimeout>
 8008dca:	4603      	mov	r3, r0
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d001      	beq.n	8008dd4 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008dd0:	2303      	movs	r3, #3
 8008dd2:	e025      	b.n	8008e20 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f003 0304 	and.w	r3, r3, #4
 8008dde:	2b04      	cmp	r3, #4
 8008de0:	d10e      	bne.n	8008e00 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008de2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008de6:	9300      	str	r3, [sp, #0]
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	2200      	movs	r2, #0
 8008dec:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008df0:	6878      	ldr	r0, [r7, #4]
 8008df2:	f000 f819 	bl	8008e28 <UART_WaitOnFlagUntilTimeout>
 8008df6:	4603      	mov	r3, r0
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d001      	beq.n	8008e00 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008dfc:	2303      	movs	r3, #3
 8008dfe:	e00f      	b.n	8008e20 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2220      	movs	r2, #32
 8008e04:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2220      	movs	r2, #32
 8008e0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2200      	movs	r2, #0
 8008e14:	66da      	str	r2, [r3, #108]	@ 0x6c

  __HAL_UNLOCK(huart);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2200      	movs	r2, #0
 8008e1a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8008e1e:	2300      	movs	r3, #0
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	3710      	adds	r7, #16
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}

08008e28 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b09c      	sub	sp, #112	@ 0x70
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	60f8      	str	r0, [r7, #12]
 8008e30:	60b9      	str	r1, [r7, #8]
 8008e32:	603b      	str	r3, [r7, #0]
 8008e34:	4613      	mov	r3, r2
 8008e36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e38:	e0a9      	b.n	8008f8e <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e3a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e40:	f000 80a5 	beq.w	8008f8e <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e44:	f7f9 f9be 	bl	80021c4 <HAL_GetTick>
 8008e48:	4602      	mov	r2, r0
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	1ad3      	subs	r3, r2, r3
 8008e4e:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8008e50:	429a      	cmp	r2, r3
 8008e52:	d302      	bcc.n	8008e5a <UART_WaitOnFlagUntilTimeout+0x32>
 8008e54:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d140      	bne.n	8008edc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008e62:	e853 3f00 	ldrex	r3, [r3]
 8008e66:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008e68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008e6a:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8008e6e:	667b      	str	r3, [r7, #100]	@ 0x64
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	461a      	mov	r2, r3
 8008e76:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008e78:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008e7a:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e7c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008e7e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008e80:	e841 2300 	strex	r3, r2, [r1]
 8008e84:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8008e86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d1e6      	bne.n	8008e5a <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	3308      	adds	r3, #8
 8008e92:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e96:	e853 3f00 	ldrex	r3, [r3]
 8008e9a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008e9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e9e:	f023 0301 	bic.w	r3, r3, #1
 8008ea2:	663b      	str	r3, [r7, #96]	@ 0x60
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	3308      	adds	r3, #8
 8008eaa:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008eac:	64ba      	str	r2, [r7, #72]	@ 0x48
 8008eae:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eb0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008eb2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008eb4:	e841 2300 	strex	r3, r2, [r1]
 8008eb8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008eba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d1e5      	bne.n	8008e8c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	2220      	movs	r2, #32
 8008ec4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	2220      	movs	r2, #32
 8008ecc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        __HAL_UNLOCK(huart);
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8008ed8:	2303      	movs	r3, #3
 8008eda:	e069      	b.n	8008fb0 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f003 0304 	and.w	r3, r3, #4
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d051      	beq.n	8008f8e <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	69db      	ldr	r3, [r3, #28]
 8008ef0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008ef4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008ef8:	d149      	bne.n	8008f8e <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008f02:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f0c:	e853 3f00 	ldrex	r3, [r3]
 8008f10:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f14:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8008f18:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	461a      	mov	r2, r3
 8008f20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008f22:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f24:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f26:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008f28:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008f2a:	e841 2300 	strex	r3, r2, [r1]
 8008f2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008f30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d1e6      	bne.n	8008f04 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	3308      	adds	r3, #8
 8008f3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f3e:	697b      	ldr	r3, [r7, #20]
 8008f40:	e853 3f00 	ldrex	r3, [r3]
 8008f44:	613b      	str	r3, [r7, #16]
   return(result);
 8008f46:	693b      	ldr	r3, [r7, #16]
 8008f48:	f023 0301 	bic.w	r3, r3, #1
 8008f4c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	3308      	adds	r3, #8
 8008f54:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008f56:	623a      	str	r2, [r7, #32]
 8008f58:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f5a:	69f9      	ldr	r1, [r7, #28]
 8008f5c:	6a3a      	ldr	r2, [r7, #32]
 8008f5e:	e841 2300 	strex	r3, r2, [r1]
 8008f62:	61bb      	str	r3, [r7, #24]
   return(result);
 8008f64:	69bb      	ldr	r3, [r7, #24]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d1e5      	bne.n	8008f36 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	2220      	movs	r2, #32
 8008f6e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	2220      	movs	r2, #32
 8008f76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	2220      	movs	r2, #32
 8008f7e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	2200      	movs	r2, #0
 8008f86:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008f8a:	2303      	movs	r3, #3
 8008f8c:	e010      	b.n	8008fb0 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	69da      	ldr	r2, [r3, #28]
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	4013      	ands	r3, r2
 8008f98:	68ba      	ldr	r2, [r7, #8]
 8008f9a:	429a      	cmp	r2, r3
 8008f9c:	bf0c      	ite	eq
 8008f9e:	2301      	moveq	r3, #1
 8008fa0:	2300      	movne	r3, #0
 8008fa2:	b2db      	uxtb	r3, r3
 8008fa4:	461a      	mov	r2, r3
 8008fa6:	79fb      	ldrb	r3, [r7, #7]
 8008fa8:	429a      	cmp	r2, r3
 8008faa:	f43f af46 	beq.w	8008e3a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008fae:	2300      	movs	r3, #0
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	3770      	adds	r7, #112	@ 0x70
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}

08008fb8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008fb8:	b480      	push	{r7}
 8008fba:	b0a3      	sub	sp, #140	@ 0x8c
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	60f8      	str	r0, [r7, #12]
 8008fc0:	60b9      	str	r1, [r7, #8]
 8008fc2:	4613      	mov	r3, r2
 8008fc4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	68ba      	ldr	r2, [r7, #8]
 8008fca:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	88fa      	ldrh	r2, [r7, #6]
 8008fd0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	88fa      	ldrh	r2, [r7, #6]
 8008fd8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	2200      	movs	r2, #0
 8008fe0:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	689b      	ldr	r3, [r3, #8]
 8008fe6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008fea:	d10e      	bne.n	800900a <UART_Start_Receive_IT+0x52>
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	691b      	ldr	r3, [r3, #16]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d105      	bne.n	8009000 <UART_Start_Receive_IT+0x48>
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8008ffa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008ffe:	e02d      	b.n	800905c <UART_Start_Receive_IT+0xa4>
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	22ff      	movs	r2, #255	@ 0xff
 8009004:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009008:	e028      	b.n	800905c <UART_Start_Receive_IT+0xa4>
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	689b      	ldr	r3, [r3, #8]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d10d      	bne.n	800902e <UART_Start_Receive_IT+0x76>
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	691b      	ldr	r3, [r3, #16]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d104      	bne.n	8009024 <UART_Start_Receive_IT+0x6c>
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	22ff      	movs	r2, #255	@ 0xff
 800901e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009022:	e01b      	b.n	800905c <UART_Start_Receive_IT+0xa4>
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	227f      	movs	r2, #127	@ 0x7f
 8009028:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800902c:	e016      	b.n	800905c <UART_Start_Receive_IT+0xa4>
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	689b      	ldr	r3, [r3, #8]
 8009032:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009036:	d10d      	bne.n	8009054 <UART_Start_Receive_IT+0x9c>
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	691b      	ldr	r3, [r3, #16]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d104      	bne.n	800904a <UART_Start_Receive_IT+0x92>
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	227f      	movs	r2, #127	@ 0x7f
 8009044:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009048:	e008      	b.n	800905c <UART_Start_Receive_IT+0xa4>
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	223f      	movs	r2, #63	@ 0x3f
 800904e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009052:	e003      	b.n	800905c <UART_Start_Receive_IT+0xa4>
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	2200      	movs	r2, #0
 8009058:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	2200      	movs	r2, #0
 8009060:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	2222      	movs	r2, #34	@ 0x22
 8009068:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	3308      	adds	r3, #8
 8009072:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009074:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009076:	e853 3f00 	ldrex	r3, [r3]
 800907a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800907c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800907e:	f043 0301 	orr.w	r3, r3, #1
 8009082:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	3308      	adds	r3, #8
 800908c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009090:	673a      	str	r2, [r7, #112]	@ 0x70
 8009092:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009094:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8009096:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8009098:	e841 2300 	strex	r3, r2, [r1]
 800909c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800909e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d1e3      	bne.n	800906c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80090a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80090ac:	d153      	bne.n	8009156 <UART_Start_Receive_IT+0x19e>
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80090b4:	88fa      	ldrh	r2, [r7, #6]
 80090b6:	429a      	cmp	r2, r3
 80090b8:	d34d      	bcc.n	8009156 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	689b      	ldr	r3, [r3, #8]
 80090be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80090c2:	d107      	bne.n	80090d4 <UART_Start_Receive_IT+0x11c>
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	691b      	ldr	r3, [r3, #16]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d103      	bne.n	80090d4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	4a4a      	ldr	r2, [pc, #296]	@ (80091f8 <UART_Start_Receive_IT+0x240>)
 80090d0:	671a      	str	r2, [r3, #112]	@ 0x70
 80090d2:	e002      	b.n	80090da <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	4a49      	ldr	r2, [pc, #292]	@ (80091fc <UART_Start_Receive_IT+0x244>)
 80090d8:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    __HAL_UNLOCK(huart);
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	2200      	movs	r2, #0
 80090de:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	691b      	ldr	r3, [r3, #16]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d01a      	beq.n	8009120 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80090f2:	e853 3f00 	ldrex	r3, [r3]
 80090f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80090f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80090fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80090fe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	461a      	mov	r2, r3
 8009108:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800910c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800910e:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009110:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009112:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009114:	e841 2300 	strex	r3, r2, [r1]
 8009118:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800911a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800911c:	2b00      	cmp	r3, #0
 800911e:	d1e4      	bne.n	80090ea <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	3308      	adds	r3, #8
 8009126:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009128:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800912a:	e853 3f00 	ldrex	r3, [r3]
 800912e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009130:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009132:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009136:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	3308      	adds	r3, #8
 800913e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009140:	64ba      	str	r2, [r7, #72]	@ 0x48
 8009142:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009144:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009146:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009148:	e841 2300 	strex	r3, r2, [r1]
 800914c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800914e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009150:	2b00      	cmp	r3, #0
 8009152:	d1e5      	bne.n	8009120 <UART_Start_Receive_IT+0x168>
 8009154:	e04a      	b.n	80091ec <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	689b      	ldr	r3, [r3, #8]
 800915a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800915e:	d107      	bne.n	8009170 <UART_Start_Receive_IT+0x1b8>
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	691b      	ldr	r3, [r3, #16]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d103      	bne.n	8009170 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	4a25      	ldr	r2, [pc, #148]	@ (8009200 <UART_Start_Receive_IT+0x248>)
 800916c:	671a      	str	r2, [r3, #112]	@ 0x70
 800916e:	e002      	b.n	8009176 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	4a24      	ldr	r2, [pc, #144]	@ (8009204 <UART_Start_Receive_IT+0x24c>)
 8009174:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    __HAL_UNLOCK(huart);
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	2200      	movs	r2, #0
 800917a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	691b      	ldr	r3, [r3, #16]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d019      	beq.n	80091ba <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800918c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800918e:	e853 3f00 	ldrex	r3, [r3]
 8009192:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009196:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800919a:	677b      	str	r3, [r7, #116]	@ 0x74
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	461a      	mov	r2, r3
 80091a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80091a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80091a6:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091a8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80091aa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80091ac:	e841 2300 	strex	r3, r2, [r1]
 80091b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80091b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d1e6      	bne.n	8009186 <UART_Start_Receive_IT+0x1ce>
 80091b8:	e018      	b.n	80091ec <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091c0:	697b      	ldr	r3, [r7, #20]
 80091c2:	e853 3f00 	ldrex	r3, [r3]
 80091c6:	613b      	str	r3, [r7, #16]
   return(result);
 80091c8:	693b      	ldr	r3, [r7, #16]
 80091ca:	f043 0320 	orr.w	r3, r3, #32
 80091ce:	67bb      	str	r3, [r7, #120]	@ 0x78
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	461a      	mov	r2, r3
 80091d6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80091d8:	623b      	str	r3, [r7, #32]
 80091da:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091dc:	69f9      	ldr	r1, [r7, #28]
 80091de:	6a3a      	ldr	r2, [r7, #32]
 80091e0:	e841 2300 	strex	r3, r2, [r1]
 80091e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80091e6:	69bb      	ldr	r3, [r7, #24]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d1e6      	bne.n	80091ba <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 80091ec:	2300      	movs	r3, #0
}
 80091ee:	4618      	mov	r0, r3
 80091f0:	378c      	adds	r7, #140	@ 0x8c
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bc80      	pop	{r7}
 80091f6:	4770      	bx	lr
 80091f8:	08009ac5 	.word	0x08009ac5
 80091fc:	080097cd 	.word	0x080097cd
 8009200:	0800966b 	.word	0x0800966b
 8009204:	0800950b 	.word	0x0800950b

08009208 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009208:	b480      	push	{r7}
 800920a:	b08f      	sub	sp, #60	@ 0x3c
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009216:	6a3b      	ldr	r3, [r7, #32]
 8009218:	e853 3f00 	ldrex	r3, [r3]
 800921c:	61fb      	str	r3, [r7, #28]
   return(result);
 800921e:	69fb      	ldr	r3, [r7, #28]
 8009220:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009224:	637b      	str	r3, [r7, #52]	@ 0x34
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	461a      	mov	r2, r3
 800922c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800922e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009230:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009232:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009234:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009236:	e841 2300 	strex	r3, r2, [r1]
 800923a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800923c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800923e:	2b00      	cmp	r3, #0
 8009240:	d1e6      	bne.n	8009210 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	3308      	adds	r3, #8
 8009248:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	e853 3f00 	ldrex	r3, [r3]
 8009250:	60bb      	str	r3, [r7, #8]
   return(result);
 8009252:	68bb      	ldr	r3, [r7, #8]
 8009254:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009258:	633b      	str	r3, [r7, #48]	@ 0x30
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	3308      	adds	r3, #8
 8009260:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009262:	61ba      	str	r2, [r7, #24]
 8009264:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009266:	6979      	ldr	r1, [r7, #20]
 8009268:	69ba      	ldr	r2, [r7, #24]
 800926a:	e841 2300 	strex	r3, r2, [r1]
 800926e:	613b      	str	r3, [r7, #16]
   return(result);
 8009270:	693b      	ldr	r3, [r7, #16]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d1e5      	bne.n	8009242 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2220      	movs	r2, #32
 800927a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
}
 800927e:	bf00      	nop
 8009280:	373c      	adds	r7, #60	@ 0x3c
 8009282:	46bd      	mov	sp, r7
 8009284:	bc80      	pop	{r7}
 8009286:	4770      	bx	lr

08009288 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009288:	b480      	push	{r7}
 800928a:	b095      	sub	sp, #84	@ 0x54
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009296:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009298:	e853 3f00 	ldrex	r3, [r3]
 800929c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800929e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80092a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	461a      	mov	r2, r3
 80092ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80092ae:	643b      	str	r3, [r7, #64]	@ 0x40
 80092b0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092b2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80092b4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80092b6:	e841 2300 	strex	r3, r2, [r1]
 80092ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80092bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d1e6      	bne.n	8009290 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	3308      	adds	r3, #8
 80092c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ca:	6a3b      	ldr	r3, [r7, #32]
 80092cc:	e853 3f00 	ldrex	r3, [r3]
 80092d0:	61fb      	str	r3, [r7, #28]
   return(result);
 80092d2:	69fb      	ldr	r3, [r7, #28]
 80092d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80092d8:	f023 0301 	bic.w	r3, r3, #1
 80092dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	3308      	adds	r3, #8
 80092e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80092e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80092e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80092ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80092ee:	e841 2300 	strex	r3, r2, [r1]
 80092f2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80092f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d1e3      	bne.n	80092c2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80092fe:	2b01      	cmp	r3, #1
 8009300:	d118      	bne.n	8009334 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	e853 3f00 	ldrex	r3, [r3]
 800930e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	f023 0310 	bic.w	r3, r3, #16
 8009316:	647b      	str	r3, [r7, #68]	@ 0x44
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	461a      	mov	r2, r3
 800931e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009320:	61bb      	str	r3, [r7, #24]
 8009322:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009324:	6979      	ldr	r1, [r7, #20]
 8009326:	69ba      	ldr	r2, [r7, #24]
 8009328:	e841 2300 	strex	r3, r2, [r1]
 800932c:	613b      	str	r3, [r7, #16]
   return(result);
 800932e:	693b      	ldr	r3, [r7, #16]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d1e6      	bne.n	8009302 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2220      	movs	r2, #32
 8009338:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2200      	movs	r2, #0
 8009340:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2200      	movs	r2, #0
 8009346:	671a      	str	r2, [r3, #112]	@ 0x70
}
 8009348:	bf00      	nop
 800934a:	3754      	adds	r7, #84	@ 0x54
 800934c:	46bd      	mov	sp, r7
 800934e:	bc80      	pop	{r7}
 8009350:	4770      	bx	lr

08009352 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009352:	b580      	push	{r7, lr}
 8009354:	b090      	sub	sp, #64	@ 0x40
 8009356:	af00      	add	r7, sp, #0
 8009358:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800935e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f003 0320 	and.w	r3, r3, #32
 800936a:	2b00      	cmp	r3, #0
 800936c:	d137      	bne.n	80093de <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800936e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009370:	2200      	movs	r2, #0
 8009372:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009376:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	3308      	adds	r3, #8
 800937c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800937e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009380:	e853 3f00 	ldrex	r3, [r3]
 8009384:	623b      	str	r3, [r7, #32]
   return(result);
 8009386:	6a3b      	ldr	r3, [r7, #32]
 8009388:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800938c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800938e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	3308      	adds	r3, #8
 8009394:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009396:	633a      	str	r2, [r7, #48]	@ 0x30
 8009398:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800939a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800939c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800939e:	e841 2300 	strex	r3, r2, [r1]
 80093a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80093a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d1e5      	bne.n	8009376 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80093aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093b0:	693b      	ldr	r3, [r7, #16]
 80093b2:	e853 3f00 	ldrex	r3, [r3]
 80093b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80093be:	637b      	str	r3, [r7, #52]	@ 0x34
 80093c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	461a      	mov	r2, r3
 80093c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093c8:	61fb      	str	r3, [r7, #28]
 80093ca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093cc:	69b9      	ldr	r1, [r7, #24]
 80093ce:	69fa      	ldr	r2, [r7, #28]
 80093d0:	e841 2300 	strex	r3, r2, [r1]
 80093d4:	617b      	str	r3, [r7, #20]
   return(result);
 80093d6:	697b      	ldr	r3, [r7, #20]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d1e6      	bne.n	80093aa <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80093dc:	e002      	b.n	80093e4 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80093de:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80093e0:	f7f9 fd78 	bl	8002ed4 <HAL_UART_TxCpltCallback>
}
 80093e4:	bf00      	nop
 80093e6:	3740      	adds	r7, #64	@ 0x40
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bd80      	pop	{r7, pc}

080093ec <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b084      	sub	sp, #16
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093f8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80093fa:	68f8      	ldr	r0, [r7, #12]
 80093fc:	f7ff f996 	bl	800872c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009400:	bf00      	nop
 8009402:	3710      	adds	r7, #16
 8009404:	46bd      	mov	sp, r7
 8009406:	bd80      	pop	{r7, pc}

08009408 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b086      	sub	sp, #24
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009414:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009416:	697b      	ldr	r3, [r7, #20]
 8009418:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800941c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800941e:	697b      	ldr	r3, [r7, #20]
 8009420:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009424:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009426:	697b      	ldr	r3, [r7, #20]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	689b      	ldr	r3, [r3, #8]
 800942c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009430:	2b80      	cmp	r3, #128	@ 0x80
 8009432:	d109      	bne.n	8009448 <UART_DMAError+0x40>
 8009434:	693b      	ldr	r3, [r7, #16]
 8009436:	2b21      	cmp	r3, #33	@ 0x21
 8009438:	d106      	bne.n	8009448 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800943a:	697b      	ldr	r3, [r7, #20]
 800943c:	2200      	movs	r2, #0
 800943e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8009442:	6978      	ldr	r0, [r7, #20]
 8009444:	f7ff fee0 	bl	8009208 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009448:	697b      	ldr	r3, [r7, #20]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	689b      	ldr	r3, [r3, #8]
 800944e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009452:	2b40      	cmp	r3, #64	@ 0x40
 8009454:	d109      	bne.n	800946a <UART_DMAError+0x62>
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	2b22      	cmp	r3, #34	@ 0x22
 800945a:	d106      	bne.n	800946a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800945c:	697b      	ldr	r3, [r7, #20]
 800945e:	2200      	movs	r2, #0
 8009460:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8009464:	6978      	ldr	r0, [r7, #20]
 8009466:	f7ff ff0f 	bl	8009288 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009470:	f043 0210 	orr.w	r2, r3, #16
 8009474:	697b      	ldr	r3, [r7, #20]
 8009476:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800947a:	6978      	ldr	r0, [r7, #20]
 800947c:	f7ff f95f 	bl	800873e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009480:	bf00      	nop
 8009482:	3718      	adds	r7, #24
 8009484:	46bd      	mov	sp, r7
 8009486:	bd80      	pop	{r7, pc}

08009488 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b084      	sub	sp, #16
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009494:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	2200      	movs	r2, #0
 800949a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	2200      	movs	r2, #0
 80094a2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80094a6:	68f8      	ldr	r0, [r7, #12]
 80094a8:	f7ff f949 	bl	800873e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80094ac:	bf00      	nop
 80094ae:	3710      	adds	r7, #16
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}

080094b4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b088      	sub	sp, #32
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	e853 3f00 	ldrex	r3, [r3]
 80094c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80094d0:	61fb      	str	r3, [r7, #28]
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	461a      	mov	r2, r3
 80094d8:	69fb      	ldr	r3, [r7, #28]
 80094da:	61bb      	str	r3, [r7, #24]
 80094dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094de:	6979      	ldr	r1, [r7, #20]
 80094e0:	69ba      	ldr	r2, [r7, #24]
 80094e2:	e841 2300 	strex	r3, r2, [r1]
 80094e6:	613b      	str	r3, [r7, #16]
   return(result);
 80094e8:	693b      	ldr	r3, [r7, #16]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d1e6      	bne.n	80094bc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2220      	movs	r2, #32
 80094f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2200      	movs	r2, #0
 80094fa:	675a      	str	r2, [r3, #116]	@ 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80094fc:	6878      	ldr	r0, [r7, #4]
 80094fe:	f7f9 fce9 	bl	8002ed4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009502:	bf00      	nop
 8009504:	3720      	adds	r7, #32
 8009506:	46bd      	mov	sp, r7
 8009508:	bd80      	pop	{r7, pc}

0800950a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800950a:	b580      	push	{r7, lr}
 800950c:	b096      	sub	sp, #88	@ 0x58
 800950e:	af00      	add	r7, sp, #0
 8009510:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009518:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009522:	2b22      	cmp	r3, #34	@ 0x22
 8009524:	f040 8095 	bne.w	8009652 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800952e:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009532:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8009536:	b2d9      	uxtb	r1, r3
 8009538:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800953c:	b2da      	uxtb	r2, r3
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009542:	400a      	ands	r2, r1
 8009544:	b2d2      	uxtb	r2, r2
 8009546:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800954c:	1c5a      	adds	r2, r3, #1
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009558:	b29b      	uxth	r3, r3
 800955a:	3b01      	subs	r3, #1
 800955c:	b29a      	uxth	r2, r3
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800956a:	b29b      	uxth	r3, r3
 800956c:	2b00      	cmp	r3, #0
 800956e:	d178      	bne.n	8009662 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009576:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009578:	e853 3f00 	ldrex	r3, [r3]
 800957c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800957e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009580:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009584:	653b      	str	r3, [r7, #80]	@ 0x50
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	461a      	mov	r2, r3
 800958c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800958e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009590:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009592:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009594:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009596:	e841 2300 	strex	r3, r2, [r1]
 800959a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800959c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d1e6      	bne.n	8009570 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	3308      	adds	r3, #8
 80095a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095ac:	e853 3f00 	ldrex	r3, [r3]
 80095b0:	623b      	str	r3, [r7, #32]
   return(result);
 80095b2:	6a3b      	ldr	r3, [r7, #32]
 80095b4:	f023 0301 	bic.w	r3, r3, #1
 80095b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	3308      	adds	r3, #8
 80095c0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80095c2:	633a      	str	r2, [r7, #48]	@ 0x30
 80095c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80095c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80095ca:	e841 2300 	strex	r3, r2, [r1]
 80095ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80095d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d1e5      	bne.n	80095a2 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2220      	movs	r2, #32
 80095da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2200      	movs	r2, #0
 80095e2:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80095e8:	2b01      	cmp	r3, #1
 80095ea:	d12e      	bne.n	800964a <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2200      	movs	r2, #0
 80095f0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095f8:	693b      	ldr	r3, [r7, #16]
 80095fa:	e853 3f00 	ldrex	r3, [r3]
 80095fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	f023 0310 	bic.w	r3, r3, #16
 8009606:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	461a      	mov	r2, r3
 800960e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009610:	61fb      	str	r3, [r7, #28]
 8009612:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009614:	69b9      	ldr	r1, [r7, #24]
 8009616:	69fa      	ldr	r2, [r7, #28]
 8009618:	e841 2300 	strex	r3, r2, [r1]
 800961c:	617b      	str	r3, [r7, #20]
   return(result);
 800961e:	697b      	ldr	r3, [r7, #20]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d1e6      	bne.n	80095f2 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	69db      	ldr	r3, [r3, #28]
 800962a:	f003 0310 	and.w	r3, r3, #16
 800962e:	2b10      	cmp	r3, #16
 8009630:	d103      	bne.n	800963a <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	2210      	movs	r2, #16
 8009638:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009640:	4619      	mov	r1, r3
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f7ff f884 	bl	8008750 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009648:	e00b      	b.n	8009662 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f7f9 fc58 	bl	8002f00 <HAL_UART_RxCpltCallback>
}
 8009650:	e007      	b.n	8009662 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	699a      	ldr	r2, [r3, #24]
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f042 0208 	orr.w	r2, r2, #8
 8009660:	619a      	str	r2, [r3, #24]
}
 8009662:	bf00      	nop
 8009664:	3758      	adds	r7, #88	@ 0x58
 8009666:	46bd      	mov	sp, r7
 8009668:	bd80      	pop	{r7, pc}

0800966a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800966a:	b580      	push	{r7, lr}
 800966c:	b096      	sub	sp, #88	@ 0x58
 800966e:	af00      	add	r7, sp, #0
 8009670:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009678:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009682:	2b22      	cmp	r3, #34	@ 0x22
 8009684:	f040 8095 	bne.w	80097b2 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800968e:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009696:	653b      	str	r3, [r7, #80]	@ 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8009698:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 800969c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80096a0:	4013      	ands	r3, r2
 80096a2:	b29a      	uxth	r2, r3
 80096a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80096a6:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80096ac:	1c9a      	adds	r2, r3, #2
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80096b8:	b29b      	uxth	r3, r3
 80096ba:	3b01      	subs	r3, #1
 80096bc:	b29a      	uxth	r2, r3
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80096ca:	b29b      	uxth	r3, r3
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d178      	bne.n	80097c2 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096d8:	e853 3f00 	ldrex	r3, [r3]
 80096dc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80096de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80096e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	461a      	mov	r2, r3
 80096ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80096ee:	643b      	str	r3, [r7, #64]	@ 0x40
 80096f0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096f2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80096f4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80096f6:	e841 2300 	strex	r3, r2, [r1]
 80096fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80096fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d1e6      	bne.n	80096d0 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	3308      	adds	r3, #8
 8009708:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800970a:	6a3b      	ldr	r3, [r7, #32]
 800970c:	e853 3f00 	ldrex	r3, [r3]
 8009710:	61fb      	str	r3, [r7, #28]
   return(result);
 8009712:	69fb      	ldr	r3, [r7, #28]
 8009714:	f023 0301 	bic.w	r3, r3, #1
 8009718:	64bb      	str	r3, [r7, #72]	@ 0x48
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	3308      	adds	r3, #8
 8009720:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009722:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009724:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009726:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009728:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800972a:	e841 2300 	strex	r3, r2, [r1]
 800972e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009732:	2b00      	cmp	r3, #0
 8009734:	d1e5      	bne.n	8009702 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2220      	movs	r2, #32
 800973a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2200      	movs	r2, #0
 8009742:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009748:	2b01      	cmp	r3, #1
 800974a:	d12e      	bne.n	80097aa <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2200      	movs	r2, #0
 8009750:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	e853 3f00 	ldrex	r3, [r3]
 800975e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	f023 0310 	bic.w	r3, r3, #16
 8009766:	647b      	str	r3, [r7, #68]	@ 0x44
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	461a      	mov	r2, r3
 800976e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009770:	61bb      	str	r3, [r7, #24]
 8009772:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009774:	6979      	ldr	r1, [r7, #20]
 8009776:	69ba      	ldr	r2, [r7, #24]
 8009778:	e841 2300 	strex	r3, r2, [r1]
 800977c:	613b      	str	r3, [r7, #16]
   return(result);
 800977e:	693b      	ldr	r3, [r7, #16]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d1e6      	bne.n	8009752 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	69db      	ldr	r3, [r3, #28]
 800978a:	f003 0310 	and.w	r3, r3, #16
 800978e:	2b10      	cmp	r3, #16
 8009790:	d103      	bne.n	800979a <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	2210      	movs	r2, #16
 8009798:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80097a0:	4619      	mov	r1, r3
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	f7fe ffd4 	bl	8008750 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80097a8:	e00b      	b.n	80097c2 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f7f9 fba8 	bl	8002f00 <HAL_UART_RxCpltCallback>
}
 80097b0:	e007      	b.n	80097c2 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	699a      	ldr	r2, [r3, #24]
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	f042 0208 	orr.w	r2, r2, #8
 80097c0:	619a      	str	r2, [r3, #24]
}
 80097c2:	bf00      	nop
 80097c4:	3758      	adds	r7, #88	@ 0x58
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bd80      	pop	{r7, pc}
	...

080097cc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b0a6      	sub	sp, #152	@ 0x98
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80097da:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	69db      	ldr	r3, [r3, #28]
 80097e4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	689b      	ldr	r3, [r3, #8]
 80097f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009802:	2b22      	cmp	r3, #34	@ 0x22
 8009804:	f040 814f 	bne.w	8009aa6 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800980e:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009812:	e0f6      	b.n	8009a02 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800981a:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800981e:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8009822:	b2d9      	uxtb	r1, r3
 8009824:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8009828:	b2da      	uxtb	r2, r3
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800982e:	400a      	ands	r2, r1
 8009830:	b2d2      	uxtb	r2, r2
 8009832:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009838:	1c5a      	adds	r2, r3, #1
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009844:	b29b      	uxth	r3, r3
 8009846:	3b01      	subs	r3, #1
 8009848:	b29a      	uxth	r2, r3
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	69db      	ldr	r3, [r3, #28]
 8009856:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800985a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800985e:	f003 0307 	and.w	r3, r3, #7
 8009862:	2b00      	cmp	r3, #0
 8009864:	d053      	beq.n	800990e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009866:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800986a:	f003 0301 	and.w	r3, r3, #1
 800986e:	2b00      	cmp	r3, #0
 8009870:	d011      	beq.n	8009896 <UART_RxISR_8BIT_FIFOEN+0xca>
 8009872:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009876:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800987a:	2b00      	cmp	r3, #0
 800987c:	d00b      	beq.n	8009896 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	2201      	movs	r2, #1
 8009884:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800988c:	f043 0201 	orr.w	r2, r3, #1
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009896:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800989a:	f003 0302 	and.w	r3, r3, #2
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d011      	beq.n	80098c6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80098a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80098a6:	f003 0301 	and.w	r3, r3, #1
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d00b      	beq.n	80098c6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	2202      	movs	r2, #2
 80098b4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80098bc:	f043 0204 	orr.w	r2, r3, #4
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80098c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80098ca:	f003 0304 	and.w	r3, r3, #4
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d011      	beq.n	80098f6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80098d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80098d6:	f003 0301 	and.w	r3, r3, #1
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d00b      	beq.n	80098f6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	2204      	movs	r2, #4
 80098e4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80098ec:	f043 0202 	orr.w	r2, r3, #2
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d006      	beq.n	800990e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	f7fe ff1c 	bl	800873e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	2200      	movs	r2, #0
 800990a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009914:	b29b      	uxth	r3, r3
 8009916:	2b00      	cmp	r3, #0
 8009918:	d173      	bne.n	8009a02 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009920:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009922:	e853 3f00 	ldrex	r3, [r3]
 8009926:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8009928:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800992a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800992e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	461a      	mov	r2, r3
 8009938:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800993c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800993e:	667a      	str	r2, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009940:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8009942:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009944:	e841 2300 	strex	r3, r2, [r1]
 8009948:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800994a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800994c:	2b00      	cmp	r3, #0
 800994e:	d1e4      	bne.n	800991a <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	3308      	adds	r3, #8
 8009956:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009958:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800995a:	e853 3f00 	ldrex	r3, [r3]
 800995e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009960:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009962:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009966:	f023 0301 	bic.w	r3, r3, #1
 800996a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	3308      	adds	r3, #8
 8009972:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009974:	657a      	str	r2, [r7, #84]	@ 0x54
 8009976:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009978:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800997a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800997c:	e841 2300 	strex	r3, r2, [r1]
 8009980:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009982:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009984:	2b00      	cmp	r3, #0
 8009986:	d1e3      	bne.n	8009950 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2220      	movs	r2, #32
 800998c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2200      	movs	r2, #0
 8009994:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800999a:	2b01      	cmp	r3, #1
 800999c:	d12e      	bne.n	80099fc <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	2200      	movs	r2, #0
 80099a2:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099ac:	e853 3f00 	ldrex	r3, [r3]
 80099b0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80099b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099b4:	f023 0310 	bic.w	r3, r3, #16
 80099b8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	461a      	mov	r2, r3
 80099c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80099c2:	643b      	str	r3, [r7, #64]	@ 0x40
 80099c4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099c6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80099c8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80099ca:	e841 2300 	strex	r3, r2, [r1]
 80099ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80099d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d1e6      	bne.n	80099a4 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	69db      	ldr	r3, [r3, #28]
 80099dc:	f003 0310 	and.w	r3, r3, #16
 80099e0:	2b10      	cmp	r3, #16
 80099e2:	d103      	bne.n	80099ec <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	2210      	movs	r2, #16
 80099ea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80099f2:	4619      	mov	r1, r3
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	f7fe feab 	bl	8008750 <HAL_UARTEx_RxEventCallback>
 80099fa:	e002      	b.n	8009a02 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80099fc:	6878      	ldr	r0, [r7, #4]
 80099fe:	f7f9 fa7f 	bl	8002f00 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009a02:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d006      	beq.n	8009a18 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8009a0a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009a0e:	f003 0320 	and.w	r3, r3, #32
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	f47f aefe 	bne.w	8009814 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009a1e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009a22:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d045      	beq.n	8009ab6 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009a30:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009a34:	429a      	cmp	r2, r3
 8009a36:	d23e      	bcs.n	8009ab6 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	3308      	adds	r3, #8
 8009a3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a40:	6a3b      	ldr	r3, [r7, #32]
 8009a42:	e853 3f00 	ldrex	r3, [r3]
 8009a46:	61fb      	str	r3, [r7, #28]
   return(result);
 8009a48:	69fb      	ldr	r3, [r7, #28]
 8009a4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009a4e:	673b      	str	r3, [r7, #112]	@ 0x70
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	3308      	adds	r3, #8
 8009a56:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8009a58:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009a5a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a5c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009a5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009a60:	e841 2300 	strex	r3, r2, [r1]
 8009a64:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d1e5      	bne.n	8009a38 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	4a14      	ldr	r2, [pc, #80]	@ (8009ac0 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8009a70:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	e853 3f00 	ldrex	r3, [r3]
 8009a7e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009a80:	68bb      	ldr	r3, [r7, #8]
 8009a82:	f043 0320 	orr.w	r3, r3, #32
 8009a86:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	461a      	mov	r2, r3
 8009a8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009a90:	61bb      	str	r3, [r7, #24]
 8009a92:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a94:	6979      	ldr	r1, [r7, #20]
 8009a96:	69ba      	ldr	r2, [r7, #24]
 8009a98:	e841 2300 	strex	r3, r2, [r1]
 8009a9c:	613b      	str	r3, [r7, #16]
   return(result);
 8009a9e:	693b      	ldr	r3, [r7, #16]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d1e6      	bne.n	8009a72 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009aa4:	e007      	b.n	8009ab6 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	699a      	ldr	r2, [r3, #24]
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f042 0208 	orr.w	r2, r2, #8
 8009ab4:	619a      	str	r2, [r3, #24]
}
 8009ab6:	bf00      	nop
 8009ab8:	3798      	adds	r7, #152	@ 0x98
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd80      	pop	{r7, pc}
 8009abe:	bf00      	nop
 8009ac0:	0800950b 	.word	0x0800950b

08009ac4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b0a8      	sub	sp, #160	@ 0xa0
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009ad2:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	69db      	ldr	r3, [r3, #28]
 8009adc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	689b      	ldr	r3, [r3, #8]
 8009af0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009afa:	2b22      	cmp	r3, #34	@ 0x22
 8009afc:	f040 8153 	bne.w	8009da6 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009b06:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009b0a:	e0fa      	b.n	8009d02 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b12:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b1a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8009b1e:	f8b7 208c 	ldrh.w	r2, [r7, #140]	@ 0x8c
 8009b22:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 8009b26:	4013      	ands	r3, r2
 8009b28:	b29a      	uxth	r2, r3
 8009b2a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009b2e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b34:	1c9a      	adds	r2, r3, #2
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009b40:	b29b      	uxth	r3, r3
 8009b42:	3b01      	subs	r3, #1
 8009b44:	b29a      	uxth	r2, r3
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	69db      	ldr	r3, [r3, #28]
 8009b52:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009b56:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009b5a:	f003 0307 	and.w	r3, r3, #7
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d053      	beq.n	8009c0a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009b62:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009b66:	f003 0301 	and.w	r3, r3, #1
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d011      	beq.n	8009b92 <UART_RxISR_16BIT_FIFOEN+0xce>
 8009b6e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009b72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d00b      	beq.n	8009b92 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	2201      	movs	r2, #1
 8009b80:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009b88:	f043 0201 	orr.w	r2, r3, #1
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009b92:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009b96:	f003 0302 	and.w	r3, r3, #2
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d011      	beq.n	8009bc2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009b9e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009ba2:	f003 0301 	and.w	r3, r3, #1
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d00b      	beq.n	8009bc2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	2202      	movs	r2, #2
 8009bb0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009bb8:	f043 0204 	orr.w	r2, r3, #4
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009bc2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009bc6:	f003 0304 	and.w	r3, r3, #4
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d011      	beq.n	8009bf2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009bce:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009bd2:	f003 0301 	and.w	r3, r3, #1
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d00b      	beq.n	8009bf2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	2204      	movs	r2, #4
 8009be0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009be8:	f043 0202 	orr.w	r2, r3, #2
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d006      	beq.n	8009c0a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	f7fe fd9e 	bl	800873e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	2200      	movs	r2, #0
 8009c06:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009c10:	b29b      	uxth	r3, r3
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d175      	bne.n	8009d02 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c1c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009c1e:	e853 3f00 	ldrex	r3, [r3]
 8009c22:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009c24:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009c26:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009c2a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	461a      	mov	r2, r3
 8009c34:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009c38:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009c3a:	66ba      	str	r2, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c3c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009c3e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009c40:	e841 2300 	strex	r3, r2, [r1]
 8009c44:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009c46:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d1e4      	bne.n	8009c16 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	3308      	adds	r3, #8
 8009c52:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c56:	e853 3f00 	ldrex	r3, [r3]
 8009c5a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009c5c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009c5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009c62:	f023 0301 	bic.w	r3, r3, #1
 8009c66:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	3308      	adds	r3, #8
 8009c70:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009c74:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009c76:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c78:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009c7a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009c7c:	e841 2300 	strex	r3, r2, [r1]
 8009c80:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009c82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d1e1      	bne.n	8009c4c <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2220      	movs	r2, #32
 8009c8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2200      	movs	r2, #0
 8009c94:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009c9a:	2b01      	cmp	r3, #1
 8009c9c:	d12e      	bne.n	8009cfc <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009caa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cac:	e853 3f00 	ldrex	r3, [r3]
 8009cb0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009cb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cb4:	f023 0310 	bic.w	r3, r3, #16
 8009cb8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	461a      	mov	r2, r3
 8009cc0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009cc2:	647b      	str	r3, [r7, #68]	@ 0x44
 8009cc4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cc6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009cc8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009cca:	e841 2300 	strex	r3, r2, [r1]
 8009cce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009cd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d1e6      	bne.n	8009ca4 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	69db      	ldr	r3, [r3, #28]
 8009cdc:	f003 0310 	and.w	r3, r3, #16
 8009ce0:	2b10      	cmp	r3, #16
 8009ce2:	d103      	bne.n	8009cec <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	2210      	movs	r2, #16
 8009cea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009cf2:	4619      	mov	r1, r3
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	f7fe fd2b 	bl	8008750 <HAL_UARTEx_RxEventCallback>
 8009cfa:	e002      	b.n	8009d02 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009cfc:	6878      	ldr	r0, [r7, #4]
 8009cfe:	f7f9 f8ff 	bl	8002f00 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009d02:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d006      	beq.n	8009d18 <UART_RxISR_16BIT_FIFOEN+0x254>
 8009d0a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009d0e:	f003 0320 	and.w	r3, r3, #32
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	f47f aefa 	bne.w	8009b0c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009d1e:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009d22:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d045      	beq.n	8009db6 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009d30:	f8b7 207a 	ldrh.w	r2, [r7, #122]	@ 0x7a
 8009d34:	429a      	cmp	r2, r3
 8009d36:	d23e      	bcs.n	8009db6 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	3308      	adds	r3, #8
 8009d3e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d42:	e853 3f00 	ldrex	r3, [r3]
 8009d46:	623b      	str	r3, [r7, #32]
   return(result);
 8009d48:	6a3b      	ldr	r3, [r7, #32]
 8009d4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009d4e:	677b      	str	r3, [r7, #116]	@ 0x74
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	3308      	adds	r3, #8
 8009d56:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8009d58:	633a      	str	r2, [r7, #48]	@ 0x30
 8009d5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d5c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009d5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d60:	e841 2300 	strex	r3, r2, [r1]
 8009d64:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009d66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d1e5      	bne.n	8009d38 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	4a14      	ldr	r2, [pc, #80]	@ (8009dc0 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8009d70:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d78:	693b      	ldr	r3, [r7, #16]
 8009d7a:	e853 3f00 	ldrex	r3, [r3]
 8009d7e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	f043 0320 	orr.w	r3, r3, #32
 8009d86:	673b      	str	r3, [r7, #112]	@ 0x70
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	461a      	mov	r2, r3
 8009d8e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009d90:	61fb      	str	r3, [r7, #28]
 8009d92:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d94:	69b9      	ldr	r1, [r7, #24]
 8009d96:	69fa      	ldr	r2, [r7, #28]
 8009d98:	e841 2300 	strex	r3, r2, [r1]
 8009d9c:	617b      	str	r3, [r7, #20]
   return(result);
 8009d9e:	697b      	ldr	r3, [r7, #20]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d1e6      	bne.n	8009d72 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009da4:	e007      	b.n	8009db6 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	699a      	ldr	r2, [r3, #24]
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	f042 0208 	orr.w	r2, r2, #8
 8009db4:	619a      	str	r2, [r3, #24]
}
 8009db6:	bf00      	nop
 8009db8:	37a0      	adds	r7, #160	@ 0xa0
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	bd80      	pop	{r7, pc}
 8009dbe:	bf00      	nop
 8009dc0:	0800966b 	.word	0x0800966b

08009dc4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009dc4:	b480      	push	{r7}
 8009dc6:	b083      	sub	sp, #12
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009dcc:	bf00      	nop
 8009dce:	370c      	adds	r7, #12
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	bc80      	pop	{r7}
 8009dd4:	4770      	bx	lr

08009dd6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009dd6:	b480      	push	{r7}
 8009dd8:	b083      	sub	sp, #12
 8009dda:	af00      	add	r7, sp, #0
 8009ddc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009dde:	bf00      	nop
 8009de0:	370c      	adds	r7, #12
 8009de2:	46bd      	mov	sp, r7
 8009de4:	bc80      	pop	{r7}
 8009de6:	4770      	bx	lr

08009de8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009de8:	b480      	push	{r7}
 8009dea:	b083      	sub	sp, #12
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009df0:	bf00      	nop
 8009df2:	370c      	adds	r7, #12
 8009df4:	46bd      	mov	sp, r7
 8009df6:	bc80      	pop	{r7}
 8009df8:	4770      	bx	lr

08009dfa <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8009dfa:	b580      	push	{r7, lr}
 8009dfc:	b088      	sub	sp, #32
 8009dfe:	af02      	add	r7, sp, #8
 8009e00:	60f8      	str	r0, [r7, #12]
 8009e02:	1d3b      	adds	r3, r7, #4
 8009e04:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 8009e08:	2300      	movs	r3, #0
 8009e0a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009e12:	2b01      	cmp	r3, #1
 8009e14:	d101      	bne.n	8009e1a <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 8009e16:	2302      	movs	r3, #2
 8009e18:	e046      	b.n	8009ea8 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	2201      	movs	r2, #1
 8009e1e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	2224      	movs	r2, #36	@ 0x24
 8009e26:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	681a      	ldr	r2, [r3, #0]
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	f022 0201 	bic.w	r2, r2, #1
 8009e38:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	689b      	ldr	r3, [r3, #8]
 8009e40:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009e44:	687a      	ldr	r2, [r7, #4]
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	430a      	orrs	r2, r1
 8009e4c:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d105      	bne.n	8009e60 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8009e54:	1d3b      	adds	r3, r7, #4
 8009e56:	e893 0006 	ldmia.w	r3, {r1, r2}
 8009e5a:	68f8      	ldr	r0, [r7, #12]
 8009e5c:	f000 f949 	bl	800a0f2 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	681a      	ldr	r2, [r3, #0]
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	f042 0201 	orr.w	r2, r2, #1
 8009e6e:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009e70:	f7f8 f9a8 	bl	80021c4 <HAL_GetTick>
 8009e74:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009e76:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009e7a:	9300      	str	r3, [sp, #0]
 8009e7c:	693b      	ldr	r3, [r7, #16]
 8009e7e:	2200      	movs	r2, #0
 8009e80:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009e84:	68f8      	ldr	r0, [r7, #12]
 8009e86:	f7fe ffcf 	bl	8008e28 <UART_WaitOnFlagUntilTimeout>
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d002      	beq.n	8009e96 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 8009e90:	2303      	movs	r3, #3
 8009e92:	75fb      	strb	r3, [r7, #23]
 8009e94:	e003      	b.n	8009e9e <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	2220      	movs	r2, #32
 8009e9a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return status;
 8009ea6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	3718      	adds	r7, #24
 8009eac:	46bd      	mov	sp, r7
 8009eae:	bd80      	pop	{r7, pc}

08009eb0 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8009eb0:	b480      	push	{r7}
 8009eb2:	b089      	sub	sp, #36	@ 0x24
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009ebe:	2b01      	cmp	r3, #1
 8009ec0:	d101      	bne.n	8009ec6 <HAL_UARTEx_EnableStopMode+0x16>
 8009ec2:	2302      	movs	r3, #2
 8009ec4:	e021      	b.n	8009f0a <HAL_UARTEx_EnableStopMode+0x5a>
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2201      	movs	r2, #1
 8009eca:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	e853 3f00 	ldrex	r3, [r3]
 8009eda:	60bb      	str	r3, [r7, #8]
   return(result);
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	f043 0302 	orr.w	r3, r3, #2
 8009ee2:	61fb      	str	r3, [r7, #28]
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	461a      	mov	r2, r3
 8009eea:	69fb      	ldr	r3, [r7, #28]
 8009eec:	61bb      	str	r3, [r7, #24]
 8009eee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ef0:	6979      	ldr	r1, [r7, #20]
 8009ef2:	69ba      	ldr	r2, [r7, #24]
 8009ef4:	e841 2300 	strex	r3, r2, [r1]
 8009ef8:	613b      	str	r3, [r7, #16]
   return(result);
 8009efa:	693b      	ldr	r3, [r7, #16]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d1e6      	bne.n	8009ece <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2200      	movs	r2, #0
 8009f04:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8009f08:	2300      	movs	r3, #0
}
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	3724      	adds	r7, #36	@ 0x24
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	bc80      	pop	{r7}
 8009f12:	4770      	bx	lr

08009f14 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b084      	sub	sp, #16
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009f22:	2b01      	cmp	r3, #1
 8009f24:	d101      	bne.n	8009f2a <HAL_UARTEx_EnableFifoMode+0x16>
 8009f26:	2302      	movs	r3, #2
 8009f28:	e02b      	b.n	8009f82 <HAL_UARTEx_EnableFifoMode+0x6e>
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2201      	movs	r2, #1
 8009f2e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2224      	movs	r2, #36	@ 0x24
 8009f36:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	681a      	ldr	r2, [r3, #0]
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f022 0201 	bic.w	r2, r2, #1
 8009f50:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009f58:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8009f60:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	68fa      	ldr	r2, [r7, #12]
 8009f68:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009f6a:	6878      	ldr	r0, [r7, #4]
 8009f6c:	f000 f8e4 	bl	800a138 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2220      	movs	r2, #32
 8009f74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8009f80:	2300      	movs	r3, #0
}
 8009f82:	4618      	mov	r0, r3
 8009f84:	3710      	adds	r7, #16
 8009f86:	46bd      	mov	sp, r7
 8009f88:	bd80      	pop	{r7, pc}

08009f8a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009f8a:	b480      	push	{r7}
 8009f8c:	b085      	sub	sp, #20
 8009f8e:	af00      	add	r7, sp, #0
 8009f90:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009f98:	2b01      	cmp	r3, #1
 8009f9a:	d101      	bne.n	8009fa0 <HAL_UARTEx_DisableFifoMode+0x16>
 8009f9c:	2302      	movs	r3, #2
 8009f9e:	e027      	b.n	8009ff0 <HAL_UARTEx_DisableFifoMode+0x66>
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2201      	movs	r2, #1
 8009fa4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2224      	movs	r2, #36	@ 0x24
 8009fac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	681a      	ldr	r2, [r3, #0]
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	f022 0201 	bic.w	r2, r2, #1
 8009fc6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009fce:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	68fa      	ldr	r2, [r7, #12]
 8009fdc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2220      	movs	r2, #32
 8009fe2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2200      	movs	r2, #0
 8009fea:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8009fee:	2300      	movs	r3, #0
}
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	3714      	adds	r7, #20
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	bc80      	pop	{r7}
 8009ff8:	4770      	bx	lr

08009ffa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009ffa:	b580      	push	{r7, lr}
 8009ffc:	b084      	sub	sp, #16
 8009ffe:	af00      	add	r7, sp, #0
 800a000:	6078      	str	r0, [r7, #4]
 800a002:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a00a:	2b01      	cmp	r3, #1
 800a00c:	d101      	bne.n	800a012 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a00e:	2302      	movs	r3, #2
 800a010:	e02d      	b.n	800a06e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2201      	movs	r2, #1
 800a016:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	2224      	movs	r2, #36	@ 0x24
 800a01e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	681a      	ldr	r2, [r3, #0]
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	f022 0201 	bic.w	r2, r2, #1
 800a038:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	689b      	ldr	r3, [r3, #8]
 800a040:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	683a      	ldr	r2, [r7, #0]
 800a04a:	430a      	orrs	r2, r1
 800a04c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a04e:	6878      	ldr	r0, [r7, #4]
 800a050:	f000 f872 	bl	800a138 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	68fa      	ldr	r2, [r7, #12]
 800a05a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2220      	movs	r2, #32
 800a060:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2200      	movs	r2, #0
 800a068:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800a06c:	2300      	movs	r3, #0
}
 800a06e:	4618      	mov	r0, r3
 800a070:	3710      	adds	r7, #16
 800a072:	46bd      	mov	sp, r7
 800a074:	bd80      	pop	{r7, pc}

0800a076 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a076:	b580      	push	{r7, lr}
 800a078:	b084      	sub	sp, #16
 800a07a:	af00      	add	r7, sp, #0
 800a07c:	6078      	str	r0, [r7, #4]
 800a07e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a086:	2b01      	cmp	r3, #1
 800a088:	d101      	bne.n	800a08e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a08a:	2302      	movs	r3, #2
 800a08c:	e02d      	b.n	800a0ea <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	2201      	movs	r2, #1
 800a092:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	2224      	movs	r2, #36	@ 0x24
 800a09a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	681a      	ldr	r2, [r3, #0]
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	f022 0201 	bic.w	r2, r2, #1
 800a0b4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	689b      	ldr	r3, [r3, #8]
 800a0bc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	683a      	ldr	r2, [r7, #0]
 800a0c6:	430a      	orrs	r2, r1
 800a0c8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a0ca:	6878      	ldr	r0, [r7, #4]
 800a0cc:	f000 f834 	bl	800a138 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	68fa      	ldr	r2, [r7, #12]
 800a0d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2220      	movs	r2, #32
 800a0dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800a0e8:	2300      	movs	r3, #0
}
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	3710      	adds	r7, #16
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	bd80      	pop	{r7, pc}

0800a0f2 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800a0f2:	b480      	push	{r7}
 800a0f4:	b085      	sub	sp, #20
 800a0f6:	af00      	add	r7, sp, #0
 800a0f8:	60f8      	str	r0, [r7, #12]
 800a0fa:	1d3b      	adds	r3, r7, #4
 800a0fc:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	685b      	ldr	r3, [r3, #4]
 800a106:	f023 0210 	bic.w	r2, r3, #16
 800a10a:	893b      	ldrh	r3, [r7, #8]
 800a10c:	4619      	mov	r1, r3
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	430a      	orrs	r2, r1
 800a114:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	685b      	ldr	r3, [r3, #4]
 800a11c:	f023 417f 	bic.w	r1, r3, #4278190080	@ 0xff000000
 800a120:	7abb      	ldrb	r3, [r7, #10]
 800a122:	061a      	lsls	r2, r3, #24
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	430a      	orrs	r2, r1
 800a12a:	605a      	str	r2, [r3, #4]
}
 800a12c:	bf00      	nop
 800a12e:	3714      	adds	r7, #20
 800a130:	46bd      	mov	sp, r7
 800a132:	bc80      	pop	{r7}
 800a134:	4770      	bx	lr
	...

0800a138 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a138:	b480      	push	{r7}
 800a13a:	b085      	sub	sp, #20
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a144:	2b00      	cmp	r3, #0
 800a146:	d108      	bne.n	800a15a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2201      	movs	r2, #1
 800a14c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2201      	movs	r2, #1
 800a154:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a158:	e031      	b.n	800a1be <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a15a:	2308      	movs	r3, #8
 800a15c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a15e:	2308      	movs	r3, #8
 800a160:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	689b      	ldr	r3, [r3, #8]
 800a168:	0e5b      	lsrs	r3, r3, #25
 800a16a:	b2db      	uxtb	r3, r3
 800a16c:	f003 0307 	and.w	r3, r3, #7
 800a170:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	689b      	ldr	r3, [r3, #8]
 800a178:	0f5b      	lsrs	r3, r3, #29
 800a17a:	b2db      	uxtb	r3, r3
 800a17c:	f003 0307 	and.w	r3, r3, #7
 800a180:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a182:	7bbb      	ldrb	r3, [r7, #14]
 800a184:	7b3a      	ldrb	r2, [r7, #12]
 800a186:	4910      	ldr	r1, [pc, #64]	@ (800a1c8 <UARTEx_SetNbDataToProcess+0x90>)
 800a188:	5c8a      	ldrb	r2, [r1, r2]
 800a18a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a18e:	7b3a      	ldrb	r2, [r7, #12]
 800a190:	490e      	ldr	r1, [pc, #56]	@ (800a1cc <UARTEx_SetNbDataToProcess+0x94>)
 800a192:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a194:	fb93 f3f2 	sdiv	r3, r3, r2
 800a198:	b29a      	uxth	r2, r3
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a1a0:	7bfb      	ldrb	r3, [r7, #15]
 800a1a2:	7b7a      	ldrb	r2, [r7, #13]
 800a1a4:	4908      	ldr	r1, [pc, #32]	@ (800a1c8 <UARTEx_SetNbDataToProcess+0x90>)
 800a1a6:	5c8a      	ldrb	r2, [r1, r2]
 800a1a8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a1ac:	7b7a      	ldrb	r2, [r7, #13]
 800a1ae:	4907      	ldr	r1, [pc, #28]	@ (800a1cc <UARTEx_SetNbDataToProcess+0x94>)
 800a1b0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a1b2:	fb93 f3f2 	sdiv	r3, r3, r2
 800a1b6:	b29a      	uxth	r2, r3
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a1be:	bf00      	nop
 800a1c0:	3714      	adds	r7, #20
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	bc80      	pop	{r7}
 800a1c6:	4770      	bx	lr
 800a1c8:	0801f084 	.word	0x0801f084
 800a1cc:	0801f08c 	.word	0x0801f08c

0800a1d0 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 800a1d4:	f7f7 fe96 	bl	8001f04 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 800a1d8:	f000 f820 	bl	800a21c <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 800a1dc:	bf00      	nop
 800a1de:	bd80      	pop	{r7, pc}

0800a1e0 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800a1e4:	f04f 30ff 	mov.w	r0, #4294967295
 800a1e8:	f010 fdae 	bl	801ad48 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 800a1ec:	bf00      	nop
 800a1ee:	bd80      	pop	{r7, pc}

0800a1f0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800a1f0:	b480      	push	{r7}
 800a1f2:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800a1f4:	f3bf 8f4f 	dsb	sy
}
 800a1f8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800a1fa:	4b06      	ldr	r3, [pc, #24]	@ (800a214 <__NVIC_SystemReset+0x24>)
 800a1fc:	68db      	ldr	r3, [r3, #12]
 800a1fe:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800a202:	4904      	ldr	r1, [pc, #16]	@ (800a214 <__NVIC_SystemReset+0x24>)
 800a204:	4b04      	ldr	r3, [pc, #16]	@ (800a218 <__NVIC_SystemReset+0x28>)
 800a206:	4313      	orrs	r3, r2
 800a208:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800a20a:	f3bf 8f4f 	dsb	sy
}
 800a20e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800a210:	bf00      	nop
 800a212:	e7fd      	b.n	800a210 <__NVIC_SystemReset+0x20>
 800a214:	e000ed00 	.word	0xe000ed00
 800a218:	05fa0004 	.word	0x05fa0004

0800a21c <LoRaWAN_Init>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b086      	sub	sp, #24
 800a220:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN LoRaWAN_Init_LV */
  uint32_t feature_version = 0UL;
 800a222:	2300      	movs	r3, #0
 800a224:	607b      	str	r3, [r7, #4]
  /* USER CODE END LoRaWAN_Init_LV */

  /* USER CODE BEGIN LoRaWAN_Init_1 */

  /* Get LoRaWAN APP version*/
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 800a226:	2300      	movs	r3, #0
 800a228:	9302      	str	r3, [sp, #8]
 800a22a:	2302      	movs	r3, #2
 800a22c:	9301      	str	r3, [sp, #4]
 800a22e:	2301      	movs	r3, #1
 800a230:	9300      	str	r3, [sp, #0]
 800a232:	4b5a      	ldr	r3, [pc, #360]	@ (800a39c <LoRaWAN_Init+0x180>)
 800a234:	2200      	movs	r2, #0
 800a236:	2100      	movs	r1, #0
 800a238:	2002      	movs	r0, #2
 800a23a:	f011 f9d1 	bl	801b5e0 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(APP_VERSION_MAIN),
          (uint8_t)(APP_VERSION_SUB1),
          (uint8_t)(APP_VERSION_SUB2));

  /* Get MW LoRaWAN info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION:  V%X.%X.%X\r\n",
 800a23e:	2300      	movs	r3, #0
 800a240:	9302      	str	r3, [sp, #8]
 800a242:	2304      	movs	r3, #4
 800a244:	9301      	str	r3, [sp, #4]
 800a246:	2302      	movs	r3, #2
 800a248:	9300      	str	r3, [sp, #0]
 800a24a:	4b55      	ldr	r3, [pc, #340]	@ (800a3a0 <LoRaWAN_Init+0x184>)
 800a24c:	2200      	movs	r2, #0
 800a24e:	2100      	movs	r1, #0
 800a250:	2002      	movs	r0, #2
 800a252:	f011 f9c5 	bl	801b5e0 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(LORAWAN_VERSION_MAIN),
          (uint8_t)(LORAWAN_VERSION_SUB1),
          (uint8_t)(LORAWAN_VERSION_SUB2));

  /* Get MW SubGhz_Phy info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:    V%X.%X.%X\r\n",
 800a256:	2300      	movs	r3, #0
 800a258:	9302      	str	r3, [sp, #8]
 800a25a:	2302      	movs	r3, #2
 800a25c:	9301      	str	r3, [sp, #4]
 800a25e:	2301      	movs	r3, #1
 800a260:	9300      	str	r3, [sp, #0]
 800a262:	4b50      	ldr	r3, [pc, #320]	@ (800a3a4 <LoRaWAN_Init+0x188>)
 800a264:	2200      	movs	r2, #0
 800a266:	2100      	movs	r1, #0
 800a268:	2002      	movs	r0, #2
 800a26a:	f011 f9b9 	bl	801b5e0 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(SUBGHZ_PHY_VERSION_MAIN),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB1),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB2));

  /* Get LoRaWAN Link Layer info */
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 800a26e:	1d3b      	adds	r3, r7, #4
 800a270:	4619      	mov	r1, r3
 800a272:	2000      	movs	r0, #0
 800a274:	f002 ffb6 	bl	800d1e4 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "L2_SPEC_VERSION:     V%X.%X.%X\r\n",
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	0e1b      	lsrs	r3, r3, #24
 800a27c:	b2db      	uxtb	r3, r3
 800a27e:	461a      	mov	r2, r3
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	0c1b      	lsrs	r3, r3, #16
 800a284:	b2db      	uxtb	r3, r3
 800a286:	4619      	mov	r1, r3
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	0a1b      	lsrs	r3, r3, #8
 800a28c:	b2db      	uxtb	r3, r3
 800a28e:	9302      	str	r3, [sp, #8]
 800a290:	9101      	str	r1, [sp, #4]
 800a292:	9200      	str	r2, [sp, #0]
 800a294:	4b44      	ldr	r3, [pc, #272]	@ (800a3a8 <LoRaWAN_Init+0x18c>)
 800a296:	2200      	movs	r2, #0
 800a298:	2100      	movs	r1, #0
 800a29a:	2002      	movs	r0, #2
 800a29c:	f011 f9a0 	bl	801b5e0 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8));

  /* Get LoRaWAN Regional Parameters info */
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 800a2a0:	1d3b      	adds	r3, r7, #4
 800a2a2:	4619      	mov	r1, r3
 800a2a4:	2001      	movs	r0, #1
 800a2a6:	f002 ff9d 	bl	800d1e4 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "RP_SPEC_VERSION:     V%X-%X.%X.%X\r\n",
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	0e1b      	lsrs	r3, r3, #24
 800a2ae:	b2db      	uxtb	r3, r3
 800a2b0:	461a      	mov	r2, r3
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	0c1b      	lsrs	r3, r3, #16
 800a2b6:	b2db      	uxtb	r3, r3
 800a2b8:	4619      	mov	r1, r3
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	0a1b      	lsrs	r3, r3, #8
 800a2be:	b2db      	uxtb	r3, r3
 800a2c0:	6878      	ldr	r0, [r7, #4]
 800a2c2:	b2c0      	uxtb	r0, r0
 800a2c4:	9003      	str	r0, [sp, #12]
 800a2c6:	9302      	str	r3, [sp, #8]
 800a2c8:	9101      	str	r1, [sp, #4]
 800a2ca:	9200      	str	r2, [sp, #0]
 800a2cc:	4b37      	ldr	r3, [pc, #220]	@ (800a3ac <LoRaWAN_Init+0x190>)
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	2100      	movs	r1, #0
 800a2d2:	2002      	movs	r0, #2
 800a2d4:	f011 f984 	bl	801b5e0 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8),
          (uint8_t)(feature_version));

  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 800a2d8:	2300      	movs	r3, #0
 800a2da:	9300      	str	r3, [sp, #0]
 800a2dc:	4b34      	ldr	r3, [pc, #208]	@ (800a3b0 <LoRaWAN_Init+0x194>)
 800a2de:	2200      	movs	r2, #0
 800a2e0:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800a2e4:	4833      	ldr	r0, [pc, #204]	@ (800a3b4 <LoRaWAN_Init+0x198>)
 800a2e6:	f010 fecd 	bl	801b084 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	9300      	str	r3, [sp, #0]
 800a2ee:	4b32      	ldr	r3, [pc, #200]	@ (800a3b8 <LoRaWAN_Init+0x19c>)
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800a2f6:	4831      	ldr	r0, [pc, #196]	@ (800a3bc <LoRaWAN_Init+0x1a0>)
 800a2f8:	f010 fec4 	bl	801b084 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	9300      	str	r3, [sp, #0]
 800a300:	4b2f      	ldr	r3, [pc, #188]	@ (800a3c0 <LoRaWAN_Init+0x1a4>)
 800a302:	2201      	movs	r2, #1
 800a304:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800a308:	482e      	ldr	r0, [pc, #184]	@ (800a3c4 <LoRaWAN_Init+0x1a8>)
 800a30a:	f010 febb 	bl	801b084 <UTIL_TIMER_Create>

  /* USER CODE END LoRaWAN_Init_1 */

  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 800a30e:	2300      	movs	r3, #0
 800a310:	9300      	str	r3, [sp, #0]
 800a312:	4b2d      	ldr	r3, [pc, #180]	@ (800a3c8 <LoRaWAN_Init+0x1ac>)
 800a314:	2200      	movs	r2, #0
 800a316:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800a31a:	482c      	ldr	r0, [pc, #176]	@ (800a3cc <LoRaWAN_Init+0x1b0>)
 800a31c:	f010 feb2 	bl	801b084 <UTIL_TIMER_Create>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 800a320:	4a2b      	ldr	r2, [pc, #172]	@ (800a3d0 <LoRaWAN_Init+0x1b4>)
 800a322:	2100      	movs	r1, #0
 800a324:	2001      	movs	r0, #1
 800a326:	f010 fe0b 	bl	801af40 <UTIL_SEQ_RegTask>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 800a32a:	4a2a      	ldr	r2, [pc, #168]	@ (800a3d4 <LoRaWAN_Init+0x1b8>)
 800a32c:	2100      	movs	r1, #0
 800a32e:	2002      	movs	r0, #2
 800a330:	f010 fe06 	bl	801af40 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 800a334:	4a28      	ldr	r2, [pc, #160]	@ (800a3d8 <LoRaWAN_Init+0x1bc>)
 800a336:	2100      	movs	r1, #0
 800a338:	2004      	movs	r0, #4
 800a33a:	f010 fe01 	bl	801af40 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 800a33e:	4a27      	ldr	r2, [pc, #156]	@ (800a3dc <LoRaWAN_Init+0x1c0>)
 800a340:	2100      	movs	r1, #0
 800a342:	2008      	movs	r0, #8
 800a344:	f010 fdfc 	bl	801af40 <UTIL_SEQ_RegTask>

  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 800a348:	f000 fb76 	bl	800aa38 <LoraInfo_Init>

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 800a34c:	f04f 7181 	mov.w	r1, #16908288	@ 0x1020000
 800a350:	4823      	ldr	r0, [pc, #140]	@ (800a3e0 <LoRaWAN_Init+0x1c4>)
 800a352:	f002 f82d 	bl	800c3b0 <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 800a356:	4823      	ldr	r0, [pc, #140]	@ (800a3e4 <LoRaWAN_Init+0x1c8>)
 800a358:	f002 f888 	bl	800c46c <LmHandlerConfigure>

  /* USER CODE BEGIN LoRaWAN_Init_2 */
  UTIL_TIMER_Start(&JoinLedTimer);
 800a35c:	4819      	ldr	r0, [pc, #100]	@ (800a3c4 <LoRaWAN_Init+0x1a8>)
 800a35e:	f010 fec7 	bl	801b0f0 <UTIL_TIMER_Start>

  /* USER CODE END LoRaWAN_Init_2 */

  LmHandlerJoin(ActivationType, ForceRejoin);
 800a362:	4b21      	ldr	r3, [pc, #132]	@ (800a3e8 <LoRaWAN_Init+0x1cc>)
 800a364:	781b      	ldrb	r3, [r3, #0]
 800a366:	4a21      	ldr	r2, [pc, #132]	@ (800a3ec <LoRaWAN_Init+0x1d0>)
 800a368:	7812      	ldrb	r2, [r2, #0]
 800a36a:	4611      	mov	r1, r2
 800a36c:	4618      	mov	r0, r3
 800a36e:	f002 f9f9 	bl	800c764 <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 800a372:	4b1f      	ldr	r3, [pc, #124]	@ (800a3f0 <LoRaWAN_Init+0x1d4>)
 800a374:	781b      	ldrb	r3, [r3, #0]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d10b      	bne.n	800a392 <LoRaWAN_Init+0x176>
  {
    /* send every time timer elapses */
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 800a37a:	4b1e      	ldr	r3, [pc, #120]	@ (800a3f4 <LoRaWAN_Init+0x1d8>)
 800a37c:	6819      	ldr	r1, [r3, #0]
 800a37e:	2300      	movs	r3, #0
 800a380:	9300      	str	r3, [sp, #0]
 800a382:	4b1d      	ldr	r3, [pc, #116]	@ (800a3f8 <LoRaWAN_Init+0x1dc>)
 800a384:	2200      	movs	r2, #0
 800a386:	481d      	ldr	r0, [pc, #116]	@ (800a3fc <LoRaWAN_Init+0x1e0>)
 800a388:	f010 fe7c 	bl	801b084 <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 800a38c:	481b      	ldr	r0, [pc, #108]	@ (800a3fc <LoRaWAN_Init+0x1e0>)
 800a38e:	f010 feaf 	bl	801b0f0 <UTIL_TIMER_Start>
  }

  /* USER CODE BEGIN LoRaWAN_Init_Last */

  /* USER CODE END LoRaWAN_Init_Last */
}
 800a392:	bf00      	nop
 800a394:	3708      	adds	r7, #8
 800a396:	46bd      	mov	sp, r7
 800a398:	bd80      	pop	{r7, pc}
 800a39a:	bf00      	nop
 800a39c:	0801e6f0 	.word	0x0801e6f0
 800a3a0:	0801e714 	.word	0x0801e714
 800a3a4:	0801e738 	.word	0x0801e738
 800a3a8:	0801e75c 	.word	0x0801e75c
 800a3ac:	0801e780 	.word	0x0801e780
 800a3b0:	0800a5a5 	.word	0x0800a5a5
 800a3b4:	200006c8 	.word	0x200006c8
 800a3b8:	0800a5b7 	.word	0x0800a5b7
 800a3bc:	200006e0 	.word	0x200006e0
 800a3c0:	0800a5c9 	.word	0x0800a5c9
 800a3c4:	200006f8 	.word	0x200006f8
 800a3c8:	0800a901 	.word	0x0800a901
 800a3cc:	200005bc 	.word	0x200005bc
 800a3d0:	0800c6f9 	.word	0x0800c6f9
 800a3d4:	0800a525 	.word	0x0800a525
 800a3d8:	0800a925 	.word	0x0800a925
 800a3dc:	0800a881 	.word	0x0800a881
 800a3e0:	2000000c 	.word	0x2000000c
 800a3e4:	20000058 	.word	0x20000058
 800a3e8:	20000008 	.word	0x20000008
 800a3ec:	20000009 	.word	0x20000009
 800a3f0:	200005a0 	.word	0x200005a0
 800a3f4:	2000006c 	.word	0x2000006c
 800a3f8:	0800a581 	.word	0x0800a581
 800a3fc:	200005a4 	.word	0x200005a4

0800a400 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN PB_Callbacks */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b082      	sub	sp, #8
 800a404:	af00      	add	r7, sp, #0
 800a406:	4603      	mov	r3, r0
 800a408:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 800a40a:	88fb      	ldrh	r3, [r7, #6]
 800a40c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a410:	d104      	bne.n	800a41c <HAL_GPIO_EXTI_Callback+0x1c>
  {
    case  BUT1_Pin:
    	// XXX: always initialized
      if (EventType == TX_ON_EVENT || 1)
      {
        UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800a412:	2100      	movs	r1, #0
 800a414:	2002      	movs	r0, #2
 800a416:	f010 fdb5 	bl	801af84 <UTIL_SEQ_SetTask>
      }
      break;
 800a41a:	e000      	b.n	800a41e <HAL_GPIO_EXTI_Callback+0x1e>
    default:
      break;
 800a41c:	bf00      	nop
  }
}
 800a41e:	bf00      	nop
 800a420:	3708      	adds	r7, #8
 800a422:	46bd      	mov	sp, r7
 800a424:	bd80      	pop	{r7, pc}
	...

0800a428 <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	b086      	sub	sp, #24
 800a42c:	af02      	add	r7, sp, #8
 800a42e:	6078      	str	r0, [r7, #4]
 800a430:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */
  if (params != NULL && appData != NULL && appData->Buffer != NULL && appData->BufferSize > 0)
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d063      	beq.n	800a500 <OnRxData+0xd8>
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d060      	beq.n	800a500 <OnRxData+0xd8>
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	685b      	ldr	r3, [r3, #4]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d05c      	beq.n	800a500 <OnRxData+0xd8>
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	785b      	ldrb	r3, [r3, #1]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d058      	beq.n	800a500 <OnRxData+0xd8>
  {
    uint8_t command = appData->Buffer[0];
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	685b      	ldr	r3, [r3, #4]
 800a452:	781b      	ldrb	r3, [r3, #0]
 800a454:	73fb      	strb	r3, [r7, #15]
    uint8_t duration = appData->Buffer[1];
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	685b      	ldr	r3, [r3, #4]
 800a45a:	785b      	ldrb	r3, [r3, #1]
 800a45c:	73bb      	strb	r3, [r7, #14]


    switch (command)
 800a45e:	7bfb      	ldrb	r3, [r7, #15]
 800a460:	2b03      	cmp	r3, #3
 800a462:	d034      	beq.n	800a4ce <OnRxData+0xa6>
 800a464:	2b03      	cmp	r3, #3
 800a466:	dc42      	bgt.n	800a4ee <OnRxData+0xc6>
 800a468:	2b01      	cmp	r3, #1
 800a46a:	d002      	beq.n	800a472 <OnRxData+0x4a>
 800a46c:	2b02      	cmp	r3, #2
 800a46e:	d010      	beq.n	800a492 <OnRxData+0x6a>
 800a470:	e03d      	b.n	800a4ee <OnRxData+0xc6>
    {
      case 0x01:  // Pump ON
        APP_LOG(TS_ON, VLEVEL_M, "Command 0x01: Pump ON\r\n");
 800a472:	4b25      	ldr	r3, [pc, #148]	@ (800a508 <OnRxData+0xe0>)
 800a474:	2201      	movs	r2, #1
 800a476:	2100      	movs	r1, #0
 800a478:	2002      	movs	r0, #2
 800a47a:	f011 f8b1 	bl	801b5e0 <UTIL_ADV_TRACE_COND_FSend>
        pumpState = STATE_PUMP_ON;
 800a47e:	4b23      	ldr	r3, [pc, #140]	@ (800a50c <OnRxData+0xe4>)
 800a480:	2200      	movs	r2, #0
 800a482:	701a      	strb	r2, [r3, #0]
        PumpStateMachine(pumpState, 0);
 800a484:	4b21      	ldr	r3, [pc, #132]	@ (800a50c <OnRxData+0xe4>)
 800a486:	781b      	ldrb	r3, [r3, #0]
 800a488:	2100      	movs	r1, #0
 800a48a:	4618      	mov	r0, r3
 800a48c:	f7f7 fad6 	bl	8001a3c <PumpStateMachine>
        break;
 800a490:	e036      	b.n	800a500 <OnRxData+0xd8>

      case 0x02:  // Pump AUTO
        APP_LOG(TS_ON, VLEVEL_M, "Command 0x02: Pump AUTO\r\n");
 800a492:	4b1f      	ldr	r3, [pc, #124]	@ (800a510 <OnRxData+0xe8>)
 800a494:	2201      	movs	r2, #1
 800a496:	2100      	movs	r1, #0
 800a498:	2002      	movs	r0, #2
 800a49a:	f011 f8a1 	bl	801b5e0 <UTIL_ADV_TRACE_COND_FSend>
        durationMinutes = duration;
 800a49e:	4a1d      	ldr	r2, [pc, #116]	@ (800a514 <OnRxData+0xec>)
 800a4a0:	7bbb      	ldrb	r3, [r7, #14]
 800a4a2:	7013      	strb	r3, [r2, #0]
        APP_LOG(TS_ON, VLEVEL_M, "Duration: %d minute(s)\r\n", durationMinutes);
 800a4a4:	4b1b      	ldr	r3, [pc, #108]	@ (800a514 <OnRxData+0xec>)
 800a4a6:	781b      	ldrb	r3, [r3, #0]
 800a4a8:	9300      	str	r3, [sp, #0]
 800a4aa:	4b1b      	ldr	r3, [pc, #108]	@ (800a518 <OnRxData+0xf0>)
 800a4ac:	2201      	movs	r2, #1
 800a4ae:	2100      	movs	r1, #0
 800a4b0:	2002      	movs	r0, #2
 800a4b2:	f011 f895 	bl	801b5e0 <UTIL_ADV_TRACE_COND_FSend>
        pumpState = STATE_AUTO;
 800a4b6:	4b15      	ldr	r3, [pc, #84]	@ (800a50c <OnRxData+0xe4>)
 800a4b8:	2201      	movs	r2, #1
 800a4ba:	701a      	strb	r2, [r3, #0]
        PumpStateMachine(pumpState,durationMinutes);
 800a4bc:	4b13      	ldr	r3, [pc, #76]	@ (800a50c <OnRxData+0xe4>)
 800a4be:	781b      	ldrb	r3, [r3, #0]
 800a4c0:	4a14      	ldr	r2, [pc, #80]	@ (800a514 <OnRxData+0xec>)
 800a4c2:	7812      	ldrb	r2, [r2, #0]
 800a4c4:	4611      	mov	r1, r2
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	f7f7 fab8 	bl	8001a3c <PumpStateMachine>
        break;
 800a4cc:	e018      	b.n	800a500 <OnRxData+0xd8>

      case 0x03:  // Pump OFF
        APP_LOG(TS_ON, VLEVEL_M, "Command 0x03: Pump OFF\r\n");
 800a4ce:	4b13      	ldr	r3, [pc, #76]	@ (800a51c <OnRxData+0xf4>)
 800a4d0:	2201      	movs	r2, #1
 800a4d2:	2100      	movs	r1, #0
 800a4d4:	2002      	movs	r0, #2
 800a4d6:	f011 f883 	bl	801b5e0 <UTIL_ADV_TRACE_COND_FSend>
        pumpState = STATE_PUMP_OFF;
 800a4da:	4b0c      	ldr	r3, [pc, #48]	@ (800a50c <OnRxData+0xe4>)
 800a4dc:	2202      	movs	r2, #2
 800a4de:	701a      	strb	r2, [r3, #0]
        PumpStateMachine(pumpState, 0);
 800a4e0:	4b0a      	ldr	r3, [pc, #40]	@ (800a50c <OnRxData+0xe4>)
 800a4e2:	781b      	ldrb	r3, [r3, #0]
 800a4e4:	2100      	movs	r1, #0
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	f7f7 faa8 	bl	8001a3c <PumpStateMachine>
        break;
 800a4ec:	e008      	b.n	800a500 <OnRxData+0xd8>

      default:
        APP_LOG(TS_ON, VLEVEL_M, "Unknown command: 0x%02X\r\n", command);
 800a4ee:	7bfb      	ldrb	r3, [r7, #15]
 800a4f0:	9300      	str	r3, [sp, #0]
 800a4f2:	4b0b      	ldr	r3, [pc, #44]	@ (800a520 <OnRxData+0xf8>)
 800a4f4:	2201      	movs	r2, #1
 800a4f6:	2100      	movs	r1, #0
 800a4f8:	2002      	movs	r0, #2
 800a4fa:	f011 f871 	bl	801b5e0 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800a4fe:	bf00      	nop
    }
  }
  /* USER CODE END OnRxData_1 */
}
 800a500:	bf00      	nop
 800a502:	3710      	adds	r7, #16
 800a504:	46bd      	mov	sp, r7
 800a506:	bd80      	pop	{r7, pc}
 800a508:	0801e7a4 	.word	0x0801e7a4
 800a50c:	20000388 	.word	0x20000388
 800a510:	0801e7bc 	.word	0x0801e7bc
 800a514:	20000389 	.word	0x20000389
 800a518:	0801e7d8 	.word	0x0801e7d8
 800a51c:	0801e7f4 	.word	0x0801e7f4
 800a520:	0801e810 	.word	0x0801e810

0800a524 <SendTxData>:


static void SendTxData(void)
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b082      	sub	sp, #8
 800a528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SendTxData_1 */
  LmHandlerErrorStatus_t status;


  AppData.Port = LORAWAN_USER_APP_PORT;
 800a52a:	4b12      	ldr	r3, [pc, #72]	@ (800a574 <SendTxData+0x50>)
 800a52c:	2202      	movs	r2, #2
 800a52e:	701a      	strb	r2, [r3, #0]
  AppData.BufferSize = 0;
 800a530:	4b10      	ldr	r3, [pc, #64]	@ (800a574 <SendTxData+0x50>)
 800a532:	2200      	movs	r2, #0
 800a534:	705a      	strb	r2, [r3, #1]
  AppData.Buffer = NULL;
 800a536:	4b0f      	ldr	r3, [pc, #60]	@ (800a574 <SendTxData+0x50>)
 800a538:	2200      	movs	r2, #0
 800a53a:	605a      	str	r2, [r3, #4]


  status = LmHandlerSend(&AppData, LORAWAN_DEFAULT_CONFIRMED_MSG_STATE, false);
 800a53c:	2200      	movs	r2, #0
 800a53e:	2100      	movs	r1, #0
 800a540:	480c      	ldr	r0, [pc, #48]	@ (800a574 <SendTxData+0x50>)
 800a542:	f002 f9ad 	bl	800c8a0 <LmHandlerSend>
 800a546:	4603      	mov	r3, r0
 800a548:	71fb      	strb	r3, [r7, #7]

  if (status == LORAMAC_HANDLER_SUCCESS)
 800a54a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d106      	bne.n	800a560 <SendTxData+0x3c>
  {
    APP_LOG(TS_ON, VLEVEL_L, "SEND EMPTY REQUEST SUCCESS\r\n");
 800a552:	4b09      	ldr	r3, [pc, #36]	@ (800a578 <SendTxData+0x54>)
 800a554:	2201      	movs	r2, #1
 800a556:	2100      	movs	r1, #0
 800a558:	2001      	movs	r0, #1
 800a55a:	f011 f841 	bl	801b5e0 <UTIL_ADV_TRACE_COND_FSend>
  else
  {
    APP_LOG(TS_ON, VLEVEL_L, "SEND EMPTY REQUEST FAILED\r\n");
  }
  /* USER CODE END SendTxData_1 */
}
 800a55e:	e005      	b.n	800a56c <SendTxData+0x48>
    APP_LOG(TS_ON, VLEVEL_L, "SEND EMPTY REQUEST FAILED\r\n");
 800a560:	4b06      	ldr	r3, [pc, #24]	@ (800a57c <SendTxData+0x58>)
 800a562:	2201      	movs	r2, #1
 800a564:	2100      	movs	r1, #0
 800a566:	2001      	movs	r0, #1
 800a568:	f011 f83a 	bl	801b5e0 <UTIL_ADV_TRACE_COND_FSend>
}
 800a56c:	bf00      	nop
 800a56e:	3708      	adds	r7, #8
 800a570:	46bd      	mov	sp, r7
 800a572:	bd80      	pop	{r7, pc}
 800a574:	20000070 	.word	0x20000070
 800a578:	0801e82c 	.word	0x0801e82c
 800a57c:	0801e84c 	.word	0x0801e84c

0800a580 <OnTxTimerEvent>:



static void OnTxTimerEvent(void *context)
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b082      	sub	sp, #8
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800a588:	2100      	movs	r1, #0
 800a58a:	2002      	movs	r0, #2
 800a58c:	f010 fcfa 	bl	801af84 <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 800a590:	4803      	ldr	r0, [pc, #12]	@ (800a5a0 <OnTxTimerEvent+0x20>)
 800a592:	f010 fdad 	bl	801b0f0 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 800a596:	bf00      	nop
 800a598:	3708      	adds	r7, #8
 800a59a:	46bd      	mov	sp, r7
 800a59c:	bd80      	pop	{r7, pc}
 800a59e:	bf00      	nop
 800a5a0:	200005a4 	.word	0x200005a4

0800a5a4 <OnTxTimerLedEvent>:

/* USER CODE BEGIN PrFD_LedEvents */
static void OnTxTimerLedEvent(void *context)
{
 800a5a4:	b480      	push	{r7}
 800a5a6:	b083      	sub	sp, #12
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
#if 0	// XXX: No LED available
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
}
 800a5ac:	bf00      	nop
 800a5ae:	370c      	adds	r7, #12
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	bc80      	pop	{r7}
 800a5b4:	4770      	bx	lr

0800a5b6 <OnRxTimerLedEvent>:

static void OnRxTimerLedEvent(void *context)
{
 800a5b6:	b480      	push	{r7}
 800a5b8:	b083      	sub	sp, #12
 800a5ba:	af00      	add	r7, sp, #0
 800a5bc:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
#endif
}
 800a5be:	bf00      	nop
 800a5c0:	370c      	adds	r7, #12
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	bc80      	pop	{r7}
 800a5c6:	4770      	bx	lr

0800a5c8 <OnJoinTimerLedEvent>:

static void OnJoinTimerLedEvent(void *context)
{
 800a5c8:	b480      	push	{r7}
 800a5ca:	b083      	sub	sp, #12
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
#endif
}
 800a5d0:	bf00      	nop
 800a5d2:	370c      	adds	r7, #12
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	bc80      	pop	{r7}
 800a5d8:	4770      	bx	lr
	...

0800a5dc <OnTxData>:

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b086      	sub	sp, #24
 800a5e0:	af04      	add	r7, sp, #16
 800a5e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  if ((params != NULL))
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d041      	beq.n	800a66e <OnTxData+0x92>
  {
    /* Process Tx event only if its a mcps response to prevent some internal events (mlme) */
    if (params->IsMcpsConfirm != 0)
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	781b      	ldrb	r3, [r3, #0]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d03d      	beq.n	800a66e <OnTxData+0x92>
    {
#if 0	// XXX: No LED available
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif
      UTIL_TIMER_Start(&TxLedTimer);
 800a5f2:	4821      	ldr	r0, [pc, #132]	@ (800a678 <OnTxData+0x9c>)
 800a5f4:	f010 fd7c 	bl	801b0f0 <UTIL_TIMER_Start>

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 800a5f8:	4b20      	ldr	r3, [pc, #128]	@ (800a67c <OnTxData+0xa0>)
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	2100      	movs	r1, #0
 800a5fe:	2002      	movs	r0, #2
 800a600:	f010 ffee 	bl	801b5e0 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	68db      	ldr	r3, [r3, #12]
 800a608:	687a      	ldr	r2, [r7, #4]
 800a60a:	7c12      	ldrb	r2, [r2, #16]
 800a60c:	4611      	mov	r1, r2
 800a60e:	687a      	ldr	r2, [r7, #4]
 800a610:	f992 200a 	ldrsb.w	r2, [r2, #10]
 800a614:	4610      	mov	r0, r2
 800a616:	687a      	ldr	r2, [r7, #4]
 800a618:	f992 2018 	ldrsb.w	r2, [r2, #24]
 800a61c:	9203      	str	r2, [sp, #12]
 800a61e:	9002      	str	r0, [sp, #8]
 800a620:	9101      	str	r1, [sp, #4]
 800a622:	9300      	str	r3, [sp, #0]
 800a624:	4b16      	ldr	r3, [pc, #88]	@ (800a680 <OnTxData+0xa4>)
 800a626:	2200      	movs	r2, #0
 800a628:	2100      	movs	r1, #0
 800a62a:	2003      	movs	r0, #3
 800a62c:	f010 ffd8 	bl	801b5e0 <UTIL_ADV_TRACE_COND_FSend>
              params->AppData.Port, params->Datarate, params->TxPower);

      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 800a630:	4b14      	ldr	r3, [pc, #80]	@ (800a684 <OnTxData+0xa8>)
 800a632:	2200      	movs	r2, #0
 800a634:	2100      	movs	r1, #0
 800a636:	2003      	movs	r0, #3
 800a638:	f010 ffd2 	bl	801b5e0 <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	7a1b      	ldrb	r3, [r3, #8]
 800a640:	2b01      	cmp	r3, #1
 800a642:	d10e      	bne.n	800a662 <OnTxData+0x86>
      {
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	7a5b      	ldrb	r3, [r3, #9]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d001      	beq.n	800a650 <OnTxData+0x74>
 800a64c:	4b0e      	ldr	r3, [pc, #56]	@ (800a688 <OnTxData+0xac>)
 800a64e:	e000      	b.n	800a652 <OnTxData+0x76>
 800a650:	4b0e      	ldr	r3, [pc, #56]	@ (800a68c <OnTxData+0xb0>)
 800a652:	9300      	str	r3, [sp, #0]
 800a654:	4b0e      	ldr	r3, [pc, #56]	@ (800a690 <OnTxData+0xb4>)
 800a656:	2200      	movs	r2, #0
 800a658:	2100      	movs	r1, #0
 800a65a:	2003      	movs	r0, #3
 800a65c:	f010 ffc0 	bl	801b5e0 <UTIL_ADV_TRACE_COND_FSend>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
      }
    }
  }
  /* USER CODE END OnTxData_1 */
}
 800a660:	e005      	b.n	800a66e <OnTxData+0x92>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 800a662:	4b0c      	ldr	r3, [pc, #48]	@ (800a694 <OnTxData+0xb8>)
 800a664:	2200      	movs	r2, #0
 800a666:	2100      	movs	r1, #0
 800a668:	2003      	movs	r0, #3
 800a66a:	f010 ffb9 	bl	801b5e0 <UTIL_ADV_TRACE_COND_FSend>
}
 800a66e:	bf00      	nop
 800a670:	3708      	adds	r7, #8
 800a672:	46bd      	mov	sp, r7
 800a674:	bd80      	pop	{r7, pc}
 800a676:	bf00      	nop
 800a678:	200006c8 	.word	0x200006c8
 800a67c:	0801e868 	.word	0x0801e868
 800a680:	0801e89c 	.word	0x0801e89c
 800a684:	0801e8d0 	.word	0x0801e8d0
 800a688:	0801e8e0 	.word	0x0801e8e0
 800a68c:	0801e8e4 	.word	0x0801e8e4
 800a690:	0801e8ec 	.word	0x0801e8ec
 800a694:	0801e900 	.word	0x0801e900

0800a698 <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b082      	sub	sp, #8
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
	if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d108      	bne.n	800a6bc <OnJoinRequest+0x24>
	{
	    APP_LOG(TS_OFF, VLEVEL_M, "Join Success -> Switching to Class C and Halt\r\n");
 800a6aa:	4b06      	ldr	r3, [pc, #24]	@ (800a6c4 <OnJoinRequest+0x2c>)
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	2100      	movs	r1, #0
 800a6b0:	2002      	movs	r0, #2
 800a6b2:	f010 ff95 	bl	801b5e0 <UTIL_ADV_TRACE_COND_FSend>
	    LmHandlerRequestClass(CLASS_C);    // บังคับเปลี่ยนเป็น Class C
 800a6b6:	2002      	movs	r0, #2
 800a6b8:	f002 f9e0 	bl	800ca7c <LmHandlerRequestClass>
	}

  /* USER CODE END OnJoinRequest_1 */
}
 800a6bc:	bf00      	nop
 800a6be:	3708      	adds	r7, #8
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	bd80      	pop	{r7, pc}
 800a6c4:	0801e910 	.word	0x0801e910

0800a6c8 <OnBeaconStatusChange>:

static void OnBeaconStatusChange(LmHandlerBeaconParams_t *params)
{
 800a6c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a6ca:	b093      	sub	sp, #76	@ 0x4c
 800a6cc:	af0c      	add	r7, sp, #48	@ 0x30
 800a6ce:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN OnBeaconStatusChange_1 */
  if (params != NULL)
 800a6d0:	697b      	ldr	r3, [r7, #20]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d056      	beq.n	800a784 <OnBeaconStatusChange+0xbc>
  {
    switch (params->State)
 800a6d6:	697b      	ldr	r3, [r7, #20]
 800a6d8:	785b      	ldrb	r3, [r3, #1]
 800a6da:	2b02      	cmp	r3, #2
 800a6dc:	d008      	beq.n	800a6f0 <OnBeaconStatusChange+0x28>
 800a6de:	2b03      	cmp	r3, #3
 800a6e0:	d049      	beq.n	800a776 <OnBeaconStatusChange+0xae>
    {
      default:
      case LORAMAC_HANDLER_BEACON_LOST:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON LOST\r\n");
 800a6e2:	4b2a      	ldr	r3, [pc, #168]	@ (800a78c <OnBeaconStatusChange+0xc4>)
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	2100      	movs	r1, #0
 800a6e8:	2002      	movs	r0, #2
 800a6ea:	f010 ff79 	bl	801b5e0 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800a6ee:	e049      	b.n	800a784 <OnBeaconStatusChange+0xbc>
      }
      case LORAMAC_HANDLER_BEACON_RX:
      {
        APP_LOG(TS_OFF, VLEVEL_M,
 800a6f0:	697b      	ldr	r3, [r7, #20]
 800a6f2:	7c1b      	ldrb	r3, [r3, #16]
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	697b      	ldr	r3, [r7, #20]
 800a6f8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800a6fc:	461c      	mov	r4, r3
 800a6fe:	697b      	ldr	r3, [r7, #20]
 800a700:	f993 3014 	ldrsb.w	r3, [r3, #20]
 800a704:	461d      	mov	r5, r3
 800a706:	697b      	ldr	r3, [r7, #20]
 800a708:	68db      	ldr	r3, [r3, #12]
 800a70a:	697a      	ldr	r2, [r7, #20]
 800a70c:	6852      	ldr	r2, [r2, #4]
 800a70e:	6979      	ldr	r1, [r7, #20]
 800a710:	7d89      	ldrb	r1, [r1, #22]
 800a712:	460e      	mov	r6, r1
 800a714:	6979      	ldr	r1, [r7, #20]
 800a716:	7dc9      	ldrb	r1, [r1, #23]
 800a718:	6139      	str	r1, [r7, #16]
 800a71a:	6979      	ldr	r1, [r7, #20]
 800a71c:	7e09      	ldrb	r1, [r1, #24]
 800a71e:	60f9      	str	r1, [r7, #12]
 800a720:	6979      	ldr	r1, [r7, #20]
 800a722:	7e49      	ldrb	r1, [r1, #25]
 800a724:	60b9      	str	r1, [r7, #8]
 800a726:	6979      	ldr	r1, [r7, #20]
 800a728:	7e89      	ldrb	r1, [r1, #26]
 800a72a:	6079      	str	r1, [r7, #4]
 800a72c:	6979      	ldr	r1, [r7, #20]
 800a72e:	7ec9      	ldrb	r1, [r1, #27]
 800a730:	6039      	str	r1, [r7, #0]
 800a732:	6979      	ldr	r1, [r7, #20]
 800a734:	7f09      	ldrb	r1, [r1, #28]
 800a736:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a738:	f8d7 c000 	ldr.w	ip, [r7]
 800a73c:	f8cd c028 	str.w	ip, [sp, #40]	@ 0x28
 800a740:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800a744:	f8cd c024 	str.w	ip, [sp, #36]	@ 0x24
 800a748:	f8d7 c008 	ldr.w	ip, [r7, #8]
 800a74c:	f8cd c020 	str.w	ip, [sp, #32]
 800a750:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 800a754:	f8cd c01c 	str.w	ip, [sp, #28]
 800a758:	6939      	ldr	r1, [r7, #16]
 800a75a:	9106      	str	r1, [sp, #24]
 800a75c:	9605      	str	r6, [sp, #20]
 800a75e:	9204      	str	r2, [sp, #16]
 800a760:	9303      	str	r3, [sp, #12]
 800a762:	9502      	str	r5, [sp, #8]
 800a764:	9401      	str	r4, [sp, #4]
 800a766:	9000      	str	r0, [sp, #0]
 800a768:	4b09      	ldr	r3, [pc, #36]	@ (800a790 <OnBeaconStatusChange+0xc8>)
 800a76a:	2200      	movs	r2, #0
 800a76c:	2100      	movs	r1, #0
 800a76e:	2002      	movs	r0, #2
 800a770:	f010 ff36 	bl	801b5e0 <UTIL_ADV_TRACE_COND_FSend>
                params->Info.Datarate, params->Info.Rssi, params->Info.Snr, params->Info.Frequency,
                params->Info.Time.Seconds, params->Info.GwSpecific.InfoDesc,
                params->Info.GwSpecific.Info[0], params->Info.GwSpecific.Info[1],
                params->Info.GwSpecific.Info[2], params->Info.GwSpecific.Info[3],
                params->Info.GwSpecific.Info[4], params->Info.GwSpecific.Info[5]);
        break;
 800a774:	e006      	b.n	800a784 <OnBeaconStatusChange+0xbc>
      }
      case LORAMAC_HANDLER_BEACON_NRX:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
 800a776:	4b07      	ldr	r3, [pc, #28]	@ (800a794 <OnBeaconStatusChange+0xcc>)
 800a778:	2200      	movs	r2, #0
 800a77a:	2100      	movs	r1, #0
 800a77c:	2002      	movs	r0, #2
 800a77e:	f010 ff2f 	bl	801b5e0 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800a782:	bf00      	nop
      }
    }
  }
  /* USER CODE END OnBeaconStatusChange_1 */
}
 800a784:	bf00      	nop
 800a786:	371c      	adds	r7, #28
 800a788:	46bd      	mov	sp, r7
 800a78a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a78c:	0801e940 	.word	0x0801e940
 800a790:	0801e958 	.word	0x0801e958
 800a794:	0801e9cc 	.word	0x0801e9cc

0800a798 <OnClassChange>:

static void OnClassChange(DeviceClass_t deviceClass)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b084      	sub	sp, #16
 800a79c:	af02      	add	r7, sp, #8
 800a79e:	4603      	mov	r3, r0
 800a7a0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnClassChange_1 */
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 800a7a2:	79fb      	ldrb	r3, [r7, #7]
 800a7a4:	4a06      	ldr	r2, [pc, #24]	@ (800a7c0 <OnClassChange+0x28>)
 800a7a6:	5cd3      	ldrb	r3, [r2, r3]
 800a7a8:	9300      	str	r3, [sp, #0]
 800a7aa:	4b06      	ldr	r3, [pc, #24]	@ (800a7c4 <OnClassChange+0x2c>)
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	2100      	movs	r1, #0
 800a7b0:	2002      	movs	r0, #2
 800a7b2:	f010 ff15 	bl	801b5e0 <UTIL_ADV_TRACE_COND_FSend>
  /* USER CODE END OnClassChange_1 */
}
 800a7b6:	bf00      	nop
 800a7b8:	3708      	adds	r7, #8
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	bd80      	pop	{r7, pc}
 800a7be:	bf00      	nop
 800a7c0:	0801ea08 	.word	0x0801ea08
 800a7c4:	0801e9ec 	.word	0x0801e9ec

0800a7c8 <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 800a7cc:	2100      	movs	r1, #0
 800a7ce:	2001      	movs	r0, #1
 800a7d0:	f010 fbd8 	bl	801af84 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 800a7d4:	bf00      	nop
 800a7d6:	bd80      	pop	{r7, pc}

0800a7d8 <OnTxPeriodicityChanged>:

static void OnTxPeriodicityChanged(uint32_t periodicity)
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b082      	sub	sp, #8
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxPeriodicityChanged_1 */

  /* USER CODE END OnTxPeriodicityChanged_1 */
  TxPeriodicity = periodicity;
 800a7e0:	4a0d      	ldr	r2, [pc, #52]	@ (800a818 <OnTxPeriodicityChanged+0x40>)
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	6013      	str	r3, [r2, #0]

  if (TxPeriodicity == 0)
 800a7e6:	4b0c      	ldr	r3, [pc, #48]	@ (800a818 <OnTxPeriodicityChanged+0x40>)
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d103      	bne.n	800a7f6 <OnTxPeriodicityChanged+0x1e>
  {
    /* Revert to application default periodicity */
    TxPeriodicity = APP_TX_DUTYCYCLE;
 800a7ee:	4b0a      	ldr	r3, [pc, #40]	@ (800a818 <OnTxPeriodicityChanged+0x40>)
 800a7f0:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a7f4:	601a      	str	r2, [r3, #0]
  }

  /* Update timer periodicity */
  UTIL_TIMER_Stop(&TxTimer);
 800a7f6:	4809      	ldr	r0, [pc, #36]	@ (800a81c <OnTxPeriodicityChanged+0x44>)
 800a7f8:	f010 fce8 	bl	801b1cc <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 800a7fc:	4b06      	ldr	r3, [pc, #24]	@ (800a818 <OnTxPeriodicityChanged+0x40>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	4619      	mov	r1, r3
 800a802:	4806      	ldr	r0, [pc, #24]	@ (800a81c <OnTxPeriodicityChanged+0x44>)
 800a804:	f010 fd52 	bl	801b2ac <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 800a808:	4804      	ldr	r0, [pc, #16]	@ (800a81c <OnTxPeriodicityChanged+0x44>)
 800a80a:	f010 fc71 	bl	801b0f0 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxPeriodicityChanged_2 */

  /* USER CODE END OnTxPeriodicityChanged_2 */
}
 800a80e:	bf00      	nop
 800a810:	3708      	adds	r7, #8
 800a812:	46bd      	mov	sp, r7
 800a814:	bd80      	pop	{r7, pc}
 800a816:	bf00      	nop
 800a818:	2000006c 	.word	0x2000006c
 800a81c:	200005a4 	.word	0x200005a4

0800a820 <OnTxFrameCtrlChanged>:

static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
 800a820:	b480      	push	{r7}
 800a822:	b083      	sub	sp, #12
 800a824:	af00      	add	r7, sp, #0
 800a826:	4603      	mov	r3, r0
 800a828:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800a82a:	4a04      	ldr	r2, [pc, #16]	@ (800a83c <OnTxFrameCtrlChanged+0x1c>)
 800a82c:	79fb      	ldrb	r3, [r7, #7]
 800a82e:	70d3      	strb	r3, [r2, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 800a830:	bf00      	nop
 800a832:	370c      	adds	r7, #12
 800a834:	46bd      	mov	sp, r7
 800a836:	bc80      	pop	{r7}
 800a838:	4770      	bx	lr
 800a83a:	bf00      	nop
 800a83c:	20000058 	.word	0x20000058

0800a840 <OnPingSlotPeriodicityChanged>:

static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
 800a840:	b480      	push	{r7}
 800a842:	b083      	sub	sp, #12
 800a844:	af00      	add	r7, sp, #0
 800a846:	4603      	mov	r3, r0
 800a848:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800a84a:	4a04      	ldr	r2, [pc, #16]	@ (800a85c <OnPingSlotPeriodicityChanged+0x1c>)
 800a84c:	79fb      	ldrb	r3, [r7, #7]
 800a84e:	7313      	strb	r3, [r2, #12]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 800a850:	bf00      	nop
 800a852:	370c      	adds	r7, #12
 800a854:	46bd      	mov	sp, r7
 800a856:	bc80      	pop	{r7}
 800a858:	4770      	bx	lr
 800a85a:	bf00      	nop
 800a85c:	20000058 	.word	0x20000058

0800a860 <OnSystemReset>:

static void OnSystemReset(void)
{
 800a860:	b580      	push	{r7, lr}
 800a862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSystemReset_1 */

  /* USER CODE END OnSystemReset_1 */
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800a864:	f002 fcef 	bl	800d246 <LmHandlerHalt>
 800a868:	4603      	mov	r3, r0
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d106      	bne.n	800a87c <OnSystemReset+0x1c>
 800a86e:	f001 fffb 	bl	800c868 <LmHandlerJoinStatus>
 800a872:	4603      	mov	r3, r0
 800a874:	2b01      	cmp	r3, #1
 800a876:	d101      	bne.n	800a87c <OnSystemReset+0x1c>
  {
    NVIC_SystemReset();
 800a878:	f7ff fcba 	bl	800a1f0 <__NVIC_SystemReset>
  }
  /* USER CODE BEGIN OnSystemReset_Last */

  /* USER CODE END OnSystemReset_Last */
}
 800a87c:	bf00      	nop
 800a87e:	bd80      	pop	{r7, pc}

0800a880 <StopJoin>:

static void StopJoin(void)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif

  /* USER CODE END StopJoin_1 */

  UTIL_TIMER_Stop(&TxTimer);
 800a884:	4817      	ldr	r0, [pc, #92]	@ (800a8e4 <StopJoin+0x64>)
 800a886:	f010 fca1 	bl	801b1cc <UTIL_TIMER_Stop>

  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 800a88a:	f002 fccf 	bl	800d22c <LmHandlerStop>
 800a88e:	4603      	mov	r3, r0
 800a890:	2b00      	cmp	r3, #0
 800a892:	d006      	beq.n	800a8a2 <StopJoin+0x22>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 800a894:	4b14      	ldr	r3, [pc, #80]	@ (800a8e8 <StopJoin+0x68>)
 800a896:	2200      	movs	r2, #0
 800a898:	2100      	movs	r1, #0
 800a89a:	2002      	movs	r0, #2
 800a89c:	f010 fea0 	bl	801b5e0 <UTIL_ADV_TRACE_COND_FSend>
 800a8a0:	e01a      	b.n	800a8d8 <StopJoin+0x58>
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 800a8a2:	4b12      	ldr	r3, [pc, #72]	@ (800a8ec <StopJoin+0x6c>)
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	2100      	movs	r1, #0
 800a8a8:	2002      	movs	r0, #2
 800a8aa:	f010 fe99 	bl	801b5e0 <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_OTAA;
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to OTAA mode\r\n");
    }
    else
    {
      ActivationType = ACTIVATION_TYPE_ABP;
 800a8ae:	4b10      	ldr	r3, [pc, #64]	@ (800a8f0 <StopJoin+0x70>)
 800a8b0:	2201      	movs	r2, #1
 800a8b2:	701a      	strb	r2, [r3, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 800a8b4:	4b0f      	ldr	r3, [pc, #60]	@ (800a8f4 <StopJoin+0x74>)
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	2100      	movs	r1, #0
 800a8ba:	2002      	movs	r0, #2
 800a8bc:	f010 fe90 	bl	801b5e0 <UTIL_ADV_TRACE_COND_FSend>
    }
    LmHandlerConfigure(&LmHandlerParams);
 800a8c0:	480d      	ldr	r0, [pc, #52]	@ (800a8f8 <StopJoin+0x78>)
 800a8c2:	f001 fdd3 	bl	800c46c <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 800a8c6:	4b0a      	ldr	r3, [pc, #40]	@ (800a8f0 <StopJoin+0x70>)
 800a8c8:	781b      	ldrb	r3, [r3, #0]
 800a8ca:	2101      	movs	r1, #1
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	f001 ff49 	bl	800c764 <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 800a8d2:	4804      	ldr	r0, [pc, #16]	@ (800a8e4 <StopJoin+0x64>)
 800a8d4:	f010 fc0c 	bl	801b0f0 <UTIL_TIMER_Start>
  }
  UTIL_TIMER_Start(&StopJoinTimer);
 800a8d8:	4808      	ldr	r0, [pc, #32]	@ (800a8fc <StopJoin+0x7c>)
 800a8da:	f010 fc09 	bl	801b0f0 <UTIL_TIMER_Start>
  /* USER CODE BEGIN StopJoin_Last */

  /* USER CODE END StopJoin_Last */
}
 800a8de:	bf00      	nop
 800a8e0:	bd80      	pop	{r7, pc}
 800a8e2:	bf00      	nop
 800a8e4:	200005a4 	.word	0x200005a4
 800a8e8:	0801ea0c 	.word	0x0801ea0c
 800a8ec:	0801ea2c 	.word	0x0801ea2c
 800a8f0:	20000008 	.word	0x20000008
 800a8f4:	0801ea40 	.word	0x0801ea40
 800a8f8:	20000058 	.word	0x20000058
 800a8fc:	200005bc 	.word	0x200005bc

0800a900 <OnStopJoinTimerEvent>:

static void OnStopJoinTimerEvent(void *context)
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b082      	sub	sp, #8
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnStopJoinTimerEvent_1 */

  /* USER CODE END OnStopJoinTimerEvent_1 */
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 800a908:	4b05      	ldr	r3, [pc, #20]	@ (800a920 <OnStopJoinTimerEvent+0x20>)
 800a90a:	781b      	ldrb	r3, [r3, #0]
 800a90c:	2b02      	cmp	r3, #2
 800a90e:	d103      	bne.n	800a918 <OnStopJoinTimerEvent+0x18>
  {
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 800a910:	2100      	movs	r1, #0
 800a912:	2008      	movs	r0, #8
 800a914:	f010 fb36 	bl	801af84 <UTIL_SEQ_SetTask>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
  /* USER CODE END OnStopJoinTimerEvent_Last */
}
 800a918:	bf00      	nop
 800a91a:	3708      	adds	r7, #8
 800a91c:	46bd      	mov	sp, r7
 800a91e:	bd80      	pop	{r7, pc}
 800a920:	20000008 	.word	0x20000008

0800a924 <StoreContext>:

static void StoreContext(void)
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b082      	sub	sp, #8
 800a928:	af00      	add	r7, sp, #0
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800a92a:	23ff      	movs	r3, #255	@ 0xff
 800a92c:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN StoreContext_1 */

  /* USER CODE END StoreContext_1 */
  status = LmHandlerNvmDataStore();
 800a92e:	f002 fc97 	bl	800d260 <LmHandlerNvmDataStore>
 800a932:	4603      	mov	r3, r0
 800a934:	71fb      	strb	r3, [r7, #7]

  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 800a936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a93a:	f113 0f08 	cmn.w	r3, #8
 800a93e:	d106      	bne.n	800a94e <StoreContext+0x2a>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 800a940:	4b0a      	ldr	r3, [pc, #40]	@ (800a96c <StoreContext+0x48>)
 800a942:	2200      	movs	r2, #0
 800a944:	2100      	movs	r1, #0
 800a946:	2002      	movs	r0, #2
 800a948:	f010 fe4a 	bl	801b5e0 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
  }
  /* USER CODE BEGIN StoreContext_Last */

  /* USER CODE END StoreContext_Last */
}
 800a94c:	e00a      	b.n	800a964 <StoreContext+0x40>
  else if (status == LORAMAC_HANDLER_ERROR)
 800a94e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a952:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a956:	d105      	bne.n	800a964 <StoreContext+0x40>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 800a958:	4b05      	ldr	r3, [pc, #20]	@ (800a970 <StoreContext+0x4c>)
 800a95a:	2200      	movs	r2, #0
 800a95c:	2100      	movs	r1, #0
 800a95e:	2002      	movs	r0, #2
 800a960:	f010 fe3e 	bl	801b5e0 <UTIL_ADV_TRACE_COND_FSend>
}
 800a964:	bf00      	nop
 800a966:	3708      	adds	r7, #8
 800a968:	46bd      	mov	sp, r7
 800a96a:	bd80      	pop	{r7, pc}
 800a96c:	0801ea60 	.word	0x0801ea60
 800a970:	0801ea78 	.word	0x0801ea78

0800a974 <OnNvmDataChange>:

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 800a974:	b580      	push	{r7, lr}
 800a976:	b082      	sub	sp, #8
 800a978:	af00      	add	r7, sp, #0
 800a97a:	4603      	mov	r3, r0
 800a97c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 800a97e:	79fb      	ldrb	r3, [r7, #7]
 800a980:	2b01      	cmp	r3, #1
 800a982:	d106      	bne.n	800a992 <OnNvmDataChange+0x1e>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 800a984:	4b08      	ldr	r3, [pc, #32]	@ (800a9a8 <OnNvmDataChange+0x34>)
 800a986:	2200      	movs	r2, #0
 800a988:	2100      	movs	r1, #0
 800a98a:	2002      	movs	r0, #2
 800a98c:	f010 fe28 	bl	801b5e0 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 800a990:	e005      	b.n	800a99e <OnNvmDataChange+0x2a>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 800a992:	4b06      	ldr	r3, [pc, #24]	@ (800a9ac <OnNvmDataChange+0x38>)
 800a994:	2200      	movs	r2, #0
 800a996:	2100      	movs	r1, #0
 800a998:	2002      	movs	r0, #2
 800a99a:	f010 fe21 	bl	801b5e0 <UTIL_ADV_TRACE_COND_FSend>
}
 800a99e:	bf00      	nop
 800a9a0:	3708      	adds	r7, #8
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	bd80      	pop	{r7, pc}
 800a9a6:	bf00      	nop
 800a9a8:	0801ea90 	.word	0x0801ea90
 800a9ac:	0801eaa4 	.word	0x0801eaa4

0800a9b0 <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b082      	sub	sp, #8
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
 800a9b8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (HAL_FLASH_Unlock() == HAL_OK)
 800a9ba:	f7fa f9eb 	bl	8004d94 <HAL_FLASH_Unlock>
 800a9be:	4603      	mov	r3, r0
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d11c      	bne.n	800a9fe <OnStoreContextRequest+0x4e>
  {
    if (FLASH_IF_EraseByPages(PAGE(LORAWAN_NVM_BASE_ADDRESS), 1, 0U) == FLASH_OK)
 800a9c4:	4b10      	ldr	r3, [pc, #64]	@ (800aa08 <OnStoreContextRequest+0x58>)
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	029a      	lsls	r2, r3, #10
 800a9ca:	4b10      	ldr	r3, [pc, #64]	@ (800aa0c <OnStoreContextRequest+0x5c>)
 800a9cc:	4013      	ands	r3, r2
 800a9ce:	f44f 327c 	mov.w	r2, #258048	@ 0x3f000
 800a9d2:	fbb2 f1f3 	udiv	r1, r2, r3
 800a9d6:	fb01 f303 	mul.w	r3, r1, r3
 800a9da:	1ad3      	subs	r3, r2, r3
 800a9dc:	0adb      	lsrs	r3, r3, #11
 800a9de:	2200      	movs	r2, #0
 800a9e0:	2101      	movs	r1, #1
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	f7f6 fdc7 	bl	8001576 <FLASH_IF_EraseByPages>
 800a9e8:	4603      	mov	r3, r0
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d105      	bne.n	800a9fa <OnStoreContextRequest+0x4a>
    {
      FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (uint8_t *)nvm, nvm_size, NULL);
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	683a      	ldr	r2, [r7, #0]
 800a9f2:	6879      	ldr	r1, [r7, #4]
 800a9f4:	4806      	ldr	r0, [pc, #24]	@ (800aa10 <OnStoreContextRequest+0x60>)
 800a9f6:	f7f6 fcdd 	bl	80013b4 <FLASH_IF_Write>
    }
    HAL_FLASH_Lock();
 800a9fa:	f7fa f9ed 	bl	8004dd8 <HAL_FLASH_Lock>
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 800a9fe:	bf00      	nop
 800aa00:	3708      	adds	r7, #8
 800aa02:	46bd      	mov	sp, r7
 800aa04:	bd80      	pop	{r7, pc}
 800aa06:	bf00      	nop
 800aa08:	1fff75e0 	.word	0x1fff75e0
 800aa0c:	03fffc00 	.word	0x03fffc00
 800aa10:	0803f000 	.word	0x0803f000

0800aa14 <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b082      	sub	sp, #8
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
 800aa1c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  UTIL_MEM_cpy_8(nvm, (void *)LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 800aa1e:	683b      	ldr	r3, [r7, #0]
 800aa20:	b29b      	uxth	r3, r3
 800aa22:	461a      	mov	r2, r3
 800aa24:	4903      	ldr	r1, [pc, #12]	@ (800aa34 <OnRestoreContextRequest+0x20>)
 800aa26:	6878      	ldr	r0, [r7, #4]
 800aa28:	f00f fd90 	bl	801a54c <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 800aa2c:	bf00      	nop
 800aa2e:	3708      	adds	r7, #8
 800aa30:	46bd      	mov	sp, r7
 800aa32:	bd80      	pop	{r7, pc}
 800aa34:	0803f000 	.word	0x0803f000

0800aa38 <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	af00      	add	r7, sp, #0
  loraInfo.ActivationMode = 0;
 800aa3c:	4b15      	ldr	r3, [pc, #84]	@ (800aa94 <LoraInfo_Init+0x5c>)
 800aa3e:	2200      	movs	r2, #0
 800aa40:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 800aa42:	4b14      	ldr	r3, [pc, #80]	@ (800aa94 <LoraInfo_Init+0x5c>)
 800aa44:	2200      	movs	r2, #0
 800aa46:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 800aa48:	4b12      	ldr	r3, [pc, #72]	@ (800aa94 <LoraInfo_Init+0x5c>)
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800aa4e:	4b11      	ldr	r3, [pc, #68]	@ (800aa94 <LoraInfo_Init+0x5c>)
 800aa50:	2200      	movs	r2, #0
 800aa52:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN LoraInfo_Init_1 */

  /* USER CODE END LoraInfo_Init_1 */

#ifdef  REGION_AS923
  loraInfo.Region |= (1 << LORAMAC_REGION_AS923);
 800aa54:	4b0f      	ldr	r3, [pc, #60]	@ (800aa94 <LoraInfo_Init+0x5c>)
 800aa56:	685b      	ldr	r3, [r3, #4]
 800aa58:	f043 0301 	orr.w	r3, r3, #1
 800aa5c:	4a0d      	ldr	r2, [pc, #52]	@ (800aa94 <LoraInfo_Init+0x5c>)
 800aa5e:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864);
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 800aa60:	4b0c      	ldr	r3, [pc, #48]	@ (800aa94 <LoraInfo_Init+0x5c>)
 800aa62:	685b      	ldr	r3, [r3, #4]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d10d      	bne.n	800aa84 <LoraInfo_Init+0x4c>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 800aa68:	4b0b      	ldr	r3, [pc, #44]	@ (800aa98 <LoraInfo_Init+0x60>)
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	2100      	movs	r1, #0
 800aa6e:	2000      	movs	r0, #0
 800aa70:	f010 fdb6 	bl	801b5e0 <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 800aa74:	bf00      	nop
 800aa76:	f010 fda1 	bl	801b5bc <UTIL_ADV_TRACE_IsBufferEmpty>
 800aa7a:	4603      	mov	r3, r0
 800aa7c:	2b01      	cmp	r3, #1
 800aa7e:	d1fa      	bne.n	800aa76 <LoraInfo_Init+0x3e>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 800aa80:	bf00      	nop
 800aa82:	e7fd      	b.n	800aa80 <LoraInfo_Init+0x48>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 800aa84:	4b03      	ldr	r3, [pc, #12]	@ (800aa94 <LoraInfo_Init+0x5c>)
 800aa86:	2200      	movs	r2, #0
 800aa88:	60da      	str	r2, [r3, #12]
  loraInfo.ActivationMode = 3;
 800aa8a:	4b02      	ldr	r3, [pc, #8]	@ (800aa94 <LoraInfo_Init+0x5c>)
 800aa8c:	2203      	movs	r2, #3
 800aa8e:	601a      	str	r2, [r3, #0]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALIZATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800aa90:	bf00      	nop
 800aa92:	bd80      	pop	{r7, pc}
 800aa94:	20000710 	.word	0x20000710
 800aa98:	0801eab8 	.word	0x0801eab8

0800aa9c <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 800aa9c:	b480      	push	{r7}
 800aa9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 800aaa0:	4b02      	ldr	r3, [pc, #8]	@ (800aaac <LoraInfo_GetPtr+0x10>)
}
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	bc80      	pop	{r7}
 800aaa8:	4770      	bx	lr
 800aaaa:	bf00      	nop
 800aaac:	20000710 	.word	0x20000710

0800aab0 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 800aab4:	f7f8 fa75 	bl	8002fa2 <BSP_RADIO_Init>
 800aab8:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800aaba:	4618      	mov	r0, r3
 800aabc:	bd80      	pop	{r7, pc}

0800aabe <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800aabe:	b580      	push	{r7, lr}
 800aac0:	b082      	sub	sp, #8
 800aac2:	af00      	add	r7, sp, #0
 800aac4:	4603      	mov	r3, r0
 800aac6:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800aac8:	79fb      	ldrb	r3, [r7, #7]
 800aaca:	4618      	mov	r0, r3
 800aacc:	f7f8 fa9a 	bl	8003004 <BSP_RADIO_ConfigRFSwitch>
 800aad0:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800aad2:	4618      	mov	r0, r3
 800aad4:	3708      	adds	r7, #8
 800aad6:	46bd      	mov	sp, r7
 800aad8:	bd80      	pop	{r7, pc}

0800aada <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800aada:	b580      	push	{r7, lr}
 800aadc:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 800aade:	f7f8 fadf 	bl	80030a0 <BSP_RADIO_GetTxConfig>
 800aae2:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800aae4:	4618      	mov	r0, r3
 800aae6:	bd80      	pop	{r7, pc}

0800aae8 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 800aaec:	f7f8 fadf 	bl	80030ae <BSP_RADIO_IsTCXO>
 800aaf0:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	bd80      	pop	{r7, pc}

0800aaf6 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800aaf6:	b580      	push	{r7, lr}
 800aaf8:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 800aafa:	f7f8 fadf 	bl	80030bc <BSP_RADIO_IsDCDC>
 800aafe:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800ab00:	4618      	mov	r0, r3
 800ab02:	bd80      	pop	{r7, pc}

0800ab04 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b082      	sub	sp, #8
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	4603      	mov	r3, r0
 800ab0c:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 800ab0e:	79fb      	ldrb	r3, [r7, #7]
 800ab10:	4618      	mov	r0, r3
 800ab12:	f7f8 fada 	bl	80030ca <BSP_RADIO_GetRFOMaxPowerConfig>
 800ab16:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 800ab18:	4618      	mov	r0, r3
 800ab1a:	3708      	adds	r7, #8
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	bd80      	pop	{r7, pc}

0800ab20 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b082      	sub	sp, #8
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	33f1      	adds	r3, #241	@ 0xf1
 800ab2c:	2210      	movs	r2, #16
 800ab2e:	2100      	movs	r1, #0
 800ab30:	4618      	mov	r0, r3
 800ab32:	f00c fa39 	bl	8016fa8 <memset1>
    ctx->M_n = 0;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	2200      	movs	r2, #0
 800ab3a:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	22f0      	movs	r2, #240	@ 0xf0
 800ab42:	2100      	movs	r1, #0
 800ab44:	4618      	mov	r0, r3
 800ab46:	f00c fa2f 	bl	8016fa8 <memset1>
}
 800ab4a:	bf00      	nop
 800ab4c:	3708      	adds	r7, #8
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	bd80      	pop	{r7, pc}

0800ab52 <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800ab52:	b580      	push	{r7, lr}
 800ab54:	b082      	sub	sp, #8
 800ab56:	af00      	add	r7, sp, #0
 800ab58:	6078      	str	r0, [r7, #4]
 800ab5a:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	461a      	mov	r2, r3
 800ab60:	2110      	movs	r1, #16
 800ab62:	6838      	ldr	r0, [r7, #0]
 800ab64:	f000 fe60 	bl	800b828 <lorawan_aes_set_key>
}
 800ab68:	bf00      	nop
 800ab6a:	3708      	adds	r7, #8
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	bd80      	pop	{r7, pc}

0800ab70 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b08c      	sub	sp, #48	@ 0x30
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	60f8      	str	r0, [r7, #12]
 800ab78:	60b9      	str	r1, [r7, #8]
 800ab7a:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	f000 80a1 	beq.w	800acca <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800ab8e:	f1c3 0310 	rsb	r3, r3, #16
 800ab92:	687a      	ldr	r2, [r7, #4]
 800ab94:	4293      	cmp	r3, r2
 800ab96:	bf28      	it	cs
 800ab98:	4613      	movcs	r3, r2
 800ab9a:	627b      	str	r3, [r7, #36]	@ 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	f203 1201 	addw	r2, r3, #257	@ 0x101
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800aba8:	4413      	add	r3, r2
 800abaa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800abac:	b292      	uxth	r2, r2
 800abae:	68b9      	ldr	r1, [r7, #8]
 800abb0:	4618      	mov	r0, r3
 800abb2:	f00c f9be 	bl	8016f32 <memcpy1>
        ctx->M_n += mlen;
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	f8d3 2114 	ldr.w	r2, [r3, #276]	@ 0x114
 800abbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abbe:	441a      	add	r2, r3
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
        if( ctx->M_n < 16 || len == mlen )
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800abcc:	2b0f      	cmp	r3, #15
 800abce:	f240 808d 	bls.w	800acec <AES_CMAC_Update+0x17c>
 800abd2:	687a      	ldr	r2, [r7, #4]
 800abd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abd6:	429a      	cmp	r2, r3
 800abd8:	f000 8088 	beq.w	800acec <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 800abdc:	2300      	movs	r3, #0
 800abde:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800abe0:	e015      	b.n	800ac0e <AES_CMAC_Update+0x9e>
 800abe2:	68fa      	ldr	r2, [r7, #12]
 800abe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abe6:	4413      	add	r3, r2
 800abe8:	33f1      	adds	r3, #241	@ 0xf1
 800abea:	781a      	ldrb	r2, [r3, #0]
 800abec:	68f9      	ldr	r1, [r7, #12]
 800abee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abf0:	440b      	add	r3, r1
 800abf2:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800abf6:	781b      	ldrb	r3, [r3, #0]
 800abf8:	4053      	eors	r3, r2
 800abfa:	b2d9      	uxtb	r1, r3
 800abfc:	68fa      	ldr	r2, [r7, #12]
 800abfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac00:	4413      	add	r3, r2
 800ac02:	33f1      	adds	r3, #241	@ 0xf1
 800ac04:	460a      	mov	r2, r1
 800ac06:	701a      	strb	r2, [r3, #0]
 800ac08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac0a:	3301      	adds	r3, #1
 800ac0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ac0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac10:	2b0f      	cmp	r3, #15
 800ac12:	dde6      	ble.n	800abe2 <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 800ac1a:	f107 0314 	add.w	r3, r7, #20
 800ac1e:	2210      	movs	r2, #16
 800ac20:	4618      	mov	r0, r3
 800ac22:	f00c f986 	bl	8016f32 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800ac26:	68fa      	ldr	r2, [r7, #12]
 800ac28:	f107 0114 	add.w	r1, r7, #20
 800ac2c:	f107 0314 	add.w	r3, r7, #20
 800ac30:	4618      	mov	r0, r3
 800ac32:	f000 fed7 	bl	800b9e4 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	33f1      	adds	r3, #241	@ 0xf1
 800ac3a:	f107 0114 	add.w	r1, r7, #20
 800ac3e:	2210      	movs	r2, #16
 800ac40:	4618      	mov	r0, r3
 800ac42:	f00c f976 	bl	8016f32 <memcpy1>

        data += mlen;
 800ac46:	68ba      	ldr	r2, [r7, #8]
 800ac48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac4a:	4413      	add	r3, r2
 800ac4c:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800ac4e:	687a      	ldr	r2, [r7, #4]
 800ac50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac52:	1ad3      	subs	r3, r2, r3
 800ac54:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800ac56:	e038      	b.n	800acca <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 800ac58:	2300      	movs	r3, #0
 800ac5a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ac5c:	e013      	b.n	800ac86 <AES_CMAC_Update+0x116>
 800ac5e:	68fa      	ldr	r2, [r7, #12]
 800ac60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac62:	4413      	add	r3, r2
 800ac64:	33f1      	adds	r3, #241	@ 0xf1
 800ac66:	781a      	ldrb	r2, [r3, #0]
 800ac68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac6a:	68b9      	ldr	r1, [r7, #8]
 800ac6c:	440b      	add	r3, r1
 800ac6e:	781b      	ldrb	r3, [r3, #0]
 800ac70:	4053      	eors	r3, r2
 800ac72:	b2d9      	uxtb	r1, r3
 800ac74:	68fa      	ldr	r2, [r7, #12]
 800ac76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac78:	4413      	add	r3, r2
 800ac7a:	33f1      	adds	r3, #241	@ 0xf1
 800ac7c:	460a      	mov	r2, r1
 800ac7e:	701a      	strb	r2, [r3, #0]
 800ac80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac82:	3301      	adds	r3, #1
 800ac84:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ac86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac88:	2b0f      	cmp	r3, #15
 800ac8a:	dde8      	ble.n	800ac5e <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 800ac92:	f107 0314 	add.w	r3, r7, #20
 800ac96:	2210      	movs	r2, #16
 800ac98:	4618      	mov	r0, r3
 800ac9a:	f00c f94a 	bl	8016f32 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800ac9e:	68fa      	ldr	r2, [r7, #12]
 800aca0:	f107 0114 	add.w	r1, r7, #20
 800aca4:	f107 0314 	add.w	r3, r7, #20
 800aca8:	4618      	mov	r0, r3
 800acaa:	f000 fe9b 	bl	800b9e4 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	33f1      	adds	r3, #241	@ 0xf1
 800acb2:	f107 0114 	add.w	r1, r7, #20
 800acb6:	2210      	movs	r2, #16
 800acb8:	4618      	mov	r0, r3
 800acba:	f00c f93a 	bl	8016f32 <memcpy1>

        data += 16;
 800acbe:	68bb      	ldr	r3, [r7, #8]
 800acc0:	3310      	adds	r3, #16
 800acc2:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	3b10      	subs	r3, #16
 800acc8:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	2b10      	cmp	r3, #16
 800acce:	d8c3      	bhi.n	800ac58 <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800acd6:	687a      	ldr	r2, [r7, #4]
 800acd8:	b292      	uxth	r2, r2
 800acda:	68b9      	ldr	r1, [r7, #8]
 800acdc:	4618      	mov	r0, r3
 800acde:	f00c f928 	bl	8016f32 <memcpy1>
    ctx->M_n = len;
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	687a      	ldr	r2, [r7, #4]
 800ace6:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
 800acea:	e000      	b.n	800acee <AES_CMAC_Update+0x17e>
            return;
 800acec:	bf00      	nop
}
 800acee:	3730      	adds	r7, #48	@ 0x30
 800acf0:	46bd      	mov	sp, r7
 800acf2:	bd80      	pop	{r7, pc}

0800acf4 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b092      	sub	sp, #72	@ 0x48
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
 800acfc:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800acfe:	f107 031c 	add.w	r3, r7, #28
 800ad02:	2210      	movs	r2, #16
 800ad04:	2100      	movs	r1, #0
 800ad06:	4618      	mov	r0, r3
 800ad08:	f00c f94e 	bl	8016fa8 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800ad0c:	683a      	ldr	r2, [r7, #0]
 800ad0e:	f107 011c 	add.w	r1, r7, #28
 800ad12:	f107 031c 	add.w	r3, r7, #28
 800ad16:	4618      	mov	r0, r3
 800ad18:	f000 fe64 	bl	800b9e4 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800ad1c:	7f3b      	ldrb	r3, [r7, #28]
 800ad1e:	b25b      	sxtb	r3, r3
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	da31      	bge.n	800ad88 <AES_CMAC_Final+0x94>
    {
        LSHIFT( K, K );
 800ad24:	2300      	movs	r3, #0
 800ad26:	647b      	str	r3, [r7, #68]	@ 0x44
 800ad28:	e01c      	b.n	800ad64 <AES_CMAC_Final+0x70>
 800ad2a:	f107 021c 	add.w	r2, r7, #28
 800ad2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ad30:	4413      	add	r3, r2
 800ad32:	781b      	ldrb	r3, [r3, #0]
 800ad34:	b25b      	sxtb	r3, r3
 800ad36:	005b      	lsls	r3, r3, #1
 800ad38:	b25a      	sxtb	r2, r3
 800ad3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ad3c:	3301      	adds	r3, #1
 800ad3e:	3348      	adds	r3, #72	@ 0x48
 800ad40:	443b      	add	r3, r7
 800ad42:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800ad46:	09db      	lsrs	r3, r3, #7
 800ad48:	b2db      	uxtb	r3, r3
 800ad4a:	b25b      	sxtb	r3, r3
 800ad4c:	4313      	orrs	r3, r2
 800ad4e:	b25b      	sxtb	r3, r3
 800ad50:	b2d9      	uxtb	r1, r3
 800ad52:	f107 021c 	add.w	r2, r7, #28
 800ad56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ad58:	4413      	add	r3, r2
 800ad5a:	460a      	mov	r2, r1
 800ad5c:	701a      	strb	r2, [r3, #0]
 800ad5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ad60:	3301      	adds	r3, #1
 800ad62:	647b      	str	r3, [r7, #68]	@ 0x44
 800ad64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ad66:	2b0e      	cmp	r3, #14
 800ad68:	dddf      	ble.n	800ad2a <AES_CMAC_Final+0x36>
 800ad6a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ad6e:	005b      	lsls	r3, r3, #1
 800ad70:	b2db      	uxtb	r3, r3
 800ad72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        K[15] ^= 0x87;
 800ad76:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ad7a:	f083 0378 	eor.w	r3, r3, #120	@ 0x78
 800ad7e:	43db      	mvns	r3, r3
 800ad80:	b2db      	uxtb	r3, r3
 800ad82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad86:	e028      	b.n	800adda <AES_CMAC_Final+0xe6>
    }
    else
        LSHIFT( K, K );
 800ad88:	2300      	movs	r3, #0
 800ad8a:	643b      	str	r3, [r7, #64]	@ 0x40
 800ad8c:	e01c      	b.n	800adc8 <AES_CMAC_Final+0xd4>
 800ad8e:	f107 021c 	add.w	r2, r7, #28
 800ad92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad94:	4413      	add	r3, r2
 800ad96:	781b      	ldrb	r3, [r3, #0]
 800ad98:	b25b      	sxtb	r3, r3
 800ad9a:	005b      	lsls	r3, r3, #1
 800ad9c:	b25a      	sxtb	r2, r3
 800ad9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ada0:	3301      	adds	r3, #1
 800ada2:	3348      	adds	r3, #72	@ 0x48
 800ada4:	443b      	add	r3, r7
 800ada6:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800adaa:	09db      	lsrs	r3, r3, #7
 800adac:	b2db      	uxtb	r3, r3
 800adae:	b25b      	sxtb	r3, r3
 800adb0:	4313      	orrs	r3, r2
 800adb2:	b25b      	sxtb	r3, r3
 800adb4:	b2d9      	uxtb	r1, r3
 800adb6:	f107 021c 	add.w	r2, r7, #28
 800adba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800adbc:	4413      	add	r3, r2
 800adbe:	460a      	mov	r2, r1
 800adc0:	701a      	strb	r2, [r3, #0]
 800adc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800adc4:	3301      	adds	r3, #1
 800adc6:	643b      	str	r3, [r7, #64]	@ 0x40
 800adc8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800adca:	2b0e      	cmp	r3, #14
 800adcc:	dddf      	ble.n	800ad8e <AES_CMAC_Final+0x9a>
 800adce:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800add2:	005b      	lsls	r3, r3, #1
 800add4:	b2db      	uxtb	r3, r3
 800add6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

    if( ctx->M_n == 16 )
 800adda:	683b      	ldr	r3, [r7, #0]
 800addc:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800ade0:	2b10      	cmp	r3, #16
 800ade2:	d11d      	bne.n	800ae20 <AES_CMAC_Final+0x12c>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800ade4:	2300      	movs	r3, #0
 800ade6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ade8:	e016      	b.n	800ae18 <AES_CMAC_Final+0x124>
 800adea:	683a      	ldr	r2, [r7, #0]
 800adec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800adee:	4413      	add	r3, r2
 800adf0:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800adf4:	781a      	ldrb	r2, [r3, #0]
 800adf6:	f107 011c 	add.w	r1, r7, #28
 800adfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800adfc:	440b      	add	r3, r1
 800adfe:	781b      	ldrb	r3, [r3, #0]
 800ae00:	4053      	eors	r3, r2
 800ae02:	b2d9      	uxtb	r1, r3
 800ae04:	683a      	ldr	r2, [r7, #0]
 800ae06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae08:	4413      	add	r3, r2
 800ae0a:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800ae0e:	460a      	mov	r2, r1
 800ae10:	701a      	strb	r2, [r3, #0]
 800ae12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae14:	3301      	adds	r3, #1
 800ae16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ae18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae1a:	2b0f      	cmp	r3, #15
 800ae1c:	dde5      	ble.n	800adea <AES_CMAC_Final+0xf6>
 800ae1e:	e098      	b.n	800af52 <AES_CMAC_Final+0x25e>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800ae20:	7f3b      	ldrb	r3, [r7, #28]
 800ae22:	b25b      	sxtb	r3, r3
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	da31      	bge.n	800ae8c <AES_CMAC_Final+0x198>
        {
            LSHIFT( K, K );
 800ae28:	2300      	movs	r3, #0
 800ae2a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ae2c:	e01c      	b.n	800ae68 <AES_CMAC_Final+0x174>
 800ae2e:	f107 021c 	add.w	r2, r7, #28
 800ae32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae34:	4413      	add	r3, r2
 800ae36:	781b      	ldrb	r3, [r3, #0]
 800ae38:	b25b      	sxtb	r3, r3
 800ae3a:	005b      	lsls	r3, r3, #1
 800ae3c:	b25a      	sxtb	r2, r3
 800ae3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae40:	3301      	adds	r3, #1
 800ae42:	3348      	adds	r3, #72	@ 0x48
 800ae44:	443b      	add	r3, r7
 800ae46:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800ae4a:	09db      	lsrs	r3, r3, #7
 800ae4c:	b2db      	uxtb	r3, r3
 800ae4e:	b25b      	sxtb	r3, r3
 800ae50:	4313      	orrs	r3, r2
 800ae52:	b25b      	sxtb	r3, r3
 800ae54:	b2d9      	uxtb	r1, r3
 800ae56:	f107 021c 	add.w	r2, r7, #28
 800ae5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae5c:	4413      	add	r3, r2
 800ae5e:	460a      	mov	r2, r1
 800ae60:	701a      	strb	r2, [r3, #0]
 800ae62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae64:	3301      	adds	r3, #1
 800ae66:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ae68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae6a:	2b0e      	cmp	r3, #14
 800ae6c:	dddf      	ble.n	800ae2e <AES_CMAC_Final+0x13a>
 800ae6e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ae72:	005b      	lsls	r3, r3, #1
 800ae74:	b2db      	uxtb	r3, r3
 800ae76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
            K[15] ^= 0x87;
 800ae7a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ae7e:	f083 0378 	eor.w	r3, r3, #120	@ 0x78
 800ae82:	43db      	mvns	r3, r3
 800ae84:	b2db      	uxtb	r3, r3
 800ae86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae8a:	e028      	b.n	800aede <AES_CMAC_Final+0x1ea>
        }
        else
            LSHIFT( K, K );
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ae90:	e01c      	b.n	800aecc <AES_CMAC_Final+0x1d8>
 800ae92:	f107 021c 	add.w	r2, r7, #28
 800ae96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae98:	4413      	add	r3, r2
 800ae9a:	781b      	ldrb	r3, [r3, #0]
 800ae9c:	b25b      	sxtb	r3, r3
 800ae9e:	005b      	lsls	r3, r3, #1
 800aea0:	b25a      	sxtb	r2, r3
 800aea2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aea4:	3301      	adds	r3, #1
 800aea6:	3348      	adds	r3, #72	@ 0x48
 800aea8:	443b      	add	r3, r7
 800aeaa:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800aeae:	09db      	lsrs	r3, r3, #7
 800aeb0:	b2db      	uxtb	r3, r3
 800aeb2:	b25b      	sxtb	r3, r3
 800aeb4:	4313      	orrs	r3, r2
 800aeb6:	b25b      	sxtb	r3, r3
 800aeb8:	b2d9      	uxtb	r1, r3
 800aeba:	f107 021c 	add.w	r2, r7, #28
 800aebe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aec0:	4413      	add	r3, r2
 800aec2:	460a      	mov	r2, r1
 800aec4:	701a      	strb	r2, [r3, #0]
 800aec6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aec8:	3301      	adds	r3, #1
 800aeca:	637b      	str	r3, [r7, #52]	@ 0x34
 800aecc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aece:	2b0e      	cmp	r3, #14
 800aed0:	dddf      	ble.n	800ae92 <AES_CMAC_Final+0x19e>
 800aed2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800aed6:	005b      	lsls	r3, r3, #1
 800aed8:	b2db      	uxtb	r3, r3
 800aeda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800aede:	683b      	ldr	r3, [r7, #0]
 800aee0:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800aee4:	683a      	ldr	r2, [r7, #0]
 800aee6:	4413      	add	r3, r2
 800aee8:	2280      	movs	r2, #128	@ 0x80
 800aeea:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        while( ++ctx->M_n < 16 )
 800aeee:	e007      	b.n	800af00 <AES_CMAC_Final+0x20c>
            ctx->M_last[ctx->M_n] = 0;
 800aef0:	683b      	ldr	r3, [r7, #0]
 800aef2:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800aef6:	683a      	ldr	r2, [r7, #0]
 800aef8:	4413      	add	r3, r2
 800aefa:	2200      	movs	r2, #0
 800aefc:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        while( ++ctx->M_n < 16 )
 800af00:	683b      	ldr	r3, [r7, #0]
 800af02:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800af06:	1c5a      	adds	r2, r3, #1
 800af08:	683b      	ldr	r3, [r7, #0]
 800af0a:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
 800af0e:	683b      	ldr	r3, [r7, #0]
 800af10:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800af14:	2b0f      	cmp	r3, #15
 800af16:	d9eb      	bls.n	800aef0 <AES_CMAC_Final+0x1fc>

        XOR( K, ctx->M_last );
 800af18:	2300      	movs	r3, #0
 800af1a:	633b      	str	r3, [r7, #48]	@ 0x30
 800af1c:	e016      	b.n	800af4c <AES_CMAC_Final+0x258>
 800af1e:	683a      	ldr	r2, [r7, #0]
 800af20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af22:	4413      	add	r3, r2
 800af24:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800af28:	781a      	ldrb	r2, [r3, #0]
 800af2a:	f107 011c 	add.w	r1, r7, #28
 800af2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af30:	440b      	add	r3, r1
 800af32:	781b      	ldrb	r3, [r3, #0]
 800af34:	4053      	eors	r3, r2
 800af36:	b2d9      	uxtb	r1, r3
 800af38:	683a      	ldr	r2, [r7, #0]
 800af3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af3c:	4413      	add	r3, r2
 800af3e:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800af42:	460a      	mov	r2, r1
 800af44:	701a      	strb	r2, [r3, #0]
 800af46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af48:	3301      	adds	r3, #1
 800af4a:	633b      	str	r3, [r7, #48]	@ 0x30
 800af4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af4e:	2b0f      	cmp	r3, #15
 800af50:	dde5      	ble.n	800af1e <AES_CMAC_Final+0x22a>
    }
    XOR( ctx->M_last, ctx->X );
 800af52:	2300      	movs	r3, #0
 800af54:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800af56:	e015      	b.n	800af84 <AES_CMAC_Final+0x290>
 800af58:	683a      	ldr	r2, [r7, #0]
 800af5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af5c:	4413      	add	r3, r2
 800af5e:	33f1      	adds	r3, #241	@ 0xf1
 800af60:	781a      	ldrb	r2, [r3, #0]
 800af62:	6839      	ldr	r1, [r7, #0]
 800af64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af66:	440b      	add	r3, r1
 800af68:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800af6c:	781b      	ldrb	r3, [r3, #0]
 800af6e:	4053      	eors	r3, r2
 800af70:	b2d9      	uxtb	r1, r3
 800af72:	683a      	ldr	r2, [r7, #0]
 800af74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af76:	4413      	add	r3, r2
 800af78:	33f1      	adds	r3, #241	@ 0xf1
 800af7a:	460a      	mov	r2, r1
 800af7c:	701a      	strb	r2, [r3, #0]
 800af7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af80:	3301      	adds	r3, #1
 800af82:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800af84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af86:	2b0f      	cmp	r3, #15
 800af88:	dde6      	ble.n	800af58 <AES_CMAC_Final+0x264>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800af8a:	683b      	ldr	r3, [r7, #0]
 800af8c:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 800af90:	f107 030c 	add.w	r3, r7, #12
 800af94:	2210      	movs	r2, #16
 800af96:	4618      	mov	r0, r3
 800af98:	f00b ffcb 	bl	8016f32 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800af9c:	683a      	ldr	r2, [r7, #0]
 800af9e:	f107 030c 	add.w	r3, r7, #12
 800afa2:	6879      	ldr	r1, [r7, #4]
 800afa4:	4618      	mov	r0, r3
 800afa6:	f000 fd1d 	bl	800b9e4 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800afaa:	f107 031c 	add.w	r3, r7, #28
 800afae:	2210      	movs	r2, #16
 800afb0:	2100      	movs	r1, #0
 800afb2:	4618      	mov	r0, r3
 800afb4:	f00b fff8 	bl	8016fa8 <memset1>
}
 800afb8:	bf00      	nop
 800afba:	3748      	adds	r7, #72	@ 0x48
 800afbc:	46bd      	mov	sp, r7
 800afbe:	bd80      	pop	{r7, pc}

0800afc0 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800afc0:	b480      	push	{r7}
 800afc2:	b083      	sub	sp, #12
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
 800afc8:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800afca:	683b      	ldr	r3, [r7, #0]
 800afcc:	781a      	ldrb	r2, [r3, #0]
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	3301      	adds	r3, #1
 800afd6:	683a      	ldr	r2, [r7, #0]
 800afd8:	7852      	ldrb	r2, [r2, #1]
 800afda:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	3302      	adds	r3, #2
 800afe0:	683a      	ldr	r2, [r7, #0]
 800afe2:	7892      	ldrb	r2, [r2, #2]
 800afe4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	3303      	adds	r3, #3
 800afea:	683a      	ldr	r2, [r7, #0]
 800afec:	78d2      	ldrb	r2, [r2, #3]
 800afee:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	3304      	adds	r3, #4
 800aff4:	683a      	ldr	r2, [r7, #0]
 800aff6:	7912      	ldrb	r2, [r2, #4]
 800aff8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	3305      	adds	r3, #5
 800affe:	683a      	ldr	r2, [r7, #0]
 800b000:	7952      	ldrb	r2, [r2, #5]
 800b002:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	3306      	adds	r3, #6
 800b008:	683a      	ldr	r2, [r7, #0]
 800b00a:	7992      	ldrb	r2, [r2, #6]
 800b00c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	3307      	adds	r3, #7
 800b012:	683a      	ldr	r2, [r7, #0]
 800b014:	79d2      	ldrb	r2, [r2, #7]
 800b016:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	3308      	adds	r3, #8
 800b01c:	683a      	ldr	r2, [r7, #0]
 800b01e:	7a12      	ldrb	r2, [r2, #8]
 800b020:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	3309      	adds	r3, #9
 800b026:	683a      	ldr	r2, [r7, #0]
 800b028:	7a52      	ldrb	r2, [r2, #9]
 800b02a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	330a      	adds	r3, #10
 800b030:	683a      	ldr	r2, [r7, #0]
 800b032:	7a92      	ldrb	r2, [r2, #10]
 800b034:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	330b      	adds	r3, #11
 800b03a:	683a      	ldr	r2, [r7, #0]
 800b03c:	7ad2      	ldrb	r2, [r2, #11]
 800b03e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	330c      	adds	r3, #12
 800b044:	683a      	ldr	r2, [r7, #0]
 800b046:	7b12      	ldrb	r2, [r2, #12]
 800b048:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	330d      	adds	r3, #13
 800b04e:	683a      	ldr	r2, [r7, #0]
 800b050:	7b52      	ldrb	r2, [r2, #13]
 800b052:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	330e      	adds	r3, #14
 800b058:	683a      	ldr	r2, [r7, #0]
 800b05a:	7b92      	ldrb	r2, [r2, #14]
 800b05c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	330f      	adds	r3, #15
 800b062:	683a      	ldr	r2, [r7, #0]
 800b064:	7bd2      	ldrb	r2, [r2, #15]
 800b066:	701a      	strb	r2, [r3, #0]
#endif
}
 800b068:	bf00      	nop
 800b06a:	370c      	adds	r7, #12
 800b06c:	46bd      	mov	sp, r7
 800b06e:	bc80      	pop	{r7}
 800b070:	4770      	bx	lr

0800b072 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800b072:	b480      	push	{r7}
 800b074:	b085      	sub	sp, #20
 800b076:	af00      	add	r7, sp, #0
 800b078:	60f8      	str	r0, [r7, #12]
 800b07a:	60b9      	str	r1, [r7, #8]
 800b07c:	4613      	mov	r3, r2
 800b07e:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800b080:	e007      	b.n	800b092 <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800b082:	68ba      	ldr	r2, [r7, #8]
 800b084:	1c53      	adds	r3, r2, #1
 800b086:	60bb      	str	r3, [r7, #8]
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	1c59      	adds	r1, r3, #1
 800b08c:	60f9      	str	r1, [r7, #12]
 800b08e:	7812      	ldrb	r2, [r2, #0]
 800b090:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800b092:	79fb      	ldrb	r3, [r7, #7]
 800b094:	1e5a      	subs	r2, r3, #1
 800b096:	71fa      	strb	r2, [r7, #7]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d1f2      	bne.n	800b082 <copy_block_nn+0x10>
}
 800b09c:	bf00      	nop
 800b09e:	bf00      	nop
 800b0a0:	3714      	adds	r7, #20
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	bc80      	pop	{r7}
 800b0a6:	4770      	bx	lr

0800b0a8 <xor_block>:

static void xor_block( void *d, const void *s )
{
 800b0a8:	b480      	push	{r7}
 800b0aa:	b083      	sub	sp, #12
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
 800b0b0:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	781a      	ldrb	r2, [r3, #0]
 800b0b6:	683b      	ldr	r3, [r7, #0]
 800b0b8:	781b      	ldrb	r3, [r3, #0]
 800b0ba:	4053      	eors	r3, r2
 800b0bc:	b2da      	uxtb	r2, r3
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	3301      	adds	r3, #1
 800b0c6:	7819      	ldrb	r1, [r3, #0]
 800b0c8:	683b      	ldr	r3, [r7, #0]
 800b0ca:	3301      	adds	r3, #1
 800b0cc:	781a      	ldrb	r2, [r3, #0]
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	3301      	adds	r3, #1
 800b0d2:	404a      	eors	r2, r1
 800b0d4:	b2d2      	uxtb	r2, r2
 800b0d6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	3302      	adds	r3, #2
 800b0dc:	7819      	ldrb	r1, [r3, #0]
 800b0de:	683b      	ldr	r3, [r7, #0]
 800b0e0:	3302      	adds	r3, #2
 800b0e2:	781a      	ldrb	r2, [r3, #0]
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	3302      	adds	r3, #2
 800b0e8:	404a      	eors	r2, r1
 800b0ea:	b2d2      	uxtb	r2, r2
 800b0ec:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	3303      	adds	r3, #3
 800b0f2:	7819      	ldrb	r1, [r3, #0]
 800b0f4:	683b      	ldr	r3, [r7, #0]
 800b0f6:	3303      	adds	r3, #3
 800b0f8:	781a      	ldrb	r2, [r3, #0]
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	3303      	adds	r3, #3
 800b0fe:	404a      	eors	r2, r1
 800b100:	b2d2      	uxtb	r2, r2
 800b102:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	3304      	adds	r3, #4
 800b108:	7819      	ldrb	r1, [r3, #0]
 800b10a:	683b      	ldr	r3, [r7, #0]
 800b10c:	3304      	adds	r3, #4
 800b10e:	781a      	ldrb	r2, [r3, #0]
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	3304      	adds	r3, #4
 800b114:	404a      	eors	r2, r1
 800b116:	b2d2      	uxtb	r2, r2
 800b118:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	3305      	adds	r3, #5
 800b11e:	7819      	ldrb	r1, [r3, #0]
 800b120:	683b      	ldr	r3, [r7, #0]
 800b122:	3305      	adds	r3, #5
 800b124:	781a      	ldrb	r2, [r3, #0]
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	3305      	adds	r3, #5
 800b12a:	404a      	eors	r2, r1
 800b12c:	b2d2      	uxtb	r2, r2
 800b12e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	3306      	adds	r3, #6
 800b134:	7819      	ldrb	r1, [r3, #0]
 800b136:	683b      	ldr	r3, [r7, #0]
 800b138:	3306      	adds	r3, #6
 800b13a:	781a      	ldrb	r2, [r3, #0]
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	3306      	adds	r3, #6
 800b140:	404a      	eors	r2, r1
 800b142:	b2d2      	uxtb	r2, r2
 800b144:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	3307      	adds	r3, #7
 800b14a:	7819      	ldrb	r1, [r3, #0]
 800b14c:	683b      	ldr	r3, [r7, #0]
 800b14e:	3307      	adds	r3, #7
 800b150:	781a      	ldrb	r2, [r3, #0]
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	3307      	adds	r3, #7
 800b156:	404a      	eors	r2, r1
 800b158:	b2d2      	uxtb	r2, r2
 800b15a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	3308      	adds	r3, #8
 800b160:	7819      	ldrb	r1, [r3, #0]
 800b162:	683b      	ldr	r3, [r7, #0]
 800b164:	3308      	adds	r3, #8
 800b166:	781a      	ldrb	r2, [r3, #0]
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	3308      	adds	r3, #8
 800b16c:	404a      	eors	r2, r1
 800b16e:	b2d2      	uxtb	r2, r2
 800b170:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	3309      	adds	r3, #9
 800b176:	7819      	ldrb	r1, [r3, #0]
 800b178:	683b      	ldr	r3, [r7, #0]
 800b17a:	3309      	adds	r3, #9
 800b17c:	781a      	ldrb	r2, [r3, #0]
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	3309      	adds	r3, #9
 800b182:	404a      	eors	r2, r1
 800b184:	b2d2      	uxtb	r2, r2
 800b186:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	330a      	adds	r3, #10
 800b18c:	7819      	ldrb	r1, [r3, #0]
 800b18e:	683b      	ldr	r3, [r7, #0]
 800b190:	330a      	adds	r3, #10
 800b192:	781a      	ldrb	r2, [r3, #0]
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	330a      	adds	r3, #10
 800b198:	404a      	eors	r2, r1
 800b19a:	b2d2      	uxtb	r2, r2
 800b19c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	330b      	adds	r3, #11
 800b1a2:	7819      	ldrb	r1, [r3, #0]
 800b1a4:	683b      	ldr	r3, [r7, #0]
 800b1a6:	330b      	adds	r3, #11
 800b1a8:	781a      	ldrb	r2, [r3, #0]
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	330b      	adds	r3, #11
 800b1ae:	404a      	eors	r2, r1
 800b1b0:	b2d2      	uxtb	r2, r2
 800b1b2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	330c      	adds	r3, #12
 800b1b8:	7819      	ldrb	r1, [r3, #0]
 800b1ba:	683b      	ldr	r3, [r7, #0]
 800b1bc:	330c      	adds	r3, #12
 800b1be:	781a      	ldrb	r2, [r3, #0]
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	330c      	adds	r3, #12
 800b1c4:	404a      	eors	r2, r1
 800b1c6:	b2d2      	uxtb	r2, r2
 800b1c8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	330d      	adds	r3, #13
 800b1ce:	7819      	ldrb	r1, [r3, #0]
 800b1d0:	683b      	ldr	r3, [r7, #0]
 800b1d2:	330d      	adds	r3, #13
 800b1d4:	781a      	ldrb	r2, [r3, #0]
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	330d      	adds	r3, #13
 800b1da:	404a      	eors	r2, r1
 800b1dc:	b2d2      	uxtb	r2, r2
 800b1de:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	330e      	adds	r3, #14
 800b1e4:	7819      	ldrb	r1, [r3, #0]
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	330e      	adds	r3, #14
 800b1ea:	781a      	ldrb	r2, [r3, #0]
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	330e      	adds	r3, #14
 800b1f0:	404a      	eors	r2, r1
 800b1f2:	b2d2      	uxtb	r2, r2
 800b1f4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	330f      	adds	r3, #15
 800b1fa:	7819      	ldrb	r1, [r3, #0]
 800b1fc:	683b      	ldr	r3, [r7, #0]
 800b1fe:	330f      	adds	r3, #15
 800b200:	781a      	ldrb	r2, [r3, #0]
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	330f      	adds	r3, #15
 800b206:	404a      	eors	r2, r1
 800b208:	b2d2      	uxtb	r2, r2
 800b20a:	701a      	strb	r2, [r3, #0]
#endif
}
 800b20c:	bf00      	nop
 800b20e:	370c      	adds	r7, #12
 800b210:	46bd      	mov	sp, r7
 800b212:	bc80      	pop	{r7}
 800b214:	4770      	bx	lr

0800b216 <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800b216:	b480      	push	{r7}
 800b218:	b085      	sub	sp, #20
 800b21a:	af00      	add	r7, sp, #0
 800b21c:	60f8      	str	r0, [r7, #12]
 800b21e:	60b9      	str	r1, [r7, #8]
 800b220:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800b222:	68bb      	ldr	r3, [r7, #8]
 800b224:	781a      	ldrb	r2, [r3, #0]
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	781b      	ldrb	r3, [r3, #0]
 800b22a:	4053      	eors	r3, r2
 800b22c:	b2da      	uxtb	r2, r3
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800b232:	68bb      	ldr	r3, [r7, #8]
 800b234:	3301      	adds	r3, #1
 800b236:	7819      	ldrb	r1, [r3, #0]
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	3301      	adds	r3, #1
 800b23c:	781a      	ldrb	r2, [r3, #0]
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	3301      	adds	r3, #1
 800b242:	404a      	eors	r2, r1
 800b244:	b2d2      	uxtb	r2, r2
 800b246:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800b248:	68bb      	ldr	r3, [r7, #8]
 800b24a:	3302      	adds	r3, #2
 800b24c:	7819      	ldrb	r1, [r3, #0]
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	3302      	adds	r3, #2
 800b252:	781a      	ldrb	r2, [r3, #0]
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	3302      	adds	r3, #2
 800b258:	404a      	eors	r2, r1
 800b25a:	b2d2      	uxtb	r2, r2
 800b25c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800b25e:	68bb      	ldr	r3, [r7, #8]
 800b260:	3303      	adds	r3, #3
 800b262:	7819      	ldrb	r1, [r3, #0]
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	3303      	adds	r3, #3
 800b268:	781a      	ldrb	r2, [r3, #0]
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	3303      	adds	r3, #3
 800b26e:	404a      	eors	r2, r1
 800b270:	b2d2      	uxtb	r2, r2
 800b272:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800b274:	68bb      	ldr	r3, [r7, #8]
 800b276:	3304      	adds	r3, #4
 800b278:	7819      	ldrb	r1, [r3, #0]
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	3304      	adds	r3, #4
 800b27e:	781a      	ldrb	r2, [r3, #0]
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	3304      	adds	r3, #4
 800b284:	404a      	eors	r2, r1
 800b286:	b2d2      	uxtb	r2, r2
 800b288:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800b28a:	68bb      	ldr	r3, [r7, #8]
 800b28c:	3305      	adds	r3, #5
 800b28e:	7819      	ldrb	r1, [r3, #0]
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	3305      	adds	r3, #5
 800b294:	781a      	ldrb	r2, [r3, #0]
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	3305      	adds	r3, #5
 800b29a:	404a      	eors	r2, r1
 800b29c:	b2d2      	uxtb	r2, r2
 800b29e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800b2a0:	68bb      	ldr	r3, [r7, #8]
 800b2a2:	3306      	adds	r3, #6
 800b2a4:	7819      	ldrb	r1, [r3, #0]
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	3306      	adds	r3, #6
 800b2aa:	781a      	ldrb	r2, [r3, #0]
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	3306      	adds	r3, #6
 800b2b0:	404a      	eors	r2, r1
 800b2b2:	b2d2      	uxtb	r2, r2
 800b2b4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800b2b6:	68bb      	ldr	r3, [r7, #8]
 800b2b8:	3307      	adds	r3, #7
 800b2ba:	7819      	ldrb	r1, [r3, #0]
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	3307      	adds	r3, #7
 800b2c0:	781a      	ldrb	r2, [r3, #0]
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	3307      	adds	r3, #7
 800b2c6:	404a      	eors	r2, r1
 800b2c8:	b2d2      	uxtb	r2, r2
 800b2ca:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800b2cc:	68bb      	ldr	r3, [r7, #8]
 800b2ce:	3308      	adds	r3, #8
 800b2d0:	7819      	ldrb	r1, [r3, #0]
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	3308      	adds	r3, #8
 800b2d6:	781a      	ldrb	r2, [r3, #0]
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	3308      	adds	r3, #8
 800b2dc:	404a      	eors	r2, r1
 800b2de:	b2d2      	uxtb	r2, r2
 800b2e0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800b2e2:	68bb      	ldr	r3, [r7, #8]
 800b2e4:	3309      	adds	r3, #9
 800b2e6:	7819      	ldrb	r1, [r3, #0]
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	3309      	adds	r3, #9
 800b2ec:	781a      	ldrb	r2, [r3, #0]
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	3309      	adds	r3, #9
 800b2f2:	404a      	eors	r2, r1
 800b2f4:	b2d2      	uxtb	r2, r2
 800b2f6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800b2f8:	68bb      	ldr	r3, [r7, #8]
 800b2fa:	330a      	adds	r3, #10
 800b2fc:	7819      	ldrb	r1, [r3, #0]
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	330a      	adds	r3, #10
 800b302:	781a      	ldrb	r2, [r3, #0]
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	330a      	adds	r3, #10
 800b308:	404a      	eors	r2, r1
 800b30a:	b2d2      	uxtb	r2, r2
 800b30c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800b30e:	68bb      	ldr	r3, [r7, #8]
 800b310:	330b      	adds	r3, #11
 800b312:	7819      	ldrb	r1, [r3, #0]
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	330b      	adds	r3, #11
 800b318:	781a      	ldrb	r2, [r3, #0]
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	330b      	adds	r3, #11
 800b31e:	404a      	eors	r2, r1
 800b320:	b2d2      	uxtb	r2, r2
 800b322:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800b324:	68bb      	ldr	r3, [r7, #8]
 800b326:	330c      	adds	r3, #12
 800b328:	7819      	ldrb	r1, [r3, #0]
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	330c      	adds	r3, #12
 800b32e:	781a      	ldrb	r2, [r3, #0]
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	330c      	adds	r3, #12
 800b334:	404a      	eors	r2, r1
 800b336:	b2d2      	uxtb	r2, r2
 800b338:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800b33a:	68bb      	ldr	r3, [r7, #8]
 800b33c:	330d      	adds	r3, #13
 800b33e:	7819      	ldrb	r1, [r3, #0]
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	330d      	adds	r3, #13
 800b344:	781a      	ldrb	r2, [r3, #0]
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	330d      	adds	r3, #13
 800b34a:	404a      	eors	r2, r1
 800b34c:	b2d2      	uxtb	r2, r2
 800b34e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800b350:	68bb      	ldr	r3, [r7, #8]
 800b352:	330e      	adds	r3, #14
 800b354:	7819      	ldrb	r1, [r3, #0]
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	330e      	adds	r3, #14
 800b35a:	781a      	ldrb	r2, [r3, #0]
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	330e      	adds	r3, #14
 800b360:	404a      	eors	r2, r1
 800b362:	b2d2      	uxtb	r2, r2
 800b364:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800b366:	68bb      	ldr	r3, [r7, #8]
 800b368:	330f      	adds	r3, #15
 800b36a:	7819      	ldrb	r1, [r3, #0]
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	330f      	adds	r3, #15
 800b370:	781a      	ldrb	r2, [r3, #0]
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	330f      	adds	r3, #15
 800b376:	404a      	eors	r2, r1
 800b378:	b2d2      	uxtb	r2, r2
 800b37a:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800b37c:	bf00      	nop
 800b37e:	3714      	adds	r7, #20
 800b380:	46bd      	mov	sp, r7
 800b382:	bc80      	pop	{r7}
 800b384:	4770      	bx	lr

0800b386 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800b386:	b580      	push	{r7, lr}
 800b388:	b082      	sub	sp, #8
 800b38a:	af00      	add	r7, sp, #0
 800b38c:	6078      	str	r0, [r7, #4]
 800b38e:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800b390:	6839      	ldr	r1, [r7, #0]
 800b392:	6878      	ldr	r0, [r7, #4]
 800b394:	f7ff fe88 	bl	800b0a8 <xor_block>
}
 800b398:	bf00      	nop
 800b39a:	3708      	adds	r7, #8
 800b39c:	46bd      	mov	sp, r7
 800b39e:	bd80      	pop	{r7, pc}

0800b3a0 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800b3a0:	b480      	push	{r7}
 800b3a2:	b085      	sub	sp, #20
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	781b      	ldrb	r3, [r3, #0]
 800b3ac:	461a      	mov	r2, r3
 800b3ae:	4b48      	ldr	r3, [pc, #288]	@ (800b4d0 <shift_sub_rows+0x130>)
 800b3b0:	5c9a      	ldrb	r2, [r3, r2]
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	701a      	strb	r2, [r3, #0]
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	3304      	adds	r3, #4
 800b3ba:	781b      	ldrb	r3, [r3, #0]
 800b3bc:	4619      	mov	r1, r3
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	3304      	adds	r3, #4
 800b3c2:	4a43      	ldr	r2, [pc, #268]	@ (800b4d0 <shift_sub_rows+0x130>)
 800b3c4:	5c52      	ldrb	r2, [r2, r1]
 800b3c6:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	3308      	adds	r3, #8
 800b3cc:	781b      	ldrb	r3, [r3, #0]
 800b3ce:	4619      	mov	r1, r3
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	3308      	adds	r3, #8
 800b3d4:	4a3e      	ldr	r2, [pc, #248]	@ (800b4d0 <shift_sub_rows+0x130>)
 800b3d6:	5c52      	ldrb	r2, [r2, r1]
 800b3d8:	701a      	strb	r2, [r3, #0]
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	330c      	adds	r3, #12
 800b3de:	781b      	ldrb	r3, [r3, #0]
 800b3e0:	4619      	mov	r1, r3
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	330c      	adds	r3, #12
 800b3e6:	4a3a      	ldr	r2, [pc, #232]	@ (800b4d0 <shift_sub_rows+0x130>)
 800b3e8:	5c52      	ldrb	r2, [r2, r1]
 800b3ea:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	785b      	ldrb	r3, [r3, #1]
 800b3f0:	73fb      	strb	r3, [r7, #15]
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	3305      	adds	r3, #5
 800b3f6:	781b      	ldrb	r3, [r3, #0]
 800b3f8:	4619      	mov	r1, r3
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	3301      	adds	r3, #1
 800b3fe:	4a34      	ldr	r2, [pc, #208]	@ (800b4d0 <shift_sub_rows+0x130>)
 800b400:	5c52      	ldrb	r2, [r2, r1]
 800b402:	701a      	strb	r2, [r3, #0]
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	3309      	adds	r3, #9
 800b408:	781b      	ldrb	r3, [r3, #0]
 800b40a:	4619      	mov	r1, r3
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	3305      	adds	r3, #5
 800b410:	4a2f      	ldr	r2, [pc, #188]	@ (800b4d0 <shift_sub_rows+0x130>)
 800b412:	5c52      	ldrb	r2, [r2, r1]
 800b414:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	330d      	adds	r3, #13
 800b41a:	781b      	ldrb	r3, [r3, #0]
 800b41c:	4619      	mov	r1, r3
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	3309      	adds	r3, #9
 800b422:	4a2b      	ldr	r2, [pc, #172]	@ (800b4d0 <shift_sub_rows+0x130>)
 800b424:	5c52      	ldrb	r2, [r2, r1]
 800b426:	701a      	strb	r2, [r3, #0]
 800b428:	7bfa      	ldrb	r2, [r7, #15]
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	330d      	adds	r3, #13
 800b42e:	4928      	ldr	r1, [pc, #160]	@ (800b4d0 <shift_sub_rows+0x130>)
 800b430:	5c8a      	ldrb	r2, [r1, r2]
 800b432:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	789b      	ldrb	r3, [r3, #2]
 800b438:	73fb      	strb	r3, [r7, #15]
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	330a      	adds	r3, #10
 800b43e:	781b      	ldrb	r3, [r3, #0]
 800b440:	4619      	mov	r1, r3
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	3302      	adds	r3, #2
 800b446:	4a22      	ldr	r2, [pc, #136]	@ (800b4d0 <shift_sub_rows+0x130>)
 800b448:	5c52      	ldrb	r2, [r2, r1]
 800b44a:	701a      	strb	r2, [r3, #0]
 800b44c:	7bfa      	ldrb	r2, [r7, #15]
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	330a      	adds	r3, #10
 800b452:	491f      	ldr	r1, [pc, #124]	@ (800b4d0 <shift_sub_rows+0x130>)
 800b454:	5c8a      	ldrb	r2, [r1, r2]
 800b456:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	799b      	ldrb	r3, [r3, #6]
 800b45c:	73fb      	strb	r3, [r7, #15]
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	330e      	adds	r3, #14
 800b462:	781b      	ldrb	r3, [r3, #0]
 800b464:	4619      	mov	r1, r3
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	3306      	adds	r3, #6
 800b46a:	4a19      	ldr	r2, [pc, #100]	@ (800b4d0 <shift_sub_rows+0x130>)
 800b46c:	5c52      	ldrb	r2, [r2, r1]
 800b46e:	701a      	strb	r2, [r3, #0]
 800b470:	7bfa      	ldrb	r2, [r7, #15]
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	330e      	adds	r3, #14
 800b476:	4916      	ldr	r1, [pc, #88]	@ (800b4d0 <shift_sub_rows+0x130>)
 800b478:	5c8a      	ldrb	r2, [r1, r2]
 800b47a:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	7bdb      	ldrb	r3, [r3, #15]
 800b480:	73fb      	strb	r3, [r7, #15]
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	330b      	adds	r3, #11
 800b486:	781b      	ldrb	r3, [r3, #0]
 800b488:	4619      	mov	r1, r3
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	330f      	adds	r3, #15
 800b48e:	4a10      	ldr	r2, [pc, #64]	@ (800b4d0 <shift_sub_rows+0x130>)
 800b490:	5c52      	ldrb	r2, [r2, r1]
 800b492:	701a      	strb	r2, [r3, #0]
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	3307      	adds	r3, #7
 800b498:	781b      	ldrb	r3, [r3, #0]
 800b49a:	4619      	mov	r1, r3
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	330b      	adds	r3, #11
 800b4a0:	4a0b      	ldr	r2, [pc, #44]	@ (800b4d0 <shift_sub_rows+0x130>)
 800b4a2:	5c52      	ldrb	r2, [r2, r1]
 800b4a4:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	3303      	adds	r3, #3
 800b4aa:	781b      	ldrb	r3, [r3, #0]
 800b4ac:	4619      	mov	r1, r3
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	3307      	adds	r3, #7
 800b4b2:	4a07      	ldr	r2, [pc, #28]	@ (800b4d0 <shift_sub_rows+0x130>)
 800b4b4:	5c52      	ldrb	r2, [r2, r1]
 800b4b6:	701a      	strb	r2, [r3, #0]
 800b4b8:	7bfa      	ldrb	r2, [r7, #15]
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	3303      	adds	r3, #3
 800b4be:	4904      	ldr	r1, [pc, #16]	@ (800b4d0 <shift_sub_rows+0x130>)
 800b4c0:	5c8a      	ldrb	r2, [r1, r2]
 800b4c2:	701a      	strb	r2, [r3, #0]
}
 800b4c4:	bf00      	nop
 800b4c6:	3714      	adds	r7, #20
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	bc80      	pop	{r7}
 800b4cc:	4770      	bx	lr
 800b4ce:	bf00      	nop
 800b4d0:	0801f094 	.word	0x0801f094

0800b4d4 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	b086      	sub	sp, #24
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800b4dc:	f107 0308 	add.w	r3, r7, #8
 800b4e0:	6879      	ldr	r1, [r7, #4]
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	f7ff fd6c 	bl	800afc0 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800b4e8:	7a3b      	ldrb	r3, [r7, #8]
 800b4ea:	461a      	mov	r2, r3
 800b4ec:	4b9a      	ldr	r3, [pc, #616]	@ (800b758 <mix_sub_columns+0x284>)
 800b4ee:	5c9a      	ldrb	r2, [r3, r2]
 800b4f0:	7b7b      	ldrb	r3, [r7, #13]
 800b4f2:	4619      	mov	r1, r3
 800b4f4:	4b99      	ldr	r3, [pc, #612]	@ (800b75c <mix_sub_columns+0x288>)
 800b4f6:	5c5b      	ldrb	r3, [r3, r1]
 800b4f8:	4053      	eors	r3, r2
 800b4fa:	b2da      	uxtb	r2, r3
 800b4fc:	7cbb      	ldrb	r3, [r7, #18]
 800b4fe:	4619      	mov	r1, r3
 800b500:	4b97      	ldr	r3, [pc, #604]	@ (800b760 <mix_sub_columns+0x28c>)
 800b502:	5c5b      	ldrb	r3, [r3, r1]
 800b504:	4053      	eors	r3, r2
 800b506:	b2da      	uxtb	r2, r3
 800b508:	7dfb      	ldrb	r3, [r7, #23]
 800b50a:	4619      	mov	r1, r3
 800b50c:	4b94      	ldr	r3, [pc, #592]	@ (800b760 <mix_sub_columns+0x28c>)
 800b50e:	5c5b      	ldrb	r3, [r3, r1]
 800b510:	4053      	eors	r3, r2
 800b512:	b2da      	uxtb	r2, r3
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800b518:	7a3b      	ldrb	r3, [r7, #8]
 800b51a:	461a      	mov	r2, r3
 800b51c:	4b90      	ldr	r3, [pc, #576]	@ (800b760 <mix_sub_columns+0x28c>)
 800b51e:	5c9a      	ldrb	r2, [r3, r2]
 800b520:	7b7b      	ldrb	r3, [r7, #13]
 800b522:	4619      	mov	r1, r3
 800b524:	4b8c      	ldr	r3, [pc, #560]	@ (800b758 <mix_sub_columns+0x284>)
 800b526:	5c5b      	ldrb	r3, [r3, r1]
 800b528:	4053      	eors	r3, r2
 800b52a:	b2da      	uxtb	r2, r3
 800b52c:	7cbb      	ldrb	r3, [r7, #18]
 800b52e:	4619      	mov	r1, r3
 800b530:	4b8a      	ldr	r3, [pc, #552]	@ (800b75c <mix_sub_columns+0x288>)
 800b532:	5c5b      	ldrb	r3, [r3, r1]
 800b534:	4053      	eors	r3, r2
 800b536:	b2d9      	uxtb	r1, r3
 800b538:	7dfb      	ldrb	r3, [r7, #23]
 800b53a:	461a      	mov	r2, r3
 800b53c:	4b88      	ldr	r3, [pc, #544]	@ (800b760 <mix_sub_columns+0x28c>)
 800b53e:	5c9a      	ldrb	r2, [r3, r2]
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	3301      	adds	r3, #1
 800b544:	404a      	eors	r2, r1
 800b546:	b2d2      	uxtb	r2, r2
 800b548:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800b54a:	7a3b      	ldrb	r3, [r7, #8]
 800b54c:	461a      	mov	r2, r3
 800b54e:	4b84      	ldr	r3, [pc, #528]	@ (800b760 <mix_sub_columns+0x28c>)
 800b550:	5c9a      	ldrb	r2, [r3, r2]
 800b552:	7b7b      	ldrb	r3, [r7, #13]
 800b554:	4619      	mov	r1, r3
 800b556:	4b82      	ldr	r3, [pc, #520]	@ (800b760 <mix_sub_columns+0x28c>)
 800b558:	5c5b      	ldrb	r3, [r3, r1]
 800b55a:	4053      	eors	r3, r2
 800b55c:	b2da      	uxtb	r2, r3
 800b55e:	7cbb      	ldrb	r3, [r7, #18]
 800b560:	4619      	mov	r1, r3
 800b562:	4b7d      	ldr	r3, [pc, #500]	@ (800b758 <mix_sub_columns+0x284>)
 800b564:	5c5b      	ldrb	r3, [r3, r1]
 800b566:	4053      	eors	r3, r2
 800b568:	b2d9      	uxtb	r1, r3
 800b56a:	7dfb      	ldrb	r3, [r7, #23]
 800b56c:	461a      	mov	r2, r3
 800b56e:	4b7b      	ldr	r3, [pc, #492]	@ (800b75c <mix_sub_columns+0x288>)
 800b570:	5c9a      	ldrb	r2, [r3, r2]
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	3302      	adds	r3, #2
 800b576:	404a      	eors	r2, r1
 800b578:	b2d2      	uxtb	r2, r2
 800b57a:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800b57c:	7a3b      	ldrb	r3, [r7, #8]
 800b57e:	461a      	mov	r2, r3
 800b580:	4b76      	ldr	r3, [pc, #472]	@ (800b75c <mix_sub_columns+0x288>)
 800b582:	5c9a      	ldrb	r2, [r3, r2]
 800b584:	7b7b      	ldrb	r3, [r7, #13]
 800b586:	4619      	mov	r1, r3
 800b588:	4b75      	ldr	r3, [pc, #468]	@ (800b760 <mix_sub_columns+0x28c>)
 800b58a:	5c5b      	ldrb	r3, [r3, r1]
 800b58c:	4053      	eors	r3, r2
 800b58e:	b2da      	uxtb	r2, r3
 800b590:	7cbb      	ldrb	r3, [r7, #18]
 800b592:	4619      	mov	r1, r3
 800b594:	4b72      	ldr	r3, [pc, #456]	@ (800b760 <mix_sub_columns+0x28c>)
 800b596:	5c5b      	ldrb	r3, [r3, r1]
 800b598:	4053      	eors	r3, r2
 800b59a:	b2d9      	uxtb	r1, r3
 800b59c:	7dfb      	ldrb	r3, [r7, #23]
 800b59e:	461a      	mov	r2, r3
 800b5a0:	4b6d      	ldr	r3, [pc, #436]	@ (800b758 <mix_sub_columns+0x284>)
 800b5a2:	5c9a      	ldrb	r2, [r3, r2]
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	3303      	adds	r3, #3
 800b5a8:	404a      	eors	r2, r1
 800b5aa:	b2d2      	uxtb	r2, r2
 800b5ac:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800b5ae:	7b3b      	ldrb	r3, [r7, #12]
 800b5b0:	461a      	mov	r2, r3
 800b5b2:	4b69      	ldr	r3, [pc, #420]	@ (800b758 <mix_sub_columns+0x284>)
 800b5b4:	5c9a      	ldrb	r2, [r3, r2]
 800b5b6:	7c7b      	ldrb	r3, [r7, #17]
 800b5b8:	4619      	mov	r1, r3
 800b5ba:	4b68      	ldr	r3, [pc, #416]	@ (800b75c <mix_sub_columns+0x288>)
 800b5bc:	5c5b      	ldrb	r3, [r3, r1]
 800b5be:	4053      	eors	r3, r2
 800b5c0:	b2da      	uxtb	r2, r3
 800b5c2:	7dbb      	ldrb	r3, [r7, #22]
 800b5c4:	4619      	mov	r1, r3
 800b5c6:	4b66      	ldr	r3, [pc, #408]	@ (800b760 <mix_sub_columns+0x28c>)
 800b5c8:	5c5b      	ldrb	r3, [r3, r1]
 800b5ca:	4053      	eors	r3, r2
 800b5cc:	b2d9      	uxtb	r1, r3
 800b5ce:	7afb      	ldrb	r3, [r7, #11]
 800b5d0:	461a      	mov	r2, r3
 800b5d2:	4b63      	ldr	r3, [pc, #396]	@ (800b760 <mix_sub_columns+0x28c>)
 800b5d4:	5c9a      	ldrb	r2, [r3, r2]
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	3304      	adds	r3, #4
 800b5da:	404a      	eors	r2, r1
 800b5dc:	b2d2      	uxtb	r2, r2
 800b5de:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800b5e0:	7b3b      	ldrb	r3, [r7, #12]
 800b5e2:	461a      	mov	r2, r3
 800b5e4:	4b5e      	ldr	r3, [pc, #376]	@ (800b760 <mix_sub_columns+0x28c>)
 800b5e6:	5c9a      	ldrb	r2, [r3, r2]
 800b5e8:	7c7b      	ldrb	r3, [r7, #17]
 800b5ea:	4619      	mov	r1, r3
 800b5ec:	4b5a      	ldr	r3, [pc, #360]	@ (800b758 <mix_sub_columns+0x284>)
 800b5ee:	5c5b      	ldrb	r3, [r3, r1]
 800b5f0:	4053      	eors	r3, r2
 800b5f2:	b2da      	uxtb	r2, r3
 800b5f4:	7dbb      	ldrb	r3, [r7, #22]
 800b5f6:	4619      	mov	r1, r3
 800b5f8:	4b58      	ldr	r3, [pc, #352]	@ (800b75c <mix_sub_columns+0x288>)
 800b5fa:	5c5b      	ldrb	r3, [r3, r1]
 800b5fc:	4053      	eors	r3, r2
 800b5fe:	b2d9      	uxtb	r1, r3
 800b600:	7afb      	ldrb	r3, [r7, #11]
 800b602:	461a      	mov	r2, r3
 800b604:	4b56      	ldr	r3, [pc, #344]	@ (800b760 <mix_sub_columns+0x28c>)
 800b606:	5c9a      	ldrb	r2, [r3, r2]
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	3305      	adds	r3, #5
 800b60c:	404a      	eors	r2, r1
 800b60e:	b2d2      	uxtb	r2, r2
 800b610:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800b612:	7b3b      	ldrb	r3, [r7, #12]
 800b614:	461a      	mov	r2, r3
 800b616:	4b52      	ldr	r3, [pc, #328]	@ (800b760 <mix_sub_columns+0x28c>)
 800b618:	5c9a      	ldrb	r2, [r3, r2]
 800b61a:	7c7b      	ldrb	r3, [r7, #17]
 800b61c:	4619      	mov	r1, r3
 800b61e:	4b50      	ldr	r3, [pc, #320]	@ (800b760 <mix_sub_columns+0x28c>)
 800b620:	5c5b      	ldrb	r3, [r3, r1]
 800b622:	4053      	eors	r3, r2
 800b624:	b2da      	uxtb	r2, r3
 800b626:	7dbb      	ldrb	r3, [r7, #22]
 800b628:	4619      	mov	r1, r3
 800b62a:	4b4b      	ldr	r3, [pc, #300]	@ (800b758 <mix_sub_columns+0x284>)
 800b62c:	5c5b      	ldrb	r3, [r3, r1]
 800b62e:	4053      	eors	r3, r2
 800b630:	b2d9      	uxtb	r1, r3
 800b632:	7afb      	ldrb	r3, [r7, #11]
 800b634:	461a      	mov	r2, r3
 800b636:	4b49      	ldr	r3, [pc, #292]	@ (800b75c <mix_sub_columns+0x288>)
 800b638:	5c9a      	ldrb	r2, [r3, r2]
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	3306      	adds	r3, #6
 800b63e:	404a      	eors	r2, r1
 800b640:	b2d2      	uxtb	r2, r2
 800b642:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800b644:	7b3b      	ldrb	r3, [r7, #12]
 800b646:	461a      	mov	r2, r3
 800b648:	4b44      	ldr	r3, [pc, #272]	@ (800b75c <mix_sub_columns+0x288>)
 800b64a:	5c9a      	ldrb	r2, [r3, r2]
 800b64c:	7c7b      	ldrb	r3, [r7, #17]
 800b64e:	4619      	mov	r1, r3
 800b650:	4b43      	ldr	r3, [pc, #268]	@ (800b760 <mix_sub_columns+0x28c>)
 800b652:	5c5b      	ldrb	r3, [r3, r1]
 800b654:	4053      	eors	r3, r2
 800b656:	b2da      	uxtb	r2, r3
 800b658:	7dbb      	ldrb	r3, [r7, #22]
 800b65a:	4619      	mov	r1, r3
 800b65c:	4b40      	ldr	r3, [pc, #256]	@ (800b760 <mix_sub_columns+0x28c>)
 800b65e:	5c5b      	ldrb	r3, [r3, r1]
 800b660:	4053      	eors	r3, r2
 800b662:	b2d9      	uxtb	r1, r3
 800b664:	7afb      	ldrb	r3, [r7, #11]
 800b666:	461a      	mov	r2, r3
 800b668:	4b3b      	ldr	r3, [pc, #236]	@ (800b758 <mix_sub_columns+0x284>)
 800b66a:	5c9a      	ldrb	r2, [r3, r2]
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	3307      	adds	r3, #7
 800b670:	404a      	eors	r2, r1
 800b672:	b2d2      	uxtb	r2, r2
 800b674:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800b676:	7c3b      	ldrb	r3, [r7, #16]
 800b678:	461a      	mov	r2, r3
 800b67a:	4b37      	ldr	r3, [pc, #220]	@ (800b758 <mix_sub_columns+0x284>)
 800b67c:	5c9a      	ldrb	r2, [r3, r2]
 800b67e:	7d7b      	ldrb	r3, [r7, #21]
 800b680:	4619      	mov	r1, r3
 800b682:	4b36      	ldr	r3, [pc, #216]	@ (800b75c <mix_sub_columns+0x288>)
 800b684:	5c5b      	ldrb	r3, [r3, r1]
 800b686:	4053      	eors	r3, r2
 800b688:	b2da      	uxtb	r2, r3
 800b68a:	7abb      	ldrb	r3, [r7, #10]
 800b68c:	4619      	mov	r1, r3
 800b68e:	4b34      	ldr	r3, [pc, #208]	@ (800b760 <mix_sub_columns+0x28c>)
 800b690:	5c5b      	ldrb	r3, [r3, r1]
 800b692:	4053      	eors	r3, r2
 800b694:	b2d9      	uxtb	r1, r3
 800b696:	7bfb      	ldrb	r3, [r7, #15]
 800b698:	461a      	mov	r2, r3
 800b69a:	4b31      	ldr	r3, [pc, #196]	@ (800b760 <mix_sub_columns+0x28c>)
 800b69c:	5c9a      	ldrb	r2, [r3, r2]
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	3308      	adds	r3, #8
 800b6a2:	404a      	eors	r2, r1
 800b6a4:	b2d2      	uxtb	r2, r2
 800b6a6:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800b6a8:	7c3b      	ldrb	r3, [r7, #16]
 800b6aa:	461a      	mov	r2, r3
 800b6ac:	4b2c      	ldr	r3, [pc, #176]	@ (800b760 <mix_sub_columns+0x28c>)
 800b6ae:	5c9a      	ldrb	r2, [r3, r2]
 800b6b0:	7d7b      	ldrb	r3, [r7, #21]
 800b6b2:	4619      	mov	r1, r3
 800b6b4:	4b28      	ldr	r3, [pc, #160]	@ (800b758 <mix_sub_columns+0x284>)
 800b6b6:	5c5b      	ldrb	r3, [r3, r1]
 800b6b8:	4053      	eors	r3, r2
 800b6ba:	b2da      	uxtb	r2, r3
 800b6bc:	7abb      	ldrb	r3, [r7, #10]
 800b6be:	4619      	mov	r1, r3
 800b6c0:	4b26      	ldr	r3, [pc, #152]	@ (800b75c <mix_sub_columns+0x288>)
 800b6c2:	5c5b      	ldrb	r3, [r3, r1]
 800b6c4:	4053      	eors	r3, r2
 800b6c6:	b2d9      	uxtb	r1, r3
 800b6c8:	7bfb      	ldrb	r3, [r7, #15]
 800b6ca:	461a      	mov	r2, r3
 800b6cc:	4b24      	ldr	r3, [pc, #144]	@ (800b760 <mix_sub_columns+0x28c>)
 800b6ce:	5c9a      	ldrb	r2, [r3, r2]
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	3309      	adds	r3, #9
 800b6d4:	404a      	eors	r2, r1
 800b6d6:	b2d2      	uxtb	r2, r2
 800b6d8:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800b6da:	7c3b      	ldrb	r3, [r7, #16]
 800b6dc:	461a      	mov	r2, r3
 800b6de:	4b20      	ldr	r3, [pc, #128]	@ (800b760 <mix_sub_columns+0x28c>)
 800b6e0:	5c9a      	ldrb	r2, [r3, r2]
 800b6e2:	7d7b      	ldrb	r3, [r7, #21]
 800b6e4:	4619      	mov	r1, r3
 800b6e6:	4b1e      	ldr	r3, [pc, #120]	@ (800b760 <mix_sub_columns+0x28c>)
 800b6e8:	5c5b      	ldrb	r3, [r3, r1]
 800b6ea:	4053      	eors	r3, r2
 800b6ec:	b2da      	uxtb	r2, r3
 800b6ee:	7abb      	ldrb	r3, [r7, #10]
 800b6f0:	4619      	mov	r1, r3
 800b6f2:	4b19      	ldr	r3, [pc, #100]	@ (800b758 <mix_sub_columns+0x284>)
 800b6f4:	5c5b      	ldrb	r3, [r3, r1]
 800b6f6:	4053      	eors	r3, r2
 800b6f8:	b2d9      	uxtb	r1, r3
 800b6fa:	7bfb      	ldrb	r3, [r7, #15]
 800b6fc:	461a      	mov	r2, r3
 800b6fe:	4b17      	ldr	r3, [pc, #92]	@ (800b75c <mix_sub_columns+0x288>)
 800b700:	5c9a      	ldrb	r2, [r3, r2]
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	330a      	adds	r3, #10
 800b706:	404a      	eors	r2, r1
 800b708:	b2d2      	uxtb	r2, r2
 800b70a:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800b70c:	7c3b      	ldrb	r3, [r7, #16]
 800b70e:	461a      	mov	r2, r3
 800b710:	4b12      	ldr	r3, [pc, #72]	@ (800b75c <mix_sub_columns+0x288>)
 800b712:	5c9a      	ldrb	r2, [r3, r2]
 800b714:	7d7b      	ldrb	r3, [r7, #21]
 800b716:	4619      	mov	r1, r3
 800b718:	4b11      	ldr	r3, [pc, #68]	@ (800b760 <mix_sub_columns+0x28c>)
 800b71a:	5c5b      	ldrb	r3, [r3, r1]
 800b71c:	4053      	eors	r3, r2
 800b71e:	b2da      	uxtb	r2, r3
 800b720:	7abb      	ldrb	r3, [r7, #10]
 800b722:	4619      	mov	r1, r3
 800b724:	4b0e      	ldr	r3, [pc, #56]	@ (800b760 <mix_sub_columns+0x28c>)
 800b726:	5c5b      	ldrb	r3, [r3, r1]
 800b728:	4053      	eors	r3, r2
 800b72a:	b2d9      	uxtb	r1, r3
 800b72c:	7bfb      	ldrb	r3, [r7, #15]
 800b72e:	461a      	mov	r2, r3
 800b730:	4b09      	ldr	r3, [pc, #36]	@ (800b758 <mix_sub_columns+0x284>)
 800b732:	5c9a      	ldrb	r2, [r3, r2]
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	330b      	adds	r3, #11
 800b738:	404a      	eors	r2, r1
 800b73a:	b2d2      	uxtb	r2, r2
 800b73c:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800b73e:	7d3b      	ldrb	r3, [r7, #20]
 800b740:	461a      	mov	r2, r3
 800b742:	4b05      	ldr	r3, [pc, #20]	@ (800b758 <mix_sub_columns+0x284>)
 800b744:	5c9a      	ldrb	r2, [r3, r2]
 800b746:	7a7b      	ldrb	r3, [r7, #9]
 800b748:	4619      	mov	r1, r3
 800b74a:	4b04      	ldr	r3, [pc, #16]	@ (800b75c <mix_sub_columns+0x288>)
 800b74c:	5c5b      	ldrb	r3, [r3, r1]
 800b74e:	4053      	eors	r3, r2
 800b750:	b2da      	uxtb	r2, r3
 800b752:	7bbb      	ldrb	r3, [r7, #14]
 800b754:	4619      	mov	r1, r3
 800b756:	e005      	b.n	800b764 <mix_sub_columns+0x290>
 800b758:	0801f194 	.word	0x0801f194
 800b75c:	0801f294 	.word	0x0801f294
 800b760:	0801f094 	.word	0x0801f094
 800b764:	4b2d      	ldr	r3, [pc, #180]	@ (800b81c <mix_sub_columns+0x348>)
 800b766:	5c5b      	ldrb	r3, [r3, r1]
 800b768:	4053      	eors	r3, r2
 800b76a:	b2d9      	uxtb	r1, r3
 800b76c:	7cfb      	ldrb	r3, [r7, #19]
 800b76e:	461a      	mov	r2, r3
 800b770:	4b2a      	ldr	r3, [pc, #168]	@ (800b81c <mix_sub_columns+0x348>)
 800b772:	5c9a      	ldrb	r2, [r3, r2]
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	330c      	adds	r3, #12
 800b778:	404a      	eors	r2, r1
 800b77a:	b2d2      	uxtb	r2, r2
 800b77c:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800b77e:	7d3b      	ldrb	r3, [r7, #20]
 800b780:	461a      	mov	r2, r3
 800b782:	4b26      	ldr	r3, [pc, #152]	@ (800b81c <mix_sub_columns+0x348>)
 800b784:	5c9a      	ldrb	r2, [r3, r2]
 800b786:	7a7b      	ldrb	r3, [r7, #9]
 800b788:	4619      	mov	r1, r3
 800b78a:	4b25      	ldr	r3, [pc, #148]	@ (800b820 <mix_sub_columns+0x34c>)
 800b78c:	5c5b      	ldrb	r3, [r3, r1]
 800b78e:	4053      	eors	r3, r2
 800b790:	b2da      	uxtb	r2, r3
 800b792:	7bbb      	ldrb	r3, [r7, #14]
 800b794:	4619      	mov	r1, r3
 800b796:	4b23      	ldr	r3, [pc, #140]	@ (800b824 <mix_sub_columns+0x350>)
 800b798:	5c5b      	ldrb	r3, [r3, r1]
 800b79a:	4053      	eors	r3, r2
 800b79c:	b2d9      	uxtb	r1, r3
 800b79e:	7cfb      	ldrb	r3, [r7, #19]
 800b7a0:	461a      	mov	r2, r3
 800b7a2:	4b1e      	ldr	r3, [pc, #120]	@ (800b81c <mix_sub_columns+0x348>)
 800b7a4:	5c9a      	ldrb	r2, [r3, r2]
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	330d      	adds	r3, #13
 800b7aa:	404a      	eors	r2, r1
 800b7ac:	b2d2      	uxtb	r2, r2
 800b7ae:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800b7b0:	7d3b      	ldrb	r3, [r7, #20]
 800b7b2:	461a      	mov	r2, r3
 800b7b4:	4b19      	ldr	r3, [pc, #100]	@ (800b81c <mix_sub_columns+0x348>)
 800b7b6:	5c9a      	ldrb	r2, [r3, r2]
 800b7b8:	7a7b      	ldrb	r3, [r7, #9]
 800b7ba:	4619      	mov	r1, r3
 800b7bc:	4b17      	ldr	r3, [pc, #92]	@ (800b81c <mix_sub_columns+0x348>)
 800b7be:	5c5b      	ldrb	r3, [r3, r1]
 800b7c0:	4053      	eors	r3, r2
 800b7c2:	b2da      	uxtb	r2, r3
 800b7c4:	7bbb      	ldrb	r3, [r7, #14]
 800b7c6:	4619      	mov	r1, r3
 800b7c8:	4b15      	ldr	r3, [pc, #84]	@ (800b820 <mix_sub_columns+0x34c>)
 800b7ca:	5c5b      	ldrb	r3, [r3, r1]
 800b7cc:	4053      	eors	r3, r2
 800b7ce:	b2d9      	uxtb	r1, r3
 800b7d0:	7cfb      	ldrb	r3, [r7, #19]
 800b7d2:	461a      	mov	r2, r3
 800b7d4:	4b13      	ldr	r3, [pc, #76]	@ (800b824 <mix_sub_columns+0x350>)
 800b7d6:	5c9a      	ldrb	r2, [r3, r2]
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	330e      	adds	r3, #14
 800b7dc:	404a      	eors	r2, r1
 800b7de:	b2d2      	uxtb	r2, r2
 800b7e0:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800b7e2:	7d3b      	ldrb	r3, [r7, #20]
 800b7e4:	461a      	mov	r2, r3
 800b7e6:	4b0f      	ldr	r3, [pc, #60]	@ (800b824 <mix_sub_columns+0x350>)
 800b7e8:	5c9a      	ldrb	r2, [r3, r2]
 800b7ea:	7a7b      	ldrb	r3, [r7, #9]
 800b7ec:	4619      	mov	r1, r3
 800b7ee:	4b0b      	ldr	r3, [pc, #44]	@ (800b81c <mix_sub_columns+0x348>)
 800b7f0:	5c5b      	ldrb	r3, [r3, r1]
 800b7f2:	4053      	eors	r3, r2
 800b7f4:	b2da      	uxtb	r2, r3
 800b7f6:	7bbb      	ldrb	r3, [r7, #14]
 800b7f8:	4619      	mov	r1, r3
 800b7fa:	4b08      	ldr	r3, [pc, #32]	@ (800b81c <mix_sub_columns+0x348>)
 800b7fc:	5c5b      	ldrb	r3, [r3, r1]
 800b7fe:	4053      	eors	r3, r2
 800b800:	b2d9      	uxtb	r1, r3
 800b802:	7cfb      	ldrb	r3, [r7, #19]
 800b804:	461a      	mov	r2, r3
 800b806:	4b06      	ldr	r3, [pc, #24]	@ (800b820 <mix_sub_columns+0x34c>)
 800b808:	5c9a      	ldrb	r2, [r3, r2]
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	330f      	adds	r3, #15
 800b80e:	404a      	eors	r2, r1
 800b810:	b2d2      	uxtb	r2, r2
 800b812:	701a      	strb	r2, [r3, #0]
  }
 800b814:	bf00      	nop
 800b816:	3718      	adds	r7, #24
 800b818:	46bd      	mov	sp, r7
 800b81a:	bd80      	pop	{r7, pc}
 800b81c:	0801f094 	.word	0x0801f094
 800b820:	0801f194 	.word	0x0801f194
 800b824:	0801f294 	.word	0x0801f294

0800b828 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b086      	sub	sp, #24
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	60f8      	str	r0, [r7, #12]
 800b830:	460b      	mov	r3, r1
 800b832:	607a      	str	r2, [r7, #4]
 800b834:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800b836:	7afb      	ldrb	r3, [r7, #11]
 800b838:	3b10      	subs	r3, #16
 800b83a:	2b10      	cmp	r3, #16
 800b83c:	bf8c      	ite	hi
 800b83e:	2201      	movhi	r2, #1
 800b840:	2200      	movls	r2, #0
 800b842:	b2d2      	uxtb	r2, r2
 800b844:	2a00      	cmp	r2, #0
 800b846:	d10b      	bne.n	800b860 <lorawan_aes_set_key+0x38>
 800b848:	4a64      	ldr	r2, [pc, #400]	@ (800b9dc <lorawan_aes_set_key+0x1b4>)
 800b84a:	fa22 f303 	lsr.w	r3, r2, r3
 800b84e:	f003 0301 	and.w	r3, r3, #1
 800b852:	2b00      	cmp	r3, #0
 800b854:	bf14      	ite	ne
 800b856:	2301      	movne	r3, #1
 800b858:	2300      	moveq	r3, #0
 800b85a:	b2db      	uxtb	r3, r3
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d105      	bne.n	800b86c <lorawan_aes_set_key+0x44>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	2200      	movs	r2, #0
 800b864:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
        return ( uint8_t )-1;
 800b868:	23ff      	movs	r3, #255	@ 0xff
 800b86a:	e0b3      	b.n	800b9d4 <lorawan_aes_set_key+0x1ac>
        break;
 800b86c:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	7afa      	ldrb	r2, [r7, #11]
 800b872:	68f9      	ldr	r1, [r7, #12]
 800b874:	4618      	mov	r0, r3
 800b876:	f7ff fbfc 	bl	800b072 <copy_block_nn>
    hi = (keylen + 28) << 2;
 800b87a:	7afb      	ldrb	r3, [r7, #11]
 800b87c:	331c      	adds	r3, #28
 800b87e:	b2db      	uxtb	r3, r3
 800b880:	009b      	lsls	r3, r3, #2
 800b882:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800b884:	7c7b      	ldrb	r3, [r7, #17]
 800b886:	091b      	lsrs	r3, r3, #4
 800b888:	b2db      	uxtb	r3, r3
 800b88a:	3b01      	subs	r3, #1
 800b88c:	b2da      	uxtb	r2, r3
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800b894:	7afb      	ldrb	r3, [r7, #11]
 800b896:	75fb      	strb	r3, [r7, #23]
 800b898:	2301      	movs	r3, #1
 800b89a:	75bb      	strb	r3, [r7, #22]
 800b89c:	e094      	b.n	800b9c8 <lorawan_aes_set_key+0x1a0>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800b89e:	7dfb      	ldrb	r3, [r7, #23]
 800b8a0:	3b04      	subs	r3, #4
 800b8a2:	687a      	ldr	r2, [r7, #4]
 800b8a4:	5cd3      	ldrb	r3, [r2, r3]
 800b8a6:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800b8a8:	7dfb      	ldrb	r3, [r7, #23]
 800b8aa:	3b03      	subs	r3, #3
 800b8ac:	687a      	ldr	r2, [r7, #4]
 800b8ae:	5cd3      	ldrb	r3, [r2, r3]
 800b8b0:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800b8b2:	7dfb      	ldrb	r3, [r7, #23]
 800b8b4:	3b02      	subs	r3, #2
 800b8b6:	687a      	ldr	r2, [r7, #4]
 800b8b8:	5cd3      	ldrb	r3, [r2, r3]
 800b8ba:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800b8bc:	7dfb      	ldrb	r3, [r7, #23]
 800b8be:	3b01      	subs	r3, #1
 800b8c0:	687a      	ldr	r2, [r7, #4]
 800b8c2:	5cd3      	ldrb	r3, [r2, r3]
 800b8c4:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800b8c6:	7dfb      	ldrb	r3, [r7, #23]
 800b8c8:	7afa      	ldrb	r2, [r7, #11]
 800b8ca:	fbb3 f1f2 	udiv	r1, r3, r2
 800b8ce:	fb01 f202 	mul.w	r2, r1, r2
 800b8d2:	1a9b      	subs	r3, r3, r2
 800b8d4:	b2db      	uxtb	r3, r3
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d128      	bne.n	800b92c <lorawan_aes_set_key+0x104>
        {
            tt = t0;
 800b8da:	7d7b      	ldrb	r3, [r7, #21]
 800b8dc:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800b8de:	7d3b      	ldrb	r3, [r7, #20]
 800b8e0:	4a3f      	ldr	r2, [pc, #252]	@ (800b9e0 <lorawan_aes_set_key+0x1b8>)
 800b8e2:	5cd2      	ldrb	r2, [r2, r3]
 800b8e4:	7dbb      	ldrb	r3, [r7, #22]
 800b8e6:	4053      	eors	r3, r2
 800b8e8:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800b8ea:	7cfb      	ldrb	r3, [r7, #19]
 800b8ec:	4a3c      	ldr	r2, [pc, #240]	@ (800b9e0 <lorawan_aes_set_key+0x1b8>)
 800b8ee:	5cd3      	ldrb	r3, [r2, r3]
 800b8f0:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800b8f2:	7cbb      	ldrb	r3, [r7, #18]
 800b8f4:	4a3a      	ldr	r2, [pc, #232]	@ (800b9e0 <lorawan_aes_set_key+0x1b8>)
 800b8f6:	5cd3      	ldrb	r3, [r2, r3]
 800b8f8:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800b8fa:	7c3b      	ldrb	r3, [r7, #16]
 800b8fc:	4a38      	ldr	r2, [pc, #224]	@ (800b9e0 <lorawan_aes_set_key+0x1b8>)
 800b8fe:	5cd3      	ldrb	r3, [r2, r3]
 800b900:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800b902:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800b906:	005b      	lsls	r3, r3, #1
 800b908:	b25a      	sxtb	r2, r3
 800b90a:	7dbb      	ldrb	r3, [r7, #22]
 800b90c:	09db      	lsrs	r3, r3, #7
 800b90e:	b2db      	uxtb	r3, r3
 800b910:	b25b      	sxtb	r3, r3
 800b912:	4619      	mov	r1, r3
 800b914:	0049      	lsls	r1, r1, #1
 800b916:	440b      	add	r3, r1
 800b918:	4619      	mov	r1, r3
 800b91a:	00c8      	lsls	r0, r1, #3
 800b91c:	4619      	mov	r1, r3
 800b91e:	4603      	mov	r3, r0
 800b920:	440b      	add	r3, r1
 800b922:	b25b      	sxtb	r3, r3
 800b924:	4053      	eors	r3, r2
 800b926:	b25b      	sxtb	r3, r3
 800b928:	75bb      	strb	r3, [r7, #22]
 800b92a:	e01c      	b.n	800b966 <lorawan_aes_set_key+0x13e>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800b92c:	7afb      	ldrb	r3, [r7, #11]
 800b92e:	2b18      	cmp	r3, #24
 800b930:	d919      	bls.n	800b966 <lorawan_aes_set_key+0x13e>
 800b932:	7dfb      	ldrb	r3, [r7, #23]
 800b934:	7afa      	ldrb	r2, [r7, #11]
 800b936:	fbb3 f1f2 	udiv	r1, r3, r2
 800b93a:	fb01 f202 	mul.w	r2, r1, r2
 800b93e:	1a9b      	subs	r3, r3, r2
 800b940:	b2db      	uxtb	r3, r3
 800b942:	2b10      	cmp	r3, #16
 800b944:	d10f      	bne.n	800b966 <lorawan_aes_set_key+0x13e>
        {
            t0 = s_box(t0);
 800b946:	7d7b      	ldrb	r3, [r7, #21]
 800b948:	4a25      	ldr	r2, [pc, #148]	@ (800b9e0 <lorawan_aes_set_key+0x1b8>)
 800b94a:	5cd3      	ldrb	r3, [r2, r3]
 800b94c:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800b94e:	7d3b      	ldrb	r3, [r7, #20]
 800b950:	4a23      	ldr	r2, [pc, #140]	@ (800b9e0 <lorawan_aes_set_key+0x1b8>)
 800b952:	5cd3      	ldrb	r3, [r2, r3]
 800b954:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800b956:	7cfb      	ldrb	r3, [r7, #19]
 800b958:	4a21      	ldr	r2, [pc, #132]	@ (800b9e0 <lorawan_aes_set_key+0x1b8>)
 800b95a:	5cd3      	ldrb	r3, [r2, r3]
 800b95c:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800b95e:	7cbb      	ldrb	r3, [r7, #18]
 800b960:	4a1f      	ldr	r2, [pc, #124]	@ (800b9e0 <lorawan_aes_set_key+0x1b8>)
 800b962:	5cd3      	ldrb	r3, [r2, r3]
 800b964:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800b966:	7dfa      	ldrb	r2, [r7, #23]
 800b968:	7afb      	ldrb	r3, [r7, #11]
 800b96a:	1ad3      	subs	r3, r2, r3
 800b96c:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800b96e:	7c3b      	ldrb	r3, [r7, #16]
 800b970:	687a      	ldr	r2, [r7, #4]
 800b972:	5cd1      	ldrb	r1, [r2, r3]
 800b974:	7dfb      	ldrb	r3, [r7, #23]
 800b976:	7d7a      	ldrb	r2, [r7, #21]
 800b978:	404a      	eors	r2, r1
 800b97a:	b2d1      	uxtb	r1, r2
 800b97c:	687a      	ldr	r2, [r7, #4]
 800b97e:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800b980:	7c3b      	ldrb	r3, [r7, #16]
 800b982:	3301      	adds	r3, #1
 800b984:	687a      	ldr	r2, [r7, #4]
 800b986:	5cd1      	ldrb	r1, [r2, r3]
 800b988:	7dfb      	ldrb	r3, [r7, #23]
 800b98a:	3301      	adds	r3, #1
 800b98c:	7d3a      	ldrb	r2, [r7, #20]
 800b98e:	404a      	eors	r2, r1
 800b990:	b2d1      	uxtb	r1, r2
 800b992:	687a      	ldr	r2, [r7, #4]
 800b994:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800b996:	7c3b      	ldrb	r3, [r7, #16]
 800b998:	3302      	adds	r3, #2
 800b99a:	687a      	ldr	r2, [r7, #4]
 800b99c:	5cd1      	ldrb	r1, [r2, r3]
 800b99e:	7dfb      	ldrb	r3, [r7, #23]
 800b9a0:	3302      	adds	r3, #2
 800b9a2:	7cfa      	ldrb	r2, [r7, #19]
 800b9a4:	404a      	eors	r2, r1
 800b9a6:	b2d1      	uxtb	r1, r2
 800b9a8:	687a      	ldr	r2, [r7, #4]
 800b9aa:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800b9ac:	7c3b      	ldrb	r3, [r7, #16]
 800b9ae:	3303      	adds	r3, #3
 800b9b0:	687a      	ldr	r2, [r7, #4]
 800b9b2:	5cd1      	ldrb	r1, [r2, r3]
 800b9b4:	7dfb      	ldrb	r3, [r7, #23]
 800b9b6:	3303      	adds	r3, #3
 800b9b8:	7cba      	ldrb	r2, [r7, #18]
 800b9ba:	404a      	eors	r2, r1
 800b9bc:	b2d1      	uxtb	r1, r2
 800b9be:	687a      	ldr	r2, [r7, #4]
 800b9c0:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800b9c2:	7dfb      	ldrb	r3, [r7, #23]
 800b9c4:	3304      	adds	r3, #4
 800b9c6:	75fb      	strb	r3, [r7, #23]
 800b9c8:	7dfa      	ldrb	r2, [r7, #23]
 800b9ca:	7c7b      	ldrb	r3, [r7, #17]
 800b9cc:	429a      	cmp	r2, r3
 800b9ce:	f4ff af66 	bcc.w	800b89e <lorawan_aes_set_key+0x76>
    }
    return 0;
 800b9d2:	2300      	movs	r3, #0
}
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	3718      	adds	r7, #24
 800b9d8:	46bd      	mov	sp, r7
 800b9da:	bd80      	pop	{r7, pc}
 800b9dc:	00010101 	.word	0x00010101
 800b9e0:	0801f094 	.word	0x0801f094

0800b9e4 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b08a      	sub	sp, #40	@ 0x28
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	60f8      	str	r0, [r7, #12]
 800b9ec:	60b9      	str	r1, [r7, #8]
 800b9ee:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d038      	beq.n	800ba6c <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800b9fa:	687a      	ldr	r2, [r7, #4]
 800b9fc:	f107 0314 	add.w	r3, r7, #20
 800ba00:	68f9      	ldr	r1, [r7, #12]
 800ba02:	4618      	mov	r0, r3
 800ba04:	f7ff fc07 	bl	800b216 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800ba08:	2301      	movs	r3, #1
 800ba0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ba0e:	e014      	b.n	800ba3a <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800ba10:	f107 0314 	add.w	r3, r7, #20
 800ba14:	4618      	mov	r0, r3
 800ba16:	f7ff fd5d 	bl	800b4d4 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800ba20:	0112      	lsls	r2, r2, #4
 800ba22:	441a      	add	r2, r3
 800ba24:	f107 0314 	add.w	r3, r7, #20
 800ba28:	4611      	mov	r1, r2
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	f7ff fcab 	bl	800b386 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800ba30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ba34:	3301      	adds	r3, #1
 800ba36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800ba40:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800ba44:	429a      	cmp	r2, r3
 800ba46:	d3e3      	bcc.n	800ba10 <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800ba48:	f107 0314 	add.w	r3, r7, #20
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	f7ff fca7 	bl	800b3a0 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800ba58:	0112      	lsls	r2, r2, #4
 800ba5a:	441a      	add	r2, r3
 800ba5c:	f107 0314 	add.w	r3, r7, #20
 800ba60:	4619      	mov	r1, r3
 800ba62:	68b8      	ldr	r0, [r7, #8]
 800ba64:	f7ff fbd7 	bl	800b216 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800ba68:	2300      	movs	r3, #0
 800ba6a:	e000      	b.n	800ba6e <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800ba6c:	23ff      	movs	r3, #255	@ 0xff
}
 800ba6e:	4618      	mov	r0, r3
 800ba70:	3728      	adds	r7, #40	@ 0x28
 800ba72:	46bd      	mov	sp, r7
 800ba74:	bd80      	pop	{r7, pc}
	...

0800ba78 <PrintKey>:
static SecureElementStatus_t ComputeCmac(uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID,
                                         uint32_t *cmac);

/* Private functions ---------------------------------------------------------*/
static void PrintKey( KeyIdentifier_t key )
{
 800ba78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba7a:	b09d      	sub	sp, #116	@ 0x74
 800ba7c:	af10      	add	r7, sp, #64	@ 0x40
 800ba7e:	4603      	mov	r3, r0
 800ba80:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800ba84:	2306      	movs	r3, #6
 800ba86:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    Key_t *keyItem;
    retval = SecureElementGetKeyByID(key, &keyItem);
 800ba8a:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800ba8e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ba92:	4611      	mov	r1, r2
 800ba94:	4618      	mov	r0, r3
 800ba96:	f000 f9a7 	bl	800bde8 <SecureElementGetKeyByID>
 800ba9a:	4603      	mov	r3, r0
 800ba9c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
#else
    uint8_t extractable_key[16] = {0};
    retval = SecureElementGetKeyByID(key, (uint8_t*)extractable_key);
#endif /* LORAWAN_KMS */
    if (retval == SECURE_ELEMENT_SUCCESS)
 800baa0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	f040 80b0 	bne.w	800bc0a <PrintKey+0x192>
    {
        if (key == APP_KEY)
 800baaa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d106      	bne.n	800bac0 <PrintKey+0x48>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppKey:      ");
 800bab2:	4b58      	ldr	r3, [pc, #352]	@ (800bc14 <PrintKey+0x19c>)
 800bab4:	2200      	movs	r2, #0
 800bab6:	2100      	movs	r1, #0
 800bab8:	2002      	movs	r0, #2
 800baba:	f00f fd91 	bl	801b5e0 <UTIL_ADV_TRACE_COND_FSend>
 800babe:	e056      	b.n	800bb6e <PrintKey+0xf6>
        }
        else if (key == NWK_KEY)
 800bac0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bac4:	2b01      	cmp	r3, #1
 800bac6:	d106      	bne.n	800bad6 <PrintKey+0x5e>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkKey:      ");
 800bac8:	4b53      	ldr	r3, [pc, #332]	@ (800bc18 <PrintKey+0x1a0>)
 800baca:	2200      	movs	r2, #0
 800bacc:	2100      	movs	r1, #0
 800bace:	2002      	movs	r0, #2
 800bad0:	f00f fd86 	bl	801b5e0 <UTIL_ADV_TRACE_COND_FSend>
 800bad4:	e04b      	b.n	800bb6e <PrintKey+0xf6>
        }
        else if (key == APP_S_KEY)
 800bad6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bada:	2b03      	cmp	r3, #3
 800badc:	d106      	bne.n	800baec <PrintKey+0x74>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppSKey:     ");
 800bade:	4b4f      	ldr	r3, [pc, #316]	@ (800bc1c <PrintKey+0x1a4>)
 800bae0:	2200      	movs	r2, #0
 800bae2:	2100      	movs	r1, #0
 800bae4:	2002      	movs	r0, #2
 800bae6:	f00f fd7b 	bl	801b5e0 <UTIL_ADV_TRACE_COND_FSend>
 800baea:	e040      	b.n	800bb6e <PrintKey+0xf6>
        }
        else if (key == NWK_S_KEY)
 800baec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800baf0:	2b02      	cmp	r3, #2
 800baf2:	d106      	bne.n	800bb02 <PrintKey+0x8a>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey:     ");
 800baf4:	4b4a      	ldr	r3, [pc, #296]	@ (800bc20 <PrintKey+0x1a8>)
 800baf6:	2200      	movs	r2, #0
 800baf8:	2100      	movs	r1, #0
 800bafa:	2002      	movs	r0, #2
 800bafc:	f00f fd70 	bl	801b5e0 <UTIL_ADV_TRACE_COND_FSend>
 800bb00:	e035      	b.n	800bb6e <PrintKey+0xf6>
        }
        else if (key == MC_ROOT_KEY)
 800bb02:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bb06:	2b04      	cmp	r3, #4
 800bb08:	d106      	bne.n	800bb18 <PrintKey+0xa0>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCRootKey:   ");
 800bb0a:	4b46      	ldr	r3, [pc, #280]	@ (800bc24 <PrintKey+0x1ac>)
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	2100      	movs	r1, #0
 800bb10:	2002      	movs	r0, #2
 800bb12:	f00f fd65 	bl	801b5e0 <UTIL_ADV_TRACE_COND_FSend>
 800bb16:	e02a      	b.n	800bb6e <PrintKey+0xf6>
        }
        else if (key == MC_KE_KEY)
 800bb18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bb1c:	2b7f      	cmp	r3, #127	@ 0x7f
 800bb1e:	d106      	bne.n	800bb2e <PrintKey+0xb6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKEKey:     ");
 800bb20:	4b41      	ldr	r3, [pc, #260]	@ (800bc28 <PrintKey+0x1b0>)
 800bb22:	2200      	movs	r2, #0
 800bb24:	2100      	movs	r1, #0
 800bb26:	2002      	movs	r0, #2
 800bb28:	f00f fd5a 	bl	801b5e0 <UTIL_ADV_TRACE_COND_FSend>
 800bb2c:	e01f      	b.n	800bb6e <PrintKey+0xf6>
        }
        else if (key == MC_KEY_0)
 800bb2e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bb32:	2b80      	cmp	r3, #128	@ 0x80
 800bb34:	d106      	bne.n	800bb44 <PrintKey+0xcc>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKey_0:     ");
 800bb36:	4b3d      	ldr	r3, [pc, #244]	@ (800bc2c <PrintKey+0x1b4>)
 800bb38:	2200      	movs	r2, #0
 800bb3a:	2100      	movs	r1, #0
 800bb3c:	2002      	movs	r0, #2
 800bb3e:	f00f fd4f 	bl	801b5e0 <UTIL_ADV_TRACE_COND_FSend>
 800bb42:	e014      	b.n	800bb6e <PrintKey+0xf6>
        }
        else if (key == MC_APP_S_KEY_0)
 800bb44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bb48:	2b81      	cmp	r3, #129	@ 0x81
 800bb4a:	d106      	bne.n	800bb5a <PrintKey+0xe2>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCAppSKey_0: ");
 800bb4c:	4b38      	ldr	r3, [pc, #224]	@ (800bc30 <PrintKey+0x1b8>)
 800bb4e:	2200      	movs	r2, #0
 800bb50:	2100      	movs	r1, #0
 800bb52:	2002      	movs	r0, #2
 800bb54:	f00f fd44 	bl	801b5e0 <UTIL_ADV_TRACE_COND_FSend>
 800bb58:	e009      	b.n	800bb6e <PrintKey+0xf6>
        }
        else if (key == MC_NWK_S_KEY_0)
 800bb5a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bb5e:	2b82      	cmp	r3, #130	@ 0x82
 800bb60:	d105      	bne.n	800bb6e <PrintKey+0xf6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCNwkSKey_0: ");
 800bb62:	4b34      	ldr	r3, [pc, #208]	@ (800bc34 <PrintKey+0x1bc>)
 800bb64:	2200      	movs	r2, #0
 800bb66:	2100      	movs	r1, #0
 800bb68:	2002      	movs	r0, #2
 800bb6a:	f00f fd39 	bl	801b5e0 <UTIL_ADV_TRACE_COND_FSend>
        }
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800bb6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb70:	785b      	ldrb	r3, [r3, #1]
 800bb72:	4618      	mov	r0, r3
 800bb74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb76:	789b      	ldrb	r3, [r3, #2]
 800bb78:	461c      	mov	r4, r3
 800bb7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb7c:	78db      	ldrb	r3, [r3, #3]
 800bb7e:	461d      	mov	r5, r3
 800bb80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb82:	791b      	ldrb	r3, [r3, #4]
 800bb84:	461e      	mov	r6, r3
 800bb86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb88:	795b      	ldrb	r3, [r3, #5]
 800bb8a:	623b      	str	r3, [r7, #32]
 800bb8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb8e:	799b      	ldrb	r3, [r3, #6]
 800bb90:	61fb      	str	r3, [r7, #28]
 800bb92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb94:	79db      	ldrb	r3, [r3, #7]
 800bb96:	61bb      	str	r3, [r7, #24]
 800bb98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb9a:	7a1b      	ldrb	r3, [r3, #8]
 800bb9c:	617b      	str	r3, [r7, #20]
 800bb9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bba0:	7a5b      	ldrb	r3, [r3, #9]
 800bba2:	613b      	str	r3, [r7, #16]
 800bba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bba6:	7a9b      	ldrb	r3, [r3, #10]
 800bba8:	60fb      	str	r3, [r7, #12]
 800bbaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbac:	7adb      	ldrb	r3, [r3, #11]
 800bbae:	60bb      	str	r3, [r7, #8]
 800bbb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbb2:	7b1b      	ldrb	r3, [r3, #12]
 800bbb4:	607b      	str	r3, [r7, #4]
 800bbb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbb8:	7b5b      	ldrb	r3, [r3, #13]
 800bbba:	603b      	str	r3, [r7, #0]
 800bbbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbbe:	7b9b      	ldrb	r3, [r3, #14]
 800bbc0:	4619      	mov	r1, r3
 800bbc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbc4:	7bdb      	ldrb	r3, [r3, #15]
 800bbc6:	461a      	mov	r2, r3
 800bbc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbca:	7c1b      	ldrb	r3, [r3, #16]
 800bbcc:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bbce:	920e      	str	r2, [sp, #56]	@ 0x38
 800bbd0:	910d      	str	r1, [sp, #52]	@ 0x34
 800bbd2:	683a      	ldr	r2, [r7, #0]
 800bbd4:	920c      	str	r2, [sp, #48]	@ 0x30
 800bbd6:	687a      	ldr	r2, [r7, #4]
 800bbd8:	920b      	str	r2, [sp, #44]	@ 0x2c
 800bbda:	68ba      	ldr	r2, [r7, #8]
 800bbdc:	920a      	str	r2, [sp, #40]	@ 0x28
 800bbde:	68fa      	ldr	r2, [r7, #12]
 800bbe0:	9209      	str	r2, [sp, #36]	@ 0x24
 800bbe2:	693a      	ldr	r2, [r7, #16]
 800bbe4:	9208      	str	r2, [sp, #32]
 800bbe6:	697a      	ldr	r2, [r7, #20]
 800bbe8:	9207      	str	r2, [sp, #28]
 800bbea:	69ba      	ldr	r2, [r7, #24]
 800bbec:	9206      	str	r2, [sp, #24]
 800bbee:	69fa      	ldr	r2, [r7, #28]
 800bbf0:	9205      	str	r2, [sp, #20]
 800bbf2:	6a3b      	ldr	r3, [r7, #32]
 800bbf4:	9304      	str	r3, [sp, #16]
 800bbf6:	9603      	str	r6, [sp, #12]
 800bbf8:	9502      	str	r5, [sp, #8]
 800bbfa:	9401      	str	r4, [sp, #4]
 800bbfc:	9000      	str	r0, [sp, #0]
 800bbfe:	4b0e      	ldr	r3, [pc, #56]	@ (800bc38 <PrintKey+0x1c0>)
 800bc00:	2200      	movs	r2, #0
 800bc02:	2100      	movs	r1, #0
 800bc04:	2002      	movs	r0, #2
 800bc06:	f00f fceb 	bl	801b5e0 <UTIL_ADV_TRACE_COND_FSend>
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
               HEX16(extractable_key));
#endif /* LORAWAN_KMS */
    }
#endif /* KEY_EXTRACTABLE */
}
 800bc0a:	bf00      	nop
 800bc0c:	3734      	adds	r7, #52	@ 0x34
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc12:	bf00      	nop
 800bc14:	0801eb08 	.word	0x0801eb08
 800bc18:	0801eb20 	.word	0x0801eb20
 800bc1c:	0801eb38 	.word	0x0801eb38
 800bc20:	0801eb50 	.word	0x0801eb50
 800bc24:	0801eb68 	.word	0x0801eb68
 800bc28:	0801eb80 	.word	0x0801eb80
 800bc2c:	0801eb98 	.word	0x0801eb98
 800bc30:	0801ebb0 	.word	0x0801ebb0
 800bc34:	0801ebc8 	.word	0x0801ebc8
 800bc38:	0801ebe0 	.word	0x0801ebe0

0800bc3c <GetKeyByID>:
 * \param [in] keyID          - Key identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t** keyItem )
{
 800bc3c:	b480      	push	{r7}
 800bc3e:	b085      	sub	sp, #20
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	4603      	mov	r3, r0
 800bc44:	6039      	str	r1, [r7, #0]
 800bc46:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800bc48:	2300      	movs	r3, #0
 800bc4a:	73fb      	strb	r3, [r7, #15]
 800bc4c:	e01a      	b.n	800bc84 <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800bc4e:	4b12      	ldr	r3, [pc, #72]	@ (800bc98 <GetKeyByID+0x5c>)
 800bc50:	6819      	ldr	r1, [r3, #0]
 800bc52:	7bfa      	ldrb	r2, [r7, #15]
 800bc54:	4613      	mov	r3, r2
 800bc56:	011b      	lsls	r3, r3, #4
 800bc58:	4413      	add	r3, r2
 800bc5a:	440b      	add	r3, r1
 800bc5c:	3310      	adds	r3, #16
 800bc5e:	781b      	ldrb	r3, [r3, #0]
 800bc60:	79fa      	ldrb	r2, [r7, #7]
 800bc62:	429a      	cmp	r2, r3
 800bc64:	d10b      	bne.n	800bc7e <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800bc66:	4b0c      	ldr	r3, [pc, #48]	@ (800bc98 <GetKeyByID+0x5c>)
 800bc68:	6819      	ldr	r1, [r3, #0]
 800bc6a:	7bfa      	ldrb	r2, [r7, #15]
 800bc6c:	4613      	mov	r3, r2
 800bc6e:	011b      	lsls	r3, r3, #4
 800bc70:	4413      	add	r3, r2
 800bc72:	3310      	adds	r3, #16
 800bc74:	18ca      	adds	r2, r1, r3
 800bc76:	683b      	ldr	r3, [r7, #0]
 800bc78:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	e006      	b.n	800bc8c <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800bc7e:	7bfb      	ldrb	r3, [r7, #15]
 800bc80:	3301      	adds	r3, #1
 800bc82:	73fb      	strb	r3, [r7, #15]
 800bc84:	7bfb      	ldrb	r3, [r7, #15]
 800bc86:	2b09      	cmp	r3, #9
 800bc88:	d9e1      	bls.n	800bc4e <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800bc8a:	2303      	movs	r3, #3
}
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	3714      	adds	r7, #20
 800bc90:	46bd      	mov	sp, r7
 800bc92:	bc80      	pop	{r7}
 800bc94:	4770      	bx	lr
 800bc96:	bf00      	nop
 800bc98:	20000720 	.word	0x20000720

0800bc9c <ComputeCmac>:
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                          uint32_t* cmac )
{
 800bc9c:	b590      	push	{r4, r7, lr}
 800bc9e:	b0d1      	sub	sp, #324	@ 0x144
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	f507 74a0 	add.w	r4, r7, #320	@ 0x140
 800bca6:	f5a4 749a 	sub.w	r4, r4, #308	@ 0x134
 800bcaa:	6020      	str	r0, [r4, #0]
 800bcac:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 800bcb0:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 800bcb4:	6001      	str	r1, [r0, #0]
 800bcb6:	4619      	mov	r1, r3
 800bcb8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800bcbc:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 800bcc0:	801a      	strh	r2, [r3, #0]
 800bcc2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800bcc6:	f2a3 133b 	subw	r3, r3, #315	@ 0x13b
 800bcca:	460a      	mov	r2, r1
 800bccc:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800bcce:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800bcd2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d003      	beq.n	800bce4 <ComputeCmac+0x48>
 800bcdc:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d101      	bne.n	800bce8 <ComputeCmac+0x4c>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bce4:	2302      	movs	r3, #2
 800bce6:	e05c      	b.n	800bda2 <ComputeCmac+0x106>

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800bce8:	f107 0314 	add.w	r3, r7, #20
 800bcec:	4618      	mov	r0, r3
 800bcee:	f7fe ff17 	bl	800ab20 <AES_CMAC_Init>

    Key_t*                keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800bcf2:	f107 0210 	add.w	r2, r7, #16
 800bcf6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800bcfa:	f2a3 133b 	subw	r3, r3, #315	@ 0x13b
 800bcfe:	781b      	ldrb	r3, [r3, #0]
 800bd00:	4611      	mov	r1, r2
 800bd02:	4618      	mov	r0, r3
 800bd04:	f7ff ff9a 	bl	800bc3c <GetKeyByID>
 800bd08:	4603      	mov	r3, r0
 800bd0a:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800bd0e:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d143      	bne.n	800bd9e <ComputeCmac+0x102>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800bd16:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800bd1a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	1c5a      	adds	r2, r3, #1
 800bd22:	f107 0314 	add.w	r3, r7, #20
 800bd26:	4611      	mov	r1, r2
 800bd28:	4618      	mov	r0, r3
 800bd2a:	f7fe ff12 	bl	800ab52 <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800bd2e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800bd32:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d009      	beq.n	800bd50 <ComputeCmac+0xb4>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
 800bd3c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800bd40:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800bd44:	f107 0014 	add.w	r0, r7, #20
 800bd48:	2210      	movs	r2, #16
 800bd4a:	6819      	ldr	r1, [r3, #0]
 800bd4c:	f7fe ff10 	bl	800ab70 <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800bd50:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800bd54:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 800bd58:	881a      	ldrh	r2, [r3, #0]
 800bd5a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800bd5e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800bd62:	f107 0014 	add.w	r0, r7, #20
 800bd66:	6819      	ldr	r1, [r3, #0]
 800bd68:	f7fe ff02 	bl	800ab70 <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800bd6c:	f107 0214 	add.w	r2, r7, #20
 800bd70:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 800bd74:	4611      	mov	r1, r2
 800bd76:	4618      	mov	r0, r3
 800bd78:	f7fe ffbc 	bl	800acf4 <AES_CMAC_Final>

        // Bring into the required format
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800bd7c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800bd80:	061a      	lsls	r2, r3, #24
 800bd82:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 800bd86:	041b      	lsls	r3, r3, #16
 800bd88:	431a      	orrs	r2, r3
 800bd8a:	f897 312d 	ldrb.w	r3, [r7, #301]	@ 0x12d
 800bd8e:	021b      	lsls	r3, r3, #8
 800bd90:	4313      	orrs	r3, r2
                              ( uint32_t ) Cmac[0] );
 800bd92:	f897 212c 	ldrb.w	r2, [r7, #300]	@ 0x12c
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800bd96:	431a      	orrs	r2, r3
 800bd98:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800bd9c:	601a      	str	r2, [r3, #0]
    if (rv != CKR_OK)
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800bd9e:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
}
 800bda2:	4618      	mov	r0, r3
 800bda4:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	bd90      	pop	{r4, r7, pc}

0800bdac <SecureElementInit>:
/*
 * API functions
 */
/* ST_WORKAROUND: Add unique ID callback as input parameter */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm, SecureElementGetUniqueId seGetUniqueId )
{
 800bdac:	b580      	push	{r7, lr}
 800bdae:	b082      	sub	sp, #8
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	6078      	str	r0, [r7, #4]
 800bdb4:	6039      	str	r1, [r7, #0]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    if( nvm == NULL )
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d101      	bne.n	800bdc0 <SecureElementInit+0x14>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bdbc:	2302      	movs	r3, #2
 800bdbe:	e00a      	b.n	800bdd6 <SecureElementInit+0x2a>
    }

    // Initialize nvm pointer
    SeNvm = nvm;
 800bdc0:	4a07      	ldr	r2, [pc, #28]	@ (800bde0 <SecureElementInit+0x34>)
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	6013      	str	r3, [r2, #0]

    // Initialize data
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 800bdc6:	4b06      	ldr	r3, [pc, #24]	@ (800bde0 <SecureElementInit+0x34>)
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	22c0      	movs	r2, #192	@ 0xc0
 800bdcc:	4905      	ldr	r1, [pc, #20]	@ (800bde4 <SecureElementInit+0x38>)
 800bdce:	4618      	mov	r0, r3
 800bdd0:	f00b f8af 	bl	8016f32 <memcpy1>
        // Get a DevEUI from MCU unique ID
        seGetUniqueId(SeNvm->DevEui);
    }
#endif /* STATIC_DEVICE_EUI */
#endif /* !SECURE_ELEMENT_PRE_PROVISIONED */
    return SECURE_ELEMENT_SUCCESS;
 800bdd4:	2300      	movs	r3, #0
}
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	3708      	adds	r7, #8
 800bdda:	46bd      	mov	sp, r7
 800bddc:	bd80      	pop	{r7, pc}
 800bdde:	bf00      	nop
 800bde0:	20000720 	.word	0x20000720
 800bde4:	0801f924 	.word	0x0801f924

0800bde8 <SecureElementGetKeyByID>:
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem)
#else
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, uint8_t* extractable_key )
#endif /* LORAWAN_KMS */
{
 800bde8:	b480      	push	{r7}
 800bdea:	b085      	sub	sp, #20
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	4603      	mov	r3, r0
 800bdf0:	6039      	str	r1, [r7, #0]
 800bdf2:	71fb      	strb	r3, [r7, #7]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	73fb      	strb	r3, [r7, #15]
 800bdf8:	e01a      	b.n	800be30 <SecureElementGetKeyByID+0x48>
    {
        if (SeNvm->KeyList[i].KeyID == keyID)
 800bdfa:	4b12      	ldr	r3, [pc, #72]	@ (800be44 <SecureElementGetKeyByID+0x5c>)
 800bdfc:	6819      	ldr	r1, [r3, #0]
 800bdfe:	7bfa      	ldrb	r2, [r7, #15]
 800be00:	4613      	mov	r3, r2
 800be02:	011b      	lsls	r3, r3, #4
 800be04:	4413      	add	r3, r2
 800be06:	440b      	add	r3, r1
 800be08:	3310      	adds	r3, #16
 800be0a:	781b      	ldrb	r3, [r3, #0]
 800be0c:	79fa      	ldrb	r2, [r7, #7]
 800be0e:	429a      	cmp	r2, r3
 800be10:	d10b      	bne.n	800be2a <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &(SeNvm->KeyList[i]);
 800be12:	4b0c      	ldr	r3, [pc, #48]	@ (800be44 <SecureElementGetKeyByID+0x5c>)
 800be14:	6819      	ldr	r1, [r3, #0]
 800be16:	7bfa      	ldrb	r2, [r7, #15]
 800be18:	4613      	mov	r3, r2
 800be1a:	011b      	lsls	r3, r3, #4
 800be1c:	4413      	add	r3, r2
 800be1e:	3310      	adds	r3, #16
 800be20:	18ca      	adds	r2, r1, r3
 800be22:	683b      	ldr	r3, [r7, #0]
 800be24:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800be26:	2300      	movs	r3, #0
 800be28:	e006      	b.n	800be38 <SecureElementGetKeyByID+0x50>
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800be2a:	7bfb      	ldrb	r3, [r7, #15]
 800be2c:	3301      	adds	r3, #1
 800be2e:	73fb      	strb	r3, [r7, #15]
 800be30:	7bfb      	ldrb	r3, [r7, #15]
 800be32:	2b09      	cmp	r3, #9
 800be34:	d9e1      	bls.n	800bdfa <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800be36:	2303      	movs	r3, #3
        return SECURE_ELEMENT_ERROR;
    }
    return SECURE_ELEMENT_SUCCESS;

#endif /* LORAWAN_KMS == 1 */
}
 800be38:	4618      	mov	r0, r3
 800be3a:	3714      	adds	r7, #20
 800be3c:	46bd      	mov	sp, r7
 800be3e:	bc80      	pop	{r7}
 800be40:	4770      	bx	lr
 800be42:	bf00      	nop
 800be44:	20000720 	.word	0x20000720

0800be48 <SecureElementPrintKeys>:

SecureElementStatus_t SecureElementPrintKeys( void )
{
 800be48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be4a:	b08b      	sub	sp, #44	@ 0x2c
 800be4c:	af08      	add	r7, sp, #32
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    MW_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 800be4e:	4b3f      	ldr	r3, [pc, #252]	@ (800bf4c <SecureElementPrintKeys+0x104>)
 800be50:	2200      	movs	r2, #0
 800be52:	2100      	movs	r1, #0
 800be54:	2002      	movs	r0, #2
 800be56:	f00f fbc3 	bl	801b5e0 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_KEY);
 800be5a:	2000      	movs	r0, #0
 800be5c:	f7ff fe0c 	bl	800ba78 <PrintKey>
    PrintKey(NWK_KEY);
 800be60:	2001      	movs	r0, #1
 800be62:	f7ff fe09 	bl	800ba78 <PrintKey>
    MW_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
 800be66:	4b3a      	ldr	r3, [pc, #232]	@ (800bf50 <SecureElementPrintKeys+0x108>)
 800be68:	2200      	movs	r2, #0
 800be6a:	2100      	movs	r1, #0
 800be6c:	2002      	movs	r0, #2
 800be6e:	f00f fbb7 	bl	801b5e0 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_S_KEY);
 800be72:	2003      	movs	r0, #3
 800be74:	f7ff fe00 	bl	800ba78 <PrintKey>
    PrintKey(NWK_S_KEY);
 800be78:	2002      	movs	r0, #2
 800be7a:	f7ff fdfd 	bl	800ba78 <PrintKey>
#endif /* KEY_EXTRACTABLE */
    MW_LOG(TS_OFF, VLEVEL_M, "###### IDs  ######\r\n");
 800be7e:	4b35      	ldr	r3, [pc, #212]	@ (800bf54 <SecureElementPrintKeys+0x10c>)
 800be80:	2200      	movs	r2, #0
 800be82:	2100      	movs	r1, #0
 800be84:	2002      	movs	r0, #2
 800be86:	f00f fbab 	bl	801b5e0 <UTIL_ADV_TRACE_COND_FSend>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevEui:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800be8a:	4b33      	ldr	r3, [pc, #204]	@ (800bf58 <SecureElementPrintKeys+0x110>)
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	781b      	ldrb	r3, [r3, #0]
 800be90:	461a      	mov	r2, r3
 800be92:	4b31      	ldr	r3, [pc, #196]	@ (800bf58 <SecureElementPrintKeys+0x110>)
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	785b      	ldrb	r3, [r3, #1]
 800be98:	4619      	mov	r1, r3
 800be9a:	4b2f      	ldr	r3, [pc, #188]	@ (800bf58 <SecureElementPrintKeys+0x110>)
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	789b      	ldrb	r3, [r3, #2]
 800bea0:	4618      	mov	r0, r3
 800bea2:	4b2d      	ldr	r3, [pc, #180]	@ (800bf58 <SecureElementPrintKeys+0x110>)
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	78db      	ldrb	r3, [r3, #3]
 800bea8:	461c      	mov	r4, r3
 800beaa:	4b2b      	ldr	r3, [pc, #172]	@ (800bf58 <SecureElementPrintKeys+0x110>)
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	791b      	ldrb	r3, [r3, #4]
 800beb0:	461d      	mov	r5, r3
 800beb2:	4b29      	ldr	r3, [pc, #164]	@ (800bf58 <SecureElementPrintKeys+0x110>)
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	795b      	ldrb	r3, [r3, #5]
 800beb8:	461e      	mov	r6, r3
 800beba:	4b27      	ldr	r3, [pc, #156]	@ (800bf58 <SecureElementPrintKeys+0x110>)
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	799b      	ldrb	r3, [r3, #6]
 800bec0:	607b      	str	r3, [r7, #4]
 800bec2:	4b25      	ldr	r3, [pc, #148]	@ (800bf58 <SecureElementPrintKeys+0x110>)
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	79db      	ldrb	r3, [r3, #7]
 800bec8:	9307      	str	r3, [sp, #28]
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	9306      	str	r3, [sp, #24]
 800bece:	9605      	str	r6, [sp, #20]
 800bed0:	9504      	str	r5, [sp, #16]
 800bed2:	9403      	str	r4, [sp, #12]
 800bed4:	9002      	str	r0, [sp, #8]
 800bed6:	9101      	str	r1, [sp, #4]
 800bed8:	9200      	str	r2, [sp, #0]
 800beda:	4b20      	ldr	r3, [pc, #128]	@ (800bf5c <SecureElementPrintKeys+0x114>)
 800bedc:	2200      	movs	r2, #0
 800bede:	2100      	movs	r1, #0
 800bee0:	2002      	movs	r0, #2
 800bee2:	f00f fb7d 	bl	801b5e0 <UTIL_ADV_TRACE_COND_FSend>
           HEX8(SeNvm->DevEui));
    MW_LOG(TS_OFF, VLEVEL_M, "###### AppEui:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800bee6:	4b1c      	ldr	r3, [pc, #112]	@ (800bf58 <SecureElementPrintKeys+0x110>)
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	7a1b      	ldrb	r3, [r3, #8]
 800beec:	461a      	mov	r2, r3
 800beee:	4b1a      	ldr	r3, [pc, #104]	@ (800bf58 <SecureElementPrintKeys+0x110>)
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	7a5b      	ldrb	r3, [r3, #9]
 800bef4:	4619      	mov	r1, r3
 800bef6:	4b18      	ldr	r3, [pc, #96]	@ (800bf58 <SecureElementPrintKeys+0x110>)
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	7a9b      	ldrb	r3, [r3, #10]
 800befc:	4618      	mov	r0, r3
 800befe:	4b16      	ldr	r3, [pc, #88]	@ (800bf58 <SecureElementPrintKeys+0x110>)
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	7adb      	ldrb	r3, [r3, #11]
 800bf04:	461c      	mov	r4, r3
 800bf06:	4b14      	ldr	r3, [pc, #80]	@ (800bf58 <SecureElementPrintKeys+0x110>)
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	7b1b      	ldrb	r3, [r3, #12]
 800bf0c:	461d      	mov	r5, r3
 800bf0e:	4b12      	ldr	r3, [pc, #72]	@ (800bf58 <SecureElementPrintKeys+0x110>)
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	7b5b      	ldrb	r3, [r3, #13]
 800bf14:	461e      	mov	r6, r3
 800bf16:	4b10      	ldr	r3, [pc, #64]	@ (800bf58 <SecureElementPrintKeys+0x110>)
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	7b9b      	ldrb	r3, [r3, #14]
 800bf1c:	607b      	str	r3, [r7, #4]
 800bf1e:	4b0e      	ldr	r3, [pc, #56]	@ (800bf58 <SecureElementPrintKeys+0x110>)
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	7bdb      	ldrb	r3, [r3, #15]
 800bf24:	9307      	str	r3, [sp, #28]
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	9306      	str	r3, [sp, #24]
 800bf2a:	9605      	str	r6, [sp, #20]
 800bf2c:	9504      	str	r5, [sp, #16]
 800bf2e:	9403      	str	r4, [sp, #12]
 800bf30:	9002      	str	r0, [sp, #8]
 800bf32:	9101      	str	r1, [sp, #4]
 800bf34:	9200      	str	r2, [sp, #0]
 800bf36:	4b0a      	ldr	r3, [pc, #40]	@ (800bf60 <SecureElementPrintKeys+0x118>)
 800bf38:	2200      	movs	r2, #0
 800bf3a:	2100      	movs	r1, #0
 800bf3c:	2002      	movs	r0, #2
 800bf3e:	f00f fb4f 	bl	801b5e0 <UTIL_ADV_TRACE_COND_FSend>
           HEX8(SeNvm->JoinEui));
    return SECURE_ELEMENT_SUCCESS;
 800bf42:	2300      	movs	r3, #0
}
 800bf44:	4618      	mov	r0, r3
 800bf46:	370c      	adds	r7, #12
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf4c:	0801ec34 	.word	0x0801ec34
 800bf50:	0801ec4c 	.word	0x0801ec4c
 800bf54:	0801ec64 	.word	0x0801ec64
 800bf58:	20000720 	.word	0x20000720
 800bf5c:	0801ec7c 	.word	0x0801ec7c
 800bf60:	0801ecbc 	.word	0x0801ecbc

0800bf64 <SecureElementPrintSessionKeys>:
    
SecureElementStatus_t SecureElementPrintSessionKeys( void )
{
 800bf64:	b580      	push	{r7, lr}
 800bf66:	af00      	add	r7, sp, #0
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    PrintKey(MC_ROOT_KEY);
 800bf68:	2004      	movs	r0, #4
 800bf6a:	f7ff fd85 	bl	800ba78 <PrintKey>
    PrintKey(MC_KE_KEY);
 800bf6e:	207f      	movs	r0, #127	@ 0x7f
 800bf70:	f7ff fd82 	bl	800ba78 <PrintKey>
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    PrintKey(F_NWK_S_INT_KEY);
    PrintKey(S_NWK_S_INT_KEY);
    PrintKey(NWK_S_ENC_KEY);
#else
    PrintKey(NWK_S_KEY);
 800bf74:	2002      	movs	r0, #2
 800bf76:	f7ff fd7f 	bl	800ba78 <PrintKey>
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    PrintKey(APP_S_KEY);
 800bf7a:	2003      	movs	r0, #3
 800bf7c:	f7ff fd7c 	bl	800ba78 <PrintKey>
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_SUCCESS;
 800bf80:	2300      	movs	r3, #0
}
 800bf82:	4618      	mov	r0, r3
 800bf84:	bd80      	pop	{r7, pc}
	...

0800bf88 <SecureElementSetKey>:
#endif /* LORAWAN_KMS */
}
/* ST_WORKAROUND_END */

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 800bf88:	b580      	push	{r7, lr}
 800bf8a:	b088      	sub	sp, #32
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	4603      	mov	r3, r0
 800bf90:	6039      	str	r1, [r7, #0]
 800bf92:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800bf94:	683b      	ldr	r3, [r7, #0]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d101      	bne.n	800bf9e <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bf9a:	2302      	movs	r3, #2
 800bf9c:	e04b      	b.n	800c036 <SecureElementSetKey+0xae>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	77fb      	strb	r3, [r7, #31]
 800bfa2:	e044      	b.n	800c02e <SecureElementSetKey+0xa6>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800bfa4:	4b26      	ldr	r3, [pc, #152]	@ (800c040 <SecureElementSetKey+0xb8>)
 800bfa6:	6819      	ldr	r1, [r3, #0]
 800bfa8:	7ffa      	ldrb	r2, [r7, #31]
 800bfaa:	4613      	mov	r3, r2
 800bfac:	011b      	lsls	r3, r3, #4
 800bfae:	4413      	add	r3, r2
 800bfb0:	440b      	add	r3, r1
 800bfb2:	3310      	adds	r3, #16
 800bfb4:	781b      	ldrb	r3, [r3, #0]
 800bfb6:	79fa      	ldrb	r2, [r7, #7]
 800bfb8:	429a      	cmp	r2, r3
 800bfba:	d135      	bne.n	800c028 <SecureElementSetKey+0xa0>
        {
            /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if ( keyID == MC_KEY_0 )
 800bfbc:	79fb      	ldrb	r3, [r7, #7]
 800bfbe:	2b80      	cmp	r3, #128	@ 0x80
 800bfc0:	d122      	bne.n	800c008 <SecureElementSetKey+0x80>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            /* ST_WORKAROUND_END */
            {  // Decrypt the key if its a Mckey
                SecureElementStatus_t retval           = SECURE_ELEMENT_ERROR;
 800bfc2:	2306      	movs	r3, #6
 800bfc4:	77bb      	strb	r3, [r7, #30]
                uint8_t               decryptedKey[16] = { 0 };
 800bfc6:	f107 030c 	add.w	r3, r7, #12
 800bfca:	2200      	movs	r2, #0
 800bfcc:	601a      	str	r2, [r3, #0]
 800bfce:	605a      	str	r2, [r3, #4]
 800bfd0:	609a      	str	r2, [r3, #8]
 800bfd2:	60da      	str	r2, [r3, #12]

                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 800bfd4:	f107 030c 	add.w	r3, r7, #12
 800bfd8:	227f      	movs	r2, #127	@ 0x7f
 800bfda:	2110      	movs	r1, #16
 800bfdc:	6838      	ldr	r0, [r7, #0]
 800bfde:	f000 f87e 	bl	800c0de <SecureElementAesEncrypt>
 800bfe2:	4603      	mov	r3, r0
 800bfe4:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800bfe6:	4b16      	ldr	r3, [pc, #88]	@ (800c040 <SecureElementSetKey+0xb8>)
 800bfe8:	6819      	ldr	r1, [r3, #0]
 800bfea:	7ffa      	ldrb	r2, [r7, #31]
 800bfec:	4613      	mov	r3, r2
 800bfee:	011b      	lsls	r3, r3, #4
 800bff0:	4413      	add	r3, r2
 800bff2:	3310      	adds	r3, #16
 800bff4:	440b      	add	r3, r1
 800bff6:	3301      	adds	r3, #1
 800bff8:	f107 010c 	add.w	r1, r7, #12
 800bffc:	2210      	movs	r2, #16
 800bffe:	4618      	mov	r0, r3
 800c000:	f00a ff97 	bl	8016f32 <memcpy1>
                return retval;
 800c004:	7fbb      	ldrb	r3, [r7, #30]
 800c006:	e016      	b.n	800c036 <SecureElementSetKey+0xae>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800c008:	4b0d      	ldr	r3, [pc, #52]	@ (800c040 <SecureElementSetKey+0xb8>)
 800c00a:	6819      	ldr	r1, [r3, #0]
 800c00c:	7ffa      	ldrb	r2, [r7, #31]
 800c00e:	4613      	mov	r3, r2
 800c010:	011b      	lsls	r3, r3, #4
 800c012:	4413      	add	r3, r2
 800c014:	3310      	adds	r3, #16
 800c016:	440b      	add	r3, r1
 800c018:	3301      	adds	r3, #1
 800c01a:	2210      	movs	r2, #16
 800c01c:	6839      	ldr	r1, [r7, #0]
 800c01e:	4618      	mov	r0, r3
 800c020:	f00a ff87 	bl	8016f32 <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800c024:	2300      	movs	r3, #0
 800c026:	e006      	b.n	800c036 <SecureElementSetKey+0xae>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800c028:	7ffb      	ldrb	r3, [r7, #31]
 800c02a:	3301      	adds	r3, #1
 800c02c:	77fb      	strb	r3, [r7, #31]
 800c02e:	7ffb      	ldrb	r3, [r7, #31]
 800c030:	2b09      	cmp	r3, #9
 800c032:	d9b7      	bls.n	800bfa4 <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800c034:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800c036:	4618      	mov	r0, r3
 800c038:	3720      	adds	r7, #32
 800c03a:	46bd      	mov	sp, r7
 800c03c:	bd80      	pop	{r7, pc}
 800c03e:	bf00      	nop
 800c040:	20000720 	.word	0x20000720

0800c044 <SecureElementComputeAesCmac>:

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size,
                                                   KeyIdentifier_t keyID, uint32_t* cmac )
{
 800c044:	b580      	push	{r7, lr}
 800c046:	b086      	sub	sp, #24
 800c048:	af02      	add	r7, sp, #8
 800c04a:	60f8      	str	r0, [r7, #12]
 800c04c:	60b9      	str	r1, [r7, #8]
 800c04e:	4611      	mov	r1, r2
 800c050:	461a      	mov	r2, r3
 800c052:	460b      	mov	r3, r1
 800c054:	80fb      	strh	r3, [r7, #6]
 800c056:	4613      	mov	r3, r2
 800c058:	717b      	strb	r3, [r7, #5]
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 800c05a:	797b      	ldrb	r3, [r7, #5]
 800c05c:	2b7e      	cmp	r3, #126	@ 0x7e
 800c05e:	d901      	bls.n	800c064 <SecureElementComputeAesCmac+0x20>
    {
        // Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800c060:	2303      	movs	r3, #3
 800c062:	e009      	b.n	800c078 <SecureElementComputeAesCmac+0x34>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800c064:	7979      	ldrb	r1, [r7, #5]
 800c066:	88fa      	ldrh	r2, [r7, #6]
 800c068:	69bb      	ldr	r3, [r7, #24]
 800c06a:	9300      	str	r3, [sp, #0]
 800c06c:	460b      	mov	r3, r1
 800c06e:	68b9      	ldr	r1, [r7, #8]
 800c070:	68f8      	ldr	r0, [r7, #12]
 800c072:	f7ff fe13 	bl	800bc9c <ComputeCmac>
 800c076:	4603      	mov	r3, r0
}
 800c078:	4618      	mov	r0, r3
 800c07a:	3710      	adds	r7, #16
 800c07c:	46bd      	mov	sp, r7
 800c07e:	bd80      	pop	{r7, pc}

0800c080 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800c080:	b580      	push	{r7, lr}
 800c082:	b088      	sub	sp, #32
 800c084:	af02      	add	r7, sp, #8
 800c086:	60f8      	str	r0, [r7, #12]
 800c088:	607a      	str	r2, [r7, #4]
 800c08a:	461a      	mov	r2, r3
 800c08c:	460b      	mov	r3, r1
 800c08e:	817b      	strh	r3, [r7, #10]
 800c090:	4613      	mov	r3, r2
 800c092:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL )
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d101      	bne.n	800c09e <SecureElementVerifyAesCmac+0x1e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c09a:	2302      	movs	r3, #2
 800c09c:	e01b      	b.n	800c0d6 <SecureElementVerifyAesCmac+0x56>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 800c09e:	2306      	movs	r3, #6
 800c0a0:	75fb      	strb	r3, [r7, #23]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint32_t              compCmac = 0;
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800c0a6:	7a79      	ldrb	r1, [r7, #9]
 800c0a8:	897a      	ldrh	r2, [r7, #10]
 800c0aa:	f107 0310 	add.w	r3, r7, #16
 800c0ae:	9300      	str	r3, [sp, #0]
 800c0b0:	460b      	mov	r3, r1
 800c0b2:	68f9      	ldr	r1, [r7, #12]
 800c0b4:	2000      	movs	r0, #0
 800c0b6:	f7ff fdf1 	bl	800bc9c <ComputeCmac>
 800c0ba:	4603      	mov	r3, r0
 800c0bc:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800c0be:	7dfb      	ldrb	r3, [r7, #23]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d001      	beq.n	800c0c8 <SecureElementVerifyAesCmac+0x48>
    {
        return retval;
 800c0c4:	7dfb      	ldrb	r3, [r7, #23]
 800c0c6:	e006      	b.n	800c0d6 <SecureElementVerifyAesCmac+0x56>
    }

    if( expectedCmac != compCmac )
 800c0c8:	693b      	ldr	r3, [r7, #16]
 800c0ca:	687a      	ldr	r2, [r7, #4]
 800c0cc:	429a      	cmp	r2, r3
 800c0ce:	d001      	beq.n	800c0d4 <SecureElementVerifyAesCmac+0x54>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800c0d0:	2301      	movs	r3, #1
 800c0d2:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 800c0d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	3718      	adds	r7, #24
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	bd80      	pop	{r7, pc}

0800c0de <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                               uint8_t* encBuffer )
{
 800c0de:	b580      	push	{r7, lr}
 800c0e0:	b0c2      	sub	sp, #264	@ 0x108
 800c0e2:	af00      	add	r7, sp, #0
 800c0e4:	60f8      	str	r0, [r7, #12]
 800c0e6:	4608      	mov	r0, r1
 800c0e8:	4611      	mov	r1, r2
 800c0ea:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800c0ee:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800c0f2:	6013      	str	r3, [r2, #0]
 800c0f4:	4603      	mov	r3, r0
 800c0f6:	817b      	strh	r3, [r7, #10]
 800c0f8:	460b      	mov	r3, r1
 800c0fa:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL || encBuffer == NULL )
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d006      	beq.n	800c110 <SecureElementAesEncrypt+0x32>
 800c102:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c106:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d101      	bne.n	800c114 <SecureElementAesEncrypt+0x36>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c110:	2302      	movs	r3, #2
 800c112:	e046      	b.n	800c1a2 <SecureElementAesEncrypt+0xc4>
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 800c114:	897b      	ldrh	r3, [r7, #10]
 800c116:	f003 030f 	and.w	r3, r3, #15
 800c11a:	b29b      	uxth	r3, r3
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d001      	beq.n	800c124 <SecureElementAesEncrypt+0x46>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800c120:	2305      	movs	r3, #5
 800c122:	e03e      	b.n	800c1a2 <SecureElementAesEncrypt+0xc4>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800c124:	f107 0314 	add.w	r3, r7, #20
 800c128:	22f0      	movs	r2, #240	@ 0xf0
 800c12a:	2100      	movs	r1, #0
 800c12c:	4618      	mov	r0, r3
 800c12e:	f00a ff3b 	bl	8016fa8 <memset1>

    Key_t*                pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800c132:	f107 0210 	add.w	r2, r7, #16
 800c136:	7a7b      	ldrb	r3, [r7, #9]
 800c138:	4611      	mov	r1, r2
 800c13a:	4618      	mov	r0, r3
 800c13c:	f7ff fd7e 	bl	800bc3c <GetKeyByID>
 800c140:	4603      	mov	r3, r0
 800c142:	f887 3106 	strb.w	r3, [r7, #262]	@ 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 800c146:	f897 3106 	ldrb.w	r3, [r7, #262]	@ 0x106
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d127      	bne.n	800c19e <SecureElementAesEncrypt+0xc0>
    {
        lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 800c14e:	693b      	ldr	r3, [r7, #16]
 800c150:	3301      	adds	r3, #1
 800c152:	f107 0214 	add.w	r2, r7, #20
 800c156:	2110      	movs	r1, #16
 800c158:	4618      	mov	r0, r3
 800c15a:	f7ff fb65 	bl	800b828 <lorawan_aes_set_key>

        uint8_t block = 0;
 800c15e:	2300      	movs	r3, #0
 800c160:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107

        while( size != 0 )
 800c164:	e018      	b.n	800c198 <SecureElementAesEncrypt+0xba>
        {
            lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 800c166:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800c16a:	68fa      	ldr	r2, [r7, #12]
 800c16c:	18d0      	adds	r0, r2, r3
 800c16e:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800c172:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800c176:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800c17a:	6812      	ldr	r2, [r2, #0]
 800c17c:	4413      	add	r3, r2
 800c17e:	f107 0214 	add.w	r2, r7, #20
 800c182:	4619      	mov	r1, r3
 800c184:	f7ff fc2e 	bl	800b9e4 <lorawan_aes_encrypt>
            block = block + 16;
 800c188:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800c18c:	3310      	adds	r3, #16
 800c18e:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
            size  = size - 16;
 800c192:	897b      	ldrh	r3, [r7, #10]
 800c194:	3b10      	subs	r3, #16
 800c196:	817b      	strh	r3, [r7, #10]
        while( size != 0 )
 800c198:	897b      	ldrh	r3, [r7, #10]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d1e3      	bne.n	800c166 <SecureElementAesEncrypt+0x88>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 800c19e:	f897 3106 	ldrb.w	r3, [r7, #262]	@ 0x106
}
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	bd80      	pop	{r7, pc}

0800c1ac <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t* input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b088      	sub	sp, #32
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	6078      	str	r0, [r7, #4]
 800c1b4:	460b      	mov	r3, r1
 800c1b6:	70fb      	strb	r3, [r7, #3]
 800c1b8:	4613      	mov	r3, r2
 800c1ba:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d101      	bne.n	800c1c6 <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c1c2:	2302      	movs	r3, #2
 800c1c4:	e02d      	b.n	800c222 <SecureElementDeriveAndStoreKey+0x76>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 800c1c6:	2306      	movs	r3, #6
 800c1c8:	77fb      	strb	r3, [r7, #31]

    // In case of MC_KE_KEY, only McRootKey can be used as root key
    if( targetKeyID == MC_KE_KEY )
 800c1ca:	78bb      	ldrb	r3, [r7, #2]
 800c1cc:	2b7f      	cmp	r3, #127	@ 0x7f
 800c1ce:	d104      	bne.n	800c1da <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800c1d0:	78fb      	ldrb	r3, [r7, #3]
 800c1d2:	2b04      	cmp	r3, #4
 800c1d4:	d001      	beq.n	800c1da <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800c1d6:	2303      	movs	r3, #3
 800c1d8:	e023      	b.n	800c222 <SecureElementDeriveAndStoreKey+0x76>
        }
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t key[16] = { 0 };
 800c1da:	f107 030c 	add.w	r3, r7, #12
 800c1de:	2200      	movs	r2, #0
 800c1e0:	601a      	str	r2, [r3, #0]
 800c1e2:	605a      	str	r2, [r3, #4]
 800c1e4:	609a      	str	r2, [r3, #8]
 800c1e6:	60da      	str	r2, [r3, #12]
    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 800c1e8:	f107 030c 	add.w	r3, r7, #12
 800c1ec:	78fa      	ldrb	r2, [r7, #3]
 800c1ee:	2110      	movs	r1, #16
 800c1f0:	6878      	ldr	r0, [r7, #4]
 800c1f2:	f7ff ff74 	bl	800c0de <SecureElementAesEncrypt>
 800c1f6:	4603      	mov	r3, r0
 800c1f8:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800c1fa:	7ffb      	ldrb	r3, [r7, #31]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d001      	beq.n	800c204 <SecureElementDeriveAndStoreKey+0x58>
    {
        return retval;
 800c200:	7ffb      	ldrb	r3, [r7, #31]
 800c202:	e00e      	b.n	800c222 <SecureElementDeriveAndStoreKey+0x76>
    }

    // Store key
    retval = SecureElementSetKey( targetKeyID, key );
 800c204:	f107 020c 	add.w	r2, r7, #12
 800c208:	78bb      	ldrb	r3, [r7, #2]
 800c20a:	4611      	mov	r1, r2
 800c20c:	4618      	mov	r0, r3
 800c20e:	f7ff febb 	bl	800bf88 <SecureElementSetKey>
 800c212:	4603      	mov	r3, r0
 800c214:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800c216:	7ffb      	ldrb	r3, [r7, #31]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d001      	beq.n	800c220 <SecureElementDeriveAndStoreKey+0x74>
    {
        return retval;
 800c21c:	7ffb      	ldrb	r3, [r7, #31]
 800c21e:	e000      	b.n	800c222 <SecureElementDeriveAndStoreKey+0x76>
    }

    return SECURE_ELEMENT_SUCCESS;
 800c220:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800c222:	4618      	mov	r0, r3
 800c224:	3720      	adds	r7, #32
 800c226:	46bd      	mov	sp, r7
 800c228:	bd80      	pop	{r7, pc}

0800c22a <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEui,
                                                      uint16_t devNonce, uint8_t* encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t* decJoinAccept,
                                                      uint8_t* versionMinor )
{
 800c22a:	b580      	push	{r7, lr}
 800c22c:	b086      	sub	sp, #24
 800c22e:	af00      	add	r7, sp, #0
 800c230:	60b9      	str	r1, [r7, #8]
 800c232:	607b      	str	r3, [r7, #4]
 800c234:	4603      	mov	r3, r0
 800c236:	73fb      	strb	r3, [r7, #15]
 800c238:	4613      	mov	r3, r2
 800c23a:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d005      	beq.n	800c24e <SecureElementProcessJoinAccept+0x24>
 800c242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c244:	2b00      	cmp	r3, #0
 800c246:	d002      	beq.n	800c24e <SecureElementProcessJoinAccept+0x24>
 800c248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d101      	bne.n	800c252 <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c24e:	2302      	movs	r3, #2
 800c250:	e064      	b.n	800c31c <SecureElementProcessJoinAccept+0xf2>
    }

    // Check that frame size isn't bigger than a JoinAccept with CFList size
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800c252:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c256:	2b21      	cmp	r3, #33	@ 0x21
 800c258:	d901      	bls.n	800c25e <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800c25a:	2305      	movs	r3, #5
 800c25c:	e05e      	b.n	800c31c <SecureElementProcessJoinAccept+0xf2>
    }

    // Determine decryption key
    KeyIdentifier_t encKeyID = NWK_KEY;
 800c25e:	2301      	movs	r3, #1
 800c260:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800c262:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c266:	b29b      	uxth	r3, r3
 800c268:	461a      	mov	r2, r3
 800c26a:	6879      	ldr	r1, [r7, #4]
 800c26c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c26e:	f00a fe60 	bl	8016f32 <memcpy1>

    // Decrypt JoinAccept, skip MHDR
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	1c58      	adds	r0, r3, #1
 800c276:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c27a:	b29b      	uxth	r3, r3
 800c27c:	3b01      	subs	r3, #1
 800c27e:	b299      	uxth	r1, r3
 800c280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c282:	3301      	adds	r3, #1
 800c284:	7dfa      	ldrb	r2, [r7, #23]
 800c286:	f7ff ff2a 	bl	800c0de <SecureElementAesEncrypt>
 800c28a:	4603      	mov	r3, r0
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d001      	beq.n	800c294 <SecureElementProcessJoinAccept+0x6a>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800c290:	2307      	movs	r3, #7
 800c292:	e043      	b.n	800c31c <SecureElementProcessJoinAccept+0xf2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800c294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c296:	330b      	adds	r3, #11
 800c298:	781b      	ldrb	r3, [r3, #0]
 800c29a:	09db      	lsrs	r3, r3, #7
 800c29c:	b2da      	uxtb	r2, r3
 800c29e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2a0:	701a      	strb	r2, [r3, #0]

    uint32_t mic = 0;
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	613b      	str	r3, [r7, #16]

    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
 800c2a6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c2aa:	3b04      	subs	r3, #4
 800c2ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c2ae:	4413      	add	r3, r2
 800c2b0:	781b      	ldrb	r3, [r3, #0]
 800c2b2:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
 800c2b4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c2b8:	3b03      	subs	r3, #3
 800c2ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c2bc:	4413      	add	r3, r2
 800c2be:	781b      	ldrb	r3, [r3, #0]
 800c2c0:	021b      	lsls	r3, r3, #8
 800c2c2:	693a      	ldr	r2, [r7, #16]
 800c2c4:	4313      	orrs	r3, r2
 800c2c6:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 800c2c8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c2cc:	3b02      	subs	r3, #2
 800c2ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c2d0:	4413      	add	r3, r2
 800c2d2:	781b      	ldrb	r3, [r3, #0]
 800c2d4:	041b      	lsls	r3, r3, #16
 800c2d6:	693a      	ldr	r2, [r7, #16]
 800c2d8:	4313      	orrs	r3, r2
 800c2da:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 800c2dc:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c2e0:	3b01      	subs	r3, #1
 800c2e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c2e4:	4413      	add	r3, r2
 800c2e6:	781b      	ldrb	r3, [r3, #0]
 800c2e8:	061b      	lsls	r3, r3, #24
 800c2ea:	693a      	ldr	r2, [r7, #16]
 800c2ec:	4313      	orrs	r3, r2
 800c2ee:	613b      	str	r3, [r7, #16]
    //  - Header buffer to be used for MIC computation
    //        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
    //        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]

    // Verify mic
    if( *versionMinor == 0 )
 800c2f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2f2:	781b      	ldrb	r3, [r3, #0]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d10e      	bne.n	800c316 <SecureElementProcessJoinAccept+0xec>
    {
        // For LoRaWAN 1.0.x
        //   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
        //   CFListType)
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800c2f8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c2fc:	b29b      	uxth	r3, r3
 800c2fe:	3b04      	subs	r3, #4
 800c300:	b299      	uxth	r1, r3
 800c302:	2301      	movs	r3, #1
 800c304:	693a      	ldr	r2, [r7, #16]
 800c306:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c308:	f7ff feba 	bl	800c080 <SecureElementVerifyAesCmac>
 800c30c:	4603      	mov	r3, r0
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d003      	beq.n	800c31a <SecureElementProcessJoinAccept+0xf0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800c312:	2301      	movs	r3, #1
 800c314:	e002      	b.n	800c31c <SecureElementProcessJoinAccept+0xf2>
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800c316:	2304      	movs	r3, #4
 800c318:	e000      	b.n	800c31c <SecureElementProcessJoinAccept+0xf2>
    }

    return SECURE_ELEMENT_SUCCESS;
 800c31a:	2300      	movs	r3, #0
}
 800c31c:	4618      	mov	r0, r3
 800c31e:	3718      	adds	r7, #24
 800c320:	46bd      	mov	sp, r7
 800c322:	bd80      	pop	{r7, pc}

0800c324 <SecureElementSetDevEui>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
 800c324:	b580      	push	{r7, lr}
 800c326:	b082      	sub	sp, #8
 800c328:	af00      	add	r7, sp, #0
 800c32a:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d101      	bne.n	800c336 <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c332:	2302      	movs	r3, #2
 800c334:	e007      	b.n	800c346 <SecureElementSetDevEui+0x22>
    }
    memcpy1( SeNvm->DevEui, devEui, SE_EUI_SIZE );
 800c336:	4b06      	ldr	r3, [pc, #24]	@ (800c350 <SecureElementSetDevEui+0x2c>)
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	2208      	movs	r2, #8
 800c33c:	6879      	ldr	r1, [r7, #4]
 800c33e:	4618      	mov	r0, r3
 800c340:	f00a fdf7 	bl	8016f32 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800c344:	2300      	movs	r3, #0
}
 800c346:	4618      	mov	r0, r3
 800c348:	3708      	adds	r7, #8
 800c34a:	46bd      	mov	sp, r7
 800c34c:	bd80      	pop	{r7, pc}
 800c34e:	bf00      	nop
 800c350:	20000720 	.word	0x20000720

0800c354 <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
 800c354:	b480      	push	{r7}
 800c356:	af00      	add	r7, sp, #0
    return SeNvm->DevEui;
 800c358:	4b02      	ldr	r3, [pc, #8]	@ (800c364 <SecureElementGetDevEui+0x10>)
 800c35a:	681b      	ldr	r3, [r3, #0]
}
 800c35c:	4618      	mov	r0, r3
 800c35e:	46bd      	mov	sp, r7
 800c360:	bc80      	pop	{r7}
 800c362:	4770      	bx	lr
 800c364:	20000720 	.word	0x20000720

0800c368 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
 800c368:	b580      	push	{r7, lr}
 800c36a:	b082      	sub	sp, #8
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d101      	bne.n	800c37a <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c376:	2302      	movs	r3, #2
 800c378:	e008      	b.n	800c38c <SecureElementSetJoinEui+0x24>
    }
    memcpy1( SeNvm->JoinEui, joinEui, SE_EUI_SIZE );
 800c37a:	4b06      	ldr	r3, [pc, #24]	@ (800c394 <SecureElementSetJoinEui+0x2c>)
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	3308      	adds	r3, #8
 800c380:	2208      	movs	r2, #8
 800c382:	6879      	ldr	r1, [r7, #4]
 800c384:	4618      	mov	r0, r3
 800c386:	f00a fdd4 	bl	8016f32 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800c38a:	2300      	movs	r3, #0
}
 800c38c:	4618      	mov	r0, r3
 800c38e:	3708      	adds	r7, #8
 800c390:	46bd      	mov	sp, r7
 800c392:	bd80      	pop	{r7, pc}
 800c394:	20000720 	.word	0x20000720

0800c398 <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
 800c398:	b480      	push	{r7}
 800c39a:	af00      	add	r7, sp, #0
    return SeNvm->JoinEui;
 800c39c:	4b03      	ldr	r3, [pc, #12]	@ (800c3ac <SecureElementGetJoinEui+0x14>)
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	3308      	adds	r3, #8
}
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	46bd      	mov	sp, r7
 800c3a6:	bc80      	pop	{r7}
 800c3a8:	4770      	bx	lr
 800c3aa:	bf00      	nop
 800c3ac:	20000720 	.word	0x20000720

0800c3b0 <LmHandlerInit>:
 */
static bool LmHandlerPackageIsInitialized(uint8_t id);

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks, uint32_t fwVersion )
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b082      	sub	sp, #8
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
 800c3b8:	6039      	str	r1, [r7, #0]
    LmHandlerCallbacks = handlerCallbacks;
 800c3ba:	4a23      	ldr	r2, [pc, #140]	@ (800c448 <LmHandlerInit+0x98>)
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800c3c0:	4b22      	ldr	r3, [pc, #136]	@ (800c44c <LmHandlerInit+0x9c>)
 800c3c2:	4a23      	ldr	r2, [pc, #140]	@ (800c450 <LmHandlerInit+0xa0>)
 800c3c4:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800c3c6:	4b21      	ldr	r3, [pc, #132]	@ (800c44c <LmHandlerInit+0x9c>)
 800c3c8:	4a22      	ldr	r2, [pc, #136]	@ (800c454 <LmHandlerInit+0xa4>)
 800c3ca:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800c3cc:	4b1f      	ldr	r3, [pc, #124]	@ (800c44c <LmHandlerInit+0x9c>)
 800c3ce:	4a22      	ldr	r2, [pc, #136]	@ (800c458 <LmHandlerInit+0xa8>)
 800c3d0:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800c3d2:	4b1e      	ldr	r3, [pc, #120]	@ (800c44c <LmHandlerInit+0x9c>)
 800c3d4:	4a21      	ldr	r2, [pc, #132]	@ (800c45c <LmHandlerInit+0xac>)
 800c3d6:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800c3d8:	4b1b      	ldr	r3, [pc, #108]	@ (800c448 <LmHandlerInit+0x98>)
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	4a20      	ldr	r2, [pc, #128]	@ (800c460 <LmHandlerInit+0xb0>)
 800c3e0:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800c3e2:	4b19      	ldr	r3, [pc, #100]	@ (800c448 <LmHandlerInit+0x98>)
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	685b      	ldr	r3, [r3, #4]
 800c3e8:	4a1d      	ldr	r2, [pc, #116]	@ (800c460 <LmHandlerInit+0xb0>)
 800c3ea:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800c3ec:	4b16      	ldr	r3, [pc, #88]	@ (800c448 <LmHandlerInit+0x98>)
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	689b      	ldr	r3, [r3, #8]
 800c3f2:	4a1b      	ldr	r2, [pc, #108]	@ (800c460 <LmHandlerInit+0xb0>)
 800c3f4:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800c3f6:	4b1a      	ldr	r3, [pc, #104]	@ (800c460 <LmHandlerInit+0xb0>)
 800c3f8:	4a1a      	ldr	r2, [pc, #104]	@ (800c464 <LmHandlerInit+0xb4>)
 800c3fa:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800c3fc:	4b12      	ldr	r3, [pc, #72]	@ (800c448 <LmHandlerInit+0x98>)
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	699b      	ldr	r3, [r3, #24]
 800c402:	4a17      	ldr	r2, [pc, #92]	@ (800c460 <LmHandlerInit+0xb0>)
 800c404:	6113      	str	r3, [r2, #16]

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LmhpComplianceParams.FwVersion.Value = fwVersion;
 800c406:	4a18      	ldr	r2, [pc, #96]	@ (800c468 <LmHandlerInit+0xb8>)
 800c408:	683b      	ldr	r3, [r7, #0]
 800c40a:	6013      	str	r3, [r2, #0]
    LmhpComplianceParams.OnTxPeriodicityChanged = LmHandlerCallbacks->OnTxPeriodicityChanged;
 800c40c:	4b0e      	ldr	r3, [pc, #56]	@ (800c448 <LmHandlerInit+0x98>)
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c412:	4a15      	ldr	r2, [pc, #84]	@ (800c468 <LmHandlerInit+0xb8>)
 800c414:	6053      	str	r3, [r2, #4]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerCallbacks->OnTxFrameCtrlChanged;
 800c416:	4b0c      	ldr	r3, [pc, #48]	@ (800c448 <LmHandlerInit+0x98>)
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c41c:	4a12      	ldr	r2, [pc, #72]	@ (800c468 <LmHandlerInit+0xb8>)
 800c41e:	6093      	str	r3, [r2, #8]
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerCallbacks->OnPingSlotPeriodicityChanged;
 800c420:	4b09      	ldr	r3, [pc, #36]	@ (800c448 <LmHandlerInit+0x98>)
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c426:	4a10      	ldr	r2, [pc, #64]	@ (800c468 <LmHandlerInit+0xb8>)
 800c428:	60d3      	str	r3, [r2, #12]
#endif /* LORAMAC_VERSION */

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 800c42a:	490f      	ldr	r1, [pc, #60]	@ (800c468 <LmHandlerInit+0xb8>)
 800c42c:	2000      	movs	r0, #0
 800c42e:	f000 fd87 	bl	800cf40 <LmHandlerPackageRegister>
 800c432:	4603      	mov	r3, r0
 800c434:	2b00      	cmp	r3, #0
 800c436:	d002      	beq.n	800c43e <LmHandlerInit+0x8e>
    {
        return LORAMAC_HANDLER_ERROR;
 800c438:	f04f 33ff 	mov.w	r3, #4294967295
 800c43c:	e000      	b.n	800c440 <LmHandlerInit+0x90>
    if (LmhpPackagesRegistrationInit() != LORAMAC_HANDLER_SUCCESS)
    {
        return LORAMAC_HANDLER_ERROR;
    }
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
    return LORAMAC_HANDLER_SUCCESS;
 800c43e:	2300      	movs	r3, #0
}
 800c440:	4618      	mov	r0, r3
 800c442:	3708      	adds	r7, #8
 800c444:	46bd      	mov	sp, r7
 800c446:	bd80      	pop	{r7, pc}
 800c448:	2000075c 	.word	0x2000075c
 800c44c:	20000760 	.word	0x20000760
 800c450:	0800cc4d 	.word	0x0800cc4d
 800c454:	0800ccb5 	.word	0x0800ccb5
 800c458:	0800cd81 	.word	0x0800cd81
 800c45c:	0800ce99 	.word	0x0800ce99
 800c460:	20000770 	.word	0x20000770
 800c464:	0800d311 	.word	0x0800d311
 800c468:	20000724 	.word	0x20000724

0800c46c <LmHandlerConfigure>:
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b094      	sub	sp, #80	@ 0x50
 800c470:	af04      	add	r7, sp, #16
 800c472:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 800c474:	2214      	movs	r2, #20
 800c476:	6879      	ldr	r1, [r7, #4]
 800c478:	4891      	ldr	r0, [pc, #580]	@ (800c6c0 <LmHandlerConfigure+0x254>)
 800c47a:	f00e f867 	bl	801a54c <UTIL_MEM_cpy_8>

#if ( LORAMAC_CLASSB_ENABLED == 1 )
    IsClassBSwitchPending = false;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    IsUplinkTxPending = false;
 800c47e:	4b91      	ldr	r3, [pc, #580]	@ (800c6c4 <LmHandlerConfigure+0x258>)
 800c480:	2200      	movs	r2, #0
 800c482:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    loraInfo = LoraInfo_GetPtr();
 800c484:	f7fe fb0a 	bl	800aa9c <LoraInfo_GetPtr>
 800c488:	63f8      	str	r0, [r7, #60]	@ 0x3c

    if (0U == ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 800c48a:	4b8d      	ldr	r3, [pc, #564]	@ (800c6c0 <LmHandlerConfigure+0x254>)
 800c48c:	781b      	ldrb	r3, [r3, #0]
 800c48e:	461a      	mov	r2, r3
 800c490:	2301      	movs	r3, #1
 800c492:	4093      	lsls	r3, r2
 800c494:	461a      	mov	r2, r3
 800c496:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c498:	685b      	ldr	r3, [r3, #4]
 800c49a:	4013      	ands	r3, r2
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d107      	bne.n	800c4b0 <LmHandlerConfigure+0x44>
    {
        MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 800c4a0:	4b89      	ldr	r3, [pc, #548]	@ (800c6c8 <LmHandlerConfigure+0x25c>)
 800c4a2:	2201      	movs	r2, #1
 800c4a4:	2100      	movs	r1, #0
 800c4a6:	2000      	movs	r0, #0
 800c4a8:	f00f f89a 	bl	801b5e0 <UTIL_ADV_TRACE_COND_FSend>
        while (1) {}  /* error: Region is not defined in the MW */
 800c4ac:	bf00      	nop
 800c4ae:	e7fd      	b.n	800c4ac <LmHandlerConfigure+0x40>
    }

    if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 800c4b0:	4b83      	ldr	r3, [pc, #524]	@ (800c6c0 <LmHandlerConfigure+0x254>)
 800c4b2:	781b      	ldrb	r3, [r3, #0]
 800c4b4:	461a      	mov	r2, r3
 800c4b6:	4985      	ldr	r1, [pc, #532]	@ (800c6cc <LmHandlerConfigure+0x260>)
 800c4b8:	4885      	ldr	r0, [pc, #532]	@ (800c6d0 <LmHandlerConfigure+0x264>)
 800c4ba:	f004 fe95 	bl	80111e8 <LoRaMacInitialization>
 800c4be:	4603      	mov	r3, r0
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d002      	beq.n	800c4ca <LmHandlerConfigure+0x5e>
    {
        return LORAMAC_HANDLER_ERROR;
 800c4c4:	f04f 33ff 	mov.w	r3, #4294967295
 800c4c8:	e0f5      	b.n	800c6b6 <LmHandlerConfigure+0x24a>
    }

    // Try the restore context from the Backup RAM structure if data retention is available
    mibReq.Type = MIB_NVM_CTXS;
 800c4ca:	2327      	movs	r3, #39	@ 0x27
 800c4cc:	763b      	strb	r3, [r7, #24]
    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800c4ce:	f107 0318 	add.w	r3, r7, #24
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	f005 fbd8 	bl	8011c88 <LoRaMacMibSetRequestConfirm>
 800c4d8:	4603      	mov	r3, r0
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d103      	bne.n	800c4e6 <LmHandlerConfigure+0x7a>
    {
        CtxRestoreDone = true;
 800c4de:	4b7d      	ldr	r3, [pc, #500]	@ (800c6d4 <LmHandlerConfigure+0x268>)
 800c4e0:	2201      	movs	r2, #1
 800c4e2:	701a      	strb	r2, [r3, #0]
 800c4e4:	e02a      	b.n	800c53c <LmHandlerConfigure+0xd0>
    }
    else
    {
        // Restore context data backup from user callback (stored in FLASH)
        mibReq.Type = MIB_NVM_BKP_CTXS;
 800c4e6:	2328      	movs	r3, #40	@ 0x28
 800c4e8:	763b      	strb	r3, [r7, #24]
        if (LmHandlerCallbacks->OnRestoreContextRequest != NULL)
 800c4ea:	4b7b      	ldr	r3, [pc, #492]	@ (800c6d8 <LmHandlerConfigure+0x26c>)
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	691b      	ldr	r3, [r3, #16]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d00c      	beq.n	800c50e <LmHandlerConfigure+0xa2>
        {
            LoRaMacMibGetRequestConfirm( &mibReq );
 800c4f4:	f107 0318 	add.w	r3, r7, #24
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	f005 fa1f 	bl	801193c <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest(mibReq.Param.BackupContexts, sizeof(LoRaMacNvmData_t));
 800c4fe:	4b76      	ldr	r3, [pc, #472]	@ (800c6d8 <LmHandlerConfigure+0x26c>)
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	691b      	ldr	r3, [r3, #16]
 800c504:	69fa      	ldr	r2, [r7, #28]
 800c506:	f240 517c 	movw	r1, #1404	@ 0x57c
 800c50a:	4610      	mov	r0, r2
 800c50c:	4798      	blx	r3
        }
        // Restore context data from backup to main nvm structure
        mibReq.Type = MIB_NVM_CTXS;
 800c50e:	2327      	movs	r3, #39	@ 0x27
 800c510:	763b      	strb	r3, [r7, #24]
        if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800c512:	f107 0318 	add.w	r3, r7, #24
 800c516:	4618      	mov	r0, r3
 800c518:	f005 fbb6 	bl	8011c88 <LoRaMacMibSetRequestConfirm>
 800c51c:	4603      	mov	r3, r0
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d10c      	bne.n	800c53c <LmHandlerConfigure+0xd0>
        {
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 800c522:	2301      	movs	r3, #1
 800c524:	763b      	strb	r3, [r7, #24]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800c526:	f107 0318 	add.w	r3, r7, #24
 800c52a:	4618      	mov	r0, r3
 800c52c:	f005 fa06 	bl	801193c <LoRaMacMibGetRequestConfirm>
            if (mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE)
 800c530:	7f3b      	ldrb	r3, [r7, #28]
 800c532:	2b00      	cmp	r3, #0
 800c534:	d002      	beq.n	800c53c <LmHandlerConfigure+0xd0>
            {
                CtxRestoreDone = true;
 800c536:	4b67      	ldr	r3, [pc, #412]	@ (800c6d4 <LmHandlerConfigure+0x268>)
 800c538:	2201      	movs	r2, #1
 800c53a:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    if (CtxRestoreDone == true)
 800c53c:	4b65      	ldr	r3, [pc, #404]	@ (800c6d4 <LmHandlerConfigure+0x268>)
 800c53e:	781b      	ldrb	r3, [r3, #0]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d02a      	beq.n	800c59a <LmHandlerConfigure+0x12e>
    {
        if ( LmHandlerCallbacks->OnNvmDataChange != NULL )
 800c544:	4b64      	ldr	r3, [pc, #400]	@ (800c6d8 <LmHandlerConfigure+0x26c>)
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	69db      	ldr	r3, [r3, #28]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d004      	beq.n	800c558 <LmHandlerConfigure+0xec>
        {
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 800c54e:	4b62      	ldr	r3, [pc, #392]	@ (800c6d8 <LmHandlerConfigure+0x26c>)
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	69db      	ldr	r3, [r3, #28]
 800c554:	2000      	movs	r0, #0
 800c556:	4798      	blx	r3
        }

        mibReq.Type = MIB_DEV_ADDR;
 800c558:	2306      	movs	r3, #6
 800c55a:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800c55c:	f107 0318 	add.w	r3, r7, #24
 800c560:	4618      	mov	r0, r3
 800c562:	f005 f9eb 	bl	801193c <LoRaMacMibGetRequestConfirm>
        CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800c566:	69fb      	ldr	r3, [r7, #28]
 800c568:	4a5c      	ldr	r2, [pc, #368]	@ (800c6dc <LmHandlerConfigure+0x270>)
 800c56a:	6153      	str	r3, [r2, #20]

        mibReq.Type = MIB_NVM_CTXS;
 800c56c:	2327      	movs	r3, #39	@ 0x27
 800c56e:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800c570:	f107 0318 	add.w	r3, r7, #24
 800c574:	4618      	mov	r0, r3
 800c576:	f005 f9e1 	bl	801193c <LoRaMacMibGetRequestConfirm>

        LmHandlerParams.ActiveRegion = mibReq.Param.Contexts->MacGroup2.Region;
 800c57a:	69fb      	ldr	r3, [r7, #28]
 800c57c:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800c580:	4b4f      	ldr	r3, [pc, #316]	@ (800c6c0 <LmHandlerConfigure+0x254>)
 800c582:	701a      	strb	r2, [r3, #0]
        LmHandlerParams.DefaultClass = mibReq.Param.Contexts->MacGroup2.DeviceClass;
 800c584:	69fb      	ldr	r3, [r7, #28]
 800c586:	f893 2104 	ldrb.w	r2, [r3, #260]	@ 0x104
 800c58a:	4b4d      	ldr	r3, [pc, #308]	@ (800c6c0 <LmHandlerConfigure+0x254>)
 800c58c:	705a      	strb	r2, [r3, #1]
        LmHandlerParams.AdrEnable = mibReq.Param.Contexts->MacGroup2.AdrCtrlOn;
 800c58e:	69fb      	ldr	r3, [r7, #28]
 800c590:	f893 2106 	ldrb.w	r2, [r3, #262]	@ 0x106
 800c594:	4b4a      	ldr	r3, [pc, #296]	@ (800c6c0 <LmHandlerConfigure+0x254>)
 800c596:	709a      	strb	r2, [r3, #2]
 800c598:	e019      	b.n	800c5ce <LmHandlerConfigure+0x162>
    }
    else
    {
        mibReq.Type = MIB_NET_ID;
 800c59a:	2305      	movs	r3, #5
 800c59c:	763b      	strb	r3, [r7, #24]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800c59e:	2300      	movs	r3, #0
 800c5a0:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800c5a2:	f107 0318 	add.w	r3, r7, #24
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	f005 fb6e 	bl	8011c88 <LoRaMacMibSetRequestConfirm>

#if ( STATIC_DEVICE_ADDRESS != 1 )
        CommissioningParams.DevAddr = LmHandlerCallbacks->GetDevAddr();
 800c5ac:	4b4a      	ldr	r3, [pc, #296]	@ (800c6d8 <LmHandlerConfigure+0x26c>)
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	68db      	ldr	r3, [r3, #12]
 800c5b2:	4798      	blx	r3
 800c5b4:	4603      	mov	r3, r0
 800c5b6:	4a49      	ldr	r2, [pc, #292]	@ (800c6dc <LmHandlerConfigure+0x270>)
 800c5b8:	6153      	str	r3, [r2, #20]
#endif /* STATIC_DEVICE_ADDRESS != 1 */

        mibReq.Type = MIB_DEV_ADDR;
 800c5ba:	2306      	movs	r3, #6
 800c5bc:	763b      	strb	r3, [r7, #24]
        mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 800c5be:	4b47      	ldr	r3, [pc, #284]	@ (800c6dc <LmHandlerConfigure+0x270>)
 800c5c0:	695b      	ldr	r3, [r3, #20]
 800c5c2:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800c5c4:	f107 0318 	add.w	r3, r7, #24
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	f005 fb5d 	bl	8011c88 <LoRaMacMibSetRequestConfirm>
    }
    // Read secure-element DEV_EUI and JOIN_EUI values.
    mibReq.Type = MIB_DEV_EUI;
 800c5ce:	2302      	movs	r3, #2
 800c5d0:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800c5d2:	f107 0318 	add.w	r3, r7, #24
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	f005 f9b0 	bl	801193c <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.DevEui, mibReq.Param.DevEui, 8 );
 800c5dc:	69fb      	ldr	r3, [r7, #28]
 800c5de:	2208      	movs	r2, #8
 800c5e0:	4619      	mov	r1, r3
 800c5e2:	483e      	ldr	r0, [pc, #248]	@ (800c6dc <LmHandlerConfigure+0x270>)
 800c5e4:	f00a fca5 	bl	8016f32 <memcpy1>

    mibReq.Type = MIB_JOIN_EUI;
 800c5e8:	2303      	movs	r3, #3
 800c5ea:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800c5ec:	f107 0318 	add.w	r3, r7, #24
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	f005 f9a3 	bl	801193c <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8 );
 800c5f6:	69fb      	ldr	r3, [r7, #28]
 800c5f8:	2208      	movs	r2, #8
 800c5fa:	4619      	mov	r1, r3
 800c5fc:	4838      	ldr	r0, [pc, #224]	@ (800c6e0 <LmHandlerConfigure+0x274>)
 800c5fe:	f00a fc98 	bl	8016f32 <memcpy1>

    SecureElementPrintKeys();
 800c602:	f7ff fc21 	bl	800be48 <SecureElementPrintKeys>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 800c606:	4b37      	ldr	r3, [pc, #220]	@ (800c6e4 <LmHandlerConfigure+0x278>)
 800c608:	781b      	ldrb	r3, [r3, #0]
 800c60a:	461a      	mov	r2, r3
 800c60c:	4b36      	ldr	r3, [pc, #216]	@ (800c6e8 <LmHandlerConfigure+0x27c>)
 800c60e:	781b      	ldrb	r3, [r3, #0]
 800c610:	4619      	mov	r1, r3
 800c612:	4b36      	ldr	r3, [pc, #216]	@ (800c6ec <LmHandlerConfigure+0x280>)
 800c614:	781b      	ldrb	r3, [r3, #0]
 800c616:	4618      	mov	r0, r3
 800c618:	4b35      	ldr	r3, [pc, #212]	@ (800c6f0 <LmHandlerConfigure+0x284>)
 800c61a:	781b      	ldrb	r3, [r3, #0]
 800c61c:	9303      	str	r3, [sp, #12]
 800c61e:	9002      	str	r0, [sp, #8]
 800c620:	9101      	str	r1, [sp, #4]
 800c622:	9200      	str	r2, [sp, #0]
 800c624:	4b33      	ldr	r3, [pc, #204]	@ (800c6f4 <LmHandlerConfigure+0x288>)
 800c626:	2200      	movs	r2, #0
 800c628:	2100      	movs	r1, #0
 800c62a:	2002      	movs	r0, #2
 800c62c:	f00e ffd8 	bl	801b5e0 <UTIL_ADV_TRACE_COND_FSend>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG(TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n");
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 800c630:	230f      	movs	r3, #15
 800c632:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800c634:	2301      	movs	r3, #1
 800c636:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800c638:	f107 0318 	add.w	r3, r7, #24
 800c63c:	4618      	mov	r0, r3
 800c63e:	f005 fb23 	bl	8011c88 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 800c642:	2310      	movs	r3, #16
 800c644:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800c646:	2300      	movs	r3, #0
 800c648:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c64a:	f107 0318 	add.w	r3, r7, #24
 800c64e:	4618      	mov	r0, r3
 800c650:	f005 fb1a 	bl	8011c88 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 800c654:	2304      	movs	r3, #4
 800c656:	763b      	strb	r3, [r7, #24]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800c658:	4b19      	ldr	r3, [pc, #100]	@ (800c6c0 <LmHandlerConfigure+0x254>)
 800c65a:	789b      	ldrb	r3, [r3, #2]
 800c65c:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c65e:	f107 0318 	add.w	r3, r7, #24
 800c662:	4618      	mov	r0, r3
 800c664:	f005 fb10 	bl	8011c88 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_RXB_C_TIMEOUT;
 800c668:	2338      	movs	r3, #56	@ 0x38
 800c66a:	763b      	strb	r3, [r7, #24]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 800c66c:	4b14      	ldr	r3, [pc, #80]	@ (800c6c0 <LmHandlerConfigure+0x254>)
 800c66e:	691b      	ldr	r3, [r3, #16]
 800c670:	61fb      	str	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c672:	f107 0318 	add.w	r3, r7, #24
 800c676:	4618      	mov	r0, r3
 800c678:	f005 fb06 	bl	8011c88 <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800c67c:	230f      	movs	r3, #15
 800c67e:	743b      	strb	r3, [r7, #16]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800c680:	4b0f      	ldr	r3, [pc, #60]	@ (800c6c0 <LmHandlerConfigure+0x254>)
 800c682:	781b      	ldrb	r3, [r3, #0]
 800c684:	f107 0210 	add.w	r2, r7, #16
 800c688:	4611      	mov	r1, r2
 800c68a:	4618      	mov	r0, r3
 800c68c:	f008 f9b0 	bl	80149f0 <RegionGetPhyParam>
 800c690:	4603      	mov	r3, r0
 800c692:	60fb      	str	r3, [r7, #12]
    LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	2b00      	cmp	r3, #0
 800c698:	bf14      	ite	ne
 800c69a:	2301      	movne	r3, #1
 800c69c:	2300      	moveq	r3, #0
 800c69e:	b2da      	uxtb	r2, r3
 800c6a0:	4b07      	ldr	r3, [pc, #28]	@ (800c6c0 <LmHandlerConfigure+0x254>)
 800c6a2:	719a      	strb	r2, [r3, #6]

    // Set system maximum tolerated rx error in milliseconds
    LmHandlerSetSystemMaxRxError( 20 );
 800c6a4:	2014      	movs	r0, #20
 800c6a6:	f000 fab9 	bl	800cc1c <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800c6aa:	4b05      	ldr	r3, [pc, #20]	@ (800c6c0 <LmHandlerConfigure+0x254>)
 800c6ac:	799b      	ldrb	r3, [r3, #6]
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	f006 f918 	bl	80128e4 <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800c6b4:	2300      	movs	r3, #0
}
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	3740      	adds	r7, #64	@ 0x40
 800c6ba:	46bd      	mov	sp, r7
 800c6bc:	bd80      	pop	{r7, pc}
 800c6be:	bf00      	nop
 800c6c0:	20000748 	.word	0x20000748
 800c6c4:	20000788 	.word	0x20000788
 800c6c8:	0801ecfc 	.word	0x0801ecfc
 800c6cc:	20000770 	.word	0x20000770
 800c6d0:	20000760 	.word	0x20000760
 800c6d4:	2000087e 	.word	0x2000087e
 800c6d8:	2000075c 	.word	0x2000075c
 800c6dc:	20000078 	.word	0x20000078
 800c6e0:	20000080 	.word	0x20000080
 800c6e4:	2000008f 	.word	0x2000008f
 800c6e8:	2000008e 	.word	0x2000008e
 800c6ec:	2000008d 	.word	0x2000008d
 800c6f0:	2000008c 	.word	0x2000008c
 800c6f4:	0801ed48 	.word	0x0801ed48

0800c6f8 <LmHandlerProcess>:

    return false;
}

void LmHandlerProcess( void )
{
 800c6f8:	b580      	push	{r7, lr}
 800c6fa:	b082      	sub	sp, #8
 800c6fc:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    // Processes the LoRaMac events
    LoRaMacProcess( );
 800c6fe:	f002 fd45 	bl	800f18c <LoRaMacProcess>

    // Call all packages process functions
    LmHandlerPackagesProcess( );
 800c702:	f000 fd3b 	bl	800d17c <LmHandlerPackagesProcess>

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Check if a package transmission is pending.
    // If it is the case exit function earlier
    if( LmHandlerPackageIsTxPending( ) == true )
 800c706:	f000 fd0f 	bl	800d128 <LmHandlerPackageIsTxPending>
 800c70a:	4603      	mov	r3, r0
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d117      	bne.n	800c740 <LmHandlerProcess+0x48>
    {
        return;
    }

    // If a MAC layer scheduled uplink is still pending try to send it.
    if( IsUplinkTxPending == true )
 800c710:	4b0d      	ldr	r3, [pc, #52]	@ (800c748 <LmHandlerProcess+0x50>)
 800c712:	781b      	ldrb	r3, [r3, #0]
 800c714:	2b00      	cmp	r3, #0
 800c716:	d014      	beq.n	800c742 <LmHandlerProcess+0x4a>
    {
        // Send an empty message
        LmHandlerAppData_t appData =
 800c718:	2300      	movs	r3, #0
 800c71a:	703b      	strb	r3, [r7, #0]
 800c71c:	2300      	movs	r3, #0
 800c71e:	707b      	strb	r3, [r7, #1]
 800c720:	2300      	movs	r3, #0
 800c722:	607b      	str	r3, [r7, #4]
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0,
        };

        if( LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false ) == LORAMAC_HANDLER_SUCCESS )
 800c724:	4b09      	ldr	r3, [pc, #36]	@ (800c74c <LmHandlerProcess+0x54>)
 800c726:	78d9      	ldrb	r1, [r3, #3]
 800c728:	463b      	mov	r3, r7
 800c72a:	2200      	movs	r2, #0
 800c72c:	4618      	mov	r0, r3
 800c72e:	f000 f8b7 	bl	800c8a0 <LmHandlerSend>
 800c732:	4603      	mov	r3, r0
 800c734:	2b00      	cmp	r3, #0
 800c736:	d104      	bne.n	800c742 <LmHandlerProcess+0x4a>
        {
            IsUplinkTxPending = false;
 800c738:	4b03      	ldr	r3, [pc, #12]	@ (800c748 <LmHandlerProcess+0x50>)
 800c73a:	2200      	movs	r2, #0
 800c73c:	701a      	strb	r2, [r3, #0]
 800c73e:	e000      	b.n	800c742 <LmHandlerProcess+0x4a>
        return;
 800c740:	bf00      	nop
        }
    }
#endif /* LORAMAC_VERSION */
}
 800c742:	3708      	adds	r7, #8
 800c744:	46bd      	mov	sp, r7
 800c746:	bd80      	pop	{r7, pc}
 800c748:	20000788 	.word	0x20000788
 800c74c:	20000748 	.word	0x20000748

0800c750 <LmHandlerGetDutyCycleWaitTime>:

TimerTime_t LmHandlerGetDutyCycleWaitTime( void )
{
 800c750:	b480      	push	{r7}
 800c752:	af00      	add	r7, sp, #0
    return DutyCycleWaitTime;
 800c754:	4b02      	ldr	r3, [pc, #8]	@ (800c760 <LmHandlerGetDutyCycleWaitTime+0x10>)
 800c756:	681b      	ldr	r3, [r3, #0]
}
 800c758:	4618      	mov	r0, r3
 800c75a:	46bd      	mov	sp, r7
 800c75c:	bc80      	pop	{r7}
 800c75e:	4770      	bx	lr
 800c760:	20000784 	.word	0x20000784

0800c764 <LmHandlerJoin>:

void LmHandlerJoin( ActivationType_t mode, bool forceRejoin )
{
 800c764:	b580      	push	{r7, lr}
 800c766:	b090      	sub	sp, #64	@ 0x40
 800c768:	af00      	add	r7, sp, #0
 800c76a:	4603      	mov	r3, r0
 800c76c:	460a      	mov	r2, r1
 800c76e:	71fb      	strb	r3, [r7, #7]
 800c770:	4613      	mov	r3, r2
 800c772:	71bb      	strb	r3, [r7, #6]
#endif /* ACTIVATION_BY_PERSONALIZATION */
#endif /* LORAWAN_KMS */

    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_JOIN;
 800c774:	2301      	movs	r3, #1
 800c776:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800c77a:	4b36      	ldr	r3, [pc, #216]	@ (800c854 <LmHandlerJoin+0xf0>)
 800c77c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800c780:	b2db      	uxtb	r3, r3
 800c782:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31

    if ( mode == ACTIVATION_TYPE_OTAA )
 800c786:	79fb      	ldrb	r3, [r7, #7]
 800c788:	2b02      	cmp	r3, #2
 800c78a:	d10b      	bne.n	800c7a4 <LmHandlerJoin+0x40>
    {
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800c78c:	2302      	movs	r3, #2
 800c78e:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800c792:	4b31      	ldr	r3, [pc, #196]	@ (800c858 <LmHandlerJoin+0xf4>)
 800c794:	2202      	movs	r2, #2
 800c796:	719a      	strb	r2, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 800c798:	4a2f      	ldr	r2, [pc, #188]	@ (800c858 <LmHandlerJoin+0xf4>)
 800c79a:	79bb      	ldrb	r3, [r7, #6]
 800c79c:	71d3      	strb	r3, [r2, #7]
        LoRaMacStart();
 800c79e:	f004 ffdb 	bl	8011758 <LoRaMacStart>
 800c7a2:	e041      	b.n	800c828 <LmHandlerJoin+0xc4>
    }
    else
    {
        MibRequestConfirm_t mibReq;

        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 800c7a4:	2301      	movs	r3, #1
 800c7a6:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800c7aa:	4b2b      	ldr	r3, [pc, #172]	@ (800c858 <LmHandlerJoin+0xf4>)
 800c7ac:	2201      	movs	r2, #1
 800c7ae:	719a      	strb	r2, [r3, #6]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800c7b0:	4b28      	ldr	r3, [pc, #160]	@ (800c854 <LmHandlerJoin+0xf0>)
 800c7b2:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800c7b6:	4b28      	ldr	r3, [pc, #160]	@ (800c858 <LmHandlerJoin+0xf4>)
 800c7b8:	711a      	strb	r2, [r3, #4]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800c7ba:	4b27      	ldr	r3, [pc, #156]	@ (800c858 <LmHandlerJoin+0xf4>)
 800c7bc:	2200      	movs	r2, #0
 800c7be:	715a      	strb	r2, [r3, #5]
        JoinParams.forceRejoin = forceRejoin;
 800c7c0:	4a25      	ldr	r2, [pc, #148]	@ (800c858 <LmHandlerJoin+0xf4>)
 800c7c2:	79bb      	ldrb	r3, [r7, #6]
 800c7c4:	71d3      	strb	r3, [r2, #7]

        if (CtxRestoreDone == false)
 800c7c6:	4b25      	ldr	r3, [pc, #148]	@ (800c85c <LmHandlerJoin+0xf8>)
 800c7c8:	781b      	ldrb	r3, [r3, #0]
 800c7ca:	f083 0301 	eor.w	r3, r3, #1
 800c7ce:	b2db      	uxtb	r3, r3
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d01e      	beq.n	800c812 <LmHandlerJoin+0xae>
        {
            // Configure the default datarate
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 800c7d4:	231f      	movs	r3, #31
 800c7d6:	723b      	strb	r3, [r7, #8]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 800c7d8:	4b1e      	ldr	r3, [pc, #120]	@ (800c854 <LmHandlerJoin+0xf0>)
 800c7da:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800c7de:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800c7e0:	f107 0308 	add.w	r3, r7, #8
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	f005 fa4f 	bl	8011c88 <LoRaMacMibSetRequestConfirm>

            mibReq.Type = MIB_CHANNELS_DATARATE;
 800c7ea:	2320      	movs	r3, #32
 800c7ec:	723b      	strb	r3, [r7, #8]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 800c7ee:	4b19      	ldr	r3, [pc, #100]	@ (800c854 <LmHandlerJoin+0xf0>)
 800c7f0:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800c7f4:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800c7f6:	f107 0308 	add.w	r3, r7, #8
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	f005 fa44 	bl	8011c88 <LoRaMacMibSetRequestConfirm>

            /* Tell the MAC layer which network server version are we connecting too. */
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800c800:	2329      	movs	r3, #41	@ 0x29
 800c802:	723b      	strb	r3, [r7, #8]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800c804:	4b16      	ldr	r3, [pc, #88]	@ (800c860 <LmHandlerJoin+0xfc>)
 800c806:	60fb      	str	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm(&mibReq);
 800c808:	f107 0308 	add.w	r3, r7, #8
 800c80c:	4618      	mov	r0, r3
 800c80e:	f005 fa3b 	bl	8011c88 <LoRaMacMibSetRequestConfirm>
#endif /* USE_LRWAN_1_1_X_CRYPTO */
            SecureElementSetObjHandler(APP_S_KEY, KMS_APP_S_KEY_OBJECT_HANDLE);
#endif  /* LORAWAN_KMS == 1 */
        }

        LoRaMacStart();
 800c812:	f004 ffa1 	bl	8011758 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800c816:	2301      	movs	r3, #1
 800c818:	723b      	strb	r3, [r7, #8]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800c81a:	2301      	movs	r3, #1
 800c81c:	733b      	strb	r3, [r7, #12]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800c81e:	f107 0308 	add.w	r3, r7, #8
 800c822:	4618      	mov	r0, r3
 800c824:	f005 fa30 	bl	8011c88 <LoRaMacMibSetRequestConfirm>
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
#endif
    }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if ((CtxRestoreDone == false) || (forceRejoin == true))
 800c828:	4b0c      	ldr	r3, [pc, #48]	@ (800c85c <LmHandlerJoin+0xf8>)
 800c82a:	781b      	ldrb	r3, [r3, #0]
 800c82c:	f083 0301 	eor.w	r3, r3, #1
 800c830:	b2db      	uxtb	r3, r3
 800c832:	2b00      	cmp	r3, #0
 800c834:	d102      	bne.n	800c83c <LmHandlerJoin+0xd8>
 800c836:	79bb      	ldrb	r3, [r7, #6]
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d004      	beq.n	800c846 <LmHandlerJoin+0xe2>
    {
        // Starts the join procedure
        LoRaMacMlmeRequest( &mlmeReq );
 800c83c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800c840:	4618      	mov	r0, r3
 800c842:	f005 fd91 	bl	8012368 <LoRaMacMlmeRequest>
    }
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800c846:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c848:	4a06      	ldr	r2, [pc, #24]	@ (800c864 <LmHandlerJoin+0x100>)
 800c84a:	6013      	str	r3, [r2, #0]
#endif /* LORAMAC_VERSION */
}
 800c84c:	bf00      	nop
 800c84e:	3740      	adds	r7, #64	@ 0x40
 800c850:	46bd      	mov	sp, r7
 800c852:	bd80      	pop	{r7, pc}
 800c854:	20000748 	.word	0x20000748
 800c858:	20000090 	.word	0x20000090
 800c85c:	2000087e 	.word	0x2000087e
 800c860:	01000400 	.word	0x01000400
 800c864:	20000784 	.word	0x20000784

0800c868 <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 800c868:	b580      	push	{r7, lr}
 800c86a:	b08a      	sub	sp, #40	@ 0x28
 800c86c:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800c86e:	2301      	movs	r3, #1
 800c870:	703b      	strb	r3, [r7, #0]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800c872:	463b      	mov	r3, r7
 800c874:	4618      	mov	r0, r3
 800c876:	f005 f861 	bl	801193c <LoRaMacMibGetRequestConfirm>
 800c87a:	4603      	mov	r3, r0
 800c87c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if( status == LORAMAC_STATUS_OK )
 800c880:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c884:	2b00      	cmp	r3, #0
 800c886:	d106      	bne.n	800c896 <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800c888:	793b      	ldrb	r3, [r7, #4]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d101      	bne.n	800c892 <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 800c88e:	2300      	movs	r3, #0
 800c890:	e002      	b.n	800c898 <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 800c892:	2301      	movs	r3, #1
 800c894:	e000      	b.n	800c898 <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 800c896:	2300      	movs	r3, #0
    }
}
 800c898:	4618      	mov	r0, r3
 800c89a:	3728      	adds	r7, #40	@ 0x28
 800c89c:	46bd      	mov	sp, r7
 800c89e:	bd80      	pop	{r7, pc}

0800c8a0 <LmHandlerSend>:

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed, bool allowDelayedTx )
{
 800c8a0:	b580      	push	{r7, lr}
 800c8a2:	b08a      	sub	sp, #40	@ 0x28
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	6078      	str	r0, [r7, #4]
 800c8a8:	460b      	mov	r3, r1
 800c8aa:	70fb      	strb	r3, [r7, #3]
 800c8ac:	4613      	mov	r3, r2
 800c8ae:	70bb      	strb	r3, [r7, #2]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800c8b0:	23ff      	movs	r3, #255	@ 0xff
 800c8b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if (LoRaMacIsBusy() == true)
 800c8b6:	f002 f9c9 	bl	800ec4c <LoRaMacIsBusy>
 800c8ba:	4603      	mov	r3, r0
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d002      	beq.n	800c8c6 <LmHandlerSend+0x26>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800c8c0:	f06f 0301 	mvn.w	r3, #1
 800c8c4:	e0a3      	b.n	800ca0e <LmHandlerSend+0x16e>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800c8c6:	f7ff ffcf 	bl	800c868 <LmHandlerJoinStatus>
 800c8ca:	4603      	mov	r3, r0
 800c8cc:	2b01      	cmp	r3, #1
 800c8ce:	d00a      	beq.n	800c8e6 <LmHandlerSend+0x46>
    {
        // The network isn't joined, try again.
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800c8d0:	4b51      	ldr	r3, [pc, #324]	@ (800ca18 <LmHandlerSend+0x178>)
 800c8d2:	799b      	ldrb	r3, [r3, #6]
 800c8d4:	4a50      	ldr	r2, [pc, #320]	@ (800ca18 <LmHandlerSend+0x178>)
 800c8d6:	79d2      	ldrb	r2, [r2, #7]
 800c8d8:	4611      	mov	r1, r2
 800c8da:	4618      	mov	r0, r3
 800c8dc:	f7ff ff42 	bl	800c764 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800c8e0:	f06f 0302 	mvn.w	r3, #2
 800c8e4:	e093      	b.n	800ca0e <LmHandlerSend+0x16e>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
    }
#endif /* LORAMAC_VERSION */

    TxParams.MsgType = isTxConfirmed;
 800c8e6:	4a4d      	ldr	r2, [pc, #308]	@ (800ca1c <LmHandlerSend+0x17c>)
 800c8e8:	78fb      	ldrb	r3, [r7, #3]
 800c8ea:	7213      	strb	r3, [r2, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 800c8ec:	78fb      	ldrb	r3, [r7, #3]
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	bf14      	ite	ne
 800c8f2:	2301      	movne	r3, #1
 800c8f4:	2300      	moveq	r3, #0
 800c8f6:	b2db      	uxtb	r3, r3
 800c8f8:	743b      	strb	r3, [r7, #16]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800c8fa:	4b49      	ldr	r3, [pc, #292]	@ (800ca20 <LmHandlerSend+0x180>)
 800c8fc:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800c900:	77bb      	strb	r3, [r7, #30]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	785b      	ldrb	r3, [r3, #1]
 800c906:	f107 020c 	add.w	r2, r7, #12
 800c90a:	4611      	mov	r1, r2
 800c90c:	4618      	mov	r0, r3
 800c90e:	f004 ff85 	bl	801181c <LoRaMacQueryTxPossible>
 800c912:	4603      	mov	r3, r0
 800c914:	2b00      	cmp	r3, #0
 800c916:	d009      	beq.n	800c92c <LmHandlerSend+0x8c>
    {
        // Send empty frame in order to flush MAC commands
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800c918:	2300      	movs	r3, #0
 800c91a:	743b      	strb	r3, [r7, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800c91c:	2300      	movs	r3, #0
 800c91e:	61bb      	str	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800c920:	2300      	movs	r3, #0
 800c922:	83bb      	strh	r3, [r7, #28]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 800c924:	23f9      	movs	r3, #249	@ 0xf9
 800c926:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c92a:	e008      	b.n	800c93e <LmHandlerSend+0x9e>
    }
    else
    {
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	781b      	ldrb	r3, [r3, #0]
 800c930:	753b      	strb	r3, [r7, #20]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	785b      	ldrb	r3, [r3, #1]
 800c936:	83bb      	strh	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	685b      	ldr	r3, [r3, #4]
 800c93c:	61bb      	str	r3, [r7, #24]
    }

    TxParams.AppData = *appData;
 800c93e:	4b37      	ldr	r3, [pc, #220]	@ (800ca1c <LmHandlerSend+0x17c>)
 800c940:	687a      	ldr	r2, [r7, #4]
 800c942:	3310      	adds	r3, #16
 800c944:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c948:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800c94c:	4b34      	ldr	r3, [pc, #208]	@ (800ca20 <LmHandlerSend+0x180>)
 800c94e:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800c952:	4b32      	ldr	r3, [pc, #200]	@ (800ca1c <LmHandlerSend+0x17c>)
 800c954:	729a      	strb	r2, [r3, #10]

    status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 800c956:	78ba      	ldrb	r2, [r7, #2]
 800c958:	f107 0310 	add.w	r3, r7, #16
 800c95c:	4611      	mov	r1, r2
 800c95e:	4618      	mov	r0, r3
 800c960:	f005 fe88 	bl	8012674 <LoRaMacMcpsRequest>
 800c964:	4603      	mov	r3, r0
 800c966:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800c96a:	6a3b      	ldr	r3, [r7, #32]
 800c96c:	4a2d      	ldr	r2, [pc, #180]	@ (800ca24 <LmHandlerSend+0x184>)
 800c96e:	6013      	str	r3, [r2, #0]

    switch (status)
 800c970:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c974:	2b11      	cmp	r3, #17
 800c976:	d843      	bhi.n	800ca00 <LmHandlerSend+0x160>
 800c978:	a201      	add	r2, pc, #4	@ (adr r2, 800c980 <LmHandlerSend+0xe0>)
 800c97a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c97e:	bf00      	nop
 800c980:	0800c9c9 	.word	0x0800c9c9
 800c984:	0800c9e1 	.word	0x0800c9e1
 800c988:	0800ca01 	.word	0x0800ca01
 800c98c:	0800ca01 	.word	0x0800ca01
 800c990:	0800ca01 	.word	0x0800ca01
 800c994:	0800ca01 	.word	0x0800ca01
 800c998:	0800ca01 	.word	0x0800ca01
 800c99c:	0800c9e9 	.word	0x0800c9e9
 800c9a0:	0800ca01 	.word	0x0800ca01
 800c9a4:	0800ca01 	.word	0x0800ca01
 800c9a8:	0800ca01 	.word	0x0800ca01
 800c9ac:	0800c9f9 	.word	0x0800c9f9
 800c9b0:	0800ca01 	.word	0x0800ca01
 800c9b4:	0800ca01 	.word	0x0800ca01
 800c9b8:	0800c9e1 	.word	0x0800c9e1
 800c9bc:	0800c9e1 	.word	0x0800c9e1
 800c9c0:	0800c9e1 	.word	0x0800c9e1
 800c9c4:	0800c9f1 	.word	0x0800c9f1
    {
        case LORAMAC_STATUS_OK:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            IsUplinkTxPending = false;
 800c9c8:	4b17      	ldr	r3, [pc, #92]	@ (800ca28 <LmHandlerSend+0x188>)
 800c9ca:	2200      	movs	r2, #0
 800c9cc:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */
            if (lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED)
 800c9ce:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c9d2:	f113 0f07 	cmn.w	r3, #7
 800c9d6:	d017      	beq.n	800ca08 <LmHandlerSend+0x168>
            {
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800c9d8:	2300      	movs	r3, #0
 800c9da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 800c9de:	e013      	b.n	800ca08 <LmHandlerSend+0x168>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800c9e0:	23fe      	movs	r3, #254	@ 0xfe
 800c9e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800c9e6:	e010      	b.n	800ca0a <LmHandlerSend+0x16a>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800c9e8:	23fd      	movs	r3, #253	@ 0xfd
 800c9ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800c9ee:	e00c      	b.n	800ca0a <LmHandlerSend+0x16a>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800c9f0:	23fb      	movs	r3, #251	@ 0xfb
 800c9f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800c9f6:	e008      	b.n	800ca0a <LmHandlerSend+0x16a>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800c9f8:	23fa      	movs	r3, #250	@ 0xfa
 800c9fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800c9fe:	e004      	b.n	800ca0a <LmHandlerSend+0x16a>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800ca00:	23ff      	movs	r3, #255	@ 0xff
 800ca02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800ca06:	e000      	b.n	800ca0a <LmHandlerSend+0x16a>
            break;
 800ca08:	bf00      	nop
    }

    return lmhStatus;
 800ca0a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800ca0e:	4618      	mov	r0, r3
 800ca10:	3728      	adds	r7, #40	@ 0x28
 800ca12:	46bd      	mov	sp, r7
 800ca14:	bd80      	pop	{r7, pc}
 800ca16:	bf00      	nop
 800ca18:	20000090 	.word	0x20000090
 800ca1c:	20000098 	.word	0x20000098
 800ca20:	20000748 	.word	0x20000748
 800ca24:	20000784 	.word	0x20000784
 800ca28:	20000788 	.word	0x20000788

0800ca2c <LmHandlerDeviceTimeReq>:

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 800ca2c:	b580      	push	{r7, lr}
 800ca2e:	b086      	sub	sp, #24
 800ca30:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 800ca32:	2309      	movs	r3, #9
 800ca34:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800ca36:	463b      	mov	r3, r7
 800ca38:	4618      	mov	r0, r3
 800ca3a:	f005 fc95 	bl	8012368 <LoRaMacMlmeRequest>
 800ca3e:	4603      	mov	r3, r0
 800ca40:	75fb      	strb	r3, [r7, #23]
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800ca42:	693b      	ldr	r3, [r7, #16]
 800ca44:	4a06      	ldr	r2, [pc, #24]	@ (800ca60 <LmHandlerDeviceTimeReq+0x34>)
 800ca46:	6013      	str	r3, [r2, #0]

    if( status == LORAMAC_STATUS_OK )
 800ca48:	7dfb      	ldrb	r3, [r7, #23]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d101      	bne.n	800ca52 <LmHandlerDeviceTimeReq+0x26>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800ca4e:	2300      	movs	r3, #0
 800ca50:	e001      	b.n	800ca56 <LmHandlerDeviceTimeReq+0x2a>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800ca52:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800ca56:	4618      	mov	r0, r3
 800ca58:	3718      	adds	r7, #24
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	bd80      	pop	{r7, pc}
 800ca5e:	bf00      	nop
 800ca60:	20000784 	.word	0x20000784

0800ca64 <LmHandlerPingSlotReq>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerPingSlotReq( uint8_t periodicity )
{
 800ca64:	b480      	push	{r7}
 800ca66:	b083      	sub	sp, #12
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	4603      	mov	r3, r0
 800ca6c:	71fb      	strb	r3, [r7, #7]
        return LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false );
    }
    else
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    {
        return LORAMAC_HANDLER_ERROR;
 800ca6e:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800ca72:	4618      	mov	r0, r3
 800ca74:	370c      	adds	r7, #12
 800ca76:	46bd      	mov	sp, r7
 800ca78:	bc80      	pop	{r7}
 800ca7a:	4770      	bx	lr

0800ca7c <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 800ca7c:	b580      	push	{r7, lr}
 800ca7e:	b08c      	sub	sp, #48	@ 0x30
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	4603      	mov	r3, r0
 800ca84:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800ca86:	2300      	movs	r3, #0
 800ca88:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    if (LoRaMacIsBusy() == true)
 800ca8c:	f002 f8de 	bl	800ec4c <LoRaMacIsBusy>
 800ca90:	4603      	mov	r3, r0
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d002      	beq.n	800ca9c <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800ca96:	f06f 0301 	mvn.w	r3, #1
 800ca9a:	e071      	b.n	800cb80 <LmHandlerRequestClass+0x104>
    }

    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 800ca9c:	f7ff fee4 	bl	800c868 <LmHandlerJoinStatus>
 800caa0:	4603      	mov	r3, r0
 800caa2:	2b01      	cmp	r3, #1
 800caa4:	d002      	beq.n	800caac <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800caa6:	f06f 0302 	mvn.w	r3, #2
 800caaa:	e069      	b.n	800cb80 <LmHandlerRequestClass+0x104>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800caac:	2300      	movs	r3, #0
 800caae:	723b      	strb	r3, [r7, #8]
    if ( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800cab0:	f107 0308 	add.w	r3, r7, #8
 800cab4:	4618      	mov	r0, r3
 800cab6:	f004 ff41 	bl	801193c <LoRaMacMibGetRequestConfirm>
 800caba:	4603      	mov	r3, r0
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d002      	beq.n	800cac6 <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 800cac0:	f04f 33ff 	mov.w	r3, #4294967295
 800cac4:	e05c      	b.n	800cb80 <LmHandlerRequestClass+0x104>
    }
    currentClass = mibReq.Param.Class;
 800cac6:	7b3b      	ldrb	r3, [r7, #12]
 800cac8:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

    // Attempt to switch only if class update
    if( currentClass != newClass )
 800cacc:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 800cad0:	79fb      	ldrb	r3, [r7, #7]
 800cad2:	429a      	cmp	r2, r3
 800cad4:	d052      	beq.n	800cb7c <LmHandlerRequestClass+0x100>
    {
        switch( newClass )
 800cad6:	79fb      	ldrb	r3, [r7, #7]
 800cad8:	2b02      	cmp	r3, #2
 800cada:	d028      	beq.n	800cb2e <LmHandlerRequestClass+0xb2>
 800cadc:	2b02      	cmp	r3, #2
 800cade:	dc48      	bgt.n	800cb72 <LmHandlerRequestClass+0xf6>
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d002      	beq.n	800caea <LmHandlerRequestClass+0x6e>
 800cae4:	2b01      	cmp	r3, #1
 800cae6:	d01e      	beq.n	800cb26 <LmHandlerRequestClass+0xaa>
                    }
                }
            }
            break;
        default:
            break;
 800cae8:	e043      	b.n	800cb72 <LmHandlerRequestClass+0xf6>
                if( currentClass != CLASS_A )
 800caea:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d041      	beq.n	800cb76 <LmHandlerRequestClass+0xfa>
                    mibReq.Param.Class = newClass;
 800caf2:	79fb      	ldrb	r3, [r7, #7]
 800caf4:	733b      	strb	r3, [r7, #12]
                    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800caf6:	f107 0308 	add.w	r3, r7, #8
 800cafa:	4618      	mov	r0, r3
 800cafc:	f005 f8c4 	bl	8011c88 <LoRaMacMibSetRequestConfirm>
 800cb00:	4603      	mov	r3, r0
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d10b      	bne.n	800cb1e <LmHandlerRequestClass+0xa2>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800cb06:	4b20      	ldr	r3, [pc, #128]	@ (800cb88 <LmHandlerRequestClass+0x10c>)
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d032      	beq.n	800cb76 <LmHandlerRequestClass+0xfa>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800cb10:	4b1d      	ldr	r3, [pc, #116]	@ (800cb88 <LmHandlerRequestClass+0x10c>)
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb16:	79fa      	ldrb	r2, [r7, #7]
 800cb18:	4610      	mov	r0, r2
 800cb1a:	4798      	blx	r3
            break;
 800cb1c:	e02b      	b.n	800cb76 <LmHandlerRequestClass+0xfa>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800cb1e:	23ff      	movs	r3, #255	@ 0xff
 800cb20:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            break;
 800cb24:	e027      	b.n	800cb76 <LmHandlerRequestClass+0xfa>
                errorStatus = LORAMAC_HANDLER_ERROR;
 800cb26:	23ff      	movs	r3, #255	@ 0xff
 800cb28:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            break;
 800cb2c:	e026      	b.n	800cb7c <LmHandlerRequestClass+0x100>
                if( currentClass != CLASS_A )
 800cb2e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d003      	beq.n	800cb3e <LmHandlerRequestClass+0xc2>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800cb36:	23ff      	movs	r3, #255	@ 0xff
 800cb38:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            break;
 800cb3c:	e01d      	b.n	800cb7a <LmHandlerRequestClass+0xfe>
                    mibReq.Param.Class = newClass;
 800cb3e:	79fb      	ldrb	r3, [r7, #7]
 800cb40:	733b      	strb	r3, [r7, #12]
                    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800cb42:	f107 0308 	add.w	r3, r7, #8
 800cb46:	4618      	mov	r0, r3
 800cb48:	f005 f89e 	bl	8011c88 <LoRaMacMibSetRequestConfirm>
 800cb4c:	4603      	mov	r3, r0
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d10b      	bne.n	800cb6a <LmHandlerRequestClass+0xee>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800cb52:	4b0d      	ldr	r3, [pc, #52]	@ (800cb88 <LmHandlerRequestClass+0x10c>)
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d00e      	beq.n	800cb7a <LmHandlerRequestClass+0xfe>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800cb5c:	4b0a      	ldr	r3, [pc, #40]	@ (800cb88 <LmHandlerRequestClass+0x10c>)
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb62:	79fa      	ldrb	r2, [r7, #7]
 800cb64:	4610      	mov	r0, r2
 800cb66:	4798      	blx	r3
            break;
 800cb68:	e007      	b.n	800cb7a <LmHandlerRequestClass+0xfe>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800cb6a:	23ff      	movs	r3, #255	@ 0xff
 800cb6c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            break;
 800cb70:	e003      	b.n	800cb7a <LmHandlerRequestClass+0xfe>
            break;
 800cb72:	bf00      	nop
 800cb74:	e002      	b.n	800cb7c <LmHandlerRequestClass+0x100>
            break;
 800cb76:	bf00      	nop
 800cb78:	e000      	b.n	800cb7c <LmHandlerRequestClass+0x100>
            break;
 800cb7a:	bf00      	nop
        }
    }
    return errorStatus;
 800cb7c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800cb80:	4618      	mov	r0, r3
 800cb82:	3730      	adds	r7, #48	@ 0x30
 800cb84:	46bd      	mov	sp, r7
 800cb86:	bd80      	pop	{r7, pc}
 800cb88:	2000075c 	.word	0x2000075c

0800cb8c <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 800cb8c:	b580      	push	{r7, lr}
 800cb8e:	b08c      	sub	sp, #48	@ 0x30
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if (deviceClass == NULL)
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d102      	bne.n	800cba0 <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800cb9a:	f04f 33ff 	mov.w	r3, #4294967295
 800cb9e:	e010      	b.n	800cbc2 <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800cba0:	2300      	movs	r3, #0
 800cba2:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK)
 800cba4:	f107 030c 	add.w	r3, r7, #12
 800cba8:	4618      	mov	r0, r3
 800cbaa:	f004 fec7 	bl	801193c <LoRaMacMibGetRequestConfirm>
 800cbae:	4603      	mov	r3, r0
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d002      	beq.n	800cbba <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800cbb4:	f04f 33ff 	mov.w	r3, #4294967295
 800cbb8:	e003      	b.n	800cbc2 <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 800cbba:	7c3a      	ldrb	r2, [r7, #16]
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800cbc0:	2300      	movs	r3, #0
}
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	3730      	adds	r7, #48	@ 0x30
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	bd80      	pop	{r7, pc}
	...

0800cbcc <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 800cbcc:	b580      	push	{r7, lr}
 800cbce:	b08c      	sub	sp, #48	@ 0x30
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if (txDatarate == NULL)
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d102      	bne.n	800cbe0 <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800cbda:	f04f 33ff 	mov.w	r3, #4294967295
 800cbde:	e016      	b.n	800cc0e <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 800cbe0:	2320      	movs	r3, #32
 800cbe2:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK)
 800cbe4:	f107 030c 	add.w	r3, r7, #12
 800cbe8:	4618      	mov	r0, r3
 800cbea:	f004 fea7 	bl	801193c <LoRaMacMibGetRequestConfirm>
 800cbee:	4603      	mov	r3, r0
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d002      	beq.n	800cbfa <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800cbf4:	f04f 33ff 	mov.w	r3, #4294967295
 800cbf8:	e009      	b.n	800cc0e <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 800cbfa:	f997 2010 	ldrsb.w	r2, [r7, #16]
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	f993 2000 	ldrsb.w	r2, [r3]
 800cc08:	4b03      	ldr	r3, [pc, #12]	@ (800cc18 <LmHandlerGetTxDatarate+0x4c>)
 800cc0a:	711a      	strb	r2, [r3, #4]
    return LORAMAC_HANDLER_SUCCESS;
 800cc0c:	2300      	movs	r3, #0
}
 800cc0e:	4618      	mov	r0, r3
 800cc10:	3730      	adds	r7, #48	@ 0x30
 800cc12:	46bd      	mov	sp, r7
 800cc14:	bd80      	pop	{r7, pc}
 800cc16:	bf00      	nop
 800cc18:	20000748 	.word	0x20000748

0800cc1c <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 800cc1c:	b580      	push	{r7, lr}
 800cc1e:	b08c      	sub	sp, #48	@ 0x30
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800cc24:	2323      	movs	r3, #35	@ 0x23
 800cc26:	733b      	strb	r3, [r7, #12]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	613b      	str	r3, [r7, #16]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800cc2c:	f107 030c 	add.w	r3, r7, #12
 800cc30:	4618      	mov	r0, r3
 800cc32:	f005 f829 	bl	8011c88 <LoRaMacMibSetRequestConfirm>
 800cc36:	4603      	mov	r3, r0
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d002      	beq.n	800cc42 <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 800cc3c:	f04f 33ff 	mov.w	r3, #4294967295
 800cc40:	e000      	b.n	800cc44 <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 800cc42:	2300      	movs	r3, #0
}
 800cc44:	4618      	mov	r0, r3
 800cc46:	3730      	adds	r7, #48	@ 0x30
 800cc48:	46bd      	mov	sp, r7
 800cc4a:	bd80      	pop	{r7, pc}

0800cc4c <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800cc4c:	b580      	push	{r7, lr}
 800cc4e:	b082      	sub	sp, #8
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 800cc54:	4b15      	ldr	r3, [pc, #84]	@ (800ccac <McpsConfirm+0x60>)
 800cc56:	2201      	movs	r2, #1
 800cc58:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	785a      	ldrb	r2, [r3, #1]
 800cc5e:	4b13      	ldr	r3, [pc, #76]	@ (800ccac <McpsConfirm+0x60>)
 800cc60:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	789b      	ldrb	r3, [r3, #2]
 800cc66:	b25a      	sxtb	r2, r3
 800cc68:	4b10      	ldr	r3, [pc, #64]	@ (800ccac <McpsConfirm+0x60>)
 800cc6a:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	68db      	ldr	r3, [r3, #12]
 800cc70:	4a0e      	ldr	r2, [pc, #56]	@ (800ccac <McpsConfirm+0x60>)
 800cc72:	60d3      	str	r3, [r2, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800cc7a:	4b0c      	ldr	r3, [pc, #48]	@ (800ccac <McpsConfirm+0x60>)
 800cc7c:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	691b      	ldr	r3, [r3, #16]
 800cc82:	b2da      	uxtb	r2, r3
 800cc84:	4b09      	ldr	r3, [pc, #36]	@ (800ccac <McpsConfirm+0x60>)
 800cc86:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	791b      	ldrb	r3, [r3, #4]
 800cc8c:	461a      	mov	r2, r3
 800cc8e:	4b07      	ldr	r3, [pc, #28]	@ (800ccac <McpsConfirm+0x60>)
 800cc90:	725a      	strb	r2, [r3, #9]

    LmHandlerCallbacks->OnTxData( &TxParams );
 800cc92:	4b07      	ldr	r3, [pc, #28]	@ (800ccb0 <McpsConfirm+0x64>)
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc98:	4804      	ldr	r0, [pc, #16]	@ (800ccac <McpsConfirm+0x60>)
 800cc9a:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800cc9c:	6879      	ldr	r1, [r7, #4]
 800cc9e:	2000      	movs	r0, #0
 800cca0:	f000 f9c6 	bl	800d030 <LmHandlerPackagesNotify>
}
 800cca4:	bf00      	nop
 800cca6:	3708      	adds	r7, #8
 800cca8:	46bd      	mov	sp, r7
 800ccaa:	bd80      	pop	{r7, pc}
 800ccac:	20000098 	.word	0x20000098
 800ccb0:	2000075c 	.word	0x2000075c

0800ccb4 <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *rxStatus )
{
 800ccb4:	b580      	push	{r7, lr}
 800ccb6:	b086      	sub	sp, #24
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	6078      	str	r0, [r7, #4]
 800ccbc:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	73fb      	strb	r3, [r7, #15]
    RxParams.IsMcpsIndication = 1;
 800ccc2:	4b2c      	ldr	r3, [pc, #176]	@ (800cd74 <McpsIndication+0xc0>)
 800ccc4:	2201      	movs	r2, #1
 800ccc6:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	785a      	ldrb	r2, [r3, #1]
 800cccc:	4b29      	ldr	r3, [pc, #164]	@ (800cd74 <McpsIndication+0xc0>)
 800ccce:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800ccd0:	4b28      	ldr	r3, [pc, #160]	@ (800cd74 <McpsIndication+0xc0>)
 800ccd2:	785b      	ldrb	r3, [r3, #1]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d149      	bne.n	800cd6c <McpsIndication+0xb8>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	791b      	ldrb	r3, [r3, #4]
 800ccdc:	b25a      	sxtb	r2, r3
 800ccde:	4b25      	ldr	r3, [pc, #148]	@ (800cd74 <McpsIndication+0xc0>)
 800cce0:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800cce2:	683b      	ldr	r3, [r7, #0]
 800cce4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cce8:	b25a      	sxtb	r2, r3
 800ccea:	4b22      	ldr	r3, [pc, #136]	@ (800cd74 <McpsIndication+0xc0>)
 800ccec:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800ccee:	683b      	ldr	r3, [r7, #0]
 800ccf0:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800ccf4:	4b1f      	ldr	r3, [pc, #124]	@ (800cd74 <McpsIndication+0xc0>)
 800ccf6:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800ccf8:	683b      	ldr	r3, [r7, #0]
 800ccfa:	78da      	ldrb	r2, [r3, #3]
 800ccfc:	4b1d      	ldr	r3, [pc, #116]	@ (800cd74 <McpsIndication+0xc0>)
 800ccfe:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	691b      	ldr	r3, [r3, #16]
 800cd04:	4a1b      	ldr	r2, [pc, #108]	@ (800cd74 <McpsIndication+0xc0>)
 800cd06:	60d3      	str	r3, [r2, #12]

    appData.Port = mcpsIndication->Port;
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	78db      	ldrb	r3, [r3, #3]
 800cd0c:	743b      	strb	r3, [r7, #16]
    appData.BufferSize = mcpsIndication->BufferSize;
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	7b1b      	ldrb	r3, [r3, #12]
 800cd12:	747b      	strb	r3, [r7, #17]
    appData.Buffer = mcpsIndication->Buffer;
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	689b      	ldr	r3, [r3, #8]
 800cd18:	617b      	str	r3, [r7, #20]

    LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 800cd1a:	4b17      	ldr	r3, [pc, #92]	@ (800cd78 <McpsIndication+0xc4>)
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd20:	f107 0210 	add.w	r2, r7, #16
 800cd24:	4913      	ldr	r1, [pc, #76]	@ (800cd74 <McpsIndication+0xc0>)
 800cd26:	4610      	mov	r0, r2
 800cd28:	4798      	blx	r3

    if ((LmHandlerCallbacks->OnSysTimeUpdate != NULL) && (mcpsIndication->DeviceTimeAnsReceived == true))
 800cd2a:	4b13      	ldr	r3, [pc, #76]	@ (800cd78 <McpsIndication+0xc4>)
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d007      	beq.n	800cd44 <McpsIndication+0x90>
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	7e1b      	ldrb	r3, [r3, #24]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d003      	beq.n	800cd44 <McpsIndication+0x90>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800cd3c:	4b0e      	ldr	r3, [pc, #56]	@ (800cd78 <McpsIndication+0xc4>)
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cd42:	4798      	blx	r3
    }
    // Call packages RxProcess function
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800cd44:	6879      	ldr	r1, [r7, #4]
 800cd46:	2001      	movs	r0, #1
 800cd48:	f000 f972 	bl	800d030 <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass( &deviceClass );
 800cd4c:	f107 030f 	add.w	r3, r7, #15
 800cd50:	4618      	mov	r0, r3
 800cd52:	f7ff ff1b 	bl	800cb8c <LmHandlerGetCurrentClass>
            .Port = 0
        };
        LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true);
    }
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if ( ( mcpsIndication->FramePending == true ) && ( deviceClass == CLASS_A ) )
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	795b      	ldrb	r3, [r3, #5]
 800cd5a:	2b01      	cmp	r3, #1
 800cd5c:	d107      	bne.n	800cd6e <McpsIndication+0xba>
 800cd5e:	7bfb      	ldrb	r3, [r7, #15]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d104      	bne.n	800cd6e <McpsIndication+0xba>
    {
        // The server signals that it has pending data to be sent.
        // We schedule an uplink as soon as possible to flush the server.
        IsUplinkTxPending = true;
 800cd64:	4b05      	ldr	r3, [pc, #20]	@ (800cd7c <McpsIndication+0xc8>)
 800cd66:	2201      	movs	r2, #1
 800cd68:	701a      	strb	r2, [r3, #0]
 800cd6a:	e000      	b.n	800cd6e <McpsIndication+0xba>
        return;
 800cd6c:	bf00      	nop
    }
#endif /* LORAMAC_VERSION */
}
 800cd6e:	3718      	adds	r7, #24
 800cd70:	46bd      	mov	sp, r7
 800cd72:	bd80      	pop	{r7, pc}
 800cd74:	200000b4 	.word	0x200000b4
 800cd78:	2000075c 	.word	0x2000075c
 800cd7c:	20000788 	.word	0x20000788

0800cd80 <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800cd80:	b580      	push	{r7, lr}
 800cd82:	b08c      	sub	sp, #48	@ 0x30
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 800cd88:	4b3c      	ldr	r3, [pc, #240]	@ (800ce7c <MlmeConfirm+0xfc>)
 800cd8a:	2200      	movs	r2, #0
 800cd8c:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	785a      	ldrb	r2, [r3, #1]
 800cd92:	4b3a      	ldr	r3, [pc, #232]	@ (800ce7c <MlmeConfirm+0xfc>)
 800cd94:	705a      	strb	r2, [r3, #1]
    LmHandlerCallbacks->OnTxData( &TxParams );
 800cd96:	4b3a      	ldr	r3, [pc, #232]	@ (800ce80 <MlmeConfirm+0x100>)
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd9c:	4837      	ldr	r0, [pc, #220]	@ (800ce7c <MlmeConfirm+0xfc>)
 800cd9e:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800cda0:	6879      	ldr	r1, [r7, #4]
 800cda2:	2002      	movs	r0, #2
 800cda4:	f000 f944 	bl	800d030 <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	781b      	ldrb	r3, [r3, #0]
 800cdac:	3b01      	subs	r3, #1
 800cdae:	2b0b      	cmp	r3, #11
 800cdb0:	d85c      	bhi.n	800ce6c <MlmeConfirm+0xec>
 800cdb2:	a201      	add	r2, pc, #4	@ (adr r2, 800cdb8 <MlmeConfirm+0x38>)
 800cdb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdb8:	0800cde9 	.word	0x0800cde9
 800cdbc:	0800ce6d 	.word	0x0800ce6d
 800cdc0:	0800ce6d 	.word	0x0800ce6d
 800cdc4:	0800ce3b 	.word	0x0800ce3b
 800cdc8:	0800ce6d 	.word	0x0800ce6d
 800cdcc:	0800ce6d 	.word	0x0800ce6d
 800cdd0:	0800ce6d 	.word	0x0800ce6d
 800cdd4:	0800ce6d 	.word	0x0800ce6d
 800cdd8:	0800ce6d 	.word	0x0800ce6d
 800cddc:	0800ce6d 	.word	0x0800ce6d
 800cde0:	0800ce53 	.word	0x0800ce53
 800cde4:	0800ce6d 	.word	0x0800ce6d
    {
    case MLME_JOIN:
        {
            MibRequestConfirm_t mibReq;
            mibReq.Type = MIB_DEV_ADDR;
 800cde8:	2306      	movs	r3, #6
 800cdea:	733b      	strb	r3, [r7, #12]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800cdec:	f107 030c 	add.w	r3, r7, #12
 800cdf0:	4618      	mov	r0, r3
 800cdf2:	f004 fda3 	bl	801193c <LoRaMacMibGetRequestConfirm>
            CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800cdf6:	693b      	ldr	r3, [r7, #16]
 800cdf8:	4a22      	ldr	r2, [pc, #136]	@ (800ce84 <MlmeConfirm+0x104>)
 800cdfa:	6153      	str	r3, [r2, #20]
            LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800cdfc:	4822      	ldr	r0, [pc, #136]	@ (800ce88 <MlmeConfirm+0x108>)
 800cdfe:	f7ff fee5 	bl	800cbcc <LmHandlerGetTxDatarate>

            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	785b      	ldrb	r3, [r3, #1]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d108      	bne.n	800ce1c <MlmeConfirm+0x9c>
            {
                // Status is OK, node has joined the network
                JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800ce0a:	4b20      	ldr	r3, [pc, #128]	@ (800ce8c <MlmeConfirm+0x10c>)
 800ce0c:	2200      	movs	r2, #0
 800ce0e:	715a      	strb	r2, [r3, #5]
                LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800ce10:	4b1f      	ldr	r3, [pc, #124]	@ (800ce90 <MlmeConfirm+0x110>)
 800ce12:	785b      	ldrb	r3, [r3, #1]
 800ce14:	4618      	mov	r0, r3
 800ce16:	f7ff fe31 	bl	800ca7c <LmHandlerRequestClass>
 800ce1a:	e002      	b.n	800ce22 <MlmeConfirm+0xa2>
            }
            else
            {
                // Join was not successful. Try to join again
                JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800ce1c:	4b1b      	ldr	r3, [pc, #108]	@ (800ce8c <MlmeConfirm+0x10c>)
 800ce1e:	22ff      	movs	r2, #255	@ 0xff
 800ce20:	715a      	strb	r2, [r3, #5]
            }
            // Notify upper layer
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800ce22:	4b17      	ldr	r3, [pc, #92]	@ (800ce80 <MlmeConfirm+0x100>)
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce28:	4818      	ldr	r0, [pc, #96]	@ (800ce8c <MlmeConfirm+0x10c>)
 800ce2a:	4798      	blx	r3
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	785b      	ldrb	r3, [r3, #1]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d11d      	bne.n	800ce70 <MlmeConfirm+0xf0>
            {
                SecureElementPrintSessionKeys();
 800ce34:	f7ff f896 	bl	800bf64 <SecureElementPrintSessionKeys>
            }
        }
        break;
 800ce38:	e01a      	b.n	800ce70 <MlmeConfirm+0xf0>
    case MLME_LINK_CHECK:
        {
            RxParams.LinkCheck = true;
 800ce3a:	4b16      	ldr	r3, [pc, #88]	@ (800ce94 <MlmeConfirm+0x114>)
 800ce3c:	2201      	movs	r2, #1
 800ce3e:	745a      	strb	r2, [r3, #17]
            RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	7a1a      	ldrb	r2, [r3, #8]
 800ce44:	4b13      	ldr	r3, [pc, #76]	@ (800ce94 <MlmeConfirm+0x114>)
 800ce46:	749a      	strb	r2, [r3, #18]
            RxParams.NbGateways = mlmeConfirm->NbGateways;
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	7a5a      	ldrb	r2, [r3, #9]
 800ce4c:	4b11      	ldr	r3, [pc, #68]	@ (800ce94 <MlmeConfirm+0x114>)
 800ce4e:	74da      	strb	r2, [r3, #19]
        }
        break;
 800ce50:	e00f      	b.n	800ce72 <MlmeConfirm+0xf2>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
    case MLME_BEACON_ACQUISITION:
        {
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	785b      	ldrb	r3, [r3, #1]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d105      	bne.n	800ce66 <MlmeConfirm+0xe6>
            {
                // Beacon has been acquired
                // Request server for ping slot
                LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
 800ce5a:	4b0d      	ldr	r3, [pc, #52]	@ (800ce90 <MlmeConfirm+0x110>)
 800ce5c:	7b1b      	ldrb	r3, [r3, #12]
 800ce5e:	4618      	mov	r0, r3
 800ce60:	f7ff fe00 	bl	800ca64 <LmHandlerPingSlotReq>
                // Beacon not acquired
                // Request Device Time again.
                LmHandlerDeviceTimeReq( );
            }
        }
        break;
 800ce64:	e005      	b.n	800ce72 <MlmeConfirm+0xf2>
                LmHandlerDeviceTimeReq( );
 800ce66:	f7ff fde1 	bl	800ca2c <LmHandlerDeviceTimeReq>
        break;
 800ce6a:	e002      	b.n	800ce72 <MlmeConfirm+0xf2>
            }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
    default:
        break;
 800ce6c:	bf00      	nop
 800ce6e:	e000      	b.n	800ce72 <MlmeConfirm+0xf2>
        break;
 800ce70:	bf00      	nop
    }
}
 800ce72:	bf00      	nop
 800ce74:	3730      	adds	r7, #48	@ 0x30
 800ce76:	46bd      	mov	sp, r7
 800ce78:	bd80      	pop	{r7, pc}
 800ce7a:	bf00      	nop
 800ce7c:	20000098 	.word	0x20000098
 800ce80:	2000075c 	.word	0x2000075c
 800ce84:	20000078 	.word	0x20000078
 800ce88:	20000094 	.word	0x20000094
 800ce8c:	20000090 	.word	0x20000090
 800ce90:	20000748 	.word	0x20000748
 800ce94:	200000b4 	.word	0x200000b4

0800ce98 <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *rxStatus )
{
 800ce98:	b580      	push	{r7, lr}
 800ce9a:	b082      	sub	sp, #8
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	6078      	str	r0, [r7, #4]
 800cea0:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 800cea2:	4b24      	ldr	r3, [pc, #144]	@ (800cf34 <MlmeIndication+0x9c>)
 800cea4:	2200      	movs	r2, #0
 800cea6:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	785a      	ldrb	r2, [r3, #1]
 800ceac:	4b21      	ldr	r3, [pc, #132]	@ (800cf34 <MlmeIndication+0x9c>)
 800ceae:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	789b      	ldrb	r3, [r3, #2]
 800ceb4:	b25a      	sxtb	r2, r3
 800ceb6:	4b1f      	ldr	r3, [pc, #124]	@ (800cf34 <MlmeIndication+0x9c>)
 800ceb8:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800ceba:	683b      	ldr	r3, [r7, #0]
 800cebc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cec0:	b25a      	sxtb	r2, r3
 800cec2:	4b1c      	ldr	r3, [pc, #112]	@ (800cf34 <MlmeIndication+0x9c>)
 800cec4:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800cec6:	683b      	ldr	r3, [r7, #0]
 800cec8:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800cecc:	4b19      	ldr	r3, [pc, #100]	@ (800cf34 <MlmeIndication+0x9c>)
 800cece:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800ced0:	683b      	ldr	r3, [r7, #0]
 800ced2:	78da      	ldrb	r2, [r3, #3]
 800ced4:	4b17      	ldr	r3, [pc, #92]	@ (800cf34 <MlmeIndication+0x9c>)
 800ced6:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	685b      	ldr	r3, [r3, #4]
 800cedc:	4a15      	ldr	r2, [pc, #84]	@ (800cf34 <MlmeIndication+0x9c>)
 800cede:	60d3      	str	r3, [r2, #12]
    if ((mlmeIndication->MlmeIndication != MLME_BEACON) && (mlmeIndication->MlmeIndication != MLME_BEACON_LOST))
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	781b      	ldrb	r3, [r3, #0]
 800cee4:	2b0a      	cmp	r3, #10
 800cee6:	d009      	beq.n	800cefc <MlmeIndication+0x64>
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	781b      	ldrb	r3, [r3, #0]
 800ceec:	2b0e      	cmp	r3, #14
 800ceee:	d005      	beq.n	800cefc <MlmeIndication+0x64>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800cef0:	4b11      	ldr	r3, [pc, #68]	@ (800cf38 <MlmeIndication+0xa0>)
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cef6:	490f      	ldr	r1, [pc, #60]	@ (800cf34 <MlmeIndication+0x9c>)
 800cef8:	2000      	movs	r0, #0
 800cefa:	4798      	blx	r3
    }

    // Call packages RxProcess function
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 800cefc:	6879      	ldr	r1, [r7, #4]
 800cefe:	2003      	movs	r0, #3
 800cf00:	f000 f896 	bl	800d030 <LmHandlerPackagesNotify>

    switch( mlmeIndication->MlmeIndication )
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	781b      	ldrb	r3, [r3, #0]
 800cf08:	2b0e      	cmp	r3, #14
 800cf0a:	d00a      	beq.n	800cf22 <MlmeIndication+0x8a>
 800cf0c:	2b0e      	cmp	r3, #14
 800cf0e:	dc0a      	bgt.n	800cf26 <MlmeIndication+0x8e>
 800cf10:	2b06      	cmp	r3, #6
 800cf12:	d002      	beq.n	800cf1a <MlmeIndication+0x82>
 800cf14:	2b0a      	cmp	r3, #10
 800cf16:	d008      	beq.n	800cf2a <MlmeIndication+0x92>
            }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
    default:
        break;
 800cf18:	e005      	b.n	800cf26 <MlmeIndication+0x8e>
            IsUplinkTxPending = true;
 800cf1a:	4b08      	ldr	r3, [pc, #32]	@ (800cf3c <MlmeIndication+0xa4>)
 800cf1c:	2201      	movs	r2, #1
 800cf1e:	701a      	strb	r2, [r3, #0]
        break;
 800cf20:	e004      	b.n	800cf2c <MlmeIndication+0x94>
        break;
 800cf22:	bf00      	nop
 800cf24:	e002      	b.n	800cf2c <MlmeIndication+0x94>
        break;
 800cf26:	bf00      	nop
 800cf28:	e000      	b.n	800cf2c <MlmeIndication+0x94>
        break;
 800cf2a:	bf00      	nop
    }
}
 800cf2c:	bf00      	nop
 800cf2e:	3708      	adds	r7, #8
 800cf30:	46bd      	mov	sp, r7
 800cf32:	bd80      	pop	{r7, pc}
 800cf34:	200000b4 	.word	0x200000b4
 800cf38:	2000075c 	.word	0x2000075c
 800cf3c:	20000788 	.word	0x20000788

0800cf40 <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 800cf40:	b580      	push	{r7, lr}
 800cf42:	b084      	sub	sp, #16
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	4603      	mov	r3, r0
 800cf48:	6039      	str	r1, [r7, #0]
 800cf4a:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 800cf4c:	2300      	movs	r3, #0
 800cf4e:	60fb      	str	r3, [r7, #12]
    switch( id )
 800cf50:	79fb      	ldrb	r3, [r7, #7]
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d103      	bne.n	800cf5e <LmHandlerPackageRegister+0x1e>
    {
        case PACKAGE_ID_COMPLIANCE:
        {
            package = LmhpCompliancePackageFactory( );
 800cf56:	f000 fa1d 	bl	800d394 <LmhpCompliancePackageFactory>
 800cf5a:	60f8      	str	r0, [r7, #12]
            break;
 800cf5c:	e000      	b.n	800cf60 <LmHandlerPackageRegister+0x20>
        {
#if (!defined (LORAWAN_DATA_DISTRIB_MGT) || (LORAWAN_DATA_DISTRIB_MGT == 0))
#else /*LORAWAN_DATA_DISTRIB_MGT == 1*/
            LmhpPackagesRegister( id, &package );
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
            break;
 800cf5e:	bf00      	nop
        }
    }
    if( package != NULL )
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d035      	beq.n	800cfd2 <LmHandlerPackageRegister+0x92>
    {
        LmHandlerPackages[id] = package;
 800cf66:	79fb      	ldrb	r3, [r7, #7]
 800cf68:	491d      	ldr	r1, [pc, #116]	@ (800cfe0 <LmHandlerPackageRegister+0xa0>)
 800cf6a:	68fa      	ldr	r2, [r7, #12]
 800cf6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800cf70:	79fb      	ldrb	r3, [r7, #7]
 800cf72:	4a1b      	ldr	r2, [pc, #108]	@ (800cfe0 <LmHandlerPackageRegister+0xa0>)
 800cf74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf78:	4a1a      	ldr	r2, [pc, #104]	@ (800cfe4 <LmHandlerPackageRegister+0xa4>)
 800cf7a:	629a      	str	r2, [r3, #40]	@ 0x28
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
 800cf7c:	4b1a      	ldr	r3, [pc, #104]	@ (800cfe8 <LmHandlerPackageRegister+0xa8>)
 800cf7e:	681a      	ldr	r2, [r3, #0]
 800cf80:	79fb      	ldrb	r3, [r7, #7]
 800cf82:	4917      	ldr	r1, [pc, #92]	@ (800cfe0 <LmHandlerPackageRegister+0xa0>)
 800cf84:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800cf88:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800cf8a:	631a      	str	r2, [r3, #48]	@ 0x30
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
 800cf8c:	4b16      	ldr	r3, [pc, #88]	@ (800cfe8 <LmHandlerPackageRegister+0xa8>)
 800cf8e:	681a      	ldr	r2, [r3, #0]
 800cf90:	79fb      	ldrb	r3, [r7, #7]
 800cf92:	4913      	ldr	r1, [pc, #76]	@ (800cfe0 <LmHandlerPackageRegister+0xa0>)
 800cf94:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800cf98:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800cf9a:	635a      	str	r2, [r3, #52]	@ 0x34
#endif /* LORAMAC_VERSION */
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800cf9c:	79fb      	ldrb	r3, [r7, #7]
 800cf9e:	4a10      	ldr	r2, [pc, #64]	@ (800cfe0 <LmHandlerPackageRegister+0xa0>)
 800cfa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cfa4:	4a11      	ldr	r2, [pc, #68]	@ (800cfec <LmHandlerPackageRegister+0xac>)
 800cfa6:	62da      	str	r2, [r3, #44]	@ 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800cfa8:	4b0f      	ldr	r3, [pc, #60]	@ (800cfe8 <LmHandlerPackageRegister+0xa8>)
 800cfaa:	681a      	ldr	r2, [r3, #0]
 800cfac:	79fb      	ldrb	r3, [r7, #7]
 800cfae:	490c      	ldr	r1, [pc, #48]	@ (800cfe0 <LmHandlerPackageRegister+0xa0>)
 800cfb0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800cfb4:	6992      	ldr	r2, [r2, #24]
 800cfb6:	615a      	str	r2, [r3, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800cfb8:	79fb      	ldrb	r3, [r7, #7]
 800cfba:	4a09      	ldr	r2, [pc, #36]	@ (800cfe0 <LmHandlerPackageRegister+0xa0>)
 800cfbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cfc0:	685b      	ldr	r3, [r3, #4]
 800cfc2:	4a0b      	ldr	r2, [pc, #44]	@ (800cff0 <LmHandlerPackageRegister+0xb0>)
 800cfc4:	6851      	ldr	r1, [r2, #4]
 800cfc6:	4a0a      	ldr	r2, [pc, #40]	@ (800cff0 <LmHandlerPackageRegister+0xb0>)
 800cfc8:	7852      	ldrb	r2, [r2, #1]
 800cfca:	6838      	ldr	r0, [r7, #0]
 800cfcc:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 800cfce:	2300      	movs	r3, #0
 800cfd0:	e001      	b.n	800cfd6 <LmHandlerPackageRegister+0x96>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800cfd2:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	3710      	adds	r7, #16
 800cfda:	46bd      	mov	sp, r7
 800cfdc:	bd80      	pop	{r7, pc}
 800cfde:	bf00      	nop
 800cfe0:	20000734 	.word	0x20000734
 800cfe4:	0800c765 	.word	0x0800c765
 800cfe8:	2000075c 	.word	0x2000075c
 800cfec:	0800ca2d 	.word	0x0800ca2d
 800cff0:	200000c8 	.word	0x200000c8

0800cff4 <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 800cff4:	b580      	push	{r7, lr}
 800cff6:	b082      	sub	sp, #8
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	4603      	mov	r3, r0
 800cffc:	71fb      	strb	r3, [r7, #7]
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 800cffe:	79fb      	ldrb	r3, [r7, #7]
 800d000:	2b04      	cmp	r3, #4
 800d002:	d80e      	bhi.n	800d022 <LmHandlerPackageIsInitialized+0x2e>
 800d004:	79fb      	ldrb	r3, [r7, #7]
 800d006:	4a09      	ldr	r2, [pc, #36]	@ (800d02c <LmHandlerPackageIsInitialized+0x38>)
 800d008:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d00c:	689b      	ldr	r3, [r3, #8]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d007      	beq.n	800d022 <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 800d012:	79fb      	ldrb	r3, [r7, #7]
 800d014:	4a05      	ldr	r2, [pc, #20]	@ (800d02c <LmHandlerPackageIsInitialized+0x38>)
 800d016:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d01a:	689b      	ldr	r3, [r3, #8]
 800d01c:	4798      	blx	r3
 800d01e:	4603      	mov	r3, r0
 800d020:	e000      	b.n	800d024 <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 800d022:	2300      	movs	r3, #0
    }
}
 800d024:	4618      	mov	r0, r3
 800d026:	3708      	adds	r7, #8
 800d028:	46bd      	mov	sp, r7
 800d02a:	bd80      	pop	{r7, pc}
 800d02c:	20000734 	.word	0x20000734

0800d030 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800d030:	b580      	push	{r7, lr}
 800d032:	b084      	sub	sp, #16
 800d034:	af00      	add	r7, sp, #0
 800d036:	4603      	mov	r3, r0
 800d038:	6039      	str	r1, [r7, #0]
 800d03a:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d03c:	2300      	movs	r3, #0
 800d03e:	73fb      	strb	r3, [r7, #15]
 800d040:	e067      	b.n	800d112 <LmHandlerPackagesNotify+0xe2>
    {
        if( LmHandlerPackages[i] != NULL )
 800d042:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d046:	4a37      	ldr	r2, [pc, #220]	@ (800d124 <LmHandlerPackagesNotify+0xf4>)
 800d048:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d05a      	beq.n	800d106 <LmHandlerPackagesNotify+0xd6>
        {
            switch( notifyType )
 800d050:	79fb      	ldrb	r3, [r7, #7]
 800d052:	2b03      	cmp	r3, #3
 800d054:	d84e      	bhi.n	800d0f4 <LmHandlerPackagesNotify+0xc4>
 800d056:	a201      	add	r2, pc, #4	@ (adr r2, 800d05c <LmHandlerPackagesNotify+0x2c>)
 800d058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d05c:	0800d06d 	.word	0x0800d06d
 800d060:	0800d08f 	.word	0x0800d08f
 800d064:	0800d0b1 	.word	0x0800d0b1
 800d068:	0800d0d3 	.word	0x0800d0d3
            {
                case PACKAGE_MCPS_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800d06c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d070:	4a2c      	ldr	r2, [pc, #176]	@ (800d124 <LmHandlerPackagesNotify+0xf4>)
 800d072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d076:	699b      	ldr	r3, [r3, #24]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d03d      	beq.n	800d0f8 <LmHandlerPackagesNotify+0xc8>
                    {
                        LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t* ) params );
 800d07c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d080:	4a28      	ldr	r2, [pc, #160]	@ (800d124 <LmHandlerPackagesNotify+0xf4>)
 800d082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d086:	699b      	ldr	r3, [r3, #24]
 800d088:	6838      	ldr	r0, [r7, #0]
 800d08a:	4798      	blx	r3
                    }
                    break;
 800d08c:	e034      	b.n	800d0f8 <LmHandlerPackagesNotify+0xc8>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
                          ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ))))
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                    if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
 800d08e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d092:	4a24      	ldr	r2, [pc, #144]	@ (800d124 <LmHandlerPackagesNotify+0xf4>)
 800d094:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d098:	69db      	ldr	r3, [r3, #28]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d02e      	beq.n	800d0fc <LmHandlerPackagesNotify+0xcc>
#endif /* LORAMAC_VERSION */
                    {
                        LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t* )params );
 800d09e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d0a2:	4a20      	ldr	r2, [pc, #128]	@ (800d124 <LmHandlerPackagesNotify+0xf4>)
 800d0a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d0a8:	69db      	ldr	r3, [r3, #28]
 800d0aa:	6838      	ldr	r0, [r7, #0]
 800d0ac:	4798      	blx	r3
                    }
                    break;
 800d0ae:	e025      	b.n	800d0fc <LmHandlerPackagesNotify+0xcc>
                }
                case PACKAGE_MLME_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800d0b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d0b4:	4a1b      	ldr	r2, [pc, #108]	@ (800d124 <LmHandlerPackagesNotify+0xf4>)
 800d0b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d0ba:	6a1b      	ldr	r3, [r3, #32]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d01f      	beq.n	800d100 <LmHandlerPackagesNotify+0xd0>
                    {
                        LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t* )params );
 800d0c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d0c4:	4a17      	ldr	r2, [pc, #92]	@ (800d124 <LmHandlerPackagesNotify+0xf4>)
 800d0c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d0ca:	6a1b      	ldr	r3, [r3, #32]
 800d0cc:	6838      	ldr	r0, [r7, #0]
 800d0ce:	4798      	blx	r3
                    }
                    break;
 800d0d0:	e016      	b.n	800d100 <LmHandlerPackagesNotify+0xd0>
                }
                case PACKAGE_MLME_INDICATION:
                {
                    if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 800d0d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d0d6:	4a13      	ldr	r2, [pc, #76]	@ (800d124 <LmHandlerPackagesNotify+0xf4>)
 800d0d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d0dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d010      	beq.n	800d104 <LmHandlerPackagesNotify+0xd4>
                    {
                        LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 800d0e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d0e6:	4a0f      	ldr	r2, [pc, #60]	@ (800d124 <LmHandlerPackagesNotify+0xf4>)
 800d0e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d0ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d0ee:	6838      	ldr	r0, [r7, #0]
 800d0f0:	4798      	blx	r3
                    }
                    break;
 800d0f2:	e007      	b.n	800d104 <LmHandlerPackagesNotify+0xd4>
                }
                default:
                {
                    break;
 800d0f4:	bf00      	nop
 800d0f6:	e006      	b.n	800d106 <LmHandlerPackagesNotify+0xd6>
                    break;
 800d0f8:	bf00      	nop
 800d0fa:	e004      	b.n	800d106 <LmHandlerPackagesNotify+0xd6>
                    break;
 800d0fc:	bf00      	nop
 800d0fe:	e002      	b.n	800d106 <LmHandlerPackagesNotify+0xd6>
                    break;
 800d100:	bf00      	nop
 800d102:	e000      	b.n	800d106 <LmHandlerPackagesNotify+0xd6>
                    break;
 800d104:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d106:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d10a:	b2db      	uxtb	r3, r3
 800d10c:	3301      	adds	r3, #1
 800d10e:	b2db      	uxtb	r3, r3
 800d110:	73fb      	strb	r3, [r7, #15]
 800d112:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d116:	2b04      	cmp	r3, #4
 800d118:	dd93      	ble.n	800d042 <LmHandlerPackagesNotify+0x12>
                }
            }
        }
    }
}
 800d11a:	bf00      	nop
 800d11c:	bf00      	nop
 800d11e:	3710      	adds	r7, #16
 800d120:	46bd      	mov	sp, r7
 800d122:	bd80      	pop	{r7, pc}
 800d124:	20000734 	.word	0x20000734

0800d128 <LmHandlerPackageIsTxPending>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool LmHandlerPackageIsTxPending( void )
{
 800d128:	b580      	push	{r7, lr}
 800d12a:	b082      	sub	sp, #8
 800d12c:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d12e:	2300      	movs	r3, #0
 800d130:	71fb      	strb	r3, [r7, #7]
 800d132:	e018      	b.n	800d166 <LmHandlerPackageIsTxPending+0x3e>
    {
        if( LmHandlerPackages[i] != NULL )
 800d134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d138:	4a0f      	ldr	r2, [pc, #60]	@ (800d178 <LmHandlerPackageIsTxPending+0x50>)
 800d13a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d00b      	beq.n	800d15a <LmHandlerPackageIsTxPending+0x32>
        {
            if( LmHandlerPackages[i]->IsTxPending( ) == true )
 800d142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d146:	4a0c      	ldr	r2, [pc, #48]	@ (800d178 <LmHandlerPackageIsTxPending+0x50>)
 800d148:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d14c:	68db      	ldr	r3, [r3, #12]
 800d14e:	4798      	blx	r3
 800d150:	4603      	mov	r3, r0
 800d152:	2b00      	cmp	r3, #0
 800d154:	d001      	beq.n	800d15a <LmHandlerPackageIsTxPending+0x32>
            {
                return true;
 800d156:	2301      	movs	r3, #1
 800d158:	e00a      	b.n	800d170 <LmHandlerPackageIsTxPending+0x48>
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d15a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d15e:	b2db      	uxtb	r3, r3
 800d160:	3301      	adds	r3, #1
 800d162:	b2db      	uxtb	r3, r3
 800d164:	71fb      	strb	r3, [r7, #7]
 800d166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d16a:	2b04      	cmp	r3, #4
 800d16c:	dde2      	ble.n	800d134 <LmHandlerPackageIsTxPending+0xc>
            }
        }
    }
    return false;
 800d16e:	2300      	movs	r3, #0
}
 800d170:	4618      	mov	r0, r3
 800d172:	3708      	adds	r7, #8
 800d174:	46bd      	mov	sp, r7
 800d176:	bd80      	pop	{r7, pc}
 800d178:	20000734 	.word	0x20000734

0800d17c <LmHandlerPackagesProcess>:
#endif /* LORAMAC_VERSION */

static void LmHandlerPackagesProcess( void )
{
 800d17c:	b580      	push	{r7, lr}
 800d17e:	b082      	sub	sp, #8
 800d180:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d182:	2300      	movs	r3, #0
 800d184:	71fb      	strb	r3, [r7, #7]
 800d186:	e022      	b.n	800d1ce <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800d188:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d18c:	4a14      	ldr	r2, [pc, #80]	@ (800d1e0 <LmHandlerPackagesProcess+0x64>)
 800d18e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d192:	2b00      	cmp	r3, #0
 800d194:	d015      	beq.n	800d1c2 <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800d196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d19a:	4a11      	ldr	r2, [pc, #68]	@ (800d1e0 <LmHandlerPackagesProcess+0x64>)
 800d19c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d1a0:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d00d      	beq.n	800d1c2 <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 800d1a6:	79fb      	ldrb	r3, [r7, #7]
 800d1a8:	4618      	mov	r0, r3
 800d1aa:	f7ff ff23 	bl	800cff4 <LmHandlerPackageIsInitialized>
 800d1ae:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d006      	beq.n	800d1c2 <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 800d1b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d1b8:	4a09      	ldr	r2, [pc, #36]	@ (800d1e0 <LmHandlerPackagesProcess+0x64>)
 800d1ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d1be:	691b      	ldr	r3, [r3, #16]
 800d1c0:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d1c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d1c6:	b2db      	uxtb	r3, r3
 800d1c8:	3301      	adds	r3, #1
 800d1ca:	b2db      	uxtb	r3, r3
 800d1cc:	71fb      	strb	r3, [r7, #7]
 800d1ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d1d2:	2b04      	cmp	r3, #4
 800d1d4:	ddd8      	ble.n	800d188 <LmHandlerPackagesProcess+0xc>
        }
    }
}
 800d1d6:	bf00      	nop
 800d1d8:	bf00      	nop
 800d1da:	3708      	adds	r7, #8
 800d1dc:	46bd      	mov	sp, r7
 800d1de:	bd80      	pop	{r7, pc}
 800d1e0:	20000734 	.word	0x20000734

0800d1e4 <LmHandlerGetVersion>:
 * ST ADDITIONAL FUNCTIONS
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion(LmHandlerVersionType_t lmhType, uint32_t *featureVersion)
{
 800d1e4:	b480      	push	{r7}
 800d1e6:	b083      	sub	sp, #12
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	4603      	mov	r3, r0
 800d1ec:	6039      	str	r1, [r7, #0]
 800d1ee:	71fb      	strb	r3, [r7, #7]
    if (featureVersion == NULL)
 800d1f0:	683b      	ldr	r3, [r7, #0]
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d102      	bne.n	800d1fc <LmHandlerGetVersion+0x18>
    {
        return LORAMAC_HANDLER_ERROR;
 800d1f6:	f04f 33ff 	mov.w	r3, #4294967295
 800d1fa:	e00e      	b.n	800d21a <LmHandlerGetVersion+0x36>
    }

    switch(lmhType)
 800d1fc:	79fb      	ldrb	r3, [r7, #7]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d002      	beq.n	800d208 <LmHandlerGetVersion+0x24>
 800d202:	2b01      	cmp	r3, #1
 800d204:	d004      	beq.n	800d210 <LmHandlerGetVersion+0x2c>
            break;
        case LORAMAC_HANDLER_REGION_VERSION:
            *featureVersion = REGION_VERSION;
            break;
        default:
          break;
 800d206:	e007      	b.n	800d218 <LmHandlerGetVersion+0x34>
            *featureVersion = LORAMAC_VERSION;
 800d208:	683b      	ldr	r3, [r7, #0]
 800d20a:	4a06      	ldr	r2, [pc, #24]	@ (800d224 <LmHandlerGetVersion+0x40>)
 800d20c:	601a      	str	r2, [r3, #0]
            break;
 800d20e:	e003      	b.n	800d218 <LmHandlerGetVersion+0x34>
            *featureVersion = REGION_VERSION;
 800d210:	683b      	ldr	r3, [r7, #0]
 800d212:	4a05      	ldr	r2, [pc, #20]	@ (800d228 <LmHandlerGetVersion+0x44>)
 800d214:	601a      	str	r2, [r3, #0]
            break;
 800d216:	bf00      	nop
    }

    return LORAMAC_HANDLER_SUCCESS;
 800d218:	2300      	movs	r3, #0
}
 800d21a:	4618      	mov	r0, r3
 800d21c:	370c      	adds	r7, #12
 800d21e:	46bd      	mov	sp, r7
 800d220:	bc80      	pop	{r7}
 800d222:	4770      	bx	lr
 800d224:	01000400 	.word	0x01000400
 800d228:	02010001 	.word	0x02010001

0800d22c <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop(void)
{
 800d22c:	b580      	push	{r7, lr}
 800d22e:	af00      	add	r7, sp, #0
    if (LoRaMacDeInitialization() == LORAMAC_STATUS_OK)
 800d230:	f005 fb76 	bl	8012920 <LoRaMacDeInitialization>
 800d234:	4603      	mov	r3, r0
 800d236:	2b00      	cmp	r3, #0
 800d238:	d101      	bne.n	800d23e <LmHandlerStop+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800d23a:	2300      	movs	r3, #0
 800d23c:	e001      	b.n	800d242 <LmHandlerStop+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800d23e:	f06f 0301 	mvn.w	r3, #1
    }
}
 800d242:	4618      	mov	r0, r3
 800d244:	bd80      	pop	{r7, pc}

0800d246 <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt(void)
{
 800d246:	b580      	push	{r7, lr}
 800d248:	af00      	add	r7, sp, #0
    if (LoRaMacHalt() == LORAMAC_STATUS_OK)
 800d24a:	f004 faaf 	bl	80117ac <LoRaMacHalt>
 800d24e:	4603      	mov	r3, r0
 800d250:	2b00      	cmp	r3, #0
 800d252:	d101      	bne.n	800d258 <LmHandlerHalt+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800d254:	2300      	movs	r3, #0
 800d256:	e001      	b.n	800d25c <LmHandlerHalt+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800d258:	f06f 0301 	mvn.w	r3, #1
    }
}
 800d25c:	4618      	mov	r0, r3
 800d25e:	bd80      	pop	{r7, pc}

0800d260 <LmHandlerNvmDataStore>:
        return LORAMAC_HANDLER_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 800d260:	b580      	push	{r7, lr}
 800d262:	b08e      	sub	sp, #56	@ 0x38
 800d264:	af00      	add	r7, sp, #0
    LoRaMacNvmData_t *nvm;
    uint32_t nvm_size;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800d266:	2300      	movs	r3, #0
 800d268:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    int32_t status = NVM_DATA_OK;
 800d26c:	2300      	movs	r3, #0
 800d26e:	633b      	str	r3, [r7, #48]	@ 0x30

    lmhStatus = LmHandlerHalt();
 800d270:	f7ff ffe9 	bl	800d246 <LmHandlerHalt>
 800d274:	4603      	mov	r3, r0
 800d276:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if (lmhStatus == LORAMAC_HANDLER_SUCCESS)
 800d27a:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d12f      	bne.n	800d2e2 <LmHandlerNvmDataStore+0x82>
    {
        status = NvmDataMgmtStoreBegin();
 800d282:	f000 f859 	bl	800d338 <NvmDataMgmtStoreBegin>
 800d286:	6338      	str	r0, [r7, #48]	@ 0x30

        if (status == NVM_DATA_NO_UPDATED_DATA)
 800d288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d28a:	f113 0f02 	cmn.w	r3, #2
 800d28e:	d103      	bne.n	800d298 <LmHandlerNvmDataStore+0x38>
        {
            lmhStatus = LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE;
 800d290:	23f8      	movs	r3, #248	@ 0xf8
 800d292:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800d296:	e01c      	b.n	800d2d2 <LmHandlerNvmDataStore+0x72>
        }
        else if (( status != NVM_DATA_OK ) || (LmHandlerCallbacks->OnStoreContextRequest == NULL))
 800d298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d104      	bne.n	800d2a8 <LmHandlerNvmDataStore+0x48>
 800d29e:	4b1b      	ldr	r3, [pc, #108]	@ (800d30c <LmHandlerNvmDataStore+0xac>)
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	695b      	ldr	r3, [r3, #20]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d103      	bne.n	800d2b0 <LmHandlerNvmDataStore+0x50>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800d2a8:	23ff      	movs	r3, #255	@ 0xff
 800d2aa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800d2ae:	e010      	b.n	800d2d2 <LmHandlerNvmDataStore+0x72>
        }
        else
        {
          MibRequestConfirm_t mibReq;
          mibReq.Type = MIB_NVM_CTXS;
 800d2b0:	2327      	movs	r3, #39	@ 0x27
 800d2b2:	713b      	strb	r3, [r7, #4]
          LoRaMacMibGetRequestConfirm( &mibReq );
 800d2b4:	1d3b      	adds	r3, r7, #4
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	f004 fb40 	bl	801193c <LoRaMacMibGetRequestConfirm>
          nvm = mibReq.Param.Contexts;
 800d2bc:	68bb      	ldr	r3, [r7, #8]
 800d2be:	62fb      	str	r3, [r7, #44]	@ 0x2c
          nvm_size = ((sizeof(LoRaMacNvmData_t) + 7) & ~0x07);
 800d2c0:	f44f 63b0 	mov.w	r3, #1408	@ 0x580
 800d2c4:	62bb      	str	r3, [r7, #40]	@ 0x28
          LmHandlerCallbacks->OnStoreContextRequest(nvm, nvm_size);
 800d2c6:	4b11      	ldr	r3, [pc, #68]	@ (800d30c <LmHandlerNvmDataStore+0xac>)
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	695b      	ldr	r3, [r3, #20]
 800d2cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d2ce:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d2d0:	4798      	blx	r3
        }

        if ( NvmDataMgmtStoreEnd() != NVM_DATA_OK )
 800d2d2:	f000 f847 	bl	800d364 <NvmDataMgmtStoreEnd>
 800d2d6:	4603      	mov	r3, r0
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d002      	beq.n	800d2e2 <LmHandlerNvmDataStore+0x82>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800d2dc:	23ff      	movs	r3, #255	@ 0xff
 800d2de:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
    }

    if ((lmhStatus == LORAMAC_HANDLER_SUCCESS) && (LmHandlerCallbacks->OnNvmDataChange != NULL ))
 800d2e2:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d109      	bne.n	800d2fe <LmHandlerNvmDataStore+0x9e>
 800d2ea:	4b08      	ldr	r3, [pc, #32]	@ (800d30c <LmHandlerNvmDataStore+0xac>)
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	69db      	ldr	r3, [r3, #28]
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d004      	beq.n	800d2fe <LmHandlerNvmDataStore+0x9e>
    {
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
 800d2f4:	4b05      	ldr	r3, [pc, #20]	@ (800d30c <LmHandlerNvmDataStore+0xac>)
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	69db      	ldr	r3, [r3, #28]
 800d2fa:	2001      	movs	r0, #1
 800d2fc:	4798      	blx	r3
    }

    return lmhStatus;
 800d2fe:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800d302:	4618      	mov	r0, r3
 800d304:	3738      	adds	r7, #56	@ 0x38
 800d306:	46bd      	mov	sp, r7
 800d308:	bd80      	pop	{r7, pc}
 800d30a:	bf00      	nop
 800d30c:	2000075c 	.word	0x2000075c

0800d310 <NvmDataMgmtEvent>:
static uint16_t NvmNotifyFlags = 0;

#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 800d310:	b480      	push	{r7}
 800d312:	b083      	sub	sp, #12
 800d314:	af00      	add	r7, sp, #0
 800d316:	4603      	mov	r3, r0
 800d318:	80fb      	strh	r3, [r7, #6]
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
 800d31a:	4b06      	ldr	r3, [pc, #24]	@ (800d334 <NvmDataMgmtEvent+0x24>)
 800d31c:	881a      	ldrh	r2, [r3, #0]
 800d31e:	88fb      	ldrh	r3, [r7, #6]
 800d320:	4313      	orrs	r3, r2
 800d322:	b29a      	uxth	r2, r3
 800d324:	4b03      	ldr	r3, [pc, #12]	@ (800d334 <NvmDataMgmtEvent+0x24>)
 800d326:	801a      	strh	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800d328:	bf00      	nop
 800d32a:	370c      	adds	r7, #12
 800d32c:	46bd      	mov	sp, r7
 800d32e:	bc80      	pop	{r7}
 800d330:	4770      	bx	lr
 800d332:	bf00      	nop
 800d334:	20000880 	.word	0x20000880

0800d338 <NvmDataMgmtStoreBegin>:

int32_t NvmDataMgmtStoreBegin( void )
{
 800d338:	b580      	push	{r7, lr}
 800d33a:	af00      	add	r7, sp, #0
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    // Input checks
    if( NvmNotifyFlags == LORAMAC_NVM_NOTIFY_FLAG_NONE )
 800d33c:	4b08      	ldr	r3, [pc, #32]	@ (800d360 <NvmDataMgmtStoreBegin+0x28>)
 800d33e:	881b      	ldrh	r3, [r3, #0]
 800d340:	2b00      	cmp	r3, #0
 800d342:	d102      	bne.n	800d34a <NvmDataMgmtStoreBegin+0x12>
    {
        // There was no update.
        return NVM_DATA_NO_UPDATED_DATA;
 800d344:	f06f 0301 	mvn.w	r3, #1
 800d348:	e008      	b.n	800d35c <NvmDataMgmtStoreBegin+0x24>
    }
    if( LoRaMacStop( ) != LORAMAC_STATUS_OK )
 800d34a:	f004 fa13 	bl	8011774 <LoRaMacStop>
 800d34e:	4603      	mov	r3, r0
 800d350:	2b00      	cmp	r3, #0
 800d352:	d002      	beq.n	800d35a <NvmDataMgmtStoreBegin+0x22>
    {
        return NVM_DATA_NOT_AVAILABLE;
 800d354:	f06f 0302 	mvn.w	r3, #2
 800d358:	e000      	b.n	800d35c <NvmDataMgmtStoreBegin+0x24>
    }
    return NVM_DATA_OK;
 800d35a:	2300      	movs	r3, #0
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800d35c:	4618      	mov	r0, r3
 800d35e:	bd80      	pop	{r7, pc}
 800d360:	20000880 	.word	0x20000880

0800d364 <NvmDataMgmtStoreEnd>:

int32_t NvmDataMgmtStoreEnd( void )
{
 800d364:	b580      	push	{r7, lr}
 800d366:	af00      	add	r7, sp, #0
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    // Reset notification flags
    NvmNotifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800d368:	4b03      	ldr	r3, [pc, #12]	@ (800d378 <NvmDataMgmtStoreEnd+0x14>)
 800d36a:	2200      	movs	r2, #0
 800d36c:	801a      	strh	r2, [r3, #0]

    // Resume LoRaMac
    LoRaMacStart( );
 800d36e:	f004 f9f3 	bl	8011758 <LoRaMacStart>
    return NVM_DATA_OK;
 800d372:	2300      	movs	r3, #0
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800d374:	4618      	mov	r0, r3
 800d376:	bd80      	pop	{r7, pc}
 800d378:	20000880 	.word	0x20000880

0800d37c <ClassBStatusReset>:

/*!
 * Reset Beacon status structure
 */
static inline void ClassBStatusReset( void )
{
 800d37c:	b580      	push	{r7, lr}
 800d37e:	af00      	add	r7, sp, #0
    memset1( ( uint8_t* ) &ComplianceTestState.ClassBStatus, 0, sizeof( ClassBStatus_t ) / sizeof( uint8_t ) );
 800d380:	2220      	movs	r2, #32
 800d382:	2100      	movs	r1, #0
 800d384:	4802      	ldr	r0, [pc, #8]	@ (800d390 <ClassBStatusReset+0x14>)
 800d386:	f009 fe0f 	bl	8016fa8 <memset1>
}
 800d38a:	bf00      	nop
 800d38c:	bd80      	pop	{r7, pc}
 800d38e:	bf00      	nop
 800d390:	20000898 	.word	0x20000898

0800d394 <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate         = NULL,  // To be initialized by LmHandler
    .OnSystemReset           = NULL,  // To be initialized by LmHandler
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 800d394:	b480      	push	{r7}
 800d396:	af00      	add	r7, sp, #0
    return &CompliancePackage;
 800d398:	4b02      	ldr	r3, [pc, #8]	@ (800d3a4 <LmhpCompliancePackageFactory+0x10>)
}
 800d39a:	4618      	mov	r0, r3
 800d39c:	46bd      	mov	sp, r7
 800d39e:	bc80      	pop	{r7}
 800d3a0:	4770      	bx	lr
 800d3a2:	bf00      	nop
 800d3a4:	200000d0 	.word	0x200000d0

0800d3a8 <LmhpComplianceInit>:

static void LmhpComplianceInit( void* params, uint8_t* dataBuffer, uint8_t dataBufferMaxSize )
{
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	b086      	sub	sp, #24
 800d3ac:	af02      	add	r7, sp, #8
 800d3ae:	60f8      	str	r0, [r7, #12]
 800d3b0:	60b9      	str	r1, [r7, #8]
 800d3b2:	4613      	mov	r3, r2
 800d3b4:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d018      	beq.n	800d3ee <LmhpComplianceInit+0x46>
 800d3bc:	68bb      	ldr	r3, [r7, #8]
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d015      	beq.n	800d3ee <LmhpComplianceInit+0x46>
    {
        ComplianceParams                      = ( LmhpComplianceParams_t* ) params;
 800d3c2:	4a19      	ldr	r2, [pc, #100]	@ (800d428 <LmhpComplianceInit+0x80>)
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer        = dataBuffer;
 800d3c8:	4a18      	ldr	r2, [pc, #96]	@ (800d42c <LmhpComplianceInit+0x84>)
 800d3ca:	68bb      	ldr	r3, [r7, #8]
 800d3cc:	60d3      	str	r3, [r2, #12]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800d3ce:	4a17      	ldr	r2, [pc, #92]	@ (800d42c <LmhpComplianceInit+0x84>)
 800d3d0:	79fb      	ldrb	r3, [r7, #7]
 800d3d2:	7253      	strb	r3, [r2, #9]
        ComplianceTestState.Initialized       = true;
 800d3d4:	4b15      	ldr	r3, [pc, #84]	@ (800d42c <LmhpComplianceInit+0x84>)
 800d3d6:	2201      	movs	r2, #1
 800d3d8:	701a      	strb	r2, [r3, #0]
        TimerInit( &ProcessTimer, OnProcessTimer );
 800d3da:	2300      	movs	r3, #0
 800d3dc:	9300      	str	r3, [sp, #0]
 800d3de:	4b14      	ldr	r3, [pc, #80]	@ (800d430 <LmhpComplianceInit+0x88>)
 800d3e0:	2200      	movs	r2, #0
 800d3e2:	f04f 31ff 	mov.w	r1, #4294967295
 800d3e6:	4813      	ldr	r0, [pc, #76]	@ (800d434 <LmhpComplianceInit+0x8c>)
 800d3e8:	f00d fe4c 	bl	801b084 <UTIL_TIMER_Create>
 800d3ec:	e005      	b.n	800d3fa <LmhpComplianceInit+0x52>
    }
    else
    {
        ComplianceParams                = NULL;
 800d3ee:	4b0e      	ldr	r3, [pc, #56]	@ (800d428 <LmhpComplianceInit+0x80>)
 800d3f0:	2200      	movs	r2, #0
 800d3f2:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 800d3f4:	4b0d      	ldr	r3, [pc, #52]	@ (800d42c <LmhpComplianceInit+0x84>)
 800d3f6:	2200      	movs	r2, #0
 800d3f8:	701a      	strb	r2, [r3, #0]
    }
    ComplianceTestState.RxAppCnt = 0;
 800d3fa:	4b0c      	ldr	r3, [pc, #48]	@ (800d42c <LmhpComplianceInit+0x84>)
 800d3fc:	2200      	movs	r2, #0
 800d3fe:	821a      	strh	r2, [r3, #16]
    ClassBStatusReset( );
 800d400:	f7ff ffbc 	bl	800d37c <ClassBStatusReset>
    ComplianceTestState.IsTxPending = false;
 800d404:	4b09      	ldr	r3, [pc, #36]	@ (800d42c <LmhpComplianceInit+0x84>)
 800d406:	2200      	movs	r2, #0
 800d408:	705a      	strb	r2, [r3, #1]
    ComplianceTestState.IsBeaconRxStatusIndOn = false;
 800d40a:	4b08      	ldr	r3, [pc, #32]	@ (800d42c <LmhpComplianceInit+0x84>)
 800d40c:	2200      	movs	r2, #0
 800d40e:	749a      	strb	r2, [r3, #18]
    ComplianceTestState.IsResetCmdPending = false;
 800d410:	4b06      	ldr	r3, [pc, #24]	@ (800d42c <LmhpComplianceInit+0x84>)
 800d412:	2200      	movs	r2, #0
 800d414:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    ComplianceTestState.IsClassReqCmdPending = false;
 800d418:	4b04      	ldr	r3, [pc, #16]	@ (800d42c <LmhpComplianceInit+0x84>)
 800d41a:	2200      	movs	r2, #0
 800d41c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
}
 800d420:	bf00      	nop
 800d422:	3710      	adds	r7, #16
 800d424:	46bd      	mov	sp, r7
 800d426:	bd80      	pop	{r7, pc}
 800d428:	200008bc 	.word	0x200008bc
 800d42c:	20000884 	.word	0x20000884
 800d430:	0800dd1d 	.word	0x0800dd1d
 800d434:	200008c0 	.word	0x200008c0

0800d438 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 800d438:	b480      	push	{r7}
 800d43a:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 800d43c:	4b02      	ldr	r3, [pc, #8]	@ (800d448 <LmhpComplianceIsInitialized+0x10>)
 800d43e:	781b      	ldrb	r3, [r3, #0]
}
 800d440:	4618      	mov	r0, r3
 800d442:	46bd      	mov	sp, r7
 800d444:	bc80      	pop	{r7}
 800d446:	4770      	bx	lr
 800d448:	20000884 	.word	0x20000884

0800d44c <LmhpComplianceIsTxPending>:

static bool LmhpComplianceIsTxPending( void )
{
 800d44c:	b480      	push	{r7}
 800d44e:	af00      	add	r7, sp, #0
    return ComplianceTestState.IsTxPending;
 800d450:	4b02      	ldr	r3, [pc, #8]	@ (800d45c <LmhpComplianceIsTxPending+0x10>)
 800d452:	785b      	ldrb	r3, [r3, #1]
}
 800d454:	4618      	mov	r0, r3
 800d456:	46bd      	mov	sp, r7
 800d458:	bc80      	pop	{r7}
 800d45a:	4770      	bx	lr
 800d45c:	20000884 	.word	0x20000884

0800d460 <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 800d460:	b590      	push	{r4, r7, lr}
 800d462:	b085      	sub	sp, #20
 800d464:	af00      	add	r7, sp, #0
    if( ComplianceTestState.IsTxPending == true )
 800d466:	4b33      	ldr	r3, [pc, #204]	@ (800d534 <LmhpComplianceProcess+0xd4>)
 800d468:	785b      	ldrb	r3, [r3, #1]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d03f      	beq.n	800d4ee <LmhpComplianceProcess+0x8e>
    {
        TimerTime_t now = TimerGetCurrentTime( );
 800d46e:	f00d ffc7 	bl	801b400 <UTIL_TIMER_GetCurrentTime>
 800d472:	60f8      	str	r0, [r7, #12]
        if( now > ( ComplianceTestState.TxPendingTimestamp + LmHandlerGetDutyCycleWaitTime( ) ) )
 800d474:	4b2f      	ldr	r3, [pc, #188]	@ (800d534 <LmhpComplianceProcess+0xd4>)
 800d476:	685c      	ldr	r4, [r3, #4]
 800d478:	f7ff f96a 	bl	800c750 <LmHandlerGetDutyCycleWaitTime>
 800d47c:	4603      	mov	r3, r0
 800d47e:	4423      	add	r3, r4
 800d480:	68fa      	ldr	r2, [r7, #12]
 800d482:	429a      	cmp	r2, r3
 800d484:	d942      	bls.n	800d50c <LmhpComplianceProcess+0xac>
        {
            if( ComplianceTestState.DataBufferSize != 0 )
 800d486:	4b2b      	ldr	r3, [pc, #172]	@ (800d534 <LmhpComplianceProcess+0xd4>)
 800d488:	7a9b      	ldrb	r3, [r3, #10]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d03e      	beq.n	800d50c <LmhpComplianceProcess+0xac>
            {
                // Answer commands
                LmHandlerAppData_t appData = {
 800d48e:	23e0      	movs	r3, #224	@ 0xe0
 800d490:	703b      	strb	r3, [r7, #0]
                    .Buffer     = ComplianceTestState.DataBuffer,
                    .BufferSize = ComplianceTestState.DataBufferSize,
 800d492:	4b28      	ldr	r3, [pc, #160]	@ (800d534 <LmhpComplianceProcess+0xd4>)
 800d494:	7a9b      	ldrb	r3, [r3, #10]
                LmHandlerAppData_t appData = {
 800d496:	707b      	strb	r3, [r7, #1]
                    .Buffer     = ComplianceTestState.DataBuffer,
 800d498:	4b26      	ldr	r3, [pc, #152]	@ (800d534 <LmhpComplianceProcess+0xd4>)
 800d49a:	68db      	ldr	r3, [r3, #12]
                LmHandlerAppData_t appData = {
 800d49c:	607b      	str	r3, [r7, #4]
                    .Port       = COMPLIANCE_PORT,
                };
                LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800d49e:	23ff      	movs	r3, #255	@ 0xff
 800d4a0:	72fb      	strb	r3, [r7, #11]
                lmhStatus = LmHandlerSend( &appData, ComplianceTestState.IsTxConfirmed, true );
 800d4a2:	4b24      	ldr	r3, [pc, #144]	@ (800d534 <LmhpComplianceProcess+0xd4>)
 800d4a4:	7a19      	ldrb	r1, [r3, #8]
 800d4a6:	463b      	mov	r3, r7
 800d4a8:	2201      	movs	r2, #1
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	f7ff f9f8 	bl	800c8a0 <LmHandlerSend>
 800d4b0:	4603      	mov	r3, r0
 800d4b2:	72fb      	strb	r3, [r7, #11]
                if ((lmhStatus == LORAMAC_HANDLER_BUSY_ERROR) || (lmhStatus == LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED))
 800d4b4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d4b8:	f113 0f02 	cmn.w	r3, #2
 800d4bc:	d004      	beq.n	800d4c8 <LmhpComplianceProcess+0x68>
 800d4be:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d4c2:	f113 0f06 	cmn.w	r3, #6
 800d4c6:	d108      	bne.n	800d4da <LmhpComplianceProcess+0x7a>
                {
                    // try to send the message again
                    TimerSetValue( &ProcessTimer, 1000 );
 800d4c8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800d4cc:	481a      	ldr	r0, [pc, #104]	@ (800d538 <LmhpComplianceProcess+0xd8>)
 800d4ce:	f00d feed 	bl	801b2ac <UTIL_TIMER_SetPeriod>
                    TimerStart(&ProcessTimer);
 800d4d2:	4819      	ldr	r0, [pc, #100]	@ (800d538 <LmhpComplianceProcess+0xd8>)
 800d4d4:	f00d fe0c 	bl	801b0f0 <UTIL_TIMER_Start>
 800d4d8:	e005      	b.n	800d4e6 <LmhpComplianceProcess+0x86>
                }
                else
                {
                    ComplianceTestState.IsTxPending = false;
 800d4da:	4b16      	ldr	r3, [pc, #88]	@ (800d534 <LmhpComplianceProcess+0xd4>)
 800d4dc:	2200      	movs	r2, #0
 800d4de:	705a      	strb	r2, [r3, #1]
                    ComplianceTestState.DataBufferSize = 0;
 800d4e0:	4b14      	ldr	r3, [pc, #80]	@ (800d534 <LmhpComplianceProcess+0xd4>)
 800d4e2:	2200      	movs	r2, #0
 800d4e4:	729a      	strb	r2, [r3, #10]
                }
                ComplianceTestState.TxPendingTimestamp = now;
 800d4e6:	4a13      	ldr	r2, [pc, #76]	@ (800d534 <LmhpComplianceProcess+0xd4>)
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	6053      	str	r3, [r2, #4]
 800d4ec:	e00e      	b.n	800d50c <LmhpComplianceProcess+0xac>
            }
        }
    }
    else
    { // If no Tx is pending process other commands
        if( ComplianceTestState.IsClassReqCmdPending == true )
 800d4ee:	4b11      	ldr	r3, [pc, #68]	@ (800d534 <LmhpComplianceProcess+0xd4>)
 800d4f0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d009      	beq.n	800d50c <LmhpComplianceProcess+0xac>
        {
            ComplianceTestState.IsClassReqCmdPending = false;
 800d4f8:	4b0e      	ldr	r3, [pc, #56]	@ (800d534 <LmhpComplianceProcess+0xd4>)
 800d4fa:	2200      	movs	r2, #0
 800d4fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
            LmHandlerRequestClass( ComplianceTestState.NewClass );
 800d500:	4b0c      	ldr	r3, [pc, #48]	@ (800d534 <LmhpComplianceProcess+0xd4>)
 800d502:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800d506:	4618      	mov	r0, r3
 800d508:	f7ff fab8 	bl	800ca7c <LmHandlerRequestClass>
        }
    }

    if( ComplianceTestState.IsResetCmdPending == true )
 800d50c:	4b09      	ldr	r3, [pc, #36]	@ (800d534 <LmhpComplianceProcess+0xd4>)
 800d50e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800d512:	2b00      	cmp	r3, #0
 800d514:	d00a      	beq.n	800d52c <LmhpComplianceProcess+0xcc>
    {
        ComplianceTestState.IsResetCmdPending = false;
 800d516:	4b07      	ldr	r3, [pc, #28]	@ (800d534 <LmhpComplianceProcess+0xd4>)
 800d518:	2200      	movs	r2, #0
 800d51a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        // Call platform MCU reset API
        if (CompliancePackage.OnSystemReset != NULL)
 800d51e:	4b07      	ldr	r3, [pc, #28]	@ (800d53c <LmhpComplianceProcess+0xdc>)
 800d520:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d522:	2b00      	cmp	r3, #0
 800d524:	d002      	beq.n	800d52c <LmhpComplianceProcess+0xcc>
        {
            CompliancePackage.OnSystemReset( );
 800d526:	4b05      	ldr	r3, [pc, #20]	@ (800d53c <LmhpComplianceProcess+0xdc>)
 800d528:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d52a:	4798      	blx	r3
        }
    }
}
 800d52c:	bf00      	nop
 800d52e:	3714      	adds	r7, #20
 800d530:	46bd      	mov	sp, r7
 800d532:	bd90      	pop	{r4, r7, pc}
 800d534:	20000884 	.word	0x20000884
 800d538:	200008c0 	.word	0x200008c0
 800d53c:	200000d0 	.word	0x200000d0

0800d540 <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t* mcpsIndication )
{
 800d540:	b5b0      	push	{r4, r5, r7, lr}
 800d542:	b0a4      	sub	sp, #144	@ 0x90
 800d544:	af00      	add	r7, sp, #0
 800d546:	6078      	str	r0, [r7, #4]
    uint8_t cmdIndex        = 0;
 800d548:	2300      	movs	r3, #0
 800d54a:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    MibRequestConfirm_t mibReq;

    if( ComplianceTestState.Initialized == false )
 800d54e:	4bce      	ldr	r3, [pc, #824]	@ (800d888 <LmhpComplianceOnMcpsIndication+0x348>)
 800d550:	781b      	ldrb	r3, [r3, #0]
 800d552:	f083 0301 	eor.w	r3, r3, #1
 800d556:	b2db      	uxtb	r3, r3
 800d558:	2b00      	cmp	r3, #0
 800d55a:	f040 83b5 	bne.w	800dcc8 <LmhpComplianceOnMcpsIndication+0x788>
        return;
    }

    // Increment the compliance certification protocol downlink counter
    // Not counting downlinks on FPort 0
    if( ( mcpsIndication->Port > 0 ) || ( mcpsIndication->AckReceived == true ) )
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	78db      	ldrb	r3, [r3, #3]
 800d562:	2b00      	cmp	r3, #0
 800d564:	d103      	bne.n	800d56e <LmhpComplianceOnMcpsIndication+0x2e>
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	7b9b      	ldrb	r3, [r3, #14]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d005      	beq.n	800d57a <LmhpComplianceOnMcpsIndication+0x3a>
    {
        ComplianceTestState.RxAppCnt++;
 800d56e:	4bc6      	ldr	r3, [pc, #792]	@ (800d888 <LmhpComplianceOnMcpsIndication+0x348>)
 800d570:	8a1b      	ldrh	r3, [r3, #16]
 800d572:	3301      	adds	r3, #1
 800d574:	b29a      	uxth	r2, r3
 800d576:	4bc4      	ldr	r3, [pc, #784]	@ (800d888 <LmhpComplianceOnMcpsIndication+0x348>)
 800d578:	821a      	strh	r2, [r3, #16]
    }

    if( mcpsIndication->RxData == false )
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	7b5b      	ldrb	r3, [r3, #13]
 800d57e:	f083 0301 	eor.w	r3, r3, #1
 800d582:	b2db      	uxtb	r3, r3
 800d584:	2b00      	cmp	r3, #0
 800d586:	f040 83a1 	bne.w	800dccc <LmhpComplianceOnMcpsIndication+0x78c>
    {
        return;
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	78db      	ldrb	r3, [r3, #3]
 800d58e:	2be0      	cmp	r3, #224	@ 0xe0
 800d590:	f040 839e 	bne.w	800dcd0 <LmhpComplianceOnMcpsIndication+0x790>
    {
        return;
    }

    ComplianceTestState.DataBufferSize = 0;
 800d594:	4bbc      	ldr	r3, [pc, #752]	@ (800d888 <LmhpComplianceOnMcpsIndication+0x348>)
 800d596:	2200      	movs	r2, #0
 800d598:	729a      	strb	r2, [r3, #10]

    switch( mcpsIndication->Buffer[cmdIndex++] )
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	689a      	ldr	r2, [r3, #8]
 800d59e:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d5a2:	1c59      	adds	r1, r3, #1
 800d5a4:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800d5a8:	4413      	add	r3, r2
 800d5aa:	781b      	ldrb	r3, [r3, #0]
 800d5ac:	2b7f      	cmp	r3, #127	@ 0x7f
 800d5ae:	f200 836e 	bhi.w	800dc8e <LmhpComplianceOnMcpsIndication+0x74e>
 800d5b2:	a201      	add	r2, pc, #4	@ (adr r2, 800d5b8 <LmhpComplianceOnMcpsIndication+0x78>)
 800d5b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5b8:	0800d7b9 	.word	0x0800d7b9
 800d5bc:	0800d7fd 	.word	0x0800d7fd
 800d5c0:	0800d807 	.word	0x0800d807
 800d5c4:	0800d813 	.word	0x0800d813
 800d5c8:	0800d835 	.word	0x0800d835
 800d5cc:	0800d863 	.word	0x0800d863
 800d5d0:	0800d891 	.word	0x0800d891
 800d5d4:	0800d8ef 	.word	0x0800d8ef
 800d5d8:	0800d947 	.word	0x0800d947
 800d5dc:	0800d9b3 	.word	0x0800d9b3
 800d5e0:	0800da03 	.word	0x0800da03
 800d5e4:	0800dc8f 	.word	0x0800dc8f
 800d5e8:	0800dc8f 	.word	0x0800dc8f
 800d5ec:	0800dc8f 	.word	0x0800dc8f
 800d5f0:	0800dc8f 	.word	0x0800dc8f
 800d5f4:	0800dc8f 	.word	0x0800dc8f
 800d5f8:	0800dc8f 	.word	0x0800dc8f
 800d5fc:	0800dc8f 	.word	0x0800dc8f
 800d600:	0800dc8f 	.word	0x0800dc8f
 800d604:	0800dc8f 	.word	0x0800dc8f
 800d608:	0800dc8f 	.word	0x0800dc8f
 800d60c:	0800dc8f 	.word	0x0800dc8f
 800d610:	0800dc8f 	.word	0x0800dc8f
 800d614:	0800dc8f 	.word	0x0800dc8f
 800d618:	0800dc8f 	.word	0x0800dc8f
 800d61c:	0800dc8f 	.word	0x0800dc8f
 800d620:	0800dc8f 	.word	0x0800dc8f
 800d624:	0800dc8f 	.word	0x0800dc8f
 800d628:	0800dc8f 	.word	0x0800dc8f
 800d62c:	0800dc8f 	.word	0x0800dc8f
 800d630:	0800dc8f 	.word	0x0800dc8f
 800d634:	0800dc8f 	.word	0x0800dc8f
 800d638:	0800da0b 	.word	0x0800da0b
 800d63c:	0800da1d 	.word	0x0800da1d
 800d640:	0800da25 	.word	0x0800da25
 800d644:	0800dc8f 	.word	0x0800dc8f
 800d648:	0800dc8f 	.word	0x0800dc8f
 800d64c:	0800dc8f 	.word	0x0800dc8f
 800d650:	0800dc8f 	.word	0x0800dc8f
 800d654:	0800dc8f 	.word	0x0800dc8f
 800d658:	0800dc8f 	.word	0x0800dc8f
 800d65c:	0800dc8f 	.word	0x0800dc8f
 800d660:	0800dc8f 	.word	0x0800dc8f
 800d664:	0800dc8f 	.word	0x0800dc8f
 800d668:	0800dc8f 	.word	0x0800dc8f
 800d66c:	0800dc8f 	.word	0x0800dc8f
 800d670:	0800dc8f 	.word	0x0800dc8f
 800d674:	0800dc8f 	.word	0x0800dc8f
 800d678:	0800dc8f 	.word	0x0800dc8f
 800d67c:	0800dc8f 	.word	0x0800dc8f
 800d680:	0800dc8f 	.word	0x0800dc8f
 800d684:	0800dc8f 	.word	0x0800dc8f
 800d688:	0800dc8f 	.word	0x0800dc8f
 800d68c:	0800dc8f 	.word	0x0800dc8f
 800d690:	0800dc8f 	.word	0x0800dc8f
 800d694:	0800dc8f 	.word	0x0800dc8f
 800d698:	0800dc8f 	.word	0x0800dc8f
 800d69c:	0800dc8f 	.word	0x0800dc8f
 800d6a0:	0800dc8f 	.word	0x0800dc8f
 800d6a4:	0800dc8f 	.word	0x0800dc8f
 800d6a8:	0800dc8f 	.word	0x0800dc8f
 800d6ac:	0800dc8f 	.word	0x0800dc8f
 800d6b0:	0800dc8f 	.word	0x0800dc8f
 800d6b4:	0800dc8f 	.word	0x0800dc8f
 800d6b8:	0800dc8f 	.word	0x0800dc8f
 800d6bc:	0800dc8f 	.word	0x0800dc8f
 800d6c0:	0800dc8f 	.word	0x0800dc8f
 800d6c4:	0800dc8f 	.word	0x0800dc8f
 800d6c8:	0800dc8f 	.word	0x0800dc8f
 800d6cc:	0800dc8f 	.word	0x0800dc8f
 800d6d0:	0800dc8f 	.word	0x0800dc8f
 800d6d4:	0800dc8f 	.word	0x0800dc8f
 800d6d8:	0800dc8f 	.word	0x0800dc8f
 800d6dc:	0800dc8f 	.word	0x0800dc8f
 800d6e0:	0800dc8f 	.word	0x0800dc8f
 800d6e4:	0800dc8f 	.word	0x0800dc8f
 800d6e8:	0800dc8f 	.word	0x0800dc8f
 800d6ec:	0800dc8f 	.word	0x0800dc8f
 800d6f0:	0800dc8f 	.word	0x0800dc8f
 800d6f4:	0800dc8f 	.word	0x0800dc8f
 800d6f8:	0800dc8f 	.word	0x0800dc8f
 800d6fc:	0800dc8f 	.word	0x0800dc8f
 800d700:	0800dc8f 	.word	0x0800dc8f
 800d704:	0800dc8f 	.word	0x0800dc8f
 800d708:	0800dc8f 	.word	0x0800dc8f
 800d70c:	0800dc8f 	.word	0x0800dc8f
 800d710:	0800dc8f 	.word	0x0800dc8f
 800d714:	0800dc8f 	.word	0x0800dc8f
 800d718:	0800dc8f 	.word	0x0800dc8f
 800d71c:	0800dc8f 	.word	0x0800dc8f
 800d720:	0800dc8f 	.word	0x0800dc8f
 800d724:	0800dc8f 	.word	0x0800dc8f
 800d728:	0800dc8f 	.word	0x0800dc8f
 800d72c:	0800dc8f 	.word	0x0800dc8f
 800d730:	0800dc8f 	.word	0x0800dc8f
 800d734:	0800dc8f 	.word	0x0800dc8f
 800d738:	0800dc8f 	.word	0x0800dc8f
 800d73c:	0800dc8f 	.word	0x0800dc8f
 800d740:	0800dc8f 	.word	0x0800dc8f
 800d744:	0800dc8f 	.word	0x0800dc8f
 800d748:	0800dc8f 	.word	0x0800dc8f
 800d74c:	0800dc8f 	.word	0x0800dc8f
 800d750:	0800dc8f 	.word	0x0800dc8f
 800d754:	0800dc8f 	.word	0x0800dc8f
 800d758:	0800dc8f 	.word	0x0800dc8f
 800d75c:	0800dc8f 	.word	0x0800dc8f
 800d760:	0800dc8f 	.word	0x0800dc8f
 800d764:	0800dc8f 	.word	0x0800dc8f
 800d768:	0800dc8f 	.word	0x0800dc8f
 800d76c:	0800dc8f 	.word	0x0800dc8f
 800d770:	0800dc8f 	.word	0x0800dc8f
 800d774:	0800dc8f 	.word	0x0800dc8f
 800d778:	0800dc8f 	.word	0x0800dc8f
 800d77c:	0800dc8f 	.word	0x0800dc8f
 800d780:	0800dc8f 	.word	0x0800dc8f
 800d784:	0800dc8f 	.word	0x0800dc8f
 800d788:	0800dc8f 	.word	0x0800dc8f
 800d78c:	0800dc8f 	.word	0x0800dc8f
 800d790:	0800dc8f 	.word	0x0800dc8f
 800d794:	0800dc8f 	.word	0x0800dc8f
 800d798:	0800dc8f 	.word	0x0800dc8f
 800d79c:	0800dc8f 	.word	0x0800dc8f
 800d7a0:	0800dc8f 	.word	0x0800dc8f
 800d7a4:	0800dc8f 	.word	0x0800dc8f
 800d7a8:	0800dc8f 	.word	0x0800dc8f
 800d7ac:	0800da57 	.word	0x0800da57
 800d7b0:	0800db09 	.word	0x0800db09
 800d7b4:	0800db39 	.word	0x0800db39
    {
    case COMPLIANCE_PKG_VERSION_REQ:
    {
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_PKG_VERSION_ANS;
 800d7b8:	4b33      	ldr	r3, [pc, #204]	@ (800d888 <LmhpComplianceOnMcpsIndication+0x348>)
 800d7ba:	68da      	ldr	r2, [r3, #12]
 800d7bc:	4b32      	ldr	r3, [pc, #200]	@ (800d888 <LmhpComplianceOnMcpsIndication+0x348>)
 800d7be:	7a9b      	ldrb	r3, [r3, #10]
 800d7c0:	1c59      	adds	r1, r3, #1
 800d7c2:	b2c8      	uxtb	r0, r1
 800d7c4:	4930      	ldr	r1, [pc, #192]	@ (800d888 <LmhpComplianceOnMcpsIndication+0x348>)
 800d7c6:	7288      	strb	r0, [r1, #10]
 800d7c8:	4413      	add	r3, r2
 800d7ca:	2200      	movs	r2, #0
 800d7cc:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ID;
 800d7ce:	4b2e      	ldr	r3, [pc, #184]	@ (800d888 <LmhpComplianceOnMcpsIndication+0x348>)
 800d7d0:	68da      	ldr	r2, [r3, #12]
 800d7d2:	4b2d      	ldr	r3, [pc, #180]	@ (800d888 <LmhpComplianceOnMcpsIndication+0x348>)
 800d7d4:	7a9b      	ldrb	r3, [r3, #10]
 800d7d6:	1c59      	adds	r1, r3, #1
 800d7d8:	b2c8      	uxtb	r0, r1
 800d7da:	492b      	ldr	r1, [pc, #172]	@ (800d888 <LmhpComplianceOnMcpsIndication+0x348>)
 800d7dc:	7288      	strb	r0, [r1, #10]
 800d7de:	4413      	add	r3, r2
 800d7e0:	2206      	movs	r2, #6
 800d7e2:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_VERSION;
 800d7e4:	4b28      	ldr	r3, [pc, #160]	@ (800d888 <LmhpComplianceOnMcpsIndication+0x348>)
 800d7e6:	68da      	ldr	r2, [r3, #12]
 800d7e8:	4b27      	ldr	r3, [pc, #156]	@ (800d888 <LmhpComplianceOnMcpsIndication+0x348>)
 800d7ea:	7a9b      	ldrb	r3, [r3, #10]
 800d7ec:	1c59      	adds	r1, r3, #1
 800d7ee:	b2c8      	uxtb	r0, r1
 800d7f0:	4925      	ldr	r1, [pc, #148]	@ (800d888 <LmhpComplianceOnMcpsIndication+0x348>)
 800d7f2:	7288      	strb	r0, [r1, #10]
 800d7f4:	4413      	add	r3, r2
 800d7f6:	2201      	movs	r2, #1
 800d7f8:	701a      	strb	r2, [r3, #0]
        break;
 800d7fa:	e251      	b.n	800dca0 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_DUT_RESET_REQ:
    {
        ComplianceTestState.IsResetCmdPending = true;
 800d7fc:	4b22      	ldr	r3, [pc, #136]	@ (800d888 <LmhpComplianceOnMcpsIndication+0x348>)
 800d7fe:	2201      	movs	r2, #1
 800d800:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        break;
 800d804:	e24c      	b.n	800dca0 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_DUT_JOIN_REQ:
    {
        CompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 800d806:	4b21      	ldr	r3, [pc, #132]	@ (800d88c <LmhpComplianceOnMcpsIndication+0x34c>)
 800d808:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d80a:	2101      	movs	r1, #1
 800d80c:	2002      	movs	r0, #2
 800d80e:	4798      	blx	r3
        break;
 800d810:	e246      	b.n	800dca0 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_SWITCH_CLASS_REQ:
    {
        // CLASS_A = 0, CLASS_B = 1, CLASS_C = 2
        ComplianceTestState.NewClass = ( DeviceClass_t ) mcpsIndication->Buffer[cmdIndex++];
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	689a      	ldr	r2, [r3, #8]
 800d816:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d81a:	1c59      	adds	r1, r3, #1
 800d81c:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800d820:	4413      	add	r3, r2
 800d822:	781a      	ldrb	r2, [r3, #0]
 800d824:	4b18      	ldr	r3, [pc, #96]	@ (800d888 <LmhpComplianceOnMcpsIndication+0x348>)
 800d826:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
        ComplianceTestState.IsClassReqCmdPending = true;
 800d82a:	4b17      	ldr	r3, [pc, #92]	@ (800d888 <LmhpComplianceOnMcpsIndication+0x348>)
 800d82c:	2201      	movs	r2, #1
 800d82e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        break;
 800d832:	e235      	b.n	800dca0 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_ADR_BIT_CHANGE_REQ:
    {
        MibRequestConfirm_t mibReq;
        mibReq.Type            = MIB_ADR;
 800d834:	2304      	movs	r3, #4
 800d836:	733b      	strb	r3, [r7, #12]
        mibReq.Param.AdrEnable = mcpsIndication->Buffer[cmdIndex++];
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	689a      	ldr	r2, [r3, #8]
 800d83c:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d840:	1c59      	adds	r1, r3, #1
 800d842:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800d846:	4413      	add	r3, r2
 800d848:	781b      	ldrb	r3, [r3, #0]
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	bf14      	ite	ne
 800d84e:	2301      	movne	r3, #1
 800d850:	2300      	moveq	r3, #0
 800d852:	b2db      	uxtb	r3, r3
 800d854:	743b      	strb	r3, [r7, #16]

        LoRaMacMibSetRequestConfirm( &mibReq );
 800d856:	f107 030c 	add.w	r3, r7, #12
 800d85a:	4618      	mov	r0, r3
 800d85c:	f004 fa14 	bl	8011c88 <LoRaMacMibSetRequestConfirm>
        break;
 800d860:	e21e      	b.n	800dca0 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_REGIONAL_DUTY_CYCLE_CTRL_REQ:
    {
        LoRaMacTestSetDutyCycleOn( mcpsIndication->Buffer[cmdIndex++] );
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	689a      	ldr	r2, [r3, #8]
 800d866:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d86a:	1c59      	adds	r1, r3, #1
 800d86c:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800d870:	4413      	add	r3, r2
 800d872:	781b      	ldrb	r3, [r3, #0]
 800d874:	2b00      	cmp	r3, #0
 800d876:	bf14      	ite	ne
 800d878:	2301      	movne	r3, #1
 800d87a:	2300      	moveq	r3, #0
 800d87c:	b2db      	uxtb	r3, r3
 800d87e:	4618      	mov	r0, r3
 800d880:	f005 f830 	bl	80128e4 <LoRaMacTestSetDutyCycleOn>
        break;
 800d884:	e20c      	b.n	800dca0 <LmhpComplianceOnMcpsIndication+0x760>
 800d886:	bf00      	nop
 800d888:	20000884 	.word	0x20000884
 800d88c:	200000d0 	.word	0x200000d0
    }
    case COMPLIANCE_TX_PERIODICITY_CHANGE_REQ:
    {
        // Periodicity in milli-seconds
        uint32_t periodicity[] = { 0, 5000, 10000, 20000, 30000, 40000, 50000, 60000, 120000, 240000, 480000 };
 800d890:	4ba5      	ldr	r3, [pc, #660]	@ (800db28 <LmhpComplianceOnMcpsIndication+0x5e8>)
 800d892:	f107 040c 	add.w	r4, r7, #12
 800d896:	461d      	mov	r5, r3
 800d898:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d89a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d89c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d89e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d8a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800d8a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        uint8_t  index         = mcpsIndication->Buffer[cmdIndex++];
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	689a      	ldr	r2, [r3, #8]
 800d8ac:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d8b0:	1c59      	adds	r1, r3, #1
 800d8b2:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800d8b6:	4413      	add	r3, r2
 800d8b8:	781b      	ldrb	r3, [r3, #0]
 800d8ba:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c

        if( index < ( sizeof( periodicity ) / sizeof( uint32_t ) ) )
 800d8be:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 800d8c2:	2b0a      	cmp	r3, #10
 800d8c4:	f200 81e5 	bhi.w	800dc92 <LmhpComplianceOnMcpsIndication+0x752>
        {
            if( ComplianceParams->OnTxPeriodicityChanged != NULL )
 800d8c8:	4b98      	ldr	r3, [pc, #608]	@ (800db2c <LmhpComplianceOnMcpsIndication+0x5ec>)
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	685b      	ldr	r3, [r3, #4]
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	f000 81df 	beq.w	800dc92 <LmhpComplianceOnMcpsIndication+0x752>
            {
                ComplianceParams->OnTxPeriodicityChanged( periodicity[index] );
 800d8d4:	4b95      	ldr	r3, [pc, #596]	@ (800db2c <LmhpComplianceOnMcpsIndication+0x5ec>)
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	685a      	ldr	r2, [r3, #4]
 800d8da:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 800d8de:	009b      	lsls	r3, r3, #2
 800d8e0:	3390      	adds	r3, #144	@ 0x90
 800d8e2:	443b      	add	r3, r7
 800d8e4:	f853 3c84 	ldr.w	r3, [r3, #-132]
 800d8e8:	4618      	mov	r0, r3
 800d8ea:	4790      	blx	r2
            }
        }
        break;
 800d8ec:	e1d1      	b.n	800dc92 <LmhpComplianceOnMcpsIndication+0x752>
    }
    case COMPLIANCE_TX_FRAMES_CTRL_REQ:
    {
        uint8_t frameType = mcpsIndication->Buffer[cmdIndex++];
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	689a      	ldr	r2, [r3, #8]
 800d8f2:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d8f6:	1c59      	adds	r1, r3, #1
 800d8f8:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800d8fc:	4413      	add	r3, r2
 800d8fe:	781b      	ldrb	r3, [r3, #0]
 800d900:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d

        if( ( frameType == 1 ) || ( frameType == 2 ) )
 800d904:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 800d908:	2b01      	cmp	r3, #1
 800d90a:	d004      	beq.n	800d916 <LmhpComplianceOnMcpsIndication+0x3d6>
 800d90c:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 800d910:	2b02      	cmp	r3, #2
 800d912:	f040 81c0 	bne.w	800dc96 <LmhpComplianceOnMcpsIndication+0x756>
        {
            ComplianceTestState.IsTxConfirmed = ( frameType != 1 ) ? LORAMAC_HANDLER_CONFIRMED_MSG : LORAMAC_HANDLER_UNCONFIRMED_MSG;
 800d916:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 800d91a:	2b01      	cmp	r3, #1
 800d91c:	bf14      	ite	ne
 800d91e:	2301      	movne	r3, #1
 800d920:	2300      	moveq	r3, #0
 800d922:	b2db      	uxtb	r3, r3
 800d924:	461a      	mov	r2, r3
 800d926:	4b82      	ldr	r3, [pc, #520]	@ (800db30 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d928:	721a      	strb	r2, [r3, #8]

            if( ComplianceParams->OnTxFrameCtrlChanged != NULL )
 800d92a:	4b80      	ldr	r3, [pc, #512]	@ (800db2c <LmhpComplianceOnMcpsIndication+0x5ec>)
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	689b      	ldr	r3, [r3, #8]
 800d930:	2b00      	cmp	r3, #0
 800d932:	f000 81b0 	beq.w	800dc96 <LmhpComplianceOnMcpsIndication+0x756>
            {
                ComplianceParams->OnTxFrameCtrlChanged( ComplianceTestState.IsTxConfirmed );
 800d936:	4b7d      	ldr	r3, [pc, #500]	@ (800db2c <LmhpComplianceOnMcpsIndication+0x5ec>)
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	689b      	ldr	r3, [r3, #8]
 800d93c:	4a7c      	ldr	r2, [pc, #496]	@ (800db30 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d93e:	7a12      	ldrb	r2, [r2, #8]
 800d940:	4610      	mov	r0, r2
 800d942:	4798      	blx	r3
            }
        }
        break;
 800d944:	e1a7      	b.n	800dc96 <LmhpComplianceOnMcpsIndication+0x756>
    }
    case COMPLIANCE_ECHO_PAYLOAD_REQ:
    {
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ECHO_PAYLOAD_ANS;
 800d946:	4b7a      	ldr	r3, [pc, #488]	@ (800db30 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d948:	68da      	ldr	r2, [r3, #12]
 800d94a:	4b79      	ldr	r3, [pc, #484]	@ (800db30 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d94c:	7a9b      	ldrb	r3, [r3, #10]
 800d94e:	1c59      	adds	r1, r3, #1
 800d950:	b2c8      	uxtb	r0, r1
 800d952:	4977      	ldr	r1, [pc, #476]	@ (800db30 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d954:	7288      	strb	r0, [r1, #10]
 800d956:	4413      	add	r3, r2
 800d958:	2208      	movs	r2, #8
 800d95a:	701a      	strb	r2, [r3, #0]

        for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 800d95c:	2301      	movs	r3, #1
 800d95e:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
 800d962:	e019      	b.n	800d998 <LmhpComplianceOnMcpsIndication+0x458>
             i++ )
        {
            ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	689a      	ldr	r2, [r3, #8]
 800d968:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d96c:	1c59      	adds	r1, r3, #1
 800d96e:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800d972:	4413      	add	r3, r2
 800d974:	781a      	ldrb	r2, [r3, #0]
 800d976:	4b6e      	ldr	r3, [pc, #440]	@ (800db30 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d978:	68d9      	ldr	r1, [r3, #12]
 800d97a:	4b6d      	ldr	r3, [pc, #436]	@ (800db30 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d97c:	7a9b      	ldrb	r3, [r3, #10]
 800d97e:	1c58      	adds	r0, r3, #1
 800d980:	b2c4      	uxtb	r4, r0
 800d982:	486b      	ldr	r0, [pc, #428]	@ (800db30 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d984:	7284      	strb	r4, [r0, #10]
 800d986:	440b      	add	r3, r1
 800d988:	3201      	adds	r2, #1
 800d98a:	b2d2      	uxtb	r2, r2
 800d98c:	701a      	strb	r2, [r3, #0]
             i++ )
 800d98e:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 800d992:	3301      	adds	r3, #1
 800d994:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
        for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 800d998:	4b65      	ldr	r3, [pc, #404]	@ (800db30 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d99a:	7a5a      	ldrb	r2, [r3, #9]
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	7b1b      	ldrb	r3, [r3, #12]
 800d9a0:	4293      	cmp	r3, r2
 800d9a2:	bf28      	it	cs
 800d9a4:	4613      	movcs	r3, r2
 800d9a6:	b2db      	uxtb	r3, r3
 800d9a8:	f897 208e 	ldrb.w	r2, [r7, #142]	@ 0x8e
 800d9ac:	429a      	cmp	r2, r3
 800d9ae:	d3d9      	bcc.n	800d964 <LmhpComplianceOnMcpsIndication+0x424>
        }
        break;
 800d9b0:	e176      	b.n	800dca0 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_RX_APP_CNT_REQ:
    {
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_RX_APP_CNT_ANS;
 800d9b2:	4b5f      	ldr	r3, [pc, #380]	@ (800db30 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d9b4:	68da      	ldr	r2, [r3, #12]
 800d9b6:	4b5e      	ldr	r3, [pc, #376]	@ (800db30 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d9b8:	7a9b      	ldrb	r3, [r3, #10]
 800d9ba:	1c59      	adds	r1, r3, #1
 800d9bc:	b2c8      	uxtb	r0, r1
 800d9be:	495c      	ldr	r1, [pc, #368]	@ (800db30 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d9c0:	7288      	strb	r0, [r1, #10]
 800d9c2:	4413      	add	r3, r2
 800d9c4:	2209      	movs	r2, #9
 800d9c6:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt;
 800d9c8:	4b59      	ldr	r3, [pc, #356]	@ (800db30 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d9ca:	8a18      	ldrh	r0, [r3, #16]
 800d9cc:	4b58      	ldr	r3, [pc, #352]	@ (800db30 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d9ce:	68da      	ldr	r2, [r3, #12]
 800d9d0:	4b57      	ldr	r3, [pc, #348]	@ (800db30 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d9d2:	7a9b      	ldrb	r3, [r3, #10]
 800d9d4:	1c59      	adds	r1, r3, #1
 800d9d6:	b2cc      	uxtb	r4, r1
 800d9d8:	4955      	ldr	r1, [pc, #340]	@ (800db30 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d9da:	728c      	strb	r4, [r1, #10]
 800d9dc:	4413      	add	r3, r2
 800d9de:	b2c2      	uxtb	r2, r0
 800d9e0:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt >> 8;
 800d9e2:	4b53      	ldr	r3, [pc, #332]	@ (800db30 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d9e4:	8a1b      	ldrh	r3, [r3, #16]
 800d9e6:	0a1b      	lsrs	r3, r3, #8
 800d9e8:	b298      	uxth	r0, r3
 800d9ea:	4b51      	ldr	r3, [pc, #324]	@ (800db30 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d9ec:	68da      	ldr	r2, [r3, #12]
 800d9ee:	4b50      	ldr	r3, [pc, #320]	@ (800db30 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d9f0:	7a9b      	ldrb	r3, [r3, #10]
 800d9f2:	1c59      	adds	r1, r3, #1
 800d9f4:	b2cc      	uxtb	r4, r1
 800d9f6:	494e      	ldr	r1, [pc, #312]	@ (800db30 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d9f8:	728c      	strb	r4, [r1, #10]
 800d9fa:	4413      	add	r3, r2
 800d9fc:	b2c2      	uxtb	r2, r0
 800d9fe:	701a      	strb	r2, [r3, #0]
        break;
 800da00:	e14e      	b.n	800dca0 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_RX_APP_CNT_RESET_REQ:
    {
        ComplianceTestState.RxAppCnt = 0;
 800da02:	4b4b      	ldr	r3, [pc, #300]	@ (800db30 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800da04:	2200      	movs	r2, #0
 800da06:	821a      	strh	r2, [r3, #16]
        break;
 800da08:	e14a      	b.n	800dca0 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_LINK_CHECK_REQ:
    {
        MlmeReq_t mlmeReq;
        mlmeReq.Type = MLME_LINK_CHECK;
 800da0a:	2304      	movs	r3, #4
 800da0c:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54

        LoRaMacMlmeRequest( &mlmeReq );
 800da10:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800da14:	4618      	mov	r0, r3
 800da16:	f004 fca7 	bl	8012368 <LoRaMacMlmeRequest>
        break;
 800da1a:	e141      	b.n	800dca0 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_DEVICE_TIME_REQ:
    {
        CompliancePackage.OnDeviceTimeRequest( );
 800da1c:	4b45      	ldr	r3, [pc, #276]	@ (800db34 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800da1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da20:	4798      	blx	r3
        break;
 800da22:	e13d      	b.n	800dca0 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_PING_SLOT_INFO_REQ:
    {
        ComplianceTestState.ClassBStatus.PingSlotPeriodicity = mcpsIndication->Buffer[cmdIndex++];
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	689a      	ldr	r2, [r3, #8]
 800da28:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800da2c:	1c59      	adds	r1, r3, #1
 800da2e:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800da32:	4413      	add	r3, r2
 800da34:	781a      	ldrb	r2, [r3, #0]
 800da36:	4b3e      	ldr	r3, [pc, #248]	@ (800db30 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800da38:	755a      	strb	r2, [r3, #21]
        if( ComplianceParams->OnPingSlotPeriodicityChanged != NULL )
 800da3a:	4b3c      	ldr	r3, [pc, #240]	@ (800db2c <LmhpComplianceOnMcpsIndication+0x5ec>)
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	68db      	ldr	r3, [r3, #12]
 800da40:	2b00      	cmp	r3, #0
 800da42:	f000 812a 	beq.w	800dc9a <LmhpComplianceOnMcpsIndication+0x75a>
        {
        ComplianceParams->OnPingSlotPeriodicityChanged( ComplianceTestState.ClassBStatus.PingSlotPeriodicity );
 800da46:	4b39      	ldr	r3, [pc, #228]	@ (800db2c <LmhpComplianceOnMcpsIndication+0x5ec>)
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	68db      	ldr	r3, [r3, #12]
 800da4c:	4a38      	ldr	r2, [pc, #224]	@ (800db30 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800da4e:	7d52      	ldrb	r2, [r2, #21]
 800da50:	4610      	mov	r0, r2
 800da52:	4798      	blx	r3
        }
        break;
 800da54:	e121      	b.n	800dc9a <LmhpComplianceOnMcpsIndication+0x75a>
#endif
    /* ST_WORKAROUND_END */
    case COMPLIANCE_TX_CW_REQ:
    {
        MlmeReq_t mlmeReq;
        if( mcpsIndication->BufferSize == 7 )
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	7b1b      	ldrb	r3, [r3, #12]
 800da5a:	2b07      	cmp	r3, #7
 800da5c:	f040 811f 	bne.w	800dc9e <LmhpComplianceOnMcpsIndication+0x75e>
        {
            mlmeReq.Type = MLME_TXCW;
 800da60:	2305      	movs	r3, #5
 800da62:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
            mlmeReq.Req.TxCw.Timeout =
                ( uint16_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) );
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	689a      	ldr	r2, [r3, #8]
 800da6a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800da6e:	4413      	add	r3, r2
 800da70:	781b      	ldrb	r3, [r3, #0]
 800da72:	b21a      	sxth	r2, r3
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	6899      	ldr	r1, [r3, #8]
 800da78:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800da7c:	3301      	adds	r3, #1
 800da7e:	440b      	add	r3, r1
 800da80:	781b      	ldrb	r3, [r3, #0]
 800da82:	b21b      	sxth	r3, r3
 800da84:	021b      	lsls	r3, r3, #8
 800da86:	b21b      	sxth	r3, r3
 800da88:	4313      	orrs	r3, r2
 800da8a:	b21b      	sxth	r3, r3
 800da8c:	b29b      	uxth	r3, r3
            mlmeReq.Req.TxCw.Timeout =
 800da8e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
            cmdIndex += 2;
 800da92:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800da96:	3302      	adds	r3, #2
 800da98:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
            mlmeReq.Req.TxCw.Frequency =
                ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	689a      	ldr	r2, [r3, #8]
 800daa0:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800daa4:	4413      	add	r3, r2
 800daa6:	781b      	ldrb	r3, [r3, #0]
 800daa8:	4619      	mov	r1, r3
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	689a      	ldr	r2, [r3, #8]
 800daae:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800dab2:	3301      	adds	r3, #1
 800dab4:	4413      	add	r3, r2
 800dab6:	781b      	ldrb	r3, [r3, #0]
 800dab8:	021b      	lsls	r3, r3, #8
 800daba:	ea41 0203 	orr.w	r2, r1, r3
                               ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	6899      	ldr	r1, [r3, #8]
 800dac2:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800dac6:	3302      	adds	r3, #2
 800dac8:	440b      	add	r3, r1
 800daca:	781b      	ldrb	r3, [r3, #0]
 800dacc:	041b      	lsls	r3, r3, #16
                ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 800dace:	4313      	orrs	r3, r2
 800dad0:	461a      	mov	r2, r3
                               ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 800dad2:	2364      	movs	r3, #100	@ 0x64
 800dad4:	fb02 f303 	mul.w	r3, r2, r3
            mlmeReq.Req.TxCw.Frequency =
 800dad8:	64bb      	str	r3, [r7, #72]	@ 0x48
                100;
            cmdIndex += 3;
 800dada:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800dade:	3303      	adds	r3, #3
 800dae0:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
            mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[cmdIndex++];
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	689a      	ldr	r2, [r3, #8]
 800dae8:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800daec:	1c59      	adds	r1, r3, #1
 800daee:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800daf2:	4413      	add	r3, r2
 800daf4:	781b      	ldrb	r3, [r3, #0]
 800daf6:	b25b      	sxtb	r3, r3
 800daf8:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c

            LoRaMacMlmeRequest( &mlmeReq );
 800dafc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800db00:	4618      	mov	r0, r3
 800db02:	f004 fc31 	bl	8012368 <LoRaMacMlmeRequest>
        }
        break;
 800db06:	e0ca      	b.n	800dc9e <LmhpComplianceOnMcpsIndication+0x75e>
    }
    case COMPLIANCE_DUT_FPORT_224_DISABLE_REQ:
    {
        mibReq.Type = MIB_IS_CERT_FPORT_ON;
 800db08:	2339      	movs	r3, #57	@ 0x39
 800db0a:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
        mibReq.Param.IsCertPortOn = false;
 800db0e:	2300      	movs	r3, #0
 800db10:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
        LoRaMacMibSetRequestConfirm( &mibReq );
 800db14:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800db18:	4618      	mov	r0, r3
 800db1a:	f004 f8b5 	bl	8011c88 <LoRaMacMibSetRequestConfirm>

        ComplianceTestState.IsResetCmdPending = true;
 800db1e:	4b04      	ldr	r3, [pc, #16]	@ (800db30 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800db20:	2201      	movs	r2, #1
 800db22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        break;
 800db26:	e0bb      	b.n	800dca0 <LmhpComplianceOnMcpsIndication+0x760>
 800db28:	0801ed74 	.word	0x0801ed74
 800db2c:	200008bc 	.word	0x200008bc
 800db30:	20000884 	.word	0x20000884
 800db34:	200000d0 	.word	0x200000d0
    {
        Version_t           lrwanVersion;
        Version_t           lrwanRpVersion;
        MibRequestConfirm_t mibReq;

        mibReq.Type = MIB_LORAWAN_VERSION;
 800db38:	232a      	movs	r3, #42	@ 0x2a
 800db3a:	733b      	strb	r3, [r7, #12]

        LoRaMacMibGetRequestConfirm( &mibReq );
 800db3c:	f107 030c 	add.w	r3, r7, #12
 800db40:	4618      	mov	r0, r3
 800db42:	f003 fefb 	bl	801193c <LoRaMacMibGetRequestConfirm>
        lrwanVersion   = mibReq.Param.LrWanVersion.LoRaWan;
 800db46:	693b      	ldr	r3, [r7, #16]
 800db48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        lrwanRpVersion = mibReq.Param.LrWanVersion.LoRaWanRegion;
 800db4a:	697b      	ldr	r3, [r7, #20]
 800db4c:	63bb      	str	r3, [r7, #56]	@ 0x38

        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_DUT_VERSION_ANS;
 800db4e:	4b62      	ldr	r3, [pc, #392]	@ (800dcd8 <LmhpComplianceOnMcpsIndication+0x798>)
 800db50:	68da      	ldr	r2, [r3, #12]
 800db52:	4b61      	ldr	r3, [pc, #388]	@ (800dcd8 <LmhpComplianceOnMcpsIndication+0x798>)
 800db54:	7a9b      	ldrb	r3, [r3, #10]
 800db56:	1c59      	adds	r1, r3, #1
 800db58:	b2c8      	uxtb	r0, r1
 800db5a:	495f      	ldr	r1, [pc, #380]	@ (800dcd8 <LmhpComplianceOnMcpsIndication+0x798>)
 800db5c:	7288      	strb	r0, [r1, #10]
 800db5e:	4413      	add	r3, r2
 800db60:	227f      	movs	r2, #127	@ 0x7f
 800db62:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Major;
 800db64:	4b5d      	ldr	r3, [pc, #372]	@ (800dcdc <LmhpComplianceOnMcpsIndication+0x79c>)
 800db66:	681a      	ldr	r2, [r3, #0]
 800db68:	4b5b      	ldr	r3, [pc, #364]	@ (800dcd8 <LmhpComplianceOnMcpsIndication+0x798>)
 800db6a:	68d9      	ldr	r1, [r3, #12]
 800db6c:	4b5a      	ldr	r3, [pc, #360]	@ (800dcd8 <LmhpComplianceOnMcpsIndication+0x798>)
 800db6e:	7a9b      	ldrb	r3, [r3, #10]
 800db70:	1c58      	adds	r0, r3, #1
 800db72:	b2c4      	uxtb	r4, r0
 800db74:	4858      	ldr	r0, [pc, #352]	@ (800dcd8 <LmhpComplianceOnMcpsIndication+0x798>)
 800db76:	7284      	strb	r4, [r0, #10]
 800db78:	440b      	add	r3, r1
 800db7a:	78d2      	ldrb	r2, [r2, #3]
 800db7c:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Minor;
 800db7e:	4b57      	ldr	r3, [pc, #348]	@ (800dcdc <LmhpComplianceOnMcpsIndication+0x79c>)
 800db80:	681a      	ldr	r2, [r3, #0]
 800db82:	4b55      	ldr	r3, [pc, #340]	@ (800dcd8 <LmhpComplianceOnMcpsIndication+0x798>)
 800db84:	68d9      	ldr	r1, [r3, #12]
 800db86:	4b54      	ldr	r3, [pc, #336]	@ (800dcd8 <LmhpComplianceOnMcpsIndication+0x798>)
 800db88:	7a9b      	ldrb	r3, [r3, #10]
 800db8a:	1c58      	adds	r0, r3, #1
 800db8c:	b2c4      	uxtb	r4, r0
 800db8e:	4852      	ldr	r0, [pc, #328]	@ (800dcd8 <LmhpComplianceOnMcpsIndication+0x798>)
 800db90:	7284      	strb	r4, [r0, #10]
 800db92:	440b      	add	r3, r1
 800db94:	7892      	ldrb	r2, [r2, #2]
 800db96:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Patch;
 800db98:	4b50      	ldr	r3, [pc, #320]	@ (800dcdc <LmhpComplianceOnMcpsIndication+0x79c>)
 800db9a:	681a      	ldr	r2, [r3, #0]
 800db9c:	4b4e      	ldr	r3, [pc, #312]	@ (800dcd8 <LmhpComplianceOnMcpsIndication+0x798>)
 800db9e:	68d9      	ldr	r1, [r3, #12]
 800dba0:	4b4d      	ldr	r3, [pc, #308]	@ (800dcd8 <LmhpComplianceOnMcpsIndication+0x798>)
 800dba2:	7a9b      	ldrb	r3, [r3, #10]
 800dba4:	1c58      	adds	r0, r3, #1
 800dba6:	b2c4      	uxtb	r4, r0
 800dba8:	484b      	ldr	r0, [pc, #300]	@ (800dcd8 <LmhpComplianceOnMcpsIndication+0x798>)
 800dbaa:	7284      	strb	r4, [r0, #10]
 800dbac:	440b      	add	r3, r1
 800dbae:	7852      	ldrb	r2, [r2, #1]
 800dbb0:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Revision;
 800dbb2:	4b4a      	ldr	r3, [pc, #296]	@ (800dcdc <LmhpComplianceOnMcpsIndication+0x79c>)
 800dbb4:	681a      	ldr	r2, [r3, #0]
 800dbb6:	4b48      	ldr	r3, [pc, #288]	@ (800dcd8 <LmhpComplianceOnMcpsIndication+0x798>)
 800dbb8:	68d9      	ldr	r1, [r3, #12]
 800dbba:	4b47      	ldr	r3, [pc, #284]	@ (800dcd8 <LmhpComplianceOnMcpsIndication+0x798>)
 800dbbc:	7a9b      	ldrb	r3, [r3, #10]
 800dbbe:	1c58      	adds	r0, r3, #1
 800dbc0:	b2c4      	uxtb	r4, r0
 800dbc2:	4845      	ldr	r0, [pc, #276]	@ (800dcd8 <LmhpComplianceOnMcpsIndication+0x798>)
 800dbc4:	7284      	strb	r4, [r0, #10]
 800dbc6:	440b      	add	r3, r1
 800dbc8:	7812      	ldrb	r2, [r2, #0]
 800dbca:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Major;
 800dbcc:	4b42      	ldr	r3, [pc, #264]	@ (800dcd8 <LmhpComplianceOnMcpsIndication+0x798>)
 800dbce:	68da      	ldr	r2, [r3, #12]
 800dbd0:	4b41      	ldr	r3, [pc, #260]	@ (800dcd8 <LmhpComplianceOnMcpsIndication+0x798>)
 800dbd2:	7a9b      	ldrb	r3, [r3, #10]
 800dbd4:	1c59      	adds	r1, r3, #1
 800dbd6:	b2c8      	uxtb	r0, r1
 800dbd8:	493f      	ldr	r1, [pc, #252]	@ (800dcd8 <LmhpComplianceOnMcpsIndication+0x798>)
 800dbda:	7288      	strb	r0, [r1, #10]
 800dbdc:	4413      	add	r3, r2
 800dbde:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800dbe2:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Minor;
 800dbe4:	4b3c      	ldr	r3, [pc, #240]	@ (800dcd8 <LmhpComplianceOnMcpsIndication+0x798>)
 800dbe6:	68da      	ldr	r2, [r3, #12]
 800dbe8:	4b3b      	ldr	r3, [pc, #236]	@ (800dcd8 <LmhpComplianceOnMcpsIndication+0x798>)
 800dbea:	7a9b      	ldrb	r3, [r3, #10]
 800dbec:	1c59      	adds	r1, r3, #1
 800dbee:	b2c8      	uxtb	r0, r1
 800dbf0:	4939      	ldr	r1, [pc, #228]	@ (800dcd8 <LmhpComplianceOnMcpsIndication+0x798>)
 800dbf2:	7288      	strb	r0, [r1, #10]
 800dbf4:	4413      	add	r3, r2
 800dbf6:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 800dbfa:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Patch;
 800dbfc:	4b36      	ldr	r3, [pc, #216]	@ (800dcd8 <LmhpComplianceOnMcpsIndication+0x798>)
 800dbfe:	68da      	ldr	r2, [r3, #12]
 800dc00:	4b35      	ldr	r3, [pc, #212]	@ (800dcd8 <LmhpComplianceOnMcpsIndication+0x798>)
 800dc02:	7a9b      	ldrb	r3, [r3, #10]
 800dc04:	1c59      	adds	r1, r3, #1
 800dc06:	b2c8      	uxtb	r0, r1
 800dc08:	4933      	ldr	r1, [pc, #204]	@ (800dcd8 <LmhpComplianceOnMcpsIndication+0x798>)
 800dc0a:	7288      	strb	r0, [r1, #10]
 800dc0c:	4413      	add	r3, r2
 800dc0e:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 800dc12:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Revision;
 800dc14:	4b30      	ldr	r3, [pc, #192]	@ (800dcd8 <LmhpComplianceOnMcpsIndication+0x798>)
 800dc16:	68da      	ldr	r2, [r3, #12]
 800dc18:	4b2f      	ldr	r3, [pc, #188]	@ (800dcd8 <LmhpComplianceOnMcpsIndication+0x798>)
 800dc1a:	7a9b      	ldrb	r3, [r3, #10]
 800dc1c:	1c59      	adds	r1, r3, #1
 800dc1e:	b2c8      	uxtb	r0, r1
 800dc20:	492d      	ldr	r1, [pc, #180]	@ (800dcd8 <LmhpComplianceOnMcpsIndication+0x798>)
 800dc22:	7288      	strb	r0, [r1, #10]
 800dc24:	4413      	add	r3, r2
 800dc26:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 800dc2a:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Major;
 800dc2c:	4b2a      	ldr	r3, [pc, #168]	@ (800dcd8 <LmhpComplianceOnMcpsIndication+0x798>)
 800dc2e:	68da      	ldr	r2, [r3, #12]
 800dc30:	4b29      	ldr	r3, [pc, #164]	@ (800dcd8 <LmhpComplianceOnMcpsIndication+0x798>)
 800dc32:	7a9b      	ldrb	r3, [r3, #10]
 800dc34:	1c59      	adds	r1, r3, #1
 800dc36:	b2c8      	uxtb	r0, r1
 800dc38:	4927      	ldr	r1, [pc, #156]	@ (800dcd8 <LmhpComplianceOnMcpsIndication+0x798>)
 800dc3a:	7288      	strb	r0, [r1, #10]
 800dc3c:	4413      	add	r3, r2
 800dc3e:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 800dc42:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Minor;
 800dc44:	4b24      	ldr	r3, [pc, #144]	@ (800dcd8 <LmhpComplianceOnMcpsIndication+0x798>)
 800dc46:	68da      	ldr	r2, [r3, #12]
 800dc48:	4b23      	ldr	r3, [pc, #140]	@ (800dcd8 <LmhpComplianceOnMcpsIndication+0x798>)
 800dc4a:	7a9b      	ldrb	r3, [r3, #10]
 800dc4c:	1c59      	adds	r1, r3, #1
 800dc4e:	b2c8      	uxtb	r0, r1
 800dc50:	4921      	ldr	r1, [pc, #132]	@ (800dcd8 <LmhpComplianceOnMcpsIndication+0x798>)
 800dc52:	7288      	strb	r0, [r1, #10]
 800dc54:	4413      	add	r3, r2
 800dc56:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 800dc5a:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Patch;
 800dc5c:	4b1e      	ldr	r3, [pc, #120]	@ (800dcd8 <LmhpComplianceOnMcpsIndication+0x798>)
 800dc5e:	68da      	ldr	r2, [r3, #12]
 800dc60:	4b1d      	ldr	r3, [pc, #116]	@ (800dcd8 <LmhpComplianceOnMcpsIndication+0x798>)
 800dc62:	7a9b      	ldrb	r3, [r3, #10]
 800dc64:	1c59      	adds	r1, r3, #1
 800dc66:	b2c8      	uxtb	r0, r1
 800dc68:	491b      	ldr	r1, [pc, #108]	@ (800dcd8 <LmhpComplianceOnMcpsIndication+0x798>)
 800dc6a:	7288      	strb	r0, [r1, #10]
 800dc6c:	4413      	add	r3, r2
 800dc6e:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800dc72:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Revision;
 800dc74:	4b18      	ldr	r3, [pc, #96]	@ (800dcd8 <LmhpComplianceOnMcpsIndication+0x798>)
 800dc76:	68da      	ldr	r2, [r3, #12]
 800dc78:	4b17      	ldr	r3, [pc, #92]	@ (800dcd8 <LmhpComplianceOnMcpsIndication+0x798>)
 800dc7a:	7a9b      	ldrb	r3, [r3, #10]
 800dc7c:	1c59      	adds	r1, r3, #1
 800dc7e:	b2c8      	uxtb	r0, r1
 800dc80:	4915      	ldr	r1, [pc, #84]	@ (800dcd8 <LmhpComplianceOnMcpsIndication+0x798>)
 800dc82:	7288      	strb	r0, [r1, #10]
 800dc84:	4413      	add	r3, r2
 800dc86:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800dc8a:	701a      	strb	r2, [r3, #0]
        break;
 800dc8c:	e008      	b.n	800dca0 <LmhpComplianceOnMcpsIndication+0x760>
    }
    default:
    {
        break;
 800dc8e:	bf00      	nop
 800dc90:	e006      	b.n	800dca0 <LmhpComplianceOnMcpsIndication+0x760>
        break;
 800dc92:	bf00      	nop
 800dc94:	e004      	b.n	800dca0 <LmhpComplianceOnMcpsIndication+0x760>
        break;
 800dc96:	bf00      	nop
 800dc98:	e002      	b.n	800dca0 <LmhpComplianceOnMcpsIndication+0x760>
        break;
 800dc9a:	bf00      	nop
 800dc9c:	e000      	b.n	800dca0 <LmhpComplianceOnMcpsIndication+0x760>
        break;
 800dc9e:	bf00      	nop
    }
    }

    if( ComplianceTestState.DataBufferSize != 0 )
 800dca0:	4b0d      	ldr	r3, [pc, #52]	@ (800dcd8 <LmhpComplianceOnMcpsIndication+0x798>)
 800dca2:	7a9b      	ldrb	r3, [r3, #10]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d008      	beq.n	800dcba <LmhpComplianceOnMcpsIndication+0x77a>
    {
        TimerSetValue( &ProcessTimer, 1000 );
 800dca8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800dcac:	480c      	ldr	r0, [pc, #48]	@ (800dce0 <LmhpComplianceOnMcpsIndication+0x7a0>)
 800dcae:	f00d fafd 	bl	801b2ac <UTIL_TIMER_SetPeriod>
        TimerStart(&ProcessTimer);
 800dcb2:	480b      	ldr	r0, [pc, #44]	@ (800dce0 <LmhpComplianceOnMcpsIndication+0x7a0>)
 800dcb4:	f00d fa1c 	bl	801b0f0 <UTIL_TIMER_Start>
 800dcb8:	e00b      	b.n	800dcd2 <LmhpComplianceOnMcpsIndication+0x792>
    }
    else
    {
        // Abort any pending Tx as a new command has been processed
        TimerStop(&ProcessTimer);
 800dcba:	4809      	ldr	r0, [pc, #36]	@ (800dce0 <LmhpComplianceOnMcpsIndication+0x7a0>)
 800dcbc:	f00d fa86 	bl	801b1cc <UTIL_TIMER_Stop>
        ComplianceTestState.IsTxPending = false;
 800dcc0:	4b05      	ldr	r3, [pc, #20]	@ (800dcd8 <LmhpComplianceOnMcpsIndication+0x798>)
 800dcc2:	2200      	movs	r2, #0
 800dcc4:	705a      	strb	r2, [r3, #1]
 800dcc6:	e004      	b.n	800dcd2 <LmhpComplianceOnMcpsIndication+0x792>
        return;
 800dcc8:	bf00      	nop
 800dcca:	e002      	b.n	800dcd2 <LmhpComplianceOnMcpsIndication+0x792>
        return;
 800dccc:	bf00      	nop
 800dcce:	e000      	b.n	800dcd2 <LmhpComplianceOnMcpsIndication+0x792>
        return;
 800dcd0:	bf00      	nop
    }
}
 800dcd2:	3790      	adds	r7, #144	@ 0x90
 800dcd4:	46bd      	mov	sp, r7
 800dcd6:	bdb0      	pop	{r4, r5, r7, pc}
 800dcd8:	20000884 	.word	0x20000884
 800dcdc:	200008bc 	.word	0x200008bc
 800dce0:	200008c0 	.word	0x200008c0

0800dce4 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800dce4:	b480      	push	{r7}
 800dce6:	b083      	sub	sp, #12
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	6078      	str	r0, [r7, #4]
        break;
    }
#endif
    /* ST_WORKAROUND_END */
    default:
        break;
 800dcec:	bf00      	nop
    }
}
 800dcee:	bf00      	nop
 800dcf0:	370c      	adds	r7, #12
 800dcf2:	46bd      	mov	sp, r7
 800dcf4:	bc80      	pop	{r7}
 800dcf6:	4770      	bx	lr

0800dcf8 <LmhpComplianceOnMlmeIndication>:

static void LmhpComplianceOnMlmeIndication( MlmeIndication_t* mlmeIndication )
{
 800dcf8:	b480      	push	{r7}
 800dcfa:	b083      	sub	sp, #12
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800dd00:	4b05      	ldr	r3, [pc, #20]	@ (800dd18 <LmhpComplianceOnMlmeIndication+0x20>)
 800dd02:	781b      	ldrb	r3, [r3, #0]
 800dd04:	f083 0301 	eor.w	r3, r3, #1
 800dd08:	b2db      	uxtb	r3, r3
 800dd0a:	2b00      	cmp	r3, #0
    {
        return;
 800dd0c:	bf00      	nop
#endif
    /* ST_WORKAROUND_END */
    default:
        break;
    }
}
 800dd0e:	370c      	adds	r7, #12
 800dd10:	46bd      	mov	sp, r7
 800dd12:	bc80      	pop	{r7}
 800dd14:	4770      	bx	lr
 800dd16:	bf00      	nop
 800dd18:	20000884 	.word	0x20000884

0800dd1c <OnProcessTimer>:
}
#endif
/* ST_WORKAROUND_END */

static void OnProcessTimer( void *context )
{
 800dd1c:	b580      	push	{r7, lr}
 800dd1e:	b082      	sub	sp, #8
 800dd20:	af00      	add	r7, sp, #0
 800dd22:	6078      	str	r0, [r7, #4]
    ComplianceTestState.IsTxPending = true;
 800dd24:	4b04      	ldr	r3, [pc, #16]	@ (800dd38 <OnProcessTimer+0x1c>)
 800dd26:	2201      	movs	r2, #1
 800dd28:	705a      	strb	r2, [r3, #1]
    CompliancePackage.OnPackageProcessEvent();
 800dd2a:	4b04      	ldr	r3, [pc, #16]	@ (800dd3c <OnProcessTimer+0x20>)
 800dd2c:	695b      	ldr	r3, [r3, #20]
 800dd2e:	4798      	blx	r3
}
 800dd30:	bf00      	nop
 800dd32:	3708      	adds	r7, #8
 800dd34:	46bd      	mov	sp, r7
 800dd36:	bd80      	pop	{r7, pc}
 800dd38:	20000884 	.word	0x20000884
 800dd3c:	200000d0 	.word	0x200000d0

0800dd40 <OnRadioTxDone>:
    int16_t Rssi;
    int8_t Snr;
}RxDoneParams;

static void OnRadioTxDone( void )
{
 800dd40:	b590      	push	{r4, r7, lr}
 800dd42:	b083      	sub	sp, #12
 800dd44:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800dd46:	f00d fb5b 	bl	801b400 <UTIL_TIMER_GetCurrentTime>
 800dd4a:	4603      	mov	r3, r0
 800dd4c:	4a16      	ldr	r2, [pc, #88]	@ (800dda8 <OnRadioTxDone+0x68>)
 800dd4e:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800dd50:	4c16      	ldr	r4, [pc, #88]	@ (800ddac <OnRadioTxDone+0x6c>)
 800dd52:	463b      	mov	r3, r7
 800dd54:	4618      	mov	r0, r3
 800dd56:	f00c fcd3 	bl	801a700 <SysTimeGet>
 800dd5a:	f504 734e 	add.w	r3, r4, #824	@ 0x338
 800dd5e:	463a      	mov	r2, r7
 800dd60:	e892 0003 	ldmia.w	r2, {r0, r1}
 800dd64:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 800dd68:	4a11      	ldr	r2, [pc, #68]	@ (800ddb0 <OnRadioTxDone+0x70>)
 800dd6a:	7813      	ldrb	r3, [r2, #0]
 800dd6c:	f043 0320 	orr.w	r3, r3, #32
 800dd70:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800dd72:	4b0e      	ldr	r3, [pc, #56]	@ (800ddac <OnRadioTxDone+0x6c>)
 800dd74:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d00a      	beq.n	800dd92 <OnRadioTxDone+0x52>
 800dd7c:	4b0b      	ldr	r3, [pc, #44]	@ (800ddac <OnRadioTxDone+0x6c>)
 800dd7e:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800dd82:	691b      	ldr	r3, [r3, #16]
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d004      	beq.n	800dd92 <OnRadioTxDone+0x52>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800dd88:	4b08      	ldr	r3, [pc, #32]	@ (800ddac <OnRadioTxDone+0x6c>)
 800dd8a:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800dd8e:	691b      	ldr	r3, [r3, #16]
 800dd90:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800dd92:	4b08      	ldr	r3, [pc, #32]	@ (800ddb4 <OnRadioTxDone+0x74>)
 800dd94:	2201      	movs	r2, #1
 800dd96:	2100      	movs	r1, #0
 800dd98:	2002      	movs	r0, #2
 800dd9a:	f00d fc21 	bl	801b5e0 <UTIL_ADV_TRACE_COND_FSend>
}
 800dd9e:	bf00      	nop
 800dda0:	370c      	adds	r7, #12
 800dda2:	46bd      	mov	sp, r7
 800dda4:	bd90      	pop	{r4, r7, pc}
 800dda6:	bf00      	nop
 800dda8:	20001984 	.word	0x20001984
 800ddac:	200008d8 	.word	0x200008d8
 800ddb0:	20001980 	.word	0x20001980
 800ddb4:	0801eda0 	.word	0x0801eda0

0800ddb8 <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800ddb8:	b580      	push	{r7, lr}
 800ddba:	b084      	sub	sp, #16
 800ddbc:	af00      	add	r7, sp, #0
 800ddbe:	60f8      	str	r0, [r7, #12]
 800ddc0:	4608      	mov	r0, r1
 800ddc2:	4611      	mov	r1, r2
 800ddc4:	461a      	mov	r2, r3
 800ddc6:	4603      	mov	r3, r0
 800ddc8:	817b      	strh	r3, [r7, #10]
 800ddca:	460b      	mov	r3, r1
 800ddcc:	813b      	strh	r3, [r7, #8]
 800ddce:	4613      	mov	r3, r2
 800ddd0:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800ddd2:	f00d fb15 	bl	801b400 <UTIL_TIMER_GetCurrentTime>
 800ddd6:	4603      	mov	r3, r0
 800ddd8:	4a18      	ldr	r2, [pc, #96]	@ (800de3c <OnRadioRxDone+0x84>)
 800ddda:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 800dddc:	4a17      	ldr	r2, [pc, #92]	@ (800de3c <OnRadioRxDone+0x84>)
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 800dde2:	4a16      	ldr	r2, [pc, #88]	@ (800de3c <OnRadioRxDone+0x84>)
 800dde4:	897b      	ldrh	r3, [r7, #10]
 800dde6:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 800dde8:	4a14      	ldr	r2, [pc, #80]	@ (800de3c <OnRadioRxDone+0x84>)
 800ddea:	893b      	ldrh	r3, [r7, #8]
 800ddec:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 800ddee:	4a13      	ldr	r2, [pc, #76]	@ (800de3c <OnRadioRxDone+0x84>)
 800ddf0:	79fb      	ldrb	r3, [r7, #7]
 800ddf2:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 800ddf4:	4a12      	ldr	r2, [pc, #72]	@ (800de40 <OnRadioRxDone+0x88>)
 800ddf6:	7813      	ldrb	r3, [r2, #0]
 800ddf8:	f043 0310 	orr.w	r3, r3, #16
 800ddfc:	7013      	strb	r3, [r2, #0]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
 800ddfe:	4a10      	ldr	r2, [pc, #64]	@ (800de40 <OnRadioRxDone+0x88>)
 800de00:	7813      	ldrb	r3, [r2, #0]
 800de02:	f043 0301 	orr.w	r3, r3, #1
 800de06:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800de08:	4b0e      	ldr	r3, [pc, #56]	@ (800de44 <OnRadioRxDone+0x8c>)
 800de0a:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d00a      	beq.n	800de28 <OnRadioRxDone+0x70>
 800de12:	4b0c      	ldr	r3, [pc, #48]	@ (800de44 <OnRadioRxDone+0x8c>)
 800de14:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800de18:	691b      	ldr	r3, [r3, #16]
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d004      	beq.n	800de28 <OnRadioRxDone+0x70>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800de1e:	4b09      	ldr	r3, [pc, #36]	@ (800de44 <OnRadioRxDone+0x8c>)
 800de20:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800de24:	691b      	ldr	r3, [r3, #16]
 800de26:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800de28:	4b07      	ldr	r3, [pc, #28]	@ (800de48 <OnRadioRxDone+0x90>)
 800de2a:	2201      	movs	r2, #1
 800de2c:	2100      	movs	r1, #0
 800de2e:	2002      	movs	r0, #2
 800de30:	f00d fbd6 	bl	801b5e0 <UTIL_ADV_TRACE_COND_FSend>
}
 800de34:	bf00      	nop
 800de36:	3710      	adds	r7, #16
 800de38:	46bd      	mov	sp, r7
 800de3a:	bd80      	pop	{r7, pc}
 800de3c:	20001988 	.word	0x20001988
 800de40:	20001980 	.word	0x20001980
 800de44:	200008d8 	.word	0x200008d8
 800de48:	0801edb0 	.word	0x0801edb0

0800de4c <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800de4c:	b580      	push	{r7, lr}
 800de4e:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800de50:	4a0e      	ldr	r2, [pc, #56]	@ (800de8c <OnRadioTxTimeout+0x40>)
 800de52:	7813      	ldrb	r3, [r2, #0]
 800de54:	f043 0308 	orr.w	r3, r3, #8
 800de58:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800de5a:	4b0d      	ldr	r3, [pc, #52]	@ (800de90 <OnRadioTxTimeout+0x44>)
 800de5c:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800de60:	2b00      	cmp	r3, #0
 800de62:	d00a      	beq.n	800de7a <OnRadioTxTimeout+0x2e>
 800de64:	4b0a      	ldr	r3, [pc, #40]	@ (800de90 <OnRadioTxTimeout+0x44>)
 800de66:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800de6a:	691b      	ldr	r3, [r3, #16]
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d004      	beq.n	800de7a <OnRadioTxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800de70:	4b07      	ldr	r3, [pc, #28]	@ (800de90 <OnRadioTxTimeout+0x44>)
 800de72:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800de76:	691b      	ldr	r3, [r3, #16]
 800de78:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800de7a:	4b06      	ldr	r3, [pc, #24]	@ (800de94 <OnRadioTxTimeout+0x48>)
 800de7c:	2201      	movs	r2, #1
 800de7e:	2100      	movs	r1, #0
 800de80:	2002      	movs	r0, #2
 800de82:	f00d fbad 	bl	801b5e0 <UTIL_ADV_TRACE_COND_FSend>
}
 800de86:	bf00      	nop
 800de88:	bd80      	pop	{r7, pc}
 800de8a:	bf00      	nop
 800de8c:	20001980 	.word	0x20001980
 800de90:	200008d8 	.word	0x200008d8
 800de94:	0801edc0 	.word	0x0801edc0

0800de98 <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800de98:	b580      	push	{r7, lr}
 800de9a:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 800de9c:	4a0b      	ldr	r2, [pc, #44]	@ (800decc <OnRadioRxError+0x34>)
 800de9e:	7813      	ldrb	r3, [r2, #0]
 800dea0:	f043 0304 	orr.w	r3, r3, #4
 800dea4:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800dea6:	4b0a      	ldr	r3, [pc, #40]	@ (800ded0 <OnRadioRxError+0x38>)
 800dea8:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800deac:	2b00      	cmp	r3, #0
 800deae:	d00a      	beq.n	800dec6 <OnRadioRxError+0x2e>
 800deb0:	4b07      	ldr	r3, [pc, #28]	@ (800ded0 <OnRadioRxError+0x38>)
 800deb2:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800deb6:	691b      	ldr	r3, [r3, #16]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d004      	beq.n	800dec6 <OnRadioRxError+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800debc:	4b04      	ldr	r3, [pc, #16]	@ (800ded0 <OnRadioRxError+0x38>)
 800debe:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800dec2:	691b      	ldr	r3, [r3, #16]
 800dec4:	4798      	blx	r3
    }
}
 800dec6:	bf00      	nop
 800dec8:	bd80      	pop	{r7, pc}
 800deca:	bf00      	nop
 800decc:	20001980 	.word	0x20001980
 800ded0:	200008d8 	.word	0x200008d8

0800ded4 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 800ded4:	b580      	push	{r7, lr}
 800ded6:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800ded8:	4a0e      	ldr	r2, [pc, #56]	@ (800df14 <OnRadioRxTimeout+0x40>)
 800deda:	7813      	ldrb	r3, [r2, #0]
 800dedc:	f043 0302 	orr.w	r3, r3, #2
 800dee0:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800dee2:	4b0d      	ldr	r3, [pc, #52]	@ (800df18 <OnRadioRxTimeout+0x44>)
 800dee4:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d00a      	beq.n	800df02 <OnRadioRxTimeout+0x2e>
 800deec:	4b0a      	ldr	r3, [pc, #40]	@ (800df18 <OnRadioRxTimeout+0x44>)
 800deee:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800def2:	691b      	ldr	r3, [r3, #16]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d004      	beq.n	800df02 <OnRadioRxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800def8:	4b07      	ldr	r3, [pc, #28]	@ (800df18 <OnRadioRxTimeout+0x44>)
 800defa:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800defe:	691b      	ldr	r3, [r3, #16]
 800df00:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800df02:	4b06      	ldr	r3, [pc, #24]	@ (800df1c <OnRadioRxTimeout+0x48>)
 800df04:	2201      	movs	r2, #1
 800df06:	2100      	movs	r1, #0
 800df08:	2002      	movs	r0, #2
 800df0a:	f00d fb69 	bl	801b5e0 <UTIL_ADV_TRACE_COND_FSend>
}
 800df0e:	bf00      	nop
 800df10:	bd80      	pop	{r7, pc}
 800df12:	bf00      	nop
 800df14:	20001980 	.word	0x20001980
 800df18:	200008d8 	.word	0x200008d8
 800df1c:	0801edd0 	.word	0x0801edd0

0800df20 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 800df20:	b480      	push	{r7}
 800df22:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800df24:	4b08      	ldr	r3, [pc, #32]	@ (800df48 <UpdateRxSlotIdleState+0x28>)
 800df26:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800df2a:	2b02      	cmp	r3, #2
 800df2c:	d004      	beq.n	800df38 <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800df2e:	4b07      	ldr	r3, [pc, #28]	@ (800df4c <UpdateRxSlotIdleState+0x2c>)
 800df30:	2206      	movs	r2, #6
 800df32:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800df36:	e003      	b.n	800df40 <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800df38:	4b04      	ldr	r3, [pc, #16]	@ (800df4c <UpdateRxSlotIdleState+0x2c>)
 800df3a:	2202      	movs	r2, #2
 800df3c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
}
 800df40:	bf00      	nop
 800df42:	46bd      	mov	sp, r7
 800df44:	bc80      	pop	{r7}
 800df46:	4770      	bx	lr
 800df48:	20000df8 	.word	0x20000df8
 800df4c:	200008d8 	.word	0x200008d8

0800df50 <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 800df50:	b580      	push	{r7, lr}
 800df52:	b08e      	sub	sp, #56	@ 0x38
 800df54:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800df56:	4b3e      	ldr	r3, [pc, #248]	@ (800e050 <ProcessRadioTxDone+0x100>)
 800df58:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800df5c:	2b02      	cmp	r3, #2
 800df5e:	d002      	beq.n	800df66 <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 800df60:	4b3c      	ldr	r3, [pc, #240]	@ (800e054 <ProcessRadioTxDone+0x104>)
 800df62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df64:	4798      	blx	r3
    }
#if ( !defined(DISABLE_LORAWAN_RX_WINDOW) || (DISABLE_LORAWAN_RX_WINDOW == 0) )
    // Setup timers
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 800df66:	4b3c      	ldr	r3, [pc, #240]	@ (800e058 <ProcessRadioTxDone+0x108>)
 800df68:	f8d3 33b0 	ldr.w	r3, [r3, #944]	@ 0x3b0
 800df6c:	4619      	mov	r1, r3
 800df6e:	483b      	ldr	r0, [pc, #236]	@ (800e05c <ProcessRadioTxDone+0x10c>)
 800df70:	f00d f99c 	bl	801b2ac <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800df74:	4839      	ldr	r0, [pc, #228]	@ (800e05c <ProcessRadioTxDone+0x10c>)
 800df76:	f00d f8bb 	bl	801b0f0 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 800df7a:	4b37      	ldr	r3, [pc, #220]	@ (800e058 <ProcessRadioTxDone+0x108>)
 800df7c:	f8d3 33b4 	ldr.w	r3, [r3, #948]	@ 0x3b4
 800df80:	4619      	mov	r1, r3
 800df82:	4837      	ldr	r0, [pc, #220]	@ (800e060 <ProcessRadioTxDone+0x110>)
 800df84:	f00d f992 	bl	801b2ac <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800df88:	4835      	ldr	r0, [pc, #212]	@ (800e060 <ProcessRadioTxDone+0x110>)
 800df8a:	f00d f8b1 	bl	801b0f0 <UTIL_TIMER_Start>
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
        TimerStart( &MacCtx.AckTimeoutTimer );
    }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( MacCtx.NodeAckRequested == true )
 800df8e:	4b32      	ldr	r3, [pc, #200]	@ (800e058 <ProcessRadioTxDone+0x108>)
 800df90:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
 800df94:	2b00      	cmp	r3, #0
 800df96:	d01a      	beq.n	800dfce <ProcessRadioTxDone+0x7e>
    {
        getPhy.Attribute = PHY_RETRANSMIT_TIMEOUT;
 800df98:	2315      	movs	r3, #21
 800df9a:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800df9e:	4b2c      	ldr	r3, [pc, #176]	@ (800e050 <ProcessRadioTxDone+0x100>)
 800dfa0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800dfa4:	f107 0220 	add.w	r2, r7, #32
 800dfa8:	4611      	mov	r1, r2
 800dfaa:	4618      	mov	r0, r3
 800dfac:	f006 fd20 	bl	80149f0 <RegionGetPhyParam>
 800dfb0:	4603      	mov	r3, r0
 800dfb2:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.RetransmitTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800dfb4:	4b28      	ldr	r3, [pc, #160]	@ (800e058 <ProcessRadioTxDone+0x108>)
 800dfb6:	f8d3 23b4 	ldr.w	r2, [r3, #948]	@ 0x3b4
 800dfba:	69fb      	ldr	r3, [r7, #28]
 800dfbc:	4413      	add	r3, r2
 800dfbe:	4619      	mov	r1, r3
 800dfc0:	4828      	ldr	r0, [pc, #160]	@ (800e064 <ProcessRadioTxDone+0x114>)
 800dfc2:	f00d f973 	bl	801b2ac <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.RetransmitTimeoutTimer );
 800dfc6:	4827      	ldr	r0, [pc, #156]	@ (800e064 <ProcessRadioTxDone+0x114>)
 800dfc8:	f00d f892 	bl	801b0f0 <UTIL_TIMER_Start>
 800dfcc:	e003      	b.n	800dfd6 <ProcessRadioTxDone+0x86>
    }
    else
    {
        // Transmission successful, setup status directly
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800dfce:	4b22      	ldr	r3, [pc, #136]	@ (800e058 <ProcessRadioTxDone+0x108>)
 800dfd0:	2200      	movs	r2, #0
 800dfd2:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
    }
#endif /* LORAMAC_VERSION */

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800dfd6:	4b24      	ldr	r3, [pc, #144]	@ (800e068 <ProcessRadioTxDone+0x118>)
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	4a1d      	ldr	r2, [pc, #116]	@ (800e050 <ProcessRadioTxDone+0x100>)
 800dfdc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 800dfde:	4b1e      	ldr	r3, [pc, #120]	@ (800e058 <ProcessRadioTxDone+0x108>)
 800dfe0:	f893 341f 	ldrb.w	r3, [r3, #1055]	@ 0x41f
 800dfe4:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800dfe6:	4b20      	ldr	r3, [pc, #128]	@ (800e068 <ProcessRadioTxDone+0x118>)
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800dfec:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800dff0:	4618      	mov	r0, r3
 800dff2:	f00c fbbd 	bl	801a770 <SysTimeGetMcuTime>
 800dff6:	4638      	mov	r0, r7
 800dff8:	4b15      	ldr	r3, [pc, #84]	@ (800e050 <ProcessRadioTxDone+0x100>)
 800dffa:	f8d3 2114 	ldr.w	r2, [r3, #276]	@ 0x114
 800dffe:	9200      	str	r2, [sp, #0]
 800e000:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800e004:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800e008:	ca06      	ldmia	r2, {r1, r2}
 800e00a:	f00c fb12 	bl	801a632 <SysTimeSub>
 800e00e:	f107 0314 	add.w	r3, r7, #20
 800e012:	463a      	mov	r2, r7
 800e014:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e018:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800e01c:	4b0e      	ldr	r3, [pc, #56]	@ (800e058 <ProcessRadioTxDone+0x108>)
 800e01e:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 800e022:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 800e024:	2301      	movs	r3, #1
 800e026:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800e028:	4b09      	ldr	r3, [pc, #36]	@ (800e050 <ProcessRadioTxDone+0x100>)
 800e02a:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d101      	bne.n	800e036 <ProcessRadioTxDone+0xe6>
    {
        txDone.Joined  = false;
 800e032:	2300      	movs	r3, #0
 800e034:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 800e036:	4b06      	ldr	r3, [pc, #24]	@ (800e050 <ProcessRadioTxDone+0x100>)
 800e038:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e03c:	f107 0208 	add.w	r2, r7, #8
 800e040:	4611      	mov	r1, r2
 800e042:	4618      	mov	r0, r3
 800e044:	f006 fcec 	bl	8014a20 <RegionSetBandTxDone>
    if( MacCtx.NodeAckRequested == false )
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
    }
#endif /* LORAMAC_VERSION */
}
 800e048:	bf00      	nop
 800e04a:	3730      	adds	r7, #48	@ 0x30
 800e04c:	46bd      	mov	sp, r7
 800e04e:	bd80      	pop	{r7, pc}
 800e050:	20000df8 	.word	0x20000df8
 800e054:	0801f464 	.word	0x0801f464
 800e058:	200008d8 	.word	0x200008d8
 800e05c:	20000c58 	.word	0x20000c58
 800e060:	20000c70 	.word	0x20000c70
 800e064:	20000cdc 	.word	0x20000cdc
 800e068:	20001984 	.word	0x20001984

0800e06c <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800e06c:	b580      	push	{r7, lr}
 800e06e:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800e070:	4b10      	ldr	r3, [pc, #64]	@ (800e0b4 <PrepareRxDoneAbort+0x48>)
 800e072:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800e076:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e07a:	4a0e      	ldr	r2, [pc, #56]	@ (800e0b4 <PrepareRxDoneAbort+0x48>)
 800e07c:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    if( MacCtx.NodeAckRequested == true )
 800e080:	4b0c      	ldr	r3, [pc, #48]	@ (800e0b4 <PrepareRxDoneAbort+0x48>)
 800e082:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
 800e086:	2b00      	cmp	r3, #0
 800e088:	d002      	beq.n	800e090 <PrepareRxDoneAbort+0x24>
    {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        OnAckTimeoutTimerEvent( NULL );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        OnRetransmitTimeoutTimerEvent( NULL );
 800e08a:	2000      	movs	r0, #0
 800e08c:	f001 f99c 	bl	800f3c8 <OnRetransmitTimeoutTimerEvent>
#endif /* LORAMAC_VERSION */
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 800e090:	4a08      	ldr	r2, [pc, #32]	@ (800e0b4 <PrepareRxDoneAbort+0x48>)
 800e092:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800e096:	f043 0302 	orr.w	r3, r3, #2
 800e09a:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
    MacCtx.MacFlags.Bits.MacDone = 1;
 800e09e:	4a05      	ldr	r2, [pc, #20]	@ (800e0b4 <PrepareRxDoneAbort+0x48>)
 800e0a0:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800e0a4:	f043 0320 	orr.w	r3, r3, #32
 800e0a8:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495

    UpdateRxSlotIdleState( );
 800e0ac:	f7ff ff38 	bl	800df20 <UpdateRxSlotIdleState>
}
 800e0b0:	bf00      	nop
 800e0b2:	bd80      	pop	{r7, pc}
 800e0b4:	200008d8 	.word	0x200008d8

0800e0b8 <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 800e0b8:	b590      	push	{r4, r7, lr}
 800e0ba:	b0a7      	sub	sp, #156	@ 0x9c
 800e0bc:	af02      	add	r7, sp, #8
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800e0be:	2312      	movs	r3, #18
 800e0c0:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 800e0c4:	4bbd      	ldr	r3, [pc, #756]	@ (800e3bc <ProcessRadioRxDone+0x304>)
 800e0c6:	685b      	ldr	r3, [r3, #4]
 800e0c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    uint16_t size = RxDoneParams.Size;
 800e0cc:	4bbb      	ldr	r3, [pc, #748]	@ (800e3bc <ProcessRadioRxDone+0x304>)
 800e0ce:	891b      	ldrh	r3, [r3, #8]
 800e0d0:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
    int16_t rssi = RxDoneParams.Rssi;
 800e0d4:	4bb9      	ldr	r3, [pc, #740]	@ (800e3bc <ProcessRadioRxDone+0x304>)
 800e0d6:	895b      	ldrh	r3, [r3, #10]
 800e0d8:	f8a7 3080 	strh.w	r3, [r7, #128]	@ 0x80
    int8_t snr = RxDoneParams.Snr;
 800e0dc:	4bb7      	ldr	r3, [pc, #732]	@ (800e3bc <ProcessRadioRxDone+0x304>)
 800e0de:	7b1b      	ldrb	r3, [r3, #12]
 800e0e0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f

    uint8_t pktHeaderLen = 0;
 800e0e4:	2300      	movs	r3, #0
 800e0e6:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e

    uint32_t downLinkCounter = 0;
 800e0ea:	2300      	movs	r3, #0
 800e0ec:	60bb      	str	r3, [r7, #8]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800e0ee:	4bb4      	ldr	r3, [pc, #720]	@ (800e3c0 <ProcessRadioRxDone+0x308>)
 800e0f0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800e0f4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    uint8_t multicast = 0;
 800e0f8:	2300      	movs	r3, #0
 800e0fa:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800e0fe:	2301      	movs	r3, #1
 800e100:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
    FCntIdentifier_t fCntID;

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
 800e104:	4aaf      	ldr	r2, [pc, #700]	@ (800e3c4 <ProcessRadioRxDone+0x30c>)
 800e106:	7813      	ldrb	r3, [r2, #0]
 800e108:	f023 0301 	bic.w	r3, r3, #1
 800e10c:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    MacCtx.McpsConfirm.AckReceived = false;
 800e10e:	4bae      	ldr	r3, [pc, #696]	@ (800e3c8 <ProcessRadioRxDone+0x310>)
 800e110:	2200      	movs	r2, #0
 800e112:	f883 2448 	strb.w	r2, [r3, #1096]	@ 0x448
    MacCtx.RxStatus.Rssi = rssi;
 800e116:	4aac      	ldr	r2, [pc, #688]	@ (800e3c8 <ProcessRadioRxDone+0x310>)
 800e118:	f8b7 3080 	ldrh.w	r3, [r7, #128]	@ 0x80
 800e11c:	f8a2 3490 	strh.w	r3, [r2, #1168]	@ 0x490
    MacCtx.RxStatus.Snr = snr;
 800e120:	4aa9      	ldr	r2, [pc, #676]	@ (800e3c8 <ProcessRadioRxDone+0x310>)
 800e122:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800e126:	f882 3492 	strb.w	r3, [r2, #1170]	@ 0x492
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 800e12a:	4ba7      	ldr	r3, [pc, #668]	@ (800e3c8 <ProcessRadioRxDone+0x310>)
 800e12c:	f893 2494 	ldrb.w	r2, [r3, #1172]	@ 0x494
 800e130:	4ba5      	ldr	r3, [pc, #660]	@ (800e3c8 <ProcessRadioRxDone+0x310>)
 800e132:	f883 2493 	strb.w	r2, [r3, #1171]	@ 0x493
    MacCtx.McpsIndication.Port = 0;
 800e136:	4ba4      	ldr	r3, [pc, #656]	@ (800e3c8 <ProcessRadioRxDone+0x310>)
 800e138:	2200      	movs	r2, #0
 800e13a:	f883 2427 	strb.w	r2, [r3, #1063]	@ 0x427
    MacCtx.McpsIndication.Multicast = 0;
 800e13e:	4ba2      	ldr	r3, [pc, #648]	@ (800e3c8 <ProcessRadioRxDone+0x310>)
 800e140:	2200      	movs	r2, #0
 800e142:	f883 2426 	strb.w	r2, [r3, #1062]	@ 0x426
    MacCtx.McpsIndication.FramePending = 0;
 800e146:	4ba0      	ldr	r3, [pc, #640]	@ (800e3c8 <ProcessRadioRxDone+0x310>)
 800e148:	2200      	movs	r2, #0
 800e14a:	f883 2429 	strb.w	r2, [r3, #1065]	@ 0x429
    MacCtx.McpsIndication.Buffer = NULL;
 800e14e:	4b9e      	ldr	r3, [pc, #632]	@ (800e3c8 <ProcessRadioRxDone+0x310>)
 800e150:	2200      	movs	r2, #0
 800e152:	f8c3 242c 	str.w	r2, [r3, #1068]	@ 0x42c
    MacCtx.McpsIndication.BufferSize = 0;
 800e156:	4b9c      	ldr	r3, [pc, #624]	@ (800e3c8 <ProcessRadioRxDone+0x310>)
 800e158:	2200      	movs	r2, #0
 800e15a:	f883 2430 	strb.w	r2, [r3, #1072]	@ 0x430
    MacCtx.McpsIndication.RxData = false;
 800e15e:	4b9a      	ldr	r3, [pc, #616]	@ (800e3c8 <ProcessRadioRxDone+0x310>)
 800e160:	2200      	movs	r2, #0
 800e162:	f883 2431 	strb.w	r2, [r3, #1073]	@ 0x431
    MacCtx.McpsIndication.AckReceived = false;
 800e166:	4b98      	ldr	r3, [pc, #608]	@ (800e3c8 <ProcessRadioRxDone+0x310>)
 800e168:	2200      	movs	r2, #0
 800e16a:	f883 2432 	strb.w	r2, [r3, #1074]	@ 0x432
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800e16e:	4b96      	ldr	r3, [pc, #600]	@ (800e3c8 <ProcessRadioRxDone+0x310>)
 800e170:	2200      	movs	r2, #0
 800e172:	f8c3 2434 	str.w	r2, [r3, #1076]	@ 0x434
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800e176:	4b94      	ldr	r3, [pc, #592]	@ (800e3c8 <ProcessRadioRxDone+0x310>)
 800e178:	2200      	movs	r2, #0
 800e17a:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
    MacCtx.McpsIndication.DevAddress = 0;
 800e17e:	4b92      	ldr	r3, [pc, #584]	@ (800e3c8 <ProcessRadioRxDone+0x310>)
 800e180:	2200      	movs	r2, #0
 800e182:	f8c3 2438 	str.w	r2, [r3, #1080]	@ 0x438
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800e186:	4b90      	ldr	r3, [pc, #576]	@ (800e3c8 <ProcessRadioRxDone+0x310>)
 800e188:	2200      	movs	r2, #0
 800e18a:	f883 243c 	strb.w	r2, [r3, #1084]	@ 0x43c
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.McpsIndication.ResponseTimeout = 0;
 800e18e:	4b8e      	ldr	r3, [pc, #568]	@ (800e3c8 <ProcessRadioRxDone+0x310>)
 800e190:	2200      	movs	r2, #0
 800e192:	f8c3 2440 	str.w	r2, [r3, #1088]	@ 0x440
#endif /* LORAMAC_VERSION */

    Radio.Sleep( );
 800e196:	4b8d      	ldr	r3, [pc, #564]	@ (800e3cc <ProcessRadioRxDone+0x314>)
 800e198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e19a:	4798      	blx	r3

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.RxWindowTimer2 );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 800e19c:	4b8a      	ldr	r3, [pc, #552]	@ (800e3c8 <ProcessRadioRxDone+0x310>)
 800e19e:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d102      	bne.n	800e1ac <ProcessRadioRxDone+0xf4>
    {
        TimerStop( &MacCtx.RxWindowTimer2 );
 800e1a6:	488a      	ldr	r0, [pc, #552]	@ (800e3d0 <ProcessRadioRxDone+0x318>)
 800e1a8:	f00d f810 	bl	801b1cc <UTIL_TIMER_Stop>
    }
#endif /* LORAMAC_VERSION */

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800e1ac:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800e1b0:	4619      	mov	r1, r3
 800e1b2:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 800e1b6:	f004 fcdb 	bl	8012b70 <LoRaMacClassBRxBeacon>
 800e1ba:	4603      	mov	r3, r0
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d00b      	beq.n	800e1d8 <ProcessRadioRxDone+0x120>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800e1c0:	4a81      	ldr	r2, [pc, #516]	@ (800e3c8 <ProcessRadioRxDone+0x310>)
 800e1c2:	f8b7 3080 	ldrh.w	r3, [r7, #128]	@ 0x80
 800e1c6:	f8a2 3482 	strh.w	r3, [r2, #1154]	@ 0x482
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800e1ca:	4a7f      	ldr	r2, [pc, #508]	@ (800e3c8 <ProcessRadioRxDone+0x310>)
 800e1cc:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800e1d0:	f882 3484 	strb.w	r3, [r2, #1156]	@ 0x484
        return;
 800e1d4:	f000 bc22 	b.w	800ea1c <ProcessRadioRxDone+0x964>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800e1d8:	4b79      	ldr	r3, [pc, #484]	@ (800e3c0 <ProcessRadioRxDone+0x308>)
 800e1da:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800e1de:	2b01      	cmp	r3, #1
 800e1e0:	d11e      	bne.n	800e220 <ProcessRadioRxDone+0x168>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800e1e2:	f004 fcd8 	bl	8012b96 <LoRaMacClassBIsPingExpected>
 800e1e6:	4603      	mov	r3, r0
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d00a      	beq.n	800e202 <ProcessRadioRxDone+0x14a>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e1ec:	2000      	movs	r0, #0
 800e1ee:	f004 fc89 	bl	8012b04 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800e1f2:	2000      	movs	r0, #0
 800e1f4:	f004 fcaa 	bl	8012b4c <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800e1f8:	4b73      	ldr	r3, [pc, #460]	@ (800e3c8 <ProcessRadioRxDone+0x310>)
 800e1fa:	2204      	movs	r2, #4
 800e1fc:	f883 2493 	strb.w	r2, [r3, #1171]	@ 0x493
 800e200:	e00e      	b.n	800e220 <ProcessRadioRxDone+0x168>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800e202:	f004 fccf 	bl	8012ba4 <LoRaMacClassBIsMulticastExpected>
 800e206:	4603      	mov	r3, r0
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d009      	beq.n	800e220 <ProcessRadioRxDone+0x168>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e20c:	2000      	movs	r0, #0
 800e20e:	f004 fc83 	bl	8012b18 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800e212:	2000      	movs	r0, #0
 800e214:	f004 fca3 	bl	8012b5e <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800e218:	4b6b      	ldr	r3, [pc, #428]	@ (800e3c8 <ProcessRadioRxDone+0x310>)
 800e21a:	2205      	movs	r2, #5
 800e21c:	f883 2493 	strb.w	r2, [r3, #1171]	@ 0x493
        }
    }

    macHdr.Value = payload[pktHeaderLen++];
 800e220:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800e224:	1c5a      	adds	r2, r3, #1
 800e226:	f887 207e 	strb.w	r2, [r7, #126]	@ 0x7e
 800e22a:	461a      	mov	r2, r3
 800e22c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e230:	4413      	add	r3, r2
 800e232:	781b      	ldrb	r3, [r3, #0]
 800e234:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c

    switch( macHdr.Bits.MType )
 800e238:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 800e23c:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800e240:	b2db      	uxtb	r3, r3
 800e242:	3b01      	subs	r3, #1
 800e244:	2b06      	cmp	r3, #6
 800e246:	f200 83bd 	bhi.w	800e9c4 <ProcessRadioRxDone+0x90c>
 800e24a:	a201      	add	r2, pc, #4	@ (adr r2, 800e250 <ProcessRadioRxDone+0x198>)
 800e24c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e250:	0800e26d 	.word	0x0800e26d
 800e254:	0800e9c5 	.word	0x0800e9c5
 800e258:	0800e401 	.word	0x0800e401
 800e25c:	0800e9c5 	.word	0x0800e9c5
 800e260:	0800e3f9 	.word	0x0800e3f9
 800e264:	0800e9c5 	.word	0x0800e9c5
 800e268:	0800e957 	.word	0x0800e957
    {
        case FRAME_TYPE_JOIN_ACCEPT:
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800e26c:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800e270:	2b10      	cmp	r3, #16
 800e272:	d806      	bhi.n	800e282 <ProcessRadioRxDone+0x1ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e274:	4b54      	ldr	r3, [pc, #336]	@ (800e3c8 <ProcessRadioRxDone+0x310>)
 800e276:	2201      	movs	r2, #1
 800e278:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                PrepareRxDoneAbort( );
 800e27c:	f7ff fef6 	bl	800e06c <PrepareRxDoneAbort>
                return;
 800e280:	e3cc      	b.n	800ea1c <ProcessRadioRxDone+0x964>
            }
            macMsgJoinAccept.Buffer = payload;
 800e282:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e286:	60fb      	str	r3, [r7, #12]
            macMsgJoinAccept.BufSize = size;
 800e288:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800e28c:	b2db      	uxtb	r3, r3
 800e28e:	743b      	strb	r3, [r7, #16]

            // Abort in case if the device isn't joined yet and no rejoin request is ongoing.
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800e290:	4b4b      	ldr	r3, [pc, #300]	@ (800e3c0 <ProcessRadioRxDone+0x308>)
 800e292:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800e296:	2b00      	cmp	r3, #0
 800e298:	d006      	beq.n	800e2a8 <ProcessRadioRxDone+0x1f0>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e29a:	4b4b      	ldr	r3, [pc, #300]	@ (800e3c8 <ProcessRadioRxDone+0x310>)
 800e29c:	2201      	movs	r2, #1
 800e29e:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                PrepareRxDoneAbort( );
 800e2a2:	f7ff fee3 	bl	800e06c <PrepareRxDoneAbort>
                return;
 800e2a6:	e3b9      	b.n	800ea1c <ProcessRadioRxDone+0x964>
            }
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 800e2a8:	f7fe f876 	bl	800c398 <SecureElementGetJoinEui>
 800e2ac:	4601      	mov	r1, r0
 800e2ae:	f107 030c 	add.w	r3, r7, #12
 800e2b2:	461a      	mov	r2, r3
 800e2b4:	20ff      	movs	r0, #255	@ 0xff
 800e2b6:	f005 fe29 	bl	8013f0c <LoRaMacCryptoHandleJoinAccept>
 800e2ba:	4603      	mov	r3, r0
 800e2bc:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88

            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 800e2c0:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	f040 8085 	bne.w	800e3d4 <ProcessRadioRxDone+0x31c>
            {
                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800e2ca:	7d7b      	ldrb	r3, [r7, #21]
 800e2cc:	461a      	mov	r2, r3
 800e2ce:	4b3c      	ldr	r3, [pc, #240]	@ (800e3c0 <ProcessRadioRxDone+0x308>)
 800e2d0:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800e2d4:	4b3a      	ldr	r3, [pc, #232]	@ (800e3c0 <ProcessRadioRxDone+0x308>)
 800e2d6:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800e2da:	7dbb      	ldrb	r3, [r7, #22]
 800e2dc:	021b      	lsls	r3, r3, #8
 800e2de:	4313      	orrs	r3, r2
 800e2e0:	4a37      	ldr	r2, [pc, #220]	@ (800e3c0 <ProcessRadioRxDone+0x308>)
 800e2e2:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800e2e6:	4b36      	ldr	r3, [pc, #216]	@ (800e3c0 <ProcessRadioRxDone+0x308>)
 800e2e8:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800e2ec:	7dfb      	ldrb	r3, [r7, #23]
 800e2ee:	041b      	lsls	r3, r3, #16
 800e2f0:	4313      	orrs	r3, r2
 800e2f2:	4a33      	ldr	r2, [pc, #204]	@ (800e3c0 <ProcessRadioRxDone+0x308>)
 800e2f4:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800e2f8:	69bb      	ldr	r3, [r7, #24]
 800e2fa:	4a31      	ldr	r2, [pc, #196]	@ (800e3c0 <ProcessRadioRxDone+0x308>)
 800e2fc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800e300:	7f3b      	ldrb	r3, [r7, #28]
 800e302:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800e306:	b2db      	uxtb	r3, r3
 800e308:	461a      	mov	r2, r3
 800e30a:	4b2d      	ldr	r3, [pc, #180]	@ (800e3c0 <ProcessRadioRxDone+0x308>)
 800e30c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800e310:	7f3b      	ldrb	r3, [r7, #28]
 800e312:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800e316:	b2db      	uxtb	r3, r3
 800e318:	461a      	mov	r2, r3
 800e31a:	4b29      	ldr	r3, [pc, #164]	@ (800e3c0 <ProcessRadioRxDone+0x308>)
 800e31c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800e320:	7f3b      	ldrb	r3, [r7, #28]
 800e322:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800e326:	b2db      	uxtb	r3, r3
 800e328:	461a      	mov	r2, r3
 800e32a:	4b25      	ldr	r3, [pc, #148]	@ (800e3c0 <ProcessRadioRxDone+0x308>)
 800e32c:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800e330:	7f7b      	ldrb	r3, [r7, #29]
 800e332:	461a      	mov	r2, r3
 800e334:	4b22      	ldr	r3, [pc, #136]	@ (800e3c0 <ProcessRadioRxDone+0x308>)
 800e336:	651a      	str	r2, [r3, #80]	@ 0x50
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 800e338:	4b21      	ldr	r3, [pc, #132]	@ (800e3c0 <ProcessRadioRxDone+0x308>)
 800e33a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d102      	bne.n	800e346 <ProcessRadioRxDone+0x28e>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 800e340:	4b1f      	ldr	r3, [pc, #124]	@ (800e3c0 <ProcessRadioRxDone+0x308>)
 800e342:	2201      	movs	r2, #1
 800e344:	651a      	str	r2, [r3, #80]	@ 0x50
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800e346:	4b1e      	ldr	r3, [pc, #120]	@ (800e3c0 <ProcessRadioRxDone+0x308>)
 800e348:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e34a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800e34e:	fb02 f303 	mul.w	r3, r2, r3
 800e352:	4a1b      	ldr	r2, [pc, #108]	@ (800e3c0 <ProcessRadioRxDone+0x308>)
 800e354:	6513      	str	r3, [r2, #80]	@ 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800e356:	4b1a      	ldr	r3, [pc, #104]	@ (800e3c0 <ProcessRadioRxDone+0x308>)
 800e358:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e35a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800e35e:	4a18      	ldr	r2, [pc, #96]	@ (800e3c0 <ProcessRadioRxDone+0x308>)
 800e360:	6553      	str	r3, [r2, #84]	@ 0x54

                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800e362:	4b17      	ldr	r3, [pc, #92]	@ (800e3c0 <ProcessRadioRxDone+0x308>)
 800e364:	2200      	movs	r2, #0
 800e366:	f883 211a 	strb.w	r2, [r3, #282]	@ 0x11a

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800e36a:	f107 030c 	add.w	r3, r7, #12
 800e36e:	3312      	adds	r3, #18
 800e370:	677b      	str	r3, [r7, #116]	@ 0x74
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 800e372:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800e376:	b2db      	uxtb	r3, r3
 800e378:	3b11      	subs	r3, #17
 800e37a:	b2db      	uxtb	r3, r3
 800e37c:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                // Apply the last tx channel
                applyCFList.JoinChannel = MacCtx.Channel;
 800e380:	4b11      	ldr	r3, [pc, #68]	@ (800e3c8 <ProcessRadioRxDone+0x310>)
 800e382:	f893 341f 	ldrb.w	r3, [r3, #1055]	@ 0x41f
 800e386:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
#endif /* LORAMAC_VERSION */

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800e38a:	4b0d      	ldr	r3, [pc, #52]	@ (800e3c0 <ProcessRadioRxDone+0x308>)
 800e38c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e390:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 800e394:	4611      	mov	r1, r2
 800e396:	4618      	mov	r0, r3
 800e398:	f006 fb7c 	bl	8014a94 <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800e39c:	4b08      	ldr	r3, [pc, #32]	@ (800e3c0 <ProcessRadioRxDone+0x308>)
 800e39e:	2202      	movs	r2, #2
 800e3a0:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800e3a4:	2001      	movs	r0, #1
 800e3a6:	f005 f8dd 	bl	8013564 <LoRaMacConfirmQueueIsCmdActive>
 800e3aa:	4603      	mov	r3, r0
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d01b      	beq.n	800e3e8 <ProcessRadioRxDone+0x330>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 800e3b0:	2101      	movs	r1, #1
 800e3b2:	2000      	movs	r0, #0
 800e3b4:	f005 f84a 	bl	801344c <LoRaMacConfirmQueueSetStatus>
 800e3b8:	e016      	b.n	800e3e8 <ProcessRadioRxDone+0x330>
 800e3ba:	bf00      	nop
 800e3bc:	20001988 	.word	0x20001988
 800e3c0:	20000df8 	.word	0x20000df8
 800e3c4:	20001980 	.word	0x20001980
 800e3c8:	200008d8 	.word	0x200008d8
 800e3cc:	0801f464 	.word	0x0801f464
 800e3d0:	20000c70 	.word	0x20000c70
                }
            }
            else
            {
                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800e3d4:	2001      	movs	r0, #1
 800e3d6:	f005 f8c5 	bl	8013564 <LoRaMacConfirmQueueIsCmdActive>
 800e3da:	4603      	mov	r3, r0
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d003      	beq.n	800e3e8 <ProcessRadioRxDone+0x330>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800e3e0:	2101      	movs	r1, #1
 800e3e2:	2007      	movs	r0, #7
 800e3e4:	f005 f832 	bl	801344c <LoRaMacConfirmQueueSetStatus>
                }
            }
            MacCtx.MacFlags.Bits.MlmeInd = 1;
 800e3e8:	4ab9      	ldr	r2, [pc, #740]	@ (800e6d0 <ProcessRadioRxDone+0x618>)
 800e3ea:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800e3ee:	f043 0308 	orr.w	r3, r3, #8
 800e3f2:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
            break;
 800e3f6:	e2ec      	b.n	800e9d2 <ProcessRadioRxDone+0x91a>
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800e3f8:	4bb5      	ldr	r3, [pc, #724]	@ (800e6d0 <ProcessRadioRxDone+0x618>)
 800e3fa:	2201      	movs	r2, #1
 800e3fc:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800e400:	4bb4      	ldr	r3, [pc, #720]	@ (800e6d4 <ProcessRadioRxDone+0x61c>)
 800e402:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 800e406:	f887 306a 	strb.w	r3, [r7, #106]	@ 0x6a
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800e40a:	4bb1      	ldr	r3, [pc, #708]	@ (800e6d0 <ProcessRadioRxDone+0x618>)
 800e40c:	f893 3428 	ldrb.w	r3, [r3, #1064]	@ 0x428
 800e410:	b25b      	sxtb	r3, r3
 800e412:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800e416:	230d      	movs	r3, #13
 800e418:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68

            /* ST_WORKAROUND_BEGIN: Keep repeater feature */
            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800e41c:	4bad      	ldr	r3, [pc, #692]	@ (800e6d4 <ProcessRadioRxDone+0x61c>)
 800e41e:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800e422:	2b00      	cmp	r3, #0
 800e424:	d002      	beq.n	800e42c <ProcessRadioRxDone+0x374>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800e426:	230e      	movs	r3, #14
 800e428:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
            }
            /* ST_WORKAROUND_END */

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e42c:	4ba9      	ldr	r3, [pc, #676]	@ (800e6d4 <ProcessRadioRxDone+0x61c>)
 800e42e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e432:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 800e436:	4611      	mov	r1, r2
 800e438:	4618      	mov	r0, r3
 800e43a:	f006 fad9 	bl	80149f0 <RegionGetPhyParam>
 800e43e:	4603      	mov	r3, r0
 800e440:	667b      	str	r3, [r7, #100]	@ 0x64
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800e442:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800e446:	3b0d      	subs	r3, #13
 800e448:	b29b      	uxth	r3, r3
 800e44a:	b21b      	sxth	r3, r3
 800e44c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e450:	b21a      	sxth	r2, r3
 800e452:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e454:	b21b      	sxth	r3, r3
 800e456:	429a      	cmp	r2, r3
 800e458:	dc03      	bgt.n	800e462 <ProcessRadioRxDone+0x3aa>
 800e45a:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800e45e:	2b0b      	cmp	r3, #11
 800e460:	d806      	bhi.n	800e470 <ProcessRadioRxDone+0x3b8>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e462:	4b9b      	ldr	r3, [pc, #620]	@ (800e6d0 <ProcessRadioRxDone+0x618>)
 800e464:	2201      	movs	r2, #1
 800e466:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                PrepareRxDoneAbort( );
 800e46a:	f7ff fdff 	bl	800e06c <PrepareRxDoneAbort>
                return;
 800e46e:	e2d5      	b.n	800ea1c <ProcessRadioRxDone+0x964>
            }
            macMsgData.Buffer = payload;
 800e470:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e474:	637b      	str	r3, [r7, #52]	@ 0x34
            macMsgData.BufSize = size;
 800e476:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800e47a:	b2db      	uxtb	r3, r3
 800e47c:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800e480:	4b95      	ldr	r3, [pc, #596]	@ (800e6d8 <ProcessRadioRxDone+0x620>)
 800e482:	65bb      	str	r3, [r7, #88]	@ 0x58
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800e484:	23ff      	movs	r3, #255	@ 0xff
 800e486:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800e48a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800e48e:	4618      	mov	r0, r3
 800e490:	f006 f835 	bl	80144fe <LoRaMacParserData>
 800e494:	4603      	mov	r3, r0
 800e496:	2b00      	cmp	r3, #0
 800e498:	d006      	beq.n	800e4a8 <ProcessRadioRxDone+0x3f0>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e49a:	4b8d      	ldr	r3, [pc, #564]	@ (800e6d0 <ProcessRadioRxDone+0x618>)
 800e49c:	2201      	movs	r2, #1
 800e49e:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                PrepareRxDoneAbort( );
 800e4a2:	f7ff fde3 	bl	800e06c <PrepareRxDoneAbort>
                return;
 800e4a6:	e2b9      	b.n	800ea1c <ProcessRadioRxDone+0x964>
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            // Handle Class B
            // Check if we expect a ping or a multicast slot.
            if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800e4a8:	4b8a      	ldr	r3, [pc, #552]	@ (800e6d4 <ProcessRadioRxDone+0x61c>)
 800e4aa:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800e4ae:	2b01      	cmp	r3, #1
 800e4b0:	d132      	bne.n	800e518 <ProcessRadioRxDone+0x460>
            {
                if( LoRaMacClassBIsPingExpected( ) == true )
 800e4b2:	f004 fb70 	bl	8012b96 <LoRaMacClassBIsPingExpected>
 800e4b6:	4603      	mov	r3, r0
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d014      	beq.n	800e4e6 <ProcessRadioRxDone+0x42e>
                {
                    LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e4bc:	2000      	movs	r0, #0
 800e4be:	f004 fb21 	bl	8012b04 <LoRaMacClassBSetPingSlotState>
                    LoRaMacClassBPingSlotTimerEvent( NULL );
 800e4c2:	2000      	movs	r0, #0
 800e4c4:	f004 fb42 	bl	8012b4c <LoRaMacClassBPingSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800e4c8:	4b81      	ldr	r3, [pc, #516]	@ (800e6d0 <ProcessRadioRxDone+0x618>)
 800e4ca:	2204      	movs	r2, #4
 800e4cc:	f883 2493 	strb.w	r2, [r3, #1171]	@ 0x493
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800e4d0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e4d2:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800e4d6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800e4da:	b2db      	uxtb	r3, r3
 800e4dc:	4619      	mov	r1, r3
 800e4de:	4610      	mov	r0, r2
 800e4e0:	f004 fbe2 	bl	8012ca8 <LoRaMacClassBSetFPendingBit>
 800e4e4:	e018      	b.n	800e518 <ProcessRadioRxDone+0x460>
                }
                else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800e4e6:	f004 fb5d 	bl	8012ba4 <LoRaMacClassBIsMulticastExpected>
 800e4ea:	4603      	mov	r3, r0
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d013      	beq.n	800e518 <ProcessRadioRxDone+0x460>
                {
                    LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e4f0:	2000      	movs	r0, #0
 800e4f2:	f004 fb11 	bl	8012b18 <LoRaMacClassBSetMulticastSlotState>
                    LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800e4f6:	2000      	movs	r0, #0
 800e4f8:	f004 fb31 	bl	8012b5e <LoRaMacClassBMulticastSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800e4fc:	4b74      	ldr	r3, [pc, #464]	@ (800e6d0 <ProcessRadioRxDone+0x618>)
 800e4fe:	2205      	movs	r2, #5
 800e500:	f883 2493 	strb.w	r2, [r3, #1171]	@ 0x493
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800e504:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e506:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800e50a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800e50e:	b2db      	uxtb	r3, r3
 800e510:	4619      	mov	r1, r3
 800e512:	4610      	mov	r0, r2
 800e514:	f004 fbc8 	bl	8012ca8 <LoRaMacClassBSetFPendingBit>
                }
            }
#endif /* LORAMAC_VERSION */

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800e518:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e51a:	4a6d      	ldr	r2, [pc, #436]	@ (800e6d0 <ProcessRadioRxDone+0x618>)
 800e51c:	f8c2 3438 	str.w	r3, [r2, #1080]	@ 0x438

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800e520:	1dba      	adds	r2, r7, #6
 800e522:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800e526:	4611      	mov	r1, r2
 800e528:	4618      	mov	r0, r3
 800e52a:	f002 fd1f 	bl	8010f6c <DetermineFrameType>
 800e52e:	4603      	mov	r3, r0
 800e530:	2b00      	cmp	r3, #0
 800e532:	d006      	beq.n	800e542 <ProcessRadioRxDone+0x48a>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e534:	4b66      	ldr	r3, [pc, #408]	@ (800e6d0 <ProcessRadioRxDone+0x618>)
 800e536:	2201      	movs	r2, #1
 800e538:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                PrepareRxDoneAbort( );
 800e53c:	f7ff fd96 	bl	800e06c <PrepareRxDoneAbort>
                return;
 800e540:	e26c      	b.n	800ea1c <ProcessRadioRxDone+0x964>
            }

            //Check if it is a multicast message
            multicast = 0;
 800e542:	2300      	movs	r3, #0
 800e544:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
            downLinkCounter = 0;
 800e548:	2300      	movs	r3, #0
 800e54a:	60bb      	str	r3, [r7, #8]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800e54c:	2300      	movs	r3, #0
 800e54e:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89
 800e552:	e049      	b.n	800e5e8 <ProcessRadioRxDone+0x530>
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800e554:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 800e558:	4a5e      	ldr	r2, [pc, #376]	@ (800e6d4 <ProcessRadioRxDone+0x61c>)
 800e55a:	212c      	movs	r1, #44	@ 0x2c
 800e55c:	fb01 f303 	mul.w	r3, r1, r3
 800e560:	4413      	add	r3, r2
 800e562:	33dc      	adds	r3, #220	@ 0xdc
 800e564:	681a      	ldr	r2, [r3, #0]
 800e566:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e568:	429a      	cmp	r2, r3
 800e56a:	d138      	bne.n	800e5de <ProcessRadioRxDone+0x526>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800e56c:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 800e570:	4a58      	ldr	r2, [pc, #352]	@ (800e6d4 <ProcessRadioRxDone+0x61c>)
 800e572:	212c      	movs	r1, #44	@ 0x2c
 800e574:	fb01 f303 	mul.w	r3, r1, r3
 800e578:	4413      	add	r3, r2
 800e57a:	33da      	adds	r3, #218	@ 0xda
 800e57c:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d02d      	beq.n	800e5de <ProcessRadioRxDone+0x526>
                {
                    multicast = 1;
 800e582:	2301      	movs	r3, #1
 800e584:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 800e588:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 800e58c:	4a51      	ldr	r2, [pc, #324]	@ (800e6d4 <ProcessRadioRxDone+0x61c>)
 800e58e:	212c      	movs	r1, #44	@ 0x2c
 800e590:	fb01 f303 	mul.w	r3, r1, r3
 800e594:	4413      	add	r3, r2
 800e596:	33db      	adds	r3, #219	@ 0xdb
 800e598:	781b      	ldrb	r3, [r3, #0]
 800e59a:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800e59e:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 800e5a2:	4a4c      	ldr	r2, [pc, #304]	@ (800e6d4 <ProcessRadioRxDone+0x61c>)
 800e5a4:	212c      	movs	r1, #44	@ 0x2c
 800e5a6:	fb01 f303 	mul.w	r3, r1, r3
 800e5aa:	4413      	add	r3, r2
 800e5ac:	33f8      	adds	r3, #248	@ 0xf8
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	60bb      	str	r3, [r7, #8]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800e5b4:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 800e5b8:	4a46      	ldr	r2, [pc, #280]	@ (800e6d4 <ProcessRadioRxDone+0x61c>)
 800e5ba:	212c      	movs	r1, #44	@ 0x2c
 800e5bc:	fb01 f303 	mul.w	r3, r1, r3
 800e5c0:	4413      	add	r3, r2
 800e5c2:	33dc      	adds	r3, #220	@ 0xdc
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800e5ca:	4b42      	ldr	r3, [pc, #264]	@ (800e6d4 <ProcessRadioRxDone+0x61c>)
 800e5cc:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800e5d0:	2b02      	cmp	r3, #2
 800e5d2:	d10e      	bne.n	800e5f2 <ProcessRadioRxDone+0x53a>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800e5d4:	4b3e      	ldr	r3, [pc, #248]	@ (800e6d0 <ProcessRadioRxDone+0x618>)
 800e5d6:	2203      	movs	r2, #3
 800e5d8:	f883 2493 	strb.w	r2, [r3, #1171]	@ 0x493
                    }
                    break;
 800e5dc:	e009      	b.n	800e5f2 <ProcessRadioRxDone+0x53a>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800e5de:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 800e5e2:	3301      	adds	r3, #1
 800e5e4:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89
 800e5e8:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d0b1      	beq.n	800e554 <ProcessRadioRxDone+0x49c>
 800e5f0:	e000      	b.n	800e5f4 <ProcessRadioRxDone+0x53c>
                    break;
 800e5f2:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800e5f4:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 800e5f8:	2b01      	cmp	r3, #1
 800e5fa:	d117      	bne.n	800e62c <ProcessRadioRxDone+0x574>
 800e5fc:	79bb      	ldrb	r3, [r7, #6]
 800e5fe:	2b03      	cmp	r3, #3
 800e600:	d10d      	bne.n	800e61e <ProcessRadioRxDone+0x566>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800e602:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800e606:	f003 0320 	and.w	r3, r3, #32
 800e60a:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d106      	bne.n	800e61e <ProcessRadioRxDone+0x566>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 800e610:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800e614:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e618:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d006      	beq.n	800e62c <ProcessRadioRxDone+0x574>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e61e:	4b2c      	ldr	r3, [pc, #176]	@ (800e6d0 <ProcessRadioRxDone+0x618>)
 800e620:	2201      	movs	r2, #1
 800e622:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                PrepareRxDoneAbort( );
 800e626:	f7ff fd21 	bl	800e06c <PrepareRxDoneAbort>
                return;
 800e62a:	e1f7      	b.n	800ea1c <ProcessRadioRxDone+0x964>
                PrepareRxDoneAbort( );
                return;
            }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, &fCntID, &downLinkCounter );
 800e62c:	79b9      	ldrb	r1, [r7, #6]
 800e62e:	4c29      	ldr	r4, [pc, #164]	@ (800e6d4 <ProcessRadioRxDone+0x61c>)
 800e630:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800e634:	f897 008a 	ldrb.w	r0, [r7, #138]	@ 0x8a
 800e638:	f107 0308 	add.w	r3, r7, #8
 800e63c:	9301      	str	r3, [sp, #4]
 800e63e:	1dfb      	adds	r3, r7, #7
 800e640:	9300      	str	r3, [sp, #0]
 800e642:	f8d4 3118 	ldr.w	r3, [r4, #280]	@ 0x118
 800e646:	f000 fee7 	bl	800f418 <GetFCntDown>
 800e64a:	4603      	mov	r3, r0
 800e64c:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800e650:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 800e654:	2b00      	cmp	r3, #0
 800e656:	d017      	beq.n	800e688 <ProcessRadioRxDone+0x5d0>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800e658:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 800e65c:	2b07      	cmp	r3, #7
 800e65e:	d104      	bne.n	800e66a <ProcessRadioRxDone+0x5b2>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800e660:	4b1b      	ldr	r3, [pc, #108]	@ (800e6d0 <ProcessRadioRxDone+0x618>)
 800e662:	2208      	movs	r2, #8
 800e664:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
 800e668:	e003      	b.n	800e672 <ProcessRadioRxDone+0x5ba>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e66a:	4b19      	ldr	r3, [pc, #100]	@ (800e6d0 <ProcessRadioRxDone+0x618>)
 800e66c:	2201      	movs	r2, #1
 800e66e:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800e672:	68bb      	ldr	r3, [r7, #8]
 800e674:	4a16      	ldr	r2, [pc, #88]	@ (800e6d0 <ProcessRadioRxDone+0x618>)
 800e676:	f8c2 3434 	str.w	r3, [r2, #1076]	@ 0x434
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800e67a:	68bb      	ldr	r3, [r7, #8]
 800e67c:	4a14      	ldr	r2, [pc, #80]	@ (800e6d0 <ProcessRadioRxDone+0x618>)
 800e67e:	f8c2 3470 	str.w	r3, [r2, #1136]	@ 0x470
                PrepareRxDoneAbort( );
 800e682:	f7ff fcf3 	bl	800e06c <PrepareRxDoneAbort>
                return;
 800e686:	e1c9      	b.n	800ea1c <ProcessRadioRxDone+0x964>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800e688:	79fa      	ldrb	r2, [r7, #7]
 800e68a:	68b9      	ldr	r1, [r7, #8]
 800e68c:	f897 008a 	ldrb.w	r0, [r7, #138]	@ 0x8a
 800e690:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800e694:	9300      	str	r3, [sp, #0]
 800e696:	460b      	mov	r3, r1
 800e698:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 800e69c:	f005 fd80 	bl	80141a0 <LoRaMacCryptoUnsecureMessage>
 800e6a0:	4603      	mov	r3, r0
 800e6a2:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800e6a6:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d016      	beq.n	800e6dc <ProcessRadioRxDone+0x624>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800e6ae:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 800e6b2:	2b02      	cmp	r3, #2
 800e6b4:	d104      	bne.n	800e6c0 <ProcessRadioRxDone+0x608>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800e6b6:	4b06      	ldr	r3, [pc, #24]	@ (800e6d0 <ProcessRadioRxDone+0x618>)
 800e6b8:	220a      	movs	r2, #10
 800e6ba:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
 800e6be:	e003      	b.n	800e6c8 <ProcessRadioRxDone+0x610>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800e6c0:	4b03      	ldr	r3, [pc, #12]	@ (800e6d0 <ProcessRadioRxDone+0x618>)
 800e6c2:	220b      	movs	r2, #11
 800e6c4:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                }
                PrepareRxDoneAbort( );
 800e6c8:	f7ff fcd0 	bl	800e06c <PrepareRxDoneAbort>
                return;
 800e6cc:	e1a6      	b.n	800ea1c <ProcessRadioRxDone+0x964>
 800e6ce:	bf00      	nop
 800e6d0:	200008d8 	.word	0x200008d8
 800e6d4:	20000df8 	.word	0x20000df8
 800e6d8:	20000b10 	.word	0x20000b10
            }
#endif /* LORAMAC_VERSION */

            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800e6dc:	4bb5      	ldr	r3, [pc, #724]	@ (800e9b4 <ProcessRadioRxDone+0x8fc>)
 800e6de:	2200      	movs	r2, #0
 800e6e0:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
            MacCtx.McpsIndication.Multicast = multicast;
 800e6e4:	4ab3      	ldr	r2, [pc, #716]	@ (800e9b4 <ProcessRadioRxDone+0x8fc>)
 800e6e6:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 800e6ea:	f882 3426 	strb.w	r3, [r2, #1062]	@ 0x426
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 800e6ee:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800e6f2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800e6f6:	b2db      	uxtb	r3, r3
 800e6f8:	461a      	mov	r2, r3
 800e6fa:	4bae      	ldr	r3, [pc, #696]	@ (800e9b4 <ProcessRadioRxDone+0x8fc>)
 800e6fc:	f883 2429 	strb.w	r2, [r3, #1065]	@ 0x429
            MacCtx.McpsIndication.Buffer = NULL;
 800e700:	4bac      	ldr	r3, [pc, #688]	@ (800e9b4 <ProcessRadioRxDone+0x8fc>)
 800e702:	2200      	movs	r2, #0
 800e704:	f8c3 242c 	str.w	r2, [r3, #1068]	@ 0x42c
            MacCtx.McpsIndication.BufferSize = 0;
 800e708:	4baa      	ldr	r3, [pc, #680]	@ (800e9b4 <ProcessRadioRxDone+0x8fc>)
 800e70a:	2200      	movs	r2, #0
 800e70c:	f883 2430 	strb.w	r2, [r3, #1072]	@ 0x430
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800e710:	68bb      	ldr	r3, [r7, #8]
 800e712:	4aa8      	ldr	r2, [pc, #672]	@ (800e9b4 <ProcessRadioRxDone+0x8fc>)
 800e714:	f8c2 3434 	str.w	r3, [r2, #1076]	@ 0x434
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800e718:	68bb      	ldr	r3, [r7, #8]
 800e71a:	4aa6      	ldr	r2, [pc, #664]	@ (800e9b4 <ProcessRadioRxDone+0x8fc>)
 800e71c:	f8c2 3470 	str.w	r3, [r2, #1136]	@ 0x470
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800e720:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800e724:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e728:	b2db      	uxtb	r3, r3
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	bf14      	ite	ne
 800e72e:	2301      	movne	r3, #1
 800e730:	2300      	moveq	r3, #0
 800e732:	b2da      	uxtb	r2, r3
 800e734:	4b9f      	ldr	r3, [pc, #636]	@ (800e9b4 <ProcessRadioRxDone+0x8fc>)
 800e736:	f883 2432 	strb.w	r2, [r3, #1074]	@ 0x432

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800e73a:	4b9e      	ldr	r3, [pc, #632]	@ (800e9b4 <ProcessRadioRxDone+0x8fc>)
 800e73c:	2200      	movs	r2, #0
 800e73e:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800e742:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800e746:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e74a:	b2db      	uxtb	r3, r3
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	bf14      	ite	ne
 800e750:	2301      	movne	r3, #1
 800e752:	2300      	moveq	r3, #0
 800e754:	b2da      	uxtb	r2, r3
 800e756:	4b97      	ldr	r3, [pc, #604]	@ (800e9b4 <ProcessRadioRxDone+0x8fc>)
 800e758:	f883 2448 	strb.w	r2, [r3, #1096]	@ 0x448

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800e75c:	4b95      	ldr	r3, [pc, #596]	@ (800e9b4 <ProcessRadioRxDone+0x8fc>)
 800e75e:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800e762:	2b00      	cmp	r3, #0
 800e764:	d004      	beq.n	800e770 <ProcessRadioRxDone+0x6b8>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800e766:	4b93      	ldr	r3, [pc, #588]	@ (800e9b4 <ProcessRadioRxDone+0x8fc>)
 800e768:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800e76c:	2b01      	cmp	r3, #1
 800e76e:	d106      	bne.n	800e77e <ProcessRadioRxDone+0x6c6>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 800e770:	4b91      	ldr	r3, [pc, #580]	@ (800e9b8 <ProcessRadioRxDone+0x900>)
 800e772:	2200      	movs	r2, #0
 800e774:	629a      	str	r2, [r3, #40]	@ 0x28
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                Nvm.MacGroup2.DownlinkReceived = true;
 800e776:	4b90      	ldr	r3, [pc, #576]	@ (800e9b8 <ProcessRadioRxDone+0x900>)
 800e778:	2201      	movs	r2, #1
 800e77a:	f883 210a 	strb.w	r2, [r3, #266]	@ 0x10a
#endif /* LORAMAC_VERSION */
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 800e77e:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 800e782:	2b01      	cmp	r3, #1
 800e784:	d104      	bne.n	800e790 <ProcessRadioRxDone+0x6d8>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800e786:	4b8b      	ldr	r3, [pc, #556]	@ (800e9b4 <ProcessRadioRxDone+0x8fc>)
 800e788:	2202      	movs	r2, #2
 800e78a:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
 800e78e:	e034      	b.n	800e7fa <ProcessRadioRxDone+0x742>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800e790:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 800e794:	f023 031f 	bic.w	r3, r3, #31
 800e798:	b2db      	uxtb	r3, r3
 800e79a:	2ba0      	cmp	r3, #160	@ 0xa0
 800e79c:	d125      	bne.n	800e7ea <ProcessRadioRxDone+0x732>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 800e79e:	4b86      	ldr	r3, [pc, #536]	@ (800e9b8 <ProcessRadioRxDone+0x900>)
 800e7a0:	2201      	movs	r2, #1
 800e7a2:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800e7a6:	4b84      	ldr	r3, [pc, #528]	@ (800e9b8 <ProcessRadioRxDone+0x900>)
 800e7a8:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d102      	bne.n	800e7b6 <ProcessRadioRxDone+0x6fe>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 800e7b0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e7b2:	4a81      	ldr	r2, [pc, #516]	@ (800e9b8 <ProcessRadioRxDone+0x900>)
 800e7b4:	6353      	str	r3, [r2, #52]	@ 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800e7b6:	4b7f      	ldr	r3, [pc, #508]	@ (800e9b4 <ProcessRadioRxDone+0x8fc>)
 800e7b8:	2201      	movs	r2, #1
 800e7ba:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                    // Handle response timeout for class c and class b downlinks
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800e7be:	4b7d      	ldr	r3, [pc, #500]	@ (800e9b4 <ProcessRadioRxDone+0x8fc>)
 800e7c0:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d018      	beq.n	800e7fa <ProcessRadioRxDone+0x742>
                        ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) )
 800e7c8:	4b7a      	ldr	r3, [pc, #488]	@ (800e9b4 <ProcessRadioRxDone+0x8fc>)
 800e7ca:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800e7ce:	2b01      	cmp	r3, #1
 800e7d0:	d013      	beq.n	800e7fa <ProcessRadioRxDone+0x742>
                    {
                        // Calculate timeout
                        MacCtx.McpsIndication.ResponseTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 800e7d2:	4b79      	ldr	r3, [pc, #484]	@ (800e9b8 <ProcessRadioRxDone+0x900>)
 800e7d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e7d8:	4a76      	ldr	r2, [pc, #472]	@ (800e9b4 <ProcessRadioRxDone+0x8fc>)
 800e7da:	f8c2 3440 	str.w	r3, [r2, #1088]	@ 0x440
                        MacCtx.ResponseTimeoutStartTime = RxDoneParams.LastRxDone;
 800e7de:	4b77      	ldr	r3, [pc, #476]	@ (800e9bc <ProcessRadioRxDone+0x904>)
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	4a74      	ldr	r2, [pc, #464]	@ (800e9b4 <ProcessRadioRxDone+0x8fc>)
 800e7e4:	f8c2 349c 	str.w	r3, [r2, #1180]	@ 0x49c
 800e7e8:	e007      	b.n	800e7fa <ProcessRadioRxDone+0x742>
                    }
#endif /* LORAMAC_VERSION */
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 800e7ea:	4b73      	ldr	r3, [pc, #460]	@ (800e9b8 <ProcessRadioRxDone+0x900>)
 800e7ec:	2200      	movs	r2, #0
 800e7ee:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800e7f2:	4b70      	ldr	r3, [pc, #448]	@ (800e9b4 <ProcessRadioRxDone+0x8fc>)
 800e7f4:	2200      	movs	r2, #0
 800e7f6:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
                }
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800e7fa:	4b6e      	ldr	r3, [pc, #440]	@ (800e9b4 <ProcessRadioRxDone+0x8fc>)
 800e7fc:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800e800:	4a6c      	ldr	r2, [pc, #432]	@ (800e9b4 <ProcessRadioRxDone+0x8fc>)
 800e802:	f892 2444 	ldrb.w	r2, [r2, #1092]	@ 0x444
 800e806:	f897 1040 	ldrb.w	r1, [r7, #64]	@ 0x40
 800e80a:	4618      	mov	r0, r3
 800e80c:	f001 ff96 	bl	801073c <RemoveMacCommands>

            switch( fType )
 800e810:	79bb      	ldrb	r3, [r7, #6]
 800e812:	2b03      	cmp	r3, #3
 800e814:	d873      	bhi.n	800e8fe <ProcessRadioRxDone+0x846>
 800e816:	a201      	add	r2, pc, #4	@ (adr r2, 800e81c <ProcessRadioRxDone+0x764>)
 800e818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e81c:	0800e82d 	.word	0x0800e82d
 800e820:	0800e87d 	.word	0x0800e87d
 800e824:	0800e8b3 	.word	0x0800e8b3
 800e828:	0800e8d9 	.word	0x0800e8d9
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800e82c:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800e830:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800e834:	b2db      	uxtb	r3, r3
 800e836:	461c      	mov	r4, r3
 800e838:	4b5e      	ldr	r3, [pc, #376]	@ (800e9b4 <ProcessRadioRxDone+0x8fc>)
 800e83a:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800e83e:	f997 107f 	ldrsb.w	r1, [r7, #127]	@ 0x7f
 800e842:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800e846:	f102 0010 	add.w	r0, r2, #16
 800e84a:	9300      	str	r3, [sp, #0]
 800e84c:	460b      	mov	r3, r1
 800e84e:	4622      	mov	r2, r4
 800e850:	2100      	movs	r1, #0
 800e852:	f000 ff45 	bl	800f6e0 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800e856:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 800e85a:	4b56      	ldr	r3, [pc, #344]	@ (800e9b4 <ProcessRadioRxDone+0x8fc>)
 800e85c:	f883 2427 	strb.w	r2, [r3, #1063]	@ 0x427
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800e860:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e862:	4a54      	ldr	r2, [pc, #336]	@ (800e9b4 <ProcessRadioRxDone+0x8fc>)
 800e864:	f8c2 342c 	str.w	r3, [r2, #1068]	@ 0x42c
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800e868:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800e86c:	4b51      	ldr	r3, [pc, #324]	@ (800e9b4 <ProcessRadioRxDone+0x8fc>)
 800e86e:	f883 2430 	strb.w	r2, [r3, #1072]	@ 0x430
                    MacCtx.McpsIndication.RxData = true;
 800e872:	4b50      	ldr	r3, [pc, #320]	@ (800e9b4 <ProcessRadioRxDone+0x8fc>)
 800e874:	2201      	movs	r2, #1
 800e876:	f883 2431 	strb.w	r2, [r3, #1073]	@ 0x431
                    break;
 800e87a:	e047      	b.n	800e90c <ProcessRadioRxDone+0x854>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800e87c:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800e880:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800e884:	b2db      	uxtb	r3, r3
 800e886:	461c      	mov	r4, r3
 800e888:	4b4a      	ldr	r3, [pc, #296]	@ (800e9b4 <ProcessRadioRxDone+0x8fc>)
 800e88a:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800e88e:	f997 107f 	ldrsb.w	r1, [r7, #127]	@ 0x7f
 800e892:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800e896:	f102 0010 	add.w	r0, r2, #16
 800e89a:	9300      	str	r3, [sp, #0]
 800e89c:	460b      	mov	r3, r1
 800e89e:	4622      	mov	r2, r4
 800e8a0:	2100      	movs	r1, #0
 800e8a2:	f000 ff1d 	bl	800f6e0 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800e8a6:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 800e8aa:	4b42      	ldr	r3, [pc, #264]	@ (800e9b4 <ProcessRadioRxDone+0x8fc>)
 800e8ac:	f883 2427 	strb.w	r2, [r3, #1063]	@ 0x427
                    break;
 800e8b0:	e02c      	b.n	800e90c <ProcessRadioRxDone+0x854>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 800e8b2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800e8b4:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800e8b8:	4b3e      	ldr	r3, [pc, #248]	@ (800e9b4 <ProcessRadioRxDone+0x8fc>)
 800e8ba:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800e8be:	f997 107f 	ldrsb.w	r1, [r7, #127]	@ 0x7f
 800e8c2:	9300      	str	r3, [sp, #0]
 800e8c4:	460b      	mov	r3, r1
 800e8c6:	2100      	movs	r1, #0
 800e8c8:	f000 ff0a 	bl	800f6e0 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800e8cc:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 800e8d0:	4b38      	ldr	r3, [pc, #224]	@ (800e9b4 <ProcessRadioRxDone+0x8fc>)
 800e8d2:	f883 2427 	strb.w	r2, [r3, #1063]	@ 0x427
                    break;
 800e8d6:	e019      	b.n	800e90c <ProcessRadioRxDone+0x854>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800e8d8:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 800e8dc:	4b35      	ldr	r3, [pc, #212]	@ (800e9b4 <ProcessRadioRxDone+0x8fc>)
 800e8de:	f883 2427 	strb.w	r2, [r3, #1063]	@ 0x427
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800e8e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e8e4:	4a33      	ldr	r2, [pc, #204]	@ (800e9b4 <ProcessRadioRxDone+0x8fc>)
 800e8e6:	f8c2 342c 	str.w	r3, [r2, #1068]	@ 0x42c
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800e8ea:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800e8ee:	4b31      	ldr	r3, [pc, #196]	@ (800e9b4 <ProcessRadioRxDone+0x8fc>)
 800e8f0:	f883 2430 	strb.w	r2, [r3, #1072]	@ 0x430
                    MacCtx.McpsIndication.RxData = true;
 800e8f4:	4b2f      	ldr	r3, [pc, #188]	@ (800e9b4 <ProcessRadioRxDone+0x8fc>)
 800e8f6:	2201      	movs	r2, #1
 800e8f8:	f883 2431 	strb.w	r2, [r3, #1073]	@ 0x431
                    break;
 800e8fc:	e006      	b.n	800e90c <ProcessRadioRxDone+0x854>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e8fe:	4b2d      	ldr	r3, [pc, #180]	@ (800e9b4 <ProcessRadioRxDone+0x8fc>)
 800e900:	2201      	movs	r2, #1
 800e902:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                    PrepareRxDoneAbort( );
 800e906:	f7ff fbb1 	bl	800e06c <PrepareRxDoneAbort>
                    break;
 800e90a:	bf00      	nop
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 800e90c:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800e910:	2be0      	cmp	r3, #224	@ 0xe0
 800e912:	d118      	bne.n	800e946 <ProcessRadioRxDone+0x88e>
 800e914:	4b28      	ldr	r3, [pc, #160]	@ (800e9b8 <ProcessRadioRxDone+0x900>)
 800e916:	f893 310b 	ldrb.w	r3, [r3, #267]	@ 0x10b
 800e91a:	f083 0301 	eor.w	r3, r3, #1
 800e91e:	b2db      	uxtb	r3, r3
 800e920:	2b00      	cmp	r3, #0
 800e922:	d010      	beq.n	800e946 <ProcessRadioRxDone+0x88e>
            { // Do not notify the upper layer of data reception on FPort LORAMAC_CERT_FPORT if the port
              // handling is disabled.
                MacCtx.McpsIndication.Port = macMsgData.FPort;
 800e924:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 800e928:	4b22      	ldr	r3, [pc, #136]	@ (800e9b4 <ProcessRadioRxDone+0x8fc>)
 800e92a:	f883 2427 	strb.w	r2, [r3, #1063]	@ 0x427
                MacCtx.McpsIndication.Buffer = NULL;
 800e92e:	4b21      	ldr	r3, [pc, #132]	@ (800e9b4 <ProcessRadioRxDone+0x8fc>)
 800e930:	2200      	movs	r2, #0
 800e932:	f8c3 242c 	str.w	r2, [r3, #1068]	@ 0x42c
                MacCtx.McpsIndication.BufferSize = 0;
 800e936:	4b1f      	ldr	r3, [pc, #124]	@ (800e9b4 <ProcessRadioRxDone+0x8fc>)
 800e938:	2200      	movs	r2, #0
 800e93a:	f883 2430 	strb.w	r2, [r3, #1072]	@ 0x430
                MacCtx.McpsIndication.RxData = false;
 800e93e:	4b1d      	ldr	r3, [pc, #116]	@ (800e9b4 <ProcessRadioRxDone+0x8fc>)
 800e940:	2200      	movs	r2, #0
 800e942:	f883 2431 	strb.w	r2, [r3, #1073]	@ 0x431
            }
#endif /* LORAMAC_VERSION */

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800e946:	4a1b      	ldr	r2, [pc, #108]	@ (800e9b4 <ProcessRadioRxDone+0x8fc>)
 800e948:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800e94c:	f043 0302 	orr.w	r3, r3, #2
 800e950:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495

            break;
 800e954:	e03d      	b.n	800e9d2 <ProcessRadioRxDone+0x91a>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800e956:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800e95a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800e95e:	18d1      	adds	r1, r2, r3
 800e960:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800e964:	b29b      	uxth	r3, r3
 800e966:	f8b7 2082 	ldrh.w	r2, [r7, #130]	@ 0x82
 800e96a:	1ad3      	subs	r3, r2, r3
 800e96c:	b29b      	uxth	r3, r3
 800e96e:	461a      	mov	r2, r3
 800e970:	4813      	ldr	r0, [pc, #76]	@ (800e9c0 <ProcessRadioRxDone+0x908>)
 800e972:	f008 fade 	bl	8016f32 <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800e976:	4b0f      	ldr	r3, [pc, #60]	@ (800e9b4 <ProcessRadioRxDone+0x8fc>)
 800e978:	2203      	movs	r2, #3
 800e97a:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800e97e:	4b0d      	ldr	r3, [pc, #52]	@ (800e9b4 <ProcessRadioRxDone+0x8fc>)
 800e980:	2200      	movs	r2, #0
 800e982:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800e986:	4b0b      	ldr	r3, [pc, #44]	@ (800e9b4 <ProcessRadioRxDone+0x8fc>)
 800e988:	4a0d      	ldr	r2, [pc, #52]	@ (800e9c0 <ProcessRadioRxDone+0x908>)
 800e98a:	f8c3 242c 	str.w	r2, [r3, #1068]	@ 0x42c
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800e98e:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800e992:	b2da      	uxtb	r2, r3
 800e994:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800e998:	1ad3      	subs	r3, r2, r3
 800e99a:	b2da      	uxtb	r2, r3
 800e99c:	4b05      	ldr	r3, [pc, #20]	@ (800e9b4 <ProcessRadioRxDone+0x8fc>)
 800e99e:	f883 2430 	strb.w	r2, [r3, #1072]	@ 0x430

            MacCtx.MacFlags.Bits.McpsInd = 1;
 800e9a2:	4a04      	ldr	r2, [pc, #16]	@ (800e9b4 <ProcessRadioRxDone+0x8fc>)
 800e9a4:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800e9a8:	f043 0302 	orr.w	r3, r3, #2
 800e9ac:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
            break;
 800e9b0:	e00f      	b.n	800e9d2 <ProcessRadioRxDone+0x91a>
 800e9b2:	bf00      	nop
 800e9b4:	200008d8 	.word	0x200008d8
 800e9b8:	20000df8 	.word	0x20000df8
 800e9bc:	20001988 	.word	0x20001988
 800e9c0:	20000b10 	.word	0x20000b10
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e9c4:	4b17      	ldr	r3, [pc, #92]	@ (800ea24 <ProcessRadioRxDone+0x96c>)
 800e9c6:	2201      	movs	r2, #1
 800e9c8:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
            PrepareRxDoneAbort( );
 800e9cc:	f7ff fb4e 	bl	800e06c <PrepareRxDoneAbort>
            break;
 800e9d0:	bf00      	nop
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Verify if we need to disable the RetransmitTimeoutTimer
    // Only aplies if downlink is received on Rx1 or Rx2 windows.
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800e9d2:	4b14      	ldr	r3, [pc, #80]	@ (800ea24 <ProcessRadioRxDone+0x96c>)
 800e9d4:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d004      	beq.n	800e9e6 <ProcessRadioRxDone+0x92e>
        ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800e9dc:	4b11      	ldr	r3, [pc, #68]	@ (800ea24 <ProcessRadioRxDone+0x96c>)
 800e9de:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800e9e2:	2b01      	cmp	r3, #1
 800e9e4:	d10c      	bne.n	800ea00 <ProcessRadioRxDone+0x948>
    {
        if( MacCtx.NodeAckRequested == true )
 800e9e6:	4b0f      	ldr	r3, [pc, #60]	@ (800ea24 <ProcessRadioRxDone+0x96c>)
 800e9e8:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d007      	beq.n	800ea00 <ProcessRadioRxDone+0x948>
        {
            if( MacCtx.McpsConfirm.AckReceived == true )
 800e9f0:	4b0c      	ldr	r3, [pc, #48]	@ (800ea24 <ProcessRadioRxDone+0x96c>)
 800e9f2:	f893 3448 	ldrb.w	r3, [r3, #1096]	@ 0x448
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d002      	beq.n	800ea00 <ProcessRadioRxDone+0x948>
            {
                OnRetransmitTimeoutTimerEvent( NULL );
 800e9fa:	2000      	movs	r0, #0
 800e9fc:	f000 fce4 	bl	800f3c8 <OnRetransmitTimeoutTimerEvent>
            }
        }
    }

    if( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_CLASS_C )
 800ea00:	4b08      	ldr	r3, [pc, #32]	@ (800ea24 <ProcessRadioRxDone+0x96c>)
 800ea02:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800ea06:	2b02      	cmp	r3, #2
 800ea08:	d006      	beq.n	800ea18 <ProcessRadioRxDone+0x960>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 800ea0a:	4a06      	ldr	r2, [pc, #24]	@ (800ea24 <ProcessRadioRxDone+0x96c>)
 800ea0c:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800ea10:	f043 0320 	orr.w	r3, r3, #32
 800ea14:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
    }
#endif /* LORAMAC_VERSION */

    UpdateRxSlotIdleState( );
 800ea18:	f7ff fa82 	bl	800df20 <UpdateRxSlotIdleState>
}
 800ea1c:	3794      	adds	r7, #148	@ 0x94
 800ea1e:	46bd      	mov	sp, r7
 800ea20:	bd90      	pop	{r4, r7, pc}
 800ea22:	bf00      	nop
 800ea24:	200008d8 	.word	0x200008d8

0800ea28 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 800ea28:	b580      	push	{r7, lr}
 800ea2a:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800ea2c:	4b11      	ldr	r3, [pc, #68]	@ (800ea74 <ProcessRadioTxTimeout+0x4c>)
 800ea2e:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800ea32:	2b02      	cmp	r3, #2
 800ea34:	d002      	beq.n	800ea3c <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 800ea36:	4b10      	ldr	r3, [pc, #64]	@ (800ea78 <ProcessRadioTxTimeout+0x50>)
 800ea38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea3a:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 800ea3c:	f7ff fa70 	bl	800df20 <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800ea40:	4b0e      	ldr	r3, [pc, #56]	@ (800ea7c <ProcessRadioTxTimeout+0x54>)
 800ea42:	2202      	movs	r2, #2
 800ea44:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800ea48:	2002      	movs	r0, #2
 800ea4a:	f004 fd57 	bl	80134fc <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800ea4e:	4b0b      	ldr	r3, [pc, #44]	@ (800ea7c <ProcessRadioTxTimeout+0x54>)
 800ea50:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d003      	beq.n	800ea60 <ProcessRadioTxTimeout+0x38>
    {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        MacCtx.AckTimeoutRetry = true;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        MacCtx.RetransmitTimeoutRetry = true;
 800ea58:	4b08      	ldr	r3, [pc, #32]	@ (800ea7c <ProcessRadioTxTimeout+0x54>)
 800ea5a:	2201      	movs	r2, #1
 800ea5c:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
#endif /* LORAMAC_VERSION */
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800ea60:	4a06      	ldr	r2, [pc, #24]	@ (800ea7c <ProcessRadioTxTimeout+0x54>)
 800ea62:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800ea66:	f043 0320 	orr.w	r3, r3, #32
 800ea6a:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
}
 800ea6e:	bf00      	nop
 800ea70:	bd80      	pop	{r7, pc}
 800ea72:	bf00      	nop
 800ea74:	20000df8 	.word	0x20000df8
 800ea78:	0801f464 	.word	0x0801f464
 800ea7c:	200008d8 	.word	0x200008d8

0800ea80 <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 800ea80:	b580      	push	{r7, lr}
 800ea82:	b084      	sub	sp, #16
 800ea84:	af00      	add	r7, sp, #0
 800ea86:	4603      	mov	r3, r0
 800ea88:	460a      	mov	r2, r1
 800ea8a:	71fb      	strb	r3, [r7, #7]
 800ea8c:	4613      	mov	r3, r2
 800ea8e:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 800ea90:	2300      	movs	r3, #0
 800ea92:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800ea94:	4b3d      	ldr	r3, [pc, #244]	@ (800eb8c <HandleRadioRxErrorTimeout+0x10c>)
 800ea96:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800ea9a:	2b02      	cmp	r3, #2
 800ea9c:	d002      	beq.n	800eaa4 <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 800ea9e:	4b3c      	ldr	r3, [pc, #240]	@ (800eb90 <HandleRadioRxErrorTimeout+0x110>)
 800eaa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eaa2:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800eaa4:	f004 f870 	bl	8012b88 <LoRaMacClassBIsBeaconExpected>
 800eaa8:	4603      	mov	r3, r0
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d007      	beq.n	800eabe <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800eaae:	2002      	movs	r0, #2
 800eab0:	f004 f81e 	bl	8012af0 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800eab4:	2000      	movs	r0, #0
 800eab6:	f004 f840 	bl	8012b3a <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800eaba:	2301      	movs	r3, #1
 800eabc:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800eabe:	4b33      	ldr	r3, [pc, #204]	@ (800eb8c <HandleRadioRxErrorTimeout+0x10c>)
 800eac0:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800eac4:	2b01      	cmp	r3, #1
 800eac6:	d119      	bne.n	800eafc <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800eac8:	f004 f865 	bl	8012b96 <LoRaMacClassBIsPingExpected>
 800eacc:	4603      	mov	r3, r0
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d007      	beq.n	800eae2 <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800ead2:	2000      	movs	r0, #0
 800ead4:	f004 f816 	bl	8012b04 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800ead8:	2000      	movs	r0, #0
 800eada:	f004 f837 	bl	8012b4c <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800eade:	2301      	movs	r3, #1
 800eae0:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800eae2:	f004 f85f 	bl	8012ba4 <LoRaMacClassBIsMulticastExpected>
 800eae6:	4603      	mov	r3, r0
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d007      	beq.n	800eafc <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800eaec:	2000      	movs	r0, #0
 800eaee:	f004 f813 	bl	8012b18 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800eaf2:	2000      	movs	r0, #0
 800eaf4:	f004 f833 	bl	8012b5e <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 800eaf8:	2301      	movs	r3, #1
 800eafa:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 800eafc:	7bfb      	ldrb	r3, [r7, #15]
 800eafe:	f083 0301 	eor.w	r3, r3, #1
 800eb02:	b2db      	uxtb	r3, r3
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d03b      	beq.n	800eb80 <HandleRadioRxErrorTimeout+0x100>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800eb08:	4b22      	ldr	r3, [pc, #136]	@ (800eb94 <HandleRadioRxErrorTimeout+0x114>)
 800eb0a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d122      	bne.n	800eb58 <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 800eb12:	4b20      	ldr	r3, [pc, #128]	@ (800eb94 <HandleRadioRxErrorTimeout+0x114>)
 800eb14:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d003      	beq.n	800eb24 <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800eb1c:	4a1d      	ldr	r2, [pc, #116]	@ (800eb94 <HandleRadioRxErrorTimeout+0x114>)
 800eb1e:	79fb      	ldrb	r3, [r7, #7]
 800eb20:	f882 3445 	strb.w	r3, [r2, #1093]	@ 0x445
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800eb24:	79fb      	ldrb	r3, [r7, #7]
 800eb26:	4618      	mov	r0, r3
 800eb28:	f004 fce8 	bl	80134fc <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800eb2c:	4b17      	ldr	r3, [pc, #92]	@ (800eb8c <HandleRadioRxErrorTimeout+0x10c>)
 800eb2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb30:	4618      	mov	r0, r3
 800eb32:	f00c fc77 	bl	801b424 <UTIL_TIMER_GetElapsedTime>
 800eb36:	4602      	mov	r2, r0
 800eb38:	4b16      	ldr	r3, [pc, #88]	@ (800eb94 <HandleRadioRxErrorTimeout+0x114>)
 800eb3a:	f8d3 33b4 	ldr.w	r3, [r3, #948]	@ 0x3b4
 800eb3e:	429a      	cmp	r2, r3
 800eb40:	d31e      	bcc.n	800eb80 <HandleRadioRxErrorTimeout+0x100>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 800eb42:	4815      	ldr	r0, [pc, #84]	@ (800eb98 <HandleRadioRxErrorTimeout+0x118>)
 800eb44:	f00c fb42 	bl	801b1cc <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800eb48:	4a12      	ldr	r2, [pc, #72]	@ (800eb94 <HandleRadioRxErrorTimeout+0x114>)
 800eb4a:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800eb4e:	f043 0320 	orr.w	r3, r3, #32
 800eb52:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
 800eb56:	e013      	b.n	800eb80 <HandleRadioRxErrorTimeout+0x100>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 800eb58:	4b0e      	ldr	r3, [pc, #56]	@ (800eb94 <HandleRadioRxErrorTimeout+0x114>)
 800eb5a:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d003      	beq.n	800eb6a <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800eb62:	4a0c      	ldr	r2, [pc, #48]	@ (800eb94 <HandleRadioRxErrorTimeout+0x114>)
 800eb64:	79bb      	ldrb	r3, [r7, #6]
 800eb66:	f882 3445 	strb.w	r3, [r2, #1093]	@ 0x445
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800eb6a:	79bb      	ldrb	r3, [r7, #6]
 800eb6c:	4618      	mov	r0, r3
 800eb6e:	f004 fcc5 	bl	80134fc <LoRaMacConfirmQueueSetStatusCmn>
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
            }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            MacCtx.MacFlags.Bits.MacDone = 1;
 800eb72:	4a08      	ldr	r2, [pc, #32]	@ (800eb94 <HandleRadioRxErrorTimeout+0x114>)
 800eb74:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800eb78:	f043 0320 	orr.w	r3, r3, #32
 800eb7c:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
#endif /* LORAMAC_VERSION */
        }
    }

    UpdateRxSlotIdleState( );
 800eb80:	f7ff f9ce 	bl	800df20 <UpdateRxSlotIdleState>
}
 800eb84:	bf00      	nop
 800eb86:	3710      	adds	r7, #16
 800eb88:	46bd      	mov	sp, r7
 800eb8a:	bd80      	pop	{r7, pc}
 800eb8c:	20000df8 	.word	0x20000df8
 800eb90:	0801f464 	.word	0x0801f464
 800eb94:	200008d8 	.word	0x200008d8
 800eb98:	20000c70 	.word	0x20000c70

0800eb9c <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 800eb9c:	b580      	push	{r7, lr}
 800eb9e:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800eba0:	2106      	movs	r1, #6
 800eba2:	2005      	movs	r0, #5
 800eba4:	f7ff ff6c 	bl	800ea80 <HandleRadioRxErrorTimeout>
}
 800eba8:	bf00      	nop
 800ebaa:	bd80      	pop	{r7, pc}

0800ebac <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 800ebac:	b580      	push	{r7, lr}
 800ebae:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800ebb0:	2104      	movs	r1, #4
 800ebb2:	2003      	movs	r0, #3
 800ebb4:	f7ff ff64 	bl	800ea80 <HandleRadioRxErrorTimeout>
}
 800ebb8:	bf00      	nop
 800ebba:	bd80      	pop	{r7, pc}

0800ebbc <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 800ebbc:	b580      	push	{r7, lr}
 800ebbe:	b084      	sub	sp, #16
 800ebc0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ebc2:	f3ef 8310 	mrs	r3, PRIMASK
 800ebc6:	607b      	str	r3, [r7, #4]
  return(result);
 800ebc8:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 800ebca:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800ebcc:	b672      	cpsid	i
}
 800ebce:	bf00      	nop
    events = LoRaMacRadioEvents;
 800ebd0:	4b1d      	ldr	r3, [pc, #116]	@ (800ec48 <LoRaMacHandleIrqEvents+0x8c>)
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 800ebd6:	4b1c      	ldr	r3, [pc, #112]	@ (800ec48 <LoRaMacHandleIrqEvents+0x8c>)
 800ebd8:	2200      	movs	r2, #0
 800ebda:	601a      	str	r2, [r3, #0]
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ebe0:	68bb      	ldr	r3, [r7, #8]
 800ebe2:	f383 8810 	msr	PRIMASK, r3
}
 800ebe6:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 800ebe8:	683b      	ldr	r3, [r7, #0]
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d027      	beq.n	800ec3e <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 800ebee:	783b      	ldrb	r3, [r7, #0]
 800ebf0:	f003 0320 	and.w	r3, r3, #32
 800ebf4:	b2db      	uxtb	r3, r3
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d001      	beq.n	800ebfe <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 800ebfa:	f7ff f9a9 	bl	800df50 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 800ebfe:	783b      	ldrb	r3, [r7, #0]
 800ec00:	f003 0310 	and.w	r3, r3, #16
 800ec04:	b2db      	uxtb	r3, r3
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d001      	beq.n	800ec0e <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 800ec0a:	f7ff fa55 	bl	800e0b8 <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 800ec0e:	783b      	ldrb	r3, [r7, #0]
 800ec10:	f003 0308 	and.w	r3, r3, #8
 800ec14:	b2db      	uxtb	r3, r3
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d001      	beq.n	800ec1e <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 800ec1a:	f7ff ff05 	bl	800ea28 <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 800ec1e:	783b      	ldrb	r3, [r7, #0]
 800ec20:	f003 0304 	and.w	r3, r3, #4
 800ec24:	b2db      	uxtb	r3, r3
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d001      	beq.n	800ec2e <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 800ec2a:	f7ff ffb7 	bl	800eb9c <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 800ec2e:	783b      	ldrb	r3, [r7, #0]
 800ec30:	f003 0302 	and.w	r3, r3, #2
 800ec34:	b2db      	uxtb	r3, r3
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d001      	beq.n	800ec3e <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 800ec3a:	f7ff ffb7 	bl	800ebac <ProcessRadioRxTimeout>
        }
    }
}
 800ec3e:	bf00      	nop
 800ec40:	3710      	adds	r7, #16
 800ec42:	46bd      	mov	sp, r7
 800ec44:	bd80      	pop	{r7, pc}
 800ec46:	bf00      	nop
 800ec48:	20001980 	.word	0x20001980

0800ec4c <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 800ec4c:	b480      	push	{r7}
 800ec4e:	af00      	add	r7, sp, #0
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( LoRaMacRadioEvents.Events.RxProcessPending == 1 )
 800ec50:	4b0c      	ldr	r3, [pc, #48]	@ (800ec84 <LoRaMacIsBusy+0x38>)
 800ec52:	781b      	ldrb	r3, [r3, #0]
 800ec54:	f003 0301 	and.w	r3, r3, #1
 800ec58:	b2db      	uxtb	r3, r3
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d001      	beq.n	800ec62 <LoRaMacIsBusy+0x16>
    {
        return true;
 800ec5e:	2301      	movs	r3, #1
 800ec60:	e00c      	b.n	800ec7c <LoRaMacIsBusy+0x30>
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800ec62:	4b09      	ldr	r3, [pc, #36]	@ (800ec88 <LoRaMacIsBusy+0x3c>)
 800ec64:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d106      	bne.n	800ec7a <LoRaMacIsBusy+0x2e>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800ec6c:	4b06      	ldr	r3, [pc, #24]	@ (800ec88 <LoRaMacIsBusy+0x3c>)
 800ec6e:	f893 3496 	ldrb.w	r3, [r3, #1174]	@ 0x496
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800ec72:	2b01      	cmp	r3, #1
 800ec74:	d101      	bne.n	800ec7a <LoRaMacIsBusy+0x2e>
    {
        return false;
 800ec76:	2300      	movs	r3, #0
 800ec78:	e000      	b.n	800ec7c <LoRaMacIsBusy+0x30>
    }
    return true;
 800ec7a:	2301      	movs	r3, #1
}
 800ec7c:	4618      	mov	r0, r3
 800ec7e:	46bd      	mov	sp, r7
 800ec80:	bc80      	pop	{r7}
 800ec82:	4770      	bx	lr
 800ec84:	20001980 	.word	0x20001980
 800ec88:	200008d8 	.word	0x200008d8

0800ec8c <LoRaMacEnableRequests>:

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 800ec8c:	b480      	push	{r7}
 800ec8e:	b083      	sub	sp, #12
 800ec90:	af00      	add	r7, sp, #0
 800ec92:	4603      	mov	r3, r0
 800ec94:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 800ec96:	4a04      	ldr	r2, [pc, #16]	@ (800eca8 <LoRaMacEnableRequests+0x1c>)
 800ec98:	79fb      	ldrb	r3, [r7, #7]
 800ec9a:	f882 3496 	strb.w	r3, [r2, #1174]	@ 0x496
}
 800ec9e:	bf00      	nop
 800eca0:	370c      	adds	r7, #12
 800eca2:	46bd      	mov	sp, r7
 800eca4:	bc80      	pop	{r7}
 800eca6:	4770      	bx	lr
 800eca8:	200008d8 	.word	0x200008d8

0800ecac <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 800ecac:	b580      	push	{r7, lr}
 800ecae:	b082      	sub	sp, #8
 800ecb0:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 800ecb2:	4b2c      	ldr	r3, [pc, #176]	@ (800ed64 <LoRaMacHandleRequestEvents+0xb8>)
 800ecb4:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800ecb8:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 800ecba:	4b2a      	ldr	r3, [pc, #168]	@ (800ed64 <LoRaMacHandleRequestEvents+0xb8>)
 800ecbc:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d14a      	bne.n	800ed5a <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800ecc4:	4b27      	ldr	r3, [pc, #156]	@ (800ed64 <LoRaMacHandleRequestEvents+0xb8>)
 800ecc6:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800ecca:	f003 0301 	and.w	r3, r3, #1
 800ecce:	b2db      	uxtb	r3, r3
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d006      	beq.n	800ece2 <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800ecd4:	4a23      	ldr	r2, [pc, #140]	@ (800ed64 <LoRaMacHandleRequestEvents+0xb8>)
 800ecd6:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800ecda:	f023 0301 	bic.w	r3, r3, #1
 800ecde:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800ece2:	4b20      	ldr	r3, [pc, #128]	@ (800ed64 <LoRaMacHandleRequestEvents+0xb8>)
 800ece4:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800ece8:	f003 0304 	and.w	r3, r3, #4
 800ecec:	b2db      	uxtb	r3, r3
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d006      	beq.n	800ed00 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800ecf2:	4a1c      	ldr	r2, [pc, #112]	@ (800ed64 <LoRaMacHandleRequestEvents+0xb8>)
 800ecf4:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800ecf8:	f023 0304 	bic.w	r3, r3, #4
 800ecfc:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800ed00:	2001      	movs	r0, #1
 800ed02:	f7ff ffc3 	bl	800ec8c <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 800ed06:	793b      	ldrb	r3, [r7, #4]
 800ed08:	f003 0301 	and.w	r3, r3, #1
 800ed0c:	b2db      	uxtb	r3, r3
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d005      	beq.n	800ed1e <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800ed12:	4b14      	ldr	r3, [pc, #80]	@ (800ed64 <LoRaMacHandleRequestEvents+0xb8>)
 800ed14:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	4813      	ldr	r0, [pc, #76]	@ (800ed68 <LoRaMacHandleRequestEvents+0xbc>)
 800ed1c:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 800ed1e:	793b      	ldrb	r3, [r7, #4]
 800ed20:	f003 0304 	and.w	r3, r3, #4
 800ed24:	b2db      	uxtb	r3, r3
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d00e      	beq.n	800ed48 <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800ed2a:	4810      	ldr	r0, [pc, #64]	@ (800ed6c <LoRaMacHandleRequestEvents+0xc0>)
 800ed2c:	f004 fc34 	bl	8013598 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800ed30:	f004 fc7e 	bl	8013630 <LoRaMacConfirmQueueGetCnt>
 800ed34:	4603      	mov	r3, r0
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d006      	beq.n	800ed48 <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800ed3a:	4a0a      	ldr	r2, [pc, #40]	@ (800ed64 <LoRaMacHandleRequestEvents+0xb8>)
 800ed3c:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800ed40:	f043 0304 	orr.w	r3, r3, #4
 800ed44:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 800ed48:	f003 ff4a 	bl	8012be0 <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 800ed4c:	4a05      	ldr	r2, [pc, #20]	@ (800ed64 <LoRaMacHandleRequestEvents+0xb8>)
 800ed4e:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800ed52:	f023 0320 	bic.w	r3, r3, #32
 800ed56:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
    }
}
 800ed5a:	bf00      	nop
 800ed5c:	3708      	adds	r7, #8
 800ed5e:	46bd      	mov	sp, r7
 800ed60:	bd80      	pop	{r7, pc}
 800ed62:	bf00      	nop
 800ed64:	200008d8 	.word	0x200008d8
 800ed68:	20000d1c 	.word	0x20000d1c
 800ed6c:	20000d30 	.word	0x20000d30

0800ed70 <LoRaMacHandleScheduleUplinkEvent>:

static void LoRaMacHandleScheduleUplinkEvent( void )
{
 800ed70:	b580      	push	{r7, lr}
 800ed72:	b082      	sub	sp, #8
 800ed74:	af00      	add	r7, sp, #0
    // Handle events
    if( MacCtx.MacState == LORAMAC_IDLE )
 800ed76:	4b07      	ldr	r3, [pc, #28]	@ (800ed94 <LoRaMacHandleScheduleUplinkEvent+0x24>)
 800ed78:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d105      	bne.n	800ed8c <LoRaMacHandleScheduleUplinkEvent+0x1c>
    {
        // Verify if sticky MAC commands are pending or not
        bool isStickyMacCommandPending = false;
 800ed80:	2300      	movs	r3, #0
 800ed82:	71fb      	strb	r3, [r7, #7]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 800ed84:	1dfb      	adds	r3, r7, #7
 800ed86:	4618      	mov	r0, r3
 800ed88:	f004 f9ec 	bl	8013164 <LoRaMacCommandsStickyCmdsPending>
        {// Setup MLME indication
            /* ST_WORKAROUND: remove unnecessary mlme operation to prevent uplinks burst */
            //SetMlmeScheduleUplinkIndication( );
        }
    }
}
 800ed8c:	bf00      	nop
 800ed8e:	3708      	adds	r7, #8
 800ed90:	46bd      	mov	sp, r7
 800ed92:	bd80      	pop	{r7, pc}
 800ed94:	200008d8 	.word	0x200008d8

0800ed98 <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 800ed98:	b580      	push	{r7, lr}
 800ed9a:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800ed9c:	4b16      	ldr	r3, [pc, #88]	@ (800edf8 <LoRaMacHandleIndicationEvents+0x60>)
 800ed9e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800eda2:	f003 0308 	and.w	r3, r3, #8
 800eda6:	b2db      	uxtb	r3, r3
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d00d      	beq.n	800edc8 <LoRaMacHandleIndicationEvents+0x30>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800edac:	4a12      	ldr	r2, [pc, #72]	@ (800edf8 <LoRaMacHandleIndicationEvents+0x60>)
 800edae:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800edb2:	f023 0308 	bic.w	r3, r3, #8
 800edb6:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 800edba:	4b0f      	ldr	r3, [pc, #60]	@ (800edf8 <LoRaMacHandleIndicationEvents+0x60>)
 800edbc:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 800edc0:	68db      	ldr	r3, [r3, #12]
 800edc2:	490e      	ldr	r1, [pc, #56]	@ (800edfc <LoRaMacHandleIndicationEvents+0x64>)
 800edc4:	480e      	ldr	r0, [pc, #56]	@ (800ee00 <LoRaMacHandleIndicationEvents+0x68>)
 800edc6:	4798      	blx	r3
    }
    */
    /*ST_WORKAROUND_END */

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800edc8:	4b0b      	ldr	r3, [pc, #44]	@ (800edf8 <LoRaMacHandleIndicationEvents+0x60>)
 800edca:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800edce:	f003 0302 	and.w	r3, r3, #2
 800edd2:	b2db      	uxtb	r3, r3
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d00d      	beq.n	800edf4 <LoRaMacHandleIndicationEvents+0x5c>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800edd8:	4a07      	ldr	r2, [pc, #28]	@ (800edf8 <LoRaMacHandleIndicationEvents+0x60>)
 800edda:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800edde:	f023 0302 	bic.w	r3, r3, #2
 800ede2:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 800ede6:	4b04      	ldr	r3, [pc, #16]	@ (800edf8 <LoRaMacHandleIndicationEvents+0x60>)
 800ede8:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 800edec:	685b      	ldr	r3, [r3, #4]
 800edee:	4903      	ldr	r1, [pc, #12]	@ (800edfc <LoRaMacHandleIndicationEvents+0x64>)
 800edf0:	4804      	ldr	r0, [pc, #16]	@ (800ee04 <LoRaMacHandleIndicationEvents+0x6c>)
 800edf2:	4798      	blx	r3
    }
}
 800edf4:	bf00      	nop
 800edf6:	bd80      	pop	{r7, pc}
 800edf8:	200008d8 	.word	0x200008d8
 800edfc:	20000d68 	.word	0x20000d68
 800ee00:	20000d44 	.word	0x20000d44
 800ee04:	20000cfc 	.word	0x20000cfc

0800ee08 <LoRaMacHandleMcpsRequest>:

static void LoRaMacHandleMcpsRequest( void )
{
 800ee08:	b580      	push	{r7, lr}
 800ee0a:	b082      	sub	sp, #8
 800ee0c:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800ee0e:	4b2a      	ldr	r3, [pc, #168]	@ (800eeb8 <LoRaMacHandleMcpsRequest+0xb0>)
 800ee10:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800ee14:	f003 0301 	and.w	r3, r3, #1
 800ee18:	b2db      	uxtb	r3, r3
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d048      	beq.n	800eeb0 <LoRaMacHandleMcpsRequest+0xa8>
    {
        bool stopRetransmission = false;
 800ee1e:	2300      	movs	r3, #0
 800ee20:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 800ee22:	2300      	movs	r3, #0
 800ee24:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800ee26:	4b24      	ldr	r3, [pc, #144]	@ (800eeb8 <LoRaMacHandleMcpsRequest+0xb0>)
 800ee28:	f893 3444 	ldrb.w	r3, [r3, #1092]	@ 0x444
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d004      	beq.n	800ee3a <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 800ee30:	4b21      	ldr	r3, [pc, #132]	@ (800eeb8 <LoRaMacHandleMcpsRequest+0xb0>)
 800ee32:	f893 3444 	ldrb.w	r3, [r3, #1092]	@ 0x444
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800ee36:	2b03      	cmp	r3, #3
 800ee38:	d104      	bne.n	800ee44 <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800ee3a:	f002 f8f9 	bl	8011030 <CheckRetransUnconfirmedUplink>
 800ee3e:	4603      	mov	r3, r0
 800ee40:	71fb      	strb	r3, [r7, #7]
 800ee42:	e010      	b.n	800ee66 <LoRaMacHandleMcpsRequest+0x5e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800ee44:	4b1c      	ldr	r3, [pc, #112]	@ (800eeb8 <LoRaMacHandleMcpsRequest+0xb0>)
 800ee46:	f893 3444 	ldrb.w	r3, [r3, #1092]	@ 0x444
 800ee4a:	2b01      	cmp	r3, #1
 800ee4c:	d10b      	bne.n	800ee66 <LoRaMacHandleMcpsRequest+0x5e>
            else
            {
                waitForRetransmission = true;
            }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            if( MacCtx.RetransmitTimeoutRetry == true )
 800ee4e:	4b1a      	ldr	r3, [pc, #104]	@ (800eeb8 <LoRaMacHandleMcpsRequest+0xb0>)
 800ee50:	f893 341d 	ldrb.w	r3, [r3, #1053]	@ 0x41d
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d004      	beq.n	800ee62 <LoRaMacHandleMcpsRequest+0x5a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 800ee58:	f002 f916 	bl	8011088 <CheckRetransConfirmedUplink>
 800ee5c:	4603      	mov	r3, r0
 800ee5e:	71fb      	strb	r3, [r7, #7]
 800ee60:	e001      	b.n	800ee66 <LoRaMacHandleMcpsRequest+0x5e>
            }
            else
            {
                waitForRetransmission = true;
 800ee62:	2301      	movs	r3, #1
 800ee64:	71bb      	strb	r3, [r7, #6]
            }
#endif /* LORAMAC_VERSION */
        }

        if( stopRetransmission == true )
 800ee66:	79fb      	ldrb	r3, [r7, #7]
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d00d      	beq.n	800ee88 <LoRaMacHandleMcpsRequest+0x80>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 800ee6c:	4813      	ldr	r0, [pc, #76]	@ (800eebc <LoRaMacHandleMcpsRequest+0xb4>)
 800ee6e:	f00c f9ad 	bl	801b1cc <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800ee72:	4b11      	ldr	r3, [pc, #68]	@ (800eeb8 <LoRaMacHandleMcpsRequest+0xb0>)
 800ee74:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800ee78:	f023 0320 	bic.w	r3, r3, #32
 800ee7c:	4a0e      	ldr	r2, [pc, #56]	@ (800eeb8 <LoRaMacHandleMcpsRequest+0xb0>)
 800ee7e:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
            StopRetransmission( );
 800ee82:	f002 f93b 	bl	80110fc <StopRetransmission>
#endif /* LORAMAC_VERSION */
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 800ee86:	e013      	b.n	800eeb0 <LoRaMacHandleMcpsRequest+0xa8>
        else if( waitForRetransmission == false )
 800ee88:	79bb      	ldrb	r3, [r7, #6]
 800ee8a:	f083 0301 	eor.w	r3, r3, #1
 800ee8e:	b2db      	uxtb	r3, r3
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d00d      	beq.n	800eeb0 <LoRaMacHandleMcpsRequest+0xa8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800ee94:	4a08      	ldr	r2, [pc, #32]	@ (800eeb8 <LoRaMacHandleMcpsRequest+0xb0>)
 800ee96:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800ee9a:	f023 0320 	bic.w	r3, r3, #32
 800ee9e:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
            MacCtx.RetransmitTimeoutRetry = false;
 800eea2:	4b05      	ldr	r3, [pc, #20]	@ (800eeb8 <LoRaMacHandleMcpsRequest+0xb0>)
 800eea4:	2200      	movs	r2, #0
 800eea6:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
            OnTxDelayedTimerEvent( NULL );
 800eeaa:	2000      	movs	r0, #0
 800eeac:	f000 f9c8 	bl	800f240 <OnTxDelayedTimerEvent>
}
 800eeb0:	bf00      	nop
 800eeb2:	3708      	adds	r7, #8
 800eeb4:	46bd      	mov	sp, r7
 800eeb6:	bd80      	pop	{r7, pc}
 800eeb8:	200008d8 	.word	0x200008d8
 800eebc:	20000c40 	.word	0x20000c40

0800eec0 <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 800eec0:	b580      	push	{r7, lr}
 800eec2:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800eec4:	4b18      	ldr	r3, [pc, #96]	@ (800ef28 <LoRaMacHandleMlmeRequest+0x68>)
 800eec6:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800eeca:	f003 0304 	and.w	r3, r3, #4
 800eece:	b2db      	uxtb	r3, r3
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d026      	beq.n	800ef22 <LoRaMacHandleMlmeRequest+0x62>
    {
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800eed4:	2001      	movs	r0, #1
 800eed6:	f004 fb45 	bl	8013564 <LoRaMacConfirmQueueIsCmdActive>
 800eeda:	4603      	mov	r3, r0
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d012      	beq.n	800ef06 <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800eee0:	2001      	movs	r0, #1
 800eee2:	f004 fae1 	bl	80134a8 <LoRaMacConfirmQueueGetStatus>
 800eee6:	4603      	mov	r3, r0
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d103      	bne.n	800eef4 <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 800eeec:	4b0e      	ldr	r3, [pc, #56]	@ (800ef28 <LoRaMacHandleMlmeRequest+0x68>)
 800eeee:	2200      	movs	r2, #0
 800eef0:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
            }
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800eef4:	4b0c      	ldr	r3, [pc, #48]	@ (800ef28 <LoRaMacHandleMlmeRequest+0x68>)
 800eef6:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800eefa:	f023 0302 	bic.w	r3, r3, #2
 800eefe:	4a0a      	ldr	r2, [pc, #40]	@ (800ef28 <LoRaMacHandleMlmeRequest+0x68>)
 800ef00:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
#endif /* LORAMAC_VERSION */
    }
}
 800ef04:	e00d      	b.n	800ef22 <LoRaMacHandleMlmeRequest+0x62>
        else if( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true )
 800ef06:	2005      	movs	r0, #5
 800ef08:	f004 fb2c 	bl	8013564 <LoRaMacConfirmQueueIsCmdActive>
 800ef0c:	4603      	mov	r3, r0
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d007      	beq.n	800ef22 <LoRaMacHandleMlmeRequest+0x62>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800ef12:	4b05      	ldr	r3, [pc, #20]	@ (800ef28 <LoRaMacHandleMlmeRequest+0x68>)
 800ef14:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800ef18:	f023 0302 	bic.w	r3, r3, #2
 800ef1c:	4a02      	ldr	r2, [pc, #8]	@ (800ef28 <LoRaMacHandleMlmeRequest+0x68>)
 800ef1e:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
}
 800ef22:	bf00      	nop
 800ef24:	bd80      	pop	{r7, pc}
 800ef26:	bf00      	nop
 800ef28:	200008d8 	.word	0x200008d8

0800ef2c <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 800ef2c:	b580      	push	{r7, lr}
 800ef2e:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800ef30:	200b      	movs	r0, #11
 800ef32:	f004 fb17 	bl	8013564 <LoRaMacConfirmQueueIsCmdActive>
 800ef36:	4603      	mov	r3, r0
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d019      	beq.n	800ef70 <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800ef3c:	4b0e      	ldr	r3, [pc, #56]	@ (800ef78 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800ef3e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800ef42:	f003 0301 	and.w	r3, r3, #1
 800ef46:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d111      	bne.n	800ef70 <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800ef4c:	4b0a      	ldr	r3, [pc, #40]	@ (800ef78 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800ef4e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800ef52:	f003 0304 	and.w	r3, r3, #4
 800ef56:	b2db      	uxtb	r3, r3
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d009      	beq.n	800ef70 <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800ef5c:	4b06      	ldr	r3, [pc, #24]	@ (800ef78 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800ef5e:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800ef62:	f023 0302 	bic.w	r3, r3, #2
 800ef66:	4a04      	ldr	r2, [pc, #16]	@ (800ef78 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800ef68:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
            return 0x01;
 800ef6c:	2301      	movs	r3, #1
 800ef6e:	e000      	b.n	800ef72 <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 800ef70:	2300      	movs	r3, #0
}
 800ef72:	4618      	mov	r0, r3
 800ef74:	bd80      	pop	{r7, pc}
 800ef76:	bf00      	nop
 800ef78:	200008d8 	.word	0x200008d8

0800ef7c <CheckForMinimumAbpDatarate>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool CheckForMinimumAbpDatarate( bool adr, ActivationType_t activation, bool datarateChanged )
{
 800ef7c:	b480      	push	{r7}
 800ef7e:	b083      	sub	sp, #12
 800ef80:	af00      	add	r7, sp, #0
 800ef82:	4603      	mov	r3, r0
 800ef84:	71fb      	strb	r3, [r7, #7]
 800ef86:	460b      	mov	r3, r1
 800ef88:	71bb      	strb	r3, [r7, #6]
 800ef8a:	4613      	mov	r3, r2
 800ef8c:	717b      	strb	r3, [r7, #5]
    if( ( adr == true ) &&
 800ef8e:	79fb      	ldrb	r3, [r7, #7]
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d00a      	beq.n	800efaa <CheckForMinimumAbpDatarate+0x2e>
 800ef94:	79bb      	ldrb	r3, [r7, #6]
 800ef96:	2b01      	cmp	r3, #1
 800ef98:	d107      	bne.n	800efaa <CheckForMinimumAbpDatarate+0x2e>
        ( activation == ACTIVATION_TYPE_ABP ) &&
        ( datarateChanged == false ) )
 800ef9a:	797b      	ldrb	r3, [r7, #5]
 800ef9c:	f083 0301 	eor.w	r3, r3, #1
 800efa0:	b2db      	uxtb	r3, r3
        ( activation == ACTIVATION_TYPE_ABP ) &&
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d001      	beq.n	800efaa <CheckForMinimumAbpDatarate+0x2e>
    {
        return true;
 800efa6:	2301      	movs	r3, #1
 800efa8:	e000      	b.n	800efac <CheckForMinimumAbpDatarate+0x30>
    }
    return false;
 800efaa:	2300      	movs	r3, #0
}
 800efac:	4618      	mov	r0, r3
 800efae:	370c      	adds	r7, #12
 800efb0:	46bd      	mov	sp, r7
 800efb2:	bc80      	pop	{r7}
 800efb4:	4770      	bx	lr
	...

0800efb8 <LoRaMacCheckForRxAbort>:
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
 800efb8:	b480      	push	{r7}
 800efba:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800efbc:	4b0d      	ldr	r3, [pc, #52]	@ (800eff4 <LoRaMacCheckForRxAbort+0x3c>)
 800efbe:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800efc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d00f      	beq.n	800efea <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 800efca:	4b0a      	ldr	r3, [pc, #40]	@ (800eff4 <LoRaMacCheckForRxAbort+0x3c>)
 800efcc:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800efd0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800efd4:	4a07      	ldr	r2, [pc, #28]	@ (800eff4 <LoRaMacCheckForRxAbort+0x3c>)
 800efd6:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800efda:	4b06      	ldr	r3, [pc, #24]	@ (800eff4 <LoRaMacCheckForRxAbort+0x3c>)
 800efdc:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800efe0:	f023 0302 	bic.w	r3, r3, #2
 800efe4:	4a03      	ldr	r2, [pc, #12]	@ (800eff4 <LoRaMacCheckForRxAbort+0x3c>)
 800efe6:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
    }
}
 800efea:	bf00      	nop
 800efec:	46bd      	mov	sp, r7
 800efee:	bc80      	pop	{r7}
 800eff0:	4770      	bx	lr
 800eff2:	bf00      	nop
 800eff4:	200008d8 	.word	0x200008d8

0800eff8 <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 800eff8:	b580      	push	{r7, lr}
 800effa:	b084      	sub	sp, #16
 800effc:	af00      	add	r7, sp, #0
 800effe:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 800f000:	2300      	movs	r3, #0
 800f002:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800f004:	2300      	movs	r3, #0
 800f006:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 800f008:	4b50      	ldr	r3, [pc, #320]	@ (800f14c <LoRaMacHandleNvm+0x154>)
 800f00a:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f00e:	2b00      	cmp	r3, #0
 800f010:	f040 8098 	bne.w	800f144 <LoRaMacHandleNvm+0x14c>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	2124      	movs	r1, #36	@ 0x24
 800f018:	4618      	mov	r0, r3
 800f01a:	f007 ffdf 	bl	8016fdc <Crc32>
 800f01e:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f024:	68ba      	ldr	r2, [r7, #8]
 800f026:	429a      	cmp	r2, r3
 800f028:	d006      	beq.n	800f038 <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	68ba      	ldr	r2, [r7, #8]
 800f02e:	625a      	str	r2, [r3, #36]	@ 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 800f030:	89fb      	ldrh	r3, [r7, #14]
 800f032:	f043 0301 	orr.w	r3, r3, #1
 800f036:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	3328      	adds	r3, #40	@ 0x28
 800f03c:	2114      	movs	r1, #20
 800f03e:	4618      	mov	r0, r3
 800f040:	f007 ffcc 	bl	8016fdc <Crc32>
 800f044:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f04a:	68ba      	ldr	r2, [r7, #8]
 800f04c:	429a      	cmp	r2, r3
 800f04e:	d006      	beq.n	800f05e <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	68ba      	ldr	r2, [r7, #8]
 800f054:	63da      	str	r2, [r3, #60]	@ 0x3c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 800f056:	89fb      	ldrh	r3, [r7, #14]
 800f058:	f043 0302 	orr.w	r3, r3, #2
 800f05c:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	3340      	adds	r3, #64	@ 0x40
 800f062:	21e0      	movs	r1, #224	@ 0xe0
 800f064:	4618      	mov	r0, r3
 800f066:	f007 ffb9 	bl	8016fdc <Crc32>
 800f06a:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800f072:	68ba      	ldr	r2, [r7, #8]
 800f074:	429a      	cmp	r2, r3
 800f076:	d007      	beq.n	800f088 <LoRaMacHandleNvm+0x90>
    {
        nvmData->MacGroup2.Crc32 = crc;
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	68ba      	ldr	r2, [r7, #8]
 800f07c:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 800f080:	89fb      	ldrh	r3, [r7, #14]
 800f082:	f043 0304 	orr.w	r3, r3, #4
 800f086:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 800f08e:	21bc      	movs	r1, #188	@ 0xbc
 800f090:	4618      	mov	r0, r3
 800f092:	f007 ffa3 	bl	8016fdc <Crc32>
 800f096:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 800f09e:	68ba      	ldr	r2, [r7, #8]
 800f0a0:	429a      	cmp	r2, r3
 800f0a2:	d007      	beq.n	800f0b4 <LoRaMacHandleNvm+0xbc>
    {
        nvmData->SecureElement.Crc32 = crc;
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	68ba      	ldr	r2, [r7, #8]
 800f0a8:	f8c3 21e0 	str.w	r2, [r3, #480]	@ 0x1e0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 800f0ac:	89fb      	ldrh	r3, [r7, #14]
 800f0ae:	f043 0308 	orr.w	r3, r3, #8
 800f0b2:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800f0ba:	2100      	movs	r1, #0
 800f0bc:	4618      	mov	r0, r3
 800f0be:	f007 ff8d 	bl	8016fdc <Crc32>
 800f0c2:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	f8d3 31e4 	ldr.w	r3, [r3, #484]	@ 0x1e4
 800f0ca:	68ba      	ldr	r2, [r7, #8]
 800f0cc:	429a      	cmp	r2, r3
 800f0ce:	d007      	beq.n	800f0e0 <LoRaMacHandleNvm+0xe8>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	68ba      	ldr	r2, [r7, #8]
 800f0d4:	f8c3 21e4 	str.w	r2, [r3, #484]	@ 0x1e4
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 800f0d8:	89fb      	ldrh	r3, [r7, #14]
 800f0da:	f043 0310 	orr.w	r3, r3, #16
 800f0de:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800f0e6:	f44f 715e 	mov.w	r1, #888	@ 0x378
 800f0ea:	4618      	mov	r0, r3
 800f0ec:	f007 ff76 	bl	8016fdc <Crc32>
 800f0f0:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	f8d3 3560 	ldr.w	r3, [r3, #1376]	@ 0x560
 800f0f8:	68ba      	ldr	r2, [r7, #8]
 800f0fa:	429a      	cmp	r2, r3
 800f0fc:	d007      	beq.n	800f10e <LoRaMacHandleNvm+0x116>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	68ba      	ldr	r2, [r7, #8]
 800f102:	f8c3 2560 	str.w	r2, [r3, #1376]	@ 0x560
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 800f106:	89fb      	ldrh	r3, [r7, #14]
 800f108:	f043 0320 	orr.w	r3, r3, #32
 800f10c:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	f203 5364 	addw	r3, r3, #1380	@ 0x564
 800f114:	2114      	movs	r1, #20
 800f116:	4618      	mov	r0, r3
 800f118:	f007 ff60 	bl	8016fdc <Crc32>
 800f11c:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	f8d3 3578 	ldr.w	r3, [r3, #1400]	@ 0x578
 800f124:	68ba      	ldr	r2, [r7, #8]
 800f126:	429a      	cmp	r2, r3
 800f128:	d007      	beq.n	800f13a <LoRaMacHandleNvm+0x142>
    {
        nvmData->ClassB.Crc32 = crc;
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	68ba      	ldr	r2, [r7, #8]
 800f12e:	f8c3 2578 	str.w	r2, [r3, #1400]	@ 0x578
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 800f132:	89fb      	ldrh	r3, [r7, #14]
 800f134:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f138:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 800f13a:	89fb      	ldrh	r3, [r7, #14]
 800f13c:	4618      	mov	r0, r3
 800f13e:	f002 f819 	bl	8011174 <CallNvmDataChangeCallback>
 800f142:	e000      	b.n	800f146 <LoRaMacHandleNvm+0x14e>
        return;
 800f144:	bf00      	nop
}
 800f146:	3710      	adds	r7, #16
 800f148:	46bd      	mov	sp, r7
 800f14a:	bd80      	pop	{r7, pc}
 800f14c:	200008d8 	.word	0x200008d8

0800f150 <LoRaMacHandleResponseTimeout>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool LoRaMacHandleResponseTimeout( TimerTime_t timeoutInMs, TimerTime_t startTimeInMs )
{
 800f150:	b580      	push	{r7, lr}
 800f152:	b084      	sub	sp, #16
 800f154:	af00      	add	r7, sp, #0
 800f156:	6078      	str	r0, [r7, #4]
 800f158:	6039      	str	r1, [r7, #0]
    if( startTimeInMs != 0 )
 800f15a:	683b      	ldr	r3, [r7, #0]
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d00d      	beq.n	800f17c <LoRaMacHandleResponseTimeout+0x2c>
    {
        TimerTime_t elapsedTime = TimerGetElapsedTime( startTimeInMs );
 800f160:	6838      	ldr	r0, [r7, #0]
 800f162:	f00c f95f 	bl	801b424 <UTIL_TIMER_GetElapsedTime>
 800f166:	60f8      	str	r0, [r7, #12]
        if( elapsedTime > timeoutInMs )
 800f168:	68fa      	ldr	r2, [r7, #12]
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	429a      	cmp	r2, r3
 800f16e:	d905      	bls.n	800f17c <LoRaMacHandleResponseTimeout+0x2c>
        {
            Nvm.MacGroup1.SrvAckRequested = false;
 800f170:	4b05      	ldr	r3, [pc, #20]	@ (800f188 <LoRaMacHandleResponseTimeout+0x38>)
 800f172:	2200      	movs	r2, #0
 800f174:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
            return true;
 800f178:	2301      	movs	r3, #1
 800f17a:	e000      	b.n	800f17e <LoRaMacHandleResponseTimeout+0x2e>
        }
    }
    return false;
 800f17c:	2300      	movs	r3, #0
}
 800f17e:	4618      	mov	r0, r3
 800f180:	3710      	adds	r7, #16
 800f182:	46bd      	mov	sp, r7
 800f184:	bd80      	pop	{r7, pc}
 800f186:	bf00      	nop
 800f188:	20000df8 	.word	0x20000df8

0800f18c <LoRaMacProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacProcess( void )
{
 800f18c:	b580      	push	{r7, lr}
 800f18e:	b082      	sub	sp, #8
 800f190:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 800f192:	2300      	movs	r3, #0
 800f194:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 800f196:	f7ff fd11 	bl	800ebbc <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800f19a:	f003 fd90 	bl	8012cbe <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800f19e:	4b26      	ldr	r3, [pc, #152]	@ (800f238 <LoRaMacProcess+0xac>)
 800f1a0:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800f1a4:	f003 0320 	and.w	r3, r3, #32
 800f1a8:	b2db      	uxtb	r3, r3
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d025      	beq.n	800f1fa <LoRaMacProcess+0x6e>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800f1ae:	2000      	movs	r0, #0
 800f1b0:	f7ff fd6c 	bl	800ec8c <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800f1b4:	f7ff ff00 	bl	800efb8 <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 800f1b8:	f001 fffa 	bl	80111b0 <IsRequestPending>
 800f1bc:	4603      	mov	r3, r0
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d006      	beq.n	800f1d0 <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800f1c2:	f7ff feb3 	bl	800ef2c <LoRaMacCheckForBeaconAcquisition>
 800f1c6:	4603      	mov	r3, r0
 800f1c8:	461a      	mov	r2, r3
 800f1ca:	79fb      	ldrb	r3, [r7, #7]
 800f1cc:	4313      	orrs	r3, r2
 800f1ce:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 800f1d0:	79fb      	ldrb	r3, [r7, #7]
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d103      	bne.n	800f1de <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 800f1d6:	f7ff fe73 	bl	800eec0 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 800f1da:	f7ff fe15 	bl	800ee08 <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 800f1de:	f7ff fd65 	bl	800ecac <LoRaMacHandleRequestEvents>
        LoRaMacHandleScheduleUplinkEvent( );
 800f1e2:	f7ff fdc5 	bl	800ed70 <LoRaMacHandleScheduleUplinkEvent>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800f1e6:	2001      	movs	r0, #1
 800f1e8:	f7ff fd50 	bl	800ec8c <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800f1ec:	4a12      	ldr	r2, [pc, #72]	@ (800f238 <LoRaMacProcess+0xac>)
 800f1ee:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800f1f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f1f6:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
    }
    LoRaMacHandleIndicationEvents( );
 800f1fa:	f7ff fdcd 	bl	800ed98 <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800f1fe:	4b0e      	ldr	r3, [pc, #56]	@ (800f238 <LoRaMacProcess+0xac>)
 800f200:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800f204:	2b02      	cmp	r3, #2
 800f206:	d101      	bne.n	800f20c <LoRaMacProcess+0x80>
    {
        OpenContinuousRxCWindow( );
 800f208:	f001 fbee 	bl	80109e8 <OpenContinuousRxCWindow>
    }
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 800f20c:	4b0a      	ldr	r3, [pc, #40]	@ (800f238 <LoRaMacProcess+0xac>)
 800f20e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800f212:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f216:	b2db      	uxtb	r3, r3
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d009      	beq.n	800f230 <LoRaMacProcess+0xa4>
    {
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 800f21c:	4a06      	ldr	r2, [pc, #24]	@ (800f238 <LoRaMacProcess+0xac>)
 800f21e:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800f222:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f226:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
        LoRaMacHandleNvm( &Nvm );
 800f22a:	4804      	ldr	r0, [pc, #16]	@ (800f23c <LoRaMacProcess+0xb0>)
 800f22c:	f7ff fee4 	bl	800eff8 <LoRaMacHandleNvm>
    }
}
 800f230:	bf00      	nop
 800f232:	3708      	adds	r7, #8
 800f234:	46bd      	mov	sp, r7
 800f236:	bd80      	pop	{r7, pc}
 800f238:	200008d8 	.word	0x200008d8
 800f23c:	20000df8 	.word	0x20000df8

0800f240 <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 800f240:	b580      	push	{r7, lr}
 800f242:	b082      	sub	sp, #8
 800f244:	af00      	add	r7, sp, #0
 800f246:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 800f248:	481e      	ldr	r0, [pc, #120]	@ (800f2c4 <OnTxDelayedTimerEvent+0x84>)
 800f24a:	f00b ffbf 	bl	801b1cc <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800f24e:	4b1e      	ldr	r3, [pc, #120]	@ (800f2c8 <OnTxDelayedTimerEvent+0x88>)
 800f250:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f254:	f023 0320 	bic.w	r3, r3, #32
 800f258:	4a1b      	ldr	r2, [pc, #108]	@ (800f2c8 <OnTxDelayedTimerEvent+0x88>)
 800f25a:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 800f25e:	4b1b      	ldr	r3, [pc, #108]	@ (800f2cc <OnTxDelayedTimerEvent+0x8c>)
 800f260:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f264:	4a18      	ldr	r2, [pc, #96]	@ (800f2c8 <OnTxDelayedTimerEvent+0x88>)
 800f266:	f8d2 249c 	ldr.w	r2, [r2, #1180]	@ 0x49c
 800f26a:	4611      	mov	r1, r2
 800f26c:	4618      	mov	r0, r3
 800f26e:	f7ff ff6f 	bl	800f150 <LoRaMacHandleResponseTimeout>
 800f272:	4603      	mov	r3, r0
 800f274:	2b00      	cmp	r3, #0
 800f276:	d11e      	bne.n	800f2b6 <OnTxDelayedTimerEvent+0x76>
        return;
    }
#endif /* LORAMAC_VERSION */

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 800f278:	2001      	movs	r0, #1
 800f27a:	f001 f93b 	bl	80104f4 <ScheduleTx>
 800f27e:	4603      	mov	r3, r0
 800f280:	2b00      	cmp	r3, #0
 800f282:	d01a      	beq.n	800f2ba <OnTxDelayedTimerEvent+0x7a>
 800f284:	2b0b      	cmp	r3, #11
 800f286:	d018      	beq.n	800f2ba <OnTxDelayedTimerEvent+0x7a>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800f288:	4b10      	ldr	r3, [pc, #64]	@ (800f2cc <OnTxDelayedTimerEvent+0x8c>)
 800f28a:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800f28e:	b2da      	uxtb	r2, r3
 800f290:	4b0d      	ldr	r3, [pc, #52]	@ (800f2c8 <OnTxDelayedTimerEvent+0x88>)
 800f292:	f883 2446 	strb.w	r2, [r3, #1094]	@ 0x446
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 800f296:	4b0c      	ldr	r3, [pc, #48]	@ (800f2c8 <OnTxDelayedTimerEvent+0x88>)
 800f298:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 800f29c:	4b0a      	ldr	r3, [pc, #40]	@ (800f2c8 <OnTxDelayedTimerEvent+0x88>)
 800f29e:	f883 2449 	strb.w	r2, [r3, #1097]	@ 0x449
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800f2a2:	4b09      	ldr	r3, [pc, #36]	@ (800f2c8 <OnTxDelayedTimerEvent+0x88>)
 800f2a4:	2209      	movs	r2, #9
 800f2a6:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800f2aa:	2009      	movs	r0, #9
 800f2ac:	f004 f926 	bl	80134fc <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800f2b0:	f001 ff24 	bl	80110fc <StopRetransmission>
            break;
 800f2b4:	e002      	b.n	800f2bc <OnTxDelayedTimerEvent+0x7c>
        return;
 800f2b6:	bf00      	nop
 800f2b8:	e000      	b.n	800f2bc <OnTxDelayedTimerEvent+0x7c>
            break;
 800f2ba:	bf00      	nop
        }
    }
}
 800f2bc:	3708      	adds	r7, #8
 800f2be:	46bd      	mov	sp, r7
 800f2c0:	bd80      	pop	{r7, pc}
 800f2c2:	bf00      	nop
 800f2c4:	20000c40 	.word	0x20000c40
 800f2c8:	200008d8 	.word	0x200008d8
 800f2cc:	20000df8 	.word	0x20000df8

0800f2d0 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 800f2d0:	b580      	push	{r7, lr}
 800f2d2:	b082      	sub	sp, #8
 800f2d4:	af00      	add	r7, sp, #0
 800f2d6:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800f2d8:	4b17      	ldr	r3, [pc, #92]	@ (800f338 <OnRxWindow1TimerEvent+0x68>)
 800f2da:	f893 241f 	ldrb.w	r2, [r3, #1055]	@ 0x41f
 800f2de:	4b16      	ldr	r3, [pc, #88]	@ (800f338 <OnRxWindow1TimerEvent+0x68>)
 800f2e0:	f883 23b8 	strb.w	r2, [r3, #952]	@ 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 800f2e4:	4b15      	ldr	r3, [pc, #84]	@ (800f33c <OnRxWindow1TimerEvent+0x6c>)
 800f2e6:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 800f2ea:	b25a      	sxtb	r2, r3
 800f2ec:	4b12      	ldr	r3, [pc, #72]	@ (800f338 <OnRxWindow1TimerEvent+0x68>)
 800f2ee:	f883 23bb 	strb.w	r2, [r3, #955]	@ 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800f2f2:	4b12      	ldr	r3, [pc, #72]	@ (800f33c <OnRxWindow1TimerEvent+0x6c>)
 800f2f4:	f893 2075 	ldrb.w	r2, [r3, #117]	@ 0x75
 800f2f8:	4b0f      	ldr	r3, [pc, #60]	@ (800f338 <OnRxWindow1TimerEvent+0x68>)
 800f2fa:	f883 23c8 	strb.w	r2, [r3, #968]	@ 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800f2fe:	4b0f      	ldr	r3, [pc, #60]	@ (800f33c <OnRxWindow1TimerEvent+0x6c>)
 800f300:	f893 2080 	ldrb.w	r2, [r3, #128]	@ 0x80
 800f304:	4b0c      	ldr	r3, [pc, #48]	@ (800f338 <OnRxWindow1TimerEvent+0x68>)
 800f306:	f883 23c9 	strb.w	r2, [r3, #969]	@ 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 800f30a:	4b0b      	ldr	r3, [pc, #44]	@ (800f338 <OnRxWindow1TimerEvent+0x68>)
 800f30c:	2200      	movs	r2, #0
 800f30e:	f883 23ca 	strb.w	r2, [r3, #970]	@ 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 800f312:	4b09      	ldr	r3, [pc, #36]	@ (800f338 <OnRxWindow1TimerEvent+0x68>)
 800f314:	2200      	movs	r2, #0
 800f316:	f883 23cb 	strb.w	r2, [r3, #971]	@ 0x3cb
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800f31a:	4b08      	ldr	r3, [pc, #32]	@ (800f33c <OnRxWindow1TimerEvent+0x6c>)
 800f31c:	f893 211c 	ldrb.w	r2, [r3, #284]	@ 0x11c
 800f320:	4b05      	ldr	r3, [pc, #20]	@ (800f338 <OnRxWindow1TimerEvent+0x68>)
 800f322:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800f326:	4906      	ldr	r1, [pc, #24]	@ (800f340 <OnRxWindow1TimerEvent+0x70>)
 800f328:	4806      	ldr	r0, [pc, #24]	@ (800f344 <OnRxWindow1TimerEvent+0x74>)
 800f32a:	f001 fb29 	bl	8010980 <RxWindowSetup>
}
 800f32e:	bf00      	nop
 800f330:	3708      	adds	r7, #8
 800f332:	46bd      	mov	sp, r7
 800f334:	bd80      	pop	{r7, pc}
 800f336:	bf00      	nop
 800f338:	200008d8 	.word	0x200008d8
 800f33c:	20000df8 	.word	0x20000df8
 800f340:	20000c90 	.word	0x20000c90
 800f344:	20000c58 	.word	0x20000c58

0800f348 <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 800f348:	b580      	push	{r7, lr}
 800f34a:	b082      	sub	sp, #8
 800f34c:	af00      	add	r7, sp, #0
 800f34e:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800f350:	4b19      	ldr	r3, [pc, #100]	@ (800f3b8 <OnRxWindow2TimerEvent+0x70>)
 800f352:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800f356:	2b00      	cmp	r3, #0
 800f358:	d029      	beq.n	800f3ae <OnRxWindow2TimerEvent+0x66>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800f35a:	4b17      	ldr	r3, [pc, #92]	@ (800f3b8 <OnRxWindow2TimerEvent+0x70>)
 800f35c:	f893 241f 	ldrb.w	r2, [r3, #1055]	@ 0x41f
 800f360:	4b15      	ldr	r3, [pc, #84]	@ (800f3b8 <OnRxWindow2TimerEvent+0x70>)
 800f362:	f883 23d0 	strb.w	r2, [r3, #976]	@ 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800f366:	4b15      	ldr	r3, [pc, #84]	@ (800f3bc <OnRxWindow2TimerEvent+0x74>)
 800f368:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f36a:	4a13      	ldr	r2, [pc, #76]	@ (800f3b8 <OnRxWindow2TimerEvent+0x70>)
 800f36c:	f8c2 33d4 	str.w	r3, [r2, #980]	@ 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800f370:	4b12      	ldr	r3, [pc, #72]	@ (800f3bc <OnRxWindow2TimerEvent+0x74>)
 800f372:	f893 2075 	ldrb.w	r2, [r3, #117]	@ 0x75
 800f376:	4b10      	ldr	r3, [pc, #64]	@ (800f3b8 <OnRxWindow2TimerEvent+0x70>)
 800f378:	f883 23e0 	strb.w	r2, [r3, #992]	@ 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800f37c:	4b0f      	ldr	r3, [pc, #60]	@ (800f3bc <OnRxWindow2TimerEvent+0x74>)
 800f37e:	f893 2080 	ldrb.w	r2, [r3, #128]	@ 0x80
 800f382:	4b0d      	ldr	r3, [pc, #52]	@ (800f3b8 <OnRxWindow2TimerEvent+0x70>)
 800f384:	f883 23e1 	strb.w	r2, [r3, #993]	@ 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 800f388:	4b0b      	ldr	r3, [pc, #44]	@ (800f3b8 <OnRxWindow2TimerEvent+0x70>)
 800f38a:	2200      	movs	r2, #0
 800f38c:	f883 23e2 	strb.w	r2, [r3, #994]	@ 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800f390:	4b09      	ldr	r3, [pc, #36]	@ (800f3b8 <OnRxWindow2TimerEvent+0x70>)
 800f392:	2201      	movs	r2, #1
 800f394:	f883 23e3 	strb.w	r2, [r3, #995]	@ 0x3e3
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800f398:	4b08      	ldr	r3, [pc, #32]	@ (800f3bc <OnRxWindow2TimerEvent+0x74>)
 800f39a:	f893 211c 	ldrb.w	r2, [r3, #284]	@ 0x11c
 800f39e:	4b06      	ldr	r3, [pc, #24]	@ (800f3b8 <OnRxWindow2TimerEvent+0x70>)
 800f3a0:	f883 23e4 	strb.w	r2, [r3, #996]	@ 0x3e4
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800f3a4:	4906      	ldr	r1, [pc, #24]	@ (800f3c0 <OnRxWindow2TimerEvent+0x78>)
 800f3a6:	4807      	ldr	r0, [pc, #28]	@ (800f3c4 <OnRxWindow2TimerEvent+0x7c>)
 800f3a8:	f001 faea 	bl	8010980 <RxWindowSetup>
 800f3ac:	e000      	b.n	800f3b0 <OnRxWindow2TimerEvent+0x68>
        return;
 800f3ae:	bf00      	nop
}
 800f3b0:	3708      	adds	r7, #8
 800f3b2:	46bd      	mov	sp, r7
 800f3b4:	bd80      	pop	{r7, pc}
 800f3b6:	bf00      	nop
 800f3b8:	200008d8 	.word	0x200008d8
 800f3bc:	20000df8 	.word	0x20000df8
 800f3c0:	20000ca8 	.word	0x20000ca8
 800f3c4:	20000c70 	.word	0x20000c70

0800f3c8 <OnRetransmitTimeoutTimerEvent>:

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
}
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static void OnRetransmitTimeoutTimerEvent( void* context )
{
 800f3c8:	b580      	push	{r7, lr}
 800f3ca:	b082      	sub	sp, #8
 800f3cc:	af00      	add	r7, sp, #0
 800f3ce:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 800f3d0:	480f      	ldr	r0, [pc, #60]	@ (800f410 <OnRetransmitTimeoutTimerEvent+0x48>)
 800f3d2:	f00b fefb 	bl	801b1cc <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 800f3d6:	4b0f      	ldr	r3, [pc, #60]	@ (800f414 <OnRetransmitTimeoutTimerEvent+0x4c>)
 800f3d8:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d003      	beq.n	800f3e8 <OnRetransmitTimeoutTimerEvent+0x20>
    {
        MacCtx.RetransmitTimeoutRetry = true;
 800f3e0:	4b0c      	ldr	r3, [pc, #48]	@ (800f414 <OnRetransmitTimeoutTimerEvent+0x4c>)
 800f3e2:	2201      	movs	r2, #1
 800f3e4:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
    }
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800f3e8:	4b0a      	ldr	r3, [pc, #40]	@ (800f414 <OnRetransmitTimeoutTimerEvent+0x4c>)
 800f3ea:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d00a      	beq.n	800f408 <OnRetransmitTimeoutTimerEvent+0x40>
 800f3f2:	4b08      	ldr	r3, [pc, #32]	@ (800f414 <OnRetransmitTimeoutTimerEvent+0x4c>)
 800f3f4:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800f3f8:	691b      	ldr	r3, [r3, #16]
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d004      	beq.n	800f408 <OnRetransmitTimeoutTimerEvent+0x40>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800f3fe:	4b05      	ldr	r3, [pc, #20]	@ (800f414 <OnRetransmitTimeoutTimerEvent+0x4c>)
 800f400:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800f404:	691b      	ldr	r3, [r3, #16]
 800f406:	4798      	blx	r3
    }
}
 800f408:	bf00      	nop
 800f40a:	3708      	adds	r7, #8
 800f40c:	46bd      	mov	sp, r7
 800f40e:	bd80      	pop	{r7, pc}
 800f410:	20000cdc 	.word	0x20000cdc
 800f414:	200008d8 	.word	0x200008d8

0800f418 <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 800f418:	b580      	push	{r7, lr}
 800f41a:	b084      	sub	sp, #16
 800f41c:	af00      	add	r7, sp, #0
 800f41e:	60ba      	str	r2, [r7, #8]
 800f420:	607b      	str	r3, [r7, #4]
 800f422:	4603      	mov	r3, r0
 800f424:	73fb      	strb	r3, [r7, #15]
 800f426:	460b      	mov	r3, r1
 800f428:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 800f42a:	68bb      	ldr	r3, [r7, #8]
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d005      	beq.n	800f43c <GetFCntDown+0x24>
 800f430:	69bb      	ldr	r3, [r7, #24]
 800f432:	2b00      	cmp	r3, #0
 800f434:	d002      	beq.n	800f43c <GetFCntDown+0x24>
 800f436:	69fb      	ldr	r3, [r7, #28]
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d101      	bne.n	800f440 <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800f43c:	2309      	movs	r3, #9
 800f43e:	e028      	b.n	800f492 <GetFCntDown+0x7a>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 800f440:	7bfb      	ldrb	r3, [r7, #15]
 800f442:	2b00      	cmp	r3, #0
 800f444:	d016      	beq.n	800f474 <GetFCntDown+0x5c>
 800f446:	2b01      	cmp	r3, #1
 800f448:	d118      	bne.n	800f47c <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 800f44a:	79bb      	ldrb	r3, [r7, #6]
 800f44c:	2b01      	cmp	r3, #1
 800f44e:	d10d      	bne.n	800f46c <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 800f450:	7bbb      	ldrb	r3, [r7, #14]
 800f452:	2b00      	cmp	r3, #0
 800f454:	d002      	beq.n	800f45c <GetFCntDown+0x44>
 800f456:	7bbb      	ldrb	r3, [r7, #14]
 800f458:	2b03      	cmp	r3, #3
 800f45a:	d103      	bne.n	800f464 <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 800f45c:	69bb      	ldr	r3, [r7, #24]
 800f45e:	2202      	movs	r2, #2
 800f460:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 800f462:	e00d      	b.n	800f480 <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 800f464:	69bb      	ldr	r3, [r7, #24]
 800f466:	2201      	movs	r2, #1
 800f468:	701a      	strb	r2, [r3, #0]
            break;
 800f46a:	e009      	b.n	800f480 <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 800f46c:	69bb      	ldr	r3, [r7, #24]
 800f46e:	2203      	movs	r2, #3
 800f470:	701a      	strb	r2, [r3, #0]
            break;
 800f472:	e005      	b.n	800f480 <GetFCntDown+0x68>
        /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 800f474:	69bb      	ldr	r3, [r7, #24]
 800f476:	2204      	movs	r2, #4
 800f478:	701a      	strb	r2, [r3, #0]
            break;
 800f47a:	e001      	b.n	800f480 <GetFCntDown+0x68>
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        /* ST_WORKAROUND_END */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 800f47c:	2305      	movs	r3, #5
 800f47e:	e008      	b.n	800f492 <GetFCntDown+0x7a>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
 800f480:	69bb      	ldr	r3, [r7, #24]
 800f482:	7818      	ldrb	r0, [r3, #0]
 800f484:	68bb      	ldr	r3, [r7, #8]
 800f486:	89db      	ldrh	r3, [r3, #14]
 800f488:	69fa      	ldr	r2, [r7, #28]
 800f48a:	4619      	mov	r1, r3
 800f48c:	f004 fc5c 	bl	8013d48 <LoRaMacCryptoGetFCntDown>
 800f490:	4603      	mov	r3, r0
}
 800f492:	4618      	mov	r0, r3
 800f494:	3710      	adds	r7, #16
 800f496:	46bd      	mov	sp, r7
 800f498:	bd80      	pop	{r7, pc}
	...

0800f49c <SwitchClass>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 800f49c:	b5b0      	push	{r4, r5, r7, lr}
 800f49e:	b084      	sub	sp, #16
 800f4a0:	af00      	add	r7, sp, #0
 800f4a2:	4603      	mov	r3, r0
 800f4a4:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f4a6:	2303      	movs	r3, #3
 800f4a8:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 800f4aa:	4b62      	ldr	r3, [pc, #392]	@ (800f634 <SwitchClass+0x198>)
 800f4ac:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800f4b0:	2b02      	cmp	r3, #2
 800f4b2:	f000 80a7 	beq.w	800f604 <SwitchClass+0x168>
 800f4b6:	2b02      	cmp	r3, #2
 800f4b8:	f300 80b6 	bgt.w	800f628 <SwitchClass+0x18c>
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d003      	beq.n	800f4c8 <SwitchClass+0x2c>
 800f4c0:	2b01      	cmp	r3, #1
 800f4c2:	f000 8091 	beq.w	800f5e8 <SwitchClass+0x14c>
 800f4c6:	e0af      	b.n	800f628 <SwitchClass+0x18c>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 800f4c8:	79fb      	ldrb	r3, [r7, #7]
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d107      	bne.n	800f4de <SwitchClass+0x42>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800f4ce:	4b59      	ldr	r3, [pc, #356]	@ (800f634 <SwitchClass+0x198>)
 800f4d0:	4a58      	ldr	r2, [pc, #352]	@ (800f634 <SwitchClass+0x198>)
 800f4d2:	336c      	adds	r3, #108	@ 0x6c
 800f4d4:	3264      	adds	r2, #100	@ 0x64
 800f4d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f4da:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            if( deviceClass == CLASS_B )
 800f4de:	79fb      	ldrb	r3, [r7, #7]
 800f4e0:	2b01      	cmp	r3, #1
 800f4e2:	d10c      	bne.n	800f4fe <SwitchClass+0x62>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 800f4e4:	79fb      	ldrb	r3, [r7, #7]
 800f4e6:	4618      	mov	r0, r3
 800f4e8:	f003 fb80 	bl	8012bec <LoRaMacClassBSwitchClass>
 800f4ec:	4603      	mov	r3, r0
 800f4ee:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 800f4f0:	7bfb      	ldrb	r3, [r7, #15]
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d103      	bne.n	800f4fe <SwitchClass+0x62>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 800f4f6:	4a4f      	ldr	r2, [pc, #316]	@ (800f634 <SwitchClass+0x198>)
 800f4f8:	79fb      	ldrb	r3, [r7, #7]
 800f4fa:	f882 3104 	strb.w	r3, [r2, #260]	@ 0x104
                }
            }

            if( deviceClass == CLASS_C )
 800f4fe:	79fb      	ldrb	r3, [r7, #7]
 800f500:	2b02      	cmp	r3, #2
 800f502:	f040 808c 	bne.w	800f61e <SwitchClass+0x182>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800f506:	4a4b      	ldr	r2, [pc, #300]	@ (800f634 <SwitchClass+0x198>)
 800f508:	79fb      	ldrb	r3, [r7, #7]
 800f50a:	f882 3104 	strb.w	r3, [r2, #260]	@ 0x104

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800f50e:	4a4a      	ldr	r2, [pc, #296]	@ (800f638 <SwitchClass+0x19c>)
 800f510:	4b49      	ldr	r3, [pc, #292]	@ (800f638 <SwitchClass+0x19c>)
 800f512:	f502 747a 	add.w	r4, r2, #1000	@ 0x3e8
 800f516:	f503 7574 	add.w	r5, r3, #976	@ 0x3d0
 800f51a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f51c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f51e:	e895 0003 	ldmia.w	r5, {r0, r1}
 800f522:	e884 0003 	stmia.w	r4, {r0, r1}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800f526:	4b44      	ldr	r3, [pc, #272]	@ (800f638 <SwitchClass+0x19c>)
 800f528:	2202      	movs	r2, #2
 800f52a:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800f52e:	2300      	movs	r3, #0
 800f530:	73bb      	strb	r3, [r7, #14]
 800f532:	e049      	b.n	800f5c8 <SwitchClass+0x12c>
                {
                    if( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true )
 800f534:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f538:	4a3e      	ldr	r2, [pc, #248]	@ (800f634 <SwitchClass+0x198>)
 800f53a:	212c      	movs	r1, #44	@ 0x2c
 800f53c:	fb01 f303 	mul.w	r3, r1, r3
 800f540:	4413      	add	r3, r2
 800f542:	33da      	adds	r3, #218	@ 0xda
 800f544:	781b      	ldrb	r3, [r3, #0]
 800f546:	2b00      	cmp	r3, #0
 800f548:	d038      	beq.n	800f5bc <SwitchClass+0x120>
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 800f54a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f54e:	4a39      	ldr	r2, [pc, #228]	@ (800f634 <SwitchClass+0x198>)
 800f550:	212c      	movs	r1, #44	@ 0x2c
 800f552:	fb01 f303 	mul.w	r3, r1, r3
 800f556:	4413      	add	r3, r2
 800f558:	33f0      	adds	r3, #240	@ 0xf0
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	4a35      	ldr	r2, [pc, #212]	@ (800f634 <SwitchClass+0x198>)
 800f55e:	66d3      	str	r3, [r2, #108]	@ 0x6c
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 800f560:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f564:	4a33      	ldr	r2, [pc, #204]	@ (800f634 <SwitchClass+0x198>)
 800f566:	212c      	movs	r1, #44	@ 0x2c
 800f568:	fb01 f303 	mul.w	r3, r1, r3
 800f56c:	4413      	add	r3, r2
 800f56e:	33f4      	adds	r3, #244	@ 0xf4
 800f570:	f993 3000 	ldrsb.w	r3, [r3]
 800f574:	b2da      	uxtb	r2, r3
 800f576:	4b2f      	ldr	r3, [pc, #188]	@ (800f634 <SwitchClass+0x198>)
 800f578:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800f57c:	4b2e      	ldr	r3, [pc, #184]	@ (800f638 <SwitchClass+0x19c>)
 800f57e:	f893 241f 	ldrb.w	r2, [r3, #1055]	@ 0x41f
 800f582:	4b2d      	ldr	r3, [pc, #180]	@ (800f638 <SwitchClass+0x19c>)
 800f584:	f883 23e8 	strb.w	r2, [r3, #1000]	@ 0x3e8
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800f588:	4b2a      	ldr	r3, [pc, #168]	@ (800f634 <SwitchClass+0x198>)
 800f58a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f58c:	4a2a      	ldr	r2, [pc, #168]	@ (800f638 <SwitchClass+0x19c>)
 800f58e:	f8c2 33ec 	str.w	r3, [r2, #1004]	@ 0x3ec
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800f592:	4b28      	ldr	r3, [pc, #160]	@ (800f634 <SwitchClass+0x198>)
 800f594:	f893 2075 	ldrb.w	r2, [r3, #117]	@ 0x75
 800f598:	4b27      	ldr	r3, [pc, #156]	@ (800f638 <SwitchClass+0x19c>)
 800f59a:	f883 23f8 	strb.w	r2, [r3, #1016]	@ 0x3f8
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800f59e:	4b25      	ldr	r3, [pc, #148]	@ (800f634 <SwitchClass+0x198>)
 800f5a0:	f893 2080 	ldrb.w	r2, [r3, #128]	@ 0x80
 800f5a4:	4b24      	ldr	r3, [pc, #144]	@ (800f638 <SwitchClass+0x19c>)
 800f5a6:	f883 23f9 	strb.w	r2, [r3, #1017]	@ 0x3f9
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800f5aa:	4b23      	ldr	r3, [pc, #140]	@ (800f638 <SwitchClass+0x19c>)
 800f5ac:	2203      	movs	r2, #3
 800f5ae:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800f5b2:	4b21      	ldr	r3, [pc, #132]	@ (800f638 <SwitchClass+0x19c>)
 800f5b4:	2201      	movs	r2, #1
 800f5b6:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa
                        break;
 800f5ba:	e009      	b.n	800f5d0 <SwitchClass+0x134>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800f5bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f5c0:	b2db      	uxtb	r3, r3
 800f5c2:	3301      	adds	r3, #1
 800f5c4:	b2db      	uxtb	r3, r3
 800f5c6:	73bb      	strb	r3, [r7, #14]
 800f5c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	ddb1      	ble.n	800f534 <SwitchClass+0x98>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 800f5d0:	4b19      	ldr	r3, [pc, #100]	@ (800f638 <SwitchClass+0x19c>)
 800f5d2:	2200      	movs	r2, #0
 800f5d4:	f883 241e 	strb.w	r2, [r3, #1054]	@ 0x41e
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 800f5d8:	4b18      	ldr	r3, [pc, #96]	@ (800f63c <SwitchClass+0x1a0>)
 800f5da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f5dc:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 800f5de:	f001 fa03 	bl	80109e8 <OpenContinuousRxCWindow>

                status = LORAMAC_STATUS_OK;
 800f5e2:	2300      	movs	r3, #0
 800f5e4:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800f5e6:	e01a      	b.n	800f61e <SwitchClass+0x182>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 800f5e8:	79fb      	ldrb	r3, [r7, #7]
 800f5ea:	4618      	mov	r0, r3
 800f5ec:	f003 fafe 	bl	8012bec <LoRaMacClassBSwitchClass>
 800f5f0:	4603      	mov	r3, r0
 800f5f2:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 800f5f4:	7bfb      	ldrb	r3, [r7, #15]
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d113      	bne.n	800f622 <SwitchClass+0x186>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800f5fa:	4a0e      	ldr	r2, [pc, #56]	@ (800f634 <SwitchClass+0x198>)
 800f5fc:	79fb      	ldrb	r3, [r7, #7]
 800f5fe:	f882 3104 	strb.w	r3, [r2, #260]	@ 0x104
            }
            break;
 800f602:	e00e      	b.n	800f622 <SwitchClass+0x186>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 800f604:	79fb      	ldrb	r3, [r7, #7]
 800f606:	2b00      	cmp	r3, #0
 800f608:	d10d      	bne.n	800f626 <SwitchClass+0x18a>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800f60a:	4a0a      	ldr	r2, [pc, #40]	@ (800f634 <SwitchClass+0x198>)
 800f60c:	79fb      	ldrb	r3, [r7, #7]
 800f60e:	f882 3104 	strb.w	r3, [r2, #260]	@ 0x104

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 800f612:	4b0a      	ldr	r3, [pc, #40]	@ (800f63c <SwitchClass+0x1a0>)
 800f614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f616:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 800f618:	2300      	movs	r3, #0
 800f61a:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800f61c:	e003      	b.n	800f626 <SwitchClass+0x18a>
            break;
 800f61e:	bf00      	nop
 800f620:	e002      	b.n	800f628 <SwitchClass+0x18c>
            break;
 800f622:	bf00      	nop
 800f624:	e000      	b.n	800f628 <SwitchClass+0x18c>
            break;
 800f626:	bf00      	nop
        }
    }

    return status;
 800f628:	7bfb      	ldrb	r3, [r7, #15]
}
 800f62a:	4618      	mov	r0, r3
 800f62c:	3710      	adds	r7, #16
 800f62e:	46bd      	mov	sp, r7
 800f630:	bdb0      	pop	{r4, r5, r7, pc}
 800f632:	bf00      	nop
 800f634:	20000df8 	.word	0x20000df8
 800f638:	200008d8 	.word	0x200008d8
 800f63c:	0801f464 	.word	0x0801f464

0800f640 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 800f640:	b580      	push	{r7, lr}
 800f642:	b086      	sub	sp, #24
 800f644:	af00      	add	r7, sp, #0
 800f646:	4603      	mov	r3, r0
 800f648:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800f64a:	4b10      	ldr	r3, [pc, #64]	@ (800f68c <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800f64c:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800f650:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 800f652:	79fb      	ldrb	r3, [r7, #7]
 800f654:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 800f656:	230d      	movs	r3, #13
 800f658:	743b      	strb	r3, [r7, #16]
    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800f65a:	4b0c      	ldr	r3, [pc, #48]	@ (800f68c <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800f65c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800f660:	2b00      	cmp	r3, #0
 800f662:	d001      	beq.n	800f668 <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800f664:	230e      	movs	r3, #14
 800f666:	743b      	strb	r3, [r7, #16]
    }
    /* ST_WORKAROUND_END */
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800f668:	4b08      	ldr	r3, [pc, #32]	@ (800f68c <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800f66a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f66e:	f107 0210 	add.w	r2, r7, #16
 800f672:	4611      	mov	r1, r2
 800f674:	4618      	mov	r0, r3
 800f676:	f005 f9bb 	bl	80149f0 <RegionGetPhyParam>
 800f67a:	4603      	mov	r3, r0
 800f67c:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	b2db      	uxtb	r3, r3
}
 800f682:	4618      	mov	r0, r3
 800f684:	3718      	adds	r7, #24
 800f686:	46bd      	mov	sp, r7
 800f688:	bd80      	pop	{r7, pc}
 800f68a:	bf00      	nop
 800f68c:	20000df8 	.word	0x20000df8

0800f690 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 800f690:	b580      	push	{r7, lr}
 800f692:	b084      	sub	sp, #16
 800f694:	af00      	add	r7, sp, #0
 800f696:	4603      	mov	r3, r0
 800f698:	71fb      	strb	r3, [r7, #7]
 800f69a:	460b      	mov	r3, r1
 800f69c:	71bb      	strb	r3, [r7, #6]
 800f69e:	4613      	mov	r3, r2
 800f6a0:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 800f6a2:	2300      	movs	r3, #0
 800f6a4:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 800f6a6:	2300      	movs	r3, #0
 800f6a8:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800f6aa:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800f6ae:	4618      	mov	r0, r3
 800f6b0:	f7ff ffc6 	bl	800f640 <GetMaxAppPayloadWithoutFOptsLength>
 800f6b4:	4603      	mov	r3, r0
 800f6b6:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 800f6b8:	79fb      	ldrb	r3, [r7, #7]
 800f6ba:	b29a      	uxth	r2, r3
 800f6bc:	797b      	ldrb	r3, [r7, #5]
 800f6be:	b29b      	uxth	r3, r3
 800f6c0:	4413      	add	r3, r2
 800f6c2:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 800f6c4:	89ba      	ldrh	r2, [r7, #12]
 800f6c6:	89fb      	ldrh	r3, [r7, #14]
 800f6c8:	429a      	cmp	r2, r3
 800f6ca:	d804      	bhi.n	800f6d6 <ValidatePayloadLength+0x46>
 800f6cc:	89bb      	ldrh	r3, [r7, #12]
 800f6ce:	2bff      	cmp	r3, #255	@ 0xff
 800f6d0:	d801      	bhi.n	800f6d6 <ValidatePayloadLength+0x46>
    {
        return true;
 800f6d2:	2301      	movs	r3, #1
 800f6d4:	e000      	b.n	800f6d8 <ValidatePayloadLength+0x48>
    }
    return false;
 800f6d6:	2300      	movs	r3, #0
}
 800f6d8:	4618      	mov	r0, r3
 800f6da:	3710      	adds	r7, #16
 800f6dc:	46bd      	mov	sp, r7
 800f6de:	bd80      	pop	{r7, pc}

0800f6e0 <ProcessMacCommands>:
}
*/
/*ST_WORKAROUND_END */

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 800f6e0:	b590      	push	{r4, r7, lr}
 800f6e2:	b0a5      	sub	sp, #148	@ 0x94
 800f6e4:	af02      	add	r7, sp, #8
 800f6e6:	6078      	str	r0, [r7, #4]
 800f6e8:	4608      	mov	r0, r1
 800f6ea:	4611      	mov	r1, r2
 800f6ec:	461a      	mov	r2, r3
 800f6ee:	4603      	mov	r3, r0
 800f6f0:	70fb      	strb	r3, [r7, #3]
 800f6f2:	460b      	mov	r3, r1
 800f6f4:	70bb      	strb	r3, [r7, #2]
 800f6f6:	4613      	mov	r3, r2
 800f6f8:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 800f6fa:	2300      	movs	r3, #0
 800f6fc:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
    bool adrBlockFound = false;
 800f700:	2300      	movs	r3, #0
 800f702:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800f706:	2300      	movs	r3, #0
 800f708:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( ( rxSlot != RX_SLOT_WIN_1 ) && ( rxSlot != RX_SLOT_WIN_2 ) )
 800f70c:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 800f710:	2b00      	cmp	r3, #0
 800f712:	f000 84b9 	beq.w	8010088 <ProcessMacCommands+0x9a8>
 800f716:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 800f71a:	2b01      	cmp	r3, #1
 800f71c:	f040 84ba 	bne.w	8010094 <ProcessMacCommands+0x9b4>
        // Do only parse MAC commands for Class A RX windows
        return;
    }
#endif /* LORAMAC_VERSION */

    while( macIndex < commandsSize )
 800f720:	f000 bcb2 	b.w	8010088 <ProcessMacCommands+0x9a8>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 800f724:	78fb      	ldrb	r3, [r7, #3]
 800f726:	687a      	ldr	r2, [r7, #4]
 800f728:	4413      	add	r3, r2
 800f72a:	781b      	ldrb	r3, [r3, #0]
 800f72c:	4618      	mov	r0, r3
 800f72e:	f003 fd41 	bl	80131b4 <LoRaMacCommandsGetCmdSize>
 800f732:	4603      	mov	r3, r0
 800f734:	461a      	mov	r2, r3
 800f736:	78fb      	ldrb	r3, [r7, #3]
 800f738:	441a      	add	r2, r3
 800f73a:	78bb      	ldrb	r3, [r7, #2]
 800f73c:	429a      	cmp	r2, r3
 800f73e:	f300 84ab 	bgt.w	8010098 <ProcessMacCommands+0x9b8>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 800f742:	78fb      	ldrb	r3, [r7, #3]
 800f744:	1c5a      	adds	r2, r3, #1
 800f746:	70fa      	strb	r2, [r7, #3]
 800f748:	461a      	mov	r2, r3
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	4413      	add	r3, r2
 800f74e:	781b      	ldrb	r3, [r3, #0]
 800f750:	3b02      	subs	r3, #2
 800f752:	2b11      	cmp	r3, #17
 800f754:	f200 84a2 	bhi.w	801009c <ProcessMacCommands+0x9bc>
 800f758:	a201      	add	r2, pc, #4	@ (adr r2, 800f760 <ProcessMacCommands+0x80>)
 800f75a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f75e:	bf00      	nop
 800f760:	0800f7a9 	.word	0x0800f7a9
 800f764:	0800f7eb 	.word	0x0800f7eb
 800f768:	0800f967 	.word	0x0800f967
 800f76c:	0800f9a5 	.word	0x0800f9a5
 800f770:	0800fa9d 	.word	0x0800fa9d
 800f774:	0800faed 	.word	0x0800faed
 800f778:	0800fba9 	.word	0x0800fba9
 800f77c:	0800fbff 	.word	0x0800fbff
 800f780:	0800fce3 	.word	0x0800fce3
 800f784:	0801009d 	.word	0x0801009d
 800f788:	0801009d 	.word	0x0801009d
 800f78c:	0800fd8d 	.word	0x0800fd8d
 800f790:	0801009d 	.word	0x0801009d
 800f794:	0801009d 	.word	0x0801009d
 800f798:	0800fead 	.word	0x0800fead
 800f79c:	0800fee1 	.word	0x0800fee1
 800f7a0:	0800ff71 	.word	0x0800ff71
 800f7a4:	0800ffe9 	.word	0x0800ffe9
        {
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 800f7a8:	2004      	movs	r0, #4
 800f7aa:	f003 fedb 	bl	8013564 <LoRaMacConfirmQueueIsCmdActive>
 800f7ae:	4603      	mov	r3, r0
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	f000 845c 	beq.w	801006e <ProcessMacCommands+0x98e>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 800f7b6:	2104      	movs	r1, #4
 800f7b8:	2000      	movs	r0, #0
 800f7ba:	f003 fe47 	bl	801344c <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 800f7be:	78fb      	ldrb	r3, [r7, #3]
 800f7c0:	1c5a      	adds	r2, r3, #1
 800f7c2:	70fa      	strb	r2, [r7, #3]
 800f7c4:	461a      	mov	r2, r3
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	4413      	add	r3, r2
 800f7ca:	781a      	ldrb	r2, [r3, #0]
 800f7cc:	4bb0      	ldr	r3, [pc, #704]	@ (800fa90 <ProcessMacCommands+0x3b0>)
 800f7ce:	f883 2460 	strb.w	r2, [r3, #1120]	@ 0x460
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 800f7d2:	78fb      	ldrb	r3, [r7, #3]
 800f7d4:	1c5a      	adds	r2, r3, #1
 800f7d6:	70fa      	strb	r2, [r7, #3]
 800f7d8:	461a      	mov	r2, r3
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	4413      	add	r3, r2
 800f7de:	781a      	ldrb	r2, [r3, #0]
 800f7e0:	4bab      	ldr	r3, [pc, #684]	@ (800fa90 <ProcessMacCommands+0x3b0>)
 800f7e2:	f883 2461 	strb.w	r2, [r3, #1121]	@ 0x461
                }
                break;
 800f7e6:	f000 bc42 	b.w	801006e <ProcessMacCommands+0x98e>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 800f7ea:	2300      	movs	r3, #0
 800f7ec:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 800f7f0:	2300      	movs	r3, #0
 800f7f2:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
                uint8_t linkAdrNbRep = 0;
 800f7f6:	2300      	movs	r3, #0
 800f7f8:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 800f7fc:	2300      	movs	r3, #0
 800f7fe:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
                }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                if( adrBlockFound == false )
 800f802:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800f806:	f083 0301 	eor.w	r3, r3, #1
 800f80a:	b2db      	uxtb	r3, r3
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	f000 80a6 	beq.w	800f95e <ProcessMacCommands+0x27e>
                {
                    adrBlockFound = true;
 800f812:	2301      	movs	r3, #1
 800f814:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

                    do
                    {
                        // Fill parameter structure
                        linkAdrReq.Payload = &payload[macIndex - 1];
 800f818:	78fb      	ldrb	r3, [r7, #3]
 800f81a:	3b01      	subs	r3, #1
 800f81c:	687a      	ldr	r2, [r7, #4]
 800f81e:	4413      	add	r3, r2
 800f820:	65fb      	str	r3, [r7, #92]	@ 0x5c
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800f822:	4b9c      	ldr	r3, [pc, #624]	@ (800fa94 <ProcessMacCommands+0x3b4>)
 800f824:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 800f828:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
                        linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800f82c:	4b99      	ldr	r3, [pc, #612]	@ (800fa94 <ProcessMacCommands+0x3b4>)
 800f82e:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800f832:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
                        linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800f836:	4b97      	ldr	r3, [pc, #604]	@ (800fa94 <ProcessMacCommands+0x3b4>)
 800f838:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800f83c:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
                        linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800f840:	4b94      	ldr	r3, [pc, #592]	@ (800fa94 <ProcessMacCommands+0x3b4>)
 800f842:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 800f846:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
                        linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800f84a:	4b92      	ldr	r3, [pc, #584]	@ (800fa94 <ProcessMacCommands+0x3b4>)
 800f84c:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 800f850:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
                        linkAdrReq.Version = Nvm.MacGroup2.Version;
 800f854:	4b8f      	ldr	r3, [pc, #572]	@ (800fa94 <ProcessMacCommands+0x3b4>)
 800f856:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800f85a:	65bb      	str	r3, [r7, #88]	@ 0x58

                        // There is a fundamental difference in reporting the status
                        // of the LinkAdrRequests when ADR is on or off. When ADR is on, every
                        // LinkAdrAns contains the same value. This does not hold when ADR is off,
                        // where every LinkAdrAns requires an individual status.
                        if( Nvm.MacGroup2.AdrCtrlOn == true )
 800f85c:	4b8d      	ldr	r3, [pc, #564]	@ (800fa94 <ProcessMacCommands+0x3b4>)
 800f85e:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 800f862:	2b00      	cmp	r3, #0
 800f864:	d008      	beq.n	800f878 <ProcessMacCommands+0x198>
                        {
                            // When ADR is on, the function RegionLinkAdrReq will take care
                            // about the parsing and interpretation of the LinkAdrRequest block and
                            // it provides one status which shall be applied to every LinkAdrAns
                            linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800f866:	78ba      	ldrb	r2, [r7, #2]
 800f868:	78fb      	ldrb	r3, [r7, #3]
 800f86a:	1ad3      	subs	r3, r2, r3
 800f86c:	b2db      	uxtb	r3, r3
 800f86e:	3301      	adds	r3, #1
 800f870:	b2db      	uxtb	r3, r3
 800f872:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
 800f876:	e002      	b.n	800f87e <ProcessMacCommands+0x19e>
                            // When ADR is off, this function will loop over the individual LinkAdrRequests
                            // and will call RegionLinkAdrReq for each individually, as every request
                            // requires an individual answer.
                            // When ADR is off, the function RegionLinkAdrReq ignores the new values for
                            // ChannelsDatarate, ChannelsTxPower and ChannelsNbTrans.
                            linkAdrReq.PayloadSize = 5;
 800f878:	2305      	movs	r3, #5
 800f87a:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
                        }

                        // Process the ADR requests
                        status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 800f87e:	4b85      	ldr	r3, [pc, #532]	@ (800fa94 <ProcessMacCommands+0x3b4>)
 800f880:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 800f884:	f107 0456 	add.w	r4, r7, #86	@ 0x56
 800f888:	f107 0257 	add.w	r2, r7, #87	@ 0x57
 800f88c:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800f890:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800f894:	9301      	str	r3, [sp, #4]
 800f896:	f107 0355 	add.w	r3, r7, #85	@ 0x55
 800f89a:	9300      	str	r3, [sp, #0]
 800f89c:	4623      	mov	r3, r4
 800f89e:	f005 f964 	bl	8014b6a <RegionLinkAdrReq>
 800f8a2:	4603      	mov	r3, r0
 800f8a4:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
                                                &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                        if( ( status & 0x07 ) == 0x07 )
 800f8a8:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800f8ac:	f003 0307 	and.w	r3, r3, #7
 800f8b0:	2b07      	cmp	r3, #7
 800f8b2:	d119      	bne.n	800f8e8 <ProcessMacCommands+0x208>
                        {
                            // Set the status that the datarate has been increased
                            if( linkAdrDatarate > Nvm.MacGroup1.ChannelsDatarate )
 800f8b4:	4b77      	ldr	r3, [pc, #476]	@ (800fa94 <ProcessMacCommands+0x3b4>)
 800f8b6:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
 800f8ba:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800f8be:	429a      	cmp	r2, r3
 800f8c0:	da03      	bge.n	800f8ca <ProcessMacCommands+0x1ea>
                            {
                                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = true;
 800f8c2:	4b74      	ldr	r3, [pc, #464]	@ (800fa94 <ProcessMacCommands+0x3b4>)
 800f8c4:	2201      	movs	r2, #1
 800f8c6:	f883 2109 	strb.w	r2, [r3, #265]	@ 0x109
                            }
                            Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 800f8ca:	f997 2057 	ldrsb.w	r2, [r7, #87]	@ 0x57
 800f8ce:	4b71      	ldr	r3, [pc, #452]	@ (800fa94 <ProcessMacCommands+0x3b4>)
 800f8d0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                            Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 800f8d4:	f997 2056 	ldrsb.w	r2, [r7, #86]	@ 0x56
 800f8d8:	4b6e      	ldr	r3, [pc, #440]	@ (800fa94 <ProcessMacCommands+0x3b4>)
 800f8da:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                            Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 800f8de:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 800f8e2:	4b6c      	ldr	r3, [pc, #432]	@ (800fa94 <ProcessMacCommands+0x3b4>)
 800f8e4:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
                        }

                        // Add the answers to the buffer
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800f8e8:	2300      	movs	r3, #0
 800f8ea:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 800f8ee:	e00b      	b.n	800f908 <ProcessMacCommands+0x228>
                        {
                            LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 800f8f0:	f107 036b 	add.w	r3, r7, #107	@ 0x6b
 800f8f4:	2201      	movs	r2, #1
 800f8f6:	4619      	mov	r1, r3
 800f8f8:	2003      	movs	r0, #3
 800f8fa:	f003 fb0b 	bl	8012f14 <LoRaMacCommandsAddCmd>
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800f8fe:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800f902:	3301      	adds	r3, #1
 800f904:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 800f908:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800f90c:	4a62      	ldr	r2, [pc, #392]	@ (800fa98 <ProcessMacCommands+0x3b8>)
 800f90e:	fba2 2303 	umull	r2, r3, r2, r3
 800f912:	089b      	lsrs	r3, r3, #2
 800f914:	b2db      	uxtb	r3, r3
 800f916:	f897 2086 	ldrb.w	r2, [r7, #134]	@ 0x86
 800f91a:	429a      	cmp	r2, r3
 800f91c:	d3e8      	bcc.n	800f8f0 <ProcessMacCommands+0x210>
                        }
                        // Update MAC index
                        macIndex += linkAdrNbBytesParsed - 1;
 800f91e:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 800f922:	78fb      	ldrb	r3, [r7, #3]
 800f924:	4413      	add	r3, r2
 800f926:	b2db      	uxtb	r3, r3
 800f928:	3b01      	subs	r3, #1
 800f92a:	70fb      	strb	r3, [r7, #3]

                        // Check to prevent invalid access
                        if( macIndex >= commandsSize )
 800f92c:	78fa      	ldrb	r2, [r7, #3]
 800f92e:	78bb      	ldrb	r3, [r7, #2]
 800f930:	429a      	cmp	r2, r3
 800f932:	d20a      	bcs.n	800f94a <ProcessMacCommands+0x26a>
                            break;

                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 800f934:	78fb      	ldrb	r3, [r7, #3]
 800f936:	1c5a      	adds	r2, r3, #1
 800f938:	70fa      	strb	r2, [r7, #3]
 800f93a:	461a      	mov	r2, r3
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	4413      	add	r3, r2
 800f940:	781b      	ldrb	r3, [r3, #0]
 800f942:	2b03      	cmp	r3, #3
 800f944:	f43f af68 	beq.w	800f818 <ProcessMacCommands+0x138>
 800f948:	e000      	b.n	800f94c <ProcessMacCommands+0x26c>
                            break;
 800f94a:	bf00      	nop

                    if( macIndex < commandsSize )
 800f94c:	78fa      	ldrb	r2, [r7, #3]
 800f94e:	78bb      	ldrb	r3, [r7, #2]
 800f950:	429a      	cmp	r2, r3
 800f952:	f080 838e 	bcs.w	8010072 <ProcessMacCommands+0x992>
                    {
                        // Decrease the index such that it points to the next MAC command
                        macIndex--;
 800f956:	78fb      	ldrb	r3, [r7, #3]
 800f958:	3b01      	subs	r3, #1
 800f95a:	70fb      	strb	r3, [r7, #3]
                {
                    // Increase the index by the MAC command size (without command)
                    macIndex += 4;
                }
#endif /* LORAMAC_VERSION */
                break;
 800f95c:	e389      	b.n	8010072 <ProcessMacCommands+0x992>
                    macIndex += 4;
 800f95e:	78fb      	ldrb	r3, [r7, #3]
 800f960:	3304      	adds	r3, #4
 800f962:	70fb      	strb	r3, [r7, #3]
                break;
 800f964:	e385      	b.n	8010072 <ProcessMacCommands+0x992>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 800f966:	78fb      	ldrb	r3, [r7, #3]
 800f968:	1c5a      	adds	r2, r3, #1
 800f96a:	70fa      	strb	r2, [r7, #3]
 800f96c:	461a      	mov	r2, r3
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	4413      	add	r3, r2
 800f972:	781b      	ldrb	r3, [r3, #0]
 800f974:	f003 030f 	and.w	r3, r3, #15
 800f978:	b2da      	uxtb	r2, r3
 800f97a:	4b46      	ldr	r3, [pc, #280]	@ (800fa94 <ProcessMacCommands+0x3b4>)
 800f97c:	f883 2107 	strb.w	r2, [r3, #263]	@ 0x107
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 800f980:	4b44      	ldr	r3, [pc, #272]	@ (800fa94 <ProcessMacCommands+0x3b4>)
 800f982:	f893 3107 	ldrb.w	r3, [r3, #263]	@ 0x107
 800f986:	461a      	mov	r2, r3
 800f988:	2301      	movs	r3, #1
 800f98a:	4093      	lsls	r3, r2
 800f98c:	b29a      	uxth	r2, r3
 800f98e:	4b41      	ldr	r3, [pc, #260]	@ (800fa94 <ProcessMacCommands+0x3b4>)
 800f990:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 800f994:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800f998:	2200      	movs	r2, #0
 800f99a:	4619      	mov	r1, r3
 800f99c:	2004      	movs	r0, #4
 800f99e:	f003 fab9 	bl	8012f14 <LoRaMacCommandsAddCmd>
                break;
 800f9a2:	e371      	b.n	8010088 <ProcessMacCommands+0x9a8>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 800f9a4:	2307      	movs	r3, #7
 800f9a6:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 800f9aa:	78fb      	ldrb	r3, [r7, #3]
 800f9ac:	687a      	ldr	r2, [r7, #4]
 800f9ae:	4413      	add	r3, r2
 800f9b0:	781b      	ldrb	r3, [r3, #0]
 800f9b2:	091b      	lsrs	r3, r3, #4
 800f9b4:	b2db      	uxtb	r3, r3
 800f9b6:	b25b      	sxtb	r3, r3
 800f9b8:	f003 0307 	and.w	r3, r3, #7
 800f9bc:	b25b      	sxtb	r3, r3
 800f9be:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 800f9c2:	78fb      	ldrb	r3, [r7, #3]
 800f9c4:	687a      	ldr	r2, [r7, #4]
 800f9c6:	4413      	add	r3, r2
 800f9c8:	781b      	ldrb	r3, [r3, #0]
 800f9ca:	b25b      	sxtb	r3, r3
 800f9cc:	f003 030f 	and.w	r3, r3, #15
 800f9d0:	b25b      	sxtb	r3, r3
 800f9d2:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
                macIndex++;
 800f9d6:	78fb      	ldrb	r3, [r7, #3]
 800f9d8:	3301      	adds	r3, #1
 800f9da:	70fb      	strb	r3, [r7, #3]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800f9dc:	78fb      	ldrb	r3, [r7, #3]
 800f9de:	1c5a      	adds	r2, r3, #1
 800f9e0:	70fa      	strb	r2, [r7, #3]
 800f9e2:	461a      	mov	r2, r3
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	4413      	add	r3, r2
 800f9e8:	781b      	ldrb	r3, [r3, #0]
 800f9ea:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800f9ec:	78fb      	ldrb	r3, [r7, #3]
 800f9ee:	1c5a      	adds	r2, r3, #1
 800f9f0:	70fa      	strb	r2, [r7, #3]
 800f9f2:	461a      	mov	r2, r3
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	4413      	add	r3, r2
 800f9f8:	781b      	ldrb	r3, [r3, #0]
 800f9fa:	021a      	lsls	r2, r3, #8
 800f9fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f9fe:	4313      	orrs	r3, r2
 800fa00:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800fa02:	78fb      	ldrb	r3, [r7, #3]
 800fa04:	1c5a      	adds	r2, r3, #1
 800fa06:	70fa      	strb	r2, [r7, #3]
 800fa08:	461a      	mov	r2, r3
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	4413      	add	r3, r2
 800fa0e:	781b      	ldrb	r3, [r3, #0]
 800fa10:	041a      	lsls	r2, r3, #16
 800fa12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fa14:	4313      	orrs	r3, r2
 800fa16:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency *= 100;
 800fa18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fa1a:	2264      	movs	r2, #100	@ 0x64
 800fa1c:	fb02 f303 	mul.w	r3, r2, r3
 800fa20:	653b      	str	r3, [r7, #80]	@ 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 800fa22:	4b1c      	ldr	r3, [pc, #112]	@ (800fa94 <ProcessMacCommands+0x3b4>)
 800fa24:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800fa28:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 800fa2c:	4611      	mov	r1, r2
 800fa2e:	4618      	mov	r0, r3
 800fa30:	f005 f8b5 	bl	8014b9e <RegionRxParamSetupReq>
 800fa34:	4603      	mov	r3, r0
 800fa36:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( status & 0x07 ) == 0x07 )
 800fa3a:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800fa3e:	f003 0307 	and.w	r3, r3, #7
 800fa42:	2b07      	cmp	r3, #7
 800fa44:	d117      	bne.n	800fa76 <ProcessMacCommands+0x396>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 800fa46:	f997 304c 	ldrsb.w	r3, [r7, #76]	@ 0x4c
 800fa4a:	b2da      	uxtb	r2, r3
 800fa4c:	4b11      	ldr	r3, [pc, #68]	@ (800fa94 <ProcessMacCommands+0x3b4>)
 800fa4e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 800fa52:	f997 304c 	ldrsb.w	r3, [r7, #76]	@ 0x4c
 800fa56:	b2da      	uxtb	r2, r3
 800fa58:	4b0e      	ldr	r3, [pc, #56]	@ (800fa94 <ProcessMacCommands+0x3b4>)
 800fa5a:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 800fa5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fa60:	4a0c      	ldr	r2, [pc, #48]	@ (800fa94 <ProcessMacCommands+0x3b4>)
 800fa62:	6653      	str	r3, [r2, #100]	@ 0x64
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 800fa64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fa66:	4a0b      	ldr	r2, [pc, #44]	@ (800fa94 <ProcessMacCommands+0x3b4>)
 800fa68:	66d3      	str	r3, [r2, #108]	@ 0x6c
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 800fa6a:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 800fa6e:	b2da      	uxtb	r2, r3
 800fa70:	4b08      	ldr	r3, [pc, #32]	@ (800fa94 <ProcessMacCommands+0x3b4>)
 800fa72:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
                }
                macCmdPayload[0] = status;
 800fa76:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800fa7a:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 800fa7e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800fa82:	2201      	movs	r2, #1
 800fa84:	4619      	mov	r1, r3
 800fa86:	2005      	movs	r0, #5
 800fa88:	f003 fa44 	bl	8012f14 <LoRaMacCommandsAddCmd>
                /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                // Setup indication to inform the application
                /* SetMlmeScheduleUplinkIndication( ); */
                /*ST_WORKAROUND_END */
                break;
 800fa8c:	e2fc      	b.n	8010088 <ProcessMacCommands+0x9a8>
 800fa8e:	bf00      	nop
 800fa90:	200008d8 	.word	0x200008d8
 800fa94:	20000df8 	.word	0x20000df8
 800fa98:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 800fa9c:	23ff      	movs	r3, #255	@ 0xff
 800fa9e:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 800faa2:	4bb7      	ldr	r3, [pc, #732]	@ (800fd80 <ProcessMacCommands+0x6a0>)
 800faa4:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d00d      	beq.n	800fac8 <ProcessMacCommands+0x3e8>
 800faac:	4bb4      	ldr	r3, [pc, #720]	@ (800fd80 <ProcessMacCommands+0x6a0>)
 800faae:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d007      	beq.n	800fac8 <ProcessMacCommands+0x3e8>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 800fab8:	4bb1      	ldr	r3, [pc, #708]	@ (800fd80 <ProcessMacCommands+0x6a0>)
 800faba:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	4798      	blx	r3
 800fac2:	4603      	mov	r3, r0
 800fac4:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
                }
                macCmdPayload[0] = batteryLevel;
 800fac8:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 800facc:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 800fad0:	787b      	ldrb	r3, [r7, #1]
 800fad2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800fad6:	b2db      	uxtb	r3, r3
 800fad8:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 800fadc:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800fae0:	2202      	movs	r2, #2
 800fae2:	4619      	mov	r1, r3
 800fae4:	2006      	movs	r0, #6
 800fae6:	f003 fa15 	bl	8012f14 <LoRaMacCommandsAddCmd>
                break;
 800faea:	e2cd      	b.n	8010088 <ProcessMacCommands+0x9a8>
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 800faec:	2303      	movs	r3, #3
 800faee:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 800faf2:	78fb      	ldrb	r3, [r7, #3]
 800faf4:	1c5a      	adds	r2, r3, #1
 800faf6:	70fa      	strb	r2, [r7, #3]
 800faf8:	461a      	mov	r2, r3
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	4413      	add	r3, r2
 800fafe:	781b      	ldrb	r3, [r3, #0]
 800fb00:	b25b      	sxtb	r3, r3
 800fb02:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
                newChannelReq.NewChannel = &chParam;
 800fb06:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800fb0a:	647b      	str	r3, [r7, #68]	@ 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 800fb0c:	78fb      	ldrb	r3, [r7, #3]
 800fb0e:	1c5a      	adds	r2, r3, #1
 800fb10:	70fa      	strb	r2, [r7, #3]
 800fb12:	461a      	mov	r2, r3
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	4413      	add	r3, r2
 800fb18:	781b      	ldrb	r3, [r3, #0]
 800fb1a:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800fb1c:	78fb      	ldrb	r3, [r7, #3]
 800fb1e:	1c5a      	adds	r2, r3, #1
 800fb20:	70fa      	strb	r2, [r7, #3]
 800fb22:	461a      	mov	r2, r3
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	4413      	add	r3, r2
 800fb28:	781b      	ldrb	r3, [r3, #0]
 800fb2a:	021a      	lsls	r2, r3, #8
 800fb2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb2e:	4313      	orrs	r3, r2
 800fb30:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800fb32:	78fb      	ldrb	r3, [r7, #3]
 800fb34:	1c5a      	adds	r2, r3, #1
 800fb36:	70fa      	strb	r2, [r7, #3]
 800fb38:	461a      	mov	r2, r3
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	4413      	add	r3, r2
 800fb3e:	781b      	ldrb	r3, [r3, #0]
 800fb40:	041a      	lsls	r2, r3, #16
 800fb42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb44:	4313      	orrs	r3, r2
 800fb46:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency *= 100;
 800fb48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb4a:	2264      	movs	r2, #100	@ 0x64
 800fb4c:	fb02 f303 	mul.w	r3, r2, r3
 800fb50:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Rx1Frequency = 0;
 800fb52:	2300      	movs	r3, #0
 800fb54:	63fb      	str	r3, [r7, #60]	@ 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 800fb56:	78fb      	ldrb	r3, [r7, #3]
 800fb58:	1c5a      	adds	r2, r3, #1
 800fb5a:	70fa      	strb	r2, [r7, #3]
 800fb5c:	461a      	mov	r2, r3
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	4413      	add	r3, r2
 800fb62:	781b      	ldrb	r3, [r3, #0]
 800fb64:	b25b      	sxtb	r3, r3
 800fb66:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 800fb6a:	4b86      	ldr	r3, [pc, #536]	@ (800fd84 <ProcessMacCommands+0x6a4>)
 800fb6c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800fb70:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800fb74:	4611      	mov	r1, r2
 800fb76:	4618      	mov	r0, r3
 800fb78:	f005 f824 	bl	8014bc4 <RegionNewChannelReq>
 800fb7c:	4603      	mov	r3, r0
 800fb7e:	b2db      	uxtb	r3, r3
 800fb80:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( int8_t )status >= 0 )
 800fb84:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800fb88:	b25b      	sxtb	r3, r3
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	f2c0 8273 	blt.w	8010076 <ProcessMacCommands+0x996>
                {
                    macCmdPayload[0] = status;
 800fb90:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800fb94:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 800fb98:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800fb9c:	2201      	movs	r2, #1
 800fb9e:	4619      	mov	r1, r3
 800fba0:	2007      	movs	r0, #7
 800fba2:	f003 f9b7 	bl	8012f14 <LoRaMacCommandsAddCmd>
                }
                break;
 800fba6:	e266      	b.n	8010076 <ProcessMacCommands+0x996>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 800fba8:	78fb      	ldrb	r3, [r7, #3]
 800fbaa:	1c5a      	adds	r2, r3, #1
 800fbac:	70fa      	strb	r2, [r7, #3]
 800fbae:	461a      	mov	r2, r3
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	4413      	add	r3, r2
 800fbb4:	781b      	ldrb	r3, [r3, #0]
 800fbb6:	f003 030f 	and.w	r3, r3, #15
 800fbba:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84

                if( delay == 0 )
 800fbbe:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d104      	bne.n	800fbd0 <ProcessMacCommands+0x4f0>
                {
                    delay++;
 800fbc6:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800fbca:	3301      	adds	r3, #1
 800fbcc:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 800fbd0:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800fbd4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800fbd8:	fb02 f303 	mul.w	r3, r2, r3
 800fbdc:	461a      	mov	r2, r3
 800fbde:	4b69      	ldr	r3, [pc, #420]	@ (800fd84 <ProcessMacCommands+0x6a4>)
 800fbe0:	651a      	str	r2, [r3, #80]	@ 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800fbe2:	4b68      	ldr	r3, [pc, #416]	@ (800fd84 <ProcessMacCommands+0x6a4>)
 800fbe4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fbe6:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800fbea:	4a66      	ldr	r2, [pc, #408]	@ (800fd84 <ProcessMacCommands+0x6a4>)
 800fbec:	6553      	str	r3, [r2, #84]	@ 0x54
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 800fbee:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800fbf2:	2200      	movs	r2, #0
 800fbf4:	4619      	mov	r1, r3
 800fbf6:	2008      	movs	r0, #8
 800fbf8:	f003 f98c 	bl	8012f14 <LoRaMacCommandsAddCmd>
                /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                // Setup indication to inform the application
                /* SetMlmeScheduleUplinkIndication( ); */
                /*ST_WORKAROUND_END */
                break;
 800fbfc:	e244      	b.n	8010088 <ProcessMacCommands+0x9a8>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 800fbfe:	78fb      	ldrb	r3, [r7, #3]
 800fc00:	1c5a      	adds	r2, r3, #1
 800fc02:	70fa      	strb	r2, [r7, #3]
 800fc04:	461a      	mov	r2, r3
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	4413      	add	r3, r2
 800fc0a:	781b      	ldrb	r3, [r3, #0]
 800fc0c:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 800fc10:	2300      	movs	r3, #0
 800fc12:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 800fc16:	2300      	movs	r3, #0
 800fc18:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 800fc1c:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800fc20:	f003 0320 	and.w	r3, r3, #32
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d002      	beq.n	800fc2e <ProcessMacCommands+0x54e>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 800fc28:	2301      	movs	r3, #1
 800fc2a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 800fc2e:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800fc32:	f003 0310 	and.w	r3, r3, #16
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d002      	beq.n	800fc40 <ProcessMacCommands+0x560>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 800fc3a:	2301      	movs	r3, #1
 800fc3c:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 800fc40:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800fc44:	f003 030f 	and.w	r3, r3, #15
 800fc48:	b2db      	uxtb	r3, r3
 800fc4a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 800fc4e:	4b4d      	ldr	r3, [pc, #308]	@ (800fd84 <ProcessMacCommands+0x6a4>)
 800fc50:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800fc54:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800fc58:	4611      	mov	r1, r2
 800fc5a:	4618      	mov	r0, r3
 800fc5c:	f004 ffc5 	bl	8014bea <RegionTxParamSetupReq>
 800fc60:	4603      	mov	r3, r0
 800fc62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc66:	f000 8208 	beq.w	801007a <ProcessMacCommands+0x99a>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 800fc6a:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 800fc6e:	4b45      	ldr	r3, [pc, #276]	@ (800fd84 <ProcessMacCommands+0x6a4>)
 800fc70:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 800fc74:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 800fc78:	4b42      	ldr	r3, [pc, #264]	@ (800fd84 <ProcessMacCommands+0x6a4>)
 800fc7a:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 800fc7e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800fc82:	461a      	mov	r2, r3
 800fc84:	4b40      	ldr	r3, [pc, #256]	@ (800fd88 <ProcessMacCommands+0x6a8>)
 800fc86:	5c9b      	ldrb	r3, [r3, r2]
 800fc88:	4618      	mov	r0, r3
 800fc8a:	f7f1 f81b 	bl	8000cc4 <__aeabi_ui2f>
 800fc8e:	4603      	mov	r3, r0
 800fc90:	4a3c      	ldr	r2, [pc, #240]	@ (800fd84 <ProcessMacCommands+0x6a4>)
 800fc92:	6793      	str	r3, [r2, #120]	@ 0x78
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 800fc94:	2302      	movs	r3, #2
 800fc96:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800fc9a:	4b3a      	ldr	r3, [pc, #232]	@ (800fd84 <ProcessMacCommands+0x6a4>)
 800fc9c:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800fca0:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800fca4:	4b37      	ldr	r3, [pc, #220]	@ (800fd84 <ProcessMacCommands+0x6a4>)
 800fca6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800fcaa:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800fcae:	4611      	mov	r1, r2
 800fcb0:	4618      	mov	r0, r3
 800fcb2:	f004 fe9d 	bl	80149f0 <RegionGetPhyParam>
 800fcb6:	4603      	mov	r3, r0
 800fcb8:	62bb      	str	r3, [r7, #40]	@ 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 800fcba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fcbc:	b25a      	sxtb	r2, r3
 800fcbe:	4b31      	ldr	r3, [pc, #196]	@ (800fd84 <ProcessMacCommands+0x6a4>)
 800fcc0:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800fcc4:	4293      	cmp	r3, r2
 800fcc6:	bfb8      	it	lt
 800fcc8:	4613      	movlt	r3, r2
 800fcca:	b25a      	sxtb	r2, r3
 800fccc:	4b2d      	ldr	r3, [pc, #180]	@ (800fd84 <ProcessMacCommands+0x6a4>)
 800fcce:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 800fcd2:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800fcd6:	2200      	movs	r2, #0
 800fcd8:	4619      	mov	r1, r3
 800fcda:	2009      	movs	r0, #9
 800fcdc:	f003 f91a 	bl	8012f14 <LoRaMacCommandsAddCmd>
                }
                break;
 800fce0:	e1cb      	b.n	801007a <ProcessMacCommands+0x99a>
            }
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 800fce2:	2303      	movs	r3, #3
 800fce4:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 800fce8:	78fb      	ldrb	r3, [r7, #3]
 800fcea:	1c5a      	adds	r2, r3, #1
 800fcec:	70fa      	strb	r2, [r7, #3]
 800fcee:	461a      	mov	r2, r3
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	4413      	add	r3, r2
 800fcf4:	781b      	ldrb	r3, [r3, #0]
 800fcf6:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 800fcfa:	78fb      	ldrb	r3, [r7, #3]
 800fcfc:	1c5a      	adds	r2, r3, #1
 800fcfe:	70fa      	strb	r2, [r7, #3]
 800fd00:	461a      	mov	r2, r3
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	4413      	add	r3, r2
 800fd06:	781b      	ldrb	r3, [r3, #0]
 800fd08:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800fd0a:	78fb      	ldrb	r3, [r7, #3]
 800fd0c:	1c5a      	adds	r2, r3, #1
 800fd0e:	70fa      	strb	r2, [r7, #3]
 800fd10:	461a      	mov	r2, r3
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	4413      	add	r3, r2
 800fd16:	781b      	ldrb	r3, [r3, #0]
 800fd18:	021a      	lsls	r2, r3, #8
 800fd1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd1c:	4313      	orrs	r3, r2
 800fd1e:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800fd20:	78fb      	ldrb	r3, [r7, #3]
 800fd22:	1c5a      	adds	r2, r3, #1
 800fd24:	70fa      	strb	r2, [r7, #3]
 800fd26:	461a      	mov	r2, r3
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	4413      	add	r3, r2
 800fd2c:	781b      	ldrb	r3, [r3, #0]
 800fd2e:	041a      	lsls	r2, r3, #16
 800fd30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd32:	4313      	orrs	r3, r2
 800fd34:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency *= 100;
 800fd36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd38:	2264      	movs	r2, #100	@ 0x64
 800fd3a:	fb02 f303 	mul.w	r3, r2, r3
 800fd3e:	627b      	str	r3, [r7, #36]	@ 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 800fd40:	4b10      	ldr	r3, [pc, #64]	@ (800fd84 <ProcessMacCommands+0x6a4>)
 800fd42:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800fd46:	f107 0220 	add.w	r2, r7, #32
 800fd4a:	4611      	mov	r1, r2
 800fd4c:	4618      	mov	r0, r3
 800fd4e:	f004 ff5f 	bl	8014c10 <RegionDlChannelReq>
 800fd52:	4603      	mov	r3, r0
 800fd54:	b2db      	uxtb	r3, r3
 800fd56:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( int8_t )status >= 0 )
 800fd5a:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800fd5e:	b25b      	sxtb	r3, r3
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	f2c0 818c 	blt.w	801007e <ProcessMacCommands+0x99e>
                {
                    macCmdPayload[0] = status;
 800fd66:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800fd6a:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 800fd6e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800fd72:	2201      	movs	r2, #1
 800fd74:	4619      	mov	r1, r3
 800fd76:	200a      	movs	r0, #10
 800fd78:	f003 f8cc 	bl	8012f14 <LoRaMacCommandsAddCmd>
                    /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                    // Setup indication to inform the application
                    /* SetMlmeScheduleUplinkIndication( ); */
                    /*ST_WORKAROUND_END */
                }
                break;
 800fd7c:	e17f      	b.n	801007e <ProcessMacCommands+0x99e>
 800fd7e:	bf00      	nop
 800fd80:	200008d8 	.word	0x200008d8
 800fd84:	20000df8 	.word	0x20000df8
 800fd88:	0801f394 	.word	0x0801f394
            }
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                // The mote time can be updated only when the time is received in classA
                // receive windows only.
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 800fd8c:	2009      	movs	r0, #9
 800fd8e:	f003 fbe9 	bl	8013564 <LoRaMacConfirmQueueIsCmdActive>
 800fd92:	4603      	mov	r3, r0
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	f000 8084 	beq.w	800fea2 <ProcessMacCommands+0x7c2>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 800fd9a:	2109      	movs	r1, #9
 800fd9c:	2000      	movs	r0, #0
 800fd9e:	f003 fb55 	bl	801344c <LoRaMacConfirmQueueSetStatus>

                    SysTime_t gpsEpochTime = { 0 };
 800fda2:	f107 0318 	add.w	r3, r7, #24
 800fda6:	2200      	movs	r2, #0
 800fda8:	601a      	str	r2, [r3, #0]
 800fdaa:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 800fdac:	f107 0310 	add.w	r3, r7, #16
 800fdb0:	2200      	movs	r2, #0
 800fdb2:	601a      	str	r2, [r3, #0]
 800fdb4:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 800fdb6:	f107 0308 	add.w	r3, r7, #8
 800fdba:	2200      	movs	r2, #0
 800fdbc:	601a      	str	r2, [r3, #0]
 800fdbe:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 800fdc0:	78fb      	ldrb	r3, [r7, #3]
 800fdc2:	1c5a      	adds	r2, r3, #1
 800fdc4:	70fa      	strb	r2, [r7, #3]
 800fdc6:	461a      	mov	r2, r3
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	4413      	add	r3, r2
 800fdcc:	781b      	ldrb	r3, [r3, #0]
 800fdce:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 800fdd0:	78fb      	ldrb	r3, [r7, #3]
 800fdd2:	1c5a      	adds	r2, r3, #1
 800fdd4:	70fa      	strb	r2, [r7, #3]
 800fdd6:	461a      	mov	r2, r3
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	4413      	add	r3, r2
 800fddc:	781b      	ldrb	r3, [r3, #0]
 800fdde:	021a      	lsls	r2, r3, #8
 800fde0:	69bb      	ldr	r3, [r7, #24]
 800fde2:	4313      	orrs	r3, r2
 800fde4:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 800fde6:	78fb      	ldrb	r3, [r7, #3]
 800fde8:	1c5a      	adds	r2, r3, #1
 800fdea:	70fa      	strb	r2, [r7, #3]
 800fdec:	461a      	mov	r2, r3
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	4413      	add	r3, r2
 800fdf2:	781b      	ldrb	r3, [r3, #0]
 800fdf4:	041a      	lsls	r2, r3, #16
 800fdf6:	69bb      	ldr	r3, [r7, #24]
 800fdf8:	4313      	orrs	r3, r2
 800fdfa:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800fdfc:	78fb      	ldrb	r3, [r7, #3]
 800fdfe:	1c5a      	adds	r2, r3, #1
 800fe00:	70fa      	strb	r2, [r7, #3]
 800fe02:	461a      	mov	r2, r3
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	4413      	add	r3, r2
 800fe08:	781b      	ldrb	r3, [r3, #0]
 800fe0a:	061a      	lsls	r2, r3, #24
 800fe0c:	69bb      	ldr	r3, [r7, #24]
 800fe0e:	4313      	orrs	r3, r2
 800fe10:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 800fe12:	78fb      	ldrb	r3, [r7, #3]
 800fe14:	1c5a      	adds	r2, r3, #1
 800fe16:	70fa      	strb	r2, [r7, #3]
 800fe18:	461a      	mov	r2, r3
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	4413      	add	r3, r2
 800fe1e:	781b      	ldrb	r3, [r3, #0]
 800fe20:	b21b      	sxth	r3, r3
 800fe22:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 800fe24:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800fe28:	461a      	mov	r2, r3
 800fe2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fe2e:	fb02 f303 	mul.w	r3, r2, r3
 800fe32:	121b      	asrs	r3, r3, #8
 800fe34:	b21b      	sxth	r3, r3
 800fe36:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 800fe38:	f107 0310 	add.w	r3, r7, #16
 800fe3c:	f107 0218 	add.w	r2, r7, #24
 800fe40:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fe44:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epoch offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800fe48:	693a      	ldr	r2, [r7, #16]
 800fe4a:	4b96      	ldr	r3, [pc, #600]	@ (80100a4 <ProcessMacCommands+0x9c4>)
 800fe4c:	4413      	add	r3, r2
 800fe4e:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 800fe50:	f107 0308 	add.w	r3, r7, #8
 800fe54:	4618      	mov	r0, r3
 800fe56:	f00a fc53 	bl	801a700 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 800fe5a:	f107 006c 	add.w	r0, r7, #108	@ 0x6c
 800fe5e:	4b92      	ldr	r3, [pc, #584]	@ (80100a8 <ProcessMacCommands+0x9c8>)
 800fe60:	f8d3 233c 	ldr.w	r2, [r3, #828]	@ 0x33c
 800fe64:	9200      	str	r2, [sp, #0]
 800fe66:	f8d3 3338 	ldr.w	r3, [r3, #824]	@ 0x338
 800fe6a:	f107 0210 	add.w	r2, r7, #16
 800fe6e:	ca06      	ldmia	r2, {r1, r2}
 800fe70:	f00a fbdf 	bl	801a632 <SysTimeSub>
 800fe74:	f107 0010 	add.w	r0, r7, #16
 800fe78:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800fe7a:	9300      	str	r3, [sp, #0]
 800fe7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fe7e:	f107 0208 	add.w	r2, r7, #8
 800fe82:	ca06      	ldmia	r2, {r1, r2}
 800fe84:	f00a fb9c 	bl	801a5c0 <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 800fe88:	f107 0310 	add.w	r3, r7, #16
 800fe8c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800fe90:	f00a fc08 	bl	801a6a4 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 800fe94:	f002 fee8 	bl	8012c68 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 800fe98:	4b83      	ldr	r3, [pc, #524]	@ (80100a8 <ProcessMacCommands+0x9c8>)
 800fe9a:	2201      	movs	r2, #1
 800fe9c:	f883 243c 	strb.w	r2, [r3, #1084]	@ 0x43c
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                    // In case of other receive windows the Device Time Answer is not received.
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
#endif /* LORAMAC_VERSION */
                }
                break;
 800fea0:	e0f2      	b.n	8010088 <ProcessMacCommands+0x9a8>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800fea2:	4b81      	ldr	r3, [pc, #516]	@ (80100a8 <ProcessMacCommands+0x9c8>)
 800fea4:	2200      	movs	r2, #0
 800fea6:	f883 243c 	strb.w	r2, [r3, #1084]	@ 0x43c
                break;
 800feaa:	e0ed      	b.n	8010088 <ProcessMacCommands+0x9a8>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 800feac:	200c      	movs	r0, #12
 800feae:	f003 fb59 	bl	8013564 <LoRaMacConfirmQueueIsCmdActive>
 800feb2:	4603      	mov	r3, r0
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	f000 80e4 	beq.w	8010082 <ProcessMacCommands+0x9a2>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 800feba:	210c      	movs	r1, #12
 800febc:	2000      	movs	r0, #0
 800febe:	f003 fac5 	bl	801344c <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 800fec2:	4b79      	ldr	r3, [pc, #484]	@ (80100a8 <ProcessMacCommands+0x9c8>)
 800fec4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800fec8:	2b04      	cmp	r3, #4
 800feca:	f000 80da 	beq.w	8010082 <ProcessMacCommands+0x9a2>
 800fece:	4b76      	ldr	r3, [pc, #472]	@ (80100a8 <ProcessMacCommands+0x9c8>)
 800fed0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800fed4:	2b05      	cmp	r3, #5
 800fed6:	f000 80d4 	beq.w	8010082 <ProcessMacCommands+0x9a2>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 800feda:	f002 fea6 	bl	8012c2a <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 800fede:	e0d0      	b.n	8010082 <ProcessMacCommands+0x9a2>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 800fee0:	2303      	movs	r3, #3
 800fee2:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
                uint32_t frequency = 0;
 800fee6:	2300      	movs	r3, #0
 800fee8:	67bb      	str	r3, [r7, #120]	@ 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 800feea:	78fb      	ldrb	r3, [r7, #3]
 800feec:	1c5a      	adds	r2, r3, #1
 800feee:	70fa      	strb	r2, [r7, #3]
 800fef0:	461a      	mov	r2, r3
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	4413      	add	r3, r2
 800fef6:	781b      	ldrb	r3, [r3, #0]
 800fef8:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 800fefa:	78fb      	ldrb	r3, [r7, #3]
 800fefc:	1c5a      	adds	r2, r3, #1
 800fefe:	70fa      	strb	r2, [r7, #3]
 800ff00:	461a      	mov	r2, r3
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	4413      	add	r3, r2
 800ff06:	781b      	ldrb	r3, [r3, #0]
 800ff08:	021b      	lsls	r3, r3, #8
 800ff0a:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800ff0c:	4313      	orrs	r3, r2
 800ff0e:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 800ff10:	78fb      	ldrb	r3, [r7, #3]
 800ff12:	1c5a      	adds	r2, r3, #1
 800ff14:	70fa      	strb	r2, [r7, #3]
 800ff16:	461a      	mov	r2, r3
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	4413      	add	r3, r2
 800ff1c:	781b      	ldrb	r3, [r3, #0]
 800ff1e:	041b      	lsls	r3, r3, #16
 800ff20:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800ff22:	4313      	orrs	r3, r2
 800ff24:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency *= 100;
 800ff26:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ff28:	2264      	movs	r2, #100	@ 0x64
 800ff2a:	fb02 f303 	mul.w	r3, r2, r3
 800ff2e:	67bb      	str	r3, [r7, #120]	@ 0x78
                datarate = payload[macIndex++] & 0x0F;
 800ff30:	78fb      	ldrb	r3, [r7, #3]
 800ff32:	1c5a      	adds	r2, r3, #1
 800ff34:	70fa      	strb	r2, [r7, #3]
 800ff36:	461a      	mov	r2, r3
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	4413      	add	r3, r2
 800ff3c:	781b      	ldrb	r3, [r3, #0]
 800ff3e:	f003 030f 	and.w	r3, r3, #15
 800ff42:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 800ff46:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800ff4a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800ff4c:	4618      	mov	r0, r3
 800ff4e:	f002 fe72 	bl	8012c36 <LoRaMacClassBPingSlotChannelReq>
 800ff52:	4603      	mov	r3, r0
 800ff54:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
                macCmdPayload[0] = status;
 800ff58:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 800ff5c:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
 800ff60:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800ff64:	2201      	movs	r2, #1
 800ff66:	4619      	mov	r1, r3
 800ff68:	2011      	movs	r0, #17
 800ff6a:	f002 ffd3 	bl	8012f14 <LoRaMacCommandsAddCmd>
                /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                // Setup indication to inform the application
                /* SetMlmeScheduleUplinkIndication( ); */
                /*ST_WORKAROUND_END */
#endif /* LORAMAC_VERSION */
                break;
 800ff6e:	e08b      	b.n	8010088 <ProcessMacCommands+0x9a8>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 800ff70:	200d      	movs	r0, #13
 800ff72:	f003 faf7 	bl	8013564 <LoRaMacConfirmQueueIsCmdActive>
 800ff76:	4603      	mov	r3, r0
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	f000 8084 	beq.w	8010086 <ProcessMacCommands+0x9a6>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 800ff7e:	210d      	movs	r1, #13
 800ff80:	2000      	movs	r0, #0
 800ff82:	f003 fa63 	bl	801344c <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 800ff86:	2300      	movs	r3, #0
 800ff88:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    uint8_t beaconTimingChannel = 0;
 800ff8c:	2300      	movs	r3, #0
 800ff8e:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 800ff92:	78fb      	ldrb	r3, [r7, #3]
 800ff94:	1c5a      	adds	r2, r3, #1
 800ff96:	70fa      	strb	r2, [r7, #3]
 800ff98:	461a      	mov	r2, r3
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	4413      	add	r3, r2
 800ff9e:	781b      	ldrb	r3, [r3, #0]
 800ffa0:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 800ffa4:	78fb      	ldrb	r3, [r7, #3]
 800ffa6:	1c5a      	adds	r2, r3, #1
 800ffa8:	70fa      	strb	r2, [r7, #3]
 800ffaa:	461a      	mov	r2, r3
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	4413      	add	r3, r2
 800ffb0:	781b      	ldrb	r3, [r3, #0]
 800ffb2:	021b      	lsls	r3, r3, #8
 800ffb4:	b21a      	sxth	r2, r3
 800ffb6:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	@ 0x7e
 800ffba:	4313      	orrs	r3, r2
 800ffbc:	b21b      	sxth	r3, r3
 800ffbe:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    beaconTimingChannel = payload[macIndex++];
 800ffc2:	78fb      	ldrb	r3, [r7, #3]
 800ffc4:	1c5a      	adds	r2, r3, #1
 800ffc6:	70fa      	strb	r2, [r7, #3]
 800ffc8:	461a      	mov	r2, r3
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	4413      	add	r3, r2
 800ffce:	781b      	ldrb	r3, [r3, #0]
 800ffd0:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 800ffd4:	4b35      	ldr	r3, [pc, #212]	@ (80100ac <ProcessMacCommands+0x9cc>)
 800ffd6:	681a      	ldr	r2, [r3, #0]
 800ffd8:	f897 107d 	ldrb.w	r1, [r7, #125]	@ 0x7d
 800ffdc:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 800ffe0:	4618      	mov	r0, r3
 800ffe2:	f002 fe34 	bl	8012c4e <LoRaMacClassBBeaconTimingAns>
                }
                break;
 800ffe6:	e04e      	b.n	8010086 <ProcessMacCommands+0x9a6>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 800ffe8:	2300      	movs	r3, #0
 800ffea:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 800ffee:	78fb      	ldrb	r3, [r7, #3]
 800fff0:	1c5a      	adds	r2, r3, #1
 800fff2:	70fa      	strb	r2, [r7, #3]
 800fff4:	461a      	mov	r2, r3
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	4413      	add	r3, r2
 800fffa:	781b      	ldrb	r3, [r3, #0]
 800fffc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8010000:	78fb      	ldrb	r3, [r7, #3]
 8010002:	1c5a      	adds	r2, r3, #1
 8010004:	70fa      	strb	r2, [r7, #3]
 8010006:	461a      	mov	r2, r3
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	4413      	add	r3, r2
 801000c:	781b      	ldrb	r3, [r3, #0]
 801000e:	021b      	lsls	r3, r3, #8
 8010010:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8010014:	4313      	orrs	r3, r2
 8010016:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 801001a:	78fb      	ldrb	r3, [r7, #3]
 801001c:	1c5a      	adds	r2, r3, #1
 801001e:	70fa      	strb	r2, [r7, #3]
 8010020:	461a      	mov	r2, r3
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	4413      	add	r3, r2
 8010026:	781b      	ldrb	r3, [r3, #0]
 8010028:	041b      	lsls	r3, r3, #16
 801002a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801002e:	4313      	orrs	r3, r2
 8010030:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency *= 100;
 8010034:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8010038:	2264      	movs	r2, #100	@ 0x64
 801003a:	fb02 f303 	mul.w	r3, r2, r3
 801003e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 8010042:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8010046:	f002 fe15 	bl	8012c74 <LoRaMacClassBBeaconFreqReq>
 801004a:	4603      	mov	r3, r0
 801004c:	2b00      	cmp	r3, #0
 801004e:	d003      	beq.n	8010058 <ProcessMacCommands+0x978>
                    {
                        macCmdPayload[0] = 1;
 8010050:	2301      	movs	r3, #1
 8010052:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
 8010056:	e002      	b.n	801005e <ProcessMacCommands+0x97e>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 8010058:	2300      	movs	r3, #0
 801005a:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 801005e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8010062:	2201      	movs	r2, #1
 8010064:	4619      	mov	r1, r3
 8010066:	2013      	movs	r0, #19
 8010068:	f002 ff54 	bl	8012f14 <LoRaMacCommandsAddCmd>
                }
                break;
 801006c:	e00c      	b.n	8010088 <ProcessMacCommands+0x9a8>
                break;
 801006e:	bf00      	nop
 8010070:	e00a      	b.n	8010088 <ProcessMacCommands+0x9a8>
                break;
 8010072:	bf00      	nop
 8010074:	e008      	b.n	8010088 <ProcessMacCommands+0x9a8>
                break;
 8010076:	bf00      	nop
 8010078:	e006      	b.n	8010088 <ProcessMacCommands+0x9a8>
                break;
 801007a:	bf00      	nop
 801007c:	e004      	b.n	8010088 <ProcessMacCommands+0x9a8>
                break;
 801007e:	bf00      	nop
 8010080:	e002      	b.n	8010088 <ProcessMacCommands+0x9a8>
                break;
 8010082:	bf00      	nop
 8010084:	e000      	b.n	8010088 <ProcessMacCommands+0x9a8>
                break;
 8010086:	bf00      	nop
    while( macIndex < commandsSize )
 8010088:	78fa      	ldrb	r2, [r7, #3]
 801008a:	78bb      	ldrb	r3, [r7, #2]
 801008c:	429a      	cmp	r2, r3
 801008e:	f4ff ab49 	bcc.w	800f724 <ProcessMacCommands+0x44>
 8010092:	e004      	b.n	801009e <ProcessMacCommands+0x9be>
        return;
 8010094:	bf00      	nop
 8010096:	e002      	b.n	801009e <ProcessMacCommands+0x9be>
            return;
 8010098:	bf00      	nop
 801009a:	e000      	b.n	801009e <ProcessMacCommands+0x9be>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 801009c:	bf00      	nop
        }
    }
}
 801009e:	378c      	adds	r7, #140	@ 0x8c
 80100a0:	46bd      	mov	sp, r7
 80100a2:	bd90      	pop	{r4, r7, pc}
 80100a4:	12d53d80 	.word	0x12d53d80
 80100a8:	200008d8 	.word	0x200008d8
 80100ac:	20001988 	.word	0x20001988

080100b0 <Send>:

/* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 80100b0:	b580      	push	{r7, lr}
 80100b2:	b08e      	sub	sp, #56	@ 0x38
 80100b4:	af02      	add	r7, sp, #8
 80100b6:	60f8      	str	r0, [r7, #12]
 80100b8:	607a      	str	r2, [r7, #4]
 80100ba:	461a      	mov	r2, r3
 80100bc:	460b      	mov	r3, r1
 80100be:	72fb      	strb	r3, [r7, #11]
 80100c0:	4613      	mov	r3, r2
 80100c2:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80100c4:	2303      	movs	r3, #3
 80100c6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 80100ca:	4b66      	ldr	r3, [pc, #408]	@ (8010264 <Send+0x1b4>)
 80100cc:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80100d0:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 80100d4:	4b63      	ldr	r3, [pc, #396]	@ (8010264 <Send+0x1b4>)
 80100d6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80100da:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80100de:	4b61      	ldr	r3, [pc, #388]	@ (8010264 <Send+0x1b4>)
 80100e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80100e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80100e4:	4b5f      	ldr	r3, [pc, #380]	@ (8010264 <Send+0x1b4>)
 80100e6:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	d101      	bne.n	80100f2 <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 80100ee:	2307      	movs	r3, #7
 80100f0:	e0b4      	b.n	801025c <Send+0x1ac>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 80100f2:	4b5c      	ldr	r3, [pc, #368]	@ (8010264 <Send+0x1b4>)
 80100f4:	f893 3107 	ldrb.w	r3, [r3, #263]	@ 0x107
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d102      	bne.n	8010102 <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 80100fc:	4b59      	ldr	r3, [pc, #356]	@ (8010264 <Send+0x1b4>)
 80100fe:	2200      	movs	r2, #0
 8010100:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    fCtrl.Value = 0;
 8010102:	2300      	movs	r3, #0
 8010104:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 8010108:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 801010c:	f023 030f 	bic.w	r3, r3, #15
 8010110:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 8010114:	4b53      	ldr	r3, [pc, #332]	@ (8010264 <Send+0x1b4>)
 8010116:	f893 2106 	ldrb.w	r2, [r3, #262]	@ 0x106
 801011a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 801011e:	f362 13c7 	bfi	r3, r2, #7, #1
 8010122:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8010126:	4b4f      	ldr	r3, [pc, #316]	@ (8010264 <Send+0x1b4>)
 8010128:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 801012c:	2b01      	cmp	r3, #1
 801012e:	d106      	bne.n	801013e <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 8010130:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8010134:	f043 0310 	orr.w	r3, r3, #16
 8010138:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 801013c:	e005      	b.n	801014a <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 801013e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8010142:	f023 0310 	bic.w	r3, r3, #16
 8010146:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 801014a:	4b46      	ldr	r3, [pc, #280]	@ (8010264 <Send+0x1b4>)
 801014c:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8010150:	2b00      	cmp	r3, #0
 8010152:	d005      	beq.n	8010160 <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 8010154:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8010158:	f043 0320 	orr.w	r3, r3, #32
 801015c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    adrNext.Region = Nvm.MacGroup2.Region;

    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
                                               &Nvm.MacGroup1.ChannelsTxPower, &adrAckCounter );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    adrNext.UpdateChanMask = true;
 8010160:	2301      	movs	r3, #1
 8010162:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 8010164:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8010168:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 801016c:	b2db      	uxtb	r3, r3
 801016e:	2b00      	cmp	r3, #0
 8010170:	bf14      	ite	ne
 8010172:	2301      	movne	r3, #1
 8010174:	2300      	moveq	r3, #0
 8010176:	b2db      	uxtb	r3, r3
 8010178:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 801017a:	4b3a      	ldr	r3, [pc, #232]	@ (8010264 <Send+0x1b4>)
 801017c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801017e:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8010180:	4b39      	ldr	r3, [pc, #228]	@ (8010268 <Send+0x1b8>)
 8010182:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8010186:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 8010188:	4b37      	ldr	r3, [pc, #220]	@ (8010268 <Send+0x1b8>)
 801018a:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	@ 0x402
 801018e:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010190:	4b34      	ldr	r3, [pc, #208]	@ (8010264 <Send+0x1b4>)
 8010192:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8010196:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 801019a:	4b32      	ldr	r3, [pc, #200]	@ (8010264 <Send+0x1b4>)
 801019c:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 80101a0:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    adrNext.NbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 80101a4:	4b2f      	ldr	r3, [pc, #188]	@ (8010264 <Send+0x1b4>)
 80101a6:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 80101aa:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80101ae:	4b2d      	ldr	r3, [pc, #180]	@ (8010264 <Send+0x1b4>)
 80101b0:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 80101b4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 80101b8:	4b2a      	ldr	r3, [pc, #168]	@ (8010264 <Send+0x1b4>)
 80101ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80101be:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 80101c2:	f107 0014 	add.w	r0, r7, #20
 80101c6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80101ca:	9300      	str	r3, [sp, #0]
 80101cc:	4b27      	ldr	r3, [pc, #156]	@ (801026c <Send+0x1bc>)
 80101ce:	4a28      	ldr	r2, [pc, #160]	@ (8010270 <Send+0x1c0>)
 80101d0:	4928      	ldr	r1, [pc, #160]	@ (8010274 <Send+0x1c4>)
 80101d2:	f002 fbc9 	bl	8012968 <LoRaMacAdrCalcNext>
 80101d6:	4603      	mov	r3, r0
 80101d8:	461a      	mov	r2, r3
 80101da:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80101de:	f362 1386 	bfi	r3, r2, #6, #1
 80101e2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower,
                                               &Nvm.MacGroup2.MacParams.ChannelsNbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 80101e6:	7afa      	ldrb	r2, [r7, #11]
 80101e8:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 80101ec:	893b      	ldrh	r3, [r7, #8]
 80101ee:	9300      	str	r3, [sp, #0]
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	68f8      	ldr	r0, [r7, #12]
 80101f4:	f000 fc42 	bl	8010a7c <PrepareFrame>
 80101f8:	4603      	mov	r3, r0
 80101fa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 80101fe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010202:	2b00      	cmp	r3, #0
 8010204:	d003      	beq.n	801020e <Send+0x15e>
 8010206:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801020a:	2b0a      	cmp	r3, #10
 801020c:	d107      	bne.n	801021e <Send+0x16e>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 801020e:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8010212:	4618      	mov	r0, r3
 8010214:	f000 f96e 	bl	80104f4 <ScheduleTx>
 8010218:	4603      	mov	r3, r0
 801021a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 801021e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010222:	2b00      	cmp	r3, #0
 8010224:	d00a      	beq.n	801023c <Send+0x18c>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 8010226:	4a0f      	ldr	r2, [pc, #60]	@ (8010264 <Send+0x1b4>)
 8010228:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 801022c:	f882 3039 	strb.w	r3, [r2, #57]	@ 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 8010230:	4a0c      	ldr	r2, [pc, #48]	@ (8010264 <Send+0x1b4>)
 8010232:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8010236:	f882 3038 	strb.w	r3, [r2, #56]	@ 0x38
 801023a:	e00d      	b.n	8010258 <Send+0x1a8>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 801023c:	4b09      	ldr	r3, [pc, #36]	@ (8010264 <Send+0x1b4>)
 801023e:	2200      	movs	r2, #0
 8010240:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 8010244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010246:	4a07      	ldr	r2, [pc, #28]	@ (8010264 <Send+0x1b4>)
 8010248:	6293      	str	r3, [r2, #40]	@ 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 801024a:	f002 fedb 	bl	8013004 <LoRaMacCommandsRemoveNoneStickyCmds>
 801024e:	4603      	mov	r3, r0
 8010250:	2b00      	cmp	r3, #0
 8010252:	d001      	beq.n	8010258 <Send+0x1a8>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010254:	2313      	movs	r3, #19
 8010256:	e001      	b.n	801025c <Send+0x1ac>
        }
    }
    return status;
 8010258:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 801025c:	4618      	mov	r0, r3
 801025e:	3730      	adds	r7, #48	@ 0x30
 8010260:	46bd      	mov	sp, r7
 8010262:	bd80      	pop	{r7, pc}
 8010264:	20000df8 	.word	0x20000df8
 8010268:	200008d8 	.word	0x200008d8
 801026c:	20000e58 	.word	0x20000e58
 8010270:	20000e30 	.word	0x20000e30
 8010274:	20000e31 	.word	0x20000e31

08010278 <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 8010278:	b580      	push	{r7, lr}
 801027a:	b084      	sub	sp, #16
 801027c:	af00      	add	r7, sp, #0
 801027e:	4603      	mov	r3, r0
 8010280:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010282:	2300      	movs	r3, #0
 8010284:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 8010286:	2300      	movs	r3, #0
 8010288:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 801028a:	2301      	movs	r3, #1
 801028c:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 801028e:	79fb      	ldrb	r3, [r7, #7]
 8010290:	2bff      	cmp	r3, #255	@ 0xff
 8010292:	d129      	bne.n	80102e8 <SendReJoinReq+0x70>
    {
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 8010294:	2000      	movs	r0, #0
 8010296:	f7ff f901 	bl	800f49c <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 801029a:	4b1a      	ldr	r3, [pc, #104]	@ (8010304 <SendReJoinReq+0x8c>)
 801029c:	2200      	movs	r2, #0
 801029e:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 80102a2:	4b18      	ldr	r3, [pc, #96]	@ (8010304 <SendReJoinReq+0x8c>)
 80102a4:	4a18      	ldr	r2, [pc, #96]	@ (8010308 <SendReJoinReq+0x90>)
 80102a6:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 80102aa:	4b16      	ldr	r3, [pc, #88]	@ (8010304 <SendReJoinReq+0x8c>)
 80102ac:	22ff      	movs	r2, #255	@ 0xff
 80102ae:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 80102b2:	7b3b      	ldrb	r3, [r7, #12]
 80102b4:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 80102b8:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 80102ba:	7b3a      	ldrb	r2, [r7, #12]
 80102bc:	4b11      	ldr	r3, [pc, #68]	@ (8010304 <SendReJoinReq+0x8c>)
 80102be:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d

            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 80102c2:	f7fc f869 	bl	800c398 <SecureElementGetJoinEui>
 80102c6:	4603      	mov	r3, r0
 80102c8:	2208      	movs	r2, #8
 80102ca:	4619      	mov	r1, r3
 80102cc:	480f      	ldr	r0, [pc, #60]	@ (801030c <SendReJoinReq+0x94>)
 80102ce:	f006 fe30 	bl	8016f32 <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 80102d2:	f7fc f83f 	bl	800c354 <SecureElementGetDevEui>
 80102d6:	4603      	mov	r3, r0
 80102d8:	2208      	movs	r2, #8
 80102da:	4619      	mov	r1, r3
 80102dc:	480c      	ldr	r0, [pc, #48]	@ (8010310 <SendReJoinReq+0x98>)
 80102de:	f006 fe28 	bl	8016f32 <memcpy1>

            allowDelayedTx = false;
 80102e2:	2300      	movs	r3, #0
 80102e4:	73fb      	strb	r3, [r7, #15]

            break;
 80102e6:	e002      	b.n	80102ee <SendReJoinReq+0x76>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 80102e8:	2302      	movs	r3, #2
 80102ea:	73bb      	strb	r3, [r7, #14]
            break;
 80102ec:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 80102ee:	7bfb      	ldrb	r3, [r7, #15]
 80102f0:	4618      	mov	r0, r3
 80102f2:	f000 f8ff 	bl	80104f4 <ScheduleTx>
 80102f6:	4603      	mov	r3, r0
 80102f8:	73bb      	strb	r3, [r7, #14]
    return status;
 80102fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80102fc:	4618      	mov	r0, r3
 80102fe:	3710      	adds	r7, #16
 8010300:	46bd      	mov	sp, r7
 8010302:	bd80      	pop	{r7, pc}
 8010304:	200008d8 	.word	0x200008d8
 8010308:	200008da 	.word	0x200008da
 801030c:	200009e6 	.word	0x200009e6
 8010310:	200009ee 	.word	0x200009ee

08010314 <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 8010314:	b580      	push	{r7, lr}
 8010316:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8010318:	f002 fc36 	bl	8012b88 <LoRaMacClassBIsBeaconExpected>
 801031c:	4603      	mov	r3, r0
 801031e:	2b00      	cmp	r3, #0
 8010320:	d001      	beq.n	8010326 <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 8010322:	230e      	movs	r3, #14
 8010324:	e013      	b.n	801034e <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8010326:	4b0b      	ldr	r3, [pc, #44]	@ (8010354 <CheckForClassBCollision+0x40>)
 8010328:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 801032c:	2b01      	cmp	r3, #1
 801032e:	d10d      	bne.n	801034c <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8010330:	f002 fc31 	bl	8012b96 <LoRaMacClassBIsPingExpected>
 8010334:	4603      	mov	r3, r0
 8010336:	2b00      	cmp	r3, #0
 8010338:	d001      	beq.n	801033e <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 801033a:	230f      	movs	r3, #15
 801033c:	e007      	b.n	801034e <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 801033e:	f002 fc31 	bl	8012ba4 <LoRaMacClassBIsMulticastExpected>
 8010342:	4603      	mov	r3, r0
 8010344:	2b00      	cmp	r3, #0
 8010346:	d001      	beq.n	801034c <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8010348:	230f      	movs	r3, #15
 801034a:	e000      	b.n	801034e <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 801034c:	2300      	movs	r3, #0
}
 801034e:	4618      	mov	r0, r3
 8010350:	bd80      	pop	{r7, pc}
 8010352:	bf00      	nop
 8010354:	20000df8 	.word	0x20000df8

08010358 <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 8010358:	b590      	push	{r4, r7, lr}
 801035a:	b083      	sub	sp, #12
 801035c:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 801035e:	4b2d      	ldr	r3, [pc, #180]	@ (8010414 <ComputeRxWindowParameters+0xbc>)
 8010360:	f893 4040 	ldrb.w	r4, [r3, #64]	@ 0x40
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8010364:	4b2b      	ldr	r3, [pc, #172]	@ (8010414 <ComputeRxWindowParameters+0xbc>)
 8010366:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 801036a:	4b2a      	ldr	r3, [pc, #168]	@ (8010414 <ComputeRxWindowParameters+0xbc>)
 801036c:	f893 1075 	ldrb.w	r1, [r3, #117]	@ 0x75
 8010370:	4b28      	ldr	r3, [pc, #160]	@ (8010414 <ComputeRxWindowParameters+0xbc>)
 8010372:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 8010376:	4b27      	ldr	r3, [pc, #156]	@ (8010414 <ComputeRxWindowParameters+0xbc>)
 8010378:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 801037c:	b25b      	sxtb	r3, r3
 801037e:	f004 fc8c 	bl	8014c9a <RegionApplyDrOffset>
 8010382:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8010384:	b259      	sxtb	r1, r3
 8010386:	4b23      	ldr	r3, [pc, #140]	@ (8010414 <ComputeRxWindowParameters+0xbc>)
 8010388:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 801038c:	4b21      	ldr	r3, [pc, #132]	@ (8010414 <ComputeRxWindowParameters+0xbc>)
 801038e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010390:	4821      	ldr	r0, [pc, #132]	@ (8010418 <ComputeRxWindowParameters+0xc0>)
 8010392:	9000      	str	r0, [sp, #0]
 8010394:	4620      	mov	r0, r4
 8010396:	f004 fba2 	bl	8014ade <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 801039a:	4b1e      	ldr	r3, [pc, #120]	@ (8010414 <ComputeRxWindowParameters+0xbc>)
 801039c:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 80103a0:	4b1c      	ldr	r3, [pc, #112]	@ (8010414 <ComputeRxWindowParameters+0xbc>)
 80103a2:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80103a6:	b259      	sxtb	r1, r3
 80103a8:	4b1a      	ldr	r3, [pc, #104]	@ (8010414 <ComputeRxWindowParameters+0xbc>)
 80103aa:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 80103ae:	4b19      	ldr	r3, [pc, #100]	@ (8010414 <ComputeRxWindowParameters+0xbc>)
 80103b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80103b2:	4c1a      	ldr	r4, [pc, #104]	@ (801041c <ComputeRxWindowParameters+0xc4>)
 80103b4:	9400      	str	r4, [sp, #0]
 80103b6:	f004 fb92 	bl	8014ade <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 80103ba:	4b16      	ldr	r3, [pc, #88]	@ (8010414 <ComputeRxWindowParameters+0xbc>)
 80103bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80103be:	4a18      	ldr	r2, [pc, #96]	@ (8010420 <ComputeRxWindowParameters+0xc8>)
 80103c0:	f8d2 23c4 	ldr.w	r2, [r2, #964]	@ 0x3c4
 80103c4:	4413      	add	r3, r2
 80103c6:	4a16      	ldr	r2, [pc, #88]	@ (8010420 <ComputeRxWindowParameters+0xc8>)
 80103c8:	f8c2 33b0 	str.w	r3, [r2, #944]	@ 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 80103cc:	4b11      	ldr	r3, [pc, #68]	@ (8010414 <ComputeRxWindowParameters+0xbc>)
 80103ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80103d0:	4a13      	ldr	r2, [pc, #76]	@ (8010420 <ComputeRxWindowParameters+0xc8>)
 80103d2:	f8d2 23dc 	ldr.w	r2, [r2, #988]	@ 0x3dc
 80103d6:	4413      	add	r3, r2
 80103d8:	4a11      	ldr	r2, [pc, #68]	@ (8010420 <ComputeRxWindowParameters+0xc8>)
 80103da:	f8c2 33b4 	str.w	r3, [r2, #948]	@ 0x3b4

    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80103de:	4b0d      	ldr	r3, [pc, #52]	@ (8010414 <ComputeRxWindowParameters+0xbc>)
 80103e0:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d111      	bne.n	801040c <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 80103e8:	4b0a      	ldr	r3, [pc, #40]	@ (8010414 <ComputeRxWindowParameters+0xbc>)
 80103ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80103ec:	4a0c      	ldr	r2, [pc, #48]	@ (8010420 <ComputeRxWindowParameters+0xc8>)
 80103ee:	f8d2 23c4 	ldr.w	r2, [r2, #964]	@ 0x3c4
 80103f2:	4413      	add	r3, r2
 80103f4:	4a0a      	ldr	r2, [pc, #40]	@ (8010420 <ComputeRxWindowParameters+0xc8>)
 80103f6:	f8c2 33b0 	str.w	r3, [r2, #944]	@ 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 80103fa:	4b06      	ldr	r3, [pc, #24]	@ (8010414 <ComputeRxWindowParameters+0xbc>)
 80103fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80103fe:	4a08      	ldr	r2, [pc, #32]	@ (8010420 <ComputeRxWindowParameters+0xc8>)
 8010400:	f8d2 23dc 	ldr.w	r2, [r2, #988]	@ 0x3dc
 8010404:	4413      	add	r3, r2
 8010406:	4a06      	ldr	r2, [pc, #24]	@ (8010420 <ComputeRxWindowParameters+0xc8>)
 8010408:	f8c2 33b4 	str.w	r3, [r2, #948]	@ 0x3b4
    }
}
 801040c:	bf00      	nop
 801040e:	3704      	adds	r7, #4
 8010410:	46bd      	mov	sp, r7
 8010412:	bd90      	pop	{r4, r7, pc}
 8010414:	20000df8 	.word	0x20000df8
 8010418:	20000c90 	.word	0x20000c90
 801041c:	20000ca8 	.word	0x20000ca8
 8010420:	200008d8 	.word	0x200008d8

08010424 <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 8010424:	b580      	push	{r7, lr}
 8010426:	b082      	sub	sp, #8
 8010428:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 801042a:	2300      	movs	r3, #0
 801042c:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 801042e:	4b13      	ldr	r3, [pc, #76]	@ (801047c <VerifyTxFrame+0x58>)
 8010430:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 8010434:	2b00      	cmp	r3, #0
 8010436:	d01b      	beq.n	8010470 <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8010438:	1d3b      	adds	r3, r7, #4
 801043a:	4618      	mov	r0, r3
 801043c:	f002 fe28 	bl	8013090 <LoRaMacCommandsGetSizeSerializedCmds>
 8010440:	4603      	mov	r3, r0
 8010442:	2b00      	cmp	r3, #0
 8010444:	d001      	beq.n	801044a <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010446:	2313      	movs	r3, #19
 8010448:	e013      	b.n	8010472 <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 801044a:	4b0d      	ldr	r3, [pc, #52]	@ (8010480 <VerifyTxFrame+0x5c>)
 801044c:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8010450:	4a0a      	ldr	r2, [pc, #40]	@ (801047c <VerifyTxFrame+0x58>)
 8010452:	f992 1039 	ldrsb.w	r1, [r2, #57]	@ 0x39
 8010456:	687a      	ldr	r2, [r7, #4]
 8010458:	b2d2      	uxtb	r2, r2
 801045a:	4618      	mov	r0, r3
 801045c:	f7ff f918 	bl	800f690 <ValidatePayloadLength>
 8010460:	4603      	mov	r3, r0
 8010462:	f083 0301 	eor.w	r3, r3, #1
 8010466:	b2db      	uxtb	r3, r3
 8010468:	2b00      	cmp	r3, #0
 801046a:	d001      	beq.n	8010470 <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 801046c:	2308      	movs	r3, #8
 801046e:	e000      	b.n	8010472 <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 8010470:	2300      	movs	r3, #0
}
 8010472:	4618      	mov	r0, r3
 8010474:	3708      	adds	r7, #8
 8010476:	46bd      	mov	sp, r7
 8010478:	bd80      	pop	{r7, pc}
 801047a:	bf00      	nop
 801047c:	20000df8 	.word	0x20000df8
 8010480:	200008d8 	.word	0x200008d8

08010484 <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 8010484:	b580      	push	{r7, lr}
 8010486:	b082      	sub	sp, #8
 8010488:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 801048a:	4b18      	ldr	r3, [pc, #96]	@ (80104ec <SerializeTxFrame+0x68>)
 801048c:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8010490:	2b00      	cmp	r3, #0
 8010492:	d002      	beq.n	801049a <SerializeTxFrame+0x16>
 8010494:	2b04      	cmp	r3, #4
 8010496:	d011      	beq.n	80104bc <SerializeTxFrame+0x38>
 8010498:	e021      	b.n	80104de <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 801049a:	4815      	ldr	r0, [pc, #84]	@ (80104f0 <SerializeTxFrame+0x6c>)
 801049c:	f004 f921 	bl	80146e2 <LoRaMacSerializerJoinRequest>
 80104a0:	4603      	mov	r3, r0
 80104a2:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 80104a4:	79fb      	ldrb	r3, [r7, #7]
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	d001      	beq.n	80104ae <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80104aa:	2311      	movs	r3, #17
 80104ac:	e01a      	b.n	80104e4 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 80104ae:	4b0f      	ldr	r3, [pc, #60]	@ (80104ec <SerializeTxFrame+0x68>)
 80104b0:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 80104b4:	461a      	mov	r2, r3
 80104b6:	4b0d      	ldr	r3, [pc, #52]	@ (80104ec <SerializeTxFrame+0x68>)
 80104b8:	801a      	strh	r2, [r3, #0]
            break;
 80104ba:	e012      	b.n	80104e2 <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 80104bc:	480c      	ldr	r0, [pc, #48]	@ (80104f0 <SerializeTxFrame+0x6c>)
 80104be:	f004 f992 	bl	80147e6 <LoRaMacSerializerData>
 80104c2:	4603      	mov	r3, r0
 80104c4:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 80104c6:	79fb      	ldrb	r3, [r7, #7]
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d001      	beq.n	80104d0 <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80104cc:	2311      	movs	r3, #17
 80104ce:	e009      	b.n	80104e4 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 80104d0:	4b06      	ldr	r3, [pc, #24]	@ (80104ec <SerializeTxFrame+0x68>)
 80104d2:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 80104d6:	461a      	mov	r2, r3
 80104d8:	4b04      	ldr	r3, [pc, #16]	@ (80104ec <SerializeTxFrame+0x68>)
 80104da:	801a      	strh	r2, [r3, #0]
            break;
 80104dc:	e001      	b.n	80104e2 <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 80104de:	2303      	movs	r3, #3
 80104e0:	e000      	b.n	80104e4 <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 80104e2:	2300      	movs	r3, #0
}
 80104e4:	4618      	mov	r0, r3
 80104e6:	3708      	adds	r7, #8
 80104e8:	46bd      	mov	sp, r7
 80104ea:	bd80      	pop	{r7, pc}
 80104ec:	200008d8 	.word	0x200008d8
 80104f0:	200009e0 	.word	0x200009e0

080104f4 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 80104f4:	b580      	push	{r7, lr}
 80104f6:	b090      	sub	sp, #64	@ 0x40
 80104f8:	af02      	add	r7, sp, #8
 80104fa:	4603      	mov	r3, r0
 80104fc:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80104fe:	2303      	movs	r3, #3
 8010500:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 8010504:	f7ff ff06 	bl	8010314 <CheckForClassBCollision>
 8010508:	4603      	mov	r3, r0
 801050a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 801050e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010512:	2b00      	cmp	r3, #0
 8010514:	d002      	beq.n	801051c <ScheduleTx+0x28>
    {
        return status;
 8010516:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801051a:	e08f      	b.n	801063c <ScheduleTx+0x148>
    }

    // Update back-off
    CalculateBackOff( );
 801051c:	f000 f8f4 	bl	8010708 <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 8010520:	f7ff ffb0 	bl	8010484 <SerializeTxFrame>
 8010524:	4603      	mov	r3, r0
 8010526:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 801052a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801052e:	2b00      	cmp	r3, #0
 8010530:	d002      	beq.n	8010538 <ScheduleTx+0x44>
    {
        return status;
 8010532:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010536:	e081      	b.n	801063c <ScheduleTx+0x148>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 8010538:	4b42      	ldr	r3, [pc, #264]	@ (8010644 <ScheduleTx+0x150>)
 801053a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801053c:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801053e:	4b41      	ldr	r3, [pc, #260]	@ (8010644 <ScheduleTx+0x150>)
 8010540:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8010544:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 8010546:	4b3f      	ldr	r3, [pc, #252]	@ (8010644 <ScheduleTx+0x150>)
 8010548:	f893 3108 	ldrb.w	r3, [r3, #264]	@ 0x108
 801054c:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 801054e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8010552:	4618      	mov	r0, r3
 8010554:	f00a f90c 	bl	801a770 <SysTimeGetMcuTime>
 8010558:	4638      	mov	r0, r7
 801055a:	4b3a      	ldr	r3, [pc, #232]	@ (8010644 <ScheduleTx+0x150>)
 801055c:	f8d3 2114 	ldr.w	r2, [r3, #276]	@ 0x114
 8010560:	9200      	str	r2, [sp, #0]
 8010562:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8010566:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 801056a:	ca06      	ldmia	r2, {r1, r2}
 801056c:	f00a f861 	bl	801a632 <SysTimeSub>
 8010570:	f107 0320 	add.w	r3, r7, #32
 8010574:	463a      	mov	r2, r7
 8010576:	e892 0003 	ldmia.w	r2, {r0, r1}
 801057a:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 801057e:	4b31      	ldr	r3, [pc, #196]	@ (8010644 <ScheduleTx+0x150>)
 8010580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010582:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 8010584:	2300      	movs	r3, #0
 8010586:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    nextChan.Joined = true;
 801058a:	2301      	movs	r3, #1
 801058c:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 801058e:	4b2e      	ldr	r3, [pc, #184]	@ (8010648 <ScheduleTx+0x154>)
 8010590:	881b      	ldrh	r3, [r3, #0]
 8010592:	857b      	strh	r3, [r7, #42]	@ 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8010594:	4b2b      	ldr	r3, [pc, #172]	@ (8010644 <ScheduleTx+0x150>)
 8010596:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 801059a:	2b00      	cmp	r3, #0
 801059c:	d104      	bne.n	80105a8 <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 801059e:	2301      	movs	r3, #1
 80105a0:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        nextChan.Joined = false;
 80105a4:	2300      	movs	r3, #0
 80105a6:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 80105a8:	4b26      	ldr	r3, [pc, #152]	@ (8010644 <ScheduleTx+0x150>)
 80105aa:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 80105ae:	f107 0114 	add.w	r1, r7, #20
 80105b2:	4b26      	ldr	r3, [pc, #152]	@ (801064c <ScheduleTx+0x158>)
 80105b4:	9300      	str	r3, [sp, #0]
 80105b6:	4b26      	ldr	r3, [pc, #152]	@ (8010650 <ScheduleTx+0x15c>)
 80105b8:	4a26      	ldr	r2, [pc, #152]	@ (8010654 <ScheduleTx+0x160>)
 80105ba:	f004 fb56 	bl	8014c6a <RegionNextChannel>
 80105be:	4603      	mov	r3, r0
 80105c0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if( status != LORAMAC_STATUS_OK )
 80105c4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d022      	beq.n	8010612 <ScheduleTx+0x11e>
    {
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 80105cc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80105d0:	2b0b      	cmp	r3, #11
 80105d2:	d11b      	bne.n	801060c <ScheduleTx+0x118>
 80105d4:	7bfb      	ldrb	r3, [r7, #15]
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d018      	beq.n	801060c <ScheduleTx+0x118>
            ( allowDelayedTx == true ) )
        {
            // Allow delayed transmissions. We have to allow it in case
            // the MAC must retransmit a frame with the frame repetitions
            if( MacCtx.DutyCycleWaitTime != 0 )
 80105da:	4b1b      	ldr	r3, [pc, #108]	@ (8010648 <ScheduleTx+0x154>)
 80105dc:	f8d3 3498 	ldr.w	r3, [r3, #1176]	@ 0x498
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d011      	beq.n	8010608 <ScheduleTx+0x114>
            {// Send later - prepare timer
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 80105e4:	4b18      	ldr	r3, [pc, #96]	@ (8010648 <ScheduleTx+0x154>)
 80105e6:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80105ea:	f043 0320 	orr.w	r3, r3, #32
 80105ee:	4a16      	ldr	r2, [pc, #88]	@ (8010648 <ScheduleTx+0x154>)
 80105f0:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 80105f4:	4b14      	ldr	r3, [pc, #80]	@ (8010648 <ScheduleTx+0x154>)
 80105f6:	f8d3 3498 	ldr.w	r3, [r3, #1176]	@ 0x498
 80105fa:	4619      	mov	r1, r3
 80105fc:	4816      	ldr	r0, [pc, #88]	@ (8010658 <ScheduleTx+0x164>)
 80105fe:	f00a fe55 	bl	801b2ac <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 8010602:	4815      	ldr	r0, [pc, #84]	@ (8010658 <ScheduleTx+0x164>)
 8010604:	f00a fd74 	bl	801b0f0 <UTIL_TIMER_Start>
            }
            return LORAMAC_STATUS_OK;
 8010608:	2300      	movs	r3, #0
 801060a:	e017      	b.n	801063c <ScheduleTx+0x148>
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 801060c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010610:	e014      	b.n	801063c <ScheduleTx+0x148>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 8010612:	f7ff fea1 	bl	8010358 <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 8010616:	f7ff ff05 	bl	8010424 <VerifyTxFrame>
 801061a:	4603      	mov	r3, r0
 801061c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 8010620:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010624:	2b00      	cmp	r3, #0
 8010626:	d002      	beq.n	801062e <ScheduleTx+0x13a>
    {
        return status;
 8010628:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801062c:	e006      	b.n	801063c <ScheduleTx+0x148>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 801062e:	4b06      	ldr	r3, [pc, #24]	@ (8010648 <ScheduleTx+0x154>)
 8010630:	f893 341f 	ldrb.w	r3, [r3, #1055]	@ 0x41f
 8010634:	4618      	mov	r0, r3
 8010636:	f000 fb3b 	bl	8010cb0 <SendFrameOnChannel>
 801063a:	4603      	mov	r3, r0
}
 801063c:	4618      	mov	r0, r3
 801063e:	3738      	adds	r7, #56	@ 0x38
 8010640:	46bd      	mov	sp, r7
 8010642:	bd80      	pop	{r7, pc}
 8010644:	20000df8 	.word	0x20000df8
 8010648:	200008d8 	.word	0x200008d8
 801064c:	20000e28 	.word	0x20000e28
 8010650:	20000d70 	.word	0x20000d70
 8010654:	20000cf7 	.word	0x20000cf7
 8010658:	20000c40 	.word	0x20000c40

0801065c <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 801065c:	b580      	push	{r7, lr}
 801065e:	b084      	sub	sp, #16
 8010660:	af00      	add	r7, sp, #0
 8010662:	4603      	mov	r3, r0
 8010664:	460a      	mov	r2, r1
 8010666:	71fb      	strb	r3, [r7, #7]
 8010668:	4613      	mov	r3, r2
 801066a:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 801066c:	2312      	movs	r3, #18
 801066e:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 8010670:	2300      	movs	r3, #0
 8010672:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 8010674:	4b22      	ldr	r3, [pc, #136]	@ (8010700 <SecureFrame+0xa4>)
 8010676:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 801067a:	2b00      	cmp	r3, #0
 801067c:	d002      	beq.n	8010684 <SecureFrame+0x28>
 801067e:	2b04      	cmp	r3, #4
 8010680:	d011      	beq.n	80106a6 <SecureFrame+0x4a>
 8010682:	e036      	b.n	80106f2 <SecureFrame+0x96>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8010684:	481f      	ldr	r0, [pc, #124]	@ (8010704 <SecureFrame+0xa8>)
 8010686:	f003 fc03 	bl	8013e90 <LoRaMacCryptoPrepareJoinRequest>
 801068a:	4603      	mov	r3, r0
 801068c:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 801068e:	7bfb      	ldrb	r3, [r7, #15]
 8010690:	2b00      	cmp	r3, #0
 8010692:	d001      	beq.n	8010698 <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8010694:	2311      	movs	r3, #17
 8010696:	e02f      	b.n	80106f8 <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8010698:	4b19      	ldr	r3, [pc, #100]	@ (8010700 <SecureFrame+0xa4>)
 801069a:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 801069e:	461a      	mov	r2, r3
 80106a0:	4b17      	ldr	r3, [pc, #92]	@ (8010700 <SecureFrame+0xa4>)
 80106a2:	801a      	strh	r2, [r3, #0]
            break;
 80106a4:	e027      	b.n	80106f6 <SecureFrame+0x9a>
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 80106a6:	f107 0308 	add.w	r3, r7, #8
 80106aa:	4618      	mov	r0, r3
 80106ac:	f003 fb34 	bl	8013d18 <LoRaMacCryptoGetFCntUp>
 80106b0:	4603      	mov	r3, r0
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d001      	beq.n	80106ba <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 80106b6:	2312      	movs	r3, #18
 80106b8:	e01e      	b.n	80106f8 <SecureFrame+0x9c>
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            if( MacCtx.ChannelsNbTransCounter >= 1 )
 80106ba:	4b11      	ldr	r3, [pc, #68]	@ (8010700 <SecureFrame+0xa4>)
 80106bc:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	d002      	beq.n	80106ca <SecureFrame+0x6e>
#endif /* LORAMAC_VERSION */
            {
                fCntUp -= 1;
 80106c4:	68bb      	ldr	r3, [r7, #8]
 80106c6:	3b01      	subs	r3, #1
 80106c8:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 80106ca:	68b8      	ldr	r0, [r7, #8]
 80106cc:	79ba      	ldrb	r2, [r7, #6]
 80106ce:	79f9      	ldrb	r1, [r7, #7]
 80106d0:	4b0c      	ldr	r3, [pc, #48]	@ (8010704 <SecureFrame+0xa8>)
 80106d2:	f003 fced 	bl	80140b0 <LoRaMacCryptoSecureMessage>
 80106d6:	4603      	mov	r3, r0
 80106d8:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 80106da:	7bfb      	ldrb	r3, [r7, #15]
 80106dc:	2b00      	cmp	r3, #0
 80106de:	d001      	beq.n	80106e4 <SecureFrame+0x88>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80106e0:	2311      	movs	r3, #17
 80106e2:	e009      	b.n	80106f8 <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 80106e4:	4b06      	ldr	r3, [pc, #24]	@ (8010700 <SecureFrame+0xa4>)
 80106e6:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 80106ea:	461a      	mov	r2, r3
 80106ec:	4b04      	ldr	r3, [pc, #16]	@ (8010700 <SecureFrame+0xa4>)
 80106ee:	801a      	strh	r2, [r3, #0]
            break;
 80106f0:	e001      	b.n	80106f6 <SecureFrame+0x9a>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 80106f2:	2303      	movs	r3, #3
 80106f4:	e000      	b.n	80106f8 <SecureFrame+0x9c>
    }
    return LORAMAC_STATUS_OK;
 80106f6:	2300      	movs	r3, #0
}
 80106f8:	4618      	mov	r0, r3
 80106fa:	3710      	adds	r7, #16
 80106fc:	46bd      	mov	sp, r7
 80106fe:	bd80      	pop	{r7, pc}
 8010700:	200008d8 	.word	0x200008d8
 8010704:	200009e0 	.word	0x200009e0

08010708 <CalculateBackOff>:

static void CalculateBackOff( void )
{
 8010708:	b480      	push	{r7}
 801070a:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 801070c:	4b09      	ldr	r3, [pc, #36]	@ (8010734 <CalculateBackOff+0x2c>)
 801070e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010710:	2b00      	cmp	r3, #0
 8010712:	d10a      	bne.n	801072a <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 8010714:	4b07      	ldr	r3, [pc, #28]	@ (8010734 <CalculateBackOff+0x2c>)
 8010716:	f8b3 310c 	ldrh.w	r3, [r3, #268]	@ 0x10c
 801071a:	3b01      	subs	r3, #1
 801071c:	4a06      	ldr	r2, [pc, #24]	@ (8010738 <CalculateBackOff+0x30>)
 801071e:	f8d2 2420 	ldr.w	r2, [r2, #1056]	@ 0x420
 8010722:	fb02 f303 	mul.w	r3, r2, r3
 8010726:	4a03      	ldr	r2, [pc, #12]	@ (8010734 <CalculateBackOff+0x2c>)
 8010728:	6313      	str	r3, [r2, #48]	@ 0x30
    }
}
 801072a:	bf00      	nop
 801072c:	46bd      	mov	sp, r7
 801072e:	bc80      	pop	{r7}
 8010730:	4770      	bx	lr
 8010732:	bf00      	nop
 8010734:	20000df8 	.word	0x20000df8
 8010738:	200008d8 	.word	0x200008d8

0801073c <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 801073c:	b580      	push	{r7, lr}
 801073e:	b082      	sub	sp, #8
 8010740:	af00      	add	r7, sp, #0
 8010742:	4603      	mov	r3, r0
 8010744:	7139      	strb	r1, [r7, #4]
 8010746:	71fb      	strb	r3, [r7, #7]
 8010748:	4613      	mov	r3, r2
 801074a:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 801074c:	79fb      	ldrb	r3, [r7, #7]
 801074e:	2b00      	cmp	r3, #0
 8010750:	d002      	beq.n	8010758 <RemoveMacCommands+0x1c>
 8010752:	79fb      	ldrb	r3, [r7, #7]
 8010754:	2b01      	cmp	r3, #1
 8010756:	d10d      	bne.n	8010774 <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 8010758:	79bb      	ldrb	r3, [r7, #6]
 801075a:	2b01      	cmp	r3, #1
 801075c:	d108      	bne.n	8010770 <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 801075e:	793b      	ldrb	r3, [r7, #4]
 8010760:	f003 0320 	and.w	r3, r3, #32
 8010764:	b2db      	uxtb	r3, r3
 8010766:	2b00      	cmp	r3, #0
 8010768:	d004      	beq.n	8010774 <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 801076a:	f002 fc6f 	bl	801304c <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 801076e:	e001      	b.n	8010774 <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 8010770:	f002 fc6c 	bl	801304c <LoRaMacCommandsRemoveStickyAnsCmds>
}
 8010774:	bf00      	nop
 8010776:	3708      	adds	r7, #8
 8010778:	46bd      	mov	sp, r7
 801077a:	bd80      	pop	{r7, pc}

0801077c <ResetMacParameters>:

static void ResetMacParameters( void )
{
 801077c:	b5b0      	push	{r4, r5, r7, lr}
 801077e:	b090      	sub	sp, #64	@ 0x40
 8010780:	af00      	add	r7, sp, #0
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 8010782:	4b70      	ldr	r3, [pc, #448]	@ (8010944 <ResetMacParameters+0x1c8>)
 8010784:	2200      	movs	r2, #0
 8010786:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 801078a:	4b6e      	ldr	r3, [pc, #440]	@ (8010944 <ResetMacParameters+0x1c8>)
 801078c:	2200      	movs	r2, #0
 801078e:	629a      	str	r2, [r3, #40]	@ 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 8010790:	4b6d      	ldr	r3, [pc, #436]	@ (8010948 <ResetMacParameters+0x1cc>)
 8010792:	2200      	movs	r2, #0
 8010794:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetries = 1;
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetry = false;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RetransmitTimeoutRetry = false;
 8010798:	4b6b      	ldr	r3, [pc, #428]	@ (8010948 <ResetMacParameters+0x1cc>)
 801079a:	2200      	movs	r2, #0
 801079c:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
    MacCtx.ResponseTimeoutStartTime = 0;
 80107a0:	4b69      	ldr	r3, [pc, #420]	@ (8010948 <ResetMacParameters+0x1cc>)
 80107a2:	2200      	movs	r2, #0
 80107a4:	f8c3 249c 	str.w	r2, [r3, #1180]	@ 0x49c
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.MaxDCycle = 0;
 80107a8:	4b66      	ldr	r3, [pc, #408]	@ (8010944 <ResetMacParameters+0x1c8>)
 80107aa:	2200      	movs	r2, #0
 80107ac:	f883 2107 	strb.w	r2, [r3, #263]	@ 0x107
    Nvm.MacGroup2.AggregatedDCycle = 1;
 80107b0:	4b64      	ldr	r3, [pc, #400]	@ (8010944 <ResetMacParameters+0x1c8>)
 80107b2:	2201      	movs	r2, #1
 80107b4:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 80107b8:	4b62      	ldr	r3, [pc, #392]	@ (8010944 <ResetMacParameters+0x1c8>)
 80107ba:	f993 20cc 	ldrsb.w	r2, [r3, #204]	@ 0xcc
 80107be:	4b61      	ldr	r3, [pc, #388]	@ (8010944 <ResetMacParameters+0x1c8>)
 80107c0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 80107c4:	4b5f      	ldr	r3, [pc, #380]	@ (8010944 <ResetMacParameters+0x1c8>)
 80107c6:	f993 20cd 	ldrsb.w	r2, [r3, #205]	@ 0xcd
 80107ca:	4b5e      	ldr	r3, [pc, #376]	@ (8010944 <ResetMacParameters+0x1c8>)
 80107cc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 80107d0:	4b5c      	ldr	r3, [pc, #368]	@ (8010944 <ResetMacParameters+0x1c8>)
 80107d2:	f893 20a5 	ldrb.w	r2, [r3, #165]	@ 0xa5
 80107d6:	4b5b      	ldr	r3, [pc, #364]	@ (8010944 <ResetMacParameters+0x1c8>)
 80107d8:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 80107dc:	4b59      	ldr	r3, [pc, #356]	@ (8010944 <ResetMacParameters+0x1c8>)
 80107de:	4a59      	ldr	r2, [pc, #356]	@ (8010944 <ResetMacParameters+0x1c8>)
 80107e0:	3364      	adds	r3, #100	@ 0x64
 80107e2:	32a8      	adds	r2, #168	@ 0xa8
 80107e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80107e8:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 80107ec:	4b55      	ldr	r3, [pc, #340]	@ (8010944 <ResetMacParameters+0x1c8>)
 80107ee:	4a55      	ldr	r2, [pc, #340]	@ (8010944 <ResetMacParameters+0x1c8>)
 80107f0:	336c      	adds	r3, #108	@ 0x6c
 80107f2:	32b0      	adds	r2, #176	@ 0xb0
 80107f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80107f8:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 80107fc:	4b51      	ldr	r3, [pc, #324]	@ (8010944 <ResetMacParameters+0x1c8>)
 80107fe:	f893 20b8 	ldrb.w	r2, [r3, #184]	@ 0xb8
 8010802:	4b50      	ldr	r3, [pc, #320]	@ (8010944 <ResetMacParameters+0x1c8>)
 8010804:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 8010808:	4b4e      	ldr	r3, [pc, #312]	@ (8010944 <ResetMacParameters+0x1c8>)
 801080a:	f893 20b9 	ldrb.w	r2, [r3, #185]	@ 0xb9
 801080e:	4b4d      	ldr	r3, [pc, #308]	@ (8010944 <ResetMacParameters+0x1c8>)
 8010810:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 8010814:	4b4b      	ldr	r3, [pc, #300]	@ (8010944 <ResetMacParameters+0x1c8>)
 8010816:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 801081a:	4a4a      	ldr	r2, [pc, #296]	@ (8010944 <ResetMacParameters+0x1c8>)
 801081c:	6793      	str	r3, [r2, #120]	@ 0x78
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 801081e:	4b49      	ldr	r3, [pc, #292]	@ (8010944 <ResetMacParameters+0x1c8>)
 8010820:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8010824:	4a47      	ldr	r2, [pc, #284]	@ (8010944 <ResetMacParameters+0x1c8>)
 8010826:	67d3      	str	r3, [r2, #124]	@ 0x7c

    MacCtx.NodeAckRequested = false;
 8010828:	4b47      	ldr	r3, [pc, #284]	@ (8010948 <ResetMacParameters+0x1cc>)
 801082a:	2200      	movs	r2, #0
 801082c:	f883 241e 	strb.w	r2, [r3, #1054]	@ 0x41e
    Nvm.MacGroup1.SrvAckRequested = false;
 8010830:	4b44      	ldr	r3, [pc, #272]	@ (8010944 <ResetMacParameters+0x1c8>)
 8010832:	2200      	movs	r2, #0
 8010834:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 8010838:	4b42      	ldr	r3, [pc, #264]	@ (8010944 <ResetMacParameters+0x1c8>)
 801083a:	2200      	movs	r2, #0
 801083c:	f883 2109 	strb.w	r2, [r3, #265]	@ 0x109
    Nvm.MacGroup2.DownlinkReceived = false;
 8010840:	4b40      	ldr	r3, [pc, #256]	@ (8010944 <ResetMacParameters+0x1c8>)
 8010842:	2200      	movs	r2, #0
 8010844:	f883 210a 	strb.w	r2, [r3, #266]	@ 0x10a
#endif /* LORAMAC_VERSION */

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 8010848:	2301      	movs	r3, #1
 801084a:	743b      	strb	r3, [r7, #16]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 801084c:	4b3f      	ldr	r3, [pc, #252]	@ (801094c <ResetMacParameters+0x1d0>)
 801084e:	607b      	str	r3, [r7, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8010850:	4b3f      	ldr	r3, [pc, #252]	@ (8010950 <ResetMacParameters+0x1d4>)
 8010852:	60bb      	str	r3, [r7, #8]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    params.Bands = &RegionBands;
 8010854:	4b3f      	ldr	r3, [pc, #252]	@ (8010954 <ResetMacParameters+0x1d8>)
 8010856:	60fb      	str	r3, [r7, #12]
#endif /* LORAMAC_VERSION */
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8010858:	4b3a      	ldr	r3, [pc, #232]	@ (8010944 <ResetMacParameters+0x1c8>)
 801085a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801085e:	1d3a      	adds	r2, r7, #4
 8010860:	4611      	mov	r1, r2
 8010862:	4618      	mov	r0, r3
 8010864:	f004 f8ed 	bl	8014a42 <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 8010868:	4b37      	ldr	r3, [pc, #220]	@ (8010948 <ResetMacParameters+0x1cc>)
 801086a:	2200      	movs	r2, #0
 801086c:	f883 241f 	strb.w	r2, [r3, #1055]	@ 0x41f

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8010870:	4b35      	ldr	r3, [pc, #212]	@ (8010948 <ResetMacParameters+0x1cc>)
 8010872:	f893 241f 	ldrb.w	r2, [r3, #1055]	@ 0x41f
 8010876:	4b34      	ldr	r3, [pc, #208]	@ (8010948 <ResetMacParameters+0x1cc>)
 8010878:	f883 23d0 	strb.w	r2, [r3, #976]	@ 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 801087c:	4b31      	ldr	r3, [pc, #196]	@ (8010944 <ResetMacParameters+0x1c8>)
 801087e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010880:	4a31      	ldr	r2, [pc, #196]	@ (8010948 <ResetMacParameters+0x1cc>)
 8010882:	f8c2 33d4 	str.w	r3, [r2, #980]	@ 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010886:	4b2f      	ldr	r3, [pc, #188]	@ (8010944 <ResetMacParameters+0x1c8>)
 8010888:	f893 2075 	ldrb.w	r2, [r3, #117]	@ 0x75
 801088c:	4b2e      	ldr	r3, [pc, #184]	@ (8010948 <ResetMacParameters+0x1cc>)
 801088e:	f883 23e0 	strb.w	r2, [r3, #992]	@ 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8010892:	4b2c      	ldr	r3, [pc, #176]	@ (8010944 <ResetMacParameters+0x1c8>)
 8010894:	f893 2080 	ldrb.w	r2, [r3, #128]	@ 0x80
 8010898:	4b2b      	ldr	r3, [pc, #172]	@ (8010948 <ResetMacParameters+0x1cc>)
 801089a:	f883 23e1 	strb.w	r2, [r3, #993]	@ 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 801089e:	4b2a      	ldr	r3, [pc, #168]	@ (8010948 <ResetMacParameters+0x1cc>)
 80108a0:	2200      	movs	r2, #0
 80108a2:	f883 23e2 	strb.w	r2, [r3, #994]	@ 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 80108a6:	4b28      	ldr	r3, [pc, #160]	@ (8010948 <ResetMacParameters+0x1cc>)
 80108a8:	2201      	movs	r2, #1
 80108aa:	f883 23e3 	strb.w	r2, [r3, #995]	@ 0x3e3
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 80108ae:	4b25      	ldr	r3, [pc, #148]	@ (8010944 <ResetMacParameters+0x1c8>)
 80108b0:	f893 211c 	ldrb.w	r2, [r3, #284]	@ 0x11c
 80108b4:	4b24      	ldr	r3, [pc, #144]	@ (8010948 <ResetMacParameters+0x1cc>)
 80108b6:	f883 23e4 	strb.w	r2, [r3, #996]	@ 0x3e4
#endif /* LORAMAC_VERSION */

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 80108ba:	4a23      	ldr	r2, [pc, #140]	@ (8010948 <ResetMacParameters+0x1cc>)
 80108bc:	4b22      	ldr	r3, [pc, #136]	@ (8010948 <ResetMacParameters+0x1cc>)
 80108be:	f502 747a 	add.w	r4, r2, #1000	@ 0x3e8
 80108c2:	f503 7574 	add.w	r5, r3, #976	@ 0x3d0
 80108c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80108c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80108ca:	e895 0003 	ldmia.w	r5, {r0, r1}
 80108ce:	e884 0003 	stmia.w	r4, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 80108d2:	4b1d      	ldr	r3, [pc, #116]	@ (8010948 <ResetMacParameters+0x1cc>)
 80108d4:	2201      	movs	r2, #1
 80108d6:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80108da:	4b1b      	ldr	r3, [pc, #108]	@ (8010948 <ResetMacParameters+0x1cc>)
 80108dc:	2202      	movs	r2, #2
 80108de:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 80108e2:	2300      	movs	r3, #0
 80108e4:	63bb      	str	r3, [r7, #56]	@ 0x38
    classBCallbacks.MacProcessNotify = NULL;
 80108e6:	2300      	movs	r3, #0
 80108e8:	63fb      	str	r3, [r7, #60]	@ 0x3c

    if( MacCtx.MacCallbacks != NULL )
 80108ea:	4b17      	ldr	r3, [pc, #92]	@ (8010948 <ResetMacParameters+0x1cc>)
 80108ec:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d009      	beq.n	8010908 <ResetMacParameters+0x18c>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 80108f4:	4b14      	ldr	r3, [pc, #80]	@ (8010948 <ResetMacParameters+0x1cc>)
 80108f6:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 80108fa:	685b      	ldr	r3, [r3, #4]
 80108fc:	63bb      	str	r3, [r7, #56]	@ 0x38
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 80108fe:	4b12      	ldr	r3, [pc, #72]	@ (8010948 <ResetMacParameters+0x1cc>)
 8010900:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8010904:	691b      	ldr	r3, [r3, #16]
 8010906:	63fb      	str	r3, [r7, #60]	@ 0x3c
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 8010908:	4b13      	ldr	r3, [pc, #76]	@ (8010958 <ResetMacParameters+0x1dc>)
 801090a:	617b      	str	r3, [r7, #20]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 801090c:	4b13      	ldr	r3, [pc, #76]	@ (801095c <ResetMacParameters+0x1e0>)
 801090e:	61bb      	str	r3, [r7, #24]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 8010910:	4b13      	ldr	r3, [pc, #76]	@ (8010960 <ResetMacParameters+0x1e4>)
 8010912:	61fb      	str	r3, [r7, #28]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 8010914:	4b13      	ldr	r3, [pc, #76]	@ (8010964 <ResetMacParameters+0x1e8>)
 8010916:	623b      	str	r3, [r7, #32]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 8010918:	4b13      	ldr	r3, [pc, #76]	@ (8010968 <ResetMacParameters+0x1ec>)
 801091a:	627b      	str	r3, [r7, #36]	@ 0x24
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 801091c:	4b13      	ldr	r3, [pc, #76]	@ (801096c <ResetMacParameters+0x1f0>)
 801091e:	62bb      	str	r3, [r7, #40]	@ 0x28
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 8010920:	4b13      	ldr	r3, [pc, #76]	@ (8010970 <ResetMacParameters+0x1f4>)
 8010922:	62fb      	str	r3, [r7, #44]	@ 0x2c
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 8010924:	4b13      	ldr	r3, [pc, #76]	@ (8010974 <ResetMacParameters+0x1f8>)
 8010926:	633b      	str	r3, [r7, #48]	@ 0x30
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
 8010928:	4b13      	ldr	r3, [pc, #76]	@ (8010978 <ResetMacParameters+0x1fc>)
 801092a:	637b      	str	r3, [r7, #52]	@ 0x34
#endif /* LORAMAC_VERSION */

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 801092c:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8010930:	f107 0314 	add.w	r3, r7, #20
 8010934:	4a11      	ldr	r2, [pc, #68]	@ (801097c <ResetMacParameters+0x200>)
 8010936:	4618      	mov	r0, r3
 8010938:	f002 f8cf 	bl	8012ada <LoRaMacClassBInit>
}
 801093c:	bf00      	nop
 801093e:	3740      	adds	r7, #64	@ 0x40
 8010940:	46bd      	mov	sp, r7
 8010942:	bdb0      	pop	{r4, r5, r7, pc}
 8010944:	20000df8 	.word	0x20000df8
 8010948:	200008d8 	.word	0x200008d8
 801094c:	20000fdc 	.word	0x20000fdc
 8010950:	20000fe0 	.word	0x20000fe0
 8010954:	200018f0 	.word	0x200018f0
 8010958:	20000d44 	.word	0x20000d44
 801095c:	20000cfc 	.word	0x20000cfc
 8010960:	20000d30 	.word	0x20000d30
 8010964:	20000d6d 	.word	0x20000d6d
 8010968:	20000ecc 	.word	0x20000ecc
 801096c:	20000e38 	.word	0x20000e38
 8010970:	20000e3c 	.word	0x20000e3c
 8010974:	20000ed0 	.word	0x20000ed0
 8010978:	20000f14 	.word	0x20000f14
 801097c:	2000135c 	.word	0x2000135c

08010980 <RxWindowSetup>:
 *
 * \param [in] rxTimer  Window timer to be topped.
 * \param [in] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 8010980:	b580      	push	{r7, lr}
 8010982:	b082      	sub	sp, #8
 8010984:	af00      	add	r7, sp, #0
 8010986:	6078      	str	r0, [r7, #4]
 8010988:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 801098a:	6878      	ldr	r0, [r7, #4]
 801098c:	f00a fc1e 	bl	801b1cc <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 8010990:	4b11      	ldr	r3, [pc, #68]	@ (80109d8 <RxWindowSetup+0x58>)
 8010992:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010994:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8010996:	4b11      	ldr	r3, [pc, #68]	@ (80109dc <RxWindowSetup+0x5c>)
 8010998:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801099c:	4a10      	ldr	r2, [pc, #64]	@ (80109e0 <RxWindowSetup+0x60>)
 801099e:	6839      	ldr	r1, [r7, #0]
 80109a0:	4618      	mov	r0, r3
 80109a2:	f004 f8b6 	bl	8014b12 <RegionRxConfig>
 80109a6:	4603      	mov	r3, r0
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d010      	beq.n	80109ce <RxWindowSetup+0x4e>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 80109ac:	4b0d      	ldr	r3, [pc, #52]	@ (80109e4 <RxWindowSetup+0x64>)
 80109ae:	f893 2428 	ldrb.w	r2, [r3, #1064]	@ 0x428
 80109b2:	4b0c      	ldr	r3, [pc, #48]	@ (80109e4 <RxWindowSetup+0x64>)
 80109b4:	f883 246e 	strb.w	r2, [r3, #1134]	@ 0x46e
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 80109b8:	4b07      	ldr	r3, [pc, #28]	@ (80109d8 <RxWindowSetup+0x58>)
 80109ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80109bc:	4a07      	ldr	r2, [pc, #28]	@ (80109dc <RxWindowSetup+0x5c>)
 80109be:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80109c0:	4610      	mov	r0, r2
 80109c2:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 80109c4:	683b      	ldr	r3, [r7, #0]
 80109c6:	7cda      	ldrb	r2, [r3, #19]
 80109c8:	4b06      	ldr	r3, [pc, #24]	@ (80109e4 <RxWindowSetup+0x64>)
 80109ca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
    }
}
 80109ce:	bf00      	nop
 80109d0:	3708      	adds	r7, #8
 80109d2:	46bd      	mov	sp, r7
 80109d4:	bd80      	pop	{r7, pc}
 80109d6:	bf00      	nop
 80109d8:	0801f464 	.word	0x0801f464
 80109dc:	20000df8 	.word	0x20000df8
 80109e0:	20000d00 	.word	0x20000d00
 80109e4:	200008d8 	.word	0x200008d8

080109e8 <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 80109e8:	b590      	push	{r4, r7, lr}
 80109ea:	b083      	sub	sp, #12
 80109ec:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80109ee:	4b1e      	ldr	r3, [pc, #120]	@ (8010a68 <OpenContinuousRxCWindow+0x80>)
 80109f0:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 80109f4:	4b1c      	ldr	r3, [pc, #112]	@ (8010a68 <OpenContinuousRxCWindow+0x80>)
 80109f6:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80109fa:	b259      	sxtb	r1, r3
 80109fc:	4b1a      	ldr	r3, [pc, #104]	@ (8010a68 <OpenContinuousRxCWindow+0x80>)
 80109fe:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8010a02:	4b19      	ldr	r3, [pc, #100]	@ (8010a68 <OpenContinuousRxCWindow+0x80>)
 8010a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010a06:	4c19      	ldr	r4, [pc, #100]	@ (8010a6c <OpenContinuousRxCWindow+0x84>)
 8010a08:	9400      	str	r4, [sp, #0]
 8010a0a:	f004 f868 	bl	8014ade <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8010a0e:	4b18      	ldr	r3, [pc, #96]	@ (8010a70 <OpenContinuousRxCWindow+0x88>)
 8010a10:	2202      	movs	r2, #2
 8010a12:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8010a16:	4b14      	ldr	r3, [pc, #80]	@ (8010a68 <OpenContinuousRxCWindow+0x80>)
 8010a18:	f893 211c 	ldrb.w	r2, [r3, #284]	@ 0x11c
 8010a1c:	4b14      	ldr	r3, [pc, #80]	@ (8010a70 <OpenContinuousRxCWindow+0x88>)
 8010a1e:	f883 23fc 	strb.w	r2, [r3, #1020]	@ 0x3fc
#endif /* LORAMAC_VERSION */
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8010a22:	4b13      	ldr	r3, [pc, #76]	@ (8010a70 <OpenContinuousRxCWindow+0x88>)
 8010a24:	2201      	movs	r2, #1
 8010a26:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8010a2a:	4b0f      	ldr	r3, [pc, #60]	@ (8010a68 <OpenContinuousRxCWindow+0x80>)
 8010a2c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010a30:	4a10      	ldr	r2, [pc, #64]	@ (8010a74 <OpenContinuousRxCWindow+0x8c>)
 8010a32:	490e      	ldr	r1, [pc, #56]	@ (8010a6c <OpenContinuousRxCWindow+0x84>)
 8010a34:	4618      	mov	r0, r3
 8010a36:	f004 f86c 	bl	8014b12 <RegionRxConfig>
 8010a3a:	4603      	mov	r3, r0
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	d00f      	beq.n	8010a60 <OpenContinuousRxCWindow+0x78>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 8010a40:	4b0b      	ldr	r3, [pc, #44]	@ (8010a70 <OpenContinuousRxCWindow+0x88>)
 8010a42:	f893 2428 	ldrb.w	r2, [r3, #1064]	@ 0x428
 8010a46:	4b0a      	ldr	r3, [pc, #40]	@ (8010a70 <OpenContinuousRxCWindow+0x88>)
 8010a48:	f883 246e 	strb.w	r2, [r3, #1134]	@ 0x46e
        Radio.Rx( 0 ); // Continuous mode
 8010a4c:	4b0a      	ldr	r3, [pc, #40]	@ (8010a78 <OpenContinuousRxCWindow+0x90>)
 8010a4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010a50:	2000      	movs	r0, #0
 8010a52:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 8010a54:	4b06      	ldr	r3, [pc, #24]	@ (8010a70 <OpenContinuousRxCWindow+0x88>)
 8010a56:	f893 23fb 	ldrb.w	r2, [r3, #1019]	@ 0x3fb
 8010a5a:	4b05      	ldr	r3, [pc, #20]	@ (8010a70 <OpenContinuousRxCWindow+0x88>)
 8010a5c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
    }
}
 8010a60:	bf00      	nop
 8010a62:	3704      	adds	r7, #4
 8010a64:	46bd      	mov	sp, r7
 8010a66:	bd90      	pop	{r4, r7, pc}
 8010a68:	20000df8 	.word	0x20000df8
 8010a6c:	20000cc0 	.word	0x20000cc0
 8010a70:	200008d8 	.word	0x200008d8
 8010a74:	20000d00 	.word	0x20000d00
 8010a78:	0801f464 	.word	0x0801f464

08010a7c <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 8010a7c:	b580      	push	{r7, lr}
 8010a7e:	b088      	sub	sp, #32
 8010a80:	af00      	add	r7, sp, #0
 8010a82:	60f8      	str	r0, [r7, #12]
 8010a84:	60b9      	str	r1, [r7, #8]
 8010a86:	603b      	str	r3, [r7, #0]
 8010a88:	4613      	mov	r3, r2
 8010a8a:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 8010a8c:	4b81      	ldr	r3, [pc, #516]	@ (8010c94 <PrepareFrame+0x218>)
 8010a8e:	2200      	movs	r2, #0
 8010a90:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 8010a92:	4b80      	ldr	r3, [pc, #512]	@ (8010c94 <PrepareFrame+0x218>)
 8010a94:	2200      	movs	r2, #0
 8010a96:	f883 241e 	strb.w	r2, [r3, #1054]	@ 0x41e
    uint32_t fCntUp = 0;
 8010a9a:	2300      	movs	r3, #0
 8010a9c:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 8010a9e:	2300      	movs	r3, #0
 8010aa0:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 8010aa2:	2300      	movs	r3, #0
 8010aa4:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 8010aa6:	683b      	ldr	r3, [r7, #0]
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	d101      	bne.n	8010ab0 <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 8010aac:	2300      	movs	r3, #0
 8010aae:	853b      	strh	r3, [r7, #40]	@ 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8010ab0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010ab2:	461a      	mov	r2, r3
 8010ab4:	6839      	ldr	r1, [r7, #0]
 8010ab6:	4878      	ldr	r0, [pc, #480]	@ (8010c98 <PrepareFrame+0x21c>)
 8010ab8:	f006 fa3b 	bl	8016f32 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 8010abc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010abe:	b2da      	uxtb	r2, r3
 8010ac0:	4b74      	ldr	r3, [pc, #464]	@ (8010c94 <PrepareFrame+0x218>)
 8010ac2:	f883 2237 	strb.w	r2, [r3, #567]	@ 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	781a      	ldrb	r2, [r3, #0]
 8010aca:	4b72      	ldr	r3, [pc, #456]	@ (8010c94 <PrepareFrame+0x218>)
 8010acc:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 8010ace:	68fb      	ldr	r3, [r7, #12]
 8010ad0:	781b      	ldrb	r3, [r3, #0]
 8010ad2:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8010ad6:	b2db      	uxtb	r3, r3
 8010ad8:	2b07      	cmp	r3, #7
 8010ada:	f000 80b9 	beq.w	8010c50 <PrepareFrame+0x1d4>
 8010ade:	2b07      	cmp	r3, #7
 8010ae0:	f300 80ce 	bgt.w	8010c80 <PrepareFrame+0x204>
 8010ae4:	2b02      	cmp	r3, #2
 8010ae6:	d006      	beq.n	8010af6 <PrepareFrame+0x7a>
 8010ae8:	2b04      	cmp	r3, #4
 8010aea:	f040 80c9 	bne.w	8010c80 <PrepareFrame+0x204>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 8010aee:	4b69      	ldr	r3, [pc, #420]	@ (8010c94 <PrepareFrame+0x218>)
 8010af0:	2201      	movs	r2, #1
 8010af2:	f883 241e 	strb.w	r2, [r3, #1054]	@ 0x41e
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 8010af6:	4b67      	ldr	r3, [pc, #412]	@ (8010c94 <PrepareFrame+0x218>)
 8010af8:	2204      	movs	r2, #4
 8010afa:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 8010afe:	4b65      	ldr	r3, [pc, #404]	@ (8010c94 <PrepareFrame+0x218>)
 8010b00:	4a66      	ldr	r2, [pc, #408]	@ (8010c9c <PrepareFrame+0x220>)
 8010b02:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8010b06:	4b63      	ldr	r3, [pc, #396]	@ (8010c94 <PrepareFrame+0x218>)
 8010b08:	22ff      	movs	r2, #255	@ 0xff
 8010b0a:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 8010b0e:	68fb      	ldr	r3, [r7, #12]
 8010b10:	781a      	ldrb	r2, [r3, #0]
 8010b12:	4b60      	ldr	r3, [pc, #384]	@ (8010c94 <PrepareFrame+0x218>)
 8010b14:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8010b18:	4a5e      	ldr	r2, [pc, #376]	@ (8010c94 <PrepareFrame+0x218>)
 8010b1a:	79fb      	ldrb	r3, [r7, #7]
 8010b1c:	f882 3128 	strb.w	r3, [r2, #296]	@ 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 8010b20:	4b5f      	ldr	r3, [pc, #380]	@ (8010ca0 <PrepareFrame+0x224>)
 8010b22:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8010b26:	4a5b      	ldr	r2, [pc, #364]	@ (8010c94 <PrepareFrame+0x218>)
 8010b28:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8010b2c:	68bb      	ldr	r3, [r7, #8]
 8010b2e:	781a      	ldrb	r2, [r3, #0]
 8010b30:	4b58      	ldr	r3, [pc, #352]	@ (8010c94 <PrepareFrame+0x218>)
 8010b32:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 8010b36:	4b57      	ldr	r3, [pc, #348]	@ (8010c94 <PrepareFrame+0x218>)
 8010b38:	f893 2237 	ldrb.w	r2, [r3, #567]	@ 0x237
 8010b3c:	4b55      	ldr	r3, [pc, #340]	@ (8010c94 <PrepareFrame+0x218>)
 8010b3e:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 8010b42:	4b54      	ldr	r3, [pc, #336]	@ (8010c94 <PrepareFrame+0x218>)
 8010b44:	4a54      	ldr	r2, [pc, #336]	@ (8010c98 <PrepareFrame+0x21c>)
 8010b46:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8010b4a:	f107 0318 	add.w	r3, r7, #24
 8010b4e:	4618      	mov	r0, r3
 8010b50:	f003 f8e2 	bl	8013d18 <LoRaMacCryptoGetFCntUp>
 8010b54:	4603      	mov	r3, r0
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d001      	beq.n	8010b5e <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8010b5a:	2312      	movs	r3, #18
 8010b5c:	e096      	b.n	8010c8c <PrepareFrame+0x210>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 8010b5e:	69bb      	ldr	r3, [r7, #24]
 8010b60:	b29a      	uxth	r2, r3
 8010b62:	4b4c      	ldr	r3, [pc, #304]	@ (8010c94 <PrepareFrame+0x218>)
 8010b64:	f8a3 2116 	strh.w	r2, [r3, #278]	@ 0x116

            // Reset confirm parameters
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = 0;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            MacCtx.McpsConfirm.NbTrans = 0;
 8010b68:	4b4a      	ldr	r3, [pc, #296]	@ (8010c94 <PrepareFrame+0x218>)
 8010b6a:	2200      	movs	r2, #0
 8010b6c:	f883 2449 	strb.w	r2, [r3, #1097]	@ 0x449
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.AckReceived = false;
 8010b70:	4b48      	ldr	r3, [pc, #288]	@ (8010c94 <PrepareFrame+0x218>)
 8010b72:	2200      	movs	r2, #0
 8010b74:	f883 2448 	strb.w	r2, [r3, #1096]	@ 0x448
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 8010b78:	69bb      	ldr	r3, [r7, #24]
 8010b7a:	4a46      	ldr	r2, [pc, #280]	@ (8010c94 <PrepareFrame+0x218>)
 8010b7c:	f8c2 3450 	str.w	r3, [r2, #1104]	@ 0x450

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8010b80:	f107 0314 	add.w	r3, r7, #20
 8010b84:	4618      	mov	r0, r3
 8010b86:	f002 fa83 	bl	8013090 <LoRaMacCommandsGetSizeSerializedCmds>
 8010b8a:	4603      	mov	r3, r0
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	d001      	beq.n	8010b94 <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010b90:	2313      	movs	r3, #19
 8010b92:	e07b      	b.n	8010c8c <PrepareFrame+0x210>
            }

            if( macCmdsSize > 0 )
 8010b94:	697b      	ldr	r3, [r7, #20]
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d074      	beq.n	8010c84 <PrepareFrame+0x208>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 8010b9a:	4b41      	ldr	r3, [pc, #260]	@ (8010ca0 <PrepareFrame+0x224>)
 8010b9c:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8010ba0:	4618      	mov	r0, r3
 8010ba2:	f7fe fd4d 	bl	800f640 <GetMaxAppPayloadWithoutFOptsLength>
 8010ba6:	4603      	mov	r3, r0
 8010ba8:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8010baa:	4b3a      	ldr	r3, [pc, #232]	@ (8010c94 <PrepareFrame+0x218>)
 8010bac:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d01d      	beq.n	8010bf0 <PrepareFrame+0x174>
 8010bb4:	697b      	ldr	r3, [r7, #20]
 8010bb6:	2b0f      	cmp	r3, #15
 8010bb8:	d81a      	bhi.n	8010bf0 <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 8010bba:	f107 0314 	add.w	r3, r7, #20
 8010bbe:	4a39      	ldr	r2, [pc, #228]	@ (8010ca4 <PrepareFrame+0x228>)
 8010bc0:	4619      	mov	r1, r3
 8010bc2:	200f      	movs	r0, #15
 8010bc4:	f002 fa7a 	bl	80130bc <LoRaMacCommandsSerializeCmds>
 8010bc8:	4603      	mov	r3, r0
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d001      	beq.n	8010bd2 <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010bce:	2313      	movs	r3, #19
 8010bd0:	e05c      	b.n	8010c8c <PrepareFrame+0x210>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 8010bd2:	697b      	ldr	r3, [r7, #20]
 8010bd4:	f003 030f 	and.w	r3, r3, #15
 8010bd8:	b2d9      	uxtb	r1, r3
 8010bda:	68ba      	ldr	r2, [r7, #8]
 8010bdc:	7813      	ldrb	r3, [r2, #0]
 8010bde:	f361 0303 	bfi	r3, r1, #0, #4
 8010be2:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8010be4:	68bb      	ldr	r3, [r7, #8]
 8010be6:	781a      	ldrb	r2, [r3, #0]
 8010be8:	4b2a      	ldr	r3, [pc, #168]	@ (8010c94 <PrepareFrame+0x218>)
 8010bea:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 8010bee:	e049      	b.n	8010c84 <PrepareFrame+0x208>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8010bf0:	4b28      	ldr	r3, [pc, #160]	@ (8010c94 <PrepareFrame+0x218>)
 8010bf2:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d010      	beq.n	8010c1c <PrepareFrame+0x1a0>
 8010bfa:	697b      	ldr	r3, [r7, #20]
 8010bfc:	2b0f      	cmp	r3, #15
 8010bfe:	d90d      	bls.n	8010c1c <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8010c00:	7ffb      	ldrb	r3, [r7, #31]
 8010c02:	f107 0114 	add.w	r1, r7, #20
 8010c06:	4a28      	ldr	r2, [pc, #160]	@ (8010ca8 <PrepareFrame+0x22c>)
 8010c08:	4618      	mov	r0, r3
 8010c0a:	f002 fa57 	bl	80130bc <LoRaMacCommandsSerializeCmds>
 8010c0e:	4603      	mov	r3, r0
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	d001      	beq.n	8010c18 <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010c14:	2313      	movs	r3, #19
 8010c16:	e039      	b.n	8010c8c <PrepareFrame+0x210>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 8010c18:	230a      	movs	r3, #10
 8010c1a:	e037      	b.n	8010c8c <PrepareFrame+0x210>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8010c1c:	7ffb      	ldrb	r3, [r7, #31]
 8010c1e:	f107 0114 	add.w	r1, r7, #20
 8010c22:	4a21      	ldr	r2, [pc, #132]	@ (8010ca8 <PrepareFrame+0x22c>)
 8010c24:	4618      	mov	r0, r3
 8010c26:	f002 fa49 	bl	80130bc <LoRaMacCommandsSerializeCmds>
 8010c2a:	4603      	mov	r3, r0
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d001      	beq.n	8010c34 <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010c30:	2313      	movs	r3, #19
 8010c32:	e02b      	b.n	8010c8c <PrepareFrame+0x210>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 8010c34:	4b17      	ldr	r3, [pc, #92]	@ (8010c94 <PrepareFrame+0x218>)
 8010c36:	2200      	movs	r2, #0
 8010c38:	f883 2128 	strb.w	r2, [r3, #296]	@ 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 8010c3c:	4b15      	ldr	r3, [pc, #84]	@ (8010c94 <PrepareFrame+0x218>)
 8010c3e:	4a1a      	ldr	r2, [pc, #104]	@ (8010ca8 <PrepareFrame+0x22c>)
 8010c40:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8010c44:	697b      	ldr	r3, [r7, #20]
 8010c46:	b2da      	uxtb	r2, r3
 8010c48:	4b12      	ldr	r3, [pc, #72]	@ (8010c94 <PrepareFrame+0x218>)
 8010c4a:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            break;
 8010c4e:	e019      	b.n	8010c84 <PrepareFrame+0x208>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 8010c50:	683b      	ldr	r3, [r7, #0]
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	d018      	beq.n	8010c88 <PrepareFrame+0x20c>
 8010c56:	4b0f      	ldr	r3, [pc, #60]	@ (8010c94 <PrepareFrame+0x218>)
 8010c58:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	d013      	beq.n	8010c88 <PrepareFrame+0x20c>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 8010c60:	4812      	ldr	r0, [pc, #72]	@ (8010cac <PrepareFrame+0x230>)
 8010c62:	4b0c      	ldr	r3, [pc, #48]	@ (8010c94 <PrepareFrame+0x218>)
 8010c64:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8010c68:	461a      	mov	r2, r3
 8010c6a:	6839      	ldr	r1, [r7, #0]
 8010c6c:	f006 f961 	bl	8016f32 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 8010c70:	4b08      	ldr	r3, [pc, #32]	@ (8010c94 <PrepareFrame+0x218>)
 8010c72:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8010c76:	3301      	adds	r3, #1
 8010c78:	b29a      	uxth	r2, r3
 8010c7a:	4b06      	ldr	r3, [pc, #24]	@ (8010c94 <PrepareFrame+0x218>)
 8010c7c:	801a      	strh	r2, [r3, #0]
            }
            break;
 8010c7e:	e003      	b.n	8010c88 <PrepareFrame+0x20c>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8010c80:	2302      	movs	r3, #2
 8010c82:	e003      	b.n	8010c8c <PrepareFrame+0x210>
            break;
 8010c84:	bf00      	nop
 8010c86:	e000      	b.n	8010c8a <PrepareFrame+0x20e>
            break;
 8010c88:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 8010c8a:	2300      	movs	r3, #0
}
 8010c8c:	4618      	mov	r0, r3
 8010c8e:	3720      	adds	r7, #32
 8010c90:	46bd      	mov	sp, r7
 8010c92:	bd80      	pop	{r7, pc}
 8010c94:	200008d8 	.word	0x200008d8
 8010c98:	20000a10 	.word	0x20000a10
 8010c9c:	200008da 	.word	0x200008da
 8010ca0:	20000df8 	.word	0x20000df8
 8010ca4:	200009f0 	.word	0x200009f0
 8010ca8:	20000d78 	.word	0x20000d78
 8010cac:	200008db 	.word	0x200008db

08010cb0 <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 8010cb0:	b580      	push	{r7, lr}
 8010cb2:	b08a      	sub	sp, #40	@ 0x28
 8010cb4:	af00      	add	r7, sp, #0
 8010cb6:	4603      	mov	r3, r0
 8010cb8:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010cba:	2303      	movs	r3, #3
 8010cbc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 8010cc0:	2300      	movs	r3, #0
 8010cc2:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 8010cc4:	79fb      	ldrb	r3, [r7, #7]
 8010cc6:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010cc8:	4b4a      	ldr	r3, [pc, #296]	@ (8010df4 <SendFrameOnChannel+0x144>)
 8010cca:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8010cce:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8010cd0:	4b48      	ldr	r3, [pc, #288]	@ (8010df4 <SendFrameOnChannel+0x144>)
 8010cd2:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 8010cd6:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8010cd8:	4b46      	ldr	r3, [pc, #280]	@ (8010df4 <SendFrameOnChannel+0x144>)
 8010cda:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010cdc:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8010cde:	4b45      	ldr	r3, [pc, #276]	@ (8010df4 <SendFrameOnChannel+0x144>)
 8010ce0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010ce2:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8010ce4:	4b44      	ldr	r3, [pc, #272]	@ (8010df8 <SendFrameOnChannel+0x148>)
 8010ce6:	881b      	ldrh	r3, [r3, #0]
 8010ce8:	83bb      	strh	r3, [r7, #28]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8010cea:	4b42      	ldr	r3, [pc, #264]	@ (8010df4 <SendFrameOnChannel+0x144>)
 8010cec:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 8010cf0:	77bb      	strb	r3, [r7, #30]
#endif /* LORAMAC_VERSION */

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8010cf2:	4b40      	ldr	r3, [pc, #256]	@ (8010df4 <SendFrameOnChannel+0x144>)
 8010cf4:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 8010cf8:	f107 020f 	add.w	r2, r7, #15
 8010cfc:	f107 0110 	add.w	r1, r7, #16
 8010d00:	4b3e      	ldr	r3, [pc, #248]	@ (8010dfc <SendFrameOnChannel+0x14c>)
 8010d02:	f003 ff1b 	bl	8014b3c <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010d06:	4b3c      	ldr	r3, [pc, #240]	@ (8010df8 <SendFrameOnChannel+0x148>)
 8010d08:	2201      	movs	r2, #1
 8010d0a:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010d0e:	4b39      	ldr	r3, [pc, #228]	@ (8010df4 <SendFrameOnChannel+0x144>)
 8010d10:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8010d14:	b2da      	uxtb	r2, r3
 8010d16:	4b38      	ldr	r3, [pc, #224]	@ (8010df8 <SendFrameOnChannel+0x148>)
 8010d18:	f883 2446 	strb.w	r2, [r3, #1094]	@ 0x446
    MacCtx.McpsConfirm.TxPower = txPower;
 8010d1c:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8010d20:	4b35      	ldr	r3, [pc, #212]	@ (8010df8 <SendFrameOnChannel+0x148>)
 8010d22:	f883 2447 	strb.w	r2, [r3, #1095]	@ 0x447
    MacCtx.McpsConfirm.Channel = channel;
 8010d26:	79fb      	ldrb	r3, [r7, #7]
 8010d28:	4a33      	ldr	r2, [pc, #204]	@ (8010df8 <SendFrameOnChannel+0x148>)
 8010d2a:	f8c2 3454 	str.w	r3, [r2, #1108]	@ 0x454

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8010d2e:	4b32      	ldr	r3, [pc, #200]	@ (8010df8 <SendFrameOnChannel+0x148>)
 8010d30:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 8010d34:	4a30      	ldr	r2, [pc, #192]	@ (8010df8 <SendFrameOnChannel+0x148>)
 8010d36:	f8c2 344c 	str.w	r3, [r2, #1100]	@ 0x44c
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8010d3a:	4b2f      	ldr	r3, [pc, #188]	@ (8010df8 <SendFrameOnChannel+0x148>)
 8010d3c:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 8010d40:	4a2d      	ldr	r2, [pc, #180]	@ (8010df8 <SendFrameOnChannel+0x148>)
 8010d42:	f8c2 345c 	str.w	r3, [r2, #1116]	@ 0x45c

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 8010d46:	f001 ff34 	bl	8012bb2 <LoRaMacClassBIsBeaconModeActive>
 8010d4a:	4603      	mov	r3, r0
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d00b      	beq.n	8010d68 <SendFrameOnChannel+0xb8>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 8010d50:	4b29      	ldr	r3, [pc, #164]	@ (8010df8 <SendFrameOnChannel+0x148>)
 8010d52:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 8010d56:	4618      	mov	r0, r3
 8010d58:	f001 ff96 	bl	8012c88 <LoRaMacClassBIsUplinkCollision>
 8010d5c:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 8010d5e:	6a3b      	ldr	r3, [r7, #32]
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d001      	beq.n	8010d68 <SendFrameOnChannel+0xb8>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 8010d64:	2310      	movs	r3, #16
 8010d66:	e040      	b.n	8010dea <SendFrameOnChannel+0x13a>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8010d68:	4b22      	ldr	r3, [pc, #136]	@ (8010df4 <SendFrameOnChannel+0x144>)
 8010d6a:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8010d6e:	2b01      	cmp	r3, #1
 8010d70:	d101      	bne.n	8010d76 <SendFrameOnChannel+0xc6>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 8010d72:	f001 ff93 	bl	8012c9c <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 8010d76:	f001 ff2d 	bl	8012bd4 <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 8010d7a:	4b1e      	ldr	r3, [pc, #120]	@ (8010df4 <SendFrameOnChannel+0x144>)
 8010d7c:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8010d80:	b2db      	uxtb	r3, r3
 8010d82:	4a1d      	ldr	r2, [pc, #116]	@ (8010df8 <SendFrameOnChannel+0x148>)
 8010d84:	f892 241f 	ldrb.w	r2, [r2, #1055]	@ 0x41f
 8010d88:	4611      	mov	r1, r2
 8010d8a:	4618      	mov	r0, r3
 8010d8c:	f7ff fc66 	bl	801065c <SecureFrame>
 8010d90:	4603      	mov	r3, r0
 8010d92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if( status != LORAMAC_STATUS_OK )
 8010d96:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d002      	beq.n	8010da4 <SendFrameOnChannel+0xf4>
    {
        return status;
 8010d9e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010da2:	e022      	b.n	8010dea <SendFrameOnChannel+0x13a>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8010da4:	4b14      	ldr	r3, [pc, #80]	@ (8010df8 <SendFrameOnChannel+0x148>)
 8010da6:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8010daa:	f043 0302 	orr.w	r3, r3, #2
 8010dae:	4a12      	ldr	r2, [pc, #72]	@ (8010df8 <SendFrameOnChannel+0x148>)
 8010db0:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
    if( MacCtx.NodeAckRequested == false )
    {
        MacCtx.ChannelsNbTransCounter++;
    }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.ChannelsNbTransCounter++;
 8010db4:	4b10      	ldr	r3, [pc, #64]	@ (8010df8 <SendFrameOnChannel+0x148>)
 8010db6:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 8010dba:	3301      	adds	r3, #1
 8010dbc:	b2da      	uxtb	r2, r3
 8010dbe:	4b0e      	ldr	r3, [pc, #56]	@ (8010df8 <SendFrameOnChannel+0x148>)
 8010dc0:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 8010dc4:	4b0c      	ldr	r3, [pc, #48]	@ (8010df8 <SendFrameOnChannel+0x148>)
 8010dc6:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 8010dca:	4b0b      	ldr	r3, [pc, #44]	@ (8010df8 <SendFrameOnChannel+0x148>)
 8010dcc:	f883 2449 	strb.w	r2, [r3, #1097]	@ 0x449
    MacCtx.ResponseTimeoutStartTime = 0;
 8010dd0:	4b09      	ldr	r3, [pc, #36]	@ (8010df8 <SendFrameOnChannel+0x148>)
 8010dd2:	2200      	movs	r2, #0
 8010dd4:	f8c3 249c 	str.w	r2, [r3, #1180]	@ 0x49c
#endif /* LORAMAC_VERSION */

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8010dd8:	4b09      	ldr	r3, [pc, #36]	@ (8010e00 <SendFrameOnChannel+0x150>)
 8010dda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010ddc:	4a06      	ldr	r2, [pc, #24]	@ (8010df8 <SendFrameOnChannel+0x148>)
 8010dde:	8812      	ldrh	r2, [r2, #0]
 8010de0:	b2d2      	uxtb	r2, r2
 8010de2:	4611      	mov	r1, r2
 8010de4:	4807      	ldr	r0, [pc, #28]	@ (8010e04 <SendFrameOnChannel+0x154>)
 8010de6:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 8010de8:	2300      	movs	r3, #0
}
 8010dea:	4618      	mov	r0, r3
 8010dec:	3728      	adds	r7, #40	@ 0x28
 8010dee:	46bd      	mov	sp, r7
 8010df0:	bd80      	pop	{r7, pc}
 8010df2:	bf00      	nop
 8010df4:	20000df8 	.word	0x20000df8
 8010df8:	200008d8 	.word	0x200008d8
 8010dfc:	20000cf8 	.word	0x20000cf8
 8010e00:	0801f464 	.word	0x0801f464
 8010e04:	200008da 	.word	0x200008da

08010e08 <SetTxContinuousWave>:

    return LORAMAC_STATUS_OK;
}
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 8010e08:	b580      	push	{r7, lr}
 8010e0a:	b082      	sub	sp, #8
 8010e0c:	af00      	add	r7, sp, #0
 8010e0e:	4603      	mov	r3, r0
 8010e10:	6039      	str	r1, [r7, #0]
 8010e12:	80fb      	strh	r3, [r7, #6]
 8010e14:	4613      	mov	r3, r2
 8010e16:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8010e18:	4b09      	ldr	r3, [pc, #36]	@ (8010e40 <SetTxContinuousWave+0x38>)
 8010e1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010e1c:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8010e20:	88fa      	ldrh	r2, [r7, #6]
 8010e22:	6838      	ldr	r0, [r7, #0]
 8010e24:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8010e26:	4b07      	ldr	r3, [pc, #28]	@ (8010e44 <SetTxContinuousWave+0x3c>)
 8010e28:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8010e2c:	f043 0302 	orr.w	r3, r3, #2
 8010e30:	4a04      	ldr	r2, [pc, #16]	@ (8010e44 <SetTxContinuousWave+0x3c>)
 8010e32:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    return LORAMAC_STATUS_OK;
 8010e36:	2300      	movs	r3, #0
}
 8010e38:	4618      	mov	r0, r3
 8010e3a:	3708      	adds	r7, #8
 8010e3c:	46bd      	mov	sp, r7
 8010e3e:	bd80      	pop	{r7, pc}
 8010e40:	0801f464 	.word	0x0801f464
 8010e44:	200008d8 	.word	0x200008d8

08010e48 <RestoreNvmData>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t RestoreNvmData( void )
{
 8010e48:	b580      	push	{r7, lr}
 8010e4a:	b082      	sub	sp, #8
 8010e4c:	af00      	add	r7, sp, #0
    uint32_t crc = 0;
 8010e4e:	2300      	movs	r3, #0
 8010e50:	607b      	str	r3, [r7, #4]

    // Status and parameter validation
    if( MacCtx.MacState != LORAMAC_STOPPED )
 8010e52:	4b3e      	ldr	r3, [pc, #248]	@ (8010f4c <RestoreNvmData+0x104>)
 8010e54:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8010e58:	2b01      	cmp	r3, #1
 8010e5a:	d001      	beq.n	8010e60 <RestoreNvmData+0x18>
    {
        return LORAMAC_STATUS_BUSY;
 8010e5c:	2301      	movs	r3, #1
 8010e5e:	e071      	b.n	8010f44 <RestoreNvmData+0xfc>
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 8010e60:	2124      	movs	r1, #36	@ 0x24
 8010e62:	483b      	ldr	r0, [pc, #236]	@ (8010f50 <RestoreNvmData+0x108>)
 8010e64:	f006 f8ba 	bl	8016fdc <Crc32>
 8010e68:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.Crypto.Crc32 ) );
    if( crc != NvmBackup.Crypto.Crc32 )
 8010e6a:	4b39      	ldr	r3, [pc, #228]	@ (8010f50 <RestoreNvmData+0x108>)
 8010e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010e6e:	687a      	ldr	r2, [r7, #4]
 8010e70:	429a      	cmp	r2, r3
 8010e72:	d001      	beq.n	8010e78 <RestoreNvmData+0x30>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8010e74:	2317      	movs	r3, #23
 8010e76:	e065      	b.n	8010f44 <RestoreNvmData+0xfc>
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 8010e78:	2114      	movs	r1, #20
 8010e7a:	4836      	ldr	r0, [pc, #216]	@ (8010f54 <RestoreNvmData+0x10c>)
 8010e7c:	f006 f8ae 	bl	8016fdc <Crc32>
 8010e80:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup1.Crc32 ) );
    if( crc != NvmBackup.MacGroup1.Crc32 )
 8010e82:	4b33      	ldr	r3, [pc, #204]	@ (8010f50 <RestoreNvmData+0x108>)
 8010e84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010e86:	687a      	ldr	r2, [r7, #4]
 8010e88:	429a      	cmp	r2, r3
 8010e8a:	d001      	beq.n	8010e90 <RestoreNvmData+0x48>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8010e8c:	2317      	movs	r3, #23
 8010e8e:	e059      	b.n	8010f44 <RestoreNvmData+0xfc>
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 8010e90:	21e0      	movs	r1, #224	@ 0xe0
 8010e92:	4831      	ldr	r0, [pc, #196]	@ (8010f58 <RestoreNvmData+0x110>)
 8010e94:	f006 f8a2 	bl	8016fdc <Crc32>
 8010e98:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup2.Crc32 ) );
    if( crc != NvmBackup.MacGroup2.Crc32 )
 8010e9a:	4b2d      	ldr	r3, [pc, #180]	@ (8010f50 <RestoreNvmData+0x108>)
 8010e9c:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8010ea0:	687a      	ldr	r2, [r7, #4]
 8010ea2:	429a      	cmp	r2, r3
 8010ea4:	d001      	beq.n	8010eaa <RestoreNvmData+0x62>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8010ea6:	2317      	movs	r3, #23
 8010ea8:	e04c      	b.n	8010f44 <RestoreNvmData+0xfc>
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 8010eaa:	21bc      	movs	r1, #188	@ 0xbc
 8010eac:	482b      	ldr	r0, [pc, #172]	@ (8010f5c <RestoreNvmData+0x114>)
 8010eae:	f006 f895 	bl	8016fdc <Crc32>
 8010eb2:	6078      	str	r0, [r7, #4]
                                                   sizeof( NvmBackup.SecureElement.Crc32 ) );
    if( crc != NvmBackup.SecureElement.Crc32 )
 8010eb4:	4b26      	ldr	r3, [pc, #152]	@ (8010f50 <RestoreNvmData+0x108>)
 8010eb6:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 8010eba:	687a      	ldr	r2, [r7, #4]
 8010ebc:	429a      	cmp	r2, r3
 8010ebe:	d001      	beq.n	8010ec4 <RestoreNvmData+0x7c>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8010ec0:	2317      	movs	r3, #23
 8010ec2:	e03f      	b.n	8010f44 <RestoreNvmData+0xfc>
    }

    // Region
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 8010ec4:	2100      	movs	r1, #0
 8010ec6:	4826      	ldr	r0, [pc, #152]	@ (8010f60 <RestoreNvmData+0x118>)
 8010ec8:	f006 f888 	bl	8016fdc <Crc32>
 8010ecc:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup1.Crc32 ) );
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 8010ece:	4b20      	ldr	r3, [pc, #128]	@ (8010f50 <RestoreNvmData+0x108>)
 8010ed0:	f8d3 31e4 	ldr.w	r3, [r3, #484]	@ 0x1e4
 8010ed4:	687a      	ldr	r2, [r7, #4]
 8010ed6:	429a      	cmp	r2, r3
 8010ed8:	d001      	beq.n	8010ede <RestoreNvmData+0x96>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8010eda:	2317      	movs	r3, #23
 8010edc:	e032      	b.n	8010f44 <RestoreNvmData+0xfc>
    }

    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 8010ede:	2114      	movs	r1, #20
 8010ee0:	4820      	ldr	r0, [pc, #128]	@ (8010f64 <RestoreNvmData+0x11c>)
 8010ee2:	f006 f87b 	bl	8016fdc <Crc32>
 8010ee6:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.ClassB.Crc32 ) );
    if( crc != NvmBackup.ClassB.Crc32 )
 8010ee8:	4b19      	ldr	r3, [pc, #100]	@ (8010f50 <RestoreNvmData+0x108>)
 8010eea:	f8d3 3578 	ldr.w	r3, [r3, #1400]	@ 0x578
 8010eee:	687a      	ldr	r2, [r7, #4]
 8010ef0:	429a      	cmp	r2, r3
 8010ef2:	d001      	beq.n	8010ef8 <RestoreNvmData+0xb0>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8010ef4:	2317      	movs	r3, #23
 8010ef6:	e025      	b.n	8010f44 <RestoreNvmData+0xfc>
    }

    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 8010ef8:	f240 527c 	movw	r2, #1404	@ 0x57c
 8010efc:	4914      	ldr	r1, [pc, #80]	@ (8010f50 <RestoreNvmData+0x108>)
 8010efe:	481a      	ldr	r0, [pc, #104]	@ (8010f68 <RestoreNvmData+0x120>)
 8010f00:	f006 f817 	bl	8016f32 <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 8010f04:	f240 527c 	movw	r2, #1404	@ 0x57c
 8010f08:	2100      	movs	r1, #0
 8010f0a:	4811      	ldr	r0, [pc, #68]	@ (8010f50 <RestoreNvmData+0x108>)
 8010f0c:	f006 f84c 	bl	8016fa8 <memset1>

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8010f10:	4b0e      	ldr	r3, [pc, #56]	@ (8010f4c <RestoreNvmData+0x104>)
 8010f12:	f893 241f 	ldrb.w	r2, [r3, #1055]	@ 0x41f
 8010f16:	4b0d      	ldr	r3, [pc, #52]	@ (8010f4c <RestoreNvmData+0x104>)
 8010f18:	f883 23e8 	strb.w	r2, [r3, #1000]	@ 0x3e8
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8010f1c:	4b12      	ldr	r3, [pc, #72]	@ (8010f68 <RestoreNvmData+0x120>)
 8010f1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010f20:	4a0a      	ldr	r2, [pc, #40]	@ (8010f4c <RestoreNvmData+0x104>)
 8010f22:	f8c2 33ec 	str.w	r3, [r2, #1004]	@ 0x3ec
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010f26:	4b10      	ldr	r3, [pc, #64]	@ (8010f68 <RestoreNvmData+0x120>)
 8010f28:	f893 2075 	ldrb.w	r2, [r3, #117]	@ 0x75
 8010f2c:	4b07      	ldr	r3, [pc, #28]	@ (8010f4c <RestoreNvmData+0x104>)
 8010f2e:	f883 23f8 	strb.w	r2, [r3, #1016]	@ 0x3f8
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8010f32:	4b06      	ldr	r3, [pc, #24]	@ (8010f4c <RestoreNvmData+0x104>)
 8010f34:	2201      	movs	r2, #1
 8010f36:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8010f3a:	4b04      	ldr	r3, [pc, #16]	@ (8010f4c <RestoreNvmData+0x104>)
 8010f3c:	2202      	movs	r2, #2
 8010f3e:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb

    return LORAMAC_STATUS_OK;
 8010f42:	2300      	movs	r3, #0
}
 8010f44:	4618      	mov	r0, r3
 8010f46:	3708      	adds	r7, #8
 8010f48:	46bd      	mov	sp, r7
 8010f4a:	bd80      	pop	{r7, pc}
 8010f4c:	200008d8 	.word	0x200008d8
 8010f50:	20001374 	.word	0x20001374
 8010f54:	2000139c 	.word	0x2000139c
 8010f58:	200013b4 	.word	0x200013b4
 8010f5c:	20001498 	.word	0x20001498
 8010f60:	20001558 	.word	0x20001558
 8010f64:	200018d8 	.word	0x200018d8
 8010f68:	20000df8 	.word	0x20000df8

08010f6c <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 8010f6c:	b480      	push	{r7}
 8010f6e:	b083      	sub	sp, #12
 8010f70:	af00      	add	r7, sp, #0
 8010f72:	6078      	str	r0, [r7, #4]
 8010f74:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	d002      	beq.n	8010f82 <DetermineFrameType+0x16>
 8010f7c:	683b      	ldr	r3, [r7, #0]
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	d101      	bne.n	8010f86 <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010f82:	2303      	movs	r3, #3
 8010f84:	e03b      	b.n	8010ffe <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	7b1b      	ldrb	r3, [r3, #12]
 8010f8a:	f003 030f 	and.w	r3, r3, #15
 8010f8e:	b2db      	uxtb	r3, r3
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	d008      	beq.n	8010fa6 <DetermineFrameType+0x3a>
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	d003      	beq.n	8010fa6 <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 8010f9e:	683b      	ldr	r3, [r7, #0]
 8010fa0:	2200      	movs	r2, #0
 8010fa2:	701a      	strb	r2, [r3, #0]
 8010fa4:	e02a      	b.n	8010ffc <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	d103      	bne.n	8010fb8 <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 8010fb0:	683b      	ldr	r3, [r7, #0]
 8010fb2:	2201      	movs	r2, #1
 8010fb4:	701a      	strb	r2, [r3, #0]
 8010fb6:	e021      	b.n	8010ffc <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	7b1b      	ldrb	r3, [r3, #12]
 8010fbc:	f003 030f 	and.w	r3, r3, #15
 8010fc0:	b2db      	uxtb	r3, r3
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d108      	bne.n	8010fd8 <DetermineFrameType+0x6c>
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	d103      	bne.n	8010fd8 <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 8010fd0:	683b      	ldr	r3, [r7, #0]
 8010fd2:	2202      	movs	r2, #2
 8010fd4:	701a      	strb	r2, [r3, #0]
 8010fd6:	e011      	b.n	8010ffc <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	7b1b      	ldrb	r3, [r3, #12]
 8010fdc:	f003 030f 	and.w	r3, r3, #15
 8010fe0:	b2db      	uxtb	r3, r3
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	d108      	bne.n	8010ff8 <DetermineFrameType+0x8c>
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	d003      	beq.n	8010ff8 <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 8010ff0:	683b      	ldr	r3, [r7, #0]
 8010ff2:	2203      	movs	r2, #3
 8010ff4:	701a      	strb	r2, [r3, #0]
 8010ff6:	e001      	b.n	8010ffc <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 8010ff8:	2318      	movs	r3, #24
 8010ffa:	e000      	b.n	8010ffe <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 8010ffc:	2300      	movs	r3, #0
}
 8010ffe:	4618      	mov	r0, r3
 8011000:	370c      	adds	r7, #12
 8011002:	46bd      	mov	sp, r7
 8011004:	bc80      	pop	{r7}
 8011006:	4770      	bx	lr

08011008 <CheckRetrans>:
    }
    return false;
}
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool CheckRetrans( uint8_t counter, uint8_t limit )
{
 8011008:	b480      	push	{r7}
 801100a:	b083      	sub	sp, #12
 801100c:	af00      	add	r7, sp, #0
 801100e:	4603      	mov	r3, r0
 8011010:	460a      	mov	r2, r1
 8011012:	71fb      	strb	r3, [r7, #7]
 8011014:	4613      	mov	r3, r2
 8011016:	71bb      	strb	r3, [r7, #6]
    if( counter >= limit )
 8011018:	79fa      	ldrb	r2, [r7, #7]
 801101a:	79bb      	ldrb	r3, [r7, #6]
 801101c:	429a      	cmp	r2, r3
 801101e:	d301      	bcc.n	8011024 <CheckRetrans+0x1c>
    {
        return true;
 8011020:	2301      	movs	r3, #1
 8011022:	e000      	b.n	8011026 <CheckRetrans+0x1e>
    }
    return false;
 8011024:	2300      	movs	r3, #0
}
 8011026:	4618      	mov	r0, r3
 8011028:	370c      	adds	r7, #12
 801102a:	46bd      	mov	sp, r7
 801102c:	bc80      	pop	{r7}
 801102e:	4770      	bx	lr

08011030 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 8011030:	b580      	push	{r7, lr}
 8011032:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 8011034:	4b12      	ldr	r3, [pc, #72]	@ (8011080 <CheckRetransUnconfirmedUplink+0x50>)
 8011036:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 801103a:	4a12      	ldr	r2, [pc, #72]	@ (8011084 <CheckRetransUnconfirmedUplink+0x54>)
 801103c:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8011040:	4611      	mov	r1, r2
 8011042:	4618      	mov	r0, r3
 8011044:	f7ff ffe0 	bl	8011008 <CheckRetrans>
 8011048:	4603      	mov	r3, r0
 801104a:	2b00      	cmp	r3, #0
 801104c:	d001      	beq.n	8011052 <CheckRetransUnconfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 801104e:	2301      	movs	r3, #1
 8011050:	e014      	b.n	801107c <CheckRetransUnconfirmedUplink+0x4c>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8011052:	4b0b      	ldr	r3, [pc, #44]	@ (8011080 <CheckRetransUnconfirmedUplink+0x50>)
 8011054:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8011058:	f003 0302 	and.w	r3, r3, #2
 801105c:	b2db      	uxtb	r3, r3
 801105e:	2b00      	cmp	r3, #0
 8011060:	d00b      	beq.n	801107a <CheckRetransUnconfirmedUplink+0x4a>
    {
        // Stop the retransmissions, if a valid downlink is received
        // a class A RX window. This holds also for class B and C.
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8011062:	4b07      	ldr	r3, [pc, #28]	@ (8011080 <CheckRetransUnconfirmedUplink+0x50>)
 8011064:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 8011068:	2b00      	cmp	r3, #0
 801106a:	d004      	beq.n	8011076 <CheckRetransUnconfirmedUplink+0x46>
            ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 801106c:	4b04      	ldr	r3, [pc, #16]	@ (8011080 <CheckRetransUnconfirmedUplink+0x50>)
 801106e:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8011072:	2b01      	cmp	r3, #1
 8011074:	d101      	bne.n	801107a <CheckRetransUnconfirmedUplink+0x4a>
        {
            return true;
 8011076:	2301      	movs	r3, #1
 8011078:	e000      	b.n	801107c <CheckRetransUnconfirmedUplink+0x4c>
        }
    }
    return false;
 801107a:	2300      	movs	r3, #0
}
 801107c:	4618      	mov	r0, r3
 801107e:	bd80      	pop	{r7, pc}
 8011080:	200008d8 	.word	0x200008d8
 8011084:	20000df8 	.word	0x20000df8

08011088 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 8011088:	b580      	push	{r7, lr}
 801108a:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 801108c:	4b10      	ldr	r3, [pc, #64]	@ (80110d0 <CheckRetransConfirmedUplink+0x48>)
 801108e:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 8011092:	4a10      	ldr	r2, [pc, #64]	@ (80110d4 <CheckRetransConfirmedUplink+0x4c>)
 8011094:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8011098:	4611      	mov	r1, r2
 801109a:	4618      	mov	r0, r3
 801109c:	f7ff ffb4 	bl	8011008 <CheckRetrans>
 80110a0:	4603      	mov	r3, r0
 80110a2:	2b00      	cmp	r3, #0
 80110a4:	d001      	beq.n	80110aa <CheckRetransConfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 80110a6:	2301      	movs	r3, #1
 80110a8:	e00f      	b.n	80110ca <CheckRetransConfirmedUplink+0x42>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 80110aa:	4b09      	ldr	r3, [pc, #36]	@ (80110d0 <CheckRetransConfirmedUplink+0x48>)
 80110ac:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80110b0:	f003 0302 	and.w	r3, r3, #2
 80110b4:	b2db      	uxtb	r3, r3
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	d006      	beq.n	80110c8 <CheckRetransConfirmedUplink+0x40>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 80110ba:	4b05      	ldr	r3, [pc, #20]	@ (80110d0 <CheckRetransConfirmedUplink+0x48>)
 80110bc:	f893 3448 	ldrb.w	r3, [r3, #1096]	@ 0x448
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d001      	beq.n	80110c8 <CheckRetransConfirmedUplink+0x40>
        {
            return true;
 80110c4:	2301      	movs	r3, #1
 80110c6:	e000      	b.n	80110ca <CheckRetransConfirmedUplink+0x42>
        }
    }
    return false;
 80110c8:	2300      	movs	r3, #0
}
 80110ca:	4618      	mov	r0, r3
 80110cc:	bd80      	pop	{r7, pc}
 80110ce:	bf00      	nop
 80110d0:	200008d8 	.word	0x200008d8
 80110d4:	20000df8 	.word	0x20000df8

080110d8 <IncreaseAdrAckCounter>:

static uint32_t IncreaseAdrAckCounter( uint32_t counter )
{
 80110d8:	b480      	push	{r7}
 80110da:	b083      	sub	sp, #12
 80110dc:	af00      	add	r7, sp, #0
 80110de:	6078      	str	r0, [r7, #4]
    if( counter < ADR_ACK_COUNTER_MAX )
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80110e6:	d002      	beq.n	80110ee <IncreaseAdrAckCounter+0x16>
    {
        counter++;
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	3301      	adds	r3, #1
 80110ec:	607b      	str	r3, [r7, #4]
    }
    return counter;
 80110ee:	687b      	ldr	r3, [r7, #4]
}
 80110f0:	4618      	mov	r0, r3
 80110f2:	370c      	adds	r7, #12
 80110f4:	46bd      	mov	sp, r7
 80110f6:	bc80      	pop	{r7}
 80110f8:	4770      	bx	lr
	...

080110fc <StopRetransmission>:
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 80110fc:	b580      	push	{r7, lr}
 80110fe:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8011100:	4b1a      	ldr	r3, [pc, #104]	@ (801116c <StopRetransmission+0x70>)
 8011102:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8011106:	f003 0302 	and.w	r3, r3, #2
 801110a:	b2db      	uxtb	r3, r3
 801110c:	2b00      	cmp	r3, #0
 801110e:	d009      	beq.n	8011124 <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8011110:	4b16      	ldr	r3, [pc, #88]	@ (801116c <StopRetransmission+0x70>)
 8011112:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8011116:	2b00      	cmp	r3, #0
 8011118:	d011      	beq.n	801113e <StopRetransmission+0x42>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 801111a:	4b14      	ldr	r3, [pc, #80]	@ (801116c <StopRetransmission+0x70>)
 801111c:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8011120:	2b01      	cmp	r3, #1
 8011122:	d00c      	beq.n	801113e <StopRetransmission+0x42>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8011124:	4b12      	ldr	r3, [pc, #72]	@ (8011170 <StopRetransmission+0x74>)
 8011126:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 801112a:	2b00      	cmp	r3, #0
 801112c:	d007      	beq.n	801113e <StopRetransmission+0x42>
        {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
 801112e:	4b10      	ldr	r3, [pc, #64]	@ (8011170 <StopRetransmission+0x74>)
 8011130:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011132:	4618      	mov	r0, r3
 8011134:	f7ff ffd0 	bl	80110d8 <IncreaseAdrAckCounter>
 8011138:	4603      	mov	r3, r0
 801113a:	4a0d      	ldr	r2, [pc, #52]	@ (8011170 <StopRetransmission+0x74>)
 801113c:	6293      	str	r3, [r2, #40]	@ 0x28
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 801113e:	4b0b      	ldr	r3, [pc, #44]	@ (801116c <StopRetransmission+0x70>)
 8011140:	2200      	movs	r2, #0
 8011142:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
    MacCtx.NodeAckRequested = false;
 8011146:	4b09      	ldr	r3, [pc, #36]	@ (801116c <StopRetransmission+0x70>)
 8011148:	2200      	movs	r2, #0
 801114a:	f883 241e 	strb.w	r2, [r3, #1054]	@ 0x41e
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RetransmitTimeoutRetry = false;
 801114e:	4b07      	ldr	r3, [pc, #28]	@ (801116c <StopRetransmission+0x70>)
 8011150:	2200      	movs	r2, #0
 8011152:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8011156:	4b05      	ldr	r3, [pc, #20]	@ (801116c <StopRetransmission+0x70>)
 8011158:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 801115c:	f023 0302 	bic.w	r3, r3, #2
 8011160:	4a02      	ldr	r2, [pc, #8]	@ (801116c <StopRetransmission+0x70>)
 8011162:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    return true;
 8011166:	2301      	movs	r3, #1
}
 8011168:	4618      	mov	r0, r3
 801116a:	bd80      	pop	{r7, pc}
 801116c:	200008d8 	.word	0x200008d8
 8011170:	20000df8 	.word	0x20000df8

08011174 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 8011174:	b580      	push	{r7, lr}
 8011176:	b082      	sub	sp, #8
 8011178:	af00      	add	r7, sp, #0
 801117a:	4603      	mov	r3, r0
 801117c:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 801117e:	4b0b      	ldr	r3, [pc, #44]	@ (80111ac <CallNvmDataChangeCallback+0x38>)
 8011180:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8011184:	2b00      	cmp	r3, #0
 8011186:	d00c      	beq.n	80111a2 <CallNvmDataChangeCallback+0x2e>
        ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 8011188:	4b08      	ldr	r3, [pc, #32]	@ (80111ac <CallNvmDataChangeCallback+0x38>)
 801118a:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 801118e:	68db      	ldr	r3, [r3, #12]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8011190:	2b00      	cmp	r3, #0
 8011192:	d006      	beq.n	80111a2 <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 8011194:	4b05      	ldr	r3, [pc, #20]	@ (80111ac <CallNvmDataChangeCallback+0x38>)
 8011196:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 801119a:	68db      	ldr	r3, [r3, #12]
 801119c:	88fa      	ldrh	r2, [r7, #6]
 801119e:	4610      	mov	r0, r2
 80111a0:	4798      	blx	r3
    }
}
 80111a2:	bf00      	nop
 80111a4:	3708      	adds	r7, #8
 80111a6:	46bd      	mov	sp, r7
 80111a8:	bd80      	pop	{r7, pc}
 80111aa:	bf00      	nop
 80111ac:	200008d8 	.word	0x200008d8

080111b0 <IsRequestPending>:
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
}
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
 80111b0:	b480      	push	{r7}
 80111b2:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 80111b4:	4b0b      	ldr	r3, [pc, #44]	@ (80111e4 <IsRequestPending+0x34>)
 80111b6:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80111ba:	f003 0304 	and.w	r3, r3, #4
 80111be:	b2db      	uxtb	r3, r3
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d107      	bne.n	80111d4 <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 80111c4:	4b07      	ldr	r3, [pc, #28]	@ (80111e4 <IsRequestPending+0x34>)
 80111c6:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80111ca:	f003 0301 	and.w	r3, r3, #1
 80111ce:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d001      	beq.n	80111d8 <IsRequestPending+0x28>
    {
        return 1;
 80111d4:	2301      	movs	r3, #1
 80111d6:	e000      	b.n	80111da <IsRequestPending+0x2a>
    }
    return 0;
 80111d8:	2300      	movs	r3, #0
}
 80111da:	4618      	mov	r0, r3
 80111dc:	46bd      	mov	sp, r7
 80111de:	bc80      	pop	{r7}
 80111e0:	4770      	bx	lr
 80111e2:	bf00      	nop
 80111e4:	200008d8 	.word	0x200008d8

080111e8 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 80111e8:	b590      	push	{r4, r7, lr}
 80111ea:	b091      	sub	sp, #68	@ 0x44
 80111ec:	af02      	add	r7, sp, #8
 80111ee:	6178      	str	r0, [r7, #20]
 80111f0:	6139      	str	r1, [r7, #16]
 80111f2:	4613      	mov	r3, r2
 80111f4:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 80111f6:	697b      	ldr	r3, [r7, #20]
 80111f8:	2b00      	cmp	r3, #0
 80111fa:	d002      	beq.n	8011202 <LoRaMacInitialization+0x1a>
 80111fc:	693b      	ldr	r3, [r7, #16]
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d101      	bne.n	8011206 <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011202:	2303      	movs	r3, #3
 8011204:	e27c      	b.n	8011700 <LoRaMacInitialization+0x518>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8011206:	697b      	ldr	r3, [r7, #20]
 8011208:	681b      	ldr	r3, [r3, #0]
 801120a:	2b00      	cmp	r3, #0
 801120c:	d00b      	beq.n	8011226 <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 801120e:	697b      	ldr	r3, [r7, #20]
 8011210:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8011212:	2b00      	cmp	r3, #0
 8011214:	d007      	beq.n	8011226 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 8011216:	697b      	ldr	r3, [r7, #20]
 8011218:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 801121a:	2b00      	cmp	r3, #0
 801121c:	d003      	beq.n	8011226 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 801121e:	697b      	ldr	r3, [r7, #20]
 8011220:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 8011222:	2b00      	cmp	r3, #0
 8011224:	d101      	bne.n	801122a <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011226:	2303      	movs	r3, #3
 8011228:	e26a      	b.n	8011700 <LoRaMacInitialization+0x518>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 801122a:	7bfb      	ldrb	r3, [r7, #15]
 801122c:	4618      	mov	r0, r3
 801122e:	f003 fbcf 	bl	80149d0 <RegionIsActive>
 8011232:	4603      	mov	r3, r0
 8011234:	f083 0301 	eor.w	r3, r3, #1
 8011238:	b2db      	uxtb	r3, r3
 801123a:	2b00      	cmp	r3, #0
 801123c:	d001      	beq.n	8011242 <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 801123e:	2309      	movs	r3, #9
 8011240:	e25e      	b.n	8011700 <LoRaMacInitialization+0x518>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 8011242:	6978      	ldr	r0, [r7, #20]
 8011244:	f002 f884 	bl	8013350 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 8011248:	f240 527c 	movw	r2, #1404	@ 0x57c
 801124c:	2100      	movs	r1, #0
 801124e:	48c7      	ldr	r0, [pc, #796]	@ (801156c <LoRaMacInitialization+0x384>)
 8011250:	f005 feaa 	bl	8016fa8 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8011254:	f44f 62a4 	mov.w	r2, #1312	@ 0x520
 8011258:	2100      	movs	r1, #0
 801125a:	48c5      	ldr	r0, [pc, #788]	@ (8011570 <LoRaMacInitialization+0x388>)
 801125c:	f005 fea4 	bl	8016fa8 <memset1>
    // Set non zero variables to its default value
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetries = 1;
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 8011260:	4ac2      	ldr	r2, [pc, #776]	@ (801156c <LoRaMacInitialization+0x384>)
 8011262:	7bfb      	ldrb	r3, [r7, #15]
 8011264:	f882 3040 	strb.w	r3, [r2, #64]	@ 0x40
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 8011268:	4bc0      	ldr	r3, [pc, #768]	@ (801156c <LoRaMacInitialization+0x384>)
 801126a:	2200      	movs	r2, #0
 801126c:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
    Nvm.MacGroup2.MacParams.RepeaterSupport = false; /* ST_WORKAROUND: Keep repeater feature */
 8011270:	4bbe      	ldr	r3, [pc, #760]	@ (801156c <LoRaMacInitialization+0x384>)
 8011272:	2200      	movs	r2, #0
 8011274:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 8011278:	4bbc      	ldr	r3, [pc, #752]	@ (801156c <LoRaMacInitialization+0x384>)
 801127a:	4abe      	ldr	r2, [pc, #760]	@ (8011574 <LoRaMacInitialization+0x38c>)
 801127c:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 8011280:	2300      	movs	r3, #0
 8011282:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8011286:	4bbc      	ldr	r3, [pc, #752]	@ (8011578 <LoRaMacInitialization+0x390>)
 8011288:	61fb      	str	r3, [r7, #28]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 801128a:	4bbc      	ldr	r3, [pc, #752]	@ (801157c <LoRaMacInitialization+0x394>)
 801128c:	623b      	str	r3, [r7, #32]
    params.Bands = &RegionBands;
 801128e:	4bbc      	ldr	r3, [pc, #752]	@ (8011580 <LoRaMacInitialization+0x398>)
 8011290:	627b      	str	r3, [r7, #36]	@ 0x24
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8011292:	4bb6      	ldr	r3, [pc, #728]	@ (801156c <LoRaMacInitialization+0x384>)
 8011294:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011298:	f107 021c 	add.w	r2, r7, #28
 801129c:	4611      	mov	r1, r2
 801129e:	4618      	mov	r0, r3
 80112a0:	f003 fbcf 	bl	8014a42 <RegionInitDefaults>
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 80112a4:	230f      	movs	r3, #15
 80112a6:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80112aa:	4bb0      	ldr	r3, [pc, #704]	@ (801156c <LoRaMacInitialization+0x384>)
 80112ac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80112b0:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80112b4:	4611      	mov	r1, r2
 80112b6:	4618      	mov	r0, r3
 80112b8:	f003 fb9a 	bl	80149f0 <RegionGetPhyParam>
 80112bc:	4603      	mov	r3, r0
 80112be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 80112c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	bf14      	ite	ne
 80112c6:	2301      	movne	r3, #1
 80112c8:	2300      	moveq	r3, #0
 80112ca:	b2da      	uxtb	r2, r3
 80112cc:	4ba7      	ldr	r3, [pc, #668]	@ (801156c <LoRaMacInitialization+0x384>)
 80112ce:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108

    getPhy.Attribute = PHY_DEF_TX_POWER;
 80112d2:	230a      	movs	r3, #10
 80112d4:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80112d8:	4ba4      	ldr	r3, [pc, #656]	@ (801156c <LoRaMacInitialization+0x384>)
 80112da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80112de:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80112e2:	4611      	mov	r1, r2
 80112e4:	4618      	mov	r0, r3
 80112e6:	f003 fb83 	bl	80149f0 <RegionGetPhyParam>
 80112ea:	4603      	mov	r3, r0
 80112ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 80112ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80112f0:	b25a      	sxtb	r2, r3
 80112f2:	4b9e      	ldr	r3, [pc, #632]	@ (801156c <LoRaMacInitialization+0x384>)
 80112f4:	f883 20cc 	strb.w	r2, [r3, #204]	@ 0xcc

    getPhy.Attribute = PHY_DEF_TX_DR;
 80112f8:	2306      	movs	r3, #6
 80112fa:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80112fe:	4b9b      	ldr	r3, [pc, #620]	@ (801156c <LoRaMacInitialization+0x384>)
 8011300:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011304:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011308:	4611      	mov	r1, r2
 801130a:	4618      	mov	r0, r3
 801130c:	f003 fb70 	bl	80149f0 <RegionGetPhyParam>
 8011310:	4603      	mov	r3, r0
 8011312:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 8011314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011316:	b25a      	sxtb	r2, r3
 8011318:	4b94      	ldr	r3, [pc, #592]	@ (801156c <LoRaMacInitialization+0x384>)
 801131a:	f883 20cd 	strb.w	r2, [r3, #205]	@ 0xcd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 801131e:	2310      	movs	r3, #16
 8011320:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011324:	4b91      	ldr	r3, [pc, #580]	@ (801156c <LoRaMacInitialization+0x384>)
 8011326:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801132a:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801132e:	4611      	mov	r1, r2
 8011330:	4618      	mov	r0, r3
 8011332:	f003 fb5d 	bl	80149f0 <RegionGetPhyParam>
 8011336:	4603      	mov	r3, r0
 8011338:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 801133a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801133c:	4a8b      	ldr	r2, [pc, #556]	@ (801156c <LoRaMacInitialization+0x384>)
 801133e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8011342:	2311      	movs	r3, #17
 8011344:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011348:	4b88      	ldr	r3, [pc, #544]	@ (801156c <LoRaMacInitialization+0x384>)
 801134a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801134e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011352:	4611      	mov	r1, r2
 8011354:	4618      	mov	r0, r3
 8011356:	f003 fb4b 	bl	80149f0 <RegionGetPhyParam>
 801135a:	4603      	mov	r3, r0
 801135c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 801135e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011360:	4a82      	ldr	r2, [pc, #520]	@ (801156c <LoRaMacInitialization+0x384>)
 8011362:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8011366:	2312      	movs	r3, #18
 8011368:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801136c:	4b7f      	ldr	r3, [pc, #508]	@ (801156c <LoRaMacInitialization+0x384>)
 801136e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011372:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011376:	4611      	mov	r1, r2
 8011378:	4618      	mov	r0, r3
 801137a:	f003 fb39 	bl	80149f0 <RegionGetPhyParam>
 801137e:	4603      	mov	r3, r0
 8011380:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8011382:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011384:	4a79      	ldr	r2, [pc, #484]	@ (801156c <LoRaMacInitialization+0x384>)
 8011386:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 801138a:	2313      	movs	r3, #19
 801138c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011390:	4b76      	ldr	r3, [pc, #472]	@ (801156c <LoRaMacInitialization+0x384>)
 8011392:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011396:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801139a:	4611      	mov	r1, r2
 801139c:	4618      	mov	r0, r3
 801139e:	f003 fb27 	bl	80149f0 <RegionGetPhyParam>
 80113a2:	4603      	mov	r3, r0
 80113a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 80113a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113a8:	4a70      	ldr	r2, [pc, #448]	@ (801156c <LoRaMacInitialization+0x384>)
 80113aa:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 80113ae:	2314      	movs	r3, #20
 80113b0:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80113b4:	4b6d      	ldr	r3, [pc, #436]	@ (801156c <LoRaMacInitialization+0x384>)
 80113b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80113ba:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80113be:	4611      	mov	r1, r2
 80113c0:	4618      	mov	r0, r3
 80113c2:	f003 fb15 	bl	80149f0 <RegionGetPhyParam>
 80113c6:	4603      	mov	r3, r0
 80113c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 80113ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113cc:	4a67      	ldr	r2, [pc, #412]	@ (801156c <LoRaMacInitialization+0x384>)
 80113ce:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 80113d2:	2316      	movs	r3, #22
 80113d4:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80113d8:	4b64      	ldr	r3, [pc, #400]	@ (801156c <LoRaMacInitialization+0x384>)
 80113da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80113de:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80113e2:	4611      	mov	r1, r2
 80113e4:	4618      	mov	r0, r3
 80113e6:	f003 fb03 	bl	80149f0 <RegionGetPhyParam>
 80113ea:	4603      	mov	r3, r0
 80113ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 80113ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113f0:	b2da      	uxtb	r2, r3
 80113f2:	4b5e      	ldr	r3, [pc, #376]	@ (801156c <LoRaMacInitialization+0x384>)
 80113f4:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 80113f8:	2317      	movs	r3, #23
 80113fa:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80113fe:	4b5b      	ldr	r3, [pc, #364]	@ (801156c <LoRaMacInitialization+0x384>)
 8011400:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011404:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011408:	4611      	mov	r1, r2
 801140a:	4618      	mov	r0, r3
 801140c:	f003 faf0 	bl	80149f0 <RegionGetPhyParam>
 8011410:	4603      	mov	r3, r0
 8011412:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8011414:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011416:	4a55      	ldr	r2, [pc, #340]	@ (801156c <LoRaMacInitialization+0x384>)
 8011418:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 801141c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801141e:	4a53      	ldr	r2, [pc, #332]	@ (801156c <LoRaMacInitialization+0x384>)
 8011420:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

    getPhy.Attribute = PHY_DEF_RX2_DR;
 8011424:	2318      	movs	r3, #24
 8011426:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801142a:	4b50      	ldr	r3, [pc, #320]	@ (801156c <LoRaMacInitialization+0x384>)
 801142c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011430:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011434:	4611      	mov	r1, r2
 8011436:	4618      	mov	r0, r3
 8011438:	f003 fada 	bl	80149f0 <RegionGetPhyParam>
 801143c:	4603      	mov	r3, r0
 801143e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8011440:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011442:	b2da      	uxtb	r2, r3
 8011444:	4b49      	ldr	r3, [pc, #292]	@ (801156c <LoRaMacInitialization+0x384>)
 8011446:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 801144a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801144c:	b2da      	uxtb	r2, r3
 801144e:	4b47      	ldr	r3, [pc, #284]	@ (801156c <LoRaMacInitialization+0x384>)
 8011450:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8011454:	231d      	movs	r3, #29
 8011456:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801145a:	4b44      	ldr	r3, [pc, #272]	@ (801156c <LoRaMacInitialization+0x384>)
 801145c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011460:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011464:	4611      	mov	r1, r2
 8011466:	4618      	mov	r0, r3
 8011468:	f003 fac2 	bl	80149f0 <RegionGetPhyParam>
 801146c:	4603      	mov	r3, r0
 801146e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8011470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011472:	b2da      	uxtb	r2, r3
 8011474:	4b3d      	ldr	r3, [pc, #244]	@ (801156c <LoRaMacInitialization+0x384>)
 8011476:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 801147a:	231e      	movs	r3, #30
 801147c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011480:	4b3a      	ldr	r3, [pc, #232]	@ (801156c <LoRaMacInitialization+0x384>)
 8011482:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011486:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801148a:	4611      	mov	r1, r2
 801148c:	4618      	mov	r0, r3
 801148e:	f003 faaf 	bl	80149f0 <RegionGetPhyParam>
 8011492:	4603      	mov	r3, r0
 8011494:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 8011496:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011498:	b2da      	uxtb	r2, r3
 801149a:	4b34      	ldr	r3, [pc, #208]	@ (801156c <LoRaMacInitialization+0x384>)
 801149c:	f883 20b9 	strb.w	r2, [r3, #185]	@ 0xb9

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 80114a0:	231f      	movs	r3, #31
 80114a2:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80114a6:	4b31      	ldr	r3, [pc, #196]	@ (801156c <LoRaMacInitialization+0x384>)
 80114a8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80114ac:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80114b0:	4611      	mov	r1, r2
 80114b2:	4618      	mov	r0, r3
 80114b4:	f003 fa9c 	bl	80149f0 <RegionGetPhyParam>
 80114b8:	4603      	mov	r3, r0
 80114ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 80114bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114be:	4a2b      	ldr	r2, [pc, #172]	@ (801156c <LoRaMacInitialization+0x384>)
 80114c0:	f8c2 30bc 	str.w	r3, [r2, #188]	@ 0xbc

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 80114c4:	2320      	movs	r3, #32
 80114c6:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80114ca:	4b28      	ldr	r3, [pc, #160]	@ (801156c <LoRaMacInitialization+0x384>)
 80114cc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80114d0:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80114d4:	4611      	mov	r1, r2
 80114d6:	4618      	mov	r0, r3
 80114d8:	f003 fa8a 	bl	80149f0 <RegionGetPhyParam>
 80114dc:	4603      	mov	r3, r0
 80114de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 80114e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114e2:	4a22      	ldr	r2, [pc, #136]	@ (801156c <LoRaMacInitialization+0x384>)
 80114e4:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 80114e8:	230b      	movs	r3, #11
 80114ea:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80114ee:	4b1f      	ldr	r3, [pc, #124]	@ (801156c <LoRaMacInitialization+0x384>)
 80114f0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80114f4:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80114f8:	4611      	mov	r1, r2
 80114fa:	4618      	mov	r0, r3
 80114fc:	f003 fa78 	bl	80149f0 <RegionGetPhyParam>
 8011500:	4603      	mov	r3, r0
 8011502:	62fb      	str	r3, [r7, #44]	@ 0x2c
    MacCtx.AdrAckLimit = phyParam.Value;
 8011504:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011506:	b29a      	uxth	r2, r3
 8011508:	4b19      	ldr	r3, [pc, #100]	@ (8011570 <LoRaMacInitialization+0x388>)
 801150a:	f8a3 2400 	strh.w	r2, [r3, #1024]	@ 0x400

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 801150e:	230c      	movs	r3, #12
 8011510:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011514:	4b15      	ldr	r3, [pc, #84]	@ (801156c <LoRaMacInitialization+0x384>)
 8011516:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801151a:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801151e:	4611      	mov	r1, r2
 8011520:	4618      	mov	r0, r3
 8011522:	f003 fa65 	bl	80149f0 <RegionGetPhyParam>
 8011526:	4603      	mov	r3, r0
 8011528:	62fb      	str	r3, [r7, #44]	@ 0x2c
    MacCtx.AdrAckDelay = phyParam.Value;
 801152a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801152c:	b29a      	uxth	r2, r3
 801152e:	4b10      	ldr	r3, [pc, #64]	@ (8011570 <LoRaMacInitialization+0x388>)
 8011530:	f8a3 2402 	strh.w	r2, [r3, #1026]	@ 0x402

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 8011534:	4b0d      	ldr	r3, [pc, #52]	@ (801156c <LoRaMacInitialization+0x384>)
 8011536:	2201      	movs	r2, #1
 8011538:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 801153c:	4b0b      	ldr	r3, [pc, #44]	@ (801156c <LoRaMacInitialization+0x384>)
 801153e:	220a      	movs	r2, #10
 8011540:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 8011544:	4b09      	ldr	r3, [pc, #36]	@ (801156c <LoRaMacInitialization+0x384>)
 8011546:	2206      	movs	r2, #6
 8011548:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 801154c:	4b07      	ldr	r3, [pc, #28]	@ (801156c <LoRaMacInitialization+0x384>)
 801154e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011552:	4a06      	ldr	r2, [pc, #24]	@ (801156c <LoRaMacInitialization+0x384>)
 8011554:	6453      	str	r3, [r2, #68]	@ 0x44
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 8011556:	4b05      	ldr	r3, [pc, #20]	@ (801156c <LoRaMacInitialization+0x384>)
 8011558:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 801155c:	4b03      	ldr	r3, [pc, #12]	@ (801156c <LoRaMacInitialization+0x384>)
 801155e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 8011562:	4b02      	ldr	r3, [pc, #8]	@ (801156c <LoRaMacInitialization+0x384>)
 8011564:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011568:	e00c      	b.n	8011584 <LoRaMacInitialization+0x39c>
 801156a:	bf00      	nop
 801156c:	20000df8 	.word	0x20000df8
 8011570:	200008d8 	.word	0x200008d8
 8011574:	01000400 	.word	0x01000400
 8011578:	20000fdc 	.word	0x20000fdc
 801157c:	20000fe0 	.word	0x20000fe0
 8011580:	200018f0 	.word	0x200018f0
 8011584:	4a60      	ldr	r2, [pc, #384]	@ (8011708 <LoRaMacInitialization+0x520>)
 8011586:	64d3      	str	r3, [r2, #76]	@ 0x4c
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 8011588:	4b5f      	ldr	r3, [pc, #380]	@ (8011708 <LoRaMacInitialization+0x520>)
 801158a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801158e:	4a5e      	ldr	r2, [pc, #376]	@ (8011708 <LoRaMacInitialization+0x520>)
 8011590:	6513      	str	r3, [r2, #80]	@ 0x50
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 8011592:	4b5d      	ldr	r3, [pc, #372]	@ (8011708 <LoRaMacInitialization+0x520>)
 8011594:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8011598:	4a5b      	ldr	r2, [pc, #364]	@ (8011708 <LoRaMacInitialization+0x520>)
 801159a:	6553      	str	r3, [r2, #84]	@ 0x54
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 801159c:	4b5a      	ldr	r3, [pc, #360]	@ (8011708 <LoRaMacInitialization+0x520>)
 801159e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80115a2:	4a59      	ldr	r2, [pc, #356]	@ (8011708 <LoRaMacInitialization+0x520>)
 80115a4:	6593      	str	r3, [r2, #88]	@ 0x58
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 80115a6:	4b58      	ldr	r3, [pc, #352]	@ (8011708 <LoRaMacInitialization+0x520>)
 80115a8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80115ac:	4a56      	ldr	r2, [pc, #344]	@ (8011708 <LoRaMacInitialization+0x520>)
 80115ae:	65d3      	str	r3, [r2, #92]	@ 0x5c
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 80115b0:	4b55      	ldr	r3, [pc, #340]	@ (8011708 <LoRaMacInitialization+0x520>)
 80115b2:	f893 20a4 	ldrb.w	r2, [r3, #164]	@ 0xa4
 80115b6:	4b54      	ldr	r3, [pc, #336]	@ (8011708 <LoRaMacInitialization+0x520>)
 80115b8:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    params.NvmGroup1 = &Nvm.RegionGroup1;
    params.NvmGroup2 = &Nvm.RegionGroup2;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
 80115bc:	4b52      	ldr	r3, [pc, #328]	@ (8011708 <LoRaMacInitialization+0x520>)
 80115be:	2201      	movs	r2, #1
 80115c0:	f883 210b 	strb.w	r2, [r3, #267]	@ 0x10b
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 80115c4:	4a51      	ldr	r2, [pc, #324]	@ (801170c <LoRaMacInitialization+0x524>)
 80115c6:	693b      	ldr	r3, [r7, #16]
 80115c8:	f8c2 3348 	str.w	r3, [r2, #840]	@ 0x348
    ResetMacParameters( );
 80115cc:	f7ff f8d6 	bl	801077c <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 80115d0:	4b4d      	ldr	r3, [pc, #308]	@ (8011708 <LoRaMacInitialization+0x520>)
 80115d2:	2201      	movs	r2, #1
 80115d4:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105

    MacCtx.MacPrimitives = primitives;
 80115d8:	4a4c      	ldr	r2, [pc, #304]	@ (801170c <LoRaMacInitialization+0x524>)
 80115da:	697b      	ldr	r3, [r7, #20]
 80115dc:	f8c2 3344 	str.w	r3, [r2, #836]	@ 0x344
    MacCtx.MacFlags.Value = 0;
 80115e0:	4b4a      	ldr	r3, [pc, #296]	@ (801170c <LoRaMacInitialization+0x524>)
 80115e2:	2200      	movs	r2, #0
 80115e4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    MacCtx.MacState = LORAMAC_STOPPED;
 80115e8:	4b48      	ldr	r3, [pc, #288]	@ (801170c <LoRaMacInitialization+0x524>)
 80115ea:	2201      	movs	r2, #1
 80115ec:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 80115f0:	4b45      	ldr	r3, [pc, #276]	@ (8011708 <LoRaMacInitialization+0x520>)
 80115f2:	2200      	movs	r2, #0
 80115f4:	62da      	str	r2, [r3, #44]	@ 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 80115f6:	4b44      	ldr	r3, [pc, #272]	@ (8011708 <LoRaMacInitialization+0x520>)
 80115f8:	2200      	movs	r2, #0
 80115fa:	631a      	str	r2, [r3, #48]	@ 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 80115fc:	2300      	movs	r3, #0
 80115fe:	9300      	str	r3, [sp, #0]
 8011600:	4b43      	ldr	r3, [pc, #268]	@ (8011710 <LoRaMacInitialization+0x528>)
 8011602:	2200      	movs	r2, #0
 8011604:	f04f 31ff 	mov.w	r1, #4294967295
 8011608:	4842      	ldr	r0, [pc, #264]	@ (8011714 <LoRaMacInitialization+0x52c>)
 801160a:	f009 fd3b 	bl	801b084 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 801160e:	2300      	movs	r3, #0
 8011610:	9300      	str	r3, [sp, #0]
 8011612:	4b41      	ldr	r3, [pc, #260]	@ (8011718 <LoRaMacInitialization+0x530>)
 8011614:	2200      	movs	r2, #0
 8011616:	f04f 31ff 	mov.w	r1, #4294967295
 801161a:	4840      	ldr	r0, [pc, #256]	@ (801171c <LoRaMacInitialization+0x534>)
 801161c:	f009 fd32 	bl	801b084 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 8011620:	2300      	movs	r3, #0
 8011622:	9300      	str	r3, [sp, #0]
 8011624:	4b3e      	ldr	r3, [pc, #248]	@ (8011720 <LoRaMacInitialization+0x538>)
 8011626:	2200      	movs	r2, #0
 8011628:	f04f 31ff 	mov.w	r1, #4294967295
 801162c:	483d      	ldr	r0, [pc, #244]	@ (8011724 <LoRaMacInitialization+0x53c>)
 801162e:	f009 fd29 	bl	801b084 <UTIL_TIMER_Create>
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
 8011632:	2300      	movs	r3, #0
 8011634:	9300      	str	r3, [sp, #0]
 8011636:	4b3c      	ldr	r3, [pc, #240]	@ (8011728 <LoRaMacInitialization+0x540>)
 8011638:	2200      	movs	r2, #0
 801163a:	f04f 31ff 	mov.w	r1, #4294967295
 801163e:	483b      	ldr	r0, [pc, #236]	@ (801172c <LoRaMacInitialization+0x544>)
 8011640:	f009 fd20 	bl	801b084 <UTIL_TIMER_Create>
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 8011644:	4c30      	ldr	r4, [pc, #192]	@ (8011708 <LoRaMacInitialization+0x520>)
 8011646:	463b      	mov	r3, r7
 8011648:	4618      	mov	r0, r3
 801164a:	f009 f891 	bl	801a770 <SysTimeGetMcuTime>
 801164e:	f504 7388 	add.w	r3, r4, #272	@ 0x110
 8011652:	463a      	mov	r2, r7
 8011654:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011658:	e883 0003 	stmia.w	r3, {r0, r1}

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
 801165c:	4b34      	ldr	r3, [pc, #208]	@ (8011730 <LoRaMacInitialization+0x548>)
 801165e:	2200      	movs	r2, #0
 8011660:	601a      	str	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 8011662:	4b2a      	ldr	r3, [pc, #168]	@ (801170c <LoRaMacInitialization+0x524>)
 8011664:	4a33      	ldr	r2, [pc, #204]	@ (8011734 <LoRaMacInitialization+0x54c>)
 8011666:	f8c3 234c 	str.w	r2, [r3, #844]	@ 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 801166a:	4b28      	ldr	r3, [pc, #160]	@ (801170c <LoRaMacInitialization+0x524>)
 801166c:	4a32      	ldr	r2, [pc, #200]	@ (8011738 <LoRaMacInitialization+0x550>)
 801166e:	f8c3 2354 	str.w	r2, [r3, #852]	@ 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 8011672:	4b26      	ldr	r3, [pc, #152]	@ (801170c <LoRaMacInitialization+0x524>)
 8011674:	4a31      	ldr	r2, [pc, #196]	@ (801173c <LoRaMacInitialization+0x554>)
 8011676:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 801167a:	4b24      	ldr	r3, [pc, #144]	@ (801170c <LoRaMacInitialization+0x524>)
 801167c:	4a30      	ldr	r2, [pc, #192]	@ (8011740 <LoRaMacInitialization+0x558>)
 801167e:	f8c3 2350 	str.w	r2, [r3, #848]	@ 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 8011682:	4b22      	ldr	r3, [pc, #136]	@ (801170c <LoRaMacInitialization+0x524>)
 8011684:	4a2f      	ldr	r2, [pc, #188]	@ (8011744 <LoRaMacInitialization+0x55c>)
 8011686:	f8c3 2358 	str.w	r2, [r3, #856]	@ 0x358
    Radio.Init( &MacCtx.RadioEvents );
 801168a:	4b2f      	ldr	r3, [pc, #188]	@ (8011748 <LoRaMacInitialization+0x560>)
 801168c:	681b      	ldr	r3, [r3, #0]
 801168e:	482f      	ldr	r0, [pc, #188]	@ (801174c <LoRaMacInitialization+0x564>)
 8011690:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement, callbacks->GetUniqueId ) != SECURE_ELEMENT_SUCCESS ) /* ST_WORKAROUND: Add unique ID callback as input parameter */
 8011692:	693b      	ldr	r3, [r7, #16]
 8011694:	689b      	ldr	r3, [r3, #8]
 8011696:	4619      	mov	r1, r3
 8011698:	482d      	ldr	r0, [pc, #180]	@ (8011750 <LoRaMacInitialization+0x568>)
 801169a:	f7fa fb87 	bl	800bdac <SecureElementInit>
 801169e:	4603      	mov	r3, r0
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	d001      	beq.n	80116a8 <LoRaMacInitialization+0x4c0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 80116a4:	2311      	movs	r3, #17
 80116a6:	e02b      	b.n	8011700 <LoRaMacInitialization+0x518>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 80116a8:	4817      	ldr	r0, [pc, #92]	@ (8011708 <LoRaMacInitialization+0x520>)
 80116aa:	f002 faf9 	bl	8013ca0 <LoRaMacCryptoInit>
 80116ae:	4603      	mov	r3, r0
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	d001      	beq.n	80116b8 <LoRaMacInitialization+0x4d0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 80116b4:	2311      	movs	r3, #17
 80116b6:	e023      	b.n	8011700 <LoRaMacInitialization+0x518>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 80116b8:	f001 fc1c 	bl	8012ef4 <LoRaMacCommandsInit>
 80116bc:	4603      	mov	r3, r0
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d001      	beq.n	80116c6 <LoRaMacInitialization+0x4de>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80116c2:	2313      	movs	r3, #19
 80116c4:	e01c      	b.n	8011700 <LoRaMacInitialization+0x518>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 80116c6:	4823      	ldr	r0, [pc, #140]	@ (8011754 <LoRaMacInitialization+0x56c>)
 80116c8:	f002 fb8a 	bl	8013de0 <LoRaMacCryptoSetMulticastReference>
 80116cc:	4603      	mov	r3, r0
 80116ce:	2b00      	cmp	r3, #0
 80116d0:	d001      	beq.n	80116d6 <LoRaMacInitialization+0x4ee>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 80116d2:	2311      	movs	r3, #17
 80116d4:	e014      	b.n	8011700 <LoRaMacInitialization+0x518>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 80116d6:	4b1c      	ldr	r3, [pc, #112]	@ (8011748 <LoRaMacInitialization+0x560>)
 80116d8:	695b      	ldr	r3, [r3, #20]
 80116da:	4798      	blx	r3
 80116dc:	4603      	mov	r3, r0
 80116de:	4618      	mov	r0, r3
 80116e0:	f005 fc02 	bl	8016ee8 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 80116e4:	4b18      	ldr	r3, [pc, #96]	@ (8011748 <LoRaMacInitialization+0x560>)
 80116e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80116e8:	4a07      	ldr	r2, [pc, #28]	@ (8011708 <LoRaMacInitialization+0x520>)
 80116ea:	f892 2105 	ldrb.w	r2, [r2, #261]	@ 0x105
 80116ee:	4610      	mov	r0, r2
 80116f0:	4798      	blx	r3
    Radio.Sleep( );
 80116f2:	4b15      	ldr	r3, [pc, #84]	@ (8011748 <LoRaMacInitialization+0x560>)
 80116f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80116f6:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 80116f8:	2001      	movs	r0, #1
 80116fa:	f7fd fac7 	bl	800ec8c <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 80116fe:	2300      	movs	r3, #0
}
 8011700:	4618      	mov	r0, r3
 8011702:	373c      	adds	r7, #60	@ 0x3c
 8011704:	46bd      	mov	sp, r7
 8011706:	bd90      	pop	{r4, r7, pc}
 8011708:	20000df8 	.word	0x20000df8
 801170c:	200008d8 	.word	0x200008d8
 8011710:	0800f241 	.word	0x0800f241
 8011714:	20000c40 	.word	0x20000c40
 8011718:	0800f2d1 	.word	0x0800f2d1
 801171c:	20000c58 	.word	0x20000c58
 8011720:	0800f349 	.word	0x0800f349
 8011724:	20000c70 	.word	0x20000c70
 8011728:	0800f3c9 	.word	0x0800f3c9
 801172c:	20000cdc 	.word	0x20000cdc
 8011730:	20001980 	.word	0x20001980
 8011734:	0800dd41 	.word	0x0800dd41
 8011738:	0800ddb9 	.word	0x0800ddb9
 801173c:	0800de99 	.word	0x0800de99
 8011740:	0800de4d 	.word	0x0800de4d
 8011744:	0800ded5 	.word	0x0800ded5
 8011748:	0801f464 	.word	0x0801f464
 801174c:	20000c24 	.word	0x20000c24
 8011750:	20000f1c 	.word	0x20000f1c
 8011754:	20000ed0 	.word	0x20000ed0

08011758 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 8011758:	b480      	push	{r7}
 801175a:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 801175c:	4b04      	ldr	r3, [pc, #16]	@ (8011770 <LoRaMacStart+0x18>)
 801175e:	2200      	movs	r2, #0
 8011760:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
    return LORAMAC_STATUS_OK;
 8011764:	2300      	movs	r3, #0
}
 8011766:	4618      	mov	r0, r3
 8011768:	46bd      	mov	sp, r7
 801176a:	bc80      	pop	{r7}
 801176c:	4770      	bx	lr
 801176e:	bf00      	nop
 8011770:	200008d8 	.word	0x200008d8

08011774 <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 8011774:	b580      	push	{r7, lr}
 8011776:	af00      	add	r7, sp, #0
    if( LoRaMacIsBusy( ) == false )
 8011778:	f7fd fa68 	bl	800ec4c <LoRaMacIsBusy>
 801177c:	4603      	mov	r3, r0
 801177e:	f083 0301 	eor.w	r3, r3, #1
 8011782:	b2db      	uxtb	r3, r3
 8011784:	2b00      	cmp	r3, #0
 8011786:	d005      	beq.n	8011794 <LoRaMacStop+0x20>
    {
        MacCtx.MacState = LORAMAC_STOPPED;
 8011788:	4b07      	ldr	r3, [pc, #28]	@ (80117a8 <LoRaMacStop+0x34>)
 801178a:	2201      	movs	r2, #1
 801178c:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
        return LORAMAC_STATUS_OK;
 8011790:	2300      	movs	r3, #0
 8011792:	e007      	b.n	80117a4 <LoRaMacStop+0x30>
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 8011794:	4b04      	ldr	r3, [pc, #16]	@ (80117a8 <LoRaMacStop+0x34>)
 8011796:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 801179a:	2b01      	cmp	r3, #1
 801179c:	d101      	bne.n	80117a2 <LoRaMacStop+0x2e>
    {
        return LORAMAC_STATUS_OK;
 801179e:	2300      	movs	r3, #0
 80117a0:	e000      	b.n	80117a4 <LoRaMacStop+0x30>
    }
    return LORAMAC_STATUS_BUSY;
 80117a2:	2301      	movs	r3, #1
}
 80117a4:	4618      	mov	r0, r3
 80117a6:	bd80      	pop	{r7, pc}
 80117a8:	200008d8 	.word	0x200008d8

080117ac <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 80117ac:	b580      	push	{r7, lr}
 80117ae:	af00      	add	r7, sp, #0
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 80117b0:	4812      	ldr	r0, [pc, #72]	@ (80117fc <LoRaMacHalt+0x50>)
 80117b2:	f009 fd0b 	bl	801b1cc <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 80117b6:	4812      	ldr	r0, [pc, #72]	@ (8011800 <LoRaMacHalt+0x54>)
 80117b8:	f009 fd08 	bl	801b1cc <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 80117bc:	4811      	ldr	r0, [pc, #68]	@ (8011804 <LoRaMacHalt+0x58>)
 80117be:	f009 fd05 	bl	801b1cc <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 80117c2:	4811      	ldr	r0, [pc, #68]	@ (8011808 <LoRaMacHalt+0x5c>)
 80117c4:	f009 fd02 	bl	801b1cc <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 80117c8:	f001 fa04 	bl	8012bd4 <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 80117cc:	4b0f      	ldr	r3, [pc, #60]	@ (801180c <LoRaMacHalt+0x60>)
 80117ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80117d0:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 80117d2:	4b0f      	ldr	r3, [pc, #60]	@ (8011810 <LoRaMacHalt+0x64>)
 80117d4:	2200      	movs	r2, #0
 80117d6:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

    LoRaMacHandleNvm( &Nvm );
 80117da:	480e      	ldr	r0, [pc, #56]	@ (8011814 <LoRaMacHalt+0x68>)
 80117dc:	f7fd fc0c 	bl	800eff8 <LoRaMacHandleNvm>

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
 80117e0:	f240 527c 	movw	r2, #1404	@ 0x57c
 80117e4:	490b      	ldr	r1, [pc, #44]	@ (8011814 <LoRaMacHalt+0x68>)
 80117e6:	480c      	ldr	r0, [pc, #48]	@ (8011818 <LoRaMacHalt+0x6c>)
 80117e8:	f005 fba3 	bl	8016f32 <memcpy1>

    MacCtx.MacState = LORAMAC_STOPPED;
 80117ec:	4b08      	ldr	r3, [pc, #32]	@ (8011810 <LoRaMacHalt+0x64>)
 80117ee:	2201      	movs	r2, #1
 80117f0:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

    return LORAMAC_STATUS_OK;
 80117f4:	2300      	movs	r3, #0
}
 80117f6:	4618      	mov	r0, r3
 80117f8:	bd80      	pop	{r7, pc}
 80117fa:	bf00      	nop
 80117fc:	20000c40 	.word	0x20000c40
 8011800:	20000c58 	.word	0x20000c58
 8011804:	20000c70 	.word	0x20000c70
 8011808:	20000cdc 	.word	0x20000cdc
 801180c:	0801f464 	.word	0x0801f464
 8011810:	200008d8 	.word	0x200008d8
 8011814:	20000df8 	.word	0x20000df8
 8011818:	20001374 	.word	0x20001374

0801181c <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 801181c:	b590      	push	{r4, r7, lr}
 801181e:	b08d      	sub	sp, #52	@ 0x34
 8011820:	af02      	add	r7, sp, #8
 8011822:	4603      	mov	r3, r0
 8011824:	6039      	str	r1, [r7, #0]
 8011826:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8011828:	4b42      	ldr	r3, [pc, #264]	@ (8011934 <LoRaMacQueryTxPossible+0x118>)
 801182a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801182c:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 801182e:	4b41      	ldr	r3, [pc, #260]	@ (8011934 <LoRaMacQueryTxPossible+0x118>)
 8011830:	f993 30cd 	ldrsb.w	r3, [r3, #205]	@ 0xcd
 8011834:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8011836:	4b3f      	ldr	r3, [pc, #252]	@ (8011934 <LoRaMacQueryTxPossible+0x118>)
 8011838:	f993 30cc 	ldrsb.w	r3, [r3, #204]	@ 0xcc
 801183c:	73bb      	strb	r3, [r7, #14]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
 801183e:	4b3e      	ldr	r3, [pc, #248]	@ (8011938 <LoRaMacQueryTxPossible+0x11c>)
 8011840:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 8011844:	737b      	strb	r3, [r7, #13]
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 8011846:	2300      	movs	r3, #0
 8011848:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 801184a:	683b      	ldr	r3, [r7, #0]
 801184c:	2b00      	cmp	r3, #0
 801184e:	d101      	bne.n	8011854 <LoRaMacQueryTxPossible+0x38>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011850:	2303      	movs	r3, #3
 8011852:	e06b      	b.n	801192c <LoRaMacQueryTxPossible+0x110>

    // Setup ADR request
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 8011854:	2300      	movs	r3, #0
 8011856:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8011858:	4b36      	ldr	r3, [pc, #216]	@ (8011934 <LoRaMacQueryTxPossible+0x118>)
 801185a:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 801185e:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8011860:	4b34      	ldr	r3, [pc, #208]	@ (8011934 <LoRaMacQueryTxPossible+0x118>)
 8011862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011864:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8011866:	4b34      	ldr	r3, [pc, #208]	@ (8011938 <LoRaMacQueryTxPossible+0x11c>)
 8011868:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 801186c:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 801186e:	4b32      	ldr	r3, [pc, #200]	@ (8011938 <LoRaMacQueryTxPossible+0x11c>)
 8011870:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	@ 0x402
 8011874:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8011876:	4b2f      	ldr	r3, [pc, #188]	@ (8011934 <LoRaMacQueryTxPossible+0x118>)
 8011878:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 801187c:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8011880:	4b2c      	ldr	r3, [pc, #176]	@ (8011934 <LoRaMacQueryTxPossible+0x118>)
 8011882:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 8011886:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
 801188a:	4b2b      	ldr	r3, [pc, #172]	@ (8011938 <LoRaMacQueryTxPossible+0x11c>)
 801188c:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 8011890:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011894:	4b27      	ldr	r3, [pc, #156]	@ (8011934 <LoRaMacQueryTxPossible+0x118>)
 8011896:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 801189a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 801189e:	4b25      	ldr	r3, [pc, #148]	@ (8011934 <LoRaMacQueryTxPossible+0x118>)
 80118a0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80118a4:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
 80118a8:	f107 040d 	add.w	r4, r7, #13
 80118ac:	f107 020e 	add.w	r2, r7, #14
 80118b0:	f107 010f 	add.w	r1, r7, #15
 80118b4:	f107 0014 	add.w	r0, r7, #20
 80118b8:	f107 0310 	add.w	r3, r7, #16
 80118bc:	9300      	str	r3, [sp, #0]
 80118be:	4623      	mov	r3, r4
 80118c0:	f001 f852 	bl	8012968 <LoRaMacAdrCalcNext>
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 80118c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80118c8:	4618      	mov	r0, r3
 80118ca:	f7fd feb9 	bl	800f640 <GetMaxAppPayloadWithoutFOptsLength>
 80118ce:	4603      	mov	r3, r0
 80118d0:	461a      	mov	r2, r3
 80118d2:	683b      	ldr	r3, [r7, #0]
 80118d4:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80118d6:	f107 0308 	add.w	r3, r7, #8
 80118da:	4618      	mov	r0, r3
 80118dc:	f001 fbd8 	bl	8013090 <LoRaMacCommandsGetSizeSerializedCmds>
 80118e0:	4603      	mov	r3, r0
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d001      	beq.n	80118ea <LoRaMacQueryTxPossible+0xce>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80118e6:	2313      	movs	r3, #19
 80118e8:	e020      	b.n	801192c <LoRaMacQueryTxPossible+0x110>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 80118ea:	68bb      	ldr	r3, [r7, #8]
 80118ec:	2b0f      	cmp	r3, #15
 80118ee:	d819      	bhi.n	8011924 <LoRaMacQueryTxPossible+0x108>
 80118f0:	683b      	ldr	r3, [r7, #0]
 80118f2:	785b      	ldrb	r3, [r3, #1]
 80118f4:	461a      	mov	r2, r3
 80118f6:	68bb      	ldr	r3, [r7, #8]
 80118f8:	429a      	cmp	r2, r3
 80118fa:	d313      	bcc.n	8011924 <LoRaMacQueryTxPossible+0x108>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 80118fc:	683b      	ldr	r3, [r7, #0]
 80118fe:	785a      	ldrb	r2, [r3, #1]
 8011900:	68bb      	ldr	r3, [r7, #8]
 8011902:	b2db      	uxtb	r3, r3
 8011904:	1ad3      	subs	r3, r2, r3
 8011906:	b2da      	uxtb	r2, r3
 8011908:	683b      	ldr	r3, [r7, #0]
 801190a:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 801190c:	683b      	ldr	r3, [r7, #0]
 801190e:	785b      	ldrb	r3, [r3, #1]
 8011910:	4619      	mov	r1, r3
 8011912:	79fa      	ldrb	r2, [r7, #7]
 8011914:	68bb      	ldr	r3, [r7, #8]
 8011916:	4413      	add	r3, r2
 8011918:	4299      	cmp	r1, r3
 801191a:	d301      	bcc.n	8011920 <LoRaMacQueryTxPossible+0x104>
        {
            return LORAMAC_STATUS_OK;
 801191c:	2300      	movs	r3, #0
 801191e:	e005      	b.n	801192c <LoRaMacQueryTxPossible+0x110>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 8011920:	2308      	movs	r3, #8
 8011922:	e003      	b.n	801192c <LoRaMacQueryTxPossible+0x110>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 8011924:	683b      	ldr	r3, [r7, #0]
 8011926:	2200      	movs	r2, #0
 8011928:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 801192a:	2308      	movs	r3, #8
    }
}
 801192c:	4618      	mov	r0, r3
 801192e:	372c      	adds	r7, #44	@ 0x2c
 8011930:	46bd      	mov	sp, r7
 8011932:	bd90      	pop	{r4, r7, pc}
 8011934:	20000df8 	.word	0x20000df8
 8011938:	200008d8 	.word	0x200008d8

0801193c <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 801193c:	b590      	push	{r4, r7, lr}
 801193e:	b087      	sub	sp, #28
 8011940:	af00      	add	r7, sp, #0
 8011942:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8011944:	2300      	movs	r3, #0
 8011946:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	2b00      	cmp	r3, #0
 801194c:	d101      	bne.n	8011952 <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801194e:	2303      	movs	r3, #3
 8011950:	e191      	b.n	8011c76 <LoRaMacMibGetRequestConfirm+0x33a>
    }

    switch( mibGet->Type )
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	781b      	ldrb	r3, [r3, #0]
 8011956:	2b39      	cmp	r3, #57	@ 0x39
 8011958:	f200 8186 	bhi.w	8011c68 <LoRaMacMibGetRequestConfirm+0x32c>
 801195c:	a201      	add	r2, pc, #4	@ (adr r2, 8011964 <LoRaMacMibGetRequestConfirm+0x28>)
 801195e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011962:	bf00      	nop
 8011964:	08011a4d 	.word	0x08011a4d
 8011968:	08011a59 	.word	0x08011a59
 801196c:	08011a65 	.word	0x08011a65
 8011970:	08011a71 	.word	0x08011a71
 8011974:	08011a7d 	.word	0x08011a7d
 8011978:	08011a89 	.word	0x08011a89
 801197c:	08011a95 	.word	0x08011a95
 8011980:	08011c69 	.word	0x08011c69
 8011984:	08011c69 	.word	0x08011c69
 8011988:	08011c69 	.word	0x08011c69
 801198c:	08011c69 	.word	0x08011c69
 8011990:	08011c69 	.word	0x08011c69
 8011994:	08011c69 	.word	0x08011c69
 8011998:	08011c69 	.word	0x08011c69
 801199c:	08011c69 	.word	0x08011c69
 80119a0:	08011aa1 	.word	0x08011aa1
 80119a4:	08011aad 	.word	0x08011aad
 80119a8:	08011ab9 	.word	0x08011ab9
 80119ac:	08011adb 	.word	0x08011adb
 80119b0:	08011aed 	.word	0x08011aed
 80119b4:	08011aff 	.word	0x08011aff
 80119b8:	08011b11 	.word	0x08011b11
 80119bc:	08011b45 	.word	0x08011b45
 80119c0:	08011b23 	.word	0x08011b23
 80119c4:	08011b67 	.word	0x08011b67
 80119c8:	08011b73 	.word	0x08011b73
 80119cc:	08011b7d 	.word	0x08011b7d
 80119d0:	08011b87 	.word	0x08011b87
 80119d4:	08011b91 	.word	0x08011b91
 80119d8:	08011b9b 	.word	0x08011b9b
 80119dc:	08011ba5 	.word	0x08011ba5
 80119e0:	08011bd1 	.word	0x08011bd1
 80119e4:	08011bdd 	.word	0x08011bdd
 80119e8:	08011bf5 	.word	0x08011bf5
 80119ec:	08011be9 	.word	0x08011be9
 80119f0:	08011c01 	.word	0x08011c01
 80119f4:	08011c0b 	.word	0x08011c0b
 80119f8:	08011c17 	.word	0x08011c17
 80119fc:	08011c31 	.word	0x08011c31
 8011a00:	08011c21 	.word	0x08011c21
 8011a04:	08011c29 	.word	0x08011c29
 8011a08:	08011c69 	.word	0x08011c69
 8011a0c:	08011c3d 	.word	0x08011c3d
 8011a10:	08011c69 	.word	0x08011c69
 8011a14:	08011c69 	.word	0x08011c69
 8011a18:	08011c69 	.word	0x08011c69
 8011a1c:	08011c69 	.word	0x08011c69
 8011a20:	08011c69 	.word	0x08011c69
 8011a24:	08011c69 	.word	0x08011c69
 8011a28:	08011c69 	.word	0x08011c69
 8011a2c:	08011c69 	.word	0x08011c69
 8011a30:	08011c69 	.word	0x08011c69
 8011a34:	08011c69 	.word	0x08011c69
 8011a38:	08011c69 	.word	0x08011c69
 8011a3c:	08011c69 	.word	0x08011c69
 8011a40:	08011c69 	.word	0x08011c69
 8011a44:	08011c51 	.word	0x08011c51
 8011a48:	08011c5d 	.word	0x08011c5d
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 8011a4c:	4b8c      	ldr	r3, [pc, #560]	@ (8011c80 <LoRaMacMibGetRequestConfirm+0x344>)
 8011a4e:	f893 2104 	ldrb.w	r2, [r3, #260]	@ 0x104
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	711a      	strb	r2, [r3, #4]
            break;
 8011a56:	e10d      	b.n	8011c74 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8011a58:	4b89      	ldr	r3, [pc, #548]	@ (8011c80 <LoRaMacMibGetRequestConfirm+0x344>)
 8011a5a:	f893 211c 	ldrb.w	r2, [r3, #284]	@ 0x11c
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	711a      	strb	r2, [r3, #4]
            break;
 8011a62:	e107      	b.n	8011c74 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_DEV_EUI:
        {
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 8011a64:	f7fa fc76 	bl	800c354 <SecureElementGetDevEui>
 8011a68:	4602      	mov	r2, r0
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	605a      	str	r2, [r3, #4]
            break;
 8011a6e:	e101      	b.n	8011c74 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_JOIN_EUI:
        {
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 8011a70:	f7fa fc92 	bl	800c398 <SecureElementGetJoinEui>
 8011a74:	4602      	mov	r2, r0
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	605a      	str	r2, [r3, #4]
            break;
 8011a7a:	e0fb      	b.n	8011c74 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 8011a7c:	4b80      	ldr	r3, [pc, #512]	@ (8011c80 <LoRaMacMibGetRequestConfirm+0x344>)
 8011a7e:	f893 2106 	ldrb.w	r2, [r3, #262]	@ 0x106
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	711a      	strb	r2, [r3, #4]
            break;
 8011a86:	e0f5      	b.n	8011c74 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 8011a88:	4b7d      	ldr	r3, [pc, #500]	@ (8011c80 <LoRaMacMibGetRequestConfirm+0x344>)
 8011a8a:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	605a      	str	r2, [r3, #4]
            break;
 8011a92:	e0ef      	b.n	8011c74 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_DEV_ADDR:
        {
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 8011a94:	4b7a      	ldr	r3, [pc, #488]	@ (8011c80 <LoRaMacMibGetRequestConfirm+0x344>)
 8011a96:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	605a      	str	r2, [r3, #4]
            break;
 8011a9e:	e0e9      	b.n	8011c74 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 8011aa0:	4b77      	ldr	r3, [pc, #476]	@ (8011c80 <LoRaMacMibGetRequestConfirm+0x344>)
 8011aa2:	f893 2105 	ldrb.w	r2, [r3, #261]	@ 0x105
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	711a      	strb	r2, [r3, #4]
            break;
 8011aaa:	e0e3      	b.n	8011c74 <LoRaMacMibGetRequestConfirm+0x338>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8011aac:	4b74      	ldr	r3, [pc, #464]	@ (8011c80 <LoRaMacMibGetRequestConfirm+0x344>)
 8011aae:	f893 2080 	ldrb.w	r2, [r3, #128]	@ 0x80
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	711a      	strb	r2, [r3, #4]
            break;
 8011ab6:	e0dd      	b.n	8011c74 <LoRaMacMibGetRequestConfirm+0x338>
        }
        /* ST_WORKAROUND_END */
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 8011ab8:	231c      	movs	r3, #28
 8011aba:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011abc:	4b70      	ldr	r3, [pc, #448]	@ (8011c80 <LoRaMacMibGetRequestConfirm+0x344>)
 8011abe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011ac2:	f107 0210 	add.w	r2, r7, #16
 8011ac6:	4611      	mov	r1, r2
 8011ac8:	4618      	mov	r0, r3
 8011aca:	f002 ff91 	bl	80149f0 <RegionGetPhyParam>
 8011ace:	4603      	mov	r3, r0
 8011ad0:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 8011ad2:	68fa      	ldr	r2, [r7, #12]
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	605a      	str	r2, [r3, #4]
            break;
 8011ad8:	e0cc      	b.n	8011c74 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	4a68      	ldr	r2, [pc, #416]	@ (8011c80 <LoRaMacMibGetRequestConfirm+0x344>)
 8011ade:	3304      	adds	r3, #4
 8011ae0:	3264      	adds	r2, #100	@ 0x64
 8011ae2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011ae6:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8011aea:	e0c3      	b.n	8011c74 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	4a64      	ldr	r2, [pc, #400]	@ (8011c80 <LoRaMacMibGetRequestConfirm+0x344>)
 8011af0:	3304      	adds	r3, #4
 8011af2:	32a8      	adds	r2, #168	@ 0xa8
 8011af4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011af8:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8011afc:	e0ba      	b.n	8011c74 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	4a5f      	ldr	r2, [pc, #380]	@ (8011c80 <LoRaMacMibGetRequestConfirm+0x344>)
 8011b02:	3304      	adds	r3, #4
 8011b04:	326c      	adds	r2, #108	@ 0x6c
 8011b06:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011b0a:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8011b0e:	e0b1      	b.n	8011c74 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	4a5b      	ldr	r2, [pc, #364]	@ (8011c80 <LoRaMacMibGetRequestConfirm+0x344>)
 8011b14:	3304      	adds	r3, #4
 8011b16:	32b0      	adds	r2, #176	@ 0xb0
 8011b18:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011b1c:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8011b20:	e0a8      	b.n	8011c74 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 8011b22:	231a      	movs	r3, #26
 8011b24:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011b26:	4b56      	ldr	r3, [pc, #344]	@ (8011c80 <LoRaMacMibGetRequestConfirm+0x344>)
 8011b28:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011b2c:	f107 0210 	add.w	r2, r7, #16
 8011b30:	4611      	mov	r1, r2
 8011b32:	4618      	mov	r0, r3
 8011b34:	f002 ff5c 	bl	80149f0 <RegionGetPhyParam>
 8011b38:	4603      	mov	r3, r0
 8011b3a:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 8011b3c:	68fa      	ldr	r2, [r7, #12]
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	605a      	str	r2, [r3, #4]
            break;
 8011b42:	e097      	b.n	8011c74 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8011b44:	2319      	movs	r3, #25
 8011b46:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011b48:	4b4d      	ldr	r3, [pc, #308]	@ (8011c80 <LoRaMacMibGetRequestConfirm+0x344>)
 8011b4a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011b4e:	f107 0210 	add.w	r2, r7, #16
 8011b52:	4611      	mov	r1, r2
 8011b54:	4618      	mov	r0, r3
 8011b56:	f002 ff4b 	bl	80149f0 <RegionGetPhyParam>
 8011b5a:	4603      	mov	r3, r0
 8011b5c:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 8011b5e:	68fa      	ldr	r2, [r7, #12]
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	605a      	str	r2, [r3, #4]
            break;
 8011b64:	e086      	b.n	8011c74 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8011b66:	4b46      	ldr	r3, [pc, #280]	@ (8011c80 <LoRaMacMibGetRequestConfirm+0x344>)
 8011b68:	f893 2060 	ldrb.w	r2, [r3, #96]	@ 0x60
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	711a      	strb	r2, [r3, #4]
            break;
 8011b70:	e080      	b.n	8011c74 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 8011b72:	4b43      	ldr	r3, [pc, #268]	@ (8011c80 <LoRaMacMibGetRequestConfirm+0x344>)
 8011b74:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	605a      	str	r2, [r3, #4]
            break;
 8011b7a:	e07b      	b.n	8011c74 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 8011b7c:	4b40      	ldr	r3, [pc, #256]	@ (8011c80 <LoRaMacMibGetRequestConfirm+0x344>)
 8011b7e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	605a      	str	r2, [r3, #4]
            break;
 8011b84:	e076      	b.n	8011c74 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 8011b86:	4b3e      	ldr	r3, [pc, #248]	@ (8011c80 <LoRaMacMibGetRequestConfirm+0x344>)
 8011b88:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	605a      	str	r2, [r3, #4]
            break;
 8011b8e:	e071      	b.n	8011c74 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 8011b90:	4b3b      	ldr	r3, [pc, #236]	@ (8011c80 <LoRaMacMibGetRequestConfirm+0x344>)
 8011b92:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	605a      	str	r2, [r3, #4]
            break;
 8011b98:	e06c      	b.n	8011c74 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 8011b9a:	4b39      	ldr	r3, [pc, #228]	@ (8011c80 <LoRaMacMibGetRequestConfirm+0x344>)
 8011b9c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	605a      	str	r2, [r3, #4]
            break;
 8011ba2:	e067      	b.n	8011c74 <LoRaMacMibGetRequestConfirm+0x338>
        }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MIB_CHANNELS_MIN_TX_DATARATE:
        {
            getPhy.Attribute = PHY_MIN_TX_DR;
 8011ba4:	2302      	movs	r3, #2
 8011ba6:	743b      	strb	r3, [r7, #16]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011ba8:	4b35      	ldr	r3, [pc, #212]	@ (8011c80 <LoRaMacMibGetRequestConfirm+0x344>)
 8011baa:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8011bae:	74bb      	strb	r3, [r7, #18]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011bb0:	4b33      	ldr	r3, [pc, #204]	@ (8011c80 <LoRaMacMibGetRequestConfirm+0x344>)
 8011bb2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011bb6:	f107 0210 	add.w	r2, r7, #16
 8011bba:	4611      	mov	r1, r2
 8011bbc:	4618      	mov	r0, r3
 8011bbe:	f002 ff17 	bl	80149f0 <RegionGetPhyParam>
 8011bc2:	4603      	mov	r3, r0
 8011bc4:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMinTxDatarate = phyParam.Value;
 8011bc6:	68fb      	ldr	r3, [r7, #12]
 8011bc8:	b25a      	sxtb	r2, r3
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	711a      	strb	r2, [r3, #4]
            break;
 8011bce:	e051      	b.n	8011c74 <LoRaMacMibGetRequestConfirm+0x338>
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8011bd0:	4b2b      	ldr	r3, [pc, #172]	@ (8011c80 <LoRaMacMibGetRequestConfirm+0x344>)
 8011bd2:	f993 20cd 	ldrsb.w	r2, [r3, #205]	@ 0xcd
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	711a      	strb	r2, [r3, #4]
            break;
 8011bda:	e04b      	b.n	8011c74 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8011bdc:	4b28      	ldr	r3, [pc, #160]	@ (8011c80 <LoRaMacMibGetRequestConfirm+0x344>)
 8011bde:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	711a      	strb	r2, [r3, #4]
            break;
 8011be6:	e045      	b.n	8011c74 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8011be8:	4b25      	ldr	r3, [pc, #148]	@ (8011c80 <LoRaMacMibGetRequestConfirm+0x344>)
 8011bea:	f993 20cc 	ldrsb.w	r2, [r3, #204]	@ 0xcc
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	711a      	strb	r2, [r3, #4]
            break;
 8011bf2:	e03f      	b.n	8011c74 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8011bf4:	4b22      	ldr	r3, [pc, #136]	@ (8011c80 <LoRaMacMibGetRequestConfirm+0x344>)
 8011bf6:	f993 2038 	ldrsb.w	r2, [r3, #56]	@ 0x38
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	711a      	strb	r2, [r3, #4]
            break;
 8011bfe:	e039      	b.n	8011c74 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 8011c00:	4b1f      	ldr	r3, [pc, #124]	@ (8011c80 <LoRaMacMibGetRequestConfirm+0x344>)
 8011c02:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	605a      	str	r2, [r3, #4]
            break;
 8011c08:	e034      	b.n	8011c74 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 8011c0a:	4b1d      	ldr	r3, [pc, #116]	@ (8011c80 <LoRaMacMibGetRequestConfirm+0x344>)
 8011c0c:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	711a      	strb	r2, [r3, #4]
            break;
 8011c14:	e02e      	b.n	8011c74 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8011c16:	4b1a      	ldr	r3, [pc, #104]	@ (8011c80 <LoRaMacMibGetRequestConfirm+0x344>)
 8011c18:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	605a      	str	r2, [r3, #4]
            break;
 8011c1e:	e029      	b.n	8011c74 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	4a17      	ldr	r2, [pc, #92]	@ (8011c80 <LoRaMacMibGetRequestConfirm+0x344>)
 8011c24:	605a      	str	r2, [r3, #4]
            break;
 8011c26:	e025      	b.n	8011c74 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_NVM_BKP_CTXS:
        {
            mibGet->Param.BackupContexts = &NvmBackup;
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	4a16      	ldr	r2, [pc, #88]	@ (8011c84 <LoRaMacMibGetRequestConfirm+0x348>)
 8011c2c:	605a      	str	r2, [r3, #4]
            break;
 8011c2e:	e021      	b.n	8011c74 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8011c30:	4b13      	ldr	r3, [pc, #76]	@ (8011c80 <LoRaMacMibGetRequestConfirm+0x344>)
 8011c32:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	605a      	str	r2, [r3, #4]
            break;
 8011c3a:	e01b      	b.n	8011c74 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	4a10      	ldr	r2, [pc, #64]	@ (8011c80 <LoRaMacMibGetRequestConfirm+0x344>)
 8011c40:	f8d2 2118 	ldr.w	r2, [r2, #280]	@ 0x118
 8011c44:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 8011c46:	687c      	ldr	r4, [r7, #4]
 8011c48:	f003 f848 	bl	8014cdc <RegionGetVersion>
 8011c4c:	60a0      	str	r0, [r4, #8]
            break;
 8011c4e:	e011      	b.n	8011c74 <LoRaMacMibGetRequestConfirm+0x338>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 8011c50:	4b0b      	ldr	r3, [pc, #44]	@ (8011c80 <LoRaMacMibGetRequestConfirm+0x344>)
 8011c52:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	605a      	str	r2, [r3, #4]
            break;
 8011c5a:	e00b      	b.n	8011c74 <LoRaMacMibGetRequestConfirm+0x338>
        }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MIB_IS_CERT_FPORT_ON:
        {
            mibGet->Param.IsCertPortOn = Nvm.MacGroup2.IsCertPortOn;
 8011c5c:	4b08      	ldr	r3, [pc, #32]	@ (8011c80 <LoRaMacMibGetRequestConfirm+0x344>)
 8011c5e:	f893 210b 	ldrb.w	r2, [r3, #267]	@ 0x10b
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	711a      	strb	r2, [r3, #4]
            break;
 8011c66:	e005      	b.n	8011c74 <LoRaMacMibGetRequestConfirm+0x338>
        }
#endif /* LORAMAC_VERSION */
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 8011c68:	6878      	ldr	r0, [r7, #4]
 8011c6a:	f000 ffca 	bl	8012c02 <LoRaMacClassBMibGetRequestConfirm>
 8011c6e:	4603      	mov	r3, r0
 8011c70:	75fb      	strb	r3, [r7, #23]
            break;
 8011c72:	bf00      	nop
        }
    }
    return status;
 8011c74:	7dfb      	ldrb	r3, [r7, #23]
}
 8011c76:	4618      	mov	r0, r3
 8011c78:	371c      	adds	r7, #28
 8011c7a:	46bd      	mov	sp, r7
 8011c7c:	bd90      	pop	{r4, r7, pc}
 8011c7e:	bf00      	nop
 8011c80:	20000df8 	.word	0x20000df8
 8011c84:	20001374 	.word	0x20001374

08011c88 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 8011c88:	b580      	push	{r7, lr}
 8011c8a:	b086      	sub	sp, #24
 8011c8c:	af00      	add	r7, sp, #0
 8011c8e:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8011c90:	2300      	movs	r3, #0
 8011c92:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	d101      	bne.n	8011c9e <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011c9a:	2303      	movs	r3, #3
 8011c9c:	e35c      	b.n	8012358 <LoRaMacMibSetRequestConfirm+0x6d0>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 8011c9e:	4bb9      	ldr	r3, [pc, #740]	@ (8011f84 <LoRaMacMibSetRequestConfirm+0x2fc>)
 8011ca0:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8011ca4:	f003 0302 	and.w	r3, r3, #2
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	d001      	beq.n	8011cb0 <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8011cac:	2301      	movs	r3, #1
 8011cae:	e353      	b.n	8012358 <LoRaMacMibSetRequestConfirm+0x6d0>
    }

    switch( mibSet->Type )
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	781b      	ldrb	r3, [r3, #0]
 8011cb4:	2b39      	cmp	r3, #57	@ 0x39
 8011cb6:	f200 8323 	bhi.w	8012300 <LoRaMacMibSetRequestConfirm+0x678>
 8011cba:	a201      	add	r2, pc, #4	@ (adr r2, 8011cc0 <LoRaMacMibSetRequestConfirm+0x38>)
 8011cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011cc0:	08011da9 	.word	0x08011da9
 8011cc4:	08011db9 	.word	0x08011db9
 8011cc8:	08011dd3 	.word	0x08011dd3
 8011ccc:	08011deb 	.word	0x08011deb
 8011cd0:	08011e03 	.word	0x08011e03
 8011cd4:	08011e0f 	.word	0x08011e0f
 8011cd8:	08011e1b 	.word	0x08011e1b
 8011cdc:	08011e27 	.word	0x08011e27
 8011ce0:	08011e4d 	.word	0x08011e4d
 8011ce4:	08011e73 	.word	0x08011e73
 8011ce8:	08011e99 	.word	0x08011e99
 8011cec:	08011ebf 	.word	0x08011ebf
 8011cf0:	08011ee5 	.word	0x08011ee5
 8011cf4:	08011f0b 	.word	0x08011f0b
 8011cf8:	08011f31 	.word	0x08011f31
 8011cfc:	08011f57 	.word	0x08011f57
 8011d00:	08011f77 	.word	0x08011f77
 8011d04:	08012301 	.word	0x08012301
 8011d08:	08011f91 	.word	0x08011f91
 8011d0c:	08012001 	.word	0x08012001
 8011d10:	08012041 	.word	0x08012041
 8011d14:	080120a3 	.word	0x080120a3
 8011d18:	08012113 	.word	0x08012113
 8011d1c:	080120e3 	.word	0x080120e3
 8011d20:	08012143 	.word	0x08012143
 8011d24:	08012165 	.word	0x08012165
 8011d28:	0801216f 	.word	0x0801216f
 8011d2c:	08012179 	.word	0x08012179
 8011d30:	08012183 	.word	0x08012183
 8011d34:	0801218d 	.word	0x0801218d
 8011d38:	08012301 	.word	0x08012301
 8011d3c:	08012197 	.word	0x08012197
 8011d40:	080121c9 	.word	0x080121c9
 8011d44:	08012235 	.word	0x08012235
 8011d48:	08012203 	.word	0x08012203
 8011d4c:	08012271 	.word	0x08012271
 8011d50:	08012287 	.word	0x08012287
 8011d54:	0801229f 	.word	0x0801229f
 8011d58:	080122a9 	.word	0x080122a9
 8011d5c:	080122b5 	.word	0x080122b5
 8011d60:	08012301 	.word	0x08012301
 8011d64:	080122bf 	.word	0x080122bf
 8011d68:	08012301 	.word	0x08012301
 8011d6c:	08012301 	.word	0x08012301
 8011d70:	08012301 	.word	0x08012301
 8011d74:	08012301 	.word	0x08012301
 8011d78:	08012301 	.word	0x08012301
 8011d7c:	08012301 	.word	0x08012301
 8011d80:	08012301 	.word	0x08012301
 8011d84:	08012301 	.word	0x08012301
 8011d88:	08012301 	.word	0x08012301
 8011d8c:	08012301 	.word	0x08012301
 8011d90:	08012301 	.word	0x08012301
 8011d94:	08012301 	.word	0x08012301
 8011d98:	08012301 	.word	0x08012301
 8011d9c:	08012301 	.word	0x08012301
 8011da0:	080122e9 	.word	0x080122e9
 8011da4:	080122f5 	.word	0x080122f5
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	791b      	ldrb	r3, [r3, #4]
 8011dac:	4618      	mov	r0, r3
 8011dae:	f7fd fb75 	bl	800f49c <SwitchClass>
 8011db2:	4603      	mov	r3, r0
 8011db4:	75fb      	strb	r3, [r7, #23]
            break;
 8011db6:	e2c4      	b.n	8012342 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	791b      	ldrb	r3, [r3, #4]
 8011dbc:	2b02      	cmp	r3, #2
 8011dbe:	d005      	beq.n	8011dcc <LoRaMacMibSetRequestConfirm+0x144>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	791a      	ldrb	r2, [r3, #4]
 8011dc4:	4b70      	ldr	r3, [pc, #448]	@ (8011f88 <LoRaMacMibSetRequestConfirm+0x300>)
 8011dc6:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011dca:	e2ba      	b.n	8012342 <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011dcc:	2303      	movs	r3, #3
 8011dce:	75fb      	strb	r3, [r7, #23]
            break;
 8011dd0:	e2b7      	b.n	8012342 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	685b      	ldr	r3, [r3, #4]
 8011dd6:	4618      	mov	r0, r3
 8011dd8:	f7fa faa4 	bl	800c324 <SecureElementSetDevEui>
 8011ddc:	4603      	mov	r3, r0
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	f000 8294 	beq.w	801230c <LoRaMacMibSetRequestConfirm+0x684>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011de4:	2303      	movs	r3, #3
 8011de6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011de8:	e290      	b.n	801230c <LoRaMacMibSetRequestConfirm+0x684>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	685b      	ldr	r3, [r3, #4]
 8011dee:	4618      	mov	r0, r3
 8011df0:	f7fa faba 	bl	800c368 <SecureElementSetJoinEui>
 8011df4:	4603      	mov	r3, r0
 8011df6:	2b00      	cmp	r3, #0
 8011df8:	f000 828a 	beq.w	8012310 <LoRaMacMibSetRequestConfirm+0x688>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011dfc:	2303      	movs	r3, #3
 8011dfe:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011e00:	e286      	b.n	8012310 <LoRaMacMibSetRequestConfirm+0x688>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	791a      	ldrb	r2, [r3, #4]
 8011e06:	4b60      	ldr	r3, [pc, #384]	@ (8011f88 <LoRaMacMibSetRequestConfirm+0x300>)
 8011e08:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
            break;
 8011e0c:	e299      	b.n	8012342 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	685b      	ldr	r3, [r3, #4]
 8011e12:	4a5d      	ldr	r2, [pc, #372]	@ (8011f88 <LoRaMacMibSetRequestConfirm+0x300>)
 8011e14:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
            break;
 8011e18:	e293      	b.n	8012342 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_DEV_ADDR:
        {
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	685b      	ldr	r3, [r3, #4]
 8011e1e:	4a5a      	ldr	r2, [pc, #360]	@ (8011f88 <LoRaMacMibSetRequestConfirm+0x300>)
 8011e20:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
            break;
 8011e24:	e28d      	b.n	8012342 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	685b      	ldr	r3, [r3, #4]
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d00b      	beq.n	8011e46 <LoRaMacMibSetRequestConfirm+0x1be>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	685b      	ldr	r3, [r3, #4]
 8011e32:	4619      	mov	r1, r3
 8011e34:	2000      	movs	r0, #0
 8011e36:	f001 fffb 	bl	8013e30 <LoRaMacCryptoSetKey>
 8011e3a:	4603      	mov	r3, r0
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	f000 8269 	beq.w	8012314 <LoRaMacMibSetRequestConfirm+0x68c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011e42:	2311      	movs	r3, #17
 8011e44:	e288      	b.n	8012358 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011e46:	2303      	movs	r3, #3
 8011e48:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011e4a:	e263      	b.n	8012314 <LoRaMacMibSetRequestConfirm+0x68c>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	685b      	ldr	r3, [r3, #4]
 8011e50:	2b00      	cmp	r3, #0
 8011e52:	d00b      	beq.n	8011e6c <LoRaMacMibSetRequestConfirm+0x1e4>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	685b      	ldr	r3, [r3, #4]
 8011e58:	4619      	mov	r1, r3
 8011e5a:	2001      	movs	r0, #1
 8011e5c:	f001 ffe8 	bl	8013e30 <LoRaMacCryptoSetKey>
 8011e60:	4603      	mov	r3, r0
 8011e62:	2b00      	cmp	r3, #0
 8011e64:	f000 8258 	beq.w	8012318 <LoRaMacMibSetRequestConfirm+0x690>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011e68:	2311      	movs	r3, #17
 8011e6a:	e275      	b.n	8012358 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011e6c:	2303      	movs	r3, #3
 8011e6e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011e70:	e252      	b.n	8012318 <LoRaMacMibSetRequestConfirm+0x690>
            break;
        }
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	685b      	ldr	r3, [r3, #4]
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	d00b      	beq.n	8011e92 <LoRaMacMibSetRequestConfirm+0x20a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	685b      	ldr	r3, [r3, #4]
 8011e7e:	4619      	mov	r1, r3
 8011e80:	2002      	movs	r0, #2
 8011e82:	f001 ffd5 	bl	8013e30 <LoRaMacCryptoSetKey>
 8011e86:	4603      	mov	r3, r0
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	f000 8247 	beq.w	801231c <LoRaMacMibSetRequestConfirm+0x694>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011e8e:	2311      	movs	r3, #17
 8011e90:	e262      	b.n	8012358 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011e92:	2303      	movs	r3, #3
 8011e94:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011e96:	e241      	b.n	801231c <LoRaMacMibSetRequestConfirm+0x694>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	685b      	ldr	r3, [r3, #4]
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d00b      	beq.n	8011eb8 <LoRaMacMibSetRequestConfirm+0x230>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	685b      	ldr	r3, [r3, #4]
 8011ea4:	4619      	mov	r1, r3
 8011ea6:	2003      	movs	r0, #3
 8011ea8:	f001 ffc2 	bl	8013e30 <LoRaMacCryptoSetKey>
 8011eac:	4603      	mov	r3, r0
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	f000 8236 	beq.w	8012320 <LoRaMacMibSetRequestConfirm+0x698>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011eb4:	2311      	movs	r3, #17
 8011eb6:	e24f      	b.n	8012358 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011eb8:	2303      	movs	r3, #3
 8011eba:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011ebc:	e230      	b.n	8012320 <LoRaMacMibSetRequestConfirm+0x698>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	685b      	ldr	r3, [r3, #4]
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	d00b      	beq.n	8011ede <LoRaMacMibSetRequestConfirm+0x256>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	685b      	ldr	r3, [r3, #4]
 8011eca:	4619      	mov	r1, r3
 8011ecc:	207f      	movs	r0, #127	@ 0x7f
 8011ece:	f001 ffaf 	bl	8013e30 <LoRaMacCryptoSetKey>
 8011ed2:	4603      	mov	r3, r0
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	f000 8225 	beq.w	8012324 <LoRaMacMibSetRequestConfirm+0x69c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011eda:	2311      	movs	r3, #17
 8011edc:	e23c      	b.n	8012358 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011ede:	2303      	movs	r3, #3
 8011ee0:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011ee2:	e21f      	b.n	8012324 <LoRaMacMibSetRequestConfirm+0x69c>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 ) /* ST_WORKAROUND: reduced LORAMAC_MAX_MC_CTX */
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	685b      	ldr	r3, [r3, #4]
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	d00b      	beq.n	8011f04 <LoRaMacMibSetRequestConfirm+0x27c>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	685b      	ldr	r3, [r3, #4]
 8011ef0:	4619      	mov	r1, r3
 8011ef2:	2080      	movs	r0, #128	@ 0x80
 8011ef4:	f001 ff9c 	bl	8013e30 <LoRaMacCryptoSetKey>
 8011ef8:	4603      	mov	r3, r0
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	f000 8214 	beq.w	8012328 <LoRaMacMibSetRequestConfirm+0x6a0>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011f00:	2311      	movs	r3, #17
 8011f02:	e229      	b.n	8012358 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011f04:	2303      	movs	r3, #3
 8011f06:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011f08:	e20e      	b.n	8012328 <LoRaMacMibSetRequestConfirm+0x6a0>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	685b      	ldr	r3, [r3, #4]
 8011f0e:	2b00      	cmp	r3, #0
 8011f10:	d00b      	beq.n	8011f2a <LoRaMacMibSetRequestConfirm+0x2a2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	685b      	ldr	r3, [r3, #4]
 8011f16:	4619      	mov	r1, r3
 8011f18:	2081      	movs	r0, #129	@ 0x81
 8011f1a:	f001 ff89 	bl	8013e30 <LoRaMacCryptoSetKey>
 8011f1e:	4603      	mov	r3, r0
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	f000 8203 	beq.w	801232c <LoRaMacMibSetRequestConfirm+0x6a4>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011f26:	2311      	movs	r3, #17
 8011f28:	e216      	b.n	8012358 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011f2a:	2303      	movs	r3, #3
 8011f2c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011f2e:	e1fd      	b.n	801232c <LoRaMacMibSetRequestConfirm+0x6a4>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	685b      	ldr	r3, [r3, #4]
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	d00b      	beq.n	8011f50 <LoRaMacMibSetRequestConfirm+0x2c8>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	685b      	ldr	r3, [r3, #4]
 8011f3c:	4619      	mov	r1, r3
 8011f3e:	2082      	movs	r0, #130	@ 0x82
 8011f40:	f001 ff76 	bl	8013e30 <LoRaMacCryptoSetKey>
 8011f44:	4603      	mov	r3, r0
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	f000 81f2 	beq.w	8012330 <LoRaMacMibSetRequestConfirm+0x6a8>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011f4c:	2311      	movs	r3, #17
 8011f4e:	e203      	b.n	8012358 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011f50:	2303      	movs	r3, #3
 8011f52:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011f54:	e1ec      	b.n	8012330 <LoRaMacMibSetRequestConfirm+0x6a8>
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	791a      	ldrb	r2, [r3, #4]
 8011f5a:	4b0b      	ldr	r3, [pc, #44]	@ (8011f88 <LoRaMacMibSetRequestConfirm+0x300>)
 8011f5c:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8011f60:	4b0a      	ldr	r3, [pc, #40]	@ (8011f8c <LoRaMacMibSetRequestConfirm+0x304>)
 8011f62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011f64:	4a08      	ldr	r2, [pc, #32]	@ (8011f88 <LoRaMacMibSetRequestConfirm+0x300>)
 8011f66:	f892 2105 	ldrb.w	r2, [r2, #261]	@ 0x105
 8011f6a:	4610      	mov	r0, r2
 8011f6c:	4798      	blx	r3
            /* ST_WORAROUND_BEGIN: Required to avoid keeping the radio active after init */
            Radio.Sleep( );
 8011f6e:	4b07      	ldr	r3, [pc, #28]	@ (8011f8c <LoRaMacMibSetRequestConfirm+0x304>)
 8011f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011f72:	4798      	blx	r3
            /* ST_WORKAROUND_END */
            break;
 8011f74:	e1e5      	b.n	8012342 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	791a      	ldrb	r2, [r3, #4]
 8011f7a:	4b03      	ldr	r3, [pc, #12]	@ (8011f88 <LoRaMacMibSetRequestConfirm+0x300>)
 8011f7c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
            break;
 8011f80:	e1df      	b.n	8012342 <LoRaMacMibSetRequestConfirm+0x6ba>
 8011f82:	bf00      	nop
 8011f84:	200008d8 	.word	0x200008d8
 8011f88:	20000df8 	.word	0x20000df8
 8011f8c:	0801f464 	.word	0x0801f464
        }
        /* ST_WORKAROUND_END */
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	7a1b      	ldrb	r3, [r3, #8]
 8011f94:	b25b      	sxtb	r3, r3
 8011f96:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011f98:	4bb3      	ldr	r3, [pc, #716]	@ (8012268 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011f9a:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 8011f9e:	727b      	strb	r3, [r7, #9]
            /* ST_WORAROUND_BEGIN: Check also the Rx Frequency parameter */
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 8011fa0:	4bb1      	ldr	r3, [pc, #708]	@ (8012268 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011fa2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011fa6:	f107 0108 	add.w	r1, r7, #8
 8011faa:	2207      	movs	r2, #7
 8011fac:	4618      	mov	r0, r3
 8011fae:	f002 fd5a 	bl	8014a66 <RegionVerify>
 8011fb2:	4603      	mov	r3, r0
 8011fb4:	f083 0301 	eor.w	r3, r3, #1
 8011fb8:	b2db      	uxtb	r3, r3
 8011fba:	2b00      	cmp	r3, #0
 8011fbc:	d002      	beq.n	8011fc4 <LoRaMacMibSetRequestConfirm+0x33c>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011fbe:	2303      	movs	r3, #3
 8011fc0:	75fb      	strb	r3, [r7, #23]
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            /* ST_WORKAROUND_END */
            break;
 8011fc2:	e1be      	b.n	8012342 <LoRaMacMibSetRequestConfirm+0x6ba>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	685b      	ldr	r3, [r3, #4]
 8011fc8:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 8011fca:	4ba7      	ldr	r3, [pc, #668]	@ (8012268 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011fcc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011fd0:	f107 0108 	add.w	r1, r7, #8
 8011fd4:	2200      	movs	r2, #0
 8011fd6:	4618      	mov	r0, r3
 8011fd8:	f002 fd45 	bl	8014a66 <RegionVerify>
 8011fdc:	4603      	mov	r3, r0
 8011fde:	f083 0301 	eor.w	r3, r3, #1
 8011fe2:	b2db      	uxtb	r3, r3
 8011fe4:	2b00      	cmp	r3, #0
 8011fe6:	d002      	beq.n	8011fee <LoRaMacMibSetRequestConfirm+0x366>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011fe8:	2303      	movs	r3, #3
 8011fea:	75fb      	strb	r3, [r7, #23]
            break;
 8011fec:	e1a9      	b.n	8012342 <LoRaMacMibSetRequestConfirm+0x6ba>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 8011fee:	4b9e      	ldr	r3, [pc, #632]	@ (8012268 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011ff0:	687a      	ldr	r2, [r7, #4]
 8011ff2:	3364      	adds	r3, #100	@ 0x64
 8011ff4:	3204      	adds	r2, #4
 8011ff6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011ffa:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8011ffe:	e1a0      	b.n	8012342 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	7a1b      	ldrb	r3, [r3, #8]
 8012004:	b25b      	sxtb	r3, r3
 8012006:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8012008:	4b97      	ldr	r3, [pc, #604]	@ (8012268 <LoRaMacMibSetRequestConfirm+0x5e0>)
 801200a:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 801200e:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8012010:	4b95      	ldr	r3, [pc, #596]	@ (8012268 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012012:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012016:	f107 0108 	add.w	r1, r7, #8
 801201a:	2207      	movs	r2, #7
 801201c:	4618      	mov	r0, r3
 801201e:	f002 fd22 	bl	8014a66 <RegionVerify>
 8012022:	4603      	mov	r3, r0
 8012024:	2b00      	cmp	r3, #0
 8012026:	d008      	beq.n	801203a <LoRaMacMibSetRequestConfirm+0x3b2>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 8012028:	4b8f      	ldr	r3, [pc, #572]	@ (8012268 <LoRaMacMibSetRequestConfirm+0x5e0>)
 801202a:	687a      	ldr	r2, [r7, #4]
 801202c:	33a8      	adds	r3, #168	@ 0xa8
 801202e:	3204      	adds	r2, #4
 8012030:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012034:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012038:	e183      	b.n	8012342 <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801203a:	2303      	movs	r3, #3
 801203c:	75fb      	strb	r3, [r7, #23]
            break;
 801203e:	e180      	b.n	8012342 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	7a1b      	ldrb	r3, [r3, #8]
 8012044:	b25b      	sxtb	r3, r3
 8012046:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8012048:	4b87      	ldr	r3, [pc, #540]	@ (8012268 <LoRaMacMibSetRequestConfirm+0x5e0>)
 801204a:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 801204e:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8012050:	4b85      	ldr	r3, [pc, #532]	@ (8012268 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012052:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012056:	f107 0108 	add.w	r1, r7, #8
 801205a:	2207      	movs	r2, #7
 801205c:	4618      	mov	r0, r3
 801205e:	f002 fd02 	bl	8014a66 <RegionVerify>
 8012062:	4603      	mov	r3, r0
 8012064:	2b00      	cmp	r3, #0
 8012066:	d019      	beq.n	801209c <LoRaMacMibSetRequestConfirm+0x414>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 8012068:	4b7f      	ldr	r3, [pc, #508]	@ (8012268 <LoRaMacMibSetRequestConfirm+0x5e0>)
 801206a:	687a      	ldr	r2, [r7, #4]
 801206c:	336c      	adds	r3, #108	@ 0x6c
 801206e:	3204      	adds	r2, #4
 8012070:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012074:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 8012078:	4b7b      	ldr	r3, [pc, #492]	@ (8012268 <LoRaMacMibSetRequestConfirm+0x5e0>)
 801207a:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 801207e:	2b02      	cmp	r3, #2
 8012080:	f040 8158 	bne.w	8012334 <LoRaMacMibSetRequestConfirm+0x6ac>
 8012084:	4b78      	ldr	r3, [pc, #480]	@ (8012268 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012086:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 801208a:	2b00      	cmp	r3, #0
 801208c:	f000 8152 	beq.w	8012334 <LoRaMacMibSetRequestConfirm+0x6ac>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 8012090:	4b76      	ldr	r3, [pc, #472]	@ (801226c <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012094:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 8012096:	f7fe fca7 	bl	80109e8 <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801209a:	e14b      	b.n	8012334 <LoRaMacMibSetRequestConfirm+0x6ac>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801209c:	2303      	movs	r3, #3
 801209e:	75fb      	strb	r3, [r7, #23]
            break;
 80120a0:	e148      	b.n	8012334 <LoRaMacMibSetRequestConfirm+0x6ac>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	7a1b      	ldrb	r3, [r3, #8]
 80120a6:	b25b      	sxtb	r3, r3
 80120a8:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80120aa:	4b6f      	ldr	r3, [pc, #444]	@ (8012268 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80120ac:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 80120b0:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 80120b2:	4b6d      	ldr	r3, [pc, #436]	@ (8012268 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80120b4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80120b8:	f107 0108 	add.w	r1, r7, #8
 80120bc:	2207      	movs	r2, #7
 80120be:	4618      	mov	r0, r3
 80120c0:	f002 fcd1 	bl	8014a66 <RegionVerify>
 80120c4:	4603      	mov	r3, r0
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	d008      	beq.n	80120dc <LoRaMacMibSetRequestConfirm+0x454>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 80120ca:	4b67      	ldr	r3, [pc, #412]	@ (8012268 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80120cc:	687a      	ldr	r2, [r7, #4]
 80120ce:	33b0      	adds	r3, #176	@ 0xb0
 80120d0:	3204      	adds	r2, #4
 80120d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80120d6:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80120da:	e132      	b.n	8012342 <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80120dc:	2303      	movs	r3, #3
 80120de:	75fb      	strb	r3, [r7, #23]
            break;
 80120e0:	e12f      	b.n	8012342 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	685b      	ldr	r3, [r3, #4]
 80120e6:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 80120e8:	2301      	movs	r3, #1
 80120ea:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 80120ec:	4b5e      	ldr	r3, [pc, #376]	@ (8012268 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80120ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80120f2:	f107 020c 	add.w	r2, r7, #12
 80120f6:	4611      	mov	r1, r2
 80120f8:	4618      	mov	r0, r3
 80120fa:	f002 fcdd 	bl	8014ab8 <RegionChanMaskSet>
 80120fe:	4603      	mov	r3, r0
 8012100:	f083 0301 	eor.w	r3, r3, #1
 8012104:	b2db      	uxtb	r3, r3
 8012106:	2b00      	cmp	r3, #0
 8012108:	f000 8116 	beq.w	8012338 <LoRaMacMibSetRequestConfirm+0x6b0>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801210c:	2303      	movs	r3, #3
 801210e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012110:	e112      	b.n	8012338 <LoRaMacMibSetRequestConfirm+0x6b0>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	685b      	ldr	r3, [r3, #4]
 8012116:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8012118:	2300      	movs	r3, #0
 801211a:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 801211c:	4b52      	ldr	r3, [pc, #328]	@ (8012268 <LoRaMacMibSetRequestConfirm+0x5e0>)
 801211e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012122:	f107 020c 	add.w	r2, r7, #12
 8012126:	4611      	mov	r1, r2
 8012128:	4618      	mov	r0, r3
 801212a:	f002 fcc5 	bl	8014ab8 <RegionChanMaskSet>
 801212e:	4603      	mov	r3, r0
 8012130:	f083 0301 	eor.w	r3, r3, #1
 8012134:	b2db      	uxtb	r3, r3
 8012136:	2b00      	cmp	r3, #0
 8012138:	f000 8100 	beq.w	801233c <LoRaMacMibSetRequestConfirm+0x6b4>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801213c:	2303      	movs	r3, #3
 801213e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012140:	e0fc      	b.n	801233c <LoRaMacMibSetRequestConfirm+0x6b4>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	791b      	ldrb	r3, [r3, #4]
 8012146:	2b00      	cmp	r3, #0
 8012148:	d009      	beq.n	801215e <LoRaMacMibSetRequestConfirm+0x4d6>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 801214e:	2b0f      	cmp	r3, #15
 8012150:	d805      	bhi.n	801215e <LoRaMacMibSetRequestConfirm+0x4d6>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	791a      	ldrb	r2, [r3, #4]
 8012156:	4b44      	ldr	r3, [pc, #272]	@ (8012268 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012158:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801215c:	e0f1      	b.n	8012342 <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801215e:	2303      	movs	r3, #3
 8012160:	75fb      	strb	r3, [r7, #23]
            break;
 8012162:	e0ee      	b.n	8012342 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	685b      	ldr	r3, [r3, #4]
 8012168:	4a3f      	ldr	r2, [pc, #252]	@ (8012268 <LoRaMacMibSetRequestConfirm+0x5e0>)
 801216a:	64d3      	str	r3, [r2, #76]	@ 0x4c
            break;
 801216c:	e0e9      	b.n	8012342 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	685b      	ldr	r3, [r3, #4]
 8012172:	4a3d      	ldr	r2, [pc, #244]	@ (8012268 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012174:	6513      	str	r3, [r2, #80]	@ 0x50
            break;
 8012176:	e0e4      	b.n	8012342 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	685b      	ldr	r3, [r3, #4]
 801217c:	4a3a      	ldr	r2, [pc, #232]	@ (8012268 <LoRaMacMibSetRequestConfirm+0x5e0>)
 801217e:	6553      	str	r3, [r2, #84]	@ 0x54
            break;
 8012180:	e0df      	b.n	8012342 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	685b      	ldr	r3, [r3, #4]
 8012186:	4a38      	ldr	r2, [pc, #224]	@ (8012268 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012188:	6593      	str	r3, [r2, #88]	@ 0x58
            break;
 801218a:	e0da      	b.n	8012342 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	685b      	ldr	r3, [r3, #4]
 8012190:	4a35      	ldr	r2, [pc, #212]	@ (8012268 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012192:	65d3      	str	r3, [r2, #92]	@ 0x5c
            break;
 8012194:	e0d5      	b.n	8012342 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	f993 3004 	ldrsb.w	r3, [r3, #4]
 801219c:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 801219e:	4b32      	ldr	r3, [pc, #200]	@ (8012268 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80121a0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80121a4:	f107 0108 	add.w	r1, r7, #8
 80121a8:	2206      	movs	r2, #6
 80121aa:	4618      	mov	r0, r3
 80121ac:	f002 fc5b 	bl	8014a66 <RegionVerify>
 80121b0:	4603      	mov	r3, r0
 80121b2:	2b00      	cmp	r3, #0
 80121b4:	d005      	beq.n	80121c2 <LoRaMacMibSetRequestConfirm+0x53a>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 80121b6:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80121ba:	4b2b      	ldr	r3, [pc, #172]	@ (8012268 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80121bc:	f883 20cd 	strb.w	r2, [r3, #205]	@ 0xcd
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80121c0:	e0bf      	b.n	8012342 <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80121c2:	2303      	movs	r3, #3
 80121c4:	75fb      	strb	r3, [r7, #23]
            break;
 80121c6:	e0bc      	b.n	8012342 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80121ce:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80121d0:	4b25      	ldr	r3, [pc, #148]	@ (8012268 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80121d2:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 80121d6:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 80121d8:	4b23      	ldr	r3, [pc, #140]	@ (8012268 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80121da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80121de:	f107 0108 	add.w	r1, r7, #8
 80121e2:	2205      	movs	r2, #5
 80121e4:	4618      	mov	r0, r3
 80121e6:	f002 fc3e 	bl	8014a66 <RegionVerify>
 80121ea:	4603      	mov	r3, r0
 80121ec:	2b00      	cmp	r3, #0
 80121ee:	d005      	beq.n	80121fc <LoRaMacMibSetRequestConfirm+0x574>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 80121f0:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80121f4:	4b1c      	ldr	r3, [pc, #112]	@ (8012268 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80121f6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80121fa:	e0a2      	b.n	8012342 <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80121fc:	2303      	movs	r3, #3
 80121fe:	75fb      	strb	r3, [r7, #23]
            break;
 8012200:	e09f      	b.n	8012342 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8012208:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 801220a:	4b17      	ldr	r3, [pc, #92]	@ (8012268 <LoRaMacMibSetRequestConfirm+0x5e0>)
 801220c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012210:	f107 0108 	add.w	r1, r7, #8
 8012214:	220a      	movs	r2, #10
 8012216:	4618      	mov	r0, r3
 8012218:	f002 fc25 	bl	8014a66 <RegionVerify>
 801221c:	4603      	mov	r3, r0
 801221e:	2b00      	cmp	r3, #0
 8012220:	d005      	beq.n	801222e <LoRaMacMibSetRequestConfirm+0x5a6>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 8012222:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8012226:	4b10      	ldr	r3, [pc, #64]	@ (8012268 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012228:	f883 20cc 	strb.w	r2, [r3, #204]	@ 0xcc
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801222c:	e089      	b.n	8012342 <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801222e:	2303      	movs	r3, #3
 8012230:	75fb      	strb	r3, [r7, #23]
            break;
 8012232:	e086      	b.n	8012342 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	f993 3004 	ldrsb.w	r3, [r3, #4]
 801223a:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 801223c:	4b0a      	ldr	r3, [pc, #40]	@ (8012268 <LoRaMacMibSetRequestConfirm+0x5e0>)
 801223e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012242:	f107 0108 	add.w	r1, r7, #8
 8012246:	2209      	movs	r2, #9
 8012248:	4618      	mov	r0, r3
 801224a:	f002 fc0c 	bl	8014a66 <RegionVerify>
 801224e:	4603      	mov	r3, r0
 8012250:	2b00      	cmp	r3, #0
 8012252:	d005      	beq.n	8012260 <LoRaMacMibSetRequestConfirm+0x5d8>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 8012254:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8012258:	4b03      	ldr	r3, [pc, #12]	@ (8012268 <LoRaMacMibSetRequestConfirm+0x5e0>)
 801225a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801225e:	e070      	b.n	8012342 <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012260:	2303      	movs	r3, #3
 8012262:	75fb      	strb	r3, [r7, #23]
            break;
 8012264:	e06d      	b.n	8012342 <LoRaMacMibSetRequestConfirm+0x6ba>
 8012266:	bf00      	nop
 8012268:	20000df8 	.word	0x20000df8
 801226c:	0801f464 	.word	0x0801f464
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	685b      	ldr	r3, [r3, #4]
 8012274:	4a3a      	ldr	r2, [pc, #232]	@ (8012360 <LoRaMacMibSetRequestConfirm+0x6d8>)
 8012276:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 801227a:	4b39      	ldr	r3, [pc, #228]	@ (8012360 <LoRaMacMibSetRequestConfirm+0x6d8>)
 801227c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8012280:	4a37      	ldr	r2, [pc, #220]	@ (8012360 <LoRaMacMibSetRequestConfirm+0x6d8>)
 8012282:	6453      	str	r3, [r2, #68]	@ 0x44
            break;
 8012284:	e05d      	b.n	8012342 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	791a      	ldrb	r2, [r3, #4]
 801228a:	4b35      	ldr	r3, [pc, #212]	@ (8012360 <LoRaMacMibSetRequestConfirm+0x6d8>)
 801228c:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
 8012290:	4b33      	ldr	r3, [pc, #204]	@ (8012360 <LoRaMacMibSetRequestConfirm+0x6d8>)
 8012292:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 8012296:	4b32      	ldr	r3, [pc, #200]	@ (8012360 <LoRaMacMibSetRequestConfirm+0x6d8>)
 8012298:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
            break;
 801229c:	e051      	b.n	8012342 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	685b      	ldr	r3, [r3, #4]
 80122a2:	4a2f      	ldr	r2, [pc, #188]	@ (8012360 <LoRaMacMibSetRequestConfirm+0x6d8>)
 80122a4:	67d3      	str	r3, [r2, #124]	@ 0x7c
            break;
 80122a6:	e04c      	b.n	8012342 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	685b      	ldr	r3, [r3, #4]
 80122ac:	4a2c      	ldr	r2, [pc, #176]	@ (8012360 <LoRaMacMibSetRequestConfirm+0x6d8>)
 80122ae:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
            break;
 80122b2:	e046      	b.n	8012342 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_NVM_CTXS:
        {
            status = RestoreNvmData( );
 80122b4:	f7fe fdc8 	bl	8010e48 <RestoreNvmData>
 80122b8:	4603      	mov	r3, r0
 80122ba:	75fb      	strb	r3, [r7, #23]
            break;
 80122bc:	e041      	b.n	8012342 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	799b      	ldrb	r3, [r3, #6]
 80122c2:	2b01      	cmp	r3, #1
 80122c4:	d80d      	bhi.n	80122e2 <LoRaMacMibSetRequestConfirm+0x65a>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 80122c6:	4a26      	ldr	r2, [pc, #152]	@ (8012360 <LoRaMacMibSetRequestConfirm+0x6d8>)
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	685b      	ldr	r3, [r3, #4]
 80122cc:	f8c2 3118 	str.w	r3, [r2, #280]	@ 0x118

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	6858      	ldr	r0, [r3, #4]
 80122d4:	f001 fd10 	bl	8013cf8 <LoRaMacCryptoSetLrWanVersion>
 80122d8:	4603      	mov	r3, r0
 80122da:	2b00      	cmp	r3, #0
 80122dc:	d030      	beq.n	8012340 <LoRaMacMibSetRequestConfirm+0x6b8>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80122de:	2311      	movs	r3, #17
 80122e0:	e03a      	b.n	8012358 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80122e2:	2303      	movs	r3, #3
 80122e4:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80122e6:	e02b      	b.n	8012340 <LoRaMacMibSetRequestConfirm+0x6b8>
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	685b      	ldr	r3, [r3, #4]
 80122ec:	4a1c      	ldr	r2, [pc, #112]	@ (8012360 <LoRaMacMibSetRequestConfirm+0x6d8>)
 80122ee:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
            break;
 80122f2:	e026      	b.n	8012342 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MIB_IS_CERT_FPORT_ON:
        {
            Nvm.MacGroup2.IsCertPortOn = mibSet->Param.IsCertPortOn;
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	791a      	ldrb	r2, [r3, #4]
 80122f8:	4b19      	ldr	r3, [pc, #100]	@ (8012360 <LoRaMacMibSetRequestConfirm+0x6d8>)
 80122fa:	f883 210b 	strb.w	r2, [r3, #267]	@ 0x10b
            break;
 80122fe:	e020      	b.n	8012342 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
#endif /* LORAMAC_VERSION */
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 8012300:	6878      	ldr	r0, [r7, #4]
 8012302:	f000 fc88 	bl	8012c16 <LoRaMacMibClassBSetRequestConfirm>
 8012306:	4603      	mov	r3, r0
 8012308:	75fb      	strb	r3, [r7, #23]
            break;
 801230a:	e01a      	b.n	8012342 <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 801230c:	bf00      	nop
 801230e:	e018      	b.n	8012342 <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8012310:	bf00      	nop
 8012312:	e016      	b.n	8012342 <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8012314:	bf00      	nop
 8012316:	e014      	b.n	8012342 <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8012318:	bf00      	nop
 801231a:	e012      	b.n	8012342 <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 801231c:	bf00      	nop
 801231e:	e010      	b.n	8012342 <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8012320:	bf00      	nop
 8012322:	e00e      	b.n	8012342 <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8012324:	bf00      	nop
 8012326:	e00c      	b.n	8012342 <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8012328:	bf00      	nop
 801232a:	e00a      	b.n	8012342 <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 801232c:	bf00      	nop
 801232e:	e008      	b.n	8012342 <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8012330:	bf00      	nop
 8012332:	e006      	b.n	8012342 <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8012334:	bf00      	nop
 8012336:	e004      	b.n	8012342 <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8012338:	bf00      	nop
 801233a:	e002      	b.n	8012342 <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 801233c:	bf00      	nop
 801233e:	e000      	b.n	8012342 <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8012340:	bf00      	nop
        }
    }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( status == LORAMAC_STATUS_OK )
 8012342:	7dfb      	ldrb	r3, [r7, #23]
 8012344:	2b00      	cmp	r3, #0
 8012346:	d106      	bne.n	8012356 <LoRaMacMibSetRequestConfirm+0x6ce>
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8012348:	4a06      	ldr	r2, [pc, #24]	@ (8012364 <LoRaMacMibSetRequestConfirm+0x6dc>)
 801234a:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 801234e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012352:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
    }
#endif /* LORAMAC_VERSION */
    return status;
 8012356:	7dfb      	ldrb	r3, [r7, #23]
}
 8012358:	4618      	mov	r0, r3
 801235a:	3718      	adds	r7, #24
 801235c:	46bd      	mov	sp, r7
 801235e:	bd80      	pop	{r7, pc}
 8012360:	20000df8 	.word	0x20000df8
 8012364:	200008d8 	.word	0x200008d8

08012368 <LoRaMacMlmeRequest>:
    }
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 8012368:	b580      	push	{r7, lr}
 801236a:	b08a      	sub	sp, #40	@ 0x28
 801236c:	af00      	add	r7, sp, #0
 801236e:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012370:	2302      	movs	r3, #2
 8012372:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8012376:	2300      	movs	r3, #0
 8012378:	83bb      	strh	r3, [r7, #28]

    if( mlmeRequest == NULL )
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	2b00      	cmp	r3, #0
 801237e:	d101      	bne.n	8012384 <LoRaMacMlmeRequest+0x1c>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012380:	2303      	movs	r3, #3
 8012382:	e16c      	b.n	801265e <LoRaMacMlmeRequest+0x2f6>
    }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	2200      	movs	r2, #0
 8012388:	611a      	str	r2, [r3, #16]
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 801238a:	f7fc fc5f 	bl	800ec4c <LoRaMacIsBusy>
 801238e:	4603      	mov	r3, r0
 8012390:	2b00      	cmp	r3, #0
 8012392:	d001      	beq.n	8012398 <LoRaMacMlmeRequest+0x30>
    {
        return LORAMAC_STATUS_BUSY;
 8012394:	2301      	movs	r3, #1
 8012396:	e162      	b.n	801265e <LoRaMacMlmeRequest+0x2f6>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8012398:	f001 f956 	bl	8013648 <LoRaMacConfirmQueueIsFull>
 801239c:	4603      	mov	r3, r0
 801239e:	2b00      	cmp	r3, #0
 80123a0:	d001      	beq.n	80123a6 <LoRaMacMlmeRequest+0x3e>
    {
        return LORAMAC_STATUS_BUSY;
 80123a2:	2301      	movs	r3, #1
 80123a4:	e15b      	b.n	801265e <LoRaMacMlmeRequest+0x2f6>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 80123a6:	f001 f943 	bl	8013630 <LoRaMacConfirmQueueGetCnt>
 80123aa:	4603      	mov	r3, r0
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	d104      	bne.n	80123ba <LoRaMacMlmeRequest+0x52>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 80123b0:	2214      	movs	r2, #20
 80123b2:	2100      	movs	r1, #0
 80123b4:	48ac      	ldr	r0, [pc, #688]	@ (8012668 <LoRaMacMlmeRequest+0x300>)
 80123b6:	f004 fdf7 	bl	8016fa8 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80123ba:	4bac      	ldr	r3, [pc, #688]	@ (801266c <LoRaMacMlmeRequest+0x304>)
 80123bc:	2201      	movs	r2, #1
 80123be:	f883 2459 	strb.w	r2, [r3, #1113]	@ 0x459

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 80123c2:	4aaa      	ldr	r2, [pc, #680]	@ (801266c <LoRaMacMlmeRequest+0x304>)
 80123c4:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 80123c8:	f043 0304 	orr.w	r3, r3, #4
 80123cc:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
    queueElement.Request = mlmeRequest->Type;
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	781b      	ldrb	r3, [r3, #0]
 80123d4:	f887 3020 	strb.w	r3, [r7, #32]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80123d8:	2301      	movs	r3, #1
 80123da:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    queueElement.RestrictCommonReadyToHandle = false;
 80123de:	2300      	movs	r3, #0
 80123e0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    queueElement.ReadyToHandle = false;
 80123e4:	2300      	movs	r3, #0
 80123e6:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
#endif /* LORAMAC_VERSION */

    switch( mlmeRequest->Type )
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	781b      	ldrb	r3, [r3, #0]
 80123ee:	3b01      	subs	r3, #1
 80123f0:	2b0c      	cmp	r3, #12
 80123f2:	f200 8108 	bhi.w	8012606 <LoRaMacMlmeRequest+0x29e>
 80123f6:	a201      	add	r2, pc, #4	@ (adr r2, 80123fc <LoRaMacMlmeRequest+0x94>)
 80123f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80123fc:	08012431 	.word	0x08012431
 8012400:	08012607 	.word	0x08012607
 8012404:	08012607 	.word	0x08012607
 8012408:	08012507 	.word	0x08012507
 801240c:	08012529 	.word	0x08012529
 8012410:	08012607 	.word	0x08012607
 8012414:	08012607 	.word	0x08012607
 8012418:	08012607 	.word	0x08012607
 801241c:	08012547 	.word	0x08012547
 8012420:	08012607 	.word	0x08012607
 8012424:	080125d5 	.word	0x080125d5
 8012428:	08012569 	.word	0x08012569
 801242c:	080125b3 	.word	0x080125b3
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8012430:	4b8e      	ldr	r3, [pc, #568]	@ (801266c <LoRaMacMlmeRequest+0x304>)
 8012432:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8012436:	f003 0320 	and.w	r3, r3, #32
 801243a:	2b00      	cmp	r3, #0
 801243c:	d001      	beq.n	8012442 <LoRaMacMlmeRequest+0xda>
            {
                return LORAMAC_STATUS_BUSY;
 801243e:	2301      	movs	r3, #1
 8012440:	e10d      	b.n	801265e <LoRaMacMlmeRequest+0x2f6>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
            }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_OTAA )
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	791b      	ldrb	r3, [r3, #4]
 8012446:	2b02      	cmp	r3, #2
 8012448:	d12e      	bne.n	80124a8 <LoRaMacMlmeRequest+0x140>
            {
                ResetMacParameters( );
 801244a:	f7fe f997 	bl	801077c <ResetMacParameters>

                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 801244e:	4b88      	ldr	r3, [pc, #544]	@ (8012670 <LoRaMacMlmeRequest+0x308>)
 8012450:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	795b      	ldrb	r3, [r3, #5]
 8012458:	b25b      	sxtb	r3, r3
 801245a:	2200      	movs	r2, #0
 801245c:	4619      	mov	r1, r3
 801245e:	f002 fbea 	bl	8014c36 <RegionAlternateDr>
 8012462:	4603      	mov	r3, r0
 8012464:	461a      	mov	r2, r3
 8012466:	4b82      	ldr	r3, [pc, #520]	@ (8012670 <LoRaMacMlmeRequest+0x308>)
 8012468:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 801246c:	2307      	movs	r3, #7
 801246e:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

                status = SendReJoinReq( JOIN_REQ );
 8012472:	20ff      	movs	r0, #255	@ 0xff
 8012474:	f7fd ff00 	bl	8010278 <SendReJoinReq>
 8012478:	4603      	mov	r3, r0
 801247a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

                if( status != LORAMAC_STATUS_OK )
 801247e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012482:	2b00      	cmp	r3, #0
 8012484:	f000 80c1 	beq.w	801260a <LoRaMacMlmeRequest+0x2a2>
                {
                    // Revert back the previous datarate ( mainly used for US915 like regions )
                    Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8012488:	4b79      	ldr	r3, [pc, #484]	@ (8012670 <LoRaMacMlmeRequest+0x308>)
 801248a:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	795b      	ldrb	r3, [r3, #5]
 8012492:	b25b      	sxtb	r3, r3
 8012494:	2201      	movs	r2, #1
 8012496:	4619      	mov	r1, r3
 8012498:	f002 fbcd 	bl	8014c36 <RegionAlternateDr>
 801249c:	4603      	mov	r3, r0
 801249e:	461a      	mov	r2, r3
 80124a0:	4b73      	ldr	r3, [pc, #460]	@ (8012670 <LoRaMacMlmeRequest+0x308>)
 80124a2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                MacCtx.MacCallbacks->MacProcessNotify( );
                MacCtx.MacFlags.Bits.MacDone = 1;
                status = LORAMAC_STATUS_OK;
            }
#endif /* LORAMAC_VERSION */
            break;
 80124a6:	e0b0      	b.n	801260a <LoRaMacMlmeRequest+0x2a2>
            else if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_ABP )
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	791b      	ldrb	r3, [r3, #4]
 80124ac:	2b01      	cmp	r3, #1
 80124ae:	f040 80ac 	bne.w	801260a <LoRaMacMlmeRequest+0x2a2>
                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 80124b2:	4b6f      	ldr	r3, [pc, #444]	@ (8012670 <LoRaMacMlmeRequest+0x308>)
 80124b4:	2200      	movs	r2, #0
 80124b6:	f883 2109 	strb.w	r2, [r3, #265]	@ 0x109
                params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 80124ba:	2302      	movs	r3, #2
 80124bc:	763b      	strb	r3, [r7, #24]
                RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 80124be:	4b6c      	ldr	r3, [pc, #432]	@ (8012670 <LoRaMacMlmeRequest+0x308>)
 80124c0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80124c4:	f107 020c 	add.w	r2, r7, #12
 80124c8:	4611      	mov	r1, r2
 80124ca:	4618      	mov	r0, r3
 80124cc:	f002 fab9 	bl	8014a42 <RegionInitDefaults>
                Nvm.MacGroup2.NetworkActivation = mlmeRequest->Req.Join.NetworkActivation;
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	791a      	ldrb	r2, [r3, #4]
 80124d4:	4b66      	ldr	r3, [pc, #408]	@ (8012670 <LoRaMacMlmeRequest+0x308>)
 80124d6:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80124da:	2300      	movs	r3, #0
 80124dc:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
                queueElement.ReadyToHandle = true;
 80124e0:	2301      	movs	r3, #1
 80124e2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
                MacCtx.MacCallbacks->MacProcessNotify( );
 80124e6:	4b61      	ldr	r3, [pc, #388]	@ (801266c <LoRaMacMlmeRequest+0x304>)
 80124e8:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 80124ec:	691b      	ldr	r3, [r3, #16]
 80124ee:	4798      	blx	r3
                MacCtx.MacFlags.Bits.MacDone = 1;
 80124f0:	4a5e      	ldr	r2, [pc, #376]	@ (801266c <LoRaMacMlmeRequest+0x304>)
 80124f2:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 80124f6:	f043 0320 	orr.w	r3, r3, #32
 80124fa:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
                status = LORAMAC_STATUS_OK;
 80124fe:	2300      	movs	r3, #0
 8012500:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8012504:	e081      	b.n	801260a <LoRaMacMlmeRequest+0x2a2>
        }
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8012506:	2300      	movs	r3, #0
 8012508:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 801250c:	f107 031c 	add.w	r3, r7, #28
 8012510:	2200      	movs	r2, #0
 8012512:	4619      	mov	r1, r3
 8012514:	2002      	movs	r0, #2
 8012516:	f000 fcfd 	bl	8012f14 <LoRaMacCommandsAddCmd>
 801251a:	4603      	mov	r3, r0
 801251c:	2b00      	cmp	r3, #0
 801251e:	d076      	beq.n	801260e <LoRaMacMlmeRequest+0x2a6>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012520:	2313      	movs	r3, #19
 8012522:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 8012526:	e072      	b.n	801260e <LoRaMacMlmeRequest+0x2a6>
            break;
        }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	8898      	ldrh	r0, [r3, #4]
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	6899      	ldr	r1, [r3, #8]
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8012536:	b2db      	uxtb	r3, r3
 8012538:	461a      	mov	r2, r3
 801253a:	f7fe fc65 	bl	8010e08 <SetTxContinuousWave>
 801253e:	4603      	mov	r3, r0
 8012540:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8012544:	e06a      	b.n	801261c <LoRaMacMlmeRequest+0x2b4>
        }
#endif /* LORAMAC_VERSION */
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8012546:	2300      	movs	r3, #0
 8012548:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 801254c:	f107 031c 	add.w	r3, r7, #28
 8012550:	2200      	movs	r2, #0
 8012552:	4619      	mov	r1, r3
 8012554:	200d      	movs	r0, #13
 8012556:	f000 fcdd 	bl	8012f14 <LoRaMacCommandsAddCmd>
 801255a:	4603      	mov	r3, r0
 801255c:	2b00      	cmp	r3, #0
 801255e:	d058      	beq.n	8012612 <LoRaMacMlmeRequest+0x2aa>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012560:	2313      	movs	r3, #19
 8012562:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 8012566:	e054      	b.n	8012612 <LoRaMacMlmeRequest+0x2aa>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8012568:	4b41      	ldr	r3, [pc, #260]	@ (8012670 <LoRaMacMlmeRequest+0x308>)
 801256a:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 801256e:	2b00      	cmp	r3, #0
 8012570:	d151      	bne.n	8012616 <LoRaMacMlmeRequest+0x2ae>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	791b      	ldrb	r3, [r3, #4]
 8012576:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	791b      	ldrb	r3, [r3, #4]
 801257e:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8012582:	b2db      	uxtb	r3, r3
 8012584:	4618      	mov	r0, r3
 8012586:	f000 fb1b 	bl	8012bc0 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 801258a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801258e:	773b      	strb	r3, [r7, #28]
                status = LORAMAC_STATUS_OK;
 8012590:	2300      	movs	r3, #0
 8012592:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 8012596:	f107 031c 	add.w	r3, r7, #28
 801259a:	2201      	movs	r2, #1
 801259c:	4619      	mov	r1, r3
 801259e:	2010      	movs	r0, #16
 80125a0:	f000 fcb8 	bl	8012f14 <LoRaMacCommandsAddCmd>
 80125a4:	4603      	mov	r3, r0
 80125a6:	2b00      	cmp	r3, #0
 80125a8:	d035      	beq.n	8012616 <LoRaMacMlmeRequest+0x2ae>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80125aa:	2313      	movs	r3, #19
 80125ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                }
            }
            break;
 80125b0:	e031      	b.n	8012616 <LoRaMacMlmeRequest+0x2ae>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 80125b2:	2300      	movs	r3, #0
 80125b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 80125b8:	f107 031c 	add.w	r3, r7, #28
 80125bc:	2200      	movs	r2, #0
 80125be:	4619      	mov	r1, r3
 80125c0:	2012      	movs	r0, #18
 80125c2:	f000 fca7 	bl	8012f14 <LoRaMacCommandsAddCmd>
 80125c6:	4603      	mov	r3, r0
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	d026      	beq.n	801261a <LoRaMacMlmeRequest+0x2b2>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80125cc:	2313      	movs	r3, #19
 80125ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 80125d2:	e022      	b.n	801261a <LoRaMacMlmeRequest+0x2b2>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 80125d4:	2301      	movs	r3, #1
 80125d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 80125da:	f000 faa7 	bl	8012b2c <LoRaMacClassBIsAcquisitionInProgress>
 80125de:	4603      	mov	r3, r0
 80125e0:	f083 0301 	eor.w	r3, r3, #1
 80125e4:	b2db      	uxtb	r3, r3
 80125e6:	2b00      	cmp	r3, #0
 80125e8:	d009      	beq.n	80125fe <LoRaMacMlmeRequest+0x296>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 80125ea:	2000      	movs	r0, #0
 80125ec:	f000 fa80 	bl	8012af0 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 80125f0:	2000      	movs	r0, #0
 80125f2:	f000 faa2 	bl	8012b3a <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 80125f6:	2300      	movs	r3, #0
 80125f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 80125fc:	e00e      	b.n	801261c <LoRaMacMlmeRequest+0x2b4>
                status = LORAMAC_STATUS_BUSY;
 80125fe:	2301      	movs	r3, #1
 8012600:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8012604:	e00a      	b.n	801261c <LoRaMacMlmeRequest+0x2b4>
        }
        default:
            break;
 8012606:	bf00      	nop
 8012608:	e008      	b.n	801261c <LoRaMacMlmeRequest+0x2b4>
            break;
 801260a:	bf00      	nop
 801260c:	e006      	b.n	801261c <LoRaMacMlmeRequest+0x2b4>
            break;
 801260e:	bf00      	nop
 8012610:	e004      	b.n	801261c <LoRaMacMlmeRequest+0x2b4>
            break;
 8012612:	bf00      	nop
 8012614:	e002      	b.n	801261c <LoRaMacMlmeRequest+0x2b4>
            break;
 8012616:	bf00      	nop
 8012618:	e000      	b.n	801261c <LoRaMacMlmeRequest+0x2b4>
            break;
 801261a:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 801261c:	4b13      	ldr	r3, [pc, #76]	@ (801266c <LoRaMacMlmeRequest+0x304>)
 801261e:	f8d3 2498 	ldr.w	r2, [r3, #1176]	@ 0x498
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 8012626:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801262a:	2b00      	cmp	r3, #0
 801262c:	d010      	beq.n	8012650 <LoRaMacMlmeRequest+0x2e8>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 801262e:	f000 ffff 	bl	8013630 <LoRaMacConfirmQueueGetCnt>
 8012632:	4603      	mov	r3, r0
 8012634:	2b00      	cmp	r3, #0
 8012636:	d110      	bne.n	801265a <LoRaMacMlmeRequest+0x2f2>
        {
            MacCtx.NodeAckRequested = false;
 8012638:	4b0c      	ldr	r3, [pc, #48]	@ (801266c <LoRaMacMlmeRequest+0x304>)
 801263a:	2200      	movs	r2, #0
 801263c:	f883 241e 	strb.w	r2, [r3, #1054]	@ 0x41e
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8012640:	4a0a      	ldr	r2, [pc, #40]	@ (801266c <LoRaMacMlmeRequest+0x304>)
 8012642:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 8012646:	f023 0304 	bic.w	r3, r3, #4
 801264a:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
 801264e:	e004      	b.n	801265a <LoRaMacMlmeRequest+0x2f2>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 8012650:	f107 0320 	add.w	r3, r7, #32
 8012654:	4618      	mov	r0, r3
 8012656:	f000 fe9d 	bl	8013394 <LoRaMacConfirmQueueAdd>
    }
    return status;
 801265a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 801265e:	4618      	mov	r0, r3
 8012660:	3728      	adds	r7, #40	@ 0x28
 8012662:	46bd      	mov	sp, r7
 8012664:	bd80      	pop	{r7, pc}
 8012666:	bf00      	nop
 8012668:	20000d30 	.word	0x20000d30
 801266c:	200008d8 	.word	0x200008d8
 8012670:	20000df8 	.word	0x20000df8

08012674 <LoRaMacMcpsRequest>:

/* ST_WORKAROUND_BEGIN: Update MCPS request with new input parameter to allow delayed tx */
LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 8012674:	b5b0      	push	{r4, r5, r7, lr}
 8012676:	b092      	sub	sp, #72	@ 0x48
 8012678:	af02      	add	r7, sp, #8
 801267a:	6078      	str	r0, [r7, #4]
 801267c:	460b      	mov	r3, r1
 801267e:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012680:	2302      	movs	r3, #2
 8012682:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 8012686:	2300      	movs	r3, #0
 8012688:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    /* ST_WORKAROUND_BEGIN: remove GCC9 warning */
    void* fBuffer = NULL;
 801268c:	2300      	movs	r3, #0
 801268e:	63bb      	str	r3, [r7, #56]	@ 0x38
    /* ST_WORKAROUND_END */
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 8012690:	2300      	movs	r3, #0
 8012692:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    bool readyToSend = false;
 8012696:	2300      	movs	r3, #0
 8012698:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    if( mcpsRequest == NULL )
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	2b00      	cmp	r3, #0
 80126a0:	d101      	bne.n	80126a6 <LoRaMacMcpsRequest+0x32>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80126a2:	2303      	movs	r3, #3
 80126a4:	e113      	b.n	80128ce <LoRaMacMcpsRequest+0x25a>
        }
    }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Initialize mcpsRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mcpsRequest->ReqReturn.DutyCycleWaitTime = 0;
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	2200      	movs	r2, #0
 80126aa:	611a      	str	r2, [r3, #16]

    if( LoRaMacIsBusy( ) == true )
 80126ac:	f7fc face 	bl	800ec4c <LoRaMacIsBusy>
 80126b0:	4603      	mov	r3, r0
 80126b2:	2b00      	cmp	r3, #0
 80126b4:	d001      	beq.n	80126ba <LoRaMacMcpsRequest+0x46>
    {
        return LORAMAC_STATUS_BUSY;
 80126b6:	2301      	movs	r3, #1
 80126b8:	e109      	b.n	80128ce <LoRaMacMcpsRequest+0x25a>
    }

    McpsReq_t request = *mcpsRequest;
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	f107 040c 	add.w	r4, r7, #12
 80126c0:	461d      	mov	r5, r3
 80126c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80126c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80126c6:	682b      	ldr	r3, [r5, #0]
 80126c8:	6023      	str	r3, [r4, #0]

    macHdr.Value = 0;
 80126ca:	2300      	movs	r3, #0
 80126cc:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 80126d0:	2214      	movs	r2, #20
 80126d2:	2100      	movs	r1, #0
 80126d4:	4880      	ldr	r0, [pc, #512]	@ (80128d8 <LoRaMacMcpsRequest+0x264>)
 80126d6:	f004 fc67 	bl	8016fa8 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80126da:	4b80      	ldr	r3, [pc, #512]	@ (80128dc <LoRaMacMcpsRequest+0x268>)
 80126dc:	2201      	movs	r2, #1
 80126de:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445

    // Apply confirmed downlinks, if the device has not received a valid
    // downlink after a join accept.
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 80126e2:	4b7f      	ldr	r3, [pc, #508]	@ (80128e0 <LoRaMacMcpsRequest+0x26c>)
 80126e4:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 80126e8:	2b02      	cmp	r3, #2
 80126ea:	d111      	bne.n	8012710 <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 80126ec:	4b7c      	ldr	r3, [pc, #496]	@ (80128e0 <LoRaMacMcpsRequest+0x26c>)
 80126ee:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 80126f2:	2b02      	cmp	r3, #2
 80126f4:	d10c      	bne.n	8012710 <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 80126f6:	4b7a      	ldr	r3, [pc, #488]	@ (80128e0 <LoRaMacMcpsRequest+0x26c>)
 80126f8:	f893 310a 	ldrb.w	r3, [r3, #266]	@ 0x10a
 80126fc:	f083 0301 	eor.w	r3, r3, #1
 8012700:	b2db      	uxtb	r3, r3
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 8012702:	2b00      	cmp	r3, #0
 8012704:	d004      	beq.n	8012710 <LoRaMacMcpsRequest+0x9c>
        ( request.Type == MCPS_UNCONFIRMED ) )
 8012706:	7b3b      	ldrb	r3, [r7, #12]
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 8012708:	2b00      	cmp	r3, #0
 801270a:	d101      	bne.n	8012710 <LoRaMacMcpsRequest+0x9c>
    {
        request.Type = MCPS_CONFIRMED;
 801270c:	2301      	movs	r3, #1
 801270e:	733b      	strb	r3, [r7, #12]
    }

    switch( request.Type )
 8012710:	7b3b      	ldrb	r3, [r7, #12]
 8012712:	2b03      	cmp	r3, #3
 8012714:	d030      	beq.n	8012778 <LoRaMacMcpsRequest+0x104>
 8012716:	2b03      	cmp	r3, #3
 8012718:	dc3f      	bgt.n	801279a <LoRaMacMcpsRequest+0x126>
 801271a:	2b00      	cmp	r3, #0
 801271c:	d002      	beq.n	8012724 <LoRaMacMcpsRequest+0xb0>
 801271e:	2b01      	cmp	r3, #1
 8012720:	d015      	beq.n	801274e <LoRaMacMcpsRequest+0xda>
            fBufferSize = request.Req.Proprietary.fBufferSize;
            datarate = request.Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 8012722:	e03a      	b.n	801279a <LoRaMacMcpsRequest+0x126>
            readyToSend = true;
 8012724:	2301      	movs	r3, #1
 8012726:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 801272a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801272e:	2202      	movs	r2, #2
 8012730:	f362 1347 	bfi	r3, r2, #5, #3
 8012734:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            fPort = request.Req.Unconfirmed.fPort;
 8012738:	7c3b      	ldrb	r3, [r7, #16]
 801273a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
            fBuffer = request.Req.Unconfirmed.fBuffer;
 801273e:	697b      	ldr	r3, [r7, #20]
 8012740:	63bb      	str	r3, [r7, #56]	@ 0x38
            fBufferSize = request.Req.Unconfirmed.fBufferSize;
 8012742:	8b3b      	ldrh	r3, [r7, #24]
 8012744:	86fb      	strh	r3, [r7, #54]	@ 0x36
            datarate = request.Req.Unconfirmed.Datarate;
 8012746:	7ebb      	ldrb	r3, [r7, #26]
 8012748:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
            break;
 801274c:	e026      	b.n	801279c <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 801274e:	2301      	movs	r3, #1
 8012750:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8012754:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8012758:	2204      	movs	r2, #4
 801275a:	f362 1347 	bfi	r3, r2, #5, #3
 801275e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            fPort = request.Req.Confirmed.fPort;
 8012762:	7c3b      	ldrb	r3, [r7, #16]
 8012764:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
            fBuffer = request.Req.Confirmed.fBuffer;
 8012768:	697b      	ldr	r3, [r7, #20]
 801276a:	63bb      	str	r3, [r7, #56]	@ 0x38
            fBufferSize = request.Req.Confirmed.fBufferSize;
 801276c:	8b3b      	ldrh	r3, [r7, #24]
 801276e:	86fb      	strh	r3, [r7, #54]	@ 0x36
            datarate = request.Req.Confirmed.Datarate;
 8012770:	7ebb      	ldrb	r3, [r7, #26]
 8012772:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
            break;
 8012776:	e011      	b.n	801279c <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 8012778:	2301      	movs	r3, #1
 801277a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 801277e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8012782:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 8012786:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            fBuffer = request.Req.Proprietary.fBuffer;
 801278a:	693b      	ldr	r3, [r7, #16]
 801278c:	63bb      	str	r3, [r7, #56]	@ 0x38
            fBufferSize = request.Req.Proprietary.fBufferSize;
 801278e:	8abb      	ldrh	r3, [r7, #20]
 8012790:	86fb      	strh	r3, [r7, #54]	@ 0x36
            datarate = request.Req.Proprietary.Datarate;
 8012792:	7dbb      	ldrb	r3, [r7, #22]
 8012794:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
            break;
 8012798:	e000      	b.n	801279c <LoRaMacMcpsRequest+0x128>
            break;
 801279a:	bf00      	nop
    }

    // Make sure that the input datarate is compliant
    // to the regional specification.
    getPhy.Attribute = PHY_MIN_TX_DR;
 801279c:	2302      	movs	r3, #2
 801279e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80127a2:	4b4f      	ldr	r3, [pc, #316]	@ (80128e0 <LoRaMacMcpsRequest+0x26c>)
 80127a4:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 80127a8:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80127ac:	4b4c      	ldr	r3, [pc, #304]	@ (80128e0 <LoRaMacMcpsRequest+0x26c>)
 80127ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80127b2:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80127b6:	4611      	mov	r1, r2
 80127b8:	4618      	mov	r0, r3
 80127ba:	f002 f919 	bl	80149f0 <RegionGetPhyParam>
 80127be:	4603      	mov	r3, r0
 80127c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 80127c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80127c4:	b25b      	sxtb	r3, r3
 80127c6:	f997 2035 	ldrsb.w	r2, [r7, #53]	@ 0x35
 80127ca:	4293      	cmp	r3, r2
 80127cc:	bfb8      	it	lt
 80127ce:	4613      	movlt	r3, r2
 80127d0:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

    // Apply minimum datarate in this special case.
    if( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 80127d4:	4b42      	ldr	r3, [pc, #264]	@ (80128e0 <LoRaMacMcpsRequest+0x26c>)
 80127d6:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 80127da:	4a41      	ldr	r2, [pc, #260]	@ (80128e0 <LoRaMacMcpsRequest+0x26c>)
 80127dc:	f892 111c 	ldrb.w	r1, [r2, #284]	@ 0x11c
 80127e0:	4a3f      	ldr	r2, [pc, #252]	@ (80128e0 <LoRaMacMcpsRequest+0x26c>)
 80127e2:	f892 2109 	ldrb.w	r2, [r2, #265]	@ 0x109
 80127e6:	4618      	mov	r0, r3
 80127e8:	f7fc fbc8 	bl	800ef7c <CheckForMinimumAbpDatarate>
 80127ec:	4603      	mov	r3, r0
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	d002      	beq.n	80127f8 <LoRaMacMcpsRequest+0x184>
                                    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true )
    {
        datarate = ( int8_t )phyParam.Value;
 80127f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80127f4:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if( readyToSend == true )
 80127f8:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	d05f      	beq.n	80128c0 <LoRaMacMcpsRequest+0x24c>
    {
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 8012800:	4b37      	ldr	r3, [pc, #220]	@ (80128e0 <LoRaMacMcpsRequest+0x26c>)
 8012802:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8012806:	f083 0301 	eor.w	r3, r3, #1
 801280a:	b2db      	uxtb	r3, r3
 801280c:	2b00      	cmp	r3, #0
 801280e:	d10e      	bne.n	801282e <LoRaMacMcpsRequest+0x1ba>
            ( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 8012810:	4b33      	ldr	r3, [pc, #204]	@ (80128e0 <LoRaMacMcpsRequest+0x26c>)
 8012812:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8012816:	4a32      	ldr	r2, [pc, #200]	@ (80128e0 <LoRaMacMcpsRequest+0x26c>)
 8012818:	f892 111c 	ldrb.w	r1, [r2, #284]	@ 0x11c
 801281c:	4a30      	ldr	r2, [pc, #192]	@ (80128e0 <LoRaMacMcpsRequest+0x26c>)
 801281e:	f892 2109 	ldrb.w	r2, [r2, #265]	@ 0x109
 8012822:	4618      	mov	r0, r3
 8012824:	f7fc fbaa 	bl	800ef7c <CheckForMinimumAbpDatarate>
 8012828:	4603      	mov	r3, r0
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 801282a:	2b00      	cmp	r3, #0
 801282c:	d01c      	beq.n	8012868 <LoRaMacMcpsRequest+0x1f4>
                                          Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true ) )
        {
            verify.DatarateParams.Datarate = datarate;
 801282e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8012832:	f887 3020 	strb.w	r3, [r7, #32]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012836:	4b2a      	ldr	r3, [pc, #168]	@ (80128e0 <LoRaMacMcpsRequest+0x26c>)
 8012838:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 801283c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8012840:	4b27      	ldr	r3, [pc, #156]	@ (80128e0 <LoRaMacMcpsRequest+0x26c>)
 8012842:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012846:	f107 0120 	add.w	r1, r7, #32
 801284a:	2205      	movs	r2, #5
 801284c:	4618      	mov	r0, r3
 801284e:	f002 f90a 	bl	8014a66 <RegionVerify>
 8012852:	4603      	mov	r3, r0
 8012854:	2b00      	cmp	r3, #0
 8012856:	d005      	beq.n	8012864 <LoRaMacMcpsRequest+0x1f0>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8012858:	f997 2020 	ldrsb.w	r2, [r7, #32]
 801285c:	4b20      	ldr	r3, [pc, #128]	@ (80128e0 <LoRaMacMcpsRequest+0x26c>)
 801285e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 8012862:	e001      	b.n	8012868 <LoRaMacMcpsRequest+0x1f4>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 8012864:	2303      	movs	r3, #3
 8012866:	e032      	b.n	80128ce <LoRaMacMcpsRequest+0x25a>
            }
        }

        // Verification of response timeout for class b and class c
        LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 8012868:	4b1d      	ldr	r3, [pc, #116]	@ (80128e0 <LoRaMacMcpsRequest+0x26c>)
 801286a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801286e:	4a1b      	ldr	r2, [pc, #108]	@ (80128dc <LoRaMacMcpsRequest+0x268>)
 8012870:	f8d2 249c 	ldr.w	r2, [r2, #1180]	@ 0x49c
 8012874:	4611      	mov	r1, r2
 8012876:	4618      	mov	r0, r3
 8012878:	f7fc fc6a 	bl	800f150 <LoRaMacHandleResponseTimeout>
                                      MacCtx.ResponseTimeoutStartTime );

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 801287c:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 801287e:	f897 103e 	ldrb.w	r1, [r7, #62]	@ 0x3e
 8012882:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8012886:	78fb      	ldrb	r3, [r7, #3]
 8012888:	9300      	str	r3, [sp, #0]
 801288a:	4613      	mov	r3, r2
 801288c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801288e:	f7fd fc0f 	bl	80100b0 <Send>
 8012892:	4603      	mov	r3, r0
 8012894:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if( status == LORAMAC_STATUS_OK )
 8012898:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801289c:	2b00      	cmp	r3, #0
 801289e:	d10b      	bne.n	80128b8 <LoRaMacMcpsRequest+0x244>
        {
            MacCtx.McpsConfirm.McpsRequest = request.Type;
 80128a0:	7b3a      	ldrb	r2, [r7, #12]
 80128a2:	4b0e      	ldr	r3, [pc, #56]	@ (80128dc <LoRaMacMcpsRequest+0x268>)
 80128a4:	f883 2444 	strb.w	r2, [r3, #1092]	@ 0x444
            MacCtx.MacFlags.Bits.McpsReq = 1;
 80128a8:	4a0c      	ldr	r2, [pc, #48]	@ (80128dc <LoRaMacMcpsRequest+0x268>)
 80128aa:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 80128ae:	f043 0301 	orr.w	r3, r3, #1
 80128b2:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
 80128b6:	e003      	b.n	80128c0 <LoRaMacMcpsRequest+0x24c>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 80128b8:	4b08      	ldr	r3, [pc, #32]	@ (80128dc <LoRaMacMcpsRequest+0x268>)
 80128ba:	2200      	movs	r2, #0
 80128bc:	f883 241e 	strb.w	r2, [r3, #1054]	@ 0x41e
        }
    }
#endif /* LORAMAC_VERSION */

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 80128c0:	4b06      	ldr	r3, [pc, #24]	@ (80128dc <LoRaMacMcpsRequest+0x268>)
 80128c2:	f8d3 2498 	ldr.w	r2, [r3, #1176]	@ 0x498
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	611a      	str	r2, [r3, #16]

    return status;
 80128ca:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 80128ce:	4618      	mov	r0, r3
 80128d0:	3740      	adds	r7, #64	@ 0x40
 80128d2:	46bd      	mov	sp, r7
 80128d4:	bdb0      	pop	{r4, r5, r7, pc}
 80128d6:	bf00      	nop
 80128d8:	20000d1c 	.word	0x20000d1c
 80128dc:	200008d8 	.word	0x200008d8
 80128e0:	20000df8 	.word	0x20000df8

080128e4 <LoRaMacTestSetDutyCycleOn>:
/* ST_WORKAROUND_END */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 80128e4:	b580      	push	{r7, lr}
 80128e6:	b084      	sub	sp, #16
 80128e8:	af00      	add	r7, sp, #0
 80128ea:	4603      	mov	r3, r0
 80128ec:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 80128ee:	79fb      	ldrb	r3, [r7, #7]
 80128f0:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 80128f2:	4b0a      	ldr	r3, [pc, #40]	@ (801291c <LoRaMacTestSetDutyCycleOn+0x38>)
 80128f4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80128f8:	f107 010c 	add.w	r1, r7, #12
 80128fc:	220f      	movs	r2, #15
 80128fe:	4618      	mov	r0, r3
 8012900:	f002 f8b1 	bl	8014a66 <RegionVerify>
 8012904:	4603      	mov	r3, r0
 8012906:	2b00      	cmp	r3, #0
 8012908:	d003      	beq.n	8012912 <LoRaMacTestSetDutyCycleOn+0x2e>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 801290a:	4a04      	ldr	r2, [pc, #16]	@ (801291c <LoRaMacTestSetDutyCycleOn+0x38>)
 801290c:	79fb      	ldrb	r3, [r7, #7]
 801290e:	f882 3108 	strb.w	r3, [r2, #264]	@ 0x108
    }
}
 8012912:	bf00      	nop
 8012914:	3710      	adds	r7, #16
 8012916:	46bd      	mov	sp, r7
 8012918:	bd80      	pop	{r7, pc}
 801291a:	bf00      	nop
 801291c:	20000df8 	.word	0x20000df8

08012920 <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 8012920:	b580      	push	{r7, lr}
 8012922:	af00      	add	r7, sp, #0
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 8012924:	f7fe ff26 	bl	8011774 <LoRaMacStop>
 8012928:	4603      	mov	r3, r0
 801292a:	2b00      	cmp	r3, #0
 801292c:	d111      	bne.n	8012952 <LoRaMacDeInitialization+0x32>
    {
        // Stop Timers
        TimerStop( &MacCtx.TxDelayedTimer );
 801292e:	480a      	ldr	r0, [pc, #40]	@ (8012958 <LoRaMacDeInitialization+0x38>)
 8012930:	f008 fc4c 	bl	801b1cc <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 8012934:	4809      	ldr	r0, [pc, #36]	@ (801295c <LoRaMacDeInitialization+0x3c>)
 8012936:	f008 fc49 	bl	801b1cc <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 801293a:	4809      	ldr	r0, [pc, #36]	@ (8012960 <LoRaMacDeInitialization+0x40>)
 801293c:	f008 fc46 	bl	801b1cc <UTIL_TIMER_Stop>
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        TimerStop( &MacCtx.AckTimeoutTimer );
#endif /* LORAMAC_VERSION */

        // Take care about class B
        LoRaMacClassBHaltBeaconing( );
 8012940:	f000 f948 	bl	8012bd4 <LoRaMacClassBHaltBeaconing>

        // Reset Mac parameters
        ResetMacParameters( );
 8012944:	f7fd ff1a 	bl	801077c <ResetMacParameters>

        // Switch off Radio
        Radio.Sleep( );
 8012948:	4b06      	ldr	r3, [pc, #24]	@ (8012964 <LoRaMacDeInitialization+0x44>)
 801294a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801294c:	4798      	blx	r3

        // Return success
        return LORAMAC_STATUS_OK;
 801294e:	2300      	movs	r3, #0
 8012950:	e000      	b.n	8012954 <LoRaMacDeInitialization+0x34>
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 8012952:	2301      	movs	r3, #1
    }
}
 8012954:	4618      	mov	r0, r3
 8012956:	bd80      	pop	{r7, pc}
 8012958:	20000c40 	.word	0x20000c40
 801295c:	20000c58 	.word	0x20000c58
 8012960:	20000c70 	.word	0x20000c70
 8012964:	0801f464 	.word	0x0801f464

08012968 <LoRaMacAdrCalcNext>:
    return false;
}
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut,
                         uint8_t* nbTransOut, uint32_t* adrAckCounter )
{
 8012968:	b580      	push	{r7, lr}
 801296a:	b08c      	sub	sp, #48	@ 0x30
 801296c:	af00      	add	r7, sp, #0
 801296e:	60f8      	str	r0, [r7, #12]
 8012970:	60b9      	str	r1, [r7, #8]
 8012972:	607a      	str	r2, [r7, #4]
 8012974:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 8012976:	2300      	movs	r3, #0
 8012978:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    int8_t datarate = adrNext->Datarate;
 801297c:	68fb      	ldr	r3, [r7, #12]
 801297e:	7b1b      	ldrb	r3, [r3, #12]
 8012980:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    int8_t txPower = adrNext->TxPower;
 8012984:	68fb      	ldr	r3, [r7, #12]
 8012986:	7b5b      	ldrb	r3, [r3, #13]
 8012988:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint8_t nbTrans = adrNext->NbTrans;
 801298c:	68fb      	ldr	r3, [r7, #12]
 801298e:	7b9b      	ldrb	r3, [r3, #14]
 8012990:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 8012994:	68fb      	ldr	r3, [r7, #12]
 8012996:	685a      	ldr	r2, [r3, #4]
 8012998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801299a:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 801299c:	68fb      	ldr	r3, [r7, #12]
 801299e:	785b      	ldrb	r3, [r3, #1]
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	f000 8088 	beq.w	8012ab6 <LoRaMacAdrCalcNext+0x14e>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 80129a6:	2302      	movs	r3, #2
 80129a8:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 80129ac:	68fb      	ldr	r3, [r7, #12]
 80129ae:	7bdb      	ldrb	r3, [r3, #15]
 80129b0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80129b4:	68fb      	ldr	r3, [r7, #12]
 80129b6:	7c1b      	ldrb	r3, [r3, #16]
 80129b8:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80129bc:	4611      	mov	r1, r2
 80129be:	4618      	mov	r0, r3
 80129c0:	f002 f816 	bl	80149f0 <RegionGetPhyParam>
 80129c4:	4603      	mov	r3, r0
 80129c6:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 80129c8:	6a3b      	ldr	r3, [r7, #32]
 80129ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        datarate = MAX( datarate, minTxDatarate );
 80129ce:	f997 202b 	ldrsb.w	r2, [r7, #43]	@ 0x2b
 80129d2:	f997 302e 	ldrsb.w	r3, [r7, #46]	@ 0x2e
 80129d6:	4293      	cmp	r3, r2
 80129d8:	bfb8      	it	lt
 80129da:	4613      	movlt	r3, r2
 80129dc:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

        // Verify if ADR ack req bit needs to be set.
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
 80129e0:	68fb      	ldr	r3, [r7, #12]
 80129e2:	685b      	ldr	r3, [r3, #4]
 80129e4:	68fa      	ldr	r2, [r7, #12]
 80129e6:	8912      	ldrh	r2, [r2, #8]
 80129e8:	4293      	cmp	r3, r2
 80129ea:	d302      	bcc.n	80129f2 <LoRaMacAdrCalcNext+0x8a>
        {
            adrAckReq = true;
 80129ec:	2301      	movs	r3, #1
 80129ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        }

        // Verify, if we need to set the TX power to default
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 80129f2:	68fb      	ldr	r3, [r7, #12]
 80129f4:	685b      	ldr	r3, [r3, #4]
 80129f6:	68fa      	ldr	r2, [r7, #12]
 80129f8:	8912      	ldrh	r2, [r2, #8]
 80129fa:	4611      	mov	r1, r2
 80129fc:	68fa      	ldr	r2, [r7, #12]
 80129fe:	8952      	ldrh	r2, [r2, #10]
 8012a00:	440a      	add	r2, r1
 8012a02:	4293      	cmp	r3, r2
 8012a04:	d30f      	bcc.n	8012a26 <LoRaMacAdrCalcNext+0xbe>
        {
            // Set TX Power to default
            getPhy.Attribute = PHY_DEF_TX_POWER;
 8012a06:	230a      	movs	r3, #10
 8012a08:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8012a0c:	68fb      	ldr	r3, [r7, #12]
 8012a0e:	7c1b      	ldrb	r3, [r3, #16]
 8012a10:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8012a14:	4611      	mov	r1, r2
 8012a16:	4618      	mov	r0, r3
 8012a18:	f001 ffea 	bl	80149f0 <RegionGetPhyParam>
 8012a1c:	4603      	mov	r3, r0
 8012a1e:	623b      	str	r3, [r7, #32]
            txPower = phyParam.Value;
 8012a20:	6a3b      	ldr	r3, [r7, #32]
 8012a22:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
        }

        // Verify, if we need to decrease the data rate
        if( adrNext->AdrAckCounter >= ( uint32_t )( adrNext->AdrAckLimit + ( adrNext->AdrAckDelay << 1 ) ) )
 8012a26:	68fb      	ldr	r3, [r7, #12]
 8012a28:	685b      	ldr	r3, [r3, #4]
 8012a2a:	68fa      	ldr	r2, [r7, #12]
 8012a2c:	8912      	ldrh	r2, [r2, #8]
 8012a2e:	4611      	mov	r1, r2
 8012a30:	68fa      	ldr	r2, [r7, #12]
 8012a32:	8952      	ldrh	r2, [r2, #10]
 8012a34:	0052      	lsls	r2, r2, #1
 8012a36:	440a      	add	r2, r1
 8012a38:	4293      	cmp	r3, r2
 8012a3a:	d33c      	bcc.n	8012ab6 <LoRaMacAdrCalcNext+0x14e>
        {
            // Perform actions with every adrNext->AdrAckDelay only
            if( ( ( adrNext->AdrAckCounter - adrNext->AdrAckLimit ) % adrNext->AdrAckDelay ) == 0 )
 8012a3c:	68fb      	ldr	r3, [r7, #12]
 8012a3e:	685b      	ldr	r3, [r3, #4]
 8012a40:	68fa      	ldr	r2, [r7, #12]
 8012a42:	8912      	ldrh	r2, [r2, #8]
 8012a44:	1a9b      	subs	r3, r3, r2
 8012a46:	68fa      	ldr	r2, [r7, #12]
 8012a48:	8952      	ldrh	r2, [r2, #10]
 8012a4a:	fbb3 f1f2 	udiv	r1, r3, r2
 8012a4e:	fb01 f202 	mul.w	r2, r1, r2
 8012a52:	1a9b      	subs	r3, r3, r2
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	d12e      	bne.n	8012ab6 <LoRaMacAdrCalcNext+0x14e>
            {
                if( datarate == minTxDatarate )
 8012a58:	f997 202e 	ldrsb.w	r2, [r7, #46]	@ 0x2e
 8012a5c:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8012a60:	429a      	cmp	r2, r3
 8012a62:	d110      	bne.n	8012a86 <LoRaMacAdrCalcNext+0x11e>
                {
                    // Restore the channel mask
                    if( adrNext->UpdateChanMask == true )
 8012a64:	68fb      	ldr	r3, [r7, #12]
 8012a66:	781b      	ldrb	r3, [r3, #0]
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	d009      	beq.n	8012a80 <LoRaMacAdrCalcNext+0x118>
                    {
                        InitDefaultsParams_t params;
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8012a6c:	2302      	movs	r3, #2
 8012a6e:	773b      	strb	r3, [r7, #28]
                        RegionInitDefaults( adrNext->Region, &params );
 8012a70:	68fb      	ldr	r3, [r7, #12]
 8012a72:	7c1b      	ldrb	r3, [r3, #16]
 8012a74:	f107 0210 	add.w	r2, r7, #16
 8012a78:	4611      	mov	r1, r2
 8012a7a:	4618      	mov	r0, r3
 8012a7c:	f001 ffe1 	bl	8014a42 <RegionInitDefaults>
                    }

                    // Restore NbTrans
                    nbTrans = 1;
 8012a80:	2301      	movs	r3, #1
 8012a82:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                }

                // Decrease the datarate
                getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8012a86:	2321      	movs	r3, #33	@ 0x21
 8012a88:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
                getPhy.Datarate = datarate;
 8012a8c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8012a90:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
                getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8012a94:	68fb      	ldr	r3, [r7, #12]
 8012a96:	7bdb      	ldrb	r3, [r3, #15]
 8012a98:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8012a9c:	68fb      	ldr	r3, [r7, #12]
 8012a9e:	7c1b      	ldrb	r3, [r3, #16]
 8012aa0:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8012aa4:	4611      	mov	r1, r2
 8012aa6:	4618      	mov	r0, r3
 8012aa8:	f001 ffa2 	bl	80149f0 <RegionGetPhyParam>
 8012aac:	4603      	mov	r3, r0
 8012aae:	623b      	str	r3, [r7, #32]
                datarate = phyParam.Value;
 8012ab0:	6a3b      	ldr	r3, [r7, #32]
 8012ab2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
            }
        }
    }

    *drOut = datarate;
 8012ab6:	68bb      	ldr	r3, [r7, #8]
 8012ab8:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8012abc:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8012ac4:	701a      	strb	r2, [r3, #0]
    *nbTransOut = nbTrans;
 8012ac6:	683b      	ldr	r3, [r7, #0]
 8012ac8:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8012acc:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 8012ace:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8012ad2:	4618      	mov	r0, r3
 8012ad4:	3730      	adds	r7, #48	@ 0x30
 8012ad6:	46bd      	mov	sp, r7
 8012ad8:	bd80      	pop	{r7, pc}

08012ada <LoRaMacClassBInit>:
#endif /* LORAMAC_VERSION */

#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmData_t* nvm )
{
 8012ada:	b480      	push	{r7}
 8012adc:	b085      	sub	sp, #20
 8012ade:	af00      	add	r7, sp, #0
 8012ae0:	60f8      	str	r0, [r7, #12]
 8012ae2:	60b9      	str	r1, [r7, #8]
 8012ae4:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012ae6:	bf00      	nop
 8012ae8:	3714      	adds	r7, #20
 8012aea:	46bd      	mov	sp, r7
 8012aec:	bc80      	pop	{r7}
 8012aee:	4770      	bx	lr

08012af0 <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 8012af0:	b480      	push	{r7}
 8012af2:	b083      	sub	sp, #12
 8012af4:	af00      	add	r7, sp, #0
 8012af6:	4603      	mov	r3, r0
 8012af8:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012afa:	bf00      	nop
 8012afc:	370c      	adds	r7, #12
 8012afe:	46bd      	mov	sp, r7
 8012b00:	bc80      	pop	{r7}
 8012b02:	4770      	bx	lr

08012b04 <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 8012b04:	b480      	push	{r7}
 8012b06:	b083      	sub	sp, #12
 8012b08:	af00      	add	r7, sp, #0
 8012b0a:	4603      	mov	r3, r0
 8012b0c:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012b0e:	bf00      	nop
 8012b10:	370c      	adds	r7, #12
 8012b12:	46bd      	mov	sp, r7
 8012b14:	bc80      	pop	{r7}
 8012b16:	4770      	bx	lr

08012b18 <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 8012b18:	b480      	push	{r7}
 8012b1a:	b083      	sub	sp, #12
 8012b1c:	af00      	add	r7, sp, #0
 8012b1e:	4603      	mov	r3, r0
 8012b20:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012b22:	bf00      	nop
 8012b24:	370c      	adds	r7, #12
 8012b26:	46bd      	mov	sp, r7
 8012b28:	bc80      	pop	{r7}
 8012b2a:	4770      	bx	lr

08012b2c <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 8012b2c:	b480      	push	{r7}
 8012b2e:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 8012b30:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012b32:	4618      	mov	r0, r3
 8012b34:	46bd      	mov	sp, r7
 8012b36:	bc80      	pop	{r7}
 8012b38:	4770      	bx	lr

08012b3a <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 8012b3a:	b480      	push	{r7}
 8012b3c:	b083      	sub	sp, #12
 8012b3e:	af00      	add	r7, sp, #0
 8012b40:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012b42:	bf00      	nop
 8012b44:	370c      	adds	r7, #12
 8012b46:	46bd      	mov	sp, r7
 8012b48:	bc80      	pop	{r7}
 8012b4a:	4770      	bx	lr

08012b4c <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 8012b4c:	b480      	push	{r7}
 8012b4e:	b083      	sub	sp, #12
 8012b50:	af00      	add	r7, sp, #0
 8012b52:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012b54:	bf00      	nop
 8012b56:	370c      	adds	r7, #12
 8012b58:	46bd      	mov	sp, r7
 8012b5a:	bc80      	pop	{r7}
 8012b5c:	4770      	bx	lr

08012b5e <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 8012b5e:	b480      	push	{r7}
 8012b60:	b083      	sub	sp, #12
 8012b62:	af00      	add	r7, sp, #0
 8012b64:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012b66:	bf00      	nop
 8012b68:	370c      	adds	r7, #12
 8012b6a:	46bd      	mov	sp, r7
 8012b6c:	bc80      	pop	{r7}
 8012b6e:	4770      	bx	lr

08012b70 <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 8012b70:	b480      	push	{r7}
 8012b72:	b083      	sub	sp, #12
 8012b74:	af00      	add	r7, sp, #0
 8012b76:	6078      	str	r0, [r7, #4]
 8012b78:	460b      	mov	r3, r1
 8012b7a:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 8012b7c:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012b7e:	4618      	mov	r0, r3
 8012b80:	370c      	adds	r7, #12
 8012b82:	46bd      	mov	sp, r7
 8012b84:	bc80      	pop	{r7}
 8012b86:	4770      	bx	lr

08012b88 <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 8012b88:	b480      	push	{r7}
 8012b8a:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8012b8c:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012b8e:	4618      	mov	r0, r3
 8012b90:	46bd      	mov	sp, r7
 8012b92:	bc80      	pop	{r7}
 8012b94:	4770      	bx	lr

08012b96 <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 8012b96:	b480      	push	{r7}
 8012b98:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8012b9a:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012b9c:	4618      	mov	r0, r3
 8012b9e:	46bd      	mov	sp, r7
 8012ba0:	bc80      	pop	{r7}
 8012ba2:	4770      	bx	lr

08012ba4 <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 8012ba4:	b480      	push	{r7}
 8012ba6:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8012ba8:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012baa:	4618      	mov	r0, r3
 8012bac:	46bd      	mov	sp, r7
 8012bae:	bc80      	pop	{r7}
 8012bb0:	4770      	bx	lr

08012bb2 <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 8012bb2:	b480      	push	{r7}
 8012bb4:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8012bb6:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012bb8:	4618      	mov	r0, r3
 8012bba:	46bd      	mov	sp, r7
 8012bbc:	bc80      	pop	{r7}
 8012bbe:	4770      	bx	lr

08012bc0 <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 8012bc0:	b480      	push	{r7}
 8012bc2:	b083      	sub	sp, #12
 8012bc4:	af00      	add	r7, sp, #0
 8012bc6:	4603      	mov	r3, r0
 8012bc8:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012bca:	bf00      	nop
 8012bcc:	370c      	adds	r7, #12
 8012bce:	46bd      	mov	sp, r7
 8012bd0:	bc80      	pop	{r7}
 8012bd2:	4770      	bx	lr

08012bd4 <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 8012bd4:	b480      	push	{r7}
 8012bd6:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012bd8:	bf00      	nop
 8012bda:	46bd      	mov	sp, r7
 8012bdc:	bc80      	pop	{r7}
 8012bde:	4770      	bx	lr

08012be0 <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 8012be0:	b480      	push	{r7}
 8012be2:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012be4:	bf00      	nop
 8012be6:	46bd      	mov	sp, r7
 8012be8:	bc80      	pop	{r7}
 8012bea:	4770      	bx	lr

08012bec <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 8012bec:	b480      	push	{r7}
 8012bee:	b083      	sub	sp, #12
 8012bf0:	af00      	add	r7, sp, #0
 8012bf2:	4603      	mov	r3, r0
 8012bf4:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012bf6:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012bf8:	4618      	mov	r0, r3
 8012bfa:	370c      	adds	r7, #12
 8012bfc:	46bd      	mov	sp, r7
 8012bfe:	bc80      	pop	{r7}
 8012c00:	4770      	bx	lr

08012c02 <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 8012c02:	b480      	push	{r7}
 8012c04:	b083      	sub	sp, #12
 8012c06:	af00      	add	r7, sp, #0
 8012c08:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012c0a:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012c0c:	4618      	mov	r0, r3
 8012c0e:	370c      	adds	r7, #12
 8012c10:	46bd      	mov	sp, r7
 8012c12:	bc80      	pop	{r7}
 8012c14:	4770      	bx	lr

08012c16 <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 8012c16:	b480      	push	{r7}
 8012c18:	b083      	sub	sp, #12
 8012c1a:	af00      	add	r7, sp, #0
 8012c1c:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012c1e:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012c20:	4618      	mov	r0, r3
 8012c22:	370c      	adds	r7, #12
 8012c24:	46bd      	mov	sp, r7
 8012c26:	bc80      	pop	{r7}
 8012c28:	4770      	bx	lr

08012c2a <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 8012c2a:	b480      	push	{r7}
 8012c2c:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012c2e:	bf00      	nop
 8012c30:	46bd      	mov	sp, r7
 8012c32:	bc80      	pop	{r7}
 8012c34:	4770      	bx	lr

08012c36 <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 8012c36:	b480      	push	{r7}
 8012c38:	b083      	sub	sp, #12
 8012c3a:	af00      	add	r7, sp, #0
 8012c3c:	4603      	mov	r3, r0
 8012c3e:	6039      	str	r1, [r7, #0]
 8012c40:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 8012c42:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012c44:	4618      	mov	r0, r3
 8012c46:	370c      	adds	r7, #12
 8012c48:	46bd      	mov	sp, r7
 8012c4a:	bc80      	pop	{r7}
 8012c4c:	4770      	bx	lr

08012c4e <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 8012c4e:	b480      	push	{r7}
 8012c50:	b083      	sub	sp, #12
 8012c52:	af00      	add	r7, sp, #0
 8012c54:	4603      	mov	r3, r0
 8012c56:	603a      	str	r2, [r7, #0]
 8012c58:	80fb      	strh	r3, [r7, #6]
 8012c5a:	460b      	mov	r3, r1
 8012c5c:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012c5e:	bf00      	nop
 8012c60:	370c      	adds	r7, #12
 8012c62:	46bd      	mov	sp, r7
 8012c64:	bc80      	pop	{r7}
 8012c66:	4770      	bx	lr

08012c68 <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 8012c68:	b480      	push	{r7}
 8012c6a:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012c6c:	bf00      	nop
 8012c6e:	46bd      	mov	sp, r7
 8012c70:	bc80      	pop	{r7}
 8012c72:	4770      	bx	lr

08012c74 <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 8012c74:	b480      	push	{r7}
 8012c76:	b083      	sub	sp, #12
 8012c78:	af00      	add	r7, sp, #0
 8012c7a:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 8012c7c:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012c7e:	4618      	mov	r0, r3
 8012c80:	370c      	adds	r7, #12
 8012c82:	46bd      	mov	sp, r7
 8012c84:	bc80      	pop	{r7}
 8012c86:	4770      	bx	lr

08012c88 <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 8012c88:	b480      	push	{r7}
 8012c8a:	b083      	sub	sp, #12
 8012c8c:	af00      	add	r7, sp, #0
 8012c8e:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 8012c90:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012c92:	4618      	mov	r0, r3
 8012c94:	370c      	adds	r7, #12
 8012c96:	46bd      	mov	sp, r7
 8012c98:	bc80      	pop	{r7}
 8012c9a:	4770      	bx	lr

08012c9c <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 8012c9c:	b480      	push	{r7}
 8012c9e:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012ca0:	bf00      	nop
 8012ca2:	46bd      	mov	sp, r7
 8012ca4:	bc80      	pop	{r7}
 8012ca6:	4770      	bx	lr

08012ca8 <LoRaMacClassBSetFPendingBit>:
#endif /* LORAMAC_CLASSB_ENABLED */
}

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
void LoRaMacClassBSetFPendingBit( uint32_t address, uint8_t fPendingSet )
{
 8012ca8:	b480      	push	{r7}
 8012caa:	b083      	sub	sp, #12
 8012cac:	af00      	add	r7, sp, #0
 8012cae:	6078      	str	r0, [r7, #4]
 8012cb0:	460b      	mov	r3, r1
 8012cb2:	70fb      	strb	r3, [r7, #3]
            }
            cur++;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012cb4:	bf00      	nop
 8012cb6:	370c      	adds	r7, #12
 8012cb8:	46bd      	mov	sp, r7
 8012cba:	bc80      	pop	{r7}
 8012cbc:	4770      	bx	lr

08012cbe <LoRaMacClassBProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacClassBProcess( void )
{
 8012cbe:	b480      	push	{r7}
 8012cc0:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012cc2:	bf00      	nop
 8012cc4:	46bd      	mov	sp, r7
 8012cc6:	bc80      	pop	{r7}
 8012cc8:	4770      	bx	lr

08012cca <IsSlotFree>:
 *
 * \param [in]    slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 8012cca:	b480      	push	{r7}
 8012ccc:	b085      	sub	sp, #20
 8012cce:	af00      	add	r7, sp, #0
 8012cd0:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8012cd6:	2300      	movs	r3, #0
 8012cd8:	81fb      	strh	r3, [r7, #14]
 8012cda:	e00a      	b.n	8012cf2 <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 8012cdc:	89fb      	ldrh	r3, [r7, #14]
 8012cde:	68ba      	ldr	r2, [r7, #8]
 8012ce0:	4413      	add	r3, r2
 8012ce2:	781b      	ldrb	r3, [r3, #0]
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	d001      	beq.n	8012cec <IsSlotFree+0x22>
        {
            return false;
 8012ce8:	2300      	movs	r3, #0
 8012cea:	e006      	b.n	8012cfa <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8012cec:	89fb      	ldrh	r3, [r7, #14]
 8012cee:	3301      	adds	r3, #1
 8012cf0:	81fb      	strh	r3, [r7, #14]
 8012cf2:	89fb      	ldrh	r3, [r7, #14]
 8012cf4:	2b0f      	cmp	r3, #15
 8012cf6:	d9f1      	bls.n	8012cdc <IsSlotFree+0x12>
        }
    }
    return true;
 8012cf8:	2301      	movs	r3, #1
}
 8012cfa:	4618      	mov	r0, r3
 8012cfc:	3714      	adds	r7, #20
 8012cfe:	46bd      	mov	sp, r7
 8012d00:	bc80      	pop	{r7}
 8012d02:	4770      	bx	lr

08012d04 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 8012d04:	b580      	push	{r7, lr}
 8012d06:	b082      	sub	sp, #8
 8012d08:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 8012d0a:	2300      	movs	r3, #0
 8012d0c:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8012d0e:	e007      	b.n	8012d20 <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 8012d10:	79fb      	ldrb	r3, [r7, #7]
 8012d12:	3301      	adds	r3, #1
 8012d14:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 8012d16:	79fb      	ldrb	r3, [r7, #7]
 8012d18:	2b20      	cmp	r3, #32
 8012d1a:	d101      	bne.n	8012d20 <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 8012d1c:	2300      	movs	r3, #0
 8012d1e:	e012      	b.n	8012d46 <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8012d20:	79fb      	ldrb	r3, [r7, #7]
 8012d22:	011b      	lsls	r3, r3, #4
 8012d24:	3308      	adds	r3, #8
 8012d26:	4a0a      	ldr	r2, [pc, #40]	@ (8012d50 <MallocNewMacCommandSlot+0x4c>)
 8012d28:	4413      	add	r3, r2
 8012d2a:	4618      	mov	r0, r3
 8012d2c:	f7ff ffcd 	bl	8012cca <IsSlotFree>
 8012d30:	4603      	mov	r3, r0
 8012d32:	f083 0301 	eor.w	r3, r3, #1
 8012d36:	b2db      	uxtb	r3, r3
 8012d38:	2b00      	cmp	r3, #0
 8012d3a:	d1e9      	bne.n	8012d10 <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 8012d3c:	79fb      	ldrb	r3, [r7, #7]
 8012d3e:	011b      	lsls	r3, r3, #4
 8012d40:	3308      	adds	r3, #8
 8012d42:	4a03      	ldr	r2, [pc, #12]	@ (8012d50 <MallocNewMacCommandSlot+0x4c>)
 8012d44:	4413      	add	r3, r2
}
 8012d46:	4618      	mov	r0, r3
 8012d48:	3708      	adds	r7, #8
 8012d4a:	46bd      	mov	sp, r7
 8012d4c:	bd80      	pop	{r7, pc}
 8012d4e:	bf00      	nop
 8012d50:	20001998 	.word	0x20001998

08012d54 <FreeMacCommandSlot>:
 * \param [in]    slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 8012d54:	b580      	push	{r7, lr}
 8012d56:	b082      	sub	sp, #8
 8012d58:	af00      	add	r7, sp, #0
 8012d5a:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	2b00      	cmp	r3, #0
 8012d60:	d101      	bne.n	8012d66 <FreeMacCommandSlot+0x12>
    {
        return false;
 8012d62:	2300      	movs	r3, #0
 8012d64:	e005      	b.n	8012d72 <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 8012d66:	2210      	movs	r2, #16
 8012d68:	2100      	movs	r1, #0
 8012d6a:	6878      	ldr	r0, [r7, #4]
 8012d6c:	f004 f91c 	bl	8016fa8 <memset1>

    return true;
 8012d70:	2301      	movs	r3, #1
}
 8012d72:	4618      	mov	r0, r3
 8012d74:	3708      	adds	r7, #8
 8012d76:	46bd      	mov	sp, r7
 8012d78:	bd80      	pop	{r7, pc}

08012d7a <LinkedListInit>:
 *
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 8012d7a:	b480      	push	{r7}
 8012d7c:	b083      	sub	sp, #12
 8012d7e:	af00      	add	r7, sp, #0
 8012d80:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	2b00      	cmp	r3, #0
 8012d86:	d101      	bne.n	8012d8c <LinkedListInit+0x12>
    {
        return false;
 8012d88:	2300      	movs	r3, #0
 8012d8a:	e006      	b.n	8012d9a <LinkedListInit+0x20>
    }

    list->First = NULL;
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	2200      	movs	r2, #0
 8012d90:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	2200      	movs	r2, #0
 8012d96:	605a      	str	r2, [r3, #4]

    return true;
 8012d98:	2301      	movs	r3, #1
}
 8012d9a:	4618      	mov	r0, r3
 8012d9c:	370c      	adds	r7, #12
 8012d9e:	46bd      	mov	sp, r7
 8012da0:	bc80      	pop	{r7}
 8012da2:	4770      	bx	lr

08012da4 <LinkedListAdd>:
 * \param [in]    list           - List where the element shall be added.
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 8012da4:	b480      	push	{r7}
 8012da6:	b083      	sub	sp, #12
 8012da8:	af00      	add	r7, sp, #0
 8012daa:	6078      	str	r0, [r7, #4]
 8012dac:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	d002      	beq.n	8012dba <LinkedListAdd+0x16>
 8012db4:	683b      	ldr	r3, [r7, #0]
 8012db6:	2b00      	cmp	r3, #0
 8012db8:	d101      	bne.n	8012dbe <LinkedListAdd+0x1a>
    {
        return false;
 8012dba:	2300      	movs	r3, #0
 8012dbc:	e015      	b.n	8012dea <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	681b      	ldr	r3, [r3, #0]
 8012dc2:	2b00      	cmp	r3, #0
 8012dc4:	d102      	bne.n	8012dcc <LinkedListAdd+0x28>
    {
        list->First = element;
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	683a      	ldr	r2, [r7, #0]
 8012dca:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 8012dcc:	687b      	ldr	r3, [r7, #4]
 8012dce:	685b      	ldr	r3, [r3, #4]
 8012dd0:	2b00      	cmp	r3, #0
 8012dd2:	d003      	beq.n	8012ddc <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	685b      	ldr	r3, [r3, #4]
 8012dd8:	683a      	ldr	r2, [r7, #0]
 8012dda:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 8012ddc:	683b      	ldr	r3, [r7, #0]
 8012dde:	2200      	movs	r2, #0
 8012de0:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	683a      	ldr	r2, [r7, #0]
 8012de6:	605a      	str	r2, [r3, #4]

    return true;
 8012de8:	2301      	movs	r3, #1
}
 8012dea:	4618      	mov	r0, r3
 8012dec:	370c      	adds	r7, #12
 8012dee:	46bd      	mov	sp, r7
 8012df0:	bc80      	pop	{r7}
 8012df2:	4770      	bx	lr

08012df4 <LinkedListGetPrevious>:
 * \param [in]    list           - List
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 8012df4:	b480      	push	{r7}
 8012df6:	b085      	sub	sp, #20
 8012df8:	af00      	add	r7, sp, #0
 8012dfa:	6078      	str	r0, [r7, #4]
 8012dfc:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	2b00      	cmp	r3, #0
 8012e02:	d002      	beq.n	8012e0a <LinkedListGetPrevious+0x16>
 8012e04:	683b      	ldr	r3, [r7, #0]
 8012e06:	2b00      	cmp	r3, #0
 8012e08:	d101      	bne.n	8012e0e <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 8012e0a:	2300      	movs	r3, #0
 8012e0c:	e016      	b.n	8012e3c <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	681b      	ldr	r3, [r3, #0]
 8012e12:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 8012e14:	683a      	ldr	r2, [r7, #0]
 8012e16:	68fb      	ldr	r3, [r7, #12]
 8012e18:	429a      	cmp	r2, r3
 8012e1a:	d00c      	beq.n	8012e36 <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8012e1c:	e002      	b.n	8012e24 <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 8012e1e:	68fb      	ldr	r3, [r7, #12]
 8012e20:	681b      	ldr	r3, [r3, #0]
 8012e22:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8012e24:	68fb      	ldr	r3, [r7, #12]
 8012e26:	2b00      	cmp	r3, #0
 8012e28:	d007      	beq.n	8012e3a <LinkedListGetPrevious+0x46>
 8012e2a:	68fb      	ldr	r3, [r7, #12]
 8012e2c:	681b      	ldr	r3, [r3, #0]
 8012e2e:	683a      	ldr	r2, [r7, #0]
 8012e30:	429a      	cmp	r2, r3
 8012e32:	d1f4      	bne.n	8012e1e <LinkedListGetPrevious+0x2a>
 8012e34:	e001      	b.n	8012e3a <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 8012e36:	2300      	movs	r3, #0
 8012e38:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 8012e3a:	68fb      	ldr	r3, [r7, #12]
}
 8012e3c:	4618      	mov	r0, r3
 8012e3e:	3714      	adds	r7, #20
 8012e40:	46bd      	mov	sp, r7
 8012e42:	bc80      	pop	{r7}
 8012e44:	4770      	bx	lr

08012e46 <LinkedListRemove>:
 * \param [in]    list           - List where the element shall be removed from.
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 8012e46:	b580      	push	{r7, lr}
 8012e48:	b084      	sub	sp, #16
 8012e4a:	af00      	add	r7, sp, #0
 8012e4c:	6078      	str	r0, [r7, #4]
 8012e4e:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	2b00      	cmp	r3, #0
 8012e54:	d002      	beq.n	8012e5c <LinkedListRemove+0x16>
 8012e56:	683b      	ldr	r3, [r7, #0]
 8012e58:	2b00      	cmp	r3, #0
 8012e5a:	d101      	bne.n	8012e60 <LinkedListRemove+0x1a>
    {
        return false;
 8012e5c:	2300      	movs	r3, #0
 8012e5e:	e020      	b.n	8012ea2 <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 8012e60:	6839      	ldr	r1, [r7, #0]
 8012e62:	6878      	ldr	r0, [r7, #4]
 8012e64:	f7ff ffc6 	bl	8012df4 <LinkedListGetPrevious>
 8012e68:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	681b      	ldr	r3, [r3, #0]
 8012e6e:	683a      	ldr	r2, [r7, #0]
 8012e70:	429a      	cmp	r2, r3
 8012e72:	d103      	bne.n	8012e7c <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 8012e74:	683b      	ldr	r3, [r7, #0]
 8012e76:	681a      	ldr	r2, [r3, #0]
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 8012e7c:	687b      	ldr	r3, [r7, #4]
 8012e7e:	685b      	ldr	r3, [r3, #4]
 8012e80:	683a      	ldr	r2, [r7, #0]
 8012e82:	429a      	cmp	r2, r3
 8012e84:	d102      	bne.n	8012e8c <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	68fa      	ldr	r2, [r7, #12]
 8012e8a:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 8012e8c:	68fb      	ldr	r3, [r7, #12]
 8012e8e:	2b00      	cmp	r3, #0
 8012e90:	d003      	beq.n	8012e9a <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 8012e92:	683b      	ldr	r3, [r7, #0]
 8012e94:	681a      	ldr	r2, [r3, #0]
 8012e96:	68fb      	ldr	r3, [r7, #12]
 8012e98:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 8012e9a:	683b      	ldr	r3, [r7, #0]
 8012e9c:	2200      	movs	r2, #0
 8012e9e:	601a      	str	r2, [r3, #0]

    return true;
 8012ea0:	2301      	movs	r3, #1
}
 8012ea2:	4618      	mov	r0, r3
 8012ea4:	3710      	adds	r7, #16
 8012ea6:	46bd      	mov	sp, r7
 8012ea8:	bd80      	pop	{r7, pc}
	...

08012eac <IsSticky>:
 * \param [in]  cid                - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 8012eac:	b480      	push	{r7}
 8012eae:	b083      	sub	sp, #12
 8012eb0:	af00      	add	r7, sp, #0
 8012eb2:	4603      	mov	r3, r0
 8012eb4:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 8012eb6:	79fb      	ldrb	r3, [r7, #7]
 8012eb8:	2b11      	cmp	r3, #17
 8012eba:	bf8c      	ite	hi
 8012ebc:	2201      	movhi	r2, #1
 8012ebe:	2200      	movls	r2, #0
 8012ec0:	b2d2      	uxtb	r2, r2
 8012ec2:	2a00      	cmp	r2, #0
 8012ec4:	d10d      	bne.n	8012ee2 <IsSticky+0x36>
 8012ec6:	4a0a      	ldr	r2, [pc, #40]	@ (8012ef0 <IsSticky+0x44>)
 8012ec8:	fa22 f303 	lsr.w	r3, r2, r3
 8012ecc:	f003 0301 	and.w	r3, r3, #1
 8012ed0:	2b00      	cmp	r3, #0
 8012ed2:	bf14      	ite	ne
 8012ed4:	2301      	movne	r3, #1
 8012ed6:	2300      	moveq	r3, #0
 8012ed8:	b2db      	uxtb	r3, r3
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	d001      	beq.n	8012ee2 <IsSticky+0x36>
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
 8012ede:	2301      	movs	r3, #1
 8012ee0:	e000      	b.n	8012ee4 <IsSticky+0x38>
        default:
            return false;
 8012ee2:	2300      	movs	r3, #0
    }
}
 8012ee4:	4618      	mov	r0, r3
 8012ee6:	370c      	adds	r7, #12
 8012ee8:	46bd      	mov	sp, r7
 8012eea:	bc80      	pop	{r7}
 8012eec:	4770      	bx	lr
 8012eee:	bf00      	nop
 8012ef0:	00020720 	.word	0x00020720

08012ef4 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 8012ef4:	b580      	push	{r7, lr}
 8012ef6:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 8012ef8:	f44f 7203 	mov.w	r2, #524	@ 0x20c
 8012efc:	2100      	movs	r1, #0
 8012efe:	4804      	ldr	r0, [pc, #16]	@ (8012f10 <LoRaMacCommandsInit+0x1c>)
 8012f00:	f004 f852 	bl	8016fa8 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 8012f04:	4802      	ldr	r0, [pc, #8]	@ (8012f10 <LoRaMacCommandsInit+0x1c>)
 8012f06:	f7ff ff38 	bl	8012d7a <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 8012f0a:	2300      	movs	r3, #0
}
 8012f0c:	4618      	mov	r0, r3
 8012f0e:	bd80      	pop	{r7, pc}
 8012f10:	20001998 	.word	0x20001998

08012f14 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 8012f14:	b580      	push	{r7, lr}
 8012f16:	b086      	sub	sp, #24
 8012f18:	af00      	add	r7, sp, #0
 8012f1a:	4603      	mov	r3, r0
 8012f1c:	60b9      	str	r1, [r7, #8]
 8012f1e:	607a      	str	r2, [r7, #4]
 8012f20:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 8012f22:	68bb      	ldr	r3, [r7, #8]
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	d101      	bne.n	8012f2c <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8012f28:	2301      	movs	r3, #1
 8012f2a:	e033      	b.n	8012f94 <LoRaMacCommandsAddCmd+0x80>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 8012f2c:	f7ff feea 	bl	8012d04 <MallocNewMacCommandSlot>
 8012f30:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 8012f32:	697b      	ldr	r3, [r7, #20]
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	d101      	bne.n	8012f3c <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 8012f38:	2302      	movs	r3, #2
 8012f3a:	e02b      	b.n	8012f94 <LoRaMacCommandsAddCmd+0x80>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 8012f3c:	6979      	ldr	r1, [r7, #20]
 8012f3e:	4817      	ldr	r0, [pc, #92]	@ (8012f9c <LoRaMacCommandsAddCmd+0x88>)
 8012f40:	f7ff ff30 	bl	8012da4 <LinkedListAdd>
 8012f44:	4603      	mov	r3, r0
 8012f46:	f083 0301 	eor.w	r3, r3, #1
 8012f4a:	b2db      	uxtb	r3, r3
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	d001      	beq.n	8012f54 <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 8012f50:	2305      	movs	r3, #5
 8012f52:	e01f      	b.n	8012f94 <LoRaMacCommandsAddCmd+0x80>
    }

    // Set Values
    newCmd->CID = cid;
 8012f54:	697b      	ldr	r3, [r7, #20]
 8012f56:	7bfa      	ldrb	r2, [r7, #15]
 8012f58:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 8012f5a:	697b      	ldr	r3, [r7, #20]
 8012f5c:	687a      	ldr	r2, [r7, #4]
 8012f5e:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 8012f60:	697b      	ldr	r3, [r7, #20]
 8012f62:	3305      	adds	r3, #5
 8012f64:	687a      	ldr	r2, [r7, #4]
 8012f66:	b292      	uxth	r2, r2
 8012f68:	68b9      	ldr	r1, [r7, #8]
 8012f6a:	4618      	mov	r0, r3
 8012f6c:	f003 ffe1 	bl	8016f32 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 8012f70:	7bfb      	ldrb	r3, [r7, #15]
 8012f72:	4618      	mov	r0, r3
 8012f74:	f7ff ff9a 	bl	8012eac <IsSticky>
 8012f78:	4603      	mov	r3, r0
 8012f7a:	461a      	mov	r2, r3
 8012f7c:	697b      	ldr	r3, [r7, #20]
 8012f7e:	731a      	strb	r2, [r3, #12]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 8012f80:	4b06      	ldr	r3, [pc, #24]	@ (8012f9c <LoRaMacCommandsAddCmd+0x88>)
 8012f82:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	4413      	add	r3, r2
 8012f8a:	3301      	adds	r3, #1
 8012f8c:	4a03      	ldr	r2, [pc, #12]	@ (8012f9c <LoRaMacCommandsAddCmd+0x88>)
 8012f8e:	f8c2 3208 	str.w	r3, [r2, #520]	@ 0x208

    return LORAMAC_COMMANDS_SUCCESS;
 8012f92:	2300      	movs	r3, #0
}
 8012f94:	4618      	mov	r0, r3
 8012f96:	3718      	adds	r7, #24
 8012f98:	46bd      	mov	sp, r7
 8012f9a:	bd80      	pop	{r7, pc}
 8012f9c:	20001998 	.word	0x20001998

08012fa0 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 8012fa0:	b580      	push	{r7, lr}
 8012fa2:	b082      	sub	sp, #8
 8012fa4:	af00      	add	r7, sp, #0
 8012fa6:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	2b00      	cmp	r3, #0
 8012fac:	d101      	bne.n	8012fb2 <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8012fae:	2301      	movs	r3, #1
 8012fb0:	e021      	b.n	8012ff6 <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 8012fb2:	6879      	ldr	r1, [r7, #4]
 8012fb4:	4812      	ldr	r0, [pc, #72]	@ (8013000 <LoRaMacCommandsRemoveCmd+0x60>)
 8012fb6:	f7ff ff46 	bl	8012e46 <LinkedListRemove>
 8012fba:	4603      	mov	r3, r0
 8012fbc:	f083 0301 	eor.w	r3, r3, #1
 8012fc0:	b2db      	uxtb	r3, r3
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	d001      	beq.n	8012fca <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8012fc6:	2303      	movs	r3, #3
 8012fc8:	e015      	b.n	8012ff6 <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 8012fca:	4b0d      	ldr	r3, [pc, #52]	@ (8013000 <LoRaMacCommandsRemoveCmd+0x60>)
 8012fcc:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	689b      	ldr	r3, [r3, #8]
 8012fd4:	1ad3      	subs	r3, r2, r3
 8012fd6:	3b01      	subs	r3, #1
 8012fd8:	4a09      	ldr	r2, [pc, #36]	@ (8013000 <LoRaMacCommandsRemoveCmd+0x60>)
 8012fda:	f8c2 3208 	str.w	r3, [r2, #520]	@ 0x208

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 8012fde:	6878      	ldr	r0, [r7, #4]
 8012fe0:	f7ff feb8 	bl	8012d54 <FreeMacCommandSlot>
 8012fe4:	4603      	mov	r3, r0
 8012fe6:	f083 0301 	eor.w	r3, r3, #1
 8012fea:	b2db      	uxtb	r3, r3
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	d001      	beq.n	8012ff4 <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 8012ff0:	2305      	movs	r3, #5
 8012ff2:	e000      	b.n	8012ff6 <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8012ff4:	2300      	movs	r3, #0
}
 8012ff6:	4618      	mov	r0, r3
 8012ff8:	3708      	adds	r7, #8
 8012ffa:	46bd      	mov	sp, r7
 8012ffc:	bd80      	pop	{r7, pc}
 8012ffe:	bf00      	nop
 8013000:	20001998 	.word	0x20001998

08013004 <LoRaMacCommandsRemoveNoneStickyCmds>:
    }
    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 8013004:	b580      	push	{r7, lr}
 8013006:	b082      	sub	sp, #8
 8013008:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 801300a:	4b0f      	ldr	r3, [pc, #60]	@ (8013048 <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 801300c:	681b      	ldr	r3, [r3, #0]
 801300e:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8013010:	e012      	b.n	8013038 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	7b1b      	ldrb	r3, [r3, #12]
 8013016:	f083 0301 	eor.w	r3, r3, #1
 801301a:	b2db      	uxtb	r3, r3
 801301c:	2b00      	cmp	r3, #0
 801301e:	d008      	beq.n	8013032 <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	681b      	ldr	r3, [r3, #0]
 8013024:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 8013026:	6878      	ldr	r0, [r7, #4]
 8013028:	f7ff ffba 	bl	8012fa0 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 801302c:	683b      	ldr	r3, [r7, #0]
 801302e:	607b      	str	r3, [r7, #4]
 8013030:	e002      	b.n	8013038 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	681b      	ldr	r3, [r3, #0]
 8013036:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	2b00      	cmp	r3, #0
 801303c:	d1e9      	bne.n	8013012 <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 801303e:	2300      	movs	r3, #0
}
 8013040:	4618      	mov	r0, r3
 8013042:	3708      	adds	r7, #8
 8013044:	46bd      	mov	sp, r7
 8013046:	bd80      	pop	{r7, pc}
 8013048:	20001998 	.word	0x20001998

0801304c <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 801304c:	b580      	push	{r7, lr}
 801304e:	b082      	sub	sp, #8
 8013050:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8013052:	4b0e      	ldr	r3, [pc, #56]	@ (801308c <LoRaMacCommandsRemoveStickyAnsCmds+0x40>)
 8013054:	681b      	ldr	r3, [r3, #0]
 8013056:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8013058:	e00f      	b.n	801307a <LoRaMacCommandsRemoveStickyAnsCmds+0x2e>
    {
        nexElement = curElement->Next;
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	681b      	ldr	r3, [r3, #0]
 801305e:	603b      	str	r3, [r7, #0]
        if( IsSticky( curElement->CID ) == true )
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	791b      	ldrb	r3, [r3, #4]
 8013064:	4618      	mov	r0, r3
 8013066:	f7ff ff21 	bl	8012eac <IsSticky>
 801306a:	4603      	mov	r3, r0
 801306c:	2b00      	cmp	r3, #0
 801306e:	d002      	beq.n	8013076 <LoRaMacCommandsRemoveStickyAnsCmds+0x2a>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 8013070:	6878      	ldr	r0, [r7, #4]
 8013072:	f7ff ff95 	bl	8012fa0 <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 8013076:	683b      	ldr	r3, [r7, #0]
 8013078:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	2b00      	cmp	r3, #0
 801307e:	d1ec      	bne.n	801305a <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8013080:	2300      	movs	r3, #0
}
 8013082:	4618      	mov	r0, r3
 8013084:	3708      	adds	r7, #8
 8013086:	46bd      	mov	sp, r7
 8013088:	bd80      	pop	{r7, pc}
 801308a:	bf00      	nop
 801308c:	20001998 	.word	0x20001998

08013090 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 8013090:	b480      	push	{r7}
 8013092:	b083      	sub	sp, #12
 8013094:	af00      	add	r7, sp, #0
 8013096:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	2b00      	cmp	r3, #0
 801309c:	d101      	bne.n	80130a2 <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801309e:	2301      	movs	r3, #1
 80130a0:	e005      	b.n	80130ae <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 80130a2:	4b05      	ldr	r3, [pc, #20]	@ (80130b8 <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 80130a4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 80130ac:	2300      	movs	r3, #0
}
 80130ae:	4618      	mov	r0, r3
 80130b0:	370c      	adds	r7, #12
 80130b2:	46bd      	mov	sp, r7
 80130b4:	bc80      	pop	{r7}
 80130b6:	4770      	bx	lr
 80130b8:	20001998 	.word	0x20001998

080130bc <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 80130bc:	b580      	push	{r7, lr}
 80130be:	b088      	sub	sp, #32
 80130c0:	af00      	add	r7, sp, #0
 80130c2:	60f8      	str	r0, [r7, #12]
 80130c4:	60b9      	str	r1, [r7, #8]
 80130c6:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 80130c8:	4b25      	ldr	r3, [pc, #148]	@ (8013160 <LoRaMacCommandsSerializeCmds+0xa4>)
 80130ca:	681b      	ldr	r3, [r3, #0]
 80130cc:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 80130ce:	2300      	movs	r3, #0
 80130d0:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 80130d2:	687b      	ldr	r3, [r7, #4]
 80130d4:	2b00      	cmp	r3, #0
 80130d6:	d002      	beq.n	80130de <LoRaMacCommandsSerializeCmds+0x22>
 80130d8:	68bb      	ldr	r3, [r7, #8]
 80130da:	2b00      	cmp	r3, #0
 80130dc:	d126      	bne.n	801312c <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80130de:	2301      	movs	r3, #1
 80130e0:	e039      	b.n	8013156 <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 80130e2:	7efb      	ldrb	r3, [r7, #27]
 80130e4:	68fa      	ldr	r2, [r7, #12]
 80130e6:	1ad2      	subs	r2, r2, r3
 80130e8:	69fb      	ldr	r3, [r7, #28]
 80130ea:	689b      	ldr	r3, [r3, #8]
 80130ec:	3301      	adds	r3, #1
 80130ee:	429a      	cmp	r2, r3
 80130f0:	d320      	bcc.n	8013134 <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 80130f2:	7efb      	ldrb	r3, [r7, #27]
 80130f4:	1c5a      	adds	r2, r3, #1
 80130f6:	76fa      	strb	r2, [r7, #27]
 80130f8:	461a      	mov	r2, r3
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	4413      	add	r3, r2
 80130fe:	69fa      	ldr	r2, [r7, #28]
 8013100:	7912      	ldrb	r2, [r2, #4]
 8013102:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 8013104:	7efb      	ldrb	r3, [r7, #27]
 8013106:	687a      	ldr	r2, [r7, #4]
 8013108:	18d0      	adds	r0, r2, r3
 801310a:	69fb      	ldr	r3, [r7, #28]
 801310c:	1d59      	adds	r1, r3, #5
 801310e:	69fb      	ldr	r3, [r7, #28]
 8013110:	689b      	ldr	r3, [r3, #8]
 8013112:	b29b      	uxth	r3, r3
 8013114:	461a      	mov	r2, r3
 8013116:	f003 ff0c 	bl	8016f32 <memcpy1>
            itr += curElement->PayloadSize;
 801311a:	69fb      	ldr	r3, [r7, #28]
 801311c:	689b      	ldr	r3, [r3, #8]
 801311e:	b2da      	uxtb	r2, r3
 8013120:	7efb      	ldrb	r3, [r7, #27]
 8013122:	4413      	add	r3, r2
 8013124:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 8013126:	69fb      	ldr	r3, [r7, #28]
 8013128:	681b      	ldr	r3, [r3, #0]
 801312a:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 801312c:	69fb      	ldr	r3, [r7, #28]
 801312e:	2b00      	cmp	r3, #0
 8013130:	d1d7      	bne.n	80130e2 <LoRaMacCommandsSerializeCmds+0x26>
 8013132:	e009      	b.n	8013148 <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 8013134:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 8013136:	e007      	b.n	8013148 <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 8013138:	69fb      	ldr	r3, [r7, #28]
 801313a:	681b      	ldr	r3, [r3, #0]
 801313c:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 801313e:	69f8      	ldr	r0, [r7, #28]
 8013140:	f7ff ff2e 	bl	8012fa0 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 8013144:	697b      	ldr	r3, [r7, #20]
 8013146:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8013148:	69fb      	ldr	r3, [r7, #28]
 801314a:	2b00      	cmp	r3, #0
 801314c:	d1f4      	bne.n	8013138 <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 801314e:	68b8      	ldr	r0, [r7, #8]
 8013150:	f7ff ff9e 	bl	8013090 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 8013154:	2300      	movs	r3, #0
}
 8013156:	4618      	mov	r0, r3
 8013158:	3720      	adds	r7, #32
 801315a:	46bd      	mov	sp, r7
 801315c:	bd80      	pop	{r7, pc}
 801315e:	bf00      	nop
 8013160:	20001998 	.word	0x20001998

08013164 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
 8013164:	b480      	push	{r7}
 8013166:	b085      	sub	sp, #20
 8013168:	af00      	add	r7, sp, #0
 801316a:	6078      	str	r0, [r7, #4]
    if( cmdsPending == NULL )
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	2b00      	cmp	r3, #0
 8013170:	d101      	bne.n	8013176 <LoRaMacCommandsStickyCmdsPending+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8013172:	2301      	movs	r3, #1
 8013174:	e016      	b.n	80131a4 <LoRaMacCommandsStickyCmdsPending+0x40>
    }
    MacCommand_t* curElement;
    curElement = CommandsCtx.MacCommandList.First;
 8013176:	4b0e      	ldr	r3, [pc, #56]	@ (80131b0 <LoRaMacCommandsStickyCmdsPending+0x4c>)
 8013178:	681b      	ldr	r3, [r3, #0]
 801317a:	60fb      	str	r3, [r7, #12]

    *cmdsPending = false;
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	2200      	movs	r2, #0
 8013180:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 8013182:	e00b      	b.n	801319c <LoRaMacCommandsStickyCmdsPending+0x38>
    {
        if( curElement->IsSticky == true )
 8013184:	68fb      	ldr	r3, [r7, #12]
 8013186:	7b1b      	ldrb	r3, [r3, #12]
 8013188:	2b00      	cmp	r3, #0
 801318a:	d004      	beq.n	8013196 <LoRaMacCommandsStickyCmdsPending+0x32>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	2201      	movs	r2, #1
 8013190:	701a      	strb	r2, [r3, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 8013192:	2300      	movs	r3, #0
 8013194:	e006      	b.n	80131a4 <LoRaMacCommandsStickyCmdsPending+0x40>
        }
        curElement = curElement->Next;
 8013196:	68fb      	ldr	r3, [r7, #12]
 8013198:	681b      	ldr	r3, [r3, #0]
 801319a:	60fb      	str	r3, [r7, #12]
    while( curElement != NULL )
 801319c:	68fb      	ldr	r3, [r7, #12]
 801319e:	2b00      	cmp	r3, #0
 80131a0:	d1f0      	bne.n	8013184 <LoRaMacCommandsStickyCmdsPending+0x20>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80131a2:	2300      	movs	r3, #0
}
 80131a4:	4618      	mov	r0, r3
 80131a6:	3714      	adds	r7, #20
 80131a8:	46bd      	mov	sp, r7
 80131aa:	bc80      	pop	{r7}
 80131ac:	4770      	bx	lr
 80131ae:	bf00      	nop
 80131b0:	20001998 	.word	0x20001998

080131b4 <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 80131b4:	b480      	push	{r7}
 80131b6:	b085      	sub	sp, #20
 80131b8:	af00      	add	r7, sp, #0
 80131ba:	4603      	mov	r3, r0
 80131bc:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 80131be:	2300      	movs	r3, #0
 80131c0:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 80131c2:	79fb      	ldrb	r3, [r7, #7]
 80131c4:	3b02      	subs	r3, #2
 80131c6:	2b11      	cmp	r3, #17
 80131c8:	d850      	bhi.n	801326c <LoRaMacCommandsGetCmdSize+0xb8>
 80131ca:	a201      	add	r2, pc, #4	@ (adr r2, 80131d0 <LoRaMacCommandsGetCmdSize+0x1c>)
 80131cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80131d0:	08013219 	.word	0x08013219
 80131d4:	0801321f 	.word	0x0801321f
 80131d8:	08013225 	.word	0x08013225
 80131dc:	0801322b 	.word	0x0801322b
 80131e0:	08013231 	.word	0x08013231
 80131e4:	08013237 	.word	0x08013237
 80131e8:	0801323d 	.word	0x0801323d
 80131ec:	08013243 	.word	0x08013243
 80131f0:	08013249 	.word	0x08013249
 80131f4:	0801326d 	.word	0x0801326d
 80131f8:	0801326d 	.word	0x0801326d
 80131fc:	0801324f 	.word	0x0801324f
 8013200:	0801326d 	.word	0x0801326d
 8013204:	0801326d 	.word	0x0801326d
 8013208:	08013255 	.word	0x08013255
 801320c:	0801325b 	.word	0x0801325b
 8013210:	08013261 	.word	0x08013261
 8013214:	08013267 	.word	0x08013267
    {
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 8013218:	2303      	movs	r3, #3
 801321a:	73fb      	strb	r3, [r7, #15]
            break;
 801321c:	e027      	b.n	801326e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 801321e:	2305      	movs	r3, #5
 8013220:	73fb      	strb	r3, [r7, #15]
            break;
 8013222:	e024      	b.n	801326e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 8013224:	2302      	movs	r3, #2
 8013226:	73fb      	strb	r3, [r7, #15]
            break;
 8013228:	e021      	b.n	801326e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 801322a:	2305      	movs	r3, #5
 801322c:	73fb      	strb	r3, [r7, #15]
            break;
 801322e:	e01e      	b.n	801326e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 8013230:	2301      	movs	r3, #1
 8013232:	73fb      	strb	r3, [r7, #15]
            break;
 8013234:	e01b      	b.n	801326e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 8013236:	2306      	movs	r3, #6
 8013238:	73fb      	strb	r3, [r7, #15]
            break;
 801323a:	e018      	b.n	801326e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 801323c:	2302      	movs	r3, #2
 801323e:	73fb      	strb	r3, [r7, #15]
            break;
 8013240:	e015      	b.n	801326e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 8013242:	2302      	movs	r3, #2
 8013244:	73fb      	strb	r3, [r7, #15]
            break;
 8013246:	e012      	b.n	801326e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 8013248:	2305      	movs	r3, #5
 801324a:	73fb      	strb	r3, [r7, #15]
            break;
 801324c:	e00f      	b.n	801326e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 801324e:	2306      	movs	r3, #6
 8013250:	73fb      	strb	r3, [r7, #15]
            break;
 8013252:	e00c      	b.n	801326e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 8013254:	2301      	movs	r3, #1
 8013256:	73fb      	strb	r3, [r7, #15]
            break;
 8013258:	e009      	b.n	801326e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 801325a:	2305      	movs	r3, #5
 801325c:	73fb      	strb	r3, [r7, #15]
            break;
 801325e:	e006      	b.n	801326e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 8013260:	2304      	movs	r3, #4
 8013262:	73fb      	strb	r3, [r7, #15]
            break;
 8013264:	e003      	b.n	801326e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 8013266:	2304      	movs	r3, #4
 8013268:	73fb      	strb	r3, [r7, #15]
            break;
 801326a:	e000      	b.n	801326e <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 801326c:	bf00      	nop
        }
    }
    return cidSize;
 801326e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013270:	4618      	mov	r0, r3
 8013272:	3714      	adds	r7, #20
 8013274:	46bd      	mov	sp, r7
 8013276:	bc80      	pop	{r7}
 8013278:	4770      	bx	lr
 801327a:	bf00      	nop

0801327c <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 801327c:	b480      	push	{r7}
 801327e:	b083      	sub	sp, #12
 8013280:	af00      	add	r7, sp, #0
 8013282:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	4a07      	ldr	r2, [pc, #28]	@ (80132a4 <IncreaseBufferPointer+0x28>)
 8013288:	4293      	cmp	r3, r2
 801328a:	d102      	bne.n	8013292 <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 801328c:	4b06      	ldr	r3, [pc, #24]	@ (80132a8 <IncreaseBufferPointer+0x2c>)
 801328e:	607b      	str	r3, [r7, #4]
 8013290:	e002      	b.n	8013298 <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	3304      	adds	r3, #4
 8013296:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 8013298:	687b      	ldr	r3, [r7, #4]
}
 801329a:	4618      	mov	r0, r3
 801329c:	370c      	adds	r7, #12
 801329e:	46bd      	mov	sp, r7
 80132a0:	bc80      	pop	{r7}
 80132a2:	4770      	bx	lr
 80132a4:	20001bc0 	.word	0x20001bc0
 80132a8:	20001bb0 	.word	0x20001bb0

080132ac <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 80132ac:	b480      	push	{r7}
 80132ae:	b083      	sub	sp, #12
 80132b0:	af00      	add	r7, sp, #0
 80132b2:	4603      	mov	r3, r0
 80132b4:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 80132b6:	79fb      	ldrb	r3, [r7, #7]
 80132b8:	2b00      	cmp	r3, #0
 80132ba:	d101      	bne.n	80132c0 <IsListEmpty+0x14>
    {
        return true;
 80132bc:	2301      	movs	r3, #1
 80132be:	e000      	b.n	80132c2 <IsListEmpty+0x16>
    }
    return false;
 80132c0:	2300      	movs	r3, #0
}
 80132c2:	4618      	mov	r0, r3
 80132c4:	370c      	adds	r7, #12
 80132c6:	46bd      	mov	sp, r7
 80132c8:	bc80      	pop	{r7}
 80132ca:	4770      	bx	lr

080132cc <IsListFull>:

static bool IsListFull( uint8_t count )
{
 80132cc:	b480      	push	{r7}
 80132ce:	b083      	sub	sp, #12
 80132d0:	af00      	add	r7, sp, #0
 80132d2:	4603      	mov	r3, r0
 80132d4:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 80132d6:	79fb      	ldrb	r3, [r7, #7]
 80132d8:	2b04      	cmp	r3, #4
 80132da:	d901      	bls.n	80132e0 <IsListFull+0x14>
    {
        return true;
 80132dc:	2301      	movs	r3, #1
 80132de:	e000      	b.n	80132e2 <IsListFull+0x16>
    }
    return false;
 80132e0:	2300      	movs	r3, #0
}
 80132e2:	4618      	mov	r0, r3
 80132e4:	370c      	adds	r7, #12
 80132e6:	46bd      	mov	sp, r7
 80132e8:	bc80      	pop	{r7}
 80132ea:	4770      	bx	lr

080132ec <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 80132ec:	b580      	push	{r7, lr}
 80132ee:	b086      	sub	sp, #24
 80132f0:	af00      	add	r7, sp, #0
 80132f2:	4603      	mov	r3, r0
 80132f4:	60b9      	str	r1, [r7, #8]
 80132f6:	607a      	str	r2, [r7, #4]
 80132f8:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 80132fa:	68bb      	ldr	r3, [r7, #8]
 80132fc:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80132fe:	4b13      	ldr	r3, [pc, #76]	@ (801334c <GetElement+0x60>)
 8013300:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013304:	4618      	mov	r0, r3
 8013306:	f7ff ffd1 	bl	80132ac <IsListEmpty>
 801330a:	4603      	mov	r3, r0
 801330c:	2b00      	cmp	r3, #0
 801330e:	d001      	beq.n	8013314 <GetElement+0x28>
    {
        return NULL;
 8013310:	2300      	movs	r3, #0
 8013312:	e017      	b.n	8013344 <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8013314:	2300      	movs	r3, #0
 8013316:	74fb      	strb	r3, [r7, #19]
 8013318:	e00d      	b.n	8013336 <GetElement+0x4a>
    {
        if( element->Request == request )
 801331a:	697b      	ldr	r3, [r7, #20]
 801331c:	781b      	ldrb	r3, [r3, #0]
 801331e:	7bfa      	ldrb	r2, [r7, #15]
 8013320:	429a      	cmp	r2, r3
 8013322:	d101      	bne.n	8013328 <GetElement+0x3c>
        {
            // We have found the element
            return element;
 8013324:	697b      	ldr	r3, [r7, #20]
 8013326:	e00d      	b.n	8013344 <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 8013328:	6978      	ldr	r0, [r7, #20]
 801332a:	f7ff ffa7 	bl	801327c <IncreaseBufferPointer>
 801332e:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8013330:	7cfb      	ldrb	r3, [r7, #19]
 8013332:	3301      	adds	r3, #1
 8013334:	74fb      	strb	r3, [r7, #19]
 8013336:	4b05      	ldr	r3, [pc, #20]	@ (801334c <GetElement+0x60>)
 8013338:	f893 3020 	ldrb.w	r3, [r3, #32]
 801333c:	7cfa      	ldrb	r2, [r7, #19]
 801333e:	429a      	cmp	r2, r3
 8013340:	d3eb      	bcc.n	801331a <GetElement+0x2e>
    }

    return NULL;
 8013342:	2300      	movs	r3, #0
}
 8013344:	4618      	mov	r0, r3
 8013346:	3718      	adds	r7, #24
 8013348:	46bd      	mov	sp, r7
 801334a:	bd80      	pop	{r7, pc}
 801334c:	20001ba4 	.word	0x20001ba4

08013350 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 8013350:	b580      	push	{r7, lr}
 8013352:	b082      	sub	sp, #8
 8013354:	af00      	add	r7, sp, #0
 8013356:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 8013358:	4a0c      	ldr	r2, [pc, #48]	@ (801338c <LoRaMacConfirmQueueInit+0x3c>)
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 801335e:	4b0b      	ldr	r3, [pc, #44]	@ (801338c <LoRaMacConfirmQueueInit+0x3c>)
 8013360:	2200      	movs	r2, #0
 8013362:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8013366:	4b09      	ldr	r3, [pc, #36]	@ (801338c <LoRaMacConfirmQueueInit+0x3c>)
 8013368:	4a09      	ldr	r2, [pc, #36]	@ (8013390 <LoRaMacConfirmQueueInit+0x40>)
 801336a:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 801336c:	4b07      	ldr	r3, [pc, #28]	@ (801338c <LoRaMacConfirmQueueInit+0x3c>)
 801336e:	4a08      	ldr	r2, [pc, #32]	@ (8013390 <LoRaMacConfirmQueueInit+0x40>)
 8013370:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 8013372:	2214      	movs	r2, #20
 8013374:	21ff      	movs	r1, #255	@ 0xff
 8013376:	4806      	ldr	r0, [pc, #24]	@ (8013390 <LoRaMacConfirmQueueInit+0x40>)
 8013378:	f003 fe16 	bl	8016fa8 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801337c:	4b03      	ldr	r3, [pc, #12]	@ (801338c <LoRaMacConfirmQueueInit+0x3c>)
 801337e:	2201      	movs	r2, #1
 8013380:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 8013384:	bf00      	nop
 8013386:	3708      	adds	r7, #8
 8013388:	46bd      	mov	sp, r7
 801338a:	bd80      	pop	{r7, pc}
 801338c:	20001ba4 	.word	0x20001ba4
 8013390:	20001bb0 	.word	0x20001bb0

08013394 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 8013394:	b580      	push	{r7, lr}
 8013396:	b082      	sub	sp, #8
 8013398:	af00      	add	r7, sp, #0
 801339a:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 801339c:	4b19      	ldr	r3, [pc, #100]	@ (8013404 <LoRaMacConfirmQueueAdd+0x70>)
 801339e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80133a2:	4618      	mov	r0, r3
 80133a4:	f7ff ff92 	bl	80132cc <IsListFull>
 80133a8:	4603      	mov	r3, r0
 80133aa:	2b00      	cmp	r3, #0
 80133ac:	d001      	beq.n	80133b2 <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 80133ae:	2300      	movs	r3, #0
 80133b0:	e024      	b.n	80133fc <LoRaMacConfirmQueueAdd+0x68>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 80133b2:	4b14      	ldr	r3, [pc, #80]	@ (8013404 <LoRaMacConfirmQueueAdd+0x70>)
 80133b4:	689b      	ldr	r3, [r3, #8]
 80133b6:	687a      	ldr	r2, [r7, #4]
 80133b8:	7812      	ldrb	r2, [r2, #0]
 80133ba:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 80133bc:	4b11      	ldr	r3, [pc, #68]	@ (8013404 <LoRaMacConfirmQueueAdd+0x70>)
 80133be:	689b      	ldr	r3, [r3, #8]
 80133c0:	687a      	ldr	r2, [r7, #4]
 80133c2:	7852      	ldrb	r2, [r2, #1]
 80133c4:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 80133c6:	4b0f      	ldr	r3, [pc, #60]	@ (8013404 <LoRaMacConfirmQueueAdd+0x70>)
 80133c8:	689b      	ldr	r3, [r3, #8]
 80133ca:	687a      	ldr	r2, [r7, #4]
 80133cc:	78d2      	ldrb	r2, [r2, #3]
 80133ce:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
 80133d0:	4b0c      	ldr	r3, [pc, #48]	@ (8013404 <LoRaMacConfirmQueueAdd+0x70>)
 80133d2:	689b      	ldr	r3, [r3, #8]
 80133d4:	687a      	ldr	r2, [r7, #4]
 80133d6:	7892      	ldrb	r2, [r2, #2]
 80133d8:	709a      	strb	r2, [r3, #2]
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 80133da:	4b0a      	ldr	r3, [pc, #40]	@ (8013404 <LoRaMacConfirmQueueAdd+0x70>)
 80133dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80133e0:	3301      	adds	r3, #1
 80133e2:	b2da      	uxtb	r2, r3
 80133e4:	4b07      	ldr	r3, [pc, #28]	@ (8013404 <LoRaMacConfirmQueueAdd+0x70>)
 80133e6:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 80133ea:	4b06      	ldr	r3, [pc, #24]	@ (8013404 <LoRaMacConfirmQueueAdd+0x70>)
 80133ec:	689b      	ldr	r3, [r3, #8]
 80133ee:	4618      	mov	r0, r3
 80133f0:	f7ff ff44 	bl	801327c <IncreaseBufferPointer>
 80133f4:	4603      	mov	r3, r0
 80133f6:	4a03      	ldr	r2, [pc, #12]	@ (8013404 <LoRaMacConfirmQueueAdd+0x70>)
 80133f8:	6093      	str	r3, [r2, #8]

    return true;
 80133fa:	2301      	movs	r3, #1
}
 80133fc:	4618      	mov	r0, r3
 80133fe:	3708      	adds	r7, #8
 8013400:	46bd      	mov	sp, r7
 8013402:	bd80      	pop	{r7, pc}
 8013404:	20001ba4 	.word	0x20001ba4

08013408 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 8013408:	b580      	push	{r7, lr}
 801340a:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 801340c:	4b0e      	ldr	r3, [pc, #56]	@ (8013448 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 801340e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013412:	4618      	mov	r0, r3
 8013414:	f7ff ff4a 	bl	80132ac <IsListEmpty>
 8013418:	4603      	mov	r3, r0
 801341a:	2b00      	cmp	r3, #0
 801341c:	d001      	beq.n	8013422 <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 801341e:	2300      	movs	r3, #0
 8013420:	e010      	b.n	8013444 <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 8013422:	4b09      	ldr	r3, [pc, #36]	@ (8013448 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8013424:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013428:	3b01      	subs	r3, #1
 801342a:	b2da      	uxtb	r2, r3
 801342c:	4b06      	ldr	r3, [pc, #24]	@ (8013448 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 801342e:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8013432:	4b05      	ldr	r3, [pc, #20]	@ (8013448 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8013434:	685b      	ldr	r3, [r3, #4]
 8013436:	4618      	mov	r0, r3
 8013438:	f7ff ff20 	bl	801327c <IncreaseBufferPointer>
 801343c:	4603      	mov	r3, r0
 801343e:	4a02      	ldr	r2, [pc, #8]	@ (8013448 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8013440:	6053      	str	r3, [r2, #4]

    return true;
 8013442:	2301      	movs	r3, #1
}
 8013444:	4618      	mov	r0, r3
 8013446:	bd80      	pop	{r7, pc}
 8013448:	20001ba4 	.word	0x20001ba4

0801344c <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 801344c:	b580      	push	{r7, lr}
 801344e:	b084      	sub	sp, #16
 8013450:	af00      	add	r7, sp, #0
 8013452:	4603      	mov	r3, r0
 8013454:	460a      	mov	r2, r1
 8013456:	71fb      	strb	r3, [r7, #7]
 8013458:	4613      	mov	r3, r2
 801345a:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 801345c:	2300      	movs	r3, #0
 801345e:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8013460:	4b10      	ldr	r3, [pc, #64]	@ (80134a4 <LoRaMacConfirmQueueSetStatus+0x58>)
 8013462:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013466:	4618      	mov	r0, r3
 8013468:	f7ff ff20 	bl	80132ac <IsListEmpty>
 801346c:	4603      	mov	r3, r0
 801346e:	f083 0301 	eor.w	r3, r3, #1
 8013472:	b2db      	uxtb	r3, r3
 8013474:	2b00      	cmp	r3, #0
 8013476:	d011      	beq.n	801349c <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8013478:	4b0a      	ldr	r3, [pc, #40]	@ (80134a4 <LoRaMacConfirmQueueSetStatus+0x58>)
 801347a:	6859      	ldr	r1, [r3, #4]
 801347c:	4b09      	ldr	r3, [pc, #36]	@ (80134a4 <LoRaMacConfirmQueueSetStatus+0x58>)
 801347e:	689a      	ldr	r2, [r3, #8]
 8013480:	79bb      	ldrb	r3, [r7, #6]
 8013482:	4618      	mov	r0, r3
 8013484:	f7ff ff32 	bl	80132ec <GetElement>
 8013488:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 801348a:	68fb      	ldr	r3, [r7, #12]
 801348c:	2b00      	cmp	r3, #0
 801348e:	d005      	beq.n	801349c <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 8013490:	68fb      	ldr	r3, [r7, #12]
 8013492:	79fa      	ldrb	r2, [r7, #7]
 8013494:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 8013496:	68fb      	ldr	r3, [r7, #12]
 8013498:	2201      	movs	r2, #1
 801349a:	709a      	strb	r2, [r3, #2]
        }
    }
}
 801349c:	bf00      	nop
 801349e:	3710      	adds	r7, #16
 80134a0:	46bd      	mov	sp, r7
 80134a2:	bd80      	pop	{r7, pc}
 80134a4:	20001ba4 	.word	0x20001ba4

080134a8 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 80134a8:	b580      	push	{r7, lr}
 80134aa:	b084      	sub	sp, #16
 80134ac:	af00      	add	r7, sp, #0
 80134ae:	4603      	mov	r3, r0
 80134b0:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 80134b2:	2300      	movs	r3, #0
 80134b4:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 80134b6:	4b10      	ldr	r3, [pc, #64]	@ (80134f8 <LoRaMacConfirmQueueGetStatus+0x50>)
 80134b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80134bc:	4618      	mov	r0, r3
 80134be:	f7ff fef5 	bl	80132ac <IsListEmpty>
 80134c2:	4603      	mov	r3, r0
 80134c4:	f083 0301 	eor.w	r3, r3, #1
 80134c8:	b2db      	uxtb	r3, r3
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	d00e      	beq.n	80134ec <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 80134ce:	4b0a      	ldr	r3, [pc, #40]	@ (80134f8 <LoRaMacConfirmQueueGetStatus+0x50>)
 80134d0:	6859      	ldr	r1, [r3, #4]
 80134d2:	4b09      	ldr	r3, [pc, #36]	@ (80134f8 <LoRaMacConfirmQueueGetStatus+0x50>)
 80134d4:	689a      	ldr	r2, [r3, #8]
 80134d6:	79fb      	ldrb	r3, [r7, #7]
 80134d8:	4618      	mov	r0, r3
 80134da:	f7ff ff07 	bl	80132ec <GetElement>
 80134de:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 80134e0:	68fb      	ldr	r3, [r7, #12]
 80134e2:	2b00      	cmp	r3, #0
 80134e4:	d002      	beq.n	80134ec <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 80134e6:	68fb      	ldr	r3, [r7, #12]
 80134e8:	785b      	ldrb	r3, [r3, #1]
 80134ea:	e000      	b.n	80134ee <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 80134ec:	2301      	movs	r3, #1
}
 80134ee:	4618      	mov	r0, r3
 80134f0:	3710      	adds	r7, #16
 80134f2:	46bd      	mov	sp, r7
 80134f4:	bd80      	pop	{r7, pc}
 80134f6:	bf00      	nop
 80134f8:	20001ba4 	.word	0x20001ba4

080134fc <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 80134fc:	b580      	push	{r7, lr}
 80134fe:	b084      	sub	sp, #16
 8013500:	af00      	add	r7, sp, #0
 8013502:	4603      	mov	r3, r0
 8013504:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 8013506:	4b16      	ldr	r3, [pc, #88]	@ (8013560 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8013508:	685b      	ldr	r3, [r3, #4]
 801350a:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 801350c:	4a14      	ldr	r2, [pc, #80]	@ (8013560 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 801350e:	79fb      	ldrb	r3, [r7, #7]
 8013510:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8013514:	4b12      	ldr	r3, [pc, #72]	@ (8013560 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8013516:	f893 3020 	ldrb.w	r3, [r3, #32]
 801351a:	4618      	mov	r0, r3
 801351c:	f7ff fec6 	bl	80132ac <IsListEmpty>
 8013520:	4603      	mov	r3, r0
 8013522:	f083 0301 	eor.w	r3, r3, #1
 8013526:	b2db      	uxtb	r3, r3
 8013528:	2b00      	cmp	r3, #0
 801352a:	d015      	beq.n	8013558 <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 801352c:	68fb      	ldr	r3, [r7, #12]
 801352e:	79fa      	ldrb	r2, [r7, #7]
 8013530:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 8013532:	68fb      	ldr	r3, [r7, #12]
 8013534:	78db      	ldrb	r3, [r3, #3]
 8013536:	f083 0301 	eor.w	r3, r3, #1
 801353a:	b2db      	uxtb	r3, r3
 801353c:	2b00      	cmp	r3, #0
 801353e:	d002      	beq.n	8013546 <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 8013540:	68fb      	ldr	r3, [r7, #12]
 8013542:	2201      	movs	r2, #1
 8013544:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 8013546:	68f8      	ldr	r0, [r7, #12]
 8013548:	f7ff fe98 	bl	801327c <IncreaseBufferPointer>
 801354c:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 801354e:	4b04      	ldr	r3, [pc, #16]	@ (8013560 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8013550:	689b      	ldr	r3, [r3, #8]
 8013552:	68fa      	ldr	r2, [r7, #12]
 8013554:	429a      	cmp	r2, r3
 8013556:	d1e9      	bne.n	801352c <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 8013558:	bf00      	nop
 801355a:	3710      	adds	r7, #16
 801355c:	46bd      	mov	sp, r7
 801355e:	bd80      	pop	{r7, pc}
 8013560:	20001ba4 	.word	0x20001ba4

08013564 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 8013564:	b580      	push	{r7, lr}
 8013566:	b082      	sub	sp, #8
 8013568:	af00      	add	r7, sp, #0
 801356a:	4603      	mov	r3, r0
 801356c:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 801356e:	4b09      	ldr	r3, [pc, #36]	@ (8013594 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8013570:	6859      	ldr	r1, [r3, #4]
 8013572:	4b08      	ldr	r3, [pc, #32]	@ (8013594 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8013574:	689a      	ldr	r2, [r3, #8]
 8013576:	79fb      	ldrb	r3, [r7, #7]
 8013578:	4618      	mov	r0, r3
 801357a:	f7ff feb7 	bl	80132ec <GetElement>
 801357e:	4603      	mov	r3, r0
 8013580:	2b00      	cmp	r3, #0
 8013582:	d001      	beq.n	8013588 <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 8013584:	2301      	movs	r3, #1
 8013586:	e000      	b.n	801358a <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 8013588:	2300      	movs	r3, #0
}
 801358a:	4618      	mov	r0, r3
 801358c:	3708      	adds	r7, #8
 801358e:	46bd      	mov	sp, r7
 8013590:	bd80      	pop	{r7, pc}
 8013592:	bf00      	nop
 8013594:	20001ba4 	.word	0x20001ba4

08013598 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 8013598:	b580      	push	{r7, lr}
 801359a:	b084      	sub	sp, #16
 801359c:	af00      	add	r7, sp, #0
 801359e:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 80135a0:	4b22      	ldr	r3, [pc, #136]	@ (801362c <LoRaMacConfirmQueueHandleCb+0x94>)
 80135a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80135a6:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 80135a8:	2300      	movs	r3, #0
 80135aa:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 80135ac:	2300      	movs	r3, #0
 80135ae:	73fb      	strb	r3, [r7, #15]
 80135b0:	e032      	b.n	8013618 <LoRaMacConfirmQueueHandleCb+0x80>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 80135b2:	4b1e      	ldr	r3, [pc, #120]	@ (801362c <LoRaMacConfirmQueueHandleCb+0x94>)
 80135b4:	685b      	ldr	r3, [r3, #4]
 80135b6:	781a      	ldrb	r2, [r3, #0]
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 80135bc:	4b1b      	ldr	r3, [pc, #108]	@ (801362c <LoRaMacConfirmQueueHandleCb+0x94>)
 80135be:	685b      	ldr	r3, [r3, #4]
 80135c0:	785a      	ldrb	r2, [r3, #1]
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 80135c6:	4b19      	ldr	r3, [pc, #100]	@ (801362c <LoRaMacConfirmQueueHandleCb+0x94>)
 80135c8:	685b      	ldr	r3, [r3, #4]
 80135ca:	789b      	ldrb	r3, [r3, #2]
 80135cc:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 80135ce:	7b7b      	ldrb	r3, [r7, #13]
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	d005      	beq.n	80135e0 <LoRaMacConfirmQueueHandleCb+0x48>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 80135d4:	4b15      	ldr	r3, [pc, #84]	@ (801362c <LoRaMacConfirmQueueHandleCb+0x94>)
 80135d6:	681b      	ldr	r3, [r3, #0]
 80135d8:	689b      	ldr	r3, [r3, #8]
 80135da:	6878      	ldr	r0, [r7, #4]
 80135dc:	4798      	blx	r3
 80135de:	e00b      	b.n	80135f8 <LoRaMacConfirmQueueHandleCb+0x60>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 80135e0:	4b12      	ldr	r3, [pc, #72]	@ (801362c <LoRaMacConfirmQueueHandleCb+0x94>)
 80135e2:	685b      	ldr	r3, [r3, #4]
 80135e4:	781b      	ldrb	r3, [r3, #0]
 80135e6:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 80135e8:	4b10      	ldr	r3, [pc, #64]	@ (801362c <LoRaMacConfirmQueueHandleCb+0x94>)
 80135ea:	685b      	ldr	r3, [r3, #4]
 80135ec:	785b      	ldrb	r3, [r3, #1]
 80135ee:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 80135f0:	4b0e      	ldr	r3, [pc, #56]	@ (801362c <LoRaMacConfirmQueueHandleCb+0x94>)
 80135f2:	685b      	ldr	r3, [r3, #4]
 80135f4:	78db      	ldrb	r3, [r3, #3]
 80135f6:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 80135f8:	f7ff ff06 	bl	8013408 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 80135fc:	7b7b      	ldrb	r3, [r7, #13]
 80135fe:	f083 0301 	eor.w	r3, r3, #1
 8013602:	b2db      	uxtb	r3, r3
 8013604:	2b00      	cmp	r3, #0
 8013606:	d004      	beq.n	8013612 <LoRaMacConfirmQueueHandleCb+0x7a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 8013608:	f107 0308 	add.w	r3, r7, #8
 801360c:	4618      	mov	r0, r3
 801360e:	f7ff fec1 	bl	8013394 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 8013612:	7bfb      	ldrb	r3, [r7, #15]
 8013614:	3301      	adds	r3, #1
 8013616:	73fb      	strb	r3, [r7, #15]
 8013618:	7bfa      	ldrb	r2, [r7, #15]
 801361a:	7bbb      	ldrb	r3, [r7, #14]
 801361c:	429a      	cmp	r2, r3
 801361e:	d3c8      	bcc.n	80135b2 <LoRaMacConfirmQueueHandleCb+0x1a>
        }
    }
}
 8013620:	bf00      	nop
 8013622:	bf00      	nop
 8013624:	3710      	adds	r7, #16
 8013626:	46bd      	mov	sp, r7
 8013628:	bd80      	pop	{r7, pc}
 801362a:	bf00      	nop
 801362c:	20001ba4 	.word	0x20001ba4

08013630 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 8013630:	b480      	push	{r7}
 8013632:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8013634:	4b03      	ldr	r3, [pc, #12]	@ (8013644 <LoRaMacConfirmQueueGetCnt+0x14>)
 8013636:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 801363a:	4618      	mov	r0, r3
 801363c:	46bd      	mov	sp, r7
 801363e:	bc80      	pop	{r7}
 8013640:	4770      	bx	lr
 8013642:	bf00      	nop
 8013644:	20001ba4 	.word	0x20001ba4

08013648 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 8013648:	b580      	push	{r7, lr}
 801364a:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 801364c:	4b06      	ldr	r3, [pc, #24]	@ (8013668 <LoRaMacConfirmQueueIsFull+0x20>)
 801364e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013652:	4618      	mov	r0, r3
 8013654:	f7ff fe3a 	bl	80132cc <IsListFull>
 8013658:	4603      	mov	r3, r0
 801365a:	2b00      	cmp	r3, #0
 801365c:	d001      	beq.n	8013662 <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 801365e:	2301      	movs	r3, #1
 8013660:	e000      	b.n	8013664 <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 8013662:	2300      	movs	r3, #0
    }
}
 8013664:	4618      	mov	r0, r3
 8013666:	bd80      	pop	{r7, pc}
 8013668:	20001ba4 	.word	0x20001ba4

0801366c <PayloadEncrypt>:
 * \param [in] size             - Size of data
 * \param [in,out] buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 801366c:	b580      	push	{r7, lr}
 801366e:	b08e      	sub	sp, #56	@ 0x38
 8013670:	af00      	add	r7, sp, #0
 8013672:	60f8      	str	r0, [r7, #12]
 8013674:	607b      	str	r3, [r7, #4]
 8013676:	460b      	mov	r3, r1
 8013678:	817b      	strh	r3, [r7, #10]
 801367a:	4613      	mov	r3, r2
 801367c:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 801367e:	68fb      	ldr	r3, [r7, #12]
 8013680:	2b00      	cmp	r3, #0
 8013682:	d101      	bne.n	8013688 <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013684:	2309      	movs	r3, #9
 8013686:	e084      	b.n	8013792 <PayloadEncrypt+0x126>
    }

    uint8_t bufferIndex = 0;
 8013688:	2300      	movs	r3, #0
 801368a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    uint16_t ctr = 1;
 801368e:	2301      	movs	r3, #1
 8013690:	86bb      	strh	r3, [r7, #52]	@ 0x34
    uint8_t sBlock[16] = { 0 };
 8013692:	f107 0320 	add.w	r3, r7, #32
 8013696:	2200      	movs	r2, #0
 8013698:	601a      	str	r2, [r3, #0]
 801369a:	605a      	str	r2, [r3, #4]
 801369c:	609a      	str	r2, [r3, #8]
 801369e:	60da      	str	r2, [r3, #12]
    uint8_t aBlock[16] = { 0 };
 80136a0:	f107 0310 	add.w	r3, r7, #16
 80136a4:	2200      	movs	r2, #0
 80136a6:	601a      	str	r2, [r3, #0]
 80136a8:	605a      	str	r2, [r3, #4]
 80136aa:	609a      	str	r2, [r3, #8]
 80136ac:	60da      	str	r2, [r3, #12]

    aBlock[0] = 0x01;
 80136ae:	2301      	movs	r3, #1
 80136b0:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 80136b2:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80136b6:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	b2db      	uxtb	r3, r3
 80136bc:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 80136be:	687b      	ldr	r3, [r7, #4]
 80136c0:	0a1b      	lsrs	r3, r3, #8
 80136c2:	b2db      	uxtb	r3, r3
 80136c4:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	0c1b      	lsrs	r3, r3, #16
 80136ca:	b2db      	uxtb	r3, r3
 80136cc:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	0e1b      	lsrs	r3, r3, #24
 80136d2:	b2db      	uxtb	r3, r3
 80136d4:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 80136d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80136d8:	b2db      	uxtb	r3, r3
 80136da:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 80136dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80136de:	0a1b      	lsrs	r3, r3, #8
 80136e0:	b2db      	uxtb	r3, r3
 80136e2:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 80136e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80136e6:	0c1b      	lsrs	r3, r3, #16
 80136e8:	b2db      	uxtb	r3, r3
 80136ea:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 80136ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80136ee:	0e1b      	lsrs	r3, r3, #24
 80136f0:	b2db      	uxtb	r3, r3
 80136f2:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 80136f4:	e048      	b.n	8013788 <PayloadEncrypt+0x11c>
    {
        aBlock[15] = ctr & 0xFF;
 80136f6:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80136f8:	b2db      	uxtb	r3, r3
 80136fa:	77fb      	strb	r3, [r7, #31]
        ctr++;
 80136fc:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80136fe:	3301      	adds	r3, #1
 8013700:	86bb      	strh	r3, [r7, #52]	@ 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8013702:	f107 0320 	add.w	r3, r7, #32
 8013706:	7a7a      	ldrb	r2, [r7, #9]
 8013708:	f107 0010 	add.w	r0, r7, #16
 801370c:	2110      	movs	r1, #16
 801370e:	f7f8 fce6 	bl	800c0de <SecureElementAesEncrypt>
 8013712:	4603      	mov	r3, r0
 8013714:	2b00      	cmp	r3, #0
 8013716:	d001      	beq.n	801371c <PayloadEncrypt+0xb0>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013718:	230e      	movs	r3, #14
 801371a:	e03a      	b.n	8013792 <PayloadEncrypt+0x126>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 801371c:	2300      	movs	r3, #0
 801371e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8013722:	e01e      	b.n	8013762 <PayloadEncrypt+0xf6>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8013724:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8013728:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801372c:	4413      	add	r3, r2
 801372e:	461a      	mov	r2, r3
 8013730:	68fb      	ldr	r3, [r7, #12]
 8013732:	4413      	add	r3, r2
 8013734:	7819      	ldrb	r1, [r3, #0]
 8013736:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801373a:	3338      	adds	r3, #56	@ 0x38
 801373c:	443b      	add	r3, r7
 801373e:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8013742:	f897 0037 	ldrb.w	r0, [r7, #55]	@ 0x37
 8013746:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801374a:	4403      	add	r3, r0
 801374c:	4618      	mov	r0, r3
 801374e:	68fb      	ldr	r3, [r7, #12]
 8013750:	4403      	add	r3, r0
 8013752:	404a      	eors	r2, r1
 8013754:	b2d2      	uxtb	r2, r2
 8013756:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8013758:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801375c:	3301      	adds	r3, #1
 801375e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8013762:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8013766:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 801376a:	2a10      	cmp	r2, #16
 801376c:	bfa8      	it	ge
 801376e:	2210      	movge	r2, #16
 8013770:	b212      	sxth	r2, r2
 8013772:	4293      	cmp	r3, r2
 8013774:	dbd6      	blt.n	8013724 <PayloadEncrypt+0xb8>
        }
        size -= 16;
 8013776:	897b      	ldrh	r3, [r7, #10]
 8013778:	3b10      	subs	r3, #16
 801377a:	b29b      	uxth	r3, r3
 801377c:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 801377e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8013782:	3310      	adds	r3, #16
 8013784:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    while( size > 0 )
 8013788:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801378c:	2b00      	cmp	r3, #0
 801378e:	dcb2      	bgt.n	80136f6 <PayloadEncrypt+0x8a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013790:	2300      	movs	r3, #0
}
 8013792:	4618      	mov	r0, r3
 8013794:	3738      	adds	r7, #56	@ 0x38
 8013796:	46bd      	mov	sp, r7
 8013798:	bd80      	pop	{r7, pc}

0801379a <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 801379a:	b490      	push	{r4, r7}
 801379c:	b082      	sub	sp, #8
 801379e:	af00      	add	r7, sp, #0
 80137a0:	4604      	mov	r4, r0
 80137a2:	4608      	mov	r0, r1
 80137a4:	4611      	mov	r1, r2
 80137a6:	461a      	mov	r2, r3
 80137a8:	4623      	mov	r3, r4
 80137aa:	80fb      	strh	r3, [r7, #6]
 80137ac:	4603      	mov	r3, r0
 80137ae:	717b      	strb	r3, [r7, #5]
 80137b0:	460b      	mov	r3, r1
 80137b2:	713b      	strb	r3, [r7, #4]
 80137b4:	4613      	mov	r3, r2
 80137b6:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 80137b8:	69bb      	ldr	r3, [r7, #24]
 80137ba:	2b00      	cmp	r3, #0
 80137bc:	d101      	bne.n	80137c2 <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80137be:	2309      	movs	r3, #9
 80137c0:	e04e      	b.n	8013860 <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 80137c2:	69bb      	ldr	r3, [r7, #24]
 80137c4:	2249      	movs	r2, #73	@ 0x49
 80137c6:	701a      	strb	r2, [r3, #0]
    }
    else
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    /* ST_WORAROUND_END */
    {
        b0[1] = 0x00;
 80137c8:	69bb      	ldr	r3, [r7, #24]
 80137ca:	3301      	adds	r3, #1
 80137cc:	2200      	movs	r2, #0
 80137ce:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 80137d0:	69bb      	ldr	r3, [r7, #24]
 80137d2:	3302      	adds	r3, #2
 80137d4:	2200      	movs	r2, #0
 80137d6:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 80137d8:	69bb      	ldr	r3, [r7, #24]
 80137da:	3303      	adds	r3, #3
 80137dc:	2200      	movs	r2, #0
 80137de:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 80137e0:	69bb      	ldr	r3, [r7, #24]
 80137e2:	3304      	adds	r3, #4
 80137e4:	2200      	movs	r2, #0
 80137e6:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 80137e8:	69bb      	ldr	r3, [r7, #24]
 80137ea:	3305      	adds	r3, #5
 80137ec:	78fa      	ldrb	r2, [r7, #3]
 80137ee:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 80137f0:	69bb      	ldr	r3, [r7, #24]
 80137f2:	3306      	adds	r3, #6
 80137f4:	693a      	ldr	r2, [r7, #16]
 80137f6:	b2d2      	uxtb	r2, r2
 80137f8:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 80137fa:	693b      	ldr	r3, [r7, #16]
 80137fc:	0a1a      	lsrs	r2, r3, #8
 80137fe:	69bb      	ldr	r3, [r7, #24]
 8013800:	3307      	adds	r3, #7
 8013802:	b2d2      	uxtb	r2, r2
 8013804:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8013806:	693b      	ldr	r3, [r7, #16]
 8013808:	0c1a      	lsrs	r2, r3, #16
 801380a:	69bb      	ldr	r3, [r7, #24]
 801380c:	3308      	adds	r3, #8
 801380e:	b2d2      	uxtb	r2, r2
 8013810:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8013812:	693b      	ldr	r3, [r7, #16]
 8013814:	0e1a      	lsrs	r2, r3, #24
 8013816:	69bb      	ldr	r3, [r7, #24]
 8013818:	3309      	adds	r3, #9
 801381a:	b2d2      	uxtb	r2, r2
 801381c:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 801381e:	69bb      	ldr	r3, [r7, #24]
 8013820:	330a      	adds	r3, #10
 8013822:	697a      	ldr	r2, [r7, #20]
 8013824:	b2d2      	uxtb	r2, r2
 8013826:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8013828:	697b      	ldr	r3, [r7, #20]
 801382a:	0a1a      	lsrs	r2, r3, #8
 801382c:	69bb      	ldr	r3, [r7, #24]
 801382e:	330b      	adds	r3, #11
 8013830:	b2d2      	uxtb	r2, r2
 8013832:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8013834:	697b      	ldr	r3, [r7, #20]
 8013836:	0c1a      	lsrs	r2, r3, #16
 8013838:	69bb      	ldr	r3, [r7, #24]
 801383a:	330c      	adds	r3, #12
 801383c:	b2d2      	uxtb	r2, r2
 801383e:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8013840:	697b      	ldr	r3, [r7, #20]
 8013842:	0e1a      	lsrs	r2, r3, #24
 8013844:	69bb      	ldr	r3, [r7, #24]
 8013846:	330d      	adds	r3, #13
 8013848:	b2d2      	uxtb	r2, r2
 801384a:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 801384c:	69bb      	ldr	r3, [r7, #24]
 801384e:	330e      	adds	r3, #14
 8013850:	2200      	movs	r2, #0
 8013852:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 8013854:	69bb      	ldr	r3, [r7, #24]
 8013856:	330f      	adds	r3, #15
 8013858:	88fa      	ldrh	r2, [r7, #6]
 801385a:	b2d2      	uxtb	r2, r2
 801385c:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 801385e:	2300      	movs	r3, #0
}
 8013860:	4618      	mov	r0, r3
 8013862:	3708      	adds	r7, #8
 8013864:	46bd      	mov	sp, r7
 8013866:	bc90      	pop	{r4, r7}
 8013868:	4770      	bx	lr

0801386a <ComputeCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 801386a:	b590      	push	{r4, r7, lr}
 801386c:	b08b      	sub	sp, #44	@ 0x2c
 801386e:	af04      	add	r7, sp, #16
 8013870:	6078      	str	r0, [r7, #4]
 8013872:	4608      	mov	r0, r1
 8013874:	4611      	mov	r1, r2
 8013876:	461a      	mov	r2, r3
 8013878:	4603      	mov	r3, r0
 801387a:	807b      	strh	r3, [r7, #2]
 801387c:	460b      	mov	r3, r1
 801387e:	707b      	strb	r3, [r7, #1]
 8013880:	4613      	mov	r3, r2
 8013882:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	2b00      	cmp	r3, #0
 8013888:	d002      	beq.n	8013890 <ComputeCmacB0+0x26>
 801388a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801388c:	2b00      	cmp	r3, #0
 801388e:	d101      	bne.n	8013894 <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013890:	2309      	movs	r3, #9
 8013892:	e024      	b.n	80138de <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8013894:	887b      	ldrh	r3, [r7, #2]
 8013896:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801389a:	d901      	bls.n	80138a0 <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 801389c:	230d      	movs	r3, #13
 801389e:	e01e      	b.n	80138de <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE];

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 80138a0:	f897 4028 	ldrb.w	r4, [r7, #40]	@ 0x28
 80138a4:	783a      	ldrb	r2, [r7, #0]
 80138a6:	7879      	ldrb	r1, [r7, #1]
 80138a8:	8878      	ldrh	r0, [r7, #2]
 80138aa:	f107 0308 	add.w	r3, r7, #8
 80138ae:	9302      	str	r3, [sp, #8]
 80138b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80138b2:	9301      	str	r3, [sp, #4]
 80138b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80138b6:	9300      	str	r3, [sp, #0]
 80138b8:	4623      	mov	r3, r4
 80138ba:	f7ff ff6e 	bl	801379a <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 80138be:	7879      	ldrb	r1, [r7, #1]
 80138c0:	887a      	ldrh	r2, [r7, #2]
 80138c2:	f107 0008 	add.w	r0, r7, #8
 80138c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80138c8:	9300      	str	r3, [sp, #0]
 80138ca:	460b      	mov	r3, r1
 80138cc:	6879      	ldr	r1, [r7, #4]
 80138ce:	f7f8 fbb9 	bl	800c044 <SecureElementComputeAesCmac>
 80138d2:	4603      	mov	r3, r0
 80138d4:	2b00      	cmp	r3, #0
 80138d6:	d001      	beq.n	80138dc <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80138d8:	230e      	movs	r3, #14
 80138da:	e000      	b.n	80138de <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 80138dc:	2300      	movs	r3, #0
}
 80138de:	4618      	mov	r0, r3
 80138e0:	371c      	adds	r7, #28
 80138e2:	46bd      	mov	sp, r7
 80138e4:	bd90      	pop	{r4, r7, pc}

080138e6 <VerifyCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in] expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 80138e6:	b590      	push	{r4, r7, lr}
 80138e8:	b0cd      	sub	sp, #308	@ 0x134
 80138ea:	af04      	add	r7, sp, #16
 80138ec:	f507 7490 	add.w	r4, r7, #288	@ 0x120
 80138f0:	f5a4 748e 	sub.w	r4, r4, #284	@ 0x11c
 80138f4:	6020      	str	r0, [r4, #0]
 80138f6:	460c      	mov	r4, r1
 80138f8:	4610      	mov	r0, r2
 80138fa:	4619      	mov	r1, r3
 80138fc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013900:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8013904:	4622      	mov	r2, r4
 8013906:	801a      	strh	r2, [r3, #0]
 8013908:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801390c:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 8013910:	4602      	mov	r2, r0
 8013912:	701a      	strb	r2, [r3, #0]
 8013914:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013918:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 801391c:	460a      	mov	r2, r1
 801391e:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 8013920:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013924:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8013928:	681b      	ldr	r3, [r3, #0]
 801392a:	2b00      	cmp	r3, #0
 801392c:	d101      	bne.n	8013932 <VerifyCmacB0+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801392e:	2309      	movs	r3, #9
 8013930:	e063      	b.n	80139fa <VerifyCmacB0+0x114>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8013932:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013936:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 801393a:	881b      	ldrh	r3, [r3, #0]
 801393c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013940:	d901      	bls.n	8013946 <VerifyCmacB0+0x60>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8013942:	230d      	movs	r3, #13
 8013944:	e059      	b.n	80139fa <VerifyCmacB0+0x114>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8013946:	f107 030c 	add.w	r3, r7, #12
 801394a:	f44f 7288 	mov.w	r2, #272	@ 0x110
 801394e:	2100      	movs	r1, #0
 8013950:	4618      	mov	r0, r3
 8013952:	f003 fb29 	bl	8016fa8 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8013956:	f897 4130 	ldrb.w	r4, [r7, #304]	@ 0x130
 801395a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801395e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8013962:	781a      	ldrb	r2, [r3, #0]
 8013964:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013968:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 801396c:	7819      	ldrb	r1, [r3, #0]
 801396e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013972:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8013976:	8818      	ldrh	r0, [r3, #0]
 8013978:	f107 030c 	add.w	r3, r7, #12
 801397c:	9302      	str	r3, [sp, #8]
 801397e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8013982:	9301      	str	r3, [sp, #4]
 8013984:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8013988:	9300      	str	r3, [sp, #0]
 801398a:	4623      	mov	r3, r4
 801398c:	f7ff ff05 	bl	801379a <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8013990:	f107 030c 	add.w	r3, r7, #12
 8013994:	3310      	adds	r3, #16
 8013996:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 801399a:	f5a2 728f 	sub.w	r2, r2, #286	@ 0x11e
 801399e:	8812      	ldrh	r2, [r2, #0]
 80139a0:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 80139a4:	f5a1 718e 	sub.w	r1, r1, #284	@ 0x11c
 80139a8:	6809      	ldr	r1, [r1, #0]
 80139aa:	4618      	mov	r0, r3
 80139ac:	f003 fac1 	bl	8016f32 <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 80139b0:	2306      	movs	r3, #6
 80139b2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 80139b6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80139ba:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 80139be:	881b      	ldrh	r3, [r3, #0]
 80139c0:	3310      	adds	r3, #16
 80139c2:	b299      	uxth	r1, r3
 80139c4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80139c8:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 80139cc:	781b      	ldrb	r3, [r3, #0]
 80139ce:	f107 000c 	add.w	r0, r7, #12
 80139d2:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 80139d6:	f7f8 fb53 	bl	800c080 <SecureElementVerifyAesCmac>
 80139da:	4603      	mov	r3, r0
 80139dc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 80139e0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	d101      	bne.n	80139ec <VerifyCmacB0+0x106>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 80139e8:	2300      	movs	r3, #0
 80139ea:	e006      	b.n	80139fa <VerifyCmacB0+0x114>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 80139ec:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80139f0:	2b01      	cmp	r3, #1
 80139f2:	d101      	bne.n	80139f8 <VerifyCmacB0+0x112>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 80139f4:	2301      	movs	r3, #1
 80139f6:	e000      	b.n	80139fa <VerifyCmacB0+0x114>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80139f8:	230e      	movs	r3, #14
}
 80139fa:	4618      	mov	r0, r3
 80139fc:	f507 7792 	add.w	r7, r7, #292	@ 0x124
 8013a00:	46bd      	mov	sp, r7
 8013a02:	bd90      	pop	{r4, r7, pc}

08013a04 <GetKeyAddrItem>:
 * \param [in] addrID         - Address identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 8013a04:	b480      	push	{r7}
 8013a06:	b085      	sub	sp, #20
 8013a08:	af00      	add	r7, sp, #0
 8013a0a:	4603      	mov	r3, r0
 8013a0c:	6039      	str	r1, [r7, #0]
 8013a0e:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8013a10:	2300      	movs	r3, #0
 8013a12:	73fb      	strb	r3, [r7, #15]
 8013a14:	e011      	b.n	8013a3a <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 8013a16:	7bfb      	ldrb	r3, [r7, #15]
 8013a18:	4a0c      	ldr	r2, [pc, #48]	@ (8013a4c <GetKeyAddrItem+0x48>)
 8013a1a:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8013a1e:	79fa      	ldrb	r2, [r7, #7]
 8013a20:	429a      	cmp	r2, r3
 8013a22:	d107      	bne.n	8013a34 <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 8013a24:	7bfb      	ldrb	r3, [r7, #15]
 8013a26:	009b      	lsls	r3, r3, #2
 8013a28:	4a08      	ldr	r2, [pc, #32]	@ (8013a4c <GetKeyAddrItem+0x48>)
 8013a2a:	441a      	add	r2, r3
 8013a2c:	683b      	ldr	r3, [r7, #0]
 8013a2e:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 8013a30:	2300      	movs	r3, #0
 8013a32:	e006      	b.n	8013a42 <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8013a34:	7bfb      	ldrb	r3, [r7, #15]
 8013a36:	3301      	adds	r3, #1
 8013a38:	73fb      	strb	r3, [r7, #15]
 8013a3a:	7bfb      	ldrb	r3, [r7, #15]
 8013a3c:	2b01      	cmp	r3, #1
 8013a3e:	d9ea      	bls.n	8013a16 <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 8013a40:	230b      	movs	r3, #11
}
 8013a42:	4618      	mov	r0, r3
 8013a44:	3714      	adds	r7, #20
 8013a46:	46bd      	mov	sp, r7
 8013a48:	bc80      	pop	{r7}
 8013a4a:	4770      	bx	lr
 8013a4c:	20000108 	.word	0x20000108

08013a50 <DeriveSessionKey10x>:
 * \param [in] netID          - Network Identifier
 * \param [in] deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 8013a50:	b580      	push	{r7, lr}
 8013a52:	b088      	sub	sp, #32
 8013a54:	af00      	add	r7, sp, #0
 8013a56:	60b9      	str	r1, [r7, #8]
 8013a58:	607a      	str	r2, [r7, #4]
 8013a5a:	461a      	mov	r2, r3
 8013a5c:	4603      	mov	r3, r0
 8013a5e:	73fb      	strb	r3, [r7, #15]
 8013a60:	4613      	mov	r3, r2
 8013a62:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 8013a64:	f107 0310 	add.w	r3, r7, #16
 8013a68:	2200      	movs	r2, #0
 8013a6a:	601a      	str	r2, [r3, #0]
 8013a6c:	605a      	str	r2, [r3, #4]
 8013a6e:	609a      	str	r2, [r3, #8]
 8013a70:	60da      	str	r2, [r3, #12]

    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
    switch( keyID )
 8013a72:	7bfb      	ldrb	r3, [r7, #15]
 8013a74:	2b02      	cmp	r3, #2
 8013a76:	d002      	beq.n	8013a7e <DeriveSessionKey10x+0x2e>
 8013a78:	2b03      	cmp	r3, #3
 8013a7a:	d003      	beq.n	8013a84 <DeriveSessionKey10x+0x34>
 8013a7c:	e005      	b.n	8013a8a <DeriveSessionKey10x+0x3a>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case NWK_S_KEY:
#endif /* USE_LRWAN_1_1_X_CRYPTO */
            compBase[0] = 0x01;
 8013a7e:	2301      	movs	r3, #1
 8013a80:	743b      	strb	r3, [r7, #16]
            break;
 8013a82:	e004      	b.n	8013a8e <DeriveSessionKey10x+0x3e>
        case APP_S_KEY:
            compBase[0] = 0x02;
 8013a84:	2302      	movs	r3, #2
 8013a86:	743b      	strb	r3, [r7, #16]
            break;
 8013a88:	e001      	b.n	8013a8e <DeriveSessionKey10x+0x3e>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8013a8a:	230a      	movs	r3, #10
 8013a8c:	e02a      	b.n	8013ae4 <DeriveSessionKey10x+0x94>
    }
   /* ST_WORKAROUND_END */

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 8013a8e:	68bb      	ldr	r3, [r7, #8]
 8013a90:	b2db      	uxtb	r3, r3
 8013a92:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 8013a94:	68bb      	ldr	r3, [r7, #8]
 8013a96:	0a1b      	lsrs	r3, r3, #8
 8013a98:	b2db      	uxtb	r3, r3
 8013a9a:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 8013a9c:	68bb      	ldr	r3, [r7, #8]
 8013a9e:	0c1b      	lsrs	r3, r3, #16
 8013aa0:	b2db      	uxtb	r3, r3
 8013aa2:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	b2db      	uxtb	r3, r3
 8013aa8:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 8013aaa:	687b      	ldr	r3, [r7, #4]
 8013aac:	0a1b      	lsrs	r3, r3, #8
 8013aae:	b2db      	uxtb	r3, r3
 8013ab0:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 8013ab2:	687b      	ldr	r3, [r7, #4]
 8013ab4:	0c1b      	lsrs	r3, r3, #16
 8013ab6:	b2db      	uxtb	r3, r3
 8013ab8:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 8013aba:	89bb      	ldrh	r3, [r7, #12]
 8013abc:	b2db      	uxtb	r3, r3
 8013abe:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 8013ac0:	89bb      	ldrh	r3, [r7, #12]
 8013ac2:	0a1b      	lsrs	r3, r3, #8
 8013ac4:	b29b      	uxth	r3, r3
 8013ac6:	b2db      	uxtb	r3, r3
 8013ac8:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8013aca:	7bfa      	ldrb	r2, [r7, #15]
 8013acc:	f107 0310 	add.w	r3, r7, #16
 8013ad0:	2101      	movs	r1, #1
 8013ad2:	4618      	mov	r0, r3
 8013ad4:	f7f8 fb6a 	bl	800c1ac <SecureElementDeriveAndStoreKey>
 8013ad8:	4603      	mov	r3, r0
 8013ada:	2b00      	cmp	r3, #0
 8013adc:	d001      	beq.n	8013ae2 <DeriveSessionKey10x+0x92>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013ade:	230e      	movs	r3, #14
 8013ae0:	e000      	b.n	8013ae4 <DeriveSessionKey10x+0x94>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013ae2:	2300      	movs	r3, #0
}
 8013ae4:	4618      	mov	r0, r3
 8013ae6:	3720      	adds	r7, #32
 8013ae8:	46bd      	mov	sp, r7
 8013aea:	bd80      	pop	{r7, pc}

08013aec <GetLastFcntDown>:
 * \param [in]    lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 8013aec:	b480      	push	{r7}
 8013aee:	b083      	sub	sp, #12
 8013af0:	af00      	add	r7, sp, #0
 8013af2:	4603      	mov	r3, r0
 8013af4:	6039      	str	r1, [r7, #0]
 8013af6:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 8013af8:	683b      	ldr	r3, [r7, #0]
 8013afa:	2b00      	cmp	r3, #0
 8013afc:	d101      	bne.n	8013b02 <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013afe:	2309      	movs	r3, #9
 8013b00:	e03b      	b.n	8013b7a <GetLastFcntDown+0x8e>
    }
    switch( fCntID )
 8013b02:	79fb      	ldrb	r3, [r7, #7]
 8013b04:	3b01      	subs	r3, #1
 8013b06:	2b03      	cmp	r3, #3
 8013b08:	d834      	bhi.n	8013b74 <GetLastFcntDown+0x88>
 8013b0a:	a201      	add	r2, pc, #4	@ (adr r2, 8013b10 <GetLastFcntDown+0x24>)
 8013b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013b10:	08013b21 	.word	0x08013b21
 8013b14:	08013b39 	.word	0x08013b39
 8013b18:	08013b51 	.word	0x08013b51
 8013b1c:	08013b69 	.word	0x08013b69
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 8013b20:	4b18      	ldr	r3, [pc, #96]	@ (8013b84 <GetLastFcntDown+0x98>)
 8013b22:	681b      	ldr	r3, [r3, #0]
 8013b24:	691a      	ldr	r2, [r3, #16]
 8013b26:	683b      	ldr	r3, [r7, #0]
 8013b28:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.NFCntDown;
 8013b2a:	4b16      	ldr	r3, [pc, #88]	@ (8013b84 <GetLastFcntDown+0x98>)
 8013b2c:	681a      	ldr	r2, [r3, #0]
 8013b2e:	4b15      	ldr	r3, [pc, #84]	@ (8013b84 <GetLastFcntDown+0x98>)
 8013b30:	681b      	ldr	r3, [r3, #0]
 8013b32:	6912      	ldr	r2, [r2, #16]
 8013b34:	621a      	str	r2, [r3, #32]
            break;
 8013b36:	e01f      	b.n	8013b78 <GetLastFcntDown+0x8c>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 8013b38:	4b12      	ldr	r3, [pc, #72]	@ (8013b84 <GetLastFcntDown+0x98>)
 8013b3a:	681b      	ldr	r3, [r3, #0]
 8013b3c:	695a      	ldr	r2, [r3, #20]
 8013b3e:	683b      	ldr	r3, [r7, #0]
 8013b40:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.AFCntDown;
 8013b42:	4b10      	ldr	r3, [pc, #64]	@ (8013b84 <GetLastFcntDown+0x98>)
 8013b44:	681a      	ldr	r2, [r3, #0]
 8013b46:	4b0f      	ldr	r3, [pc, #60]	@ (8013b84 <GetLastFcntDown+0x98>)
 8013b48:	681b      	ldr	r3, [r3, #0]
 8013b4a:	6952      	ldr	r2, [r2, #20]
 8013b4c:	621a      	str	r2, [r3, #32]
            break;
 8013b4e:	e013      	b.n	8013b78 <GetLastFcntDown+0x8c>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 8013b50:	4b0c      	ldr	r3, [pc, #48]	@ (8013b84 <GetLastFcntDown+0x98>)
 8013b52:	681b      	ldr	r3, [r3, #0]
 8013b54:	699a      	ldr	r2, [r3, #24]
 8013b56:	683b      	ldr	r3, [r7, #0]
 8013b58:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8013b5a:	4b0a      	ldr	r3, [pc, #40]	@ (8013b84 <GetLastFcntDown+0x98>)
 8013b5c:	681a      	ldr	r2, [r3, #0]
 8013b5e:	4b09      	ldr	r3, [pc, #36]	@ (8013b84 <GetLastFcntDown+0x98>)
 8013b60:	681b      	ldr	r3, [r3, #0]
 8013b62:	6992      	ldr	r2, [r2, #24]
 8013b64:	621a      	str	r2, [r3, #32]
            break;
 8013b66:	e007      	b.n	8013b78 <GetLastFcntDown+0x8c>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 8013b68:	4b06      	ldr	r3, [pc, #24]	@ (8013b84 <GetLastFcntDown+0x98>)
 8013b6a:	681b      	ldr	r3, [r3, #0]
 8013b6c:	69da      	ldr	r2, [r3, #28]
 8013b6e:	683b      	ldr	r3, [r7, #0]
 8013b70:	601a      	str	r2, [r3, #0]
            break;
 8013b72:	e001      	b.n	8013b78 <GetLastFcntDown+0x8c>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8013b74:	2305      	movs	r3, #5
 8013b76:	e000      	b.n	8013b7a <GetLastFcntDown+0x8e>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8013b78:	2300      	movs	r3, #0
}
 8013b7a:	4618      	mov	r0, r3
 8013b7c:	370c      	adds	r7, #12
 8013b7e:	46bd      	mov	sp, r7
 8013b80:	bc80      	pop	{r7}
 8013b82:	4770      	bx	lr
 8013b84:	20001bc8 	.word	0x20001bc8

08013b88 <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8013b88:	b580      	push	{r7, lr}
 8013b8a:	b084      	sub	sp, #16
 8013b8c:	af00      	add	r7, sp, #0
 8013b8e:	4603      	mov	r3, r0
 8013b90:	6039      	str	r1, [r7, #0]
 8013b92:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 8013b94:	2300      	movs	r3, #0
 8013b96:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 8013b98:	f107 020c 	add.w	r2, r7, #12
 8013b9c:	79fb      	ldrb	r3, [r7, #7]
 8013b9e:	4611      	mov	r1, r2
 8013ba0:	4618      	mov	r0, r3
 8013ba2:	f7ff ffa3 	bl	8013aec <GetLastFcntDown>
 8013ba6:	4603      	mov	r3, r0
 8013ba8:	2b00      	cmp	r3, #0
 8013baa:	d001      	beq.n	8013bb0 <CheckFCntDown+0x28>
    {
        return false;
 8013bac:	2300      	movs	r3, #0
 8013bae:	e00a      	b.n	8013bc6 <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 8013bb0:	68fb      	ldr	r3, [r7, #12]
 8013bb2:	683a      	ldr	r2, [r7, #0]
 8013bb4:	429a      	cmp	r2, r3
 8013bb6:	d803      	bhi.n	8013bc0 <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITAL_VALUE ) )
 8013bb8:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 8013bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013bbe:	d101      	bne.n	8013bc4 <CheckFCntDown+0x3c>
    {
        return true;
 8013bc0:	2301      	movs	r3, #1
 8013bc2:	e000      	b.n	8013bc6 <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 8013bc4:	2300      	movs	r3, #0
    }
}
 8013bc6:	4618      	mov	r0, r3
 8013bc8:	3710      	adds	r7, #16
 8013bca:	46bd      	mov	sp, r7
 8013bcc:	bd80      	pop	{r7, pc}
	...

08013bd0 <UpdateFCntDown>:
 * \param [in]    currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8013bd0:	b480      	push	{r7}
 8013bd2:	b083      	sub	sp, #12
 8013bd4:	af00      	add	r7, sp, #0
 8013bd6:	4603      	mov	r3, r0
 8013bd8:	6039      	str	r1, [r7, #0]
 8013bda:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 8013bdc:	79fb      	ldrb	r3, [r7, #7]
 8013bde:	3b01      	subs	r3, #1
 8013be0:	2b03      	cmp	r3, #3
 8013be2:	d81f      	bhi.n	8013c24 <UpdateFCntDown+0x54>
 8013be4:	a201      	add	r2, pc, #4	@ (adr r2, 8013bec <UpdateFCntDown+0x1c>)
 8013be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013bea:	bf00      	nop
 8013bec:	08013bfd 	.word	0x08013bfd
 8013bf0:	08013c07 	.word	0x08013c07
 8013bf4:	08013c11 	.word	0x08013c11
 8013bf8:	08013c1b 	.word	0x08013c1b
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 8013bfc:	4b0c      	ldr	r3, [pc, #48]	@ (8013c30 <UpdateFCntDown+0x60>)
 8013bfe:	681b      	ldr	r3, [r3, #0]
 8013c00:	683a      	ldr	r2, [r7, #0]
 8013c02:	611a      	str	r2, [r3, #16]
            break;
 8013c04:	e00f      	b.n	8013c26 <UpdateFCntDown+0x56>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 8013c06:	4b0a      	ldr	r3, [pc, #40]	@ (8013c30 <UpdateFCntDown+0x60>)
 8013c08:	681b      	ldr	r3, [r3, #0]
 8013c0a:	683a      	ldr	r2, [r7, #0]
 8013c0c:	615a      	str	r2, [r3, #20]
            break;
 8013c0e:	e00a      	b.n	8013c26 <UpdateFCntDown+0x56>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 8013c10:	4b07      	ldr	r3, [pc, #28]	@ (8013c30 <UpdateFCntDown+0x60>)
 8013c12:	681b      	ldr	r3, [r3, #0]
 8013c14:	683a      	ldr	r2, [r7, #0]
 8013c16:	619a      	str	r2, [r3, #24]
            break;
 8013c18:	e005      	b.n	8013c26 <UpdateFCntDown+0x56>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 8013c1a:	4b05      	ldr	r3, [pc, #20]	@ (8013c30 <UpdateFCntDown+0x60>)
 8013c1c:	681b      	ldr	r3, [r3, #0]
 8013c1e:	683a      	ldr	r2, [r7, #0]
 8013c20:	61da      	str	r2, [r3, #28]
            break;
 8013c22:	e000      	b.n	8013c26 <UpdateFCntDown+0x56>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 8013c24:	bf00      	nop
    }
}
 8013c26:	bf00      	nop
 8013c28:	370c      	adds	r7, #12
 8013c2a:	46bd      	mov	sp, r7
 8013c2c:	bc80      	pop	{r7}
 8013c2e:	4770      	bx	lr
 8013c30:	20001bc8 	.word	0x20001bc8

08013c34 <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 8013c34:	b480      	push	{r7}
 8013c36:	b083      	sub	sp, #12
 8013c38:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 8013c3a:	4b18      	ldr	r3, [pc, #96]	@ (8013c9c <ResetFCnts+0x68>)
 8013c3c:	681b      	ldr	r3, [r3, #0]
 8013c3e:	2200      	movs	r2, #0
 8013c40:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8013c42:	4b16      	ldr	r3, [pc, #88]	@ (8013c9c <ResetFCnts+0x68>)
 8013c44:	681b      	ldr	r3, [r3, #0]
 8013c46:	f04f 32ff 	mov.w	r2, #4294967295
 8013c4a:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8013c4c:	4b13      	ldr	r3, [pc, #76]	@ (8013c9c <ResetFCnts+0x68>)
 8013c4e:	681b      	ldr	r3, [r3, #0]
 8013c50:	f04f 32ff 	mov.w	r2, #4294967295
 8013c54:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 8013c56:	4b11      	ldr	r3, [pc, #68]	@ (8013c9c <ResetFCnts+0x68>)
 8013c58:	681b      	ldr	r3, [r3, #0]
 8013c5a:	f04f 32ff 	mov.w	r2, #4294967295
 8013c5e:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8013c60:	4b0e      	ldr	r3, [pc, #56]	@ (8013c9c <ResetFCnts+0x68>)
 8013c62:	681a      	ldr	r2, [r3, #0]
 8013c64:	4b0d      	ldr	r3, [pc, #52]	@ (8013c9c <ResetFCnts+0x68>)
 8013c66:	681b      	ldr	r3, [r3, #0]
 8013c68:	6992      	ldr	r2, [r2, #24]
 8013c6a:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8013c6c:	2300      	movs	r3, #0
 8013c6e:	607b      	str	r3, [r7, #4]
 8013c70:	e00b      	b.n	8013c8a <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
 8013c72:	4b0a      	ldr	r3, [pc, #40]	@ (8013c9c <ResetFCnts+0x68>)
 8013c74:	681a      	ldr	r2, [r3, #0]
 8013c76:	687b      	ldr	r3, [r7, #4]
 8013c78:	3306      	adds	r3, #6
 8013c7a:	009b      	lsls	r3, r3, #2
 8013c7c:	4413      	add	r3, r2
 8013c7e:	f04f 32ff 	mov.w	r2, #4294967295
 8013c82:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	3301      	adds	r3, #1
 8013c88:	607b      	str	r3, [r7, #4]
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	2b00      	cmp	r3, #0
 8013c8e:	ddf0      	ble.n	8013c72 <ResetFCnts+0x3e>
    }
}
 8013c90:	bf00      	nop
 8013c92:	bf00      	nop
 8013c94:	370c      	adds	r7, #12
 8013c96:	46bd      	mov	sp, r7
 8013c98:	bc80      	pop	{r7}
 8013c9a:	4770      	bx	lr
 8013c9c:	20001bc8 	.word	0x20001bc8

08013ca0 <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 8013ca0:	b580      	push	{r7, lr}
 8013ca2:	b082      	sub	sp, #8
 8013ca4:	af00      	add	r7, sp, #0
 8013ca6:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	2b00      	cmp	r3, #0
 8013cac:	d101      	bne.n	8013cb2 <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 8013cae:	2308      	movs	r3, #8
 8013cb0:	e01c      	b.n	8013cec <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 8013cb2:	4a10      	ldr	r2, [pc, #64]	@ (8013cf4 <LoRaMacCryptoInit+0x54>)
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 8013cb8:	4b0e      	ldr	r3, [pc, #56]	@ (8013cf4 <LoRaMacCryptoInit+0x54>)
 8013cba:	681b      	ldr	r3, [r3, #0]
 8013cbc:	2228      	movs	r2, #40	@ 0x28
 8013cbe:	2100      	movs	r1, #0
 8013cc0:	4618      	mov	r0, r3
 8013cc2:	f003 f971 	bl	8016fa8 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 8013cc6:	4b0b      	ldr	r3, [pc, #44]	@ (8013cf4 <LoRaMacCryptoInit+0x54>)
 8013cc8:	681b      	ldr	r3, [r3, #0]
 8013cca:	2201      	movs	r2, #1
 8013ccc:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 8013cce:	4b09      	ldr	r3, [pc, #36]	@ (8013cf4 <LoRaMacCryptoInit+0x54>)
 8013cd0:	681b      	ldr	r3, [r3, #0]
 8013cd2:	2201      	movs	r2, #1
 8013cd4:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 8013cd6:	4b07      	ldr	r3, [pc, #28]	@ (8013cf4 <LoRaMacCryptoInit+0x54>)
 8013cd8:	681b      	ldr	r3, [r3, #0]
 8013cda:	2201      	movs	r2, #1
 8013cdc:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 8013cde:	4b05      	ldr	r3, [pc, #20]	@ (8013cf4 <LoRaMacCryptoInit+0x54>)
 8013ce0:	681b      	ldr	r3, [r3, #0]
 8013ce2:	2200      	movs	r2, #0
 8013ce4:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 8013ce6:	f7ff ffa5 	bl	8013c34 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 8013cea:	2300      	movs	r3, #0
}
 8013cec:	4618      	mov	r0, r3
 8013cee:	3708      	adds	r7, #8
 8013cf0:	46bd      	mov	sp, r7
 8013cf2:	bd80      	pop	{r7, pc}
 8013cf4:	20001bc8 	.word	0x20001bc8

08013cf8 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 8013cf8:	b480      	push	{r7}
 8013cfa:	b083      	sub	sp, #12
 8013cfc:	af00      	add	r7, sp, #0
 8013cfe:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 8013d00:	4b04      	ldr	r3, [pc, #16]	@ (8013d14 <LoRaMacCryptoSetLrWanVersion+0x1c>)
 8013d02:	681b      	ldr	r3, [r3, #0]
 8013d04:	687a      	ldr	r2, [r7, #4]
 8013d06:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8013d08:	2300      	movs	r3, #0
}
 8013d0a:	4618      	mov	r0, r3
 8013d0c:	370c      	adds	r7, #12
 8013d0e:	46bd      	mov	sp, r7
 8013d10:	bc80      	pop	{r7}
 8013d12:	4770      	bx	lr
 8013d14:	20001bc8 	.word	0x20001bc8

08013d18 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 8013d18:	b480      	push	{r7}
 8013d1a:	b083      	sub	sp, #12
 8013d1c:	af00      	add	r7, sp, #0
 8013d1e:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	2b00      	cmp	r3, #0
 8013d24:	d101      	bne.n	8013d2a <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013d26:	2309      	movs	r3, #9
 8013d28:	e006      	b.n	8013d38 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 8013d2a:	4b06      	ldr	r3, [pc, #24]	@ (8013d44 <LoRaMacCryptoGetFCntUp+0x2c>)
 8013d2c:	681b      	ldr	r3, [r3, #0]
 8013d2e:	68db      	ldr	r3, [r3, #12]
 8013d30:	1c5a      	adds	r2, r3, #1
 8013d32:	687b      	ldr	r3, [r7, #4]
 8013d34:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8013d36:	2300      	movs	r3, #0
}
 8013d38:	4618      	mov	r0, r3
 8013d3a:	370c      	adds	r7, #12
 8013d3c:	46bd      	mov	sp, r7
 8013d3e:	bc80      	pop	{r7}
 8013d40:	4770      	bx	lr
 8013d42:	bf00      	nop
 8013d44:	20001bc8 	.word	0x20001bc8

08013d48 <LoRaMacCryptoGetFCntDown>:

    return LORAMAC_CRYPTO_SUCCESS;
}
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint32_t frameFcnt, uint32_t* currentDown )
{
 8013d48:	b580      	push	{r7, lr}
 8013d4a:	b088      	sub	sp, #32
 8013d4c:	af00      	add	r7, sp, #0
 8013d4e:	4603      	mov	r3, r0
 8013d50:	60b9      	str	r1, [r7, #8]
 8013d52:	607a      	str	r2, [r7, #4]
 8013d54:	73fb      	strb	r3, [r7, #15]
    uint32_t lastDown = 0;
 8013d56:	2300      	movs	r3, #0
 8013d58:	617b      	str	r3, [r7, #20]
    int32_t fCntDiff = 0;
 8013d5a:	2300      	movs	r3, #0
 8013d5c:	61fb      	str	r3, [r7, #28]
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 8013d5e:	2312      	movs	r3, #18
 8013d60:	76fb      	strb	r3, [r7, #27]

    if( currentDown == NULL )
 8013d62:	687b      	ldr	r3, [r7, #4]
 8013d64:	2b00      	cmp	r3, #0
 8013d66:	d101      	bne.n	8013d6c <LoRaMacCryptoGetFCntDown+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013d68:	2309      	movs	r3, #9
 8013d6a:	e035      	b.n	8013dd8 <LoRaMacCryptoGetFCntDown+0x90>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 8013d6c:	f107 0214 	add.w	r2, r7, #20
 8013d70:	7bfb      	ldrb	r3, [r7, #15]
 8013d72:	4611      	mov	r1, r2
 8013d74:	4618      	mov	r0, r3
 8013d76:	f7ff feb9 	bl	8013aec <GetLastFcntDown>
 8013d7a:	4603      	mov	r3, r0
 8013d7c:	76fb      	strb	r3, [r7, #27]
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8013d7e:	7efb      	ldrb	r3, [r7, #27]
 8013d80:	2b00      	cmp	r3, #0
 8013d82:	d001      	beq.n	8013d88 <LoRaMacCryptoGetFCntDown+0x40>
    {
        return cryptoStatus;
 8013d84:	7efb      	ldrb	r3, [r7, #27]
 8013d86:	e027      	b.n	8013dd8 <LoRaMacCryptoGetFCntDown+0x90>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 8013d88:	697b      	ldr	r3, [r7, #20]
 8013d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d8e:	d103      	bne.n	8013d98 <LoRaMacCryptoGetFCntDown+0x50>
    {
        *currentDown = frameFcnt;
 8013d90:	687b      	ldr	r3, [r7, #4]
 8013d92:	68ba      	ldr	r2, [r7, #8]
 8013d94:	601a      	str	r2, [r3, #0]
 8013d96:	e01e      	b.n	8013dd6 <LoRaMacCryptoGetFCntDown+0x8e>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 8013d98:	697b      	ldr	r3, [r7, #20]
 8013d9a:	b29b      	uxth	r3, r3
 8013d9c:	68ba      	ldr	r2, [r7, #8]
 8013d9e:	1ad3      	subs	r3, r2, r3
 8013da0:	61fb      	str	r3, [r7, #28]

        if( fCntDiff > 0 )
 8013da2:	69fb      	ldr	r3, [r7, #28]
 8013da4:	2b00      	cmp	r3, #0
 8013da6:	dd05      	ble.n	8013db4 <LoRaMacCryptoGetFCntDown+0x6c>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 8013da8:	697a      	ldr	r2, [r7, #20]
 8013daa:	69fb      	ldr	r3, [r7, #28]
 8013dac:	441a      	add	r2, r3
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	601a      	str	r2, [r3, #0]
 8013db2:	e010      	b.n	8013dd6 <LoRaMacCryptoGetFCntDown+0x8e>
        }
        else if( fCntDiff == 0 )
 8013db4:	69fb      	ldr	r3, [r7, #28]
 8013db6:	2b00      	cmp	r3, #0
 8013db8:	d104      	bne.n	8013dc4 <LoRaMacCryptoGetFCntDown+0x7c>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 8013dba:	697a      	ldr	r2, [r7, #20]
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 8013dc0:	2307      	movs	r3, #7
 8013dc2:	e009      	b.n	8013dd8 <LoRaMacCryptoGetFCntDown+0x90>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 8013dc4:	697b      	ldr	r3, [r7, #20]
 8013dc6:	0c1b      	lsrs	r3, r3, #16
 8013dc8:	041b      	lsls	r3, r3, #16
 8013dca:	68ba      	ldr	r2, [r7, #8]
 8013dcc:	4413      	add	r3, r2
 8013dce:	f503 3280 	add.w	r2, r3, #65536	@ 0x10000
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	601a      	str	r2, [r3, #0]
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013dd6:	2300      	movs	r3, #0
}
 8013dd8:	4618      	mov	r0, r3
 8013dda:	3720      	adds	r7, #32
 8013ddc:	46bd      	mov	sp, r7
 8013dde:	bd80      	pop	{r7, pc}

08013de0 <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 8013de0:	b480      	push	{r7}
 8013de2:	b085      	sub	sp, #20
 8013de4:	af00      	add	r7, sp, #0
 8013de6:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 8013de8:	687b      	ldr	r3, [r7, #4]
 8013dea:	2b00      	cmp	r3, #0
 8013dec:	d101      	bne.n	8013df2 <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013dee:	2309      	movs	r3, #9
 8013df0:	e017      	b.n	8013e22 <LoRaMacCryptoSetMulticastReference+0x42>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8013df2:	2300      	movs	r3, #0
 8013df4:	60fb      	str	r3, [r7, #12]
 8013df6:	e010      	b.n	8013e1a <LoRaMacCryptoSetMulticastReference+0x3a>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 8013df8:	4b0c      	ldr	r3, [pc, #48]	@ (8013e2c <LoRaMacCryptoSetMulticastReference+0x4c>)
 8013dfa:	6819      	ldr	r1, [r3, #0]
 8013dfc:	68fb      	ldr	r3, [r7, #12]
 8013dfe:	222c      	movs	r2, #44	@ 0x2c
 8013e00:	fb02 f303 	mul.w	r3, r2, r3
 8013e04:	687a      	ldr	r2, [r7, #4]
 8013e06:	4413      	add	r3, r2
 8013e08:	68fa      	ldr	r2, [r7, #12]
 8013e0a:	3206      	adds	r2, #6
 8013e0c:	0092      	lsls	r2, r2, #2
 8013e0e:	440a      	add	r2, r1
 8013e10:	3204      	adds	r2, #4
 8013e12:	621a      	str	r2, [r3, #32]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8013e14:	68fb      	ldr	r3, [r7, #12]
 8013e16:	3301      	adds	r3, #1
 8013e18:	60fb      	str	r3, [r7, #12]
 8013e1a:	68fb      	ldr	r3, [r7, #12]
 8013e1c:	2b00      	cmp	r3, #0
 8013e1e:	ddeb      	ble.n	8013df8 <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013e20:	2300      	movs	r3, #0
}
 8013e22:	4618      	mov	r0, r3
 8013e24:	3714      	adds	r7, #20
 8013e26:	46bd      	mov	sp, r7
 8013e28:	bc80      	pop	{r7}
 8013e2a:	4770      	bx	lr
 8013e2c:	20001bc8 	.word	0x20001bc8

08013e30 <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 8013e30:	b580      	push	{r7, lr}
 8013e32:	b082      	sub	sp, #8
 8013e34:	af00      	add	r7, sp, #0
 8013e36:	4603      	mov	r3, r0
 8013e38:	6039      	str	r1, [r7, #0]
 8013e3a:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 8013e3c:	79fb      	ldrb	r3, [r7, #7]
 8013e3e:	6839      	ldr	r1, [r7, #0]
 8013e40:	4618      	mov	r0, r3
 8013e42:	f7f8 f8a1 	bl	800bf88 <SecureElementSetKey>
 8013e46:	4603      	mov	r3, r0
 8013e48:	2b00      	cmp	r3, #0
 8013e4a:	d001      	beq.n	8013e50 <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013e4c:	230e      	movs	r3, #14
 8013e4e:	e018      	b.n	8013e82 <LoRaMacCryptoSetKey+0x52>
    }
    if( keyID == APP_KEY )
 8013e50:	79fb      	ldrb	r3, [r7, #7]
 8013e52:	2b00      	cmp	r3, #0
 8013e54:	d114      	bne.n	8013e80 <LoRaMacCryptoSetKey+0x50>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveMcRootKey( CryptoNvm->LrWanVersion.Fields.Minor, keyID ) != LORAMAC_CRYPTO_SUCCESS )
 8013e56:	4b0d      	ldr	r3, [pc, #52]	@ (8013e8c <LoRaMacCryptoSetKey+0x5c>)
 8013e58:	681b      	ldr	r3, [r3, #0]
 8013e5a:	789b      	ldrb	r3, [r3, #2]
 8013e5c:	79fa      	ldrb	r2, [r7, #7]
 8013e5e:	4611      	mov	r1, r2
 8013e60:	4618      	mov	r0, r3
 8013e62:	f000 fa35 	bl	80142d0 <LoRaMacCryptoDeriveMcRootKey>
 8013e66:	4603      	mov	r3, r0
 8013e68:	2b00      	cmp	r3, #0
 8013e6a:	d001      	beq.n	8013e70 <LoRaMacCryptoSetKey+0x40>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013e6c:	230e      	movs	r3, #14
 8013e6e:	e008      	b.n	8013e82 <LoRaMacCryptoSetKey+0x52>
        }
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8013e70:	2004      	movs	r0, #4
 8013e72:	f000 fa57 	bl	8014324 <LoRaMacCryptoDeriveMcKEKey>
 8013e76:	4603      	mov	r3, r0
 8013e78:	2b00      	cmp	r3, #0
 8013e7a:	d001      	beq.n	8013e80 <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013e7c:	230e      	movs	r3, #14
 8013e7e:	e000      	b.n	8013e82 <LoRaMacCryptoSetKey+0x52>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8013e80:	2300      	movs	r3, #0
}
 8013e82:	4618      	mov	r0, r3
 8013e84:	3708      	adds	r7, #8
 8013e86:	46bd      	mov	sp, r7
 8013e88:	bd80      	pop	{r7, pc}
 8013e8a:	bf00      	nop
 8013e8c:	20001bc8 	.word	0x20001bc8

08013e90 <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8013e90:	b580      	push	{r7, lr}
 8013e92:	b086      	sub	sp, #24
 8013e94:	af02      	add	r7, sp, #8
 8013e96:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	2b00      	cmp	r3, #0
 8013e9c:	d101      	bne.n	8013ea2 <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013e9e:	2309      	movs	r3, #9
 8013ea0:	e02d      	b.n	8013efe <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 8013ea2:	2301      	movs	r3, #1
 8013ea4:	73fb      	strb	r3, [r7, #15]
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
    SecureElementRandomNumber( &devNonce );
    CryptoNvm->DevNonce = devNonce;
#else
    CryptoNvm->DevNonce++;
 8013ea6:	4b18      	ldr	r3, [pc, #96]	@ (8013f08 <LoRaMacCryptoPrepareJoinRequest+0x78>)
 8013ea8:	681b      	ldr	r3, [r3, #0]
 8013eaa:	889a      	ldrh	r2, [r3, #4]
 8013eac:	3201      	adds	r2, #1
 8013eae:	b292      	uxth	r2, r2
 8013eb0:	809a      	strh	r2, [r3, #4]
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 8013eb2:	4b15      	ldr	r3, [pc, #84]	@ (8013f08 <LoRaMacCryptoPrepareJoinRequest+0x78>)
 8013eb4:	681b      	ldr	r3, [r3, #0]
 8013eb6:	889a      	ldrh	r2, [r3, #4]
 8013eb8:	687b      	ldr	r3, [r7, #4]
 8013eba:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8013ebc:	6878      	ldr	r0, [r7, #4]
 8013ebe:	f000 fc10 	bl	80146e2 <LoRaMacSerializerJoinRequest>
 8013ec2:	4603      	mov	r3, r0
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	d001      	beq.n	8013ecc <LoRaMacCryptoPrepareJoinRequest+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8013ec8:	2310      	movs	r3, #16
 8013eca:	e018      	b.n	8013efe <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	6819      	ldr	r1, [r3, #0]
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	3318      	adds	r3, #24
 8013ed4:	7bfa      	ldrb	r2, [r7, #15]
 8013ed6:	9300      	str	r3, [sp, #0]
 8013ed8:	4613      	mov	r3, r2
 8013eda:	2213      	movs	r2, #19
 8013edc:	2000      	movs	r0, #0
 8013ede:	f7f8 f8b1 	bl	800c044 <SecureElementComputeAesCmac>
 8013ee2:	4603      	mov	r3, r0
 8013ee4:	2b00      	cmp	r3, #0
 8013ee6:	d001      	beq.n	8013eec <LoRaMacCryptoPrepareJoinRequest+0x5c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013ee8:	230e      	movs	r3, #14
 8013eea:	e008      	b.n	8013efe <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8013eec:	6878      	ldr	r0, [r7, #4]
 8013eee:	f000 fbf8 	bl	80146e2 <LoRaMacSerializerJoinRequest>
 8013ef2:	4603      	mov	r3, r0
 8013ef4:	2b00      	cmp	r3, #0
 8013ef6:	d001      	beq.n	8013efc <LoRaMacCryptoPrepareJoinRequest+0x6c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8013ef8:	2310      	movs	r3, #16
 8013efa:	e000      	b.n	8013efe <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013efc:	2300      	movs	r3, #0
}
 8013efe:	4618      	mov	r0, r3
 8013f00:	3710      	adds	r7, #16
 8013f02:	46bd      	mov	sp, r7
 8013f04:	bd80      	pop	{r7, pc}
 8013f06:	bf00      	nop
 8013f08:	20001bc8 	.word	0x20001bc8

08013f0c <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 8013f0c:	b590      	push	{r4, r7, lr}
 8013f0e:	b097      	sub	sp, #92	@ 0x5c
 8013f10:	af04      	add	r7, sp, #16
 8013f12:	4603      	mov	r3, r0
 8013f14:	60b9      	str	r1, [r7, #8]
 8013f16:	607a      	str	r2, [r7, #4]
 8013f18:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	2b00      	cmp	r3, #0
 8013f1e:	d002      	beq.n	8013f26 <LoRaMacCryptoHandleJoinAccept+0x1a>
 8013f20:	68bb      	ldr	r3, [r7, #8]
 8013f22:	2b00      	cmp	r3, #0
 8013f24:	d101      	bne.n	8013f2a <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013f26:	2309      	movs	r3, #9
 8013f28:	e0bb      	b.n	80140a2 <LoRaMacCryptoHandleJoinAccept+0x196>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8013f2a:	2312      	movs	r3, #18
 8013f2c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 8013f30:	f107 0318 	add.w	r3, r7, #24
 8013f34:	2221      	movs	r2, #33	@ 0x21
 8013f36:	2100      	movs	r1, #0
 8013f38:	4618      	mov	r0, r3
 8013f3a:	f008 fb24 	bl	801c586 <memset>
    uint8_t versionMinor         = 0;
 8013f3e:	2300      	movs	r3, #0
 8013f40:	75fb      	strb	r3, [r7, #23]
    uint16_t nonce               = CryptoNvm->DevNonce;
 8013f42:	4b5a      	ldr	r3, [pc, #360]	@ (80140ac <LoRaMacCryptoHandleJoinAccept+0x1a0>)
 8013f44:	681b      	ldr	r3, [r3, #0]
 8013f46:	889b      	ldrh	r3, [r3, #4]
 8013f48:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 8013f4c:	687b      	ldr	r3, [r7, #4]
 8013f4e:	681c      	ldr	r4, [r3, #0]
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	791b      	ldrb	r3, [r3, #4]
 8013f54:	f8b7 1044 	ldrh.w	r1, [r7, #68]	@ 0x44
 8013f58:	7bf8      	ldrb	r0, [r7, #15]
 8013f5a:	f107 0217 	add.w	r2, r7, #23
 8013f5e:	9202      	str	r2, [sp, #8]
 8013f60:	f107 0218 	add.w	r2, r7, #24
 8013f64:	9201      	str	r2, [sp, #4]
 8013f66:	9300      	str	r3, [sp, #0]
 8013f68:	4623      	mov	r3, r4
 8013f6a:	460a      	mov	r2, r1
 8013f6c:	68b9      	ldr	r1, [r7, #8]
 8013f6e:	f7f8 f95c 	bl	800c22a <SecureElementProcessJoinAccept>
 8013f72:	4603      	mov	r3, r0
 8013f74:	2b00      	cmp	r3, #0
 8013f76:	d001      	beq.n	8013f7c <LoRaMacCryptoHandleJoinAccept+0x70>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013f78:	230e      	movs	r3, #14
 8013f7a:	e092      	b.n	80140a2 <LoRaMacCryptoHandleJoinAccept+0x196>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	6818      	ldr	r0, [r3, #0]
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	791b      	ldrb	r3, [r3, #4]
 8013f84:	461a      	mov	r2, r3
 8013f86:	f107 0318 	add.w	r3, r7, #24
 8013f8a:	4619      	mov	r1, r3
 8013f8c:	f002 ffd1 	bl	8016f32 <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8013f90:	6878      	ldr	r0, [r7, #4]
 8013f92:	f000 f9e9 	bl	8014368 <LoRaMacParserJoinAccept>
 8013f96:	4603      	mov	r3, r0
 8013f98:	2b00      	cmp	r3, #0
 8013f9a:	d001      	beq.n	8013fa0 <LoRaMacCryptoHandleJoinAccept+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8013f9c:	230f      	movs	r3, #15
 8013f9e:	e080      	b.n	80140a2 <LoRaMacCryptoHandleJoinAccept+0x196>
    }

    uint32_t currentJoinNonce;

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	799b      	ldrb	r3, [r3, #6]
 8013fa4:	643b      	str	r3, [r7, #64]	@ 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 8013fa6:	687b      	ldr	r3, [r7, #4]
 8013fa8:	79db      	ldrb	r3, [r3, #7]
 8013faa:	021b      	lsls	r3, r3, #8
 8013fac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8013fae:	4313      	orrs	r3, r2
 8013fb0:	643b      	str	r3, [r7, #64]	@ 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 8013fb2:	687b      	ldr	r3, [r7, #4]
 8013fb4:	7a1b      	ldrb	r3, [r3, #8]
 8013fb6:	041b      	lsls	r3, r3, #16
 8013fb8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8013fba:	4313      	orrs	r3, r2
 8013fbc:	643b      	str	r3, [r7, #64]	@ 0x40
#if( USE_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    if( currentJoinNonce > CryptoNvm->JoinNonce )
#else
    // Check if the JoinNonce is different from the previous one
    if( currentJoinNonce != CryptoNvm->JoinNonce )
 8013fbe:	4b3b      	ldr	r3, [pc, #236]	@ (80140ac <LoRaMacCryptoHandleJoinAccept+0x1a0>)
 8013fc0:	681b      	ldr	r3, [r3, #0]
 8013fc2:	689b      	ldr	r3, [r3, #8]
 8013fc4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8013fc6:	429a      	cmp	r2, r3
 8013fc8:	d010      	beq.n	8013fec <LoRaMacCryptoHandleJoinAccept+0xe0>
#endif /* USE_JOIN_NONCE_COUNTER_CHECK */
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 8013fca:	4b38      	ldr	r3, [pc, #224]	@ (80140ac <LoRaMacCryptoHandleJoinAccept+0x1a0>)
 8013fcc:	681b      	ldr	r3, [r3, #0]
 8013fce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8013fd0:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 8013fd2:	7dfb      	ldrb	r3, [r7, #23]
 8013fd4:	2100      	movs	r1, #0
 8013fd6:	4618      	mov	r0, r3
 8013fd8:	f000 f97a 	bl	80142d0 <LoRaMacCryptoDeriveMcRootKey>
 8013fdc:	4603      	mov	r3, r0
 8013fde:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013fe2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8013fe6:	2b00      	cmp	r3, #0
 8013fe8:	d005      	beq.n	8013ff6 <LoRaMacCryptoHandleJoinAccept+0xea>
 8013fea:	e001      	b.n	8013ff0 <LoRaMacCryptoHandleJoinAccept+0xe4>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 8013fec:	2303      	movs	r3, #3
 8013fee:	e058      	b.n	80140a2 <LoRaMacCryptoHandleJoinAccept+0x196>
    {
        return retval;
 8013ff0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8013ff4:	e055      	b.n	80140a2 <LoRaMacCryptoHandleJoinAccept+0x196>
    }

    retval = LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY );
 8013ff6:	2004      	movs	r0, #4
 8013ff8:	f000 f994 	bl	8014324 <LoRaMacCryptoDeriveMcKEKey>
 8013ffc:	4603      	mov	r3, r0
 8013ffe:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014002:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8014006:	2b00      	cmp	r3, #0
 8014008:	d002      	beq.n	8014010 <LoRaMacCryptoHandleJoinAccept+0x104>
    {
        return retval;
 801400a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801400e:	e048      	b.n	80140a2 <LoRaMacCryptoHandleJoinAccept+0x196>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 8014010:	687b      	ldr	r3, [r7, #4]
 8014012:	7a5b      	ldrb	r3, [r3, #9]
 8014014:	63fb      	str	r3, [r7, #60]	@ 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	7a9b      	ldrb	r3, [r3, #10]
 801401a:	021b      	lsls	r3, r3, #8
 801401c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801401e:	4313      	orrs	r3, r2
 8014020:	63fb      	str	r3, [r7, #60]	@ 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	7adb      	ldrb	r3, [r3, #11]
 8014026:	041b      	lsls	r3, r3, #16
 8014028:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801402a:	4313      	orrs	r3, r2
 801402c:	63fb      	str	r3, [r7, #60]	@ 0x3c

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 801402e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8014032:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8014034:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8014036:	2003      	movs	r0, #3
 8014038:	f7ff fd0a 	bl	8013a50 <DeriveSessionKey10x>
 801403c:	4603      	mov	r3, r0
 801403e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014042:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8014046:	2b00      	cmp	r3, #0
 8014048:	d002      	beq.n	8014050 <LoRaMacCryptoHandleJoinAccept+0x144>
        {
            return retval;
 801404a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801404e:	e028      	b.n	80140a2 <LoRaMacCryptoHandleJoinAccept+0x196>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 8014050:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8014054:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8014056:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8014058:	2002      	movs	r0, #2
 801405a:	f7ff fcf9 	bl	8013a50 <DeriveSessionKey10x>
 801405e:	4603      	mov	r3, r0
 8014060:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014064:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8014068:	2b00      	cmp	r3, #0
 801406a:	d002      	beq.n	8014072 <LoRaMacCryptoHandleJoinAccept+0x166>
        {
            return retval;
 801406c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8014070:	e017      	b.n	80140a2 <LoRaMacCryptoHandleJoinAccept+0x196>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 8014072:	4b0e      	ldr	r3, [pc, #56]	@ (80140ac <LoRaMacCryptoHandleJoinAccept+0x1a0>)
 8014074:	681b      	ldr	r3, [r3, #0]
 8014076:	7dfa      	ldrb	r2, [r7, #23]
 8014078:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    RJcount0 = 0;
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    CryptoNvm->FCntList.FCntUp = 0;
 801407a:	4b0c      	ldr	r3, [pc, #48]	@ (80140ac <LoRaMacCryptoHandleJoinAccept+0x1a0>)
 801407c:	681b      	ldr	r3, [r3, #0]
 801407e:	2200      	movs	r2, #0
 8014080:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 8014082:	4b0a      	ldr	r3, [pc, #40]	@ (80140ac <LoRaMacCryptoHandleJoinAccept+0x1a0>)
 8014084:	681b      	ldr	r3, [r3, #0]
 8014086:	f04f 32ff 	mov.w	r2, #4294967295
 801408a:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 801408c:	4b07      	ldr	r3, [pc, #28]	@ (80140ac <LoRaMacCryptoHandleJoinAccept+0x1a0>)
 801408e:	681b      	ldr	r3, [r3, #0]
 8014090:	f04f 32ff 	mov.w	r2, #4294967295
 8014094:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8014096:	4b05      	ldr	r3, [pc, #20]	@ (80140ac <LoRaMacCryptoHandleJoinAccept+0x1a0>)
 8014098:	681b      	ldr	r3, [r3, #0]
 801409a:	f04f 32ff 	mov.w	r2, #4294967295
 801409e:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 80140a0:	2300      	movs	r3, #0
}
 80140a2:	4618      	mov	r0, r3
 80140a4:	374c      	adds	r7, #76	@ 0x4c
 80140a6:	46bd      	mov	sp, r7
 80140a8:	bd90      	pop	{r4, r7, pc}
 80140aa:	bf00      	nop
 80140ac:	20001bc8 	.word	0x20001bc8

080140b0 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 80140b0:	b590      	push	{r4, r7, lr}
 80140b2:	b08b      	sub	sp, #44	@ 0x2c
 80140b4:	af04      	add	r7, sp, #16
 80140b6:	60f8      	str	r0, [r7, #12]
 80140b8:	607b      	str	r3, [r7, #4]
 80140ba:	460b      	mov	r3, r1
 80140bc:	72fb      	strb	r3, [r7, #11]
 80140be:	4613      	mov	r3, r2
 80140c0:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 80140c2:	2312      	movs	r3, #18
 80140c4:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 80140c6:	2303      	movs	r3, #3
 80140c8:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 80140ca:	687b      	ldr	r3, [r7, #4]
 80140cc:	2b00      	cmp	r3, #0
 80140ce:	d101      	bne.n	80140d4 <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80140d0:	2309      	movs	r3, #9
 80140d2:	e05e      	b.n	8014192 <LoRaMacCryptoSecureMessage+0xe2>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 80140d4:	4b31      	ldr	r3, [pc, #196]	@ (801419c <LoRaMacCryptoSecureMessage+0xec>)
 80140d6:	681b      	ldr	r3, [r3, #0]
 80140d8:	68db      	ldr	r3, [r3, #12]
 80140da:	68fa      	ldr	r2, [r7, #12]
 80140dc:	429a      	cmp	r2, r3
 80140de:	d201      	bcs.n	80140e4 <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 80140e0:	2306      	movs	r3, #6
 80140e2:	e056      	b.n	8014192 <LoRaMacCryptoSecureMessage+0xe2>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 80140e4:	687b      	ldr	r3, [r7, #4]
 80140e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80140ea:	2b00      	cmp	r3, #0
 80140ec:	d101      	bne.n	80140f2 <LoRaMacCryptoSecureMessage+0x42>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 80140ee:	2302      	movs	r3, #2
 80140f0:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 80140f2:	4b2a      	ldr	r3, [pc, #168]	@ (801419c <LoRaMacCryptoSecureMessage+0xec>)
 80140f4:	681b      	ldr	r3, [r3, #0]
 80140f6:	68db      	ldr	r3, [r3, #12]
 80140f8:	68fa      	ldr	r2, [r7, #12]
 80140fa:	429a      	cmp	r2, r3
 80140fc:	d916      	bls.n	801412c <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 80140fe:	687b      	ldr	r3, [r7, #4]
 8014100:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014108:	b219      	sxth	r1, r3
 801410a:	687b      	ldr	r3, [r7, #4]
 801410c:	689c      	ldr	r4, [r3, #8]
 801410e:	7dfa      	ldrb	r2, [r7, #23]
 8014110:	68fb      	ldr	r3, [r7, #12]
 8014112:	9301      	str	r3, [sp, #4]
 8014114:	2300      	movs	r3, #0
 8014116:	9300      	str	r3, [sp, #0]
 8014118:	4623      	mov	r3, r4
 801411a:	f7ff faa7 	bl	801366c <PayloadEncrypt>
 801411e:	4603      	mov	r3, r0
 8014120:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014122:	7dbb      	ldrb	r3, [r7, #22]
 8014124:	2b00      	cmp	r3, #0
 8014126:	d001      	beq.n	801412c <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 8014128:	7dbb      	ldrb	r3, [r7, #22]
 801412a:	e032      	b.n	8014192 <LoRaMacCryptoSecureMessage+0xe2>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 801412c:	6878      	ldr	r0, [r7, #4]
 801412e:	f000 fb5a 	bl	80147e6 <LoRaMacSerializerData>
 8014132:	4603      	mov	r3, r0
 8014134:	2b00      	cmp	r3, #0
 8014136:	d001      	beq.n	801413c <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8014138:	2310      	movs	r3, #16
 801413a:	e02a      	b.n	8014192 <LoRaMacCryptoSecureMessage+0xe2>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 801413c:	2302      	movs	r3, #2
 801413e:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8014140:	687b      	ldr	r3, [r7, #4]
 8014142:	6818      	ldr	r0, [r3, #0]
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	791b      	ldrb	r3, [r3, #4]
 8014148:	3b04      	subs	r3, #4
 801414a:	b299      	uxth	r1, r3
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	689b      	ldr	r3, [r3, #8]
 8014150:	687a      	ldr	r2, [r7, #4]
 8014152:	322c      	adds	r2, #44	@ 0x2c
 8014154:	7dfc      	ldrb	r4, [r7, #23]
 8014156:	9203      	str	r2, [sp, #12]
 8014158:	68fa      	ldr	r2, [r7, #12]
 801415a:	9202      	str	r2, [sp, #8]
 801415c:	9301      	str	r3, [sp, #4]
 801415e:	2300      	movs	r3, #0
 8014160:	9300      	str	r3, [sp, #0]
 8014162:	2300      	movs	r3, #0
 8014164:	4622      	mov	r2, r4
 8014166:	f7ff fb80 	bl	801386a <ComputeCmacB0>
 801416a:	4603      	mov	r3, r0
 801416c:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 801416e:	7dbb      	ldrb	r3, [r7, #22]
 8014170:	2b00      	cmp	r3, #0
 8014172:	d001      	beq.n	8014178 <LoRaMacCryptoSecureMessage+0xc8>
        {
            return retval;
 8014174:	7dbb      	ldrb	r3, [r7, #22]
 8014176:	e00c      	b.n	8014192 <LoRaMacCryptoSecureMessage+0xe2>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8014178:	6878      	ldr	r0, [r7, #4]
 801417a:	f000 fb34 	bl	80147e6 <LoRaMacSerializerData>
 801417e:	4603      	mov	r3, r0
 8014180:	2b00      	cmp	r3, #0
 8014182:	d001      	beq.n	8014188 <LoRaMacCryptoSecureMessage+0xd8>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8014184:	2310      	movs	r3, #16
 8014186:	e004      	b.n	8014192 <LoRaMacCryptoSecureMessage+0xe2>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 8014188:	4b04      	ldr	r3, [pc, #16]	@ (801419c <LoRaMacCryptoSecureMessage+0xec>)
 801418a:	681b      	ldr	r3, [r3, #0]
 801418c:	68fa      	ldr	r2, [r7, #12]
 801418e:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 8014190:	2300      	movs	r3, #0
}
 8014192:	4618      	mov	r0, r3
 8014194:	371c      	adds	r7, #28
 8014196:	46bd      	mov	sp, r7
 8014198:	bd90      	pop	{r4, r7, pc}
 801419a:	bf00      	nop
 801419c:	20001bc8 	.word	0x20001bc8

080141a0 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 80141a0:	b590      	push	{r4, r7, lr}
 80141a2:	b08b      	sub	sp, #44	@ 0x2c
 80141a4:	af04      	add	r7, sp, #16
 80141a6:	60b9      	str	r1, [r7, #8]
 80141a8:	607b      	str	r3, [r7, #4]
 80141aa:	4603      	mov	r3, r0
 80141ac:	73fb      	strb	r3, [r7, #15]
 80141ae:	4613      	mov	r3, r2
 80141b0:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 80141b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80141b4:	2b00      	cmp	r3, #0
 80141b6:	d101      	bne.n	80141bc <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80141b8:	2309      	movs	r3, #9
 80141ba:	e083      	b.n	80142c4 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 80141bc:	7bbb      	ldrb	r3, [r7, #14]
 80141be:	6879      	ldr	r1, [r7, #4]
 80141c0:	4618      	mov	r0, r3
 80141c2:	f7ff fce1 	bl	8013b88 <CheckFCntDown>
 80141c6:	4603      	mov	r3, r0
 80141c8:	f083 0301 	eor.w	r3, r3, #1
 80141cc:	b2db      	uxtb	r3, r3
 80141ce:	2b00      	cmp	r3, #0
 80141d0:	d001      	beq.n	80141d6 <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 80141d2:	2306      	movs	r3, #6
 80141d4:	e076      	b.n	80142c4 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 80141d6:	2312      	movs	r3, #18
 80141d8:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 80141da:	2303      	movs	r3, #3
 80141dc:	75fb      	strb	r3, [r7, #23]
    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 80141de:	2302      	movs	r3, #2
 80141e0:	753b      	strb	r3, [r7, #20]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    /* ST_WORKAROUND_END */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 80141e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80141e4:	f000 f98b 	bl	80144fe <LoRaMacParserData>
 80141e8:	4603      	mov	r3, r0
 80141ea:	2b00      	cmp	r3, #0
 80141ec:	d001      	beq.n	80141f2 <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 80141ee:	230f      	movs	r3, #15
 80141f0:	e068      	b.n	80142c4 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 80141f2:	f107 0210 	add.w	r2, r7, #16
 80141f6:	7bfb      	ldrb	r3, [r7, #15]
 80141f8:	4611      	mov	r1, r2
 80141fa:	4618      	mov	r0, r3
 80141fc:	f7ff fc02 	bl	8013a04 <GetKeyAddrItem>
 8014200:	4603      	mov	r3, r0
 8014202:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014204:	7d7b      	ldrb	r3, [r7, #21]
 8014206:	2b00      	cmp	r3, #0
 8014208:	d001      	beq.n	801420e <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 801420a:	7d7b      	ldrb	r3, [r7, #21]
 801420c:	e05a      	b.n	80142c4 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 801420e:	693b      	ldr	r3, [r7, #16]
 8014210:	785b      	ldrb	r3, [r3, #1]
 8014212:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 8014214:	693b      	ldr	r3, [r7, #16]
 8014216:	789b      	ldrb	r3, [r3, #2]
 8014218:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 801421a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801421c:	689b      	ldr	r3, [r3, #8]
 801421e:	68ba      	ldr	r2, [r7, #8]
 8014220:	429a      	cmp	r2, r3
 8014222:	d001      	beq.n	8014228 <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 8014224:	2302      	movs	r3, #2
 8014226:	e04d      	b.n	80142c4 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 8014228:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801422a:	7b1b      	ldrb	r3, [r3, #12]
 801422c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8014230:	b2db      	uxtb	r3, r3
 8014232:	2b00      	cmp	r3, #0
 8014234:	bf14      	ite	ne
 8014236:	2301      	movne	r3, #1
 8014238:	2300      	moveq	r3, #0
 801423a:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 801423c:	4b23      	ldr	r3, [pc, #140]	@ (80142cc <LoRaMacCryptoUnsecureMessage+0x12c>)
 801423e:	681b      	ldr	r3, [r3, #0]
 8014240:	789b      	ldrb	r3, [r3, #2]
 8014242:	2b00      	cmp	r3, #0
 8014244:	d101      	bne.n	801424a <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 8014246:	2300      	movs	r3, #0
 8014248:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 801424a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801424c:	6818      	ldr	r0, [r3, #0]
 801424e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014250:	791b      	ldrb	r3, [r3, #4]
 8014252:	3b04      	subs	r3, #4
 8014254:	b299      	uxth	r1, r3
 8014256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801425a:	7dbc      	ldrb	r4, [r7, #22]
 801425c:	7d3a      	ldrb	r2, [r7, #20]
 801425e:	9303      	str	r3, [sp, #12]
 8014260:	687b      	ldr	r3, [r7, #4]
 8014262:	9302      	str	r3, [sp, #8]
 8014264:	68bb      	ldr	r3, [r7, #8]
 8014266:	9301      	str	r3, [sp, #4]
 8014268:	2301      	movs	r3, #1
 801426a:	9300      	str	r3, [sp, #0]
 801426c:	4623      	mov	r3, r4
 801426e:	f7ff fb3a 	bl	80138e6 <VerifyCmacB0>
 8014272:	4603      	mov	r3, r0
 8014274:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014276:	7d7b      	ldrb	r3, [r7, #21]
 8014278:	2b00      	cmp	r3, #0
 801427a:	d001      	beq.n	8014280 <LoRaMacCryptoUnsecureMessage+0xe0>
    {
        return retval;
 801427c:	7d7b      	ldrb	r3, [r7, #21]
 801427e:	e021      	b.n	80142c4 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 8014280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014282:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014286:	2b00      	cmp	r3, #0
 8014288:	d101      	bne.n	801428e <LoRaMacCryptoUnsecureMessage+0xee>
        // Use network session encryption key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 801428a:	2302      	movs	r3, #2
 801428c:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 801428e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014290:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8014292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014294:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014298:	b219      	sxth	r1, r3
 801429a:	7dfa      	ldrb	r2, [r7, #23]
 801429c:	687b      	ldr	r3, [r7, #4]
 801429e:	9301      	str	r3, [sp, #4]
 80142a0:	2301      	movs	r3, #1
 80142a2:	9300      	str	r3, [sp, #0]
 80142a4:	68bb      	ldr	r3, [r7, #8]
 80142a6:	f7ff f9e1 	bl	801366c <PayloadEncrypt>
 80142aa:	4603      	mov	r3, r0
 80142ac:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80142ae:	7d7b      	ldrb	r3, [r7, #21]
 80142b0:	2b00      	cmp	r3, #0
 80142b2:	d001      	beq.n	80142b8 <LoRaMacCryptoUnsecureMessage+0x118>
    {
        return retval;
 80142b4:	7d7b      	ldrb	r3, [r7, #21]
 80142b6:	e005      	b.n	80142c4 <LoRaMacCryptoUnsecureMessage+0x124>
            }
        }
    }
#endif

    UpdateFCntDown( fCntID, fCntDown );
 80142b8:	7bbb      	ldrb	r3, [r7, #14]
 80142ba:	6879      	ldr	r1, [r7, #4]
 80142bc:	4618      	mov	r0, r3
 80142be:	f7ff fc87 	bl	8013bd0 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 80142c2:	2300      	movs	r3, #0
}
 80142c4:	4618      	mov	r0, r3
 80142c6:	371c      	adds	r7, #28
 80142c8:	46bd      	mov	sp, r7
 80142ca:	bd90      	pop	{r4, r7, pc}
 80142cc:	20001bc8 	.word	0x20001bc8

080142d0 <LoRaMacCryptoDeriveMcRootKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 80142d0:	b580      	push	{r7, lr}
 80142d2:	b086      	sub	sp, #24
 80142d4:	af00      	add	r7, sp, #0
 80142d6:	4603      	mov	r3, r0
 80142d8:	460a      	mov	r2, r1
 80142da:	71fb      	strb	r3, [r7, #7]
 80142dc:	4613      	mov	r3, r2
 80142de:	71bb      	strb	r3, [r7, #6]
    // Prevent other keys than AppKey
    if( keyID != APP_KEY )
 80142e0:	79bb      	ldrb	r3, [r7, #6]
 80142e2:	2b00      	cmp	r3, #0
 80142e4:	d001      	beq.n	80142ea <LoRaMacCryptoDeriveMcRootKey+0x1a>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 80142e6:	230a      	movs	r3, #10
 80142e8:	e018      	b.n	801431c <LoRaMacCryptoDeriveMcRootKey+0x4c>
    }
    uint8_t compBase[16] = { 0 };
 80142ea:	f107 0308 	add.w	r3, r7, #8
 80142ee:	2200      	movs	r2, #0
 80142f0:	601a      	str	r2, [r3, #0]
 80142f2:	605a      	str	r2, [r3, #4]
 80142f4:	609a      	str	r2, [r3, #8]
 80142f6:	60da      	str	r2, [r3, #12]

    if( versionMinor == 1 )
 80142f8:	79fb      	ldrb	r3, [r7, #7]
 80142fa:	2b01      	cmp	r3, #1
 80142fc:	d101      	bne.n	8014302 <LoRaMacCryptoDeriveMcRootKey+0x32>
    {
        compBase[0] = 0x20;
 80142fe:	2320      	movs	r3, #32
 8014300:	723b      	strb	r3, [r7, #8]
    }
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 8014302:	79b9      	ldrb	r1, [r7, #6]
 8014304:	f107 0308 	add.w	r3, r7, #8
 8014308:	2204      	movs	r2, #4
 801430a:	4618      	mov	r0, r3
 801430c:	f7f7 ff4e 	bl	800c1ac <SecureElementDeriveAndStoreKey>
 8014310:	4603      	mov	r3, r0
 8014312:	2b00      	cmp	r3, #0
 8014314:	d001      	beq.n	801431a <LoRaMacCryptoDeriveMcRootKey+0x4a>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014316:	230e      	movs	r3, #14
 8014318:	e000      	b.n	801431c <LoRaMacCryptoDeriveMcRootKey+0x4c>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 801431a:	2300      	movs	r3, #0
}
 801431c:	4618      	mov	r0, r3
 801431e:	3718      	adds	r7, #24
 8014320:	46bd      	mov	sp, r7
 8014322:	bd80      	pop	{r7, pc}

08014324 <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
 8014324:	b580      	push	{r7, lr}
 8014326:	b086      	sub	sp, #24
 8014328:	af00      	add	r7, sp, #0
 801432a:	4603      	mov	r3, r0
 801432c:	71fb      	strb	r3, [r7, #7]
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 801432e:	79fb      	ldrb	r3, [r7, #7]
 8014330:	2b04      	cmp	r3, #4
 8014332:	d001      	beq.n	8014338 <LoRaMacCryptoDeriveMcKEKey+0x14>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8014334:	230a      	movs	r3, #10
 8014336:	e013      	b.n	8014360 <LoRaMacCryptoDeriveMcKEKey+0x3c>
    }
    uint8_t compBase[16] = { 0 };
 8014338:	f107 0308 	add.w	r3, r7, #8
 801433c:	2200      	movs	r2, #0
 801433e:	601a      	str	r2, [r3, #0]
 8014340:	605a      	str	r2, [r3, #4]
 8014342:	609a      	str	r2, [r3, #8]
 8014344:	60da      	str	r2, [r3, #12]

    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 8014346:	79f9      	ldrb	r1, [r7, #7]
 8014348:	f107 0308 	add.w	r3, r7, #8
 801434c:	227f      	movs	r2, #127	@ 0x7f
 801434e:	4618      	mov	r0, r3
 8014350:	f7f7 ff2c 	bl	800c1ac <SecureElementDeriveAndStoreKey>
 8014354:	4603      	mov	r3, r0
 8014356:	2b00      	cmp	r3, #0
 8014358:	d001      	beq.n	801435e <LoRaMacCryptoDeriveMcKEKey+0x3a>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801435a:	230e      	movs	r3, #14
 801435c:	e000      	b.n	8014360 <LoRaMacCryptoDeriveMcKEKey+0x3c>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 801435e:	2300      	movs	r3, #0
}
 8014360:	4618      	mov	r0, r3
 8014362:	3718      	adds	r7, #24
 8014364:	46bd      	mov	sp, r7
 8014366:	bd80      	pop	{r7, pc}

08014368 <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 8014368:	b580      	push	{r7, lr}
 801436a:	b084      	sub	sp, #16
 801436c:	af00      	add	r7, sp, #0
 801436e:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8014370:	687b      	ldr	r3, [r7, #4]
 8014372:	2b00      	cmp	r3, #0
 8014374:	d003      	beq.n	801437e <LoRaMacParserJoinAccept+0x16>
 8014376:	687b      	ldr	r3, [r7, #4]
 8014378:	681b      	ldr	r3, [r3, #0]
 801437a:	2b00      	cmp	r3, #0
 801437c:	d101      	bne.n	8014382 <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 801437e:	2302      	movs	r3, #2
 8014380:	e0b9      	b.n	80144f6 <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 8014382:	2300      	movs	r3, #0
 8014384:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8014386:	687b      	ldr	r3, [r7, #4]
 8014388:	681a      	ldr	r2, [r3, #0]
 801438a:	89fb      	ldrh	r3, [r7, #14]
 801438c:	1c59      	adds	r1, r3, #1
 801438e:	81f9      	strh	r1, [r7, #14]
 8014390:	4413      	add	r3, r2
 8014392:	781a      	ldrb	r2, [r3, #0]
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	1d98      	adds	r0, r3, #6
 801439c:	687b      	ldr	r3, [r7, #4]
 801439e:	681a      	ldr	r2, [r3, #0]
 80143a0:	89fb      	ldrh	r3, [r7, #14]
 80143a2:	4413      	add	r3, r2
 80143a4:	2203      	movs	r2, #3
 80143a6:	4619      	mov	r1, r3
 80143a8:	f002 fdc3 	bl	8016f32 <memcpy1>
    bufItr = bufItr + 3;
 80143ac:	89fb      	ldrh	r3, [r7, #14]
 80143ae:	3303      	adds	r3, #3
 80143b0:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 80143b2:	687b      	ldr	r3, [r7, #4]
 80143b4:	f103 0009 	add.w	r0, r3, #9
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	681a      	ldr	r2, [r3, #0]
 80143bc:	89fb      	ldrh	r3, [r7, #14]
 80143be:	4413      	add	r3, r2
 80143c0:	2203      	movs	r2, #3
 80143c2:	4619      	mov	r1, r3
 80143c4:	f002 fdb5 	bl	8016f32 <memcpy1>
    bufItr = bufItr + 3;
 80143c8:	89fb      	ldrh	r3, [r7, #14]
 80143ca:	3303      	adds	r3, #3
 80143cc:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 80143ce:	687b      	ldr	r3, [r7, #4]
 80143d0:	681a      	ldr	r2, [r3, #0]
 80143d2:	89fb      	ldrh	r3, [r7, #14]
 80143d4:	1c59      	adds	r1, r3, #1
 80143d6:	81f9      	strh	r1, [r7, #14]
 80143d8:	4413      	add	r3, r2
 80143da:	781b      	ldrb	r3, [r3, #0]
 80143dc:	461a      	mov	r2, r3
 80143de:	687b      	ldr	r3, [r7, #4]
 80143e0:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 80143e2:	687b      	ldr	r3, [r7, #4]
 80143e4:	681a      	ldr	r2, [r3, #0]
 80143e6:	89fb      	ldrh	r3, [r7, #14]
 80143e8:	1c59      	adds	r1, r3, #1
 80143ea:	81f9      	strh	r1, [r7, #14]
 80143ec:	4413      	add	r3, r2
 80143ee:	781b      	ldrb	r3, [r3, #0]
 80143f0:	021a      	lsls	r2, r3, #8
 80143f2:	687b      	ldr	r3, [r7, #4]
 80143f4:	68db      	ldr	r3, [r3, #12]
 80143f6:	431a      	orrs	r2, r3
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	681a      	ldr	r2, [r3, #0]
 8014400:	89fb      	ldrh	r3, [r7, #14]
 8014402:	1c59      	adds	r1, r3, #1
 8014404:	81f9      	strh	r1, [r7, #14]
 8014406:	4413      	add	r3, r2
 8014408:	781b      	ldrb	r3, [r3, #0]
 801440a:	041a      	lsls	r2, r3, #16
 801440c:	687b      	ldr	r3, [r7, #4]
 801440e:	68db      	ldr	r3, [r3, #12]
 8014410:	431a      	orrs	r2, r3
 8014412:	687b      	ldr	r3, [r7, #4]
 8014414:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8014416:	687b      	ldr	r3, [r7, #4]
 8014418:	681a      	ldr	r2, [r3, #0]
 801441a:	89fb      	ldrh	r3, [r7, #14]
 801441c:	1c59      	adds	r1, r3, #1
 801441e:	81f9      	strh	r1, [r7, #14]
 8014420:	4413      	add	r3, r2
 8014422:	781b      	ldrb	r3, [r3, #0]
 8014424:	061a      	lsls	r2, r3, #24
 8014426:	687b      	ldr	r3, [r7, #4]
 8014428:	68db      	ldr	r3, [r3, #12]
 801442a:	431a      	orrs	r2, r3
 801442c:	687b      	ldr	r3, [r7, #4]
 801442e:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 8014430:	687b      	ldr	r3, [r7, #4]
 8014432:	681a      	ldr	r2, [r3, #0]
 8014434:	89fb      	ldrh	r3, [r7, #14]
 8014436:	1c59      	adds	r1, r3, #1
 8014438:	81f9      	strh	r1, [r7, #14]
 801443a:	4413      	add	r3, r2
 801443c:	781a      	ldrb	r2, [r3, #0]
 801443e:	687b      	ldr	r3, [r7, #4]
 8014440:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 8014442:	687b      	ldr	r3, [r7, #4]
 8014444:	681a      	ldr	r2, [r3, #0]
 8014446:	89fb      	ldrh	r3, [r7, #14]
 8014448:	1c59      	adds	r1, r3, #1
 801444a:	81f9      	strh	r1, [r7, #14]
 801444c:	4413      	add	r3, r2
 801444e:	781a      	ldrb	r2, [r3, #0]
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 8014454:	687b      	ldr	r3, [r7, #4]
 8014456:	791b      	ldrb	r3, [r3, #4]
 8014458:	1f1a      	subs	r2, r3, #4
 801445a:	89fb      	ldrh	r3, [r7, #14]
 801445c:	1ad3      	subs	r3, r2, r3
 801445e:	2b10      	cmp	r3, #16
 8014460:	d10e      	bne.n	8014480 <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	f103 0012 	add.w	r0, r3, #18
 8014468:	687b      	ldr	r3, [r7, #4]
 801446a:	681a      	ldr	r2, [r3, #0]
 801446c:	89fb      	ldrh	r3, [r7, #14]
 801446e:	4413      	add	r3, r2
 8014470:	2210      	movs	r2, #16
 8014472:	4619      	mov	r1, r3
 8014474:	f002 fd5d 	bl	8016f32 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 8014478:	89fb      	ldrh	r3, [r7, #14]
 801447a:	3310      	adds	r3, #16
 801447c:	81fb      	strh	r3, [r7, #14]
 801447e:	e008      	b.n	8014492 <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 8014480:	687b      	ldr	r3, [r7, #4]
 8014482:	791b      	ldrb	r3, [r3, #4]
 8014484:	1f1a      	subs	r2, r3, #4
 8014486:	89fb      	ldrh	r3, [r7, #14]
 8014488:	1ad3      	subs	r3, r2, r3
 801448a:	2b00      	cmp	r3, #0
 801448c:	dd01      	ble.n	8014492 <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 801448e:	2301      	movs	r3, #1
 8014490:	e031      	b.n	80144f6 <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 8014492:	687b      	ldr	r3, [r7, #4]
 8014494:	681a      	ldr	r2, [r3, #0]
 8014496:	89fb      	ldrh	r3, [r7, #14]
 8014498:	1c59      	adds	r1, r3, #1
 801449a:	81f9      	strh	r1, [r7, #14]
 801449c:	4413      	add	r3, r2
 801449e:	781b      	ldrb	r3, [r3, #0]
 80144a0:	461a      	mov	r2, r3
 80144a2:	687b      	ldr	r3, [r7, #4]
 80144a4:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 80144a6:	687b      	ldr	r3, [r7, #4]
 80144a8:	681a      	ldr	r2, [r3, #0]
 80144aa:	89fb      	ldrh	r3, [r7, #14]
 80144ac:	1c59      	adds	r1, r3, #1
 80144ae:	81f9      	strh	r1, [r7, #14]
 80144b0:	4413      	add	r3, r2
 80144b2:	781b      	ldrb	r3, [r3, #0]
 80144b4:	021a      	lsls	r2, r3, #8
 80144b6:	687b      	ldr	r3, [r7, #4]
 80144b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80144ba:	431a      	orrs	r2, r3
 80144bc:	687b      	ldr	r3, [r7, #4]
 80144be:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 80144c0:	687b      	ldr	r3, [r7, #4]
 80144c2:	681a      	ldr	r2, [r3, #0]
 80144c4:	89fb      	ldrh	r3, [r7, #14]
 80144c6:	1c59      	adds	r1, r3, #1
 80144c8:	81f9      	strh	r1, [r7, #14]
 80144ca:	4413      	add	r3, r2
 80144cc:	781b      	ldrb	r3, [r3, #0]
 80144ce:	041a      	lsls	r2, r3, #16
 80144d0:	687b      	ldr	r3, [r7, #4]
 80144d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80144d4:	431a      	orrs	r2, r3
 80144d6:	687b      	ldr	r3, [r7, #4]
 80144d8:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 80144da:	687b      	ldr	r3, [r7, #4]
 80144dc:	681a      	ldr	r2, [r3, #0]
 80144de:	89fb      	ldrh	r3, [r7, #14]
 80144e0:	1c59      	adds	r1, r3, #1
 80144e2:	81f9      	strh	r1, [r7, #14]
 80144e4:	4413      	add	r3, r2
 80144e6:	781b      	ldrb	r3, [r3, #0]
 80144e8:	061a      	lsls	r2, r3, #24
 80144ea:	687b      	ldr	r3, [r7, #4]
 80144ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80144ee:	431a      	orrs	r2, r3
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	625a      	str	r2, [r3, #36]	@ 0x24

    return LORAMAC_PARSER_SUCCESS;
 80144f4:	2300      	movs	r3, #0
}
 80144f6:	4618      	mov	r0, r3
 80144f8:	3710      	adds	r7, #16
 80144fa:	46bd      	mov	sp, r7
 80144fc:	bd80      	pop	{r7, pc}

080144fe <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 80144fe:	b580      	push	{r7, lr}
 8014500:	b084      	sub	sp, #16
 8014502:	af00      	add	r7, sp, #0
 8014504:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8014506:	687b      	ldr	r3, [r7, #4]
 8014508:	2b00      	cmp	r3, #0
 801450a:	d003      	beq.n	8014514 <LoRaMacParserData+0x16>
 801450c:	687b      	ldr	r3, [r7, #4]
 801450e:	681b      	ldr	r3, [r3, #0]
 8014510:	2b00      	cmp	r3, #0
 8014512:	d101      	bne.n	8014518 <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8014514:	2302      	movs	r3, #2
 8014516:	e0e0      	b.n	80146da <LoRaMacParserData+0x1dc>
    }

    uint16_t bufItr = 0;
 8014518:	2300      	movs	r3, #0
 801451a:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 801451c:	687b      	ldr	r3, [r7, #4]
 801451e:	681a      	ldr	r2, [r3, #0]
 8014520:	89fb      	ldrh	r3, [r7, #14]
 8014522:	1c59      	adds	r1, r3, #1
 8014524:	81f9      	strh	r1, [r7, #14]
 8014526:	4413      	add	r3, r2
 8014528:	781a      	ldrb	r2, [r3, #0]
 801452a:	687b      	ldr	r3, [r7, #4]
 801452c:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 801452e:	687b      	ldr	r3, [r7, #4]
 8014530:	681a      	ldr	r2, [r3, #0]
 8014532:	89fb      	ldrh	r3, [r7, #14]
 8014534:	1c59      	adds	r1, r3, #1
 8014536:	81f9      	strh	r1, [r7, #14]
 8014538:	4413      	add	r3, r2
 801453a:	781b      	ldrb	r3, [r3, #0]
 801453c:	461a      	mov	r2, r3
 801453e:	687b      	ldr	r3, [r7, #4]
 8014540:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8014542:	687b      	ldr	r3, [r7, #4]
 8014544:	681a      	ldr	r2, [r3, #0]
 8014546:	89fb      	ldrh	r3, [r7, #14]
 8014548:	1c59      	adds	r1, r3, #1
 801454a:	81f9      	strh	r1, [r7, #14]
 801454c:	4413      	add	r3, r2
 801454e:	781b      	ldrb	r3, [r3, #0]
 8014550:	021a      	lsls	r2, r3, #8
 8014552:	687b      	ldr	r3, [r7, #4]
 8014554:	689b      	ldr	r3, [r3, #8]
 8014556:	431a      	orrs	r2, r3
 8014558:	687b      	ldr	r3, [r7, #4]
 801455a:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 801455c:	687b      	ldr	r3, [r7, #4]
 801455e:	681a      	ldr	r2, [r3, #0]
 8014560:	89fb      	ldrh	r3, [r7, #14]
 8014562:	1c59      	adds	r1, r3, #1
 8014564:	81f9      	strh	r1, [r7, #14]
 8014566:	4413      	add	r3, r2
 8014568:	781b      	ldrb	r3, [r3, #0]
 801456a:	041a      	lsls	r2, r3, #16
 801456c:	687b      	ldr	r3, [r7, #4]
 801456e:	689b      	ldr	r3, [r3, #8]
 8014570:	431a      	orrs	r2, r3
 8014572:	687b      	ldr	r3, [r7, #4]
 8014574:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8014576:	687b      	ldr	r3, [r7, #4]
 8014578:	681a      	ldr	r2, [r3, #0]
 801457a:	89fb      	ldrh	r3, [r7, #14]
 801457c:	1c59      	adds	r1, r3, #1
 801457e:	81f9      	strh	r1, [r7, #14]
 8014580:	4413      	add	r3, r2
 8014582:	781b      	ldrb	r3, [r3, #0]
 8014584:	061a      	lsls	r2, r3, #24
 8014586:	687b      	ldr	r3, [r7, #4]
 8014588:	689b      	ldr	r3, [r3, #8]
 801458a:	431a      	orrs	r2, r3
 801458c:	687b      	ldr	r3, [r7, #4]
 801458e:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 8014590:	687b      	ldr	r3, [r7, #4]
 8014592:	681a      	ldr	r2, [r3, #0]
 8014594:	89fb      	ldrh	r3, [r7, #14]
 8014596:	1c59      	adds	r1, r3, #1
 8014598:	81f9      	strh	r1, [r7, #14]
 801459a:	4413      	add	r3, r2
 801459c:	781a      	ldrb	r2, [r3, #0]
 801459e:	687b      	ldr	r3, [r7, #4]
 80145a0:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 80145a2:	687b      	ldr	r3, [r7, #4]
 80145a4:	681a      	ldr	r2, [r3, #0]
 80145a6:	89fb      	ldrh	r3, [r7, #14]
 80145a8:	1c59      	adds	r1, r3, #1
 80145aa:	81f9      	strh	r1, [r7, #14]
 80145ac:	4413      	add	r3, r2
 80145ae:	781b      	ldrb	r3, [r3, #0]
 80145b0:	461a      	mov	r2, r3
 80145b2:	687b      	ldr	r3, [r7, #4]
 80145b4:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 80145b6:	687b      	ldr	r3, [r7, #4]
 80145b8:	681a      	ldr	r2, [r3, #0]
 80145ba:	89fb      	ldrh	r3, [r7, #14]
 80145bc:	1c59      	adds	r1, r3, #1
 80145be:	81f9      	strh	r1, [r7, #14]
 80145c0:	4413      	add	r3, r2
 80145c2:	781b      	ldrb	r3, [r3, #0]
 80145c4:	0219      	lsls	r1, r3, #8
 80145c6:	687b      	ldr	r3, [r7, #4]
 80145c8:	89db      	ldrh	r3, [r3, #14]
 80145ca:	b21a      	sxth	r2, r3
 80145cc:	b20b      	sxth	r3, r1
 80145ce:	4313      	orrs	r3, r2
 80145d0:	b21b      	sxth	r3, r3
 80145d2:	b29a      	uxth	r2, r3
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	81da      	strh	r2, [r3, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 80145d8:	687b      	ldr	r3, [r7, #4]
 80145da:	f103 0010 	add.w	r0, r3, #16
 80145de:	687b      	ldr	r3, [r7, #4]
 80145e0:	681a      	ldr	r2, [r3, #0]
 80145e2:	89fb      	ldrh	r3, [r7, #14]
 80145e4:	18d1      	adds	r1, r2, r3
 80145e6:	687b      	ldr	r3, [r7, #4]
 80145e8:	7b1b      	ldrb	r3, [r3, #12]
 80145ea:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80145ee:	b2db      	uxtb	r3, r3
 80145f0:	461a      	mov	r2, r3
 80145f2:	f002 fc9e 	bl	8016f32 <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	7b1b      	ldrb	r3, [r3, #12]
 80145fa:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80145fe:	b2db      	uxtb	r3, r3
 8014600:	461a      	mov	r2, r3
 8014602:	89fb      	ldrh	r3, [r7, #14]
 8014604:	4413      	add	r3, r2
 8014606:	81fb      	strh	r3, [r7, #14]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	2200      	movs	r2, #0
 801460c:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	2200      	movs	r2, #0
 8014614:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8014618:	687b      	ldr	r3, [r7, #4]
 801461a:	791b      	ldrb	r3, [r3, #4]
 801461c:	461a      	mov	r2, r3
 801461e:	89fb      	ldrh	r3, [r7, #14]
 8014620:	1ad3      	subs	r3, r2, r3
 8014622:	2b04      	cmp	r3, #4
 8014624:	dd27      	ble.n	8014676 <LoRaMacParserData+0x178>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 8014626:	687b      	ldr	r3, [r7, #4]
 8014628:	681a      	ldr	r2, [r3, #0]
 801462a:	89fb      	ldrh	r3, [r7, #14]
 801462c:	1c59      	adds	r1, r3, #1
 801462e:	81f9      	strh	r1, [r7, #14]
 8014630:	4413      	add	r3, r2
 8014632:	781a      	ldrb	r2, [r3, #0]
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 801463a:	687b      	ldr	r3, [r7, #4]
 801463c:	791a      	ldrb	r2, [r3, #4]
 801463e:	89fb      	ldrh	r3, [r7, #14]
 8014640:	b2db      	uxtb	r3, r3
 8014642:	1ad3      	subs	r3, r2, r3
 8014644:	b2db      	uxtb	r3, r3
 8014646:	3b04      	subs	r3, #4
 8014648:	b2da      	uxtb	r2, r3
 801464a:	687b      	ldr	r3, [r7, #4]
 801464c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 8014650:	687b      	ldr	r3, [r7, #4]
 8014652:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8014654:	687b      	ldr	r3, [r7, #4]
 8014656:	681a      	ldr	r2, [r3, #0]
 8014658:	89fb      	ldrh	r3, [r7, #14]
 801465a:	18d1      	adds	r1, r2, r3
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014662:	461a      	mov	r2, r3
 8014664:	f002 fc65 	bl	8016f32 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 8014668:	687b      	ldr	r3, [r7, #4]
 801466a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801466e:	461a      	mov	r2, r3
 8014670:	89fb      	ldrh	r3, [r7, #14]
 8014672:	4413      	add	r3, r2
 8014674:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8014676:	687b      	ldr	r3, [r7, #4]
 8014678:	681a      	ldr	r2, [r3, #0]
 801467a:	687b      	ldr	r3, [r7, #4]
 801467c:	791b      	ldrb	r3, [r3, #4]
 801467e:	3b04      	subs	r3, #4
 8014680:	4413      	add	r3, r2
 8014682:	781b      	ldrb	r3, [r3, #0]
 8014684:	461a      	mov	r2, r3
 8014686:	687b      	ldr	r3, [r7, #4]
 8014688:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 801468a:	687b      	ldr	r3, [r7, #4]
 801468c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801468e:	687b      	ldr	r3, [r7, #4]
 8014690:	6819      	ldr	r1, [r3, #0]
 8014692:	687b      	ldr	r3, [r7, #4]
 8014694:	791b      	ldrb	r3, [r3, #4]
 8014696:	3b03      	subs	r3, #3
 8014698:	440b      	add	r3, r1
 801469a:	781b      	ldrb	r3, [r3, #0]
 801469c:	021b      	lsls	r3, r3, #8
 801469e:	431a      	orrs	r2, r3
 80146a0:	687b      	ldr	r3, [r7, #4]
 80146a2:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80146a8:	687b      	ldr	r3, [r7, #4]
 80146aa:	6819      	ldr	r1, [r3, #0]
 80146ac:	687b      	ldr	r3, [r7, #4]
 80146ae:	791b      	ldrb	r3, [r3, #4]
 80146b0:	3b02      	subs	r3, #2
 80146b2:	440b      	add	r3, r1
 80146b4:	781b      	ldrb	r3, [r3, #0]
 80146b6:	041b      	lsls	r3, r3, #16
 80146b8:	431a      	orrs	r2, r3
 80146ba:	687b      	ldr	r3, [r7, #4]
 80146bc:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 80146be:	687b      	ldr	r3, [r7, #4]
 80146c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80146c2:	687b      	ldr	r3, [r7, #4]
 80146c4:	6819      	ldr	r1, [r3, #0]
 80146c6:	687b      	ldr	r3, [r7, #4]
 80146c8:	791b      	ldrb	r3, [r3, #4]
 80146ca:	3b01      	subs	r3, #1
 80146cc:	440b      	add	r3, r1
 80146ce:	781b      	ldrb	r3, [r3, #0]
 80146d0:	061b      	lsls	r3, r3, #24
 80146d2:	431a      	orrs	r2, r3
 80146d4:	687b      	ldr	r3, [r7, #4]
 80146d6:	62da      	str	r2, [r3, #44]	@ 0x2c

    return LORAMAC_PARSER_SUCCESS;
 80146d8:	2300      	movs	r3, #0
}
 80146da:	4618      	mov	r0, r3
 80146dc:	3710      	adds	r7, #16
 80146de:	46bd      	mov	sp, r7
 80146e0:	bd80      	pop	{r7, pc}

080146e2 <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 80146e2:	b580      	push	{r7, lr}
 80146e4:	b084      	sub	sp, #16
 80146e6:	af00      	add	r7, sp, #0
 80146e8:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80146ea:	687b      	ldr	r3, [r7, #4]
 80146ec:	2b00      	cmp	r3, #0
 80146ee:	d003      	beq.n	80146f8 <LoRaMacSerializerJoinRequest+0x16>
 80146f0:	687b      	ldr	r3, [r7, #4]
 80146f2:	681b      	ldr	r3, [r3, #0]
 80146f4:	2b00      	cmp	r3, #0
 80146f6:	d101      	bne.n	80146fc <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 80146f8:	2301      	movs	r3, #1
 80146fa:	e070      	b.n	80147de <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 80146fc:	2300      	movs	r3, #0
 80146fe:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	791b      	ldrb	r3, [r3, #4]
 8014704:	2b16      	cmp	r3, #22
 8014706:	d801      	bhi.n	801470c <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8014708:	2302      	movs	r3, #2
 801470a:	e068      	b.n	80147de <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	681a      	ldr	r2, [r3, #0]
 8014710:	89fb      	ldrh	r3, [r7, #14]
 8014712:	1c59      	adds	r1, r3, #1
 8014714:	81f9      	strh	r1, [r7, #14]
 8014716:	4413      	add	r3, r2
 8014718:	687a      	ldr	r2, [r7, #4]
 801471a:	7952      	ldrb	r2, [r2, #5]
 801471c:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 801471e:	687b      	ldr	r3, [r7, #4]
 8014720:	681a      	ldr	r2, [r3, #0]
 8014722:	89fb      	ldrh	r3, [r7, #14]
 8014724:	18d0      	adds	r0, r2, r3
 8014726:	687b      	ldr	r3, [r7, #4]
 8014728:	3306      	adds	r3, #6
 801472a:	2208      	movs	r2, #8
 801472c:	4619      	mov	r1, r3
 801472e:	f002 fc1b 	bl	8016f68 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 8014732:	89fb      	ldrh	r3, [r7, #14]
 8014734:	3308      	adds	r3, #8
 8014736:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 8014738:	687b      	ldr	r3, [r7, #4]
 801473a:	681a      	ldr	r2, [r3, #0]
 801473c:	89fb      	ldrh	r3, [r7, #14]
 801473e:	18d0      	adds	r0, r2, r3
 8014740:	687b      	ldr	r3, [r7, #4]
 8014742:	330e      	adds	r3, #14
 8014744:	2208      	movs	r2, #8
 8014746:	4619      	mov	r1, r3
 8014748:	f002 fc0e 	bl	8016f68 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 801474c:	89fb      	ldrh	r3, [r7, #14]
 801474e:	3308      	adds	r3, #8
 8014750:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 8014752:	687b      	ldr	r3, [r7, #4]
 8014754:	8ad9      	ldrh	r1, [r3, #22]
 8014756:	687b      	ldr	r3, [r7, #4]
 8014758:	681a      	ldr	r2, [r3, #0]
 801475a:	89fb      	ldrh	r3, [r7, #14]
 801475c:	1c58      	adds	r0, r3, #1
 801475e:	81f8      	strh	r0, [r7, #14]
 8014760:	4413      	add	r3, r2
 8014762:	b2ca      	uxtb	r2, r1
 8014764:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	8adb      	ldrh	r3, [r3, #22]
 801476a:	0a1b      	lsrs	r3, r3, #8
 801476c:	b299      	uxth	r1, r3
 801476e:	687b      	ldr	r3, [r7, #4]
 8014770:	681a      	ldr	r2, [r3, #0]
 8014772:	89fb      	ldrh	r3, [r7, #14]
 8014774:	1c58      	adds	r0, r3, #1
 8014776:	81f8      	strh	r0, [r7, #14]
 8014778:	4413      	add	r3, r2
 801477a:	b2ca      	uxtb	r2, r1
 801477c:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	6999      	ldr	r1, [r3, #24]
 8014782:	687b      	ldr	r3, [r7, #4]
 8014784:	681a      	ldr	r2, [r3, #0]
 8014786:	89fb      	ldrh	r3, [r7, #14]
 8014788:	1c58      	adds	r0, r3, #1
 801478a:	81f8      	strh	r0, [r7, #14]
 801478c:	4413      	add	r3, r2
 801478e:	b2ca      	uxtb	r2, r1
 8014790:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8014792:	687b      	ldr	r3, [r7, #4]
 8014794:	699b      	ldr	r3, [r3, #24]
 8014796:	0a19      	lsrs	r1, r3, #8
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	681a      	ldr	r2, [r3, #0]
 801479c:	89fb      	ldrh	r3, [r7, #14]
 801479e:	1c58      	adds	r0, r3, #1
 80147a0:	81f8      	strh	r0, [r7, #14]
 80147a2:	4413      	add	r3, r2
 80147a4:	b2ca      	uxtb	r2, r1
 80147a6:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 80147a8:	687b      	ldr	r3, [r7, #4]
 80147aa:	699b      	ldr	r3, [r3, #24]
 80147ac:	0c19      	lsrs	r1, r3, #16
 80147ae:	687b      	ldr	r3, [r7, #4]
 80147b0:	681a      	ldr	r2, [r3, #0]
 80147b2:	89fb      	ldrh	r3, [r7, #14]
 80147b4:	1c58      	adds	r0, r3, #1
 80147b6:	81f8      	strh	r0, [r7, #14]
 80147b8:	4413      	add	r3, r2
 80147ba:	b2ca      	uxtb	r2, r1
 80147bc:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 80147be:	687b      	ldr	r3, [r7, #4]
 80147c0:	699b      	ldr	r3, [r3, #24]
 80147c2:	0e19      	lsrs	r1, r3, #24
 80147c4:	687b      	ldr	r3, [r7, #4]
 80147c6:	681a      	ldr	r2, [r3, #0]
 80147c8:	89fb      	ldrh	r3, [r7, #14]
 80147ca:	1c58      	adds	r0, r3, #1
 80147cc:	81f8      	strh	r0, [r7, #14]
 80147ce:	4413      	add	r3, r2
 80147d0:	b2ca      	uxtb	r2, r1
 80147d2:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 80147d4:	89fb      	ldrh	r3, [r7, #14]
 80147d6:	b2da      	uxtb	r2, r3
 80147d8:	687b      	ldr	r3, [r7, #4]
 80147da:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 80147dc:	2300      	movs	r3, #0
}
 80147de:	4618      	mov	r0, r3
 80147e0:	3710      	adds	r7, #16
 80147e2:	46bd      	mov	sp, r7
 80147e4:	bd80      	pop	{r7, pc}

080147e6 <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 80147e6:	b580      	push	{r7, lr}
 80147e8:	b084      	sub	sp, #16
 80147ea:	af00      	add	r7, sp, #0
 80147ec:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80147ee:	687b      	ldr	r3, [r7, #4]
 80147f0:	2b00      	cmp	r3, #0
 80147f2:	d003      	beq.n	80147fc <LoRaMacSerializerData+0x16>
 80147f4:	687b      	ldr	r3, [r7, #4]
 80147f6:	681b      	ldr	r3, [r3, #0]
 80147f8:	2b00      	cmp	r3, #0
 80147fa:	d101      	bne.n	8014800 <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 80147fc:	2301      	movs	r3, #1
 80147fe:	e0e3      	b.n	80149c8 <LoRaMacSerializerData+0x1e2>
    }

    uint16_t bufItr = 0;
 8014800:	2300      	movs	r3, #0
 8014802:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 8014804:	2308      	movs	r3, #8
 8014806:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8014808:	687b      	ldr	r3, [r7, #4]
 801480a:	7b1b      	ldrb	r3, [r3, #12]
 801480c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8014810:	b2db      	uxtb	r3, r3
 8014812:	461a      	mov	r2, r3
 8014814:	89bb      	ldrh	r3, [r7, #12]
 8014816:	4413      	add	r3, r2
 8014818:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 801481a:	687b      	ldr	r3, [r7, #4]
 801481c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014820:	2b00      	cmp	r3, #0
 8014822:	d002      	beq.n	801482a <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 8014824:	89bb      	ldrh	r3, [r7, #12]
 8014826:	3301      	adds	r3, #1
 8014828:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 801482a:	687b      	ldr	r3, [r7, #4]
 801482c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014830:	461a      	mov	r2, r3
 8014832:	89bb      	ldrh	r3, [r7, #12]
 8014834:	4413      	add	r3, r2
 8014836:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 8014838:	89bb      	ldrh	r3, [r7, #12]
 801483a:	3304      	adds	r3, #4
 801483c:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 801483e:	687b      	ldr	r3, [r7, #4]
 8014840:	791b      	ldrb	r3, [r3, #4]
 8014842:	461a      	mov	r2, r3
 8014844:	89bb      	ldrh	r3, [r7, #12]
 8014846:	4293      	cmp	r3, r2
 8014848:	d901      	bls.n	801484e <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 801484a:	2302      	movs	r3, #2
 801484c:	e0bc      	b.n	80149c8 <LoRaMacSerializerData+0x1e2>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 801484e:	687b      	ldr	r3, [r7, #4]
 8014850:	681a      	ldr	r2, [r3, #0]
 8014852:	89fb      	ldrh	r3, [r7, #14]
 8014854:	1c59      	adds	r1, r3, #1
 8014856:	81f9      	strh	r1, [r7, #14]
 8014858:	4413      	add	r3, r2
 801485a:	687a      	ldr	r2, [r7, #4]
 801485c:	7952      	ldrb	r2, [r2, #5]
 801485e:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 8014860:	687b      	ldr	r3, [r7, #4]
 8014862:	6899      	ldr	r1, [r3, #8]
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	681a      	ldr	r2, [r3, #0]
 8014868:	89fb      	ldrh	r3, [r7, #14]
 801486a:	1c58      	adds	r0, r3, #1
 801486c:	81f8      	strh	r0, [r7, #14]
 801486e:	4413      	add	r3, r2
 8014870:	b2ca      	uxtb	r2, r1
 8014872:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 8014874:	687b      	ldr	r3, [r7, #4]
 8014876:	689b      	ldr	r3, [r3, #8]
 8014878:	0a19      	lsrs	r1, r3, #8
 801487a:	687b      	ldr	r3, [r7, #4]
 801487c:	681a      	ldr	r2, [r3, #0]
 801487e:	89fb      	ldrh	r3, [r7, #14]
 8014880:	1c58      	adds	r0, r3, #1
 8014882:	81f8      	strh	r0, [r7, #14]
 8014884:	4413      	add	r3, r2
 8014886:	b2ca      	uxtb	r2, r1
 8014888:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 801488a:	687b      	ldr	r3, [r7, #4]
 801488c:	689b      	ldr	r3, [r3, #8]
 801488e:	0c19      	lsrs	r1, r3, #16
 8014890:	687b      	ldr	r3, [r7, #4]
 8014892:	681a      	ldr	r2, [r3, #0]
 8014894:	89fb      	ldrh	r3, [r7, #14]
 8014896:	1c58      	adds	r0, r3, #1
 8014898:	81f8      	strh	r0, [r7, #14]
 801489a:	4413      	add	r3, r2
 801489c:	b2ca      	uxtb	r2, r1
 801489e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 80148a0:	687b      	ldr	r3, [r7, #4]
 80148a2:	689b      	ldr	r3, [r3, #8]
 80148a4:	0e19      	lsrs	r1, r3, #24
 80148a6:	687b      	ldr	r3, [r7, #4]
 80148a8:	681a      	ldr	r2, [r3, #0]
 80148aa:	89fb      	ldrh	r3, [r7, #14]
 80148ac:	1c58      	adds	r0, r3, #1
 80148ae:	81f8      	strh	r0, [r7, #14]
 80148b0:	4413      	add	r3, r2
 80148b2:	b2ca      	uxtb	r2, r1
 80148b4:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 80148b6:	687b      	ldr	r3, [r7, #4]
 80148b8:	681a      	ldr	r2, [r3, #0]
 80148ba:	89fb      	ldrh	r3, [r7, #14]
 80148bc:	1c59      	adds	r1, r3, #1
 80148be:	81f9      	strh	r1, [r7, #14]
 80148c0:	4413      	add	r3, r2
 80148c2:	687a      	ldr	r2, [r7, #4]
 80148c4:	7b12      	ldrb	r2, [r2, #12]
 80148c6:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 80148c8:	687b      	ldr	r3, [r7, #4]
 80148ca:	89d9      	ldrh	r1, [r3, #14]
 80148cc:	687b      	ldr	r3, [r7, #4]
 80148ce:	681a      	ldr	r2, [r3, #0]
 80148d0:	89fb      	ldrh	r3, [r7, #14]
 80148d2:	1c58      	adds	r0, r3, #1
 80148d4:	81f8      	strh	r0, [r7, #14]
 80148d6:	4413      	add	r3, r2
 80148d8:	b2ca      	uxtb	r2, r1
 80148da:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 80148dc:	687b      	ldr	r3, [r7, #4]
 80148de:	89db      	ldrh	r3, [r3, #14]
 80148e0:	0a1b      	lsrs	r3, r3, #8
 80148e2:	b299      	uxth	r1, r3
 80148e4:	687b      	ldr	r3, [r7, #4]
 80148e6:	681a      	ldr	r2, [r3, #0]
 80148e8:	89fb      	ldrh	r3, [r7, #14]
 80148ea:	1c58      	adds	r0, r3, #1
 80148ec:	81f8      	strh	r0, [r7, #14]
 80148ee:	4413      	add	r3, r2
 80148f0:	b2ca      	uxtb	r2, r1
 80148f2:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 80148f4:	687b      	ldr	r3, [r7, #4]
 80148f6:	681a      	ldr	r2, [r3, #0]
 80148f8:	89fb      	ldrh	r3, [r7, #14]
 80148fa:	18d0      	adds	r0, r2, r3
 80148fc:	687b      	ldr	r3, [r7, #4]
 80148fe:	f103 0110 	add.w	r1, r3, #16
 8014902:	687b      	ldr	r3, [r7, #4]
 8014904:	7b1b      	ldrb	r3, [r3, #12]
 8014906:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801490a:	b2db      	uxtb	r3, r3
 801490c:	461a      	mov	r2, r3
 801490e:	f002 fb10 	bl	8016f32 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8014912:	687b      	ldr	r3, [r7, #4]
 8014914:	7b1b      	ldrb	r3, [r3, #12]
 8014916:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801491a:	b2db      	uxtb	r3, r3
 801491c:	461a      	mov	r2, r3
 801491e:	89fb      	ldrh	r3, [r7, #14]
 8014920:	4413      	add	r3, r2
 8014922:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 8014924:	687b      	ldr	r3, [r7, #4]
 8014926:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801492a:	2b00      	cmp	r3, #0
 801492c:	d009      	beq.n	8014942 <LoRaMacSerializerData+0x15c>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 801492e:	687b      	ldr	r3, [r7, #4]
 8014930:	681a      	ldr	r2, [r3, #0]
 8014932:	89fb      	ldrh	r3, [r7, #14]
 8014934:	1c59      	adds	r1, r3, #1
 8014936:	81f9      	strh	r1, [r7, #14]
 8014938:	4413      	add	r3, r2
 801493a:	687a      	ldr	r2, [r7, #4]
 801493c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8014940:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 8014942:	687b      	ldr	r3, [r7, #4]
 8014944:	681a      	ldr	r2, [r3, #0]
 8014946:	89fb      	ldrh	r3, [r7, #14]
 8014948:	18d0      	adds	r0, r2, r3
 801494a:	687b      	ldr	r3, [r7, #4]
 801494c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 801494e:	687b      	ldr	r3, [r7, #4]
 8014950:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014954:	461a      	mov	r2, r3
 8014956:	f002 faec 	bl	8016f32 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 801495a:	687b      	ldr	r3, [r7, #4]
 801495c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014960:	461a      	mov	r2, r3
 8014962:	89fb      	ldrh	r3, [r7, #14]
 8014964:	4413      	add	r3, r2
 8014966:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8014968:	687b      	ldr	r3, [r7, #4]
 801496a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 801496c:	687b      	ldr	r3, [r7, #4]
 801496e:	681a      	ldr	r2, [r3, #0]
 8014970:	89fb      	ldrh	r3, [r7, #14]
 8014972:	1c58      	adds	r0, r3, #1
 8014974:	81f8      	strh	r0, [r7, #14]
 8014976:	4413      	add	r3, r2
 8014978:	b2ca      	uxtb	r2, r1
 801497a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 801497c:	687b      	ldr	r3, [r7, #4]
 801497e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014980:	0a19      	lsrs	r1, r3, #8
 8014982:	687b      	ldr	r3, [r7, #4]
 8014984:	681a      	ldr	r2, [r3, #0]
 8014986:	89fb      	ldrh	r3, [r7, #14]
 8014988:	1c58      	adds	r0, r3, #1
 801498a:	81f8      	strh	r0, [r7, #14]
 801498c:	4413      	add	r3, r2
 801498e:	b2ca      	uxtb	r2, r1
 8014990:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8014992:	687b      	ldr	r3, [r7, #4]
 8014994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014996:	0c19      	lsrs	r1, r3, #16
 8014998:	687b      	ldr	r3, [r7, #4]
 801499a:	681a      	ldr	r2, [r3, #0]
 801499c:	89fb      	ldrh	r3, [r7, #14]
 801499e:	1c58      	adds	r0, r3, #1
 80149a0:	81f8      	strh	r0, [r7, #14]
 80149a2:	4413      	add	r3, r2
 80149a4:	b2ca      	uxtb	r2, r1
 80149a6:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 80149a8:	687b      	ldr	r3, [r7, #4]
 80149aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80149ac:	0e19      	lsrs	r1, r3, #24
 80149ae:	687b      	ldr	r3, [r7, #4]
 80149b0:	681a      	ldr	r2, [r3, #0]
 80149b2:	89fb      	ldrh	r3, [r7, #14]
 80149b4:	1c58      	adds	r0, r3, #1
 80149b6:	81f8      	strh	r0, [r7, #14]
 80149b8:	4413      	add	r3, r2
 80149ba:	b2ca      	uxtb	r2, r1
 80149bc:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 80149be:	89fb      	ldrh	r3, [r7, #14]
 80149c0:	b2da      	uxtb	r2, r3
 80149c2:	687b      	ldr	r3, [r7, #4]
 80149c4:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 80149c6:	2300      	movs	r3, #0
}
 80149c8:	4618      	mov	r0, r3
 80149ca:	3710      	adds	r7, #16
 80149cc:	46bd      	mov	sp, r7
 80149ce:	bd80      	pop	{r7, pc}

080149d0 <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 80149d0:	b480      	push	{r7}
 80149d2:	b083      	sub	sp, #12
 80149d4:	af00      	add	r7, sp, #0
 80149d6:	4603      	mov	r3, r0
 80149d8:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80149da:	79fb      	ldrb	r3, [r7, #7]
 80149dc:	2b00      	cmp	r3, #0
 80149de:	d101      	bne.n	80149e4 <RegionIsActive+0x14>
    {
        AS923_IS_ACTIVE( );
 80149e0:	2301      	movs	r3, #1
 80149e2:	e000      	b.n	80149e6 <RegionIsActive+0x16>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 80149e4:	2300      	movs	r3, #0
        }
    }
}
 80149e6:	4618      	mov	r0, r3
 80149e8:	370c      	adds	r7, #12
 80149ea:	46bd      	mov	sp, r7
 80149ec:	bc80      	pop	{r7}
 80149ee:	4770      	bx	lr

080149f0 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 80149f0:	b580      	push	{r7, lr}
 80149f2:	b084      	sub	sp, #16
 80149f4:	af00      	add	r7, sp, #0
 80149f6:	4603      	mov	r3, r0
 80149f8:	6039      	str	r1, [r7, #0]
 80149fa:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 80149fc:	2300      	movs	r3, #0
 80149fe:	60bb      	str	r3, [r7, #8]
    switch( region )
 8014a00:	79fb      	ldrb	r3, [r7, #7]
 8014a02:	2b00      	cmp	r3, #0
 8014a04:	d105      	bne.n	8014a12 <RegionGetPhyParam+0x22>
    {
        AS923_GET_PHY_PARAM( );
 8014a06:	6838      	ldr	r0, [r7, #0]
 8014a08:	f000 f9ec 	bl	8014de4 <RegionAS923GetPhyParam>
 8014a0c:	4603      	mov	r3, r0
 8014a0e:	60fb      	str	r3, [r7, #12]
 8014a10:	e001      	b.n	8014a16 <RegionGetPhyParam+0x26>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 8014a12:	68bb      	ldr	r3, [r7, #8]
 8014a14:	60fb      	str	r3, [r7, #12]
        }
    }
}
 8014a16:	68fb      	ldr	r3, [r7, #12]
 8014a18:	4618      	mov	r0, r3
 8014a1a:	3710      	adds	r7, #16
 8014a1c:	46bd      	mov	sp, r7
 8014a1e:	bd80      	pop	{r7, pc}

08014a20 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 8014a20:	b580      	push	{r7, lr}
 8014a22:	b082      	sub	sp, #8
 8014a24:	af00      	add	r7, sp, #0
 8014a26:	4603      	mov	r3, r0
 8014a28:	6039      	str	r1, [r7, #0]
 8014a2a:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014a2c:	79fb      	ldrb	r3, [r7, #7]
 8014a2e:	2b00      	cmp	r3, #0
 8014a30:	d103      	bne.n	8014a3a <RegionSetBandTxDone+0x1a>
    {
        AS923_SET_BAND_TX_DONE( );
 8014a32:	6838      	ldr	r0, [r7, #0]
 8014a34:	f000 fb4c 	bl	80150d0 <RegionAS923SetBandTxDone>
 8014a38:	e000      	b.n	8014a3c <RegionSetBandTxDone+0x1c>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 8014a3a:	bf00      	nop
        }
    }
}
 8014a3c:	3708      	adds	r7, #8
 8014a3e:	46bd      	mov	sp, r7
 8014a40:	bd80      	pop	{r7, pc}

08014a42 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 8014a42:	b580      	push	{r7, lr}
 8014a44:	b082      	sub	sp, #8
 8014a46:	af00      	add	r7, sp, #0
 8014a48:	4603      	mov	r3, r0
 8014a4a:	6039      	str	r1, [r7, #0]
 8014a4c:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014a4e:	79fb      	ldrb	r3, [r7, #7]
 8014a50:	2b00      	cmp	r3, #0
 8014a52:	d103      	bne.n	8014a5c <RegionInitDefaults+0x1a>
    {
        AS923_INIT_DEFAULTS( );
 8014a54:	6838      	ldr	r0, [r7, #0]
 8014a56:	f000 fb67 	bl	8015128 <RegionAS923InitDefaults>
 8014a5a:	e000      	b.n	8014a5e <RegionInitDefaults+0x1c>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 8014a5c:	bf00      	nop
        }
    }
}
 8014a5e:	bf00      	nop
 8014a60:	3708      	adds	r7, #8
 8014a62:	46bd      	mov	sp, r7
 8014a64:	bd80      	pop	{r7, pc}

08014a66 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8014a66:	b580      	push	{r7, lr}
 8014a68:	b082      	sub	sp, #8
 8014a6a:	af00      	add	r7, sp, #0
 8014a6c:	4603      	mov	r3, r0
 8014a6e:	6039      	str	r1, [r7, #0]
 8014a70:	71fb      	strb	r3, [r7, #7]
 8014a72:	4613      	mov	r3, r2
 8014a74:	71bb      	strb	r3, [r7, #6]
    switch( region )
 8014a76:	79fb      	ldrb	r3, [r7, #7]
 8014a78:	2b00      	cmp	r3, #0
 8014a7a:	d106      	bne.n	8014a8a <RegionVerify+0x24>
    {
        AS923_VERIFY( );
 8014a7c:	79bb      	ldrb	r3, [r7, #6]
 8014a7e:	4619      	mov	r1, r3
 8014a80:	6838      	ldr	r0, [r7, #0]
 8014a82:	f000 fbe3 	bl	801524c <RegionAS923Verify>
 8014a86:	4603      	mov	r3, r0
 8014a88:	e000      	b.n	8014a8c <RegionVerify+0x26>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 8014a8a:	2300      	movs	r3, #0
        }
    }
}
 8014a8c:	4618      	mov	r0, r3
 8014a8e:	3708      	adds	r7, #8
 8014a90:	46bd      	mov	sp, r7
 8014a92:	bd80      	pop	{r7, pc}

08014a94 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 8014a94:	b580      	push	{r7, lr}
 8014a96:	b082      	sub	sp, #8
 8014a98:	af00      	add	r7, sp, #0
 8014a9a:	4603      	mov	r3, r0
 8014a9c:	6039      	str	r1, [r7, #0]
 8014a9e:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014aa0:	79fb      	ldrb	r3, [r7, #7]
 8014aa2:	2b00      	cmp	r3, #0
 8014aa4:	d103      	bne.n	8014aae <RegionApplyCFList+0x1a>
    {
        AS923_APPLY_CF_LIST( );
 8014aa6:	6838      	ldr	r0, [r7, #0]
 8014aa8:	f000 fc6e 	bl	8015388 <RegionAS923ApplyCFList>
 8014aac:	e000      	b.n	8014ab0 <RegionApplyCFList+0x1c>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 8014aae:	bf00      	nop
        }
    }
}
 8014ab0:	bf00      	nop
 8014ab2:	3708      	adds	r7, #8
 8014ab4:	46bd      	mov	sp, r7
 8014ab6:	bd80      	pop	{r7, pc}

08014ab8 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 8014ab8:	b580      	push	{r7, lr}
 8014aba:	b082      	sub	sp, #8
 8014abc:	af00      	add	r7, sp, #0
 8014abe:	4603      	mov	r3, r0
 8014ac0:	6039      	str	r1, [r7, #0]
 8014ac2:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014ac4:	79fb      	ldrb	r3, [r7, #7]
 8014ac6:	2b00      	cmp	r3, #0
 8014ac8:	d104      	bne.n	8014ad4 <RegionChanMaskSet+0x1c>
    {
        AS923_CHAN_MASK_SET( );
 8014aca:	6838      	ldr	r0, [r7, #0]
 8014acc:	f000 fcd0 	bl	8015470 <RegionAS923ChanMaskSet>
 8014ad0:	4603      	mov	r3, r0
 8014ad2:	e000      	b.n	8014ad6 <RegionChanMaskSet+0x1e>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 8014ad4:	2300      	movs	r3, #0
        }
    }
}
 8014ad6:	4618      	mov	r0, r3
 8014ad8:	3708      	adds	r7, #8
 8014ada:	46bd      	mov	sp, r7
 8014adc:	bd80      	pop	{r7, pc}

08014ade <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8014ade:	b580      	push	{r7, lr}
 8014ae0:	b082      	sub	sp, #8
 8014ae2:	af00      	add	r7, sp, #0
 8014ae4:	603b      	str	r3, [r7, #0]
 8014ae6:	4603      	mov	r3, r0
 8014ae8:	71fb      	strb	r3, [r7, #7]
 8014aea:	460b      	mov	r3, r1
 8014aec:	71bb      	strb	r3, [r7, #6]
 8014aee:	4613      	mov	r3, r2
 8014af0:	717b      	strb	r3, [r7, #5]
    switch( region )
 8014af2:	79fb      	ldrb	r3, [r7, #7]
 8014af4:	2b00      	cmp	r3, #0
 8014af6:	d107      	bne.n	8014b08 <RegionComputeRxWindowParameters+0x2a>
    {
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
 8014af8:	7979      	ldrb	r1, [r7, #5]
 8014afa:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8014afe:	693b      	ldr	r3, [r7, #16]
 8014b00:	683a      	ldr	r2, [r7, #0]
 8014b02:	f000 fcdf 	bl	80154c4 <RegionAS923ComputeRxWindowParameters>
 8014b06:	e000      	b.n	8014b0a <RegionComputeRxWindowParameters+0x2c>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 8014b08:	bf00      	nop
        }
    }
}
 8014b0a:	bf00      	nop
 8014b0c:	3708      	adds	r7, #8
 8014b0e:	46bd      	mov	sp, r7
 8014b10:	bd80      	pop	{r7, pc}

08014b12 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8014b12:	b580      	push	{r7, lr}
 8014b14:	b084      	sub	sp, #16
 8014b16:	af00      	add	r7, sp, #0
 8014b18:	4603      	mov	r3, r0
 8014b1a:	60b9      	str	r1, [r7, #8]
 8014b1c:	607a      	str	r2, [r7, #4]
 8014b1e:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8014b20:	7bfb      	ldrb	r3, [r7, #15]
 8014b22:	2b00      	cmp	r3, #0
 8014b24:	d105      	bne.n	8014b32 <RegionRxConfig+0x20>
    {
        AS923_RX_CONFIG( );
 8014b26:	6879      	ldr	r1, [r7, #4]
 8014b28:	68b8      	ldr	r0, [r7, #8]
 8014b2a:	f000 fd25 	bl	8015578 <RegionAS923RxConfig>
 8014b2e:	4603      	mov	r3, r0
 8014b30:	e000      	b.n	8014b34 <RegionRxConfig+0x22>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 8014b32:	2300      	movs	r3, #0
        }
    }
}
 8014b34:	4618      	mov	r0, r3
 8014b36:	3710      	adds	r7, #16
 8014b38:	46bd      	mov	sp, r7
 8014b3a:	bd80      	pop	{r7, pc}

08014b3c <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8014b3c:	b580      	push	{r7, lr}
 8014b3e:	b084      	sub	sp, #16
 8014b40:	af00      	add	r7, sp, #0
 8014b42:	60b9      	str	r1, [r7, #8]
 8014b44:	607a      	str	r2, [r7, #4]
 8014b46:	603b      	str	r3, [r7, #0]
 8014b48:	4603      	mov	r3, r0
 8014b4a:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8014b4c:	7bfb      	ldrb	r3, [r7, #15]
 8014b4e:	2b00      	cmp	r3, #0
 8014b50:	d106      	bne.n	8014b60 <RegionTxConfig+0x24>
    {
        AS923_TX_CONFIG( );
 8014b52:	683a      	ldr	r2, [r7, #0]
 8014b54:	6879      	ldr	r1, [r7, #4]
 8014b56:	68b8      	ldr	r0, [r7, #8]
 8014b58:	f000 fdde 	bl	8015718 <RegionAS923TxConfig>
 8014b5c:	4603      	mov	r3, r0
 8014b5e:	e000      	b.n	8014b62 <RegionTxConfig+0x26>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 8014b60:	2300      	movs	r3, #0
        }
    }
}
 8014b62:	4618      	mov	r0, r3
 8014b64:	3710      	adds	r7, #16
 8014b66:	46bd      	mov	sp, r7
 8014b68:	bd80      	pop	{r7, pc}

08014b6a <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8014b6a:	b580      	push	{r7, lr}
 8014b6c:	b086      	sub	sp, #24
 8014b6e:	af02      	add	r7, sp, #8
 8014b70:	60b9      	str	r1, [r7, #8]
 8014b72:	607a      	str	r2, [r7, #4]
 8014b74:	603b      	str	r3, [r7, #0]
 8014b76:	4603      	mov	r3, r0
 8014b78:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8014b7a:	7bfb      	ldrb	r3, [r7, #15]
 8014b7c:	2b00      	cmp	r3, #0
 8014b7e:	d109      	bne.n	8014b94 <RegionLinkAdrReq+0x2a>
    {
        AS923_LINK_ADR_REQ( );
 8014b80:	69fb      	ldr	r3, [r7, #28]
 8014b82:	9300      	str	r3, [sp, #0]
 8014b84:	69bb      	ldr	r3, [r7, #24]
 8014b86:	683a      	ldr	r2, [r7, #0]
 8014b88:	6879      	ldr	r1, [r7, #4]
 8014b8a:	68b8      	ldr	r0, [r7, #8]
 8014b8c:	f000 fe94 	bl	80158b8 <RegionAS923LinkAdrReq>
 8014b90:	4603      	mov	r3, r0
 8014b92:	e000      	b.n	8014b96 <RegionLinkAdrReq+0x2c>
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 8014b94:	2300      	movs	r3, #0
        }
    }
}
 8014b96:	4618      	mov	r0, r3
 8014b98:	3710      	adds	r7, #16
 8014b9a:	46bd      	mov	sp, r7
 8014b9c:	bd80      	pop	{r7, pc}

08014b9e <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 8014b9e:	b580      	push	{r7, lr}
 8014ba0:	b082      	sub	sp, #8
 8014ba2:	af00      	add	r7, sp, #0
 8014ba4:	4603      	mov	r3, r0
 8014ba6:	6039      	str	r1, [r7, #0]
 8014ba8:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014baa:	79fb      	ldrb	r3, [r7, #7]
 8014bac:	2b00      	cmp	r3, #0
 8014bae:	d104      	bne.n	8014bba <RegionRxParamSetupReq+0x1c>
    {
        AS923_RX_PARAM_SETUP_REQ( );
 8014bb0:	6838      	ldr	r0, [r7, #0]
 8014bb2:	f000 ffa3 	bl	8015afc <RegionAS923RxParamSetupReq>
 8014bb6:	4603      	mov	r3, r0
 8014bb8:	e000      	b.n	8014bbc <RegionRxParamSetupReq+0x1e>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8014bba:	2300      	movs	r3, #0
        }
    }
}
 8014bbc:	4618      	mov	r0, r3
 8014bbe:	3708      	adds	r7, #8
 8014bc0:	46bd      	mov	sp, r7
 8014bc2:	bd80      	pop	{r7, pc}

08014bc4 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 8014bc4:	b580      	push	{r7, lr}
 8014bc6:	b082      	sub	sp, #8
 8014bc8:	af00      	add	r7, sp, #0
 8014bca:	4603      	mov	r3, r0
 8014bcc:	6039      	str	r1, [r7, #0]
 8014bce:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014bd0:	79fb      	ldrb	r3, [r7, #7]
 8014bd2:	2b00      	cmp	r3, #0
 8014bd4:	d104      	bne.n	8014be0 <RegionNewChannelReq+0x1c>
    {
        AS923_NEW_CHANNEL_REQ( );
 8014bd6:	6838      	ldr	r0, [r7, #0]
 8014bd8:	f000 ffc8 	bl	8015b6c <RegionAS923NewChannelReq>
 8014bdc:	4603      	mov	r3, r0
 8014bde:	e000      	b.n	8014be2 <RegionNewChannelReq+0x1e>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 8014be0:	2300      	movs	r3, #0
        }
    }
}
 8014be2:	4618      	mov	r0, r3
 8014be4:	3708      	adds	r7, #8
 8014be6:	46bd      	mov	sp, r7
 8014be8:	bd80      	pop	{r7, pc}

08014bea <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 8014bea:	b580      	push	{r7, lr}
 8014bec:	b082      	sub	sp, #8
 8014bee:	af00      	add	r7, sp, #0
 8014bf0:	4603      	mov	r3, r0
 8014bf2:	6039      	str	r1, [r7, #0]
 8014bf4:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014bf6:	79fb      	ldrb	r3, [r7, #7]
 8014bf8:	2b00      	cmp	r3, #0
 8014bfa:	d104      	bne.n	8014c06 <RegionTxParamSetupReq+0x1c>
    {
        AS923_TX_PARAM_SETUP_REQ( );
 8014bfc:	6838      	ldr	r0, [r7, #0]
 8014bfe:	f001 f813 	bl	8015c28 <RegionAS923TxParamSetupReq>
 8014c02:	4603      	mov	r3, r0
 8014c04:	e000      	b.n	8014c08 <RegionTxParamSetupReq+0x1e>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8014c06:	2300      	movs	r3, #0
        }
    }
}
 8014c08:	4618      	mov	r0, r3
 8014c0a:	3708      	adds	r7, #8
 8014c0c:	46bd      	mov	sp, r7
 8014c0e:	bd80      	pop	{r7, pc}

08014c10 <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 8014c10:	b580      	push	{r7, lr}
 8014c12:	b082      	sub	sp, #8
 8014c14:	af00      	add	r7, sp, #0
 8014c16:	4603      	mov	r3, r0
 8014c18:	6039      	str	r1, [r7, #0]
 8014c1a:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014c1c:	79fb      	ldrb	r3, [r7, #7]
 8014c1e:	2b00      	cmp	r3, #0
 8014c20:	d104      	bne.n	8014c2c <RegionDlChannelReq+0x1c>
    {
        AS923_DL_CHANNEL_REQ( );
 8014c22:	6838      	ldr	r0, [r7, #0]
 8014c24:	f001 f80a 	bl	8015c3c <RegionAS923DlChannelReq>
 8014c28:	4603      	mov	r3, r0
 8014c2a:	e000      	b.n	8014c2e <RegionDlChannelReq+0x1e>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 8014c2c:	2300      	movs	r3, #0
        }
    }
}
 8014c2e:	4618      	mov	r0, r3
 8014c30:	3708      	adds	r7, #8
 8014c32:	46bd      	mov	sp, r7
 8014c34:	bd80      	pop	{r7, pc}

08014c36 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 8014c36:	b580      	push	{r7, lr}
 8014c38:	b082      	sub	sp, #8
 8014c3a:	af00      	add	r7, sp, #0
 8014c3c:	4603      	mov	r3, r0
 8014c3e:	71fb      	strb	r3, [r7, #7]
 8014c40:	460b      	mov	r3, r1
 8014c42:	71bb      	strb	r3, [r7, #6]
 8014c44:	4613      	mov	r3, r2
 8014c46:	717b      	strb	r3, [r7, #5]
    switch( region )
 8014c48:	79fb      	ldrb	r3, [r7, #7]
 8014c4a:	2b00      	cmp	r3, #0
 8014c4c:	d108      	bne.n	8014c60 <RegionAlternateDr+0x2a>
    {
        AS923_ALTERNATE_DR( );
 8014c4e:	797a      	ldrb	r2, [r7, #5]
 8014c50:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8014c54:	4611      	mov	r1, r2
 8014c56:	4618      	mov	r0, r3
 8014c58:	f001 f830 	bl	8015cbc <RegionAS923AlternateDr>
 8014c5c:	4603      	mov	r3, r0
 8014c5e:	e000      	b.n	8014c62 <RegionAlternateDr+0x2c>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 8014c60:	2300      	movs	r3, #0
        }
    }
}
 8014c62:	4618      	mov	r0, r3
 8014c64:	3708      	adds	r7, #8
 8014c66:	46bd      	mov	sp, r7
 8014c68:	bd80      	pop	{r7, pc}

08014c6a <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8014c6a:	b580      	push	{r7, lr}
 8014c6c:	b084      	sub	sp, #16
 8014c6e:	af00      	add	r7, sp, #0
 8014c70:	60b9      	str	r1, [r7, #8]
 8014c72:	607a      	str	r2, [r7, #4]
 8014c74:	603b      	str	r3, [r7, #0]
 8014c76:	4603      	mov	r3, r0
 8014c78:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8014c7a:	7bfb      	ldrb	r3, [r7, #15]
 8014c7c:	2b00      	cmp	r3, #0
 8014c7e:	d107      	bne.n	8014c90 <RegionNextChannel+0x26>
    {
        AS923_NEXT_CHANNEL( );
 8014c80:	69bb      	ldr	r3, [r7, #24]
 8014c82:	683a      	ldr	r2, [r7, #0]
 8014c84:	6879      	ldr	r1, [r7, #4]
 8014c86:	68b8      	ldr	r0, [r7, #8]
 8014c88:	f001 f826 	bl	8015cd8 <RegionAS923NextChannel>
 8014c8c:	4603      	mov	r3, r0
 8014c8e:	e000      	b.n	8014c92 <RegionNextChannel+0x28>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8014c90:	2309      	movs	r3, #9
        }
    }
}
 8014c92:	4618      	mov	r0, r3
 8014c94:	3710      	adds	r7, #16
 8014c96:	46bd      	mov	sp, r7
 8014c98:	bd80      	pop	{r7, pc}

08014c9a <RegionApplyDrOffset>:
    }
}
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8014c9a:	b590      	push	{r4, r7, lr}
 8014c9c:	b083      	sub	sp, #12
 8014c9e:	af00      	add	r7, sp, #0
 8014ca0:	4604      	mov	r4, r0
 8014ca2:	4608      	mov	r0, r1
 8014ca4:	4611      	mov	r1, r2
 8014ca6:	461a      	mov	r2, r3
 8014ca8:	4623      	mov	r3, r4
 8014caa:	71fb      	strb	r3, [r7, #7]
 8014cac:	4603      	mov	r3, r0
 8014cae:	71bb      	strb	r3, [r7, #6]
 8014cb0:	460b      	mov	r3, r1
 8014cb2:	717b      	strb	r3, [r7, #5]
 8014cb4:	4613      	mov	r3, r2
 8014cb6:	713b      	strb	r3, [r7, #4]
    switch( region )
 8014cb8:	79fb      	ldrb	r3, [r7, #7]
 8014cba:	2b00      	cmp	r3, #0
 8014cbc:	d109      	bne.n	8014cd2 <RegionApplyDrOffset+0x38>
    {
        AS923_APPLY_DR_OFFSET( );
 8014cbe:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8014cc2:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8014cc6:	79bb      	ldrb	r3, [r7, #6]
 8014cc8:	4618      	mov	r0, r3
 8014cca:	f001 f979 	bl	8015fc0 <RegionAS923ApplyDrOffset>
 8014cce:	4603      	mov	r3, r0
 8014cd0:	e000      	b.n	8014cd4 <RegionApplyDrOffset+0x3a>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 8014cd2:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 8014cd4:	4618      	mov	r0, r3
 8014cd6:	370c      	adds	r7, #12
 8014cd8:	46bd      	mov	sp, r7
 8014cda:	bd90      	pop	{r4, r7, pc}

08014cdc <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 8014cdc:	b480      	push	{r7}
 8014cde:	b083      	sub	sp, #12
 8014ce0:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 8014ce2:	4b04      	ldr	r3, [pc, #16]	@ (8014cf4 <RegionGetVersion+0x18>)
 8014ce4:	607b      	str	r3, [r7, #4]

    return version;
 8014ce6:	687b      	ldr	r3, [r7, #4]
}
 8014ce8:	4618      	mov	r0, r3
 8014cea:	370c      	adds	r7, #12
 8014cec:	46bd      	mov	sp, r7
 8014cee:	bc80      	pop	{r7}
 8014cf0:	4770      	bx	lr
 8014cf2:	bf00      	nop
 8014cf4:	02010001 	.word	0x02010001

08014cf8 <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq )
{
 8014cf8:	b580      	push	{r7, lr}
 8014cfa:	b082      	sub	sp, #8
 8014cfc:	af00      	add	r7, sp, #0
 8014cfe:	6078      	str	r0, [r7, #4]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8014d00:	4b0d      	ldr	r3, [pc, #52]	@ (8014d38 <VerifyRfFreq+0x40>)
 8014d02:	6a1b      	ldr	r3, [r3, #32]
 8014d04:	6878      	ldr	r0, [r7, #4]
 8014d06:	4798      	blx	r3
 8014d08:	4603      	mov	r3, r0
 8014d0a:	f083 0301 	eor.w	r3, r3, #1
 8014d0e:	b2db      	uxtb	r3, r3
 8014d10:	2b00      	cmp	r3, #0
 8014d12:	d001      	beq.n	8014d18 <VerifyRfFreq+0x20>
    {
        return false;
 8014d14:	2300      	movs	r3, #0
 8014d16:	e00a      	b.n	8014d2e <VerifyRfFreq+0x36>
    }

    if( ( freq < AS923_MIN_RF_FREQUENCY ) || ( freq > AS923_MAX_RF_FREQUENCY ) )
 8014d18:	687b      	ldr	r3, [r7, #4]
 8014d1a:	4a08      	ldr	r2, [pc, #32]	@ (8014d3c <VerifyRfFreq+0x44>)
 8014d1c:	4293      	cmp	r3, r2
 8014d1e:	d903      	bls.n	8014d28 <VerifyRfFreq+0x30>
 8014d20:	687b      	ldr	r3, [r7, #4]
 8014d22:	4a07      	ldr	r2, [pc, #28]	@ (8014d40 <VerifyRfFreq+0x48>)
 8014d24:	4293      	cmp	r3, r2
 8014d26:	d901      	bls.n	8014d2c <VerifyRfFreq+0x34>
    {
        return false;
 8014d28:	2300      	movs	r3, #0
 8014d2a:	e000      	b.n	8014d2e <VerifyRfFreq+0x36>
    }
    return true;
 8014d2c:	2301      	movs	r3, #1
}
 8014d2e:	4618      	mov	r0, r3
 8014d30:	3708      	adds	r7, #8
 8014d32:	46bd      	mov	sp, r7
 8014d34:	bd80      	pop	{r7, pc}
 8014d36:	bf00      	nop
 8014d38:	0801f464 	.word	0x0801f464
 8014d3c:	3689cabf 	.word	0x3689cabf
 8014d40:	37502800 	.word	0x37502800

08014d44 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8014d44:	b590      	push	{r4, r7, lr}
 8014d46:	b08b      	sub	sp, #44	@ 0x2c
 8014d48:	af04      	add	r7, sp, #16
 8014d4a:	4603      	mov	r3, r0
 8014d4c:	460a      	mov	r2, r1
 8014d4e:	71fb      	strb	r3, [r7, #7]
 8014d50:	4613      	mov	r3, r2
 8014d52:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesAS923[datarate];
 8014d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014d58:	4a1f      	ldr	r2, [pc, #124]	@ (8014dd8 <GetTimeOnAir+0x94>)
 8014d5a:	5cd3      	ldrb	r3, [r2, r3]
 8014d5c:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsAS923 );
 8014d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014d62:	491e      	ldr	r1, [pc, #120]	@ (8014ddc <GetTimeOnAir+0x98>)
 8014d64:	4618      	mov	r0, r3
 8014d66:	f002 f835 	bl	8016dd4 <RegionCommonGetBandwidth>
 8014d6a:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 8014d6c:	2300      	movs	r3, #0
 8014d6e:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 8014d70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014d74:	2b07      	cmp	r3, #7
 8014d76:	d118      	bne.n	8014daa <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 8014d78:	4b19      	ldr	r3, [pc, #100]	@ (8014de0 <GetTimeOnAir+0x9c>)
 8014d7a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8014d7c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014d80:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8014d84:	fb02 f303 	mul.w	r3, r2, r3
 8014d88:	4619      	mov	r1, r3
 8014d8a:	88bb      	ldrh	r3, [r7, #4]
 8014d8c:	b2db      	uxtb	r3, r3
 8014d8e:	2201      	movs	r2, #1
 8014d90:	9203      	str	r2, [sp, #12]
 8014d92:	9302      	str	r3, [sp, #8]
 8014d94:	2300      	movs	r3, #0
 8014d96:	9301      	str	r3, [sp, #4]
 8014d98:	2305      	movs	r3, #5
 8014d9a:	9300      	str	r3, [sp, #0]
 8014d9c:	2300      	movs	r3, #0
 8014d9e:	460a      	mov	r2, r1
 8014da0:	68f9      	ldr	r1, [r7, #12]
 8014da2:	2000      	movs	r0, #0
 8014da4:	47a0      	blx	r4
 8014da6:	6178      	str	r0, [r7, #20]
 8014da8:	e011      	b.n	8014dce <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8014daa:	4b0d      	ldr	r3, [pc, #52]	@ (8014de0 <GetTimeOnAir+0x9c>)
 8014dac:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8014dae:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8014db2:	88bb      	ldrh	r3, [r7, #4]
 8014db4:	b2db      	uxtb	r3, r3
 8014db6:	2101      	movs	r1, #1
 8014db8:	9103      	str	r1, [sp, #12]
 8014dba:	9302      	str	r3, [sp, #8]
 8014dbc:	2300      	movs	r3, #0
 8014dbe:	9301      	str	r3, [sp, #4]
 8014dc0:	2308      	movs	r3, #8
 8014dc2:	9300      	str	r3, [sp, #0]
 8014dc4:	2301      	movs	r3, #1
 8014dc6:	68f9      	ldr	r1, [r7, #12]
 8014dc8:	2001      	movs	r0, #1
 8014dca:	47a0      	blx	r4
 8014dcc:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 8014dce:	697b      	ldr	r3, [r7, #20]
}
 8014dd0:	4618      	mov	r0, r3
 8014dd2:	371c      	adds	r7, #28
 8014dd4:	46bd      	mov	sp, r7
 8014dd6:	bd90      	pop	{r4, r7, pc}
 8014dd8:	0801f3a4 	.word	0x0801f3a4
 8014ddc:	0801f3ac 	.word	0x0801f3ac
 8014de0:	0801f464 	.word	0x0801f464

08014de4 <RegionAS923GetPhyParam>:
#endif /* REGION_AS923 */

PhyParam_t RegionAS923GetPhyParam( GetPhyParams_t* getPhy )
{
 8014de4:	b580      	push	{r7, lr}
 8014de6:	b088      	sub	sp, #32
 8014de8:	af00      	add	r7, sp, #0
 8014dea:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8014dec:	2300      	movs	r3, #0
 8014dee:	61bb      	str	r3, [r7, #24]

#if defined( REGION_AS923 )
    switch( getPhy->Attribute )
 8014df0:	687b      	ldr	r3, [r7, #4]
 8014df2:	781b      	ldrb	r3, [r3, #0]
 8014df4:	3b01      	subs	r3, #1
 8014df6:	2b37      	cmp	r3, #55	@ 0x37
 8014df8:	f200 814e 	bhi.w	8015098 <RegionAS923GetPhyParam+0x2b4>
 8014dfc:	a201      	add	r2, pc, #4	@ (adr r2, 8014e04 <RegionAS923GetPhyParam+0x20>)
 8014dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014e02:	bf00      	nop
 8014e04:	08014ee5 	.word	0x08014ee5
 8014e08:	08014ef9 	.word	0x08014ef9
 8014e0c:	08015099 	.word	0x08015099
 8014e10:	08015099 	.word	0x08015099
 8014e14:	08015099 	.word	0x08015099
 8014e18:	08014f0d 	.word	0x08014f0d
 8014e1c:	08015099 	.word	0x08015099
 8014e20:	08014f53 	.word	0x08014f53
 8014e24:	08015099 	.word	0x08015099
 8014e28:	08014f59 	.word	0x08014f59
 8014e2c:	08014f5f 	.word	0x08014f5f
 8014e30:	08014f65 	.word	0x08014f65
 8014e34:	08014f6b 	.word	0x08014f6b
 8014e38:	08014f93 	.word	0x08014f93
 8014e3c:	08014fbb 	.word	0x08014fbb
 8014e40:	08014fc1 	.word	0x08014fc1
 8014e44:	08014fc9 	.word	0x08014fc9
 8014e48:	08014fd1 	.word	0x08014fd1
 8014e4c:	08014fd9 	.word	0x08014fd9
 8014e50:	08014fe1 	.word	0x08014fe1
 8014e54:	08014fe9 	.word	0x08014fe9
 8014e58:	08014ffd 	.word	0x08014ffd
 8014e5c:	08015003 	.word	0x08015003
 8014e60:	08015009 	.word	0x08015009
 8014e64:	0801500f 	.word	0x0801500f
 8014e68:	0801501b 	.word	0x0801501b
 8014e6c:	08015027 	.word	0x08015027
 8014e70:	0801502d 	.word	0x0801502d
 8014e74:	08015035 	.word	0x08015035
 8014e78:	0801503b 	.word	0x0801503b
 8014e7c:	08015041 	.word	0x08015041
 8014e80:	08015049 	.word	0x08015049
 8014e84:	08014f13 	.word	0x08014f13
 8014e88:	08015099 	.word	0x08015099
 8014e8c:	08015099 	.word	0x08015099
 8014e90:	08015099 	.word	0x08015099
 8014e94:	08015099 	.word	0x08015099
 8014e98:	08015099 	.word	0x08015099
 8014e9c:	08015099 	.word	0x08015099
 8014ea0:	08015099 	.word	0x08015099
 8014ea4:	08015099 	.word	0x08015099
 8014ea8:	08015099 	.word	0x08015099
 8014eac:	08015099 	.word	0x08015099
 8014eb0:	08015099 	.word	0x08015099
 8014eb4:	08015099 	.word	0x08015099
 8014eb8:	08015099 	.word	0x08015099
 8014ebc:	0801504f 	.word	0x0801504f
 8014ec0:	08015055 	.word	0x08015055
 8014ec4:	08015063 	.word	0x08015063
 8014ec8:	08015099 	.word	0x08015099
 8014ecc:	08015099 	.word	0x08015099
 8014ed0:	08015069 	.word	0x08015069
 8014ed4:	0801506f 	.word	0x0801506f
 8014ed8:	08015099 	.word	0x08015099
 8014edc:	08015075 	.word	0x08015075
 8014ee0:	08015085 	.word	0x08015085
    {
        case PHY_MIN_RX_DR:
        {
            if( getPhy->DownlinkDwellTime == 0 )
 8014ee4:	687b      	ldr	r3, [r7, #4]
 8014ee6:	78db      	ldrb	r3, [r3, #3]
 8014ee8:	2b00      	cmp	r3, #0
 8014eea:	d102      	bne.n	8014ef2 <RegionAS923GetPhyParam+0x10e>
            {
                phyParam.Value = AS923_RX_MIN_DATARATE;
 8014eec:	2300      	movs	r3, #0
 8014eee:	61bb      	str	r3, [r7, #24]
            }
            else
            {
                phyParam.Value = AS923_DWELL_LIMIT_DATARATE;
            }
            break;
 8014ef0:	e0d3      	b.n	801509a <RegionAS923GetPhyParam+0x2b6>
                phyParam.Value = AS923_DWELL_LIMIT_DATARATE;
 8014ef2:	2302      	movs	r3, #2
 8014ef4:	61bb      	str	r3, [r7, #24]
            break;
 8014ef6:	e0d0      	b.n	801509a <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_MIN_TX_DR:
        {
            if( getPhy->UplinkDwellTime == 0 )
 8014ef8:	687b      	ldr	r3, [r7, #4]
 8014efa:	789b      	ldrb	r3, [r3, #2]
 8014efc:	2b00      	cmp	r3, #0
 8014efe:	d102      	bne.n	8014f06 <RegionAS923GetPhyParam+0x122>
            {
                phyParam.Value = AS923_TX_MIN_DATARATE;
 8014f00:	2300      	movs	r3, #0
 8014f02:	61bb      	str	r3, [r7, #24]
            }
            else
            {
                phyParam.Value = AS923_DWELL_LIMIT_DATARATE;
            }
            break;
 8014f04:	e0c9      	b.n	801509a <RegionAS923GetPhyParam+0x2b6>
                phyParam.Value = AS923_DWELL_LIMIT_DATARATE;
 8014f06:	2302      	movs	r3, #2
 8014f08:	61bb      	str	r3, [r7, #24]
            break;
 8014f0a:	e0c6      	b.n	801509a <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = AS923_DEFAULT_DATARATE;
 8014f0c:	2302      	movs	r3, #2
 8014f0e:	61bb      	str	r3, [r7, #24]
            break;
 8014f10:	e0c3      	b.n	801509a <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 8014f12:	687b      	ldr	r3, [r7, #4]
 8014f14:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8014f18:	733b      	strb	r3, [r7, #12]
 8014f1a:	2307      	movs	r3, #7
 8014f1c:	737b      	strb	r3, [r7, #13]
                .MaxDr = ( int8_t )AS923_TX_MAX_DATARATE,
                .MinDr = ( int8_t )( ( getPhy->UplinkDwellTime == 0 ) ? AS923_TX_MIN_DATARATE : AS923_DWELL_LIMIT_DATARATE ),
 8014f1e:	687b      	ldr	r3, [r7, #4]
 8014f20:	789b      	ldrb	r3, [r3, #2]
 8014f22:	2b00      	cmp	r3, #0
 8014f24:	d101      	bne.n	8014f2a <RegionAS923GetPhyParam+0x146>
 8014f26:	2300      	movs	r3, #0
 8014f28:	e000      	b.n	8014f2c <RegionAS923GetPhyParam+0x148>
 8014f2a:	2302      	movs	r3, #2
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8014f2c:	73bb      	strb	r3, [r7, #14]
 8014f2e:	2310      	movs	r3, #16
 8014f30:	73fb      	strb	r3, [r7, #15]
                .NbChannels = AS923_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 8014f32:	4b5d      	ldr	r3, [pc, #372]	@ (80150a8 <RegionAS923GetPhyParam+0x2c4>)
 8014f34:	681b      	ldr	r3, [r3, #0]
 8014f36:	f503 7358 	add.w	r3, r3, #864	@ 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8014f3a:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 8014f3c:	4b5a      	ldr	r3, [pc, #360]	@ (80150a8 <RegionAS923GetPhyParam+0x2c4>)
 8014f3e:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8014f40:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 8014f42:	f107 030c 	add.w	r3, r7, #12
 8014f46:	4618      	mov	r0, r3
 8014f48:	f001 fef1 	bl	8016d2e <RegionCommonGetNextLowerTxDr>
 8014f4c:	4603      	mov	r3, r0
 8014f4e:	61bb      	str	r3, [r7, #24]
            break;
 8014f50:	e0a3      	b.n	801509a <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = AS923_MAX_TX_POWER;
 8014f52:	2300      	movs	r3, #0
 8014f54:	61bb      	str	r3, [r7, #24]
            break;
 8014f56:	e0a0      	b.n	801509a <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = AS923_DEFAULT_TX_POWER;
 8014f58:	2300      	movs	r3, #0
 8014f5a:	61bb      	str	r3, [r7, #24]
            break;
 8014f5c:	e09d      	b.n	801509a <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8014f5e:	2340      	movs	r3, #64	@ 0x40
 8014f60:	61bb      	str	r3, [r7, #24]
            break;
 8014f62:	e09a      	b.n	801509a <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8014f64:	2320      	movs	r3, #32
 8014f66:	61bb      	str	r3, [r7, #24]
            break;
 8014f68:	e097      	b.n	801509a <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_MAX_PAYLOAD:
        {
            if( getPhy->UplinkDwellTime == 0 )
 8014f6a:	687b      	ldr	r3, [r7, #4]
 8014f6c:	789b      	ldrb	r3, [r3, #2]
 8014f6e:	2b00      	cmp	r3, #0
 8014f70:	d107      	bne.n	8014f82 <RegionAS923GetPhyParam+0x19e>
            {
                phyParam.Value = MaxPayloadOfDatarateDwell0AS923[getPhy->Datarate];
 8014f72:	687b      	ldr	r3, [r7, #4]
 8014f74:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014f78:	461a      	mov	r2, r3
 8014f7a:	4b4c      	ldr	r3, [pc, #304]	@ (80150ac <RegionAS923GetPhyParam+0x2c8>)
 8014f7c:	5c9b      	ldrb	r3, [r3, r2]
 8014f7e:	61bb      	str	r3, [r7, #24]
            }
            else
            {
                phyParam.Value = MaxPayloadOfDatarateDwell1AS923[getPhy->Datarate];
            }
            break;
 8014f80:	e08b      	b.n	801509a <RegionAS923GetPhyParam+0x2b6>
                phyParam.Value = MaxPayloadOfDatarateDwell1AS923[getPhy->Datarate];
 8014f82:	687b      	ldr	r3, [r7, #4]
 8014f84:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014f88:	461a      	mov	r2, r3
 8014f8a:	4b49      	ldr	r3, [pc, #292]	@ (80150b0 <RegionAS923GetPhyParam+0x2cc>)
 8014f8c:	5c9b      	ldrb	r3, [r3, r2]
 8014f8e:	61bb      	str	r3, [r7, #24]
            break;
 8014f90:	e083      	b.n	801509a <RegionAS923GetPhyParam+0x2b6>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            if( getPhy->UplinkDwellTime == 0 )
 8014f92:	687b      	ldr	r3, [r7, #4]
 8014f94:	789b      	ldrb	r3, [r3, #2]
 8014f96:	2b00      	cmp	r3, #0
 8014f98:	d107      	bne.n	8014faa <RegionAS923GetPhyParam+0x1c6>
            {
                phyParam.Value = MaxPayloadOfDatarateRepeaterDwell0AS923[getPhy->Datarate];
 8014f9a:	687b      	ldr	r3, [r7, #4]
 8014f9c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014fa0:	461a      	mov	r2, r3
 8014fa2:	4b44      	ldr	r3, [pc, #272]	@ (80150b4 <RegionAS923GetPhyParam+0x2d0>)
 8014fa4:	5c9b      	ldrb	r3, [r3, r2]
 8014fa6:	61bb      	str	r3, [r7, #24]
            }
            else
            {
                phyParam.Value = MaxPayloadOfDatarateDwell1AS923[getPhy->Datarate];
            }
            break;
 8014fa8:	e077      	b.n	801509a <RegionAS923GetPhyParam+0x2b6>
                phyParam.Value = MaxPayloadOfDatarateDwell1AS923[getPhy->Datarate];
 8014faa:	687b      	ldr	r3, [r7, #4]
 8014fac:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014fb0:	461a      	mov	r2, r3
 8014fb2:	4b3f      	ldr	r3, [pc, #252]	@ (80150b0 <RegionAS923GetPhyParam+0x2cc>)
 8014fb4:	5c9b      	ldrb	r3, [r3, r2]
 8014fb6:	61bb      	str	r3, [r7, #24]
            break;
 8014fb8:	e06f      	b.n	801509a <RegionAS923GetPhyParam+0x2b6>
        }
        /* ST_WORKAROUND_END */
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = AS923_DUTY_CYCLE_ENABLED;
 8014fba:	2300      	movs	r3, #0
 8014fbc:	61bb      	str	r3, [r7, #24]
            break;
 8014fbe:	e06c      	b.n	801509a <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = AS923_MAX_RX_WINDOW;
 8014fc0:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8014fc4:	61bb      	str	r3, [r7, #24]
            break;
 8014fc6:	e068      	b.n	801509a <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8014fc8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8014fcc:	61bb      	str	r3, [r7, #24]
            break;
 8014fce:	e064      	b.n	801509a <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8014fd0:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8014fd4:	61bb      	str	r3, [r7, #24]
            break;
 8014fd6:	e060      	b.n	801509a <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8014fd8:	f241 3388 	movw	r3, #5000	@ 0x1388
 8014fdc:	61bb      	str	r3, [r7, #24]
            break;
 8014fde:	e05c      	b.n	801509a <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8014fe0:	f241 7370 	movw	r3, #6000	@ 0x1770
 8014fe4:	61bb      	str	r3, [r7, #24]
            break;
 8014fe6:	e058      	b.n	801509a <RegionAS923GetPhyParam+0x2b6>
            break;
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
        case PHY_RETRANSMIT_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 8014fe8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8014fec:	4832      	ldr	r0, [pc, #200]	@ (80150b8 <RegionAS923GetPhyParam+0x2d4>)
 8014fee:	f001 ff89 	bl	8016f04 <randr>
 8014ff2:	4603      	mov	r3, r0
 8014ff4:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8014ff8:	61bb      	str	r3, [r7, #24]
            break;
 8014ffa:	e04e      	b.n	801509a <RegionAS923GetPhyParam+0x2b6>
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 8014ffc:	2300      	movs	r3, #0
 8014ffe:	61bb      	str	r3, [r7, #24]
            break;
 8015000:	e04b      	b.n	801509a <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = AS923_RX_WND_2_FREQ - REGION_AS923_FREQ_OFFSET;
 8015002:	4b2e      	ldr	r3, [pc, #184]	@ (80150bc <RegionAS923GetPhyParam+0x2d8>)
 8015004:	61bb      	str	r3, [r7, #24]
            break;
 8015006:	e048      	b.n	801509a <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = AS923_RX_WND_2_DR;
 8015008:	2302      	movs	r3, #2
 801500a:	61bb      	str	r3, [r7, #24]
            break;
 801500c:	e045      	b.n	801509a <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 801500e:	4b26      	ldr	r3, [pc, #152]	@ (80150a8 <RegionAS923GetPhyParam+0x2c4>)
 8015010:	681b      	ldr	r3, [r3, #0]
 8015012:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8015016:	61bb      	str	r3, [r7, #24]
            break;
 8015018:	e03f      	b.n	801509a <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 801501a:	4b23      	ldr	r3, [pc, #140]	@ (80150a8 <RegionAS923GetPhyParam+0x2c4>)
 801501c:	681b      	ldr	r3, [r3, #0]
 801501e:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 8015022:	61bb      	str	r3, [r7, #24]
            break;
 8015024:	e039      	b.n	801509a <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = AS923_MAX_NB_CHANNELS;
 8015026:	2310      	movs	r3, #16
 8015028:	61bb      	str	r3, [r7, #24]
            break;
 801502a:	e036      	b.n	801509a <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 801502c:	4b1e      	ldr	r3, [pc, #120]	@ (80150a8 <RegionAS923GetPhyParam+0x2c4>)
 801502e:	681b      	ldr	r3, [r3, #0]
 8015030:	61bb      	str	r3, [r7, #24]
            break;
 8015032:	e032      	b.n	801509a <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = AS923_DEFAULT_UPLINK_DWELL_TIME;
 8015034:	2301      	movs	r3, #1
 8015036:	61bb      	str	r3, [r7, #24]
            break;
 8015038:	e02f      	b.n	801509a <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = AS923_DEFAULT_DOWNLINK_DWELL_TIME;
 801503a:	2300      	movs	r3, #0
 801503c:	61bb      	str	r3, [r7, #24]
            break;
 801503e:	e02c      	b.n	801509a <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = AS923_DEFAULT_MAX_EIRP;
 8015040:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8015044:	61bb      	str	r3, [r7, #24]
            break;
 8015046:	e028      	b.n	801509a <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = AS923_DEFAULT_ANTENNA_GAIN;
 8015048:	4b1d      	ldr	r3, [pc, #116]	@ (80150c0 <RegionAS923GetPhyParam+0x2dc>)
 801504a:	61bb      	str	r3, [r7, #24]
            break;
 801504c:	e025      	b.n	801509a <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = AS923_BEACON_CHANNEL_FREQ - REGION_AS923_FREQ_OFFSET;
 801504e:	4b1d      	ldr	r3, [pc, #116]	@ (80150c4 <RegionAS923GetPhyParam+0x2e0>)
 8015050:	61bb      	str	r3, [r7, #24]
            break;
 8015052:	e022      	b.n	801509a <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = AS923_BEACON_SIZE;
 8015054:	2311      	movs	r3, #17
 8015056:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = AS923_RFU1_SIZE;
 8015058:	2301      	movs	r3, #1
 801505a:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = AS923_RFU2_SIZE;
 801505c:	2300      	movs	r3, #0
 801505e:	76bb      	strb	r3, [r7, #26]
            break;
 8015060:	e01b      	b.n	801509a <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = AS923_BEACON_CHANNEL_DR;
 8015062:	2303      	movs	r3, #3
 8015064:	61bb      	str	r3, [r7, #24]
            break;
 8015066:	e018      	b.n	801509a <RegionAS923GetPhyParam+0x2b6>
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
            phyParam.Value = AS923_PING_SLOT_CHANNEL_FREQ;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            phyParam.Value = AS923_PING_SLOT_CHANNEL_FREQ - REGION_AS923_FREQ_OFFSET;
 8015068:	4b16      	ldr	r3, [pc, #88]	@ (80150c4 <RegionAS923GetPhyParam+0x2e0>)
 801506a:	61bb      	str	r3, [r7, #24]
#endif /* REGION_VERSION */
            break;
 801506c:	e015      	b.n	801509a <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = AS923_PING_SLOT_CHANNEL_DR;
 801506e:	2303      	movs	r3, #3
 8015070:	61bb      	str	r3, [r7, #24]
            break;
 8015072:	e012      	b.n	801509a <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesAS923[getPhy->Datarate];
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801507a:	461a      	mov	r2, r3
 801507c:	4b12      	ldr	r3, [pc, #72]	@ (80150c8 <RegionAS923GetPhyParam+0x2e4>)
 801507e:	5c9b      	ldrb	r3, [r3, r2]
 8015080:	61bb      	str	r3, [r7, #24]
            break;
 8015082:	e00a      	b.n	801509a <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsAS923 );
 8015084:	687b      	ldr	r3, [r7, #4]
 8015086:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801508a:	4910      	ldr	r1, [pc, #64]	@ (80150cc <RegionAS923GetPhyParam+0x2e8>)
 801508c:	4618      	mov	r0, r3
 801508e:	f001 fea1 	bl	8016dd4 <RegionCommonGetBandwidth>
 8015092:	4603      	mov	r3, r0
 8015094:	61bb      	str	r3, [r7, #24]
            break;
 8015096:	e000      	b.n	801509a <RegionAS923GetPhyParam+0x2b6>
        }
        default:
        {
            break;
 8015098:	bf00      	nop
        }
    }

#endif /* REGION_AS923 */
    return phyParam;
 801509a:	69bb      	ldr	r3, [r7, #24]
 801509c:	61fb      	str	r3, [r7, #28]
 801509e:	69fb      	ldr	r3, [r7, #28]
}
 80150a0:	4618      	mov	r0, r3
 80150a2:	3720      	adds	r7, #32
 80150a4:	46bd      	mov	sp, r7
 80150a6:	bd80      	pop	{r7, pc}
 80150a8:	20001bcc 	.word	0x20001bcc
 80150ac:	0801f3cc 	.word	0x0801f3cc
 80150b0:	0801f3dc 	.word	0x0801f3dc
 80150b4:	0801f3d4 	.word	0x0801f3d4
 80150b8:	fffffc18 	.word	0xfffffc18
 80150bc:	3706ea00 	.word	0x3706ea00
 80150c0:	4009999a 	.word	0x4009999a
 80150c4:	3709f740 	.word	0x3709f740
 80150c8:	0801f3a4 	.word	0x0801f3a4
 80150cc:	0801f3ac 	.word	0x0801f3ac

080150d0 <RegionAS923SetBandTxDone>:

void RegionAS923SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 80150d0:	b590      	push	{r4, r7, lr}
 80150d2:	b085      	sub	sp, #20
 80150d4:	af02      	add	r7, sp, #8
 80150d6:	6078      	str	r0, [r7, #4]
#if defined( REGION_AS923 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 80150d8:	4b11      	ldr	r3, [pc, #68]	@ (8015120 <RegionAS923SetBandTxDone+0x50>)
 80150da:	681a      	ldr	r2, [r3, #0]
 80150dc:	4b11      	ldr	r3, [pc, #68]	@ (8015124 <RegionAS923SetBandTxDone+0x54>)
 80150de:	6819      	ldr	r1, [r3, #0]
 80150e0:	687b      	ldr	r3, [r7, #4]
 80150e2:	781b      	ldrb	r3, [r3, #0]
 80150e4:	4618      	mov	r0, r3
 80150e6:	4603      	mov	r3, r0
 80150e8:	005b      	lsls	r3, r3, #1
 80150ea:	4403      	add	r3, r0
 80150ec:	009b      	lsls	r3, r3, #2
 80150ee:	440b      	add	r3, r1
 80150f0:	3309      	adds	r3, #9
 80150f2:	781b      	ldrb	r3, [r3, #0]
 80150f4:	4619      	mov	r1, r3
 80150f6:	460b      	mov	r3, r1
 80150f8:	005b      	lsls	r3, r3, #1
 80150fa:	440b      	add	r3, r1
 80150fc:	00db      	lsls	r3, r3, #3
 80150fe:	18d0      	adds	r0, r2, r3
 8015100:	687b      	ldr	r3, [r7, #4]
 8015102:	6899      	ldr	r1, [r3, #8]
 8015104:	687b      	ldr	r3, [r7, #4]
 8015106:	785c      	ldrb	r4, [r3, #1]
 8015108:	687b      	ldr	r3, [r7, #4]
 801510a:	691a      	ldr	r2, [r3, #16]
 801510c:	9200      	str	r2, [sp, #0]
 801510e:	68db      	ldr	r3, [r3, #12]
 8015110:	4622      	mov	r2, r4
 8015112:	f001 f9e5 	bl	80164e0 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_AS923 */
}
 8015116:	bf00      	nop
 8015118:	370c      	adds	r7, #12
 801511a:	46bd      	mov	sp, r7
 801511c:	bd90      	pop	{r4, r7, pc}
 801511e:	bf00      	nop
 8015120:	20001bd0 	.word	0x20001bd0
 8015124:	20001bcc 	.word	0x20001bcc

08015128 <RegionAS923InitDefaults>:

void RegionAS923InitDefaults( InitDefaultsParams_t* params )
{
 8015128:	b580      	push	{r7, lr}
 801512a:	b08e      	sub	sp, #56	@ 0x38
 801512c:	af00      	add	r7, sp, #0
 801512e:	6078      	str	r0, [r7, #4]
#if defined( REGION_AS923 )
    Band_t bands[AS923_MAX_NB_BANDS] =
 8015130:	2364      	movs	r3, #100	@ 0x64
 8015132:	843b      	strh	r3, [r7, #32]
 8015134:	2300      	movs	r3, #0
 8015136:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 801513a:	2300      	movs	r3, #0
 801513c:	627b      	str	r3, [r7, #36]	@ 0x24
 801513e:	2300      	movs	r3, #0
 8015140:	62bb      	str	r3, [r7, #40]	@ 0x28
 8015142:	2300      	movs	r3, #0
 8015144:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015146:	2300      	movs	r3, #0
 8015148:	633b      	str	r3, [r7, #48]	@ 0x30
 801514a:	2300      	movs	r3, #0
 801514c:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    {
        AS923_BAND0
    };

    switch( params->Type )
 8015150:	687b      	ldr	r3, [r7, #4]
 8015152:	7b1b      	ldrb	r3, [r3, #12]
 8015154:	2b02      	cmp	r3, #2
 8015156:	d05e      	beq.n	8015216 <RegionAS923InitDefaults+0xee>
 8015158:	2b02      	cmp	r3, #2
 801515a:	dc6b      	bgt.n	8015234 <RegionAS923InitDefaults+0x10c>
 801515c:	2b00      	cmp	r3, #0
 801515e:	d002      	beq.n	8015166 <RegionAS923InitDefaults+0x3e>
 8015160:	2b01      	cmp	r3, #1
 8015162:	d043      	beq.n	80151ec <RegionAS923InitDefaults+0xc4>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 8015164:	e066      	b.n	8015234 <RegionAS923InitDefaults+0x10c>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 8015166:	687b      	ldr	r3, [r7, #4]
 8015168:	681b      	ldr	r3, [r3, #0]
 801516a:	2b00      	cmp	r3, #0
 801516c:	d063      	beq.n	8015236 <RegionAS923InitDefaults+0x10e>
 801516e:	687b      	ldr	r3, [r7, #4]
 8015170:	685b      	ldr	r3, [r3, #4]
 8015172:	2b00      	cmp	r3, #0
 8015174:	d05f      	beq.n	8015236 <RegionAS923InitDefaults+0x10e>
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8015176:	687b      	ldr	r3, [r7, #4]
 8015178:	685b      	ldr	r3, [r3, #4]
 801517a:	4a30      	ldr	r2, [pc, #192]	@ (801523c <RegionAS923InitDefaults+0x114>)
 801517c:	6013      	str	r3, [r2, #0]
            RegionBands = (Band_t*) params->Bands;
 801517e:	687b      	ldr	r3, [r7, #4]
 8015180:	689b      	ldr	r3, [r3, #8]
 8015182:	4a2f      	ldr	r2, [pc, #188]	@ (8015240 <RegionAS923InitDefaults+0x118>)
 8015184:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * AS923_MAX_NB_BANDS );
 8015186:	4b2e      	ldr	r3, [pc, #184]	@ (8015240 <RegionAS923InitDefaults+0x118>)
 8015188:	681b      	ldr	r3, [r3, #0]
 801518a:	f107 0120 	add.w	r1, r7, #32
 801518e:	2218      	movs	r2, #24
 8015190:	4618      	mov	r0, r3
 8015192:	f001 fece 	bl	8016f32 <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) AS923_LC1;
 8015196:	4b29      	ldr	r3, [pc, #164]	@ (801523c <RegionAS923InitDefaults+0x114>)
 8015198:	681b      	ldr	r3, [r3, #0]
 801519a:	4a2a      	ldr	r2, [pc, #168]	@ (8015244 <RegionAS923InitDefaults+0x11c>)
 801519c:	ca07      	ldmia	r2, {r0, r1, r2}
 801519e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) AS923_LC2;
 80151a2:	4b26      	ldr	r3, [pc, #152]	@ (801523c <RegionAS923InitDefaults+0x114>)
 80151a4:	681b      	ldr	r3, [r3, #0]
 80151a6:	4a28      	ldr	r2, [pc, #160]	@ (8015248 <RegionAS923InitDefaults+0x120>)
 80151a8:	330c      	adds	r3, #12
 80151aa:	ca07      	ldmia	r2, {r0, r1, r2}
 80151ac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[0].Frequency -= REGION_AS923_FREQ_OFFSET;
 80151b0:	4b22      	ldr	r3, [pc, #136]	@ (801523c <RegionAS923InitDefaults+0x114>)
 80151b2:	681a      	ldr	r2, [r3, #0]
 80151b4:	4b21      	ldr	r3, [pc, #132]	@ (801523c <RegionAS923InitDefaults+0x114>)
 80151b6:	681b      	ldr	r3, [r3, #0]
 80151b8:	6812      	ldr	r2, [r2, #0]
 80151ba:	601a      	str	r2, [r3, #0]
            RegionNvmGroup2->Channels[1].Frequency -= REGION_AS923_FREQ_OFFSET;
 80151bc:	4b1f      	ldr	r3, [pc, #124]	@ (801523c <RegionAS923InitDefaults+0x114>)
 80151be:	681a      	ldr	r2, [r3, #0]
 80151c0:	4b1e      	ldr	r3, [pc, #120]	@ (801523c <RegionAS923InitDefaults+0x114>)
 80151c2:	681b      	ldr	r3, [r3, #0]
 80151c4:	68d2      	ldr	r2, [r2, #12]
 80151c6:	60da      	str	r2, [r3, #12]
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 );
 80151c8:	4b1c      	ldr	r3, [pc, #112]	@ (801523c <RegionAS923InitDefaults+0x114>)
 80151ca:	681b      	ldr	r3, [r3, #0]
 80151cc:	2203      	movs	r2, #3
 80151ce:	f8a3 236c 	strh.w	r2, [r3, #876]	@ 0x36c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 80151d2:	4b1a      	ldr	r3, [pc, #104]	@ (801523c <RegionAS923InitDefaults+0x114>)
 80151d4:	681b      	ldr	r3, [r3, #0]
 80151d6:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 80151da:	4b18      	ldr	r3, [pc, #96]	@ (801523c <RegionAS923InitDefaults+0x114>)
 80151dc:	681b      	ldr	r3, [r3, #0]
 80151de:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 80151e2:	2201      	movs	r2, #1
 80151e4:	4619      	mov	r1, r3
 80151e6:	f001 f955 	bl	8016494 <RegionCommonChanMaskCopy>
 80151ea:	e024      	b.n	8015236 <RegionAS923InitDefaults+0x10e>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 80151ec:	4b13      	ldr	r3, [pc, #76]	@ (801523c <RegionAS923InitDefaults+0x114>)
 80151ee:	681b      	ldr	r3, [r3, #0]
 80151f0:	2200      	movs	r2, #0
 80151f2:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 80151f4:	4b11      	ldr	r3, [pc, #68]	@ (801523c <RegionAS923InitDefaults+0x114>)
 80151f6:	681b      	ldr	r3, [r3, #0]
 80151f8:	2200      	movs	r2, #0
 80151fa:	611a      	str	r2, [r3, #16]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 80151fc:	4b0f      	ldr	r3, [pc, #60]	@ (801523c <RegionAS923InitDefaults+0x114>)
 80151fe:	681b      	ldr	r3, [r3, #0]
 8015200:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 8015204:	4b0d      	ldr	r3, [pc, #52]	@ (801523c <RegionAS923InitDefaults+0x114>)
 8015206:	681b      	ldr	r3, [r3, #0]
 8015208:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 801520c:	2201      	movs	r2, #1
 801520e:	4619      	mov	r1, r3
 8015210:	f001 f940 	bl	8016494 <RegionCommonChanMaskCopy>
            break;
 8015214:	e00f      	b.n	8015236 <RegionAS923InitDefaults+0x10e>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 8015216:	4b09      	ldr	r3, [pc, #36]	@ (801523c <RegionAS923InitDefaults+0x114>)
 8015218:	681b      	ldr	r3, [r3, #0]
 801521a:	f8b3 1360 	ldrh.w	r1, [r3, #864]	@ 0x360
 801521e:	4b07      	ldr	r3, [pc, #28]	@ (801523c <RegionAS923InitDefaults+0x114>)
 8015220:	681b      	ldr	r3, [r3, #0]
 8015222:	f8b3 236c 	ldrh.w	r2, [r3, #876]	@ 0x36c
 8015226:	4b05      	ldr	r3, [pc, #20]	@ (801523c <RegionAS923InitDefaults+0x114>)
 8015228:	681b      	ldr	r3, [r3, #0]
 801522a:	430a      	orrs	r2, r1
 801522c:	b292      	uxth	r2, r2
 801522e:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
            break;
 8015232:	e000      	b.n	8015236 <RegionAS923InitDefaults+0x10e>
            break;
 8015234:	bf00      	nop
        }
    }
#endif /* REGION_AS923 */
}
 8015236:	3738      	adds	r7, #56	@ 0x38
 8015238:	46bd      	mov	sp, r7
 801523a:	bd80      	pop	{r7, pc}
 801523c:	20001bcc 	.word	0x20001bcc
 8015240:	20001bd0 	.word	0x20001bd0
 8015244:	0801ede0 	.word	0x0801ede0
 8015248:	0801edec 	.word	0x0801edec

0801524c <RegionAS923Verify>:

bool RegionAS923Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 801524c:	b580      	push	{r7, lr}
 801524e:	b082      	sub	sp, #8
 8015250:	af00      	add	r7, sp, #0
 8015252:	6078      	str	r0, [r7, #4]
 8015254:	460b      	mov	r3, r1
 8015256:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_AS923 )
    switch( phyAttribute )
 8015258:	78fb      	ldrb	r3, [r7, #3]
 801525a:	2b0f      	cmp	r3, #15
 801525c:	f200 808f 	bhi.w	801537e <RegionAS923Verify+0x132>
 8015260:	a201      	add	r2, pc, #4	@ (adr r2, 8015268 <RegionAS923Verify+0x1c>)
 8015262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015266:	bf00      	nop
 8015268:	080152a9 	.word	0x080152a9
 801526c:	0801537f 	.word	0x0801537f
 8015270:	0801537f 	.word	0x0801537f
 8015274:	0801537f 	.word	0x0801537f
 8015278:	0801537f 	.word	0x0801537f
 801527c:	080152b7 	.word	0x080152b7
 8015280:	080152fb 	.word	0x080152fb
 8015284:	08015319 	.word	0x08015319
 8015288:	0801537f 	.word	0x0801537f
 801528c:	0801535d 	.word	0x0801535d
 8015290:	0801535d 	.word	0x0801535d
 8015294:	0801537f 	.word	0x0801537f
 8015298:	0801537f 	.word	0x0801537f
 801529c:	0801537f 	.word	0x0801537f
 80152a0:	0801537f 	.word	0x0801537f
 80152a4:	0801537b 	.word	0x0801537b
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 80152a8:	687b      	ldr	r3, [r7, #4]
 80152aa:	681b      	ldr	r3, [r3, #0]
 80152ac:	4618      	mov	r0, r3
 80152ae:	f7ff fd23 	bl	8014cf8 <VerifyRfFreq>
 80152b2:	4603      	mov	r3, r0
 80152b4:	e064      	b.n	8015380 <RegionAS923Verify+0x134>
        }
        case PHY_TX_DR:
        {
            if( verify->DatarateParams.UplinkDwellTime == 0 )
 80152b6:	687b      	ldr	r3, [r7, #4]
 80152b8:	789b      	ldrb	r3, [r3, #2]
 80152ba:	2b00      	cmp	r3, #0
 80152bc:	d10e      	bne.n	80152dc <RegionAS923Verify+0x90>
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_TX_MIN_DATARATE, AS923_TX_MAX_DATARATE );
 80152be:	687b      	ldr	r3, [r7, #4]
 80152c0:	f993 3000 	ldrsb.w	r3, [r3]
 80152c4:	2207      	movs	r2, #7
 80152c6:	2100      	movs	r1, #0
 80152c8:	4618      	mov	r0, r3
 80152ca:	f001 f866 	bl	801639a <RegionCommonValueInRange>
 80152ce:	4603      	mov	r3, r0
 80152d0:	2b00      	cmp	r3, #0
 80152d2:	bf14      	ite	ne
 80152d4:	2301      	movne	r3, #1
 80152d6:	2300      	moveq	r3, #0
 80152d8:	b2db      	uxtb	r3, r3
 80152da:	e051      	b.n	8015380 <RegionAS923Verify+0x134>
            }
            else
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_DWELL_LIMIT_DATARATE, AS923_TX_MAX_DATARATE );
 80152dc:	687b      	ldr	r3, [r7, #4]
 80152de:	f993 3000 	ldrsb.w	r3, [r3]
 80152e2:	2207      	movs	r2, #7
 80152e4:	2102      	movs	r1, #2
 80152e6:	4618      	mov	r0, r3
 80152e8:	f001 f857 	bl	801639a <RegionCommonValueInRange>
 80152ec:	4603      	mov	r3, r0
 80152ee:	2b00      	cmp	r3, #0
 80152f0:	bf14      	ite	ne
 80152f2:	2301      	movne	r3, #1
 80152f4:	2300      	moveq	r3, #0
 80152f6:	b2db      	uxtb	r3, r3
 80152f8:	e042      	b.n	8015380 <RegionAS923Verify+0x134>
            }
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 80152fa:	687b      	ldr	r3, [r7, #4]
 80152fc:	f993 3000 	ldrsb.w	r3, [r3]
 8015300:	2205      	movs	r2, #5
 8015302:	2100      	movs	r1, #0
 8015304:	4618      	mov	r0, r3
 8015306:	f001 f848 	bl	801639a <RegionCommonValueInRange>
 801530a:	4603      	mov	r3, r0
 801530c:	2b00      	cmp	r3, #0
 801530e:	bf14      	ite	ne
 8015310:	2301      	movne	r3, #1
 8015312:	2300      	moveq	r3, #0
 8015314:	b2db      	uxtb	r3, r3
 8015316:	e033      	b.n	8015380 <RegionAS923Verify+0x134>
        }
        case PHY_RX_DR:
        {
            if( verify->DatarateParams.DownlinkDwellTime == 0 )
 8015318:	687b      	ldr	r3, [r7, #4]
 801531a:	785b      	ldrb	r3, [r3, #1]
 801531c:	2b00      	cmp	r3, #0
 801531e:	d10e      	bne.n	801533e <RegionAS923Verify+0xf2>
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_RX_MIN_DATARATE, AS923_RX_MAX_DATARATE );
 8015320:	687b      	ldr	r3, [r7, #4]
 8015322:	f993 3000 	ldrsb.w	r3, [r3]
 8015326:	2207      	movs	r2, #7
 8015328:	2100      	movs	r1, #0
 801532a:	4618      	mov	r0, r3
 801532c:	f001 f835 	bl	801639a <RegionCommonValueInRange>
 8015330:	4603      	mov	r3, r0
 8015332:	2b00      	cmp	r3, #0
 8015334:	bf14      	ite	ne
 8015336:	2301      	movne	r3, #1
 8015338:	2300      	moveq	r3, #0
 801533a:	b2db      	uxtb	r3, r3
 801533c:	e020      	b.n	8015380 <RegionAS923Verify+0x134>
            }
            else
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_DWELL_LIMIT_DATARATE, AS923_RX_MAX_DATARATE );
 801533e:	687b      	ldr	r3, [r7, #4]
 8015340:	f993 3000 	ldrsb.w	r3, [r3]
 8015344:	2207      	movs	r2, #7
 8015346:	2102      	movs	r1, #2
 8015348:	4618      	mov	r0, r3
 801534a:	f001 f826 	bl	801639a <RegionCommonValueInRange>
 801534e:	4603      	mov	r3, r0
 8015350:	2b00      	cmp	r3, #0
 8015352:	bf14      	ite	ne
 8015354:	2301      	movne	r3, #1
 8015356:	2300      	moveq	r3, #0
 8015358:	b2db      	uxtb	r3, r3
 801535a:	e011      	b.n	8015380 <RegionAS923Verify+0x134>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, AS923_MAX_TX_POWER, AS923_MIN_TX_POWER );
 801535c:	687b      	ldr	r3, [r7, #4]
 801535e:	f993 3000 	ldrsb.w	r3, [r3]
 8015362:	2207      	movs	r2, #7
 8015364:	2100      	movs	r1, #0
 8015366:	4618      	mov	r0, r3
 8015368:	f001 f817 	bl	801639a <RegionCommonValueInRange>
 801536c:	4603      	mov	r3, r0
 801536e:	2b00      	cmp	r3, #0
 8015370:	bf14      	ite	ne
 8015372:	2301      	movne	r3, #1
 8015374:	2300      	moveq	r3, #0
 8015376:	b2db      	uxtb	r3, r3
 8015378:	e002      	b.n	8015380 <RegionAS923Verify+0x134>
        }
        case PHY_DUTY_CYCLE:
        {
            return AS923_DUTY_CYCLE_ENABLED;
 801537a:	2300      	movs	r3, #0
 801537c:	e000      	b.n	8015380 <RegionAS923Verify+0x134>
        }
        default:
            return false;
 801537e:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_AS923 */
}
 8015380:	4618      	mov	r0, r3
 8015382:	3708      	adds	r7, #8
 8015384:	46bd      	mov	sp, r7
 8015386:	bd80      	pop	{r7, pc}

08015388 <RegionAS923ApplyCFList>:

void RegionAS923ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8015388:	b580      	push	{r7, lr}
 801538a:	b08a      	sub	sp, #40	@ 0x28
 801538c:	af00      	add	r7, sp, #0
 801538e:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8015390:	2350      	movs	r3, #80	@ 0x50
 8015392:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 8015396:	687b      	ldr	r3, [r7, #4]
 8015398:	7a1b      	ldrb	r3, [r3, #8]
 801539a:	2b10      	cmp	r3, #16
 801539c:	d162      	bne.n	8015464 <RegionAS923ApplyCFList+0xdc>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 801539e:	687b      	ldr	r3, [r7, #4]
 80153a0:	685b      	ldr	r3, [r3, #4]
 80153a2:	330f      	adds	r3, #15
 80153a4:	781b      	ldrb	r3, [r3, #0]
 80153a6:	2b00      	cmp	r3, #0
 80153a8:	d15e      	bne.n	8015468 <RegionAS923ApplyCFList+0xe0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = AS923_NUMB_DEFAULT_CHANNELS; chanIdx < AS923_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 80153aa:	2300      	movs	r3, #0
 80153ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80153b0:	2302      	movs	r3, #2
 80153b2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80153b6:	e050      	b.n	801545a <RegionAS923ApplyCFList+0xd2>
    {
        if( chanIdx < ( AS923_NUMB_CHANNELS_CF_LIST + AS923_NUMB_DEFAULT_CHANNELS ) )
 80153b8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80153bc:	2b06      	cmp	r3, #6
 80153be:	d824      	bhi.n	801540a <RegionAS923ApplyCFList+0x82>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 80153c0:	687b      	ldr	r3, [r7, #4]
 80153c2:	685a      	ldr	r2, [r3, #4]
 80153c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80153c8:	4413      	add	r3, r2
 80153ca:	781b      	ldrb	r3, [r3, #0]
 80153cc:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 80153ce:	69ba      	ldr	r2, [r7, #24]
 80153d0:	687b      	ldr	r3, [r7, #4]
 80153d2:	6859      	ldr	r1, [r3, #4]
 80153d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80153d8:	3301      	adds	r3, #1
 80153da:	440b      	add	r3, r1
 80153dc:	781b      	ldrb	r3, [r3, #0]
 80153de:	021b      	lsls	r3, r3, #8
 80153e0:	4313      	orrs	r3, r2
 80153e2:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 80153e4:	69ba      	ldr	r2, [r7, #24]
 80153e6:	687b      	ldr	r3, [r7, #4]
 80153e8:	6859      	ldr	r1, [r3, #4]
 80153ea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80153ee:	3302      	adds	r3, #2
 80153f0:	440b      	add	r3, r1
 80153f2:	781b      	ldrb	r3, [r3, #0]
 80153f4:	041b      	lsls	r3, r3, #16
 80153f6:	4313      	orrs	r3, r2
 80153f8:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency *= 100;
 80153fa:	69bb      	ldr	r3, [r7, #24]
 80153fc:	2264      	movs	r2, #100	@ 0x64
 80153fe:	fb02 f303 	mul.w	r3, r2, r3
 8015402:	61bb      	str	r3, [r7, #24]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 8015404:	2300      	movs	r3, #0
 8015406:	61fb      	str	r3, [r7, #28]
 8015408:	e006      	b.n	8015418 <RegionAS923ApplyCFList+0x90>
        }
        else
        {
            newChannel.Frequency = 0;
 801540a:	2300      	movs	r3, #0
 801540c:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 801540e:	2300      	movs	r3, #0
 8015410:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 8015414:	2300      	movs	r3, #0
 8015416:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 8015418:	69bb      	ldr	r3, [r7, #24]
 801541a:	2b00      	cmp	r3, #0
 801541c:	d00b      	beq.n	8015436 <RegionAS923ApplyCFList+0xae>
        {
            channelAdd.NewChannel = &newChannel;
 801541e:	f107 0318 	add.w	r3, r7, #24
 8015422:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 8015424:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015428:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionAS923ChannelAdd( &channelAdd );
 801542a:	f107 0310 	add.w	r3, r7, #16
 801542e:	4618      	mov	r0, r3
 8015430:	f000 fd00 	bl	8015e34 <RegionAS923ChannelAdd>
 8015434:	e007      	b.n	8015446 <RegionAS923ApplyCFList+0xbe>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 8015436:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801543a:	733b      	strb	r3, [r7, #12]

            RegionAS923ChannelsRemove( &channelRemove );
 801543c:	f107 030c 	add.w	r3, r7, #12
 8015440:	4618      	mov	r0, r3
 8015442:	f000 fd93 	bl	8015f6c <RegionAS923ChannelsRemove>
    for( uint8_t i = 0, chanIdx = AS923_NUMB_DEFAULT_CHANNELS; chanIdx < AS923_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8015446:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801544a:	3303      	adds	r3, #3
 801544c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015450:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015454:	3301      	adds	r3, #1
 8015456:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801545a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801545e:	2b0f      	cmp	r3, #15
 8015460:	d9aa      	bls.n	80153b8 <RegionAS923ApplyCFList+0x30>
 8015462:	e002      	b.n	801546a <RegionAS923ApplyCFList+0xe2>
        return;
 8015464:	bf00      	nop
 8015466:	e000      	b.n	801546a <RegionAS923ApplyCFList+0xe2>
        return;
 8015468:	bf00      	nop
        }
    }
#endif /* REGION_AS923 */
}
 801546a:	3728      	adds	r7, #40	@ 0x28
 801546c:	46bd      	mov	sp, r7
 801546e:	bd80      	pop	{r7, pc}

08015470 <RegionAS923ChanMaskSet>:

bool RegionAS923ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8015470:	b580      	push	{r7, lr}
 8015472:	b082      	sub	sp, #8
 8015474:	af00      	add	r7, sp, #0
 8015476:	6078      	str	r0, [r7, #4]
#if defined( REGION_AS923 )
    switch( chanMaskSet->ChannelsMaskType )
 8015478:	687b      	ldr	r3, [r7, #4]
 801547a:	791b      	ldrb	r3, [r3, #4]
 801547c:	2b00      	cmp	r3, #0
 801547e:	d002      	beq.n	8015486 <RegionAS923ChanMaskSet+0x16>
 8015480:	2b01      	cmp	r3, #1
 8015482:	d00b      	beq.n	801549c <RegionAS923ChanMaskSet+0x2c>
 8015484:	e015      	b.n	80154b2 <RegionAS923ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, 1 );
 8015486:	4b0e      	ldr	r3, [pc, #56]	@ (80154c0 <RegionAS923ChanMaskSet+0x50>)
 8015488:	681b      	ldr	r3, [r3, #0]
 801548a:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 801548e:	687b      	ldr	r3, [r7, #4]
 8015490:	681b      	ldr	r3, [r3, #0]
 8015492:	2201      	movs	r2, #1
 8015494:	4619      	mov	r1, r3
 8015496:	f000 fffd 	bl	8016494 <RegionCommonChanMaskCopy>
            break;
 801549a:	e00c      	b.n	80154b6 <RegionAS923ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 1 );
 801549c:	4b08      	ldr	r3, [pc, #32]	@ (80154c0 <RegionAS923ChanMaskSet+0x50>)
 801549e:	681b      	ldr	r3, [r3, #0]
 80154a0:	f503 705b 	add.w	r0, r3, #876	@ 0x36c
 80154a4:	687b      	ldr	r3, [r7, #4]
 80154a6:	681b      	ldr	r3, [r3, #0]
 80154a8:	2201      	movs	r2, #1
 80154aa:	4619      	mov	r1, r3
 80154ac:	f000 fff2 	bl	8016494 <RegionCommonChanMaskCopy>
            break;
 80154b0:	e001      	b.n	80154b6 <RegionAS923ChanMaskSet+0x46>
        }
        default:
            return false;
 80154b2:	2300      	movs	r3, #0
 80154b4:	e000      	b.n	80154b8 <RegionAS923ChanMaskSet+0x48>
    }
    return true;
 80154b6:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_AS923 */
}
 80154b8:	4618      	mov	r0, r3
 80154ba:	3708      	adds	r7, #8
 80154bc:	46bd      	mov	sp, r7
 80154be:	bd80      	pop	{r7, pc}
 80154c0:	20001bcc 	.word	0x20001bcc

080154c4 <RegionAS923ComputeRxWindowParameters>:

void RegionAS923ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 80154c4:	b580      	push	{r7, lr}
 80154c6:	b088      	sub	sp, #32
 80154c8:	af02      	add	r7, sp, #8
 80154ca:	60ba      	str	r2, [r7, #8]
 80154cc:	607b      	str	r3, [r7, #4]
 80154ce:	4603      	mov	r3, r0
 80154d0:	73fb      	strb	r3, [r7, #15]
 80154d2:	460b      	mov	r3, r1
 80154d4:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_AS923 )
    uint32_t tSymbolInUs = 0;
 80154d6:	2300      	movs	r3, #0
 80154d8:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, AS923_RX_MAX_DATARATE );
 80154da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80154de:	2b07      	cmp	r3, #7
 80154e0:	bfa8      	it	ge
 80154e2:	2307      	movge	r3, #7
 80154e4:	b25a      	sxtb	r2, r3
 80154e6:	687b      	ldr	r3, [r7, #4]
 80154e8:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsAS923 );
 80154ea:	687b      	ldr	r3, [r7, #4]
 80154ec:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80154f0:	491e      	ldr	r1, [pc, #120]	@ (801556c <RegionAS923ComputeRxWindowParameters+0xa8>)
 80154f2:	4618      	mov	r0, r3
 80154f4:	f001 fc6e 	bl	8016dd4 <RegionCommonGetBandwidth>
 80154f8:	4603      	mov	r3, r0
 80154fa:	b2da      	uxtb	r2, r3
 80154fc:	687b      	ldr	r3, [r7, #4]
 80154fe:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 8015500:	687b      	ldr	r3, [r7, #4]
 8015502:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015506:	2b07      	cmp	r3, #7
 8015508:	d10a      	bne.n	8015520 <RegionAS923ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesAS923[rxConfigParams->Datarate] );
 801550a:	687b      	ldr	r3, [r7, #4]
 801550c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015510:	461a      	mov	r2, r3
 8015512:	4b17      	ldr	r3, [pc, #92]	@ (8015570 <RegionAS923ComputeRxWindowParameters+0xac>)
 8015514:	5c9b      	ldrb	r3, [r3, r2]
 8015516:	4618      	mov	r0, r3
 8015518:	f001 f9f0 	bl	80168fc <RegionCommonComputeSymbolTimeFsk>
 801551c:	6178      	str	r0, [r7, #20]
 801551e:	e011      	b.n	8015544 <RegionAS923ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesAS923[rxConfigParams->Datarate], BandwidthsAS923[rxConfigParams->Datarate] );
 8015520:	687b      	ldr	r3, [r7, #4]
 8015522:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015526:	461a      	mov	r2, r3
 8015528:	4b11      	ldr	r3, [pc, #68]	@ (8015570 <RegionAS923ComputeRxWindowParameters+0xac>)
 801552a:	5c9a      	ldrb	r2, [r3, r2]
 801552c:	687b      	ldr	r3, [r7, #4]
 801552e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015532:	4619      	mov	r1, r3
 8015534:	4b0d      	ldr	r3, [pc, #52]	@ (801556c <RegionAS923ComputeRxWindowParameters+0xa8>)
 8015536:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801553a:	4619      	mov	r1, r3
 801553c:	4610      	mov	r0, r2
 801553e:	f001 f9c7 	bl	80168d0 <RegionCommonComputeSymbolTimeLoRa>
 8015542:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8015544:	4b0b      	ldr	r3, [pc, #44]	@ (8015574 <RegionAS923ComputeRxWindowParameters+0xb0>)
 8015546:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8015548:	4798      	blx	r3
 801554a:	687b      	ldr	r3, [r7, #4]
 801554c:	3308      	adds	r3, #8
 801554e:	687a      	ldr	r2, [r7, #4]
 8015550:	320c      	adds	r2, #12
 8015552:	7bb9      	ldrb	r1, [r7, #14]
 8015554:	9201      	str	r2, [sp, #4]
 8015556:	9300      	str	r3, [sp, #0]
 8015558:	4603      	mov	r3, r0
 801555a:	68ba      	ldr	r2, [r7, #8]
 801555c:	6978      	ldr	r0, [r7, #20]
 801555e:	f001 f9dd 	bl	801691c <RegionCommonComputeRxWindowParameters>
#endif /* REGION_AS923 */
}
 8015562:	bf00      	nop
 8015564:	3718      	adds	r7, #24
 8015566:	46bd      	mov	sp, r7
 8015568:	bd80      	pop	{r7, pc}
 801556a:	bf00      	nop
 801556c:	0801f3ac 	.word	0x0801f3ac
 8015570:	0801f3a4 	.word	0x0801f3a4
 8015574:	0801f464 	.word	0x0801f464

08015578 <RegionAS923RxConfig>:

bool RegionAS923RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8015578:	b5b0      	push	{r4, r5, r7, lr}
 801557a:	b090      	sub	sp, #64	@ 0x40
 801557c:	af0a      	add	r7, sp, #40	@ 0x28
 801557e:	6078      	str	r0, [r7, #4]
 8015580:	6039      	str	r1, [r7, #0]
#if defined( REGION_AS923 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 8015582:	687b      	ldr	r3, [r7, #4]
 8015584:	785b      	ldrb	r3, [r3, #1]
 8015586:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 8015588:	2300      	movs	r3, #0
 801558a:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 801558c:	2300      	movs	r3, #0
 801558e:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 8015590:	687b      	ldr	r3, [r7, #4]
 8015592:	685b      	ldr	r3, [r3, #4]
 8015594:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 8015596:	4b5a      	ldr	r3, [pc, #360]	@ (8015700 <RegionAS923RxConfig+0x188>)
 8015598:	685b      	ldr	r3, [r3, #4]
 801559a:	4798      	blx	r3
 801559c:	4603      	mov	r3, r0
 801559e:	2b00      	cmp	r3, #0
 80155a0:	d001      	beq.n	80155a6 <RegionAS923RxConfig+0x2e>
    {
        return false;
 80155a2:	2300      	movs	r3, #0
 80155a4:	e0a8      	b.n	80156f8 <RegionAS923RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 80155a6:	687b      	ldr	r3, [r7, #4]
 80155a8:	7cdb      	ldrb	r3, [r3, #19]
 80155aa:	2b00      	cmp	r3, #0
 80155ac:	d126      	bne.n	80155fc <RegionAS923RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 80155ae:	4b55      	ldr	r3, [pc, #340]	@ (8015704 <RegionAS923RxConfig+0x18c>)
 80155b0:	681a      	ldr	r2, [r3, #0]
 80155b2:	687b      	ldr	r3, [r7, #4]
 80155b4:	781b      	ldrb	r3, [r3, #0]
 80155b6:	4619      	mov	r1, r3
 80155b8:	460b      	mov	r3, r1
 80155ba:	005b      	lsls	r3, r3, #1
 80155bc:	440b      	add	r3, r1
 80155be:	009b      	lsls	r3, r3, #2
 80155c0:	4413      	add	r3, r2
 80155c2:	681b      	ldr	r3, [r3, #0]
 80155c4:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 80155c6:	4b4f      	ldr	r3, [pc, #316]	@ (8015704 <RegionAS923RxConfig+0x18c>)
 80155c8:	681a      	ldr	r2, [r3, #0]
 80155ca:	687b      	ldr	r3, [r7, #4]
 80155cc:	781b      	ldrb	r3, [r3, #0]
 80155ce:	4619      	mov	r1, r3
 80155d0:	460b      	mov	r3, r1
 80155d2:	005b      	lsls	r3, r3, #1
 80155d4:	440b      	add	r3, r1
 80155d6:	009b      	lsls	r3, r3, #2
 80155d8:	4413      	add	r3, r2
 80155da:	3304      	adds	r3, #4
 80155dc:	681b      	ldr	r3, [r3, #0]
 80155de:	2b00      	cmp	r3, #0
 80155e0:	d00c      	beq.n	80155fc <RegionAS923RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 80155e2:	4b48      	ldr	r3, [pc, #288]	@ (8015704 <RegionAS923RxConfig+0x18c>)
 80155e4:	681a      	ldr	r2, [r3, #0]
 80155e6:	687b      	ldr	r3, [r7, #4]
 80155e8:	781b      	ldrb	r3, [r3, #0]
 80155ea:	4619      	mov	r1, r3
 80155ec:	460b      	mov	r3, r1
 80155ee:	005b      	lsls	r3, r3, #1
 80155f0:	440b      	add	r3, r1
 80155f2:	009b      	lsls	r3, r3, #2
 80155f4:	4413      	add	r3, r2
 80155f6:	3304      	adds	r3, #4
 80155f8:	681b      	ldr	r3, [r3, #0]
 80155fa:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesAS923[dr];
 80155fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015600:	4a41      	ldr	r2, [pc, #260]	@ (8015708 <RegionAS923RxConfig+0x190>)
 8015602:	5cd3      	ldrb	r3, [r2, r3]
 8015604:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 8015606:	4b3e      	ldr	r3, [pc, #248]	@ (8015700 <RegionAS923RxConfig+0x188>)
 8015608:	68db      	ldr	r3, [r3, #12]
 801560a:	6938      	ldr	r0, [r7, #16]
 801560c:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 801560e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015612:	2b07      	cmp	r3, #7
 8015614:	d128      	bne.n	8015668 <RegionAS923RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 8015616:	2300      	movs	r3, #0
 8015618:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 801561a:	4b39      	ldr	r3, [pc, #228]	@ (8015700 <RegionAS923RxConfig+0x188>)
 801561c:	699c      	ldr	r4, [r3, #24]
 801561e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015622:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8015626:	fb02 f303 	mul.w	r3, r2, r3
 801562a:	4619      	mov	r1, r3
 801562c:	687b      	ldr	r3, [r7, #4]
 801562e:	689b      	ldr	r3, [r3, #8]
 8015630:	b29b      	uxth	r3, r3
 8015632:	687a      	ldr	r2, [r7, #4]
 8015634:	7c92      	ldrb	r2, [r2, #18]
 8015636:	7df8      	ldrb	r0, [r7, #23]
 8015638:	9209      	str	r2, [sp, #36]	@ 0x24
 801563a:	2200      	movs	r2, #0
 801563c:	9208      	str	r2, [sp, #32]
 801563e:	2200      	movs	r2, #0
 8015640:	9207      	str	r2, [sp, #28]
 8015642:	2200      	movs	r2, #0
 8015644:	9206      	str	r2, [sp, #24]
 8015646:	2201      	movs	r2, #1
 8015648:	9205      	str	r2, [sp, #20]
 801564a:	2200      	movs	r2, #0
 801564c:	9204      	str	r2, [sp, #16]
 801564e:	2200      	movs	r2, #0
 8015650:	9203      	str	r2, [sp, #12]
 8015652:	9302      	str	r3, [sp, #8]
 8015654:	2305      	movs	r3, #5
 8015656:	9301      	str	r3, [sp, #4]
 8015658:	4b2c      	ldr	r3, [pc, #176]	@ (801570c <RegionAS923RxConfig+0x194>)
 801565a:	9300      	str	r3, [sp, #0]
 801565c:	2300      	movs	r3, #0
 801565e:	460a      	mov	r2, r1
 8015660:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8015664:	47a0      	blx	r4
 8015666:	e024      	b.n	80156b2 <RegionAS923RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 8015668:	2301      	movs	r3, #1
 801566a:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 801566c:	4b24      	ldr	r3, [pc, #144]	@ (8015700 <RegionAS923RxConfig+0x188>)
 801566e:	699c      	ldr	r4, [r3, #24]
 8015670:	687b      	ldr	r3, [r7, #4]
 8015672:	789b      	ldrb	r3, [r3, #2]
 8015674:	461d      	mov	r5, r3
 8015676:	f997 100e 	ldrsb.w	r1, [r7, #14]
 801567a:	687b      	ldr	r3, [r7, #4]
 801567c:	689b      	ldr	r3, [r3, #8]
 801567e:	b29b      	uxth	r3, r3
 8015680:	687a      	ldr	r2, [r7, #4]
 8015682:	7c92      	ldrb	r2, [r2, #18]
 8015684:	7df8      	ldrb	r0, [r7, #23]
 8015686:	9209      	str	r2, [sp, #36]	@ 0x24
 8015688:	2201      	movs	r2, #1
 801568a:	9208      	str	r2, [sp, #32]
 801568c:	2200      	movs	r2, #0
 801568e:	9207      	str	r2, [sp, #28]
 8015690:	2200      	movs	r2, #0
 8015692:	9206      	str	r2, [sp, #24]
 8015694:	2200      	movs	r2, #0
 8015696:	9205      	str	r2, [sp, #20]
 8015698:	2200      	movs	r2, #0
 801569a:	9204      	str	r2, [sp, #16]
 801569c:	2200      	movs	r2, #0
 801569e:	9203      	str	r2, [sp, #12]
 80156a0:	9302      	str	r3, [sp, #8]
 80156a2:	2308      	movs	r3, #8
 80156a4:	9301      	str	r3, [sp, #4]
 80156a6:	2300      	movs	r3, #0
 80156a8:	9300      	str	r3, [sp, #0]
 80156aa:	2301      	movs	r3, #1
 80156ac:	460a      	mov	r2, r1
 80156ae:	4629      	mov	r1, r5
 80156b0:	47a0      	blx	r4
    }

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 80156b2:	687b      	ldr	r3, [r7, #4]
 80156b4:	7c5b      	ldrb	r3, [r3, #17]
 80156b6:	2b00      	cmp	r3, #0
 80156b8:	d005      	beq.n	80156c6 <RegionAS923RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterDwell0AS923[dr];
 80156ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80156be:	4a14      	ldr	r2, [pc, #80]	@ (8015710 <RegionAS923RxConfig+0x198>)
 80156c0:	5cd3      	ldrb	r3, [r2, r3]
 80156c2:	75bb      	strb	r3, [r7, #22]
 80156c4:	e004      	b.n	80156d0 <RegionAS923RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateDwell0AS923[dr];
 80156c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80156ca:	4a12      	ldr	r2, [pc, #72]	@ (8015714 <RegionAS923RxConfig+0x19c>)
 80156cc:	5cd3      	ldrb	r3, [r2, r3]
 80156ce:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 80156d0:	4b0b      	ldr	r3, [pc, #44]	@ (8015700 <RegionAS923RxConfig+0x188>)
 80156d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80156d4:	7dba      	ldrb	r2, [r7, #22]
 80156d6:	320d      	adds	r2, #13
 80156d8:	b2d1      	uxtb	r1, r2
 80156da:	7dfa      	ldrb	r2, [r7, #23]
 80156dc:	4610      	mov	r0, r2
 80156de:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 80156e0:	687b      	ldr	r3, [r7, #4]
 80156e2:	7cdb      	ldrb	r3, [r3, #19]
 80156e4:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80156e8:	6939      	ldr	r1, [r7, #16]
 80156ea:	4618      	mov	r0, r3
 80156ec:	f001 fb90 	bl	8016e10 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 80156f0:	683b      	ldr	r3, [r7, #0]
 80156f2:	7bfa      	ldrb	r2, [r7, #15]
 80156f4:	701a      	strb	r2, [r3, #0]
    return true;
 80156f6:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_AS923 */
}
 80156f8:	4618      	mov	r0, r3
 80156fa:	3718      	adds	r7, #24
 80156fc:	46bd      	mov	sp, r7
 80156fe:	bdb0      	pop	{r4, r5, r7, pc}
 8015700:	0801f464 	.word	0x0801f464
 8015704:	20001bcc 	.word	0x20001bcc
 8015708:	0801f3a4 	.word	0x0801f3a4
 801570c:	00014585 	.word	0x00014585
 8015710:	0801f3d4 	.word	0x0801f3d4
 8015714:	0801f3cc 	.word	0x0801f3cc

08015718 <RegionAS923TxConfig>:

bool RegionAS923TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8015718:	b590      	push	{r4, r7, lr}
 801571a:	b093      	sub	sp, #76	@ 0x4c
 801571c:	af0a      	add	r7, sp, #40	@ 0x28
 801571e:	60f8      	str	r0, [r7, #12]
 8015720:	60b9      	str	r1, [r7, #8]
 8015722:	607a      	str	r2, [r7, #4]
#if defined( REGION_AS923 )
    RadioModems_t modem;
    int8_t phyDr = DataratesAS923[txConfig->Datarate];
 8015724:	68fb      	ldr	r3, [r7, #12]
 8015726:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801572a:	461a      	mov	r2, r3
 801572c:	4b5d      	ldr	r3, [pc, #372]	@ (80158a4 <RegionAS923TxConfig+0x18c>)
 801572e:	5c9b      	ldrb	r3, [r3, r2]
 8015730:	77bb      	strb	r3, [r7, #30]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 8015732:	68fb      	ldr	r3, [r7, #12]
 8015734:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8015738:	4b5b      	ldr	r3, [pc, #364]	@ (80158a8 <RegionAS923TxConfig+0x190>)
 801573a:	681a      	ldr	r2, [r3, #0]
 801573c:	4b5b      	ldr	r3, [pc, #364]	@ (80158ac <RegionAS923TxConfig+0x194>)
 801573e:	6819      	ldr	r1, [r3, #0]
 8015740:	68fb      	ldr	r3, [r7, #12]
 8015742:	781b      	ldrb	r3, [r3, #0]
 8015744:	461c      	mov	r4, r3
 8015746:	4623      	mov	r3, r4
 8015748:	005b      	lsls	r3, r3, #1
 801574a:	4423      	add	r3, r4
 801574c:	009b      	lsls	r3, r3, #2
 801574e:	440b      	add	r3, r1
 8015750:	3309      	adds	r3, #9
 8015752:	781b      	ldrb	r3, [r3, #0]
 8015754:	4619      	mov	r1, r3
 8015756:	460b      	mov	r3, r1
 8015758:	005b      	lsls	r3, r3, #1
 801575a:	440b      	add	r3, r1
 801575c:	00db      	lsls	r3, r3, #3
 801575e:	4413      	add	r3, r2
 8015760:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8015764:	4619      	mov	r1, r3
 8015766:	f001 fb20 	bl	8016daa <RegionCommonLimitTxPower>
 801576a:	4603      	mov	r3, r0
 801576c:	777b      	strb	r3, [r7, #29]
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsAS923 );
 801576e:	68fb      	ldr	r3, [r7, #12]
 8015770:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015774:	494e      	ldr	r1, [pc, #312]	@ (80158b0 <RegionAS923TxConfig+0x198>)
 8015776:	4618      	mov	r0, r3
 8015778:	f001 fb2c 	bl	8016dd4 <RegionCommonGetBandwidth>
 801577c:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 801577e:	2300      	movs	r3, #0
 8015780:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8015782:	68fb      	ldr	r3, [r7, #12]
 8015784:	6859      	ldr	r1, [r3, #4]
 8015786:	68fb      	ldr	r3, [r7, #12]
 8015788:	689a      	ldr	r2, [r3, #8]
 801578a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 801578e:	4618      	mov	r0, r3
 8015790:	f001 f97c 	bl	8016a8c <RegionCommonComputeTxPower>
 8015794:	4603      	mov	r3, r0
 8015796:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8015798:	4b46      	ldr	r3, [pc, #280]	@ (80158b4 <RegionAS923TxConfig+0x19c>)
 801579a:	68da      	ldr	r2, [r3, #12]
 801579c:	4b43      	ldr	r3, [pc, #268]	@ (80158ac <RegionAS923TxConfig+0x194>)
 801579e:	6819      	ldr	r1, [r3, #0]
 80157a0:	68fb      	ldr	r3, [r7, #12]
 80157a2:	781b      	ldrb	r3, [r3, #0]
 80157a4:	4618      	mov	r0, r3
 80157a6:	4603      	mov	r3, r0
 80157a8:	005b      	lsls	r3, r3, #1
 80157aa:	4403      	add	r3, r0
 80157ac:	009b      	lsls	r3, r3, #2
 80157ae:	440b      	add	r3, r1
 80157b0:	681b      	ldr	r3, [r3, #0]
 80157b2:	4618      	mov	r0, r3
 80157b4:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 80157b6:	68fb      	ldr	r3, [r7, #12]
 80157b8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80157bc:	2b07      	cmp	r3, #7
 80157be:	d124      	bne.n	801580a <RegionAS923TxConfig+0xf2>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 80157c0:	2300      	movs	r3, #0
 80157c2:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 80157c4:	4b3b      	ldr	r3, [pc, #236]	@ (80158b4 <RegionAS923TxConfig+0x19c>)
 80157c6:	69dc      	ldr	r4, [r3, #28]
 80157c8:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80157cc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80157d0:	fb02 f303 	mul.w	r3, r2, r3
 80157d4:	461a      	mov	r2, r3
 80157d6:	f997 1017 	ldrsb.w	r1, [r7, #23]
 80157da:	7ff8      	ldrb	r0, [r7, #31]
 80157dc:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 80157e0:	9308      	str	r3, [sp, #32]
 80157e2:	2300      	movs	r3, #0
 80157e4:	9307      	str	r3, [sp, #28]
 80157e6:	2300      	movs	r3, #0
 80157e8:	9306      	str	r3, [sp, #24]
 80157ea:	2300      	movs	r3, #0
 80157ec:	9305      	str	r3, [sp, #20]
 80157ee:	2301      	movs	r3, #1
 80157f0:	9304      	str	r3, [sp, #16]
 80157f2:	2300      	movs	r3, #0
 80157f4:	9303      	str	r3, [sp, #12]
 80157f6:	2305      	movs	r3, #5
 80157f8:	9302      	str	r3, [sp, #8]
 80157fa:	2300      	movs	r3, #0
 80157fc:	9301      	str	r3, [sp, #4]
 80157fe:	9200      	str	r2, [sp, #0]
 8015800:	69bb      	ldr	r3, [r7, #24]
 8015802:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8015806:	47a0      	blx	r4
 8015808:	e01d      	b.n	8015846 <RegionAS923TxConfig+0x12e>
    }
    else
    {
        modem = MODEM_LORA;
 801580a:	2301      	movs	r3, #1
 801580c:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 801580e:	4b29      	ldr	r3, [pc, #164]	@ (80158b4 <RegionAS923TxConfig+0x19c>)
 8015810:	69dc      	ldr	r4, [r3, #28]
 8015812:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8015816:	f997 1017 	ldrsb.w	r1, [r7, #23]
 801581a:	7ff8      	ldrb	r0, [r7, #31]
 801581c:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8015820:	9208      	str	r2, [sp, #32]
 8015822:	2200      	movs	r2, #0
 8015824:	9207      	str	r2, [sp, #28]
 8015826:	2200      	movs	r2, #0
 8015828:	9206      	str	r2, [sp, #24]
 801582a:	2200      	movs	r2, #0
 801582c:	9205      	str	r2, [sp, #20]
 801582e:	2201      	movs	r2, #1
 8015830:	9204      	str	r2, [sp, #16]
 8015832:	2200      	movs	r2, #0
 8015834:	9203      	str	r2, [sp, #12]
 8015836:	2208      	movs	r2, #8
 8015838:	9202      	str	r2, [sp, #8]
 801583a:	2201      	movs	r2, #1
 801583c:	9201      	str	r2, [sp, #4]
 801583e:	9300      	str	r3, [sp, #0]
 8015840:	69bb      	ldr	r3, [r7, #24]
 8015842:	2200      	movs	r2, #0
 8015844:	47a0      	blx	r4
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 8015846:	4b19      	ldr	r3, [pc, #100]	@ (80158ac <RegionAS923TxConfig+0x194>)
 8015848:	681a      	ldr	r2, [r3, #0]
 801584a:	68fb      	ldr	r3, [r7, #12]
 801584c:	781b      	ldrb	r3, [r3, #0]
 801584e:	4619      	mov	r1, r3
 8015850:	460b      	mov	r3, r1
 8015852:	005b      	lsls	r3, r3, #1
 8015854:	440b      	add	r3, r1
 8015856:	009b      	lsls	r3, r3, #2
 8015858:	4413      	add	r3, r2
 801585a:	681a      	ldr	r2, [r3, #0]
 801585c:	68fb      	ldr	r3, [r7, #12]
 801585e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015862:	4619      	mov	r1, r3
 8015864:	4610      	mov	r0, r2
 8015866:	f001 fb05 	bl	8016e74 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 801586a:	68fb      	ldr	r3, [r7, #12]
 801586c:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8015870:	68fb      	ldr	r3, [r7, #12]
 8015872:	899b      	ldrh	r3, [r3, #12]
 8015874:	4619      	mov	r1, r3
 8015876:	4610      	mov	r0, r2
 8015878:	f7ff fa64 	bl	8014d44 <GetTimeOnAir>
 801587c:	4602      	mov	r2, r0
 801587e:	687b      	ldr	r3, [r7, #4]
 8015880:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 8015882:	4b0c      	ldr	r3, [pc, #48]	@ (80158b4 <RegionAS923TxConfig+0x19c>)
 8015884:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015886:	68fa      	ldr	r2, [r7, #12]
 8015888:	8992      	ldrh	r2, [r2, #12]
 801588a:	b2d1      	uxtb	r1, r2
 801588c:	7ffa      	ldrb	r2, [r7, #31]
 801588e:	4610      	mov	r0, r2
 8015890:	4798      	blx	r3

    *txPower = txPowerLimited;
 8015892:	68bb      	ldr	r3, [r7, #8]
 8015894:	7f7a      	ldrb	r2, [r7, #29]
 8015896:	701a      	strb	r2, [r3, #0]
    return true;
 8015898:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_AS923 */
}
 801589a:	4618      	mov	r0, r3
 801589c:	3724      	adds	r7, #36	@ 0x24
 801589e:	46bd      	mov	sp, r7
 80158a0:	bd90      	pop	{r4, r7, pc}
 80158a2:	bf00      	nop
 80158a4:	0801f3a4 	.word	0x0801f3a4
 80158a8:	20001bd0 	.word	0x20001bd0
 80158ac:	20001bcc 	.word	0x20001bcc
 80158b0:	0801f3ac 	.word	0x0801f3ac
 80158b4:	0801f464 	.word	0x0801f464

080158b8 <RegionAS923LinkAdrReq>:

uint8_t RegionAS923LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 80158b8:	b590      	push	{r4, r7, lr}
 80158ba:	b093      	sub	sp, #76	@ 0x4c
 80158bc:	af00      	add	r7, sp, #0
 80158be:	60f8      	str	r0, [r7, #12]
 80158c0:	60b9      	str	r1, [r7, #8]
 80158c2:	607a      	str	r2, [r7, #4]
 80158c4:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 80158c6:	2307      	movs	r3, #7
 80158c8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
#if defined( REGION_AS923 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 80158cc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80158d0:	2200      	movs	r2, #0
 80158d2:	601a      	str	r2, [r3, #0]
 80158d4:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 80158d6:	2300      	movs	r3, #0
 80158d8:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
    uint8_t bytesProcessed = 0;
 80158dc:	2300      	movs	r3, #0
 80158de:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    uint16_t chMask = 0;
 80158e2:	2300      	movs	r3, #0
 80158e4:	877b      	strh	r3, [r7, #58]	@ 0x3a
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 80158e6:	e085      	b.n	80159f4 <RegionAS923LinkAdrReq+0x13c>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 80158e8:	68fb      	ldr	r3, [r7, #12]
 80158ea:	685a      	ldr	r2, [r3, #4]
 80158ec:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80158f0:	4413      	add	r3, r2
 80158f2:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 80158f6:	4611      	mov	r1, r2
 80158f8:	4618      	mov	r0, r3
 80158fa:	f000 ff0f 	bl	801671c <RegionCommonParseLinkAdrReq>
 80158fe:	4603      	mov	r3, r0
 8015900:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44

        if( nextIndex == 0 )
 8015904:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8015908:	2b00      	cmp	r3, #0
 801590a:	d07b      	beq.n	8015a04 <RegionAS923LinkAdrReq+0x14c>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 801590c:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8015910:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8015914:	4413      	add	r3, r2
 8015916:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 801591a:	2307      	movs	r3, #7
 801591c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 8015920:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8015924:	877b      	strh	r3, [r7, #58]	@ 0x3a

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 8015926:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801592a:	2b00      	cmp	r3, #0
 801592c:	d109      	bne.n	8015942 <RegionAS923LinkAdrReq+0x8a>
 801592e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8015930:	2b00      	cmp	r3, #0
 8015932:	d106      	bne.n	8015942 <RegionAS923LinkAdrReq+0x8a>
        {
            status &= 0xFE; // Channel mask KO
 8015934:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015938:	f023 0301 	bic.w	r3, r3, #1
 801593c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8015940:	e058      	b.n	80159f4 <RegionAS923LinkAdrReq+0x13c>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8015942:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8015946:	2b00      	cmp	r3, #0
 8015948:	d003      	beq.n	8015952 <RegionAS923LinkAdrReq+0x9a>
 801594a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801594e:	2b05      	cmp	r3, #5
 8015950:	d903      	bls.n	801595a <RegionAS923LinkAdrReq+0xa2>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 8015952:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8015956:	2b06      	cmp	r3, #6
 8015958:	d906      	bls.n	8015968 <RegionAS923LinkAdrReq+0xb0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 801595a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801595e:	f023 0301 	bic.w	r3, r3, #1
 8015962:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8015966:	e045      	b.n	80159f4 <RegionAS923LinkAdrReq+0x13c>
        }
        else
        {
            for( uint8_t i = 0; i < AS923_MAX_NB_CHANNELS; i++ )
 8015968:	2300      	movs	r3, #0
 801596a:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 801596e:	e03d      	b.n	80159ec <RegionAS923LinkAdrReq+0x134>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 8015970:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8015974:	2b06      	cmp	r3, #6
 8015976:	d118      	bne.n	80159aa <RegionAS923LinkAdrReq+0xf2>
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 8015978:	4b5f      	ldr	r3, [pc, #380]	@ (8015af8 <RegionAS923LinkAdrReq+0x240>)
 801597a:	6819      	ldr	r1, [r3, #0]
 801597c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8015980:	4613      	mov	r3, r2
 8015982:	005b      	lsls	r3, r3, #1
 8015984:	4413      	add	r3, r2
 8015986:	009b      	lsls	r3, r3, #2
 8015988:	440b      	add	r3, r1
 801598a:	681b      	ldr	r3, [r3, #0]
 801598c:	2b00      	cmp	r3, #0
 801598e:	d028      	beq.n	80159e2 <RegionAS923LinkAdrReq+0x12a>
                    {
                        chMask |= 1 << i;
 8015990:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8015994:	2201      	movs	r2, #1
 8015996:	fa02 f303 	lsl.w	r3, r2, r3
 801599a:	b21a      	sxth	r2, r3
 801599c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801599e:	b21b      	sxth	r3, r3
 80159a0:	4313      	orrs	r3, r2
 80159a2:	b21b      	sxth	r3, r3
 80159a4:	b29b      	uxth	r3, r3
 80159a6:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80159a8:	e01b      	b.n	80159e2 <RegionAS923LinkAdrReq+0x12a>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 80159aa:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80159ac:	461a      	mov	r2, r3
 80159ae:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80159b2:	fa42 f303 	asr.w	r3, r2, r3
 80159b6:	f003 0301 	and.w	r3, r3, #1
 80159ba:	2b00      	cmp	r3, #0
 80159bc:	d011      	beq.n	80159e2 <RegionAS923LinkAdrReq+0x12a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 80159be:	4b4e      	ldr	r3, [pc, #312]	@ (8015af8 <RegionAS923LinkAdrReq+0x240>)
 80159c0:	6819      	ldr	r1, [r3, #0]
 80159c2:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80159c6:	4613      	mov	r3, r2
 80159c8:	005b      	lsls	r3, r3, #1
 80159ca:	4413      	add	r3, r2
 80159cc:	009b      	lsls	r3, r3, #2
 80159ce:	440b      	add	r3, r1
 80159d0:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 80159d2:	2b00      	cmp	r3, #0
 80159d4:	d105      	bne.n	80159e2 <RegionAS923LinkAdrReq+0x12a>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 80159d6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80159da:	f023 0301 	bic.w	r3, r3, #1
 80159de:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
            for( uint8_t i = 0; i < AS923_MAX_NB_CHANNELS; i++ )
 80159e2:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80159e6:	3301      	adds	r3, #1
 80159e8:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 80159ec:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80159f0:	2b0f      	cmp	r3, #15
 80159f2:	d9bd      	bls.n	8015970 <RegionAS923LinkAdrReq+0xb8>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 80159f4:	68fb      	ldr	r3, [r7, #12]
 80159f6:	7a1b      	ldrb	r3, [r3, #8]
 80159f8:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 80159fc:	429a      	cmp	r2, r3
 80159fe:	f4ff af73 	bcc.w	80158e8 <RegionAS923LinkAdrReq+0x30>
 8015a02:	e000      	b.n	8015a06 <RegionAS923LinkAdrReq+0x14e>
            break; // break loop, since no more request has been found
 8015a04:	bf00      	nop
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8015a06:	2302      	movs	r3, #2
 8015a08:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8015a0c:	68fb      	ldr	r3, [r7, #12]
 8015a0e:	7a5b      	ldrb	r3, [r3, #9]
 8015a10:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    phyParam = RegionAS923GetPhyParam( &getPhy );
 8015a14:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8015a18:	4618      	mov	r0, r3
 8015a1a:	f7ff f9e3 	bl	8014de4 <RegionAS923GetPhyParam>
 8015a1e:	4603      	mov	r3, r0
 8015a20:	633b      	str	r3, [r7, #48]	@ 0x30

    linkAdrVerifyParams.Status = status;
 8015a22:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015a26:	753b      	strb	r3, [r7, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8015a28:	68fb      	ldr	r3, [r7, #12]
 8015a2a:	7a9b      	ldrb	r3, [r3, #10]
 8015a2c:	757b      	strb	r3, [r7, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8015a2e:	f997 303d 	ldrsb.w	r3, [r7, #61]	@ 0x3d
 8015a32:	75bb      	strb	r3, [r7, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8015a34:	f997 303e 	ldrsb.w	r3, [r7, #62]	@ 0x3e
 8015a38:	75fb      	strb	r3, [r7, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8015a3a:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8015a3e:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8015a40:	68fb      	ldr	r3, [r7, #12]
 8015a42:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8015a46:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8015a48:	68fb      	ldr	r3, [r7, #12]
 8015a4a:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8015a4e:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8015a50:	68fb      	ldr	r3, [r7, #12]
 8015a52:	7b5b      	ldrb	r3, [r3, #13]
 8015a54:	b25b      	sxtb	r3, r3
 8015a56:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbChannels = AS923_MAX_NB_CHANNELS;
 8015a58:	2310      	movs	r3, #16
 8015a5a:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 8015a5c:	f107 033a 	add.w	r3, r7, #58	@ 0x3a
 8015a60:	623b      	str	r3, [r7, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8015a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015a64:	b25b      	sxtb	r3, r3
 8015a66:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    linkAdrVerifyParams.MaxDatarate = AS923_TX_MAX_DATARATE;
 8015a6a:	2307      	movs	r3, #7
 8015a6c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8015a70:	4b21      	ldr	r3, [pc, #132]	@ (8015af8 <RegionAS923LinkAdrReq+0x240>)
 8015a72:	681b      	ldr	r3, [r3, #0]
 8015a74:	62bb      	str	r3, [r7, #40]	@ 0x28
    linkAdrVerifyParams.MinTxPower = AS923_MIN_TX_POWER;
 8015a76:	2307      	movs	r3, #7
 8015a78:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    linkAdrVerifyParams.MaxTxPower = AS923_MAX_TX_POWER;
 8015a7c:	2300      	movs	r3, #0
 8015a7e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8015a82:	68fb      	ldr	r3, [r7, #12]
 8015a84:	681b      	ldr	r3, [r3, #0]
 8015a86:	613b      	str	r3, [r7, #16]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8015a88:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8015a8c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8015a90:	1c9a      	adds	r2, r3, #2
 8015a92:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8015a96:	1c59      	adds	r1, r3, #1
 8015a98:	f107 0010 	add.w	r0, r7, #16
 8015a9c:	4623      	mov	r3, r4
 8015a9e:	f000 fe8f 	bl	80167c0 <RegionCommonLinkAdrReqVerifyParams>
 8015aa2:	4603      	mov	r3, r0
 8015aa4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8015aa8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015aac:	2b07      	cmp	r3, #7
 8015aae:	d10d      	bne.n	8015acc <RegionAS923LinkAdrReq+0x214>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 8015ab0:	4b11      	ldr	r3, [pc, #68]	@ (8015af8 <RegionAS923LinkAdrReq+0x240>)
 8015ab2:	681b      	ldr	r3, [r3, #0]
 8015ab4:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8015ab8:	220c      	movs	r2, #12
 8015aba:	2100      	movs	r1, #0
 8015abc:	4618      	mov	r0, r3
 8015abe:	f001 fa73 	bl	8016fa8 <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 8015ac2:	4b0d      	ldr	r3, [pc, #52]	@ (8015af8 <RegionAS923LinkAdrReq+0x240>)
 8015ac4:	681b      	ldr	r3, [r3, #0]
 8015ac6:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8015ac8:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8015acc:	f997 203d 	ldrsb.w	r2, [r7, #61]	@ 0x3d
 8015ad0:	68bb      	ldr	r3, [r7, #8]
 8015ad2:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8015ad4:	f997 203e 	ldrsb.w	r2, [r7, #62]	@ 0x3e
 8015ad8:	687b      	ldr	r3, [r7, #4]
 8015ada:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8015adc:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8015ae0:	683b      	ldr	r3, [r7, #0]
 8015ae2:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8015ae4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8015ae6:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8015aea:	701a      	strb	r2, [r3, #0]

#endif /* REGION_AS923 */
    return status;
 8015aec:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8015af0:	4618      	mov	r0, r3
 8015af2:	374c      	adds	r7, #76	@ 0x4c
 8015af4:	46bd      	mov	sp, r7
 8015af6:	bd90      	pop	{r4, r7, pc}
 8015af8:	20001bcc 	.word	0x20001bcc

08015afc <RegionAS923RxParamSetupReq>:

uint8_t RegionAS923RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8015afc:	b580      	push	{r7, lr}
 8015afe:	b084      	sub	sp, #16
 8015b00:	af00      	add	r7, sp, #0
 8015b02:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8015b04:	2307      	movs	r3, #7
 8015b06:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_AS923 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 8015b08:	687b      	ldr	r3, [r7, #4]
 8015b0a:	685b      	ldr	r3, [r3, #4]
 8015b0c:	4618      	mov	r0, r3
 8015b0e:	f7ff f8f3 	bl	8014cf8 <VerifyRfFreq>
 8015b12:	4603      	mov	r3, r0
 8015b14:	f083 0301 	eor.w	r3, r3, #1
 8015b18:	b2db      	uxtb	r3, r3
 8015b1a:	2b00      	cmp	r3, #0
 8015b1c:	d003      	beq.n	8015b26 <RegionAS923RxParamSetupReq+0x2a>
    {
        status &= 0xFE; // Channel frequency KO
 8015b1e:	7bfb      	ldrb	r3, [r7, #15]
 8015b20:	f023 0301 	bic.w	r3, r3, #1
 8015b24:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, AS923_RX_MIN_DATARATE, AS923_RX_MAX_DATARATE ) == false )
 8015b26:	687b      	ldr	r3, [r7, #4]
 8015b28:	f993 3000 	ldrsb.w	r3, [r3]
 8015b2c:	2207      	movs	r2, #7
 8015b2e:	2100      	movs	r1, #0
 8015b30:	4618      	mov	r0, r3
 8015b32:	f000 fc32 	bl	801639a <RegionCommonValueInRange>
 8015b36:	4603      	mov	r3, r0
 8015b38:	2b00      	cmp	r3, #0
 8015b3a:	d103      	bne.n	8015b44 <RegionAS923RxParamSetupReq+0x48>
    {
        status &= 0xFD; // Datarate KO
 8015b3c:	7bfb      	ldrb	r3, [r7, #15]
 8015b3e:	f023 0302 	bic.w	r3, r3, #2
 8015b42:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, AS923_MIN_RX1_DR_OFFSET, AS923_MAX_RX1_DR_OFFSET ) == false )
 8015b44:	687b      	ldr	r3, [r7, #4]
 8015b46:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015b4a:	2207      	movs	r2, #7
 8015b4c:	2100      	movs	r1, #0
 8015b4e:	4618      	mov	r0, r3
 8015b50:	f000 fc23 	bl	801639a <RegionCommonValueInRange>
 8015b54:	4603      	mov	r3, r0
 8015b56:	2b00      	cmp	r3, #0
 8015b58:	d103      	bne.n	8015b62 <RegionAS923RxParamSetupReq+0x66>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8015b5a:	7bfb      	ldrb	r3, [r7, #15]
 8015b5c:	f023 0304 	bic.w	r3, r3, #4
 8015b60:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_AS923 */
    return status;
 8015b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8015b64:	4618      	mov	r0, r3
 8015b66:	3710      	adds	r7, #16
 8015b68:	46bd      	mov	sp, r7
 8015b6a:	bd80      	pop	{r7, pc}

08015b6c <RegionAS923NewChannelReq>:

int8_t RegionAS923NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8015b6c:	b580      	push	{r7, lr}
 8015b6e:	b086      	sub	sp, #24
 8015b70:	af00      	add	r7, sp, #0
 8015b72:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8015b74:	2303      	movs	r3, #3
 8015b76:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 8015b78:	687b      	ldr	r3, [r7, #4]
 8015b7a:	681b      	ldr	r3, [r3, #0]
 8015b7c:	681b      	ldr	r3, [r3, #0]
 8015b7e:	2b00      	cmp	r3, #0
 8015b80:	d114      	bne.n	8015bac <RegionAS923NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 8015b82:	687b      	ldr	r3, [r7, #4]
 8015b84:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8015b88:	b2db      	uxtb	r3, r3
 8015b8a:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionAS923ChannelsRemove( &channelRemove ) == false )
 8015b8c:	f107 0308 	add.w	r3, r7, #8
 8015b90:	4618      	mov	r0, r3
 8015b92:	f000 f9eb 	bl	8015f6c <RegionAS923ChannelsRemove>
 8015b96:	4603      	mov	r3, r0
 8015b98:	f083 0301 	eor.w	r3, r3, #1
 8015b9c:	b2db      	uxtb	r3, r3
 8015b9e:	2b00      	cmp	r3, #0
 8015ba0:	d03b      	beq.n	8015c1a <RegionAS923NewChannelReq+0xae>
        {
            status &= 0xFC;
 8015ba2:	7dfb      	ldrb	r3, [r7, #23]
 8015ba4:	f023 0303 	bic.w	r3, r3, #3
 8015ba8:	75fb      	strb	r3, [r7, #23]
 8015baa:	e036      	b.n	8015c1a <RegionAS923NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 8015bac:	687b      	ldr	r3, [r7, #4]
 8015bae:	681b      	ldr	r3, [r3, #0]
 8015bb0:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 8015bb2:	687b      	ldr	r3, [r7, #4]
 8015bb4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8015bb8:	b2db      	uxtb	r3, r3
 8015bba:	743b      	strb	r3, [r7, #16]

        switch( RegionAS923ChannelAdd( &channelAdd ) )
 8015bbc:	f107 030c 	add.w	r3, r7, #12
 8015bc0:	4618      	mov	r0, r3
 8015bc2:	f000 f937 	bl	8015e34 <RegionAS923ChannelAdd>
 8015bc6:	4603      	mov	r3, r0
 8015bc8:	2b06      	cmp	r3, #6
 8015bca:	d820      	bhi.n	8015c0e <RegionAS923NewChannelReq+0xa2>
 8015bcc:	a201      	add	r2, pc, #4	@ (adr r2, 8015bd4 <RegionAS923NewChannelReq+0x68>)
 8015bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015bd2:	bf00      	nop
 8015bd4:	08015c19 	.word	0x08015c19
 8015bd8:	08015c0f 	.word	0x08015c0f
 8015bdc:	08015c0f 	.word	0x08015c0f
 8015be0:	08015c0f 	.word	0x08015c0f
 8015be4:	08015bf1 	.word	0x08015bf1
 8015be8:	08015bfb 	.word	0x08015bfb
 8015bec:	08015c05 	.word	0x08015c05
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 8015bf0:	7dfb      	ldrb	r3, [r7, #23]
 8015bf2:	f023 0301 	bic.w	r3, r3, #1
 8015bf6:	75fb      	strb	r3, [r7, #23]
                break;
 8015bf8:	e00f      	b.n	8015c1a <RegionAS923NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 8015bfa:	7dfb      	ldrb	r3, [r7, #23]
 8015bfc:	f023 0302 	bic.w	r3, r3, #2
 8015c00:	75fb      	strb	r3, [r7, #23]
                break;
 8015c02:	e00a      	b.n	8015c1a <RegionAS923NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 8015c04:	7dfb      	ldrb	r3, [r7, #23]
 8015c06:	f023 0303 	bic.w	r3, r3, #3
 8015c0a:	75fb      	strb	r3, [r7, #23]
                break;
 8015c0c:	e005      	b.n	8015c1a <RegionAS923NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 8015c0e:	7dfb      	ldrb	r3, [r7, #23]
 8015c10:	f023 0303 	bic.w	r3, r3, #3
 8015c14:	75fb      	strb	r3, [r7, #23]
                break;
 8015c16:	e000      	b.n	8015c1a <RegionAS923NewChannelReq+0xae>
                break;
 8015c18:	bf00      	nop
            }
        }
    }

    return status;
 8015c1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015c1e:	4618      	mov	r0, r3
 8015c20:	3718      	adds	r7, #24
 8015c22:	46bd      	mov	sp, r7
 8015c24:	bd80      	pop	{r7, pc}
 8015c26:	bf00      	nop

08015c28 <RegionAS923TxParamSetupReq>:

int8_t RegionAS923TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8015c28:	b480      	push	{r7}
 8015c2a:	b083      	sub	sp, #12
 8015c2c:	af00      	add	r7, sp, #0
 8015c2e:	6078      	str	r0, [r7, #4]
    // Accept the request
    return 0;
 8015c30:	2300      	movs	r3, #0
}
 8015c32:	4618      	mov	r0, r3
 8015c34:	370c      	adds	r7, #12
 8015c36:	46bd      	mov	sp, r7
 8015c38:	bc80      	pop	{r7}
 8015c3a:	4770      	bx	lr

08015c3c <RegionAS923DlChannelReq>:

int8_t RegionAS923DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8015c3c:	b580      	push	{r7, lr}
 8015c3e:	b084      	sub	sp, #16
 8015c40:	af00      	add	r7, sp, #0
 8015c42:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8015c44:	2303      	movs	r3, #3
 8015c46:	73fb      	strb	r3, [r7, #15]

#if defined( REGION_AS923 )
    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency ) == false )
 8015c48:	687b      	ldr	r3, [r7, #4]
 8015c4a:	685b      	ldr	r3, [r3, #4]
 8015c4c:	4618      	mov	r0, r3
 8015c4e:	f7ff f853 	bl	8014cf8 <VerifyRfFreq>
 8015c52:	4603      	mov	r3, r0
 8015c54:	f083 0301 	eor.w	r3, r3, #1
 8015c58:	b2db      	uxtb	r3, r3
 8015c5a:	2b00      	cmp	r3, #0
 8015c5c:	d003      	beq.n	8015c66 <RegionAS923DlChannelReq+0x2a>
    {
        status &= 0xFE;
 8015c5e:	7bfb      	ldrb	r3, [r7, #15]
 8015c60:	f023 0301 	bic.w	r3, r3, #1
 8015c64:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 8015c66:	4b14      	ldr	r3, [pc, #80]	@ (8015cb8 <RegionAS923DlChannelReq+0x7c>)
 8015c68:	681a      	ldr	r2, [r3, #0]
 8015c6a:	687b      	ldr	r3, [r7, #4]
 8015c6c:	781b      	ldrb	r3, [r3, #0]
 8015c6e:	4619      	mov	r1, r3
 8015c70:	460b      	mov	r3, r1
 8015c72:	005b      	lsls	r3, r3, #1
 8015c74:	440b      	add	r3, r1
 8015c76:	009b      	lsls	r3, r3, #2
 8015c78:	4413      	add	r3, r2
 8015c7a:	681b      	ldr	r3, [r3, #0]
 8015c7c:	2b00      	cmp	r3, #0
 8015c7e:	d103      	bne.n	8015c88 <RegionAS923DlChannelReq+0x4c>
    {
        status &= 0xFD;
 8015c80:	7bfb      	ldrb	r3, [r7, #15]
 8015c82:	f023 0302 	bic.w	r3, r3, #2
 8015c86:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 8015c88:	7bfb      	ldrb	r3, [r7, #15]
 8015c8a:	2b03      	cmp	r3, #3
 8015c8c:	d10d      	bne.n	8015caa <RegionAS923DlChannelReq+0x6e>
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 8015c8e:	4b0a      	ldr	r3, [pc, #40]	@ (8015cb8 <RegionAS923DlChannelReq+0x7c>)
 8015c90:	6819      	ldr	r1, [r3, #0]
 8015c92:	687b      	ldr	r3, [r7, #4]
 8015c94:	781b      	ldrb	r3, [r3, #0]
 8015c96:	4618      	mov	r0, r3
 8015c98:	687b      	ldr	r3, [r7, #4]
 8015c9a:	685a      	ldr	r2, [r3, #4]
 8015c9c:	4603      	mov	r3, r0
 8015c9e:	005b      	lsls	r3, r3, #1
 8015ca0:	4403      	add	r3, r0
 8015ca2:	009b      	lsls	r3, r3, #2
 8015ca4:	440b      	add	r3, r1
 8015ca6:	3304      	adds	r3, #4
 8015ca8:	601a      	str	r2, [r3, #0]
    }

#endif /* REGION_AS923 */
    return status;
 8015caa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015cae:	4618      	mov	r0, r3
 8015cb0:	3710      	adds	r7, #16
 8015cb2:	46bd      	mov	sp, r7
 8015cb4:	bd80      	pop	{r7, pc}
 8015cb6:	bf00      	nop
 8015cb8:	20001bcc 	.word	0x20001bcc

08015cbc <RegionAS923AlternateDr>:

int8_t RegionAS923AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8015cbc:	b480      	push	{r7}
 8015cbe:	b083      	sub	sp, #12
 8015cc0:	af00      	add	r7, sp, #0
 8015cc2:	4603      	mov	r3, r0
 8015cc4:	460a      	mov	r2, r1
 8015cc6:	71fb      	strb	r3, [r7, #7]
 8015cc8:	4613      	mov	r3, r2
 8015cca:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_AS923 )
    // Only AS923_DWELL_LIMIT_DATARATE is supported
    return AS923_DWELL_LIMIT_DATARATE;
 8015ccc:	2302      	movs	r3, #2
#else
    return -1;
#endif /* REGION_AS923 */
}
 8015cce:	4618      	mov	r0, r3
 8015cd0:	370c      	adds	r7, #12
 8015cd2:	46bd      	mov	sp, r7
 8015cd4:	bc80      	pop	{r7}
 8015cd6:	4770      	bx	lr

08015cd8 <RegionAS923NextChannel>:

LoRaMacStatus_t RegionAS923NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8015cd8:	b580      	push	{r7, lr}
 8015cda:	b09a      	sub	sp, #104	@ 0x68
 8015cdc:	af02      	add	r7, sp, #8
 8015cde:	60f8      	str	r0, [r7, #12]
 8015ce0:	60b9      	str	r1, [r7, #8]
 8015ce2:	607a      	str	r2, [r7, #4]
 8015ce4:	603b      	str	r3, [r7, #0]
#if defined( REGION_AS923 )
    uint8_t nbEnabledChannels = 0;
 8015ce6:	2300      	movs	r3, #0
 8015ce8:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
    uint8_t nbRestrictedChannels = 0;
 8015cec:	2300      	movs	r3, #0
 8015cee:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
    uint8_t enabledChannels[AS923_MAX_NB_CHANNELS] = { 0 };
 8015cf2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8015cf6:	2200      	movs	r2, #0
 8015cf8:	601a      	str	r2, [r3, #0]
 8015cfa:	605a      	str	r2, [r3, #4]
 8015cfc:	609a      	str	r2, [r3, #8]
 8015cfe:	60da      	str	r2, [r3, #12]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8015d00:	230c      	movs	r3, #12
 8015d02:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    uint16_t joinChannels = AS923_JOIN_CHANNELS;
 8015d06:	2303      	movs	r3, #3
 8015d08:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 8015d0a:	4b48      	ldr	r3, [pc, #288]	@ (8015e2c <RegionAS923NextChannel+0x154>)
 8015d0c:	681b      	ldr	r3, [r3, #0]
 8015d0e:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8015d12:	2201      	movs	r2, #1
 8015d14:	2100      	movs	r1, #0
 8015d16:	4618      	mov	r0, r3
 8015d18:	f000 fb90 	bl	801643c <RegionCommonCountChannels>
 8015d1c:	4603      	mov	r3, r0
 8015d1e:	2b00      	cmp	r3, #0
 8015d20:	d10a      	bne.n	8015d38 <RegionAS923NextChannel+0x60>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 );
 8015d22:	4b42      	ldr	r3, [pc, #264]	@ (8015e2c <RegionAS923NextChannel+0x154>)
 8015d24:	681b      	ldr	r3, [r3, #0]
 8015d26:	f8b3 2360 	ldrh.w	r2, [r3, #864]	@ 0x360
 8015d2a:	4b40      	ldr	r3, [pc, #256]	@ (8015e2c <RegionAS923NextChannel+0x154>)
 8015d2c:	681b      	ldr	r3, [r3, #0]
 8015d2e:	f042 0203 	orr.w	r2, r2, #3
 8015d32:	b292      	uxth	r2, r2
 8015d34:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8015d38:	68fb      	ldr	r3, [r7, #12]
 8015d3a:	7a5b      	ldrb	r3, [r3, #9]
 8015d3c:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8015d3e:	68fb      	ldr	r3, [r7, #12]
 8015d40:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8015d44:	b2db      	uxtb	r3, r3
 8015d46:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8015d48:	4b38      	ldr	r3, [pc, #224]	@ (8015e2c <RegionAS923NextChannel+0x154>)
 8015d4a:	681b      	ldr	r3, [r3, #0]
 8015d4c:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8015d50:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8015d52:	4b36      	ldr	r3, [pc, #216]	@ (8015e2c <RegionAS923NextChannel+0x154>)
 8015d54:	681b      	ldr	r3, [r3, #0]
 8015d56:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 8015d58:	4b35      	ldr	r3, [pc, #212]	@ (8015e30 <RegionAS923NextChannel+0x158>)
 8015d5a:	681b      	ldr	r3, [r3, #0]
 8015d5c:	623b      	str	r3, [r7, #32]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = AS923_MAX_NB_CHANNELS;
 8015d5e:	2310      	movs	r3, #16
 8015d60:	84bb      	strh	r3, [r7, #36]	@ 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 8015d62:	f107 0312 	add.w	r3, r7, #18
 8015d66:	62bb      	str	r3, [r7, #40]	@ 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8015d68:	68fb      	ldr	r3, [r7, #12]
 8015d6a:	681b      	ldr	r3, [r3, #0]
 8015d6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8015d6e:	68fb      	ldr	r3, [r7, #12]
 8015d70:	685b      	ldr	r3, [r3, #4]
 8015d72:	633b      	str	r3, [r7, #48]	@ 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8015d74:	68fb      	ldr	r3, [r7, #12]
 8015d76:	7a9b      	ldrb	r3, [r3, #10]
 8015d78:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    identifyChannelsParam.MaxBands = AS923_MAX_NB_BANDS;
 8015d7c:	2301      	movs	r3, #1
 8015d7e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8015d82:	68fa      	ldr	r2, [r7, #12]
 8015d84:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8015d88:	320c      	adds	r2, #12
 8015d8a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015d8e:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8015d92:	68fb      	ldr	r3, [r7, #12]
 8015d94:	7d1b      	ldrb	r3, [r3, #20]
 8015d96:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8015d9a:	68fb      	ldr	r3, [r7, #12]
 8015d9c:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8015da0:	68fb      	ldr	r3, [r7, #12]
 8015da2:	8adb      	ldrh	r3, [r3, #22]
 8015da4:	4619      	mov	r1, r3
 8015da6:	4610      	mov	r0, r2
 8015da8:	f7fe ffcc 	bl	8014d44 <GetTimeOnAir>
 8015dac:	4603      	mov	r3, r0
 8015dae:	647b      	str	r3, [r7, #68]	@ 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8015db0:	f107 0314 	add.w	r3, r7, #20
 8015db4:	64bb      	str	r3, [r7, #72]	@ 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8015db6:	f107 015e 	add.w	r1, r7, #94	@ 0x5e
 8015dba:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8015dbe:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8015dc2:	687b      	ldr	r3, [r7, #4]
 8015dc4:	9301      	str	r3, [sp, #4]
 8015dc6:	f107 035d 	add.w	r3, r7, #93	@ 0x5d
 8015dca:	9300      	str	r3, [sp, #0]
 8015dcc:	460b      	mov	r3, r1
 8015dce:	6839      	ldr	r1, [r7, #0]
 8015dd0:	f000 ff4b 	bl	8016c6a <RegionCommonIdentifyChannels>
 8015dd4:	4603      	mov	r3, r0
 8015dd6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8015dda:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8015dde:	2b00      	cmp	r3, #0
 8015de0:	d10e      	bne.n	8015e00 <RegionAS923NextChannel+0x128>
        // Even if one or more channels are available according to the channel plan, no free channel
        // was found during the LBT procedure.
        status = LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND;
#else
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8015de2:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8015de6:	3b01      	subs	r3, #1
 8015de8:	4619      	mov	r1, r3
 8015dea:	2000      	movs	r0, #0
 8015dec:	f001 f88a 	bl	8016f04 <randr>
 8015df0:	4603      	mov	r3, r0
 8015df2:	3360      	adds	r3, #96	@ 0x60
 8015df4:	443b      	add	r3, r7
 8015df6:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8015dfa:	68bb      	ldr	r3, [r7, #8]
 8015dfc:	701a      	strb	r2, [r3, #0]
 8015dfe:	e00e      	b.n	8015e1e <RegionAS923NextChannel+0x146>
#endif
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 8015e00:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8015e04:	2b0c      	cmp	r3, #12
 8015e06:	d10a      	bne.n	8015e1e <RegionAS923NextChannel+0x146>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 );
 8015e08:	4b08      	ldr	r3, [pc, #32]	@ (8015e2c <RegionAS923NextChannel+0x154>)
 8015e0a:	681b      	ldr	r3, [r3, #0]
 8015e0c:	f8b3 2360 	ldrh.w	r2, [r3, #864]	@ 0x360
 8015e10:	4b06      	ldr	r3, [pc, #24]	@ (8015e2c <RegionAS923NextChannel+0x154>)
 8015e12:	681b      	ldr	r3, [r3, #0]
 8015e14:	f042 0203 	orr.w	r2, r2, #3
 8015e18:	b292      	uxth	r2, r2
 8015e1a:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    }
    return status;
 8015e1e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_AS923 */
}
 8015e22:	4618      	mov	r0, r3
 8015e24:	3760      	adds	r7, #96	@ 0x60
 8015e26:	46bd      	mov	sp, r7
 8015e28:	bd80      	pop	{r7, pc}
 8015e2a:	bf00      	nop
 8015e2c:	20001bcc 	.word	0x20001bcc
 8015e30:	20001bd0 	.word	0x20001bd0

08015e34 <RegionAS923ChannelAdd>:

LoRaMacStatus_t RegionAS923ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8015e34:	b580      	push	{r7, lr}
 8015e36:	b084      	sub	sp, #16
 8015e38:	af00      	add	r7, sp, #0
 8015e3a:	6078      	str	r0, [r7, #4]
#if defined( REGION_AS923 )
    bool drInvalid = false;
 8015e3c:	2300      	movs	r3, #0
 8015e3e:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 8015e40:	2300      	movs	r3, #0
 8015e42:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 8015e44:	687b      	ldr	r3, [r7, #4]
 8015e46:	791b      	ldrb	r3, [r3, #4]
 8015e48:	737b      	strb	r3, [r7, #13]

    if( id < AS923_NUMB_DEFAULT_CHANNELS )
 8015e4a:	7b7b      	ldrb	r3, [r7, #13]
 8015e4c:	2b01      	cmp	r3, #1
 8015e4e:	d801      	bhi.n	8015e54 <RegionAS923ChannelAdd+0x20>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8015e50:	2306      	movs	r3, #6
 8015e52:	e085      	b.n	8015f60 <RegionAS923ChannelAdd+0x12c>
    }

    if( id >= AS923_MAX_NB_CHANNELS )
 8015e54:	7b7b      	ldrb	r3, [r7, #13]
 8015e56:	2b0f      	cmp	r3, #15
 8015e58:	d901      	bls.n	8015e5e <RegionAS923ChannelAdd+0x2a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8015e5a:	2303      	movs	r3, #3
 8015e5c:	e080      	b.n	8015f60 <RegionAS923ChannelAdd+0x12c>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, AS923_TX_MIN_DATARATE, AS923_TX_MAX_DATARATE ) == false )
 8015e5e:	687b      	ldr	r3, [r7, #4]
 8015e60:	681b      	ldr	r3, [r3, #0]
 8015e62:	7a1b      	ldrb	r3, [r3, #8]
 8015e64:	f343 0303 	sbfx	r3, r3, #0, #4
 8015e68:	b25b      	sxtb	r3, r3
 8015e6a:	2207      	movs	r2, #7
 8015e6c:	2100      	movs	r1, #0
 8015e6e:	4618      	mov	r0, r3
 8015e70:	f000 fa93 	bl	801639a <RegionCommonValueInRange>
 8015e74:	4603      	mov	r3, r0
 8015e76:	2b00      	cmp	r3, #0
 8015e78:	d101      	bne.n	8015e7e <RegionAS923ChannelAdd+0x4a>
    {
        drInvalid = true;
 8015e7a:	2301      	movs	r3, #1
 8015e7c:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, AS923_TX_MIN_DATARATE, AS923_TX_MAX_DATARATE ) == false )
 8015e7e:	687b      	ldr	r3, [r7, #4]
 8015e80:	681b      	ldr	r3, [r3, #0]
 8015e82:	7a1b      	ldrb	r3, [r3, #8]
 8015e84:	f343 1303 	sbfx	r3, r3, #4, #4
 8015e88:	b25b      	sxtb	r3, r3
 8015e8a:	2207      	movs	r2, #7
 8015e8c:	2100      	movs	r1, #0
 8015e8e:	4618      	mov	r0, r3
 8015e90:	f000 fa83 	bl	801639a <RegionCommonValueInRange>
 8015e94:	4603      	mov	r3, r0
 8015e96:	2b00      	cmp	r3, #0
 8015e98:	d101      	bne.n	8015e9e <RegionAS923ChannelAdd+0x6a>
    {
        drInvalid = true;
 8015e9a:	2301      	movs	r3, #1
 8015e9c:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 8015e9e:	687b      	ldr	r3, [r7, #4]
 8015ea0:	681b      	ldr	r3, [r3, #0]
 8015ea2:	7a1b      	ldrb	r3, [r3, #8]
 8015ea4:	f343 0303 	sbfx	r3, r3, #0, #4
 8015ea8:	b25a      	sxtb	r2, r3
 8015eaa:	687b      	ldr	r3, [r7, #4]
 8015eac:	681b      	ldr	r3, [r3, #0]
 8015eae:	7a1b      	ldrb	r3, [r3, #8]
 8015eb0:	f343 1303 	sbfx	r3, r3, #4, #4
 8015eb4:	b25b      	sxtb	r3, r3
 8015eb6:	429a      	cmp	r2, r3
 8015eb8:	dd01      	ble.n	8015ebe <RegionAS923ChannelAdd+0x8a>
    {
        drInvalid = true;
 8015eba:	2301      	movs	r3, #1
 8015ebc:	73fb      	strb	r3, [r7, #15]
    }

    // Check frequency
    if( freqInvalid == false )
 8015ebe:	7bbb      	ldrb	r3, [r7, #14]
 8015ec0:	f083 0301 	eor.w	r3, r3, #1
 8015ec4:	b2db      	uxtb	r3, r3
 8015ec6:	2b00      	cmp	r3, #0
 8015ec8:	d00d      	beq.n	8015ee6 <RegionAS923ChannelAdd+0xb2>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency ) == false )
 8015eca:	687b      	ldr	r3, [r7, #4]
 8015ecc:	681b      	ldr	r3, [r3, #0]
 8015ece:	681b      	ldr	r3, [r3, #0]
 8015ed0:	4618      	mov	r0, r3
 8015ed2:	f7fe ff11 	bl	8014cf8 <VerifyRfFreq>
 8015ed6:	4603      	mov	r3, r0
 8015ed8:	f083 0301 	eor.w	r3, r3, #1
 8015edc:	b2db      	uxtb	r3, r3
 8015ede:	2b00      	cmp	r3, #0
 8015ee0:	d001      	beq.n	8015ee6 <RegionAS923ChannelAdd+0xb2>
        {
            freqInvalid = true;
 8015ee2:	2301      	movs	r3, #1
 8015ee4:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 8015ee6:	7bfb      	ldrb	r3, [r7, #15]
 8015ee8:	2b00      	cmp	r3, #0
 8015eea:	d004      	beq.n	8015ef6 <RegionAS923ChannelAdd+0xc2>
 8015eec:	7bbb      	ldrb	r3, [r7, #14]
 8015eee:	2b00      	cmp	r3, #0
 8015ef0:	d001      	beq.n	8015ef6 <RegionAS923ChannelAdd+0xc2>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8015ef2:	2306      	movs	r3, #6
 8015ef4:	e034      	b.n	8015f60 <RegionAS923ChannelAdd+0x12c>
    }
    if( drInvalid == true )
 8015ef6:	7bfb      	ldrb	r3, [r7, #15]
 8015ef8:	2b00      	cmp	r3, #0
 8015efa:	d001      	beq.n	8015f00 <RegionAS923ChannelAdd+0xcc>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 8015efc:	2305      	movs	r3, #5
 8015efe:	e02f      	b.n	8015f60 <RegionAS923ChannelAdd+0x12c>
    }
    if( freqInvalid == true )
 8015f00:	7bbb      	ldrb	r3, [r7, #14]
 8015f02:	2b00      	cmp	r3, #0
 8015f04:	d001      	beq.n	8015f0a <RegionAS923ChannelAdd+0xd6>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 8015f06:	2304      	movs	r3, #4
 8015f08:	e02a      	b.n	8015f60 <RegionAS923ChannelAdd+0x12c>
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 8015f0a:	4b17      	ldr	r3, [pc, #92]	@ (8015f68 <RegionAS923ChannelAdd+0x134>)
 8015f0c:	6819      	ldr	r1, [r3, #0]
 8015f0e:	7b7a      	ldrb	r2, [r7, #13]
 8015f10:	4613      	mov	r3, r2
 8015f12:	005b      	lsls	r3, r3, #1
 8015f14:	4413      	add	r3, r2
 8015f16:	009b      	lsls	r3, r3, #2
 8015f18:	18c8      	adds	r0, r1, r3
 8015f1a:	687b      	ldr	r3, [r7, #4]
 8015f1c:	681b      	ldr	r3, [r3, #0]
 8015f1e:	220c      	movs	r2, #12
 8015f20:	4619      	mov	r1, r3
 8015f22:	f001 f806 	bl	8016f32 <memcpy1>
    RegionNvmGroup2->Channels[id].Band = 0;
 8015f26:	4b10      	ldr	r3, [pc, #64]	@ (8015f68 <RegionAS923ChannelAdd+0x134>)
 8015f28:	6819      	ldr	r1, [r3, #0]
 8015f2a:	7b7a      	ldrb	r2, [r7, #13]
 8015f2c:	4613      	mov	r3, r2
 8015f2e:	005b      	lsls	r3, r3, #1
 8015f30:	4413      	add	r3, r2
 8015f32:	009b      	lsls	r3, r3, #2
 8015f34:	440b      	add	r3, r1
 8015f36:	3309      	adds	r3, #9
 8015f38:	2200      	movs	r2, #0
 8015f3a:	701a      	strb	r2, [r3, #0]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 8015f3c:	4b0a      	ldr	r3, [pc, #40]	@ (8015f68 <RegionAS923ChannelAdd+0x134>)
 8015f3e:	681b      	ldr	r3, [r3, #0]
 8015f40:	f8b3 3360 	ldrh.w	r3, [r3, #864]	@ 0x360
 8015f44:	b21a      	sxth	r2, r3
 8015f46:	7b7b      	ldrb	r3, [r7, #13]
 8015f48:	2101      	movs	r1, #1
 8015f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8015f4e:	b21b      	sxth	r3, r3
 8015f50:	4313      	orrs	r3, r2
 8015f52:	b21a      	sxth	r2, r3
 8015f54:	4b04      	ldr	r3, [pc, #16]	@ (8015f68 <RegionAS923ChannelAdd+0x134>)
 8015f56:	681b      	ldr	r3, [r3, #0]
 8015f58:	b292      	uxth	r2, r2
 8015f5a:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    return LORAMAC_STATUS_OK;
 8015f5e:	2300      	movs	r3, #0
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_AS923 */
}
 8015f60:	4618      	mov	r0, r3
 8015f62:	3710      	adds	r7, #16
 8015f64:	46bd      	mov	sp, r7
 8015f66:	bd80      	pop	{r7, pc}
 8015f68:	20001bcc 	.word	0x20001bcc

08015f6c <RegionAS923ChannelsRemove>:

bool RegionAS923ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 8015f6c:	b580      	push	{r7, lr}
 8015f6e:	b086      	sub	sp, #24
 8015f70:	af00      	add	r7, sp, #0
 8015f72:	6078      	str	r0, [r7, #4]
#if defined( REGION_AS923 )
    uint8_t id = channelRemove->ChannelId;
 8015f74:	687b      	ldr	r3, [r7, #4]
 8015f76:	781b      	ldrb	r3, [r3, #0]
 8015f78:	75fb      	strb	r3, [r7, #23]

    if( id < AS923_NUMB_DEFAULT_CHANNELS )
 8015f7a:	7dfb      	ldrb	r3, [r7, #23]
 8015f7c:	2b01      	cmp	r3, #1
 8015f7e:	d801      	bhi.n	8015f84 <RegionAS923ChannelsRemove+0x18>
    {
        return false;
 8015f80:	2300      	movs	r3, #0
 8015f82:	e016      	b.n	8015fb2 <RegionAS923ChannelsRemove+0x46>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 8015f84:	4b0d      	ldr	r3, [pc, #52]	@ (8015fbc <RegionAS923ChannelsRemove+0x50>)
 8015f86:	6819      	ldr	r1, [r3, #0]
 8015f88:	7dfa      	ldrb	r2, [r7, #23]
 8015f8a:	4613      	mov	r3, r2
 8015f8c:	005b      	lsls	r3, r3, #1
 8015f8e:	4413      	add	r3, r2
 8015f90:	009b      	lsls	r3, r3, #2
 8015f92:	440b      	add	r3, r1
 8015f94:	461a      	mov	r2, r3
 8015f96:	2300      	movs	r3, #0
 8015f98:	6013      	str	r3, [r2, #0]
 8015f9a:	6053      	str	r3, [r2, #4]
 8015f9c:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, AS923_MAX_NB_CHANNELS );
 8015f9e:	4b07      	ldr	r3, [pc, #28]	@ (8015fbc <RegionAS923ChannelsRemove+0x50>)
 8015fa0:	681b      	ldr	r3, [r3, #0]
 8015fa2:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8015fa6:	7df9      	ldrb	r1, [r7, #23]
 8015fa8:	2210      	movs	r2, #16
 8015faa:	4618      	mov	r0, r3
 8015fac:	f000 fa12 	bl	80163d4 <RegionCommonChanDisable>
 8015fb0:	4603      	mov	r3, r0
#else
    return false;
#endif /* REGION_AS923 */
}
 8015fb2:	4618      	mov	r0, r3
 8015fb4:	3718      	adds	r7, #24
 8015fb6:	46bd      	mov	sp, r7
 8015fb8:	bd80      	pop	{r7, pc}
 8015fba:	bf00      	nop
 8015fbc:	20001bcc 	.word	0x20001bcc

08015fc0 <RegionAS923ApplyDrOffset>:
#endif /* REGION_AS923 */

}
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
uint8_t RegionAS923ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8015fc0:	b480      	push	{r7}
 8015fc2:	b085      	sub	sp, #20
 8015fc4:	af00      	add	r7, sp, #0
 8015fc6:	4603      	mov	r3, r0
 8015fc8:	71fb      	strb	r3, [r7, #7]
 8015fca:	460b      	mov	r3, r1
 8015fcc:	71bb      	strb	r3, [r7, #6]
 8015fce:	4613      	mov	r3, r2
 8015fd0:	717b      	strb	r3, [r7, #5]
#if defined( REGION_AS923 )
    // Initialize minDr
    int8_t minDr;

    if( downlinkDwellTime == 0 )
 8015fd2:	79fb      	ldrb	r3, [r7, #7]
 8015fd4:	2b00      	cmp	r3, #0
 8015fd6:	d10a      	bne.n	8015fee <RegionAS923ApplyDrOffset+0x2e>
    {
        // Update the minDR for a downlink dwell time configuration of 0
        minDr = EffectiveRx1DrOffsetDownlinkDwell0AS923[dr][drOffset];
 8015fd8:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8015fdc:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8015fe0:	490b      	ldr	r1, [pc, #44]	@ (8016010 <RegionAS923ApplyDrOffset+0x50>)
 8015fe2:	00d2      	lsls	r2, r2, #3
 8015fe4:	440a      	add	r2, r1
 8015fe6:	4413      	add	r3, r2
 8015fe8:	781b      	ldrb	r3, [r3, #0]
 8015fea:	73fb      	strb	r3, [r7, #15]
 8015fec:	e009      	b.n	8016002 <RegionAS923ApplyDrOffset+0x42>
    }
    else
    {
        // Update the minDR for a downlink dwell time configuration of 1
        minDr = EffectiveRx1DrOffsetDownlinkDwell1AS923[dr][drOffset];
 8015fee:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8015ff2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8015ff6:	4907      	ldr	r1, [pc, #28]	@ (8016014 <RegionAS923ApplyDrOffset+0x54>)
 8015ff8:	00d2      	lsls	r2, r2, #3
 8015ffa:	440a      	add	r2, r1
 8015ffc:	4413      	add	r3, r2
 8015ffe:	781b      	ldrb	r3, [r3, #0]
 8016000:	73fb      	strb	r3, [r7, #15]
    }

    return minDr;
 8016002:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_AS923 */

}
 8016004:	4618      	mov	r0, r3
 8016006:	3714      	adds	r7, #20
 8016008:	46bd      	mov	sp, r7
 801600a:	bc80      	pop	{r7}
 801600c:	4770      	bx	lr
 801600e:	bf00      	nop
 8016010:	0801f3e4 	.word	0x0801f3e4
 8016014:	0801f424 	.word	0x0801f424

08016018 <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8016018:	b480      	push	{r7}
 801601a:	b087      	sub	sp, #28
 801601c:	af00      	add	r7, sp, #0
 801601e:	60f8      	str	r0, [r7, #12]
 8016020:	4608      	mov	r0, r1
 8016022:	4639      	mov	r1, r7
 8016024:	e881 000c 	stmia.w	r1, {r2, r3}
 8016028:	4603      	mov	r3, r0
 801602a:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 801602c:	68fb      	ldr	r3, [r7, #12]
 801602e:	881b      	ldrh	r3, [r3, #0]
 8016030:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 8016032:	7afb      	ldrb	r3, [r7, #11]
 8016034:	f083 0301 	eor.w	r3, r3, #1
 8016038:	b2db      	uxtb	r3, r3
 801603a:	2b00      	cmp	r3, #0
 801603c:	d01b      	beq.n	8016076 <GetDutyCycle+0x5e>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 801603e:	f242 7310 	movw	r3, #10000	@ 0x2710
 8016042:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 8016044:	683b      	ldr	r3, [r7, #0]
 8016046:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 801604a:	d202      	bcs.n	8016052 <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 801604c:	2364      	movs	r3, #100	@ 0x64
 801604e:	82bb      	strh	r3, [r7, #20]
 8016050:	e00b      	b.n	801606a <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 8016052:	683b      	ldr	r3, [r7, #0]
 8016054:	f649 22af 	movw	r2, #39599	@ 0x9aaf
 8016058:	4293      	cmp	r3, r2
 801605a:	d803      	bhi.n	8016064 <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 801605c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8016060:	82bb      	strh	r3, [r7, #20]
 8016062:	e002      	b.n	801606a <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 8016064:	f242 7310 	movw	r3, #10000	@ 0x2710
 8016068:	82bb      	strh	r3, [r7, #20]
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 801606a:	8aba      	ldrh	r2, [r7, #20]
 801606c:	8afb      	ldrh	r3, [r7, #22]
 801606e:	4293      	cmp	r3, r2
 8016070:	bf38      	it	cc
 8016072:	4613      	movcc	r3, r2
 8016074:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 8016076:	8afb      	ldrh	r3, [r7, #22]
 8016078:	2b00      	cmp	r3, #0
 801607a:	d101      	bne.n	8016080 <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 801607c:	2301      	movs	r3, #1
 801607e:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 8016080:	8afb      	ldrh	r3, [r7, #22]
}
 8016082:	4618      	mov	r0, r3
 8016084:	371c      	adds	r7, #28
 8016086:	46bd      	mov	sp, r7
 8016088:	bc80      	pop	{r7}
 801608a:	4770      	bx	lr

0801608c <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 801608c:	b580      	push	{r7, lr}
 801608e:	b08e      	sub	sp, #56	@ 0x38
 8016090:	af02      	add	r7, sp, #8
 8016092:	60f8      	str	r0, [r7, #12]
 8016094:	4608      	mov	r0, r1
 8016096:	4639      	mov	r1, r7
 8016098:	e881 000c 	stmia.w	r1, {r2, r3}
 801609c:	4603      	mov	r3, r0
 801609e:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 80160a0:	68fb      	ldr	r3, [r7, #12]
 80160a2:	881b      	ldrh	r3, [r3, #0]
 80160a4:	857b      	strh	r3, [r7, #42]	@ 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 80160a6:	4b4b      	ldr	r3, [pc, #300]	@ (80161d4 <SetMaxTimeCredits+0x148>)
 80160a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 80160aa:	463b      	mov	r3, r7
 80160ac:	e893 0003 	ldmia.w	r3, {r0, r1}
 80160b0:	f004 fb7e 	bl	801a7b0 <SysTimeToMs>
 80160b4:	6278      	str	r0, [r7, #36]	@ 0x24
    SysTime_t timeDiff = { 0 };
 80160b6:	f107 0314 	add.w	r3, r7, #20
 80160ba:	2200      	movs	r2, #0
 80160bc:	601a      	str	r2, [r3, #0]
 80160be:	605a      	str	r2, [r3, #4]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 80160c0:	7af9      	ldrb	r1, [r7, #11]
 80160c2:	463b      	mov	r3, r7
 80160c4:	cb0c      	ldmia	r3, {r2, r3}
 80160c6:	68f8      	ldr	r0, [r7, #12]
 80160c8:	f7ff ffa6 	bl	8016018 <GetDutyCycle>
 80160cc:	4603      	mov	r3, r0
 80160ce:	857b      	strh	r3, [r7, #42]	@ 0x2a

    if( joined == false )
 80160d0:	7afb      	ldrb	r3, [r7, #11]
 80160d2:	f083 0301 	eor.w	r3, r3, #1
 80160d6:	b2db      	uxtb	r3, r3
 80160d8:	2b00      	cmp	r3, #0
 80160da:	d062      	beq.n	80161a2 <SetMaxTimeCredits+0x116>
    {
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 80160dc:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80160de:	2b64      	cmp	r3, #100	@ 0x64
 80160e0:	d105      	bne.n	80160ee <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 80160e2:	4b3c      	ldr	r3, [pc, #240]	@ (80161d4 <SetMaxTimeCredits+0x148>)
 80160e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 80160e6:	68fb      	ldr	r3, [r7, #12]
 80160e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80160ea:	609a      	str	r2, [r3, #8]
 80160ec:	e00b      	b.n	8016106 <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 80160ee:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80160f0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80160f4:	d105      	bne.n	8016102 <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 80160f6:	4b38      	ldr	r3, [pc, #224]	@ (80161d8 <SetMaxTimeCredits+0x14c>)
 80160f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 80160fa:	68fb      	ldr	r3, [r7, #12]
 80160fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80160fe:	609a      	str	r2, [r3, #8]
 8016100:	e001      	b.n	8016106 <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 8016102:	4b36      	ldr	r3, [pc, #216]	@ (80161dc <SetMaxTimeCredits+0x150>)
 8016104:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 8016106:	68fb      	ldr	r3, [r7, #12]
 8016108:	689a      	ldr	r2, [r3, #8]
 801610a:	f107 031c 	add.w	r3, r7, #28
 801610e:	4611      	mov	r1, r2
 8016110:	4618      	mov	r0, r3
 8016112:	f004 fb75 	bl	801a800 <SysTimeFromMs>
 8016116:	f107 0014 	add.w	r0, r7, #20
 801611a:	6a3b      	ldr	r3, [r7, #32]
 801611c:	9300      	str	r3, [sp, #0]
 801611e:	69fb      	ldr	r3, [r7, #28]
 8016120:	463a      	mov	r2, r7
 8016122:	ca06      	ldmia	r2, {r1, r2}
 8016124:	f004 fa85 	bl	801a632 <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8016128:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 801612c:	f083 0301 	eor.w	r3, r3, #1
 8016130:	b2db      	uxtb	r3, r3
 8016132:	2b00      	cmp	r3, #0
 8016134:	d006      	beq.n	8016144 <SetMaxTimeCredits+0xb8>
 8016136:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 801613a:	f083 0301 	eor.w	r3, r3, #1
 801613e:	b2db      	uxtb	r3, r3
 8016140:	2b00      	cmp	r3, #0
 8016142:	d108      	bne.n	8016156 <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 8016144:	68fb      	ldr	r3, [r7, #12]
 8016146:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8016148:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801614a:	429a      	cmp	r2, r3
 801614c:	d103      	bne.n	8016156 <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 801614e:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 8016150:	4a23      	ldr	r2, [pc, #140]	@ (80161e0 <SetMaxTimeCredits+0x154>)
 8016152:	4293      	cmp	r3, r2
 8016154:	d92f      	bls.n	80161b6 <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 8016156:	68fb      	ldr	r3, [r7, #12]
 8016158:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801615a:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 801615c:	683b      	ldr	r3, [r7, #0]
 801615e:	4a21      	ldr	r2, [pc, #132]	@ (80161e4 <SetMaxTimeCredits+0x158>)
 8016160:	4293      	cmp	r3, r2
 8016162:	d928      	bls.n	80161b6 <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 8016164:	683b      	ldr	r3, [r7, #0]
 8016166:	f5a3 33f6 	sub.w	r3, r3, #125952	@ 0x1ec00
 801616a:	3b30      	subs	r3, #48	@ 0x30
 801616c:	4a1e      	ldr	r2, [pc, #120]	@ (80161e8 <SetMaxTimeCredits+0x15c>)
 801616e:	fba2 2303 	umull	r2, r3, r2, r3
 8016172:	0c1b      	lsrs	r3, r3, #16
 8016174:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 8016176:	697b      	ldr	r3, [r7, #20]
 8016178:	4a1c      	ldr	r2, [pc, #112]	@ (80161ec <SetMaxTimeCredits+0x160>)
 801617a:	fb02 f303 	mul.w	r3, r2, r3
 801617e:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8016180:	697b      	ldr	r3, [r7, #20]
 8016182:	f503 33f6 	add.w	r3, r3, #125952	@ 0x1ec00
 8016186:	3330      	adds	r3, #48	@ 0x30
 8016188:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 801618a:	2300      	movs	r3, #0
 801618c:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 801618e:	f107 0314 	add.w	r3, r7, #20
 8016192:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016196:	f004 fb0b 	bl	801a7b0 <SysTimeToMs>
 801619a:	4602      	mov	r2, r0
 801619c:	68fb      	ldr	r3, [r7, #12]
 801619e:	609a      	str	r2, [r3, #8]
 80161a0:	e009      	b.n	80161b6 <SetMaxTimeCredits+0x12a>
            }
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 80161a2:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80161a6:	f083 0301 	eor.w	r3, r3, #1
 80161aa:	b2db      	uxtb	r3, r3
 80161ac:	2b00      	cmp	r3, #0
 80161ae:	d002      	beq.n	80161b6 <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 80161b0:	68fb      	ldr	r3, [r7, #12]
 80161b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80161b4:	60da      	str	r2, [r3, #12]
        }
    }

    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 80161b6:	68fb      	ldr	r3, [r7, #12]
 80161b8:	685b      	ldr	r3, [r3, #4]
 80161ba:	2b00      	cmp	r3, #0
 80161bc:	d102      	bne.n	80161c4 <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 80161be:	68fb      	ldr	r3, [r7, #12]
 80161c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80161c2:	60da      	str	r2, [r3, #12]
    }

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 80161c4:	68fb      	ldr	r3, [r7, #12]
 80161c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80161c8:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 80161ca:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
}
 80161cc:	4618      	mov	r0, r3
 80161ce:	3730      	adds	r7, #48	@ 0x30
 80161d0:	46bd      	mov	sp, r7
 80161d2:	bd80      	pop	{r7, pc}
 80161d4:	001b7740 	.word	0x001b7740
 80161d8:	0112a880 	.word	0x0112a880
 80161dc:	02932e00 	.word	0x02932e00
 80161e0:	0001517f 	.word	0x0001517f
 80161e4:	0001ec2f 	.word	0x0001ec2f
 80161e8:	c22e4507 	.word	0xc22e4507
 80161ec:	00015180 	.word	0x00015180

080161f0 <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 80161f0:	b580      	push	{r7, lr}
 80161f2:	b086      	sub	sp, #24
 80161f4:	af02      	add	r7, sp, #8
 80161f6:	6078      	str	r0, [r7, #4]
 80161f8:	4608      	mov	r0, r1
 80161fa:	4611      	mov	r1, r2
 80161fc:	461a      	mov	r2, r3
 80161fe:	4603      	mov	r3, r0
 8016200:	70fb      	strb	r3, [r7, #3]
 8016202:	460b      	mov	r3, r1
 8016204:	70bb      	strb	r3, [r7, #2]
 8016206:	4613      	mov	r3, r2
 8016208:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 801620a:	78f9      	ldrb	r1, [r7, #3]
 801620c:	787b      	ldrb	r3, [r7, #1]
 801620e:	9301      	str	r3, [sp, #4]
 8016210:	78bb      	ldrb	r3, [r7, #2]
 8016212:	9300      	str	r3, [sp, #0]
 8016214:	f107 0318 	add.w	r3, r7, #24
 8016218:	cb0c      	ldmia	r3, {r2, r3}
 801621a:	6878      	ldr	r0, [r7, #4]
 801621c:	f7ff ff36 	bl	801608c <SetMaxTimeCredits>
 8016220:	4603      	mov	r3, r0
 8016222:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 8016224:	78fb      	ldrb	r3, [r7, #3]
 8016226:	2b00      	cmp	r3, #0
 8016228:	d00a      	beq.n	8016240 <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 801622a:	687b      	ldr	r3, [r7, #4]
 801622c:	685b      	ldr	r3, [r3, #4]
 801622e:	4618      	mov	r0, r3
 8016230:	f005 f8f8 	bl	801b424 <UTIL_TIMER_GetElapsedTime>
 8016234:	4602      	mov	r2, r0
 8016236:	687b      	ldr	r3, [r7, #4]
 8016238:	68db      	ldr	r3, [r3, #12]
 801623a:	441a      	add	r2, r3
 801623c:	687b      	ldr	r3, [r7, #4]
 801623e:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 8016240:	687b      	ldr	r3, [r7, #4]
 8016242:	68da      	ldr	r2, [r3, #12]
 8016244:	687b      	ldr	r3, [r7, #4]
 8016246:	691b      	ldr	r3, [r3, #16]
 8016248:	429a      	cmp	r2, r3
 801624a:	d903      	bls.n	8016254 <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 801624c:	687b      	ldr	r3, [r7, #4]
 801624e:	691a      	ldr	r2, [r3, #16]
 8016250:	687b      	ldr	r3, [r7, #4]
 8016252:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 8016254:	687b      	ldr	r3, [r7, #4]
 8016256:	6a3a      	ldr	r2, [r7, #32]
 8016258:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 801625a:	89fb      	ldrh	r3, [r7, #14]
}
 801625c:	4618      	mov	r0, r3
 801625e:	3710      	adds	r7, #16
 8016260:	46bd      	mov	sp, r7
 8016262:	bd80      	pop	{r7, pc}

08016264 <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 8016264:	b480      	push	{r7}
 8016266:	b085      	sub	sp, #20
 8016268:	af00      	add	r7, sp, #0
 801626a:	4603      	mov	r3, r0
 801626c:	460a      	mov	r2, r1
 801626e:	80fb      	strh	r3, [r7, #6]
 8016270:	4613      	mov	r3, r2
 8016272:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 8016274:	2300      	movs	r3, #0
 8016276:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 8016278:	2300      	movs	r3, #0
 801627a:	73bb      	strb	r3, [r7, #14]
 801627c:	e011      	b.n	80162a2 <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 801627e:	88fa      	ldrh	r2, [r7, #6]
 8016280:	7bbb      	ldrb	r3, [r7, #14]
 8016282:	2101      	movs	r1, #1
 8016284:	fa01 f303 	lsl.w	r3, r1, r3
 8016288:	401a      	ands	r2, r3
 801628a:	7bbb      	ldrb	r3, [r7, #14]
 801628c:	2101      	movs	r1, #1
 801628e:	fa01 f303 	lsl.w	r3, r1, r3
 8016292:	429a      	cmp	r2, r3
 8016294:	d102      	bne.n	801629c <CountChannels+0x38>
        {
            nbActiveBits++;
 8016296:	7bfb      	ldrb	r3, [r7, #15]
 8016298:	3301      	adds	r3, #1
 801629a:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 801629c:	7bbb      	ldrb	r3, [r7, #14]
 801629e:	3301      	adds	r3, #1
 80162a0:	73bb      	strb	r3, [r7, #14]
 80162a2:	7bba      	ldrb	r2, [r7, #14]
 80162a4:	797b      	ldrb	r3, [r7, #5]
 80162a6:	429a      	cmp	r2, r3
 80162a8:	d3e9      	bcc.n	801627e <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 80162aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80162ac:	4618      	mov	r0, r3
 80162ae:	3714      	adds	r7, #20
 80162b0:	46bd      	mov	sp, r7
 80162b2:	bc80      	pop	{r7}
 80162b4:	4770      	bx	lr

080162b6 <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 80162b6:	b580      	push	{r7, lr}
 80162b8:	b084      	sub	sp, #16
 80162ba:	af00      	add	r7, sp, #0
 80162bc:	6039      	str	r1, [r7, #0]
 80162be:	4611      	mov	r1, r2
 80162c0:	461a      	mov	r2, r3
 80162c2:	4603      	mov	r3, r0
 80162c4:	71fb      	strb	r3, [r7, #7]
 80162c6:	460b      	mov	r3, r1
 80162c8:	71bb      	strb	r3, [r7, #6]
 80162ca:	4613      	mov	r3, r2
 80162cc:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 80162ce:	f997 2018 	ldrsb.w	r2, [r7, #24]
 80162d2:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80162d6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80162da:	4618      	mov	r0, r3
 80162dc:	f000 f85d 	bl	801639a <RegionCommonValueInRange>
 80162e0:	4603      	mov	r3, r0
 80162e2:	2b00      	cmp	r3, #0
 80162e4:	d101      	bne.n	80162ea <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 80162e6:	2300      	movs	r3, #0
 80162e8:	e053      	b.n	8016392 <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 80162ea:	2300      	movs	r3, #0
 80162ec:	73fb      	strb	r3, [r7, #15]
 80162ee:	2300      	movs	r3, #0
 80162f0:	73bb      	strb	r3, [r7, #14]
 80162f2:	e049      	b.n	8016388 <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 80162f4:	2300      	movs	r3, #0
 80162f6:	737b      	strb	r3, [r7, #13]
 80162f8:	e03d      	b.n	8016376 <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 80162fa:	7bbb      	ldrb	r3, [r7, #14]
 80162fc:	005b      	lsls	r3, r3, #1
 80162fe:	683a      	ldr	r2, [r7, #0]
 8016300:	4413      	add	r3, r2
 8016302:	881b      	ldrh	r3, [r3, #0]
 8016304:	461a      	mov	r2, r3
 8016306:	7b7b      	ldrb	r3, [r7, #13]
 8016308:	fa42 f303 	asr.w	r3, r2, r3
 801630c:	f003 0301 	and.w	r3, r3, #1
 8016310:	2b00      	cmp	r3, #0
 8016312:	d02d      	beq.n	8016370 <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8016314:	7bfa      	ldrb	r2, [r7, #15]
 8016316:	7b7b      	ldrb	r3, [r7, #13]
 8016318:	4413      	add	r3, r2
 801631a:	461a      	mov	r2, r3
 801631c:	4613      	mov	r3, r2
 801631e:	005b      	lsls	r3, r3, #1
 8016320:	4413      	add	r3, r2
 8016322:	009b      	lsls	r3, r3, #2
 8016324:	461a      	mov	r2, r3
 8016326:	69fb      	ldr	r3, [r7, #28]
 8016328:	4413      	add	r3, r2
 801632a:	7a1b      	ldrb	r3, [r3, #8]
 801632c:	f343 0303 	sbfx	r3, r3, #0, #4
 8016330:	b25b      	sxtb	r3, r3
 8016332:	f003 030f 	and.w	r3, r3, #15
 8016336:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 8016338:	7bfa      	ldrb	r2, [r7, #15]
 801633a:	7b7b      	ldrb	r3, [r7, #13]
 801633c:	4413      	add	r3, r2
 801633e:	461a      	mov	r2, r3
 8016340:	4613      	mov	r3, r2
 8016342:	005b      	lsls	r3, r3, #1
 8016344:	4413      	add	r3, r2
 8016346:	009b      	lsls	r3, r3, #2
 8016348:	461a      	mov	r2, r3
 801634a:	69fb      	ldr	r3, [r7, #28]
 801634c:	4413      	add	r3, r2
 801634e:	7a1b      	ldrb	r3, [r3, #8]
 8016350:	f343 1303 	sbfx	r3, r3, #4, #4
 8016354:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8016356:	f003 030f 	and.w	r3, r3, #15
 801635a:	b25a      	sxtb	r2, r3
 801635c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8016360:	4618      	mov	r0, r3
 8016362:	f000 f81a 	bl	801639a <RegionCommonValueInRange>
 8016366:	4603      	mov	r3, r0
 8016368:	2b01      	cmp	r3, #1
 801636a:	d101      	bne.n	8016370 <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 801636c:	2301      	movs	r3, #1
 801636e:	e010      	b.n	8016392 <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 8016370:	7b7b      	ldrb	r3, [r7, #13]
 8016372:	3301      	adds	r3, #1
 8016374:	737b      	strb	r3, [r7, #13]
 8016376:	7b7b      	ldrb	r3, [r7, #13]
 8016378:	2b0f      	cmp	r3, #15
 801637a:	d9be      	bls.n	80162fa <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 801637c:	7bfb      	ldrb	r3, [r7, #15]
 801637e:	3310      	adds	r3, #16
 8016380:	73fb      	strb	r3, [r7, #15]
 8016382:	7bbb      	ldrb	r3, [r7, #14]
 8016384:	3301      	adds	r3, #1
 8016386:	73bb      	strb	r3, [r7, #14]
 8016388:	7bfa      	ldrb	r2, [r7, #15]
 801638a:	79fb      	ldrb	r3, [r7, #7]
 801638c:	429a      	cmp	r2, r3
 801638e:	d3b1      	bcc.n	80162f4 <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 8016390:	2300      	movs	r3, #0
}
 8016392:	4618      	mov	r0, r3
 8016394:	3710      	adds	r7, #16
 8016396:	46bd      	mov	sp, r7
 8016398:	bd80      	pop	{r7, pc}

0801639a <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 801639a:	b480      	push	{r7}
 801639c:	b083      	sub	sp, #12
 801639e:	af00      	add	r7, sp, #0
 80163a0:	4603      	mov	r3, r0
 80163a2:	71fb      	strb	r3, [r7, #7]
 80163a4:	460b      	mov	r3, r1
 80163a6:	71bb      	strb	r3, [r7, #6]
 80163a8:	4613      	mov	r3, r2
 80163aa:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 80163ac:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80163b0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80163b4:	429a      	cmp	r2, r3
 80163b6:	db07      	blt.n	80163c8 <RegionCommonValueInRange+0x2e>
 80163b8:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80163bc:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80163c0:	429a      	cmp	r2, r3
 80163c2:	dc01      	bgt.n	80163c8 <RegionCommonValueInRange+0x2e>
    {
        return 1;
 80163c4:	2301      	movs	r3, #1
 80163c6:	e000      	b.n	80163ca <RegionCommonValueInRange+0x30>
    }
    return 0;
 80163c8:	2300      	movs	r3, #0
}
 80163ca:	4618      	mov	r0, r3
 80163cc:	370c      	adds	r7, #12
 80163ce:	46bd      	mov	sp, r7
 80163d0:	bc80      	pop	{r7}
 80163d2:	4770      	bx	lr

080163d4 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 80163d4:	b480      	push	{r7}
 80163d6:	b085      	sub	sp, #20
 80163d8:	af00      	add	r7, sp, #0
 80163da:	6078      	str	r0, [r7, #4]
 80163dc:	460b      	mov	r3, r1
 80163de:	70fb      	strb	r3, [r7, #3]
 80163e0:	4613      	mov	r3, r2
 80163e2:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 80163e4:	78fb      	ldrb	r3, [r7, #3]
 80163e6:	091b      	lsrs	r3, r3, #4
 80163e8:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 80163ea:	78bb      	ldrb	r3, [r7, #2]
 80163ec:	091b      	lsrs	r3, r3, #4
 80163ee:	b2db      	uxtb	r3, r3
 80163f0:	7bfa      	ldrb	r2, [r7, #15]
 80163f2:	429a      	cmp	r2, r3
 80163f4:	d803      	bhi.n	80163fe <RegionCommonChanDisable+0x2a>
 80163f6:	78fa      	ldrb	r2, [r7, #3]
 80163f8:	78bb      	ldrb	r3, [r7, #2]
 80163fa:	429a      	cmp	r2, r3
 80163fc:	d301      	bcc.n	8016402 <RegionCommonChanDisable+0x2e>
    {
        return false;
 80163fe:	2300      	movs	r3, #0
 8016400:	e017      	b.n	8016432 <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 8016402:	7bfb      	ldrb	r3, [r7, #15]
 8016404:	005b      	lsls	r3, r3, #1
 8016406:	687a      	ldr	r2, [r7, #4]
 8016408:	4413      	add	r3, r2
 801640a:	881b      	ldrh	r3, [r3, #0]
 801640c:	b21a      	sxth	r2, r3
 801640e:	78fb      	ldrb	r3, [r7, #3]
 8016410:	f003 030f 	and.w	r3, r3, #15
 8016414:	2101      	movs	r1, #1
 8016416:	fa01 f303 	lsl.w	r3, r1, r3
 801641a:	b21b      	sxth	r3, r3
 801641c:	43db      	mvns	r3, r3
 801641e:	b21b      	sxth	r3, r3
 8016420:	4013      	ands	r3, r2
 8016422:	b219      	sxth	r1, r3
 8016424:	7bfb      	ldrb	r3, [r7, #15]
 8016426:	005b      	lsls	r3, r3, #1
 8016428:	687a      	ldr	r2, [r7, #4]
 801642a:	4413      	add	r3, r2
 801642c:	b28a      	uxth	r2, r1
 801642e:	801a      	strh	r2, [r3, #0]

    return true;
 8016430:	2301      	movs	r3, #1
}
 8016432:	4618      	mov	r0, r3
 8016434:	3714      	adds	r7, #20
 8016436:	46bd      	mov	sp, r7
 8016438:	bc80      	pop	{r7}
 801643a:	4770      	bx	lr

0801643c <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 801643c:	b580      	push	{r7, lr}
 801643e:	b084      	sub	sp, #16
 8016440:	af00      	add	r7, sp, #0
 8016442:	6078      	str	r0, [r7, #4]
 8016444:	460b      	mov	r3, r1
 8016446:	70fb      	strb	r3, [r7, #3]
 8016448:	4613      	mov	r3, r2
 801644a:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 801644c:	2300      	movs	r3, #0
 801644e:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 8016450:	687b      	ldr	r3, [r7, #4]
 8016452:	2b00      	cmp	r3, #0
 8016454:	d101      	bne.n	801645a <RegionCommonCountChannels+0x1e>
    {
        return 0;
 8016456:	2300      	movs	r3, #0
 8016458:	e018      	b.n	801648c <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 801645a:	78fb      	ldrb	r3, [r7, #3]
 801645c:	73bb      	strb	r3, [r7, #14]
 801645e:	e010      	b.n	8016482 <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 8016460:	7bbb      	ldrb	r3, [r7, #14]
 8016462:	005b      	lsls	r3, r3, #1
 8016464:	687a      	ldr	r2, [r7, #4]
 8016466:	4413      	add	r3, r2
 8016468:	881b      	ldrh	r3, [r3, #0]
 801646a:	2110      	movs	r1, #16
 801646c:	4618      	mov	r0, r3
 801646e:	f7ff fef9 	bl	8016264 <CountChannels>
 8016472:	4603      	mov	r3, r0
 8016474:	461a      	mov	r2, r3
 8016476:	7bfb      	ldrb	r3, [r7, #15]
 8016478:	4413      	add	r3, r2
 801647a:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 801647c:	7bbb      	ldrb	r3, [r7, #14]
 801647e:	3301      	adds	r3, #1
 8016480:	73bb      	strb	r3, [r7, #14]
 8016482:	7bba      	ldrb	r2, [r7, #14]
 8016484:	78bb      	ldrb	r3, [r7, #2]
 8016486:	429a      	cmp	r2, r3
 8016488:	d3ea      	bcc.n	8016460 <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 801648a:	7bfb      	ldrb	r3, [r7, #15]
}
 801648c:	4618      	mov	r0, r3
 801648e:	3710      	adds	r7, #16
 8016490:	46bd      	mov	sp, r7
 8016492:	bd80      	pop	{r7, pc}

08016494 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 8016494:	b480      	push	{r7}
 8016496:	b087      	sub	sp, #28
 8016498:	af00      	add	r7, sp, #0
 801649a:	60f8      	str	r0, [r7, #12]
 801649c:	60b9      	str	r1, [r7, #8]
 801649e:	4613      	mov	r3, r2
 80164a0:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 80164a2:	68fb      	ldr	r3, [r7, #12]
 80164a4:	2b00      	cmp	r3, #0
 80164a6:	d016      	beq.n	80164d6 <RegionCommonChanMaskCopy+0x42>
 80164a8:	68bb      	ldr	r3, [r7, #8]
 80164aa:	2b00      	cmp	r3, #0
 80164ac:	d013      	beq.n	80164d6 <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 80164ae:	2300      	movs	r3, #0
 80164b0:	75fb      	strb	r3, [r7, #23]
 80164b2:	e00c      	b.n	80164ce <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 80164b4:	7dfb      	ldrb	r3, [r7, #23]
 80164b6:	005b      	lsls	r3, r3, #1
 80164b8:	68ba      	ldr	r2, [r7, #8]
 80164ba:	441a      	add	r2, r3
 80164bc:	7dfb      	ldrb	r3, [r7, #23]
 80164be:	005b      	lsls	r3, r3, #1
 80164c0:	68f9      	ldr	r1, [r7, #12]
 80164c2:	440b      	add	r3, r1
 80164c4:	8812      	ldrh	r2, [r2, #0]
 80164c6:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 80164c8:	7dfb      	ldrb	r3, [r7, #23]
 80164ca:	3301      	adds	r3, #1
 80164cc:	75fb      	strb	r3, [r7, #23]
 80164ce:	7dfa      	ldrb	r2, [r7, #23]
 80164d0:	79fb      	ldrb	r3, [r7, #7]
 80164d2:	429a      	cmp	r2, r3
 80164d4:	d3ee      	bcc.n	80164b4 <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 80164d6:	bf00      	nop
 80164d8:	371c      	adds	r7, #28
 80164da:	46bd      	mov	sp, r7
 80164dc:	bc80      	pop	{r7}
 80164de:	4770      	bx	lr

080164e0 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 80164e0:	b082      	sub	sp, #8
 80164e2:	b580      	push	{r7, lr}
 80164e4:	b086      	sub	sp, #24
 80164e6:	af00      	add	r7, sp, #0
 80164e8:	60f8      	str	r0, [r7, #12]
 80164ea:	60b9      	str	r1, [r7, #8]
 80164ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80164ee:	4613      	mov	r3, r2
 80164f0:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 80164f2:	79f9      	ldrb	r1, [r7, #7]
 80164f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80164f8:	cb0c      	ldmia	r3, {r2, r3}
 80164fa:	68f8      	ldr	r0, [r7, #12]
 80164fc:	f7ff fd8c 	bl	8016018 <GetDutyCycle>
 8016500:	4603      	mov	r3, r0
 8016502:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 8016504:	68fb      	ldr	r3, [r7, #12]
 8016506:	68da      	ldr	r2, [r3, #12]
 8016508:	8afb      	ldrh	r3, [r7, #22]
 801650a:	68b9      	ldr	r1, [r7, #8]
 801650c:	fb01 f303 	mul.w	r3, r1, r3
 8016510:	429a      	cmp	r2, r3
 8016512:	d909      	bls.n	8016528 <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 8016514:	68fb      	ldr	r3, [r7, #12]
 8016516:	68da      	ldr	r2, [r3, #12]
 8016518:	8afb      	ldrh	r3, [r7, #22]
 801651a:	68b9      	ldr	r1, [r7, #8]
 801651c:	fb01 f303 	mul.w	r3, r1, r3
 8016520:	1ad2      	subs	r2, r2, r3
 8016522:	68fb      	ldr	r3, [r7, #12]
 8016524:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 8016526:	e002      	b.n	801652e <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 8016528:	68fb      	ldr	r3, [r7, #12]
 801652a:	2200      	movs	r2, #0
 801652c:	60da      	str	r2, [r3, #12]
}
 801652e:	bf00      	nop
 8016530:	3718      	adds	r7, #24
 8016532:	46bd      	mov	sp, r7
 8016534:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8016538:	b002      	add	sp, #8
 801653a:	4770      	bx	lr

0801653c <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 801653c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801653e:	b08f      	sub	sp, #60	@ 0x3c
 8016540:	af04      	add	r7, sp, #16
 8016542:	6039      	str	r1, [r7, #0]
 8016544:	4611      	mov	r1, r2
 8016546:	461a      	mov	r2, r3
 8016548:	4603      	mov	r3, r0
 801654a:	71fb      	strb	r3, [r7, #7]
 801654c:	460b      	mov	r3, r1
 801654e:	71bb      	strb	r3, [r7, #6]
 8016550:	4613      	mov	r3, r2
 8016552:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 8016554:	f04f 33ff 	mov.w	r3, #4294967295
 8016558:	627b      	str	r3, [r7, #36]	@ 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 801655a:	f004 ff51 	bl	801b400 <UTIL_TIMER_GetCurrentTime>
 801655e:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 8016560:	2300      	movs	r3, #0
 8016562:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 8016564:	2301      	movs	r3, #1
 8016566:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 8016568:	2300      	movs	r3, #0
 801656a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 801656e:	2300      	movs	r3, #0
 8016570:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8016574:	e0ba      	b.n	80166ec <RegionCommonUpdateBandTimeOff+0x1b0>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 8016576:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 801657a:	4613      	mov	r3, r2
 801657c:	005b      	lsls	r3, r3, #1
 801657e:	4413      	add	r3, r2
 8016580:	00db      	lsls	r3, r3, #3
 8016582:	461a      	mov	r2, r3
 8016584:	683b      	ldr	r3, [r7, #0]
 8016586:	189c      	adds	r4, r3, r2
 8016588:	f897 6040 	ldrb.w	r6, [r7, #64]	@ 0x40
 801658c:	797a      	ldrb	r2, [r7, #5]
 801658e:	79fd      	ldrb	r5, [r7, #7]
 8016590:	69fb      	ldr	r3, [r7, #28]
 8016592:	9302      	str	r3, [sp, #8]
 8016594:	46ec      	mov	ip, sp
 8016596:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801659a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801659e:	e88c 0003 	stmia.w	ip, {r0, r1}
 80165a2:	4633      	mov	r3, r6
 80165a4:	4629      	mov	r1, r5
 80165a6:	4620      	mov	r0, r4
 80165a8:	f7ff fe22 	bl	80161f0 <UpdateTimeCredits>
 80165ac:	4603      	mov	r3, r0
 80165ae:	82fb      	strh	r3, [r7, #22]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 80165b0:	8afa      	ldrh	r2, [r7, #22]
 80165b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80165b4:	fb02 f303 	mul.w	r3, r2, r3
 80165b8:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
 80165ba:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 80165be:	4613      	mov	r3, r2
 80165c0:	005b      	lsls	r3, r3, #1
 80165c2:	4413      	add	r3, r2
 80165c4:	00db      	lsls	r3, r3, #3
 80165c6:	461a      	mov	r2, r3
 80165c8:	683b      	ldr	r3, [r7, #0]
 80165ca:	4413      	add	r3, r2
 80165cc:	68db      	ldr	r3, [r3, #12]
 80165ce:	69ba      	ldr	r2, [r7, #24]
 80165d0:	429a      	cmp	r2, r3
 80165d2:	d308      	bcc.n	80165e6 <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 80165d4:	797b      	ldrb	r3, [r7, #5]
 80165d6:	f083 0301 	eor.w	r3, r3, #1
 80165da:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits > creditCosts ) ||
 80165dc:	2b00      	cmp	r3, #0
 80165de:	d013      	beq.n	8016608 <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 80165e0:	79fb      	ldrb	r3, [r7, #7]
 80165e2:	2b00      	cmp	r3, #0
 80165e4:	d010      	beq.n	8016608 <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 80165e6:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 80165ea:	4613      	mov	r3, r2
 80165ec:	005b      	lsls	r3, r3, #1
 80165ee:	4413      	add	r3, r2
 80165f0:	00db      	lsls	r3, r3, #3
 80165f2:	461a      	mov	r2, r3
 80165f4:	683b      	ldr	r3, [r7, #0]
 80165f6:	4413      	add	r3, r2
 80165f8:	2201      	movs	r2, #1
 80165fa:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 80165fc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8016600:	3301      	adds	r3, #1
 8016602:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8016606:	e06c      	b.n	80166e2 <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 8016608:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 801660c:	4613      	mov	r3, r2
 801660e:	005b      	lsls	r3, r3, #1
 8016610:	4413      	add	r3, r2
 8016612:	00db      	lsls	r3, r3, #3
 8016614:	461a      	mov	r2, r3
 8016616:	683b      	ldr	r3, [r7, #0]
 8016618:	4413      	add	r3, r2
 801661a:	2200      	movs	r2, #0
 801661c:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits > creditCosts )
 801661e:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8016622:	4613      	mov	r3, r2
 8016624:	005b      	lsls	r3, r3, #1
 8016626:	4413      	add	r3, r2
 8016628:	00db      	lsls	r3, r3, #3
 801662a:	461a      	mov	r2, r3
 801662c:	683b      	ldr	r3, [r7, #0]
 801662e:	4413      	add	r3, r2
 8016630:	691b      	ldr	r3, [r3, #16]
 8016632:	69ba      	ldr	r2, [r7, #24]
 8016634:	429a      	cmp	r2, r3
 8016636:	d215      	bcs.n	8016664 <RegionCommonUpdateBandTimeOff+0x128>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 8016638:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 801663c:	4613      	mov	r3, r2
 801663e:	005b      	lsls	r3, r3, #1
 8016640:	4413      	add	r3, r2
 8016642:	00db      	lsls	r3, r3, #3
 8016644:	461a      	mov	r2, r3
 8016646:	683b      	ldr	r3, [r7, #0]
 8016648:	4413      	add	r3, r2
 801664a:	68db      	ldr	r3, [r3, #12]
 801664c:	69ba      	ldr	r2, [r7, #24]
 801664e:	1ad3      	subs	r3, r2, r3
 8016650:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016652:	4293      	cmp	r3, r2
 8016654:	bf28      	it	cs
 8016656:	4613      	movcs	r3, r2
 8016658:	627b      	str	r3, [r7, #36]	@ 0x24
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 801665a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801665e:	3301      	adds	r3, #1
 8016660:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 8016664:	79fb      	ldrb	r3, [r7, #7]
 8016666:	f083 0301 	eor.w	r3, r3, #1
 801666a:	b2db      	uxtb	r3, r3
 801666c:	2b00      	cmp	r3, #0
 801666e:	d038      	beq.n	80166e2 <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 8016670:	2300      	movs	r3, #0
 8016672:	60fb      	str	r3, [r7, #12]
 8016674:	2300      	movs	r3, #0
 8016676:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 8016678:	8afb      	ldrh	r3, [r7, #22]
 801667a:	2b64      	cmp	r3, #100	@ 0x64
 801667c:	d103      	bne.n	8016686 <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 801667e:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8016682:	60fb      	str	r3, [r7, #12]
 8016684:	e009      	b.n	801669a <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8016686:	8afb      	ldrh	r3, [r7, #22]
 8016688:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801668c:	d103      	bne.n	8016696 <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 801668e:	f649 23b0 	movw	r3, #39600	@ 0x9ab0
 8016692:	60fb      	str	r3, [r7, #12]
 8016694:	e001      	b.n	801669a <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8016696:	4b1e      	ldr	r3, [pc, #120]	@ (8016710 <RegionCommonUpdateBandTimeOff+0x1d4>)
 8016698:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 801669a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801669c:	4a1c      	ldr	r2, [pc, #112]	@ (8016710 <RegionCommonUpdateBandTimeOff+0x1d4>)
 801669e:	4293      	cmp	r3, r2
 80166a0:	d90e      	bls.n	80166c0 <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 80166a2:	68fa      	ldr	r2, [r7, #12]
 80166a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80166a6:	f5a3 33f6 	sub.w	r3, r3, #125952	@ 0x1ec00
 80166aa:	3b30      	subs	r3, #48	@ 0x30
 80166ac:	4919      	ldr	r1, [pc, #100]	@ (8016714 <RegionCommonUpdateBandTimeOff+0x1d8>)
 80166ae:	fba1 1303 	umull	r1, r3, r1, r3
 80166b2:	0c1b      	lsrs	r3, r3, #16
 80166b4:	3301      	adds	r3, #1
 80166b6:	4918      	ldr	r1, [pc, #96]	@ (8016718 <RegionCommonUpdateBandTimeOff+0x1dc>)
 80166b8:	fb01 f303 	mul.w	r3, r1, r3
 80166bc:	4413      	add	r3, r2
 80166be:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 80166c0:	f107 000c 	add.w	r0, r7, #12
 80166c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80166c6:	9300      	str	r3, [sp, #0]
 80166c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80166ca:	f107 020c 	add.w	r2, r7, #12
 80166ce:	ca06      	ldmia	r2, {r1, r2}
 80166d0:	f003 ffaf 	bl	801a632 <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 80166d4:	f107 030c 	add.w	r3, r7, #12
 80166d8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80166dc:	f004 f868 	bl	801a7b0 <SysTimeToMs>
 80166e0:	6278      	str	r0, [r7, #36]	@ 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 80166e2:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80166e6:	3301      	adds	r3, #1
 80166e8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80166ec:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 80166f0:	79bb      	ldrb	r3, [r7, #6]
 80166f2:	429a      	cmp	r2, r3
 80166f4:	f4ff af3f 	bcc.w	8016576 <RegionCommonUpdateBandTimeOff+0x3a>
            }
        }
    }

    if( validBands == 0 )
 80166f8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80166fc:	2b00      	cmp	r3, #0
 80166fe:	d102      	bne.n	8016706 <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 8016700:	f04f 33ff 	mov.w	r3, #4294967295
 8016704:	e000      	b.n	8016708 <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 8016706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8016708:	4618      	mov	r0, r3
 801670a:	372c      	adds	r7, #44	@ 0x2c
 801670c:	46bd      	mov	sp, r7
 801670e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016710:	0001ec30 	.word	0x0001ec30
 8016714:	c22e4507 	.word	0xc22e4507
 8016718:	00015180 	.word	0x00015180

0801671c <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 801671c:	b480      	push	{r7}
 801671e:	b085      	sub	sp, #20
 8016720:	af00      	add	r7, sp, #0
 8016722:	6078      	str	r0, [r7, #4]
 8016724:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 8016726:	2300      	movs	r3, #0
 8016728:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 801672a:	687b      	ldr	r3, [r7, #4]
 801672c:	781b      	ldrb	r3, [r3, #0]
 801672e:	2b03      	cmp	r3, #3
 8016730:	d140      	bne.n	80167b4 <RegionCommonParseLinkAdrReq+0x98>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 8016732:	687b      	ldr	r3, [r7, #4]
 8016734:	3301      	adds	r3, #1
 8016736:	781b      	ldrb	r3, [r3, #0]
 8016738:	b25a      	sxtb	r2, r3
 801673a:	683b      	ldr	r3, [r7, #0]
 801673c:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 801673e:	683b      	ldr	r3, [r7, #0]
 8016740:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016744:	f003 030f 	and.w	r3, r3, #15
 8016748:	b25a      	sxtb	r2, r3
 801674a:	683b      	ldr	r3, [r7, #0]
 801674c:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 801674e:	683b      	ldr	r3, [r7, #0]
 8016750:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016754:	b2db      	uxtb	r3, r3
 8016756:	091b      	lsrs	r3, r3, #4
 8016758:	b2db      	uxtb	r3, r3
 801675a:	b25a      	sxtb	r2, r3
 801675c:	683b      	ldr	r3, [r7, #0]
 801675e:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8016760:	687b      	ldr	r3, [r7, #4]
 8016762:	3302      	adds	r3, #2
 8016764:	781b      	ldrb	r3, [r3, #0]
 8016766:	461a      	mov	r2, r3
 8016768:	683b      	ldr	r3, [r7, #0]
 801676a:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 801676c:	683b      	ldr	r3, [r7, #0]
 801676e:	889b      	ldrh	r3, [r3, #4]
 8016770:	b21a      	sxth	r2, r3
 8016772:	687b      	ldr	r3, [r7, #4]
 8016774:	3303      	adds	r3, #3
 8016776:	781b      	ldrb	r3, [r3, #0]
 8016778:	b21b      	sxth	r3, r3
 801677a:	021b      	lsls	r3, r3, #8
 801677c:	b21b      	sxth	r3, r3
 801677e:	4313      	orrs	r3, r2
 8016780:	b21b      	sxth	r3, r3
 8016782:	b29a      	uxth	r2, r3
 8016784:	683b      	ldr	r3, [r7, #0]
 8016786:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 8016788:	687b      	ldr	r3, [r7, #4]
 801678a:	791a      	ldrb	r2, [r3, #4]
 801678c:	683b      	ldr	r3, [r7, #0]
 801678e:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 8016790:	683b      	ldr	r3, [r7, #0]
 8016792:	781b      	ldrb	r3, [r3, #0]
 8016794:	091b      	lsrs	r3, r3, #4
 8016796:	b2db      	uxtb	r3, r3
 8016798:	f003 0307 	and.w	r3, r3, #7
 801679c:	b2da      	uxtb	r2, r3
 801679e:	683b      	ldr	r3, [r7, #0]
 80167a0:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 80167a2:	683b      	ldr	r3, [r7, #0]
 80167a4:	781b      	ldrb	r3, [r3, #0]
 80167a6:	f003 030f 	and.w	r3, r3, #15
 80167aa:	b2da      	uxtb	r2, r3
 80167ac:	683b      	ldr	r3, [r7, #0]
 80167ae:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 80167b0:	2305      	movs	r3, #5
 80167b2:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 80167b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80167b6:	4618      	mov	r0, r3
 80167b8:	3714      	adds	r7, #20
 80167ba:	46bd      	mov	sp, r7
 80167bc:	bc80      	pop	{r7}
 80167be:	4770      	bx	lr

080167c0 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 80167c0:	b5b0      	push	{r4, r5, r7, lr}
 80167c2:	b088      	sub	sp, #32
 80167c4:	af02      	add	r7, sp, #8
 80167c6:	60f8      	str	r0, [r7, #12]
 80167c8:	60b9      	str	r1, [r7, #8]
 80167ca:	607a      	str	r2, [r7, #4]
 80167cc:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 80167ce:	68fb      	ldr	r3, [r7, #12]
 80167d0:	791b      	ldrb	r3, [r3, #4]
 80167d2:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 80167d4:	68fb      	ldr	r3, [r7, #12]
 80167d6:	799b      	ldrb	r3, [r3, #6]
 80167d8:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 80167da:	68fb      	ldr	r3, [r7, #12]
 80167dc:	79db      	ldrb	r3, [r3, #7]
 80167de:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 80167e0:	68fb      	ldr	r3, [r7, #12]
 80167e2:	7a1b      	ldrb	r3, [r3, #8]
 80167e4:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 80167e6:	68fb      	ldr	r3, [r7, #12]
 80167e8:	795b      	ldrb	r3, [r3, #5]
 80167ea:	f083 0301 	eor.w	r3, r3, #1
 80167ee:	b2db      	uxtb	r3, r3
 80167f0:	2b00      	cmp	r3, #0
 80167f2:	d008      	beq.n	8016806 <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 80167f4:	68fb      	ldr	r3, [r7, #12]
 80167f6:	7adb      	ldrb	r3, [r3, #11]
 80167f8:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 80167fa:	68fb      	ldr	r3, [r7, #12]
 80167fc:	7a5b      	ldrb	r3, [r3, #9]
 80167fe:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 8016800:	68fb      	ldr	r3, [r7, #12]
 8016802:	7a9b      	ldrb	r3, [r3, #10]
 8016804:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 8016806:	7dfb      	ldrb	r3, [r7, #23]
 8016808:	2b00      	cmp	r3, #0
 801680a:	d04a      	beq.n	80168a2 <RegionCommonLinkAdrReqVerifyParams+0xe2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 801680c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8016810:	2b0f      	cmp	r3, #15
 8016812:	d103      	bne.n	801681c <RegionCommonLinkAdrReqVerifyParams+0x5c>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 8016814:	68fb      	ldr	r3, [r7, #12]
 8016816:	7a5b      	ldrb	r3, [r3, #9]
 8016818:	75bb      	strb	r3, [r7, #22]
 801681a:	e01d      	b.n	8016858 <RegionCommonLinkAdrReqVerifyParams+0x98>
        }
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 801681c:	68fb      	ldr	r3, [r7, #12]
 801681e:	7b18      	ldrb	r0, [r3, #12]
 8016820:	68fb      	ldr	r3, [r7, #12]
 8016822:	6919      	ldr	r1, [r3, #16]
 8016824:	68fb      	ldr	r3, [r7, #12]
 8016826:	f993 5014 	ldrsb.w	r5, [r3, #20]
 801682a:	68fb      	ldr	r3, [r7, #12]
 801682c:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8016830:	68fa      	ldr	r2, [r7, #12]
 8016832:	6992      	ldr	r2, [r2, #24]
 8016834:	f997 4016 	ldrsb.w	r4, [r7, #22]
 8016838:	9201      	str	r2, [sp, #4]
 801683a:	9300      	str	r3, [sp, #0]
 801683c:	462b      	mov	r3, r5
 801683e:	4622      	mov	r2, r4
 8016840:	f7ff fd39 	bl	80162b6 <RegionCommonChanVerifyDr>
 8016844:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 8016846:	f083 0301 	eor.w	r3, r3, #1
 801684a:	b2db      	uxtb	r3, r3
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 801684c:	2b00      	cmp	r3, #0
 801684e:	d003      	beq.n	8016858 <RegionCommonLinkAdrReqVerifyParams+0x98>
        {
            status &= 0xFD; // Datarate KO
 8016850:	7dfb      	ldrb	r3, [r7, #23]
 8016852:	f023 0302 	bic.w	r3, r3, #2
 8016856:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( txPower == 0x0F )
 8016858:	f997 3015 	ldrsb.w	r3, [r7, #21]
 801685c:	2b0f      	cmp	r3, #15
 801685e:	d103      	bne.n	8016868 <RegionCommonLinkAdrReqVerifyParams+0xa8>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
 8016860:	68fb      	ldr	r3, [r7, #12]
 8016862:	7a9b      	ldrb	r3, [r3, #10]
 8016864:	757b      	strb	r3, [r7, #21]
 8016866:	e01c      	b.n	80168a2 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 8016868:	68fb      	ldr	r3, [r7, #12]
 801686a:	f993 101d 	ldrsb.w	r1, [r3, #29]
 801686e:	68fb      	ldr	r3, [r7, #12]
 8016870:	f993 201c 	ldrsb.w	r2, [r3, #28]
 8016874:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8016878:	4618      	mov	r0, r3
 801687a:	f7ff fd8e 	bl	801639a <RegionCommonValueInRange>
 801687e:	4603      	mov	r3, r0
 8016880:	2b00      	cmp	r3, #0
 8016882:	d10e      	bne.n	80168a2 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 8016884:	68fb      	ldr	r3, [r7, #12]
 8016886:	f993 301d 	ldrsb.w	r3, [r3, #29]
 801688a:	f997 2015 	ldrsb.w	r2, [r7, #21]
 801688e:	429a      	cmp	r2, r3
 8016890:	da03      	bge.n	801689a <RegionCommonLinkAdrReqVerifyParams+0xda>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 8016892:	68fb      	ldr	r3, [r7, #12]
 8016894:	7f5b      	ldrb	r3, [r3, #29]
 8016896:	757b      	strb	r3, [r7, #21]
 8016898:	e003      	b.n	80168a2 <RegionCommonLinkAdrReqVerifyParams+0xe2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 801689a:	7dfb      	ldrb	r3, [r7, #23]
 801689c:	f023 0304 	bic.w	r3, r3, #4
 80168a0:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 80168a2:	7dfb      	ldrb	r3, [r7, #23]
 80168a4:	2b07      	cmp	r3, #7
 80168a6:	d105      	bne.n	80168b4 <RegionCommonLinkAdrReqVerifyParams+0xf4>
    {
        if( nbRepetitions == 0 )
 80168a8:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80168ac:	2b00      	cmp	r3, #0
 80168ae:	d101      	bne.n	80168b4 <RegionCommonLinkAdrReqVerifyParams+0xf4>
        { // Set nbRep to the default value of 1.
            nbRepetitions = 1;
 80168b0:	2301      	movs	r3, #1
 80168b2:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 80168b4:	68bb      	ldr	r3, [r7, #8]
 80168b6:	7dba      	ldrb	r2, [r7, #22]
 80168b8:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 80168ba:	687b      	ldr	r3, [r7, #4]
 80168bc:	7d7a      	ldrb	r2, [r7, #21]
 80168be:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 80168c0:	7d3a      	ldrb	r2, [r7, #20]
 80168c2:	683b      	ldr	r3, [r7, #0]
 80168c4:	701a      	strb	r2, [r3, #0]

    return status;
 80168c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80168c8:	4618      	mov	r0, r3
 80168ca:	3718      	adds	r7, #24
 80168cc:	46bd      	mov	sp, r7
 80168ce:	bdb0      	pop	{r4, r5, r7, pc}

080168d0 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 80168d0:	b480      	push	{r7}
 80168d2:	b083      	sub	sp, #12
 80168d4:	af00      	add	r7, sp, #0
 80168d6:	4603      	mov	r3, r0
 80168d8:	6039      	str	r1, [r7, #0]
 80168da:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 80168dc:	79fb      	ldrb	r3, [r7, #7]
 80168de:	4a06      	ldr	r2, [pc, #24]	@ (80168f8 <RegionCommonComputeSymbolTimeLoRa+0x28>)
 80168e0:	fa02 f303 	lsl.w	r3, r2, r3
 80168e4:	461a      	mov	r2, r3
 80168e6:	683b      	ldr	r3, [r7, #0]
 80168e8:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80168ec:	4618      	mov	r0, r3
 80168ee:	370c      	adds	r7, #12
 80168f0:	46bd      	mov	sp, r7
 80168f2:	bc80      	pop	{r7}
 80168f4:	4770      	bx	lr
 80168f6:	bf00      	nop
 80168f8:	000f4240 	.word	0x000f4240

080168fc <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 80168fc:	b480      	push	{r7}
 80168fe:	b083      	sub	sp, #12
 8016900:	af00      	add	r7, sp, #0
 8016902:	4603      	mov	r3, r0
 8016904:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 8016906:	79fb      	ldrb	r3, [r7, #7]
 8016908:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 801690c:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8016910:	4618      	mov	r0, r3
 8016912:	370c      	adds	r7, #12
 8016914:	46bd      	mov	sp, r7
 8016916:	bc80      	pop	{r7}
 8016918:	4770      	bx	lr
	...

0801691c <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 801691c:	b480      	push	{r7}
 801691e:	b085      	sub	sp, #20
 8016920:	af00      	add	r7, sp, #0
 8016922:	60f8      	str	r0, [r7, #12]
 8016924:	607a      	str	r2, [r7, #4]
 8016926:	603b      	str	r3, [r7, #0]
 8016928:	460b      	mov	r3, r1
 801692a:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 801692c:	7afa      	ldrb	r2, [r7, #11]
 801692e:	7afb      	ldrb	r3, [r7, #11]
 8016930:	3b04      	subs	r3, #4
 8016932:	4619      	mov	r1, r3
 8016934:	68fb      	ldr	r3, [r7, #12]
 8016936:	fb03 f101 	mul.w	r1, r3, r1
 801693a:	687b      	ldr	r3, [r7, #4]
 801693c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8016940:	fb00 f303 	mul.w	r3, r0, r3
 8016944:	440b      	add	r3, r1
 8016946:	005b      	lsls	r3, r3, #1
 8016948:	2b00      	cmp	r3, #0
 801694a:	d013      	beq.n	8016974 <RegionCommonComputeRxWindowParameters+0x58>
 801694c:	7afb      	ldrb	r3, [r7, #11]
 801694e:	3b04      	subs	r3, #4
 8016950:	4619      	mov	r1, r3
 8016952:	68fb      	ldr	r3, [r7, #12]
 8016954:	fb03 f101 	mul.w	r1, r3, r1
 8016958:	687b      	ldr	r3, [r7, #4]
 801695a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 801695e:	fb00 f303 	mul.w	r3, r0, r3
 8016962:	440b      	add	r3, r1
 8016964:	0059      	lsls	r1, r3, #1
 8016966:	68fb      	ldr	r3, [r7, #12]
 8016968:	440b      	add	r3, r1
 801696a:	1e59      	subs	r1, r3, #1
 801696c:	68fb      	ldr	r3, [r7, #12]
 801696e:	fbb1 f3f3 	udiv	r3, r1, r3
 8016972:	e00f      	b.n	8016994 <RegionCommonComputeRxWindowParameters+0x78>
 8016974:	7afb      	ldrb	r3, [r7, #11]
 8016976:	3b04      	subs	r3, #4
 8016978:	4619      	mov	r1, r3
 801697a:	68fb      	ldr	r3, [r7, #12]
 801697c:	fb03 f101 	mul.w	r1, r3, r1
 8016980:	687b      	ldr	r3, [r7, #4]
 8016982:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8016986:	fb00 f303 	mul.w	r3, r0, r3
 801698a:	440b      	add	r3, r1
 801698c:	0059      	lsls	r1, r3, #1
 801698e:	68fb      	ldr	r3, [r7, #12]
 8016990:	fbb1 f3f3 	udiv	r3, r1, r3
 8016994:	429a      	cmp	r2, r3
 8016996:	bf38      	it	cc
 8016998:	461a      	movcc	r2, r3
 801699a:	69bb      	ldr	r3, [r7, #24]
 801699c:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 801699e:	68fb      	ldr	r3, [r7, #12]
 80169a0:	009b      	lsls	r3, r3, #2
 80169a2:	4619      	mov	r1, r3
 80169a4:	69bb      	ldr	r3, [r7, #24]
 80169a6:	681b      	ldr	r3, [r3, #0]
 80169a8:	68fa      	ldr	r2, [r7, #12]
 80169aa:	fb02 f303 	mul.w	r3, r2, r3
 80169ae:	2b00      	cmp	r3, #0
 80169b0:	d007      	beq.n	80169c2 <RegionCommonComputeRxWindowParameters+0xa6>
 80169b2:	69bb      	ldr	r3, [r7, #24]
 80169b4:	681b      	ldr	r3, [r3, #0]
 80169b6:	68fa      	ldr	r2, [r7, #12]
 80169b8:	fb02 f303 	mul.w	r3, r2, r3
 80169bc:	3301      	adds	r3, #1
 80169be:	085b      	lsrs	r3, r3, #1
 80169c0:	e005      	b.n	80169ce <RegionCommonComputeRxWindowParameters+0xb2>
 80169c2:	69bb      	ldr	r3, [r7, #24]
 80169c4:	681b      	ldr	r3, [r3, #0]
 80169c6:	68fa      	ldr	r2, [r7, #12]
 80169c8:	fb02 f303 	mul.w	r3, r2, r3
 80169cc:	085b      	lsrs	r3, r3, #1
 80169ce:	1acb      	subs	r3, r1, r3
 80169d0:	683a      	ldr	r2, [r7, #0]
 80169d2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80169d6:	fb01 f202 	mul.w	r2, r1, r2
 80169da:	1a9b      	subs	r3, r3, r2
 80169dc:	2b00      	cmp	r3, #0
 80169de:	dd27      	ble.n	8016a30 <RegionCommonComputeRxWindowParameters+0x114>
 80169e0:	68fb      	ldr	r3, [r7, #12]
 80169e2:	009b      	lsls	r3, r3, #2
 80169e4:	4619      	mov	r1, r3
 80169e6:	69bb      	ldr	r3, [r7, #24]
 80169e8:	681b      	ldr	r3, [r3, #0]
 80169ea:	68fa      	ldr	r2, [r7, #12]
 80169ec:	fb02 f303 	mul.w	r3, r2, r3
 80169f0:	2b00      	cmp	r3, #0
 80169f2:	d007      	beq.n	8016a04 <RegionCommonComputeRxWindowParameters+0xe8>
 80169f4:	69bb      	ldr	r3, [r7, #24]
 80169f6:	681b      	ldr	r3, [r3, #0]
 80169f8:	68fa      	ldr	r2, [r7, #12]
 80169fa:	fb02 f303 	mul.w	r3, r2, r3
 80169fe:	3301      	adds	r3, #1
 8016a00:	085b      	lsrs	r3, r3, #1
 8016a02:	e005      	b.n	8016a10 <RegionCommonComputeRxWindowParameters+0xf4>
 8016a04:	69bb      	ldr	r3, [r7, #24]
 8016a06:	681b      	ldr	r3, [r3, #0]
 8016a08:	68fa      	ldr	r2, [r7, #12]
 8016a0a:	fb02 f303 	mul.w	r3, r2, r3
 8016a0e:	085b      	lsrs	r3, r3, #1
 8016a10:	1acb      	subs	r3, r1, r3
 8016a12:	683a      	ldr	r2, [r7, #0]
 8016a14:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8016a18:	fb01 f202 	mul.w	r2, r1, r2
 8016a1c:	1a9b      	subs	r3, r3, r2
 8016a1e:	f203 33e7 	addw	r3, r3, #999	@ 0x3e7
 8016a22:	4a19      	ldr	r2, [pc, #100]	@ (8016a88 <RegionCommonComputeRxWindowParameters+0x16c>)
 8016a24:	fb82 1203 	smull	r1, r2, r2, r3
 8016a28:	1192      	asrs	r2, r2, #6
 8016a2a:	17db      	asrs	r3, r3, #31
 8016a2c:	1ad3      	subs	r3, r2, r3
 8016a2e:	e024      	b.n	8016a7a <RegionCommonComputeRxWindowParameters+0x15e>
 8016a30:	68fb      	ldr	r3, [r7, #12]
 8016a32:	009b      	lsls	r3, r3, #2
 8016a34:	4619      	mov	r1, r3
 8016a36:	69bb      	ldr	r3, [r7, #24]
 8016a38:	681b      	ldr	r3, [r3, #0]
 8016a3a:	68fa      	ldr	r2, [r7, #12]
 8016a3c:	fb02 f303 	mul.w	r3, r2, r3
 8016a40:	2b00      	cmp	r3, #0
 8016a42:	d007      	beq.n	8016a54 <RegionCommonComputeRxWindowParameters+0x138>
 8016a44:	69bb      	ldr	r3, [r7, #24]
 8016a46:	681b      	ldr	r3, [r3, #0]
 8016a48:	68fa      	ldr	r2, [r7, #12]
 8016a4a:	fb02 f303 	mul.w	r3, r2, r3
 8016a4e:	3301      	adds	r3, #1
 8016a50:	085b      	lsrs	r3, r3, #1
 8016a52:	e005      	b.n	8016a60 <RegionCommonComputeRxWindowParameters+0x144>
 8016a54:	69bb      	ldr	r3, [r7, #24]
 8016a56:	681b      	ldr	r3, [r3, #0]
 8016a58:	68fa      	ldr	r2, [r7, #12]
 8016a5a:	fb02 f303 	mul.w	r3, r2, r3
 8016a5e:	085b      	lsrs	r3, r3, #1
 8016a60:	1acb      	subs	r3, r1, r3
 8016a62:	683a      	ldr	r2, [r7, #0]
 8016a64:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8016a68:	fb01 f202 	mul.w	r2, r1, r2
 8016a6c:	1a9b      	subs	r3, r3, r2
 8016a6e:	4a06      	ldr	r2, [pc, #24]	@ (8016a88 <RegionCommonComputeRxWindowParameters+0x16c>)
 8016a70:	fb82 1203 	smull	r1, r2, r2, r3
 8016a74:	1192      	asrs	r2, r2, #6
 8016a76:	17db      	asrs	r3, r3, #31
 8016a78:	1ad3      	subs	r3, r2, r3
 8016a7a:	69fa      	ldr	r2, [r7, #28]
 8016a7c:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 8016a7e:	bf00      	nop
 8016a80:	3714      	adds	r7, #20
 8016a82:	46bd      	mov	sp, r7
 8016a84:	bc80      	pop	{r7}
 8016a86:	4770      	bx	lr
 8016a88:	10624dd3 	.word	0x10624dd3

08016a8c <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 8016a8c:	b580      	push	{r7, lr}
 8016a8e:	b086      	sub	sp, #24
 8016a90:	af00      	add	r7, sp, #0
 8016a92:	4603      	mov	r3, r0
 8016a94:	60b9      	str	r1, [r7, #8]
 8016a96:	607a      	str	r2, [r7, #4]
 8016a98:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8016a9a:	2300      	movs	r3, #0
 8016a9c:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8016a9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016aa2:	005b      	lsls	r3, r3, #1
 8016aa4:	4618      	mov	r0, r3
 8016aa6:	f7ea f90d 	bl	8000cc4 <__aeabi_ui2f>
 8016aaa:	4603      	mov	r3, r0
 8016aac:	4619      	mov	r1, r3
 8016aae:	68b8      	ldr	r0, [r7, #8]
 8016ab0:	f7ea f856 	bl	8000b60 <__aeabi_fsub>
 8016ab4:	4603      	mov	r3, r0
 8016ab6:	6879      	ldr	r1, [r7, #4]
 8016ab8:	4618      	mov	r0, r3
 8016aba:	f7ea f851 	bl	8000b60 <__aeabi_fsub>
 8016abe:	4603      	mov	r3, r0
 8016ac0:	4618      	mov	r0, r3
 8016ac2:	f7e9 fd19 	bl	80004f8 <__aeabi_f2d>
 8016ac6:	4602      	mov	r2, r0
 8016ac8:	460b      	mov	r3, r1
 8016aca:	4610      	mov	r0, r2
 8016acc:	4619      	mov	r1, r3
 8016ace:	f007 fc77 	bl	801e3c0 <floor>
 8016ad2:	4602      	mov	r2, r0
 8016ad4:	460b      	mov	r3, r1
 8016ad6:	4610      	mov	r0, r2
 8016ad8:	4619      	mov	r1, r3
 8016ada:	f7ea f815 	bl	8000b08 <__aeabi_d2iz>
 8016ade:	4603      	mov	r3, r0
 8016ae0:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 8016ae2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016ae6:	4618      	mov	r0, r3
 8016ae8:	3718      	adds	r7, #24
 8016aea:	46bd      	mov	sp, r7
 8016aec:	bd80      	pop	{r7, pc}

08016aee <RegionCommonCountNbOfEnabledChannels>:
    /* ST_WORKAROUND_END */
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 8016aee:	b590      	push	{r4, r7, lr}
 8016af0:	b087      	sub	sp, #28
 8016af2:	af00      	add	r7, sp, #0
 8016af4:	60f8      	str	r0, [r7, #12]
 8016af6:	60b9      	str	r1, [r7, #8]
 8016af8:	607a      	str	r2, [r7, #4]
 8016afa:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 8016afc:	2300      	movs	r3, #0
 8016afe:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 8016b00:	2300      	movs	r3, #0
 8016b02:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8016b04:	2300      	movs	r3, #0
 8016b06:	757b      	strb	r3, [r7, #21]
 8016b08:	2300      	movs	r3, #0
 8016b0a:	753b      	strb	r3, [r7, #20]
 8016b0c:	e09c      	b.n	8016c48 <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8016b0e:	2300      	movs	r3, #0
 8016b10:	74fb      	strb	r3, [r7, #19]
 8016b12:	e08f      	b.n	8016c34 <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 8016b14:	68fb      	ldr	r3, [r7, #12]
 8016b16:	685a      	ldr	r2, [r3, #4]
 8016b18:	7d3b      	ldrb	r3, [r7, #20]
 8016b1a:	005b      	lsls	r3, r3, #1
 8016b1c:	4413      	add	r3, r2
 8016b1e:	881b      	ldrh	r3, [r3, #0]
 8016b20:	461a      	mov	r2, r3
 8016b22:	7cfb      	ldrb	r3, [r7, #19]
 8016b24:	fa42 f303 	asr.w	r3, r2, r3
 8016b28:	f003 0301 	and.w	r3, r3, #1
 8016b2c:	2b00      	cmp	r3, #0
 8016b2e:	d07e      	beq.n	8016c2e <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 8016b30:	68fb      	ldr	r3, [r7, #12]
 8016b32:	689a      	ldr	r2, [r3, #8]
 8016b34:	7d79      	ldrb	r1, [r7, #21]
 8016b36:	7cfb      	ldrb	r3, [r7, #19]
 8016b38:	440b      	add	r3, r1
 8016b3a:	4619      	mov	r1, r3
 8016b3c:	460b      	mov	r3, r1
 8016b3e:	005b      	lsls	r3, r3, #1
 8016b40:	440b      	add	r3, r1
 8016b42:	009b      	lsls	r3, r3, #2
 8016b44:	4413      	add	r3, r2
 8016b46:	681b      	ldr	r3, [r3, #0]
 8016b48:	2b00      	cmp	r3, #0
 8016b4a:	d06b      	beq.n	8016c24 <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8016b4c:	68fb      	ldr	r3, [r7, #12]
 8016b4e:	781b      	ldrb	r3, [r3, #0]
 8016b50:	f083 0301 	eor.w	r3, r3, #1
 8016b54:	b2db      	uxtb	r3, r3
 8016b56:	2b00      	cmp	r3, #0
 8016b58:	d011      	beq.n	8016b7e <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 8016b5a:	68fb      	ldr	r3, [r7, #12]
 8016b5c:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8016b5e:	2b00      	cmp	r3, #0
 8016b60:	d00d      	beq.n	8016b7e <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 8016b62:	68fb      	ldr	r3, [r7, #12]
 8016b64:	695a      	ldr	r2, [r3, #20]
 8016b66:	7d3b      	ldrb	r3, [r7, #20]
 8016b68:	005b      	lsls	r3, r3, #1
 8016b6a:	4413      	add	r3, r2
 8016b6c:	881b      	ldrh	r3, [r3, #0]
 8016b6e:	461a      	mov	r2, r3
 8016b70:	7cfb      	ldrb	r3, [r7, #19]
 8016b72:	fa42 f303 	asr.w	r3, r2, r3
 8016b76:	f003 0301 	and.w	r3, r3, #1
 8016b7a:	2b00      	cmp	r3, #0
 8016b7c:	d054      	beq.n	8016c28 <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8016b7e:	68fb      	ldr	r3, [r7, #12]
 8016b80:	785b      	ldrb	r3, [r3, #1]
 8016b82:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 8016b84:	68fb      	ldr	r3, [r7, #12]
 8016b86:	689a      	ldr	r2, [r3, #8]
 8016b88:	7d79      	ldrb	r1, [r7, #21]
 8016b8a:	7cfb      	ldrb	r3, [r7, #19]
 8016b8c:	440b      	add	r3, r1
 8016b8e:	4619      	mov	r1, r3
 8016b90:	460b      	mov	r3, r1
 8016b92:	005b      	lsls	r3, r3, #1
 8016b94:	440b      	add	r3, r1
 8016b96:	009b      	lsls	r3, r3, #2
 8016b98:	4413      	add	r3, r2
 8016b9a:	7a1b      	ldrb	r3, [r3, #8]
 8016b9c:	f343 0303 	sbfx	r3, r3, #0, #4
 8016ba0:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8016ba2:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 8016ba4:	68fb      	ldr	r3, [r7, #12]
 8016ba6:	689a      	ldr	r2, [r3, #8]
 8016ba8:	7d79      	ldrb	r1, [r7, #21]
 8016baa:	7cfb      	ldrb	r3, [r7, #19]
 8016bac:	440b      	add	r3, r1
 8016bae:	4619      	mov	r1, r3
 8016bb0:	460b      	mov	r3, r1
 8016bb2:	005b      	lsls	r3, r3, #1
 8016bb4:	440b      	add	r3, r1
 8016bb6:	009b      	lsls	r3, r3, #2
 8016bb8:	4413      	add	r3, r2
 8016bba:	7a1b      	ldrb	r3, [r3, #8]
 8016bbc:	f343 1303 	sbfx	r3, r3, #4, #4
 8016bc0:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8016bc2:	461a      	mov	r2, r3
 8016bc4:	4621      	mov	r1, r4
 8016bc6:	f7ff fbe8 	bl	801639a <RegionCommonValueInRange>
 8016bca:	4603      	mov	r3, r0
 8016bcc:	2b00      	cmp	r3, #0
 8016bce:	d02d      	beq.n	8016c2c <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 8016bd0:	68fb      	ldr	r3, [r7, #12]
 8016bd2:	68da      	ldr	r2, [r3, #12]
 8016bd4:	68fb      	ldr	r3, [r7, #12]
 8016bd6:	6899      	ldr	r1, [r3, #8]
 8016bd8:	7d78      	ldrb	r0, [r7, #21]
 8016bda:	7cfb      	ldrb	r3, [r7, #19]
 8016bdc:	4403      	add	r3, r0
 8016bde:	4618      	mov	r0, r3
 8016be0:	4603      	mov	r3, r0
 8016be2:	005b      	lsls	r3, r3, #1
 8016be4:	4403      	add	r3, r0
 8016be6:	009b      	lsls	r3, r3, #2
 8016be8:	440b      	add	r3, r1
 8016bea:	7a5b      	ldrb	r3, [r3, #9]
 8016bec:	4619      	mov	r1, r3
 8016bee:	460b      	mov	r3, r1
 8016bf0:	005b      	lsls	r3, r3, #1
 8016bf2:	440b      	add	r3, r1
 8016bf4:	00db      	lsls	r3, r3, #3
 8016bf6:	4413      	add	r3, r2
 8016bf8:	7d1b      	ldrb	r3, [r3, #20]
 8016bfa:	f083 0301 	eor.w	r3, r3, #1
 8016bfe:	b2db      	uxtb	r3, r3
 8016c00:	2b00      	cmp	r3, #0
 8016c02:	d003      	beq.n	8016c0c <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 8016c04:	7dbb      	ldrb	r3, [r7, #22]
 8016c06:	3301      	adds	r3, #1
 8016c08:	75bb      	strb	r3, [r7, #22]
                    continue;
 8016c0a:	e010      	b.n	8016c2e <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 8016c0c:	7dfb      	ldrb	r3, [r7, #23]
 8016c0e:	1c5a      	adds	r2, r3, #1
 8016c10:	75fa      	strb	r2, [r7, #23]
 8016c12:	461a      	mov	r2, r3
 8016c14:	68bb      	ldr	r3, [r7, #8]
 8016c16:	4413      	add	r3, r2
 8016c18:	7d79      	ldrb	r1, [r7, #21]
 8016c1a:	7cfa      	ldrb	r2, [r7, #19]
 8016c1c:	440a      	add	r2, r1
 8016c1e:	b2d2      	uxtb	r2, r2
 8016c20:	701a      	strb	r2, [r3, #0]
 8016c22:	e004      	b.n	8016c2e <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8016c24:	bf00      	nop
 8016c26:	e002      	b.n	8016c2e <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 8016c28:	bf00      	nop
 8016c2a:	e000      	b.n	8016c2e <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8016c2c:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 8016c2e:	7cfb      	ldrb	r3, [r7, #19]
 8016c30:	3301      	adds	r3, #1
 8016c32:	74fb      	strb	r3, [r7, #19]
 8016c34:	7cfb      	ldrb	r3, [r7, #19]
 8016c36:	2b0f      	cmp	r3, #15
 8016c38:	f67f af6c 	bls.w	8016b14 <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8016c3c:	7d7b      	ldrb	r3, [r7, #21]
 8016c3e:	3310      	adds	r3, #16
 8016c40:	757b      	strb	r3, [r7, #21]
 8016c42:	7d3b      	ldrb	r3, [r7, #20]
 8016c44:	3301      	adds	r3, #1
 8016c46:	753b      	strb	r3, [r7, #20]
 8016c48:	7d7b      	ldrb	r3, [r7, #21]
 8016c4a:	b29a      	uxth	r2, r3
 8016c4c:	68fb      	ldr	r3, [r7, #12]
 8016c4e:	8a1b      	ldrh	r3, [r3, #16]
 8016c50:	429a      	cmp	r2, r3
 8016c52:	f4ff af5c 	bcc.w	8016b0e <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 8016c56:	687b      	ldr	r3, [r7, #4]
 8016c58:	7dfa      	ldrb	r2, [r7, #23]
 8016c5a:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 8016c5c:	683b      	ldr	r3, [r7, #0]
 8016c5e:	7dba      	ldrb	r2, [r7, #22]
 8016c60:	701a      	strb	r2, [r3, #0]
}
 8016c62:	bf00      	nop
 8016c64:	371c      	adds	r7, #28
 8016c66:	46bd      	mov	sp, r7
 8016c68:	bd90      	pop	{r4, r7, pc}

08016c6a <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 8016c6a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016c6c:	b08b      	sub	sp, #44	@ 0x2c
 8016c6e:	af04      	add	r7, sp, #16
 8016c70:	60f8      	str	r0, [r7, #12]
 8016c72:	60b9      	str	r1, [r7, #8]
 8016c74:	607a      	str	r2, [r7, #4]
 8016c76:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 8016c78:	68fb      	ldr	r3, [r7, #12]
 8016c7a:	685b      	ldr	r3, [r3, #4]
 8016c7c:	4618      	mov	r0, r3
 8016c7e:	f004 fbd1 	bl	801b424 <UTIL_TIMER_GetElapsedTime>
 8016c82:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 8016c84:	68fb      	ldr	r3, [r7, #12]
 8016c86:	681a      	ldr	r2, [r3, #0]
 8016c88:	697b      	ldr	r3, [r7, #20]
 8016c8a:	1ad2      	subs	r2, r2, r3
 8016c8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016c8e:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 8016c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016c92:	2201      	movs	r2, #1
 8016c94:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 8016c96:	683b      	ldr	r3, [r7, #0]
 8016c98:	2200      	movs	r2, #0
 8016c9a:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8016c9c:	68fb      	ldr	r3, [r7, #12]
 8016c9e:	685b      	ldr	r3, [r3, #4]
 8016ca0:	2b00      	cmp	r3, #0
 8016ca2:	d004      	beq.n	8016cae <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 8016ca4:	68fb      	ldr	r3, [r7, #12]
 8016ca6:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8016ca8:	697a      	ldr	r2, [r7, #20]
 8016caa:	429a      	cmp	r2, r3
 8016cac:	d32b      	bcc.n	8016d06 <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 8016cae:	68bb      	ldr	r3, [r7, #8]
 8016cb0:	2200      	movs	r2, #0
 8016cb2:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8016cb4:	68fb      	ldr	r3, [r7, #12]
 8016cb6:	69db      	ldr	r3, [r3, #28]
 8016cb8:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 8016cba:	68fb      	ldr	r3, [r7, #12]
 8016cbc:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8016cbe:	68dd      	ldr	r5, [r3, #12]
 8016cc0:	68fb      	ldr	r3, [r7, #12]
 8016cc2:	7a5e      	ldrb	r6, [r3, #9]
 8016cc4:	68fb      	ldr	r3, [r7, #12]
 8016cc6:	f893 c008 	ldrb.w	ip, [r3, #8]
 8016cca:	68fb      	ldr	r3, [r7, #12]
 8016ccc:	7d1b      	ldrb	r3, [r3, #20]
 8016cce:	68fa      	ldr	r2, [r7, #12]
 8016cd0:	6992      	ldr	r2, [r2, #24]
 8016cd2:	9203      	str	r2, [sp, #12]
 8016cd4:	68fa      	ldr	r2, [r7, #12]
 8016cd6:	f10d 0e04 	add.w	lr, sp, #4
 8016cda:	320c      	adds	r2, #12
 8016cdc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016ce0:	e88e 0003 	stmia.w	lr, {r0, r1}
 8016ce4:	9300      	str	r3, [sp, #0]
 8016ce6:	4663      	mov	r3, ip
 8016ce8:	4632      	mov	r2, r6
 8016cea:	4629      	mov	r1, r5
 8016cec:	4620      	mov	r0, r4
 8016cee:	f7ff fc25 	bl	801653c <RegionCommonUpdateBandTimeOff>
 8016cf2:	4602      	mov	r2, r0
 8016cf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016cf6:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 8016cf8:	68fb      	ldr	r3, [r7, #12]
 8016cfa:	69d8      	ldr	r0, [r3, #28]
 8016cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016cfe:	683a      	ldr	r2, [r7, #0]
 8016d00:	6879      	ldr	r1, [r7, #4]
 8016d02:	f7ff fef4 	bl	8016aee <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 8016d06:	683b      	ldr	r3, [r7, #0]
 8016d08:	781b      	ldrb	r3, [r3, #0]
 8016d0a:	2b00      	cmp	r3, #0
 8016d0c:	d004      	beq.n	8016d18 <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 8016d0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016d10:	2200      	movs	r2, #0
 8016d12:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8016d14:	2300      	movs	r3, #0
 8016d16:	e006      	b.n	8016d26 <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 8016d18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016d1a:	781b      	ldrb	r3, [r3, #0]
 8016d1c:	2b00      	cmp	r3, #0
 8016d1e:	d001      	beq.n	8016d24 <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8016d20:	230b      	movs	r3, #11
 8016d22:	e000      	b.n	8016d26 <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8016d24:	230c      	movs	r3, #12
    }
}
 8016d26:	4618      	mov	r0, r3
 8016d28:	371c      	adds	r7, #28
 8016d2a:	46bd      	mov	sp, r7
 8016d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016d2e <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 8016d2e:	b5b0      	push	{r4, r5, r7, lr}
 8016d30:	b086      	sub	sp, #24
 8016d32:	af02      	add	r7, sp, #8
 8016d34:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 8016d36:	687b      	ldr	r3, [r7, #4]
 8016d38:	781b      	ldrb	r3, [r3, #0]
 8016d3a:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 8016d3c:	687b      	ldr	r3, [r7, #4]
 8016d3e:	f993 2000 	ldrsb.w	r2, [r3]
 8016d42:	687b      	ldr	r3, [r7, #4]
 8016d44:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8016d48:	429a      	cmp	r2, r3
 8016d4a:	d103      	bne.n	8016d54 <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 8016d4c:	687b      	ldr	r3, [r7, #4]
 8016d4e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8016d52:	e026      	b.n	8016da2 <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 8016d54:	7bfb      	ldrb	r3, [r7, #15]
 8016d56:	3b01      	subs	r3, #1
 8016d58:	b2db      	uxtb	r3, r3
 8016d5a:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 8016d5c:	687b      	ldr	r3, [r7, #4]
 8016d5e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8016d62:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8016d66:	429a      	cmp	r2, r3
 8016d68:	d019      	beq.n	8016d9e <RegionCommonGetNextLowerTxDr+0x70>
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 8016d6a:	687b      	ldr	r3, [r7, #4]
 8016d6c:	78d8      	ldrb	r0, [r3, #3]
 8016d6e:	687b      	ldr	r3, [r7, #4]
 8016d70:	6859      	ldr	r1, [r3, #4]
 8016d72:	687b      	ldr	r3, [r7, #4]
 8016d74:	f993 5002 	ldrsb.w	r5, [r3, #2]
 8016d78:	687b      	ldr	r3, [r7, #4]
 8016d7a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016d7e:	687a      	ldr	r2, [r7, #4]
 8016d80:	6892      	ldr	r2, [r2, #8]
 8016d82:	f997 400f 	ldrsb.w	r4, [r7, #15]
 8016d86:	9201      	str	r2, [sp, #4]
 8016d88:	9300      	str	r3, [sp, #0]
 8016d8a:	462b      	mov	r3, r5
 8016d8c:	4622      	mov	r2, r4
 8016d8e:	f7ff fa92 	bl	80162b6 <RegionCommonChanVerifyDr>
 8016d92:	4603      	mov	r3, r0
 8016d94:	f083 0301 	eor.w	r3, r3, #1
 8016d98:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 8016d9a:	2b00      	cmp	r3, #0
 8016d9c:	d1da      	bne.n	8016d54 <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 8016d9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 8016da2:	4618      	mov	r0, r3
 8016da4:	3710      	adds	r7, #16
 8016da6:	46bd      	mov	sp, r7
 8016da8:	bdb0      	pop	{r4, r5, r7, pc}

08016daa <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 8016daa:	b480      	push	{r7}
 8016dac:	b083      	sub	sp, #12
 8016dae:	af00      	add	r7, sp, #0
 8016db0:	4603      	mov	r3, r0
 8016db2:	460a      	mov	r2, r1
 8016db4:	71fb      	strb	r3, [r7, #7]
 8016db6:	4613      	mov	r3, r2
 8016db8:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 8016dba:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8016dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016dc2:	4293      	cmp	r3, r2
 8016dc4:	bfb8      	it	lt
 8016dc6:	4613      	movlt	r3, r2
 8016dc8:	b25b      	sxtb	r3, r3
}
 8016dca:	4618      	mov	r0, r3
 8016dcc:	370c      	adds	r7, #12
 8016dce:	46bd      	mov	sp, r7
 8016dd0:	bc80      	pop	{r7}
 8016dd2:	4770      	bx	lr

08016dd4 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 8016dd4:	b480      	push	{r7}
 8016dd6:	b083      	sub	sp, #12
 8016dd8:	af00      	add	r7, sp, #0
 8016dda:	6078      	str	r0, [r7, #4]
 8016ddc:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 8016dde:	687b      	ldr	r3, [r7, #4]
 8016de0:	009b      	lsls	r3, r3, #2
 8016de2:	683a      	ldr	r2, [r7, #0]
 8016de4:	4413      	add	r3, r2
 8016de6:	681b      	ldr	r3, [r3, #0]
 8016de8:	4a07      	ldr	r2, [pc, #28]	@ (8016e08 <RegionCommonGetBandwidth+0x34>)
 8016dea:	4293      	cmp	r3, r2
 8016dec:	d004      	beq.n	8016df8 <RegionCommonGetBandwidth+0x24>
 8016dee:	4a07      	ldr	r2, [pc, #28]	@ (8016e0c <RegionCommonGetBandwidth+0x38>)
 8016df0:	4293      	cmp	r3, r2
 8016df2:	d003      	beq.n	8016dfc <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 8016df4:	2300      	movs	r3, #0
 8016df6:	e002      	b.n	8016dfe <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 8016df8:	2301      	movs	r3, #1
 8016dfa:	e000      	b.n	8016dfe <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 8016dfc:	2302      	movs	r3, #2
    }
}
 8016dfe:	4618      	mov	r0, r3
 8016e00:	370c      	adds	r7, #12
 8016e02:	46bd      	mov	sp, r7
 8016e04:	bc80      	pop	{r7}
 8016e06:	4770      	bx	lr
 8016e08:	0003d090 	.word	0x0003d090
 8016e0c:	0007a120 	.word	0x0007a120

08016e10 <RegionCommonRxConfigPrint>:

/* ST_WORKAROUND_BEGIN: Print Tx/Rx config */
void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 8016e10:	b580      	push	{r7, lr}
 8016e12:	b086      	sub	sp, #24
 8016e14:	af04      	add	r7, sp, #16
 8016e16:	4603      	mov	r3, r0
 8016e18:	6039      	str	r1, [r7, #0]
 8016e1a:	71fb      	strb	r3, [r7, #7]
 8016e1c:	4613      	mov	r3, r2
 8016e1e:	71bb      	strb	r3, [r7, #6]
    if ( rxSlot < RX_SLOT_NONE )
 8016e20:	79fb      	ldrb	r3, [r7, #7]
 8016e22:	2b05      	cmp	r3, #5
 8016e24:	d810      	bhi.n	8016e48 <RegionCommonRxConfigPrint+0x38>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 8016e26:	79fb      	ldrb	r3, [r7, #7]
 8016e28:	4a0f      	ldr	r2, [pc, #60]	@ (8016e68 <RegionCommonRxConfigPrint+0x58>)
 8016e2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016e2e:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8016e32:	9202      	str	r2, [sp, #8]
 8016e34:	683a      	ldr	r2, [r7, #0]
 8016e36:	9201      	str	r2, [sp, #4]
 8016e38:	9300      	str	r3, [sp, #0]
 8016e3a:	4b0c      	ldr	r3, [pc, #48]	@ (8016e6c <RegionCommonRxConfigPrint+0x5c>)
 8016e3c:	2201      	movs	r2, #1
 8016e3e:	2100      	movs	r1, #0
 8016e40:	2002      	movs	r0, #2
 8016e42:	f004 fbcd 	bl	801b5e0 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 8016e46:	e00a      	b.n	8016e5e <RegionCommonRxConfigPrint+0x4e>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 8016e48:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8016e4c:	9301      	str	r3, [sp, #4]
 8016e4e:	683b      	ldr	r3, [r7, #0]
 8016e50:	9300      	str	r3, [sp, #0]
 8016e52:	4b07      	ldr	r3, [pc, #28]	@ (8016e70 <RegionCommonRxConfigPrint+0x60>)
 8016e54:	2201      	movs	r2, #1
 8016e56:	2100      	movs	r1, #0
 8016e58:	2002      	movs	r0, #2
 8016e5a:	f004 fbc1 	bl	801b5e0 <UTIL_ADV_TRACE_COND_FSend>
}
 8016e5e:	bf00      	nop
 8016e60:	3708      	adds	r7, #8
 8016e62:	46bd      	mov	sp, r7
 8016e64:	bd80      	pop	{r7, pc}
 8016e66:	bf00      	nop
 8016e68:	20000110 	.word	0x20000110
 8016e6c:	0801ee38 	.word	0x0801ee38
 8016e70:	0801ee58 	.word	0x0801ee58

08016e74 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 8016e74:	b580      	push	{r7, lr}
 8016e76:	b084      	sub	sp, #16
 8016e78:	af02      	add	r7, sp, #8
 8016e7a:	6078      	str	r0, [r7, #4]
 8016e7c:	460b      	mov	r3, r1
 8016e7e:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 8016e80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016e84:	9301      	str	r3, [sp, #4]
 8016e86:	687b      	ldr	r3, [r7, #4]
 8016e88:	9300      	str	r3, [sp, #0]
 8016e8a:	4b05      	ldr	r3, [pc, #20]	@ (8016ea0 <RegionCommonTxConfigPrint+0x2c>)
 8016e8c:	2201      	movs	r2, #1
 8016e8e:	2100      	movs	r1, #0
 8016e90:	2002      	movs	r0, #2
 8016e92:	f004 fba5 	bl	801b5e0 <UTIL_ADV_TRACE_COND_FSend>
}
 8016e96:	bf00      	nop
 8016e98:	3708      	adds	r7, #8
 8016e9a:	46bd      	mov	sp, r7
 8016e9c:	bd80      	pop	{r7, pc}
 8016e9e:	bf00      	nop
 8016ea0:	0801ee74 	.word	0x0801ee74

08016ea4 <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 8016ea4:	b480      	push	{r7}
 8016ea6:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8016ea8:	4b0d      	ldr	r3, [pc, #52]	@ (8016ee0 <rand1+0x3c>)
 8016eaa:	681b      	ldr	r3, [r3, #0]
 8016eac:	4a0d      	ldr	r2, [pc, #52]	@ (8016ee4 <rand1+0x40>)
 8016eae:	fb02 f303 	mul.w	r3, r2, r3
 8016eb2:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8016eb6:	3339      	adds	r3, #57	@ 0x39
 8016eb8:	4a09      	ldr	r2, [pc, #36]	@ (8016ee0 <rand1+0x3c>)
 8016eba:	6013      	str	r3, [r2, #0]
 8016ebc:	4b08      	ldr	r3, [pc, #32]	@ (8016ee0 <rand1+0x3c>)
 8016ebe:	681a      	ldr	r2, [r3, #0]
 8016ec0:	2303      	movs	r3, #3
 8016ec2:	fba3 1302 	umull	r1, r3, r3, r2
 8016ec6:	1ad1      	subs	r1, r2, r3
 8016ec8:	0849      	lsrs	r1, r1, #1
 8016eca:	440b      	add	r3, r1
 8016ecc:	0f99      	lsrs	r1, r3, #30
 8016ece:	460b      	mov	r3, r1
 8016ed0:	07db      	lsls	r3, r3, #31
 8016ed2:	1a5b      	subs	r3, r3, r1
 8016ed4:	1ad1      	subs	r1, r2, r3
 8016ed6:	460b      	mov	r3, r1
}
 8016ed8:	4618      	mov	r0, r3
 8016eda:	46bd      	mov	sp, r7
 8016edc:	bc80      	pop	{r7}
 8016ede:	4770      	bx	lr
 8016ee0:	20000128 	.word	0x20000128
 8016ee4:	41c64e6d 	.word	0x41c64e6d

08016ee8 <srand1>:

void srand1( uint32_t seed )
{
 8016ee8:	b480      	push	{r7}
 8016eea:	b083      	sub	sp, #12
 8016eec:	af00      	add	r7, sp, #0
 8016eee:	6078      	str	r0, [r7, #4]
    next = seed;
 8016ef0:	4a03      	ldr	r2, [pc, #12]	@ (8016f00 <srand1+0x18>)
 8016ef2:	687b      	ldr	r3, [r7, #4]
 8016ef4:	6013      	str	r3, [r2, #0]
}
 8016ef6:	bf00      	nop
 8016ef8:	370c      	adds	r7, #12
 8016efa:	46bd      	mov	sp, r7
 8016efc:	bc80      	pop	{r7}
 8016efe:	4770      	bx	lr
 8016f00:	20000128 	.word	0x20000128

08016f04 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 8016f04:	b580      	push	{r7, lr}
 8016f06:	b082      	sub	sp, #8
 8016f08:	af00      	add	r7, sp, #0
 8016f0a:	6078      	str	r0, [r7, #4]
 8016f0c:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 8016f0e:	f7ff ffc9 	bl	8016ea4 <rand1>
 8016f12:	4602      	mov	r2, r0
 8016f14:	6839      	ldr	r1, [r7, #0]
 8016f16:	687b      	ldr	r3, [r7, #4]
 8016f18:	1acb      	subs	r3, r1, r3
 8016f1a:	3301      	adds	r3, #1
 8016f1c:	fb92 f1f3 	sdiv	r1, r2, r3
 8016f20:	fb01 f303 	mul.w	r3, r1, r3
 8016f24:	1ad2      	subs	r2, r2, r3
 8016f26:	687b      	ldr	r3, [r7, #4]
 8016f28:	4413      	add	r3, r2
}
 8016f2a:	4618      	mov	r0, r3
 8016f2c:	3708      	adds	r7, #8
 8016f2e:	46bd      	mov	sp, r7
 8016f30:	bd80      	pop	{r7, pc}

08016f32 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8016f32:	b480      	push	{r7}
 8016f34:	b085      	sub	sp, #20
 8016f36:	af00      	add	r7, sp, #0
 8016f38:	60f8      	str	r0, [r7, #12]
 8016f3a:	60b9      	str	r1, [r7, #8]
 8016f3c:	4613      	mov	r3, r2
 8016f3e:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 8016f40:	e007      	b.n	8016f52 <memcpy1+0x20>
    {
        *dst++ = *src++;
 8016f42:	68ba      	ldr	r2, [r7, #8]
 8016f44:	1c53      	adds	r3, r2, #1
 8016f46:	60bb      	str	r3, [r7, #8]
 8016f48:	68fb      	ldr	r3, [r7, #12]
 8016f4a:	1c59      	adds	r1, r3, #1
 8016f4c:	60f9      	str	r1, [r7, #12]
 8016f4e:	7812      	ldrb	r2, [r2, #0]
 8016f50:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8016f52:	88fb      	ldrh	r3, [r7, #6]
 8016f54:	1e5a      	subs	r2, r3, #1
 8016f56:	80fa      	strh	r2, [r7, #6]
 8016f58:	2b00      	cmp	r3, #0
 8016f5a:	d1f2      	bne.n	8016f42 <memcpy1+0x10>
    }
}
 8016f5c:	bf00      	nop
 8016f5e:	bf00      	nop
 8016f60:	3714      	adds	r7, #20
 8016f62:	46bd      	mov	sp, r7
 8016f64:	bc80      	pop	{r7}
 8016f66:	4770      	bx	lr

08016f68 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8016f68:	b480      	push	{r7}
 8016f6a:	b085      	sub	sp, #20
 8016f6c:	af00      	add	r7, sp, #0
 8016f6e:	60f8      	str	r0, [r7, #12]
 8016f70:	60b9      	str	r1, [r7, #8]
 8016f72:	4613      	mov	r3, r2
 8016f74:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 8016f76:	88fb      	ldrh	r3, [r7, #6]
 8016f78:	3b01      	subs	r3, #1
 8016f7a:	68fa      	ldr	r2, [r7, #12]
 8016f7c:	4413      	add	r3, r2
 8016f7e:	60fb      	str	r3, [r7, #12]
    while( size-- )
 8016f80:	e007      	b.n	8016f92 <memcpyr+0x2a>
    {
        *dst-- = *src++;
 8016f82:	68ba      	ldr	r2, [r7, #8]
 8016f84:	1c53      	adds	r3, r2, #1
 8016f86:	60bb      	str	r3, [r7, #8]
 8016f88:	68fb      	ldr	r3, [r7, #12]
 8016f8a:	1e59      	subs	r1, r3, #1
 8016f8c:	60f9      	str	r1, [r7, #12]
 8016f8e:	7812      	ldrb	r2, [r2, #0]
 8016f90:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8016f92:	88fb      	ldrh	r3, [r7, #6]
 8016f94:	1e5a      	subs	r2, r3, #1
 8016f96:	80fa      	strh	r2, [r7, #6]
 8016f98:	2b00      	cmp	r3, #0
 8016f9a:	d1f2      	bne.n	8016f82 <memcpyr+0x1a>
    }
}
 8016f9c:	bf00      	nop
 8016f9e:	bf00      	nop
 8016fa0:	3714      	adds	r7, #20
 8016fa2:	46bd      	mov	sp, r7
 8016fa4:	bc80      	pop	{r7}
 8016fa6:	4770      	bx	lr

08016fa8 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 8016fa8:	b480      	push	{r7}
 8016faa:	b083      	sub	sp, #12
 8016fac:	af00      	add	r7, sp, #0
 8016fae:	6078      	str	r0, [r7, #4]
 8016fb0:	460b      	mov	r3, r1
 8016fb2:	70fb      	strb	r3, [r7, #3]
 8016fb4:	4613      	mov	r3, r2
 8016fb6:	803b      	strh	r3, [r7, #0]
    while( size-- )
 8016fb8:	e004      	b.n	8016fc4 <memset1+0x1c>
    {
        *dst++ = value;
 8016fba:	687b      	ldr	r3, [r7, #4]
 8016fbc:	1c5a      	adds	r2, r3, #1
 8016fbe:	607a      	str	r2, [r7, #4]
 8016fc0:	78fa      	ldrb	r2, [r7, #3]
 8016fc2:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8016fc4:	883b      	ldrh	r3, [r7, #0]
 8016fc6:	1e5a      	subs	r2, r3, #1
 8016fc8:	803a      	strh	r2, [r7, #0]
 8016fca:	2b00      	cmp	r3, #0
 8016fcc:	d1f5      	bne.n	8016fba <memset1+0x12>
    }
}
 8016fce:	bf00      	nop
 8016fd0:	bf00      	nop
 8016fd2:	370c      	adds	r7, #12
 8016fd4:	46bd      	mov	sp, r7
 8016fd6:	bc80      	pop	{r7}
 8016fd8:	4770      	bx	lr
	...

08016fdc <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 8016fdc:	b480      	push	{r7}
 8016fde:	b085      	sub	sp, #20
 8016fe0:	af00      	add	r7, sp, #0
 8016fe2:	6078      	str	r0, [r7, #4]
 8016fe4:	460b      	mov	r3, r1
 8016fe6:	807b      	strh	r3, [r7, #2]
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 8016fe8:	f04f 33ff 	mov.w	r3, #4294967295
 8016fec:	60fb      	str	r3, [r7, #12]

    if( buffer == NULL )
 8016fee:	687b      	ldr	r3, [r7, #4]
 8016ff0:	2b00      	cmp	r3, #0
 8016ff2:	d101      	bne.n	8016ff8 <Crc32+0x1c>
    {
        return 0;
 8016ff4:	2300      	movs	r3, #0
 8016ff6:	e026      	b.n	8017046 <Crc32+0x6a>
    }

    for( uint16_t i = 0; i < length; ++i )
 8016ff8:	2300      	movs	r3, #0
 8016ffa:	817b      	strh	r3, [r7, #10]
 8016ffc:	e01d      	b.n	801703a <Crc32+0x5e>
    {
        crc ^= ( uint32_t )buffer[i];
 8016ffe:	897b      	ldrh	r3, [r7, #10]
 8017000:	687a      	ldr	r2, [r7, #4]
 8017002:	4413      	add	r3, r2
 8017004:	781b      	ldrb	r3, [r3, #0]
 8017006:	461a      	mov	r2, r3
 8017008:	68fb      	ldr	r3, [r7, #12]
 801700a:	4053      	eors	r3, r2
 801700c:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 801700e:	2300      	movs	r3, #0
 8017010:	813b      	strh	r3, [r7, #8]
 8017012:	e00c      	b.n	801702e <Crc32+0x52>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 8017014:	68fb      	ldr	r3, [r7, #12]
 8017016:	085a      	lsrs	r2, r3, #1
 8017018:	68fb      	ldr	r3, [r7, #12]
 801701a:	f003 0301 	and.w	r3, r3, #1
 801701e:	425b      	negs	r3, r3
 8017020:	490b      	ldr	r1, [pc, #44]	@ (8017050 <Crc32+0x74>)
 8017022:	400b      	ands	r3, r1
 8017024:	4053      	eors	r3, r2
 8017026:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 8017028:	893b      	ldrh	r3, [r7, #8]
 801702a:	3301      	adds	r3, #1
 801702c:	813b      	strh	r3, [r7, #8]
 801702e:	893b      	ldrh	r3, [r7, #8]
 8017030:	2b07      	cmp	r3, #7
 8017032:	d9ef      	bls.n	8017014 <Crc32+0x38>
    for( uint16_t i = 0; i < length; ++i )
 8017034:	897b      	ldrh	r3, [r7, #10]
 8017036:	3301      	adds	r3, #1
 8017038:	817b      	strh	r3, [r7, #10]
 801703a:	897a      	ldrh	r2, [r7, #10]
 801703c:	887b      	ldrh	r3, [r7, #2]
 801703e:	429a      	cmp	r2, r3
 8017040:	d3dd      	bcc.n	8016ffe <Crc32+0x22>
        }
    }

    return ~crc;
 8017042:	68fb      	ldr	r3, [r7, #12]
 8017044:	43db      	mvns	r3, r3
}
 8017046:	4618      	mov	r0, r3
 8017048:	3714      	adds	r7, #20
 801704a:	46bd      	mov	sp, r7
 801704c:	bc80      	pop	{r7}
 801704e:	4770      	bx	lr
 8017050:	edb88320 	.word	0xedb88320

08017054 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8017054:	b580      	push	{r7, lr}
 8017056:	b084      	sub	sp, #16
 8017058:	af02      	add	r7, sp, #8
 801705a:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 801705c:	4a24      	ldr	r2, [pc, #144]	@ (80170f0 <RadioInit+0x9c>)
 801705e:	687b      	ldr	r3, [r7, #4]
 8017060:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 8017062:	4b24      	ldr	r3, [pc, #144]	@ (80170f4 <RadioInit+0xa0>)
 8017064:	2200      	movs	r2, #0
 8017066:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8017068:	4b22      	ldr	r3, [pc, #136]	@ (80170f4 <RadioInit+0xa0>)
 801706a:	2200      	movs	r2, #0
 801706c:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 801706e:	4b21      	ldr	r3, [pc, #132]	@ (80170f4 <RadioInit+0xa0>)
 8017070:	2200      	movs	r2, #0
 8017072:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8017074:	4b1f      	ldr	r3, [pc, #124]	@ (80170f4 <RadioInit+0xa0>)
 8017076:	2200      	movs	r2, #0
 8017078:	659a      	str	r2, [r3, #88]	@ 0x58

    SUBGRF_Init( RadioOnDioIrq );
 801707a:	481f      	ldr	r0, [pc, #124]	@ (80170f8 <RadioInit+0xa4>)
 801707c:	f001 ff8e 	bl	8018f9c <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 8017080:	4b1c      	ldr	r3, [pc, #112]	@ (80170f4 <RadioInit+0xa0>)
 8017082:	2200      	movs	r2, #0
 8017084:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 8017086:	4b1b      	ldr	r3, [pc, #108]	@ (80170f4 <RadioInit+0xa0>)
 8017088:	2200      	movs	r2, #0
 801708a:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 801708c:	f002 fa1e 	bl	80194cc <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8017090:	2100      	movs	r1, #0
 8017092:	2000      	movs	r0, #0
 8017094:	f002 fde6 	bl	8019c64 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8017098:	2204      	movs	r2, #4
 801709a:	2100      	movs	r1, #0
 801709c:	2001      	movs	r0, #1
 801709e:	f002 fba9 	bl	80197f4 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80170a2:	2300      	movs	r3, #0
 80170a4:	2200      	movs	r2, #0
 80170a6:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80170aa:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80170ae:	f002 fad9 	bl	8019664 <SUBGRF_SetDioIrqParams>

    /* ST_WORKAROUND_BEGIN: Sleep radio */
    RadioSleep();
 80170b2:	f000 fe83 	bl	8017dbc <RadioSleep>
    /* ST_WORKAROUND_END */
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 80170b6:	2300      	movs	r3, #0
 80170b8:	9300      	str	r3, [sp, #0]
 80170ba:	4b10      	ldr	r3, [pc, #64]	@ (80170fc <RadioInit+0xa8>)
 80170bc:	2200      	movs	r2, #0
 80170be:	f04f 31ff 	mov.w	r1, #4294967295
 80170c2:	480f      	ldr	r0, [pc, #60]	@ (8017100 <RadioInit+0xac>)
 80170c4:	f003 ffde 	bl	801b084 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 80170c8:	2300      	movs	r3, #0
 80170ca:	9300      	str	r3, [sp, #0]
 80170cc:	4b0d      	ldr	r3, [pc, #52]	@ (8017104 <RadioInit+0xb0>)
 80170ce:	2200      	movs	r2, #0
 80170d0:	f04f 31ff 	mov.w	r1, #4294967295
 80170d4:	480c      	ldr	r0, [pc, #48]	@ (8017108 <RadioInit+0xb4>)
 80170d6:	f003 ffd5 	bl	801b084 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 80170da:	4809      	ldr	r0, [pc, #36]	@ (8017100 <RadioInit+0xac>)
 80170dc:	f004 f876 	bl	801b1cc <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 80170e0:	4809      	ldr	r0, [pc, #36]	@ (8017108 <RadioInit+0xb4>)
 80170e2:	f004 f873 	bl	801b1cc <UTIL_TIMER_Stop>
}
 80170e6:	bf00      	nop
 80170e8:	3708      	adds	r7, #8
 80170ea:	46bd      	mov	sp, r7
 80170ec:	bd80      	pop	{r7, pc}
 80170ee:	bf00      	nop
 80170f0:	20001cd4 	.word	0x20001cd4
 80170f4:	20001cd8 	.word	0x20001cd8
 80170f8:	080181a5 	.word	0x080181a5
 80170fc:	0801812d 	.word	0x0801812d
 8017100:	20001d34 	.word	0x20001d34
 8017104:	08018141 	.word	0x08018141
 8017108:	20001d4c 	.word	0x20001d4c

0801710c <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 801710c:	b580      	push	{r7, lr}
 801710e:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8017110:	f001 ff86 	bl	8019020 <SUBGRF_GetOperatingMode>
 8017114:	4603      	mov	r3, r0
 8017116:	2b07      	cmp	r3, #7
 8017118:	d00a      	beq.n	8017130 <RadioGetStatus+0x24>
 801711a:	2b07      	cmp	r3, #7
 801711c:	dc0a      	bgt.n	8017134 <RadioGetStatus+0x28>
 801711e:	2b04      	cmp	r3, #4
 8017120:	d002      	beq.n	8017128 <RadioGetStatus+0x1c>
 8017122:	2b05      	cmp	r3, #5
 8017124:	d002      	beq.n	801712c <RadioGetStatus+0x20>
 8017126:	e005      	b.n	8017134 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8017128:	2302      	movs	r3, #2
 801712a:	e004      	b.n	8017136 <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 801712c:	2301      	movs	r3, #1
 801712e:	e002      	b.n	8017136 <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8017130:	2303      	movs	r3, #3
 8017132:	e000      	b.n	8017136 <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8017134:	2300      	movs	r3, #0
    }
}
 8017136:	4618      	mov	r0, r3
 8017138:	bd80      	pop	{r7, pc}
	...

0801713c <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 801713c:	b580      	push	{r7, lr}
 801713e:	b082      	sub	sp, #8
 8017140:	af00      	add	r7, sp, #0
 8017142:	4603      	mov	r3, r0
 8017144:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 8017146:	4a2a      	ldr	r2, [pc, #168]	@ (80171f0 <RadioSetModem+0xb4>)
 8017148:	79fb      	ldrb	r3, [r7, #7]
 801714a:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 801714c:	79fb      	ldrb	r3, [r7, #7]
 801714e:	4618      	mov	r0, r3
 8017150:	f003 f94b 	bl	801a3ea <RFW_SetRadioModem>
    switch( modem )
 8017154:	79fb      	ldrb	r3, [r7, #7]
 8017156:	2b05      	cmp	r3, #5
 8017158:	d80e      	bhi.n	8017178 <RadioSetModem+0x3c>
 801715a:	a201      	add	r2, pc, #4	@ (adr r2, 8017160 <RadioSetModem+0x24>)
 801715c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017160:	08017187 	.word	0x08017187
 8017164:	08017195 	.word	0x08017195
 8017168:	08017179 	.word	0x08017179
 801716c:	080171bb 	.word	0x080171bb
 8017170:	080171c9 	.word	0x080171c9
 8017174:	080171d7 	.word	0x080171d7
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8017178:	2003      	movs	r0, #3
 801717a:	f002 fb15 	bl	80197a8 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801717e:	4b1c      	ldr	r3, [pc, #112]	@ (80171f0 <RadioSetModem+0xb4>)
 8017180:	2200      	movs	r2, #0
 8017182:	735a      	strb	r2, [r3, #13]
        break;
 8017184:	e02f      	b.n	80171e6 <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8017186:	2000      	movs	r0, #0
 8017188:	f002 fb0e 	bl	80197a8 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801718c:	4b18      	ldr	r3, [pc, #96]	@ (80171f0 <RadioSetModem+0xb4>)
 801718e:	2200      	movs	r2, #0
 8017190:	735a      	strb	r2, [r3, #13]
        break;
 8017192:	e028      	b.n	80171e6 <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8017194:	2001      	movs	r0, #1
 8017196:	f002 fb07 	bl	80197a8 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 801719a:	4b15      	ldr	r3, [pc, #84]	@ (80171f0 <RadioSetModem+0xb4>)
 801719c:	7b5a      	ldrb	r2, [r3, #13]
 801719e:	4b14      	ldr	r3, [pc, #80]	@ (80171f0 <RadioSetModem+0xb4>)
 80171a0:	7b1b      	ldrb	r3, [r3, #12]
 80171a2:	429a      	cmp	r2, r3
 80171a4:	d01e      	beq.n	80171e4 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 80171a6:	4b12      	ldr	r3, [pc, #72]	@ (80171f0 <RadioSetModem+0xb4>)
 80171a8:	7b1a      	ldrb	r2, [r3, #12]
 80171aa:	4b11      	ldr	r3, [pc, #68]	@ (80171f0 <RadioSetModem+0xb4>)
 80171ac:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 80171ae:	4b10      	ldr	r3, [pc, #64]	@ (80171f0 <RadioSetModem+0xb4>)
 80171b0:	7b5b      	ldrb	r3, [r3, #13]
 80171b2:	4618      	mov	r0, r3
 80171b4:	f000 ff84 	bl	80180c0 <RadioSetPublicNetwork>
        }
        break;
 80171b8:	e014      	b.n	80171e4 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 80171ba:	2002      	movs	r0, #2
 80171bc:	f002 faf4 	bl	80197a8 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80171c0:	4b0b      	ldr	r3, [pc, #44]	@ (80171f0 <RadioSetModem+0xb4>)
 80171c2:	2200      	movs	r2, #0
 80171c4:	735a      	strb	r2, [r3, #13]
        break;
 80171c6:	e00e      	b.n	80171e6 <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 80171c8:	2002      	movs	r0, #2
 80171ca:	f002 faed 	bl	80197a8 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80171ce:	4b08      	ldr	r3, [pc, #32]	@ (80171f0 <RadioSetModem+0xb4>)
 80171d0:	2200      	movs	r2, #0
 80171d2:	735a      	strb	r2, [r3, #13]
        break;
 80171d4:	e007      	b.n	80171e6 <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 80171d6:	2000      	movs	r0, #0
 80171d8:	f002 fae6 	bl	80197a8 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80171dc:	4b04      	ldr	r3, [pc, #16]	@ (80171f0 <RadioSetModem+0xb4>)
 80171de:	2200      	movs	r2, #0
 80171e0:	735a      	strb	r2, [r3, #13]
        break;
 80171e2:	e000      	b.n	80171e6 <RadioSetModem+0xaa>
        break;
 80171e4:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 80171e6:	bf00      	nop
 80171e8:	3708      	adds	r7, #8
 80171ea:	46bd      	mov	sp, r7
 80171ec:	bd80      	pop	{r7, pc}
 80171ee:	bf00      	nop
 80171f0:	20001cd8 	.word	0x20001cd8

080171f4 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 80171f4:	b580      	push	{r7, lr}
 80171f6:	b082      	sub	sp, #8
 80171f8:	af00      	add	r7, sp, #0
 80171fa:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 80171fc:	6878      	ldr	r0, [r7, #4]
 80171fe:	f002 fa8d 	bl	801971c <SUBGRF_SetRfFrequency>
}
 8017202:	bf00      	nop
 8017204:	3708      	adds	r7, #8
 8017206:	46bd      	mov	sp, r7
 8017208:	bd80      	pop	{r7, pc}

0801720a <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 801720a:	b580      	push	{r7, lr}
 801720c:	b090      	sub	sp, #64	@ 0x40
 801720e:	af0a      	add	r7, sp, #40	@ 0x28
 8017210:	60f8      	str	r0, [r7, #12]
 8017212:	60b9      	str	r1, [r7, #8]
 8017214:	603b      	str	r3, [r7, #0]
 8017216:	4613      	mov	r3, r2
 8017218:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 801721a:	2301      	movs	r3, #1
 801721c:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 801721e:	2300      	movs	r3, #0
 8017220:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 8017222:	2300      	movs	r3, #0
 8017224:	613b      	str	r3, [r7, #16]

    RadioStandby( );  /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 8017226:	f000 fddc 	bl	8017de2 <RadioStandby>

    RadioSetModem( MODEM_FSK );
 801722a:	2000      	movs	r0, #0
 801722c:	f7ff ff86 	bl	801713c <RadioSetModem>

    RadioSetChannel( freq );
 8017230:	68f8      	ldr	r0, [r7, #12]
 8017232:	f7ff ffdf 	bl	80171f4 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8017236:	2301      	movs	r3, #1
 8017238:	9309      	str	r3, [sp, #36]	@ 0x24
 801723a:	2300      	movs	r3, #0
 801723c:	9308      	str	r3, [sp, #32]
 801723e:	2300      	movs	r3, #0
 8017240:	9307      	str	r3, [sp, #28]
 8017242:	2300      	movs	r3, #0
 8017244:	9306      	str	r3, [sp, #24]
 8017246:	2300      	movs	r3, #0
 8017248:	9305      	str	r3, [sp, #20]
 801724a:	2300      	movs	r3, #0
 801724c:	9304      	str	r3, [sp, #16]
 801724e:	2300      	movs	r3, #0
 8017250:	9303      	str	r3, [sp, #12]
 8017252:	2300      	movs	r3, #0
 8017254:	9302      	str	r3, [sp, #8]
 8017256:	2303      	movs	r3, #3
 8017258:	9301      	str	r3, [sp, #4]
 801725a:	68bb      	ldr	r3, [r7, #8]
 801725c:	9300      	str	r3, [sp, #0]
 801725e:	2300      	movs	r3, #0
 8017260:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8017264:	68b9      	ldr	r1, [r7, #8]
 8017266:	2000      	movs	r0, #0
 8017268:	f000 f83c 	bl	80172e4 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 801726c:	2000      	movs	r0, #0
 801726e:	f000 fdbf 	bl	8017df0 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8017272:	f000 ff53 	bl	801811c <RadioGetWakeupTime>
 8017276:	4603      	mov	r3, r0
 8017278:	4618      	mov	r0, r3
 801727a:	f7ea ffb7 	bl	80021ec <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 801727e:	f004 f8bf 	bl	801b400 <UTIL_TIMER_GetCurrentTime>
 8017282:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8017284:	e00d      	b.n	80172a2 <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 8017286:	2000      	movs	r0, #0
 8017288:	f000 fe9a 	bl	8017fc0 <RadioRssi>
 801728c:	4603      	mov	r3, r0
 801728e:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8017290:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8017294:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8017298:	429a      	cmp	r2, r3
 801729a:	dd02      	ble.n	80172a2 <RadioIsChannelFree+0x98>
        {
            status = false;
 801729c:	2300      	movs	r3, #0
 801729e:	75fb      	strb	r3, [r7, #23]
            break;
 80172a0:	e006      	b.n	80172b0 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80172a2:	6938      	ldr	r0, [r7, #16]
 80172a4:	f004 f8be 	bl	801b424 <UTIL_TIMER_GetElapsedTime>
 80172a8:	4602      	mov	r2, r0
 80172aa:	683b      	ldr	r3, [r7, #0]
 80172ac:	4293      	cmp	r3, r2
 80172ae:	d8ea      	bhi.n	8017286 <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( ); /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 80172b0:	f000 fd97 	bl	8017de2 <RadioStandby>

    return status;
 80172b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80172b6:	4618      	mov	r0, r3
 80172b8:	3718      	adds	r7, #24
 80172ba:	46bd      	mov	sp, r7
 80172bc:	bd80      	pop	{r7, pc}

080172be <RadioRandom>:

static uint32_t RadioRandom( void )
{
 80172be:	b580      	push	{r7, lr}
 80172c0:	b082      	sub	sp, #8
 80172c2:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 80172c4:	2300      	movs	r3, #0
 80172c6:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80172c8:	2300      	movs	r3, #0
 80172ca:	2200      	movs	r2, #0
 80172cc:	2100      	movs	r1, #0
 80172ce:	2000      	movs	r0, #0
 80172d0:	f002 f9c8 	bl	8019664 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 80172d4:	f001 ff75 	bl	80191c2 <SUBGRF_GetRandom>
 80172d8:	6078      	str	r0, [r7, #4]

    return rnd;
 80172da:	687b      	ldr	r3, [r7, #4]
}
 80172dc:	4618      	mov	r0, r3
 80172de:	3708      	adds	r7, #8
 80172e0:	46bd      	mov	sp, r7
 80172e2:	bd80      	pop	{r7, pc}

080172e4 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 80172e4:	b580      	push	{r7, lr}
 80172e6:	b08a      	sub	sp, #40	@ 0x28
 80172e8:	af00      	add	r7, sp, #0
 80172ea:	60b9      	str	r1, [r7, #8]
 80172ec:	607a      	str	r2, [r7, #4]
 80172ee:	461a      	mov	r2, r3
 80172f0:	4603      	mov	r3, r0
 80172f2:	73fb      	strb	r3, [r7, #15]
 80172f4:	4613      	mov	r3, r2
 80172f6:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 80172f8:	4ab9      	ldr	r2, [pc, #740]	@ (80175e0 <RadioSetRxConfig+0x2fc>)
 80172fa:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 80172fe:	7053      	strb	r3, [r2, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8017300:	f003 f831 	bl	801a366 <RFW_DeInit>
    if( rxContinuous == true )
 8017304:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8017308:	2b00      	cmp	r3, #0
 801730a:	d001      	beq.n	8017310 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 801730c:	2300      	movs	r3, #0
 801730e:	873b      	strh	r3, [r7, #56]	@ 0x38
    }
    if( fixLen == true )
 8017310:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8017314:	2b00      	cmp	r3, #0
 8017316:	d004      	beq.n	8017322 <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8017318:	4ab2      	ldr	r2, [pc, #712]	@ (80175e4 <RadioSetRxConfig+0x300>)
 801731a:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 801731e:	7013      	strb	r3, [r2, #0]
 8017320:	e002      	b.n	8017328 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 8017322:	4bb0      	ldr	r3, [pc, #704]	@ (80175e4 <RadioSetRxConfig+0x300>)
 8017324:	22ff      	movs	r2, #255	@ 0xff
 8017326:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8017328:	7bfb      	ldrb	r3, [r7, #15]
 801732a:	2b05      	cmp	r3, #5
 801732c:	d009      	beq.n	8017342 <RadioSetRxConfig+0x5e>
 801732e:	2b05      	cmp	r3, #5
 8017330:	f300 81ca 	bgt.w	80176c8 <RadioSetRxConfig+0x3e4>
 8017334:	2b00      	cmp	r3, #0
 8017336:	f000 80bf 	beq.w	80174b8 <RadioSetRxConfig+0x1d4>
 801733a:	2b01      	cmp	r3, #1
 801733c:	f000 8124 	beq.w	8017588 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8017340:	e1c2      	b.n	80176c8 <RadioSetRxConfig+0x3e4>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 8017342:	2001      	movs	r0, #1
 8017344:	f002 f884 	bl	8019450 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8017348:	4ba5      	ldr	r3, [pc, #660]	@ (80175e0 <RadioSetRxConfig+0x2fc>)
 801734a:	2200      	movs	r2, #0
 801734c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8017350:	4aa3      	ldr	r2, [pc, #652]	@ (80175e0 <RadioSetRxConfig+0x2fc>)
 8017352:	687b      	ldr	r3, [r7, #4]
 8017354:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 8017356:	4ba2      	ldr	r3, [pc, #648]	@ (80175e0 <RadioSetRxConfig+0x2fc>)
 8017358:	2209      	movs	r2, #9
 801735a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 801735e:	4ba0      	ldr	r3, [pc, #640]	@ (80175e0 <RadioSetRxConfig+0x2fc>)
 8017360:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8017364:	641a      	str	r2, [r3, #64]	@ 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8017366:	68b8      	ldr	r0, [r7, #8]
 8017368:	f002 ff30 	bl	801a1cc <SUBGRF_GetFskBandwidthRegValue>
 801736c:	4603      	mov	r3, r0
 801736e:	461a      	mov	r2, r3
 8017370:	4b9b      	ldr	r3, [pc, #620]	@ (80175e0 <RadioSetRxConfig+0x2fc>)
 8017372:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8017376:	4b9a      	ldr	r3, [pc, #616]	@ (80175e0 <RadioSetRxConfig+0x2fc>)
 8017378:	2200      	movs	r2, #0
 801737a:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801737c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801737e:	00db      	lsls	r3, r3, #3
 8017380:	b29a      	uxth	r2, r3
 8017382:	4b97      	ldr	r3, [pc, #604]	@ (80175e0 <RadioSetRxConfig+0x2fc>)
 8017384:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8017386:	4b96      	ldr	r3, [pc, #600]	@ (80175e0 <RadioSetRxConfig+0x2fc>)
 8017388:	2200      	movs	r2, #0
 801738a:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 801738c:	4b94      	ldr	r3, [pc, #592]	@ (80175e0 <RadioSetRxConfig+0x2fc>)
 801738e:	2210      	movs	r2, #16
 8017390:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8017392:	4b93      	ldr	r3, [pc, #588]	@ (80175e0 <RadioSetRxConfig+0x2fc>)
 8017394:	2200      	movs	r2, #0
 8017396:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8017398:	4b91      	ldr	r3, [pc, #580]	@ (80175e0 <RadioSetRxConfig+0x2fc>)
 801739a:	2200      	movs	r2, #0
 801739c:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 801739e:	4b91      	ldr	r3, [pc, #580]	@ (80175e4 <RadioSetRxConfig+0x300>)
 80173a0:	781a      	ldrb	r2, [r3, #0]
 80173a2:	4b8f      	ldr	r3, [pc, #572]	@ (80175e0 <RadioSetRxConfig+0x2fc>)
 80173a4:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80173a6:	4b8e      	ldr	r3, [pc, #568]	@ (80175e0 <RadioSetRxConfig+0x2fc>)
 80173a8:	2201      	movs	r2, #1
 80173aa:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 80173ac:	4b8c      	ldr	r3, [pc, #560]	@ (80175e0 <RadioSetRxConfig+0x2fc>)
 80173ae:	2200      	movs	r2, #0
 80173b0:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 80173b2:	2005      	movs	r0, #5
 80173b4:	f7ff fec2 	bl	801713c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80173b8:	488b      	ldr	r0, [pc, #556]	@ (80175e8 <RadioSetRxConfig+0x304>)
 80173ba:	f002 fae9 	bl	8019990 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80173be:	488b      	ldr	r0, [pc, #556]	@ (80175ec <RadioSetRxConfig+0x308>)
 80173c0:	f002 fbb4 	bl	8019b2c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80173c4:	4a8a      	ldr	r2, [pc, #552]	@ (80175f0 <RadioSetRxConfig+0x30c>)
 80173c6:	f107 031c 	add.w	r3, r7, #28
 80173ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 80173ce:	e883 0003 	stmia.w	r3, {r0, r1}
 80173d2:	f107 031c 	add.w	r3, r7, #28
 80173d6:	4618      	mov	r0, r3
 80173d8:	f001 fe71 	bl	80190be <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80173dc:	f240 10ff 	movw	r0, #511	@ 0x1ff
 80173e0:	f001 febc 	bl	801915c <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 80173e4:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 80173e8:	f000 fe08 	bl	8017ffc <RadioRead>
 80173ec:	4603      	mov	r3, r0
 80173ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=RADIO_BIT_MASK(4);
 80173f2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80173f6:	f023 0310 	bic.w	r3, r3, #16
 80173fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 80173fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017402:	4619      	mov	r1, r3
 8017404:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 8017408:	f000 fde6 	bl	8017fd8 <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 801740c:	2104      	movs	r1, #4
 801740e:	f640 00b9 	movw	r0, #2233	@ 0x8b9
 8017412:	f000 fde1 	bl	8017fd8 <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 8017416:	f640 009b 	movw	r0, #2203	@ 0x89b
 801741a:	f000 fdef 	bl	8017ffc <RadioRead>
 801741e:	4603      	mov	r3, r0
 8017420:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8017424:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017428:	f023 031c 	bic.w	r3, r3, #28
 801742c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 8017430:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017434:	f043 0308 	orr.w	r3, r3, #8
 8017438:	b2db      	uxtb	r3, r3
 801743a:	4619      	mov	r1, r3
 801743c:	f640 009b 	movw	r0, #2203	@ 0x89b
 8017440:	f000 fdca 	bl	8017fd8 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 8017444:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 8017448:	f000 fdd8 	bl	8017ffc <RadioRead>
 801744c:	4603      	mov	r3, r0
 801744e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8017452:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017456:	f023 0318 	bic.w	r3, r3, #24
 801745a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 801745e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017462:	f043 0318 	orr.w	r3, r3, #24
 8017466:	b2db      	uxtb	r3, r3
 8017468:	4619      	mov	r1, r3
 801746a:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 801746e:	f000 fdb3 	bl	8017fd8 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 8017472:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8017476:	f000 fdc1 	bl	8017ffc <RadioRead>
 801747a:	4603      	mov	r3, r0
 801747c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8017480:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017484:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8017488:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 801748c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017490:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 8017494:	b2db      	uxtb	r3, r3
 8017496:	4619      	mov	r1, r3
 8017498:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 801749c:	f000 fd9c 	bl	8017fd8 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 80174a0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80174a2:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80174a6:	fb02 f303 	mul.w	r3, r2, r3
 80174aa:	461a      	mov	r2, r3
 80174ac:	687b      	ldr	r3, [r7, #4]
 80174ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80174b2:	4a4b      	ldr	r2, [pc, #300]	@ (80175e0 <RadioSetRxConfig+0x2fc>)
 80174b4:	6093      	str	r3, [r2, #8]
            break;
 80174b6:	e108      	b.n	80176ca <RadioSetRxConfig+0x3e6>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 80174b8:	2000      	movs	r0, #0
 80174ba:	f001 ffc9 	bl	8019450 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80174be:	4b48      	ldr	r3, [pc, #288]	@ (80175e0 <RadioSetRxConfig+0x2fc>)
 80174c0:	2200      	movs	r2, #0
 80174c2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80174c6:	4a46      	ldr	r2, [pc, #280]	@ (80175e0 <RadioSetRxConfig+0x2fc>)
 80174c8:	687b      	ldr	r3, [r7, #4]
 80174ca:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80174cc:	4b44      	ldr	r3, [pc, #272]	@ (80175e0 <RadioSetRxConfig+0x2fc>)
 80174ce:	220b      	movs	r2, #11
 80174d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80174d4:	68b8      	ldr	r0, [r7, #8]
 80174d6:	f002 fe79 	bl	801a1cc <SUBGRF_GetFskBandwidthRegValue>
 80174da:	4603      	mov	r3, r0
 80174dc:	461a      	mov	r2, r3
 80174de:	4b40      	ldr	r3, [pc, #256]	@ (80175e0 <RadioSetRxConfig+0x2fc>)
 80174e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80174e4:	4b3e      	ldr	r3, [pc, #248]	@ (80175e0 <RadioSetRxConfig+0x2fc>)
 80174e6:	2200      	movs	r2, #0
 80174e8:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80174ea:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80174ec:	00db      	lsls	r3, r3, #3
 80174ee:	b29a      	uxth	r2, r3
 80174f0:	4b3b      	ldr	r3, [pc, #236]	@ (80175e0 <RadioSetRxConfig+0x2fc>)
 80174f2:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80174f4:	4b3a      	ldr	r3, [pc, #232]	@ (80175e0 <RadioSetRxConfig+0x2fc>)
 80174f6:	2204      	movs	r2, #4
 80174f8:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 80174fa:	4b39      	ldr	r3, [pc, #228]	@ (80175e0 <RadioSetRxConfig+0x2fc>)
 80174fc:	2218      	movs	r2, #24
 80174fe:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8017500:	4b37      	ldr	r3, [pc, #220]	@ (80175e0 <RadioSetRxConfig+0x2fc>)
 8017502:	2200      	movs	r2, #0
 8017504:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8017506:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 801750a:	f083 0301 	eor.w	r3, r3, #1
 801750e:	b2db      	uxtb	r3, r3
 8017510:	461a      	mov	r2, r3
 8017512:	4b33      	ldr	r3, [pc, #204]	@ (80175e0 <RadioSetRxConfig+0x2fc>)
 8017514:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8017516:	4b33      	ldr	r3, [pc, #204]	@ (80175e4 <RadioSetRxConfig+0x300>)
 8017518:	781a      	ldrb	r2, [r3, #0]
 801751a:	4b31      	ldr	r3, [pc, #196]	@ (80175e0 <RadioSetRxConfig+0x2fc>)
 801751c:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 801751e:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8017522:	2b00      	cmp	r3, #0
 8017524:	d003      	beq.n	801752e <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8017526:	4b2e      	ldr	r3, [pc, #184]	@ (80175e0 <RadioSetRxConfig+0x2fc>)
 8017528:	22f2      	movs	r2, #242	@ 0xf2
 801752a:	75da      	strb	r2, [r3, #23]
 801752c:	e002      	b.n	8017534 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801752e:	4b2c      	ldr	r3, [pc, #176]	@ (80175e0 <RadioSetRxConfig+0x2fc>)
 8017530:	2201      	movs	r2, #1
 8017532:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8017534:	4b2a      	ldr	r3, [pc, #168]	@ (80175e0 <RadioSetRxConfig+0x2fc>)
 8017536:	2201      	movs	r2, #1
 8017538:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 801753a:	f000 fc52 	bl	8017de2 <RadioStandby>
            RadioSetModem( MODEM_FSK );
 801753e:	2000      	movs	r0, #0
 8017540:	f7ff fdfc 	bl	801713c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8017544:	4828      	ldr	r0, [pc, #160]	@ (80175e8 <RadioSetRxConfig+0x304>)
 8017546:	f002 fa23 	bl	8019990 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801754a:	4828      	ldr	r0, [pc, #160]	@ (80175ec <RadioSetRxConfig+0x308>)
 801754c:	f002 faee 	bl	8019b2c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8017550:	4a28      	ldr	r2, [pc, #160]	@ (80175f4 <RadioSetRxConfig+0x310>)
 8017552:	f107 0314 	add.w	r3, r7, #20
 8017556:	e892 0003 	ldmia.w	r2, {r0, r1}
 801755a:	e883 0003 	stmia.w	r3, {r0, r1}
 801755e:	f107 0314 	add.w	r3, r7, #20
 8017562:	4618      	mov	r0, r3
 8017564:	f001 fdab 	bl	80190be <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8017568:	f240 10ff 	movw	r0, #511	@ 0x1ff
 801756c:	f001 fdf6 	bl	801915c <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8017570:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8017572:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8017576:	fb02 f303 	mul.w	r3, r2, r3
 801757a:	461a      	mov	r2, r3
 801757c:	687b      	ldr	r3, [r7, #4]
 801757e:	fbb2 f3f3 	udiv	r3, r2, r3
 8017582:	4a17      	ldr	r2, [pc, #92]	@ (80175e0 <RadioSetRxConfig+0x2fc>)
 8017584:	6093      	str	r3, [r2, #8]
            break;
 8017586:	e0a0      	b.n	80176ca <RadioSetRxConfig+0x3e6>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8017588:	2000      	movs	r0, #0
 801758a:	f001 ff61 	bl	8019450 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801758e:	4b14      	ldr	r3, [pc, #80]	@ (80175e0 <RadioSetRxConfig+0x2fc>)
 8017590:	2201      	movs	r2, #1
 8017592:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8017596:	687b      	ldr	r3, [r7, #4]
 8017598:	b2da      	uxtb	r2, r3
 801759a:	4b11      	ldr	r3, [pc, #68]	@ (80175e0 <RadioSetRxConfig+0x2fc>)
 801759c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 80175a0:	4a15      	ldr	r2, [pc, #84]	@ (80175f8 <RadioSetRxConfig+0x314>)
 80175a2:	68bb      	ldr	r3, [r7, #8]
 80175a4:	4413      	add	r3, r2
 80175a6:	781a      	ldrb	r2, [r3, #0]
 80175a8:	4b0d      	ldr	r3, [pc, #52]	@ (80175e0 <RadioSetRxConfig+0x2fc>)
 80175aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 80175ae:	4a0c      	ldr	r2, [pc, #48]	@ (80175e0 <RadioSetRxConfig+0x2fc>)
 80175b0:	7bbb      	ldrb	r3, [r7, #14]
 80175b2:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80175b6:	68bb      	ldr	r3, [r7, #8]
 80175b8:	2b00      	cmp	r3, #0
 80175ba:	d105      	bne.n	80175c8 <RadioSetRxConfig+0x2e4>
 80175bc:	687b      	ldr	r3, [r7, #4]
 80175be:	2b0b      	cmp	r3, #11
 80175c0:	d008      	beq.n	80175d4 <RadioSetRxConfig+0x2f0>
 80175c2:	687b      	ldr	r3, [r7, #4]
 80175c4:	2b0c      	cmp	r3, #12
 80175c6:	d005      	beq.n	80175d4 <RadioSetRxConfig+0x2f0>
 80175c8:	68bb      	ldr	r3, [r7, #8]
 80175ca:	2b01      	cmp	r3, #1
 80175cc:	d116      	bne.n	80175fc <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80175ce:	687b      	ldr	r3, [r7, #4]
 80175d0:	2b0c      	cmp	r3, #12
 80175d2:	d113      	bne.n	80175fc <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 80175d4:	4b02      	ldr	r3, [pc, #8]	@ (80175e0 <RadioSetRxConfig+0x2fc>)
 80175d6:	2201      	movs	r2, #1
 80175d8:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 80175dc:	e012      	b.n	8017604 <RadioSetRxConfig+0x320>
 80175de:	bf00      	nop
 80175e0:	20001cd8 	.word	0x20001cd8
 80175e4:	2000012c 	.word	0x2000012c
 80175e8:	20001d10 	.word	0x20001d10
 80175ec:	20001ce6 	.word	0x20001ce6
 80175f0:	0801ee90 	.word	0x0801ee90
 80175f4:	0801ee98 	.word	0x0801ee98
 80175f8:	0801f4e8 	.word	0x0801f4e8
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80175fc:	4b35      	ldr	r3, [pc, #212]	@ (80176d4 <RadioSetRxConfig+0x3f0>)
 80175fe:	2200      	movs	r2, #0
 8017600:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8017604:	4b33      	ldr	r3, [pc, #204]	@ (80176d4 <RadioSetRxConfig+0x3f0>)
 8017606:	2201      	movs	r2, #1
 8017608:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801760a:	4b32      	ldr	r3, [pc, #200]	@ (80176d4 <RadioSetRxConfig+0x3f0>)
 801760c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8017610:	2b05      	cmp	r3, #5
 8017612:	d004      	beq.n	801761e <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8017614:	4b2f      	ldr	r3, [pc, #188]	@ (80176d4 <RadioSetRxConfig+0x3f0>)
 8017616:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801761a:	2b06      	cmp	r3, #6
 801761c:	d10a      	bne.n	8017634 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 801761e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8017620:	2b0b      	cmp	r3, #11
 8017622:	d803      	bhi.n	801762c <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8017624:	4b2b      	ldr	r3, [pc, #172]	@ (80176d4 <RadioSetRxConfig+0x3f0>)
 8017626:	220c      	movs	r2, #12
 8017628:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 801762a:	e006      	b.n	801763a <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801762c:	4a29      	ldr	r2, [pc, #164]	@ (80176d4 <RadioSetRxConfig+0x3f0>)
 801762e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8017630:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8017632:	e002      	b.n	801763a <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8017634:	4a27      	ldr	r2, [pc, #156]	@ (80176d4 <RadioSetRxConfig+0x3f0>)
 8017636:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8017638:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 801763a:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 801763e:	4b25      	ldr	r3, [pc, #148]	@ (80176d4 <RadioSetRxConfig+0x3f0>)
 8017640:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8017642:	4b25      	ldr	r3, [pc, #148]	@ (80176d8 <RadioSetRxConfig+0x3f4>)
 8017644:	781a      	ldrb	r2, [r3, #0]
 8017646:	4b23      	ldr	r3, [pc, #140]	@ (80176d4 <RadioSetRxConfig+0x3f0>)
 8017648:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 801764a:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 801764e:	4b21      	ldr	r3, [pc, #132]	@ (80176d4 <RadioSetRxConfig+0x3f0>)
 8017650:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8017654:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 8017658:	4b1e      	ldr	r3, [pc, #120]	@ (80176d4 <RadioSetRxConfig+0x3f0>)
 801765a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 801765e:	f000 fbc0 	bl	8017de2 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8017662:	2001      	movs	r0, #1
 8017664:	f7ff fd6a 	bl	801713c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8017668:	481c      	ldr	r0, [pc, #112]	@ (80176dc <RadioSetRxConfig+0x3f8>)
 801766a:	f002 f991 	bl	8019990 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801766e:	481c      	ldr	r0, [pc, #112]	@ (80176e0 <RadioSetRxConfig+0x3fc>)
 8017670:	f002 fa5c 	bl	8019b2c <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8017674:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8017676:	b2db      	uxtb	r3, r3
 8017678:	4618      	mov	r0, r3
 801767a:	f001 fef8 	bl	801946e <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 801767e:	4b15      	ldr	r3, [pc, #84]	@ (80176d4 <RadioSetRxConfig+0x3f0>)
 8017680:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8017684:	2b01      	cmp	r3, #1
 8017686:	d10d      	bne.n	80176a4 <RadioSetRxConfig+0x3c0>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8017688:	f240 7036 	movw	r0, #1846	@ 0x736
 801768c:	f002 fba8 	bl	8019de0 <SUBGRF_ReadRegister>
 8017690:	4603      	mov	r3, r0
 8017692:	f023 0304 	bic.w	r3, r3, #4
 8017696:	b2db      	uxtb	r3, r3
 8017698:	4619      	mov	r1, r3
 801769a:	f240 7036 	movw	r0, #1846	@ 0x736
 801769e:	f002 fb8b 	bl	8019db8 <SUBGRF_WriteRegister>
 80176a2:	e00c      	b.n	80176be <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 80176a4:	f240 7036 	movw	r0, #1846	@ 0x736
 80176a8:	f002 fb9a 	bl	8019de0 <SUBGRF_ReadRegister>
 80176ac:	4603      	mov	r3, r0
 80176ae:	f043 0304 	orr.w	r3, r3, #4
 80176b2:	b2db      	uxtb	r3, r3
 80176b4:	4619      	mov	r1, r3
 80176b6:	f240 7036 	movw	r0, #1846	@ 0x736
 80176ba:	f002 fb7d 	bl	8019db8 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 80176be:	4b05      	ldr	r3, [pc, #20]	@ (80176d4 <RadioSetRxConfig+0x3f0>)
 80176c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80176c4:	609a      	str	r2, [r3, #8]
            break;
 80176c6:	e000      	b.n	80176ca <RadioSetRxConfig+0x3e6>
            break;
 80176c8:	bf00      	nop
    }
}
 80176ca:	bf00      	nop
 80176cc:	3728      	adds	r7, #40	@ 0x28
 80176ce:	46bd      	mov	sp, r7
 80176d0:	bd80      	pop	{r7, pc}
 80176d2:	bf00      	nop
 80176d4:	20001cd8 	.word	0x20001cd8
 80176d8:	2000012c 	.word	0x2000012c
 80176dc:	20001d10 	.word	0x20001d10
 80176e0:	20001ce6 	.word	0x20001ce6

080176e4 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 80176e4:	b580      	push	{r7, lr}
 80176e6:	b086      	sub	sp, #24
 80176e8:	af00      	add	r7, sp, #0
 80176ea:	60ba      	str	r2, [r7, #8]
 80176ec:	607b      	str	r3, [r7, #4]
 80176ee:	4603      	mov	r3, r0
 80176f0:	73fb      	strb	r3, [r7, #15]
 80176f2:	460b      	mov	r3, r1
 80176f4:	73bb      	strb	r3, [r7, #14]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 80176f6:	f002 fe36 	bl	801a366 <RFW_DeInit>
    switch( modem )
 80176fa:	7bfb      	ldrb	r3, [r7, #15]
 80176fc:	2b04      	cmp	r3, #4
 80176fe:	f000 80c7 	beq.w	8017890 <RadioSetTxConfig+0x1ac>
 8017702:	2b04      	cmp	r3, #4
 8017704:	f300 80d6 	bgt.w	80178b4 <RadioSetTxConfig+0x1d0>
 8017708:	2b00      	cmp	r3, #0
 801770a:	d002      	beq.n	8017712 <RadioSetTxConfig+0x2e>
 801770c:	2b01      	cmp	r3, #1
 801770e:	d059      	beq.n	80177c4 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8017710:	e0d0      	b.n	80178b4 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8017712:	4b74      	ldr	r3, [pc, #464]	@ (80178e4 <RadioSetTxConfig+0x200>)
 8017714:	2200      	movs	r2, #0
 8017716:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801771a:	4a72      	ldr	r2, [pc, #456]	@ (80178e4 <RadioSetTxConfig+0x200>)
 801771c:	6a3b      	ldr	r3, [r7, #32]
 801771e:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8017720:	4b70      	ldr	r3, [pc, #448]	@ (80178e4 <RadioSetTxConfig+0x200>)
 8017722:	220b      	movs	r2, #11
 8017724:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8017728:	6878      	ldr	r0, [r7, #4]
 801772a:	f002 fd4f 	bl	801a1cc <SUBGRF_GetFskBandwidthRegValue>
 801772e:	4603      	mov	r3, r0
 8017730:	461a      	mov	r2, r3
 8017732:	4b6c      	ldr	r3, [pc, #432]	@ (80178e4 <RadioSetTxConfig+0x200>)
 8017734:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8017738:	4a6a      	ldr	r2, [pc, #424]	@ (80178e4 <RadioSetTxConfig+0x200>)
 801773a:	68bb      	ldr	r3, [r7, #8]
 801773c:	6413      	str	r3, [r2, #64]	@ 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801773e:	4b69      	ldr	r3, [pc, #420]	@ (80178e4 <RadioSetTxConfig+0x200>)
 8017740:	2200      	movs	r2, #0
 8017742:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8017744:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8017746:	00db      	lsls	r3, r3, #3
 8017748:	b29a      	uxth	r2, r3
 801774a:	4b66      	ldr	r3, [pc, #408]	@ (80178e4 <RadioSetTxConfig+0x200>)
 801774c:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 801774e:	4b65      	ldr	r3, [pc, #404]	@ (80178e4 <RadioSetTxConfig+0x200>)
 8017750:	2204      	movs	r2, #4
 8017752:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8017754:	4b63      	ldr	r3, [pc, #396]	@ (80178e4 <RadioSetTxConfig+0x200>)
 8017756:	2218      	movs	r2, #24
 8017758:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801775a:	4b62      	ldr	r3, [pc, #392]	@ (80178e4 <RadioSetTxConfig+0x200>)
 801775c:	2200      	movs	r2, #0
 801775e:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8017760:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8017764:	f083 0301 	eor.w	r3, r3, #1
 8017768:	b2db      	uxtb	r3, r3
 801776a:	461a      	mov	r2, r3
 801776c:	4b5d      	ldr	r3, [pc, #372]	@ (80178e4 <RadioSetTxConfig+0x200>)
 801776e:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 8017770:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8017774:	2b00      	cmp	r3, #0
 8017776:	d003      	beq.n	8017780 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8017778:	4b5a      	ldr	r3, [pc, #360]	@ (80178e4 <RadioSetTxConfig+0x200>)
 801777a:	22f2      	movs	r2, #242	@ 0xf2
 801777c:	75da      	strb	r2, [r3, #23]
 801777e:	e002      	b.n	8017786 <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8017780:	4b58      	ldr	r3, [pc, #352]	@ (80178e4 <RadioSetTxConfig+0x200>)
 8017782:	2201      	movs	r2, #1
 8017784:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8017786:	4b57      	ldr	r3, [pc, #348]	@ (80178e4 <RadioSetTxConfig+0x200>)
 8017788:	2201      	movs	r2, #1
 801778a:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 801778c:	f000 fb29 	bl	8017de2 <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 8017790:	2000      	movs	r0, #0
 8017792:	f7ff fcd3 	bl	801713c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8017796:	4854      	ldr	r0, [pc, #336]	@ (80178e8 <RadioSetTxConfig+0x204>)
 8017798:	f002 f8fa 	bl	8019990 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801779c:	4853      	ldr	r0, [pc, #332]	@ (80178ec <RadioSetTxConfig+0x208>)
 801779e:	f002 f9c5 	bl	8019b2c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80177a2:	4a53      	ldr	r2, [pc, #332]	@ (80178f0 <RadioSetTxConfig+0x20c>)
 80177a4:	f107 0310 	add.w	r3, r7, #16
 80177a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80177ac:	e883 0003 	stmia.w	r3, {r0, r1}
 80177b0:	f107 0310 	add.w	r3, r7, #16
 80177b4:	4618      	mov	r0, r3
 80177b6:	f001 fc82 	bl	80190be <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80177ba:	f240 10ff 	movw	r0, #511	@ 0x1ff
 80177be:	f001 fccd 	bl	801915c <SUBGRF_SetWhiteningSeed>
            break;
 80177c2:	e078      	b.n	80178b6 <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80177c4:	4b47      	ldr	r3, [pc, #284]	@ (80178e4 <RadioSetTxConfig+0x200>)
 80177c6:	2201      	movs	r2, #1
 80177c8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 80177cc:	6a3b      	ldr	r3, [r7, #32]
 80177ce:	b2da      	uxtb	r2, r3
 80177d0:	4b44      	ldr	r3, [pc, #272]	@ (80178e4 <RadioSetTxConfig+0x200>)
 80177d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 80177d6:	4a47      	ldr	r2, [pc, #284]	@ (80178f4 <RadioSetTxConfig+0x210>)
 80177d8:	687b      	ldr	r3, [r7, #4]
 80177da:	4413      	add	r3, r2
 80177dc:	781a      	ldrb	r2, [r3, #0]
 80177de:	4b41      	ldr	r3, [pc, #260]	@ (80178e4 <RadioSetTxConfig+0x200>)
 80177e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 80177e4:	4a3f      	ldr	r2, [pc, #252]	@ (80178e4 <RadioSetTxConfig+0x200>)
 80177e6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80177ea:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80177ee:	687b      	ldr	r3, [r7, #4]
 80177f0:	2b00      	cmp	r3, #0
 80177f2:	d105      	bne.n	8017800 <RadioSetTxConfig+0x11c>
 80177f4:	6a3b      	ldr	r3, [r7, #32]
 80177f6:	2b0b      	cmp	r3, #11
 80177f8:	d008      	beq.n	801780c <RadioSetTxConfig+0x128>
 80177fa:	6a3b      	ldr	r3, [r7, #32]
 80177fc:	2b0c      	cmp	r3, #12
 80177fe:	d005      	beq.n	801780c <RadioSetTxConfig+0x128>
 8017800:	687b      	ldr	r3, [r7, #4]
 8017802:	2b01      	cmp	r3, #1
 8017804:	d107      	bne.n	8017816 <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8017806:	6a3b      	ldr	r3, [r7, #32]
 8017808:	2b0c      	cmp	r3, #12
 801780a:	d104      	bne.n	8017816 <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 801780c:	4b35      	ldr	r3, [pc, #212]	@ (80178e4 <RadioSetTxConfig+0x200>)
 801780e:	2201      	movs	r2, #1
 8017810:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8017814:	e003      	b.n	801781e <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8017816:	4b33      	ldr	r3, [pc, #204]	@ (80178e4 <RadioSetTxConfig+0x200>)
 8017818:	2200      	movs	r2, #0
 801781a:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801781e:	4b31      	ldr	r3, [pc, #196]	@ (80178e4 <RadioSetTxConfig+0x200>)
 8017820:	2201      	movs	r2, #1
 8017822:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8017824:	4b2f      	ldr	r3, [pc, #188]	@ (80178e4 <RadioSetTxConfig+0x200>)
 8017826:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 801782a:	2b05      	cmp	r3, #5
 801782c:	d004      	beq.n	8017838 <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 801782e:	4b2d      	ldr	r3, [pc, #180]	@ (80178e4 <RadioSetTxConfig+0x200>)
 8017830:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8017834:	2b06      	cmp	r3, #6
 8017836:	d10a      	bne.n	801784e <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 8017838:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801783a:	2b0b      	cmp	r3, #11
 801783c:	d803      	bhi.n	8017846 <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 801783e:	4b29      	ldr	r3, [pc, #164]	@ (80178e4 <RadioSetTxConfig+0x200>)
 8017840:	220c      	movs	r2, #12
 8017842:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8017844:	e006      	b.n	8017854 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8017846:	4a27      	ldr	r2, [pc, #156]	@ (80178e4 <RadioSetTxConfig+0x200>)
 8017848:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801784a:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 801784c:	e002      	b.n	8017854 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801784e:	4a25      	ldr	r2, [pc, #148]	@ (80178e4 <RadioSetTxConfig+0x200>)
 8017850:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8017852:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8017854:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8017858:	4b22      	ldr	r3, [pc, #136]	@ (80178e4 <RadioSetTxConfig+0x200>)
 801785a:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801785c:	4b26      	ldr	r3, [pc, #152]	@ (80178f8 <RadioSetTxConfig+0x214>)
 801785e:	781a      	ldrb	r2, [r3, #0]
 8017860:	4b20      	ldr	r3, [pc, #128]	@ (80178e4 <RadioSetTxConfig+0x200>)
 8017862:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8017864:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8017868:	4b1e      	ldr	r3, [pc, #120]	@ (80178e4 <RadioSetTxConfig+0x200>)
 801786a:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 801786e:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8017872:	4b1c      	ldr	r3, [pc, #112]	@ (80178e4 <RadioSetTxConfig+0x200>)
 8017874:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 8017878:	f000 fab3 	bl	8017de2 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 801787c:	2001      	movs	r0, #1
 801787e:	f7ff fc5d 	bl	801713c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8017882:	4819      	ldr	r0, [pc, #100]	@ (80178e8 <RadioSetTxConfig+0x204>)
 8017884:	f002 f884 	bl	8019990 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017888:	4818      	ldr	r0, [pc, #96]	@ (80178ec <RadioSetTxConfig+0x208>)
 801788a:	f002 f94f 	bl	8019b2c <SUBGRF_SetPacketParams>
            break;
 801788e:	e012      	b.n	80178b6 <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 8017890:	2004      	movs	r0, #4
 8017892:	f7ff fc53 	bl	801713c <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8017896:	4b13      	ldr	r3, [pc, #76]	@ (80178e4 <RadioSetTxConfig+0x200>)
 8017898:	2202      	movs	r2, #2
 801789a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 801789e:	4a11      	ldr	r2, [pc, #68]	@ (80178e4 <RadioSetTxConfig+0x200>)
 80178a0:	6a3b      	ldr	r3, [r7, #32]
 80178a2:	6493      	str	r3, [r2, #72]	@ 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 80178a4:	4b0f      	ldr	r3, [pc, #60]	@ (80178e4 <RadioSetTxConfig+0x200>)
 80178a6:	2216      	movs	r2, #22
 80178a8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80178ac:	480e      	ldr	r0, [pc, #56]	@ (80178e8 <RadioSetTxConfig+0x204>)
 80178ae:	f002 f86f 	bl	8019990 <SUBGRF_SetModulationParams>
            break;
 80178b2:	e000      	b.n	80178b6 <RadioSetTxConfig+0x1d2>
            break;
 80178b4:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 80178b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80178ba:	4618      	mov	r0, r3
 80178bc:	f002 fb98 	bl	8019ff0 <SUBGRF_SetRfTxPower>
 80178c0:	4603      	mov	r3, r0
 80178c2:	461a      	mov	r2, r3
 80178c4:	4b07      	ldr	r3, [pc, #28]	@ (80178e4 <RadioSetTxConfig+0x200>)
 80178c6:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 80178ca:	4b06      	ldr	r3, [pc, #24]	@ (80178e4 <RadioSetTxConfig+0x200>)
 80178cc:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80178d0:	4618      	mov	r0, r3
 80178d2:	f002 fd5c 	bl	801a38e <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 80178d6:	4a03      	ldr	r2, [pc, #12]	@ (80178e4 <RadioSetTxConfig+0x200>)
 80178d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80178da:	6053      	str	r3, [r2, #4]
}
 80178dc:	bf00      	nop
 80178de:	3718      	adds	r7, #24
 80178e0:	46bd      	mov	sp, r7
 80178e2:	bd80      	pop	{r7, pc}
 80178e4:	20001cd8 	.word	0x20001cd8
 80178e8:	20001d10 	.word	0x20001d10
 80178ec:	20001ce6 	.word	0x20001ce6
 80178f0:	0801ee98 	.word	0x0801ee98
 80178f4:	0801f4e8 	.word	0x0801f4e8
 80178f8:	2000012c 	.word	0x2000012c

080178fc <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 80178fc:	b480      	push	{r7}
 80178fe:	b083      	sub	sp, #12
 8017900:	af00      	add	r7, sp, #0
 8017902:	6078      	str	r0, [r7, #4]
    return true;
 8017904:	2301      	movs	r3, #1
}
 8017906:	4618      	mov	r0, r3
 8017908:	370c      	adds	r7, #12
 801790a:	46bd      	mov	sp, r7
 801790c:	bc80      	pop	{r7}
 801790e:	4770      	bx	lr

08017910 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8017910:	b480      	push	{r7}
 8017912:	b085      	sub	sp, #20
 8017914:	af00      	add	r7, sp, #0
 8017916:	4603      	mov	r3, r0
 8017918:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 801791a:	2300      	movs	r3, #0
 801791c:	60fb      	str	r3, [r7, #12]

    switch( bw )
 801791e:	79fb      	ldrb	r3, [r7, #7]
 8017920:	2b0a      	cmp	r3, #10
 8017922:	d83e      	bhi.n	80179a2 <RadioGetLoRaBandwidthInHz+0x92>
 8017924:	a201      	add	r2, pc, #4	@ (adr r2, 801792c <RadioGetLoRaBandwidthInHz+0x1c>)
 8017926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801792a:	bf00      	nop
 801792c:	08017959 	.word	0x08017959
 8017930:	08017969 	.word	0x08017969
 8017934:	08017979 	.word	0x08017979
 8017938:	08017989 	.word	0x08017989
 801793c:	08017991 	.word	0x08017991
 8017940:	08017997 	.word	0x08017997
 8017944:	0801799d 	.word	0x0801799d
 8017948:	080179a3 	.word	0x080179a3
 801794c:	08017961 	.word	0x08017961
 8017950:	08017971 	.word	0x08017971
 8017954:	08017981 	.word	0x08017981
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8017958:	f641 6384 	movw	r3, #7812	@ 0x1e84
 801795c:	60fb      	str	r3, [r7, #12]
        break;
 801795e:	e020      	b.n	80179a2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8017960:	f642 03b1 	movw	r3, #10417	@ 0x28b1
 8017964:	60fb      	str	r3, [r7, #12]
        break;
 8017966:	e01c      	b.n	80179a2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8017968:	f643 5309 	movw	r3, #15625	@ 0x3d09
 801796c:	60fb      	str	r3, [r7, #12]
        break;
 801796e:	e018      	b.n	80179a2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8017970:	f245 1361 	movw	r3, #20833	@ 0x5161
 8017974:	60fb      	str	r3, [r7, #12]
        break;
 8017976:	e014      	b.n	80179a2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8017978:	f647 2312 	movw	r3, #31250	@ 0x7a12
 801797c:	60fb      	str	r3, [r7, #12]
        break;
 801797e:	e010      	b.n	80179a2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8017980:	f24a 23c3 	movw	r3, #41667	@ 0xa2c3
 8017984:	60fb      	str	r3, [r7, #12]
        break;
 8017986:	e00c      	b.n	80179a2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8017988:	f24f 4324 	movw	r3, #62500	@ 0xf424
 801798c:	60fb      	str	r3, [r7, #12]
        break;
 801798e:	e008      	b.n	80179a2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8017990:	4b07      	ldr	r3, [pc, #28]	@ (80179b0 <RadioGetLoRaBandwidthInHz+0xa0>)
 8017992:	60fb      	str	r3, [r7, #12]
        break;
 8017994:	e005      	b.n	80179a2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8017996:	4b07      	ldr	r3, [pc, #28]	@ (80179b4 <RadioGetLoRaBandwidthInHz+0xa4>)
 8017998:	60fb      	str	r3, [r7, #12]
        break;
 801799a:	e002      	b.n	80179a2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 801799c:	4b06      	ldr	r3, [pc, #24]	@ (80179b8 <RadioGetLoRaBandwidthInHz+0xa8>)
 801799e:	60fb      	str	r3, [r7, #12]
        break;
 80179a0:	bf00      	nop
    }

    return bandwidthInHz;
 80179a2:	68fb      	ldr	r3, [r7, #12]
}
 80179a4:	4618      	mov	r0, r3
 80179a6:	3714      	adds	r7, #20
 80179a8:	46bd      	mov	sp, r7
 80179aa:	bc80      	pop	{r7}
 80179ac:	4770      	bx	lr
 80179ae:	bf00      	nop
 80179b0:	0001e848 	.word	0x0001e848
 80179b4:	0003d090 	.word	0x0003d090
 80179b8:	0007a120 	.word	0x0007a120

080179bc <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 80179bc:	b480      	push	{r7}
 80179be:	b083      	sub	sp, #12
 80179c0:	af00      	add	r7, sp, #0
 80179c2:	6078      	str	r0, [r7, #4]
 80179c4:	4608      	mov	r0, r1
 80179c6:	4611      	mov	r1, r2
 80179c8:	461a      	mov	r2, r3
 80179ca:	4603      	mov	r3, r0
 80179cc:	70fb      	strb	r3, [r7, #3]
 80179ce:	460b      	mov	r3, r1
 80179d0:	803b      	strh	r3, [r7, #0]
 80179d2:	4613      	mov	r3, r2
 80179d4:	70bb      	strb	r3, [r7, #2]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 80179d6:	883b      	ldrh	r3, [r7, #0]
 80179d8:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80179da:	78ba      	ldrb	r2, [r7, #2]
 80179dc:	f082 0201 	eor.w	r2, r2, #1
 80179e0:	b2d2      	uxtb	r2, r2
 80179e2:	2a00      	cmp	r2, #0
 80179e4:	d001      	beq.n	80179ea <RadioGetGfskTimeOnAirNumerator+0x2e>
 80179e6:	2208      	movs	r2, #8
 80179e8:	e000      	b.n	80179ec <RadioGetGfskTimeOnAirNumerator+0x30>
 80179ea:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 80179ec:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80179ee:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 80179f2:	7c3b      	ldrb	r3, [r7, #16]
 80179f4:	7d39      	ldrb	r1, [r7, #20]
 80179f6:	2900      	cmp	r1, #0
 80179f8:	d001      	beq.n	80179fe <RadioGetGfskTimeOnAirNumerator+0x42>
 80179fa:	2102      	movs	r1, #2
 80179fc:	e000      	b.n	8017a00 <RadioGetGfskTimeOnAirNumerator+0x44>
 80179fe:	2100      	movs	r1, #0
 8017a00:	440b      	add	r3, r1
 8017a02:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8017a04:	4413      	add	r3, r2
    /* ST_WORKAROUND_END */
}
 8017a06:	4618      	mov	r0, r3
 8017a08:	370c      	adds	r7, #12
 8017a0a:	46bd      	mov	sp, r7
 8017a0c:	bc80      	pop	{r7}
 8017a0e:	4770      	bx	lr

08017a10 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8017a10:	b480      	push	{r7}
 8017a12:	b08b      	sub	sp, #44	@ 0x2c
 8017a14:	af00      	add	r7, sp, #0
 8017a16:	60f8      	str	r0, [r7, #12]
 8017a18:	60b9      	str	r1, [r7, #8]
 8017a1a:	4611      	mov	r1, r2
 8017a1c:	461a      	mov	r2, r3
 8017a1e:	460b      	mov	r3, r1
 8017a20:	71fb      	strb	r3, [r7, #7]
 8017a22:	4613      	mov	r3, r2
 8017a24:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8017a26:	79fb      	ldrb	r3, [r7, #7]
 8017a28:	3304      	adds	r3, #4
 8017a2a:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8017a2c:	2300      	movs	r3, #0
 8017a2e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8017a32:	68bb      	ldr	r3, [r7, #8]
 8017a34:	2b05      	cmp	r3, #5
 8017a36:	d002      	beq.n	8017a3e <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8017a38:	68bb      	ldr	r3, [r7, #8]
 8017a3a:	2b06      	cmp	r3, #6
 8017a3c:	d104      	bne.n	8017a48 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 8017a3e:	88bb      	ldrh	r3, [r7, #4]
 8017a40:	2b0b      	cmp	r3, #11
 8017a42:	d801      	bhi.n	8017a48 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8017a44:	230c      	movs	r3, #12
 8017a46:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8017a48:	68fb      	ldr	r3, [r7, #12]
 8017a4a:	2b00      	cmp	r3, #0
 8017a4c:	d105      	bne.n	8017a5a <RadioGetLoRaTimeOnAirNumerator+0x4a>
 8017a4e:	68bb      	ldr	r3, [r7, #8]
 8017a50:	2b0b      	cmp	r3, #11
 8017a52:	d008      	beq.n	8017a66 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8017a54:	68bb      	ldr	r3, [r7, #8]
 8017a56:	2b0c      	cmp	r3, #12
 8017a58:	d005      	beq.n	8017a66 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8017a5a:	68fb      	ldr	r3, [r7, #12]
 8017a5c:	2b01      	cmp	r3, #1
 8017a5e:	d105      	bne.n	8017a6c <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8017a60:	68bb      	ldr	r3, [r7, #8]
 8017a62:	2b0c      	cmp	r3, #12
 8017a64:	d102      	bne.n	8017a6c <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8017a66:	2301      	movs	r3, #1
 8017a68:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8017a6c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8017a70:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 8017a72:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8017a76:	2a00      	cmp	r2, #0
 8017a78:	d001      	beq.n	8017a7e <RadioGetLoRaTimeOnAirNumerator+0x6e>
 8017a7a:	2210      	movs	r2, #16
 8017a7c:	e000      	b.n	8017a80 <RadioGetLoRaTimeOnAirNumerator+0x70>
 8017a7e:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8017a80:	4413      	add	r3, r2
 8017a82:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8017a84:	68bb      	ldr	r3, [r7, #8]
 8017a86:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8017a88:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 8017a8a:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8017a8e:	2a00      	cmp	r2, #0
 8017a90:	d001      	beq.n	8017a96 <RadioGetLoRaTimeOnAirNumerator+0x86>
 8017a92:	2200      	movs	r2, #0
 8017a94:	e000      	b.n	8017a98 <RadioGetLoRaTimeOnAirNumerator+0x88>
 8017a96:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8017a98:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8017a9a:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8017a9c:	68bb      	ldr	r3, [r7, #8]
 8017a9e:	2b06      	cmp	r3, #6
 8017aa0:	d803      	bhi.n	8017aaa <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 8017aa2:	68bb      	ldr	r3, [r7, #8]
 8017aa4:	009b      	lsls	r3, r3, #2
 8017aa6:	623b      	str	r3, [r7, #32]
 8017aa8:	e00e      	b.n	8017ac8 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 8017aaa:	69fb      	ldr	r3, [r7, #28]
 8017aac:	3308      	adds	r3, #8
 8017aae:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8017ab0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017ab4:	2b00      	cmp	r3, #0
 8017ab6:	d004      	beq.n	8017ac2 <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8017ab8:	68bb      	ldr	r3, [r7, #8]
 8017aba:	3b02      	subs	r3, #2
 8017abc:	009b      	lsls	r3, r3, #2
 8017abe:	623b      	str	r3, [r7, #32]
 8017ac0:	e002      	b.n	8017ac8 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 8017ac2:	68bb      	ldr	r3, [r7, #8]
 8017ac4:	009b      	lsls	r3, r3, #2
 8017ac6:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8017ac8:	69fb      	ldr	r3, [r7, #28]
 8017aca:	2b00      	cmp	r3, #0
 8017acc:	da01      	bge.n	8017ad2 <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 8017ace:	2300      	movs	r3, #0
 8017ad0:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8017ad2:	69fa      	ldr	r2, [r7, #28]
 8017ad4:	6a3b      	ldr	r3, [r7, #32]
 8017ad6:	4413      	add	r3, r2
 8017ad8:	1e5a      	subs	r2, r3, #1
 8017ada:	6a3b      	ldr	r3, [r7, #32]
 8017adc:	fb92 f3f3 	sdiv	r3, r2, r3
 8017ae0:	697a      	ldr	r2, [r7, #20]
 8017ae2:	fb03 f202 	mul.w	r2, r3, r2
 8017ae6:	88bb      	ldrh	r3, [r7, #4]
 8017ae8:	4413      	add	r3, r2
    int32_t intermediate =
 8017aea:	330c      	adds	r3, #12
 8017aec:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 8017aee:	68bb      	ldr	r3, [r7, #8]
 8017af0:	2b06      	cmp	r3, #6
 8017af2:	d802      	bhi.n	8017afa <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8017af4:	69bb      	ldr	r3, [r7, #24]
 8017af6:	3302      	adds	r3, #2
 8017af8:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8017afa:	69bb      	ldr	r3, [r7, #24]
 8017afc:	009b      	lsls	r3, r3, #2
 8017afe:	1c5a      	adds	r2, r3, #1
 8017b00:	68bb      	ldr	r3, [r7, #8]
 8017b02:	3b02      	subs	r3, #2
 8017b04:	fa02 f303 	lsl.w	r3, r2, r3
}
 8017b08:	4618      	mov	r0, r3
 8017b0a:	372c      	adds	r7, #44	@ 0x2c
 8017b0c:	46bd      	mov	sp, r7
 8017b0e:	bc80      	pop	{r7}
 8017b10:	4770      	bx	lr
	...

08017b14 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8017b14:	b580      	push	{r7, lr}
 8017b16:	b08a      	sub	sp, #40	@ 0x28
 8017b18:	af04      	add	r7, sp, #16
 8017b1a:	60b9      	str	r1, [r7, #8]
 8017b1c:	607a      	str	r2, [r7, #4]
 8017b1e:	461a      	mov	r2, r3
 8017b20:	4603      	mov	r3, r0
 8017b22:	73fb      	strb	r3, [r7, #15]
 8017b24:	4613      	mov	r3, r2
 8017b26:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8017b28:	2300      	movs	r3, #0
 8017b2a:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8017b2c:	2301      	movs	r3, #1
 8017b2e:	613b      	str	r3, [r7, #16]

    switch( modem )
 8017b30:	7bfb      	ldrb	r3, [r7, #15]
 8017b32:	2b00      	cmp	r3, #0
 8017b34:	d002      	beq.n	8017b3c <RadioTimeOnAir+0x28>
 8017b36:	2b01      	cmp	r3, #1
 8017b38:	d017      	beq.n	8017b6a <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 8017b3a:	e035      	b.n	8017ba8 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8017b3c:	f897 0024 	ldrb.w	r0, [r7, #36]	@ 0x24
 8017b40:	8c3a      	ldrh	r2, [r7, #32]
 8017b42:	7bb9      	ldrb	r1, [r7, #14]
 8017b44:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8017b48:	9301      	str	r3, [sp, #4]
 8017b4a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8017b4e:	9300      	str	r3, [sp, #0]
 8017b50:	4603      	mov	r3, r0
 8017b52:	6878      	ldr	r0, [r7, #4]
 8017b54:	f7ff ff32 	bl	80179bc <RadioGetGfskTimeOnAirNumerator>
 8017b58:	4603      	mov	r3, r0
 8017b5a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8017b5e:	fb02 f303 	mul.w	r3, r2, r3
 8017b62:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8017b64:	687b      	ldr	r3, [r7, #4]
 8017b66:	613b      	str	r3, [r7, #16]
        break;
 8017b68:	e01e      	b.n	8017ba8 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8017b6a:	8c39      	ldrh	r1, [r7, #32]
 8017b6c:	7bba      	ldrb	r2, [r7, #14]
 8017b6e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8017b72:	9302      	str	r3, [sp, #8]
 8017b74:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8017b78:	9301      	str	r3, [sp, #4]
 8017b7a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8017b7e:	9300      	str	r3, [sp, #0]
 8017b80:	460b      	mov	r3, r1
 8017b82:	6879      	ldr	r1, [r7, #4]
 8017b84:	68b8      	ldr	r0, [r7, #8]
 8017b86:	f7ff ff43 	bl	8017a10 <RadioGetLoRaTimeOnAirNumerator>
 8017b8a:	4603      	mov	r3, r0
 8017b8c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8017b90:	fb02 f303 	mul.w	r3, r2, r3
 8017b94:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8017b96:	4a0a      	ldr	r2, [pc, #40]	@ (8017bc0 <RadioTimeOnAir+0xac>)
 8017b98:	68bb      	ldr	r3, [r7, #8]
 8017b9a:	4413      	add	r3, r2
 8017b9c:	781b      	ldrb	r3, [r3, #0]
 8017b9e:	4618      	mov	r0, r3
 8017ba0:	f7ff feb6 	bl	8017910 <RadioGetLoRaBandwidthInHz>
 8017ba4:	6138      	str	r0, [r7, #16]
        break;
 8017ba6:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator ); /* ST_WORKAROUND : simplified calculation with macro usage */
 8017ba8:	697a      	ldr	r2, [r7, #20]
 8017baa:	693b      	ldr	r3, [r7, #16]
 8017bac:	4413      	add	r3, r2
 8017bae:	1e5a      	subs	r2, r3, #1
 8017bb0:	693b      	ldr	r3, [r7, #16]
 8017bb2:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8017bb6:	4618      	mov	r0, r3
 8017bb8:	3718      	adds	r7, #24
 8017bba:	46bd      	mov	sp, r7
 8017bbc:	bd80      	pop	{r7, pc}
 8017bbe:	bf00      	nop
 8017bc0:	0801f4e8 	.word	0x0801f4e8

08017bc4 <RadioSend>:

static void RadioSend( uint8_t *buffer, uint8_t size )
{
 8017bc4:	b580      	push	{r7, lr}
 8017bc6:	b084      	sub	sp, #16
 8017bc8:	af00      	add	r7, sp, #0
 8017bca:	6078      	str	r0, [r7, #4]
 8017bcc:	460b      	mov	r3, r1
 8017bce:	70fb      	strb	r3, [r7, #3]
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8017bd0:	2300      	movs	r3, #0
 8017bd2:	2200      	movs	r2, #0
 8017bd4:	f240 2101 	movw	r1, #513	@ 0x201
 8017bd8:	f240 2001 	movw	r0, #513	@ 0x201
 8017bdc:	f001 fd42 	bl	8019664 <SUBGRF_SetDioIrqParams>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8017be0:	4b71      	ldr	r3, [pc, #452]	@ (8017da8 <RadioSend+0x1e4>)
 8017be2:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8017be6:	2101      	movs	r1, #1
 8017be8:	4618      	mov	r0, r3
 8017bea:	f002 f9d9 	bl	8019fa0 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 8017bee:	4b6e      	ldr	r3, [pc, #440]	@ (8017da8 <RadioSend+0x1e4>)
 8017bf0:	781b      	ldrb	r3, [r3, #0]
 8017bf2:	2b01      	cmp	r3, #1
 8017bf4:	d112      	bne.n	8017c1c <RadioSend+0x58>
 8017bf6:	4b6c      	ldr	r3, [pc, #432]	@ (8017da8 <RadioSend+0x1e4>)
 8017bf8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8017bfc:	2b06      	cmp	r3, #6
 8017bfe:	d10d      	bne.n	8017c1c <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8017c00:	f640 0089 	movw	r0, #2185	@ 0x889
 8017c04:	f002 f8ec 	bl	8019de0 <SUBGRF_ReadRegister>
 8017c08:	4603      	mov	r3, r0
 8017c0a:	f023 0304 	bic.w	r3, r3, #4
 8017c0e:	b2db      	uxtb	r3, r3
 8017c10:	4619      	mov	r1, r3
 8017c12:	f640 0089 	movw	r0, #2185	@ 0x889
 8017c16:	f002 f8cf 	bl	8019db8 <SUBGRF_WriteRegister>
 8017c1a:	e00c      	b.n	8017c36 <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8017c1c:	f640 0089 	movw	r0, #2185	@ 0x889
 8017c20:	f002 f8de 	bl	8019de0 <SUBGRF_ReadRegister>
 8017c24:	4603      	mov	r3, r0
 8017c26:	f043 0304 	orr.w	r3, r3, #4
 8017c2a:	b2db      	uxtb	r3, r3
 8017c2c:	4619      	mov	r1, r3
 8017c2e:	f640 0089 	movw	r0, #2185	@ 0x889
 8017c32:	f002 f8c1 	bl	8019db8 <SUBGRF_WriteRegister>
    }
    /* WORKAROUND END */
    switch( SubgRf.Modem )
 8017c36:	4b5c      	ldr	r3, [pc, #368]	@ (8017da8 <RadioSend+0x1e4>)
 8017c38:	781b      	ldrb	r3, [r3, #0]
 8017c3a:	2b04      	cmp	r3, #4
 8017c3c:	f200 80a7 	bhi.w	8017d8e <RadioSend+0x1ca>
 8017c40:	a201      	add	r2, pc, #4	@ (adr r2, 8017c48 <RadioSend+0x84>)
 8017c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017c46:	bf00      	nop
 8017c48:	08017c77 	.word	0x08017c77
 8017c4c:	08017c5d 	.word	0x08017c5d
 8017c50:	08017c77 	.word	0x08017c77
 8017c54:	08017cd7 	.word	0x08017cd7
 8017c58:	08017cf7 	.word	0x08017cf7
    {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8017c5c:	4a52      	ldr	r2, [pc, #328]	@ (8017da8 <RadioSend+0x1e4>)
 8017c5e:	78fb      	ldrb	r3, [r7, #3]
 8017c60:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017c62:	4852      	ldr	r0, [pc, #328]	@ (8017dac <RadioSend+0x1e8>)
 8017c64:	f001 ff62 	bl	8019b2c <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8017c68:	78fb      	ldrb	r3, [r7, #3]
 8017c6a:	2200      	movs	r2, #0
 8017c6c:	4619      	mov	r1, r3
 8017c6e:	6878      	ldr	r0, [r7, #4]
 8017c70:	f001 fa12 	bl	8019098 <SUBGRF_SendPayload>
            break;
 8017c74:	e08c      	b.n	8017d90 <RadioSend+0x1cc>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 8017c76:	f002 fb7c 	bl	801a372 <RFW_Is_Init>
 8017c7a:	4603      	mov	r3, r0
 8017c7c:	2b01      	cmp	r3, #1
 8017c7e:	d11d      	bne.n	8017cbc <RadioSend+0xf8>
            {
              uint8_t outsize;
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8017c80:	f107 020d 	add.w	r2, r7, #13
 8017c84:	78fb      	ldrb	r3, [r7, #3]
 8017c86:	4619      	mov	r1, r3
 8017c88:	6878      	ldr	r0, [r7, #4]
 8017c8a:	f002 fb8a 	bl	801a3a2 <RFW_TransmitInit>
 8017c8e:	4603      	mov	r3, r0
 8017c90:	2b00      	cmp	r3, #0
 8017c92:	d10c      	bne.n	8017cae <RadioSend+0xea>
              {
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8017c94:	7b7a      	ldrb	r2, [r7, #13]
 8017c96:	4b44      	ldr	r3, [pc, #272]	@ (8017da8 <RadioSend+0x1e4>)
 8017c98:	759a      	strb	r2, [r3, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017c9a:	4844      	ldr	r0, [pc, #272]	@ (8017dac <RadioSend+0x1e8>)
 8017c9c:	f001 ff46 	bl	8019b2c <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 8017ca0:	7b7b      	ldrb	r3, [r7, #13]
 8017ca2:	2200      	movs	r2, #0
 8017ca4:	4619      	mov	r1, r3
 8017ca6:	6878      	ldr	r0, [r7, #4]
 8017ca8:	f001 f9f6 	bl	8019098 <SUBGRF_SendPayload>
            {
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
              SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 8017cac:	e070      	b.n	8017d90 <RadioSend+0x1cc>
                MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n");
 8017cae:	4b40      	ldr	r3, [pc, #256]	@ (8017db0 <RadioSend+0x1ec>)
 8017cb0:	2201      	movs	r2, #1
 8017cb2:	2100      	movs	r1, #0
 8017cb4:	2002      	movs	r0, #2
 8017cb6:	f003 fc93 	bl	801b5e0 <UTIL_ADV_TRACE_COND_FSend>
 8017cba:	e072      	b.n	8017da2 <RadioSend+0x1de>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8017cbc:	4a3a      	ldr	r2, [pc, #232]	@ (8017da8 <RadioSend+0x1e4>)
 8017cbe:	78fb      	ldrb	r3, [r7, #3]
 8017cc0:	7593      	strb	r3, [r2, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017cc2:	483a      	ldr	r0, [pc, #232]	@ (8017dac <RadioSend+0x1e8>)
 8017cc4:	f001 ff32 	bl	8019b2c <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 8017cc8:	78fb      	ldrb	r3, [r7, #3]
 8017cca:	2200      	movs	r2, #0
 8017ccc:	4619      	mov	r1, r3
 8017cce:	6878      	ldr	r0, [r7, #4]
 8017cd0:	f001 f9e2 	bl	8019098 <SUBGRF_SendPayload>
            break;
 8017cd4:	e05c      	b.n	8017d90 <RadioSend+0x1cc>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8017cd6:	4b34      	ldr	r3, [pc, #208]	@ (8017da8 <RadioSend+0x1e4>)
 8017cd8:	2202      	movs	r2, #2
 8017cda:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8017cdc:	4a32      	ldr	r2, [pc, #200]	@ (8017da8 <RadioSend+0x1e4>)
 8017cde:	78fb      	ldrb	r3, [r7, #3]
 8017ce0:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017ce2:	4832      	ldr	r0, [pc, #200]	@ (8017dac <RadioSend+0x1e8>)
 8017ce4:	f001 ff22 	bl	8019b2c <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8017ce8:	78fb      	ldrb	r3, [r7, #3]
 8017cea:	2200      	movs	r2, #0
 8017cec:	4619      	mov	r1, r3
 8017cee:	6878      	ldr	r0, [r7, #4]
 8017cf0:	f001 f9d2 	bl	8019098 <SUBGRF_SendPayload>
            break;
 8017cf4:	e04c      	b.n	8017d90 <RadioSend+0x1cc>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 8017cf6:	78fb      	ldrb	r3, [r7, #3]
 8017cf8:	461a      	mov	r2, r3
 8017cfa:	6879      	ldr	r1, [r7, #4]
 8017cfc:	482d      	ldr	r0, [pc, #180]	@ (8017db4 <RadioSend+0x1f0>)
 8017cfe:	f000 fcbc 	bl	801867a <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8017d02:	4b29      	ldr	r3, [pc, #164]	@ (8017da8 <RadioSend+0x1e4>)
 8017d04:	2202      	movs	r2, #2
 8017d06:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8017d08:	78fb      	ldrb	r3, [r7, #3]
 8017d0a:	3301      	adds	r3, #1
 8017d0c:	b2da      	uxtb	r2, r3
 8017d0e:	4b26      	ldr	r3, [pc, #152]	@ (8017da8 <RadioSend+0x1e4>)
 8017d10:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017d12:	4826      	ldr	r0, [pc, #152]	@ (8017dac <RadioSend+0x1e8>)
 8017d14:	f001 ff0a 	bl	8019b2c <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 8017d18:	2100      	movs	r1, #0
 8017d1a:	20f1      	movs	r0, #241	@ 0xf1
 8017d1c:	f000 f95c 	bl	8017fd8 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 8017d20:	2100      	movs	r1, #0
 8017d22:	20f0      	movs	r0, #240	@ 0xf0
 8017d24:	f000 f958 	bl	8017fd8 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8017d28:	4b1f      	ldr	r3, [pc, #124]	@ (8017da8 <RadioSend+0x1e4>)
 8017d2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8017d2c:	2b64      	cmp	r3, #100	@ 0x64
 8017d2e:	d108      	bne.n	8017d42 <RadioSend+0x17e>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 8017d30:	2170      	movs	r1, #112	@ 0x70
 8017d32:	20f3      	movs	r0, #243	@ 0xf3
 8017d34:	f000 f950 	bl	8017fd8 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 8017d38:	211d      	movs	r1, #29
 8017d3a:	20f2      	movs	r0, #242	@ 0xf2
 8017d3c:	f000 f94c 	bl	8017fd8 <RadioWrite>
 8017d40:	e007      	b.n	8017d52 <RadioSend+0x18e>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 8017d42:	21e1      	movs	r1, #225	@ 0xe1
 8017d44:	20f3      	movs	r0, #243	@ 0xf3
 8017d46:	f000 f947 	bl	8017fd8 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 8017d4a:	2104      	movs	r1, #4
 8017d4c:	20f2      	movs	r0, #242	@ 0xf2
 8017d4e:	f000 f943 	bl	8017fd8 <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 8017d52:	78fb      	ldrb	r3, [r7, #3]
 8017d54:	b29b      	uxth	r3, r3
 8017d56:	00db      	lsls	r3, r3, #3
 8017d58:	b29b      	uxth	r3, r3
 8017d5a:	3302      	adds	r3, #2
 8017d5c:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 8017d5e:	89fb      	ldrh	r3, [r7, #14]
 8017d60:	0a1b      	lsrs	r3, r3, #8
 8017d62:	b29b      	uxth	r3, r3
 8017d64:	b2db      	uxtb	r3, r3
 8017d66:	4619      	mov	r1, r3
 8017d68:	20f4      	movs	r0, #244	@ 0xf4
 8017d6a:	f000 f935 	bl	8017fd8 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 8017d6e:	89fb      	ldrh	r3, [r7, #14]
 8017d70:	b2db      	uxtb	r3, r3
 8017d72:	4619      	mov	r1, r3
 8017d74:	20f5      	movs	r0, #245	@ 0xf5
 8017d76:	f000 f92f 	bl	8017fd8 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size+1 , 0xFFFFFF );
 8017d7a:	78fb      	ldrb	r3, [r7, #3]
 8017d7c:	3301      	adds	r3, #1
 8017d7e:	b2db      	uxtb	r3, r3
 8017d80:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8017d84:	4619      	mov	r1, r3
 8017d86:	480b      	ldr	r0, [pc, #44]	@ (8017db4 <RadioSend+0x1f0>)
 8017d88:	f001 f986 	bl	8019098 <SUBGRF_SendPayload>
            break;
 8017d8c:	e000      	b.n	8017d90 <RadioSend+0x1cc>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8017d8e:	bf00      	nop
    }

    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8017d90:	4b05      	ldr	r3, [pc, #20]	@ (8017da8 <RadioSend+0x1e4>)
 8017d92:	685b      	ldr	r3, [r3, #4]
 8017d94:	4619      	mov	r1, r3
 8017d96:	4808      	ldr	r0, [pc, #32]	@ (8017db8 <RadioSend+0x1f4>)
 8017d98:	f003 fa88 	bl	801b2ac <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8017d9c:	4806      	ldr	r0, [pc, #24]	@ (8017db8 <RadioSend+0x1f4>)
 8017d9e:	f003 f9a7 	bl	801b0f0 <UTIL_TIMER_Start>
}
 8017da2:	3710      	adds	r7, #16
 8017da4:	46bd      	mov	sp, r7
 8017da6:	bd80      	pop	{r7, pc}
 8017da8:	20001cd8 	.word	0x20001cd8
 8017dac:	20001ce6 	.word	0x20001ce6
 8017db0:	0801eea0 	.word	0x0801eea0
 8017db4:	20001bd4 	.word	0x20001bd4
 8017db8:	20001d34 	.word	0x20001d34

08017dbc <RadioSleep>:

static void RadioSleep( void )
{
 8017dbc:	b580      	push	{r7, lr}
 8017dbe:	b082      	sub	sp, #8
 8017dc0:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 8017dc2:	2300      	movs	r3, #0
 8017dc4:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 8017dc6:	793b      	ldrb	r3, [r7, #4]
 8017dc8:	f043 0304 	orr.w	r3, r3, #4
 8017dcc:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 8017dce:	7938      	ldrb	r0, [r7, #4]
 8017dd0:	f001 fa3e 	bl	8019250 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 8017dd4:	2002      	movs	r0, #2
 8017dd6:	f7ea fa09 	bl	80021ec <HAL_Delay>
}
 8017dda:	bf00      	nop
 8017ddc:	3708      	adds	r7, #8
 8017dde:	46bd      	mov	sp, r7
 8017de0:	bd80      	pop	{r7, pc}

08017de2 <RadioStandby>:

static void RadioStandby( void )
{
 8017de2:	b580      	push	{r7, lr}
 8017de4:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 8017de6:	2000      	movs	r0, #0
 8017de8:	f001 fa66 	bl	80192b8 <SUBGRF_SetStandby>
}
 8017dec:	bf00      	nop
 8017dee:	bd80      	pop	{r7, pc}

08017df0 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 8017df0:	b580      	push	{r7, lr}
 8017df2:	b082      	sub	sp, #8
 8017df4:	af00      	add	r7, sp, #0
 8017df6:	6078      	str	r0, [r7, #4]
    if( 1UL == RFW_Is_Init( ) )
 8017df8:	f002 fabb 	bl	801a372 <RFW_Is_Init>
 8017dfc:	4603      	mov	r3, r0
 8017dfe:	2b01      	cmp	r3, #1
 8017e00:	d102      	bne.n	8017e08 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 8017e02:	f002 fade 	bl	801a3c2 <RFW_ReceiveInit>
 8017e06:	e007      	b.n	8017e18 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8017e08:	2300      	movs	r3, #0
 8017e0a:	2200      	movs	r2, #0
 8017e0c:	f240 2162 	movw	r1, #610	@ 0x262
 8017e10:	f240 2062 	movw	r0, #610	@ 0x262
 8017e14:	f001 fc26 	bl	8019664 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 8017e18:	687b      	ldr	r3, [r7, #4]
 8017e1a:	2b00      	cmp	r3, #0
 8017e1c:	d006      	beq.n	8017e2c <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8017e1e:	6879      	ldr	r1, [r7, #4]
 8017e20:	4811      	ldr	r0, [pc, #68]	@ (8017e68 <RadioRx+0x78>)
 8017e22:	f003 fa43 	bl	801b2ac <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8017e26:	4810      	ldr	r0, [pc, #64]	@ (8017e68 <RadioRx+0x78>)
 8017e28:	f003 f962 	bl	801b0f0 <UTIL_TIMER_Start>
    }
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8017e2c:	4b0f      	ldr	r3, [pc, #60]	@ (8017e6c <RadioRx+0x7c>)
 8017e2e:	2200      	movs	r2, #0
 8017e30:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8017e32:	4b0e      	ldr	r3, [pc, #56]	@ (8017e6c <RadioRx+0x7c>)
 8017e34:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8017e38:	2100      	movs	r1, #0
 8017e3a:	4618      	mov	r0, r3
 8017e3c:	f002 f8b0 	bl	8019fa0 <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 8017e40:	4b0a      	ldr	r3, [pc, #40]	@ (8017e6c <RadioRx+0x7c>)
 8017e42:	785b      	ldrb	r3, [r3, #1]
 8017e44:	2b00      	cmp	r3, #0
 8017e46:	d004      	beq.n	8017e52 <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8017e48:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8017e4c:	f001 fa70 	bl	8019330 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8017e50:	e005      	b.n	8017e5e <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8017e52:	4b06      	ldr	r3, [pc, #24]	@ (8017e6c <RadioRx+0x7c>)
 8017e54:	689b      	ldr	r3, [r3, #8]
 8017e56:	019b      	lsls	r3, r3, #6
 8017e58:	4618      	mov	r0, r3
 8017e5a:	f001 fa69 	bl	8019330 <SUBGRF_SetRx>
}
 8017e5e:	bf00      	nop
 8017e60:	3708      	adds	r7, #8
 8017e62:	46bd      	mov	sp, r7
 8017e64:	bd80      	pop	{r7, pc}
 8017e66:	bf00      	nop
 8017e68:	20001d4c 	.word	0x20001d4c
 8017e6c:	20001cd8 	.word	0x20001cd8

08017e70 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 8017e70:	b580      	push	{r7, lr}
 8017e72:	b082      	sub	sp, #8
 8017e74:	af00      	add	r7, sp, #0
 8017e76:	6078      	str	r0, [r7, #4]
    if( 1UL == RFW_Is_Init() )
 8017e78:	f002 fa7b 	bl	801a372 <RFW_Is_Init>
 8017e7c:	4603      	mov	r3, r0
 8017e7e:	2b01      	cmp	r3, #1
 8017e80:	d102      	bne.n	8017e88 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 8017e82:	f002 fa9e 	bl	801a3c2 <RFW_ReceiveInit>
 8017e86:	e007      	b.n	8017e98 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8017e88:	2300      	movs	r3, #0
 8017e8a:	2200      	movs	r2, #0
 8017e8c:	f240 2162 	movw	r1, #610	@ 0x262
 8017e90:	f240 2062 	movw	r0, #610	@ 0x262
 8017e94:	f001 fbe6 	bl	8019664 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 8017e98:	687b      	ldr	r3, [r7, #4]
 8017e9a:	2b00      	cmp	r3, #0
 8017e9c:	d006      	beq.n	8017eac <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8017e9e:	6879      	ldr	r1, [r7, #4]
 8017ea0:	4811      	ldr	r0, [pc, #68]	@ (8017ee8 <RadioRxBoosted+0x78>)
 8017ea2:	f003 fa03 	bl	801b2ac <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8017ea6:	4810      	ldr	r0, [pc, #64]	@ (8017ee8 <RadioRxBoosted+0x78>)
 8017ea8:	f003 f922 	bl	801b0f0 <UTIL_TIMER_Start>
    }
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8017eac:	4b0f      	ldr	r3, [pc, #60]	@ (8017eec <RadioRxBoosted+0x7c>)
 8017eae:	2200      	movs	r2, #0
 8017eb0:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8017eb2:	4b0e      	ldr	r3, [pc, #56]	@ (8017eec <RadioRxBoosted+0x7c>)
 8017eb4:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8017eb8:	2100      	movs	r1, #0
 8017eba:	4618      	mov	r0, r3
 8017ebc:	f002 f870 	bl	8019fa0 <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 8017ec0:	4b0a      	ldr	r3, [pc, #40]	@ (8017eec <RadioRxBoosted+0x7c>)
 8017ec2:	785b      	ldrb	r3, [r3, #1]
 8017ec4:	2b00      	cmp	r3, #0
 8017ec6:	d004      	beq.n	8017ed2 <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8017ec8:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8017ecc:	f001 fa50 	bl	8019370 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 8017ed0:	e005      	b.n	8017ede <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8017ed2:	4b06      	ldr	r3, [pc, #24]	@ (8017eec <RadioRxBoosted+0x7c>)
 8017ed4:	689b      	ldr	r3, [r3, #8]
 8017ed6:	019b      	lsls	r3, r3, #6
 8017ed8:	4618      	mov	r0, r3
 8017eda:	f001 fa49 	bl	8019370 <SUBGRF_SetRxBoosted>
}
 8017ede:	bf00      	nop
 8017ee0:	3708      	adds	r7, #8
 8017ee2:	46bd      	mov	sp, r7
 8017ee4:	bd80      	pop	{r7, pc}
 8017ee6:	bf00      	nop
 8017ee8:	20001d4c 	.word	0x20001d4c
 8017eec:	20001cd8 	.word	0x20001cd8

08017ef0 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8017ef0:	b580      	push	{r7, lr}
 8017ef2:	b082      	sub	sp, #8
 8017ef4:	af00      	add	r7, sp, #0
 8017ef6:	6078      	str	r0, [r7, #4]
 8017ef8:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 8017efa:	687b      	ldr	r3, [r7, #4]
 8017efc:	005a      	lsls	r2, r3, #1
 8017efe:	683b      	ldr	r3, [r7, #0]
 8017f00:	4413      	add	r3, r2
 8017f02:	4a0c      	ldr	r2, [pc, #48]	@ (8017f34 <RadioSetRxDutyCycle+0x44>)
 8017f04:	6593      	str	r3, [r2, #88]	@ 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8017f06:	2300      	movs	r3, #0
 8017f08:	2200      	movs	r2, #0
 8017f0a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8017f0e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8017f12:	f001 fba7 	bl	8019664 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8017f16:	4b07      	ldr	r3, [pc, #28]	@ (8017f34 <RadioSetRxDutyCycle+0x44>)
 8017f18:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8017f1c:	2100      	movs	r1, #0
 8017f1e:	4618      	mov	r0, r3
 8017f20:	f002 f83e 	bl	8019fa0 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8017f24:	6839      	ldr	r1, [r7, #0]
 8017f26:	6878      	ldr	r0, [r7, #4]
 8017f28:	f001 fa46 	bl	80193b8 <SUBGRF_SetRxDutyCycle>
}
 8017f2c:	bf00      	nop
 8017f2e:	3708      	adds	r7, #8
 8017f30:	46bd      	mov	sp, r7
 8017f32:	bd80      	pop	{r7, pc}
 8017f34:	20001cd8 	.word	0x20001cd8

08017f38 <RadioStartCad>:

static void RadioStartCad( void )
{
 8017f38:	b580      	push	{r7, lr}
 8017f3a:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8017f3c:	4b09      	ldr	r3, [pc, #36]	@ (8017f64 <RadioStartCad+0x2c>)
 8017f3e:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8017f42:	2100      	movs	r1, #0
 8017f44:	4618      	mov	r0, r3
 8017f46:	f002 f82b 	bl	8019fa0 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8017f4a:	2300      	movs	r3, #0
 8017f4c:	2200      	movs	r2, #0
 8017f4e:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8017f52:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 8017f56:	f001 fb85 	bl	8019664 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 8017f5a:	f001 fa59 	bl	8019410 <SUBGRF_SetCad>
}
 8017f5e:	bf00      	nop
 8017f60:	bd80      	pop	{r7, pc}
 8017f62:	bf00      	nop
 8017f64:	20001cd8 	.word	0x20001cd8

08017f68 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8017f68:	b580      	push	{r7, lr}
 8017f6a:	b084      	sub	sp, #16
 8017f6c:	af00      	add	r7, sp, #0
 8017f6e:	6078      	str	r0, [r7, #4]
 8017f70:	460b      	mov	r3, r1
 8017f72:	70fb      	strb	r3, [r7, #3]
 8017f74:	4613      	mov	r3, r2
 8017f76:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 8017f78:	883b      	ldrh	r3, [r7, #0]
 8017f7a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8017f7e:	fb02 f303 	mul.w	r3, r2, r3
 8017f82:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8017f84:	6878      	ldr	r0, [r7, #4]
 8017f86:	f001 fbc9 	bl	801971c <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 8017f8a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8017f8e:	4618      	mov	r0, r3
 8017f90:	f002 f82e 	bl	8019ff0 <SUBGRF_SetRfTxPower>
 8017f94:	4603      	mov	r3, r0
 8017f96:	72fb      	strb	r3, [r7, #11]

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 8017f98:	7afb      	ldrb	r3, [r7, #11]
 8017f9a:	2101      	movs	r1, #1
 8017f9c:	4618      	mov	r0, r3
 8017f9e:	f001 ffff 	bl	8019fa0 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 8017fa2:	f001 fa43 	bl	801942c <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8017fa6:	68f9      	ldr	r1, [r7, #12]
 8017fa8:	4804      	ldr	r0, [pc, #16]	@ (8017fbc <RadioSetTxContinuousWave+0x54>)
 8017faa:	f003 f97f 	bl	801b2ac <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8017fae:	4803      	ldr	r0, [pc, #12]	@ (8017fbc <RadioSetTxContinuousWave+0x54>)
 8017fb0:	f003 f89e 	bl	801b0f0 <UTIL_TIMER_Start>
}
 8017fb4:	bf00      	nop
 8017fb6:	3710      	adds	r7, #16
 8017fb8:	46bd      	mov	sp, r7
 8017fba:	bd80      	pop	{r7, pc}
 8017fbc:	20001d34 	.word	0x20001d34

08017fc0 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 8017fc0:	b580      	push	{r7, lr}
 8017fc2:	b082      	sub	sp, #8
 8017fc4:	af00      	add	r7, sp, #0
 8017fc6:	4603      	mov	r3, r0
 8017fc8:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 8017fca:	f001 fe62 	bl	8019c92 <SUBGRF_GetRssiInst>
 8017fce:	4603      	mov	r3, r0
}
 8017fd0:	4618      	mov	r0, r3
 8017fd2:	3708      	adds	r7, #8
 8017fd4:	46bd      	mov	sp, r7
 8017fd6:	bd80      	pop	{r7, pc}

08017fd8 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 8017fd8:	b580      	push	{r7, lr}
 8017fda:	b082      	sub	sp, #8
 8017fdc:	af00      	add	r7, sp, #0
 8017fde:	4603      	mov	r3, r0
 8017fe0:	460a      	mov	r2, r1
 8017fe2:	80fb      	strh	r3, [r7, #6]
 8017fe4:	4613      	mov	r3, r2
 8017fe6:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 8017fe8:	797a      	ldrb	r2, [r7, #5]
 8017fea:	88fb      	ldrh	r3, [r7, #6]
 8017fec:	4611      	mov	r1, r2
 8017fee:	4618      	mov	r0, r3
 8017ff0:	f001 fee2 	bl	8019db8 <SUBGRF_WriteRegister>
}
 8017ff4:	bf00      	nop
 8017ff6:	3708      	adds	r7, #8
 8017ff8:	46bd      	mov	sp, r7
 8017ffa:	bd80      	pop	{r7, pc}

08017ffc <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 8017ffc:	b580      	push	{r7, lr}
 8017ffe:	b082      	sub	sp, #8
 8018000:	af00      	add	r7, sp, #0
 8018002:	4603      	mov	r3, r0
 8018004:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 8018006:	88fb      	ldrh	r3, [r7, #6]
 8018008:	4618      	mov	r0, r3
 801800a:	f001 fee9 	bl	8019de0 <SUBGRF_ReadRegister>
 801800e:	4603      	mov	r3, r0
}
 8018010:	4618      	mov	r0, r3
 8018012:	3708      	adds	r7, #8
 8018014:	46bd      	mov	sp, r7
 8018016:	bd80      	pop	{r7, pc}

08018018 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8018018:	b580      	push	{r7, lr}
 801801a:	b082      	sub	sp, #8
 801801c:	af00      	add	r7, sp, #0
 801801e:	4603      	mov	r3, r0
 8018020:	6039      	str	r1, [r7, #0]
 8018022:	80fb      	strh	r3, [r7, #6]
 8018024:	4613      	mov	r3, r2
 8018026:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 8018028:	797b      	ldrb	r3, [r7, #5]
 801802a:	b29a      	uxth	r2, r3
 801802c:	88fb      	ldrh	r3, [r7, #6]
 801802e:	6839      	ldr	r1, [r7, #0]
 8018030:	4618      	mov	r0, r3
 8018032:	f001 fee9 	bl	8019e08 <SUBGRF_WriteRegisters>
}
 8018036:	bf00      	nop
 8018038:	3708      	adds	r7, #8
 801803a:	46bd      	mov	sp, r7
 801803c:	bd80      	pop	{r7, pc}

0801803e <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 801803e:	b580      	push	{r7, lr}
 8018040:	b082      	sub	sp, #8
 8018042:	af00      	add	r7, sp, #0
 8018044:	4603      	mov	r3, r0
 8018046:	6039      	str	r1, [r7, #0]
 8018048:	80fb      	strh	r3, [r7, #6]
 801804a:	4613      	mov	r3, r2
 801804c:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 801804e:	797b      	ldrb	r3, [r7, #5]
 8018050:	b29a      	uxth	r2, r3
 8018052:	88fb      	ldrh	r3, [r7, #6]
 8018054:	6839      	ldr	r1, [r7, #0]
 8018056:	4618      	mov	r0, r3
 8018058:	f001 fef8 	bl	8019e4c <SUBGRF_ReadRegisters>
}
 801805c:	bf00      	nop
 801805e:	3708      	adds	r7, #8
 8018060:	46bd      	mov	sp, r7
 8018062:	bd80      	pop	{r7, pc}

08018064 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8018064:	b580      	push	{r7, lr}
 8018066:	b082      	sub	sp, #8
 8018068:	af00      	add	r7, sp, #0
 801806a:	4603      	mov	r3, r0
 801806c:	460a      	mov	r2, r1
 801806e:	71fb      	strb	r3, [r7, #7]
 8018070:	4613      	mov	r3, r2
 8018072:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8018074:	79fb      	ldrb	r3, [r7, #7]
 8018076:	2b01      	cmp	r3, #1
 8018078:	d10a      	bne.n	8018090 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 801807a:	4a0e      	ldr	r2, [pc, #56]	@ (80180b4 <RadioSetMaxPayloadLength+0x50>)
 801807c:	79bb      	ldrb	r3, [r7, #6]
 801807e:	7013      	strb	r3, [r2, #0]
 8018080:	4b0c      	ldr	r3, [pc, #48]	@ (80180b4 <RadioSetMaxPayloadLength+0x50>)
 8018082:	781a      	ldrb	r2, [r3, #0]
 8018084:	4b0c      	ldr	r3, [pc, #48]	@ (80180b8 <RadioSetMaxPayloadLength+0x54>)
 8018086:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018088:	480c      	ldr	r0, [pc, #48]	@ (80180bc <RadioSetMaxPayloadLength+0x58>)
 801808a:	f001 fd4f 	bl	8019b2c <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 801808e:	e00d      	b.n	80180ac <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8018090:	4b09      	ldr	r3, [pc, #36]	@ (80180b8 <RadioSetMaxPayloadLength+0x54>)
 8018092:	7d5b      	ldrb	r3, [r3, #21]
 8018094:	2b01      	cmp	r3, #1
 8018096:	d109      	bne.n	80180ac <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8018098:	4a06      	ldr	r2, [pc, #24]	@ (80180b4 <RadioSetMaxPayloadLength+0x50>)
 801809a:	79bb      	ldrb	r3, [r7, #6]
 801809c:	7013      	strb	r3, [r2, #0]
 801809e:	4b05      	ldr	r3, [pc, #20]	@ (80180b4 <RadioSetMaxPayloadLength+0x50>)
 80180a0:	781a      	ldrb	r2, [r3, #0]
 80180a2:	4b05      	ldr	r3, [pc, #20]	@ (80180b8 <RadioSetMaxPayloadLength+0x54>)
 80180a4:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80180a6:	4805      	ldr	r0, [pc, #20]	@ (80180bc <RadioSetMaxPayloadLength+0x58>)
 80180a8:	f001 fd40 	bl	8019b2c <SUBGRF_SetPacketParams>
}
 80180ac:	bf00      	nop
 80180ae:	3708      	adds	r7, #8
 80180b0:	46bd      	mov	sp, r7
 80180b2:	bd80      	pop	{r7, pc}
 80180b4:	2000012c 	.word	0x2000012c
 80180b8:	20001cd8 	.word	0x20001cd8
 80180bc:	20001ce6 	.word	0x20001ce6

080180c0 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 80180c0:	b580      	push	{r7, lr}
 80180c2:	b082      	sub	sp, #8
 80180c4:	af00      	add	r7, sp, #0
 80180c6:	4603      	mov	r3, r0
 80180c8:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 80180ca:	4a13      	ldr	r2, [pc, #76]	@ (8018118 <RadioSetPublicNetwork+0x58>)
 80180cc:	79fb      	ldrb	r3, [r7, #7]
 80180ce:	7313      	strb	r3, [r2, #12]
 80180d0:	4b11      	ldr	r3, [pc, #68]	@ (8018118 <RadioSetPublicNetwork+0x58>)
 80180d2:	7b1a      	ldrb	r2, [r3, #12]
 80180d4:	4b10      	ldr	r3, [pc, #64]	@ (8018118 <RadioSetPublicNetwork+0x58>)
 80180d6:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 80180d8:	2001      	movs	r0, #1
 80180da:	f7ff f82f 	bl	801713c <RadioSetModem>
    if( enable == true )
 80180de:	79fb      	ldrb	r3, [r7, #7]
 80180e0:	2b00      	cmp	r3, #0
 80180e2:	d00a      	beq.n	80180fa <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 80180e4:	2134      	movs	r1, #52	@ 0x34
 80180e6:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 80180ea:	f001 fe65 	bl	8019db8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 80180ee:	2144      	movs	r1, #68	@ 0x44
 80180f0:	f240 7041 	movw	r0, #1857	@ 0x741
 80180f4:	f001 fe60 	bl	8019db8 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 80180f8:	e009      	b.n	801810e <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 80180fa:	2114      	movs	r1, #20
 80180fc:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 8018100:	f001 fe5a 	bl	8019db8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8018104:	2124      	movs	r1, #36	@ 0x24
 8018106:	f240 7041 	movw	r0, #1857	@ 0x741
 801810a:	f001 fe55 	bl	8019db8 <SUBGRF_WriteRegister>
}
 801810e:	bf00      	nop
 8018110:	3708      	adds	r7, #8
 8018112:	46bd      	mov	sp, r7
 8018114:	bd80      	pop	{r7, pc}
 8018116:	bf00      	nop
 8018118:	20001cd8 	.word	0x20001cd8

0801811c <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 801811c:	b580      	push	{r7, lr}
 801811e:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8018120:	f001 ff9a 	bl	801a058 <SUBGRF_GetRadioWakeUpTime>
 8018124:	4603      	mov	r3, r0
 8018126:	3303      	adds	r3, #3
}
 8018128:	4618      	mov	r0, r3
 801812a:	bd80      	pop	{r7, pc}

0801812c <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 801812c:	b580      	push	{r7, lr}
 801812e:	b082      	sub	sp, #8
 8018130:	af00      	add	r7, sp, #0
 8018132:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 8018134:	f000 f80e 	bl	8018154 <RadioOnTxTimeoutProcess>
}
 8018138:	bf00      	nop
 801813a:	3708      	adds	r7, #8
 801813c:	46bd      	mov	sp, r7
 801813e:	bd80      	pop	{r7, pc}

08018140 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 8018140:	b580      	push	{r7, lr}
 8018142:	b082      	sub	sp, #8
 8018144:	af00      	add	r7, sp, #0
 8018146:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 8018148:	f000 f818 	bl	801817c <RadioOnRxTimeoutProcess>
}
 801814c:	bf00      	nop
 801814e:	3708      	adds	r7, #8
 8018150:	46bd      	mov	sp, r7
 8018152:	bd80      	pop	{r7, pc}

08018154 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 8018154:	b580      	push	{r7, lr}
 8018156:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8018158:	4b07      	ldr	r3, [pc, #28]	@ (8018178 <RadioOnTxTimeoutProcess+0x24>)
 801815a:	681b      	ldr	r3, [r3, #0]
 801815c:	2b00      	cmp	r3, #0
 801815e:	d008      	beq.n	8018172 <RadioOnTxTimeoutProcess+0x1e>
 8018160:	4b05      	ldr	r3, [pc, #20]	@ (8018178 <RadioOnTxTimeoutProcess+0x24>)
 8018162:	681b      	ldr	r3, [r3, #0]
 8018164:	685b      	ldr	r3, [r3, #4]
 8018166:	2b00      	cmp	r3, #0
 8018168:	d003      	beq.n	8018172 <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 801816a:	4b03      	ldr	r3, [pc, #12]	@ (8018178 <RadioOnTxTimeoutProcess+0x24>)
 801816c:	681b      	ldr	r3, [r3, #0]
 801816e:	685b      	ldr	r3, [r3, #4]
 8018170:	4798      	blx	r3
    }
}
 8018172:	bf00      	nop
 8018174:	bd80      	pop	{r7, pc}
 8018176:	bf00      	nop
 8018178:	20001cd4 	.word	0x20001cd4

0801817c <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 801817c:	b580      	push	{r7, lr}
 801817e:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8018180:	4b07      	ldr	r3, [pc, #28]	@ (80181a0 <RadioOnRxTimeoutProcess+0x24>)
 8018182:	681b      	ldr	r3, [r3, #0]
 8018184:	2b00      	cmp	r3, #0
 8018186:	d008      	beq.n	801819a <RadioOnRxTimeoutProcess+0x1e>
 8018188:	4b05      	ldr	r3, [pc, #20]	@ (80181a0 <RadioOnRxTimeoutProcess+0x24>)
 801818a:	681b      	ldr	r3, [r3, #0]
 801818c:	68db      	ldr	r3, [r3, #12]
 801818e:	2b00      	cmp	r3, #0
 8018190:	d003      	beq.n	801819a <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 8018192:	4b03      	ldr	r3, [pc, #12]	@ (80181a0 <RadioOnRxTimeoutProcess+0x24>)
 8018194:	681b      	ldr	r3, [r3, #0]
 8018196:	68db      	ldr	r3, [r3, #12]
 8018198:	4798      	blx	r3
    }
}
 801819a:	bf00      	nop
 801819c:	bd80      	pop	{r7, pc}
 801819e:	bf00      	nop
 80181a0:	20001cd4 	.word	0x20001cd4

080181a4 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 80181a4:	b580      	push	{r7, lr}
 80181a6:	b082      	sub	sp, #8
 80181a8:	af00      	add	r7, sp, #0
 80181aa:	4603      	mov	r3, r0
 80181ac:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 80181ae:	4a05      	ldr	r2, [pc, #20]	@ (80181c4 <RadioOnDioIrq+0x20>)
 80181b0:	88fb      	ldrh	r3, [r7, #6]
 80181b2:	f8a2 3054 	strh.w	r3, [r2, #84]	@ 0x54

    RADIO_IRQ_PROCESS();
 80181b6:	f000 f807 	bl	80181c8 <RadioIrqProcess>
}
 80181ba:	bf00      	nop
 80181bc:	3708      	adds	r7, #8
 80181be:	46bd      	mov	sp, r7
 80181c0:	bd80      	pop	{r7, pc}
 80181c2:	bf00      	nop
 80181c4:	20001cd8 	.word	0x20001cd8

080181c8 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 80181c8:	b5b0      	push	{r4, r5, r7, lr}
 80181ca:	b082      	sub	sp, #8
 80181cc:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 80181ce:	2300      	movs	r3, #0
 80181d0:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 80181d2:	2300      	movs	r3, #0
 80181d4:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 80181d6:	4ba8      	ldr	r3, [pc, #672]	@ (8018478 <RadioIrqProcess+0x2b0>)
 80181d8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80181dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80181e0:	f000 810d 	beq.w	80183fe <RadioIrqProcess+0x236>
 80181e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80181e8:	f300 81e8 	bgt.w	80185bc <RadioIrqProcess+0x3f4>
 80181ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80181f0:	f000 80f1 	beq.w	80183d6 <RadioIrqProcess+0x20e>
 80181f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80181f8:	f300 81e0 	bgt.w	80185bc <RadioIrqProcess+0x3f4>
 80181fc:	2b80      	cmp	r3, #128	@ 0x80
 80181fe:	f000 80d6 	beq.w	80183ae <RadioIrqProcess+0x1e6>
 8018202:	2b80      	cmp	r3, #128	@ 0x80
 8018204:	f300 81da 	bgt.w	80185bc <RadioIrqProcess+0x3f4>
 8018208:	2b20      	cmp	r3, #32
 801820a:	dc49      	bgt.n	80182a0 <RadioIrqProcess+0xd8>
 801820c:	2b00      	cmp	r3, #0
 801820e:	f340 81d5 	ble.w	80185bc <RadioIrqProcess+0x3f4>
 8018212:	3b01      	subs	r3, #1
 8018214:	2b1f      	cmp	r3, #31
 8018216:	f200 81d1 	bhi.w	80185bc <RadioIrqProcess+0x3f4>
 801821a:	a201      	add	r2, pc, #4	@ (adr r2, 8018220 <RadioIrqProcess+0x58>)
 801821c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018220:	080182a9 	.word	0x080182a9
 8018224:	080182e3 	.word	0x080182e3
 8018228:	080185bd 	.word	0x080185bd
 801822c:	08018499 	.word	0x08018499
 8018230:	080185bd 	.word	0x080185bd
 8018234:	080185bd 	.word	0x080185bd
 8018238:	080185bd 	.word	0x080185bd
 801823c:	08018515 	.word	0x08018515
 8018240:	080185bd 	.word	0x080185bd
 8018244:	080185bd 	.word	0x080185bd
 8018248:	080185bd 	.word	0x080185bd
 801824c:	080185bd 	.word	0x080185bd
 8018250:	080185bd 	.word	0x080185bd
 8018254:	080185bd 	.word	0x080185bd
 8018258:	080185bd 	.word	0x080185bd
 801825c:	08018531 	.word	0x08018531
 8018260:	080185bd 	.word	0x080185bd
 8018264:	080185bd 	.word	0x080185bd
 8018268:	080185bd 	.word	0x080185bd
 801826c:	080185bd 	.word	0x080185bd
 8018270:	080185bd 	.word	0x080185bd
 8018274:	080185bd 	.word	0x080185bd
 8018278:	080185bd 	.word	0x080185bd
 801827c:	080185bd 	.word	0x080185bd
 8018280:	080185bd 	.word	0x080185bd
 8018284:	080185bd 	.word	0x080185bd
 8018288:	080185bd 	.word	0x080185bd
 801828c:	080185bd 	.word	0x080185bd
 8018290:	080185bd 	.word	0x080185bd
 8018294:	080185bd 	.word	0x080185bd
 8018298:	080185bd 	.word	0x080185bd
 801829c:	0801853f 	.word	0x0801853f
 80182a0:	2b40      	cmp	r3, #64	@ 0x40
 80182a2:	f000 816d 	beq.w	8018580 <RadioIrqProcess+0x3b8>
        {
            RadioEvents->RxError( );
        }
        break;
    default:
        break;
 80182a6:	e189      	b.n	80185bc <RadioIrqProcess+0x3f4>
        TimerStop( &TxTimeoutTimer );
 80182a8:	4874      	ldr	r0, [pc, #464]	@ (801847c <RadioIrqProcess+0x2b4>)
 80182aa:	f002 ff8f 	bl	801b1cc <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 80182ae:	2000      	movs	r0, #0
 80182b0:	f001 f802 	bl	80192b8 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 80182b4:	f002 f864 	bl	801a380 <RFW_Is_LongPacketModeEnabled>
 80182b8:	4603      	mov	r3, r0
 80182ba:	2b01      	cmp	r3, #1
 80182bc:	d101      	bne.n	80182c2 <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 80182be:	f002 f888 	bl	801a3d2 <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 80182c2:	4b6f      	ldr	r3, [pc, #444]	@ (8018480 <RadioIrqProcess+0x2b8>)
 80182c4:	681b      	ldr	r3, [r3, #0]
 80182c6:	2b00      	cmp	r3, #0
 80182c8:	f000 817a 	beq.w	80185c0 <RadioIrqProcess+0x3f8>
 80182cc:	4b6c      	ldr	r3, [pc, #432]	@ (8018480 <RadioIrqProcess+0x2b8>)
 80182ce:	681b      	ldr	r3, [r3, #0]
 80182d0:	681b      	ldr	r3, [r3, #0]
 80182d2:	2b00      	cmp	r3, #0
 80182d4:	f000 8174 	beq.w	80185c0 <RadioIrqProcess+0x3f8>
            RadioEvents->TxDone( );
 80182d8:	4b69      	ldr	r3, [pc, #420]	@ (8018480 <RadioIrqProcess+0x2b8>)
 80182da:	681b      	ldr	r3, [r3, #0]
 80182dc:	681b      	ldr	r3, [r3, #0]
 80182de:	4798      	blx	r3
        break;
 80182e0:	e16e      	b.n	80185c0 <RadioIrqProcess+0x3f8>
        TimerStop( &RxTimeoutTimer );
 80182e2:	4868      	ldr	r0, [pc, #416]	@ (8018484 <RadioIrqProcess+0x2bc>)
 80182e4:	f002 ff72 	bl	801b1cc <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 80182e8:	4b63      	ldr	r3, [pc, #396]	@ (8018478 <RadioIrqProcess+0x2b0>)
 80182ea:	785b      	ldrb	r3, [r3, #1]
 80182ec:	f083 0301 	eor.w	r3, r3, #1
 80182f0:	b2db      	uxtb	r3, r3
 80182f2:	2b00      	cmp	r3, #0
 80182f4:	d014      	beq.n	8018320 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 80182f6:	2000      	movs	r0, #0
 80182f8:	f000 ffde 	bl	80192b8 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 80182fc:	2100      	movs	r1, #0
 80182fe:	f640 1002 	movw	r0, #2306	@ 0x902
 8018302:	f001 fd59 	bl	8019db8 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 8018306:	f640 1044 	movw	r0, #2372	@ 0x944
 801830a:	f001 fd69 	bl	8019de0 <SUBGRF_ReadRegister>
 801830e:	4603      	mov	r3, r0
 8018310:	f043 0302 	orr.w	r3, r3, #2
 8018314:	b2db      	uxtb	r3, r3
 8018316:	4619      	mov	r1, r3
 8018318:	f640 1044 	movw	r0, #2372	@ 0x944
 801831c:	f001 fd4c 	bl	8019db8 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 8018320:	1dfb      	adds	r3, r7, #7
 8018322:	22ff      	movs	r2, #255	@ 0xff
 8018324:	4619      	mov	r1, r3
 8018326:	4858      	ldr	r0, [pc, #352]	@ (8018488 <RadioIrqProcess+0x2c0>)
 8018328:	f000 fe94 	bl	8019054 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 801832c:	4857      	ldr	r0, [pc, #348]	@ (801848c <RadioIrqProcess+0x2c4>)
 801832e:	f001 fcf1 	bl	8019d14 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8018332:	4b53      	ldr	r3, [pc, #332]	@ (8018480 <RadioIrqProcess+0x2b8>)
 8018334:	681b      	ldr	r3, [r3, #0]
 8018336:	2b00      	cmp	r3, #0
 8018338:	f000 8144 	beq.w	80185c4 <RadioIrqProcess+0x3fc>
 801833c:	4b50      	ldr	r3, [pc, #320]	@ (8018480 <RadioIrqProcess+0x2b8>)
 801833e:	681b      	ldr	r3, [r3, #0]
 8018340:	689b      	ldr	r3, [r3, #8]
 8018342:	2b00      	cmp	r3, #0
 8018344:	f000 813e 	beq.w	80185c4 <RadioIrqProcess+0x3fc>
            switch( SubgRf.PacketStatus.packetType )
 8018348:	4b4b      	ldr	r3, [pc, #300]	@ (8018478 <RadioIrqProcess+0x2b0>)
 801834a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 801834e:	2b01      	cmp	r3, #1
 8018350:	d10e      	bne.n	8018370 <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 8018352:	4b4b      	ldr	r3, [pc, #300]	@ (8018480 <RadioIrqProcess+0x2b8>)
 8018354:	681b      	ldr	r3, [r3, #0]
 8018356:	689c      	ldr	r4, [r3, #8]
 8018358:	79fb      	ldrb	r3, [r7, #7]
 801835a:	4619      	mov	r1, r3
 801835c:	4b46      	ldr	r3, [pc, #280]	@ (8018478 <RadioIrqProcess+0x2b0>)
 801835e:	f993 3030 	ldrsb.w	r3, [r3, #48]	@ 0x30
 8018362:	461a      	mov	r2, r3
 8018364:	4b44      	ldr	r3, [pc, #272]	@ (8018478 <RadioIrqProcess+0x2b0>)
 8018366:	f993 3031 	ldrsb.w	r3, [r3, #49]	@ 0x31
 801836a:	4847      	ldr	r0, [pc, #284]	@ (8018488 <RadioIrqProcess+0x2c0>)
 801836c:	47a0      	blx	r4
                break;
 801836e:	e01d      	b.n	80183ac <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8018370:	4b41      	ldr	r3, [pc, #260]	@ (8018478 <RadioIrqProcess+0x2b0>)
 8018372:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018374:	463a      	mov	r2, r7
 8018376:	4611      	mov	r1, r2
 8018378:	4618      	mov	r0, r3
 801837a:	f001 ff4f 	bl	801a21c <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 801837e:	4b40      	ldr	r3, [pc, #256]	@ (8018480 <RadioIrqProcess+0x2b8>)
 8018380:	681b      	ldr	r3, [r3, #0]
 8018382:	689c      	ldr	r4, [r3, #8]
 8018384:	79fb      	ldrb	r3, [r7, #7]
 8018386:	4619      	mov	r1, r3
 8018388:	4b3b      	ldr	r3, [pc, #236]	@ (8018478 <RadioIrqProcess+0x2b0>)
 801838a:	f993 3029 	ldrsb.w	r3, [r3, #41]	@ 0x29
 801838e:	4618      	mov	r0, r3
 8018390:	683b      	ldr	r3, [r7, #0]
 8018392:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8018396:	4a3e      	ldr	r2, [pc, #248]	@ (8018490 <RadioIrqProcess+0x2c8>)
 8018398:	fb82 5203 	smull	r5, r2, r2, r3
 801839c:	1192      	asrs	r2, r2, #6
 801839e:	17db      	asrs	r3, r3, #31
 80183a0:	1ad3      	subs	r3, r2, r3
 80183a2:	b25b      	sxtb	r3, r3
 80183a4:	4602      	mov	r2, r0
 80183a6:	4838      	ldr	r0, [pc, #224]	@ (8018488 <RadioIrqProcess+0x2c0>)
 80183a8:	47a0      	blx	r4
                break;
 80183aa:	bf00      	nop
        break;
 80183ac:	e10a      	b.n	80185c4 <RadioIrqProcess+0x3fc>
        SUBGRF_SetStandby( STDBY_RC );
 80183ae:	2000      	movs	r0, #0
 80183b0:	f000 ff82 	bl	80192b8 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80183b4:	4b32      	ldr	r3, [pc, #200]	@ (8018480 <RadioIrqProcess+0x2b8>)
 80183b6:	681b      	ldr	r3, [r3, #0]
 80183b8:	2b00      	cmp	r3, #0
 80183ba:	f000 8105 	beq.w	80185c8 <RadioIrqProcess+0x400>
 80183be:	4b30      	ldr	r3, [pc, #192]	@ (8018480 <RadioIrqProcess+0x2b8>)
 80183c0:	681b      	ldr	r3, [r3, #0]
 80183c2:	699b      	ldr	r3, [r3, #24]
 80183c4:	2b00      	cmp	r3, #0
 80183c6:	f000 80ff 	beq.w	80185c8 <RadioIrqProcess+0x400>
            RadioEvents->CadDone( false );
 80183ca:	4b2d      	ldr	r3, [pc, #180]	@ (8018480 <RadioIrqProcess+0x2b8>)
 80183cc:	681b      	ldr	r3, [r3, #0]
 80183ce:	699b      	ldr	r3, [r3, #24]
 80183d0:	2000      	movs	r0, #0
 80183d2:	4798      	blx	r3
        break;
 80183d4:	e0f8      	b.n	80185c8 <RadioIrqProcess+0x400>
        SUBGRF_SetStandby( STDBY_RC );
 80183d6:	2000      	movs	r0, #0
 80183d8:	f000 ff6e 	bl	80192b8 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80183dc:	4b28      	ldr	r3, [pc, #160]	@ (8018480 <RadioIrqProcess+0x2b8>)
 80183de:	681b      	ldr	r3, [r3, #0]
 80183e0:	2b00      	cmp	r3, #0
 80183e2:	f000 80f3 	beq.w	80185cc <RadioIrqProcess+0x404>
 80183e6:	4b26      	ldr	r3, [pc, #152]	@ (8018480 <RadioIrqProcess+0x2b8>)
 80183e8:	681b      	ldr	r3, [r3, #0]
 80183ea:	699b      	ldr	r3, [r3, #24]
 80183ec:	2b00      	cmp	r3, #0
 80183ee:	f000 80ed 	beq.w	80185cc <RadioIrqProcess+0x404>
            RadioEvents->CadDone( true );
 80183f2:	4b23      	ldr	r3, [pc, #140]	@ (8018480 <RadioIrqProcess+0x2b8>)
 80183f4:	681b      	ldr	r3, [r3, #0]
 80183f6:	699b      	ldr	r3, [r3, #24]
 80183f8:	2001      	movs	r0, #1
 80183fa:	4798      	blx	r3
        break;
 80183fc:	e0e6      	b.n	80185cc <RadioIrqProcess+0x404>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 80183fe:	4b25      	ldr	r3, [pc, #148]	@ (8018494 <RadioIrqProcess+0x2cc>)
 8018400:	2201      	movs	r2, #1
 8018402:	2100      	movs	r1, #0
 8018404:	2002      	movs	r0, #2
 8018406:	f003 f8eb 	bl	801b5e0 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 801840a:	f000 fe09 	bl	8019020 <SUBGRF_GetOperatingMode>
 801840e:	4603      	mov	r3, r0
 8018410:	2b04      	cmp	r3, #4
 8018412:	d115      	bne.n	8018440 <RadioIrqProcess+0x278>
            TimerStop( &TxTimeoutTimer );
 8018414:	4819      	ldr	r0, [pc, #100]	@ (801847c <RadioIrqProcess+0x2b4>)
 8018416:	f002 fed9 	bl	801b1cc <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801841a:	2000      	movs	r0, #0
 801841c:	f000 ff4c 	bl	80192b8 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8018420:	4b17      	ldr	r3, [pc, #92]	@ (8018480 <RadioIrqProcess+0x2b8>)
 8018422:	681b      	ldr	r3, [r3, #0]
 8018424:	2b00      	cmp	r3, #0
 8018426:	f000 80d3 	beq.w	80185d0 <RadioIrqProcess+0x408>
 801842a:	4b15      	ldr	r3, [pc, #84]	@ (8018480 <RadioIrqProcess+0x2b8>)
 801842c:	681b      	ldr	r3, [r3, #0]
 801842e:	685b      	ldr	r3, [r3, #4]
 8018430:	2b00      	cmp	r3, #0
 8018432:	f000 80cd 	beq.w	80185d0 <RadioIrqProcess+0x408>
                RadioEvents->TxTimeout( );
 8018436:	4b12      	ldr	r3, [pc, #72]	@ (8018480 <RadioIrqProcess+0x2b8>)
 8018438:	681b      	ldr	r3, [r3, #0]
 801843a:	685b      	ldr	r3, [r3, #4]
 801843c:	4798      	blx	r3
        break;
 801843e:	e0c7      	b.n	80185d0 <RadioIrqProcess+0x408>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8018440:	f000 fdee 	bl	8019020 <SUBGRF_GetOperatingMode>
 8018444:	4603      	mov	r3, r0
 8018446:	2b05      	cmp	r3, #5
 8018448:	f040 80c2 	bne.w	80185d0 <RadioIrqProcess+0x408>
            TimerStop( &RxTimeoutTimer );
 801844c:	480d      	ldr	r0, [pc, #52]	@ (8018484 <RadioIrqProcess+0x2bc>)
 801844e:	f002 febd 	bl	801b1cc <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8018452:	2000      	movs	r0, #0
 8018454:	f000 ff30 	bl	80192b8 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8018458:	4b09      	ldr	r3, [pc, #36]	@ (8018480 <RadioIrqProcess+0x2b8>)
 801845a:	681b      	ldr	r3, [r3, #0]
 801845c:	2b00      	cmp	r3, #0
 801845e:	f000 80b7 	beq.w	80185d0 <RadioIrqProcess+0x408>
 8018462:	4b07      	ldr	r3, [pc, #28]	@ (8018480 <RadioIrqProcess+0x2b8>)
 8018464:	681b      	ldr	r3, [r3, #0]
 8018466:	68db      	ldr	r3, [r3, #12]
 8018468:	2b00      	cmp	r3, #0
 801846a:	f000 80b1 	beq.w	80185d0 <RadioIrqProcess+0x408>
                RadioEvents->RxTimeout( );
 801846e:	4b04      	ldr	r3, [pc, #16]	@ (8018480 <RadioIrqProcess+0x2b8>)
 8018470:	681b      	ldr	r3, [r3, #0]
 8018472:	68db      	ldr	r3, [r3, #12]
 8018474:	4798      	blx	r3
        break;
 8018476:	e0ab      	b.n	80185d0 <RadioIrqProcess+0x408>
 8018478:	20001cd8 	.word	0x20001cd8
 801847c:	20001d34 	.word	0x20001d34
 8018480:	20001cd4 	.word	0x20001cd4
 8018484:	20001d4c 	.word	0x20001d4c
 8018488:	20001bd4 	.word	0x20001bd4
 801848c:	20001cfc 	.word	0x20001cfc
 8018490:	10624dd3 	.word	0x10624dd3
 8018494:	0801eeb8 	.word	0x0801eeb8
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 8018498:	4b54      	ldr	r3, [pc, #336]	@ (80185ec <RadioIrqProcess+0x424>)
 801849a:	2201      	movs	r2, #1
 801849c:	2100      	movs	r1, #0
 801849e:	2002      	movs	r0, #2
 80184a0:	f003 f89e 	bl	801b5e0 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 80184a4:	4b52      	ldr	r3, [pc, #328]	@ (80185f0 <RadioIrqProcess+0x428>)
 80184a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80184a8:	2b00      	cmp	r3, #0
 80184aa:	f000 8093 	beq.w	80185d4 <RadioIrqProcess+0x40c>
          Radio.Write(SUBGHZ_RTCPRDR2, (SubgRf.RxDcPreambleDetectTimeout>>16)&0xFF); /*Update Radio RTC Period MSB*/
 80184ae:	4a51      	ldr	r2, [pc, #324]	@ (80185f4 <RadioIrqProcess+0x42c>)
 80184b0:	4b4f      	ldr	r3, [pc, #316]	@ (80185f0 <RadioIrqProcess+0x428>)
 80184b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80184b4:	0c1b      	lsrs	r3, r3, #16
 80184b6:	b2db      	uxtb	r3, r3
 80184b8:	4619      	mov	r1, r3
 80184ba:	f640 1003 	movw	r0, #2307	@ 0x903
 80184be:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCPRDR1, (SubgRf.RxDcPreambleDetectTimeout>>8)&0xFF); /*Update Radio RTC Period MidByte*/
 80184c0:	4a4c      	ldr	r2, [pc, #304]	@ (80185f4 <RadioIrqProcess+0x42c>)
 80184c2:	4b4b      	ldr	r3, [pc, #300]	@ (80185f0 <RadioIrqProcess+0x428>)
 80184c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80184c6:	0a1b      	lsrs	r3, r3, #8
 80184c8:	b2db      	uxtb	r3, r3
 80184ca:	4619      	mov	r1, r3
 80184cc:	f640 1004 	movw	r0, #2308	@ 0x904
 80184d0:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCPRDR0, (SubgRf.RxDcPreambleDetectTimeout)&0xFF); /*Update Radio RTC Period lsb*/
 80184d2:	4a48      	ldr	r2, [pc, #288]	@ (80185f4 <RadioIrqProcess+0x42c>)
 80184d4:	4b46      	ldr	r3, [pc, #280]	@ (80185f0 <RadioIrqProcess+0x428>)
 80184d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80184d8:	b2db      	uxtb	r3, r3
 80184da:	4619      	mov	r1, r3
 80184dc:	f640 1005 	movw	r0, #2309	@ 0x905
 80184e0:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCCTLR, Radio.Read(SUBGHZ_RTCCTLR)|0x1); /*restart Radio RTC*/
 80184e2:	4c44      	ldr	r4, [pc, #272]	@ (80185f4 <RadioIrqProcess+0x42c>)
 80184e4:	4b44      	ldr	r3, [pc, #272]	@ (80185f8 <RadioIrqProcess+0x430>)
 80184e6:	f640 1002 	movw	r0, #2306	@ 0x902
 80184ea:	4798      	blx	r3
 80184ec:	4603      	mov	r3, r0
 80184ee:	f043 0301 	orr.w	r3, r3, #1
 80184f2:	b2db      	uxtb	r3, r3
 80184f4:	4619      	mov	r1, r3
 80184f6:	f640 1002 	movw	r0, #2306	@ 0x902
 80184fa:	47a0      	blx	r4
          SubgRf.RxDcPreambleDetectTimeout = 0;
 80184fc:	4b3c      	ldr	r3, [pc, #240]	@ (80185f0 <RadioIrqProcess+0x428>)
 80184fe:	2200      	movs	r2, #0
 8018500:	659a      	str	r2, [r3, #88]	@ 0x58
          SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8018502:	2300      	movs	r3, #0
 8018504:	2200      	movs	r2, #0
 8018506:	f240 2162 	movw	r1, #610	@ 0x262
 801850a:	f240 2062 	movw	r0, #610	@ 0x262
 801850e:	f001 f8a9 	bl	8019664 <SUBGRF_SetDioIrqParams>
        break;
 8018512:	e05f      	b.n	80185d4 <RadioIrqProcess+0x40c>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 8018514:	4b39      	ldr	r3, [pc, #228]	@ (80185fc <RadioIrqProcess+0x434>)
 8018516:	2201      	movs	r2, #1
 8018518:	2100      	movs	r1, #0
 801851a:	2002      	movs	r0, #2
 801851c:	f003 f860 	bl	801b5e0 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 8018520:	f001 ff27 	bl	801a372 <RFW_Is_Init>
 8018524:	4603      	mov	r3, r0
 8018526:	2b01      	cmp	r3, #1
 8018528:	d156      	bne.n	80185d8 <RadioIrqProcess+0x410>
            RFW_ReceivePayload( );
 801852a:	f001 ff58 	bl	801a3de <RFW_ReceivePayload>
        break;
 801852e:	e053      	b.n	80185d8 <RadioIrqProcess+0x410>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 8018530:	4b33      	ldr	r3, [pc, #204]	@ (8018600 <RadioIrqProcess+0x438>)
 8018532:	2201      	movs	r2, #1
 8018534:	2100      	movs	r1, #0
 8018536:	2002      	movs	r0, #2
 8018538:	f003 f852 	bl	801b5e0 <UTIL_ADV_TRACE_COND_FSend>
        break;
 801853c:	e051      	b.n	80185e2 <RadioIrqProcess+0x41a>
        TimerStop( &RxTimeoutTimer );
 801853e:	4831      	ldr	r0, [pc, #196]	@ (8018604 <RadioIrqProcess+0x43c>)
 8018540:	f002 fe44 	bl	801b1cc <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8018544:	4b2a      	ldr	r3, [pc, #168]	@ (80185f0 <RadioIrqProcess+0x428>)
 8018546:	785b      	ldrb	r3, [r3, #1]
 8018548:	f083 0301 	eor.w	r3, r3, #1
 801854c:	b2db      	uxtb	r3, r3
 801854e:	2b00      	cmp	r3, #0
 8018550:	d002      	beq.n	8018558 <RadioIrqProcess+0x390>
            SUBGRF_SetStandby( STDBY_RC );
 8018552:	2000      	movs	r0, #0
 8018554:	f000 feb0 	bl	80192b8 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8018558:	4b2b      	ldr	r3, [pc, #172]	@ (8018608 <RadioIrqProcess+0x440>)
 801855a:	681b      	ldr	r3, [r3, #0]
 801855c:	2b00      	cmp	r3, #0
 801855e:	d03d      	beq.n	80185dc <RadioIrqProcess+0x414>
 8018560:	4b29      	ldr	r3, [pc, #164]	@ (8018608 <RadioIrqProcess+0x440>)
 8018562:	681b      	ldr	r3, [r3, #0]
 8018564:	68db      	ldr	r3, [r3, #12]
 8018566:	2b00      	cmp	r3, #0
 8018568:	d038      	beq.n	80185dc <RadioIrqProcess+0x414>
            RadioEvents->RxTimeout( );
 801856a:	4b27      	ldr	r3, [pc, #156]	@ (8018608 <RadioIrqProcess+0x440>)
 801856c:	681b      	ldr	r3, [r3, #0]
 801856e:	68db      	ldr	r3, [r3, #12]
 8018570:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 8018572:	4b26      	ldr	r3, [pc, #152]	@ (801860c <RadioIrqProcess+0x444>)
 8018574:	2201      	movs	r2, #1
 8018576:	2100      	movs	r1, #0
 8018578:	2002      	movs	r0, #2
 801857a:	f003 f831 	bl	801b5e0 <UTIL_ADV_TRACE_COND_FSend>
        break;
 801857e:	e02d      	b.n	80185dc <RadioIrqProcess+0x414>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 8018580:	4b23      	ldr	r3, [pc, #140]	@ (8018610 <RadioIrqProcess+0x448>)
 8018582:	2201      	movs	r2, #1
 8018584:	2100      	movs	r1, #0
 8018586:	2002      	movs	r0, #2
 8018588:	f003 f82a 	bl	801b5e0 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 801858c:	4b18      	ldr	r3, [pc, #96]	@ (80185f0 <RadioIrqProcess+0x428>)
 801858e:	785b      	ldrb	r3, [r3, #1]
 8018590:	f083 0301 	eor.w	r3, r3, #1
 8018594:	b2db      	uxtb	r3, r3
 8018596:	2b00      	cmp	r3, #0
 8018598:	d002      	beq.n	80185a0 <RadioIrqProcess+0x3d8>
            SUBGRF_SetStandby( STDBY_RC );
 801859a:	2000      	movs	r0, #0
 801859c:	f000 fe8c 	bl	80192b8 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 80185a0:	4b19      	ldr	r3, [pc, #100]	@ (8018608 <RadioIrqProcess+0x440>)
 80185a2:	681b      	ldr	r3, [r3, #0]
 80185a4:	2b00      	cmp	r3, #0
 80185a6:	d01b      	beq.n	80185e0 <RadioIrqProcess+0x418>
 80185a8:	4b17      	ldr	r3, [pc, #92]	@ (8018608 <RadioIrqProcess+0x440>)
 80185aa:	681b      	ldr	r3, [r3, #0]
 80185ac:	691b      	ldr	r3, [r3, #16]
 80185ae:	2b00      	cmp	r3, #0
 80185b0:	d016      	beq.n	80185e0 <RadioIrqProcess+0x418>
            RadioEvents->RxError( );
 80185b2:	4b15      	ldr	r3, [pc, #84]	@ (8018608 <RadioIrqProcess+0x440>)
 80185b4:	681b      	ldr	r3, [r3, #0]
 80185b6:	691b      	ldr	r3, [r3, #16]
 80185b8:	4798      	blx	r3
        break;
 80185ba:	e011      	b.n	80185e0 <RadioIrqProcess+0x418>
        break;
 80185bc:	bf00      	nop
 80185be:	e010      	b.n	80185e2 <RadioIrqProcess+0x41a>
        break;
 80185c0:	bf00      	nop
 80185c2:	e00e      	b.n	80185e2 <RadioIrqProcess+0x41a>
        break;
 80185c4:	bf00      	nop
 80185c6:	e00c      	b.n	80185e2 <RadioIrqProcess+0x41a>
        break;
 80185c8:	bf00      	nop
 80185ca:	e00a      	b.n	80185e2 <RadioIrqProcess+0x41a>
        break;
 80185cc:	bf00      	nop
 80185ce:	e008      	b.n	80185e2 <RadioIrqProcess+0x41a>
        break;
 80185d0:	bf00      	nop
 80185d2:	e006      	b.n	80185e2 <RadioIrqProcess+0x41a>
        break;
 80185d4:	bf00      	nop
 80185d6:	e004      	b.n	80185e2 <RadioIrqProcess+0x41a>
        break;
 80185d8:	bf00      	nop
 80185da:	e002      	b.n	80185e2 <RadioIrqProcess+0x41a>
        break;
 80185dc:	bf00      	nop
 80185de:	e000      	b.n	80185e2 <RadioIrqProcess+0x41a>
        break;
 80185e0:	bf00      	nop
    }
}
 80185e2:	bf00      	nop
 80185e4:	3708      	adds	r7, #8
 80185e6:	46bd      	mov	sp, r7
 80185e8:	bdb0      	pop	{r4, r5, r7, pc}
 80185ea:	bf00      	nop
 80185ec:	0801eecc 	.word	0x0801eecc
 80185f0:	20001cd8 	.word	0x20001cd8
 80185f4:	08017fd9 	.word	0x08017fd9
 80185f8:	08017ffd 	.word	0x08017ffd
 80185fc:	0801eed8 	.word	0x0801eed8
 8018600:	0801eee4 	.word	0x0801eee4
 8018604:	20001d4c 	.word	0x20001d4c
 8018608:	20001cd4 	.word	0x20001cd4
 801860c:	0801eef0 	.word	0x0801eef0
 8018610:	0801eefc 	.word	0x0801eefc

08018614 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 8018614:	b580      	push	{r7, lr}
 8018616:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8018618:	4b09      	ldr	r3, [pc, #36]	@ (8018640 <RadioTxPrbs+0x2c>)
 801861a:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 801861e:	2101      	movs	r1, #1
 8018620:	4618      	mov	r0, r3
 8018622:	f001 fcbd 	bl	8019fa0 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 8018626:	4b07      	ldr	r3, [pc, #28]	@ (8018644 <RadioTxPrbs+0x30>)
 8018628:	212d      	movs	r1, #45	@ 0x2d
 801862a:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 801862e:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 8018630:	f000 ff05 	bl	801943e <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8018634:	4804      	ldr	r0, [pc, #16]	@ (8018648 <RadioTxPrbs+0x34>)
 8018636:	f000 fe5b 	bl	80192f0 <SUBGRF_SetTx>
}
 801863a:	bf00      	nop
 801863c:	bd80      	pop	{r7, pc}
 801863e:	bf00      	nop
 8018640:	20001cd8 	.word	0x20001cd8
 8018644:	08017fd9 	.word	0x08017fd9
 8018648:	000fffff 	.word	0x000fffff

0801864c <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 801864c:	b580      	push	{r7, lr}
 801864e:	b084      	sub	sp, #16
 8018650:	af00      	add	r7, sp, #0
 8018652:	4603      	mov	r3, r0
 8018654:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 8018656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801865a:	4618      	mov	r0, r3
 801865c:	f001 fcc8 	bl	8019ff0 <SUBGRF_SetRfTxPower>
 8018660:	4603      	mov	r3, r0
 8018662:	73fb      	strb	r3, [r7, #15]
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8018664:	7bfb      	ldrb	r3, [r7, #15]
 8018666:	2101      	movs	r1, #1
 8018668:	4618      	mov	r0, r3
 801866a:	f001 fc99 	bl	8019fa0 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 801866e:	f000 fedd 	bl	801942c <SUBGRF_SetTxContinuousWave>
}
 8018672:	bf00      	nop
 8018674:	3710      	adds	r7, #16
 8018676:	46bd      	mov	sp, r7
 8018678:	bd80      	pop	{r7, pc}

0801867a <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 801867a:	b480      	push	{r7}
 801867c:	b089      	sub	sp, #36	@ 0x24
 801867e:	af00      	add	r7, sp, #0
 8018680:	60f8      	str	r0, [r7, #12]
 8018682:	60b9      	str	r1, [r7, #8]
 8018684:	4613      	mov	r3, r2
 8018686:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 8018688:	2300      	movs	r3, #0
 801868a:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 801868c:	2300      	movs	r3, #0
 801868e:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 8018690:	2300      	movs	r3, #0
 8018692:	61bb      	str	r3, [r7, #24]
 8018694:	e011      	b.n	80186ba <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 8018696:	69bb      	ldr	r3, [r7, #24]
 8018698:	68ba      	ldr	r2, [r7, #8]
 801869a:	4413      	add	r3, r2
 801869c:	781a      	ldrb	r2, [r3, #0]
 801869e:	69bb      	ldr	r3, [r7, #24]
 80186a0:	68b9      	ldr	r1, [r7, #8]
 80186a2:	440b      	add	r3, r1
 80186a4:	43d2      	mvns	r2, r2
 80186a6:	b2d2      	uxtb	r2, r2
 80186a8:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 80186aa:	69bb      	ldr	r3, [r7, #24]
 80186ac:	68fa      	ldr	r2, [r7, #12]
 80186ae:	4413      	add	r3, r2
 80186b0:	2200      	movs	r2, #0
 80186b2:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 80186b4:	69bb      	ldr	r3, [r7, #24]
 80186b6:	3301      	adds	r3, #1
 80186b8:	61bb      	str	r3, [r7, #24]
 80186ba:	79fb      	ldrb	r3, [r7, #7]
 80186bc:	69ba      	ldr	r2, [r7, #24]
 80186be:	429a      	cmp	r2, r3
 80186c0:	dbe9      	blt.n	8018696 <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 80186c2:	2300      	movs	r3, #0
 80186c4:	61bb      	str	r3, [r7, #24]
 80186c6:	e049      	b.n	801875c <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 80186c8:	69bb      	ldr	r3, [r7, #24]
 80186ca:	425a      	negs	r2, r3
 80186cc:	f003 0307 	and.w	r3, r3, #7
 80186d0:	f002 0207 	and.w	r2, r2, #7
 80186d4:	bf58      	it	pl
 80186d6:	4253      	negpl	r3, r2
 80186d8:	b2db      	uxtb	r3, r3
 80186da:	f1c3 0307 	rsb	r3, r3, #7
 80186de:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 80186e0:	69bb      	ldr	r3, [r7, #24]
 80186e2:	2b00      	cmp	r3, #0
 80186e4:	da00      	bge.n	80186e8 <payload_integration+0x6e>
 80186e6:	3307      	adds	r3, #7
 80186e8:	10db      	asrs	r3, r3, #3
 80186ea:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 80186ec:	69bb      	ldr	r3, [r7, #24]
 80186ee:	3301      	adds	r3, #1
 80186f0:	425a      	negs	r2, r3
 80186f2:	f003 0307 	and.w	r3, r3, #7
 80186f6:	f002 0207 	and.w	r2, r2, #7
 80186fa:	bf58      	it	pl
 80186fc:	4253      	negpl	r3, r2
 80186fe:	b2db      	uxtb	r3, r3
 8018700:	f1c3 0307 	rsb	r3, r3, #7
 8018704:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 8018706:	69bb      	ldr	r3, [r7, #24]
 8018708:	3301      	adds	r3, #1
 801870a:	2b00      	cmp	r3, #0
 801870c:	da00      	bge.n	8018710 <payload_integration+0x96>
 801870e:	3307      	adds	r3, #7
 8018710:	10db      	asrs	r3, r3, #3
 8018712:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 8018714:	7dbb      	ldrb	r3, [r7, #22]
 8018716:	68ba      	ldr	r2, [r7, #8]
 8018718:	4413      	add	r3, r2
 801871a:	781b      	ldrb	r3, [r3, #0]
 801871c:	461a      	mov	r2, r3
 801871e:	7dfb      	ldrb	r3, [r7, #23]
 8018720:	fa42 f303 	asr.w	r3, r2, r3
 8018724:	b2db      	uxtb	r3, r3
 8018726:	f003 0301 	and.w	r3, r3, #1
 801872a:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 801872c:	7ffa      	ldrb	r2, [r7, #31]
 801872e:	7cfb      	ldrb	r3, [r7, #19]
 8018730:	4053      	eors	r3, r2
 8018732:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 8018734:	7d3b      	ldrb	r3, [r7, #20]
 8018736:	68fa      	ldr	r2, [r7, #12]
 8018738:	4413      	add	r3, r2
 801873a:	781b      	ldrb	r3, [r3, #0]
 801873c:	b25a      	sxtb	r2, r3
 801873e:	7ff9      	ldrb	r1, [r7, #31]
 8018740:	7d7b      	ldrb	r3, [r7, #21]
 8018742:	fa01 f303 	lsl.w	r3, r1, r3
 8018746:	b25b      	sxtb	r3, r3
 8018748:	4313      	orrs	r3, r2
 801874a:	b259      	sxtb	r1, r3
 801874c:	7d3b      	ldrb	r3, [r7, #20]
 801874e:	68fa      	ldr	r2, [r7, #12]
 8018750:	4413      	add	r3, r2
 8018752:	b2ca      	uxtb	r2, r1
 8018754:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 8018756:	69bb      	ldr	r3, [r7, #24]
 8018758:	3301      	adds	r3, #1
 801875a:	61bb      	str	r3, [r7, #24]
 801875c:	79fb      	ldrb	r3, [r7, #7]
 801875e:	00db      	lsls	r3, r3, #3
 8018760:	69ba      	ldr	r2, [r7, #24]
 8018762:	429a      	cmp	r2, r3
 8018764:	dbb0      	blt.n	80186c8 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 8018766:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801876a:	01db      	lsls	r3, r3, #7
 801876c:	b25a      	sxtb	r2, r3
 801876e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8018772:	019b      	lsls	r3, r3, #6
 8018774:	b25b      	sxtb	r3, r3
 8018776:	4313      	orrs	r3, r2
 8018778:	b25b      	sxtb	r3, r3
 801877a:	7ffa      	ldrb	r2, [r7, #31]
 801877c:	2a00      	cmp	r2, #0
 801877e:	d101      	bne.n	8018784 <payload_integration+0x10a>
 8018780:	2220      	movs	r2, #32
 8018782:	e000      	b.n	8018786 <payload_integration+0x10c>
 8018784:	2200      	movs	r2, #0
 8018786:	4313      	orrs	r3, r2
 8018788:	b259      	sxtb	r1, r3
 801878a:	79fb      	ldrb	r3, [r7, #7]
 801878c:	68fa      	ldr	r2, [r7, #12]
 801878e:	4413      	add	r3, r2
 8018790:	b2ca      	uxtb	r2, r1
 8018792:	701a      	strb	r2, [r3, #0]
}
 8018794:	bf00      	nop
 8018796:	3724      	adds	r7, #36	@ 0x24
 8018798:	46bd      	mov	sp, r7
 801879a:	bc80      	pop	{r7}
 801879c:	4770      	bx	lr
	...

080187a0 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t* config, uint32_t rxContinuous, uint32_t symbTimeout )
{
 80187a0:	b580      	push	{r7, lr}
 80187a2:	b08c      	sub	sp, #48	@ 0x30
 80187a4:	af00      	add	r7, sp, #0
 80187a6:	60b9      	str	r1, [r7, #8]
 80187a8:	607a      	str	r2, [r7, #4]
 80187aa:	603b      	str	r3, [r7, #0]
 80187ac:	4603      	mov	r3, r0
 80187ae:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 80187b0:	2300      	movs	r3, #0
 80187b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint8_t syncword[8] = {0};
 80187b4:	f107 0320 	add.w	r3, r7, #32
 80187b8:	2200      	movs	r2, #0
 80187ba:	601a      	str	r2, [r3, #0]
 80187bc:	605a      	str	r2, [r3, #4]
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 80187be:	f001 fdd2 	bl	801a366 <RFW_DeInit>

    if( rxContinuous != 0 )
 80187c2:	687b      	ldr	r3, [r7, #4]
 80187c4:	2b00      	cmp	r3, #0
 80187c6:	d001      	beq.n	80187cc <RadioSetRxGenericConfig+0x2c>
    {
        symbTimeout = 0;
 80187c8:	2300      	movs	r3, #0
 80187ca:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 80187cc:	687b      	ldr	r3, [r7, #4]
 80187ce:	2b00      	cmp	r3, #0
 80187d0:	bf14      	ite	ne
 80187d2:	2301      	movne	r3, #1
 80187d4:	2300      	moveq	r3, #0
 80187d6:	b2da      	uxtb	r2, r3
 80187d8:	4ba3      	ldr	r3, [pc, #652]	@ (8018a68 <RadioSetRxGenericConfig+0x2c8>)
 80187da:	705a      	strb	r2, [r3, #1]

    switch( modem )
 80187dc:	7bfb      	ldrb	r3, [r7, #15]
 80187de:	2b00      	cmp	r3, #0
 80187e0:	d003      	beq.n	80187ea <RadioSetRxGenericConfig+0x4a>
 80187e2:	2b01      	cmp	r3, #1
 80187e4:	f000 80dc 	beq.w	80189a0 <RadioSetRxGenericConfig+0x200>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 80187e8:	e195      	b.n	8018b16 <RadioSetRxGenericConfig+0x376>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 80187ea:	68bb      	ldr	r3, [r7, #8]
 80187ec:	689b      	ldr	r3, [r3, #8]
 80187ee:	2b00      	cmp	r3, #0
 80187f0:	d003      	beq.n	80187fa <RadioSetRxGenericConfig+0x5a>
 80187f2:	68bb      	ldr	r3, [r7, #8]
 80187f4:	68db      	ldr	r3, [r3, #12]
 80187f6:	2b00      	cmp	r3, #0
 80187f8:	d102      	bne.n	8018800 <RadioSetRxGenericConfig+0x60>
            return -1;
 80187fa:	f04f 33ff 	mov.w	r3, #4294967295
 80187fe:	e18b      	b.n	8018b18 <RadioSetRxGenericConfig+0x378>
        if( config->fsk.SyncWordLength > 8 )
 8018800:	68bb      	ldr	r3, [r7, #8]
 8018802:	7f9b      	ldrb	r3, [r3, #30]
 8018804:	2b08      	cmp	r3, #8
 8018806:	d902      	bls.n	801880e <RadioSetRxGenericConfig+0x6e>
            return -1;
 8018808:	f04f 33ff 	mov.w	r3, #4294967295
 801880c:	e184      	b.n	8018b18 <RadioSetRxGenericConfig+0x378>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 801880e:	68bb      	ldr	r3, [r7, #8]
 8018810:	6919      	ldr	r1, [r3, #16]
 8018812:	68bb      	ldr	r3, [r7, #8]
 8018814:	7f9b      	ldrb	r3, [r3, #30]
 8018816:	461a      	mov	r2, r3
 8018818:	f107 0320 	add.w	r3, r7, #32
 801881c:	4618      	mov	r0, r3
 801881e:	f001 fe95 	bl	801a54c <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8018822:	68bb      	ldr	r3, [r7, #8]
 8018824:	681b      	ldr	r3, [r3, #0]
 8018826:	2b00      	cmp	r3, #0
 8018828:	bf14      	ite	ne
 801882a:	2301      	movne	r3, #1
 801882c:	2300      	moveq	r3, #0
 801882e:	b2db      	uxtb	r3, r3
 8018830:	4618      	mov	r0, r3
 8018832:	f000 fe0d 	bl	8019450 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8018836:	4b8c      	ldr	r3, [pc, #560]	@ (8018a68 <RadioSetRxGenericConfig+0x2c8>)
 8018838:	2200      	movs	r2, #0
 801883a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801883e:	68bb      	ldr	r3, [r7, #8]
 8018840:	689b      	ldr	r3, [r3, #8]
 8018842:	4a89      	ldr	r2, [pc, #548]	@ (8018a68 <RadioSetRxGenericConfig+0x2c8>)
 8018844:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 8018846:	68bb      	ldr	r3, [r7, #8]
 8018848:	f893 2020 	ldrb.w	r2, [r3, #32]
 801884c:	4b86      	ldr	r3, [pc, #536]	@ (8018a68 <RadioSetRxGenericConfig+0x2c8>)
 801884e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8018852:	68bb      	ldr	r3, [r7, #8]
 8018854:	685b      	ldr	r3, [r3, #4]
 8018856:	4618      	mov	r0, r3
 8018858:	f001 fcb8 	bl	801a1cc <SUBGRF_GetFskBandwidthRegValue>
 801885c:	4603      	mov	r3, r0
 801885e:	461a      	mov	r2, r3
 8018860:	4b81      	ldr	r3, [pc, #516]	@ (8018a68 <RadioSetRxGenericConfig+0x2c8>)
 8018862:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8018866:	4b80      	ldr	r3, [pc, #512]	@ (8018a68 <RadioSetRxGenericConfig+0x2c8>)
 8018868:	2200      	movs	r2, #0
 801886a:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 801886c:	68bb      	ldr	r3, [r7, #8]
 801886e:	68db      	ldr	r3, [r3, #12]
 8018870:	b29b      	uxth	r3, r3
 8018872:	00db      	lsls	r3, r3, #3
 8018874:	b29a      	uxth	r2, r3
 8018876:	4b7c      	ldr	r3, [pc, #496]	@ (8018a68 <RadioSetRxGenericConfig+0x2c8>)
 8018878:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 801887a:	68bb      	ldr	r3, [r7, #8]
 801887c:	7fda      	ldrb	r2, [r3, #31]
 801887e:	4b7a      	ldr	r3, [pc, #488]	@ (8018a68 <RadioSetRxGenericConfig+0x2c8>)
 8018880:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8018882:	68bb      	ldr	r3, [r7, #8]
 8018884:	7f9b      	ldrb	r3, [r3, #30]
 8018886:	00db      	lsls	r3, r3, #3
 8018888:	b2da      	uxtb	r2, r3
 801888a:	4b77      	ldr	r3, [pc, #476]	@ (8018a68 <RadioSetRxGenericConfig+0x2c8>)
 801888c:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 801888e:	68bb      	ldr	r3, [r7, #8]
 8018890:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8018894:	4b74      	ldr	r3, [pc, #464]	@ (8018a68 <RadioSetRxGenericConfig+0x2c8>)
 8018896:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 8018898:	68bb      	ldr	r3, [r7, #8]
 801889a:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 801889e:	2b00      	cmp	r3, #0
 80188a0:	d105      	bne.n	80188ae <RadioSetRxGenericConfig+0x10e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 80188a2:	68bb      	ldr	r3, [r7, #8]
 80188a4:	695b      	ldr	r3, [r3, #20]
 80188a6:	b2da      	uxtb	r2, r3
 80188a8:	4b6f      	ldr	r3, [pc, #444]	@ (8018a68 <RadioSetRxGenericConfig+0x2c8>)
 80188aa:	759a      	strb	r2, [r3, #22]
 80188ac:	e00b      	b.n	80188c6 <RadioSetRxGenericConfig+0x126>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 80188ae:	68bb      	ldr	r3, [r7, #8]
 80188b0:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80188b4:	2b02      	cmp	r3, #2
 80188b6:	d103      	bne.n	80188c0 <RadioSetRxGenericConfig+0x120>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 80188b8:	4b6b      	ldr	r3, [pc, #428]	@ (8018a68 <RadioSetRxGenericConfig+0x2c8>)
 80188ba:	22ff      	movs	r2, #255	@ 0xff
 80188bc:	759a      	strb	r2, [r3, #22]
 80188be:	e002      	b.n	80188c6 <RadioSetRxGenericConfig+0x126>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 80188c0:	4b69      	ldr	r3, [pc, #420]	@ (8018a68 <RadioSetRxGenericConfig+0x2c8>)
 80188c2:	22ff      	movs	r2, #255	@ 0xff
 80188c4:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 80188c6:	68bb      	ldr	r3, [r7, #8]
 80188c8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80188cc:	2b02      	cmp	r3, #2
 80188ce:	d004      	beq.n	80188da <RadioSetRxGenericConfig+0x13a>
 80188d0:	68bb      	ldr	r3, [r7, #8]
 80188d2:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80188d6:	2b02      	cmp	r3, #2
 80188d8:	d12d      	bne.n	8018936 <RadioSetRxGenericConfig+0x196>
          if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 80188da:	68bb      	ldr	r3, [r7, #8]
 80188dc:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 80188e0:	2bf1      	cmp	r3, #241	@ 0xf1
 80188e2:	d00c      	beq.n	80188fe <RadioSetRxGenericConfig+0x15e>
 80188e4:	68bb      	ldr	r3, [r7, #8]
 80188e6:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 80188ea:	2bf2      	cmp	r3, #242	@ 0xf2
 80188ec:	d007      	beq.n	80188fe <RadioSetRxGenericConfig+0x15e>
 80188ee:	68bb      	ldr	r3, [r7, #8]
 80188f0:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 80188f4:	2b01      	cmp	r3, #1
 80188f6:	d002      	beq.n	80188fe <RadioSetRxGenericConfig+0x15e>
            return -1;
 80188f8:	f04f 33ff 	mov.w	r3, #4294967295
 80188fc:	e10c      	b.n	8018b18 <RadioSetRxGenericConfig+0x378>
          ConfigGeneric.rtx = CONFIG_RX;
 80188fe:	2300      	movs	r3, #0
 8018900:	773b      	strb	r3, [r7, #28]
          ConfigGeneric.RxConfig = config;
 8018902:	68bb      	ldr	r3, [r7, #8]
 8018904:	61bb      	str	r3, [r7, #24]
          if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 8018906:	4b59      	ldr	r3, [pc, #356]	@ (8018a6c <RadioSetRxGenericConfig+0x2cc>)
 8018908:	6819      	ldr	r1, [r3, #0]
 801890a:	f107 0314 	add.w	r3, r7, #20
 801890e:	4a58      	ldr	r2, [pc, #352]	@ (8018a70 <RadioSetRxGenericConfig+0x2d0>)
 8018910:	4618      	mov	r0, r3
 8018912:	f001 fd1b 	bl	801a34c <RFW_Init>
 8018916:	4603      	mov	r3, r0
 8018918:	2b00      	cmp	r3, #0
 801891a:	d002      	beq.n	8018922 <RadioSetRxGenericConfig+0x182>
            return -1;
 801891c:	f04f 33ff 	mov.w	r3, #4294967295
 8018920:	e0fa      	b.n	8018b18 <RadioSetRxGenericConfig+0x378>
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8018922:	4b51      	ldr	r3, [pc, #324]	@ (8018a68 <RadioSetRxGenericConfig+0x2c8>)
 8018924:	2200      	movs	r2, #0
 8018926:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8018928:	4b4f      	ldr	r3, [pc, #316]	@ (8018a68 <RadioSetRxGenericConfig+0x2c8>)
 801892a:	2201      	movs	r2, #1
 801892c:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801892e:	4b4e      	ldr	r3, [pc, #312]	@ (8018a68 <RadioSetRxGenericConfig+0x2c8>)
 8018930:	2200      	movs	r2, #0
 8018932:	755a      	strb	r2, [r3, #21]
        {
 8018934:	e00e      	b.n	8018954 <RadioSetRxGenericConfig+0x1b4>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8018936:	68bb      	ldr	r3, [r7, #8]
 8018938:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 801893c:	4b4a      	ldr	r3, [pc, #296]	@ (8018a68 <RadioSetRxGenericConfig+0x2c8>)
 801893e:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8018940:	68bb      	ldr	r3, [r7, #8]
 8018942:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 8018946:	4b48      	ldr	r3, [pc, #288]	@ (8018a68 <RadioSetRxGenericConfig+0x2c8>)
 8018948:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 801894a:	68bb      	ldr	r3, [r7, #8]
 801894c:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8018950:	4b45      	ldr	r3, [pc, #276]	@ (8018a68 <RadioSetRxGenericConfig+0x2c8>)
 8018952:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8018954:	f7ff fa45 	bl	8017de2 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8018958:	2000      	movs	r0, #0
 801895a:	f7fe fbef 	bl	801713c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801895e:	4845      	ldr	r0, [pc, #276]	@ (8018a74 <RadioSetRxGenericConfig+0x2d4>)
 8018960:	f001 f816 	bl	8019990 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018964:	4844      	ldr	r0, [pc, #272]	@ (8018a78 <RadioSetRxGenericConfig+0x2d8>)
 8018966:	f001 f8e1 	bl	8019b2c <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801896a:	f107 0320 	add.w	r3, r7, #32
 801896e:	4618      	mov	r0, r3
 8018970:	f000 fba5 	bl	80190be <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8018974:	68bb      	ldr	r3, [r7, #8]
 8018976:	8b9b      	ldrh	r3, [r3, #28]
 8018978:	4618      	mov	r0, r3
 801897a:	f000 fbef 	bl	801915c <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 801897e:	68bb      	ldr	r3, [r7, #8]
 8018980:	8b1b      	ldrh	r3, [r3, #24]
 8018982:	4618      	mov	r0, r3
 8018984:	f000 fbca 	bl	801911c <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 8018988:	683b      	ldr	r3, [r7, #0]
 801898a:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 801898e:	fb03 f202 	mul.w	r2, r3, r2
 8018992:	68bb      	ldr	r3, [r7, #8]
 8018994:	689b      	ldr	r3, [r3, #8]
 8018996:	fbb2 f3f3 	udiv	r3, r2, r3
 801899a:	4a33      	ldr	r2, [pc, #204]	@ (8018a68 <RadioSetRxGenericConfig+0x2c8>)
 801899c:	6093      	str	r3, [r2, #8]
        break;
 801899e:	e0ba      	b.n	8018b16 <RadioSetRxGenericConfig+0x376>
        if( config->lora.PreambleLen == 0 )
 80189a0:	68bb      	ldr	r3, [r7, #8]
 80189a2:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 80189a4:	2b00      	cmp	r3, #0
 80189a6:	d102      	bne.n	80189ae <RadioSetRxGenericConfig+0x20e>
            return -1;
 80189a8:	f04f 33ff 	mov.w	r3, #4294967295
 80189ac:	e0b4      	b.n	8018b18 <RadioSetRxGenericConfig+0x378>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 80189ae:	68bb      	ldr	r3, [r7, #8]
 80189b0:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80189b4:	2b01      	cmp	r3, #1
 80189b6:	d104      	bne.n	80189c2 <RadioSetRxGenericConfig+0x222>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 80189b8:	68bb      	ldr	r3, [r7, #8]
 80189ba:	695b      	ldr	r3, [r3, #20]
 80189bc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80189c0:	e002      	b.n	80189c8 <RadioSetRxGenericConfig+0x228>
            MaxPayloadLength = 0xFF;
 80189c2:	23ff      	movs	r3, #255	@ 0xff
 80189c4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 80189c8:	68bb      	ldr	r3, [r7, #8]
 80189ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80189cc:	2b00      	cmp	r3, #0
 80189ce:	bf14      	ite	ne
 80189d0:	2301      	movne	r3, #1
 80189d2:	2300      	moveq	r3, #0
 80189d4:	b2db      	uxtb	r3, r3
 80189d6:	4618      	mov	r0, r3
 80189d8:	f000 fd3a 	bl	8019450 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 80189dc:	683b      	ldr	r3, [r7, #0]
 80189de:	b2db      	uxtb	r3, r3
 80189e0:	4618      	mov	r0, r3
 80189e2:	f000 fd44 	bl	801946e <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80189e6:	4b20      	ldr	r3, [pc, #128]	@ (8018a68 <RadioSetRxGenericConfig+0x2c8>)
 80189e8:	2201      	movs	r2, #1
 80189ea:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 80189ee:	68bb      	ldr	r3, [r7, #8]
 80189f0:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80189f4:	4b1c      	ldr	r3, [pc, #112]	@ (8018a68 <RadioSetRxGenericConfig+0x2c8>)
 80189f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 80189fa:	68bb      	ldr	r3, [r7, #8]
 80189fc:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 8018a00:	4b19      	ldr	r3, [pc, #100]	@ (8018a68 <RadioSetRxGenericConfig+0x2c8>)
 8018a02:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8018a06:	68bb      	ldr	r3, [r7, #8]
 8018a08:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 8018a0c:	4b16      	ldr	r3, [pc, #88]	@ (8018a68 <RadioSetRxGenericConfig+0x2c8>)
 8018a0e:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 8018a12:	68bb      	ldr	r3, [r7, #8]
 8018a14:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8018a18:	2b02      	cmp	r3, #2
 8018a1a:	d010      	beq.n	8018a3e <RadioSetRxGenericConfig+0x29e>
 8018a1c:	2b02      	cmp	r3, #2
 8018a1e:	dc2d      	bgt.n	8018a7c <RadioSetRxGenericConfig+0x2dc>
 8018a20:	2b00      	cmp	r3, #0
 8018a22:	d002      	beq.n	8018a2a <RadioSetRxGenericConfig+0x28a>
 8018a24:	2b01      	cmp	r3, #1
 8018a26:	d005      	beq.n	8018a34 <RadioSetRxGenericConfig+0x294>
            break;
 8018a28:	e028      	b.n	8018a7c <RadioSetRxGenericConfig+0x2dc>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8018a2a:	4b0f      	ldr	r3, [pc, #60]	@ (8018a68 <RadioSetRxGenericConfig+0x2c8>)
 8018a2c:	2200      	movs	r2, #0
 8018a2e:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8018a32:	e024      	b.n	8018a7e <RadioSetRxGenericConfig+0x2de>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8018a34:	4b0c      	ldr	r3, [pc, #48]	@ (8018a68 <RadioSetRxGenericConfig+0x2c8>)
 8018a36:	2201      	movs	r2, #1
 8018a38:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8018a3c:	e01f      	b.n	8018a7e <RadioSetRxGenericConfig+0x2de>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8018a3e:	68bb      	ldr	r3, [r7, #8]
 8018a40:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8018a44:	2b0b      	cmp	r3, #11
 8018a46:	d004      	beq.n	8018a52 <RadioSetRxGenericConfig+0x2b2>
 8018a48:	68bb      	ldr	r3, [r7, #8]
 8018a4a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8018a4e:	2b0c      	cmp	r3, #12
 8018a50:	d104      	bne.n	8018a5c <RadioSetRxGenericConfig+0x2bc>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8018a52:	4b05      	ldr	r3, [pc, #20]	@ (8018a68 <RadioSetRxGenericConfig+0x2c8>)
 8018a54:	2201      	movs	r2, #1
 8018a56:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8018a5a:	e010      	b.n	8018a7e <RadioSetRxGenericConfig+0x2de>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8018a5c:	4b02      	ldr	r3, [pc, #8]	@ (8018a68 <RadioSetRxGenericConfig+0x2c8>)
 8018a5e:	2200      	movs	r2, #0
 8018a60:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8018a64:	e00b      	b.n	8018a7e <RadioSetRxGenericConfig+0x2de>
 8018a66:	bf00      	nop
 8018a68:	20001cd8 	.word	0x20001cd8
 8018a6c:	20001cd4 	.word	0x20001cd4
 8018a70:	20001d4c 	.word	0x20001d4c
 8018a74:	20001d10 	.word	0x20001d10
 8018a78:	20001ce6 	.word	0x20001ce6
            break;
 8018a7c:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8018a7e:	4b28      	ldr	r3, [pc, #160]	@ (8018b20 <RadioSetRxGenericConfig+0x380>)
 8018a80:	2201      	movs	r2, #1
 8018a82:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8018a84:	68bb      	ldr	r3, [r7, #8]
 8018a86:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 8018a88:	4b25      	ldr	r3, [pc, #148]	@ (8018b20 <RadioSetRxGenericConfig+0x380>)
 8018a8a:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8018a8c:	68bb      	ldr	r3, [r7, #8]
 8018a8e:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 8018a92:	4b23      	ldr	r3, [pc, #140]	@ (8018b20 <RadioSetRxGenericConfig+0x380>)
 8018a94:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8018a96:	4a22      	ldr	r2, [pc, #136]	@ (8018b20 <RadioSetRxGenericConfig+0x380>)
 8018a98:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8018a9c:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8018a9e:	68bb      	ldr	r3, [r7, #8]
 8018aa0:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 8018aa4:	4b1e      	ldr	r3, [pc, #120]	@ (8018b20 <RadioSetRxGenericConfig+0x380>)
 8018aa6:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8018aaa:	68bb      	ldr	r3, [r7, #8]
 8018aac:	f893 2035 	ldrb.w	r2, [r3, #53]	@ 0x35
 8018ab0:	4b1b      	ldr	r3, [pc, #108]	@ (8018b20 <RadioSetRxGenericConfig+0x380>)
 8018ab2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        RadioStandby( );
 8018ab6:	f7ff f994 	bl	8017de2 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8018aba:	2001      	movs	r0, #1
 8018abc:	f7fe fb3e 	bl	801713c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018ac0:	4818      	ldr	r0, [pc, #96]	@ (8018b24 <RadioSetRxGenericConfig+0x384>)
 8018ac2:	f000 ff65 	bl	8019990 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018ac6:	4818      	ldr	r0, [pc, #96]	@ (8018b28 <RadioSetRxGenericConfig+0x388>)
 8018ac8:	f001 f830 	bl	8019b2c <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8018acc:	4b14      	ldr	r3, [pc, #80]	@ (8018b20 <RadioSetRxGenericConfig+0x380>)
 8018ace:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8018ad2:	2b01      	cmp	r3, #1
 8018ad4:	d10d      	bne.n	8018af2 <RadioSetRxGenericConfig+0x352>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8018ad6:	f240 7036 	movw	r0, #1846	@ 0x736
 8018ada:	f001 f981 	bl	8019de0 <SUBGRF_ReadRegister>
 8018ade:	4603      	mov	r3, r0
 8018ae0:	f023 0304 	bic.w	r3, r3, #4
 8018ae4:	b2db      	uxtb	r3, r3
 8018ae6:	4619      	mov	r1, r3
 8018ae8:	f240 7036 	movw	r0, #1846	@ 0x736
 8018aec:	f001 f964 	bl	8019db8 <SUBGRF_WriteRegister>
 8018af0:	e00c      	b.n	8018b0c <RadioSetRxGenericConfig+0x36c>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8018af2:	f240 7036 	movw	r0, #1846	@ 0x736
 8018af6:	f001 f973 	bl	8019de0 <SUBGRF_ReadRegister>
 8018afa:	4603      	mov	r3, r0
 8018afc:	f043 0304 	orr.w	r3, r3, #4
 8018b00:	b2db      	uxtb	r3, r3
 8018b02:	4619      	mov	r1, r3
 8018b04:	f240 7036 	movw	r0, #1846	@ 0x736
 8018b08:	f001 f956 	bl	8019db8 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 8018b0c:	4b04      	ldr	r3, [pc, #16]	@ (8018b20 <RadioSetRxGenericConfig+0x380>)
 8018b0e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018b12:	609a      	str	r2, [r3, #8]
        break;
 8018b14:	bf00      	nop
    }
    return status;
 8018b16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8018b18:	4618      	mov	r0, r3
 8018b1a:	3730      	adds	r7, #48	@ 0x30
 8018b1c:	46bd      	mov	sp, r7
 8018b1e:	bd80      	pop	{r7, pc}
 8018b20:	20001cd8 	.word	0x20001cd8
 8018b24:	20001d10 	.word	0x20001d10
 8018b28:	20001ce6 	.word	0x20001ce6

08018b2c <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 8018b2c:	b580      	push	{r7, lr}
 8018b2e:	b08e      	sub	sp, #56	@ 0x38
 8018b30:	af00      	add	r7, sp, #0
 8018b32:	60b9      	str	r1, [r7, #8]
 8018b34:	607b      	str	r3, [r7, #4]
 8018b36:	4603      	mov	r3, r0
 8018b38:	73fb      	strb	r3, [r7, #15]
 8018b3a:	4613      	mov	r3, r2
 8018b3c:	73bb      	strb	r3, [r7, #14]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 8018b3e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8018b42:	2200      	movs	r2, #0
 8018b44:	601a      	str	r2, [r3, #0]
 8018b46:	605a      	str	r2, [r3, #4]
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8018b48:	f001 fc0d 	bl	801a366 <RFW_DeInit>
    switch( modem )
 8018b4c:	7bfb      	ldrb	r3, [r7, #15]
 8018b4e:	2b03      	cmp	r3, #3
 8018b50:	f200 8205 	bhi.w	8018f5e <RadioSetTxGenericConfig+0x432>
 8018b54:	a201      	add	r2, pc, #4	@ (adr r2, 8018b5c <RadioSetTxGenericConfig+0x30>)
 8018b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018b5a:	bf00      	nop
 8018b5c:	08018ce1 	.word	0x08018ce1
 8018b60:	08018e29 	.word	0x08018e29
 8018b64:	08018f21 	.word	0x08018f21
 8018b68:	08018b6d 	.word	0x08018b6d
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 8018b6c:	68bb      	ldr	r3, [r7, #8]
 8018b6e:	7c9b      	ldrb	r3, [r3, #18]
 8018b70:	2b08      	cmp	r3, #8
 8018b72:	d902      	bls.n	8018b7a <RadioSetTxGenericConfig+0x4e>
        {
            return -1;
 8018b74:	f04f 33ff 	mov.w	r3, #4294967295
 8018b78:	e206      	b.n	8018f88 <RadioSetTxGenericConfig+0x45c>
        }
        else
        {
          RADIO_MEMCPY8(syncword, config->msk.SyncWord, config->msk.SyncWordLength);
 8018b7a:	68bb      	ldr	r3, [r7, #8]
 8018b7c:	6899      	ldr	r1, [r3, #8]
 8018b7e:	68bb      	ldr	r3, [r7, #8]
 8018b80:	7c9b      	ldrb	r3, [r3, #18]
 8018b82:	461a      	mov	r2, r3
 8018b84:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8018b88:	4618      	mov	r0, r3
 8018b8a:	f001 fcdf 	bl	801a54c <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 8018b8e:	68bb      	ldr	r3, [r7, #8]
 8018b90:	681b      	ldr	r3, [r3, #0]
 8018b92:	2b00      	cmp	r3, #0
 8018b94:	d102      	bne.n	8018b9c <RadioSetTxGenericConfig+0x70>
        {
            return -1;
 8018b96:	f04f 33ff 	mov.w	r3, #4294967295
 8018b9a:	e1f5      	b.n	8018f88 <RadioSetTxGenericConfig+0x45c>
        }
        else if (config->msk.BitRate<= 10000)
 8018b9c:	68bb      	ldr	r3, [r7, #8]
 8018b9e:	681b      	ldr	r3, [r3, #0]
 8018ba0:	f242 7210 	movw	r2, #10000	@ 0x2710
 8018ba4:	4293      	cmp	r3, r2
 8018ba6:	d813      	bhi.n	8018bd0 <RadioSetTxGenericConfig+0xa4>
        {
          /*max msk modulator datarate is 10kbps*/
          radio_modem= MODEM_MSK;
 8018ba8:	2302      	movs	r3, #2
 8018baa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
          SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 8018bae:	4b99      	ldr	r3, [pc, #612]	@ (8018e14 <RadioSetTxGenericConfig+0x2e8>)
 8018bb0:	2203      	movs	r2, #3
 8018bb2:	739a      	strb	r2, [r3, #14]
          SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 8018bb4:	4b97      	ldr	r3, [pc, #604]	@ (8018e14 <RadioSetTxGenericConfig+0x2e8>)
 8018bb6:	2203      	movs	r2, #3
 8018bb8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
          SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8018bbc:	68bb      	ldr	r3, [r7, #8]
 8018bbe:	681b      	ldr	r3, [r3, #0]
 8018bc0:	4a94      	ldr	r2, [pc, #592]	@ (8018e14 <RadioSetTxGenericConfig+0x2e8>)
 8018bc2:	63d3      	str	r3, [r2, #60]	@ 0x3c
          SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8018bc4:	68bb      	ldr	r3, [r7, #8]
 8018bc6:	7cda      	ldrb	r2, [r3, #19]
 8018bc8:	4b92      	ldr	r3, [pc, #584]	@ (8018e14 <RadioSetTxGenericConfig+0x2e8>)
 8018bca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8018bce:	e017      	b.n	8018c00 <RadioSetTxGenericConfig+0xd4>
        }
        else
        {
          radio_modem= MODEM_FSK;
 8018bd0:	2300      	movs	r3, #0
 8018bd2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
          SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8018bd6:	4b8f      	ldr	r3, [pc, #572]	@ (8018e14 <RadioSetTxGenericConfig+0x2e8>)
 8018bd8:	2200      	movs	r2, #0
 8018bda:	739a      	strb	r2, [r3, #14]
          SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8018bdc:	4b8d      	ldr	r3, [pc, #564]	@ (8018e14 <RadioSetTxGenericConfig+0x2e8>)
 8018bde:	2200      	movs	r2, #0
 8018be0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
          SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8018be4:	68bb      	ldr	r3, [r7, #8]
 8018be6:	681b      	ldr	r3, [r3, #0]
 8018be8:	4a8a      	ldr	r2, [pc, #552]	@ (8018e14 <RadioSetTxGenericConfig+0x2e8>)
 8018bea:	63d3      	str	r3, [r2, #60]	@ 0x3c
          SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8018bec:	68bb      	ldr	r3, [r7, #8]
 8018bee:	7cda      	ldrb	r2, [r3, #19]
 8018bf0:	4b88      	ldr	r3, [pc, #544]	@ (8018e14 <RadioSetTxGenericConfig+0x2e8>)
 8018bf2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
          /*do msk with gfsk modulator*/
          SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate/4;
 8018bf6:	68bb      	ldr	r3, [r7, #8]
 8018bf8:	681b      	ldr	r3, [r3, #0]
 8018bfa:	089b      	lsrs	r3, r3, #2
 8018bfc:	4a85      	ldr	r2, [pc, #532]	@ (8018e14 <RadioSetTxGenericConfig+0x2e8>)
 8018bfe:	6413      	str	r3, [r2, #64]	@ 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 8018c00:	68bb      	ldr	r3, [r7, #8]
 8018c02:	685b      	ldr	r3, [r3, #4]
 8018c04:	b29b      	uxth	r3, r3
 8018c06:	00db      	lsls	r3, r3, #3
 8018c08:	b29a      	uxth	r2, r3
 8018c0a:	4b82      	ldr	r3, [pc, #520]	@ (8018e14 <RadioSetTxGenericConfig+0x2e8>)
 8018c0c:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8018c0e:	4b81      	ldr	r3, [pc, #516]	@ (8018e14 <RadioSetTxGenericConfig+0x2e8>)
 8018c10:	2204      	movs	r2, #4
 8018c12:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 8018c14:	68bb      	ldr	r3, [r7, #8]
 8018c16:	7c9b      	ldrb	r3, [r3, #18]
 8018c18:	00db      	lsls	r3, r3, #3
 8018c1a:	b2da      	uxtb	r2, r3
 8018c1c:	4b7d      	ldr	r3, [pc, #500]	@ (8018e14 <RadioSetTxGenericConfig+0x2e8>)
 8018c1e:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8018c20:	4b7c      	ldr	r3, [pc, #496]	@ (8018e14 <RadioSetTxGenericConfig+0x2e8>)
 8018c22:	2200      	movs	r2, #0
 8018c24:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8018c26:	68bb      	ldr	r3, [r7, #8]
 8018c28:	7d9b      	ldrb	r3, [r3, #22]
 8018c2a:	2b02      	cmp	r3, #2
 8018c2c:	d003      	beq.n	8018c36 <RadioSetTxGenericConfig+0x10a>
 8018c2e:	68bb      	ldr	r3, [r7, #8]
 8018c30:	7d1b      	ldrb	r3, [r3, #20]
 8018c32:	2b02      	cmp	r3, #2
 8018c34:	d12b      	bne.n	8018c8e <RadioSetTxGenericConfig+0x162>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8018c36:	68bb      	ldr	r3, [r7, #8]
 8018c38:	7d5b      	ldrb	r3, [r3, #21]
 8018c3a:	2bf1      	cmp	r3, #241	@ 0xf1
 8018c3c:	d00a      	beq.n	8018c54 <RadioSetTxGenericConfig+0x128>
 8018c3e:	68bb      	ldr	r3, [r7, #8]
 8018c40:	7d5b      	ldrb	r3, [r3, #21]
 8018c42:	2bf2      	cmp	r3, #242	@ 0xf2
 8018c44:	d006      	beq.n	8018c54 <RadioSetTxGenericConfig+0x128>
 8018c46:	68bb      	ldr	r3, [r7, #8]
 8018c48:	7d5b      	ldrb	r3, [r3, #21]
 8018c4a:	2b01      	cmp	r3, #1
 8018c4c:	d002      	beq.n	8018c54 <RadioSetTxGenericConfig+0x128>
            {
                return -1;
 8018c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8018c52:	e199      	b.n	8018f88 <RadioSetTxGenericConfig+0x45c>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig= config;
 8018c54:	68bb      	ldr	r3, [r7, #8]
 8018c56:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 8018c58:	2301      	movs	r3, #1
 8018c5a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8018c5e:	4b6e      	ldr	r3, [pc, #440]	@ (8018e18 <RadioSetTxGenericConfig+0x2ec>)
 8018c60:	6819      	ldr	r1, [r3, #0]
 8018c62:	f107 0320 	add.w	r3, r7, #32
 8018c66:	4a6d      	ldr	r2, [pc, #436]	@ (8018e1c <RadioSetTxGenericConfig+0x2f0>)
 8018c68:	4618      	mov	r0, r3
 8018c6a:	f001 fb6f 	bl	801a34c <RFW_Init>
 8018c6e:	4603      	mov	r3, r0
 8018c70:	2b00      	cmp	r3, #0
 8018c72:	d002      	beq.n	8018c7a <RadioSetTxGenericConfig+0x14e>
            {
              return -1;
 8018c74:	f04f 33ff 	mov.w	r3, #4294967295
 8018c78:	e186      	b.n	8018f88 <RadioSetTxGenericConfig+0x45c>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8018c7a:	4b66      	ldr	r3, [pc, #408]	@ (8018e14 <RadioSetTxGenericConfig+0x2e8>)
 8018c7c:	2200      	movs	r2, #0
 8018c7e:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 8018c80:	4b64      	ldr	r3, [pc, #400]	@ (8018e14 <RadioSetTxGenericConfig+0x2e8>)
 8018c82:	2201      	movs	r2, #1
 8018c84:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8018c86:	4b63      	ldr	r3, [pc, #396]	@ (8018e14 <RadioSetTxGenericConfig+0x2e8>)
 8018c88:	2200      	movs	r2, #0
 8018c8a:	755a      	strb	r2, [r3, #21]
        {
 8018c8c:	e00b      	b.n	8018ca6 <RadioSetTxGenericConfig+0x17a>
        }
        else
        {
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 8018c8e:	68bb      	ldr	r3, [r7, #8]
 8018c90:	7d5a      	ldrb	r2, [r3, #21]
 8018c92:	4b60      	ldr	r3, [pc, #384]	@ (8018e14 <RadioSetTxGenericConfig+0x2e8>)
 8018c94:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 8018c96:	68bb      	ldr	r3, [r7, #8]
 8018c98:	7d9a      	ldrb	r2, [r3, #22]
 8018c9a:	4b5e      	ldr	r3, [pc, #376]	@ (8018e14 <RadioSetTxGenericConfig+0x2e8>)
 8018c9c:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 8018c9e:	68bb      	ldr	r3, [r7, #8]
 8018ca0:	7d1a      	ldrb	r2, [r3, #20]
 8018ca2:	4b5c      	ldr	r3, [pc, #368]	@ (8018e14 <RadioSetTxGenericConfig+0x2e8>)
 8018ca4:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8018ca6:	f7ff f89c 	bl	8017de2 <RadioStandby>
        RadioSetModem( radio_modem );
 8018caa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8018cae:	4618      	mov	r0, r3
 8018cb0:	f7fe fa44 	bl	801713c <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018cb4:	485a      	ldr	r0, [pc, #360]	@ (8018e20 <RadioSetTxGenericConfig+0x2f4>)
 8018cb6:	f000 fe6b 	bl	8019990 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018cba:	485a      	ldr	r0, [pc, #360]	@ (8018e24 <RadioSetTxGenericConfig+0x2f8>)
 8018cbc:	f000 ff36 	bl	8019b2c <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8018cc0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8018cc4:	4618      	mov	r0, r3
 8018cc6:	f000 f9fa 	bl	80190be <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 8018cca:	68bb      	ldr	r3, [r7, #8]
 8018ccc:	8a1b      	ldrh	r3, [r3, #16]
 8018cce:	4618      	mov	r0, r3
 8018cd0:	f000 fa44 	bl	801915c <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->msk.CrcPolynomial );
 8018cd4:	68bb      	ldr	r3, [r7, #8]
 8018cd6:	899b      	ldrh	r3, [r3, #12]
 8018cd8:	4618      	mov	r0, r3
 8018cda:	f000 fa1f 	bl	801911c <SUBGRF_SetCrcPolynomial>
        break;
 8018cde:	e13f      	b.n	8018f60 <RadioSetTxGenericConfig+0x434>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 8018ce0:	68bb      	ldr	r3, [r7, #8]
 8018ce2:	681b      	ldr	r3, [r3, #0]
 8018ce4:	2b00      	cmp	r3, #0
 8018ce6:	d102      	bne.n	8018cee <RadioSetTxGenericConfig+0x1c2>
        {
            return -1;
 8018ce8:	f04f 33ff 	mov.w	r3, #4294967295
 8018cec:	e14c      	b.n	8018f88 <RadioSetTxGenericConfig+0x45c>
        }
        if( config->fsk.SyncWordLength > 8 )
 8018cee:	68bb      	ldr	r3, [r7, #8]
 8018cf0:	7c9b      	ldrb	r3, [r3, #18]
 8018cf2:	2b08      	cmp	r3, #8
 8018cf4:	d902      	bls.n	8018cfc <RadioSetTxGenericConfig+0x1d0>
        {
            return -1;
 8018cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8018cfa:	e145      	b.n	8018f88 <RadioSetTxGenericConfig+0x45c>
        }
        else
        {
            RADIO_MEMCPY8(syncword, config->fsk.SyncWord, config->fsk.SyncWordLength);
 8018cfc:	68bb      	ldr	r3, [r7, #8]
 8018cfe:	6899      	ldr	r1, [r3, #8]
 8018d00:	68bb      	ldr	r3, [r7, #8]
 8018d02:	7c9b      	ldrb	r3, [r3, #18]
 8018d04:	461a      	mov	r2, r3
 8018d06:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8018d0a:	4618      	mov	r0, r3
 8018d0c:	f001 fc1e 	bl	801a54c <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8018d10:	4b40      	ldr	r3, [pc, #256]	@ (8018e14 <RadioSetTxGenericConfig+0x2e8>)
 8018d12:	2200      	movs	r2, #0
 8018d14:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8018d18:	68bb      	ldr	r3, [r7, #8]
 8018d1a:	681b      	ldr	r3, [r3, #0]
 8018d1c:	4a3d      	ldr	r2, [pc, #244]	@ (8018e14 <RadioSetTxGenericConfig+0x2e8>)
 8018d1e:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8018d20:	68bb      	ldr	r3, [r7, #8]
 8018d22:	7cda      	ldrb	r2, [r3, #19]
 8018d24:	4b3b      	ldr	r3, [pc, #236]	@ (8018e14 <RadioSetTxGenericConfig+0x2e8>)
 8018d26:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 8018d2a:	68bb      	ldr	r3, [r7, #8]
 8018d2c:	699b      	ldr	r3, [r3, #24]
 8018d2e:	4a39      	ldr	r2, [pc, #228]	@ (8018e14 <RadioSetTxGenericConfig+0x2e8>)
 8018d30:	6413      	str	r3, [r2, #64]	@ 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8018d32:	4b38      	ldr	r3, [pc, #224]	@ (8018e14 <RadioSetTxGenericConfig+0x2e8>)
 8018d34:	2200      	movs	r2, #0
 8018d36:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 8018d38:	68bb      	ldr	r3, [r7, #8]
 8018d3a:	685b      	ldr	r3, [r3, #4]
 8018d3c:	b29b      	uxth	r3, r3
 8018d3e:	00db      	lsls	r3, r3, #3
 8018d40:	b29a      	uxth	r2, r3
 8018d42:	4b34      	ldr	r3, [pc, #208]	@ (8018e14 <RadioSetTxGenericConfig+0x2e8>)
 8018d44:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8018d46:	4b33      	ldr	r3, [pc, #204]	@ (8018e14 <RadioSetTxGenericConfig+0x2e8>)
 8018d48:	2204      	movs	r2, #4
 8018d4a:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8018d4c:	68bb      	ldr	r3, [r7, #8]
 8018d4e:	7c9b      	ldrb	r3, [r3, #18]
 8018d50:	00db      	lsls	r3, r3, #3
 8018d52:	b2da      	uxtb	r2, r3
 8018d54:	4b2f      	ldr	r3, [pc, #188]	@ (8018e14 <RadioSetTxGenericConfig+0x2e8>)
 8018d56:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8018d58:	4b2e      	ldr	r3, [pc, #184]	@ (8018e14 <RadioSetTxGenericConfig+0x2e8>)
 8018d5a:	2200      	movs	r2, #0
 8018d5c:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8018d5e:	68bb      	ldr	r3, [r7, #8]
 8018d60:	7d9b      	ldrb	r3, [r3, #22]
 8018d62:	2b02      	cmp	r3, #2
 8018d64:	d003      	beq.n	8018d6e <RadioSetTxGenericConfig+0x242>
 8018d66:	68bb      	ldr	r3, [r7, #8]
 8018d68:	7d1b      	ldrb	r3, [r3, #20]
 8018d6a:	2b02      	cmp	r3, #2
 8018d6c:	d12a      	bne.n	8018dc4 <RadioSetTxGenericConfig+0x298>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8018d6e:	68bb      	ldr	r3, [r7, #8]
 8018d70:	7d5b      	ldrb	r3, [r3, #21]
 8018d72:	2bf1      	cmp	r3, #241	@ 0xf1
 8018d74:	d00a      	beq.n	8018d8c <RadioSetTxGenericConfig+0x260>
 8018d76:	68bb      	ldr	r3, [r7, #8]
 8018d78:	7d5b      	ldrb	r3, [r3, #21]
 8018d7a:	2bf2      	cmp	r3, #242	@ 0xf2
 8018d7c:	d006      	beq.n	8018d8c <RadioSetTxGenericConfig+0x260>
 8018d7e:	68bb      	ldr	r3, [r7, #8]
 8018d80:	7d5b      	ldrb	r3, [r3, #21]
 8018d82:	2b01      	cmp	r3, #1
 8018d84:	d002      	beq.n	8018d8c <RadioSetTxGenericConfig+0x260>
            {
                return -1;
 8018d86:	f04f 33ff 	mov.w	r3, #4294967295
 8018d8a:	e0fd      	b.n	8018f88 <RadioSetTxGenericConfig+0x45c>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 8018d8c:	2301      	movs	r3, #1
 8018d8e:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 8018d90:	68bb      	ldr	r3, [r7, #8]
 8018d92:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8018d94:	4b20      	ldr	r3, [pc, #128]	@ (8018e18 <RadioSetTxGenericConfig+0x2ec>)
 8018d96:	6819      	ldr	r1, [r3, #0]
 8018d98:	f107 0314 	add.w	r3, r7, #20
 8018d9c:	4a1f      	ldr	r2, [pc, #124]	@ (8018e1c <RadioSetTxGenericConfig+0x2f0>)
 8018d9e:	4618      	mov	r0, r3
 8018da0:	f001 fad4 	bl	801a34c <RFW_Init>
 8018da4:	4603      	mov	r3, r0
 8018da6:	2b00      	cmp	r3, #0
 8018da8:	d002      	beq.n	8018db0 <RadioSetTxGenericConfig+0x284>
            {
              return -1;
 8018daa:	f04f 33ff 	mov.w	r3, #4294967295
 8018dae:	e0eb      	b.n	8018f88 <RadioSetTxGenericConfig+0x45c>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8018db0:	4b18      	ldr	r3, [pc, #96]	@ (8018e14 <RadioSetTxGenericConfig+0x2e8>)
 8018db2:	2200      	movs	r2, #0
 8018db4:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 8018db6:	4b17      	ldr	r3, [pc, #92]	@ (8018e14 <RadioSetTxGenericConfig+0x2e8>)
 8018db8:	2201      	movs	r2, #1
 8018dba:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8018dbc:	4b15      	ldr	r3, [pc, #84]	@ (8018e14 <RadioSetTxGenericConfig+0x2e8>)
 8018dbe:	2200      	movs	r2, #0
 8018dc0:	755a      	strb	r2, [r3, #21]
        {
 8018dc2:	e00b      	b.n	8018ddc <RadioSetTxGenericConfig+0x2b0>
        }
        else
        {
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8018dc4:	68bb      	ldr	r3, [r7, #8]
 8018dc6:	7d5a      	ldrb	r2, [r3, #21]
 8018dc8:	4b12      	ldr	r3, [pc, #72]	@ (8018e14 <RadioSetTxGenericConfig+0x2e8>)
 8018dca:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8018dcc:	68bb      	ldr	r3, [r7, #8]
 8018dce:	7d9a      	ldrb	r2, [r3, #22]
 8018dd0:	4b10      	ldr	r3, [pc, #64]	@ (8018e14 <RadioSetTxGenericConfig+0x2e8>)
 8018dd2:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 8018dd4:	68bb      	ldr	r3, [r7, #8]
 8018dd6:	7d1a      	ldrb	r2, [r3, #20]
 8018dd8:	4b0e      	ldr	r3, [pc, #56]	@ (8018e14 <RadioSetTxGenericConfig+0x2e8>)
 8018dda:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8018ddc:	f7ff f801 	bl	8017de2 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8018de0:	2000      	movs	r0, #0
 8018de2:	f7fe f9ab 	bl	801713c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018de6:	480e      	ldr	r0, [pc, #56]	@ (8018e20 <RadioSetTxGenericConfig+0x2f4>)
 8018de8:	f000 fdd2 	bl	8019990 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018dec:	480d      	ldr	r0, [pc, #52]	@ (8018e24 <RadioSetTxGenericConfig+0x2f8>)
 8018dee:	f000 fe9d 	bl	8019b2c <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8018df2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8018df6:	4618      	mov	r0, r3
 8018df8:	f000 f961 	bl	80190be <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8018dfc:	68bb      	ldr	r3, [r7, #8]
 8018dfe:	8a1b      	ldrh	r3, [r3, #16]
 8018e00:	4618      	mov	r0, r3
 8018e02:	f000 f9ab 	bl	801915c <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 8018e06:	68bb      	ldr	r3, [r7, #8]
 8018e08:	899b      	ldrh	r3, [r3, #12]
 8018e0a:	4618      	mov	r0, r3
 8018e0c:	f000 f986 	bl	801911c <SUBGRF_SetCrcPolynomial>
        break;
 8018e10:	e0a6      	b.n	8018f60 <RadioSetTxGenericConfig+0x434>
 8018e12:	bf00      	nop
 8018e14:	20001cd8 	.word	0x20001cd8
 8018e18:	20001cd4 	.word	0x20001cd4
 8018e1c:	20001d34 	.word	0x20001d34
 8018e20:	20001d10 	.word	0x20001d10
 8018e24:	20001ce6 	.word	0x20001ce6
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8018e28:	4b59      	ldr	r3, [pc, #356]	@ (8018f90 <RadioSetTxGenericConfig+0x464>)
 8018e2a:	2201      	movs	r2, #1
 8018e2c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8018e30:	68bb      	ldr	r3, [r7, #8]
 8018e32:	781a      	ldrb	r2, [r3, #0]
 8018e34:	4b56      	ldr	r3, [pc, #344]	@ (8018f90 <RadioSetTxGenericConfig+0x464>)
 8018e36:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8018e3a:	68bb      	ldr	r3, [r7, #8]
 8018e3c:	785a      	ldrb	r2, [r3, #1]
 8018e3e:	4b54      	ldr	r3, [pc, #336]	@ (8018f90 <RadioSetTxGenericConfig+0x464>)
 8018e40:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8018e44:	68bb      	ldr	r3, [r7, #8]
 8018e46:	789a      	ldrb	r2, [r3, #2]
 8018e48:	4b51      	ldr	r3, [pc, #324]	@ (8018f90 <RadioSetTxGenericConfig+0x464>)
 8018e4a:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 8018e4e:	68bb      	ldr	r3, [r7, #8]
 8018e50:	78db      	ldrb	r3, [r3, #3]
 8018e52:	2b02      	cmp	r3, #2
 8018e54:	d010      	beq.n	8018e78 <RadioSetTxGenericConfig+0x34c>
 8018e56:	2b02      	cmp	r3, #2
 8018e58:	dc20      	bgt.n	8018e9c <RadioSetTxGenericConfig+0x370>
 8018e5a:	2b00      	cmp	r3, #0
 8018e5c:	d002      	beq.n	8018e64 <RadioSetTxGenericConfig+0x338>
 8018e5e:	2b01      	cmp	r3, #1
 8018e60:	d005      	beq.n	8018e6e <RadioSetTxGenericConfig+0x342>
            {
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
          default:
            break;
 8018e62:	e01b      	b.n	8018e9c <RadioSetTxGenericConfig+0x370>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8018e64:	4b4a      	ldr	r3, [pc, #296]	@ (8018f90 <RadioSetTxGenericConfig+0x464>)
 8018e66:	2200      	movs	r2, #0
 8018e68:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8018e6c:	e017      	b.n	8018e9e <RadioSetTxGenericConfig+0x372>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8018e6e:	4b48      	ldr	r3, [pc, #288]	@ (8018f90 <RadioSetTxGenericConfig+0x464>)
 8018e70:	2201      	movs	r2, #1
 8018e72:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8018e76:	e012      	b.n	8018e9e <RadioSetTxGenericConfig+0x372>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8018e78:	68bb      	ldr	r3, [r7, #8]
 8018e7a:	781b      	ldrb	r3, [r3, #0]
 8018e7c:	2b0b      	cmp	r3, #11
 8018e7e:	d003      	beq.n	8018e88 <RadioSetTxGenericConfig+0x35c>
 8018e80:	68bb      	ldr	r3, [r7, #8]
 8018e82:	781b      	ldrb	r3, [r3, #0]
 8018e84:	2b0c      	cmp	r3, #12
 8018e86:	d104      	bne.n	8018e92 <RadioSetTxGenericConfig+0x366>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8018e88:	4b41      	ldr	r3, [pc, #260]	@ (8018f90 <RadioSetTxGenericConfig+0x464>)
 8018e8a:	2201      	movs	r2, #1
 8018e8c:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8018e90:	e005      	b.n	8018e9e <RadioSetTxGenericConfig+0x372>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8018e92:	4b3f      	ldr	r3, [pc, #252]	@ (8018f90 <RadioSetTxGenericConfig+0x464>)
 8018e94:	2200      	movs	r2, #0
 8018e96:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8018e9a:	e000      	b.n	8018e9e <RadioSetTxGenericConfig+0x372>
            break;
 8018e9c:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8018e9e:	4b3c      	ldr	r3, [pc, #240]	@ (8018f90 <RadioSetTxGenericConfig+0x464>)
 8018ea0:	2201      	movs	r2, #1
 8018ea2:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8018ea4:	68bb      	ldr	r3, [r7, #8]
 8018ea6:	889a      	ldrh	r2, [r3, #4]
 8018ea8:	4b39      	ldr	r3, [pc, #228]	@ (8018f90 <RadioSetTxGenericConfig+0x464>)
 8018eaa:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8018eac:	68bb      	ldr	r3, [r7, #8]
 8018eae:	799a      	ldrb	r2, [r3, #6]
 8018eb0:	4b37      	ldr	r3, [pc, #220]	@ (8018f90 <RadioSetTxGenericConfig+0x464>)
 8018eb2:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8018eb4:	68bb      	ldr	r3, [r7, #8]
 8018eb6:	79da      	ldrb	r2, [r3, #7]
 8018eb8:	4b35      	ldr	r3, [pc, #212]	@ (8018f90 <RadioSetTxGenericConfig+0x464>)
 8018eba:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8018ebe:	68bb      	ldr	r3, [r7, #8]
 8018ec0:	7a1a      	ldrb	r2, [r3, #8]
 8018ec2:	4b33      	ldr	r3, [pc, #204]	@ (8018f90 <RadioSetTxGenericConfig+0x464>)
 8018ec4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        RadioStandby( );
 8018ec8:	f7fe ff8b 	bl	8017de2 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8018ecc:	2001      	movs	r0, #1
 8018ece:	f7fe f935 	bl	801713c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018ed2:	4830      	ldr	r0, [pc, #192]	@ (8018f94 <RadioSetTxGenericConfig+0x468>)
 8018ed4:	f000 fd5c 	bl	8019990 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018ed8:	482f      	ldr	r0, [pc, #188]	@ (8018f98 <RadioSetTxGenericConfig+0x46c>)
 8018eda:	f000 fe27 	bl	8019b2c <SUBGRF_SetPacketParams>

        // WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 8018ede:	4b2c      	ldr	r3, [pc, #176]	@ (8018f90 <RadioSetTxGenericConfig+0x464>)
 8018ee0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8018ee4:	2b06      	cmp	r3, #6
 8018ee6:	d10d      	bne.n	8018f04 <RadioSetTxGenericConfig+0x3d8>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8018ee8:	f640 0089 	movw	r0, #2185	@ 0x889
 8018eec:	f000 ff78 	bl	8019de0 <SUBGRF_ReadRegister>
 8018ef0:	4603      	mov	r3, r0
 8018ef2:	f023 0304 	bic.w	r3, r3, #4
 8018ef6:	b2db      	uxtb	r3, r3
 8018ef8:	4619      	mov	r1, r3
 8018efa:	f640 0089 	movw	r0, #2185	@ 0x889
 8018efe:	f000 ff5b 	bl	8019db8 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        // WORKAROUND END
        break;
 8018f02:	e02d      	b.n	8018f60 <RadioSetTxGenericConfig+0x434>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8018f04:	f640 0089 	movw	r0, #2185	@ 0x889
 8018f08:	f000 ff6a 	bl	8019de0 <SUBGRF_ReadRegister>
 8018f0c:	4603      	mov	r3, r0
 8018f0e:	f043 0304 	orr.w	r3, r3, #4
 8018f12:	b2db      	uxtb	r3, r3
 8018f14:	4619      	mov	r1, r3
 8018f16:	f640 0089 	movw	r0, #2185	@ 0x889
 8018f1a:	f000 ff4d 	bl	8019db8 <SUBGRF_WriteRegister>
        break;
 8018f1e:	e01f      	b.n	8018f60 <RadioSetTxGenericConfig+0x434>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 8018f20:	68bb      	ldr	r3, [r7, #8]
 8018f22:	681b      	ldr	r3, [r3, #0]
 8018f24:	2b00      	cmp	r3, #0
 8018f26:	d004      	beq.n	8018f32 <RadioSetTxGenericConfig+0x406>
 8018f28:	68bb      	ldr	r3, [r7, #8]
 8018f2a:	681b      	ldr	r3, [r3, #0]
 8018f2c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8018f30:	d902      	bls.n	8018f38 <RadioSetTxGenericConfig+0x40c>
        {
            return -1;
 8018f32:	f04f 33ff 	mov.w	r3, #4294967295
 8018f36:	e027      	b.n	8018f88 <RadioSetTxGenericConfig+0x45c>
        }
        RadioSetModem( MODEM_BPSK );
 8018f38:	2003      	movs	r0, #3
 8018f3a:	f7fe f8ff 	bl	801713c <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8018f3e:	4b14      	ldr	r3, [pc, #80]	@ (8018f90 <RadioSetTxGenericConfig+0x464>)
 8018f40:	2202      	movs	r2, #2
 8018f42:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 8018f46:	68bb      	ldr	r3, [r7, #8]
 8018f48:	681b      	ldr	r3, [r3, #0]
 8018f4a:	4a11      	ldr	r2, [pc, #68]	@ (8018f90 <RadioSetTxGenericConfig+0x464>)
 8018f4c:	6493      	str	r3, [r2, #72]	@ 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8018f4e:	4b10      	ldr	r3, [pc, #64]	@ (8018f90 <RadioSetTxGenericConfig+0x464>)
 8018f50:	2216      	movs	r2, #22
 8018f52:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018f56:	480f      	ldr	r0, [pc, #60]	@ (8018f94 <RadioSetTxGenericConfig+0x468>)
 8018f58:	f000 fd1a 	bl	8019990 <SUBGRF_SetModulationParams>
        break;
 8018f5c:	e000      	b.n	8018f60 <RadioSetTxGenericConfig+0x434>
    default:
        break;
 8018f5e:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8018f60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8018f64:	4618      	mov	r0, r3
 8018f66:	f001 f843 	bl	8019ff0 <SUBGRF_SetRfTxPower>
 8018f6a:	4603      	mov	r3, r0
 8018f6c:	461a      	mov	r2, r3
 8018f6e:	4b08      	ldr	r3, [pc, #32]	@ (8018f90 <RadioSetTxGenericConfig+0x464>)
 8018f70:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8018f74:	4b06      	ldr	r3, [pc, #24]	@ (8018f90 <RadioSetTxGenericConfig+0x464>)
 8018f76:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8018f7a:	4618      	mov	r0, r3
 8018f7c:	f001 fa07 	bl	801a38e <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8018f80:	4a03      	ldr	r2, [pc, #12]	@ (8018f90 <RadioSetTxGenericConfig+0x464>)
 8018f82:	687b      	ldr	r3, [r7, #4]
 8018f84:	6053      	str	r3, [r2, #4]
    return 0;
 8018f86:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8018f88:	4618      	mov	r0, r3
 8018f8a:	3738      	adds	r7, #56	@ 0x38
 8018f8c:	46bd      	mov	sp, r7
 8018f8e:	bd80      	pop	{r7, pc}
 8018f90:	20001cd8 	.word	0x20001cd8
 8018f94:	20001d10 	.word	0x20001d10
 8018f98:	20001ce6 	.word	0x20001ce6

08018f9c <SUBGRF_Init>:
static void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size );

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8018f9c:	b580      	push	{r7, lr}
 8018f9e:	b084      	sub	sp, #16
 8018fa0:	af00      	add	r7, sp, #0
 8018fa2:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 8018fa4:	687b      	ldr	r3, [r7, #4]
 8018fa6:	2b00      	cmp	r3, #0
 8018fa8:	d002      	beq.n	8018fb0 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 8018faa:	4a1a      	ldr	r2, [pc, #104]	@ (8019014 <SUBGRF_Init+0x78>)
 8018fac:	687b      	ldr	r3, [r7, #4]
 8018fae:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 8018fb0:	f7e8 ff4e 	bl	8001e50 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8018fb4:	2002      	movs	r0, #2
 8018fb6:	f001 f8e7 	bl	801a188 <Radio_SMPS_Set>

    ImageCalibrated = false;
 8018fba:	4b17      	ldr	r3, [pc, #92]	@ (8019018 <SUBGRF_Init+0x7c>)
 8018fbc:	2200      	movs	r2, #0
 8018fbe:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 8018fc0:	2000      	movs	r0, #0
 8018fc2:	f000 f979 	bl	80192b8 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 8018fc6:	f7f1 fd8f 	bl	800aae8 <RBI_IsTCXO>
 8018fca:	4603      	mov	r3, r0
 8018fcc:	2b01      	cmp	r3, #1
 8018fce:	d10e      	bne.n	8018fee <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8018fd0:	2140      	movs	r1, #64	@ 0x40
 8018fd2:	2001      	movs	r0, #1
 8018fd4:	f000 fb80 	bl	80196d8 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8018fd8:	2100      	movs	r1, #0
 8018fda:	f640 1011 	movw	r0, #2321	@ 0x911
 8018fde:	f000 feeb 	bl	8019db8 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 8018fe2:	237f      	movs	r3, #127	@ 0x7f
 8018fe4:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 8018fe6:	7b38      	ldrb	r0, [r7, #12]
 8018fe8:	f000 fa87 	bl	80194fa <SUBGRF_Calibrate>
 8018fec:	e009      	b.n	8019002 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8018fee:	2120      	movs	r1, #32
 8018ff0:	f640 1011 	movw	r0, #2321	@ 0x911
 8018ff4:	f000 fee0 	bl	8019db8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8018ff8:	2120      	movs	r1, #32
 8018ffa:	f640 1012 	movw	r0, #2322	@ 0x912
 8018ffe:	f000 fedb 	bl	8019db8 <SUBGRF_WriteRegister>
    }
    /* Init RF Switch */
    RBI_Init();
 8019002:	f7f1 fd55 	bl	800aab0 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 8019006:	4b05      	ldr	r3, [pc, #20]	@ (801901c <SUBGRF_Init+0x80>)
 8019008:	2201      	movs	r2, #1
 801900a:	701a      	strb	r2, [r3, #0]
}
 801900c:	bf00      	nop
 801900e:	3710      	adds	r7, #16
 8019010:	46bd      	mov	sp, r7
 8019012:	bd80      	pop	{r7, pc}
 8019014:	20001d70 	.word	0x20001d70
 8019018:	20001d6c 	.word	0x20001d6c
 801901c:	20001d64 	.word	0x20001d64

08019020 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 8019020:	b480      	push	{r7}
 8019022:	af00      	add	r7, sp, #0
    return OperatingMode;
 8019024:	4b02      	ldr	r3, [pc, #8]	@ (8019030 <SUBGRF_GetOperatingMode+0x10>)
 8019026:	781b      	ldrb	r3, [r3, #0]
}
 8019028:	4618      	mov	r0, r3
 801902a:	46bd      	mov	sp, r7
 801902c:	bc80      	pop	{r7}
 801902e:	4770      	bx	lr
 8019030:	20001d64 	.word	0x20001d64

08019034 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8019034:	b580      	push	{r7, lr}
 8019036:	b082      	sub	sp, #8
 8019038:	af00      	add	r7, sp, #0
 801903a:	6078      	str	r0, [r7, #4]
 801903c:	460b      	mov	r3, r1
 801903e:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8019040:	78fb      	ldrb	r3, [r7, #3]
 8019042:	461a      	mov	r2, r3
 8019044:	6879      	ldr	r1, [r7, #4]
 8019046:	2000      	movs	r0, #0
 8019048:	f000 ff22 	bl	8019e90 <SUBGRF_WriteBuffer>
}
 801904c:	bf00      	nop
 801904e:	3708      	adds	r7, #8
 8019050:	46bd      	mov	sp, r7
 8019052:	bd80      	pop	{r7, pc}

08019054 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 8019054:	b580      	push	{r7, lr}
 8019056:	b086      	sub	sp, #24
 8019058:	af00      	add	r7, sp, #0
 801905a:	60f8      	str	r0, [r7, #12]
 801905c:	60b9      	str	r1, [r7, #8]
 801905e:	4613      	mov	r3, r2
 8019060:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 8019062:	2300      	movs	r3, #0
 8019064:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 8019066:	f107 0317 	add.w	r3, r7, #23
 801906a:	4619      	mov	r1, r3
 801906c:	68b8      	ldr	r0, [r7, #8]
 801906e:	f000 fe25 	bl	8019cbc <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8019072:	68bb      	ldr	r3, [r7, #8]
 8019074:	781b      	ldrb	r3, [r3, #0]
 8019076:	79fa      	ldrb	r2, [r7, #7]
 8019078:	429a      	cmp	r2, r3
 801907a:	d201      	bcs.n	8019080 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 801907c:	2301      	movs	r3, #1
 801907e:	e007      	b.n	8019090 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8019080:	7df8      	ldrb	r0, [r7, #23]
 8019082:	68bb      	ldr	r3, [r7, #8]
 8019084:	781b      	ldrb	r3, [r3, #0]
 8019086:	461a      	mov	r2, r3
 8019088:	68f9      	ldr	r1, [r7, #12]
 801908a:	f000 ff23 	bl	8019ed4 <SUBGRF_ReadBuffer>

    return 0;
 801908e:	2300      	movs	r3, #0
}
 8019090:	4618      	mov	r0, r3
 8019092:	3718      	adds	r7, #24
 8019094:	46bd      	mov	sp, r7
 8019096:	bd80      	pop	{r7, pc}

08019098 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 8019098:	b580      	push	{r7, lr}
 801909a:	b084      	sub	sp, #16
 801909c:	af00      	add	r7, sp, #0
 801909e:	60f8      	str	r0, [r7, #12]
 80190a0:	460b      	mov	r3, r1
 80190a2:	607a      	str	r2, [r7, #4]
 80190a4:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 80190a6:	7afb      	ldrb	r3, [r7, #11]
 80190a8:	4619      	mov	r1, r3
 80190aa:	68f8      	ldr	r0, [r7, #12]
 80190ac:	f7ff ffc2 	bl	8019034 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 80190b0:	6878      	ldr	r0, [r7, #4]
 80190b2:	f000 f91d 	bl	80192f0 <SUBGRF_SetTx>
}
 80190b6:	bf00      	nop
 80190b8:	3710      	adds	r7, #16
 80190ba:	46bd      	mov	sp, r7
 80190bc:	bd80      	pop	{r7, pc}

080190be <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 80190be:	b580      	push	{r7, lr}
 80190c0:	b082      	sub	sp, #8
 80190c2:	af00      	add	r7, sp, #0
 80190c4:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 80190c6:	2208      	movs	r2, #8
 80190c8:	6879      	ldr	r1, [r7, #4]
 80190ca:	f44f 60d8 	mov.w	r0, #1728	@ 0x6c0
 80190ce:	f000 fe9b 	bl	8019e08 <SUBGRF_WriteRegisters>
    return 0;
 80190d2:	2300      	movs	r3, #0
}
 80190d4:	4618      	mov	r0, r3
 80190d6:	3708      	adds	r7, #8
 80190d8:	46bd      	mov	sp, r7
 80190da:	bd80      	pop	{r7, pc}

080190dc <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 80190dc:	b580      	push	{r7, lr}
 80190de:	b084      	sub	sp, #16
 80190e0:	af00      	add	r7, sp, #0
 80190e2:	4603      	mov	r3, r0
 80190e4:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 80190e6:	88fb      	ldrh	r3, [r7, #6]
 80190e8:	0a1b      	lsrs	r3, r3, #8
 80190ea:	b29b      	uxth	r3, r3
 80190ec:	b2db      	uxtb	r3, r3
 80190ee:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 80190f0:	88fb      	ldrh	r3, [r7, #6]
 80190f2:	b2db      	uxtb	r3, r3
 80190f4:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 80190f6:	f000 fb73 	bl	80197e0 <SUBGRF_GetPacketType>
 80190fa:	4603      	mov	r3, r0
 80190fc:	2b00      	cmp	r3, #0
 80190fe:	d108      	bne.n	8019112 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8019100:	f107 030c 	add.w	r3, r7, #12
 8019104:	2202      	movs	r2, #2
 8019106:	4619      	mov	r1, r3
 8019108:	f240 60bc 	movw	r0, #1724	@ 0x6bc
 801910c:	f000 fe7c 	bl	8019e08 <SUBGRF_WriteRegisters>
            break;
 8019110:	e000      	b.n	8019114 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 8019112:	bf00      	nop
    }
}
 8019114:	bf00      	nop
 8019116:	3710      	adds	r7, #16
 8019118:	46bd      	mov	sp, r7
 801911a:	bd80      	pop	{r7, pc}

0801911c <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 801911c:	b580      	push	{r7, lr}
 801911e:	b084      	sub	sp, #16
 8019120:	af00      	add	r7, sp, #0
 8019122:	4603      	mov	r3, r0
 8019124:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8019126:	88fb      	ldrh	r3, [r7, #6]
 8019128:	0a1b      	lsrs	r3, r3, #8
 801912a:	b29b      	uxth	r3, r3
 801912c:	b2db      	uxtb	r3, r3
 801912e:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8019130:	88fb      	ldrh	r3, [r7, #6]
 8019132:	b2db      	uxtb	r3, r3
 8019134:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8019136:	f000 fb53 	bl	80197e0 <SUBGRF_GetPacketType>
 801913a:	4603      	mov	r3, r0
 801913c:	2b00      	cmp	r3, #0
 801913e:	d108      	bne.n	8019152 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8019140:	f107 030c 	add.w	r3, r7, #12
 8019144:	2202      	movs	r2, #2
 8019146:	4619      	mov	r1, r3
 8019148:	f240 60be 	movw	r0, #1726	@ 0x6be
 801914c:	f000 fe5c 	bl	8019e08 <SUBGRF_WriteRegisters>
            break;
 8019150:	e000      	b.n	8019154 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 8019152:	bf00      	nop
    }
}
 8019154:	bf00      	nop
 8019156:	3710      	adds	r7, #16
 8019158:	46bd      	mov	sp, r7
 801915a:	bd80      	pop	{r7, pc}

0801915c <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 801915c:	b580      	push	{r7, lr}
 801915e:	b084      	sub	sp, #16
 8019160:	af00      	add	r7, sp, #0
 8019162:	4603      	mov	r3, r0
 8019164:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 8019166:	2300      	movs	r3, #0
 8019168:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 801916a:	f000 fb39 	bl	80197e0 <SUBGRF_GetPacketType>
 801916e:	4603      	mov	r3, r0
 8019170:	2b00      	cmp	r3, #0
 8019172:	d121      	bne.n	80191b8 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8019174:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 8019178:	f000 fe32 	bl	8019de0 <SUBGRF_ReadRegister>
 801917c:	4603      	mov	r3, r0
 801917e:	f023 0301 	bic.w	r3, r3, #1
 8019182:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8019184:	88fb      	ldrh	r3, [r7, #6]
 8019186:	0a1b      	lsrs	r3, r3, #8
 8019188:	b29b      	uxth	r3, r3
 801918a:	b25b      	sxtb	r3, r3
 801918c:	f003 0301 	and.w	r3, r3, #1
 8019190:	b25a      	sxtb	r2, r3
 8019192:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019196:	4313      	orrs	r3, r2
 8019198:	b25b      	sxtb	r3, r3
 801919a:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 801919c:	7bfb      	ldrb	r3, [r7, #15]
 801919e:	4619      	mov	r1, r3
 80191a0:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 80191a4:	f000 fe08 	bl	8019db8 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 80191a8:	88fb      	ldrh	r3, [r7, #6]
 80191aa:	b2db      	uxtb	r3, r3
 80191ac:	4619      	mov	r1, r3
 80191ae:	f240 60b9 	movw	r0, #1721	@ 0x6b9
 80191b2:	f000 fe01 	bl	8019db8 <SUBGRF_WriteRegister>
            break;
 80191b6:	e000      	b.n	80191ba <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 80191b8:	bf00      	nop
    }
}
 80191ba:	bf00      	nop
 80191bc:	3710      	adds	r7, #16
 80191be:	46bd      	mov	sp, r7
 80191c0:	bd80      	pop	{r7, pc}

080191c2 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 80191c2:	b580      	push	{r7, lr}
 80191c4:	b082      	sub	sp, #8
 80191c6:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 80191c8:	2300      	movs	r3, #0
 80191ca:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 80191cc:	2300      	movs	r3, #0
 80191ce:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 80191d0:	2300      	movs	r3, #0
 80191d2:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 80191d4:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 80191d8:	f000 fe02 	bl	8019de0 <SUBGRF_ReadRegister>
 80191dc:	4603      	mov	r3, r0
 80191de:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 80191e0:	79fb      	ldrb	r3, [r7, #7]
 80191e2:	f023 0301 	bic.w	r3, r3, #1
 80191e6:	b2db      	uxtb	r3, r3
 80191e8:	4619      	mov	r1, r3
 80191ea:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 80191ee:	f000 fde3 	bl	8019db8 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 80191f2:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 80191f6:	f000 fdf3 	bl	8019de0 <SUBGRF_ReadRegister>
 80191fa:	4603      	mov	r3, r0
 80191fc:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 80191fe:	79bb      	ldrb	r3, [r7, #6]
 8019200:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8019204:	b2db      	uxtb	r3, r3
 8019206:	4619      	mov	r1, r3
 8019208:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 801920c:	f000 fdd4 	bl	8019db8 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8019210:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8019214:	f000 f88c 	bl	8019330 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8019218:	463b      	mov	r3, r7
 801921a:	2204      	movs	r2, #4
 801921c:	4619      	mov	r1, r3
 801921e:	f640 0019 	movw	r0, #2073	@ 0x819
 8019222:	f000 fe13 	bl	8019e4c <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 8019226:	2000      	movs	r0, #0
 8019228:	f000 f846 	bl	80192b8 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 801922c:	79fb      	ldrb	r3, [r7, #7]
 801922e:	4619      	mov	r1, r3
 8019230:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 8019234:	f000 fdc0 	bl	8019db8 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8019238:	79bb      	ldrb	r3, [r7, #6]
 801923a:	4619      	mov	r1, r3
 801923c:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8019240:	f000 fdba 	bl	8019db8 <SUBGRF_WriteRegister>

    return number;
 8019244:	683b      	ldr	r3, [r7, #0]
}
 8019246:	4618      	mov	r0, r3
 8019248:	3708      	adds	r7, #8
 801924a:	46bd      	mov	sp, r7
 801924c:	bd80      	pop	{r7, pc}
	...

08019250 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 8019250:	b580      	push	{r7, lr}
 8019252:	b084      	sub	sp, #16
 8019254:	af00      	add	r7, sp, #0
 8019256:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 8019258:	2000      	movs	r0, #0
 801925a:	f7f1 fc30 	bl	800aabe <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801925e:	2002      	movs	r0, #2
 8019260:	f000 ff92 	bl	801a188 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8019264:	793b      	ldrb	r3, [r7, #4]
 8019266:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801926a:	b2db      	uxtb	r3, r3
 801926c:	b25b      	sxtb	r3, r3
 801926e:	009b      	lsls	r3, r3, #2
 8019270:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8019272:	793b      	ldrb	r3, [r7, #4]
 8019274:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8019278:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801927a:	b25b      	sxtb	r3, r3
 801927c:	005b      	lsls	r3, r3, #1
 801927e:	b25b      	sxtb	r3, r3
 8019280:	4313      	orrs	r3, r2
 8019282:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8019284:	793b      	ldrb	r3, [r7, #4]
 8019286:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801928a:	b2db      	uxtb	r3, r3
 801928c:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801928e:	4313      	orrs	r3, r2
 8019290:	b25b      	sxtb	r3, r3
 8019292:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8019294:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 8019296:	f107 030f 	add.w	r3, r7, #15
 801929a:	2201      	movs	r2, #1
 801929c:	4619      	mov	r1, r3
 801929e:	2084      	movs	r0, #132	@ 0x84
 80192a0:	f000 fe3a 	bl	8019f18 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 80192a4:	4b03      	ldr	r3, [pc, #12]	@ (80192b4 <SUBGRF_SetSleep+0x64>)
 80192a6:	2200      	movs	r2, #0
 80192a8:	701a      	strb	r2, [r3, #0]
}
 80192aa:	bf00      	nop
 80192ac:	3710      	adds	r7, #16
 80192ae:	46bd      	mov	sp, r7
 80192b0:	bd80      	pop	{r7, pc}
 80192b2:	bf00      	nop
 80192b4:	20001d64 	.word	0x20001d64

080192b8 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 80192b8:	b580      	push	{r7, lr}
 80192ba:	b082      	sub	sp, #8
 80192bc:	af00      	add	r7, sp, #0
 80192be:	4603      	mov	r3, r0
 80192c0:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 80192c2:	1dfb      	adds	r3, r7, #7
 80192c4:	2201      	movs	r2, #1
 80192c6:	4619      	mov	r1, r3
 80192c8:	2080      	movs	r0, #128	@ 0x80
 80192ca:	f000 fe25 	bl	8019f18 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 80192ce:	79fb      	ldrb	r3, [r7, #7]
 80192d0:	2b00      	cmp	r3, #0
 80192d2:	d103      	bne.n	80192dc <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 80192d4:	4b05      	ldr	r3, [pc, #20]	@ (80192ec <SUBGRF_SetStandby+0x34>)
 80192d6:	2201      	movs	r2, #1
 80192d8:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 80192da:	e002      	b.n	80192e2 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 80192dc:	4b03      	ldr	r3, [pc, #12]	@ (80192ec <SUBGRF_SetStandby+0x34>)
 80192de:	2202      	movs	r2, #2
 80192e0:	701a      	strb	r2, [r3, #0]
}
 80192e2:	bf00      	nop
 80192e4:	3708      	adds	r7, #8
 80192e6:	46bd      	mov	sp, r7
 80192e8:	bd80      	pop	{r7, pc}
 80192ea:	bf00      	nop
 80192ec:	20001d64 	.word	0x20001d64

080192f0 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 80192f0:	b580      	push	{r7, lr}
 80192f2:	b084      	sub	sp, #16
 80192f4:	af00      	add	r7, sp, #0
 80192f6:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 80192f8:	4b0c      	ldr	r3, [pc, #48]	@ (801932c <SUBGRF_SetTx+0x3c>)
 80192fa:	2204      	movs	r2, #4
 80192fc:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80192fe:	687b      	ldr	r3, [r7, #4]
 8019300:	0c1b      	lsrs	r3, r3, #16
 8019302:	b2db      	uxtb	r3, r3
 8019304:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8019306:	687b      	ldr	r3, [r7, #4]
 8019308:	0a1b      	lsrs	r3, r3, #8
 801930a:	b2db      	uxtb	r3, r3
 801930c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801930e:	687b      	ldr	r3, [r7, #4]
 8019310:	b2db      	uxtb	r3, r3
 8019312:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8019314:	f107 030c 	add.w	r3, r7, #12
 8019318:	2203      	movs	r2, #3
 801931a:	4619      	mov	r1, r3
 801931c:	2083      	movs	r0, #131	@ 0x83
 801931e:	f000 fdfb 	bl	8019f18 <SUBGRF_WriteCommand>
}
 8019322:	bf00      	nop
 8019324:	3710      	adds	r7, #16
 8019326:	46bd      	mov	sp, r7
 8019328:	bd80      	pop	{r7, pc}
 801932a:	bf00      	nop
 801932c:	20001d64 	.word	0x20001d64

08019330 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 8019330:	b580      	push	{r7, lr}
 8019332:	b084      	sub	sp, #16
 8019334:	af00      	add	r7, sp, #0
 8019336:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8019338:	4b0c      	ldr	r3, [pc, #48]	@ (801936c <SUBGRF_SetRx+0x3c>)
 801933a:	2205      	movs	r2, #5
 801933c:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801933e:	687b      	ldr	r3, [r7, #4]
 8019340:	0c1b      	lsrs	r3, r3, #16
 8019342:	b2db      	uxtb	r3, r3
 8019344:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8019346:	687b      	ldr	r3, [r7, #4]
 8019348:	0a1b      	lsrs	r3, r3, #8
 801934a:	b2db      	uxtb	r3, r3
 801934c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801934e:	687b      	ldr	r3, [r7, #4]
 8019350:	b2db      	uxtb	r3, r3
 8019352:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8019354:	f107 030c 	add.w	r3, r7, #12
 8019358:	2203      	movs	r2, #3
 801935a:	4619      	mov	r1, r3
 801935c:	2082      	movs	r0, #130	@ 0x82
 801935e:	f000 fddb 	bl	8019f18 <SUBGRF_WriteCommand>
}
 8019362:	bf00      	nop
 8019364:	3710      	adds	r7, #16
 8019366:	46bd      	mov	sp, r7
 8019368:	bd80      	pop	{r7, pc}
 801936a:	bf00      	nop
 801936c:	20001d64 	.word	0x20001d64

08019370 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 8019370:	b580      	push	{r7, lr}
 8019372:	b084      	sub	sp, #16
 8019374:	af00      	add	r7, sp, #0
 8019376:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8019378:	4b0e      	ldr	r3, [pc, #56]	@ (80193b4 <SUBGRF_SetRxBoosted+0x44>)
 801937a:	2205      	movs	r2, #5
 801937c:	701a      	strb	r2, [r3, #0]

    /* ST_WORKAROUND_BEGIN: Sigfox patch > 0x96 replaced by 0x97 */
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 801937e:	2197      	movs	r1, #151	@ 0x97
 8019380:	f640 00ac 	movw	r0, #2220	@ 0x8ac
 8019384:	f000 fd18 	bl	8019db8 <SUBGRF_WriteRegister>
    /* ST_WORKAROUND_END */

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8019388:	687b      	ldr	r3, [r7, #4]
 801938a:	0c1b      	lsrs	r3, r3, #16
 801938c:	b2db      	uxtb	r3, r3
 801938e:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8019390:	687b      	ldr	r3, [r7, #4]
 8019392:	0a1b      	lsrs	r3, r3, #8
 8019394:	b2db      	uxtb	r3, r3
 8019396:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8019398:	687b      	ldr	r3, [r7, #4]
 801939a:	b2db      	uxtb	r3, r3
 801939c:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801939e:	f107 030c 	add.w	r3, r7, #12
 80193a2:	2203      	movs	r2, #3
 80193a4:	4619      	mov	r1, r3
 80193a6:	2082      	movs	r0, #130	@ 0x82
 80193a8:	f000 fdb6 	bl	8019f18 <SUBGRF_WriteCommand>
}
 80193ac:	bf00      	nop
 80193ae:	3710      	adds	r7, #16
 80193b0:	46bd      	mov	sp, r7
 80193b2:	bd80      	pop	{r7, pc}
 80193b4:	20001d64 	.word	0x20001d64

080193b8 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 80193b8:	b580      	push	{r7, lr}
 80193ba:	b084      	sub	sp, #16
 80193bc:	af00      	add	r7, sp, #0
 80193be:	6078      	str	r0, [r7, #4]
 80193c0:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 80193c2:	687b      	ldr	r3, [r7, #4]
 80193c4:	0c1b      	lsrs	r3, r3, #16
 80193c6:	b2db      	uxtb	r3, r3
 80193c8:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 80193ca:	687b      	ldr	r3, [r7, #4]
 80193cc:	0a1b      	lsrs	r3, r3, #8
 80193ce:	b2db      	uxtb	r3, r3
 80193d0:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 80193d2:	687b      	ldr	r3, [r7, #4]
 80193d4:	b2db      	uxtb	r3, r3
 80193d6:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 80193d8:	683b      	ldr	r3, [r7, #0]
 80193da:	0c1b      	lsrs	r3, r3, #16
 80193dc:	b2db      	uxtb	r3, r3
 80193de:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 80193e0:	683b      	ldr	r3, [r7, #0]
 80193e2:	0a1b      	lsrs	r3, r3, #8
 80193e4:	b2db      	uxtb	r3, r3
 80193e6:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 80193e8:	683b      	ldr	r3, [r7, #0]
 80193ea:	b2db      	uxtb	r3, r3
 80193ec:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 80193ee:	f107 0308 	add.w	r3, r7, #8
 80193f2:	2206      	movs	r2, #6
 80193f4:	4619      	mov	r1, r3
 80193f6:	2094      	movs	r0, #148	@ 0x94
 80193f8:	f000 fd8e 	bl	8019f18 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 80193fc:	4b03      	ldr	r3, [pc, #12]	@ (801940c <SUBGRF_SetRxDutyCycle+0x54>)
 80193fe:	2206      	movs	r2, #6
 8019400:	701a      	strb	r2, [r3, #0]
}
 8019402:	bf00      	nop
 8019404:	3710      	adds	r7, #16
 8019406:	46bd      	mov	sp, r7
 8019408:	bd80      	pop	{r7, pc}
 801940a:	bf00      	nop
 801940c:	20001d64 	.word	0x20001d64

08019410 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 8019410:	b580      	push	{r7, lr}
 8019412:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 8019414:	2200      	movs	r2, #0
 8019416:	2100      	movs	r1, #0
 8019418:	20c5      	movs	r0, #197	@ 0xc5
 801941a:	f000 fd7d 	bl	8019f18 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 801941e:	4b02      	ldr	r3, [pc, #8]	@ (8019428 <SUBGRF_SetCad+0x18>)
 8019420:	2207      	movs	r2, #7
 8019422:	701a      	strb	r2, [r3, #0]
}
 8019424:	bf00      	nop
 8019426:	bd80      	pop	{r7, pc}
 8019428:	20001d64 	.word	0x20001d64

0801942c <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 801942c:	b580      	push	{r7, lr}
 801942e:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8019430:	2200      	movs	r2, #0
 8019432:	2100      	movs	r1, #0
 8019434:	20d1      	movs	r0, #209	@ 0xd1
 8019436:	f000 fd6f 	bl	8019f18 <SUBGRF_WriteCommand>
}
 801943a:	bf00      	nop
 801943c:	bd80      	pop	{r7, pc}

0801943e <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 801943e:	b580      	push	{r7, lr}
 8019440:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 8019442:	2200      	movs	r2, #0
 8019444:	2100      	movs	r1, #0
 8019446:	20d2      	movs	r0, #210	@ 0xd2
 8019448:	f000 fd66 	bl	8019f18 <SUBGRF_WriteCommand>
}
 801944c:	bf00      	nop
 801944e:	bd80      	pop	{r7, pc}

08019450 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 8019450:	b580      	push	{r7, lr}
 8019452:	b082      	sub	sp, #8
 8019454:	af00      	add	r7, sp, #0
 8019456:	4603      	mov	r3, r0
 8019458:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 801945a:	1dfb      	adds	r3, r7, #7
 801945c:	2201      	movs	r2, #1
 801945e:	4619      	mov	r1, r3
 8019460:	209f      	movs	r0, #159	@ 0x9f
 8019462:	f000 fd59 	bl	8019f18 <SUBGRF_WriteCommand>
}
 8019466:	bf00      	nop
 8019468:	3708      	adds	r7, #8
 801946a:	46bd      	mov	sp, r7
 801946c:	bd80      	pop	{r7, pc}

0801946e <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 801946e:	b580      	push	{r7, lr}
 8019470:	b084      	sub	sp, #16
 8019472:	af00      	add	r7, sp, #0
 8019474:	4603      	mov	r3, r0
 8019476:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 8019478:	1dfb      	adds	r3, r7, #7
 801947a:	2201      	movs	r2, #1
 801947c:	4619      	mov	r1, r3
 801947e:	20a0      	movs	r0, #160	@ 0xa0
 8019480:	f000 fd4a 	bl	8019f18 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 8019484:	79fb      	ldrb	r3, [r7, #7]
 8019486:	2b3f      	cmp	r3, #63	@ 0x3f
 8019488:	d91c      	bls.n	80194c4 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 801948a:	79fb      	ldrb	r3, [r7, #7]
 801948c:	085b      	lsrs	r3, r3, #1
 801948e:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 8019490:	2300      	movs	r3, #0
 8019492:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 8019494:	2300      	movs	r3, #0
 8019496:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 8019498:	e005      	b.n	80194a6 <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 801949a:	7bfb      	ldrb	r3, [r7, #15]
 801949c:	089b      	lsrs	r3, r3, #2
 801949e:	73fb      	strb	r3, [r7, #15]
            exp++;
 80194a0:	7bbb      	ldrb	r3, [r7, #14]
 80194a2:	3301      	adds	r3, #1
 80194a4:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 80194a6:	7bfb      	ldrb	r3, [r7, #15]
 80194a8:	2b1f      	cmp	r3, #31
 80194aa:	d8f6      	bhi.n	801949a <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 80194ac:	7bfb      	ldrb	r3, [r7, #15]
 80194ae:	00db      	lsls	r3, r3, #3
 80194b0:	b2da      	uxtb	r2, r3
 80194b2:	7bbb      	ldrb	r3, [r7, #14]
 80194b4:	4413      	add	r3, r2
 80194b6:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 80194b8:	7b7b      	ldrb	r3, [r7, #13]
 80194ba:	4619      	mov	r1, r3
 80194bc:	f240 7006 	movw	r0, #1798	@ 0x706
 80194c0:	f000 fc7a 	bl	8019db8 <SUBGRF_WriteRegister>
    }
}
 80194c4:	bf00      	nop
 80194c6:	3710      	adds	r7, #16
 80194c8:	46bd      	mov	sp, r7
 80194ca:	bd80      	pop	{r7, pc}

080194cc <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 80194cc:	b580      	push	{r7, lr}
 80194ce:	b082      	sub	sp, #8
 80194d0:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Get RegulatorMode value from RBI */
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 80194d2:	f7f1 fb10 	bl	800aaf6 <RBI_IsDCDC>
 80194d6:	4603      	mov	r3, r0
 80194d8:	2b01      	cmp	r3, #1
 80194da:	d102      	bne.n	80194e2 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 80194dc:	2301      	movs	r3, #1
 80194de:	71fb      	strb	r3, [r7, #7]
 80194e0:	e001      	b.n	80194e6 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 80194e2:	2300      	movs	r3, #0
 80194e4:	71fb      	strb	r3, [r7, #7]
    }
    /* ST_WORKAROUND_END */
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 80194e6:	1dfb      	adds	r3, r7, #7
 80194e8:	2201      	movs	r2, #1
 80194ea:	4619      	mov	r1, r3
 80194ec:	2096      	movs	r0, #150	@ 0x96
 80194ee:	f000 fd13 	bl	8019f18 <SUBGRF_WriteCommand>
}
 80194f2:	bf00      	nop
 80194f4:	3708      	adds	r7, #8
 80194f6:	46bd      	mov	sp, r7
 80194f8:	bd80      	pop	{r7, pc}

080194fa <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 80194fa:	b580      	push	{r7, lr}
 80194fc:	b084      	sub	sp, #16
 80194fe:	af00      	add	r7, sp, #0
 8019500:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8019502:	793b      	ldrb	r3, [r7, #4]
 8019504:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8019508:	b2db      	uxtb	r3, r3
 801950a:	b25b      	sxtb	r3, r3
 801950c:	019b      	lsls	r3, r3, #6
 801950e:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8019510:	793b      	ldrb	r3, [r7, #4]
 8019512:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8019516:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8019518:	b25b      	sxtb	r3, r3
 801951a:	015b      	lsls	r3, r3, #5
 801951c:	b25b      	sxtb	r3, r3
 801951e:	4313      	orrs	r3, r2
 8019520:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8019522:	793b      	ldrb	r3, [r7, #4]
 8019524:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8019528:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801952a:	b25b      	sxtb	r3, r3
 801952c:	011b      	lsls	r3, r3, #4
 801952e:	b25b      	sxtb	r3, r3
 8019530:	4313      	orrs	r3, r2
 8019532:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8019534:	793b      	ldrb	r3, [r7, #4]
 8019536:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801953a:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801953c:	b25b      	sxtb	r3, r3
 801953e:	00db      	lsls	r3, r3, #3
 8019540:	b25b      	sxtb	r3, r3
 8019542:	4313      	orrs	r3, r2
 8019544:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8019546:	793b      	ldrb	r3, [r7, #4]
 8019548:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801954c:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801954e:	b25b      	sxtb	r3, r3
 8019550:	009b      	lsls	r3, r3, #2
 8019552:	b25b      	sxtb	r3, r3
 8019554:	4313      	orrs	r3, r2
 8019556:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8019558:	793b      	ldrb	r3, [r7, #4]
 801955a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801955e:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8019560:	b25b      	sxtb	r3, r3
 8019562:	005b      	lsls	r3, r3, #1
 8019564:	b25b      	sxtb	r3, r3
 8019566:	4313      	orrs	r3, r2
 8019568:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 801956a:	793b      	ldrb	r3, [r7, #4]
 801956c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8019570:	b2db      	uxtb	r3, r3
 8019572:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8019574:	4313      	orrs	r3, r2
 8019576:	b25b      	sxtb	r3, r3
 8019578:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801957a:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 801957c:	f107 030f 	add.w	r3, r7, #15
 8019580:	2201      	movs	r2, #1
 8019582:	4619      	mov	r1, r3
 8019584:	2089      	movs	r0, #137	@ 0x89
 8019586:	f000 fcc7 	bl	8019f18 <SUBGRF_WriteCommand>
}
 801958a:	bf00      	nop
 801958c:	3710      	adds	r7, #16
 801958e:	46bd      	mov	sp, r7
 8019590:	bd80      	pop	{r7, pc}
	...

08019594 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 8019594:	b580      	push	{r7, lr}
 8019596:	b084      	sub	sp, #16
 8019598:	af00      	add	r7, sp, #0
 801959a:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 801959c:	687b      	ldr	r3, [r7, #4]
 801959e:	4a1b      	ldr	r2, [pc, #108]	@ (801960c <SUBGRF_CalibrateImage+0x78>)
 80195a0:	4293      	cmp	r3, r2
 80195a2:	d904      	bls.n	80195ae <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 80195a4:	23e1      	movs	r3, #225	@ 0xe1
 80195a6:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 80195a8:	23e9      	movs	r3, #233	@ 0xe9
 80195aa:	737b      	strb	r3, [r7, #13]
 80195ac:	e022      	b.n	80195f4 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 850000000 )
 80195ae:	687b      	ldr	r3, [r7, #4]
 80195b0:	4a17      	ldr	r2, [pc, #92]	@ (8019610 <SUBGRF_CalibrateImage+0x7c>)
 80195b2:	4293      	cmp	r3, r2
 80195b4:	d904      	bls.n	80195c0 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 80195b6:	23d7      	movs	r3, #215	@ 0xd7
 80195b8:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 80195ba:	23db      	movs	r3, #219	@ 0xdb
 80195bc:	737b      	strb	r3, [r7, #13]
 80195be:	e019      	b.n	80195f4 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 770000000 )
 80195c0:	687b      	ldr	r3, [r7, #4]
 80195c2:	4a14      	ldr	r2, [pc, #80]	@ (8019614 <SUBGRF_CalibrateImage+0x80>)
 80195c4:	4293      	cmp	r3, r2
 80195c6:	d904      	bls.n	80195d2 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 80195c8:	23c1      	movs	r3, #193	@ 0xc1
 80195ca:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 80195cc:	23c5      	movs	r3, #197	@ 0xc5
 80195ce:	737b      	strb	r3, [r7, #13]
 80195d0:	e010      	b.n	80195f4 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 460000000 )
 80195d2:	687b      	ldr	r3, [r7, #4]
 80195d4:	4a10      	ldr	r2, [pc, #64]	@ (8019618 <SUBGRF_CalibrateImage+0x84>)
 80195d6:	4293      	cmp	r3, r2
 80195d8:	d904      	bls.n	80195e4 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 80195da:	2375      	movs	r3, #117	@ 0x75
 80195dc:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 80195de:	2381      	movs	r3, #129	@ 0x81
 80195e0:	737b      	strb	r3, [r7, #13]
 80195e2:	e007      	b.n	80195f4 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 425000000 )
 80195e4:	687b      	ldr	r3, [r7, #4]
 80195e6:	4a0d      	ldr	r2, [pc, #52]	@ (801961c <SUBGRF_CalibrateImage+0x88>)
 80195e8:	4293      	cmp	r3, r2
 80195ea:	d903      	bls.n	80195f4 <SUBGRF_CalibrateImage+0x60>
    {
        calFreq[0] = 0x6B;
 80195ec:	236b      	movs	r3, #107	@ 0x6b
 80195ee:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 80195f0:	236f      	movs	r3, #111	@ 0x6f
 80195f2:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 80195f4:	f107 030c 	add.w	r3, r7, #12
 80195f8:	2202      	movs	r2, #2
 80195fa:	4619      	mov	r1, r3
 80195fc:	2098      	movs	r0, #152	@ 0x98
 80195fe:	f000 fc8b 	bl	8019f18 <SUBGRF_WriteCommand>
}
 8019602:	bf00      	nop
 8019604:	3710      	adds	r7, #16
 8019606:	46bd      	mov	sp, r7
 8019608:	bd80      	pop	{r7, pc}
 801960a:	bf00      	nop
 801960c:	35a4e900 	.word	0x35a4e900
 8019610:	32a9f880 	.word	0x32a9f880
 8019614:	2de54480 	.word	0x2de54480
 8019618:	1b6b0b00 	.word	0x1b6b0b00
 801961c:	1954fc40 	.word	0x1954fc40

08019620 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 8019620:	b590      	push	{r4, r7, lr}
 8019622:	b085      	sub	sp, #20
 8019624:	af00      	add	r7, sp, #0
 8019626:	4604      	mov	r4, r0
 8019628:	4608      	mov	r0, r1
 801962a:	4611      	mov	r1, r2
 801962c:	461a      	mov	r2, r3
 801962e:	4623      	mov	r3, r4
 8019630:	71fb      	strb	r3, [r7, #7]
 8019632:	4603      	mov	r3, r0
 8019634:	71bb      	strb	r3, [r7, #6]
 8019636:	460b      	mov	r3, r1
 8019638:	717b      	strb	r3, [r7, #5]
 801963a:	4613      	mov	r3, r2
 801963c:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 801963e:	79fb      	ldrb	r3, [r7, #7]
 8019640:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 8019642:	79bb      	ldrb	r3, [r7, #6]
 8019644:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 8019646:	797b      	ldrb	r3, [r7, #5]
 8019648:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 801964a:	793b      	ldrb	r3, [r7, #4]
 801964c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 801964e:	f107 030c 	add.w	r3, r7, #12
 8019652:	2204      	movs	r2, #4
 8019654:	4619      	mov	r1, r3
 8019656:	2095      	movs	r0, #149	@ 0x95
 8019658:	f000 fc5e 	bl	8019f18 <SUBGRF_WriteCommand>
}
 801965c:	bf00      	nop
 801965e:	3714      	adds	r7, #20
 8019660:	46bd      	mov	sp, r7
 8019662:	bd90      	pop	{r4, r7, pc}

08019664 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8019664:	b590      	push	{r4, r7, lr}
 8019666:	b085      	sub	sp, #20
 8019668:	af00      	add	r7, sp, #0
 801966a:	4604      	mov	r4, r0
 801966c:	4608      	mov	r0, r1
 801966e:	4611      	mov	r1, r2
 8019670:	461a      	mov	r2, r3
 8019672:	4623      	mov	r3, r4
 8019674:	80fb      	strh	r3, [r7, #6]
 8019676:	4603      	mov	r3, r0
 8019678:	80bb      	strh	r3, [r7, #4]
 801967a:	460b      	mov	r3, r1
 801967c:	807b      	strh	r3, [r7, #2]
 801967e:	4613      	mov	r3, r2
 8019680:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8019682:	88fb      	ldrh	r3, [r7, #6]
 8019684:	0a1b      	lsrs	r3, r3, #8
 8019686:	b29b      	uxth	r3, r3
 8019688:	b2db      	uxtb	r3, r3
 801968a:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 801968c:	88fb      	ldrh	r3, [r7, #6]
 801968e:	b2db      	uxtb	r3, r3
 8019690:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8019692:	88bb      	ldrh	r3, [r7, #4]
 8019694:	0a1b      	lsrs	r3, r3, #8
 8019696:	b29b      	uxth	r3, r3
 8019698:	b2db      	uxtb	r3, r3
 801969a:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 801969c:	88bb      	ldrh	r3, [r7, #4]
 801969e:	b2db      	uxtb	r3, r3
 80196a0:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 80196a2:	887b      	ldrh	r3, [r7, #2]
 80196a4:	0a1b      	lsrs	r3, r3, #8
 80196a6:	b29b      	uxth	r3, r3
 80196a8:	b2db      	uxtb	r3, r3
 80196aa:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 80196ac:	887b      	ldrh	r3, [r7, #2]
 80196ae:	b2db      	uxtb	r3, r3
 80196b0:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 80196b2:	883b      	ldrh	r3, [r7, #0]
 80196b4:	0a1b      	lsrs	r3, r3, #8
 80196b6:	b29b      	uxth	r3, r3
 80196b8:	b2db      	uxtb	r3, r3
 80196ba:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 80196bc:	883b      	ldrh	r3, [r7, #0]
 80196be:	b2db      	uxtb	r3, r3
 80196c0:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 80196c2:	f107 0308 	add.w	r3, r7, #8
 80196c6:	2208      	movs	r2, #8
 80196c8:	4619      	mov	r1, r3
 80196ca:	2008      	movs	r0, #8
 80196cc:	f000 fc24 	bl	8019f18 <SUBGRF_WriteCommand>
}
 80196d0:	bf00      	nop
 80196d2:	3714      	adds	r7, #20
 80196d4:	46bd      	mov	sp, r7
 80196d6:	bd90      	pop	{r4, r7, pc}

080196d8 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 80196d8:	b580      	push	{r7, lr}
 80196da:	b084      	sub	sp, #16
 80196dc:	af00      	add	r7, sp, #0
 80196de:	4603      	mov	r3, r0
 80196e0:	6039      	str	r1, [r7, #0]
 80196e2:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 80196e4:	79fb      	ldrb	r3, [r7, #7]
 80196e6:	f003 0307 	and.w	r3, r3, #7
 80196ea:	b2db      	uxtb	r3, r3
 80196ec:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80196ee:	683b      	ldr	r3, [r7, #0]
 80196f0:	0c1b      	lsrs	r3, r3, #16
 80196f2:	b2db      	uxtb	r3, r3
 80196f4:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80196f6:	683b      	ldr	r3, [r7, #0]
 80196f8:	0a1b      	lsrs	r3, r3, #8
 80196fa:	b2db      	uxtb	r3, r3
 80196fc:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 80196fe:	683b      	ldr	r3, [r7, #0]
 8019700:	b2db      	uxtb	r3, r3
 8019702:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8019704:	f107 030c 	add.w	r3, r7, #12
 8019708:	2204      	movs	r2, #4
 801970a:	4619      	mov	r1, r3
 801970c:	2097      	movs	r0, #151	@ 0x97
 801970e:	f000 fc03 	bl	8019f18 <SUBGRF_WriteCommand>
}
 8019712:	bf00      	nop
 8019714:	3710      	adds	r7, #16
 8019716:	46bd      	mov	sp, r7
 8019718:	bd80      	pop	{r7, pc}
	...

0801971c <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 801971c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8019720:	b084      	sub	sp, #16
 8019722:	af00      	add	r7, sp, #0
 8019724:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 8019726:	2300      	movs	r3, #0
 8019728:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 801972a:	4b1d      	ldr	r3, [pc, #116]	@ (80197a0 <SUBGRF_SetRfFrequency+0x84>)
 801972c:	781b      	ldrb	r3, [r3, #0]
 801972e:	f083 0301 	eor.w	r3, r3, #1
 8019732:	b2db      	uxtb	r3, r3
 8019734:	2b00      	cmp	r3, #0
 8019736:	d005      	beq.n	8019744 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 8019738:	6878      	ldr	r0, [r7, #4]
 801973a:	f7ff ff2b 	bl	8019594 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 801973e:	4b18      	ldr	r3, [pc, #96]	@ (80197a0 <SUBGRF_SetRfFrequency+0x84>)
 8019740:	2201      	movs	r2, #1
 8019742:	701a      	strb	r2, [r3, #0]
    }
    /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
    SX_FREQ_TO_CHANNEL(chan, frequency);
 8019744:	687b      	ldr	r3, [r7, #4]
 8019746:	2200      	movs	r2, #0
 8019748:	461c      	mov	r4, r3
 801974a:	4615      	mov	r5, r2
 801974c:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8019750:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8019754:	4a13      	ldr	r2, [pc, #76]	@ (80197a4 <SUBGRF_SetRfFrequency+0x88>)
 8019756:	f04f 0300 	mov.w	r3, #0
 801975a:	4640      	mov	r0, r8
 801975c:	4649      	mov	r1, r9
 801975e:	f7e7 fb2f 	bl	8000dc0 <__aeabi_uldivmod>
 8019762:	4602      	mov	r2, r0
 8019764:	460b      	mov	r3, r1
 8019766:	4613      	mov	r3, r2
 8019768:	60fb      	str	r3, [r7, #12]
    /* ST_WORKAROUND_END */
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 801976a:	68fb      	ldr	r3, [r7, #12]
 801976c:	0e1b      	lsrs	r3, r3, #24
 801976e:	b2db      	uxtb	r3, r3
 8019770:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8019772:	68fb      	ldr	r3, [r7, #12]
 8019774:	0c1b      	lsrs	r3, r3, #16
 8019776:	b2db      	uxtb	r3, r3
 8019778:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 801977a:	68fb      	ldr	r3, [r7, #12]
 801977c:	0a1b      	lsrs	r3, r3, #8
 801977e:	b2db      	uxtb	r3, r3
 8019780:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8019782:	68fb      	ldr	r3, [r7, #12]
 8019784:	b2db      	uxtb	r3, r3
 8019786:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8019788:	f107 0308 	add.w	r3, r7, #8
 801978c:	2204      	movs	r2, #4
 801978e:	4619      	mov	r1, r3
 8019790:	2086      	movs	r0, #134	@ 0x86
 8019792:	f000 fbc1 	bl	8019f18 <SUBGRF_WriteCommand>
}
 8019796:	bf00      	nop
 8019798:	3710      	adds	r7, #16
 801979a:	46bd      	mov	sp, r7
 801979c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80197a0:	20001d6c 	.word	0x20001d6c
 80197a4:	01e84800 	.word	0x01e84800

080197a8 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 80197a8:	b580      	push	{r7, lr}
 80197aa:	b082      	sub	sp, #8
 80197ac:	af00      	add	r7, sp, #0
 80197ae:	4603      	mov	r3, r0
 80197b0:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 80197b2:	79fa      	ldrb	r2, [r7, #7]
 80197b4:	4b09      	ldr	r3, [pc, #36]	@ (80197dc <SUBGRF_SetPacketType+0x34>)
 80197b6:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 80197b8:	79fb      	ldrb	r3, [r7, #7]
 80197ba:	2b00      	cmp	r3, #0
 80197bc:	d104      	bne.n	80197c8 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 80197be:	2100      	movs	r1, #0
 80197c0:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 80197c4:	f000 faf8 	bl	8019db8 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 80197c8:	1dfb      	adds	r3, r7, #7
 80197ca:	2201      	movs	r2, #1
 80197cc:	4619      	mov	r1, r3
 80197ce:	208a      	movs	r0, #138	@ 0x8a
 80197d0:	f000 fba2 	bl	8019f18 <SUBGRF_WriteCommand>
}
 80197d4:	bf00      	nop
 80197d6:	3708      	adds	r7, #8
 80197d8:	46bd      	mov	sp, r7
 80197da:	bd80      	pop	{r7, pc}
 80197dc:	20001d65 	.word	0x20001d65

080197e0 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 80197e0:	b480      	push	{r7}
 80197e2:	af00      	add	r7, sp, #0
    return PacketType;
 80197e4:	4b02      	ldr	r3, [pc, #8]	@ (80197f0 <SUBGRF_GetPacketType+0x10>)
 80197e6:	781b      	ldrb	r3, [r3, #0]
}
 80197e8:	4618      	mov	r0, r3
 80197ea:	46bd      	mov	sp, r7
 80197ec:	bc80      	pop	{r7}
 80197ee:	4770      	bx	lr
 80197f0:	20001d65 	.word	0x20001d65

080197f4 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 80197f4:	b580      	push	{r7, lr}
 80197f6:	b084      	sub	sp, #16
 80197f8:	af00      	add	r7, sp, #0
 80197fa:	4603      	mov	r3, r0
 80197fc:	71fb      	strb	r3, [r7, #7]
 80197fe:	460b      	mov	r3, r1
 8019800:	71bb      	strb	r3, [r7, #6]
 8019802:	4613      	mov	r3, r2
 8019804:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 8019806:	79fb      	ldrb	r3, [r7, #7]
 8019808:	2b01      	cmp	r3, #1
 801980a:	d149      	bne.n	80198a0 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 801980c:	2000      	movs	r0, #0
 801980e:	f7f1 f979 	bl	800ab04 <RBI_GetRFOMaxPowerConfig>
 8019812:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 8019814:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8019818:	68fa      	ldr	r2, [r7, #12]
 801981a:	429a      	cmp	r2, r3
 801981c:	da01      	bge.n	8019822 <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 801981e:	68fb      	ldr	r3, [r7, #12]
 8019820:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 8019822:	68fb      	ldr	r3, [r7, #12]
 8019824:	2b0e      	cmp	r3, #14
 8019826:	d10e      	bne.n	8019846 <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 8019828:	2301      	movs	r3, #1
 801982a:	2201      	movs	r2, #1
 801982c:	2100      	movs	r1, #0
 801982e:	2004      	movs	r0, #4
 8019830:	f7ff fef6 	bl	8019620 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8019834:	79ba      	ldrb	r2, [r7, #6]
 8019836:	68fb      	ldr	r3, [r7, #12]
 8019838:	b2db      	uxtb	r3, r3
 801983a:	1ad3      	subs	r3, r2, r3
 801983c:	b2db      	uxtb	r3, r3
 801983e:	330e      	adds	r3, #14
 8019840:	b2db      	uxtb	r3, r3
 8019842:	71bb      	strb	r3, [r7, #6]
 8019844:	e01f      	b.n	8019886 <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 8019846:	68fb      	ldr	r3, [r7, #12]
 8019848:	2b0a      	cmp	r3, #10
 801984a:	d10e      	bne.n	801986a <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 801984c:	2301      	movs	r3, #1
 801984e:	2201      	movs	r2, #1
 8019850:	2100      	movs	r1, #0
 8019852:	2001      	movs	r0, #1
 8019854:	f7ff fee4 	bl	8019620 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 8019858:	79ba      	ldrb	r2, [r7, #6]
 801985a:	68fb      	ldr	r3, [r7, #12]
 801985c:	b2db      	uxtb	r3, r3
 801985e:	1ad3      	subs	r3, r2, r3
 8019860:	b2db      	uxtb	r3, r3
 8019862:	330d      	adds	r3, #13
 8019864:	b2db      	uxtb	r3, r3
 8019866:	71bb      	strb	r3, [r7, #6]
 8019868:	e00d      	b.n	8019886 <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x06, 0x00, 0x01, 0x01);
 801986a:	2301      	movs	r3, #1
 801986c:	2201      	movs	r2, #1
 801986e:	2100      	movs	r1, #0
 8019870:	2006      	movs	r0, #6
 8019872:	f7ff fed5 	bl	8019620 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8019876:	79ba      	ldrb	r2, [r7, #6]
 8019878:	68fb      	ldr	r3, [r7, #12]
 801987a:	b2db      	uxtb	r3, r3
 801987c:	1ad3      	subs	r3, r2, r3
 801987e:	b2db      	uxtb	r3, r3
 8019880:	330e      	adds	r3, #14
 8019882:	b2db      	uxtb	r3, r3
 8019884:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 8019886:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801988a:	f113 0f11 	cmn.w	r3, #17
 801988e:	da01      	bge.n	8019894 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 8019890:	23ef      	movs	r3, #239	@ 0xef
 8019892:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 8019894:	2118      	movs	r1, #24
 8019896:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 801989a:	f000 fa8d 	bl	8019db8 <SUBGRF_WriteRegister>
 801989e:	e067      	b.n	8019970 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 80198a0:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 80198a4:	f000 fa9c 	bl	8019de0 <SUBGRF_ReadRegister>
 80198a8:	4603      	mov	r3, r0
 80198aa:	f043 031e 	orr.w	r3, r3, #30
 80198ae:	b2db      	uxtb	r3, r3
 80198b0:	4619      	mov	r1, r3
 80198b2:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 80198b6:	f000 fa7f 	bl	8019db8 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 80198ba:	2001      	movs	r0, #1
 80198bc:	f7f1 f922 	bl	800ab04 <RBI_GetRFOMaxPowerConfig>
 80198c0:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 80198c2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80198c6:	68fa      	ldr	r2, [r7, #12]
 80198c8:	429a      	cmp	r2, r3
 80198ca:	da01      	bge.n	80198d0 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 80198cc:	68fb      	ldr	r3, [r7, #12]
 80198ce:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 80198d0:	68fb      	ldr	r3, [r7, #12]
 80198d2:	2b14      	cmp	r3, #20
 80198d4:	d10e      	bne.n	80198f4 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 80198d6:	2301      	movs	r3, #1
 80198d8:	2200      	movs	r2, #0
 80198da:	2105      	movs	r1, #5
 80198dc:	2003      	movs	r0, #3
 80198de:	f7ff fe9f 	bl	8019620 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80198e2:	79ba      	ldrb	r2, [r7, #6]
 80198e4:	68fb      	ldr	r3, [r7, #12]
 80198e6:	b2db      	uxtb	r3, r3
 80198e8:	1ad3      	subs	r3, r2, r3
 80198ea:	b2db      	uxtb	r3, r3
 80198ec:	3316      	adds	r3, #22
 80198ee:	b2db      	uxtb	r3, r3
 80198f0:	71bb      	strb	r3, [r7, #6]
 80198f2:	e031      	b.n	8019958 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 80198f4:	68fb      	ldr	r3, [r7, #12]
 80198f6:	2b11      	cmp	r3, #17
 80198f8:	d10e      	bne.n	8019918 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 80198fa:	2301      	movs	r3, #1
 80198fc:	2200      	movs	r2, #0
 80198fe:	2103      	movs	r1, #3
 8019900:	2002      	movs	r0, #2
 8019902:	f7ff fe8d 	bl	8019620 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8019906:	79ba      	ldrb	r2, [r7, #6]
 8019908:	68fb      	ldr	r3, [r7, #12]
 801990a:	b2db      	uxtb	r3, r3
 801990c:	1ad3      	subs	r3, r2, r3
 801990e:	b2db      	uxtb	r3, r3
 8019910:	3316      	adds	r3, #22
 8019912:	b2db      	uxtb	r3, r3
 8019914:	71bb      	strb	r3, [r7, #6]
 8019916:	e01f      	b.n	8019958 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 8019918:	68fb      	ldr	r3, [r7, #12]
 801991a:	2b0e      	cmp	r3, #14
 801991c:	d10e      	bne.n	801993c <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 801991e:	2301      	movs	r3, #1
 8019920:	2200      	movs	r2, #0
 8019922:	2102      	movs	r1, #2
 8019924:	2002      	movs	r0, #2
 8019926:	f7ff fe7b 	bl	8019620 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801992a:	79ba      	ldrb	r2, [r7, #6]
 801992c:	68fb      	ldr	r3, [r7, #12]
 801992e:	b2db      	uxtb	r3, r3
 8019930:	1ad3      	subs	r3, r2, r3
 8019932:	b2db      	uxtb	r3, r3
 8019934:	330e      	adds	r3, #14
 8019936:	b2db      	uxtb	r3, r3
 8019938:	71bb      	strb	r3, [r7, #6]
 801993a:	e00d      	b.n	8019958 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 801993c:	2301      	movs	r3, #1
 801993e:	2200      	movs	r2, #0
 8019940:	2107      	movs	r1, #7
 8019942:	2004      	movs	r0, #4
 8019944:	f7ff fe6c 	bl	8019620 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8019948:	79ba      	ldrb	r2, [r7, #6]
 801994a:	68fb      	ldr	r3, [r7, #12]
 801994c:	b2db      	uxtb	r3, r3
 801994e:	1ad3      	subs	r3, r2, r3
 8019950:	b2db      	uxtb	r3, r3
 8019952:	3316      	adds	r3, #22
 8019954:	b2db      	uxtb	r3, r3
 8019956:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 8019958:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801995c:	f113 0f09 	cmn.w	r3, #9
 8019960:	da01      	bge.n	8019966 <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 8019962:	23f7      	movs	r3, #247	@ 0xf7
 8019964:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 8019966:	2138      	movs	r1, #56	@ 0x38
 8019968:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 801996c:	f000 fa24 	bl	8019db8 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 8019970:	79bb      	ldrb	r3, [r7, #6]
 8019972:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 8019974:	797b      	ldrb	r3, [r7, #5]
 8019976:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 8019978:	f107 0308 	add.w	r3, r7, #8
 801997c:	2202      	movs	r2, #2
 801997e:	4619      	mov	r1, r3
 8019980:	208e      	movs	r0, #142	@ 0x8e
 8019982:	f000 fac9 	bl	8019f18 <SUBGRF_WriteCommand>
}
 8019986:	bf00      	nop
 8019988:	3710      	adds	r7, #16
 801998a:	46bd      	mov	sp, r7
 801998c:	bd80      	pop	{r7, pc}
	...

08019990 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 8019990:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8019994:	b086      	sub	sp, #24
 8019996:	af00      	add	r7, sp, #0
 8019998:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 801999a:	2300      	movs	r3, #0
 801999c:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801999e:	f107 0308 	add.w	r3, r7, #8
 80199a2:	2200      	movs	r2, #0
 80199a4:	601a      	str	r2, [r3, #0]
 80199a6:	605a      	str	r2, [r3, #4]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 80199a8:	687b      	ldr	r3, [r7, #4]
 80199aa:	781a      	ldrb	r2, [r3, #0]
 80199ac:	4b5c      	ldr	r3, [pc, #368]	@ (8019b20 <SUBGRF_SetModulationParams+0x190>)
 80199ae:	781b      	ldrb	r3, [r3, #0]
 80199b0:	429a      	cmp	r2, r3
 80199b2:	d004      	beq.n	80199be <SUBGRF_SetModulationParams+0x2e>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 80199b4:	687b      	ldr	r3, [r7, #4]
 80199b6:	781b      	ldrb	r3, [r3, #0]
 80199b8:	4618      	mov	r0, r3
 80199ba:	f7ff fef5 	bl	80197a8 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 80199be:	687b      	ldr	r3, [r7, #4]
 80199c0:	781b      	ldrb	r3, [r3, #0]
 80199c2:	2b03      	cmp	r3, #3
 80199c4:	f200 80a5 	bhi.w	8019b12 <SUBGRF_SetModulationParams+0x182>
 80199c8:	a201      	add	r2, pc, #4	@ (adr r2, 80199d0 <SUBGRF_SetModulationParams+0x40>)
 80199ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80199ce:	bf00      	nop
 80199d0:	080199e1 	.word	0x080199e1
 80199d4:	08019aa1 	.word	0x08019aa1
 80199d8:	08019a63 	.word	0x08019a63
 80199dc:	08019acf 	.word	0x08019acf
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 80199e0:	2308      	movs	r3, #8
 80199e2:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 80199e4:	687b      	ldr	r3, [r7, #4]
 80199e6:	685b      	ldr	r3, [r3, #4]
 80199e8:	4a4e      	ldr	r2, [pc, #312]	@ (8019b24 <SUBGRF_SetModulationParams+0x194>)
 80199ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80199ee:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80199f0:	697b      	ldr	r3, [r7, #20]
 80199f2:	0c1b      	lsrs	r3, r3, #16
 80199f4:	b2db      	uxtb	r3, r3
 80199f6:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80199f8:	697b      	ldr	r3, [r7, #20]
 80199fa:	0a1b      	lsrs	r3, r3, #8
 80199fc:	b2db      	uxtb	r3, r3
 80199fe:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8019a00:	697b      	ldr	r3, [r7, #20]
 8019a02:	b2db      	uxtb	r3, r3
 8019a04:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8019a06:	687b      	ldr	r3, [r7, #4]
 8019a08:	7b1b      	ldrb	r3, [r3, #12]
 8019a0a:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8019a0c:	687b      	ldr	r3, [r7, #4]
 8019a0e:	7b5b      	ldrb	r3, [r3, #13]
 8019a10:	733b      	strb	r3, [r7, #12]
        /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8019a12:	687b      	ldr	r3, [r7, #4]
 8019a14:	689b      	ldr	r3, [r3, #8]
 8019a16:	2200      	movs	r2, #0
 8019a18:	461c      	mov	r4, r3
 8019a1a:	4615      	mov	r5, r2
 8019a1c:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8019a20:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8019a24:	4a40      	ldr	r2, [pc, #256]	@ (8019b28 <SUBGRF_SetModulationParams+0x198>)
 8019a26:	f04f 0300 	mov.w	r3, #0
 8019a2a:	4640      	mov	r0, r8
 8019a2c:	4649      	mov	r1, r9
 8019a2e:	f7e7 f9c7 	bl	8000dc0 <__aeabi_uldivmod>
 8019a32:	4602      	mov	r2, r0
 8019a34:	460b      	mov	r3, r1
 8019a36:	4613      	mov	r3, r2
 8019a38:	617b      	str	r3, [r7, #20]
        /* ST_WORKAROUND_END */
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8019a3a:	697b      	ldr	r3, [r7, #20]
 8019a3c:	0c1b      	lsrs	r3, r3, #16
 8019a3e:	b2db      	uxtb	r3, r3
 8019a40:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8019a42:	697b      	ldr	r3, [r7, #20]
 8019a44:	0a1b      	lsrs	r3, r3, #8
 8019a46:	b2db      	uxtb	r3, r3
 8019a48:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 8019a4a:	697b      	ldr	r3, [r7, #20]
 8019a4c:	b2db      	uxtb	r3, r3
 8019a4e:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8019a50:	7cfb      	ldrb	r3, [r7, #19]
 8019a52:	b29a      	uxth	r2, r3
 8019a54:	f107 0308 	add.w	r3, r7, #8
 8019a58:	4619      	mov	r1, r3
 8019a5a:	208b      	movs	r0, #139	@ 0x8b
 8019a5c:	f000 fa5c 	bl	8019f18 <SUBGRF_WriteCommand>
        break;
 8019a60:	e058      	b.n	8019b14 <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_BPSK:
        n = 4;
 8019a62:	2304      	movs	r3, #4
 8019a64:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8019a66:	687b      	ldr	r3, [r7, #4]
 8019a68:	691b      	ldr	r3, [r3, #16]
 8019a6a:	4a2e      	ldr	r2, [pc, #184]	@ (8019b24 <SUBGRF_SetModulationParams+0x194>)
 8019a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8019a70:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8019a72:	697b      	ldr	r3, [r7, #20]
 8019a74:	0c1b      	lsrs	r3, r3, #16
 8019a76:	b2db      	uxtb	r3, r3
 8019a78:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8019a7a:	697b      	ldr	r3, [r7, #20]
 8019a7c:	0a1b      	lsrs	r3, r3, #8
 8019a7e:	b2db      	uxtb	r3, r3
 8019a80:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8019a82:	697b      	ldr	r3, [r7, #20]
 8019a84:	b2db      	uxtb	r3, r3
 8019a86:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8019a88:	687b      	ldr	r3, [r7, #4]
 8019a8a:	7d1b      	ldrb	r3, [r3, #20]
 8019a8c:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8019a8e:	7cfb      	ldrb	r3, [r7, #19]
 8019a90:	b29a      	uxth	r2, r3
 8019a92:	f107 0308 	add.w	r3, r7, #8
 8019a96:	4619      	mov	r1, r3
 8019a98:	208b      	movs	r0, #139	@ 0x8b
 8019a9a:	f000 fa3d 	bl	8019f18 <SUBGRF_WriteCommand>
        break;
 8019a9e:	e039      	b.n	8019b14 <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_LORA:
        n = 4;
 8019aa0:	2304      	movs	r3, #4
 8019aa2:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8019aa4:	687b      	ldr	r3, [r7, #4]
 8019aa6:	7e1b      	ldrb	r3, [r3, #24]
 8019aa8:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8019aaa:	687b      	ldr	r3, [r7, #4]
 8019aac:	7e5b      	ldrb	r3, [r3, #25]
 8019aae:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8019ab0:	687b      	ldr	r3, [r7, #4]
 8019ab2:	7e9b      	ldrb	r3, [r3, #26]
 8019ab4:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8019ab6:	687b      	ldr	r3, [r7, #4]
 8019ab8:	7edb      	ldrb	r3, [r3, #27]
 8019aba:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8019abc:	7cfb      	ldrb	r3, [r7, #19]
 8019abe:	b29a      	uxth	r2, r3
 8019ac0:	f107 0308 	add.w	r3, r7, #8
 8019ac4:	4619      	mov	r1, r3
 8019ac6:	208b      	movs	r0, #139	@ 0x8b
 8019ac8:	f000 fa26 	bl	8019f18 <SUBGRF_WriteCommand>

        break;
 8019acc:	e022      	b.n	8019b14 <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_GMSK:
        n = 5;
 8019ace:	2305      	movs	r3, #5
 8019ad0:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8019ad2:	687b      	ldr	r3, [r7, #4]
 8019ad4:	685b      	ldr	r3, [r3, #4]
 8019ad6:	4a13      	ldr	r2, [pc, #76]	@ (8019b24 <SUBGRF_SetModulationParams+0x194>)
 8019ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8019adc:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8019ade:	697b      	ldr	r3, [r7, #20]
 8019ae0:	0c1b      	lsrs	r3, r3, #16
 8019ae2:	b2db      	uxtb	r3, r3
 8019ae4:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8019ae6:	697b      	ldr	r3, [r7, #20]
 8019ae8:	0a1b      	lsrs	r3, r3, #8
 8019aea:	b2db      	uxtb	r3, r3
 8019aec:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8019aee:	697b      	ldr	r3, [r7, #20]
 8019af0:	b2db      	uxtb	r3, r3
 8019af2:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8019af4:	687b      	ldr	r3, [r7, #4]
 8019af6:	7b1b      	ldrb	r3, [r3, #12]
 8019af8:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8019afa:	687b      	ldr	r3, [r7, #4]
 8019afc:	7b5b      	ldrb	r3, [r3, #13]
 8019afe:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8019b00:	7cfb      	ldrb	r3, [r7, #19]
 8019b02:	b29a      	uxth	r2, r3
 8019b04:	f107 0308 	add.w	r3, r7, #8
 8019b08:	4619      	mov	r1, r3
 8019b0a:	208b      	movs	r0, #139	@ 0x8b
 8019b0c:	f000 fa04 	bl	8019f18 <SUBGRF_WriteCommand>
        break;
 8019b10:	e000      	b.n	8019b14 <SUBGRF_SetModulationParams+0x184>
    default:
    case PACKET_TYPE_NONE:
      break;
 8019b12:	bf00      	nop
    }
}
 8019b14:	bf00      	nop
 8019b16:	3718      	adds	r7, #24
 8019b18:	46bd      	mov	sp, r7
 8019b1a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8019b1e:	bf00      	nop
 8019b20:	20001d65 	.word	0x20001d65
 8019b24:	3d090000 	.word	0x3d090000
 8019b28:	01e84800 	.word	0x01e84800

08019b2c <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 8019b2c:	b580      	push	{r7, lr}
 8019b2e:	b086      	sub	sp, #24
 8019b30:	af00      	add	r7, sp, #0
 8019b32:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 8019b34:	2300      	movs	r3, #0
 8019b36:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8019b38:	f107 030c 	add.w	r3, r7, #12
 8019b3c:	2200      	movs	r2, #0
 8019b3e:	601a      	str	r2, [r3, #0]
 8019b40:	605a      	str	r2, [r3, #4]
 8019b42:	721a      	strb	r2, [r3, #8]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 8019b44:	687b      	ldr	r3, [r7, #4]
 8019b46:	781a      	ldrb	r2, [r3, #0]
 8019b48:	4b44      	ldr	r3, [pc, #272]	@ (8019c5c <SUBGRF_SetPacketParams+0x130>)
 8019b4a:	781b      	ldrb	r3, [r3, #0]
 8019b4c:	429a      	cmp	r2, r3
 8019b4e:	d004      	beq.n	8019b5a <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 8019b50:	687b      	ldr	r3, [r7, #4]
 8019b52:	781b      	ldrb	r3, [r3, #0]
 8019b54:	4618      	mov	r0, r3
 8019b56:	f7ff fe27 	bl	80197a8 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 8019b5a:	687b      	ldr	r3, [r7, #4]
 8019b5c:	781b      	ldrb	r3, [r3, #0]
 8019b5e:	2b03      	cmp	r3, #3
 8019b60:	d878      	bhi.n	8019c54 <SUBGRF_SetPacketParams+0x128>
 8019b62:	a201      	add	r2, pc, #4	@ (adr r2, 8019b68 <SUBGRF_SetPacketParams+0x3c>)
 8019b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019b68:	08019b79 	.word	0x08019b79
 8019b6c:	08019c09 	.word	0x08019c09
 8019b70:	08019bfd 	.word	0x08019bfd
 8019b74:	08019b79 	.word	0x08019b79
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8019b78:	687b      	ldr	r3, [r7, #4]
 8019b7a:	7a5b      	ldrb	r3, [r3, #9]
 8019b7c:	2bf1      	cmp	r3, #241	@ 0xf1
 8019b7e:	d10a      	bne.n	8019b96 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8019b80:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8019b84:	f7ff faaa 	bl	80190dc <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8019b88:	f248 0005 	movw	r0, #32773	@ 0x8005
 8019b8c:	f7ff fac6 	bl	801911c <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8019b90:	2302      	movs	r3, #2
 8019b92:	75bb      	strb	r3, [r7, #22]
 8019b94:	e011      	b.n	8019bba <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8019b96:	687b      	ldr	r3, [r7, #4]
 8019b98:	7a5b      	ldrb	r3, [r3, #9]
 8019b9a:	2bf2      	cmp	r3, #242	@ 0xf2
 8019b9c:	d10a      	bne.n	8019bb4 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8019b9e:	f641 500f 	movw	r0, #7439	@ 0x1d0f
 8019ba2:	f7ff fa9b 	bl	80190dc <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8019ba6:	f241 0021 	movw	r0, #4129	@ 0x1021
 8019baa:	f7ff fab7 	bl	801911c <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8019bae:	2306      	movs	r3, #6
 8019bb0:	75bb      	strb	r3, [r7, #22]
 8019bb2:	e002      	b.n	8019bba <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 8019bb4:	687b      	ldr	r3, [r7, #4]
 8019bb6:	7a5b      	ldrb	r3, [r3, #9]
 8019bb8:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 8019bba:	2309      	movs	r3, #9
 8019bbc:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8019bbe:	687b      	ldr	r3, [r7, #4]
 8019bc0:	885b      	ldrh	r3, [r3, #2]
 8019bc2:	0a1b      	lsrs	r3, r3, #8
 8019bc4:	b29b      	uxth	r3, r3
 8019bc6:	b2db      	uxtb	r3, r3
 8019bc8:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8019bca:	687b      	ldr	r3, [r7, #4]
 8019bcc:	885b      	ldrh	r3, [r3, #2]
 8019bce:	b2db      	uxtb	r3, r3
 8019bd0:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8019bd2:	687b      	ldr	r3, [r7, #4]
 8019bd4:	791b      	ldrb	r3, [r3, #4]
 8019bd6:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8019bd8:	687b      	ldr	r3, [r7, #4]
 8019bda:	795b      	ldrb	r3, [r3, #5]
 8019bdc:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8019bde:	687b      	ldr	r3, [r7, #4]
 8019be0:	799b      	ldrb	r3, [r3, #6]
 8019be2:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8019be4:	687b      	ldr	r3, [r7, #4]
 8019be6:	79db      	ldrb	r3, [r3, #7]
 8019be8:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8019bea:	687b      	ldr	r3, [r7, #4]
 8019bec:	7a1b      	ldrb	r3, [r3, #8]
 8019bee:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 8019bf0:	7dbb      	ldrb	r3, [r7, #22]
 8019bf2:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8019bf4:	687b      	ldr	r3, [r7, #4]
 8019bf6:	7a9b      	ldrb	r3, [r3, #10]
 8019bf8:	753b      	strb	r3, [r7, #20]
        break;
 8019bfa:	e022      	b.n	8019c42 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 8019bfc:	2301      	movs	r3, #1
 8019bfe:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8019c00:	687b      	ldr	r3, [r7, #4]
 8019c02:	7b1b      	ldrb	r3, [r3, #12]
 8019c04:	733b      	strb	r3, [r7, #12]
        break;
 8019c06:	e01c      	b.n	8019c42 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 8019c08:	2306      	movs	r3, #6
 8019c0a:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8019c0c:	687b      	ldr	r3, [r7, #4]
 8019c0e:	89db      	ldrh	r3, [r3, #14]
 8019c10:	0a1b      	lsrs	r3, r3, #8
 8019c12:	b29b      	uxth	r3, r3
 8019c14:	b2db      	uxtb	r3, r3
 8019c16:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8019c18:	687b      	ldr	r3, [r7, #4]
 8019c1a:	89db      	ldrh	r3, [r3, #14]
 8019c1c:	b2db      	uxtb	r3, r3
 8019c1e:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8019c20:	687b      	ldr	r3, [r7, #4]
 8019c22:	7c1a      	ldrb	r2, [r3, #16]
 8019c24:	4b0e      	ldr	r3, [pc, #56]	@ (8019c60 <SUBGRF_SetPacketParams+0x134>)
 8019c26:	4611      	mov	r1, r2
 8019c28:	7019      	strb	r1, [r3, #0]
 8019c2a:	4613      	mov	r3, r2
 8019c2c:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8019c2e:	687b      	ldr	r3, [r7, #4]
 8019c30:	7c5b      	ldrb	r3, [r3, #17]
 8019c32:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8019c34:	687b      	ldr	r3, [r7, #4]
 8019c36:	7c9b      	ldrb	r3, [r3, #18]
 8019c38:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8019c3a:	687b      	ldr	r3, [r7, #4]
 8019c3c:	7cdb      	ldrb	r3, [r3, #19]
 8019c3e:	747b      	strb	r3, [r7, #17]
        break;
 8019c40:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8019c42:	7dfb      	ldrb	r3, [r7, #23]
 8019c44:	b29a      	uxth	r2, r3
 8019c46:	f107 030c 	add.w	r3, r7, #12
 8019c4a:	4619      	mov	r1, r3
 8019c4c:	208c      	movs	r0, #140	@ 0x8c
 8019c4e:	f000 f963 	bl	8019f18 <SUBGRF_WriteCommand>
 8019c52:	e000      	b.n	8019c56 <SUBGRF_SetPacketParams+0x12a>
        return;
 8019c54:	bf00      	nop
}
 8019c56:	3718      	adds	r7, #24
 8019c58:	46bd      	mov	sp, r7
 8019c5a:	bd80      	pop	{r7, pc}
 8019c5c:	20001d65 	.word	0x20001d65
 8019c60:	20001d66 	.word	0x20001d66

08019c64 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 8019c64:	b580      	push	{r7, lr}
 8019c66:	b084      	sub	sp, #16
 8019c68:	af00      	add	r7, sp, #0
 8019c6a:	4603      	mov	r3, r0
 8019c6c:	460a      	mov	r2, r1
 8019c6e:	71fb      	strb	r3, [r7, #7]
 8019c70:	4613      	mov	r3, r2
 8019c72:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 8019c74:	79fb      	ldrb	r3, [r7, #7]
 8019c76:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 8019c78:	79bb      	ldrb	r3, [r7, #6]
 8019c7a:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8019c7c:	f107 030c 	add.w	r3, r7, #12
 8019c80:	2202      	movs	r2, #2
 8019c82:	4619      	mov	r1, r3
 8019c84:	208f      	movs	r0, #143	@ 0x8f
 8019c86:	f000 f947 	bl	8019f18 <SUBGRF_WriteCommand>
}
 8019c8a:	bf00      	nop
 8019c8c:	3710      	adds	r7, #16
 8019c8e:	46bd      	mov	sp, r7
 8019c90:	bd80      	pop	{r7, pc}

08019c92 <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 8019c92:	b580      	push	{r7, lr}
 8019c94:	b082      	sub	sp, #8
 8019c96:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 8019c98:	2300      	movs	r3, #0
 8019c9a:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 8019c9c:	1d3b      	adds	r3, r7, #4
 8019c9e:	2201      	movs	r2, #1
 8019ca0:	4619      	mov	r1, r3
 8019ca2:	2015      	movs	r0, #21
 8019ca4:	f000 f95a 	bl	8019f5c <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 8019ca8:	793b      	ldrb	r3, [r7, #4]
 8019caa:	425b      	negs	r3, r3
 8019cac:	105b      	asrs	r3, r3, #1
 8019cae:	71fb      	strb	r3, [r7, #7]
    return rssi;
 8019cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8019cb4:	4618      	mov	r0, r3
 8019cb6:	3708      	adds	r7, #8
 8019cb8:	46bd      	mov	sp, r7
 8019cba:	bd80      	pop	{r7, pc}

08019cbc <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 8019cbc:	b580      	push	{r7, lr}
 8019cbe:	b084      	sub	sp, #16
 8019cc0:	af00      	add	r7, sp, #0
 8019cc2:	6078      	str	r0, [r7, #4]
 8019cc4:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8019cc6:	f107 030c 	add.w	r3, r7, #12
 8019cca:	2202      	movs	r2, #2
 8019ccc:	4619      	mov	r1, r3
 8019cce:	2013      	movs	r0, #19
 8019cd0:	f000 f944 	bl	8019f5c <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8019cd4:	f7ff fd84 	bl	80197e0 <SUBGRF_GetPacketType>
 8019cd8:	4603      	mov	r3, r0
 8019cda:	2b01      	cmp	r3, #1
 8019cdc:	d10d      	bne.n	8019cfa <SUBGRF_GetRxBufferStatus+0x3e>
 8019cde:	4b0c      	ldr	r3, [pc, #48]	@ (8019d10 <SUBGRF_GetRxBufferStatus+0x54>)
 8019ce0:	781b      	ldrb	r3, [r3, #0]
 8019ce2:	b2db      	uxtb	r3, r3
 8019ce4:	2b01      	cmp	r3, #1
 8019ce6:	d108      	bne.n	8019cfa <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8019ce8:	f240 7002 	movw	r0, #1794	@ 0x702
 8019cec:	f000 f878 	bl	8019de0 <SUBGRF_ReadRegister>
 8019cf0:	4603      	mov	r3, r0
 8019cf2:	461a      	mov	r2, r3
 8019cf4:	687b      	ldr	r3, [r7, #4]
 8019cf6:	701a      	strb	r2, [r3, #0]
 8019cf8:	e002      	b.n	8019d00 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 8019cfa:	7b3a      	ldrb	r2, [r7, #12]
 8019cfc:	687b      	ldr	r3, [r7, #4]
 8019cfe:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 8019d00:	7b7a      	ldrb	r2, [r7, #13]
 8019d02:	683b      	ldr	r3, [r7, #0]
 8019d04:	701a      	strb	r2, [r3, #0]
}
 8019d06:	bf00      	nop
 8019d08:	3710      	adds	r7, #16
 8019d0a:	46bd      	mov	sp, r7
 8019d0c:	bd80      	pop	{r7, pc}
 8019d0e:	bf00      	nop
 8019d10:	20001d66 	.word	0x20001d66

08019d14 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 8019d14:	b580      	push	{r7, lr}
 8019d16:	b084      	sub	sp, #16
 8019d18:	af00      	add	r7, sp, #0
 8019d1a:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8019d1c:	f107 030c 	add.w	r3, r7, #12
 8019d20:	2203      	movs	r2, #3
 8019d22:	4619      	mov	r1, r3
 8019d24:	2014      	movs	r0, #20
 8019d26:	f000 f919 	bl	8019f5c <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 8019d2a:	f7ff fd59 	bl	80197e0 <SUBGRF_GetPacketType>
 8019d2e:	4603      	mov	r3, r0
 8019d30:	461a      	mov	r2, r3
 8019d32:	687b      	ldr	r3, [r7, #4]
 8019d34:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 8019d36:	687b      	ldr	r3, [r7, #4]
 8019d38:	781b      	ldrb	r3, [r3, #0]
 8019d3a:	2b00      	cmp	r3, #0
 8019d3c:	d002      	beq.n	8019d44 <SUBGRF_GetPacketStatus+0x30>
 8019d3e:	2b01      	cmp	r3, #1
 8019d40:	d013      	beq.n	8019d6a <SUBGRF_GetPacketStatus+0x56>
 8019d42:	e02a      	b.n	8019d9a <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8019d44:	7b3a      	ldrb	r2, [r7, #12]
 8019d46:	687b      	ldr	r3, [r7, #4]
 8019d48:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8019d4a:	7b7b      	ldrb	r3, [r7, #13]
 8019d4c:	425b      	negs	r3, r3
 8019d4e:	105b      	asrs	r3, r3, #1
 8019d50:	b25a      	sxtb	r2, r3
 8019d52:	687b      	ldr	r3, [r7, #4]
 8019d54:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8019d56:	7bbb      	ldrb	r3, [r7, #14]
 8019d58:	425b      	negs	r3, r3
 8019d5a:	105b      	asrs	r3, r3, #1
 8019d5c:	b25a      	sxtb	r2, r3
 8019d5e:	687b      	ldr	r3, [r7, #4]
 8019d60:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 8019d62:	687b      	ldr	r3, [r7, #4]
 8019d64:	2200      	movs	r2, #0
 8019d66:	609a      	str	r2, [r3, #8]
            break;
 8019d68:	e020      	b.n	8019dac <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8019d6a:	7b3b      	ldrb	r3, [r7, #12]
 8019d6c:	425b      	negs	r3, r3
 8019d6e:	105b      	asrs	r3, r3, #1
 8019d70:	b25a      	sxtb	r2, r3
 8019d72:	687b      	ldr	r3, [r7, #4]
 8019d74:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 8019d76:	7b7b      	ldrb	r3, [r7, #13]
 8019d78:	b25b      	sxtb	r3, r3
 8019d7a:	3302      	adds	r3, #2
 8019d7c:	109b      	asrs	r3, r3, #2
 8019d7e:	b25a      	sxtb	r2, r3
 8019d80:	687b      	ldr	r3, [r7, #4]
 8019d82:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8019d84:	7bbb      	ldrb	r3, [r7, #14]
 8019d86:	425b      	negs	r3, r3
 8019d88:	105b      	asrs	r3, r3, #1
 8019d8a:	b25a      	sxtb	r2, r3
 8019d8c:	687b      	ldr	r3, [r7, #4]
 8019d8e:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8019d90:	4b08      	ldr	r3, [pc, #32]	@ (8019db4 <SUBGRF_GetPacketStatus+0xa0>)
 8019d92:	681a      	ldr	r2, [r3, #0]
 8019d94:	687b      	ldr	r3, [r7, #4]
 8019d96:	611a      	str	r2, [r3, #16]
            break;
 8019d98:	e008      	b.n	8019dac <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 8019d9a:	2214      	movs	r2, #20
 8019d9c:	2100      	movs	r1, #0
 8019d9e:	6878      	ldr	r0, [r7, #4]
 8019da0:	f000 fbf3 	bl	801a58a <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8019da4:	687b      	ldr	r3, [r7, #4]
 8019da6:	220f      	movs	r2, #15
 8019da8:	701a      	strb	r2, [r3, #0]
            break;
 8019daa:	bf00      	nop
    }
}
 8019dac:	bf00      	nop
 8019dae:	3710      	adds	r7, #16
 8019db0:	46bd      	mov	sp, r7
 8019db2:	bd80      	pop	{r7, pc}
 8019db4:	20001d68 	.word	0x20001d68

08019db8 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 8019db8:	b580      	push	{r7, lr}
 8019dba:	b082      	sub	sp, #8
 8019dbc:	af00      	add	r7, sp, #0
 8019dbe:	4603      	mov	r3, r0
 8019dc0:	460a      	mov	r2, r1
 8019dc2:	80fb      	strh	r3, [r7, #6]
 8019dc4:	4613      	mov	r3, r2
 8019dc6:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8019dc8:	1d7a      	adds	r2, r7, #5
 8019dca:	88f9      	ldrh	r1, [r7, #6]
 8019dcc:	2301      	movs	r3, #1
 8019dce:	4803      	ldr	r0, [pc, #12]	@ (8019ddc <SUBGRF_WriteRegister+0x24>)
 8019dd0:	f7ed fc7c 	bl	80076cc <HAL_SUBGHZ_WriteRegisters>
}
 8019dd4:	bf00      	nop
 8019dd6:	3708      	adds	r7, #8
 8019dd8:	46bd      	mov	sp, r7
 8019dda:	bd80      	pop	{r7, pc}
 8019ddc:	200003e0 	.word	0x200003e0

08019de0 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 8019de0:	b580      	push	{r7, lr}
 8019de2:	b084      	sub	sp, #16
 8019de4:	af00      	add	r7, sp, #0
 8019de6:	4603      	mov	r3, r0
 8019de8:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 8019dea:	f107 020f 	add.w	r2, r7, #15
 8019dee:	88f9      	ldrh	r1, [r7, #6]
 8019df0:	2301      	movs	r3, #1
 8019df2:	4804      	ldr	r0, [pc, #16]	@ (8019e04 <SUBGRF_ReadRegister+0x24>)
 8019df4:	f7ed fcc9 	bl	800778a <HAL_SUBGHZ_ReadRegisters>
    return data;
 8019df8:	7bfb      	ldrb	r3, [r7, #15]
}
 8019dfa:	4618      	mov	r0, r3
 8019dfc:	3710      	adds	r7, #16
 8019dfe:	46bd      	mov	sp, r7
 8019e00:	bd80      	pop	{r7, pc}
 8019e02:	bf00      	nop
 8019e04:	200003e0 	.word	0x200003e0

08019e08 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8019e08:	b580      	push	{r7, lr}
 8019e0a:	b086      	sub	sp, #24
 8019e0c:	af00      	add	r7, sp, #0
 8019e0e:	4603      	mov	r3, r0
 8019e10:	6039      	str	r1, [r7, #0]
 8019e12:	80fb      	strh	r3, [r7, #6]
 8019e14:	4613      	mov	r3, r2
 8019e16:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019e18:	f3ef 8310 	mrs	r3, PRIMASK
 8019e1c:	60fb      	str	r3, [r7, #12]
  return(result);
 8019e1e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8019e20:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019e22:	b672      	cpsid	i
}
 8019e24:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 8019e26:	88bb      	ldrh	r3, [r7, #4]
 8019e28:	88f9      	ldrh	r1, [r7, #6]
 8019e2a:	683a      	ldr	r2, [r7, #0]
 8019e2c:	4806      	ldr	r0, [pc, #24]	@ (8019e48 <SUBGRF_WriteRegisters+0x40>)
 8019e2e:	f7ed fc4d 	bl	80076cc <HAL_SUBGHZ_WriteRegisters>
 8019e32:	697b      	ldr	r3, [r7, #20]
 8019e34:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019e36:	693b      	ldr	r3, [r7, #16]
 8019e38:	f383 8810 	msr	PRIMASK, r3
}
 8019e3c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8019e3e:	bf00      	nop
 8019e40:	3718      	adds	r7, #24
 8019e42:	46bd      	mov	sp, r7
 8019e44:	bd80      	pop	{r7, pc}
 8019e46:	bf00      	nop
 8019e48:	200003e0 	.word	0x200003e0

08019e4c <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8019e4c:	b580      	push	{r7, lr}
 8019e4e:	b086      	sub	sp, #24
 8019e50:	af00      	add	r7, sp, #0
 8019e52:	4603      	mov	r3, r0
 8019e54:	6039      	str	r1, [r7, #0]
 8019e56:	80fb      	strh	r3, [r7, #6]
 8019e58:	4613      	mov	r3, r2
 8019e5a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019e5c:	f3ef 8310 	mrs	r3, PRIMASK
 8019e60:	60fb      	str	r3, [r7, #12]
  return(result);
 8019e62:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8019e64:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019e66:	b672      	cpsid	i
}
 8019e68:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 8019e6a:	88bb      	ldrh	r3, [r7, #4]
 8019e6c:	88f9      	ldrh	r1, [r7, #6]
 8019e6e:	683a      	ldr	r2, [r7, #0]
 8019e70:	4806      	ldr	r0, [pc, #24]	@ (8019e8c <SUBGRF_ReadRegisters+0x40>)
 8019e72:	f7ed fc8a 	bl	800778a <HAL_SUBGHZ_ReadRegisters>
 8019e76:	697b      	ldr	r3, [r7, #20]
 8019e78:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019e7a:	693b      	ldr	r3, [r7, #16]
 8019e7c:	f383 8810 	msr	PRIMASK, r3
}
 8019e80:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8019e82:	bf00      	nop
 8019e84:	3718      	adds	r7, #24
 8019e86:	46bd      	mov	sp, r7
 8019e88:	bd80      	pop	{r7, pc}
 8019e8a:	bf00      	nop
 8019e8c:	200003e0 	.word	0x200003e0

08019e90 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8019e90:	b580      	push	{r7, lr}
 8019e92:	b086      	sub	sp, #24
 8019e94:	af00      	add	r7, sp, #0
 8019e96:	4603      	mov	r3, r0
 8019e98:	6039      	str	r1, [r7, #0]
 8019e9a:	71fb      	strb	r3, [r7, #7]
 8019e9c:	4613      	mov	r3, r2
 8019e9e:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019ea0:	f3ef 8310 	mrs	r3, PRIMASK
 8019ea4:	60fb      	str	r3, [r7, #12]
  return(result);
 8019ea6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8019ea8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019eaa:	b672      	cpsid	i
}
 8019eac:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 8019eae:	79bb      	ldrb	r3, [r7, #6]
 8019eb0:	b29b      	uxth	r3, r3
 8019eb2:	79f9      	ldrb	r1, [r7, #7]
 8019eb4:	683a      	ldr	r2, [r7, #0]
 8019eb6:	4806      	ldr	r0, [pc, #24]	@ (8019ed0 <SUBGRF_WriteBuffer+0x40>)
 8019eb8:	f7ed fd7b 	bl	80079b2 <HAL_SUBGHZ_WriteBuffer>
 8019ebc:	697b      	ldr	r3, [r7, #20]
 8019ebe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019ec0:	693b      	ldr	r3, [r7, #16]
 8019ec2:	f383 8810 	msr	PRIMASK, r3
}
 8019ec6:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8019ec8:	bf00      	nop
 8019eca:	3718      	adds	r7, #24
 8019ecc:	46bd      	mov	sp, r7
 8019ece:	bd80      	pop	{r7, pc}
 8019ed0:	200003e0 	.word	0x200003e0

08019ed4 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8019ed4:	b580      	push	{r7, lr}
 8019ed6:	b086      	sub	sp, #24
 8019ed8:	af00      	add	r7, sp, #0
 8019eda:	4603      	mov	r3, r0
 8019edc:	6039      	str	r1, [r7, #0]
 8019ede:	71fb      	strb	r3, [r7, #7]
 8019ee0:	4613      	mov	r3, r2
 8019ee2:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019ee4:	f3ef 8310 	mrs	r3, PRIMASK
 8019ee8:	60fb      	str	r3, [r7, #12]
  return(result);
 8019eea:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8019eec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019eee:	b672      	cpsid	i
}
 8019ef0:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 8019ef2:	79bb      	ldrb	r3, [r7, #6]
 8019ef4:	b29b      	uxth	r3, r3
 8019ef6:	79f9      	ldrb	r1, [r7, #7]
 8019ef8:	683a      	ldr	r2, [r7, #0]
 8019efa:	4806      	ldr	r0, [pc, #24]	@ (8019f14 <SUBGRF_ReadBuffer+0x40>)
 8019efc:	f7ed fdac 	bl	8007a58 <HAL_SUBGHZ_ReadBuffer>
 8019f00:	697b      	ldr	r3, [r7, #20]
 8019f02:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019f04:	693b      	ldr	r3, [r7, #16]
 8019f06:	f383 8810 	msr	PRIMASK, r3
}
 8019f0a:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8019f0c:	bf00      	nop
 8019f0e:	3718      	adds	r7, #24
 8019f10:	46bd      	mov	sp, r7
 8019f12:	bd80      	pop	{r7, pc}
 8019f14:	200003e0 	.word	0x200003e0

08019f18 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8019f18:	b580      	push	{r7, lr}
 8019f1a:	b086      	sub	sp, #24
 8019f1c:	af00      	add	r7, sp, #0
 8019f1e:	4603      	mov	r3, r0
 8019f20:	6039      	str	r1, [r7, #0]
 8019f22:	71fb      	strb	r3, [r7, #7]
 8019f24:	4613      	mov	r3, r2
 8019f26:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019f28:	f3ef 8310 	mrs	r3, PRIMASK
 8019f2c:	60fb      	str	r3, [r7, #12]
  return(result);
 8019f2e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8019f30:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019f32:	b672      	cpsid	i
}
 8019f34:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 8019f36:	88bb      	ldrh	r3, [r7, #4]
 8019f38:	79f9      	ldrb	r1, [r7, #7]
 8019f3a:	683a      	ldr	r2, [r7, #0]
 8019f3c:	4806      	ldr	r0, [pc, #24]	@ (8019f58 <SUBGRF_WriteCommand+0x40>)
 8019f3e:	f7ed fc85 	bl	800784c <HAL_SUBGHZ_ExecSetCmd>
 8019f42:	697b      	ldr	r3, [r7, #20]
 8019f44:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019f46:	693b      	ldr	r3, [r7, #16]
 8019f48:	f383 8810 	msr	PRIMASK, r3
}
 8019f4c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8019f4e:	bf00      	nop
 8019f50:	3718      	adds	r7, #24
 8019f52:	46bd      	mov	sp, r7
 8019f54:	bd80      	pop	{r7, pc}
 8019f56:	bf00      	nop
 8019f58:	200003e0 	.word	0x200003e0

08019f5c <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8019f5c:	b580      	push	{r7, lr}
 8019f5e:	b086      	sub	sp, #24
 8019f60:	af00      	add	r7, sp, #0
 8019f62:	4603      	mov	r3, r0
 8019f64:	6039      	str	r1, [r7, #0]
 8019f66:	71fb      	strb	r3, [r7, #7]
 8019f68:	4613      	mov	r3, r2
 8019f6a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019f6c:	f3ef 8310 	mrs	r3, PRIMASK
 8019f70:	60fb      	str	r3, [r7, #12]
  return(result);
 8019f72:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8019f74:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019f76:	b672      	cpsid	i
}
 8019f78:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 8019f7a:	88bb      	ldrh	r3, [r7, #4]
 8019f7c:	79f9      	ldrb	r1, [r7, #7]
 8019f7e:	683a      	ldr	r2, [r7, #0]
 8019f80:	4806      	ldr	r0, [pc, #24]	@ (8019f9c <SUBGRF_ReadCommand+0x40>)
 8019f82:	f7ed fcc2 	bl	800790a <HAL_SUBGHZ_ExecGetCmd>
 8019f86:	697b      	ldr	r3, [r7, #20]
 8019f88:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019f8a:	693b      	ldr	r3, [r7, #16]
 8019f8c:	f383 8810 	msr	PRIMASK, r3
}
 8019f90:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8019f92:	bf00      	nop
 8019f94:	3718      	adds	r7, #24
 8019f96:	46bd      	mov	sp, r7
 8019f98:	bd80      	pop	{r7, pc}
 8019f9a:	bf00      	nop
 8019f9c:	200003e0 	.word	0x200003e0

08019fa0 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 8019fa0:	b580      	push	{r7, lr}
 8019fa2:	b084      	sub	sp, #16
 8019fa4:	af00      	add	r7, sp, #0
 8019fa6:	4603      	mov	r3, r0
 8019fa8:	460a      	mov	r2, r1
 8019faa:	71fb      	strb	r3, [r7, #7]
 8019fac:	4613      	mov	r3, r2
 8019fae:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 8019fb0:	2301      	movs	r3, #1
 8019fb2:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 8019fb4:	79bb      	ldrb	r3, [r7, #6]
 8019fb6:	2b01      	cmp	r3, #1
 8019fb8:	d10d      	bne.n	8019fd6 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 8019fba:	79fb      	ldrb	r3, [r7, #7]
 8019fbc:	2b01      	cmp	r3, #1
 8019fbe:	d104      	bne.n	8019fca <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 8019fc0:	2302      	movs	r3, #2
 8019fc2:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8019fc4:	2004      	movs	r0, #4
 8019fc6:	f000 f8df 	bl	801a188 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 8019fca:	79fb      	ldrb	r3, [r7, #7]
 8019fcc:	2b02      	cmp	r3, #2
 8019fce:	d107      	bne.n	8019fe0 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 8019fd0:	2303      	movs	r3, #3
 8019fd2:	73fb      	strb	r3, [r7, #15]
 8019fd4:	e004      	b.n	8019fe0 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 8019fd6:	79bb      	ldrb	r3, [r7, #6]
 8019fd8:	2b00      	cmp	r3, #0
 8019fda:	d101      	bne.n	8019fe0 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 8019fdc:	2301      	movs	r3, #1
 8019fde:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 8019fe0:	7bfb      	ldrb	r3, [r7, #15]
 8019fe2:	4618      	mov	r0, r3
 8019fe4:	f7f0 fd6b 	bl	800aabe <RBI_ConfigRFSwitch>
}
 8019fe8:	bf00      	nop
 8019fea:	3710      	adds	r7, #16
 8019fec:	46bd      	mov	sp, r7
 8019fee:	bd80      	pop	{r7, pc}

08019ff0 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 8019ff0:	b580      	push	{r7, lr}
 8019ff2:	b084      	sub	sp, #16
 8019ff4:	af00      	add	r7, sp, #0
 8019ff6:	4603      	mov	r3, r0
 8019ff8:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 8019ffa:	2301      	movs	r3, #1
 8019ffc:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 8019ffe:	f7f0 fd6c 	bl	800aada <RBI_GetTxConfig>
 801a002:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 801a004:	68bb      	ldr	r3, [r7, #8]
 801a006:	2b02      	cmp	r3, #2
 801a008:	d016      	beq.n	801a038 <SUBGRF_SetRfTxPower+0x48>
 801a00a:	68bb      	ldr	r3, [r7, #8]
 801a00c:	2b02      	cmp	r3, #2
 801a00e:	dc16      	bgt.n	801a03e <SUBGRF_SetRfTxPower+0x4e>
 801a010:	68bb      	ldr	r3, [r7, #8]
 801a012:	2b00      	cmp	r3, #0
 801a014:	d003      	beq.n	801a01e <SUBGRF_SetRfTxPower+0x2e>
 801a016:	68bb      	ldr	r3, [r7, #8]
 801a018:	2b01      	cmp	r3, #1
 801a01a:	d00a      	beq.n	801a032 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 801a01c:	e00f      	b.n	801a03e <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 801a01e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a022:	2b0f      	cmp	r3, #15
 801a024:	dd02      	ble.n	801a02c <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 801a026:	2302      	movs	r3, #2
 801a028:	73fb      	strb	r3, [r7, #15]
            break;
 801a02a:	e009      	b.n	801a040 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 801a02c:	2301      	movs	r3, #1
 801a02e:	73fb      	strb	r3, [r7, #15]
            break;
 801a030:	e006      	b.n	801a040 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 801a032:	2301      	movs	r3, #1
 801a034:	73fb      	strb	r3, [r7, #15]
            break;
 801a036:	e003      	b.n	801a040 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 801a038:	2302      	movs	r3, #2
 801a03a:	73fb      	strb	r3, [r7, #15]
            break;
 801a03c:	e000      	b.n	801a040 <SUBGRF_SetRfTxPower+0x50>
            break;
 801a03e:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 801a040:	f997 1007 	ldrsb.w	r1, [r7, #7]
 801a044:	7bfb      	ldrb	r3, [r7, #15]
 801a046:	2202      	movs	r2, #2
 801a048:	4618      	mov	r0, r3
 801a04a:	f7ff fbd3 	bl	80197f4 <SUBGRF_SetTxParams>

    return paSelect;
 801a04e:	7bfb      	ldrb	r3, [r7, #15]
}
 801a050:	4618      	mov	r0, r3
 801a052:	3710      	adds	r7, #16
 801a054:	46bd      	mov	sp, r7
 801a056:	bd80      	pop	{r7, pc}

0801a058 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 801a058:	b480      	push	{r7}
 801a05a:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 801a05c:	2301      	movs	r3, #1
}
 801a05e:	4618      	mov	r0, r3
 801a060:	46bd      	mov	sp, r7
 801a062:	bc80      	pop	{r7}
 801a064:	4770      	bx	lr
	...

0801a068 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801a068:	b580      	push	{r7, lr}
 801a06a:	b082      	sub	sp, #8
 801a06c:	af00      	add	r7, sp, #0
 801a06e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 801a070:	4b03      	ldr	r3, [pc, #12]	@ (801a080 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 801a072:	681b      	ldr	r3, [r3, #0]
 801a074:	2001      	movs	r0, #1
 801a076:	4798      	blx	r3
}
 801a078:	bf00      	nop
 801a07a:	3708      	adds	r7, #8
 801a07c:	46bd      	mov	sp, r7
 801a07e:	bd80      	pop	{r7, pc}
 801a080:	20001d70 	.word	0x20001d70

0801a084 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801a084:	b580      	push	{r7, lr}
 801a086:	b082      	sub	sp, #8
 801a088:	af00      	add	r7, sp, #0
 801a08a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 801a08c:	4b03      	ldr	r3, [pc, #12]	@ (801a09c <HAL_SUBGHZ_RxCpltCallback+0x18>)
 801a08e:	681b      	ldr	r3, [r3, #0]
 801a090:	2002      	movs	r0, #2
 801a092:	4798      	blx	r3
}
 801a094:	bf00      	nop
 801a096:	3708      	adds	r7, #8
 801a098:	46bd      	mov	sp, r7
 801a09a:	bd80      	pop	{r7, pc}
 801a09c:	20001d70 	.word	0x20001d70

0801a0a0 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 801a0a0:	b580      	push	{r7, lr}
 801a0a2:	b082      	sub	sp, #8
 801a0a4:	af00      	add	r7, sp, #0
 801a0a6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 801a0a8:	4b03      	ldr	r3, [pc, #12]	@ (801a0b8 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 801a0aa:	681b      	ldr	r3, [r3, #0]
 801a0ac:	2040      	movs	r0, #64	@ 0x40
 801a0ae:	4798      	blx	r3
}
 801a0b0:	bf00      	nop
 801a0b2:	3708      	adds	r7, #8
 801a0b4:	46bd      	mov	sp, r7
 801a0b6:	bd80      	pop	{r7, pc}
 801a0b8:	20001d70 	.word	0x20001d70

0801a0bc <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 801a0bc:	b580      	push	{r7, lr}
 801a0be:	b082      	sub	sp, #8
 801a0c0:	af00      	add	r7, sp, #0
 801a0c2:	6078      	str	r0, [r7, #4]
 801a0c4:	460b      	mov	r3, r1
 801a0c6:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 801a0c8:	78fb      	ldrb	r3, [r7, #3]
 801a0ca:	2b00      	cmp	r3, #0
 801a0cc:	d002      	beq.n	801a0d4 <HAL_SUBGHZ_CADStatusCallback+0x18>
 801a0ce:	2b01      	cmp	r3, #1
 801a0d0:	d005      	beq.n	801a0de <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 801a0d2:	e00a      	b.n	801a0ea <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 801a0d4:	4b07      	ldr	r3, [pc, #28]	@ (801a0f4 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801a0d6:	681b      	ldr	r3, [r3, #0]
 801a0d8:	2080      	movs	r0, #128	@ 0x80
 801a0da:	4798      	blx	r3
            break;
 801a0dc:	e005      	b.n	801a0ea <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 801a0de:	4b05      	ldr	r3, [pc, #20]	@ (801a0f4 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801a0e0:	681b      	ldr	r3, [r3, #0]
 801a0e2:	f44f 7080 	mov.w	r0, #256	@ 0x100
 801a0e6:	4798      	blx	r3
            break;
 801a0e8:	bf00      	nop
    }
}
 801a0ea:	bf00      	nop
 801a0ec:	3708      	adds	r7, #8
 801a0ee:	46bd      	mov	sp, r7
 801a0f0:	bd80      	pop	{r7, pc}
 801a0f2:	bf00      	nop
 801a0f4:	20001d70 	.word	0x20001d70

0801a0f8 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801a0f8:	b580      	push	{r7, lr}
 801a0fa:	b082      	sub	sp, #8
 801a0fc:	af00      	add	r7, sp, #0
 801a0fe:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 801a100:	4b04      	ldr	r3, [pc, #16]	@ (801a114 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 801a102:	681b      	ldr	r3, [r3, #0]
 801a104:	f44f 7000 	mov.w	r0, #512	@ 0x200
 801a108:	4798      	blx	r3
}
 801a10a:	bf00      	nop
 801a10c:	3708      	adds	r7, #8
 801a10e:	46bd      	mov	sp, r7
 801a110:	bd80      	pop	{r7, pc}
 801a112:	bf00      	nop
 801a114:	20001d70 	.word	0x20001d70

0801a118 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801a118:	b580      	push	{r7, lr}
 801a11a:	b082      	sub	sp, #8
 801a11c:	af00      	add	r7, sp, #0
 801a11e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 801a120:	4b03      	ldr	r3, [pc, #12]	@ (801a130 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 801a122:	681b      	ldr	r3, [r3, #0]
 801a124:	2020      	movs	r0, #32
 801a126:	4798      	blx	r3
}
 801a128:	bf00      	nop
 801a12a:	3708      	adds	r7, #8
 801a12c:	46bd      	mov	sp, r7
 801a12e:	bd80      	pop	{r7, pc}
 801a130:	20001d70 	.word	0x20001d70

0801a134 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801a134:	b580      	push	{r7, lr}
 801a136:	b082      	sub	sp, #8
 801a138:	af00      	add	r7, sp, #0
 801a13a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 801a13c:	4b03      	ldr	r3, [pc, #12]	@ (801a14c <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 801a13e:	681b      	ldr	r3, [r3, #0]
 801a140:	2004      	movs	r0, #4
 801a142:	4798      	blx	r3
}
 801a144:	bf00      	nop
 801a146:	3708      	adds	r7, #8
 801a148:	46bd      	mov	sp, r7
 801a14a:	bd80      	pop	{r7, pc}
 801a14c:	20001d70 	.word	0x20001d70

0801a150 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801a150:	b580      	push	{r7, lr}
 801a152:	b082      	sub	sp, #8
 801a154:	af00      	add	r7, sp, #0
 801a156:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 801a158:	4b03      	ldr	r3, [pc, #12]	@ (801a168 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 801a15a:	681b      	ldr	r3, [r3, #0]
 801a15c:	2008      	movs	r0, #8
 801a15e:	4798      	blx	r3
}
 801a160:	bf00      	nop
 801a162:	3708      	adds	r7, #8
 801a164:	46bd      	mov	sp, r7
 801a166:	bd80      	pop	{r7, pc}
 801a168:	20001d70 	.word	0x20001d70

0801a16c <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801a16c:	b580      	push	{r7, lr}
 801a16e:	b082      	sub	sp, #8
 801a170:	af00      	add	r7, sp, #0
 801a172:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 801a174:	4b03      	ldr	r3, [pc, #12]	@ (801a184 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 801a176:	681b      	ldr	r3, [r3, #0]
 801a178:	2010      	movs	r0, #16
 801a17a:	4798      	blx	r3
}
 801a17c:	bf00      	nop
 801a17e:	3708      	adds	r7, #8
 801a180:	46bd      	mov	sp, r7
 801a182:	bd80      	pop	{r7, pc}
 801a184:	20001d70 	.word	0x20001d70

0801a188 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 801a188:	b580      	push	{r7, lr}
 801a18a:	b084      	sub	sp, #16
 801a18c:	af00      	add	r7, sp, #0
 801a18e:	4603      	mov	r3, r0
 801a190:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 801a192:	f7f0 fcb0 	bl	800aaf6 <RBI_IsDCDC>
 801a196:	4603      	mov	r3, r0
 801a198:	2b01      	cmp	r3, #1
 801a19a:	d112      	bne.n	801a1c2 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 801a19c:	f640 1023 	movw	r0, #2339	@ 0x923
 801a1a0:	f7ff fe1e 	bl	8019de0 <SUBGRF_ReadRegister>
 801a1a4:	4603      	mov	r3, r0
 801a1a6:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 801a1a8:	7bfb      	ldrb	r3, [r7, #15]
 801a1aa:	f023 0306 	bic.w	r3, r3, #6
 801a1ae:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 801a1b0:	7bfa      	ldrb	r2, [r7, #15]
 801a1b2:	79fb      	ldrb	r3, [r7, #7]
 801a1b4:	4313      	orrs	r3, r2
 801a1b6:	b2db      	uxtb	r3, r3
 801a1b8:	4619      	mov	r1, r3
 801a1ba:	f640 1023 	movw	r0, #2339	@ 0x923
 801a1be:	f7ff fdfb 	bl	8019db8 <SUBGRF_WriteRegister>
  }
}
 801a1c2:	bf00      	nop
 801a1c4:	3710      	adds	r7, #16
 801a1c6:	46bd      	mov	sp, r7
 801a1c8:	bd80      	pop	{r7, pc}
	...

0801a1cc <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 801a1cc:	b480      	push	{r7}
 801a1ce:	b085      	sub	sp, #20
 801a1d0:	af00      	add	r7, sp, #0
 801a1d2:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 801a1d4:	687b      	ldr	r3, [r7, #4]
 801a1d6:	2b00      	cmp	r3, #0
 801a1d8:	d101      	bne.n	801a1de <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 801a1da:	231f      	movs	r3, #31
 801a1dc:	e017      	b.n	801a20e <SUBGRF_GetFskBandwidthRegValue+0x42>
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801a1de:	2300      	movs	r3, #0
 801a1e0:	73fb      	strb	r3, [r7, #15]
 801a1e2:	e00f      	b.n	801a204 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 801a1e4:	7bfb      	ldrb	r3, [r7, #15]
 801a1e6:	4a0c      	ldr	r2, [pc, #48]	@ (801a218 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801a1e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801a1ec:	687a      	ldr	r2, [r7, #4]
 801a1ee:	429a      	cmp	r2, r3
 801a1f0:	d205      	bcs.n	801a1fe <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 801a1f2:	7bfb      	ldrb	r3, [r7, #15]
 801a1f4:	4a08      	ldr	r2, [pc, #32]	@ (801a218 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801a1f6:	00db      	lsls	r3, r3, #3
 801a1f8:	4413      	add	r3, r2
 801a1fa:	791b      	ldrb	r3, [r3, #4]
 801a1fc:	e007      	b.n	801a20e <SUBGRF_GetFskBandwidthRegValue+0x42>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801a1fe:	7bfb      	ldrb	r3, [r7, #15]
 801a200:	3301      	adds	r3, #1
 801a202:	73fb      	strb	r3, [r7, #15]
 801a204:	7bfb      	ldrb	r3, [r7, #15]
 801a206:	2b15      	cmp	r3, #21
 801a208:	d9ec      	bls.n	801a1e4 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 801a20a:	bf00      	nop
 801a20c:	e7fd      	b.n	801a20a <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 801a20e:	4618      	mov	r0, r3
 801a210:	3714      	adds	r7, #20
 801a212:	46bd      	mov	sp, r7
 801a214:	bc80      	pop	{r7}
 801a216:	4770      	bx	lr
 801a218:	0801f4ec 	.word	0x0801f4ec

0801a21c <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 801a21c:	b580      	push	{r7, lr}
 801a21e:	b08a      	sub	sp, #40	@ 0x28
 801a220:	af00      	add	r7, sp, #0
 801a222:	6078      	str	r0, [r7, #4]
 801a224:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 801a226:	4b35      	ldr	r3, [pc, #212]	@ (801a2fc <SUBGRF_GetCFO+0xe0>)
 801a228:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 801a22a:	f640 0007 	movw	r0, #2055	@ 0x807
 801a22e:	f7ff fdd7 	bl	8019de0 <SUBGRF_ReadRegister>
 801a232:	4603      	mov	r3, r0
 801a234:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 801a236:	7ffb      	ldrb	r3, [r7, #31]
 801a238:	08db      	lsrs	r3, r3, #3
 801a23a:	b2db      	uxtb	r3, r3
 801a23c:	f003 0303 	and.w	r3, r3, #3
 801a240:	3328      	adds	r3, #40	@ 0x28
 801a242:	443b      	add	r3, r7
 801a244:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 801a248:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 801a24a:	7ffb      	ldrb	r3, [r7, #31]
 801a24c:	f003 0307 	and.w	r3, r3, #7
 801a250:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 801a252:	7fba      	ldrb	r2, [r7, #30]
 801a254:	7f7b      	ldrb	r3, [r7, #29]
 801a256:	3b01      	subs	r3, #1
 801a258:	fa02 f303 	lsl.w	r3, r2, r3
 801a25c:	461a      	mov	r2, r3
 801a25e:	4b28      	ldr	r3, [pc, #160]	@ (801a300 <SUBGRF_GetCFO+0xe4>)
 801a260:	fbb3 f3f2 	udiv	r3, r3, r2
 801a264:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 801a266:	69ba      	ldr	r2, [r7, #24]
 801a268:	687b      	ldr	r3, [r7, #4]
 801a26a:	fbb2 f3f3 	udiv	r3, r2, r3
 801a26e:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 801a270:	2301      	movs	r3, #1
 801a272:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 801a276:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a27a:	697a      	ldr	r2, [r7, #20]
 801a27c:	fb02 f303 	mul.w	r3, r2, r3
 801a280:	2b07      	cmp	r3, #7
 801a282:	d802      	bhi.n	801a28a <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 801a284:	2302      	movs	r3, #2
 801a286:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  if (cf_osr * interp < 4)
 801a28a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a28e:	697a      	ldr	r2, [r7, #20]
 801a290:	fb02 f303 	mul.w	r3, r2, r3
 801a294:	2b03      	cmp	r3, #3
 801a296:	d802      	bhi.n	801a29e <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 801a298:	2304      	movs	r3, #4
 801a29a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 801a29e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801a2a2:	69bb      	ldr	r3, [r7, #24]
 801a2a4:	fb02 f303 	mul.w	r3, r2, r3
 801a2a8:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 801a2aa:	f44f 60d6 	mov.w	r0, #1712	@ 0x6b0
 801a2ae:	f7ff fd97 	bl	8019de0 <SUBGRF_ReadRegister>
 801a2b2:	4603      	mov	r3, r0
 801a2b4:	021b      	lsls	r3, r3, #8
 801a2b6:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 801a2ba:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 801a2bc:	f240 60b1 	movw	r0, #1713	@ 0x6b1
 801a2c0:	f7ff fd8e 	bl	8019de0 <SUBGRF_ReadRegister>
 801a2c4:	4603      	mov	r3, r0
 801a2c6:	461a      	mov	r2, r3
 801a2c8:	6a3b      	ldr	r3, [r7, #32]
 801a2ca:	4313      	orrs	r3, r2
 801a2cc:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 801a2ce:	6a3b      	ldr	r3, [r7, #32]
 801a2d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801a2d4:	2b00      	cmp	r3, #0
 801a2d6:	d005      	beq.n	801a2e4 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 801a2d8:	6a3b      	ldr	r3, [r7, #32]
 801a2da:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 801a2de:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 801a2e2:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 801a2e4:	693b      	ldr	r3, [r7, #16]
 801a2e6:	095b      	lsrs	r3, r3, #5
 801a2e8:	6a3a      	ldr	r2, [r7, #32]
 801a2ea:	fb02 f303 	mul.w	r3, r2, r3
 801a2ee:	11da      	asrs	r2, r3, #7
 801a2f0:	683b      	ldr	r3, [r7, #0]
 801a2f2:	601a      	str	r2, [r3, #0]
}
 801a2f4:	bf00      	nop
 801a2f6:	3728      	adds	r7, #40	@ 0x28
 801a2f8:	46bd      	mov	sp, r7
 801a2fa:	bd80      	pop	{r7, pc}
 801a2fc:	0c0a0804 	.word	0x0c0a0804
 801a300:	01e84800 	.word	0x01e84800

0801a304 <RFW_TransmitLongPacket>:
static void RFW_GetPayload( uint8_t Offset, uint8_t Length );
#endif

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout, void (*TxLongPacketGetNextChunkCb) (uint8_t** buffer, uint8_t buffer_size) )
{
 801a304:	b480      	push	{r7}
 801a306:	b087      	sub	sp, #28
 801a308:	af00      	add	r7, sp, #0
 801a30a:	4603      	mov	r3, r0
 801a30c:	60b9      	str	r1, [r7, #8]
 801a30e:	607a      	str	r2, [r7, #4]
 801a310:	81fb      	strh	r3, [r7, #14]
  int32_t status=0;
 801a312:	2300      	movs	r3, #0
 801a314:	617b      	str	r3, [r7, #20]
        default:
            break;
    }
  }
#else
  status= -1;
 801a316:	f04f 33ff 	mov.w	r3, #4294967295
 801a31a:	617b      	str	r3, [r7, #20]
#endif
  return status;
 801a31c:	697b      	ldr	r3, [r7, #20]
}
 801a31e:	4618      	mov	r0, r3
 801a320:	371c      	adds	r7, #28
 801a322:	46bd      	mov	sp, r7
 801a324:	bc80      	pop	{r7}
 801a326:	4770      	bx	lr

0801a328 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout, void (*RxLongPacketStoreChunkCb) (uint8_t* buffer, uint8_t chunk_size) )
{
 801a328:	b480      	push	{r7}
 801a32a:	b087      	sub	sp, #28
 801a32c:	af00      	add	r7, sp, #0
 801a32e:	4603      	mov	r3, r0
 801a330:	60b9      	str	r1, [r7, #8]
 801a332:	607a      	str	r2, [r7, #4]
 801a334:	73fb      	strb	r3, [r7, #15]
  int32_t status=0;
 801a336:	2300      	movs	r3, #0
 801a338:	617b      	str	r3, [r7, #20]
    {
      SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
    }
  }
#else
  status= -1;
 801a33a:	f04f 33ff 	mov.w	r3, #4294967295
 801a33e:	617b      	str	r3, [r7, #20]
#endif
  return status;
 801a340:	697b      	ldr	r3, [r7, #20]
}
 801a342:	4618      	mov	r0, r3
 801a344:	371c      	adds	r7, #28
 801a346:	46bd      	mov	sp, r7
 801a348:	bc80      	pop	{r7}
 801a34a:	4770      	bx	lr

0801a34c <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t* config, RadioEvents_t* RadioEvents, TimerEvent_t* TimeoutTimerEvent)
{
 801a34c:	b480      	push	{r7}
 801a34e:	b085      	sub	sp, #20
 801a350:	af00      	add	r7, sp, #0
 801a352:	60f8      	str	r0, [r7, #12]
 801a354:	60b9      	str	r1, [r7, #8]
 801a356:	607a      	str	r2, [r7, #4]
  RFWPacket.Init.Enable=1;
  /* Initialize Timer for end of fixed packet, started at sync*/
  TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
  return 0;
#else
  return -1;
 801a358:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 801a35c:	4618      	mov	r0, r3
 801a35e:	3714      	adds	r7, #20
 801a360:	46bd      	mov	sp, r7
 801a362:	bc80      	pop	{r7}
 801a364:	4770      	bx	lr

0801a366 <RFW_DeInit>:

void RFW_DeInit( void)
{
 801a366:	b480      	push	{r7}
 801a368:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 801a36a:	bf00      	nop
 801a36c:	46bd      	mov	sp, r7
 801a36e:	bc80      	pop	{r7}
 801a370:	4770      	bx	lr

0801a372 <RFW_Is_Init>:

uint8_t RFW_Is_Init( void)
{
 801a372:	b480      	push	{r7}
 801a374:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
 801a376:	2300      	movs	r3, #0
#endif
}
 801a378:	4618      	mov	r0, r3
 801a37a:	46bd      	mov	sp, r7
 801a37c:	bc80      	pop	{r7}
 801a37e:	4770      	bx	lr

0801a380 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void)
{
 801a380:	b480      	push	{r7}
 801a382:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
 801a384:	2300      	movs	r3, #0
#endif
}
 801a386:	4618      	mov	r0, r3
 801a388:	46bd      	mov	sp, r7
 801a38a:	bc80      	pop	{r7}
 801a38c:	4770      	bx	lr

0801a38e <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch)
{
 801a38e:	b480      	push	{r7}
 801a390:	b083      	sub	sp, #12
 801a392:	af00      	add	r7, sp, #0
 801a394:	4603      	mov	r3, r0
 801a396:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 801a398:	bf00      	nop
 801a39a:	370c      	adds	r7, #12
 801a39c:	46bd      	mov	sp, r7
 801a39e:	bc80      	pop	{r7}
 801a3a0:	4770      	bx	lr

0801a3a2 <RFW_TransmitInit>:

int32_t RFW_TransmitInit(uint8_t* inOutBuffer, uint8_t size, uint8_t* outSize)
{
 801a3a2:	b480      	push	{r7}
 801a3a4:	b087      	sub	sp, #28
 801a3a6:	af00      	add	r7, sp, #0
 801a3a8:	60f8      	str	r0, [r7, #12]
 801a3aa:	460b      	mov	r3, r1
 801a3ac:	607a      	str	r2, [r7, #4]
 801a3ae:	72fb      	strb	r3, [r7, #11]
  int32_t status=-1;
 801a3b0:	f04f 33ff 	mov.w	r3, #4294967295
 801a3b4:	617b      	str	r3, [r7, #20]
    RFWPacket.LongPacketModeEnable=0;

    status= 0;
  }
#endif
  return status;
 801a3b6:	697b      	ldr	r3, [r7, #20]
}
 801a3b8:	4618      	mov	r0, r3
 801a3ba:	371c      	adds	r7, #28
 801a3bc:	46bd      	mov	sp, r7
 801a3be:	bc80      	pop	{r7}
 801a3c0:	4770      	bx	lr

0801a3c2 <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 801a3c2:	b480      	push	{r7}
 801a3c4:	af00      	add	r7, sp, #0
  RFWPacket.RxPayloadOffset=0;

  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
 801a3c6:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 801a3ca:	4618      	mov	r0, r3
 801a3cc:	46bd      	mov	sp, r7
 801a3ce:	bc80      	pop	{r7}
 801a3d0:	4770      	bx	lr

0801a3d2 <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket(void)
{
 801a3d2:	b480      	push	{r7}
 801a3d4:	af00      	add	r7, sp, #0
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_GPKTCTL1AR);
  SUBGRF_WriteRegister(SUBGHZ_GPKTCTL1AR, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_GRTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 801a3d6:	bf00      	nop
 801a3d8:	46bd      	mov	sp, r7
 801a3da:	bc80      	pop	{r7}
 801a3dc:	4770      	bx	lr

0801a3de <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 801a3de:	b480      	push	{r7}
 801a3e0:	af00      	add	r7, sp, #0
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 801a3e2:	bf00      	nop
 801a3e4:	46bd      	mov	sp, r7
 801a3e6:	bc80      	pop	{r7}
 801a3e8:	4770      	bx	lr

0801a3ea <RFW_SetRadioModem>:

void RFW_SetRadioModem(RadioModems_t Modem)
{
 801a3ea:	b480      	push	{r7}
 801a3ec:	b083      	sub	sp, #12
 801a3ee:	af00      	add	r7, sp, #0
 801a3f0:	4603      	mov	r3, r0
 801a3f2:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 801a3f4:	bf00      	nop
 801a3f6:	370c      	adds	r7, #12
 801a3f8:	46bd      	mov	sp, r7
 801a3fa:	bc80      	pop	{r7}
 801a3fc:	4770      	bx	lr
	...

0801a400 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801a400:	b480      	push	{r7}
 801a402:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801a404:	4b04      	ldr	r3, [pc, #16]	@ (801a418 <UTIL_LPM_Init+0x18>)
 801a406:	2200      	movs	r2, #0
 801a408:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801a40a:	4b04      	ldr	r3, [pc, #16]	@ (801a41c <UTIL_LPM_Init+0x1c>)
 801a40c:	2200      	movs	r2, #0
 801a40e:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801a410:	bf00      	nop
 801a412:	46bd      	mov	sp, r7
 801a414:	bc80      	pop	{r7}
 801a416:	4770      	bx	lr
 801a418:	20001d74 	.word	0x20001d74
 801a41c:	20001d78 	.word	0x20001d78

0801a420 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801a420:	b480      	push	{r7}
 801a422:	b087      	sub	sp, #28
 801a424:	af00      	add	r7, sp, #0
 801a426:	6078      	str	r0, [r7, #4]
 801a428:	460b      	mov	r3, r1
 801a42a:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a42c:	f3ef 8310 	mrs	r3, PRIMASK
 801a430:	613b      	str	r3, [r7, #16]
  return(result);
 801a432:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801a434:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a436:	b672      	cpsid	i
}
 801a438:	bf00      	nop
  
  switch( state )
 801a43a:	78fb      	ldrb	r3, [r7, #3]
 801a43c:	2b00      	cmp	r3, #0
 801a43e:	d008      	beq.n	801a452 <UTIL_LPM_SetStopMode+0x32>
 801a440:	2b01      	cmp	r3, #1
 801a442:	d10e      	bne.n	801a462 <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 801a444:	4b0d      	ldr	r3, [pc, #52]	@ (801a47c <UTIL_LPM_SetStopMode+0x5c>)
 801a446:	681a      	ldr	r2, [r3, #0]
 801a448:	687b      	ldr	r3, [r7, #4]
 801a44a:	4313      	orrs	r3, r2
 801a44c:	4a0b      	ldr	r2, [pc, #44]	@ (801a47c <UTIL_LPM_SetStopMode+0x5c>)
 801a44e:	6013      	str	r3, [r2, #0]
      break;
 801a450:	e008      	b.n	801a464 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 801a452:	687b      	ldr	r3, [r7, #4]
 801a454:	43da      	mvns	r2, r3
 801a456:	4b09      	ldr	r3, [pc, #36]	@ (801a47c <UTIL_LPM_SetStopMode+0x5c>)
 801a458:	681b      	ldr	r3, [r3, #0]
 801a45a:	4013      	ands	r3, r2
 801a45c:	4a07      	ldr	r2, [pc, #28]	@ (801a47c <UTIL_LPM_SetStopMode+0x5c>)
 801a45e:	6013      	str	r3, [r2, #0]
      break;
 801a460:	e000      	b.n	801a464 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 801a462:	bf00      	nop
 801a464:	697b      	ldr	r3, [r7, #20]
 801a466:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a468:	68fb      	ldr	r3, [r7, #12]
 801a46a:	f383 8810 	msr	PRIMASK, r3
}
 801a46e:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801a470:	bf00      	nop
 801a472:	371c      	adds	r7, #28
 801a474:	46bd      	mov	sp, r7
 801a476:	bc80      	pop	{r7}
 801a478:	4770      	bx	lr
 801a47a:	bf00      	nop
 801a47c:	20001d74 	.word	0x20001d74

0801a480 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801a480:	b480      	push	{r7}
 801a482:	b087      	sub	sp, #28
 801a484:	af00      	add	r7, sp, #0
 801a486:	6078      	str	r0, [r7, #4]
 801a488:	460b      	mov	r3, r1
 801a48a:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a48c:	f3ef 8310 	mrs	r3, PRIMASK
 801a490:	613b      	str	r3, [r7, #16]
  return(result);
 801a492:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801a494:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a496:	b672      	cpsid	i
}
 801a498:	bf00      	nop
  
  switch(state)
 801a49a:	78fb      	ldrb	r3, [r7, #3]
 801a49c:	2b00      	cmp	r3, #0
 801a49e:	d008      	beq.n	801a4b2 <UTIL_LPM_SetOffMode+0x32>
 801a4a0:	2b01      	cmp	r3, #1
 801a4a2:	d10e      	bne.n	801a4c2 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801a4a4:	4b0d      	ldr	r3, [pc, #52]	@ (801a4dc <UTIL_LPM_SetOffMode+0x5c>)
 801a4a6:	681a      	ldr	r2, [r3, #0]
 801a4a8:	687b      	ldr	r3, [r7, #4]
 801a4aa:	4313      	orrs	r3, r2
 801a4ac:	4a0b      	ldr	r2, [pc, #44]	@ (801a4dc <UTIL_LPM_SetOffMode+0x5c>)
 801a4ae:	6013      	str	r3, [r2, #0]
      break;
 801a4b0:	e008      	b.n	801a4c4 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801a4b2:	687b      	ldr	r3, [r7, #4]
 801a4b4:	43da      	mvns	r2, r3
 801a4b6:	4b09      	ldr	r3, [pc, #36]	@ (801a4dc <UTIL_LPM_SetOffMode+0x5c>)
 801a4b8:	681b      	ldr	r3, [r3, #0]
 801a4ba:	4013      	ands	r3, r2
 801a4bc:	4a07      	ldr	r2, [pc, #28]	@ (801a4dc <UTIL_LPM_SetOffMode+0x5c>)
 801a4be:	6013      	str	r3, [r2, #0]
      break;
 801a4c0:	e000      	b.n	801a4c4 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801a4c2:	bf00      	nop
 801a4c4:	697b      	ldr	r3, [r7, #20]
 801a4c6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a4c8:	68fb      	ldr	r3, [r7, #12]
 801a4ca:	f383 8810 	msr	PRIMASK, r3
}
 801a4ce:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801a4d0:	bf00      	nop
 801a4d2:	371c      	adds	r7, #28
 801a4d4:	46bd      	mov	sp, r7
 801a4d6:	bc80      	pop	{r7}
 801a4d8:	4770      	bx	lr
 801a4da:	bf00      	nop
 801a4dc:	20001d78 	.word	0x20001d78

0801a4e0 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 801a4e0:	b580      	push	{r7, lr}
 801a4e2:	b084      	sub	sp, #16
 801a4e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a4e6:	f3ef 8310 	mrs	r3, PRIMASK
 801a4ea:	60bb      	str	r3, [r7, #8]
  return(result);
 801a4ec:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 801a4ee:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801a4f0:	b672      	cpsid	i
}
 801a4f2:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 801a4f4:	4b12      	ldr	r3, [pc, #72]	@ (801a540 <UTIL_LPM_EnterLowPower+0x60>)
 801a4f6:	681b      	ldr	r3, [r3, #0]
 801a4f8:	2b00      	cmp	r3, #0
 801a4fa:	d006      	beq.n	801a50a <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 801a4fc:	4b11      	ldr	r3, [pc, #68]	@ (801a544 <UTIL_LPM_EnterLowPower+0x64>)
 801a4fe:	681b      	ldr	r3, [r3, #0]
 801a500:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 801a502:	4b10      	ldr	r3, [pc, #64]	@ (801a544 <UTIL_LPM_EnterLowPower+0x64>)
 801a504:	685b      	ldr	r3, [r3, #4]
 801a506:	4798      	blx	r3
 801a508:	e010      	b.n	801a52c <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801a50a:	4b0f      	ldr	r3, [pc, #60]	@ (801a548 <UTIL_LPM_EnterLowPower+0x68>)
 801a50c:	681b      	ldr	r3, [r3, #0]
 801a50e:	2b00      	cmp	r3, #0
 801a510:	d006      	beq.n	801a520 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 801a512:	4b0c      	ldr	r3, [pc, #48]	@ (801a544 <UTIL_LPM_EnterLowPower+0x64>)
 801a514:	689b      	ldr	r3, [r3, #8]
 801a516:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 801a518:	4b0a      	ldr	r3, [pc, #40]	@ (801a544 <UTIL_LPM_EnterLowPower+0x64>)
 801a51a:	68db      	ldr	r3, [r3, #12]
 801a51c:	4798      	blx	r3
 801a51e:	e005      	b.n	801a52c <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 801a520:	4b08      	ldr	r3, [pc, #32]	@ (801a544 <UTIL_LPM_EnterLowPower+0x64>)
 801a522:	691b      	ldr	r3, [r3, #16]
 801a524:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 801a526:	4b07      	ldr	r3, [pc, #28]	@ (801a544 <UTIL_LPM_EnterLowPower+0x64>)
 801a528:	695b      	ldr	r3, [r3, #20]
 801a52a:	4798      	blx	r3
 801a52c:	68fb      	ldr	r3, [r7, #12]
 801a52e:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a530:	687b      	ldr	r3, [r7, #4]
 801a532:	f383 8810 	msr	PRIMASK, r3
}
 801a536:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 801a538:	bf00      	nop
 801a53a:	3710      	adds	r7, #16
 801a53c:	46bd      	mov	sp, r7
 801a53e:	bd80      	pop	{r7, pc}
 801a540:	20001d74 	.word	0x20001d74
 801a544:	0801ef64 	.word	0x0801ef64
 801a548:	20001d78 	.word	0x20001d78

0801a54c <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 801a54c:	b480      	push	{r7}
 801a54e:	b087      	sub	sp, #28
 801a550:	af00      	add	r7, sp, #0
 801a552:	60f8      	str	r0, [r7, #12]
 801a554:	60b9      	str	r1, [r7, #8]
 801a556:	4613      	mov	r3, r2
 801a558:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 801a55a:	68fb      	ldr	r3, [r7, #12]
 801a55c:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 801a55e:	68bb      	ldr	r3, [r7, #8]
 801a560:	613b      	str	r3, [r7, #16]

  while( size-- )
 801a562:	e007      	b.n	801a574 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 801a564:	693a      	ldr	r2, [r7, #16]
 801a566:	1c53      	adds	r3, r2, #1
 801a568:	613b      	str	r3, [r7, #16]
 801a56a:	697b      	ldr	r3, [r7, #20]
 801a56c:	1c59      	adds	r1, r3, #1
 801a56e:	6179      	str	r1, [r7, #20]
 801a570:	7812      	ldrb	r2, [r2, #0]
 801a572:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801a574:	88fb      	ldrh	r3, [r7, #6]
 801a576:	1e5a      	subs	r2, r3, #1
 801a578:	80fa      	strh	r2, [r7, #6]
 801a57a:	2b00      	cmp	r3, #0
 801a57c:	d1f2      	bne.n	801a564 <UTIL_MEM_cpy_8+0x18>
    }
}
 801a57e:	bf00      	nop
 801a580:	bf00      	nop
 801a582:	371c      	adds	r7, #28
 801a584:	46bd      	mov	sp, r7
 801a586:	bc80      	pop	{r7}
 801a588:	4770      	bx	lr

0801a58a <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 801a58a:	b480      	push	{r7}
 801a58c:	b085      	sub	sp, #20
 801a58e:	af00      	add	r7, sp, #0
 801a590:	6078      	str	r0, [r7, #4]
 801a592:	460b      	mov	r3, r1
 801a594:	70fb      	strb	r3, [r7, #3]
 801a596:	4613      	mov	r3, r2
 801a598:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801a59a:	687b      	ldr	r3, [r7, #4]
 801a59c:	60fb      	str	r3, [r7, #12]
  while( size-- )
 801a59e:	e004      	b.n	801a5aa <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 801a5a0:	68fb      	ldr	r3, [r7, #12]
 801a5a2:	1c5a      	adds	r2, r3, #1
 801a5a4:	60fa      	str	r2, [r7, #12]
 801a5a6:	78fa      	ldrb	r2, [r7, #3]
 801a5a8:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801a5aa:	883b      	ldrh	r3, [r7, #0]
 801a5ac:	1e5a      	subs	r2, r3, #1
 801a5ae:	803a      	strh	r2, [r7, #0]
 801a5b0:	2b00      	cmp	r3, #0
 801a5b2:	d1f5      	bne.n	801a5a0 <UTIL_MEM_set_8+0x16>
  }
}
 801a5b4:	bf00      	nop
 801a5b6:	bf00      	nop
 801a5b8:	3714      	adds	r7, #20
 801a5ba:	46bd      	mov	sp, r7
 801a5bc:	bc80      	pop	{r7}
 801a5be:	4770      	bx	lr

0801a5c0 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801a5c0:	b082      	sub	sp, #8
 801a5c2:	b480      	push	{r7}
 801a5c4:	b087      	sub	sp, #28
 801a5c6:	af00      	add	r7, sp, #0
 801a5c8:	60f8      	str	r0, [r7, #12]
 801a5ca:	1d38      	adds	r0, r7, #4
 801a5cc:	e880 0006 	stmia.w	r0, {r1, r2}
 801a5d0:	627b      	str	r3, [r7, #36]	@ 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801a5d2:	2300      	movs	r3, #0
 801a5d4:	613b      	str	r3, [r7, #16]
 801a5d6:	2300      	movs	r3, #0
 801a5d8:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 801a5da:	687a      	ldr	r2, [r7, #4]
 801a5dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a5de:	4413      	add	r3, r2
 801a5e0:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801a5e2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801a5e6:	b29a      	uxth	r2, r3
 801a5e8:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 801a5ec:	b29b      	uxth	r3, r3
 801a5ee:	4413      	add	r3, r2
 801a5f0:	b29b      	uxth	r3, r3
 801a5f2:	b21b      	sxth	r3, r3
 801a5f4:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 801a5f6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801a5fa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801a5fe:	db0a      	blt.n	801a616 <SysTimeAdd+0x56>
  {
    c.Seconds++;
 801a600:	693b      	ldr	r3, [r7, #16]
 801a602:	3301      	adds	r3, #1
 801a604:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 801a606:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801a60a:	b29b      	uxth	r3, r3
 801a60c:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 801a610:	b29b      	uxth	r3, r3
 801a612:	b21b      	sxth	r3, r3
 801a614:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801a616:	68fb      	ldr	r3, [r7, #12]
 801a618:	461a      	mov	r2, r3
 801a61a:	f107 0310 	add.w	r3, r7, #16
 801a61e:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a622:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801a626:	68f8      	ldr	r0, [r7, #12]
 801a628:	371c      	adds	r7, #28
 801a62a:	46bd      	mov	sp, r7
 801a62c:	bc80      	pop	{r7}
 801a62e:	b002      	add	sp, #8
 801a630:	4770      	bx	lr

0801a632 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801a632:	b082      	sub	sp, #8
 801a634:	b480      	push	{r7}
 801a636:	b087      	sub	sp, #28
 801a638:	af00      	add	r7, sp, #0
 801a63a:	60f8      	str	r0, [r7, #12]
 801a63c:	1d38      	adds	r0, r7, #4
 801a63e:	e880 0006 	stmia.w	r0, {r1, r2}
 801a642:	627b      	str	r3, [r7, #36]	@ 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801a644:	2300      	movs	r3, #0
 801a646:	613b      	str	r3, [r7, #16]
 801a648:	2300      	movs	r3, #0
 801a64a:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 801a64c:	687a      	ldr	r2, [r7, #4]
 801a64e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a650:	1ad3      	subs	r3, r2, r3
 801a652:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801a654:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801a658:	b29a      	uxth	r2, r3
 801a65a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 801a65e:	b29b      	uxth	r3, r3
 801a660:	1ad3      	subs	r3, r2, r3
 801a662:	b29b      	uxth	r3, r3
 801a664:	b21b      	sxth	r3, r3
 801a666:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 801a668:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801a66c:	2b00      	cmp	r3, #0
 801a66e:	da0a      	bge.n	801a686 <SysTimeSub+0x54>
  {
    c.Seconds--;
 801a670:	693b      	ldr	r3, [r7, #16]
 801a672:	3b01      	subs	r3, #1
 801a674:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 801a676:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801a67a:	b29b      	uxth	r3, r3
 801a67c:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 801a680:	b29b      	uxth	r3, r3
 801a682:	b21b      	sxth	r3, r3
 801a684:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801a686:	68fb      	ldr	r3, [r7, #12]
 801a688:	461a      	mov	r2, r3
 801a68a:	f107 0310 	add.w	r3, r7, #16
 801a68e:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a692:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801a696:	68f8      	ldr	r0, [r7, #12]
 801a698:	371c      	adds	r7, #28
 801a69a:	46bd      	mov	sp, r7
 801a69c:	bc80      	pop	{r7}
 801a69e:	b002      	add	sp, #8
 801a6a0:	4770      	bx	lr
	...

0801a6a4 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 801a6a4:	b580      	push	{r7, lr}
 801a6a6:	b088      	sub	sp, #32
 801a6a8:	af02      	add	r7, sp, #8
 801a6aa:	463b      	mov	r3, r7
 801a6ac:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801a6b0:	2300      	movs	r3, #0
 801a6b2:	60bb      	str	r3, [r7, #8]
 801a6b4:	2300      	movs	r3, #0
 801a6b6:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801a6b8:	4b10      	ldr	r3, [pc, #64]	@ (801a6fc <SysTimeSet+0x58>)
 801a6ba:	691b      	ldr	r3, [r3, #16]
 801a6bc:	f107 0208 	add.w	r2, r7, #8
 801a6c0:	3204      	adds	r2, #4
 801a6c2:	4610      	mov	r0, r2
 801a6c4:	4798      	blx	r3
 801a6c6:	4603      	mov	r3, r0
 801a6c8:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801a6ca:	f107 0010 	add.w	r0, r7, #16
 801a6ce:	68fb      	ldr	r3, [r7, #12]
 801a6d0:	9300      	str	r3, [sp, #0]
 801a6d2:	68bb      	ldr	r3, [r7, #8]
 801a6d4:	463a      	mov	r2, r7
 801a6d6:	ca06      	ldmia	r2, {r1, r2}
 801a6d8:	f7ff ffab 	bl	801a632 <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801a6dc:	4b07      	ldr	r3, [pc, #28]	@ (801a6fc <SysTimeSet+0x58>)
 801a6de:	681b      	ldr	r3, [r3, #0]
 801a6e0:	693a      	ldr	r2, [r7, #16]
 801a6e2:	4610      	mov	r0, r2
 801a6e4:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801a6e6:	4b05      	ldr	r3, [pc, #20]	@ (801a6fc <SysTimeSet+0x58>)
 801a6e8:	689b      	ldr	r3, [r3, #8]
 801a6ea:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801a6ee:	4610      	mov	r0, r2
 801a6f0:	4798      	blx	r3
}
 801a6f2:	bf00      	nop
 801a6f4:	3718      	adds	r7, #24
 801a6f6:	46bd      	mov	sp, r7
 801a6f8:	bd80      	pop	{r7, pc}
 801a6fa:	bf00      	nop
 801a6fc:	0801f048 	.word	0x0801f048

0801a700 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801a700:	b580      	push	{r7, lr}
 801a702:	b08a      	sub	sp, #40	@ 0x28
 801a704:	af02      	add	r7, sp, #8
 801a706:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801a708:	2300      	movs	r3, #0
 801a70a:	61bb      	str	r3, [r7, #24]
 801a70c:	2300      	movs	r3, #0
 801a70e:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801a710:	2300      	movs	r3, #0
 801a712:	613b      	str	r3, [r7, #16]
 801a714:	2300      	movs	r3, #0
 801a716:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801a718:	4b14      	ldr	r3, [pc, #80]	@ (801a76c <SysTimeGet+0x6c>)
 801a71a:	691b      	ldr	r3, [r3, #16]
 801a71c:	f107 0218 	add.w	r2, r7, #24
 801a720:	3204      	adds	r2, #4
 801a722:	4610      	mov	r0, r2
 801a724:	4798      	blx	r3
 801a726:	4603      	mov	r3, r0
 801a728:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801a72a:	4b10      	ldr	r3, [pc, #64]	@ (801a76c <SysTimeGet+0x6c>)
 801a72c:	68db      	ldr	r3, [r3, #12]
 801a72e:	4798      	blx	r3
 801a730:	4603      	mov	r3, r0
 801a732:	b21b      	sxth	r3, r3
 801a734:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801a736:	4b0d      	ldr	r3, [pc, #52]	@ (801a76c <SysTimeGet+0x6c>)
 801a738:	685b      	ldr	r3, [r3, #4]
 801a73a:	4798      	blx	r3
 801a73c:	4603      	mov	r3, r0
 801a73e:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801a740:	f107 0010 	add.w	r0, r7, #16
 801a744:	69fb      	ldr	r3, [r7, #28]
 801a746:	9300      	str	r3, [sp, #0]
 801a748:	69bb      	ldr	r3, [r7, #24]
 801a74a:	f107 0208 	add.w	r2, r7, #8
 801a74e:	ca06      	ldmia	r2, {r1, r2}
 801a750:	f7ff ff36 	bl	801a5c0 <SysTimeAdd>

  return sysTime;
 801a754:	687b      	ldr	r3, [r7, #4]
 801a756:	461a      	mov	r2, r3
 801a758:	f107 0310 	add.w	r3, r7, #16
 801a75c:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a760:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801a764:	6878      	ldr	r0, [r7, #4]
 801a766:	3720      	adds	r7, #32
 801a768:	46bd      	mov	sp, r7
 801a76a:	bd80      	pop	{r7, pc}
 801a76c:	0801f048 	.word	0x0801f048

0801a770 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801a770:	b580      	push	{r7, lr}
 801a772:	b084      	sub	sp, #16
 801a774:	af00      	add	r7, sp, #0
 801a776:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801a778:	2300      	movs	r3, #0
 801a77a:	60bb      	str	r3, [r7, #8]
 801a77c:	2300      	movs	r3, #0
 801a77e:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801a780:	4b0a      	ldr	r3, [pc, #40]	@ (801a7ac <SysTimeGetMcuTime+0x3c>)
 801a782:	691b      	ldr	r3, [r3, #16]
 801a784:	f107 0208 	add.w	r2, r7, #8
 801a788:	3204      	adds	r2, #4
 801a78a:	4610      	mov	r0, r2
 801a78c:	4798      	blx	r3
 801a78e:	4603      	mov	r3, r0
 801a790:	60bb      	str	r3, [r7, #8]

  return calendarTime;
 801a792:	687b      	ldr	r3, [r7, #4]
 801a794:	461a      	mov	r2, r3
 801a796:	f107 0308 	add.w	r3, r7, #8
 801a79a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a79e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801a7a2:	6878      	ldr	r0, [r7, #4]
 801a7a4:	3710      	adds	r7, #16
 801a7a6:	46bd      	mov	sp, r7
 801a7a8:	bd80      	pop	{r7, pc}
 801a7aa:	bf00      	nop
 801a7ac:	0801f048 	.word	0x0801f048

0801a7b0 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 801a7b0:	b580      	push	{r7, lr}
 801a7b2:	b088      	sub	sp, #32
 801a7b4:	af02      	add	r7, sp, #8
 801a7b6:	463b      	mov	r3, r7
 801a7b8:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801a7bc:	4b0f      	ldr	r3, [pc, #60]	@ (801a7fc <SysTimeToMs+0x4c>)
 801a7be:	68db      	ldr	r3, [r3, #12]
 801a7c0:	4798      	blx	r3
 801a7c2:	4603      	mov	r3, r0
 801a7c4:	b21b      	sxth	r3, r3
 801a7c6:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801a7c8:	4b0c      	ldr	r3, [pc, #48]	@ (801a7fc <SysTimeToMs+0x4c>)
 801a7ca:	685b      	ldr	r3, [r3, #4]
 801a7cc:	4798      	blx	r3
 801a7ce:	4603      	mov	r3, r0
 801a7d0:	613b      	str	r3, [r7, #16]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 801a7d2:	f107 0008 	add.w	r0, r7, #8
 801a7d6:	697b      	ldr	r3, [r7, #20]
 801a7d8:	9300      	str	r3, [sp, #0]
 801a7da:	693b      	ldr	r3, [r7, #16]
 801a7dc:	463a      	mov	r2, r7
 801a7de:	ca06      	ldmia	r2, {r1, r2}
 801a7e0:	f7ff ff27 	bl	801a632 <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 801a7e4:	68bb      	ldr	r3, [r7, #8]
 801a7e6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801a7ea:	fb02 f303 	mul.w	r3, r2, r3
 801a7ee:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801a7f2:	4413      	add	r3, r2
}
 801a7f4:	4618      	mov	r0, r3
 801a7f6:	3718      	adds	r7, #24
 801a7f8:	46bd      	mov	sp, r7
 801a7fa:	bd80      	pop	{r7, pc}
 801a7fc:	0801f048 	.word	0x0801f048

0801a800 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 801a800:	b580      	push	{r7, lr}
 801a802:	b08a      	sub	sp, #40	@ 0x28
 801a804:	af02      	add	r7, sp, #8
 801a806:	6078      	str	r0, [r7, #4]
 801a808:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 801a80a:	683b      	ldr	r3, [r7, #0]
 801a80c:	4a19      	ldr	r2, [pc, #100]	@ (801a874 <SysTimeFromMs+0x74>)
 801a80e:	fba2 2303 	umull	r2, r3, r2, r3
 801a812:	099b      	lsrs	r3, r3, #6
 801a814:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 801a816:	69fb      	ldr	r3, [r7, #28]
 801a818:	617b      	str	r3, [r7, #20]
 801a81a:	683b      	ldr	r3, [r7, #0]
 801a81c:	b29a      	uxth	r2, r3
 801a81e:	69fb      	ldr	r3, [r7, #28]
 801a820:	b29b      	uxth	r3, r3
 801a822:	4619      	mov	r1, r3
 801a824:	0149      	lsls	r1, r1, #5
 801a826:	1ac9      	subs	r1, r1, r3
 801a828:	0089      	lsls	r1, r1, #2
 801a82a:	440b      	add	r3, r1
 801a82c:	00db      	lsls	r3, r3, #3
 801a82e:	b29b      	uxth	r3, r3
 801a830:	1ad3      	subs	r3, r2, r3
 801a832:	b29b      	uxth	r3, r3
 801a834:	b21b      	sxth	r3, r3
 801a836:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 801a838:	f107 030c 	add.w	r3, r7, #12
 801a83c:	2200      	movs	r2, #0
 801a83e:	601a      	str	r2, [r3, #0]
 801a840:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801a842:	4b0d      	ldr	r3, [pc, #52]	@ (801a878 <SysTimeFromMs+0x78>)
 801a844:	68db      	ldr	r3, [r3, #12]
 801a846:	4798      	blx	r3
 801a848:	4603      	mov	r3, r0
 801a84a:	b21b      	sxth	r3, r3
 801a84c:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801a84e:	4b0a      	ldr	r3, [pc, #40]	@ (801a878 <SysTimeFromMs+0x78>)
 801a850:	685b      	ldr	r3, [r3, #4]
 801a852:	4798      	blx	r3
 801a854:	4603      	mov	r3, r0
 801a856:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 801a858:	6878      	ldr	r0, [r7, #4]
 801a85a:	693b      	ldr	r3, [r7, #16]
 801a85c:	9300      	str	r3, [sp, #0]
 801a85e:	68fb      	ldr	r3, [r7, #12]
 801a860:	f107 0214 	add.w	r2, r7, #20
 801a864:	ca06      	ldmia	r2, {r1, r2}
 801a866:	f7ff feab 	bl	801a5c0 <SysTimeAdd>
}
 801a86a:	6878      	ldr	r0, [r7, #4]
 801a86c:	3720      	adds	r7, #32
 801a86e:	46bd      	mov	sp, r7
 801a870:	bd80      	pop	{r7, pc}
 801a872:	bf00      	nop
 801a874:	10624dd3 	.word	0x10624dd3
 801a878:	0801f048 	.word	0x0801f048

0801a87c <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 801a87c:	b480      	push	{r7}
 801a87e:	b085      	sub	sp, #20
 801a880:	af00      	add	r7, sp, #0
 801a882:	6078      	str	r0, [r7, #4]
  int i = 0;
 801a884:	2300      	movs	r3, #0
 801a886:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801a888:	e00e      	b.n	801a8a8 <ee_skip_atoi+0x2c>
 801a88a:	68fa      	ldr	r2, [r7, #12]
 801a88c:	4613      	mov	r3, r2
 801a88e:	009b      	lsls	r3, r3, #2
 801a890:	4413      	add	r3, r2
 801a892:	005b      	lsls	r3, r3, #1
 801a894:	4618      	mov	r0, r3
 801a896:	687b      	ldr	r3, [r7, #4]
 801a898:	681b      	ldr	r3, [r3, #0]
 801a89a:	1c59      	adds	r1, r3, #1
 801a89c:	687a      	ldr	r2, [r7, #4]
 801a89e:	6011      	str	r1, [r2, #0]
 801a8a0:	781b      	ldrb	r3, [r3, #0]
 801a8a2:	4403      	add	r3, r0
 801a8a4:	3b30      	subs	r3, #48	@ 0x30
 801a8a6:	60fb      	str	r3, [r7, #12]
 801a8a8:	687b      	ldr	r3, [r7, #4]
 801a8aa:	681b      	ldr	r3, [r3, #0]
 801a8ac:	781b      	ldrb	r3, [r3, #0]
 801a8ae:	2b2f      	cmp	r3, #47	@ 0x2f
 801a8b0:	d904      	bls.n	801a8bc <ee_skip_atoi+0x40>
 801a8b2:	687b      	ldr	r3, [r7, #4]
 801a8b4:	681b      	ldr	r3, [r3, #0]
 801a8b6:	781b      	ldrb	r3, [r3, #0]
 801a8b8:	2b39      	cmp	r3, #57	@ 0x39
 801a8ba:	d9e6      	bls.n	801a88a <ee_skip_atoi+0xe>
  return i;
 801a8bc:	68fb      	ldr	r3, [r7, #12]
}
 801a8be:	4618      	mov	r0, r3
 801a8c0:	3714      	adds	r7, #20
 801a8c2:	46bd      	mov	sp, r7
 801a8c4:	bc80      	pop	{r7}
 801a8c6:	4770      	bx	lr

0801a8c8 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 801a8c8:	b480      	push	{r7}
 801a8ca:	b099      	sub	sp, #100	@ 0x64
 801a8cc:	af00      	add	r7, sp, #0
 801a8ce:	60f8      	str	r0, [r7, #12]
 801a8d0:	60b9      	str	r1, [r7, #8]
 801a8d2:	607a      	str	r2, [r7, #4]
 801a8d4:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 801a8d6:	4b71      	ldr	r3, [pc, #452]	@ (801aa9c <ee_number+0x1d4>)
 801a8d8:	681b      	ldr	r3, [r3, #0]
 801a8da:	65bb      	str	r3, [r7, #88]	@ 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801a8dc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a8de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801a8e2:	2b00      	cmp	r3, #0
 801a8e4:	d002      	beq.n	801a8ec <ee_number+0x24>
 801a8e6:	4b6e      	ldr	r3, [pc, #440]	@ (801aaa0 <ee_number+0x1d8>)
 801a8e8:	681b      	ldr	r3, [r3, #0]
 801a8ea:	65bb      	str	r3, [r7, #88]	@ 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 801a8ec:	683b      	ldr	r3, [r7, #0]
 801a8ee:	2b01      	cmp	r3, #1
 801a8f0:	dd02      	ble.n	801a8f8 <ee_number+0x30>
 801a8f2:	683b      	ldr	r3, [r7, #0]
 801a8f4:	2b24      	cmp	r3, #36	@ 0x24
 801a8f6:	dd01      	ble.n	801a8fc <ee_number+0x34>
 801a8f8:	2300      	movs	r3, #0
 801a8fa:	e0ca      	b.n	801aa92 <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 801a8fc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a8fe:	f003 0301 	and.w	r3, r3, #1
 801a902:	2b00      	cmp	r3, #0
 801a904:	d001      	beq.n	801a90a <ee_number+0x42>
 801a906:	2330      	movs	r3, #48	@ 0x30
 801a908:	e000      	b.n	801a90c <ee_number+0x44>
 801a90a:	2320      	movs	r3, #32
 801a90c:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  sign = 0;
 801a910:	2300      	movs	r3, #0
 801a912:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if (type & SIGN)
 801a916:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a918:	f003 0302 	and.w	r3, r3, #2
 801a91c:	2b00      	cmp	r3, #0
 801a91e:	d00b      	beq.n	801a938 <ee_number+0x70>
  {
    if (num < 0)
 801a920:	687b      	ldr	r3, [r7, #4]
 801a922:	2b00      	cmp	r3, #0
 801a924:	da08      	bge.n	801a938 <ee_number+0x70>
    {
      sign = '-';
 801a926:	232d      	movs	r3, #45	@ 0x2d
 801a928:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
      num = -num;
 801a92c:	687b      	ldr	r3, [r7, #4]
 801a92e:	425b      	negs	r3, r3
 801a930:	607b      	str	r3, [r7, #4]
      size--;
 801a932:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a934:	3b01      	subs	r3, #1
 801a936:	66bb      	str	r3, [r7, #104]	@ 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 801a938:	2300      	movs	r3, #0
 801a93a:	657b      	str	r3, [r7, #84]	@ 0x54

  if (num == 0)
 801a93c:	687b      	ldr	r3, [r7, #4]
 801a93e:	2b00      	cmp	r3, #0
 801a940:	d11e      	bne.n	801a980 <ee_number+0xb8>
    tmp[i++] = '0';
 801a942:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a944:	1c5a      	adds	r2, r3, #1
 801a946:	657a      	str	r2, [r7, #84]	@ 0x54
 801a948:	3360      	adds	r3, #96	@ 0x60
 801a94a:	443b      	add	r3, r7
 801a94c:	2230      	movs	r2, #48	@ 0x30
 801a94e:	f803 2c50 	strb.w	r2, [r3, #-80]
 801a952:	e018      	b.n	801a986 <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801a954:	687b      	ldr	r3, [r7, #4]
 801a956:	683a      	ldr	r2, [r7, #0]
 801a958:	fbb3 f1f2 	udiv	r1, r3, r2
 801a95c:	fb01 f202 	mul.w	r2, r1, r2
 801a960:	1a9b      	subs	r3, r3, r2
 801a962:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a964:	441a      	add	r2, r3
 801a966:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a968:	1c59      	adds	r1, r3, #1
 801a96a:	6579      	str	r1, [r7, #84]	@ 0x54
 801a96c:	7812      	ldrb	r2, [r2, #0]
 801a96e:	3360      	adds	r3, #96	@ 0x60
 801a970:	443b      	add	r3, r7
 801a972:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 801a976:	687a      	ldr	r2, [r7, #4]
 801a978:	683b      	ldr	r3, [r7, #0]
 801a97a:	fbb2 f3f3 	udiv	r3, r2, r3
 801a97e:	607b      	str	r3, [r7, #4]
    while (num != 0)
 801a980:	687b      	ldr	r3, [r7, #4]
 801a982:	2b00      	cmp	r3, #0
 801a984:	d1e6      	bne.n	801a954 <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 801a986:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801a988:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801a98a:	429a      	cmp	r2, r3
 801a98c:	dd01      	ble.n	801a992 <ee_number+0xca>
 801a98e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a990:	66fb      	str	r3, [r7, #108]	@ 0x6c
  size -= precision;
 801a992:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801a994:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801a996:	1ad3      	subs	r3, r2, r3
 801a998:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801a99a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a99c:	f003 0301 	and.w	r3, r3, #1
 801a9a0:	2b00      	cmp	r3, #0
 801a9a2:	d112      	bne.n	801a9ca <ee_number+0x102>
 801a9a4:	e00c      	b.n	801a9c0 <ee_number+0xf8>
 801a9a6:	68fb      	ldr	r3, [r7, #12]
 801a9a8:	1c5a      	adds	r2, r3, #1
 801a9aa:	60fa      	str	r2, [r7, #12]
 801a9ac:	2220      	movs	r2, #32
 801a9ae:	701a      	strb	r2, [r3, #0]
 801a9b0:	68bb      	ldr	r3, [r7, #8]
 801a9b2:	3b01      	subs	r3, #1
 801a9b4:	60bb      	str	r3, [r7, #8]
 801a9b6:	68bb      	ldr	r3, [r7, #8]
 801a9b8:	2b00      	cmp	r3, #0
 801a9ba:	d101      	bne.n	801a9c0 <ee_number+0xf8>
 801a9bc:	68fb      	ldr	r3, [r7, #12]
 801a9be:	e068      	b.n	801aa92 <ee_number+0x1ca>
 801a9c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a9c2:	1e5a      	subs	r2, r3, #1
 801a9c4:	66ba      	str	r2, [r7, #104]	@ 0x68
 801a9c6:	2b00      	cmp	r3, #0
 801a9c8:	dced      	bgt.n	801a9a6 <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 801a9ca:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801a9ce:	2b00      	cmp	r3, #0
 801a9d0:	d01b      	beq.n	801aa0a <ee_number+0x142>
 801a9d2:	68fb      	ldr	r3, [r7, #12]
 801a9d4:	1c5a      	adds	r2, r3, #1
 801a9d6:	60fa      	str	r2, [r7, #12]
 801a9d8:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 801a9dc:	701a      	strb	r2, [r3, #0]
 801a9de:	68bb      	ldr	r3, [r7, #8]
 801a9e0:	3b01      	subs	r3, #1
 801a9e2:	60bb      	str	r3, [r7, #8]
 801a9e4:	68bb      	ldr	r3, [r7, #8]
 801a9e6:	2b00      	cmp	r3, #0
 801a9e8:	d10f      	bne.n	801aa0a <ee_number+0x142>
 801a9ea:	68fb      	ldr	r3, [r7, #12]
 801a9ec:	e051      	b.n	801aa92 <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801a9ee:	68fb      	ldr	r3, [r7, #12]
 801a9f0:	1c5a      	adds	r2, r3, #1
 801a9f2:	60fa      	str	r2, [r7, #12]
 801a9f4:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 801a9f8:	701a      	strb	r2, [r3, #0]
 801a9fa:	68bb      	ldr	r3, [r7, #8]
 801a9fc:	3b01      	subs	r3, #1
 801a9fe:	60bb      	str	r3, [r7, #8]
 801aa00:	68bb      	ldr	r3, [r7, #8]
 801aa02:	2b00      	cmp	r3, #0
 801aa04:	d101      	bne.n	801aa0a <ee_number+0x142>
 801aa06:	68fb      	ldr	r3, [r7, #12]
 801aa08:	e043      	b.n	801aa92 <ee_number+0x1ca>
 801aa0a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801aa0c:	1e5a      	subs	r2, r3, #1
 801aa0e:	66ba      	str	r2, [r7, #104]	@ 0x68
 801aa10:	2b00      	cmp	r3, #0
 801aa12:	dcec      	bgt.n	801a9ee <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 801aa14:	e00c      	b.n	801aa30 <ee_number+0x168>
 801aa16:	68fb      	ldr	r3, [r7, #12]
 801aa18:	1c5a      	adds	r2, r3, #1
 801aa1a:	60fa      	str	r2, [r7, #12]
 801aa1c:	2230      	movs	r2, #48	@ 0x30
 801aa1e:	701a      	strb	r2, [r3, #0]
 801aa20:	68bb      	ldr	r3, [r7, #8]
 801aa22:	3b01      	subs	r3, #1
 801aa24:	60bb      	str	r3, [r7, #8]
 801aa26:	68bb      	ldr	r3, [r7, #8]
 801aa28:	2b00      	cmp	r3, #0
 801aa2a:	d101      	bne.n	801aa30 <ee_number+0x168>
 801aa2c:	68fb      	ldr	r3, [r7, #12]
 801aa2e:	e030      	b.n	801aa92 <ee_number+0x1ca>
 801aa30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801aa32:	1e5a      	subs	r2, r3, #1
 801aa34:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801aa36:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801aa38:	429a      	cmp	r2, r3
 801aa3a:	dbec      	blt.n	801aa16 <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 801aa3c:	e010      	b.n	801aa60 <ee_number+0x198>
 801aa3e:	68fb      	ldr	r3, [r7, #12]
 801aa40:	1c5a      	adds	r2, r3, #1
 801aa42:	60fa      	str	r2, [r7, #12]
 801aa44:	f107 0110 	add.w	r1, r7, #16
 801aa48:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801aa4a:	440a      	add	r2, r1
 801aa4c:	7812      	ldrb	r2, [r2, #0]
 801aa4e:	701a      	strb	r2, [r3, #0]
 801aa50:	68bb      	ldr	r3, [r7, #8]
 801aa52:	3b01      	subs	r3, #1
 801aa54:	60bb      	str	r3, [r7, #8]
 801aa56:	68bb      	ldr	r3, [r7, #8]
 801aa58:	2b00      	cmp	r3, #0
 801aa5a:	d101      	bne.n	801aa60 <ee_number+0x198>
 801aa5c:	68fb      	ldr	r3, [r7, #12]
 801aa5e:	e018      	b.n	801aa92 <ee_number+0x1ca>
 801aa60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801aa62:	1e5a      	subs	r2, r3, #1
 801aa64:	657a      	str	r2, [r7, #84]	@ 0x54
 801aa66:	2b00      	cmp	r3, #0
 801aa68:	dce9      	bgt.n	801aa3e <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 801aa6a:	e00c      	b.n	801aa86 <ee_number+0x1be>
 801aa6c:	68fb      	ldr	r3, [r7, #12]
 801aa6e:	1c5a      	adds	r2, r3, #1
 801aa70:	60fa      	str	r2, [r7, #12]
 801aa72:	2220      	movs	r2, #32
 801aa74:	701a      	strb	r2, [r3, #0]
 801aa76:	68bb      	ldr	r3, [r7, #8]
 801aa78:	3b01      	subs	r3, #1
 801aa7a:	60bb      	str	r3, [r7, #8]
 801aa7c:	68bb      	ldr	r3, [r7, #8]
 801aa7e:	2b00      	cmp	r3, #0
 801aa80:	d101      	bne.n	801aa86 <ee_number+0x1be>
 801aa82:	68fb      	ldr	r3, [r7, #12]
 801aa84:	e005      	b.n	801aa92 <ee_number+0x1ca>
 801aa86:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801aa88:	1e5a      	subs	r2, r3, #1
 801aa8a:	66ba      	str	r2, [r7, #104]	@ 0x68
 801aa8c:	2b00      	cmp	r3, #0
 801aa8e:	dced      	bgt.n	801aa6c <ee_number+0x1a4>

  return str;
 801aa90:	68fb      	ldr	r3, [r7, #12]
}
 801aa92:	4618      	mov	r0, r3
 801aa94:	3764      	adds	r7, #100	@ 0x64
 801aa96:	46bd      	mov	sp, r7
 801aa98:	bc80      	pop	{r7}
 801aa9a:	4770      	bx	lr
 801aa9c:	20000130 	.word	0x20000130
 801aaa0:	20000134 	.word	0x20000134

0801aaa4 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801aaa4:	b580      	push	{r7, lr}
 801aaa6:	b092      	sub	sp, #72	@ 0x48
 801aaa8:	af04      	add	r7, sp, #16
 801aaaa:	60f8      	str	r0, [r7, #12]
 801aaac:	60b9      	str	r1, [r7, #8]
 801aaae:	607a      	str	r2, [r7, #4]
 801aab0:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801aab2:	68bb      	ldr	r3, [r7, #8]
 801aab4:	2b00      	cmp	r3, #0
 801aab6:	dc01      	bgt.n	801aabc <tiny_vsnprintf_like+0x18>
  {
    return 0;
 801aab8:	2300      	movs	r3, #0
 801aaba:	e13e      	b.n	801ad3a <tiny_vsnprintf_like+0x296>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801aabc:	68fb      	ldr	r3, [r7, #12]
 801aabe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801aac0:	e128      	b.n	801ad14 <tiny_vsnprintf_like+0x270>
  {
    CHECK_STR_SIZE(buf, str, size);
 801aac2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801aac4:	68fb      	ldr	r3, [r7, #12]
 801aac6:	1ad2      	subs	r2, r2, r3
 801aac8:	68bb      	ldr	r3, [r7, #8]
 801aaca:	3b01      	subs	r3, #1
 801aacc:	429a      	cmp	r2, r3
 801aace:	f280 812e 	bge.w	801ad2e <tiny_vsnprintf_like+0x28a>

    if (*fmt != '%')
 801aad2:	687b      	ldr	r3, [r7, #4]
 801aad4:	781b      	ldrb	r3, [r3, #0]
 801aad6:	2b25      	cmp	r3, #37	@ 0x25
 801aad8:	d006      	beq.n	801aae8 <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 801aada:	687a      	ldr	r2, [r7, #4]
 801aadc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801aade:	1c59      	adds	r1, r3, #1
 801aae0:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801aae2:	7812      	ldrb	r2, [r2, #0]
 801aae4:	701a      	strb	r2, [r3, #0]
      continue;
 801aae6:	e112      	b.n	801ad0e <tiny_vsnprintf_like+0x26a>
    }

    // Process flags
    flags = 0;
 801aae8:	2300      	movs	r3, #0
 801aaea:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801aaec:	687b      	ldr	r3, [r7, #4]
 801aaee:	3301      	adds	r3, #1
 801aaf0:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 801aaf2:	687b      	ldr	r3, [r7, #4]
 801aaf4:	781b      	ldrb	r3, [r3, #0]
 801aaf6:	2b30      	cmp	r3, #48	@ 0x30
 801aaf8:	d103      	bne.n	801ab02 <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 801aafa:	6a3b      	ldr	r3, [r7, #32]
 801aafc:	f043 0301 	orr.w	r3, r3, #1
 801ab00:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 801ab02:	f04f 33ff 	mov.w	r3, #4294967295
 801ab06:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 801ab08:	687b      	ldr	r3, [r7, #4]
 801ab0a:	781b      	ldrb	r3, [r3, #0]
 801ab0c:	2b2f      	cmp	r3, #47	@ 0x2f
 801ab0e:	d908      	bls.n	801ab22 <tiny_vsnprintf_like+0x7e>
 801ab10:	687b      	ldr	r3, [r7, #4]
 801ab12:	781b      	ldrb	r3, [r3, #0]
 801ab14:	2b39      	cmp	r3, #57	@ 0x39
 801ab16:	d804      	bhi.n	801ab22 <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 801ab18:	1d3b      	adds	r3, r7, #4
 801ab1a:	4618      	mov	r0, r3
 801ab1c:	f7ff feae 	bl	801a87c <ee_skip_atoi>
 801ab20:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 801ab22:	f04f 33ff 	mov.w	r3, #4294967295
 801ab26:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 801ab28:	f04f 33ff 	mov.w	r3, #4294967295
 801ab2c:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 801ab2e:	230a      	movs	r3, #10
 801ab30:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (*fmt)
 801ab32:	687b      	ldr	r3, [r7, #4]
 801ab34:	781b      	ldrb	r3, [r3, #0]
 801ab36:	3b58      	subs	r3, #88	@ 0x58
 801ab38:	2b20      	cmp	r3, #32
 801ab3a:	f200 8094 	bhi.w	801ac66 <tiny_vsnprintf_like+0x1c2>
 801ab3e:	a201      	add	r2, pc, #4	@ (adr r2, 801ab44 <tiny_vsnprintf_like+0xa0>)
 801ab40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ab44:	0801ac4f 	.word	0x0801ac4f
 801ab48:	0801ac67 	.word	0x0801ac67
 801ab4c:	0801ac67 	.word	0x0801ac67
 801ab50:	0801ac67 	.word	0x0801ac67
 801ab54:	0801ac67 	.word	0x0801ac67
 801ab58:	0801ac67 	.word	0x0801ac67
 801ab5c:	0801ac67 	.word	0x0801ac67
 801ab60:	0801ac67 	.word	0x0801ac67
 801ab64:	0801ac67 	.word	0x0801ac67
 801ab68:	0801ac67 	.word	0x0801ac67
 801ab6c:	0801ac67 	.word	0x0801ac67
 801ab70:	0801abd3 	.word	0x0801abd3
 801ab74:	0801ac5d 	.word	0x0801ac5d
 801ab78:	0801ac67 	.word	0x0801ac67
 801ab7c:	0801ac67 	.word	0x0801ac67
 801ab80:	0801ac67 	.word	0x0801ac67
 801ab84:	0801ac67 	.word	0x0801ac67
 801ab88:	0801ac5d 	.word	0x0801ac5d
 801ab8c:	0801ac67 	.word	0x0801ac67
 801ab90:	0801ac67 	.word	0x0801ac67
 801ab94:	0801ac67 	.word	0x0801ac67
 801ab98:	0801ac67 	.word	0x0801ac67
 801ab9c:	0801ac67 	.word	0x0801ac67
 801aba0:	0801ac67 	.word	0x0801ac67
 801aba4:	0801ac67 	.word	0x0801ac67
 801aba8:	0801ac67 	.word	0x0801ac67
 801abac:	0801ac67 	.word	0x0801ac67
 801abb0:	0801abf3 	.word	0x0801abf3
 801abb4:	0801ac67 	.word	0x0801ac67
 801abb8:	0801acb3 	.word	0x0801acb3
 801abbc:	0801ac67 	.word	0x0801ac67
 801abc0:	0801ac67 	.word	0x0801ac67
 801abc4:	0801ac57 	.word	0x0801ac57
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801abc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801abca:	1c5a      	adds	r2, r3, #1
 801abcc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801abce:	2220      	movs	r2, #32
 801abd0:	701a      	strb	r2, [r3, #0]
 801abd2:	69fb      	ldr	r3, [r7, #28]
 801abd4:	3b01      	subs	r3, #1
 801abd6:	61fb      	str	r3, [r7, #28]
 801abd8:	69fb      	ldr	r3, [r7, #28]
 801abda:	2b00      	cmp	r3, #0
 801abdc:	dcf4      	bgt.n	801abc8 <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 801abde:	683b      	ldr	r3, [r7, #0]
 801abe0:	1d1a      	adds	r2, r3, #4
 801abe2:	603a      	str	r2, [r7, #0]
 801abe4:	6819      	ldr	r1, [r3, #0]
 801abe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801abe8:	1c5a      	adds	r2, r3, #1
 801abea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801abec:	b2ca      	uxtb	r2, r1
 801abee:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801abf0:	e08d      	b.n	801ad0e <tiny_vsnprintf_like+0x26a>

      case 's':
        s = va_arg(args, char *);
 801abf2:	683b      	ldr	r3, [r7, #0]
 801abf4:	1d1a      	adds	r2, r3, #4
 801abf6:	603a      	str	r2, [r7, #0]
 801abf8:	681b      	ldr	r3, [r3, #0]
 801abfa:	627b      	str	r3, [r7, #36]	@ 0x24
        if (!s) s = "<NULL>";
 801abfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801abfe:	2b00      	cmp	r3, #0
 801ac00:	d101      	bne.n	801ac06 <tiny_vsnprintf_like+0x162>
 801ac02:	4b50      	ldr	r3, [pc, #320]	@ (801ad44 <tiny_vsnprintf_like+0x2a0>)
 801ac04:	627b      	str	r3, [r7, #36]	@ 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801ac06:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801ac08:	f7e5 fb0a 	bl	8000220 <strlen>
 801ac0c:	4603      	mov	r3, r0
 801ac0e:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801ac10:	e004      	b.n	801ac1c <tiny_vsnprintf_like+0x178>
 801ac12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ac14:	1c5a      	adds	r2, r3, #1
 801ac16:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801ac18:	2220      	movs	r2, #32
 801ac1a:	701a      	strb	r2, [r3, #0]
 801ac1c:	69fb      	ldr	r3, [r7, #28]
 801ac1e:	1e5a      	subs	r2, r3, #1
 801ac20:	61fa      	str	r2, [r7, #28]
 801ac22:	693a      	ldr	r2, [r7, #16]
 801ac24:	429a      	cmp	r2, r3
 801ac26:	dbf4      	blt.n	801ac12 <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801ac28:	2300      	movs	r3, #0
 801ac2a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801ac2c:	e00a      	b.n	801ac44 <tiny_vsnprintf_like+0x1a0>
 801ac2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801ac30:	1c53      	adds	r3, r2, #1
 801ac32:	627b      	str	r3, [r7, #36]	@ 0x24
 801ac34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ac36:	1c59      	adds	r1, r3, #1
 801ac38:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801ac3a:	7812      	ldrb	r2, [r2, #0]
 801ac3c:	701a      	strb	r2, [r3, #0]
 801ac3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ac40:	3301      	adds	r3, #1
 801ac42:	62bb      	str	r3, [r7, #40]	@ 0x28
 801ac44:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801ac46:	693b      	ldr	r3, [r7, #16]
 801ac48:	429a      	cmp	r2, r3
 801ac4a:	dbf0      	blt.n	801ac2e <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 801ac4c:	e05f      	b.n	801ad0e <tiny_vsnprintf_like+0x26a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 801ac4e:	6a3b      	ldr	r3, [r7, #32]
 801ac50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ac54:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801ac56:	2310      	movs	r3, #16
 801ac58:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
 801ac5a:	e02b      	b.n	801acb4 <tiny_vsnprintf_like+0x210>

      case 'd':
      case 'i':
        flags |= SIGN;
 801ac5c:	6a3b      	ldr	r3, [r7, #32]
 801ac5e:	f043 0302 	orr.w	r3, r3, #2
 801ac62:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 801ac64:	e025      	b.n	801acb2 <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801ac66:	687b      	ldr	r3, [r7, #4]
 801ac68:	781b      	ldrb	r3, [r3, #0]
 801ac6a:	2b25      	cmp	r3, #37	@ 0x25
 801ac6c:	d004      	beq.n	801ac78 <tiny_vsnprintf_like+0x1d4>
 801ac6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ac70:	1c5a      	adds	r2, r3, #1
 801ac72:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801ac74:	2225      	movs	r2, #37	@ 0x25
 801ac76:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 801ac78:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801ac7a:	68fb      	ldr	r3, [r7, #12]
 801ac7c:	1ad2      	subs	r2, r2, r3
 801ac7e:	68bb      	ldr	r3, [r7, #8]
 801ac80:	3b01      	subs	r3, #1
 801ac82:	429a      	cmp	r2, r3
 801ac84:	da16      	bge.n	801acb4 <tiny_vsnprintf_like+0x210>
        if (*fmt)
 801ac86:	687b      	ldr	r3, [r7, #4]
 801ac88:	781b      	ldrb	r3, [r3, #0]
 801ac8a:	2b00      	cmp	r3, #0
 801ac8c:	d006      	beq.n	801ac9c <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 801ac8e:	687a      	ldr	r2, [r7, #4]
 801ac90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ac92:	1c59      	adds	r1, r3, #1
 801ac94:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801ac96:	7812      	ldrb	r2, [r2, #0]
 801ac98:	701a      	strb	r2, [r3, #0]
 801ac9a:	e002      	b.n	801aca2 <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 801ac9c:	687b      	ldr	r3, [r7, #4]
 801ac9e:	3b01      	subs	r3, #1
 801aca0:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801aca2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801aca4:	68fb      	ldr	r3, [r7, #12]
 801aca6:	1ad2      	subs	r2, r2, r3
 801aca8:	68bb      	ldr	r3, [r7, #8]
 801acaa:	3b01      	subs	r3, #1
 801acac:	429a      	cmp	r2, r3
 801acae:	db2d      	blt.n	801ad0c <tiny_vsnprintf_like+0x268>
 801acb0:	e000      	b.n	801acb4 <tiny_vsnprintf_like+0x210>
        break;
 801acb2:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 801acb4:	697b      	ldr	r3, [r7, #20]
 801acb6:	2b6c      	cmp	r3, #108	@ 0x6c
 801acb8:	d105      	bne.n	801acc6 <tiny_vsnprintf_like+0x222>
      num = va_arg(args, unsigned long);
 801acba:	683b      	ldr	r3, [r7, #0]
 801acbc:	1d1a      	adds	r2, r3, #4
 801acbe:	603a      	str	r2, [r7, #0]
 801acc0:	681b      	ldr	r3, [r3, #0]
 801acc2:	637b      	str	r3, [r7, #52]	@ 0x34
 801acc4:	e00f      	b.n	801ace6 <tiny_vsnprintf_like+0x242>
    else if (flags & SIGN)
 801acc6:	6a3b      	ldr	r3, [r7, #32]
 801acc8:	f003 0302 	and.w	r3, r3, #2
 801accc:	2b00      	cmp	r3, #0
 801acce:	d005      	beq.n	801acdc <tiny_vsnprintf_like+0x238>
      num = va_arg(args, int);
 801acd0:	683b      	ldr	r3, [r7, #0]
 801acd2:	1d1a      	adds	r2, r3, #4
 801acd4:	603a      	str	r2, [r7, #0]
 801acd6:	681b      	ldr	r3, [r3, #0]
 801acd8:	637b      	str	r3, [r7, #52]	@ 0x34
 801acda:	e004      	b.n	801ace6 <tiny_vsnprintf_like+0x242>
    else
      num = va_arg(args, unsigned int);
 801acdc:	683b      	ldr	r3, [r7, #0]
 801acde:	1d1a      	adds	r2, r3, #4
 801ace0:	603a      	str	r2, [r7, #0]
 801ace2:	681b      	ldr	r3, [r3, #0]
 801ace4:	637b      	str	r3, [r7, #52]	@ 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801ace6:	68bb      	ldr	r3, [r7, #8]
 801ace8:	1e5a      	subs	r2, r3, #1
 801acea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801acec:	68fb      	ldr	r3, [r7, #12]
 801acee:	1acb      	subs	r3, r1, r3
 801acf0:	1ad1      	subs	r1, r2, r3
 801acf2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801acf4:	6a3b      	ldr	r3, [r7, #32]
 801acf6:	9302      	str	r3, [sp, #8]
 801acf8:	69bb      	ldr	r3, [r7, #24]
 801acfa:	9301      	str	r3, [sp, #4]
 801acfc:	69fb      	ldr	r3, [r7, #28]
 801acfe:	9300      	str	r3, [sp, #0]
 801ad00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ad02:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801ad04:	f7ff fde0 	bl	801a8c8 <ee_number>
 801ad08:	62f8      	str	r0, [r7, #44]	@ 0x2c
 801ad0a:	e000      	b.n	801ad0e <tiny_vsnprintf_like+0x26a>
        continue;
 801ad0c:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801ad0e:	687b      	ldr	r3, [r7, #4]
 801ad10:	3301      	adds	r3, #1
 801ad12:	607b      	str	r3, [r7, #4]
 801ad14:	687b      	ldr	r3, [r7, #4]
 801ad16:	781b      	ldrb	r3, [r3, #0]
 801ad18:	2b00      	cmp	r3, #0
 801ad1a:	f47f aed2 	bne.w	801aac2 <tiny_vsnprintf_like+0x1e>
 801ad1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801ad20:	68fb      	ldr	r3, [r7, #12]
 801ad22:	1ad2      	subs	r2, r2, r3
 801ad24:	68bb      	ldr	r3, [r7, #8]
 801ad26:	3b01      	subs	r3, #1
 801ad28:	429a      	cmp	r2, r3
 801ad2a:	f6bf aeca 	bge.w	801aac2 <tiny_vsnprintf_like+0x1e>
  }

  *str = '\0';
 801ad2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ad30:	2200      	movs	r2, #0
 801ad32:	701a      	strb	r2, [r3, #0]
  return str - buf;
 801ad34:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801ad36:	68fb      	ldr	r3, [r7, #12]
 801ad38:	1ad3      	subs	r3, r2, r3
}
 801ad3a:	4618      	mov	r0, r3
 801ad3c:	3738      	adds	r7, #56	@ 0x38
 801ad3e:	46bd      	mov	sp, r7
 801ad40:	bd80      	pop	{r7, pc}
 801ad42:	bf00      	nop
 801ad44:	0801ef5c 	.word	0x0801ef5c

0801ad48 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801ad48:	b580      	push	{r7, lr}
 801ad4a:	b090      	sub	sp, #64	@ 0x40
 801ad4c:	af00      	add	r7, sp, #0
 801ad4e:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801ad50:	4b73      	ldr	r3, [pc, #460]	@ (801af20 <UTIL_SEQ_Run+0x1d8>)
 801ad52:	681b      	ldr	r3, [r3, #0]
 801ad54:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 801ad56:	4b72      	ldr	r3, [pc, #456]	@ (801af20 <UTIL_SEQ_Run+0x1d8>)
 801ad58:	681a      	ldr	r2, [r3, #0]
 801ad5a:	687b      	ldr	r3, [r7, #4]
 801ad5c:	4013      	ands	r3, r2
 801ad5e:	4a70      	ldr	r2, [pc, #448]	@ (801af20 <UTIL_SEQ_Run+0x1d8>)
 801ad60:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 801ad62:	4b70      	ldr	r3, [pc, #448]	@ (801af24 <UTIL_SEQ_Run+0x1dc>)
 801ad64:	681b      	ldr	r3, [r3, #0]
 801ad66:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 801ad68:	4b6f      	ldr	r3, [pc, #444]	@ (801af28 <UTIL_SEQ_Run+0x1e0>)
 801ad6a:	681b      	ldr	r3, [r3, #0]
 801ad6c:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 801ad6e:	4b6f      	ldr	r3, [pc, #444]	@ (801af2c <UTIL_SEQ_Run+0x1e4>)
 801ad70:	681b      	ldr	r3, [r3, #0]
 801ad72:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 801ad74:	4b6e      	ldr	r3, [pc, #440]	@ (801af30 <UTIL_SEQ_Run+0x1e8>)
 801ad76:	681b      	ldr	r3, [r3, #0]
 801ad78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801ad7a:	e08d      	b.n	801ae98 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 801ad7c:	2300      	movs	r3, #0
 801ad7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801ad80:	e002      	b.n	801ad88 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 801ad82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ad84:	3301      	adds	r3, #1
 801ad86:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801ad88:	4a6a      	ldr	r2, [pc, #424]	@ (801af34 <UTIL_SEQ_Run+0x1ec>)
 801ad8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ad8c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801ad90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ad92:	401a      	ands	r2, r3
 801ad94:	4b62      	ldr	r3, [pc, #392]	@ (801af20 <UTIL_SEQ_Run+0x1d8>)
 801ad96:	681b      	ldr	r3, [r3, #0]
 801ad98:	4013      	ands	r3, r2
 801ad9a:	2b00      	cmp	r3, #0
 801ad9c:	d0f1      	beq.n	801ad82 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 801ad9e:	4a65      	ldr	r2, [pc, #404]	@ (801af34 <UTIL_SEQ_Run+0x1ec>)
 801ada0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ada2:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801ada6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ada8:	401a      	ands	r2, r3
 801adaa:	4b5d      	ldr	r3, [pc, #372]	@ (801af20 <UTIL_SEQ_Run+0x1d8>)
 801adac:	681b      	ldr	r3, [r3, #0]
 801adae:	4013      	ands	r3, r2
 801adb0:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801adb2:	4a60      	ldr	r2, [pc, #384]	@ (801af34 <UTIL_SEQ_Run+0x1ec>)
 801adb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801adb6:	00db      	lsls	r3, r3, #3
 801adb8:	4413      	add	r3, r2
 801adba:	685a      	ldr	r2, [r3, #4]
 801adbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801adbe:	4013      	ands	r3, r2
 801adc0:	2b00      	cmp	r3, #0
 801adc2:	d106      	bne.n	801add2 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801adc4:	4a5b      	ldr	r2, [pc, #364]	@ (801af34 <UTIL_SEQ_Run+0x1ec>)
 801adc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801adc8:	00db      	lsls	r3, r3, #3
 801adca:	4413      	add	r3, r2
 801adcc:	f04f 32ff 	mov.w	r2, #4294967295
 801add0:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801add2:	4a58      	ldr	r2, [pc, #352]	@ (801af34 <UTIL_SEQ_Run+0x1ec>)
 801add4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801add6:	00db      	lsls	r3, r3, #3
 801add8:	4413      	add	r3, r2
 801adda:	685a      	ldr	r2, [r3, #4]
 801addc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801adde:	4013      	ands	r3, r2
 801ade0:	4618      	mov	r0, r3
 801ade2:	f000 f907 	bl	801aff4 <SEQ_BitPosition>
 801ade6:	4603      	mov	r3, r0
 801ade8:	461a      	mov	r2, r3
 801adea:	4b53      	ldr	r3, [pc, #332]	@ (801af38 <UTIL_SEQ_Run+0x1f0>)
 801adec:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801adee:	4a51      	ldr	r2, [pc, #324]	@ (801af34 <UTIL_SEQ_Run+0x1ec>)
 801adf0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801adf2:	00db      	lsls	r3, r3, #3
 801adf4:	4413      	add	r3, r2
 801adf6:	685a      	ldr	r2, [r3, #4]
 801adf8:	4b4f      	ldr	r3, [pc, #316]	@ (801af38 <UTIL_SEQ_Run+0x1f0>)
 801adfa:	681b      	ldr	r3, [r3, #0]
 801adfc:	2101      	movs	r1, #1
 801adfe:	fa01 f303 	lsl.w	r3, r1, r3
 801ae02:	43db      	mvns	r3, r3
 801ae04:	401a      	ands	r2, r3
 801ae06:	494b      	ldr	r1, [pc, #300]	@ (801af34 <UTIL_SEQ_Run+0x1ec>)
 801ae08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ae0a:	00db      	lsls	r3, r3, #3
 801ae0c:	440b      	add	r3, r1
 801ae0e:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ae10:	f3ef 8310 	mrs	r3, PRIMASK
 801ae14:	61bb      	str	r3, [r7, #24]
  return(result);
 801ae16:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801ae18:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801ae1a:	b672      	cpsid	i
}
 801ae1c:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801ae1e:	4b46      	ldr	r3, [pc, #280]	@ (801af38 <UTIL_SEQ_Run+0x1f0>)
 801ae20:	681b      	ldr	r3, [r3, #0]
 801ae22:	2201      	movs	r2, #1
 801ae24:	fa02 f303 	lsl.w	r3, r2, r3
 801ae28:	43da      	mvns	r2, r3
 801ae2a:	4b3e      	ldr	r3, [pc, #248]	@ (801af24 <UTIL_SEQ_Run+0x1dc>)
 801ae2c:	681b      	ldr	r3, [r3, #0]
 801ae2e:	4013      	ands	r3, r2
 801ae30:	4a3c      	ldr	r2, [pc, #240]	@ (801af24 <UTIL_SEQ_Run+0x1dc>)
 801ae32:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801ae34:	2301      	movs	r3, #1
 801ae36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801ae38:	e013      	b.n	801ae62 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801ae3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ae3c:	3b01      	subs	r3, #1
 801ae3e:	4a3d      	ldr	r2, [pc, #244]	@ (801af34 <UTIL_SEQ_Run+0x1ec>)
 801ae40:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 801ae44:	4b3c      	ldr	r3, [pc, #240]	@ (801af38 <UTIL_SEQ_Run+0x1f0>)
 801ae46:	681b      	ldr	r3, [r3, #0]
 801ae48:	2201      	movs	r2, #1
 801ae4a:	fa02 f303 	lsl.w	r3, r2, r3
 801ae4e:	43da      	mvns	r2, r3
 801ae50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ae52:	3b01      	subs	r3, #1
 801ae54:	400a      	ands	r2, r1
 801ae56:	4937      	ldr	r1, [pc, #220]	@ (801af34 <UTIL_SEQ_Run+0x1ec>)
 801ae58:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801ae5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ae5e:	3b01      	subs	r3, #1
 801ae60:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801ae62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ae64:	2b00      	cmp	r3, #0
 801ae66:	d1e8      	bne.n	801ae3a <UTIL_SEQ_Run+0xf2>
 801ae68:	6a3b      	ldr	r3, [r7, #32]
 801ae6a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ae6c:	697b      	ldr	r3, [r7, #20]
 801ae6e:	f383 8810 	msr	PRIMASK, r3
}
 801ae72:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 801ae74:	4b30      	ldr	r3, [pc, #192]	@ (801af38 <UTIL_SEQ_Run+0x1f0>)
 801ae76:	681b      	ldr	r3, [r3, #0]
 801ae78:	4a30      	ldr	r2, [pc, #192]	@ (801af3c <UTIL_SEQ_Run+0x1f4>)
 801ae7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801ae7e:	4798      	blx	r3

    local_taskset = TaskSet;
 801ae80:	4b28      	ldr	r3, [pc, #160]	@ (801af24 <UTIL_SEQ_Run+0x1dc>)
 801ae82:	681b      	ldr	r3, [r3, #0]
 801ae84:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 801ae86:	4b28      	ldr	r3, [pc, #160]	@ (801af28 <UTIL_SEQ_Run+0x1e0>)
 801ae88:	681b      	ldr	r3, [r3, #0]
 801ae8a:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 801ae8c:	4b27      	ldr	r3, [pc, #156]	@ (801af2c <UTIL_SEQ_Run+0x1e4>)
 801ae8e:	681b      	ldr	r3, [r3, #0]
 801ae90:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 801ae92:	4b27      	ldr	r3, [pc, #156]	@ (801af30 <UTIL_SEQ_Run+0x1e8>)
 801ae94:	681b      	ldr	r3, [r3, #0]
 801ae96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801ae98:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801ae9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ae9c:	401a      	ands	r2, r3
 801ae9e:	4b20      	ldr	r3, [pc, #128]	@ (801af20 <UTIL_SEQ_Run+0x1d8>)
 801aea0:	681b      	ldr	r3, [r3, #0]
 801aea2:	4013      	ands	r3, r2
 801aea4:	2b00      	cmp	r3, #0
 801aea6:	d005      	beq.n	801aeb4 <UTIL_SEQ_Run+0x16c>
 801aea8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801aeaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801aeac:	4013      	ands	r3, r2
 801aeae:	2b00      	cmp	r3, #0
 801aeb0:	f43f af64 	beq.w	801ad7c <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801aeb4:	4b20      	ldr	r3, [pc, #128]	@ (801af38 <UTIL_SEQ_Run+0x1f0>)
 801aeb6:	f04f 32ff 	mov.w	r2, #4294967295
 801aeba:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801aebc:	f000 f88e 	bl	801afdc <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801aec0:	f3ef 8310 	mrs	r3, PRIMASK
 801aec4:	613b      	str	r3, [r7, #16]
  return(result);
 801aec6:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801aec8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801aeca:	b672      	cpsid	i
}
 801aecc:	bf00      	nop
  local_taskset = TaskSet;
 801aece:	4b15      	ldr	r3, [pc, #84]	@ (801af24 <UTIL_SEQ_Run+0x1dc>)
 801aed0:	681b      	ldr	r3, [r3, #0]
 801aed2:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 801aed4:	4b14      	ldr	r3, [pc, #80]	@ (801af28 <UTIL_SEQ_Run+0x1e0>)
 801aed6:	681b      	ldr	r3, [r3, #0]
 801aed8:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 801aeda:	4b14      	ldr	r3, [pc, #80]	@ (801af2c <UTIL_SEQ_Run+0x1e4>)
 801aedc:	681b      	ldr	r3, [r3, #0]
 801aede:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 801aee0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801aee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aee4:	401a      	ands	r2, r3
 801aee6:	4b0e      	ldr	r3, [pc, #56]	@ (801af20 <UTIL_SEQ_Run+0x1d8>)
 801aee8:	681b      	ldr	r3, [r3, #0]
 801aeea:	4013      	ands	r3, r2
 801aeec:	2b00      	cmp	r3, #0
 801aeee:	d107      	bne.n	801af00 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 801aef0:	4b0f      	ldr	r3, [pc, #60]	@ (801af30 <UTIL_SEQ_Run+0x1e8>)
 801aef2:	681a      	ldr	r2, [r3, #0]
 801aef4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801aef6:	4013      	ands	r3, r2
 801aef8:	2b00      	cmp	r3, #0
 801aefa:	d101      	bne.n	801af00 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 801aefc:	f7e7 f830 	bl	8001f60 <UTIL_SEQ_Idle>
 801af00:	69fb      	ldr	r3, [r7, #28]
 801af02:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801af04:	68fb      	ldr	r3, [r7, #12]
 801af06:	f383 8810 	msr	PRIMASK, r3
}
 801af0a:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 801af0c:	f000 f86c 	bl	801afe8 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801af10:	4a03      	ldr	r2, [pc, #12]	@ (801af20 <UTIL_SEQ_Run+0x1d8>)
 801af12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801af14:	6013      	str	r3, [r2, #0]

  return;
 801af16:	bf00      	nop
}
 801af18:	3740      	adds	r7, #64	@ 0x40
 801af1a:	46bd      	mov	sp, r7
 801af1c:	bd80      	pop	{r7, pc}
 801af1e:	bf00      	nop
 801af20:	2000013c 	.word	0x2000013c
 801af24:	20001d7c 	.word	0x20001d7c
 801af28:	20001d80 	.word	0x20001d80
 801af2c:	20000138 	.word	0x20000138
 801af30:	20001d84 	.word	0x20001d84
 801af34:	20001d9c 	.word	0x20001d9c
 801af38:	20001d88 	.word	0x20001d88
 801af3c:	20001d8c 	.word	0x20001d8c

0801af40 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801af40:	b580      	push	{r7, lr}
 801af42:	b088      	sub	sp, #32
 801af44:	af00      	add	r7, sp, #0
 801af46:	60f8      	str	r0, [r7, #12]
 801af48:	60b9      	str	r1, [r7, #8]
 801af4a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801af4c:	f3ef 8310 	mrs	r3, PRIMASK
 801af50:	617b      	str	r3, [r7, #20]
  return(result);
 801af52:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801af54:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801af56:	b672      	cpsid	i
}
 801af58:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801af5a:	68f8      	ldr	r0, [r7, #12]
 801af5c:	f000 f84a 	bl	801aff4 <SEQ_BitPosition>
 801af60:	4603      	mov	r3, r0
 801af62:	4619      	mov	r1, r3
 801af64:	4a06      	ldr	r2, [pc, #24]	@ (801af80 <UTIL_SEQ_RegTask+0x40>)
 801af66:	687b      	ldr	r3, [r7, #4]
 801af68:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801af6c:	69fb      	ldr	r3, [r7, #28]
 801af6e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801af70:	69bb      	ldr	r3, [r7, #24]
 801af72:	f383 8810 	msr	PRIMASK, r3
}
 801af76:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801af78:	bf00      	nop
}
 801af7a:	3720      	adds	r7, #32
 801af7c:	46bd      	mov	sp, r7
 801af7e:	bd80      	pop	{r7, pc}
 801af80:	20001d8c 	.word	0x20001d8c

0801af84 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801af84:	b480      	push	{r7}
 801af86:	b087      	sub	sp, #28
 801af88:	af00      	add	r7, sp, #0
 801af8a:	6078      	str	r0, [r7, #4]
 801af8c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801af8e:	f3ef 8310 	mrs	r3, PRIMASK
 801af92:	60fb      	str	r3, [r7, #12]
  return(result);
 801af94:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801af96:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801af98:	b672      	cpsid	i
}
 801af9a:	bf00      	nop

  TaskSet |= TaskId_bm;
 801af9c:	4b0d      	ldr	r3, [pc, #52]	@ (801afd4 <UTIL_SEQ_SetTask+0x50>)
 801af9e:	681a      	ldr	r2, [r3, #0]
 801afa0:	687b      	ldr	r3, [r7, #4]
 801afa2:	4313      	orrs	r3, r2
 801afa4:	4a0b      	ldr	r2, [pc, #44]	@ (801afd4 <UTIL_SEQ_SetTask+0x50>)
 801afa6:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801afa8:	4a0b      	ldr	r2, [pc, #44]	@ (801afd8 <UTIL_SEQ_SetTask+0x54>)
 801afaa:	683b      	ldr	r3, [r7, #0]
 801afac:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801afb0:	687b      	ldr	r3, [r7, #4]
 801afb2:	431a      	orrs	r2, r3
 801afb4:	4908      	ldr	r1, [pc, #32]	@ (801afd8 <UTIL_SEQ_SetTask+0x54>)
 801afb6:	683b      	ldr	r3, [r7, #0]
 801afb8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801afbc:	697b      	ldr	r3, [r7, #20]
 801afbe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801afc0:	693b      	ldr	r3, [r7, #16]
 801afc2:	f383 8810 	msr	PRIMASK, r3
}
 801afc6:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801afc8:	bf00      	nop
}
 801afca:	371c      	adds	r7, #28
 801afcc:	46bd      	mov	sp, r7
 801afce:	bc80      	pop	{r7}
 801afd0:	4770      	bx	lr
 801afd2:	bf00      	nop
 801afd4:	20001d7c 	.word	0x20001d7c
 801afd8:	20001d9c 	.word	0x20001d9c

0801afdc <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801afdc:	b480      	push	{r7}
 801afde:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801afe0:	bf00      	nop
}
 801afe2:	46bd      	mov	sp, r7
 801afe4:	bc80      	pop	{r7}
 801afe6:	4770      	bx	lr

0801afe8 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801afe8:	b480      	push	{r7}
 801afea:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801afec:	bf00      	nop
}
 801afee:	46bd      	mov	sp, r7
 801aff0:	bc80      	pop	{r7}
 801aff2:	4770      	bx	lr

0801aff4 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801aff4:	b480      	push	{r7}
 801aff6:	b085      	sub	sp, #20
 801aff8:	af00      	add	r7, sp, #0
 801affa:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 801affc:	2300      	movs	r3, #0
 801affe:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 801b000:	687b      	ldr	r3, [r7, #4]
 801b002:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 801b004:	68bb      	ldr	r3, [r7, #8]
 801b006:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801b00a:	d204      	bcs.n	801b016 <SEQ_BitPosition+0x22>
 801b00c:	2310      	movs	r3, #16
 801b00e:	73fb      	strb	r3, [r7, #15]
 801b010:	68bb      	ldr	r3, [r7, #8]
 801b012:	041b      	lsls	r3, r3, #16
 801b014:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 801b016:	68bb      	ldr	r3, [r7, #8]
 801b018:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801b01c:	d205      	bcs.n	801b02a <SEQ_BitPosition+0x36>
 801b01e:	7bfb      	ldrb	r3, [r7, #15]
 801b020:	3308      	adds	r3, #8
 801b022:	73fb      	strb	r3, [r7, #15]
 801b024:	68bb      	ldr	r3, [r7, #8]
 801b026:	021b      	lsls	r3, r3, #8
 801b028:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 801b02a:	68bb      	ldr	r3, [r7, #8]
 801b02c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801b030:	d205      	bcs.n	801b03e <SEQ_BitPosition+0x4a>
 801b032:	7bfb      	ldrb	r3, [r7, #15]
 801b034:	3304      	adds	r3, #4
 801b036:	73fb      	strb	r3, [r7, #15]
 801b038:	68bb      	ldr	r3, [r7, #8]
 801b03a:	011b      	lsls	r3, r3, #4
 801b03c:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 801b03e:	68bb      	ldr	r3, [r7, #8]
 801b040:	0f1b      	lsrs	r3, r3, #28
 801b042:	4a07      	ldr	r2, [pc, #28]	@ (801b060 <SEQ_BitPosition+0x6c>)
 801b044:	5cd2      	ldrb	r2, [r2, r3]
 801b046:	7bfb      	ldrb	r3, [r7, #15]
 801b048:	4413      	add	r3, r2
 801b04a:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801b04c:	7bfb      	ldrb	r3, [r7, #15]
 801b04e:	f1c3 031f 	rsb	r3, r3, #31
 801b052:	b2db      	uxtb	r3, r3
}
 801b054:	4618      	mov	r0, r3
 801b056:	3714      	adds	r7, #20
 801b058:	46bd      	mov	sp, r7
 801b05a:	bc80      	pop	{r7}
 801b05c:	4770      	bx	lr
 801b05e:	bf00      	nop
 801b060:	0801f59c 	.word	0x0801f59c

0801b064 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801b064:	b580      	push	{r7, lr}
 801b066:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801b068:	4b04      	ldr	r3, [pc, #16]	@ (801b07c <UTIL_TIMER_Init+0x18>)
 801b06a:	2200      	movs	r2, #0
 801b06c:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801b06e:	4b04      	ldr	r3, [pc, #16]	@ (801b080 <UTIL_TIMER_Init+0x1c>)
 801b070:	681b      	ldr	r3, [r3, #0]
 801b072:	4798      	blx	r3
 801b074:	4603      	mov	r3, r0
}
 801b076:	4618      	mov	r0, r3
 801b078:	bd80      	pop	{r7, pc}
 801b07a:	bf00      	nop
 801b07c:	20001da4 	.word	0x20001da4
 801b080:	0801f01c 	.word	0x0801f01c

0801b084 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801b084:	b580      	push	{r7, lr}
 801b086:	b084      	sub	sp, #16
 801b088:	af00      	add	r7, sp, #0
 801b08a:	60f8      	str	r0, [r7, #12]
 801b08c:	60b9      	str	r1, [r7, #8]
 801b08e:	603b      	str	r3, [r7, #0]
 801b090:	4613      	mov	r3, r2
 801b092:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 801b094:	68fb      	ldr	r3, [r7, #12]
 801b096:	2b00      	cmp	r3, #0
 801b098:	d023      	beq.n	801b0e2 <UTIL_TIMER_Create+0x5e>
 801b09a:	683b      	ldr	r3, [r7, #0]
 801b09c:	2b00      	cmp	r3, #0
 801b09e:	d020      	beq.n	801b0e2 <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 801b0a0:	68fb      	ldr	r3, [r7, #12]
 801b0a2:	2200      	movs	r2, #0
 801b0a4:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801b0a6:	4b11      	ldr	r3, [pc, #68]	@ (801b0ec <UTIL_TIMER_Create+0x68>)
 801b0a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b0aa:	68b8      	ldr	r0, [r7, #8]
 801b0ac:	4798      	blx	r3
 801b0ae:	4602      	mov	r2, r0
 801b0b0:	68fb      	ldr	r3, [r7, #12]
 801b0b2:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801b0b4:	68fb      	ldr	r3, [r7, #12]
 801b0b6:	2200      	movs	r2, #0
 801b0b8:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801b0ba:	68fb      	ldr	r3, [r7, #12]
 801b0bc:	2200      	movs	r2, #0
 801b0be:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801b0c0:	68fb      	ldr	r3, [r7, #12]
 801b0c2:	2200      	movs	r2, #0
 801b0c4:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801b0c6:	68fb      	ldr	r3, [r7, #12]
 801b0c8:	683a      	ldr	r2, [r7, #0]
 801b0ca:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801b0cc:	68fb      	ldr	r3, [r7, #12]
 801b0ce:	69ba      	ldr	r2, [r7, #24]
 801b0d0:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801b0d2:	68fb      	ldr	r3, [r7, #12]
 801b0d4:	79fa      	ldrb	r2, [r7, #7]
 801b0d6:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801b0d8:	68fb      	ldr	r3, [r7, #12]
 801b0da:	2200      	movs	r2, #0
 801b0dc:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801b0de:	2300      	movs	r3, #0
 801b0e0:	e000      	b.n	801b0e4 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801b0e2:	2301      	movs	r3, #1
  }
}
 801b0e4:	4618      	mov	r0, r3
 801b0e6:	3710      	adds	r7, #16
 801b0e8:	46bd      	mov	sp, r7
 801b0ea:	bd80      	pop	{r7, pc}
 801b0ec:	0801f01c 	.word	0x0801f01c

0801b0f0 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801b0f0:	b580      	push	{r7, lr}
 801b0f2:	b08a      	sub	sp, #40	@ 0x28
 801b0f4:	af00      	add	r7, sp, #0
 801b0f6:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801b0f8:	2300      	movs	r3, #0
 801b0fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801b0fe:	687b      	ldr	r3, [r7, #4]
 801b100:	2b00      	cmp	r3, #0
 801b102:	d056      	beq.n	801b1b2 <UTIL_TIMER_Start+0xc2>
 801b104:	6878      	ldr	r0, [r7, #4]
 801b106:	f000 f9a9 	bl	801b45c <TimerExists>
 801b10a:	4603      	mov	r3, r0
 801b10c:	f083 0301 	eor.w	r3, r3, #1
 801b110:	b2db      	uxtb	r3, r3
 801b112:	2b00      	cmp	r3, #0
 801b114:	d04d      	beq.n	801b1b2 <UTIL_TIMER_Start+0xc2>
 801b116:	687b      	ldr	r3, [r7, #4]
 801b118:	7a5b      	ldrb	r3, [r3, #9]
 801b11a:	2b00      	cmp	r3, #0
 801b11c:	d149      	bne.n	801b1b2 <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b11e:	f3ef 8310 	mrs	r3, PRIMASK
 801b122:	613b      	str	r3, [r7, #16]
  return(result);
 801b124:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801b126:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801b128:	b672      	cpsid	i
}
 801b12a:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 801b12c:	687b      	ldr	r3, [r7, #4]
 801b12e:	685b      	ldr	r3, [r3, #4]
 801b130:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801b132:	4b24      	ldr	r3, [pc, #144]	@ (801b1c4 <UTIL_TIMER_Start+0xd4>)
 801b134:	6a1b      	ldr	r3, [r3, #32]
 801b136:	4798      	blx	r3
 801b138:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 801b13a:	6a3a      	ldr	r2, [r7, #32]
 801b13c:	69bb      	ldr	r3, [r7, #24]
 801b13e:	429a      	cmp	r2, r3
 801b140:	d201      	bcs.n	801b146 <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 801b142:	69bb      	ldr	r3, [r7, #24]
 801b144:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801b146:	687b      	ldr	r3, [r7, #4]
 801b148:	6a3a      	ldr	r2, [r7, #32]
 801b14a:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801b14c:	687b      	ldr	r3, [r7, #4]
 801b14e:	2200      	movs	r2, #0
 801b150:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801b152:	687b      	ldr	r3, [r7, #4]
 801b154:	2201      	movs	r2, #1
 801b156:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801b158:	687b      	ldr	r3, [r7, #4]
 801b15a:	2200      	movs	r2, #0
 801b15c:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801b15e:	4b1a      	ldr	r3, [pc, #104]	@ (801b1c8 <UTIL_TIMER_Start+0xd8>)
 801b160:	681b      	ldr	r3, [r3, #0]
 801b162:	2b00      	cmp	r3, #0
 801b164:	d106      	bne.n	801b174 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 801b166:	4b17      	ldr	r3, [pc, #92]	@ (801b1c4 <UTIL_TIMER_Start+0xd4>)
 801b168:	691b      	ldr	r3, [r3, #16]
 801b16a:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801b16c:	6878      	ldr	r0, [r7, #4]
 801b16e:	f000 f9eb 	bl	801b548 <TimerInsertNewHeadTimer>
 801b172:	e017      	b.n	801b1a4 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801b174:	4b13      	ldr	r3, [pc, #76]	@ (801b1c4 <UTIL_TIMER_Start+0xd4>)
 801b176:	699b      	ldr	r3, [r3, #24]
 801b178:	4798      	blx	r3
 801b17a:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801b17c:	687b      	ldr	r3, [r7, #4]
 801b17e:	681a      	ldr	r2, [r3, #0]
 801b180:	697b      	ldr	r3, [r7, #20]
 801b182:	441a      	add	r2, r3
 801b184:	687b      	ldr	r3, [r7, #4]
 801b186:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801b188:	687b      	ldr	r3, [r7, #4]
 801b18a:	681a      	ldr	r2, [r3, #0]
 801b18c:	4b0e      	ldr	r3, [pc, #56]	@ (801b1c8 <UTIL_TIMER_Start+0xd8>)
 801b18e:	681b      	ldr	r3, [r3, #0]
 801b190:	681b      	ldr	r3, [r3, #0]
 801b192:	429a      	cmp	r2, r3
 801b194:	d203      	bcs.n	801b19e <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801b196:	6878      	ldr	r0, [r7, #4]
 801b198:	f000 f9d6 	bl	801b548 <TimerInsertNewHeadTimer>
 801b19c:	e002      	b.n	801b1a4 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801b19e:	6878      	ldr	r0, [r7, #4]
 801b1a0:	f000 f9a2 	bl	801b4e8 <TimerInsertTimer>
 801b1a4:	69fb      	ldr	r3, [r7, #28]
 801b1a6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b1a8:	68fb      	ldr	r3, [r7, #12]
 801b1aa:	f383 8810 	msr	PRIMASK, r3
}
 801b1ae:	bf00      	nop
  {
 801b1b0:	e002      	b.n	801b1b8 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801b1b2:	2301      	movs	r3, #1
 801b1b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  return ret;
 801b1b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 801b1bc:	4618      	mov	r0, r3
 801b1be:	3728      	adds	r7, #40	@ 0x28
 801b1c0:	46bd      	mov	sp, r7
 801b1c2:	bd80      	pop	{r7, pc}
 801b1c4:	0801f01c 	.word	0x0801f01c
 801b1c8:	20001da4 	.word	0x20001da4

0801b1cc <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801b1cc:	b580      	push	{r7, lr}
 801b1ce:	b088      	sub	sp, #32
 801b1d0:	af00      	add	r7, sp, #0
 801b1d2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801b1d4:	2300      	movs	r3, #0
 801b1d6:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 801b1d8:	687b      	ldr	r3, [r7, #4]
 801b1da:	2b00      	cmp	r3, #0
 801b1dc:	d05b      	beq.n	801b296 <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b1de:	f3ef 8310 	mrs	r3, PRIMASK
 801b1e2:	60fb      	str	r3, [r7, #12]
  return(result);
 801b1e4:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801b1e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801b1e8:	b672      	cpsid	i
}
 801b1ea:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801b1ec:	4b2d      	ldr	r3, [pc, #180]	@ (801b2a4 <UTIL_TIMER_Stop+0xd8>)
 801b1ee:	681b      	ldr	r3, [r3, #0]
 801b1f0:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801b1f2:	4b2c      	ldr	r3, [pc, #176]	@ (801b2a4 <UTIL_TIMER_Stop+0xd8>)
 801b1f4:	681b      	ldr	r3, [r3, #0]
 801b1f6:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801b1f8:	687b      	ldr	r3, [r7, #4]
 801b1fa:	2201      	movs	r2, #1
 801b1fc:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801b1fe:	4b29      	ldr	r3, [pc, #164]	@ (801b2a4 <UTIL_TIMER_Stop+0xd8>)
 801b200:	681b      	ldr	r3, [r3, #0]
 801b202:	2b00      	cmp	r3, #0
 801b204:	d041      	beq.n	801b28a <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 801b206:	687b      	ldr	r3, [r7, #4]
 801b208:	2200      	movs	r2, #0
 801b20a:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801b20c:	4b25      	ldr	r3, [pc, #148]	@ (801b2a4 <UTIL_TIMER_Stop+0xd8>)
 801b20e:	681b      	ldr	r3, [r3, #0]
 801b210:	687a      	ldr	r2, [r7, #4]
 801b212:	429a      	cmp	r2, r3
 801b214:	d134      	bne.n	801b280 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 801b216:	4b23      	ldr	r3, [pc, #140]	@ (801b2a4 <UTIL_TIMER_Stop+0xd8>)
 801b218:	681b      	ldr	r3, [r3, #0]
 801b21a:	2200      	movs	r2, #0
 801b21c:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801b21e:	4b21      	ldr	r3, [pc, #132]	@ (801b2a4 <UTIL_TIMER_Stop+0xd8>)
 801b220:	681b      	ldr	r3, [r3, #0]
 801b222:	695b      	ldr	r3, [r3, #20]
 801b224:	2b00      	cmp	r3, #0
 801b226:	d00a      	beq.n	801b23e <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 801b228:	4b1e      	ldr	r3, [pc, #120]	@ (801b2a4 <UTIL_TIMER_Stop+0xd8>)
 801b22a:	681b      	ldr	r3, [r3, #0]
 801b22c:	695b      	ldr	r3, [r3, #20]
 801b22e:	4a1d      	ldr	r2, [pc, #116]	@ (801b2a4 <UTIL_TIMER_Stop+0xd8>)
 801b230:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 801b232:	4b1c      	ldr	r3, [pc, #112]	@ (801b2a4 <UTIL_TIMER_Stop+0xd8>)
 801b234:	681b      	ldr	r3, [r3, #0]
 801b236:	4618      	mov	r0, r3
 801b238:	f000 f92c 	bl	801b494 <TimerSetTimeout>
 801b23c:	e023      	b.n	801b286 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801b23e:	4b1a      	ldr	r3, [pc, #104]	@ (801b2a8 <UTIL_TIMER_Stop+0xdc>)
 801b240:	68db      	ldr	r3, [r3, #12]
 801b242:	4798      	blx	r3
            TimerListHead = NULL;
 801b244:	4b17      	ldr	r3, [pc, #92]	@ (801b2a4 <UTIL_TIMER_Stop+0xd8>)
 801b246:	2200      	movs	r2, #0
 801b248:	601a      	str	r2, [r3, #0]
 801b24a:	e01c      	b.n	801b286 <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801b24c:	697a      	ldr	r2, [r7, #20]
 801b24e:	687b      	ldr	r3, [r7, #4]
 801b250:	429a      	cmp	r2, r3
 801b252:	d110      	bne.n	801b276 <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 801b254:	697b      	ldr	r3, [r7, #20]
 801b256:	695b      	ldr	r3, [r3, #20]
 801b258:	2b00      	cmp	r3, #0
 801b25a:	d006      	beq.n	801b26a <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 801b25c:	697b      	ldr	r3, [r7, #20]
 801b25e:	695b      	ldr	r3, [r3, #20]
 801b260:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801b262:	69bb      	ldr	r3, [r7, #24]
 801b264:	697a      	ldr	r2, [r7, #20]
 801b266:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801b268:	e00d      	b.n	801b286 <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 801b26a:	2300      	movs	r3, #0
 801b26c:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801b26e:	69bb      	ldr	r3, [r7, #24]
 801b270:	697a      	ldr	r2, [r7, #20]
 801b272:	615a      	str	r2, [r3, #20]
            break;
 801b274:	e007      	b.n	801b286 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 801b276:	697b      	ldr	r3, [r7, #20]
 801b278:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801b27a:	697b      	ldr	r3, [r7, #20]
 801b27c:	695b      	ldr	r3, [r3, #20]
 801b27e:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801b280:	697b      	ldr	r3, [r7, #20]
 801b282:	2b00      	cmp	r3, #0
 801b284:	d1e2      	bne.n	801b24c <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801b286:	2300      	movs	r3, #0
 801b288:	77fb      	strb	r3, [r7, #31]
 801b28a:	693b      	ldr	r3, [r7, #16]
 801b28c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b28e:	68bb      	ldr	r3, [r7, #8]
 801b290:	f383 8810 	msr	PRIMASK, r3
}
 801b294:	e001      	b.n	801b29a <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801b296:	2301      	movs	r3, #1
 801b298:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 801b29a:	7ffb      	ldrb	r3, [r7, #31]
}
 801b29c:	4618      	mov	r0, r3
 801b29e:	3720      	adds	r7, #32
 801b2a0:	46bd      	mov	sp, r7
 801b2a2:	bd80      	pop	{r7, pc}
 801b2a4:	20001da4 	.word	0x20001da4
 801b2a8:	0801f01c 	.word	0x0801f01c

0801b2ac <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801b2ac:	b580      	push	{r7, lr}
 801b2ae:	b084      	sub	sp, #16
 801b2b0:	af00      	add	r7, sp, #0
 801b2b2:	6078      	str	r0, [r7, #4]
 801b2b4:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801b2b6:	2300      	movs	r3, #0
 801b2b8:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 801b2ba:	687b      	ldr	r3, [r7, #4]
 801b2bc:	2b00      	cmp	r3, #0
 801b2be:	d102      	bne.n	801b2c6 <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801b2c0:	2301      	movs	r3, #1
 801b2c2:	73fb      	strb	r3, [r7, #15]
 801b2c4:	e014      	b.n	801b2f0 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801b2c6:	4b0d      	ldr	r3, [pc, #52]	@ (801b2fc <UTIL_TIMER_SetPeriod+0x50>)
 801b2c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b2ca:	6838      	ldr	r0, [r7, #0]
 801b2cc:	4798      	blx	r3
 801b2ce:	4602      	mov	r2, r0
 801b2d0:	687b      	ldr	r3, [r7, #4]
 801b2d2:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801b2d4:	6878      	ldr	r0, [r7, #4]
 801b2d6:	f000 f8c1 	bl	801b45c <TimerExists>
 801b2da:	4603      	mov	r3, r0
 801b2dc:	2b00      	cmp	r3, #0
 801b2de:	d007      	beq.n	801b2f0 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801b2e0:	6878      	ldr	r0, [r7, #4]
 801b2e2:	f7ff ff73 	bl	801b1cc <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801b2e6:	6878      	ldr	r0, [r7, #4]
 801b2e8:	f7ff ff02 	bl	801b0f0 <UTIL_TIMER_Start>
 801b2ec:	4603      	mov	r3, r0
 801b2ee:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 801b2f0:	7bfb      	ldrb	r3, [r7, #15]
}
 801b2f2:	4618      	mov	r0, r3
 801b2f4:	3710      	adds	r7, #16
 801b2f6:	46bd      	mov	sp, r7
 801b2f8:	bd80      	pop	{r7, pc}
 801b2fa:	bf00      	nop
 801b2fc:	0801f01c 	.word	0x0801f01c

0801b300 <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801b300:	b590      	push	{r4, r7, lr}
 801b302:	b089      	sub	sp, #36	@ 0x24
 801b304:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b306:	f3ef 8310 	mrs	r3, PRIMASK
 801b30a:	60bb      	str	r3, [r7, #8]
  return(result);
 801b30c:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801b30e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801b310:	b672      	cpsid	i
}
 801b312:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801b314:	4b38      	ldr	r3, [pc, #224]	@ (801b3f8 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801b316:	695b      	ldr	r3, [r3, #20]
 801b318:	4798      	blx	r3
 801b31a:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801b31c:	4b36      	ldr	r3, [pc, #216]	@ (801b3f8 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801b31e:	691b      	ldr	r3, [r3, #16]
 801b320:	4798      	blx	r3
 801b322:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801b324:	693a      	ldr	r2, [r7, #16]
 801b326:	697b      	ldr	r3, [r7, #20]
 801b328:	1ad3      	subs	r3, r2, r3
 801b32a:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801b32c:	4b33      	ldr	r3, [pc, #204]	@ (801b3fc <UTIL_TIMER_IRQ_Handler+0xfc>)
 801b32e:	681b      	ldr	r3, [r3, #0]
 801b330:	2b00      	cmp	r3, #0
 801b332:	d037      	beq.n	801b3a4 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 801b334:	4b31      	ldr	r3, [pc, #196]	@ (801b3fc <UTIL_TIMER_IRQ_Handler+0xfc>)
 801b336:	681b      	ldr	r3, [r3, #0]
 801b338:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801b33a:	69fb      	ldr	r3, [r7, #28]
 801b33c:	681b      	ldr	r3, [r3, #0]
 801b33e:	68fa      	ldr	r2, [r7, #12]
 801b340:	429a      	cmp	r2, r3
 801b342:	d206      	bcs.n	801b352 <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 801b344:	69fb      	ldr	r3, [r7, #28]
 801b346:	681a      	ldr	r2, [r3, #0]
 801b348:	68fb      	ldr	r3, [r7, #12]
 801b34a:	1ad2      	subs	r2, r2, r3
 801b34c:	69fb      	ldr	r3, [r7, #28]
 801b34e:	601a      	str	r2, [r3, #0]
 801b350:	e002      	b.n	801b358 <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 801b352:	69fb      	ldr	r3, [r7, #28]
 801b354:	2200      	movs	r2, #0
 801b356:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801b358:	69fb      	ldr	r3, [r7, #28]
 801b35a:	695b      	ldr	r3, [r3, #20]
 801b35c:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801b35e:	69fb      	ldr	r3, [r7, #28]
 801b360:	2b00      	cmp	r3, #0
 801b362:	d1ea      	bne.n	801b33a <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801b364:	e01e      	b.n	801b3a4 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 801b366:	4b25      	ldr	r3, [pc, #148]	@ (801b3fc <UTIL_TIMER_IRQ_Handler+0xfc>)
 801b368:	681b      	ldr	r3, [r3, #0]
 801b36a:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801b36c:	4b23      	ldr	r3, [pc, #140]	@ (801b3fc <UTIL_TIMER_IRQ_Handler+0xfc>)
 801b36e:	681b      	ldr	r3, [r3, #0]
 801b370:	695b      	ldr	r3, [r3, #20]
 801b372:	4a22      	ldr	r2, [pc, #136]	@ (801b3fc <UTIL_TIMER_IRQ_Handler+0xfc>)
 801b374:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 801b376:	69fb      	ldr	r3, [r7, #28]
 801b378:	2200      	movs	r2, #0
 801b37a:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801b37c:	69fb      	ldr	r3, [r7, #28]
 801b37e:	2200      	movs	r2, #0
 801b380:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801b382:	69fb      	ldr	r3, [r7, #28]
 801b384:	68db      	ldr	r3, [r3, #12]
 801b386:	69fa      	ldr	r2, [r7, #28]
 801b388:	6912      	ldr	r2, [r2, #16]
 801b38a:	4610      	mov	r0, r2
 801b38c:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801b38e:	69fb      	ldr	r3, [r7, #28]
 801b390:	7adb      	ldrb	r3, [r3, #11]
 801b392:	2b01      	cmp	r3, #1
 801b394:	d106      	bne.n	801b3a4 <UTIL_TIMER_IRQ_Handler+0xa4>
 801b396:	69fb      	ldr	r3, [r7, #28]
 801b398:	7a9b      	ldrb	r3, [r3, #10]
 801b39a:	2b00      	cmp	r3, #0
 801b39c:	d102      	bne.n	801b3a4 <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 801b39e:	69f8      	ldr	r0, [r7, #28]
 801b3a0:	f7ff fea6 	bl	801b0f0 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801b3a4:	4b15      	ldr	r3, [pc, #84]	@ (801b3fc <UTIL_TIMER_IRQ_Handler+0xfc>)
 801b3a6:	681b      	ldr	r3, [r3, #0]
 801b3a8:	2b00      	cmp	r3, #0
 801b3aa:	d00d      	beq.n	801b3c8 <UTIL_TIMER_IRQ_Handler+0xc8>
 801b3ac:	4b13      	ldr	r3, [pc, #76]	@ (801b3fc <UTIL_TIMER_IRQ_Handler+0xfc>)
 801b3ae:	681b      	ldr	r3, [r3, #0]
 801b3b0:	681b      	ldr	r3, [r3, #0]
 801b3b2:	2b00      	cmp	r3, #0
 801b3b4:	d0d7      	beq.n	801b366 <UTIL_TIMER_IRQ_Handler+0x66>
 801b3b6:	4b11      	ldr	r3, [pc, #68]	@ (801b3fc <UTIL_TIMER_IRQ_Handler+0xfc>)
 801b3b8:	681b      	ldr	r3, [r3, #0]
 801b3ba:	681c      	ldr	r4, [r3, #0]
 801b3bc:	4b0e      	ldr	r3, [pc, #56]	@ (801b3f8 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801b3be:	699b      	ldr	r3, [r3, #24]
 801b3c0:	4798      	blx	r3
 801b3c2:	4603      	mov	r3, r0
 801b3c4:	429c      	cmp	r4, r3
 801b3c6:	d3ce      	bcc.n	801b366 <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801b3c8:	4b0c      	ldr	r3, [pc, #48]	@ (801b3fc <UTIL_TIMER_IRQ_Handler+0xfc>)
 801b3ca:	681b      	ldr	r3, [r3, #0]
 801b3cc:	2b00      	cmp	r3, #0
 801b3ce:	d009      	beq.n	801b3e4 <UTIL_TIMER_IRQ_Handler+0xe4>
 801b3d0:	4b0a      	ldr	r3, [pc, #40]	@ (801b3fc <UTIL_TIMER_IRQ_Handler+0xfc>)
 801b3d2:	681b      	ldr	r3, [r3, #0]
 801b3d4:	7a1b      	ldrb	r3, [r3, #8]
 801b3d6:	2b00      	cmp	r3, #0
 801b3d8:	d104      	bne.n	801b3e4 <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 801b3da:	4b08      	ldr	r3, [pc, #32]	@ (801b3fc <UTIL_TIMER_IRQ_Handler+0xfc>)
 801b3dc:	681b      	ldr	r3, [r3, #0]
 801b3de:	4618      	mov	r0, r3
 801b3e0:	f000 f858 	bl	801b494 <TimerSetTimeout>
 801b3e4:	69bb      	ldr	r3, [r7, #24]
 801b3e6:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b3e8:	687b      	ldr	r3, [r7, #4]
 801b3ea:	f383 8810 	msr	PRIMASK, r3
}
 801b3ee:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801b3f0:	bf00      	nop
 801b3f2:	3724      	adds	r7, #36	@ 0x24
 801b3f4:	46bd      	mov	sp, r7
 801b3f6:	bd90      	pop	{r4, r7, pc}
 801b3f8:	0801f01c 	.word	0x0801f01c
 801b3fc:	20001da4 	.word	0x20001da4

0801b400 <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801b400:	b580      	push	{r7, lr}
 801b402:	b082      	sub	sp, #8
 801b404:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801b406:	4b06      	ldr	r3, [pc, #24]	@ (801b420 <UTIL_TIMER_GetCurrentTime+0x20>)
 801b408:	69db      	ldr	r3, [r3, #28]
 801b40a:	4798      	blx	r3
 801b40c:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801b40e:	4b04      	ldr	r3, [pc, #16]	@ (801b420 <UTIL_TIMER_GetCurrentTime+0x20>)
 801b410:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b412:	6878      	ldr	r0, [r7, #4]
 801b414:	4798      	blx	r3
 801b416:	4603      	mov	r3, r0
}
 801b418:	4618      	mov	r0, r3
 801b41a:	3708      	adds	r7, #8
 801b41c:	46bd      	mov	sp, r7
 801b41e:	bd80      	pop	{r7, pc}
 801b420:	0801f01c 	.word	0x0801f01c

0801b424 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801b424:	b580      	push	{r7, lr}
 801b426:	b084      	sub	sp, #16
 801b428:	af00      	add	r7, sp, #0
 801b42a:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801b42c:	4b0a      	ldr	r3, [pc, #40]	@ (801b458 <UTIL_TIMER_GetElapsedTime+0x34>)
 801b42e:	69db      	ldr	r3, [r3, #28]
 801b430:	4798      	blx	r3
 801b432:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801b434:	4b08      	ldr	r3, [pc, #32]	@ (801b458 <UTIL_TIMER_GetElapsedTime+0x34>)
 801b436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b438:	6878      	ldr	r0, [r7, #4]
 801b43a:	4798      	blx	r3
 801b43c:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801b43e:	4b06      	ldr	r3, [pc, #24]	@ (801b458 <UTIL_TIMER_GetElapsedTime+0x34>)
 801b440:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b442:	68f9      	ldr	r1, [r7, #12]
 801b444:	68ba      	ldr	r2, [r7, #8]
 801b446:	1a8a      	subs	r2, r1, r2
 801b448:	4610      	mov	r0, r2
 801b44a:	4798      	blx	r3
 801b44c:	4603      	mov	r3, r0
}
 801b44e:	4618      	mov	r0, r3
 801b450:	3710      	adds	r7, #16
 801b452:	46bd      	mov	sp, r7
 801b454:	bd80      	pop	{r7, pc}
 801b456:	bf00      	nop
 801b458:	0801f01c 	.word	0x0801f01c

0801b45c <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801b45c:	b480      	push	{r7}
 801b45e:	b085      	sub	sp, #20
 801b460:	af00      	add	r7, sp, #0
 801b462:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801b464:	4b0a      	ldr	r3, [pc, #40]	@ (801b490 <TimerExists+0x34>)
 801b466:	681b      	ldr	r3, [r3, #0]
 801b468:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801b46a:	e008      	b.n	801b47e <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801b46c:	68fa      	ldr	r2, [r7, #12]
 801b46e:	687b      	ldr	r3, [r7, #4]
 801b470:	429a      	cmp	r2, r3
 801b472:	d101      	bne.n	801b478 <TimerExists+0x1c>
    {
      return true;
 801b474:	2301      	movs	r3, #1
 801b476:	e006      	b.n	801b486 <TimerExists+0x2a>
    }
    cur = cur->Next;
 801b478:	68fb      	ldr	r3, [r7, #12]
 801b47a:	695b      	ldr	r3, [r3, #20]
 801b47c:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801b47e:	68fb      	ldr	r3, [r7, #12]
 801b480:	2b00      	cmp	r3, #0
 801b482:	d1f3      	bne.n	801b46c <TimerExists+0x10>
  }
  return false;
 801b484:	2300      	movs	r3, #0
}
 801b486:	4618      	mov	r0, r3
 801b488:	3714      	adds	r7, #20
 801b48a:	46bd      	mov	sp, r7
 801b48c:	bc80      	pop	{r7}
 801b48e:	4770      	bx	lr
 801b490:	20001da4 	.word	0x20001da4

0801b494 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801b494:	b590      	push	{r4, r7, lr}
 801b496:	b085      	sub	sp, #20
 801b498:	af00      	add	r7, sp, #0
 801b49a:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801b49c:	4b11      	ldr	r3, [pc, #68]	@ (801b4e4 <TimerSetTimeout+0x50>)
 801b49e:	6a1b      	ldr	r3, [r3, #32]
 801b4a0:	4798      	blx	r3
 801b4a2:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 801b4a4:	687b      	ldr	r3, [r7, #4]
 801b4a6:	2201      	movs	r2, #1
 801b4a8:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801b4aa:	687b      	ldr	r3, [r7, #4]
 801b4ac:	681c      	ldr	r4, [r3, #0]
 801b4ae:	4b0d      	ldr	r3, [pc, #52]	@ (801b4e4 <TimerSetTimeout+0x50>)
 801b4b0:	699b      	ldr	r3, [r3, #24]
 801b4b2:	4798      	blx	r3
 801b4b4:	4602      	mov	r2, r0
 801b4b6:	68fb      	ldr	r3, [r7, #12]
 801b4b8:	4413      	add	r3, r2
 801b4ba:	429c      	cmp	r4, r3
 801b4bc:	d207      	bcs.n	801b4ce <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801b4be:	4b09      	ldr	r3, [pc, #36]	@ (801b4e4 <TimerSetTimeout+0x50>)
 801b4c0:	699b      	ldr	r3, [r3, #24]
 801b4c2:	4798      	blx	r3
 801b4c4:	4602      	mov	r2, r0
 801b4c6:	68fb      	ldr	r3, [r7, #12]
 801b4c8:	441a      	add	r2, r3
 801b4ca:	687b      	ldr	r3, [r7, #4]
 801b4cc:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801b4ce:	4b05      	ldr	r3, [pc, #20]	@ (801b4e4 <TimerSetTimeout+0x50>)
 801b4d0:	689b      	ldr	r3, [r3, #8]
 801b4d2:	687a      	ldr	r2, [r7, #4]
 801b4d4:	6812      	ldr	r2, [r2, #0]
 801b4d6:	4610      	mov	r0, r2
 801b4d8:	4798      	blx	r3
}
 801b4da:	bf00      	nop
 801b4dc:	3714      	adds	r7, #20
 801b4de:	46bd      	mov	sp, r7
 801b4e0:	bd90      	pop	{r4, r7, pc}
 801b4e2:	bf00      	nop
 801b4e4:	0801f01c 	.word	0x0801f01c

0801b4e8 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801b4e8:	b480      	push	{r7}
 801b4ea:	b085      	sub	sp, #20
 801b4ec:	af00      	add	r7, sp, #0
 801b4ee:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801b4f0:	4b14      	ldr	r3, [pc, #80]	@ (801b544 <TimerInsertTimer+0x5c>)
 801b4f2:	681b      	ldr	r3, [r3, #0]
 801b4f4:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801b4f6:	4b13      	ldr	r3, [pc, #76]	@ (801b544 <TimerInsertTimer+0x5c>)
 801b4f8:	681b      	ldr	r3, [r3, #0]
 801b4fa:	695b      	ldr	r3, [r3, #20]
 801b4fc:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801b4fe:	e012      	b.n	801b526 <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801b500:	687b      	ldr	r3, [r7, #4]
 801b502:	681a      	ldr	r2, [r3, #0]
 801b504:	68bb      	ldr	r3, [r7, #8]
 801b506:	681b      	ldr	r3, [r3, #0]
 801b508:	429a      	cmp	r2, r3
 801b50a:	d905      	bls.n	801b518 <TimerInsertTimer+0x30>
    {
        cur = next;
 801b50c:	68bb      	ldr	r3, [r7, #8]
 801b50e:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801b510:	68bb      	ldr	r3, [r7, #8]
 801b512:	695b      	ldr	r3, [r3, #20]
 801b514:	60bb      	str	r3, [r7, #8]
 801b516:	e006      	b.n	801b526 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801b518:	68fb      	ldr	r3, [r7, #12]
 801b51a:	687a      	ldr	r2, [r7, #4]
 801b51c:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801b51e:	687b      	ldr	r3, [r7, #4]
 801b520:	68ba      	ldr	r2, [r7, #8]
 801b522:	615a      	str	r2, [r3, #20]
        return;
 801b524:	e009      	b.n	801b53a <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801b526:	68fb      	ldr	r3, [r7, #12]
 801b528:	695b      	ldr	r3, [r3, #20]
 801b52a:	2b00      	cmp	r3, #0
 801b52c:	d1e8      	bne.n	801b500 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801b52e:	68fb      	ldr	r3, [r7, #12]
 801b530:	687a      	ldr	r2, [r7, #4]
 801b532:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801b534:	687b      	ldr	r3, [r7, #4]
 801b536:	2200      	movs	r2, #0
 801b538:	615a      	str	r2, [r3, #20]
}
 801b53a:	3714      	adds	r7, #20
 801b53c:	46bd      	mov	sp, r7
 801b53e:	bc80      	pop	{r7}
 801b540:	4770      	bx	lr
 801b542:	bf00      	nop
 801b544:	20001da4 	.word	0x20001da4

0801b548 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801b548:	b580      	push	{r7, lr}
 801b54a:	b084      	sub	sp, #16
 801b54c:	af00      	add	r7, sp, #0
 801b54e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801b550:	4b0b      	ldr	r3, [pc, #44]	@ (801b580 <TimerInsertNewHeadTimer+0x38>)
 801b552:	681b      	ldr	r3, [r3, #0]
 801b554:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801b556:	68fb      	ldr	r3, [r7, #12]
 801b558:	2b00      	cmp	r3, #0
 801b55a:	d002      	beq.n	801b562 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801b55c:	68fb      	ldr	r3, [r7, #12]
 801b55e:	2200      	movs	r2, #0
 801b560:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801b562:	687b      	ldr	r3, [r7, #4]
 801b564:	68fa      	ldr	r2, [r7, #12]
 801b566:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801b568:	4a05      	ldr	r2, [pc, #20]	@ (801b580 <TimerInsertNewHeadTimer+0x38>)
 801b56a:	687b      	ldr	r3, [r7, #4]
 801b56c:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 801b56e:	4b04      	ldr	r3, [pc, #16]	@ (801b580 <TimerInsertNewHeadTimer+0x38>)
 801b570:	681b      	ldr	r3, [r3, #0]
 801b572:	4618      	mov	r0, r3
 801b574:	f7ff ff8e 	bl	801b494 <TimerSetTimeout>
}
 801b578:	bf00      	nop
 801b57a:	3710      	adds	r7, #16
 801b57c:	46bd      	mov	sp, r7
 801b57e:	bd80      	pop	{r7, pc}
 801b580:	20001da4 	.word	0x20001da4

0801b584 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801b584:	b580      	push	{r7, lr}
 801b586:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801b588:	2218      	movs	r2, #24
 801b58a:	2100      	movs	r1, #0
 801b58c:	4807      	ldr	r0, [pc, #28]	@ (801b5ac <UTIL_ADV_TRACE_Init+0x28>)
 801b58e:	f7fe fffc 	bl	801a58a <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801b592:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801b596:	2100      	movs	r1, #0
 801b598:	4805      	ldr	r0, [pc, #20]	@ (801b5b0 <UTIL_ADV_TRACE_Init+0x2c>)
 801b59a:	f7fe fff6 	bl	801a58a <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801b59e:	4b05      	ldr	r3, [pc, #20]	@ (801b5b4 <UTIL_ADV_TRACE_Init+0x30>)
 801b5a0:	681b      	ldr	r3, [r3, #0]
 801b5a2:	4805      	ldr	r0, [pc, #20]	@ (801b5b8 <UTIL_ADV_TRACE_Init+0x34>)
 801b5a4:	4798      	blx	r3
 801b5a6:	4603      	mov	r3, r0
}
 801b5a8:	4618      	mov	r0, r3
 801b5aa:	bd80      	pop	{r7, pc}
 801b5ac:	20001da8 	.word	0x20001da8
 801b5b0:	20001dc0 	.word	0x20001dc0
 801b5b4:	0801f05c 	.word	0x0801f05c
 801b5b8:	0801b825 	.word	0x0801b825

0801b5bc <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 801b5bc:	b480      	push	{r7}
 801b5be:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801b5c0:	4b06      	ldr	r3, [pc, #24]	@ (801b5dc <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801b5c2:	8a5a      	ldrh	r2, [r3, #18]
 801b5c4:	4b05      	ldr	r3, [pc, #20]	@ (801b5dc <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801b5c6:	8a1b      	ldrh	r3, [r3, #16]
 801b5c8:	429a      	cmp	r2, r3
 801b5ca:	d101      	bne.n	801b5d0 <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 801b5cc:	2301      	movs	r3, #1
 801b5ce:	e000      	b.n	801b5d2 <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 801b5d0:	2300      	movs	r3, #0
}
 801b5d2:	4618      	mov	r0, r3
 801b5d4:	46bd      	mov	sp, r7
 801b5d6:	bc80      	pop	{r7}
 801b5d8:	4770      	bx	lr
 801b5da:	bf00      	nop
 801b5dc:	20001da8 	.word	0x20001da8

0801b5e0 <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801b5e0:	b408      	push	{r3}
 801b5e2:	b580      	push	{r7, lr}
 801b5e4:	b08d      	sub	sp, #52	@ 0x34
 801b5e6:	af00      	add	r7, sp, #0
 801b5e8:	60f8      	str	r0, [r7, #12]
 801b5ea:	60b9      	str	r1, [r7, #8]
 801b5ec:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801b5ee:	2300      	movs	r3, #0
 801b5f0:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801b5f2:	2300      	movs	r3, #0
 801b5f4:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801b5f6:	4b37      	ldr	r3, [pc, #220]	@ (801b6d4 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801b5f8:	7a1b      	ldrb	r3, [r3, #8]
 801b5fa:	461a      	mov	r2, r3
 801b5fc:	68fb      	ldr	r3, [r7, #12]
 801b5fe:	4293      	cmp	r3, r2
 801b600:	d902      	bls.n	801b608 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801b602:	f06f 0304 	mvn.w	r3, #4
 801b606:	e05e      	b.n	801b6c6 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801b608:	4b32      	ldr	r3, [pc, #200]	@ (801b6d4 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801b60a:	68da      	ldr	r2, [r3, #12]
 801b60c:	68bb      	ldr	r3, [r7, #8]
 801b60e:	4013      	ands	r3, r2
 801b610:	68ba      	ldr	r2, [r7, #8]
 801b612:	429a      	cmp	r2, r3
 801b614:	d002      	beq.n	801b61c <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801b616:	f06f 0305 	mvn.w	r3, #5
 801b61a:	e054      	b.n	801b6c6 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801b61c:	4b2d      	ldr	r3, [pc, #180]	@ (801b6d4 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801b61e:	685b      	ldr	r3, [r3, #4]
 801b620:	2b00      	cmp	r3, #0
 801b622:	d00a      	beq.n	801b63a <UTIL_ADV_TRACE_COND_FSend+0x5a>
 801b624:	687b      	ldr	r3, [r7, #4]
 801b626:	2b00      	cmp	r3, #0
 801b628:	d007      	beq.n	801b63a <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801b62a:	4b2a      	ldr	r3, [pc, #168]	@ (801b6d4 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801b62c:	685b      	ldr	r3, [r3, #4]
 801b62e:	f107 0116 	add.w	r1, r7, #22
 801b632:	f107 0218 	add.w	r2, r7, #24
 801b636:	4610      	mov	r0, r2
 801b638:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801b63a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801b63e:	62bb      	str	r3, [r7, #40]	@ 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801b640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b642:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801b644:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801b648:	4823      	ldr	r0, [pc, #140]	@ (801b6d8 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801b64a:	f7ff fa2b 	bl	801aaa4 <tiny_vsnprintf_like>
 801b64e:	4603      	mov	r3, r0
 801b650:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  TRACE_Lock();
 801b652:	f000 f9f1 	bl	801ba38 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801b656:	8afa      	ldrh	r2, [r7, #22]
 801b658:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801b65a:	4413      	add	r3, r2
 801b65c:	b29b      	uxth	r3, r3
 801b65e:	f107 0214 	add.w	r2, r7, #20
 801b662:	4611      	mov	r1, r2
 801b664:	4618      	mov	r0, r3
 801b666:	f000 f969 	bl	801b93c <TRACE_AllocateBufer>
 801b66a:	4603      	mov	r3, r0
 801b66c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b670:	d025      	beq.n	801b6be <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801b672:	2300      	movs	r3, #0
 801b674:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 801b676:	e00e      	b.n	801b696 <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801b678:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801b67a:	8aba      	ldrh	r2, [r7, #20]
 801b67c:	3330      	adds	r3, #48	@ 0x30
 801b67e:	443b      	add	r3, r7
 801b680:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 801b684:	4b15      	ldr	r3, [pc, #84]	@ (801b6dc <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801b686:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 801b688:	8abb      	ldrh	r3, [r7, #20]
 801b68a:	3301      	adds	r3, #1
 801b68c:	b29b      	uxth	r3, r3
 801b68e:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 801b690:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801b692:	3301      	adds	r3, #1
 801b694:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 801b696:	8afb      	ldrh	r3, [r7, #22]
 801b698:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801b69a:	429a      	cmp	r2, r3
 801b69c:	d3ec      	bcc.n	801b678 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801b69e:	8abb      	ldrh	r3, [r7, #20]
 801b6a0:	461a      	mov	r2, r3
 801b6a2:	4b0e      	ldr	r3, [pc, #56]	@ (801b6dc <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801b6a4:	18d0      	adds	r0, r2, r3
 801b6a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b6a8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801b6aa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801b6ae:	f7ff f9f9 	bl	801aaa4 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801b6b2:	f000 f9df 	bl	801ba74 <TRACE_UnLock>

    return TRACE_Send();
 801b6b6:	f000 f831 	bl	801b71c <TRACE_Send>
 801b6ba:	4603      	mov	r3, r0
 801b6bc:	e003      	b.n	801b6c6 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801b6be:	f000 f9d9 	bl	801ba74 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801b6c2:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801b6c6:	4618      	mov	r0, r3
 801b6c8:	3734      	adds	r7, #52	@ 0x34
 801b6ca:	46bd      	mov	sp, r7
 801b6cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801b6d0:	b001      	add	sp, #4
 801b6d2:	4770      	bx	lr
 801b6d4:	20001da8 	.word	0x20001da8
 801b6d8:	200021c0 	.word	0x200021c0
 801b6dc:	20001dc0 	.word	0x20001dc0

0801b6e0 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801b6e0:	b480      	push	{r7}
 801b6e2:	b083      	sub	sp, #12
 801b6e4:	af00      	add	r7, sp, #0
 801b6e6:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 801b6e8:	4a03      	ldr	r2, [pc, #12]	@ (801b6f8 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801b6ea:	687b      	ldr	r3, [r7, #4]
 801b6ec:	6053      	str	r3, [r2, #4]
}
 801b6ee:	bf00      	nop
 801b6f0:	370c      	adds	r7, #12
 801b6f2:	46bd      	mov	sp, r7
 801b6f4:	bc80      	pop	{r7}
 801b6f6:	4770      	bx	lr
 801b6f8:	20001da8 	.word	0x20001da8

0801b6fc <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801b6fc:	b480      	push	{r7}
 801b6fe:	b083      	sub	sp, #12
 801b700:	af00      	add	r7, sp, #0
 801b702:	4603      	mov	r3, r0
 801b704:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801b706:	4a04      	ldr	r2, [pc, #16]	@ (801b718 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801b708:	79fb      	ldrb	r3, [r7, #7]
 801b70a:	7213      	strb	r3, [r2, #8]
}
 801b70c:	bf00      	nop
 801b70e:	370c      	adds	r7, #12
 801b710:	46bd      	mov	sp, r7
 801b712:	bc80      	pop	{r7}
 801b714:	4770      	bx	lr
 801b716:	bf00      	nop
 801b718:	20001da8 	.word	0x20001da8

0801b71c <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801b71c:	b580      	push	{r7, lr}
 801b71e:	b088      	sub	sp, #32
 801b720:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801b722:	2300      	movs	r3, #0
 801b724:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 801b726:	2300      	movs	r3, #0
 801b728:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b72a:	f3ef 8310 	mrs	r3, PRIMASK
 801b72e:	613b      	str	r3, [r7, #16]
  return(result);
 801b730:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801b732:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b734:	b672      	cpsid	i
}
 801b736:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 801b738:	f000 f9ba 	bl	801bab0 <TRACE_IsLocked>
 801b73c:	4603      	mov	r3, r0
 801b73e:	2b00      	cmp	r3, #0
 801b740:	d15d      	bne.n	801b7fe <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 801b742:	f000 f979 	bl	801ba38 <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801b746:	4b34      	ldr	r3, [pc, #208]	@ (801b818 <TRACE_Send+0xfc>)
 801b748:	8a1a      	ldrh	r2, [r3, #16]
 801b74a:	4b33      	ldr	r3, [pc, #204]	@ (801b818 <TRACE_Send+0xfc>)
 801b74c:	8a5b      	ldrh	r3, [r3, #18]
 801b74e:	429a      	cmp	r2, r3
 801b750:	d04d      	beq.n	801b7ee <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801b752:	4b31      	ldr	r3, [pc, #196]	@ (801b818 <TRACE_Send+0xfc>)
 801b754:	789b      	ldrb	r3, [r3, #2]
 801b756:	2b01      	cmp	r3, #1
 801b758:	d117      	bne.n	801b78a <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801b75a:	4b2f      	ldr	r3, [pc, #188]	@ (801b818 <TRACE_Send+0xfc>)
 801b75c:	881a      	ldrh	r2, [r3, #0]
 801b75e:	4b2e      	ldr	r3, [pc, #184]	@ (801b818 <TRACE_Send+0xfc>)
 801b760:	8a1b      	ldrh	r3, [r3, #16]
 801b762:	1ad3      	subs	r3, r2, r3
 801b764:	b29a      	uxth	r2, r3
 801b766:	4b2c      	ldr	r3, [pc, #176]	@ (801b818 <TRACE_Send+0xfc>)
 801b768:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801b76a:	4b2b      	ldr	r3, [pc, #172]	@ (801b818 <TRACE_Send+0xfc>)
 801b76c:	2202      	movs	r2, #2
 801b76e:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801b770:	4b29      	ldr	r3, [pc, #164]	@ (801b818 <TRACE_Send+0xfc>)
 801b772:	2200      	movs	r2, #0
 801b774:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801b776:	4b28      	ldr	r3, [pc, #160]	@ (801b818 <TRACE_Send+0xfc>)
 801b778:	8a9b      	ldrh	r3, [r3, #20]
 801b77a:	2b00      	cmp	r3, #0
 801b77c:	d105      	bne.n	801b78a <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801b77e:	4b26      	ldr	r3, [pc, #152]	@ (801b818 <TRACE_Send+0xfc>)
 801b780:	2200      	movs	r2, #0
 801b782:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801b784:	4b24      	ldr	r3, [pc, #144]	@ (801b818 <TRACE_Send+0xfc>)
 801b786:	2200      	movs	r2, #0
 801b788:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801b78a:	4b23      	ldr	r3, [pc, #140]	@ (801b818 <TRACE_Send+0xfc>)
 801b78c:	789b      	ldrb	r3, [r3, #2]
 801b78e:	2b00      	cmp	r3, #0
 801b790:	d115      	bne.n	801b7be <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801b792:	4b21      	ldr	r3, [pc, #132]	@ (801b818 <TRACE_Send+0xfc>)
 801b794:	8a5a      	ldrh	r2, [r3, #18]
 801b796:	4b20      	ldr	r3, [pc, #128]	@ (801b818 <TRACE_Send+0xfc>)
 801b798:	8a1b      	ldrh	r3, [r3, #16]
 801b79a:	429a      	cmp	r2, r3
 801b79c:	d908      	bls.n	801b7b0 <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801b79e:	4b1e      	ldr	r3, [pc, #120]	@ (801b818 <TRACE_Send+0xfc>)
 801b7a0:	8a5a      	ldrh	r2, [r3, #18]
 801b7a2:	4b1d      	ldr	r3, [pc, #116]	@ (801b818 <TRACE_Send+0xfc>)
 801b7a4:	8a1b      	ldrh	r3, [r3, #16]
 801b7a6:	1ad3      	subs	r3, r2, r3
 801b7a8:	b29a      	uxth	r2, r3
 801b7aa:	4b1b      	ldr	r3, [pc, #108]	@ (801b818 <TRACE_Send+0xfc>)
 801b7ac:	829a      	strh	r2, [r3, #20]
 801b7ae:	e006      	b.n	801b7be <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801b7b0:	4b19      	ldr	r3, [pc, #100]	@ (801b818 <TRACE_Send+0xfc>)
 801b7b2:	8a1b      	ldrh	r3, [r3, #16]
 801b7b4:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801b7b8:	b29a      	uxth	r2, r3
 801b7ba:	4b17      	ldr	r3, [pc, #92]	@ (801b818 <TRACE_Send+0xfc>)
 801b7bc:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801b7be:	4b16      	ldr	r3, [pc, #88]	@ (801b818 <TRACE_Send+0xfc>)
 801b7c0:	8a1b      	ldrh	r3, [r3, #16]
 801b7c2:	461a      	mov	r2, r3
 801b7c4:	4b15      	ldr	r3, [pc, #84]	@ (801b81c <TRACE_Send+0x100>)
 801b7c6:	4413      	add	r3, r2
 801b7c8:	61bb      	str	r3, [r7, #24]
 801b7ca:	697b      	ldr	r3, [r7, #20]
 801b7cc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b7ce:	68fb      	ldr	r3, [r7, #12]
 801b7d0:	f383 8810 	msr	PRIMASK, r3
}
 801b7d4:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 801b7d6:	f7e6 fcc5 	bl	8002164 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801b7da:	4b11      	ldr	r3, [pc, #68]	@ (801b820 <TRACE_Send+0x104>)
 801b7dc:	68db      	ldr	r3, [r3, #12]
 801b7de:	4a0e      	ldr	r2, [pc, #56]	@ (801b818 <TRACE_Send+0xfc>)
 801b7e0:	8a92      	ldrh	r2, [r2, #20]
 801b7e2:	4611      	mov	r1, r2
 801b7e4:	69b8      	ldr	r0, [r7, #24]
 801b7e6:	4798      	blx	r3
 801b7e8:	4603      	mov	r3, r0
 801b7ea:	77fb      	strb	r3, [r7, #31]
 801b7ec:	e00d      	b.n	801b80a <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 801b7ee:	f000 f941 	bl	801ba74 <TRACE_UnLock>
 801b7f2:	697b      	ldr	r3, [r7, #20]
 801b7f4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b7f6:	68bb      	ldr	r3, [r7, #8]
 801b7f8:	f383 8810 	msr	PRIMASK, r3
}
 801b7fc:	e005      	b.n	801b80a <TRACE_Send+0xee>
 801b7fe:	697b      	ldr	r3, [r7, #20]
 801b800:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b802:	687b      	ldr	r3, [r7, #4]
 801b804:	f383 8810 	msr	PRIMASK, r3
}
 801b808:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 801b80a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801b80e:	4618      	mov	r0, r3
 801b810:	3720      	adds	r7, #32
 801b812:	46bd      	mov	sp, r7
 801b814:	bd80      	pop	{r7, pc}
 801b816:	bf00      	nop
 801b818:	20001da8 	.word	0x20001da8
 801b81c:	20001dc0 	.word	0x20001dc0
 801b820:	0801f05c 	.word	0x0801f05c

0801b824 <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 801b824:	b580      	push	{r7, lr}
 801b826:	b088      	sub	sp, #32
 801b828:	af00      	add	r7, sp, #0
 801b82a:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 801b82c:	2300      	movs	r3, #0
 801b82e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b830:	f3ef 8310 	mrs	r3, PRIMASK
 801b834:	617b      	str	r3, [r7, #20]
  return(result);
 801b836:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801b838:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801b83a:	b672      	cpsid	i
}
 801b83c:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801b83e:	4b3c      	ldr	r3, [pc, #240]	@ (801b930 <TRACE_TxCpltCallback+0x10c>)
 801b840:	789b      	ldrb	r3, [r3, #2]
 801b842:	2b02      	cmp	r3, #2
 801b844:	d106      	bne.n	801b854 <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801b846:	4b3a      	ldr	r3, [pc, #232]	@ (801b930 <TRACE_TxCpltCallback+0x10c>)
 801b848:	2200      	movs	r2, #0
 801b84a:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 801b84c:	4b38      	ldr	r3, [pc, #224]	@ (801b930 <TRACE_TxCpltCallback+0x10c>)
 801b84e:	2200      	movs	r2, #0
 801b850:	821a      	strh	r2, [r3, #16]
 801b852:	e00a      	b.n	801b86a <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801b854:	4b36      	ldr	r3, [pc, #216]	@ (801b930 <TRACE_TxCpltCallback+0x10c>)
 801b856:	8a1a      	ldrh	r2, [r3, #16]
 801b858:	4b35      	ldr	r3, [pc, #212]	@ (801b930 <TRACE_TxCpltCallback+0x10c>)
 801b85a:	8a9b      	ldrh	r3, [r3, #20]
 801b85c:	4413      	add	r3, r2
 801b85e:	b29b      	uxth	r3, r3
 801b860:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801b864:	b29a      	uxth	r2, r3
 801b866:	4b32      	ldr	r3, [pc, #200]	@ (801b930 <TRACE_TxCpltCallback+0x10c>)
 801b868:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801b86a:	4b31      	ldr	r3, [pc, #196]	@ (801b930 <TRACE_TxCpltCallback+0x10c>)
 801b86c:	8a1a      	ldrh	r2, [r3, #16]
 801b86e:	4b30      	ldr	r3, [pc, #192]	@ (801b930 <TRACE_TxCpltCallback+0x10c>)
 801b870:	8a5b      	ldrh	r3, [r3, #18]
 801b872:	429a      	cmp	r2, r3
 801b874:	d04d      	beq.n	801b912 <TRACE_TxCpltCallback+0xee>
 801b876:	4b2e      	ldr	r3, [pc, #184]	@ (801b930 <TRACE_TxCpltCallback+0x10c>)
 801b878:	8adb      	ldrh	r3, [r3, #22]
 801b87a:	2b01      	cmp	r3, #1
 801b87c:	d149      	bne.n	801b912 <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801b87e:	4b2c      	ldr	r3, [pc, #176]	@ (801b930 <TRACE_TxCpltCallback+0x10c>)
 801b880:	789b      	ldrb	r3, [r3, #2]
 801b882:	2b01      	cmp	r3, #1
 801b884:	d117      	bne.n	801b8b6 <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801b886:	4b2a      	ldr	r3, [pc, #168]	@ (801b930 <TRACE_TxCpltCallback+0x10c>)
 801b888:	881a      	ldrh	r2, [r3, #0]
 801b88a:	4b29      	ldr	r3, [pc, #164]	@ (801b930 <TRACE_TxCpltCallback+0x10c>)
 801b88c:	8a1b      	ldrh	r3, [r3, #16]
 801b88e:	1ad3      	subs	r3, r2, r3
 801b890:	b29a      	uxth	r2, r3
 801b892:	4b27      	ldr	r3, [pc, #156]	@ (801b930 <TRACE_TxCpltCallback+0x10c>)
 801b894:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801b896:	4b26      	ldr	r3, [pc, #152]	@ (801b930 <TRACE_TxCpltCallback+0x10c>)
 801b898:	2202      	movs	r2, #2
 801b89a:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 801b89c:	4b24      	ldr	r3, [pc, #144]	@ (801b930 <TRACE_TxCpltCallback+0x10c>)
 801b89e:	2200      	movs	r2, #0
 801b8a0:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801b8a2:	4b23      	ldr	r3, [pc, #140]	@ (801b930 <TRACE_TxCpltCallback+0x10c>)
 801b8a4:	8a9b      	ldrh	r3, [r3, #20]
 801b8a6:	2b00      	cmp	r3, #0
 801b8a8:	d105      	bne.n	801b8b6 <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801b8aa:	4b21      	ldr	r3, [pc, #132]	@ (801b930 <TRACE_TxCpltCallback+0x10c>)
 801b8ac:	2200      	movs	r2, #0
 801b8ae:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801b8b0:	4b1f      	ldr	r3, [pc, #124]	@ (801b930 <TRACE_TxCpltCallback+0x10c>)
 801b8b2:	2200      	movs	r2, #0
 801b8b4:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801b8b6:	4b1e      	ldr	r3, [pc, #120]	@ (801b930 <TRACE_TxCpltCallback+0x10c>)
 801b8b8:	789b      	ldrb	r3, [r3, #2]
 801b8ba:	2b00      	cmp	r3, #0
 801b8bc:	d115      	bne.n	801b8ea <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801b8be:	4b1c      	ldr	r3, [pc, #112]	@ (801b930 <TRACE_TxCpltCallback+0x10c>)
 801b8c0:	8a5a      	ldrh	r2, [r3, #18]
 801b8c2:	4b1b      	ldr	r3, [pc, #108]	@ (801b930 <TRACE_TxCpltCallback+0x10c>)
 801b8c4:	8a1b      	ldrh	r3, [r3, #16]
 801b8c6:	429a      	cmp	r2, r3
 801b8c8:	d908      	bls.n	801b8dc <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801b8ca:	4b19      	ldr	r3, [pc, #100]	@ (801b930 <TRACE_TxCpltCallback+0x10c>)
 801b8cc:	8a5a      	ldrh	r2, [r3, #18]
 801b8ce:	4b18      	ldr	r3, [pc, #96]	@ (801b930 <TRACE_TxCpltCallback+0x10c>)
 801b8d0:	8a1b      	ldrh	r3, [r3, #16]
 801b8d2:	1ad3      	subs	r3, r2, r3
 801b8d4:	b29a      	uxth	r2, r3
 801b8d6:	4b16      	ldr	r3, [pc, #88]	@ (801b930 <TRACE_TxCpltCallback+0x10c>)
 801b8d8:	829a      	strh	r2, [r3, #20]
 801b8da:	e006      	b.n	801b8ea <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801b8dc:	4b14      	ldr	r3, [pc, #80]	@ (801b930 <TRACE_TxCpltCallback+0x10c>)
 801b8de:	8a1b      	ldrh	r3, [r3, #16]
 801b8e0:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801b8e4:	b29a      	uxth	r2, r3
 801b8e6:	4b12      	ldr	r3, [pc, #72]	@ (801b930 <TRACE_TxCpltCallback+0x10c>)
 801b8e8:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801b8ea:	4b11      	ldr	r3, [pc, #68]	@ (801b930 <TRACE_TxCpltCallback+0x10c>)
 801b8ec:	8a1b      	ldrh	r3, [r3, #16]
 801b8ee:	461a      	mov	r2, r3
 801b8f0:	4b10      	ldr	r3, [pc, #64]	@ (801b934 <TRACE_TxCpltCallback+0x110>)
 801b8f2:	4413      	add	r3, r2
 801b8f4:	61fb      	str	r3, [r7, #28]
 801b8f6:	69bb      	ldr	r3, [r7, #24]
 801b8f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b8fa:	693b      	ldr	r3, [r7, #16]
 801b8fc:	f383 8810 	msr	PRIMASK, r3
}
 801b900:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801b902:	4b0d      	ldr	r3, [pc, #52]	@ (801b938 <TRACE_TxCpltCallback+0x114>)
 801b904:	68db      	ldr	r3, [r3, #12]
 801b906:	4a0a      	ldr	r2, [pc, #40]	@ (801b930 <TRACE_TxCpltCallback+0x10c>)
 801b908:	8a92      	ldrh	r2, [r2, #20]
 801b90a:	4611      	mov	r1, r2
 801b90c:	69f8      	ldr	r0, [r7, #28]
 801b90e:	4798      	blx	r3
 801b910:	e00a      	b.n	801b928 <TRACE_TxCpltCallback+0x104>
 801b912:	69bb      	ldr	r3, [r7, #24]
 801b914:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b916:	68fb      	ldr	r3, [r7, #12]
 801b918:	f383 8810 	msr	PRIMASK, r3
}
 801b91c:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 801b91e:	f7e6 fc29 	bl	8002174 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801b922:	f000 f8a7 	bl	801ba74 <TRACE_UnLock>
  }
}
 801b926:	bf00      	nop
 801b928:	bf00      	nop
 801b92a:	3720      	adds	r7, #32
 801b92c:	46bd      	mov	sp, r7
 801b92e:	bd80      	pop	{r7, pc}
 801b930:	20001da8 	.word	0x20001da8
 801b934:	20001dc0 	.word	0x20001dc0
 801b938:	0801f05c 	.word	0x0801f05c

0801b93c <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801b93c:	b480      	push	{r7}
 801b93e:	b087      	sub	sp, #28
 801b940:	af00      	add	r7, sp, #0
 801b942:	4603      	mov	r3, r0
 801b944:	6039      	str	r1, [r7, #0]
 801b946:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 801b948:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801b94c:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b94e:	f3ef 8310 	mrs	r3, PRIMASK
 801b952:	60fb      	str	r3, [r7, #12]
  return(result);
 801b954:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801b956:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801b958:	b672      	cpsid	i
}
 801b95a:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801b95c:	4b35      	ldr	r3, [pc, #212]	@ (801ba34 <TRACE_AllocateBufer+0xf8>)
 801b95e:	8a5a      	ldrh	r2, [r3, #18]
 801b960:	4b34      	ldr	r3, [pc, #208]	@ (801ba34 <TRACE_AllocateBufer+0xf8>)
 801b962:	8a1b      	ldrh	r3, [r3, #16]
 801b964:	429a      	cmp	r2, r3
 801b966:	d11b      	bne.n	801b9a0 <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801b968:	4b32      	ldr	r3, [pc, #200]	@ (801ba34 <TRACE_AllocateBufer+0xf8>)
 801b96a:	8a5b      	ldrh	r3, [r3, #18]
 801b96c:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801b970:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801b972:	88fa      	ldrh	r2, [r7, #6]
 801b974:	8afb      	ldrh	r3, [r7, #22]
 801b976:	429a      	cmp	r2, r3
 801b978:	d33a      	bcc.n	801b9f0 <TRACE_AllocateBufer+0xb4>
 801b97a:	4b2e      	ldr	r3, [pc, #184]	@ (801ba34 <TRACE_AllocateBufer+0xf8>)
 801b97c:	8a1b      	ldrh	r3, [r3, #16]
 801b97e:	88fa      	ldrh	r2, [r7, #6]
 801b980:	429a      	cmp	r2, r3
 801b982:	d235      	bcs.n	801b9f0 <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801b984:	4b2b      	ldr	r3, [pc, #172]	@ (801ba34 <TRACE_AllocateBufer+0xf8>)
 801b986:	2201      	movs	r2, #1
 801b988:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801b98a:	4b2a      	ldr	r3, [pc, #168]	@ (801ba34 <TRACE_AllocateBufer+0xf8>)
 801b98c:	8a5a      	ldrh	r2, [r3, #18]
 801b98e:	4b29      	ldr	r3, [pc, #164]	@ (801ba34 <TRACE_AllocateBufer+0xf8>)
 801b990:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801b992:	4b28      	ldr	r3, [pc, #160]	@ (801ba34 <TRACE_AllocateBufer+0xf8>)
 801b994:	8a1b      	ldrh	r3, [r3, #16]
 801b996:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801b998:	4b26      	ldr	r3, [pc, #152]	@ (801ba34 <TRACE_AllocateBufer+0xf8>)
 801b99a:	2200      	movs	r2, #0
 801b99c:	825a      	strh	r2, [r3, #18]
 801b99e:	e027      	b.n	801b9f0 <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801b9a0:	4b24      	ldr	r3, [pc, #144]	@ (801ba34 <TRACE_AllocateBufer+0xf8>)
 801b9a2:	8a5a      	ldrh	r2, [r3, #18]
 801b9a4:	4b23      	ldr	r3, [pc, #140]	@ (801ba34 <TRACE_AllocateBufer+0xf8>)
 801b9a6:	8a1b      	ldrh	r3, [r3, #16]
 801b9a8:	429a      	cmp	r2, r3
 801b9aa:	d91b      	bls.n	801b9e4 <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801b9ac:	4b21      	ldr	r3, [pc, #132]	@ (801ba34 <TRACE_AllocateBufer+0xf8>)
 801b9ae:	8a5b      	ldrh	r3, [r3, #18]
 801b9b0:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801b9b4:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801b9b6:	88fa      	ldrh	r2, [r7, #6]
 801b9b8:	8afb      	ldrh	r3, [r7, #22]
 801b9ba:	429a      	cmp	r2, r3
 801b9bc:	d318      	bcc.n	801b9f0 <TRACE_AllocateBufer+0xb4>
 801b9be:	4b1d      	ldr	r3, [pc, #116]	@ (801ba34 <TRACE_AllocateBufer+0xf8>)
 801b9c0:	8a1b      	ldrh	r3, [r3, #16]
 801b9c2:	88fa      	ldrh	r2, [r7, #6]
 801b9c4:	429a      	cmp	r2, r3
 801b9c6:	d213      	bcs.n	801b9f0 <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801b9c8:	4b1a      	ldr	r3, [pc, #104]	@ (801ba34 <TRACE_AllocateBufer+0xf8>)
 801b9ca:	2201      	movs	r2, #1
 801b9cc:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801b9ce:	4b19      	ldr	r3, [pc, #100]	@ (801ba34 <TRACE_AllocateBufer+0xf8>)
 801b9d0:	8a5a      	ldrh	r2, [r3, #18]
 801b9d2:	4b18      	ldr	r3, [pc, #96]	@ (801ba34 <TRACE_AllocateBufer+0xf8>)
 801b9d4:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801b9d6:	4b17      	ldr	r3, [pc, #92]	@ (801ba34 <TRACE_AllocateBufer+0xf8>)
 801b9d8:	8a1b      	ldrh	r3, [r3, #16]
 801b9da:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801b9dc:	4b15      	ldr	r3, [pc, #84]	@ (801ba34 <TRACE_AllocateBufer+0xf8>)
 801b9de:	2200      	movs	r2, #0
 801b9e0:	825a      	strh	r2, [r3, #18]
 801b9e2:	e005      	b.n	801b9f0 <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801b9e4:	4b13      	ldr	r3, [pc, #76]	@ (801ba34 <TRACE_AllocateBufer+0xf8>)
 801b9e6:	8a1a      	ldrh	r2, [r3, #16]
 801b9e8:	4b12      	ldr	r3, [pc, #72]	@ (801ba34 <TRACE_AllocateBufer+0xf8>)
 801b9ea:	8a5b      	ldrh	r3, [r3, #18]
 801b9ec:	1ad3      	subs	r3, r2, r3
 801b9ee:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 801b9f0:	8afa      	ldrh	r2, [r7, #22]
 801b9f2:	88fb      	ldrh	r3, [r7, #6]
 801b9f4:	429a      	cmp	r2, r3
 801b9f6:	d90f      	bls.n	801ba18 <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801b9f8:	4b0e      	ldr	r3, [pc, #56]	@ (801ba34 <TRACE_AllocateBufer+0xf8>)
 801b9fa:	8a5a      	ldrh	r2, [r3, #18]
 801b9fc:	683b      	ldr	r3, [r7, #0]
 801b9fe:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801ba00:	4b0c      	ldr	r3, [pc, #48]	@ (801ba34 <TRACE_AllocateBufer+0xf8>)
 801ba02:	8a5a      	ldrh	r2, [r3, #18]
 801ba04:	88fb      	ldrh	r3, [r7, #6]
 801ba06:	4413      	add	r3, r2
 801ba08:	b29b      	uxth	r3, r3
 801ba0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801ba0e:	b29a      	uxth	r2, r3
 801ba10:	4b08      	ldr	r3, [pc, #32]	@ (801ba34 <TRACE_AllocateBufer+0xf8>)
 801ba12:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801ba14:	2300      	movs	r3, #0
 801ba16:	82bb      	strh	r3, [r7, #20]
 801ba18:	693b      	ldr	r3, [r7, #16]
 801ba1a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ba1c:	68bb      	ldr	r3, [r7, #8]
 801ba1e:	f383 8810 	msr	PRIMASK, r3
}
 801ba22:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 801ba24:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 801ba28:	4618      	mov	r0, r3
 801ba2a:	371c      	adds	r7, #28
 801ba2c:	46bd      	mov	sp, r7
 801ba2e:	bc80      	pop	{r7}
 801ba30:	4770      	bx	lr
 801ba32:	bf00      	nop
 801ba34:	20001da8 	.word	0x20001da8

0801ba38 <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 801ba38:	b480      	push	{r7}
 801ba3a:	b085      	sub	sp, #20
 801ba3c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ba3e:	f3ef 8310 	mrs	r3, PRIMASK
 801ba42:	607b      	str	r3, [r7, #4]
  return(result);
 801ba44:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801ba46:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801ba48:	b672      	cpsid	i
}
 801ba4a:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 801ba4c:	4b08      	ldr	r3, [pc, #32]	@ (801ba70 <TRACE_Lock+0x38>)
 801ba4e:	8adb      	ldrh	r3, [r3, #22]
 801ba50:	3301      	adds	r3, #1
 801ba52:	b29a      	uxth	r2, r3
 801ba54:	4b06      	ldr	r3, [pc, #24]	@ (801ba70 <TRACE_Lock+0x38>)
 801ba56:	82da      	strh	r2, [r3, #22]
 801ba58:	68fb      	ldr	r3, [r7, #12]
 801ba5a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ba5c:	68bb      	ldr	r3, [r7, #8]
 801ba5e:	f383 8810 	msr	PRIMASK, r3
}
 801ba62:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801ba64:	bf00      	nop
 801ba66:	3714      	adds	r7, #20
 801ba68:	46bd      	mov	sp, r7
 801ba6a:	bc80      	pop	{r7}
 801ba6c:	4770      	bx	lr
 801ba6e:	bf00      	nop
 801ba70:	20001da8 	.word	0x20001da8

0801ba74 <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 801ba74:	b480      	push	{r7}
 801ba76:	b085      	sub	sp, #20
 801ba78:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ba7a:	f3ef 8310 	mrs	r3, PRIMASK
 801ba7e:	607b      	str	r3, [r7, #4]
  return(result);
 801ba80:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801ba82:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801ba84:	b672      	cpsid	i
}
 801ba86:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 801ba88:	4b08      	ldr	r3, [pc, #32]	@ (801baac <TRACE_UnLock+0x38>)
 801ba8a:	8adb      	ldrh	r3, [r3, #22]
 801ba8c:	3b01      	subs	r3, #1
 801ba8e:	b29a      	uxth	r2, r3
 801ba90:	4b06      	ldr	r3, [pc, #24]	@ (801baac <TRACE_UnLock+0x38>)
 801ba92:	82da      	strh	r2, [r3, #22]
 801ba94:	68fb      	ldr	r3, [r7, #12]
 801ba96:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ba98:	68bb      	ldr	r3, [r7, #8]
 801ba9a:	f383 8810 	msr	PRIMASK, r3
}
 801ba9e:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801baa0:	bf00      	nop
 801baa2:	3714      	adds	r7, #20
 801baa4:	46bd      	mov	sp, r7
 801baa6:	bc80      	pop	{r7}
 801baa8:	4770      	bx	lr
 801baaa:	bf00      	nop
 801baac:	20001da8 	.word	0x20001da8

0801bab0 <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 801bab0:	b480      	push	{r7}
 801bab2:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801bab4:	4b05      	ldr	r3, [pc, #20]	@ (801bacc <TRACE_IsLocked+0x1c>)
 801bab6:	8adb      	ldrh	r3, [r3, #22]
 801bab8:	2b00      	cmp	r3, #0
 801baba:	bf14      	ite	ne
 801babc:	2301      	movne	r3, #1
 801babe:	2300      	moveq	r3, #0
 801bac0:	b2db      	uxtb	r3, r3
}
 801bac2:	4618      	mov	r0, r3
 801bac4:	46bd      	mov	sp, r7
 801bac6:	bc80      	pop	{r7}
 801bac8:	4770      	bx	lr
 801baca:	bf00      	nop
 801bacc:	20001da8 	.word	0x20001da8

0801bad0 <__cvt>:
 801bad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bad4:	b088      	sub	sp, #32
 801bad6:	2b00      	cmp	r3, #0
 801bad8:	461d      	mov	r5, r3
 801bada:	4614      	mov	r4, r2
 801badc:	bfbc      	itt	lt
 801bade:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 801bae2:	4614      	movlt	r4, r2
 801bae4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801bae6:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 801bae8:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 801baec:	bfb6      	itet	lt
 801baee:	461d      	movlt	r5, r3
 801baf0:	2300      	movge	r3, #0
 801baf2:	232d      	movlt	r3, #45	@ 0x2d
 801baf4:	7013      	strb	r3, [r2, #0]
 801baf6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801baf8:	f023 0820 	bic.w	r8, r3, #32
 801bafc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801bb00:	d005      	beq.n	801bb0e <__cvt+0x3e>
 801bb02:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801bb06:	d100      	bne.n	801bb0a <__cvt+0x3a>
 801bb08:	3601      	adds	r6, #1
 801bb0a:	2302      	movs	r3, #2
 801bb0c:	e000      	b.n	801bb10 <__cvt+0x40>
 801bb0e:	2303      	movs	r3, #3
 801bb10:	aa07      	add	r2, sp, #28
 801bb12:	9204      	str	r2, [sp, #16]
 801bb14:	aa06      	add	r2, sp, #24
 801bb16:	e9cd a202 	strd	sl, r2, [sp, #8]
 801bb1a:	e9cd 3600 	strd	r3, r6, [sp]
 801bb1e:	4622      	mov	r2, r4
 801bb20:	462b      	mov	r3, r5
 801bb22:	f000 fe39 	bl	801c798 <_dtoa_r>
 801bb26:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801bb2a:	4607      	mov	r7, r0
 801bb2c:	d119      	bne.n	801bb62 <__cvt+0x92>
 801bb2e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801bb30:	07db      	lsls	r3, r3, #31
 801bb32:	d50e      	bpl.n	801bb52 <__cvt+0x82>
 801bb34:	eb00 0906 	add.w	r9, r0, r6
 801bb38:	2200      	movs	r2, #0
 801bb3a:	2300      	movs	r3, #0
 801bb3c:	4620      	mov	r0, r4
 801bb3e:	4629      	mov	r1, r5
 801bb40:	f7e4 ff9a 	bl	8000a78 <__aeabi_dcmpeq>
 801bb44:	b108      	cbz	r0, 801bb4a <__cvt+0x7a>
 801bb46:	f8cd 901c 	str.w	r9, [sp, #28]
 801bb4a:	2230      	movs	r2, #48	@ 0x30
 801bb4c:	9b07      	ldr	r3, [sp, #28]
 801bb4e:	454b      	cmp	r3, r9
 801bb50:	d31e      	bcc.n	801bb90 <__cvt+0xc0>
 801bb52:	9b07      	ldr	r3, [sp, #28]
 801bb54:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801bb56:	1bdb      	subs	r3, r3, r7
 801bb58:	4638      	mov	r0, r7
 801bb5a:	6013      	str	r3, [r2, #0]
 801bb5c:	b008      	add	sp, #32
 801bb5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bb62:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801bb66:	eb00 0906 	add.w	r9, r0, r6
 801bb6a:	d1e5      	bne.n	801bb38 <__cvt+0x68>
 801bb6c:	7803      	ldrb	r3, [r0, #0]
 801bb6e:	2b30      	cmp	r3, #48	@ 0x30
 801bb70:	d10a      	bne.n	801bb88 <__cvt+0xb8>
 801bb72:	2200      	movs	r2, #0
 801bb74:	2300      	movs	r3, #0
 801bb76:	4620      	mov	r0, r4
 801bb78:	4629      	mov	r1, r5
 801bb7a:	f7e4 ff7d 	bl	8000a78 <__aeabi_dcmpeq>
 801bb7e:	b918      	cbnz	r0, 801bb88 <__cvt+0xb8>
 801bb80:	f1c6 0601 	rsb	r6, r6, #1
 801bb84:	f8ca 6000 	str.w	r6, [sl]
 801bb88:	f8da 3000 	ldr.w	r3, [sl]
 801bb8c:	4499      	add	r9, r3
 801bb8e:	e7d3      	b.n	801bb38 <__cvt+0x68>
 801bb90:	1c59      	adds	r1, r3, #1
 801bb92:	9107      	str	r1, [sp, #28]
 801bb94:	701a      	strb	r2, [r3, #0]
 801bb96:	e7d9      	b.n	801bb4c <__cvt+0x7c>

0801bb98 <__exponent>:
 801bb98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801bb9a:	2900      	cmp	r1, #0
 801bb9c:	bfba      	itte	lt
 801bb9e:	4249      	neglt	r1, r1
 801bba0:	232d      	movlt	r3, #45	@ 0x2d
 801bba2:	232b      	movge	r3, #43	@ 0x2b
 801bba4:	2909      	cmp	r1, #9
 801bba6:	7002      	strb	r2, [r0, #0]
 801bba8:	7043      	strb	r3, [r0, #1]
 801bbaa:	dd29      	ble.n	801bc00 <__exponent+0x68>
 801bbac:	f10d 0307 	add.w	r3, sp, #7
 801bbb0:	461d      	mov	r5, r3
 801bbb2:	270a      	movs	r7, #10
 801bbb4:	461a      	mov	r2, r3
 801bbb6:	fbb1 f6f7 	udiv	r6, r1, r7
 801bbba:	fb07 1416 	mls	r4, r7, r6, r1
 801bbbe:	3430      	adds	r4, #48	@ 0x30
 801bbc0:	f802 4c01 	strb.w	r4, [r2, #-1]
 801bbc4:	460c      	mov	r4, r1
 801bbc6:	2c63      	cmp	r4, #99	@ 0x63
 801bbc8:	f103 33ff 	add.w	r3, r3, #4294967295
 801bbcc:	4631      	mov	r1, r6
 801bbce:	dcf1      	bgt.n	801bbb4 <__exponent+0x1c>
 801bbd0:	3130      	adds	r1, #48	@ 0x30
 801bbd2:	1e94      	subs	r4, r2, #2
 801bbd4:	f803 1c01 	strb.w	r1, [r3, #-1]
 801bbd8:	1c41      	adds	r1, r0, #1
 801bbda:	4623      	mov	r3, r4
 801bbdc:	42ab      	cmp	r3, r5
 801bbde:	d30a      	bcc.n	801bbf6 <__exponent+0x5e>
 801bbe0:	f10d 0309 	add.w	r3, sp, #9
 801bbe4:	1a9b      	subs	r3, r3, r2
 801bbe6:	42ac      	cmp	r4, r5
 801bbe8:	bf88      	it	hi
 801bbea:	2300      	movhi	r3, #0
 801bbec:	3302      	adds	r3, #2
 801bbee:	4403      	add	r3, r0
 801bbf0:	1a18      	subs	r0, r3, r0
 801bbf2:	b003      	add	sp, #12
 801bbf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bbf6:	f813 6b01 	ldrb.w	r6, [r3], #1
 801bbfa:	f801 6f01 	strb.w	r6, [r1, #1]!
 801bbfe:	e7ed      	b.n	801bbdc <__exponent+0x44>
 801bc00:	2330      	movs	r3, #48	@ 0x30
 801bc02:	3130      	adds	r1, #48	@ 0x30
 801bc04:	7083      	strb	r3, [r0, #2]
 801bc06:	70c1      	strb	r1, [r0, #3]
 801bc08:	1d03      	adds	r3, r0, #4
 801bc0a:	e7f1      	b.n	801bbf0 <__exponent+0x58>

0801bc0c <_printf_float>:
 801bc0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc10:	b091      	sub	sp, #68	@ 0x44
 801bc12:	460c      	mov	r4, r1
 801bc14:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 801bc18:	4616      	mov	r6, r2
 801bc1a:	461f      	mov	r7, r3
 801bc1c:	4605      	mov	r5, r0
 801bc1e:	f000 fcbb 	bl	801c598 <_localeconv_r>
 801bc22:	6803      	ldr	r3, [r0, #0]
 801bc24:	9308      	str	r3, [sp, #32]
 801bc26:	4618      	mov	r0, r3
 801bc28:	f7e4 fafa 	bl	8000220 <strlen>
 801bc2c:	2300      	movs	r3, #0
 801bc2e:	930e      	str	r3, [sp, #56]	@ 0x38
 801bc30:	f8d8 3000 	ldr.w	r3, [r8]
 801bc34:	9009      	str	r0, [sp, #36]	@ 0x24
 801bc36:	3307      	adds	r3, #7
 801bc38:	f023 0307 	bic.w	r3, r3, #7
 801bc3c:	f103 0208 	add.w	r2, r3, #8
 801bc40:	f894 a018 	ldrb.w	sl, [r4, #24]
 801bc44:	f8d4 b000 	ldr.w	fp, [r4]
 801bc48:	f8c8 2000 	str.w	r2, [r8]
 801bc4c:	e9d3 8900 	ldrd	r8, r9, [r3]
 801bc50:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801bc54:	930b      	str	r3, [sp, #44]	@ 0x2c
 801bc56:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 801bc5a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801bc5e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801bc62:	4b9d      	ldr	r3, [pc, #628]	@ (801bed8 <_printf_float+0x2cc>)
 801bc64:	f04f 32ff 	mov.w	r2, #4294967295
 801bc68:	f7e4 ff38 	bl	8000adc <__aeabi_dcmpun>
 801bc6c:	bb70      	cbnz	r0, 801bccc <_printf_float+0xc0>
 801bc6e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801bc72:	4b99      	ldr	r3, [pc, #612]	@ (801bed8 <_printf_float+0x2cc>)
 801bc74:	f04f 32ff 	mov.w	r2, #4294967295
 801bc78:	f7e4 ff12 	bl	8000aa0 <__aeabi_dcmple>
 801bc7c:	bb30      	cbnz	r0, 801bccc <_printf_float+0xc0>
 801bc7e:	2200      	movs	r2, #0
 801bc80:	2300      	movs	r3, #0
 801bc82:	4640      	mov	r0, r8
 801bc84:	4649      	mov	r1, r9
 801bc86:	f7e4 ff01 	bl	8000a8c <__aeabi_dcmplt>
 801bc8a:	b110      	cbz	r0, 801bc92 <_printf_float+0x86>
 801bc8c:	232d      	movs	r3, #45	@ 0x2d
 801bc8e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801bc92:	4a92      	ldr	r2, [pc, #584]	@ (801bedc <_printf_float+0x2d0>)
 801bc94:	4b92      	ldr	r3, [pc, #584]	@ (801bee0 <_printf_float+0x2d4>)
 801bc96:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801bc9a:	bf8c      	ite	hi
 801bc9c:	4690      	movhi	r8, r2
 801bc9e:	4698      	movls	r8, r3
 801bca0:	2303      	movs	r3, #3
 801bca2:	6123      	str	r3, [r4, #16]
 801bca4:	f02b 0304 	bic.w	r3, fp, #4
 801bca8:	6023      	str	r3, [r4, #0]
 801bcaa:	f04f 0900 	mov.w	r9, #0
 801bcae:	9700      	str	r7, [sp, #0]
 801bcb0:	4633      	mov	r3, r6
 801bcb2:	aa0f      	add	r2, sp, #60	@ 0x3c
 801bcb4:	4621      	mov	r1, r4
 801bcb6:	4628      	mov	r0, r5
 801bcb8:	f000 f9d4 	bl	801c064 <_printf_common>
 801bcbc:	3001      	adds	r0, #1
 801bcbe:	f040 808f 	bne.w	801bde0 <_printf_float+0x1d4>
 801bcc2:	f04f 30ff 	mov.w	r0, #4294967295
 801bcc6:	b011      	add	sp, #68	@ 0x44
 801bcc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bccc:	4642      	mov	r2, r8
 801bcce:	464b      	mov	r3, r9
 801bcd0:	4640      	mov	r0, r8
 801bcd2:	4649      	mov	r1, r9
 801bcd4:	f7e4 ff02 	bl	8000adc <__aeabi_dcmpun>
 801bcd8:	b140      	cbz	r0, 801bcec <_printf_float+0xe0>
 801bcda:	464b      	mov	r3, r9
 801bcdc:	2b00      	cmp	r3, #0
 801bcde:	bfbc      	itt	lt
 801bce0:	232d      	movlt	r3, #45	@ 0x2d
 801bce2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801bce6:	4a7f      	ldr	r2, [pc, #508]	@ (801bee4 <_printf_float+0x2d8>)
 801bce8:	4b7f      	ldr	r3, [pc, #508]	@ (801bee8 <_printf_float+0x2dc>)
 801bcea:	e7d4      	b.n	801bc96 <_printf_float+0x8a>
 801bcec:	6863      	ldr	r3, [r4, #4]
 801bcee:	1c5a      	adds	r2, r3, #1
 801bcf0:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 801bcf4:	d13f      	bne.n	801bd76 <_printf_float+0x16a>
 801bcf6:	2306      	movs	r3, #6
 801bcf8:	6063      	str	r3, [r4, #4]
 801bcfa:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 801bcfe:	2200      	movs	r2, #0
 801bd00:	6023      	str	r3, [r4, #0]
 801bd02:	9206      	str	r2, [sp, #24]
 801bd04:	aa0e      	add	r2, sp, #56	@ 0x38
 801bd06:	e9cd a204 	strd	sl, r2, [sp, #16]
 801bd0a:	aa0d      	add	r2, sp, #52	@ 0x34
 801bd0c:	9203      	str	r2, [sp, #12]
 801bd0e:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 801bd12:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801bd16:	6863      	ldr	r3, [r4, #4]
 801bd18:	9300      	str	r3, [sp, #0]
 801bd1a:	4642      	mov	r2, r8
 801bd1c:	464b      	mov	r3, r9
 801bd1e:	4628      	mov	r0, r5
 801bd20:	910a      	str	r1, [sp, #40]	@ 0x28
 801bd22:	f7ff fed5 	bl	801bad0 <__cvt>
 801bd26:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801bd28:	2947      	cmp	r1, #71	@ 0x47
 801bd2a:	4680      	mov	r8, r0
 801bd2c:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801bd2e:	d128      	bne.n	801bd82 <_printf_float+0x176>
 801bd30:	1cc8      	adds	r0, r1, #3
 801bd32:	db02      	blt.n	801bd3a <_printf_float+0x12e>
 801bd34:	6863      	ldr	r3, [r4, #4]
 801bd36:	4299      	cmp	r1, r3
 801bd38:	dd40      	ble.n	801bdbc <_printf_float+0x1b0>
 801bd3a:	f1aa 0a02 	sub.w	sl, sl, #2
 801bd3e:	fa5f fa8a 	uxtb.w	sl, sl
 801bd42:	3901      	subs	r1, #1
 801bd44:	4652      	mov	r2, sl
 801bd46:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801bd4a:	910d      	str	r1, [sp, #52]	@ 0x34
 801bd4c:	f7ff ff24 	bl	801bb98 <__exponent>
 801bd50:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801bd52:	1813      	adds	r3, r2, r0
 801bd54:	2a01      	cmp	r2, #1
 801bd56:	4681      	mov	r9, r0
 801bd58:	6123      	str	r3, [r4, #16]
 801bd5a:	dc02      	bgt.n	801bd62 <_printf_float+0x156>
 801bd5c:	6822      	ldr	r2, [r4, #0]
 801bd5e:	07d2      	lsls	r2, r2, #31
 801bd60:	d501      	bpl.n	801bd66 <_printf_float+0x15a>
 801bd62:	3301      	adds	r3, #1
 801bd64:	6123      	str	r3, [r4, #16]
 801bd66:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 801bd6a:	2b00      	cmp	r3, #0
 801bd6c:	d09f      	beq.n	801bcae <_printf_float+0xa2>
 801bd6e:	232d      	movs	r3, #45	@ 0x2d
 801bd70:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801bd74:	e79b      	b.n	801bcae <_printf_float+0xa2>
 801bd76:	2947      	cmp	r1, #71	@ 0x47
 801bd78:	d1bf      	bne.n	801bcfa <_printf_float+0xee>
 801bd7a:	2b00      	cmp	r3, #0
 801bd7c:	d1bd      	bne.n	801bcfa <_printf_float+0xee>
 801bd7e:	2301      	movs	r3, #1
 801bd80:	e7ba      	b.n	801bcf8 <_printf_float+0xec>
 801bd82:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801bd86:	d9dc      	bls.n	801bd42 <_printf_float+0x136>
 801bd88:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801bd8c:	d118      	bne.n	801bdc0 <_printf_float+0x1b4>
 801bd8e:	2900      	cmp	r1, #0
 801bd90:	6863      	ldr	r3, [r4, #4]
 801bd92:	dd0b      	ble.n	801bdac <_printf_float+0x1a0>
 801bd94:	6121      	str	r1, [r4, #16]
 801bd96:	b913      	cbnz	r3, 801bd9e <_printf_float+0x192>
 801bd98:	6822      	ldr	r2, [r4, #0]
 801bd9a:	07d0      	lsls	r0, r2, #31
 801bd9c:	d502      	bpl.n	801bda4 <_printf_float+0x198>
 801bd9e:	3301      	adds	r3, #1
 801bda0:	440b      	add	r3, r1
 801bda2:	6123      	str	r3, [r4, #16]
 801bda4:	65a1      	str	r1, [r4, #88]	@ 0x58
 801bda6:	f04f 0900 	mov.w	r9, #0
 801bdaa:	e7dc      	b.n	801bd66 <_printf_float+0x15a>
 801bdac:	b913      	cbnz	r3, 801bdb4 <_printf_float+0x1a8>
 801bdae:	6822      	ldr	r2, [r4, #0]
 801bdb0:	07d2      	lsls	r2, r2, #31
 801bdb2:	d501      	bpl.n	801bdb8 <_printf_float+0x1ac>
 801bdb4:	3302      	adds	r3, #2
 801bdb6:	e7f4      	b.n	801bda2 <_printf_float+0x196>
 801bdb8:	2301      	movs	r3, #1
 801bdba:	e7f2      	b.n	801bda2 <_printf_float+0x196>
 801bdbc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801bdc0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801bdc2:	4299      	cmp	r1, r3
 801bdc4:	db05      	blt.n	801bdd2 <_printf_float+0x1c6>
 801bdc6:	6823      	ldr	r3, [r4, #0]
 801bdc8:	6121      	str	r1, [r4, #16]
 801bdca:	07d8      	lsls	r0, r3, #31
 801bdcc:	d5ea      	bpl.n	801bda4 <_printf_float+0x198>
 801bdce:	1c4b      	adds	r3, r1, #1
 801bdd0:	e7e7      	b.n	801bda2 <_printf_float+0x196>
 801bdd2:	2900      	cmp	r1, #0
 801bdd4:	bfd4      	ite	le
 801bdd6:	f1c1 0202 	rsble	r2, r1, #2
 801bdda:	2201      	movgt	r2, #1
 801bddc:	4413      	add	r3, r2
 801bdde:	e7e0      	b.n	801bda2 <_printf_float+0x196>
 801bde0:	6823      	ldr	r3, [r4, #0]
 801bde2:	055a      	lsls	r2, r3, #21
 801bde4:	d407      	bmi.n	801bdf6 <_printf_float+0x1ea>
 801bde6:	6923      	ldr	r3, [r4, #16]
 801bde8:	4642      	mov	r2, r8
 801bdea:	4631      	mov	r1, r6
 801bdec:	4628      	mov	r0, r5
 801bdee:	47b8      	blx	r7
 801bdf0:	3001      	adds	r0, #1
 801bdf2:	d12b      	bne.n	801be4c <_printf_float+0x240>
 801bdf4:	e765      	b.n	801bcc2 <_printf_float+0xb6>
 801bdf6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801bdfa:	f240 80dd 	bls.w	801bfb8 <_printf_float+0x3ac>
 801bdfe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801be02:	2200      	movs	r2, #0
 801be04:	2300      	movs	r3, #0
 801be06:	f7e4 fe37 	bl	8000a78 <__aeabi_dcmpeq>
 801be0a:	2800      	cmp	r0, #0
 801be0c:	d033      	beq.n	801be76 <_printf_float+0x26a>
 801be0e:	4a37      	ldr	r2, [pc, #220]	@ (801beec <_printf_float+0x2e0>)
 801be10:	2301      	movs	r3, #1
 801be12:	4631      	mov	r1, r6
 801be14:	4628      	mov	r0, r5
 801be16:	47b8      	blx	r7
 801be18:	3001      	adds	r0, #1
 801be1a:	f43f af52 	beq.w	801bcc2 <_printf_float+0xb6>
 801be1e:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 801be22:	4543      	cmp	r3, r8
 801be24:	db02      	blt.n	801be2c <_printf_float+0x220>
 801be26:	6823      	ldr	r3, [r4, #0]
 801be28:	07d8      	lsls	r0, r3, #31
 801be2a:	d50f      	bpl.n	801be4c <_printf_float+0x240>
 801be2c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801be30:	4631      	mov	r1, r6
 801be32:	4628      	mov	r0, r5
 801be34:	47b8      	blx	r7
 801be36:	3001      	adds	r0, #1
 801be38:	f43f af43 	beq.w	801bcc2 <_printf_float+0xb6>
 801be3c:	f04f 0900 	mov.w	r9, #0
 801be40:	f108 38ff 	add.w	r8, r8, #4294967295
 801be44:	f104 0a1a 	add.w	sl, r4, #26
 801be48:	45c8      	cmp	r8, r9
 801be4a:	dc09      	bgt.n	801be60 <_printf_float+0x254>
 801be4c:	6823      	ldr	r3, [r4, #0]
 801be4e:	079b      	lsls	r3, r3, #30
 801be50:	f100 8103 	bmi.w	801c05a <_printf_float+0x44e>
 801be54:	68e0      	ldr	r0, [r4, #12]
 801be56:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801be58:	4298      	cmp	r0, r3
 801be5a:	bfb8      	it	lt
 801be5c:	4618      	movlt	r0, r3
 801be5e:	e732      	b.n	801bcc6 <_printf_float+0xba>
 801be60:	2301      	movs	r3, #1
 801be62:	4652      	mov	r2, sl
 801be64:	4631      	mov	r1, r6
 801be66:	4628      	mov	r0, r5
 801be68:	47b8      	blx	r7
 801be6a:	3001      	adds	r0, #1
 801be6c:	f43f af29 	beq.w	801bcc2 <_printf_float+0xb6>
 801be70:	f109 0901 	add.w	r9, r9, #1
 801be74:	e7e8      	b.n	801be48 <_printf_float+0x23c>
 801be76:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801be78:	2b00      	cmp	r3, #0
 801be7a:	dc39      	bgt.n	801bef0 <_printf_float+0x2e4>
 801be7c:	4a1b      	ldr	r2, [pc, #108]	@ (801beec <_printf_float+0x2e0>)
 801be7e:	2301      	movs	r3, #1
 801be80:	4631      	mov	r1, r6
 801be82:	4628      	mov	r0, r5
 801be84:	47b8      	blx	r7
 801be86:	3001      	adds	r0, #1
 801be88:	f43f af1b 	beq.w	801bcc2 <_printf_float+0xb6>
 801be8c:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 801be90:	ea59 0303 	orrs.w	r3, r9, r3
 801be94:	d102      	bne.n	801be9c <_printf_float+0x290>
 801be96:	6823      	ldr	r3, [r4, #0]
 801be98:	07d9      	lsls	r1, r3, #31
 801be9a:	d5d7      	bpl.n	801be4c <_printf_float+0x240>
 801be9c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801bea0:	4631      	mov	r1, r6
 801bea2:	4628      	mov	r0, r5
 801bea4:	47b8      	blx	r7
 801bea6:	3001      	adds	r0, #1
 801bea8:	f43f af0b 	beq.w	801bcc2 <_printf_float+0xb6>
 801beac:	f04f 0a00 	mov.w	sl, #0
 801beb0:	f104 0b1a 	add.w	fp, r4, #26
 801beb4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801beb6:	425b      	negs	r3, r3
 801beb8:	4553      	cmp	r3, sl
 801beba:	dc01      	bgt.n	801bec0 <_printf_float+0x2b4>
 801bebc:	464b      	mov	r3, r9
 801bebe:	e793      	b.n	801bde8 <_printf_float+0x1dc>
 801bec0:	2301      	movs	r3, #1
 801bec2:	465a      	mov	r2, fp
 801bec4:	4631      	mov	r1, r6
 801bec6:	4628      	mov	r0, r5
 801bec8:	47b8      	blx	r7
 801beca:	3001      	adds	r0, #1
 801becc:	f43f aef9 	beq.w	801bcc2 <_printf_float+0xb6>
 801bed0:	f10a 0a01 	add.w	sl, sl, #1
 801bed4:	e7ee      	b.n	801beb4 <_printf_float+0x2a8>
 801bed6:	bf00      	nop
 801bed8:	7fefffff 	.word	0x7fefffff
 801bedc:	0801f5b0 	.word	0x0801f5b0
 801bee0:	0801f5ac 	.word	0x0801f5ac
 801bee4:	0801f5b8 	.word	0x0801f5b8
 801bee8:	0801f5b4 	.word	0x0801f5b4
 801beec:	0801f5bc 	.word	0x0801f5bc
 801bef0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801bef2:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 801bef6:	4553      	cmp	r3, sl
 801bef8:	bfa8      	it	ge
 801befa:	4653      	movge	r3, sl
 801befc:	2b00      	cmp	r3, #0
 801befe:	4699      	mov	r9, r3
 801bf00:	dc36      	bgt.n	801bf70 <_printf_float+0x364>
 801bf02:	f04f 0b00 	mov.w	fp, #0
 801bf06:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801bf0a:	f104 021a 	add.w	r2, r4, #26
 801bf0e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801bf10:	930a      	str	r3, [sp, #40]	@ 0x28
 801bf12:	eba3 0309 	sub.w	r3, r3, r9
 801bf16:	455b      	cmp	r3, fp
 801bf18:	dc31      	bgt.n	801bf7e <_printf_float+0x372>
 801bf1a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801bf1c:	459a      	cmp	sl, r3
 801bf1e:	dc3a      	bgt.n	801bf96 <_printf_float+0x38a>
 801bf20:	6823      	ldr	r3, [r4, #0]
 801bf22:	07da      	lsls	r2, r3, #31
 801bf24:	d437      	bmi.n	801bf96 <_printf_float+0x38a>
 801bf26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801bf28:	ebaa 0903 	sub.w	r9, sl, r3
 801bf2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801bf2e:	ebaa 0303 	sub.w	r3, sl, r3
 801bf32:	4599      	cmp	r9, r3
 801bf34:	bfa8      	it	ge
 801bf36:	4699      	movge	r9, r3
 801bf38:	f1b9 0f00 	cmp.w	r9, #0
 801bf3c:	dc33      	bgt.n	801bfa6 <_printf_float+0x39a>
 801bf3e:	f04f 0800 	mov.w	r8, #0
 801bf42:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801bf46:	f104 0b1a 	add.w	fp, r4, #26
 801bf4a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801bf4c:	ebaa 0303 	sub.w	r3, sl, r3
 801bf50:	eba3 0309 	sub.w	r3, r3, r9
 801bf54:	4543      	cmp	r3, r8
 801bf56:	f77f af79 	ble.w	801be4c <_printf_float+0x240>
 801bf5a:	2301      	movs	r3, #1
 801bf5c:	465a      	mov	r2, fp
 801bf5e:	4631      	mov	r1, r6
 801bf60:	4628      	mov	r0, r5
 801bf62:	47b8      	blx	r7
 801bf64:	3001      	adds	r0, #1
 801bf66:	f43f aeac 	beq.w	801bcc2 <_printf_float+0xb6>
 801bf6a:	f108 0801 	add.w	r8, r8, #1
 801bf6e:	e7ec      	b.n	801bf4a <_printf_float+0x33e>
 801bf70:	4642      	mov	r2, r8
 801bf72:	4631      	mov	r1, r6
 801bf74:	4628      	mov	r0, r5
 801bf76:	47b8      	blx	r7
 801bf78:	3001      	adds	r0, #1
 801bf7a:	d1c2      	bne.n	801bf02 <_printf_float+0x2f6>
 801bf7c:	e6a1      	b.n	801bcc2 <_printf_float+0xb6>
 801bf7e:	2301      	movs	r3, #1
 801bf80:	4631      	mov	r1, r6
 801bf82:	4628      	mov	r0, r5
 801bf84:	920a      	str	r2, [sp, #40]	@ 0x28
 801bf86:	47b8      	blx	r7
 801bf88:	3001      	adds	r0, #1
 801bf8a:	f43f ae9a 	beq.w	801bcc2 <_printf_float+0xb6>
 801bf8e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801bf90:	f10b 0b01 	add.w	fp, fp, #1
 801bf94:	e7bb      	b.n	801bf0e <_printf_float+0x302>
 801bf96:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801bf9a:	4631      	mov	r1, r6
 801bf9c:	4628      	mov	r0, r5
 801bf9e:	47b8      	blx	r7
 801bfa0:	3001      	adds	r0, #1
 801bfa2:	d1c0      	bne.n	801bf26 <_printf_float+0x31a>
 801bfa4:	e68d      	b.n	801bcc2 <_printf_float+0xb6>
 801bfa6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801bfa8:	464b      	mov	r3, r9
 801bfaa:	4442      	add	r2, r8
 801bfac:	4631      	mov	r1, r6
 801bfae:	4628      	mov	r0, r5
 801bfb0:	47b8      	blx	r7
 801bfb2:	3001      	adds	r0, #1
 801bfb4:	d1c3      	bne.n	801bf3e <_printf_float+0x332>
 801bfb6:	e684      	b.n	801bcc2 <_printf_float+0xb6>
 801bfb8:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 801bfbc:	f1ba 0f01 	cmp.w	sl, #1
 801bfc0:	dc01      	bgt.n	801bfc6 <_printf_float+0x3ba>
 801bfc2:	07db      	lsls	r3, r3, #31
 801bfc4:	d536      	bpl.n	801c034 <_printf_float+0x428>
 801bfc6:	2301      	movs	r3, #1
 801bfc8:	4642      	mov	r2, r8
 801bfca:	4631      	mov	r1, r6
 801bfcc:	4628      	mov	r0, r5
 801bfce:	47b8      	blx	r7
 801bfd0:	3001      	adds	r0, #1
 801bfd2:	f43f ae76 	beq.w	801bcc2 <_printf_float+0xb6>
 801bfd6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801bfda:	4631      	mov	r1, r6
 801bfdc:	4628      	mov	r0, r5
 801bfde:	47b8      	blx	r7
 801bfe0:	3001      	adds	r0, #1
 801bfe2:	f43f ae6e 	beq.w	801bcc2 <_printf_float+0xb6>
 801bfe6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801bfea:	2200      	movs	r2, #0
 801bfec:	2300      	movs	r3, #0
 801bfee:	f10a 3aff 	add.w	sl, sl, #4294967295
 801bff2:	f7e4 fd41 	bl	8000a78 <__aeabi_dcmpeq>
 801bff6:	b9c0      	cbnz	r0, 801c02a <_printf_float+0x41e>
 801bff8:	4653      	mov	r3, sl
 801bffa:	f108 0201 	add.w	r2, r8, #1
 801bffe:	4631      	mov	r1, r6
 801c000:	4628      	mov	r0, r5
 801c002:	47b8      	blx	r7
 801c004:	3001      	adds	r0, #1
 801c006:	d10c      	bne.n	801c022 <_printf_float+0x416>
 801c008:	e65b      	b.n	801bcc2 <_printf_float+0xb6>
 801c00a:	2301      	movs	r3, #1
 801c00c:	465a      	mov	r2, fp
 801c00e:	4631      	mov	r1, r6
 801c010:	4628      	mov	r0, r5
 801c012:	47b8      	blx	r7
 801c014:	3001      	adds	r0, #1
 801c016:	f43f ae54 	beq.w	801bcc2 <_printf_float+0xb6>
 801c01a:	f108 0801 	add.w	r8, r8, #1
 801c01e:	45d0      	cmp	r8, sl
 801c020:	dbf3      	blt.n	801c00a <_printf_float+0x3fe>
 801c022:	464b      	mov	r3, r9
 801c024:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801c028:	e6df      	b.n	801bdea <_printf_float+0x1de>
 801c02a:	f04f 0800 	mov.w	r8, #0
 801c02e:	f104 0b1a 	add.w	fp, r4, #26
 801c032:	e7f4      	b.n	801c01e <_printf_float+0x412>
 801c034:	2301      	movs	r3, #1
 801c036:	4642      	mov	r2, r8
 801c038:	e7e1      	b.n	801bffe <_printf_float+0x3f2>
 801c03a:	2301      	movs	r3, #1
 801c03c:	464a      	mov	r2, r9
 801c03e:	4631      	mov	r1, r6
 801c040:	4628      	mov	r0, r5
 801c042:	47b8      	blx	r7
 801c044:	3001      	adds	r0, #1
 801c046:	f43f ae3c 	beq.w	801bcc2 <_printf_float+0xb6>
 801c04a:	f108 0801 	add.w	r8, r8, #1
 801c04e:	68e3      	ldr	r3, [r4, #12]
 801c050:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801c052:	1a5b      	subs	r3, r3, r1
 801c054:	4543      	cmp	r3, r8
 801c056:	dcf0      	bgt.n	801c03a <_printf_float+0x42e>
 801c058:	e6fc      	b.n	801be54 <_printf_float+0x248>
 801c05a:	f04f 0800 	mov.w	r8, #0
 801c05e:	f104 0919 	add.w	r9, r4, #25
 801c062:	e7f4      	b.n	801c04e <_printf_float+0x442>

0801c064 <_printf_common>:
 801c064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c068:	4616      	mov	r6, r2
 801c06a:	4698      	mov	r8, r3
 801c06c:	688a      	ldr	r2, [r1, #8]
 801c06e:	690b      	ldr	r3, [r1, #16]
 801c070:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801c074:	4293      	cmp	r3, r2
 801c076:	bfb8      	it	lt
 801c078:	4613      	movlt	r3, r2
 801c07a:	6033      	str	r3, [r6, #0]
 801c07c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801c080:	4607      	mov	r7, r0
 801c082:	460c      	mov	r4, r1
 801c084:	b10a      	cbz	r2, 801c08a <_printf_common+0x26>
 801c086:	3301      	adds	r3, #1
 801c088:	6033      	str	r3, [r6, #0]
 801c08a:	6823      	ldr	r3, [r4, #0]
 801c08c:	0699      	lsls	r1, r3, #26
 801c08e:	bf42      	ittt	mi
 801c090:	6833      	ldrmi	r3, [r6, #0]
 801c092:	3302      	addmi	r3, #2
 801c094:	6033      	strmi	r3, [r6, #0]
 801c096:	6825      	ldr	r5, [r4, #0]
 801c098:	f015 0506 	ands.w	r5, r5, #6
 801c09c:	d106      	bne.n	801c0ac <_printf_common+0x48>
 801c09e:	f104 0a19 	add.w	sl, r4, #25
 801c0a2:	68e3      	ldr	r3, [r4, #12]
 801c0a4:	6832      	ldr	r2, [r6, #0]
 801c0a6:	1a9b      	subs	r3, r3, r2
 801c0a8:	42ab      	cmp	r3, r5
 801c0aa:	dc26      	bgt.n	801c0fa <_printf_common+0x96>
 801c0ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801c0b0:	6822      	ldr	r2, [r4, #0]
 801c0b2:	3b00      	subs	r3, #0
 801c0b4:	bf18      	it	ne
 801c0b6:	2301      	movne	r3, #1
 801c0b8:	0692      	lsls	r2, r2, #26
 801c0ba:	d42b      	bmi.n	801c114 <_printf_common+0xb0>
 801c0bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801c0c0:	4641      	mov	r1, r8
 801c0c2:	4638      	mov	r0, r7
 801c0c4:	47c8      	blx	r9
 801c0c6:	3001      	adds	r0, #1
 801c0c8:	d01e      	beq.n	801c108 <_printf_common+0xa4>
 801c0ca:	6823      	ldr	r3, [r4, #0]
 801c0cc:	6922      	ldr	r2, [r4, #16]
 801c0ce:	f003 0306 	and.w	r3, r3, #6
 801c0d2:	2b04      	cmp	r3, #4
 801c0d4:	bf02      	ittt	eq
 801c0d6:	68e5      	ldreq	r5, [r4, #12]
 801c0d8:	6833      	ldreq	r3, [r6, #0]
 801c0da:	1aed      	subeq	r5, r5, r3
 801c0dc:	68a3      	ldr	r3, [r4, #8]
 801c0de:	bf0c      	ite	eq
 801c0e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801c0e4:	2500      	movne	r5, #0
 801c0e6:	4293      	cmp	r3, r2
 801c0e8:	bfc4      	itt	gt
 801c0ea:	1a9b      	subgt	r3, r3, r2
 801c0ec:	18ed      	addgt	r5, r5, r3
 801c0ee:	2600      	movs	r6, #0
 801c0f0:	341a      	adds	r4, #26
 801c0f2:	42b5      	cmp	r5, r6
 801c0f4:	d11a      	bne.n	801c12c <_printf_common+0xc8>
 801c0f6:	2000      	movs	r0, #0
 801c0f8:	e008      	b.n	801c10c <_printf_common+0xa8>
 801c0fa:	2301      	movs	r3, #1
 801c0fc:	4652      	mov	r2, sl
 801c0fe:	4641      	mov	r1, r8
 801c100:	4638      	mov	r0, r7
 801c102:	47c8      	blx	r9
 801c104:	3001      	adds	r0, #1
 801c106:	d103      	bne.n	801c110 <_printf_common+0xac>
 801c108:	f04f 30ff 	mov.w	r0, #4294967295
 801c10c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c110:	3501      	adds	r5, #1
 801c112:	e7c6      	b.n	801c0a2 <_printf_common+0x3e>
 801c114:	18e1      	adds	r1, r4, r3
 801c116:	1c5a      	adds	r2, r3, #1
 801c118:	2030      	movs	r0, #48	@ 0x30
 801c11a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801c11e:	4422      	add	r2, r4
 801c120:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801c124:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801c128:	3302      	adds	r3, #2
 801c12a:	e7c7      	b.n	801c0bc <_printf_common+0x58>
 801c12c:	2301      	movs	r3, #1
 801c12e:	4622      	mov	r2, r4
 801c130:	4641      	mov	r1, r8
 801c132:	4638      	mov	r0, r7
 801c134:	47c8      	blx	r9
 801c136:	3001      	adds	r0, #1
 801c138:	d0e6      	beq.n	801c108 <_printf_common+0xa4>
 801c13a:	3601      	adds	r6, #1
 801c13c:	e7d9      	b.n	801c0f2 <_printf_common+0x8e>
	...

0801c140 <_printf_i>:
 801c140:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c144:	7e0f      	ldrb	r7, [r1, #24]
 801c146:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801c148:	2f78      	cmp	r7, #120	@ 0x78
 801c14a:	4691      	mov	r9, r2
 801c14c:	4680      	mov	r8, r0
 801c14e:	460c      	mov	r4, r1
 801c150:	469a      	mov	sl, r3
 801c152:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801c156:	d807      	bhi.n	801c168 <_printf_i+0x28>
 801c158:	2f62      	cmp	r7, #98	@ 0x62
 801c15a:	d80a      	bhi.n	801c172 <_printf_i+0x32>
 801c15c:	2f00      	cmp	r7, #0
 801c15e:	f000 80d1 	beq.w	801c304 <_printf_i+0x1c4>
 801c162:	2f58      	cmp	r7, #88	@ 0x58
 801c164:	f000 80b8 	beq.w	801c2d8 <_printf_i+0x198>
 801c168:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801c16c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801c170:	e03a      	b.n	801c1e8 <_printf_i+0xa8>
 801c172:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801c176:	2b15      	cmp	r3, #21
 801c178:	d8f6      	bhi.n	801c168 <_printf_i+0x28>
 801c17a:	a101      	add	r1, pc, #4	@ (adr r1, 801c180 <_printf_i+0x40>)
 801c17c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801c180:	0801c1d9 	.word	0x0801c1d9
 801c184:	0801c1ed 	.word	0x0801c1ed
 801c188:	0801c169 	.word	0x0801c169
 801c18c:	0801c169 	.word	0x0801c169
 801c190:	0801c169 	.word	0x0801c169
 801c194:	0801c169 	.word	0x0801c169
 801c198:	0801c1ed 	.word	0x0801c1ed
 801c19c:	0801c169 	.word	0x0801c169
 801c1a0:	0801c169 	.word	0x0801c169
 801c1a4:	0801c169 	.word	0x0801c169
 801c1a8:	0801c169 	.word	0x0801c169
 801c1ac:	0801c2eb 	.word	0x0801c2eb
 801c1b0:	0801c217 	.word	0x0801c217
 801c1b4:	0801c2a5 	.word	0x0801c2a5
 801c1b8:	0801c169 	.word	0x0801c169
 801c1bc:	0801c169 	.word	0x0801c169
 801c1c0:	0801c30d 	.word	0x0801c30d
 801c1c4:	0801c169 	.word	0x0801c169
 801c1c8:	0801c217 	.word	0x0801c217
 801c1cc:	0801c169 	.word	0x0801c169
 801c1d0:	0801c169 	.word	0x0801c169
 801c1d4:	0801c2ad 	.word	0x0801c2ad
 801c1d8:	6833      	ldr	r3, [r6, #0]
 801c1da:	1d1a      	adds	r2, r3, #4
 801c1dc:	681b      	ldr	r3, [r3, #0]
 801c1de:	6032      	str	r2, [r6, #0]
 801c1e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801c1e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801c1e8:	2301      	movs	r3, #1
 801c1ea:	e09c      	b.n	801c326 <_printf_i+0x1e6>
 801c1ec:	6833      	ldr	r3, [r6, #0]
 801c1ee:	6820      	ldr	r0, [r4, #0]
 801c1f0:	1d19      	adds	r1, r3, #4
 801c1f2:	6031      	str	r1, [r6, #0]
 801c1f4:	0606      	lsls	r6, r0, #24
 801c1f6:	d501      	bpl.n	801c1fc <_printf_i+0xbc>
 801c1f8:	681d      	ldr	r5, [r3, #0]
 801c1fa:	e003      	b.n	801c204 <_printf_i+0xc4>
 801c1fc:	0645      	lsls	r5, r0, #25
 801c1fe:	d5fb      	bpl.n	801c1f8 <_printf_i+0xb8>
 801c200:	f9b3 5000 	ldrsh.w	r5, [r3]
 801c204:	2d00      	cmp	r5, #0
 801c206:	da03      	bge.n	801c210 <_printf_i+0xd0>
 801c208:	232d      	movs	r3, #45	@ 0x2d
 801c20a:	426d      	negs	r5, r5
 801c20c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801c210:	4858      	ldr	r0, [pc, #352]	@ (801c374 <_printf_i+0x234>)
 801c212:	230a      	movs	r3, #10
 801c214:	e011      	b.n	801c23a <_printf_i+0xfa>
 801c216:	6821      	ldr	r1, [r4, #0]
 801c218:	6833      	ldr	r3, [r6, #0]
 801c21a:	0608      	lsls	r0, r1, #24
 801c21c:	f853 5b04 	ldr.w	r5, [r3], #4
 801c220:	d402      	bmi.n	801c228 <_printf_i+0xe8>
 801c222:	0649      	lsls	r1, r1, #25
 801c224:	bf48      	it	mi
 801c226:	b2ad      	uxthmi	r5, r5
 801c228:	2f6f      	cmp	r7, #111	@ 0x6f
 801c22a:	4852      	ldr	r0, [pc, #328]	@ (801c374 <_printf_i+0x234>)
 801c22c:	6033      	str	r3, [r6, #0]
 801c22e:	bf14      	ite	ne
 801c230:	230a      	movne	r3, #10
 801c232:	2308      	moveq	r3, #8
 801c234:	2100      	movs	r1, #0
 801c236:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801c23a:	6866      	ldr	r6, [r4, #4]
 801c23c:	60a6      	str	r6, [r4, #8]
 801c23e:	2e00      	cmp	r6, #0
 801c240:	db05      	blt.n	801c24e <_printf_i+0x10e>
 801c242:	6821      	ldr	r1, [r4, #0]
 801c244:	432e      	orrs	r6, r5
 801c246:	f021 0104 	bic.w	r1, r1, #4
 801c24a:	6021      	str	r1, [r4, #0]
 801c24c:	d04b      	beq.n	801c2e6 <_printf_i+0x1a6>
 801c24e:	4616      	mov	r6, r2
 801c250:	fbb5 f1f3 	udiv	r1, r5, r3
 801c254:	fb03 5711 	mls	r7, r3, r1, r5
 801c258:	5dc7      	ldrb	r7, [r0, r7]
 801c25a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801c25e:	462f      	mov	r7, r5
 801c260:	42bb      	cmp	r3, r7
 801c262:	460d      	mov	r5, r1
 801c264:	d9f4      	bls.n	801c250 <_printf_i+0x110>
 801c266:	2b08      	cmp	r3, #8
 801c268:	d10b      	bne.n	801c282 <_printf_i+0x142>
 801c26a:	6823      	ldr	r3, [r4, #0]
 801c26c:	07df      	lsls	r7, r3, #31
 801c26e:	d508      	bpl.n	801c282 <_printf_i+0x142>
 801c270:	6923      	ldr	r3, [r4, #16]
 801c272:	6861      	ldr	r1, [r4, #4]
 801c274:	4299      	cmp	r1, r3
 801c276:	bfde      	ittt	le
 801c278:	2330      	movle	r3, #48	@ 0x30
 801c27a:	f806 3c01 	strble.w	r3, [r6, #-1]
 801c27e:	f106 36ff 	addle.w	r6, r6, #4294967295
 801c282:	1b92      	subs	r2, r2, r6
 801c284:	6122      	str	r2, [r4, #16]
 801c286:	f8cd a000 	str.w	sl, [sp]
 801c28a:	464b      	mov	r3, r9
 801c28c:	aa03      	add	r2, sp, #12
 801c28e:	4621      	mov	r1, r4
 801c290:	4640      	mov	r0, r8
 801c292:	f7ff fee7 	bl	801c064 <_printf_common>
 801c296:	3001      	adds	r0, #1
 801c298:	d14a      	bne.n	801c330 <_printf_i+0x1f0>
 801c29a:	f04f 30ff 	mov.w	r0, #4294967295
 801c29e:	b004      	add	sp, #16
 801c2a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c2a4:	6823      	ldr	r3, [r4, #0]
 801c2a6:	f043 0320 	orr.w	r3, r3, #32
 801c2aa:	6023      	str	r3, [r4, #0]
 801c2ac:	4832      	ldr	r0, [pc, #200]	@ (801c378 <_printf_i+0x238>)
 801c2ae:	2778      	movs	r7, #120	@ 0x78
 801c2b0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801c2b4:	6823      	ldr	r3, [r4, #0]
 801c2b6:	6831      	ldr	r1, [r6, #0]
 801c2b8:	061f      	lsls	r7, r3, #24
 801c2ba:	f851 5b04 	ldr.w	r5, [r1], #4
 801c2be:	d402      	bmi.n	801c2c6 <_printf_i+0x186>
 801c2c0:	065f      	lsls	r7, r3, #25
 801c2c2:	bf48      	it	mi
 801c2c4:	b2ad      	uxthmi	r5, r5
 801c2c6:	6031      	str	r1, [r6, #0]
 801c2c8:	07d9      	lsls	r1, r3, #31
 801c2ca:	bf44      	itt	mi
 801c2cc:	f043 0320 	orrmi.w	r3, r3, #32
 801c2d0:	6023      	strmi	r3, [r4, #0]
 801c2d2:	b11d      	cbz	r5, 801c2dc <_printf_i+0x19c>
 801c2d4:	2310      	movs	r3, #16
 801c2d6:	e7ad      	b.n	801c234 <_printf_i+0xf4>
 801c2d8:	4826      	ldr	r0, [pc, #152]	@ (801c374 <_printf_i+0x234>)
 801c2da:	e7e9      	b.n	801c2b0 <_printf_i+0x170>
 801c2dc:	6823      	ldr	r3, [r4, #0]
 801c2de:	f023 0320 	bic.w	r3, r3, #32
 801c2e2:	6023      	str	r3, [r4, #0]
 801c2e4:	e7f6      	b.n	801c2d4 <_printf_i+0x194>
 801c2e6:	4616      	mov	r6, r2
 801c2e8:	e7bd      	b.n	801c266 <_printf_i+0x126>
 801c2ea:	6833      	ldr	r3, [r6, #0]
 801c2ec:	6825      	ldr	r5, [r4, #0]
 801c2ee:	6961      	ldr	r1, [r4, #20]
 801c2f0:	1d18      	adds	r0, r3, #4
 801c2f2:	6030      	str	r0, [r6, #0]
 801c2f4:	062e      	lsls	r6, r5, #24
 801c2f6:	681b      	ldr	r3, [r3, #0]
 801c2f8:	d501      	bpl.n	801c2fe <_printf_i+0x1be>
 801c2fa:	6019      	str	r1, [r3, #0]
 801c2fc:	e002      	b.n	801c304 <_printf_i+0x1c4>
 801c2fe:	0668      	lsls	r0, r5, #25
 801c300:	d5fb      	bpl.n	801c2fa <_printf_i+0x1ba>
 801c302:	8019      	strh	r1, [r3, #0]
 801c304:	2300      	movs	r3, #0
 801c306:	6123      	str	r3, [r4, #16]
 801c308:	4616      	mov	r6, r2
 801c30a:	e7bc      	b.n	801c286 <_printf_i+0x146>
 801c30c:	6833      	ldr	r3, [r6, #0]
 801c30e:	1d1a      	adds	r2, r3, #4
 801c310:	6032      	str	r2, [r6, #0]
 801c312:	681e      	ldr	r6, [r3, #0]
 801c314:	6862      	ldr	r2, [r4, #4]
 801c316:	2100      	movs	r1, #0
 801c318:	4630      	mov	r0, r6
 801c31a:	f7e3 ff31 	bl	8000180 <memchr>
 801c31e:	b108      	cbz	r0, 801c324 <_printf_i+0x1e4>
 801c320:	1b80      	subs	r0, r0, r6
 801c322:	6060      	str	r0, [r4, #4]
 801c324:	6863      	ldr	r3, [r4, #4]
 801c326:	6123      	str	r3, [r4, #16]
 801c328:	2300      	movs	r3, #0
 801c32a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801c32e:	e7aa      	b.n	801c286 <_printf_i+0x146>
 801c330:	6923      	ldr	r3, [r4, #16]
 801c332:	4632      	mov	r2, r6
 801c334:	4649      	mov	r1, r9
 801c336:	4640      	mov	r0, r8
 801c338:	47d0      	blx	sl
 801c33a:	3001      	adds	r0, #1
 801c33c:	d0ad      	beq.n	801c29a <_printf_i+0x15a>
 801c33e:	6823      	ldr	r3, [r4, #0]
 801c340:	079b      	lsls	r3, r3, #30
 801c342:	d413      	bmi.n	801c36c <_printf_i+0x22c>
 801c344:	68e0      	ldr	r0, [r4, #12]
 801c346:	9b03      	ldr	r3, [sp, #12]
 801c348:	4298      	cmp	r0, r3
 801c34a:	bfb8      	it	lt
 801c34c:	4618      	movlt	r0, r3
 801c34e:	e7a6      	b.n	801c29e <_printf_i+0x15e>
 801c350:	2301      	movs	r3, #1
 801c352:	4632      	mov	r2, r6
 801c354:	4649      	mov	r1, r9
 801c356:	4640      	mov	r0, r8
 801c358:	47d0      	blx	sl
 801c35a:	3001      	adds	r0, #1
 801c35c:	d09d      	beq.n	801c29a <_printf_i+0x15a>
 801c35e:	3501      	adds	r5, #1
 801c360:	68e3      	ldr	r3, [r4, #12]
 801c362:	9903      	ldr	r1, [sp, #12]
 801c364:	1a5b      	subs	r3, r3, r1
 801c366:	42ab      	cmp	r3, r5
 801c368:	dcf2      	bgt.n	801c350 <_printf_i+0x210>
 801c36a:	e7eb      	b.n	801c344 <_printf_i+0x204>
 801c36c:	2500      	movs	r5, #0
 801c36e:	f104 0619 	add.w	r6, r4, #25
 801c372:	e7f5      	b.n	801c360 <_printf_i+0x220>
 801c374:	0801f5be 	.word	0x0801f5be
 801c378:	0801f5cf 	.word	0x0801f5cf

0801c37c <std>:
 801c37c:	2300      	movs	r3, #0
 801c37e:	b510      	push	{r4, lr}
 801c380:	4604      	mov	r4, r0
 801c382:	e9c0 3300 	strd	r3, r3, [r0]
 801c386:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801c38a:	6083      	str	r3, [r0, #8]
 801c38c:	8181      	strh	r1, [r0, #12]
 801c38e:	6643      	str	r3, [r0, #100]	@ 0x64
 801c390:	81c2      	strh	r2, [r0, #14]
 801c392:	6183      	str	r3, [r0, #24]
 801c394:	4619      	mov	r1, r3
 801c396:	2208      	movs	r2, #8
 801c398:	305c      	adds	r0, #92	@ 0x5c
 801c39a:	f000 f8f4 	bl	801c586 <memset>
 801c39e:	4b0d      	ldr	r3, [pc, #52]	@ (801c3d4 <std+0x58>)
 801c3a0:	6263      	str	r3, [r4, #36]	@ 0x24
 801c3a2:	4b0d      	ldr	r3, [pc, #52]	@ (801c3d8 <std+0x5c>)
 801c3a4:	62a3      	str	r3, [r4, #40]	@ 0x28
 801c3a6:	4b0d      	ldr	r3, [pc, #52]	@ (801c3dc <std+0x60>)
 801c3a8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801c3aa:	4b0d      	ldr	r3, [pc, #52]	@ (801c3e0 <std+0x64>)
 801c3ac:	6323      	str	r3, [r4, #48]	@ 0x30
 801c3ae:	4b0d      	ldr	r3, [pc, #52]	@ (801c3e4 <std+0x68>)
 801c3b0:	6224      	str	r4, [r4, #32]
 801c3b2:	429c      	cmp	r4, r3
 801c3b4:	d006      	beq.n	801c3c4 <std+0x48>
 801c3b6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801c3ba:	4294      	cmp	r4, r2
 801c3bc:	d002      	beq.n	801c3c4 <std+0x48>
 801c3be:	33d0      	adds	r3, #208	@ 0xd0
 801c3c0:	429c      	cmp	r4, r3
 801c3c2:	d105      	bne.n	801c3d0 <std+0x54>
 801c3c4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801c3c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c3cc:	f000 b958 	b.w	801c680 <__retarget_lock_init_recursive>
 801c3d0:	bd10      	pop	{r4, pc}
 801c3d2:	bf00      	nop
 801c3d4:	0801c501 	.word	0x0801c501
 801c3d8:	0801c523 	.word	0x0801c523
 801c3dc:	0801c55b 	.word	0x0801c55b
 801c3e0:	0801c57f 	.word	0x0801c57f
 801c3e4:	200023c0 	.word	0x200023c0

0801c3e8 <stdio_exit_handler>:
 801c3e8:	4a02      	ldr	r2, [pc, #8]	@ (801c3f4 <stdio_exit_handler+0xc>)
 801c3ea:	4903      	ldr	r1, [pc, #12]	@ (801c3f8 <stdio_exit_handler+0x10>)
 801c3ec:	4803      	ldr	r0, [pc, #12]	@ (801c3fc <stdio_exit_handler+0x14>)
 801c3ee:	f000 b869 	b.w	801c4c4 <_fwalk_sglue>
 801c3f2:	bf00      	nop
 801c3f4:	20000140 	.word	0x20000140
 801c3f8:	0801dd29 	.word	0x0801dd29
 801c3fc:	20000150 	.word	0x20000150

0801c400 <cleanup_stdio>:
 801c400:	6841      	ldr	r1, [r0, #4]
 801c402:	4b0c      	ldr	r3, [pc, #48]	@ (801c434 <cleanup_stdio+0x34>)
 801c404:	4299      	cmp	r1, r3
 801c406:	b510      	push	{r4, lr}
 801c408:	4604      	mov	r4, r0
 801c40a:	d001      	beq.n	801c410 <cleanup_stdio+0x10>
 801c40c:	f001 fc8c 	bl	801dd28 <_fflush_r>
 801c410:	68a1      	ldr	r1, [r4, #8]
 801c412:	4b09      	ldr	r3, [pc, #36]	@ (801c438 <cleanup_stdio+0x38>)
 801c414:	4299      	cmp	r1, r3
 801c416:	d002      	beq.n	801c41e <cleanup_stdio+0x1e>
 801c418:	4620      	mov	r0, r4
 801c41a:	f001 fc85 	bl	801dd28 <_fflush_r>
 801c41e:	68e1      	ldr	r1, [r4, #12]
 801c420:	4b06      	ldr	r3, [pc, #24]	@ (801c43c <cleanup_stdio+0x3c>)
 801c422:	4299      	cmp	r1, r3
 801c424:	d004      	beq.n	801c430 <cleanup_stdio+0x30>
 801c426:	4620      	mov	r0, r4
 801c428:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c42c:	f001 bc7c 	b.w	801dd28 <_fflush_r>
 801c430:	bd10      	pop	{r4, pc}
 801c432:	bf00      	nop
 801c434:	200023c0 	.word	0x200023c0
 801c438:	20002428 	.word	0x20002428
 801c43c:	20002490 	.word	0x20002490

0801c440 <global_stdio_init.part.0>:
 801c440:	b510      	push	{r4, lr}
 801c442:	4b0b      	ldr	r3, [pc, #44]	@ (801c470 <global_stdio_init.part.0+0x30>)
 801c444:	4c0b      	ldr	r4, [pc, #44]	@ (801c474 <global_stdio_init.part.0+0x34>)
 801c446:	4a0c      	ldr	r2, [pc, #48]	@ (801c478 <global_stdio_init.part.0+0x38>)
 801c448:	601a      	str	r2, [r3, #0]
 801c44a:	4620      	mov	r0, r4
 801c44c:	2200      	movs	r2, #0
 801c44e:	2104      	movs	r1, #4
 801c450:	f7ff ff94 	bl	801c37c <std>
 801c454:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801c458:	2201      	movs	r2, #1
 801c45a:	2109      	movs	r1, #9
 801c45c:	f7ff ff8e 	bl	801c37c <std>
 801c460:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801c464:	2202      	movs	r2, #2
 801c466:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c46a:	2112      	movs	r1, #18
 801c46c:	f7ff bf86 	b.w	801c37c <std>
 801c470:	200024f8 	.word	0x200024f8
 801c474:	200023c0 	.word	0x200023c0
 801c478:	0801c3e9 	.word	0x0801c3e9

0801c47c <__sfp_lock_acquire>:
 801c47c:	4801      	ldr	r0, [pc, #4]	@ (801c484 <__sfp_lock_acquire+0x8>)
 801c47e:	f000 b900 	b.w	801c682 <__retarget_lock_acquire_recursive>
 801c482:	bf00      	nop
 801c484:	20002501 	.word	0x20002501

0801c488 <__sfp_lock_release>:
 801c488:	4801      	ldr	r0, [pc, #4]	@ (801c490 <__sfp_lock_release+0x8>)
 801c48a:	f000 b8fb 	b.w	801c684 <__retarget_lock_release_recursive>
 801c48e:	bf00      	nop
 801c490:	20002501 	.word	0x20002501

0801c494 <__sinit>:
 801c494:	b510      	push	{r4, lr}
 801c496:	4604      	mov	r4, r0
 801c498:	f7ff fff0 	bl	801c47c <__sfp_lock_acquire>
 801c49c:	6a23      	ldr	r3, [r4, #32]
 801c49e:	b11b      	cbz	r3, 801c4a8 <__sinit+0x14>
 801c4a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c4a4:	f7ff bff0 	b.w	801c488 <__sfp_lock_release>
 801c4a8:	4b04      	ldr	r3, [pc, #16]	@ (801c4bc <__sinit+0x28>)
 801c4aa:	6223      	str	r3, [r4, #32]
 801c4ac:	4b04      	ldr	r3, [pc, #16]	@ (801c4c0 <__sinit+0x2c>)
 801c4ae:	681b      	ldr	r3, [r3, #0]
 801c4b0:	2b00      	cmp	r3, #0
 801c4b2:	d1f5      	bne.n	801c4a0 <__sinit+0xc>
 801c4b4:	f7ff ffc4 	bl	801c440 <global_stdio_init.part.0>
 801c4b8:	e7f2      	b.n	801c4a0 <__sinit+0xc>
 801c4ba:	bf00      	nop
 801c4bc:	0801c401 	.word	0x0801c401
 801c4c0:	200024f8 	.word	0x200024f8

0801c4c4 <_fwalk_sglue>:
 801c4c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c4c8:	4607      	mov	r7, r0
 801c4ca:	4688      	mov	r8, r1
 801c4cc:	4614      	mov	r4, r2
 801c4ce:	2600      	movs	r6, #0
 801c4d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801c4d4:	f1b9 0901 	subs.w	r9, r9, #1
 801c4d8:	d505      	bpl.n	801c4e6 <_fwalk_sglue+0x22>
 801c4da:	6824      	ldr	r4, [r4, #0]
 801c4dc:	2c00      	cmp	r4, #0
 801c4de:	d1f7      	bne.n	801c4d0 <_fwalk_sglue+0xc>
 801c4e0:	4630      	mov	r0, r6
 801c4e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c4e6:	89ab      	ldrh	r3, [r5, #12]
 801c4e8:	2b01      	cmp	r3, #1
 801c4ea:	d907      	bls.n	801c4fc <_fwalk_sglue+0x38>
 801c4ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801c4f0:	3301      	adds	r3, #1
 801c4f2:	d003      	beq.n	801c4fc <_fwalk_sglue+0x38>
 801c4f4:	4629      	mov	r1, r5
 801c4f6:	4638      	mov	r0, r7
 801c4f8:	47c0      	blx	r8
 801c4fa:	4306      	orrs	r6, r0
 801c4fc:	3568      	adds	r5, #104	@ 0x68
 801c4fe:	e7e9      	b.n	801c4d4 <_fwalk_sglue+0x10>

0801c500 <__sread>:
 801c500:	b510      	push	{r4, lr}
 801c502:	460c      	mov	r4, r1
 801c504:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c508:	f000 f86c 	bl	801c5e4 <_read_r>
 801c50c:	2800      	cmp	r0, #0
 801c50e:	bfab      	itete	ge
 801c510:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801c512:	89a3      	ldrhlt	r3, [r4, #12]
 801c514:	181b      	addge	r3, r3, r0
 801c516:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801c51a:	bfac      	ite	ge
 801c51c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801c51e:	81a3      	strhlt	r3, [r4, #12]
 801c520:	bd10      	pop	{r4, pc}

0801c522 <__swrite>:
 801c522:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c526:	461f      	mov	r7, r3
 801c528:	898b      	ldrh	r3, [r1, #12]
 801c52a:	05db      	lsls	r3, r3, #23
 801c52c:	4605      	mov	r5, r0
 801c52e:	460c      	mov	r4, r1
 801c530:	4616      	mov	r6, r2
 801c532:	d505      	bpl.n	801c540 <__swrite+0x1e>
 801c534:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c538:	2302      	movs	r3, #2
 801c53a:	2200      	movs	r2, #0
 801c53c:	f000 f840 	bl	801c5c0 <_lseek_r>
 801c540:	89a3      	ldrh	r3, [r4, #12]
 801c542:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c546:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801c54a:	81a3      	strh	r3, [r4, #12]
 801c54c:	4632      	mov	r2, r6
 801c54e:	463b      	mov	r3, r7
 801c550:	4628      	mov	r0, r5
 801c552:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c556:	f000 b857 	b.w	801c608 <_write_r>

0801c55a <__sseek>:
 801c55a:	b510      	push	{r4, lr}
 801c55c:	460c      	mov	r4, r1
 801c55e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c562:	f000 f82d 	bl	801c5c0 <_lseek_r>
 801c566:	1c43      	adds	r3, r0, #1
 801c568:	89a3      	ldrh	r3, [r4, #12]
 801c56a:	bf15      	itete	ne
 801c56c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801c56e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801c572:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801c576:	81a3      	strheq	r3, [r4, #12]
 801c578:	bf18      	it	ne
 801c57a:	81a3      	strhne	r3, [r4, #12]
 801c57c:	bd10      	pop	{r4, pc}

0801c57e <__sclose>:
 801c57e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c582:	f000 b80d 	b.w	801c5a0 <_close_r>

0801c586 <memset>:
 801c586:	4402      	add	r2, r0
 801c588:	4603      	mov	r3, r0
 801c58a:	4293      	cmp	r3, r2
 801c58c:	d100      	bne.n	801c590 <memset+0xa>
 801c58e:	4770      	bx	lr
 801c590:	f803 1b01 	strb.w	r1, [r3], #1
 801c594:	e7f9      	b.n	801c58a <memset+0x4>
	...

0801c598 <_localeconv_r>:
 801c598:	4800      	ldr	r0, [pc, #0]	@ (801c59c <_localeconv_r+0x4>)
 801c59a:	4770      	bx	lr
 801c59c:	2000028c 	.word	0x2000028c

0801c5a0 <_close_r>:
 801c5a0:	b538      	push	{r3, r4, r5, lr}
 801c5a2:	4d06      	ldr	r5, [pc, #24]	@ (801c5bc <_close_r+0x1c>)
 801c5a4:	2300      	movs	r3, #0
 801c5a6:	4604      	mov	r4, r0
 801c5a8:	4608      	mov	r0, r1
 801c5aa:	602b      	str	r3, [r5, #0]
 801c5ac:	f7e5 ff2e 	bl	800240c <_close>
 801c5b0:	1c43      	adds	r3, r0, #1
 801c5b2:	d102      	bne.n	801c5ba <_close_r+0x1a>
 801c5b4:	682b      	ldr	r3, [r5, #0]
 801c5b6:	b103      	cbz	r3, 801c5ba <_close_r+0x1a>
 801c5b8:	6023      	str	r3, [r4, #0]
 801c5ba:	bd38      	pop	{r3, r4, r5, pc}
 801c5bc:	200024fc 	.word	0x200024fc

0801c5c0 <_lseek_r>:
 801c5c0:	b538      	push	{r3, r4, r5, lr}
 801c5c2:	4d07      	ldr	r5, [pc, #28]	@ (801c5e0 <_lseek_r+0x20>)
 801c5c4:	4604      	mov	r4, r0
 801c5c6:	4608      	mov	r0, r1
 801c5c8:	4611      	mov	r1, r2
 801c5ca:	2200      	movs	r2, #0
 801c5cc:	602a      	str	r2, [r5, #0]
 801c5ce:	461a      	mov	r2, r3
 801c5d0:	f7e5 ff40 	bl	8002454 <_lseek>
 801c5d4:	1c43      	adds	r3, r0, #1
 801c5d6:	d102      	bne.n	801c5de <_lseek_r+0x1e>
 801c5d8:	682b      	ldr	r3, [r5, #0]
 801c5da:	b103      	cbz	r3, 801c5de <_lseek_r+0x1e>
 801c5dc:	6023      	str	r3, [r4, #0]
 801c5de:	bd38      	pop	{r3, r4, r5, pc}
 801c5e0:	200024fc 	.word	0x200024fc

0801c5e4 <_read_r>:
 801c5e4:	b538      	push	{r3, r4, r5, lr}
 801c5e6:	4d07      	ldr	r5, [pc, #28]	@ (801c604 <_read_r+0x20>)
 801c5e8:	4604      	mov	r4, r0
 801c5ea:	4608      	mov	r0, r1
 801c5ec:	4611      	mov	r1, r2
 801c5ee:	2200      	movs	r2, #0
 801c5f0:	602a      	str	r2, [r5, #0]
 801c5f2:	461a      	mov	r2, r3
 801c5f4:	f7e5 fed1 	bl	800239a <_read>
 801c5f8:	1c43      	adds	r3, r0, #1
 801c5fa:	d102      	bne.n	801c602 <_read_r+0x1e>
 801c5fc:	682b      	ldr	r3, [r5, #0]
 801c5fe:	b103      	cbz	r3, 801c602 <_read_r+0x1e>
 801c600:	6023      	str	r3, [r4, #0]
 801c602:	bd38      	pop	{r3, r4, r5, pc}
 801c604:	200024fc 	.word	0x200024fc

0801c608 <_write_r>:
 801c608:	b538      	push	{r3, r4, r5, lr}
 801c60a:	4d07      	ldr	r5, [pc, #28]	@ (801c628 <_write_r+0x20>)
 801c60c:	4604      	mov	r4, r0
 801c60e:	4608      	mov	r0, r1
 801c610:	4611      	mov	r1, r2
 801c612:	2200      	movs	r2, #0
 801c614:	602a      	str	r2, [r5, #0]
 801c616:	461a      	mov	r2, r3
 801c618:	f7e5 fedc 	bl	80023d4 <_write>
 801c61c:	1c43      	adds	r3, r0, #1
 801c61e:	d102      	bne.n	801c626 <_write_r+0x1e>
 801c620:	682b      	ldr	r3, [r5, #0]
 801c622:	b103      	cbz	r3, 801c626 <_write_r+0x1e>
 801c624:	6023      	str	r3, [r4, #0]
 801c626:	bd38      	pop	{r3, r4, r5, pc}
 801c628:	200024fc 	.word	0x200024fc

0801c62c <__errno>:
 801c62c:	4b01      	ldr	r3, [pc, #4]	@ (801c634 <__errno+0x8>)
 801c62e:	6818      	ldr	r0, [r3, #0]
 801c630:	4770      	bx	lr
 801c632:	bf00      	nop
 801c634:	2000014c 	.word	0x2000014c

0801c638 <__libc_init_array>:
 801c638:	b570      	push	{r4, r5, r6, lr}
 801c63a:	4d0d      	ldr	r5, [pc, #52]	@ (801c670 <__libc_init_array+0x38>)
 801c63c:	4c0d      	ldr	r4, [pc, #52]	@ (801c674 <__libc_init_array+0x3c>)
 801c63e:	1b64      	subs	r4, r4, r5
 801c640:	10a4      	asrs	r4, r4, #2
 801c642:	2600      	movs	r6, #0
 801c644:	42a6      	cmp	r6, r4
 801c646:	d109      	bne.n	801c65c <__libc_init_array+0x24>
 801c648:	4d0b      	ldr	r5, [pc, #44]	@ (801c678 <__libc_init_array+0x40>)
 801c64a:	4c0c      	ldr	r4, [pc, #48]	@ (801c67c <__libc_init_array+0x44>)
 801c64c:	f001 ff38 	bl	801e4c0 <_init>
 801c650:	1b64      	subs	r4, r4, r5
 801c652:	10a4      	asrs	r4, r4, #2
 801c654:	2600      	movs	r6, #0
 801c656:	42a6      	cmp	r6, r4
 801c658:	d105      	bne.n	801c666 <__libc_init_array+0x2e>
 801c65a:	bd70      	pop	{r4, r5, r6, pc}
 801c65c:	f855 3b04 	ldr.w	r3, [r5], #4
 801c660:	4798      	blx	r3
 801c662:	3601      	adds	r6, #1
 801c664:	e7ee      	b.n	801c644 <__libc_init_array+0xc>
 801c666:	f855 3b04 	ldr.w	r3, [r5], #4
 801c66a:	4798      	blx	r3
 801c66c:	3601      	adds	r6, #1
 801c66e:	e7f2      	b.n	801c656 <__libc_init_array+0x1e>
 801c670:	0801f9ec 	.word	0x0801f9ec
 801c674:	0801f9ec 	.word	0x0801f9ec
 801c678:	0801f9ec 	.word	0x0801f9ec
 801c67c:	0801f9f0 	.word	0x0801f9f0

0801c680 <__retarget_lock_init_recursive>:
 801c680:	4770      	bx	lr

0801c682 <__retarget_lock_acquire_recursive>:
 801c682:	4770      	bx	lr

0801c684 <__retarget_lock_release_recursive>:
 801c684:	4770      	bx	lr

0801c686 <quorem>:
 801c686:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c68a:	6903      	ldr	r3, [r0, #16]
 801c68c:	690c      	ldr	r4, [r1, #16]
 801c68e:	42a3      	cmp	r3, r4
 801c690:	4607      	mov	r7, r0
 801c692:	db7e      	blt.n	801c792 <quorem+0x10c>
 801c694:	3c01      	subs	r4, #1
 801c696:	f101 0814 	add.w	r8, r1, #20
 801c69a:	00a3      	lsls	r3, r4, #2
 801c69c:	f100 0514 	add.w	r5, r0, #20
 801c6a0:	9300      	str	r3, [sp, #0]
 801c6a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801c6a6:	9301      	str	r3, [sp, #4]
 801c6a8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801c6ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801c6b0:	3301      	adds	r3, #1
 801c6b2:	429a      	cmp	r2, r3
 801c6b4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801c6b8:	fbb2 f6f3 	udiv	r6, r2, r3
 801c6bc:	d32e      	bcc.n	801c71c <quorem+0x96>
 801c6be:	f04f 0a00 	mov.w	sl, #0
 801c6c2:	46c4      	mov	ip, r8
 801c6c4:	46ae      	mov	lr, r5
 801c6c6:	46d3      	mov	fp, sl
 801c6c8:	f85c 3b04 	ldr.w	r3, [ip], #4
 801c6cc:	b298      	uxth	r0, r3
 801c6ce:	fb06 a000 	mla	r0, r6, r0, sl
 801c6d2:	0c02      	lsrs	r2, r0, #16
 801c6d4:	0c1b      	lsrs	r3, r3, #16
 801c6d6:	fb06 2303 	mla	r3, r6, r3, r2
 801c6da:	f8de 2000 	ldr.w	r2, [lr]
 801c6de:	b280      	uxth	r0, r0
 801c6e0:	b292      	uxth	r2, r2
 801c6e2:	1a12      	subs	r2, r2, r0
 801c6e4:	445a      	add	r2, fp
 801c6e6:	f8de 0000 	ldr.w	r0, [lr]
 801c6ea:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801c6ee:	b29b      	uxth	r3, r3
 801c6f0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801c6f4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801c6f8:	b292      	uxth	r2, r2
 801c6fa:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801c6fe:	45e1      	cmp	r9, ip
 801c700:	f84e 2b04 	str.w	r2, [lr], #4
 801c704:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801c708:	d2de      	bcs.n	801c6c8 <quorem+0x42>
 801c70a:	9b00      	ldr	r3, [sp, #0]
 801c70c:	58eb      	ldr	r3, [r5, r3]
 801c70e:	b92b      	cbnz	r3, 801c71c <quorem+0x96>
 801c710:	9b01      	ldr	r3, [sp, #4]
 801c712:	3b04      	subs	r3, #4
 801c714:	429d      	cmp	r5, r3
 801c716:	461a      	mov	r2, r3
 801c718:	d32f      	bcc.n	801c77a <quorem+0xf4>
 801c71a:	613c      	str	r4, [r7, #16]
 801c71c:	4638      	mov	r0, r7
 801c71e:	f001 f97d 	bl	801da1c <__mcmp>
 801c722:	2800      	cmp	r0, #0
 801c724:	db25      	blt.n	801c772 <quorem+0xec>
 801c726:	4629      	mov	r1, r5
 801c728:	2000      	movs	r0, #0
 801c72a:	f858 2b04 	ldr.w	r2, [r8], #4
 801c72e:	f8d1 c000 	ldr.w	ip, [r1]
 801c732:	fa1f fe82 	uxth.w	lr, r2
 801c736:	fa1f f38c 	uxth.w	r3, ip
 801c73a:	eba3 030e 	sub.w	r3, r3, lr
 801c73e:	4403      	add	r3, r0
 801c740:	0c12      	lsrs	r2, r2, #16
 801c742:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801c746:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801c74a:	b29b      	uxth	r3, r3
 801c74c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c750:	45c1      	cmp	r9, r8
 801c752:	f841 3b04 	str.w	r3, [r1], #4
 801c756:	ea4f 4022 	mov.w	r0, r2, asr #16
 801c75a:	d2e6      	bcs.n	801c72a <quorem+0xa4>
 801c75c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801c760:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801c764:	b922      	cbnz	r2, 801c770 <quorem+0xea>
 801c766:	3b04      	subs	r3, #4
 801c768:	429d      	cmp	r5, r3
 801c76a:	461a      	mov	r2, r3
 801c76c:	d30b      	bcc.n	801c786 <quorem+0x100>
 801c76e:	613c      	str	r4, [r7, #16]
 801c770:	3601      	adds	r6, #1
 801c772:	4630      	mov	r0, r6
 801c774:	b003      	add	sp, #12
 801c776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c77a:	6812      	ldr	r2, [r2, #0]
 801c77c:	3b04      	subs	r3, #4
 801c77e:	2a00      	cmp	r2, #0
 801c780:	d1cb      	bne.n	801c71a <quorem+0x94>
 801c782:	3c01      	subs	r4, #1
 801c784:	e7c6      	b.n	801c714 <quorem+0x8e>
 801c786:	6812      	ldr	r2, [r2, #0]
 801c788:	3b04      	subs	r3, #4
 801c78a:	2a00      	cmp	r2, #0
 801c78c:	d1ef      	bne.n	801c76e <quorem+0xe8>
 801c78e:	3c01      	subs	r4, #1
 801c790:	e7ea      	b.n	801c768 <quorem+0xe2>
 801c792:	2000      	movs	r0, #0
 801c794:	e7ee      	b.n	801c774 <quorem+0xee>
	...

0801c798 <_dtoa_r>:
 801c798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c79c:	69c7      	ldr	r7, [r0, #28]
 801c79e:	b097      	sub	sp, #92	@ 0x5c
 801c7a0:	4614      	mov	r4, r2
 801c7a2:	461d      	mov	r5, r3
 801c7a4:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801c7a8:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 801c7aa:	4681      	mov	r9, r0
 801c7ac:	b97f      	cbnz	r7, 801c7ce <_dtoa_r+0x36>
 801c7ae:	2010      	movs	r0, #16
 801c7b0:	f000 fe0c 	bl	801d3cc <malloc>
 801c7b4:	4602      	mov	r2, r0
 801c7b6:	f8c9 001c 	str.w	r0, [r9, #28]
 801c7ba:	b920      	cbnz	r0, 801c7c6 <_dtoa_r+0x2e>
 801c7bc:	4baa      	ldr	r3, [pc, #680]	@ (801ca68 <_dtoa_r+0x2d0>)
 801c7be:	21ef      	movs	r1, #239	@ 0xef
 801c7c0:	48aa      	ldr	r0, [pc, #680]	@ (801ca6c <_dtoa_r+0x2d4>)
 801c7c2:	f001 faf7 	bl	801ddb4 <__assert_func>
 801c7c6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801c7ca:	6007      	str	r7, [r0, #0]
 801c7cc:	60c7      	str	r7, [r0, #12]
 801c7ce:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801c7d2:	6819      	ldr	r1, [r3, #0]
 801c7d4:	b159      	cbz	r1, 801c7ee <_dtoa_r+0x56>
 801c7d6:	685a      	ldr	r2, [r3, #4]
 801c7d8:	604a      	str	r2, [r1, #4]
 801c7da:	2301      	movs	r3, #1
 801c7dc:	4093      	lsls	r3, r2
 801c7de:	608b      	str	r3, [r1, #8]
 801c7e0:	4648      	mov	r0, r9
 801c7e2:	f000 fee9 	bl	801d5b8 <_Bfree>
 801c7e6:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801c7ea:	2200      	movs	r2, #0
 801c7ec:	601a      	str	r2, [r3, #0]
 801c7ee:	1e2b      	subs	r3, r5, #0
 801c7f0:	bfb9      	ittee	lt
 801c7f2:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801c7f6:	9307      	strlt	r3, [sp, #28]
 801c7f8:	2300      	movge	r3, #0
 801c7fa:	6033      	strge	r3, [r6, #0]
 801c7fc:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801c800:	4b9b      	ldr	r3, [pc, #620]	@ (801ca70 <_dtoa_r+0x2d8>)
 801c802:	bfbc      	itt	lt
 801c804:	2201      	movlt	r2, #1
 801c806:	6032      	strlt	r2, [r6, #0]
 801c808:	ea33 0308 	bics.w	r3, r3, r8
 801c80c:	d112      	bne.n	801c834 <_dtoa_r+0x9c>
 801c80e:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801c810:	f242 730f 	movw	r3, #9999	@ 0x270f
 801c814:	6013      	str	r3, [r2, #0]
 801c816:	f3c8 0313 	ubfx	r3, r8, #0, #20
 801c81a:	4323      	orrs	r3, r4
 801c81c:	f000 855b 	beq.w	801d2d6 <_dtoa_r+0xb3e>
 801c820:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801c822:	f8df a250 	ldr.w	sl, [pc, #592]	@ 801ca74 <_dtoa_r+0x2dc>
 801c826:	2b00      	cmp	r3, #0
 801c828:	f000 855d 	beq.w	801d2e6 <_dtoa_r+0xb4e>
 801c82c:	f10a 0303 	add.w	r3, sl, #3
 801c830:	f000 bd57 	b.w	801d2e2 <_dtoa_r+0xb4a>
 801c834:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801c838:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 801c83c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801c840:	2200      	movs	r2, #0
 801c842:	2300      	movs	r3, #0
 801c844:	f7e4 f918 	bl	8000a78 <__aeabi_dcmpeq>
 801c848:	4607      	mov	r7, r0
 801c84a:	b158      	cbz	r0, 801c864 <_dtoa_r+0xcc>
 801c84c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801c84e:	2301      	movs	r3, #1
 801c850:	6013      	str	r3, [r2, #0]
 801c852:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801c854:	b113      	cbz	r3, 801c85c <_dtoa_r+0xc4>
 801c856:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801c858:	4b87      	ldr	r3, [pc, #540]	@ (801ca78 <_dtoa_r+0x2e0>)
 801c85a:	6013      	str	r3, [r2, #0]
 801c85c:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 801ca7c <_dtoa_r+0x2e4>
 801c860:	f000 bd41 	b.w	801d2e6 <_dtoa_r+0xb4e>
 801c864:	ab14      	add	r3, sp, #80	@ 0x50
 801c866:	9301      	str	r3, [sp, #4]
 801c868:	ab15      	add	r3, sp, #84	@ 0x54
 801c86a:	9300      	str	r3, [sp, #0]
 801c86c:	4648      	mov	r0, r9
 801c86e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801c872:	f001 f981 	bl	801db78 <__d2b>
 801c876:	f3c8 560a 	ubfx	r6, r8, #20, #11
 801c87a:	9003      	str	r0, [sp, #12]
 801c87c:	2e00      	cmp	r6, #0
 801c87e:	d077      	beq.n	801c970 <_dtoa_r+0x1d8>
 801c880:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c882:	9712      	str	r7, [sp, #72]	@ 0x48
 801c884:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801c888:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801c88c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 801c890:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801c894:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 801c898:	4619      	mov	r1, r3
 801c89a:	2200      	movs	r2, #0
 801c89c:	4b78      	ldr	r3, [pc, #480]	@ (801ca80 <_dtoa_r+0x2e8>)
 801c89e:	f7e3 fccb 	bl	8000238 <__aeabi_dsub>
 801c8a2:	a36b      	add	r3, pc, #428	@ (adr r3, 801ca50 <_dtoa_r+0x2b8>)
 801c8a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c8a8:	f7e3 fe7e 	bl	80005a8 <__aeabi_dmul>
 801c8ac:	a36a      	add	r3, pc, #424	@ (adr r3, 801ca58 <_dtoa_r+0x2c0>)
 801c8ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c8b2:	f7e3 fcc3 	bl	800023c <__adddf3>
 801c8b6:	4604      	mov	r4, r0
 801c8b8:	4630      	mov	r0, r6
 801c8ba:	460d      	mov	r5, r1
 801c8bc:	f7e3 fe0a 	bl	80004d4 <__aeabi_i2d>
 801c8c0:	a367      	add	r3, pc, #412	@ (adr r3, 801ca60 <_dtoa_r+0x2c8>)
 801c8c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c8c6:	f7e3 fe6f 	bl	80005a8 <__aeabi_dmul>
 801c8ca:	4602      	mov	r2, r0
 801c8cc:	460b      	mov	r3, r1
 801c8ce:	4620      	mov	r0, r4
 801c8d0:	4629      	mov	r1, r5
 801c8d2:	f7e3 fcb3 	bl	800023c <__adddf3>
 801c8d6:	4604      	mov	r4, r0
 801c8d8:	460d      	mov	r5, r1
 801c8da:	f7e4 f915 	bl	8000b08 <__aeabi_d2iz>
 801c8de:	2200      	movs	r2, #0
 801c8e0:	4607      	mov	r7, r0
 801c8e2:	2300      	movs	r3, #0
 801c8e4:	4620      	mov	r0, r4
 801c8e6:	4629      	mov	r1, r5
 801c8e8:	f7e4 f8d0 	bl	8000a8c <__aeabi_dcmplt>
 801c8ec:	b140      	cbz	r0, 801c900 <_dtoa_r+0x168>
 801c8ee:	4638      	mov	r0, r7
 801c8f0:	f7e3 fdf0 	bl	80004d4 <__aeabi_i2d>
 801c8f4:	4622      	mov	r2, r4
 801c8f6:	462b      	mov	r3, r5
 801c8f8:	f7e4 f8be 	bl	8000a78 <__aeabi_dcmpeq>
 801c8fc:	b900      	cbnz	r0, 801c900 <_dtoa_r+0x168>
 801c8fe:	3f01      	subs	r7, #1
 801c900:	2f16      	cmp	r7, #22
 801c902:	d853      	bhi.n	801c9ac <_dtoa_r+0x214>
 801c904:	4b5f      	ldr	r3, [pc, #380]	@ (801ca84 <_dtoa_r+0x2ec>)
 801c906:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801c90a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c90e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801c912:	f7e4 f8bb 	bl	8000a8c <__aeabi_dcmplt>
 801c916:	2800      	cmp	r0, #0
 801c918:	d04a      	beq.n	801c9b0 <_dtoa_r+0x218>
 801c91a:	3f01      	subs	r7, #1
 801c91c:	2300      	movs	r3, #0
 801c91e:	930f      	str	r3, [sp, #60]	@ 0x3c
 801c920:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801c922:	1b9b      	subs	r3, r3, r6
 801c924:	1e5a      	subs	r2, r3, #1
 801c926:	bf45      	ittet	mi
 801c928:	f1c3 0301 	rsbmi	r3, r3, #1
 801c92c:	9304      	strmi	r3, [sp, #16]
 801c92e:	2300      	movpl	r3, #0
 801c930:	2300      	movmi	r3, #0
 801c932:	9209      	str	r2, [sp, #36]	@ 0x24
 801c934:	bf54      	ite	pl
 801c936:	9304      	strpl	r3, [sp, #16]
 801c938:	9309      	strmi	r3, [sp, #36]	@ 0x24
 801c93a:	2f00      	cmp	r7, #0
 801c93c:	db3a      	blt.n	801c9b4 <_dtoa_r+0x21c>
 801c93e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c940:	970e      	str	r7, [sp, #56]	@ 0x38
 801c942:	443b      	add	r3, r7
 801c944:	9309      	str	r3, [sp, #36]	@ 0x24
 801c946:	2300      	movs	r3, #0
 801c948:	930a      	str	r3, [sp, #40]	@ 0x28
 801c94a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801c94c:	2b09      	cmp	r3, #9
 801c94e:	d864      	bhi.n	801ca1a <_dtoa_r+0x282>
 801c950:	2b05      	cmp	r3, #5
 801c952:	bfc4      	itt	gt
 801c954:	3b04      	subgt	r3, #4
 801c956:	9320      	strgt	r3, [sp, #128]	@ 0x80
 801c958:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801c95a:	f1a3 0302 	sub.w	r3, r3, #2
 801c95e:	bfcc      	ite	gt
 801c960:	2400      	movgt	r4, #0
 801c962:	2401      	movle	r4, #1
 801c964:	2b03      	cmp	r3, #3
 801c966:	d864      	bhi.n	801ca32 <_dtoa_r+0x29a>
 801c968:	e8df f003 	tbb	[pc, r3]
 801c96c:	2c385553 	.word	0x2c385553
 801c970:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 801c974:	441e      	add	r6, r3
 801c976:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801c97a:	2b20      	cmp	r3, #32
 801c97c:	bfc1      	itttt	gt
 801c97e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801c982:	fa08 f803 	lslgt.w	r8, r8, r3
 801c986:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801c98a:	fa24 f303 	lsrgt.w	r3, r4, r3
 801c98e:	bfd6      	itet	le
 801c990:	f1c3 0320 	rsble	r3, r3, #32
 801c994:	ea48 0003 	orrgt.w	r0, r8, r3
 801c998:	fa04 f003 	lslle.w	r0, r4, r3
 801c99c:	f7e3 fd8a 	bl	80004b4 <__aeabi_ui2d>
 801c9a0:	2201      	movs	r2, #1
 801c9a2:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801c9a6:	3e01      	subs	r6, #1
 801c9a8:	9212      	str	r2, [sp, #72]	@ 0x48
 801c9aa:	e775      	b.n	801c898 <_dtoa_r+0x100>
 801c9ac:	2301      	movs	r3, #1
 801c9ae:	e7b6      	b.n	801c91e <_dtoa_r+0x186>
 801c9b0:	900f      	str	r0, [sp, #60]	@ 0x3c
 801c9b2:	e7b5      	b.n	801c920 <_dtoa_r+0x188>
 801c9b4:	9b04      	ldr	r3, [sp, #16]
 801c9b6:	1bdb      	subs	r3, r3, r7
 801c9b8:	9304      	str	r3, [sp, #16]
 801c9ba:	427b      	negs	r3, r7
 801c9bc:	930a      	str	r3, [sp, #40]	@ 0x28
 801c9be:	2300      	movs	r3, #0
 801c9c0:	930e      	str	r3, [sp, #56]	@ 0x38
 801c9c2:	e7c2      	b.n	801c94a <_dtoa_r+0x1b2>
 801c9c4:	2301      	movs	r3, #1
 801c9c6:	930b      	str	r3, [sp, #44]	@ 0x2c
 801c9c8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801c9ca:	eb07 0b03 	add.w	fp, r7, r3
 801c9ce:	f10b 0301 	add.w	r3, fp, #1
 801c9d2:	2b01      	cmp	r3, #1
 801c9d4:	9308      	str	r3, [sp, #32]
 801c9d6:	bfb8      	it	lt
 801c9d8:	2301      	movlt	r3, #1
 801c9da:	e006      	b.n	801c9ea <_dtoa_r+0x252>
 801c9dc:	2301      	movs	r3, #1
 801c9de:	930b      	str	r3, [sp, #44]	@ 0x2c
 801c9e0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801c9e2:	2b00      	cmp	r3, #0
 801c9e4:	dd28      	ble.n	801ca38 <_dtoa_r+0x2a0>
 801c9e6:	469b      	mov	fp, r3
 801c9e8:	9308      	str	r3, [sp, #32]
 801c9ea:	f8d9 001c 	ldr.w	r0, [r9, #28]
 801c9ee:	2100      	movs	r1, #0
 801c9f0:	2204      	movs	r2, #4
 801c9f2:	f102 0514 	add.w	r5, r2, #20
 801c9f6:	429d      	cmp	r5, r3
 801c9f8:	d926      	bls.n	801ca48 <_dtoa_r+0x2b0>
 801c9fa:	6041      	str	r1, [r0, #4]
 801c9fc:	4648      	mov	r0, r9
 801c9fe:	f000 fd9b 	bl	801d538 <_Balloc>
 801ca02:	4682      	mov	sl, r0
 801ca04:	2800      	cmp	r0, #0
 801ca06:	d141      	bne.n	801ca8c <_dtoa_r+0x2f4>
 801ca08:	4b1f      	ldr	r3, [pc, #124]	@ (801ca88 <_dtoa_r+0x2f0>)
 801ca0a:	4602      	mov	r2, r0
 801ca0c:	f240 11af 	movw	r1, #431	@ 0x1af
 801ca10:	e6d6      	b.n	801c7c0 <_dtoa_r+0x28>
 801ca12:	2300      	movs	r3, #0
 801ca14:	e7e3      	b.n	801c9de <_dtoa_r+0x246>
 801ca16:	2300      	movs	r3, #0
 801ca18:	e7d5      	b.n	801c9c6 <_dtoa_r+0x22e>
 801ca1a:	2401      	movs	r4, #1
 801ca1c:	2300      	movs	r3, #0
 801ca1e:	9320      	str	r3, [sp, #128]	@ 0x80
 801ca20:	940b      	str	r4, [sp, #44]	@ 0x2c
 801ca22:	f04f 3bff 	mov.w	fp, #4294967295
 801ca26:	2200      	movs	r2, #0
 801ca28:	f8cd b020 	str.w	fp, [sp, #32]
 801ca2c:	2312      	movs	r3, #18
 801ca2e:	9221      	str	r2, [sp, #132]	@ 0x84
 801ca30:	e7db      	b.n	801c9ea <_dtoa_r+0x252>
 801ca32:	2301      	movs	r3, #1
 801ca34:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ca36:	e7f4      	b.n	801ca22 <_dtoa_r+0x28a>
 801ca38:	f04f 0b01 	mov.w	fp, #1
 801ca3c:	f8cd b020 	str.w	fp, [sp, #32]
 801ca40:	465b      	mov	r3, fp
 801ca42:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 801ca46:	e7d0      	b.n	801c9ea <_dtoa_r+0x252>
 801ca48:	3101      	adds	r1, #1
 801ca4a:	0052      	lsls	r2, r2, #1
 801ca4c:	e7d1      	b.n	801c9f2 <_dtoa_r+0x25a>
 801ca4e:	bf00      	nop
 801ca50:	636f4361 	.word	0x636f4361
 801ca54:	3fd287a7 	.word	0x3fd287a7
 801ca58:	8b60c8b3 	.word	0x8b60c8b3
 801ca5c:	3fc68a28 	.word	0x3fc68a28
 801ca60:	509f79fb 	.word	0x509f79fb
 801ca64:	3fd34413 	.word	0x3fd34413
 801ca68:	0801f5ed 	.word	0x0801f5ed
 801ca6c:	0801f604 	.word	0x0801f604
 801ca70:	7ff00000 	.word	0x7ff00000
 801ca74:	0801f5e9 	.word	0x0801f5e9
 801ca78:	0801f5bd 	.word	0x0801f5bd
 801ca7c:	0801f5bc 	.word	0x0801f5bc
 801ca80:	3ff80000 	.word	0x3ff80000
 801ca84:	0801f758 	.word	0x0801f758
 801ca88:	0801f65c 	.word	0x0801f65c
 801ca8c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801ca90:	6018      	str	r0, [r3, #0]
 801ca92:	9b08      	ldr	r3, [sp, #32]
 801ca94:	2b0e      	cmp	r3, #14
 801ca96:	f200 80a1 	bhi.w	801cbdc <_dtoa_r+0x444>
 801ca9a:	2c00      	cmp	r4, #0
 801ca9c:	f000 809e 	beq.w	801cbdc <_dtoa_r+0x444>
 801caa0:	2f00      	cmp	r7, #0
 801caa2:	dd33      	ble.n	801cb0c <_dtoa_r+0x374>
 801caa4:	4b9c      	ldr	r3, [pc, #624]	@ (801cd18 <_dtoa_r+0x580>)
 801caa6:	f007 020f 	and.w	r2, r7, #15
 801caaa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801caae:	e9d3 3400 	ldrd	r3, r4, [r3]
 801cab2:	05f8      	lsls	r0, r7, #23
 801cab4:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 801cab8:	ea4f 1427 	mov.w	r4, r7, asr #4
 801cabc:	d516      	bpl.n	801caec <_dtoa_r+0x354>
 801cabe:	4b97      	ldr	r3, [pc, #604]	@ (801cd1c <_dtoa_r+0x584>)
 801cac0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801cac4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801cac8:	f7e3 fe98 	bl	80007fc <__aeabi_ddiv>
 801cacc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801cad0:	f004 040f 	and.w	r4, r4, #15
 801cad4:	2603      	movs	r6, #3
 801cad6:	4d91      	ldr	r5, [pc, #580]	@ (801cd1c <_dtoa_r+0x584>)
 801cad8:	b954      	cbnz	r4, 801caf0 <_dtoa_r+0x358>
 801cada:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801cade:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801cae2:	f7e3 fe8b 	bl	80007fc <__aeabi_ddiv>
 801cae6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801caea:	e028      	b.n	801cb3e <_dtoa_r+0x3a6>
 801caec:	2602      	movs	r6, #2
 801caee:	e7f2      	b.n	801cad6 <_dtoa_r+0x33e>
 801caf0:	07e1      	lsls	r1, r4, #31
 801caf2:	d508      	bpl.n	801cb06 <_dtoa_r+0x36e>
 801caf4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801caf8:	e9d5 2300 	ldrd	r2, r3, [r5]
 801cafc:	f7e3 fd54 	bl	80005a8 <__aeabi_dmul>
 801cb00:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801cb04:	3601      	adds	r6, #1
 801cb06:	1064      	asrs	r4, r4, #1
 801cb08:	3508      	adds	r5, #8
 801cb0a:	e7e5      	b.n	801cad8 <_dtoa_r+0x340>
 801cb0c:	f000 80af 	beq.w	801cc6e <_dtoa_r+0x4d6>
 801cb10:	427c      	negs	r4, r7
 801cb12:	4b81      	ldr	r3, [pc, #516]	@ (801cd18 <_dtoa_r+0x580>)
 801cb14:	4d81      	ldr	r5, [pc, #516]	@ (801cd1c <_dtoa_r+0x584>)
 801cb16:	f004 020f 	and.w	r2, r4, #15
 801cb1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801cb1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cb22:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801cb26:	f7e3 fd3f 	bl	80005a8 <__aeabi_dmul>
 801cb2a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801cb2e:	1124      	asrs	r4, r4, #4
 801cb30:	2300      	movs	r3, #0
 801cb32:	2602      	movs	r6, #2
 801cb34:	2c00      	cmp	r4, #0
 801cb36:	f040 808f 	bne.w	801cc58 <_dtoa_r+0x4c0>
 801cb3a:	2b00      	cmp	r3, #0
 801cb3c:	d1d3      	bne.n	801cae6 <_dtoa_r+0x34e>
 801cb3e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801cb40:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 801cb44:	2b00      	cmp	r3, #0
 801cb46:	f000 8094 	beq.w	801cc72 <_dtoa_r+0x4da>
 801cb4a:	4b75      	ldr	r3, [pc, #468]	@ (801cd20 <_dtoa_r+0x588>)
 801cb4c:	2200      	movs	r2, #0
 801cb4e:	4620      	mov	r0, r4
 801cb50:	4629      	mov	r1, r5
 801cb52:	f7e3 ff9b 	bl	8000a8c <__aeabi_dcmplt>
 801cb56:	2800      	cmp	r0, #0
 801cb58:	f000 808b 	beq.w	801cc72 <_dtoa_r+0x4da>
 801cb5c:	9b08      	ldr	r3, [sp, #32]
 801cb5e:	2b00      	cmp	r3, #0
 801cb60:	f000 8087 	beq.w	801cc72 <_dtoa_r+0x4da>
 801cb64:	f1bb 0f00 	cmp.w	fp, #0
 801cb68:	dd34      	ble.n	801cbd4 <_dtoa_r+0x43c>
 801cb6a:	4620      	mov	r0, r4
 801cb6c:	4b6d      	ldr	r3, [pc, #436]	@ (801cd24 <_dtoa_r+0x58c>)
 801cb6e:	2200      	movs	r2, #0
 801cb70:	4629      	mov	r1, r5
 801cb72:	f7e3 fd19 	bl	80005a8 <__aeabi_dmul>
 801cb76:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801cb7a:	f107 38ff 	add.w	r8, r7, #4294967295
 801cb7e:	3601      	adds	r6, #1
 801cb80:	465c      	mov	r4, fp
 801cb82:	4630      	mov	r0, r6
 801cb84:	f7e3 fca6 	bl	80004d4 <__aeabi_i2d>
 801cb88:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801cb8c:	f7e3 fd0c 	bl	80005a8 <__aeabi_dmul>
 801cb90:	4b65      	ldr	r3, [pc, #404]	@ (801cd28 <_dtoa_r+0x590>)
 801cb92:	2200      	movs	r2, #0
 801cb94:	f7e3 fb52 	bl	800023c <__adddf3>
 801cb98:	4605      	mov	r5, r0
 801cb9a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801cb9e:	2c00      	cmp	r4, #0
 801cba0:	d16a      	bne.n	801cc78 <_dtoa_r+0x4e0>
 801cba2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801cba6:	4b61      	ldr	r3, [pc, #388]	@ (801cd2c <_dtoa_r+0x594>)
 801cba8:	2200      	movs	r2, #0
 801cbaa:	f7e3 fb45 	bl	8000238 <__aeabi_dsub>
 801cbae:	4602      	mov	r2, r0
 801cbb0:	460b      	mov	r3, r1
 801cbb2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801cbb6:	462a      	mov	r2, r5
 801cbb8:	4633      	mov	r3, r6
 801cbba:	f7e3 ff85 	bl	8000ac8 <__aeabi_dcmpgt>
 801cbbe:	2800      	cmp	r0, #0
 801cbc0:	f040 8298 	bne.w	801d0f4 <_dtoa_r+0x95c>
 801cbc4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801cbc8:	462a      	mov	r2, r5
 801cbca:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801cbce:	f7e3 ff5d 	bl	8000a8c <__aeabi_dcmplt>
 801cbd2:	bb38      	cbnz	r0, 801cc24 <_dtoa_r+0x48c>
 801cbd4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801cbd8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 801cbdc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801cbde:	2b00      	cmp	r3, #0
 801cbe0:	f2c0 8157 	blt.w	801ce92 <_dtoa_r+0x6fa>
 801cbe4:	2f0e      	cmp	r7, #14
 801cbe6:	f300 8154 	bgt.w	801ce92 <_dtoa_r+0x6fa>
 801cbea:	4b4b      	ldr	r3, [pc, #300]	@ (801cd18 <_dtoa_r+0x580>)
 801cbec:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801cbf0:	e9d3 3400 	ldrd	r3, r4, [r3]
 801cbf4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 801cbf8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801cbfa:	2b00      	cmp	r3, #0
 801cbfc:	f280 80e5 	bge.w	801cdca <_dtoa_r+0x632>
 801cc00:	9b08      	ldr	r3, [sp, #32]
 801cc02:	2b00      	cmp	r3, #0
 801cc04:	f300 80e1 	bgt.w	801cdca <_dtoa_r+0x632>
 801cc08:	d10c      	bne.n	801cc24 <_dtoa_r+0x48c>
 801cc0a:	4b48      	ldr	r3, [pc, #288]	@ (801cd2c <_dtoa_r+0x594>)
 801cc0c:	2200      	movs	r2, #0
 801cc0e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801cc12:	f7e3 fcc9 	bl	80005a8 <__aeabi_dmul>
 801cc16:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801cc1a:	f7e3 ff4b 	bl	8000ab4 <__aeabi_dcmpge>
 801cc1e:	2800      	cmp	r0, #0
 801cc20:	f000 8266 	beq.w	801d0f0 <_dtoa_r+0x958>
 801cc24:	2400      	movs	r4, #0
 801cc26:	4625      	mov	r5, r4
 801cc28:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801cc2a:	4656      	mov	r6, sl
 801cc2c:	ea6f 0803 	mvn.w	r8, r3
 801cc30:	2700      	movs	r7, #0
 801cc32:	4621      	mov	r1, r4
 801cc34:	4648      	mov	r0, r9
 801cc36:	f000 fcbf 	bl	801d5b8 <_Bfree>
 801cc3a:	2d00      	cmp	r5, #0
 801cc3c:	f000 80bd 	beq.w	801cdba <_dtoa_r+0x622>
 801cc40:	b12f      	cbz	r7, 801cc4e <_dtoa_r+0x4b6>
 801cc42:	42af      	cmp	r7, r5
 801cc44:	d003      	beq.n	801cc4e <_dtoa_r+0x4b6>
 801cc46:	4639      	mov	r1, r7
 801cc48:	4648      	mov	r0, r9
 801cc4a:	f000 fcb5 	bl	801d5b8 <_Bfree>
 801cc4e:	4629      	mov	r1, r5
 801cc50:	4648      	mov	r0, r9
 801cc52:	f000 fcb1 	bl	801d5b8 <_Bfree>
 801cc56:	e0b0      	b.n	801cdba <_dtoa_r+0x622>
 801cc58:	07e2      	lsls	r2, r4, #31
 801cc5a:	d505      	bpl.n	801cc68 <_dtoa_r+0x4d0>
 801cc5c:	e9d5 2300 	ldrd	r2, r3, [r5]
 801cc60:	f7e3 fca2 	bl	80005a8 <__aeabi_dmul>
 801cc64:	3601      	adds	r6, #1
 801cc66:	2301      	movs	r3, #1
 801cc68:	1064      	asrs	r4, r4, #1
 801cc6a:	3508      	adds	r5, #8
 801cc6c:	e762      	b.n	801cb34 <_dtoa_r+0x39c>
 801cc6e:	2602      	movs	r6, #2
 801cc70:	e765      	b.n	801cb3e <_dtoa_r+0x3a6>
 801cc72:	9c08      	ldr	r4, [sp, #32]
 801cc74:	46b8      	mov	r8, r7
 801cc76:	e784      	b.n	801cb82 <_dtoa_r+0x3ea>
 801cc78:	4b27      	ldr	r3, [pc, #156]	@ (801cd18 <_dtoa_r+0x580>)
 801cc7a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801cc7c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801cc80:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801cc84:	4454      	add	r4, sl
 801cc86:	2900      	cmp	r1, #0
 801cc88:	d054      	beq.n	801cd34 <_dtoa_r+0x59c>
 801cc8a:	4929      	ldr	r1, [pc, #164]	@ (801cd30 <_dtoa_r+0x598>)
 801cc8c:	2000      	movs	r0, #0
 801cc8e:	f7e3 fdb5 	bl	80007fc <__aeabi_ddiv>
 801cc92:	4633      	mov	r3, r6
 801cc94:	462a      	mov	r2, r5
 801cc96:	f7e3 facf 	bl	8000238 <__aeabi_dsub>
 801cc9a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801cc9e:	4656      	mov	r6, sl
 801cca0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801cca4:	f7e3 ff30 	bl	8000b08 <__aeabi_d2iz>
 801cca8:	4605      	mov	r5, r0
 801ccaa:	f7e3 fc13 	bl	80004d4 <__aeabi_i2d>
 801ccae:	4602      	mov	r2, r0
 801ccb0:	460b      	mov	r3, r1
 801ccb2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801ccb6:	f7e3 fabf 	bl	8000238 <__aeabi_dsub>
 801ccba:	3530      	adds	r5, #48	@ 0x30
 801ccbc:	4602      	mov	r2, r0
 801ccbe:	460b      	mov	r3, r1
 801ccc0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801ccc4:	f806 5b01 	strb.w	r5, [r6], #1
 801ccc8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801cccc:	f7e3 fede 	bl	8000a8c <__aeabi_dcmplt>
 801ccd0:	2800      	cmp	r0, #0
 801ccd2:	d172      	bne.n	801cdba <_dtoa_r+0x622>
 801ccd4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801ccd8:	4911      	ldr	r1, [pc, #68]	@ (801cd20 <_dtoa_r+0x588>)
 801ccda:	2000      	movs	r0, #0
 801ccdc:	f7e3 faac 	bl	8000238 <__aeabi_dsub>
 801cce0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801cce4:	f7e3 fed2 	bl	8000a8c <__aeabi_dcmplt>
 801cce8:	2800      	cmp	r0, #0
 801ccea:	f040 80b4 	bne.w	801ce56 <_dtoa_r+0x6be>
 801ccee:	42a6      	cmp	r6, r4
 801ccf0:	f43f af70 	beq.w	801cbd4 <_dtoa_r+0x43c>
 801ccf4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801ccf8:	4b0a      	ldr	r3, [pc, #40]	@ (801cd24 <_dtoa_r+0x58c>)
 801ccfa:	2200      	movs	r2, #0
 801ccfc:	f7e3 fc54 	bl	80005a8 <__aeabi_dmul>
 801cd00:	4b08      	ldr	r3, [pc, #32]	@ (801cd24 <_dtoa_r+0x58c>)
 801cd02:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801cd06:	2200      	movs	r2, #0
 801cd08:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801cd0c:	f7e3 fc4c 	bl	80005a8 <__aeabi_dmul>
 801cd10:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801cd14:	e7c4      	b.n	801cca0 <_dtoa_r+0x508>
 801cd16:	bf00      	nop
 801cd18:	0801f758 	.word	0x0801f758
 801cd1c:	0801f730 	.word	0x0801f730
 801cd20:	3ff00000 	.word	0x3ff00000
 801cd24:	40240000 	.word	0x40240000
 801cd28:	401c0000 	.word	0x401c0000
 801cd2c:	40140000 	.word	0x40140000
 801cd30:	3fe00000 	.word	0x3fe00000
 801cd34:	4631      	mov	r1, r6
 801cd36:	4628      	mov	r0, r5
 801cd38:	f7e3 fc36 	bl	80005a8 <__aeabi_dmul>
 801cd3c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801cd40:	9413      	str	r4, [sp, #76]	@ 0x4c
 801cd42:	4656      	mov	r6, sl
 801cd44:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801cd48:	f7e3 fede 	bl	8000b08 <__aeabi_d2iz>
 801cd4c:	4605      	mov	r5, r0
 801cd4e:	f7e3 fbc1 	bl	80004d4 <__aeabi_i2d>
 801cd52:	4602      	mov	r2, r0
 801cd54:	460b      	mov	r3, r1
 801cd56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801cd5a:	f7e3 fa6d 	bl	8000238 <__aeabi_dsub>
 801cd5e:	3530      	adds	r5, #48	@ 0x30
 801cd60:	f806 5b01 	strb.w	r5, [r6], #1
 801cd64:	4602      	mov	r2, r0
 801cd66:	460b      	mov	r3, r1
 801cd68:	42a6      	cmp	r6, r4
 801cd6a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801cd6e:	f04f 0200 	mov.w	r2, #0
 801cd72:	d124      	bne.n	801cdbe <_dtoa_r+0x626>
 801cd74:	4baf      	ldr	r3, [pc, #700]	@ (801d034 <_dtoa_r+0x89c>)
 801cd76:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801cd7a:	f7e3 fa5f 	bl	800023c <__adddf3>
 801cd7e:	4602      	mov	r2, r0
 801cd80:	460b      	mov	r3, r1
 801cd82:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801cd86:	f7e3 fe9f 	bl	8000ac8 <__aeabi_dcmpgt>
 801cd8a:	2800      	cmp	r0, #0
 801cd8c:	d163      	bne.n	801ce56 <_dtoa_r+0x6be>
 801cd8e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801cd92:	49a8      	ldr	r1, [pc, #672]	@ (801d034 <_dtoa_r+0x89c>)
 801cd94:	2000      	movs	r0, #0
 801cd96:	f7e3 fa4f 	bl	8000238 <__aeabi_dsub>
 801cd9a:	4602      	mov	r2, r0
 801cd9c:	460b      	mov	r3, r1
 801cd9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801cda2:	f7e3 fe73 	bl	8000a8c <__aeabi_dcmplt>
 801cda6:	2800      	cmp	r0, #0
 801cda8:	f43f af14 	beq.w	801cbd4 <_dtoa_r+0x43c>
 801cdac:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801cdae:	1e73      	subs	r3, r6, #1
 801cdb0:	9313      	str	r3, [sp, #76]	@ 0x4c
 801cdb2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801cdb6:	2b30      	cmp	r3, #48	@ 0x30
 801cdb8:	d0f8      	beq.n	801cdac <_dtoa_r+0x614>
 801cdba:	4647      	mov	r7, r8
 801cdbc:	e03b      	b.n	801ce36 <_dtoa_r+0x69e>
 801cdbe:	4b9e      	ldr	r3, [pc, #632]	@ (801d038 <_dtoa_r+0x8a0>)
 801cdc0:	f7e3 fbf2 	bl	80005a8 <__aeabi_dmul>
 801cdc4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801cdc8:	e7bc      	b.n	801cd44 <_dtoa_r+0x5ac>
 801cdca:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 801cdce:	4656      	mov	r6, sl
 801cdd0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801cdd4:	4620      	mov	r0, r4
 801cdd6:	4629      	mov	r1, r5
 801cdd8:	f7e3 fd10 	bl	80007fc <__aeabi_ddiv>
 801cddc:	f7e3 fe94 	bl	8000b08 <__aeabi_d2iz>
 801cde0:	4680      	mov	r8, r0
 801cde2:	f7e3 fb77 	bl	80004d4 <__aeabi_i2d>
 801cde6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801cdea:	f7e3 fbdd 	bl	80005a8 <__aeabi_dmul>
 801cdee:	4602      	mov	r2, r0
 801cdf0:	460b      	mov	r3, r1
 801cdf2:	4620      	mov	r0, r4
 801cdf4:	4629      	mov	r1, r5
 801cdf6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801cdfa:	f7e3 fa1d 	bl	8000238 <__aeabi_dsub>
 801cdfe:	f806 4b01 	strb.w	r4, [r6], #1
 801ce02:	9d08      	ldr	r5, [sp, #32]
 801ce04:	eba6 040a 	sub.w	r4, r6, sl
 801ce08:	42a5      	cmp	r5, r4
 801ce0a:	4602      	mov	r2, r0
 801ce0c:	460b      	mov	r3, r1
 801ce0e:	d133      	bne.n	801ce78 <_dtoa_r+0x6e0>
 801ce10:	f7e3 fa14 	bl	800023c <__adddf3>
 801ce14:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801ce18:	4604      	mov	r4, r0
 801ce1a:	460d      	mov	r5, r1
 801ce1c:	f7e3 fe54 	bl	8000ac8 <__aeabi_dcmpgt>
 801ce20:	b9c0      	cbnz	r0, 801ce54 <_dtoa_r+0x6bc>
 801ce22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801ce26:	4620      	mov	r0, r4
 801ce28:	4629      	mov	r1, r5
 801ce2a:	f7e3 fe25 	bl	8000a78 <__aeabi_dcmpeq>
 801ce2e:	b110      	cbz	r0, 801ce36 <_dtoa_r+0x69e>
 801ce30:	f018 0f01 	tst.w	r8, #1
 801ce34:	d10e      	bne.n	801ce54 <_dtoa_r+0x6bc>
 801ce36:	9903      	ldr	r1, [sp, #12]
 801ce38:	4648      	mov	r0, r9
 801ce3a:	f000 fbbd 	bl	801d5b8 <_Bfree>
 801ce3e:	2300      	movs	r3, #0
 801ce40:	7033      	strb	r3, [r6, #0]
 801ce42:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801ce44:	3701      	adds	r7, #1
 801ce46:	601f      	str	r7, [r3, #0]
 801ce48:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801ce4a:	2b00      	cmp	r3, #0
 801ce4c:	f000 824b 	beq.w	801d2e6 <_dtoa_r+0xb4e>
 801ce50:	601e      	str	r6, [r3, #0]
 801ce52:	e248      	b.n	801d2e6 <_dtoa_r+0xb4e>
 801ce54:	46b8      	mov	r8, r7
 801ce56:	4633      	mov	r3, r6
 801ce58:	461e      	mov	r6, r3
 801ce5a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801ce5e:	2a39      	cmp	r2, #57	@ 0x39
 801ce60:	d106      	bne.n	801ce70 <_dtoa_r+0x6d8>
 801ce62:	459a      	cmp	sl, r3
 801ce64:	d1f8      	bne.n	801ce58 <_dtoa_r+0x6c0>
 801ce66:	2230      	movs	r2, #48	@ 0x30
 801ce68:	f108 0801 	add.w	r8, r8, #1
 801ce6c:	f88a 2000 	strb.w	r2, [sl]
 801ce70:	781a      	ldrb	r2, [r3, #0]
 801ce72:	3201      	adds	r2, #1
 801ce74:	701a      	strb	r2, [r3, #0]
 801ce76:	e7a0      	b.n	801cdba <_dtoa_r+0x622>
 801ce78:	4b6f      	ldr	r3, [pc, #444]	@ (801d038 <_dtoa_r+0x8a0>)
 801ce7a:	2200      	movs	r2, #0
 801ce7c:	f7e3 fb94 	bl	80005a8 <__aeabi_dmul>
 801ce80:	2200      	movs	r2, #0
 801ce82:	2300      	movs	r3, #0
 801ce84:	4604      	mov	r4, r0
 801ce86:	460d      	mov	r5, r1
 801ce88:	f7e3 fdf6 	bl	8000a78 <__aeabi_dcmpeq>
 801ce8c:	2800      	cmp	r0, #0
 801ce8e:	d09f      	beq.n	801cdd0 <_dtoa_r+0x638>
 801ce90:	e7d1      	b.n	801ce36 <_dtoa_r+0x69e>
 801ce92:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801ce94:	2a00      	cmp	r2, #0
 801ce96:	f000 80ea 	beq.w	801d06e <_dtoa_r+0x8d6>
 801ce9a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801ce9c:	2a01      	cmp	r2, #1
 801ce9e:	f300 80cd 	bgt.w	801d03c <_dtoa_r+0x8a4>
 801cea2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801cea4:	2a00      	cmp	r2, #0
 801cea6:	f000 80c1 	beq.w	801d02c <_dtoa_r+0x894>
 801ceaa:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801ceae:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801ceb0:	9e04      	ldr	r6, [sp, #16]
 801ceb2:	9a04      	ldr	r2, [sp, #16]
 801ceb4:	441a      	add	r2, r3
 801ceb6:	9204      	str	r2, [sp, #16]
 801ceb8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ceba:	2101      	movs	r1, #1
 801cebc:	441a      	add	r2, r3
 801cebe:	4648      	mov	r0, r9
 801cec0:	9209      	str	r2, [sp, #36]	@ 0x24
 801cec2:	f000 fc2d 	bl	801d720 <__i2b>
 801cec6:	4605      	mov	r5, r0
 801cec8:	b166      	cbz	r6, 801cee4 <_dtoa_r+0x74c>
 801ceca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cecc:	2b00      	cmp	r3, #0
 801cece:	dd09      	ble.n	801cee4 <_dtoa_r+0x74c>
 801ced0:	42b3      	cmp	r3, r6
 801ced2:	9a04      	ldr	r2, [sp, #16]
 801ced4:	bfa8      	it	ge
 801ced6:	4633      	movge	r3, r6
 801ced8:	1ad2      	subs	r2, r2, r3
 801ceda:	9204      	str	r2, [sp, #16]
 801cedc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801cede:	1af6      	subs	r6, r6, r3
 801cee0:	1ad3      	subs	r3, r2, r3
 801cee2:	9309      	str	r3, [sp, #36]	@ 0x24
 801cee4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801cee6:	b30b      	cbz	r3, 801cf2c <_dtoa_r+0x794>
 801cee8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ceea:	2b00      	cmp	r3, #0
 801ceec:	f000 80c6 	beq.w	801d07c <_dtoa_r+0x8e4>
 801cef0:	2c00      	cmp	r4, #0
 801cef2:	f000 80c0 	beq.w	801d076 <_dtoa_r+0x8de>
 801cef6:	4629      	mov	r1, r5
 801cef8:	4622      	mov	r2, r4
 801cefa:	4648      	mov	r0, r9
 801cefc:	f000 fcc8 	bl	801d890 <__pow5mult>
 801cf00:	9a03      	ldr	r2, [sp, #12]
 801cf02:	4601      	mov	r1, r0
 801cf04:	4605      	mov	r5, r0
 801cf06:	4648      	mov	r0, r9
 801cf08:	f000 fc20 	bl	801d74c <__multiply>
 801cf0c:	9903      	ldr	r1, [sp, #12]
 801cf0e:	4680      	mov	r8, r0
 801cf10:	4648      	mov	r0, r9
 801cf12:	f000 fb51 	bl	801d5b8 <_Bfree>
 801cf16:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801cf18:	1b1b      	subs	r3, r3, r4
 801cf1a:	930a      	str	r3, [sp, #40]	@ 0x28
 801cf1c:	f000 80b1 	beq.w	801d082 <_dtoa_r+0x8ea>
 801cf20:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801cf22:	4641      	mov	r1, r8
 801cf24:	4648      	mov	r0, r9
 801cf26:	f000 fcb3 	bl	801d890 <__pow5mult>
 801cf2a:	9003      	str	r0, [sp, #12]
 801cf2c:	2101      	movs	r1, #1
 801cf2e:	4648      	mov	r0, r9
 801cf30:	f000 fbf6 	bl	801d720 <__i2b>
 801cf34:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801cf36:	4604      	mov	r4, r0
 801cf38:	2b00      	cmp	r3, #0
 801cf3a:	f000 81d8 	beq.w	801d2ee <_dtoa_r+0xb56>
 801cf3e:	461a      	mov	r2, r3
 801cf40:	4601      	mov	r1, r0
 801cf42:	4648      	mov	r0, r9
 801cf44:	f000 fca4 	bl	801d890 <__pow5mult>
 801cf48:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801cf4a:	2b01      	cmp	r3, #1
 801cf4c:	4604      	mov	r4, r0
 801cf4e:	f300 809f 	bgt.w	801d090 <_dtoa_r+0x8f8>
 801cf52:	9b06      	ldr	r3, [sp, #24]
 801cf54:	2b00      	cmp	r3, #0
 801cf56:	f040 8097 	bne.w	801d088 <_dtoa_r+0x8f0>
 801cf5a:	9b07      	ldr	r3, [sp, #28]
 801cf5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801cf60:	2b00      	cmp	r3, #0
 801cf62:	f040 8093 	bne.w	801d08c <_dtoa_r+0x8f4>
 801cf66:	9b07      	ldr	r3, [sp, #28]
 801cf68:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801cf6c:	0d1b      	lsrs	r3, r3, #20
 801cf6e:	051b      	lsls	r3, r3, #20
 801cf70:	b133      	cbz	r3, 801cf80 <_dtoa_r+0x7e8>
 801cf72:	9b04      	ldr	r3, [sp, #16]
 801cf74:	3301      	adds	r3, #1
 801cf76:	9304      	str	r3, [sp, #16]
 801cf78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cf7a:	3301      	adds	r3, #1
 801cf7c:	9309      	str	r3, [sp, #36]	@ 0x24
 801cf7e:	2301      	movs	r3, #1
 801cf80:	930a      	str	r3, [sp, #40]	@ 0x28
 801cf82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801cf84:	2b00      	cmp	r3, #0
 801cf86:	f000 81b8 	beq.w	801d2fa <_dtoa_r+0xb62>
 801cf8a:	6923      	ldr	r3, [r4, #16]
 801cf8c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801cf90:	6918      	ldr	r0, [r3, #16]
 801cf92:	f000 fb79 	bl	801d688 <__hi0bits>
 801cf96:	f1c0 0020 	rsb	r0, r0, #32
 801cf9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cf9c:	4418      	add	r0, r3
 801cf9e:	f010 001f 	ands.w	r0, r0, #31
 801cfa2:	f000 8082 	beq.w	801d0aa <_dtoa_r+0x912>
 801cfa6:	f1c0 0320 	rsb	r3, r0, #32
 801cfaa:	2b04      	cmp	r3, #4
 801cfac:	dd73      	ble.n	801d096 <_dtoa_r+0x8fe>
 801cfae:	9b04      	ldr	r3, [sp, #16]
 801cfb0:	f1c0 001c 	rsb	r0, r0, #28
 801cfb4:	4403      	add	r3, r0
 801cfb6:	9304      	str	r3, [sp, #16]
 801cfb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cfba:	4403      	add	r3, r0
 801cfbc:	4406      	add	r6, r0
 801cfbe:	9309      	str	r3, [sp, #36]	@ 0x24
 801cfc0:	9b04      	ldr	r3, [sp, #16]
 801cfc2:	2b00      	cmp	r3, #0
 801cfc4:	dd05      	ble.n	801cfd2 <_dtoa_r+0x83a>
 801cfc6:	9903      	ldr	r1, [sp, #12]
 801cfc8:	461a      	mov	r2, r3
 801cfca:	4648      	mov	r0, r9
 801cfcc:	f000 fcba 	bl	801d944 <__lshift>
 801cfd0:	9003      	str	r0, [sp, #12]
 801cfd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cfd4:	2b00      	cmp	r3, #0
 801cfd6:	dd05      	ble.n	801cfe4 <_dtoa_r+0x84c>
 801cfd8:	4621      	mov	r1, r4
 801cfda:	461a      	mov	r2, r3
 801cfdc:	4648      	mov	r0, r9
 801cfde:	f000 fcb1 	bl	801d944 <__lshift>
 801cfe2:	4604      	mov	r4, r0
 801cfe4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801cfe6:	2b00      	cmp	r3, #0
 801cfe8:	d061      	beq.n	801d0ae <_dtoa_r+0x916>
 801cfea:	9803      	ldr	r0, [sp, #12]
 801cfec:	4621      	mov	r1, r4
 801cfee:	f000 fd15 	bl	801da1c <__mcmp>
 801cff2:	2800      	cmp	r0, #0
 801cff4:	da5b      	bge.n	801d0ae <_dtoa_r+0x916>
 801cff6:	2300      	movs	r3, #0
 801cff8:	9903      	ldr	r1, [sp, #12]
 801cffa:	220a      	movs	r2, #10
 801cffc:	4648      	mov	r0, r9
 801cffe:	f000 fafd 	bl	801d5fc <__multadd>
 801d002:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d004:	9003      	str	r0, [sp, #12]
 801d006:	f107 38ff 	add.w	r8, r7, #4294967295
 801d00a:	2b00      	cmp	r3, #0
 801d00c:	f000 8177 	beq.w	801d2fe <_dtoa_r+0xb66>
 801d010:	4629      	mov	r1, r5
 801d012:	2300      	movs	r3, #0
 801d014:	220a      	movs	r2, #10
 801d016:	4648      	mov	r0, r9
 801d018:	f000 faf0 	bl	801d5fc <__multadd>
 801d01c:	f1bb 0f00 	cmp.w	fp, #0
 801d020:	4605      	mov	r5, r0
 801d022:	dc6f      	bgt.n	801d104 <_dtoa_r+0x96c>
 801d024:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801d026:	2b02      	cmp	r3, #2
 801d028:	dc49      	bgt.n	801d0be <_dtoa_r+0x926>
 801d02a:	e06b      	b.n	801d104 <_dtoa_r+0x96c>
 801d02c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801d02e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801d032:	e73c      	b.n	801ceae <_dtoa_r+0x716>
 801d034:	3fe00000 	.word	0x3fe00000
 801d038:	40240000 	.word	0x40240000
 801d03c:	9b08      	ldr	r3, [sp, #32]
 801d03e:	1e5c      	subs	r4, r3, #1
 801d040:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d042:	42a3      	cmp	r3, r4
 801d044:	db09      	blt.n	801d05a <_dtoa_r+0x8c2>
 801d046:	1b1c      	subs	r4, r3, r4
 801d048:	9b08      	ldr	r3, [sp, #32]
 801d04a:	2b00      	cmp	r3, #0
 801d04c:	f6bf af30 	bge.w	801ceb0 <_dtoa_r+0x718>
 801d050:	9b04      	ldr	r3, [sp, #16]
 801d052:	9a08      	ldr	r2, [sp, #32]
 801d054:	1a9e      	subs	r6, r3, r2
 801d056:	2300      	movs	r3, #0
 801d058:	e72b      	b.n	801ceb2 <_dtoa_r+0x71a>
 801d05a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d05c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d05e:	940a      	str	r4, [sp, #40]	@ 0x28
 801d060:	1ae3      	subs	r3, r4, r3
 801d062:	441a      	add	r2, r3
 801d064:	9e04      	ldr	r6, [sp, #16]
 801d066:	9b08      	ldr	r3, [sp, #32]
 801d068:	920e      	str	r2, [sp, #56]	@ 0x38
 801d06a:	2400      	movs	r4, #0
 801d06c:	e721      	b.n	801ceb2 <_dtoa_r+0x71a>
 801d06e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801d070:	9e04      	ldr	r6, [sp, #16]
 801d072:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801d074:	e728      	b.n	801cec8 <_dtoa_r+0x730>
 801d076:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801d07a:	e751      	b.n	801cf20 <_dtoa_r+0x788>
 801d07c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d07e:	9903      	ldr	r1, [sp, #12]
 801d080:	e750      	b.n	801cf24 <_dtoa_r+0x78c>
 801d082:	f8cd 800c 	str.w	r8, [sp, #12]
 801d086:	e751      	b.n	801cf2c <_dtoa_r+0x794>
 801d088:	2300      	movs	r3, #0
 801d08a:	e779      	b.n	801cf80 <_dtoa_r+0x7e8>
 801d08c:	9b06      	ldr	r3, [sp, #24]
 801d08e:	e777      	b.n	801cf80 <_dtoa_r+0x7e8>
 801d090:	2300      	movs	r3, #0
 801d092:	930a      	str	r3, [sp, #40]	@ 0x28
 801d094:	e779      	b.n	801cf8a <_dtoa_r+0x7f2>
 801d096:	d093      	beq.n	801cfc0 <_dtoa_r+0x828>
 801d098:	9a04      	ldr	r2, [sp, #16]
 801d09a:	331c      	adds	r3, #28
 801d09c:	441a      	add	r2, r3
 801d09e:	9204      	str	r2, [sp, #16]
 801d0a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d0a2:	441a      	add	r2, r3
 801d0a4:	441e      	add	r6, r3
 801d0a6:	9209      	str	r2, [sp, #36]	@ 0x24
 801d0a8:	e78a      	b.n	801cfc0 <_dtoa_r+0x828>
 801d0aa:	4603      	mov	r3, r0
 801d0ac:	e7f4      	b.n	801d098 <_dtoa_r+0x900>
 801d0ae:	9b08      	ldr	r3, [sp, #32]
 801d0b0:	2b00      	cmp	r3, #0
 801d0b2:	46b8      	mov	r8, r7
 801d0b4:	dc20      	bgt.n	801d0f8 <_dtoa_r+0x960>
 801d0b6:	469b      	mov	fp, r3
 801d0b8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801d0ba:	2b02      	cmp	r3, #2
 801d0bc:	dd1e      	ble.n	801d0fc <_dtoa_r+0x964>
 801d0be:	f1bb 0f00 	cmp.w	fp, #0
 801d0c2:	f47f adb1 	bne.w	801cc28 <_dtoa_r+0x490>
 801d0c6:	4621      	mov	r1, r4
 801d0c8:	465b      	mov	r3, fp
 801d0ca:	2205      	movs	r2, #5
 801d0cc:	4648      	mov	r0, r9
 801d0ce:	f000 fa95 	bl	801d5fc <__multadd>
 801d0d2:	4601      	mov	r1, r0
 801d0d4:	4604      	mov	r4, r0
 801d0d6:	9803      	ldr	r0, [sp, #12]
 801d0d8:	f000 fca0 	bl	801da1c <__mcmp>
 801d0dc:	2800      	cmp	r0, #0
 801d0de:	f77f ada3 	ble.w	801cc28 <_dtoa_r+0x490>
 801d0e2:	4656      	mov	r6, sl
 801d0e4:	2331      	movs	r3, #49	@ 0x31
 801d0e6:	f806 3b01 	strb.w	r3, [r6], #1
 801d0ea:	f108 0801 	add.w	r8, r8, #1
 801d0ee:	e59f      	b.n	801cc30 <_dtoa_r+0x498>
 801d0f0:	9c08      	ldr	r4, [sp, #32]
 801d0f2:	46b8      	mov	r8, r7
 801d0f4:	4625      	mov	r5, r4
 801d0f6:	e7f4      	b.n	801d0e2 <_dtoa_r+0x94a>
 801d0f8:	f8dd b020 	ldr.w	fp, [sp, #32]
 801d0fc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d0fe:	2b00      	cmp	r3, #0
 801d100:	f000 8101 	beq.w	801d306 <_dtoa_r+0xb6e>
 801d104:	2e00      	cmp	r6, #0
 801d106:	dd05      	ble.n	801d114 <_dtoa_r+0x97c>
 801d108:	4629      	mov	r1, r5
 801d10a:	4632      	mov	r2, r6
 801d10c:	4648      	mov	r0, r9
 801d10e:	f000 fc19 	bl	801d944 <__lshift>
 801d112:	4605      	mov	r5, r0
 801d114:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d116:	2b00      	cmp	r3, #0
 801d118:	d05c      	beq.n	801d1d4 <_dtoa_r+0xa3c>
 801d11a:	6869      	ldr	r1, [r5, #4]
 801d11c:	4648      	mov	r0, r9
 801d11e:	f000 fa0b 	bl	801d538 <_Balloc>
 801d122:	4606      	mov	r6, r0
 801d124:	b928      	cbnz	r0, 801d132 <_dtoa_r+0x99a>
 801d126:	4b82      	ldr	r3, [pc, #520]	@ (801d330 <_dtoa_r+0xb98>)
 801d128:	4602      	mov	r2, r0
 801d12a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801d12e:	f7ff bb47 	b.w	801c7c0 <_dtoa_r+0x28>
 801d132:	692a      	ldr	r2, [r5, #16]
 801d134:	3202      	adds	r2, #2
 801d136:	0092      	lsls	r2, r2, #2
 801d138:	f105 010c 	add.w	r1, r5, #12
 801d13c:	300c      	adds	r0, #12
 801d13e:	f000 fe2b 	bl	801dd98 <memcpy>
 801d142:	2201      	movs	r2, #1
 801d144:	4631      	mov	r1, r6
 801d146:	4648      	mov	r0, r9
 801d148:	f000 fbfc 	bl	801d944 <__lshift>
 801d14c:	f10a 0301 	add.w	r3, sl, #1
 801d150:	9304      	str	r3, [sp, #16]
 801d152:	eb0a 030b 	add.w	r3, sl, fp
 801d156:	930a      	str	r3, [sp, #40]	@ 0x28
 801d158:	9b06      	ldr	r3, [sp, #24]
 801d15a:	f003 0301 	and.w	r3, r3, #1
 801d15e:	462f      	mov	r7, r5
 801d160:	9309      	str	r3, [sp, #36]	@ 0x24
 801d162:	4605      	mov	r5, r0
 801d164:	9b04      	ldr	r3, [sp, #16]
 801d166:	9803      	ldr	r0, [sp, #12]
 801d168:	4621      	mov	r1, r4
 801d16a:	f103 3bff 	add.w	fp, r3, #4294967295
 801d16e:	f7ff fa8a 	bl	801c686 <quorem>
 801d172:	4603      	mov	r3, r0
 801d174:	3330      	adds	r3, #48	@ 0x30
 801d176:	9006      	str	r0, [sp, #24]
 801d178:	4639      	mov	r1, r7
 801d17a:	9803      	ldr	r0, [sp, #12]
 801d17c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d17e:	f000 fc4d 	bl	801da1c <__mcmp>
 801d182:	462a      	mov	r2, r5
 801d184:	9008      	str	r0, [sp, #32]
 801d186:	4621      	mov	r1, r4
 801d188:	4648      	mov	r0, r9
 801d18a:	f000 fc63 	bl	801da54 <__mdiff>
 801d18e:	68c2      	ldr	r2, [r0, #12]
 801d190:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d192:	4606      	mov	r6, r0
 801d194:	bb02      	cbnz	r2, 801d1d8 <_dtoa_r+0xa40>
 801d196:	4601      	mov	r1, r0
 801d198:	9803      	ldr	r0, [sp, #12]
 801d19a:	f000 fc3f 	bl	801da1c <__mcmp>
 801d19e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d1a0:	4602      	mov	r2, r0
 801d1a2:	4631      	mov	r1, r6
 801d1a4:	4648      	mov	r0, r9
 801d1a6:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 801d1aa:	f000 fa05 	bl	801d5b8 <_Bfree>
 801d1ae:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801d1b0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801d1b2:	9e04      	ldr	r6, [sp, #16]
 801d1b4:	ea42 0103 	orr.w	r1, r2, r3
 801d1b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d1ba:	4319      	orrs	r1, r3
 801d1bc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d1be:	d10d      	bne.n	801d1dc <_dtoa_r+0xa44>
 801d1c0:	2b39      	cmp	r3, #57	@ 0x39
 801d1c2:	d027      	beq.n	801d214 <_dtoa_r+0xa7c>
 801d1c4:	9a08      	ldr	r2, [sp, #32]
 801d1c6:	2a00      	cmp	r2, #0
 801d1c8:	dd01      	ble.n	801d1ce <_dtoa_r+0xa36>
 801d1ca:	9b06      	ldr	r3, [sp, #24]
 801d1cc:	3331      	adds	r3, #49	@ 0x31
 801d1ce:	f88b 3000 	strb.w	r3, [fp]
 801d1d2:	e52e      	b.n	801cc32 <_dtoa_r+0x49a>
 801d1d4:	4628      	mov	r0, r5
 801d1d6:	e7b9      	b.n	801d14c <_dtoa_r+0x9b4>
 801d1d8:	2201      	movs	r2, #1
 801d1da:	e7e2      	b.n	801d1a2 <_dtoa_r+0xa0a>
 801d1dc:	9908      	ldr	r1, [sp, #32]
 801d1de:	2900      	cmp	r1, #0
 801d1e0:	db04      	blt.n	801d1ec <_dtoa_r+0xa54>
 801d1e2:	9820      	ldr	r0, [sp, #128]	@ 0x80
 801d1e4:	4301      	orrs	r1, r0
 801d1e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801d1e8:	4301      	orrs	r1, r0
 801d1ea:	d120      	bne.n	801d22e <_dtoa_r+0xa96>
 801d1ec:	2a00      	cmp	r2, #0
 801d1ee:	ddee      	ble.n	801d1ce <_dtoa_r+0xa36>
 801d1f0:	9903      	ldr	r1, [sp, #12]
 801d1f2:	9304      	str	r3, [sp, #16]
 801d1f4:	2201      	movs	r2, #1
 801d1f6:	4648      	mov	r0, r9
 801d1f8:	f000 fba4 	bl	801d944 <__lshift>
 801d1fc:	4621      	mov	r1, r4
 801d1fe:	9003      	str	r0, [sp, #12]
 801d200:	f000 fc0c 	bl	801da1c <__mcmp>
 801d204:	2800      	cmp	r0, #0
 801d206:	9b04      	ldr	r3, [sp, #16]
 801d208:	dc02      	bgt.n	801d210 <_dtoa_r+0xa78>
 801d20a:	d1e0      	bne.n	801d1ce <_dtoa_r+0xa36>
 801d20c:	07da      	lsls	r2, r3, #31
 801d20e:	d5de      	bpl.n	801d1ce <_dtoa_r+0xa36>
 801d210:	2b39      	cmp	r3, #57	@ 0x39
 801d212:	d1da      	bne.n	801d1ca <_dtoa_r+0xa32>
 801d214:	2339      	movs	r3, #57	@ 0x39
 801d216:	f88b 3000 	strb.w	r3, [fp]
 801d21a:	4633      	mov	r3, r6
 801d21c:	461e      	mov	r6, r3
 801d21e:	3b01      	subs	r3, #1
 801d220:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801d224:	2a39      	cmp	r2, #57	@ 0x39
 801d226:	d04e      	beq.n	801d2c6 <_dtoa_r+0xb2e>
 801d228:	3201      	adds	r2, #1
 801d22a:	701a      	strb	r2, [r3, #0]
 801d22c:	e501      	b.n	801cc32 <_dtoa_r+0x49a>
 801d22e:	2a00      	cmp	r2, #0
 801d230:	dd03      	ble.n	801d23a <_dtoa_r+0xaa2>
 801d232:	2b39      	cmp	r3, #57	@ 0x39
 801d234:	d0ee      	beq.n	801d214 <_dtoa_r+0xa7c>
 801d236:	3301      	adds	r3, #1
 801d238:	e7c9      	b.n	801d1ce <_dtoa_r+0xa36>
 801d23a:	9a04      	ldr	r2, [sp, #16]
 801d23c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801d23e:	f802 3c01 	strb.w	r3, [r2, #-1]
 801d242:	428a      	cmp	r2, r1
 801d244:	d028      	beq.n	801d298 <_dtoa_r+0xb00>
 801d246:	9903      	ldr	r1, [sp, #12]
 801d248:	2300      	movs	r3, #0
 801d24a:	220a      	movs	r2, #10
 801d24c:	4648      	mov	r0, r9
 801d24e:	f000 f9d5 	bl	801d5fc <__multadd>
 801d252:	42af      	cmp	r7, r5
 801d254:	9003      	str	r0, [sp, #12]
 801d256:	f04f 0300 	mov.w	r3, #0
 801d25a:	f04f 020a 	mov.w	r2, #10
 801d25e:	4639      	mov	r1, r7
 801d260:	4648      	mov	r0, r9
 801d262:	d107      	bne.n	801d274 <_dtoa_r+0xadc>
 801d264:	f000 f9ca 	bl	801d5fc <__multadd>
 801d268:	4607      	mov	r7, r0
 801d26a:	4605      	mov	r5, r0
 801d26c:	9b04      	ldr	r3, [sp, #16]
 801d26e:	3301      	adds	r3, #1
 801d270:	9304      	str	r3, [sp, #16]
 801d272:	e777      	b.n	801d164 <_dtoa_r+0x9cc>
 801d274:	f000 f9c2 	bl	801d5fc <__multadd>
 801d278:	4629      	mov	r1, r5
 801d27a:	4607      	mov	r7, r0
 801d27c:	2300      	movs	r3, #0
 801d27e:	220a      	movs	r2, #10
 801d280:	4648      	mov	r0, r9
 801d282:	f000 f9bb 	bl	801d5fc <__multadd>
 801d286:	4605      	mov	r5, r0
 801d288:	e7f0      	b.n	801d26c <_dtoa_r+0xad4>
 801d28a:	f1bb 0f00 	cmp.w	fp, #0
 801d28e:	bfcc      	ite	gt
 801d290:	465e      	movgt	r6, fp
 801d292:	2601      	movle	r6, #1
 801d294:	4456      	add	r6, sl
 801d296:	2700      	movs	r7, #0
 801d298:	9903      	ldr	r1, [sp, #12]
 801d29a:	9304      	str	r3, [sp, #16]
 801d29c:	2201      	movs	r2, #1
 801d29e:	4648      	mov	r0, r9
 801d2a0:	f000 fb50 	bl	801d944 <__lshift>
 801d2a4:	4621      	mov	r1, r4
 801d2a6:	9003      	str	r0, [sp, #12]
 801d2a8:	f000 fbb8 	bl	801da1c <__mcmp>
 801d2ac:	2800      	cmp	r0, #0
 801d2ae:	dcb4      	bgt.n	801d21a <_dtoa_r+0xa82>
 801d2b0:	d102      	bne.n	801d2b8 <_dtoa_r+0xb20>
 801d2b2:	9b04      	ldr	r3, [sp, #16]
 801d2b4:	07db      	lsls	r3, r3, #31
 801d2b6:	d4b0      	bmi.n	801d21a <_dtoa_r+0xa82>
 801d2b8:	4633      	mov	r3, r6
 801d2ba:	461e      	mov	r6, r3
 801d2bc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801d2c0:	2a30      	cmp	r2, #48	@ 0x30
 801d2c2:	d0fa      	beq.n	801d2ba <_dtoa_r+0xb22>
 801d2c4:	e4b5      	b.n	801cc32 <_dtoa_r+0x49a>
 801d2c6:	459a      	cmp	sl, r3
 801d2c8:	d1a8      	bne.n	801d21c <_dtoa_r+0xa84>
 801d2ca:	2331      	movs	r3, #49	@ 0x31
 801d2cc:	f108 0801 	add.w	r8, r8, #1
 801d2d0:	f88a 3000 	strb.w	r3, [sl]
 801d2d4:	e4ad      	b.n	801cc32 <_dtoa_r+0x49a>
 801d2d6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801d2d8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 801d334 <_dtoa_r+0xb9c>
 801d2dc:	b11b      	cbz	r3, 801d2e6 <_dtoa_r+0xb4e>
 801d2de:	f10a 0308 	add.w	r3, sl, #8
 801d2e2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801d2e4:	6013      	str	r3, [r2, #0]
 801d2e6:	4650      	mov	r0, sl
 801d2e8:	b017      	add	sp, #92	@ 0x5c
 801d2ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d2ee:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801d2f0:	2b01      	cmp	r3, #1
 801d2f2:	f77f ae2e 	ble.w	801cf52 <_dtoa_r+0x7ba>
 801d2f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d2f8:	930a      	str	r3, [sp, #40]	@ 0x28
 801d2fa:	2001      	movs	r0, #1
 801d2fc:	e64d      	b.n	801cf9a <_dtoa_r+0x802>
 801d2fe:	f1bb 0f00 	cmp.w	fp, #0
 801d302:	f77f aed9 	ble.w	801d0b8 <_dtoa_r+0x920>
 801d306:	4656      	mov	r6, sl
 801d308:	9803      	ldr	r0, [sp, #12]
 801d30a:	4621      	mov	r1, r4
 801d30c:	f7ff f9bb 	bl	801c686 <quorem>
 801d310:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 801d314:	f806 3b01 	strb.w	r3, [r6], #1
 801d318:	eba6 020a 	sub.w	r2, r6, sl
 801d31c:	4593      	cmp	fp, r2
 801d31e:	ddb4      	ble.n	801d28a <_dtoa_r+0xaf2>
 801d320:	9903      	ldr	r1, [sp, #12]
 801d322:	2300      	movs	r3, #0
 801d324:	220a      	movs	r2, #10
 801d326:	4648      	mov	r0, r9
 801d328:	f000 f968 	bl	801d5fc <__multadd>
 801d32c:	9003      	str	r0, [sp, #12]
 801d32e:	e7eb      	b.n	801d308 <_dtoa_r+0xb70>
 801d330:	0801f65c 	.word	0x0801f65c
 801d334:	0801f5e0 	.word	0x0801f5e0

0801d338 <_free_r>:
 801d338:	b538      	push	{r3, r4, r5, lr}
 801d33a:	4605      	mov	r5, r0
 801d33c:	2900      	cmp	r1, #0
 801d33e:	d041      	beq.n	801d3c4 <_free_r+0x8c>
 801d340:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d344:	1f0c      	subs	r4, r1, #4
 801d346:	2b00      	cmp	r3, #0
 801d348:	bfb8      	it	lt
 801d34a:	18e4      	addlt	r4, r4, r3
 801d34c:	f000 f8e8 	bl	801d520 <__malloc_lock>
 801d350:	4a1d      	ldr	r2, [pc, #116]	@ (801d3c8 <_free_r+0x90>)
 801d352:	6813      	ldr	r3, [r2, #0]
 801d354:	b933      	cbnz	r3, 801d364 <_free_r+0x2c>
 801d356:	6063      	str	r3, [r4, #4]
 801d358:	6014      	str	r4, [r2, #0]
 801d35a:	4628      	mov	r0, r5
 801d35c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d360:	f000 b8e4 	b.w	801d52c <__malloc_unlock>
 801d364:	42a3      	cmp	r3, r4
 801d366:	d908      	bls.n	801d37a <_free_r+0x42>
 801d368:	6820      	ldr	r0, [r4, #0]
 801d36a:	1821      	adds	r1, r4, r0
 801d36c:	428b      	cmp	r3, r1
 801d36e:	bf01      	itttt	eq
 801d370:	6819      	ldreq	r1, [r3, #0]
 801d372:	685b      	ldreq	r3, [r3, #4]
 801d374:	1809      	addeq	r1, r1, r0
 801d376:	6021      	streq	r1, [r4, #0]
 801d378:	e7ed      	b.n	801d356 <_free_r+0x1e>
 801d37a:	461a      	mov	r2, r3
 801d37c:	685b      	ldr	r3, [r3, #4]
 801d37e:	b10b      	cbz	r3, 801d384 <_free_r+0x4c>
 801d380:	42a3      	cmp	r3, r4
 801d382:	d9fa      	bls.n	801d37a <_free_r+0x42>
 801d384:	6811      	ldr	r1, [r2, #0]
 801d386:	1850      	adds	r0, r2, r1
 801d388:	42a0      	cmp	r0, r4
 801d38a:	d10b      	bne.n	801d3a4 <_free_r+0x6c>
 801d38c:	6820      	ldr	r0, [r4, #0]
 801d38e:	4401      	add	r1, r0
 801d390:	1850      	adds	r0, r2, r1
 801d392:	4283      	cmp	r3, r0
 801d394:	6011      	str	r1, [r2, #0]
 801d396:	d1e0      	bne.n	801d35a <_free_r+0x22>
 801d398:	6818      	ldr	r0, [r3, #0]
 801d39a:	685b      	ldr	r3, [r3, #4]
 801d39c:	6053      	str	r3, [r2, #4]
 801d39e:	4408      	add	r0, r1
 801d3a0:	6010      	str	r0, [r2, #0]
 801d3a2:	e7da      	b.n	801d35a <_free_r+0x22>
 801d3a4:	d902      	bls.n	801d3ac <_free_r+0x74>
 801d3a6:	230c      	movs	r3, #12
 801d3a8:	602b      	str	r3, [r5, #0]
 801d3aa:	e7d6      	b.n	801d35a <_free_r+0x22>
 801d3ac:	6820      	ldr	r0, [r4, #0]
 801d3ae:	1821      	adds	r1, r4, r0
 801d3b0:	428b      	cmp	r3, r1
 801d3b2:	bf04      	itt	eq
 801d3b4:	6819      	ldreq	r1, [r3, #0]
 801d3b6:	685b      	ldreq	r3, [r3, #4]
 801d3b8:	6063      	str	r3, [r4, #4]
 801d3ba:	bf04      	itt	eq
 801d3bc:	1809      	addeq	r1, r1, r0
 801d3be:	6021      	streq	r1, [r4, #0]
 801d3c0:	6054      	str	r4, [r2, #4]
 801d3c2:	e7ca      	b.n	801d35a <_free_r+0x22>
 801d3c4:	bd38      	pop	{r3, r4, r5, pc}
 801d3c6:	bf00      	nop
 801d3c8:	20002508 	.word	0x20002508

0801d3cc <malloc>:
 801d3cc:	4b02      	ldr	r3, [pc, #8]	@ (801d3d8 <malloc+0xc>)
 801d3ce:	4601      	mov	r1, r0
 801d3d0:	6818      	ldr	r0, [r3, #0]
 801d3d2:	f000 b825 	b.w	801d420 <_malloc_r>
 801d3d6:	bf00      	nop
 801d3d8:	2000014c 	.word	0x2000014c

0801d3dc <sbrk_aligned>:
 801d3dc:	b570      	push	{r4, r5, r6, lr}
 801d3de:	4e0f      	ldr	r6, [pc, #60]	@ (801d41c <sbrk_aligned+0x40>)
 801d3e0:	460c      	mov	r4, r1
 801d3e2:	6831      	ldr	r1, [r6, #0]
 801d3e4:	4605      	mov	r5, r0
 801d3e6:	b911      	cbnz	r1, 801d3ee <sbrk_aligned+0x12>
 801d3e8:	f000 fcc6 	bl	801dd78 <_sbrk_r>
 801d3ec:	6030      	str	r0, [r6, #0]
 801d3ee:	4621      	mov	r1, r4
 801d3f0:	4628      	mov	r0, r5
 801d3f2:	f000 fcc1 	bl	801dd78 <_sbrk_r>
 801d3f6:	1c43      	adds	r3, r0, #1
 801d3f8:	d103      	bne.n	801d402 <sbrk_aligned+0x26>
 801d3fa:	f04f 34ff 	mov.w	r4, #4294967295
 801d3fe:	4620      	mov	r0, r4
 801d400:	bd70      	pop	{r4, r5, r6, pc}
 801d402:	1cc4      	adds	r4, r0, #3
 801d404:	f024 0403 	bic.w	r4, r4, #3
 801d408:	42a0      	cmp	r0, r4
 801d40a:	d0f8      	beq.n	801d3fe <sbrk_aligned+0x22>
 801d40c:	1a21      	subs	r1, r4, r0
 801d40e:	4628      	mov	r0, r5
 801d410:	f000 fcb2 	bl	801dd78 <_sbrk_r>
 801d414:	3001      	adds	r0, #1
 801d416:	d1f2      	bne.n	801d3fe <sbrk_aligned+0x22>
 801d418:	e7ef      	b.n	801d3fa <sbrk_aligned+0x1e>
 801d41a:	bf00      	nop
 801d41c:	20002504 	.word	0x20002504

0801d420 <_malloc_r>:
 801d420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d424:	1ccd      	adds	r5, r1, #3
 801d426:	f025 0503 	bic.w	r5, r5, #3
 801d42a:	3508      	adds	r5, #8
 801d42c:	2d0c      	cmp	r5, #12
 801d42e:	bf38      	it	cc
 801d430:	250c      	movcc	r5, #12
 801d432:	2d00      	cmp	r5, #0
 801d434:	4606      	mov	r6, r0
 801d436:	db01      	blt.n	801d43c <_malloc_r+0x1c>
 801d438:	42a9      	cmp	r1, r5
 801d43a:	d904      	bls.n	801d446 <_malloc_r+0x26>
 801d43c:	230c      	movs	r3, #12
 801d43e:	6033      	str	r3, [r6, #0]
 801d440:	2000      	movs	r0, #0
 801d442:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d446:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801d51c <_malloc_r+0xfc>
 801d44a:	f000 f869 	bl	801d520 <__malloc_lock>
 801d44e:	f8d8 3000 	ldr.w	r3, [r8]
 801d452:	461c      	mov	r4, r3
 801d454:	bb44      	cbnz	r4, 801d4a8 <_malloc_r+0x88>
 801d456:	4629      	mov	r1, r5
 801d458:	4630      	mov	r0, r6
 801d45a:	f7ff ffbf 	bl	801d3dc <sbrk_aligned>
 801d45e:	1c43      	adds	r3, r0, #1
 801d460:	4604      	mov	r4, r0
 801d462:	d158      	bne.n	801d516 <_malloc_r+0xf6>
 801d464:	f8d8 4000 	ldr.w	r4, [r8]
 801d468:	4627      	mov	r7, r4
 801d46a:	2f00      	cmp	r7, #0
 801d46c:	d143      	bne.n	801d4f6 <_malloc_r+0xd6>
 801d46e:	2c00      	cmp	r4, #0
 801d470:	d04b      	beq.n	801d50a <_malloc_r+0xea>
 801d472:	6823      	ldr	r3, [r4, #0]
 801d474:	4639      	mov	r1, r7
 801d476:	4630      	mov	r0, r6
 801d478:	eb04 0903 	add.w	r9, r4, r3
 801d47c:	f000 fc7c 	bl	801dd78 <_sbrk_r>
 801d480:	4581      	cmp	r9, r0
 801d482:	d142      	bne.n	801d50a <_malloc_r+0xea>
 801d484:	6821      	ldr	r1, [r4, #0]
 801d486:	1a6d      	subs	r5, r5, r1
 801d488:	4629      	mov	r1, r5
 801d48a:	4630      	mov	r0, r6
 801d48c:	f7ff ffa6 	bl	801d3dc <sbrk_aligned>
 801d490:	3001      	adds	r0, #1
 801d492:	d03a      	beq.n	801d50a <_malloc_r+0xea>
 801d494:	6823      	ldr	r3, [r4, #0]
 801d496:	442b      	add	r3, r5
 801d498:	6023      	str	r3, [r4, #0]
 801d49a:	f8d8 3000 	ldr.w	r3, [r8]
 801d49e:	685a      	ldr	r2, [r3, #4]
 801d4a0:	bb62      	cbnz	r2, 801d4fc <_malloc_r+0xdc>
 801d4a2:	f8c8 7000 	str.w	r7, [r8]
 801d4a6:	e00f      	b.n	801d4c8 <_malloc_r+0xa8>
 801d4a8:	6822      	ldr	r2, [r4, #0]
 801d4aa:	1b52      	subs	r2, r2, r5
 801d4ac:	d420      	bmi.n	801d4f0 <_malloc_r+0xd0>
 801d4ae:	2a0b      	cmp	r2, #11
 801d4b0:	d917      	bls.n	801d4e2 <_malloc_r+0xc2>
 801d4b2:	1961      	adds	r1, r4, r5
 801d4b4:	42a3      	cmp	r3, r4
 801d4b6:	6025      	str	r5, [r4, #0]
 801d4b8:	bf18      	it	ne
 801d4ba:	6059      	strne	r1, [r3, #4]
 801d4bc:	6863      	ldr	r3, [r4, #4]
 801d4be:	bf08      	it	eq
 801d4c0:	f8c8 1000 	streq.w	r1, [r8]
 801d4c4:	5162      	str	r2, [r4, r5]
 801d4c6:	604b      	str	r3, [r1, #4]
 801d4c8:	4630      	mov	r0, r6
 801d4ca:	f000 f82f 	bl	801d52c <__malloc_unlock>
 801d4ce:	f104 000b 	add.w	r0, r4, #11
 801d4d2:	1d23      	adds	r3, r4, #4
 801d4d4:	f020 0007 	bic.w	r0, r0, #7
 801d4d8:	1ac2      	subs	r2, r0, r3
 801d4da:	bf1c      	itt	ne
 801d4dc:	1a1b      	subne	r3, r3, r0
 801d4de:	50a3      	strne	r3, [r4, r2]
 801d4e0:	e7af      	b.n	801d442 <_malloc_r+0x22>
 801d4e2:	6862      	ldr	r2, [r4, #4]
 801d4e4:	42a3      	cmp	r3, r4
 801d4e6:	bf0c      	ite	eq
 801d4e8:	f8c8 2000 	streq.w	r2, [r8]
 801d4ec:	605a      	strne	r2, [r3, #4]
 801d4ee:	e7eb      	b.n	801d4c8 <_malloc_r+0xa8>
 801d4f0:	4623      	mov	r3, r4
 801d4f2:	6864      	ldr	r4, [r4, #4]
 801d4f4:	e7ae      	b.n	801d454 <_malloc_r+0x34>
 801d4f6:	463c      	mov	r4, r7
 801d4f8:	687f      	ldr	r7, [r7, #4]
 801d4fa:	e7b6      	b.n	801d46a <_malloc_r+0x4a>
 801d4fc:	461a      	mov	r2, r3
 801d4fe:	685b      	ldr	r3, [r3, #4]
 801d500:	42a3      	cmp	r3, r4
 801d502:	d1fb      	bne.n	801d4fc <_malloc_r+0xdc>
 801d504:	2300      	movs	r3, #0
 801d506:	6053      	str	r3, [r2, #4]
 801d508:	e7de      	b.n	801d4c8 <_malloc_r+0xa8>
 801d50a:	230c      	movs	r3, #12
 801d50c:	6033      	str	r3, [r6, #0]
 801d50e:	4630      	mov	r0, r6
 801d510:	f000 f80c 	bl	801d52c <__malloc_unlock>
 801d514:	e794      	b.n	801d440 <_malloc_r+0x20>
 801d516:	6005      	str	r5, [r0, #0]
 801d518:	e7d6      	b.n	801d4c8 <_malloc_r+0xa8>
 801d51a:	bf00      	nop
 801d51c:	20002508 	.word	0x20002508

0801d520 <__malloc_lock>:
 801d520:	4801      	ldr	r0, [pc, #4]	@ (801d528 <__malloc_lock+0x8>)
 801d522:	f7ff b8ae 	b.w	801c682 <__retarget_lock_acquire_recursive>
 801d526:	bf00      	nop
 801d528:	20002500 	.word	0x20002500

0801d52c <__malloc_unlock>:
 801d52c:	4801      	ldr	r0, [pc, #4]	@ (801d534 <__malloc_unlock+0x8>)
 801d52e:	f7ff b8a9 	b.w	801c684 <__retarget_lock_release_recursive>
 801d532:	bf00      	nop
 801d534:	20002500 	.word	0x20002500

0801d538 <_Balloc>:
 801d538:	b570      	push	{r4, r5, r6, lr}
 801d53a:	69c6      	ldr	r6, [r0, #28]
 801d53c:	4604      	mov	r4, r0
 801d53e:	460d      	mov	r5, r1
 801d540:	b976      	cbnz	r6, 801d560 <_Balloc+0x28>
 801d542:	2010      	movs	r0, #16
 801d544:	f7ff ff42 	bl	801d3cc <malloc>
 801d548:	4602      	mov	r2, r0
 801d54a:	61e0      	str	r0, [r4, #28]
 801d54c:	b920      	cbnz	r0, 801d558 <_Balloc+0x20>
 801d54e:	4b18      	ldr	r3, [pc, #96]	@ (801d5b0 <_Balloc+0x78>)
 801d550:	4818      	ldr	r0, [pc, #96]	@ (801d5b4 <_Balloc+0x7c>)
 801d552:	216b      	movs	r1, #107	@ 0x6b
 801d554:	f000 fc2e 	bl	801ddb4 <__assert_func>
 801d558:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801d55c:	6006      	str	r6, [r0, #0]
 801d55e:	60c6      	str	r6, [r0, #12]
 801d560:	69e6      	ldr	r6, [r4, #28]
 801d562:	68f3      	ldr	r3, [r6, #12]
 801d564:	b183      	cbz	r3, 801d588 <_Balloc+0x50>
 801d566:	69e3      	ldr	r3, [r4, #28]
 801d568:	68db      	ldr	r3, [r3, #12]
 801d56a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801d56e:	b9b8      	cbnz	r0, 801d5a0 <_Balloc+0x68>
 801d570:	2101      	movs	r1, #1
 801d572:	fa01 f605 	lsl.w	r6, r1, r5
 801d576:	1d72      	adds	r2, r6, #5
 801d578:	0092      	lsls	r2, r2, #2
 801d57a:	4620      	mov	r0, r4
 801d57c:	f000 fc38 	bl	801ddf0 <_calloc_r>
 801d580:	b160      	cbz	r0, 801d59c <_Balloc+0x64>
 801d582:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801d586:	e00e      	b.n	801d5a6 <_Balloc+0x6e>
 801d588:	2221      	movs	r2, #33	@ 0x21
 801d58a:	2104      	movs	r1, #4
 801d58c:	4620      	mov	r0, r4
 801d58e:	f000 fc2f 	bl	801ddf0 <_calloc_r>
 801d592:	69e3      	ldr	r3, [r4, #28]
 801d594:	60f0      	str	r0, [r6, #12]
 801d596:	68db      	ldr	r3, [r3, #12]
 801d598:	2b00      	cmp	r3, #0
 801d59a:	d1e4      	bne.n	801d566 <_Balloc+0x2e>
 801d59c:	2000      	movs	r0, #0
 801d59e:	bd70      	pop	{r4, r5, r6, pc}
 801d5a0:	6802      	ldr	r2, [r0, #0]
 801d5a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801d5a6:	2300      	movs	r3, #0
 801d5a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801d5ac:	e7f7      	b.n	801d59e <_Balloc+0x66>
 801d5ae:	bf00      	nop
 801d5b0:	0801f5ed 	.word	0x0801f5ed
 801d5b4:	0801f66d 	.word	0x0801f66d

0801d5b8 <_Bfree>:
 801d5b8:	b570      	push	{r4, r5, r6, lr}
 801d5ba:	69c6      	ldr	r6, [r0, #28]
 801d5bc:	4605      	mov	r5, r0
 801d5be:	460c      	mov	r4, r1
 801d5c0:	b976      	cbnz	r6, 801d5e0 <_Bfree+0x28>
 801d5c2:	2010      	movs	r0, #16
 801d5c4:	f7ff ff02 	bl	801d3cc <malloc>
 801d5c8:	4602      	mov	r2, r0
 801d5ca:	61e8      	str	r0, [r5, #28]
 801d5cc:	b920      	cbnz	r0, 801d5d8 <_Bfree+0x20>
 801d5ce:	4b09      	ldr	r3, [pc, #36]	@ (801d5f4 <_Bfree+0x3c>)
 801d5d0:	4809      	ldr	r0, [pc, #36]	@ (801d5f8 <_Bfree+0x40>)
 801d5d2:	218f      	movs	r1, #143	@ 0x8f
 801d5d4:	f000 fbee 	bl	801ddb4 <__assert_func>
 801d5d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801d5dc:	6006      	str	r6, [r0, #0]
 801d5de:	60c6      	str	r6, [r0, #12]
 801d5e0:	b13c      	cbz	r4, 801d5f2 <_Bfree+0x3a>
 801d5e2:	69eb      	ldr	r3, [r5, #28]
 801d5e4:	6862      	ldr	r2, [r4, #4]
 801d5e6:	68db      	ldr	r3, [r3, #12]
 801d5e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801d5ec:	6021      	str	r1, [r4, #0]
 801d5ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801d5f2:	bd70      	pop	{r4, r5, r6, pc}
 801d5f4:	0801f5ed 	.word	0x0801f5ed
 801d5f8:	0801f66d 	.word	0x0801f66d

0801d5fc <__multadd>:
 801d5fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d600:	690d      	ldr	r5, [r1, #16]
 801d602:	4607      	mov	r7, r0
 801d604:	460c      	mov	r4, r1
 801d606:	461e      	mov	r6, r3
 801d608:	f101 0c14 	add.w	ip, r1, #20
 801d60c:	2000      	movs	r0, #0
 801d60e:	f8dc 3000 	ldr.w	r3, [ip]
 801d612:	b299      	uxth	r1, r3
 801d614:	fb02 6101 	mla	r1, r2, r1, r6
 801d618:	0c1e      	lsrs	r6, r3, #16
 801d61a:	0c0b      	lsrs	r3, r1, #16
 801d61c:	fb02 3306 	mla	r3, r2, r6, r3
 801d620:	b289      	uxth	r1, r1
 801d622:	3001      	adds	r0, #1
 801d624:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801d628:	4285      	cmp	r5, r0
 801d62a:	f84c 1b04 	str.w	r1, [ip], #4
 801d62e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801d632:	dcec      	bgt.n	801d60e <__multadd+0x12>
 801d634:	b30e      	cbz	r6, 801d67a <__multadd+0x7e>
 801d636:	68a3      	ldr	r3, [r4, #8]
 801d638:	42ab      	cmp	r3, r5
 801d63a:	dc19      	bgt.n	801d670 <__multadd+0x74>
 801d63c:	6861      	ldr	r1, [r4, #4]
 801d63e:	4638      	mov	r0, r7
 801d640:	3101      	adds	r1, #1
 801d642:	f7ff ff79 	bl	801d538 <_Balloc>
 801d646:	4680      	mov	r8, r0
 801d648:	b928      	cbnz	r0, 801d656 <__multadd+0x5a>
 801d64a:	4602      	mov	r2, r0
 801d64c:	4b0c      	ldr	r3, [pc, #48]	@ (801d680 <__multadd+0x84>)
 801d64e:	480d      	ldr	r0, [pc, #52]	@ (801d684 <__multadd+0x88>)
 801d650:	21ba      	movs	r1, #186	@ 0xba
 801d652:	f000 fbaf 	bl	801ddb4 <__assert_func>
 801d656:	6922      	ldr	r2, [r4, #16]
 801d658:	3202      	adds	r2, #2
 801d65a:	f104 010c 	add.w	r1, r4, #12
 801d65e:	0092      	lsls	r2, r2, #2
 801d660:	300c      	adds	r0, #12
 801d662:	f000 fb99 	bl	801dd98 <memcpy>
 801d666:	4621      	mov	r1, r4
 801d668:	4638      	mov	r0, r7
 801d66a:	f7ff ffa5 	bl	801d5b8 <_Bfree>
 801d66e:	4644      	mov	r4, r8
 801d670:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801d674:	3501      	adds	r5, #1
 801d676:	615e      	str	r6, [r3, #20]
 801d678:	6125      	str	r5, [r4, #16]
 801d67a:	4620      	mov	r0, r4
 801d67c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d680:	0801f65c 	.word	0x0801f65c
 801d684:	0801f66d 	.word	0x0801f66d

0801d688 <__hi0bits>:
 801d688:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801d68c:	4603      	mov	r3, r0
 801d68e:	bf36      	itet	cc
 801d690:	0403      	lslcc	r3, r0, #16
 801d692:	2000      	movcs	r0, #0
 801d694:	2010      	movcc	r0, #16
 801d696:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801d69a:	bf3c      	itt	cc
 801d69c:	021b      	lslcc	r3, r3, #8
 801d69e:	3008      	addcc	r0, #8
 801d6a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801d6a4:	bf3c      	itt	cc
 801d6a6:	011b      	lslcc	r3, r3, #4
 801d6a8:	3004      	addcc	r0, #4
 801d6aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801d6ae:	bf3c      	itt	cc
 801d6b0:	009b      	lslcc	r3, r3, #2
 801d6b2:	3002      	addcc	r0, #2
 801d6b4:	2b00      	cmp	r3, #0
 801d6b6:	db05      	blt.n	801d6c4 <__hi0bits+0x3c>
 801d6b8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801d6bc:	f100 0001 	add.w	r0, r0, #1
 801d6c0:	bf08      	it	eq
 801d6c2:	2020      	moveq	r0, #32
 801d6c4:	4770      	bx	lr

0801d6c6 <__lo0bits>:
 801d6c6:	6803      	ldr	r3, [r0, #0]
 801d6c8:	4602      	mov	r2, r0
 801d6ca:	f013 0007 	ands.w	r0, r3, #7
 801d6ce:	d00b      	beq.n	801d6e8 <__lo0bits+0x22>
 801d6d0:	07d9      	lsls	r1, r3, #31
 801d6d2:	d421      	bmi.n	801d718 <__lo0bits+0x52>
 801d6d4:	0798      	lsls	r0, r3, #30
 801d6d6:	bf49      	itett	mi
 801d6d8:	085b      	lsrmi	r3, r3, #1
 801d6da:	089b      	lsrpl	r3, r3, #2
 801d6dc:	2001      	movmi	r0, #1
 801d6de:	6013      	strmi	r3, [r2, #0]
 801d6e0:	bf5c      	itt	pl
 801d6e2:	6013      	strpl	r3, [r2, #0]
 801d6e4:	2002      	movpl	r0, #2
 801d6e6:	4770      	bx	lr
 801d6e8:	b299      	uxth	r1, r3
 801d6ea:	b909      	cbnz	r1, 801d6f0 <__lo0bits+0x2a>
 801d6ec:	0c1b      	lsrs	r3, r3, #16
 801d6ee:	2010      	movs	r0, #16
 801d6f0:	b2d9      	uxtb	r1, r3
 801d6f2:	b909      	cbnz	r1, 801d6f8 <__lo0bits+0x32>
 801d6f4:	3008      	adds	r0, #8
 801d6f6:	0a1b      	lsrs	r3, r3, #8
 801d6f8:	0719      	lsls	r1, r3, #28
 801d6fa:	bf04      	itt	eq
 801d6fc:	091b      	lsreq	r3, r3, #4
 801d6fe:	3004      	addeq	r0, #4
 801d700:	0799      	lsls	r1, r3, #30
 801d702:	bf04      	itt	eq
 801d704:	089b      	lsreq	r3, r3, #2
 801d706:	3002      	addeq	r0, #2
 801d708:	07d9      	lsls	r1, r3, #31
 801d70a:	d403      	bmi.n	801d714 <__lo0bits+0x4e>
 801d70c:	085b      	lsrs	r3, r3, #1
 801d70e:	f100 0001 	add.w	r0, r0, #1
 801d712:	d003      	beq.n	801d71c <__lo0bits+0x56>
 801d714:	6013      	str	r3, [r2, #0]
 801d716:	4770      	bx	lr
 801d718:	2000      	movs	r0, #0
 801d71a:	4770      	bx	lr
 801d71c:	2020      	movs	r0, #32
 801d71e:	4770      	bx	lr

0801d720 <__i2b>:
 801d720:	b510      	push	{r4, lr}
 801d722:	460c      	mov	r4, r1
 801d724:	2101      	movs	r1, #1
 801d726:	f7ff ff07 	bl	801d538 <_Balloc>
 801d72a:	4602      	mov	r2, r0
 801d72c:	b928      	cbnz	r0, 801d73a <__i2b+0x1a>
 801d72e:	4b05      	ldr	r3, [pc, #20]	@ (801d744 <__i2b+0x24>)
 801d730:	4805      	ldr	r0, [pc, #20]	@ (801d748 <__i2b+0x28>)
 801d732:	f240 1145 	movw	r1, #325	@ 0x145
 801d736:	f000 fb3d 	bl	801ddb4 <__assert_func>
 801d73a:	2301      	movs	r3, #1
 801d73c:	6144      	str	r4, [r0, #20]
 801d73e:	6103      	str	r3, [r0, #16]
 801d740:	bd10      	pop	{r4, pc}
 801d742:	bf00      	nop
 801d744:	0801f65c 	.word	0x0801f65c
 801d748:	0801f66d 	.word	0x0801f66d

0801d74c <__multiply>:
 801d74c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d750:	4617      	mov	r7, r2
 801d752:	690a      	ldr	r2, [r1, #16]
 801d754:	693b      	ldr	r3, [r7, #16]
 801d756:	429a      	cmp	r2, r3
 801d758:	bfa8      	it	ge
 801d75a:	463b      	movge	r3, r7
 801d75c:	4689      	mov	r9, r1
 801d75e:	bfa4      	itt	ge
 801d760:	460f      	movge	r7, r1
 801d762:	4699      	movge	r9, r3
 801d764:	693d      	ldr	r5, [r7, #16]
 801d766:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801d76a:	68bb      	ldr	r3, [r7, #8]
 801d76c:	6879      	ldr	r1, [r7, #4]
 801d76e:	eb05 060a 	add.w	r6, r5, sl
 801d772:	42b3      	cmp	r3, r6
 801d774:	b085      	sub	sp, #20
 801d776:	bfb8      	it	lt
 801d778:	3101      	addlt	r1, #1
 801d77a:	f7ff fedd 	bl	801d538 <_Balloc>
 801d77e:	b930      	cbnz	r0, 801d78e <__multiply+0x42>
 801d780:	4602      	mov	r2, r0
 801d782:	4b41      	ldr	r3, [pc, #260]	@ (801d888 <__multiply+0x13c>)
 801d784:	4841      	ldr	r0, [pc, #260]	@ (801d88c <__multiply+0x140>)
 801d786:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801d78a:	f000 fb13 	bl	801ddb4 <__assert_func>
 801d78e:	f100 0414 	add.w	r4, r0, #20
 801d792:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 801d796:	4623      	mov	r3, r4
 801d798:	2200      	movs	r2, #0
 801d79a:	4573      	cmp	r3, lr
 801d79c:	d320      	bcc.n	801d7e0 <__multiply+0x94>
 801d79e:	f107 0814 	add.w	r8, r7, #20
 801d7a2:	f109 0114 	add.w	r1, r9, #20
 801d7a6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 801d7aa:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 801d7ae:	9302      	str	r3, [sp, #8]
 801d7b0:	1beb      	subs	r3, r5, r7
 801d7b2:	3b15      	subs	r3, #21
 801d7b4:	f023 0303 	bic.w	r3, r3, #3
 801d7b8:	3304      	adds	r3, #4
 801d7ba:	3715      	adds	r7, #21
 801d7bc:	42bd      	cmp	r5, r7
 801d7be:	bf38      	it	cc
 801d7c0:	2304      	movcc	r3, #4
 801d7c2:	9301      	str	r3, [sp, #4]
 801d7c4:	9b02      	ldr	r3, [sp, #8]
 801d7c6:	9103      	str	r1, [sp, #12]
 801d7c8:	428b      	cmp	r3, r1
 801d7ca:	d80c      	bhi.n	801d7e6 <__multiply+0x9a>
 801d7cc:	2e00      	cmp	r6, #0
 801d7ce:	dd03      	ble.n	801d7d8 <__multiply+0x8c>
 801d7d0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801d7d4:	2b00      	cmp	r3, #0
 801d7d6:	d055      	beq.n	801d884 <__multiply+0x138>
 801d7d8:	6106      	str	r6, [r0, #16]
 801d7da:	b005      	add	sp, #20
 801d7dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d7e0:	f843 2b04 	str.w	r2, [r3], #4
 801d7e4:	e7d9      	b.n	801d79a <__multiply+0x4e>
 801d7e6:	f8b1 a000 	ldrh.w	sl, [r1]
 801d7ea:	f1ba 0f00 	cmp.w	sl, #0
 801d7ee:	d01f      	beq.n	801d830 <__multiply+0xe4>
 801d7f0:	46c4      	mov	ip, r8
 801d7f2:	46a1      	mov	r9, r4
 801d7f4:	2700      	movs	r7, #0
 801d7f6:	f85c 2b04 	ldr.w	r2, [ip], #4
 801d7fa:	f8d9 3000 	ldr.w	r3, [r9]
 801d7fe:	fa1f fb82 	uxth.w	fp, r2
 801d802:	b29b      	uxth	r3, r3
 801d804:	fb0a 330b 	mla	r3, sl, fp, r3
 801d808:	443b      	add	r3, r7
 801d80a:	f8d9 7000 	ldr.w	r7, [r9]
 801d80e:	0c12      	lsrs	r2, r2, #16
 801d810:	0c3f      	lsrs	r7, r7, #16
 801d812:	fb0a 7202 	mla	r2, sl, r2, r7
 801d816:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 801d81a:	b29b      	uxth	r3, r3
 801d81c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801d820:	4565      	cmp	r5, ip
 801d822:	f849 3b04 	str.w	r3, [r9], #4
 801d826:	ea4f 4712 	mov.w	r7, r2, lsr #16
 801d82a:	d8e4      	bhi.n	801d7f6 <__multiply+0xaa>
 801d82c:	9b01      	ldr	r3, [sp, #4]
 801d82e:	50e7      	str	r7, [r4, r3]
 801d830:	9b03      	ldr	r3, [sp, #12]
 801d832:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801d836:	3104      	adds	r1, #4
 801d838:	f1b9 0f00 	cmp.w	r9, #0
 801d83c:	d020      	beq.n	801d880 <__multiply+0x134>
 801d83e:	6823      	ldr	r3, [r4, #0]
 801d840:	4647      	mov	r7, r8
 801d842:	46a4      	mov	ip, r4
 801d844:	f04f 0a00 	mov.w	sl, #0
 801d848:	f8b7 b000 	ldrh.w	fp, [r7]
 801d84c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 801d850:	fb09 220b 	mla	r2, r9, fp, r2
 801d854:	4452      	add	r2, sl
 801d856:	b29b      	uxth	r3, r3
 801d858:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801d85c:	f84c 3b04 	str.w	r3, [ip], #4
 801d860:	f857 3b04 	ldr.w	r3, [r7], #4
 801d864:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801d868:	f8bc 3000 	ldrh.w	r3, [ip]
 801d86c:	fb09 330a 	mla	r3, r9, sl, r3
 801d870:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 801d874:	42bd      	cmp	r5, r7
 801d876:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801d87a:	d8e5      	bhi.n	801d848 <__multiply+0xfc>
 801d87c:	9a01      	ldr	r2, [sp, #4]
 801d87e:	50a3      	str	r3, [r4, r2]
 801d880:	3404      	adds	r4, #4
 801d882:	e79f      	b.n	801d7c4 <__multiply+0x78>
 801d884:	3e01      	subs	r6, #1
 801d886:	e7a1      	b.n	801d7cc <__multiply+0x80>
 801d888:	0801f65c 	.word	0x0801f65c
 801d88c:	0801f66d 	.word	0x0801f66d

0801d890 <__pow5mult>:
 801d890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d894:	4615      	mov	r5, r2
 801d896:	f012 0203 	ands.w	r2, r2, #3
 801d89a:	4607      	mov	r7, r0
 801d89c:	460e      	mov	r6, r1
 801d89e:	d007      	beq.n	801d8b0 <__pow5mult+0x20>
 801d8a0:	4c25      	ldr	r4, [pc, #148]	@ (801d938 <__pow5mult+0xa8>)
 801d8a2:	3a01      	subs	r2, #1
 801d8a4:	2300      	movs	r3, #0
 801d8a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801d8aa:	f7ff fea7 	bl	801d5fc <__multadd>
 801d8ae:	4606      	mov	r6, r0
 801d8b0:	10ad      	asrs	r5, r5, #2
 801d8b2:	d03d      	beq.n	801d930 <__pow5mult+0xa0>
 801d8b4:	69fc      	ldr	r4, [r7, #28]
 801d8b6:	b97c      	cbnz	r4, 801d8d8 <__pow5mult+0x48>
 801d8b8:	2010      	movs	r0, #16
 801d8ba:	f7ff fd87 	bl	801d3cc <malloc>
 801d8be:	4602      	mov	r2, r0
 801d8c0:	61f8      	str	r0, [r7, #28]
 801d8c2:	b928      	cbnz	r0, 801d8d0 <__pow5mult+0x40>
 801d8c4:	4b1d      	ldr	r3, [pc, #116]	@ (801d93c <__pow5mult+0xac>)
 801d8c6:	481e      	ldr	r0, [pc, #120]	@ (801d940 <__pow5mult+0xb0>)
 801d8c8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801d8cc:	f000 fa72 	bl	801ddb4 <__assert_func>
 801d8d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801d8d4:	6004      	str	r4, [r0, #0]
 801d8d6:	60c4      	str	r4, [r0, #12]
 801d8d8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801d8dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801d8e0:	b94c      	cbnz	r4, 801d8f6 <__pow5mult+0x66>
 801d8e2:	f240 2171 	movw	r1, #625	@ 0x271
 801d8e6:	4638      	mov	r0, r7
 801d8e8:	f7ff ff1a 	bl	801d720 <__i2b>
 801d8ec:	2300      	movs	r3, #0
 801d8ee:	f8c8 0008 	str.w	r0, [r8, #8]
 801d8f2:	4604      	mov	r4, r0
 801d8f4:	6003      	str	r3, [r0, #0]
 801d8f6:	f04f 0900 	mov.w	r9, #0
 801d8fa:	07eb      	lsls	r3, r5, #31
 801d8fc:	d50a      	bpl.n	801d914 <__pow5mult+0x84>
 801d8fe:	4631      	mov	r1, r6
 801d900:	4622      	mov	r2, r4
 801d902:	4638      	mov	r0, r7
 801d904:	f7ff ff22 	bl	801d74c <__multiply>
 801d908:	4631      	mov	r1, r6
 801d90a:	4680      	mov	r8, r0
 801d90c:	4638      	mov	r0, r7
 801d90e:	f7ff fe53 	bl	801d5b8 <_Bfree>
 801d912:	4646      	mov	r6, r8
 801d914:	106d      	asrs	r5, r5, #1
 801d916:	d00b      	beq.n	801d930 <__pow5mult+0xa0>
 801d918:	6820      	ldr	r0, [r4, #0]
 801d91a:	b938      	cbnz	r0, 801d92c <__pow5mult+0x9c>
 801d91c:	4622      	mov	r2, r4
 801d91e:	4621      	mov	r1, r4
 801d920:	4638      	mov	r0, r7
 801d922:	f7ff ff13 	bl	801d74c <__multiply>
 801d926:	6020      	str	r0, [r4, #0]
 801d928:	f8c0 9000 	str.w	r9, [r0]
 801d92c:	4604      	mov	r4, r0
 801d92e:	e7e4      	b.n	801d8fa <__pow5mult+0x6a>
 801d930:	4630      	mov	r0, r6
 801d932:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d936:	bf00      	nop
 801d938:	0801f720 	.word	0x0801f720
 801d93c:	0801f5ed 	.word	0x0801f5ed
 801d940:	0801f66d 	.word	0x0801f66d

0801d944 <__lshift>:
 801d944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d948:	460c      	mov	r4, r1
 801d94a:	6849      	ldr	r1, [r1, #4]
 801d94c:	6923      	ldr	r3, [r4, #16]
 801d94e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801d952:	68a3      	ldr	r3, [r4, #8]
 801d954:	4607      	mov	r7, r0
 801d956:	4691      	mov	r9, r2
 801d958:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801d95c:	f108 0601 	add.w	r6, r8, #1
 801d960:	42b3      	cmp	r3, r6
 801d962:	db0b      	blt.n	801d97c <__lshift+0x38>
 801d964:	4638      	mov	r0, r7
 801d966:	f7ff fde7 	bl	801d538 <_Balloc>
 801d96a:	4605      	mov	r5, r0
 801d96c:	b948      	cbnz	r0, 801d982 <__lshift+0x3e>
 801d96e:	4602      	mov	r2, r0
 801d970:	4b28      	ldr	r3, [pc, #160]	@ (801da14 <__lshift+0xd0>)
 801d972:	4829      	ldr	r0, [pc, #164]	@ (801da18 <__lshift+0xd4>)
 801d974:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801d978:	f000 fa1c 	bl	801ddb4 <__assert_func>
 801d97c:	3101      	adds	r1, #1
 801d97e:	005b      	lsls	r3, r3, #1
 801d980:	e7ee      	b.n	801d960 <__lshift+0x1c>
 801d982:	2300      	movs	r3, #0
 801d984:	f100 0114 	add.w	r1, r0, #20
 801d988:	f100 0210 	add.w	r2, r0, #16
 801d98c:	4618      	mov	r0, r3
 801d98e:	4553      	cmp	r3, sl
 801d990:	db33      	blt.n	801d9fa <__lshift+0xb6>
 801d992:	6920      	ldr	r0, [r4, #16]
 801d994:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801d998:	f104 0314 	add.w	r3, r4, #20
 801d99c:	f019 091f 	ands.w	r9, r9, #31
 801d9a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801d9a4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801d9a8:	d02b      	beq.n	801da02 <__lshift+0xbe>
 801d9aa:	f1c9 0e20 	rsb	lr, r9, #32
 801d9ae:	468a      	mov	sl, r1
 801d9b0:	2200      	movs	r2, #0
 801d9b2:	6818      	ldr	r0, [r3, #0]
 801d9b4:	fa00 f009 	lsl.w	r0, r0, r9
 801d9b8:	4310      	orrs	r0, r2
 801d9ba:	f84a 0b04 	str.w	r0, [sl], #4
 801d9be:	f853 2b04 	ldr.w	r2, [r3], #4
 801d9c2:	459c      	cmp	ip, r3
 801d9c4:	fa22 f20e 	lsr.w	r2, r2, lr
 801d9c8:	d8f3      	bhi.n	801d9b2 <__lshift+0x6e>
 801d9ca:	ebac 0304 	sub.w	r3, ip, r4
 801d9ce:	3b15      	subs	r3, #21
 801d9d0:	f023 0303 	bic.w	r3, r3, #3
 801d9d4:	3304      	adds	r3, #4
 801d9d6:	f104 0015 	add.w	r0, r4, #21
 801d9da:	4560      	cmp	r0, ip
 801d9dc:	bf88      	it	hi
 801d9de:	2304      	movhi	r3, #4
 801d9e0:	50ca      	str	r2, [r1, r3]
 801d9e2:	b10a      	cbz	r2, 801d9e8 <__lshift+0xa4>
 801d9e4:	f108 0602 	add.w	r6, r8, #2
 801d9e8:	3e01      	subs	r6, #1
 801d9ea:	4638      	mov	r0, r7
 801d9ec:	612e      	str	r6, [r5, #16]
 801d9ee:	4621      	mov	r1, r4
 801d9f0:	f7ff fde2 	bl	801d5b8 <_Bfree>
 801d9f4:	4628      	mov	r0, r5
 801d9f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d9fa:	f842 0f04 	str.w	r0, [r2, #4]!
 801d9fe:	3301      	adds	r3, #1
 801da00:	e7c5      	b.n	801d98e <__lshift+0x4a>
 801da02:	3904      	subs	r1, #4
 801da04:	f853 2b04 	ldr.w	r2, [r3], #4
 801da08:	f841 2f04 	str.w	r2, [r1, #4]!
 801da0c:	459c      	cmp	ip, r3
 801da0e:	d8f9      	bhi.n	801da04 <__lshift+0xc0>
 801da10:	e7ea      	b.n	801d9e8 <__lshift+0xa4>
 801da12:	bf00      	nop
 801da14:	0801f65c 	.word	0x0801f65c
 801da18:	0801f66d 	.word	0x0801f66d

0801da1c <__mcmp>:
 801da1c:	690a      	ldr	r2, [r1, #16]
 801da1e:	4603      	mov	r3, r0
 801da20:	6900      	ldr	r0, [r0, #16]
 801da22:	1a80      	subs	r0, r0, r2
 801da24:	b530      	push	{r4, r5, lr}
 801da26:	d10e      	bne.n	801da46 <__mcmp+0x2a>
 801da28:	3314      	adds	r3, #20
 801da2a:	3114      	adds	r1, #20
 801da2c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801da30:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801da34:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801da38:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801da3c:	4295      	cmp	r5, r2
 801da3e:	d003      	beq.n	801da48 <__mcmp+0x2c>
 801da40:	d205      	bcs.n	801da4e <__mcmp+0x32>
 801da42:	f04f 30ff 	mov.w	r0, #4294967295
 801da46:	bd30      	pop	{r4, r5, pc}
 801da48:	42a3      	cmp	r3, r4
 801da4a:	d3f3      	bcc.n	801da34 <__mcmp+0x18>
 801da4c:	e7fb      	b.n	801da46 <__mcmp+0x2a>
 801da4e:	2001      	movs	r0, #1
 801da50:	e7f9      	b.n	801da46 <__mcmp+0x2a>
	...

0801da54 <__mdiff>:
 801da54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801da58:	4689      	mov	r9, r1
 801da5a:	4606      	mov	r6, r0
 801da5c:	4611      	mov	r1, r2
 801da5e:	4648      	mov	r0, r9
 801da60:	4614      	mov	r4, r2
 801da62:	f7ff ffdb 	bl	801da1c <__mcmp>
 801da66:	1e05      	subs	r5, r0, #0
 801da68:	d112      	bne.n	801da90 <__mdiff+0x3c>
 801da6a:	4629      	mov	r1, r5
 801da6c:	4630      	mov	r0, r6
 801da6e:	f7ff fd63 	bl	801d538 <_Balloc>
 801da72:	4602      	mov	r2, r0
 801da74:	b928      	cbnz	r0, 801da82 <__mdiff+0x2e>
 801da76:	4b3e      	ldr	r3, [pc, #248]	@ (801db70 <__mdiff+0x11c>)
 801da78:	f240 2137 	movw	r1, #567	@ 0x237
 801da7c:	483d      	ldr	r0, [pc, #244]	@ (801db74 <__mdiff+0x120>)
 801da7e:	f000 f999 	bl	801ddb4 <__assert_func>
 801da82:	2301      	movs	r3, #1
 801da84:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801da88:	4610      	mov	r0, r2
 801da8a:	b003      	add	sp, #12
 801da8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801da90:	bfbc      	itt	lt
 801da92:	464b      	movlt	r3, r9
 801da94:	46a1      	movlt	r9, r4
 801da96:	4630      	mov	r0, r6
 801da98:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801da9c:	bfba      	itte	lt
 801da9e:	461c      	movlt	r4, r3
 801daa0:	2501      	movlt	r5, #1
 801daa2:	2500      	movge	r5, #0
 801daa4:	f7ff fd48 	bl	801d538 <_Balloc>
 801daa8:	4602      	mov	r2, r0
 801daaa:	b918      	cbnz	r0, 801dab4 <__mdiff+0x60>
 801daac:	4b30      	ldr	r3, [pc, #192]	@ (801db70 <__mdiff+0x11c>)
 801daae:	f240 2145 	movw	r1, #581	@ 0x245
 801dab2:	e7e3      	b.n	801da7c <__mdiff+0x28>
 801dab4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801dab8:	6926      	ldr	r6, [r4, #16]
 801daba:	60c5      	str	r5, [r0, #12]
 801dabc:	f109 0310 	add.w	r3, r9, #16
 801dac0:	f109 0514 	add.w	r5, r9, #20
 801dac4:	f104 0e14 	add.w	lr, r4, #20
 801dac8:	f100 0b14 	add.w	fp, r0, #20
 801dacc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801dad0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801dad4:	9301      	str	r3, [sp, #4]
 801dad6:	46d9      	mov	r9, fp
 801dad8:	f04f 0c00 	mov.w	ip, #0
 801dadc:	9b01      	ldr	r3, [sp, #4]
 801dade:	f85e 0b04 	ldr.w	r0, [lr], #4
 801dae2:	f853 af04 	ldr.w	sl, [r3, #4]!
 801dae6:	9301      	str	r3, [sp, #4]
 801dae8:	b281      	uxth	r1, r0
 801daea:	fa1f f38a 	uxth.w	r3, sl
 801daee:	1a5b      	subs	r3, r3, r1
 801daf0:	0c00      	lsrs	r0, r0, #16
 801daf2:	4463      	add	r3, ip
 801daf4:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801daf8:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801dafc:	b29b      	uxth	r3, r3
 801dafe:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801db02:	4576      	cmp	r6, lr
 801db04:	f849 3b04 	str.w	r3, [r9], #4
 801db08:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801db0c:	d8e6      	bhi.n	801dadc <__mdiff+0x88>
 801db0e:	1b33      	subs	r3, r6, r4
 801db10:	3b15      	subs	r3, #21
 801db12:	f023 0303 	bic.w	r3, r3, #3
 801db16:	3415      	adds	r4, #21
 801db18:	3304      	adds	r3, #4
 801db1a:	42a6      	cmp	r6, r4
 801db1c:	bf38      	it	cc
 801db1e:	2304      	movcc	r3, #4
 801db20:	441d      	add	r5, r3
 801db22:	445b      	add	r3, fp
 801db24:	461e      	mov	r6, r3
 801db26:	462c      	mov	r4, r5
 801db28:	4544      	cmp	r4, r8
 801db2a:	d30e      	bcc.n	801db4a <__mdiff+0xf6>
 801db2c:	f108 0103 	add.w	r1, r8, #3
 801db30:	1b49      	subs	r1, r1, r5
 801db32:	f021 0103 	bic.w	r1, r1, #3
 801db36:	3d03      	subs	r5, #3
 801db38:	45a8      	cmp	r8, r5
 801db3a:	bf38      	it	cc
 801db3c:	2100      	movcc	r1, #0
 801db3e:	440b      	add	r3, r1
 801db40:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801db44:	b191      	cbz	r1, 801db6c <__mdiff+0x118>
 801db46:	6117      	str	r7, [r2, #16]
 801db48:	e79e      	b.n	801da88 <__mdiff+0x34>
 801db4a:	f854 1b04 	ldr.w	r1, [r4], #4
 801db4e:	46e6      	mov	lr, ip
 801db50:	0c08      	lsrs	r0, r1, #16
 801db52:	fa1c fc81 	uxtah	ip, ip, r1
 801db56:	4471      	add	r1, lr
 801db58:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801db5c:	b289      	uxth	r1, r1
 801db5e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801db62:	f846 1b04 	str.w	r1, [r6], #4
 801db66:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801db6a:	e7dd      	b.n	801db28 <__mdiff+0xd4>
 801db6c:	3f01      	subs	r7, #1
 801db6e:	e7e7      	b.n	801db40 <__mdiff+0xec>
 801db70:	0801f65c 	.word	0x0801f65c
 801db74:	0801f66d 	.word	0x0801f66d

0801db78 <__d2b>:
 801db78:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 801db7c:	2101      	movs	r1, #1
 801db7e:	9e08      	ldr	r6, [sp, #32]
 801db80:	4690      	mov	r8, r2
 801db82:	4699      	mov	r9, r3
 801db84:	f7ff fcd8 	bl	801d538 <_Balloc>
 801db88:	4604      	mov	r4, r0
 801db8a:	b930      	cbnz	r0, 801db9a <__d2b+0x22>
 801db8c:	4602      	mov	r2, r0
 801db8e:	4b24      	ldr	r3, [pc, #144]	@ (801dc20 <__d2b+0xa8>)
 801db90:	4824      	ldr	r0, [pc, #144]	@ (801dc24 <__d2b+0xac>)
 801db92:	f240 310f 	movw	r1, #783	@ 0x30f
 801db96:	f000 f90d 	bl	801ddb4 <__assert_func>
 801db9a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801db9e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801dba2:	b10d      	cbz	r5, 801dba8 <__d2b+0x30>
 801dba4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801dba8:	9301      	str	r3, [sp, #4]
 801dbaa:	f1b8 0300 	subs.w	r3, r8, #0
 801dbae:	d024      	beq.n	801dbfa <__d2b+0x82>
 801dbb0:	4668      	mov	r0, sp
 801dbb2:	9300      	str	r3, [sp, #0]
 801dbb4:	f7ff fd87 	bl	801d6c6 <__lo0bits>
 801dbb8:	e9dd 1200 	ldrd	r1, r2, [sp]
 801dbbc:	b1d8      	cbz	r0, 801dbf6 <__d2b+0x7e>
 801dbbe:	f1c0 0320 	rsb	r3, r0, #32
 801dbc2:	fa02 f303 	lsl.w	r3, r2, r3
 801dbc6:	430b      	orrs	r3, r1
 801dbc8:	40c2      	lsrs	r2, r0
 801dbca:	6163      	str	r3, [r4, #20]
 801dbcc:	9201      	str	r2, [sp, #4]
 801dbce:	9b01      	ldr	r3, [sp, #4]
 801dbd0:	61a3      	str	r3, [r4, #24]
 801dbd2:	2b00      	cmp	r3, #0
 801dbd4:	bf0c      	ite	eq
 801dbd6:	2201      	moveq	r2, #1
 801dbd8:	2202      	movne	r2, #2
 801dbda:	6122      	str	r2, [r4, #16]
 801dbdc:	b1ad      	cbz	r5, 801dc0a <__d2b+0x92>
 801dbde:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801dbe2:	4405      	add	r5, r0
 801dbe4:	6035      	str	r5, [r6, #0]
 801dbe6:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801dbea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dbec:	6018      	str	r0, [r3, #0]
 801dbee:	4620      	mov	r0, r4
 801dbf0:	b002      	add	sp, #8
 801dbf2:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 801dbf6:	6161      	str	r1, [r4, #20]
 801dbf8:	e7e9      	b.n	801dbce <__d2b+0x56>
 801dbfa:	a801      	add	r0, sp, #4
 801dbfc:	f7ff fd63 	bl	801d6c6 <__lo0bits>
 801dc00:	9b01      	ldr	r3, [sp, #4]
 801dc02:	6163      	str	r3, [r4, #20]
 801dc04:	3020      	adds	r0, #32
 801dc06:	2201      	movs	r2, #1
 801dc08:	e7e7      	b.n	801dbda <__d2b+0x62>
 801dc0a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801dc0e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801dc12:	6030      	str	r0, [r6, #0]
 801dc14:	6918      	ldr	r0, [r3, #16]
 801dc16:	f7ff fd37 	bl	801d688 <__hi0bits>
 801dc1a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801dc1e:	e7e4      	b.n	801dbea <__d2b+0x72>
 801dc20:	0801f65c 	.word	0x0801f65c
 801dc24:	0801f66d 	.word	0x0801f66d

0801dc28 <__sflush_r>:
 801dc28:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801dc2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dc2e:	0716      	lsls	r6, r2, #28
 801dc30:	4605      	mov	r5, r0
 801dc32:	460c      	mov	r4, r1
 801dc34:	d454      	bmi.n	801dce0 <__sflush_r+0xb8>
 801dc36:	684b      	ldr	r3, [r1, #4]
 801dc38:	2b00      	cmp	r3, #0
 801dc3a:	dc02      	bgt.n	801dc42 <__sflush_r+0x1a>
 801dc3c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801dc3e:	2b00      	cmp	r3, #0
 801dc40:	dd48      	ble.n	801dcd4 <__sflush_r+0xac>
 801dc42:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801dc44:	2e00      	cmp	r6, #0
 801dc46:	d045      	beq.n	801dcd4 <__sflush_r+0xac>
 801dc48:	2300      	movs	r3, #0
 801dc4a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801dc4e:	682f      	ldr	r7, [r5, #0]
 801dc50:	6a21      	ldr	r1, [r4, #32]
 801dc52:	602b      	str	r3, [r5, #0]
 801dc54:	d030      	beq.n	801dcb8 <__sflush_r+0x90>
 801dc56:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801dc58:	89a3      	ldrh	r3, [r4, #12]
 801dc5a:	0759      	lsls	r1, r3, #29
 801dc5c:	d505      	bpl.n	801dc6a <__sflush_r+0x42>
 801dc5e:	6863      	ldr	r3, [r4, #4]
 801dc60:	1ad2      	subs	r2, r2, r3
 801dc62:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801dc64:	b10b      	cbz	r3, 801dc6a <__sflush_r+0x42>
 801dc66:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801dc68:	1ad2      	subs	r2, r2, r3
 801dc6a:	2300      	movs	r3, #0
 801dc6c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801dc6e:	6a21      	ldr	r1, [r4, #32]
 801dc70:	4628      	mov	r0, r5
 801dc72:	47b0      	blx	r6
 801dc74:	1c43      	adds	r3, r0, #1
 801dc76:	89a3      	ldrh	r3, [r4, #12]
 801dc78:	d106      	bne.n	801dc88 <__sflush_r+0x60>
 801dc7a:	6829      	ldr	r1, [r5, #0]
 801dc7c:	291d      	cmp	r1, #29
 801dc7e:	d82b      	bhi.n	801dcd8 <__sflush_r+0xb0>
 801dc80:	4a28      	ldr	r2, [pc, #160]	@ (801dd24 <__sflush_r+0xfc>)
 801dc82:	40ca      	lsrs	r2, r1
 801dc84:	07d6      	lsls	r6, r2, #31
 801dc86:	d527      	bpl.n	801dcd8 <__sflush_r+0xb0>
 801dc88:	2200      	movs	r2, #0
 801dc8a:	6062      	str	r2, [r4, #4]
 801dc8c:	04d9      	lsls	r1, r3, #19
 801dc8e:	6922      	ldr	r2, [r4, #16]
 801dc90:	6022      	str	r2, [r4, #0]
 801dc92:	d504      	bpl.n	801dc9e <__sflush_r+0x76>
 801dc94:	1c42      	adds	r2, r0, #1
 801dc96:	d101      	bne.n	801dc9c <__sflush_r+0x74>
 801dc98:	682b      	ldr	r3, [r5, #0]
 801dc9a:	b903      	cbnz	r3, 801dc9e <__sflush_r+0x76>
 801dc9c:	6560      	str	r0, [r4, #84]	@ 0x54
 801dc9e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801dca0:	602f      	str	r7, [r5, #0]
 801dca2:	b1b9      	cbz	r1, 801dcd4 <__sflush_r+0xac>
 801dca4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801dca8:	4299      	cmp	r1, r3
 801dcaa:	d002      	beq.n	801dcb2 <__sflush_r+0x8a>
 801dcac:	4628      	mov	r0, r5
 801dcae:	f7ff fb43 	bl	801d338 <_free_r>
 801dcb2:	2300      	movs	r3, #0
 801dcb4:	6363      	str	r3, [r4, #52]	@ 0x34
 801dcb6:	e00d      	b.n	801dcd4 <__sflush_r+0xac>
 801dcb8:	2301      	movs	r3, #1
 801dcba:	4628      	mov	r0, r5
 801dcbc:	47b0      	blx	r6
 801dcbe:	4602      	mov	r2, r0
 801dcc0:	1c50      	adds	r0, r2, #1
 801dcc2:	d1c9      	bne.n	801dc58 <__sflush_r+0x30>
 801dcc4:	682b      	ldr	r3, [r5, #0]
 801dcc6:	2b00      	cmp	r3, #0
 801dcc8:	d0c6      	beq.n	801dc58 <__sflush_r+0x30>
 801dcca:	2b1d      	cmp	r3, #29
 801dccc:	d001      	beq.n	801dcd2 <__sflush_r+0xaa>
 801dcce:	2b16      	cmp	r3, #22
 801dcd0:	d11d      	bne.n	801dd0e <__sflush_r+0xe6>
 801dcd2:	602f      	str	r7, [r5, #0]
 801dcd4:	2000      	movs	r0, #0
 801dcd6:	e021      	b.n	801dd1c <__sflush_r+0xf4>
 801dcd8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801dcdc:	b21b      	sxth	r3, r3
 801dcde:	e01a      	b.n	801dd16 <__sflush_r+0xee>
 801dce0:	690f      	ldr	r7, [r1, #16]
 801dce2:	2f00      	cmp	r7, #0
 801dce4:	d0f6      	beq.n	801dcd4 <__sflush_r+0xac>
 801dce6:	0793      	lsls	r3, r2, #30
 801dce8:	680e      	ldr	r6, [r1, #0]
 801dcea:	bf08      	it	eq
 801dcec:	694b      	ldreq	r3, [r1, #20]
 801dcee:	600f      	str	r7, [r1, #0]
 801dcf0:	bf18      	it	ne
 801dcf2:	2300      	movne	r3, #0
 801dcf4:	1bf6      	subs	r6, r6, r7
 801dcf6:	608b      	str	r3, [r1, #8]
 801dcf8:	2e00      	cmp	r6, #0
 801dcfa:	ddeb      	ble.n	801dcd4 <__sflush_r+0xac>
 801dcfc:	6a21      	ldr	r1, [r4, #32]
 801dcfe:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 801dd02:	4633      	mov	r3, r6
 801dd04:	463a      	mov	r2, r7
 801dd06:	4628      	mov	r0, r5
 801dd08:	47e0      	blx	ip
 801dd0a:	2800      	cmp	r0, #0
 801dd0c:	dc07      	bgt.n	801dd1e <__sflush_r+0xf6>
 801dd0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dd12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801dd16:	81a3      	strh	r3, [r4, #12]
 801dd18:	f04f 30ff 	mov.w	r0, #4294967295
 801dd1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dd1e:	4407      	add	r7, r0
 801dd20:	1a36      	subs	r6, r6, r0
 801dd22:	e7e9      	b.n	801dcf8 <__sflush_r+0xd0>
 801dd24:	20400001 	.word	0x20400001

0801dd28 <_fflush_r>:
 801dd28:	b538      	push	{r3, r4, r5, lr}
 801dd2a:	690b      	ldr	r3, [r1, #16]
 801dd2c:	4605      	mov	r5, r0
 801dd2e:	460c      	mov	r4, r1
 801dd30:	b913      	cbnz	r3, 801dd38 <_fflush_r+0x10>
 801dd32:	2500      	movs	r5, #0
 801dd34:	4628      	mov	r0, r5
 801dd36:	bd38      	pop	{r3, r4, r5, pc}
 801dd38:	b118      	cbz	r0, 801dd42 <_fflush_r+0x1a>
 801dd3a:	6a03      	ldr	r3, [r0, #32]
 801dd3c:	b90b      	cbnz	r3, 801dd42 <_fflush_r+0x1a>
 801dd3e:	f7fe fba9 	bl	801c494 <__sinit>
 801dd42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dd46:	2b00      	cmp	r3, #0
 801dd48:	d0f3      	beq.n	801dd32 <_fflush_r+0xa>
 801dd4a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801dd4c:	07d0      	lsls	r0, r2, #31
 801dd4e:	d404      	bmi.n	801dd5a <_fflush_r+0x32>
 801dd50:	0599      	lsls	r1, r3, #22
 801dd52:	d402      	bmi.n	801dd5a <_fflush_r+0x32>
 801dd54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801dd56:	f7fe fc94 	bl	801c682 <__retarget_lock_acquire_recursive>
 801dd5a:	4628      	mov	r0, r5
 801dd5c:	4621      	mov	r1, r4
 801dd5e:	f7ff ff63 	bl	801dc28 <__sflush_r>
 801dd62:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801dd64:	07da      	lsls	r2, r3, #31
 801dd66:	4605      	mov	r5, r0
 801dd68:	d4e4      	bmi.n	801dd34 <_fflush_r+0xc>
 801dd6a:	89a3      	ldrh	r3, [r4, #12]
 801dd6c:	059b      	lsls	r3, r3, #22
 801dd6e:	d4e1      	bmi.n	801dd34 <_fflush_r+0xc>
 801dd70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801dd72:	f7fe fc87 	bl	801c684 <__retarget_lock_release_recursive>
 801dd76:	e7dd      	b.n	801dd34 <_fflush_r+0xc>

0801dd78 <_sbrk_r>:
 801dd78:	b538      	push	{r3, r4, r5, lr}
 801dd7a:	4d06      	ldr	r5, [pc, #24]	@ (801dd94 <_sbrk_r+0x1c>)
 801dd7c:	2300      	movs	r3, #0
 801dd7e:	4604      	mov	r4, r0
 801dd80:	4608      	mov	r0, r1
 801dd82:	602b      	str	r3, [r5, #0]
 801dd84:	f7e4 fb72 	bl	800246c <_sbrk>
 801dd88:	1c43      	adds	r3, r0, #1
 801dd8a:	d102      	bne.n	801dd92 <_sbrk_r+0x1a>
 801dd8c:	682b      	ldr	r3, [r5, #0]
 801dd8e:	b103      	cbz	r3, 801dd92 <_sbrk_r+0x1a>
 801dd90:	6023      	str	r3, [r4, #0]
 801dd92:	bd38      	pop	{r3, r4, r5, pc}
 801dd94:	200024fc 	.word	0x200024fc

0801dd98 <memcpy>:
 801dd98:	440a      	add	r2, r1
 801dd9a:	4291      	cmp	r1, r2
 801dd9c:	f100 33ff 	add.w	r3, r0, #4294967295
 801dda0:	d100      	bne.n	801dda4 <memcpy+0xc>
 801dda2:	4770      	bx	lr
 801dda4:	b510      	push	{r4, lr}
 801dda6:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ddaa:	f803 4f01 	strb.w	r4, [r3, #1]!
 801ddae:	4291      	cmp	r1, r2
 801ddb0:	d1f9      	bne.n	801dda6 <memcpy+0xe>
 801ddb2:	bd10      	pop	{r4, pc}

0801ddb4 <__assert_func>:
 801ddb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801ddb6:	4614      	mov	r4, r2
 801ddb8:	461a      	mov	r2, r3
 801ddba:	4b09      	ldr	r3, [pc, #36]	@ (801dde0 <__assert_func+0x2c>)
 801ddbc:	681b      	ldr	r3, [r3, #0]
 801ddbe:	4605      	mov	r5, r0
 801ddc0:	68d8      	ldr	r0, [r3, #12]
 801ddc2:	b14c      	cbz	r4, 801ddd8 <__assert_func+0x24>
 801ddc4:	4b07      	ldr	r3, [pc, #28]	@ (801dde4 <__assert_func+0x30>)
 801ddc6:	9100      	str	r1, [sp, #0]
 801ddc8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801ddcc:	4906      	ldr	r1, [pc, #24]	@ (801dde8 <__assert_func+0x34>)
 801ddce:	462b      	mov	r3, r5
 801ddd0:	f000 f842 	bl	801de58 <fiprintf>
 801ddd4:	f000 f852 	bl	801de7c <abort>
 801ddd8:	4b04      	ldr	r3, [pc, #16]	@ (801ddec <__assert_func+0x38>)
 801ddda:	461c      	mov	r4, r3
 801dddc:	e7f3      	b.n	801ddc6 <__assert_func+0x12>
 801ddde:	bf00      	nop
 801dde0:	2000014c 	.word	0x2000014c
 801dde4:	0801f6d0 	.word	0x0801f6d0
 801dde8:	0801f6dd 	.word	0x0801f6dd
 801ddec:	0801f70b 	.word	0x0801f70b

0801ddf0 <_calloc_r>:
 801ddf0:	b570      	push	{r4, r5, r6, lr}
 801ddf2:	fba1 5402 	umull	r5, r4, r1, r2
 801ddf6:	b934      	cbnz	r4, 801de06 <_calloc_r+0x16>
 801ddf8:	4629      	mov	r1, r5
 801ddfa:	f7ff fb11 	bl	801d420 <_malloc_r>
 801ddfe:	4606      	mov	r6, r0
 801de00:	b928      	cbnz	r0, 801de0e <_calloc_r+0x1e>
 801de02:	4630      	mov	r0, r6
 801de04:	bd70      	pop	{r4, r5, r6, pc}
 801de06:	220c      	movs	r2, #12
 801de08:	6002      	str	r2, [r0, #0]
 801de0a:	2600      	movs	r6, #0
 801de0c:	e7f9      	b.n	801de02 <_calloc_r+0x12>
 801de0e:	462a      	mov	r2, r5
 801de10:	4621      	mov	r1, r4
 801de12:	f7fe fbb8 	bl	801c586 <memset>
 801de16:	e7f4      	b.n	801de02 <_calloc_r+0x12>

0801de18 <__ascii_mbtowc>:
 801de18:	b082      	sub	sp, #8
 801de1a:	b901      	cbnz	r1, 801de1e <__ascii_mbtowc+0x6>
 801de1c:	a901      	add	r1, sp, #4
 801de1e:	b142      	cbz	r2, 801de32 <__ascii_mbtowc+0x1a>
 801de20:	b14b      	cbz	r3, 801de36 <__ascii_mbtowc+0x1e>
 801de22:	7813      	ldrb	r3, [r2, #0]
 801de24:	600b      	str	r3, [r1, #0]
 801de26:	7812      	ldrb	r2, [r2, #0]
 801de28:	1e10      	subs	r0, r2, #0
 801de2a:	bf18      	it	ne
 801de2c:	2001      	movne	r0, #1
 801de2e:	b002      	add	sp, #8
 801de30:	4770      	bx	lr
 801de32:	4610      	mov	r0, r2
 801de34:	e7fb      	b.n	801de2e <__ascii_mbtowc+0x16>
 801de36:	f06f 0001 	mvn.w	r0, #1
 801de3a:	e7f8      	b.n	801de2e <__ascii_mbtowc+0x16>

0801de3c <__ascii_wctomb>:
 801de3c:	4603      	mov	r3, r0
 801de3e:	4608      	mov	r0, r1
 801de40:	b141      	cbz	r1, 801de54 <__ascii_wctomb+0x18>
 801de42:	2aff      	cmp	r2, #255	@ 0xff
 801de44:	d904      	bls.n	801de50 <__ascii_wctomb+0x14>
 801de46:	228a      	movs	r2, #138	@ 0x8a
 801de48:	601a      	str	r2, [r3, #0]
 801de4a:	f04f 30ff 	mov.w	r0, #4294967295
 801de4e:	4770      	bx	lr
 801de50:	700a      	strb	r2, [r1, #0]
 801de52:	2001      	movs	r0, #1
 801de54:	4770      	bx	lr
	...

0801de58 <fiprintf>:
 801de58:	b40e      	push	{r1, r2, r3}
 801de5a:	b503      	push	{r0, r1, lr}
 801de5c:	4601      	mov	r1, r0
 801de5e:	ab03      	add	r3, sp, #12
 801de60:	4805      	ldr	r0, [pc, #20]	@ (801de78 <fiprintf+0x20>)
 801de62:	f853 2b04 	ldr.w	r2, [r3], #4
 801de66:	6800      	ldr	r0, [r0, #0]
 801de68:	9301      	str	r3, [sp, #4]
 801de6a:	f000 f835 	bl	801ded8 <_vfiprintf_r>
 801de6e:	b002      	add	sp, #8
 801de70:	f85d eb04 	ldr.w	lr, [sp], #4
 801de74:	b003      	add	sp, #12
 801de76:	4770      	bx	lr
 801de78:	2000014c 	.word	0x2000014c

0801de7c <abort>:
 801de7c:	b508      	push	{r3, lr}
 801de7e:	2006      	movs	r0, #6
 801de80:	f000 f9fe 	bl	801e280 <raise>
 801de84:	2001      	movs	r0, #1
 801de86:	f7e4 fa7d 	bl	8002384 <_exit>

0801de8a <__sfputc_r>:
 801de8a:	6893      	ldr	r3, [r2, #8]
 801de8c:	3b01      	subs	r3, #1
 801de8e:	2b00      	cmp	r3, #0
 801de90:	b410      	push	{r4}
 801de92:	6093      	str	r3, [r2, #8]
 801de94:	da07      	bge.n	801dea6 <__sfputc_r+0x1c>
 801de96:	6994      	ldr	r4, [r2, #24]
 801de98:	42a3      	cmp	r3, r4
 801de9a:	db01      	blt.n	801dea0 <__sfputc_r+0x16>
 801de9c:	290a      	cmp	r1, #10
 801de9e:	d102      	bne.n	801dea6 <__sfputc_r+0x1c>
 801dea0:	bc10      	pop	{r4}
 801dea2:	f000 b931 	b.w	801e108 <__swbuf_r>
 801dea6:	6813      	ldr	r3, [r2, #0]
 801dea8:	1c58      	adds	r0, r3, #1
 801deaa:	6010      	str	r0, [r2, #0]
 801deac:	7019      	strb	r1, [r3, #0]
 801deae:	4608      	mov	r0, r1
 801deb0:	bc10      	pop	{r4}
 801deb2:	4770      	bx	lr

0801deb4 <__sfputs_r>:
 801deb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801deb6:	4606      	mov	r6, r0
 801deb8:	460f      	mov	r7, r1
 801deba:	4614      	mov	r4, r2
 801debc:	18d5      	adds	r5, r2, r3
 801debe:	42ac      	cmp	r4, r5
 801dec0:	d101      	bne.n	801dec6 <__sfputs_r+0x12>
 801dec2:	2000      	movs	r0, #0
 801dec4:	e007      	b.n	801ded6 <__sfputs_r+0x22>
 801dec6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801deca:	463a      	mov	r2, r7
 801decc:	4630      	mov	r0, r6
 801dece:	f7ff ffdc 	bl	801de8a <__sfputc_r>
 801ded2:	1c43      	adds	r3, r0, #1
 801ded4:	d1f3      	bne.n	801debe <__sfputs_r+0xa>
 801ded6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801ded8 <_vfiprintf_r>:
 801ded8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dedc:	460d      	mov	r5, r1
 801dede:	b09d      	sub	sp, #116	@ 0x74
 801dee0:	4614      	mov	r4, r2
 801dee2:	4698      	mov	r8, r3
 801dee4:	4606      	mov	r6, r0
 801dee6:	b118      	cbz	r0, 801def0 <_vfiprintf_r+0x18>
 801dee8:	6a03      	ldr	r3, [r0, #32]
 801deea:	b90b      	cbnz	r3, 801def0 <_vfiprintf_r+0x18>
 801deec:	f7fe fad2 	bl	801c494 <__sinit>
 801def0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801def2:	07d9      	lsls	r1, r3, #31
 801def4:	d405      	bmi.n	801df02 <_vfiprintf_r+0x2a>
 801def6:	89ab      	ldrh	r3, [r5, #12]
 801def8:	059a      	lsls	r2, r3, #22
 801defa:	d402      	bmi.n	801df02 <_vfiprintf_r+0x2a>
 801defc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801defe:	f7fe fbc0 	bl	801c682 <__retarget_lock_acquire_recursive>
 801df02:	89ab      	ldrh	r3, [r5, #12]
 801df04:	071b      	lsls	r3, r3, #28
 801df06:	d501      	bpl.n	801df0c <_vfiprintf_r+0x34>
 801df08:	692b      	ldr	r3, [r5, #16]
 801df0a:	b99b      	cbnz	r3, 801df34 <_vfiprintf_r+0x5c>
 801df0c:	4629      	mov	r1, r5
 801df0e:	4630      	mov	r0, r6
 801df10:	f000 f938 	bl	801e184 <__swsetup_r>
 801df14:	b170      	cbz	r0, 801df34 <_vfiprintf_r+0x5c>
 801df16:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801df18:	07dc      	lsls	r4, r3, #31
 801df1a:	d504      	bpl.n	801df26 <_vfiprintf_r+0x4e>
 801df1c:	f04f 30ff 	mov.w	r0, #4294967295
 801df20:	b01d      	add	sp, #116	@ 0x74
 801df22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801df26:	89ab      	ldrh	r3, [r5, #12]
 801df28:	0598      	lsls	r0, r3, #22
 801df2a:	d4f7      	bmi.n	801df1c <_vfiprintf_r+0x44>
 801df2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801df2e:	f7fe fba9 	bl	801c684 <__retarget_lock_release_recursive>
 801df32:	e7f3      	b.n	801df1c <_vfiprintf_r+0x44>
 801df34:	2300      	movs	r3, #0
 801df36:	9309      	str	r3, [sp, #36]	@ 0x24
 801df38:	2320      	movs	r3, #32
 801df3a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801df3e:	f8cd 800c 	str.w	r8, [sp, #12]
 801df42:	2330      	movs	r3, #48	@ 0x30
 801df44:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801e0f4 <_vfiprintf_r+0x21c>
 801df48:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801df4c:	f04f 0901 	mov.w	r9, #1
 801df50:	4623      	mov	r3, r4
 801df52:	469a      	mov	sl, r3
 801df54:	f813 2b01 	ldrb.w	r2, [r3], #1
 801df58:	b10a      	cbz	r2, 801df5e <_vfiprintf_r+0x86>
 801df5a:	2a25      	cmp	r2, #37	@ 0x25
 801df5c:	d1f9      	bne.n	801df52 <_vfiprintf_r+0x7a>
 801df5e:	ebba 0b04 	subs.w	fp, sl, r4
 801df62:	d00b      	beq.n	801df7c <_vfiprintf_r+0xa4>
 801df64:	465b      	mov	r3, fp
 801df66:	4622      	mov	r2, r4
 801df68:	4629      	mov	r1, r5
 801df6a:	4630      	mov	r0, r6
 801df6c:	f7ff ffa2 	bl	801deb4 <__sfputs_r>
 801df70:	3001      	adds	r0, #1
 801df72:	f000 80a7 	beq.w	801e0c4 <_vfiprintf_r+0x1ec>
 801df76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801df78:	445a      	add	r2, fp
 801df7a:	9209      	str	r2, [sp, #36]	@ 0x24
 801df7c:	f89a 3000 	ldrb.w	r3, [sl]
 801df80:	2b00      	cmp	r3, #0
 801df82:	f000 809f 	beq.w	801e0c4 <_vfiprintf_r+0x1ec>
 801df86:	2300      	movs	r3, #0
 801df88:	f04f 32ff 	mov.w	r2, #4294967295
 801df8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801df90:	f10a 0a01 	add.w	sl, sl, #1
 801df94:	9304      	str	r3, [sp, #16]
 801df96:	9307      	str	r3, [sp, #28]
 801df98:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801df9c:	931a      	str	r3, [sp, #104]	@ 0x68
 801df9e:	4654      	mov	r4, sl
 801dfa0:	2205      	movs	r2, #5
 801dfa2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801dfa6:	4853      	ldr	r0, [pc, #332]	@ (801e0f4 <_vfiprintf_r+0x21c>)
 801dfa8:	f7e2 f8ea 	bl	8000180 <memchr>
 801dfac:	9a04      	ldr	r2, [sp, #16]
 801dfae:	b9d8      	cbnz	r0, 801dfe8 <_vfiprintf_r+0x110>
 801dfb0:	06d1      	lsls	r1, r2, #27
 801dfb2:	bf44      	itt	mi
 801dfb4:	2320      	movmi	r3, #32
 801dfb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801dfba:	0713      	lsls	r3, r2, #28
 801dfbc:	bf44      	itt	mi
 801dfbe:	232b      	movmi	r3, #43	@ 0x2b
 801dfc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801dfc4:	f89a 3000 	ldrb.w	r3, [sl]
 801dfc8:	2b2a      	cmp	r3, #42	@ 0x2a
 801dfca:	d015      	beq.n	801dff8 <_vfiprintf_r+0x120>
 801dfcc:	9a07      	ldr	r2, [sp, #28]
 801dfce:	4654      	mov	r4, sl
 801dfd0:	2000      	movs	r0, #0
 801dfd2:	f04f 0c0a 	mov.w	ip, #10
 801dfd6:	4621      	mov	r1, r4
 801dfd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 801dfdc:	3b30      	subs	r3, #48	@ 0x30
 801dfde:	2b09      	cmp	r3, #9
 801dfe0:	d94b      	bls.n	801e07a <_vfiprintf_r+0x1a2>
 801dfe2:	b1b0      	cbz	r0, 801e012 <_vfiprintf_r+0x13a>
 801dfe4:	9207      	str	r2, [sp, #28]
 801dfe6:	e014      	b.n	801e012 <_vfiprintf_r+0x13a>
 801dfe8:	eba0 0308 	sub.w	r3, r0, r8
 801dfec:	fa09 f303 	lsl.w	r3, r9, r3
 801dff0:	4313      	orrs	r3, r2
 801dff2:	9304      	str	r3, [sp, #16]
 801dff4:	46a2      	mov	sl, r4
 801dff6:	e7d2      	b.n	801df9e <_vfiprintf_r+0xc6>
 801dff8:	9b03      	ldr	r3, [sp, #12]
 801dffa:	1d19      	adds	r1, r3, #4
 801dffc:	681b      	ldr	r3, [r3, #0]
 801dffe:	9103      	str	r1, [sp, #12]
 801e000:	2b00      	cmp	r3, #0
 801e002:	bfbb      	ittet	lt
 801e004:	425b      	neglt	r3, r3
 801e006:	f042 0202 	orrlt.w	r2, r2, #2
 801e00a:	9307      	strge	r3, [sp, #28]
 801e00c:	9307      	strlt	r3, [sp, #28]
 801e00e:	bfb8      	it	lt
 801e010:	9204      	strlt	r2, [sp, #16]
 801e012:	7823      	ldrb	r3, [r4, #0]
 801e014:	2b2e      	cmp	r3, #46	@ 0x2e
 801e016:	d10a      	bne.n	801e02e <_vfiprintf_r+0x156>
 801e018:	7863      	ldrb	r3, [r4, #1]
 801e01a:	2b2a      	cmp	r3, #42	@ 0x2a
 801e01c:	d132      	bne.n	801e084 <_vfiprintf_r+0x1ac>
 801e01e:	9b03      	ldr	r3, [sp, #12]
 801e020:	1d1a      	adds	r2, r3, #4
 801e022:	681b      	ldr	r3, [r3, #0]
 801e024:	9203      	str	r2, [sp, #12]
 801e026:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801e02a:	3402      	adds	r4, #2
 801e02c:	9305      	str	r3, [sp, #20]
 801e02e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 801e0f8 <_vfiprintf_r+0x220>
 801e032:	7821      	ldrb	r1, [r4, #0]
 801e034:	2203      	movs	r2, #3
 801e036:	4650      	mov	r0, sl
 801e038:	f7e2 f8a2 	bl	8000180 <memchr>
 801e03c:	b138      	cbz	r0, 801e04e <_vfiprintf_r+0x176>
 801e03e:	9b04      	ldr	r3, [sp, #16]
 801e040:	eba0 000a 	sub.w	r0, r0, sl
 801e044:	2240      	movs	r2, #64	@ 0x40
 801e046:	4082      	lsls	r2, r0
 801e048:	4313      	orrs	r3, r2
 801e04a:	3401      	adds	r4, #1
 801e04c:	9304      	str	r3, [sp, #16]
 801e04e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e052:	482a      	ldr	r0, [pc, #168]	@ (801e0fc <_vfiprintf_r+0x224>)
 801e054:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801e058:	2206      	movs	r2, #6
 801e05a:	f7e2 f891 	bl	8000180 <memchr>
 801e05e:	2800      	cmp	r0, #0
 801e060:	d03f      	beq.n	801e0e2 <_vfiprintf_r+0x20a>
 801e062:	4b27      	ldr	r3, [pc, #156]	@ (801e100 <_vfiprintf_r+0x228>)
 801e064:	bb1b      	cbnz	r3, 801e0ae <_vfiprintf_r+0x1d6>
 801e066:	9b03      	ldr	r3, [sp, #12]
 801e068:	3307      	adds	r3, #7
 801e06a:	f023 0307 	bic.w	r3, r3, #7
 801e06e:	3308      	adds	r3, #8
 801e070:	9303      	str	r3, [sp, #12]
 801e072:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e074:	443b      	add	r3, r7
 801e076:	9309      	str	r3, [sp, #36]	@ 0x24
 801e078:	e76a      	b.n	801df50 <_vfiprintf_r+0x78>
 801e07a:	fb0c 3202 	mla	r2, ip, r2, r3
 801e07e:	460c      	mov	r4, r1
 801e080:	2001      	movs	r0, #1
 801e082:	e7a8      	b.n	801dfd6 <_vfiprintf_r+0xfe>
 801e084:	2300      	movs	r3, #0
 801e086:	3401      	adds	r4, #1
 801e088:	9305      	str	r3, [sp, #20]
 801e08a:	4619      	mov	r1, r3
 801e08c:	f04f 0c0a 	mov.w	ip, #10
 801e090:	4620      	mov	r0, r4
 801e092:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e096:	3a30      	subs	r2, #48	@ 0x30
 801e098:	2a09      	cmp	r2, #9
 801e09a:	d903      	bls.n	801e0a4 <_vfiprintf_r+0x1cc>
 801e09c:	2b00      	cmp	r3, #0
 801e09e:	d0c6      	beq.n	801e02e <_vfiprintf_r+0x156>
 801e0a0:	9105      	str	r1, [sp, #20]
 801e0a2:	e7c4      	b.n	801e02e <_vfiprintf_r+0x156>
 801e0a4:	fb0c 2101 	mla	r1, ip, r1, r2
 801e0a8:	4604      	mov	r4, r0
 801e0aa:	2301      	movs	r3, #1
 801e0ac:	e7f0      	b.n	801e090 <_vfiprintf_r+0x1b8>
 801e0ae:	ab03      	add	r3, sp, #12
 801e0b0:	9300      	str	r3, [sp, #0]
 801e0b2:	462a      	mov	r2, r5
 801e0b4:	4b13      	ldr	r3, [pc, #76]	@ (801e104 <_vfiprintf_r+0x22c>)
 801e0b6:	a904      	add	r1, sp, #16
 801e0b8:	4630      	mov	r0, r6
 801e0ba:	f7fd fda7 	bl	801bc0c <_printf_float>
 801e0be:	4607      	mov	r7, r0
 801e0c0:	1c78      	adds	r0, r7, #1
 801e0c2:	d1d6      	bne.n	801e072 <_vfiprintf_r+0x19a>
 801e0c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801e0c6:	07d9      	lsls	r1, r3, #31
 801e0c8:	d405      	bmi.n	801e0d6 <_vfiprintf_r+0x1fe>
 801e0ca:	89ab      	ldrh	r3, [r5, #12]
 801e0cc:	059a      	lsls	r2, r3, #22
 801e0ce:	d402      	bmi.n	801e0d6 <_vfiprintf_r+0x1fe>
 801e0d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801e0d2:	f7fe fad7 	bl	801c684 <__retarget_lock_release_recursive>
 801e0d6:	89ab      	ldrh	r3, [r5, #12]
 801e0d8:	065b      	lsls	r3, r3, #25
 801e0da:	f53f af1f 	bmi.w	801df1c <_vfiprintf_r+0x44>
 801e0de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e0e0:	e71e      	b.n	801df20 <_vfiprintf_r+0x48>
 801e0e2:	ab03      	add	r3, sp, #12
 801e0e4:	9300      	str	r3, [sp, #0]
 801e0e6:	462a      	mov	r2, r5
 801e0e8:	4b06      	ldr	r3, [pc, #24]	@ (801e104 <_vfiprintf_r+0x22c>)
 801e0ea:	a904      	add	r1, sp, #16
 801e0ec:	4630      	mov	r0, r6
 801e0ee:	f7fe f827 	bl	801c140 <_printf_i>
 801e0f2:	e7e4      	b.n	801e0be <_vfiprintf_r+0x1e6>
 801e0f4:	0801f70c 	.word	0x0801f70c
 801e0f8:	0801f712 	.word	0x0801f712
 801e0fc:	0801f716 	.word	0x0801f716
 801e100:	0801bc0d 	.word	0x0801bc0d
 801e104:	0801deb5 	.word	0x0801deb5

0801e108 <__swbuf_r>:
 801e108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e10a:	460e      	mov	r6, r1
 801e10c:	4614      	mov	r4, r2
 801e10e:	4605      	mov	r5, r0
 801e110:	b118      	cbz	r0, 801e11a <__swbuf_r+0x12>
 801e112:	6a03      	ldr	r3, [r0, #32]
 801e114:	b90b      	cbnz	r3, 801e11a <__swbuf_r+0x12>
 801e116:	f7fe f9bd 	bl	801c494 <__sinit>
 801e11a:	69a3      	ldr	r3, [r4, #24]
 801e11c:	60a3      	str	r3, [r4, #8]
 801e11e:	89a3      	ldrh	r3, [r4, #12]
 801e120:	071a      	lsls	r2, r3, #28
 801e122:	d501      	bpl.n	801e128 <__swbuf_r+0x20>
 801e124:	6923      	ldr	r3, [r4, #16]
 801e126:	b943      	cbnz	r3, 801e13a <__swbuf_r+0x32>
 801e128:	4621      	mov	r1, r4
 801e12a:	4628      	mov	r0, r5
 801e12c:	f000 f82a 	bl	801e184 <__swsetup_r>
 801e130:	b118      	cbz	r0, 801e13a <__swbuf_r+0x32>
 801e132:	f04f 37ff 	mov.w	r7, #4294967295
 801e136:	4638      	mov	r0, r7
 801e138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e13a:	6823      	ldr	r3, [r4, #0]
 801e13c:	6922      	ldr	r2, [r4, #16]
 801e13e:	1a98      	subs	r0, r3, r2
 801e140:	6963      	ldr	r3, [r4, #20]
 801e142:	b2f6      	uxtb	r6, r6
 801e144:	4283      	cmp	r3, r0
 801e146:	4637      	mov	r7, r6
 801e148:	dc05      	bgt.n	801e156 <__swbuf_r+0x4e>
 801e14a:	4621      	mov	r1, r4
 801e14c:	4628      	mov	r0, r5
 801e14e:	f7ff fdeb 	bl	801dd28 <_fflush_r>
 801e152:	2800      	cmp	r0, #0
 801e154:	d1ed      	bne.n	801e132 <__swbuf_r+0x2a>
 801e156:	68a3      	ldr	r3, [r4, #8]
 801e158:	3b01      	subs	r3, #1
 801e15a:	60a3      	str	r3, [r4, #8]
 801e15c:	6823      	ldr	r3, [r4, #0]
 801e15e:	1c5a      	adds	r2, r3, #1
 801e160:	6022      	str	r2, [r4, #0]
 801e162:	701e      	strb	r6, [r3, #0]
 801e164:	6962      	ldr	r2, [r4, #20]
 801e166:	1c43      	adds	r3, r0, #1
 801e168:	429a      	cmp	r2, r3
 801e16a:	d004      	beq.n	801e176 <__swbuf_r+0x6e>
 801e16c:	89a3      	ldrh	r3, [r4, #12]
 801e16e:	07db      	lsls	r3, r3, #31
 801e170:	d5e1      	bpl.n	801e136 <__swbuf_r+0x2e>
 801e172:	2e0a      	cmp	r6, #10
 801e174:	d1df      	bne.n	801e136 <__swbuf_r+0x2e>
 801e176:	4621      	mov	r1, r4
 801e178:	4628      	mov	r0, r5
 801e17a:	f7ff fdd5 	bl	801dd28 <_fflush_r>
 801e17e:	2800      	cmp	r0, #0
 801e180:	d0d9      	beq.n	801e136 <__swbuf_r+0x2e>
 801e182:	e7d6      	b.n	801e132 <__swbuf_r+0x2a>

0801e184 <__swsetup_r>:
 801e184:	b538      	push	{r3, r4, r5, lr}
 801e186:	4b29      	ldr	r3, [pc, #164]	@ (801e22c <__swsetup_r+0xa8>)
 801e188:	4605      	mov	r5, r0
 801e18a:	6818      	ldr	r0, [r3, #0]
 801e18c:	460c      	mov	r4, r1
 801e18e:	b118      	cbz	r0, 801e198 <__swsetup_r+0x14>
 801e190:	6a03      	ldr	r3, [r0, #32]
 801e192:	b90b      	cbnz	r3, 801e198 <__swsetup_r+0x14>
 801e194:	f7fe f97e 	bl	801c494 <__sinit>
 801e198:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e19c:	0719      	lsls	r1, r3, #28
 801e19e:	d422      	bmi.n	801e1e6 <__swsetup_r+0x62>
 801e1a0:	06da      	lsls	r2, r3, #27
 801e1a2:	d407      	bmi.n	801e1b4 <__swsetup_r+0x30>
 801e1a4:	2209      	movs	r2, #9
 801e1a6:	602a      	str	r2, [r5, #0]
 801e1a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e1ac:	81a3      	strh	r3, [r4, #12]
 801e1ae:	f04f 30ff 	mov.w	r0, #4294967295
 801e1b2:	e033      	b.n	801e21c <__swsetup_r+0x98>
 801e1b4:	0758      	lsls	r0, r3, #29
 801e1b6:	d512      	bpl.n	801e1de <__swsetup_r+0x5a>
 801e1b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801e1ba:	b141      	cbz	r1, 801e1ce <__swsetup_r+0x4a>
 801e1bc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801e1c0:	4299      	cmp	r1, r3
 801e1c2:	d002      	beq.n	801e1ca <__swsetup_r+0x46>
 801e1c4:	4628      	mov	r0, r5
 801e1c6:	f7ff f8b7 	bl	801d338 <_free_r>
 801e1ca:	2300      	movs	r3, #0
 801e1cc:	6363      	str	r3, [r4, #52]	@ 0x34
 801e1ce:	89a3      	ldrh	r3, [r4, #12]
 801e1d0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801e1d4:	81a3      	strh	r3, [r4, #12]
 801e1d6:	2300      	movs	r3, #0
 801e1d8:	6063      	str	r3, [r4, #4]
 801e1da:	6923      	ldr	r3, [r4, #16]
 801e1dc:	6023      	str	r3, [r4, #0]
 801e1de:	89a3      	ldrh	r3, [r4, #12]
 801e1e0:	f043 0308 	orr.w	r3, r3, #8
 801e1e4:	81a3      	strh	r3, [r4, #12]
 801e1e6:	6923      	ldr	r3, [r4, #16]
 801e1e8:	b94b      	cbnz	r3, 801e1fe <__swsetup_r+0x7a>
 801e1ea:	89a3      	ldrh	r3, [r4, #12]
 801e1ec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801e1f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801e1f4:	d003      	beq.n	801e1fe <__swsetup_r+0x7a>
 801e1f6:	4621      	mov	r1, r4
 801e1f8:	4628      	mov	r0, r5
 801e1fa:	f000 f883 	bl	801e304 <__smakebuf_r>
 801e1fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e202:	f013 0201 	ands.w	r2, r3, #1
 801e206:	d00a      	beq.n	801e21e <__swsetup_r+0x9a>
 801e208:	2200      	movs	r2, #0
 801e20a:	60a2      	str	r2, [r4, #8]
 801e20c:	6962      	ldr	r2, [r4, #20]
 801e20e:	4252      	negs	r2, r2
 801e210:	61a2      	str	r2, [r4, #24]
 801e212:	6922      	ldr	r2, [r4, #16]
 801e214:	b942      	cbnz	r2, 801e228 <__swsetup_r+0xa4>
 801e216:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801e21a:	d1c5      	bne.n	801e1a8 <__swsetup_r+0x24>
 801e21c:	bd38      	pop	{r3, r4, r5, pc}
 801e21e:	0799      	lsls	r1, r3, #30
 801e220:	bf58      	it	pl
 801e222:	6962      	ldrpl	r2, [r4, #20]
 801e224:	60a2      	str	r2, [r4, #8]
 801e226:	e7f4      	b.n	801e212 <__swsetup_r+0x8e>
 801e228:	2000      	movs	r0, #0
 801e22a:	e7f7      	b.n	801e21c <__swsetup_r+0x98>
 801e22c:	2000014c 	.word	0x2000014c

0801e230 <_raise_r>:
 801e230:	291f      	cmp	r1, #31
 801e232:	b538      	push	{r3, r4, r5, lr}
 801e234:	4605      	mov	r5, r0
 801e236:	460c      	mov	r4, r1
 801e238:	d904      	bls.n	801e244 <_raise_r+0x14>
 801e23a:	2316      	movs	r3, #22
 801e23c:	6003      	str	r3, [r0, #0]
 801e23e:	f04f 30ff 	mov.w	r0, #4294967295
 801e242:	bd38      	pop	{r3, r4, r5, pc}
 801e244:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801e246:	b112      	cbz	r2, 801e24e <_raise_r+0x1e>
 801e248:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801e24c:	b94b      	cbnz	r3, 801e262 <_raise_r+0x32>
 801e24e:	4628      	mov	r0, r5
 801e250:	f000 f830 	bl	801e2b4 <_getpid_r>
 801e254:	4622      	mov	r2, r4
 801e256:	4601      	mov	r1, r0
 801e258:	4628      	mov	r0, r5
 801e25a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e25e:	f000 b817 	b.w	801e290 <_kill_r>
 801e262:	2b01      	cmp	r3, #1
 801e264:	d00a      	beq.n	801e27c <_raise_r+0x4c>
 801e266:	1c59      	adds	r1, r3, #1
 801e268:	d103      	bne.n	801e272 <_raise_r+0x42>
 801e26a:	2316      	movs	r3, #22
 801e26c:	6003      	str	r3, [r0, #0]
 801e26e:	2001      	movs	r0, #1
 801e270:	e7e7      	b.n	801e242 <_raise_r+0x12>
 801e272:	2100      	movs	r1, #0
 801e274:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801e278:	4620      	mov	r0, r4
 801e27a:	4798      	blx	r3
 801e27c:	2000      	movs	r0, #0
 801e27e:	e7e0      	b.n	801e242 <_raise_r+0x12>

0801e280 <raise>:
 801e280:	4b02      	ldr	r3, [pc, #8]	@ (801e28c <raise+0xc>)
 801e282:	4601      	mov	r1, r0
 801e284:	6818      	ldr	r0, [r3, #0]
 801e286:	f7ff bfd3 	b.w	801e230 <_raise_r>
 801e28a:	bf00      	nop
 801e28c:	2000014c 	.word	0x2000014c

0801e290 <_kill_r>:
 801e290:	b538      	push	{r3, r4, r5, lr}
 801e292:	4d07      	ldr	r5, [pc, #28]	@ (801e2b0 <_kill_r+0x20>)
 801e294:	2300      	movs	r3, #0
 801e296:	4604      	mov	r4, r0
 801e298:	4608      	mov	r0, r1
 801e29a:	4611      	mov	r1, r2
 801e29c:	602b      	str	r3, [r5, #0]
 801e29e:	f7e4 f861 	bl	8002364 <_kill>
 801e2a2:	1c43      	adds	r3, r0, #1
 801e2a4:	d102      	bne.n	801e2ac <_kill_r+0x1c>
 801e2a6:	682b      	ldr	r3, [r5, #0]
 801e2a8:	b103      	cbz	r3, 801e2ac <_kill_r+0x1c>
 801e2aa:	6023      	str	r3, [r4, #0]
 801e2ac:	bd38      	pop	{r3, r4, r5, pc}
 801e2ae:	bf00      	nop
 801e2b0:	200024fc 	.word	0x200024fc

0801e2b4 <_getpid_r>:
 801e2b4:	f7e4 b84f 	b.w	8002356 <_getpid>

0801e2b8 <__swhatbuf_r>:
 801e2b8:	b570      	push	{r4, r5, r6, lr}
 801e2ba:	460c      	mov	r4, r1
 801e2bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e2c0:	2900      	cmp	r1, #0
 801e2c2:	b096      	sub	sp, #88	@ 0x58
 801e2c4:	4615      	mov	r5, r2
 801e2c6:	461e      	mov	r6, r3
 801e2c8:	da0d      	bge.n	801e2e6 <__swhatbuf_r+0x2e>
 801e2ca:	89a3      	ldrh	r3, [r4, #12]
 801e2cc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801e2d0:	f04f 0100 	mov.w	r1, #0
 801e2d4:	bf14      	ite	ne
 801e2d6:	2340      	movne	r3, #64	@ 0x40
 801e2d8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801e2dc:	2000      	movs	r0, #0
 801e2de:	6031      	str	r1, [r6, #0]
 801e2e0:	602b      	str	r3, [r5, #0]
 801e2e2:	b016      	add	sp, #88	@ 0x58
 801e2e4:	bd70      	pop	{r4, r5, r6, pc}
 801e2e6:	466a      	mov	r2, sp
 801e2e8:	f000 f848 	bl	801e37c <_fstat_r>
 801e2ec:	2800      	cmp	r0, #0
 801e2ee:	dbec      	blt.n	801e2ca <__swhatbuf_r+0x12>
 801e2f0:	9901      	ldr	r1, [sp, #4]
 801e2f2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801e2f6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801e2fa:	4259      	negs	r1, r3
 801e2fc:	4159      	adcs	r1, r3
 801e2fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801e302:	e7eb      	b.n	801e2dc <__swhatbuf_r+0x24>

0801e304 <__smakebuf_r>:
 801e304:	898b      	ldrh	r3, [r1, #12]
 801e306:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801e308:	079d      	lsls	r5, r3, #30
 801e30a:	4606      	mov	r6, r0
 801e30c:	460c      	mov	r4, r1
 801e30e:	d507      	bpl.n	801e320 <__smakebuf_r+0x1c>
 801e310:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801e314:	6023      	str	r3, [r4, #0]
 801e316:	6123      	str	r3, [r4, #16]
 801e318:	2301      	movs	r3, #1
 801e31a:	6163      	str	r3, [r4, #20]
 801e31c:	b003      	add	sp, #12
 801e31e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e320:	ab01      	add	r3, sp, #4
 801e322:	466a      	mov	r2, sp
 801e324:	f7ff ffc8 	bl	801e2b8 <__swhatbuf_r>
 801e328:	9f00      	ldr	r7, [sp, #0]
 801e32a:	4605      	mov	r5, r0
 801e32c:	4639      	mov	r1, r7
 801e32e:	4630      	mov	r0, r6
 801e330:	f7ff f876 	bl	801d420 <_malloc_r>
 801e334:	b948      	cbnz	r0, 801e34a <__smakebuf_r+0x46>
 801e336:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e33a:	059a      	lsls	r2, r3, #22
 801e33c:	d4ee      	bmi.n	801e31c <__smakebuf_r+0x18>
 801e33e:	f023 0303 	bic.w	r3, r3, #3
 801e342:	f043 0302 	orr.w	r3, r3, #2
 801e346:	81a3      	strh	r3, [r4, #12]
 801e348:	e7e2      	b.n	801e310 <__smakebuf_r+0xc>
 801e34a:	89a3      	ldrh	r3, [r4, #12]
 801e34c:	6020      	str	r0, [r4, #0]
 801e34e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801e352:	81a3      	strh	r3, [r4, #12]
 801e354:	9b01      	ldr	r3, [sp, #4]
 801e356:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801e35a:	b15b      	cbz	r3, 801e374 <__smakebuf_r+0x70>
 801e35c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e360:	4630      	mov	r0, r6
 801e362:	f000 f81d 	bl	801e3a0 <_isatty_r>
 801e366:	b128      	cbz	r0, 801e374 <__smakebuf_r+0x70>
 801e368:	89a3      	ldrh	r3, [r4, #12]
 801e36a:	f023 0303 	bic.w	r3, r3, #3
 801e36e:	f043 0301 	orr.w	r3, r3, #1
 801e372:	81a3      	strh	r3, [r4, #12]
 801e374:	89a3      	ldrh	r3, [r4, #12]
 801e376:	431d      	orrs	r5, r3
 801e378:	81a5      	strh	r5, [r4, #12]
 801e37a:	e7cf      	b.n	801e31c <__smakebuf_r+0x18>

0801e37c <_fstat_r>:
 801e37c:	b538      	push	{r3, r4, r5, lr}
 801e37e:	4d07      	ldr	r5, [pc, #28]	@ (801e39c <_fstat_r+0x20>)
 801e380:	2300      	movs	r3, #0
 801e382:	4604      	mov	r4, r0
 801e384:	4608      	mov	r0, r1
 801e386:	4611      	mov	r1, r2
 801e388:	602b      	str	r3, [r5, #0]
 801e38a:	f7e4 f84a 	bl	8002422 <_fstat>
 801e38e:	1c43      	adds	r3, r0, #1
 801e390:	d102      	bne.n	801e398 <_fstat_r+0x1c>
 801e392:	682b      	ldr	r3, [r5, #0]
 801e394:	b103      	cbz	r3, 801e398 <_fstat_r+0x1c>
 801e396:	6023      	str	r3, [r4, #0]
 801e398:	bd38      	pop	{r3, r4, r5, pc}
 801e39a:	bf00      	nop
 801e39c:	200024fc 	.word	0x200024fc

0801e3a0 <_isatty_r>:
 801e3a0:	b538      	push	{r3, r4, r5, lr}
 801e3a2:	4d06      	ldr	r5, [pc, #24]	@ (801e3bc <_isatty_r+0x1c>)
 801e3a4:	2300      	movs	r3, #0
 801e3a6:	4604      	mov	r4, r0
 801e3a8:	4608      	mov	r0, r1
 801e3aa:	602b      	str	r3, [r5, #0]
 801e3ac:	f7e4 f848 	bl	8002440 <_isatty>
 801e3b0:	1c43      	adds	r3, r0, #1
 801e3b2:	d102      	bne.n	801e3ba <_isatty_r+0x1a>
 801e3b4:	682b      	ldr	r3, [r5, #0]
 801e3b6:	b103      	cbz	r3, 801e3ba <_isatty_r+0x1a>
 801e3b8:	6023      	str	r3, [r4, #0]
 801e3ba:	bd38      	pop	{r3, r4, r5, pc}
 801e3bc:	200024fc 	.word	0x200024fc

0801e3c0 <floor>:
 801e3c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e3c4:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801e3c8:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 801e3cc:	2e13      	cmp	r6, #19
 801e3ce:	4602      	mov	r2, r0
 801e3d0:	460b      	mov	r3, r1
 801e3d2:	460c      	mov	r4, r1
 801e3d4:	4605      	mov	r5, r0
 801e3d6:	4680      	mov	r8, r0
 801e3d8:	dc35      	bgt.n	801e446 <floor+0x86>
 801e3da:	2e00      	cmp	r6, #0
 801e3dc:	da17      	bge.n	801e40e <floor+0x4e>
 801e3de:	a334      	add	r3, pc, #208	@ (adr r3, 801e4b0 <floor+0xf0>)
 801e3e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e3e4:	f7e1 ff2a 	bl	800023c <__adddf3>
 801e3e8:	2200      	movs	r2, #0
 801e3ea:	2300      	movs	r3, #0
 801e3ec:	f7e2 fb6c 	bl	8000ac8 <__aeabi_dcmpgt>
 801e3f0:	b150      	cbz	r0, 801e408 <floor+0x48>
 801e3f2:	2c00      	cmp	r4, #0
 801e3f4:	da57      	bge.n	801e4a6 <floor+0xe6>
 801e3f6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801e3fa:	432c      	orrs	r4, r5
 801e3fc:	2500      	movs	r5, #0
 801e3fe:	42ac      	cmp	r4, r5
 801e400:	4c2d      	ldr	r4, [pc, #180]	@ (801e4b8 <floor+0xf8>)
 801e402:	bf08      	it	eq
 801e404:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 801e408:	4623      	mov	r3, r4
 801e40a:	462a      	mov	r2, r5
 801e40c:	e024      	b.n	801e458 <floor+0x98>
 801e40e:	4f2b      	ldr	r7, [pc, #172]	@ (801e4bc <floor+0xfc>)
 801e410:	4137      	asrs	r7, r6
 801e412:	ea01 0c07 	and.w	ip, r1, r7
 801e416:	ea5c 0c00 	orrs.w	ip, ip, r0
 801e41a:	d01d      	beq.n	801e458 <floor+0x98>
 801e41c:	a324      	add	r3, pc, #144	@ (adr r3, 801e4b0 <floor+0xf0>)
 801e41e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e422:	f7e1 ff0b 	bl	800023c <__adddf3>
 801e426:	2200      	movs	r2, #0
 801e428:	2300      	movs	r3, #0
 801e42a:	f7e2 fb4d 	bl	8000ac8 <__aeabi_dcmpgt>
 801e42e:	2800      	cmp	r0, #0
 801e430:	d0ea      	beq.n	801e408 <floor+0x48>
 801e432:	2c00      	cmp	r4, #0
 801e434:	bfbe      	ittt	lt
 801e436:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 801e43a:	4133      	asrlt	r3, r6
 801e43c:	18e4      	addlt	r4, r4, r3
 801e43e:	ea24 0407 	bic.w	r4, r4, r7
 801e442:	2500      	movs	r5, #0
 801e444:	e7e0      	b.n	801e408 <floor+0x48>
 801e446:	2e33      	cmp	r6, #51	@ 0x33
 801e448:	dd0a      	ble.n	801e460 <floor+0xa0>
 801e44a:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801e44e:	d103      	bne.n	801e458 <floor+0x98>
 801e450:	f7e1 fef4 	bl	800023c <__adddf3>
 801e454:	4602      	mov	r2, r0
 801e456:	460b      	mov	r3, r1
 801e458:	4610      	mov	r0, r2
 801e45a:	4619      	mov	r1, r3
 801e45c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e460:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 801e464:	f04f 3cff 	mov.w	ip, #4294967295
 801e468:	fa2c f707 	lsr.w	r7, ip, r7
 801e46c:	4207      	tst	r7, r0
 801e46e:	d0f3      	beq.n	801e458 <floor+0x98>
 801e470:	a30f      	add	r3, pc, #60	@ (adr r3, 801e4b0 <floor+0xf0>)
 801e472:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e476:	f7e1 fee1 	bl	800023c <__adddf3>
 801e47a:	2200      	movs	r2, #0
 801e47c:	2300      	movs	r3, #0
 801e47e:	f7e2 fb23 	bl	8000ac8 <__aeabi_dcmpgt>
 801e482:	2800      	cmp	r0, #0
 801e484:	d0c0      	beq.n	801e408 <floor+0x48>
 801e486:	2c00      	cmp	r4, #0
 801e488:	da0a      	bge.n	801e4a0 <floor+0xe0>
 801e48a:	2e14      	cmp	r6, #20
 801e48c:	d101      	bne.n	801e492 <floor+0xd2>
 801e48e:	3401      	adds	r4, #1
 801e490:	e006      	b.n	801e4a0 <floor+0xe0>
 801e492:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 801e496:	2301      	movs	r3, #1
 801e498:	40b3      	lsls	r3, r6
 801e49a:	441d      	add	r5, r3
 801e49c:	4545      	cmp	r5, r8
 801e49e:	d3f6      	bcc.n	801e48e <floor+0xce>
 801e4a0:	ea25 0507 	bic.w	r5, r5, r7
 801e4a4:	e7b0      	b.n	801e408 <floor+0x48>
 801e4a6:	2500      	movs	r5, #0
 801e4a8:	462c      	mov	r4, r5
 801e4aa:	e7ad      	b.n	801e408 <floor+0x48>
 801e4ac:	f3af 8000 	nop.w
 801e4b0:	8800759c 	.word	0x8800759c
 801e4b4:	7e37e43c 	.word	0x7e37e43c
 801e4b8:	bff00000 	.word	0xbff00000
 801e4bc:	000fffff 	.word	0x000fffff

0801e4c0 <_init>:
 801e4c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e4c2:	bf00      	nop
 801e4c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e4c6:	bc08      	pop	{r3}
 801e4c8:	469e      	mov	lr, r3
 801e4ca:	4770      	bx	lr

0801e4cc <_fini>:
 801e4cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e4ce:	bf00      	nop
 801e4d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e4d2:	bc08      	pop	{r3}
 801e4d4:	469e      	mov	lr, r3
 801e4d6:	4770      	bx	lr
